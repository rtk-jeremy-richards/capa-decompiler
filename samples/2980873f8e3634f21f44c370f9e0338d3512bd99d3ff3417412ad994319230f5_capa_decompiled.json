{
    "0041c6c0": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nuint fcn.0041c6c0(void)\n\n{\n    uint var_8e7h;\n    uint var_86bh;\n    uint var_798h;\n    uint var_594h;\n    uint var_426h;\n    uint var_31eh;\n    uint var_27dh;\n    uint var_25dh;\n    uint var_aeh;\n    uint var_4h;\n    \n    return *(*0x42bc24 + -4);\n}\n",
        "token_count": 99
    },
    "null": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\n// WARNING: Unable to track spacebase fully for stack\n\nuint __cdecl entry0(uint arg_8h)\n\n{\n    uint *puVar1;\n    int32_t arg_8h_00;\n    uint uVar2;\n    uint var_10h;\n    uint var_8h;\n    uint var_4h;\n    \n    *0x42bbfc = &stack0xfffffffc;\n    *0x42bc1c = arg_8h;\n    fcn.0041cb40();\n    fcn.0041ce70();\n    fcn.0041cb00();\n    fcn.0041ca50(2);\n    *0x42bc08 = 0;\n    *0x42bc0c = 0;\n    *0x42bc04 = 1;\n    do {\n        arg_8h_00 = fcn.0041c920(*0x42bb5c, *0x42bbe8);\n        if (*0x42bbe4 <= *0x42bc08) break;\n        fcn.0041c870(arg_8h_00);\n        *0x42bc0c = *0x42bc04 + *0x42bb5c + *0x42bc0c;\n        *0x42bc08 = *0x42bb5c + *0x42bc08;\n        *0x42bbe8 = *0x42bbe8 - arg_8h_00;\n        *0x42bbec = arg_8h_00;\n    } while (*0x42bc28 != 0);\n    fcn.0041cfb0();\n    puVar1 = *0x42bbfc;\n    **0x42bbfc = *0x42bc18;\n    puVar1[-1] = *0x42bbf0;\n    uVar2 = *0x42bc30;\n    puVar1[-2] = *0x42bbf4;\n    return uVar2;\n}\n",
        "token_count": 430
    },
    "0041cc00": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t fcn.0041cc00(void)\n\n{\n    int32_t iVar1;\n    uint var_1358h;\n    uint var_1354h;\n    uint var_1350h;\n    uint var_134ch;\n    uint var_1207h;\n    uint var_11e7h;\n    uint var_1074h;\n    uint var_ffch;\n    uint var_f7fh;\n    uint var_d90h;\n    uint var_c0dh;\n    uint var_ba5h;\n    uint var_aceh;\n    uint var_857h;\n    uint var_802h;\n    uint var_731h;\n    uint var_5d2h;\n    uint var_4b9h;\n    uint var_3c5h;\n    uint var_179h;\n    uint var_156h;\n    uint var_144h;\n    uint var_140h;\n    uint uStack36;\n    uint uStack32;\n    uint uStack28;\n    uint uStack24;\n    uint *puStack20;\n    uint *var_ch;\n    uint *var_8h;\n    uint var_4h;\n    \n    var_4h = 0x41cc0d;\n    fcn.0041d020();\n    var_ch = 0x12c;\n    var_4h = 0;\n    var_8h = 0x41cc2a;\n    *0x42bc18 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)();\n    *0x42bc64 = *(*0x42bc18 + 0x3c);\n    do {\n        while( true ) {\n            var_8h = &fcn.0041cc00::var_ch;\n            var_ch = &fcn.0041cc00::var_140h;\n            puStack20 = &fcn.0041cc00::var_4h;\n            uStack24 = 0;\n            uStack28 = 0x42bc40;\n            uStack32 = *0x42bc70;\n            uStack36 = 0x41cc91;\n            iVar1 = (**0x42bc50)();\n            if (iVar1 == 0) break;\n            var_8h = 0x41cc9a;\n            fcn.0041cc00();\n        }\n    } while (var_140h._1_1_ != 'A');\n    if (var_140h._3_1_ == 't') {\n        *0x42bc48 = 0x40472d;\n    }\n    *0x42bc48 = *0x42bc48 + -0x3728;\n    if (var_140h._3_1_ == '1') {\n        *0x42bc48 = 0x4024ca;\n    }\n    *0x42bc48 = *0x42bc48 + -1;\n    *0x42bb98 = *0x42bb98 - 0x14d;\n    *0x42bc6c = *(*0x42bc18 + *0x42bc64 + 0x50);\n    if ((*0x42bc18 < *0x42bb98) && (*0x42bb98 < *0x42bc18 + *0x42bc6c)) {\n        *0x42bbf0 = 0;\n    }\n    else {\n        *0x42bc18 = *0x42bc1c;\n        *0x42bbf0 = 1;\n    }\n    return *0x42bc48;\n}\n",
        "token_count": 768
    },
    "0041ce70": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __fastcall fcn.0041ce70(uint param_1)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    uint var_4h;\n    \n    uVar1 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(0x42bba8, \"RegOpenKeyA\", param_1);\n    *0x42bc58 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1);\n    uVar1 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(\"advapi32\", \"RegQueryValueExA\");\n    *0x42bc50 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1);\n    **0x42bb94 = 0x69;\n    iVar2 = (**0x42bc58)(*0x42bb50 + -300, *0x42bb94, 0x42bc70);\n    if (iVar2 == 0) {\n        return;\n    }\n    do {\n    // WARNING: Do nothing block with infinite loop\n    } while( true );\n}\n",
        "token_count": 245
    },
    "0041c870": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain loop"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041c870(uint32_t arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint var_20h;\n    uint var_18h;\n    uint var_10h;\n    uint var_ch;\n    uint32_t var_8h;\n    uint var_4h;\n    \n    iVar1 = *0x42bc28 + *0x42bc08;\n    iVar2 = *0x42bc24 + *0x42bc0c;\n    for (var_8h = 0; var_8h < arg_8h; var_8h = var_8h + 1) {\n        *(iVar1 + var_8h) = 0;\n        *(iVar1 + var_8h + *0x42bc3c) = *(iVar2 + var_8h + *0x42bc3c);\n    }\n    return;\n}\n",
        "token_count": 205
    },
    "0041c9b0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.0041c9b0(void)\n\n{\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_4h;\n    \n    if (*0x42bbe4 == 0) {\n        return;\n    }\n    *0x42bc74 = *0x42bc28;\n    fcn.0041cfd0(0x45b, 0);\n    *0x42bc44 = 0xf7;\n    *0x42bc60 = *0x42bc74;\n    *0x42bc68 = *0x42bc60;\n    fcn.0041cb80(&stack0xfffffffc, 0x41ca36);\n    return;\n}\n",
        "token_count": 167
    },
    "0041cb00": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.0041cb00(void)\n\n{\n    fcn.0041cc00();\n    fcn.0041cc00();\n    fcn.0041cc00();\n    fcn.0041cc00();\n    fcn.0041cc00();\n    fcn.0041cc00();\n    *0x42bc24 = fcn.0041cc00();\n    *0x42bbe4 = fcn.0041c6c0(1);\n    return;\n}\n",
        "token_count": 106
    },
    "0041cb40": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.0041cb40(void)\n\n{\n    for (*0x42bc30 = 0x16; *0x42bc30 < 0x17f2a47; *0x42bc30 = *0x42bc30 + 1) {\n    }\n    return;\n}\n",
        "token_count": 66
    },
    "0041cb80": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.0041cb80(void)\n\n{\n    *0x42bc5c = *0x42bc44 - 1;\n    *0x42bc6c = **0x42bc60 ^ *0x42bc44;\n    *0x42bc4c = *0x42bc6c;\n    **0x42bc60 = *0x42bc6c;\n    return;\n}\n",
        "token_count": 91
    },
    "0041cf80": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0041cf80(int32_t arg_8h)\n\n{\n    uint var_4h;\n    \n    return arg_8h * 0x229;\n}\n",
        "token_count": 43
    },
    "0041cfb0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.0041cfb0(void)\n\n{\n    fcn.0041c9b0(0x2a, 0x1100);\n    return;\n}\n",
        "token_count": 39
    },
    "0041d010": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0041d010(int32_t arg_8h)\n\n{\n    return arg_8h + 0x13f7;\n}\n",
        "token_count": 37
    },
    "0041c920": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.0041c920(uint32_t arg_8h, uint32_t arg_ch)\n\n{\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    if (arg_8h < arg_ch) {\n        arg_ch = arg_8h;\n    }\n    return arg_ch;\n}\n",
        "token_count": 77
    }
}