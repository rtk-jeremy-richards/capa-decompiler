{
    "01001320": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.01001320(char32_t arg_8h)\n\n{\n    uint8_t uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    int32_t var_4h;\n    \n    var_4h = 0x2274;\n    if (*0x105b05c <= arg_8h) {\n        str.vw8[7] = *0x105b0d8;\n        var_4h = (*0x105b0d8 * -8 + 0x6d95) - arg_8h;\n    }\n    iVar4 = *0x105b0d4 + 4 + var_4h;\n    iVar2 = (var_4h + 0x6dc8) - iVar4;\n    uVar1 = *0x105b0d0 + iVar4 * '\\b';\n    if (uVar1 <= var_4h * 0x10c7f + iVar2) {\n        *0x105b03c = *0x105b03c - arg_8h;\n    }\n    uVar3 = ((iVar4 + -4) - *0x105b0d0) + iVar2;\n    var_4h = *0x105b0d0 + 0x33 + uVar3;\n    if (*0x105b04c == 0xf52) {\n        uVar1 = uVar1 - str.vw8[6];\n        var_4h = uVar1 + 5 + uVar1;\n    }\n    iVar2 = *0x105b0d0 - ((uVar3 - 0x40) + var_4h);\n    *0x105b0d4 = iVar2 + (iVar4 * '\\x7f' + *0x105b0d0) * '\\b';\n    for (*0x105d4cc = 2; *0x105d4cc < 0x18; *0x105d4cc = *0x105d4cc + 1) {\n        if (arg_8h != *0x105b034) {\n            var_4h = var_4h * L\"v\u00eaw=\u00a5\u00c78\\x195+a\\x1bd\\f`q\u00b5\"[*0x105d4cc];\n            *0x105b0d4 = *0x105b0d4 * '\\x7f' + arg_8h;\n            if (arg_8h == str.vw8[0]) break;\n        }\n    }\n    iVar4 = uVar3 + 4 + iVar2;\n    uVar5 = (var_4h + 0x6dc8) - iVar4;\n    uVar6 = uVar5 - uVar3;\n    *0x105b008 = uVar6 + uVar3;\n    *0x105b00c = CARRY4(uVar6, uVar3) - (uVar5 < uVar3);\n    *0x105b0d0 = iVar2;\n    *0x105b0d8 = iVar4 + *0x105b008 + var_4h * 2 + *0x105b008;\n    return *0x105b008;\n}\n",
        "token_count": 737
    },
    "01001640": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1h\n\nuint __cdecl fcn.01001640(char32_t arg_8h)\n\n{\n    uint32_t uVar1;\n    uint var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint var_1h;\n    \n    var_8h = 0xf28;\n    if (str.vw8[5] + *0x105b034 == 0x20b) {\n        var_8h = 0x6dc8;\n    }\n    else {\n        *0x105b04c = *0x105b0d8 + 5 + arg_8h;\n    }\n    *0x105b0d8 = *0x105b0d4 + 4 + var_8h;\n    if (*0x105b058 == 9) {\n        arg_8h = var_8h + arg_8h + *0x105b0d4;\n    }\n    else {\n        *0x105b0d4 = var_8h + '\\x05' + arg_8h;\n    }\n    if (*0x105b04c == 0xf52) {\n        *0x105b0d8 = *0x105b0d8 - str.vw8[6];\n        var_8h = *0x105b0d8 * 2 + 5;\n    }\n    uVar1 = *0x105b0d4;\n    var_ch = 2;\n    while ((var_ch < 0x18 &&\n           ((arg_8h == *0x105b034 || (*0x105b0d4 = *0x105b0d4 * '\\x7f' + arg_8h,  arg_8h != str.vw8[0]))))) {\n        var_ch = var_ch + 1;\n    }\n    *0x105b0d8 = uVar1 + *0x105b0d8 + var_8h;\n    return var_14h;\n}\n",
        "token_count": 463
    },
    "01001800": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint16_t __cdecl fcn.01001800(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    uint16_t uVar2;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    if (*0x105b0d8 <= (*0x105b0d4 + 0x6dc8) - *0x105b0d8) {\n        *0x105b03c = *0x105b03c - *0x105b000;\n    }\n    iVar1 = *0x105b000 + *0x105b0d8 * 8;\n    if (*0x105b058 == 9) {\n        var_4h._0_2_ = var_4h + *0x105b0d8 + *0x105b0d4;\n    }\n    else {\n        *0x105b0d4 = *0x105b0d8 + '\\x05' + var_4h;\n    }\n    if (*0x105b04c == 0xf52) {\n        *0x105b0d4 = *0x105b0d4 - str.vw8[6];\n        *0x105b004 = *0x105b0d4 + 5 + *0x105b0d4;\n    }\n    for (*0x105d4cc = 0x19; 2 < *0x105d4cc; *0x105d4cc = *0x105d4cc + -1) {\n        if (*0x105b0d4 != str.vw8[5]) {\n            *0x105b004 = arg_8h + *0x105b0d4 * 8;\n            L\"v\u00eaw=\u00a5\u00c78\\x195+a\\x1bd\\f`q\u00b5\"[*0x105d4cc] = L\"v\u00eaw=\u00a5\u00c78\\x195+a\\x1bd\\f`q\u00b5\"[*0x105d4cc] - arg_8h;\n            *0x105b004 = ((*0x105b0d4 - 4) - arg_8h) + *0x105b004;\n        }\n    }\n    if (*0x105b04c == 0xf52) {\n        *0x105b0d4 = *0x105b0d4 - str.vw8[6];\n        *0x105b004 = *0x105b0d4 + 5 + *0x105b0d4;\n    }\n    uVar2 = var_4h * 8 + iVar1 + *0x105b0d8 * -8 + 0x220;\n    if (*0x105b04c == 0xf52) {\n        *0x105b0d4 = *0x105b0d4 - str.vw8[6];\n        *0x105b004 = *0x105b0d4 + 5 + *0x105b0d4;\n    }\n    *0x105b0d8 = uVar2 + 0x33 + iVar1;\n    return uVar2;\n}\n",
        "token_count": 709
    },
    "01001a80": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.01001a80(uint32_t arg_8h)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    if (*0x105b024 + *0x105b034 == 0x20b) {\n        *0x105b008 = CONCAT44(*0x105b00c + (0xffff9237 < *0x105b008) + CARRY4(*0x105b008 + 0x6dc8, arg_8h), \n                              *0x105b008 + 0x6dc8 + arg_8h);\n    }\n    else {\n        *0x105b04c = *0x105b008 + 5 + arg_8h;\n        *0x105b008 = fcn.01024810(*0x105b008, *0x105b00c, 0x10c7f, 0);\n        *0x105b008 = *0x105b008 + CONCAT44(*0x105b00c, *0x105b008);\n    }\n    *0x105b008 = *0x105b008 + 4;\n    *0x105b0d8 = *0x105b004 + 5 + *0x105b008;\n    if (*0x105b04c == 0xf52) {\n        *0x105b0d4 = *0x105b0d4 - *0x105b028;\n        *0x105b0d8 = *0x105b0d4 + 5 + *0x105b0d4;\n    }\n    *0x105b0d4 = fcn.01001320(*0x105b000);\n    if (*0x105b058 == 9) {\n        *0x105b000 = *0x105b0d8 + *0x105b000 + *0x105b008;\n    }\n    uVar1 = var_4h + 5 + *0x105b000;\n    uVar2 = *0x105b000 + -0x40 + var_4h;\n    *0x105b008 = uVar1 - uVar2;\n    *0x105b00c = -(uVar1 < uVar2);\n    var_4h = *0x105b008 + 0x33 + *0x105b000;\n    *0x105b0d8 = (*0x105b008 + 0x6dc8) - *0x105b004;\n    *0x105b0d4 = fcn.01001800(*0x105b000);\n    if (*0x105b058 == 9) {\n        *0x105b000 = *0x105b0d8 + *0x105b000 + *0x105b008;\n    }\n    *0x105b008 = var_4h + *0x105b0d4 * 8;\n    if (*0x105b058 != 9) {\n        *0x105b008 = *0x105b004 + 5 + arg_8h;\n    }\n    *0x105b00c = 0;\n    for (var_8h = 2; var_8h < 0x18; var_8h = var_8h + 1) {\n        if ((var_4h != *0x105b098) || (*0x105b09c != 0)) {\n            var_4h = fcn.01024810(var_4h, 0, *(var_8h * 8 + 0x105b050), *(var_8h * 8 + 0x105b054));\n            *0x105b0d8 = *0x105b0d8 * 0x10c7f + var_4h;\n            if ((var_4h == *0x105b050) && (*0x105b054 == 0)) break;\n        }\n    }\n    if (*0x105b04c == 0xf52) {\n        *0x105b0d4 = *0x105b0d4 - *0x105b028;\n        *0x105b0d8 = *0x105b0d4 + 5 + *0x105b0d4;\n    }\n    if (*0x105b024 + *0x105b034 == 0x20b) {\n        *0x105b0d8 = (*0x105b0d4 + 0x6dc8) - *0x105b0d4;\n        *0x105b0d4 = *0x105b0d4 + *0x105b0d8 + *0x105b008;\n    }\n    else {\n        *0x105b04c = *0x105b0d4 + 5 + *0x105b008;\n        *0x105b0d4 = *0x105b0d4 * -0x80;\n    }\n    if (*0x105b05c <= *0x105b0d4) {\n        *0x105b02c = *0x105b0d4;\n        *0x105b0d4 = *0x105b0d4 * '\\n' + 0x33;\n        *0x105b0d8 = (*0x105b0d4 + 0x6dc8) - *0x105b0d4;\n    }\n    return *0x105b008;\n}\n",
        "token_count": 1320
    },
    "01002000": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.01002000(uint32_t arg_8h, uint arg_ch)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    bool bVar3;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint dwSize;\n    uint flNewProtect;\n    int32_t var_4h;\n    \n    *0x105b0d4 = *0x105b0d4 * '\\x7f' + 0xbd;\n    uVar2 = *0x105b008 + 5 + arg_8h;\n    *0x105b004 = uVar2;\n    if (*0x105b05c <= *0x105b0d4) {\n        *0x105b004 = *0x105b0d4 + uVar2 * 8 + 0x33 + *0x105b0d4;\n        *0x105b000 = (*0x105b0d4 + 0x6dc8) - *0x105b004;\n        str.vw8[7] = uVar2;\n    }\n    *0x105b008 = *0x105b004 + 5 + *0x105b0d0;\n    *0x105b00c = 0;\n    *0x10fae14 = arg_ch;\n    iVar1 = fcn.01024810(*0x105b008, 0, 0x10c7f, 0);\n    iVar1 = *0x105b004 + arg_8h + iVar1 + *0x105b0d0;\n    *0x105b0d0 = 0x40 - *0x105b0d4;\n    if ((*0x105b078 + *0x105b098 == 0x20b) && (*0x105b07c + *0x105b09c + CARRY4(*0x105b078, *0x105b098) == 0)) {\n        *0x105b000 = 0x6dc8;\n        *0x105b004 = iVar1 + 0x6dc8 + *0x105b0d4;\n    }\n    else {\n        *0x105b0c8 = iVar1 + 5 + *0x105b0d4;\n        *0x105b0cc = 0;\n        *0x105b004 = iVar1 * 0x10c80;\n    }\n    *0x105b008 = *0x105b0d0 + *0x105b0d4 * 8;\n    *0x105b00c = 0;\n    (*_sym.imp.KERNEL32.dll_VirtualProtect)(*0x10fae14, 0x302f, 0x40, 0x10fae08, *0x10fae14);\n    for (var_4h = 0x19; 2 < var_4h; var_4h = var_4h + -1) {\n        if (*0x105b0d8 != str.vw8[5]) {\n            *0x105b000 = *0x105b0d0 + *0x105b0d8 * 8;\n            L\"v\u00eaw=\u00a5\u00c78\\x195+a\\x1bd\\f`q\u00b5\"[var_4h] = L\"v\u00eaw=\u00a5\u00c78\\x195+a\\x1bd\\f`q\u00b5\"[var_4h] - *0x105b0d0;\n            *0x105b000 = ((*0x105b0d8 + -4) - *0x105b0d0) + *0x105b000;\n        }\n    }\n    *0x105b0d4 = *0x105b008 + '3' + *0x105b0d0;\n    if (str.vw8[5] + *0x105b034 == 0x20b) {\n        *0x105b000 = 0x6dc8;\n    }\n    else {\n        *0x105b04c = *0x105b004 + 5 + *0x105b0d4;\n    }\n    *0x105b004 = *0x105b008 + 0x33 + *0x105b0d0;\n    iVar1 = fcn.01024810(*0x105b008, *0x105b00c, 8, 0);\n    *0x105b004 = arg_8h + iVar1;\n    if (*0x105b05c <= arg_8h) {\n        str.vw8[7] = *0x105b008;\n        iVar1 = fcn.01024810(*0x105b008, *0x105b00c, 8, 0);\n        *0x105b008 = arg_8h * 2 + iVar1 + 0x33;\n        *0x105b00c = 0;\n        *0x105b004 = (arg_8h + 0x6dc8) - *0x105b008;\n    }\n    *0x105b0d4 = *0x105b0d0 * '\\x03' + '\\x04' + *0x105b008;\n    if ((*0x105b00c == 0) && (*0x105b008 <= *0x105b004)) {\n        *0x105b03c = *0x105b03c - arg_8h;\n        *0x105b004 = *0x105b004 + arg_8h * -2 + 0x3c;\n    }\n    uVar2 = *0x105b0d0 + -0x40 + *0x105b0d4;\n    bVar3 = *0x105b008 < uVar2;\n    *0x105b008 = *0x105b008 - uVar2;\n    *0x105b00c = *0x105b00c - bVar3;\n    (*_sym.imp.KERNEL32.dll_GetEnvironmentVariableA)(\"Began c\", 0x105bf88, 0x87e);\n    if (*0x105b04c == 0xf52) {\n        *0x105b004 = (*0x105b008 - str.vw8[6]) * 2 + 5;\n    }\n    *0x105b008 = *0x105b004 + 4 + arg_8h;\n    *0x105b00c = 0;\n    *0x105b0d0 = (*0x105b0d0 + 0x6dc8) - *0x105b0d4;\n    return;\n}\n",
        "token_count": 1498
    },
    "01016250": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.01016250(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint var_ch;\n    uint var_8h;\n    int32_t var_4h;\n    \n    var_4h = 0xc15;\n    if (*0x105b04c == 0xf52) {\n        *0x105b0d8 = *0x105b0d8 - str.vw8[6];\n        var_4h = *0x105b0d8 * 2 + 5;\n    }\n    *0x105b0d4 = *0x105b0d8 + '\\x05' + var_4h;\n    *0x105b0d8 = *0x105b0d8 * 0x10c7f + *0x105b0d0;\n    for (*0x105d4cc = 0x19; 2 < *0x105d4cc; *0x105d4cc = *0x105d4cc + -1) {\n        if (*0x105b0d4 != str.vw8[5]) {\n            uVar2 = *0x105b0d4;\n            L\"v\u00eaw=\u00a5\u00c78\\x195+a\\x1bd\\f`q\u00b5\"[*0x105d4cc] = L\"v\u00eaw=\u00a5\u00c78\\x195+a\\x1bd\\f`q\u00b5\"[*0x105d4cc] - arg_8h;\n            var_4h = (*0x105b0d4 - 4) + uVar2 * 8;\n        }\n    }\n    iVar1 = *0x105b0d8 + 5 + *0x105b0d0;\n    *0x105b0d4 = *0x105b0d4 + ((*0x105b0d8 + -4) - *0x105b0d0);\n    if (*0x105b058 != 9) {\n        *0x105b0d4 = var_4h + '\\x05' + arg_8h;\n    }\n    *0x105b0d8 = (iVar1 + *0x105b0d8 + *0x105b0d0) * 0x10c7f + var_4h;\n    return iVar1 - (var_4h + -0x40 + *0x105b0d8);\n}\n",
        "token_count": 550
    },
    "01016500": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuchar * __cdecl fcn.01016500(uint arg_8h, int32_t arg_ch, uchar *arg_10h, uchar *arg_14h, int32_t arg_18h)\n\n{\n    uint16_t uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint var_1ch;\n    uint var_18h;\n    uchar *var_14h;\n    uchar *var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    var_8h = 0x58;\n    var_10h = arg_10h;\n    if (*0x105b0d4 < 0x59) {\n        *0x105b03c = *0x105b03c - *0x105b0d0;\n        var_8h = *0x105b0d4 + *0x105b0d0 * -2 + (0x94 - *0x105b0d4);\n    }\n    var_14h = arg_14h;\n    *0x105b0d8 = ((var_8h + -4) - *0x105b0d4) + *0x105b0d8;\n    var_8h = (arg_8h + 0x6d70) + 4 + *0x105b0d0;\n    if (*0x105b04c == 0xf52) {\n        *0x105b0d4 = *0x105b0d4 - str.vw8[6];\n    }\n    if (*0x105b05c <= *0x105b0d0) {\n        str.vw8[7] = *0x105b0d4;\n        *0x105b0d4 = *0x105b0d0 * '\\x02' + *0x105b0d4 * '\\b' + 0x33;\n    }\n    for (var_ch = 0x19; 2 < var_ch; var_ch = var_ch + -1) {\n        if (*0x105b0d4 != str.vw8[5]) {\n            uVar3 = *0x105b0d4;\n            L\"v\u00eaw=\u00a5\u00c78\\x195+a\\x1bd\\f`q\u00b5\"[var_ch] = L\"v\u00eaw=\u00a5\u00c78\\x195+a\\x1bd\\f`q\u00b5\"[var_ch] - arg_ch;\n            var_8h = (*0x105b0d4 - 4) + uVar3 * 8;\n        }\n    }\n    while (iVar2 = arg_18h + -1,  arg_18h != 0) {\n        *var_10h = *var_14h;\n        var_10h = var_10h + 1;\n        var_14h = var_14h + 1;\n        arg_18h = iVar2;\n        if (*0x105b05c <= *0x105b0d0) {\n            str.vw8[7] = *0x105b0d4;\n            *0x105b0d4 = *0x105b0d0 * '\\x02' + *0x105b0d4 * '\\b' + 0x33;\n        }\n    }\n    iVar2 = var_8h * 0x10c7f + *0x105b0d8;\n    var_4h._0_2_ = fcn.010163f0(iVar2);\n    if (str.vw8[5] + *0x105b034 == 0x20b) {\n        var_4h._0_2_ = (*0x105b0d4 + 0x6dc8) - *0x105b0d4;\n        *0x105b0d4 = *0x105b0d4 + var_4h + *0x105b0d0;\n    }\n    else {\n        *0x105b04c = *0x105b0d4 + 5 + *0x105b0d0;\n        *0x105b0d4 = *0x105b0d4 * -0x80;\n    }\n    uVar1 = var_4h + ((iVar2 + -4) - *0x105b0d0);\n    if (*0x105b058 == 9) {\n        *0x105b0d0 = uVar1 + *0x105b0d0 + *0x105b0d4;\n    }\n    else {\n        *0x105b0d4 = uVar1 + '\\x05' + *0x105b0d0;\n    }\n    return arg_10h;\n}\n",
        "token_count": 1068
    },
    "01016900": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nint16_t __cdecl fcn.01016900(char32_t arg_8h)\n\n{\n    uint32_t uVar1;\n    char32_t cVar2;\n    int16_t iVar3;\n    int16_t iVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    bool bVar7;\n    bool bVar8;\n    ulong uVar9;\n    uint var_20h;\n    uint var_1ch;\n    uint32_t var_18h;\n    int32_t var_14h;\n    uint var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    var_18h = 0x2637;\n    *0x105b0d0 = *0x105b0d4 + *0x105b0d8 * 8;\n    if (*0x105b058 == 9) {\n        *0x105b000 = *0x105b0d0 + *0x105b000 + *0x105b0d8;\n    }\n    else {\n        *0x105b0d8 = *0x105b0d0 + 5 + *0x105b000;\n    }\n    if (*0x105b04c == 0xf52) {\n        *0x105b0d4 = *0x105b0d4 - str.vw8[6];\n        var_18h = *0x105b0d4 + 5 + *0x105b0d4;\n    }\n    var_14h = 0;\n    iVar5 = *0x105b0d8 * 0x10c7f + *0x105b0d0;\n    if (*0x105b0d4 <= var_18h) {\n        uVar6 = (*0x105b0d4 - 4) - arg_8h;\n        bVar7 = CARRY4(uVar6, var_18h);\n        uVar6 = uVar6 + var_18h;\n        *0x105b03c = *0x105b03c - arg_8h;\n        uVar1 = arg_8h + L'\\xffffffc0' + *0x105b0d4;\n        var_18h = uVar6 - uVar1;\n        var_14h = bVar7 - (uVar6 < uVar1);\n    }\n    if (str.vw8[5] + *0x105b034 == 0x20b) {\n        bVar7 = 0x6dc8 < var_18h;\n        bVar8 = CARRY4(0x6dc8 - var_18h, var_18h);\n        var_18h = (0x6dc8 - var_18h) + var_18h;\n        var_14h = bVar8 - bVar7;\n        *0x105b0d8 = iVar5 + var_18h + arg_8h;\n    }\n    else {\n        *0x105b04c = iVar5 + 5 + arg_8h;\n        *0x105b0d8 = iVar5 * 0x10c80;\n    }\n    uVar9 = CONCAT44(var_14h, var_18h);\n    *0x105b0d4 = (*0x105b0d8 << 3) + var_18h;\n    if (str.vw8[5] + *0x105b034 == 0x20b) {\n        *0x105b0d0 = 0x6dc8;\n        *0x105b0d8 = *0x105b0d8 + 0x6dc8 + *0x105b000;\n    }\n    else {\n        *0x105b04c = *0x105b0d8 + 5 + *0x105b000;\n        *0x105b0d8 = *0x105b0d8 * 0x10c80;\n    }\n    var_8h = 2;\n    while( true ) {\n        if (0x17 < var_8h) break;\n        if (arg_8h != *0x105b034) {\n            uVar9 = fcn.01024810(uVar9, L\"v\u00eaw=\u00a5\u00c78\\x195+a\\x1bd\\f`q\u00b5\"[var_8h], 0);\n            *0x105b0d4 = *0x105b0d4 * '\\x7f' + arg_8h;\n            if (arg_8h == str.vw8[0]) break;\n        }\n        var_8h = var_8h + 1;\n    }\n    var_18h = uVar9;\n    iVar4 = *0x105b0d8;\n    iVar3 = *0x105b0d0;\n    if (*0x105b058 == 9) {\n        arg_8h = arg_8h + var_18h + *0x105b0d8;\n    }\n    else {\n        *0x105b0d8 = var_18h + 5 + arg_8h;\n    }\n    *0x105b0d8 = *0x105b0d8 * 0x10c7f + var_18h;\n    if (*0x105b04c == 0xf52) {\n        *0x105b0d8 = *0x105b0d8 - str.vw8[6];\n        *0x105b0d0 = *0x105b0d8 * 2 + 5;\n    }\n    var_8h = 2;\n    while( true ) {\n        if (0x17 < var_8h) break;\n        if (arg_8h != *0x105b034) {\n            uVar9 = fcn.01024810(uVar9, L\"v\u00eaw=\u00a5\u00c78\\x195+a\\x1bd\\f`q\u00b5\"[var_8h], 0);\n            *0x105b0d4 = *0x105b0d4 * '\\x7f' + arg_8h;\n            if (arg_8h == str.vw8[0]) break;\n        }\n        var_8h = var_8h + 1;\n    }\n    cVar2 = (iVar4 + 5 + iVar3) + 4 + *0x105b0d0;\n    if (*0x105b05c <= arg_8h) {\n        str.vw8[7] = *0x105b0d4;\n        *0x105b0d4 = arg_8h * '\\x02' + *0x105b0d4 * '\\b' + 0x33;\n    }\n    *0x105b0d8 = cVar2;\n    if (*0x105b05c <= arg_8h) {\n        *0x105b0d8 = arg_8h * 2 + cVar2 * 8 + L'3';\n        str.vw8[7] = cVar2;\n    }\n    return (*0x105b0d0 + 0x6dc8) - cVar2;\n}\n",
        "token_count": 1601
    },
    "01016e90": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Could not reconcile some variable overlaps\n// WARNING: Restarted to delay deadcode elimination for space: ram\n\nuint8_t __cdecl fcn.01016e90(uint32_t arg_8h)\n\n{\n    int16_t iVar1;\n    uint16_t uVar2;\n    int32_t iVar3;\n    char32_t cVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    int32_t iVar7;\n    bool bVar8;\n    uint var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint32_t var_24h;\n    uint32_t var_20h;\n    int32_t var_1ch;\n    int32_t var_18h;\n    uint32_t var_14h;\n    uint32_t var_10h;\n    char32_t var_ch;\n    uint var_8h;\n    uint var_1h;\n    \n    var_8h._0_1_ = 0x30;\n    var_8h._1_1_ = 0x1e;\n    if (str.vw8[5] + *0x105b034 == 0x20b) {\n        var_ch = *0x105b0d8 + 0xdb90;\n    }\n    else {\n        *0x105b04c = *0x105b0d8 + 0x2e;\n        var_ch = 0x2b0080;\n    }\n    if (*0x105b0d4 < 0x1e31) {\n        bVar8 = *0x105b0a8 < arg_8h;\n        *0x105b0a8 = *0x105b0a8 - arg_8h;\n        *0x105b0ac = *0x105b0ac - bVar8;\n        iVar1 = *0x105b0d4 + arg_8h * -2 + (0x1e6c - *0x105b0d4);\n        var_8h._0_1_ = iVar1;\n        var_8h._1_1_ = iVar1 >> 8;\n    }\n    cVar4 = var_ch + *0x105b0d8 + ((arg_8h + 0x6dc8) - *0x105b0d4);\n    *0x105b0d8 = cVar4;\n    if (*0x105b05c <= *0x105b000) {\n        *0x105b0d8 = *0x105b000 * 2 + cVar4 * 8 + L'3';\n        str.vw8[7] = cVar4;\n    }\n    *0x105bf80 = 0x105d4d0;\n    var_ch = arg_8h + CONCAT11(var_8h._1_1_, var_8h) * 8;\n    *0x105b0d0 = (var_ch + L'\u6dc8') - *0x105b0d4;\n    uVar2 = fcn.01016250(*0x105b0d0);\n    if (*0x105b0d8 <= var_ch) {\n        *0x105b03c = *0x105b03c - *0x105b000;\n        var_ch = *0x105b000 * -2 + var_ch + L'<';\n    }\n    iVar7 = var_ch * 2 + *0x105b0d8;\n    *0x105b0d4 = *0x105b0d0 + '\\x04' + iVar7;\n    *0x105b0d0 = (iVar7 + 0x6dc8) - *0x105b0d4;\n    if (*0x105b058 != 9) {\n        *0x105b0d8 = *0x105b0d0 + 5 + uVar2;\n    }\n    fcn.010163f0(*0x105b0d0);\n    *0x105b0d0 = ((*0x105b0d4 - 4) - iVar7) + *0x105b0d0;\n    iVar7 = iVar7 * 2 + *0x105b0d8;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetWindowsDirectoryA)(0x105bf88, 0x87e);\n    if ((*0x105b078 + *0x105b098 == 0x20b) && (*0x105b07c + *0x105b09c + CARRY4(*0x105b078, *0x105b098) == 0)) {\n        *0x105b000 = 0x6dc8;\n        var_ch = iVar7 + 0x6dc8 + uVar2;\n    }\n    else {\n        *0x105b0c8 = iVar7 + 5 + uVar2;\n        *0x105b0cc = 0;\n        var_ch = iVar7 * 0x10c80;\n    }\n    if (*0x105b05c <= uVar2) {\n        str.vw8[7] = *0x105b0d8;\n        *0x105b0d8 = uVar2 + *0x105b0d8 * 8 + 0x33 + uVar2;\n        *0x105b0d0 = (uVar2 + 0x6dc8) - *0x105b0d8;\n    }\n    fcn.01016500(*0x105b0d0, uVar2, *0x105bf80, 0x1041270, 0x5424);\n    *0x105b0d4 = *0x105b0d0 + '3' + var_ch;\n    if (str.vw8[5] + *0x105b034 == 0x20b) {\n        var_ch = 0x6dc8;\n        *0x105b0d8 = *0x105b0d8 + L'\u6dc8' + *0x105b000;\n    }\n    else {\n        *0x105b04c = *0x105b0d8 + L'\\x05' + *0x105b000;\n        *0x105b0d8 = *0x105b0d8 * 0x10c80;\n    }\n    var_ch = var_ch + 5 + *0x105b0d8;\n    var_18h = 0x138c8a2;\n    if (*0x105b0d8 <= *0x105b0d0) {\n        *0x105b03c = *0x105b03c - uVar2;\n    }\n    *0x105b0d0 = var_ch + *0x105b0d4 * 8;\n    if (*0x105b04c == 0xf52) {\n        *0x105b0d8 = *0x105b0d8 - str.vw8[6];\n        var_ch = *0x105b0d8 * 2 + 5;\n    }\n    uVar2 = fcn.01016250(*0x105b0d0);\n    var_8h._0_1_ = uVar2;\n    var_8h._1_1_ = uVar2 >> 8;\n    iVar7 = *0x105b0d0 + ((*0x105b0d8 * 2 + 0x6dc8) - var_ch);\n    var_20h = 0x10;\n    var_24h = 0xa0;\n    *0x105b000 = iVar7 + *0x105b0d4 * 8;\n    if (*0x105b058 == 9) {\n        *0x105b000 = iVar7 + *0x105b000 + *0x105b0d8;\n    }\n    else {\n        *0x105b0d8 = iVar7 + 5 + *0x105b000;\n    }\n    var_ch = iVar7 + 5 + *0x105b0d8;\n    var_14h = 0x70;\n    *0x105b0d0 = ((var_ch + -4) - *0x105b0d8) + iVar7 + *0x105b0d4 * 8;\n    var_10h = 0;\n    if (str.vw8[5] + *0x105b034 == 0x20b) {\n        var_ch = 0x6dc8;\n        *0x105b0d8 = *0x105b0d8 + 0x6dc8U + *0x105b000;\n    }\n    else {\n        *0x105b04c = *0x105b0d8 + 5U + *0x105b000;\n        *0x105b0d8 = *0x105b0d8 * 0x10c80;\n    }\n    var_ch = var_ch + 4 + *0x105b0d8;\n    if (str.vw8[5] + *0x105b034 == 0x20b) {\n        var_ch = 0x6dc8;\n        *0x105b0d8 = *0x105b0d8 + 0x6dc8 + *0x105b000;\n    }\n    else {\n        *0x105b04c = *0x105b0d8 + 5 + *0x105b000;\n        *0x105b0d8 = *0x105b0d8 * 0x10c80;\n    }\n    var_ch = var_ch + 5 + *0x105b0d8;\n    if (str.vw8[5] + *0x105b034 == 0x20b) {\n        *0x105b0d4 = 200;\n        *0x105b0d8 = *0x105b0d8 + 200 + uVar2;\n    }\n    else {\n        *0x105b04c = *0x105b0d8 + 5 + uVar2;\n        *0x105b0d8 = *0x105b0d8 * 0x10c80;\n    }\n    for (var_1ch = 2; var_1ch < 0x18; var_1ch = var_1ch + 1) {\n        if (*0x105b000 != *0x105b034) {\n            var_ch = var_ch * L\"v\u00eaw=\u00a5\u00c78\\x195+a\\x1bd\\f`q\u00b5\"[var_1ch];\n            *0x105b0d8 = *0x105b0d8 * 0x10c7f + *0x105b000;\n            if (*0x105b000 == str.vw8[0]) break;\n        }\n    }\n    var_ch = *0x105b0d8 + var_ch * 8;\n    while( true ) {\n        *0x105b0d0 = ((*0x105b0d4 - 4) - var_ch) + *0x105b0d0;\n        uVar5 = var_10h + 1;\n        if (str.vw8[5] + *0x105b034 == 0x20b) {\n            *0x105b0d4 = 200;\n            *0x105b0d8 = *0x105b0d8 + 200 + CONCAT11(var_8h._1_1_, var_8h);\n        }\n        else {\n            *0x105b04c = *0x105b0d8 + 5 + CONCAT11(var_8h._1_1_, var_8h);\n            *0x105b0d8 = *0x105b0d8 * 0x10c80;\n        }\n        var_ch = (var_ch * 2 + -4) - *0x105b0d8;\n        if (var_ch <= *0x105b0d0) {\n            *0x105b03c = *0x105b03c - *0x105b0d8;\n            *0x105b0d0 = var_ch + *0x105b0d8 * -2 + *0x105b0d0 + (0x3c - var_ch);\n        }\n        if (CONCAT11(var_8h._1_1_, var_8h) < var_ch) {\n            var_ch = (*0x105b000 + L'\\xfffffffc') * 8 + *0x105b0d8 * -7 + var_ch * 8;\n            *0x105b0d0 = CONCAT11(var_8h._1_1_, var_8h) + 5 + *0x105b000;\n        }\n        var_ch = var_ch * 2 + *0x105b0d8;\n        *0x105b0d0 = *0x105b0d0 - ((var_ch - 0x40U) + *0x105b0d4);\n        if (*0x105b0d0 < var_ch) {\n            var_ch = (var_ch * 2 + -4) - *0x105b0d8;\n            *0x105b0d0 = *0x105b0d4 + 5 + var_ch;\n        }\n        else if (*0x105b058 == 9) {\n            iVar1 = CONCAT11(var_8h._1_1_, var_8h) + *0x105b0d0 + *0x105b0d8;\n            var_8h._0_1_ = iVar1;\n            var_8h._1_1_ = iVar1 >> 8;\n        }\n        else {\n            *0x105b0d8 = *0x105b0d0 + 5 + CONCAT11(var_8h._1_1_, var_8h);\n        }\n        if (var_18h == 0) break;\n        iVar7 = (*0x105b0d8 + 0x6dc8) - var_ch;\n        *0x105b0d4 = *0x105b0d0 + '3' + iVar7;\n        fcn.0101ce80();\n        if (*0x105b04c == 0xf52) {\n            *0x105b0d4 = *0x105b0d4 - str.vw8[6];\n            *0x105b0d0 = *0x105b0d4 + 5 + *0x105b0d4;\n        }\n        var_ch = iVar7 + 4 + *0x105b0d8;\n        *0x105b0d4 = *0x105b0d0 + '3' + var_ch;\n        var_18h = var_18h + -1;\n        *0x105b0d0 = (*0x105b000 + L'\u6dc8') - CONCAT11(var_8h._1_1_, var_8h);\n        iVar1 = *0x105b0d0 + 4 + *0x105b0d8;\n        var_8h._0_1_ = iVar1;\n        var_8h._1_1_ = iVar1 >> 8;\n        var_10h = uVar5;\n        if (*0x105b0d4 <= *0x105b0d0) {\n            *0x105b03c = *0x105b03c - var_ch;\n            *0x105b0d0 = *0x105b0d4 + var_ch * -2 + *0x105b0d0 + (0x3c - *0x105b0d4);\n        }\n    }\n    if (*0x105b058 == 9) {\n        var_ch = *0x105b0d0 + var_ch + *0x105b0d4;\n    }\n    *0x105b0d4 = *0x105b0d0 + '\\x04' + var_ch;\n    if ((var_ch < *0x105b0d0) && (var_ch = *0x105b0d8 + var_ch * 8,  *0x105b000 <= var_ch + *0x105b0d4 * 8)) {\n        *0x105b03c = *0x105b03c - *0x105b0d8;\n    }\n    if (str.vw8[5] + *0x105b034 == 0x20b) {\n        var_ch = 0x6dc8;\n        *0x105b0d8 = *0x105b0d8 + 0x6dc8 + *0x105b000;\n    }\n    else {\n        *0x105b04c = *0x105b0d8 + 5 + *0x105b000;\n        *0x105b0d8 = *0x105b0d8 * 0x10c80;\n    }\n    var_ch = var_ch + 4U + *0x105b0d8;\n    var_18h = 0x138c8a2;\n    if ((*0x105b0ec == 0) && (*0x105b0e8 <= *0x105b000)) {\n        *0x105b088 = *0x105b0d4;\n        *0x105b08c = 0;\n        *0x105b0d4 = *0x105b000 * '\\x02' + *0x105b0d4 * '\\b' + 0x33;\n        var_ch = (*0x105b000 + L'\u6dc8') - *0x105b0d4;\n    }\n    uVar6 = var_ch + *0x105b0d4 * 8;\n    if (*0x105b04c == 0xf52) {\n        uVar2 = CONCAT11(var_8h._1_1_, var_8h) - str.vw8[6];\n        var_8h._0_1_ = uVar2;\n        var_8h._1_1_ = uVar2 >> 8;\n        *0x105b0d8 = uVar2 + 5 + uVar2;\n    }\n    if (*0x105b0d4 <= var_ch) {\n        bVar8 = *0x105b0a8 < uVar6;\n        *0x105b0a8 = *0x105b0a8 - uVar6;\n        *0x105b0ac = *0x105b0ac - bVar8;\n        var_ch = *0x105b0d4 + uVar6 * -2 + var_ch + (0x3c - *0x105b0d4);\n    }\n    *0x105b0d4 = *0x105b000 + '\\x04' + var_ch;\n    if ((*0x105b0c8 == 0xf52) && (*0x105b0cc == 0)) {\n        *0x105b0d4 = *0x105b0d4 - *0x105b080;\n    }\n    while( true ) {\n        *0x105b0d0 = *0x105b0d8 + CONCAT11(var_8h._1_1_, var_8h) * 8;\n        if (0xb1be < *0x105b0d0) {\n            *0x105b0d0 = (*0x105b0d8 + 0x6dc8) - CONCAT11(var_8h._1_1_, var_8h);\n        }\n        if (str.vw8[5] + *0x105b034 == 0x20b) {\n            *0x105b0d0 = 0x6dc8;\n            var_ch = var_ch + 0x6dc8U + *0x105b0d8;\n        }\n        else {\n            *0x105b04c = var_ch + 5U + *0x105b0d8;\n            var_ch = var_ch * 0x10c80;\n        }\n        if (uVar5 < 0x4e) {\n            if (*0x105b05c <= uVar5) {\n                str.vw8[7] = *0x105b0d4;\n                *0x105b0d4 = uVar5 * '\\x02' + *0x105b0d4 * '\\b' + 0x33;\n                var_ch = (var_10h + 0x6dc9) - *0x105b0d4;\n            }\n            *0x105b0d0 = (CONCAT11(var_8h._1_1_, var_8h) - 4) + CONCAT11(var_8h._1_1_, var_8h) * 8;\n            *0x105b0d0 = (*_sym.imp.KERNEL32.dll_GetTempPathA)(0x87e, 0x105bf88);\n            *0x105b0d0 = *0x105b0d0 - (*0x105b0d8 + -0x40 + CONCAT11(var_8h._1_1_, var_8h));\n            if (*0x105b0d4 <= var_ch) {\n                *0x105b03c = *0x105b03c - uVar5;\n                var_ch = *0x105b0d4 + uVar5 * -2 + var_ch + (0x3c - *0x105b0d4);\n            }\n        }\n        if (*0x105b04c == 0xf52) {\n            *0x105b000 = *0x105b000 - str.vw8[6];\n            *0x105b0d0 = *0x105b000 * 2 + 5;\n        }\n        iVar1 = *0x105b0d0 + 0x33 + *0x105b0d8;\n        var_8h._0_1_ = iVar1;\n        var_8h._1_1_ = iVar1 >> 8;\n        if (*0x105b04c == 0xf52) {\n            *0x105b0d4 = *0x105b0d4 - str.vw8[6];\n        }\n        if (var_24h < 5) {\n            var_24h = var_24h - 1;\n            iVar1 = *0x105b000 + 0x33 + var_24h;\n            var_8h._0_1_ = iVar1;\n            var_8h._1_1_ = iVar1 >> 8;\n        }\n        *0x105b0d0 = (*0x105b0d8 + 0x6dc8) - CONCAT11(var_8h._1_1_, var_8h);\n        if (*0x105b04c == 0xf52) {\n            *0x105b0d4 = *0x105b0d4 - str.vw8[6];\n            *0x105b0d0 = *0x105b0d4 + 5 + *0x105b0d4;\n        }\n        if (*0x105b058 == 9) {\n            *0x105b0d8 = *0x105b0d0 + *0x105b0d8 + var_ch;\n        }\n        else {\n            var_ch = *0x105b0d0 + 5 + *0x105b0d8;\n        }\n        uVar2 = CONCAT11(var_8h._1_1_, var_8h) * 0xc7f + var_14h;\n        var_8h._0_1_ = uVar2;\n        var_8h._1_1_ = uVar2 >> 8;\n        if (0x10fa < uVar2) {\n            *0x105b0d0 = uVar2 + 5 + *0x105b0d8;\n            if (*0x105b000 == var_ch) {\n                if (str.vw8[5] + *0x105b034 == 0x20b) {\n                    *0x105b0d0 = (*0x105b0d4 + 0x6dc8) - *0x105b0d4;\n                    *0x105b0d4 = *0x105b0d4 + *0x105b0d0 + var_ch;\n                }\n                else {\n                    *0x105b04c = *0x105b0d4 + 5 + var_ch;\n                    *0x105b0d4 = *0x105b0d4 * -0x80;\n                }\n                *0x105b0d0 = fcn.01016900(uVar2);\n                if (*0x105b04c == 0xf52) {\n                    var_ch = var_ch - str.vw8[6];\n                    *0x105b0d8 = var_ch * 2 + 5;\n                }\n                *0x105b0d4 = *0x105b0d4 * '\\x7f' + var_ch;\n            }\n            if (*0x105b04c == 0xf52) {\n                var_ch = var_ch - str.vw8[6];\n                *0x105b0d0 = var_ch * 2 + 5;\n            }\n        }\n        uVar6 = var_14h;\n        if (var_14h < 0xf) {\n            if (*0x105b04c == 0xf52) {\n                *0x105b0d8 = *0x105b0d8 - str.vw8[6];\n                *0x105b000 = *0x105b0d8 * 2 + L'\\x05';\n            }\n            uVar6 = var_14h - 1;\n            if (*0x105b05c <= uVar6) {\n                str.vw8[7] = uVar2;\n                uVar2 = uVar6 * 2 + uVar2 * 8 + 0x33;\n                var_8h._0_1_ = uVar2;\n                var_8h._1_1_ = uVar2 >> 8;\n                *0x105b000 = (var_14h + 0x6dc7) - uVar2;\n            }\n        }\n        var_14h = uVar6;\n        if (*0x105b04c == 0xf52) {\n            *0x105b0d8 = *0x105b0d8 - str.vw8[6];\n            *0x105b0d0 = *0x105b0d8 * 2 + 5;\n        }\n        if (CONCAT11(var_8h._1_1_, var_8h) <= var_ch) {\n            *0x105b03c = *0x105b03c - *0x105b0d4;\n            var_ch = (((CONCAT11(var_8h._1_1_, var_8h) - 4) - *0x105b0d4) + var_ch) -\n                     ((*0x105b0d4 - 0x40) + CONCAT11(var_8h._1_1_, var_8h));\n        }\n        if (*0x105b058 == 9) {\n            *0x105b0d8 = *0x105b0d0 + *0x105b0d8 + var_ch;\n        }\n        iVar7 = *0x105b0d8 + -0x40;\n        if (var_18h == 0) break;\n        *0x105b0d8 = *0x105b0d8 - (var_18h + -0x40 + *0x105b000);\n        fcn.0101ce80();\n        var_ch = (0x33 - iVar7) + *0x105b0d8;\n        var_18h = var_18h + -1;\n        *0x105b000 = var_20h + var_ch * 8;\n        if (var_20h < 2) {\n            if (*0x105b04c == 0xf52) {\n                iVar1 = CONCAT11(var_8h._1_1_, var_8h) - str.vw8[6];\n                var_8h._0_1_ = iVar1;\n                var_8h._1_1_ = iVar1 >> 8;\n            }\n            var_20h = var_20h - 1;\n            if (str.vw8[5] + *0x105b034 == 0x20b) {\n                var_ch = var_ch + 0x6dc8U + *0x105b0d8;\n            }\n            else {\n                *0x105b04c = var_ch + 5U + *0x105b0d8;\n                var_ch = var_ch * 0x10c80;\n            }\n            iVar1 = CONCAT11(var_8h._1_1_, var_8h) + *0x105b000 + var_20h;\n            var_8h._0_1_ = iVar1;\n            var_8h._1_1_ = iVar1 >> 8;\n        }\n        else if (str.vw8[5] + *0x105b034 == 0x20b) {\n            *0x105b0d4 = (*0x105b0d4 - 0x38) + var_14h;\n        }\n        else {\n            *0x105b04c = *0x105b0d4 + 5 + var_14h;\n            *0x105b0d4 = *0x105b0d4 * -0x80;\n        }\n        *0x105b0d8 = *0x105b0d8 - (var_ch - 0x3bU);\n    }\n    iVar3 = *0x105b0d0 - (*0x105b0d8 + -0x40 + CONCAT11(var_8h._1_1_, var_8h));\n    iVar7 = CONCAT11(var_8h._1_1_, var_8h) + 0x33 + arg_8h;\n    if (str.vw8[5] + *0x105b034 == 0x20b) {\n        *0x105b0d8 = (*0x105b0d4 + 0x6dc8) - *0x105b0d4;\n        *0x105b0d4 = *0x105b0d4 + *0x105b0d8 + iVar7;\n    }\n    else {\n        *0x105b04c = *0x105b0d4 + 5 + iVar7;\n        *0x105b0d4 = *0x105b0d4 * -0x80;\n    }\n    if (str.vw8[5] + *0x105b034 == 0x20b) {\n        *0x105b0d4 = 200;\n        *0x105b0d8 = *0x105b0d8 + 200 + CONCAT11(var_8h._1_1_, var_8h);\n    }\n    else {\n        *0x105b04c = *0x105b0d8 + 5 + CONCAT11(var_8h._1_1_, var_8h);\n        *0x105b0d8 = *0x105b0d8 * 0x10c80;\n    }\n    *0x105b0d8 = iVar3 + *0x105b0d8 + 0x60d;\n    *0x105b0d0 = iVar3 + 5 + *0x105b0d8;\n    uVar2 = CONCAT11(var_8h._1_1_, var_8h) + ((*0x105b0d0 + 0x67bb) - CONCAT11(var_8h._1_1_, var_8h));\n    var_8h._1_1_ = uVar2 >> 8;\n    var_ch = uVar2 + 4 + *0x105b0d0;\n    if ((*0x105b078 + *0x105b098 == 0x20b) && (*0x105b07c + *0x105b09c + CARRY4(*0x105b078, *0x105b098) == 0)) {\n        var_ch = (*0x105b0d4 + 0x6dc8) - *0x105b0d4;\n        *0x105b0d4 = *0x105b0d4 + var_ch + *0x105b0d0;\n    }\n    else {\n        *0x105b0c8 = *0x105b0d4 + 5 + *0x105b0d0;\n        *0x105b0cc = 0;\n        *0x105b0d4 = *0x105b0d4 * -0x80;\n    }\n    *0x105b0d8 = fcn.01002000(*0x105b0d0, *0x105bf80);\n    if (*0x105b058 != 9) {\n        *0x105b0d8 = *0x105b0d8 + *0x105b0d0 + 9 + CONCAT11(var_8h._2_1_, var_8h._1_1_);\n    }\n    *0x105b000 = ((*0x105b0d4 - 4) - var_ch) + *0x105b000;\n    return *0x105b0d4;\n}\n",
        "token_count": 7657
    },
    "01018524": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nuint8_t fcn.01018524(void)\n\n{\n    int32_t iVar1;\n    int32_t in_EAX;\n    int32_t unaff_EBP;\n    bool bVar2;\n    \n    *0x6dc8 = *0x6dc8 + in_EAX;\n    *0x105b0d8 = in_EAX - *0x105b0d4;\n    *0x105b0d4 = *0x105b0d4 + *0x105b0d8 + *(unaff_EBP + -0xc);\n    *(unaff_EBP + -0xc) = *(unaff_EBP + -8) + 0x33 + *(unaff_EBP + 8);\n    if (*0x105b024 + *0x105b034 == 0x20b) {\n        *0x105b0d4 = 200;\n        *0x105b0d8 = *0x105b0d8 + 200 + *(unaff_EBP + -8);\n    }\n    else {\n        *0x105b04c = *0x105b0d8 + 5 + *(unaff_EBP + -8);\n        *0x105b0d8 = *0x105b0d8 * 0x10c80;\n    }\n    *(unaff_EBP + -0xc) = 0x60d;\n    *0x105b0d8 = *0x105b0d0 + *0x105b0d8 + *(unaff_EBP + -0xc);\n    *0x105b0d0 = *0x105b0d0 + 5 + *0x105b0d8;\n    *(unaff_EBP + -8) = *(unaff_EBP + -8) + (((*0x105b0d0 + 0x6dc8) - *(unaff_EBP + -0xc)) - *(unaff_EBP + -8));\n    *(unaff_EBP + -0xc) = *(unaff_EBP + -8) + 4 + *0x105b0d0;\n    bVar2 = CARRY4(*0x105b078, *0x105b098);\n    iVar1 = *0x105b07c + *0x105b09c;\n    *(unaff_EBP + -0x6c) = *0x105b078 + *0x105b098;\n    *(unaff_EBP + -0x68) = iVar1 + bVar2;\n    if ((*(unaff_EBP + -0x6c) == 0x20b) && (*(unaff_EBP + -0x68) == 0)) {\n        *(unaff_EBP + -0xc) = (*0x105b0d4 + 0x6dc8) - *0x105b0d4;\n        *0x105b0d4 = *0x105b0d4 + *(unaff_EBP + -0xc) + *0x105b0d0;\n    }\n    else {\n        *0x105b0c8 = *0x105b0d4 + 5 + *0x105b0d0;\n        *0x105b0cc = 0;\n        *0x105b0d4 = *0x105b0d4 * -0x80;\n    }\n    *0x105b0d8 = fcn.01002000(*0x105b0d0, *0x105bf80);\n    *0x105b000 = ((*0x105b0d4 - 4) - *(unaff_EBP + -0xc)) + *0x105b000;\n    *(unaff_EBP + -0xb) = *0x105b0d8 + 4 + *0x105b0d0;\n    *(unaff_EBP + -0x4f) = *0x105b058;\n    if (*(unaff_EBP + -0x4f) == 9) {\n        *(unaff_EBP + -7) = *(unaff_EBP + -7) + *(unaff_EBP + -0xb) + *0x105b0d8;\n    }\n    else {\n        *0x105b0d8 = *(unaff_EBP + -0xb) + 5 + *(unaff_EBP + -7);\n    }\n    return *0x105b0d4;\n}\n",
        "token_count": 987
    },
    "010189a0": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.010189a0(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint var_8h;\n    int32_t var_4h;\n    \n    *0x105b0d0 = arg_8h + *0x105b004 * 8;\n    iVar2 = *0x105b004 * 0x10c7f + arg_8h;\n    iVar1 = (var_4h - (*0x105b004 + ((*0x105b0d4 + (*0x105b0d8 * '\\x7f' + arg_8h) * '\\x7f' + -4) - 0x3c) + arg_8h)) + 4\n            + iVar2;\n    *0x105b0d8 = iVar1 + iVar2 * 2 + 9;\n    iVar3 = *0x105b0d0 + iVar2 + arg_8h;\n    *0x105b004 = iVar3 * 0x10c7f + arg_8h;\n    *0x105b0d4 = iVar1 + '\\x05' + iVar2;\n    return (iVar3 + 0x6dc8) - *0x105b0d8;\n}\n",
        "token_count": 299
    },
    "null": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nuint32_t sym.send.dll_Meetrather(void)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    bool bVar4;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint32_t var_4h;\n    \n    var_4h = 0x31;\n    for (*0x105d4cc = 0x19; iVar3 = *0x105d4cc,  2 < *0x105d4cc; *0x105d4cc = *0x105d4cc + -1) {\n        if ((*0x105b078 != 0x31) || (*0x105b07c != 0)) {\n            uVar2 = *(*0x105d4cc * 8 + 0x105b050);\n            bVar4 = uVar2 < *0x105b000;\n            iVar1 = *0x105d4cc * 8;\n            *(*0x105d4cc * 8 + 0x105b050) = uVar2 - *0x105b000;\n            *(iVar3 * 8 + 0x105b054) = *(iVar1 + 0x105b054) - bVar4;\n        }\n    }\n    *0x105b0d8 = 0x2d;\n    fcn.010011c0();\n    if (*0x105b058 == 9) {\n        *0x105b0d8 = *0x105b0d8 * 2 + 0x31;\n    }\n    else {\n        var_4h = *0x105b0d8 * 2 + 5;\n    }\n    if (var_4h <= *0x105b0d8) {\n        bVar4 = *0x105b0a8 < *0x105b000;\n        *0x105b0a8 = *0x105b0a8 - *0x105b000;\n        *0x105b0ac = *0x105b0ac - bVar4;\n        *0x105b0d8 = *0x105b000 * -2 + *0x105b0d8 + 0x3c;\n    }\n    if (*0x105b04c == 0xf52) {\n        var_4h = var_4h - *0x105b028;\n        *0x105b0d8 = var_4h * 2 + 5;\n    }\n    if (var_4h <= *0x105b0d8) {\n        bVar4 = *0x105b0a8 < *0x105b000;\n        *0x105b0a8 = *0x105b0a8 - *0x105b000;\n        *0x105b0ac = *0x105b0ac - bVar4;\n        *0x105b0d8 = *0x105b000 * -2 + *0x105b0d8 + 0x3c;\n    }\n    return *0x105b0d8;\n}\n",
        "token_count": 710
    },
    "01018dc0": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.01018dc0(uint32_t arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t var_8h;\n    uint32_t var_4h;\n    \n    if (*0x105b05c <= arg_8h) {\n        str.vw8[7] = *0x105b0d8;\n        *0x105b0d8 = arg_8h * 2 + *0x105b0d8 * 8 + 0x33;\n    }\n    if (var_4h <= *0x105b0d8) {\n        *0x105b03c = *0x105b03c - (var_4h - 4);\n    }\n    *0x105b0d8 = (*0x105b008 + 0x6dc8) - var_4h;\n    *0x105b004 = *0x105b0d8 + 0x33 + *0x105b008;\n    iVar1 = (var_4h - 0x40) + *0x105b0d8;\n    if (*0x105b04c == 0xf52) {\n        *0x105b0d8 = *0x105b0d8 - str.vw8[6];\n        *0x105b004 = *0x105b0d8 * 2 + 5;\n    }\n    iVar3 = (*0x105b0d8 * 2 + -4) - *0x105b004;\n    iVar2 = *0x105b004 * 0x10c7f + arg_8h;\n    *0x105b004 = iVar2 * 2 + -4 + var_4h;\n    *0x105b0d8 = (iVar3 + (*0x105b008 - iVar1)) * 0x199a2701 + iVar2 * 0x199b3381;\n    *0x105b0d4 = *0x105b004 + *0x105b0d8 * '\\b';\n    iVar1 = *0x105b004 + 5 + arg_8h;\n    for (var_8h = 0x19; 2 < var_8h; var_8h = var_8h + -1) {\n        if (*0x105b0d4 != str.vw8[5]) {\n            *0x105b004 = arg_8h + *0x105b0d4 * 8;\n            L\"v\u00eaw=\u00a5\u00c78\\x195+a\\x1bd\\f`q\u00b5\"[var_8h] = L\"v\u00eaw=\u00a5\u00c78\\x195+a\\x1bd\\f`q\u00b5\"[var_8h] - arg_8h;\n            *0x105b004 = ((*0x105b0d4 - 4) - arg_8h) + *0x105b004;\n        }\n    }\n    *0x105b0d8 = (*0x105b0d8 * 0x10c7f + *0x105b004) * 0x10c7f + iVar1;\n    *0x105b008 = *0x105b0d8 + 5 + iVar1;\n    *0x105b00c = 0;\n    return iVar1;\n}\n",
        "token_count": 757
    },
    "01019160": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.01019160(char32_t arg_8h)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint8_t uVar4;\n    uint var_ch;\n    uint var_8h;\n    int32_t var_4h;\n    \n    var_4h = 0xc2e;\n    uVar4 = *0x105b0d8 * '\\b' + 0x2e;\n    if (uVar4 < 0xc2f) {\n        *0x105b03c = *0x105b03c - arg_8h;\n        var_4h = uVar4 + arg_8h * -2 + (0xc6a - uVar4);\n    }\n    iVar1 = *0x105b0d8 + L'\\x05' + *0x105b0d0;\n    if (*0x105b05c <= arg_8h) {\n        str.vw8[7] = *0x105b0d8;\n        *0x105b0d8 = arg_8h * 2 + *0x105b0d8 * 8 + L'3';\n        var_4h = (arg_8h + L'\u6dc8') - *0x105b0d8;\n    }\n    uVar4 = var_4h + *0x105b0d8 * '\\b';\n    if (str.vw8[5] + *0x105b034 == 0x20b) {\n        var_4h = (uVar4 + 0x6dc8) - uVar4;\n        *0x105b0d4 = uVar4 + var_4h + arg_8h;\n    }\n    else {\n        *0x105b04c = uVar4 + 5 + arg_8h;\n        *0x105b0d4 = var_4h * -0x80;\n    }\n    if (*0x105b04c == 0xf52) {\n        var_4h = ((iVar1 + 4 + *0x105b0d0) - str.vw8[6]) * 2 + 5;\n    }\n    uVar2 = *0x105b0d4;\n    uVar3 = *0x105b0d4;\n    *0x105d4cc = 2;\n    while ((*0x105d4cc < 0x18 &&\n           ((arg_8h == *0x105b034 || (*0x105b0d4 = *0x105b0d4 * '\\x7f' + arg_8h,  arg_8h != str.vw8[0]))))) {\n        *0x105d4cc = *0x105d4cc + 1;\n    }\n    *0x105b0d8 = uVar3 + 0x33 + var_4h;\n    return iVar1 - (*0x105b0d0 + (uVar2 - 0xd) + var_4h);\n}\n",
        "token_count": 687
    },
    "01019430": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.01019430(void)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    int32_t *in_FS_OFFSET;\n    bool bVar6;\n    bool bVar7;\n    ulong uVar8;\n    uint *arg_8h;\n    uint var_8dch;\n    uint var_8d4h;\n    uint var_8d0h;\n    uint var_8cch;\n    uint var_8c8h;\n    uint var_8c4h;\n    uint var_8c0h;\n    uint var_8bch;\n    uint var_8b8h;\n    uint var_8b4h;\n    uint var_8b0h;\n    uint32_t var_8ach;\n    uint var_8a8h;\n    uint lpBuffer;\n    uint32_t var_10h;\n    int32_t var_ch;\n    uint uStack12;\n    int32_t var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x103f7d6;\n    var_ch = *in_FS_OFFSET;\n    var_10h = *0x105b174 ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    fcn.0101be80(var_10h);\n    var_4h = 0;\n    *0x105b0d8 = *0x105b0d8 * 0x10c7f + 0x3bc;\n    fcn.0102b5e1(0, 0x1041262);\n    *0x105b0d8 = *0x105b008 + 4 + *0x105b0dc;\n    (*_sym.imp.KERNEL32.dll_SetConsoleOutputCP)(0x4e3);\n    *0x105b0d4 = *0x105b0d4 + -0x44 + *0x105b000;\n    *0x105b0d8 = *0x105b0d0 + *0x105b0d8 + *0x105b000;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetSystemDirectoryA)(0x105bf88, 0x87e);\n    for (*0x105d4cc = 0x19; 2 < *0x105d4cc; *0x105d4cc = *0x105d4cc + -1) {\n        if ((*0x105b008 != *0x105b078) || (*0x105b00c != *0x105b07c)) {\n            iVar3 = fcn.01024810(*0x105b008, *0x105b00c, 8, 0);\n            iVar1 = *0x105d4cc;\n            *0x105b000 = uVar2 + iVar3;\n            uVar5 = *(*0x105d4cc * 8 + 0x105b050);\n            iVar3 = *0x105d4cc * 8;\n            *(*0x105d4cc * 8 + 0x105b050) = uVar5 - uVar2;\n            *(iVar1 * 8 + 0x105b054) = *(iVar3 + 0x105b054) - (uVar5 < uVar2);\n            *0x105b000 = *0x105b000 + ((*0x105b008 - 4) - uVar2);\n        }\n    }\n    (*_sym.imp.KERNEL32.dll_SetConsoleCP)(0);\n    *0x105b0d0 = (*0x105b000 + L'\u6dc8') - *0x105b0d8;\n    if ((*0x105b00c != 0) || (*0x105b0d8 <= *0x105b008)) {\n        uVar4 = (*0x105b0d8 - 4) - *0x105b000;\n        bVar6 = CARRY4(uVar4, *0x105b008);\n        uVar4 = uVar4 + *0x105b008;\n        *0x105b03c = *0x105b03c - *0x105b000;\n        uVar5 = *0x105b000 + L'\\xffffffc0' + *0x105b0d8;\n        *0x105b008 = uVar4 - uVar5;\n        *0x105b00c = (*0x105b00c + bVar6) - (uVar4 < uVar5);\n    }\n    uVar8 = CONCAT44(*0x105b00c, *0x105b008);\n    *0x105d4cc = 2;\n    while( true ) {\n        if (0x17 < *0x105d4cc) break;\n        if (*0x105b000 != *0x105b034) {\n            *0x105b008 = uVar8;\n            uVar8 = fcn.01024810(uVar8, L\"v\u00eaw=\u00a5\u00c78\\x195+a\\x1bd\\f`q\u00b5\"[*0x105d4cc], 0);\n            *0x105b0d8 = *0x105b0d8 * 0x10c7f + *0x105b000;\n            if (*0x105b000 == str.vw8[0]) break;\n        }\n        *0x105d4cc = *0x105d4cc + 1;\n    }\n    *0x105b008 = uVar8;\n    *0x105b008 = uVar8;\n    *0x105b0d0 = fcn.01018dc0(*0x105b008);\n    *0x105b0d8 = *0x105b0d0 + *0x105b0d8 + uVar2;\n    arg_8h = &lpBuffer;\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetTempPathA)(0x87e);\n    *0x105b00c = 0;\n    if (*0x105b04c == 0xf52) {\n        *0x105b0d8 = *0x105b0d8 - str.vw8[6];\n        *0x105b0d4 = *0x105b0d8 * '\\x02' + 5;\n    }\n    if (*0x105b0d8 <= *0x105b0d0) {\n        bVar6 = *0x105b0a8 < uVar5;\n        *0x105b0a8 = *0x105b0a8 - uVar5;\n        *0x105b0ac = *0x105b0ac - bVar6;\n        *0x105b0d0 = *0x105b0d0 + uVar5 * -2 + 0x3c;\n    }\n    *0x105b008 = uVar5;\n    fcn.0101b570(0x105bf88);\n    var_4h._0_1_ = 1;\n    *0x105b0d8 = *0x105b0d0 + *0x105b0d8 + *0x105b000;\n    fcn.0101cbc0(&lpBuffer);\n    *0x105b0d0 = uVar2 + *0x105b0d8 * 8;\n    *0x105b000 = fcn.01018dc0(uVar2);\n    *0x105b0d8 = *0x105b0d0 + 0x33 + uVar2;\n    iVar3 = fcn.01021810();\n    *0x105b008 = iVar3 + 4 + *0x105b0d8;\n    *0x105b00c = 0;\n    *0x105b0d0 = *0x105b0d8 + 4 + *0x105b008;\n    *0x105b000 = fcn.010189a0(*0x105b0d8);\n    iVar3 = *0x105b008 + 5 + *0x105b0d8;\n    if (*0x105b058 == 9) {\n        *0x105b000 = *0x105b000 + *0x105b008 + *0x105b0d8;\n    }\n    else {\n        *0x105b0d8 = *0x105b008 + 5 + *0x105b000;\n    }\n    *0x105b0d0 = ((*0x105b0d8 + -4) - iVar3) + *0x105b0d0;\n    var_8ach = (*0x105b008 + 0x6dc8) - *0x105b0d0;\n    if ((*0x105b0c8 == 0xf52) && (*0x105b0cc == 0)) {\n        bVar6 = *0x105b008 < *0x105b080;\n        *0x105b008 = *0x105b008 - *0x105b080;\n        *0x105b00c = (*0x105b00c - *0x105b084) - bVar6;\n        *0x105b0d0 = *0x105b008 * 2 + 5;\n    }\n    *0x105b000 = fcn.01019160(var_8ach);\n    if (str.vw8[5] + *0x105b034 == 0x20b) {\n        *0x105b0d0 = *0x105b0d0 + 0xdb90;\n    }\n    else {\n        *0x105b04c = *0x105b0d0 + 5 + *0x105b0d8;\n        *0x105b0d0 = *0x105b0d0 * 0x10c80;\n    }\n    *0x105b0d8 = (*0x105b008 + 0x6dc8) - *0x105b0d0;\n    if ((*0x105b0e0 == 9) && (*0x105b0e4 == 0)) {\n        var_8ach = *0x105b000 + var_8ach + *0x105b008;\n    }\n    else {\n        *0x105b008 = *0x105b000 + 5U + var_8ach;\n        *0x105b00c = 0;\n    }\n    if ((*0x105b00c == 0) && (*0x105b008 <= *0x105b000)) {\n        bVar6 = *0x105b0a8 < var_8ach;\n        *0x105b0a8 = *0x105b0a8 - var_8ach;\n        *0x105b0ac = *0x105b0ac - bVar6;\n        *0x105b000 = *0x105b000 + var_8ach * -2 + 0x3c;\n    }\n    fcn.01016e90(*0x105b008);\n    if (str.vw8[5] + *0x105b034 == 0x20b) {\n        bVar6 = 0x6dc8 < *0x105b008;\n        bVar7 = CARRY4(0x6dc8 - *0x105b008, *0x105b008);\n        *0x105b008 = (0x6dc8 - *0x105b008) + *0x105b008;\n        *0x105b00c = bVar7 - bVar6;\n        *0x105b0d8 = *0x105b0d8 + *0x105b008 + *0x105b000;\n    }\n    else {\n        *0x105b04c = *0x105b0d8 + 5 + *0x105b000;\n        *0x105b0d8 = *0x105b0d8 * 0x10c80;\n    }\n    *0x105b0d0 = ((*0x105b0d8 + -4) - *0x105b000) + *0x105b0d0;\n    uVar2 = (*0x105b0d8 + -4) - *0x105b0d4;\n    bVar6 = CARRY4(uVar2, *0x105b008);\n    *0x105b008 = uVar2 + *0x105b008;\n    *0x105b00c = *0x105b00c + bVar6;\n    var_4h = var_4h._1_3_ << 8;\n    fcn.0101c190();\n    var_4h = 0xffffffff;\n    fcn.0101c560();\n    *in_FS_OFFSET = var_ch;\n    fcn.010247f4(arg_8h);\n    return;\n}\n",
        "token_count": 2925
    },
    "0101ce80": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t fcn.0101ce80(void)\n\n{\n    int32_t iVar1;\n    uint16_t uVar2;\n    uint var_10h;\n    uint var_ch;\n    uint32_t var_8h;\n    uint var_4h;\n    \n    var_4h._0_2_ = 0x17;\n    iVar1 = (0x13 - *0x105b000) + *0x105b004;\n    if (*0x105b024 + *0x105b034 == 0x20b) {\n        var_4h._0_2_ = 0x6dc8;\n        *0x105b004 = iVar1 + 0xdb90;\n    }\n    else {\n        *0x105b04c = iVar1 + 0x1c;\n        *0x105b004 = iVar1 * 0x10c80;\n    }\n    for (var_8h = 0x15f4; var_8h < 0x16f4; var_8h = var_8h + 4) {\n        if (*0x105b058 == 9) {\n            var_4h._0_2_ = var_4h + *0x105b0d0 + *0x105b004;\n        }\n        else {\n            *0x105b004 = *0x105b0d0 + 5 + var_4h;\n        }\n        if (*0x105b024 + *0x105b034 == 0x20b) {\n            var_4h._0_2_ = 0x6dc8;\n            *0x105b004 = *0x105b004 + 0xdb90;\n        }\n        else {\n            *0x105b04c = *0x105b004 + 5 + var_4h;\n            *0x105b004 = *0x105b004 * 0x10c80;\n        }\n        *0x105b0d8 = *0x105b000 + 0x33 + *0x105b0d4;\n        *0x105b0d0 = (var_4h + 0x6dc8) - *0x105b0d4;\n        if (*0x105b05c <= var_4h) {\n            *0x105b02c = *0x105b000;\n            *0x105b000 = var_4h + *0x105b000 * 8 + 0x33 + var_4h;\n            *0x105b0d0 = (var_4h + 0x6dc8) - *0x105b000;\n        }\n        *0x105b0d0 = *0x105b0d0 - ((*0x105b004 - 0x40) + var_4h);\n        *0x10fae28 = *(*0x105bf80 + var_8h + -0x15f4) + 0x103c8c8;\n        *(*0x105bf80 + var_8h + -0x15f4) = *0x10fae28;\n        var_4h._0_2_ = *0x105b0d0 + 0x33 + *0x105b0d8;\n    }\n    uVar2 = *0x105b004 + 0x33 + *0x105b000;\n    if (*0x105b05c <= uVar2) {\n        *0x105b02c = *0x105b004;\n        *0x105b004 = uVar2 + *0x105b004 * 8 + 0x33 + uVar2;\n        *0x105b0d0 = (uVar2 + 0x6dc8) - *0x105b004;\n    }\n    if (*0x105b004 <= *0x105b0d0) {\n        *0x105b03c = *0x105b03c - *0x105b0d8;\n        *0x105b0d0 = *0x105b0d8 * -2 + *0x105b0d0 + 0x3c;\n    }\n    return *0x105b0d0;\n}\n",
        "token_count": 956
    },
    "0101d980": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0101d980(uint32_t arg_8h, uint32_t arg_ch, uint32_t arg_10h)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    if (0xffffffff / arg_10h < arg_ch) {\n        fcn.010296b3();\n    }\n    if (0xfff < arg_ch * arg_10h) {\n        if ((arg_8h & 0x1f) != 0) {\n            fcn.010296b3();\n        }\n        uVar1 = *(arg_8h - 4);\n        if (arg_8h <= uVar1) {\n            fcn.010296b3();\n        }\n        if (arg_8h - uVar1 < 4) {\n            fcn.010296b3();\n        }\n        uVar2 = arg_8h - uVar1;\n        arg_8h = uVar1;\n        if (0x23 < uVar2) {\n            fcn.010296b3();\n        }\n    }\n    fcn.0102425c(arg_8h);\n    return;\n}\n",
        "token_count": 279
    },
    "0102af47": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.0102af47(uint arg_8h, uint arg_ch)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    uint32_t uVar3;\n    char *pcVar4;\n    int32_t in_ECX;\n    uint32_t uVar5;\n    uint32_t arg_ch_00;\n    bool bVar6;\n    uint var_4h;\n    \n    iVar1 = fcn.0102acba(*(in_ECX + 0x2c));\n    if (iVar1 == 1) {\n        *(in_ECX + 0x14) = *(in_ECX + 0x14) + 4;\n        if ((*(in_ECX + 0x20) >> 4 & 1) == 0) {\n            uVar3 = *(*(in_ECX + 0x14) + -4);\n        }\n        else {\n            uVar3 = *(*(in_ECX + 0x14) + -4);\n        }\n    }\n    else if (iVar1 == 2) {\n        *(in_ECX + 0x14) = *(in_ECX + 0x14) + 4;\n        if ((*(in_ECX + 0x20) >> 4 & 1) == 0) {\n            uVar3 = *(*(in_ECX + 0x14) + -4);\n        }\n        else {\n            uVar3 = *(*(in_ECX + 0x14) + -4);\n        }\n    }\n    else {\n        if (iVar1 != 4) {\n            if (iVar1 != 8) {\n                puVar2 = fcn.0102bd74();\n                *puVar2 = 0x16;\n                uVar3 = fcn.010296a3();\n                return uVar3 & 0xffffff00;\n            }\n            *(in_ECX + 0x14) = *(in_ECX + 0x14) + 8;\n            uVar3 = *(*(in_ECX + 0x14) + -8);\n            arg_ch_00 = *(*(in_ECX + 0x14) + -4);\n            goto code_r0x0102affd;\n        }\n        *(in_ECX + 0x14) = *(in_ECX + 0x14) + 4;\n        if ((*(in_ECX + 0x20) >> 4 & 1) == 0) {\n            uVar3 = *(*(in_ECX + 0x14) + -4);\n            arg_ch_00 = 0;\n            goto code_r0x0102affd;\n        }\n        uVar3 = *(*(in_ECX + 0x14) + -4);\n    }\n    arg_ch_00 = uVar3 >> 0x1f;\ncode_r0x0102affd:\n    uVar5 = *(in_ECX + 0x20);\n    if ((((uVar5 >> 4 & 1) != 0) && (arg_ch_00 < 1)) && (arg_ch_00 < 0)) {\n        bVar6 = uVar3 != 0;\n        uVar3 = -uVar3;\n        arg_ch_00 = -(arg_ch_00 + bVar6);\n        uVar5 = uVar5 | 0x40;\n        *(in_ECX + 0x20) = uVar5;\n    }\n    if (*(in_ECX + 0x28) < 0) {\n        *(in_ECX + 0x28) = 1;\n    }\n    else {\n        *(in_ECX + 0x20) = uVar5 & 0xfffffff7;\n        fcn.0102a220(*(in_ECX + 0x28));\n    }\n    if ((uVar3 | arg_ch_00) == 0) {\n        *(in_ECX + 0x20) = *(in_ECX + 0x20) & 0xffffffdf;\n    }\n    *(in_ECX + 0x3c) = 0;\n    if (iVar1 == 8) {\n        fcn.0102a35f(uVar3, arg_ch_00, arg_8h, arg_ch);\n    }\n    else {\n        fcn.0102a2ec(uVar3, arg_8h, arg_ch);\n    }\n    pcVar4 = *(in_ECX + 0x20) >> 7;\n    if (((pcVar4 & 1) != 0) && ((*(in_ECX + 0x38) == 0 || (pcVar4 = *(in_ECX + 0x34),  *pcVar4 != '0')))) {\n        *(in_ECX + 0x34) = *(in_ECX + 0x34) + -1;\n        **(in_ECX + 0x34) = 0x30;\n        *(in_ECX + 0x38) = *(in_ECX + 0x38) + 1;\n    }\n    return CONCAT31(pcVar4 >> 8, 1);\n}\n",
        "token_count": 1119
    },
    "0102a6db": {
        "rules": [
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint __thiscall\nfcn.0102a6db(int32_t param_1, uint param_2, uint param_3, uint param_4, uint param_5, uint param_6, uint param_7)\n\n{\n    uint arg_ch;\n    char cVar1;\n    uint *puVar2;\n    uint32_t arg_8h;\n    uint uVar3;\n    uint unaff_EBX;\n    uint unaff_retaddr;\n    \n    cVar1 = fcn.0102b1b4();\n    if (cVar1 != '\\0') {\n        if (*(param_1 + 0x10) == 0) {\ncode_r0x0102a6fb:\n            puVar2 = fcn.0102bd74();\n            *puVar2 = 0x16;\n            fcn.010296a3();\n        }\n        else {\n            do {\n                *(param_1 + 0x450) = *(param_1 + 0x450) + 1;\n                if (*(param_1 + 0x450) == 2) {\n                    return *(param_1 + 0x18);\n                }\n                *(param_1 + 0x38) = 0;\n                *(param_1 + 0x1c) = 0;\ncode_r0x0102a7a1:\n                cVar1 = **(param_1 + 0x10);\n                *(param_1 + 0x31) = cVar1;\n                if (cVar1 != '\\0') {\n                    *(param_1 + 0x10) = *(param_1 + 0x10) + 1;\n                    if (*(param_1 + 0x18) < 0) goto code_r0x0102a7b4;\n                    arg_ch = *(param_1 + 0x1c);\n                    arg_8h = *(param_1 + 0x31);\n                    uVar3 = fcn.0102a5cb(arg_8h, arg_ch);\n                    *(param_1 + 0x1c) = uVar3;\n    // switch table (8 cases) at 0x102a7df\n                    switch(uVar3) {\n                    case 0:\n                        cVar1 = fcn.0102a83c();\n                        break;\n                    case 1:\n                        *(param_1 + 0x28) = 0xffffffff;\n                        *(param_1 + 0x24) = 0;\n                        *(param_1 + 0x30) = 0;\n                        *(param_1 + 0x20) = 0;\n                        *(param_1 + 0x2c) = 0;\n                        *(param_1 + 0x3c) = 0;\n                        goto code_r0x0102a7a1;\n                    case 2:\n                        cVar1 = fcn.0102a7ff();\n                        break;\n                    case 3:\n                        cVar1 = fcn.0102ac8f();\n                        break;\n                    case 4:\n                        goto code_r0x0102a77b;\n                    case 5:\n                        cVar1 = fcn.0102a8e9();\n                        break;\n                    case 6:\n                        cVar1 = fcn.0102a90f();\n                        break;\n                    case 7:\n                        cVar1 = fcn.0102aa5d(arg_8h, arg_ch, arg_8h, unaff_EBX, unaff_retaddr, param_2, param_3, param_4\n                                             , param_5, param_6, param_7);\n                        break;\n                    case 0xbad1abe1:\n                        goto code_r0x0102a70e;\n                    default:\n                        goto code_r0x0102a6fb;\n                    }\n                    if (cVar1 == '\\0') {\n                        return 0xffffffff;\n                    }\n                    goto code_r0x0102a7a1;\n                }\n                *(param_1 + 0x10) = *(param_1 + 0x10) + 1;\ncode_r0x0102a7b4:\n                cVar1 = fcn.0102b1cf();\n            } while (cVar1 != '\\0');\n        }\n    }\ncode_r0x0102a70e:\n    return 0xffffffff;\ncode_r0x0102a77b:\n    *(param_1 + 0x28) = 0;\n    goto code_r0x0102a7a1;\n}\n",
        "token_count": 985
    },
    "0102e47c": {
        "rules": [
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0102e47c(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    int32_t *piVar3;\n    int32_t *piVar4;\n    char *var_10h;\n    uint var_ch;\n    int32_t *var_8h;\n    int32_t var_4h;\n    \n    if (arg_8h == 0) {\n        iVar1 = 0;\n    }\n    else if ((arg_8h == 2) || (arg_8h == 1)) {\n        fcn.0103849c();\n        iVar1 = 0;\n        fcn.01037edd(0, 0x10fb7b0, 0x104);\n        *0x10fbcd0 = 0x10fb7b0;\n        var_10h = *0x10fbce0;\n        if ((*0x10fbce0 == NULL) || (**0x10fbce0 == '\\0')) {\n            var_10h = 0x10fb7b0;\n        }\n        var_4h = 0;\n        var_ch = 0;\n        fcn.0102e2b6(var_10h, 0, 0, &var_4h, &var_ch);\n        piVar3 = fcn.0102e42d(var_4h, var_ch, 1);\n        piVar4 = piVar3;\n        if (piVar3 == NULL) {\n            puVar2 = fcn.0102bd74();\n            iVar1 = 0xc;\n            *puVar2 = 0xc;\n        }\n        else {\n            fcn.0102e2b6(var_10h, piVar3, piVar3 + var_4h, &var_4h, &var_ch);\n            if (arg_8h == 1) {\n                *0x10fbcd4 = var_4h + -1;\n                piVar4 = NULL;\n                *0x10fbcd8 = piVar3;\n            }\n            else {\n                var_8h = NULL;\n                iVar1 = fcn.01037e0b(piVar3, &var_8h);\n                piVar3 = var_8h;\n                if (iVar1 == 0) {\n                    *0x10fbcd4 = 0;\n                    iVar1 = *var_8h;\n                    while (iVar1 != 0) {\n                        var_8h = var_8h + 1;\n                        *0x10fbcd4 = *0x10fbcd4 + 1;\n                        iVar1 = *var_8h;\n                    }\n                    var_8h = NULL;\n                    iVar1 = 0;\n                    *0x10fbcd8 = piVar3;\n                }\n                fcn.0102d1c2(var_8h);\n                var_8h = NULL;\n            }\n        }\n        fcn.0102d1c2(piVar4);\n    }\n    else {\n        puVar2 = fcn.0102bd74();\n        iVar1 = 0x16;\n        *puVar2 = 0x16;\n        fcn.010296a3();\n    }\n    return iVar1;\n}\n",
        "token_count": 718
    },
    "0101a4e0": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x0101a663)\n// WARNING: Removing unreachable block (ram,0x0101a545)\n// WARNING: Removing unreachable block (ram,0x0101a56b)\n// WARNING: Removing unreachable block (ram,0x0101a7a1)\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0101a4e0(uint param_1, uint8_t *param_2)\n\n{\n    char cVar1;\n    int32_t *in_FS_OFFSET;\n    uint var_8h;\n    uint8_t *var_ch_2;\n    uint32_t uStack156;\n    uint var_88h;\n    uint var_80h;\n    uint var_78h;\n    uint var_74h;\n    uint var_70h;\n    uint var_6ch;\n    uint var_68h;\n    uint var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint32_t var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    ushort var_3ch;\n    ushort var_3ah;\n    ushort var_38h;\n    uint var_36h;\n    ushort var_32h;\n    ushort var_30h;\n    uint var_2eh;\n    ushort var_2ah;\n    ushort var_28h;\n    uint16_t var_26h;\n    int32_t var_24h;\n    int32_t var_20h;\n    int32_t var_1ch;\n    int32_t var_18h;\n    uint32_t var_14h;\n    uint32_t *var_10h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x103f813;\n    var_ch = *in_FS_OFFSET;\n    uStack156 = *0x105b174 ^ &stack0xfffffffc;\n    var_10h = &uStack156;\n    *in_FS_OFFSET = &var_ch;\n    var_14h = 0;\n    var_24h = fcn.01029b80(var_ch_2);\n    var_20h = 0;\n    _var_70h = fcn.01021a40();\n    if (0 < _var_70h) {\n        _var_78h = fcn.01021a40();\n        if (CONCAT44(var_20h, var_24h) < _var_78h) {\n            _var_44h = fcn.01021a40();\n            _var_44h = _var_44h - CONCAT44(var_20h, var_24h);\n            goto code_r0x0101a599;\n        }\n    }\n    _var_44h = 0;\ncode_r0x0101a599:\n    _var_1ch = _var_44h;\n    fcn.0101bf60(var_8h);\n    var_4h = 0;\n    cVar1 = fcn.0101cba0();\n    if (cVar1 == '\\0') {\n        var_14h = var_14h | 4;\n    }\n    else {\n        var_4h._0_1_ = 1;\n        var_4ch = fcn.01021140(&var_88h);\n        var_4h._0_1_ = 2;\n        var_48h = var_4ch;\n        var_5ch = fcn.0101b030(var_4ch);\n        var_4h = CONCAT31(var_4h._1_3_, 1);\n        var_50h = var_5ch;\n        fcn.0101c560();\n        var_54h = fcn.01021030();\n        if ((var_54h & 0x1c0) != 0x40) {\n            while (0 < _var_1ch) {\n                var_26h = fcn.01021010();\n                var_58h = fcn.010216e0();\n                var_2ah = fcn.01021830(var_26h);\n                var_28h = var_2ah;\n                var_2eh._2_2_ = fcn.01020d70();\n                cVar1 = fcn.01020d80(&var_2eh + 2, &var_2ah);\n                if (cVar1 != '\\0') {\n                    var_14h = var_14h | 4;\n                    break;\n                }\n                _var_1ch = CONCAT44(var_18h - (var_1ch == 0), var_1ch + -1);\n            }\n        }\n        for (; ((var_14h == 0 && (-1 < var_20h)) && ((0 < var_20h || (var_24h != 0)))); var_24h = var_24h + -1) {\n            var_2eh._0_2_ = fcn.010219e0(*var_ch_2);\n            var_60h = fcn.010216e0();\n            var_32h = fcn.01021830(var_2eh);\n            var_30h = var_32h;\n            var_36h._2_2_ = fcn.01020d70();\n            cVar1 = fcn.01020d80(&var_36h + 2, &var_32h);\n            if (cVar1 != '\\0') {\n                var_14h = var_14h | 4;\n            }\n            var_20h = var_20h - (var_24h == 0);\n            var_ch_2 = var_ch_2 + 1;\n        }\n        if (var_14h == 0) {\n            while (0 < _var_1ch) {\n                var_36h._0_2_ = fcn.01021010();\n                var_64h = fcn.010216e0();\n                var_3ah = fcn.01021830(var_36h);\n                var_38h = var_3ah;\n                var_3ch = fcn.01020d70();\n                cVar1 = fcn.01020d80(&var_3ch, &var_3ah);\n                if (cVar1 != '\\0') {\n                    var_14h = var_14h | 4;\n                    break;\n                }\n                _var_1ch = CONCAT44(var_18h - (var_1ch == 0), var_1ch + -1);\n            }\n        }\n        fcn.01021a00(0, 0);\n        var_4h = 0;\n    }\n    fcn.010217e0(var_14h, 0);\n    var_68h = var_8h;\n    var_4h = 0xffffffff;\n    fcn.0101c5e0();\n    *in_FS_OFFSET = var_ch;\n    return var_68h;\n}\n",
        "token_count": 1568
    },
    "0101a8a0": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x0101a905)\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0101a8a0(uint param_1, uint param_2)\n\n{\n    char cVar1;\n    uint32_t arg_ch;\n    uint32_t uVar2;\n    int32_t *in_FS_OFFSET;\n    bool bVar3;\n    int64_t iVar4;\n    ulong uVar5;\n    uint var_8h;\n    uint var_ch_2;\n    uint var_70h;\n    uint var_68h;\n    uint var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    int32_t var_50h;\n    int32_t var_4ch;\n    uint var_48h;\n    uint var_44h;\n    int32_t var_40h;\n    int32_t var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    int32_t var_24h;\n    ushort var_20h;\n    ushort var_1eh;\n    ushort var_1ch;\n    uint var_1ah;\n    ushort var_16h;\n    ushort var_14h;\n    uint16_t var_12h;\n    uchar *var_10h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x103f848;\n    var_ch = *in_FS_OFFSET;\n    var_10h = &stack0xffffff7c;\n    *in_FS_OFFSET = &var_ch;\n    var_24h = 0;\n    arg_ch = fcn.01021360(var_ch_2);\n    iVar4 = fcn.01021a40();\n    if (0 < iVar4) {\n        iVar4 = fcn.01021a40();\n        if ((-1 < iVar4) && ((0xffffffff < iVar4 || (arg_ch < iVar4)))) {\n            uVar5 = fcn.01021a40();\n            var_50h = uVar5 - arg_ch;\n            var_4ch = (uVar5 >> 0x20) - (uVar5 < arg_ch);\n            goto code_r0x0101a959;\n        }\n    }\n    var_50h = 0;\n    var_4ch = 0;\ncode_r0x0101a959:\n    var_40h = var_50h;\n    var_3ch = var_4ch;\n    fcn.0101bf60(var_8h);\n    var_4h = 0;\n    cVar1 = fcn.0101cba0();\n    if (cVar1 == '\\0') {\n        var_24h = 4;\n    }\n    else {\n        var_4h = CONCAT31(var_4h._1_3_, 1);\n        uVar2 = fcn.01021030();\n        if ((uVar2 & 0x1c0) != 0x40) {\n            while( true ) {\n                if ((var_3ch < 0) || ((var_3ch < 1 && (var_40h == 0)))) goto code_r0x0101aa55;\n                var_12h = fcn.01021010();\n                fcn.010216e0();\n                var_16h = fcn.01021830(var_12h);\n                var_14h = var_16h;\n                var_1ah._2_2_ = fcn.01020d70();\n                cVar1 = fcn.01020d80(&var_1ah + 2, &var_16h);\n                if (cVar1 != '\\0') break;\n                bVar3 = var_40h == 0;\n                var_40h = var_40h + -1;\n                var_3ch = var_3ch - bVar3;\n            }\n            var_24h = 4;\n        }\ncode_r0x0101aa55:\n        if (var_24h == 0) {\n            fcn.010216e0();\n            uVar5 = fcn.010218b0(var_ch_2, arg_ch, 0);\n            if ((uVar5 != arg_ch) || (uVar5 >> 0x20 != 0)) {\n                var_24h = 4;\n            }\n        }\n        if (var_24h == 0) {\n            while( true ) {\n                if ((var_3ch < 0) || ((var_3ch < 1 && (var_40h == 0)))) goto code_r0x0101ab3f;\n                var_1ah._0_2_ = fcn.01021010();\n                fcn.010216e0();\n                var_1eh = fcn.01021830(var_1ah);\n                var_1ch = var_1eh;\n                var_20h = fcn.01020d70();\n                cVar1 = fcn.01020d80(&var_20h, &var_1eh);\n                if (cVar1 != '\\0') break;\n                bVar3 = var_40h == 0;\n                var_40h = var_40h + -1;\n                var_3ch = var_3ch - bVar3;\n            }\n            var_24h = 4;\n        }\ncode_r0x0101ab3f:\n        fcn.01021a00(0, 0);\n        var_4h = 0;\n    }\n    fcn.010217e0(var_24h, 0);\n    var_4h = 0xffffffff;\n    fcn.0101c5e0();\n    *in_FS_OFFSET = var_ch;\n    return var_8h;\n}\n",
        "token_count": 1306
    },
    "0101ad70": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuchar * __cdecl fcn.0101ad70(uchar *arg_8h)\n\n{\n    uchar *puVar1;\n    uint var_ch;\n    uchar *var_8h;\n    int32_t var_4h;\n    \n    var_4h = fcn.01029b80(arg_8h);\n    var_4h = var_4h + 1;\n    puVar1 = fcn.01029704(var_4h, 1);\n    var_8h = puVar1;\n    if (puVar1 == NULL) {\n        fcn.01021d64();\n    }\n    for (; var_4h != 0; var_4h = var_4h + -1) {\n        *var_8h = *arg_8h;\n        arg_8h = arg_8h + 1;\n        var_8h = var_8h + 1;\n    }\n    return puVar1;\n}\n",
        "token_count": 208
    },
    "0101ade0": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nushort * __cdecl fcn.0101ade0(int32_t arg_8h, uint noname_1, uint arg_10h)\n\n{\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    int32_t var_20h;\n    ushort *var_1ch;\n    int32_t var_18h;\n    ushort *var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    var_28h = 0;\n    var_24h = 0;\n    var_20h = fcn.01029b80(arg_8h);\n    var_20h = var_20h + 1;\n    var_8h = 0;\n    var_18h = arg_8h;\n    var_10h = var_20h;\n    while ((var_10h != 0 && (var_ch = fcn.01021ef7(&var_4h, var_18h, var_10h, &var_28h, arg_10h),  0 < var_ch))) {\n        var_10h = var_10h - var_ch;\n        var_18h = var_18h + var_ch;\n        var_8h = var_8h + 1;\n    }\n    var_8h = var_8h + 1;\n    var_1ch = fcn.01029704(var_8h, 2);\n    if (var_1ch == NULL) {\n        fcn.01021d64();\n    }\n    var_14h = var_1ch;\n    var_30h = 0;\n    var_2ch = 0;\n    while ((var_8h != 0 && (var_ch = fcn.01021ef7(var_14h, arg_8h, var_20h, &var_30h, arg_10h),  0 < var_ch))) {\n        var_10h = var_10h - var_ch;\n        arg_8h = arg_8h + var_ch;\n        var_8h = var_8h + -1;\n        var_14h = var_14h + 1;\n    }\n    *var_14h = 0;\n    return var_1ch;\n}\n",
        "token_count": 527
    },
    "0101af70": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0101af70(uint arg_8h, uint arg_ch)\n\n{\n    uint *puVar1;\n    uint *puVar2;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    puVar1 = fcn.0101c660(4, arg_8h);\n    if (puVar1 != NULL) {\n        puVar2 = fcn.0101af20(arg_ch);\n        *puVar1 = *puVar2;\n    }\n    return;\n}\n",
        "token_count": 118
    },
    "0101b030": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t * __cdecl fcn.0101b030(uint arg_8h)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    int32_t *in_FS_OFFSET;\n    uint uVar3;\n    uint var_30h;\n    int32_t *var_24h;\n    uint var_20h;\n    uint var_1ch;\n    int32_t *var_18h;\n    int32_t *var_14h;\n    int32_t *var_10h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x103f8a8;\n    var_ch = *in_FS_OFFSET;\n    uVar1 = *0x105b174 ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    uVar3 = 0;\n    fcn.01021be4(0);\n    var_4h = 0;\n    var_10h = *0x10fae8c;\n    var_1ch = fcn.0101cb50(uVar3, uVar1);\n    var_14h = fcn.0101e580(var_1ch);\n    if (var_14h == NULL) {\n        if (var_10h == NULL) {\n            iVar2 = fcn.0101e210(&var_10h, arg_8h);\n            if (iVar2 == -1) {\n                fcn.0101bbc0();\n                fcn.010260fc(&var_30h, 0x10595f8);\n            }\n            else {\n                var_14h = var_10h;\n                *0x10fae8c = var_10h;\n                var_18h = var_10h;\n                (**(*var_10h + 4))();\n                fcn.010222ef(var_18h);\n            }\n        }\n        else {\n            var_14h = var_10h;\n        }\n    }\n    var_24h = var_14h;\n    var_4h = 0xffffffff;\n    fcn.01021c3c();\n    *in_FS_OFFSET = var_ch;\n    return var_24h;\n}\n",
        "token_count": 496
    },
    "0101b130": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t * __cdecl fcn.0101b130(uint arg_8h)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    int32_t *in_FS_OFFSET;\n    uint uVar3;\n    uint var_30h;\n    int32_t *var_24h;\n    uint var_20h;\n    uint var_1ch;\n    int32_t *var_18h;\n    int32_t *var_14h;\n    int32_t *var_10h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x103f8a8;\n    var_ch = *in_FS_OFFSET;\n    uVar1 = *0x105b174 ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    uVar3 = 0;\n    fcn.01021be4(0);\n    var_4h = 0;\n    var_10h = *0x10fae84;\n    var_1ch = fcn.0101cb50(uVar3, uVar1);\n    var_14h = fcn.0101e580(var_1ch);\n    if (var_14h == NULL) {\n        if (var_10h == NULL) {\n            iVar2 = fcn.0101e300(&var_10h, arg_8h);\n            if (iVar2 == -1) {\n                fcn.0101bbc0();\n                fcn.010260fc(&var_30h, 0x10595f8);\n            }\n            else {\n                var_14h = var_10h;\n                *0x10fae84 = var_10h;\n                var_18h = var_10h;\n                (**(*var_10h + 4))();\n                fcn.010222ef(var_18h);\n            }\n        }\n        else {\n            var_14h = var_10h;\n        }\n    }\n    var_24h = var_14h;\n    var_4h = 0xffffffff;\n    fcn.01021c3c();\n    *in_FS_OFFSET = var_ch;\n    return var_24h;\n}\n",
        "token_count": 494
    },
    "0101b230": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t * __cdecl fcn.0101b230(uint arg_8h)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    int32_t *in_FS_OFFSET;\n    uint uVar3;\n    uint var_30h;\n    int32_t *var_24h;\n    uint var_20h;\n    uint var_1ch;\n    int32_t *var_18h;\n    int32_t *var_14h;\n    int32_t *var_10h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x103f8a8;\n    var_ch = *in_FS_OFFSET;\n    uVar1 = *0x105b174 ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    uVar3 = 0;\n    fcn.01021be4(0);\n    var_4h = 0;\n    var_10h = *0x10fae88;\n    var_1ch = fcn.0101cb50(uVar3, uVar1);\n    var_14h = fcn.0101e580(var_1ch);\n    if (var_14h == NULL) {\n        if (var_10h == NULL) {\n            iVar2 = fcn.0101e3f0(&var_10h, arg_8h);\n            if (iVar2 == -1) {\n                fcn.0101bbc0();\n                fcn.010260fc(&var_30h, 0x10595f8);\n            }\n            else {\n                var_14h = var_10h;\n                *0x10fae88 = var_10h;\n                var_18h = var_10h;\n                (**(*var_10h + 4))();\n                fcn.010222ef(var_18h);\n            }\n        }\n        else {\n            var_14h = var_10h;\n        }\n    }\n    var_24h = var_14h;\n    var_4h = 0xffffffff;\n    fcn.01021c3c();\n    *in_FS_OFFSET = var_ch;\n    return var_24h;\n}\n",
        "token_count": 496
    },
    "0101c230": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0101c230(code **param_1)\n\n{\n    uint var_4h;\n    \n    *param_1 = vtable.std::ctype_wchar_t_.0;\n    if (param_1[4] != NULL) {\n        fcn.0102970f(param_1[3]);\n    }\n    fcn.0102970f(param_1[5]);\n    fcn.0101c4b0();\n    return;\n}\n",
        "token_count": 101
    },
    "0101c560": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0101c560(int32_t param_1)\n\n{\n    uint32_t uVar1;\n    uint *puVar2;\n    int32_t *in_FS_OFFSET;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    uint uStack12;\n    uint uStack8;\n    \n    uStack8 = 0xffffffff;\n    uStack12 = 0x103faf0;\n    var_ch = *in_FS_OFFSET;\n    uVar1 = *0x105b174 ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    if ((*(param_1 + 4) != 0) && (puVar2 = (**(**(param_1 + 4) + 8))(uVar1),  puVar2 != NULL)) {\n        (***puVar2)(1);\n    }\n    *in_FS_OFFSET = var_ch;\n    return;\n}\n",
        "token_count": 220
    },
    "0101c6e0": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_2h\n// WARNING: Could not reconcile some variable overlaps\n\nuchar * __cdecl fcn.0101c6e0(uint32_t arg_8h)\n\n{\n    char cVar1;\n    uchar *in_ECX;\n    uint var_8h;\n    ushort var_4h;\n    uint var_2h;\n    \n    if (*(in_ECX + 4) != 0) {\n        var_2h._0_2_ = fcn.01021830(arg_8h & 0xffff);\n        var_4h = fcn.01020d70();\n        cVar1 = fcn.01020d80(&var_4h, &var_2h);\n        if (cVar1 == '\\0') {\n            return in_ECX;\n        }\n    }\n    *in_ECX = 1;\n    return in_ECX;\n}\n",
        "token_count": 200
    },
    "0101c740": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t * __fastcall fcn.0101c740(int32_t *param_1)\n\n{\n    char cVar1;\n    uint arg_8h;\n    uint *puVar2;\n    uint32_t arg_1ch;\n    int32_t *in_FS_OFFSET;\n    uint var_8h;\n    int32_t arg_18h;\n    uint32_t uStack108;\n    uint var_58h;\n    uint var_50h;\n    uint var_48h;\n    uint var_40h;\n    int32_t *var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    int32_t var_20h;\n    uint32_t var_1ch;\n    int32_t *var_18h;\n    uint16_t var_12h;\n    uint32_t *var_10h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x103fb20;\n    var_ch = *in_FS_OFFSET;\n    uStack108 = *0x105b174 ^ &stack0xfffffffc;\n    var_10h = &uStack108;\n    *in_FS_OFFSET = &var_ch;\n    var_1ch = 0;\n    var_18h = param_1;\n    fcn.0101bf60(param_1);\n    var_4h = 0;\n    cVar1 = fcn.0101cba0();\n    if (cVar1 != '\\0') {\n        var_28h = fcn.01021140(&var_48h);\n        var_4h._0_1_ = 1;\n        var_24h = var_28h;\n        var_30h = fcn.0101b130(var_28h);\n        var_4h._0_1_ = 0;\n        fcn.0101c560();\n        var_4h = CONCAT31(var_4h._1_3_, 2);\n        if (var_18h == NULL) {\n            var_20h = 0;\n        }\n        else {\n            var_20h = var_18h + *(*var_18h + 4);\n        }\n        var_12h = fcn.01021010();\n        arg_8h = fcn.010216e0();\n        arg_1ch = var_12h;\n        arg_18h = var_20h;\n        var_2ch = arg_8h;\n        puVar2 = fcn.0101b8b0(arg_8h);\n        var_34h = fcn.01021660(&var_58h, *puVar2, puVar2[1], arg_8h, arg_18h, arg_1ch);\n        cVar1 = fcn.01020fc0();\n        if (cVar1 != '\\0') {\n            var_1ch = var_1ch | 4;\n        }\n        var_4h = 0;\n    }\n    fcn.010217e0(var_1ch, 0);\n    var_38h = var_18h;\n    var_4h = 0xffffffff;\n    fcn.0101c5e0();\n    *in_FS_OFFSET = var_ch;\n    return var_38h;\n}\n",
        "token_count": 760
    },
    "0101c8e0": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t * __thiscall fcn.0101c8e0(int32_t *param_1, uint param_2)\n\n{\n    char cVar1;\n    uint arg_8h;\n    uint *puVar2;\n    uint32_t arg_1ch;\n    int32_t *in_FS_OFFSET;\n    uint var_8h;\n    uint var_ch_2;\n    int32_t arg_18h;\n    uint32_t uStack108;\n    uint var_58h;\n    uint var_50h;\n    uint var_48h;\n    uint var_40h;\n    int32_t *var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    int32_t var_20h;\n    uint32_t var_1ch;\n    int32_t *var_18h;\n    uint16_t var_12h;\n    uint32_t *var_10h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x103fb50;\n    var_ch = *in_FS_OFFSET;\n    uStack108 = *0x105b174 ^ &stack0xfffffffc;\n    var_10h = &uStack108;\n    *in_FS_OFFSET = &var_ch;\n    var_1ch = 0;\n    var_18h = param_1;\n    fcn.0101bf60(param_1);\n    var_4h = 0;\n    cVar1 = fcn.0101cba0();\n    if (cVar1 != '\\0') {\n        var_28h = fcn.01021140(&var_48h);\n        var_4h._0_1_ = 1;\n        var_24h = var_28h;\n        var_30h = fcn.0101b130(var_28h);\n        var_4h._0_1_ = 0;\n        fcn.0101c560();\n        var_4h = CONCAT31(var_4h._1_3_, 2);\n        if (var_18h == NULL) {\n            var_20h = 0;\n        }\n        else {\n            var_20h = var_18h + *(*var_18h + 4);\n        }\n        var_12h = fcn.01021010();\n        arg_8h = fcn.010216e0();\n        arg_1ch = var_12h;\n        arg_18h = var_20h;\n        var_2ch = arg_8h;\n        puVar2 = fcn.0101b8b0(arg_8h);\n        var_34h = fcn.010216a0(&var_58h, *puVar2, puVar2[1], arg_8h, arg_18h, arg_1ch, var_8h);\n        cVar1 = fcn.01020fc0();\n        if (cVar1 != '\\0') {\n            var_1ch = var_1ch | 4;\n        }\n        var_4h = 0;\n    }\n    fcn.010217e0(var_1ch, 0);\n    var_38h = var_18h;\n    var_4h = 0xffffffff;\n    fcn.0101c5e0();\n    *in_FS_OFFSET = var_ch;\n    return var_38h;\n}\n",
        "token_count": 781
    },
    "0101d220": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.0101d220(uint32_t arg_8h, uint32_t arg_ch, uint arg_10h)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    if (arg_8h == 0) {\n        uVar2 = 0;\n    }\n    else {\n        if (0xffffffff / arg_ch < arg_8h) {\n            fcn.01021d64();\n        }\n        arg_8h = arg_8h * arg_ch;\n        if ((arg_10h == '\\0') || (arg_8h < 0x1000)) {\n            uVar2 = fcn.01024229(arg_8h);\n            if (uVar2 == 0) {\n                fcn.010296b3();\n            }\n        }\n        else {\n            if (arg_8h + 0x23 <= arg_8h) {\n                fcn.01021d64();\n            }\n            iVar1 = fcn.01024229(arg_8h + 0x23);\n            if (iVar1 == 0) {\n                fcn.010296b3();\n            }\n            uVar2 = iVar1 + 0x23U & 0xffffffe0;\n            *(uVar2 - 4) = iVar1;\n        }\n    }\n    return uVar2;\n}\n",
        "token_count": 324
    },
    "0101d4d0": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0101d4d0(int32_t arg_8h, int32_t arg_ch, uint32_t arg_10h)\n\n{\n    int32_t iVar1;\n    uint32_t arg_10h_00;\n    uint *arg_ch_00;\n    uint var_4h;\n    \n    if (arg_ch == 1) {\n        arg_ch_00 = &arg_10h;\n        iVar1 = fcn.0101f110();\n        fcn.0101fd40(iVar1 + arg_8h * 2, arg_ch_00);\n    }\n    else {\n        arg_10h_00 = arg_10h & 0xffff;\n        iVar1 = fcn.0101f110();\n        fcn.0101fd20(iVar1 + arg_8h * 2, arg_ch, arg_10h_00);\n    }\n    return;\n}\n",
        "token_count": 199
    },
    "0101d590": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid fcn.0101d590(uint32_t param_1, int32_t param_2)\n\n{\n    uint32_t uVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    uint uVar4;\n    uint arg_8h;\n    uint32_t *puVar5;\n    int32_t *in_FS_OFFSET;\n    uint32_t var_8h;\n    int32_t var_ch_2;\n    uint var_10h;\n    uint var_ch;\n    uint *arg_ch;\n    uint32_t uStack56;\n    uint var_20h;\n    uint var_1ch;\n    uint32_t var_18h;\n    uint var_14h;\n    uint32_t *puStack20;\n    int32_t var_ch_3;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x103fb70;\n    var_ch_3 = *in_FS_OFFSET;\n    uStack56 = *0x105b174 ^ &stack0xfffffffc;\n    puStack20 = &uStack56;\n    *in_FS_OFFSET = &var_ch_3;\n    var_18h = var_8h | 0xf;\n    uVar1 = fcn.01021430();\n    if (uVar1 < var_18h) {\n        var_18h = var_8h;\n    }\n    else {\n        uVar1 = var_18h / 3;\n        puVar5 = fcn.0101f1b0();\n        if (uVar1 < *puVar5 >> 1) {\n            puVar5 = fcn.0101f1b0();\n            uVar1 = *puVar5;\n            iVar3 = fcn.01021430();\n            uVar1 = iVar3 - (uVar1 >> 1);\n            puVar5 = fcn.0101f1b0();\n            if (*puVar5 < uVar1 || *puVar5 == uVar1) {\n                puVar5 = fcn.0101f1b0();\n                uVar1 = *puVar5;\n                piVar2 = fcn.0101f1b0();\n                var_18h = (uVar1 >> 1) + *piVar2;\n            }\n            else {\n                var_18h = fcn.01021430();\n            }\n        }\n    }\n    var_4h = 0;\n    iVar3 = var_18h + 1;\n    fcn.0101e1e0();\n    var_1ch = fcn.0101f620(iVar3);\n    var_4h = 0xffffffff;\n    if (var_ch_2 != 0) {\n        iVar3 = var_ch_2;\n        uVar4 = fcn.0101f0f0();\n        arg_8h = fcn.0101af20(var_1ch);\n        fcn.0101ffa0(arg_8h, uVar4, iVar3);\n    }\n    fcn.0101f420(1, 0);\n    arg_ch = &var_1ch;\n    uVar4 = fcn.0101d460();\n    uVar4 = fcn.0101af20(uVar4);\n    fcn.0101e1e0();\n    fcn.0101af40(uVar4, arg_ch);\n    puVar5 = fcn.0101f1b0();\n    *puVar5 = var_18h;\n    fcn.0101db10(var_ch_2);\n    *in_FS_OFFSET = var_ch_3;\n    return;\n}\n",
        "token_count": 798
    },
    "0101d770": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid fcn.0101d770(uint32_t param_1, int32_t param_2)\n\n{\n    uint32_t uVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    uint uVar4;\n    uint arg_8h;\n    uint32_t *puVar5;\n    int32_t *in_FS_OFFSET;\n    uint32_t var_8h;\n    int32_t var_ch_2;\n    uint var_10h;\n    uint var_ch;\n    uint *arg_ch;\n    uint32_t uStack56;\n    uint var_20h;\n    uint var_1ch;\n    uint32_t var_18h;\n    uint var_14h;\n    uint32_t *puStack20;\n    int32_t var_ch_3;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x103fb90;\n    var_ch_3 = *in_FS_OFFSET;\n    uStack56 = *0x105b174 ^ &stack0xfffffffc;\n    puStack20 = &uStack56;\n    *in_FS_OFFSET = &var_ch_3;\n    var_18h = var_8h | 7;\n    uVar1 = fcn.01021470();\n    if (uVar1 < var_18h) {\n        var_18h = var_8h;\n    }\n    else {\n        uVar1 = var_18h / 3;\n        puVar5 = fcn.0101f1b0();\n        if (uVar1 < *puVar5 >> 1) {\n            puVar5 = fcn.0101f1b0();\n            uVar1 = *puVar5;\n            iVar3 = fcn.01021470();\n            uVar1 = iVar3 - (uVar1 >> 1);\n            puVar5 = fcn.0101f1b0();\n            if (*puVar5 < uVar1 || *puVar5 == uVar1) {\n                puVar5 = fcn.0101f1b0();\n                uVar1 = *puVar5;\n                piVar2 = fcn.0101f1b0();\n                var_18h = (uVar1 >> 1) + *piVar2;\n            }\n            else {\n                var_18h = fcn.01021470();\n            }\n        }\n    }\n    var_4h = 0;\n    iVar3 = var_18h + 1;\n    fcn.0101e1e0();\n    var_1ch = fcn.0101f640(iVar3);\n    var_4h = 0xffffffff;\n    if (var_ch_2 != 0) {\n        iVar3 = var_ch_2;\n        uVar4 = fcn.0101f110();\n        arg_8h = fcn.0101af20(var_1ch);\n        fcn.0101ffd0(arg_8h, uVar4, iVar3);\n    }\n    fcn.0101f4e0(1, 0);\n    arg_ch = &var_1ch;\n    uVar4 = fcn.0101d460();\n    uVar4 = fcn.0101af20(uVar4);\n    fcn.0101e1e0();\n    fcn.0101af40(uVar4, arg_ch);\n    puVar5 = fcn.0101f1b0();\n    *puVar5 = var_18h;\n    fcn.0101db50(var_ch_2);\n    *in_FS_OFFSET = var_ch_3;\n    return;\n}\n",
        "token_count": 797
    },
    "0101dce0": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x0101dfc6)\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl\nfcn.0101dce0(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h, uint32_t arg_1ch, char *arg_20h, \n            uint32_t arg_24h)\n\n{\n    ushort uVar1;\n    uint32_t uVar2;\n    uint8_t **ppuVar3;\n    uint uVar4;\n    ushort *puVar5;\n    uint32_t uVar6;\n    uint *puVar7;\n    uint arg_18h_00;\n    int32_t arg_8h_00;\n    int32_t *in_FS_OFFSET;\n    int32_t arg_1ch_00;\n    uint arg_1ch_01;\n    uint uVar8;\n    uint var_d4h;\n    uint var_cch;\n    uint var_c4h;\n    uint var_bch;\n    uint var_b4h;\n    uint var_ach;\n    uint var_a4h;\n    uint var_9ch;\n    uint var_94h;\n    uint var_90h;\n    uint32_t var_8ch;\n    uint var_88h;\n    uint var_84h;\n    uint var_80h;\n    uint var_7ch;\n    uint var_78h;\n    int32_t var_74h;\n    uint32_t var_70h;\n    uint var_6ch;\n    int32_t var_68h;\n    uint32_t var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint32_t var_58h;\n    uint32_t var_54h;\n    int32_t var_50h;\n    uint var_4ch;\n    char *var_48h;\n    int32_t var_44h;\n    uint var_40h;\n    uint var_28h;\n    uint32_t var_10h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x103fbd6;\n    var_ch = *in_FS_OFFSET;\n    var_10h = *0x105b174 ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    if ((arg_24h == 0) || ((*arg_20h != '+' && (*arg_20h != '-')))) {\n        var_68h = 0;\n    }\n    else {\n        var_68h = 1;\n    }\n    var_44h = var_68h;\n    uVar2 = fcn.01021030(var_10h);\n    if ((uVar2 & 0x3000) == 0x3000) {\n        var_6ch = 0x104acc0;\n        if (((var_44h + 2U <= arg_24h) && (arg_20h[var_44h] == '0')) &&\n           ((arg_20h[var_44h + 1] == 'x' || (arg_20h[var_44h + 1] == 'X')))) {\n            var_44h = var_44h + 2;\n        }\n    }\n    else {\n        var_6ch = 0x104acbc;\n    }\n    var_8ch = fcn.01029b30(arg_20h, var_6ch);\n    var_4ch._0_2_ = *0x104acc4;\n    ppuVar3 = fcn.0102b619();\n    var_4ch._0_2_ = var_4ch & 0xff00 | **ppuVar3;\n    var_54h = fcn.01029b30(arg_20h, &var_4ch);\n    var_7ch = fcn.01021140(&var_9ch);\n    var_4h = 0;\n    var_78h = var_7ch;\n    var_80h = fcn.0101b030(var_7ch);\n    var_4h = 0xffffffff;\n    fcn.0101c560();\n    fcn.0101b630(arg_24h, 0);\n    var_4h = 1;\n    uVar4 = fcn.0101cb30(0);\n    fcn.010219b0(arg_20h, arg_20h + arg_24h, uVar4);\n    var_88h = fcn.01021140(&var_a4h);\n    var_4h._0_1_ = 2;\n    var_84h = var_88h;\n    var_60h = fcn.0101b230(var_88h);\n    var_4h._0_1_ = 1;\n    fcn.0101c560();\n    fcn.010211b0(&var_40h);\n    var_4h = CONCAT31(var_4h._1_3_, 3);\n    var_5ch._0_2_ = fcn.010218e0();\n    if (var_54h != arg_24h) {\n        uVar1 = fcn.01020080();\n        puVar5 = fcn.0101cb30(var_54h);\n        *puVar5 = uVar1;\n    }\n    if (var_54h == arg_24h) {\n        var_70h = var_8ch;\n    }\n    else {\n        var_70h = var_54h;\n    }\n    var_58h = var_70h;\n    var_48h = fcn.0101cb10(0);\n    while (((*var_48h != '\\x7f' && ('\\0' < *var_48h)) && (*var_48h < var_58h - var_44h))) {\n        var_58h = var_58h - *var_48h;\n        fcn.010211f0(var_58h, 1, var_5ch);\n        if ('\\0' < var_48h[1]) {\n            var_48h = var_48h + 1;\n        }\n    }\n    uVar2 = fcn.01021810();\n    _var_94h = fcn.01021a40();\n    if (0 < _var_94h) {\n        uVar6 = fcn.01021a40();\n        if (uVar2 < uVar6) {\n            var_74h = fcn.01021a40();\n            var_74h = var_74h - uVar2;\n            goto code_r0x0101dff3;\n        }\n    }\n    var_74h = 0;\ncode_r0x0101dff3:\n    var_50h = var_74h;\n    var_64h = fcn.01021030();\n    var_64h = var_64h & 0x1c0;\n    if ((var_64h == 0x40) || (var_64h == 0x100)) {\n        if (var_64h == 0x100) {\n            uVar8 = 0;\n            uVar4 = fcn.0101cb30(0);\n            puVar7 = fcn.0101f350(arg_8h, &var_bch, arg_10h, arg_14h, uVar4, uVar8);\n            puVar7 = fcn.0101f3a0(arg_8h, &var_c4h, *puVar7, puVar7[1], arg_1ch & 0xffff, var_50h);\n            arg_10h = *puVar7;\n            arg_14h = puVar7[1];\n            var_50h = 0;\n        }\n        else {\n            uVar8 = 0;\n            uVar4 = fcn.0101cb30(0);\n            puVar7 = fcn.0101f350(arg_8h, &var_cch, arg_10h, arg_14h, uVar4, uVar8);\n            arg_10h = *puVar7;\n            arg_14h = puVar7[1];\n        }\n    }\n    else {\n        puVar7 = fcn.0101f3a0(arg_8h, &var_ach, arg_10h, arg_14h, arg_1ch & 0xffff, var_50h);\n        uVar4 = *puVar7;\n        uVar8 = puVar7[1];\n        var_50h = 0;\n        arg_1ch_01 = 0;\n        arg_18h_00 = fcn.0101cb30(0);\n        puVar7 = fcn.0101f350(arg_8h, &var_b4h, uVar4, uVar8, arg_18h_00, arg_1ch_01);\n        arg_10h = *puVar7;\n        arg_14h = puVar7[1];\n    }\n    arg_8h_00 = uVar2 - var_44h;\n    arg_1ch_00 = var_44h;\n    uVar4 = fcn.0101cb30(var_44h);\n    puVar7 = fcn.0101f350(arg_8h, &var_d4h, arg_10h, arg_14h, uVar4, arg_1ch_00);\n    uVar4 = *puVar7;\n    uVar8 = puVar7[1];\n    fcn.01021a00(0, 0);\n    fcn.0101f3a0(arg_8h, arg_ch, uVar4, uVar8, arg_1ch & 0xffff, var_50h);\n    var_4h = CONCAT31(var_4h._1_3_, 1);\n    fcn.0101c190();\n    var_4h = 0xffffffff;\n    fcn.0101c1e0();\n    *in_FS_OFFSET = var_ch;\n    fcn.010247f4(arg_8h_00);\n    return;\n}\n",
        "token_count": 2242
    },
    "0101e210": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.0101e210(int32_t *arg_8h, uint arg_ch)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint arg_8h_00;\n    uint arg_8h_01;\n    int32_t *in_FS_OFFSET;\n    uint var_58h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    int32_t var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x103fc28;\n    var_ch = *in_FS_OFFSET;\n    uVar1 = *0x105b174 ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    if ((arg_8h != NULL) && (*arg_8h == 0)) {\n        iVar2 = fcn.01024229(0x44);\n        var_4h = 0;\n        if (iVar2 == 0) {\n            var_18h = 0;\n        }\n        else {\n            arg_8h_00 = fcn.0101fe10(0, uVar1);\n            arg_8h_01 = fcn.0101b950(arg_8h_00);\n            var_4h = CONCAT31(var_4h._1_3_, 1);\n            var_18h = fcn.0101b760(arg_8h_01, arg_8h_00);\n        }\n        *arg_8h = var_18h;\n        var_4h = 0xffffffff;\n        if (iVar2 != 0) {\n            fcn.0101c360();\n        }\n    }\n    *in_FS_OFFSET = var_ch;\n    return 2;\n}\n",
        "token_count": 430
    },
    "0101e300": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.0101e300(int32_t *arg_8h, uint arg_ch)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint arg_8h_00;\n    uint arg_8h_01;\n    int32_t *in_FS_OFFSET;\n    uint var_58h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    int32_t var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x103fc78;\n    var_ch = *in_FS_OFFSET;\n    uVar1 = *0x105b174 ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    if ((arg_8h != NULL) && (*arg_8h == 0)) {\n        iVar2 = fcn.01024229(8);\n        var_4h = 0;\n        if (iVar2 == 0) {\n            var_18h = 0;\n        }\n        else {\n            arg_8h_00 = fcn.0101fe10(0, uVar1);\n            arg_8h_01 = fcn.0101b950(arg_8h_00);\n            var_4h = CONCAT31(var_4h._1_3_, 1);\n            var_18h = fcn.0101b7d0(arg_8h_01, arg_8h_00);\n        }\n        *arg_8h = var_18h;\n        var_4h = 0xffffffff;\n        if (iVar2 != 0) {\n            fcn.0101c360();\n        }\n    }\n    *in_FS_OFFSET = var_ch;\n    return 4;\n}\n",
        "token_count": 430
    },
    "0101e3f0": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.0101e3f0(int32_t *arg_8h, uint arg_ch)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint arg_8h_00;\n    uint arg_8h_01;\n    int32_t *in_FS_OFFSET;\n    uint arg_10h;\n    uint var_58h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    int32_t var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x103fcc8;\n    var_ch = *in_FS_OFFSET;\n    uVar1 = *0x105b174 ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    if ((arg_8h != NULL) && (*arg_8h == 0)) {\n        iVar2 = fcn.01024229(0x18);\n        var_4h = 0;\n        if (iVar2 == 0) {\n            var_18h = 0;\n        }\n        else {\n            arg_10h = 0;\n            arg_8h_00 = fcn.0101fe10(0, 1, uVar1);\n            arg_8h_01 = fcn.0101b950(arg_8h_00);\n            var_4h = CONCAT31(var_4h._1_3_, 1);\n            var_18h = fcn.0101b840(arg_8h_01, arg_8h_00, arg_10h);\n        }\n        *arg_8h = var_18h;\n        var_4h = 0xffffffff;\n        if (iVar2 != 0) {\n            fcn.0101c360();\n        }\n    }\n    *in_FS_OFFSET = var_ch;\n    return 4;\n}\n",
        "token_count": 456
    },
    "0101e700": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.0101e700(uint32_t arg_8h, uint32_t arg_ch)\n\n{\n    uint32_t uVar1;\n    uint32_t *puVar2;\n    uint *puVar3;\n    uint32_t var_ch;\n    uint32_t var_8h;\n    uint var_4h;\n    \n    uVar1 = fcn.01021470();\n    if (uVar1 < arg_8h) {\n        fcn.0101f5e0();\n    }\n    puVar2 = fcn.0101f1b0();\n    if (*puVar2 < arg_8h) {\n        puVar3 = fcn.0101f1d0();\n        arg_ch = fcn.0101d770(arg_8h, *puVar3);\n    }\n    else {\n        arg_ch = arg_ch & 0xff;\n        if ((arg_ch == 0) || (7 < arg_8h)) {\n            if (arg_8h == 0) {\n                arg_ch = fcn.0101db50(0);\n            }\n        }\n        else {\n            puVar2 = fcn.0101f1d0();\n            if (arg_8h < *puVar2) {\n                var_8h = arg_8h;\n            }\n            else {\n                puVar2 = fcn.0101f1d0();\n                var_8h = *puVar2;\n            }\n            arg_ch = fcn.0101f4e0(1, var_8h);\n        }\n    }\n    var_ch = arg_8h != 0;\n    return arg_ch & 0xffffff00 | var_ch;\n}\n",
        "token_count": 370
    },
    "0101eb90": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.0101eb90(uint32_t arg_8h)\n\n{\n    uint32_t in_EAX;\n    int32_t iVar1;\n    uint32_t *puVar2;\n    uint var_4h;\n    \n    if ((arg_8h != 0) && (in_EAX = fcn.0101f110(),  in_EAX <= arg_8h)) {\n        iVar1 = fcn.0101f110();\n        puVar2 = fcn.0101f1d0();\n        in_EAX = *puVar2;\n        if (arg_8h < iVar1 + in_EAX * 2) {\n            return CONCAT31(in_EAX >> 8, 1);\n        }\n    }\n    return in_EAX & 0xffffff00;\n}\n",
        "token_count": 176
    },
    "0101ebe0": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x0101ee09)\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl\nfcn.0101ebe0(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h, uint32_t arg_1ch, char *arg_20h, \n            uint32_t arg_24h)\n\n{\n    uint32_t uVar1;\n    uint uVar2;\n    uint32_t uVar3;\n    uint *puVar4;\n    uint uVar5;\n    int32_t iVar6;\n    int32_t *in_FS_OFFSET;\n    int32_t arg_1ch_00;\n    uint uVar7;\n    uint uVar8;\n    uint var_bch;\n    uint var_b4h;\n    uint var_ach;\n    uint var_a4h;\n    uint var_9ch;\n    uint var_94h;\n    uint var_8ch;\n    uint var_84h;\n    uint var_7ch;\n    uint var_78h;\n    uint var_74h;\n    uint var_70h;\n    uint var_6ch;\n    uint var_68h;\n    uint var_64h;\n    int32_t var_60h;\n    uint var_5ch;\n    int32_t var_58h;\n    uint32_t var_54h;\n    uint var_50h;\n    int32_t var_4ch;\n    char *var_48h;\n    int32_t var_44h;\n    uint var_40h;\n    uint var_28h;\n    uint32_t var_10h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x103fd46;\n    var_ch = *in_FS_OFFSET;\n    var_10h = *0x105b174 ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    if ((arg_24h == 0) || ((*arg_20h != '+' && (*arg_20h != '-')))) {\n        var_58h = 0;\n    }\n    else {\n        var_58h = 1;\n    }\n    var_44h = var_58h;\n    uVar1 = fcn.01021030(var_10h);\n    if (((((uVar1 & 0xe00) == 0x800) && (var_44h + 2U <= arg_24h)) && (arg_20h[var_44h] == '0')) &&\n       ((arg_20h[var_44h + 1] == 'x' || (arg_20h[var_44h + 1] == 'X')))) {\n        var_44h = var_44h + 2;\n    }\n    var_68h = fcn.01021140(&var_84h);\n    var_4h = 0;\n    var_64h = var_68h;\n    var_6ch = fcn.0101b030(var_68h);\n    var_4h = 0xffffffff;\n    fcn.0101c560();\n    fcn.0101b630(arg_24h, 0);\n    var_4h = 1;\n    uVar2 = fcn.0101cb30(0);\n    fcn.010219b0(arg_20h, arg_20h + arg_24h, uVar2);\n    var_74h = fcn.01021140(&var_8ch);\n    var_4h._0_1_ = 2;\n    var_70h = var_74h;\n    var_5ch = fcn.0101b230(var_74h);\n    var_4h._0_1_ = 1;\n    fcn.0101c560();\n    fcn.010211b0(&var_40h);\n    var_4h = CONCAT31(var_4h._1_3_, 3);\n    var_48h = fcn.0101cb10(0);\n    if ((*var_48h != '\\x7f') && ('\\0' < *var_48h)) {\n        var_50h._0_2_ = fcn.010218e0();\n        while (((*var_48h != '\\x7f' && ('\\0' < *var_48h)) && (*var_48h < arg_24h - var_44h))) {\n            arg_24h = arg_24h - *var_48h;\n            fcn.010211f0(arg_24h, 1, var_50h);\n            if ('\\0' < var_48h[1]) {\n                var_48h = var_48h + 1;\n            }\n        }\n    }\n    uVar1 = fcn.01021810();\n    _var_7ch = fcn.01021a40();\n    if (0 < _var_7ch) {\n        uVar3 = fcn.01021a40();\n        if (uVar1 < uVar3) {\n            var_60h = fcn.01021a40();\n            var_60h = var_60h - uVar1;\n            goto code_r0x0101ee33;\n        }\n    }\n    var_60h = 0;\ncode_r0x0101ee33:\n    var_4ch = var_60h;\n    var_54h = fcn.01021030();\n    var_54h = var_54h & 0x1c0;\n    if ((var_54h == 0x40) || (var_54h == 0x100)) {\n        if (var_54h == 0x100) {\n            uVar8 = 0;\n            uVar2 = fcn.0101cb30(0);\n            puVar4 = fcn.0101f350(arg_8h, &var_a4h, arg_10h, arg_14h, uVar2, uVar8);\n            puVar4 = fcn.0101f3a0(arg_8h, &var_ach, *puVar4, puVar4[1], arg_1ch & 0xffff, var_4ch);\n            arg_10h = *puVar4;\n            arg_14h = puVar4[1];\n            var_4ch = 0;\n        }\n        else {\n            uVar8 = 0;\n            uVar2 = fcn.0101cb30(0);\n            puVar4 = fcn.0101f350(arg_8h, &var_b4h, arg_10h, arg_14h, uVar2, uVar8);\n            arg_10h = *puVar4;\n            arg_14h = puVar4[1];\n        }\n    }\n    else {\n        puVar4 = fcn.0101f3a0(arg_8h, &var_94h, arg_10h, arg_14h, arg_1ch & 0xffff, var_4ch);\n        uVar2 = *puVar4;\n        uVar8 = puVar4[1];\n        var_4ch = 0;\n        uVar7 = 0;\n        uVar5 = fcn.0101cb30(0);\n        puVar4 = fcn.0101f350(arg_8h, &var_9ch, uVar2, uVar8, uVar5, uVar7);\n        arg_10h = *puVar4;\n        arg_14h = puVar4[1];\n    }\n    iVar6 = uVar1 - var_44h;\n    arg_1ch_00 = var_44h;\n    uVar2 = fcn.0101cb30(var_44h);\n    puVar4 = fcn.0101f350(arg_8h, &var_bch, arg_10h, arg_14h, uVar2, arg_1ch_00);\n    uVar2 = *puVar4;\n    uVar8 = puVar4[1];\n    uVar7 = 0;\n    uVar5 = 0;\n    fcn.01021a00(0, 0);\n    fcn.0101f3a0(arg_8h, arg_ch, uVar2, uVar8, arg_1ch & 0xffff, var_4ch);\n    var_4h = CONCAT31(var_4h._1_3_, 1);\n    fcn.0101c190(uVar5, uVar7, iVar6);\n    var_4h = 0xffffffff;\n    fcn.0101c1e0();\n    *in_FS_OFFSET = var_ch;\n    fcn.010247f4(uVar7);\n    return;\n}\n",
        "token_count": 1942
    },
    "0101f350": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint * __cdecl fcn.0101f350(uint noname_0, uint *arg_ch, uint arg_10h, uint arg_14h, uint16_t *arg_18h, int32_t arg_1ch)\n\n{\n    uint32_t arg_8h;\n    \n    while (arg_1ch != 0) {\n        arg_8h = *arg_18h;\n        fcn.0101e200();\n        fcn.0101c6e0(arg_8h);\n        arg_1ch = arg_1ch + -1;\n        fcn.0101e200();\n        arg_18h = arg_18h + 1;\n    }\n    *arg_ch = arg_10h;\n    arg_ch[1] = arg_14h;\n    return arg_ch;\n}\n",
        "token_count": 178
    },
    "0101f3a0": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint * __cdecl fcn.0101f3a0(uint noname_0, uint *arg_ch, uint arg_10h, uint arg_14h, uint32_t arg_18h, int32_t arg_1ch)\n\n{\n    uint32_t arg_8h;\n    \n    while (arg_1ch != 0) {\n        arg_8h = arg_18h & 0xffff;\n        fcn.0101e200();\n        fcn.0101c6e0(arg_8h);\n        arg_1ch = arg_1ch + -1;\n        fcn.0101e200();\n    }\n    *arg_ch = arg_10h;\n    arg_ch[1] = arg_14h;\n    return arg_ch;\n}\n",
        "token_count": 168
    },
    "0101f3f0": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0101f3f0(int32_t *param_1)\n\n{\n    uint var_4h;\n    \n    if (*param_1 != 0) {\n        fcn.0102970f(*param_1);\n    }\n    *param_1 = 0;\n    return;\n}\n",
        "token_count": 69
    },
    "0101f4e0": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0101f4e0(uint arg_8h, int32_t arg_ch)\n\n{\n    uint32_t *puVar1;\n    uint uVar2;\n    uint arg_8h_00;\n    int32_t *piVar3;\n    uint *puVar4;\n    int32_t iVar5;\n    uint arg_8h_01;\n    uint var_8h;\n    uint var_4h;\n    \n    if ((arg_8h != '\\0') && (puVar1 = fcn.0101f1b0(),  7 < *puVar1)) {\n        puVar4 = fcn.0101d460();\n        arg_8h_01 = *puVar4;\n        uVar2 = fcn.0101d460();\n        uVar2 = fcn.0101af20(uVar2);\n        fcn.0101e1e0();\n        fcn.0101afe0(uVar2);\n        if (arg_ch != 0) {\n            iVar5 = arg_ch;\n            uVar2 = fcn.0101af20(arg_8h_01);\n            arg_8h_00 = fcn.0101d460();\n            fcn.0101ffd0(arg_8h_00, uVar2, iVar5);\n        }\n        piVar3 = fcn.0101f1b0();\n        iVar5 = *piVar3 + 1;\n        fcn.0101e1e0();\n        fcn.01020020(arg_8h_01, iVar5);\n    }\n    puVar4 = fcn.0101f1b0();\n    *puVar4 = 7;\n    fcn.0101db50(arg_ch);\n    return;\n}\n",
        "token_count": 384
    },
    "0101ffa0": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0101ffa0(uint arg_8h, uint arg_ch, int32_t arg_10h)\n\n{\n    uint var_4h;\n    \n    if (arg_10h == 0) {\n        var_4h = arg_8h;\n    }\n    else {\n        var_4h = fcn.01025420(arg_8h, arg_ch, arg_10h);\n    }\n    return var_4h;\n}\n",
        "token_count": 101
    },
    "0101ffd0": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0101ffd0(uint arg_8h, uint arg_ch, int32_t arg_10h)\n\n{\n    uint var_4h;\n    \n    if (arg_10h == 0) {\n        var_4h = arg_8h;\n    }\n    else {\n        var_4h = fcn.01021b40(arg_8h, arg_ch, arg_10h);\n    }\n    return var_4h;\n}\n",
        "token_count": 102
    },
    "01020d40": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_8h\n\nuint32_t __fastcall fcn.01020d40(uint param_1)\n\n{\n    int32_t *piVar1;\n    uint var_8h;\n    uint32_t var_4h;\n    \n    piVar1 = fcn.0101f1d0(param_1);\n    var_4h = *piVar1 == 0;\n    return piVar1 & 0xffffff00 | var_4h;\n}\n",
        "token_count": 110
    },
    "01020f30": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.01020f30(int32_t arg_8h, uint32_t arg_ch)\n\n{\n    int32_t iVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    uint in_ECX;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    fcn.0101d520(arg_8h);\n    piVar2 = fcn.0101f1d0();\n    if (arg_ch < *piVar2 - arg_8h) {\n        if (arg_ch != 0) {\n            iVar3 = fcn.0101f110();\n            iVar3 = iVar3 + arg_8h * 2;\n            piVar2 = fcn.0101f1d0();\n            iVar1 = *piVar2;\n            fcn.010215d0(iVar3, iVar3 + arg_ch * 2, (iVar1 - arg_ch) - arg_8h);\n            fcn.0101db50(iVar1 - arg_ch);\n        }\n    }\n    else {\n        fcn.0101db50(arg_8h);\n    }\n    return in_ECX;\n}\n",
        "token_count": 259
    },
    "010211f0": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.010211f0(int32_t arg_8h, uint32_t arg_ch, uint32_t arg_10h)\n\n{\n    int32_t iVar1;\n    char cVar2;\n    int32_t *piVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint in_ECX;\n    int32_t arg_10h_00;\n    uint var_8h;\n    uint var_4h;\n    \n    fcn.0101d520(arg_8h);\n    piVar3 = fcn.0101f1d0();\n    if (*0x104ac50 - *piVar3 <= arg_ch) {\n        fcn.0101f5e0();\n    }\n    piVar3 = fcn.0101f1d0();\n    iVar1 = *piVar3;\n    if (arg_ch != 0) {\n        cVar2 = fcn.0101e700(iVar1 + arg_ch, 0);\n        if (cVar2 != '\\0') {\n            piVar3 = fcn.0101f1d0();\n            arg_10h_00 = *piVar3 - arg_8h;\n            iVar4 = fcn.0101f110();\n            iVar4 = iVar4 + arg_8h * 2;\n            iVar5 = fcn.0101f110();\n            fcn.010215d0(iVar5 + arg_8h * 2 + arg_ch * 2, iVar4, arg_10h_00);\n            fcn.0101d4d0(arg_8h, arg_ch, arg_10h & 0xffff);\n            fcn.0101db50(iVar1 + arg_ch);\n        }\n    }\n    return in_ECX;\n}\n",
        "token_count": 389
    },
    "01021430": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_10h\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __fastcall fcn.01021430(uint param_1)\n\n{\n    uint32_t uVar1;\n    uint var_10h;\n    int32_t var_ch;\n    uint var_8h;\n    uint var_1h;\n    \n    fcn.0101e1e0(var_1h, param_1);\n    uVar1 = fcn.010213b0();\n    if (uVar1 < 2) {\n        var_ch = 1;\n    }\n    else {\n        var_ch = uVar1 - 1;\n    }\n    return var_ch;\n}\n",
        "token_count": 171
    },
    "01021470": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_10h\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __fastcall fcn.01021470(uint param_1)\n\n{\n    uint32_t uVar1;\n    uint var_10h;\n    int32_t var_ch;\n    uint var_8h;\n    uint var_1h;\n    \n    fcn.0101e1e0(var_1h, param_1);\n    uVar1 = fcn.010213d0();\n    if (uVar1 < 2) {\n        var_ch = 1;\n    }\n    else {\n        var_ch = uVar1 - 1;\n    }\n    return var_ch;\n}\n",
        "token_count": 171
    },
    "010215a0": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.010215a0(uint arg_8h, uint arg_ch, int32_t arg_10h)\n\n{\n    uint var_4h;\n    \n    if (arg_10h == 0) {\n        var_4h = arg_8h;\n    }\n    else {\n        var_4h = fcn.010259a0(arg_8h, arg_ch, arg_10h);\n    }\n    return var_4h;\n}\n",
        "token_count": 102
    },
    "010215d0": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.010215d0(uint arg_8h, uint arg_ch, int32_t arg_10h)\n\n{\n    uint var_4h;\n    \n    if (arg_10h == 0) {\n        var_4h = arg_8h;\n    }\n    else {\n        var_4h = fcn.01021b60(arg_8h, arg_ch, arg_10h);\n    }\n    return var_4h;\n}\n",
        "token_count": 102
    },
    "010217e0": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.010217e0(uint32_t arg_8h, uint32_t arg_ch)\n\n{\n    uint32_t uVar1;\n    uint var_4h;\n    \n    if (arg_8h != 0) {\n        arg_ch = arg_ch & 0xff;\n        uVar1 = fcn.01021700();\n        fcn.0101fe70(uVar1 | arg_8h, arg_ch);\n    }\n    return;\n}\n",
        "token_count": 103
    },
    "01021830": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_2h\n// WARNING: Removing unreachable block (ram,0x0102184f)\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t __cdecl fcn.01021830(uint arg_8h)\n\n{\n    ushort uVar1;\n    ushort *arg_8h_00;\n    uint32_t uVar2;\n    int32_t *in_ECX;\n    int64_t iVar3;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_2h;\n    \n    iVar3 = fcn.0101f2d0();\n    if (iVar3 < 1) {\n        uVar1 = fcn.01021920(&arg_8h);\n        uVar2 = (**(*in_ECX + 0xc))(uVar1);\n        var_2h._0_2_ = uVar2;\n    }\n    else {\n        arg_8h_00 = fcn.0101f300();\n        *arg_8h_00 = arg_8h;\n        uVar2 = fcn.01021920(arg_8h_00);\n        var_2h._0_2_ = uVar2;\n    }\n    return uVar2 & 0xffff0000 | var_2h;\n}\n",
        "token_count": 298
    },
    "01021c5b": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint32_t fcn.01021c5b(void)\n\n{\n    uint32_t uVar1;\n    \n    uVar1 = fcn.01029092();\n    return uVar1 & 0xffffff00 | *(uVar1 + 0x18) != 0;\n}\n",
        "token_count": 62
    },
    "01022670": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.01022670(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    uint arg_ch_00;\n    uint arg_8h_00;\n    int32_t *extraout_ECX;\n    int32_t unaff_EBP;\n    uint var_14h;\n    uint var_10h;\n    uint var_4h;\n    \n    fcn.01024bbe(8);\n    *(unaff_EBP + -0x14) = extraout_ECX;\n    *(unaff_EBP + -0x10) = 0;\n    if (*(unaff_EBP + 0x10) != 0) {\n        *extraout_ECX = 0x104b908;\n        extraout_ECX[2] = vtable.std::basic_ios_wchar_t__struct_std::char_traits_wchar_t__.0;\n        *(unaff_EBP + -4) = 0;\n        *(unaff_EBP + -0x10) = 1;\n    }\n    arg_ch_00 = *(unaff_EBP + 0xc);\n    arg_8h_00 = *(unaff_EBP + 8);\n    *(extraout_ECX + *(*extraout_ECX + 4)) = vtable.std::basic_ostream_wchar_t__struct_std::char_traits_wchar_t__.0;\n    *(*(*extraout_ECX + 4) + -4 + extraout_ECX) = *(*extraout_ECX + 4) + -8;\n    fcn.010230d0(arg_8h_00, arg_ch_00);\n    fcn.01024b98();\n    return;\n}\n",
        "token_count": 377
    },
    "010227d8": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.010227d8(code **param_1)\n\n{\n    uint32_t uVar1;\n    int32_t *in_FS_OFFSET;\n    int32_t var_ch;\n    uint uStack12;\n    uint uStack8;\n    \n    uStack8 = 0xffffffff;\n    uStack12 = 0x103feb0;\n    var_ch = *in_FS_OFFSET;\n    uVar1 = *0x105b174 ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    *param_1 = vtable.std::basic_filebuf_wchar_t__struct_std::char_traits_wchar_t__.0;\n    if (param_1[0x13] != NULL) {\n        fcn.01022cf1(uVar1);\n    }\n    if (*(param_1 + 0x12) != '\\0') {\n        fcn.01022daa();\n    }\n    fcn.01022874();\n    *in_FS_OFFSET = var_ch;\n    return;\n}\n",
        "token_count": 219
    },
    "01022a3d": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid fcn.01022a3d(void)\n\n{\n    code *pcVar1;\n    int16_t iVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    int32_t *extraout_ECX;\n    int32_t unaff_EBP;\n    int32_t iVar5;\n    uint var_2ch;\n    uint var_28h;\n    uint var_18h;\n    uint var_14h;\n    uint var_4h;\n    \n    fcn.01024bf2(0x20);\n    if ((extraout_ECX[0xe] != 0) && (*(extraout_ECX + 0x3e) != '\\0')) {\n        pcVar1 = *(*extraout_ECX + 0xc);\n        fcn.01024b92(0xffff);\n        iVar2 = (*pcVar1)();\n        if (iVar2 != -1) {\n            *(unaff_EBP + -0x14) = 0xf;\n            *(unaff_EBP + -0x18) = 0;\n            *(unaff_EBP + -0x28) = 0;\n            fcn.01022d61(8, 0);\n            *(unaff_EBP + -4) = 0;\n            do {\n                iVar3 = *(unaff_EBP + -0x28);\n                uVar4 = *(unaff_EBP + -0x14);\n                do {\n                    if (uVar4 < 0x10) {\n                        iVar3 = unaff_EBP + -0x28;\n                    }\n                    iVar5 = *extraout_ECX[0xe];\n                    fcn.01024b92(extraout_ECX + 0x10, iVar3, *(unaff_EBP + -0x18) + iVar3);\n                    iVar3 = (**(iVar5 + 0x20))();\n                    if (iVar3 != 0) {\n                        if (iVar3 == 1) goto code_r0x01022af2;\ncode_r0x01022b4a:\n                        fcn.0101f420(1, 0);\n                        goto code_r0x01022b5c;\n                    }\n                    *(extraout_ECX + 0x3e) = 0;\ncode_r0x01022af2:\n                    uVar4 = *(unaff_EBP + -0x14);\n                    iVar3 = *(unaff_EBP + -0x28);\n                    iVar5 = iVar3;\n                    if (uVar4 < 0x10) {\n                        iVar5 = unaff_EBP + -0x28;\n                    }\n                    iVar5 = *(unaff_EBP + -0x2c) - iVar5;\n                    if (iVar5 != 0) {\n                        if (uVar4 < 0x10) {\n                            iVar3 = unaff_EBP + -0x28;\n                        }\n                        iVar3 = fcn.0102ce2c(iVar3, 1, iVar5, extraout_ECX[0x13]);\n                        if (iVar5 != iVar3) goto code_r0x01022b4a;\n                        uVar4 = *(unaff_EBP + -0x14);\n                        iVar3 = *(unaff_EBP + -0x28);\n                    }\n                    if (*(extraout_ECX + 0x3e) == '\\0') goto code_r0x01022b4a;\n                } while (iVar5 != 0);\n                fcn.0101f790(8, 0);\n            } while( true );\n        }\n    }\ncode_r0x01022b5c:\n    fcn.01024bad();\n    return;\n}\n",
        "token_count": 807
    },
    "01022bc8": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.01022bc8(uint arg_8h, int32_t arg_ch)\n\n{\n    uint uVar1;\n    int32_t in_ECX;\n    \n    *(in_ECX + 0x48) = arg_ch == 1;\n    *(in_ECX + 0x3e) = 0;\n    fcn.01022c00();\n    *(in_ECX + 0x4c) = arg_8h;\n    *(in_ECX + 0x40) = *0x10fb038;\n    uVar1 = *0x10fb03c;\n    *(in_ECX + 0x38) = 0;\n    *(in_ECX + 0x44) = uVar1;\n    return;\n}\n",
        "token_count": 167
    },
    "01022daa": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint32_t __fastcall fcn.01022daa(uint32_t param_1)\n\n{\n    uint uVar1;\n    char cVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    \n    if (*(param_1 + 0x4c) == 0) {\n        uVar4 = 0;\n    }\n    else {\n        cVar2 = fcn.01022a3d();\n        iVar3 = fcn.0102c385(*(param_1 + 0x4c));\n        uVar4 = ~-(iVar3 != 0) & -(cVar2 != '\\0') & param_1;\n    }\n    *(param_1 + 0x48) = 0;\n    *(param_1 + 0x3e) = 0;\n    fcn.01022c00();\n    *(param_1 + 0x4c) = 0;\n    *(param_1 + 0x40) = *0x10fb038;\n    uVar1 = *0x10fb03c;\n    *(param_1 + 0x38) = 0;\n    *(param_1 + 0x44) = uVar1;\n    return uVar4;\n}\n",
        "token_count": 271
    },
    "010230d0": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.010230d0(uint arg_8h, uint arg_ch)\n\n{\n    ushort uVar1;\n    int32_t in_ECX;\n    \n    fcn.01022c44();\n    *(in_ECX + 0x3c) = 0;\n    *(in_ECX + 0x38) = arg_8h;\n    uVar1 = fcn.0102380d(0x20);\n    *(in_ECX + 0x40) = uVar1;\n    if (*(in_ECX + 0x38) == 0) {\n        fcn.0101feb0(*(in_ECX + 0xc) | 4, 0);\n    }\n    if (arg_ch != '\\0') {\n        fcn.01023bfb(in_ECX);\n    }\n    return;\n}\n",
        "token_count": 183
    },
    "01026742": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid fcn.01026742(void)\n\n{\n    int32_t iVar1;\n    int32_t unaff_EBX;\n    int32_t unaff_EBP;\n    int32_t *unaff_EDI;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_1ch;\n    \n    *(unaff_EBX + -4) = *(unaff_EBP + -0x2c);\n    fcn.010263fb(*(unaff_EBP + -0x30));\n    iVar1 = fcn.01029092();\n    *(iVar1 + 0x10) = *(unaff_EBP + -0x34);\n    iVar1 = fcn.01029092();\n    *(iVar1 + 0x14) = *(unaff_EBP + -0x38);\n    if (((((*unaff_EDI == -0x1f928c9d) && (unaff_EDI[4] == 3)) &&\n         ((unaff_EDI[5] == 0x19930520 || ((unaff_EDI[5] == 0x19930521 || (unaff_EDI[5] == 0x19930522)))))) &&\n        (*(unaff_EBP + -0x3c) == 0)) &&\n       ((*(unaff_EBP + -0x1c) != 0 && (iVar1 = fcn.01026445(unaff_EDI[6]),  iVar1 != 0)))) {\n        fcn.01026540(unaff_EDI);\n    }\n    return;\n}\n",
        "token_count": 366
    },
    "0102704e": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.0102704e(uint arg_8h, uint noname_1, uint arg_10h, uint arg_14h)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t unaff_EBP;\n    int32_t iVar4;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.01025020(0x10599e8, 0x10);\n    if (*(*(unaff_EBP + 0x10) + 4) < 0x81) {\n        iVar4 = *(*(unaff_EBP + 8) + 8);\n    }\n    else {\n        iVar4 = *(*(unaff_EBP + 8) + 8);\n    }\n    *(unaff_EBP + -0x1c) = iVar4;\n    iVar3 = fcn.01029092();\n    *(iVar3 + 0x18) = *(iVar3 + 0x18) + 1;\n    *(unaff_EBP + -4) = 0;\n    while( true ) {\n        if (iVar4 == *(unaff_EBP + 0x14)) goto code_r0x010270e2;\n        if ((iVar4 < 0) || (iVar3 = *(unaff_EBP + 0x10),  *(iVar3 + 4) <= iVar4)) break;\n        iVar1 = *(iVar3 + 8);\n        uVar2 = *(iVar1 + iVar4 * 8);\n        *(unaff_EBP + -0x20) = uVar2;\n        *(unaff_EBP + -4) = 1;\n        if (*(iVar1 + 4 + iVar4 * 8) != 0) {\n            iVar1 = *(unaff_EBP + 8);\n            *(iVar1 + 8) = uVar2;\n            fcn.01029180(*(*(iVar3 + 8) + 4 + iVar4 * 8), iVar1, 0x103);\n        }\n        *(unaff_EBP + -4) = 0;\n        iVar4 = *(unaff_EBP + -0x20);\n        *(unaff_EBP + -0x1c) = iVar4;\n    }\n    do {\n        fcn.0102eba4();\ncode_r0x010270e2:\n        *(unaff_EBP + -4) = 0xfffffffe;\n        fcn.01027102();\n    } while (iVar4 != *(unaff_EBP + 0x14));\n    *(*(unaff_EBP + 8) + 8) = iVar4;\n    fcn.01025066();\n    return;\n}\n",
        "token_count": 616
    },
    "01027102": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid fcn.01027102(void)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.01029092();\n    if (0 < *(iVar1 + 0x18)) {\n        iVar1 = fcn.01029092();\n        *(iVar1 + 0x18) = *(iVar1 + 0x18) + -1;\n    }\n    return;\n}\n",
        "token_count": 86
    },
    "0102a012": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl\nfcn.0102a012(uint32_t arg_8h, uint arg_ch, uint *arg_10h, int32_t arg_14h, int32_t arg_18h, uint arg_1ch, uint arg_20h)\n\n{\n    uint *puVar1;\n    int32_t iVar2;\n    int32_t in_stack_fffffb5c;\n    int32_t var_484h;\n    uint var_480h;\n    uint var_478h;\n    uint32_t var_474h;\n    uint *var_470h;\n    int32_t var_46ch;\n    int32_t var_468h;\n    uint var_464h;\n    uint *var_460h;\n    uint var_45ch;\n    uint var_41ch;\n    uint var_ch;\n    uint32_t var_4h;\n    \n    var_4h = *0x105b174 ^ &stack0xfffffffc;\n    var_460h = arg_10h;\n    if ((arg_18h == 0) || ((arg_14h != 0 && (arg_10h == NULL)))) {\n        puVar1 = fcn.0102bd74();\n        *puVar1 = 0x16;\n        fcn.010296a3();\n        goto code_r0x0102a167;\n    }\n    fcn.0102a49a(arg_1ch);\n    puVar1 = var_460h;\n    var_474h = arg_8h & 2;\n    var_470h = var_460h;\n    var_46ch = arg_14h;\n    var_468h = 0;\n    if ((var_474h != 0) || (var_464h = 0,  var_460h == NULL)) {\n        var_464h = 1;\n    }\n    var_460h = &var_470h;\n    fcn.0102a45e(&var_460h, arg_8h, arg_ch, arg_18h, &var_480h, arg_20h);\n    var_ch = 0;\n    iVar2 = fcn.0102a6db();\n    if (puVar1 != NULL) {\n        if ((arg_8h & 1) == 0) {\n            if (var_474h == 0) {\n                if (arg_14h != 0) {\n                    if (var_468h != arg_14h) goto code_r0x0102a13f;\ncode_r0x0102a18a:\n                    *(puVar1 + arg_14h + -1) = 0;\n                }\n            }\n            else if (arg_14h != 0) {\n                if (-1 < iVar2) {\n                    if (var_468h == arg_14h) goto code_r0x0102a18a;\n                    goto code_r0x0102a13f;\n                }\n                *puVar1 = 0;\n            }\n        }\n        else if (((arg_14h != 0) || (iVar2 == 0)) && (var_468h != arg_14h)) {\ncode_r0x0102a13f:\n            *(puVar1 + var_468h) = 0;\n        }\n    }\n    fcn.0102a52d();\n    in_stack_fffffb5c = arg_18h;\n    if (var_478h != '\\0') {\n        *(var_484h + 0x350) = *(var_484h + 0x350) & 0xfffffffd;\n    }\ncode_r0x0102a167:\n    fcn.010247f4(in_stack_fffffb5c);\n    return;\n}\n",
        "token_count": 822
    },
    "0102a90f": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.0102a90f(uint32_t *param_1)\n\n{\n    uint32_t *arg_14h;\n    char *pcVar1;\n    bool bVar2;\n    bool bVar3;\n    char cVar4;\n    uchar uVar5;\n    uint *puVar6;\n    uint32_t uVar7;\n    int32_t arg_ch;\n    int32_t arg_10h;\n    uint arg_8h;\n    uint arg_ch_00;\n    int32_t iStack12;\n    uint uStack8;\n    \n    cVar4 = *(param_1 + 0x31);\n    if (cVar4 != 'F') {\n        if (cVar4 == 'N') {\n            if ((*param_1 & 8) != 0) {\n                return 1;\n            }\n            param_1[7] = 8;\n        }\n        else if (param_1[0xb] == 0) {\n            if (cVar4 < 'k') {\n                if (cVar4 == 'j') {\n                    param_1[0xb] = 5;\n                    return 1;\n                }\n                if (cVar4 == 'I') {\n                    pcVar1 = param_1[4];\n                    cVar4 = *pcVar1;\n                    if ((cVar4 == '3') && (pcVar1[1] == '2')) {\n                        param_1[0xb] = 10;\n                        param_1[4] = pcVar1 + 2;\n                        return 1;\n                    }\n                    if ((cVar4 == '6') && (pcVar1[1] == '4')) {\n                        param_1[0xb] = 0xb;\n                        param_1[4] = pcVar1 + 2;\n                        return 1;\n                    }\n                    if (((((cVar4 != 'd') && (cVar4 != 'i')) && (cVar4 != 'o')) && ((cVar4 != 'u' && (cVar4 != 'x'))))\n                       && (cVar4 != 'X')) {\n                        return 1;\n                    }\n                    param_1[0xb] = 9;\n                    return 1;\n                }\n                if (cVar4 == 'L') {\n                    param_1[0xb] = 8;\n                    return 1;\n                }\n                if (cVar4 == 'T') {\n                    param_1[0xb] = 0xd;\n                    return 1;\n                }\n                if (cVar4 != 'h') {\n                    return 1;\n                }\n                if (*param_1[4] == 'h') {\n                    param_1[4] = param_1[4] + 1;\n                    uVar7 = 1;\n                }\n                else {\n                    uVar7 = 2;\n                }\n            }\n            else {\n                if (cVar4 != 'l') {\n                    if (cVar4 == 't') {\n                        param_1[0xb] = 7;\n                        return 1;\n                    }\n                    if (cVar4 == 'w') {\n                        param_1[0xb] = 0xc;\n                        return 1;\n                    }\n                    if (cVar4 == 'z') {\n                        param_1[0xb] = 6;\n                        return 1;\n                    }\n                    return 1;\n                }\n                if (*param_1[4] == 'l') {\n                    param_1[4] = param_1[4] + 1;\n                    uVar7 = 4;\n                }\n                else {\n                    uVar7 = 3;\n                }\n            }\n            param_1[0xb] = uVar7;\n            return 1;\n        }\n        puVar6 = fcn.0102bd74();\n        *puVar6 = 0x16;\n        fcn.010296a3();\n        return 0;\n    }\n    if ((*param_1 & 8) != 0) {\n        return 1;\n    }\n    param_1[7] = 7;\n    cVar4 = *(param_1 + 0x31);\n    uStack8 = param_1;\n    if (cVar4 < 'e') {\n        if (cVar4 == 'd') {\ncode_r0x0102ab0f:\n            param_1[8] = param_1[8] | 0x10;\ncode_r0x0102ab13:\n            arg_ch_00 = 0;\n            arg_8h = 10;\ncode_r0x0102ab16:\n            cVar4 = fcn.0102af47(arg_8h, arg_ch_00);\n        }\n        else if (cVar4 < 'Y') {\n            if (cVar4 == 'X') {\n                arg_ch_00 = 1;\ncode_r0x0102aabb:\n                arg_8h = 0x10;\n                goto code_r0x0102ab16;\n            }\n            if (cVar4 != 'A') {\n                if (cVar4 == 'C') goto code_r0x0102aacf;\n                if (cVar4 < 'E') {\n                    return 0;\n                }\n                if ('G' < cVar4) {\n                    if (cVar4 != 'S') {\n                        return 0;\n                    }\n                    goto code_r0x0102aaa3;\n                }\n            }\ncode_r0x0102ab1f:\n            cVar4 = fcn.0102ad68();\n        }\n        else if (cVar4 == 'Z') {\n            cVar4 = fcn.0102ad0e();\n        }\n        else {\n            if (cVar4 == 'a') goto code_r0x0102ab1f;\n            if (cVar4 != 'c') {\n                return 0;\n            }\ncode_r0x0102aacf:\n            cVar4 = fcn.0102aeb7(0);\n        }\n    }\n    else if (cVar4 < 'q') {\n        if (cVar4 == 'p') {\n            cVar4 = fcn.0102b12b();\n        }\n        else {\n            if (cVar4 < 'h') goto code_r0x0102ab1f;\n            if (cVar4 == 'i') goto code_r0x0102ab0f;\n            if (cVar4 == 'n') {\n                cVar4 = fcn.0102b098();\n            }\n            else {\n                if (cVar4 != 'o') {\n                    return 0;\n                }\n                cVar4 = fcn.0102b10c();\n            }\n        }\n    }\n    else {\n        if (cVar4 != 's') {\n            if (cVar4 != 'u') {\n                if (cVar4 != 'x') {\n                    return 0;\n                }\n                arg_ch_00 = 0;\n                goto code_r0x0102aabb;\n            }\n            goto code_r0x0102ab13;\n        }\ncode_r0x0102aaa3:\n        cVar4 = fcn.0102b143();\n    }\n    if (cVar4 == '\\0') {\n        return 0;\n    }\n    if (*(param_1 + 0xc) != '\\0') {\n        return 1;\n    }\n    arg_ch = 0;\n    uStack8 = (uStack8 >> 0x10 & 0xff00) << 0x10;\n    uVar7 = param_1[8];\n    iStack12 = 0;\n    if ((uVar7 >> 4 & 1) != 0) {\n        uStack8._1_3_ = uStack8 >> 8;\n        if ((uVar7 >> 6 & 1) == 0) {\n            if ((uVar7 & 1) == 0) {\n                if ((uVar7 >> 1 & 1) != 0) {\n                    uStack8 = CONCAT31(uStack8._1_3_, 0x20);\n                    arg_ch = 1;\n                    iStack12 = 1;\n                }\n                goto code_r0x0102aba5;\n            }\n            uStack8 = CONCAT31(uStack8._1_3_, 0x2b);\n        }\n        else {\n            uStack8 = CONCAT31(uStack8._1_3_, 0x2d);\n        }\n        iStack12 = 1;\n        arg_ch = 1;\n    }\ncode_r0x0102aba5:\n    cVar4 = *(param_1 + 0x31);\n    if (((cVar4 == 'x') || (cVar4 == 'X')) && ((uVar7 >> 5 & 1) != 0)) {\n        bVar2 = true;\n    }\n    else {\n        bVar2 = false;\n    }\n    if ((cVar4 == 'a') || (cVar4 == 'A')) {\n        bVar3 = true;\n    }\n    else {\n        bVar3 = false;\n    }\n    if ((bVar2) || (bVar3)) {\n        *(&uStack8 + arg_ch) = 0x30;\n        if ((cVar4 == 'X') || (cVar4 == 'A')) {\n            uVar5 = 0x58;\n        }\n        else {\n            uVar5 = 0x78;\n        }\n        *(&uStack8 + arg_ch + 1) = uVar5;\n        arg_ch = arg_ch + 2;\n        iStack12 = arg_ch;\n    }\n    arg_14h = param_1 + 6;\n    arg_10h = (param_1[9] - param_1[0xe]) - arg_ch;\n    if ((*(param_1 + 8) & 0xc) == 0) {\n        fcn.0102a3ed(param_1 + 0x112, 0x20, arg_10h, arg_14h);\n        arg_ch = iStack12;\n    }\n    fcn.0102b2da(&uStack8, arg_ch, arg_14h);\n    if (((param_1[8] >> 3 & 1) != 0) && ((param_1[8] >> 2 & 1) == 0)) {\n        fcn.0102a3ed(param_1 + 0x112, 0x30, arg_10h, arg_14h);\n    }\n    fcn.0102b233(0);\n    if ((-1 < *arg_14h) && ((param_1[8] >> 2 & 1) != 0)) {\n        fcn.0102a3ed(param_1 + 0x112, 0x20, arg_10h, arg_14h);\n    }\n    return 1;\n}\n",
        "token_count": 2377
    },
    "0102aa5d": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl\nfcn.0102aa5d(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint noname_4, uint noname_5, uint noname_6, \n            uint noname_7, uint noname_8, uint noname_9, uint arg_30h)\n\n{\n    int32_t *arg_14h;\n    uint32_t uVar1;\n    bool bVar2;\n    bool bVar3;\n    char cVar4;\n    uchar uVar5;\n    int32_t in_ECX;\n    int32_t arg_ch;\n    int32_t arg_10h;\n    uint arg_8h;\n    uint arg_ch_00;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    cVar4 = *(in_ECX + 0x31);\n    var_4h = in_ECX;\n    if (cVar4 < 'e') {\n        if (cVar4 == 'd') {\ncode_r0x0102ab0f:\n            *(in_ECX + 0x20) = *(in_ECX + 0x20) | 0x10;\ncode_r0x0102ab13:\n            arg_ch_00 = 0;\n            arg_8h = 10;\ncode_r0x0102ab16:\n            cVar4 = fcn.0102af47(arg_8h, arg_ch_00);\n        }\n        else if (cVar4 < 'Y') {\n            if (cVar4 == 'X') {\n                arg_ch_00 = 1;\ncode_r0x0102aabb:\n                arg_8h = 0x10;\n                goto code_r0x0102ab16;\n            }\n            if (cVar4 != 'A') {\n                if (cVar4 == 'C') goto code_r0x0102aacf;\n                if (cVar4 < 'E') {\n                    return 0;\n                }\n                if ('G' < cVar4) {\n                    if (cVar4 != 'S') {\n                        return 0;\n                    }\n                    goto code_r0x0102aaa3;\n                }\n            }\ncode_r0x0102ab1f:\n            cVar4 = fcn.0102ad68();\n        }\n        else if (cVar4 == 'Z') {\n            cVar4 = fcn.0102ad0e();\n        }\n        else {\n            if (cVar4 == 'a') goto code_r0x0102ab1f;\n            if (cVar4 != 'c') {\n                return 0;\n            }\ncode_r0x0102aacf:\n            cVar4 = fcn.0102aeb7(0);\n        }\n    }\n    else if (cVar4 < 'q') {\n        if (cVar4 == 'p') {\n            cVar4 = fcn.0102b12b();\n        }\n        else {\n            if (cVar4 < 'h') goto code_r0x0102ab1f;\n            if (cVar4 == 'i') goto code_r0x0102ab0f;\n            if (cVar4 == 'n') {\n                cVar4 = fcn.0102b098();\n            }\n            else {\n                if (cVar4 != 'o') {\n                    return 0;\n                }\n                cVar4 = fcn.0102b10c();\n            }\n        }\n    }\n    else {\n        if (cVar4 != 's') {\n            if (cVar4 != 'u') {\n                if (cVar4 != 'x') {\n                    return 0;\n                }\n                arg_ch_00 = 0;\n                goto code_r0x0102aabb;\n            }\n            goto code_r0x0102ab13;\n        }\ncode_r0x0102aaa3:\n        cVar4 = fcn.0102b143();\n    }\n    if (cVar4 == '\\0') {\n        return 0;\n    }\n    if (*(in_ECX + 0x30) != '\\0') {\n        return 1;\n    }\n    arg_ch = 0;\n    var_4h = var_4h._3_1_ << 0x18;\n    uVar1 = *(in_ECX + 0x20);\n    var_8h = 0;\n    if ((uVar1 >> 4 & 1) != 0) {\n        if ((uVar1 >> 6 & 1) == 0) {\n            if ((uVar1 & 1) == 0) {\n                if ((uVar1 >> 1 & 1) != 0) {\n                    var_4h = CONCAT31(var_4h._1_3_, 0x20);\n                    arg_ch = 1;\n                    var_8h = 1;\n                }\n                goto code_r0x0102aba5;\n            }\n            var_4h = CONCAT31(var_4h._1_3_, 0x2b);\n        }\n        else {\n            var_4h = CONCAT31(var_4h._1_3_, 0x2d);\n        }\n        var_8h = 1;\n        arg_ch = 1;\n    }\ncode_r0x0102aba5:\n    cVar4 = *(in_ECX + 0x31);\n    if (((cVar4 == 'x') || (cVar4 == 'X')) && ((uVar1 >> 5 & 1) != 0)) {\n        bVar2 = true;\n    }\n    else {\n        bVar2 = false;\n    }\n    if ((cVar4 == 'a') || (cVar4 == 'A')) {\n        bVar3 = true;\n    }\n    else {\n        bVar3 = false;\n    }\n    if ((bVar2) || (bVar3)) {\n        *(&var_4h + arg_ch) = 0x30;\n        if ((cVar4 == 'X') || (cVar4 == 'A')) {\n            uVar5 = 0x58;\n        }\n        else {\n            uVar5 = 0x78;\n        }\n        *(&var_4h + arg_ch + 1) = uVar5;\n        arg_ch = arg_ch + 2;\n        var_8h = arg_ch;\n    }\n    arg_14h = in_ECX + 0x18;\n    arg_10h = (*(in_ECX + 0x24) - *(in_ECX + 0x38)) - arg_ch;\n    if ((*(in_ECX + 0x20) & 0xc) == 0) {\n        fcn.0102a3ed(in_ECX + 0x448, 0x20, arg_10h, arg_14h);\n        arg_ch = var_8h;\n    }\n    fcn.0102b2da(&var_4h, arg_ch, arg_14h);\n    if (((*(in_ECX + 0x20) >> 3 & 1) != 0) && ((*(in_ECX + 0x20) >> 2 & 1) == 0)) {\n        fcn.0102a3ed(in_ECX + 0x448, 0x30, arg_10h, arg_14h);\n    }\n    fcn.0102b233(0);\n    if ((-1 < *arg_14h) && ((*(in_ECX + 0x20) >> 2 & 1) != 0)) {\n        fcn.0102a3ed(in_ECX + 0x448, 0x20, arg_10h, arg_14h);\n    }\n    return 1;\n}\n",
        "token_count": 1694
    },
    "0102d1c2": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0102d1c2(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    uint uVar3;\n    \n    if (arg_8h != 0) {\n        iVar1 = (*_sym.imp.KERNEL32.dll_HeapFree)(*0x10fbbe0, 0, arg_8h);\n        if (iVar1 == 0) {\n            puVar2 = fcn.0102bd74();\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            uVar3 = fcn.0102bcfb(uVar3);\n            *puVar2 = uVar3;\n        }\n    }\n    return;\n}\n",
        "token_count": 159
    },
    "0102e66f": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint fcn.0102e66f(void)\n\n{\n    int32_t arg_8h;\n    int32_t iVar1;\n    uint uVar2;\n    \n    if (*0x10fb8b8 != 0) {\n        return 0;\n    }\n    fcn.0103849c();\n    arg_8h = fcn.0103873a();\n    if (arg_8h == 0) {\n        uVar2 = 0xffffffff;\n    }\n    else {\n        iVar1 = fcn.0102e4da(arg_8h);\n        if (iVar1 == 0) {\n            uVar2 = 0xffffffff;\n        }\n        else {\n            uVar2 = 0;\n            *0x10fb8b8 = iVar1;\n            *0x10fb8c4 = iVar1;\n        }\n        fcn.0102d1c2(0);\n    }\n    fcn.0102d1c2(arg_8h);\n    return uVar2;\n}\n",
        "token_count": 221
    },
    "01034331": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nushort __cdecl fcn.01034331(int32_t *arg_8h)\n\n{\n    uchar uVar1;\n    ushort uVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    uint arg_8h_00;\n    int32_t iVar5;\n    uint32_t uVar6;\n    uchar uVar7;\n    int32_t arg_ch;\n    \n    if (arg_8h == NULL) {\n        puVar4 = fcn.0102bd74();\n        *puVar4 = 0x16;\n        fcn.010296a3();\n    }\n    else if (((arg_8h[3] >> 0xd & 1) != 0) && ((arg_8h[3] >> 0xc & 1) == 0)) {\n        if ((arg_8h[3] >> 1 & 1) == 0) {\n            LOCK();\n            arg_8h[3] = arg_8h[3] | 1;\n            if ((arg_8h[3] & 0x4c0U) == 0) {\n                fcn.010304fc(arg_8h);\n            }\n            iVar3 = arg_8h[2];\n            if (iVar3 != 1) {\n                uVar7 = 0;\n            }\n            else {\n                uVar7 = **arg_8h;\n            }\n            *arg_8h = arg_8h[1];\n            iVar5 = arg_8h[6];\n            arg_ch = arg_8h[1];\n            arg_8h_00 = fcn.010304d5(arg_8h);\n            iVar5 = fcn.0103ce78(arg_8h_00, arg_ch, iVar5);\n            arg_8h[2] = iVar5;\n            iVar5 = arg_8h[2];\n            if (((iVar5 != 0) && (iVar5 != 1)) && (iVar5 != -1)) {\n                if ((arg_8h[3] & 6U) == 0) {\n                    iVar5 = fcn.010304d5(arg_8h);\n                    if ((iVar5 == -1) || (iVar5 = fcn.010304d5(arg_8h),  iVar5 == -2)) {\n                        iVar5 = 0x105b2d8;\n                    }\n                    else {\n                        iVar5 = fcn.010304d5(arg_8h);\n                        uVar6 = fcn.010304d5(arg_8h);\n                        iVar5 = *((iVar5 >> 6) * 4 + 0x10fb8e0) + (uVar6 & 0x3f) * 0x38;\n                    }\n                    if ((*(iVar5 + 0x28) & 0x82) == 0x82) {\n                        LOCK();\n                        arg_8h[3] = arg_8h[3] | 0x20;\n                    }\n                }\n                if (((arg_8h[6] == 0x200) && ((arg_8h[3] >> 6 & 1) != 0)) && ((arg_8h[3] >> 8 & 1) == 0)) {\n                    arg_8h[6] = 0x1000;\n                }\n                if (iVar3 != 1) {\n                    uVar2 = **arg_8h;\n                    arg_8h[2] = arg_8h[2] + -2;\n                    *arg_8h = *arg_8h + 2;\n                    return uVar2;\n                }\n                uVar1 = **arg_8h;\n                arg_8h[2] = arg_8h[2] + -1;\n                *arg_8h = *arg_8h + 1;\n                return CONCAT11(uVar1, uVar7);\n            }\n            LOCK();\n            arg_8h[3] = arg_8h[3] | (iVar5 != 0) * 8 + 8;\n            arg_8h[2] = 0;\n        }\n        else {\n            LOCK();\n            arg_8h[3] = arg_8h[3] | 0x10;\n        }\n    }\n    return 0xffff;\n}\n",
        "token_count": 940
    },
    "01035ad5": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nulong __cdecl fcn.01035ad5(uint arg_8h)\n\n{\n    uint *puVar1;\n    int32_t unaff_EBP;\n    uint *in_FS_OFFSET;\n    ulong uVar2;\n    uint var_20h;\n    uint var_1ch;\n    uint var_10h;\n    uint var_4h;\n    \n    fcn.01025020(0x1059f50, 0x10);\n    if (*(unaff_EBP + 8) == 0) {\n        puVar1 = fcn.0102bd74();\n        *puVar1 = 0x16;\n        fcn.010296a3();\n        uVar2 = 0xffffffffffffffff;\n    }\n    else {\n        *(unaff_EBP + -0x20) = 0;\n        *(unaff_EBP + -0x1c) = 0;\n        fcn.0102bf25(*(unaff_EBP + 8));\n        *(unaff_EBP + -4) = 0;\n        uVar2 = fcn.0103557b(*(unaff_EBP + 8));\n        *(unaff_EBP + -0x20) = uVar2;\n        *(unaff_EBP + -0x1c) = uVar2 >> 0x20;\n        *(unaff_EBP + -4) = 0xfffffffe;\n        fcn.01035571(0x1059f50);\n    }\n    *in_FS_OFFSET = *(unaff_EBP + -0x10);\n    return uVar2;\n}\n",
        "token_count": 358
    },
    "0103557b": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint64_t __cdecl fcn.0103557b(int32_t *arg_8h)\n\n{\n    uint8_t uVar1;\n    uint *puVar2;\n    uint32_t arg_8h_00;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint arg_10h;\n    int64_t iVar5;\n    int64_t iVar6;\n    int64_t iVar7;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint32_t var_4h;\n    \n    if (arg_8h == NULL) {\n        puVar2 = fcn.0102bd74();\n        *puVar2 = 0x16;\n        fcn.010296a3();\n        return -1;\n    }\n    arg_8h_00 = fcn.010304d5(arg_8h);\n    if (arg_8h[2] < 0) {\n        arg_8h[2] = 0;\n    }\n    iVar5 = fcn.01035c73(arg_8h_00, 0, 0, 1);\n    arg_10h = iVar5 >> 0x20;\n    if ((iVar5 < 0x100000000) && (iVar5 < 0)) {\ncode_r0x010356a6:\n        iVar7 = -1;\n    }\n    else {\n        if ((arg_8h[3] & 0xc0U) == 0) {\n            return iVar5 - arg_8h[2];\n        }\n        iVar3 = arg_8h_00 >> 6;\n        iVar4 = (arg_8h_00 & 0x3f) * 0x38;\n        uVar1 = *(iVar4 + 0x29 + *(iVar3 * 4 + 0x10fb8e0));\n        var_4h = var_4h & 0xffffff00 | uVar1;\n        iVar7 = *arg_8h - arg_8h[1];\n        if ((arg_8h[3] & 3U) == 0) {\n            if ((arg_8h[3] >> 2 & 1) == 0) {\n                puVar2 = fcn.0102bd74();\n                *puVar2 = 0x16;\n                goto code_r0x010356a6;\n            }\n        }\n        else {\n            if ((uVar1 == 1) && ((*(iVar4 + 0x2d + *(iVar3 * 4 + 0x10fb8e0)) & 2) != 0)) {\n                iVar5 = fcn.010358be(arg_8h, iVar5, arg_10h);\n                return iVar5;\n            }\n            if (*(iVar4 + 0x28 + *(iVar3 * 4 + 0x10fb8e0)) < '\\0') {\n                iVar6 = fcn.01035a57(arg_8h[1], *arg_8h, var_4h);\n                iVar7 = iVar6 + iVar7;\n            }\n        }\n        if (iVar5 != 0) {\n            if ((arg_8h[3] & 1U) == 0) {\n                if (uVar1 == 1) {\n                    iVar7 = fcn.0103f330(iVar7, 2, 0);\n                }\n                iVar7 = iVar7 + iVar5;\n            }\n            else {\n                iVar7 = fcn.010356ff(arg_8h, iVar5, arg_10h, iVar7, iVar7 >> 0x20);\n            }\n        }\n    }\n    return iVar7;\n}\n",
        "token_count": 813
    },
    "01035f58": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid fcn.01035f58(void)\n\n{\n    int32_t unaff_EBP;\n    uint var_20h;\n    uint var_19h;\n    \n    if (*(unaff_EBP + -0x19) != '\\0') {\n        fcn.0102b6ca(3);\n    }\n    return;\n}\n",
        "token_count": 72
    },
    "0103b27e": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0103b27e(int16_t *arg_8h, int32_t arg_ch, int16_t *arg_10h, int32_t arg_14h)\n\n{\n    int16_t iVar1;\n    uint *puVar2;\n    int16_t *piVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint uStack24;\n    uint var_4h;\n    \n    if (arg_14h == 0) {\n        if (arg_8h == NULL) {\n            if (arg_ch == 0) {\n                return 0;\n            }\n        }\n        else {\ncode_r0x0103b1bb:\n            if (arg_ch != 0) {\n                piVar3 = arg_8h;\n                iVar5 = arg_ch;\n                if ((arg_14h == 0) || (arg_10h != NULL)) {\n                    do {\n                        if (*piVar3 == 0) break;\n                        piVar3 = piVar3 + 1;\n                        iVar5 = iVar5 + -1;\n                    } while (iVar5 != 0);\n                    if (iVar5 != 0) {\n                        if (arg_14h == -1) {\n                            iVar4 = arg_10h - piVar3;\n                            do {\n                                iVar1 = *(iVar4 + piVar3);\n                                *piVar3 = iVar1;\n                                piVar3 = piVar3 + 1;\n                                if (iVar1 == 0) break;\n                                iVar5 = iVar5 + -1;\n                            } while (iVar5 != 0);\n                        }\n                        else {\n                            iVar4 = arg_14h;\n                            if (arg_14h != 0) {\n                                do {\n                                    iVar1 = *arg_10h;\n                                    arg_10h = arg_10h + 1;\n                                    *piVar3 = iVar1;\n                                    piVar3 = piVar3 + 1;\n                                    if ((iVar1 == 0) || (iVar5 = iVar5 + -1,  iVar5 == 0)) break;\n                                    iVar4 = iVar4 + -1;\n                                } while (iVar4 != 0);\n                            }\n                            if (iVar4 == 0) {\n                                *piVar3 = 0;\n                            }\n                        }\n                        if (iVar5 != 0) {\n                            return 0;\n                        }\n                        if (arg_14h == -1) {\n                            arg_8h[arg_ch + -1] = 0;\n                            return 0x50;\n                        }\n                        *arg_8h = 0;\n                        puVar2 = fcn.0102bd74();\n                        uStack24 = 0x22;\n                        goto code_r0x0103b1d9;\n                    }\n                }\n                *arg_8h = 0;\n            }\n        }\n    }\n    else if (arg_8h != NULL) goto code_r0x0103b1bb;\n    puVar2 = fcn.0102bd74();\n    uStack24 = 0x16;\ncode_r0x0103b1d9:\n    *puVar2 = uStack24;\n    fcn.010296a3();\n    return uStack24;\n}\n",
        "token_count": 697
    },
    "0103ec7e": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nfloat10 fcn.0103ec7e(double param_1)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint arg_14h;\n    double dVar6;\n    double dVar7;\n    uchar in_XMM0 [16];\n    double dVar8;\n    double dVar9;\n    double dVar10;\n    double dVar11;\n    double dStack12;\n    \n    iVar4 = 0;\n    while( true ) {\n        uVar2 = SUB162(in_XMM0 >> 0x30, 0) >> 4;\n        dVar6 = SUB168(in_XMM0, 0) & *0x10574a0 | *0x1057510;\n        dVar7 = SUB168(in_XMM0, 0) & *0x10574a8 | *0x1057518;\n        uVar1 = SUB82(*0x10574c0 + dVar6, 0) & 0x7f0;\n        dVar11 = *0x10574d8 & dVar7;\n        dVar9 = (*0x10574d0 & dVar6) * *(uVar1 + 0x10579b0) - *0x10574b0;\n        dVar6 = (dVar6 - (*0x10574d0 & dVar6)) * *(uVar1 + 0x10579b0);\n        dVar8 = (dVar7 - dVar11) * *(uVar1 + 0x10579b8);\n        dVar7 = dVar6 + dVar9;\n        dVar11 = dVar8 + (dVar11 * *(uVar1 + 0x10579b8) - *0x10574b8);\n        uVar3 = uVar2 - 1;\n        if (uVar3 < 0x7fe) {\n            iVar4 = (uVar2 - 0x3ff) + iVar4;\n            dVar10 = iVar4;\n            iVar5 = 0;\n            if (uVar1 + iVar4 * 0x400 == 0) {\n                iVar5 = 0x10;\n            }\n            return ((*0x1057568 * dVar11 + *0x1057578) * dVar11 + *0x1057588) * dVar11 * dVar11 +\n                   ((*0x1057560 * dVar7 + *0x1057570) * dVar7 + *0x1057580) * dVar7 * dVar7 * dVar7 * dVar7 * dVar7 +\n                   *0x1057590 * dVar7 + *(uVar1 + 0x10575a8) + dVar10 * *0x10574e8 + (dVar8 & *(iVar5 + 0x10574f8)) +\n                   *(uVar1 + 0x10575a0) + dVar9 + dVar10 * *0x10574e0 + (dVar6 & *(iVar5 + 0x10574f0));\n        }\n        dStack12 = -(*0x1057520 == param_1);\n        if (SUB82(dStack12, 0) != 0) break;\n        if (uVar3 != 0xffffffff) {\n            if (uVar3 < 0x7ff) {\n                if (*0x1057510 == (param_1 & *0x10574a0 | *0x1057510)) {\n                    return *0x1057548;\n                }\n                arg_14h = 0x3e9;\n                dStack12 = *0x10574a0;\n            }\n            else if (((uVar2 & 0x7ff) < 0x7ff) || ((SUB84(param_1, 0) | param_1 >> 0x20 & 0xfffff) == 0)) {\n                dStack12 = -NAN;\n                arg_14h = 9;\n            }\n            else {\n                arg_14h = 0x3e9;\n            }\n            goto code_r0x0103ee8a;\n        }\n        in_XMM0 = CONCAT88(dVar11, param_1 * *0x1057530);\n        iVar4 = -0x34;\n    }\n    arg_14h = 8;\n    dStack12 = *0x1057540;\ncode_r0x0103ee8a:\n    fcn.0103d92b(&param_1, &param_1, &dStack12, arg_14h);\n    return dStack12;\n}\n",
        "token_count": 1037
    },
    "0101ac90": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint fcn.0101ac90(void)\n\n{\n    uint32_t uVar1;\n    int32_t *in_FS_OFFSET;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x103f87c;\n    var_ch = *in_FS_OFFSET;\n    uVar1 = *0x105b174 ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    if (*(*(in_FS_OFFSET[0xb] + *0x10fb234 * 4) + 4) < *0x10fae80) {\n        fcn.010246f0(0x10fae80);\n        if (*0x10fae80 == -1) {\n            var_4h = 0;\n            fcn.0101b330(uVar1);\n            fcn.0102458a(fcn.010400f0);\n            var_4h = 0xffffffff;\n            fcn.010246b1(0x10fae80);\n        }\n    }\n    *in_FS_OFFSET = var_ch;\n    return 0x10fae78;\n}\n",
        "token_count": 263
    },
    "0101f1f0": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid fcn.0101f1f0(void)\n\n{\n    char cVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    int32_t *in_FS_OFFSET;\n    uint var_10h;\n    uint var_ch;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_11h;\n    int32_t var_ch_2;\n    uint uStack12;\n    uint var_4h;\n    \n    uStack12 = 0x103fdb0;\n    var_ch_2 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &var_ch_2;\n    var_4h = 0;\n    cVar1 = fcn.01021180();\n    if (cVar1 != '\\0') {\n        uVar2 = fcn.01021030();\n        if ((uVar2 & 2) != 0) {\n            fcn.010216e0();\n            iVar3 = fcn.01021640();\n            if (iVar3 == -1) {\n                fcn.010217e0(4, 0);\n            }\n        }\n    }\n    *in_FS_OFFSET = var_ch_2;\n    return;\n}\n",
        "token_count": 273
    },
    "01021050": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint __fastcall fcn.01021050(uint param_1)\n\n{\n    char cVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    int32_t *in_FS_OFFSET;\n    uint var_18h;\n    uint var_10h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x103fe48;\n    var_ch = *in_FS_OFFSET;\n    uVar2 = *0x105b174 ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    iVar3 = fcn.010216e0(uVar2);\n    if (iVar3 != 0) {\n        fcn.0101bf60(param_1);\n        var_4h = 0;\n        cVar1 = fcn.0101cba0();\n        if (cVar1 != '\\0') {\n            fcn.010216e0();\n            iVar3 = fcn.01021640();\n            if (iVar3 == -1) {\n                fcn.010217e0(4, 0);\n            }\n        }\n        var_4h = 0xffffffff;\n        fcn.0101c5e0();\n    }\n    *in_FS_OFFSET = var_ch;\n    return param_1;\n}\n",
        "token_count": 297
    },
    "010225d3": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_10h\n\nvoid __cdecl fcn.010225d3(uint arg_8h)\n\n{\n    int32_t *piVar1;\n    code *pcVar2;\n    uint arg_8h_00;\n    int32_t iVar3;\n    int32_t unaff_EBP;\n    uint var_20h;\n    uint var_14h;\n    uint var_10h;\n    uint var_4h;\n    \n    fcn.01024bbe(0x14);\n    fcn.01021be4(0);\n    piVar1 = *0x10fb040;\n    *(unaff_EBP + -4) = 0;\n    *(unaff_EBP + -0x10) = piVar1;\n    arg_8h_00 = fcn.0101cb50();\n    iVar3 = fcn.0101e580(arg_8h_00);\n    if ((iVar3 == 0) && (piVar1 == NULL)) {\n        iVar3 = fcn.01022b62(unaff_EBP + -0x10, *(unaff_EBP + 8));\n        if (iVar3 == -1) {\n            fcn.0101bbc0();\n            fcn.010260fc(unaff_EBP + -0x20, 0x10595f8);\n        }\n        piVar1 = *(unaff_EBP + -0x10);\n        pcVar2 = *(*piVar1 + 4);\n        *0x10fb040 = piVar1;\n        fcn.01024b92();\n        (*pcVar2)();\n        fcn.010222ef(piVar1);\n    }\n    fcn.01021c3c();\n    fcn.01024b98();\n    return;\n}\n",
        "token_count": 406
    },
    "0102905c": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0102905c(int32_t arg_8h)\n\n{\n    if (*0x105b190 != -1) {\n        if (arg_8h == 0) {\n            arg_8h = fcn.01028e9b(*0x105b190);\n        }\n        fcn.01028ed5(*0x105b190, 0);\n        fcn.01029040(arg_8h);\n    }\n    return;\n}\n",
        "token_count": 104
    },
    "01034326": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.01034326(uint8_t **arg_8h)\n\n{\n    uint8_t uVar1;\n    uint *puVar2;\n    uint arg_8h_00;\n    uint8_t *puVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    uint8_t *arg_ch;\n    \n    if (arg_8h == NULL) {\n        puVar2 = fcn.0102bd74();\n        *puVar2 = 0x16;\n        fcn.010296a3();\n    }\n    else if (((arg_8h[3] >> 0xd & 1) != 0) && ((arg_8h[3] >> 0xc & 1) == 0)) {\n        if ((arg_8h[3] >> 1 & 1) == 0) {\n            LOCK();\n            arg_8h[3] = arg_8h[3] | 1;\n            if ((arg_8h[3] & 0x4c0) == 0) {\n                fcn.010304fc(arg_8h);\n            }\n            *arg_8h = arg_8h[1];\n            puVar3 = arg_8h[6];\n            arg_ch = arg_8h[1];\n            arg_8h_00 = fcn.010304d5(arg_8h);\n            puVar3 = fcn.0103ce78(arg_8h_00, arg_ch, puVar3);\n            arg_8h[2] = puVar3;\n            puVar3 = arg_8h[2];\n            if ((puVar3 != NULL) && (puVar3 != 0xffffffff)) {\n                if ((arg_8h[3] & 6) == 0) {\n                    iVar4 = fcn.010304d5(arg_8h);\n                    if ((iVar4 == -1) || (iVar4 = fcn.010304d5(arg_8h),  iVar4 == -2)) {\n                        iVar4 = 0x105b2d8;\n                    }\n                    else {\n                        iVar4 = fcn.010304d5(arg_8h);\n                        uVar5 = fcn.010304d5(arg_8h);\n                        iVar4 = *((iVar4 >> 6) * 4 + 0x10fb8e0) + (uVar5 & 0x3f) * 0x38;\n                    }\n                    if ((*(iVar4 + 0x28) & 0x82) == 0x82) {\n                        LOCK();\n                        arg_8h[3] = arg_8h[3] | 0x20;\n                    }\n                }\n                if (((arg_8h[6] == 0x200) && ((arg_8h[3] >> 6 & 1) != 0)) && ((arg_8h[3] & 0x100) == 0)) {\n                    arg_8h[6] = 0x1000;\n                }\n                arg_8h[2] = arg_8h[2] + -1;\n                uVar1 = **arg_8h;\n                *arg_8h = *arg_8h + 1;\n                return uVar1;\n            }\n            LOCK();\n            arg_8h[3] = arg_8h[3] | (puVar3 != NULL) * 8 + 8;\n            arg_8h[2] = NULL;\n        }\n        else {\n            LOCK();\n            arg_8h[3] = arg_8h[3] | 0x10;\n        }\n    }\n    return 0xffffffff;\n}\n",
        "token_count": 812
    },
    "0103b354": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0103b354(int16_t *arg_8h, int32_t arg_ch, int32_t arg_10h, int32_t arg_14h)\n\n{\n    int16_t iVar1;\n    uint *puVar2;\n    int32_t iVar3;\n    int16_t *piVar4;\n    int32_t iVar5;\n    uint uVar6;\n    \n    if (arg_14h == 0) {\n        if (arg_8h == NULL) {\n            if (arg_ch == 0) {\n                return 0;\n            }\n        }\n        else {\ncode_r0x0103b2bf:\n            if (arg_ch != 0) {\n                if (arg_14h == 0) {\n                    *arg_8h = 0;\n                    return 0;\n                }\n                if (arg_10h != 0) {\n                    iVar3 = arg_14h;\n                    piVar4 = arg_8h;\n                    iVar5 = arg_ch;\n                    if (arg_14h == -1) {\n                        do {\n                            iVar1 = *((arg_10h - arg_8h) + piVar4);\n                            *piVar4 = iVar1;\n                            piVar4 = piVar4 + 1;\n                            if (iVar1 == 0) break;\n                            iVar5 = iVar5 + -1;\n                        } while (iVar5 != 0);\n                    }\n                    else {\n                        do {\n                            iVar1 = *((arg_10h - arg_8h) + piVar4);\n                            *piVar4 = iVar1;\n                            piVar4 = piVar4 + 1;\n                            if ((iVar1 == 0) || (iVar5 = iVar5 + -1,  iVar5 == 0)) break;\n                            iVar3 = iVar3 + -1;\n                        } while (iVar3 != 0);\n                        if (iVar3 == 0) {\n                            *piVar4 = 0;\n                        }\n                    }\n                    if (iVar5 != 0) {\n                        return 0;\n                    }\n                    if (arg_14h == -1) {\n                        arg_8h[arg_ch + -1] = 0;\n                        return 0x50;\n                    }\n                    *arg_8h = 0;\n                    puVar2 = fcn.0102bd74();\n                    uVar6 = 0x22;\n                    goto code_r0x0103b2ad;\n                }\n                *arg_8h = 0;\n            }\n        }\n    }\n    else if (arg_8h != NULL) goto code_r0x0103b2bf;\n    puVar2 = fcn.0102bd74();\n    uVar6 = 0x16;\ncode_r0x0103b2ad:\n    *puVar2 = uVar6;\n    fcn.010296a3();\n    return uVar6;\n}\n",
        "token_count": 624
    },
    "0103c969": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0103c969(char *arg_8h, int32_t arg_ch, int32_t arg_10h, int32_t arg_14h)\n\n{\n    char cVar1;\n    uint *puVar2;\n    int32_t iVar3;\n    char *pcVar4;\n    int32_t iVar5;\n    uint uVar6;\n    \n    if (arg_14h == 0) {\n        if (arg_8h == NULL) {\n            if (arg_ch == 0) {\n                return 0;\n            }\n        }\n        else {\ncode_r0x0103c8ec:\n            if (arg_ch != 0) {\n                if (arg_14h == 0) {\n                    *arg_8h = '\\0';\n                    return 0;\n                }\n                if (arg_10h != 0) {\n                    iVar3 = arg_14h;\n                    pcVar4 = arg_8h;\n                    iVar5 = arg_ch;\n                    if (arg_14h == -1) {\n                        do {\n                            cVar1 = pcVar4[arg_10h - arg_8h];\n                            *pcVar4 = cVar1;\n                            pcVar4 = pcVar4 + 1;\n                            if (cVar1 == '\\0') break;\n                            iVar5 = iVar5 + -1;\n                        } while (iVar5 != 0);\n                    }\n                    else {\n                        do {\n                            cVar1 = pcVar4[arg_10h - arg_8h];\n                            *pcVar4 = cVar1;\n                            pcVar4 = pcVar4 + 1;\n                            if ((cVar1 == '\\0') || (iVar5 = iVar5 + -1,  iVar5 == 0)) break;\n                            iVar3 = iVar3 + -1;\n                        } while (iVar3 != 0);\n                        if (iVar3 == 0) {\n                            *pcVar4 = '\\0';\n                        }\n                    }\n                    if (iVar5 != 0) {\n                        return 0;\n                    }\n                    if (arg_14h == -1) {\n                        arg_8h[arg_ch + -1] = '\\0';\n                        return 0x50;\n                    }\n                    *arg_8h = '\\0';\n                    puVar2 = fcn.0102bd74();\n                    uVar6 = 0x22;\n                    goto code_r0x0103c8da;\n                }\n                *arg_8h = '\\0';\n            }\n        }\n    }\n    else if (arg_8h != NULL) goto code_r0x0103c8ec;\n    puVar2 = fcn.0102bd74();\n    uVar6 = 0x16;\ncode_r0x0103c8da:\n    *puVar2 = uVar6;\n    fcn.010296a3();\n    return uVar6;\n}\n",
        "token_count": 619
    },
    "0103eaac": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nbool fcn.0103eaac(void)\n\n{\n    if (*0x105baa0 == -2) {\n        fcn.0103ea8d();\n    }\n    return *0x105baa0 != -1;\n}\n",
        "token_count": 52
    },
    "0103eacb": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid fcn.0103eacb(void)\n\n{\n    if ((*0x105baa0 != -1) && (*0x105baa0 != -2)) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(*0x105baa0);\n    }\n    return;\n}\n",
        "token_count": 63
    },
    "0102271e": {
        "rules": [
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0102271e(uint noname_0, code *arg_ch)\n\n{\n    code **ppcVar1;\n    code **in_ECX;\n    int32_t iVar2;\n    code **ppcVar3;\n    uint var_30h;\n    uint var_4h;\n    \n    in_ECX[1] = arg_ch;\n    *in_ECX = vtable.std::codecvt_wchar_t__char__struct__Mbstatet_.0;\n    ppcVar1 = fcn.01021e2c(&var_30h);\n    ppcVar3 = in_ECX + 2;\n    for (iVar2 = 0xb; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *ppcVar3 = *ppcVar1;\n        ppcVar1 = ppcVar1 + 1;\n        ppcVar3 = ppcVar3 + 1;\n    }\n    return;\n}\n",
        "token_count": 211
    },
    "01022979": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.01022979(uint32_t arg_8h)\n\n{\n    int32_t in_ECX;\n    \n    fcn.01022895();\n    if ((arg_8h & 1) != 0) {\n        fcn.01024261(in_ECX + -8);\n    }\n    return in_ECX + -8;\n}\n",
        "token_count": 80
    },
    "01022b62": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.01022b62(uint arg_8h, uint arg_ch)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t unaff_EBP;\n    int32_t iVar4;\n    uint var_44h;\n    uint var_10h;\n    uint var_4h;\n    \n    fcn.01024bbe(0x38);\n    piVar1 = *(unaff_EBP + 8);\n    iVar4 = 0;\n    *(unaff_EBP + -0x10) = 0;\n    if ((piVar1 != NULL) && (*piVar1 == 0)) {\n        iVar2 = fcn.01024229(0x34);\n        *(unaff_EBP + -0x10) = iVar2;\n        *(unaff_EBP + -4) = 0;\n        if (iVar2 != 0) {\n            uVar3 = fcn.0101fe10();\n            uVar3 = fcn.0101b950(uVar3);\n            iVar4 = fcn.0102271e(uVar3, 0);\n        }\n        *piVar1 = iVar4;\n        if (iVar2 != 0) {\n            fcn.0101c360();\n        }\n    }\n    fcn.01024b98();\n    return;\n}\n",
        "token_count": 315
    },
    "0102b10c": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0102b10c(int32_t param_1)\n\n{\n    if ((*(param_1 + 0x20) >> 5 & 1) != 0) {\n        *(param_1 + 0x20) = *(param_1 + 0x20) | 0x80;\n    }\n    fcn.0102af47(8, 0);\n    return;\n}\n",
        "token_count": 93
    },
    "01034789": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.01034789(uint32_t arg_8h, uint *arg_ch)\n\n{\n    char cVar1;\n    uint arg_8h_00;\n    uint *puVar2;\n    int32_t iVar3;\n    \n    arg_8h_00 = fcn.010304d5(arg_ch);\n    if ((arg_ch[3] & 6) == 0) {\n        puVar2 = fcn.0102bd74();\n        *puVar2 = 9;\n    }\n    else {\n        if ((arg_ch[3] >> 0xc & 1) == 0) {\n            if ((arg_ch[3] & 1) != 0) {\n                cVar1 = fcn.01034704(arg_ch);\n                arg_ch[2] = 0;\n                if (cVar1 == '\\0') goto code_r0x01034367;\n                *arg_ch = arg_ch[1];\n                LOCK();\n                arg_ch[3] = arg_ch[3] & 0xfffffffe;\n            }\n            LOCK();\n            arg_ch[3] = arg_ch[3] | 2;\n            LOCK();\n            arg_ch[3] = arg_ch[3] & 0xfffffff7;\n            arg_ch[2] = 0;\n            if (((arg_ch[3] & 0x4c0) == 0) &&\n               (((puVar2 = fcn.0102bec9(1),  arg_ch != puVar2 && (puVar2 = fcn.0102bec9(2),  arg_ch != puVar2)) ||\n                (iVar3 = fcn.0103a58c(arg_8h_00),  iVar3 == 0)))) {\n                fcn.010304fc(arg_ch);\n            }\n            cVar1 = fcn.0103456a(arg_8h, arg_ch);\n            if (cVar1 == '\\0') {\n                LOCK();\n                arg_ch[3] = arg_ch[3] | 0x10;\n                return 0xffffffff;\n            }\n            return arg_8h & 0xff;\n        }\n        puVar2 = fcn.0102bd74();\n        *puVar2 = 0x22;\n    }\ncode_r0x01034367:\n    LOCK();\n    arg_ch[3] = arg_ch[3] | 0x10;\n    return 0xffffffff;\n}\n",
        "token_count": 527
    },
    "01034794": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.01034794(uint32_t arg_8h, uint *arg_ch)\n\n{\n    char cVar1;\n    uint arg_8h_00;\n    uint *puVar2;\n    int32_t iVar3;\n    \n    arg_8h_00 = fcn.010304d5(arg_ch);\n    if ((arg_ch[3] & 6) == 0) {\n        puVar2 = fcn.0102bd74();\n        *puVar2 = 9;\n    }\n    else {\n        if ((arg_ch[3] >> 0xc & 1) == 0) {\n            if ((arg_ch[3] & 1) != 0) {\n                cVar1 = fcn.01034704(arg_ch);\n                arg_ch[2] = 0;\n                if (cVar1 == '\\0') goto code_r0x0103447c;\n                *arg_ch = arg_ch[1];\n                LOCK();\n                arg_ch[3] = arg_ch[3] & 0xfffffffe;\n            }\n            LOCK();\n            arg_ch[3] = arg_ch[3] | 2;\n            LOCK();\n            arg_ch[3] = arg_ch[3] & 0xfffffff7;\n            arg_ch[2] = 0;\n            if (((arg_ch[3] & 0x4c0) == 0) &&\n               (((puVar2 = fcn.0102bec9(1),  arg_ch != puVar2 && (puVar2 = fcn.0102bec9(2),  arg_ch != puVar2)) ||\n                (iVar3 = fcn.0103a58c(arg_8h_00),  iVar3 == 0)))) {\n                fcn.010304fc(arg_ch);\n            }\n            cVar1 = fcn.01034636(arg_8h, arg_ch);\n            if (cVar1 == '\\0') {\n                LOCK();\n                arg_ch[3] = arg_ch[3] | 0x10;\n                return 0xffff;\n            }\n            return arg_8h & 0xffff;\n        }\n        puVar2 = fcn.0102bd74();\n        *puVar2 = 0x22;\n    }\ncode_r0x0103447c:\n    LOCK();\n    arg_ch[3] = arg_ch[3] | 0x10;\n    return 0xffff;\n}\n",
        "token_count": 528
    },
    "01035227": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_10h\n\nuint __cdecl fcn.01035227(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    uint32_t lpCriticalSection;\n    uint *puVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t unaff_EBP;\n    uint *in_FS_OFFSET;\n    uint var_20h;\n    uint var_1ch;\n    uint var_10h;\n    uint var_4h;\n    \n    fcn.01025020(0x1059f30, 0x10);\n    lpCriticalSection = *(unaff_EBP + 8);\n    if (lpCriticalSection == 0xfffffffe) {\n        puVar1 = fcn.0102bd61();\n        *puVar1 = 0;\n        puVar1 = fcn.0102bd74();\n        *puVar1 = 9;\n    }\n    else {\n        if ((-1 < lpCriticalSection) && (lpCriticalSection < *0x10fbae0)) {\n            iVar3 = (lpCriticalSection & 0x3f) * 0x38;\n            *(unaff_EBP + -0x20) = iVar3;\n            if ((*(*((lpCriticalSection >> 6) * 4 + 0x10fb8e0) + 0x28 + iVar3) & 1) != 0) {\n                fcn.01038eda(lpCriticalSection);\n                uVar2 = 0xffffffff;\n                *(unaff_EBP + -0x1c) = 0xffffffff;\n                *(unaff_EBP + -4) = 0;\n                if ((*(*((lpCriticalSection >> 6) * 4 + 0x10fb8e0) + 0x28 + *(unaff_EBP + -0x20)) & 1) == 0) {\n                    puVar1 = fcn.0102bd74();\n                    *puVar1 = 9;\n                    puVar1 = fcn.0102bd61();\n                    *puVar1 = 0;\n                }\n                else {\n                    uVar2 = fcn.01035319(lpCriticalSection, *(unaff_EBP + 0xc), *(unaff_EBP + 0x10));\n                    *(unaff_EBP + -0x1c) = uVar2;\n                }\n                *(unaff_EBP + -4) = 0xfffffffe;\n                fcn.010352e6();\n                goto code_r0x01035309;\n            }\n        }\n        puVar1 = fcn.0102bd61();\n        *puVar1 = 0;\n        puVar1 = fcn.0102bd74();\n        *puVar1 = 9;\n        fcn.010296a3();\n    }\n    uVar2 = 0xffffffff;\ncode_r0x01035309:\n    *in_FS_OFFSET = *(unaff_EBP + -0x10);\n    return uVar2;\n}\n",
        "token_count": 667
    },
    "0102ad0e": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nuint __fastcall fcn.0102ad0e(uint *param_1)\n\n{\n    uint16_t uVar1;\n    uint16_t *puVar2;\n    int32_t iVar3;\n    char cVar4;\n    uint32_t uVar5;\n    \n    param_1[5] = param_1[5] + 4;\n    puVar2 = *(param_1[5] + -4);\n    if ((puVar2 == NULL) || (iVar3 = *(puVar2 + 2),  iVar3 == 0)) {\n        param_1[0xd] = \"(null)\";\n        uVar5 = 6;\n    }\n    else {\n        cVar4 = fcn.0102a29d(*param_1, param_1[1], *(param_1 + 0x31), param_1[0xb]);\n        param_1[0xd] = iVar3;\n        uVar1 = *puVar2;\n        uVar5 = uVar1;\n        if (cVar4 != '\\0') {\n            *(param_1 + 0xf) = 1;\n            uVar5 = uVar1 >> 1;\n            goto code_r0x0102ad5f;\n        }\n    }\n    *(param_1 + 0xf) = 0;\ncode_r0x0102ad5f:\n    param_1[0xe] = uVar5;\n    return 1;\n}\n",
        "token_count": 315
    },
    "01021b40": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/a3d2ca57787b45ac887fefbb531cd56b",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/f4adb04e51ec4c55be451936d9d27cc9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.01021b40(uint arg_8h, uint arg_ch, int32_t arg_10h)\n\n{\n    fcn.01025420(arg_8h, arg_ch, arg_10h << 1);\n    return;\n}\n",
        "token_count": 57
    },
    "01021b60": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/a3d2ca57787b45ac887fefbb531cd56b",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/f4adb04e51ec4c55be451936d9d27cc9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.01021b60(uint arg_8h, uint arg_ch, int32_t arg_10h)\n\n{\n    fcn.010259a0(arg_8h, arg_ch, arg_10h << 1);\n    return;\n}\n",
        "token_count": 58
    },
    "01024d48": {
        "rules": [
            "empty recycle bin quietly/a05fef7955a340fbb66225983c77e1df"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x01024d89)\n// WARNING: Removing unreachable block (ram,0x01024e39)\n// WARNING: Removing unreachable block (ram,0x01024dc3)\n\nuint fcn.01024d48(void)\n\n{\n    int32_t *piVar1;\n    uint32_t *puVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    uint32_t in_XCR0;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint32_t var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    *0x10fb23c = 0;\n    *0x105b180 = *0x105b180 | 1;\n    iVar4 = sub.KERNEL32.dll_IsProcessorFeaturePresent(10);\n    uVar3 = *0x105b180;\n    if (iVar4 != 0) {\n        var_10h = 0;\n        *0x105b180 = *0x105b180 | 2;\n        *0x10fb23c = 1;\n        piVar1 = cpuid_basic_info(0);\n        puVar2 = cpuid_Version_info(1);\n        uVar6 = puVar2[3];\n        if (((piVar1[2] ^ 0x49656e69U | piVar1[3] ^ 0x6c65746eU | piVar1[1] ^ 0x756e6547U) == 0) &&\n           (((((uVar5 = *puVar2 & 0xfff3ff0,  uVar5 == 0x106c0 || (uVar5 == 0x20660)) || (uVar5 == 0x20670)) ||\n             ((uVar5 == 0x30650 || (uVar5 == 0x30660)))) || (uVar5 == 0x30670)))) {\n            *0x10fb240 = *0x10fb240 | 1;\n        }\n        if (6 < *piVar1) {\n            iVar4 = cpuid_Extended_Feature_Enumeration_info(7);\n            var_10h = *(iVar4 + 4);\n            if ((var_10h & 0x200) != 0) {\n                *0x10fb240 = *0x10fb240 | 2;\n            }\n        }\n        if ((uVar6 & 0x100000) != 0) {\n            *0x105b180 = uVar3 | 6;\n            *0x10fb23c = 2;\n            if ((((uVar6 & 0x8000000) != 0) && ((uVar6 & 0x10000000) != 0)) && ((in_XCR0 & 6) == 6)) {\n                *0x105b180 = uVar3 | 0xe;\n                *0x10fb23c = 3;\n                if ((var_10h & 0x20) != 0) {\n                    *0x105b180 = uVar3 | 0x2e;\n                    *0x10fb23c = 5;\n                }\n            }\n        }\n    }\n    return 0;\n}\n",
        "token_count": 764
    },
    "01037e0b": {
        "rules": [
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf",
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8"
        ],
        "decompiled_code": "\n// WARNING: Type propagation algorithm not settling\n\nint32_t __cdecl fcn.01037e0b(int32_t *arg_8h, int32_t *arg_ch)\n\n{\n    char cVar1;\n    code *pcVar2;\n    uint *puVar3;\n    int32_t iVar4;\n    char *pcVar5;\n    uint32_t uVar6;\n    char *pcVar7;\n    int32_t iVar8;\n    uint32_t uVar9;\n    char **ppcVar10;\n    char **arg_8h_00;\n    char **var_28h;\n    char **var_24h;\n    uint var_20h;\n    char **var_1ch;\n    char *var_18h;\n    char *var_14h;\n    char *var_10h;\n    char *var_ch;\n    char **var_8h;\n    char *var_4h;\n    \n    if (arg_ch == NULL) {\n        puVar3 = fcn.0102bd74();\n        iVar8 = 0x16;\n        *puVar3 = 0x16;\n        fcn.010296a3();\n    }\n    else {\n        pcVar7 = NULL;\n        *arg_ch = 0;\n        iVar8 = *arg_8h;\n        var_28h = NULL;\n        var_24h = NULL;\n        var_20h = 0;\n        ppcVar10 = var_28h;\n        while (var_28h = ppcVar10,  iVar8 != 0) {\n            var_4h = CONCAT13(var_4h >> 0x18, 0x3f2a);\n            iVar8 = fcn.0103e170(iVar8, &var_4h);\n            if (iVar8 == 0) {\n                iVar8 = fcn.01037a01(*arg_8h, 0, 0, &var_28h);\n            }\n            else {\n                iVar8 = fcn.01037ab2(*arg_8h, iVar8, &var_28h);\n            }\n            ppcVar10 = var_28h;\n            var_8h = iVar8;\n            if (iVar8 != 0) goto code_r0x010379b2;\n            arg_8h = arg_8h + 1;\n            iVar8 = *arg_8h;\n        }\n        var_4h = NULL;\n        var_ch = (var_24h - ppcVar10 >> 2) + 1;\n        uVar9 = ~-(var_24h < ppcVar10) & (var_24h - ppcVar10) + 3U >> 2;\n        var_8h = ppcVar10;\n        if (uVar9 != 0) {\n            uVar6 = 0;\n            do {\n                pcVar5 = *var_8h;\n                var_10h = pcVar5 + 1;\n                do {\n                    cVar1 = *pcVar5;\n                    pcVar5 = pcVar5 + 1;\n                } while (cVar1 != '\\0');\n                pcVar7 = pcVar5 + pcVar7 + (1 - var_10h);\n                var_8h = var_8h + 1;\n                uVar6 = uVar6 + 1;\n                var_4h = pcVar7;\n            } while (uVar6 != uVar9);\n        }\n        iVar8 = fcn.0102e42d(var_ch, var_4h, 1);\n        if (iVar8 == 0) {\n            iVar8 = -1;\n            var_8h = 0xffffffff;\n        }\n        else {\n            var_ch = iVar8 + var_ch * 4;\n            var_18h = var_ch;\n            if (ppcVar10 != var_24h) {\n                var_1ch = iVar8 - ppcVar10;\n                var_8h = ppcVar10;\n                do {\n                    var_14h = *var_8h;\n                    var_10h = var_14h;\n                    do {\n                        cVar1 = *var_10h;\n                        var_10h = var_10h + 1;\n                    } while (cVar1 != '\\0');\n                    var_10h = var_10h + (1 - (var_14h + 1));\n                    iVar4 = fcn.0103c969(var_ch, var_4h + (var_18h - var_ch), var_14h, var_10h);\n                    if (iVar4 != 0) {\n                        fcn.010296d0(0, 0, 0, 0, 0);\n                        pcVar2 = swi(3);\n                        iVar8 = (*pcVar2)();\n                        return iVar8;\n                    }\n                    *(var_1ch + var_8h) = var_ch;\n                    var_8h = var_8h + 1;\n                    var_ch = var_ch + var_10h;\n                } while (var_8h != var_24h);\n            }\n            var_8h = NULL;\n            *arg_ch = iVar8;\n            iVar8 = 0;\n        }\n        fcn.0102d1c2(0);\ncode_r0x010379b2:\n        uVar6 = 0;\n        uVar9 = ~-(var_24h < ppcVar10) & var_24h + (3 - ppcVar10) >> 2;\n        arg_8h_00 = ppcVar10;\n        var_1ch = ppcVar10;\n        var_18h = uVar9;\n        if (uVar9 != 0) {\n            do {\n                fcn.0102d1c2(*ppcVar10);\n                uVar6 = uVar6 + 1;\n                ppcVar10 = ppcVar10 + 1;\n                iVar8 = var_8h;\n                arg_8h_00 = var_28h;\n            } while (uVar6 != uVar9);\n        }\n        fcn.0102d1c2(arg_8h_00);\n    }\n    return iVar8;\n}\n",
        "token_count": 1353
    },
    "01038cb7": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.01038cb7(uint8_t *arg_8h, uint32_t arg_ch, uint32_t *arg_10h)\n\n{\n    uint8_t uVar1;\n    int32_t iVar2;\n    uint8_t uVar3;\n    int32_t iVar4;\n    \n    if (arg_8h == NULL) {\n        arg_ch = 0;\n    }\n    else {\n        if (arg_ch != 0) {\n            if ((arg_ch & 0xffffff80) == 0) {\n                *arg_8h = arg_ch;\n                return 1;\n            }\n            if ((arg_ch & 0xfffff800) == 0) {\n                uVar3 = 0xc0;\n                iVar4 = 1;\n                iVar2 = iVar4;\n            }\n            else if ((arg_ch & 0xffff0000) == 0) {\n                if ((0xd7ff < arg_ch) && (arg_ch < 0xe000)) {\ncode_r0x01038d55:\n                    iVar2 = fcn.01038d62(arg_10h);\n                    return iVar2;\n                }\n                iVar4 = 2;\n                uVar3 = 0xe0;\n                iVar2 = iVar4;\n            }\n            else {\n                if (((arg_ch & 0xffe00000) != 0) || (0x10ffff < arg_ch)) goto code_r0x01038d55;\n                iVar4 = 3;\n                uVar3 = 0xf0;\n                iVar2 = iVar4;\n            }\n            do {\n                uVar1 = arg_ch;\n                arg_ch = arg_ch >> 6;\n                arg_8h[iVar4] = uVar1 & 0x3f | 0x80;\n                iVar4 = iVar4 + -1;\n            } while (iVar4 != 0);\n            *arg_8h = arg_ch | uVar3;\n            *arg_10h = 0;\n            arg_10h[1] = 0;\n            return iVar2 + 1;\n        }\n        *arg_8h = arg_ch;\n    }\n    *arg_10h = arg_ch;\n    arg_10h[1] = arg_ch;\n    return 1;\n}\n",
        "token_count": 493
    },
    "01038eda": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.01038eda(uint32_t lpCriticalSection)\n\n{\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)\n              ((lpCriticalSection & 0x3f) * 0x38 + *((lpCriticalSection >> 6) * 4 + 0x10fb8e0));\n    return;\n}\n",
        "token_count": 70
    },
    "01038efd": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.01038efd(uint32_t lpCriticalSection)\n\n{\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)\n              ((lpCriticalSection & 0x3f) * 0x38 + *((lpCriticalSection >> 6) * 4 + 0x10fb8e0));\n    return;\n}\n",
        "token_count": 71
    },
    "01023b69": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\nvoid fcn.01023b69(void)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    code *pcVar3;\n    int32_t *in_FS_OFFSET;\n    int32_t var_ch;\n    uint uStack12;\n    uint uStack8;\n    \n    uStack8 = 0xffffffff;\n    uStack12 = 0x103feb0;\n    var_ch = *in_FS_OFFSET;\n    uVar2 = *0x105b174 ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    while (*0x105b100 < 10) {\n        iVar1 = *0x105b100 * 4;\n        *0x105b100 = *0x105b100 + 1;\n        pcVar3 = (*_sym.imp.KERNEL32.dll_DecodePointer)(*(iVar1 + 0x10fb064), uVar2);\n        if (pcVar3 != NULL) {\n            fcn.01024b92();\n            (*pcVar3)();\n        }\n    }\n    *in_FS_OFFSET = var_ch;\n    return;\n}\n",
        "token_count": 240
    },
    "01001040": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.01001040(void)\n\n{\n    *0x10fae64 = 0x3fd6048;\n    return;\n}\n",
        "token_count": 32
    },
    "010011c0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.010011c0(char param_1)\n\n{\n    char *in_EAX;\n    \n    *in_EAX = *in_EAX + in_EAX;\n    in_EAX[-0x75] = in_EAX[-0x75] + param_1;\n    return;\n}\n",
        "token_count": 67
    },
    "010027b0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.010027b0(void)\n\n{\n    uint uVar1;\n    uint uVar2;\n    uint uVar3;\n    uint uVar4;\n    int32_t iVar5;\n    int32_t unaff_ESI;\n    int32_t in_stack_00000003;\n    uchar *puStack00000016;\n    uchar *puStack0000001e;\n    uint uStack0000002e;\n    uint uStack00000036;\n    uint *in_stack_00000088;\n    \n    puStack00000016 = &stack0xfffffffc;\n    iVar5 = func_0x0115085c();\n    if (iVar5 != 2) {\n        uVar1 = *in_stack_00000088;\n        uVar2 = in_stack_00000088[1];\n        uVar3 = in_stack_00000088[2];\n        uVar4 = in_stack_00000088[3];\n        *(iVar5 + -3) = 1;\n        *(iVar5 + 4) = 0xffffc7ad;\n        *(iVar5 + 0xc) = uVar1;\n        *(iVar5 + 0x10) = uVar2;\n        *(iVar5 + 0x14) = uVar3;\n        *(iVar5 + 0x18) = uVar4;\n    }\n    uStack00000036 = 0x2146598;\n    uStack0000002e = 0x1aeba6;\n    puStack0000001e = &stack0x00000074;\n    (**0x1a8511)();\n    return unaff_ESI + in_stack_00000003 + -1;\n}\n",
        "token_count": 365
    },
    "010163f0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1h\n\nint32_t __cdecl fcn.010163f0(int32_t arg_8h)\n\n{\n    uint var_ch;\n    int32_t var_8h;\n    uint var_1h;\n    \n    var_8h = 0x1600;\n    if (*0x105b024 + *0x105b034 == 0x20b) {\n        var_8h = 0x6dc8;\n    }\n    else {\n        *0x105b04c = *0x105b0d4 + *0x105b0d0 + 0x38 + arg_8h;\n    }\n    *0x105b0d8 = *0x105b0d4 + 4 + var_8h;\n    return *0x105b0d0;\n}\n",
        "token_count": 191
    },
    "0101a480": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0101a480(uint noname_0, uint arg_ch)\n\n{\n    uint arg_8h;\n    uint in_ECX;\n    uint var_4h;\n    \n    arg_8h = fcn.0101af20(arg_ch);\n    fcn.0101b3c0(arg_8h);\n    fcn.0101b390();\n    return in_ECX;\n}\n",
        "token_count": 90
    },
    "0101a4b0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.0101a4b0(uint arg_8h)\n\n{\n    uint arg_ch;\n    uint in_ECX;\n    uint var_8h;\n    uint var_1h;\n    \n    arg_ch = fcn.0101af20(arg_8h);\n    fcn.0101a480(var_1h, arg_ch);\n    return in_ECX;\n}\n",
        "token_count": 111
    },
    "0101abd0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0101abd0(uint arg_8h, uint arg_ch)\n\n{\n    fcn.0101abf0(arg_8h, arg_ch);\n    return;\n}\n",
        "token_count": 43
    },
    "0101ac00": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.0101ac00(uint arg_8h, uint arg_ch)\n\n{\n    uint32_t uVar1;\n    uint32_t var_4h;\n    \n    uVar1 = fcn.0101abd0(arg_8h, arg_ch);\n    var_4h = (uVar1 & 0xff) == 0;\n    return uVar1 & 0xffffff00 | var_4h;\n}\n",
        "token_count": 98
    },
    "0101af00": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1h\n\nvoid __cdecl fcn.0101af00(uint arg_8h, uint arg_ch)\n\n{\n    uint32_t in_ECX;\n    uint var_1h;\n    \n    fcn.0101af30(arg_8h, arg_ch, in_ECX >> 0x18);\n    return;\n}\n",
        "token_count": 83
    },
    "0101af40": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0101af40(uint arg_8h, uint arg_ch)\n\n{\n    uint arg_10h;\n    uint in_ECX;\n    uint var_4h;\n    \n    arg_10h = fcn.0101af20(arg_ch);\n    fcn.0101afc0(in_ECX, arg_8h, arg_10h);\n    return;\n}\n",
        "token_count": 85
    },
    "0101afc0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0101afc0(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    uint arg_ch_00;\n    \n    arg_ch_00 = fcn.0101af20(arg_10h);\n    fcn.0101af70(arg_ch, arg_ch_00);\n    return;\n}\n",
        "token_count": 74
    },
    "0101afe0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0101afe0(uint arg_8h)\n\n{\n    uint in_ECX;\n    uint var_4h;\n    \n    fcn.0101b010(in_ECX, arg_8h);\n    return;\n}\n",
        "token_count": 53
    },
    "0101b3c0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0101b3c0(uint arg_8h)\n\n{\n    uint uVar1;\n    uint in_ECX;\n    uint var_4h;\n    \n    uVar1 = fcn.0101af20(arg_8h);\n    fcn.0101b450(uVar1);\n    return in_ECX;\n}\n",
        "token_count": 76
    },
    "0101b460": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0101b460(uint arg_8h)\n\n{\n    uint32_t uVar1;\n    uint uVar2;\n    uint in_ECX;\n    int32_t *in_FS_OFFSET;\n    uint var_10h;\n    int32_t var_ch;\n    uint uStack12;\n    uint uStack8;\n    \n    uStack8 = 0xffffffff;\n    uStack12 = 0x103feb0;\n    var_ch = *in_FS_OFFSET;\n    uVar1 = *0x105b174 ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    uVar2 = fcn.0101e1e0(uVar1);\n    uVar2 = fcn.0101af20(uVar2);\n    fcn.0101a4b0(uVar2);\n    fcn.0101f420(0, 0);\n    uVar2 = fcn.0101af20(arg_8h);\n    fcn.0101d2e0(uVar2);\n    *in_FS_OFFSET = var_ch;\n    return in_ECX;\n}\n",
        "token_count": 241
    },
    "0101ba30": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_10h\n// WARNING: Variable defined which should be unmapped: var_ch\n// WARNING: Variable defined which should be unmapped: var_8h\n\nuint * __cdecl fcn.0101ba30(uint arg_8h)\n\n{\n    uint uVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t *piVar4;\n    uint *in_ECX;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    *in_ECX = arg_8h;\n    uVar1 = *in_ECX;\n    iVar3 = fcn.010216e0();\n    if (iVar3 != 0) {\n        uVar2 = *in_ECX;\n        piVar4 = fcn.010216e0();\n        (**(*piVar4 + 4))(piVar4, uVar2, uVar1);\n    }\n    return in_ECX;\n}\n",
        "token_count": 224
    },
    "0101bf60": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0101bf60(int32_t arg_8h)\n\n{\n    char cVar1;\n    uchar uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    int32_t in_ECX;\n    int32_t *in_FS_OFFSET;\n    int32_t iVar5;\n    uint var_10h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x103fa98;\n    var_ch = *in_FS_OFFSET;\n    uVar3 = *0x105b174 ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    iVar5 = arg_8h;\n    fcn.0101ba30(arg_8h);\n    var_4h = 0;\n    cVar1 = fcn.01021180(iVar5, uVar3);\n    if (cVar1 != '\\0') {\n        iVar4 = fcn.01021900();\n        if (iVar4 != 0) {\n            iVar4 = fcn.01021900();\n            if (iVar4 != arg_8h) {\n                fcn.01021900();\n                fcn.01021050();\n            }\n        }\n    }\n    uVar2 = fcn.01021180(iVar5, uVar3);\n    *(in_ECX + 4) = uVar2;\n    *in_FS_OFFSET = var_ch;\n    return in_ECX;\n}\n",
        "token_count": 336
    },
    "0101c3f0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1ch\n// WARNING: Variable defined which should be unmapped: var_18h\n// WARNING: Variable defined which should be unmapped: var_14h\n// WARNING: Variable defined which should be unmapped: var_10h\n\nvoid __fastcall fcn.0101c3f0(uint *param_1)\n\n{\n    uint uVar1;\n    uint uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    int32_t *piVar5;\n    int32_t *in_FS_OFFSET;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    uint uStack12;\n    uint uStack8;\n    \n    uStack8 = 0xffffffff;\n    uStack12 = 0x103faf0;\n    var_ch = *in_FS_OFFSET;\n    uVar3 = *0x105b174 ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    uVar1 = *param_1;\n    iVar4 = fcn.010216e0(uVar3);\n    if (iVar4 != 0) {\n        uVar2 = *param_1;\n        piVar5 = fcn.010216e0(uVar3);\n        (**(*piVar5 + 8))(uVar3, piVar5, uVar2, param_1, uVar1);\n    }\n    *in_FS_OFFSET = var_ch;\n    return;\n}\n",
        "token_count": 341
    },
    "0101c670": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x0101c6a4)\n\nint32_t __cdecl fcn.0101c670(int32_t arg_8h)\n\n{\n    uint arg_ch;\n    uint arg_8h_00;\n    int32_t in_ECX;\n    uint var_4h;\n    \n    if (in_ECX != arg_8h) {\n        arg_ch = fcn.0101e1e0();\n        arg_8h_00 = fcn.0101e1e0();\n        fcn.0101ac00(arg_8h_00, arg_ch);\n        fcn.0101fb10(arg_8h);\n    }\n    return in_ECX;\n}\n",
        "token_count": 155
    },
    "0101cb10": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0101cb10(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    uint var_4h;\n    \n    iVar1 = fcn.0101f0f0();\n    return iVar1 + arg_8h;\n}\n",
        "token_count": 62
    },
    "0101d3a0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0101d3a0(uint arg_8h)\n\n{\n    uint32_t *puVar1;\n    int32_t *piVar2;\n    int32_t arg_10h;\n    uint uVar3;\n    uint uVar4;\n    uint *puVar5;\n    uint *puVar6;\n    uint var_4h;\n    \n    puVar1 = fcn.0101f1b0();\n    if (*puVar1 < 8) {\n        piVar2 = fcn.0101f1d0();\n        arg_10h = *piVar2 + 1;\n        uVar3 = fcn.0101d460();\n        uVar4 = fcn.0101d460();\n        fcn.010215d0(uVar4, uVar3, arg_10h);\n    }\n    else {\n        uVar3 = fcn.0101d460();\n        uVar4 = fcn.0101d460();\n        uVar4 = fcn.0101af20(uVar4);\n        fcn.0101e1e0();\n        fcn.0101af40(uVar4, uVar3);\n        puVar5 = fcn.0101d460();\n        *puVar5 = 0;\n    }\n    puVar5 = fcn.0101f1d0();\n    puVar6 = fcn.0101f1d0();\n    *puVar6 = *puVar5;\n    puVar5 = fcn.0101f1b0();\n    puVar6 = fcn.0101f1b0();\n    *puVar6 = *puVar5;\n    fcn.0101f4e0(0, 0);\n    return;\n}\n",
        "token_count": 383
    },
    "0101d950": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0101d950(uint arg_8h)\n\n{\n    uint arg_8h_00;\n    uint var_4h;\n    \n    arg_8h_00 = fcn.0101e1e0();\n    fcn.0101af00(arg_8h_00, arg_8h);\n    return;\n}\n",
        "token_count": 77
    },
    "0101db50": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_2h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl fcn.0101db50(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    uint *arg_ch;\n    uint var_ch;\n    uint var_8h;\n    uint var_2h;\n    \n    iVar1 = fcn.0101e1e0();\n    var_2h._0_2_ = 0;\n    *(iVar1 + 0x10) = arg_8h;\n    arg_ch = &var_2h;\n    iVar1 = fcn.0101f170();\n    fcn.0101fd40(iVar1 + arg_8h * 2, arg_ch);\n    return;\n}\n",
        "token_count": 172
    },
    "0101e970": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.0101e970(int32_t param_1, uint param_2, char param_3)\n\n{\n    ushort uVar1;\n    uint uVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    uint *puVar5;\n    int32_t *in_FS_OFFSET;\n    uint var_8h;\n    uint var_ch_2;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint auStack216 [2];\n    uint in_stack_ffffff30;\n    uint32_t uStack164;\n    uint var_90h;\n    uint var_8ch;\n    uint var_88h;\n    uint var_84h;\n    uint var_80h;\n    uint var_7ch;\n    int32_t var_78h;\n    uint var_74h;\n    uint var_70h;\n    uint var_6ch;\n    uint var_40h;\n    uint32_t var_14h_2;\n    uchar *puStack20;\n    int32_t var_ch_3;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x103fcf0;\n    var_ch_3 = *in_FS_OFFSET;\n    uStack164 = *0x105b174 ^ &stack0xfffffffc;\n    puStack20 = &stack0xffffff5c;\n    *in_FS_OFFSET = &fcn.0101e970::var_ch_3;\n    var_14h_2 = uStack164;\n    var_78h = fcn.0101e620();\n    fcn.0101e530(&fcn.0101e970::var_40h);\n    *(param_1 + 8) = 0;\n    *(param_1 + 0x10) = 0;\n    *(param_1 + 0x14) = 0;\n    var_4h = 0;\n    if (var_ch_2 == '\\0') {\n        var_74h = *(var_78h + 8);\n    }\n    else {\n        var_74h = 0x104ab0c;\n    }\n    fcn.0101e530(&fcn.0101e970::var_6ch);\n    uVar2 = fcn.0101ad70(var_74h);\n    *(param_1 + 8) = uVar2;\n    uVar2 = fcn.0101e610();\n    uVar2 = fcn.0101ade0(uVar2, 0, &fcn.0101e970::var_40h);\n    *(param_1 + 0x10) = uVar2;\n    uVar2 = fcn.0101e630();\n    uVar2 = fcn.0101ade0(uVar2, 0, &fcn.0101e970::var_40h);\n    *(param_1 + 0x14) = uVar2;\n    var_4h = 0xffffffff;\n    if (var_ch_2 == '\\0') {\n        puVar4 = &fcn.0101e970::var_40h;\n        puVar5 = &stack0xffffff28;\n        for (iVar3 = 0xb; iVar3 != 0; iVar3 = iVar3 + -1) {\n            *puVar5 = *puVar4;\n            puVar4 = puVar4 + 1;\n            puVar5 = puVar5 + 1;\n        }\n        fcn.0101ac50(0, var_78h);\n    }\n    else {\n        uVar1 = fcn.0101ad30(0x2e, 0, &fcn.0101e970::var_40h);\n        *(param_1 + 0xc) = uVar1;\n        uVar1 = fcn.0101ad30(0x2c, 0, &fcn.0101e970::var_40h);\n        *(param_1 + 0xe) = uVar1;\n    }\n    *in_FS_OFFSET = var_ch_3;\n    auStack216[1] = 0x101eb28;\n    fcn.010247f4(in_stack_ffffff30);\n    return;\n}\n",
        "token_count": 932
    },
    "0101f1b0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nint32_t __fastcall fcn.0101f1b0(uint param_1)\n\n{\n    int32_t iVar1;\n    uint var_4h;\n    \n    iVar1 = fcn.0101e1e0(param_1);\n    return iVar1 + 0x14;\n}\n",
        "token_count": 80
    },
    "0101f1d0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nint32_t __fastcall fcn.0101f1d0(uint param_1)\n\n{\n    int32_t iVar1;\n    uint var_4h;\n    \n    iVar1 = fcn.0101e1e0(param_1);\n    return iVar1 + 0x10;\n}\n",
        "token_count": 80
    },
    "0101fa60": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0101fa60(int32_t arg_8h)\n\n{\n    char cVar1;\n    uint32_t uVar2;\n    uint uVar3;\n    uint uVar4;\n    uint32_t *puVar5;\n    int32_t in_ECX;\n    int32_t *in_FS_OFFSET;\n    uchar *arg_8h_00;\n    uchar *arg_8h_01;\n    uint var_14h;\n    uchar var_eh;\n    uchar var_dh;\n    int32_t var_ch;\n    uint uStack12;\n    uint uStack8;\n    \n    uStack8 = 0xffffffff;\n    uStack12 = 0x103fe90;\n    var_ch = *in_FS_OFFSET;\n    uVar2 = *0x105b174 ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    if (in_ECX != arg_8h) {\n        arg_8h_01 = &var_dh;\n        uVar3 = fcn.01021110(arg_8h_01);\n        arg_8h_00 = &var_eh;\n        uVar4 = fcn.01021110(arg_8h_00);\n        cVar1 = fcn.0101ac40(uVar4, arg_8h_00, uVar3, arg_8h_01, uVar2);\n        if ((cVar1 == '\\0') || (puVar5 = fcn.0101f1b0(),  *puVar5 < 8)) {\n            fcn.0101f4e0(1, 0);\n            uVar3 = fcn.0101af20(arg_8h);\n            fcn.0101d3a0(uVar3);\n        }\n        else {\n            fcn.0101c670(arg_8h);\n        }\n    }\n    *in_FS_OFFSET = var_ch;\n    return in_ECX;\n}\n",
        "token_count": 425
    },
    "0101fb40": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0101fb40(int32_t arg_8h, int32_t arg_ch, uint arg_10h)\n\n{\n    char cVar1;\n    int32_t arg_8h_00;\n    int32_t iVar2;\n    uint arg_8h_01;\n    int32_t in_ECX;\n    int32_t arg_10h_00;\n    uint var_4h;\n    \n    fcn.0101d520(arg_ch);\n    arg_8h_00 = fcn.0101d550(arg_ch, arg_10h);\n    if (in_ECX == arg_8h) {\n        fcn.01020f00(arg_ch + arg_8h_00);\n        fcn.01020f30(0, arg_ch);\n    }\n    else {\n        cVar1 = fcn.0101e700(arg_8h_00, 0);\n        if (cVar1 != '\\0') {\n            arg_10h_00 = arg_8h_00;\n            iVar2 = fcn.0101f110();\n            iVar2 = iVar2 + arg_ch * 2;\n            arg_8h_01 = fcn.0101f110();\n            fcn.0101ffd0(arg_8h_01, iVar2, arg_10h_00);\n            fcn.0101db50(arg_8h_00);\n        }\n    }\n    return in_ECX;\n}\n",
        "token_count": 318
    },
    "0101fc40": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0101fc40(uint arg_8h)\n\n{\n    uint arg_ch;\n    uint var_4h;\n    \n    arg_ch = fcn.01021360(arg_8h);\n    fcn.0101fc70(arg_8h, arg_ch);\n    return;\n}\n",
        "token_count": 66
    },
    "0101fc70": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0101fc70(int32_t arg_8h, uint arg_ch)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uint arg_8h_00;\n    uint in_ECX;\n    uint arg_10h;\n    uint var_4h;\n    \n    cVar1 = fcn.0101eb90(arg_8h);\n    if (cVar1 == '\\0') {\n        cVar1 = fcn.0101e700(arg_ch, 0);\n        if (cVar1 != '\\0') {\n            arg_10h = arg_ch;\n            arg_8h_00 = fcn.0101f110();\n            fcn.0101ffd0(arg_8h_00, arg_8h, arg_10h);\n            fcn.0101db50(arg_ch);\n        }\n    }\n    else {\n        iVar2 = fcn.0101f110();\n        in_ECX = fcn.0101fb40(in_ECX, arg_8h - iVar2 >> 1, arg_ch);\n    }\n    return in_ECX;\n}\n",
        "token_count": 243
    },
    "010213b0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.010213b0(uint param_1)\n\n{\n    uint var_4h;\n    \n    fcn.01021410(param_1);\n    return;\n}\n",
        "token_count": 40
    },
    "010213d0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.010213d0(uint param_1)\n\n{\n    uint var_4h;\n    \n    fcn.01021420(param_1);\n    return;\n}\n",
        "token_count": 40
    },
    "01021790": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1h\n\nuint __cdecl fcn.01021790(uint arg_8h)\n\n{\n    uint arg_8h_00;\n    uint in_ECX;\n    uint var_8h;\n    uint var_1h;\n    \n    arg_8h_00 = fcn.010217c0(&var_1h, in_ECX);\n    fcn.0101b3c0(arg_8h_00);\n    return arg_8h;\n}\n",
        "token_count": 113
    },
    "01021ac0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.01021ac0(uint arg_8h)\n\n{\n    uint in_stack_00000008;\n    \n    fcn.01029c1a(arg_8h, in_stack_00000008);\n    return;\n}\n",
        "token_count": 53
    },
    "01021ae0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.01021ae0(uint arg_8h, uint noname_1, uint arg_10h)\n\n{\n    fcn.01029c61(arg_8h, noname_1, arg_10h);\n    return;\n}\n",
        "token_count": 57
    },
    "01021b00": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.01021b00(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    uint uVar1;\n    uint var_8h;\n    uint var_4h;\n    \n    fcn.0101af30();\n    uVar1 = fcn.01021a70(arg_8h, arg_ch, arg_10h, 0, &arg_14h);\n    return uVar1;\n}\n",
        "token_count": 105
    },
    "01025357": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x01025367)\n// WARNING: Removing unreachable block (ram,0x01025368)\n// WARNING: Removing unreachable block (ram,0x0102536e)\n// WARNING: Removing unreachable block (ram,0x01025377)\n// WARNING: Removing unreachable block (ram,0x0102537e)\n\nvoid fcn.01025357(void)\n\n{\n    return;\n}\n",
        "token_count": 92
    },
    "0102a8e9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __fastcall fcn.0102a8e9(int32_t param_1)\n\n{\n    int32_t *arg_8h;\n    int32_t iVar1;\n    uint uVar2;\n    \n    arg_8h = param_1 + 0x28;\n    if (*(param_1 + 0x31) != '*') {\n        uVar2 = fcn.0102a667(arg_8h);\n        return uVar2;\n    }\n    *(param_1 + 0x14) = *(param_1 + 0x14) + 4;\n    iVar1 = *(*(param_1 + 0x14) + -4);\n    *arg_8h = iVar1;\n    if (iVar1 < 0) {\n        *arg_8h = -1;\n    }\n    return CONCAT31(iVar1 >> 8, 1);\n}\n",
        "token_count": 193
    },
    "0102ac8f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __fastcall fcn.0102ac8f(int32_t param_1)\n\n{\n    int32_t *arg_8h;\n    uint uVar1;\n    int32_t iVar2;\n    \n    arg_8h = param_1 + 0x24;\n    if (*(param_1 + 0x31) != '*') {\n        uVar1 = fcn.0102a667(arg_8h);\n        return uVar1;\n    }\n    *(param_1 + 0x14) = *(param_1 + 0x14) + 4;\n    iVar2 = *(*(param_1 + 0x14) + -4);\n    *arg_8h = iVar2;\n    if (iVar2 < 0) {\n        *(param_1 + 0x20) = *(param_1 + 0x20) | 4;\n        iVar2 = -iVar2;\n        *arg_8h = iVar2;\n    }\n    return CONCAT31(iVar2 >> 8, 1);\n}\n",
        "token_count": 226
    },
    "0102b682": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0102b682(int32_t lpCriticalSection)\n\n{\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(lpCriticalSection * 0x18 + 0x10fb640);\n    return;\n}\n",
        "token_count": 49
    },
    "0102b6ca": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0102b6ca(int32_t lpCriticalSection)\n\n{\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(lpCriticalSection * 0x18 + 0x10fb640);\n    return;\n}\n",
        "token_count": 51
    },
    "0102bf25": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0102bf25(int32_t lpCriticalSection)\n\n{\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(lpCriticalSection + 0x20);\n    return;\n}\n",
        "token_count": 42
    },
    "0102bf39": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0102bf39(int32_t lpCriticalSection)\n\n{\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(lpCriticalSection + 0x20);\n    return;\n}\n",
        "token_count": 43
    },
    "0102dc4d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0102dc4d(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t in_ECX;\n    \n    fcn.0102dc0c();\n    iVar1 = fcn.0102dc8c(in_ECX + 8, arg_8h * 2);\n    if (iVar1 == 0) {\n        *(in_ECX + 0x14) = 1;\n        iVar1 = 0;\n        *(in_ECX + 0xc) = arg_8h;\n    }\n    else {\n        *(in_ECX + 0xc) = 0;\n        *(in_ECX + 0x14) = 0;\n    }\n    return iVar1;\n}\n",
        "token_count": 166
    },
    "0103074b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0103074b(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    uint arg_ch_00;\n    uint arg_10h_00;\n    uint arg_18h;\n    \n    arg_18h = 1;\n    fcn.0102d2f7(&stack0xffffffe8, arg_8h, arg_ch);\n    fcn.0102ec6b(0, arg_ch_00, arg_10h_00, arg_10h, arg_18h);\n    return;\n}\n",
        "token_count": 124
    },
    "010331b2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.010331b2(void)\n\n{\n    fcn.01033397(0, \"AreFileApisANSI\", 0x10508f0, \"AreFileApisANSI\");\n    return;\n}\n",
        "token_count": 48
    },
    "010331cc": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.010331cc(void)\n\n{\n    fcn.01033397(1, \"CompareStringEx\", 0x1050904, \"CompareStringEx\");\n    return;\n}\n",
        "token_count": 42
    },
    "010331e6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.010331e6(void)\n\n{\n    fcn.01033397(2, \"EnumSystemLocalesEx\", 0x105091c, \"EnumSystemLocalesEx\");\n    return;\n}\n",
        "token_count": 47
    },
    "01033200": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.01033200(void)\n\n{\n    fcn.01033397(8, \"GetDateFormatEx\", 0x1050984, \"GetDateFormatEx\");\n    return;\n}\n",
        "token_count": 42
    },
    "0103321a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.0103321a(void)\n\n{\n    fcn.01033397(0xb, \"GetLocaleInfoEx\", 0x105099c, \"GetLocaleInfoEx\");\n    return;\n}\n",
        "token_count": 46
    },
    "01033234": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.01033234(void)\n\n{\n    fcn.01033397(0xe, \"GetTimeFormatEx\", 0x10509b4, \"GetTimeFormatEx\");\n    return;\n}\n",
        "token_count": 46
    },
    "0103324e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.0103324e(void)\n\n{\n    fcn.01033397(0xf, \"GetUserDefaultLocaleName\", 0x10509cc, \"GetUserDefaultLocaleName\");\n    return;\n}\n",
        "token_count": 48
    },
    "01033268": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.01033268(void)\n\n{\n    fcn.01033397(0x13, \"IsValidLocaleName\", 0x1050a14, \"IsValidLocaleName\");\n    return;\n}\n",
        "token_count": 45
    },
    "01033282": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.01033282(void)\n\n{\n    fcn.01033397(0x15, \"LCIDToLocaleName\", 0x1050a48, \"LCIDToLocaleName\");\n    return;\n}\n",
        "token_count": 49
    },
    "0103329c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.0103329c(void)\n\n{\n    fcn.01033397(0x14, \"LCMapStringEx\", 0x1050a30, \"LCMapStringEx\");\n    return;\n}\n",
        "token_count": 48
    },
    "010332b6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.010332b6(void)\n\n{\n    fcn.01033397(0x16, \"LocaleNameToLCID\", 0x1050a64, \"LocaleNameToLCID\");\n    return;\n}\n",
        "token_count": 50
    },
    "01037743": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.01037743(int16_t *arg_8h, int32_t arg_ch, uint noname_2, uint arg_14h)\n\n{\n    int32_t iVar1;\n    uint32_t arg_8h_00;\n    uint uVar2;\n    int32_t *piVar3;\n    \n    if (arg_8h == NULL) {\n        fcn.0102dc0c();\n        *(arg_ch + 8) = 0;\n        *(arg_ch + 0xc) = 0;\n    }\n    else {\n        if (*arg_8h != 0) {\n            arg_8h_00 = fcn.0103746b(arg_14h, 0, arg_8h, 0xffffffff, 0, 0, 0, 0);\n            if (arg_8h_00 == 0) {\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                fcn.0102bd3e(uVar2);\n                piVar3 = fcn.0102bd74();\n                return *piVar3;\n            }\n            if ((*(arg_ch + 0xc) <= arg_8h_00 && arg_8h_00 != *(arg_ch + 0xc)) &&\n               (iVar1 = fcn.01037d48(arg_8h_00),  iVar1 != 0)) {\n                return iVar1;\n            }\n            iVar1 = fcn.0103746b(arg_14h, 0, arg_8h, 0xffffffff, *(arg_ch + 8), *(arg_ch + 0xc), 0, 0);\n            if (iVar1 == 0) {\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                fcn.0102bd3e(uVar2);\n                piVar3 = fcn.0102bd74();\n                return *piVar3;\n            }\n            *(arg_ch + 0x10) = iVar1 + -1;\n            return 0;\n        }\n        if ((*(arg_ch + 0xc) == 0) && (iVar1 = fcn.01037d48(1),  iVar1 != 0)) {\n            return iVar1;\n        }\n        **(arg_ch + 8) = 0;\n    }\n    *(arg_ch + 0x10) = 0;\n    return 0;\n}\n",
        "token_count": 529
    },
    "01037d48": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.01037d48(uint arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t in_ECX;\n    \n    fcn.0102dc0c();\n    iVar1 = fcn.0102dc8c(in_ECX + 8, arg_8h);\n    if (iVar1 == 0) {\n        *(in_ECX + 0x14) = 1;\n        iVar1 = 0;\n        *(in_ECX + 0xc) = arg_8h;\n    }\n    else {\n        *(in_ECX + 0xc) = 0;\n        *(in_ECX + 0x14) = 0;\n    }\n    return iVar1;\n}\n",
        "token_count": 160
    },
    "0102650a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0102650a(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    uint in_EAX;\n    uint uVar1;\n    uint var_8h;\n    uint var_4h;\n    \n    uVar1 = fcn.01027116(arg_8h, arg_ch, arg_10h, arg_14h, in_EAX, 0, 0, 0);\n    return uVar1;\n}\n",
        "token_count": 110
    },
    "01021c3c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.01021c3c(int32_t *param_1)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = *param_1;\n    if (iVar1 != 0) {\n        if (iVar1 < 8) {\n            fcn.01023b03(iVar1 * 0x18 + 0x10fae98);\n        }\n        return;\n    }\n    fcn.0102b6ca(4);\n    return;\n}\n",
        "token_count": 106
    },
    "0101c360": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0101c360(uint param_1)\n\n{\n    uint32_t uVar1;\n    int32_t *in_FS_OFFSET;\n    uint var_10h;\n    int32_t var_ch;\n    uint uStack12;\n    uint uStack8;\n    \n    uStack8 = 0xffffffff;\n    uStack12 = 0x103feb0;\n    var_ch = *in_FS_OFFSET;\n    uVar1 = *0x105b174 ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    fcn.01022471(param_1);\n    fcn.0101c150(uVar1);\n    fcn.0101c150();\n    fcn.0101c150();\n    fcn.0101c150();\n    fcn.0101c150();\n    fcn.0101c150();\n    fcn.01021c3c();\n    *in_FS_OFFSET = var_ch;\n    return;\n}\n",
        "token_count": 210
    },
    "0101d550": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.0101d550(int32_t arg_8h, uint32_t arg_ch)\n\n{\n    int32_t *piVar1;\n    uint32_t uVar2;\n    uint var_8h;\n    uint var_4h;\n    \n    piVar1 = fcn.0101f1d0();\n    uVar2 = *piVar1 - arg_8h;\n    if (arg_ch <= uVar2) {\n        uVar2 = arg_ch;\n    }\n    return uVar2;\n}\n",
        "token_count": 118
    },
    "01023b11": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.01023b11(int32_t arg_8h)\n\n{\n    if ((arg_8h != 0) && (*(arg_8h + -8) == 0xdddd)) {\n        fcn.0102d1c2(arg_8h + -8);\n    }\n    return;\n}\n",
        "token_count": 72
    },
    "0103ea8d": {
        "rules": [
            "create or open file"
        ],
        "decompiled_code": "\nvoid fcn.0103ea8d(void)\n\n{\n    *0x105baa0 = (*_sym.imp.KERNEL32.dll_CreateFileW)(L\"CONOUT$\", 0x40000000, 3, 0, 3, 0, 0);\n    return;\n}\n",
        "token_count": 65
    },
    "0102bdf6": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nint32_t fcn.0102bdf6(uint32_t param_1)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    \n    if (param_1 < 0xffffffe1) {\n        if (param_1 == 0) {\n            param_1 = 1;\n        }\n        do {\n            iVar1 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(*0x10fbbe0, 0, param_1);\n            if (iVar1 != 0) {\n                return iVar1;\n            }\n            iVar1 = fcn.0103383a();\n        } while ((iVar1 != 0) && (iVar1 = fcn.0102dcce(param_1),  iVar1 != 0));\n    }\n    puVar2 = fcn.0102bd74();\n    *puVar2 = 0xc;\n    return 0;\n}\n",
        "token_count": 196
    },
    "01038d81": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nint32_t fcn.01038d81(uint8_t *param_1, uint32_t param_2, uint32_t *param_3)\n\n{\n    uint8_t uVar1;\n    int32_t iVar2;\n    uint8_t uVar3;\n    int32_t iVar4;\n    \n    if (param_1 == NULL) {\n        param_2 = 0;\n    }\n    else {\n        if (param_2 != 0) {\n            if ((param_2 & 0xffffff80) == 0) {\n                *param_1 = param_2;\n                return 1;\n            }\n            if ((param_2 & 0xfffff800) == 0) {\n                uVar3 = 0xc0;\n                iVar4 = 1;\n                iVar2 = iVar4;\n            }\n            else if ((param_2 & 0xffff0000) == 0) {\n                if ((0xd7ff < param_2) && (param_2 < 0xe000)) {\ncode_r0x01038d55:\n                    iVar2 = fcn.01038d62(param_3);\n                    return iVar2;\n                }\n                iVar4 = 2;\n                uVar3 = 0xe0;\n                iVar2 = iVar4;\n            }\n            else {\n                if (((param_2 & 0xffe00000) != 0) || (0x10ffff < param_2)) goto code_r0x01038d55;\n                iVar4 = 3;\n                uVar3 = 0xf0;\n                iVar2 = iVar4;\n            }\n            do {\n                uVar1 = param_2;\n                param_2 = param_2 >> 6;\n                param_1[iVar4] = uVar1 & 0x3f | 0x80;\n                iVar4 = iVar4 + -1;\n            } while (iVar4 != 0);\n            *param_1 = param_2 | uVar3;\n            *param_3 = 0;\n            param_3[1] = 0;\n            return iVar2 + 1;\n        }\n        *param_1 = param_2;\n    }\n    *param_3 = param_2;\n    param_3[1] = param_2;\n    return 1;\n}\n",
        "token_count": 497
    }
}