{
    "009f4521": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.009f4521(code **param_1)\n\n{\n    *param_1 = vtable.std::exception.0;\n    if (param_1[2] != NULL) {\n        fcn.009f6540(param_1[1]);\n    }\n    return;\n}\n",
        "token_count": 65
    },
    "00401073": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.00401073(int32_t param_1, char param_2, int32_t param_3)\n\n{\n    uint arg_10h;\n    \n    if ((param_2 != '\\0') && (7 < *(param_1 + 0x18))) {\n        arg_10h = *(param_1 + 4);\n        if (param_3 != 0) {\n            fcn.00401041(param_1 + 4, 8, arg_10h, param_3);\n        }\n        fcn.009f4787(arg_10h);\n    }\n    *(param_1 + 0x18) = 7;\n    fcn.00401181(param_3);\n    return;\n}\n",
        "token_count": 162
    },
    "004010e6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004010e6(uint *arg_8h, uint32_t arg_ch)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    int32_t in_ECX;\n    uint *puVar3;\n    uint var_4h;\n    \n    uVar1 = arg_8h;\n    if (*(in_ECX + 0x14) < arg_8h) {\n        fcn.009f4264();\n    }\n    uVar2 = *(in_ECX + 0x14) - arg_8h;\n    if (uVar2 < arg_ch) {\n        arg_ch = uVar2;\n    }\n    if (arg_ch != 0) {\n        puVar3 = in_ECX + 4;\n        arg_8h = puVar3;\n        if (7 < *(in_ECX + 0x18)) {\n            arg_8h = *puVar3;\n            puVar3 = *puVar3;\n        }\n        fcn.00401186(puVar3 + uVar1 * 2, *(in_ECX + 0x18) - uVar1, arg_8h + (uVar1 + arg_ch) * 2, uVar2 - arg_ch);\n        fcn.00401181(*(in_ECX + 0x14) - arg_ch);\n    }\n    return;\n}\n",
        "token_count": 302
    },
    "00401113": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00401113(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    int32_t unaff_EBP;\n    uint var_14h;\n    uint var_4h;\n    \n    fcn.009f4f7f(8);\n    *(unaff_EBP + -0x14) = *(unaff_EBP + 8);\n    *(unaff_EBP + -4) = 0;\n    while (*(unaff_EBP + 0xc) != 0) {\n        fcn.00401082();\n        *(unaff_EBP + 0xc) = *(unaff_EBP + 0xc) + -1;\n        *(unaff_EBP + 8) = *(unaff_EBP + 8) + 0x1c;\n    }\n    *(unaff_EBP + -4) = 0xffffffff;\n    fcn.009f5024();\n    return;\n}\n",
        "token_count": 214
    },
    "00401118": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00401118(uint32_t arg_8h)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    code *var_ch;\n    \n    if (arg_8h == 0) {\n        uVar2 = 0;\n    }\n    else {\n        uVar2 = arg_8h;\n        if (0xffffffff / arg_8h < 2) {\n            arg_8h = 0;\n            fcn.009f43f9(&arg_8h);\n            var_ch = vtable.std::bad_alloc.0;\n            fcn.009f4a72(&var_ch, 0xa37028);\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n    }\n    fcn.009f4a0d(uVar2 * 2);\n    return;\n}\n",
        "token_count": 191
    },
    "0040114a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040114a(uint32_t arg_8h, uint32_t arg_ch)\n\n{\n    uint *puVar1;\n    uint32_t uVar2;\n    int32_t in_ECX;\n    uint *puVar3;\n    \n    if (*(in_ECX + 0x14) < arg_8h) {\n        fcn.009f4264();\n    }\n    uVar2 = *(in_ECX + 0x14) - arg_8h;\n    if (uVar2 < arg_ch) {\n        arg_ch = uVar2;\n    }\n    if (arg_ch != 0) {\n        puVar3 = in_ECX + 4;\n        puVar1 = puVar3;\n        if (0xf < *(in_ECX + 0x18)) {\n            puVar1 = *puVar3;\n            puVar3 = *puVar3;\n        }\n        fcn.0040128f(puVar3 + arg_8h, *(in_ECX + 0x18) - arg_8h, puVar1 + arg_ch + arg_8h, uVar2 - arg_ch);\n        fcn.00401253(*(in_ECX + 0x14) - arg_ch);\n    }\n    return;\n}\n",
        "token_count": 279
    },
    "004011ae": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nbool __thiscall fcn.004011ae(int32_t param_1, uint32_t param_2, char param_3)\n\n{\n    uint32_t uVar1;\n    \n    if (param_2 == 0xffffffff) {\n        fcn.009f422c();\n    }\n    if (*(param_1 + 0x18) < param_2) {\n        fcn.0040119a(param_2, *(param_1 + 0x14));\n    }\n    else if ((param_3 == '\\0') || (0xf < param_2)) {\n        if (param_2 == 0) {\n            fcn.00401253(0);\n        }\n    }\n    else {\n        uVar1 = *(param_1 + 0x14);\n        if (param_2 < *(param_1 + 0x14)) {\n            uVar1 = param_2;\n        }\n        fcn.004011d6(1, uVar1);\n    }\n    return param_2 != 0;\n}\n",
        "token_count": 225
    },
    "004011d6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.004011d6(int32_t param_1, char param_2, int32_t param_3)\n\n{\n    uint arg_10h;\n    \n    if ((param_2 != '\\0') && (0xf < *(param_1 + 0x18))) {\n        arg_10h = *(param_1 + 4);\n        if (param_3 != 0) {\n            fcn.0040121c(param_1 + 4, 0x10, arg_10h, param_3);\n        }\n        fcn.009f4787(arg_10h);\n    }\n    *(param_1 + 0x18) = 0xf;\n    fcn.00401253(param_3);\n    return;\n}\n",
        "token_count": 168
    },
    "004011ea": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint32_t __thiscall fcn.004011ea(int32_t param_1, uint *param_2)\n\n{\n    uint *in_EAX;\n    uint *puVar1;\n    \n    if (param_2 != NULL) {\n        in_EAX = param_1 + 4;\n        puVar1 = in_EAX;\n        if (0xf < *(param_1 + 0x18)) {\n            puVar1 = *in_EAX;\n        }\n        if (puVar1 <= param_2) {\n            if (0xf < *(param_1 + 0x18)) {\n                in_EAX = *in_EAX;\n            }\n            if (param_2 < *(param_1 + 0x14) + in_EAX) {\n                return CONCAT31(in_EAX >> 8, 1);\n            }\n        }\n    }\n    return in_EAX & 0xffffff00;\n}\n",
        "token_count": 198
    },
    "00401235": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00401235(uint32_t arg_8h)\n\n{\n    code *pcVar1;\n    uint32_t arg_8h_00;\n    code *var_ch;\n    \n    if (arg_8h == 0) {\n        arg_8h_00 = 0;\n    }\n    else {\n        arg_8h_00 = arg_8h;\n        if (0xffffffff / arg_8h == 0) {\n            arg_8h = 0;\n            fcn.009f43f9(&arg_8h);\n            var_ch = vtable.std::bad_alloc.0;\n            fcn.009f4a72(&var_ch, 0xa37028);\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n    }\n    fcn.009f4a0d(arg_8h_00);\n    return;\n}\n",
        "token_count": 200
    },
    "00401285": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nbool __thiscall fcn.00401285(int32_t param_1, uint32_t param_2, char param_3)\n\n{\n    uint32_t uVar1;\n    \n    if (0x7ffffffe < param_2) {\n        fcn.009f422c();\n    }\n    if (*(param_1 + 0x18) < param_2) {\n        fcn.00401276(param_2, *(param_1 + 0x14));\n    }\n    else if ((param_3 == '\\0') || (7 < param_2)) {\n        if (param_2 == 0) {\n            fcn.00401181(0);\n        }\n    }\n    else {\n        uVar1 = *(param_1 + 0x14);\n        if (param_2 < *(param_1 + 0x14)) {\n            uVar1 = param_2;\n        }\n        fcn.00401073(1, uVar1);\n    }\n    return param_2 != 0;\n}\n",
        "token_count": 224
    },
    "004012fd": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint32_t __thiscall fcn.004012fd(int32_t param_1, uint *param_2)\n\n{\n    uint *in_EAX;\n    uint *puVar1;\n    \n    if (param_2 != NULL) {\n        in_EAX = param_1 + 4;\n        puVar1 = in_EAX;\n        if (7 < *(param_1 + 0x18)) {\n            puVar1 = *in_EAX;\n        }\n        if (puVar1 <= param_2) {\n            if (7 < *(param_1 + 0x18)) {\n                in_EAX = *in_EAX;\n            }\n            in_EAX = in_EAX + *(param_1 + 0x14) * 2;\n            if (param_2 < in_EAX) {\n                return CONCAT31(in_EAX >> 8, 1);\n            }\n        }\n    }\n    return in_EAX & 0xffffff00;\n}\n",
        "token_count": 208
    },
    "009f4c4d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint __cdecl\nfcn.009f4c4d(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint noname_4, uint noname_5, uint noname_6, \n            uint noname_7, uint noname_8, uint noname_9, uint noname_10, uint noname_11, uint noname_12, uint noname_13\n            , uint noname_14, uint arg_8h, uint arg_ch, uint noname_17, uint noname_18, uint arg_18h, uint arg_1ch, \n            uint arg_20h)\n\n{\n    int32_t iVar1;\n    int32_t *in_FS_OFFSET;\n    uint *var_8h_3;\n    uint *var_ch_2;\n    uint var_10h_2;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    uint var_38h;\n    uint *var_34h;\n    uint var_30h;\n    code *var_2ch;\n    uint *var_28h_2;\n    code *pcStack40;\n    uint32_t uStack36;\n    uint uStack32;\n    uint *puStack28;\n    uint uStack24;\n    uint uStack20;\n    uchar *puStack16;\n    uchar *var_8h_2;\n    int32_t var_4h_2;\n    \n    var_8h_2 = &stack0xfffffffc;\n    puStack16 = &stack0xffffffc0;\n    if (var_8h_3 == 0x123) {\n        *var_ch_2 = 0x9f4cf8;\n        var_38h = 1;\n    }\n    else {\n        pcStack40 = fcn.009f4d24;\n        uStack36 = *0xa3bf94 ^ &fcn.009f4c4d::var_28h_2;\n        uStack32 = var_24h;\n        puStack28 = var_ch_2;\n        uStack24 = var_20h;\n        uStack20 = var_1ch;\n        var_4h_2 = 0;\n        var_28h_2 = *in_FS_OFFSET;\n        *in_FS_OFFSET = &fcn.009f4c4d::var_28h_2;\n        var_34h = var_8h_3;\n        var_30h = var_10h_2;\n        iVar1 = fcn.009f6d0e();\n        var_2ch = *(iVar1 + 0x80);\n        (*var_2ch)(*var_8h_3, &fcn.009f4c4d::var_34h);\n        var_38h = 0;\n        if (var_4h_2 == 0) {\n            *in_FS_OFFSET = var_28h_2;\n        }\n        else {\n            *var_28h_2 = **in_FS_OFFSET;\n            *in_FS_OFFSET = var_28h_2;\n        }\n    }\n    return var_38h;\n}\n",
        "token_count": 736
    },
    "009f4f3d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f4f3d(uint arg_8h)\n\n{\n    uint in_EAX;\n    uint uVar1;\n    int32_t in_ECX;\n    uint in_EDX;\n    uint unaff_EBX;\n    uint unaff_EBP;\n    uint unaff_ESI;\n    uint unaff_EDI;\n    ushort in_ES;\n    ushort in_CS;\n    ushort in_SS;\n    ushort in_DS;\n    ushort in_FS;\n    ushort in_GS;\n    uint8_t in_AF;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    uint unaff_retaddr;\n    int32_t var_328h;\n    uint var_324h;\n    uint var_320h;\n    \n    if (in_ECX == *0xa3bf94) {\n        return;\n    }\n    *0xf15050 = (in_NT & 1) * 0x4000 | SBORROW4(&stack0xfffffffc, 0x328) * 0x800 | (in_IF & 1) * 0x200 |\n                (in_TF & 1) * 0x100 | (&var_328h < 0) * 0x80 | (*0x10 == 0x32c) * 0x40 | (in_AF & 1) * 0x10 |\n                ((POPCOUNT(&var_328h & 0xff) & 1U) == 0) * 4 | &stack0xfffffffc < 0x328 | (in_ID & 1) * 0x200000 |\n                (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n    *0xf15054 = &arg_8h;\n    *0xf14f90 = 0x10001;\n    *0xf14f38 = 0xc0000409;\n    *0xf14f3c = 1;\n    var_328h = *0xa3bf94;\n    var_324h = *0xa3bf98;\n    *0xf14f44 = unaff_retaddr;\n    *0xf1501c = in_GS;\n    *0xf15020 = in_FS;\n    *0xf15024 = in_ES;\n    *0xf15028 = in_DS;\n    *0xf1502c = unaff_EDI;\n    *0xf15030 = unaff_ESI;\n    *0xf15034 = unaff_EBX;\n    *0xf15038 = in_EDX;\n    *0xf1503c = in_ECX;\n    *0xf15040 = in_EAX;\n    *0xf15044 = unaff_EBP;\n    *0xf15048 = unaff_retaddr;\n    *0xf1504c = in_CS;\n    *0xf15058 = in_SS;\n    *0xf14f88 = (**0xf183c4)();\n    fcn.009f69e8(1);\n    (**0xf183c0)(0);\n    (**0xf183bc)(0xa310d0);\n    if (*0xf14f88 == 0) {\n        fcn.009f69e8(1);\n    }\n    uVar1 = (**0xf183b8)(0xc0000409);\n    (**0xf183b4)(uVar1);\n    return;\n}\n",
        "token_count": 790
    },
    "null": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "009f7317": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.009f7317(uint arg_8h, uint noname_1, uint arg_10h, uint arg_14h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t *piVar4;\n    int32_t unaff_EBP;\n    int32_t iVar5;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.009f9490(0xa376a0, 0x10);\n    iVar1 = *(unaff_EBP + 0x10);\n    iVar2 = *(unaff_EBP + 8);\n    if (*(iVar1 + 4) < 0x81) {\n        iVar5 = *(iVar2 + 8);\n    }\n    else {\n        iVar5 = *(iVar2 + 8);\n    }\n    *(unaff_EBP + -0x1c) = iVar5;\n    iVar3 = fcn.009f6d0e();\n    *(iVar3 + 0x90) = *(iVar3 + 0x90) + 1;\n    *(unaff_EBP + -4) = 0;\n    while (iVar5 != *(unaff_EBP + 0x14)) {\n        if ((iVar5 < 0) || (*(iVar1 + 4) <= iVar5)) {\n            fcn.009f8452();\n        }\n        iVar3 = iVar5 * 8;\n        piVar4 = *(iVar1 + 8) + iVar3;\n        iVar5 = *piVar4;\n        *(unaff_EBP + -0x20) = iVar5;\n        *(unaff_EBP + -4) = 1;\n        if (piVar4[1] != 0) {\n            *(iVar2 + 8) = iVar5;\n            fcn.009f84a0(*(*(iVar1 + 8) + 4 + iVar3), iVar2, 0x103);\n        }\n        *(unaff_EBP + -4) = 0;\n        *(unaff_EBP + -0x1c) = iVar5;\n    }\n    *(unaff_EBP + -4) = 0xfffffffe;\n    fcn.009f73dd();\n    if (iVar5 != *(unaff_EBP + 0x14)) {\n        fcn.009f8452();\n    }\n    *(iVar2 + 8) = iVar5;\n    fcn.009f94d5();\n    return;\n}\n",
        "token_count": 571
    },
    "009f73dd": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.009f73dd(void)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.009f6d0e();\n    if (0 < *(iVar1 + 0x90)) {\n        iVar1 = fcn.009f6d0e();\n        *(iVar1 + 0x90) = *(iVar1 + 0x90) + -1;\n    }\n    return;\n}\n",
        "token_count": 93
    },
    "009f7a8e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f7a8e(uint noname_0, uint noname_1, uint arg_10h)\n\n{\n    int32_t iVar1;\n    int32_t unaff_EBP;\n    int32_t *unaff_ESI;\n    int32_t unaff_EDI;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_1ch;\n    \n    *(unaff_EDI + -4) = *(unaff_EBP + -0x24);\n    fcn.009f4e8b(*(unaff_EBP + -0x28));\n    iVar1 = fcn.009f6d0e();\n    *(iVar1 + 0x88) = *(unaff_EBP + -0x2c);\n    iVar1 = fcn.009f6d0e();\n    *(iVar1 + 0x8c) = *(unaff_EBP + -0x30);\n    if ((((*unaff_ESI == -0x1f928c9d) && (unaff_ESI[4] == 3)) &&\n        ((iVar1 = unaff_ESI[5],  iVar1 == 0x19930520 || ((iVar1 == 0x19930521 || (iVar1 == 0x19930522)))))) &&\n       ((*(unaff_EBP + -0x34) == 0 && (*(unaff_EBP + -0x1c) != 0)))) {\n        iVar1 = fcn.009f4e64(unaff_ESI[6]);\n        if (iVar1 != 0) {\n            fcn.009f743d(unaff_ESI);\n        }\n    }\n    return;\n}\n",
        "token_count": 391
    },
    "009f8b2e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.009f8b2e(void)\n\n{\n    uint unaff_EBX;\n    uint in_stack_fffffd2c;\n    uint in_stack_fffffd30;\n    uint var_2c8h;\n    \n    fcn.009fca50();\n    fcn.009f8bba(unaff_EBX, in_stack_fffffd2c, in_stack_fffffd30);\n    return;\n}\n",
        "token_count": 92
    },
    "009fc4ee": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nfloat10 fcn.009fc4ee(double param_1)\n\n{\n    double dVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint arg_14h;\n    double dVar6;\n    uchar in_XMM0 [16];\n    double dVar7;\n    double dVar8;\n    uint64_t in_XMM2_Qa;\n    double dVar9;\n    uint32_t uVar11;\n    uchar auVar10 [16];\n    double dVar12;\n    ulong in_XMM6_Qa;\n    double dVar13;\n    double dVar14;\n    double dVar15;\n    double dVar16;\n    double dVar17;\n    uint in_XMM7_Dc;\n    uint in_XMM7_Dd;\n    double dStack12;\n    \n    dVar6 = SUB168(in_XMM0, 0);\n    uVar11 = SUB164(in_XMM0 >> 0x20, 0);\n    uVar3 = uVar11 >> 0xc;\n    auVar10 = pinsrw(ZEXT816(0), 0x2000, 2);\n    uVar2 = uVar3 & 0x7ffff;\n    if (uVar2 - 0x3fb00 < 0x3bb) {\n        iVar4 = (uVar3 & 0xfffc) - 0xfb00;\n        auVar10 = CONCAT88(in_XMM2_Qa & CONCAT44(in_XMM7_Dd, in_XMM7_Dc), *0xa32dd8 & dVar6) | auVar10;\n        iVar5 = iVar4 * 4;\n        dVar9 = SUB168(auVar10, 0);\n        dVar13 = dVar6 * *(iVar4 * 2 + 0xa32540);\n        dVar1 = SQRT(*0xa32de0 - dVar6 * dVar6) * dVar9;\n        dVar7 = dVar13 - dVar1;\n        uVar11 = SUB164(auVar10 >> 0x20, 0);\n        uVar2 = uVar11 & 0x80000000;\n        dVar8 = dVar7 * dVar7;\n        return ((dVar6 - dVar9) * (dVar6 + dVar9)) / (dVar13 + dVar1) +\n               (*0xa32d80 + *0xa32d88 * dVar8) * dVar7 * dVar8 * dVar8 +\n               _str.UUUUUU * dVar7 * dVar8 + (*(iVar5 + 0xa31640) ^ uVar2 << 0x20) +\n               ((*(iVar5 + 0xa31648) ^ SUB168(CONCAT412(uVar11, ZEXT412(uVar2) << 0x20) >> 0x40, 0)) &\n               0xffffffff00000000);\n    }\n    if (uVar2 - 0x3febb < 0x43) {\n        dVar1 = SQRT(*0xa32de0 - dVar6 * dVar6);\n        dVar7 = dVar6 & *0xa32d70;\n        dVar8 = (dVar6 & 0x7fffffffffffffff) - dVar7;\n        dVar9 = *0xa32dd8 & dVar1 | SUB168(auVar10, 0);\n        iVar5 = ((dVar1 << 2) >> 0x30) - 0xfec0;\n        dVar1 = dVar1 * *(iVar5 * 8 + 0xa32540);\n        dVar13 = (dVar7 * dVar9 - dVar1) + dVar8 * dVar9;\n        iVar5 = iVar5 * 0x10;\n        dVar14 = dVar13 * dVar13;\n        auVar10 = pinsrw(0x0, (SUB161(CONCAT412(in_XMM7_Dd, CONCAT48(in_XMM7_Dc, dVar6)) >> 0x3f, 0) & 1) << 0xf, 3);\n        return (((*0xa32d88 * dVar14 + *0xa32d80) * dVar13 * dVar14 * dVar14 +\n                _str.UUUUUU * dVar13 * dVar14 + (*0xa32d40 - *(iVar5 + 0xa31640))) -\n               (((*0xa32de0 - dVar7 * dVar7) - dVar9 * dVar9) - ((dVar6 & 0x7fffffffffffffff) + dVar7) * dVar8) /\n               (dVar1 + dVar1 + dVar13)) + (*0xa32d48 - *(iVar5 + 0xa31648) & 0xffffffff00000000) | SUB168(auVar10, 0);\n    }\n    if (uVar2 - 0x3c300 < 0x3800) {\n        dVar1 = dVar6 * dVar6;\n        dVar7 = dVar6 * dVar6;\n        dVar8 = dVar6 * dVar1;\n        return dVar6 + dVar8 * dVar8 * dVar8 * (*0xa32d90 * dVar1 + *0xa32da0 + *0xa32db0 * dVar1 * dVar1) +\n                       dVar6 * dVar7 * (*0xa32d98 * dVar7 + *0xa32da8 + *0xa32db8 * dVar7 * dVar7);\n    }\n    if (uVar2 - 0x3fefe < 2) {\n        dVar1 = SQRT(*0xa32de0 - dVar6 * dVar6);\n        dVar8 = dVar6 & *0xa32d60;\n        uVar11 = dVar1 >> 0x20;\n        dVar14 = dVar1 & 0xffffffff | uVar11 << 0x20;\n        dVar7 = dVar1 & *0xa32d60;\n        dVar6 = dVar6 - dVar8;\n        dVar12 = SUB168(CONCAT412(uVar11, CONCAT48(SUB84(dVar1, 0), dVar14)) >> 0x40, 0);\n        dVar15 = SUB128(CONCAT84(in_XMM6_Qa, uVar11), 0) << 0x20;\n        dVar1 = (uVar11 << 0x20) * (uVar11 << 0x20);\n        dVar9 = (uVar11 << 0x20) * (uVar11 << 0x20);\n        dVar16 = dVar15 * dVar1;\n        dVar17 = SUB168(CONCAT412(uVar11, ZEXT812(dVar15)) >> 0x40, 0) * dVar9;\n        dVar13 = dVar16 * dVar16 * dVar16;\n        auVar10 = pinsrw(ZEXT816(0), SUB162(in_XMM0 >> 0x30, 0) & 0x8000, 3);\n        return (((*0xa32d40 + (*0xa32dc0 * dVar1 + *0xa32dc8) * dVar16 * dVar16 * dVar13) -\n                ((dVar1 * dVar1 * *0xa32db0 + *0xa32da0 + *0xa32d90 * dVar1) * dVar13 +\n                 (SUB128(CONCAT84(dVar17, (dVar9 * dVar9 * *0xa32db8 + *0xa32da8 + *0xa32d98 * dVar9) * dVar17 >> 0x20)\n                         , 0) << 0x20) +\n                (((((*0xa32de0 - dVar8 * dVar8) - (dVar8 + dVar8) * dVar6) - dVar7 * dVar7) - dVar6 * dVar6) +\n                (dVar14 + dVar14 + (dVar7 - dVar14)) * (dVar7 - dVar14)) / (dVar12 + dVar12))) -\n               (dVar15 - (*0xa32d48 + (dVar15 - *0xa32d48)))) - (dVar15 - *0xa32d48) | SUB168(auVar10, 0);\n    }\n    if (uVar2 < 0x3ff00) {\n        if (0x7fdf < (param_1 >> 0x30 & 0x7ff0) - 0x10) {\n            param_1 = param_1 | param_1 + 0.0;\n        }\n        return param_1;\n    }\n    if ((0x3ff00000 - (uVar11 & 0x7fffffff) | SUB164(in_XMM0, 0)) != 0) {\n        if (((param_1 >> 0x20 & 0x7fffffff) + 0x80100000) - (SUB84(param_1, 0) == 0) < 0) {\n            auVar10 = pinsrw(ZEXT816(0), 0x7ff0, 3);\n            dStack12 = SUB168(auVar10, 0) * 0.0;\n            arg_14h = 0x3d;\n        }\n        else {\n            dStack12 = param_1 + 0.0;\n            arg_14h = 0x3f1;\n        }\n        fcn.00a07afc(&param_1, &param_1, &dStack12, arg_14h);\n        return dStack12;\n    }\n    return *0xa32d48 + *0xa32d40 | ~*0xa32dd0 & dVar6;\n}\n",
        "token_count": 2194
    },
    "009feab0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\n// WARNING: Possible PIC construction at 0x009feba3: Changing call to branch\n// WARNING: Removing unreachable block (ram,0x009feba8)\n// WARNING: Removing unreachable block (ram,0x009febd6)\n// WARNING: Removing unreachable block (ram,0x009febae)\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.009feab0(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t *piVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    code *pcVar4;\n    int32_t unaff_EBP;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.009f9490(0xa379a8, 0x18);\n    fcn.009ff7cd(8);\n    *(unaff_EBP + -4) = 0;\n    if (*0xf15298 != 1) {\n        *0xf15294 = 1;\n        *0xf15290 = *(unaff_EBP + 0x10);\n        if (*(unaff_EBP + 0xc) == 0) {\n            piVar1 = fcn.009f6a85(*0xf15b5c);\n            *(unaff_EBP + -0x28) = piVar1;\n            if (piVar1 != NULL) {\n                piVar2 = fcn.009f6a85(*0xf15b58);\n                *(unaff_EBP + -0x24) = piVar2;\n                *(unaff_EBP + -0x1c) = piVar1;\n                *(unaff_EBP + -0x20) = piVar2;\n                while( true ) {\n                    piVar2 = piVar2 + -1;\n                    *(unaff_EBP + -0x24) = piVar2;\n                    if (piVar2 < piVar1) break;\n                    iVar3 = fcn.009f6a7c();\n                    if (*piVar2 != iVar3) {\n                        if (piVar2 < piVar1) break;\n                        pcVar4 = fcn.009f6a85(*piVar2);\n                        iVar3 = fcn.009f6a7c();\n                        *piVar2 = iVar3;\n                        (*pcVar4)();\n                        iVar3 = fcn.009f6a85(*0xf15b5c);\n                        piVar1 = fcn.009f6a85(*0xf15b58);\n                        if ((*(unaff_EBP + -0x1c) != iVar3) || (*(unaff_EBP + -0x20) != piVar1)) {\n                            *(unaff_EBP + -0x1c) = iVar3;\n                            *(unaff_EBP + -0x28) = iVar3;\n                            *(unaff_EBP + -0x20) = piVar1;\n                            *(unaff_EBP + -0x24) = piVar1;\n                            piVar2 = piVar1;\n                        }\n                        piVar1 = *(unaff_EBP + -0x28);\n                    }\n                }\n            }\n            fcn.009fe972(0xa30940);\n        }\n        fcn.009fe972(0xa30b48);\n    }\n    *(unaff_EBP + -4) = 0xfffffffe;\n    if (*(unaff_EBP + 0x10) != 0) {\n        fcn.009ff6db(8);\n    }\n    return;\n}\n",
        "token_count": 803
    },
    "00a0ebab": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl fcn.00a0ebab(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t iVar1;\n    uint unaff_EBX;\n    uint var_28h;\n    uint var_24h;\n    int32_t var_1ch;\n    uint var_18h;\n    uint32_t var_14h;\n    uint var_10h;\n    uint32_t var_4h;\n    \n    var_4h = *0xa3bf94 ^ &stack0xfffffffc;\n    fcn.009f9ad3(arg_10h);\n    var_14h = fcn.00a1c473(&var_10h, &var_28h, arg_ch, 0, 0, 0, 0, &var_24h);\n    iVar1 = fcn.00a1b33f(&var_10h, arg_8h);\n    if ((var_14h & 3) == 0) {\n        if (iVar1 == 1) {\ncode_r0x00a0ec04:\n            if (var_18h != '\\0') {\n                *(var_1ch + 0x70) = *(var_1ch + 0x70) & 0xfffffffd;\n            }\n            goto code_r0x00a0ec44;\n        }\n        if (iVar1 != 2) {\ncode_r0x00a0ec36:\n            if (var_18h != '\\0') {\n                *(var_1ch + 0x70) = *(var_1ch + 0x70) & 0xfffffffd;\n            }\n            goto code_r0x00a0ec44;\n        }\n    }\n    else if ((var_14h & 1) == 0) {\n        if ((var_14h & 2) == 0) goto code_r0x00a0ec36;\n        goto code_r0x00a0ec04;\n    }\n    if (var_18h != '\\0') {\n        *(var_1ch + 0x70) = *(var_1ch + 0x70) & 0xfffffffd;\n    }\ncode_r0x00a0ec44:\n    fcn.009f4f3d(unaff_EBX);\n    return;\n}\n",
        "token_count": 517
    },
    "00a0ed2a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl fcn.00a0ed2a(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t iVar1;\n    uint unaff_EBX;\n    uint var_28h;\n    uint var_24h;\n    int32_t var_1ch;\n    uint var_18h;\n    uint32_t var_14h;\n    uint var_10h;\n    uint32_t var_4h;\n    \n    var_4h = *0xa3bf94 ^ &stack0xfffffffc;\n    fcn.009f9ad3(arg_10h);\n    var_14h = fcn.00a1c473(&var_10h, &var_28h, arg_ch, 0, 0, 0, 0, &var_24h);\n    iVar1 = fcn.00a1b883(&var_10h, arg_8h);\n    if ((var_14h & 3) == 0) {\n        if (iVar1 == 1) {\ncode_r0x00a0ed83:\n            if (var_18h != '\\0') {\n                *(var_1ch + 0x70) = *(var_1ch + 0x70) & 0xfffffffd;\n            }\n            goto code_r0x00a0edc3;\n        }\n        if (iVar1 != 2) {\ncode_r0x00a0edb5:\n            if (var_18h != '\\0') {\n                *(var_1ch + 0x70) = *(var_1ch + 0x70) & 0xfffffffd;\n            }\n            goto code_r0x00a0edc3;\n        }\n    }\n    else if ((var_14h & 1) == 0) {\n        if ((var_14h & 2) == 0) goto code_r0x00a0edb5;\n        goto code_r0x00a0ed83;\n    }\n    if (var_18h != '\\0') {\n        *(var_1ch + 0x70) = *(var_1ch + 0x70) & 0xfffffffd;\n    }\ncode_r0x00a0edc3:\n    fcn.009f4f3d(unaff_EBX);\n    return;\n}\n",
        "token_count": 520
    },
    "00a0f674": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.00a0f674(void)\n\n{\n    int32_t unaff_EBP;\n    uint var_1ch;\n    \n    if (*(unaff_EBP + -0x1c) != 0) {\n        fcn.009ff6db(0);\n    }\n    return;\n}\n",
        "token_count": 66
    },
    "00a0f955": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.00a0f955(uint arg_8h, uint arg_ch, uint32_t arg_10h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t arg_8h_00;\n    uint uVar3;\n    code *pcVar4;\n    code *pcVar5;\n    uint var_14h;\n    uint var_ch;\n    uint var_8h;\n    int32_t var_4h;\n    \n    iVar1 = fcn.009f6a7c();\n    var_4h = 0;\n    if (*0xf15a0c == 0) {\n        iVar2 = (**0xf184b0)(\"USER32.DLL\");\n        pcVar4 = *0xf183ac;\n        if (iVar2 == 0) {\n            return 0;\n        }\n        arg_8h_00 = (**0xf183ac)(iVar2, \"MessageBoxA\");\n        if (arg_8h_00 == 0) {\n            return 0;\n        }\n        *0xf15a0c = fcn.009f6a0a(arg_8h_00);\n        uVar3 = (*pcVar4)(iVar2, \"GetActiveWindow\");\n        *0xf15a10 = fcn.009f6a0a(uVar3);\n        uVar3 = (*pcVar4)(iVar2, \"GetLastActivePopup\");\n        *0xf15a14 = fcn.009f6a0a(uVar3);\n        uVar3 = (*pcVar4)(iVar2, \"GetUserObjectInformationA\");\n        *0xf15a1c = fcn.009f6a0a(uVar3);\n        if (*0xf15a1c != 0) {\n            uVar3 = (*pcVar4)(iVar2, \"GetProcessWindowStation\");\n            *0xf15a18 = fcn.009f6a0a(uVar3);\n        }\n    }\n    if ((*0xf15a18 != iVar1) && (*0xf15a1c != iVar1)) {\n        pcVar4 = fcn.009f6a85(*0xf15a18);\n        pcVar5 = fcn.009f6a85(*0xf15a1c);\n        if (((pcVar4 != NULL) && (pcVar5 != NULL)) &&\n           (((iVar2 = (*pcVar4)(),  iVar2 == 0 || (iVar2 = (*pcVar5)(iVar2, 1, &var_14h, 0xc, &var_8h),  iVar2 == 0)) ||\n            ((var_ch & 1) == 0)))) {\n            arg_10h = arg_10h | 0x200000;\n            goto code_r0x00a0fa97;\n        }\n    }\n    if ((((*0xf15a10 != iVar1) && (pcVar4 = fcn.009f6a85(*0xf15a10),  pcVar4 != NULL)) &&\n        (var_4h = (*pcVar4)(),  var_4h != 0)) &&\n       ((*0xf15a14 != iVar1 && (pcVar4 = fcn.009f6a85(*0xf15a14),  pcVar4 != NULL)))) {\n        var_4h = (*pcVar4)(var_4h);\n    }\ncode_r0x00a0fa97:\n    pcVar4 = fcn.009f6a85(*0xf15a0c);\n    if (pcVar4 == NULL) {\n        return 0;\n    }\n    uVar3 = (*pcVar4)(var_4h, arg_8h, arg_ch, arg_10h);\n    return uVar3;\n}\n",
        "token_count": 834
    },
    "00a15318": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_8h\n// WARNING: Variable defined which should be unmapped: var_14h\n\nvoid __cdecl\nfcn.00a15318(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, int32_t arg_18h, int32_t arg_1ch, uint arg_20h)\n\n{\n    uint32_t arg_8h_00;\n    code *pcVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint *puVar4;\n    int32_t arg_ch_00;\n    int32_t *in_ECX;\n    uint *arg_8h_01;\n    uint var_14h;\n    int32_t *var_8h;\n    uint var_4h;\n    \n    if (*0xf15a24 == 0) {\n        iVar2 = (**0xf184d0)();\n        if (iVar2 == 0) {\n            iVar2 = (**0xf183d8)();\n            if (iVar2 == 0x78) {\n                *0xf15a24 = 2;\n            }\n            goto code_r0x00a15373;\n        }\n        *0xf15a24 = 1;\n    }\n    else {\ncode_r0x00a15373:\n        var_8h = in_ECX;\n        if ((*0xf15a24 == 2) || (*0xf15a24 == 0)) {\n            iVar2 = 0;\n            if (arg_1ch == 0) {\n                arg_1ch = *(*in_ECX + 0x14);\n            }\n            if (arg_18h == 0) {\n                arg_18h = *(*in_ECX + 4);\n            }\n            arg_ch_00 = fcn.00a1fb50(arg_1ch);\n            if ((arg_ch_00 != -1) &&\n               (((arg_ch_00 == arg_18h ||\n                 (iVar2 = fcn.00a1fb99(arg_18h, arg_ch_00, arg_ch, &arg_10h, 0, 0),  iVar2 != 0)) &&\n                ((**0xf184cc)(),  iVar2 != 0)))) {\n                fcn.009f6540(iVar2);\n            }\n            goto code_r0x00a154c0;\n        }\n        if (*0xf15a24 != 1) goto code_r0x00a154c0;\n    }\n    pcVar1 = *0xf1848c;\n    var_8h = NULL;\n    if (arg_18h == 0) {\n        arg_18h = *(*in_ECX + 4);\n    }\n    puVar4 = &stack0xffffffd0;\n    uVar3 = (**0xf1848c)();\n    if (uVar3 == 0) goto code_r0x00a154c0;\n    arg_8h_01 = NULL;\n    if ((0 < uVar3) && (uVar3 < 0x7ffffff1)) {\n        arg_8h_00 = uVar3 * 2 + 8;\n        if (arg_8h_00 < 0x401) {\n            fcn.00a1f890();\n            arg_8h_01 = &stack0xffffffd0;\n            if (*0x10 != 0x30) {\ncode_r0x00a15403:\n                arg_8h_01 = puVar4 + 2;\n            }\n        }\n        else {\n            puVar4 = fcn.009f6476(arg_8h_00);\n            arg_8h_01 = puVar4;\n            if (puVar4 != NULL) {\n                *puVar4 = 0xdddd;\n                goto code_r0x00a15403;\n            }\n        }\n    }\n    if (arg_8h_01 != NULL) {\n        fcn.009f5e30(arg_8h_01, 0, uVar3 * 2);\n        iVar2 = (*pcVar1)(arg_18h, 1, arg_ch, arg_10h, arg_8h_01, uVar3);\n        if (iVar2 != 0) {\n            var_8h = (**0xf184d0)(arg_8h, arg_8h_01, iVar2, arg_14h);\n        }\n        fcn.00a10e1b(arg_8h_01);\n    }\ncode_r0x00a154c0:\n    fcn.009f4f3d(var_8h);\n    return;\n}\n",
        "token_count": 1013
    },
    "00a1b33f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00a1b33f(uint16_t *arg_8h, uint32_t *arg_ch)\n\n{\n    uint32_t *puVar1;\n    uint16_t uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint uVar5;\n    uint8_t uVar6;\n    uint32_t *puVar7;\n    uint *puVar8;\n    uint32_t uVar9;\n    uint32_t uVar10;\n    uint32_t uVar11;\n    int32_t iVar12;\n    int32_t iVar13;\n    bool bVar14;\n    uint var_2ch;\n    uint32_t var_20h;\n    uint32_t var_1ch;\n    int32_t var_18h;\n    uint32_t var_14h;\n    uint32_t var_10h;\n    uint32_t var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_14h = arg_8h[5] & 0x8000;\n    uVar10 = *(arg_8h + 3);\n    var_20h = uVar10;\n    uVar3 = *(arg_8h + 1);\n    uVar2 = *arg_8h;\n    uVar11 = arg_8h[5] & 0x7fff;\n    iVar12 = uVar11 - 0x3fff;\n    var_1ch = uVar3;\n    var_18h = uVar2 << 0x10;\n    if (iVar12 == -0x3fff) {\n        iVar12 = 0;\n        iVar4 = 0;\n        do {\n            if ((&var_20h)[iVar4] != 0) {\n                var_20h = 0;\n                var_1ch = 0;\n                uVar5 = 2;\n                goto code_r0x00a1b840;\n            }\n            iVar4 = iVar4 + 1;\n        } while (iVar4 < 3);\n        uVar5 = 0;\n    }\n    else {\n        arg_8h = NULL;\n        iVar13 = str.5_v_[0] + L'\\xffffffff';\n        iVar4 = str.5_v_[0] + (str.5_v_[0] >> 0x1f & 0x1fU) >> 5;\n        uVar9 = str.5_v_[0] & 0x8000001f;\n        var_10h = iVar12;\n        var_ch = iVar4;\n        if (uVar9 < 0) {\n            uVar9 = (uVar9 - 1 | 0xffffffe0) + 1;\n        }\n        puVar1 = &var_20h + iVar4;\n        uVar6 = 0x1f - uVar9;\n        var_8h = 0x1f - uVar9;\n        if ((*puVar1 & 1 << (uVar6 & 0x1f)) != 0) {\n            uVar9 = (&var_20h)[iVar4] & ~(-1 << (uVar6 & 0x1f));\n            while( true ) {\n                if (uVar9 != 0) {\n                    iVar4 = iVar13 + (iVar13 >> 0x1f & 0x1fU) >> 5;\n                    var_4h = 0;\n                    uVar9 = 1 << (0x1f - (iVar13 & 0x1f) & 0x1f);\n                    puVar7 = &var_20h + iVar4;\n                    arg_8h = *puVar7 + uVar9;\n                    if (arg_8h < *puVar7) goto code_r0x00a1b474;\n                    bVar14 = arg_8h < uVar9;\n                    do {\n                        var_4h = 0;\n                        if (!bVar14) goto code_r0x00a1b47b;\ncode_r0x00a1b474:\n                        do {\n                            var_4h = 1;\ncode_r0x00a1b47b:\n                            iVar4 = iVar4 + -1;\n                            *puVar7 = arg_8h;\n                            if ((iVar4 < 0) || (var_4h == 0)) {\n                                arg_8h = var_4h;\n                                goto code_r0x00a1b489;\n                            }\n                            var_4h = 0;\n                            puVar7 = &var_20h + iVar4;\n                            arg_8h = *puVar7 + 1;\n                        } while (arg_8h < *puVar7);\n                        bVar14 = arg_8h == NULL;\n                    } while( true );\n                }\n                iVar4 = iVar4 + 1;\n                if (2 < iVar4) break;\n                uVar9 = (&var_20h)[iVar4];\n            }\n        }\ncode_r0x00a1b489:\n        *puVar1 = *puVar1 & -1 << (var_8h & 0x1f);\n        iVar4 = var_ch + 1;\n        if (iVar4 < 3) {\n            puVar8 = &var_20h + iVar4;\n            for (iVar13 = 3 - iVar4; iVar13 != 0; iVar13 = iVar13 + -1) {\n                *puVar8 = 0;\n                puVar8 = puVar8 + 1;\n            }\n        }\n        if (arg_8h != NULL) {\n            iVar12 = uVar11 - 0x3ffe;\n        }\n        if (iVar12 < *0xa3d1e4 - str.5_v_[0]) {\n            var_20h = 0;\n            var_1ch = 0;\n        }\n        else {\n            if (*0xa3d1e4 < iVar12) {\n                if (iVar12 < *0xa3d1e0) {\n                    var_20h = var_20h & 0x7fffffff;\n                    iVar12 = iVar12 + str.5_v_[3];\n                    iVar4 = str.5_v_[1] + (str.5_v_[1] >> 0x1f & 0x1fU) >> 5;\n                    uVar10 = str.5_v_[1] & 0x8000001f;\n                    if (uVar10 < 0) {\n                        uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n                    }\n                    var_ch = 0;\n                    arg_8h = NULL;\n                    var_4h = 0x20 - uVar10;\n                    do {\n                        var_10h = (&var_20h)[arg_8h] & ~(-1 << (uVar10 & 0x1f));\n                        (&var_20h)[arg_8h] = (&var_20h)[arg_8h] >> (uVar10 & 0x1f) | var_ch;\n                        arg_8h = arg_8h + 1;\n                        var_ch = var_10h << (0x20 - uVar10 & 0x1f);\n                    } while (arg_8h < 3);\n                    iVar13 = 2;\n                    puVar8 = &var_18h + -iVar4;\n                    do {\n                        if (iVar13 < iVar4) {\n                            (&var_20h)[iVar13] = 0;\n                        }\n                        else {\n                            (&var_20h)[iVar13] = *puVar8;\n                        }\n                        iVar13 = iVar13 + -1;\n                        puVar8 = puVar8 + -1;\n                    } while (-1 < iVar13);\n                    uVar5 = 0;\n                }\n                else {\n                    var_1ch = 0;\n                    var_18h = 0;\n                    var_20h = 0x80000000;\n                    iVar12 = str.5_v_[1] + (str.5_v_[1] >> 0x1f & 0x1fU) >> 5;\n                    uVar10 = str.5_v_[1] & 0x8000001f;\n                    if (uVar10 < 0) {\n                        uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n                    }\n                    var_ch = 0;\n                    arg_8h = NULL;\n                    var_4h = 0x20 - uVar10;\n                    do {\n                        uVar3 = (&var_20h)[arg_8h];\n                        var_10h = uVar3 & ~(-1 << (uVar10 & 0x1f));\n                        (&var_20h)[arg_8h] = uVar3 >> (uVar10 & 0x1f) | var_ch;\n                        arg_8h = arg_8h + 1;\n                        var_ch = var_10h << (0x20 - uVar10 & 0x1f);\n                    } while (arg_8h < 3);\n                    iVar4 = 2;\n                    puVar8 = &var_18h + -iVar12;\n                    do {\n                        if (iVar4 < iVar12) {\n                            (&var_20h)[iVar4] = 0;\n                        }\n                        else {\n                            (&var_20h)[iVar4] = *puVar8;\n                        }\n                        iVar4 = iVar4 + -1;\n                        puVar8 = puVar8 + -1;\n                    } while (-1 < iVar4);\n                    iVar12 = str.5_v_[3] + *0xa3d1e0;\n                    uVar5 = 1;\n                }\n                goto code_r0x00a1b840;\n            }\n            var_10h = *0xa3d1e4 - var_10h;\n            var_20h = uVar10;\n            var_1ch = uVar3;\n            iVar12 = var_10h + (var_10h >> 0x1f & 0x1fU) >> 5;\n            uVar10 = var_10h & 0x8000001f;\n            if (uVar10 < 0) {\n                uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n            }\n            var_ch = 0;\n            arg_8h = NULL;\n            var_4h = 0x20 - uVar10;\n            do {\n                uVar3 = (&var_20h)[arg_8h];\n                var_10h = uVar3 & ~(-1 << (uVar10 & 0x1f));\n                (&var_20h)[arg_8h] = uVar3 >> (uVar10 & 0x1f) | var_ch;\n                arg_8h = arg_8h + 1;\n                var_ch = var_10h << (0x20 - uVar10 & 0x1f);\n            } while (arg_8h < 3);\n            iVar4 = 2;\n            puVar8 = &var_18h + -iVar12;\n            do {\n                if (iVar4 < iVar12) {\n                    (&var_20h)[iVar4] = 0;\n                }\n                else {\n                    (&var_20h)[iVar4] = *puVar8;\n                }\n                iVar4 = iVar4 + -1;\n                puVar8 = puVar8 + -1;\n            } while (-1 < iVar4);\n            iVar4 = str.5_v_[0] + L'\\xffffffff';\n            iVar12 = str.5_v_[0] + (str.5_v_[0] >> 0x1f & 0x1fU) >> 5;\n            uVar10 = str.5_v_[0] & 0x8000001f;\n            var_ch = iVar12;\n            if (uVar10 < 0) {\n                uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n            }\n            uVar6 = 0x1f - uVar10;\n            puVar1 = &var_20h + iVar12;\n            var_10h = 0x1f - uVar10;\n            if ((*puVar1 & 1 << (uVar6 & 0x1f)) != 0) {\n                uVar10 = (&var_20h)[iVar12] & ~(-1 << (uVar6 & 0x1f));\n                while (uVar10 == 0) {\n                    iVar12 = iVar12 + 1;\n                    if (2 < iVar12) goto code_r0x00a1b62c;\n                    uVar10 = (&var_20h)[iVar12];\n                }\n                iVar12 = iVar4 + (iVar4 >> 0x1f & 0x1fU) >> 5;\n                bVar14 = false;\n                uVar11 = 1 << (0x1f - (iVar4 & 0x1f) & 0x1f);\n                uVar3 = (&var_20h)[iVar12];\n                uVar10 = uVar3 + uVar11;\n                if ((uVar10 < uVar3) || (uVar10 < uVar11)) {\n                    bVar14 = true;\n                }\n                (&var_20h)[iVar12] = uVar10;\n                while ((iVar12 = iVar12 + -1,  -1 < iVar12 && (bVar14))) {\n                    uVar3 = (&var_20h)[iVar12];\n                    uVar10 = uVar3 + 1;\n                    bVar14 = false;\n                    if ((uVar10 < uVar3) || (uVar10 == 0)) {\n                        bVar14 = true;\n                    }\n                    (&var_20h)[iVar12] = uVar10;\n                }\n            }\ncode_r0x00a1b62c:\n            *puVar1 = *puVar1 & -1 << (var_10h & 0x1f);\n            iVar12 = var_ch + 1;\n            if (iVar12 < 3) {\n                puVar8 = &var_20h + iVar12;\n                for (iVar4 = 3 - iVar12; iVar4 != 0; iVar4 = iVar4 + -1) {\n                    *puVar8 = 0;\n                    puVar8 = puVar8 + 1;\n                }\n            }\n            uVar10 = str.5_v_[1] + L'\\x01';\n            iVar12 = uVar10 + (uVar10 >> 0x1f & 0x1fU) >> 5;\n            uVar10 = uVar10 & 0x8000001f;\n            if (uVar10 < 0) {\n                uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n            }\n            var_ch = 0;\n            arg_8h = NULL;\n            var_4h = 0x20 - uVar10;\n            do {\n                uVar3 = (&var_20h)[arg_8h];\n                var_10h = uVar3 & ~(-1 << (uVar10 & 0x1f));\n                (&var_20h)[arg_8h] = uVar3 >> (uVar10 & 0x1f) | var_ch;\n                arg_8h = arg_8h + 1;\n                var_ch = var_10h << (0x20 - uVar10 & 0x1f);\n            } while (arg_8h < 3);\n            iVar4 = 2;\n            puVar8 = &var_18h + -iVar12;\n            do {\n                if (iVar4 < iVar12) {\n                    (&var_20h)[iVar4] = 0;\n                }\n                else {\n                    (&var_20h)[iVar4] = *puVar8;\n                }\n                iVar4 = iVar4 + -1;\n                puVar8 = puVar8 + -1;\n            } while (-1 < iVar4);\n        }\n        iVar12 = 0;\n        uVar5 = 2;\n    }\ncode_r0x00a1b840:\n    var_20h = iVar12 << (0x1fU - str.5_v_[1] & 0x1f) | -(var_14h != 0) & 0x80000000 | var_20h;\n    if (str.5_v_[2] == L'@') {\n        arg_ch[1] = var_20h;\n        *arg_ch = var_1ch;\n    }\n    else if (str.5_v_[2] == L' ') {\n        *arg_ch = var_20h;\n    }\n    return uVar5;\n}\n",
        "token_count": 3691
    },
    "00a1b883": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00a1b883(uint16_t *arg_8h, uint32_t *arg_ch)\n\n{\n    uint32_t *puVar1;\n    uint16_t uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint uVar5;\n    uint8_t uVar6;\n    uint32_t *puVar7;\n    uint *puVar8;\n    uint32_t uVar9;\n    uint32_t uVar10;\n    uint32_t uVar11;\n    int32_t iVar12;\n    int32_t iVar13;\n    bool bVar14;\n    uint var_2ch;\n    uint32_t var_20h;\n    uint32_t var_1ch;\n    int32_t var_18h;\n    uint32_t var_14h;\n    uint32_t var_10h;\n    uint32_t var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_14h = arg_8h[5] & 0x8000;\n    uVar10 = *(arg_8h + 3);\n    var_20h = uVar10;\n    uVar3 = *(arg_8h + 1);\n    uVar2 = *arg_8h;\n    uVar11 = arg_8h[5] & 0x7fff;\n    iVar12 = uVar11 - 0x3fff;\n    var_1ch = uVar3;\n    var_18h = uVar2 << 0x10;\n    if (iVar12 == -0x3fff) {\n        iVar12 = 0;\n        iVar4 = 0;\n        do {\n            if ((&var_20h)[iVar4] != 0) {\n                var_20h = 0;\n                var_1ch = 0;\n                uVar5 = 2;\n                goto code_r0x00a1bd84;\n            }\n            iVar4 = iVar4 + 1;\n        } while (iVar4 < 3);\n        uVar5 = 0;\n    }\n    else {\n        arg_8h = NULL;\n        iVar13 = *0xa3d200 - 1;\n        iVar4 = *0xa3d200 + (*0xa3d200 >> 0x1f & 0x1fU) >> 5;\n        uVar9 = *0xa3d200 & 0x8000001f;\n        var_10h = iVar12;\n        var_ch = iVar4;\n        if (uVar9 < 0) {\n            uVar9 = (uVar9 - 1 | 0xffffffe0) + 1;\n        }\n        puVar1 = &var_20h + iVar4;\n        uVar6 = 0x1f - uVar9;\n        var_8h = 0x1f - uVar9;\n        if ((*puVar1 & 1 << (uVar6 & 0x1f)) != 0) {\n            uVar9 = (&var_20h)[iVar4] & ~(-1 << (uVar6 & 0x1f));\n            while( true ) {\n                if (uVar9 != 0) {\n                    iVar4 = iVar13 + (iVar13 >> 0x1f & 0x1fU) >> 5;\n                    var_4h = 0;\n                    uVar9 = 1 << (0x1f - (iVar13 & 0x1f) & 0x1f);\n                    puVar7 = &var_20h + iVar4;\n                    arg_8h = *puVar7 + uVar9;\n                    if (arg_8h < *puVar7) goto code_r0x00a1b9b8;\n                    bVar14 = arg_8h < uVar9;\n                    do {\n                        var_4h = 0;\n                        if (!bVar14) goto code_r0x00a1b9bf;\ncode_r0x00a1b9b8:\n                        do {\n                            var_4h = 1;\ncode_r0x00a1b9bf:\n                            iVar4 = iVar4 + -1;\n                            *puVar7 = arg_8h;\n                            if ((iVar4 < 0) || (var_4h == 0)) {\n                                arg_8h = var_4h;\n                                goto code_r0x00a1b9cd;\n                            }\n                            var_4h = 0;\n                            puVar7 = &var_20h + iVar4;\n                            arg_8h = *puVar7 + 1;\n                        } while (arg_8h < *puVar7);\n                        bVar14 = arg_8h == NULL;\n                    } while( true );\n                }\n                iVar4 = iVar4 + 1;\n                if (2 < iVar4) break;\n                uVar9 = (&var_20h)[iVar4];\n            }\n        }\ncode_r0x00a1b9cd:\n        *puVar1 = *puVar1 & -1 << (var_8h & 0x1f);\n        iVar4 = var_ch + 1;\n        if (iVar4 < 3) {\n            puVar8 = &var_20h + iVar4;\n            for (iVar13 = 3 - iVar4; iVar13 != 0; iVar13 = iVar13 + -1) {\n                *puVar8 = 0;\n                puVar8 = puVar8 + 1;\n            }\n        }\n        if (arg_8h != NULL) {\n            iVar12 = uVar11 - 0x3ffe;\n        }\n        if (iVar12 < *0xa3d1fc - *0xa3d200) {\n            var_20h = 0;\n            var_1ch = 0;\n        }\n        else {\n            if (*0xa3d1fc < iVar12) {\n                if (iVar12 < *0xa3d1f8) {\n                    var_20h = var_20h & 0x7fffffff;\n                    iVar12 = iVar12 + *0xa3d20c;\n                    iVar4 = *0xa3d204 + (*0xa3d204 >> 0x1f & 0x1fU) >> 5;\n                    uVar10 = *0xa3d204 & 0x8000001f;\n                    if (uVar10 < 0) {\n                        uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n                    }\n                    var_ch = 0;\n                    arg_8h = NULL;\n                    var_4h = 0x20 - uVar10;\n                    do {\n                        var_10h = (&var_20h)[arg_8h] & ~(-1 << (uVar10 & 0x1f));\n                        (&var_20h)[arg_8h] = (&var_20h)[arg_8h] >> (uVar10 & 0x1f) | var_ch;\n                        arg_8h = arg_8h + 1;\n                        var_ch = var_10h << (0x20 - uVar10 & 0x1f);\n                    } while (arg_8h < 3);\n                    iVar13 = 2;\n                    puVar8 = &var_18h + -iVar4;\n                    do {\n                        if (iVar13 < iVar4) {\n                            (&var_20h)[iVar13] = 0;\n                        }\n                        else {\n                            (&var_20h)[iVar13] = *puVar8;\n                        }\n                        iVar13 = iVar13 + -1;\n                        puVar8 = puVar8 + -1;\n                    } while (-1 < iVar13);\n                    uVar5 = 0;\n                }\n                else {\n                    var_1ch = 0;\n                    var_18h = 0;\n                    var_20h = 0x80000000;\n                    iVar12 = *0xa3d204 + (*0xa3d204 >> 0x1f & 0x1fU) >> 5;\n                    uVar10 = *0xa3d204 & 0x8000001f;\n                    if (uVar10 < 0) {\n                        uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n                    }\n                    var_ch = 0;\n                    arg_8h = NULL;\n                    var_4h = 0x20 - uVar10;\n                    do {\n                        uVar3 = (&var_20h)[arg_8h];\n                        var_10h = uVar3 & ~(-1 << (uVar10 & 0x1f));\n                        (&var_20h)[arg_8h] = uVar3 >> (uVar10 & 0x1f) | var_ch;\n                        arg_8h = arg_8h + 1;\n                        var_ch = var_10h << (0x20 - uVar10 & 0x1f);\n                    } while (arg_8h < 3);\n                    iVar4 = 2;\n                    puVar8 = &var_18h + -iVar12;\n                    do {\n                        if (iVar4 < iVar12) {\n                            (&var_20h)[iVar4] = 0;\n                        }\n                        else {\n                            (&var_20h)[iVar4] = *puVar8;\n                        }\n                        iVar4 = iVar4 + -1;\n                        puVar8 = puVar8 + -1;\n                    } while (-1 < iVar4);\n                    iVar12 = *0xa3d20c + *0xa3d1f8;\n                    uVar5 = 1;\n                }\n                goto code_r0x00a1bd84;\n            }\n            var_10h = *0xa3d1fc - var_10h;\n            var_20h = uVar10;\n            var_1ch = uVar3;\n            iVar12 = var_10h + (var_10h >> 0x1f & 0x1fU) >> 5;\n            uVar10 = var_10h & 0x8000001f;\n            if (uVar10 < 0) {\n                uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n            }\n            var_ch = 0;\n            arg_8h = NULL;\n            var_4h = 0x20 - uVar10;\n            do {\n                uVar3 = (&var_20h)[arg_8h];\n                var_10h = uVar3 & ~(-1 << (uVar10 & 0x1f));\n                (&var_20h)[arg_8h] = uVar3 >> (uVar10 & 0x1f) | var_ch;\n                arg_8h = arg_8h + 1;\n                var_ch = var_10h << (0x20 - uVar10 & 0x1f);\n            } while (arg_8h < 3);\n            iVar4 = 2;\n            puVar8 = &var_18h + -iVar12;\n            do {\n                if (iVar4 < iVar12) {\n                    (&var_20h)[iVar4] = 0;\n                }\n                else {\n                    (&var_20h)[iVar4] = *puVar8;\n                }\n                iVar4 = iVar4 + -1;\n                puVar8 = puVar8 + -1;\n            } while (-1 < iVar4);\n            iVar4 = *0xa3d200 - 1;\n            iVar12 = *0xa3d200 + (*0xa3d200 >> 0x1f & 0x1fU) >> 5;\n            uVar10 = *0xa3d200 & 0x8000001f;\n            var_ch = iVar12;\n            if (uVar10 < 0) {\n                uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n            }\n            uVar6 = 0x1f - uVar10;\n            puVar1 = &var_20h + iVar12;\n            var_10h = 0x1f - uVar10;\n            if ((*puVar1 & 1 << (uVar6 & 0x1f)) != 0) {\n                uVar10 = (&var_20h)[iVar12] & ~(-1 << (uVar6 & 0x1f));\n                while (uVar10 == 0) {\n                    iVar12 = iVar12 + 1;\n                    if (2 < iVar12) goto code_r0x00a1bb70;\n                    uVar10 = (&var_20h)[iVar12];\n                }\n                iVar12 = iVar4 + (iVar4 >> 0x1f & 0x1fU) >> 5;\n                bVar14 = false;\n                uVar11 = 1 << (0x1f - (iVar4 & 0x1f) & 0x1f);\n                uVar3 = (&var_20h)[iVar12];\n                uVar10 = uVar3 + uVar11;\n                if ((uVar10 < uVar3) || (uVar10 < uVar11)) {\n                    bVar14 = true;\n                }\n                (&var_20h)[iVar12] = uVar10;\n                while ((iVar12 = iVar12 + -1,  -1 < iVar12 && (bVar14))) {\n                    uVar3 = (&var_20h)[iVar12];\n                    uVar10 = uVar3 + 1;\n                    bVar14 = false;\n                    if ((uVar10 < uVar3) || (uVar10 == 0)) {\n                        bVar14 = true;\n                    }\n                    (&var_20h)[iVar12] = uVar10;\n                }\n            }\ncode_r0x00a1bb70:\n            *puVar1 = *puVar1 & -1 << (var_10h & 0x1f);\n            iVar12 = var_ch + 1;\n            if (iVar12 < 3) {\n                puVar8 = &var_20h + iVar12;\n                for (iVar4 = 3 - iVar12; iVar4 != 0; iVar4 = iVar4 + -1) {\n                    *puVar8 = 0;\n                    puVar8 = puVar8 + 1;\n                }\n            }\n            uVar10 = *0xa3d204 + 1;\n            iVar12 = uVar10 + (uVar10 >> 0x1f & 0x1fU) >> 5;\n            uVar10 = uVar10 & 0x8000001f;\n            if (uVar10 < 0) {\n                uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n            }\n            var_ch = 0;\n            arg_8h = NULL;\n            var_4h = 0x20 - uVar10;\n            do {\n                uVar3 = (&var_20h)[arg_8h];\n                var_10h = uVar3 & ~(-1 << (uVar10 & 0x1f));\n                (&var_20h)[arg_8h] = uVar3 >> (uVar10 & 0x1f) | var_ch;\n                arg_8h = arg_8h + 1;\n                var_ch = var_10h << (0x20 - uVar10 & 0x1f);\n            } while (arg_8h < 3);\n            iVar4 = 2;\n            puVar8 = &var_18h + -iVar12;\n            do {\n                if (iVar4 < iVar12) {\n                    (&var_20h)[iVar4] = 0;\n                }\n                else {\n                    (&var_20h)[iVar4] = *puVar8;\n                }\n                iVar4 = iVar4 + -1;\n                puVar8 = puVar8 + -1;\n            } while (-1 < iVar4);\n        }\n        iVar12 = 0;\n        uVar5 = 2;\n    }\ncode_r0x00a1bd84:\n    var_20h = iVar12 << (0x1fU - *0xa3d204 & 0x1f) | -(var_14h != 0) & 0x80000000 | var_20h;\n    if (*0xa3d208 == 0x40) {\n        arg_ch[1] = var_20h;\n        *arg_ch = var_1ch;\n    }\n    else if (*0xa3d208 == 0x20) {\n        *arg_ch = var_20h;\n    }\n    return uVar5;\n}\n",
        "token_count": 3667
    },
    "00a1c473": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00a1c735)\n// WARNING: Removing unreachable block (ram,0x00a1c6fe)\n// WARNING: Removing unreachable block (ram,0x00a1cae6)\n// WARNING: Removing unreachable block (ram,0x00a1c70d)\n// WARNING: Removing unreachable block (ram,0x00a1c715)\n// WARNING: Removing unreachable block (ram,0x00a1c71b)\n// WARNING: Removing unreachable block (ram,0x00a1c71e)\n// WARNING: Removing unreachable block (ram,0x00a1c725)\n// WARNING: Removing unreachable block (ram,0x00a1c72f)\n// WARNING: Removing unreachable block (ram,0x00a1c78a)\n// WARNING: Removing unreachable block (ram,0x00a1c784)\n// WARNING: Removing unreachable block (ram,0x00a1c790)\n// WARNING: Removing unreachable block (ram,0x00a1c7ad)\n// WARNING: Removing unreachable block (ram,0x00a1c7af)\n// WARNING: Removing unreachable block (ram,0x00a1c7b7)\n// WARNING: Removing unreachable block (ram,0x00a1c7ba)\n// WARNING: Removing unreachable block (ram,0x00a1c7bf)\n// WARNING: Removing unreachable block (ram,0x00a1c7c2)\n// WARNING: Removing unreachable block (ram,0x00a1caef)\n// WARNING: Removing unreachable block (ram,0x00a1c7cd)\n// WARNING: Removing unreachable block (ram,0x00a1cb06)\n// WARNING: Removing unreachable block (ram,0x00a1cb0d)\n// WARNING: Removing unreachable block (ram,0x00a1c7d8)\n// WARNING: Removing unreachable block (ram,0x00a1c7eb)\n// WARNING: Removing unreachable block (ram,0x00a1c7ed)\n// WARNING: Removing unreachable block (ram,0x00a1c7fa)\n// WARNING: Removing unreachable block (ram,0x00a1c7ff)\n// WARNING: Removing unreachable block (ram,0x00a1c805)\n// WARNING: Removing unreachable block (ram,0x00a1c80e)\n// WARNING: Removing unreachable block (ram,0x00a1c815)\n// WARNING: Removing unreachable block (ram,0x00a1c82d)\n// WARNING: Removing unreachable block (ram,0x00a1c83e)\n// WARNING: Removing unreachable block (ram,0x00a1c84c)\n// WARNING: Removing unreachable block (ram,0x00a1c88b)\n// WARNING: Removing unreachable block (ram,0x00a1c894)\n// WARNING: Removing unreachable block (ram,0x00a1caac)\n// WARNING: Removing unreachable block (ram,0x00a1c8a2)\n// WARNING: Removing unreachable block (ram,0x00a1c8ac)\n// WARNING: Removing unreachable block (ram,0x00a1cac7)\n// WARNING: Removing unreachable block (ram,0x00a1c8b9)\n// WARNING: Removing unreachable block (ram,0x00a1c8c0)\n// WARNING: Removing unreachable block (ram,0x00a1c8ca)\n// WARNING: Removing unreachable block (ram,0x00a1c8cf)\n// WARNING: Removing unreachable block (ram,0x00a1c8df)\n// WARNING: Removing unreachable block (ram,0x00a1c8e4)\n// WARNING: Removing unreachable block (ram,0x00a1c8ee)\n// WARNING: Removing unreachable block (ram,0x00a1c8f3)\n// WARNING: Removing unreachable block (ram,0x00a1c905)\n// WARNING: Removing unreachable block (ram,0x00a1c912)\n// WARNING: Removing unreachable block (ram,0x00a1c921)\n// WARNING: Removing unreachable block (ram,0x00a1c92e)\n// WARNING: Removing unreachable block (ram,0x00a1c94b)\n// WARNING: Removing unreachable block (ram,0x00a1c94f)\n// WARNING: Removing unreachable block (ram,0x00a1c956)\n// WARNING: Removing unreachable block (ram,0x00a1c95f)\n// WARNING: Removing unreachable block (ram,0x00a1c962)\n// WARNING: Removing unreachable block (ram,0x00a1c973)\n// WARNING: Removing unreachable block (ram,0x00a1c981)\n// WARNING: Removing unreachable block (ram,0x00a1c98c)\n// WARNING: Removing unreachable block (ram,0x00a1c993)\n// WARNING: Removing unreachable block (ram,0x00a1c9be)\n// WARNING: Removing unreachable block (ram,0x00a1c9c3)\n// WARNING: Removing unreachable block (ram,0x00a1c9ce)\n// WARNING: Removing unreachable block (ram,0x00a1c9d7)\n// WARNING: Removing unreachable block (ram,0x00a1c9dd)\n// WARNING: Removing unreachable block (ram,0x00a1c9e0)\n// WARNING: Removing unreachable block (ram,0x00a1ca06)\n// WARNING: Removing unreachable block (ram,0x00a1ca0b)\n// WARNING: Removing unreachable block (ram,0x00a1ca10)\n// WARNING: Removing unreachable block (ram,0x00a1ca1d)\n// WARNING: Removing unreachable block (ram,0x00a1ca2e)\n// WARNING: Removing unreachable block (ram,0x00a1ca5f)\n// WARNING: Removing unreachable block (ram,0x00a1ca34)\n// WARNING: Removing unreachable block (ram,0x00a1ca5a)\n// WARNING: Removing unreachable block (ram,0x00a1ca3e)\n// WARNING: Removing unreachable block (ram,0x00a1ca54)\n// WARNING: Removing unreachable block (ram,0x00a1ca4d)\n// WARNING: Removing unreachable block (ram,0x00a1ca62)\n// WARNING: Removing unreachable block (ram,0x00a1ca8f)\n// WARNING: Removing unreachable block (ram,0x00a1ca6c)\n// WARNING: Removing unreachable block (ram,0x00a1c8f7)\n// WARNING: Removing unreachable block (ram,0x00a1c8d4)\n// WARNING: Removing unreachable block (ram,0x00a1caca)\n// WARNING: Removing unreachable block (ram,0x00a1c810)\n// WARNING: Removing unreachable block (ram,0x00a1cad4)\n// WARNING: Removing unreachable block (ram,0x00a1cb15)\n// WARNING: Variable defined which should be unmapped: var_7ch\n\nvoid __cdecl\nfcn.00a1c473(uint arg_8h, uint arg_ch, char *arg_10h, uint arg_14h, uint arg_18h, uint arg_1ch, uint arg_20h, \n            int32_t arg_24h)\n\n{\n    char cVar1;\n    uint *puVar2;\n    uint var_7ch;\n    uint var_78h;\n    uint var_74h;\n    uint var_70h;\n    uint var_6ch;\n    uint var_68h;\n    uint var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_3ch;\n    uint var_34h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_9h;\n    uint var_4h;\n    \n    if (arg_24h == 0) {\n        puVar2 = fcn.009f5eec();\n        *puVar2 = 0x16;\n        fcn.009f49b1(0, 0, 0, 0, 0);\n        fcn.009f4f3d(var_7ch);\n        return;\n    }\n    for (; (((cVar1 = *arg_10h,  cVar1 == ' ' || (cVar1 == '\\t')) || (cVar1 == '\\n')) || (cVar1 == '\\r'));\n        arg_10h = arg_10h + 1) {\n    }\n    // WARNING: Could not recover jumptable at 0x00a1c506. Too many branches\n    // WARNING: Treating indirect jump as call\n    // switch table (12 cases) at 0xa1cb3b\n    (**0xa1cb3b)();\n    return;\n}\n",
        "token_count": 1989
    },
    "0040104b": {
        "rules": [
            "decompress data using aPLib/06666ba0b6a14a5481e4ee6eb664d454"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_58h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.0040104b(void)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    uint unaff_EBX;\n    int32_t iVar3;\n    uint unaff_EDI;\n    int32_t iVar4;\n    ulong uVar5;\n    uint *var_64h;\n    uint uStack100;\n    uint uStack96;\n    uint *var_58h;\n    char16_t *pcStack88;\n    int32_t var_4ch;\n    uint var_48h;\n    uint var_30h;\n    uint var_28h;\n    uint var_24h;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    var_4h = 0x3e6;\n    iVar3 = 0;\n    if (var_58h == 0x23c91b) {\n        (**0xf18304)();\n        (**0xf18308)(0, 0, var_18h);\n        (**0xf1830c)(0, &fcn.0040104b::var_18h);\n        (**0xf18340)(0, 0, 0, 0);\n        (**0xf18344)(0, 0, 0, 0);\n        (**0xf18348)(0, &fcn.0040104b::var_48h);\n        (**0xf1834c)(0);\n        (**0xf18350)(0, 0, 0, 0, 0);\n        (**0xf1839c)(0);\n        (**0xf18574)(0);\n        (**0xf18568)(0, 0, 0, 0, 0);\n        (**0xf1856c)(0, 0, 0, 0);\n        (**0xf18570)(0, 0);\n        (**0xf18354)(0, 0, 0, 0);\n        pcStack88 = 0x9f2083;\n        fcn.00401127();\n        pcStack88 = \n        L\"zidaxicarovosunakepekojaye kurudevedoveju lumehizecukogawoxokewoco zebepidanoto be cipozeja hi fopukozawedemu mirugiwakuxawozokexulume recefidasuduluco\"\n        ;\n        var_58h = 0x9f2090;\n        fcn.0040108c();\n        var_58h = &fcn.0040104b::var_64h;\n        uStack96 = 0x9f209c;\n        fcn.004010cd(var_58h);\n        uStack96 = 0;\n        uStack100 = 1;\n        var_64h = 0x9f20a7;\n        fcn.00401073();\n        var_64h = &fcn.0040104b::var_30h;\n        fcn.004010c8();\n        fcn.009f5a66(L\"mikamiloye robaxenageyelowojiforifopu\", var_24h);\n        fcn.009f5920(*0xa30d88);\n        fcn.009f5895(0);\n        fcn.009f5799(0, 0, 0);\n        fcn.009f568d(0, 0, 0);\n        fcn.009f5519(0, 0);\n        fcn.009f50f0(0xa3dbb0, 0xe1fbf8, 0x1826add);\n        fcn.009f5060(*0xa30d78, *0xa30d78 >> 0x20);\n        fcn.00401316();\n        fcn.009f4787();\n    }\n    uVar5 = CONCAT44(unaff_EBX, unaff_EDI);\n    iVar4 = 0;\n    while ((((**0xf183a0)(uVar5),  pcVar1 = *0xf183a4,  iVar4 < 0xe60ada || (var_28h == 'i')) || (var_4ch == 0x16838de3)\n           )) {\n        iVar4 = iVar4 + 1;\n        if (0xe4a4b34 < iVar4) {\ncode_r0x009f2276:\n            iVar4 = 0;\n            do {\n                if (iVar4 == 0x516c56) {\n                    *0xe1fbf4 = *0xa39414;\n                }\n                iVar4 = iVar4 + 1;\n            } while (iVar4 < 0x55bd1c);\n            *0xe1fbf4 = *0xe1fbf4 + 0x638b9;\n            *0xe1b570 = (**0xf183a4)(0, *0xe1fbf4);\n            *0xe1b570 = (*pcVar1)(0, *0xe1fbf4);\n            *0xe46640 = *0xa39008;\n            uVar2 = 0;\n            if (*0xe1fbf4 != 0) {\n                do {\n                    *(uVar2 + *0xe1b570) = *(*0xe46640 + 0x638b9 + uVar2);\n                    uVar2 = uVar2 + 1;\n                } while (uVar2 < *0xe1fbf4);\n            }\n            fcn.004011fe(0xe1b570, 0xe1fbf4);\n            *0xe186ec = (**0xf183ac)(*0xe1c064, \"VirtualProtect\");\n            var_8h = 0x40;\n            do {\n                if (iVar3 == 0x658c4) {\n                    (**0xe186ec)(*0xe1b570, *0xe1fbf4, var_8h, &fcn.0040104b::var_18h);\n                }\n                iVar3 = iVar3 + 1;\n            } while (iVar3 < 0x667c97);\n            fcn.004012a8(*0xe1b570, *0xe1fbf4, 0xa39010);\n            return;\n        }\n    }\n    *0xe1fbd8 = 0x9251f4de;\n    if (*0xe1fbf4 == 0x187) {\n        *0xe1c060 = 0;\n        var_18h = *0xe1c060;\n    }\n    *0xe1c030 = 0xf5dec666;\n    var_10h = *0xe1c030;\n    var_ch = *0xe1fbd8;\n    goto code_r0x009f2276;\n}\n",
        "token_count": 1524
    },
    "004011fe": {
        "rules": [
            "decompress data using aPLib/06666ba0b6a14a5481e4ee6eb664d454"
        ],
        "decompiled_code": "\nvoid fcn.004011fe(int32_t *param_1, uint32_t *param_2)\n\n{\n    uint8_t uVar1;\n    uint8_t uVar2;\n    uint8_t uVar3;\n    int32_t iVar4;\n    uint8_t *puVar5;\n    uint32_t uVar6;\n    uint32_t uStack156;\n    \n    *0xe1d42f = 0x32;\n    *0xe186c0 = 0;\n    *0xe1d42b = 0x6e;\n    *0xe18720 = 0;\n    *0xe1d429 = 0x65;\n    *0xe1b574 = 0xf3f9f346;\n    *0xe1d431 = 100;\n    *0xe1a2b8 = 0;\n    *0xe1a2bc = 0;\n    *0xe1d433 = 0x6c;\n    *0xe1c000 = 0;\n    *0xe1d42e = 0x33;\n    *0xe1871c = 0xd57c7618;\n    *0xe1d430 = 0x2e;\n    *0xe186e0 = 0xba248176;\n    *0xe186e4 = 0xffffffff;\n    *0xe1d432 = 0x6c;\n    *0xe1c040 = 0;\n    *0xe1c044 = 0;\n    *0xe1d428 = 0x6b;\n    *0xe1bff0 = 0;\n    *0xe1d42d = 0x6c;\n    *0xe1bfcc = 0xdafc2b0c;\n    *0xe1d42c = 0x65;\n    *0xe1b590 = 0xbb6aa30c;\n    *0xe1d42a = 0x72;\n    *0xe1bff8 = 0;\n    *0xe1bffc = 0;\n    *0xe1d434 = 0;\n    *0xe1c064 = (**0xf183a8)(0xe1d428);\n    *0xe1c072 = 0x6f;\n    *0xa4c408 = 0xb756ec50;\n    *0xe1c075 = 0x6c;\n    *0xe46658 = 0;\n    *0xe1c076 = 0x41;\n    *0xa4c404 = 0;\n    *0xe1c073 = 0x62;\n    *0xe186f4 = 0x8a2a9718;\n    *0xe1c079 = 0x6f;\n    *0xe18728 = 0;\n    *0xe1872c = 0;\n    *0xe1c070 = 0x47;\n    *0xe1c01c = 0xd855589a;\n    *0xe1c071 = 0x6c;\n    *0xe1b580 = 0;\n    *0xe1b584 = 0;\n    *0xe1c078 = 0x6c;\n    *0xe1fbe8 = 0;\n    *0xe1fbec = 0;\n    *0xe1c074 = 0x61;\n    *0xe1bfd0 = 0;\n    *0xe1bfd4 = 0;\n    *0xe1c07a = 99;\n    *0xe186f0 = 0;\n    *0xe1c077 = 0x6c;\n    *0xe1bfb8 = 0;\n    *0xe1bfbc = 0;\n    *0xe1c07b = 0;\n    *0xe1b594 = (**0xf183ac)(*0xe1c064, 0xe1c070);\n    uVar6 = 0;\n    iVar4 = (**0xe1b594)(0, *param_2);\n    uStack156 = 0;\n    if (*param_2 != 0) {\n        do {\n            puVar5 = *param_1 + uStack156;\n            uVar1 = puVar5[3];\n            uVar2 = puVar5[1];\n            uVar3 = puVar5[2];\n            *(uVar6 + iVar4) = *puVar5 | (uVar1 & 0x30) << 2;\n            *(uVar6 + 1 + iVar4) = uVar2 | (uVar1 & 0xc) << 4;\n            *0xe1bfc0 = 0xb6f4c84c;\n            if (*0xe1fbf4 == 0x34e) {\n                (**0xf183b0)(0, 0, 0);\n                (**0xf18310)(0, 0, 0);\n                *0xe1b588 = 0;\n                *0xe1b58c = 0;\n            }\n            *0xa4c400 = 0xfaace874;\n            *(uVar6 + 2 + iVar4) = uVar3 | uVar1 << 6;\n            *0xe18700 = 0xe0cdb12a;\n            *0xe18704 = 0xffffffff;\n            if (*0xe1fbf4 == 0x390) {\n                *0xe4665c = 0x83df3254;\n            }\n            *0xe186c8 = 0xac276670;\n            uStack156 = uStack156 + 4;\n            uVar6 = uVar6 + 3;\n        } while (uStack156 < *param_2);\n    }\n    *param_1 = iVar4;\n    *param_2 = uVar6;\n    return;\n}\n",
        "token_count": 1282
    },
    "00a21300": {
        "rules": [
            "decompress data using aPLib/06666ba0b6a14a5481e4ee6eb664d454"
        ],
        "decompiled_code": "\nuint32_t * fcn.00a21300(uint32_t *param_1, char param_2)\n\n{\n    uint32_t uVar1;\n    char cVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint32_t *puVar5;\n    \n    uVar1 = param_1 & 3;\n    while (uVar1 != 0) {\n        if (*param_1 == param_2) {\n            return param_1;\n        }\n        if (*param_1 == '\\0') {\n            return NULL;\n        }\n        uVar1 = param_1 + 1 & 3;\n        param_1 = param_1 + 1;\n    }\n    while( true ) {\n        while( true ) {\n            uVar1 = *param_1;\n            uVar4 = uVar1 ^ CONCAT22(CONCAT11(param_2, param_2), CONCAT11(param_2, param_2));\n            uVar3 = uVar1 ^ 0xffffffff ^ uVar1 + 0x7efefeff;\n            puVar5 = param_1 + 1;\n            if (((uVar4 ^ 0xffffffff ^ uVar4 + 0x7efefeff) & 0x81010100) != 0) break;\n            param_1 = puVar5;\n            if ((uVar3 & 0x81010100) != 0) {\n                if ((uVar3 & 0x1010100) != 0) {\n                    return NULL;\n                }\n                if ((uVar1 + 0x7efefeff & 0x80000000) == 0) {\n                    return NULL;\n                }\n            }\n        }\n        uVar1 = *param_1;\n        if (uVar1 == param_2) {\n            return param_1;\n        }\n        if (uVar1 == '\\0') {\n            return NULL;\n        }\n        cVar2 = uVar1 >> 8;\n        if (cVar2 == param_2) {\n            return param_1 + 1;\n        }\n        if (cVar2 == '\\0') break;\n        cVar2 = uVar1 >> 0x10;\n        if (cVar2 == param_2) {\n            return param_1 + 2;\n        }\n        if (cVar2 == '\\0') {\n            return NULL;\n        }\n        cVar2 = uVar1 >> 0x18;\n        if (cVar2 == param_2) {\n            return param_1 + 3;\n        }\n        param_1 = puVar5;\n        if (cVar2 == '\\0') {\n            return NULL;\n        }\n    }\n    return NULL;\n}\n",
        "token_count": 591
    },
    "0040105f": {
        "rules": [
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43",
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_30h\n\nvoid __cdecl fcn.0040105f(uint noname_0, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    uint32_t arg_ch_00;\n    int32_t iVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint uVar5;\n    uint uVar6;\n    int32_t extraout_ECX;\n    int32_t iVar7;\n    int32_t extraout_ECX_00;\n    int32_t unaff_EBP;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_4h;\n    \n    fcn.009f4feb(0x34);\n    *(unaff_EBP + -0x40) = extraout_ECX;\n    *(unaff_EBP + -0x38) = *(unaff_EBP + 0x14);\n    uVar2 = fcn.004011db();\n    arg_ch_00 = *(unaff_EBP + 0x10);\n    if (arg_ch_00 != 0) {\n        iVar3 = (*(extraout_ECX + 0x10) - *(extraout_ECX + 0xc)) / 0x1c;\n        iVar7 = 0x9249249;\n        if (0x9249249U - iVar3 < arg_ch_00) {\n            iVar3 = fcn.004010d7();\n            iVar7 = extraout_ECX_00;\n        }\n        uVar4 = iVar3 + arg_ch_00;\n        if (uVar2 < uVar4) {\n            if (iVar7 - (uVar2 >> 1) < uVar2) {\n                uVar2 = 0;\n            }\n            else {\n                uVar2 = uVar2 + (uVar2 >> 1);\n            }\n            if (uVar2 < uVar4) {\n                uVar2 = uVar4;\n            }\n            uVar5 = fcn.0040105a(uVar2);\n            *(unaff_EBP + -0x34) = uVar5;\n            *(unaff_EBP + -0x3c) = uVar5;\n            *(unaff_EBP + -4) = 0;\n            uVar5 = fcn.004011a4(*(extraout_ECX + 0xc), *(unaff_EBP + 0xc), uVar5);\n            *(unaff_EBP + -0x3c) = uVar5;\n            uVar5 = fcn.00401271(uVar5, arg_ch_00, *(unaff_EBP + -0x38));\n            *(unaff_EBP + -0x3c) = uVar5;\n            fcn.004011a4(*(unaff_EBP + 0xc), *(extraout_ECX + 0x10), uVar5);\n            *(unaff_EBP + -4) = 0xffffffff;\n            iVar7 = *(extraout_ECX + 0xc);\n            iVar3 = *(extraout_ECX + 0x10);\n            if (*(extraout_ECX + 0xc) != 0) {\n                fcn.00401140(*(extraout_ECX + 0xc), *(extraout_ECX + 0x10));\n                fcn.009f4787(*(extraout_ECX + 0xc));\n            }\n            iVar1 = *(unaff_EBP + -0x34);\n            *(extraout_ECX + 0x14) = uVar2 * 0x1c + iVar1;\n            *(extraout_ECX + 0x10) = (arg_ch_00 + (iVar3 - iVar7) / 0x1c) * 0x1c + iVar1;\n            *(extraout_ECX + 0xc) = iVar1;\n        }\n        else {\n            if ((*(extraout_ECX + 0x10) - *(unaff_EBP + 0xc)) / 0x1c < arg_ch_00) {\n                fcn.004011f9(*(unaff_EBP + -0x38));\n                fcn.004011a4(*(unaff_EBP + 0xc), *(extraout_ECX + 0x10), arg_ch_00 * 0x1c + *(unaff_EBP + 0xc));\n                *(unaff_EBP + -4) = 2;\n                fcn.00401271(*(extraout_ECX + 0x10), arg_ch_00 - (*(extraout_ECX + 0x10) - *(unaff_EBP + 0xc)) / 0x1c, \n                             unaff_EBP + -0x30);\n                *(unaff_EBP + -4) = 0xffffffff;\n                *(extraout_ECX + 0x10) = *(extraout_ECX + 0x10) + arg_ch_00 * 0x1c;\n                fcn.00401195(*(unaff_EBP + 0xc), *(extraout_ECX + 0x10) + arg_ch_00 * -0x1c, unaff_EBP + -0x30);\n            }\n            else {\n                fcn.004011f9(*(unaff_EBP + -0x38));\n                uVar5 = *(extraout_ECX + 0x10);\n                *(unaff_EBP + -0x34) = uVar5;\n                *(unaff_EBP + -0x34) = *(unaff_EBP + -0x34) + arg_ch_00 * -0x1c;\n                uVar6 = fcn.004011a4(*(unaff_EBP + -0x34), uVar5, uVar5);\n                *(extraout_ECX + 0x10) = uVar6;\n                fcn.00401302(*(unaff_EBP + 0xc), *(unaff_EBP + -0x34), uVar5);\n                fcn.00401195(*(unaff_EBP + 0xc), arg_ch_00 * 0x1c + *(unaff_EBP + 0xc), unaff_EBP + -0x30);\n            }\n            fcn.00401073(1, 0);\n        }\n    }\n    fcn.009f5047();\n    return;\n}\n",
        "token_count": 1433
    },
    "0040119a": {
        "rules": [
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43",
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.0040119a(uint arg_8h, uint arg_ch)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint uVar3;\n    int32_t arg_10h;\n    int32_t extraout_ECX;\n    int32_t unaff_EBP;\n    uint32_t uVar4;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_4h;\n    \n    fcn.009f4f7f(0x10);\n    *(unaff_EBP + -0x1c) = extraout_ECX;\n    uVar4 = *(unaff_EBP + 8) | 0xf;\n    if (uVar4 == 0xffffffff) {\n        uVar4 = *(unaff_EBP + 8);\n    }\n    else {\n        uVar1 = *(extraout_ECX + 0x18);\n        *(unaff_EBP + -0x14) = uVar1;\n        *(unaff_EBP + -0x14) = *(unaff_EBP + -0x14) >> 1;\n        uVar2 = *(unaff_EBP + -0x14);\n        if ((uVar4 / 3 < uVar2) && (uVar1 <= -uVar2 - 2)) {\n            uVar4 = uVar2 + uVar1;\n        }\n    }\n    *(unaff_EBP + -4) = 0;\n    uVar3 = fcn.00401235(uVar4 + 1);\n    *(unaff_EBP + -0x18) = uVar3;\n    *(unaff_EBP + -4) = 0xffffffff;\n    if (*(unaff_EBP + 0xc) != 0) {\n        if (*(extraout_ECX + 0x18) < 0x10) {\n            arg_10h = extraout_ECX + 4;\n        }\n        else {\n            arg_10h = *(extraout_ECX + 4);\n        }\n        fcn.0040121c(*(unaff_EBP + -0x18), uVar4 + 1, arg_10h, *(unaff_EBP + 0xc));\n    }\n    fcn.004011d6(1, 0);\n    *(extraout_ECX + 4) = *(unaff_EBP + -0x18);\n    *(extraout_ECX + 0x18) = uVar4;\n    fcn.00401253(*(unaff_EBP + 0xc));\n    fcn.009f5024();\n    return;\n}\n",
        "token_count": 594
    },
    "00401276": {
        "rules": [
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43",
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.00401276(uint arg_8h, uint arg_ch)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint uVar3;\n    int32_t arg_10h;\n    int32_t extraout_ECX;\n    int32_t unaff_EBP;\n    uint32_t uVar4;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_4h;\n    \n    fcn.009f4f7f(0x10);\n    *(unaff_EBP + -0x1c) = extraout_ECX;\n    uVar4 = *(unaff_EBP + 8) | 7;\n    if (uVar4 < 0x7fffffff) {\n        uVar1 = *(extraout_ECX + 0x18);\n        *(unaff_EBP + -0x14) = uVar1;\n        *(unaff_EBP + -0x14) = *(unaff_EBP + -0x14) >> 1;\n        uVar2 = *(unaff_EBP + -0x14);\n        if ((uVar4 / 3 < uVar2) && (uVar1 <= 0x7ffffffe - uVar2)) {\n            uVar4 = uVar2 + uVar1;\n        }\n    }\n    else {\n        uVar4 = *(unaff_EBP + 8);\n    }\n    *(unaff_EBP + -4) = 0;\n    uVar3 = fcn.00401118(uVar4 + 1);\n    *(unaff_EBP + -0x18) = uVar3;\n    *(unaff_EBP + -4) = 0xffffffff;\n    if (*(unaff_EBP + 0xc) != 0) {\n        if (*(extraout_ECX + 0x18) < 8) {\n            arg_10h = extraout_ECX + 4;\n        }\n        else {\n            arg_10h = *(extraout_ECX + 4);\n        }\n        fcn.00401041(*(unaff_EBP + -0x18), uVar4 + 1, arg_10h, *(unaff_EBP + 0xc));\n    }\n    fcn.00401073(1, 0);\n    *(extraout_ECX + 4) = *(unaff_EBP + -0x18);\n    *(extraout_ECX + 0x18) = uVar4;\n    fcn.00401181(*(unaff_EBP + 0xc));\n    fcn.009f5024();\n    return;\n}\n",
        "token_count": 593
    },
    "00401091": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint __fastcall fcn.00401091(uint param_1)\n\n{\n    uint32_t unaff_ESI;\n    \n    fcn.00401073(1, 0);\n    if ((unaff_ESI & 1) != 0) {\n        fcn.009f4787(param_1);\n    }\n    return param_1;\n}\n",
        "token_count": 76
    },
    "009fbe67": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.009fbe67(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t *piVar1;\n    uint32_t arg_8h_00;\n    uint *puVar2;\n    uint uVar3;\n    int32_t unaff_EBP;\n    int32_t iVar4;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.009f9490(0xa378e0, 0x10);\n    arg_8h_00 = *(unaff_EBP + 8);\n    if (arg_8h_00 == 0xfffffffe) {\n        puVar2 = fcn.009f5eff();\n        *puVar2 = 0;\n        puVar2 = fcn.009f5eec();\n        *puVar2 = 9;\n    }\n    else {\n        if ((-1 < arg_8h_00) && (arg_8h_00 < *0xf15b68)) {\n            piVar1 = (arg_8h_00 >> 5) * 4 + 0xf15bc0;\n            iVar4 = (arg_8h_00 & 0x1f) * 0x40;\n            if ((*(*piVar1 + 4 + iVar4) & 1) != 0) {\n                fcn.00a0abf2(arg_8h_00);\n                *(unaff_EBP + -4) = 0;\n                if ((*(*piVar1 + 4 + iVar4) & 1) == 0) {\n                    puVar2 = fcn.009f5eec();\n                    *puVar2 = 9;\n                    puVar2 = fcn.009f5eff();\n                    *puVar2 = 0;\n                    *(unaff_EBP + -0x1c) = 0xffffffff;\n                }\n                else {\n                    uVar3 = fcn.009fbdf2(*(unaff_EBP + 8), *(unaff_EBP + 0xc), *(unaff_EBP + 0x10));\n                    *(unaff_EBP + -0x1c) = uVar3;\n                }\n                *(unaff_EBP + -4) = 0xfffffffe;\n                fcn.009fbf39(0xa378e0);\n                goto code_r0x009fbf33;\n            }\n        }\n        puVar2 = fcn.009f5eff();\n        *puVar2 = 0;\n        puVar2 = fcn.009f5eec();\n        *puVar2 = 9;\n        fcn.009f49b1(0, 0, 0, 0, 0);\n    }\ncode_r0x009fbf33:\n    fcn.009f94d5();\n    return;\n}\n",
        "token_count": 635
    },
    "00a02160": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint * __cdecl fcn.00a02160(uint *arg_8h)\n\n{\n    char cVar1;\n    char *pcVar2;\n    uint *puVar3;\n    uint var_10h;\n    uint var_8h;\n    uint var_4h;\n    \n    if (**0xf15940 == 'X') {\n        pcVar2 = \"void\";\n    }\n    else {\n        if (**0xf15940 != 'Z') {\n            fcn.00a01d30(&var_8h);\n            if ((var_4h == '\\0') && (cVar1 = **0xf15940,  cVar1 != '\\0')) {\n                if (cVar1 != '@') {\n                    if (cVar1 != 'Z') {\n                        fcn.00a01452(2);\n                        return arg_8h;\n                    }\n                    *0xf15940 = *0xf15940 + 1;\n                    pcVar2 = \",...\";\n                    if ((~(*0xf15950 >> 0x12) & 1) == 0) {\n                        pcVar2 = \",<ellipsis>\";\n                    }\n                    puVar3 = fcn.00a01f16(&var_10h, pcVar2);\n                    *arg_8h = *puVar3;\n                    arg_8h[1] = puVar3[1];\n                    return arg_8h;\n                }\n                *0xf15940 = *0xf15940 + 1;\n            }\n            *arg_8h = var_8h;\n            arg_8h[1] = var_4h;\n            return arg_8h;\n        }\n        pcVar2 = 0xa3345c;\n        if ((~(*0xf15950 >> 0x12) & 1) == 0) {\n            pcVar2 = \"<ellipsis>\";\n        }\n    }\n    *0xf15940 = *0xf15940 + 1;\n    fcn.00a0181e(pcVar2);\n    return arg_8h;\n}\n",
        "token_count": 442
    },
    "00a0b69c": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.00a0b69c(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t *piVar1;\n    uint32_t arg_8h_00;\n    uint *puVar2;\n    uint uVar3;\n    int32_t unaff_EBP;\n    int32_t iVar4;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.009f9490(0xa37c78, 0x10);\n    arg_8h_00 = *(unaff_EBP + 8);\n    if (arg_8h_00 == 0xfffffffe) {\n        puVar2 = fcn.009f5eff();\n        *puVar2 = 0;\n        puVar2 = fcn.009f5eec();\n        *puVar2 = 9;\n    }\n    else {\n        if ((-1 < arg_8h_00) && (arg_8h_00 < *0xf15b68)) {\n            piVar1 = (arg_8h_00 >> 5) * 4 + 0xf15bc0;\n            iVar4 = (arg_8h_00 & 0x1f) * 0x40;\n            if ((*(*piVar1 + 4 + iVar4) & 1) != 0) {\n                fcn.00a0abf2(arg_8h_00);\n                *(unaff_EBP + -4) = 0;\n                if ((*(*piVar1 + 4 + iVar4) & 1) == 0) {\n                    puVar2 = fcn.009f5eec();\n                    *puVar2 = 9;\n                    puVar2 = fcn.009f5eff();\n                    *puVar2 = 0;\n                    *(unaff_EBP + -0x1c) = 0xffffffff;\n                }\n                else {\n                    uVar3 = fcn.00a0af69(*(unaff_EBP + 8), *(unaff_EBP + 0xc), *(unaff_EBP + 0x10));\n                    *(unaff_EBP + -0x1c) = uVar3;\n                }\n                *(unaff_EBP + -4) = 0xfffffffe;\n                fcn.00a0b76e(0xa37c78);\n                goto code_r0x00a0b768;\n            }\n        }\n        puVar2 = fcn.009f5eff();\n        *puVar2 = 0;\n        puVar2 = fcn.009f5eec();\n        *puVar2 = 9;\n        fcn.009f49b1(0, 0, 0, 0, 0);\n    }\ncode_r0x00a0b768:\n    fcn.009f94d5();\n    return;\n}\n",
        "token_count": 643
    },
    "00401190": {
        "rules": [
            "encrypt data using HC-128/b24f3f77371449e18042164d6f6569c2"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00401190(uint arg_8h, int32_t arg_ch)\n\n{\n    uint8_t uVar1;\n    uint8_t *extraout_EDX;\n    int32_t iVar2;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    iVar2 = 0;\n    if (0 < arg_ch) {\n        do {\n            uVar1 = fcn.00401203();\n            *extraout_EDX = *extraout_EDX ^ uVar1;\n            *0xe1fbd0 = 0xfc7352ee;\n            *0xe1fbd4 = 0xffffffff;\n            if (arg_ch == 0x649) {\n                *0xe46638 = 0;\n                *0xe4663c = 0;\n            }\n            *0xa4c3e0 = 0xaa6d9b4e;\n            iVar2 = iVar2 + 1;\n        } while (iVar2 < arg_ch);\n    }\n    return;\n}\n",
        "token_count": 226
    },
    "009fcab7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/a3d2ca57787b45ac887fefbb531cd56b",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/f4adb04e51ec4c55be451936d9d27cc9"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.009fcab7(uint param_1, int32_t param_2)\n\n{\n    float10 fVar1;\n    char cVar2;\n    uint8_t uVar3;\n    ushort uVar4;\n    int32_t unaff_EBP;\n    float10 in_ST0;\n    float10 in_ST1;\n    uint var_a2h;\n    uint var_94h;\n    uint var_90h;\n    \n    if (*(param_2 + 0xe) == '\\x05') {\n        uVar4 = CONCAT31(*(unaff_EBP + -0xa4) >> 8 & 0xfe | 2, 0x3f);\n    }\n    else {\n        uVar4 = 0x133f;\n    }\n    *(unaff_EBP + -0xa2) = uVar4;\n    fVar1 = 0;\n    *(unaff_EBP + -0x94) = param_2;\n    *(unaff_EBP + -0xa0) = (in_ST0 < fVar1) << 9 | (in_ST0 != fVar1) << 10 | (in_ST0 == fVar1) << 0xe;\n    *(unaff_EBP + -0x90) = 0;\n    fVar1 = 0;\n    *(unaff_EBP + -0xa0) = (in_ST1 < fVar1) << 9 | (in_ST1 != fVar1) << 10 | (in_ST1 == fVar1) << 0xe;\n    uVar3 = (*(unaff_EBP + -0x9f) << 1) >> 1;\n    cVar2 = (*(unaff_EBP + -0x9f) << 1) >> 1;\n    // WARNING: Could not recover jumptable at 0x009fcb41. Too many branches\n    // WARNING: Treating indirect jump as call\n    (**(param_2 + (*(((cVar2 << 1 | cVar2 < '\\0') & 0xf) + 0xa3c4ac) |\n                  *(((uVar3 & 7) << 1 | uVar3 < '\\0') + 0xa3c4ac) << 2) + 0x10))();\n    return;\n}\n",
        "token_count": 505
    },
    "009fccc5": {
        "rules": [
            "hash data using aphash/ab9c9a8537c84744923d9bbb8bd71d10"
        ],
        "decompiled_code": "\nuint32_t __fastcall fcn.009fccc5(uint param_1, int32_t param_2)\n\n{\n    uint32_t uVar1;\n    \n    uVar1 = *(param_2 + 4) & 0x7ff00000;\n    if (uVar1 != 0x7ff00000) {\n        return uVar1;\n    }\n    return *(param_2 + 4);\n}\n",
        "token_count": 92
    },
    "004012a8": {
        "rules": [
            "hash data using aphash/10489b186fc44711a1078750698db7a9",
            "encrypt data using HC-128/1d01b23c04404fe18b84a06c7e7d83b0"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004012a8(uint arg_8h, uint arg_ch, uint *arg_10h)\n\n{\n    uint var_8h;\n    uint var_4h;\n    \n    *0xe18714 = *arg_10h;\n    *0xe1c050 = 0xd15e210a;\n    *0xe1c054 = 0xffffffff;\n    if (*0xe1fbf4 == 0x6dc) {\n        *0xe46630 = 0xe2eeb842;\n        *0xe46634 = 0xffffffff;\n    }\n    *0xa4c3e4 = 0xd885057e;\n    fcn.00401190(arg_8h, arg_ch);\n    return;\n}\n",
        "token_count": 166
    },
    "00a09664": {
        "rules": [
            "decompress data using LZO/b26d4b886bd545b48ed63f32c6357c17",
            "decompress data using LZO/b26d4b886bd545b48ed63f32c6357c17"
        ],
        "decompiled_code": "\nvoid fcn.00a09664(void)\n\n{\n    uint8_t *puVar1;\n    int32_t unaff_EBP;\n    int32_t unaff_ESI;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    \n    if (*(unaff_EBP + -0x20) != unaff_ESI) {\n        if (*(unaff_EBP + -0x24) != unaff_ESI) {\n            puVar1 = *((*(unaff_EBP + -0x1c) >> 5) * 4 + 0xf15bc0) + 4 + (*(unaff_EBP + -0x1c) & 0x1f) * 0x40;\n            *puVar1 = *puVar1 & 0xfe;\n        }\n        fcn.00a0ac92(*(unaff_EBP + -0x1c));\n    }\n    return;\n}\n",
        "token_count": 207
    },
    "00a0973c": {
        "rules": [
            "decompress data using LZO/b26d4b886bd545b48ed63f32c6357c17",
            "decompress data using LZO/b26d4b886bd545b48ed63f32c6357c17"
        ],
        "decompiled_code": "\nvoid fcn.00a0973c(void)\n\n{\n    uint8_t *puVar1;\n    int32_t unaff_EBP;\n    int32_t unaff_ESI;\n    uint32_t *unaff_EDI;\n    uint var_20h;\n    uint var_1ch;\n    \n    if (*(unaff_EBP + -0x1c) != unaff_ESI) {\n        if (*(unaff_EBP + -0x20) != unaff_ESI) {\n            puVar1 = *((*unaff_EDI >> 5) * 4 + 0xf15bc0) + 4 + (*unaff_EDI & 0x1f) * 0x40;\n            *puVar1 = *puVar1 & 0xfe;\n        }\n        fcn.00a0ac92(*unaff_EDI);\n    }\n    return;\n}\n",
        "token_count": 192
    },
    "00a0af41": {
        "rules": [
            "decompress data using LZO/b26d4b886bd545b48ed63f32c6357c17",
            "decompress data using LZO/b26d4b886bd545b48ed63f32c6357c17"
        ],
        "decompiled_code": "\nvoid fcn.00a0af41(void)\n\n{\n    uint8_t *puVar1;\n    int32_t unaff_EBP;\n    uint32_t unaff_ESI;\n    int32_t unaff_EDI;\n    uint var_1ch;\n    \n    if (*(unaff_EBP + -0x1c) == unaff_EDI) {\n        puVar1 = *((unaff_ESI >> 5) * 4 + 0xf15bc0) + 4 + (unaff_ESI & 0x1f) * 0x40;\n        *puVar1 = *puVar1 & 0xfe;\n    }\n    fcn.00a0ac92(unaff_ESI);\n    return;\n}\n",
        "token_count": 160
    },
    "00a008cf": {
        "rules": [
            "encrypt data using Curve25519/bbf924b96e5b4ce780ce59f68f21b030"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00a00cf7)\n// WARNING: Removing unreachable block (ram,0x00a00cb7)\n// WARNING: Removing unreachable block (ram,0x00a00ccf)\n// WARNING: Removing unreachable block (ram,0x00a00c77)\n// WARNING: Removing unreachable block (ram,0x00a00d0f)\n// WARNING: Removing unreachable block (ram,0x00a00c8f)\n// WARNING: Removing unreachable block (ram,0x00a00b63)\n\nuint32_t fcn.00a008cf(void)\n\n{\n    char cVar1;\n    uint32_t uVar2;\n    char *pcVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    bool bVar6;\n    \n    do {\n        uVar5 = 0;\n        if (**0xf15940 == '_') {\n            *0xf15940 = *0xf15940 + 1;\n            uVar5 = 0x4000;\n        }\n        cVar1 = **0xf15940;\n        if (('@' < cVar1) && (cVar1 < '[')) {\n            uVar2 = **0xf15940 - 0x41;\n            *0xf15940 = *0xf15940 + 1;\n            if ((uVar2 & 1) == 0) {\n                uVar5 = uVar5 | 0x8000;\n            }\n            else {\n                uVar5 = uVar5 | 0xa000;\n            }\n            if (0x17 < uVar2) {\n                return uVar5;\n            }\n            if ((uVar5 & 0x8000) == 0) {\n                uVar5 = uVar5 & 0xffff9fff;\n            }\n            else {\n                uVar5 = uVar5 | 0x800;\n            }\n            uVar4 = uVar2 & 0x18;\n            if (uVar4 == 0) {\n                if ((uVar5 & 0x8000) == 0) {\n                    uVar5 = uVar5 | 0x800;\n                }\n                else {\n                    uVar5 = uVar5 | 0x40;\n                }\n            }\n            else if (uVar4 == 8) {\n                if ((uVar5 & 0x8000) == 0) {\n                    uVar5 = uVar5 & 0xfffff7ff | 0x1000;\n                }\n                else {\n                    uVar5 = uVar5 | 0x80;\n                }\n            }\n            else {\n                if (uVar4 != 0x10) {\n                    return 0xffff;\n                }\n                if ((uVar5 & 0x8000) == 0) {\n                    uVar5 = uVar5 & 0xffffe7ff;\n                }\n            }\n            uVar2 = uVar2 & 6;\n            if (uVar2 != 0) {\n                if (uVar2 == 2) {\n                    if ((uVar5 & 0x8000) == 0) {\n                        return uVar5 & 0xffff9fff;\n                    }\n                    return uVar5 | 0x200;\n                }\n                if (uVar2 != 4) {\n                    if (uVar2 != 6) {\n                        return 0xffff;\n                    }\n                    return uVar5 | 0x400;\n                }\n                return uVar5 | 0x100;\n            }\n            return uVar5;\n        }\n        if (cVar1 != '$') {\n            cVar1 = **0xf15940;\n            if (('/' < cVar1) && (cVar1 < '9')) {\n                *0xf15940 = *0xf15940 + 1;\n    // switch table (9 cases) at 0xa00d97\n                switch(cVar1) {\n                case '0':\n                    return 0x800;\n                case '1':\n                    return 0x1000;\n                case '2':\n                    return 0;\n                case '3':\n                    return 0x4000;\n                case '4':\n                    return 0x2000;\n                case '5':\n                    return 0x6000;\n                case '6':\n                    return 0x6800;\n                case '7':\n                    return 0x7000;\n                case '8':\n                    return 0x7800;\n                default:\n                    return 0xffff;\n                }\n            }\n            if (cVar1 != '9') {\n                return (cVar1 != '\\0') + 0xfffe;\n            }\n            *0xf15940 = *0xf15940 + 1;\n            return 0xfffd;\n        }\n        bVar6 = false;\n        pcVar3 = *0xf15940 + 1;\n        cVar1 = *pcVar3;\n        if ('B' < cVar1) {\n            if (cVar1 == 'C') {\n                uVar5 = 0x7c00;\n                goto code_r0x00a00c2d;\n            }\n            if (cVar1 == 'D') {\n                uVar5 = uVar5 | 0x9100;\n                goto code_r0x00a00c2d;\n            }\n            if (cVar1 == 'E') {\n                uVar5 = uVar5 | 0x9200;\n                goto code_r0x00a00c2d;\n            }\n            if (cVar1 != 'R') {\n                *0xf15940 = pcVar3;\n                return 0xffff;\n            }\n            pcVar3 = *0xf15940 + 2;\n            cVar1 = *pcVar3;\n            bVar6 = true;\n            if ((cVar1 < '0') || ('5' < cVar1)) {\n                *0xf15940 = pcVar3;\n                return (cVar1 == '\\0') + 0xfffe;\n            }\ncode_r0x00a00b43:\n            if (bVar6) {\n                uVar5 = uVar5 | 0x8e00;\n            }\n            else {\n                uVar5 = uVar5 | 0x8d00;\n            }\n            if ((*pcVar3 - 0x30U & 1) != 0) {\n                uVar5 = uVar5 | 0x2000;\n            }\n            uVar2 = *pcVar3 - 0x30U & 6;\n            if (uVar2 == 0) {\n                if ((uVar5 & 0x8000) == 0) {\n                    uVar5 = uVar5 | 0x800;\n                }\n                else {\n                    uVar5 = uVar5 | 0x40;\n                }\n            }\n            else if (uVar2 == 2) {\n                if ((uVar5 & 0x8000) == 0) {\n                    uVar5 = uVar5 & 0xfffff7ff | 0x1000;\n                }\n                else {\n                    uVar5 = uVar5 | 0x80;\n                }\n            }\n            else {\n                if (uVar2 != 4) {\n                    *0xf15940 = pcVar3;\n                    return 0xffff;\n                }\n                if ((uVar5 & 0x8000) == 0) {\n                    uVar5 = uVar5 & 0xffffe7ff;\n                }\n            }\n            goto code_r0x00a00c2d;\n        }\n        if (cVar1 == 'B') {\n            uVar5 = uVar5 | 0x9800;\n            goto code_r0x00a00c2d;\n        }\n        if (cVar1 == '\\0') {\n            uVar5 = 0xfffe;\n            pcVar3 = *0xf15940;\n            goto code_r0x00a00c2d;\n        }\n        if (cVar1 != '$') {\n            if (cVar1 < '0') {\n                *0xf15940 = pcVar3;\n                return 0xffff;\n            }\n            if ('5' < cVar1) {\n                if (cVar1 != 'A') {\n                    *0xf15940 = pcVar3;\n                    return 0xffff;\n                }\n                uVar5 = uVar5 | 0x9000;\n                goto code_r0x00a00c2d;\n            }\n            goto code_r0x00a00b43;\n        }\n        if ((*0xf15940)[2] == 'P') {\n            pcVar3 = *0xf15940 + 2;\n        }\n        *0xf15940 = pcVar3 + 1;\n        cVar1 = **0xf15940;\n        if (cVar1 < 'K') {\n            if (cVar1 == 'J') {\ncode_r0x00a00abc:\n                cVar1 = pcVar3[2];\n                if (('/' < cVar1) && (cVar1 < ':')) {\n                    *0xf15940 = pcVar3 + cVar1 + -0x2d;\n                    uVar5 = fcn.00a008cf();\n                    return uVar5 | 0x10000;\n                }\n                uVar5 = 0xffff;\n                pcVar3 = pcVar3 + 2;\ncode_r0x00a00c2d:\n                *0xf15940 = pcVar3 + 1;\n                return uVar5;\n            }\n            if (cVar1 == '\\0') {\n                return 0xfffe;\n            }\n            if (cVar1 != 'F') {\n                bVar6 = cVar1 == 'H';\ncode_r0x00a00976:\n                if (!bVar6) {\n                    return 0xffff;\n                }\n            }\n        }\n        else {\n            if (cVar1 < 'L') {\n                return 0xffff;\n            }\n            if ('M' < cVar1) {\n                if ('O' < cVar1) {\n                    bVar6 = cVar1 == 'Q';\n                    goto code_r0x00a00976;\n                }\n                goto code_r0x00a00abc;\n            }\n        }\n        *0xf15940 = pcVar3 + 2;\n    } while( true );\n}\n",
        "token_count": 2259
    },
    "00401028": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00401028(int32_t param_1, int32_t param_2)\n\n{\n    for (; param_1 != param_2; param_1 = param_1 + 0x1c) {\n        fcn.00401091();\n    }\n    return;\n}\n",
        "token_count": 63
    },
    "00401041": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00401041(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    fcn.004010a0(arg_8h, arg_ch, arg_10h, arg_14h);\n    return arg_8h;\n}\n",
        "token_count": 67
    },
    "00401078": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t ** __thiscall fcn.00401078(int32_t **param_1, int32_t param_2)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int32_t *piVar3;\n    \n    piVar1 = *param_1;\n    if (piVar1 == NULL) {\n        fcn.009f49d7();\n        piVar1 = *param_1;\n        if (piVar1 != NULL) goto code_r0x009f2966;\n        iVar2 = 0;\n    }\n    else {\ncode_r0x009f2966:\n        iVar2 = *piVar1;\n    }\n    piVar3 = param_1[1] + param_2 * 7;\n    if (piVar3 < *(iVar2 + 0x10) || piVar3 == *(iVar2 + 0x10)) {\n        if (piVar1 == NULL) {\n            iVar2 = 0;\n        }\n        else {\n            iVar2 = *piVar1;\n        }\n        if (*(iVar2 + 0xc) <= piVar3) goto code_r0x009f2991;\n    }\n    fcn.009f49d7();\ncode_r0x009f2991:\n    param_1[1] = param_1[1] + param_2 * 7;\n    return param_1;\n}\n",
        "token_count": 305
    },
    "004010a0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.004010a0(uint param_1, int32_t param_2, uint param_3, int32_t param_4)\n\n{\n    fcn.009f430e(param_1, param_2 * 2, param_3, param_4 * 2);\n    return;\n}\n",
        "token_count": 68
    },
    "004010b4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.004010b4(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t unaff_EBP;\n    int32_t iVar1;\n    int32_t arg_8h_00;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_18h;\n    uint var_4h;\n    \n    fcn.009f4feb(0x30);\n    arg_8h_00 = *(unaff_EBP + 8);\n    iVar1 = *(unaff_EBP + 0x10);\n    *(unaff_EBP + -0x34) = iVar1;\n    *(unaff_EBP + -0x38) = iVar1;\n    *(unaff_EBP + -0x18) = 7;\n    fcn.00401181(0);\n    *(unaff_EBP + -4) = 0;\n    while (arg_8h_00 != *(unaff_EBP + 0xc)) {\n        if (iVar1 != 0) {\n            fcn.004011f9(unaff_EBP + -0x30);\n        }\n        fcn.004011bd(arg_8h_00);\n        iVar1 = iVar1 + 0x1c;\n        *(unaff_EBP + -0x34) = iVar1;\n        arg_8h_00 = arg_8h_00 + 0x1c;\n        *(unaff_EBP + -0x3c) = arg_8h_00;\n    }\n    *(unaff_EBP + -4) = 0xffffffff;\n    fcn.00401073(1, 0);\n    fcn.009f5047();\n    return;\n}\n",
        "token_count": 410
    },
    "004010e1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004010e1(int32_t arg_8h, uint arg_ch)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    int32_t in_ECX;\n    \n    cVar1 = fcn.004011ea(arg_8h);\n    if (cVar1 == '\\0') {\n        cVar1 = fcn.004011ae(arg_ch, 0);\n        if (cVar1 != '\\0') {\n            if (*(in_ECX + 0x18) < 0x10) {\n                iVar2 = in_ECX + 4;\n            }\n            else {\n                iVar2 = *(in_ECX + 4);\n            }\n            fcn.0040121c(iVar2, *(in_ECX + 0x18), arg_8h, arg_ch);\n            fcn.00401253(arg_ch);\n        }\n    }\n    else {\n        if (*(in_ECX + 0x18) < 0x10) {\n            iVar2 = in_ECX + 4;\n        }\n        else {\n            iVar2 = *(in_ECX + 4);\n        }\n        fcn.0040124e(in_ECX, arg_8h - iVar2, arg_ch);\n    }\n    return;\n}\n",
        "token_count": 275
    },
    "0040112c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0040112c(int32_t arg_8h, int32_t arg_ch, int32_t arg_10h, uint noname_3, uint arg_18h)\n\n{\n    uint var_4h;\n    \n    fcn.00401131(arg_8h, arg_ch, arg_10h);\n    return arg_10h + ((arg_ch - arg_8h) / 0x1c) * -0x1c;\n}\n",
        "token_count": 107
    },
    "00401140": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.00401140(int32_t param_1, uint param_2, uint param_3)\n\n{\n    fcn.004012f8(param_2, param_3, param_1 + 8);\n    return;\n}\n",
        "token_count": 56
    },
    "00401145": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** __thiscall fcn.00401145(code **param_1, int32_t param_2)\n\n{\n    fcn.009f4469(param_2);\n    *param_1 = vtable.std::logic_error.0;\n    fcn.004012b7(param_2 + 0xc);\n    return param_1;\n}\n",
        "token_count": 76
    },
    "00401181": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.00401181(int32_t param_1, int32_t param_2)\n\n{\n    *(param_1 + 0x14) = param_2;\n    if (*(param_1 + 0x18) < 8) {\n        param_1 = param_1 + 4;\n    }\n    else {\n        param_1 = *(param_1 + 4);\n    }\n    *(param_1 + param_2 * 2) = 0;\n    return;\n}\n",
        "token_count": 112
    },
    "00401186": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00401186(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    fcn.0040123a(arg_8h, arg_ch, arg_10h, arg_14h);\n    return arg_8h;\n}\n",
        "token_count": 67
    },
    "00401195": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00401195(int32_t param_1, int32_t param_2, uint param_3)\n\n{\n    for (; param_1 != param_2; param_1 = param_1 + 0x1c) {\n        fcn.00401212(param_3, 0, 0xffffffff);\n    }\n    return;\n}\n",
        "token_count": 78
    },
    "004011a4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.004011a4(int32_t param_1, uint param_2, uint param_3, uint param_4)\n\n{\n    fcn.00401299(param_2, param_3, param_4, param_1 + 8);\n    return;\n}\n",
        "token_count": 65
    },
    "00401203": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "hash data using fnv/71d430608aea45068f0f63fc2cdc3004"
        ],
        "decompiled_code": "\nuint32_t fcn.00401203(void)\n\n{\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    *0xe18714 = *0xe18714 * 0x343fd + 0x269ec3;\n    return *0xe18714 >> 0x10 & 0x7fff;\n}\n",
        "token_count": 79
    },
    "00401208": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00401208(int32_t arg_8h, uint arg_ch)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    int32_t in_ECX;\n    \n    cVar1 = fcn.004012fd(arg_8h);\n    if (cVar1 == '\\0') {\n        cVar1 = fcn.00401285(arg_ch, 0);\n        if (cVar1 != '\\0') {\n            if (*(in_ECX + 0x18) < 8) {\n                iVar2 = in_ECX + 4;\n            }\n            else {\n                iVar2 = *(in_ECX + 4);\n            }\n            fcn.00401041(iVar2, *(in_ECX + 0x18), arg_8h, arg_ch);\n            fcn.00401181(arg_ch);\n        }\n    }\n    else {\n        if (*(in_ECX + 0x18) < 8) {\n            iVar2 = in_ECX + 4;\n        }\n        else {\n            iVar2 = *(in_ECX + 4);\n        }\n        fcn.00401212(in_ECX, arg_8h - iVar2 >> 1, arg_ch);\n    }\n    return;\n}\n",
        "token_count": 271
    },
    "0040120d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040120d(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    uint var_4h;\n    \n    fcn.00401113(arg_8h, arg_ch, arg_10h, arg_14h);\n    return;\n}\n",
        "token_count": 71
    },
    "00401212": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00401212(int32_t arg_8h, uint32_t arg_ch, uint32_t arg_10h)\n\n{\n    char cVar1;\n    int32_t arg_8h_00;\n    int32_t in_ECX;\n    uint32_t arg_14h;\n    \n    if (*(arg_8h + 0x14) < arg_ch) {\n        fcn.009f4264();\n    }\n    arg_14h = *(arg_8h + 0x14) - arg_ch;\n    if (arg_10h < arg_14h) {\n        arg_14h = arg_10h;\n    }\n    if (in_ECX == arg_8h) {\n        fcn.004010e6(arg_14h + arg_ch, 0xffffffff);\n        fcn.004010e6(0, arg_ch);\n    }\n    else {\n        cVar1 = fcn.00401285(arg_14h, 0);\n        if (cVar1 != '\\0') {\n            if (*(arg_8h + 0x18) < 8) {\n                arg_8h = arg_8h + 4;\n            }\n            else {\n                arg_8h = *(arg_8h + 4);\n            }\n            if (*(in_ECX + 0x18) < 8) {\n                arg_8h_00 = in_ECX + 4;\n            }\n            else {\n                arg_8h_00 = *(in_ECX + 4);\n            }\n            fcn.00401041(arg_8h_00, *(in_ECX + 0x18), arg_8h + arg_ch * 2, arg_14h);\n            fcn.00401181(arg_14h);\n        }\n    }\n    return;\n}\n",
        "token_count": 396
    },
    "0040121c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0040121c(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    fcn.009f430e(arg_8h, arg_ch, arg_10h, arg_14h);\n    return arg_8h;\n}\n",
        "token_count": 68
    },
    "0040123a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.0040123a(uint param_1, int32_t param_2, uint param_3, int32_t param_4)\n\n{\n    fcn.009f438b(param_1, param_2 * 2, param_3, param_4 * 2);\n    return;\n}\n",
        "token_count": 68
    },
    "0040124e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040124e(int32_t arg_8h, uint32_t arg_ch, uint32_t arg_10h)\n\n{\n    char cVar1;\n    int32_t arg_8h_00;\n    int32_t in_ECX;\n    uint32_t arg_14h;\n    \n    if (*(arg_8h + 0x14) < arg_ch) {\n        fcn.009f4264();\n    }\n    arg_14h = *(arg_8h + 0x14) - arg_ch;\n    if (arg_10h < arg_14h) {\n        arg_14h = arg_10h;\n    }\n    if (in_ECX == arg_8h) {\n        fcn.0040114a(arg_14h + arg_ch, 0xffffffff);\n        fcn.0040114a(0, arg_ch);\n    }\n    else {\n        cVar1 = fcn.004011ae(arg_14h, 0);\n        if (cVar1 != '\\0') {\n            if (*(arg_8h + 0x18) < 0x10) {\n                arg_8h = arg_8h + 4;\n            }\n            else {\n                arg_8h = *(arg_8h + 4);\n            }\n            if (*(in_ECX + 0x18) < 0x10) {\n                arg_8h_00 = in_ECX + 4;\n            }\n            else {\n                arg_8h_00 = *(in_ECX + 4);\n            }\n            fcn.0040121c(arg_8h_00, *(in_ECX + 0x18), arg_8h + arg_ch, arg_14h);\n            fcn.00401253(arg_14h);\n        }\n    }\n    return;\n}\n",
        "token_count": 399
    },
    "00401253": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.00401253(int32_t param_1, int32_t param_2)\n\n{\n    *(param_1 + 0x14) = param_2;\n    if (*(param_1 + 0x18) < 0x10) {\n        param_1 = param_1 + 4;\n    }\n    else {\n        param_1 = *(param_1 + 4);\n    }\n    *(param_1 + param_2) = 0;\n    return;\n}\n",
        "token_count": 111
    },
    "00401271": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00401271(int32_t arg_8h, int32_t arg_ch, uint arg_10h)\n\n{\n    int32_t in_ECX;\n    \n    fcn.0040120d(arg_8h, arg_ch, arg_10h, in_ECX + 8);\n    return arg_ch * 0x1c + arg_8h;\n}\n",
        "token_count": 87
    },
    "0040128f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0040128f(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    fcn.009f438b(arg_8h, arg_ch, arg_10h, arg_14h);\n    return arg_8h;\n}\n",
        "token_count": 68
    },
    "00401299": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00401299(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    uint var_4h;\n    \n    fcn.004010b4(arg_8h, arg_ch, arg_10h);\n    return;\n}\n",
        "token_count": 66
    },
    "004012f8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004012f8(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    uint var_4h;\n    \n    fcn.00401028(arg_8h, arg_ch, arg_10h);\n    return;\n}\n",
        "token_count": 60
    },
    "00401302": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00401302(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    uint var_4h;\n    \n    fcn.0040112c(arg_8h, arg_ch, arg_10h, arg_ch, arg_ch);\n    return;\n}\n",
        "token_count": 66
    },
    "009f5519": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f5519(uint arg_8h, uint arg_ch)\n\n{\n    fcn.009f5455(arg_8h, arg_ch, 0x40);\n    return;\n}\n",
        "token_count": 47
    },
    "009f568d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f568d(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.009f5583(fcn.009f9c47, arg_8h, arg_ch, 0, &arg_10h);\n    return;\n}\n",
        "token_count": 66
    },
    "009f56ad": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f56ad(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    fcn.009f5583(fcn.009f9c47, arg_8h, arg_ch, arg_10h, &arg_14h);\n    return;\n}\n",
        "token_count": 74
    },
    "009f56ce": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f56ce(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.009f5583(fcn.009facce, arg_8h, arg_ch, 0, &arg_10h);\n    return;\n}\n",
        "token_count": 64
    },
    "009f56ee": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f56ee(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    fcn.009f5583(fcn.009facce, arg_8h, arg_ch, arg_10h, &arg_14h);\n    return;\n}\n",
        "token_count": 72
    },
    "009f5a66": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_1ch\n\nvoid __cdecl fcn.009f5a66(uint arg_8h, uint arg_ch)\n\n{\n    uint *puVar1;\n    int32_t iVar2;\n    uint arg_8h_00;\n    int32_t iVar3;\n    uint uVar4;\n    int32_t unaff_EBP;\n    uint var_1ch;\n    uint arg_10h;\n    uint var_4h;\n    \n    fcn.009f9490(0xa37508, 0xc);\n    if (*(unaff_EBP + 8) == 0) {\n        puVar1 = fcn.009f5eec();\n        *puVar1 = 0x16;\n        fcn.009f49b1(0, 0, 0, 0, 0);\n    }\n    else {\n        iVar2 = fcn.009f8eda();\n        fcn.009f8ff2(1, iVar2 + 0x20);\n        *(unaff_EBP + -4) = 0;\n        iVar2 = fcn.009f8eda();\n        arg_8h_00 = fcn.009fce0c(iVar2 + 0x20);\n        iVar2 = unaff_EBP + 0xc;\n        arg_10h = 0;\n        uVar4 = *(unaff_EBP + 8);\n        iVar3 = fcn.009f8eda();\n        uVar4 = fcn.009fcfab(iVar3 + 0x20, uVar4, arg_10h, iVar2);\n        *(unaff_EBP + -0x1c) = uVar4;\n        iVar2 = fcn.009f8eda();\n        fcn.009fcea8(arg_8h_00, iVar2 + 0x20);\n        *(unaff_EBP + -4) = 0xfffffffe;\n        fcn.009f5b02();\n    }\n    fcn.009f94d5();\n    return;\n}\n",
        "token_count": 466
    },
    "009f5b02": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.009f5b02(void)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.009f8eda();\n    fcn.009f9060(1, iVar1 + 0x20);\n    return;\n}\n",
        "token_count": 56
    },
    "009f5b15": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f5b15(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.009fdbd3(arg_8h, arg_ch, &arg_10h);\n    return;\n}\n",
        "token_count": 55
    },
    "009f5b2e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f5b2e(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.009fdbf0(arg_8h, arg_ch, &arg_10h);\n    return;\n}\n",
        "token_count": 56
    },
    "009f5b47": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f5b47(uint arg_8h, uint arg_ch)\n\n{\n    fcn.009fdbf0(arg_8h, 0, &arg_ch);\n    return;\n}\n",
        "token_count": 47
    },
    "009f5b5f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f5b5f(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.009fdc0d(arg_8h, arg_ch, &arg_10h);\n    return;\n}\n",
        "token_count": 56
    },
    "009f5b78": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f5b78(uint arg_8h, uint arg_ch)\n\n{\n    fcn.009fdc0d(arg_8h, 0, &arg_ch);\n    return;\n}\n",
        "token_count": 47
    },
    "009f8b6b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009f8b6b(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    uint var_2c8h;\n    uint var_8fh;\n    \n    fcn.009f8d34(arg_8h, arg_ch);\n    fcn.009f8d34(arg_10h, arg_14h);\n    fcn.009fcab7();\n    fcn.009f8bb3();\n    return;\n}\n",
        "token_count": 112
    },
    "009fdb43": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_20h\n// WARNING: Variable defined which should be unmapped: var_1ch\n\nvoid __cdecl fcn.009fdb43(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    uint arg_8h_00;\n    uint uVar3;\n    int32_t unaff_EBP;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.009f9490(0xa37988, 0x10);\n    iVar1 = fcn.009f8eda();\n    iVar1 = iVar1 + 0x20;\n    *(unaff_EBP + -0x1c) = iVar1;\n    if (*(unaff_EBP + 0xc) == 0) {\n        puVar2 = fcn.009f5eec();\n        *puVar2 = 0x16;\n        fcn.009f49b1(0, 0, 0, 0, 0);\n    }\n    else {\n        fcn.009f8fb1(iVar1);\n        *(unaff_EBP + -4) = 0;\n        arg_8h_00 = fcn.009fce0c(iVar1);\n        uVar3 = (**(unaff_EBP + 8))(iVar1, *(unaff_EBP + 0xc), *(unaff_EBP + 0x10), *(unaff_EBP + 0x14));\n        *(unaff_EBP + -0x20) = uVar3;\n        fcn.009fcea8(arg_8h_00, iVar1);\n        *(unaff_EBP + -4) = 0xfffffffe;\n        fcn.009fdbcb();\n    }\n    fcn.009f94d5();\n    return;\n}\n",
        "token_count": 442
    },
    "009fdbd3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009fdbd3(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.009fdb43(fcn.009fcfab, arg_8h, arg_ch, arg_10h);\n    return;\n}\n",
        "token_count": 59
    },
    "009fdbf0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009fdbf0(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.009fdb43(fcn.00a0c9cd, arg_8h, arg_ch, arg_10h);\n    return;\n}\n",
        "token_count": 62
    },
    "009fdc0d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009fdc0d(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.009fdb43(fcn.00a0d76b, arg_8h, arg_ch, arg_10h);\n    return;\n}\n",
        "token_count": 62
    },
    "009fdc2a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009fdc2a(uint arg_8h, uint arg_ch)\n\n{\n    fcn.009fdb43(fcn.009fcfab, arg_8h, 0, arg_ch);\n    return;\n}\n",
        "token_count": 51
    },
    "009fdc46": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009fdc46(uint arg_8h, uint arg_ch)\n\n{\n    fcn.009fdb43(fcn.00a0c9cd, arg_8h, 0, arg_ch);\n    return;\n}\n",
        "token_count": 53
    },
    "009fdc62": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009fdc62(uint arg_8h, uint arg_ch)\n\n{\n    fcn.009fdb43(fcn.00a0d76b, arg_8h, 0, arg_ch);\n    return;\n}\n",
        "token_count": 53
    },
    "009fe9b3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.009fe9b3(int32_t *arg_8h)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    \n    if ((arg_8h == NULL) || (*0xf1528c == 0)) {\n        puVar1 = fcn.009f5eec();\n        *puVar1 = 0x16;\n        fcn.009f49b1(0, 0, 0, 0, 0);\n        uVar2 = 0x16;\n    }\n    else {\n        *arg_8h = *0xf1528c;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 152
    },
    "009fe9ef": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.009fe9ef(int32_t *arg_8h)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    \n    if ((arg_8h == NULL) || (*0xf15288 == 0)) {\n        puVar1 = fcn.009f5eec();\n        *puVar1 = 0x16;\n        fcn.009f49b1(0, 0, 0, 0, 0);\n        uVar2 = 0x16;\n    }\n    else {\n        *arg_8h = *0xf15288;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 149
    },
    "009febdc": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.009febdc(uint arg_8h)\n\n{\n    fcn.009feab0(arg_8h, 0, 0);\n    return;\n}\n",
        "token_count": 40
    },
    "009ff3c3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.009ff3c3(void)\n\n{\n    code **ppcVar1;\n    \n    ppcVar1 = 0xa36c18;\n    do {\n        if (*ppcVar1 != NULL) {\n            (**ppcVar1)();\n        }\n        ppcVar1 = ppcVar1 + 1;\n    } while (ppcVar1 < 0xa36d18);\n    return;\n}\n",
        "token_count": 92
    },
    "00a0969e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.00a0969e(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h, uint arg_1ch)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    int32_t unaff_EBP;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.009f9490(0xa37b90, 0x14);\n    *(unaff_EBP + -0x1c) = 0;\n    puVar1 = *(unaff_EBP + 0x18);\n    if (((puVar1 == NULL) || (*puVar1 = 0xffffffff,  *(unaff_EBP + 8) == 0)) ||\n       ((*(unaff_EBP + 0x1c) != 0 && ((*(unaff_EBP + 0x14) & 0xfffffe7f) != 0)))) {\n        puVar1 = fcn.009f5eec();\n        *puVar1 = 0x16;\n        fcn.009f49b1(0, 0, 0, 0, 0);\n    }\n    else {\n        *(unaff_EBP + -4) = 0;\n        uVar2 = fcn.00a08ec9(unaff_EBP + -0x1c, *(unaff_EBP + 8), *(unaff_EBP + 0xc), *(unaff_EBP + 0x10), \n                             *(unaff_EBP + 0x14));\n        *(unaff_EBP + -0x20) = uVar2;\n        *(unaff_EBP + -4) = 0xfffffffe;\n        fcn.00a0973c();\n        if (*(unaff_EBP + -0x20) != 0) {\n            *puVar1 = 0xffffffff;\n        }\n    }\n    fcn.009f94d5();\n    return;\n}\n",
        "token_count": 460
    },
    "00a0976a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00a0976a(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    int32_t iVar1;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    iVar1 = fcn.00a0969e(arg_8h, arg_ch, arg_10h, arg_14h, &var_4h, 0);\n    if (iVar1 != 0) {\n        return 0xffffffff;\n    }\n    return var_4h;\n}\n",
        "token_count": 125
    },
    "00a0979c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a0979c(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h)\n\n{\n    fcn.00a0969e(arg_ch, arg_10h, arg_14h, arg_18h, arg_8h, 1);\n    return;\n}\n",
        "token_count": 80
    },
    "00a0c7b5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00a0c7b5(void)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.009f8eda();\n    fcn.009f9060(1, iVar1 + 0x20);\n    return;\n}\n",
        "token_count": 58
    },
    "00a0c7c8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a0c7c8(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.00a1870f(arg_8h, arg_ch, &arg_10h);\n    return;\n}\n",
        "token_count": 58
    },
    "00a0c7e1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a0c7e1(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.00a1872c(arg_8h, arg_ch, &arg_10h);\n    return;\n}\n",
        "token_count": 58
    },
    "00a0c7fa": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a0c7fa(uint arg_8h, uint arg_ch)\n\n{\n    fcn.00a1872c(arg_8h, 0, &arg_ch);\n    return;\n}\n",
        "token_count": 49
    },
    "00a0c812": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a0c812(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.00a18749(arg_8h, arg_ch, &arg_10h);\n    return;\n}\n",
        "token_count": 55
    },
    "00a0c82b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a0c82b(uint arg_8h, uint arg_ch)\n\n{\n    fcn.00a18749(arg_8h, 0, &arg_ch);\n    return;\n}\n",
        "token_count": 48
    },
    "00a0ec53": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a0ec53(uint arg_8h, uint arg_ch)\n\n{\n    fcn.00a0ebab(arg_8h, arg_ch, 0);\n    return;\n}\n",
        "token_count": 47
    },
    "00a0edd2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a0edd2(uint arg_8h, uint arg_ch)\n\n{\n    fcn.00a0ed2a(arg_8h, arg_ch, 0);\n    return;\n}\n",
        "token_count": 48
    },
    "00a17afa": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00a17afa(uint *arg_8h)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    \n    if (arg_8h == NULL) {\n        puVar1 = fcn.009f5eec();\n        *puVar1 = 0x16;\n        fcn.009f49b1(0, 0, 0, 0, 0);\n        uVar2 = 0x16;\n    }\n    else {\n        *arg_8h = *0xf15ae8;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 138
    },
    "00a1867f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_20h\n// WARNING: Variable defined which should be unmapped: var_1ch\n\nvoid __cdecl fcn.00a1867f(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    uint arg_8h_00;\n    uint uVar3;\n    int32_t unaff_EBP;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.009f9490(0xa37e78, 0x10);\n    iVar1 = fcn.009f8eda();\n    iVar1 = iVar1 + 0x20;\n    *(unaff_EBP + -0x1c) = iVar1;\n    if (*(unaff_EBP + 0xc) == 0) {\n        puVar2 = fcn.009f5eec();\n        *puVar2 = 0x16;\n        fcn.009f49b1(0, 0, 0, 0, 0);\n    }\n    else {\n        fcn.009f8fb1(iVar1);\n        *(unaff_EBP + -4) = 0;\n        arg_8h_00 = fcn.009fce0c(iVar1);\n        uVar3 = (**(unaff_EBP + 8))(iVar1, *(unaff_EBP + 0xc), *(unaff_EBP + 0x10), *(unaff_EBP + 0x14));\n        *(unaff_EBP + -0x20) = uVar3;\n        fcn.009fcea8(arg_8h_00, iVar1);\n        *(unaff_EBP + -4) = 0xfffffffe;\n        fcn.00a18707();\n    }\n    fcn.009f94d5();\n    return;\n}\n",
        "token_count": 446
    },
    "00a1870f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a1870f(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.00a1867f(fcn.00a0bb81, arg_8h, arg_ch, arg_10h);\n    return;\n}\n",
        "token_count": 64
    },
    "00a1872c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a1872c(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.00a1867f(fcn.00a18860, arg_8h, arg_ch, arg_10h);\n    return;\n}\n",
        "token_count": 63
    },
    "00a18749": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a18749(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.00a1867f(fcn.00a19616, arg_8h, arg_ch, arg_10h);\n    return;\n}\n",
        "token_count": 62
    },
    "00a18766": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a18766(uint arg_8h, uint arg_ch)\n\n{\n    fcn.00a1867f(fcn.00a0bb81, arg_8h, 0, arg_ch);\n    return;\n}\n",
        "token_count": 55
    },
    "00a18782": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a18782(uint arg_8h, uint arg_ch)\n\n{\n    fcn.00a1867f(fcn.00a18860, arg_8h, 0, arg_ch);\n    return;\n}\n",
        "token_count": 54
    },
    "00a1879e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a1879e(uint arg_8h, uint arg_ch)\n\n{\n    fcn.00a1867f(fcn.00a19616, arg_8h, 0, arg_ch);\n    return;\n}\n",
        "token_count": 55
    },
    "00a1edb3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00a1edb3(uint *arg_8h)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    \n    if (arg_8h == NULL) {\n        puVar1 = fcn.009f5eec();\n        *puVar1 = 0x16;\n        fcn.009f49b1(0, 0, 0, 0, 0);\n        uVar2 = 0x16;\n    }\n    else {\n        *arg_8h = *0xa3d214;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 139
    },
    "00a1edec": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00a1edec(uint *arg_8h)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    \n    if (arg_8h == NULL) {\n        puVar1 = fcn.009f5eec();\n        *puVar1 = 0x16;\n        fcn.009f49b1(0, 0, 0, 0, 0);\n        uVar2 = 0x16;\n    }\n    else {\n        *arg_8h = *0xa3d218;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 139
    },
    "00a1ee25": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00a1ee25(uint *arg_8h)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    \n    if (arg_8h == NULL) {\n        puVar1 = fcn.009f5eec();\n        *puVar1 = 0x16;\n        fcn.009f49b1(0, 0, 0, 0, 0);\n        uVar2 = 0x16;\n    }\n    else {\n        *arg_8h = *0xa3d210;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 139
    },
    "009f4b8f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.009f4b8f(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    uint in_EAX;\n    uint uVar1;\n    uint var_8h;\n    uint var_4h;\n    \n    uVar1 = fcn.009f8320(arg_8h, arg_ch, arg_10h, arg_14h, in_EAX, 0, 0, 0);\n    return uVar1;\n}\n",
        "token_count": 113
    },
    "004010cd": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004010cd(uint arg_8h)\n\n{\n    int32_t arg_8h_00;\n    uint32_t uVar1;\n    uint uVar2;\n    int32_t in_ECX;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    arg_8h_00 = *(in_ECX + 0x10);\n    var_8h = in_ECX;\n    var_4h = in_ECX;\n    uVar1 = fcn.004011db();\n    if ((arg_8h_00 - *(in_ECX + 0xc)) / 0x1c < uVar1) {\n        uVar2 = fcn.00401271(arg_8h_00, 1, arg_8h);\n        *(in_ECX + 0x10) = uVar2;\n    }\n    else {\n        fcn.004010c8(arg_8h_00);\n        fcn.0040115e(&var_8h, var_8h, var_4h, arg_8h);\n    }\n    return;\n}\n",
        "token_count": 247
    },
    "00401131": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00401131(int32_t arg_8h, int32_t arg_ch, int32_t arg_10h)\n\n{\n    if (arg_8h != arg_ch) {\n        do {\n            arg_10h = arg_10h + -0x1c;\n            arg_ch = arg_ch + -0x1c;\n            fcn.004011bd(arg_ch);\n        } while (arg_ch != arg_8h);\n    }\n    return arg_10h;\n}\n",
        "token_count": 112
    },
    "004011bd": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_14h\n\nvoid __cdecl fcn.004011bd(int32_t arg_8h)\n\n{\n    uint uVar1;\n    uint uVar2;\n    uint uVar3;\n    int32_t in_ECX;\n    uint var_14h;\n    uint var_4h;\n    \n    if (in_ECX != arg_8h) {\n        var_14h = *(in_ECX + 4);\n        uVar1 = *(in_ECX + 8);\n        uVar2 = *(in_ECX + 0xc);\n        uVar3 = *(in_ECX + 0x10);\n        *(in_ECX + 4) = *(arg_8h + 4);\n        *(in_ECX + 8) = *(arg_8h + 8);\n        *(in_ECX + 0xc) = *(arg_8h + 0xc);\n        *(in_ECX + 0x10) = *(arg_8h + 0x10);\n        *(arg_8h + 4) = var_14h;\n        *(arg_8h + 8) = uVar1;\n        *(arg_8h + 0xc) = uVar2;\n        *(arg_8h + 0x10) = uVar3;\n        uVar1 = *(in_ECX + 0x14);\n        *(in_ECX + 0x14) = *(arg_8h + 0x14);\n        *(arg_8h + 0x14) = uVar1;\n        uVar1 = *(in_ECX + 0x18);\n        *(in_ECX + 0x18) = *(arg_8h + 0x18);\n        *(arg_8h + 0x18) = uVar1;\n    }\n    fcn.009f4f3d(var_14h);\n    return;\n}\n",
        "token_count": 422
    },
    "00401127": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.00401127(int32_t param_1)\n\n{\n    fcn.00401168();\n    *(param_1 + 0xc) = 0;\n    *(param_1 + 0x10) = 0;\n    *(param_1 + 0x14) = 0;\n    return param_1;\n}\n",
        "token_count": 79
    },
    "00401316": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00401316(int32_t param_1)\n\n{\n    if (*(param_1 + 0xc) != 0) {\n        fcn.00401140(*(param_1 + 0xc), *(param_1 + 0x10));\n        fcn.009f4787(*(param_1 + 0xc));\n    }\n    *(param_1 + 0xc) = 0;\n    *(param_1 + 0x10) = 0;\n    *(param_1 + 0x14) = 0;\n    return;\n}\n",
        "token_count": 127
    },
    "00a1ffe1": {
        "rules": [
            "create or open file"
        ],
        "decompiled_code": "\nvoid fcn.00a1ffe1(void)\n\n{\n    *0xa3d2c4 = (**0xf18484)(\"CONOUT$\", 0x40000000, 3, 0, 3, 0, 0);\n    return;\n}\n",
        "token_count": 58
    },
    "009f65f2": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.009f65f2(uint arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t *arg_8h_00;\n    int32_t *piVar3;\n    int32_t *piVar4;\n    int32_t unaff_EBP;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.009f9490(0xa37590, 0xc);\n    fcn.009ff7cd(0xe);\n    *(unaff_EBP + -4) = 0;\n    arg_8h_00 = *0xf14f1c;\n    iVar1 = *(unaff_EBP + 8);\n    iVar2 = *(iVar1 + 4);\n    if (iVar2 != 0) {\n        piVar3 = 0xf14f18;\n        do {\n            piVar4 = piVar3;\n            *(unaff_EBP + -0x1c) = arg_8h_00;\n            if (arg_8h_00 == NULL) goto code_r0x009f6636;\n            piVar3 = arg_8h_00;\n        } while (*arg_8h_00 != iVar2);\n        piVar4[1] = arg_8h_00[1];\n        fcn.009f6540(arg_8h_00);\ncode_r0x009f6636:\n        fcn.009f6540(*(iVar1 + 4));\n        *(iVar1 + 4) = 0;\n    }\n    *(unaff_EBP + -4) = 0xfffffffe;\n    fcn.009f6659();\n    fcn.009f94d5();\n    return;\n}\n",
        "token_count": 399
    },
    "009f6757": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.009f6757(uint arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t *arg_8h_00;\n    int32_t *piVar3;\n    int32_t *piVar4;\n    int32_t unaff_EBP;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.009f9490(0xa375d0, 0xc);\n    fcn.009ff7cd(0xe);\n    *(unaff_EBP + -4) = 0;\n    arg_8h_00 = *0xf14f1c;\n    iVar1 = *(unaff_EBP + 8);\n    iVar2 = *(iVar1 + 4);\n    if (iVar2 != 0) {\n        piVar3 = 0xf14f18;\n        do {\n            piVar4 = piVar3;\n            *(unaff_EBP + -0x1c) = arg_8h_00;\n            if (arg_8h_00 == NULL) goto code_r0x009f679b;\n            piVar3 = arg_8h_00;\n        } while (*arg_8h_00 != iVar2);\n        piVar4[1] = arg_8h_00[1];\n        fcn.009f6540(arg_8h_00);\ncode_r0x009f679b:\n        fcn.009f6540(*(iVar1 + 4));\n        *(iVar1 + 4) = 0;\n    }\n    *(unaff_EBP + -4) = 0xfffffffe;\n    fcn.009f67be();\n    fcn.009f94d5();\n    return;\n}\n",
        "token_count": 399
    },
    "00a1e602": {
        "rules": [
            "get geographical location"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00a1e602(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    (**0xf1838c)(arg_8h, arg_ch, arg_10h, arg_14h);\n    return;\n}\n",
        "token_count": 65
    }
}