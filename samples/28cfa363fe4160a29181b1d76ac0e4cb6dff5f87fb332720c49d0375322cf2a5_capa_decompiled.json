{
    "00401044": {
        "rules": [
            "decompress data using aPLib/06666ba0b6a14a5481e4ee6eb664d454"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid fcn.00401044(void)\n\n{\n    uint8_t uVar1;\n    uint uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    int32_t unaff_EBP;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_19h;\n    uint var_4h;\n    \n    fcn.00401110(0x4050c8, 0x18);\n    *(unaff_EBP + -4) = 0;\n    *(unaff_EBP + -0x24) = 9;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetCommandLineA)();\n    *(unaff_EBP + -0x20) = uVar2;\n    uVar3 = 0;\n    while( true ) {\n        *(unaff_EBP + -0x28) = uVar3;\n        uVar1 = **(unaff_EBP + -0x20);\n        *(unaff_EBP + -0x19) = uVar1;\n        *(unaff_EBP + -0x20) = *(unaff_EBP + -0x20) + 1;\n        if (uVar1 == 0) break;\n        uVar3 = uVar3 << 8 | uVar3 >> 0x18;\n        *(unaff_EBP + -0x28) = uVar3;\n        iVar4 = uVar3 + uVar1;\n        *(unaff_EBP + -0x28) = iVar4;\n        uVar3 = iVar4 + 0x49c2;\n    }\n    if ((((((uVar3 != 0xa6c7ea19) && (uVar3 != 0xa2fc0ca9)) && (uVar3 != 0xa5c92035)) &&\n         ((uVar3 != 0x25b394f3 && (uVar3 != 0xa542dfd0)))) &&\n        ((uVar3 != 0xa6a3a9d2 && ((uVar3 != 0x371fd79a && (uVar3 != 0xf20355ab)))))) &&\n       ((uVar3 != 0x2d615331 && ((uVar3 != 0x307c723f && (uVar3 != 0)))))) {\n        *(unaff_EBP + -0x24) = *(unaff_EBP + -0x24) + -3;\n    }\n    (**(*(unaff_EBP + -0x24) * 4 + 0x433940))();\n    *(unaff_EBP + -4) = 0xffffffff;\n    fcn.0040114b();\n    return;\n}\n",
        "token_count": 611
    },
    "null": {
        "rules": [
            "decompress data using aPLib/06666ba0b6a14a5481e4ee6eb664d454",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Unable to track spacebase fully for stack\n// WARNING: Variable defined which should be unmapped: var_20h\n// WARNING: Variable defined which should be unmapped: var_1ch\n// WARNING: Variable defined which should be unmapped: var_18h\n// WARNING: Variable defined which should be unmapped: var_28h\n\nvoid entry0(uint32_t param_1, int32_t param_2)\n\n{\n    code *pcVar1;\n    ushort uVar2;\n    int16_t *piVar3;\n    int32_t iVar4;\n    uint uVar5;\n    int32_t *piVar6;\n    int32_t unaff_EBP;\n    int32_t unaff_retaddr;\n    uint var_7ch;\n    uint lpStartupInfo;\n    uint var_44h;\n    uint var_40h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_4h;\n    int32_t iStack4;\n    \n    iStack4 = 0x60;\n    var_4h = 0x4050d8;\n    fcn.00401110();\n    fcn.00402330();\n    *(unaff_EBP + -0x18) = &entry0::var_4h;\n    var_4h = 0x94;\n    iVar4 = unaff_retaddr;\n    (*_sym.imp.KERNEL32.dll_GetVersionExA)(&entry0::var_4h);\n    *0x433c78 = iVar4;\n    pcVar1 = _sym.imp.KERNEL32.dll_GetModuleHandleA;\n    *0x433c68 = param_2;\n    *0x433c74 = iStack4;\n    *0x433c6c = param_1 & 0x7fff;\n    if (param_2 != 2) {\n        *0x433c6c = *0x433c6c | 0x8000;\n    }\n    *0x433c70 = iStack4 * 0x100 + *0x433c78;\n    piVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(0);\n    if ((*piVar3 == 0x5a4d) && (piVar6 = *(piVar3 + 0x1e) + piVar3,  *piVar6 == 0x4550)) {\n        if (*(piVar6 + 6) == 0x10b) {\n            if (0xe < piVar6[0x1d]) {\n                iVar4 = piVar6[0x3a];\n                goto code_r0x0040134b;\n            }\n        }\n        else if ((*(piVar6 + 6) == 0x20b) && (0xe < piVar6[0x21])) {\n            iVar4 = piVar6[0x3e];\ncode_r0x0040134b:\n            *(unaff_EBP + -0x1c) = iVar4 != 0;\n            goto code_r0x00401351;\n        }\n    }\n    *(unaff_EBP + -0x1c) = 0;\ncode_r0x00401351:\n    iVar4 = fcn.004022dd(0);\n    if (iVar4 == 0) {\n        if (*0x433c08 == 1) {\n            fcn.00401a92();\n        }\n        fcn.0040191a(0x1c);\n        fcn.0040177f(0xff);\n    }\n    fcn.0040223b();\n    *(unaff_EBP + -4) = 0;\n    iVar4 = fcn.00402090();\n    if (iVar4 < 0) {\n        fcn.00401265(0x1b);\n    }\n    *0x434194 = (*_sym.imp.KERNEL32.dll_GetCommandLineA)();\n    *0x433c00 = fcn.00401f6e();\n    iVar4 = fcn.00401ecc();\n    if (iVar4 < 0) {\n        fcn.00401265(8);\n    }\n    iVar4 = fcn.00401c99();\n    if (iVar4 < 0) {\n        fcn.00401265(9);\n    }\n    iVar4 = fcn.004017af(1);\n    *(unaff_EBP + -0x28) = iVar4;\n    if (iVar4 != 0) {\n        fcn.00401265(iVar4);\n    }\n    *(unaff_EBP + -0x44) = 0;\n    (*_sym.imp.KERNEL32.dll_GetStartupInfoA)(unaff_EBP + -0x70);\n    uVar5 = fcn.00401c3c();\n    *(unaff_EBP + -0x20) = uVar5;\n    if ((*(unaff_EBP + -0x44) & 1) == 0) {\n        uVar2 = 10;\n    }\n    else {\n        uVar2 = *(unaff_EBP + -0x40);\n    }\n    uVar5 = (*pcVar1)(0, 0, *(unaff_EBP + -0x20), uVar2);\n    uVar5 = fcn.00401102(uVar5);\n    *(unaff_EBP + -0x2c) = uVar5;\n    if (*(unaff_EBP + -0x1c) == 0) {\n        fcn.004018da(uVar5);\n    }\n    fcn.004018fc();\n    *(unaff_EBP + -4) = 0xffffffff;\n    *(unaff_EBP + -0x80) = 0x401465;\n    fcn.0040114b();\n    return;\n}\n",
        "token_count": 1281
    },
    "004047d0": {
        "rules": [
            "decompress data using aPLib/06666ba0b6a14a5481e4ee6eb664d454"
        ],
        "decompiled_code": "\nuint32_t * fcn.004047d0(uint32_t *param_1, uint8_t param_2, uint32_t param_3)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint32_t *puVar4;\n    \n    if (param_3 == 0) {\n        return param_1;\n    }\n    uVar1 = param_2;\n    puVar4 = param_1;\n    if (3 < param_3) {\n        uVar2 = -param_1 & 3;\n        uVar3 = param_3;\n        if (uVar2 != 0) {\n            uVar3 = param_3 - uVar2;\n            do {\n                *puVar4 = param_2;\n                puVar4 = puVar4 + 1;\n                uVar2 = uVar2 - 1;\n            } while (uVar2 != 0);\n        }\n        uVar1 = uVar1 * 0x1010101;\n        param_3 = uVar3 & 3;\n        uVar3 = uVar3 >> 2;\n        if (uVar3 != 0) {\n            for (; uVar3 != 0; uVar3 = uVar3 - 1) {\n                *puVar4 = uVar1;\n                puVar4 = puVar4 + 1;\n            }\n            if (param_3 == 0) {\n                return param_1;\n            }\n        }\n    }\n    do {\n        *puVar4 = uVar1;\n        puVar4 = puVar4 + 1;\n        param_3 = param_3 - 1;\n    } while (param_3 != 0);\n    return param_1;\n}\n",
        "token_count": 387
    },
    "00401164": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint fcn.00401164(int32_t param_1, int32_t param_2, uint param_3)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t extraout_ECX;\n    uchar *puVar4;\n    int32_t iVar5;\n    int32_t iStack12;\n    uint uStack8;\n    \n    puVar4 = &stack0xfffffffc;\n    if ((*(param_1 + 4) & 6) == 0) {\n        iStack12 = param_1;\n        uStack8 = param_3;\n        *(param_2 + -4) = &iStack12;\n        iVar5 = *(param_2 + 0xc);\n        iVar3 = *(param_2 + 8);\n        iVar2 = fcn.00401556(param_2);\n        if (iVar2 == 0) {\n            *(param_1 + 4) = *(param_1 + 4) | 8;\n        }\n        else {\n            for (; iVar5 != -1; iVar5 = *(iVar3 + iVar5 * 0xc)) {\n                pcVar1 = *(iVar3 + 4 + iVar5 * 0xc);\n                if (pcVar1 != NULL) {\n                    iVar3 = (*pcVar1)();\n                    param_2 = *(puVar4 + 0xc);\n                    if (iVar3 != 0) {\n                        if (iVar3 < 0) {\n                            return 0;\n                        }\n                        iVar3 = *(param_2 + 8);\n                        fcn.00401468(param_2);\n                        puVar4 = param_2 + 0x10;\n                        fcn.004014aa(param_2, iVar5);\n                        fcn.0040153e(1);\n                        *(param_2 + 0xc) = *(iVar3 + extraout_ECX * 4);\n                        param_2 = 0;\n                        iVar5 = 0;\n                        (**(iVar3 + 8 + extraout_ECX * 4))();\n                    }\n                }\n                iVar3 = *(param_2 + 8);\n            }\n        }\n    }\n    else {\n        fcn.004014aa(param_2, 0xffffffff, &stack0xfffffffc, &stack0xfffffffc);\n    }\n    return 1;\n}\n",
        "token_count": 508
    },
    "004014aa": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid fcn.004014aa(int32_t param_1, int32_t param_2)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint *in_FS_OFFSET;\n    uint uStack28;\n    uint uStack24;\n    uint uStack20;\n    int32_t iStack16;\n    \n    iStack16 = param_1;\n    uStack24 = 0x401488;\n    uStack28 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &uStack28;\n    while( true ) {\n        iVar1 = *(param_1 + 8);\n        iVar2 = *(param_1 + 0xc);\n        if ((iVar2 == -1) || (iVar2 == param_2)) break;\n        uStack20 = *(iVar1 + iVar2 * 0xc);\n        *(param_1 + 0xc) = uStack20;\n        if (*(iVar1 + 4 + iVar2 * 0xc) == 0) {\n            fcn.0040153e(0x101);\n            (**(iVar1 + 8 + iVar2 * 0xc))();\n        }\n    }\n    *in_FS_OFFSET = uStack28;\n    return;\n}\n",
        "token_count": 263
    },
    "00401556": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.00401556(uint32_t *arg_8h)\n\n{\n    uint32_t *puVar1;\n    uint32_t uVar2;\n    code *pcVar3;\n    uint32_t *puVar4;\n    uint32_t *puVar5;\n    int32_t *piVar6;\n    int32_t iVar7;\n    uint32_t *puVar8;\n    uint32_t uVar9;\n    uint32_t uVar10;\n    int32_t iVar11;\n    int32_t iVar12;\n    int32_t in_FS_OFFSET;\n    uint lpBuffer;\n    int16_t *var_1ch;\n    uint var_ch;\n    int32_t var_8h;\n    uint32_t *var_4h;\n    \n    puVar4 = arg_8h;\n    pcVar3 = _sym.imp.KERNEL32.dll_InterlockedExchange;\n    puVar8 = arg_8h[2];\n    if ((puVar8 & 3) != 0) {\n        return 0;\n    }\n    var_4h = *(*(in_FS_OFFSET + 0x18) + 8);\n    if ((var_4h <= puVar8) && (puVar8 < *(*(in_FS_OFFSET + 0x18) + 4))) {\n        return 0;\n    }\n    puVar1 = arg_8h + 3;\n    if (*puVar1 == 0xffffffff) {\n        return 1;\n    }\n    uVar10 = 0;\n    arg_8h = NULL;\n    puVar5 = puVar8;\n    do {\n        if ((*puVar5 != 0xffffffff) && (uVar10 <= *puVar5)) {\n            return 0;\n        }\n        if (puVar5[1] != 0) {\n            arg_8h = arg_8h + 1;\n        }\n        uVar10 = uVar10 + 1;\n        puVar5 = puVar5 + 3;\n    } while (uVar10 <= *puVar1);\n    if ((arg_8h != NULL) && ((puVar1 = puVar4[-2],  puVar1 < var_4h || (puVar4 <= puVar1)))) {\n        return 0;\n    }\n    uVar10 = puVar8 & 0xfffff000;\n    iVar12 = 0;\n    if (0 < *0x433c10) {\n        do {\n            if (*(iVar12 * 4 + 0x433c18) == uVar10) {\n                if (iVar12 < 1) {\n                    return 1;\n                }\n                iVar7 = (*_sym.imp.KERNEL32.dll_InterlockedExchange)(0x433c58, 1);\n                if (iVar7 != 0) {\n                    return 1;\n                }\n                if (*(iVar12 * 4 + 0x433c18) == uVar10) goto code_r0x00401751;\n                iVar12 = *0x433c10 + -1;\n                if (iVar12 < 0) goto code_r0x0040173f;\n                goto code_r0x0040172f;\n            }\n            iVar12 = iVar12 + 1;\n        } while (iVar12 < *0x433c10);\n    }\n    iVar12 = (*_sym.imp.KERNEL32.dll_VirtualQuery)(puVar8, &lpBuffer, 0x1c);\n    if (iVar12 == 0) {\n        return 0xffffffff;\n    }\n    if (var_8h != 0x1000000) {\n        return 0xffffffff;\n    }\n    if ((var_ch & 0xcc) != 0) {\n        if (((*var_1ch != 0x5a4d) || (piVar6 = *(var_1ch + 0x1e) + var_1ch,  *piVar6 != 0x4550)) ||\n           (*(piVar6 + 6) != 0x10b)) {\n            return 0xffffffff;\n        }\n        uVar9 = *(piVar6 + 5);\n        if (*(piVar6 + 6) == 0) {\n            return 0xffffffff;\n        }\n        uVar2 = *(piVar6 + uVar9 + 0x24);\n        if (((uVar2 <= puVar8 - var_1ch) && (puVar8 - var_1ch < *(piVar6 + uVar9 + 0x20) + uVar2)) &&\n           ((*(piVar6 + uVar9 + 0x3f) & 0x80) != 0)) {\n            return 0;\n        }\n    }\n    iVar7 = (*_sym.imp.KERNEL32.dll_InterlockedExchange)(0x433c58, 1);\n    iVar12 = *0x433c10;\n    if (iVar7 != 0) {\n        return 1;\n    }\n    iVar7 = *0x433c10;\n    if (0 < *0x433c10) {\n        puVar8 = *0x433c10 * 4 + 0x433c14;\n        do {\n            if (*puVar8 == uVar10) break;\n            iVar7 = iVar7 + -1;\n            puVar8 = puVar8 + -1;\n        } while (0 < iVar7);\n    }\n    if (iVar7 == 0) {\n        iVar7 = 0xf;\n        if (*0x433c10 < 0x10) {\n            iVar7 = *0x433c10;\n        }\n        iVar11 = 0;\n        if (-1 < iVar7) {\n            do {\n                puVar8 = iVar11 * 4 + 0x433c18;\n                uVar9 = *puVar8;\n                iVar11 = iVar11 + 1;\n                *puVar8 = uVar10;\n                uVar10 = uVar9;\n            } while (iVar11 <= iVar7);\n        }\n        if (iVar12 < 0x10) {\n            *0x433c10 = iVar12 + 1;\n        }\n    }\n    (*_sym.imp.KERNEL32.dll_InterlockedExchange)(0x433c58, 0);\n    return 1;\n    while (iVar12 = iVar12 + -1,  -1 < iVar12) {\ncode_r0x0040172f:\n        if (*(iVar12 * 4 + 0x433c18) == uVar10) break;\n    }\n    if (iVar12 < 0) {\ncode_r0x0040173f:\n        if (*0x433c10 < 0x10) {\n            *0x433c10 = *0x433c10 + 1;\n        }\n        iVar12 = *0x433c10 + -1;\n    }\n    else if (iVar12 == 0) goto code_r0x00401769;\ncode_r0x00401751:\n    iVar7 = 0;\n    if (-1 < iVar12) {\n        do {\n            puVar8 = iVar7 * 4 + 0x433c18;\n            uVar9 = *puVar8;\n            iVar7 = iVar7 + 1;\n            *puVar8 = uVar10;\n            uVar10 = uVar9;\n        } while (iVar7 <= iVar12);\n    }\ncode_r0x00401769:\n    (*pcVar3)(0x433c58, 0);\n    return 1;\n}\n",
        "token_count": 1636
    },
    "00402090": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint fcn.00402090(void)\n\n{\n    int32_t *piVar1;\n    uint *puVar2;\n    uint *puVar3;\n    uint uVar4;\n    uint *puVar5;\n    int32_t iVar6;\n    int32_t *piVar7;\n    int32_t iVar8;\n    uint32_t uVar9;\n    uchar auStack68 [46];\n    int16_t iStack22;\n    int32_t *piStack20;\n    \n    puVar3 = fcn.00402d13(0x100);\n    if (puVar3 == NULL) {\n        uVar4 = 0xffffffff;\n    }\n    else {\n        *0x434068 = 0x20;\n        *0x434080 = puVar3;\n        for (; puVar3 < *0x434080 + 0x40; puVar3 = puVar3 + 2) {\n            *puVar3 = 0xffffffff;\n            *(puVar3 + 1) = 0;\n            *(puVar3 + 5) = 10;\n        }\n        (*_sym.imp.KERNEL32.dll_GetStartupInfoA)(auStack68);\n        if ((iStack22 != 0) && (piStack20 != NULL)) {\n            iVar8 = *piStack20;\n            piStack20 = piStack20 + 1;\n            piVar7 = iVar8 + piStack20;\n            if (0x7ff < iVar8) {\n                iVar8 = 0x800;\n            }\n            iVar6 = iVar8;\n            if (*0x434068 < iVar8) {\n                puVar3 = 0x434084;\n                do {\n                    puVar5 = fcn.00402d13(0x100);\n                    iVar6 = *0x434068;\n                    if (puVar5 == NULL) break;\n                    *0x434068 = *0x434068 + 0x20;\n                    *puVar3 = puVar5;\n                    puVar2 = puVar5;\n                    for (; puVar5 < puVar2 + 0x40; puVar5 = puVar5 + 2) {\n                        *puVar5 = 0xffffffff;\n                        *(puVar5 + 1) = 0;\n                        *(puVar5 + 5) = 10;\n                        puVar2 = *puVar3;\n                    }\n                    puVar3 = puVar3 + 1;\n                    iVar6 = iVar8;\n                } while (*0x434068 < iVar8);\n            }\n            uVar9 = 0;\n            if (0 < iVar6) {\n                do {\n                    if (((*piVar7 != -1) && ((*piStack20 & 1) != 0)) &&\n                       (((*piStack20 & 8) != 0 || (iVar8 = (*_sym.imp.KERNEL32.dll_GetFileType)(*piVar7),  iVar8 != 0)))\n                       ) {\n                        piVar1 = *((uVar9 >> 5) * 4 + 0x434080) + (uVar9 & 0x1f) * 8;\n                        *piVar1 = *piVar7;\n                        *(piVar1 + 1) = *piStack20;\n                    }\n                    uVar9 = uVar9 + 1;\n                    piStack20 = piStack20 + 1;\n                    piVar7 = piVar7 + 1;\n                } while (uVar9 < iVar6);\n            }\n        }\n        iVar8 = 0;\n        do {\n            piVar7 = *0x434080 + iVar8 * 2;\n            if (*piVar7 == -1) {\n                *(piVar7 + 1) = 0x81;\n                if (iVar8 == 0) {\n                    iVar6 = -10;\n                }\n                else {\n                    iVar6 = -0xb - (iVar8 != 1);\n                }\n                iVar6 = (*_sym.imp.KERNEL32.dll_GetStdHandle)(iVar6);\n                if ((iVar6 != -1) && (uVar9 = (*_sym.imp.KERNEL32.dll_GetFileType)(iVar6),  uVar9 != 0)) {\n                    *piVar7 = iVar6;\n                    if ((uVar9 & 0xff) != 2) {\n                        if ((uVar9 & 0xff) == 3) {\n                            *(piVar7 + 1) = *(piVar7 + 1) | 8;\n                        }\n                        goto code_r0x00402220;\n                    }\n                }\n                *(piVar7 + 1) = *(piVar7 + 1) | 0x40;\n            }\n            else {\n                *(piVar7 + 1) = *(piVar7 + 1) | 0x80;\n            }\ncode_r0x00402220:\n            iVar8 = iVar8 + 1;\n        } while (iVar8 < 3);\n        (*_sym.imp.KERNEL32.dll_SetHandleCount)(*0x434068);\n        uVar4 = 0;\n    }\n    return uVar4;\n}\n",
        "token_count": 1098
    },
    "004030e0": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004030e0(uint32_t *arg_8h, int32_t arg_ch)\n\n{\n    int32_t *piVar1;\n    char *pcVar2;\n    uint32_t *puVar3;\n    int32_t *piVar4;\n    char cVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    code *pcVar8;\n    uint8_t uVar9;\n    uint32_t uVar10;\n    uint32_t *puVar11;\n    uint32_t *puVar12;\n    uint32_t *puVar13;\n    uint32_t uVar14;\n    uint32_t uVar15;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint32_t var_4h;\n    \n    uVar6 = arg_8h[4];\n    puVar13 = arg_ch + -4;\n    uVar15 = arg_ch - arg_8h[3] >> 0xf;\n    piVar4 = uVar15 * 0x204 + 0x144 + uVar6;\n    var_4h = *puVar13 - 1;\n    if ((var_4h & 1) == 0) {\n        puVar11 = var_4h + puVar13;\n        uVar14 = *puVar11;\n        uVar7 = *(arg_ch + -8);\n        if ((uVar14 & 1) == 0) {\n            uVar10 = (uVar14 >> 4) - 1;\n            if (0x3f < uVar10) {\n                uVar10 = 0x3f;\n            }\n            if (puVar11[1] == puVar11[2]) {\n                if (uVar10 < 0x20) {\n                    pcVar2 = uVar10 + 4 + uVar6;\n                    uVar10 = ~(0x80000000U >> (uVar10 & 0x1f));\n                    puVar12 = uVar6 + 0x44 + uVar15 * 4;\n                    *puVar12 = *puVar12 & uVar10;\n                    *pcVar2 = *pcVar2 + -1;\n                    if (*pcVar2 == '\\0') {\n                        *arg_8h = *arg_8h & uVar10;\n                    }\n                }\n                else {\n                    pcVar2 = uVar10 + 4 + uVar6;\n                    uVar10 = ~(0x80000000U >> (uVar10 - 0x20 & 0x1f));\n                    puVar12 = uVar6 + 0xc4 + uVar15 * 4;\n                    *puVar12 = *puVar12 & uVar10;\n                    *pcVar2 = *pcVar2 + -1;\n                    if (*pcVar2 == '\\0') {\n                        arg_8h[1] = arg_8h[1] & uVar10;\n                    }\n                }\n            }\n            var_4h = var_4h + uVar14;\n            *(puVar11[2] + 4) = puVar11[1];\n            *(puVar11[1] + 8) = puVar11[2];\n        }\n        puVar11 = (var_4h >> 4) + -1;\n        if (0x3f < puVar11) {\n            puVar11 = 0x3f;\n        }\n        puVar12 = arg_8h;\n        if ((uVar7 & 1) == 0) {\n            puVar13 = puVar13 - uVar7;\n            puVar12 = (uVar7 >> 4) + -1;\n            if (0x3f < puVar12) {\n                puVar12 = 0x3f;\n            }\n            var_4h = var_4h + uVar7;\n            puVar11 = (var_4h >> 4) + -1;\n            if (0x3f < puVar11) {\n                puVar11 = 0x3f;\n            }\n            if (puVar12 != puVar11) {\n                if (puVar13[1] == puVar13[2]) {\n                    if (puVar12 < 0x20) {\n                        uVar14 = ~(0x80000000U >> (puVar12 & 0x1f));\n                        puVar3 = uVar6 + 0x44 + uVar15 * 4;\n                        *puVar3 = *puVar3 & uVar14;\n                        pcVar2 = puVar12 + uVar6 + 4;\n                        *pcVar2 = *pcVar2 + -1;\n                        if (*pcVar2 == '\\0') {\n                            *arg_8h = *arg_8h & uVar14;\n                        }\n                    }\n                    else {\n                        uVar14 = ~(0x80000000U >> (puVar12 - 0x20 & 0x1f));\n                        puVar3 = uVar6 + 0xc4 + uVar15 * 4;\n                        *puVar3 = *puVar3 & uVar14;\n                        pcVar2 = puVar12 + uVar6 + 4;\n                        *pcVar2 = *pcVar2 + -1;\n                        if (*pcVar2 == '\\0') {\n                            arg_8h[1] = arg_8h[1] & uVar14;\n                        }\n                    }\n                }\n                *(puVar13[2] + 4) = puVar13[1];\n                *(puVar13[1] + 8) = puVar13[2];\n            }\n        }\n        if (((uVar7 & 1) != 0) || (puVar12 != puVar11)) {\n            piVar1 = piVar4 + puVar11 * 2;\n            uVar14 = piVar1[1];\n            puVar13[2] = piVar1;\n            puVar13[1] = uVar14;\n            piVar1[1] = puVar13;\n            *(puVar13[1] + 8) = puVar13;\n            if (puVar13[1] == puVar13[2]) {\n                cVar5 = *(puVar11 + uVar6 + 4);\n                *(puVar11 + uVar6 + 4) = cVar5 + '\\x01';\n                uVar9 = puVar11;\n                if (puVar11 < 0x20) {\n                    if (cVar5 == '\\0') {\n                        *arg_8h = *arg_8h | 0x80000000U >> (uVar9 & 0x1f);\n                    }\n                    puVar11 = uVar6 + 0x44 + uVar15 * 4;\n                    *puVar11 = *puVar11 | 0x80000000U >> (uVar9 & 0x1f);\n                }\n                else {\n                    if (cVar5 == '\\0') {\n                        arg_8h[1] = arg_8h[1] | 0x80000000U >> (uVar9 - 0x20 & 0x1f);\n                    }\n                    puVar11 = uVar6 + 0xc4 + uVar15 * 4;\n                    *puVar11 = *puVar11 | 0x80000000U >> (uVar9 - 0x20 & 0x1f);\n                }\n            }\n        }\n        *puVar13 = var_4h;\n        *((var_4h - 4) + puVar13) = var_4h;\n        *piVar4 = *piVar4 + -1;\n        pcVar8 = _sym.imp.KERNEL32.dll_VirtualFree;\n        if (*piVar4 == 0) {\n            if (*0x433e10 != NULL) {\n                (*_sym.imp.KERNEL32.dll_VirtualFree)(*0x433e28 * 0x8000 + (*0x433e10)[3], 0x8000, 0x4000);\n                (*0x433e10)[2] = (*0x433e10)[2] | 0x80000000U >> (*0x433e28 & 0x1f);\n                *((*0x433e10)[4] + 0xc4 + *0x433e28 * 4) = 0;\n                *((*0x433e10)[4] + 0x43) = *((*0x433e10)[4] + 0x43) + -1;\n                if (*((*0x433e10)[4] + 0x43) == '\\0') {\n                    (*0x433e10)[1] = (*0x433e10)[1] & 0xfffffffe;\n                }\n                if ((*0x433e10)[2] == 0xffffffff) {\n                    (*pcVar8)((*0x433e10)[3], 0, 0x8000);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(*0x434060, 0, (*0x433e10)[4]);\n                    fcn.00404490(*0x433e10, *0x433e10 + 5, (*0x433e14 * 0x14 - *0x433e10) + -0x14 + *0x433e18);\n                    *0x433e14 = *0x433e14 + -1;\n                    if (*0x433e10 < arg_8h) {\n                        arg_8h = arg_8h + -5;\n                    }\n                    *0x433e20 = *0x433e18;\n                }\n            }\n            *0x433e10 = arg_8h;\n            *0x433e28 = uVar15;\n        }\n    }\n    return;\n}\n",
        "token_count": 2158
    },
    "00403894": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint32_t * __cdecl fcn.00403894(uint32_t *arg_8h)\n\n{\n    int32_t *piVar1;\n    char *pcVar2;\n    int32_t *piVar3;\n    char cVar4;\n    int32_t *piVar5;\n    uint uVar6;\n    uint8_t uVar7;\n    uint32_t uVar8;\n    int32_t iVar9;\n    uint32_t *puVar10;\n    int32_t iVar11;\n    uint32_t uVar12;\n    int32_t *piVar13;\n    uint32_t *puVar14;\n    uint32_t *puVar15;\n    uint32_t uVar16;\n    int32_t iVar17;\n    bool bVar18;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint32_t var_8h;\n    int32_t var_4h;\n    \n    uVar8 = arg_8h + 0x17U & 0xfffffff0;\n    iVar9 = (arg_8h + 0x17U >> 4) + -1;\n    puVar10 = *0x433e18 + *0x433e14 * 5;\n    uVar7 = iVar9;\n    if (iVar9 < 0x20) {\n        uVar16 = 0xffffffff >> (uVar7 & 0x1f);\n        var_8h = 0xffffffff;\n    }\n    else {\n        uVar16 = 0;\n        var_8h = 0xffffffff >> (uVar7 - 0x20 & 0x1f);\n    }\n    bVar18 = *0x433e20 < puVar10;\n    arg_8h = *0x433e20;\n    while ((bVar18 && ((arg_8h[1] & var_8h | *arg_8h & uVar16) == 0))) {\n        arg_8h = arg_8h + 5;\n        bVar18 = arg_8h < puVar10;\n    }\n    puVar14 = *0x433e18;\n    if (arg_8h == puVar10) {\n        for (; (puVar14 < *0x433e20 && ((puVar14[1] & var_8h | *puVar14 & uVar16) == 0)); puVar14 = puVar14 + 5) {\n        }\n        arg_8h = puVar14;\n        if (puVar14 == *0x433e20) {\n            for (; (puVar14 < puVar10 && (puVar14[2] == 0)); puVar14 = puVar14 + 5) {\n            }\n            puVar15 = *0x433e18;\n            arg_8h = puVar14;\n            if (puVar14 == puVar10) {\n                for (; (puVar15 < *0x433e20 && (puVar15[2] == 0)); puVar15 = puVar15 + 5) {\n                }\n                arg_8h = puVar15;\n                if ((puVar15 == *0x433e20) && (arg_8h = fcn.004033f8(),  arg_8h == NULL)) {\n                    return NULL;\n                }\n            }\n            uVar6 = fcn.004034af(arg_8h);\n            *arg_8h[4] = uVar6;\n            if (*arg_8h[4] == -1) {\n                return NULL;\n            }\n        }\n    }\n    piVar5 = arg_8h[4];\n    var_4h = *piVar5;\n    if ((var_4h == -1) || ((piVar5[var_4h + 0x31] & var_8h | piVar5[var_4h + 0x11] & uVar16) == 0)) {\n        var_4h = 0;\n        puVar10 = piVar5 + 0x11;\n        uVar12 = piVar5[0x31] & var_8h | *puVar10 & uVar16;\n        while (uVar12 == 0) {\n            puVar14 = puVar10 + 0x21;\n            var_4h = var_4h + 1;\n            puVar10 = puVar10 + 1;\n            uVar12 = *puVar14 & var_8h | *puVar10 & uVar16;\n        }\n    }\n    piVar3 = piVar5 + var_4h * 0x81 + 0x51;\n    iVar9 = 0;\n    uVar16 = piVar5[var_4h + 0x11] & uVar16;\n    if (uVar16 == 0) {\n        uVar16 = piVar5[var_4h + 0x31] & var_8h;\n        iVar9 = 0x20;\n    }\n    for (; -1 < uVar16; uVar16 = uVar16 << 1) {\n        iVar9 = iVar9 + 1;\n    }\n    piVar13 = piVar3[iVar9 * 2 + 1];\n    iVar11 = *piVar13 - uVar8;\n    iVar17 = (iVar11 >> 4) + -1;\n    if (0x3f < iVar17) {\n        iVar17 = 0x3f;\n    }\n    *0x433e20 = arg_8h;\n    if (iVar17 != iVar9) {\n        if (piVar13[1] == piVar13[2]) {\n            if (iVar9 < 0x20) {\n                pcVar2 = piVar5 + iVar9 + 4;\n                uVar16 = ~(0x80000000U >> (iVar9 & 0x1f));\n                piVar5[var_4h + 0x11] = uVar16 & piVar5[var_4h + 0x11];\n                *pcVar2 = *pcVar2 + -1;\n                if (*pcVar2 == '\\0') {\n                    *arg_8h = *arg_8h & uVar16;\n                }\n            }\n            else {\n                pcVar2 = piVar5 + iVar9 + 4;\n                uVar16 = ~(0x80000000U >> (iVar9 - 0x20 & 0x1f));\n                piVar5[var_4h + 0x31] = piVar5[var_4h + 0x31] & uVar16;\n                *pcVar2 = *pcVar2 + -1;\n                if (*pcVar2 == '\\0') {\n                    arg_8h[1] = arg_8h[1] & uVar16;\n                }\n            }\n        }\n        *(piVar13[2] + 4) = piVar13[1];\n        *(piVar13[1] + 8) = piVar13[2];\n        if (iVar11 == 0) goto code_r0x00403b4d;\n        piVar1 = piVar3 + iVar17 * 2;\n        iVar9 = piVar1[1];\n        piVar13[2] = piVar1;\n        piVar13[1] = iVar9;\n        piVar1[1] = piVar13;\n        *(piVar13[1] + 8) = piVar13;\n        if (piVar13[1] == piVar13[2]) {\n            cVar4 = *(iVar17 + 4 + piVar5);\n            *(iVar17 + 4 + piVar5) = cVar4 + '\\x01';\n            uVar7 = iVar17;\n            if (iVar17 < 0x20) {\n                if (cVar4 == '\\0') {\n                    *arg_8h = *arg_8h | 0x80000000U >> (uVar7 & 0x1f);\n                }\n                piVar5[var_4h + 0x11] = piVar5[var_4h + 0x11] | 0x80000000U >> (uVar7 & 0x1f);\n            }\n            else {\n                if (cVar4 == '\\0') {\n                    arg_8h[1] = arg_8h[1] | 0x80000000U >> (uVar7 - 0x20 & 0x1f);\n                }\n                piVar5[var_4h + 0x31] = piVar5[var_4h + 0x31] | 0x80000000U >> (uVar7 - 0x20 & 0x1f);\n            }\n        }\n    }\n    if (iVar11 != 0) {\n        *piVar13 = iVar11;\n        *(iVar11 + -4 + piVar13) = iVar11;\n    }\ncode_r0x00403b4d:\n    piVar13 = piVar13 + iVar11;\n    *piVar13 = uVar8 + 1;\n    *(piVar13 + (uVar8 - 4)) = uVar8 + 1;\n    iVar9 = *piVar3;\n    *piVar3 = iVar9 + 1;\n    if (((iVar9 == 0) && (arg_8h == *0x433e10)) && (var_4h == *0x433e28)) {\n        *0x433e10 = NULL;\n    }\n    *piVar5 = var_4h;\n    return piVar13 + 1;\n}\n",
        "token_count": 2098
    },
    "00403ee1": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Unable to track spacebase fully for stack\n// WARNING: Variable defined which should be unmapped: var_3ch_2\n// WARNING: Variable defined which should be unmapped: var_38h\n// WARNING: Variable defined which should be unmapped: var_58h\n// WARNING: Variable defined which should be unmapped: lpSrcStr\n// WARNING: Variable defined which should be unmapped: var_48h\n// WARNING: Variable defined which should be unmapped: var_44h_2\n// WARNING: Variable defined which should be unmapped: var_40h_2\n// WARNING: Variable defined which should be unmapped: var_3ch\n// WARNING: Variable defined which should be unmapped: var_34h\n// WARNING: Variable defined which should be unmapped: var_30h_2\n// WARNING: Variable defined which should be unmapped: var_4ch\n// WARNING: Variable defined which should be unmapped: var_34h_2\n// WARNING: Variable defined which should be unmapped: var_20h\n\nvoid __cdecl\nfcn.00403ee1(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint noname_4, uint noname_5, uint noname_6, \n            uint noname_7, uint noname_8, uint noname_9, uint noname_10, uint noname_11, uint noname_12, uint noname_13\n            , uint noname_14, uint noname_15, uint noname_16, uint noname_17, uint CodePage, uint arg_24h, uint arg_8h, \n            uint arg_ch, uint arg_10h, uint cchSrc, uint arg_18h, uint arg_1ch, uint arg_20h)\n\n{\n    int32_t iVar1;\n    char *pcVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint *noname_2_00;\n    int32_t unaff_EBP;\n    uint var_4ch;\n    uint var_28h_2;\n    uint var_44h;\n    uint var_40h;\n    uint lpWideCharStr;\n    uint lpDestStr;\n    uint cchDest;\n    uint var_30h;\n    uint var_24h_2;\n    uint var_28h;\n    uint var_24h;\n    uint Locale;\n    uint dwMapFlags;\n    uint lpMultiByteStr;\n    uint cbMultiByte;\n    uint var_18h_2;\n    uint var_4h;\n    uint uVar5;\n    uint uVar6;\n    uint var_3ch_2;\n    uint var_38h;\n    uint var_34h_2;\n    uint var_20h;\n    uint lpSrcStr;\n    int32_t var_48h;\n    int32_t var_44h_2;\n    int32_t var_40h_2;\n    uint var_3ch;\n    uint var_58h;\n    uint var_34h;\n    uint var_30h_2;\n    \n    var_30h_2 = 0x3c;\n    var_34h = 0x405c68;\n    var_58h = 0x403eed;\n    fcn.00401110();\n    if (*0x433e00 == 0) {\n        var_58h = 0;\n        var_3ch = 0;\n        var_40h_2 = 1;\n        var_44h_2 = 0x405c64;\n        var_48h = 0x100;\n        lpSrcStr = 0;\n        iVar1 = (*_sym.imp.KERNEL32.dll_LCMapStringW)();\n        if (iVar1 == 0) {\n            var_58h = 0x403f20;\n            iVar1 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            if (iVar1 == 0x78) {\n                *0x433e00 = 2;\n            }\n        }\n        else {\n            *0x433e00 = 1;\n        }\n    }\n    if (0 < *(unaff_EBP + 0x14)) {\n        iVar1 = *(unaff_EBP + 0x14);\n        pcVar2 = *(unaff_EBP + 0x10);\n        do {\n            iVar1 = iVar1 + -1;\n            if (*pcVar2 == '\\0') goto code_r0x00403f47;\n            pcVar2 = pcVar2 + 1;\n        } while (iVar1 != 0);\n        iVar1 = -1;\ncode_r0x00403f47:\n        *(unaff_EBP + 0x14) = *(unaff_EBP + 0x14) + (-1 - iVar1);\n    }\n    if ((*0x433e00 != 2) && (*0x433e00 != 0)) {\n        if (*0x433e00 != 1) goto code_r0x004042ae;\n        *(unaff_EBP + -0x2c) = 0;\n        *(unaff_EBP + -0x3c) = 0;\n        *(unaff_EBP + -0x38) = 0;\n        if (*(unaff_EBP + 0x20) == 0) {\n            *(unaff_EBP + 0x20) = *0x433df8;\n        }\n        var_58h = 0;\n        var_3ch = 0;\n        var_40h_2 = *(unaff_EBP + 0x14);\n        var_44h_2 = *(unaff_EBP + 0x10);\n        var_48h = (*(unaff_EBP + 0x24) != 0) * 8 + 1;\n        lpSrcStr = *(unaff_EBP + 0x20);\n        iVar1 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)();\n        *(unaff_EBP + -0x34) = iVar1;\n        if (iVar1 == 0) goto code_r0x004042ae;\n        *(unaff_EBP + -4) = 1;\n        fcn.00402330();\n        *(unaff_EBP + -0x18) = &fcn.00403ee1::lpSrcStr;\n        *(unaff_EBP + -0x1c) = &fcn.00403ee1::lpSrcStr;\n        *(unaff_EBP + -4) = 0xffffffff;\n        if (*(unaff_EBP + -0x1c) == 0) {\n            iVar3 = fcn.00402d13();\n            *(unaff_EBP + -0x1c) = iVar3;\n            if (iVar3 == 0) goto code_r0x004042ae;\n            *(unaff_EBP + -0x3c) = 1;\n        }\n        var_34h_2 = *(unaff_EBP + 0x20);\n        iVar3 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)();\n        if (iVar3 != 0) {\n            iVar3 = (*_sym.imp.KERNEL32.dll_LCMapStringW)\n                              (*(unaff_EBP + 8), *(unaff_EBP + 0xc), *(unaff_EBP + -0x1c), iVar1, 0, 0);\n            *(unaff_EBP + -0x2c) = iVar3;\n            if (iVar3 != 0) {\n                if ((*(unaff_EBP + 0xd) & 4) == 0) {\n                    *(unaff_EBP + -4) = 2;\n                    fcn.00402330();\n                    *(unaff_EBP + -0x18) = &fcn.00403ee1::var_34h_2;\n                    *(unaff_EBP + -0x20) = &fcn.00403ee1::var_34h_2;\n                    *(unaff_EBP + -4) = 0xffffffff;\n                    if (*(unaff_EBP + -0x20) == 0) {\n                        iVar4 = fcn.00402d13(iVar3 * 2);\n                        *(unaff_EBP + -0x20) = iVar4;\n                        if (iVar4 == 0) goto code_r0x00404116;\n                        *(unaff_EBP + -0x38) = 1;\n                    }\n                    iVar1 = (*_sym.imp.KERNEL32.dll_LCMapStringW)\n                                      (*(unaff_EBP + 8), *(unaff_EBP + 0xc), *(unaff_EBP + -0x1c), iVar1, \n                                       *(unaff_EBP + -0x20), iVar3);\n                    if (iVar1 != 0) {\n                        if (*(unaff_EBP + 0x1c) == 0) {\n                            uVar6 = 0;\n                            uVar5 = 0;\n                        }\n                        else {\n                            uVar6 = *(unaff_EBP + 0x1c);\n                            uVar5 = *(unaff_EBP + 0x18);\n                        }\n                        (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)\n                                  (*(unaff_EBP + 0x20), 0, *(unaff_EBP + -0x20), iVar3, uVar5, uVar6, 0, 0);\n                    }\n                }\n                else if ((*(unaff_EBP + 0x1c) != 0) && (iVar3 <= *(unaff_EBP + 0x1c))) {\n                    (*_sym.imp.KERNEL32.dll_LCMapStringW)\n                              (*(unaff_EBP + 8), *(unaff_EBP + 0xc), *(unaff_EBP + -0x1c), iVar1, *(unaff_EBP + 0x18), \n                               *(unaff_EBP + 0x1c));\n                }\n            }\n        }\ncode_r0x00404116:\n        if (*(unaff_EBP + -0x38) != 0) {\n            fcn.00402c69(*(unaff_EBP + -0x20));\n        }\n        if (*(unaff_EBP + -0x3c) != 0) {\n            fcn.00402c69(*(unaff_EBP + -0x1c));\n        }\n        goto code_r0x004042ae;\n    }\n    *(unaff_EBP + -0x28) = 0;\n    *(unaff_EBP + -0x30) = 0;\n    *(unaff_EBP + -0x40) = 0;\n    if (*(unaff_EBP + 8) == 0) {\n        *(unaff_EBP + 8) = *0x433de8;\n    }\n    if (*(unaff_EBP + 0x20) == 0) {\n        *(unaff_EBP + 0x20) = *0x433df8;\n    }\n    var_58h = *(unaff_EBP + 8);\n    var_3ch = 0x404166;\n    iVar1 = fcn.00404830(var_58h);\n    *(unaff_EBP + -0x44) = iVar1;\n    if (iVar1 == -1) goto code_r0x004042ae;\n    if (iVar1 == *(unaff_EBP + 0x20)) {\n        var_58h = *(unaff_EBP + 0x1c);\n        var_3ch = *(unaff_EBP + 0x18);\n        var_40h_2 = *(unaff_EBP + 0x14);\n        var_44h_2 = *(unaff_EBP + 0x10);\n        var_48h = *(unaff_EBP + 0xc);\n        lpSrcStr = *(unaff_EBP + 8);\n        (*_sym.imp.KERNEL32.dll_LCMapStringA)();\n    }\n    else {\n        var_58h = 0;\n        var_3ch = 0;\n        var_40h_2 = unaff_EBP + 0x14;\n        var_44h_2 = *(unaff_EBP + 0x10);\n        lpSrcStr = *(unaff_EBP + 0x20);\n        var_48h = iVar1;\n        iVar1 = fcn.00404877(lpSrcStr, iVar1, var_44h_2, var_40h_2, 0, 0, var_34h, var_30h_2, var_4ch);\n        *(unaff_EBP + -0x28) = iVar1;\n        if (iVar1 == 0) goto code_r0x004042ae;\n        var_58h = 0;\n        var_3ch = 0;\n        var_40h_2 = *(unaff_EBP + 0x14);\n        var_48h = *(unaff_EBP + 0xc);\n        lpSrcStr = *(unaff_EBP + 8);\n        noname_2_00 = &fcn.00403ee1::lpSrcStr;\n        var_44h_2 = iVar1;\n        iVar1 = (*_sym.imp.KERNEL32.dll_LCMapStringA)();\n        *(unaff_EBP + -0x24) = iVar1;\n        if (iVar1 != 0) {\n            *(unaff_EBP + -4) = 0;\n            fcn.00402330();\n            *(unaff_EBP + -0x18) = &fcn.00403ee1::lpSrcStr;\n            *(unaff_EBP + -0x48) = &fcn.00403ee1::lpSrcStr;\n            fcn.004047d0();\n            *(unaff_EBP + -4) = 0xffffffff;\n            if (*0x10 == 0x20) {\n                noname_2_00 = fcn.00402d13();\n                if (noname_2_00 == NULL) goto code_r0x00404263;\n                fcn.004047d0();\n                *(unaff_EBP + -0x40) = 1;\n            }\n            var_34h_2 = *(unaff_EBP + 8);\n            iVar1 = (*_sym.imp.KERNEL32.dll_LCMapStringA)();\n            *(unaff_EBP + -0x24) = iVar1;\n            if (iVar1 != 0) {\n                var_34h_2 = *(unaff_EBP + -0x44);\n                uVar6 = fcn.00404877(var_34h_2, *(unaff_EBP + 0x20), noname_2_00, unaff_EBP + -0x24, *(unaff_EBP + 0x18)\n                                     , *(unaff_EBP + 0x1c), lpSrcStr, var_48h, var_44h_2);\n                *(unaff_EBP + -0x30) = uVar6;\n            }\n        }\ncode_r0x00404263:\n        if (*(unaff_EBP + -0x40) != 0) {\n            fcn.00402c69();\n        }\n    }\n    if (*(unaff_EBP + -0x28) != 0) {\n        fcn.00402c69();\n    }\n    if ((*(unaff_EBP + -0x30) != 0) && (*(unaff_EBP + 0x18) != *(unaff_EBP + -0x30))) {\n        fcn.00402c69();\n    }\ncode_r0x004042ae:\n    *(unaff_EBP + -0x5c) = 0x4042b6;\n    fcn.0040114b();\n    return;\n}\n",
        "token_count": 3468
    },
    "004042b7": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Unable to track spacebase fully for stack\n// WARNING: Variable defined which should be unmapped: var_28h_2\n// WARNING: Variable defined which should be unmapped: var_24h_2\n// WARNING: Variable defined which should be unmapped: var_20h_2\n// WARNING: Variable defined which should be unmapped: var_2ch\n// WARNING: Variable defined which should be unmapped: var_28h\n// WARNING: Variable defined which should be unmapped: lpCharType\n// WARNING: Variable defined which should be unmapped: var_38h\n// WARNING: Variable defined which should be unmapped: var_24h\n// WARNING: Variable defined which should be unmapped: var_20h\n\nvoid __cdecl\nfcn.004042b7(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint noname_4, uint noname_5, uint arg_20h_2, \n            uint noname_7, uint arg_8h, uint lpMultiByteStr, uint cbMultiByte, uint arg_14h, uint CodePage, uint arg_1ch\n            , uint arg_20h)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    uint uVar3;\n    int32_t noname_1_00;\n    int32_t unaff_EBP;\n    int32_t iVar4;\n    int32_t noname_0_00;\n    uint unaff_retaddr;\n    uint dwInfoType;\n    uint var_ch;\n    uint var_10h;\n    uint var_14h;\n    uint var_18h_2;\n    uint var_4h;\n    uint var_2ch;\n    uint var_28h_2;\n    uint var_24h_2;\n    uint var_20h_2;\n    int32_t lpCharType;\n    int32_t var_38h;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    \n    fcn.00401110();\n    iVar4 = 0;\n    if (*0x433e04 == 0) {\n        var_38h = 0x4042e1;\n        iVar1 = (*_sym.imp.KERNEL32.dll_GetStringTypeW)();\n        if (iVar1 == 0) {\n            iVar1 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            if (iVar1 == 0x78) {\n                *0x433e04 = 2;\n            }\n        }\n        else {\n            *0x433e04 = 1;\n        }\n    }\n    if ((*0x433e04 == 2) || (*0x433e04 == 0)) {\n        iVar1 = *(unaff_EBP + 0x1c);\n        if (*(unaff_EBP + 0x1c) == 0) {\n            iVar1 = *0x433de8;\n        }\n        noname_0_00 = *(unaff_EBP + 0x18);\n        if (*(unaff_EBP + 0x18) == 0) {\n            noname_0_00 = *0x433df8;\n        }\n        noname_1_00 = fcn.00404830(iVar1);\n        if (noname_1_00 != -1) {\n            if (noname_1_00 != noname_0_00) {\n                lpCharType = noname_0_00;\n                var_38h = noname_1_00;\n                iVar4 = fcn.00404877(noname_0_00, noname_1_00, *(unaff_EBP + 0xc), unaff_EBP + 0x10, 0, 0, 0x405c90, \n                                     0x1c, unaff_retaddr);\n                if (iVar4 == 0) goto code_r0x00404468;\n                *(unaff_EBP + 0xc) = iVar4;\n            }\n            lpCharType = 0x404459;\n            var_38h = iVar1;\n            (*_sym.imp.KERNEL32.dll_GetStringTypeA)();\n            if (iVar4 != 0) {\n                lpCharType = iVar4;\n                fcn.00402c69();\n            }\n        }\n    }\n    else if (*0x433e04 == 1) {\n        *(unaff_EBP + -0x24) = 0;\n        *(unaff_EBP + -0x20) = 0;\n        if (*(unaff_EBP + 0x18) == 0) {\n            *(unaff_EBP + 0x18) = *0x433df8;\n        }\n        var_38h = (*(unaff_EBP + 0x20) != 0) * 8 + 1;\n        lpCharType = *(unaff_EBP + 0x18);\n        puVar2 = &fcn.004042b7::lpCharType;\n        iVar4 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)();\n        *(unaff_EBP + -0x28) = iVar4;\n        if (iVar4 != 0) {\n            *(unaff_EBP + -4) = 0;\n            fcn.00402330();\n            *(unaff_EBP + -0x18) = &fcn.004042b7::lpCharType;\n            *(unaff_EBP + -0x2c) = &fcn.004042b7::lpCharType;\n            fcn.004047d0(&fcn.004042b7::lpCharType, 0, iVar4 * 2);\n            *(unaff_EBP + -4) = 0xffffffff;\n            if (*0x10 == 0x20) {\n                puVar2 = fcn.00404b34(2, iVar4);\n                if (puVar2 == NULL) goto code_r0x00404468;\n                *(unaff_EBP + -0x20) = 1;\n            }\n            iVar4 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)\n                              (*(unaff_EBP + 0x18), 1, *(unaff_EBP + 0xc), *(unaff_EBP + 0x10), puVar2, iVar4);\n            if (iVar4 != 0) {\n                uVar3 = (*_sym.imp.KERNEL32.dll_GetStringTypeW)(*(unaff_EBP + 8), puVar2, iVar4, *(unaff_EBP + 0x14));\n                *(unaff_EBP + -0x24) = uVar3;\n            }\n            if (*(unaff_EBP + -0x20) != 0) {\n                fcn.00402c69(puVar2);\n            }\n        }\n    }\ncode_r0x00404468:\n    *(unaff_EBP + -0x3c) = 0x404470;\n    fcn.0040114b();\n    return;\n}\n",
        "token_count": 1537
    },
    "00404877": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Unable to track spacebase fully for stack\n// WARNING: Variable defined which should be unmapped: var_34h\n// WARNING: Variable defined which should be unmapped: lpCPInfo\n\nvoid __cdecl\nfcn.00404877(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint arg_8h, uint arg_ch, uint arg_10h, \n            uint arg_14h, uint arg_18h)\n\n{\n    uint uVar1;\n    int32_t *piVar2;\n    uchar *puVar3;\n    int32_t iVar4;\n    uchar *puVar5;\n    uint *puVar6;\n    uint32_t unaff_EBP;\n    uint var_8h;\n    uint CodePage;\n    uint var_54h_2;\n    uint var_60h;\n    uint var_4ch_2;\n    uint cbMultiByte;\n    uint lpMultiByteStr;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint lpCPInfo;\n    int32_t var_1ch;\n    uchar *var_18h;\n    uint var_4h_2;\n    uint uStack4;\n    \n    uStack4 = 0x44;\n    var_4h_2 = 0x405ca0;\n    var_18h = 0x404883;\n    fcn.00401110();\n    *(unaff_EBP - 0x1c) = *0x433ad0 ^ unaff_EBP;\n    uVar1 = *(unaff_EBP + 0x10);\n    *(unaff_EBP - 0x44) = uVar1;\n    piVar2 = *(unaff_EBP + 0x14);\n    *(unaff_EBP - 0x50) = piVar2;\n    *(unaff_EBP - 0x40) = *(unaff_EBP + 0x18);\n    *(unaff_EBP - 0x34) = 0;\n    *(unaff_EBP - 0x4c) = 0;\n    puVar3 = *piVar2;\n    *(unaff_EBP - 0x48) = puVar3;\n    *(unaff_EBP - 0x38) = 0;\n    if (*(unaff_EBP + 8) == *(unaff_EBP + 0xc)) {\n        puVar6 = *(unaff_EBP - 0x54);\n    }\n    else {\n        var_18h = unaff_EBP - 0x30;\n        var_1ch = *(unaff_EBP + 8);\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetCPInfo)();\n        if ((((iVar4 != 0) && (*(unaff_EBP - 0x30) == 1)) &&\n            (iVar4 = (*_sym.imp.KERNEL32.dll_GetCPInfo)(*(unaff_EBP + 0xc), unaff_EBP - 0x30),  iVar4 != 0)) &&\n           (*(unaff_EBP - 0x30) == 1)) {\n            *(unaff_EBP - 0x38) = 1;\n        }\n        if (*(unaff_EBP - 0x38) == 0) {\n            puVar5 = *(unaff_EBP - 0x3c);\n        }\n        else {\n            puVar5 = puVar3;\n            if (puVar3 == 0xffffffff) {\n                iVar4 = fcn.00402760(uVar1);\n                puVar5 = iVar4 + 1;\n            }\n            *(unaff_EBP - 0x3c) = puVar5;\n        }\n        if (*(unaff_EBP - 0x38) == 0) {\n            puVar5 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)\n                               (*(unaff_EBP + 8), 1, *(unaff_EBP - 0x44), puVar3, 0, 0);\n            *(unaff_EBP - 0x3c) = puVar5;\n            if (puVar5 == NULL) goto code_r0x00404a3e;\n        }\n        puVar6 = &fcn.00404877::var_1ch;\n        *(unaff_EBP - 4) = 0;\n        fcn.00402330();\n        *(unaff_EBP - 0x18) = &fcn.00404877::var_1ch;\n        *(unaff_EBP - 0x54) = &fcn.00404877::var_1ch;\n        fcn.004047d0(&fcn.00404877::var_1ch, 0, puVar5 * 2);\n        *(unaff_EBP - 4) = 0xffffffff;\n        if (*0x10 == 0x10) {\n            puVar6 = fcn.00404b34(2, puVar5);\n            if (puVar6 == NULL) goto code_r0x00404a3e;\n            *(unaff_EBP - 0x4c) = 1;\n        }\n        iVar4 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)\n                          (*(unaff_EBP + 8), 1, *(unaff_EBP - 0x44), *(unaff_EBP - 0x48), puVar6, puVar5);\n        if (iVar4 != 0) {\n            if (*(unaff_EBP - 0x40) == 0) {\n                if (*(unaff_EBP - 0x38) == 0) {\n                    var_18h = NULL;\n                    var_1ch = 0;\n                    puVar5 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(*(unaff_EBP + 0xc), 0, puVar6, puVar5, 0, 0);\n                    if (puVar5 == NULL) goto code_r0x00404a2f;\n                }\n                var_1ch = 1;\n                var_18h = puVar5;\n                iVar4 = fcn.00404b34();\n                *(unaff_EBP - 0x34) = iVar4;\n                if (iVar4 != 0) {\n                    var_18h = NULL;\n                    var_1ch = 0;\n                    iVar4 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)\n                                      (*(unaff_EBP + 0xc), 0, puVar6, puVar5, iVar4, puVar5);\n                    if (iVar4 == 0) {\n                        var_18h = *(unaff_EBP - 0x34);\n                        var_1ch = 0x404a19;\n                        fcn.00402c69();\n                        *(unaff_EBP - 0x34) = 0;\n                    }\n                    else if (*(unaff_EBP - 0x48) != -1) {\n                        **(unaff_EBP - 0x50) = iVar4;\n                    }\n                }\n            }\n            else {\n                var_18h = NULL;\n                var_1ch = 0;\n                iVar4 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)\n                                  (*(unaff_EBP + 0xc), 0, puVar6, puVar5, *(unaff_EBP - 0x40), *(unaff_EBP + 0x1c));\n                if (iVar4 != 0) {\n                    *(unaff_EBP - 0x34) = *(unaff_EBP - 0x40);\n                }\n            }\n        }\n    }\ncode_r0x00404a2f:\n    if (*(unaff_EBP - 0x4c) != 0) {\n        var_1ch = 0x404a3a;\n        var_18h = puVar6;\n        fcn.00402c69();\n    }\ncode_r0x00404a3e:\n    *(unaff_EBP - 100) = 0x404a4b;\n    fcn.0040281c();\n    *(unaff_EBP - 100) = 0x404a50;\n    fcn.0040114b();\n    return;\n}\n",
        "token_count": 1848
    },
    "00404bc5": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint32_t fcn.00404bc5(uint8_t *param_1)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint8_t *puVar5;\n    \n    while( true ) {\n        iVar1 = fcn.00404c1d(*param_1);\n        if (iVar1 == 0) break;\n        param_1 = param_1 + 1;\n    }\n    uVar2 = *param_1;\n    puVar5 = param_1 + 1;\n    if ((uVar2 == 0x2d) || (uVar3 = uVar2,  uVar2 == 0x2b)) {\n        uVar3 = *puVar5;\n        puVar5 = param_1 + 2;\n    }\n    iVar1 = 0;\n    while( true ) {\n        if ((uVar3 < 0x30) || (0x39 < uVar3)) {\n            iVar4 = -1;\n        }\n        else {\n            iVar4 = uVar3 - 0x30;\n        }\n        if (iVar4 == -1) break;\n        iVar1 = iVar4 + iVar1 * 10;\n        uVar3 = *puVar5;\n        puVar5 = puVar5 + 1;\n    }\n    if (uVar2 == 0x2d) {\n        iVar1 = -iVar1;\n    }\n    return iVar1;\n}\n",
        "token_count": 330
    },
    "004022c3": {
        "rules": [
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint fcn.004022c3(void)\n\n{\n    if ((*0x433c68 == 2) && (4 < *0x433c74)) {\n        return 1;\n    }\n    return 3;\n}\n",
        "token_count": 49
    },
    "00402429": {
        "rules": [
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.00402429(uint arg_8h, uint arg_ch, uint32_t arg_10h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t iVar4;\n    uint var_10h;\n    uint var_8h;\n    uint var_4h;\n    \n    iVar4 = 0;\n    if (*0x433dc4 == NULL) {\n        iVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(\"user32.dll\");\n        pcVar1 = _sym.imp.KERNEL32.dll_GetProcAddress;\n        if ((iVar2 == 0) ||\n           (*0x433dc4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar2, \"MessageBoxA\"),  *0x433dc4 == NULL)) {\n            return 0;\n        }\n        *0x433dc8 = (*pcVar1)(iVar2, \"GetActiveWindow\");\n        *0x433dcc = (*pcVar1)(iVar2, \"GetLastActivePopup\");\n        if ((*0x433c68 == 2) && (*0x433dd4 = (*pcVar1)(iVar2, \"GetUserObjectInformationA\"),  *0x433dd4 != NULL)) {\n            *0x433dd0 = (*pcVar1)(iVar2, \"GetProcessWindowStation\");\n        }\n    }\n    if ((*0x433dd0 == NULL) ||\n       (((iVar2 = (**0x433dd0)(),  iVar2 != 0 && (iVar2 = (**0x433dd4)(iVar2, 1, &var_10h, 0xc, &var_4h),  iVar2 != 0))\n        && ((var_8h & 1) != 0)))) {\n        if (((*0x433dc8 != NULL) && (iVar4 = (**0x433dc8)(),  iVar4 != 0)) && (*0x433dcc != NULL)) {\n            iVar4 = (**0x433dcc)(iVar4);\n        }\n    }\n    else if (*0x433c74 < 4) {\n        arg_10h = arg_10h | 0x40000;\n    }\n    else {\n        arg_10h = arg_10h | 0x200000;\n    }\n    uVar3 = (**0x433dc4)(iVar4, arg_8h, arg_ch, arg_10h);\n    return uVar3;\n}\n",
        "token_count": 547
    },
    "00401819": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00401819(uint uExitCode, int32_t arg_ch, int32_t arg_10h)\n\n{\n    uint uVar1;\n    code **ppcVar2;\n    bool bVar3;\n    \n    if (*0x433ca8 == 1) {\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(uExitCode);\n        (*_sym.imp.KERNEL32.dll_TerminateProcess)(uVar1);\n    }\n    *0x433ca4 = 1;\n    *0x433ca0 = arg_10h;\n    if (arg_ch == 0) {\n        if (*0x434188 != NULL) {\n            *0x434184 = *0x434184 + -1;\n            bVar3 = *0x434184 < *0x434188;\n            while (!bVar3) {\n                if (**0x434184 != NULL) {\n                    (***0x434184)();\n                }\n                *0x434184 = *0x434184 + -1;\n                bVar3 = *0x434184 < *0x434188;\n            }\n        }\n        ppcVar2 = 0x40701c;\n        do {\n            if (*ppcVar2 != NULL) {\n                (**ppcVar2)();\n            }\n            ppcVar2 = ppcVar2 + 1;\n        } while (ppcVar2 < 0x407020);\n    }\n    ppcVar2 = 0x407024;\n    do {\n        if (*ppcVar2 != NULL) {\n            (**ppcVar2)();\n        }\n        ppcVar2 = ppcVar2 + 1;\n    } while (ppcVar2 < 0x407028);\n    if (arg_10h == 0) {\n        *0x433ca8 = 1;\n        fcn.0040177f(uExitCode);\n    }\n    return;\n}\n",
        "token_count": 421
    },
    "0040191a": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid fcn.0040191a(int32_t param_1)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint uStack300;\n    uchar *puStack296;\n    uint uStack292;\n    uchar auStack276 [4];\n    uchar auStack272 [124];\n    uchar auStack148 [136];\n    uchar uStack12;\n    uint32_t uStack8;\n    \n    uStack8 = *0x433ad0 ^ auStack148;\n    uVar1 = 0;\n    do {\n        if (param_1 == *(uVar1 * 8 + 0x433998)) break;\n        uVar1 = uVar1 + 1;\n    } while (uVar1 < 0x13);\n    if (param_1 == *(uVar1 * 8 + 0x433998)) {\n        if ((*0x433c08 == 1) || ((*0x433c08 == 0 && (*0x433984 == 1)))) {\n            uStack292 = 0;\n            puStack296 = auStack276;\n            uStack300 = *(uVar1 * 8 + 0x43399c);\n            uStack300 = fcn.00402760();\n            (*_sym.imp.KERNEL32.dll_GetStdHandle)();\n            (*_sym.imp.KERNEL32.dll_WriteFile)();\n        }\n        else if (param_1 != 0xfc) {\n            uStack292 = 0x104;\n            puStack296 = auStack272;\n            uStack300 = 0;\n            uStack12 = 0;\n            iVar2 = (*_sym.imp.KERNEL32.dll_GetModuleFileNameA)();\n            if (iVar2 == 0) {\n                fcn.00402530();\n            }\n            iVar2 = fcn.00402760();\n            if (0x3c < iVar2 + 1U) {\n                fcn.00402760();\n                fcn.00402630();\n            }\n            fcn.00402760();\n            fcn.00402760();\n            fcn.00402330();\n            fcn.00402530();\n            fcn.00402540();\n            fcn.00402540();\n            fcn.00402540(&uStack300);\n            fcn.00402429(&uStack300, \"Microsoft Visual C++ Runtime Library\", 0x12010);\n        }\n    }\n    fcn.0040281c();\n    return;\n}\n",
        "token_count": 529
    },
    "00401acb": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00401acb(int32_t arg_8h, uint ExceptionInfo)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    uint uVar3;\n    int32_t *piVar4;\n    int32_t iVar5;\n    uint *puVar6;\n    \n    uVar2 = *0x433cb0;\n    piVar4 = 0x433a30;\n    do {\n        if (*piVar4 == arg_8h) break;\n        piVar4 = piVar4 + 3;\n    } while (piVar4 < *0x433ab0 * 0xc + 0x433a30U);\n    if ((*0x433ab0 * 0xc + 0x433a30U <= piVar4) || (*piVar4 != arg_8h)) {\n        piVar4 = NULL;\n    }\n    if ((piVar4 == NULL) || (pcVar1 = piVar4[2],  pcVar1 == NULL)) {\n        uVar3 = (*_sym.imp.KERNEL32.dll_UnhandledExceptionFilter)(ExceptionInfo);\n    }\n    else if (pcVar1 == 0x5) {\n        piVar4[2] = 0;\n        uVar3 = 1;\n    }\n    else {\n        if (pcVar1 != 0x1) {\n            *0x433cb0 = ExceptionInfo;\n            if (piVar4[1] == 8) {\n                if (*0x433aa8 < *0x433aac + *0x433aa8) {\n                    puVar6 = *0x433aa8 * 0xc + 0x433a38;\n                    iVar5 = (*0x433aac + *0x433aa8) - *0x433aa8;\n                    do {\n                        *puVar6 = 0;\n                        puVar6 = puVar6 + 3;\n                        iVar5 = iVar5 + -1;\n                    } while (iVar5 != 0);\n                }\n                uVar3 = *0x433ab4;\n                iVar5 = *piVar4;\n                if (iVar5 == -0x3fffff72) {\n                    *0x433ab4 = 0x83;\n                }\n                else if (iVar5 == -0x3fffff70) {\n                    *0x433ab4 = 0x81;\n                }\n                else if (iVar5 == -0x3fffff6f) {\n                    *0x433ab4 = 0x84;\n                }\n                else if (iVar5 == -0x3fffff6d) {\n                    *0x433ab4 = 0x85;\n                }\n                else if (iVar5 == -0x3fffff73) {\n                    *0x433ab4 = 0x82;\n                }\n                else if (iVar5 == -0x3fffff71) {\n                    *0x433ab4 = 0x86;\n                }\n                else if (iVar5 == -0x3fffff6e) {\n                    *0x433ab4 = 0x8a;\n                }\n                (*pcVar1)(8, *0x433ab4);\n                *0x433ab4 = uVar3;\n            }\n            else {\n                piVar4[2] = 0;\n                (*pcVar1)(piVar4[1]);\n            }\n        }\n        uVar3 = 0xffffffff;\n        *0x433cb0 = uVar2;\n    }\n    return uVar3;\n}\n",
        "token_count": 767
    },
    "00401d60": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00401d60(uint8_t **arg_8h, int32_t *arg_ch)\n\n{\n    bool bVar1;\n    bool bVar2;\n    uint8_t *in_EAX;\n    uint8_t *puVar3;\n    uint8_t *puVar4;\n    uint8_t uVar5;\n    uint8_t *in_ECX;\n    uint32_t uVar6;\n    int32_t *unaff_ESI;\n    uint var_4h;\n    \n    bVar1 = false;\n    *unaff_ESI = 0;\n    *arg_ch = 1;\n    if (arg_8h != NULL) {\n        *arg_8h = in_ECX;\n        arg_8h = arg_8h + 1;\n    }\n    do {\n        if (*in_EAX == 0x22) {\n            bVar1 = !bVar1;\n            puVar3 = in_EAX + 1;\n            uVar5 = 0x22;\n        }\n        else {\n            *unaff_ESI = *unaff_ESI + 1;\n            if (in_ECX != NULL) {\n                *in_ECX = *in_EAX;\n                in_ECX = in_ECX + 1;\n            }\n            uVar5 = *in_EAX;\n            puVar3 = in_EAX + 1;\n            if ((*(uVar5 + 0x433e41) & 4) != 0) {\n                *unaff_ESI = *unaff_ESI + 1;\n                if (in_ECX != NULL) {\n                    *in_ECX = *puVar3;\n                    in_ECX = in_ECX + 1;\n                }\n                puVar3 = in_EAX + 2;\n            }\n            if (uVar5 == 0) {\n                puVar3 = puVar3 + -1;\n                goto code_r0x00401dd9;\n            }\n        }\n        in_EAX = puVar3;\n    } while ((bVar1) || ((uVar5 != 0x20 && (uVar5 != 9))));\n    if (in_ECX != NULL) {\n        in_ECX[-1] = 0;\n    }\ncode_r0x00401dd9:\n    bVar1 = false;\n    while (*puVar3 != 0) {\n        for (; (*puVar3 == 0x20 || (*puVar3 == 9)); puVar3 = puVar3 + 1) {\n        }\n        if (*puVar3 == 0) break;\n        if (arg_8h != NULL) {\n            *arg_8h = in_ECX;\n            arg_8h = arg_8h + 1;\n        }\n        *arg_ch = *arg_ch + 1;\n        while( true ) {\n            bVar2 = true;\n            uVar6 = 0;\n            for (; *puVar3 == 0x5c; puVar3 = puVar3 + 1) {\n                uVar6 = uVar6 + 1;\n            }\n            if (*puVar3 == 0x22) {\n                puVar4 = puVar3;\n                if ((uVar6 & 1) == 0) {\n                    if ((!bVar1) || (puVar4 = puVar3 + 1,  *puVar4 != 0x22)) {\n                        bVar2 = false;\n                        puVar4 = puVar3;\n                    }\n                    bVar1 = !bVar1;\n                }\n                uVar6 = uVar6 >> 1;\n                puVar3 = puVar4;\n            }\n            for (; uVar6 != 0; uVar6 = uVar6 - 1) {\n                if (in_ECX != NULL) {\n                    *in_ECX = 0x5c;\n                    in_ECX = in_ECX + 1;\n                }\n                *unaff_ESI = *unaff_ESI + 1;\n            }\n            uVar5 = *puVar3;\n            if ((uVar5 == 0) || ((!bVar1 && ((uVar5 == 0x20 || (uVar5 == 9)))))) break;\n            if (bVar2) {\n                if (in_ECX == NULL) {\n                    if ((*(uVar5 + 0x433e41) & 4) != 0) {\n                        puVar3 = puVar3 + 1;\n                        *unaff_ESI = *unaff_ESI + 1;\n                    }\n                }\n                else {\n                    if ((*(uVar5 + 0x433e41) & 4) != 0) {\n                        *in_ECX = uVar5;\n                        in_ECX = in_ECX + 1;\n                        puVar3 = puVar3 + 1;\n                        *unaff_ESI = *unaff_ESI + 1;\n                    }\n                    *in_ECX = *puVar3;\n                    in_ECX = in_ECX + 1;\n                }\n                *unaff_ESI = *unaff_ESI + 1;\n            }\n            puVar3 = puVar3 + 1;\n        }\n        if (in_ECX != NULL) {\n            *in_ECX = 0;\n            in_ECX = in_ECX + 1;\n        }\n        *unaff_ESI = *unaff_ESI + 1;\n    }\n    if (arg_8h != NULL) {\n        *arg_8h = NULL;\n    }\n    *arg_ch = *arg_ch + 1;\n    return;\n}\n",
        "token_count": 1214
    },
    "0040282a": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint fcn.0040282a(uint8_t param_1, uint32_t param_2, uint8_t param_3)\n\n{\n    if ((*(param_1 + 0x433e41) & param_3) == 0) {\n        if (param_2 == 0) {\n            param_2 = 0;\n        }\n        else {\n            param_2 = *(*0x433bd0 + param_1 * 2) & param_2;\n        }\n        if (param_2 == 0) {\n            return 0;\n        }\n    }\n    return 1;\n}\n",
        "token_count": 132
    },
    "004028c6": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid fcn.004028c6(void)\n\n{\n    uint8_t uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uchar uVar4;\n    char cVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    uint8_t *puVar8;\n    uint unaff_ESI;\n    uint *puVar9;\n    uint noname_8;\n    uint noname_9;\n    uint *noname_2;\n    uint noname_11;\n    uchar *noname_4;\n    uint noname_13;\n    uint noname_14;\n    uint noname_15;\n    uint noname_8_00;\n    uint noname_10;\n    uchar *noname_3;\n    uint noname_12;\n    uint noname_13_00;\n    uint noname_14_00;\n    uint noname_7;\n    uchar *arg_8h;\n    uint in_stack_fffffae4;\n    uint in_stack_fffffae8;\n    uint in_stack_fffffaec;\n    uint in_stack_fffffaf0;\n    uint in_stack_fffffaf4;\n    uint in_stack_fffffaf8;\n    uint in_stack_fffffafc;\n    uint in_stack_fffffb00;\n    uint in_stack_fffffb04;\n    uchar auStack1180 [404];\n    uchar auStack776 [256];\n    uchar auStack520 [256];\n    uint auStack264 [64];\n    uint32_t uStack8;\n    \n    uStack8 = *0x433ad0 ^ auStack1180;\n    arg_8h = &stack0xfffffae4;\n    noname_7 = *0x433f44;\n    iVar2 = (*_sym.imp.KERNEL32.dll_GetCPInfo)();\n    if (iVar2 == 1) {\n        uVar3 = 0;\n        do {\n            *(auStack264 + uVar3) = uVar3;\n            uVar3 = uVar3 + 1;\n        } while (uVar3 < 0x100);\n        uVar1 = in_stack_fffffae8 >> 0x10;\n        auStack264[0]._0_1_ = 0x20;\n        if (uVar1 != 0) {\n            puVar8 = &stack0xfffffaeb;\n            do {\n                uVar3 = uVar1;\n                if (uVar3 <= *puVar8) {\n                    uVar6 = (*puVar8 - uVar3) + 1;\n                    puVar9 = auStack264 + uVar3;\n                    for (uVar7 = uVar6 >> 2; uVar7 != 0; uVar7 = uVar7 - 1) {\n                        *puVar9 = 0x20202020;\n                        puVar9 = puVar9 + 1;\n                    }\n                    for (uVar6 = uVar6 & 3; uVar6 != 0; uVar6 = uVar6 - 1) {\n                        *puVar9 = 0x20;\n                        puVar9 = puVar9 + 1;\n                    }\n                }\n                uVar1 = puVar8[1];\n                puVar8 = puVar8 + 2;\n            } while (uVar1 != 0);\n        }\n        noname_14_00 = 0;\n        noname_3 = &stack0xfffffaf8;\n        noname_10 = 0x100;\n        puVar9 = auStack264;\n        noname_8_00 = 1;\n        noname_12 = *0x433f44;\n        noname_13_00 = *0x433e2c;\n        fcn.004042b7(1, puVar9, 0x100, noname_3, *0x433f44, *0x433e2c, 0, noname_7, arg_8h, unaff_ESI, in_stack_fffffae4\n                     , in_stack_fffffae8, in_stack_fffffaec, in_stack_fffffaf0, in_stack_fffffaf4);\n        noname_15 = 0;\n        noname_4 = auStack520;\n        noname_13 = 0x100;\n        noname_11 = 0x100;\n        noname_2 = auStack264;\n        noname_9 = 0x100;\n        noname_8 = *0x433e2c;\n        noname_14 = *0x433f44;\n        fcn.00403ee1(*0x433e2c, 0x100, noname_2, 0x100, noname_4, 0x100, *0x433f44, 0, noname_8_00, puVar9, noname_10, \n                     noname_3, noname_12, noname_13_00, noname_14_00, noname_7, arg_8h, unaff_ESI, in_stack_fffffae4, \n                     in_stack_fffffae8, in_stack_fffffaec, in_stack_fffffaf0, in_stack_fffffaf4, in_stack_fffffaf8, \n                     in_stack_fffffafc, in_stack_fffffb00, in_stack_fffffb04);\n        fcn.00403ee1(*0x433e2c, 0x200, auStack264, 0x100, auStack776, 0x100, *0x433f44, 0, noname_8, noname_9, noname_2\n                     , noname_11, noname_4, noname_13, noname_14, noname_15, noname_8_00, puVar9, noname_10, noname_3, \n                     noname_12, noname_13_00, noname_14_00, noname_7, arg_8h, unaff_ESI, in_stack_fffffae4);\n        uVar3 = 0;\n        do {\n            if ((*(&stack0xfffffaf8 + uVar3 * 2) & 1) == 0) {\n                if ((*(&stack0xfffffaf8 + uVar3 * 2) & 2) != 0) {\n                    *(uVar3 + 0x433e41) = *(uVar3 + 0x433e41) | 0x20;\n                    uVar4 = auStack776[uVar3];\n                    goto code_r0x004029dc;\n                }\n                *(uVar3 + 0x433f60) = 0;\n            }\n            else {\n                *(uVar3 + 0x433e41) = *(uVar3 + 0x433e41) | 0x10;\n                uVar4 = auStack520[uVar3];\ncode_r0x004029dc:\n                *(uVar3 + 0x433f60) = uVar4;\n            }\n            uVar3 = uVar3 + 1;\n        } while (uVar3 < 0x100);\n    }\n    else {\n        uVar3 = 0;\n        do {\n            if ((uVar3 < 0x41) || (0x5a < uVar3)) {\n                if ((0x60 < uVar3) && (uVar3 < 0x7b)) {\n                    *(uVar3 + 0x433e41) = *(uVar3 + 0x433e41) | 0x20;\n                    cVar5 = uVar3 + -0x20;\n                    goto code_r0x00402a1f;\n                }\n                *(uVar3 + 0x433f60) = 0;\n            }\n            else {\n                *(uVar3 + 0x433e41) = *(uVar3 + 0x433e41) | 0x10;\n                cVar5 = uVar3 + ' ';\ncode_r0x00402a1f:\n                *(uVar3 + 0x433f60) = cVar5;\n            }\n            uVar3 = uVar3 + 1;\n        } while (uVar3 < 0x100);\n    }\n    fcn.0040281c();\n    return;\n}\n",
        "token_count": 1824
    },
    "00402a61": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00402a61(int32_t arg_8h)\n\n{\n    uint8_t uVar1;\n    uint8_t uVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    int32_t extraout_ECX;\n    int32_t iVar6;\n    uint8_t *puVar7;\n    uint8_t *puVar8;\n    uint *puVar9;\n    uint32_t var_1ch;\n    uint32_t lpCPInfo;\n    uint var_12h;\n    uint32_t var_4h;\n    \n    var_4h = *0x433ad0 ^ &stack0xfffffffc;\n    *0x433dd8 = 0;\n    if (arg_8h == -2) {\n        *0x433dd8 = 1;\n        arg_8h = (*_sym.imp.KERNEL32.dll_GetOEMCP)();\n    }\n    else if (arg_8h == -3) {\n        *0x433dd8 = 1;\n        arg_8h = (*_sym.imp.KERNEL32.dll_GetACP)();\n    }\n    else if (arg_8h == -4) {\n        *0x433dd8 = 1;\n        arg_8h = *0x433df8;\n    }\n    if (arg_8h == *0x433f44) goto code_r0x00402c3c;\n    if (arg_8h != 0) {\n        iVar6 = 0;\n        uVar3 = 0;\ncode_r0x00402ade:\n        if (*(uVar3 + 0x433ae0) != arg_8h) goto code_r0x00402ae6;\n        puVar9 = 0x433e40;\n        for (iVar5 = 0x40; iVar5 != 0; iVar5 = iVar5 + -1) {\n            *puVar9 = 0;\n            puVar9 = puVar9 + 1;\n        }\n        var_1ch = 0;\n        *puVar9 = 0;\n        puVar7 = iVar6 * 0x30 + 0x433af0;\n        do {\n            uVar2 = *puVar7;\n            puVar8 = puVar7;\n            while ((uVar2 != 0 && (uVar1 = puVar8[1],  uVar1 != 0))) {\n                uVar3 = uVar2;\n                if (uVar3 <= uVar1) {\n                    uVar2 = *(var_1ch + 0x433ad8);\n                    do {\n                        *(uVar3 + 0x433e41) = *(uVar3 + 0x433e41) | uVar2;\n                        uVar3 = uVar3 + 1;\n                    } while (uVar3 <= uVar1);\n                }\n                puVar8 = puVar8 + 2;\n                uVar2 = *puVar8;\n            }\n            var_1ch = var_1ch + 1;\n            puVar7 = puVar7 + 8;\n        } while (var_1ch < 4);\n        *0x433f44 = arg_8h;\n        *0x433e30 = 1;\n        *0x433e2c = fcn.0040286e();\n        *0x433f50 = *(extraout_ECX + 0x433ae4);\n        *0x433f54 = *(extraout_ECX + 0x433ae8);\n        *0x433f58 = *(extraout_ECX + 0x433aec);\n        goto code_r0x00402c30;\n    }\ncode_r0x00402c2b:\n    fcn.0040289d();\ncode_r0x00402c30:\n    fcn.004028c6();\ncode_r0x00402c3c:\n    fcn.0040281c();\n    return;\ncode_r0x00402ae6:\n    uVar3 = uVar3 + 0x30;\n    iVar6 = iVar6 + 1;\n    if (0xef < uVar3) goto code_r0x00402af1;\n    goto code_r0x00402ade;\ncode_r0x00402af1:\n    iVar6 = (*_sym.imp.KERNEL32.dll_GetCPInfo)(arg_8h, &lpCPInfo);\n    if (iVar6 != 1) {\n        if (*0x433dd8 == 0) goto code_r0x00402c3c;\n        goto code_r0x00402c2b;\n    }\n    puVar9 = 0x433e40;\n    for (iVar6 = 0x40; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    *puVar9 = 0;\n    uVar3 = 1;\n    *0x433e2c = 0;\n    *0x433f44 = arg_8h;\n    if (lpCPInfo < 2) {\n        *0x433e30 = 0;\n    }\n    else {\n        if (var_12h != '\\0') {\n            puVar7 = &var_12h + 1;\n            do {\n                uVar2 = *puVar7;\n                if (uVar2 == 0) break;\n                for (uVar4 = puVar7[-1]; uVar4 <= uVar2; uVar4 = uVar4 + 1) {\n                    *(uVar4 + 0x433e41) = *(uVar4 + 0x433e41) | 4;\n                }\n                puVar8 = puVar7 + 1;\n                puVar7 = puVar7 + 2;\n            } while (*puVar8 != 0);\n        }\n        do {\n            *(uVar3 + 0x433e41) = *(uVar3 + 0x433e41) | 8;\n            uVar3 = uVar3 + 1;\n        } while (uVar3 < 0xff);\n        *0x433e2c = fcn.0040286e();\n        *0x433e30 = 1;\n    }\n    *0x433f50 = 0;\n    *0x433f54 = 0;\n    *0x433f58 = 0;\n    goto code_r0x00402c30;\n}\n",
        "token_count": 1430
    },
    "00402ca1": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid fcn.00402ca1(uint32_t param_1)\n\n{\n    int32_t iVar1;\n    \n    if (((*0x434064 == 3) && (param_1 <= *0x433e1c)) && (iVar1 = fcn.00403894(param_1),  iVar1 != 0)) {\n        return;\n    }\n    if (param_1 == 0) {\n        param_1 = 1;\n    }\n    if (*0x434064 != 1) {\n        param_1 = param_1 + 0xf & 0xfffffff0;\n    }\n    (*_sym.imp.KERNEL32.dll_HeapAlloc)(*0x434060, 0, param_1);\n    return;\n}\n",
        "token_count": 162
    },
    "00403b90": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00403b90(int32_t arg_8h, uint32_t arg_ch)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint32_t arg_10h;\n    \n    if (arg_8h == 0) {\n        iVar1 = fcn.00402d13(arg_ch);\n        return iVar1;\n    }\n    if (arg_ch == 0) {\n        fcn.00402c69(arg_8h);\n    }\n    else {\n        arg_10h = arg_ch;\n        if (*0x434064 == 3) {\n            do {\n                if (0xffffffe0 < arg_10h) goto code_r0x00403cea;\n                arg_ch = fcn.004030b5(arg_8h);\n                if (arg_ch == 0) {\ncode_r0x00403c76:\n                    if (arg_10h == 0) {\n                        arg_10h = 1;\n                    }\n                    arg_10h = arg_10h + 0xf & 0xfffffff0;\n                    iVar1 = (*_sym.imp.KERNEL32.dll_HeapReAlloc)(*0x434060, 0, arg_8h, arg_10h);\n                }\n                else {\n                    if (*0x433e1c < arg_10h) {\ncode_r0x00403c32:\n                        if (arg_10h == 0) {\n                            arg_10h = 1;\n                        }\n                        arg_10h = arg_10h + 0xf & 0xfffffff0;\n                        iVar1 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(*0x434060, 0, arg_10h);\n                        if (iVar1 != 0) {\n                            uVar3 = *(arg_8h + -4) - 1;\n                            if (arg_10h <= uVar3) {\n                                uVar3 = arg_10h;\n                            }\n                            fcn.00402d30(iVar1, arg_8h, uVar3);\n                            fcn.004030e0(arg_ch, arg_8h);\n                        }\n                    }\n                    else {\n                        iVar2 = fcn.004035b5(arg_ch, arg_8h, arg_10h);\n                        iVar1 = arg_8h;\n                        if (iVar2 == 0) {\n                            iVar1 = fcn.00403894(arg_10h);\n                            if (iVar1 == 0) goto code_r0x00403c32;\n                            uVar3 = *(arg_8h + -4) - 1;\n                            if (arg_10h <= uVar3) {\n                                uVar3 = arg_10h;\n                            }\n                            fcn.00402d30(iVar1, arg_8h, uVar3);\n                            arg_ch = fcn.004030b5(arg_8h);\n                            fcn.004030e0(arg_ch, arg_8h);\n                        }\n                        if (iVar1 == 0) goto code_r0x00403c32;\n                    }\n                    if (arg_ch == 0) goto code_r0x00403c76;\n                }\n                if (iVar1 != 0) {\n                    return iVar1;\n                }\n                if (*0x433e0c == 0) {\n                    return 0;\n                }\n                iVar1 = fcn.00404471(arg_10h);\n            } while (iVar1 != 0);\n        }\n        else {\n            do {\n                arg_10h = arg_ch;\n                if (0xffffffe0 < arg_ch) {\ncode_r0x00403cea:\n                    fcn.00404471(arg_10h);\n                    return 0;\n                }\n                if (arg_ch == 0) {\n                    arg_ch = 1;\n                }\n                iVar1 = (*_sym.imp.KERNEL32.dll_HeapReAlloc)(*0x434060, 0, arg_8h, arg_ch);\n                if (iVar1 != 0) {\n                    return iVar1;\n                }\n                if (*0x433e0c == 0) {\n                    return 0;\n                }\n                iVar1 = fcn.00404471(arg_ch);\n            } while (iVar1 != 0);\n        }\n    }\n    return 0;\n}\n",
        "token_count": 940
    },
    "00404a51": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_58h\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.00404a51(void)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint var_58h;\n    uint lpSystemInfo;\n    int32_t var_48h;\n    uint32_t lpBuffer;\n    int32_t var_24h;\n    int32_t var_1ch;\n    uint32_t var_18h;\n    uint var_13h;\n    uint lpflOldProtect;\n    int32_t dwSize;\n    uint32_t lpAddress;\n    \n    fcn.00402330();\n    iVar1 = (*_sym.imp.KERNEL32.dll_VirtualQuery)(&var_58h, &lpBuffer, 0x1c);\n    if (iVar1 != 0) {\n        (*_sym.imp.KERNEL32.dll_GetSystemInfo)(&lpSystemInfo);\n        uVar4 = (~(var_48h - 1U) & &var_58h) - var_48h;\n        uVar3 = ((-(*0x433c68 != 1) & 0xfffffff1) + 0x11) * var_48h + var_24h;\n        dwSize = var_48h;\n        if (uVar3 <= uVar4) {\n            lpAddress = uVar4;\n            if (*0x433c68 != 1) {\n                lpAddress = var_24h;\n                do {\n                    iVar1 = (*_sym.imp.KERNEL32.dll_VirtualQuery)(lpAddress, &lpBuffer, 0x1c);\n                    if (iVar1 == 0) {\n                        return 0;\n                    }\n                    lpAddress = lpAddress + var_1ch;\n                } while ((var_18h & 0x1000) == 0);\n                lpAddress = lpBuffer;\n                if ((var_13h & 1) != 0) {\n                    return 1;\n                }\n                if (uVar4 < lpBuffer) {\n                    return 0;\n                }\n                if (lpBuffer < uVar3) {\n                    lpAddress = uVar3;\n                }\n                (*_sym.imp.KERNEL32.dll_VirtualAlloc)(lpAddress, dwSize, 0x1000, 4);\n            }\n            uVar2 = (*_sym.imp.KERNEL32.dll_VirtualProtect)\n                              (lpAddress, dwSize, (-(*0x433c68 != 1) & 0x103) + 1, &lpflOldProtect);\n            return uVar2;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 587
    },
    "00404b34": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t fcn.00404b34(uint32_t param_1, uint32_t param_2)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    \n    if ((param_1 != 0) && (0xffffffe0 / param_1 < param_2)) {\n        return 0;\n    }\n    param_1 = param_1 * param_2;\n    uVar1 = param_1;\n    if (param_1 == 0) {\n        uVar1 = 1;\n    }\n    do {\n        iVar2 = 0;\n        if (uVar1 < 0xffffffe1) {\n            if (((*0x434064 == 3) &&\n                (uVar1 = uVar1 + 0xf & 0xfffffff0,  param_1 < *0x433e1c || param_1 - *0x433e1c == 0)) &&\n               (iVar2 = fcn.00403894(param_1),  iVar2 != 0)) {\n                fcn.004047d0(iVar2, 0, param_1);\n                return iVar2;\n            }\n            iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(*0x434060, 8, uVar1);\n            if (iVar2 != 0) {\n                return iVar2;\n            }\n        }\n        if (*0x433e0c == 0) {\n            return iVar2;\n        }\n        iVar2 = fcn.00404471(uVar1);\n    } while (iVar2 != 0);\n    return 0;\n}\n",
        "token_count": 351
    },
    "00404c1d": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nuint32_t __cdecl fcn.00404c1d(uint32_t arg_8h)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint unaff_EBP;\n    uint unaff_retaddr;\n    uint in_stack_00000008;\n    uint in_stack_0000000c;\n    uint in_stack_00000010;\n    uint in_stack_00000014;\n    uint32_t var_4h;\n    \n    if (arg_8h < 0x100) {\n        if (1 < *0x433be0) {\n            uVar2 = fcn.00404ce4(arg_8h, 8);\n            return uVar2;\n        }\n        return *(*0x433bd0 + arg_8h * 2) & 8;\n    }\n    var_4h = 0;\n    arg_8h = CONCAT13(arg_8h, CONCAT12(arg_8h >> 8, arg_8h));\n    if (*0x433e30 != 0) {\n        iVar1 = fcn.004042b7(1, &arg_8h + 2, 2, &var_4h, *0x433f44, *0x433e2c, 1, 0, unaff_EBP, unaff_retaddr, arg_8h, \n                             in_stack_00000008, in_stack_0000000c, in_stack_00000010, in_stack_00000014);\n        if (((iVar1 != 0) && (var_4h._2_2_ == 0)) && ((var_4h & 8) != 0)) {\n            return 1;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 396
    },
    "004022dd": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nuint fcn.004022dd(int32_t param_1)\n\n{\n    int32_t iVar1;\n    \n    *0x434060 = (*_sym.imp.KERNEL32.dll_HeapCreate)(param_1 == 0, 0x1000, 0);\n    if (*0x434060 == 0) {\n        return 0;\n    }\n    *0x434064 = fcn.004022c3();\n    if ((*0x434064 == 3) && (iVar1 = fcn.0040306d(0x3f8),  iVar1 == 0)) {\n        (*_sym.imp.KERNEL32.dll_HeapDestroy)(*0x434060);\n        return 0;\n    }\n    return 1;\n}\n",
        "token_count": 162
    },
    "00402c69": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nvoid fcn.00402c69(int32_t param_1)\n\n{\n    int32_t arg_8h;\n    \n    if (param_1 != 0) {\n        if (*0x434064 == 3) {\n            arg_8h = fcn.004030b5(param_1);\n            if (arg_8h != 0) {\n                fcn.004030e0(arg_8h, param_1);\n                return;\n            }\n        }\n        (*_sym.imp.KERNEL32.dll_HeapFree)(*0x434060, 0);\n    }\n    return;\n}\n",
        "token_count": 130
    },
    "00403cf8": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nint32_t fcn.00403cf8(int32_t param_1)\n\n{\n    int32_t iVar1;\n    \n    if ((*0x434064 == 3) && (iVar1 = fcn.004030b5(param_1),  iVar1 != 0)) {\n        return *(param_1 + -4) + -9;\n    }\n    iVar1 = (*_sym.imp.KERNEL32.dll_HeapSize)(*0x434060, 0, param_1);\n    return iVar1;\n}\n",
        "token_count": 112
    },
    "00402d30": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nuint * __cdecl fcn.00402d30(uint *arg_8h, uint *arg_ch, uint32_t arg_10h)\n\n{\n    uint *puVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    \n    if ((arg_ch < arg_8h) && (arg_8h < arg_10h + arg_ch)) {\n        arg_ch = (arg_10h - 4) + arg_ch;\n        puVar1 = (arg_10h - 4) + arg_8h;\n        if ((puVar1 & 3) == 0) {\n            uVar3 = arg_10h >> 2;\n            if (uVar3 < 8) goto code_r0x00402ef4;\n            for (; uVar3 != 0; uVar3 = uVar3 - 1) {\n                *puVar1 = *arg_ch;\n                arg_ch = arg_ch + -1;\n                puVar1 = puVar1 + -1;\n            }\n    // switch table (4 cases) at 0x403018\n            switch(*((arg_10h & 3) * 4 + 0x403018)) {\n            case 0x403030:\ncode_r0x00403030:\n                *(puVar1 + 3) = *(arg_ch + 3);\n                return arg_8h;\n            case 0x403040:\ncode_r0x00403040:\n                *(puVar1 + 3) = *(arg_ch + 3);\n                *(puVar1 + 2) = *(arg_ch + 2);\n                return arg_8h;\n            case 0x403054:\ncode_r0x00403054:\n                *(puVar1 + 3) = *(arg_ch + 3);\n                *(puVar1 + 2) = *(arg_ch + 2);\n                *(puVar1 + 1) = *(arg_ch + 1);\n                return arg_8h;\n            }\n        }\n        else if (arg_10h < 4) {\n    // switch table (4 cases) at 0x403018\n            switch(*(arg_10h * 4 + 0x403018)) {\n            case 0x403030:\n                goto code_r0x00403030;\n            case 0x403040:\n                goto code_r0x00403040;\n            case 0x403054:\n                goto code_r0x00403054;\n            }\n        }\n        else {\n            arg_10h = arg_10h - (puVar1 & 3);\n            switch(*((puVar1 & 3) * 4 + 0x402f1c)) {\n            case 0x402f2c:\n                *(puVar1 + 3) = *(arg_ch + 3);\n                arg_ch = arg_ch + -1;\n                uVar3 = arg_10h >> 2;\n                puVar1 = puVar1 - 1;\n                if (uVar3 < 8) {\ncode_r0x00402ef4:\n    // WARNING: Could not recover jumptable at 0x00402ef6. Too many branches\n    // WARNING: Treating indirect jump as call\n    // switch table (1 cases) at 0x402fc8\n                    puVar1 = (**(uVar3 * -4 + 0x402fc8))();\n                    return puVar1;\n                }\n                for (; uVar3 != 0; uVar3 = uVar3 - 1) {\n                    *puVar1 = *arg_ch;\n                    arg_ch = arg_ch + -1;\n                    puVar1 = puVar1 + -1;\n                }\n                switch(*((arg_10h & 3) * 4 + 0x403018)) {\n                case 0x403030:\n                    goto code_r0x00403030;\n                case 0x403040:\n                    goto code_r0x00403040;\n                case 0x403054:\n                    goto code_r0x00403054;\n                }\n                break;\n            case 0x402f50:\n                *(puVar1 + 3) = *(arg_ch + 3);\n                uVar3 = arg_10h >> 2;\n                *(puVar1 + 2) = *(arg_ch + 2);\n                arg_ch = arg_ch + -2;\n                puVar1 = puVar1 - 2;\n                if (uVar3 < 8) goto code_r0x00402ef4;\n                for (; uVar3 != 0; uVar3 = uVar3 - 1) {\n                    *puVar1 = *arg_ch;\n                    arg_ch = arg_ch + -1;\n                    puVar1 = puVar1 + -1;\n                }\n                switch(*((arg_10h & 3) * 4 + 0x403018)) {\n                case 0x403030:\n                    goto code_r0x00403030;\n                case 0x403040:\n                    goto code_r0x00403040;\n                case 0x403054:\n                    goto code_r0x00403054;\n                }\n                break;\n            case 0x402f78:\n                *(puVar1 + 3) = *(arg_ch + 3);\n                *(puVar1 + 2) = *(arg_ch + 2);\n                uVar3 = arg_10h >> 2;\n                *(puVar1 + 1) = *(arg_ch + 1);\n                arg_ch = arg_ch + -3;\n                puVar1 = puVar1 - 3;\n                if (uVar3 < 8) goto code_r0x00402ef4;\n                for (; uVar3 != 0; uVar3 = uVar3 - 1) {\n                    *puVar1 = *arg_ch;\n                    arg_ch = arg_ch + -1;\n                    puVar1 = puVar1 + -1;\n                }\n                switch(*((arg_10h & 3) * 4 + 0x403018)) {\n                case 0x403030:\n                    goto code_r0x00403030;\n                case 0x403040:\n                    goto code_r0x00403040;\n                case 0x403054:\n                    goto code_r0x00403054;\n                }\n            }\n        }\n        return arg_8h;\n    }\n    puVar1 = arg_8h;\n    if ((arg_8h & 3) == 0) {\n        uVar2 = arg_10h >> 2;\n        if (uVar2 < 8) goto code_r0x00402d8c;\n        for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n            *puVar1 = *arg_ch;\n            arg_ch = arg_ch + 1;\n            puVar1 = puVar1 + 1;\n        }\n    // switch table (4 cases) at 0x402e7c\n        switch(*((arg_10h & 3) * 4 + 0x402e7c)) {\n        case 0x402e94:\ncode_r0x00402e94:\n            *puVar1 = *arg_ch;\n            return arg_8h;\n        case 0x402ea0:\ncode_r0x00402ea0:\n            *puVar1 = *arg_ch;\n            *(puVar1 + 1) = *(arg_ch + 1);\n            return arg_8h;\n        case 0x402eb4:\ncode_r0x00402eb4:\n            *puVar1 = *arg_ch;\n            *(puVar1 + 1) = *(arg_ch + 1);\n            *(puVar1 + 2) = *(arg_ch + 2);\n            return arg_8h;\n        }\n    }\n    else if (arg_10h < 4) {\n        switch(*((arg_10h - 4) * 4 + 0x402e8c)) {\n        case 0x402e94:\n            goto code_r0x00402e94;\n        case 0x402ea0:\n            goto code_r0x00402ea0;\n        case 0x402eb4:\n            goto code_r0x00402eb4;\n        }\n    }\n    else {\n        uVar3 = (arg_10h - 4) + (arg_8h & 3);\n        switch(*((arg_8h & 3) * 4 + 0x402d90)) {\n        case 0x402da0:\n            *arg_8h = *arg_ch;\n            *(arg_8h + 1) = *(arg_ch + 1);\n            uVar2 = uVar3 >> 2;\n            *(arg_8h + 2) = *(arg_ch + 2);\n            arg_ch = arg_ch + 3;\n            puVar1 = arg_8h + 3;\n            if (uVar2 < 8) {\ncode_r0x00402d8c:\n    // WARNING: Could not recover jumptable at 0x00402d8c. Too many branches\n    // WARNING: Treating indirect jump as call\n    // switch table (8 cases) at 0x402e10\n                puVar1 = (**(uVar2 * 4 + 0x402e10))();\n                return puVar1;\n            }\n            for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n                *puVar1 = *arg_ch;\n                arg_ch = arg_ch + 1;\n                puVar1 = puVar1 + 1;\n            }\n            switch(*((uVar3 & 3) * 4 + 0x402e7c)) {\n            case 0x402e94:\n                goto code_r0x00402e94;\n            case 0x402ea0:\n                goto code_r0x00402ea0;\n            case 0x402eb4:\n                goto code_r0x00402eb4;\n            }\n            break;\n        case 0x402dcc:\n            *arg_8h = *arg_ch;\n            uVar2 = uVar3 >> 2;\n            *(arg_8h + 1) = *(arg_ch + 1);\n            arg_ch = arg_ch + 2;\n            puVar1 = arg_8h + 2;\n            if (uVar2 < 8) goto code_r0x00402d8c;\n            for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n                *puVar1 = *arg_ch;\n                arg_ch = arg_ch + 1;\n                puVar1 = puVar1 + 1;\n            }\n            switch(*((uVar3 & 3) * 4 + 0x402e7c)) {\n            case 0x402e94:\n                goto code_r0x00402e94;\n            case 0x402ea0:\n                goto code_r0x00402ea0;\n            case 0x402eb4:\n                goto code_r0x00402eb4;\n            }\n            break;\n        case 0x402df0:\n            *arg_8h = *arg_ch;\n            uVar2 = uVar3 >> 2;\n            arg_ch = arg_ch + 1;\n            puVar1 = arg_8h + 1;\n            if (uVar2 < 8) goto code_r0x00402d8c;\n            for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n                *puVar1 = *arg_ch;\n                arg_ch = arg_ch + 1;\n                puVar1 = puVar1 + 1;\n            }\n            switch(*((uVar3 & 3) * 4 + 0x402e7c)) {\n            case 0x402e94:\n                goto code_r0x00402e94;\n            case 0x402ea0:\n                goto code_r0x00402ea0;\n            case 0x402eb4:\n                goto code_r0x00402eb4;\n            }\n        }\n    }\n    return arg_8h;\n}\n",
        "token_count": 2664
    },
    "00404490": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nuint * __cdecl fcn.00404490(uint *arg_8h, uint *arg_ch, uint32_t arg_10h)\n\n{\n    uint *puVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    \n    if ((arg_ch < arg_8h) && (arg_8h < arg_10h + arg_ch)) {\n        arg_ch = (arg_10h - 4) + arg_ch;\n        puVar1 = (arg_10h - 4) + arg_8h;\n        if ((puVar1 & 3) == 0) {\n            uVar3 = arg_10h >> 2;\n            if (uVar3 < 8) goto code_r0x00404654;\n            for (; uVar3 != 0; uVar3 = uVar3 - 1) {\n                *puVar1 = *arg_ch;\n                arg_ch = arg_ch + -1;\n                puVar1 = puVar1 + -1;\n            }\n    // switch table (4 cases) at 0x404778\n            switch(*((arg_10h & 3) * 4 + 0x404778)) {\n            case 0x404790:\ncode_r0x00404790:\n                *(puVar1 + 3) = *(arg_ch + 3);\n                return arg_8h;\n            case 0x4047a0:\ncode_r0x004047a0:\n                *(puVar1 + 3) = *(arg_ch + 3);\n                *(puVar1 + 2) = *(arg_ch + 2);\n                return arg_8h;\n            case 0x4047b4:\ncode_r0x004047b4:\n                *(puVar1 + 3) = *(arg_ch + 3);\n                *(puVar1 + 2) = *(arg_ch + 2);\n                *(puVar1 + 1) = *(arg_ch + 1);\n                return arg_8h;\n            }\n        }\n        else if (arg_10h < 4) {\n    // switch table (4 cases) at 0x404778\n            switch(*(arg_10h * 4 + 0x404778)) {\n            case 0x404790:\n                goto code_r0x00404790;\n            case 0x4047a0:\n                goto code_r0x004047a0;\n            case 0x4047b4:\n                goto code_r0x004047b4;\n            }\n        }\n        else {\n            arg_10h = arg_10h - (puVar1 & 3);\n            switch(*((puVar1 & 3) * 4 + 0x40467c)) {\n            case 0x40468c:\n                *(puVar1 + 3) = *(arg_ch + 3);\n                arg_ch = arg_ch + -1;\n                uVar3 = arg_10h >> 2;\n                puVar1 = puVar1 - 1;\n                if (uVar3 < 8) {\ncode_r0x00404654:\n    // WARNING: Could not recover jumptable at 0x00404656. Too many branches\n    // WARNING: Treating indirect jump as call\n    // switch table (1 cases) at 0x404728\n                    puVar1 = (**(uVar3 * -4 + 0x404728))();\n                    return puVar1;\n                }\n                for (; uVar3 != 0; uVar3 = uVar3 - 1) {\n                    *puVar1 = *arg_ch;\n                    arg_ch = arg_ch + -1;\n                    puVar1 = puVar1 + -1;\n                }\n                switch(*((arg_10h & 3) * 4 + 0x404778)) {\n                case 0x404790:\n                    goto code_r0x00404790;\n                case 0x4047a0:\n                    goto code_r0x004047a0;\n                case 0x4047b4:\n                    goto code_r0x004047b4;\n                }\n                break;\n            case 0x4046b0:\n                *(puVar1 + 3) = *(arg_ch + 3);\n                uVar3 = arg_10h >> 2;\n                *(puVar1 + 2) = *(arg_ch + 2);\n                arg_ch = arg_ch + -2;\n                puVar1 = puVar1 - 2;\n                if (uVar3 < 8) goto code_r0x00404654;\n                for (; uVar3 != 0; uVar3 = uVar3 - 1) {\n                    *puVar1 = *arg_ch;\n                    arg_ch = arg_ch + -1;\n                    puVar1 = puVar1 + -1;\n                }\n                switch(*((arg_10h & 3) * 4 + 0x404778)) {\n                case 0x404790:\n                    goto code_r0x00404790;\n                case 0x4047a0:\n                    goto code_r0x004047a0;\n                case 0x4047b4:\n                    goto code_r0x004047b4;\n                }\n                break;\n            case 0x4046d8:\n                *(puVar1 + 3) = *(arg_ch + 3);\n                *(puVar1 + 2) = *(arg_ch + 2);\n                uVar3 = arg_10h >> 2;\n                *(puVar1 + 1) = *(arg_ch + 1);\n                arg_ch = arg_ch + -3;\n                puVar1 = puVar1 - 3;\n                if (uVar3 < 8) goto code_r0x00404654;\n                for (; uVar3 != 0; uVar3 = uVar3 - 1) {\n                    *puVar1 = *arg_ch;\n                    arg_ch = arg_ch + -1;\n                    puVar1 = puVar1 + -1;\n                }\n                switch(*((arg_10h & 3) * 4 + 0x404778)) {\n                case 0x404790:\n                    goto code_r0x00404790;\n                case 0x4047a0:\n                    goto code_r0x004047a0;\n                case 0x4047b4:\n                    goto code_r0x004047b4;\n                }\n            }\n        }\n        return arg_8h;\n    }\n    puVar1 = arg_8h;\n    if ((arg_8h & 3) == 0) {\n        uVar2 = arg_10h >> 2;\n        if (uVar2 < 8) goto code_r0x004044ec;\n        for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n            *puVar1 = *arg_ch;\n            arg_ch = arg_ch + 1;\n            puVar1 = puVar1 + 1;\n        }\n    // switch table (4 cases) at 0x4045dc\n        switch(*((arg_10h & 3) * 4 + 0x4045dc)) {\n        case 0x4045f4:\ncode_r0x004045f4:\n            *puVar1 = *arg_ch;\n            return arg_8h;\n        case 0x404600:\ncode_r0x00404600:\n            *puVar1 = *arg_ch;\n            *(puVar1 + 1) = *(arg_ch + 1);\n            return arg_8h;\n        case 0x404614:\ncode_r0x00404614:\n            *puVar1 = *arg_ch;\n            *(puVar1 + 1) = *(arg_ch + 1);\n            *(puVar1 + 2) = *(arg_ch + 2);\n            return arg_8h;\n        }\n    }\n    else if (arg_10h < 4) {\n        switch(*((arg_10h - 4) * 4 + 0x4045ec)) {\n        case 0x4045f4:\n            goto code_r0x004045f4;\n        case 0x404600:\n            goto code_r0x00404600;\n        case 0x404614:\n            goto code_r0x00404614;\n        }\n    }\n    else {\n        uVar3 = (arg_10h - 4) + (arg_8h & 3);\n        switch(*((arg_8h & 3) * 4 + 0x4044f0)) {\n        case 0x404500:\n            *arg_8h = *arg_ch;\n            *(arg_8h + 1) = *(arg_ch + 1);\n            uVar2 = uVar3 >> 2;\n            *(arg_8h + 2) = *(arg_ch + 2);\n            arg_ch = arg_ch + 3;\n            puVar1 = arg_8h + 3;\n            if (uVar2 < 8) {\ncode_r0x004044ec:\n    // WARNING: Could not recover jumptable at 0x004044ec. Too many branches\n    // WARNING: Treating indirect jump as call\n    // switch table (8 cases) at 0x404570\n                puVar1 = (**(uVar2 * 4 + 0x404570))();\n                return puVar1;\n            }\n            for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n                *puVar1 = *arg_ch;\n                arg_ch = arg_ch + 1;\n                puVar1 = puVar1 + 1;\n            }\n            switch(*((uVar3 & 3) * 4 + 0x4045dc)) {\n            case 0x4045f4:\n                goto code_r0x004045f4;\n            case 0x404600:\n                goto code_r0x00404600;\n            case 0x404614:\n                goto code_r0x00404614;\n            }\n            break;\n        case 0x40452c:\n            *arg_8h = *arg_ch;\n            uVar2 = uVar3 >> 2;\n            *(arg_8h + 1) = *(arg_ch + 1);\n            arg_ch = arg_ch + 2;\n            puVar1 = arg_8h + 2;\n            if (uVar2 < 8) goto code_r0x004044ec;\n            for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n                *puVar1 = *arg_ch;\n                arg_ch = arg_ch + 1;\n                puVar1 = puVar1 + 1;\n            }\n            switch(*((uVar3 & 3) * 4 + 0x4045dc)) {\n            case 0x4045f4:\n                goto code_r0x004045f4;\n            case 0x404600:\n                goto code_r0x00404600;\n            case 0x404614:\n                goto code_r0x00404614;\n            }\n            break;\n        case 0x404550:\n            *arg_8h = *arg_ch;\n            uVar2 = uVar3 >> 2;\n            arg_ch = arg_ch + 1;\n            puVar1 = arg_8h + 1;\n            if (uVar2 < 8) goto code_r0x004044ec;\n            for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n                *puVar1 = *arg_ch;\n                arg_ch = arg_ch + 1;\n                puVar1 = puVar1 + 1;\n            }\n            switch(*((uVar3 & 3) * 4 + 0x4045dc)) {\n            case 0x4045f4:\n                goto code_r0x004045f4;\n            case 0x404600:\n                goto code_r0x00404600;\n            case 0x404614:\n                goto code_r0x00404614;\n            }\n        }\n    }\n    return arg_8h;\n}\n",
        "token_count": 2653
    },
    "00403d96": {
        "rules": [
            "decompress data using LZO/d8e7b8e532bc4f7fa2e8bf7bf0025ad1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_20h\n// WARNING: Variable defined which should be unmapped: var_1ch\n// WARNING: Variable defined which should be unmapped: var_18h_2\n\nvoid __cdecl\nfcn.00403d96(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint noname_4, uint arg_8h, uint arg_ch)\n\n{\n    uint uVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint32_t unaff_EBP;\n    char *pcVar5;\n    uint var_8h;\n    uint var_128h_2;\n    uint var_124h_2;\n    uint var_128h;\n    uint lpFilename;\n    uint var_18h_2;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint uStack4;\n    \n    uStack4 = 0x118;\n    var_18h = 0x405750;\n    fcn.00401110();\n    *(unaff_EBP - 0x1c) = *0x433ad0 ^ unaff_EBP;\n    pcVar2 = *0x433ddc;\n    uVar1 = *(unaff_EBP + 0xc);\n    if (*0x433ddc == NULL) {\n        if (*(unaff_EBP + 8) == 1) {\n            pcVar5 = \"Buffer overrun detected!\";\n            *(unaff_EBP - 0x128) =\n                 \"A buffer overrun has been detected which has corrupted the program\\'s\\ninternal state.  The program cannot safely continue execution and must\\nnow be terminated.\\n\"\n            ;\n        }\n        else {\n            pcVar5 = \"Unknown security failure detected!\";\n            *(unaff_EBP - 0x128) =\n                 \"A security error of unknown cause has been detected which has\\ncorrupted the program\\'s internal state.  The program cannot safely\\ncontinue execution and must now be terminated.\\n\"\n            ;\n        }\n        *(unaff_EBP - 0x20) = 0;\n        iVar3 = (*_sym.imp.KERNEL32.dll_GetModuleFileNameA)(0, unaff_EBP - 0x124, 0x104);\n        if (iVar3 == 0) {\n            fcn.00402530(unaff_EBP - 0x124, \"<program name unknown>\");\n        }\n        iVar3 = unaff_EBP - 0x124;\n        iVar4 = fcn.00402760(iVar3);\n        if (0x3c < iVar4 + 0xbU) {\n            iVar3 = fcn.00402760(iVar3);\n            iVar3 = iVar3 + (unaff_EBP - 0x155);\n            fcn.00402630(iVar3, 0x4054f0, 3);\n        }\n        fcn.00402760(iVar3);\n        fcn.00402330();\n        *(unaff_EBP - 0x18) = &var_18h;\n        fcn.00402530(&var_18h, pcVar5);\n        fcn.00402540(&var_18h, 0x4054d0);\n        fcn.00402540(&var_18h, \"Program: \");\n        fcn.00402540(&var_18h, iVar3);\n        fcn.00402540(&var_18h, 0x4054d0);\n        fcn.00402540(&var_18h, *(unaff_EBP - 0x128));\n        fcn.00402429(&var_18h, \"Microsoft Visual C++ Runtime Library\", 0x12010);\n    }\n    else {\n        *(unaff_EBP - 4) = 0;\n        (*pcVar2)(*(unaff_EBP + 8), uVar1);\n        *(unaff_EBP - 4) = 0xffffffff;\n    }\n    fcn.004018eb(3);\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 914
    },
    "00401c99": {
        "rules": [
            "parse credit card information/92c3fd9898ba41b4bad3ffb6188f4688",
            "search for credit card data/212a26c2b8d740cd9f6579dba482d653"
        ],
        "decompiled_code": "\nuint fcn.00401c99(void)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    char *pcVar3;\n    int32_t iVar4;\n    \n    if (*0x43418c == 0) {\n        fcn.00402c4b();\n    }\n    iVar4 = 0;\n    pcVar3 = *0x433c00;\n    if (*0x433c00 != NULL) {\n        for (; *pcVar3 != '\\0'; pcVar3 = pcVar3 + iVar2 + 1) {\n            if (*pcVar3 != '=') {\n                iVar4 = iVar4 + 1;\n            }\n            iVar2 = fcn.00402760(pcVar3);\n        }\n        piVar1 = fcn.00402d13(iVar4 * 4 + 4);\n        pcVar3 = *0x433c00;\n        *0x433c88 = piVar1;\n        if (piVar1 != NULL) {\n            do {\n                if (*pcVar3 == '\\0') {\n                    fcn.00402c69(*0x433c00);\n                    *0x433c00 = NULL;\n                    *piVar1 = 0;\n                    *0x434180 = 1;\n                    return 0;\n                }\n                iVar4 = fcn.00402760(pcVar3);\n                if (*pcVar3 != '=') {\n                    iVar2 = fcn.00402d13(iVar4 + 1);\n                    *piVar1 = iVar2;\n                    if (iVar2 == 0) {\n                        fcn.00402c69(*0x433c88);\n                        *0x433c88 = NULL;\n                        return 0xffffffff;\n                    }\n                    fcn.00402530(iVar2, pcVar3);\n                    piVar1 = piVar1 + 1;\n                }\n                pcVar3 = pcVar3 + iVar4 + 1;\n            } while( true );\n        }\n    }\n    return 0xffffffff;\n}\n",
        "token_count": 439
    },
    "004034af": {
        "rules": [
            "encrypt data using HC-128/b24f3f77371449e18042164d6f6569c2"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.004034af(int32_t arg_8h)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t *piVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint32_t uVar8;\n    uint var_8h;\n    uint var_4h;\n    \n    iVar2 = *(arg_8h + 0x10);\n    iVar7 = 0;\n    for (iVar3 = *(arg_8h + 8); -1 < iVar3; iVar3 = iVar3 << 1) {\n        iVar7 = iVar7 + 1;\n    }\n    iVar3 = iVar7 * 0x204 + 0x144 + iVar2;\n    iVar6 = 0x3f;\n    iVar4 = iVar3;\n    do {\n        *(iVar4 + 8) = iVar4;\n        *(iVar4 + 4) = iVar4;\n        iVar4 = iVar4 + 8;\n        iVar6 = iVar6 + -1;\n    } while (iVar6 != 0);\n    uVar8 = iVar7 * 0x8000 + *(arg_8h + 0xc);\n    iVar4 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(uVar8, 0x8000, 0x1000, 4);\n    if (iVar4 == 0) {\n        iVar7 = -1;\n    }\n    else {\n        if (uVar8 <= uVar8 + 0x7000) {\n            piVar5 = uVar8 + 0x10;\n            iVar4 = ((uVar8 + 0x7000) - uVar8 >> 0xc) + 1;\n            do {\n                piVar5[-2] = -1;\n                piVar5[0x3fb] = -1;\n                *piVar5 = piVar5 + 0x3ff;\n                piVar5[-1] = 0xff0;\n                piVar5[1] = piVar5 + -0x401;\n                piVar5[0x3fa] = 0xff0;\n                piVar5 = piVar5 + 0x400;\n                iVar4 = iVar4 + -1;\n            } while (iVar4 != 0);\n        }\n        *(iVar3 + 0x1fc) = uVar8 + 0xc;\n        *(uVar8 + 0x14) = iVar3 + 0x1f8;\n        *(iVar3 + 0x200) = uVar8 + 0x700c;\n        *(uVar8 + 0x7010) = iVar3 + 0x1f8;\n        *(iVar2 + 0x44 + iVar7 * 4) = 0;\n        *(iVar2 + 0xc4 + iVar7 * 4) = 1;\n        cVar1 = *(iVar2 + 0x43);\n        *(iVar2 + 0x43) = cVar1 + '\\x01';\n        if (cVar1 == '\\0') {\n            *(arg_8h + 4) = *(arg_8h + 4) | 1;\n        }\n        *(arg_8h + 8) = *(arg_8h + 8) & ~(0x80000000U >> (iVar7 & 0x1f));\n    }\n    return iVar7;\n}\n",
        "token_count": 763
    },
    "004017af": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.004017af(uint param_1)\n\n{\n    int32_t iVar1;\n    code **ppcVar2;\n    \n    if (*0x434190 != NULL) {\n        (**0x434190)(param_1);\n    }\n    iVar1 = 0;\n    ppcVar2 = 0x40700c;\n    do {\n        if (iVar1 != 0) {\n            return iVar1;\n        }\n        if (*ppcVar2 != NULL) {\n            iVar1 = (**ppcVar2)();\n        }\n        ppcVar2 = ppcVar2 + 1;\n    } while (ppcVar2 < 0x407018);\n    if (iVar1 == 0) {\n        fcn.004023ef(0x40227f);\n        ppcVar2 = 0x407000;\n        do {\n            if (*ppcVar2 != NULL) {\n                (**ppcVar2)();\n            }\n            ppcVar2 = ppcVar2 + 1;\n        } while (ppcVar2 < 0x407008);\n        iVar1 = 0;\n    }\n    return iVar1;\n}\n",
        "token_count": 251
    },
    "0040223b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid fcn.0040223b(void)\n\n{\n    int32_t unaff_EBP;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.00401110(0x405510, 0xc);\n    *(unaff_EBP + -0x1c) = 0x405d0c;\n    while (*(unaff_EBP + -0x1c) < 0x405d0c) {\n        *(unaff_EBP + -4) = 0;\n        if (**(unaff_EBP + -0x1c) != NULL) {\n            (***(unaff_EBP + -0x1c))();\n        }\n        *(unaff_EBP + -4) = 0xffffffff;\n        *(unaff_EBP + -0x1c) = *(unaff_EBP + -0x1c) + 4;\n    }\n    fcn.0040114b();\n    return;\n}\n",
        "token_count": 225
    },
    "00402330": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Unable to track spacebase fully for stack\n\nvoid fcn.00402330(void)\n\n{\n    uint32_t in_EAX;\n    uchar *puVar1;\n    uint unaff_retaddr;\n    \n    if (in_EAX < 0x1000) {\n        *(&stack0x00000000 + -in_EAX) = unaff_retaddr;\n        return;\n    }\n    puVar1 = &stack0x00000004;\n    do {\n        puVar1 = puVar1 + -0x1000;\n        in_EAX = in_EAX - 0x1000;\n    } while (0xfff < in_EAX);\n    *(puVar1 + (-4 - in_EAX)) = unaff_retaddr;\n    return;\n}\n",
        "token_count": 166
    },
    "0040236d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid fcn.0040236d(uint param_1)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    \n    uVar1 = fcn.00403cf8(*0x434188);\n    if (uVar1 < *0x434184 + (4 - *0x434188)) {\n        uVar3 = 0x800;\n        if (uVar1 < 0x800) {\n            uVar3 = uVar1;\n        }\n        iVar2 = fcn.00403b90(*0x434188, uVar3 + uVar1);\n        if (iVar2 == 0) {\n            iVar2 = fcn.00403b90(*0x434188, uVar1 + 0x10);\n            if (iVar2 == 0) {\n                return;\n            }\n        }\n        *0x434184 = iVar2 + (*0x434184 - *0x434188 >> 2) * 4;\n        *0x434188 = iVar2;\n    }\n    **0x434184 = param_1;\n    *0x434184 = *0x434184 + 1;\n    return;\n}\n",
        "token_count": 264
    },
    "00402540": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t * fcn.00402540(uint32_t *param_1, uint32_t *param_2)\n\n{\n    uint8_t uVar1;\n    uint32_t uVar2;\n    uint32_t *puVar3;\n    uint32_t uVar4;\n    uint32_t *puVar5;\n    \n    uVar4 = param_1 & 3;\n    puVar3 = param_1;\n    while (uVar4 != 0) {\n        uVar1 = *puVar3;\n        puVar3 = puVar3 + 1;\n        if (uVar1 == 0) goto code_r0x00402593;\n        uVar4 = puVar3 & 3;\n    }\n    do {\n        do {\n            puVar5 = puVar3;\n            puVar3 = puVar5 + 1;\n        } while (((*puVar5 ^ 0xffffffff ^ *puVar5 + 0x7efefeff) & 0x81010100) == 0);\n        uVar4 = *puVar5;\n        if (uVar4 == '\\0') goto code_r0x004025a5;\n        if (uVar4 >> 8 == '\\0') {\n            puVar5 = puVar5 + 1;\n            goto code_r0x004025a5;\n        }\n        if ((uVar4 & 0xff0000) == 0) {\n            puVar5 = puVar5 + 2;\n            goto code_r0x004025a5;\n        }\n    } while ((uVar4 & 0xff000000) != 0);\ncode_r0x00402593:\n    puVar5 = puVar3 + -1;\ncode_r0x004025a5:\n    uVar4 = param_2 & 3;\n    while (uVar4 != 0) {\n        uVar1 = *param_2;\n        uVar4 = uVar1;\n        param_2 = param_2 + 1;\n        if (uVar1 == 0) goto code_r0x00402620;\n        *puVar5 = uVar1;\n        puVar5 = puVar5 + 1;\n        uVar4 = param_2 & 3;\n    }\n    do {\n        uVar2 = *param_2;\n        uVar4 = *param_2;\n        param_2 = param_2 + 1;\n        if (((uVar2 ^ 0xffffffff ^ uVar2 + 0x7efefeff) & 0x81010100) != 0) {\n            if (uVar4 == '\\0') {\ncode_r0x00402620:\n                *puVar5 = uVar4;\n                return param_1;\n            }\n            if (uVar4 >> 8 == '\\0') {\n                *puVar5 = uVar4;\n                return param_1;\n            }\n            if ((uVar4 & 0xff0000) == 0) {\n                *puVar5 = uVar4;\n                *(puVar5 + 2) = 0;\n                return param_1;\n            }\n            if ((uVar4 & 0xff000000) == 0) {\n                *puVar5 = uVar4;\n                return param_1;\n            }\n        }\n        *puVar5 = uVar4;\n        puVar5 = puVar5 + 1;\n    } while( true );\n}\n",
        "token_count": 747
    },
    "00402530": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t * fcn.00402530(uint32_t *param_1, uint32_t *param_2)\n\n{\n    uint8_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint32_t *puVar4;\n    \n    uVar3 = param_2 & 3;\n    puVar4 = param_1;\n    while (uVar3 != 0) {\n        uVar1 = *param_2;\n        uVar3 = uVar1;\n        param_2 = param_2 + 1;\n        if (uVar1 == 0) goto code_r0x00402620;\n        *puVar4 = uVar1;\n        puVar4 = puVar4 + 1;\n        uVar3 = param_2 & 3;\n    }\n    do {\n        uVar2 = *param_2;\n        uVar3 = *param_2;\n        param_2 = param_2 + 1;\n        if (((uVar2 ^ 0xffffffff ^ uVar2 + 0x7efefeff) & 0x81010100) != 0) {\n            if (uVar3 == '\\0') {\ncode_r0x00402620:\n                *puVar4 = uVar3;\n                return param_1;\n            }\n            if (uVar3 >> 8 == '\\0') {\n                *puVar4 = uVar3;\n                return param_1;\n            }\n            if ((uVar3 & 0xff0000) == 0) {\n                *puVar4 = uVar3;\n                *(puVar4 + 2) = 0;\n                return param_1;\n            }\n            if ((uVar3 & 0xff000000) == 0) {\n                *puVar4 = uVar3;\n                return param_1;\n            }\n        }\n        *puVar4 = uVar3;\n        puVar4 = puVar4 + 1;\n    } while( true );\n}\n",
        "token_count": 436
    },
    "004030b5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t fcn.004030b5(int32_t param_1)\n\n{\n    uint32_t uVar1;\n    \n    uVar1 = *0x433e18;\n    while( true ) {\n        if (*0x433e18 + *0x433e14 * 0x14 <= uVar1) {\n            return 0;\n        }\n        if (param_1 - *(uVar1 + 0xc) < 0x100000) break;\n        uVar1 = uVar1 + 0x14;\n    }\n    return uVar1;\n}\n",
        "token_count": 127
    },
    "004033f8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint * fcn.004033f8(void)\n\n{\n    uint *puVar1;\n    int32_t iVar2;\n    \n    if (*0x433e14 == *0x433e24) {\n        iVar2 = (*_sym.imp.KERNEL32.dll_HeapReAlloc)(*0x434060, 0, *0x433e18, (*0x433e24 * 5 + 0x50) * 4);\n        if (iVar2 == 0) {\n            return NULL;\n        }\n        *0x433e24 = *0x433e24 + 0x10;\n        *0x433e18 = iVar2;\n    }\n    puVar1 = *0x433e18 + *0x433e14 * 0x14;\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(*0x434060, 8, 0x41c4);\n    puVar1[4] = iVar2;\n    if (iVar2 != 0) {\n        iVar2 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(0, 0x100000, 0x2000, 4);\n        puVar1[3] = iVar2;\n        if (iVar2 != 0) {\n            puVar1[2] = 0xffffffff;\n            *puVar1 = 0;\n            puVar1[1] = 0;\n            *0x433e14 = *0x433e14 + 1;\n            *puVar1[4] = 0xffffffff;\n            return puVar1;\n        }\n        (*_sym.imp.KERNEL32.dll_HeapFree)(*0x434060, 0, puVar1[4]);\n    }\n    return NULL;\n}\n",
        "token_count": 380
    },
    "00404ce4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nuint32_t __cdecl fcn.00404ce4(uint32_t arg_8h, uint32_t arg_ch)\n\n{\n    uint noname_2;\n    int32_t iVar1;\n    uint32_t in_ECX;\n    uint unaff_EBP;\n    uint unaff_retaddr;\n    uint in_stack_0000000c;\n    uint in_stack_00000010;\n    uint in_stack_00000014;\n    uint32_t var_4h;\n    \n    if (arg_8h + 1 < 0x101) {\n        arg_8h._2_2_ = *(*0x433bd0 + arg_8h * 2);\n    }\n    else {\n        if ((*(*0x433bd0 + 1 + (arg_8h >> 8 & 0xffU) * 2) & 0x80) == 0) {\n            var_4h = in_ECX & 0xffff0000 | arg_8h & 0xff;\n            noname_2 = 1;\n        }\n        else {\n            var_4h = CONCAT11(arg_8h, arg_8h >> 8);\n            var_4h = in_ECX & 0xff000000 | var_4h;\n            noname_2 = 2;\n        }\n        iVar1 = fcn.004042b7(1, &var_4h, noname_2, &arg_8h + 2, *0x433df8, *0x433de8, 1, var_4h, unaff_EBP, \n                             unaff_retaddr, arg_8h, arg_ch, in_stack_0000000c, in_stack_00000010, in_stack_00000014);\n        if (iVar1 == 0) {\n            return 0;\n        }\n    }\n    return arg_8h._2_2_ & arg_ch;\n}\n",
        "token_count": 433
    },
    "00401102": {
        "rules": [
            "terminate process"
        ],
        "decompiled_code": "\nvoid fcn.00401102(void)\n\n{\n    code *pcVar1;\n    \n    fcn.00401044();\n    (*_sym.imp.KERNEL32.dll_ExitProcess)(0);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 62
    },
    "0040177f": {
        "rules": [
            "terminate process",
            "link function at runtime on Windows"
        ],
        "decompiled_code": "\nvoid fcn.0040177f(void)\n\n{\n    int32_t iVar1;\n    code *pcVar2;\n    uint unaff_retaddr;\n    \n    iVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(\"mscoree.dll\");\n    if (iVar1 != 0) {\n        pcVar2 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar1, \"CorExitProcess\");\n        if (pcVar2 != NULL) {\n            (*pcVar2)(unaff_retaddr);\n        }\n    }\n    (*_sym.imp.KERNEL32.dll_ExitProcess)(unaff_retaddr);\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 153
    },
    "00404830": {
        "rules": [
            "get geographical location"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00404830(uint Locale)\n\n{\n    int32_t iVar1;\n    uint lpLCData;\n    uchar var_6h;\n    uint32_t var_4h;\n    \n    var_4h = *0x433ad0 ^ &stack0xfffffffc;\n    var_6h = 0;\n    iVar1 = (*_sym.imp.KERNEL32.dll_GetLocaleInfoA)(Locale, 0x1004, &lpLCData, 6);\n    if (iVar1 != 0) {\n        fcn.00404bc5(&lpLCData);\n    }\n    fcn.0040281c();\n    return;\n}\n",
        "token_count": 143
    }
}