{
    "1400019d": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\nvoid fcn.1400019d0(ulong param_1, ulong param_2)\n\n{\n    char cVar1;\n    uint32_t uVar2;\n    uint64_t arg1;\n    int32_t iStack20;\n    \n    iStack20 = 0;\n    uVar2 = fcn.140001020(0, param_2);\n    arg1 = uVar2;\n    fcn.1400091a8(arg1);\n    while (iStack20 < 10) {\n        cVar1 = fcn.14000917c(arg1);\n        if (('`' < cVar1) && (cVar1 < '{')) {\n            arg1 = 0x140026ac0;\n            *(iStack20 + 0x140026ac0) = cVar1;\n            iStack20 = iStack20 + 1;\n        }\n    }\n    fcn.140008ef0(0x140026ac0, 0x14001a684);\n    return;\n}\n",
        "token_count": 218
    },
    "14000c25": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.14000c258(ulong *arg1, ulong arg2, uint8_t *arg3, uint64_t arg4)\n\n{\n    uint8_t uVar1;\n    char cVar2;\n    uint uVar3;\n    int64_t iVar4;\n    char *pcVar5;\n    uint64_t uVar6;\n    uint64_t uVar7;\n    uint32_t uVar8;\n    uint32_t uVar9;\n    uint8_t *puVar10;\n    uint64_t uVar11;\n    int64_t arg3_00;\n    ulong arg3_01;\n    char *pcVar12;\n    int32_t iVar13;\n    uint64_t uVar14;\n    uchar *in_stack_00000028;\n    uchar auStack280 [32];\n    uchar *puStack248;\n    uint uStack240;\n    ulong uStack232;\n    ulong uStack224;\n    uint16_t uStack216;\n    uint uStack212;\n    uint32_t uStack208;\n    uint8_t *puStack200;\n    uint64_t uStack192;\n    uint32_t uStack184;\n    int32_t iStack180;\n    int64_t iStack176;\n    uchar *puStack168;\n    uint8_t *puStack160;\n    ulong uStack152;\n    char *pcStack144;\n    uint8_t *puStack136;\n    ulong uStack128;\n    int64_t iStack120;\n    int64_t iStack112;\n    uint64_t uStack104;\n    ulong uStack96;\n    char acStack88 [8];\n    uint8_t uStack80;\n    uint8_t uStack79;\n    uchar auStack72 [8];\n    uint64_t uStack64;\n    \n    uStack96 = 0xfffffffffffffffe;\n    uStack64 = *0x140026018 ^ auStack280;\n    iStack112 = arg2;\n    puStack168 = in_stack_00000028;\n    iVar4 = iStack112 >> 6;\n    uVar6 = arg2 & 0x3f;\n    uStack128 = *(*(iVar4 * 8 + 0x140027550) + 0x28 + uVar6 * 0x48);\n    puStack200 = arg3 + (arg4 & 0xffffffff);\n    iStack176 = iVar4;\n    puStack160 = arg3;\n    uStack104 = uVar6;\n    uStack184 = (*_sym.imp.KERNEL32.dll_GetConsoleOutputCP)();\n    uVar11 = 0;\n    if (in_stack_00000028[0x28] == '\\0') {\n        fcn.140008500(in_stack_00000028);\n    }\n    iStack180 = *(*(in_stack_00000028 + 0x18) + 0xc);\n    *arg1 = 0;\n    *(arg1 + 1) = 0;\n    uVar7 = uVar11;\n    if (puStack160 < arg3 + (arg4 & 0xffffffff)) {\n        do {\n            iStack120 = iVar4;\n            uStack216 = uStack216 & 0xff00 | *arg3;\n            uStack212 = 0;\n            uVar14 = 1;\n            if (iStack180 == 0xfde9) {\n                pcVar12 = uVar6 * 0x48 + 0x3e + *(iStack120 * 8 + 0x140027550);\n                pcVar5 = pcVar12;\n                uVar7 = uVar11;\n                uVar14 = uVar11;\n                do {\n                    uVar8 = uVar7;\n                    if (*pcVar5 == '\\0') break;\n                    uVar8 = uVar8 + 1;\n                    uVar7 = uVar8;\n                    uVar14 = uVar14 + 1;\n                    pcVar5 = pcVar5 + 1;\n                } while (uVar14 < 5);\n                if (uVar14 == 0) {\n                    cVar2 = *(*arg3 + 0x140026920);\n                    iVar13 = cVar2 + 1;\n                    iVar4 = puStack200 - arg3;\n                    if (iVar4 < iVar13) {\n                        if (0 < iVar4) {\n                            uVar6 = uVar11;\n                            do {\n                                *(*((iStack112 >> 6) * 8 + 0x140027550) + uStack104 * 0x48 + 0x3e + uVar11) =\n                                     arg3[uVar11];\n                                uVar8 = uVar6 + 1;\n                                uVar6 = uVar8;\n                                uVar11 = uVar11 + 1;\n                            } while (uVar8 < iVar4);\n                        }\n                        *(arg1 + 4) = *(arg1 + 4) + iVar4;\n                        break;\n                    }\n                    uStack192 = 0;\n                    uVar8 = (iVar13 == 4) + 1;\n                    puStack248 = puStack168;\n                    puStack136 = arg3;\n                    iVar4 = fcn.140013abc(&uStack212, &puStack136, uVar8, &uStack192);\n                    if (iVar4 == -1) break;\n                    uVar14 = uVar8;\n                    puVar10 = arg3 + cVar2;\n                    in_stack_00000028 = puStack168;\n                }\n                else {\n                    iVar13 = *(*(*(iStack176 * 8 + 0x140027550) + 0x3e + uVar6 * 0x48) + 0x140026920) + 1;\n                    uVar8 = iVar13 - uVar8;\n                    uStack192 = uStack192 & 0xffffffff00000000 | uVar8;\n                    iVar4 = puStack200 - arg3;\n                    arg3_00 = uVar8;\n                    uVar7 = uVar11;\n                    if (iVar4 < arg3_00) {\n                        if (0 < iVar4) {\n                            uVar7 = uVar14;\n                            do {\n                                *(*(iStack176 * 8 + 0x140027550) + uVar7 + 0x3e + uVar6 * 0x48) = arg3[uVar7 - uVar14];\n                                uVar8 = uVar11 + 1;\n                                uVar11 = uVar8;\n                                uVar7 = uVar7 + 1;\n                            } while (uVar8 < iVar4);\n                        }\n                        *(arg1 + 4) = *(arg1 + 4) + iVar4;\n                        break;\n                    }\n                    do {\n                        acStack88[uVar7] = *pcVar12;\n                        uVar7 = uVar7 + 1;\n                        pcVar12 = pcVar12 + 1;\n                    } while (uVar7 < uVar14);\n                    uVar7 = uVar11;\n                    if (0 < arg3_00) {\n                        fcn.140002f80(acStack88 + uVar14, arg3, arg3_00);\n                    }\n                    do {\n                        *(*(iStack176 * 8 + 0x140027550) + uVar7 + 0x3e + uVar6 * 0x48) = 0;\n                        uVar7 = uVar7 + 1;\n                    } while (uVar7 < uVar14);\n                    uStack152 = 0;\n                    pcStack144 = acStack88;\n                    uVar8 = (iVar13 == 4) + 1;\n                    uVar14 = uVar8;\n                    puStack248 = in_stack_00000028;\n                    iVar4 = fcn.140013abc(&uStack212, &pcStack144, uVar8, &uStack152);\n                    if (iVar4 == -1) break;\n                    puVar10 = arg3 + (uStack192 + -1);\n                }\n            }\n            else {\n                iVar4 = *(iStack176 * 8 + 0x140027550);\n                uVar1 = *(iVar4 + 0x3d + uVar6 * 0x48);\n                if ((uVar1 & 4) == 0) {\n                    if (*(**(in_stack_00000028 + 0x18) + *arg3 * 2) < 0) {\n                        puVar10 = arg3 + 1;\n                        if (puVar10 < puStack200) {\n                            iVar13 = fcn.14000e6f0(&uStack212, arg3, 2, in_stack_00000028);\n                            if (iVar13 != -1) goto code_r0x00014000c555;\n                        }\n                        else {\n                            *(iVar4 + 0x3e + uVar6 * 0x48) = *arg3;\n                            puVar10 = *(iStack176 * 8 + 0x140027550) + 0x3d + uVar6 * 0x48;\n                            *puVar10 = *puVar10 | 4;\n                            *(arg1 + 4) = uVar7 + 1;\n                        }\n                        break;\n                    }\n                    arg3_01 = 1;\n                    puVar10 = arg3;\n                }\n                else {\n                    uStack80 = *(iVar4 + 0x3e + uVar6 * 0x48);\n                    uStack79 = *arg3;\n                    *(iVar4 + 0x3d + uVar6 * 0x48) = uVar1 & 0xfb;\n                    arg3_01 = 2;\n                    puVar10 = &uStack80;\n                }\n                iVar13 = fcn.14000e6f0(&uStack212, puVar10, arg3_01, in_stack_00000028);\n                puVar10 = arg3;\n                if (iVar13 == -1) break;\n            }\ncode_r0x00014000c555:\n            arg3 = puVar10 + 1;\n            uStack224 = 0;\n            uStack232 = 0;\n            uStack240 = 5;\n            puStack248 = auStack72;\n            uVar8 = fcn.14001132c(uStack184, 0, &uStack212, uVar14);\n            if (uVar8 == 0) break;\n            puStack248 = NULL;\n            iVar13 = (*_sym.imp.KERNEL32.dll_WriteFile)();\n            if (iVar13 == 0) {\ncode_r0x00014000c6b0:\n                uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                *arg1 = uVar3;\n                break;\n            }\n            uVar9 = (arg3 - puStack160) + *(arg1 + 1);\n            *(arg1 + 4) = uVar9;\n            if (uStack208 < uVar8) break;\n            if (uStack216 == '\\n') {\n                uStack216 = 0xd;\n                puStack248 = NULL;\n                iVar13 = (*_sym.imp.KERNEL32.dll_WriteFile)();\n                if (iVar13 == 0) goto code_r0x00014000c6b0;\n                if (uStack208 == 0) break;\n                *(arg1 + 1) = *(arg1 + 1) + 1;\n                *(arg1 + 4) = *(arg1 + 4) + 1;\n                uVar9 = *(arg1 + 4);\n            }\n            uVar7 = uVar9;\n            iVar4 = iStack120;\n        } while (arg3 < puStack200);\n    }\n    fcn.140002480(uStack64 ^ auStack280);\n    return;\n}\n",
        "token_count": 2551
    },
    "14000cc3": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: lpMode\n// WARNING: Variable defined which should be unmapped: var_20h\n// WARNING: Variable defined which should be unmapped: lpNumberOfBytesWritten\n// WARNING: Variable defined which should be unmapped: var_38h\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t fcn.14000cc34(ulong arg1, int16_t *arg2, ulong arg3, int64_t arg4)\n\n{\n    char cVar1;\n    int64_t iVar2;\n    uint64_t uVar3;\n    int16_t iVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    uint64_t uVar7;\n    uint64_t *puVar8;\n    int64_t iVar9;\n    int32_t iVar10;\n    uint64_t uVar11;\n    uint64_t arg4_00;\n    int16_t *piVar12;\n    ulong uStack112;\n    int32_t iStack104;\n    uint64_t uStack96;\n    int16_t iStack80;\n    ulong var_38h;\n    ulong lpNumberOfBytesWritten;\n    ulong var_20h;\n    ulong lpMode;\n    \n    iVar10 = 0;\n    arg4_00 = arg3;\n    uVar11 = arg1;\n    if (arg3 == 0) {\n        return 0;\n    }\n    if (arg2 == NULL) {\ncode_r0x00014000cc64:\n        *(arg4 + 0x38) = 1;\n        *(arg4 + 0x34) = 0;\n        *(arg4 + 0x30) = 1;\n        *(arg4 + 0x2c) = 0x16;\n        fcn.1400094e8(0, 0, 0, 0);\n        return -1;\n    }\n    uVar7 = arg1 & 0x3f;\n    iVar9 = uVar11 >> 6;\n    iVar2 = *(iVar9 * 8 + 0x140027550);\n    cVar1 = *(iVar2 + 0x39 + uVar7 * 0x48);\n    if ((cVar1 - 1U < 2) && ((~arg3 & 1) == 0)) goto code_r0x00014000cc64;\n    if ((*(iVar2 + 0x38 + uVar7 * 0x48) & 0x20) != 0) {\n        fcn.140013a70(uVar11 & 0xffffffff, 0, 2, arg4);\n    }\n    uStack96 = 0;\n    iVar5 = fcn.140013704(uVar11 & 0xffffffff);\n    if ((iVar5 == 0) || (-1 < *(*(iVar9 * 8 + 0x140027550) + 0x38 + uVar7 * 0x48))) {\ncode_r0x00014000ce1d:\n        iVar2 = *(iVar9 * 8 + 0x140027550);\n        if (-1 < *(iVar2 + 0x38 + uVar7 * 0x48)) {\n            uStack112 = 0;\n            iStack104 = 0;\n            iVar5 = (*_sym.imp.KERNEL32.dll_WriteFile)(*(iVar2 + 0x28 + uVar7 * 0x48), arg2, arg4_00, &uStack112 + 4, 0)\n            ;\n            iVar10 = iStack104;\n            uVar3 = uStack112;\n            if (iVar5 == 0) {\n                uVar6 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                uStack112 = uStack112 & 0xffffffff00000000 | uVar6;\n                iVar10 = iStack104;\n                uVar3 = uStack112;\n            }\n            goto code_r0x00014000cec1;\n        }\n        if (cVar1 == '\\0') {\n            puVar8 = fcn.14000c6e4(&uStack112, uVar11 & 0xffffffff, arg2, arg4_00);\n        }\n        else if (cVar1 == '\\x01') {\n            puVar8 = fcn.14000c904(&uStack112, uVar11 & 0xffffffff, arg2, arg4_00);\n        }\n        else {\n            iVar10 = 0;\n            uVar3 = uStack96;\n            if (cVar1 != '\\x02') goto code_r0x00014000cec1;\n            puVar8 = fcn.14000c7e8(&uStack112, uVar11 & 0xffffffff, arg2, arg4_00);\n        }\n    }\n    else {\n        if (*(arg4 + 0x28) == '\\0') {\n            fcn.140008500(arg4);\n        }\n        if (((*(*(arg4 + 0x18) + 0x138) == 0) && (*(*(iVar9 * 8 + 0x140027550) + 0x39 + uVar7 * 0x48) == '\\0')) ||\n           (iVar5 = (*_sym.imp.KERNEL32.dll_GetConsoleMode)(),  iVar5 == 0)) goto code_r0x00014000ce1d;\n        if (cVar1 != '\\0') {\n            uVar3 = uStack96;\n            if (cVar1 - 1U < 2) {\n                uStack112 = 0;\n                uVar3 = uStack112;\n                if (arg2 < arg2 + arg4_00) {\n                    uStack112._4_4_ = 0;\n                    piVar12 = arg2;\n                    do {\n                        iStack80 = *piVar12;\n                        iVar4 = fcn.140013c60();\n                        if (iVar4 != iStack80) {\ncode_r0x00014000cde1:\n                            uVar6 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                            uStack112 = uStack112 & 0xffffffff00000000 | uVar6;\n                            uVar3 = uStack112;\n                            break;\n                        }\n                        uStack112 = uStack112 & 0xffffffff | uStack112._4_4_ + 2 << 0x20;\n                        uVar6 = uStack112._4_4_ + 2;\n                        if (iStack80 == 10) {\n                            iVar4 = fcn.140013c60(0xd);\n                            if (iVar4 != 0xd) goto code_r0x00014000cde1;\n                            uStack112 = uStack112 & 0xffffffff | uStack112._4_4_ + 3 << 0x20;\n                            iVar10 = iVar10 + 1;\n                            uVar6 = uStack112._4_4_ + 3;\n                        }\n                        uStack112._4_4_ = uVar6;\n                        piVar12 = piVar12 + 1;\n                        uVar3 = uStack112;\n                    } while (piVar12 < arg2 + arg4_00);\n                }\n            }\n            goto code_r0x00014000cec1;\n        }\n        puVar8 = fcn.14000c258(&uStack112, uVar11 & 0xffffffff, arg2, arg4_00);\n    }\n    iVar10 = *(puVar8 + 1);\n    uVar3 = *puVar8;\ncode_r0x00014000cec1:\n    uStack96 = uVar3;\n    iVar5 = uStack96 >> 0x20;\n    if (iVar5 != 0) {\n        return iVar5 - iVar10;\n    }\n    if (uStack96 != 0) {\n        if (uStack96 == 5) {\n            *(arg4 + 0x30) = 1;\n            *(arg4 + 0x2c) = 9;\n            *(arg4 + 0x38) = 1;\n            *(arg4 + 0x34) = 5;\n            return -1;\n        }\n        fcn.1400096b0(uStack96 & 0xffffffff, arg4);\n        return -1;\n    }\n    if (((*(*(iVar9 * 8 + 0x140027550) + 0x38 + uVar7 * 0x48) & 0x40) != 0) && (*arg2 == '\\x1a')) {\n        return 0;\n    }\n    *(arg4 + 0x34) = 0;\n    *(arg4 + 0x30) = 1;\n    *(arg4 + 0x2c) = 0x1c;\n    *(arg4 + 0x38) = 1;\n    return -1;\n}\n",
        "token_count": 1922
    },
    "14000d72": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\nulong fcn.14000d728(uint64_t *arg1, uchar *arg2, uint64_t arg3, ulong arg4)\n\n{\n    uint8_t *puVar1;\n    char cVar2;\n    uint16_t uVar3;\n    ulong uVar4;\n    char *pcVar5;\n    uint8_t *puVar6;\n    int64_t iVar7;\n    int64_t iVar8;\n    uint64_t uVar9;\n    uint8_t uVar10;\n    int16_t iVar11;\n    uint8_t *arg1_00;\n    uint32_t uVar12;\n    uint8_t *puVar13;\n    uint64_t uVar14;\n    uint64_t uVar15;\n    uint32_t in_stack_00000030;\n    uint8_t in_stack_00000038;\n    uint32_t in_stack_00000048;\n    int64_t in_stack_00000050;\n    \n    *arg2 = 0;\n    uVar12 = 0;\n    if (-1 < in_stack_00000030) {\n        uVar12 = in_stack_00000030;\n    }\n    if (arg3 <= uVar12 + 0xb) {\n        *(in_stack_00000050 + 0x30) = 1;\n        *(in_stack_00000050 + 0x2c) = 0x22;\n        fcn.1400094e8(0, 0, 0, 0);\n        return 0x22;\n    }\n    uVar14 = *arg1;\n    uVar9 = 0x7ff;\n    if ((uVar14 >> 0x34 & 0x7ff) == 0x7ff) {\n        uVar4 = fcn.14000dadc(arg1, arg2, arg3, arg4);\n        if (uVar4 != 0) {\n            *arg2 = 0;\n            return uVar4;\n        }\n        pcVar5 = fcn.140018f68(arg2, 0x65);\n        if (pcVar5 == NULL) {\n            return 0;\n        }\n        *pcVar5 = (in_stack_00000038 ^ 1) * ' ' + 'P';\n        pcVar5[3] = '\\0';\n        return 0;\n    }\n    if (uVar14 < 0) {\n        *arg2 = 0x2d;\n        arg2 = arg2 + 1;\n        uVar14 = *arg1;\n    }\n    puVar1 = arg2 + 1;\n    uVar15 = 0x3ff;\n    iVar11 = (in_stack_00000038 ^ 1) * 0x20 + 7;\n    if ((uVar14 & 0x7ff0000000000000) == 0) {\n        *arg2 = 0x30;\n        uVar15 = -((*arg1 & 0xfffffffffffff) != 0) & 0x3fe;\n    }\n    else {\n        *arg2 = 0x31;\n    }\n    arg1_00 = arg2 + 2;\n    if (uVar12 == 0) {\n        uVar10 = 0;\n    }\n    else {\n        if (*(in_stack_00000050 + 0x28) == '\\0') {\n            fcn.140008500(in_stack_00000050);\n        }\n        uVar10 = ***(*(in_stack_00000050 + 0x18) + 0xf8);\n    }\n    *puVar1 = uVar10;\n    if ((*arg1 & 0xfffffffffffff) != 0) {\n        uVar9 = 0x30;\n        uVar14 = 0xf000000000000;\n        do {\n            if (uVar12 < 1) {\n                cVar2 = fcn.14000e140(arg1, uVar14, uVar9, in_stack_00000048);\n                uVar9 = uVar14;\n                puVar13 = arg1_00;\n                if (cVar2 != '\\0') {\n                    while( true ) {\n                        puVar6 = puVar13 + -1;\n                        uVar10 = *puVar6;\n                        uVar14 = uVar14 & 0xffffffffffffff00 | uVar10;\n                        if ((uVar14 - 0x46U & 0xdf) != 0) break;\n                        *puVar6 = 0x30;\n                        puVar13 = puVar6;\n                    }\n                    uVar9 = uVar14;\n                    if (puVar6 == puVar1) {\n                        puVar13[-2] = puVar13[-2] + 1;\n                    }\n                    else {\n                        if (uVar10 == 0x39) {\n                            uVar10 = iVar11 + 0x3a;\n                        }\n                        else {\n                            uVar10 = uVar10 + 1;\n                        }\n                        *puVar6 = uVar10;\n                    }\n                }\n                break;\n            }\n            uVar3 = ((*arg1 & uVar14) >> (uVar9 & 0x3f)) + 0x30;\n            if (0x39 < uVar3) {\n                uVar3 = uVar3 + iVar11;\n            }\n            *arg1_00 = uVar3;\n            uVar12 = uVar12 - 1;\n            arg1_00 = arg1_00 + 1;\n            uVar14 = uVar14 >> 4;\n            uVar3 = uVar9 - 4;\n            uVar9 = uVar3;\n        } while (-1 < uVar3);\n    }\n    if (0 < uVar12) {\n        fcn.140003630(arg1_00, uVar9 & 0xffffffffffffff00 | 0x30, uVar12);\n        arg1_00 = arg1_00 + uVar12;\n    }\n    if (*puVar1 == 0) {\n        arg1_00 = puVar1;\n    }\n    *arg1_00 = (in_stack_00000038 ^ 1) * ' ' + 0x50;\n    puVar1 = arg1_00 + 2;\n    uVar12 = *arg1 >> 0x34 & 0x7ff;\n    iVar7 = uVar12 - uVar15;\n    iVar8 = iVar7;\n    if (iVar7 < 0) {\n        iVar8 = uVar15 - uVar12;\n    }\n    uVar10 = 0x2b;\n    if (iVar7 < 0) {\n        uVar10 = 0x2d;\n    }\n    arg1_00[1] = uVar10;\n    *puVar1 = 0x30;\n    puVar13 = puVar1;\n    if (iVar8 < 1000) {\ncode_r0x00014000da48:\n        if (99 < iVar8) goto code_r0x00014000da4e;\ncode_r0x00014000da81:\n        if (iVar8 < 10) goto code_r0x00014000dab2;\n    }\n    else {\n        puVar13 = arg1_00 + 3;\n        *puVar1 = iVar8 / 1000 + 0x30;\n        iVar8 = iVar8 % 1000;\n        if (puVar13 == puVar1) goto code_r0x00014000da48;\ncode_r0x00014000da4e:\n        iVar7 = SUB168(SEXT816(-0x5c28f5c28f5c28f5) * SEXT816(iVar8) >> 0x40, 0) + iVar8;\n        iVar7 = (iVar7 >> 6) - (iVar7 >> 0x3f);\n        *puVar13 = iVar7 + 0x30;\n        puVar13 = puVar13 + 1;\n        iVar8 = iVar8 + iVar7 * -100;\n        if (puVar13 == puVar1) goto code_r0x00014000da81;\n    }\n    *puVar13 = iVar8 / 10 + 0x30;\n    puVar13 = puVar13 + 1;\n    iVar8 = iVar8 % 10;\ncode_r0x00014000dab2:\n    *puVar13 = iVar8 + 0x30;\n    puVar13[1] = 0;\n    return 0;\n}\n",
        "token_count": 1850
    },
    "14000dbd": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\nulong fcn.14000dbd8(uchar *arg1, uchar *arg2, ulong arg3)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    ulong uVar3;\n    uchar *puVar4;\n    uchar *arg2_00;\n    int64_t iVar5;\n    char in_R9B;\n    int32_t in_stack_00000028;\n    int32_t *in_stack_00000030;\n    uint8_t in_stack_00000038;\n    int64_t in_stack_00000040;\n    int64_t iVar6;\n    \n    iVar2 = 0;\n    if (0 < arg3) {\n        iVar2 = arg3;\n    }\n    if (iVar2 + 9 < arg2) {\n        if ((in_stack_00000038 != 0) && (puVar4 = arg1 + (*in_stack_00000030 == 0x2d),  0 < arg3)) {\n            iVar5 = -1;\n            do {\n                iVar6 = iVar5;\n                iVar5 = iVar6 + 1;\n            } while (puVar4[iVar5] != '\\0');\n            fcn.140002f80(puVar4 + 1, puVar4, iVar6 + 2);\n        }\n        puVar4 = arg1;\n        if (*in_stack_00000030 == 0x2d) {\n            *arg1 = 0x2d;\n            puVar4 = arg1 + 1;\n        }\n        if (0 < arg3) {\n            *puVar4 = puVar4[1];\n            puVar4 = puVar4 + 1;\n            if (*(in_stack_00000040 + 0x28) == '\\0') {\n                fcn.140008500(in_stack_00000040);\n            }\n            *puVar4 = ***(*(in_stack_00000040 + 0x18) + 0xf8);\n        }\n        puVar4 = puVar4 + (in_stack_00000038 ^ 1) + arg3;\n        arg2_00 = arg1 + (arg2 - puVar4);\n        if (arg2 == 0xffffffffffffffff) {\n            arg2_00 = arg2;\n        }\n        iVar2 = fcn.14000ad60(puVar4, arg2_00, \"e+000\");\n        if (iVar2 != 0) {\n            fcn.1400095d8(0, 0, 0, 0, 0);\n            pcVar1 = swi(3);\n            uVar3 = (*pcVar1)();\n            return uVar3;\n        }\n        if (in_R9B != '\\0') {\n            *puVar4 = 0x45;\n        }\n        if (**(in_stack_00000030 + 2) != '0') {\n            iVar2 = in_stack_00000030[1] + -1;\n            if (iVar2 < 0) {\n                iVar2 = -iVar2;\n                puVar4[1] = 0x2d;\n            }\n            if (99 < iVar2) {\n                puVar4[2] = puVar4[2] + iVar2 / 100;\n                iVar2 = iVar2 % 100;\n            }\n            if (9 < iVar2) {\n                puVar4[3] = puVar4[3] + iVar2 / 10;\n                iVar2 = iVar2 % 10;\n            }\n            puVar4[4] = puVar4[4] + iVar2;\n        }\n        if ((in_stack_00000028 == 2) && (puVar4[2] == '0')) {\n            fcn.140002f80(puVar4 + 2, puVar4 + 3, 3);\n        }\n        uVar3 = 0;\n    }\n    else {\n        *(in_stack_00000040 + 0x30) = 1;\n        *(in_stack_00000040 + 0x2c) = 0x22;\n        fcn.1400094e8(0, 0, 0, 0);\n        uVar3 = 0x22;\n    }\n    return uVar3;\n}\n",
        "token_count": 922
    },
    "140013e7": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\nint32_t fcn.140013e74(ulong arg1, uint8_t *arg2, int64_t arg3, ulong arg4)\n\n{\n    uint8_t uVar1;\n    char cVar2;\n    ulong uVar3;\n    uint32_t uVar4;\n    uint64_t uVar5;\n    uint8_t *puVar6;\n    uint *puVar7;\n    int64_t iVar8;\n    uint8_t *puVar9;\n    uint64_t uVar10;\n    int32_t iVar11;\n    uint8_t *puVar12;\n    uint8_t *puVar13;\n    int64_t iVar14;\n    uint64_t uVar15;\n    char acStackX8 [8];\n    int32_t aiStackX16 [2];\n    \n    uVar15 = arg1;\n    uVar5 = arg1 & 0x3f;\n    iVar14 = uVar15 >> 6;\n    iVar8 = *(iVar14 * 8 + 0x140027550);\n    uVar3 = *(iVar8 + 0x28 + uVar5 * 0x48);\n    if ((arg3 == 0) || (*arg2 != 10)) {\n        puVar9 = iVar8 + 0x38 + uVar5 * 0x48;\n        *puVar9 = *puVar9 & 0xfb;\n    }\n    else {\n        puVar9 = iVar8 + 0x38 + uVar5 * 0x48;\n        *puVar9 = *puVar9 | 4;\n    }\n    puVar9 = arg2 + arg3;\n    puVar13 = arg2;\n    puVar12 = arg2;\n    if (arg2 < puVar9) {\n        do {\n            uVar1 = *puVar13;\n            if (uVar1 == 0x1a) {\n                iVar8 = *(iVar14 * 8 + 0x140027550);\n                uVar1 = *(iVar8 + 0x38 + uVar5 * 0x48);\n                if ((uVar1 & 0x40) != 0) {\n                    *puVar12 = 0x1a;\n                    goto code_r0x000140013fef;\n                }\n                *(iVar8 + 0x38 + uVar5 * 0x48) = uVar1 | 2;\n                break;\n            }\n            puVar6 = puVar13 + 1;\n            if (uVar1 == 0xd) {\n                if (puVar9 <= puVar6) {\n                    iVar11 = (*_sym.imp.KERNEL32.dll_ReadFile)(uVar3, acStackX8, 1, aiStackX16, 0);\n                    if ((iVar11 == 0) || (aiStackX16[0] == 0)) {\n                        *puVar12 = 0xd;\n                    }\n                    else if ((*(*(iVar14 * 8 + 0x140027550) + 0x38 + (arg1 & 0x3f) * 0x48) & 0x48) == 0) {\n                        if ((acStackX8[0] == '\\n') && (puVar12 == arg2)) goto code_r0x000140013f83;\n                        fcn.1400139d4(uVar15 & 0xffffffff, 0xffffffffffffffff);\n                        if (acStackX8[0] == '\\n') break;\n                        *puVar12 = 0xd;\n                    }\n                    else if (acStackX8[0] == '\\n') {\ncode_r0x000140013f83:\n                        *puVar12 = 10;\n                    }\n                    else {\n                        *puVar12 = 0xd;\n                        *(*(iVar14 * 8 + 0x140027550) + 0x3a + (arg1 & 0x3f) * 0x48) = acStackX8[0];\n                    }\ncode_r0x000140013fef:\n                    puVar12 = puVar12 + 1;\n                    break;\n                }\n                if (*puVar6 == 10) {\n                    *puVar12 = 10;\n                    iVar8 = 2;\n                }\n                else {\n                    *puVar12 = 0xd;\n                    iVar8 = 1;\n                }\n                puVar6 = puVar13 + iVar8;\n            }\n            else {\n                *puVar12 = uVar1;\n            }\n            puVar12 = puVar12 + 1;\n            puVar13 = puVar6;\n        } while (puVar6 < puVar9);\n    }\n    iVar11 = puVar12 - arg2;\n    if (iVar11 == 0) {\n        return 0;\n    }\n    iVar8 = *(iVar14 * 8 + 0x140027550);\n    if (*(iVar8 + 0x39 + uVar5 * 0x48) != '\\0') {\n        puVar9 = arg2 + iVar11;\n        if (puVar9[-1] < '\\0') {\n            uVar10 = 1;\n            for (puVar9 = puVar9 + -1;\n                ((uVar4 = uVar10,  *(*puVar9 + 0x140026920) == '\\0' && (uVar4 < 5)) && (arg2 <= puVar9));\n                puVar9 = puVar9 + -1) {\n                uVar10 = uVar4 + 1;\n            }\n            cVar2 = *(*puVar9 + 0x140026920);\n            if (cVar2 == '\\0') {\n                puVar7 = fcn.1400096f4();\n                *puVar7 = 0x2a;\n                return -1;\n            }\n            if (cVar2 + 1U == uVar4) {\n                puVar9 = puVar9 + uVar10;\n            }\n            else if ((*(iVar8 + 0x38 + uVar5 * 0x48) & 0x48) == 0) {\n                fcn.1400139d4(uVar15 & 0xffffffff, -uVar4, 1);\n            }\n            else {\n                puVar13 = puVar9 + 1;\n                *(iVar8 + 0x3a + uVar5 * 0x48) = *puVar9;\n                if (1 < uVar4) {\n                    uVar1 = *puVar13;\n                    puVar13 = puVar9 + 2;\n                    *(*(iVar14 * 8 + 0x140027550) + 0x3b + uVar5 * 0x48) = uVar1;\n                }\n                if (uVar4 == 3) {\n                    uVar1 = *puVar13;\n                    puVar13 = puVar13 + 1;\n                    *(*(iVar14 * 8 + 0x140027550) + 0x3c + uVar5 * 0x48) = uVar1;\n                }\n                puVar9 = puVar13 + -uVar10;\n            }\n        }\n        iVar11 = fcn.1400112d0(0xfde9, 0);\n        if (iVar11 == 0) {\n            uVar4 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            fcn.140009668(uVar4);\n            return -1;\n        }\n        iVar8 = *(iVar14 * 8 + 0x140027550);\n        puVar13 = iVar8 + 0x3d + uVar5 * 0x48;\n        *puVar13 = *puVar13 & 0xfd;\n        puVar13 = iVar8 + 0x3d + uVar5 * 0x48;\n        *puVar13 = *puVar13 | -(iVar11 != puVar9 - arg2) & 2U;\n        return iVar11 * 2;\n    }\n    return iVar11;\n}\n",
        "token_count": 1735
    },
    "140014c1": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.140014c1c(uint32_t *arg1, ulong arg2, ulong arg3, uint *arg4)\n\n{\n    uint32_t *puVar1;\n    uint8_t uVar2;\n    code *pcVar3;\n    int8_t iVar4;\n    uint uVar5;\n    int32_t iVar6;\n    uint32_t uVar7;\n    uint64_t uVar8;\n    uint *puVar9;\n    uint8_t uVar10;\n    uint32_t uVar11;\n    uint64_t uVar12;\n    uint64_t uVar13;\n    uint32_t uVar14;\n    int64_t iVar15;\n    uint32_t uVar16;\n    int32_t iVar17;\n    char *pcVar18;\n    uint64_t uVar19;\n    uint32_t uVar20;\n    uint32_t uVar21;\n    uint32_t uVar22;\n    bool bVar23;\n    double dVar24;\n    char *in_stack_00000028;\n    int64_t in_stack_00000030;\n    ulong var_160h;\n    ulong var_334h;\n    ulong var_500h;\n    ulong var_6d0h;\n    uchar auStack2072 [32];\n    ulong uStack2040;\n    ulong uStack2024;\n    uint32_t uStack2016;\n    uint32_t uStack2012;\n    uint32_t uStack2008;\n    uint32_t uStack2004;\n    uint32_t uStack2000;\n    uint32_t *puStack1992;\n    uint32_t uStack1984;\n    uint8_t auStack1976 [8];\n    char cStack1968;\n    uint32_t uStack1960;\n    int32_t iStack1956;\n    char *pcStack1952;\n    uint32_t *puStack1944;\n    uint *puStack1936;\n    uint32_t uStack1928;\n    uint32_t auStack1924 [115];\n    uint32_t uStack1464;\n    uint32_t auStack1460 [115];\n    uint32_t uStack1000;\n    uint32_t auStack996 [115];\n    uint32_t uStack536;\n    uint32_t auStack532 [99];\n    ulong var_80h;\n    ulong var_bp_78h;\n    ulong var_6ch;\n    uint64_t uStack72;\n    \n    uStack72 = *0x140026018 ^ auStack2072;\n    pcStack1952 = in_stack_00000028;\n    uStack2024 = arg1;\n    iStack1956 = arg3;\n    puStack1936 = arg4;\n    fcn.1400172d0(auStack1976);\n    cStack1968 = (auStack1976[0] & 0x1f) != 0x1f;\n    if (cStack1968) {\n        fcn.14001733c(auStack1976);\n    }\n    puVar1 = uStack2024;\n    *(arg4 + 2) = in_stack_00000028;\n    uVar5 = 0x20;\n    if (uStack2024 < 0) {\n        uVar5 = 0x2d;\n    }\n    *arg4 = uVar5;\n    fcn.14001726c(&uStack1960, 0, 0);\n    uVar8 = puVar1 >> 0x34 & 0x7ff;\n    if (uVar8 == 0) {\n        if (((puVar1 & 0xfffffffffffff) == 0) || ((uStack1960 & 0x1000000) != 0)) {\n            arg4[1] = 0;\n            pcVar18 = 0x14001dd6c;\ncode_r0x000140014d62:\n            iVar6 = fcn.14000ad60(in_stack_00000028, in_stack_00000030, pcVar18);\njoined_r0x000140014da8:\n            if (iVar6 != 0) {\n                uStack2040 = 0;\n                fcn.1400095d8(0, 0, 0, 0);\n                pcVar3 = swi(3);\n                (*pcVar3)();\n                return;\n            }\n            goto code_r0x000140015e11;\n        }\n    }\n    else if (uVar8 == 0x7ff) {\n        if ((puVar1 & 0xfffffffffffff) == 0) {\n            uVar22 = 1;\n        }\n        else if ((puVar1 < 0) && ((puVar1 & 0xfffffffffffff) == 0x8000000000000)) {\n            uVar22 = 4;\n        }\n        else {\n            uVar22 = ~(puVar1 >> 0x33) & 1 | 2;\n        }\n        arg4[1] = 1;\n        if (uVar22 != 1) {\n            if (uVar22 == 2) {\n                pcVar18 = \"1#QNAN\";\n            }\n            else if (uVar22 == 3) {\n                pcVar18 = \"1#SNAN\";\n            }\n            else {\n                if (uVar22 != 4) goto code_r0x000140014db3;\n                pcVar18 = \"1#IND\";\n            }\n            goto code_r0x000140014d62;\n        }\n        iVar6 = fcn.14000ad60(in_stack_00000028, in_stack_00000030, \"1#INF\");\n        goto joined_r0x000140014da8;\n    }\ncode_r0x000140014db3:\n    uStack2024 = puVar1 & 0x7fffffffffffffff;\n    uStack1984 = arg2 + 1;\n    iVar15 = (-(uStack2024 >> 0x34 != 0) & 0x10000000000000) + (puVar1 & 0xfffffffffffff);\n    uVar21 = (2 - (uStack2024 >> 0x34 != 0)) + (uStack2024 >> 0x34);\n    puStack1992 = uStack2024;\n    fcn.140017450();\n    dVar24 = fcn.14001738c();\n    auStack1924[0] = iVar15;\n    uStack2016 = -((dVar24 + 0x80000001U & 0xfffffffe) != 0) & dVar24;\n    auStack1924[1] = iVar15 >> 0x20;\n    uVar22 = auStack1924[1] != 0;\n    uVar14 = uVar22 + 1;\n    if (uVar21 < 0x434) {\n        if (uVar21 == 0x36) {\ncode_r0x0001400151c7:\n            uStack2024 = uStack2024._4_4_ << 0x20;\n            puVar1 = auStack1924 + (-(auStack1924[1] != 0) & 4);\n            iVar6 = 0x1f;\n            bVar23 = *puVar1 == 0;\n            if (!bVar23) {\n                for (; *puVar1 >> iVar6 == 0; iVar6 = iVar6 + -1) {\n                }\n            }\n            if (bVar23) {\n                iVar6 = 0;\n            }\n            else {\n                iVar6 = iVar6 + 1;\n            }\n            uVar22 = (iVar6 == 0x20) + uVar14;\n            if (uVar22 < 0x74) {\n                uVar16 = uVar22 - 1;\n                while (uVar16 != 0xffffffff) {\n                    uVar20 = uVar16 - 1;\n                    if (uVar16 < uVar14) {\n                        uVar7 = auStack1924[uVar16];\n                    }\n                    else {\n                        uVar7 = 0;\n                    }\n                    if (uVar20 < uVar14) {\n                        uVar11 = auStack1924[uVar20];\n                    }\n                    else {\n                        uVar11 = 0;\n                    }\n                    auStack1924[uVar16] = uVar11 >> 0x1f | uVar7 * 2;\n                    uVar16 = uVar20;\n                }\n            }\n            else {\n                uVar22 = 0;\n            }\n            uVar14 = 0x435 - uVar21 >> 5;\n            uStack1928 = uVar22;\n            fcn.140003630(auStack996, 0, uVar14 * 4);\n            auStack996[uVar14] = 1 << (0x435 - uVar21 & 0x1f);\n        }\n        else {\n            auStack996[1] = 0x100000;\n            auStack996[0] = 0;\n            uStack1000 = 2;\n            if (auStack1924[1] == 0) goto code_r0x0001400151c7;\n            uVar8 = 0;\n            do {\n                if (auStack996[uVar8] != auStack1924[uVar8]) goto code_r0x0001400151c7;\n                uVar22 = uVar8 + 1;\n                uVar8 = uVar22;\n            } while (uVar22 != 2);\n            uStack2024 = uStack2024._4_4_ << 0x20;\n            iVar6 = 0x1f;\n            if (auStack1924[1] != 0) {\n                for (; auStack1924[1] >> iVar6 == 0; iVar6 = iVar6 + -1) {\n                }\n            }\n            if (auStack1924[1] == 0) {\n                iVar6 = 0;\n            }\n            else {\n                iVar6 = iVar6 + 1;\n            }\n            uVar22 = (0x20U - iVar6 < 2) + uVar14;\n            if (uVar22 < 0x74) {\n                uVar16 = uVar22 - 1;\n                while (uVar16 != 0xffffffff) {\n                    uVar20 = uVar16 - 1;\n                    if (uVar16 < uVar14) {\n                        uVar7 = auStack1924[uVar16];\n                    }\n                    else {\n                        uVar7 = 0;\n                    }\n                    if (uVar20 < uVar14) {\n                        uVar11 = auStack1924[uVar20];\n                    }\n                    else {\n                        uVar11 = 0;\n                    }\n                    auStack1924[uVar16] = uVar11 >> 0x1e | uVar7 * 4;\n                    uVar16 = uVar20;\n                }\n            }\n            else {\n                uVar22 = 0;\n            }\n            uVar14 = 0x436 - uVar21 >> 5;\n            uStack1928 = uVar22;\n            fcn.140003630(auStack996, 0, uVar14 * 4);\n            auStack996[uVar14] = 1 << (0x436 - uVar21 & 0x1f);\n        }\n        uStack1000 = uVar14 + 1;\n        uVar8 = uStack1000;\n        uStack1464 = uStack1000;\n        if (uVar8 != 0) {\n            if (uVar8 << 2 < 0x1cd) {\n                fcn.140002f80(auStack1460, auStack996, uVar8 << 2);\n            }\n            else {\n                fcn.140003630(auStack1460, 0, 0x1cc);\n                puVar9 = fcn.1400096f4();\n                *puVar9 = 0x22;\n                fcn.1400095b8();\n            }\n            uVar8 = uStack1464;\n        }\n    }\n    else {\n        auStack996[1] = 0x100000;\n        auStack996[0] = 0;\n        uStack1000 = 2;\n        if (auStack1924[1] == 0) {\ncode_r0x000140014f8b:\n            uStack2024 = uStack2024._4_4_ << 0x20;\n            uVar20 = uVar21 - 0x433 & 0x1f;\n            uVar21 = uVar21 - 0x433 >> 5;\n            iVar4 = uVar20;\n            uVar10 = 0x20 - iVar4;\n            uVar16 = (1 << (uVar10 & 0x3f)) - 1;\n            iVar6 = 0x1f;\n            bVar23 = auStack1924[uVar22] == 0;\n            if (!bVar23) {\n                for (; auStack1924[uVar22] >> iVar6 == 0; iVar6 = iVar6 + -1) {\n                }\n            }\n            if (bVar23) {\n                iVar6 = 0;\n            }\n            else {\n                iVar6 = iVar6 + 1;\n            }\n            if ((uVar14 + uVar21 < 0x74) && (uVar22 = (0x20U - iVar6 < uVar20) + uVar14 + uVar21,  uVar22 < 0x74)) {\n                uVar20 = uVar22;\n                while (uVar20 = uVar20 - 1,  uVar20 != uVar21 - 1) {\n                    uVar7 = uVar20 - uVar21;\n                    if (uVar7 < uVar14) {\n                        uVar11 = auStack1924[uVar7];\n                    }\n                    else {\n                        uVar11 = 0;\n                    }\n                    if (uVar7 - 1 < uVar14) {\n                        uVar7 = auStack1924[uVar7 - 1];\n                    }\n                    else {\n                        uVar7 = 0;\n                    }\n                    auStack1924[uVar20] = (uVar7 & ~uVar16) >> (uVar10 & 0x1f) | (uVar11 & uVar16) << iVar4;\n                }\n                uVar8 = 0;\n                if (uVar21 != 0) {\n                    do {\n                        auStack1924[uVar8] = 0;\n                        uVar14 = uVar8 + 1;\n                        uVar8 = uVar14;\n                    } while (uVar14 != uVar21);\n                }\n            }\n            else {\n                uVar22 = 0;\n            }\n            uVar8 = 1;\n            uStack1464 = 1;\n            auStack1460[0] = 2;\n            uStack1928 = uVar22;\n        }\n        else {\n            uVar8 = 0;\n            do {\n                if (auStack996[uVar8] != auStack1924[uVar8]) goto code_r0x000140014f8b;\n                uVar16 = uVar8 + 1;\n                uVar8 = uVar16;\n            } while (uVar16 != 2);\n            uStack2024 = uStack2024._4_4_ << 0x20;\n            uVar20 = uVar21 - 0x432 & 0x1f;\n            uVar21 = uVar21 - 0x432 >> 5;\n            iVar4 = uVar20;\n            uVar10 = 0x20 - iVar4;\n            uVar16 = (1 << (uVar10 & 0x3f)) - 1;\n            iVar6 = 0x1f;\n            bVar23 = auStack1924[uVar22] == 0;\n            if (!bVar23) {\n                for (; auStack1924[uVar22] >> iVar6 == 0; iVar6 = iVar6 + -1) {\n                }\n            }\n            if (bVar23) {\n                iVar6 = 0;\n            }\n            else {\n                iVar6 = iVar6 + 1;\n            }\n            if ((uVar14 + uVar21 < 0x74) && (uVar22 = (0x20U - iVar6 < uVar20) + uVar14 + uVar21,  uVar22 < 0x74)) {\n                uVar20 = uVar22;\n                while (uVar20 = uVar20 - 1,  uVar20 != uVar21 - 1) {\n                    uVar7 = uVar20 - uVar21;\n                    if (uVar7 < uVar14) {\n                        uVar11 = auStack1924[uVar7];\n                    }\n                    else {\n                        uVar11 = 0;\n                    }\n                    if (uVar7 - 1 < uVar14) {\n                        uVar7 = auStack1924[uVar7 - 1];\n                    }\n                    else {\n                        uVar7 = 0;\n                    }\n                    auStack1924[uVar20] = (uVar7 & ~uVar16) >> (uVar10 & 0x1f) | (uVar11 & uVar16) << iVar4;\n                }\n                uVar8 = 0;\n                if (uVar21 != 0) {\n                    do {\n                        auStack1924[uVar8] = 0;\n                        uVar14 = uVar8 + 1;\n                        uVar8 = uVar14;\n                    } while (uVar14 != uVar21);\n                }\n            }\n            else {\n                uVar22 = 0;\n            }\n            uVar8 = 1;\n            uStack1464 = 1;\n            auStack1460[0] = 4;\n            uStack1928 = uVar22;\n        }\n    }\n    uVar14 = uVar8;\n    if (uStack2016 < 0) {\n        uStack2004 = -uStack2016;\n        uVar8 = uStack2004 / 10;\n        uStack2024._0_4_ = uVar8;\n        uStack2024 = uStack2024 & 0xffffffff00000000 | uVar8;\n        uStack2012 = uStack2024;\n        if (uStack2024 != 0) {\n            do {\n                uStack2000 = uVar8;\n                if (0x26 < uStack2000) {\n                    uStack2000 = 0x26;\n                }\n                uVar21 = uStack2000 - 1;\n                uVar10 = *(uVar21 * 4 + 0x14001dcb2);\n                uVar2 = *(uVar21 * 4 + 0x14001dcb3);\n                uStack1000 = uVar2 + uVar10;\n                fcn.140003630(auStack996, 0, uVar10 * 4);\n                fcn.140002f80(auStack996 + uVar10, *(uVar21 * 4 + 0x14001dcb0) * 4 + 0x14001d3a0, uVar2 << 2);\n                uVar21 = auStack1924[0];\n                if (uStack1000 < 2) {\n                    uVar8 = auStack996[0];\n                    if (auStack996[0] == 0) {\ncode_r0x000140015855:\n                        uVar22 = 0;\n                        uStack1928 = uVar22;\ncode_r0x000140015966:\n                        bVar23 = true;\n                    }\n                    else {\n                        if ((auStack996[0] == 1) || (uVar22 == 0)) goto code_r0x000140015966;\n                        uVar19 = 0;\n                        uVar13 = 0;\n                        do {\n                            uVar12 = auStack1924[uVar13] * uVar8 + uVar19;\n                            auStack1924[uVar13] = uVar12;\n                            uVar19 = uVar12 >> 0x20;\n                            uVar21 = uVar12 >> 0x20;\n                            uVar16 = uVar13 + 1;\n                            uVar13 = uVar16;\n                        } while (uVar16 != uVar22);\ncode_r0x000140015937:\n                        uVar22 = uStack1928;\n                        if (uVar21 == 0) goto code_r0x000140015966;\n                        if (uStack1928 < 0x73) {\n                            auStack1924[uStack1928] = uVar21;\n                            uVar22 = uStack1928 + 1;\n                            uStack1928 = uVar22;\n                            goto code_r0x000140015966;\n                        }\n                        uVar22 = 0;\n                        bVar23 = false;\n                        uStack1928 = 0;\n                    }\n                    if (!bVar23) goto code_r0x000140015971;\n                }\n                else {\n                    if (uVar22 < 2) {\n                        uVar8 = auStack1924[0];\n                        uVar19 = uStack1000 << 2;\n                        uStack1928 = uStack1000;\n                        if (uStack1000 != 0) {\n                            if (uVar19 < 0x1cd) {\n                                fcn.140002f80(auStack1924, auStack996, uVar19);\n                            }\n                            else {\n                                fcn.140003630(auStack1924, 0, 0x1cc);\n                                puVar9 = fcn.1400096f4();\n                                *puVar9 = 0x22;\n                                fcn.1400095b8();\n                            }\n                        }\n                        if (uVar21 != 0) {\n                            uVar22 = uStack1928;\n                            if ((uVar21 != 1) && (uStack1928 != 0)) {\n                                uVar19 = 0;\n                                uVar13 = 0;\n                                do {\n                                    uVar12 = auStack1924[uVar13] * uVar8 + uVar19;\n                                    auStack1924[uVar13] = uVar12;\n                                    uVar19 = uVar12 >> 0x20;\n                                    uVar21 = uVar12 >> 0x20;\n                                    uVar22 = uVar13 + 1;\n                                    uVar13 = uVar22;\n                                } while (uVar22 != uStack1928);\n                                goto code_r0x000140015937;\n                            }\n                            goto code_r0x000140015966;\n                        }\n                        goto code_r0x000140015855;\n                    }\n                    bVar23 = uStack1000 < uVar22;\n                    puStack1944 = auStack996;\n                    if (!bVar23) {\n                        puStack1944 = auStack1924;\n                    }\n                    puStack1992 = auStack996;\n                    uStack2008 = uVar22;\n                    if (bVar23) {\n                        uStack2008 = uStack1000;\n                    }\n                    uVar21 = uStack1000;\n                    if (bVar23) {\n                        uVar21 = uVar22;\n                        puStack1992 = auStack1924;\n                    }\n                    uStack1928 = 0;\n                    uVar8 = 0;\n                    uStack536 = 0;\n                    if (uStack2008 != 0) {\n                        do {\n                            uVar22 = puStack1944[uVar8];\n                            uVar16 = uVar8;\n                            if (uVar22 == 0) {\n                                if (uVar16 == uStack1928) {\n                                    auStack532[uVar8] = 0;\n                                    uStack1928 = uVar16 + 1;\n                                    uStack536 = uStack1928;\n                                }\n                            }\n                            else {\n                                uVar19 = 0;\n                                if (uVar21 != 0) {\n                                    do {\n                                        uVar20 = uVar8;\n                                        uVar13 = uVar8;\n                                        if (uVar20 == 0x73) break;\n                                        if (uVar20 == uStack1928) {\n                                            auStack532[uVar8] = 0;\n                                            uStack536 = uVar20 + 1;\n                                        }\n                                        uVar13 = uVar20 + 1;\n                                        uVar19 = puStack1992[-uVar16 + uVar20] * uVar22 + auStack532[uVar8] + uVar19;\n                                        auStack532[uVar8] = uVar19;\n                                        uVar19 = uVar19 >> 0x20;\n                                        uVar8 = uVar13;\n                                        uStack1928 = uStack536;\n                                    } while (-uVar16 + uVar20 + 1 != uVar21);\n                                    uVar22 = uVar19;\n                                    uVar8 = uVar13;\n                                    while (uVar22 != 0) {\n                                        uVar20 = uVar8;\n                                        if (uVar20 == 0x73) goto code_r0x000140015971;\n                                        if (uVar20 == uStack1928) {\n                                            auStack532[uVar8] = 0;\n                                            uStack536 = uVar20 + 1;\n                                        }\n                                        uVar22 = auStack532[uVar8];\n                                        auStack532[uVar8] = uVar22 + uVar19;\n                                        uVar22 = uVar22 + uVar19 >> 0x20;\n                                        uVar19 = uVar22;\n                                        uVar8 = uVar20 + 1;\n                                        uStack1928 = uStack536;\n                                    }\n                                }\n                                if (uVar8 == 0x73) goto code_r0x000140015971;\n                            }\n                            uVar8 = uVar16 + 1;\n                        } while (uVar16 + 1 != uStack2008);\n                    }\n                    uVar8 = uStack1928 << 2;\n                    uVar22 = uStack1928;\n                    if (uStack1928 != 0) {\n                        if (uVar8 < 0x1cd) {\n                            fcn.140002f80(auStack1924, auStack532, uVar8);\n                            uVar22 = uStack1928;\n                        }\n                        else {\n                            fcn.140003630(auStack1924, 0, 0x1cc);\n                            puVar9 = fcn.1400096f4();\n                            *puVar9 = 0x22;\n                            fcn.1400095b8();\n                            uVar22 = uStack1928;\n                        }\n                    }\n                }\n                uStack2012 = uStack2012 - uStack2000;\n                uVar8 = uStack2012;\n            } while (uStack2012 != 0);\n        }\n        iVar6 = uStack2004 + uStack2024 * -10;\n        if (iVar6 == 0) goto code_r0x0001400154bd;\n        uVar21 = *((iVar6 - 1) * 4 + 0x14001dd48);\n        if (uVar21 != 0) {\n            if ((uVar21 != 1) && (uVar22 != 0)) {\n                uVar8 = 0;\n                uVar19 = 0;\n                do {\n                    uVar13 = auStack1924[uVar19] * uVar21 + uVar8;\n                    auStack1924[uVar19] = uVar13;\n                    uVar8 = uVar13 >> 0x20;\n                    uVar16 = uVar19 + 1;\n                    uVar19 = uVar16;\n                } while (uVar16 != uVar22);\n                uVar21 = uVar13 >> 0x20;\n                uVar22 = uStack1928;\n                if (uVar21 != 0) {\n                    if (0x72 < uStack1928) goto code_r0x000140015971;\n                    auStack1924[uStack1928] = uVar21;\n                    uStack1928 = uStack1928 + 1;\n                    uVar22 = uStack1928;\n                }\n            }\n            goto code_r0x0001400154bd;\n        }\ncode_r0x000140015971:\n        uStack1928 = 0;\n    }\n    else {\n        uVar19 = uStack2016 / 10;\n        uStack2008 = uVar19;\n        uStack2000 = uStack2008;\n        while (uStack2008 != 0) {\n            uVar14 = uVar8;\n            uStack2004 = uVar19;\n            if (0x26 < uStack2004) {\n                uStack2004 = 0x26;\n            }\n            uVar21 = uStack2004 - 1;\n            uVar10 = *(uVar21 * 4 + 0x14001dcb2);\n            uVar2 = *(uVar21 * 4 + 0x14001dcb3);\n            uStack1000 = uVar2 + uVar10;\n            fcn.140003630(auStack996, 0, uVar10 * 4);\n            fcn.140002f80(auStack996 + uVar10, *(uVar21 * 4 + 0x14001dcb0) * 4 + 0x14001d3a0, uVar2 << 2);\n            uVar21 = auStack1460[0];\n            if (uStack1000 < 2) {\n                uVar19 = auStack996[0];\n                if (auStack996[0] == 0) {\ncode_r0x00014001536a:\n                    uVar8 = 0;\ncode_r0x00014001548a:\n                    uStack1464 = uVar8;\ncode_r0x0001400154a8:\n                    bVar23 = true;\n                }\n                else {\n                    if ((auStack996[0] == 1) || (uVar14 == 0)) goto code_r0x0001400154a8;\n                    uVar8 = 0;\n                    uVar13 = 0;\n                    do {\n                        uVar12 = auStack1460[uVar13] * uVar19 + uVar8;\n                        auStack1460[uVar13] = uVar12;\n                        uVar8 = uVar12 >> 0x20;\n                        uVar21 = uVar12 >> 0x20;\n                        uVar16 = uVar13 + 1;\n                        uVar13 = uVar16;\n                    } while (uVar16 != uVar14);\ncode_r0x000140015464:\n                    if (uVar21 == 0) {\n                        uVar8 = uStack1464;\n                        goto code_r0x0001400154a8;\n                    }\n                    if (uStack1464 < 0x73) {\n                        auStack1460[uStack1464] = uVar21;\n                        uVar8 = uStack1464 + 1;\n                        goto code_r0x00014001548a;\n                    }\n                    uVar8 = 0;\n                    bVar23 = false;\n                    uStack1464 = 0;\n                }\n                if (!bVar23) goto code_r0x0001400154b3;\n            }\n            else {\n                if (uVar14 < 2) {\n                    uVar19 = auStack1460[0];\n                    uVar8 = uStack1000 << 2;\n                    uStack1464 = uStack1000;\n                    if (uStack1000 != 0) {\n                        if (uVar8 < 0x1cd) {\n                            fcn.140002f80(auStack1460, auStack996, uVar8);\n                        }\n                        else {\n                            fcn.140003630(auStack1460, 0, 0x1cc);\n                            puVar9 = fcn.1400096f4();\n                            *puVar9 = 0x22;\n                            fcn.1400095b8();\n                        }\n                    }\n                    uVar8 = uStack1464;\n                    if (uVar21 != 0) {\n                        if ((uVar21 != 1) && (uStack1464 != 0)) {\n                            uVar8 = 0;\n                            uVar13 = 0;\n                            do {\n                                uVar12 = auStack1460[uVar13] * uVar19 + uVar8;\n                                auStack1460[uVar13] = uVar12;\n                                uVar8 = uVar12 >> 0x20;\n                                uVar21 = uVar12 >> 0x20;\n                                uVar14 = uVar13 + 1;\n                                uVar13 = uVar14;\n                            } while (uVar14 != uStack1464);\n                            goto code_r0x000140015464;\n                        }\n                        goto code_r0x0001400154a8;\n                    }\n                    goto code_r0x00014001536a;\n                }\n                bVar23 = uStack1000 < uVar14;\n                puStack1992 = auStack996;\n                if (!bVar23) {\n                    puStack1992 = auStack1460;\n                }\n                uStack2024 = auStack996;\n                uStack2012 = uVar14;\n                if (bVar23) {\n                    uStack2012 = uStack1000;\n                }\n                uVar21 = uStack1000;\n                if (bVar23) {\n                    uVar21 = uVar14;\n                    uStack2024 = auStack1460;\n                }\n                uVar8 = 0;\n                uVar19 = 0;\n                uStack536 = 0;\n                if (uStack2012 != 0) {\n                    do {\n                        uVar14 = puStack1992[uVar19];\n                        iVar6 = uVar19;\n                        if (uVar14 == 0) {\n                            if (iVar6 == uVar8) {\n                                auStack532[uVar19] = 0;\n                                uVar8 = iVar6 + 1U;\n                                uStack536 = iVar6 + 1U;\n                            }\n                        }\n                        else {\n                            uVar13 = 0;\n                            if (uVar21 != 0) {\n                                do {\n                                    iVar17 = uVar19;\n                                    uVar12 = uVar19;\n                                    if (iVar17 == 0x73) break;\n                                    if (iVar17 == uVar8) {\n                                        auStack532[uVar19] = 0;\n                                        uStack536 = iVar17 + 1;\n                                    }\n                                    uVar12 = iVar17 + 1U;\n                                    uVar13 = uStack2024[iVar17 + -iVar6] * uVar14 + uVar13 + auStack532[uVar19];\n                                    auStack532[uVar19] = uVar13;\n                                    uVar8 = uStack536;\n                                    uVar13 = uVar13 >> 0x20;\n                                    uVar19 = uVar12;\n                                } while (iVar17 + 1U + -iVar6 != uVar21);\n                                uVar14 = uVar13;\n                                uVar19 = uVar12;\n                                while (uVar14 != 0) {\n                                    iVar17 = uVar19;\n                                    if (iVar17 == 0x73) goto code_r0x0001400154b3;\n                                    if (iVar17 == uVar8) {\n                                        auStack532[uVar19] = 0;\n                                        uStack536 = iVar17 + 1;\n                                    }\n                                    uVar14 = auStack532[uVar19];\n                                    auStack532[uVar19] = uVar13 + uVar14;\n                                    uVar8 = uStack536;\n                                    uVar14 = uVar13 + uVar14 >> 0x20;\n                                    uVar13 = uVar14;\n                                    uVar19 = iVar17 + 1;\n                                }\n                            }\n                            if (uVar19 == 0x73) goto code_r0x0001400154b3;\n                        }\n                        uVar19 = iVar6 + 1U;\n                    } while (iVar6 + 1U != uStack2012);\n                }\n                uStack1464 = uVar8;\n                if (uVar8 != 0) {\n                    if (uVar8 << 2 < 0x1cd) {\n                        fcn.140002f80(auStack1460, auStack532, uVar8 << 2);\n                    }\n                    else {\n                        fcn.140003630(auStack1460, 0, 0x1cc);\n                        puVar9 = fcn.1400096f4();\n                        *puVar9 = 0x22;\n                        fcn.1400095b8();\n                    }\n                    uVar8 = uStack1464;\n                }\n            }\n            uVar14 = uVar8;\n            uStack2008 = uStack2008 - uStack2004;\n            uVar19 = uStack2008;\n        }\n        iVar6 = uStack2016 + uStack2000 * -10;\n        if (iVar6 != 0) {\n            uVar21 = *((iVar6 - 1) * 4 + 0x14001dd48);\n            if (uVar21 == 0) {\ncode_r0x0001400154b3:\n                uStack1464 = 0;\ncode_r0x0001400154b6:\n                uVar14 = uStack1464;\n            }\n            else if ((uVar21 != 1) && (uVar14 != 0)) {\n                uVar8 = 0;\n                uVar19 = 0;\n                do {\n                    uVar13 = auStack1460[uVar19] * uVar21 + uVar8;\n                    auStack1460[uVar19] = uVar13;\n                    uVar8 = uVar13 >> 0x20;\n                    uVar16 = uVar19 + 1;\n                    uVar19 = uVar16;\n                } while (uVar16 != uVar14);\n                uVar21 = uVar13 >> 0x20;\n                uVar14 = uStack1464;\n                if (uVar21 != 0) {\n                    if (0x72 < uStack1464) goto code_r0x0001400154b3;\n                    auStack1460[uStack1464] = uVar21;\n                    uStack1464 = uStack1464 + 1;\n                    goto code_r0x0001400154b6;\n                }\n            }\n        }\ncode_r0x0001400154bd:\n        if (uVar22 != 0) {\n            uVar8 = 0;\n            uVar19 = 0;\n            do {\n                uVar13 = uVar8 + auStack1924[uVar19] * 10;\n                auStack1924[uVar19] = uVar13;\n                uVar21 = uVar19 + 1;\n                uVar19 = uVar21;\n                uVar8 = uVar13 >> 0x20;\n            } while (uVar21 != uVar22);\n            uVar22 = uVar13 >> 0x20;\n            if (uVar22 != 0) {\n                if (uStack1928 < 0x73) {\n                    auStack1924[uStack1928] = uVar22;\n                    uStack1928 = uStack1928 + 1;\n                }\n                else {\n                    uStack1000 = 0;\n                    uStack1928 = 0;\n                    fcn.140015e5c(auStack1924, 0x1cc, auStack996, 0);\n                }\n            }\n        }\n    }\n    iVar6 = fcn.140014790(&uStack1928, &uStack1464);\n    if (iVar6 == 10) {\n        uVar22 = uStack2016 + 1;\n        *pcStack1952 = '1';\n        pcVar18 = pcStack1952 + 1;\n        if (uVar14 != 0) {\n            uVar8 = 0;\n            uVar19 = 0;\n            do {\n                uVar13 = uVar8 + auStack1460[uVar19] * 10;\n                auStack1460[uVar19] = uVar13;\n                uVar21 = uVar19 + 1;\n                uVar19 = uVar21;\n                uVar8 = uVar13 >> 0x20;\n            } while (uVar21 != uVar14);\n            uVar14 = uVar13 >> 0x20;\n            if (uVar14 != 0) {\n                if (uStack1464 < 0x73) {\n                    auStack1460[uStack1464] = uVar14;\n                    uStack1464 = uStack1464 + 1;\n                }\n                else {\n                    uStack1000 = 0;\n                    uStack1464 = 0;\n                    fcn.140015e5c(auStack1460, 0x1cc, auStack996, 0);\n                }\n            }\n        }\n    }\n    else if (iVar6 == 0) {\n        pcVar18 = pcStack1952;\n        uVar22 = uStack2016 - 1;\n    }\n    else {\n        pcVar18 = pcStack1952 + 1;\n        *pcStack1952 = iVar6 + '0';\n        uVar22 = uStack2016;\n    }\n    puStack1936[1] = uVar22;\n    uVar14 = uStack1984;\n    if (((-1 < uVar22) && (uStack1984 < 0x80000000)) && (iStack1956 == 0)) {\n        uVar14 = uStack1984 + uVar22;\n    }\n    uVar8 = uVar14;\n    if (in_stack_00000030 - 1U < uVar14) {\n        uVar8 = in_stack_00000030 - 1U;\n    }\n    pcStack1952 = pcStack1952 + uVar8;\n    while ((pcVar18 != pcStack1952 && (uStack1928 != 0))) {\n        uVar8 = 0;\n        uVar19 = 0;\n        do {\n            uVar13 = auStack1924[uVar19] * 1000000000 + uVar8;\n            auStack1924[uVar19] = uVar13;\n            uVar8 = uVar13 >> 0x20;\n            uVar22 = uVar19 + 1;\n            uVar19 = uVar22;\n        } while (uVar22 != uStack1928);\n        uVar22 = uVar13 >> 0x20;\n        if (uVar22 != 0) {\n            if (uStack1928 < 0x73) {\n                auStack1924[uStack1928] = uVar22;\n                uStack1928 = uStack1928 + 1;\n            }\n            else {\n                uStack1000 = 0;\n                uStack1928 = 0;\n                fcn.140015e5c(auStack1924, 0x1cc, auStack996, 0);\n            }\n        }\n        uVar8 = fcn.140014790(&uStack1928, &uStack1464);\n        uVar22 = 8;\n        do {\n            uVar19 = (uVar8 & 0xffffffff) / 10;\n            if (uVar22 < pcStack1952 - pcVar18) {\n                pcVar18[uVar22] = uVar8 + uVar19 * -10 + '0';\n            }\n            uVar22 = uVar22 - 1;\n            uVar8 = uVar19;\n        } while (uVar22 != 0xffffffff);\n        iVar15 = pcStack1952 - pcVar18;\n        if (9 < iVar15) {\n            iVar15 = 9;\n        }\n        pcVar18 = pcVar18 + iVar15;\n    }\n    *pcVar18 = '\\0';\ncode_r0x000140015e11:\n    if (cStack1968 != '\\0') {\n        fcn.1400172f0(auStack1976);\n    }\n    fcn.140002480(uStack72 ^ auStack2072);\n    return;\n}\n",
        "token_count": 9638
    },
    "140001ba": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nulong fcn.140001ba0(char *arg1, ulong arg2, uchar *arg3, int32_t *arg4)\n\n{\n    uint32_t uVar1;\n    ulong uVar2;\n    bool bVar3;\n    char *pcStackX8;\n    uchar *puStackX24;\n    int32_t iStack56;\n    uint32_t uStack52;\n    int32_t iStack48;\n    int32_t iStack44;\n    \n    if ((arg1 == NULL) || (arg4 == NULL)) {\n        uVar2 = 0;\n    }\n    else {\n        iStack44 = 0;\n        bVar3 = arg3 == NULL;\n        pcStackX8 = arg1;\n        puStackX24 = arg3;\n        while ((pcStackX8 < arg1 + arg2 && (*pcStackX8 != '\\0'))) {\n            uStack52 = 0;\n            iStack48 = 0;\n            iStack56 = 0;\n            while ((iStack56 < 4 && (pcStackX8 < arg1 + arg2))) {\n                uVar1 = fcn.140001da0(*pcStackX8);\n                pcStackX8 = pcStackX8 + 1;\n                if (uVar1 == 0xffffffff) {\n                    iStack56 = iStack56 + -1;\n                }\n                else {\n                    uStack52 = uStack52 << 6 | uVar1;\n                    iStack48 = iStack48 + 6;\n                }\n                iStack56 = iStack56 + 1;\n            }\n            if ((!bVar3) && (*arg4 < iStack44 + (iStack48 + (iStack48 >> 0x1f & 7U) >> 3))) {\n                bVar3 = true;\n            }\n            uStack52 = uStack52 << (0x18U - iStack48 & 0x1f);\n            for (iStack56 = 0; iStack56 < iStack48 + (iStack48 >> 0x1f & 7U) >> 3; iStack56 = iStack56 + 1) {\n                if (!bVar3) {\n                    *puStackX24 = uStack52 >> 0x10;\n                    puStackX24 = puStackX24 + 1;\n                }\n                uStack52 = uStack52 << 8;\n                iStack44 = iStack44 + 1;\n            }\n        }\n        *arg4 = iStack44;\n        if (bVar3) {\n            uVar2 = 0;\n        }\n        else {\n            uVar2 = 1;\n        }\n    }\n    return uVar2;\n}\n",
        "token_count": 582
    },
    "140002a6": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint64_t fcn.140002a6c(void)\n\n{\n    int16_t *piVar1;\n    uint64_t uVar2;\n    int32_t *piVar3;\n    \n    piVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n    if ((((piVar1 == NULL) || (*piVar1 != 0x5a4d)) || (piVar3 = *(piVar1 + 0x1e) + piVar1,  *piVar3 != 0x4550)) ||\n       ((piVar1 = 0x20b,  *(piVar3 + 6) != 0x20b || (piVar3[0x21] < 0xf)))) {\n        uVar2 = piVar1 & 0xffffffffffffff00;\n    }\n    else {\n        uVar2 = CONCAT71(2, piVar3[0x3e] != 0);\n    }\n    return uVar2;\n}\n",
        "token_count": 215
    },
    "null": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "14000625": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint64_t fcn.140006250(int64_t *arg1)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    uint auStackX8 [2];\n    \n    if (*arg1 == 0) {\n        auStackX8[0] = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        if (*(arg1 + 2) == '\\0') {\n            arg1[1] = 0;\n            iVar2 = 0;\n            *(arg1 + 2) = 1;\n        }\n        else {\n            iVar2 = arg1[1];\n        }\n        iVar2 = fcn.14000bdd8(auStackX8, iVar2);\n        *arg1 = iVar2;\n        (*_sym.imp.KERNEL32.dll_SetLastError)(auStackX8[0]);\n        if (iVar2 == 0) {\n            fcn.140009124();\n            pcVar1 = swi(3);\n            iVar2 = (*pcVar1)();\n            return iVar2;\n        }\n    }\n    return *arg1;\n}\n",
        "token_count": 231
    },
    "1400062b": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.1400062b8(ulong param_1)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_28h;\n    uint uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_bp_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_18h._0_1_ = *0x1400274f8 == 0;\n    var_30h._0_1_ = 0;\n    var_bp_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (var_18h) {\n        var_28h._0_4_ = *0x1400262c8;\n        var_28h._4_4_ = *0x1400262cc;\n        uStack40 = *0x1400262d0;\n        uStack36 = *0x1400262d4;\n    }\n    uVar1 = fcn.140006130(param_1, &var_40h);\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_bp_10h != '\\0') {\n        iVar2 = fcn.140006250(&var_40h);\n        *(iVar2 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar2 = fcn.140006250(&var_40h);\n        *(iVar2 + 0x24) = var_bp_10h._4_4_;\n    }\n    return uVar1;\n}\n",
        "token_count": 433
    },
    "14000640": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint64_t fcn.14000640c(char *arg1, char *arg2)\n\n{\n    uint *puVar1;\n    int64_t iVar2;\n    int64_t iStackX8;\n    \n    if (((arg1 == NULL) || (arg2 == NULL)) || (*arg2 == '\\0')) {\n        puVar1 = fcn.1400096f4();\n        *puVar1 = 0x16;\n        fcn.1400095b8();\n    }\n    else if (*arg1 == '\\0') {\n        puVar1 = fcn.1400096f4();\n        *puVar1 = 0x16;\n    }\n    else {\n        fcn.14000b33c(&iStackX8);\n        if (iStackX8 != 0) {\n            iVar2 = fcn.14000c1bc(arg1, arg2, 0x40, iStackX8);\n            if (iVar2 == 0) {\n                fcn.14000b394(iStackX8);\n            }\n            fcn.14000b08c(iStackX8);\n            return iVar2;\n        }\n        puVar1 = fcn.1400096f4();\n        *puVar1 = 0x18;\n    }\n    return 0;\n}\n",
        "token_count": 282
    },
    "14000677": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nulong fcn.140006774(ulong param_1, ulong param_2, ulong param_3, ulong param_4)\n\n{\n    ulong uVar1;\n    int64_t iVar2;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_28h;\n    uint uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_bp_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_18h._0_1_ = *0x1400274f8 == 0;\n    var_30h._0_1_ = 0;\n    var_bp_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (var_18h) {\n        var_28h._0_4_ = *0x1400262c8;\n        var_28h._4_4_ = *0x1400262cc;\n        uStack40 = *0x1400262d0;\n        uStack36 = *0x1400262d4;\n    }\n    uVar1 = fcn.1400064d8(param_1, param_2, param_3, param_4, &var_40h);\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_bp_10h != '\\0') {\n        iVar2 = fcn.140006250(&var_40h);\n        *(iVar2 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar2 = fcn.140006250(&var_40h);\n        *(iVar2 + 0x24) = var_bp_10h._4_4_;\n    }\n    return uVar1;\n}\n",
        "token_count": 460
    },
    "140006bb": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint64_t fcn.140006bb0(int64_t arg1)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint64_t uVar3;\n    int64_t iVar4;\n    \n    iVar1 = *(arg1 + 0x34);\n    if (iVar1 < 6) {\n        if (iVar1 != 5) {\n            if (iVar1 != 0) {\n                if (iVar1 == 1) {\n                    uVar2 = *(arg1 + 0x28);\n                    iVar4 = 1;\n                    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n                    if ((uVar2 >> 4 & 1) == 0) {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    else {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    goto code_r0x000140006c1b;\n                }\n                iVar1 = iVar1 + -2;\n                if (iVar1 == 0) {\n                    uVar2 = *(arg1 + 0x28);\n                    iVar4 = 2;\n                    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n                    if ((uVar2 >> 4 & 1) == 0) {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    else {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    goto code_r0x000140006c1b;\n                }\n                goto code_r0x000140006bee;\n            }\ncode_r0x000140006ceb:\n            uVar2 = *(arg1 + 0x28);\n            iVar4 = 4;\n            *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n            if ((uVar2 >> 4 & 1) == 0) {\n                uVar3 = *(*(arg1 + 0x18) + -8);\n            }\n            else {\n                uVar3 = *(*(arg1 + 0x18) + -8);\n            }\n            goto code_r0x000140006c1b;\n        }\n    }\n    else if (((iVar1 != 6) && (iVar1 != 7)) && (iVar1 = iVar1 + -9,  iVar1 != 0)) {\ncode_r0x000140006bee:\n        if (iVar1 == 1) goto code_r0x000140006ceb;\n        if (iVar1 != 2) {\n            iVar4 = *(arg1 + 8);\n            *(iVar4 + 0x30) = 1;\n            *(iVar4 + 0x2c) = 0x16;\n            uVar3 = fcn.1400094e8(0, 0, 0, 0);\n            return uVar3 & 0xffffffffffffff00;\n        }\n    }\n    uVar2 = *(arg1 + 0x28);\n    iVar4 = 8;\n    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n    uVar3 = *(*(arg1 + 0x18) + -8);\ncode_r0x000140006c1b:\n    if (((uVar2 >> 4 & 1) != 0) && (uVar3 < 0)) {\n        uVar3 = -uVar3;\n        uVar2 = uVar2 | 0x40;\n        *(arg1 + 0x28) = uVar2;\n    }\n    if (*(arg1 + 0x30) < 0) {\n        *(arg1 + 0x30) = 1;\n    }\n    else {\n        *(arg1 + 0x28) = uVar2 & 0xfffffff7;\n        fcn.140006858(arg1 + 0x50, *(arg1 + 0x30), *(arg1 + 8));\n    }\n    if (uVar3 == 0) {\n        *(arg1 + 0x28) = *(arg1 + 0x28) & 0xffffffdf;\n    }\n    *(arg1 + 0x4c) = 0;\n    if (iVar4 == 8) {\n        fcn.140007318(arg1, uVar3);\n    }\n    else {\n        fcn.140007168(arg1, uVar3 & 0xffffffff);\n    }\n    uVar2 = *(arg1 + 0x28);\n    if (((uVar2 >> 7 & 1) != 0) && ((*(arg1 + 0x48) == 0 || (**(arg1 + 0x40) != '0')))) {\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -1;\n        **(arg1 + 0x40) = 0x30;\n        *(arg1 + 0x48) = *(arg1 + 0x48) + 1;\n    }\n    return CONCAT71(uVar2 >> 0xf, 1);\n}\n",
        "token_count": 1153
    },
    "140006d9": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint64_t fcn.140006d98(int64_t arg1)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint64_t uVar3;\n    int64_t iVar4;\n    \n    iVar1 = *(arg1 + 0x34);\n    if (iVar1 < 6) {\n        if (iVar1 != 5) {\n            if (iVar1 != 0) {\n                if (iVar1 == 1) {\n                    uVar2 = *(arg1 + 0x28);\n                    iVar4 = 1;\n                    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n                    if ((uVar2 >> 4 & 1) == 0) {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    else {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    goto code_r0x000140006e03;\n                }\n                iVar1 = iVar1 + -2;\n                if (iVar1 == 0) {\n                    uVar2 = *(arg1 + 0x28);\n                    iVar4 = 2;\n                    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n                    if ((uVar2 >> 4 & 1) == 0) {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    else {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    goto code_r0x000140006e03;\n                }\n                goto code_r0x000140006dd6;\n            }\ncode_r0x000140006ed3:\n            uVar2 = *(arg1 + 0x28);\n            iVar4 = 4;\n            *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n            if ((uVar2 >> 4 & 1) == 0) {\n                uVar3 = *(*(arg1 + 0x18) + -8);\n            }\n            else {\n                uVar3 = *(*(arg1 + 0x18) + -8);\n            }\n            goto code_r0x000140006e03;\n        }\n    }\n    else if (((iVar1 != 6) && (iVar1 != 7)) && (iVar1 = iVar1 + -9,  iVar1 != 0)) {\ncode_r0x000140006dd6:\n        if (iVar1 == 1) goto code_r0x000140006ed3;\n        if (iVar1 != 2) {\n            iVar4 = *(arg1 + 8);\n            *(iVar4 + 0x30) = 1;\n            *(iVar4 + 0x2c) = 0x16;\n            uVar3 = fcn.1400094e8(0, 0, 0, 0);\n            return uVar3 & 0xffffffffffffff00;\n        }\n    }\n    uVar2 = *(arg1 + 0x28);\n    iVar4 = 8;\n    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n    uVar3 = *(*(arg1 + 0x18) + -8);\ncode_r0x000140006e03:\n    if (((uVar2 >> 4 & 1) != 0) && (uVar3 < 0)) {\n        uVar3 = -uVar3;\n        uVar2 = uVar2 | 0x40;\n        *(arg1 + 0x28) = uVar2;\n    }\n    if (*(arg1 + 0x30) < 0) {\n        *(arg1 + 0x30) = 1;\n    }\n    else {\n        *(arg1 + 0x28) = uVar2 & 0xfffffff7;\n        fcn.140006858(arg1 + 0x50, *(arg1 + 0x30), *(arg1 + 8));\n    }\n    if (uVar3 == 0) {\n        *(arg1 + 0x28) = *(arg1 + 0x28) & 0xffffffdf;\n    }\n    *(arg1 + 0x4c) = 0;\n    if (iVar4 == 8) {\n        fcn.140007394(arg1, uVar3);\n    }\n    else {\n        fcn.1400071e4(arg1, uVar3 & 0xffffffff);\n    }\n    uVar2 = *(arg1 + 0x28);\n    if (((uVar2 >> 7 & 1) != 0) && ((*(arg1 + 0x48) == 0 || (**(arg1 + 0x40) != '0')))) {\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -1;\n        **(arg1 + 0x40) = 0x30;\n        *(arg1 + 0x48) = *(arg1 + 0x48) + 1;\n    }\n    return CONCAT71(uVar2 >> 0xf, 1);\n}\n",
        "token_count": 1155
    },
    "140006f8": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint64_t fcn.140006f80(int64_t arg1)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint64_t uVar3;\n    int64_t iVar4;\n    \n    iVar1 = *(arg1 + 0x34);\n    if (iVar1 < 6) {\n        if (iVar1 != 5) {\n            if (iVar1 != 0) {\n                if (iVar1 == 1) {\n                    uVar2 = *(arg1 + 0x28);\n                    iVar4 = 1;\n                    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n                    if ((uVar2 >> 4 & 1) == 0) {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    else {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    goto code_r0x000140006feb;\n                }\n                iVar1 = iVar1 + -2;\n                if (iVar1 == 0) {\n                    uVar2 = *(arg1 + 0x28);\n                    iVar4 = 2;\n                    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n                    if ((uVar2 >> 4 & 1) == 0) {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    else {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    goto code_r0x000140006feb;\n                }\n                goto code_r0x000140006fbe;\n            }\ncode_r0x0001400070bb:\n            uVar2 = *(arg1 + 0x28);\n            iVar4 = 4;\n            *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n            if ((uVar2 >> 4 & 1) == 0) {\n                uVar3 = *(*(arg1 + 0x18) + -8);\n            }\n            else {\n                uVar3 = *(*(arg1 + 0x18) + -8);\n            }\n            goto code_r0x000140006feb;\n        }\n    }\n    else if (((iVar1 != 6) && (iVar1 != 7)) && (iVar1 = iVar1 + -9,  iVar1 != 0)) {\ncode_r0x000140006fbe:\n        if (iVar1 == 1) goto code_r0x0001400070bb;\n        if (iVar1 != 2) {\n            iVar4 = *(arg1 + 8);\n            *(iVar4 + 0x30) = 1;\n            *(iVar4 + 0x2c) = 0x16;\n            uVar3 = fcn.1400094e8(0, 0, 0, 0);\n            return uVar3 & 0xffffffffffffff00;\n        }\n    }\n    uVar2 = *(arg1 + 0x28);\n    iVar4 = 8;\n    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n    uVar3 = *(*(arg1 + 0x18) + -8);\ncode_r0x000140006feb:\n    if (((uVar2 >> 4 & 1) != 0) && (uVar3 < 0)) {\n        uVar3 = -uVar3;\n        uVar2 = uVar2 | 0x40;\n        *(arg1 + 0x28) = uVar2;\n    }\n    if (*(arg1 + 0x30) < 0) {\n        *(arg1 + 0x30) = 1;\n    }\n    else {\n        *(arg1 + 0x28) = uVar2 & 0xfffffff7;\n        fcn.140006858(arg1 + 0x50, *(arg1 + 0x30), *(arg1 + 8));\n    }\n    if (uVar3 == 0) {\n        *(arg1 + 0x28) = *(arg1 + 0x28) & 0xffffffdf;\n    }\n    *(arg1 + 0x4c) = 0;\n    if (iVar4 == 8) {\n        fcn.140007440(arg1, uVar3);\n    }\n    else {\n        fcn.14000728c(arg1, uVar3 & 0xffffffff);\n    }\n    uVar2 = *(arg1 + 0x28);\n    if (((uVar2 >> 7 & 1) != 0) && ((*(arg1 + 0x48) == 0 || (**(arg1 + 0x40) != '0')))) {\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -1;\n        **(arg1 + 0x40) = 0x30;\n        *(arg1 + 0x48) = *(arg1 + 0x48) + 1;\n    }\n    return CONCAT71(uVar2 >> 0xf, 1);\n}\n",
        "token_count": 1148
    },
    "140007a7": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint64_t fcn.140007a70(uint8_t *arg1)\n\n{\n    int32_t *arg4;\n    int64_t *arg1_00;\n    uint8_t uVar1;\n    uint32_t uVar2;\n    char *pcVar3;\n    ulong uVar4;\n    bool bVar5;\n    char cVar6;\n    int32_t iVar7;\n    uint64_t in_RAX;\n    char *pcVar8;\n    uint64_t uVar9;\n    int64_t iVar10;\n    uchar uVar11;\n    int32_t iVar12;\n    int32_t iVar13;\n    uchar auStack120 [32];\n    ulong uStack88;\n    uint uStack72;\n    uchar auStack68 [4];\n    ulong uStack64;\n    uint64_t uStack56;\n    \n    uVar1 = arg1[0x39];\n    pcVar8 = in_RAX & 0xffffffffffffff00;\n    if (uVar1 != 0x46) {\n        if (uVar1 == 0x4e) {\n            if ((*arg1 & 8) != 0) goto code_r0x000140007bed;\n            arg1[0x24] = 8;\n        }\n        else if (*(arg1 + 0x34) == 0) {\n            if (uVar1 == 0x49) {\n                pcVar3 = *(arg1 + 0x10);\n                cVar6 = *pcVar3;\n                if (cVar6 == '3') {\n                    if (pcVar3[1] == '2') {\n                        pcVar8 = pcVar3 + 2;\n                        *(arg1 + 0x34) = 10;\n                        *(arg1 + 0x10) = pcVar8;\n                    }\n                }\n                else if (cVar6 == '6') {\n                    if (pcVar3[1] == '4') {\n                        pcVar8 = pcVar3 + 2;\n                        *(arg1 + 0x34) = 0xb;\n                        *(arg1 + 0x10) = pcVar8;\n                    }\n                }\n                else if ((cVar6 + 0xa8U < 0x21) && ((0x120821001U >> (cVar6 + 0xa8U & 0x3f) & 1) != 0)) {\n                    *(arg1 + 0x34) = 9;\n                }\n            }\n            else if (uVar1 == 0x4c) {\n                *(arg1 + 0x34) = 8;\n            }\n            else if (uVar1 == 0x54) {\n                *(arg1 + 0x34) = 0xd;\n            }\n            else {\n                if (uVar1 == 0x68) {\n                    if (**(arg1 + 0x10) == 'h') {\n                        *(arg1 + 0x10) = *(arg1 + 0x10) + 1;\n                        pcVar8 = 0x1;\n                    }\n                    else {\n                        pcVar8 = 0x2;\n                    }\n                }\n                else {\n                    if (uVar1 == 0x6a) {\n                        *(arg1 + 0x34) = 5;\n                        goto code_r0x000140007bed;\n                    }\n                    if (uVar1 != 0x6c) {\n                        if (uVar1 == 0x74) {\n                            *(arg1 + 0x34) = 7;\n                        }\n                        else if (uVar1 == 0x77) {\n                            *(arg1 + 0x34) = 0xc;\n                        }\n                        else if (uVar1 == 0x7a) {\n                            *(arg1 + 0x34) = 6;\n                        }\n                        goto code_r0x000140007bed;\n                    }\n                    if (**(arg1 + 0x10) == 'l') {\n                        *(arg1 + 0x10) = *(arg1 + 0x10) + 1;\n                        pcVar8 = 0x4;\n                    }\n                    else {\n                        pcVar8 = 0x3;\n                    }\n                }\n                *(arg1 + 0x34) = pcVar8;\n            }\ncode_r0x000140007bed:\n            return CONCAT71(pcVar8 >> 8, 1);\n        }\n        iVar10 = *(arg1 + 8);\n        *(iVar10 + 0x30) = 1;\n        *(iVar10 + 0x2c) = 0x16;\n        uStack64 = 0x140007acf;\n        uVar9 = fcn.1400094e8(0, 0, 0, 0);\n        return uVar9 & 0xffffffffffffff00;\n    }\n    if ((*arg1 & 8) != 0) goto code_r0x000140007bed;\n    arg1[0x24] = 7;\n    uStack56 = *0x140026018 ^ &stack0xffffffffffffff88;\n    uVar1 = arg1[0x39];\n    uVar11 = 0x78;\n    if (uVar1 < 'e') {\n        if (uVar1 == 100) {\ncode_r0x000140007cfa:\n            *(arg1 + 0x28) = *(arg1 + 0x28) | 0x10;\ncode_r0x000140007cfe:\n            cVar6 = fcn.140006d98(arg1);\n        }\n        else {\n            if (uVar1 != 0x41) {\n                if (uVar1 == 0x43) {\ncode_r0x000140007c7a:\n                    cVar6 = fcn.1400082ec(arg1);\n                }\n                else {\n                    if (uVar1 < 'E') goto code_r0x000140007ffd;\n                    if (uVar1 < 'H') goto code_r0x000140007d07;\n                    if (uVar1 == 0x53) {\ncode_r0x000140007cbc:\n                        cVar6 = fcn.140008464(arg1);\n                    }\n                    else {\n                        if (uVar1 == 0x58) goto code_r0x000140007c90;\n                        if (uVar1 != 0x5a) {\n                            if (uVar1 != 0x61) {\n                                if (uVar1 != 99) goto code_r0x000140007ffd;\n                                goto code_r0x000140007c7a;\n                            }\n                            goto code_r0x000140007d07;\n                        }\n                        cVar6 = fcn.140008028(arg1);\n                    }\n                }\n                goto code_r0x000140007d0c;\n            }\ncode_r0x000140007d07:\n            cVar6 = fcn.1400080a0(arg1);\n        }\n    }\n    else {\n        if (uVar1 < 'h') goto code_r0x000140007d07;\n        if (uVar1 == 0x69) goto code_r0x000140007cfa;\n        if (uVar1 == 0x6e) {\n            cVar6 = fcn.1400083b0(arg1);\n        }\n        else if (uVar1 == 0x6f) {\n            if ((*(arg1 + 0x28) >> 5 & 1) != 0) {\n                *(arg1 + 0x28) = *(arg1 + 0x28) | 0x80;\n            }\n            cVar6 = fcn.140006bb0(arg1);\n        }\n        else {\n            if (uVar1 == 0x70) {\n                *(arg1 + 0x30) = 0x10;\n                *(arg1 + 0x34) = 0xb;\n            }\n            else {\n                if (uVar1 == 0x73) goto code_r0x000140007cbc;\n                if (uVar1 == 0x75) goto code_r0x000140007cfe;\n                if (uVar1 != 0x78) goto code_r0x000140007ffd;\n            }\ncode_r0x000140007c90:\n            cVar6 = fcn.140006f80(arg1);\n        }\n    }\ncode_r0x000140007d0c:\n    if ((cVar6 == '\\0') || (arg1[0x38] != 0)) goto code_r0x000140007ffd;\n    uVar2 = *(arg1 + 0x28);\n    iVar10 = 0;\n    uStack72 = (uStack72 >> 0x10 & 0xff00) << 0x10;\n    if ((uVar2 >> 4 & 1) != 0) {\n        uStack72._1_3_ = uStack72 >> 8;\n        if ((uVar2 >> 6 & 1) == 0) {\n            if ((uVar2 & 1) == 0) {\n                if ((uVar2 >> 1 & 1) == 0) goto code_r0x000140007d64;\n                uStack72 = CONCAT31(uStack72._1_3_, 0x20);\n            }\n            else {\n                uStack72 = CONCAT31(uStack72._1_3_, 0x2b);\n            }\n        }\n        else {\n            uStack72 = CONCAT31(uStack72._1_3_, 0x2d);\n        }\n        iVar10 = 1;\n    }\ncode_r0x000140007d64:\n    uVar1 = arg1[0x39];\n    if (((uVar1 + 0xa8 & 0xdf) == 0) && ((uVar2 >> 5 & 1) != 0)) {\n        bVar5 = true;\n    }\n    else {\n        bVar5 = false;\n    }\n    if ((bVar5) || ((uVar1 + 0xbf & 0xdf) == 0)) {\n        (&stack0xffffffffffffffb8)[iVar10] = 0x30;\n        if ((uVar1 == 0x58) || (uVar1 == 0x41)) {\n            uVar11 = 0x58;\n        }\n        (&stack0xffffffffffffffb9)[iVar10] = uVar11;\n        iVar10 = iVar10 + 2;\n    }\n    iVar13 = (*(arg1 + 0x2c) - *(arg1 + 0x48)) - iVar10;\n    if ((uVar2 & 0xc) == 0) {\n        uVar4 = *(arg1 + 8);\n        iVar12 = 0;\n        if (0 < iVar13) {\n            while ((((*(*(arg1 + 0x460) + 0x14) >> 0xc & 1) != 0 && (*(*(arg1 + 0x460) + 8) == 0)) ||\n                   (iVar7 = fcn.14000e880(0x20, *(arg1 + 0x460), uVar4),  iVar7 != -1))) {\n                iVar7 = *(arg1 + 0x20);\n                *(arg1 + 0x20) = iVar7 + 1;\n                if ((iVar7 == -2) || (iVar12 = iVar12 + 1,  iVar13 <= iVar12)) goto code_r0x000140007e20;\n            }\n            *(arg1 + 0x20) = 0xffffffff;\n        }\n    }\ncode_r0x000140007e20:\n    arg1_00 = arg1 + 0x460;\n    arg4 = arg1 + 0x20;\n    if (((*(*arg1_00 + 0x14) >> 0xc & 1) == 0) || (*(*arg1_00 + 8) != 0)) {\n        uStack88 = *(arg1 + 8);\n        fcn.140008614(arg1_00, &stack0xffffffffffffffb8, iVar10, arg4);\n    }\n    else {\n        *arg4 = *arg4 + iVar10;\n    }\n    if (((*(arg1 + 0x28) >> 3 & 1) != 0) && ((*(arg1 + 0x28) >> 2 & 1) == 0)) {\n        uVar4 = *(arg1 + 8);\n        iVar12 = 0;\n        if (0 < iVar13) {\n            while ((((*(*arg1_00 + 0x14) >> 0xc & 1) != 0 && (*(*arg1_00 + 8) == 0)) ||\n                   (iVar7 = fcn.14000e880(0x30, *arg1_00, uVar4),  iVar7 != -1))) {\n                iVar7 = *arg4;\n                *arg4 = iVar7 + 1;\n                if ((iVar7 == -2) || (iVar12 = iVar12 + 1,  iVar13 <= iVar12)) goto code_r0x000140007ec8;\n            }\n            *arg4 = -1;\n        }\n    }\ncode_r0x000140007ec8:\n    if ((arg1[0x4c] == 0) || (*(arg1 + 0x48) < 1)) {\n        if (((*(*arg1_00 + 0x14) >> 0xc & 1) == 0) || (*(*arg1_00 + 8) != 0)) {\n            uStack88 = *(arg1 + 8);\n            fcn.140008614(arg1_00, *(arg1 + 0x40), *(arg1 + 0x48), arg4);\n        }\n        else {\n            *arg4 = *arg4 + *(arg1 + 0x48);\n        }\n    }\n    else {\n        iVar12 = 0;\n        do {\n            uStack88 = *(arg1 + 8);\n            uStack72 = 0;\n            iVar7 = fcn.14000e540(&stack0xffffffffffffffb8, &stack0xffffffffffffffbc, 6);\n            if ((iVar7 != 0) || (uStack72 == 0)) {\n                *arg4 = -1;\n                break;\n            }\n            if (((*(*arg1_00 + 0x14) >> 0xc & 1) == 0) || (*(*arg1_00 + 8) != 0)) {\n                uStack88 = *(arg1 + 8);\n                fcn.140008614(arg1_00, &stack0xffffffffffffffbc, uStack72, arg4);\n            }\n            else {\n                *arg4 = *arg4 + uStack72;\n            }\n            iVar12 = iVar12 + 1;\n        } while (iVar12 != *(arg1 + 0x48));\n    }\n    if ((-1 < *arg4) && ((*(arg1 + 0x28) >> 2 & 1) != 0)) {\n        uVar4 = *(arg1 + 8);\n        iVar12 = 0;\n        if (0 < iVar13) {\n            while ((((*(*arg1_00 + 0x14) >> 0xc & 1) != 0 && (*(*arg1_00 + 8) == 0)) ||\n                   (iVar7 = fcn.14000e880(0x20, *arg1_00, uVar4),  iVar7 != -1))) {\n                iVar7 = *arg4;\n                *arg4 = iVar7 + 1;\n                if ((iVar7 == -2) || (iVar12 = iVar12 + 1,  iVar13 <= iVar12)) goto code_r0x000140007ffd;\n            }\n            *arg4 = -1;\n        }\n    }\ncode_r0x000140007ffd:\n    uVar9 = fcn.140002480(uStack56 ^ &stack0xffffffffffffff88);\n    return uVar9;\n}\n",
        "token_count": 3532
    },
    "140007bf": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_bp_10h\n// WARNING: Variable defined which should be unmapped: var_bp_20h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.140007bf4(int64_t arg1)\n\n{\n    int32_t *arg4;\n    int64_t *arg1_00;\n    uint32_t uVar1;\n    ulong uVar2;\n    bool bVar3;\n    char cVar4;\n    int32_t iVar5;\n    int64_t arg3;\n    uchar uVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    ulong var_30h;\n    uchar auStack120 [32];\n    ulong uStack88;\n    uint uStack72;\n    uchar auStack68 [12];\n    uint64_t uStack56;\n    ulong var_bp_20h;\n    ulong var_bp_10h;\n    \n    uStack56 = *0x140026018 ^ auStack120;\n    cVar4 = *(arg1 + 0x39);\n    uVar6 = 0x78;\n    if (cVar4 < 'e') {\n        if (cVar4 == 'd') {\ncode_r0x000140007cfa:\n            *(arg1 + 0x28) = *(arg1 + 0x28) | 0x10;\ncode_r0x000140007cfe:\n            cVar4 = fcn.140006d98(arg1);\n        }\n        else {\n            if (cVar4 != 'A') {\n                if (cVar4 == 'C') {\ncode_r0x000140007c7a:\n                    cVar4 = fcn.1400082ec(arg1);\n                }\n                else {\n                    if (cVar4 < 'E') goto code_r0x000140007ffd;\n                    if (cVar4 < 'H') goto code_r0x000140007d07;\n                    if (cVar4 == 'S') {\ncode_r0x000140007cbc:\n                        cVar4 = fcn.140008464(arg1);\n                    }\n                    else {\n                        if (cVar4 == 'X') goto code_r0x000140007c90;\n                        if (cVar4 != 'Z') {\n                            if (cVar4 != 'a') {\n                                if (cVar4 != 'c') goto code_r0x000140007ffd;\n                                goto code_r0x000140007c7a;\n                            }\n                            goto code_r0x000140007d07;\n                        }\n                        cVar4 = fcn.140008028(arg1);\n                    }\n                }\n                goto code_r0x000140007d0c;\n            }\ncode_r0x000140007d07:\n            cVar4 = fcn.1400080a0(arg1);\n        }\n    }\n    else {\n        if (cVar4 < 'h') goto code_r0x000140007d07;\n        if (cVar4 == 'i') goto code_r0x000140007cfa;\n        if (cVar4 == 'n') {\n            cVar4 = fcn.1400083b0(arg1);\n        }\n        else if (cVar4 == 'o') {\n            if ((*(arg1 + 0x28) >> 5 & 1) != 0) {\n                *(arg1 + 0x28) = *(arg1 + 0x28) | 0x80;\n            }\n            cVar4 = fcn.140006bb0(arg1);\n        }\n        else {\n            if (cVar4 == 'p') {\n                *(arg1 + 0x30) = 0x10;\n                *(arg1 + 0x34) = 0xb;\n            }\n            else {\n                if (cVar4 == 's') goto code_r0x000140007cbc;\n                if (cVar4 == 'u') goto code_r0x000140007cfe;\n                if (cVar4 != 'x') goto code_r0x000140007ffd;\n            }\ncode_r0x000140007c90:\n            cVar4 = fcn.140006f80(arg1);\n        }\n    }\ncode_r0x000140007d0c:\n    if ((cVar4 == '\\0') || (*(arg1 + 0x38) != '\\0')) goto code_r0x000140007ffd;\n    uVar1 = *(arg1 + 0x28);\n    arg3 = 0;\n    uStack72 = (uStack72 >> 0x10 & 0xff00) << 0x10;\n    if ((uVar1 >> 4 & 1) != 0) {\n        uStack72._1_3_ = uStack72 >> 8;\n        if ((uVar1 >> 6 & 1) == 0) {\n            if ((uVar1 & 1) == 0) {\n                if ((uVar1 >> 1 & 1) == 0) goto code_r0x000140007d64;\n                uStack72 = CONCAT31(uStack72._1_3_, 0x20);\n            }\n            else {\n                uStack72 = CONCAT31(uStack72._1_3_, 0x2b);\n            }\n        }\n        else {\n            uStack72 = CONCAT31(uStack72._1_3_, 0x2d);\n        }\n        arg3 = 1;\n    }\ncode_r0x000140007d64:\n    cVar4 = *(arg1 + 0x39);\n    if (((cVar4 + 0xa8U & 0xdf) == 0) && ((uVar1 >> 5 & 1) != 0)) {\n        bVar3 = true;\n    }\n    else {\n        bVar3 = false;\n    }\n    if ((bVar3) || ((cVar4 + 0xbfU & 0xdf) == 0)) {\n        auStack68[arg3 + -4] = 0x30;\n        if ((cVar4 == 'X') || (cVar4 == 'A')) {\n            uVar6 = 0x58;\n        }\n        auStack68[arg3 + -3] = uVar6;\n        arg3 = arg3 + 2;\n    }\n    iVar8 = (*(arg1 + 0x2c) - *(arg1 + 0x48)) - arg3;\n    if ((uVar1 & 0xc) == 0) {\n        uVar2 = *(arg1 + 8);\n        iVar7 = 0;\n        if (0 < iVar8) {\n            while ((((*(*(arg1 + 0x460) + 0x14) >> 0xc & 1) != 0 && (*(*(arg1 + 0x460) + 8) == 0)) ||\n                   (iVar5 = fcn.14000e880(0x20, *(arg1 + 0x460), uVar2),  iVar5 != -1))) {\n                iVar5 = *(arg1 + 0x20);\n                *(arg1 + 0x20) = iVar5 + 1;\n                if ((iVar5 == -2) || (iVar7 = iVar7 + 1,  iVar8 <= iVar7)) goto code_r0x000140007e20;\n            }\n            *(arg1 + 0x20) = 0xffffffff;\n        }\n    }\ncode_r0x000140007e20:\n    arg1_00 = arg1 + 0x460;\n    arg4 = arg1 + 0x20;\n    if (((*(*arg1_00 + 0x14) >> 0xc & 1) == 0) || (*(*arg1_00 + 8) != 0)) {\n        uStack88 = *(arg1 + 8);\n        fcn.140008614(arg1_00, &uStack72, arg3, arg4);\n    }\n    else {\n        *arg4 = *arg4 + arg3;\n    }\n    if (((*(arg1 + 0x28) >> 3 & 1) != 0) && ((*(arg1 + 0x28) >> 2 & 1) == 0)) {\n        uVar2 = *(arg1 + 8);\n        iVar7 = 0;\n        if (0 < iVar8) {\n            while ((((*(*arg1_00 + 0x14) >> 0xc & 1) != 0 && (*(*arg1_00 + 8) == 0)) ||\n                   (iVar5 = fcn.14000e880(0x30, *arg1_00, uVar2),  iVar5 != -1))) {\n                iVar5 = *arg4;\n                *arg4 = iVar5 + 1;\n                if ((iVar5 == -2) || (iVar7 = iVar7 + 1,  iVar8 <= iVar7)) goto code_r0x000140007ec8;\n            }\n            *arg4 = -1;\n        }\n    }\ncode_r0x000140007ec8:\n    if ((*(arg1 + 0x4c) == '\\0') || (*(arg1 + 0x48) < 1)) {\n        if (((*(*arg1_00 + 0x14) >> 0xc & 1) == 0) || (*(*arg1_00 + 8) != 0)) {\n            uStack88 = *(arg1 + 8);\n            fcn.140008614(arg1_00, *(arg1 + 0x40), *(arg1 + 0x48), arg4);\n        }\n        else {\n            *arg4 = *arg4 + *(arg1 + 0x48);\n        }\n    }\n    else {\n        iVar7 = 0;\n        do {\n            uStack88 = *(arg1 + 8);\n            uStack72 = 0;\n            iVar5 = fcn.14000e540(&uStack72, auStack68, 6);\n            if ((iVar5 != 0) || (uStack72 == 0)) {\n                *arg4 = -1;\n                break;\n            }\n            if (((*(*arg1_00 + 0x14) >> 0xc & 1) == 0) || (*(*arg1_00 + 8) != 0)) {\n                uStack88 = *(arg1 + 8);\n                fcn.140008614(arg1_00, auStack68, uStack72, arg4);\n            }\n            else {\n                *arg4 = *arg4 + uStack72;\n            }\n            iVar7 = iVar7 + 1;\n        } while (iVar7 != *(arg1 + 0x48));\n    }\n    if ((-1 < *arg4) && ((*(arg1 + 0x28) >> 2 & 1) != 0)) {\n        uVar2 = *(arg1 + 8);\n        iVar7 = 0;\n        if (0 < iVar8) {\n            while ((((*(*arg1_00 + 0x14) >> 0xc & 1) != 0 && (*(*arg1_00 + 8) == 0)) ||\n                   (iVar5 = fcn.14000e880(0x20, *arg1_00, uVar2),  iVar5 != -1))) {\n                iVar5 = *arg4;\n                *arg4 = iVar5 + 1;\n                if ((iVar5 == -2) || (iVar7 = iVar7 + 1,  iVar8 <= iVar7)) goto code_r0x000140007ffd;\n            }\n            *arg4 = -1;\n        }\n    }\ncode_r0x000140007ffd:\n    fcn.140002480(uStack56 ^ auStack120);\n    return;\n}\n",
        "token_count": 2580
    },
    "1400080a": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nulong fcn.1400080a0(int64_t arg1)\n\n{\n    uint8_t uVar1;\n    int64_t *piVar2;\n    char cVar3;\n    int32_t iVar4;\n    int64_t iVar5;\n    uint8_t *puVar6;\n    char *pcVar7;\n    uint8_t *puVar8;\n    int64_t iVar9;\n    uint8_t uVar10;\n    uint64_t uVar11;\n    int64_t arg4;\n    bool bVar12;\n    ulong uStackX8;\n    \n    *(arg1 + 0x28) = *(arg1 + 0x28) | 0x10;\n    iVar4 = *(arg1 + 0x30);\n    if (iVar4 < 0) {\n        iVar4 = (-((*(arg1 + 0x39) + 0xbfU & 0xdf) != 0) & 0xfffffff9) + 0xd;\n        *(arg1 + 0x30) = iVar4;\n    }\n    else if ((iVar4 == 0) && ((*(arg1 + 0x39) == 'g' || (iVar4 = 0,  *(arg1 + 0x39) == 'G')))) {\n        *(arg1 + 0x30) = 1;\n        iVar4 = 1;\n    }\n    iVar9 = arg1 + 0x50;\n    cVar3 = fcn.140006858(iVar9, iVar4 + 0x15d, *(arg1 + 8));\n    uVar11 = 0x200;\n    if (cVar3 == '\\0') {\n        if (*(arg1 + 0x458) == 0) {\n            iVar4 = 0x200;\n        }\n        else {\n            iVar4 = *(arg1 + 0x450) >> 1;\n        }\n        *(arg1 + 0x30) = iVar4 + -0x15d;\n    }\n    iVar5 = *(arg1 + 0x458);\n    if (*(arg1 + 0x458) == 0) {\n        iVar5 = iVar9;\n    }\n    *(arg1 + 0x40) = iVar5;\n    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n    iVar5 = *(arg1 + 0x458);\n    uStackX8 = *(*(arg1 + 0x18) + -8);\n    if (iVar5 == 0) {\n        arg4 = arg1 + 0x250;\n        iVar5 = iVar9;\n    }\n    else {\n        arg4 = (*(arg1 + 0x450) >> 1) + iVar5;\n        uVar11 = *(arg1 + 0x450) >> 1;\n    }\n    fcn.14000e258(&uStackX8, iVar5, uVar11, arg4);\n    if (((*(arg1 + 0x28) >> 5 & 1) != 0) && (*(arg1 + 0x30) == 0)) {\n        iVar9 = *(arg1 + 8);\n        if (*(iVar9 + 0x28) == '\\0') {\n            fcn.140008500(iVar9);\n        }\n        puVar6 = *(arg1 + 0x40);\n        piVar2 = *(iVar9 + 0x18);\n        uVar11 = *puVar6;\n        if (*(uVar11 + piVar2[0x22]) != 'e') {\n            do {\n                puVar6 = puVar6 + 1;\n                uVar11 = *puVar6;\n            } while ((*(*piVar2 + uVar11 * 2) & 4) != 0);\n        }\n        bVar12 = *(uVar11 + piVar2[0x22]) == 'x';\n        if (bVar12) {\n            uVar11 = puVar6[2];\n        }\n        puVar8 = puVar6 + 2;\n        if (!bVar12) {\n            puVar8 = puVar6;\n        }\n        *puVar8 = **piVar2[0x1f];\n        do {\n            puVar8 = puVar8 + 1;\n            uVar1 = *puVar8;\n            uVar10 = uVar11;\n            *puVar8 = uVar10;\n            uVar11 = uVar1;\n        } while (uVar10 != 0);\n    }\n    if (((*(arg1 + 0x39) + 0xb9U & 0xdf) == 0) && ((*(arg1 + 0x28) >> 5 & 1) == 0)) {\n        iVar9 = *(arg1 + 8);\n        if (*(iVar9 + 0x28) == '\\0') {\n            fcn.140008500(iVar9);\n        }\n        fcn.1400075e8(*(arg1 + 0x40), iVar9 + 0x18);\n    }\n    pcVar7 = *(arg1 + 0x40);\n    cVar3 = *pcVar7;\n    if (cVar3 == '-') {\n        *(arg1 + 0x28) = *(arg1 + 0x28) | 0x40;\n        pcVar7 = pcVar7 + 1;\n        *(arg1 + 0x40) = pcVar7;\n        cVar3 = *pcVar7;\n    }\n    if ((cVar3 + 0xb7U < 0x26) && ((0x2100000021U >> (cVar3 + 0xb7U & 0x3f) & 1) != 0)) {\n        *(arg1 + 0x28) = *(arg1 + 0x28) & 0xfffffff7;\n        *(arg1 + 0x39) = 0x73;\n    }\n    iVar9 = -1;\n    do {\n        iVar9 = iVar9 + 1;\n    } while (pcVar7[iVar9] != '\\0');\n    *(arg1 + 0x48) = iVar9;\n    return 1;\n}\n",
        "token_count": 1356
    },
    "14000861": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.140008614(int64_t *arg1, char *arg2, ulong arg3, int32_t *arg4)\n\n{\n    ulong uVar1;\n    int32_t iVar2;\n    char *pcVar3;\n    bool bVar4;\n    int64_t in_stack_00000028;\n    \n    pcVar3 = arg2 + arg3;\n    bVar4 = arg2 == pcVar3;\n    uVar1 = *(in_stack_00000028 + 0x2c);\n    do {\n        if (bVar4) {\ncode_r0x0001400086c2:\n            *(in_stack_00000028 + 0x2c) = uVar1;\n            return;\n        }\n        if (((*(*arg1 + 0x14) >> 0xc & 1) == 0) || (*(*arg1 + 8) != 0)) {\n            iVar2 = fcn.14000e880(*arg2, *arg1, in_stack_00000028);\n            if (iVar2 != -1) goto code_r0x0001400086b0;\n            if ((*(in_stack_00000028 + 0x30) == '\\0') || (*(in_stack_00000028 + 0x2c) != 0x2a)) {\n                *arg4 = -1;\n                goto code_r0x0001400086c2;\n            }\n            if (((*(*arg1 + 0x14) >> 0xc & 1) != 0) && (*(*arg1 + 8) == 0)) goto code_r0x0001400086b0;\n            iVar2 = fcn.14000e880(0x3f, *arg1, in_stack_00000028);\n            if (iVar2 != -1) goto code_r0x0001400086b0;\n            *arg4 = -1;\n        }\n        else {\ncode_r0x0001400086b0:\n            *arg4 = *arg4 + 1;\n        }\n        arg2 = arg2 + 1;\n        bVar4 = arg2 == pcVar3;\n    } while( true );\n}\n",
        "token_count": 477
    },
    "1400086e": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_9h\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Variable defined which should be unmapped: var_11h\n\nuint fcn.1400086e0(ulong arg1, int64_t arg2, int64_t arg3, uint *arg4)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    uint uVar3;\n    uint uVar4;\n    uint uVar5;\n    int64_t var_fh;\n    ulong var_17h;\n    int64_t var_1fh;\n    ulong var_27h;\n    ulong var_2fh;\n    ulong var_5fh;\n    ulong var_67h;\n    ulong var_6fh;\n    ulong var_77h;\n    int64_t aiStack152 [2];\n    uchar uStack136;\n    uchar auStack128 [16];\n    char cStack112;\n    uint uStack108;\n    char cStack104;\n    uint uStack100;\n    char cStack96;\n    int64_t iStack88;\n    uchar auStack80 [7];\n    int64_t var_41h;\n    uchar auStack64 [7];\n    int64_t var_31h;\n    int64_t var_29h;\n    uchar auStack40 [7];\n    ulong var_19h;\n    ulong var_11h;\n    ulong var_9h;\n    ulong var_1h;\n    \n    aiStack152[0] = 0;\n    uStack136 = 0;\n    cStack112 = '\\0';\n    cStack104 = '\\0';\n    cStack96 = '\\0';\n    if (arg4 == NULL) {\n        uVar1 = *0x1400262c8;\n        uVar3 = *0x1400262cc;\n        uVar4 = *0x1400262d0;\n        uVar5 = *0x1400262d4;\n        if (*0x1400274f8 != 0) goto code_r0x000140008729;\n    }\n    else {\n        uVar1 = *arg4;\n        uVar3 = arg4[1];\n        uVar4 = arg4[2];\n        uVar5 = arg4[3];\n    }\n    cStack112 = '\\x01';\n    auStack128 = CONCAT412(uVar5, CONCAT48(uVar4, CONCAT44(uVar3, uVar1)));\ncode_r0x000140008729:\n    unique0x1000021f = arg2;\n    unique0x10000227 = arg1;\n    unique0x1000022f = arg3;\n    if ((arg2 == 0) || (arg3 == 0)) {\n        cStack104 = '\\x01';\n        uStack108 = 0x16;\n        fcn.1400094e8(0, 0, 0, 0);\n        uVar1 = 0xffffffff;\n    }\n    else {\n        unique0x00003100 = &var_fh + 1;\n        _auStack64 = aiStack152;\n        unique0x00003100 = &var_17h + 1;\n        unique0x00003100 = &var_1fh + 1;\n        _auStack40 = &var_27h + 1;\n        iStack88 = arg2;\n        _auStack80 = arg2;\n        uVar1 = fcn.140006818(&var_2fh + 1, auStack80, &var_41h + 1, &iStack88);\n    }\n    uVar3 = uStack108;\n    if (cStack112 == '\\x02') {\n        *(aiStack152[0] + 0x3a8) = *(aiStack152[0] + 0x3a8) & 0xfffffffd;\n    }\n    if (cStack104 != '\\0') {\n        iVar2 = fcn.140006250(aiStack152);\n        *(iVar2 + 0x20) = uVar3;\n    }\n    if (cStack96 != '\\0') {\n        iVar2 = fcn.140006250(aiStack152);\n        *(iVar2 + 0x24) = uStack100;\n    }\n    return uVar1;\n}\n",
        "token_count": 931
    },
    "14000944": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.14000944c(ulong noname_0, ulong noname_1, ulong noname_2, ulong noname_3, ulong arg_30h)\n\n{\n    int64_t iVar1;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_bp_28h;\n    uint uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_18h._0_1_ = *0x1400274f8 == 0;\n    var_30h._0_1_ = 0;\n    var_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (var_18h) {\n        var_bp_28h._0_4_ = *0x1400262c8;\n        var_bp_28h._4_4_ = *0x1400262cc;\n        uStack40 = *0x1400262d0;\n        uStack36 = *0x1400262d4;\n    }\n    fcn.1400094e8(noname_0, noname_1, noname_2, noname_3);\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_10h != '\\0') {\n        iVar1 = fcn.140006250(&var_40h);\n        *(iVar1 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar1 = fcn.140006250(&var_40h);\n        *(iVar1 + 0x24) = var_10h._4_4_;\n    }\n    return;\n}\n",
        "token_count": 455
    },
    "14000996": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.140009968(int32_t **arg1)\n\n{\n    ulong arg1_00;\n    \n    if (*0x140027358 != '\\0') {\n        return;\n    }\n    *0x140027348 = 1;\n    if (**arg1 == 0) {\n        if (*0x140027350 != *0x140026018) {\n            (**0x14001a5a8)(0, 0, 0);\n        }\n        arg1_00 = 0x140027488;\n    }\n    else {\n        if (**arg1 != 1) goto code_r0x0001400099e2;\n        arg1_00 = 0x1400274a0;\n    }\n    fcn.14000a708(arg1_00);\ncode_r0x0001400099e2:\n    if (**arg1 == 0) {\n        fcn.14000a9cc(0x14001a640, 0x14001a660);\n    }\n    fcn.14000a9cc(0x14001a668, 0x14001a670);\n    if (*arg1[1] == 0) {\n        *0x140027358 = '\\x01';\n        *arg1[2] = 1;\n    }\n    return;\n}\n",
        "token_count": 285
    },
    "140009be": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x000140009a59)\n// WARNING: Removing unreachable block (ram,0x000140009a66)\n// WARNING: Removing unreachable block (ram,0x000140009a70)\n// WARNING: Removing unreachable block (ram,0x000140009a7f)\n// WARNING: Removing unreachable block (ram,0x000140009a8a)\n// WARNING: Removing unreachable block (ram,0x000140009a93)\n// WARNING: Removing unreachable block (ram,0x000140009a9c)\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.140009be8(void)\n\n{\n    code *pcVar1;\n    uint auStackX16 [2];\n    int32_t aiStackX24 [2];\n    ulong var_28h;\n    uchar var_30h [4];\n    ulong var_2ch;\n    ulong var_20h;\n    uint *var_bp_18h;\n    int32_t *var_bp_10h;\n    ulong *var_8h;\n    \n    aiStackX24[0] = 1;\n    auStackX16[0] = 0;\n    var_20h = 0xfffffffffffffffe;\n    var_28h._0_1_ = 0;\n    var_bp_18h = auStackX16;\n    var_bp_10h = aiStackX24;\n    var_8h = &var_28h;\n    var_2ch._0_4_ = 2;\n    var_2ch._4_4_ = 2;\n    fcn.140009930(var_30h, &var_2ch + 4, &var_bp_18h, &var_2ch);\n    if (aiStackX24[0] == 0) {\n        fcn.140009afc(0);\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    return;\n}\n",
        "token_count": 428
    },
    "14000a06": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint64_t * fcn.14000a06c(char *arg1)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    int64_t *arg1_00;\n    int64_t *piVar4;\n    char cVar5;\n    int64_t iVar6;\n    int64_t iVar7;\n    char *pcVar8;\n    \n    cVar5 = *arg1;\n    iVar6 = 0;\n    pcVar8 = arg1;\n    while (cVar5 != '\\0') {\n        iVar7 = iVar6 + 1;\n        if (cVar5 == '=') {\n            iVar7 = iVar6;\n        }\n        iVar6 = -1;\n        do {\n            iVar3 = iVar6;\n            iVar6 = iVar3 + 1;\n        } while (pcVar8[iVar6] != '\\0');\n        pcVar8 = pcVar8 + iVar3 + 2;\n        iVar6 = iVar7;\n        cVar5 = *pcVar8;\n    }\n    arg1_00 = fcn.14000fa1c(iVar6 + 1, 8);\n    piVar4 = arg1_00;\n    if (arg1_00 == NULL) {\ncode_r0x00014000a0cf:\n        fcn.14000ae8c(0);\n        arg1_00 = NULL;\n    }\n    else {\n        for (; *arg1 != '\\0'; arg1 = arg1 + iVar7) {\n            iVar6 = -1;\n            do {\n                iVar7 = iVar6;\n                iVar6 = iVar7 + 1;\n            } while (arg1[iVar6] != '\\0');\n            iVar7 = iVar7 + 2;\n            if (*arg1 != '=') {\n                iVar6 = fcn.14000fa1c(iVar7, 1);\n                if (iVar6 == 0) {\n                    fcn.14000a17c(arg1_00);\n                    fcn.14000ae8c(0);\n                    goto code_r0x00014000a0cf;\n                }\n                iVar2 = fcn.14000ad60(iVar6, iVar7, arg1);\n                if (iVar2 != 0) {\n                    fcn.1400095d8(0, 0, 0, 0, 0);\n                    pcVar1 = swi(3);\n                    piVar4 = (*pcVar1)();\n                    return piVar4;\n                }\n                *piVar4 = iVar6;\n                piVar4 = piVar4 + 1;\n                fcn.14000ae8c(0);\n            }\n        }\n        fcn.14000ae8c(0);\n    }\n    return arg1_00;\n}\n",
        "token_count": 598
    },
    "14000a8e": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nulong fcn.14000a8e8(void)\n\n{\n    char cVar1;\n    ulong uVar2;\n    int64_t *piVar3;\n    bool bVar4;\n    \n    piVar3 = 0x14001bef0;\n    do {\n        if ((*piVar3 != 0) && (cVar1 = (**0x14001a5a8)(),  cVar1 == '\\0')) break;\n        piVar3 = piVar3 + 2;\n    } while (piVar3 != 0x14001bff0);\n    if (piVar3 == 0x14001bff0) {\n        uVar2 = 1;\n    }\n    else {\n        if (piVar3 != 0x14001bef0) {\n            piVar3 = piVar3 + -1;\n            do {\n                if ((piVar3[-1] != 0) && (*piVar3 != 0)) {\n                    (**0x14001a5a8)(0);\n                }\n                bVar4 = piVar3 != 0x14001bef8;\n                piVar3 = piVar3 + -2;\n            } while (bVar4);\n        }\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 277
    },
    "14000b1d": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.14000b1d4(ulong arg1)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_28h;\n    uint uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_bp_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_18h._0_1_ = *0x1400274f8 == 0;\n    var_30h._0_1_ = 0;\n    var_bp_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (var_18h) {\n        var_28h._0_4_ = *0x1400262c8;\n        var_28h._4_4_ = *0x1400262cc;\n        uStack40 = *0x1400262d0;\n        uStack36 = *0x1400262d4;\n    }\n    uVar1 = fcn.14000b26c(arg1, &var_40h);\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_bp_10h != '\\0') {\n        iVar2 = fcn.140006250(&var_40h);\n        *(iVar2 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar2 = fcn.140006250(&var_40h);\n        *(iVar2 + 0x24) = var_bp_10h._4_4_;\n    }\n    return uVar1;\n}\n",
        "token_count": 434
    },
    "14000b4d": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.14000b4dc(ulong noname_0, ulong *arg2, int64_t **arg3, ulong *arg4)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    \n    fcn.14000b080(*arg2);\n    if ((**arg3 != 0) && (uVar1 = *(**arg3 + 0x14),  (uVar1 >> 0xd & 1) != 0)) {\n        if ((((uVar1 & 3) == 2) && ((uVar1 & 0xc0) != 0)) || ((uVar1 >> 0xb & 1) != 0)) {\n            if ((*arg3[2] != '\\0') || ((*(**arg3 + 0x14) >> 1 & 1) != 0)) {\n                iVar2 = fcn.14000b744(**arg3);\n                if (iVar2 == -1) {\n                    *arg3[3] = 0xffffffff;\n                }\n                else {\n                    *arg3[1] = *arg3[1] + 1;\n                }\n            }\n        }\n        else {\n            *arg3[1] = *arg3[1] + 1;\n        }\n    }\n    fcn.14000b08c(*arg4);\n    return;\n}\n",
        "token_count": 298
    },
    "14000b74": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.14000b744(int64_t arg1)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int64_t iVar4;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_28h;\n    uint uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_bp_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_18h._0_1_ = *0x1400274f8 == 0;\n    var_30h._0_1_ = 0;\n    var_bp_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (var_18h) {\n        var_28h._0_4_ = *0x1400262c8;\n        var_28h._4_4_ = *0x1400262cc;\n        uStack40 = *0x1400262d0;\n        uStack36 = *0x1400262d4;\n    }\n    if (arg1 == 0) {\n        uVar1 = fcn.14000b658(0);\n        goto code_r0x00014000b7c8;\n    }\n    iVar2 = fcn.14000b6b8(arg1, &var_40h);\n    if (iVar2 == 0) {\n        if ((*(arg1 + 0x14) >> 0xb & 1) != 0) {\n            uVar3 = fcn.14000aec8(arg1);\n            iVar2 = fcn.14001298c(uVar3);\n            if (iVar2 != 0) goto code_r0x00014000b7a4;\n        }\n        uVar1 = 0;\n    }\n    else {\ncode_r0x00014000b7a4:\n        uVar1 = 0xffffffff;\n    }\ncode_r0x00014000b7c8:\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_bp_10h != '\\0') {\n        iVar4 = fcn.140006250(&var_40h);\n        *(iVar4 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar4 = fcn.140006250(&var_40h);\n        *(iVar4 + 0x24) = var_bp_10h._4_4_;\n    }\n    return uVar1;\n}\n",
        "token_count": 626
    },
    "14000ca7": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.14000ca74(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_28h;\n    uint uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_bp_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_18h._0_1_ = *0x1400274f8 == 0;\n    var_30h._0_1_ = 0;\n    var_bp_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (var_18h) {\n        var_28h._0_4_ = *0x1400262c8;\n        var_28h._4_4_ = *0x1400262cc;\n        uStack40 = *0x1400262d0;\n        uStack36 = *0x1400262d4;\n    }\n    uVar1 = fcn.14000cb0c(arg1, arg2, arg3, &var_40h);\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_bp_10h != '\\0') {\n        iVar2 = fcn.140006250(&var_40h);\n        *(iVar2 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar2 = fcn.140006250(&var_40h);\n        *(iVar2 + 0x24) = var_bp_10h._4_4_;\n    }\n    return uVar1;\n}\n",
        "token_count": 446
    },
    "14000d32": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint64_t fcn.14000d328(uchar (*arg1) [32], uint64_t arg2)\n\n{\n    uchar *puVar1;\n    uchar (*pauVar2) [32];\n    uint64_t uVar3;\n    uchar auVar4 [16];\n    uchar in_YMM1 [32];\n    uint8_t uVar5;\n    \n    pauVar2 = arg1;\n    if (*0x140026020 < 5) {\n        if (*0x140026020 < 1) {\n            if (arg1 != *arg1 + arg2) {\n                do {\n                    if ((*pauVar2)[0] == '\\0') break;\n                    pauVar2 = *pauVar2 + 1;\n                } while (pauVar2 != *arg1 + arg2);\n            }\n        }\n        else {\n            uVar3 = arg1 & 0xf;\n            uVar3 = -(uVar3 != 0) & 0x10 - uVar3;\n            if (arg2 < uVar3) {\n                uVar3 = arg2;\n            }\n            if (arg1 != *arg1 + uVar3) {\n                do {\n                    if ((*pauVar2)[0] == '\\0') break;\n                    pauVar2 = *pauVar2 + 1;\n                } while (pauVar2 != *arg1 + uVar3);\n            }\n            if (pauVar2 - arg1 != uVar3) {\n                return pauVar2 - arg1;\n            }\n            puVar1 = *pauVar2;\n            while ((pauVar2 != puVar1 + (arg2 - uVar3 & 0xfffffffffffffff0) &&\n                   (uVar5 = -((*pauVar2)[0xf] == '\\0'), \n                   auVar4 = CONCAT115(uVar5, CONCAT114(-((*pauVar2)[0xe] == '\\0'), \n                                                       CONCAT113(-((*pauVar2)[0xd] == '\\0'), \n                                                                 CONCAT112(-((*pauVar2)[0xc] == '\\0'), \n                                                                           CONCAT111(-((*pauVar2)[0xb] == '\\0'), \n                                                                                     CONCAT110(-((*pauVar2)[10] == '\\0')\n                                                                                               , CONCAT19(-((*pauVar2)\n                                                                                                            [9] == '\\0')\n                                                                                                          , CONCAT18(-((\n                                                            *pauVar2)[8] == '\\0'), \n                                                            CONCAT17(-((*pauVar2)[7] == '\\0'), \n                                                                     CONCAT16(-((*pauVar2)[6] == '\\0'), \n                                                                              CONCAT15(-((*pauVar2)[5] == '\\0'), \n                                                                                       CONCAT14(-((*pauVar2)[4] == '\\0')\n                                                                                                , CONCAT13(-((*pauVar2)\n                                                                                                             [3] == '\\0'\n                                                                                                            ), CONCAT12(\n                                                            -((*pauVar2)[2] == '\\0'), \n                                                            CONCAT11(-((*pauVar2)[1] == '\\0'), -((*pauVar2)[0] == '\\0'))\n                                                            )))))))))))))), \n                   (SUB161(auVar4 >> 7, 0) & 1 | (SUB161(auVar4 >> 0xf, 0) & 1) << 1 |\n                    (SUB161(auVar4 >> 0x17, 0) & 1) << 2 | (SUB161(auVar4 >> 0x1f, 0) & 1) << 3 |\n                    (SUB161(auVar4 >> 0x27, 0) & 1) << 4 | (SUB161(auVar4 >> 0x2f, 0) & 1) << 5 |\n                    (SUB161(auVar4 >> 0x37, 0) & 1) << 6 | (SUB161(auVar4 >> 0x3f, 0) & 1) << 7 |\n                    (SUB161(auVar4 >> 0x47, 0) & 1) << 8 | (SUB161(auVar4 >> 0x4f, 0) & 1) << 9 |\n                    (SUB161(auVar4 >> 0x57, 0) & 1) << 10 | (SUB161(auVar4 >> 0x5f, 0) & 1) << 0xb |\n                    (SUB161(auVar4 >> 0x67, 0) & 1) << 0xc | (SUB161(auVar4 >> 0x6f, 0) & 1) << 0xd |\n                    (SUB161(auVar4 >> 0x77, 0) & 1) << 0xe | (uVar5 >> 7) << 0xf) == 0))) {\n                pauVar2 = *pauVar2 + 0x10;\n            }\n            for (; (pauVar2 != *arg1 + arg2 && ((*pauVar2)[0] != '\\0')); pauVar2 = *pauVar2 + 1) {\n            }\n        }\n    }\n    else {\n        uVar3 = arg1 & 0x1f;\n        uVar3 = -(uVar3 != 0) & 0x20 - uVar3;\n        if (arg2 < uVar3) {\n            uVar3 = arg2;\n        }\n        if (arg1 != *arg1 + uVar3) {\n            do {\n                if ((*pauVar2)[0] == '\\0') break;\n                pauVar2 = *pauVar2 + 1;\n            } while (pauVar2 != *arg1 + uVar3);\n        }\n        if (pauVar2 - arg1 != uVar3) {\n            return pauVar2 - arg1;\n        }\n        puVar1 = *pauVar2;\n        for (; pauVar2 != puVar1 + (arg2 - uVar3 & 0xffffffffffffffe0); pauVar2 = pauVar2[1]) {\n            auVar4 = vpxor_avx(SUB3216(in_YMM1, 0), SUB3216(in_YMM1, 0));\n            in_YMM1 = vpcmpeqb_avx2(ZEXT1632(auVar4), *pauVar2);\n            vzeroupper_avx();\n            if ((SUB321(in_YMM1 >> 7, 0) & 1 | (SUB321(in_YMM1 >> 0xf, 0) & 1) << 1 |\n                 (SUB321(in_YMM1 >> 0x17, 0) & 1) << 2 | (SUB321(in_YMM1 >> 0x1f, 0) & 1) << 3 |\n                 (SUB321(in_YMM1 >> 0x27, 0) & 1) << 4 | (SUB321(in_YMM1 >> 0x2f, 0) & 1) << 5 |\n                 (SUB321(in_YMM1 >> 0x37, 0) & 1) << 6 | (SUB321(in_YMM1 >> 0x3f, 0) & 1) << 7 |\n                 (SUB321(in_YMM1 >> 0x47, 0) & 1) << 8 | (SUB321(in_YMM1 >> 0x4f, 0) & 1) << 9 |\n                 (SUB321(in_YMM1 >> 0x57, 0) & 1) << 10 | (SUB321(in_YMM1 >> 0x5f, 0) & 1) << 0xb |\n                 (SUB321(in_YMM1 >> 0x67, 0) & 1) << 0xc | (SUB321(in_YMM1 >> 0x6f, 0) & 1) << 0xd |\n                 (SUB321(in_YMM1 >> 0x77, 0) & 1) << 0xe | SUB321(in_YMM1 >> 0x7f, 0) << 0xf |\n                 (SUB321(in_YMM1 >> 0x87, 0) & 1) << 0x10 | (SUB321(in_YMM1 >> 0x8f, 0) & 1) << 0x11 |\n                 (SUB321(in_YMM1 >> 0x97, 0) & 1) << 0x12 | (SUB321(in_YMM1 >> 0x9f, 0) & 1) << 0x13 |\n                 (SUB321(in_YMM1 >> 0xa7, 0) & 1) << 0x14 | (SUB321(in_YMM1 >> 0xaf, 0) & 1) << 0x15 |\n                 (SUB321(in_YMM1 >> 0xb7, 0) & 1) << 0x16 | SUB321(in_YMM1 >> 0xbf, 0) << 0x17 |\n                 (SUB321(in_YMM1 >> 199, 0) & 1) << 0x18 | (SUB321(in_YMM1 >> 0xcf, 0) & 1) << 0x19 |\n                 (SUB321(in_YMM1 >> 0xd7, 0) & 1) << 0x1a | (SUB321(in_YMM1 >> 0xdf, 0) & 1) << 0x1b |\n                 (SUB321(in_YMM1 >> 0xe7, 0) & 1) << 0x1c | (SUB321(in_YMM1 >> 0xef, 0) & 1) << 0x1d |\n                 (SUB321(in_YMM1 >> 0xf7, 0) & 1) << 0x1e | SUB321(in_YMM1 >> 0xff, 0) << 0x1f) != 0) break;\n        }\n        for (; (pauVar2 != *arg1 + arg2 && ((*pauVar2)[0] != '\\0')); pauVar2 = *pauVar2 + 1) {\n        }\n    }\n    return pauVar2 - arg1;\n}\n",
        "token_count": 2274
    },
    "14000de9": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nulong fcn.14000de94(uchar *arg1, ulong noname_1, ulong arg3, int32_t *arg4)\n\n{\n    uchar *arg1_00;\n    bool bVar1;\n    int32_t iVar2;\n    uchar *arg2;\n    int64_t iVar3;\n    int64_t iVar4;\n    char in_stack_00000028;\n    int64_t in_stack_00000030;\n    \n    if ((in_stack_00000028 != '\\0') && (arg4[1] + -1 == arg3)) {\n        *(arg1 + arg4[1] + -1 + (*arg4 == 0x2d)) = 0x30;\n    }\n    if (*arg4 == 0x2d) {\n        *arg1 = 0x2d;\n        arg1 = arg1 + 1;\n    }\n    iVar2 = arg4[1];\n    if (iVar2 < 1) {\n        if ((iVar2 == 0) && (**(arg4 + 2) == '0')) {\n            bVar1 = true;\n        }\n        else {\n            bVar1 = false;\n        }\n        if ((in_stack_00000028 == '\\0') || (!bVar1)) {\n            iVar4 = -1;\n            do {\n                iVar3 = iVar4;\n                iVar4 = iVar3 + 1;\n            } while (arg1[iVar4] != '\\0');\n            fcn.140002f80(arg1 + 1, arg1, iVar3 + 2);\n        }\n        arg2 = arg1 + 1;\n        *arg1 = 0x30;\n    }\n    else {\n        arg2 = arg1 + iVar2;\n    }\n    if (0 < arg3) {\n        arg1_00 = arg2 + 1;\n        iVar4 = -1;\n        do {\n            iVar3 = iVar4;\n            iVar4 = iVar3 + 1;\n        } while (arg2[iVar4] != '\\0');\n        fcn.140002f80(arg1_00, arg2, iVar3 + 2);\n        if (*(in_stack_00000030 + 0x28) == '\\0') {\n            fcn.140008500(in_stack_00000030);\n        }\n        *arg2 = ***(*(in_stack_00000030 + 0x18) + 0xf8);\n        if (arg4[1] < 0) {\n            iVar2 = -arg4[1];\n            if ((in_stack_00000028 != '\\0') || (iVar4 = -1,  iVar2 < arg3)) {\n                iVar4 = -1;\n                arg3._0_4_ = iVar2;\n            }\n            do {\n                iVar3 = iVar4;\n                iVar4 = iVar3 + 1;\n            } while (arg1_00[iVar4] != '\\0');\n            fcn.140002f80(arg1_00 + arg3, arg1_00, iVar3 + 2);\n            fcn.140003630(arg1_00, 0x30, arg3);\n        }\n    }\n    return 0;\n}\n",
        "token_count": 685
    },
    "14000e25": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nulong fcn.14000e258(uint64_t *arg1, uchar *arg2, uint64_t arg3, int64_t arg4)\n\n{\n    uint64_t uVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    ulong uVar4;\n    int64_t iVar5;\n    uint32_t uVar6;\n    uint64_t uVar7;\n    int64_t in_stack_00000028;\n    int32_t in_stack_00000030;\n    uint64_t in_stack_00000040;\n    int64_t in_stack_00000050;\n    \n    if (arg2 == NULL) {\n        *(in_stack_00000050 + 0x30) = 1;\n        *(in_stack_00000050 + 0x2c) = 0x16;\n    }\n    else {\n        if (((arg3 != 0) && (arg4 != 0)) && (in_stack_00000028 != 0)) {\n            if ((in_stack_00000030 == 0x41) || (in_stack_00000030 - 0x45U < 3)) {\n                uVar6 = 1;\n            }\n            else {\n                uVar6 = 0;\n            }\n            if (((in_stack_00000040 & 8) == 0) && (uVar1 = *arg1,  (uVar1 >> 0x34 & 0x7ff) == 0x7ff)) {\n                if ((uVar1 & 0xfffffffffffff) == 0) {\n                    iVar5 = 0;\n                }\n                else if ((uVar1 < 0) && ((uVar1 & 0xfffffffffffff) == 0x8000000000000)) {\n                    iVar5 = 0xc;\n                }\n                else {\n                    iVar5 = (-((uVar1 & 0x8000000000000) != 0) & 0xfffffffffffffffc) + 8;\n                }\n                if (arg3 < 4U - (uVar1 >> 0x3f)) {\n                    *arg2 = 0;\n                    return 0xc;\n                }\n                uVar7 = 0xffffffffffffffff;\n                if (uVar1 < 0) {\n                    *arg2 = 0x2d;\n                    arg2 = arg2 + 1;\n                    *arg2 = 0;\n                    if (arg3 != 0xffffffffffffffff) {\n                        arg3 = arg3 - 1;\n                    }\n                }\n                uVar6 = (uVar6 ^ 1) * 2;\n                do {\n                    uVar7 = uVar7 + 1;\n                } while (*(*((uVar6 + iVar5) * 8 + 0x14001c6b0) + uVar7) != '\\0');\n                iVar3 = fcn.14000ad60(arg2, arg3, *((uVar6 + (arg3 <= uVar7) + iVar5) * 8 + 0x14001c6b0));\n                if (iVar3 == 0) {\n                    return 0;\n                }\n                fcn.1400095d8(0, 0, 0, 0, 0);\n                pcVar2 = swi(3);\n                uVar4 = (*pcVar2)();\n                return uVar4;\n            }\n            if (in_stack_00000030 != 0x41) {\n                if (in_stack_00000030 == 0x45) {\ncode_r0x00014000e4a5:\n                    uVar4 = fcn.14000dadc(arg1, arg2, arg3, arg4);\n                    return uVar4;\n                }\n                if (in_stack_00000030 == 0x46) {\ncode_r0x00014000e474:\n                    uVar4 = fcn.14000ddbc(arg1, arg2, arg3, arg4);\n                    return uVar4;\n                }\n                if (in_stack_00000030 != 0x47) {\n                    if (in_stack_00000030 == 0x61) goto code_r0x00014000e4df;\n                    if (in_stack_00000030 == 0x65) goto code_r0x00014000e4a5;\n                    if (in_stack_00000030 == 0x66) goto code_r0x00014000e474;\n                }\n                uVar4 = fcn.14000dfec(arg1, arg2, arg3, arg4);\n                return uVar4;\n            }\ncode_r0x00014000e4df:\n            uVar4 = fcn.14000d728(arg1, arg2, arg3, arg4);\n            return uVar4;\n        }\n        *(in_stack_00000050 + 0x30) = 1;\n        *(in_stack_00000050 + 0x2c) = 0x16;\n    }\n    fcn.1400094e8(0, 0, 0, 0);\n    return 0x16;\n}\n",
        "token_count": 1109
    },
    "14001017": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: lpFindFileData\n// WARNING: Variable defined which should be unmapped: var_bp_28h\n// WARNING: Variable defined which should be unmapped: var_bp_30h\n\nvoid fcn.14001017c(char *arg1, char *arg2, int64_t *arg3)\n\n{\n    uint8_t uVar1;\n    char *lpMem;\n    int32_t iVar2;\n    int64_t iVar3;\n    ulong uVar4;\n    char *arg1_00;\n    int64_t iVar5;\n    int64_t iVar6;\n    uint8_t uVar7;\n    ulong uVar8;\n    uint64_t arg3_00;\n    ulong var_ch;\n    ulong var_230h;\n    uchar auStack888 [32];\n    ulong uStack856;\n    uint uStack848;\n    uchar auStack840 [8];\n    uint64_t uStack832;\n    ulong uStack824;\n    ulong uStack816;\n    ulong uStack808;\n    ulong uStack800;\n    ulong uStack792;\n    char cStack784;\n    int64_t iStack776;\n    int64_t iStack768;\n    char cStack752;\n    int64_t iStack744;\n    int64_t iStack736;\n    char cStack720;\n    ulong uStack712;\n    ulong uStack704;\n    char *pcStack696;\n    ulong uStack688;\n    ulong uStack680;\n    char cStack672;\n    uchar auStack620 [492];\n    ulong var_bp_78h;\n    ulong var_bp_70h;\n    ulong var_bp_68h;\n    ulong var_bp_58h;\n    ulong var_bp_50h;\n    ulong var_bp_48h;\n    uint64_t var_bp_40h;\n    ulong var_bp_38h;\n    ulong var_bp_30h;\n    ulong var_bp_28h;\n    ulong lpFindFileData;\n    \n    var_bp_40h = *0x140026018 ^ auStack888;\n    if (arg2 != arg1) {\n        do {\n            if ((*arg2 - 0x2fU < 0x2e) && ((0x200000000801U >> (*arg2 - 0x2fU & 0x3fU) & 1) != 0)) break;\n            arg2 = fcn.1400169c8(arg1, arg2);\n        } while (arg2 != arg1);\n    }\n    if ((*arg2 == ':') && (arg2 != arg1 + 1)) {\n        fcn.14000fff4(arg1, 0, 0, arg3);\n    }\n    else {\n        uVar7 = *arg2 - 0x2f;\n        uVar8 = 0;\n        if ((0x2d < uVar7) || (uVar1 = 1,  (0x200000000801U >> (uVar7 & 0x3fU) & 1) == 0)) {\n            uVar1 = 0;\n        }\n        uStack824 = 0;\n        uStack816 = 0;\n        uStack808 = 0;\n        uStack800 = 0;\n        uStack792 = 0;\n        arg3_00 = -uVar1 & arg2 + (1 - arg1);\n        cStack784 = '\\0';\n        uStack832 = arg3_00;\n        fcn.140008b7c(&iStack776, 0);\n        if (*(iStack768 + 0xc) == 0xfde9) {\n            if (cStack752 != '\\0') {\n                *(iStack776 + 0x3a8) = *(iStack776 + 0x3a8) & 0xfffffffd;\n            }\n            uVar4 = 0xfde9;\n        }\n        else {\n            iVar2 = fcn.14000f4fc();\n            if (iVar2 == 0) {\n                if (cStack752 != '\\0') {\n                    *(iStack776 + 0x3a8) = *(iStack776 + 0x3a8) & 0xfffffffd;\n                }\n                uVar4 = 1;\n            }\n            else {\n                uVar4 = uVar8;\n                if (cStack752 != '\\0') {\n                    *(iStack776 + 0x3a8) = *(iStack776 + 0x3a8) & 0xfffffffd;\n                }\n            }\n        }\n        iVar2 = fcn.14000faa8(arg1, &uStack824, auStack840, uVar4);\n        uStack848 = 0;\n        uStack856 = 0;\n        uVar4 = uStack808;\n        if (iVar2 != 0) {\n            uVar4 = uVar8;\n        }\n        iVar3 = (*_sym.imp.KERNEL32.dll_FindFirstFileExW)(uVar4);\n        if (iVar3 == -1) {\n            fcn.14000fff4(arg1, 0, 0, arg3);\n            if (cStack784 != '\\0') {\n                fcn.14000ae8c(uStack808);\n            }\n        }\n        else {\n            iVar6 = arg3[1] - *arg3 >> 3;\n            do {\n                uVar8 = 0;\n                uStack712 = 0;\n                uStack704 = 0;\n                pcStack696 = NULL;\n                uStack688 = 0;\n                uStack680 = 0;\n                cStack672 = '\\0';\n                fcn.140008b7c(&iStack744, 0);\n                if (*(iStack736 + 0xc) == 0xfde9) {\n                    if (cStack720 != '\\0') {\n                        *(iStack744 + 0x3a8) = *(iStack744 + 0x3a8) & 0xfffffffd;\n                    }\n                    uVar8 = 0xfde9;\n                }\n                else {\n                    iVar2 = fcn.14000f4fc();\n                    if (iVar2 == 0) {\n                        if (cStack720 != '\\0') {\n                            *(iStack744 + 0x3a8) = *(iStack744 + 0x3a8) & 0xfffffffd;\n                        }\n                        uVar8 = 1;\n                    }\n                    else if (cStack720 != '\\0') {\n                        *(iStack744 + 0x3a8) = *(iStack744 + 0x3a8) & 0xfffffffd;\n                    }\n                }\n                iVar2 = fcn.14000fc24(auStack620, &uStack712, auStack840, uVar8);\n                lpMem = pcStack696;\n                arg1_00 = pcStack696;\n                if (iVar2 != 0) {\n                    arg1_00 = NULL;\n                }\n                if ((*arg1_00 == '.') && ((arg1_00[1] == '\\0' || ((arg1_00[1] == '.' && (arg1_00[2] == '\\0')))))) {\n                    if (cStack672 != '\\0') {\n                        fcn.14000ae8c(pcStack696);\n                    }\n                }\n                else {\n                    iVar2 = fcn.14000fff4(arg1_00, arg1, arg3_00, arg3);\n                    if (iVar2 != 0) {\n                        if (cStack672 != '\\0') {\n                            fcn.14000ae8c(lpMem);\n                        }\n                        (*_sym.imp.KERNEL32.dll_FindClose)(iVar3);\n                        if (cStack784 != '\\0') {\n                            fcn.14000ae8c(uStack808);\n                        }\n                        goto code_r0x0001400104a8;\n                    }\n                    arg3_00 = uStack832;\n                    if (cStack672 != '\\0') {\n                        fcn.14000ae8c(lpMem);\n                        arg3_00 = uStack832;\n                    }\n                }\n                iVar2 = (*_sym.imp.KERNEL32.dll_FindNextFileW)(iVar3);\n            } while (iVar2 != 0);\n            iVar5 = arg3[1] - *arg3 >> 3;\n            if (iVar6 != iVar5) {\n                fcn.140016060(*arg3 + iVar6 * 8, iVar5 - iVar6, 8, 0x14000fa94);\n            }\n            (*_sym.imp.KERNEL32.dll_FindClose)(iVar3);\n            if (cStack784 != '\\0') {\n                fcn.14000ae8c(uStack808);\n            }\n        }\n    }\ncode_r0x0001400104a8:\n    fcn.140002480(var_bp_40h ^ auStack888);\n    return;\n}\n",
        "token_count": 1917
    },
    "1400104c": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_10h\n// WARNING: Variable defined which should be unmapped: var_18h\n// WARNING: Variable defined which should be unmapped: var_20h\n// WARNING: Could not reconcile some variable overlaps\n\nuint64_t fcn.1400104cc(int64_t *arg1, int64_t *arg2)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    int64_t iVar5;\n    int64_t iVar6;\n    int64_t *piVar7;\n    uint64_t uVar8;\n    int64_t iVar9;\n    int64_t iVar10;\n    ulong uStackX16;\n    int64_t iStackX24;\n    int64_t iStackX32;\n    ulong var_48h;\n    ulong var_50h;\n    ulong var_58h;\n    uchar auStack88 [16];\n    ulong uStack72;\n    ulong var_20h;\n    ulong var_18h;\n    ulong var_10h;\n    \n    if (arg2 == NULL) {\n        puVar4 = fcn.1400096f4();\n        *puVar4 = 0x16;\n        fcn.1400095b8();\n        uVar8 = 0x16;\n    }\n    else {\n        *arg2 = 0;\n        iVar5 = *arg1;\n        auStack88 = ZEXT816(0);\n        uStack72 = 0;\n        while (iVar5 != 0) {\n            uStackX16 = CONCAT53(uStackX16._3_5_, 0x3f2a);\n            iVar5 = fcn.140016600(iVar5, &uStackX16);\n            if (iVar5 == 0) {\n                uVar2 = fcn.14000fff4(*arg1, 0, 0, auStack88);\n                uVar8 = uVar2;\n                if (uVar2 != 0) {\n                    piVar7 = auStack88._0_8_;\n                    if (auStack88._0_8_ != auStack88._8_8_) {\n                        do {\n                            fcn.14000ae8c(*piVar7);\n                            piVar7 = piVar7 + 1;\n                        } while (piVar7 != auStack88._8_8_);\n                    }\n                    goto code_r0x00014000ff27;\n                }\n            }\n            else {\n                uVar2 = fcn.14001017c(*arg1, iVar5, auStack88);\n                uVar8 = uVar2;\n                if (uVar2 != 0) {\n                    piVar7 = auStack88._0_8_;\n                    if (auStack88._0_8_ != auStack88._8_8_) {\n                        do {\n                            fcn.14000ae8c(*piVar7);\n                            piVar7 = piVar7 + 1;\n                        } while (piVar7 != auStack88._8_8_);\n                    }\n                    goto code_r0x00014000ff27;\n                }\n            }\n            arg1 = arg1 + 1;\n            iVar5 = *arg1;\n        }\n        iVar5 = (auStack88._8_8_ - auStack88._0_8_ >> 3) + 1;\n        iStackX24 = 0;\n        for (piVar7 = auStack88._0_8_; piVar7 != auStack88._8_8_; piVar7 = piVar7 + 1) {\n            iVar6 = -1;\n            do {\n                iVar6 = iVar6 + 1;\n            } while (*(*piVar7 + iVar6) != '\\0');\n            iStackX24 = iStackX24 + 1 + iVar6;\n        }\n        iVar6 = fcn.140009e10(iVar5, iStackX24);\n        if (iVar6 == 0) {\n            fcn.14000ae8c(0);\n            for (piVar7 = auStack88._0_8_; piVar7 != auStack88._8_8_; piVar7 = piVar7 + 1) {\n                fcn.14000ae8c(*piVar7);\n            }\n            uVar8 = 0xffffffff;\ncode_r0x00014000ff27:\n            fcn.14000ae8c(auStack88._0_8_);\n        }\n        else {\n            iVar5 = iVar6 + iVar5 * 8;\n            iStackX32 = iVar5;\n            if (auStack88._0_8_ != auStack88._8_8_) {\n                uStackX16 = iVar6 - auStack88._0_8_;\n                piVar7 = auStack88._0_8_;\n                do {\n                    iVar9 = -1;\n                    do {\n                        iVar10 = iVar9;\n                        iVar9 = iVar10 + 1;\n                    } while (*(*piVar7 + iVar9) != '\\0');\n                    iVar10 = iVar10 + 2;\n                    iVar3 = fcn.140016470(iVar5, (iStackX32 - iVar5) + iStackX24, *piVar7, iVar10);\n                    if (iVar3 != 0) {\n                        fcn.1400095d8(0, 0, 0, 0, 0);\n                        pcVar1 = swi(3);\n                        uVar8 = (*pcVar1)();\n                        return uVar8;\n                    }\n                    *(uStackX16 + piVar7) = iVar5;\n                    iVar5 = iVar5 + iVar10;\n                    piVar7 = piVar7 + 1;\n                } while (piVar7 != auStack88._8_8_);\n            }\n            *arg2 = iVar6;\n            fcn.14000ae8c(0);\n            for (piVar7 = auStack88._0_8_; piVar7 != auStack88._8_8_; piVar7 = piVar7 + 1) {\n                fcn.14000ae8c(*piVar7);\n            }\n            fcn.14000ae8c(auStack88._0_8_);\n            uVar8 = 0;\n        }\n    }\n    return uVar8;\n}\n",
        "token_count": 1372
    },
    "1400105f": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.1400105f0(ulong hModule, ulong arg2, uint64_t arg3)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    ulong arg4;\n    ulong var_190h;\n    uchar auStack680 [32];\n    uchar auStack648 [8];\n    int64_t iStack640;\n    int64_t iStack632;\n    char cStack616;\n    ulong uStack608;\n    uint64_t uStack600;\n    ulong uStack592;\n    uint64_t uStack584;\n    ulong uStack576;\n    uchar uStack568;\n    uchar auStack552 [416];\n    ulong lpFilename;\n    uint64_t uStack24;\n    \n    uStack24 = *0x140026018 ^ auStack680;\n    iVar1 = (*_sym.imp.KERNEL32.dll_GetModuleFileNameW)(hModule, auStack552, 0x105);\n    if (iVar1 == 0) {\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        fcn.140009668(uVar2);\n    }\n    else {\n        uStack576 = 0;\n        uStack568 = 0;\n        uStack608 = arg2;\n        uStack600 = arg3 & 0xffffffff;\n        uStack592 = arg2;\n        uStack584 = arg3 & 0xffffffff;\n        fcn.140008b7c(&iStack640, 0);\n        arg4 = 0xfde9;\n        if (*(iStack632 + 0xc) == 0xfde9) {\n            if (cStack616 != '\\0') {\n                *(iStack640 + 0x3a8) = *(iStack640 + 0x3a8) & 0xfffffffd;\n            }\n        }\n        else {\n            iVar1 = fcn.14000f4fc();\n            if (iVar1 == 0) {\n                if (cStack616 != '\\0') {\n                    *(iStack640 + 0x3a8) = *(iStack640 + 0x3a8) & 0xfffffffd;\n                }\n                arg4 = 1;\n            }\n            else {\n                if (cStack616 != '\\0') {\n                    *(iStack640 + 0x3a8) = *(iStack640 + 0x3a8) & 0xfffffffd;\n                }\n                arg4 = 0;\n            }\n        }\n        fcn.1400104d4(auStack552, &uStack608, auStack648, arg4);\n    }\n    fcn.140002480(uStack24 ^ auStack680);\n    return;\n}\n",
        "token_count": 575
    },
    "140010e5": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint32_t * fcn.140010e54(int64_t arg1, int32_t **arg2)\n\n{\n    int32_t iVar1;\n    ulong arg3;\n    uchar uVar2;\n    unkbyte7 Var3;\n    int32_t *lpMem;\n    \n    uVar2 = SUB81(arg2, 0);\n    Var3 = arg2 >> 8;\n    if (((*(arg1 + 0x3a8) & *0x140026910) == 0) || (*(arg1 + 0x90) == 0)) {\n        fcn.14000f970(5);\n        lpMem = *(arg1 + 0x88);\n        if (lpMem != *arg2) {\n            if (lpMem != NULL) {\n                LOCK();\n                iVar1 = *lpMem;\n                *lpMem = *lpMem + -1;\n                if ((iVar1 == 1) && (lpMem != 0x140026330)) {\n                    fcn.14000ae8c(lpMem);\n                }\n            }\n            lpMem = *arg2;\n            *(arg1 + 0x88) = lpMem;\n            LOCK();\n            *lpMem = *lpMem + 1;\n        }\n        fcn.14000f9c4(5);\n    }\n    else {\n        lpMem = *(arg1 + 0x88);\n    }\n    if (lpMem != NULL) {\n        return lpMem;\n    }\n    fcn.140009124();\n    if (*0x140027d64 == '\\0') {\n        *0x140027d50 = 0x140026670;\n        *0x140027d58 = 0x140026330;\n        *0x140027d48 = 0x140026560;\n        fcn.14000bc6c(0x140026560, CONCAT71(Var3, uVar2));\n        fcn.140010be4(0xfffffffd, CONCAT71(Var3, 1), arg3, 0x140027d58);\n        *0x140027d64 = '\\x01';\n    }\n    return 0x1;\n}\n",
        "token_count": 469
    },
    "140012ab": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint32_t fcn.140012ab8(uint8_t *arg1, uint8_t *arg2, uint64_t arg3)\n\n{\n    uint8_t uVar1;\n    uint8_t uVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    int64_t iStack40;\n    int64_t iStack32;\n    char cStack16;\n    \n    if (*0x1400274f8 == 0) {\n        if (((arg1 != NULL) && (arg2 != NULL)) && (arg3 < 0x80000000)) {\n            if (arg3 == 0) {\n                return 0;\n            }\n            do {\n                uVar1 = *arg1;\n                arg1 = arg1 + 1;\n                uVar2 = *arg2;\n                uVar6 = uVar1 + 0x20;\n                if (0x19 < uVar1 - 0x41) {\n                    uVar6 = uVar1;\n                }\n                arg2 = arg2 + 1;\n                uVar5 = uVar2 + 0x20;\n                if (0x19 < uVar2 - 0x41) {\n                    uVar5 = uVar2;\n                }\n            } while (((uVar6 - uVar5 == 0) && (uVar6 != 0)) && (arg3 = arg3 - 1,  arg3 != 0));\n            return uVar6 - uVar5;\n        }\n        puVar4 = fcn.1400096f4();\n        *puVar4 = 0x16;\n        fcn.1400095b8();\n        return 0x7fffffff;\n    }\n    if (((arg1 == NULL) || (arg2 == NULL)) || (0x7fffffff < arg3)) {\n        puVar4 = fcn.1400096f4();\n        *puVar4 = 0x16;\n        fcn.1400095b8();\n        iVar3 = 0x7fffffff;\n    }\n    else if (arg3 == 0) {\n        iVar3 = 0;\n    }\n    else {\n        fcn.140008b7c(&iStack40, 0);\n        do {\n            uVar1 = *arg1;\n            arg1 = arg1 + 1;\n            uVar1 = *(uVar1 + *(iStack32 + 0x110));\n            uVar2 = *arg2;\n            arg2 = arg2 + 1;\n            iVar3 = uVar1 - *(uVar2 + *(iStack32 + 0x110));\n            if ((iVar3 != 0) || (uVar1 == 0)) break;\n            arg3 = arg3 - 1;\n        } while (arg3 != 0);\n        if (cStack16 != '\\0') {\n            *(iStack40 + 0x3a8) = *(iStack40 + 0x3a8) & 0xfffffffd;\n        }\n    }\n    return iVar3;\n}\n",
        "token_count": 675
    },
    "140012b0": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint32_t fcn.140012b08(uint8_t *arg1, uint8_t *arg2, uint64_t arg3, ulong arg4)\n\n{\n    uint8_t uVar1;\n    uint8_t uVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    int64_t iStack40;\n    int64_t iStack32;\n    char cStack16;\n    \n    if (((arg1 == NULL) || (arg2 == NULL)) || (0x7fffffff < arg3)) {\n        puVar4 = fcn.1400096f4();\n        *puVar4 = 0x16;\n        fcn.1400095b8();\n        iVar3 = 0x7fffffff;\n    }\n    else if (arg3 == 0) {\n        iVar3 = 0;\n    }\n    else {\n        fcn.140008b7c(&iStack40, arg4);\n        do {\n            uVar1 = *arg1;\n            arg1 = arg1 + 1;\n            uVar1 = *(uVar1 + *(iStack32 + 0x110));\n            uVar2 = *arg2;\n            arg2 = arg2 + 1;\n            iVar3 = uVar1 - *(uVar2 + *(iStack32 + 0x110));\n            if ((iVar3 != 0) || (uVar1 == 0)) break;\n            arg3 = arg3 - 1;\n        } while (arg3 != 0);\n        if (cStack16 != '\\0') {\n            *(iStack40 + 0x3a8) = *(iStack40 + 0x3a8) & 0xfffffffd;\n        }\n    }\n    return iVar3;\n}\n",
        "token_count": 379
    },
    "140012bb": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint32_t fcn.140012bb8(int64_t arg1, uint64_t arg2, ulong arg3, uint64_t arg4)\n\n{\n    uint8_t *puVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    uint32_t *in_stack_00000028;\n    int32_t in_stack_00000030;\n    int32_t iStack24;\n    int32_t iStack20;\n    \n    if (((in_stack_00000028 == NULL) || (*in_stack_00000028 = 0xffffffff,  arg1 == 0)) ||\n       ((in_stack_00000030 != 0 && ((arg4 & 0xfffffe7f) != 0)))) {\n        puVar3 = fcn.1400096f4();\n        *puVar3 = 0x16;\n        fcn.1400095b8();\n        iVar2 = 0x16;\n    }\n    else {\n        iStack24 = 0;\n        iStack20 = 0;\n        iVar2 = fcn.1400131c4(&iStack24, in_stack_00000028, arg1, arg2 & 0xffffffff);\n        if (iStack24 != 0) {\n            if (iVar2 != 0) {\n                puVar1 = *((*in_stack_00000028 >> 6) * 8 + 0x140027550) + 0x38 + (*in_stack_00000028 & 0x3f) * 0x48;\n                *puVar1 = *puVar1 & 0xfe;\n            }\n            iStack20 = iVar2;\n            fcn.140011d38(*in_stack_00000028);\n        }\n        if (iVar2 != 0) {\n            *in_stack_00000028 = 0xffffffff;\n        }\n    }\n    return iVar2;\n}\n",
        "token_count": 408
    },
    "1400131c": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint fcn.1400131c4(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    ulong arg4_00;\n    uchar auStack104 [8];\n    int64_t iStack96;\n    int64_t iStack88;\n    char cStack72;\n    ulong uStack64;\n    ulong uStack56;\n    ulong uStack48;\n    ulong uStack40;\n    ulong uStack32;\n    char cStack24;\n    \n    uStack64 = 0;\n    uStack56 = 0;\n    uStack48 = 0;\n    uStack40 = 0;\n    uStack32 = 0;\n    cStack24 = '\\0';\n    fcn.140008b7c(&iStack96, 0);\n    arg4_00 = 0xfde9;\n    if (*(iStack88 + 0xc) == 0xfde9) {\n        if (cStack72 != '\\0') {\n            *(iStack96 + 0x3a8) = *(iStack96 + 0x3a8) & 0xfffffffd;\n        }\n    }\n    else {\n        iVar1 = fcn.14000f4fc();\n        if (iVar1 == 0) {\n            if (cStack72 != '\\0') {\n                *(iStack96 + 0x3a8) = *(iStack96 + 0x3a8) & 0xfffffffd;\n            }\n            arg4_00 = 1;\n        }\n        else {\n            if (cStack72 != '\\0') {\n                *(iStack96 + 0x3a8) = *(iStack96 + 0x3a8) & 0xfffffffd;\n            }\n            arg4_00 = 0;\n        }\n    }\n    iVar1 = fcn.14000faa8(arg3, &uStack64, auStack104, arg4_00);\n    if (iVar1 == 0) {\n        uVar2 = fcn.140013314(arg1, arg2, uStack48, arg4);\n    }\n    else {\n        uVar2 = 0xffffffff;\n    }\n    if (cStack24 != '\\0') {\n        fcn.14000ae8c(uStack48);\n    }\n    return uVar2;\n}\n",
        "token_count": 513
    },
    "14001393": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nulong fcn.140013938(ulong param_1, ulong param_2, ulong param_3)\n\n{\n    ulong uVar1;\n    int64_t iVar2;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_28h;\n    uint uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_bp_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_18h._0_1_ = *0x1400274f8 == 0;\n    var_30h._0_1_ = 0;\n    var_bp_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (var_18h) {\n        var_28h._0_4_ = *0x1400262c8;\n        var_28h._4_4_ = *0x1400262cc;\n        uStack40 = *0x1400262d0;\n        uStack36 = *0x1400262d4;\n    }\n    uVar1 = fcn.140013764(param_1, param_2, param_3, &var_40h);\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_bp_10h != '\\0') {\n        iVar2 = fcn.140006250(&var_40h);\n        *(iVar2 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar2 = fcn.140006250(&var_40h);\n        *(iVar2 + 0x24) = var_bp_10h._4_4_;\n    }\n    return uVar1;\n}\n",
        "token_count": 449
    },
    "1400139d": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nulong fcn.1400139d4(ulong param_1, ulong param_2, ulong param_3)\n\n{\n    ulong uVar1;\n    int64_t iVar2;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_28h;\n    uint uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_bp_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_18h._0_1_ = *0x1400274f8 == 0;\n    var_30h._0_1_ = 0;\n    var_bp_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (var_18h) {\n        var_28h._0_4_ = *0x1400262c8;\n        var_28h._4_4_ = *0x1400262cc;\n        uStack40 = *0x1400262d0;\n        uStack36 = *0x1400262d4;\n    }\n    uVar1 = fcn.14001388c(param_1, param_2, param_3, &var_40h);\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_bp_10h != '\\0') {\n        iVar2 = fcn.140006250(&var_40h);\n        *(iVar2 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar2 = fcn.140006250(&var_40h);\n        *(iVar2 + 0x24) = var_bp_10h._4_4_;\n    }\n    return uVar1;\n}\n",
        "token_count": 452
    },
    "14001414": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t fcn.140014148(uint64_t arg1, int16_t *arg2, ulong arg3)\n\n{\n    int16_t *piVar1;\n    uint8_t *puVar2;\n    uint8_t uVar3;\n    char cVar4;\n    char cVar5;\n    int32_t iVar6;\n    uint *puVar7;\n    uint64_t uVar8;\n    int16_t *lpMem;\n    ulong uVar9;\n    int16_t *piVar10;\n    int16_t iVar11;\n    uint32_t uVar12;\n    int32_t iVar13;\n    uint64_t uVar14;\n    int64_t iVar15;\n    int16_t *piVar16;\n    uint32_t auStackX32 [2];\n    uchar auStack104 [8];\n    ulong uStack96;\n    uint64_t uStack88;\n    uint64_t uStack80;\n    int16_t *piStack72;\n    \n    uVar12 = arg1;\n    if (uVar12 == 0xfffffffe) {\n        puVar7 = fcn.1400096d4(arg1);\n        *puVar7 = 0;\n        puVar7 = fcn.1400096f4();\n        *puVar7 = 9;\n        return -1;\n    }\n    if ((-1 < uVar12) && (uVar12 < *0x140027950)) {\n        uVar8 = uVar12 & 0x3f;\n        uStack80 = 1;\n        uStack88 = uVar12 >> 6;\n        iVar15 = *(uStack88 * 8 + 0x140027550);\n        uVar3 = *(iVar15 + 0x38 + uVar8 * 0x48);\n        if ((uVar3 & 1) != 0) {\n            if (arg3 < 0x80000000) {\n                if ((arg3 == 0) || ((uVar3 & 2) != 0)) {\n                    return 0;\n                }\n                if (arg2 != NULL) {\n                    cVar5 = *(iVar15 + 0x39 + uVar8 * 0x48);\n                    lpMem = NULL;\n                    uStack96 = *(iVar15 + 0x28 + uVar8 * 0x48);\n                    uVar12 = cVar5 - 1;\n                    if (uVar12 == 0) {\n                        if ((~arg3 & 1) == 0) goto code_r0x00014001423e;\n                        uVar12 = arg3 >> 1;\n                        if (arg3 >> 1 < 4) {\n                            uVar12 = 4;\n                        }\n                        uVar14 = uVar12;\n                        lpMem = fcn.14000d2c8(uVar14);\n                        fcn.14000ae8c(0);\n                        uVar9 = 0;\n                        fcn.14000ae8c(0);\n                        if (lpMem != NULL) {\n                            uVar9 = fcn.1400139d4(arg1 & 0xffffffff, 0, 1);\n                            *(*(uStack88 * 8 + 0x140027550) + 0x30 + uVar8 * 0x48) = uVar9;\n                            iVar15 = *(uStack88 * 8 + 0x140027550);\n                            piStack72 = lpMem;\n                            goto code_r0x0001400142e1;\n                        }\n                        puVar7 = fcn.1400096f4();\n                        *puVar7 = 0xc;\n                        puVar7 = fcn.1400096d4(uVar9);\n                        *puVar7 = 8;\n                    }\n                    else if ((uVar12 == 1) && ((~arg3 & 1) == 0)) {\ncode_r0x00014001423e:\n                        puVar7 = fcn.1400096d4(uVar12);\n                        *puVar7 = 0;\n                        puVar7 = fcn.1400096f4();\n                        *puVar7 = 0x16;\n                        fcn.1400095b8();\n                    }\n                    else {\n                        uVar14 = arg3;\n                        piStack72 = arg2;\ncode_r0x0001400142e1:\n                        piVar16 = piStack72;\n                        iVar13 = 0;\n                        if ((((*(iVar15 + 0x38 + uVar8 * 0x48) & 0x48) != 0) &&\n                            (cVar4 = *(iVar15 + 0x3a + uVar8 * 0x48),  iVar13 = 0,  cVar4 != '\\n')) &&\n                           (iVar6 = uVar14,  iVar6 != 0)) {\n                            *piStack72 = cVar4;\n                            piVar16 = piStack72 + 1;\n                            uVar14 = iVar6 - 1U;\n                            iVar13 = 1;\n                            *(*(uStack88 * 8 + 0x140027550) + 0x3a + uVar8 * 0x48) = 10;\n                            if (((cVar5 != '\\0') &&\n                                (cVar4 = *(*(uStack88 * 8 + 0x140027550) + 0x3b + uVar8 * 0x48),  cVar4 != '\\n')) &&\n                               (iVar6 - 1U != 0)) {\n                                *piVar16 = cVar4;\n                                iVar13 = 2;\n                                piVar16 = piStack72 + 1;\n                                uVar14 = iVar6 - 2U;\n                                *(*(uStack88 * 8 + 0x140027550) + 0x3b + uVar8 * 0x48) = 10;\n                                if (((cVar5 == '\\x01') &&\n                                    (cVar4 = *(*(uStack88 * 8 + 0x140027550) + 0x3c + uVar8 * 0x48),  cVar4 != '\\n')) &&\n                                   (iVar6 - 2U != 0)) {\n                                    *piVar16 = cVar4;\n                                    iVar13 = 3;\n                                    piVar16 = piStack72 + 3;\n                                    uVar14 = iVar6 - 3;\n                                    *(*(uStack88 * 8 + 0x140027550) + 0x3c + uVar8 * 0x48) = 10;\n                                }\n                            }\n                        }\n                        iVar6 = fcn.140013704(arg1 & 0xffffffff);\n                        if (((iVar6 == 0) || (-1 < *(*(uStack88 * 8 + 0x140027550) + 0x38 + uVar8 * 0x48))) ||\n                           (iVar6 = (*_sym.imp.KERNEL32.dll_GetConsoleMode)(uStack96, auStack104),  iVar6 == 0)) {\n                            uStack80 = uStack80 & 0xffffffffffffff00;\ncode_r0x000140014414:\n                            uVar9 = uStack96;\n                            iVar6 = (*_sym.imp.KERNEL32.dll_ReadFile)(uStack96, piVar16, uVar14, auStackX32, 0);\n                            if ((iVar6 != 0) && (auStackX32[0] <= arg3)) {\ncode_r0x000140014450:\n                                iVar13 = iVar13 + auStackX32[0];\n                                if (*(*(uStack88 * 8 + 0x140027550) + 0x38 + uVar8 * 0x48) < '\\0') {\n                                    uVar14 = iVar13;\n                                    if (cVar5 == '\\x02') {\n                                        if (uStack80 == '\\0') {\n                                            iVar13 = fcn.140013c9c(arg1 & 0xffffffff, piStack72, uVar14 >> 1);\n                                        }\n                                        else {\n                                            piVar1 = piStack72 + (uVar14 & 0xfffffffffffffffe);\n                                            piVar16 = piStack72;\n                                            for (piVar10 = piStack72; piVar10 < piVar1; piVar10 = piVar10 + iVar15) {\n                                                iVar11 = *piVar10;\n                                                if (iVar11 == 0x1a) {\n                                                    puVar2 = *(uStack88 * 8 + 0x140027550) + 0x38 + uVar8 * 0x48;\n                                                    *puVar2 = *puVar2 | 2;\n                                                    break;\n                                                }\n                                                if (((iVar11 == 0xd) && (piVar10 + 1 < piVar1)) && (piVar10[1] == 10)) {\n                                                    iVar11 = 10;\n                                                    iVar15 = 4;\n                                                }\n                                                else {\n                                                    iVar15 = 2;\n                                                }\n                                                *piVar16 = iVar11;\n                                                piVar16 = piVar16 + 1;\n                                            }\n                                            iVar13 = (piVar16 - piStack72 >> 1) * 2;\n                                        }\n                                    }\n                                    else {\n                                        iVar13 = fcn.140013e74(arg1 & 0xffffffff, piVar16, uVar14, arg2);\n                                    }\n                                }\n                                goto code_r0x0001400143f4;\n                            }\n                            uVar12 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                            if (uVar12 != 5) {\n                                if (uVar12 == 0x6d) {\n                                    iVar13 = 0;\n                                    goto code_r0x0001400143f4;\n                                }\n                                goto code_r0x0001400143ea;\n                            }\n                            puVar7 = fcn.1400096f4();\n                            *puVar7 = 9;\n                            puVar7 = fcn.1400096d4(uVar9);\n                            *puVar7 = 5;\n                        }\n                        else {\n                            if (cVar5 != '\\x02') goto code_r0x000140014414;\n                            iVar6 = (*_sym.imp.KERNEL32.dll_ReadConsoleW)(uStack96, piVar16, uVar14 >> 1, auStackX32, 0)\n                            ;\n                            if (iVar6 != 0) {\n                                auStackX32[0] = auStackX32[0] * 2;\n                                goto code_r0x000140014450;\n                            }\n                            uVar12 = (*_sym.imp.KERNEL32.dll_GetLastError)();\ncode_r0x0001400143ea:\n                            fcn.140009668(uVar12);\n                        }\n                    }\n                    iVar13 = -1;\ncode_r0x0001400143f4:\n                    fcn.14000ae8c(lpMem);\n                    return iVar13;\n                }\n            }\n            puVar7 = fcn.1400096d4(arg1);\n            *puVar7 = 0;\n            puVar7 = fcn.1400096f4();\n            *puVar7 = 0x16;\n            goto code_r0x00014001457a;\n        }\n    }\n    puVar7 = fcn.1400096d4(arg1);\n    *puVar7 = 0;\n    puVar7 = fcn.1400096f4();\n    *puVar7 = 9;\ncode_r0x00014001457a:\n    fcn.1400095b8();\n    return -1;\n}\n",
        "token_count": 2504
    },
    "14001460": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint fcn.140014600(char *arg1, uint64_t arg2, ulong arg3, int32_t *arg4)\n\n{\n    char *pcVar1;\n    int64_t iVar2;\n    char cVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    char *pcVar6;\n    uint uVar7;\n    char *pcVar8;\n    char *pcVar9;\n    int64_t iVar10;\n    bool bVar11;\n    int32_t in_stack_00000028;\n    int32_t in_stack_00000030;\n    int64_t in_stack_00000038;\n    \n    if ((arg1 != NULL) && (arg2 != 0)) {\n        *arg1 = '\\0';\n        iVar4 = 0;\n        if (0 < arg3) {\n            iVar4 = arg3;\n        }\n        if (arg2 <= iVar4 + 1) {\n            uVar7 = 0x22;\n            goto code_r0x00014001462d;\n        }\n        if (arg4 != NULL) {\n            pcVar1 = *(arg4 + 2);\n            pcVar8 = arg1 + 1;\n            *arg1 = '0';\n            pcVar9 = pcVar1;\n            for (; 0 < arg3; arg3._0_4_ = arg3 + -1) {\n                cVar3 = *pcVar9;\n                if (cVar3 == '\\0') {\n                    cVar3 = '0';\n                }\n                else {\n                    pcVar9 = pcVar9 + 1;\n                }\n                *pcVar8 = cVar3;\n                pcVar8 = pcVar8 + 1;\n            }\n            *pcVar8 = '\\0';\n            if (arg3 < 0) goto code_r0x000140014737;\n            iVar4 = *arg4;\n            if (in_stack_00000030 == 0) {\n                bVar11 = '4' < *pcVar9;\ncode_r0x0001400146fd:\n                bVar11 = bVar11 == false;\ncode_r0x000140014710:\n                if (bVar11) goto code_r0x000140014737;\n            }\n            else {\n                iVar5 = fcn.140015ee4();\n                if (iVar5 == 0) {\n                    if (*pcVar9 < '6') {\n                        if (*pcVar9 < '5') goto code_r0x000140014737;\n                        pcVar6 = pcVar9;\n                        if (in_stack_00000028 != 0) {\n                            do {\n                                pcVar6 = pcVar6 + 1;\n                            } while (*pcVar6 == '0');\n                            if (*pcVar6 == '\\0') {\n                                if (pcVar9 == pcVar1) goto code_r0x000140014737;\n                                bVar11 = pcVar9[-1] & 1;\n                                goto code_r0x0001400146fd;\n                            }\n                        }\n                    }\n                }\n                else {\n                    if (iVar5 == 0x200) {\n                        if (*pcVar9 == '0') goto code_r0x000140014737;\n                        bVar11 = iVar4 == 0x2d;\n                        goto code_r0x000140014710;\n                    }\n                    if (((iVar5 != 0x100) || (*pcVar9 == '0')) || (iVar4 != 0x2d)) goto code_r0x000140014737;\n                }\n            }\n            while( true ) {\n                pcVar8 = pcVar8 + -1;\n                if (*pcVar8 != '9') break;\n                *pcVar8 = '0';\n            }\n            *pcVar8 = *pcVar8 + '\\x01';\ncode_r0x000140014737:\n            if (*arg1 == '1') {\n                arg4[1] = arg4[1] + 1;\n            }\n            else {\n                iVar2 = -1;\n                do {\n                    iVar10 = iVar2;\n                    iVar2 = iVar10 + 1;\n                } while (arg1[iVar10 + 2] != '\\0');\n                fcn.140002f80(arg1, arg1 + 1, iVar10 + 2);\n            }\n            return 0;\n        }\n    }\n    uVar7 = 0x16;\ncode_r0x00014001462d:\n    *(in_stack_00000038 + 0x2c) = uVar7;\n    *(in_stack_00000038 + 0x30) = 1;\n    fcn.1400094e8(0, 0, 0, 0);\n    return uVar7;\n}\n",
        "token_count": 1022
    },
    "1400169c": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint8_t * fcn.1400169c8(uint8_t *arg1, uint8_t *arg2)\n\n{\n    uint *puVar1;\n    uint8_t *puVar2;\n    int64_t aiStack40 [2];\n    int64_t iStack24;\n    char cStack16;\n    \n    if ((arg1 == NULL) || (arg2 == NULL)) {\n        puVar1 = fcn.1400096f4();\n        *puVar1 = 0x16;\n        fcn.1400095b8();\n    }\n    else if (arg1 < arg2) {\n        fcn.140008b7c(aiStack40, 0);\n        puVar2 = arg2 + -1;\n        if (*(iStack24 + 8) != 0) {\n            do {\n                puVar2 = puVar2 + -1;\n                if (puVar2 < arg1) break;\n            } while ((*(*puVar2 + 0x19 + iStack24) & 4) != 0);\n            puVar2 = arg2 + (-1 - (arg2 - puVar2 & 1));\n        }\n        if (cStack16 == '\\0') {\n            return puVar2;\n        }\n        *(aiStack40[0] + 0x3a8) = *(aiStack40[0] + 0x3a8) & 0xfffffffd;\n        return puVar2;\n    }\n    return NULL;\n}\n",
        "token_count": 322
    },
    "140016d3": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.140016d34(ulong param_1, ulong param_2)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_28h;\n    uint uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_bp_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_18h._0_1_ = *0x1400274f8 == 0;\n    var_30h._0_1_ = 0;\n    var_bp_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (var_18h) {\n        var_28h._0_4_ = *0x1400262c8;\n        var_28h._4_4_ = *0x1400262cc;\n        uStack40 = *0x1400262d0;\n        uStack36 = *0x1400262d4;\n    }\n    uVar1 = fcn.140016dcc(param_1, param_2, &var_40h);\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_bp_10h != '\\0') {\n        iVar2 = fcn.140006250(&var_40h);\n        *(iVar2 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar2 = fcn.140006250(&var_40h);\n        *(iVar2 + 0x24) = var_bp_10h._4_4_;\n    }\n    return uVar1;\n}\n",
        "token_count": 441
    },
    "14001818": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint32_t fcn.14001818c(ulong arg1, ulong arg2)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint64_t arg1_00;\n    uint32_t uVar3;\n    \n    uVar1 = fcn.140018800();\n    uVar3 = uVar1 >> 3 & 0x10;\n    uVar2 = uVar3 | 8;\n    if ((uVar1 & 0x200) == 0) {\n        uVar2 = uVar3;\n    }\n    uVar3 = uVar2 | 4;\n    if ((uVar1 & 0x400) == 0) {\n        uVar3 = uVar2;\n    }\n    uVar2 = uVar3 | 2;\n    if ((uVar1 & 0x800) == 0) {\n        uVar2 = uVar3;\n    }\n    uVar3 = uVar2 | 1;\n    if ((uVar1 & 0x1000) == 0) {\n        uVar3 = uVar2;\n    }\n    uVar2 = uVar3 | 0x80000;\n    if ((uVar1 & 0x100) == 0) {\n        uVar2 = uVar3;\n    }\n    uVar3 = uVar1 & 0x6000;\n    if (uVar3 != 0) {\n        if (uVar3 == 0x2000) {\n            uVar2 = uVar2 | 0x100;\n        }\n        else if (uVar3 == 0x4000) {\n            uVar2 = uVar2 | 0x200;\n        }\n        else if (uVar3 == 0x6000) {\n            uVar2 = uVar2 | 0x300;\n        }\n    }\n    uVar1 = uVar1 & 0x8040;\n    if (uVar1 == 0x40) {\n        uVar2 = uVar2 | 0x2000000;\n    }\n    else if (uVar1 == 0x8000) {\n        uVar2 = uVar2 | 0x3000000;\n    }\n    else if (uVar1 == 0x8040) {\n        uVar2 = uVar2 | 0x1000000;\n    }\n    uVar1 = ~(arg2 & 0x308031f) & uVar2 | arg1 & arg2 & 0x308031f;\n    if (uVar1 != uVar2) {\n        uVar3 = (uVar1 & 0x10) << 3;\n        uVar2 = uVar3 | 0x200;\n        if ((uVar1 & 8) == 0) {\n            uVar2 = uVar3;\n        }\n        uVar3 = uVar2 | 0x400;\n        if ((uVar1 & 4) == 0) {\n            uVar3 = uVar2;\n        }\n        uVar2 = uVar3 | 0x800;\n        if ((uVar1 & 2) == 0) {\n            uVar2 = uVar3;\n        }\n        uVar3 = uVar2 | 0x1000;\n        if ((uVar1 & 1) == 0) {\n            uVar3 = uVar2;\n        }\n        uVar2 = uVar3 | 0x100;\n        if ((uVar1 & 0x80000) == 0) {\n            uVar2 = uVar3;\n        }\n        arg1_00 = uVar2;\n        uVar3 = uVar1 & 0x300;\n        if (uVar3 != 0) {\n            if (uVar3 == 0x100) {\n                arg1_00 = uVar2 | 0x2000;\n            }\n            else if (uVar3 == 0x200) {\n                arg1_00 = uVar2 | 0x4000;\n            }\n            else if (uVar3 == 0x300) {\n                arg1_00 = uVar2 | 0x6000;\n            }\n        }\n        uVar1 = uVar1 & 0x3000000;\n        uVar2 = arg1_00;\n        if (uVar1 == 0x1000000) {\n            arg1_00 = uVar2 | 0x8040;\n        }\n        else if (uVar1 == 0x2000000) {\n            arg1_00 = uVar2 | 0x40;\n        }\n        else if (uVar1 == 0x3000000) {\n            arg1_00 = uVar2 | 0x8000;\n        }\n        if ((*0x140026a30 == '\\0') || ((arg1_00 & 0x40) == 0)) {\n            arg1_00 = arg1_00 & 0xffffffbf;\n            fcn.140018810(arg1_00);\n        }\n        else {\n            fcn.140018810(arg1_00);\n        }\n        uVar1 = arg1_00 >> 3 & 0x10;\n        uVar2 = uVar1 | 8;\n        if ((arg1_00 & 0x200) == 0) {\n            uVar2 = uVar1;\n        }\n        uVar1 = uVar2 | 4;\n        if ((arg1_00 & 0x400) == 0) {\n            uVar1 = uVar2;\n        }\n        uVar2 = uVar1 | 2;\n        if ((arg1_00 & 0x800) == 0) {\n            uVar2 = uVar1;\n        }\n        uVar1 = uVar2 | 1;\n        if ((arg1_00 & 0x1000) == 0) {\n            uVar1 = uVar2;\n        }\n        uVar2 = uVar1 | 0x80000;\n        if ((arg1_00 & 0x100) == 0) {\n            uVar2 = uVar1;\n        }\n        uVar1 = arg1_00 & 0x6000;\n        if ((arg1_00 & 0x6000) != 0) {\n            if (uVar1 == 0x2000) {\n                uVar2 = uVar2 | 0x100;\n            }\n            else if (uVar1 == 0x4000) {\n                uVar2 = uVar2 | 0x200;\n            }\n            else if (uVar1 == 0x6000) {\n                uVar2 = uVar2 | 0x300;\n            }\n        }\n        uVar1 = arg1_00 & 0x8040;\n        if (uVar1 == 0x40) {\n            uVar2 = uVar2 | 0x2000000;\n        }\n        else if (uVar1 == 0x8000) {\n            uVar2 = uVar2 | 0x3000000;\n        }\n        else if (uVar1 == 0x8040) {\n            uVar2 = uVar2 | 0x1000000;\n        }\n    }\n    return uVar2;\n}\n",
        "token_count": 1602
    },
    "140018f6": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuchar (*) [16] fcn.140018f68(uchar (*arg1) [16], ulong arg2)\n\n{\n    uint16_t uVar1;\n    uint32_t uVar2;\n    uchar (*pauVar3) [16];\n    int32_t iVar4;\n    char *pcVar5;\n    char *pcVar6;\n    uint32_t uVar7;\n    bool bVar8;\n    bool bVar9;\n    char cVar10;\n    char cVar12;\n    char cVar13;\n    char cVar14;\n    uchar auVar11 [16];\n    uchar in_XMM1 [16];\n    uchar auVar16 [16];\n    uint8_t uVar15;\n    \n    pauVar3 = NULL;\n    if (arg2 == 0) {\n        pcVar5 = arg1 & 0xfffffffffffffff0;\n        auVar11 = ZEXT416(CONCAT13(-(pcVar5[3] == '\\0'), \n                                   CONCAT12(-(pcVar5[2] == '\\0'), CONCAT11(-(pcVar5[1] == '\\0'), -(*pcVar5 == '\\0')))))\n                  & 0xffffffffffffffff;\n        uVar15 = -(SUB161(auVar11 >> 0x78, 0) == pcVar5[0xf]);\n        auVar11 = CONCAT115(uVar15, CONCAT114(-(SUB161(auVar11 >> 0x70, 0) == pcVar5[0xe]), \n                                              CONCAT113(-(SUB161(auVar11 >> 0x68, 0) == pcVar5[0xd]), \n                                                        CONCAT112(-(SUB161(auVar11 >> 0x60, 0) == pcVar5[0xc]), \n                                                                  CONCAT111(-(SUB161(auVar11 >> 0x58, 0) == pcVar5[0xb])\n                                                                            , CONCAT110(-(SUB161(auVar11 >> 0x50, 0) ==\n                                                                                         pcVar5[10]), \n                                                                                        CONCAT19(-(SUB161(auVar11 >>\n                                                                                                          0x48, 0) ==\n                                                                                                  pcVar5[9]), \n                                                                                                 CONCAT18(-(SUB161(\n                                                            auVar11 >> 0x40, 0) == pcVar5[8]), \n                                                            CONCAT17(-(pcVar5[7] == '\\0'), \n                                                                     CONCAT16(-(pcVar5[6] == '\\0'), \n                                                                              CONCAT15(-(pcVar5[5] == '\\0'), \n                                                                                       CONCAT14(-(pcVar5[4] == '\\0'), \n                                                                                                SUB164(auVar11, 0)))))))\n                                                            ))))));\n        uVar2 = (SUB161(auVar11 >> 7, 0) & 1 | (SUB161(auVar11 >> 0xf, 0) & 1) << 1 |\n                 (SUB161(auVar11 >> 0x17, 0) & 1) << 2 | (SUB161(auVar11 >> 0x1f, 0) & 1) << 3 |\n                 (SUB161(auVar11 >> 0x27, 0) & 1) << 4 | (SUB161(auVar11 >> 0x2f, 0) & 1) << 5 |\n                 (SUB161(auVar11 >> 0x37, 0) & 1) << 6 | (SUB161(auVar11 >> 0x3f, 0) & 1) << 7 |\n                 (SUB161(auVar11 >> 0x47, 0) & 1) << 8 | (SUB161(auVar11 >> 0x4f, 0) & 1) << 9 |\n                 (SUB161(auVar11 >> 0x57, 0) & 1) << 10 | (SUB161(auVar11 >> 0x5f, 0) & 1) << 0xb |\n                 (SUB161(auVar11 >> 0x67, 0) & 1) << 0xc | (SUB161(auVar11 >> 0x6f, 0) & 1) << 0xd |\n                 (SUB161(auVar11 >> 0x77, 0) & 1) << 0xe | (uVar15 >> 7) << 0xf) & -1 << (arg1 & 0xf);\n        pcVar6 = pcVar5;\n        if (uVar2 == 0) {\n            do {\n                pcVar5 = pcVar6 + 0x10;\n                auVar11 = ZEXT416(CONCAT13(-(pcVar6[0x13] == '\\0'), \n                                           CONCAT12(-(pcVar6[0x12] == '\\0'), \n                                                    CONCAT11(-(pcVar6[0x11] == '\\0'), -(*pcVar5 == '\\0'))))) &\n                          0xffffffffffffffff;\n                uVar15 = -(SUB161(auVar11 >> 0x78, 0) == pcVar6[0x1f]);\n                auVar11 = CONCAT115(uVar15, CONCAT114(-(SUB161(auVar11 >> 0x70, 0) == pcVar6[0x1e]), \n                                                      CONCAT113(-(SUB161(auVar11 >> 0x68, 0) == pcVar6[0x1d]), \n                                                                CONCAT112(-(SUB161(auVar11 >> 0x60, 0) == pcVar6[0x1c])\n                                                                          , CONCAT111(-(SUB161(auVar11 >> 0x58, 0) ==\n                                                                                       pcVar6[0x1b]), \n                                                                                      CONCAT110(-(SUB161(auVar11 >> 0x50\n                                                                                                         , 0) ==\n                                                                                                 pcVar6[0x1a]), \n                                                                                                CONCAT19(-(SUB161(\n                                                            auVar11 >> 0x48, 0) == pcVar6[0x19]), \n                                                            CONCAT18(-(SUB161(auVar11 >> 0x40, 0) == pcVar6[0x18]), \n                                                                     CONCAT17(-(pcVar6[0x17] == '\\0'), \n                                                                              CONCAT16(-(pcVar6[0x16] == '\\0'), \n                                                                                       CONCAT15(-(pcVar6[0x15] == '\\0')\n                                                                                                , CONCAT14(-(pcVar6[0x14\n                                                            ] == '\\0'), SUB164(auVar11, 0)))))))))))));\n                uVar1 = SUB161(auVar11 >> 7, 0) & 1 | (SUB161(auVar11 >> 0xf, 0) & 1) << 1 |\n                        (SUB161(auVar11 >> 0x17, 0) & 1) << 2 | (SUB161(auVar11 >> 0x1f, 0) & 1) << 3 |\n                        (SUB161(auVar11 >> 0x27, 0) & 1) << 4 | (SUB161(auVar11 >> 0x2f, 0) & 1) << 5 |\n                        (SUB161(auVar11 >> 0x37, 0) & 1) << 6 | (SUB161(auVar11 >> 0x3f, 0) & 1) << 7 |\n                        (SUB161(auVar11 >> 0x47, 0) & 1) << 8 | (SUB161(auVar11 >> 0x4f, 0) & 1) << 9 |\n                        (SUB161(auVar11 >> 0x57, 0) & 1) << 10 | (SUB161(auVar11 >> 0x5f, 0) & 1) << 0xb |\n                        (SUB161(auVar11 >> 0x67, 0) & 1) << 0xc | (SUB161(auVar11 >> 0x6f, 0) & 1) << 0xd |\n                        (SUB161(auVar11 >> 0x77, 0) & 1) << 0xe | (uVar15 >> 7) << 0xf;\n                uVar2 = uVar1;\n                pcVar6 = pcVar5;\n            } while (uVar1 == 0);\n        }\n        uVar7 = 0;\n        if (uVar2 != 0) {\n            for (; (uVar2 >> uVar7 & 1) == 0; uVar7 = uVar7 + 1) {\n            }\n        }\n        pauVar3 = pcVar5 + uVar7;\n    }\n    else if (*0x140026020 < 2) {\n        pcVar5 = arg1 & 0xfffffffffffffff0;\n        uVar15 = arg1 & 0xf;\n        auVar16 = pshuflw(in_XMM1, ZEXT416((arg2 & 0xff) << 8 | arg2 & 0xff), 0);\n        auVar11 = CONCAT115(-(pcVar5[0xf] == '\\0'), \n                            CONCAT114(-(pcVar5[0xe] == '\\0'), \n                                      CONCAT113(-(pcVar5[0xd] == '\\0'), \n                                                CONCAT112(-(pcVar5[0xc] == '\\0'), \n                                                          CONCAT111(-(pcVar5[0xb] == '\\0'), \n                                                                    CONCAT110(-(pcVar5[10] == '\\0'), \n                                                                              CONCAT19(-(pcVar5[9] == '\\0'), \n                                                                                       CONCAT18(-(pcVar5[8] == '\\0'), \n                                                                                                CONCAT17(-(pcVar5[7] ==\n                                                                                                          '\\0'), \n                                                            CONCAT16(-(pcVar5[6] == '\\0'), \n                                                                     CONCAT15(-(pcVar5[5] == '\\0'), \n                                                                              CONCAT14(-(pcVar5[4] == '\\0'), \n                                                                                       CONCAT13(-(pcVar5[3] == '\\0'), \n                                                                                                CONCAT12(-(pcVar5[2] ==\n                                                                                                          '\\0'), \n                                                            CONCAT11(-(pcVar5[1] == '\\0'), -(*pcVar5 == '\\0'))))))))))))\n                                                         ))));\n        cVar10 = SUB161(auVar16, 0);\n        cVar12 = SUB161(auVar16 >> 8, 0);\n        cVar13 = SUB161(auVar16 >> 0x10, 0);\n        cVar14 = SUB161(auVar16 >> 0x18, 0);\n        auVar16 = CONCAT115(-(cVar14 == pcVar5[0xf]), \n                            CONCAT114(-(cVar13 == pcVar5[0xe]), \n                                      CONCAT113(-(cVar12 == pcVar5[0xd]), \n                                                CONCAT112(-(cVar10 == pcVar5[0xc]), \n                                                          CONCAT111(-(cVar14 == pcVar5[0xb]), \n                                                                    CONCAT110(-(cVar13 == pcVar5[10]), \n                                                                              CONCAT19(-(cVar12 == pcVar5[9]), \n                                                                                       CONCAT18(-(cVar10 == pcVar5[8]), \n                                                                                                CONCAT17(-(cVar14 ==\n                                                                                                          pcVar5[7]), \n                                                                                                         CONCAT16(-(\n                                                            cVar13 == pcVar5[6]), \n                                                            CONCAT15(-(cVar12 == pcVar5[5]), \n                                                                     CONCAT14(-(cVar10 == pcVar5[4]), \n                                                                              CONCAT13(-(cVar14 == pcVar5[3]), \n                                                                                       CONCAT12(-(cVar13 == pcVar5[2]), \n                                                                                                CONCAT11(-(cVar12 ==\n                                                                                                          pcVar5[1]), \n                                                                                                         -(cVar10 ==\n                                                                                                          *pcVar5)))))))\n                                                            )))))))));\n        uVar2 = (SUB161(auVar16 >> 7, 0) & 1 | (SUB161(auVar16 >> 0xf, 0) & 1) << 1 |\n                 (SUB161(auVar16 >> 0x17, 0) & 1) << 2 | (SUB161(auVar16 >> 0x1f, 0) & 1) << 3 |\n                 (SUB161(auVar16 >> 0x27, 0) & 1) << 4 | (SUB161(auVar16 >> 0x2f, 0) & 1) << 5 |\n                 (SUB161(auVar16 >> 0x37, 0) & 1) << 6 | (SUB161(auVar16 >> 0x3f, 0) & 1) << 7 |\n                 (SUB161(auVar16 >> 0x47, 0) & 1) << 8 | (SUB161(auVar16 >> 0x4f, 0) & 1) << 9 |\n                 (SUB161(auVar16 >> 0x57, 0) & 1) << 10 | (SUB161(auVar16 >> 0x5f, 0) & 1) << 0xb |\n                 (SUB161(auVar16 >> 0x67, 0) & 1) << 0xc | (SUB161(auVar16 >> 0x6f, 0) & 1) << 0xd |\n                 (SUB161(auVar16 >> 0x77, 0) & 1) << 0xe | (-(cVar14 == pcVar5[0xf]) >> 7) << 0xf) & -1 << uVar15;\n        uVar7 = (SUB161(auVar11 >> 7, 0) & 1 | (SUB161(auVar11 >> 0xf, 0) & 1) << 1 |\n                 (SUB161(auVar11 >> 0x17, 0) & 1) << 2 | (SUB161(auVar11 >> 0x1f, 0) & 1) << 3 |\n                 (SUB161(auVar11 >> 0x27, 0) & 1) << 4 | (SUB161(auVar11 >> 0x2f, 0) & 1) << 5 |\n                 (SUB161(auVar11 >> 0x37, 0) & 1) << 6 | (SUB161(auVar11 >> 0x3f, 0) & 1) << 7 |\n                 (SUB161(auVar11 >> 0x47, 0) & 1) << 8 | (SUB161(auVar11 >> 0x4f, 0) & 1) << 9 |\n                 (SUB161(auVar11 >> 0x57, 0) & 1) << 10 | (SUB161(auVar11 >> 0x5f, 0) & 1) << 0xb |\n                 (SUB161(auVar11 >> 0x67, 0) & 1) << 0xc | (SUB161(auVar11 >> 0x6f, 0) & 1) << 0xd |\n                 (SUB161(auVar11 >> 0x77, 0) & 1) << 0xe | (-(pcVar5[0xf] == '\\0') >> 7) << 0xf) & -1 << uVar15;\n        pcVar6 = pcVar5;\n        if (uVar7 == 0) {\n            do {\n                uVar7 = 0x1f;\n                if (uVar2 != 0) {\n                    for (; uVar2 >> uVar7 == 0; uVar7 = uVar7 - 1) {\n                    }\n                }\n                if (uVar2 != 0) {\n                    pauVar3 = pcVar6 + uVar7;\n                }\n                pcVar5 = pcVar6 + 0x10;\n                auVar11 = ZEXT416(CONCAT13(-(pcVar6[0x13] == '\\0'), \n                                           CONCAT12(-(pcVar6[0x12] == '\\0'), \n                                                    CONCAT11(-(pcVar6[0x11] == '\\0'), -(*pcVar5 == '\\0'))))) &\n                          0xffffffffffffffff;\n                uVar15 = -(SUB161(auVar11 >> 0x78, 0) == pcVar6[0x1f]);\n                auVar16 = CONCAT115(uVar15, CONCAT114(-(SUB161(auVar11 >> 0x70, 0) == pcVar6[0x1e]), \n                                                      CONCAT113(-(SUB161(auVar11 >> 0x68, 0) == pcVar6[0x1d]), \n                                                                CONCAT112(-(SUB161(auVar11 >> 0x60, 0) == pcVar6[0x1c])\n                                                                          , CONCAT111(-(SUB161(auVar11 >> 0x58, 0) ==\n                                                                                       pcVar6[0x1b]), \n                                                                                      CONCAT110(-(SUB161(auVar11 >> 0x50\n                                                                                                         , 0) ==\n                                                                                                 pcVar6[0x1a]), \n                                                                                                CONCAT19(-(SUB161(\n                                                            auVar11 >> 0x48, 0) == pcVar6[0x19]), \n                                                            CONCAT18(-(SUB161(auVar11 >> 0x40, 0) == pcVar6[0x18]), \n                                                                     CONCAT17(-(pcVar6[0x17] == '\\0'), \n                                                                              CONCAT16(-(pcVar6[0x16] == '\\0'), \n                                                                                       CONCAT15(-(pcVar6[0x15] == '\\0')\n                                                                                                , CONCAT14(-(pcVar6[0x14\n                                                            ] == '\\0'), SUB164(auVar11, 0)))))))))))));\n                auVar11 = CONCAT115(-(cVar14 == pcVar6[0x1f]), \n                                    CONCAT114(-(cVar13 == pcVar6[0x1e]), \n                                              CONCAT113(-(cVar12 == pcVar6[0x1d]), \n                                                        CONCAT112(-(cVar10 == pcVar6[0x1c]), \n                                                                  CONCAT111(-(cVar14 == pcVar6[0x1b]), \n                                                                            CONCAT110(-(cVar13 == pcVar6[0x1a]), \n                                                                                      CONCAT19(-(cVar12 == pcVar6[0x19])\n                                                                                               , CONCAT18(-(cVar10 ==\n                                                                                                           pcVar6[0x18])\n                                                                                                          , CONCAT17(-(\n                                                            cVar14 == pcVar6[0x17]), \n                                                            CONCAT16(-(cVar13 == pcVar6[0x16]), \n                                                                     CONCAT15(-(cVar12 == pcVar6[0x15]), \n                                                                              CONCAT14(-(cVar10 == pcVar6[0x14]), \n                                                                                       CONCAT13(-(cVar14 == pcVar6[0x13]\n                                                                                                 ), CONCAT12(-(cVar13 ==\n                                                                                                              pcVar6[\n                                                            0x12]), CONCAT11(-(cVar12 == pcVar6[0x11]), \n                                                                             -(cVar10 == *pcVar5))))))))))))))));\n                uVar1 = SUB161(auVar16 >> 7, 0) & 1 | (SUB161(auVar16 >> 0xf, 0) & 1) << 1 |\n                        (SUB161(auVar16 >> 0x17, 0) & 1) << 2 | (SUB161(auVar16 >> 0x1f, 0) & 1) << 3 |\n                        (SUB161(auVar16 >> 0x27, 0) & 1) << 4 | (SUB161(auVar16 >> 0x2f, 0) & 1) << 5 |\n                        (SUB161(auVar16 >> 0x37, 0) & 1) << 6 | (SUB161(auVar16 >> 0x3f, 0) & 1) << 7 |\n                        (SUB161(auVar16 >> 0x47, 0) & 1) << 8 | (SUB161(auVar16 >> 0x4f, 0) & 1) << 9 |\n                        (SUB161(auVar16 >> 0x57, 0) & 1) << 10 | (SUB161(auVar16 >> 0x5f, 0) & 1) << 0xb |\n                        (SUB161(auVar16 >> 0x67, 0) & 1) << 0xc | (SUB161(auVar16 >> 0x6f, 0) & 1) << 0xd |\n                        (SUB161(auVar16 >> 0x77, 0) & 1) << 0xe | (uVar15 >> 7) << 0xf;\n                uVar7 = uVar1;\n                uVar2 = SUB161(auVar11 >> 7, 0) & 1 | (SUB161(auVar11 >> 0xf, 0) & 1) << 1 |\n                        (SUB161(auVar11 >> 0x17, 0) & 1) << 2 | (SUB161(auVar11 >> 0x1f, 0) & 1) << 3 |\n                        (SUB161(auVar11 >> 0x27, 0) & 1) << 4 | (SUB161(auVar11 >> 0x2f, 0) & 1) << 5 |\n                        (SUB161(auVar11 >> 0x37, 0) & 1) << 6 | (SUB161(auVar11 >> 0x3f, 0) & 1) << 7 |\n                        (SUB161(auVar11 >> 0x47, 0) & 1) << 8 | (SUB161(auVar11 >> 0x4f, 0) & 1) << 9 |\n                        (SUB161(auVar11 >> 0x57, 0) & 1) << 10 | (SUB161(auVar11 >> 0x5f, 0) & 1) << 0xb |\n                        (SUB161(auVar11 >> 0x67, 0) & 1) << 0xc | (SUB161(auVar11 >> 0x6f, 0) & 1) << 0xd |\n                        (SUB161(auVar11 >> 0x77, 0) & 1) << 0xe | (-(cVar14 == pcVar6[0x1f]) >> 7) << 0xf;\n                pcVar6 = pcVar5;\n            } while (uVar1 == 0);\n        }\n        uVar2 = uVar2 & (-uVar7 & uVar7) - 1;\n        uVar7 = 0x1f;\n        if (uVar2 != 0) {\n            for (; uVar2 >> uVar7 == 0; uVar7 = uVar7 - 1) {\n            }\n        }\n        if (uVar2 != 0) {\n            pauVar3 = pcVar5 + uVar7;\n        }\n    }\n    else {\n        while( true ) {\n            bVar8 = false;\n            bVar9 = (arg1 & 0xf) == 0;\n            if (bVar9) break;\n            if ((*arg1)[0] == arg2) {\n                pauVar3 = arg1;\n            }\n            if ((*arg1)[0] == '\\0') {\n                return pauVar3;\n            }\n            arg1 = *arg1 + 1;\n        }\n        while( true ) {\n            iVar4 = pcmpistri(ZEXT416(arg2 & 0xff), *arg1, 0x40);\n            if (bVar8) {\n                pauVar3 = *arg1 + iVar4;\n                bVar9 = pauVar3 == NULL;\n                pcmpistri(ZEXT416(arg2 & 0xff), *arg1, 0x40);\n            }\n            if (bVar9) break;\n            bVar8 = 0xffffffffffffffef < arg1;\n            arg1 = arg1[1];\n            bVar9 = arg1 == NULL;\n        }\n    }\n    return pauVar3;\n}\n",
        "token_count": 5366
    },
    "1400076e": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint fcn.1400076e4(int64_t arg1)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uint8_t uVar3;\n    int64_t iVar4;\n    \n    iVar4 = *(arg1 + 8);\n    if (*(arg1 + 0x460) == 0) {\n        *(iVar4 + 0x30) = 1;\n        *(iVar4 + 0x2c) = 0x16;\ncode_r0x000140007719:\n        fcn.1400094e8(0, 0, 0, 0);\n    }\n    else {\n        cVar1 = fcn.140008578(*(arg1 + 0x460));\n        if (cVar1 != '\\0') {\n            if (*(arg1 + 0x10) == 0) {\n                iVar4 = *(arg1 + 8);\n                *(iVar4 + 0x30) = 1;\n                *(iVar4 + 0x2c) = 0x16;\n                fcn.1400094e8(0, 0, 0, 0);\n                return 0xffffffff;\n            }\n            *(arg1 + 0x468) = *(arg1 + 0x468) + 1;\n            iVar2 = *(arg1 + 0x468);\n            do {\n                if (iVar2 == 2) {\n                    return *(arg1 + 0x20);\n                }\n                *(arg1 + 0x48) = 0;\n                *(arg1 + 0x24) = 0;\n                cVar1 = **(arg1 + 0x10);\n                *(arg1 + 0x10) = *(arg1 + 0x10) + 1;\n                *(arg1 + 0x39) = cVar1;\n                while ((cVar1 != '\\0' && (-1 < *(arg1 + 0x20)))) {\n                    uVar3 = 0;\n                    if (cVar1 - 0x20U < 0x5b) {\n                        uVar3 = *((cVar1 - 0x20U & 0x7f) * 2 + 0x14001bac1);\n                    }\n                    uVar3 = *((*(arg1 + 0x24) + uVar3 * 8 & 0x7f) * 2 + 0x14001bac0);\n                    *(arg1 + 0x24) = uVar3;\n                    if (7 < uVar3) {\ncode_r0x000140007a58:\n                        iVar4 = *(arg1 + 8);\n                        *(iVar4 + 0x30) = 1;\n                        *(iVar4 + 0x2c) = 0x16;\n                        goto code_r0x000140007719;\n                    }\n                    if (uVar3 == 0) {\n                        iVar4 = *(arg1 + 8);\n                        *(arg1 + 0x4c) = 0;\n                        if (*(iVar4 + 0x28) == '\\0') {\n                            fcn.140008500(iVar4);\n                            cVar1 = *(arg1 + 0x39);\n                        }\n                        if ((-2 < cVar1) && ((*(**(iVar4 + 0x18) + cVar1 * 2) & 0x8000) != 0)) {\n                            if ((((*(*(arg1 + 0x460) + 0x14) >> 0xc & 1) == 0) || (*(*(arg1 + 0x460) + 8) != 0)) &&\n                               (iVar2 = fcn.14000e880(cVar1 & 0xffffffff, *(arg1 + 0x460), *(arg1 + 8)),  iVar2 == -1))\n                            {\n                                *(arg1 + 0x20) = 0xffffffff;\n                            }\n                            else {\n                                *(arg1 + 0x20) = *(arg1 + 0x20) + 1;\n                            }\n                            cVar1 = **(arg1 + 0x10);\n                            *(arg1 + 0x10) = *(arg1 + 0x10) + 1;\n                            *(arg1 + 0x39) = cVar1;\n                            if (cVar1 == '\\0') {\n                                iVar4 = *(arg1 + 8);\n                                *(iVar4 + 0x30) = 1;\n                                *(iVar4 + 0x2c) = 0x16;\n                                fcn.1400094e8(0, 0, 0, 0);\n                                goto code_r0x000140007a58;\n                            }\n                        }\n                        if ((((*(*(arg1 + 0x460) + 0x14) >> 0xc & 1) == 0) || (*(*(arg1 + 0x460) + 8) != 0)) &&\n                           (iVar2 = fcn.14000e880(cVar1, *(arg1 + 0x460), *(arg1 + 8)),  iVar2 == -1)) {\n                            *(arg1 + 0x20) = 0xffffffff;\n                        }\n                        else {\n                            *(arg1 + 0x20) = *(arg1 + 0x20) + 1;\n                        }\n                    }\n                    else if (uVar3 == 1) {\n                        *(arg1 + 0x28) = 0;\n                        *(arg1 + 0x38) = 0;\n                        *(arg1 + 0x30) = 0xffffffff;\n                        *(arg1 + 0x34) = 0;\n                        *(arg1 + 0x4c) = 0;\n                    }\n                    else if (uVar3 == 2) {\n                        if (cVar1 == ' ') {\n                            *(arg1 + 0x28) = *(arg1 + 0x28) | 2;\n                        }\n                        else if (cVar1 == '#') {\n                            *(arg1 + 0x28) = *(arg1 + 0x28) | 0x20;\n                        }\n                        else if (cVar1 == '+') {\n                            *(arg1 + 0x28) = *(arg1 + 0x28) | 1;\n                        }\n                        else if (cVar1 == '-') {\n                            *(arg1 + 0x28) = *(arg1 + 0x28) | 4;\n                        }\n                        else if (cVar1 == '0') {\n                            *(arg1 + 0x28) = *(arg1 + 0x28) | 8;\n                        }\n                    }\n                    else {\n                        if (uVar3 == 3) {\n                            if (cVar1 == '*') {\n                                *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n                                iVar2 = *(*(arg1 + 0x18) + -8);\n                                *(arg1 + 0x2c) = iVar2;\n                                if (iVar2 < 0) {\n                                    *(arg1 + 0x28) = *(arg1 + 0x28) | 4;\n                                    *(arg1 + 0x2c) = -iVar2;\n                                }\ncode_r0x0001400078b1:\n                                cVar1 = '\\x01';\n                            }\n                            else {\n                                iVar4 = arg1 + 0x2c;\ncode_r0x000140007861:\n                                cVar1 = fcn.140007654(arg1, iVar4);\n                            }\n                        }\n                        else {\n                            if (uVar3 == 4) {\n                                *(arg1 + 0x30) = 0;\n                                goto code_r0x0001400079f3;\n                            }\n                            if (uVar3 == 5) {\n                                if (cVar1 == '*') {\n                                    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n                                    iVar2 = *(*(arg1 + 0x18) + -8);\n                                    if (iVar2 < 0) {\n                                        iVar2 = -1;\n                                    }\n                                    *(arg1 + 0x30) = iVar2;\n                                    goto code_r0x0001400078b1;\n                                }\n                                iVar4 = arg1 + 0x30;\n                                goto code_r0x000140007861;\n                            }\n                            if (uVar3 == 6) {\n                                cVar1 = fcn.140007a70(arg1);\n                            }\n                            else {\n                                if (uVar3 != 7) {\n                                    return 0xffffffff;\n                                }\n                                cVar1 = fcn.140007bf4(arg1);\n                            }\n                        }\n                        if (cVar1 == '\\0') {\n                            return 0xffffffff;\n                        }\n                    }\ncode_r0x0001400079f3:\n                    cVar1 = **(arg1 + 0x10);\n                    *(arg1 + 0x10) = *(arg1 + 0x10) + 1;\n                    *(arg1 + 0x39) = cVar1;\n                }\n                *(arg1 + 0x468) = *(arg1 + 0x468) + 1;\n                iVar2 = *(arg1 + 0x468);\n            } while( true );\n        }\n    }\n    return 0xffffffff;\n}\n",
        "token_count": 2045
    },
    "1400083b": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint64_t fcn.1400083b0(int64_t arg1)\n\n{\n    uint64_t *puVar1;\n    int64_t iVar2;\n    uint64_t uVar3;\n    int32_t iVar4;\n    \n    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n    puVar1 = *(*(arg1 + 0x18) + -8);\n    uVar3 = fcn.14000e868();\n    if (uVar3 == 0) goto code_r0x0001400083d3;\n    iVar4 = *(arg1 + 0x34);\n    if (iVar4 < 6) {\n        if (iVar4 != 5) {\n            if (iVar4 != 0) {\n                if (iVar4 == 1) {\n                    uVar3 = uVar3 & 0xffffffffffffff00;\n                    *puVar1 = *(arg1 + 0x20);\n                    goto code_r0x00014000844c;\n                }\n                iVar4 = iVar4 + -2;\n                if (iVar4 == 0) {\n                    uVar3 = *(arg1 + 0x20);\n                    *puVar1 = *(arg1 + 0x20);\n                    goto code_r0x00014000844c;\n                }\n                goto code_r0x00014000843b;\n            }\ncode_r0x00014000845d:\n            uVar3 = *(arg1 + 0x20);\n            *puVar1 = *(arg1 + 0x20);\n            goto code_r0x00014000844c;\n        }\n    }\n    else if (((iVar4 != 6) && (iVar4 != 7)) && (iVar4 = iVar4 + -9,  iVar4 != 0)) {\ncode_r0x00014000843b:\n        if (iVar4 == 1) goto code_r0x00014000845d;\n        if (iVar4 != 2) {\ncode_r0x0001400083d3:\n            iVar2 = *(arg1 + 8);\n            *(iVar2 + 0x30) = 1;\n            *(iVar2 + 0x2c) = 0x16;\n            uVar3 = fcn.1400094e8(0, 0, 0, 0);\n            return uVar3 & 0xffffffffffffff00;\n        }\n    }\n    uVar3 = *(arg1 + 0x20);\n    *puVar1 = uVar3;\ncode_r0x00014000844c:\n    *(arg1 + 0x38) = 1;\n    return CONCAT71(uVar3 >> 8, 1);\n}\n",
        "token_count": 592
    },
    "14000b26": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nulong fcn.14000b26c(ulong arg1, ulong arg2)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    ulong uVar5;\n    uint64_t uVar6;\n    \n    uVar6 = arg1;\n    iVar3 = fcn.140011f5c(uVar6 & 0xffffffff);\n    if (iVar3 != -1) {\n        if (((arg1 == 1) && ((*(*0x140027550 + 200) & 1) != 0)) || ((arg1 == 2 && ((*(*0x140027550 + 0x80) & 1) != 0))))\n        {\n            iVar3 = fcn.140011f5c(2);\n            iVar4 = fcn.140011f5c(1);\n            if (iVar4 == iVar3) goto code_r0x00014000b28e;\n        }\n        fcn.140011f5c(uVar6 & 0xffffffff);\n        iVar1 = (*_sym.imp.KERNEL32.dll_CloseHandle)();\n        if (iVar1 == 0) {\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            goto code_r0x00014000b2ec;\n        }\n    }\ncode_r0x00014000b28e:\n    uVar2 = 0;\ncode_r0x00014000b2ec:\n    fcn.140011ea0(uVar6 & 0xffffffff);\n    *(*((uVar6 >> 6) * 8 + 0x140027550) + 0x38 + (arg1 & 0x3f) * 0x48) = 0;\n    if (uVar2 == 0) {\n        uVar5 = 0;\n    }\n    else {\n        fcn.1400096b0(uVar2, arg2);\n        uVar5 = 0xffffffff;\n    }\n    return uVar5;\n}\n",
        "token_count": 441
    },
    "14000cf4": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint64_t fcn.14000cf44(ulong noname_0, int64_t *arg2, ulong arg3)\n\n{\n    uint32_t uVar1;\n    uint64_t uVar2;\n    int64_t iVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uint64_t uVar6;\n    bool bVar7;\n    uchar auStackX8 [8];\n    \n    auStackX8[0] = noname_0;\n    uVar1 = fcn.14000aec8(arg2);\n    uVar6 = uVar1;\n    if ((*(arg2 + 0x14) & 0xc0) == 0) {\n        uVar2 = fcn.14000cb0c(uVar6 & 0xffffffff, auStackX8, 1, arg3);\n        bVar7 = uVar2 == 1;\n    }\n    else {\n        uVar4 = 0;\n        uVar5 = *arg2 - *(arg2 + 1);\n        *arg2 = arg2[1] + 1;\n        *(arg2 + 2) = *(arg2 + 4) + -1;\n        if (uVar5 < 1) {\n            uVar2 = uVar1 + 2;\n            if (uVar1 + 2 < 2) {\n                iVar3 = 0x1400262e0;\n            }\n            else {\n                uVar2 = *((uVar6 >> 6) * 8 + 0x140027550);\n                iVar3 = uVar2 + (uVar1 & 0x3f) * 0x48;\n            }\n            if (((*(iVar3 + 0x38) & 0x20) != 0) &&\n               (uVar2 = fcn.140013938(uVar6 & 0xffffffff, 0, 2),  uVar2 == 0xffffffffffffffff)) {\n                LOCK();\n                *(arg2 + 0x14) = *(arg2 + 0x14) | 0x10;\n                return 0xffffffffffffff01;\n            }\n        }\n        else {\n            uVar2 = fcn.14000cb0c(uVar6 & 0xffffffff, arg2[1], uVar5, arg3);\n            uVar4 = uVar2;\n        }\n        bVar7 = uVar4 == uVar5;\n        uVar2 = uVar2 & 0xffffffffffffff00;\n        *arg2[1] = auStackX8[0];\n    }\n    return uVar2 & 0xffffffffffffff00 | bVar7;\n}\n",
        "token_count": 577
    },
    "14000e6f": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint32_t fcn.14000e6f0(uint16_t *arg1, uint8_t *arg2, uint64_t arg3, int64_t arg4)\n\n{\n    uint32_t uVar1;\n    int64_t *piVar2;\n    int32_t iVar3;\n    \n    if ((arg2 == NULL) || (arg3 == 0)) {\n        *0x140027538 = 0;\n    }\n    else {\n        if (*arg2 != 0) {\n            if (*(arg4 + 0x28) == '\\0') {\n                fcn.140008500(arg4);\n            }\n            piVar2 = *(arg4 + 0x18);\n            uVar1 = *(piVar2 + 0xc);\n            if (uVar1 != 0xfde9) {\n                if (piVar2[0x27] == 0) {\n                    if (arg1 != NULL) {\n                        *arg1 = *arg2;\n                    }\n                    return 1;\n                }\n                if (*(*piVar2 + *arg2 * 2) < 0) {\n                    if ((((1 < *(piVar2 + 1)) && (*(piVar2 + 1) <= arg3)) &&\n                        (iVar3 = fcn.1400112d0(uVar1, 9),  iVar3 != 0)) ||\n                       ((*(*(arg4 + 0x18) + 8) <= arg3 && (arg2[1] != 0)))) {\n                        return *(*(arg4 + 0x18) + 8);\n                    }\n                }\n                else {\n                    iVar3 = fcn.1400112d0(uVar1, 9);\n                    if (iVar3 != 0) {\n                        return 1;\n                    }\n                }\n                *(arg4 + 0x30) = 1;\n                *(arg4 + 0x2c) = 0x2a;\n                return -1;\n            }\n            iVar3 = fcn.140013a78(arg1);\n            if (iVar3 < 0) {\n                return -1;\n            }\n            return iVar3;\n        }\n        if (arg1 != NULL) {\n            *arg1 = 0;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 491
    },
    "14001071": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.140010714(ulong noname_0, uint32_t *arg2, int64_t **arg3, uint32_t *arg4)\n\n{\n    int32_t iVar1;\n    int32_t *piVar2;\n    uint uVar3;\n    uint uVar4;\n    uint uVar5;\n    uint *puVar6;\n    uint *puVar7;\n    uint *puVar8;\n    int64_t iVar9;\n    \n    fcn.14000f970(*arg2);\n    puVar6 = *(**arg3 + 0x88) + 0x18;\n    if (*0x140027d48 == NULL) {\ncode_r0x0001400107c7:\n        puVar6 = fcn.1400096f4();\n        *puVar6 = 0x16;\n        fcn.1400095b8();\n    }\n    else {\n        if (puVar6 == NULL) {\n            fcn.140003630(*0x140027d48, 0, 0x101);\n            goto code_r0x0001400107c7;\n        }\n        iVar9 = 2;\n        puVar8 = *0x140027d48;\n        do {\n            uVar3 = puVar6[1];\n            uVar4 = puVar6[2];\n            uVar5 = puVar6[3];\n            *puVar8 = *puVar6;\n            puVar8[1] = uVar3;\n            puVar8[2] = uVar4;\n            puVar8[3] = uVar5;\n            uVar3 = puVar6[5];\n            uVar4 = puVar6[6];\n            uVar5 = puVar6[7];\n            puVar8[4] = puVar6[4];\n            puVar8[5] = uVar3;\n            puVar8[6] = uVar4;\n            puVar8[7] = uVar5;\n            uVar3 = puVar6[9];\n            uVar4 = puVar6[10];\n            uVar5 = puVar6[0xb];\n            puVar8[8] = puVar6[8];\n            puVar8[9] = uVar3;\n            puVar8[10] = uVar4;\n            puVar8[0xb] = uVar5;\n            uVar3 = puVar6[0xd];\n            uVar4 = puVar6[0xe];\n            uVar5 = puVar6[0xf];\n            puVar8[0xc] = puVar6[0xc];\n            puVar8[0xd] = uVar3;\n            puVar8[0xe] = uVar4;\n            puVar8[0xf] = uVar5;\n            uVar3 = puVar6[0x11];\n            uVar4 = puVar6[0x12];\n            uVar5 = puVar6[0x13];\n            puVar8[0x10] = puVar6[0x10];\n            puVar8[0x11] = uVar3;\n            puVar8[0x12] = uVar4;\n            puVar8[0x13] = uVar5;\n            uVar3 = puVar6[0x15];\n            uVar4 = puVar6[0x16];\n            uVar5 = puVar6[0x17];\n            puVar8[0x14] = puVar6[0x14];\n            puVar8[0x15] = uVar3;\n            puVar8[0x16] = uVar4;\n            puVar8[0x17] = uVar5;\n            uVar3 = puVar6[0x19];\n            uVar4 = puVar6[0x1a];\n            uVar5 = puVar6[0x1b];\n            puVar8[0x18] = puVar6[0x18];\n            puVar8[0x19] = uVar3;\n            puVar8[0x1a] = uVar4;\n            puVar8[0x1b] = uVar5;\n            puVar7 = puVar8 + 0x20;\n            uVar3 = puVar6[0x1d];\n            uVar4 = puVar6[0x1e];\n            uVar5 = puVar6[0x1f];\n            puVar8[0x1c] = puVar6[0x1c];\n            puVar8[0x1d] = uVar3;\n            puVar8[0x1e] = uVar4;\n            puVar8[0x1f] = uVar5;\n            puVar6 = puVar6 + 0x20;\n            iVar9 = iVar9 + -1;\n            puVar8 = puVar7;\n        } while (iVar9 != 0);\n        *puVar7 = *puVar6;\n    }\n    iVar9 = 2;\n    puVar6 = *(**arg3 + 0x88) + 0x119;\n    if (*0x140027d50 != NULL) {\n        puVar8 = *0x140027d50;\n        if (puVar6 != NULL) {\n            do {\n                uVar3 = puVar6[1];\n                uVar4 = puVar6[2];\n                uVar5 = puVar6[3];\n                *puVar8 = *puVar6;\n                puVar8[1] = uVar3;\n                puVar8[2] = uVar4;\n                puVar8[3] = uVar5;\n                uVar3 = puVar6[5];\n                uVar4 = puVar6[6];\n                uVar5 = puVar6[7];\n                puVar8[4] = puVar6[4];\n                puVar8[5] = uVar3;\n                puVar8[6] = uVar4;\n                puVar8[7] = uVar5;\n                uVar3 = puVar6[9];\n                uVar4 = puVar6[10];\n                uVar5 = puVar6[0xb];\n                puVar8[8] = puVar6[8];\n                puVar8[9] = uVar3;\n                puVar8[10] = uVar4;\n                puVar8[0xb] = uVar5;\n                uVar3 = puVar6[0xd];\n                uVar4 = puVar6[0xe];\n                uVar5 = puVar6[0xf];\n                puVar8[0xc] = puVar6[0xc];\n                puVar8[0xd] = uVar3;\n                puVar8[0xe] = uVar4;\n                puVar8[0xf] = uVar5;\n                uVar3 = puVar6[0x11];\n                uVar4 = puVar6[0x12];\n                uVar5 = puVar6[0x13];\n                puVar8[0x10] = puVar6[0x10];\n                puVar8[0x11] = uVar3;\n                puVar8[0x12] = uVar4;\n                puVar8[0x13] = uVar5;\n                uVar3 = puVar6[0x15];\n                uVar4 = puVar6[0x16];\n                uVar5 = puVar6[0x17];\n                puVar8[0x14] = puVar6[0x14];\n                puVar8[0x15] = uVar3;\n                puVar8[0x16] = uVar4;\n                puVar8[0x17] = uVar5;\n                uVar3 = puVar6[0x19];\n                uVar4 = puVar6[0x1a];\n                uVar5 = puVar6[0x1b];\n                puVar8[0x18] = puVar6[0x18];\n                puVar8[0x19] = uVar3;\n                puVar8[0x1a] = uVar4;\n                puVar8[0x1b] = uVar5;\n                uVar3 = puVar6[0x1d];\n                uVar4 = puVar6[0x1e];\n                uVar5 = puVar6[0x1f];\n                puVar8[0x1c] = puVar6[0x1c];\n                puVar8[0x1d] = uVar3;\n                puVar8[0x1e] = uVar4;\n                puVar8[0x1f] = uVar5;\n                puVar6 = puVar6 + 0x20;\n                iVar9 = iVar9 + -1;\n                puVar8 = puVar8 + 0x20;\n            } while (iVar9 != 0);\n            goto code_r0x000140010878;\n        }\n        fcn.140003630(*0x140027d50, 0, 0x100);\n    }\n    puVar6 = fcn.1400096f4();\n    *puVar6 = 0x16;\n    fcn.1400095b8();\ncode_r0x000140010878:\n    piVar2 = **arg3[1];\n    LOCK();\n    iVar1 = *piVar2;\n    *piVar2 = *piVar2 + -1;\n    if ((iVar1 == 1) && (**arg3[1] != 0x140026330)) {\n        fcn.14000ae8c(**arg3[1]);\n    }\n    **arg3[1] = *(**arg3 + 0x88);\n    LOCK();\n    **(**arg3 + 0x88) = **(**arg3 + 0x88) + 1;\n    fcn.14000f9c4(*arg4);\n    return;\n}\n",
        "token_count": 2173
    },
    "140012c7": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint64_t fcn.140012c7c(ulong arg1, uint8_t *arg2, ulong arg3, char *arg4)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    int64_t iVar5;\n    uint32_t *puVar6;\n    uint *puVar7;\n    uint32_t uVar8;\n    int32_t iVar9;\n    uint64_t uVar10;\n    uint32_t auStackX8 [2];\n    \n    uVar10 = arg1;\n    iVar9 = 0;\n    *arg4 = '\\0';\n    if (-1 < *(*((uVar10 >> 6) * 8 + 0x140027550) + 0x38 + (arg1 & 0x3f) * 0x48)) {\n        return 0;\n    }\n    if ((arg3 & 0x74000) == 0) {\n        auStackX8[0] = 0;\n        iVar2 = fcn.14000aa58(auStackX8);\n        if (iVar2 != 0) {\n            fcn.1400095d8(0, 0, 0, 0, 0);\n            pcVar1 = swi(3);\n            uVar10 = (*pcVar1)();\n            return uVar10;\n        }\n        if ((auStackX8[0] & 0x74000) == 0) {\n            arg3._0_4_ = arg3 | 0x4000;\n        }\n        else {\n            arg3._0_4_ = arg3 | auStackX8[0] & 0x74000;\n        }\n    }\n    uVar8 = arg3 & 0x74000;\n    iVar2 = 2;\n    if (uVar8 == 0x4000) {\n        *arg4 = '\\0';\n    }\n    else if ((uVar8 - 0x10000 & 0xffffbfff) == 0) {\n        if ((arg3 & 0x301) == 0x301) goto code_r0x000140012d43;\n    }\n    else if ((uVar8 - 0x20000 & 0xffffbfff) == 0) {\ncode_r0x000140012d43:\n        *arg4 = '\\x02';\n    }\n    else if ((uVar8 - 0x40000 & 0xffffbfff) == 0) {\n        *arg4 = '\\x01';\n    }\n    if ((arg3 & 0x70000) == 0) {\n        return 0;\n    }\n    if ((*arg2 & 0x40) != 0) {\n        return 0;\n    }\n    uVar8 = *(arg2 + 4);\n    uVar3 = uVar8 & 0xc0000000;\n    if (uVar3 == 0x40000000) {\ncode_r0x000140012d88:\n        uVar3 = *(arg2 + 8);\n        if (uVar3 == 0) {\n            return 0;\n        }\n        if (2 < uVar3) {\n            if (uVar3 < 5) {\n                iVar5 = fcn.1400139d4(uVar10 & 0xffffffff, 0);\n                if (iVar5 != 0) {\n                    iVar5 = fcn.1400139d4(arg1, 0, 0);\n                    if (iVar5 == -1) goto code_r0x000140012de9;\n                    if (-1 < uVar8) {\n                        return 0;\n                    }\n                    goto code_r0x000140012e00;\n                }\n            }\n            else if (uVar3 != 5) {\n                return 0;\n            }\n        }\n        if (*arg4 == '\\x01') {\n            iVar2 = 3;\n            auStackX8[0] = 0xbfbbef;\n        }\n        else {\n            if (*arg4 != '\\x02') {\n                return 0;\n            }\n            auStackX8[0] = 0xfeff;\n        }\n        while (iVar4 = fcn.14000ca74(uVar10 & 0xffffffff, auStackX8 + iVar9, iVar2 - iVar9),  iVar4 != -1) {\n            iVar9 = iVar9 + iVar4;\n            if (iVar2 <= iVar9) {\n                return 0;\n            }\n        }\n        goto code_r0x000140012de9;\n    }\n    if (uVar3 != 0x80000000) {\n        if (uVar3 != 0xc0000000) {\n            return 0;\n        }\n        goto code_r0x000140012d88;\n    }\ncode_r0x000140012e00:\n    auStackX8[0] = 0;\n    iVar9 = fcn.140014148(uVar10 & 0xffffffff, auStackX8, 3);\n    if (iVar9 == -1) goto code_r0x000140012de9;\n    if (iVar9 == 2) {\ncode_r0x000140012e38:\n        if ((auStackX8[0] & 0xffff) == 0xfffe) {\n            puVar7 = fcn.1400096f4();\n            *puVar7 = 0x16;\n            goto code_r0x000140012de9;\n        }\n        if ((auStackX8[0] & 0xffff) == 0xfeff) {\n            iVar5 = fcn.1400139d4(uVar10 & 0xffffffff, 2, 0);\n            if (iVar5 != -1) {\n                *arg4 = '\\x02';\n                return 0;\n            }\n            goto code_r0x000140012de9;\n        }\n    }\n    else if (iVar9 == 3) {\n        if (auStackX8[0] == 0xbfbbef) {\n            *arg4 = '\\x01';\n            return 0;\n        }\n        goto code_r0x000140012e38;\n    }\n    iVar5 = fcn.1400139d4(uVar10 & 0xffffffff, 0, 0);\n    if (iVar5 != -1) {\n        return 0;\n    }\ncode_r0x000140012de9:\n    puVar6 = fcn.1400096f4();\n    return *puVar6;\n}\n",
        "token_count": 1425
    },
    "140013ab": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint64_t fcn.140013abc(uint16_t *arg1, char **arg2, uint64_t arg3, ulong arg4)\n\n{\n    uint32_t uVar1;\n    uint16_t *puVar2;\n    char *pcVar3;\n    char *arg2_00;\n    int64_t iVar4;\n    int64_t iVar5;\n    uint32_t auStackX8 [2];\n    int64_t in_stack_00000028;\n    \n    arg2_00 = *arg2;\n    iVar4 = 0;\n    if (arg1 == NULL) {\n        while( true ) {\n            if (*arg2_00 == '\\0') {\n                iVar5 = 1;\n            }\n            else if (arg2_00[1] == '\\0') {\n                iVar5 = 2;\n            }\n            else {\n                iVar5 = (arg2_00[2] != '\\0') + 3;\n            }\n            iVar5 = fcn.140016f60(0, arg2_00, iVar5, arg4);\n            if (iVar5 == -1) {\n                *(in_stack_00000028 + 0x30) = 1;\n                *(in_stack_00000028 + 0x2c) = 0x2a;\n                return -1;\n            }\n            if (iVar5 == 0) break;\n            if (iVar5 == 4) {\n                iVar4 = iVar4 + 1;\n            }\n            arg2_00 = arg2_00 + iVar5;\n            iVar4 = iVar4 + 1;\n        }\n    }\n    else {\n        puVar2 = arg1;\n        pcVar3 = arg2_00;\n        if (arg3 != 0) {\n            do {\n                if (*arg2_00 == '\\0') {\n                    iVar4 = 1;\n                }\n                else if (arg2_00[1] == '\\0') {\n                    iVar4 = 2;\n                }\n                else {\n                    iVar4 = (arg2_00[2] != '\\0') + 3;\n                }\n                iVar4 = fcn.140016f60(auStackX8, arg2_00, iVar4, arg4);\n                if (iVar4 == -1) {\n                    *arg2 = arg2_00;\n                    *(in_stack_00000028 + 0x30) = 1;\n                    *(in_stack_00000028 + 0x2c) = 0x2a;\n                    return -1;\n                }\n                pcVar3 = NULL;\n                if (iVar4 == 0) {\n                    *puVar2 = 0;\n                    break;\n                }\n                uVar1 = auStackX8[0];\n                if (0xffff < auStackX8[0]) {\n                    pcVar3 = arg2_00;\n                    if (arg3 < 2) break;\n                    auStackX8[0] = auStackX8[0] - 0x10000;\n                    arg3 = arg3 - 1;\n                    *puVar2 = auStackX8[0] >> 10 | 0xd800;\n                    puVar2 = puVar2 + 1;\n                    uVar1 = auStackX8[0] & 0x3ff | 0xdc00;\n                }\n                *puVar2 = uVar1;\n                pcVar3 = arg2_00 + iVar4;\n                puVar2 = puVar2 + 1;\n                arg3 = arg3 - 1;\n                arg2_00 = pcVar3;\n            } while (arg3 != 0);\n        }\n        *arg2 = pcVar3;\n        iVar4 = puVar2 - arg1 >> 1;\n    }\n    return iVar4;\n}\n",
        "token_count": 817
    },
    "14001479": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint64_t fcn.140014790(uint32_t *arg1, uint32_t *arg2)\n\n{\n    uint32_t uVar1;\n    uint64_t uVar2;\n    uint64_t uVar3;\n    uint64_t uVar4;\n    uint32_t uVar5;\n    uint32_t *puVar6;\n    uint32_t uVar7;\n    uint64_t uVar8;\n    int64_t iVar9;\n    uint32_t uVar10;\n    int32_t iVar11;\n    int64_t iVar12;\n    int32_t iVar13;\n    uint64_t uVar14;\n    uint32_t uVar15;\n    uint64_t uVar16;\n    uint32_t uVar17;\n    uint32_t uVar18;\n    uint8_t uStackX8;\n    uint32_t uStackX24;\n    uint64_t uStack576;\n    uint64_t uStack560;\n    uchar auStack532 [468];\n    \n    if ((*arg1 == 0) || (uVar5 = *arg2,  uVar5 == 0)) {\n        return 0;\n    }\n    uVar15 = *arg1 - 1;\n    uVar16 = uVar15;\n    uVar18 = uVar5 - 1;\n    if (uVar18 == 0) {\n        uVar5 = arg2[1];\n        uVar8 = 0;\n        if (uVar5 == 1) {\n            uVar5 = arg1[1];\n            *arg1 = 0;\n            fcn.140015e5c(arg1 + 1, 0x1cc, auStack532, 0);\n            return uVar5;\n        }\n        uVar14 = uVar8;\n        if (uVar15 != 0) {\n            while (uVar15 != 0xffffffff) {\n                iVar9 = uVar16 + 1;\n                uVar15 = uVar16 - 1;\n                uVar16 = uVar15;\n                uVar2 = arg1[iVar9] | uVar8 << 0x20;\n                uVar8 = uVar2 % uVar5;\n                uVar14 = (uVar14 << 0x20) + SUB164(ZEXT816(uVar2) / ZEXT416(uVar5), 0);\n            }\n            *arg1 = 0;\n            fcn.140015e5c(arg1 + 1, 0x1cc, auStack532, 0);\n            arg1[1] = uVar8;\n            arg1[2] = 0;\n            *arg1 = 1;\n            return uVar14;\n        }\n        uVar18 = arg1[1];\n        *arg1 = 0;\n        fcn.140015e5c(arg1 + 1, 0x1cc, auStack532, 0);\n        uVar15 = uVar18 % uVar5;\n        arg1[1] = uVar15;\n        *arg1 = uVar15 != 0;\n        return uVar18 / uVar5;\n    }\n    if (uVar15 < uVar18) {\n        return 0;\n    }\n    iVar9 = uVar15;\n    iVar13 = uVar15 - uVar18;\n    iVar12 = iVar13;\n    if (iVar12 <= iVar9) {\n        puVar6 = arg1 + iVar9 + 1;\n        uVar8 = uVar16;\n        do {\n            iVar11 = uVar8;\n            if (*(arg2 + (iVar12 * -4 - arg1) + puVar6) != *puVar6) {\n                if (arg1[iVar11 + 1] <= arg2[(iVar11 - iVar13) + 1]) goto code_r0x00014001492a;\n                break;\n            }\n            uVar8 = iVar11 - 1;\n            iVar9 = iVar9 + -1;\n            puVar6 = puVar6 + -1;\n        } while (iVar12 <= iVar9);\n    }\n    iVar13 = iVar13 + 1;\ncode_r0x00014001492a:\n    if (iVar13 == 0) {\n        return 0;\n    }\n    uVar8 = 0;\n    uVar18 = arg2[(uVar5 - 1) + 1];\n    uVar14 = uVar18;\n    uStackX24 = arg2[(uVar5 - 2) + 1];\n    iVar11 = 0x1f;\n    if (uVar18 != 0) {\n        for (; uVar18 >> iVar11 == 0; iVar11 = iVar11 + -1) {\n        }\n    }\n    uVar10 = 0;\n    if (uVar18 == 0) {\n        iVar11 = 0x20;\n        uStackX8 = 0;\n    }\n    else {\n        iVar11 = 0x1f - iVar11;\n        uStackX8 = 0x20 - iVar11;\n        if (iVar11 == 0) goto code_r0x0001400149bd;\n    }\n    uVar7 = uStackX24 >> (uStackX8 & 0x1f);\n    uStackX24 = uStackX24 << (iVar11 & 0x1f);\n    uVar14 = uVar7 | uVar18 << (iVar11 & 0x1f);\n    if (2 < uVar5) {\n        uStackX24 = uStackX24 | arg2[(uVar5 - 3) + 1] >> (uStackX8 & 0x1f);\n    }\ncode_r0x0001400149bd:\n    iVar13 = iVar13 + -1;\n    uStack560 = 0;\n    uVar2 = uVar8;\n    if (-1 < iVar13) {\n        uVar18 = iVar13 + uVar5;\n        do {\n            uVar15 = uVar10;\n            if (uVar18 <= uVar16) {\n                uVar15 = arg1[uVar18 + 1];\n            }\n            uVar7 = arg1[(uVar18 - 2) + 1];\n            uVar2 = uVar7;\n            uStack576 = CONCAT44(uVar15, arg1[(uVar18 - 1) + 1]);\n            if (iVar11 != 0) {\n                uStack576 = uVar7 >> (uStackX8 & 0x3f) | uStack576 << (iVar11 & 0x3f);\n                uVar7 = uVar7 << (iVar11 & 0x1f);\n                uVar2 = uVar7;\n                if (2 < uVar18) {\n                    uVar2 = uVar7 | arg1[(uVar18 - 3) + 1] >> (uStackX8 & 0x1f);\n                }\n            }\n            uVar3 = uStack576 / uVar14;\n            uStack576 = uStack576 % uVar14;\n            if (0xffffffff < uVar3) {\n                iVar9 = uVar3 - 0xffffffff;\n                uVar3 = 0xffffffff;\n                uStack576 = uStack576 + iVar9 * uVar14;\n            }\n            if (uStack576 < 0x100000000) {\n                uVar4 = uStackX24 * uVar3;\n                do {\n                    if (uVar4 <= (uStack576 << 0x20 | uVar2)) break;\n                    uVar3 = uVar3 - 1;\n                    uVar4 = uVar4 - uStackX24;\n                    uStack576 = uStack576 + uVar14;\n                } while (uStack576 < 0x100000000);\n            }\n            if (uVar3 != 0) {\n                uVar16 = uVar8;\n                uVar7 = uVar10;\n                puVar6 = arg2;\n                if (uVar5 != 0) {\n                    do {\n                        uVar16 = uVar16 + puVar6[1] * uVar3;\n                        uVar1 = uVar16;\n                        uVar2 = uVar16 >> 0x20;\n                        uVar16 = uVar2 + 1;\n                        if (uVar1 <= arg1[uVar7 + iVar13 + 1]) {\n                            uVar16 = uVar2;\n                        }\n                        uVar17 = uVar7 + 1;\n                        arg1[uVar7 + iVar13 + 1] = arg1[uVar7 + iVar13 + 1] - uVar1;\n                        uVar7 = uVar17;\n                        puVar6 = puVar6 + 1;\n                    } while (uVar17 < uVar5);\n                }\n                if (uVar15 < uVar16) {\n                    uVar16 = uVar8;\n                    uVar15 = uVar10;\n                    puVar6 = arg2;\n                    if (uVar5 != 0) {\n                        do {\n                            uVar7 = uVar15 + 1;\n                            uVar16 = uVar16 + puVar6[1] + arg1[uVar15 + iVar13 + 1];\n                            arg1[uVar15 + iVar13 + 1] = uVar16;\n                            uVar16 = uVar16 >> 0x20;\n                            uVar15 = uVar7;\n                            puVar6 = puVar6 + 1;\n                        } while (uVar7 < uVar5);\n                    }\n                    uVar3 = uVar3 - 1;\n                }\n                uVar16 = uVar18 - 1;\n            }\n            uVar15 = uVar16;\n            uVar18 = uVar18 - 1;\n            uVar2 = (uStack560 << 0x20) + (uVar3 & 0xffffffff);\n            iVar13 = iVar13 + -1;\n            uStack560 = uVar2;\n        } while (-1 < iVar13);\n    }\n    uVar15 = uVar15 + 1;\n    uVar16 = uVar15;\n    uVar8 = uVar16;\n    if (uVar15 < *arg1) {\n        do {\n            uVar5 = uVar8 + 1;\n            arg1[uVar8 + 1] = 0;\n            uVar8 = uVar5;\n        } while (uVar5 < *arg1);\n    }\n    *arg1 = uVar15;\n    while( true ) {\n        if (uVar15 == 0) {\n            return uVar2;\n        }\n        uVar15 = uVar16 - 1;\n        uVar16 = uVar15;\n        if (arg1[uVar16 + 1] != 0) break;\n        *arg1 = uVar15;\n    }\n    return uVar2;\n}\n",
        "token_count": 2350
    },
    "140017d1": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.140017d10(int64_t *arg1, ulong arg2, ulong arg3, uint8_t *arg4, ulong noname_4, uint8_t *noname_5, \n                  ulong noname_6, ulong noname_7, ulong noname_8, ulong noname_9, ulong noname_10, ulong noname_11, \n                  ulong noname_12, ulong noname_13, ulong noname_14, ulong noname_15, ulong noname_16, ulong noname_17, \n                  ulong noname_18, ulong noname_19, ulong arg_b0h, ulong arg_b8h, ulong arg_c0h, ulong arg_c8h)\n\n{\n    int32_t *lpMem;\n    uint8_t uVar1;\n    ulong arg1_00;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint8_t *puVar5;\n    int64_t iVar6;\n    uint *arg3_00;\n    uint *puVar7;\n    uint64_t uVar8;\n    uchar *puVar9;\n    uchar *puVar10;\n    uchar *puVar11;\n    ulong var_8h;\n    ulong var_10h;\n    ulong lpCPInfo;\n    ulong var_30h;\n    ulong var_48h;\n    uchar auStack216 [32];\n    ulong uStack184;\n    uint uStack176;\n    uint32_t auStack136 [2];\n    uint8_t *puStack128;\n    ulong uStack120;\n    uint32_t uStack112;\n    uint8_t auStack106 [18];\n    uint64_t uStack88;\n    \n    puVar9 = &stack0xffffffffffffff28;\n    puVar11 = &stack0xffffffffffffff28;\n    puVar10 = &stack0xffffffffffffff28;\n    uStack88 = *0x140026018 ^ &stack0xffffffffffffff78;\n    auStack136[0] = arg3;\n    uStack120 = arg2;\n    puStack128 = noname_5;\n    if (noname_4 < 1) {\n        if (noname_4 < -1) goto code_r0x000140017f58;\n    }\n    else {\n        noname_4._0_4_ = fcn.140015f9c(arg4, noname_4);\n    }\n    if (noname_6 < 1) {\n        puVar10 = &stack0xffffffffffffff28;\n        if (noname_6 < -1) goto code_r0x000140017f58;\n    }\n    else {\n        noname_6._0_4_ = fcn.140015f9c(noname_5, noname_6);\n    }\n    if (noname_7 == 0) {\n        noname_7._0_4_ = *(*arg1 + 0xc);\n    }\n    if ((noname_4 == 0) || (noname_6 == 0)) {\n        puVar10 = &stack0xffffffffffffff28;\n        if ((noname_4 == noname_6) ||\n           (((puVar10 = &stack0xffffffffffffff28,  1 < noname_6 || (puVar10 = &stack0xffffffffffffff28,  1 < noname_4))\n            || (iVar2 = (*_sym.imp.KERNEL32.dll_GetCPInfo)(noname_7, &stack0xffffffffffffff90), \n               puVar10 = &stack0xffffffffffffff28,  iVar2 == 0)))) goto code_r0x000140017f58;\n        if (0 < noname_4) {\n            puVar10 = &stack0xffffffffffffff28;\n            if (1 < uStack112) {\n                puVar5 = &stack0xffffffffffffff96;\n                while (((puVar10 = &stack0xffffffffffffff28,  auStack106[0] != 0 &&\n                        (puVar10 = &stack0xffffffffffffff28,  puVar5[1] != 0)) &&\n                       ((uVar1 = *arg4,  uVar1 < *puVar5 ||\n                        (puVar10 = &stack0xffffffffffffff28,  puVar5[1] <= uVar1 && uVar1 != puVar5[1]))))) {\n                    puVar5 = puVar5 + 2;\n                    auStack106[0] = *puVar5;\n                }\n            }\n            goto code_r0x000140017f58;\n        }\n        if (0 < noname_6) {\n            puVar10 = &stack0xffffffffffffff28;\n            if (1 < uStack112) {\n                puVar5 = &stack0xffffffffffffff96;\n                while (((puVar10 = &stack0xffffffffffffff28,  auStack106[0] != 0 &&\n                        (puVar10 = &stack0xffffffffffffff28,  puVar5[1] != 0)) &&\n                       ((uVar1 = *noname_5,  uVar1 < *puVar5 ||\n                        (puVar10 = &stack0xffffffffffffff28,  puVar5[1] <= uVar1 && uVar1 != puVar5[1]))))) {\n                    puVar5 = puVar5 + 2;\n                    auStack106[0] = *puVar5;\n                }\n            }\n            goto code_r0x000140017f58;\n        }\n    }\n    uStack176 = 0;\n    uStack184 = 0;\n    uVar3 = fcn.1400112d0(noname_7, 9);\n    puVar10 = &stack0xffffffffffffff28;\n    if ((uVar3 == 0) ||\n       (uVar8 = uVar3 * 2 + 0x10,  uVar8 = -(uVar3 * 2 < uVar8) & uVar8,  puVar10 = &stack0xffffffffffffff28, \n       uVar8 == 0)) goto code_r0x000140017f58;\n    if (uVar8 < 0x401) {\n        iVar6 = fcn.140018df0();\n        iVar6 = -iVar6;\n        puVar9 = &stack0xffffffffffffff28 + iVar6;\n        arg3_00 = &stack0xffffffffffffff78 + iVar6;\n        puVar10 = &stack0xffffffffffffff28 + iVar6;\n        if (arg3_00 == NULL) goto code_r0x000140017f58;\n        *arg3_00 = 0xcccc;\ncode_r0x000140017ef6:\n        arg3_00 = arg3_00 + 4;\n        puVar11 = puVar9;\n    }\n    else {\n        arg3_00 = fcn.14000d2c8(uVar8);\n        if (arg3_00 != NULL) {\n            *arg3_00 = 0xdddd;\n            goto code_r0x000140017ef6;\n        }\n    }\n    puVar10 = puVar11;\n    if (arg3_00 == NULL) goto code_r0x000140017f58;\n    *(puVar11 + 0x28) = uVar3;\n    *(puVar11 + 0x20) = arg3_00;\n    *(puVar11 + -8) = 0x140017f1c;\n    iVar2 = fcn.1400112d0(noname_7, 1);\n    if (iVar2 == 0) {\ncode_r0x000140017f45:\n        iVar2 = arg3_00[-4];\n    }\n    else {\n        *(puVar11 + 0x28) = 0;\n        *(puVar11 + 0x20) = 0;\n        *(puVar11 + -8) = 0x140017f3e;\n        iVar2 = fcn.1400112d0(noname_7, 9);\n        if ((iVar2 == 0) || (uVar8 = iVar2 * 2 + 0x10,  uVar8 = -(iVar2 * 2 < uVar8) & uVar8,  uVar8 == 0))\n        goto code_r0x000140017f45;\n        if (uVar8 < 0x401) {\n            *(puVar11 + -8) = 0x140017faf;\n            iVar6 = fcn.140018df0();\n            iVar6 = -iVar6;\n            puVar10 = puVar11 + iVar6;\n            puVar7 = puVar11 + iVar6 + 0x50;\n            if (puVar7 == NULL) goto code_r0x000140017f45;\n            *puVar7 = 0xcccc;\n            puVar11 = puVar11 + iVar6;\ncode_r0x000140017fd7:\n            puVar7 = puVar7 + 4;\n            puVar10 = puVar11;\n        }\n        else {\n            *(puVar11 + -8) = 0x140017fc9;\n            puVar7 = fcn.14000d2c8(uVar8);\n            if (puVar7 != NULL) {\n                *puVar7 = 0xdddd;\n                goto code_r0x000140017fd7;\n            }\n        }\n        if (puVar7 == NULL) goto code_r0x000140017f45;\n        lpMem = puVar7 + -4;\n        *(puVar10 + 0x28) = iVar2;\n        *(puVar10 + 0x20) = puVar7;\n        *(puVar10 + -8) = 0x140018006;\n        iVar4 = fcn.1400112d0(noname_7, 1);\n        if (iVar4 != 0) {\n            uVar8 = auStack136[0];\n            *(puVar10 + 0x40) = 0;\n            *(puVar10 + 0x38) = 0;\n            *(puVar10 + 0x30) = 0;\n            arg1_00 = uStack120;\n            *(puVar10 + 0x28) = iVar2;\n            *(puVar10 + 0x20) = puVar7;\n            *(puVar10 + -8) = 0x140018054;\n            fcn.14000f540(arg1_00, uVar8, arg3_00, uVar3);\n            if (*lpMem == 0xdddd) {\n                *(puVar10 + -8) = 0x140018068;\n                fcn.14000ae8c(lpMem);\n            }\n            if (arg3_00[-4] == 0xdddd) {\n                *(puVar10 + -8) = 0x140018075;\n                fcn.14000ae8c(arg3_00 + -4);\n            }\n            goto code_r0x000140017f58;\n        }\n        if (*lpMem == 0xdddd) {\n            *(puVar10 + -8) = 0x14001801e;\n            fcn.14000ae8c(lpMem);\n        }\n        iVar2 = arg3_00[-4];\n    }\n    if (iVar2 == 0xdddd) {\n        *(puVar10 + -8) = 0x140017f56;\n        fcn.14000ae8c(arg3_00 + -4);\n    }\ncode_r0x000140017f58:\n    uVar8 = uStack88 ^ &stack0xffffffffffffff78;\n    *(puVar10 + -8) = 0x140017f64;\n    fcn.140002480(uVar8);\n    return;\n}\n",
        "token_count": 2554
    },
    "14000b57": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.14000b578(ulong noname_0, uint32_t *arg2, int32_t **arg3, uint32_t *arg4)\n\n{\n    int64_t *piVar1;\n    uint32_t uVar2;\n    int64_t *piVar3;\n    uchar auStackX16 [16];\n    uint32_t *puStackX32;\n    int64_t iStack88;\n    int64_t iStack80;\n    int64_t iStack72;\n    int64_t *piStack64;\n    int64_t *piStack56;\n    int32_t *piStack48;\n    int32_t *piStack40;\n    int32_t *piStack32;\n    \n    puStackX32 = arg4;\n    fcn.14000f970(*arg2);\n    piVar1 = *0x140027510 + *0x140027508;\n    for (piVar3 = *0x140027510; piStack64 = piVar3,  piVar3 != piVar1; piVar3 = piVar3 + 1) {\n        iStack88 = *piVar3;\n        if ((iStack88 != 0) && (uVar2 = *(iStack88 + 0x14),  (uVar2 >> 0xd & 1) != 0)) {\n            if ((((uVar2 & 3) == 2) && ((uVar2 & 0xc0) != 0)) || ((uVar2 >> 0xb & 1) != 0)) {\n                piStack32 = arg3[2];\n                piStack40 = arg3[1];\n                piStack48 = *arg3;\n                piStack56 = &iStack88;\n                iStack80 = iStack88;\n                iStack72 = iStack88;\n                fcn.14000b4dc(auStackX16, &iStack72, &piStack56, &iStack80);\n            }\n            else {\n                **arg3 = **arg3 + 1;\n            }\n        }\n    }\n    fcn.14000f9c4(*arg4);\n    return;\n}\n",
        "token_count": 465
    },
    "14000b6b": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nulong fcn.14000b6b8(ulong *arg1, ulong arg2)\n\n{\n    ulong arg2_00;\n    uint32_t uVar1;\n    uint32_t uVar2;\n    \n    if (((*(arg1 + 0x14) & 3) == 2) && ((*(arg1 + 0x14) & 0xc0) != 0)) {\n        uVar2 = *arg1 - *(arg1 + 1);\n        *(arg1 + 2) = 0;\n        arg2_00 = arg1[1];\n        *arg1 = arg2_00;\n        if (0 < uVar2) {\n            uVar1 = fcn.14000aec8(arg1);\n            uVar1 = fcn.14000cb0c(uVar1, arg2_00, uVar2, arg2);\n            if (uVar2 != uVar1) {\n                LOCK();\n                *(arg1 + 0x14) = *(arg1 + 0x14) | 0x10;\n                return 0xffffffff;\n            }\n            if ((*(arg1 + 0x14) >> 2 & 1) != 0) {\n                LOCK();\n                *(arg1 + 0x14) = *(arg1 + 0x14) & 0xfffffffd;\n            }\n        }\n    }\n    return 0;\n}\n",
        "token_count": 305
    },
    "140010f8": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.140010f88(ulong arg1, int64_t arg2)\n\n{\n    uint8_t *puVar1;\n    uint8_t uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint32_t *puVar5;\n    int64_t iVar6;\n    uint8_t *puVar7;\n    uint64_t uVar8;\n    uint8_t *puVar9;\n    ushort *puVar10;\n    uint64_t uVar11;\n    uint64_t uVar12;\n    uint uVar13;\n    uint32_t uVar14;\n    uint32_t uVar15;\n    uint8_t *puVar16;\n    uchar auStack104 [32];\n    int32_t iStack72;\n    uint8_t auStack66 [18];\n    uint64_t uStack48;\n    \n    uStack48 = *0x140026018 ^ auStack104;\n    uVar3 = fcn.1400108e4(arg1);\n    uVar11 = 0;\n    if (uVar3 != 0) {\n        puVar5 = 0x140026780;\n        uVar13 = 1;\n        uVar8 = uVar11;\ncode_r0x000140010fd1:\n        if (*puVar5 != uVar3) goto code_r0x000140010fd9;\n        fcn.140003630(arg2 + 0x18, 0, 0x101);\n        puVar16 = 0x140026770;\n        iVar6 = 4;\n        puVar7 = uVar8 * 0x30 + 0x140026790;\n        do {\n            uVar2 = *puVar7;\n            puVar9 = puVar7;\n            while ((uVar2 != 0 && (puVar9[1] != 0))) {\n                uVar2 = *puVar9;\n                uVar15 = uVar2;\n                if (uVar2 <= puVar9[1]) {\n                    uVar14 = uVar2;\n                    do {\n                        uVar14 = uVar14 + 1;\n                        if (0x100 < uVar14) break;\n                        uVar15 = uVar15 + 1;\n                        puVar1 = uVar14 + 0x18 + arg2;\n                        *puVar1 = *puVar1 | *puVar16;\n                    } while (uVar15 <= puVar9[1]);\n                }\n                puVar9 = puVar9 + 2;\n                uVar2 = *puVar9;\n            }\n            puVar7 = puVar7 + 8;\n            puVar16 = puVar16 + 1;\n            iVar6 = iVar6 + -1;\n        } while (iVar6 != 0);\n        *(arg2 + 4) = uVar3;\n        *(arg2 + 8) = 1;\n        uVar12 = *0x14001cd30;\n        if (((uVar3 != 0x3a4) && (uVar12 = *0x14001cd38,  uVar3 != 0x3a8)) &&\n           ((uVar12 = *0x14001cd40,  uVar3 != 0x3b5 && (uVar12 = uVar11,  uVar3 == 0x3b6)))) {\n            uVar12 = *0x14001cd48;\n        }\n        *(arg2 + 0x220) = uVar12;\n        puVar10 = arg2 + 0xc;\n        iVar6 = 6;\n        do {\n            *puVar10 = *((uVar8 * 0x30 - arg2) + 0x140026778 + puVar10);\n            puVar10 = puVar10 + 1;\n            iVar6 = iVar6 + -1;\n        } while (iVar6 != 0);\n        goto code_r0x00014001102d;\n    }\ncode_r0x000140011215:\n    fcn.140010964(arg2);\ncode_r0x00014001121f:\n    fcn.140002480(uStack48 ^ auStack104);\n    return;\ncode_r0x000140010fd9:\n    uVar15 = uVar8 + 1;\n    uVar8 = uVar15;\n    puVar5 = puVar5 + 0xc;\n    if (4 < uVar15) goto code_r0x000140010fe6;\n    goto code_r0x000140010fd1;\ncode_r0x000140010fe6:\n    if ((uVar3 == 65000) || (iVar4 = (*_sym.imp.KERNEL32.dll_IsValidCodePage)(uVar3 & 0xffff),  iVar4 == 0))\n    goto code_r0x00014001121f;\n    if (uVar3 == 0xfde9) {\n        *(arg2 + 4) = 0xfde9;\n        *(arg2 + 0x220) = 0;\n        *(arg2 + 0x18) = 0;\n        *(arg2 + 0x1c) = 0;\n    }\n    else {\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetCPInfo)(uVar3);\n        if (iVar4 == 0) {\n            if (*0x140027d60 == 0) goto code_r0x00014001121f;\n            goto code_r0x000140011215;\n        }\n        fcn.140003630(arg2 + 0x18, 0, 0x101);\n        *(arg2 + 4) = uVar3;\n        *(arg2 + 0x220) = 0;\n        if (iStack72 == 2) {\n            puVar7 = auStack66;\n            while ((auStack66[0] != 0 && (puVar7[1] != 0))) {\n                uVar2 = *puVar7;\n                if (uVar2 <= puVar7[1]) {\n                    uVar3 = uVar2;\n                    uVar8 = (puVar7[1] - uVar2) + 1;\n                    do {\n                        uVar3 = uVar3 + 1;\n                        puVar16 = uVar3 + 0x18 + arg2;\n                        *puVar16 = *puVar16 | 4;\n                        uVar8 = uVar8 - 1;\n                    } while (uVar8 != 0);\n                }\n                puVar7 = puVar7 + 2;\n                auStack66[0] = *puVar7;\n            }\n            puVar7 = arg2 + 0x1a;\n            iVar6 = 0xfe;\n            do {\n                *puVar7 = *puVar7 | 8;\n                puVar7 = puVar7 + 1;\n                iVar6 = iVar6 + -1;\n            } while (iVar6 != 0);\n            iVar4 = *(arg2 + 4);\n            uVar8 = *0x14001cd30;\n            if ((((iVar4 != 0x3a4) && (uVar8 = *0x14001cd38,  iVar4 != 0x3a8)) &&\n                (uVar8 = *0x14001cd40,  iVar4 != 0x3b5)) && (uVar8 = *0x14001cd48,  iVar4 != 0x3b6)) {\n                uVar8 = uVar11;\n            }\n            *(arg2 + 0x220) = uVar8;\n        }\n        else {\n            uVar13 = 0;\n        }\n        *(arg2 + 8) = uVar13;\n    }\n    puVar10 = arg2 + 0xc;\n    for (iVar6 = 6; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar10 = 0;\n        puVar10 = puVar10 + 1;\n    }\ncode_r0x00014001102d:\n    fcn.1400109fc(arg2);\n    goto code_r0x00014001121f;\n}\n",
        "token_count": 1773
    },
    "14001331": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t fcn.140013314(uint *arg1, uint32_t *arg2, ulong arg3, ulong arg4)\n\n{\n    uint8_t *puVar1;\n    uint32_t uVar2;\n    int64_t iVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    uchar (*pauVar6) [16];\n    uint *puVar7;\n    int32_t *piVar8;\n    int64_t iVar9;\n    uint64_t uVar10;\n    uint64_t uVar11;\n    uint32_t in_stack_00000028;\n    uint32_t in_stack_00000030;\n    uchar auStack168 [8];\n    uchar auStack160 [4];\n    uint32_t uStack156;\n    ulong uStack152;\n    ulong uStack144;\n    uint8_t uStack136;\n    ulong uStack128;\n    uint64_t uStack120;\n    uint64_t uStack112;\n    uint auStack104 [2];\n    ulong uStack96;\n    uint32_t uStack88;\n    uint uStack72;\n    uint uStack68;\n    uint uStack64;\n    uint uStack60;\n    ulong uStack56;\n    \n    puVar7 = &uStack72;\n    pauVar6 = fcn.140012ef4(puVar7, arg4, in_stack_00000028, in_stack_00000030);\n    _auStack160 = *pauVar6;\n    uStack144 = *pauVar6[1];\n    uVar10 = SUB168(_auStack160 >> 0x40, 0);\n    uVar11 = uVar10 >> 0x20;\n    iVar5 = SUB164(_auStack160 >> 0x60, 0);\n    uStack128 = uStack144;\n    uStack112 = uVar11;\n    if (iVar5 == -1) {\n        puVar7 = fcn.1400096d4(puVar7);\n        *puVar7 = 0;\n        *arg2 = 0xffffffff;\n        goto code_r0x000140013395;\n    }\n    uVar4 = fcn.140011d60(uVar10);\n    *arg2 = uVar4;\n    if (uVar4 == 0xffffffff) {\n        puVar7 = fcn.1400096d4(puVar7);\n        *puVar7 = 0;\n        *arg2 = 0xffffffff;\n        puVar7 = fcn.1400096f4();\n        *puVar7 = 0x18;\n        goto code_r0x000140013395;\n    }\n    uStack144._0_4_ = uStack144 >> 0x20 | uStack144;\n    uStack120 = uStack144;\n    uStack88 = ~(arg4 >> 7) & 1;\n    *arg1 = 1;\n    auStack104[0] = 0x18;\n    uStack96 = 0;\n    iVar9 = (*_sym.imp.KERNEL32.dll_CreateFileW)(arg3, _auStack160 >> 0x20, iVar5, auStack104, uStack152, uStack144, 0);\n    uVar4 = uStack156;\n    if (iVar9 == -1) {\n        if (((uStack156 & 0xc0000000) == 0xc0000000) && ((arg4 & 1) != 0)) {\n            uVar4 = uStack156 & 0x7fffffff;\n            _auStack160 = _auStack160 & 0xffffffffffffffff;\n            iVar9 = (*_sym.imp.KERNEL32.dll_CreateFileW)\n                              (arg3, _auStack160 >> 0x20, uVar11, auStack104, uStack152, uStack144, 0);\n            if (iVar9 != -1) goto code_r0x0001400134ac;\n        }\n        puVar1 = *((*arg2 >> 6) * 8 + 0x140027550) + 0x38 + (*arg2 & 0x3f) * 0x48;\n        *puVar1 = *puVar1 & 0xfe;\n        uVar4 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        fcn.140009668(uVar4);\n    }\n    else {\ncode_r0x0001400134ac:\n        iVar5 = (*_sym.imp.KERNEL32.dll_GetFileType)();\n        if (iVar5 != 0) {\n            if (iVar5 == 2) {\n                auStack160[0] = auStack160[0] | 0x40;\n            }\n            else if (iVar5 == 3) {\n                auStack160[0] = auStack160[0] | 8;\n            }\n            fcn.140011c78(*arg2, iVar9);\n            uStack136 = auStack160[0] | 1;\n            _auStack160 = CONCAT151(stack0xffffffffffffff61, auStack160[0]) | 0x1;\n            *(*((*arg2 >> 6) * 8 + 0x140027550) + 0x38 + (*arg2 & 0x3f) * 0x48) = uStack136;\n            *(*((*arg2 >> 6) * 8 + 0x140027550) + 0x39 + (*arg2 & 0x3f) * 0x48) = 0;\n            if (((arg4 & 2) == 0) || (iVar5 = fcn.140013100(*arg2),  iVar5 == 0)) {\n                uStack72 = auStack160;\n                uStack68 = uStack156;\n                uStack64 = uStack152;\n                uStack60 = uStack152._4_4_;\n                auStack168[0] = 0;\n                uStack56 = uStack128;\n                iVar5 = fcn.140012c7c(*arg2, &uStack72, arg4, auStack168);\n                uVar2 = *arg2;\n                if (iVar5 == 0) {\n                    *(*((uVar2 >> 6) * 8 + 0x140027550) + 0x39 + (uVar2 & 0x3f) * 0x48) = auStack168[0];\n                    uVar10 = *arg2 & 0x3f;\n                    iVar3 = *((*arg2 >> 6) * 8 + 0x140027550);\n                    puVar1 = iVar3 + 0x3d + uVar10 * 0x48;\n                    *puVar1 = *puVar1 & 0xfe;\n                    puVar1 = iVar3 + 0x3d + uVar10 * 0x48;\n                    *puVar1 = *puVar1 | arg4 >> 0x10 & 1;\n                    if (((uStack136 & 0x48) == 0) && ((arg4 & 8) != 0)) {\n                        puVar1 = *((*arg2 >> 6) * 8 + 0x140027550) + 0x38 + (*arg2 & 0x3f) * 0x48;\n                        *puVar1 = *puVar1 | 0x20;\n                    }\n                    if (((uVar4 & 0xc0000000) == 0xc0000000) && ((arg4 & 1) != 0)) {\n                        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar9);\n                        _auStack160 = CONCAT88(uStack152, CONCAT44(uVar4, auStack160)) & 0xffffffffffffffff;\n                        iVar9 = (*_sym.imp.KERNEL32.dll_CreateFileW)\n                                          (arg3, _auStack160 >> 0x20, uStack112 & 0xffffffff, auStack104, uStack152, \n                                           uStack120, 0);\n                        if (iVar9 == -1) {\n                            uVar4 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                            fcn.140009668(uVar4);\n                            puVar1 = *((*arg2 >> 6) * 8 + 0x140027550) + 0x38 + (*arg2 & 0x3f) * 0x48;\n                            *puVar1 = *puVar1 & 0xfe;\n                            fcn.140011ea0(*arg2);\n                            goto code_r0x000140013395;\n                        }\n                        *(*((*arg2 >> 6) * 8 + 0x140027550) + 0x28 + (*arg2 & 0x3f) * 0x48) = iVar9;\n                    }\n                    return 0;\n                }\n                uVar10 = uVar2 & 0xffffffff;\n            }\n            else {\n                uVar10 = *arg2;\n            }\n            fcn.14000b1d4(uVar10);\n            return iVar5;\n        }\n        uVar4 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        fcn.140009668(uVar4);\n        puVar1 = *((*arg2 >> 6) * 8 + 0x140027550) + 0x38 + (*arg2 & 0x3f) * 0x48;\n        *puVar1 = *puVar1 & 0xfe;\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar9);\n        if (uVar4 == 0) {\n            puVar7 = fcn.1400096f4();\n            *puVar7 = 0xd;\n        }\n    }\ncode_r0x000140013395:\n    piVar8 = fcn.1400096f4();\n    return *piVar8;\n}\n",
        "token_count": 2145
    },
    "140013c9": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nint32_t fcn.140013c9c(ulong arg1, int16_t *arg2, int64_t arg3)\n\n{\n    int16_t *piVar1;\n    uint8_t *puVar2;\n    uint8_t uVar3;\n    int16_t iVar4;\n    ulong uVar5;\n    int16_t iVar6;\n    int32_t iVar7;\n    uint64_t uVar8;\n    int64_t iVar9;\n    int16_t *piVar10;\n    int16_t *piVar11;\n    int16_t *piVar12;\n    int64_t iVar13;\n    int64_t iVar14;\n    uint16_t auStackX8 [4];\n    uint64_t uStackX16;\n    int32_t aiStackX24 [4];\n    \n    uVar8 = arg1 & 0x3f;\n    iVar14 = arg1 >> 6;\n    iVar13 = 0;\n    iVar9 = *(iVar14 * 8 + 0x140027550);\n    uStackX16 = 4;\n    uVar5 = *(iVar9 + 0x28 + uVar8 * 0x48);\n    if ((arg3 == 0) || (*arg2 != 10)) {\n        puVar2 = iVar9 + 0x38 + uVar8 * 0x48;\n        *puVar2 = *puVar2 & 0xfb;\n    }\n    else {\n        puVar2 = iVar9 + 0x38 + uVar8 * 0x48;\n        *puVar2 = *puVar2 | 4;\n    }\n    piVar1 = arg2 + arg3;\n    piVar12 = arg2;\n    if (arg2 < piVar1) {\n        piVar10 = arg2;\n        do {\n            iVar6 = *piVar10;\n            if (iVar6 == 0x1a) {\n                iVar9 = *(iVar14 * 8 + 0x140027550);\n                uVar3 = *(iVar9 + 0x38 + uVar8 * 0x48);\n                if ((uVar3 & 0x40) != 0) {\n                    *piVar12 = 0x1a;\n                    goto code_r0x000140013e57;\n                }\n                *(iVar9 + 0x38 + uVar8 * 0x48) = uVar3 | 2;\n                break;\n            }\n            piVar11 = piVar10 + 1;\n            if (iVar6 == 0xd) {\n                if (piVar1 <= piVar11) {\n                    iVar7 = (*_sym.imp.KERNEL32.dll_ReadFile)(uVar5, auStackX8, 2, aiStackX24, 0);\n                    if ((iVar7 == 0) || (aiStackX24[0] == 0)) {\ncode_r0x000140013e30:\n                        *piVar12 = 0xd;\n                        goto code_r0x000140013e57;\n                    }\n                    uVar8 = arg1 & 0x3f;\n                    if ((*(*(iVar14 * 8 + 0x140027550) + 0x38 + uVar8 * 0x48) & 0x48) == 0) {\n                        if ((auStackX8[0] != 10) || (piVar12 != arg2)) {\n                            fcn.1400139d4(arg1 & 0xffffffff, 0xfffffffffffffffe, 1);\n                            if (auStackX8[0] != 10) goto code_r0x000140013e30;\n                            break;\n                        }\n                    }\n                    else if (auStackX8[0] != 10) {\n                        *piVar12 = 0xd;\n                        uStackX16 = uStackX16 & 0xffffffffffff0000 | auStackX8[0];\n                        do {\n                            *(*(iVar14 * 8 + 0x140027550) + uVar8 * 0x48 + 0x3a + iVar13) = *(&uStackX16 + iVar13);\n                            iVar13 = iVar13 + 1;\n                        } while (iVar13 < 2);\n                        *(*(iVar14 * 8 + 0x140027550) + 0x3c + uVar8 * 0x48) = 10;\ncode_r0x000140013e57:\n                        piVar12 = piVar12 + 1;\n                        break;\n                    }\n                    *piVar12 = 10;\n                    goto code_r0x000140013e57;\n                }\n                iVar9 = 2;\n                if (*piVar11 == 10) {\n                    iVar9 = 4;\n                }\n                iVar4 = *piVar11;\n                piVar11 = piVar10 + iVar9;\n                iVar6 = 10;\n                if (iVar4 != 10) {\n                    iVar6 = 0xd;\n                }\n            }\n            *piVar12 = iVar6;\n            piVar12 = piVar12 + 1;\n            piVar10 = piVar11;\n        } while (piVar11 < piVar1);\n    }\n    return (piVar12 - arg2 >> 1) * 2;\n}\n",
        "token_count": 1140
    },
    "140016f6": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.140016f60(uint64_t arg1, uint8_t *arg2, uint64_t arg3, uint32_t *arg4)\n\n{\n    uint8_t uVar1;\n    uint32_t uVar2;\n    uint8_t uVar3;\n    uint64_t uVar4;\n    uint8_t *puVar5;\n    uint8_t uVar6;\n    uint64_t uVar7;\n    uint32_t *arg1_00;\n    uint32_t *puVar8;\n    uint64_t uVar9;\n    ulong in_stack_00000028;\n    uchar auStack120 [24];\n    uint32_t auStack96 [6];\n    uint64_t uStack72;\n    \n    uStack72 = *0x140026018 ^ auStack120;\n    arg1_00 = 0x140027d88;\n    if (arg4 != NULL) {\n        arg1_00 = arg4;\n    }\n    puVar5 = 0x14001b392;\n    if (arg2 != NULL) {\n        puVar5 = arg2;\n    }\n    uVar9 = 1;\n    if (arg2 != NULL) {\n        uVar9 = arg3;\n    }\n    puVar8 = -(arg2 != NULL) & arg1;\n    if (uVar9 == 0) goto code_r0x00014001711d;\n    if (*(arg1_00 + 6) == 0) {\n        uVar3 = *puVar5;\n        puVar5 = puVar5 + 1;\n        if (-1 < uVar3) {\n            if (puVar8 != NULL) {\n                *puVar8 = uVar3;\n            }\n            goto code_r0x00014001711d;\n        }\n        if ((uVar3 & 0xe0) == 0xc0) {\n            uVar6 = 2;\n        }\n        else if ((uVar3 & 0xf0) == 0xe0) {\n            uVar6 = 3;\n        }\n        else {\n            if ((uVar3 & 0xf8) != 0xf0) goto code_r0x000140017112;\n            uVar6 = 4;\n        }\n        uVar2 = (1 << (7 - uVar6 & 0x1f)) - 1U & uVar3;\n        uVar3 = uVar6;\ncode_r0x000140017068:\n        uVar4 = uVar3;\n        uVar7 = uVar3;\n        if (uVar9 <= uVar4) {\n            uVar7 = uVar9;\n        }\n        while (puVar5 - arg2 < uVar7) {\n            uVar1 = *puVar5;\n            puVar5 = puVar5 + 1;\n            if ((uVar1 & 0xc0) != 0x80) goto code_r0x000140017112;\n            uVar2 = uVar1 & 0x3f | uVar2 << 6;\n        }\n        if (uVar7 < uVar4) {\n            *(arg1_00 + 1) = uVar6;\n            *(arg1_00 + 6) = uVar3 - uVar7;\n            *arg1_00 = uVar2;\n            goto code_r0x00014001711d;\n        }\n        if ((0x7ff < uVar2 - 0xd800) && (uVar2 < 0x110000)) {\n            auStack96[2] = 0x80;\n            auStack96[3] = 0x800;\n            auStack96[4] = 0x10000;\n            if (auStack96[uVar6] <= uVar2) {\n                if (puVar8 != NULL) {\n                    *puVar8 = uVar2;\n                }\n                fcn.140017cf4(-(uVar2 != 0) & uVar4, arg1_00);\n                goto code_r0x00014001711d;\n            }\n        }\n    }\n    else {\n        uVar6 = *(arg1_00 + 1);\n        uVar2 = *arg1_00;\n        uVar3 = *(arg1_00 + 6);\n        if (((uVar6 - 2 < 3) && (uVar3 != 0)) && (uVar3 < uVar6)) goto code_r0x000140017068;\n    }\ncode_r0x000140017112:\n    fcn.140017cfc(arg1_00, in_stack_00000028);\ncode_r0x00014001711d:\n    fcn.140002480(uStack72 ^ auStack120);\n    return;\n}\n",
        "token_count": 1030
    },
    "14001857": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.140018578(ulong arg1, ulong arg2, ulong ***arg3, ulong arg4)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint uVar4;\n    uint32_t in_stack_00000028;\n    uint32_t in_stack_00000030;\n    ulong in_stack_00000040;\n    int32_t in_stack_00000048;\n    uchar auStack264 [32];\n    uchar *puStack232;\n    ulong ***pppuStack224;\n    ulong uStack216;\n    ulong ***pppuStack200;\n    ulong uStack192;\n    uchar auStack184 [48];\n    ulong uStack136;\n    uint32_t uStack120;\n    uint64_t uStack72;\n    \n    uStack72 = *0x140026018 ^ auStack264;\n    uStack192 = fcn.140018bd8(0x1f80, 0xffc0);\n    pppuStack200 = arg3;\n    iVar2 = fcn.1400184bc(in_stack_00000028, uStack192);\n    uVar3 = in_stack_00000040;\n    uVar4 = in_stack_00000040 >> 0x20;\n    if (iVar2 == 0) {\n        if (in_stack_00000048 == 2) {\n            uStack136 = in_stack_00000040;\n            uStack120 = uStack120 & 0xffffffe3 | 3;\n        }\n        pppuStack224 = &pppuStack200;\n        puStack232 = &stack0x00000038;\n        fcn.140018850(auStack184, &uStack192, in_stack_00000028, arg2);\n    }\n    cVar1 = fcn.14000a944();\n    if ((cVar1 == '\\0') || (arg4 == 0)) {\n        fcn.140018b88(arg4);\n        fcn.140018bd8(uStack192, 0xffc0);\n    }\n    else {\n        uStack216 = uStack192;\n        pppuStack224 = pppuStack200;\n        puStack232 = CONCAT44(uVar4, uVar3);\n        fcn.140018454(arg4, in_stack_00000030, arg1);\n    }\n    fcn.140002480(uStack72 ^ auStack264);\n    return;\n}\n",
        "token_count": 525
    },
    "140002f8": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nuchar (*) [32] fcn.140002f80(uchar (*arg1) [32], uchar (*arg2) [32], uint64_t arg3)\n\n{\n    uint *puVar1;\n    uchar uVar2;\n    ushort uVar3;\n    uint uVar4;\n    uint uVar5;\n    uint uVar6;\n    uint uVar7;\n    uint uVar8;\n    uint uVar9;\n    uint uVar10;\n    uint uVar11;\n    uint uVar12;\n    uint uVar13;\n    uint uVar14;\n    uchar (*pauVar15) [32];\n    uchar (*pauVar16) [32];\n    uchar (*pauVar17) [32];\n    uint *puVar18;\n    uint *puVar19;\n    uchar (*pauVar20) [32];\n    uint *puVar21;\n    uint64_t uVar22;\n    int64_t iVar23;\n    uint64_t uVar24;\n    uint uVar25;\n    uint uVar27;\n    uint uVar28;\n    uint uVar29;\n    uchar auVar26 [32];\n    uchar auVar30 [32];\n    uchar auVar31 [32];\n    uchar auVar32 [32];\n    uchar auVar33 [32];\n    uchar auVar34 [32];\n    \n    pauVar15 = arg1;\n    if (arg3 < 0x10) {\n    // switch table (16 cases) at 0x14002a000\n        switch(*(arg3 * 4 + 0x14002a000) + 0x140000000) {\n        case 0x140002fae:\n            return pauVar15;\n        case 0x140002fb0:\n            uVar4 = *(*arg2 + 8);\n            uVar3 = *(*arg2 + 0xc);\n            uVar2 = (*arg2)[0xe];\n            **arg1 = **arg2;\n            *(*arg1 + 8) = uVar4;\n            *(*arg1 + 0xc) = uVar3;\n            (*arg1)[0xe] = uVar2;\n            return pauVar15;\n        case 0x140002fd0:\n            uVar3 = *(*arg2 + 8);\n            uVar2 = (*arg2)[10];\n            **arg1 = **arg2;\n            *(*arg1 + 8) = uVar3;\n            (*arg1)[10] = uVar2;\n            return pauVar15;\n        case 0x140002fe8:\n            **arg1 = **arg2;\n            return pauVar15;\n        case 0x140002ff0:\n            uVar3 = *(*arg2 + 4);\n            uVar2 = (*arg2)[6];\n            **arg1 = **arg2;\n            *(*arg1 + 4) = uVar3;\n            (*arg1)[6] = uVar2;\n            return pauVar15;\n        case 0x140003008:\n            uVar4 = *(*arg2 + 8);\n            uVar3 = *(*arg2 + 0xc);\n            **arg1 = **arg2;\n            *(*arg1 + 8) = uVar4;\n            *(*arg1 + 0xc) = uVar3;\n            return pauVar15;\n        case 0x14000301f:\n            uVar2 = (*arg2)[2];\n            **arg1 = **arg2;\n            (*arg1)[2] = uVar2;\n            return pauVar15;\n        case 0x140003030:\n            uVar4 = *(*arg2 + 8);\n            uVar2 = (*arg2)[0xc];\n            **arg1 = **arg2;\n            *(*arg1 + 8) = uVar4;\n            (*arg1)[0xc] = uVar2;\n            return pauVar15;\n        case 0x140003046:\n            uVar3 = *(*arg2 + 8);\n            **arg1 = **arg2;\n            *(*arg1 + 8) = uVar3;\n            return pauVar15;\n        case 0x140003055:\n            uVar2 = (*arg2)[8];\n            **arg1 = **arg2;\n            (*arg1)[8] = uVar2;\n            return pauVar15;\n        case 0x140003063:\n            uVar4 = *(*arg2 + 8);\n            **arg1 = **arg2;\n            *(*arg1 + 8) = uVar4;\n            return pauVar15;\n        case 0x140003070:\n            uVar3 = *(*arg2 + 4);\n            **arg1 = **arg2;\n            *(*arg1 + 4) = uVar3;\n            return pauVar15;\n        case 0x14000307f:\n            uVar2 = (*arg2)[4];\n            **arg1 = **arg2;\n            (*arg1)[4] = uVar2;\n            return pauVar15;\n        case 0x14000308d:\n            **arg1 = **arg2;\n            return pauVar15;\n        case 0x140003094:\n            (*arg1)[0] = (*arg2)[0];\n            return pauVar15;\n        case 0x14000309a:\n            **arg1 = **arg2;\n            return pauVar15;\n        }\n    }\n    if (arg3 < 0x21) {\n        uVar4 = *(*arg2 + 4);\n        uVar5 = *(*arg2 + 8);\n        uVar6 = *(*arg2 + 0xc);\n        puVar18 = arg2[-1] + arg3 + 0x10;\n        uVar25 = *puVar18;\n        uVar27 = puVar18[1];\n        uVar28 = puVar18[2];\n        uVar29 = puVar18[3];\n        **arg1 = **arg2;\n        *(*arg1 + 4) = uVar4;\n        *(*arg1 + 8) = uVar5;\n        *(*arg1 + 0xc) = uVar6;\n        puVar18 = arg1[-1] + arg3 + 0x10;\n        *puVar18 = uVar25;\n        puVar18[1] = uVar27;\n        puVar18[2] = uVar28;\n        puVar18[3] = uVar29;\n        return pauVar15;\n    }\n    if ((arg2 < arg1) && (arg1 < *arg2 + arg3)) {\n        iVar23 = arg2 - arg1;\n        puVar18 = arg1 + iVar23 + (arg3 - 0x10);\n        uVar4 = puVar18[1];\n        uVar5 = puVar18[2];\n        uVar6 = puVar18[3];\n        puVar19 = arg1[-1] + arg3 + 0x10;\n        uVar22 = arg3 - 0x10;\n        puVar21 = puVar19;\n        uVar25 = *puVar18;\n        uVar27 = uVar4;\n        uVar28 = uVar5;\n        uVar29 = uVar6;\n        if ((puVar19 & 0xf) != 0) {\n            puVar21 = puVar19 & 0xfffffffffffffff0;\n            puVar1 = puVar21 + iVar23;\n            uVar25 = *puVar1;\n            uVar27 = puVar1[1];\n            uVar28 = puVar1[2];\n            uVar29 = puVar1[3];\n            *puVar19 = *puVar18;\n            *(arg1[-1] + arg3 + 0x14) = uVar4;\n            *(arg1[-1] + arg3 + 0x18) = uVar5;\n            *(arg1[-1] + arg3 + 0x1c) = uVar6;\n            uVar22 = puVar21 - arg1;\n        }\n        uVar24 = uVar22 >> 7;\n        if (uVar24 != 0) {\n            *puVar21 = uVar25;\n            puVar21[1] = uVar27;\n            puVar21[2] = uVar28;\n            puVar21[3] = uVar29;\n            puVar18 = puVar21;\n            while( true ) {\n                puVar19 = puVar18 + iVar23 + -0x10;\n                uVar4 = puVar19[1];\n                uVar5 = puVar19[2];\n                uVar6 = puVar19[3];\n                puVar21 = puVar18 + iVar23 + -0x20;\n                uVar25 = *puVar21;\n                uVar27 = puVar21[1];\n                uVar28 = puVar21[2];\n                uVar29 = puVar21[3];\n                puVar21 = puVar18 + -0x20;\n                puVar18[-4] = *puVar19;\n                puVar18[-3] = uVar4;\n                puVar18[-2] = uVar5;\n                puVar18[-1] = uVar6;\n                puVar18[-8] = uVar25;\n                puVar18[-7] = uVar27;\n                puVar18[-6] = uVar28;\n                puVar18[-5] = uVar29;\n                puVar19 = puVar18 + iVar23 + -0x30;\n                uVar4 = puVar19[1];\n                uVar5 = puVar19[2];\n                uVar6 = puVar19[3];\n                puVar1 = puVar18 + iVar23 + -0x40;\n                uVar25 = *puVar1;\n                uVar27 = puVar1[1];\n                uVar28 = puVar1[2];\n                uVar29 = puVar1[3];\n                uVar24 = uVar24 - 1;\n                puVar18[-0xc] = *puVar19;\n                puVar18[-0xb] = uVar4;\n                puVar18[-10] = uVar5;\n                puVar18[-9] = uVar6;\n                puVar18[-0x10] = uVar25;\n                puVar18[-0xf] = uVar27;\n                puVar18[-0xe] = uVar28;\n                puVar18[-0xd] = uVar29;\n                puVar19 = puVar18 + iVar23 + -0x50;\n                uVar4 = puVar19[1];\n                uVar5 = puVar19[2];\n                uVar6 = puVar19[3];\n                puVar1 = puVar18 + iVar23 + -0x60;\n                uVar25 = *puVar1;\n                uVar27 = puVar1[1];\n                uVar28 = puVar1[2];\n                uVar29 = puVar1[3];\n                puVar18[-0x14] = *puVar19;\n                puVar18[-0x13] = uVar4;\n                puVar18[-0x12] = uVar5;\n                puVar18[-0x11] = uVar6;\n                puVar18[-0x18] = uVar25;\n                puVar18[-0x17] = uVar27;\n                puVar18[-0x16] = uVar28;\n                puVar18[-0x15] = uVar29;\n                puVar1 = puVar18 + iVar23 + -0x70;\n                uVar4 = puVar1[1];\n                uVar5 = puVar1[2];\n                uVar6 = puVar1[3];\n                puVar19 = puVar21 + iVar23;\n                uVar25 = *puVar19;\n                uVar27 = puVar19[1];\n                uVar28 = puVar19[2];\n                uVar29 = puVar19[3];\n                if (uVar24 == 0) break;\n                puVar18[-0x1c] = *puVar1;\n                puVar18[-0x1b] = uVar4;\n                puVar18[-0x1a] = uVar5;\n                puVar18[-0x19] = uVar6;\n                *puVar21 = uVar25;\n                puVar18[-0x1f] = uVar27;\n                puVar18[-0x1e] = uVar28;\n                puVar18[-0x1d] = uVar29;\n                puVar18 = puVar21;\n            }\n            puVar18[-0x1c] = *puVar1;\n            puVar18[-0x1b] = uVar4;\n            puVar18[-0x1a] = uVar5;\n            puVar18[-0x19] = uVar6;\n            uVar22 = uVar22 & 0x7f;\n        }\n        for (uVar24 = uVar22 >> 4; uVar24 != 0; uVar24 = uVar24 - 1) {\n            *puVar21 = uVar25;\n            puVar21[1] = uVar27;\n            puVar21[2] = uVar28;\n            puVar21[3] = uVar29;\n            puVar21 = puVar21 + -4;\n            puVar18 = puVar21 + iVar23;\n            uVar25 = *puVar18;\n            uVar27 = puVar18[1];\n            uVar28 = puVar18[2];\n            uVar29 = puVar18[3];\n        }\n        if ((uVar22 & 0xf) != 0) {\n            uVar4 = *(*arg2 + 4);\n            uVar5 = *(*arg2 + 8);\n            uVar6 = *(*arg2 + 0xc);\n            **arg1 = **arg2;\n            *(*arg1 + 4) = uVar4;\n            *(*arg1 + 8) = uVar5;\n            *(*arg1 + 0xc) = uVar6;\n        }\n        *puVar21 = uVar25;\n        puVar21[1] = uVar27;\n        puVar21[2] = uVar28;\n        puVar21[3] = uVar29;\n        return arg1;\n    }\n    if (*0x140026020 < 3) {\n        if ((arg3 < 0x801) || ((*0x140026c3c & 2) == 0)) {\n            if (0x80 < arg3) {\n                iVar23 = (arg1 & 0xf) - 0x10;\n                puVar18 = arg1 - iVar23;\n                puVar21 = arg2 - iVar23;\n                arg3 = arg3 + iVar23;\n                if (0x80 < arg3) {\n                    do {\n                        uVar4 = puVar21[1];\n                        uVar5 = puVar21[2];\n                        uVar6 = puVar21[3];\n                        uVar25 = puVar21[4];\n                        uVar27 = puVar21[5];\n                        uVar28 = puVar21[6];\n                        uVar29 = puVar21[7];\n                        uVar7 = puVar21[8];\n                        uVar8 = puVar21[9];\n                        uVar9 = puVar21[10];\n                        uVar10 = puVar21[0xb];\n                        uVar11 = puVar21[0xc];\n                        uVar12 = puVar21[0xd];\n                        uVar13 = puVar21[0xe];\n                        uVar14 = puVar21[0xf];\n                        *puVar18 = *puVar21;\n                        puVar18[1] = uVar4;\n                        puVar18[2] = uVar5;\n                        puVar18[3] = uVar6;\n                        puVar18[4] = uVar25;\n                        puVar18[5] = uVar27;\n                        puVar18[6] = uVar28;\n                        puVar18[7] = uVar29;\n                        puVar18[8] = uVar7;\n                        puVar18[9] = uVar8;\n                        puVar18[10] = uVar9;\n                        puVar18[0xb] = uVar10;\n                        puVar18[0xc] = uVar11;\n                        puVar18[0xd] = uVar12;\n                        puVar18[0xe] = uVar13;\n                        puVar18[0xf] = uVar14;\n                        uVar4 = puVar21[0x11];\n                        uVar5 = puVar21[0x12];\n                        uVar6 = puVar21[0x13];\n                        uVar25 = puVar21[0x14];\n                        uVar27 = puVar21[0x15];\n                        uVar28 = puVar21[0x16];\n                        uVar29 = puVar21[0x17];\n                        uVar7 = puVar21[0x18];\n                        uVar8 = puVar21[0x19];\n                        uVar9 = puVar21[0x1a];\n                        uVar10 = puVar21[0x1b];\n                        uVar11 = puVar21[0x1c];\n                        uVar12 = puVar21[0x1d];\n                        uVar13 = puVar21[0x1e];\n                        uVar14 = puVar21[0x1f];\n                        puVar18[0x10] = puVar21[0x10];\n                        puVar18[0x11] = uVar4;\n                        puVar18[0x12] = uVar5;\n                        puVar18[0x13] = uVar6;\n                        puVar18[0x14] = uVar25;\n                        puVar18[0x15] = uVar27;\n                        puVar18[0x16] = uVar28;\n                        puVar18[0x17] = uVar29;\n                        puVar18[0x18] = uVar7;\n                        puVar18[0x19] = uVar8;\n                        puVar18[0x1a] = uVar9;\n                        puVar18[0x1b] = uVar10;\n                        puVar18[0x1c] = uVar11;\n                        puVar18[0x1d] = uVar12;\n                        puVar18[0x1e] = uVar13;\n                        puVar18[0x1f] = uVar14;\n                        puVar18 = puVar18 + 0x20;\n                        puVar21 = puVar21 + 0x20;\n                        arg3 = arg3 - 0x80;\n                    } while (0x7f < arg3);\n                }\n            }\n    // WARNING: Could not recover jumptable at 0x000140003496. Too many branches\n    // WARNING: Treating indirect jump as call\n    // switch table (9 cases) at 0x14002a088\n            pauVar15 = (*(*((arg3 + 0xf >> 4) * 4 + 0x14002a088) + 0x140000000))();\n            return pauVar15;\n        }\n    }\n    else if (((arg3 < 0x2001) || (0x180000 < arg3)) || ((*0x140026c3c & 2) == 0)) {\n        auVar26 = vmovdqu_avx(*arg2);\n        auVar34 = vmovdqu_avx(*(arg2[-1] + arg3));\n        if (0x100 < arg3) {\n            iVar23 = (arg1 & 0x1f) - 0x20;\n            pauVar16 = arg1 - iVar23;\n            arg2 = arg2 - iVar23;\n            arg3 = arg3 + iVar23;\n            if (0x100 < arg3) {\n                if (0x180000 < arg3) {\n                    do {\n                        uVar22 = arg3;\n                        pauVar20 = arg2;\n                        pauVar17 = pauVar16;\n                        auVar30 = vmovdqu_avx(*pauVar20);\n                        auVar31 = vmovdqu_avx(pauVar20[1]);\n                        auVar32 = vmovdqu_avx(pauVar20[2]);\n                        auVar33 = vmovdqu_avx(pauVar20[3]);\n                        auVar30 = vmovntdq_avx(auVar30);\n                        *pauVar17 = auVar30;\n                        auVar30 = vmovntdq_avx(auVar31);\n                        pauVar17[1] = auVar30;\n                        auVar30 = vmovntdq_avx(auVar32);\n                        pauVar17[2] = auVar30;\n                        auVar30 = vmovntdq_avx(auVar33);\n                        pauVar17[3] = auVar30;\n                        auVar30 = vmovdqu_avx(pauVar20[4]);\n                        auVar31 = vmovdqu_avx(pauVar20[5]);\n                        auVar32 = vmovdqu_avx(pauVar20[6]);\n                        auVar33 = vmovdqu_avx(pauVar20[7]);\n                        auVar30 = vmovntdq_avx(auVar30);\n                        pauVar17[4] = auVar30;\n                        auVar30 = vmovntdq_avx(auVar31);\n                        pauVar17[5] = auVar30;\n                        auVar30 = vmovntdq_avx(auVar32);\n                        pauVar17[6] = auVar30;\n                        auVar30 = vmovntdq_avx(auVar33);\n                        pauVar17[7] = auVar30;\n                        pauVar16 = pauVar17[8];\n                        arg2 = pauVar20[8];\n                        arg3 = uVar22 - 0x100;\n                    } while (0xff < uVar22 - 0x100);\n                    uVar24 = uVar22 - 0xe1 & 0xffffffffffffffe0;\n    // switch table (18 cases) at 0x14002a064\n                    switch(uVar22) {\n                    case 0x1e1:\n                    case 0x1e2:\n                    case 0x1e3:\n                    case 0x1e4:\n                    case 0x1e5:\n                    case 0x1e6:\n                    case 0x1e7:\n                    case 0x1e8:\n                    case 0x1e9:\n                    case 0x1ea:\n                    case 0x1eb:\n                    case 0x1ec:\n                    case 0x1ed:\n                    case 0x1ee:\n                    case 0x1ef:\n                    case 0x1f0:\n                    case 0x1f1:\n                    case 0x1f2:\n                    case 499:\n                    case 500:\n                    case 0x1f5:\n                    case 0x1f6:\n                    case 0x1f7:\n                    case 0x1f8:\n                    case 0x1f9:\n                    case 0x1fa:\n                    case 0x1fb:\n                    case 0x1fc:\n                    case 0x1fd:\n                    case 0x1fe:\n                    case 0x1ff:\n                        auVar30 = vmovdqu_avx(*(*pauVar20 + uVar24));\n                        auVar30 = vmovntdq_avx(auVar30);\n                        *(*pauVar17 + uVar24) = auVar30;\n                    case 0x1c1:\n                    case 0x1c2:\n                    case 0x1c3:\n                    case 0x1c4:\n                    case 0x1c5:\n                    case 0x1c6:\n                    case 0x1c7:\n                    case 0x1c8:\n                    case 0x1c9:\n                    case 0x1ca:\n                    case 0x1cb:\n                    case 0x1cc:\n                    case 0x1cd:\n                    case 0x1ce:\n                    case 0x1cf:\n                    case 0x1d0:\n                    case 0x1d1:\n                    case 0x1d2:\n                    case 0x1d3:\n                    case 0x1d4:\n                    case 0x1d5:\n                    case 0x1d6:\n                    case 0x1d7:\n                    case 0x1d8:\n                    case 0x1d9:\n                    case 0x1da:\n                    case 0x1db:\n                    case 0x1dc:\n                    case 0x1dd:\n                    case 0x1de:\n                    case 0x1df:\n                    case 0x1e0:\n                        auVar30 = vmovdqu_avx(*(pauVar20[1] + uVar24));\n                        auVar30 = vmovntdq_avx(auVar30);\n                        *(pauVar17[1] + uVar24) = auVar30;\n                    case 0x1a1:\n                    case 0x1a2:\n                    case 0x1a3:\n                    case 0x1a4:\n                    case 0x1a5:\n                    case 0x1a6:\n                    case 0x1a7:\n                    case 0x1a8:\n                    case 0x1a9:\n                    case 0x1aa:\n                    case 0x1ab:\n                    case 0x1ac:\n                    case 0x1ad:\n                    case 0x1ae:\n                    case 0x1af:\n                    case 0x1b0:\n                    case 0x1b1:\n                    case 0x1b2:\n                    case 0x1b3:\n                    case 0x1b4:\n                    case 0x1b5:\n                    case 0x1b6:\n                    case 0x1b7:\n                    case 0x1b8:\n                    case 0x1b9:\n                    case 0x1ba:\n                    case 0x1bb:\n                    case 0x1bc:\n                    case 0x1bd:\n                    case 0x1be:\n                    case 0x1bf:\n                    case 0x1c0:\n                        auVar30 = vmovdqu_avx(*(pauVar20[2] + uVar24));\n                        auVar30 = vmovntdq_avx(auVar30);\n                        *(pauVar17[2] + uVar24) = auVar30;\n                    case 0x181:\n                    case 0x182:\n                    case 0x183:\n                    case 0x184:\n                    case 0x185:\n                    case 0x186:\n                    case 0x187:\n                    case 0x188:\n                    case 0x189:\n                    case 0x18a:\n                    case 0x18b:\n                    case 0x18c:\n                    case 0x18d:\n                    case 0x18e:\n                    case 399:\n                    case 400:\n                    case 0x191:\n                    case 0x192:\n                    case 0x193:\n                    case 0x194:\n                    case 0x195:\n                    case 0x196:\n                    case 0x197:\n                    case 0x198:\n                    case 0x199:\n                    case 0x19a:\n                    case 0x19b:\n                    case 0x19c:\n                    case 0x19d:\n                    case 0x19e:\n                    case 0x19f:\n                    case 0x1a0:\n                        auVar30 = vmovdqu_avx(*(pauVar20[3] + uVar24));\n                        auVar30 = vmovntdq_avx(auVar30);\n                        *(pauVar17[3] + uVar24) = auVar30;\n                    case 0x161:\n                    case 0x162:\n                    case 0x163:\n                    case 0x164:\n                    case 0x165:\n                    case 0x166:\n                    case 0x167:\n                    case 0x168:\n                    case 0x169:\n                    case 0x16a:\n                    case 0x16b:\n                    case 0x16c:\n                    case 0x16d:\n                    case 0x16e:\n                    case 0x16f:\n                    case 0x170:\n                    case 0x171:\n                    case 0x172:\n                    case 0x173:\n                    case 0x174:\n                    case 0x175:\n                    case 0x176:\n                    case 0x177:\n                    case 0x178:\n                    case 0x179:\n                    case 0x17a:\n                    case 0x17b:\n                    case 0x17c:\n                    case 0x17d:\n                    case 0x17e:\n                    case 0x17f:\n                    case 0x180:\n                        auVar30 = vmovdqu_avx(*(pauVar20[4] + uVar24));\n                        auVar30 = vmovntdq_avx(auVar30);\n                        *(pauVar17[4] + uVar24) = auVar30;\n                    case 0x141:\n                    case 0x142:\n                    case 0x143:\n                    case 0x144:\n                    case 0x145:\n                    case 0x146:\n                    case 0x147:\n                    case 0x148:\n                    case 0x149:\n                    case 0x14a:\n                    case 0x14b:\n                    case 0x14c:\n                    case 0x14d:\n                    case 0x14e:\n                    case 0x14f:\n                    case 0x150:\n                    case 0x151:\n                    case 0x152:\n                    case 0x153:\n                    case 0x154:\n                    case 0x155:\n                    case 0x156:\n                    case 0x157:\n                    case 0x158:\n                    case 0x159:\n                    case 0x15a:\n                    case 0x15b:\n                    case 0x15c:\n                    case 0x15d:\n                    case 0x15e:\n                    case 0x15f:\n                    case 0x160:\n                        auVar30 = vmovdqu_avx(*(pauVar20[5] + uVar24));\n                        auVar30 = vmovntdq_avx(auVar30);\n                        *(pauVar17[5] + uVar24) = auVar30;\n                    case 0x121:\n                    case 0x122:\n                    case 0x123:\n                    case 0x124:\n                    case 0x125:\n                    case 0x126:\n                    case 0x127:\n                    case 0x128:\n                    case 0x129:\n                    case 0x12a:\n                    case 299:\n                    case 300:\n                    case 0x12d:\n                    case 0x12e:\n                    case 0x12f:\n                    case 0x130:\n                    case 0x131:\n                    case 0x132:\n                    case 0x133:\n                    case 0x134:\n                    case 0x135:\n                    case 0x136:\n                    case 0x137:\n                    case 0x138:\n                    case 0x139:\n                    case 0x13a:\n                    case 0x13b:\n                    case 0x13c:\n                    case 0x13d:\n                    case 0x13e:\n                    case 0x13f:\n                    case 0x140:\n                        auVar30 = vmovdqu_avx(*(pauVar20[6] + uVar24));\n                        auVar30 = vmovntdq_avx(auVar30);\n                        *(pauVar17[6] + uVar24) = auVar30;\n                    default:\n                        auVar34 = vmovdqu_avx(auVar34);\n                        *(pauVar17[-1] + uVar22) = auVar34;\n                    case 0x100:\n                        auVar26 = vmovdqu_avx(auVar26);\n                        *arg1 = auVar26;\n                        vzeroupper_avx();\n                        return pauVar15;\n                    }\n                }\n                do {\n                    auVar34 = vmovdqu_avx(*arg2);\n                    auVar30 = vmovdqu_avx(arg2[1]);\n                    auVar31 = vmovdqu_avx(arg2[2]);\n                    auVar32 = vmovdqu_avx(arg2[3]);\n                    *pauVar16 = auVar34;\n                    pauVar16[1] = auVar30;\n                    pauVar16[2] = auVar31;\n                    pauVar16[3] = auVar32;\n                    auVar34 = vmovdqu_avx(arg2[4]);\n                    auVar30 = vmovdqu_avx(arg2[5]);\n                    auVar31 = vmovdqu_avx(arg2[6]);\n                    auVar32 = vmovdqu_avx(arg2[7]);\n                    pauVar16[4] = auVar34;\n                    pauVar16[5] = auVar30;\n                    pauVar16[6] = auVar31;\n                    pauVar16[7] = auVar32;\n                    pauVar16 = pauVar16[8];\n                    arg2 = arg2[8];\n                    arg3 = arg3 - 0x100;\n                } while (0xff < arg3);\n            }\n        }\n    // WARNING: Could not recover jumptable at 0x0001400031f2. Too many branches\n    // WARNING: Treating indirect jump as call\n    // switch table (27 cases) at 0x14002a040\n        pauVar15 = (*(*((arg3 + 0x1f >> 5) * 4 + 0x14002a040) + 0x140000000))(SUB328(auVar26, 0));\n        return pauVar15;\n    }\n    for (; arg3 != 0; arg3 = arg3 - 1) {\n        (*arg1)[0] = (*arg2)[0];\n        arg2 = *arg2 + 1;\n        arg1 = *arg1 + 1;\n    }\n    return pauVar15;\n}\n",
        "token_count": 7520
    },
    "14000363": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nuchar (*) [32] fcn.140003630(uchar (*arg1) [32], ulong noname_1, uint64_t arg3)\n\n{\n    uchar auVar1 [32];\n    uchar (*pauVar2) [32];\n    uchar (*pauVar3) [32];\n    uchar (*pauVar4) [16];\n    uint64_t uVar5;\n    uint64_t uVar6;\n    uchar uVar7;\n    int64_t iVar10;\n    uchar auVar11 [16];\n    uchar in_YMM0 [32];\n    uchar auVar12 [32];\n    ushort uVar8;\n    uint uVar9;\n    \n    uVar5 = noname_1;\n    iVar10 = uVar5 * 0x101010101010101;\n    if (arg3 < 0x10) {\n        uVar7 = iVar10;\n        uVar8 = iVar10;\n        uVar9 = iVar10;\n    // switch table (16 cases) at 0x14002a0b0\n        switch(*(arg3 * 4 + 0x14002a0b0) + 0x140000000) {\n        case 0x140003671:\n            *(arg1[-1] + arg3 + 0x11) = iVar10;\n        case 0x140003675:\n            *(arg1[-1] + arg3 + 0x19) = uVar9;\n        case 0x140003679:\n            *(arg1[-1] + arg3 + 0x1d) = uVar8;\n        case 0x14000367e:\n            arg1[-1][arg3 + 0x1f] = uVar7;\n            return arg1;\n        case 0x140003682:\n            return arg1;\n        case 0x140003683:\n            *(arg1[-1] + arg3 + 0x12) = iVar10;\n        case 0x140003687:\n            *(arg1[-1] + arg3 + 0x1a) = uVar9;\n        case 0x14000368b:\n            *(arg1[-1] + arg3 + 0x1e) = uVar8;\n            return arg1;\n        case 0x1400036a0:\n            *(arg1[-1] + arg3 + 0x13) = iVar10;\n        case 0x1400036a4:\n            *(arg1[-1] + arg3 + 0x1b) = uVar9;\n            arg1[-1][arg3 + 0x1f] = uVar7;\n            return arg1;\n        case 0x1400036b0:\n            *(arg1[-1] + arg3 + 0x14) = iVar10;\n        case 0x1400036b4:\n            *(arg1[-1] + arg3 + 0x1c) = uVar9;\n            return arg1;\n        case 0x1400036b9:\n            *(arg1[-1] + arg3 + 0x15) = iVar10;\n            *(arg1[-1] + arg3 + 0x1d) = uVar8;\n            arg1[-1][arg3 + 0x1f] = uVar7;\n            return arg1;\n        case 0x1400036c7:\n            *(arg1[-1] + arg3 + 0x17) = iVar10;\n            arg1[-1][arg3 + 0x1f] = uVar7;\n            return arg1;\n        case 0x1400036d0:\n            *(arg1[-1] + arg3 + 0x16) = iVar10;\n            *(arg1[-1] + arg3 + 0x1e) = uVar8;\n            return arg1;\n        case 0x1400036da:\n            *(arg1[-1] + arg3 + 0x18) = iVar10;\n            return arg1;\n        }\n    }\n    auVar11 = CONCAT88(iVar10, iVar10);\n    if (arg3 < 0x21) {\n        **arg1 = auVar11;\n        *(arg1[-1] + arg3 + 0x10) = auVar11;\n        return arg1;\n    }\n    pauVar2 = arg1;\n    if (*0x140026020 < 3) {\n        if ((arg3 <= *0x140026028) || ((*0x140026c3c & 2) == 0)) {\n            iVar10 = (arg1 & 0xf) - 0x10;\n            pauVar4 = arg1 - iVar10;\n            arg3 = arg3 + iVar10;\n            if (0x80 < arg3) {\n                do {\n                    *pauVar4 = auVar11;\n                    pauVar4[1] = auVar11;\n                    pauVar4[2] = auVar11;\n                    pauVar4[3] = auVar11;\n                    pauVar4[4] = auVar11;\n                    pauVar4[5] = auVar11;\n                    pauVar4[6] = auVar11;\n                    pauVar4[7] = auVar11;\n                    pauVar4 = pauVar4[8];\n                    arg3 = arg3 - 0x80;\n                } while (0x7f < arg3);\n            }\n    // WARNING: Could not recover jumptable at 0x000140003978. Too many branches\n    // WARNING: Treating indirect jump as call\n    // switch table (9 cases) at 0x14002a138\n            pauVar2 = (*(*((arg3 + 0xf >> 4) * 4 + 0x14002a138) + 0x140000000))(pauVar4, uVar5 - iVar10);\n            return pauVar2;\n        }\n    }\n    else if (((arg3 <= *0x140026028) || (*0x140026030 < arg3)) || ((*0x140026c3c & 2) == 0)) {\n        auVar12 = vinsertf128_avx(CONCAT1616(SUB3216(in_YMM0 >> 0x80, 0), auVar11), auVar11, 1);\n        iVar10 = (arg1 & 0x1f) - 0x20;\n        pauVar2 = arg1 - iVar10;\n        arg3 = arg3 + iVar10;\n        if (0x100 < arg3) {\n            if (*0x140026030 < arg3) {\n                do {\n                    uVar5 = arg3;\n                    pauVar3 = pauVar2;\n                    auVar1 = vmovntdq_avx(auVar12);\n                    *pauVar3 = auVar1;\n                    auVar1 = vmovntdq_avx(auVar12);\n                    pauVar3[1] = auVar1;\n                    auVar1 = vmovntdq_avx(auVar12);\n                    pauVar3[2] = auVar1;\n                    auVar1 = vmovntdq_avx(auVar12);\n                    pauVar3[3] = auVar1;\n                    auVar1 = vmovntdq_avx(auVar12);\n                    pauVar3[4] = auVar1;\n                    auVar1 = vmovntdq_avx(auVar12);\n                    pauVar3[5] = auVar1;\n                    auVar1 = vmovntdq_avx(auVar12);\n                    pauVar3[6] = auVar1;\n                    auVar1 = vmovntdq_avx(auVar12);\n                    pauVar3[7] = auVar1;\n                    pauVar2 = pauVar3[8];\n                    arg3 = uVar5 - 0x100;\n                } while (0xff < uVar5 - 0x100);\n                uVar6 = uVar5 - 0xe1 & 0xffffffffffffffe0;\n    // switch table (18 cases) at 0x14002a114\n                switch(uVar5) {\n                case 0x1e1:\n                case 0x1e2:\n                case 0x1e3:\n                case 0x1e4:\n                case 0x1e5:\n                case 0x1e6:\n                case 0x1e7:\n                case 0x1e8:\n                case 0x1e9:\n                case 0x1ea:\n                case 0x1eb:\n                case 0x1ec:\n                case 0x1ed:\n                case 0x1ee:\n                case 0x1ef:\n                case 0x1f0:\n                case 0x1f1:\n                case 0x1f2:\n                case 499:\n                case 500:\n                case 0x1f5:\n                case 0x1f6:\n                case 0x1f7:\n                case 0x1f8:\n                case 0x1f9:\n                case 0x1fa:\n                case 0x1fb:\n                case 0x1fc:\n                case 0x1fd:\n                case 0x1fe:\n                case 0x1ff:\n                    auVar1 = vmovntdq_avx(auVar12);\n                    *(*pauVar3 + uVar6) = auVar1;\n                case 0x1c1:\n                case 0x1c2:\n                case 0x1c3:\n                case 0x1c4:\n                case 0x1c5:\n                case 0x1c6:\n                case 0x1c7:\n                case 0x1c8:\n                case 0x1c9:\n                case 0x1ca:\n                case 0x1cb:\n                case 0x1cc:\n                case 0x1cd:\n                case 0x1ce:\n                case 0x1cf:\n                case 0x1d0:\n                case 0x1d1:\n                case 0x1d2:\n                case 0x1d3:\n                case 0x1d4:\n                case 0x1d5:\n                case 0x1d6:\n                case 0x1d7:\n                case 0x1d8:\n                case 0x1d9:\n                case 0x1da:\n                case 0x1db:\n                case 0x1dc:\n                case 0x1dd:\n                case 0x1de:\n                case 0x1df:\n                case 0x1e0:\n                    auVar1 = vmovntdq_avx(auVar12);\n                    *(pauVar3[1] + uVar6) = auVar1;\n                case 0x1a1:\n                case 0x1a2:\n                case 0x1a3:\n                case 0x1a4:\n                case 0x1a5:\n                case 0x1a6:\n                case 0x1a7:\n                case 0x1a8:\n                case 0x1a9:\n                case 0x1aa:\n                case 0x1ab:\n                case 0x1ac:\n                case 0x1ad:\n                case 0x1ae:\n                case 0x1af:\n                case 0x1b0:\n                case 0x1b1:\n                case 0x1b2:\n                case 0x1b3:\n                case 0x1b4:\n                case 0x1b5:\n                case 0x1b6:\n                case 0x1b7:\n                case 0x1b8:\n                case 0x1b9:\n                case 0x1ba:\n                case 0x1bb:\n                case 0x1bc:\n                case 0x1bd:\n                case 0x1be:\n                case 0x1bf:\n                case 0x1c0:\n                    auVar1 = vmovntdq_avx(auVar12);\n                    *(pauVar3[2] + uVar6) = auVar1;\n                case 0x181:\n                case 0x182:\n                case 0x183:\n                case 0x184:\n                case 0x185:\n                case 0x186:\n                case 0x187:\n                case 0x188:\n                case 0x189:\n                case 0x18a:\n                case 0x18b:\n                case 0x18c:\n                case 0x18d:\n                case 0x18e:\n                case 399:\n                case 400:\n                case 0x191:\n                case 0x192:\n                case 0x193:\n                case 0x194:\n                case 0x195:\n                case 0x196:\n                case 0x197:\n                case 0x198:\n                case 0x199:\n                case 0x19a:\n                case 0x19b:\n                case 0x19c:\n                case 0x19d:\n                case 0x19e:\n                case 0x19f:\n                case 0x1a0:\n                    auVar1 = vmovntdq_avx(auVar12);\n                    *(pauVar3[3] + uVar6) = auVar1;\n                case 0x161:\n                case 0x162:\n                case 0x163:\n                case 0x164:\n                case 0x165:\n                case 0x166:\n                case 0x167:\n                case 0x168:\n                case 0x169:\n                case 0x16a:\n                case 0x16b:\n                case 0x16c:\n                case 0x16d:\n                case 0x16e:\n                case 0x16f:\n                case 0x170:\n                case 0x171:\n                case 0x172:\n                case 0x173:\n                case 0x174:\n                case 0x175:\n                case 0x176:\n                case 0x177:\n                case 0x178:\n                case 0x179:\n                case 0x17a:\n                case 0x17b:\n                case 0x17c:\n                case 0x17d:\n                case 0x17e:\n                case 0x17f:\n                case 0x180:\n                    auVar1 = vmovntdq_avx(auVar12);\n                    *(pauVar3[4] + uVar6) = auVar1;\n                case 0x141:\n                case 0x142:\n                case 0x143:\n                case 0x144:\n                case 0x145:\n                case 0x146:\n                case 0x147:\n                case 0x148:\n                case 0x149:\n                case 0x14a:\n                case 0x14b:\n                case 0x14c:\n                case 0x14d:\n                case 0x14e:\n                case 0x14f:\n                case 0x150:\n                case 0x151:\n                case 0x152:\n                case 0x153:\n                case 0x154:\n                case 0x155:\n                case 0x156:\n                case 0x157:\n                case 0x158:\n                case 0x159:\n                case 0x15a:\n                case 0x15b:\n                case 0x15c:\n                case 0x15d:\n                case 0x15e:\n                case 0x15f:\n                case 0x160:\n                    auVar1 = vmovntdq_avx(auVar12);\n                    *(pauVar3[5] + uVar6) = auVar1;\n                case 0x121:\n                case 0x122:\n                case 0x123:\n                case 0x124:\n                case 0x125:\n                case 0x126:\n                case 0x127:\n                case 0x128:\n                case 0x129:\n                case 0x12a:\n                case 299:\n                case 300:\n                case 0x12d:\n                case 0x12e:\n                case 0x12f:\n                case 0x130:\n                case 0x131:\n                case 0x132:\n                case 0x133:\n                case 0x134:\n                case 0x135:\n                case 0x136:\n                case 0x137:\n                case 0x138:\n                case 0x139:\n                case 0x13a:\n                case 0x13b:\n                case 0x13c:\n                case 0x13d:\n                case 0x13e:\n                case 0x13f:\n                case 0x140:\n                    auVar1 = vmovntdq_avx(auVar12);\n                    *(pauVar3[6] + uVar6) = auVar1;\n                default:\n                    auVar1 = vmovdqu_avx(auVar12);\n                    *(pauVar3[-1] + uVar5) = auVar1;\n                case 0x100:\n                    auVar12 = vmovdqu_avx(auVar12);\n                    *arg1 = auVar12;\n                    vzeroupper_avx();\n                    return arg1;\n                }\n            }\n            do {\n                *pauVar2 = auVar12;\n                pauVar2[1] = auVar12;\n                pauVar2[2] = auVar12;\n                pauVar2[3] = auVar12;\n                pauVar2[4] = auVar12;\n                pauVar2[5] = auVar12;\n                pauVar2[6] = auVar12;\n                pauVar2[7] = auVar12;\n                pauVar2 = pauVar2[8];\n                arg3 = arg3 - 0x100;\n            } while (0xff < arg3);\n        }\n    // WARNING: Could not recover jumptable at 0x0001400037c4. Too many branches\n    // WARNING: Treating indirect jump as call\n    // switch table (27 cases) at 0x14002a0f0\n        pauVar2 = (*(*((arg3 + 0x1f >> 5) * 4 + 0x14002a0f0) + 0x140000000))\n                            (SUB328(auVar12, 0), pauVar2, uVar5 - iVar10);\n        return pauVar2;\n    }\n    for (; arg3 != 0; arg3 = arg3 - 1) {\n        (*pauVar2)[0] = noname_1;\n        pauVar2 = *pauVar2 + 1;\n    }\n    return arg1;\n}\n",
        "token_count": 4158
    },
    "14000452": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuchar fcn.14000452c(void)\n\n{\n    if (*0x140026040 != 0xffffffff) {\n        fcn.140005e24(*0x140026040);\n        *0x140026040 = 0xffffffff;\n    }\n    return 1;\n}\n",
        "token_count": 61
    },
    "14000657": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint64_t fcn.140006574(char *arg1, uint64_t arg2, uint64_t arg3, int64_t *arg4)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint64_t uVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uint64_t uVar6;\n    uint32_t uVar7;\n    int64_t in_stack_00000028;\n    \n    if ((arg2 != 0) && (arg3 != 0)) {\n        if ((arg4 != NULL) &&\n           ((arg1 != NULL && (arg3 <= SUB168((ZEXT816(0) << 0x40 | ZEXT816(0xffffffffffffffff)) / ZEXT816(arg2), 0)))))\n        {\n            if ((*(arg4 + 0x14) & 0x4c0) == 0) {\n                uVar7 = 0x1000;\n            }\n            else {\n                uVar7 = *(arg4 + 4);\n            }\n            uVar6 = arg2 * arg3;\n            do {\n                if (uVar6 == 0) {\n                    return arg3;\n                }\n                if (((*(arg4 + 0x14) & 0xc0) == 0) || (*(arg4 + 2) == 0)) {\n                    if (uVar7 <= uVar6) {\n                        if (((*(arg4 + 0x14) & 0xc0) != 0) &&\n                           (iVar1 = fcn.14000b6b8(arg4, in_stack_00000028),  iVar1 != 0)) goto code_r0x000140006720;\n                        uVar3 = uVar6;\n                        if (uVar7 != 0) {\n                            uVar3 = uVar6 - uVar6 % uVar7;\n                        }\n                        uVar5 = 0xfffffffe;\n                        if (uVar3 < 0xfffffffe) {\n                            uVar5 = uVar3;\n                        }\n                        uVar2 = fcn.14000aec8(arg4);\n                        uVar2 = fcn.14000cb0c(uVar2, arg1, uVar5, in_stack_00000028);\n                        if (uVar2 != 0xffffffff) {\n                            uVar4 = uVar2;\n                            if (uVar5 < uVar2) {\n                                uVar4 = uVar5;\n                            }\n                            uVar3 = uVar4;\n                            uVar6 = uVar6 - uVar3;\n                            if (uVar5 <= uVar2) goto code_r0x00014000675e;\n                        }\ncode_r0x00014000671b:\n                        LOCK();\n                        *(arg4 + 0x14) = *(arg4 + 0x14) | 0x10;\ncode_r0x000140006720:\n                        return (arg2 * arg3 - uVar6) / arg2;\n                    }\n                    iVar1 = fcn.14000d0b8(*arg1, arg4, in_stack_00000028);\n                    if (iVar1 == -1) goto code_r0x000140006720;\n                    uVar7 = *(arg4 + 4);\n                    uVar6 = uVar6 - 1;\n                    uVar3 = 1;\n                    if (uVar7 < 1) {\n                        uVar7 = 1;\n                    }\n                }\n                else {\n                    if (*(arg4 + 2) < 0) goto code_r0x00014000671b;\n                    if ((*(arg4 + 0x14) & 1) != 0) goto code_r0x000140006720;\n                    uVar3 = uVar6;\n                    if (*(arg4 + 2) <= uVar6) {\n                        uVar3 = *(arg4 + 2);\n                    }\n                    fcn.140002f80(*arg4, arg1, uVar3);\n                    *(arg4 + 2) = *(arg4 + 2) - uVar3;\n                    uVar6 = uVar6 - uVar3;\n                    *arg4 = *arg4 + uVar3;\n                }\ncode_r0x00014000675e:\n                arg1 = arg1 + uVar3;\n            } while( true );\n        }\n        *(in_stack_00000028 + 0x30) = 1;\n        *(in_stack_00000028 + 0x2c) = 0x16;\n        fcn.1400094e8(0, 0, 0, 0);\n    }\n    return 0;\n}\n",
        "token_count": 1010
    },
    "14000846": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nulong fcn.140008464(int64_t arg1)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    char *arg1_00;\n    \n    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n    iVar2 = *(arg1 + 0x30);\n    arg1_00 = *(*(arg1 + 0x18) + -8);\n    iVar1 = *(arg1 + 0x34);\n    if (iVar2 == -1) {\n        iVar2 = 0x7fffffff;\n    }\n    *(arg1 + 0x40) = arg1_00;\n    if ((iVar1 == 2) ||\n       (((iVar1 != 3 && (iVar1 != 0xc)) && ((*(arg1 + 0x34) == 0xd || ((*(arg1 + 0x39) + 0x9dU & 0xef) == 0)))))) {\n        if (arg1_00 == NULL) {\n            arg1_00 = \"(null)\";\n            *(arg1 + 0x40) = \"(null)\";\n        }\n        uVar3 = fcn.14000d328(arg1_00, iVar2);\n    }\n    else {\n        if (arg1_00 == NULL) {\n            arg1_00 = 0x14001bbc0;\n            *(arg1 + 0x40) = 0x14001bbc0;\n        }\n        *(arg1 + 0x4c) = 1;\n        uVar3 = fcn.14000d478(arg1_00, iVar2);\n    }\n    *(arg1 + 0x48) = uVar3;\n    return 1;\n}\n",
        "token_count": 387
    },
    "14000bc6": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint64_t fcn.14000bc6c(ulong noname_0, ulong lpFlsData)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    \n    if ((*0x140026168 == -1) || (iVar3 = sub.KERNEL32.dll_FlsGetValue(),  iVar3 == 0)) {\n        iVar2 = sub.KERNEL32.dll_FlsSetValue(*0x140026168, 0xffffffffffffffff);\n        if (iVar2 != 0) {\n            iVar3 = fcn.14000fa1c(1, 0x3c8);\n            if (iVar3 == 0) {\n                sub.KERNEL32.dll_FlsSetValue(*0x140026168, 0);\n                iVar3 = 0;\n            }\n            else {\n                iVar2 = sub.KERNEL32.dll_FlsSetValue(*0x140026168, iVar3);\n                if (iVar2 != 0) {\n                    fcn.14000b948(iVar3);\n                    fcn.14000ae8c(0);\n                    return iVar3;\n                }\n                sub.KERNEL32.dll_FlsSetValue(*0x140026168, 0);\n            }\n            fcn.14000ae8c(iVar3);\n        }\n    }\n    else if (iVar3 != -1) {\n        return iVar3;\n    }\n    fcn.140009124();\n    pcVar1 = swi(3);\n    iVar3 = (*pcVar1)();\n    return iVar3;\n}\n",
        "token_count": 331
    },
    "14000bdd": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint64_t fcn.14000bdd8(ulong noname_0, int64_t lpFlsData)\n\n{\n    int32_t iVar1;\n    int64_t arg1;\n    int64_t iVar2;\n    \n    iVar2 = 0;\n    if ((*0x140026168 == -1) || (arg1 = sub.KERNEL32.dll_FlsGetValue(),  arg1 == 0)) {\n        iVar1 = sub.KERNEL32.dll_FlsSetValue(*0x140026168, 0xffffffffffffffff);\n        if (iVar1 == 0) {\n            return 0;\n        }\n        arg1 = fcn.14000fa1c(1, 0x3c8);\n        if (arg1 == 0) {\n            sub.KERNEL32.dll_FlsSetValue(*0x140026168, 0);\n            arg1 = 0;\n        }\n        else {\n            iVar1 = sub.KERNEL32.dll_FlsSetValue(*0x140026168, arg1);\n            if (iVar1 != 0) {\n                fcn.14000b948(arg1);\n                fcn.14000ae8c(0);\n                goto code_r0x00014000be79;\n            }\n            sub.KERNEL32.dll_FlsSetValue(*0x140026168, 0);\n        }\n        fcn.14000ae8c(arg1);\n    }\n    else {\n        if (arg1 == -1) {\n            return 0;\n        }\ncode_r0x00014000be79:\n        iVar2 = lpFlsData * 0x3c8 + arg1;\n    }\n    return iVar2;\n}\n",
        "token_count": 355
    },
    "14000bed": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuchar fcn.14000bed4(void)\n\n{\n    if (*0x140026168 != -1) {\n        sub.KERNEL32.dll_FlsFree();\n        *0x140026168 = -1;\n    }\n    return 1;\n}\n",
        "token_count": 54
    },
    "14001284": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint32_t fcn.14001284c(void)\n\n{\n    int64_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int64_t iVar4;\n    int32_t iStack24;\n    \n    iStack24 = 0;\n    fcn.14000f970(8);\n    for (iVar3 = 3; iVar3 != *0x140027508; iVar3 = iVar3 + 1) {\n        iVar4 = iVar3;\n        iVar1 = *(*0x140027510 + iVar4 * 8);\n        if (iVar1 != 0) {\n            if (((*(iVar1 + 0x14) >> 0xd & 1) != 0) &&\n               (iVar2 = fcn.1400062b8(*(*0x140027510 + iVar4 * 8)),  iVar2 != -1)) {\n                iStack24 = iStack24 + 1;\n            }\n            (*_sym.imp.KERNEL32.dll_DeleteCriticalSection)(*(*0x140027510 + iVar4 * 8) + 0x30);\n            fcn.14000ae8c(*(*0x140027510 + iVar4 * 8));\n            *(*0x140027510 + iVar4 * 8) = 0;\n        }\n    }\n    fcn.14000f9c4(8);\n    return iStack24;\n}\n",
        "token_count": 303
    },
    "140016dc": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint fcn.140016dcc(uint64_t arg1, int64_t arg2, int64_t arg3)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    ulong uVar5;\n    uint64_t uVar6;\n    uint uVar7;\n    uint uVar8;\n    uint64_t arg3_00;\n    \n    arg1 = arg1 & 0xffffffff;\n    iVar3 = fcn.1400139d4();\n    iVar4 = fcn.1400139d4();\n    uVar6 = arg2 - iVar4;\n    if ((iVar3 == -1) || (iVar4 == -1)) {\n        if (*(arg3 + 0x30) == '\\0') {\n            uVar8 = 0x16;\n        }\n        else {\n            uVar8 = *(arg3 + 0x2c);\n        }\n    }\n    else {\n        uVar7 = 0;\n        if (uVar6 < 1) {\n            uVar8 = 0;\n            if (uVar6 < 0) {\n                iVar4 = fcn.1400139d4(arg1, arg2, 0);\n                uVar8 = uVar7;\n                if (iVar4 == -1) {\n                    if (*(arg3 + 0x30) != '\\0') {\n                        uVar8 = *(arg3 + 0x2c);\n                    }\n                }\n                else {\n                    uVar5 = fcn.140011f5c(arg1);\n                    iVar2 = (*_sym.imp.KERNEL32.dll_SetEndOfFile)(uVar5);\n                    if (iVar2 == 0) {\n                        uVar7 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                        *(arg3 + 0x38) = 1;\n                        uVar8 = 0xd;\n                        *(arg3 + 0x34) = uVar7;\n                        *(arg3 + 0x30) = 1;\n                        *(arg3 + 0x2c) = 0xd;\n                    }\n                }\n            }\n        }\n        else {\n            iVar4 = fcn.14000fa1c(0x1000, 1);\n            if (iVar4 == 0) {\n                uVar7 = 0xc;\n                *(arg3 + 0x30) = 1;\n                *(arg3 + 0x2c) = 0xc;\n            }\n            else {\n                uVar1 = fcn.14000aac8(arg1, 0x8000);\n                do {\n                    arg3_00 = uVar6 & 0xffffffff;\n                    if (0xfff < uVar6) {\n                        arg3_00 = 0x1000;\n                    }\n                    iVar2 = fcn.14000cc34(arg1, iVar4, arg3_00, arg3);\n                    if (iVar2 == -1) {\n                        if ((*(arg3 + 0x38) != '\\0') && (*(arg3 + 0x34) == 5)) {\n                            *(arg3 + 0x30) = 1;\n                            *(arg3 + 0x2c) = 0xd;\n                        }\n                        if (*(arg3 + 0x30) != '\\0') {\n                            uVar7 = *(arg3 + 0x2c);\n                        }\n                        goto code_r0x000140016ebd;\n                    }\n                    uVar6 = uVar6 - iVar2;\n                } while (0 < uVar6);\n                fcn.14000aac8(arg1, uVar1);\n            }\ncode_r0x000140016ebd:\n            fcn.14000ae8c(iVar4);\n            uVar8 = uVar7;\n        }\n    }\n    fcn.1400139d4(arg1, iVar3, 0);\n    return uVar8;\n}\n",
        "token_count": 851
    },
    "14000274": {
        "rules": [
            "encrypt data using Curve25519/bbf924b96e5b4ce780ce59f68f21b030"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x000140002816)\n// WARNING: Removing unreachable block (ram,0x000140002786)\n// WARNING: Removing unreachable block (ram,0x00014000275f)\n\nulong fcn.14000274c(ulong noname_0, ulong arg2)\n\n{\n    int32_t *piVar1;\n    uint32_t *puVar2;\n    int64_t iVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    uint8_t in_XCR0;\n    \n    piVar1 = cpuid_basic_info(0);\n    uVar6 = 0;\n    puVar2 = cpuid_Version_info(1);\n    uVar4 = puVar2[3];\n    if ((piVar1[2] ^ 0x49656e69U | piVar1[3] ^ 0x6c65746eU | piVar1[1] ^ 0x756e6547U) == 0) {\n        *0x140026030 = 0xffffffffffffffff;\n        uVar5 = *puVar2 & 0xfff3ff0;\n        *0x140026028 = 0x8000;\n        if ((((uVar5 == 0x106c0) || (uVar5 == 0x20660)) || (uVar5 == 0x20670)) ||\n           ((uVar5 - 0x30650 < 0x21 && ((0x100010001U >> (uVar5 - 0x30650 & 0x3f) & 1) != 0)))) {\n            *0x140026c3c = *0x140026c3c | 1;\n        }\n    }\n    if (6 < *piVar1) {\n        iVar3 = cpuid_Extended_Feature_Enumeration_info(7);\n        uVar6 = *(iVar3 + 4);\n        if ((uVar6 >> 9 & 1) != 0) {\n            *0x140026c3c = *0x140026c3c | 2;\n        }\n    }\n    *0x140026020 = 1;\n    *0x140026024 = 2;\n    if ((uVar4 >> 0x14 & 1) != 0) {\n        *0x140026020 = 2;\n        *0x140026024 = 6;\n        if ((((uVar4 >> 0x1b & 1) != 0) && ((uVar4 >> 0x1c & 1) != 0)) && ((in_XCR0 & 6) == 6)) {\n            *0x140026024 = 0xe;\n            *0x140026020 = 3;\n            if ((uVar6 & 0x20) != 0) {\n                *0x140026020 = 5;\n                *0x140026024 = 0x2e;\n                if (((uVar6 & 0xd0030000) == 0xd0030000) && ((in_XCR0 & 0xe0) == 0xe0)) {\n                    *0x140026024 = 0x6e;\n                    *0x140026020 = 6;\n                }\n            }\n        }\n    }\n    return 0;\n}\n",
        "token_count": 735
    },
    "14000613": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nuint fcn.140006130(int64_t arg1, int64_t arg2)\n\n{\n    uint uVar1;\n    \n    if (arg1 == 0) {\n        *(arg2 + 0x30) = 1;\n        *(arg2 + 0x2c) = 0x16;\n        fcn.1400094e8(0, 0, 0, 0);\n    }\n    else {\n        if ((*(arg1 + 0x14) >> 0xc & 1) == 0) {\n            fcn.14000b080(arg1);\n            uVar1 = fcn.1400061ac(arg1, arg2);\n            fcn.14000b08c(arg1);\n            return uVar1;\n        }\n        fcn.14000b394(arg1);\n    }\n    return 0xffffffff;\n}\n",
        "token_count": 189
    },
    "1400061a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nuint fcn.1400061ac(int64_t arg1, int64_t arg2)\n\n{\n    uint uVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    \n    if (arg1 == 0) {\n        *(arg2 + 0x30) = 1;\n        *(arg2 + 0x2c) = 0x16;\n        fcn.1400094e8(0, 0, 0, 0);\n        uVar1 = 0xffffffff;\n    }\n    else {\n        uVar1 = 0xffffffff;\n        if ((*(arg1 + 0x14) >> 0xd & 1) != 0) {\n            uVar1 = fcn.14000b6b8(arg1, arg2);\n            fcn.14000b49c(arg1);\n            uVar2 = fcn.14000aec8(arg1);\n            iVar3 = fcn.14000b110(uVar2, arg2);\n            if (iVar3 < 0) {\n                uVar1 = 0xffffffff;\n            }\n            else if (*(arg1 + 0x28) != 0) {\n                fcn.14000ae8c(*(arg1 + 0x28));\n                *(arg1 + 0x28) = 0;\n            }\n        }\n        fcn.14000b394(arg1);\n    }\n    return uVar1;\n}\n",
        "token_count": 313
    },
    "14000645": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nulong fcn.140006458(ulong *arg1)\n\n{\n    ulong arg3;\n    ulong arg1_00;\n    uint8_t uVar1;\n    ulong uVar2;\n    uint64_t arg1_01;\n    \n    arg3 = arg1[1];\n    arg1_00 = **arg1;\n    uVar1 = fcn.14000d1c4(arg1_00);\n    arg1_01 = *arg1[2];\n    uVar2 = fcn.140006574(arg1_01, *arg1[3], *arg1[4], **arg1);\n    fcn.14000d28c(arg1_01 & 0xffffffffffffff00 | uVar1, arg1_00, arg3);\n    return uVar2;\n}\n",
        "token_count": 172
    },
    "14000690": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nuint32_t fcn.140006900(int64_t arg1, char **arg2, ulong arg3)\n\n{\n    char cVar1;\n    char *pcVar2;\n    char **ppcVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    uint *puVar6;\n    uint64_t uVar7;\n    uint32_t uVar8;\n    uint64_t uVar9;\n    char cVar10;\n    uint32_t uVar11;\n    char *pcVar12;\n    uint32_t in_R9D;\n    uint32_t uVar13;\n    \n    pcVar2 = *arg2;\n    uVar9 = arg3;\n    if (pcVar2 == NULL) {\n        puVar6 = fcn.1400096f4();\n        *puVar6 = 0x16;\n        fcn.1400095b8();\ncode_r0x000140006972:\n        if (arg2[1] != NULL) {\n            *arg2[1] = *arg2;\n        }\n        return 0;\n    }\n    if ((arg3 != 0) && (0x22 < arg3 - 2)) {\n        *(arg1 + 0x30) = 1;\n        *(arg1 + 0x2c) = 0x16;\n        fcn.1400094e8(0, 0, 0, 0);\n        goto code_r0x000140006972;\n    }\n    cVar10 = *pcVar2;\n    pcVar12 = pcVar2 + 1;\n    uVar11 = in_R9D & 0xff;\n    *arg2 = pcVar12;\n    uVar13 = uVar11 | 2;\n    if ((cVar10 == '-') || (uVar13 = uVar11,  cVar10 == '+')) {\n        uVar11 = uVar13;\n        cVar10 = *pcVar12;\n        pcVar12 = pcVar2 + 2;\n        *arg2 = pcVar12;\n    }\n    if ((arg3 == 0) || (uVar7 = uVar9,  arg3 == 0x10)) {\n        if (cVar10 - 0x30U < 10) {\n            iVar4 = cVar10 + -0x30;\ncode_r0x0001400069f9:\n            if (iVar4 == 0) {\n                cVar1 = *pcVar12;\n                *arg2 = pcVar12 + 1;\n                if ((cVar1 + 0xa8U & 0xdf) == 0) {\n                    cVar10 = pcVar12[1];\n                    pcVar12 = pcVar12 + 2;\n                    *arg2 = pcVar12;\n                    uVar7 = 0x10;\n                    if (arg3 != 0) {\n                        uVar7 = uVar9;\n                    }\n                }\n                else {\n                    *arg2 = pcVar12;\n                    uVar7 = 8;\n                    if (arg3 != 0) {\n                        uVar7 = uVar9;\n                    }\n                    if ((cVar1 != '\\0') && (*pcVar12 != cVar1)) {\n                        puVar6 = fcn.1400096f4();\n                        *puVar6 = 0x16;\n                        fcn.1400095b8();\n                        pcVar12 = *arg2;\n                    }\n                }\n                goto code_r0x000140006a5c;\n            }\n        }\n        else {\n            if (cVar10 + 0x9fU < 0x1a) {\n                iVar4 = cVar10 + -0x57;\n                goto code_r0x0001400069f9;\n            }\n            if (cVar10 + 0xbfU < 0x1a) {\n                iVar4 = cVar10 + -0x37;\n                goto code_r0x0001400069f9;\n            }\n        }\n        uVar7 = 10;\n        if (arg3 != 0) {\n            uVar7 = uVar9;\n        }\n    }\ncode_r0x000140006a5c:\n    uVar13 = 0;\n    while( true ) {\n        if (cVar10 - 0x30U < 10) {\n            uVar8 = cVar10 - 0x30;\n        }\n        else if (cVar10 + 0x9fU < 0x1a) {\n            uVar8 = cVar10 - 0x57;\n        }\n        else if (cVar10 + 0xbfU < 0x1a) {\n            uVar8 = cVar10 - 0x37;\n        }\n        else {\n            uVar8 = 0xffffffff;\n        }\n        if (uVar7 <= uVar8) break;\n        cVar10 = *pcVar12;\n        uVar5 = uVar13 * uVar7;\n        uVar8 = uVar5 + uVar8;\n        uVar11 = uVar11 | (uVar8 < uVar5 || 0xffffffff / uVar7 < uVar13) << 2 | 8;\n        pcVar12 = pcVar12 + 1;\n        *arg2 = pcVar12;\n        uVar13 = uVar8;\n    }\n    *arg2 = pcVar12 + -1;\n    if ((cVar10 != '\\0') && (pcVar12[-1] != cVar10)) {\n        puVar6 = fcn.1400096f4();\n        *puVar6 = 0x16;\n        fcn.1400095b8();\n    }\n    if ((uVar11 & 8) == 0) {\n        *arg2 = pcVar2;\n        if (arg2[1] == NULL) {\n            return 0;\n        }\n        *arg2[1] = pcVar2;\n        return 0;\n    }\n    if ((uVar11 & 4) == 0) {\n        if ((uVar11 & 1) == 0) {\n            if ((uVar11 & 2) == 0) goto code_r0x000140006b7f;\ncode_r0x000140006b7c:\n            uVar13 = -uVar13;\n            goto code_r0x000140006b7f;\n        }\n        if ((uVar11 & 2) == 0) {\n            if (uVar13 < 0x80000000) goto code_r0x000140006b7f;\n        }\n        else if (uVar13 < 0x80000001) goto code_r0x000140006b7c;\n    }\n    *(arg1 + 0x30) = 1;\n    *(arg1 + 0x2c) = 0x22;\n    if ((uVar11 & 1) != 0) {\n        ppcVar3 = arg2[1];\n        if ((uVar11 & 2) == 0) {\n            if (ppcVar3 != NULL) {\n                *ppcVar3 = *arg2;\n            }\n            return 0x7fffffff;\n        }\n        if (ppcVar3 != NULL) {\n            *ppcVar3 = *arg2;\n        }\n        return 0x80000000;\n    }\n    uVar13 = 0xffffffff;\ncode_r0x000140006b7f:\n    if (arg2[1] != NULL) {\n        *arg2[1] = *arg2;\n        return uVar13;\n    }\n    return uVar13;\n}\n",
        "token_count": 1659
    },
    "14000765": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nuint64_t fcn.140007654(int64_t arg1, uint *arg2)\n\n{\n    int64_t arg1_00;\n    ulong uVar1;\n    uint uVar2;\n    uint64_t uVar3;\n    uint8_t uVar4;\n    uint64_t uStackX8;\n    uint64_t uStack24;\n    uint64_t *puStack16;\n    \n    arg1_00 = *(arg1 + 8);\n    puStack16 = &uStackX8;\n    uStackX8 = *(arg1 + 0x10) - 1;\n    uVar1 = *(arg1_00 + 0x2c);\n    uStack24 = uStackX8;\n    uVar2 = fcn.140006900(arg1_00, &uStack24, 10);\n    *arg2 = uVar2;\n    uVar3 = *(arg1 + 8);\n    if (((*(uVar3 + 0x30) == '\\0') || (uVar4 = 0,  *(uVar3 + 0x2c) != 0x22)) &&\n       (uVar3 = uStackX8,  uVar4 = 0,  *(arg1 + 0x10) <= uStackX8)) {\n        *(arg1 + 0x10) = uStackX8;\n        uVar4 = 1;\n    }\n    *(arg1_00 + 0x2c) = uVar1;\n    return uVar3 & 0xffffffffffffff00 | uVar4;\n}\n",
        "token_count": 343
    },
    "1400082e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nulong fcn.1400082ec(int64_t arg1)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    uint64_t arg3;\n    uchar *puVar3;\n    \n    iVar1 = *(arg1 + 0x34);\n    if ((iVar1 == 2) ||\n       (((iVar1 != 3 && (iVar1 != 0xc)) && ((*(arg1 + 0x34) == 0xd || ((*(arg1 + 0x39) + 0x9dU & 0xef) == 0)))))) {\n        puVar3 = *(arg1 + 0x458);\n        if (*(arg1 + 0x458) == NULL) {\n            puVar3 = arg1 + 0x50;\n        }\n        *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n        *puVar3 = *(*(arg1 + 0x18) + -8);\n        *(arg1 + 0x48) = 1;\n    }\n    else {\n        *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n        iVar2 = *(arg1 + 0x458);\n        if (iVar2 == 0) {\n            arg3 = 0x200;\n            iVar2 = arg1 + 0x50;\n        }\n        else {\n            arg3 = *(arg1 + 0x450) >> 1;\n        }\n        iVar1 = fcn.14000e540(arg1 + 0x48, iVar2, arg3);\n        if (iVar1 != 0) {\n            *(arg1 + 0x38) = 1;\n        }\n    }\n    iVar2 = *(arg1 + 0x458);\n    if (*(arg1 + 0x458) == 0) {\n        iVar2 = arg1 + 0x50;\n    }\n    *(arg1 + 0x40) = iVar2;\n    return 1;\n}\n",
        "token_count": 443
    },
    "1400094e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.1400094e8(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    code *pcVar1;\n    uint8_t uVar2;\n    int64_t iVar3;\n    uint64_t *puVar4;\n    ulong in_stack_00000028;\n    ulong in_stack_00000030;\n    \n    iVar3 = fcn.140009230(in_stack_00000030);\n    if (((iVar3 == 0) || (*(iVar3 + 0x3b8) == 0)) &&\n       (puVar4 = fcn.14000929c(0x140027340, in_stack_00000030),  uVar2 = *0x140026018 & 0x3f, \n       ((*0x140026018 ^ *puVar4) >> uVar2 | (*0x140026018 ^ *puVar4) << 0x40 - uVar2) == 0)) {\n        fcn.1400095d8(arg1, arg2, arg3, arg4, in_stack_00000028);\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    (**0x14001a5a8)(arg1, arg2, arg3, arg4, in_stack_00000028);\n    return;\n}\n",
        "token_count": 295
    },
    "140009b6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.140009b60(ulong arg1)\n\n{\n    int64_t iVar1;\n    int32_t iVar2;\n    ulong in_R9;\n    int64_t aiStackX16 [3];\n    \n    aiStackX16[0] = 0;\n    iVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleExW)(0, L\"mscoree.dll\", aiStackX16, in_R9, 0xfffffffffffffffe);\n    if ((iVar2 != 0) && (iVar1 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(aiStackX16[0], \"CorExitProcess\"),  iVar1 != 0))\n    {\n        (**0x14001a5a8)(arg1);\n    }\n    if (aiStackX16[0] != 0) {\n        (*_sym.imp.KERNEL32.dll_FreeLibrary)();\n    }\n    return;\n}\n",
        "token_count": 196
    },
    "14001192": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nuint64_t fcn.14001192c(uint64_t arg1, ulong arg2)\n\n{\n    uint64_t arg2_00;\n    char cVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    uint64_t uVar5;\n    int64_t iVar6;\n    int64_t *piVar7;\n    int64_t *piVar8;\n    uint64_t uVar9;\n    uint64_t uVar10;\n    int64_t iVar11;\n    \n    uVar9 = 0;\n    if (arg1 == 0) {\n        puVar4 = fcn.1400096f4();\n        *puVar4 = 0x16;\n        return 0xffffffffffffffff;\n    }\n    uVar5 = fcn.1400190a4(arg1, 0x3d);\n    if ((uVar5 == 0) || (uVar5 == arg1)) {\n        puVar4 = fcn.1400096f4();\n        *puVar4 = 0x16;\n        fcn.14000ae8c(arg1);\n        return 0xffffffffffffffff;\n    }\n    cVar1 = *(uVar5 + 1);\n    if (*0x140027468 == *0x140027480) {\n        *0x140027468 = fcn.140011844(*0x140027468);\n    }\n    if (*0x140027468 == NULL) {\n        if ((arg2 == 0) || (*0x140027470 == 0)) {\n            if (cVar1 == '\\0') goto code_r0x0001400115a2;\n            *0x140027468 = fcn.14000fa1c(1, 8);\n            fcn.14000ae8c(0);\n            if (*0x140027468 != NULL) {\n                if (*0x140027470 == 0) {\n                    *0x140027470 = fcn.14000fa1c(1, 8);\n                    fcn.14000ae8c(0);\n                    if (*0x140027470 == 0) goto code_r0x00014001159e;\n                }\ncode_r0x00014001163d:\n                if (*0x140027468 != NULL) goto code_r0x000140011646;\n            }\n        }\n        else {\n            iVar6 = fcn.14000a2d8();\n            if (iVar6 != 0) {\n                if (*0x140027468 == *0x140027480) {\n                    *0x140027468 = fcn.140011844(*0x140027468);\n                }\n                goto code_r0x00014001163d;\n            }\n            puVar4 = fcn.1400096f4();\n            *puVar4 = 0x16;\n        }\n    }\n    else {\ncode_r0x000140011646:\n        piVar7 = *0x140027468;\n        iVar11 = uVar5 - arg1;\n        iVar6 = **0x140027468;\n        piVar8 = *0x140027468;\n        while (iVar6 != 0) {\n            iVar3 = fcn.140016a7c(arg1, iVar6, iVar11);\n            if ((iVar3 == 0) && ((*(iVar11 + *piVar8) == '=' || (*(iVar11 + *piVar8) == '\\0')))) {\n                iVar6 = piVar8 - piVar7 >> 3;\n                goto code_r0x000140011695;\n            }\n            piVar8 = piVar8 + 1;\n            iVar6 = *piVar8;\n        }\n        iVar6 = -(piVar8 - piVar7 >> 3);\ncode_r0x000140011695:\n        uVar10 = uVar9;\n        if ((-1 < iVar6) && (*piVar7 != 0)) {\n            fcn.14000ae8c(piVar7[iVar6]);\n            if (cVar1 == '\\0') {\n                for (; piVar7[iVar6] != 0; iVar6 = iVar6 + 1) {\n                    piVar7[iVar6] = piVar7[iVar6 + 1];\n                }\n                piVar7 = fcn.140009714(piVar7, iVar6, 8);\n                fcn.14000ae8c(0);\n                uVar10 = arg1;\n                if (piVar7 != NULL) {\n                    *0x140027468 = piVar7;\n                }\n            }\n            else {\n                piVar7[iVar6] = arg1;\n            }\ncode_r0x000140011754:\n            if (arg2 == 0) {\ncode_r0x0001400117f4:\n                fcn.14000ae8c(uVar10);\n                return 0;\n            }\n            iVar6 = -1;\n            do {\n                iVar11 = iVar6;\n                iVar6 = iVar11 + 1;\n            } while (*(arg1 + iVar11 + 1) != '\\0');\n            iVar6 = fcn.14000fa1c(iVar11 + 3, 1);\n            if (iVar6 == 0) {\n                fcn.14000ae8c(0);\n            }\n            else {\n                iVar3 = fcn.14000ad60(iVar6, iVar11 + 3, arg1);\n                if (iVar3 != 0) {\n                    fcn.1400095d8(0, 0, 0, 0, 0);\n                    pcVar2 = swi(3);\n                    uVar9 = (*pcVar2)();\n                    return uVar9;\n                }\n                uVar9 = uVar5 + 1 + (iVar6 - arg1);\n                *(uVar9 - 1) = 0;\n                iVar3 = fcn.140016b94(iVar6, -(cVar1 != '\\0') & uVar9);\n                if (iVar3 != 0) {\n                    fcn.14000ae8c(iVar6);\n                    goto code_r0x0001400117f4;\n                }\n                puVar4 = fcn.1400096f4();\n                *puVar4 = 0x2a;\n                fcn.14000ae8c(iVar6);\n                uVar9 = 0xffffffff;\n            }\n            fcn.14000ae8c(uVar10);\n            return uVar9;\n        }\n        if (cVar1 == '\\0') goto code_r0x0001400115a2;\n        arg2_00 = -iVar6 + 2;\n        if ((-iVar6 <= arg2_00) && (arg2_00 < 0x1fffffffffffffff)) {\n            piVar7 = fcn.140009714(piVar7, arg2_00, 8);\n            fcn.14000ae8c(0);\n            if (piVar7 != NULL) {\n                piVar7[-iVar6] = arg1;\n                piVar7[1 - iVar6] = 0;\n                *0x140027468 = piVar7;\n                goto code_r0x000140011754;\n            }\n        }\n    }\ncode_r0x00014001159e:\n    uVar9 = 0xffffffffffffffff;\ncode_r0x0001400115a2:\n    fcn.14000ae8c(arg1);\n    return uVar9 & 0xffffffff;\n}\n",
        "token_count": 1622
    },
    "14001388": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint64_t fcn.14001388c(ulong arg1, ulong arg2, ulong arg3, int64_t arg4)\n\n{\n    uint8_t *puVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int64_t iVar4;\n    int64_t aiStack24 [2];\n    \n    iVar4 = fcn.140011f5c(arg1 & 0xffffffff);\n    if (iVar4 == -1) {\n        *(arg4 + 0x30) = 1;\n        *(arg4 + 0x2c) = 9;\n    }\n    else {\n        iVar2 = (*_sym.imp.KERNEL32.dll_SetFilePointerEx)(iVar4, arg2, aiStack24, arg3);\n        if (iVar2 == 0) {\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            fcn.1400096b0(uVar3, arg4);\n        }\n        else if (aiStack24[0] != -1) {\n            puVar1 = *((arg1 >> 6) * 8 + 0x140027550) + 0x38 + (arg1 & 0x3f) * 0x48;\n            *puVar1 = *puVar1 & 0xfd;\n            return aiStack24[0];\n        }\n    }\n    return -1;\n}\n",
        "token_count": 303
    },
    "14000b3b": {
        "rules": [
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0",
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nint64_t * fcn.14000b3b0(int64_t *arg1)\n\n{\n    uint32_t *puVar1;\n    int64_t *piVar2;\n    uint32_t uVar3;\n    int64_t iVar4;\n    int64_t *piVar5;\n    \n    piVar5 = *0x140027510 + 0x18;\n    piVar2 = piVar5 + *0x140027508 + -3;\n    do {\n        if (piVar5 == piVar2) {\ncode_r0x00014000b47e:\n            *arg1 = 0;\n            return arg1;\n        }\n        iVar4 = *piVar5;\n        if (iVar4 == 0) {\n            iVar4 = fcn.14000fa1c(1, 0x58);\n            *piVar5 = iVar4;\n            fcn.14000ae8c(0);\n            if (*piVar5 != 0) {\n                *(*piVar5 + 0x18) = 0xffffffff;\n                fcn.14000f64c(*piVar5 + 0x30, 4000, 0);\n                iVar4 = *piVar5;\n                LOCK();\n                *(iVar4 + 0x14) = *(iVar4 + 0x14) | 0x2000;\n                fcn.14000b080(iVar4);\ncode_r0x00014000b479:\n                *arg1 = iVar4;\n                return arg1;\n            }\n            goto code_r0x00014000b47e;\n        }\n        if ((*(iVar4 + 0x14) >> 0xd & 1) == 0) {\n            fcn.14000b080(iVar4);\n            uVar3 = *(iVar4 + 0x14);\n            while( true ) {\n                LOCK();\n                puVar1 = iVar4 + 0x14;\n                if (uVar3 == *puVar1) break;\n                uVar3 = *puVar1;\n            }\n            *puVar1 = uVar3 | 0x2000;\n            if ((~(uVar3 >> 0xd) & 1) != 0) goto code_r0x00014000b479;\n            fcn.14000b08c(iVar4);\n        }\n        piVar5 = piVar5 + 1;\n    } while( true );\n}\n",
        "token_count": 527
    },
    "140017ae": {
        "rules": [
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0",
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint32_t fcn.140017aec(void)\n\n{\n    uint32_t uVar1;\n    uint32_t in_MXCSR;\n    \n    uVar1 = (((in_MXCSR & 0x3f) >> 2 & 8 | in_MXCSR & 0x10) >> 2 | in_MXCSR & 8) >> 1 |\n            ((in_MXCSR & 2) << 3 | in_MXCSR & 4) * 2 | (in_MXCSR & 1) << 4;\n    return uVar1 << 0x18 | uVar1;\n}\n",
        "token_count": 136
    },
    "140017b4": {
        "rules": [
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0",
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.140017b44(ulong arg1)\n\n{\n    return;\n}\n",
        "token_count": 19
    },
    "140017c8": {
        "rules": [
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0",
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.140017c80(ulong arg1)\n\n{\n    return;\n}\n",
        "token_count": 19
    },
    "14000b09": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint fcn.14000b098(ulong noname_0, uint32_t *arg2, uint32_t **arg3, uint32_t *arg4)\n\n{\n    uint32_t uVar1;\n    uint32_t *arg2_00;\n    uint uVar2;\n    \n    fcn.140011c50(*arg2);\n    uVar1 = **arg3;\n    arg2_00 = arg3[1];\n    if ((*(*((uVar1 >> 6) * 8 + 0x140027550) + 0x38 + (uVar1 & 0x3f) * 0x48) & 1) == 0) {\n        *(arg2_00 + 0xc) = 1;\n        arg2_00[0xb] = 9;\n        uVar2 = 0xffffffff;\n    }\n    else {\n        uVar2 = fcn.14000b26c(uVar1, arg2_00);\n    }\n    fcn.140011d38(*arg4);\n    return uVar2;\n}\n",
        "token_count": 235
    },
    "14000b11": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nulong fcn.14000b110(ulong arg1, int64_t arg2)\n\n{\n    ulong uVar1;\n    uint32_t auStackX8 [4];\n    uchar auStackX24 [8];\n    uint32_t auStackX32 [2];\n    uint32_t auStack40 [2];\n    uint32_t *puStack32;\n    int64_t iStack24;\n    \n    if (arg1 == 0xfffffffe) {\n        *(arg2 + 0x38) = 1;\n        *(arg2 + 0x34) = 0;\n        *(arg2 + 0x30) = 1;\n        *(arg2 + 0x2c) = 9;\n    }\n    else {\n        auStackX8[0] = arg1;\n        if (((-1 < arg1) && (arg1 < *0x140027950)) &&\n           ((*(*((arg1 >> 6) * 8 + 0x140027550) + 0x38 + (arg1 & 0x3f) * 0x48) & 1) != 0)) {\n            puStack32 = auStackX8;\n            auStackX32[0] = arg1;\n            auStack40[0] = arg1;\n            iStack24 = arg2;\n            uVar1 = fcn.14000b098(auStackX24, auStack40, &puStack32, auStackX32);\n            return uVar1;\n        }\n        *(arg2 + 0x38) = 1;\n        *(arg2 + 0x34) = 0;\n        *(arg2 + 0x30) = 1;\n        *(arg2 + 0x2c) = 9;\n        fcn.1400094e8(0, 0, 0, 0);\n    }\n    return 0xffffffff;\n}\n",
        "token_count": 414
    },
    "14000cb0": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint fcn.14000cb0c(ulong arg1, ulong arg2, ulong arg3, int64_t arg4)\n\n{\n    uint uVar1;\n    uint64_t uVar2;\n    \n    if (arg1 == 0xfffffffe) {\n        *(arg4 + 0x38) = 1;\n        *(arg4 + 0x34) = 0;\n        *(arg4 + 0x30) = 1;\n        *(arg4 + 0x2c) = 9;\n    }\n    else {\n        if ((-1 < arg1) && (arg1 < *0x140027950)) {\n            uVar2 = arg1 >> 6;\n            if ((*(*(uVar2 * 8 + 0x140027550) + 0x38 + (arg1 & 0x3f) * 0x48) & 1) != 0) {\n                fcn.140011c50(arg1 & 0xffffffff);\n                uVar1 = 0xffffffff;\n                if ((*(*(uVar2 * 8 + 0x140027550) + 0x38 + (arg1 & 0x3f) * 0x48) & 1) == 0) {\n                    *(arg4 + 0x30) = 1;\n                    *(arg4 + 0x2c) = 9;\n                    *(arg4 + 0x38) = 1;\n                    *(arg4 + 0x34) = 0;\n                }\n                else {\n                    uVar1 = fcn.14000cc34(arg1, arg2, arg3, arg4);\n                }\n                fcn.140011d38(arg1);\n                return uVar1;\n            }\n        }\n        *(arg4 + 0x38) = 1;\n        *(arg4 + 0x34) = 0;\n        *(arg4 + 0x30) = 1;\n        *(arg4 + 0x2c) = 9;\n        fcn.1400094e8(0, 0, 0, 0);\n    }\n    return 0xffffffff;\n}\n",
        "token_count": 470
    },
    "14000d0b": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint64_t fcn.14000d0b8(ulong arg1, ulong *arg2, int64_t arg3)\n\n{\n    char cVar1;\n    ulong *puVar2;\n    \n    puVar2 = arg2;\n    fcn.14000aec8(arg2);\n    if ((*(arg2 + 0x14) & 6) == 0) {\n        *(arg3 + 0x2c) = 9;\n    }\n    else {\n        if ((*(arg2 + 0x14) >> 0xc & 1) == 0) {\n            if ((*(arg2 + 0x14) & 1) != 0) {\n                puVar2 = arg2;\n                cVar1 = fcn.14000d03c(arg2);\n                *(arg2 + 2) = 0;\n                if (cVar1 == '\\0') goto code_r0x00014000d0e9;\n                *arg2 = arg2[1];\n                LOCK();\n                *(arg2 + 0x14) = *(arg2 + 0x14) & 0xfffffffe;\n            }\n            LOCK();\n            *(arg2 + 0x14) = *(arg2 + 0x14) | 2;\n            LOCK();\n            *(arg2 + 0x14) = *(arg2 + 0x14) & 0xfffffff7;\n            *(arg2 + 2) = 0;\n            if (((*(arg2 + 0x14) & 0x4c0) == 0) && (puVar2 = arg2,  cVar1 = fcn.14000d17c(arg2),  cVar1 == '\\0')) {\n                puVar2 = arg2;\n                fcn.140014594(arg2);\n            }\n            cVar1 = fcn.14000cf44(puVar2 & 0xffffffffffffff00 | arg1, arg2, arg3);\n            if (cVar1 != '\\0') {\n                return arg1;\n            }\n            goto code_r0x00014000d0e9;\n        }\n        *(arg3 + 0x2c) = 0x22;\n    }\n    *(arg3 + 0x30) = 1;\ncode_r0x00014000d0e9:\n    LOCK();\n    *(arg2 + 0x14) = *(arg2 + 0x14) | 0x10;\n    return 0xffffffff;\n}\n",
        "token_count": 544
    },
    "14000d28": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.14000d28c(ulong noname_0, ulong *arg2, ulong arg3)\n\n{\n    if ((noname_0 != '\\0') && ((*(arg2 + 0x14) >> 9 & 1) != 0)) {\n        fcn.14000b6b8(arg2, arg3);\n        LOCK();\n        *(arg2 + 0x14) = *(arg2 + 0x14) & 0xfffffd7f;\n        *(arg2 + 4) = 0;\n        arg2[1] = 0;\n        *arg2 = 0;\n    }\n    return;\n}\n",
        "token_count": 144
    },
    "14001376": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nulong fcn.140013764(ulong arg1, ulong arg2, ulong arg3, int64_t arg4)\n\n{\n    ulong uVar1;\n    uint64_t uVar2;\n    \n    if (arg1 == 0xfffffffe) {\n        *(arg4 + 0x38) = 1;\n        *(arg4 + 0x34) = 0;\n        *(arg4 + 0x30) = 1;\n        *(arg4 + 0x2c) = 9;\n    }\n    else {\n        if ((-1 < arg1) && (arg1 < *0x140027950)) {\n            uVar2 = arg1 >> 6;\n            if ((*(*(uVar2 * 8 + 0x140027550) + 0x38 + (arg1 & 0x3f) * 0x48) & 1) != 0) {\n                fcn.140011c50(arg1 & 0xffffffff);\n                uVar1 = 0xffffffffffffffff;\n                if ((*(*(uVar2 * 8 + 0x140027550) + 0x38 + (arg1 & 0x3f) * 0x48) & 1) == 0) {\n                    *(arg4 + 0x30) = 1;\n                    *(arg4 + 0x2c) = 9;\n                    *(arg4 + 0x38) = 1;\n                    *(arg4 + 0x34) = 0;\n                }\n                else {\n                    uVar1 = fcn.14001388c(arg1, arg2, arg3, arg4);\n                }\n                fcn.140011d38(arg1);\n                return uVar1;\n            }\n        }\n        *(arg4 + 0x38) = 1;\n        *(arg4 + 0x34) = 0;\n        *(arg4 + 0x30) = 1;\n        *(arg4 + 0x2c) = 9;\n        fcn.1400094e8(0, 0, 0, 0);\n    }\n    return 0xffffffffffffffff;\n}\n",
        "token_count": 470
    },
    "14000dad": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.14000dadc(ulong *arg1, uchar *arg2, int64_t arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    int64_t arg2_00;\n    uint32_t in_stack_00000030;\n    int32_t aiStack24 [4];\n    \n    fcn.140014c1c(*arg1, in_stack_00000030 + 1, 1, aiStack24);\n    arg2_00 = (arg3 - (0 < in_stack_00000030)) - (aiStack24[0] == 0x2d);\n    if (arg3 == -1) {\n        arg2_00 = arg3;\n    }\n    iVar1 = fcn.140014600(arg2 + (0 < in_stack_00000030) + (aiStack24[0] == 0x2d), arg2_00, in_stack_00000030 + 1, \n                          aiStack24);\n    if (iVar1 == 0) {\n        fcn.14000dbd8(arg2, arg3, in_stack_00000030);\n    }\n    else {\n        *arg2 = 0;\n    }\n    return;\n}\n",
        "token_count": 265
    },
    "14000ddb": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.14000ddbc(ulong *arg1, uchar *arg2, int64_t arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    int64_t arg2_00;\n    uint32_t in_stack_00000030;\n    uchar auStack24 [16];\n    \n    auStack24 = ZEXT816(0);\n    fcn.140014c1c(*arg1, in_stack_00000030, 0, auStack24);\n    arg2_00 = arg3 - (auStack24._0_4_ == 0x2d);\n    if (arg3 == -1) {\n        arg2_00 = arg3;\n    }\n    iVar1 = fcn.140014600(arg2 + (auStack24._0_4_ == 0x2d), arg2_00, auStack24._4_4_ + in_stack_00000030, auStack24);\n    if (iVar1 == 0) {\n        fcn.14000de94(arg2, arg3, in_stack_00000030, auStack24);\n    }\n    else {\n        *arg2 = 0;\n    }\n    return;\n}\n",
        "token_count": 269
    },
    "14000dfe": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.14000dfec(ulong *arg1, uchar *arg2, int64_t arg3, ulong arg4)\n\n{\n    char *pcVar1;\n    int32_t iVar2;\n    int64_t arg2_00;\n    char *pcVar3;\n    int32_t iVar4;\n    uint32_t in_stack_00000030;\n    uchar auStack24 [16];\n    \n    auStack24 = ZEXT816(0);\n    fcn.140014c1c(*arg1, in_stack_00000030, 0, auStack24);\n    iVar4 = auStack24._4_4_ + -1;\n    arg2_00 = arg3 - (auStack24._0_4_ == 0x2d);\n    if (arg3 == -1) {\n        arg2_00 = arg3;\n    }\n    iVar2 = fcn.140014600(arg2 + (auStack24._0_4_ == 0x2d), arg2_00, in_stack_00000030, auStack24);\n    if (iVar2 == 0) {\n        auStack24._4_4_ = auStack24._4_4_ + -1;\n        if ((auStack24._4_4_ < -4) || (in_stack_00000030 <= auStack24._4_4_)) {\n            fcn.14000dbd8(arg2, arg3, in_stack_00000030);\n        }\n        else {\n            pcVar1 = arg2 + (auStack24._0_4_ == 0x2d);\n            if (iVar4 < auStack24._4_4_) {\n                do {\n                    pcVar3 = pcVar1;\n                    pcVar1 = pcVar3 + 1;\n                } while (*pcVar3 != '\\0');\n                pcVar3[-1] = '\\0';\n            }\n            fcn.14000de94(arg2, arg3, in_stack_00000030, auStack24);\n        }\n    }\n    else {\n        *arg2 = 0;\n    }\n    return;\n}\n",
        "token_count": 469
    },
    "140010be": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nint32_t fcn.140010be4(ulong arg1, ulong noname_1, int64_t arg3, ulong *arg4)\n\n{\n    int32_t iVar1;\n    ulong uVar2;\n    int32_t *piVar3;\n    uint uVar4;\n    uint uVar5;\n    uint uVar6;\n    uint uVar7;\n    uint uVar8;\n    uint uVar9;\n    uint uVar10;\n    uint uVar11;\n    uint *puVar12;\n    uint32_t uVar13;\n    int32_t iVar14;\n    uint *arg2;\n    uint *puVar15;\n    uint *puVar16;\n    uint *puVar17;\n    int64_t iVar18;\n    int64_t iVar19;\n    int64_t iStackX24;\n    ulong *puStackX32;\n    uchar auStack616 [4];\n    uint uStack612;\n    uint auStack608 [2];\n    int64_t *piStack600;\n    ulong **ppuStack592;\n    uint auStack584 [140];\n    \n    iStackX24 = arg3;\n    puStackX32 = arg4;\n    fcn.140010e54(arg3, arg4);\n    uVar13 = fcn.1400108e4(arg1);\n    if (uVar13 == *(*(iStackX24 + 0x88) + 4)) {\n        iVar14 = 0;\n    }\n    else {\n        arg2 = fcn.14000d2c8(0x228);\n        if (arg2 == NULL) {\n            fcn.14000ae8c(0);\n            iVar14 = -1;\n        }\n        else {\n            iVar18 = 4;\n            iVar19 = 4;\n            puVar16 = *(iStackX24 + 0x88);\n            puVar12 = auStack584;\n            do {\n                puVar17 = puVar12;\n                puVar15 = puVar16;\n                uVar4 = puVar15[1];\n                uVar5 = puVar15[2];\n                uVar6 = puVar15[3];\n                uVar7 = puVar15[4];\n                uVar8 = puVar15[5];\n                uVar9 = puVar15[6];\n                uVar10 = puVar15[7];\n                *puVar17 = *puVar15;\n                puVar17[1] = uVar4;\n                puVar17[2] = uVar5;\n                puVar17[3] = uVar6;\n                uVar4 = puVar15[8];\n                uVar5 = puVar15[9];\n                uVar6 = puVar15[10];\n                uVar11 = puVar15[0xb];\n                puVar17[4] = uVar7;\n                puVar17[5] = uVar8;\n                puVar17[6] = uVar9;\n                puVar17[7] = uVar10;\n                uVar7 = puVar15[0xc];\n                uVar8 = puVar15[0xd];\n                uVar9 = puVar15[0xe];\n                uVar10 = puVar15[0xf];\n                puVar17[8] = uVar4;\n                puVar17[9] = uVar5;\n                puVar17[10] = uVar6;\n                puVar17[0xb] = uVar11;\n                uVar4 = puVar15[0x10];\n                uVar5 = puVar15[0x11];\n                uVar6 = puVar15[0x12];\n                uVar11 = puVar15[0x13];\n                puVar17[0xc] = uVar7;\n                puVar17[0xd] = uVar8;\n                puVar17[0xe] = uVar9;\n                puVar17[0xf] = uVar10;\n                uVar7 = puVar15[0x14];\n                uVar8 = puVar15[0x15];\n                uVar9 = puVar15[0x16];\n                uVar10 = puVar15[0x17];\n                puVar17[0x10] = uVar4;\n                puVar17[0x11] = uVar5;\n                puVar17[0x12] = uVar6;\n                puVar17[0x13] = uVar11;\n                uVar4 = puVar15[0x18];\n                uVar5 = puVar15[0x19];\n                uVar6 = puVar15[0x1a];\n                uVar11 = puVar15[0x1b];\n                puVar17[0x14] = uVar7;\n                puVar17[0x15] = uVar8;\n                puVar17[0x16] = uVar9;\n                puVar17[0x17] = uVar10;\n                uVar7 = puVar15[0x1c];\n                uVar8 = puVar15[0x1d];\n                uVar9 = puVar15[0x1e];\n                uVar10 = puVar15[0x1f];\n                puVar17[0x18] = uVar4;\n                puVar17[0x19] = uVar5;\n                puVar17[0x1a] = uVar6;\n                puVar17[0x1b] = uVar11;\n                puVar17[0x1c] = uVar7;\n                puVar17[0x1d] = uVar8;\n                puVar17[0x1e] = uVar9;\n                puVar17[0x1f] = uVar10;\n                iVar19 = iVar19 + -1;\n                puVar16 = puVar15 + 0x20;\n                puVar12 = puVar17 + 0x20;\n            } while (iVar19 != 0);\n            uVar4 = puVar15[0x21];\n            uVar5 = puVar15[0x22];\n            uVar6 = puVar15[0x23];\n            uVar7 = puVar15[0x24];\n            uVar8 = puVar15[0x25];\n            uVar9 = puVar15[0x26];\n            uVar10 = puVar15[0x27];\n            uVar2 = *(puVar15 + 0x28);\n            puVar17[0x20] = puVar15[0x20];\n            puVar17[0x21] = uVar4;\n            puVar17[0x22] = uVar5;\n            puVar17[0x23] = uVar6;\n            puVar17[0x24] = uVar7;\n            puVar17[0x25] = uVar8;\n            puVar17[0x26] = uVar9;\n            puVar17[0x27] = uVar10;\n            *(puVar17 + 0x28) = uVar2;\n            puVar16 = auStack584;\n            puVar12 = arg2;\n            do {\n                puVar17 = puVar12;\n                puVar15 = puVar16;\n                uVar4 = puVar15[1];\n                uVar5 = puVar15[2];\n                uVar6 = puVar15[3];\n                uVar7 = puVar15[4];\n                uVar8 = puVar15[5];\n                uVar9 = puVar15[6];\n                uVar10 = puVar15[7];\n                *puVar17 = *puVar15;\n                puVar17[1] = uVar4;\n                puVar17[2] = uVar5;\n                puVar17[3] = uVar6;\n                uVar4 = puVar15[8];\n                uVar5 = puVar15[9];\n                uVar6 = puVar15[10];\n                uVar11 = puVar15[0xb];\n                puVar17[4] = uVar7;\n                puVar17[5] = uVar8;\n                puVar17[6] = uVar9;\n                puVar17[7] = uVar10;\n                uVar7 = puVar15[0xc];\n                uVar8 = puVar15[0xd];\n                uVar9 = puVar15[0xe];\n                uVar10 = puVar15[0xf];\n                puVar17[8] = uVar4;\n                puVar17[9] = uVar5;\n                puVar17[10] = uVar6;\n                puVar17[0xb] = uVar11;\n                uVar4 = puVar15[0x10];\n                uVar5 = puVar15[0x11];\n                uVar6 = puVar15[0x12];\n                uVar11 = puVar15[0x13];\n                puVar17[0xc] = uVar7;\n                puVar17[0xd] = uVar8;\n                puVar17[0xe] = uVar9;\n                puVar17[0xf] = uVar10;\n                uVar7 = puVar15[0x14];\n                uVar8 = puVar15[0x15];\n                uVar9 = puVar15[0x16];\n                uVar10 = puVar15[0x17];\n                puVar17[0x10] = uVar4;\n                puVar17[0x11] = uVar5;\n                puVar17[0x12] = uVar6;\n                puVar17[0x13] = uVar11;\n                uVar4 = puVar15[0x18];\n                uVar5 = puVar15[0x19];\n                uVar6 = puVar15[0x1a];\n                uVar11 = puVar15[0x1b];\n                puVar17[0x14] = uVar7;\n                puVar17[0x15] = uVar8;\n                puVar17[0x16] = uVar9;\n                puVar17[0x17] = uVar10;\n                uVar7 = puVar15[0x1c];\n                uVar8 = puVar15[0x1d];\n                uVar9 = puVar15[0x1e];\n                uVar10 = puVar15[0x1f];\n                puVar17[0x18] = uVar4;\n                puVar17[0x19] = uVar5;\n                puVar17[0x1a] = uVar6;\n                puVar17[0x1b] = uVar11;\n                puVar17[0x1c] = uVar7;\n                puVar17[0x1d] = uVar8;\n                puVar17[0x1e] = uVar9;\n                puVar17[0x1f] = uVar10;\n                iVar18 = iVar18 + -1;\n                puVar16 = puVar15 + 0x20;\n                puVar12 = puVar17 + 0x20;\n            } while (iVar18 != 0);\n            uVar4 = puVar15[0x21];\n            uVar5 = puVar15[0x22];\n            uVar6 = puVar15[0x23];\n            uVar7 = puVar15[0x24];\n            uVar8 = puVar15[0x25];\n            uVar9 = puVar15[0x26];\n            uVar10 = puVar15[0x27];\n            uVar2 = *(puVar15 + 0x28);\n            puVar17[0x20] = puVar15[0x20];\n            puVar17[0x21] = uVar4;\n            puVar17[0x22] = uVar5;\n            puVar17[0x23] = uVar6;\n            puVar17[0x24] = uVar7;\n            puVar17[0x25] = uVar8;\n            puVar17[0x26] = uVar9;\n            puVar17[0x27] = uVar10;\n            *(puVar17 + 0x28) = uVar2;\n            *arg2 = 0;\n            iVar14 = fcn.140010f88(uVar13, arg2);\n            if (iVar14 == -1) {\n                puVar16 = fcn.1400096f4();\n                *puVar16 = 0x16;\n                fcn.14000ae8c(arg2);\n                iVar14 = -1;\n            }\n            else {\n                if (noname_1 == '\\0') {\n                    fcn.14000ac50();\n                }\n                piVar3 = *(iStackX24 + 0x88);\n                LOCK();\n                iVar1 = *piVar3;\n                *piVar3 = *piVar3 + -1;\n                if ((iVar1 == 1) && (*(iStackX24 + 0x88) != 0x140026330)) {\n                    fcn.14000ae8c(*(iStackX24 + 0x88));\n                }\n                *arg2 = 1;\n                *(iStackX24 + 0x88) = arg2;\n                if ((*0x140026910 & *(iStackX24 + 0x3a8)) == 0) {\n                    piStack600 = &iStackX24;\n                    ppuStack592 = &puStackX32;\n                    uStack612 = 5;\n                    auStack608[0] = 5;\n                    fcn.140010714(auStack616, auStack608, &piStack600, &uStack612);\n                    if (noname_1 != '\\0') {\n                        *0x1400262d0 = *puStackX32;\n                    }\n                }\n                fcn.14000ae8c(0);\n            }\n        }\n    }\n    return iVar14;\n}\n",
        "token_count": 3034
    },
    "14000802": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/73780005e39049dabd818a965d665a12",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/bde1572c33fb4ad4a176b04786e84c23"
        ],
        "decompiled_code": "\nulong fcn.140008028(int64_t arg1)\n\n{\n    uint16_t uVar1;\n    int32_t iVar2;\n    uint16_t *puVar3;\n    uint64_t uVar4;\n    bool bVar5;\n    \n    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n    puVar3 = *(*(arg1 + 0x18) + -8);\n    if ((puVar3 == NULL) || (*(puVar3 + 4) == 0)) {\n        uVar4 = 6;\n        *(arg1 + 0x40) = \"(null)\";\n    }\n    else {\n        iVar2 = *(arg1 + 0x34);\n        if (iVar2 == 2) {\ncode_r0x000140008070:\n            bVar5 = false;\n        }\n        else if ((iVar2 == 3) || (iVar2 == 0xc)) {\n            bVar5 = true;\n        }\n        else {\n            if (*(arg1 + 0x34) == 0xd) goto code_r0x000140008070;\n            bVar5 = (*(arg1 + 0x39) + 0x9dU & 0xef) != 0;\n        }\n        *(arg1 + 0x40) = *(puVar3 + 4);\n        uVar1 = *puVar3;\n        uVar4 = uVar1;\n        if (bVar5) {\n            *(arg1 + 0x4c) = 1;\n            uVar4 = uVar1 >> 1;\n            goto code_r0x00014000809a;\n        }\n    }\n    *(arg1 + 0x4c) = 0;\ncode_r0x00014000809a:\n    *(arg1 + 0x48) = uVar4;\n    return CONCAT71(uVar4 >> 8, 1);\n}\n",
        "token_count": 422
    },
    "14000716": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nvoid fcn.140007168(int64_t arg1, ulong arg2)\n\n{\n    uint8_t uVar1;\n    uint64_t uVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    \n    iVar4 = *(arg1 + 0x458);\n    if (iVar4 == 0) {\n        uVar2 = 0x200;\n        iVar4 = arg1 + 0x50;\n    }\n    else {\n        uVar2 = *(arg1 + 0x450) >> 1;\n    }\n    iVar4 = (uVar2 - 1) + iVar4;\n    *(arg1 + 0x40) = iVar4;\n    iVar3 = iVar4;\n    while( true ) {\n        if ((*(arg1 + 0x30) < 1) && (arg2 == 0)) break;\n        uVar1 = arg2;\n        *(arg1 + 0x30) = *(arg1 + 0x30) + -1;\n        arg2._0_4_ = arg2 >> 3;\n        **(arg1 + 0x40) = (uVar1 & 7) + 0x30;\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -1;\n        iVar3 = *(arg1 + 0x40);\n    }\n    *(arg1 + 0x48) = iVar4 - *(arg1 + 0x40);\n    *(arg1 + 0x40) = iVar3 + 1;\n    return;\n}\n",
        "token_count": 345
    },
    "1400071e": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nvoid fcn.1400071e4(int64_t arg1, ulong arg2)\n\n{\n    uint64_t uVar1;\n    int64_t iVar2;\n    uint8_t in_R8B;\n    int64_t iVar3;\n    char cVar4;\n    \n    iVar3 = *(arg1 + 0x458);\n    if (iVar3 == 0) {\n        uVar1 = 0x200;\n        iVar3 = arg1 + 0x50;\n    }\n    else {\n        uVar1 = *(arg1 + 0x450) >> 1;\n    }\n    iVar3 = (uVar1 - 1) + iVar3;\n    *(arg1 + 0x40) = iVar3;\n    iVar2 = iVar3;\n    uVar1 = arg2;\n    while ((0 < *(arg1 + 0x30) || (uVar1 != 0))) {\n        *(arg1 + 0x30) = *(arg1 + 0x30) + -1;\n        cVar4 = uVar1 + (uVar1 / 10) * -10 + '0';\n        if ('9' < cVar4) {\n            cVar4 = (in_R8B ^ 1) * ' ' + '\\a' + cVar4;\n        }\n        **(arg1 + 0x40) = cVar4;\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -1;\n        iVar2 = *(arg1 + 0x40);\n        uVar1 = uVar1 / 10;\n    }\n    *(arg1 + 0x48) = iVar3 - *(arg1 + 0x40);\n    *(arg1 + 0x40) = iVar2 + 1;\n    return;\n}\n",
        "token_count": 396
    },
    "14000728": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nvoid fcn.14000728c(int64_t arg1, ulong arg2)\n\n{\n    uint64_t uVar1;\n    int64_t iVar2;\n    uint8_t uVar3;\n    uint8_t in_R8B;\n    int64_t iVar4;\n    \n    iVar4 = *(arg1 + 0x458);\n    if (iVar4 == 0) {\n        uVar1 = 0x200;\n        iVar4 = arg1 + 0x50;\n    }\n    else {\n        uVar1 = *(arg1 + 0x450) >> 1;\n    }\n    iVar4 = (uVar1 - 1) + iVar4;\n    *(arg1 + 0x40) = iVar4;\n    iVar2 = iVar4;\n    while( true ) {\n        if ((*(arg1 + 0x30) < 1) && (arg2 == 0)) break;\n        uVar3 = arg2;\n        arg2._0_4_ = arg2 >> 4;\n        uVar3 = (uVar3 & 0xf) + 0x30;\n        *(arg1 + 0x30) = *(arg1 + 0x30) + -1;\n        if (0x39 < uVar3) {\n            uVar3 = (in_R8B ^ 1) * ' ' + '\\a' + uVar3;\n        }\n        **(arg1 + 0x40) = uVar3;\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -1;\n        iVar2 = *(arg1 + 0x40);\n    }\n    *(arg1 + 0x48) = iVar4 - *(arg1 + 0x40);\n    *(arg1 + 0x40) = iVar2 + 1;\n    return;\n}\n",
        "token_count": 405
    },
    "14000731": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nvoid fcn.140007318(int64_t arg1, uint64_t arg2)\n\n{\n    uint64_t uVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    \n    iVar3 = *(arg1 + 0x458);\n    if (iVar3 == 0) {\n        uVar1 = 0x200;\n        iVar3 = arg1 + 0x50;\n    }\n    else {\n        uVar1 = *(arg1 + 0x450) >> 1;\n    }\n    iVar3 = (uVar1 - 1) + iVar3;\n    *(arg1 + 0x40) = iVar3;\n    iVar2 = iVar3;\n    for (; (0 < *(arg1 + 0x30) || (arg2 != 0)); arg2 = arg2 >> 3) {\n        *(arg1 + 0x30) = *(arg1 + 0x30) + -1;\n        **(arg1 + 0x40) = (arg2 & 7) + 0x30;\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -1;\n        iVar2 = *(arg1 + 0x40);\n    }\n    *(arg1 + 0x48) = iVar3 - *(arg1 + 0x40);\n    *(arg1 + 0x40) = iVar2 + 1;\n    return;\n}\n",
        "token_count": 316
    },
    "14000739": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nvoid fcn.140007394(int64_t arg1, uint64_t arg2)\n\n{\n    uint64_t uVar1;\n    int64_t iVar2;\n    uint8_t in_R8B;\n    int64_t iVar3;\n    char cVar4;\n    \n    iVar3 = *(arg1 + 0x458);\n    if (iVar3 == 0) {\n        uVar1 = 0x200;\n        iVar3 = arg1 + 0x50;\n    }\n    else {\n        uVar1 = *(arg1 + 0x450) >> 1;\n    }\n    iVar3 = (uVar1 - 1) + iVar3;\n    *(arg1 + 0x40) = iVar3;\n    iVar2 = iVar3;\n    while ((0 < *(arg1 + 0x30) || (arg2 != 0))) {\n        *(arg1 + 0x30) = *(arg1 + 0x30) + -1;\n        cVar4 = arg2 + (arg2 / 10) * -10 + '0';\n        if ('9' < cVar4) {\n            cVar4 = (in_R8B ^ 1) * ' ' + '\\a' + cVar4;\n        }\n        **(arg1 + 0x40) = cVar4;\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -1;\n        iVar2 = *(arg1 + 0x40);\n        arg2 = arg2 / 10;\n    }\n    *(arg1 + 0x48) = iVar3 - *(arg1 + 0x40);\n    *(arg1 + 0x40) = iVar2 + 1;\n    return;\n}\n",
        "token_count": 383
    },
    "14000744": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nvoid fcn.140007440(int64_t arg1, uint64_t arg2)\n\n{\n    uint64_t uVar1;\n    int64_t iVar2;\n    uint8_t uVar3;\n    uint8_t in_R8B;\n    int64_t iVar4;\n    \n    iVar4 = *(arg1 + 0x458);\n    if (iVar4 == 0) {\n        uVar1 = 0x200;\n        iVar4 = arg1 + 0x50;\n    }\n    else {\n        uVar1 = *(arg1 + 0x450) >> 1;\n    }\n    iVar4 = (uVar1 - 1) + iVar4;\n    *(arg1 + 0x40) = iVar4;\n    iVar2 = iVar4;\n    while ((0 < *(arg1 + 0x30) || (arg2 != 0))) {\n        uVar3 = arg2;\n        arg2 = arg2 >> 4;\n        uVar3 = (uVar3 & 0xf) + 0x30;\n        *(arg1 + 0x30) = *(arg1 + 0x30) + -1;\n        if (0x39 < uVar3) {\n            uVar3 = (in_R8B ^ 1) * ' ' + '\\a' + uVar3;\n        }\n        **(arg1 + 0x40) = uVar3;\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -1;\n        iVar2 = *(arg1 + 0x40);\n    }\n    *(arg1 + 0x48) = iVar4 - *(arg1 + 0x40);\n    *(arg1 + 0x40) = iVar2 + 1;\n    return;\n}\n",
        "token_count": 392
    },
    "14000b08": {
        "rules": [
            "PEB access/cd8d96519f6244b6acf2796407e948b9",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000b080(int64_t arg1)\n\n{\n    // WARNING: Could not recover jumptable at 0x00014000b084. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(arg1 + 0x30);\n    return;\n}\n",
        "token_count": 75
    },
    "140017a0": {
        "rules": [
            "encrypt data using HC-128/1d01b23c04404fe18b84a06c7e7d83b0",
            "hash data using aphash/10489b186fc44711a1078750698db7a9"
        ],
        "decompiled_code": "\nuint32_t fcn.140017a08(void)\n\n{\n    uint16_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint32_t in_MXCSR;\n    \n    uVar1 = in_MXCSR & 0x8040;\n    if (uVar1 == 0x8000) {\n        uVar4 = 0xc00;\n    }\n    else if (uVar1 == 0x40) {\n        uVar4 = 0x800;\n    }\n    else {\n        uVar4 = 0;\n        if (uVar1 == 0x8040) {\n            uVar4 = 0x400;\n        }\n    }\n    uVar2 = in_MXCSR & 0x6000;\n    if (uVar2 == 0) {\n        uVar3 = 0;\n    }\n    else if (uVar2 == 0x2000) {\n        uVar3 = 0x100;\n    }\n    else if (uVar2 == 0x4000) {\n        uVar3 = 0x200;\n    }\n    else {\n        uVar3 = 0x300;\n        if (uVar2 != 0x6000) {\n            uVar3 = 0;\n        }\n    }\n    uVar4 = ((((in_MXCSR >> 2 & 0x400 | in_MXCSR & 0x800) >> 2 | in_MXCSR & 0x400) >> 2 | in_MXCSR & 0x200) >> 3 |\n            in_MXCSR & 0x180) >> 3 | uVar4 | uVar3;\n    return (uVar3 | uVar4 * 4) << 0x16 | uVar4;\n}\n",
        "token_count": 402
    },
    "140009c0": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nvoid fcn.140009c04(uint64_t arg1)\n\n{\n    code *pcVar1;\n    uint8_t uVar2;\n    \n    if (*0x140027350 == *0x140026018) {\n        uVar2 = 0x40 - (*0x140026018 & 0x3f) & 0x3f;\n        *0x140027350 = (arg1 >> uVar2 | arg1 << 0x40 - uVar2) ^ *0x140026018;\n        return;\n    }\n    fcn.14000ad34(arg1);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 151
    },
    "14000a5d": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nulong fcn.14000a5d8(int64_t **arg1)\n\n{\n    uint64_t uVar1;\n    ulong uVar2;\n    uint64_t uVar3;\n    uint64_t *puVar4;\n    uint8_t uVar5;\n    uint64_t *puVar6;\n    uint64_t *puVar7;\n    uint64_t *lpMem;\n    uint64_t uVar8;\n    uint64_t *puVar9;\n    uint64_t *puVar10;\n    \n    uVar1 = *0x140026018;\n    puVar6 = **arg1;\n    if (puVar6 == NULL) {\n        uVar2 = 0xffffffff;\n    }\n    else {\n        uVar5 = *0x140026018 & 0x3f;\n        lpMem = (*puVar6 ^ *0x140026018) >> uVar5 | (*puVar6 ^ *0x140026018) << 0x40 - uVar5;\n        puVar6 = (puVar6[1] ^ *0x140026018) >> uVar5 | (puVar6[1] ^ *0x140026018) << 0x40 - uVar5;\n        puVar7 = puVar6;\n        uVar3 = *0x140026018;\n        puVar10 = lpMem;\n        if (lpMem - 1U < 0xfffffffffffffffe) {\n            while (puVar6 = puVar6 + -1,  lpMem <= puVar6) {\n                if (*puVar6 != uVar1) {\n                    *puVar6 = uVar1;\n                    (**0x14001a5a8)();\n                    uVar5 = *0x140026018 & 0x3f;\n                    uVar8 = ***arg1 ^ *0x140026018;\n                    uVar3 = (**arg1)[1] ^ *0x140026018;\n                    puVar9 = uVar8 >> uVar5 | uVar8 << 0x40 - uVar5;\n                    puVar4 = uVar3 >> uVar5 | uVar3 << 0x40 - uVar5;\n                    uVar3 = *0x140026018;\n                    if ((puVar9 != puVar10) || (puVar4 != puVar7)) {\n                        puVar6 = puVar4;\n                        puVar7 = puVar4;\n                        lpMem = puVar9;\n                        puVar10 = puVar9;\n                    }\n                }\n            }\n            if (lpMem != 0xffffffffffffffff) {\n                fcn.14000ae8c(lpMem);\n                uVar3 = *0x140026018;\n            }\n            ***arg1 = uVar3;\n            *(**arg1 + 8) = uVar3;\n            *(**arg1 + 0x10) = uVar3;\n        }\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 645
    },
    "14000a96": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nulong fcn.14000a96c(ulong arg1)\n\n{\n    ulong uVar1;\n    uint8_t uVar2;\n    \n    uVar2 = *0x140026018 & 0x3f;\n    if (((*0x140026018 ^ *0x1400274c0) >> uVar2 | (*0x140026018 ^ *0x1400274c0) << 0x40 - uVar2) == 0) {\n        return 0;\n    }\n    // WARNING: Could not recover jumptable at 0x00014000a99d. Too many branches\n    // WARNING: Treating indirect jump as call\n    uVar1 = (**0x14001a5a8)(arg1);\n    return uVar1;\n}\n",
        "token_count": 172
    },
    "14000efc": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nuint64_t fcn.14000efcc(ulong noname_0, uint32_t *arg2, ulong noname_2, uint32_t *arg4)\n\n{\n    uint8_t uVar1;\n    uint64_t uVar2;\n    \n    fcn.14000f970(*arg2);\n    uVar1 = *0x140026018 & 0x3f;\n    uVar2 = *0x140026018 ^ *0x140027968;\n    fcn.14000f9c4(*arg4);\n    return uVar2 >> uVar1 | uVar2 << 0x40 - uVar1;\n}\n",
        "token_count": 143
    },
    "14000f2e": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nuint64_t fcn.14000f2e4(ulong arg1, ulong arg2, uint32_t *arg3, uint32_t *arg4)\n\n{\n    int64_t *piVar1;\n    ulong arg1_00;\n    int64_t iVar2;\n    uint8_t uVar3;\n    int32_t iVar4;\n    int64_t iVar5;\n    uint64_t uVar6;\n    uint64_t uVar7;\n    \n    uVar7 = arg1;\n    uVar6 = *0x140026018 ^ *(uVar7 * 8 + 0x140027a20);\n    uVar3 = *0x140026018 & 0x3f;\n    uVar6 = uVar6 >> uVar3 | uVar6 << 0x40 - uVar3;\n    if (uVar6 != 0xffffffffffffffff) {\n        if (uVar6 != 0) {\n            return uVar6;\n        }\n        if (arg3 != arg4) {\n            do {\n                uVar6 = *arg3;\n                iVar5 = *(uVar6 * 8 + 0x140027980);\n                if (iVar5 == 0) {\n                    arg1_00 = *(uVar6 * 8 + 0x14001c790);\n                    iVar5 = (*_sym.imp.KERNEL32.dll_LoadLibraryExW)(arg1_00, 0);\n                    if ((iVar5 != 0) ||\n                       ((((iVar4 = (*_sym.imp.KERNEL32.dll_GetLastError)(),  iVar4 == 0x57 &&\n                          (iVar4 = fcn.14000ae60(arg1_00, L\"api-ms-\", 7),  iVar4 != 0)) &&\n                         (iVar4 = fcn.14000ae60(arg1_00, L\"ext-ms-\", 7),  iVar4 != 0)) &&\n                        (iVar5 = (*_sym.imp.KERNEL32.dll_LoadLibraryExW)(arg1_00, 0, 0),  iVar5 != 0)))) {\n                        piVar1 = uVar6 * 8 + 0x140027980;\n                        iVar2 = *piVar1;\n                        *piVar1 = iVar5;\n                        if (iVar2 != 0) {\n                            (*_sym.imp.KERNEL32.dll_FreeLibrary)(iVar5);\n                        }\n                        goto code_r0x00014000f469;\n                    }\n                    *(uVar6 * 8 + 0x140027980) = 0xffffffffffffffff;\n                }\n                else if (iVar5 != -1) {\ncode_r0x00014000f469:\n                    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar5, arg2);\n                    if (uVar6 != 0) {\n                        uVar3 = 0x40 - (*0x140026018 & 0x3f) & 0x3f;\n                        *(uVar7 * 8 + 0x140027a20) = (uVar6 >> uVar3 | uVar6 << 0x40 - uVar3) ^ *0x140026018;\n                        return uVar6;\n                    }\n                    break;\n                }\n                arg3 = arg3 + 1;\n            } while (arg3 != arg4);\n        }\n        uVar3 = 0x40 - (*0x140026018 & 0x3f) & 0x3f;\n        *(uVar7 * 8 + 0x140027a20) = (0xffffffffffffffffU >> uVar3 | -1 << 0x40 - uVar3) ^ *0x140026018;\n    }\n    return 0;\n}\n",
        "token_count": 803
    },
    "140011c5": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nvoid fcn.140011c50(ulong arg1)\n\n{\n    // WARNING: Could not recover jumptable at 0x000140011c70. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(*((arg1 >> 6) * 8 + 0x140027550) + (arg1 & 0x3f) * 0x48);\n    return;\n}\n",
        "token_count": 101
    },
    "140011d3": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nvoid fcn.140011d38(ulong arg1)\n\n{\n    // WARNING: Could not recover jumptable at 0x000140011d58. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(*((arg1 >> 6) * 8 + 0x140027550) + (arg1 & 0x3f) * 0x48);\n    return;\n}\n",
        "token_count": 102
    },
    "140015ef": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nint64_t fcn.140015ef8(uint8_t *arg1, ulong arg2, ulong *arg3, int64_t arg4)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    uint8_t uVar3;\n    uint8_t uVar4;\n    \n    if (arg1 != NULL) {\n        if (arg2 != 0) {\n            if ((arg2 & 0xffffff80) == 0) {\n                *arg1 = arg2;\n                return 1;\n            }\n            if ((arg2 & 0xfffff800) == 0) {\n                iVar1 = 1;\n                uVar4 = 0xc0;\n                iVar2 = iVar1;\n            }\n            else if ((arg2 & 0xffff0000) == 0) {\n                if (arg2 - 0xd800 < 0x800) {\ncode_r0x000140017cfc:\n                    *arg3 = 0;\n                    *(arg4 + 0x30) = 1;\n                    *(arg4 + 0x2c) = 0x2a;\n                    return -1;\n                }\n                iVar1 = 2;\n                uVar4 = 0xe0;\n                iVar2 = iVar1;\n            }\n            else {\n                if (((arg2 & 0xffe00000) != 0) || (0x10ffff < arg2)) goto code_r0x000140017cfc;\n                iVar1 = 3;\n                uVar4 = 0xf0;\n                iVar2 = iVar1;\n            }\n            do {\n                uVar3 = arg2;\n                arg2._0_4_ = arg2 >> 6;\n                arg1[iVar1] = uVar3 & 0x3f | 0x80;\n                iVar1 = iVar1 + -1;\n            } while (iVar1 != 0);\n            *arg1 = arg2 | uVar4;\n            *arg3 = 0;\n            return iVar2 + 1;\n        }\n        *arg1 = 0;\n    }\n    *arg3 = 0;\n    return 1;\n}\n",
        "token_count": 465
    },
    "1400022d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.1400022d8(ulong arg1)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.14000229c(arg1);\n    return (iVar1 != 0) - 1;\n}\n",
        "token_count": 54
    },
    "14000102": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140001020(ulong arg1, ulong arg2)\n\n{\n    fcn.1400091c0(arg1, arg2);\n    return;\n}\n",
        "token_count": 37
    },
    "1400017d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400017d0(ulong arg1, int64_t arg2)\n\n{\n    ulong arg1_00;\n    ulong in_R9;\n    int32_t iStack20;\n    \n    arg1_00 = fcn.14000640c(0x140026ac0, 0x14001a68c);\n    for (iStack20 = 0; iStack20 < arg1; iStack20 = iStack20 + 1) {\n        fcn.140001f60(arg1_00, 0x14001a690, *(arg2 + iStack20), in_R9);\n    }\n    fcn.1400062b8(arg1_00);\n    return;\n}\n",
        "token_count": 156
    },
    "14000194": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "create process on Windows"
        ],
        "decompiled_code": "\nvoid fcn.140001940(void)\n\n{\n    uchar auStack152 [32];\n    uint auStack120 [30];\n    \n    fcn.140003630(auStack120, 0, 0x68);\n    auStack120[0] = 0x68;\n    fcn.140003630(auStack152, 0, 0x18);\n    (*_sym.imp.KERNEL32.dll_CreateProcessA)(0x140026ac0, 0, 0, 0, 0, 0, 0, 0, auStack120, auStack152);\n    return;\n}\n",
        "token_count": 134
    },
    "140001b7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.140001b70(int64_t *arg1, int64_t arg2)\n\n{\n    return *arg1 + arg2;\n}\n",
        "token_count": 35
    },
    "140001da": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.140001da0(ulong arg1)\n\n{\n    int32_t iVar1;\n    \n    if ((arg1 < 0x41) || (0x5a < arg1)) {\n        if ((arg1 < 0x61) || (0x7a < arg1)) {\n            if ((arg1 < 0x30) || (0x39 < arg1)) {\n                if (arg1 == 0x2b) {\n                    iVar1 = 0x3e;\n                }\n                else if (arg1 == 0x2f) {\n                    iVar1 = 0x3f;\n                }\n                else {\n                    iVar1 = -1;\n                }\n            }\n            else {\n                iVar1 = arg1 + 4;\n            }\n        }\n        else {\n            iVar1 = arg1 - 0x47;\n        }\n    }\n    else {\n        iVar1 = arg1 - 0x41;\n    }\n    return iVar1;\n}\n",
        "token_count": 214
    },
    "140001eb": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140001eb0(ulong arg1)\n\n{\n    fcn.140001e70(arg1);\n    return;\n}\n",
        "token_count": 30
    },
    "140001ed": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.140001ed0(int64_t *arg1)\n\n{\n    return arg1[1] - *arg1;\n}\n",
        "token_count": 32
    },
    "140001f1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140001f10(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    ulong *puVar1;\n    \n    puVar1 = fcn.140001f00();\n    fcn.1400086e0(*puVar1, arg1, arg2, arg3);\n    return;\n}\n",
        "token_count": 75
    },
    "140001f6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.140001f60(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    uint uVar1;\n    ulong uStackX24;\n    ulong uStackX32;\n    \n    uStackX24 = arg3;\n    uStackX32 = arg4;\n    uVar1 = fcn.140001f10(arg1, arg2, 0, &uStackX24);\n    return uVar1;\n}\n",
        "token_count": 100
    },
    "140001fb": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "print debug messages"
        ],
        "decompiled_code": "\nuint * fcn.140001fb0(uint *arg1)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    \n    fcn.140003630(arg1 + 10, 0, 0x28);\n    *(arg1 + 0x14) = 0;\n    arg1[0x16] = 0;\n    arg1[0x17] = 0;\n    *(arg1 + 4) = 0x140000000;\n    *(arg1 + 2) = 0x140000000;\n    *(arg1 + 8) = 0x14001a920;\n    *arg1 = 0x60;\n    arg1[6] = 0xe00;\n    iVar2 = fcn.140001e10(arg1 + 10, 0, 0);\n    if (iVar2 == 0) {\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        uVar1 = uVar3 & 0xffff | 0x80070000;\n        if (uVar3 < 1) {\n            uVar1 = uVar3;\n        }\n        if (uVar1 < 0) {\n            iVar2 = (*_sym.imp.KERNEL32.dll_IsDebuggerPresent)();\n            if (iVar2 != 0) {\n                (*_sym.imp.KERNEL32.dll_OutputDebugStringW)\n                          (L\"ERROR : Unable to initialize critical section in CAtlBaseModule\\n\");\n            }\n            *0x140026b30 = 1;\n        }\n    }\n    return arg1;\n}\n",
        "token_count": 354
    },
    "14000ae8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000ae8c(int64_t lpMem)\n\n{\n    uint *puVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint uVar4;\n    \n    if ((lpMem != 0) && (iVar2 = (*_sym.imp.KERNEL32.dll_HeapFree)(*0x140027d68, 0, lpMem),  iVar2 == 0)) {\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        uVar4 = fcn.140009620(uVar3);\n        puVar1 = fcn.1400096f4();\n        *puVar1 = uVar4;\n    }\n    return;\n}\n",
        "token_count": 154
    },
    "140002ed": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140002ed0(void)\n\n{\n    int64_t *piVar1;\n    \n    for (piVar1 = 0x140023378; piVar1 < 0x140023378; piVar1 = piVar1 + 1) {\n        if (*piVar1 != 0) {\n            (**0x14001a5a0)();\n        }\n    }\n    return;\n}\n",
        "token_count": 89
    },
    "140005bd": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140005bd4(void)\n\n{\n    uint64_t uVar1;\n    \n    uVar1 = *0x140027288;\n    while (uVar1 != 0) {\n        uVar1 = uVar1 - 1;\n        (*_sym.imp.KERNEL32.dll_DeleteCriticalSection)(uVar1 * 0x28 + 0x140027260);\n        *0x140027288 = *0x140027288 - 1;\n    }\n    return 1;\n}\n",
        "token_count": 110
    },
    "14000641": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140006418(ulong noname_0, ulong *arg2, ulong arg3, ulong *arg4)\n\n{\n    ulong uVar1;\n    \n    fcn.14000b080(*arg2);\n    uVar1 = fcn.140006458(arg3);\n    fcn.14000b08c(*arg4);\n    return uVar1;\n}\n",
        "token_count": 83
    },
    "1400064d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.1400064d8(ulong arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg_30h)\n\n{\n    ulong uVar1;\n    ulong var_10h;\n    int64_t var_18h_2;\n    int64_t var_20h_2;\n    int64_t var_28h;\n    ulong var_40h;\n    int64_t var_38h;\n    int64_t var_30h;\n    ulong *var_28h_2;\n    int64_t var_20h;\n    ulong *var_18h;\n    ulong *var_10h_2;\n    ulong *var_8h;\n    \n    if ((arg2 != 0) && (arg3 != 0)) {\n        var_10h = arg1;\n        var_18h_2 = arg2;\n        var_20h_2 = arg3;\n        var_28h = arg4;\n        if (arg4 != 0) {\n            var_28h_2 = &var_28h;\n            var_20h = arg_30h;\n            var_18h = &var_10h;\n            var_10h_2 = &var_18h_2;\n            var_8h = &var_20h_2;\n            var_38h = arg4;\n            var_30h = arg4;\n            uVar1 = fcn.140006418(&var_40h, &var_30h, &var_28h_2, &var_38h);\n            return uVar1;\n        }\n        *(arg_30h + 0x30) = 1;\n        *(arg_30h + 0x2c) = 0x16;\n        fcn.1400094e8(0, 0, 0, 0);\n    }\n    return 0;\n}\n",
        "token_count": 419
    },
    "14000681": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.140006818(ulong noname_0, ulong *arg2, ulong arg3, ulong *arg4)\n\n{\n    uint uVar1;\n    \n    fcn.14000b080(*arg2);\n    uVar1 = fcn.1400074cc(arg3);\n    fcn.14000b08c(*arg4);\n    return uVar1;\n}\n",
        "token_count": 84
    },
    "14000685": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint64_t fcn.140006858(int64_t arg1, uint64_t arg2, int64_t arg3)\n\n{\n    int64_t iVar1;\n    uint64_t uVar2;\n    \n    if (arg2 < 0x8000000000000000) {\n        arg2 = arg2 * 2;\n        if (((*(arg1 + 0x408) == 0) && (arg2 < 0x401)) || (arg2 < *(arg1 + 0x400) || arg2 == *(arg1 + 0x400))) {\n            uVar2 = 0x7fffffffffffff01;\n        }\n        else {\n            iVar1 = fcn.14000d2c8(arg2);\n            if (iVar1 != 0) {\n                fcn.14000ae8c(*(arg1 + 0x408));\n                *(arg1 + 0x408) = iVar1;\n                *(arg1 + 0x400) = arg2;\n            }\n            uVar2 = fcn.14000ae8c(0);\n            uVar2 = uVar2 & 0xffffffffffffff00 | iVar1 != 0;\n        }\n    }\n    else {\n        *(arg3 + 0x30) = 1;\n        uVar2 = 0x7fffffffffffff00;\n        *(arg3 + 0x2c) = 0xc;\n    }\n    return uVar2;\n}\n",
        "token_count": 316
    },
    "14000850": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140008500(int64_t arg1)\n\n{\n    int64_t arg1_00;\n    \n    arg1_00 = fcn.140006250(arg1);\n    *(arg1 + 0x18) = *(arg1_00 + 0x90);\n    *(arg1 + 0x20) = *(arg1_00 + 0x88);\n    fcn.14000d684(arg1_00, arg1 + 0x18);\n    fcn.14000d6f0(arg1_00, arg1 + 0x20);\n    if ((*(arg1_00 + 0x3a8) & 2) == 0) {\n        *(arg1_00 + 0x3a8) = *(arg1_00 + 0x3a8) | 2;\n        *(arg1 + 0x28) = 2;\n    }\n    return;\n}\n",
        "token_count": 205
    },
    "14000d2c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.14000d2c8(uint64_t arg1)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    uint *puVar3;\n    \n    if (arg1 < 0xffffffffffffffe1) {\n        if (arg1 == 0) {\n            arg1 = 1;\n        }\n        do {\n            iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(*0x140027d68, 0, arg1);\n            if (iVar2 != 0) {\n                return iVar2;\n            }\n            iVar1 = fcn.14000acf8();\n        } while ((iVar1 != 0) && (iVar1 = fcn.140011a40(arg1),  iVar1 != 0));\n    }\n    puVar3 = fcn.1400096f4();\n    *puVar3 = 0xc;\n    return 0;\n}\n",
        "token_count": 200
    },
    "14000923": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.140009230(int64_t *arg1)\n\n{\n    int64_t iVar1;\n    int64_t lpFlsData;\n    uint auStackX8 [2];\n    \n    iVar1 = *arg1;\n    lpFlsData = 0;\n    if (iVar1 == 0) {\n        auStackX8[0] = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        if (*(arg1 + 2) == '\\0') {\n            arg1[1] = 0;\n            *(arg1 + 2) = 1;\n        }\n        else {\n            lpFlsData = arg1[1];\n        }\n        iVar1 = fcn.14000bdd8(auStackX8, lpFlsData);\n        *arg1 = iVar1;\n        (*_sym.imp.KERNEL32.dll_SetLastError)(auStackX8[0]);\n    }\n    return iVar1;\n}\n",
        "token_count": 202
    },
    "14000929": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.14000929c(int64_t arg1, int64_t arg2)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    \n    iVar2 = 0;\n    if (*(arg2 + 0x10) == '\\0') {\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        *(arg2 + 8) = 0;\n        *(arg2 + 0x10) = 1;\n        (*_sym.imp.KERNEL32.dll_SetLastError)(uVar1);\n    }\n    else {\n        iVar2 = *(arg2 + 8);\n    }\n    return arg1 + iVar2 * 8;\n}\n",
        "token_count": 149
    },
    "14000966": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140009668(uint64_t arg1)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    uint *puVar3;\n    uint64_t arg1_00;\n    ulong in_RDX;\n    \n    arg1_00 = arg1 & 0xffffffff;\n    iVar2 = fcn.14000bd10(arg1, in_RDX);\n    if (iVar2 == 0) {\n        puVar3 = 0x140026058;\n    }\n    else {\n        puVar3 = iVar2 + 0x24;\n    }\n    *puVar3 = arg1_00;\n    uVar1 = fcn.140009620(arg1_00);\n    iVar2 = fcn.14000bd10(arg1_00, in_RDX);\n    puVar3 = 0x140026054;\n    if (iVar2 != 0) {\n        puVar3 = iVar2 + 0x20;\n    }\n    *puVar3 = uVar1;\n    return;\n}\n",
        "token_count": 222
    },
    "1400096b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400096b0(ulong arg1, int64_t arg2)\n\n{\n    uint uVar1;\n    \n    *(arg2 + 0x38) = 1;\n    *(arg2 + 0x34) = arg1;\n    uVar1 = fcn.140009620(arg1);\n    *(arg2 + 0x2c) = uVar1;\n    *(arg2 + 0x30) = 1;\n    return;\n}\n",
        "token_count": 105
    },
    "14000993": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140009930(ulong noname_0, uint32_t *arg2, ulong arg3, uint32_t *arg4)\n\n{\n    fcn.14000f970(*arg2);\n    fcn.140009968(arg3);\n    fcn.14000f9c4(*arg4);\n    return;\n}\n",
        "token_count": 74
    },
    "140009ff": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140009ff8(void)\n\n{\n    int64_t iVar1;\n    int64_t arg1;\n    ulong uVar2;\n    int64_t iVar3;\n    \n    uVar2 = 0;\n    if (*0x140027468 == 0) {\n        fcn.140010f0c();\n        arg1 = fcn.1400113dc();\n        if (arg1 == 0) {\n            fcn.14000ae8c(0);\n            uVar2 = 0xffffffff;\n        }\n        else {\n            iVar3 = fcn.14000a06c(arg1);\n            iVar1 = iVar3;\n            if (iVar3 == 0) {\n                uVar2 = 0xffffffff;\n                iVar3 = *0x140027468;\n                iVar1 = *0x140027480;\n            }\n            *0x140027480 = iVar1;\n            *0x140027468 = iVar3;\n            fcn.14000ae8c(0);\n            fcn.14000ae8c(arg1);\n        }\n    }\n    else {\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 254
    },
    "14000a1c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.14000a1c0(void)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    int64_t *piVar3;\n    \n    piVar3 = *0x140027470;\n    if (*0x140027470 == NULL) {\ncode_r0x00014000a1e9:\n        iVar2 = 0xffffffff;\n    }\n    else {\n        for (; iVar2 = *piVar3,  iVar2 != 0; piVar3 = piVar3 + 1) {\n            iVar1 = fcn.14001132c(0, 0, iVar2, 0xffffffff);\n            if (iVar1 == 0) goto code_r0x00014000a1e9;\n            iVar2 = fcn.14000fa1c(iVar1, 1);\n            if (iVar2 == 0) {\n                iVar2 = 0;\ncode_r0x00014000a294:\n                fcn.14000ae8c(iVar2);\n                goto code_r0x00014000a1e9;\n            }\n            iVar1 = fcn.14001132c(0, 0, *piVar3, 0xffffffff);\n            if (iVar1 == 0) goto code_r0x00014000a294;\n            fcn.14001192c(iVar2, 0);\n            fcn.14000ae8c(0);\n        }\n    }\n    return iVar2;\n}\n",
        "token_count": 323
    },
    "14000a2a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000a2a0(int64_t *arg1)\n\n{\n    if (*arg1 != *0x140027480) {\n        fcn.14000a17c(*arg1);\n    }\n    return;\n}\n",
        "token_count": 52
    },
    "14000a2b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000a2bc(int64_t *arg1)\n\n{\n    if (*arg1 != *0x140027478) {\n        fcn.14000a17c(*arg1);\n    }\n    return;\n}\n",
        "token_count": 51
    },
    "14000a17": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000a17c(int64_t *arg1)\n\n{\n    int64_t lpMem;\n    int64_t *piVar1;\n    \n    if (arg1 != NULL) {\n        lpMem = *arg1;\n        piVar1 = arg1;\n        while (lpMem != 0) {\n            fcn.14000ae8c(lpMem);\n            piVar1 = piVar1 + 1;\n            lpMem = *piVar1;\n        }\n        fcn.14000ae8c(arg1);\n    }\n    return;\n}\n",
        "token_count": 123
    },
    "14000a31": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.14000a314(void)\n\n{\n    int64_t *lpMem;\n    int64_t lpMem_00;\n    int64_t *piVar1;\n    \n    fcn.14000a2a0(0x140027468);\n    fcn.14000a2bc(0x140027470);\n    fcn.14000a17c(*0x140027480);\n    lpMem = *0x140027478;\n    if (*0x140027478 != NULL) {\n        lpMem_00 = **0x140027478;\n        piVar1 = *0x140027478;\n        while (lpMem_00 != 0) {\n            fcn.14000ae8c(lpMem_00);\n            piVar1 = piVar1 + 1;\n            lpMem_00 = *piVar1;\n        }\n        fcn.14000ae8c(lpMem);\n    }\n    return;\n}\n",
        "token_count": 205
    },
    "14000a3e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.14000a3ec(ulong noname_0, uint32_t *arg2, ulong arg3, uint32_t *arg4)\n\n{\n    uint uVar1;\n    \n    fcn.14000f970(*arg2);\n    uVar1 = fcn.14000a5d8(arg3);\n    fcn.14000f9c4(*arg4);\n    return uVar1;\n}\n",
        "token_count": 93
    },
    "14000a77": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.14000a774(ulong arg1, ulong arg2)\n\n{\n    ulong uStackX8;\n    ulong uStackX16;\n    ulong var_20h_2;\n    ulong var_28h;\n    ulong var_20h;\n    ulong *var_18h;\n    ulong *var_bp_10h;\n    \n    var_18h = &uStackX8;\n    var_bp_10h = &uStackX16;\n    var_28h._0_4_ = 2;\n    var_20h._0_4_ = 2;\n    uStackX8 = arg1;\n    uStackX16 = arg2;\n    fcn.14000a3b0(&var_20h_2, &var_20h, &var_18h, &var_28h);\n    return;\n}\n",
        "token_count": 195
    },
    "14000a70": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000a708(ulong arg1)\n\n{\n    ulong uStackX8;\n    uchar auStackX16 [8];\n    uint auStackX24 [2];\n    uint auStackX32 [2];\n    ulong *puStack24;\n    ulong uStack16;\n    \n    uStack16 = 0xfffffffffffffffe;\n    puStack24 = &uStackX8;\n    auStackX24[0] = 2;\n    auStackX32[0] = 2;\n    uStackX8 = arg1;\n    fcn.14000a3ec(auStackX16, auStackX32, &puStack24, auStackX24);\n    return;\n}\n",
        "token_count": 152
    },
    "14000a9c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000a9cc(int64_t *arg1, int64_t *arg2)\n\n{\n    if (arg1 != arg2) {\n        do {\n            if (*arg1 != 0) {\n                (**0x14001a5a8)();\n            }\n            arg1 = arg1 + 1;\n        } while (arg1 != arg2);\n    }\n    return;\n}\n",
        "token_count": 87
    },
    "14000aa1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14000aa10(int64_t *arg1, int64_t *arg2)\n\n{\n    ulong uVar1;\n    bool bVar2;\n    \n    bVar2 = arg1 == arg2;\n    while( true ) {\n        if (bVar2) {\n            return 0;\n        }\n        if ((*arg1 != 0) && (uVar1 = (**0x14001a5a8)(),  uVar1 != 0)) break;\n        arg1 = arg1 + 1;\n        bVar2 = arg1 == arg2;\n    }\n    return uVar1;\n}\n",
        "token_count": 135
    },
    "14000aa5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14000aa58(uint *arg1)\n\n{\n    uint *puVar1;\n    ulong uVar2;\n    \n    if (arg1 == NULL) {\n        puVar1 = fcn.1400096f4();\n        *puVar1 = 0x16;\n        fcn.1400095b8();\n        uVar2 = 0x16;\n    }\n    else {\n        *arg1 = *0x140027d78;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 118
    },
    "14000d65": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000d650(int64_t arg1, int64_t *arg2)\n\n{\n    int64_t iVar1;\n    \n    if ((*arg2 != *0x140027520) && ((*0x140026910 & *(arg1 + 0x3a8)) == 0)) {\n        iVar1 = fcn.140012774(arg1);\n        *arg2 = iVar1;\n    }\n    return;\n}\n",
        "token_count": 95
    },
    "14000d68": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000d684(int64_t arg1, int64_t *arg2)\n\n{\n    int64_t iVar1;\n    int64_t in_R8;\n    \n    if ((*arg2 != *(in_R8 * 8 + 0x140027520)) && ((*0x140026910 & *(arg1 + 0x3a8)) == 0)) {\n        iVar1 = fcn.140012774(arg1);\n        *arg2 = iVar1;\n    }\n    return;\n}\n",
        "token_count": 111
    },
    "14000d6b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000d6bc(int64_t arg1, int64_t *arg2)\n\n{\n    int64_t iVar1;\n    \n    if ((*arg2 != *0x140027d58) && ((*0x140026910 & *(arg1 + 0x3a8)) == 0)) {\n        iVar1 = fcn.140010f6c(arg1);\n        *arg2 = iVar1;\n    }\n    return;\n}\n",
        "token_count": 99
    },
    "14000d6f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000d6f0(int64_t arg1, int64_t *arg2)\n\n{\n    int64_t iVar1;\n    int64_t in_R8;\n    \n    if ((*arg2 != *(in_R8 * 8 + 0x140027d58)) && ((*0x140026910 & *(arg1 + 0x3a8)) == 0)) {\n        iVar1 = fcn.140010f6c(arg1);\n        *arg2 = iVar1;\n    }\n    return;\n}\n",
        "token_count": 116
    },
    "14000e54": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.14000e540(int32_t *arg1, uchar *arg2, uint64_t arg3)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint16_t in_R9W;\n    uint64_t uStackX16;\n    uint16_t auStackX32 [4];\n    int64_t in_stack_00000028;\n    \n    if ((arg2 == NULL) && (arg3 != 0)) {\n        if (arg1 == NULL) {\n            return 0;\n        }\n        *arg1 = 0;\n        return 0;\n    }\n    if (arg1 != NULL) {\n        *arg1 = -1;\n    }\n    if (arg3 < 0x80000000) {\n        auStackX32[0] = in_R9W;\n        if (*(in_stack_00000028 + 0x28) == '\\0') {\n            fcn.140008500(in_stack_00000028);\n        }\n        uVar1 = *(*(in_stack_00000028 + 0x18) + 0xc);\n        if (uVar1 == 0xfde9) {\n            uStackX16 = 0;\n            iVar2 = fcn.140015ef8(arg2, auStackX32[0], &uStackX16, in_stack_00000028);\n            if (arg1 != NULL) {\n                *arg1 = iVar2;\n            }\n            if (iVar2 < 5) {\n                return 0;\n            }\n            if (*(in_stack_00000028 + 0x30) != '\\0') {\n                return *(in_stack_00000028 + 0x2c);\n            }\n            return 0;\n        }\n        if (*(*(in_stack_00000028 + 0x18) + 0x138) == 0) {\n            if (0xff < auStackX32[0]) {\n                if ((arg2 != NULL) && (arg3 != 0)) {\n                    fcn.140003630(arg2, 0, arg3);\n                }\n                goto code_r0x00014000e622;\n            }\n            if (arg2 == NULL) {\ncode_r0x00014000e64e:\n                if (arg1 != NULL) {\n                    *arg1 = 1;\n                }\n                return 0;\n            }\n            if (arg3 != 0) {\n                *arg2 = auStackX32[0];\n                goto code_r0x00014000e64e;\n            }\n        }\n        else {\n            uStackX16 = uStackX16 & 0xffffffff00000000;\n            iVar2 = fcn.14001132c(uVar1, 0, auStackX32, 1);\n            if (iVar2 != 0) {\n                if (uStackX16 == 0) {\n                    if (arg1 == NULL) {\n                        return 0;\n                    }\n                    *arg1 = iVar2;\n                    return 0;\n                }\ncode_r0x00014000e622:\n                *(in_stack_00000028 + 0x2c) = 0x2a;\n                *(in_stack_00000028 + 0x30) = 1;\n                return 0x2a;\n            }\n            iVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            if (iVar2 != 0x7a) goto code_r0x00014000e622;\n            if ((arg2 != NULL) && (arg3 != 0)) {\n                fcn.140003630(arg2, 0, arg3);\n            }\n        }\n        uVar3 = 0x22;\n    }\n    else {\n        uVar3 = 0x16;\n    }\n    *(in_stack_00000028 + 0x2c) = uVar3;\n    *(in_stack_00000028 + 0x30) = 1;\n    fcn.1400094e8(0, 0, 0, 0);\n    return uVar3;\n}\n",
        "token_count": 896
    },
    "14000f4a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14000f4a4(ulong arg1)\n\n{\n    int64_t iVar1;\n    ulong uVar2;\n    \n    iVar1 = fcn.14000f2e4(0x18, \"AppPolicyGetProcessTerminationMethod\", 0x14001cd04, \n                          \"AppPolicyGetProcessTerminationMethod\");\n    if (iVar1 != 0) {\n    // WARNING: Could not recover jumptable at 0x00014000f4ea. Too many branches\n    // WARNING: Treating indirect jump as call\n        uVar2 = (**0x14001a5a8)(0xfffffffffffffffa, arg1);\n        return uVar2;\n    }\n    return 0xc0000225;\n}\n",
        "token_count": 164
    },
    "14000f4f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14000f4fc(void)\n\n{\n    int64_t iVar1;\n    ulong uVar2;\n    \n    iVar1 = fcn.14000f2e4(0, \"AreFileApisANSI\", 0x14001cc98, 0x14001cc9c);\n    if (iVar1 != 0) {\n    // WARNING: Could not recover jumptable at 0x00014000f52f. Too many branches\n    // WARNING: Treating indirect jump as call\n        uVar2 = (**0x14001a5a8)();\n        return uVar2;\n    }\n    return 1;\n}\n",
        "token_count": 142
    },
    "14000f64": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000f64c(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.14000f2e4(0xe, 0x14001ba98, 0x14001ccc8, 0x14001ccd0);\n    if (iVar1 == 0) {\n        (*_sym.imp.KERNEL32.dll_InitializeCriticalSectionAndSpinCount)(arg1, arg2);\n    }\n    else {\n        (**0x14001a5a8)(arg1, arg2, arg3);\n    }\n    return;\n}\n",
        "token_count": 136
    },
    "14000f6b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000f6bc(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    ulong in_stack_00000028;\n    uint in_stack_00000030;\n    ulong in_stack_00000038;\n    ulong in_stack_00000040;\n    ulong in_stack_00000048;\n    \n    iVar2 = fcn.14000f2e4(0x10, \"LCMapStringEx\", 0x14001ccd0, \"LCMapStringEx\");\n    if (iVar2 == 0) {\n        uVar1 = fcn.14000f7a8(arg1, 0);\n        (*_sym.imp.KERNEL32.dll_LCMapStringW)(uVar1, arg2, arg3, arg4, in_stack_00000028, in_stack_00000030);\n    }\n    else {\n        (**0x14001a5a8)(arg1, arg2, arg3, arg4, in_stack_00000028, in_stack_00000030, in_stack_00000038, \n                        in_stack_00000040, in_stack_00000048);\n    }\n    return;\n}\n",
        "token_count": 268
    },
    "14000f7a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000f7a8(ulong arg1, ulong arg2)\n\n{\n    int64_t iVar1;\n    char *arg2_00;\n    \n    arg2_00 = \"LocaleNameToLCID\";\n    iVar1 = fcn.14000f2e4(0x12, \"LocaleNameToLCID\", 0x14001cce8, \"LocaleNameToLCID\");\n    if (iVar1 == 0) {\n        fcn.140015fb4(arg1, arg2_00);\n    }\n    else {\n        (**0x14001a5a8)(arg1, arg2);\n    }\n    return;\n}\n",
        "token_count": 144
    },
    "14000f98": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14000f98c(void)\n\n{\n    uint64_t uVar1;\n    \n    uVar1 = *0x140027d40;\n    while (uVar1 != 0) {\n        uVar1 = uVar1 - 1;\n        (*_sym.imp.KERNEL32.dll_DeleteCriticalSection)(uVar1 * 0x28 + 0x140027b10);\n        *0x140027d40 = *0x140027d40 - 1;\n    }\n    return 1;\n}\n",
        "token_count": 115
    },
    "14000fc2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t fcn.14000fc24(int16_t *arg1, int64_t arg2, ulong noname_2, ulong arg4)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    uint32_t *puVar4;\n    uint64_t uVar5;\n    uint64_t arg1_00;\n    \n    if (arg1 == NULL) {\n        if (*(arg2 + 0x28) != '\\0') {\n            fcn.14000ae8c(*(arg2 + 0x10));\n            *(arg2 + 0x28) = 0;\n        }\n        *(arg2 + 0x10) = 0;\n        *(arg2 + 0x18) = 0;\n    }\n    else {\n        if (*arg1 != 0) {\n            iVar2 = fcn.14001132c(arg4, 0, arg1, 0xffffffff);\n            arg1_00 = iVar2;\n            if (iVar2 != 0) {\n                if (*(arg2 + 0x18) < arg1_00) {\n                    if (*(arg2 + 0x28) != '\\0') {\n                        fcn.14000ae8c(*(arg2 + 0x10));\n                        *(arg2 + 0x28) = 0;\n                    }\n                    iVar3 = fcn.14000d2c8(arg1_00);\n                    *(arg2 + 0x10) = iVar3;\n                    uVar1 = ~-(iVar3 != 0) & 0xc;\n                    uVar5 = 0;\n                    if (uVar1 == 0) {\n                        uVar5 = arg1_00;\n                    }\n                    *(arg2 + 0x28) = uVar1 == 0;\n                    *(arg2 + 0x18) = uVar5;\n                    if (uVar1 != 0) {\n                        return uVar1;\n                    }\n                }\n                iVar2 = fcn.14001132c(arg4, 0, arg1, 0xffffffff);\n                if (iVar2 != 0) {\n                    *(arg2 + 0x20) = iVar2 + -1;\n                    return 0;\n                }\n            }\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            fcn.140009668(uVar1);\n            puVar4 = fcn.1400096f4();\n            return *puVar4;\n        }\n        if (*(arg2 + 0x18) == 0) {\n            if (*(arg2 + 0x28) != '\\0') {\n                fcn.14000ae8c(*(arg2 + 0x10));\n                *(arg2 + 0x28) = 0;\n            }\n            iVar3 = fcn.14000d2c8(1);\n            *(arg2 + 0x10) = iVar3;\n            uVar1 = ~-(iVar3 != 0) & 0xc;\n            *(arg2 + 0x28) = uVar1 == 0;\n            *(arg2 + 0x18) = uVar1 == 0;\n            if (uVar1 != 0) {\n                return uVar1;\n            }\n        }\n        **(arg2 + 0x10) = 0;\n    }\n    *(arg2 + 0x20) = 0;\n    return 0;\n}\n",
        "token_count": 750
    },
    "14001096": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.140010964(int64_t arg1)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    ushort *puVar3;\n    int64_t iVar4;\n    \n    fcn.140003630(arg1 + 0x18, 0, 0x101);\n    iVar2 = 0;\n    *(arg1 + 4) = 0;\n    *(arg1 + 0x220) = 0;\n    puVar3 = arg1 + 0xc;\n    for (iVar1 = 6; iVar4 = iVar2,  iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    do {\n        iVar1 = iVar4 + 1;\n        *(arg1 + iVar4 + 0x18) = *(iVar4 + 0x140026348);\n        iVar4 = iVar1;\n    } while (iVar1 < 0x101);\n    do {\n        iVar1 = iVar2 + 1;\n        *(arg1 + iVar2 + 0x119) = *(iVar2 + 0x140026449);\n        iVar2 = iVar1;\n    } while (iVar1 < 0x100);\n    return;\n}\n",
        "token_count": 285
    },
    "140010f6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t * fcn.140010f6c(ulong arg1)\n\n{\n    int32_t iVar1;\n    ulong arg3;\n    int64_t iVar2;\n    ulong in_RDX;\n    ulong lpFlsData;\n    int32_t *lpMem;\n    \n    iVar2 = fcn.14000bb98(arg1, in_RDX);\n    lpFlsData = 0x140027d58;\n    if (((*(iVar2 + 0x3a8) & *0x140026910) == 0) || (*(iVar2 + 0x90) == 0)) {\n        fcn.14000f970(5);\n        lpMem = *(iVar2 + 0x88);\n        if (lpMem != *0x140027d58) {\n            if (lpMem != NULL) {\n                LOCK();\n                iVar1 = *lpMem;\n                *lpMem = *lpMem + -1;\n                if ((iVar1 == 1) && (lpMem != 0x140026330)) {\n                    fcn.14000ae8c(lpMem);\n                }\n            }\n            lpMem = *0x140027d58;\n            *(iVar2 + 0x88) = *0x140027d58;\n            LOCK();\n            *lpMem = *lpMem + 1;\n        }\n        fcn.14000f9c4(5);\n    }\n    else {\n        lpMem = *(iVar2 + 0x88);\n    }\n    if (lpMem != NULL) {\n        return lpMem;\n    }\n    fcn.140009124();\n    if (*0x140027d64 == '\\0') {\n        *0x140027d50 = 0x140026670;\n        *0x140027d58 = 0x140026330;\n        *0x140027d48 = 0x140026560;\n        arg3 = fcn.14000bc6c(0x140026560, lpFlsData);\n        fcn.140010be4(0xfffffffd, CONCAT71(lpFlsData >> 8, 1), arg3, 0x140027d58);\n        *0x140027d64 = '\\x01';\n    }\n    return 0x1;\n}\n",
        "token_count": 493
    },
    "1400113d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.1400113dc(void)\n\n{\n    int16_t iVar1;\n    int32_t iVar2;\n    int16_t *arg3;\n    int64_t iVar3;\n    int16_t *piVar5;\n    uint64_t uVar6;\n    int64_t iVar4;\n    \n    arg3 = (*_sym.imp.KERNEL32.dll_GetEnvironmentStringsW)();\n    if (arg3 != NULL) {\n        iVar1 = *arg3;\n        piVar5 = arg3;\n        while (iVar1 != 0) {\n            iVar3 = -1;\n            do {\n                iVar4 = iVar3;\n                iVar3 = iVar4 + 1;\n            } while (piVar5[iVar3] != 0);\n            piVar5 = piVar5 + iVar4 + 2;\n            iVar1 = *piVar5;\n        }\n        uVar6 = piVar5 + (2 - arg3) >> 1;\n        iVar2 = fcn.14001132c(0, 0, arg3, uVar6 & 0xffffffff);\n        if (iVar2 != 0) {\n            iVar3 = fcn.14000d2c8(iVar2);\n            if (iVar3 != 0) {\n                iVar2 = fcn.14001132c(0, 0, arg3, uVar6 & 0xffffffff);\n                if (iVar2 == 0) {\n                    fcn.14000ae8c(iVar3);\n                    iVar3 = 0;\n                }\n                else {\n                    fcn.14000ae8c(0);\n                }\n                (*_sym.imp.KERNEL32.dll_FreeEnvironmentStringsW)(arg3);\n                return iVar3;\n            }\n            fcn.14000ae8c(0);\n        }\n        (*_sym.imp.KERNEL32.dll_FreeEnvironmentStringsW)(arg3);\n    }\n    return 0;\n}\n",
        "token_count": 411
    },
    "140011a4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140011a40(ulong arg1)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    \n    iVar2 = fcn.140011a7c();\n    if ((iVar2 != 0) && (iVar1 = (**0x14001a5a8)(arg1),  iVar1 != 0)) {\n        return 1;\n    }\n    return 0;\n}\n",
        "token_count": 91
    },
    "140011ff": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140011ff0(int64_t arg1)\n\n{\n    if (arg1 != 0) {\n        if (*(arg1 + 0x18) != *0x140026888) {\n            fcn.14000ae8c(*(arg1 + 0x18));\n        }\n        if (*(arg1 + 0x20) != *0x140026890) {\n            fcn.14000ae8c(*(arg1 + 0x20));\n        }\n        if (*(arg1 + 0x28) != *0x140026898) {\n            fcn.14000ae8c(*(arg1 + 0x28));\n        }\n        if (*(arg1 + 0x30) != *0x1400268a0) {\n            fcn.14000ae8c(*(arg1 + 0x30));\n        }\n        if (*(arg1 + 0x38) != *0x1400268a8) {\n            fcn.14000ae8c(*(arg1 + 0x38));\n        }\n        if (*(arg1 + 0x40) != *0x1400268b0) {\n            fcn.14000ae8c(*(arg1 + 0x40));\n        }\n        if (*(arg1 + 0x48) != *0x1400268b8) {\n            fcn.14000ae8c(*(arg1 + 0x48));\n        }\n        if (*(arg1 + 0x68) != *0x1400268d8) {\n            fcn.14000ae8c(*(arg1 + 0x68));\n        }\n        if (*(arg1 + 0x70) != *0x1400268e0) {\n            fcn.14000ae8c(*(arg1 + 0x70));\n        }\n        if (*(arg1 + 0x78) != *0x1400268e8) {\n            fcn.14000ae8c(*(arg1 + 0x78));\n        }\n        if (*(arg1 + 0x80) != *0x1400268f0) {\n            fcn.14000ae8c(*(arg1 + 0x80));\n        }\n        if (*(arg1 + 0x88) != *0x1400268f8) {\n            fcn.14000ae8c(*(arg1 + 0x88));\n        }\n        if (*(arg1 + 0x90) != *0x140026900) {\n            fcn.14000ae8c(*(arg1 + 0x90));\n        }\n    }\n    return;\n}\n",
        "token_count": 570
    },
    "1400120f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400120fc(int64_t *arg1)\n\n{\n    if (arg1 != NULL) {\n        if (*arg1 != *0x140026870) {\n            fcn.14000ae8c(*arg1);\n        }\n        if (arg1[1] != *0x140026878) {\n            fcn.14000ae8c(arg1[1]);\n        }\n        if (arg1[2] != *0x140026880) {\n            fcn.14000ae8c(arg1[2]);\n        }\n        if (arg1[0xb] != *0x1400268c8) {\n            fcn.14000ae8c(arg1[0xb]);\n        }\n        if (arg1[0xc] != *0x1400268d0) {\n            fcn.14000ae8c(arg1[0xc]);\n        }\n    }\n    return;\n}\n",
        "token_count": 201
    },
    "14001216": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140012168(ulong *arg1)\n\n{\n    ulong *puVar1;\n    int64_t in_RDX;\n    \n    puVar1 = arg1 + in_RDX;\n    if (arg1 != puVar1) {\n        do {\n            fcn.14000ae8c(*arg1);\n            arg1 = arg1 + 1;\n        } while (arg1 != puVar1);\n    }\n    return;\n}\n",
        "token_count": 97
    },
    "1400132e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400132e0(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    uint32_t in_stack_00000028;\n    \n    fcn.140012bb8(arg2, arg3, arg4, in_stack_00000028);\n    return;\n}\n",
        "token_count": 68
    },
    "140013a7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140013a78(ushort *arg1)\n\n{\n    uint64_t uVar1;\n    ulong in_RDX;\n    ulong in_R8;\n    ulong in_R9;\n    uint32_t auStack24 [4];\n    \n    uVar1 = fcn.140016f60(auStack24, in_RDX, in_R8, in_R9);\n    if (uVar1 < 5) {\n        if (0xffff < auStack24[0]) {\n            auStack24[0] = 0xfffd;\n        }\n        if (arg1 != NULL) {\n            *arg1 = auStack24[0];\n        }\n    }\n    return;\n}\n",
        "token_count": 149
    },
    "140015ee": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t fcn.140015ee4(void)\n\n{\n    uint32_t uVar1;\n    \n    uVar1 = fcn.140017a08();\n    return uVar1 & 0x300;\n}\n",
        "token_count": 48
    },
    "140015fb": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.140015fb4(int64_t arg1, ulong arg2)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    \n    if (arg1 != 0) {\n        iVar4 = 0;\n        iVar5 = 0xe3;\n        do {\n            iVar2 = (iVar5 + iVar4) / 2;\n            iVar3 = fcn.140012a20(arg1, *(iVar2 * 0x10 + 0x14001f7f0), 0x55);\n            if (iVar3 == 0) {\n                uVar1 = *(iVar2 * 0x10 + 0x14001f7f8);\n                if (uVar1 < 0) {\n                    return 0;\n                }\n                if (0xe3 < uVar1) {\n                    return 0;\n                }\n                return *(uVar1 * 0x10 + 0x14001dd90);\n            }\n            if (iVar3 < 0) {\n                iVar5 = iVar2 + -1;\n            }\n            else {\n                iVar4 = iVar2 + 1;\n            }\n        } while (iVar4 <= iVar5);\n    }\n    return 0;\n}\n",
        "token_count": 287
    },
    "14001647": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.140016470(char *arg1, int64_t arg2, int64_t arg3, int64_t arg4)\n\n{\n    char cVar1;\n    uint *puVar2;\n    int64_t iVar3;\n    char *pcVar4;\n    uint uVar5;\n    int64_t iVar6;\n    int64_t iVar7;\n    \n    if (arg4 == 0) {\n        if (arg1 == NULL) {\n            if (arg2 == 0) {\n                return 0;\n            }\n        }\n        else {\ncode_r0x0001400164c3:\n            if (arg2 != 0) {\n                if (arg4 == 0) {\n                    *arg1 = '\\0';\n                    return 0;\n                }\n                if (arg3 != 0) {\n                    pcVar4 = arg1;\n                    iVar3 = arg4;\n                    iVar7 = arg2;\n                    if (arg4 == -1) {\n                        do {\n                            cVar1 = pcVar4[arg3 - arg1];\n                            *pcVar4 = cVar1;\n                            pcVar4 = pcVar4 + 1;\n                            if (cVar1 == '\\0') {\n                                return 0;\n                            }\n                            iVar7 = iVar7 + -1;\n                        } while (iVar7 != 0);\n                    }\n                    else {\n                        do {\n                            iVar6 = iVar3;\n                            cVar1 = pcVar4[arg3 - arg1];\n                            *pcVar4 = cVar1;\n                            pcVar4 = pcVar4 + 1;\n                            if (cVar1 == '\\0') {\n                                return 0;\n                            }\n                            iVar7 = iVar7 + -1;\n                        } while ((iVar7 != 0) && (iVar3 = iVar6 + -1,  iVar6 + -1 != 0));\n                        iVar3 = iVar6 + -1;\n                        if (iVar7 == 0) {\n                            iVar3 = iVar6;\n                        }\n                        if (iVar3 == 0) {\n                            *pcVar4 = '\\0';\n                        }\n                    }\n                    if (iVar7 != 0) {\n                        return 0;\n                    }\n                    if (arg4 == -1) {\n                        arg1[arg2 + -1] = '\\0';\n                        return 0x50;\n                    }\n                    *arg1 = '\\0';\n                    puVar2 = fcn.1400096f4();\n                    uVar5 = 0x22;\n                    goto code_r0x0001400164a1;\n                }\n                *arg1 = '\\0';\n            }\n        }\n    }\n    else if (arg1 != NULL) goto code_r0x0001400164c3;\n    puVar2 = fcn.1400096f4();\n    uVar5 = 0x16;\ncode_r0x0001400164a1:\n    *puVar2 = uVar5;\n    fcn.1400095b8();\n    return uVar5;\n}\n",
        "token_count": 641
    },
    "14001873": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140018730(ulong param_1, ulong param_2, ulong param_3)\n\n{\n    fcn.140018750(param_1, param_2, param_3, 0x1b);\n    return;\n}\n",
        "token_count": 54
    },
    "1400075e": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid fcn.1400075e8(char *arg1, int64_t *arg2)\n\n{\n    char cVar1;\n    char *pcVar2;\n    char *pcVar3;\n    int64_t iVar4;\n    \n    cVar1 = *arg1;\n    while ((cVar1 != '\\0' && (cVar1 != ***(*arg2 + 0xf8)))) {\n        arg1 = arg1 + 1;\n        cVar1 = *arg1;\n    }\n    if (cVar1 != '\\0') {\n        do {\n            arg1 = arg1 + 1;\n            pcVar2 = arg1;\n            if (*arg1 == '\\0') break;\n        } while ((*arg1 + 0xbbU & 0xdf) != 0);\n        do {\n            pcVar3 = pcVar2;\n            pcVar2 = pcVar3 + -1;\n        } while (*pcVar2 == '0');\n        pcVar3 = pcVar3 + -2;\n        if (*pcVar2 != ***(*arg2 + 0xf8)) {\n            pcVar3 = pcVar2;\n        }\n        iVar4 = arg1 - pcVar3;\n        do {\n            cVar1 = pcVar3[iVar4];\n            pcVar3 = pcVar3 + 1;\n            *pcVar3 = cVar1;\n        } while (cVar1 != '\\0');\n    }\n    return;\n}\n",
        "token_count": 311
    },
    "140016b9": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "set environment variable"
        ],
        "decompiled_code": "\nuint64_t fcn.140016b94(ulong arg1, ulong arg2)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint64_t uVar3;\n    uint64_t uVar4;\n    uchar auStackX24 [8];\n    int64_t iStack152;\n    int64_t iStack144;\n    char cStack128;\n    ulong uStack120;\n    ulong uStack112;\n    uint64_t uStack104;\n    ulong uStack96;\n    ulong uStack88;\n    char cStack80;\n    ulong uStack72;\n    ulong uStack64;\n    ulong uStack56;\n    ulong uStack48;\n    ulong uStack40;\n    char cStack32;\n    \n    uVar3 = 0;\n    uStack72 = 0;\n    uStack64 = 0;\n    uStack56 = 0;\n    uStack48 = 0;\n    uStack40 = 0;\n    cStack32 = '\\0';\n    uStack120 = 0;\n    uStack112 = 0;\n    uStack104 = 0;\n    uStack96 = 0;\n    uStack88 = 0;\n    cStack80 = '\\0';\n    fcn.140008b7c(&iStack152, 0);\n    uVar2 = 0xfde9;\n    if (*(iStack144 + 0xc) == 0xfde9) {\n        if (cStack128 != '\\0') {\n            *(iStack152 + 0x3a8) = *(iStack152 + 0x3a8) & 0xfffffffd;\n        }\n        uVar4 = 0xfde9;\n    }\n    else {\n        iVar1 = fcn.14000f4fc();\n        if (iVar1 == 0) {\n            if (cStack128 != '\\0') {\n                *(iStack152 + 0x3a8) = *(iStack152 + 0x3a8) & 0xfffffffd;\n            }\n            uVar4 = 1;\n        }\n        else {\n            uVar4 = uVar3;\n            if (cStack128 != '\\0') {\n                *(iStack152 + 0x3a8) = *(iStack152 + 0x3a8) & 0xfffffffd;\n            }\n        }\n    }\n    iVar1 = fcn.14000faa8(arg1, &uStack72, auStackX24, uVar4);\n    uVar4 = uVar3;\n    if (iVar1 == 0) {\n        fcn.140008b7c(&iStack152, 0);\n        if (*(iStack144 + 0xc) == 0xfde9) {\n            if (cStack128 != '\\0') {\n                *(iStack152 + 0x3a8) = *(iStack152 + 0x3a8) & 0xfffffffd;\n            }\n        }\n        else {\n            iVar1 = fcn.14000f4fc();\n            if (iVar1 == 0) {\n                if (cStack128 != '\\0') {\n                    *(iStack152 + 0x3a8) = *(iStack152 + 0x3a8) & 0xfffffffd;\n                }\n                uVar2 = 1;\n            }\n            else {\n                if (cStack128 != '\\0') {\n                    *(iStack152 + 0x3a8) = *(iStack152 + 0x3a8) & 0xfffffffd;\n                }\n                uVar2 = 0;\n            }\n        }\n        iVar1 = fcn.14000faa8(arg2, &uStack120, auStackX24, uVar2);\n        uVar4 = uStack104;\n        if (iVar1 == 0) {\n            uVar2 = (*_sym.imp.KERNEL32.dll_SetEnvironmentVariableW)(uStack56, uStack104);\n            uVar3 = uVar2;\n        }\n    }\n    if (cStack80 != '\\0') {\n        fcn.14000ae8c(uVar4);\n    }\n    if (cStack32 != '\\0') {\n        fcn.14000ae8c(uStack56);\n    }\n    return uVar3;\n}\n",
        "token_count": 927
    },
    "14000911": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nint64_t fcn.14000911c(uint64_t arg1)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    uint *puVar3;\n    \n    if (arg1 < 0xffffffffffffffe1) {\n        if (arg1 == 0) {\n            arg1 = 1;\n        }\n        do {\n            iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(*0x140027d68, 0, arg1);\n            if (iVar2 != 0) {\n                return iVar2;\n            }\n            iVar1 = fcn.14000acf8();\n        } while ((iVar1 != 0) && (iVar1 = fcn.140011a40(arg1),  iVar1 != 0));\n    }\n    puVar3 = fcn.1400096f4();\n    *puVar3 = 0xc;\n    return 0;\n}\n",
        "token_count": 198
    },
    "140009bf": {
        "rules": [
            "parse PE header"
        ],
        "decompiled_code": "\nvoid fcn.140009bf8(ulong arg1)\n\n{\n    code *pcVar1;\n    int16_t *piVar2;\n    int32_t *piVar3;\n    uint auStackX16 [2];\n    int32_t aiStackX24 [2];\n    uchar auStackX32 [8];\n    uchar auStack56 [4];\n    uint uStack52;\n    uint auStack48 [2];\n    ulong uStack40;\n    uint *puStack32;\n    int32_t *piStack24;\n    uchar *puStack16;\n    \n    aiStackX24[0] = 0;\n    auStackX16[0] = 2;\n    uStack40 = 0xfffffffffffffffe;\n    piVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n    if ((((piVar2 != NULL) && (*piVar2 == 0x5a4d)) && (piVar3 = *(piVar2 + 0x1e) + piVar2,  *piVar3 == 0x4550)) &&\n       (((*(piVar3 + 6) == 0x20b && (0xe < piVar3[0x21])) && (piVar3[0x3e] != 0)))) {\n        fcn.140009b60(arg1);\n    }\n    auStackX32[0] = 0;\n    puStack32 = auStackX16;\n    piStack24 = aiStackX24;\n    puStack16 = auStackX32;\n    uStack52 = 2;\n    auStack48[0] = 2;\n    fcn.140009930(auStack56, auStack48, &puStack32, &uStack52);\n    if (aiStackX24[0] == 0) {\n        fcn.140009afc(arg1);\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    return;\n}\n",
        "token_count": 429
    },
    "140009c4": {
        "rules": [
            "parse PE header"
        ],
        "decompiled_code": "\nvoid fcn.140009c44(ulong arg1)\n\n{\n    code *pcVar1;\n    int16_t *piVar2;\n    int32_t *piVar3;\n    uint auStackX16 [2];\n    int32_t aiStackX24 [2];\n    uchar auStackX32 [8];\n    uchar auStack56 [4];\n    uint uStack52;\n    uint auStack48 [2];\n    ulong uStack40;\n    uint *puStack32;\n    int32_t *piStack24;\n    uchar *puStack16;\n    \n    aiStackX24[0] = 0;\n    auStackX16[0] = 0;\n    uStack40 = 0xfffffffffffffffe;\n    piVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n    if ((((piVar2 != NULL) && (*piVar2 == 0x5a4d)) && (piVar3 = *(piVar2 + 0x1e) + piVar2,  *piVar3 == 0x4550)) &&\n       (((*(piVar3 + 6) == 0x20b && (0xe < piVar3[0x21])) && (piVar3[0x3e] != 0)))) {\n        fcn.140009b60(arg1);\n    }\n    auStackX32[0] = 0;\n    puStack32 = auStackX16;\n    piStack24 = aiStackX24;\n    puStack16 = auStackX32;\n    uStack52 = 2;\n    auStack48[0] = 2;\n    fcn.140009930(auStack56, auStack48, &puStack32, &uStack52);\n    if (aiStackX24[0] == 0) {\n        fcn.140009afc(arg1);\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    return;\n}\n",
        "token_count": 429
    },
    "140009af": {
        "rules": [
            "terminate process"
        ],
        "decompiled_code": "\nvoid fcn.140009afc(uint64_t arg1)\n\n{\n    code *pcVar1;\n    ulong uVar2;\n    char cVar3;\n    \n    arg1 = arg1 & 0xffffffff;\n    cVar3 = fcn.140009b30();\n    if (cVar3 != '\\0') {\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)();\n        (*_sym.imp.KERNEL32.dll_TerminateProcess)(uVar2, arg1);\n    }\n    fcn.140009b60(arg1);\n    (*_sym.imp.KERNEL32.dll_ExitProcess)(arg1);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 157
    }
}