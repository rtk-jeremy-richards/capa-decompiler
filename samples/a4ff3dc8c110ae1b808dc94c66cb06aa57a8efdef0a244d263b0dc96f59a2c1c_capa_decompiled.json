{
    "14000109": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.140001090(ulong noname_0, ulong arg2)\n\n{\n    int32_t iVar1;\n    ulong in_R8;\n    ulong in_R9;\n    int64_t *in_stack_00000030;\n    int64_t *in_stack_00000038;\n    int64_t *in_stack_00000040;\n    int64_t *in_stack_00000058;\n    int64_t *in_stack_00000060;\n    int64_t *in_stack_00000068;\n    int64_t *in_stack_00000070;\n    uchar auStack312 [32];\n    uint uStack280;\n    uchar *puStack272;\n    int64_t *piStack264;\n    ulong uStack256;\n    uchar auStack248 [40];\n    ulong uStack208;\n    int64_t iStack200;\n    int32_t iStack192;\n    uint uStack188;\n    int64_t iStack184;\n    int32_t iStack176;\n    uint uStack172;\n    int64_t iStack168;\n    int32_t iStack160;\n    uint uStack156;\n    ulong uStack144;\n    ulong uStack128;\n    int64_t iStack120;\n    int32_t iStack112;\n    uint uStack108;\n    int64_t iStack104;\n    int32_t iStack96;\n    uint uStack92;\n    int64_t iStack88;\n    int32_t iStack80;\n    uint uStack76;\n    int64_t iStack72;\n    int32_t iStack64;\n    uint uStack60;\n    uint64_t uStack56;\n    \n    uStack56 = *0x14003ef38 ^ auStack312;\n    iStack96 = 2;\n    piStack264 = in_stack_00000030;\n    iStack72 = *in_stack_00000070;\n    uStack256 = arg2;\n    if (iStack72 == 0) {\n        iStack72 = 0x1400373c4;\n        iStack64 = 2;\n    }\n    else {\n        iVar1 = fcn.140013788(iStack72, arg2, in_R8, in_R9);\n        iStack64 = iVar1 * 2 + 2;\n    }\n    uStack60 = 0;\n    iStack88 = *in_stack_00000068;\n    if (iStack88 == 0) {\n        iStack88 = 0x1400373c4;\n        iStack80 = 2;\n    }\n    else {\n        iVar1 = fcn.140013788(iStack88, arg2, in_R8, in_R9);\n        iStack80 = iVar1 * 2 + 2;\n    }\n    iStack104 = *in_stack_00000060;\n    uStack76 = 0;\n    if (iStack104 == 0) {\n        iStack104 = 0x1400373c4;\n    }\n    else {\n        iVar1 = fcn.140013788(iStack104, arg2, in_R8, in_R9);\n        iStack96 = iVar1 * 2 + 2;\n    }\n    iStack120 = *in_stack_00000058;\n    uStack92 = 0;\n    if (iStack120 == 0) {\n        iStack120 = 0x1400373c1;\n        iStack112 = 1;\n    }\n    else {\n        iStack112 = fcn.140013590(iStack120);\n        iStack112 = iStack112 + 1;\n    }\n    iStack168 = *in_stack_00000040;\n    uStack108 = 0;\n    uStack128 = 1;\n    uStack144 = 4;\n    iStack192 = 1;\n    if (iStack168 == 0) {\n        iStack168 = 0x1400373c1;\n        iStack160 = iStack192;\n    }\n    else {\n        iVar1 = fcn.140013590(iStack168);\n        iStack160 = iVar1 + 1;\n    }\n    iStack184 = *in_stack_00000038;\n    uStack156 = 0;\n    if (iStack184 == 0) {\n        iStack184 = 0x1400373c1;\n        iStack176 = iStack192;\n    }\n    else {\n        iVar1 = fcn.140013590(iStack184);\n        iStack176 = iVar1 + 1;\n    }\n    uStack172 = 0;\n    iStack200 = *piStack264;\n    if (iStack200 == 0) {\n        iStack200 = 0x1400373c1;\n    }\n    else {\n        iStack192 = fcn.140013590(iStack200);\n        iStack192 = iStack192 + 1;\n    }\n    puStack272 = auStack248;\n    uStack280 = 0xc;\n    uStack188 = 0;\n    uStack208 = 1;\n    fcn.140001000(0x14003e240, uStack256, 0, 0);\n    fcn.140018790(uStack56 ^ auStack312);\n    return;\n}\n",
        "token_count": 1118
    },
    "14000143": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.140001438(ulong noname_0, ulong arg2)\n\n{\n    int32_t iVar1;\n    ulong in_R8;\n    ulong in_R9;\n    int64_t *in_stack_00000028;\n    int64_t *in_stack_00000030;\n    int64_t *in_stack_00000038;\n    int64_t *in_stack_00000050;\n    int64_t *in_stack_00000058;\n    int64_t *in_stack_00000060;\n    int64_t *in_stack_00000070;\n    uchar auStack328 [32];\n    uint uStack296;\n    uchar *puStack288;\n    int64_t *piStack280;\n    ulong uStack272;\n    uchar auStack264 [32];\n    int64_t iStack232;\n    int32_t iStack224;\n    uint uStack220;\n    int64_t iStack216;\n    int32_t iStack208;\n    uint uStack204;\n    int64_t iStack200;\n    int32_t iStack192;\n    uint uStack188;\n    ulong uStack176;\n    ulong uStack160;\n    int64_t iStack152;\n    int32_t iStack144;\n    uint uStack140;\n    int64_t iStack136;\n    int32_t iStack128;\n    uint uStack124;\n    int64_t iStack120;\n    int32_t iStack112;\n    uint uStack108;\n    uint uStack96;\n    uint uStack92;\n    int64_t iStack88;\n    int32_t iStack80;\n    uint uStack76;\n    uint uStack64;\n    uint uStack60;\n    uint64_t uStack56;\n    \n    uStack56 = *0x14003ef38 ^ auStack328;\n    iStack208 = 2;\n    uStack60 = 0;\n    iStack88 = *in_stack_00000070;\n    piStack280 = in_stack_00000028;\n    uStack64 = 4;\n    uStack272 = arg2;\n    if (iStack88 == 0) {\n        iStack88 = 0x1400373c4;\n        iStack80 = 2;\n    }\n    else {\n        iVar1 = fcn.140013788(iStack88, arg2, in_R8, in_R9);\n        iStack80 = iVar1 * 2 + 2;\n    }\n    uStack76 = 0;\n    uStack92 = 0;\n    iStack120 = *in_stack_00000060;\n    uStack96 = 1;\n    if (iStack120 == 0) {\n        iStack120 = 0x1400373c1;\n        iStack112 = 1;\n    }\n    else {\n        iStack112 = fcn.140013590(iStack120);\n        iStack112 = iStack112 + 1;\n    }\n    iStack136 = *in_stack_00000058;\n    uStack108 = 0;\n    if (iStack136 == 0) {\n        iStack136 = 0x1400373c1;\n        iStack128 = 1;\n    }\n    else {\n        iStack128 = fcn.140013590(iStack136);\n        iStack128 = iStack128 + 1;\n    }\n    iStack152 = *in_stack_00000050;\n    uStack124 = 0;\n    if (iStack152 == 0) {\n        iStack152 = 0x1400373c1;\n        iStack144 = 1;\n    }\n    else {\n        iStack144 = fcn.140013590(iStack152);\n        iStack144 = iStack144 + 1;\n    }\n    iStack200 = *in_stack_00000038;\n    uStack140 = 0;\n    uStack160 = 4;\n    uStack176 = 8;\n    if (iStack200 == 0) {\n        iStack200 = 0x1400373c4;\n        iStack192 = 2;\n    }\n    else {\n        iVar1 = fcn.140013788(iStack200, arg2, in_R8, in_R9);\n        iStack192 = iVar1 * 2 + 2;\n    }\n    iStack216 = *in_stack_00000030;\n    uStack188 = 0;\n    if (iStack216 == 0) {\n        iStack216 = 0x1400373c4;\n    }\n    else {\n        iVar1 = fcn.140013788(iStack216, arg2, in_R8, in_R9);\n        iStack208 = iVar1 * 2 + 2;\n    }\n    uStack204 = 0;\n    iStack232 = *piStack280;\n    if (iStack232 == 0) {\n        iStack232 = 0x1400373c1;\n        iStack224 = 1;\n    }\n    else {\n        iStack224 = fcn.140013590(iStack232);\n        iStack224 = iStack224 + 1;\n    }\n    puStack288 = auStack264;\n    uStack296 = 0xd;\n    uStack220 = 0;\n    fcn.140001000(0x14003e240, uStack272, 0, 0);\n    fcn.140018790(uStack56 ^ auStack328);\n    return;\n}\n",
        "token_count": 1162
    },
    "14000168": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.140001688(ulong noname_0, ulong arg2)\n\n{\n    int32_t iVar1;\n    ulong noname_1;\n    ulong in_R8;\n    ulong in_R9;\n    int64_t *in_stack_00000028;\n    int64_t *in_stack_00000040;\n    int64_t *in_stack_00000048;\n    int64_t *in_stack_00000058;\n    int64_t *in_stack_00000060;\n    int64_t *in_stack_00000068;\n    uchar auStack344 [32];\n    uint uStack312;\n    uchar *puStack304;\n    ulong uStack296;\n    uchar auStack280 [32];\n    int64_t iStack248;\n    int32_t iStack240;\n    uint uStack236;\n    uint uStack224;\n    uint uStack220;\n    uint uStack208;\n    uint uStack204;\n    int64_t iStack200;\n    int32_t iStack192;\n    uint uStack188;\n    int64_t iStack184;\n    int32_t iStack176;\n    uint uStack172;\n    uint uStack160;\n    uint uStack156;\n    int64_t iStack152;\n    int32_t iStack144;\n    uint uStack140;\n    int64_t iStack136;\n    int32_t iStack128;\n    uint uStack124;\n    int64_t iStack120;\n    int32_t iStack112;\n    uint uStack108;\n    uint uStack96;\n    uint uStack92;\n    uint uStack80;\n    uint uStack76;\n    uint uStack64;\n    uint uStack60;\n    uint64_t uStack56;\n    \n    uStack56 = *0x14003ef38 ^ auStack344;\n    uStack60 = 0;\n    uStack76 = 0;\n    uStack92 = 0;\n    iStack120 = *in_stack_00000068;\n    noname_1 = 8;\n    uStack64 = 8;\n    uStack80 = 8;\n    uStack96 = 4;\n    uStack296 = arg2;\n    if (iStack120 == 0) {\n        iStack120 = 0x1400373c1;\n        iStack112 = 1;\n    }\n    else {\n        iStack112 = fcn.140013590(iStack120);\n        iStack112 = iStack112 + 1;\n    }\n    uStack108 = 0;\n    iStack136 = *in_stack_00000060;\n    iStack240 = 1;\n    if (iStack136 == 0) {\n        iStack136 = 0x1400373c1;\n        iStack128 = iStack240;\n    }\n    else {\n        iVar1 = fcn.140013590(iStack136);\n        iStack128 = iVar1 + 1;\n    }\n    uStack124 = 0;\n    iStack152 = *in_stack_00000058;\n    if (iStack152 == 0) {\n        iStack152 = 0x1400373c1;\n        iStack144 = iStack240;\n    }\n    else {\n        iVar1 = fcn.140013590(iStack152);\n        iStack144 = iVar1 + 1;\n    }\n    uStack140 = 0;\n    iStack192 = 2;\n    uStack156 = 0;\n    iStack184 = *in_stack_00000048;\n    uStack160 = 1;\n    if (iStack184 == 0) {\n        iStack184 = 0x1400373c4;\n        iStack176 = 2;\n    }\n    else {\n        iVar1 = fcn.140013788(iStack184, noname_1, in_R8, in_R9);\n        iStack176 = iVar1 * 2 + 2;\n    }\n    uStack172 = 0;\n    iStack200 = *in_stack_00000040;\n    if (iStack200 == 0) {\n        iStack200 = 0x1400373c4;\n    }\n    else {\n        iVar1 = fcn.140013788(iStack200, noname_1, in_R8, in_R9);\n        iStack192 = iVar1 * 2 + 2;\n    }\n    uStack188 = 0;\n    uStack204 = 0;\n    uStack220 = 0;\n    iStack248 = *in_stack_00000028;\n    uStack208 = 4;\n    uStack224 = 1;\n    if (iStack248 == 0) {\n        iStack248 = 0x1400373c1;\n    }\n    else {\n        iStack240 = fcn.140013590(iStack248);\n        iStack240 = iStack240 + 1;\n    }\n    uStack236 = 0;\n    puStack304 = auStack280;\n    uStack312 = 0xe;\n    fcn.140001000(0x14003e240, uStack296, 0, 0);\n    fcn.140018790(uStack56 ^ auStack344);\n    return;\n}\n",
        "token_count": 1112
    },
    "1400018c": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.1400018c8(ulong noname_0, ulong arg2)\n\n{\n    int32_t iVar1;\n    ulong noname_1;\n    ulong in_R8;\n    ulong in_R9;\n    int64_t *in_stack_00000028;\n    int64_t *in_stack_00000040;\n    int64_t *in_stack_00000048;\n    int64_t *in_stack_00000058;\n    int64_t *in_stack_00000060;\n    int64_t *in_stack_00000068;\n    int64_t *in_stack_00000070;\n    uchar auStack376 [32];\n    uint uStack344;\n    uchar *puStack336;\n    int64_t *piStack328;\n    ulong uStack320;\n    uchar auStack312 [32];\n    int64_t iStack280;\n    int32_t iStack272;\n    uint uStack268;\n    uint uStack256;\n    uint uStack252;\n    uint uStack240;\n    uint uStack236;\n    int64_t iStack232;\n    int32_t iStack224;\n    uint uStack220;\n    int64_t iStack216;\n    int32_t iStack208;\n    uint uStack204;\n    uint uStack192;\n    uint uStack188;\n    int64_t iStack184;\n    int32_t iStack176;\n    uint uStack172;\n    int64_t iStack168;\n    int32_t iStack160;\n    uint uStack156;\n    int64_t iStack152;\n    int32_t iStack144;\n    uint uStack140;\n    int64_t iStack136;\n    int32_t iStack128;\n    uint uStack124;\n    uint uStack112;\n    uint uStack108;\n    uint uStack96;\n    uint uStack92;\n    uint uStack80;\n    uint uStack76;\n    uint uStack64;\n    uint uStack60;\n    uint64_t uStack56;\n    \n    uStack56 = *0x14003ef38 ^ auStack376;\n    uStack60 = 0;\n    uStack76 = 0;\n    uStack92 = 0;\n    uStack108 = 0;\n    iStack136 = *in_stack_00000070;\n    piStack328 = in_stack_00000028;\n    uStack64 = 8;\n    uStack80 = 8;\n    noname_1 = 4;\n    uStack96 = 4;\n    uStack112 = 4;\n    uStack320 = arg2;\n    if (iStack136 == 0) {\n        iStack136 = 0x1400373c1;\n        iStack128 = 1;\n    }\n    else {\n        iStack128 = fcn.140013590(iStack136);\n        iStack128 = iStack128 + 1;\n    }\n    uStack124 = 0;\n    iStack152 = *in_stack_00000068;\n    iStack272 = 1;\n    if (iStack152 == 0) {\n        iStack152 = 0x1400373c1;\n        iStack144 = iStack272;\n    }\n    else {\n        iVar1 = fcn.140013590(iStack152);\n        iStack144 = iVar1 + 1;\n    }\n    uStack140 = 0;\n    iStack168 = *in_stack_00000060;\n    if (iStack168 == 0) {\n        iStack168 = 0x1400373c1;\n        iStack160 = iStack272;\n    }\n    else {\n        iVar1 = fcn.140013590(iStack168);\n        iStack160 = iVar1 + 1;\n    }\n    uStack156 = 0;\n    iStack184 = *in_stack_00000058;\n    if (iStack184 == 0) {\n        iStack184 = 0x1400373c1;\n        iStack176 = iStack272;\n    }\n    else {\n        iVar1 = fcn.140013590(iStack184);\n        iStack176 = iVar1 + 1;\n    }\n    uStack172 = 0;\n    iStack224 = 2;\n    uStack188 = 0;\n    iStack216 = *in_stack_00000048;\n    uStack192 = 1;\n    if (iStack216 == 0) {\n        iStack216 = 0x1400373c4;\n        iStack208 = 2;\n    }\n    else {\n        iVar1 = fcn.140013788(iStack216, noname_1, in_R8, in_R9);\n        iStack208 = iVar1 * 2 + 2;\n    }\n    uStack204 = 0;\n    iStack232 = *in_stack_00000040;\n    if (iStack232 == 0) {\n        iStack232 = 0x1400373c4;\n    }\n    else {\n        iVar1 = fcn.140013788(iStack232, noname_1, in_R8, in_R9);\n        iStack224 = iVar1 * 2 + 2;\n    }\n    uStack220 = 0;\n    uStack236 = 0;\n    uStack252 = 0;\n    iStack280 = *piStack328;\n    uStack240 = 4;\n    uStack256 = 1;\n    if (iStack280 == 0) {\n        iStack280 = 0x1400373c1;\n    }\n    else {\n        iStack272 = fcn.140013590(iStack280);\n        iStack272 = iStack272 + 1;\n    }\n    uStack268 = 0;\n    puStack336 = auStack312;\n    uStack344 = 0x10;\n    fcn.140001000(0x14003e240, uStack320, 0, 0);\n    fcn.140018790(uStack56 ^ auStack376);\n    return;\n}\n",
        "token_count": 1282
    },
    "14000384": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_2ch\n\nvoid fcn.140003840(ulong arg1, ulong noname_1, int64_t arg3)\n\n{\n    int32_t *piVar1;\n    int64_t iVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uchar *puVar5;\n    uint8_t *noname_2;\n    ulong arg4;\n    ulong var_bp_20h;\n    ulong var_2ch;\n    ulong var_bp_40h;\n    ulong var_bp_50h;\n    ulong var_bp_60h;\n    ulong var_6ch;\n    ulong var_7ch;\n    ulong var_90h;\n    ulong var_9ch;\n    ulong var_b0h;\n    uchar auStack488 [32];\n    uint32_t uStack456;\n    uchar *puStack448;\n    int64_t iStack440;\n    uint8_t uStack424;\n    uchar uStack423;\n    uchar auStack422 [2];\n    uint32_t uStack420;\n    uint auStack416 [2];\n    uchar auStack408 [16];\n    uchar auStack392 [16];\n    uchar auStack376 [144];\n    uchar auStack232 [32];\n    uchar *puStack200;\n    uint uStack192;\n    uint uStack188;\n    int64_t iStack184;\n    int32_t iStack176;\n    uint uStack172;\n    ulong uStack168;\n    int32_t iStack160;\n    uint uStack156;\n    int64_t iStack152;\n    int32_t iStack144;\n    uint uStack140;\n    uint *puStack136;\n    uint uStack128;\n    uint uStack124;\n    uchar *puStack120;\n    uint uStack112;\n    uint uStack108;\n    int64_t iStack104;\n    int32_t iStack96;\n    uint uStack92;\n    uint32_t *puStack88;\n    uint uStack80;\n    uint uStack76;\n    int64_t iStack72;\n    int32_t iStack64;\n    uint uStack60;\n    uint64_t uStack56;\n    \n    uStack56 = *0x14003ef38 ^ auStack488;\n    uStack456 = 0xd;\n    arg4 = 1;\n    noname_2 = &uStack424;\n    puVar5 = auStack392;\n    auStack392 = ZEXT816(0);\n    uStack424 = noname_1;\n    uVar3 = (*_sym.imp.ntdll.dll_NtSetInformationFile)();\n    if (uVar3 < 0) {\n        if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n            puStack448 = puStack448 & 0xffffffff00000000 | uVar3;\n            uStack456 = noname_1;\n            iStack440 = arg3;\n            fcn.14000378c(*(*0x14003e208 + 0x10), puVar5, noname_2, arg1);\n            arg4 = arg1;\n        }\n        auStack408 = ZEXT816(0);\n        if (*0x140040768 != 0) {\n            iVar4 = *(*0x140040768 + 8);\n            while (iVar4 != 0) {\n                LOCK();\n                piVar1 = *0x140040768 + 8;\n                if (iVar4 == *piVar1) {\n                    *piVar1 = iVar4 + 1;\n                    iVar2 = *0x140040760;\n                    auStack408 = CONCAT88(*0x140040768, *0x140040760);\n                    if ((((*0x140040760 != 0) && (5 < *0x14003e240)) && ((*0x14003e250 & 0x200000000000) != 0)) &&\n                       ((*0x14003e258 & 0x200000000000) == *0x14003e258)) {\n                        puVar5 = auStack376;\n                        uStack420 = uVar3;\n                        iStack104 = fcn.1400055bc(*0x140040760, puVar5);\n                        uStack423 = *(iVar2 + 0x1c);\n                        auStack416[0] = fcn.1400056dc();\n                        iStack152 = iVar2 + 0x24;\n                        iStack184 = *(iVar2 + 0x10);\n                        auStack422[0] = fcn.140008428();\n                        if (arg3 == 0) {\n                            arg3 = 0x1400373c4;\n                            iStack64 = 2;\n                        }\n                        else {\n                            iVar4 = fcn.140013788(arg3, puVar5, noname_2, arg4);\n                            iStack64 = iVar4 * 2 + 2;\n                        }\n                        uStack60 = 0;\n                        puStack88 = &uStack420;\n                        uStack76 = 0;\n                        uStack80 = 4;\n                        iStack72 = arg3;\n                        if (iStack104 == 0) {\n                            iStack104 = 0x1400373c1;\n                            iStack96 = 1;\n                        }\n                        else {\n                            iStack96 = fcn.140013590(iStack104);\n                            iStack96 = iStack96 + 1;\n                        }\n                        uStack92 = 0;\n                        uStack108 = 0;\n                        uStack124 = 0;\n                        puStack120 = &uStack423;\n                        puStack136 = auStack416;\n                        uStack112 = 1;\n                        uStack128 = 4;\n                        if (iStack152 == 0) {\n                            iStack152 = 0x1400373c1;\n                            iStack144 = 1;\n                        }\n                        else {\n                            iStack144 = fcn.140013590(iStack152);\n                            iStack144 = iStack144 + 1;\n                        }\n                        uStack140 = 0;\n                        iStack160 = fcn.140013590(0x140037580);\n                        uStack156 = 0;\n                        iStack160 = iStack160 + 1;\n                        uStack168 = 0x140037580;\n                        if (iStack184 == 0) {\n                            iStack184 = 0x1400373c1;\n                            iStack176 = 1;\n                        }\n                        else {\n                            iStack176 = fcn.140013590(iStack184);\n                            iStack176 = iStack176 + 1;\n                        }\n                        uStack172 = 0;\n                        uStack188 = 0;\n                        puStack200 = auStack422;\n                        uStack192 = 1;\n                        uStack456 = 0xb;\n                        puStack448 = auStack232;\n                        fcn.140001000(0x14003e240, 0x14003951f, 0, 0);\n                    }\n                    break;\n                }\n                iVar4 = *piVar1;\n            }\n        }\n        fcn.1400030c4(auStack408);\n    }\n    fcn.140018790(uStack56 ^ auStack488);\n    return;\n}\n",
        "token_count": 1574
    },
    "1400056e": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.1400056ec(int64_t *arg1, int64_t arg2)\n\n{\n    code *pcVar1;\n    uchar uVar2;\n    int32_t iVar3;\n    int64_t iVar4;\n    uint64_t uVar5;\n    uchar auStack696 [32];\n    uint32_t uStack664;\n    uint32_t uStack656;\n    uint32_t uStack648;\n    int64_t iStack632;\n    uchar auStack624 [12];\n    uint uStack612;\n    uchar auStack608 [16];\n    uchar auStack592 [16];\n    uint uStack576;\n    uchar auStack568 [16];\n    uchar auStack552 [16];\n    ulong uStack536;\n    ulong uStack528;\n    uchar auStack520 [24];\n    uchar auStack496 [24];\n    uchar auStack472 [16];\n    uchar auStack456 [144];\n    uchar auStack312 [272];\n    uint64_t uStack40;\n    \n    uStack40 = *0x14003ef38 ^ auStack696;\n    auStack472 = CONCAT88(auStack472._0_8_, 0x81);\n    iVar3 = fcn.14000c904(arg1, auStack472, auStack312);\n    if (iVar3 < 0) {\n        iVar4 = fcn.1400187f8(0x90);\n        auStack472 = ZEXT816(0);\n        *(iVar4 + 0x82) = 0x41;\n        (*_sym.imp.RPCRT4.dll_UuidCreate)(auStack472);\n        *(iVar4 + 0x81) = 0x11;\n        *(iVar4 + 0x88) = 0x1300000000;\n        fcn.14001a0c0(iVar4, 0, 0x81);\n        fcn.1400063bc(auStack472, 0xc, iVar4);\n        *(iVar4 + 0x10) = 0x2e;\n    }\n    else {\n        if (0x80 < auStack472._0_8_ - 1) {\n            fcn.1400054f0(auStack496, \"UpdateTelemetryCV\");\n            fcn.14001acb8(auStack496, 0x14003c9b0);\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        uVar5 = 0;\n        if (auStack472._0_8_ != 0) {\n            do {\n                auStack456[uVar5] = auStack312[uVar5 * 2];\n                uVar5 = uVar5 + 1;\n            } while (uVar5 < auStack472._0_8_);\n        }\n        if (0x80 < auStack472._0_8_ - 1) {\n            fcn.140018ff4();\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        auStack472[auStack472._0_8_ + 0xf] = 0;\n        iVar4 = fcn.140004fcc(auStack456);\n        if (iVar4 == 0) {\n            fcn.1400054f0(auStack520, auStack456);\n            fcn.14001acb8(auStack520, 0x14003c9b0);\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n    }\n    *arg1 = iVar4;\n    *(arg1 + 3) = 0;\n    arg1[1] = 0x1400373c1;\n    arg1[2] = arg2;\n    uVar2 = fcn.14000ae1c();\n    *(arg1 + 4) = 0;\n    *(arg1 + 0x1c) = uVar2;\n    uVar5 = 0;\n    auStack472 = auStack472 & 0xffffffffffffffff;\n    *(arg1 + 0x24) = ZEXT816(0);\n    *(arg1 + 0x34) = 0;\n    iVar3 = fcn.14000c6a8(auStack472);\n    if (-1 < iVar3) {\n        iStack632 = 0;\n        iVar3 = fcn.14000c554(&iStack632, auStack472._0_8_);\n        iVar4 = iStack632;\n        if (-1 < iVar3) {\n            auStack472 = auStack472 & 0xffffffffffffffff;\n            iVar3 = fcn.14000e128(auStack472, iStack632);\n            if (-1 < iVar3) {\n                uStack576 = 0;\n                _auStack624 = ZEXT816(0);\n                auStack608 = ZEXT816(0);\n                auStack592 = ZEXT816(0);\n                iVar3 = fcn.14000e25c(auStack624, auStack472._0_8_);\n                if (-1 < iVar3) {\n                    uVar5 = CONCAT44(auStack624._8_4_, uStack612);\n                }\n            }\n            if (auStack472._0_8_ != 0) {\n                fcn.1400187b4(auStack472._0_8_);\n            }\n        }\n        if (iVar4 != 0) {\n            fcn.1400187b4(iVar4);\n        }\n    }\n    uStack648 = uVar5 & 0xffff;\n    uStack656 = uVar5 >> 0x10 & 0xffff;\n    uStack664 = uVar5 >> 0x20 & 0xffff;\n    fcn.140004f30(arg1 + 0x24, 0x18, \"%u.%u.%u.%u\", uVar5 >> 0x30);\n    uStack536 = 0;\n    *0x14004078c = 0;\n    uStack528 = 0;\n    auStack568 = ZEXT816(0);\n    *0x140040730 = 0x140040780;\n    auStack552 = ZEXT816(0);\n    (*_sym.imp.KERNEL32.dll_InitializeCriticalSectionAndSpinCount)(0x140040780, 0);\n    fcn.14000aef4();\n    iVar4 = *0x140040730;\n    if (*0x140040730 != 0) {\n        (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(*0x140040730);\n        if (*0x140040728 != 0) {\n            fcn.14000ad6c(*0x140040728);\n            *0x140040728 = 0;\n            fcn.14000af3c();\n            fcn.14000aef4();\n        }\n        *0x140040728 = fcn.14000ab14(0x1400407b0, auStack568);\n        (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(iVar4);\n    }\n    fcn.140005484(auStack568);\n    fcn.140018790(uStack40 ^ auStack696);\n    return;\n}\n",
        "token_count": 1567
    },
    "14000884": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.140008848(ulong *arg1)\n\n{\n    int32_t *piVar1;\n    int64_t iVar2;\n    int32_t iVar3;\n    uchar *arg2;\n    ulong in_R9;\n    uchar auStack456 [32];\n    uint uStack424;\n    uchar *puStack416;\n    uchar uStack408;\n    uchar auStack407 [3];\n    uint uStack404;\n    uint auStack400 [2];\n    uchar auStack392 [16];\n    uchar auStack376 [144];\n    uchar auStack232 [32];\n    uchar *puStack200;\n    uint uStack192;\n    uint uStack188;\n    int64_t iStack184;\n    int32_t iStack176;\n    uint uStack172;\n    ulong uStack168;\n    int32_t iStack160;\n    uint uStack156;\n    int64_t iStack152;\n    int32_t iStack144;\n    uint uStack140;\n    uint *puStack136;\n    uint uStack128;\n    uint uStack124;\n    uchar *puStack120;\n    uint uStack112;\n    uint uStack108;\n    int64_t iStack104;\n    int32_t iStack96;\n    uint uStack92;\n    uint *puStack88;\n    uint uStack80;\n    uint uStack76;\n    int64_t iStack72;\n    int32_t iStack64;\n    uint uStack60;\n    int64_t iStack56;\n    int32_t iStack48;\n    uint uStack44;\n    uint64_t uStack40;\n    \n    uStack40 = *0x14003ef38 ^ auStack456;\n    auStack392 = ZEXT816(0);\n    if (*0x140040768 != 0) {\n        iVar3 = *(*0x140040768 + 8);\n        while (iVar3 != 0) {\n            LOCK();\n            piVar1 = *0x140040768 + 8;\n            if (iVar3 == *piVar1) {\n                *piVar1 = iVar3 + 1;\n                iVar2 = *0x140040760;\n                auStack392 = CONCAT88(*0x140040768, *0x140040760);\n                if ((((*0x140040760 != 0) && (5 < *0x14003e240)) && ((*0x14003e250 & 0x200000000000) != 0)) &&\n                   ((*0x14003e258 & 0x200000000000) == *0x14003e258)) {\n                    arg2 = auStack376;\n                    iStack56 = *arg1[2];\n                    iStack72 = *arg1[1];\n                    uStack404 = **arg1;\n                    iStack104 = fcn.1400055bc(*0x140040760, arg2);\n                    uStack408 = *(iVar2 + 0x1c);\n                    auStack400[0] = fcn.1400056dc();\n                    iStack152 = iVar2 + 0x24;\n                    iStack184 = *(iVar2 + 0x10);\n                    auStack407[0] = fcn.140008428();\n                    iStack64 = 2;\n                    if (iStack56 == 0) {\n                        iStack56 = 0x1400373c4;\n                        iStack48 = 2;\n                    }\n                    else {\n                        iVar3 = fcn.140013788(iStack56, arg2, arg1, in_R9);\n                        iStack48 = iVar3 * 2 + 2;\n                    }\n                    uStack44 = 0;\n                    if (iStack72 == 0) {\n                        iStack72 = 0x1400373c4;\n                    }\n                    else {\n                        iVar3 = fcn.140013788(iStack72, arg2, arg1, in_R9);\n                        iStack64 = iVar3 * 2 + 2;\n                    }\n                    uStack60 = 0;\n                    puStack88 = &uStack404;\n                    uStack76 = 0;\n                    uStack80 = 4;\n                    if (iStack104 == 0) {\n                        iStack104 = 0x1400373c1;\n                        iStack96 = 1;\n                    }\n                    else {\n                        iStack96 = fcn.140013590(iStack104);\n                        iStack96 = iStack96 + 1;\n                    }\n                    iStack176 = 1;\n                    uStack92 = 0;\n                    uStack108 = 0;\n                    uStack124 = 0;\n                    puStack120 = &uStack408;\n                    puStack136 = auStack400;\n                    uStack112 = 1;\n                    uStack128 = 4;\n                    if (iStack152 == 0) {\n                        iStack152 = 0x1400373c1;\n                        iStack144 = iStack176;\n                    }\n                    else {\n                        iVar3 = fcn.140013590(iStack152);\n                        iStack144 = iVar3 + 1;\n                    }\n                    uStack140 = 0;\n                    iStack160 = fcn.140013590(0x140037580);\n                    uStack156 = 0;\n                    iStack160 = iStack160 + 1;\n                    uStack168 = 0x140037580;\n                    if (iStack184 == 0) {\n                        iStack184 = 0x1400373c1;\n                    }\n                    else {\n                        iStack176 = fcn.140013590(iStack184);\n                        iStack176 = iStack176 + 1;\n                    }\n                    uStack172 = 0;\n                    uStack188 = 0;\n                    puStack200 = auStack407;\n                    puStack416 = auStack232;\n                    uStack192 = 1;\n                    uStack424 = 0xc;\n                    fcn.140001000(0x14003e240, 0x140039d35, 0, 0);\n                }\n                break;\n            }\n            iVar3 = *piVar1;\n        }\n    }\n    fcn.1400030c4(auStack392);\n    fcn.140018790(uStack40 ^ auStack456);\n    return;\n}\n",
        "token_count": 1333
    },
    "14000938": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.140009388(ulong *arg1)\n\n{\n    ulong *puVar1;\n    int64_t **arg1_00;\n    \n    if (*(arg1 + 10) != '\\0') {\n        for (puVar1 = arg1[8]; puVar1 != NULL; puVar1 = *puVar1) {\n            arg1_00 = puVar1 + 1;\n            if (puVar1[5] == -1) {\n                if (7 < puVar1[4]) {\n                    arg1_00 = *arg1_00;\n                }\n                fcn.140004438(arg1_00);\n            }\n            else {\n                (*_sym.imp.KERNEL32.dll_CloseHandle)();\n                puVar1[5] = 0xffffffffffffffff;\n                if (7 < puVar1[4]) {\n                    arg1_00 = *arg1_00;\n                }\n                fcn.1400045bc(arg1_00);\n            }\n        }\n    }\n    fcn.14000a870(arg1 + 8);\n    if (7 < arg1[7]) {\n        fcn.140003174(arg1[4], arg1[7] * 2 + 2);\n    }\n    arg1[6] = 0;\n    arg1[7] = 7;\n    *(arg1 + 4) = 0;\n    if (7 < arg1[3]) {\n        fcn.140003174(*arg1, arg1[3] * 2 + 2);\n    }\n    arg1[2] = 0;\n    arg1[3] = 7;\n    *arg1 = 0;\n    return;\n}\n",
        "token_count": 366
    },
    "14000981": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_9h\n// WARNING: Variable defined which should be unmapped: var_11h\n// WARNING: Variable defined which should be unmapped: var_19h\n// WARNING: Variable defined which should be unmapped: var_29h\n// WARNING: Variable defined which should be unmapped: var_31h\n\nvoid fcn.140009818(int64_t **arg1, int64_t **arg2)\n\n{\n    int64_t iVar1;\n    code *pcVar2;\n    char cVar3;\n    uint32_t uVar4;\n    int64_t *piVar5;\n    int64_t **ppiVar6;\n    int64_t *arg1_00;\n    int16_t *piVar7;\n    int64_t **arg1_01;\n    uint64_t uVar8;\n    int64_t **ppiVar9;\n    int64_t **ppiVar10;\n    int64_t **ppiVar11;\n    uint64_t uVar12;\n    int64_t *piVar13;\n    uint64_t uVar14;\n    int64_t *piVar15;\n    uint64_t uVar16;\n    int64_t iVar17;\n    uint64_t uVar18;\n    int16_t *arg2_00;\n    ulong var_fh;\n    ulong var_17h;\n    uchar auStack248 [32];\n    int64_t **ppiStack216;\n    int64_t **ppiStack208;\n    int16_t *piStack200;\n    int64_t **ppiStack192;\n    int64_t **ppiStack184;\n    int64_t **ppiStack176;\n    int64_t **ppiStack168;\n    int64_t **ppiStack160;\n    uchar uStack152;\n    uchar *puStack144;\n    uchar auStack136 [7];\n    ulong var_79h;\n    int64_t **var_71h;\n    int64_t **var_69h;\n    int16_t *var_61h;\n    ulong var_59h;\n    uint64_t var_51h;\n    uint64_t var_49h;\n    uint64_t var_41h;\n    ulong var_39h;\n    ulong var_31h;\n    ulong var_29h;\n    ulong var_19h;\n    ulong var_11h;\n    ulong var_9h;\n    \n    stack0xffffffffffffffb8 = *0x14003ef38 ^ auStack248;\n    ppiVar10 = NULL;\n    cVar3 = *arg2;\n    ppiVar9 = arg2;\n    ppiStack184 = arg1;\n    ppiStack176 = arg2;\n    if (cVar3 != '\\0') {\n        do {\n            if ((cVar3 == '\\\\') || (cVar3 == '/')) {\n                ppiVar10 = ppiVar9;\n            }\n            ppiVar9 = ppiVar9 + 1;\n            cVar3 = *ppiVar9;\n        } while (cVar3 != '\\0');\n        ppiStack192 = ppiVar10;\n        if (ppiVar10 != NULL) {\n            stack0xffffffffffffff88 = NULL;\n            stack0xffffffffffffff90 = NULL;\n            ppiVar6 = arg1[2];\n            if (0x7 < arg1[3]) {\n                arg1 = *arg1;\n            }\n            iVar17 = 0x7ffffffffffffffe;\n            if (ppiVar6 < 0x8) {\n                _auStack136 = *arg1;\n                var_79h._1_4_ = *(arg1 + 1);\n                stack0xffffffffffffff84 = *(arg1 + 0xc);\n                stack0xffffffffffffff90 = 0x7;\n            }\n            else {\n                ppiVar11 = ppiVar6 | 7;\n                if (0x7ffffffffffffffe < ppiVar11) {\n                    ppiVar11 = 0x7ffffffffffffffe;\n                }\n                arg1_01 = ppiVar11 + 1;\n                if (0x7fffffffffffffff < arg1_01) {\ncode_r0x000140009fc4:\n                    fcn.140004888();\ncode_r0x000140009fca:\n                    if ((arg1_01 != ppiVar9) && ((*(arg1_01 + 0x1c) & 1) != 0)) {\n                        fcn.140008580(arg1_01[2], ppiVar9, iVar17, ppiStack176);\n                    }\n                    uVar4 = fcn.14000bf14(0x8007000d);\ncode_r0x000140009fed:\n                    fcn.14000bf14(uVar4);\ncode_r0x000140009ff5:\n                    fcn.140004888();\n                    pcVar2 = swi(3);\n                    (*pcVar2)();\n                    return;\n                }\n                _auStack136 = fcn.140004e84(arg1_01 * 2);\n                fcn.14001a740(_auStack136, arg1, ppiVar6 * 2 + 2);\n                stack0xffffffffffffff90 = ppiVar11;\n            }\n            uVar12 = 0;\n            stack0xffffffffffffff88 = ppiVar6;\n            stack0xffffffffffffffa8 = 0;\n            uVar14 = 7;\n            stack0xffffffffffffffb0 = 7;\n            stack0xffffffffffffff98 = stack0xffffffffffffff98 & 0xffffffffffff0000;\n            arg1_01 = *0x14003e208;\n            arg2_00 = stack0xffffffffffffff98;\n            ppiStack208 = arg2;\n            if (arg2 <= ppiVar10) {\n                do {\n                    ppiVar6 = stack0xffffffffffffff90;\n                    ppiVar10 = stack0xffffffffffffff88;\n                    iVar17 = 0x7ffffffffffffffe;\n                    ppiVar9 = 0x14003e208;\n                    cVar3 = *ppiStack208;\n                    if ((cVar3 == '\\\\') || (cVar3 == '/')) {\n                        if (uVar12 != 0) {\n                            if (uVar12 < 3) {\n                                if (uVar12 == 1) {\n                                    piVar7 = &var_61h + 1;\n                                    if (7 < uVar14) {\n                                        piVar7 = arg2_00;\n                                    }\n                                    if (*piVar7 == 0x2e) {\n                                        piVar7 = &var_61h + 1;\n                                        if (7 < uVar14) {\n                                            piVar7 = arg2_00;\n                                        }\n                                        stack0xffffffffffffffa8 = 0;\n                                        *piVar7 = 0;\n                                        arg1_01 = *0x14003e208;\n                                        uVar14 = stack0xffffffffffffffb0;\n                                        uVar12 = stack0xffffffffffffffa8;\n                                        arg2_00 = stack0xffffffffffffff98;\n                                        if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 0x10) != 0)) {\n                                            fcn.1400084d4((*0x14003e208)[2], 0x1f, 0x140037758);\n                                            arg1_01 = *0x14003e208;\n                                            uVar14 = stack0xffffffffffffffb0;\n                                            uVar12 = stack0xffffffffffffffa8;\n                                            arg2_00 = stack0xffffffffffffff98;\n                                        }\n                                        goto code_r0x000140009f35;\n                                    }\n                                }\n                                else if (uVar12 == 2) {\n                                    piVar7 = &var_61h + 1;\n                                    if (7 < uVar14) {\n                                        piVar7 = arg2_00;\n                                    }\n                                    if (*piVar7 == 0x2e) {\n                                        piVar7 = &var_61h + 1;\n                                        if (7 < uVar14) {\n                                            piVar7 = arg2_00;\n                                        }\n                                        if (piVar7[1] == 0x2e) goto code_r0x000140009fca;\n                                    }\n                                }\n                            }\n                            if (stack0xffffffffffffff88 < stack0xffffffffffffff90) {\n                                piVar5 = auStack136;\n                                if (0x7 < stack0xffffffffffffff90) {\n                                    piVar5 = _auStack136;\n                                }\n                                iVar1 = stack0xffffffffffffff88 * 2;\n                                unique0x10000b59 = stack0xffffffffffffff88 + 1;\n                                *(piVar5 + iVar1) = 0x5c;\ncode_r0x000140009b06:\n                                ppiVar10 = stack0xffffffffffffff90;\n                                piStack200 = &var_61h + 1;\n                                if (7 < uVar14) {\n                                    piStack200 = arg2_00;\n                                }\n                                ppiStack216 = stack0xffffffffffffff88;\n                                if (stack0xffffffffffffff90 - stack0xffffffffffffff88 < uVar12) {\n                                    arg1_01 = stack0xffffffffffffff88;\n                                    ppiVar9 = 0x7ffffffffffffffe;\n                                    if (0x7ffffffffffffffeU - stack0xffffffffffffff88 < uVar12)\n                                    goto code_r0x000140009fbe;\n                                    ppiVar9 = uVar12 + stack0xffffffffffffff88;\n                                    ppiVar6 = ppiVar9 | 7;\n                                    if ((ppiVar6 < 0x7fffffffffffffff) &&\n                                       (stack0xffffffffffffff90 <= 0x7ffffffffffffffe - (stack0xffffffffffffff90 >> 1)))\n                                    {\n                                        ppiVar11 = (stack0xffffffffffffff90 >> 1) + stack0xffffffffffffff90;\n                                        if (ppiVar6 < ppiVar11) {\n                                            ppiVar6 = ppiVar11;\n                                        }\n                                        uVar16 = ppiVar6 + 1;\n                                        if (0x7fffffffffffffff < uVar16) goto code_r0x00014000a009;\n                                    }\n                                    else {\n                                        ppiVar6 = 0x7ffffffffffffffe;\n                                        uVar16 = 0x7fffffffffffffff;\n                                    }\n                                    piVar13 = fcn.140004e84(uVar16 * 2);\n                                    piVar5 = _auStack136;\n                                    iVar17 = ppiStack216 * 2;\n                                    ppiVar11 = iVar17 + piVar13;\n                                    ppiStack216 = ppiVar11;\n                                    unique0x10000bd1 = ppiVar9;\n                                    unique0x10000bd9 = ppiVar6;\n                                    if (ppiVar10 < 0x8) {\n                                        fcn.14001a740(piVar13, auStack136, iVar17);\n                                        fcn.14001a740(ppiVar11, piStack200, uVar12 * 2);\n                                        *(piVar13 + ppiVar9 * 2) = 0;\n                                        _auStack136 = piVar13;\n                                    }\n                                    else {\n                                        fcn.14001a740(piVar13, _auStack136, iVar17);\n                                        fcn.14001a740(ppiStack216, piStack200, uVar12 * 2);\n                                        *(piVar13 + ppiVar9 * 2) = 0;\n                                        fcn.140003174(piVar5, ppiVar10 * 2 + 2);\n                                        _auStack136 = piVar13;\n                                    }\n                                }\n                                else {\n                                    ppiVar9 = stack0xffffffffffffff88 + uVar12;\n                                    piVar5 = auStack136;\n                                    if (0x7 < stack0xffffffffffffff90) {\n                                        piVar5 = _auStack136;\n                                    }\n                                    iVar17 = stack0xffffffffffffff88 * 2;\n                                    unique0x10000b51 = ppiVar9;\n                                    fcn.14001a740(piVar5 + iVar17, piStack200, uVar12 * 2);\n                                    *(piVar5 + ppiVar9 * 2) = 0;\n                                }\n                                ppiVar9 = ppiStack184;\n                                piVar7 = &var_61h + 1;\n                                if (7 < uVar14) {\n                                    piVar7 = arg2_00;\n                                }\n                                stack0xffffffffffffffa8 = 0;\n                                *piVar7 = 0;\n                                piVar5 = auStack136;\n                                if (0x7 < stack0xffffffffffffff90) {\n                                    piVar5 = _auStack136;\n                                }\n                                uVar4 = fcn.14000b8fc(piVar5, ppiStack184[9]);\n                                if (uVar4 < 0) {\ncode_r0x00014000a001:\n                                    fcn.14000bf14(uVar4);\n                                    pcVar2 = swi(3);\n                                    (*pcVar2)();\n                                    return;\n                                }\n                                if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 4) != 0)) {\n                                    piVar5 = auStack136;\n                                    if (0x7 < stack0xffffffffffffff90) {\n                                        piVar5 = _auStack136;\n                                    }\n                                    fcn.140006544((*0x14003e208)[2], 0x21, 0x140037758, piVar5);\n                                }\n                                uStack152 = 0;\n                                puStack144 = auStack136;\n                                ppiVar9 = ppiVar9 + 8;\n                                piVar5 = auStack136;\n                                if (0x7 < stack0xffffffffffffff90) {\n                                    piVar5 = _auStack136;\n                                }\n                                ppiStack160 = NULL;\n                                ppiStack168 = ppiVar9;\n                                ppiVar6 = fcn.140004e84(0x30);\n                                ppiVar10 = ppiVar6 + 1;\n                                ppiVar6[3] = NULL;\n                                ppiVar6[4] = 0x7;\n                                *ppiVar10 = 0;\n                                piVar13 = 0xffffffffffffffff;\n                                do {\n                                    piVar13 = piVar13 + 1;\n                                } while (*(piVar5 + piVar13 * 2) != 0);\n                                ppiStack216 = ppiVar10;\n                                ppiStack160 = ppiVar6;\n                                if (piVar13 < 0x8) {\n                                    ppiVar6[3] = piVar13;\n                                    iVar1 = piVar13 * 2;\n                                    iVar17 = iVar1;\n                                    fcn.14001a740(ppiVar10, piVar5, iVar1);\n                                    *(iVar1 + ppiVar10) = 0;\n                                }\n                                else {\n                                    if (0x7ffffffffffffffe < piVar13) {\n                                        uVar4 = fcn.140004920();\n                                        goto code_r0x00014000a001;\n                                    }\n                                    piVar15 = piVar13 | 7;\n                                    if (piVar15 < 0x7fffffffffffffff) {\n                                        if (piVar15 < 0xa) {\n                                            piVar15 = 0xa;\n                                        }\n                                        uVar14 = piVar15 + 1;\n                                        if (0x7fffffffffffffff < uVar14) goto code_r0x000140009ff5;\n                                    }\n                                    else {\n                                        piVar15 = 0x7ffffffffffffffe;\n                                        uVar14 = 0x7fffffffffffffff;\n                                    }\n                                    arg1_00 = fcn.140004e84(uVar14 * 2);\n                                    ppiVar6[3] = piVar13;\n                                    ppiVar6[4] = piVar15;\n                                    iVar1 = piVar13 * 2;\n                                    iVar17 = iVar1;\n                                    fcn.14001a740(arg1_00, piVar5, iVar1);\n                                    *(iVar1 + arg1_00) = 0;\n                                    *ppiVar10 = arg1_00;\n                                }\n                                ppiVar6[5] = 0xffffffffffffffff;\n                                uVar4 = fcn.14000b82c(piVar5);\n                                if (-1 < uVar4) {\n                                    arg1_01 = *0x14003e208;\n                                    if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 4) != 0)) {\n                                        iVar17 = 0x140037758;\n                                        arg1_01 = (*0x14003e208)[2];\n                                        fcn.140006544(arg1_01, 0xe, 0x140037758, piVar5);\n                                    }\n                                    *ppiVar6 = *ppiVar9;\n                                    ppiStack160 = NULL;\n                                    *ppiVar9 = ppiVar6;\n                                    uStack152 = 1;\n                                    cVar3 = *ppiStack208;\n                                    uVar14 = stack0xffffffffffffffb0;\n                                    uVar12 = stack0xffffffffffffffa8;\n                                    arg2_00 = stack0xffffffffffffff98;\n                                    goto code_r0x000140009e2a;\n                                }\n                                goto code_r0x000140009fed;\n                            }\n                            ppiVar9 = stack0xffffffffffffff90;\n                            if (stack0xffffffffffffff88 != 0x7ffffffffffffffe) {\n                                ppiVar9 = stack0xffffffffffffff88 + 1U | 7;\n                                if ((ppiVar9 < 0x7fffffffffffffff) &&\n                                   (stack0xffffffffffffff90 <= 0x7ffffffffffffffe - (stack0xffffffffffffff90 >> 1))) {\n                                    ppiVar11 = (stack0xffffffffffffff90 >> 1) + stack0xffffffffffffff90;\n                                    if (ppiVar9 < ppiVar11) {\n                                        ppiVar9 = ppiVar11;\n                                    }\n                                    uVar16 = ppiVar9 + 1;\n                                    if (0x7fffffffffffffff < uVar16) goto code_r0x00014000a009;\n                                }\n                                else {\n                                    ppiVar9 = 0x7ffffffffffffffe;\n                                    uVar16 = 0x7fffffffffffffff;\n                                }\n                                piVar13 = fcn.140004e84(uVar16 * 2);\n                                piVar5 = _auStack136;\n                                unique0x00003100 = ppiVar10 + 1;\n                                iVar1 = ppiVar10 * 2;\n                                iVar17 = iVar1;\n                                unique0x10000be1 = ppiVar9;\n                                if (ppiVar6 < 0x8) {\n                                    fcn.14001a740(piVar13, auStack136, iVar1);\n                                    *(iVar1 + piVar13) = 0x5c;\n                                    _auStack136 = piVar13;\n                                }\n                                else {\n                                    fcn.14001a740(piVar13, _auStack136, iVar1);\n                                    *(iVar1 + piVar13) = 0x5c;\n                                    fcn.140003174(piVar5, ppiVar6 * 2 + 2);\n                                    _auStack136 = piVar13;\n                                }\n                                goto code_r0x000140009b06;\n                            }\ncode_r0x000140009fbe:\n                            fcn.140004920();\n                            goto code_r0x000140009fc4;\n                        }\n                    }\n                    else {\ncode_r0x000140009e2a:\n                        if (uVar12 < uVar14) {\n                            stack0xffffffffffffffa8 = uVar12 + 1;\n                            piVar7 = &var_61h + 1;\n                            if (7 < uVar14) {\n                                piVar7 = arg2_00;\n                            }\n                            piVar7[uVar12] = cVar3;\n                            piVar7[uVar12 + 1] = 0;\n                            arg1_01 = *0x14003e208;\n                            uVar14 = stack0xffffffffffffffb0;\n                            uVar12 = stack0xffffffffffffffa8;\n                            arg2_00 = stack0xffffffffffffff98;\n                        }\n                        else {\n                            ppiVar9 = 0x7ffffffffffffffe;\n                            if (uVar12 == 0x7ffffffffffffffe) goto code_r0x000140009fbe;\n                            uVar18 = uVar12 + 1;\n                            uVar16 = uVar18 | 7;\n                            if ((uVar16 < 0x7fffffffffffffff) && (uVar14 <= 0x7ffffffffffffffe - (uVar14 >> 1))) {\n                                uVar8 = (uVar14 >> 1) + uVar14;\n                                if (uVar16 < uVar8) {\n                                    uVar16 = uVar8;\n                                }\n                                uVar8 = uVar16 + 1;\n                                if (0x7fffffffffffffff < uVar8) {\ncode_r0x00014000a009:\n                                    fcn.140004888();\n                                    pcVar2 = swi(3);\n                                    (*pcVar2)();\n                                    return;\n                                }\n                            }\n                            else {\n                                uVar16 = 0x7ffffffffffffffe;\n                                uVar8 = 0x7fffffffffffffff;\n                            }\n                            piVar7 = fcn.140004e84(uVar8 * 2);\n                            unique0x10000be9 = uVar18;\n                            unique0x10000bf1 = uVar16;\n                            if (uVar14 < 8) {\n                                fcn.14001a740(piVar7, &var_61h + 1, uVar12 * 2);\n                                piVar7[uVar12] = cVar3;\n                                piVar7[uVar12 + 1] = 0;\n                            }\n                            else {\n                                fcn.14001a740(piVar7, arg2_00, uVar12 * 2);\n                                piVar7[uVar12] = cVar3;\n                                piVar7[uVar12 + 1] = 0;\n                                fcn.140003174(arg2_00, uVar14 * 2 + 2);\n                            }\n                            stack0xffffffffffffff98 = piVar7;\n                            arg1_01 = *0x14003e208;\n                            uVar14 = uVar16;\n                            uVar12 = uVar18;\n                            arg2_00 = stack0xffffffffffffff98;\n                        }\n                    }\ncode_r0x000140009f35:\n                    ppiStack208 = ppiStack208 + 1;\n                } while (ppiStack208 <= ppiStack192);\n            }\n            if (7 < uVar14) {\n                fcn.140003174(arg2_00, uVar14 * 2 + 2);\n            }\n            if (0x7 < stack0xffffffffffffff90) {\n                fcn.140003174(_auStack136, stack0xffffffffffffff90 * 2 + 2);\n            }\n        }\n    }\n    fcn.140018790(stack0xffffffffffffffb8 ^ auStack248);\n    return;\n}\n",
        "token_count": 5021
    },
    "null": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738",
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "14000a3e": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nulong * fcn.14000a3e8(ulong *arg1, int64_t *arg2, ulong *arg3)\n\n{\n    ulong *arg1_00;\n    ulong arg3_00;\n    int64_t arg4;\n    ulong uVar1;\n    ulong *puVar2;\n    ulong *puVar3;\n    uint64_t arg2_00;\n    int64_t iStackX8;\n    ulong *puStackX16;\n    \n    puVar3 = arg3;\n    puVar2 = fcn.140004e84(0x30);\n    arg1_00 = puVar2 + 1;\n    arg3_00 = *arg3;\n    arg4 = *arg2;\n    puVar2[3] = 0;\n    puVar2[4] = 7;\n    *arg1_00 = 0;\n    arg2_00 = 0xffffffffffffffff;\n    do {\n        arg2_00 = arg2_00 + 1;\n    } while (*(arg4 + arg2_00 * 2) != 0);\n    puStackX16 = arg1_00;\n    if (arg2_00 < 8) {\n        puVar2[3] = arg2_00;\n        fcn.14001a740(arg1_00, arg4, arg2_00 * 2);\n        *(arg2_00 * 2 + arg1_00) = 0;\n    }\n    else {\n        fcn.140004c4c(arg1_00, arg2_00, puVar3, arg4);\n    }\n    puVar3 = fcn.140008654(&iStackX8, arg4, arg3_00);\n    uVar1 = *puVar3;\n    *puVar3 = 0xffffffffffffffff;\n    puVar2[5] = uVar1;\n    if (iStackX8 != -1) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)();\n    }\n    if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 4) != 0)) {\n        fcn.140003534(*(*0x14003e208 + 0x10), 0xd, 0x140037758, arg3_00);\n    }\n    *puVar2 = *arg1;\n    *arg1 = puVar2;\n    return arg1_00;\n}\n",
        "token_count": 540
    },
    "14000a92": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nulong fcn.14000a924(void)\n\n{\n    int32_t iVar1;\n    ulong uVar2;\n    ulong uStackX8;\n    ulong uStackX16;\n    ulong uStackX24;\n    ulong uStackX32;\n    \n    uStackX8 = 0;\n    uStackX32 = 0;\n    uStackX24 = 0;\n    uStackX16 = 0;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetCurrentThread)();\n    iVar1 = (*_sym.imp.KERNEL32.dll_GetThreadTimes)(uVar2, &uStackX8, &uStackX32, &uStackX24, &uStackX16);\n    uVar2 = 0;\n    if (iVar1 != 0) {\n        uVar2 = uStackX8;\n    }\n    return uVar2;\n}\n",
        "token_count": 188
    },
    "14000c15": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nuint64_t fcn.14000c150(ulong arg1, int64_t *arg2)\n\n{\n    int64_t arg1_00;\n    int32_t iVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint64_t uVar4;\n    int64_t iStackX8;\n    \n    *arg2 = 0;\n    iVar1 = (**0x140031a58)(0, 0);\n    if (iVar1 == 0) {\n        uVar4 = fcn.14000e908();\n    }\n    else {\n        iStackX8 = 0;\n        uVar2 = fcn.140004770(&iStackX8);\n        arg1_00 = iStackX8;\n        uVar4 = uVar2;\n        if (uVar2 < 0) {\n            if (iStackX8 != 0) {\n                fcn.1400187b4(iStackX8);\n            }\n        }\n        else {\n            iVar3 = (**0x140031a58)(iStackX8, iVar1);\n            if (iVar3 == iVar1 + -1) {\n                if (*(arg1_00 + (iVar3 - 1) * 2) == 0x5c) {\n                    *(arg1_00 + (iVar3 - 1) * 2) = 0;\n                }\n                *arg2 = arg1_00;\n                uVar4 = 0;\n            }\n            else {\n                uVar2 = fcn.14000e908();\n                uVar4 = uVar2;\n                if (arg1_00 != 0) {\n                    fcn.1400187b4(arg1_00);\n                }\n            }\n        }\n    }\n    return uVar4;\n}\n",
        "token_count": 386
    },
    "14000cae": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nulong * fcn.14000cae4(ulong *arg1)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    ulong *puVar3;\n    ulong in_RDX;\n    ulong auStackX24 [2];\n    \n    auStackX24[0] = 0;\n    uVar2 = fcn.14000ca84(auStackX24, in_RDX);\n    if (-1 < uVar2) {\n        *arg1 = auStackX24[0];\n        return arg1;\n    }\n    fcn.14000bf14(uVar2);\n    pcVar1 = swi(3);\n    puVar3 = (*pcVar1)();\n    return puVar3;\n}\n",
        "token_count": 157
    },
    "14000e5f": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.14000e5f8(uint64_t *arg1, int64_t *arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    uint64_t arg2_00;\n    uint64_t arg2_01;\n    uchar auStack408 [32];\n    ulong uStack376;\n    uint64_t auStack360 [2];\n    char acStack344 [272];\n    uint64_t uStack72;\n    \n    uStack72 = *0x14003ef38 ^ auStack408;\n    arg2_00 = *arg1;\n    auStack360[0] = 0;\n    uStack376 = arg4;\n    if (*arg2 == 0) {\n        iVar1 = fcn.14000e3d8(acStack344, 0x104, auStack360, arg3);\n        arg2_00 = 0x104;\n        if (-1 < iVar1) {\n            iVar2 = -1;\n            do {\n                iVar3 = iVar2;\n                iVar2 = iVar3 + 1;\n            } while (acStack344[iVar3 + 1] != '\\0');\n            fcn.1400187b4(*arg2);\n            iVar2 = fcn.14002d9a8(iVar3 + 2, 0x140037fc8);\n            *arg2 = iVar2;\n            if (iVar2 != 0) {\n                fcn.14001a740(iVar2, acStack344, iVar3 + 2);\n                iVar2 = -1;\n                do {\n                    iVar3 = iVar2;\n                    iVar2 = iVar3 + 1;\n                } while (acStack344[iVar3 + 1] != '\\0');\n                *arg1 = iVar3 + 2;\n            }\n            goto code_r0x00014000e747;\n        }\n    }\n    else {\n        iVar1 = fcn.14000e3d8(*arg2, arg2_00, auStack360, arg3);\n        if (iVar1 != -0x7ff8ff86) goto code_r0x00014000e747;\n    }\n    do {\n        arg2_01 = auStack360[0];\n        if (auStack360[0] <= arg2_00) {\n            arg2_01 = arg2_00 * 3 >> 1;\n        }\n        if (0x7fffffff < arg2_01) break;\n        fcn.1400187b4(*arg2);\n        iVar2 = fcn.14002d9a8(arg2_01, 0x140037fc8);\n        *arg2 = iVar2;\n        if (iVar2 == 0) {\n            *arg1 = 0;\n            break;\n        }\n        *arg1 = arg2_01;\n        uStack376 = arg4;\n        iVar1 = fcn.14000e3d8(*arg2, arg2_01, auStack360, arg3);\n        arg2_00 = arg2_01;\n    } while (iVar1 == -0x7ff8ff86);\ncode_r0x00014000e747:\n    fcn.140018790(uStack72 ^ auStack408);\n    return;\n}\n",
        "token_count": 715
    },
    "14000e76": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.14000e768(uint64_t *arg1, int64_t *arg2, ulong arg3, ulong arg4)\n\n{\n    uchar auVar1 [16];\n    int32_t iVar2;\n    ulong uVar3;\n    int64_t iVar4;\n    uint64_t uVar5;\n    int64_t iVar6;\n    uint64_t arg2_00;\n    uchar auStack664 [32];\n    ulong uStack632;\n    uint64_t auStack616 [2];\n    int16_t aiStack600 [264];\n    uint64_t uStack72;\n    \n    uStack72 = *0x14003ef38 ^ auStack664;\n    uVar5 = *arg1;\n    auStack616[0] = 0;\n    uStack632 = arg4;\n    if (*arg2 == 0) {\n        uVar5 = 0x104;\n        iVar2 = fcn.14000e2bc(aiStack600, 0x104, auStack616, arg3);\n        if (-1 < iVar2) {\n            iVar6 = -1;\n            do {\n                iVar4 = iVar6;\n                iVar6 = iVar4 + 1;\n            } while (aiStack600[iVar6] != 0);\n            uVar5 = iVar4 + 2;\n            fcn.1400187b4(*arg2);\n            auVar1 = ZEXT816(2) * ZEXT816(uVar5);\n            uVar3 = SUB168(auVar1, 0);\n            if (SUB168(auVar1 >> 0x40, 0) != 0) {\n                uVar3 = 0xffffffffffffffff;\n            }\n            iVar6 = fcn.14002d9a8(uVar3, 0x140037fc8);\n            *arg2 = iVar6;\n            if (iVar6 != 0) {\n                fcn.14001a740(iVar6, aiStack600, uVar5 * 2);\n                iVar6 = -1;\n                do {\n                    iVar4 = iVar6;\n                    iVar6 = iVar4 + 1;\n                } while (aiStack600[iVar6] != 0);\n                *arg1 = iVar4 + 2;\n            }\n            goto code_r0x00014000e8e5;\n        }\n    }\n    else {\n        iVar2 = fcn.14000e2bc(*arg2, uVar5, auStack616, arg3);\n        if (iVar2 != -0x7ff8ff86) goto code_r0x00014000e8e5;\n    }\n    do {\n        arg2_00 = auStack616[0];\n        if (auStack616[0] <= uVar5) {\n            arg2_00 = uVar5 * 3 >> 1;\n        }\n        if (0x7fffffff < arg2_00) break;\n        fcn.1400187b4(*arg2);\n        uVar3 = SUB168(ZEXT816(2) * ZEXT816(arg2_00), 0);\n        if (SUB168(ZEXT816(2) * ZEXT816(arg2_00) >> 0x40, 0) != 0) {\n            uVar3 = 0xffffffffffffffff;\n        }\n        iVar6 = fcn.14002d9a8(uVar3, 0x140037fc8);\n        *arg2 = iVar6;\n        if (iVar6 == 0) {\n            *arg1 = 0;\n            break;\n        }\n        *arg1 = arg2_00;\n        uStack632 = arg4;\n        iVar2 = fcn.14000e2bc(*arg2, arg2_00, auStack616, arg3);\n        uVar5 = arg2_00;\n    } while (iVar2 == -0x7ff8ff86);\ncode_r0x00014000e8e5:\n    fcn.140018790(uStack72 ^ auStack664);\n    return;\n}\n",
        "token_count": 867
    },
    "14000eb7": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nint32_t fcn.14000eb70(int64_t *arg1, ulong pSid)\n\n{\n    int64_t arg1_00;\n    uint32_t uVar1;\n    int32_t iVar2;\n    int64_t iStackX24;\n    \n    uVar1 = (*_sym.imp.ADVAPI32.dll_GetLengthSid)(pSid);\n    iStackX24 = 0;\n    iVar2 = fcn.14000ca54(&iStackX24, uVar1);\n    arg1_00 = iStackX24;\n    if (iVar2 < 0) {\n        if (iStackX24 != 0) {\n            fcn.140009480(iStackX24);\n        }\n    }\n    else {\n        iVar2 = (*_sym.imp.ADVAPI32.dll_CopySid)(uVar1, iStackX24, pSid);\n        if (iVar2 == 0) {\n            iVar2 = fcn.14000e908();\n            if (arg1_00 != 0) {\n                fcn.140009480(arg1_00);\n            }\n        }\n        else {\n            *arg1 = arg1_00;\n            iVar2 = 0;\n        }\n    }\n    return iVar2;\n}\n",
        "token_count": 268
    },
    "14000ed2": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nuint64_t fcn.14000ed20(int64_t *arg1, ulong arg2, ulong arg3)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    int64_t arg1_00;\n    uint32_t uVar3;\n    uint64_t arg4;\n    bool bVar4;\n    uint32_t auStackX32 [2];\n    int64_t aiStack56 [2];\n    \n    arg1_00 = 0;\n    aiStack56[0] = 0;\n    uVar3 = 0x40;\n    while( true ) {\n        if (arg1_00 != 0) {\n            fcn.140009480(arg1_00);\n            aiStack56[0] = 0;\n        }\n        uVar1 = fcn.14000ca54(aiStack56, uVar3);\n        arg1_00 = aiStack56[0];\n        if (uVar1 < 0) {\n            if (aiStack56[0] == 0) {\n                return uVar1;\n            }\n            fcn.140009480(aiStack56[0]);\n            return uVar1;\n        }\n        auStackX32[0] = 0;\n        iVar2 = (*_sym.imp.ADVAPI32.dll_GetTokenInformation)(arg2, arg3, aiStack56[0], uVar3, auStackX32);\n        if (iVar2 != 0) {\n            *arg1 = arg1_00;\n            return 0;\n        }\n        uVar1 = fcn.14000e908();\n        arg4 = uVar1;\n        if (((uVar1 + 0x80000000 & 0x80000000) == 0) && (uVar1 != 0x8007007a)) break;\n        bVar4 = auStackX32[0] <= uVar3;\n        uVar3 = auStackX32[0];\n        if (bVar4) {\n            if (arg1_00 != 0) {\n                fcn.140009480(arg1_00);\n            }\n            return 0x8000ffff;\n        }\n    }\n    if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n        fcn.140001efc(*(*0x14003e208 + 0x10), 0x10, 0x140037f20, arg4);\n    }\n    if (arg1_00 == 0) {\n        return arg4;\n    }\n    fcn.140009480(arg1_00);\n    return arg4;\n}\n",
        "token_count": 588
    },
    "140010b6": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nuint64_t fcn.140010b6c(ulong noname_0, ulong noname_1, ulong arg3)\n\n{\n    int64_t iVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint64_t arg4;\n    ulong in_R9;\n    int64_t iStackX8;\n    uchar auStack24 [16];\n    \n    if (auStack24 < 0x123) {\n        fcn.14000e934(0x140037fe0, *0x1400382d8, arg3, in_R9);\n    }\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(0x140040550);\n    iVar1 = *0x1400405a0 + 1;\n    if (iVar1 == 0) {\n        (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(0x140040550);\n        arg4 = 0x80070057;\ncode_r0x000140010c4a:\n        if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n            fcn.140001efc(*(*0x14003e208 + 0x10), 10, 0x140037fe8, arg4);\n        }\n    }\n    else {\n        if ((*0x1400405a0 == 0) || (*0x1400405a0 = iVar1,  *0x1400405a8 == 0)) {\n            (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(0x140040550);\n            iStackX8 = 0;\n            uVar4 = fcn.140010ff8(&iStackX8);\n            arg4 = uVar4;\n            (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(0x140040550);\n            if ((*0x1400405a0 == 0) ||\n               ((iVar1 = *0x1400405a0 + 1,  iVar1 == 0 || (*0x1400405a0 = iVar1,  *0x1400405a8 == 0)))) {\n                if (uVar4 < 0) {\n                    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(0x140040550);\n                    goto code_r0x000140010c4a;\n                }\n                if (*0x1400405a0 == 0) {\n                    *0x1400405a8 = iStackX8;\n                    iStackX8 = 0;\n                    *0x1400405a0 = 1;\n                }\n            }\n            iVar1 = iStackX8;\n            (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(0x140040550);\n            if (iVar1 != 0) {\n                LOCK();\n                piVar2 = iVar1 + 8;\n                iVar3 = *piVar2;\n                *piVar2 = *piVar2 + -1;\n                if (iVar3 < 2) {\n                    (**0x140031a58)(iStackX8, 1);\n                }\n            }\n        }\n        else {\n            (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(0x140040550);\n        }\n        if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 4) != 0)) {\n            fcn.1400084d4(*(*0x14003e208 + 0x10), 0xb, 0x140037fe8);\n        }\n        arg4 = 0;\n    }\n    return arg4;\n}\n",
        "token_count": 816
    },
    "14001187": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.14001187c(uint32_t *arg1, int64_t arg2, uint64_t arg3)\n\n{\n    uint32_t uVar1;\n    uint64_t uVar2;\n    uint64_t arg3_00;\n    uint64_t uStackX8;\n    \n    uStackX8 = 0;\n    *(arg1 + 4) = *(arg1 + 4) + arg3;\n    uVar1 = *arg1;\n    uVar2 = uVar1;\n    if ((uVar1 != 0) && (arg3_00 = 0x40 - uVar1,  arg3_00 <= arg3)) {\n        fcn.14001a740(arg1 + uVar2 + 0x20, arg2, arg3_00);\n        arg2 = arg2 + arg3_00;\n        arg3 = arg3 - arg3_00;\n        if ((*0x14003f1e0 & 0x42) == 0) {\n            fcn.140012dbc(arg1 + 0x18, arg1 + 8, 0x40, &uStackX8);\n        }\n        else {\n            fcn.140011a74(arg1 + 0x18, arg1 + 8, 0x40, &uStackX8);\n        }\n        uVar2 = 0;\n    }\n    uVar1 = uVar2;\n    if (0x3f < arg3) {\n        if ((*0x14003f1e0 & 0x42) == 0) {\n            fcn.140012dbc(arg1 + 0x18, arg2, arg3, &uStackX8);\n        }\n        else {\n            fcn.140011a74(arg1 + 0x18, arg2, arg3, &uStackX8);\n        }\n        arg2 = arg2 + (arg3 - uStackX8);\n        arg3 = uStackX8;\n    }\n    if (arg3 != 0) {\n        fcn.14001a740(arg1 + uVar2 + 0x20, arg2, arg3);\n        uVar1 = uVar1 + arg3;\n    }\n    *arg1 = uVar1;\n    return;\n}\n",
        "token_count": 498
    },
    "14001195": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.14001195c(uint32_t *arg1, uint64_t *arg2)\n\n{\n    uint32_t *arg2_00;\n    uint64_t *arg1_00;\n    uint64_t uVar1;\n    uint8_t uVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint64_t uVar5;\n    uint64_t *puVar6;\n    uint32_t uVar7;\n    int64_t iVar8;\n    ulong uStackX8;\n    \n    uVar7 = *arg1;\n    arg2_00 = arg1 + 8;\n    uStackX8 = 0;\n    arg1_00 = arg1 + 0x18;\n    *(uVar7 + 0x20 + arg1) = 0x80;\n    uVar7 = uVar7 + 1;\n    if (0x38 < uVar7) {\n        fcn.14002dec0(arg1 + uVar7 + 0x20, 0x40 - uVar7);\n        if ((*0x14003f1e0 & 0x42) == 0) {\n            fcn.140012dbc(arg1_00, arg2_00, 0x40, &uStackX8);\n        }\n        else {\n            fcn.140011a74(arg1_00, arg2_00, 0x40, &uStackX8);\n        }\n        uVar7 = 0;\n    }\n    fcn.14002dec0(arg1 + uVar7 + 0x20, 0x40 - uVar7);\n    uVar5 = *(arg1 + 4) << 3;\n    uVar2 = *0x14003f1e0 & 0x42;\n    *(arg1 + 0x16) =\n         uVar5 >> 0x38 | (uVar5 & 0xff000000000000) >> 0x28 | (uVar5 & 0xff0000000000) >> 0x18 |\n         (uVar5 & 0xff00000000) >> 8 | (uVar5 & 0xff000000) << 8 | (uVar5 & 0xff0000) << 0x18 | (uVar5 & 0xff00) << 0x28\n         | *(arg1 + 4) << 0x3b;\n    if (uVar2 == 0) {\n        fcn.140012dbc(arg1_00, arg2_00, 0x40, &uStackX8);\n    }\n    else {\n        fcn.140011a74(arg1_00, arg2_00, 0x40, &uStackX8);\n    }\n    iVar8 = 4;\n    puVar6 = arg1_00;\n    do {\n        uVar5 = *puVar6;\n        puVar6 = puVar6 + 1;\n        uVar1 = uVar5 << 0x20;\n        uVar5 = uVar5 >> 0x20;\n        *arg2 = uVar1 >> 0x38 | (uVar1 & 0xff000000000000) >> 0x28 | (uVar1 & 0xff0000000000) >> 0x18 |\n                (uVar1 & 0xff00000000) >> 8 | (uVar5 & 0xff000000) << 8 | (uVar5 & 0xff0000) << 0x18 |\n                (uVar5 & 0xff00) << 0x28 | uVar5 << 0x38;\n        arg2 = arg2 + 1;\n        iVar8 = iVar8 + -1;\n    } while (iVar8 != 0);\n    fcn.14002dec0(arg1, 0x80);\n    uVar4 = *0x140038004;\n    uVar3 = *0x140038000;\n    uVar7 = *0x140037ffc;\n    *arg1_00 = *0x140037ff8;\n    arg1[0x19] = uVar7;\n    arg1[0x1a] = uVar3;\n    arg1[0x1b] = uVar4;\n    uVar4 = *0x140038014;\n    uVar3 = *0x140038010;\n    uVar7 = *0x14003800c;\n    arg1[0x1c] = *0x140038008;\n    arg1[0x1d] = uVar7;\n    arg1[0x1e] = uVar3;\n    arg1[0x1f] = uVar4;\n    return;\n}\n",
        "token_count": 1044
    },
    "140012db": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.140012dbc(uint *noname_0, uchar (*arg2) [16], uint64_t arg3, uint64_t *arg4)\n\n{\n    uchar (*pauVar1) [16];\n    uchar (*pauVar2) [16];\n    uint64_t uVar3;\n    int32_t iVar4;\n    int32_t iVar6;\n    int32_t iVar7;\n    uchar auVar5 [16];\n    int32_t iVar8;\n    int32_t iVar11;\n    int32_t iVar12;\n    uchar auVar9 [16];\n    uchar auVar10 [16];\n    int32_t iVar13;\n    uchar auVar14 [16];\n    uchar auVar15 [16];\n    uchar auVar16 [16];\n    uchar auVar17 [16];\n    uchar auVar18 [16];\n    uchar auVar19 [16];\n    int32_t iVar20;\n    int32_t iVar21;\n    int32_t iVar22;\n    int32_t iVar23;\n    \n    iVar23 = noname_0[2];\n    iVar22 = noname_0[3];\n    iVar21 = noname_0[6];\n    iVar20 = noname_0[7];\n    auVar17 = CONCAT412(*noname_0, CONCAT48(noname_0[1], CONCAT44(noname_0[4], noname_0[5])));\n    if (0x3f < arg3) {\n        uVar3 = arg3 >> 6;\n        arg3 = arg3 + uVar3 * -0x40;\n        do {\n            auVar5 = pshufb(*arg2, *0x140038300);\n            auVar9 = pshufb(arg2[1], *0x140038300);\n            pauVar1 = arg2[2];\n            pauVar2 = arg2[3];\n            arg2 = arg2[4];\n            auVar14 = pshufb(*pauVar1, *0x140038300);\n            auVar15 = pshufb(*pauVar2, *0x140038300);\n            iVar4 = *0x140038100 + SUB164(auVar5, 0);\n            auVar10 = CONCAT412(*0x14003810c + SUB164(auVar5 >> 0x60, 0), \n                                CONCAT48(*0x140038108 + SUB164(auVar5 >> 0x40, 0), \n                                         CONCAT44(*0x140038104 + SUB164(auVar5 >> 0x20, 0), iVar4)));\n            auVar5 = sha256msg1_sha(auVar5, auVar9);\n            auVar16 = sha256rnds2_sha(CONCAT412(iVar23, CONCAT48(iVar22, CONCAT44(iVar21, iVar20))), auVar17, auVar10);\n            iVar11 = SUB164(auVar14 >> 0x20, 0);\n            iVar12 = SUB164(auVar14 >> 0x40, 0);\n            iVar13 = SUB164(auVar14 >> 0x60, 0);\n            auVar18 = sha256rnds2_sha(auVar17, auVar16, CONCAT412(iVar4, CONCAT48(iVar4, SUB168(auVar10 >> 0x40, 0))));\n            iVar4 = *0x140038110 + SUB164(auVar9, 0);\n            auVar10 = CONCAT412(*0x14003811c + SUB164(auVar9 >> 0x60, 0), \n                                CONCAT48(*0x140038118 + SUB164(auVar9 >> 0x40, 0), \n                                         CONCAT44(*0x140038114 + SUB164(auVar9 >> 0x20, 0), iVar4)));\n            auVar16 = sha256rnds2_sha(auVar16, auVar18, auVar10);\n            auVar18 = sha256rnds2_sha(auVar18, auVar16, CONCAT412(iVar4, CONCAT48(iVar4, SUB168(auVar10 >> 0x40, 0))));\n            iVar4 = *0x140038120 + SUB164(auVar14, 0);\n            auVar10 = CONCAT412(*0x14003812c + iVar13, \n                                CONCAT48(*0x140038128 + iVar12, CONCAT44(*0x140038124 + iVar11, iVar4)));\n            auVar16 = sha256rnds2_sha(auVar16, auVar18, auVar10);\n            auVar19 = sha256rnds2_sha(auVar18, auVar16, CONCAT412(iVar4, CONCAT48(iVar4, SUB168(auVar10 >> 0x40, 0))));\n            iVar4 = *0x140038130 + SUB164(auVar15, 0);\n            iVar6 = SUB164(auVar15 >> 0x20, 0);\n            iVar7 = SUB164(auVar15 >> 0x40, 0);\n            iVar8 = SUB164(auVar15 >> 0x60, 0);\n            auVar10 = CONCAT412(*0x14003813c + iVar8, \n                                CONCAT48(*0x140038138 + iVar7, CONCAT44(*0x140038134 + iVar6, iVar4)));\n            auVar18 = sha256rnds2_sha(auVar16, auVar19, auVar10);\n            auVar19 = sha256rnds2_sha(auVar19, auVar18, CONCAT412(iVar4, CONCAT48(iVar4, SUB168(auVar10 >> 0x40, 0))));\n            auVar16 = sha256msg2_sha(CONCAT412(SUB164(auVar15, 0) + SUB164(auVar5 >> 0x60, 0), \n                                               CONCAT48(iVar13 + SUB164(auVar5 >> 0x40, 0), \n                                                        CONCAT44(iVar12 + SUB164(auVar5 >> 0x20, 0), \n                                                                 iVar11 + SUB164(auVar5, 0)))), auVar15);\n            iVar4 = *0x140038140 + SUB164(auVar16, 0);\n            iVar11 = SUB164(auVar16 >> 0x20, 0);\n            iVar12 = SUB164(auVar16 >> 0x40, 0);\n            iVar13 = SUB164(auVar16 >> 0x60, 0);\n            auVar10 = CONCAT412(*0x14003814c + iVar13, \n                                CONCAT48(*0x140038148 + iVar12, CONCAT44(*0x140038144 + iVar11, iVar4)));\n            auVar18 = sha256rnds2_sha(auVar18, auVar19, auVar10);\n            auVar19 = sha256rnds2_sha(auVar19, auVar18, CONCAT412(iVar4, CONCAT48(iVar4, SUB168(auVar10 >> 0x40, 0))));\n            auVar10 = sha256msg1_sha(auVar9, auVar14);\n            auVar9 = sha256msg1_sha(auVar14, auVar15);\n            auVar14 = sha256msg1_sha(auVar15, auVar16);\n            auVar5 = sha256msg2_sha(CONCAT412(SUB164(auVar16, 0) + SUB164(auVar10 >> 0x60, 0), \n                                              CONCAT48(iVar8 + SUB164(auVar10 >> 0x40, 0), \n                                                       CONCAT44(iVar7 + SUB164(auVar10 >> 0x20, 0), \n                                                                iVar6 + SUB164(auVar10, 0)))), auVar16);\n            iVar4 = *0x140038150 + SUB164(auVar5, 0);\n            iVar6 = SUB164(auVar5 >> 0x20, 0);\n            iVar7 = SUB164(auVar5 >> 0x40, 0);\n            iVar8 = SUB164(auVar5 >> 0x60, 0);\n            auVar10 = CONCAT412(*0x14003815c + iVar8, \n                                CONCAT48(*0x140038158 + iVar7, CONCAT44(*0x140038154 + iVar6, iVar4)));\n            auVar15 = sha256rnds2_sha(auVar18, auVar19, auVar10);\n            auVar18 = sha256rnds2_sha(auVar19, auVar15, CONCAT412(iVar4, CONCAT48(iVar4, SUB168(auVar10 >> 0x40, 0))));\n            auVar9 = sha256msg2_sha(CONCAT412(SUB164(auVar5, 0) + SUB164(auVar9 >> 0x60, 0), \n                                              CONCAT48(iVar13 + SUB164(auVar9 >> 0x40, 0), \n                                                       CONCAT44(iVar12 + SUB164(auVar9 >> 0x20, 0), \n                                                                iVar11 + SUB164(auVar9, 0)))), auVar5);\n            iVar4 = *0x140038160 + SUB164(auVar9, 0);\n            iVar11 = SUB164(auVar9 >> 0x20, 0);\n            iVar12 = SUB164(auVar9 >> 0x40, 0);\n            iVar13 = SUB164(auVar9 >> 0x60, 0);\n            auVar10 = CONCAT412(*0x14003816c + iVar13, \n                                CONCAT48(*0x140038168 + iVar12, CONCAT44(*0x140038164 + iVar11, iVar4)));\n            auVar15 = sha256rnds2_sha(auVar15, auVar18, auVar10);\n            auVar19 = sha256rnds2_sha(auVar18, auVar15, CONCAT412(iVar4, CONCAT48(iVar4, SUB168(auVar10 >> 0x40, 0))));\n            auVar14 = sha256msg2_sha(CONCAT412(SUB164(auVar9, 0) + SUB164(auVar14 >> 0x60, 0), \n                                               CONCAT48(iVar8 + SUB164(auVar14 >> 0x40, 0), \n                                                        CONCAT44(iVar7 + SUB164(auVar14 >> 0x20, 0), \n                                                                 iVar6 + SUB164(auVar14, 0)))), auVar9);\n            iVar4 = *0x140038170 + SUB164(auVar14, 0);\n            iVar6 = SUB164(auVar14 >> 0x20, 0);\n            iVar7 = SUB164(auVar14 >> 0x40, 0);\n            iVar8 = SUB164(auVar14 >> 0x60, 0);\n            auVar10 = CONCAT412(*0x14003817c + iVar8, \n                                CONCAT48(*0x140038178 + iVar7, CONCAT44(*0x140038174 + iVar6, iVar4)));\n            auVar18 = sha256rnds2_sha(auVar15, auVar19, auVar10);\n            auVar19 = sha256rnds2_sha(auVar19, auVar18, CONCAT412(iVar4, CONCAT48(iVar4, SUB168(auVar10 >> 0x40, 0))));\n            auVar10 = sha256msg1_sha(auVar16, auVar5);\n            auVar15 = sha256msg2_sha(CONCAT412(SUB164(auVar14, 0) + SUB164(auVar10 >> 0x60, 0), \n                                               CONCAT48(iVar13 + SUB164(auVar10 >> 0x40, 0), \n                                                        CONCAT44(iVar12 + SUB164(auVar10 >> 0x20, 0), \n                                                                 iVar11 + SUB164(auVar10, 0)))), auVar14);\n            iVar4 = *0x140038180 + SUB164(auVar15, 0);\n            iVar11 = SUB164(auVar15 >> 0x20, 0);\n            iVar12 = SUB164(auVar15 >> 0x40, 0);\n            iVar13 = SUB164(auVar15 >> 0x60, 0);\n            auVar10 = CONCAT412(*0x14003818c + iVar13, \n                                CONCAT48(*0x140038188 + iVar12, CONCAT44(*0x140038184 + iVar11, iVar4)));\n            auVar18 = sha256rnds2_sha(auVar18, auVar19, auVar10);\n            auVar19 = sha256rnds2_sha(auVar19, auVar18, CONCAT412(iVar4, CONCAT48(iVar4, SUB168(auVar10 >> 0x40, 0))));\n            auVar10 = sha256msg1_sha(auVar5, auVar9);\n            auVar5 = sha256msg1_sha(auVar9, auVar14);\n            auVar16 = sha256msg2_sha(CONCAT412(SUB164(auVar15, 0) + SUB164(auVar10 >> 0x60, 0), \n                                               CONCAT48(iVar8 + SUB164(auVar10 >> 0x40, 0), \n                                                        CONCAT44(iVar7 + SUB164(auVar10 >> 0x20, 0), \n                                                                 iVar6 + SUB164(auVar10, 0)))), auVar15);\n            iVar4 = *0x140038190 + SUB164(auVar16, 0);\n            iVar6 = SUB164(auVar16 >> 0x20, 0);\n            iVar7 = SUB164(auVar16 >> 0x40, 0);\n            iVar8 = SUB164(auVar16 >> 0x60, 0);\n            auVar10 = CONCAT412(*0x14003819c + iVar8, \n                                CONCAT48(*0x140038198 + iVar7, CONCAT44(*0x140038194 + iVar6, iVar4)));\n            auVar9 = sha256rnds2_sha(auVar18, auVar19, auVar10);\n            auVar19 = sha256rnds2_sha(auVar19, auVar9, CONCAT412(iVar4, CONCAT48(iVar4, SUB168(auVar10 >> 0x40, 0))));\n            auVar18 = sha256msg2_sha(CONCAT412(SUB164(auVar16, 0) + SUB164(auVar5 >> 0x60, 0), \n                                               CONCAT48(iVar13 + SUB164(auVar5 >> 0x40, 0), \n                                                        CONCAT44(iVar12 + SUB164(auVar5 >> 0x20, 0), \n                                                                 iVar11 + SUB164(auVar5, 0)))), auVar16);\n            iVar4 = *0x1400381a0 + SUB164(auVar18, 0);\n            iVar11 = SUB164(auVar18 >> 0x20, 0);\n            iVar12 = SUB164(auVar18 >> 0x40, 0);\n            iVar13 = SUB164(auVar18 >> 0x60, 0);\n            auVar10 = CONCAT412(*0x1400381ac + iVar13, \n                                CONCAT48(*0x1400381a8 + iVar12, CONCAT44(*0x1400381a4 + iVar11, iVar4)));\n            auVar5 = sha256rnds2_sha(auVar9, auVar19, auVar10);\n            auVar9 = sha256rnds2_sha(auVar19, auVar5, CONCAT412(iVar4, CONCAT48(iVar4, SUB168(auVar10 >> 0x40, 0))));\n            auVar10 = sha256msg1_sha(auVar14, auVar15);\n            auVar14 = sha256msg2_sha(CONCAT412(SUB164(auVar18, 0) + SUB164(auVar10 >> 0x60, 0), \n                                               CONCAT48(iVar8 + SUB164(auVar10 >> 0x40, 0), \n                                                        CONCAT44(iVar7 + SUB164(auVar10 >> 0x20, 0), \n                                                                 iVar6 + SUB164(auVar10, 0)))), auVar18);\n            iVar4 = *0x1400381b0 + SUB164(auVar14, 0);\n            iVar6 = SUB164(auVar14 >> 0x20, 0);\n            iVar7 = SUB164(auVar14 >> 0x40, 0);\n            iVar8 = SUB164(auVar14 >> 0x60, 0);\n            auVar10 = CONCAT412(*0x1400381bc + iVar8, \n                                CONCAT48(*0x1400381b8 + iVar7, CONCAT44(*0x1400381b4 + iVar6, iVar4)));\n            auVar5 = sha256rnds2_sha(auVar5, auVar9, auVar10);\n            auVar19 = sha256rnds2_sha(auVar9, auVar5, CONCAT412(iVar4, CONCAT48(iVar4, SUB168(auVar10 >> 0x40, 0))));\n            auVar10 = sha256msg1_sha(auVar15, auVar16);\n            auVar9 = sha256msg2_sha(CONCAT412(SUB164(auVar14, 0) + SUB164(auVar10 >> 0x60, 0), \n                                              CONCAT48(iVar13 + SUB164(auVar10 >> 0x40, 0), \n                                                       CONCAT44(iVar12 + SUB164(auVar10 >> 0x20, 0), \n                                                                iVar11 + SUB164(auVar10, 0)))), auVar14);\n            iVar4 = *0x1400381c0 + SUB164(auVar9, 0);\n            iVar11 = SUB164(auVar9 >> 0x20, 0);\n            iVar12 = SUB164(auVar9 >> 0x40, 0);\n            iVar13 = SUB164(auVar9 >> 0x60, 0);\n            auVar10 = CONCAT412(*0x1400381cc + iVar13, \n                                CONCAT48(str.LwH._0_4_ + iVar12, CONCAT44(*0x1400381c4 + iVar11, iVar4)));\n            auVar15 = sha256rnds2_sha(auVar5, auVar19, auVar10);\n            auVar19 = sha256rnds2_sha(auVar19, auVar15, CONCAT412(iVar4, CONCAT48(iVar4, SUB168(auVar10 >> 0x40, 0))));\n            auVar10 = sha256msg1_sha(auVar16, auVar18);\n            auVar5 = sha256msg2_sha(CONCAT412(SUB164(auVar9, 0) + SUB164(auVar10 >> 0x60, 0), \n                                              CONCAT48(iVar8 + SUB164(auVar10 >> 0x40, 0), \n                                                       CONCAT44(iVar7 + SUB164(auVar10 >> 0x20, 0), \n                                                                iVar6 + SUB164(auVar10, 0)))), auVar9);\n            iVar4 = *0x1400381d0 + SUB164(auVar5, 0);\n            iVar6 = SUB164(auVar5 >> 0x20, 0);\n            iVar7 = SUB164(auVar5 >> 0x40, 0);\n            iVar8 = SUB164(auVar5 >> 0x60, 0);\n            auVar10 = CONCAT412(*0x1400381dc + iVar8, \n                                CONCAT48(*0x1400381d8 + iVar7, CONCAT44(*0x1400381d4 + iVar6, iVar4)));\n            auVar15 = sha256rnds2_sha(auVar15, auVar19, auVar10);\n            auVar16 = sha256rnds2_sha(auVar19, auVar15, CONCAT412(iVar4, CONCAT48(iVar4, SUB168(auVar10 >> 0x40, 0))));\n            auVar10 = sha256msg1_sha(auVar18, auVar14);\n            auVar5 = sha256msg2_sha(CONCAT412(SUB164(auVar5, 0) + SUB164(auVar10 >> 0x60, 0), \n                                              CONCAT48(iVar13 + SUB164(auVar10 >> 0x40, 0), \n                                                       CONCAT44(iVar12 + SUB164(auVar10 >> 0x20, 0), \n                                                                iVar11 + SUB164(auVar10, 0)))), auVar5);\n            iVar4 = *0x1400381e0 + SUB164(auVar5, 0);\n            auVar10 = CONCAT412(*0x1400381ec + SUB164(auVar5 >> 0x60, 0), \n                                CONCAT48(*0x1400381e8 + SUB164(auVar5 >> 0x40, 0), \n                                         CONCAT44(*0x1400381e4 + SUB164(auVar5 >> 0x20, 0), iVar4)));\n            auVar15 = sha256rnds2_sha(auVar15, auVar16, auVar10);\n            auVar16 = sha256rnds2_sha(auVar16, auVar15, CONCAT412(iVar4, CONCAT48(iVar4, SUB168(auVar10 >> 0x40, 0))));\n            auVar10 = sha256msg1_sha(auVar14, auVar9);\n            auVar10 = sha256msg2_sha(CONCAT412(SUB164(auVar5, 0) + SUB164(auVar10 >> 0x60, 0), \n                                               CONCAT48(iVar8 + SUB164(auVar10 >> 0x40, 0), \n                                                        CONCAT44(iVar7 + SUB164(auVar10 >> 0x20, 0), \n                                                                 iVar6 + SUB164(auVar10, 0)))), auVar5);\n            iVar4 = SUB164(auVar10, 0) + *0x1400381f0;\n            auVar10 = CONCAT412(SUB164(auVar10 >> 0x60, 0) + *0x1400381fc, \n                                CONCAT48(SUB164(auVar10 >> 0x40, 0) + *0x1400381f8, \n                                         CONCAT44(SUB164(auVar10 >> 0x20, 0) + *0x1400381f4, iVar4)));\n            auVar5 = sha256rnds2_sha(auVar15, auVar16, auVar10);\n            iVar20 = iVar20 + SUB164(auVar5, 0);\n            iVar21 = iVar21 + SUB164(auVar5 >> 0x20, 0);\n            iVar22 = iVar22 + SUB164(auVar5 >> 0x40, 0);\n            iVar23 = iVar23 + SUB164(auVar5 >> 0x60, 0);\n            auVar10 = sha256rnds2_sha(auVar16, auVar5, CONCAT412(iVar4, CONCAT48(iVar4, SUB168(auVar10 >> 0x40, 0))));\n            auVar17 = CONCAT412(SUB164(auVar10 >> 0x60, 0) + SUB164(auVar17 >> 0x60, 0), \n                                CONCAT48(SUB164(auVar10 >> 0x40, 0) + SUB164(auVar17 >> 0x40, 0), \n                                         CONCAT44(SUB164(auVar10 >> 0x20, 0) + SUB164(auVar17 >> 0x20, 0), \n                                                  SUB164(auVar10, 0) + SUB164(auVar17, 0))));\n            uVar3 = uVar3 - 1;\n        } while (uVar3 != 0);\n    }\n    *noname_0 = SUB164(auVar17 >> 0x60, 0);\n    noname_0[1] = SUB164(auVar17 >> 0x40, 0);\n    noname_0[2] = iVar23;\n    noname_0[3] = iVar22;\n    noname_0[6] = SUB164(auVar17 >> 0x20, 0);\n    noname_0[7] = SUB164(auVar17, 0);\n    noname_0[8] = iVar21;\n    noname_0[9] = iVar20;\n    *arg4 = arg3;\n    return;\n}\n",
        "token_count": 5455
    },
    "140015d0": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nint32_t fcn.140015d04(ulong arg1, ulong noname_1, int64_t arg3, ulong *arg4)\n\n{\n    int32_t iVar1;\n    ulong uVar2;\n    int32_t *piVar3;\n    uint uVar4;\n    uint uVar5;\n    uint uVar6;\n    uint uVar7;\n    uint uVar8;\n    uint uVar9;\n    uint uVar10;\n    uint uVar11;\n    uint *puVar12;\n    uint32_t uVar13;\n    int32_t iVar14;\n    uint *arg2;\n    uint *puVar15;\n    uint *puVar16;\n    uint *puVar17;\n    int64_t iVar18;\n    int64_t iVar19;\n    int64_t iStackX24;\n    ulong *puStackX32;\n    uchar auStack616 [4];\n    uint uStack612;\n    uint auStack608 [2];\n    int64_t *piStack600;\n    ulong **ppuStack592;\n    uint auStack584 [140];\n    \n    iStackX24 = arg3;\n    puStackX32 = arg4;\n    fcn.140015f74(arg3, arg4);\n    uVar13 = fcn.140015a04(arg1);\n    if (uVar13 == *(*(iStackX24 + 0x88) + 4)) {\n        iVar14 = 0;\n    }\n    else {\n        arg2 = fcn.1400167b4(0x228);\n        if (arg2 == NULL) {\n            fcn.140014db4(0);\n            iVar14 = -1;\n        }\n        else {\n            iVar18 = 4;\n            iVar19 = 4;\n            puVar16 = *(iStackX24 + 0x88);\n            puVar12 = auStack584;\n            do {\n                puVar17 = puVar12;\n                puVar15 = puVar16;\n                uVar4 = puVar15[1];\n                uVar5 = puVar15[2];\n                uVar6 = puVar15[3];\n                uVar7 = puVar15[4];\n                uVar8 = puVar15[5];\n                uVar9 = puVar15[6];\n                uVar10 = puVar15[7];\n                *puVar17 = *puVar15;\n                puVar17[1] = uVar4;\n                puVar17[2] = uVar5;\n                puVar17[3] = uVar6;\n                uVar4 = puVar15[8];\n                uVar5 = puVar15[9];\n                uVar6 = puVar15[10];\n                uVar11 = puVar15[0xb];\n                puVar17[4] = uVar7;\n                puVar17[5] = uVar8;\n                puVar17[6] = uVar9;\n                puVar17[7] = uVar10;\n                uVar7 = puVar15[0xc];\n                uVar8 = puVar15[0xd];\n                uVar9 = puVar15[0xe];\n                uVar10 = puVar15[0xf];\n                puVar17[8] = uVar4;\n                puVar17[9] = uVar5;\n                puVar17[10] = uVar6;\n                puVar17[0xb] = uVar11;\n                uVar4 = puVar15[0x10];\n                uVar5 = puVar15[0x11];\n                uVar6 = puVar15[0x12];\n                uVar11 = puVar15[0x13];\n                puVar17[0xc] = uVar7;\n                puVar17[0xd] = uVar8;\n                puVar17[0xe] = uVar9;\n                puVar17[0xf] = uVar10;\n                uVar7 = puVar15[0x14];\n                uVar8 = puVar15[0x15];\n                uVar9 = puVar15[0x16];\n                uVar10 = puVar15[0x17];\n                puVar17[0x10] = uVar4;\n                puVar17[0x11] = uVar5;\n                puVar17[0x12] = uVar6;\n                puVar17[0x13] = uVar11;\n                uVar4 = puVar15[0x18];\n                uVar5 = puVar15[0x19];\n                uVar6 = puVar15[0x1a];\n                uVar11 = puVar15[0x1b];\n                puVar17[0x14] = uVar7;\n                puVar17[0x15] = uVar8;\n                puVar17[0x16] = uVar9;\n                puVar17[0x17] = uVar10;\n                uVar7 = puVar15[0x1c];\n                uVar8 = puVar15[0x1d];\n                uVar9 = puVar15[0x1e];\n                uVar10 = puVar15[0x1f];\n                puVar17[0x18] = uVar4;\n                puVar17[0x19] = uVar5;\n                puVar17[0x1a] = uVar6;\n                puVar17[0x1b] = uVar11;\n                puVar17[0x1c] = uVar7;\n                puVar17[0x1d] = uVar8;\n                puVar17[0x1e] = uVar9;\n                puVar17[0x1f] = uVar10;\n                iVar19 = iVar19 + -1;\n                puVar16 = puVar15 + 0x20;\n                puVar12 = puVar17 + 0x20;\n            } while (iVar19 != 0);\n            uVar4 = puVar15[0x21];\n            uVar5 = puVar15[0x22];\n            uVar6 = puVar15[0x23];\n            uVar7 = puVar15[0x24];\n            uVar8 = puVar15[0x25];\n            uVar9 = puVar15[0x26];\n            uVar10 = puVar15[0x27];\n            uVar2 = *(puVar15 + 0x28);\n            puVar17[0x20] = puVar15[0x20];\n            puVar17[0x21] = uVar4;\n            puVar17[0x22] = uVar5;\n            puVar17[0x23] = uVar6;\n            puVar17[0x24] = uVar7;\n            puVar17[0x25] = uVar8;\n            puVar17[0x26] = uVar9;\n            puVar17[0x27] = uVar10;\n            *(puVar17 + 0x28) = uVar2;\n            puVar16 = auStack584;\n            puVar12 = arg2;\n            do {\n                puVar17 = puVar12;\n                puVar15 = puVar16;\n                uVar4 = puVar15[1];\n                uVar5 = puVar15[2];\n                uVar6 = puVar15[3];\n                uVar7 = puVar15[4];\n                uVar8 = puVar15[5];\n                uVar9 = puVar15[6];\n                uVar10 = puVar15[7];\n                *puVar17 = *puVar15;\n                puVar17[1] = uVar4;\n                puVar17[2] = uVar5;\n                puVar17[3] = uVar6;\n                uVar4 = puVar15[8];\n                uVar5 = puVar15[9];\n                uVar6 = puVar15[10];\n                uVar11 = puVar15[0xb];\n                puVar17[4] = uVar7;\n                puVar17[5] = uVar8;\n                puVar17[6] = uVar9;\n                puVar17[7] = uVar10;\n                uVar7 = puVar15[0xc];\n                uVar8 = puVar15[0xd];\n                uVar9 = puVar15[0xe];\n                uVar10 = puVar15[0xf];\n                puVar17[8] = uVar4;\n                puVar17[9] = uVar5;\n                puVar17[10] = uVar6;\n                puVar17[0xb] = uVar11;\n                uVar4 = puVar15[0x10];\n                uVar5 = puVar15[0x11];\n                uVar6 = puVar15[0x12];\n                uVar11 = puVar15[0x13];\n                puVar17[0xc] = uVar7;\n                puVar17[0xd] = uVar8;\n                puVar17[0xe] = uVar9;\n                puVar17[0xf] = uVar10;\n                uVar7 = puVar15[0x14];\n                uVar8 = puVar15[0x15];\n                uVar9 = puVar15[0x16];\n                uVar10 = puVar15[0x17];\n                puVar17[0x10] = uVar4;\n                puVar17[0x11] = uVar5;\n                puVar17[0x12] = uVar6;\n                puVar17[0x13] = uVar11;\n                uVar4 = puVar15[0x18];\n                uVar5 = puVar15[0x19];\n                uVar6 = puVar15[0x1a];\n                uVar11 = puVar15[0x1b];\n                puVar17[0x14] = uVar7;\n                puVar17[0x15] = uVar8;\n                puVar17[0x16] = uVar9;\n                puVar17[0x17] = uVar10;\n                uVar7 = puVar15[0x1c];\n                uVar8 = puVar15[0x1d];\n                uVar9 = puVar15[0x1e];\n                uVar10 = puVar15[0x1f];\n                puVar17[0x18] = uVar4;\n                puVar17[0x19] = uVar5;\n                puVar17[0x1a] = uVar6;\n                puVar17[0x1b] = uVar11;\n                puVar17[0x1c] = uVar7;\n                puVar17[0x1d] = uVar8;\n                puVar17[0x1e] = uVar9;\n                puVar17[0x1f] = uVar10;\n                iVar18 = iVar18 + -1;\n                puVar16 = puVar15 + 0x20;\n                puVar12 = puVar17 + 0x20;\n            } while (iVar18 != 0);\n            uVar4 = puVar15[0x21];\n            uVar5 = puVar15[0x22];\n            uVar6 = puVar15[0x23];\n            uVar7 = puVar15[0x24];\n            uVar8 = puVar15[0x25];\n            uVar9 = puVar15[0x26];\n            uVar10 = puVar15[0x27];\n            uVar2 = *(puVar15 + 0x28);\n            puVar17[0x20] = puVar15[0x20];\n            puVar17[0x21] = uVar4;\n            puVar17[0x22] = uVar5;\n            puVar17[0x23] = uVar6;\n            puVar17[0x24] = uVar7;\n            puVar17[0x25] = uVar8;\n            puVar17[0x26] = uVar9;\n            puVar17[0x27] = uVar10;\n            *(puVar17 + 0x28) = uVar2;\n            *arg2 = 0;\n            iVar14 = fcn.1400160bc(uVar13, arg2);\n            if (iVar14 == -1) {\n                puVar16 = fcn.1400142cc();\n                *puVar16 = 0x16;\n                fcn.140014db4(arg2);\n                iVar14 = -1;\n            }\n            else {\n                if (noname_1 == '\\0') {\n                    fcn.140014b7c();\n                }\n                piVar3 = *(iStackX24 + 0x88);\n                LOCK();\n                iVar1 = *piVar3;\n                *piVar3 = *piVar3 + -1;\n                if ((iVar1 == 1) && (*(iStackX24 + 0x88) != 0x14003e9d0)) {\n                    fcn.140014db4(*(iStackX24 + 0x88));\n                }\n                *arg2 = 1;\n                *(iStackX24 + 0x88) = arg2;\n                if ((*0x14003ef10 & *(iStackX24 + 0x3a8)) == 0) {\n                    piStack600 = &iStackX24;\n                    ppuStack592 = &puStackX32;\n                    uStack612 = 5;\n                    auStack608[0] = 5;\n                    fcn.140015834(auStack616, auStack608, &piStack600, &uStack612);\n                    if (noname_1 != '\\0') {\n                        *0x14003e160 = *puStackX32;\n                    }\n                }\n                fcn.140014db4(0);\n            }\n        }\n    }\n    return iVar14;\n}\n",
        "token_count": 3031
    },
    "1400160b": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.1400160bc(ulong arg1, int64_t arg2)\n\n{\n    uint8_t *puVar1;\n    uint8_t uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint32_t *puVar5;\n    int64_t iVar6;\n    uint8_t *puVar7;\n    uint64_t uVar8;\n    uint8_t *puVar9;\n    ushort *puVar10;\n    uint64_t uVar11;\n    uint64_t uVar12;\n    uint uVar13;\n    uint32_t uVar14;\n    uint32_t uVar15;\n    uint8_t *puVar16;\n    uchar auStack104 [32];\n    int32_t iStack72;\n    uint8_t auStack66 [18];\n    uint64_t uStack48;\n    \n    uStack48 = *0x14003ef38 ^ auStack104;\n    uVar3 = fcn.140015a04(arg1);\n    uVar11 = 0;\n    if (uVar3 != 0) {\n        puVar5 = 0x14003ee20;\n        uVar13 = 1;\n        uVar8 = uVar11;\ncode_r0x000140016105:\n        if (*puVar5 != uVar3) goto code_r0x00014001610d;\n        fcn.14001a0c0(arg2 + 0x18, 0, 0x101);\n        puVar16 = 0x14003ee10;\n        iVar6 = 4;\n        puVar7 = uVar8 * 0x30 + 0x14003ee30;\n        do {\n            uVar2 = *puVar7;\n            puVar9 = puVar7;\n            while ((uVar2 != 0 && (puVar9[1] != 0))) {\n                uVar2 = *puVar9;\n                uVar15 = uVar2;\n                if (uVar2 <= puVar9[1]) {\n                    uVar14 = uVar2;\n                    do {\n                        uVar14 = uVar14 + 1;\n                        if (0x100 < uVar14) break;\n                        uVar15 = uVar15 + 1;\n                        puVar1 = uVar14 + 0x18 + arg2;\n                        *puVar1 = *puVar1 | *puVar16;\n                    } while (uVar15 <= puVar9[1]);\n                }\n                puVar9 = puVar9 + 2;\n                uVar2 = *puVar9;\n            }\n            puVar7 = puVar7 + 8;\n            puVar16 = puVar16 + 1;\n            iVar6 = iVar6 + -1;\n        } while (iVar6 != 0);\n        *(arg2 + 4) = uVar3;\n        *(arg2 + 8) = 1;\n        uVar12 = *0x14002f358;\n        if (((uVar3 != 0x3a4) && (uVar12 = *0x14002f360,  uVar3 != 0x3a8)) &&\n           ((uVar12 = *0x14002f368,  uVar3 != 0x3b5 && (uVar12 = uVar11,  uVar3 == 0x3b6)))) {\n            uVar12 = *0x14002f370;\n        }\n        *(arg2 + 0x220) = uVar12;\n        puVar10 = arg2 + 0xc;\n        iVar6 = 6;\n        do {\n            *puVar10 = *((uVar8 * 0x30 - arg2) + 0x14003ee18 + puVar10);\n            puVar10 = puVar10 + 1;\n            iVar6 = iVar6 + -1;\n        } while (iVar6 != 0);\n        goto code_r0x000140016161;\n    }\ncode_r0x000140016349:\n    fcn.140015a84(arg2);\ncode_r0x000140016353:\n    fcn.140018790(uStack48 ^ auStack104);\n    return;\ncode_r0x00014001610d:\n    uVar15 = uVar8 + 1;\n    uVar8 = uVar15;\n    puVar5 = puVar5 + 0xc;\n    if (4 < uVar15) goto code_r0x00014001611a;\n    goto code_r0x000140016105;\ncode_r0x00014001611a:\n    if ((uVar3 == 65000) || (iVar4 = (*_sym.imp.KERNEL32.dll_IsValidCodePage)(uVar3 & 0xffff),  iVar4 == 0))\n    goto code_r0x000140016353;\n    if (uVar3 == 0xfde9) {\n        *(arg2 + 4) = 0xfde9;\n        *(arg2 + 0x220) = 0;\n        *(arg2 + 0x18) = 0;\n        *(arg2 + 0x1c) = 0;\n    }\n    else {\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetCPInfo)(uVar3);\n        if (iVar4 == 0) {\n            if (*0x14003f618 == 0) goto code_r0x000140016353;\n            goto code_r0x000140016349;\n        }\n        fcn.14001a0c0(arg2 + 0x18, 0, 0x101);\n        *(arg2 + 4) = uVar3;\n        *(arg2 + 0x220) = 0;\n        if (iStack72 == 2) {\n            puVar7 = auStack66;\n            while ((auStack66[0] != 0 && (puVar7[1] != 0))) {\n                uVar2 = *puVar7;\n                if (uVar2 <= puVar7[1]) {\n                    uVar3 = uVar2;\n                    uVar8 = (puVar7[1] - uVar2) + 1;\n                    do {\n                        uVar3 = uVar3 + 1;\n                        puVar16 = uVar3 + 0x18 + arg2;\n                        *puVar16 = *puVar16 | 4;\n                        uVar8 = uVar8 - 1;\n                    } while (uVar8 != 0);\n                }\n                puVar7 = puVar7 + 2;\n                auStack66[0] = *puVar7;\n            }\n            puVar7 = arg2 + 0x1a;\n            iVar6 = 0xfe;\n            do {\n                *puVar7 = *puVar7 | 8;\n                puVar7 = puVar7 + 1;\n                iVar6 = iVar6 + -1;\n            } while (iVar6 != 0);\n            iVar4 = *(arg2 + 4);\n            uVar8 = *0x14002f358;\n            if ((((iVar4 != 0x3a4) && (uVar8 = *0x14002f360,  iVar4 != 0x3a8)) &&\n                (uVar8 = *0x14002f368,  iVar4 != 0x3b5)) && (uVar8 = *0x14002f370,  iVar4 != 0x3b6)) {\n                uVar8 = uVar11;\n            }\n            *(arg2 + 0x220) = uVar8;\n        }\n        else {\n            uVar13 = 0;\n        }\n        *(arg2 + 8) = uVar13;\n    }\n    puVar10 = arg2 + 0xc;\n    for (iVar6 = 6; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar10 = 0;\n        puVar10 = puVar10 + 1;\n    }\ncode_r0x000140016161:\n    fcn.140015b1c(arg2);\n    goto code_r0x000140016353;\n}\n",
        "token_count": 1777
    },
    "1400235f": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738",
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nuint16_t fcn.1400235f8(uint16_t param_1)\n\n{\n    int32_t iVar1;\n    uint16_t auStackX8 [4];\n    uint16_t auStackX24 [8];\n    \n    if (param_1 == 0xffff) {\ncode_r0x00014001826b:\n        auStackX8[0] = 0;\n    }\n    else {\n        if (param_1 < 0x100) {\n            auStackX8[0] = *(*0x14003e168 + param_1 * 2);\n        }\n        else {\n            auStackX8[0] = 0;\n            auStackX24[0] = param_1;\n            iVar1 = sub.KERNEL32.dll_GetStringTypeW(1, auStackX24, 1, auStackX8);\n            if (iVar1 == 0) goto code_r0x00014001826b;\n        }\n        auStackX8[0] = auStackX8[0] & 0x80;\n    }\n    return auStackX8[0];\n}\n",
        "token_count": 241
    },
    "14002399": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nint64_t fcn.140023998(int16_t *arg1, int16_t *arg2)\n\n{\n    uint *puVar1;\n    int64_t iVar2;\n    int64_t iStackX8;\n    \n    if (((arg1 == NULL) || (arg2 == NULL)) || (*arg2 == 0)) {\n        puVar1 = fcn.1400142cc();\n        *puVar1 = 0x16;\n        fcn.140014060();\n    }\n    else if (*arg1 == 0) {\n        puVar1 = fcn.1400142cc();\n        *puVar1 = 0x16;\n    }\n    else {\n        fcn.140026c3c(&iStackX8);\n        if (iStackX8 != 0) {\n            iVar2 = fcn.1400270a0(arg1, arg2, 0x40, iStackX8);\n            if (iVar2 == 0) {\n                fcn.140026c94(iStackX8);\n            }\n            fcn.140025a18(iStackX8);\n            return iVar2;\n        }\n        puVar1 = fcn.1400142cc();\n        *puVar1 = 0x18;\n    }\n    return 0;\n}\n",
        "token_count": 279
    },
    "1400255c": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.1400255c8(ulong noname_0, uint32_t *arg2, int32_t **arg3, uint32_t *arg4)\n\n{\n    int64_t *piVar1;\n    uint32_t uVar2;\n    int64_t *piVar3;\n    uchar auStackX16 [16];\n    uint32_t *puStackX32;\n    int64_t iStack88;\n    int64_t iStack80;\n    int64_t iStack72;\n    int64_t *piStack64;\n    int64_t *piStack56;\n    int32_t *piStack48;\n    int32_t *piStack40;\n    int32_t *piStack32;\n    \n    puStackX32 = arg4;\n    fcn.140015258(*arg2);\n    piVar1 = *0x140040448 + *0x140040440;\n    for (piVar3 = *0x140040448; piStack64 = piVar3,  piVar3 != piVar1; piVar3 = piVar3 + 1) {\n        iStack88 = *piVar3;\n        if ((iStack88 != 0) && (uVar2 = *(iStack88 + 0x14),  (uVar2 >> 0xd & 1) != 0)) {\n            if ((((uVar2 & 3) == 2) && ((uVar2 & 0xc0) != 0)) || ((uVar2 >> 0xb & 1) != 0)) {\n                piStack32 = arg3[2];\n                piStack40 = arg3[1];\n                piStack48 = *arg3;\n                piStack56 = &iStack88;\n                iStack80 = iStack88;\n                iStack72 = iStack88;\n                fcn.14002552c(auStackX16, &iStack72, &piStack56, &iStack80);\n            }\n            else {\n                **arg3 = **arg3 + 1;\n            }\n        }\n    }\n    fcn.1400152b8(*arg4);\n    return;\n}\n",
        "token_count": 463
    },
    "140025dd": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.140025dd8(ulong *arg1, uchar *arg2, int64_t arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    int64_t arg2_00;\n    uint32_t in_stack_00000030;\n    int32_t aiStack24 [4];\n    \n    fcn.140028ddc(*arg1, in_stack_00000030 + 1, 1, aiStack24);\n    arg2_00 = (arg3 - (0 < in_stack_00000030)) - (aiStack24[0] == 0x2d);\n    if (arg3 == -1) {\n        arg2_00 = arg3;\n    }\n    iVar1 = fcn.140028c58(arg2 + (0 < in_stack_00000030) + (aiStack24[0] == 0x2d), arg2_00, in_stack_00000030 + 1, \n                          aiStack24);\n    if (iVar1 == 0) {\n        fcn.140025ed4(arg2, arg3, in_stack_00000030);\n    }\n    else {\n        *arg2 = 0;\n    }\n    return;\n}\n",
        "token_count": 264
    },
    "1400260b": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.1400260b8(ulong *arg1, uchar *arg2, int64_t arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    int64_t arg2_00;\n    uint32_t in_stack_00000030;\n    uchar auStack24 [16];\n    \n    auStack24 = ZEXT816(0);\n    fcn.140028ddc(*arg1, in_stack_00000030, 0, auStack24);\n    arg2_00 = arg3 - (auStack24._0_4_ == 0x2d);\n    if (arg3 == -1) {\n        arg2_00 = arg3;\n    }\n    iVar1 = fcn.140028c58(arg2 + (auStack24._0_4_ == 0x2d), arg2_00, auStack24._4_4_ + in_stack_00000030, auStack24);\n    if (iVar1 == 0) {\n        fcn.140026190(arg2, arg3, in_stack_00000030, auStack24);\n    }\n    else {\n        *arg2 = 0;\n    }\n    return;\n}\n",
        "token_count": 269
    },
    "1400262e": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.1400262e8(ulong *arg1, uchar *arg2, int64_t arg3, ulong arg4)\n\n{\n    char *pcVar1;\n    int32_t iVar2;\n    int64_t arg2_00;\n    char *pcVar3;\n    int32_t iVar4;\n    uint32_t in_stack_00000030;\n    uchar auStack24 [16];\n    \n    auStack24 = ZEXT816(0);\n    fcn.140028ddc(*arg1, in_stack_00000030, 0, auStack24);\n    iVar4 = auStack24._4_4_ + -1;\n    arg2_00 = arg3 - (auStack24._0_4_ == 0x2d);\n    if (arg3 == -1) {\n        arg2_00 = arg3;\n    }\n    iVar2 = fcn.140028c58(arg2 + (auStack24._0_4_ == 0x2d), arg2_00, in_stack_00000030, auStack24);\n    if (iVar2 == 0) {\n        auStack24._4_4_ = auStack24._4_4_ + -1;\n        if ((auStack24._4_4_ < -4) || (in_stack_00000030 <= auStack24._4_4_)) {\n            fcn.140025ed4(arg2, arg3, in_stack_00000030);\n        }\n        else {\n            pcVar1 = arg2 + (auStack24._0_4_ == 0x2d);\n            if (iVar4 < auStack24._4_4_) {\n                do {\n                    pcVar3 = pcVar1;\n                    pcVar1 = pcVar3 + 1;\n                } while (*pcVar3 != '\\0');\n                pcVar3[-1] = '\\0';\n            }\n            fcn.140026190(arg2, arg3, in_stack_00000030, auStack24);\n        }\n    }\n    else {\n        *arg2 = 0;\n    }\n    return;\n}\n",
        "token_count": 468
    },
    "1400275d": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nuint64_t fcn.1400275d0(uint16_t **arg1)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint *puVar3;\n    uint64_t uVar4;\n    uint16_t **arg1_00;\n    int64_t iVar5;\n    uint16_t *puVar6;\n    int64_t iVar7;\n    ulong arg3;\n    uint16_t uStackX8;\n    uint16_t auStackX10 [3];\n    uint8_t uStackX16;\n    uchar uStackX17;\n    \n    arg3 = 1;\n    iVar7 = 0x14003ef60;\n    if ((*(arg1 + 0x14) >> 0xc & 1) == 0) {\n        iVar1 = fcn.140026bfc(arg1);\n        if ((iVar1 == -1) || (iVar1 = fcn.140026bfc(arg1),  iVar1 == -2)) {\n            iVar5 = 0x14003ef60;\n        }\n        else {\n            iVar1 = fcn.140026bfc(arg1);\n            uVar2 = fcn.140026bfc(arg1);\n            iVar5 = *((iVar1 >> 6) * 8 + 0x140040030) + (uVar2 & 0x3f) * 0x48;\n        }\n        if (*(iVar5 + 0x39) == '\\0') goto code_r0x0001400274c6;\n        puVar6 = &uStackX8;\n        do {\n            iVar1 = fcn.14002761c(arg1);\n            if (iVar1 == -1) {\n                return 0xffff;\n            }\n            *puVar6 = iVar1;\n            puVar6 = puVar6 + 1;\n        } while (puVar6 != auStackX10);\ncode_r0x0001400274bc:\n        uVar4 = uStackX8;\n    }\n    else {\ncode_r0x0001400274c6:\n        if ((*(arg1 + 0x14) >> 0xc & 1) == 0) {\n            iVar1 = fcn.140026bfc(arg1);\n            if ((iVar1 != -1) && (iVar1 = fcn.140026bfc(arg1),  iVar1 != -2)) {\n                iVar1 = fcn.140026bfc(arg1);\n                uVar2 = fcn.140026bfc(arg1);\n                iVar7 = *((iVar1 >> 6) * 8 + 0x140040030) + (uVar2 & 0x3f) * 0x48;\n            }\n            if (*(iVar7 + 0x38) < '\\0') {\n                arg1_00 = arg1;\n                iVar1 = fcn.14002761c(arg1);\n                if (iVar1 == -1) {\n                    return 0xffff;\n                }\n                uStackX16 = iVar1;\n                iVar7 = fcn.140014c2c(arg1_00);\n                if (*(iVar7 + uStackX16 * 2) < 0) {\n                    iVar1 = fcn.14002761c(arg1);\n                    if (iVar1 == -1) {\n                        fcn.140027744(uStackX16, arg1);\n                        return 0xffff;\n                    }\n                    uStackX17 = iVar1;\n                    arg3 = 2;\n                }\n                iVar1 = fcn.140026b64(&uStackX8, &uStackX16, arg3);\n                if (iVar1 == -1) {\n                    puVar3 = fcn.1400142cc();\n                    *puVar3 = 0x2a;\n                    return 0xffff;\n                }\n                goto code_r0x0001400274bc;\n            }\n        }\n        if (*(arg1 + 2) < 2) {\n            uVar4 = fcn.14002afec(arg1);\n        }\n        else {\n            *(arg1 + 2) = *(arg1 + 2) + -2;\n            uVar4 = **arg1;\n            *arg1 = *arg1 + 1;\n        }\n    }\n    return uVar4;\n}\n",
        "token_count": 926
    },
    "140027e2": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.140027e20(ulong *arg1, ulong arg2, uint8_t *arg3, uint64_t arg4)\n\n{\n    uint8_t uVar1;\n    char cVar2;\n    uint uVar3;\n    char *pcVar4;\n    uint32_t uVar5;\n    int64_t iVar6;\n    uint8_t *puVar7;\n    uint64_t uVar8;\n    int64_t arg3_00;\n    ulong uVar9;\n    uint64_t uVar10;\n    char *pcVar11;\n    int32_t iVar12;\n    uint64_t uVar13;\n    int64_t iVar14;\n    uint64_t uVar15;\n    uchar *in_stack_00000028;\n    uchar auStack296 [32];\n    uchar *puStack264;\n    uint uStack256;\n    ulong uStack248;\n    ulong uStack240;\n    uint16_t auStack232 [2];\n    uint uStack228;\n    uint32_t auStack224 [2];\n    uchar *puStack216;\n    uint8_t *puStack208;\n    uint64_t uStack200;\n    uint32_t uStack192;\n    int32_t iStack188;\n    uint8_t *puStack184;\n    ulong uStack176;\n    char *pcStack168;\n    uint8_t *puStack160;\n    int64_t iStack152;\n    ulong uStack144;\n    int64_t iStack136;\n    int64_t *piStack128;\n    int64_t iStack120;\n    uint64_t uStack112;\n    ulong *puStack104;\n    ulong uStack96;\n    char acStack88 [8];\n    uint8_t uStack80;\n    uint8_t uStack79;\n    uchar auStack72 [8];\n    uint64_t uStack64;\n    \n    uStack96 = 0xfffffffffffffffe;\n    uStack64 = *0x14003ef38 ^ auStack296;\n    iStack120 = arg2;\n    puStack216 = in_stack_00000028;\n    iVar14 = iStack120 >> 6;\n    uVar10 = arg2 & 0x3f;\n    uStack144 = *(*(iVar14 * 8 + 0x140040030) + 0x28 + uVar10 * 0x48);\n    puStack208 = arg3 + (arg4 & 0xffffffff);\n    puStack184 = arg3;\n    iStack152 = iVar14;\n    uStack112 = uVar10;\n    puStack104 = arg1;\n    uStack192 = (*_sym.imp.KERNEL32.dll_GetConsoleOutputCP)();\n    uVar8 = 0;\n    if (puStack216[0x28] == '\\0') {\n        fcn.140017aa0(puStack216);\n    }\n    piStack128 = puStack216 + 0x18;\n    iStack188 = *(*piStack128 + 0xc);\n    *arg1 = 0;\n    *(arg1 + 1) = 0;\n    iVar6 = iVar14;\n    if (puStack184 < arg3 + (arg4 & 0xffffffff)) {\n        do {\n            iStack136 = iVar6;\n            auStack232[0] = auStack232[0] & 0xff00 | *arg3;\n            uStack228 = 0;\n            uVar13 = 1;\n            if (iStack188 == 0xfde9) {\n                pcVar11 = uVar10 * 0x48 + 0x3e + *(iStack136 * 8 + 0x140040030);\n                pcVar4 = pcVar11;\n                uVar13 = uVar8;\n                uVar15 = uVar8;\n                do {\n                    uVar5 = uVar13;\n                    if (*pcVar4 == '\\0') break;\n                    uVar5 = uVar5 + 1;\n                    uVar13 = uVar5;\n                    uVar15 = uVar15 + 1;\n                    pcVar4 = pcVar4 + 1;\n                } while (uVar15 < 5);\n                if (uVar15 == 0) {\n                    cVar2 = *(*arg3 + 0x14003f0c0);\n                    iVar12 = cVar2 + 1;\n                    iVar14 = puStack208 - arg3;\n                    if (iVar14 < iVar12) {\n                        if (0 < iVar14) {\n                            uVar10 = uVar8;\n                            do {\n                                *(uVar10 + uStack112 * 0x48 + 0x3e + *((iStack120 >> 6) * 8 + 0x140040030)) =\n                                     arg3[uVar10];\n                                uVar5 = uVar8 + 1;\n                                uVar8 = uVar5;\n                                uVar10 = uVar10 + 1;\n                                arg1 = puStack104;\n                            } while (uVar5 < iVar14);\n                        }\n                        *(arg1 + 4) = *(arg1 + 4) + iVar14;\n                        break;\n                    }\n                    uStack200 = 0;\n                    uVar5 = (iVar12 == 4) + 1;\n                    puStack264 = puStack216;\n                    puStack160 = arg3;\n                    iVar14 = fcn.14002a104(&uStack228, &puStack160, uVar5, &uStack200);\n                    if (iVar14 == -1) break;\n                    uVar13 = uVar5;\n                    puVar7 = arg3 + cVar2;\n                    iVar14 = iStack152;\n                }\n                else {\n                    iVar12 = *(*(*(iVar14 * 8 + 0x140040030) + 0x3e + uVar10 * 0x48) + 0x14003f0c0) + 1;\n                    uVar5 = iVar12 - uVar5;\n                    uStack200 = uStack200 & 0xffffffff00000000 | uVar5;\n                    iVar6 = puStack208 - arg3;\n                    arg3_00 = uVar5;\n                    uVar13 = uVar8;\n                    if (iVar6 < arg3_00) {\n                        if (0 < iVar6) {\n                            uVar13 = uVar15;\n                            do {\n                                *(*(iVar14 * 8 + 0x140040030) + uVar13 + 0x3e + uVar10 * 0x48) = arg3[uVar13 - uVar15];\n                                uVar5 = uVar8 + 1;\n                                uVar8 = uVar5;\n                                uVar13 = uVar13 + 1;\n                            } while (uVar5 < iVar6);\n                        }\n                        *(arg1 + 4) = *(arg1 + 4) + iVar6;\n                        break;\n                    }\n                    do {\n                        acStack88[uVar13] = *pcVar11;\n                        uVar13 = uVar13 + 1;\n                        pcVar11 = pcVar11 + 1;\n                    } while (uVar13 < uVar15);\n                    uVar13 = uVar8;\n                    if (0 < arg3_00) {\n                        fcn.14001a740(acStack88 + uVar15, arg3, arg3_00);\n                    }\n                    do {\n                        *(*(iVar14 * 8 + 0x140040030) + uVar13 + 0x3e + uVar10 * 0x48) = 0;\n                        uVar13 = uVar13 + 1;\n                    } while (uVar13 < uVar15);\n                    uStack176 = 0;\n                    pcStack168 = acStack88;\n                    uVar5 = (iVar12 == 4) + 1;\n                    uVar13 = uVar5;\n                    puStack264 = puStack216;\n                    iVar6 = fcn.14002a104(&uStack228, &pcStack168, uVar5, &uStack176);\n                    if (iVar6 == -1) break;\n                    puVar7 = arg3 + (uStack200 + -1);\n                }\n            }\n            else {\n                iVar6 = *(iVar14 * 8 + 0x140040030);\n                uVar1 = *(iVar6 + 0x3d + uVar10 * 0x48);\n                if ((uVar1 & 4) == 0) {\n                    iVar12 = fcn.1400235a0(*arg3, piStack128);\n                    if (iVar12 != 0) {\n                        puVar7 = arg3 + 1;\n                        if (puVar7 < puStack208) {\n                            iVar12 = fcn.1400269ec(&uStack228, arg3, 2, puStack216);\n                            if (iVar12 != -1) goto code_r0x000140028133;\n                        }\n                        else {\n                            *(*(iVar14 * 8 + 0x140040030) + 0x3e + uVar10 * 0x48) = *arg3;\n                            puVar7 = *(iVar14 * 8 + 0x140040030) + 0x3d + uVar10 * 0x48;\n                            *puVar7 = *puVar7 | 4;\n                            *(arg1 + 4) = *(arg1 + 4) + 1;\n                        }\n                        break;\n                    }\n                    uVar9 = 1;\n                    puVar7 = arg3;\n                }\n                else {\n                    uStack80 = *(iVar6 + 0x3e + uVar10 * 0x48);\n                    uStack79 = *arg3;\n                    *(iVar6 + 0x3d + uVar10 * 0x48) = uVar1 & 0xfb;\n                    uVar9 = 2;\n                    puVar7 = &uStack80;\n                }\n                iVar12 = fcn.1400269ec(&uStack228, puVar7, uVar9, puStack216);\n                puVar7 = arg3;\n                if (iVar12 == -1) break;\n            }\ncode_r0x000140028133:\n            arg3 = puVar7 + 1;\n            uStack240 = 0;\n            uStack248 = 0;\n            uStack256 = 5;\n            puStack264 = auStack72;\n            uVar5 = fcn.14001806c(uStack192, 0, &uStack228, uVar13);\n            uVar9 = uStack144;\n            if (uVar5 == 0) break;\n            puStack264 = NULL;\n            iVar12 = (*_sym.imp.KERNEL32.dll_WriteFile)(uStack144, auStack72, uVar5, auStack224);\n            if (iVar12 == 0) {\ncode_r0x0001400282b0:\n                uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                *arg1 = uVar3;\n                break;\n            }\n            *(arg1 + 4) = (*(arg1 + 1) - puStack184) + arg3;\n            if (auStack224[0] < uVar5) break;\n            if (auStack232[0] == '\\n') {\n                auStack232[0] = 0xd;\n                puStack264 = NULL;\n                iVar12 = (*_sym.imp.KERNEL32.dll_WriteFile)(uVar9, auStack232, 1, auStack224);\n                if (iVar12 == 0) goto code_r0x0001400282b0;\n                if (auStack224[0] == 0) break;\n                *(arg1 + 1) = *(arg1 + 1) + 1;\n                *(arg1 + 4) = *(arg1 + 4) + 1;\n            }\n            iVar6 = iStack136;\n        } while (arg3 < puStack208);\n    }\n    fcn.140018790(uStack64 ^ auStack296);\n    return;\n}\n",
        "token_count": 2606
    },
    "14002a2a": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nint32_t fcn.14002a2a8(int64_t arg1, uint64_t arg2, ulong arg3, uint64_t arg4)\n\n{\n    uint8_t *puVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    uint32_t *in_stack_00000028;\n    int32_t in_stack_00000030;\n    int32_t iStack24;\n    int32_t iStack20;\n    \n    if (((in_stack_00000028 == NULL) || (*in_stack_00000028 = 0xffffffff,  arg1 == 0)) ||\n       ((in_stack_00000030 != 0 && ((arg4 & 0xfffffe7f) != 0)))) {\n        puVar3 = fcn.1400142cc();\n        *puVar3 = 0x16;\n        fcn.140014060();\n        iVar2 = 0x16;\n    }\n    else {\n        iStack24 = 0;\n        iStack20 = 0;\n        iVar2 = fcn.14002a8b4(&iStack24, in_stack_00000028, arg1, arg2 & 0xffffffff);\n        if (iStack24 != 0) {\n            if (iVar2 != 0) {\n                puVar1 = *((*in_stack_00000028 >> 6) * 8 + 0x140040030) + 0x38 + (*in_stack_00000028 & 0x3f) * 0x48;\n                *puVar1 = *puVar1 & 0xfe;\n            }\n            iStack20 = iVar2;\n            fcn.140024e98(*in_stack_00000028);\n        }\n        if (iVar2 != 0) {\n            *in_stack_00000028 = 0xffffffff;\n        }\n    }\n    return iVar2;\n}\n",
        "token_count": 408
    },
    "14002d10": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.14002d108(ulong arg1, ulong arg2, ulong ***arg3, ulong arg4)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint uVar4;\n    uint32_t in_stack_00000028;\n    uint32_t in_stack_00000030;\n    ulong in_stack_00000040;\n    int32_t in_stack_00000048;\n    uchar auStack264 [32];\n    uchar *puStack232;\n    ulong ***pppuStack224;\n    ulong uStack216;\n    ulong ***pppuStack200;\n    ulong uStack192;\n    uchar auStack184 [48];\n    ulong uStack136;\n    uint32_t uStack120;\n    uint64_t uStack72;\n    \n    uStack72 = *0x14003ef38 ^ auStack264;\n    uStack192 = fcn.14002d798(0x1f80, 0xffc0);\n    pppuStack200 = arg3;\n    iVar2 = fcn.14002d04c(in_stack_00000028, uStack192);\n    uVar3 = in_stack_00000040;\n    uVar4 = in_stack_00000040 >> 0x20;\n    if (iVar2 == 0) {\n        if (in_stack_00000048 == 2) {\n            uStack136 = in_stack_00000040;\n            uStack120 = uStack120 & 0xffffffe3 | 3;\n        }\n        pppuStack224 = &pppuStack200;\n        puStack232 = &stack0x00000038;\n        fcn.14002d410(auStack184, &uStack192, in_stack_00000028, arg2);\n    }\n    cVar1 = fcn.1400254cc();\n    if ((cVar1 == '\\0') || (arg4 == 0)) {\n        fcn.14002d748(arg4);\n        fcn.14002d798(uStack192, 0xffc0);\n    }\n    else {\n        uStack216 = uStack192;\n        pppuStack224 = pppuStack200;\n        puStack232 = CONCAT44(uVar4, uVar3);\n        fcn.14002cfe4(arg4, in_stack_00000030, arg1);\n    }\n    fcn.140018790(uStack72 ^ auStack264);\n    return;\n}\n",
        "token_count": 531
    },
    "1400104f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.1400104f8(ulong *arg1, ulong Ptr, ulong arg3)\n\n{\n    ulong uVar1;\n    \n    if (*0x140040750 == '\\0') {\n        *arg1 = 0x14003e278;\n        arg1[1] = *0x14003e280;\n        **0x14003e280 = arg1;\n        *0x14003e280 = arg1;\n        uVar1 = (*_sym.imp.KERNEL32.dll_EncodePointer)(Ptr);\n        arg1[2] = uVar1;\n        uVar1 = (*_sym.imp.KERNEL32.dll_EncodePointer)(arg3);\n        arg1[3] = uVar1;\n    }\n    return;\n}\n",
        "token_count": 163
    },
    "1400026b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.1400026b0(uint64_t arg1, int64_t *arg2)\n\n{\n    int32_t *piVar1;\n    int64_t iVar2;\n    code *pcVar3;\n    char *arg1_00;\n    int32_t iVar4;\n    uint32_t uVar5;\n    uint64_t *puVar6;\n    ulong uVar7;\n    uint64_t uVar8;\n    ulong *puVar9;\n    uint64_t uVar10;\n    int64_t noname_0;\n    int64_t *noname_1;\n    int64_t *piVar11;\n    uint64_t uVar12;\n    int64_t *piVar13;\n    uint64_t uVar14;\n    bool bVar15;\n    uchar auStack616 [32];\n    int64_t *piStack584;\n    ulong *puStack576;\n    int64_t *piStack568;\n    int64_t **ppiStack560;\n    uint64_t *puStack552;\n    char *pcStack544;\n    uint64_t *puStack536;\n    uint32_t *puStack528;\n    uint32_t uStack520;\n    uint32_t uStack512;\n    char acStack504 [4];\n    uint32_t uStack500;\n    uint64_t uStack496;\n    uchar uStack488;\n    uint32_t uStack484;\n    ulong uStack480;\n    ulong uStack472;\n    int64_t iStack464;\n    int64_t *piStack456;\n    uint64_t uStack448;\n    char *pcStack440;\n    int64_t iStack432;\n    ulong uStack424;\n    uchar auStack416 [16];\n    uchar uStack400;\n    uint uStack392;\n    uint uStack388;\n    uint uStack384;\n    uint uStack380;\n    uchar uStack376;\n    uint64_t *puStack368;\n    uchar auStack360 [40];\n    uchar auStack320 [6];\n    uint16_t uStack314;\n    uint8_t uStack312;\n    uint8_t uStack311;\n    uint8_t uStack310;\n    uint8_t uStack309;\n    uint8_t uStack308;\n    uint8_t uStack307;\n    uint8_t uStack306;\n    uint8_t uStack305;\n    uint64_t auStack296 [2];\n    uint64_t uStack280;\n    uint64_t uStack272;\n    ushort uStack264;\n    ulong uStack248;\n    ulong uStack240;\n    uchar auStack232 [16];\n    uchar uStack216;\n    uchar auStack152 [96];\n    uint64_t uStack56;\n    \n    uStack56 = *0x14003ef38 ^ auStack616;\n    uStack500 = 0;\n    *0x1400404f8 = 0;\n    *0x1400404e8 = 0;\n    *0x140040500 = 1;\n    *0x1400404e0 = 0x140037478;\n    piVar11 = 0x1400404e8;\n    *0x14003e208 = 0x1400404e8;\n    piVar13 = 0x1400404e0;\n    piStack456 = arg2;\n    uStack448 = arg1;\n    do {\n        iStack432 = *piVar13;\n        piVar13 = piVar13 + 1;\n        uStack424 = 0;\n        piVar11[4] = iStack432;\n        ppiStack560 = piVar11 + 1;\n        piStack568 = NULL;\n        puStack576 = NULL;\n        piStack584 = &iStack432;\n        noname_1 = piVar11;\n        (*_sym.imp.ADVAPI32.dll_RegisterTraceGuidsW)(0x140001f40);\n        piVar11 = *piVar11;\n    } while (piVar11 != NULL);\n    fcn.140005bc0(auStack360, noname_1, &uStack500);\n    uStack496 = 0;\n    acStack504[0] = '\\x01';\n    if (1 < arg1) {\n        uVar14 = 1;\n        do {\n            iVar2 = arg2[uVar14];\n            iVar4 = fcn.14001340c(iVar2, 0x140037424);\n            if ((iVar4 == 0) || (iVar4 = fcn.14001340c(iVar2, 0x14003742c),  iVar4 == 0)) {\n                if (uStack496 != 0) {\n                    fcn.1400187b4(uStack496);\n                    uStack496 = 0;\n                }\n                uVar5 = fcn.14000c220(0x14000c120, &uStack496, 0);\n                if (uVar5 < 0) goto code_r0x00014000303d;\n                break;\n            }\n            iVar4 = fcn.140013ad8(iVar2, 0x140037438, 3);\n            if ((iVar4 == 0) || (iVar4 = fcn.140013ad8(iVar2, 0x140037440, 3),  iVar4 == 0)) {\n                puVar6 = fcn.14000cae4(&iStack464);\n                uVar12 = uStack496;\n                uVar14 = *puVar6;\n                *puVar6 = 0;\n                bVar15 = uStack496 != 0;\n                uStack496 = uVar14;\n                if (bVar15) {\n                    fcn.1400187b4(uVar12);\n                }\n                if (iStack464 != 0) {\n                    fcn.1400187b4(iStack464);\n                }\n                iVar4 = fcn.14000b82c(uStack496);\n                if (iVar4 < 0) {\n                    uVar7 = fcn.14000cb34();\n                    uVar5 = fcn.14000b8fc(uStack496, uVar7);\n                    if (uVar5 < 0) goto code_r0x000140003036;\n                }\n                else {\n                    uStack500 = fcn.14000b984(uStack496);\n                    if (uStack500 < 0) {\n                        if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n                            piStack584 = piStack584 & 0xffffffff00000000 | uStack500;\n                            fcn.140001e64((*0x14003e208)[2], 0xd, 0x140037468, uStack496);\n                        }\n                        uVar5 = uStack500;\n                        if (uStack500 < 0) goto code_r0x00014000302f;\n                    }\n                    acStack504[0] = '\\0';\n                }\n                break;\n            }\n            uVar14 = uVar14 + 1;\n        } while (uVar14 < arg1);\n    }\n    bVar15 = uStack496 != 0;\n    if (bVar15) {\ncode_r0x000140002a5a:\n        uVar14 = uStack496;\n        uStack480 = acStack504;\n        uStack472 = &uStack496;\n        uStack400 = 0;\n        uStack480._4_4_ = uStack480 >> 0x20;\n        uStack472._4_4_ = uStack472 >> 0x20;\n        uStack392 = uStack480;\n        uStack388 = uStack480._4_4_;\n        uStack384 = uStack472;\n        uStack380 = uStack472._4_4_;\n        uStack280 = 0;\n        uStack272 = 7;\n        auStack296[0] = auStack296[0] & 0xffffffffffff0000;\n        uVar12 = 0xffffffffffffffff;\n        do {\n            uVar12 = uVar12 + 1;\n        } while (*(uStack496 + uVar12 * 2) != 0);\n        if (7 < uVar12) {\n            if (0x7ffffffffffffffe < uVar12) goto code_r0x00014000305a;\n            uVar8 = uVar12 | 7;\n            if (0x7ffffffffffffffe < uVar8) {\n                uVar10 = 0x7fffffffffffffff;\n                uVar8 = 0x7ffffffffffffffe;\ncode_r0x000140002b19:\n                uVar10 = fcn.140004e84(uVar10 * 2);\n                uStack280 = uVar12;\n                uStack272 = uVar8;\n                fcn.14001a740(uVar10, uVar14, uVar12 * 2);\n                *(uVar12 * 2 + uVar10) = 0;\n                auStack296[0] = uVar10;\n                goto code_r0x000140002b52;\n            }\n            if (uVar8 < 10) {\n                uVar8 = 10;\n            }\n            uVar10 = uVar8 + 1;\n            if (uVar10 < 0x8000000000000000) goto code_r0x000140002b19;\n            goto code_r0x00014000305f;\n        }\n        uStack280 = uVar12;\n        fcn.14001a740(auStack296, uStack496, uVar12 * 2);\n        *(auStack296 + uVar12 * 2) = 0;\ncode_r0x000140002b52:\n        uStack240 = 7;\n        uStack248 = 0;\n        uStack264 = 0;\n        auStack232 = ZEXT816(0);\n        uStack216 = 1;\n        uVar7 = fcn.14000cb34();\n        uVar5 = fcn.14000a508(auStack296, uVar7);\n        uVar14 = uStack280;\n        if (uVar5 < 0) {\n            if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n                fcn.140001efc((*0x14003e208)[2], 0xe, 0x140037468, uVar5);\n            }\n            fcn.140009388(auStack296);\n            if (acStack504[0] != '\\0') {\n                fcn.140004438(uStack496);\n            }\n            if (uStack496 != 0) {\n                fcn.1400187b4(uStack496);\n            }\n            fcn.140005e9c(auStack360);\n            puVar9 = *0x14003e208;\n            if (*0x14003e208 != 0x14003e208) {\n                for (; puVar9 != NULL; puVar9 = *puVar9) {\n                    if (puVar9[1] != 0) {\n                        (*_sym.imp.ADVAPI32.dll_UnregisterTraceGuids)();\n                        puVar9[1] = 0;\n                    }\n                }\n                *0x14003e208 = 0x14003e208;\n            }\n            goto code_r0x000140002ffb;\n        }\n        uStack216 = 0;\n        if (bVar15) {\n            acStack504[0] = '\\0';\ncode_r0x000140002da3:\n            fcn.140009388(auStack296);\n            if (*CONCAT44(uStack388, uStack392) != '\\0') {\n                fcn.140004438(*CONCAT44(uStack380, uStack384));\n            }\n            if (uStack496 != 0) {\n                fcn.1400187b4(uStack496);\n            }\n            if (uStack500 < 0) {\n                if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n                    fcn.140001e30((*0x14003e208)[2], 0xf, 0x140037468, uStack500);\n                }\n                if (uStack500 < 0) {\n                    auStack416 = ZEXT816(0);\n                    if (*0x140040768 != 0) {\n                        iVar4 = *(*0x140040768 + 8);\n                        while (iVar4 != 0) {\n                            LOCK();\n                            piVar1 = *0x140040768 + 8;\n                            if (iVar4 == *piVar1) {\n                                *piVar1 = iVar4 + 1;\n                                iVar2 = *0x140040760;\n                                auStack416 = CONCAT88(*0x140040768, *0x140040760);\n                                if (*0x140040760 != 0) {\n                                    uVar5 = fcn.1400056dc();\n                                    if (uStack500 != *(iVar2 + 0x20)) {\n                                        *(iVar2 + 8) = 0x140037448;\n                                        *(iVar2 + 0x20) = uStack500;\n                                        *(iVar2 + 0x18) = uVar5;\n                                    }\n                                    if (((5 < *0x14003e240) && ((*0x14003e250 & 0x200000000000) != 0)) &&\n                                       ((*0x14003e258 & 0x200000000000) == *0x14003e258)) {\n                                        uStack484 = uStack500;\n                                        noname_0 = iVar2;\n                                        uStack448 = fcn.1400055bc(iVar2, auStack296);\n                                        acStack504[0] = *(iVar2 + 0x1c);\n                                        uStack496 = uStack496 & 0xffffffff00000000 | uVar5;\n                                        piStack456 = iVar2 + 0x24;\n                                        iStack464 = 0x140037580;\n                                        uStack480 = *(iVar2 + 0x10);\n                                        uStack488 = fcn.140008428();\n                                        puStack528 = &uStack484;\n                                        puStack536 = &uStack448;\n                                        pcStack544 = acStack504;\n                                        puStack552 = &uStack496;\n                                        ppiStack560 = &piStack456;\n                                        piStack568 = &iStack464;\n                                        puStack576 = &uStack480;\n                                        piStack584 = &uStack488;\n                                        fcn.1400012b4(noname_0, 0x140039379);\n                                    }\n                                }\n                                break;\n                            }\n                            iVar4 = *piVar1;\n                        }\n                    }\n                    fcn.1400030c4(auStack416);\n                }\n            }\n            fcn.140005e9c(auStack360);\n            puVar9 = *0x14003e208;\n            if (*0x14003e208 != 0x14003e208) {\n                for (; puVar9 != NULL; puVar9 = *puVar9) {\n                    if (puVar9[1] != 0) {\n                        (*_sym.imp.ADVAPI32.dll_UnregisterTraceGuids)();\n                        puVar9[1] = 0;\n                    }\n                }\n                *0x14003e208 = 0x14003e208;\n            }\ncode_r0x000140002ffb:\n            fcn.140018790(uStack56 ^ auStack616);\n            return;\n        }\n        uStack376 = 0;\n        puStack368 = auStack296;\n        uStack484 = 0;\n        for (; auStack232._0_8_ != NULL; auStack232._0_8_ = *auStack232._0_8_) {\n            puVar9 = auStack232._0_8_ + 1;\n            if (7 < auStack232._0_8_[4]) {\n                puVar9 = *puVar9;\n            }\n            iVar4 = fcn.14001340c(0x140037720, puVar9 + (uVar14 + 1) * 2);\n            if (iVar4 == 0) {\n                fcn.14000cae4(&uStack480);\n                goto code_r0x000140002d41;\n            }\n        }\n        pcStack440 = NULL;\n        uVar5 = fcn.14000c220(_sym.imp.KERNEL32.dll_GetSystemDirectoryW, &pcStack440, 0x140037720);\n        if (-1 < uVar5) {\n            uStack480 = pcStack440;\ncode_r0x000140002d41:\n            arg1_00 = uStack480;\n            piStack584 = piStack456;\n            uVar5 = fcn.140002010(&uStack484, uStack496, uStack480, uStack448);\n            if (uVar5 < 0) goto code_r0x00014000306d;\n            if (arg1_00 != NULL) {\n                fcn.1400187b4(arg1_00);\n            }\n            uStack500 = uStack484 & 0xffff | 0x80070000;\n            if (uStack484 < 1) {\n                uStack500 = uStack484;\n            }\n            uStack216 = 1;\n            goto code_r0x000140002da3;\n        }\n    }\n    else {\n        _auStack320 = ZEXT816(0);\n        uVar5 = (*_sym.imp.RPCRT4.dll_UuidCreate)();\n        if (uVar5 < 0) {\n            uVar5 = fcn.14000bf14(uVar5);\ncode_r0x00014000302f:\n            uVar5 = fcn.14000bf14(uVar5);\ncode_r0x000140003036:\n            uVar5 = fcn.14000bf14(uVar5);\ncode_r0x00014000303d:\n            uVar5 = fcn.14000bf14(uVar5);\ncode_r0x000140003044:\n            uVar5 = fcn.14000bf14(uVar5);\ncode_r0x00014000304b:\n            uVar5 = fcn.14000bf14(uVar5);\n        }\n        else {\n            uStack512 = uStack305;\n            uStack520 = uStack306;\n            puStack528 = puStack528 & 0xffffffff00000000 | uStack307;\n            puStack536 = puStack536 & 0xffffffff00000000 | uStack308;\n            pcStack544 = pcStack544 & 0xffffffff00000000 | uStack309;\n            puStack552 = puStack552 & 0xffffffff00000000 | uStack310;\n            ppiStack560 = ppiStack560 & 0xffffffff00000000 | uStack311;\n            piStack568 = piStack568 & 0xffffffff00000000 | uStack312;\n            puStack576 = puStack576 & 0xffffffff00000000 | uStack314;\n            piStack584 = piStack584 & 0xffffffff00000000 | auStack320._4_2_;\n            uVar5 = fcn.140003410(auStack152, 0x25, L\"%08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X\", \n                                  auStack320._0_4_);\n            if (uVar5 < 0) goto code_r0x000140003044;\n            if (uStack496 != 0) {\n                fcn.1400187b4(uStack496);\n                uStack496 = 0;\n            }\n            uVar5 = fcn.14000c220(0x14000c140, &uStack496, auStack152);\n            if (uVar5 < 0) goto code_r0x00014000304b;\n            uVar7 = fcn.14000cb34();\n            uVar5 = fcn.14000b8fc(uStack496, uVar7);\n            if (-1 < uVar5) goto code_r0x000140002a5a;\n        }\n        fcn.14000bf14(uVar5);\ncode_r0x00014000305a:\n        fcn.140004920();\ncode_r0x00014000305f:\n        uVar5 = fcn.140004888();\n    }\n    uVar5 = fcn.14000bf14(uVar5);\ncode_r0x00014000306d:\n    fcn.14000bf14(uVar5);\n    pcVar3 = swi(3);\n    (*pcVar3)();\n    return;\n}\n",
        "token_count": 4539
    },
    "1400030c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.1400030c4(int64_t arg1)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    \n    iVar3 = *(arg1 + 8);\n    if (iVar3 != 0) {\n        LOCK();\n        piVar1 = iVar3 + 8;\n        iVar2 = *piVar1;\n        *piVar1 = *piVar1 + -1;\n        if (iVar2 == 1) {\n            (**0x140031a58)(iVar3);\n            LOCK();\n            piVar1 = iVar3 + 0xc;\n            iVar2 = *piVar1;\n            *piVar1 = *piVar1 + -1;\n            if (iVar2 == 1) {\n                (**0x140031a58)(iVar3);\n            }\n        }\n    }\n    return;\n}\n",
        "token_count": 191
    },
    "1400031b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.1400031b0(void)\n\n{\n    int64_t *arg1;\n    \n    arg1 = *0x140040710;\n    if (*0x140040710 != NULL) {\n        *0x140040710 = NULL;\n        if (*arg1 != 0) {\n            *0x140040548 = *arg1;\n        }\n        if (arg1[1] != 0) {\n            (**0x140031a58)();\n            arg1[1] = 0;\n        }\n        fcn.1400187bc(arg1);\n        fcn.140010728();\n        if (*0x140040754 != 0) {\n            fcn.140011670();\n        }\n        fcn.140011564(1);\n    }\n    return;\n}\n",
        "token_count": 171
    },
    "140004b2": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nint64_t * fcn.140004b24(int64_t *arg1)\n\n{\n    uint64_t uVar1;\n    int64_t iVar2;\n    uint64_t uVar3;\n    code *pcVar4;\n    int64_t arg3;\n    int64_t arg1_00;\n    int64_t *piVar5;\n    uint64_t uVar6;\n    uint64_t uVar7;\n    ushort in_R9W;\n    \n    iVar2 = arg1[2];\n    uVar7 = 0x7ffffffffffffffe;\n    if (iVar2 == 0x7ffffffffffffffe) {\n        fcn.140004920();\n        pcVar4 = swi(3);\n        piVar5 = (*pcVar4)();\n        return piVar5;\n    }\n    uVar3 = arg1[3];\n    uVar6 = iVar2 + 1U | 7;\n    if ((uVar6 < 0x7fffffffffffffff) && (uVar3 <= 0x7ffffffffffffffe - (uVar3 >> 1))) {\n        uVar1 = (uVar3 >> 1) + uVar3;\n        uVar7 = uVar6;\n        if (uVar6 < uVar1) {\n            uVar7 = uVar1;\n        }\n        uVar6 = uVar7 + 1;\n        if (0x7fffffffffffffff < uVar6) {\n            fcn.140004888();\n            pcVar4 = swi(3);\n            piVar5 = (*pcVar4)();\n            return piVar5;\n        }\n    }\n    else {\n        uVar6 = 0x7fffffffffffffff;\n    }\n    arg1_00 = fcn.140004e84(uVar6 * 2);\n    arg3 = iVar2 * 2;\n    arg1[2] = iVar2 + 1U;\n    arg1[3] = uVar7;\n    if (uVar3 < 8) {\n        fcn.14001a740(arg1_00, arg1, arg3);\n        *(arg3 + arg1_00) = in_R9W;\n        *(arg3 + 2 + arg1_00) = 0;\n    }\n    else {\n        iVar2 = *arg1;\n        fcn.14001a740(arg1_00, iVar2, arg3);\n        *(arg3 + arg1_00) = in_R9W;\n        *(arg3 + 2 + arg1_00) = 0;\n        fcn.140003174(iVar2, uVar3 * 2 + 2);\n    }\n    *arg1 = arg1_00;\n    return arg1;\n}\n",
        "token_count": 587
    },
    "140004fc": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_bp_10h\n// WARNING: Variable defined which should be unmapped: var_bp_18h\n// WARNING: Variable defined which should be unmapped: var_bp_20h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.140004fcc(int64_t arg1)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    int32_t *piVar4;\n    int64_t iVar5;\n    int64_t iVar6;\n    uint64_t uVar7;\n    uint64_t uVar8;\n    int64_t arg4;\n    uint64_t uVar9;\n    char cVar10;\n    uchar auStack168 [32];\n    uint uStack136;\n    uint uStack132;\n    uint uStack128;\n    uint uStack124;\n    uint uStack120;\n    uint uStack116;\n    uint uStack112;\n    uint uStack108;\n    ulong var_60h;\n    uint uStack96;\n    uint uStack92;\n    ulong var_50h;\n    uint uStack80;\n    uint uStack76;\n    ulong var_40h;\n    ushort uStack64;\n    uchar uStack62;\n    uint64_t var_30h;\n    ulong var_bp_20h;\n    ulong var_bp_18h;\n    ulong var_bp_10h;\n    \n    var_30h = *0x14003ef38 ^ auStack168;\n    iVar3 = fcn.14002dcf4(arg1, 0x2e);\n    uVar7 = iVar3 - arg1;\n    if (uVar7 == 0x16) {\n        cVar10 = '\\x02';\n    }\n    else {\n        if (uVar7 != 0x10) goto code_r0x00014000504b;\n        cVar10 = '\\x01';\n    }\n    uVar9 = 0xffffffffffffffff;\n    uVar8 = 0;\n    do {\n        uVar9 = uVar9 + 1;\n    } while (*(arg1 + uVar9) != '\\0');\n    if (cVar10 == '\\x01') {\n        if (0x41 < uVar9) goto code_r0x00014000504b;\n    }\n    else if ((cVar10 == '\\x02') && (0x81 < uVar9)) goto code_r0x00014000504b;\n    if (iVar3 != arg1) {\n        do {\n            uVar1 = *(arg1 + uVar8) - 0x2b;\n            if (((0x2f < uVar1) || ((0xffffffc07ff1U >> (uVar1 & 0x3f) & 1) == 0)) && (0x19 < *(arg1 + uVar8) + 0x9f))\n            goto code_r0x00014000504b;\n            uVar8 = uVar8 + 1;\n        } while (uVar8 < uVar7);\n    }\n    do {\n        if ((*(arg1 + uVar8) != '.') || (uVar8 = uVar8 + 1,  uVar9 <= uVar8)) goto code_r0x00014000504b;\n        var_40h = 0;\n        uStack64 = 0;\n        uStack62 = 0;\n        iVar3 = fcn.14002dcf4(arg1 + uVar8, 0x2e);\n        uVar7 = (iVar3 - arg1) - uVar8;\n        if (iVar3 == 0) {\n            uVar7 = uVar9 - uVar8;\n        }\n        if (0xb < uVar7) goto code_r0x00014000504b;\n        fcn.14001811c(&var_40h, 0xb, arg1 + uVar8, uVar7);\n        fcn.1400142ec(0);\n        iVar2 = fcn.140023604(&var_40h, 0);\n        iVar3 = 0;\n        if ((((iVar2 == 0) && (var_40h != '0')) && (var_40h._1_1_ != '\\0')) ||\n           (piVar4 = fcn.1400142cc(),  *piVar4 == 0x22)) goto code_r0x00014000504b;\n        uVar8 = uVar8 + uVar7;\n    } while (uVar8 < uVar9);\n    uVar7 = 0x81;\n    arg4 = -1;\n    if (cVar10 == '\\x01') {\n        uVar7 = 0x41;\n    }\n    do {\n        iVar6 = arg4;\n        arg4 = iVar6 + 1;\n    } while (*(arg1 + arg4) != '\\0');\n    if ((uVar7 <= iVar6 + 2U) && ((iVar6 + 2U != uVar7 || (*(arg1 + -1 + arg4) != '!')))) goto code_r0x00014000504b;\n    if (cVar10 == '\\x01') {\n        iVar5 = fcn.14002d9b0(0x90);\n        if (iVar5 != 0) {\n            *(iVar5 + 0x82) = 0x41;\n            _var_50h = ZEXT816(0);\n            (*_sym.imp.RPCRT4.dll_UuidCreate)(&var_50h);\n            uStack120 = var_50h;\n            uStack116 = var_50h._4_4_;\n            uStack112 = uStack80;\n            uStack108 = uStack76;\n            *(iVar5 + 0x81) = 0x11;\n            *(iVar5 + 0x88) = 0x1300000000;\n            fcn.14001a0c0(iVar5, 0, 0x81);\n            fcn.1400063bc(&uStack120, 0xc, iVar5);\n            *(iVar5 + 0x10) = 0x2e;\n            iVar3 = iVar5;\n        }\n    }\n    else {\n        if (cVar10 != '\\x02') goto code_r0x00014000504b;\n        iVar5 = fcn.14002d9b0(0x90);\n        if (iVar5 != 0) {\n            *(iVar5 + 0x82) = 0x81;\n            _var_60h = ZEXT816(0);\n            (*_sym.imp.RPCRT4.dll_UuidCreate)(&var_60h);\n            uStack136 = var_60h;\n            uStack132 = var_60h._4_4_;\n            uStack128 = uStack96;\n            uStack124 = uStack92;\n            *(iVar5 + 0x81) = 0x17;\n            *(iVar5 + 0x88) = 0x1900000000;\n            fcn.14001a0c0(iVar5, 0, 0x81);\n            fcn.1400063bc(&uStack136, 0x10, iVar5);\n            *(iVar5 + 0x16) = 0x2e;\n            iVar3 = iVar5;\n        }\n    }\n    if (iVar3 == 0) goto code_r0x00014000504b;\n    cVar10 = iVar6;\n    if (*(arg1 + -1 + arg4) == '!') {\n        fcn.14001811c(iVar3, 0x81, arg1, iVar6);\n        *(iVar3 + 0x81) = cVar10;\n        iVar6 = iVar6 + 2;\ncode_r0x000140005313:\n        *(iVar3 + 0x88) = iVar6 << 0x20;\n        *(iVar3 + 0x88) = *(iVar3 + 0x88) | 0x8000000000000000;\n    }\n    else {\n        if (iVar6 + 3U == uVar7) {\n            fcn.14001811c(iVar3, 0x81, arg1, arg4);\n            iVar6 = iVar6 + 3;\n            *(iVar3 + 0x81) = arg4;\n            goto code_r0x000140005313;\n        }\n        if (iVar6 + 4U == uVar7) {\n            fcn.14001811c(iVar3, 0x81, arg1, arg4);\n            *(iVar3 + arg4) = 0x2e;\n            *(iVar3 + 0x81) = cVar10 + '\\x02';\n            iVar6 = iVar6 + 4;\n            goto code_r0x000140005313;\n        }\n        fcn.14001811c(iVar3, 0x81, arg1, arg4);\n        *(iVar3 + arg4) = 0x2e;\n        *(iVar3 + 0x81) = cVar10 + '\\x02';\n        *(iVar3 + 0x88) = iVar6 + 4 << 0x20;\n        *(iVar3 + 0x88) = *(iVar3 + 0x88) & 0x7fffffffffffffff;\n    }\n    *(*(iVar3 + 0x81) + iVar3) = 0;\ncode_r0x00014000504b:\n    fcn.140018790(var_30h ^ auStack168);\n    return;\n}\n",
        "token_count": 2087
    },
    "140005a6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint16_t ** fcn.140005a6c(uint16_t **arg1, ulong arg2, ulong arg3)\n\n{\n    uint16_t uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint16_t **ppuVar4;\n    char *pcVar5;\n    uint16_t *puVar6;\n    uint16_t *puVar7;\n    uint16_t *puVar8;\n    int64_t iStackX8;\n    \n    iStackX8 = 0;\n    iVar2 = fcn.14000e94c(arg2, &iStackX8, arg3);\n    if (iVar2 == 0) {\n        ppuVar4 = fcn.14000cae4(&iStackX8);\n        puVar6 = *ppuVar4;\n        *ppuVar4 = NULL;\n        if (iStackX8 != 0) {\n            fcn.1400187b4(iStackX8);\n        }\n    }\n    else {\n        ppuVar4 = fcn.14000cae4(&iStackX8);\n        puVar6 = *ppuVar4;\n        *ppuVar4 = NULL;\n        if (iStackX8 != 0) {\n            fcn.1400187b4(iStackX8);\n        }\n    }\n    uVar1 = *puVar6;\n    puVar7 = puVar6;\n    while (uVar1 != 0) {\n        uVar1 = fcn.1400141f0();\n        *puVar7 = uVar1;\n        puVar7 = puVar7 + 1;\n        uVar1 = *puVar7;\n    }\n    iVar2 = 1;\n    if (*puVar6 != 0) {\n        uVar1 = *puVar6;\n        puVar7 = puVar6;\n        do {\n            pcVar5 = 0x1400375f0;\n            do {\n                puVar8 = puVar7;\n                if (*pcVar5 == uVar1) goto code_r0x000140005b57;\n                pcVar5 = pcVar5 + 1;\n            } while (pcVar5 != 0x1400375f5);\n            if ((uVar1 == 0x30) && (uVar1 = 0x30,  puVar7[1] == 0x78)) {\ncode_r0x000140005b57:\n                iVar2 = 1;\n                puVar8 = puVar7 + 2;\n                if (uVar1 != 0x30) {\n                    puVar8 = puVar7;\n                }\n            }\n            else {\n                iVar3 = fcn.1400235f8();\n                if (iVar3 == 0) {\n                    iVar2 = 0;\n                }\n                else {\n                    if (iVar2 == 1) {\n                        iVar2 = 2;\n                    }\n                    else if (iVar2 != 2) goto code_r0x000140005b6b;\n                    *puVar7 = 0x23;\n                }\n            }\ncode_r0x000140005b6b:\n            puVar7 = puVar8 + 1;\n            uVar1 = *puVar7;\n        } while (uVar1 != 0);\n    }\n    *arg1 = puVar6;\n    return arg1;\n}\n",
        "token_count": 731
    },
    "140005bc": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_bp_10h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.140005bc0(ulong *arg1, ulong noname_1, ulong arg3)\n\n{\n    uchar (*pauVar1) [16];\n    int32_t *piVar2;\n    int32_t iVar3;\n    int64_t iVar4;\n    uint8_t uVar5;\n    char cVar6;\n    uint32_t uVar7;\n    uchar (*pauVar8) [16];\n    ulong uVar9;\n    ulong *puVar10;\n    uint64_t arg1_00;\n    ulong var_90h;\n    uchar auStack440 [32];\n    ulong **ppuStack408;\n    uchar (**ppauStack400) [16];\n    ulong *puStack392;\n    ulong *puStack384;\n    uint32_t *puStack376;\n    int64_t *piStack368;\n    ulong *puStack360;\n    uchar **ppuStack352;\n    uchar *puStack344;\n    ulong *puStack336;\n    uint *puStack328;\n    uchar auStack312 [8];\n    ulong uStack304;\n    uint uStack296;\n    uint uStack292;\n    uint32_t uStack288;\n    uint uStack284;\n    uchar *puStack280;\n    ulong uStack272;\n    uchar (*apauStack264 [2]) [16];\n    ulong *puStack248;\n    uchar auStack240 [16];\n    ulong uStack224;\n    int64_t aiStack216 [2];\n    ulong auStack200 [2];\n    uint8_t uStack184;\n    ulong var_80h;\n    ulong var_78h;\n    ulong var_70h;\n    ulong var_68h;\n    ulong var_60h;\n    ulong var_58h;\n    ulong var_50h;\n    ulong var_40h;\n    ulong var_38h;\n    ulong var_30h;\n    ulong var_28h;\n    uint64_t var_20h;\n    ulong var_bp_10h;\n    \n    var_20h = *0x14003ef38 ^ auStack440;\n    *arg1 = arg3;\n    pauVar1 = arg1 + 1;\n    apauStack264[0] = pauVar1;\n    puStack248 = arg1;\n    pauVar8 = fcn.1400187f8(0x50);\n    *pauVar8 = ZEXT816(0);\n    *(*pauVar8 + 8) = 1;\n    *(*pauVar8 + 0xc) = 1;\n    **pauVar8 = vtable.std::_Ref_count_obj2_class_CUpdateTelemetry_.0;\n    apauStack264[0] = pauVar8;\n    fcn.1400056ec(pauVar8[1], \"MpAdlStub\");\n    **pauVar1 = pauVar8[1];\n    arg1[2] = pauVar8;\n    uVar7 = (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n    uVar9 = fcn.140006c6c(apauStack264, uVar7);\n    puVar10 = fcn.140007f3c(uVar9, &uStack288);\n    fcn.140005a6c(&uStack296, *puVar10, arg3);\n    if (CONCAT44(uStack284, uStack288) != 0) {\n        fcn.1400187b4(CONCAT44(uStack284, uStack288));\n    }\n    arg1[3] = CONCAT44(uStack292, uStack296);\n    uVar7 = (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n    uVar9 = fcn.140006c6c(auStack200, uVar7);\n    uVar9 = fcn.140006cd8(uVar9, aiStack216);\n    puVar10 = fcn.140007f3c(uVar9, &puStack280);\n    fcn.140005a6c(&uStack272, *puVar10, arg3);\n    if (puStack280 != NULL) {\n        fcn.1400187b4(puStack280);\n    }\n    arg1[4] = uStack272;\n    auStack240 = ZEXT816(0);\n    auStack240._8_8_ = arg1[2];\n    if (auStack240._8_8_ == 0) {\n        auStack240._8_8_ = 0;\n        auStack240._0_8_ = 0;\n    }\n    else {\n        auStack240._0_8_ = **pauVar1;\n        LOCK();\n        *(auStack240._8_8_ + 0xc) = *(auStack240._8_8_ + 0xc) + 1;\n    }\n    *0x140040760 = auStack240._0_8_;\n    iVar4 = auStack240._8_8_;\n    if (*0x140040768 != 0) {\n        LOCK();\n        piVar2 = *0x140040768 + 0xc;\n        iVar3 = *piVar2;\n        *0x140040768 = auStack240._8_8_;\n        *piVar2 = *piVar2 + -1;\n        iVar4 = *0x140040768;\n        if (iVar3 == 1) {\n            (**0x140031a58)();\n            iVar4 = *0x140040768;\n        }\n    }\n    *0x140040768 = iVar4;\n    uStack304 = 0;\n    fcn.14000c6a8(&uStack304);\n    if (((5 < *0x14003e240) && ((*0x14003e250 & 0x400000000000) != 0)) &&\n       ((*0x14003e258 & 0x400000000000) == *0x14003e258)) {\n        uStack296 = 0;\n        uStack272 = (*_sym.imp.KERNEL32.dll_GetCommandLineW)();\n        iVar4 = **pauVar1;\n        auStack312[0] = *(iVar4 + 0x1c);\n        puStack280 = iVar4 + 0x24;\n        uStack224 = 0x140037580;\n        aiStack216[0] = *(iVar4 + 0x10);\n        uVar5 = fcn.140008428();\n        uStack288 = uVar5;\n        auStack200[0] = uStack304;\n        uStack304 = arg1[4];\n        apauStack264[0] = arg1[3];\n        arg1_00 = ***pauVar1;\n        LOCK();\n        puVar10 = arg1_00 + 0x88;\n        uVar9 = *puVar10;\n        *puVar10 = *puVar10;\n        cVar6 = fcn.14000538c(arg1_00, uVar9, &uStack184);\n        uStack184 = uStack184 & -(cVar6 != '\\0');\n        puStack328 = &uStack296;\n        puStack336 = &uStack272;\n        puStack344 = auStack312;\n        ppuStack352 = &puStack280;\n        puStack360 = &uStack224;\n        piStack368 = aiStack216;\n        puStack376 = &uStack288;\n        puStack384 = auStack200;\n        puStack392 = &uStack304;\n        ppauStack400 = apauStack264;\n        ppuStack408 = &puStack248;\n        puStack248 = &uStack184;\n        fcn.140001438(arg1_00 & 0xffffffffffffff00 | -(cVar6 != '\\0'), 0x14003962d);\n    }\n    fcn.140018790(var_20h ^ auStack440);\n    return;\n}\n",
        "token_count": 1724
    },
    "1400063b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.1400063bc(uint8_t *arg1, uint64_t arg2, int64_t arg3)\n\n{\n    uint8_t uVar1;\n    uint8_t uVar2;\n    uint8_t uVar3;\n    uint64_t uVar4;\n    uint32_t uVar5;\n    int64_t iVar6;\n    \n    uVar4 = arg2 / 3;\n    arg2 = arg2 % 3;\n    if (0x81 < (-(arg2 != 0) & (arg2 != 1) + 2) + uVar4 * 4 + 1) {\n        return;\n    }\n    iVar6 = 0;\n    uVar5 = 0;\n    if (uVar4 != 0) {\n        do {\n            uVar1 = *arg1;\n            uVar5 = uVar5 + 1;\n            uVar2 = arg1[2];\n            uVar3 = arg1[1];\n            arg1 = arg1 + 3;\n            *(iVar6 + arg3) = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/[_-{(\"[uVar1 >> 2];\n            *(iVar6 + 1 + arg3) =\n                 \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/[_-{(\"[(uVar1 & 3) << 4 | uVar3 >> 4];\n            *(iVar6 + 2 + arg3) =\n                 \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/[_-{(\"\n                 [(uVar3 & 0xf) << 2 | uVar2 >> 6];\n            *(iVar6 + 3 + arg3) = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/[_-{(\"[uVar2 & 0x3f];\n            iVar6 = iVar6 + 4;\n        } while (uVar5 < uVar4);\n    }\n    if (arg2 == 1) {\n        uVar1 = *arg1;\n        *(iVar6 + arg3) = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/[_-{(\"[uVar1 >> 2];\n        *(iVar6 + 1 + arg3) = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/[_-{(\"[(uVar1 & 3) << 4];\n        *(iVar6 + 2 + arg3) = 0x3d3d;\n    }\n    else {\n        if (arg2 != 2) goto code_r0x000140006527;\n        uVar1 = *arg1;\n        uVar2 = arg1[1];\n        *(iVar6 + arg3) = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/[_-{(\"[uVar1 >> 2];\n        *(iVar6 + 1 + arg3) =\n             \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/[_-{(\"[(uVar1 & 3) << 4 | uVar2 >> 4];\n        *(iVar6 + 2 + arg3) =\n             \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/[_-{(\"[(uVar2 & 0xf) << 2];\n        *(iVar6 + 3 + arg3) = 0x3d;\n    }\n    iVar6 = iVar6 + 4;\ncode_r0x000140006527:\n    *(iVar6 + arg3) = 0;\n    return;\n}\n",
        "token_count": 700
    },
    "14000668": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.140006688(uint64_t arg1, ulong arg2, ulong arg3)\n\n{\n    int32_t *piVar1;\n    int64_t iVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    int64_t noname_0;\n    ulong noname_1;\n    uint64_t dwProcessId;\n    uint32_t uVar6;\n    uint64_t dwDesiredAccess;\n    uchar *puVar7;\n    ulong var_e0h;\n    ulong var_170h;\n    ulong var_200h;\n    ulong var_220h;\n    ulong var_228h;\n    ulong var_230h;\n    ulong var_238h;\n    ulong var_240h;\n    ulong var_248h;\n    ulong var_250h;\n    ulong var_258h;\n    ulong var_260h;\n    ulong var_268h;\n    ulong var_270h;\n    ulong var_278h;\n    ulong var_280h;\n    ulong var_288h;\n    ulong var_290h;\n    ulong var_298h;\n    ulong var_2a0h;\n    ulong var_2a8h;\n    ulong var_2b0h;\n    uchar auStack1000 [32];\n    ulong uStack968;\n    ulong *puStack960;\n    ulong *puStack952;\n    int64_t *piStack944;\n    uint *puStack936;\n    uchar *puStack928;\n    ulong *puStack920;\n    uint32_t *puStack912;\n    uchar uStack904;\n    uchar uStack903;\n    uchar uStack902;\n    uchar uStack901;\n    uint uStack900;\n    uint32_t uStack896;\n    uint uStack892;\n    uint32_t uStack888;\n    uint32_t uStack884;\n    uint64_t uStack880;\n    ulong uStack872;\n    int64_t iStack864;\n    ulong uStack856;\n    ulong uStack848;\n    uchar auStack840 [16];\n    uchar auStack824 [16];\n    uchar auStack808 [4];\n    uint32_t uStack804;\n    uchar auStack520 [144];\n    uchar auStack376 [144];\n    ulong auStack232 [4];\n    uchar *puStack200;\n    ulong uStack192;\n    int64_t iStack184;\n    int32_t iStack176;\n    uint uStack172;\n    ulong uStack168;\n    int32_t iStack160;\n    uint uStack156;\n    int64_t iStack152;\n    int32_t iStack144;\n    uint uStack140;\n    uint64_t *var_80h;\n    ulong var_bp_78h;\n    uchar *var_bp_70h;\n    ulong var_bp_68h;\n    int64_t var_60h;\n    int32_t iStack96;\n    uint uStack92;\n    uint32_t *var_50h;\n    ulong uStack80;\n    uint32_t *var_40h;\n    ulong uStack64;\n    uint64_t uStack56;\n    \n    uStack56 = *0x14003ef38 ^ auStack1000;\n    dwDesiredAccess = arg3;\n    dwProcessId = arg2;\n    uStack880 = arg1;\n    if (arg2 == 0) goto code_r0x000140006bff;\n    fcn.14001a0c0(auStack808, 0, 0x114);\n    uVar3 = fcn.14000f03c(auStack808);\n    if (uVar3 < 0) {\n        if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n            fcn.140001efc(*(*0x14003e208 + 0x10), 10, 0x1400376d8, uVar3);\n        }\n        goto code_r0x000140006bff;\n    }\n    puVar7 = NULL;\n    do {\n        uVar3 = dwDesiredAccess;\n        if (5 < uStack804) {\n            uVar6 = uVar3 | 0x1000;\n            uVar4 = fcn.14000bb00(arg1, dwProcessId, uVar6);\n            if (uVar4 < 0) {\n                if (uVar4 != 0x80070057) {\n                    uVar3 = uVar3 & 0xffffefff;\n                    goto code_r0x000140006761;\n                }\n            }\n            else if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 0x10) != 0)) {\n                noname_1 = 0xb;\ncode_r0x0001400069c0:\n                uStack968 = puVar7;\n                fcn.1400034f0(*(*0x14003e208 + 0x10), noname_1, 0x1400376d8, dwProcessId);\n            }\n            goto code_r0x0001400069d8;\n        }\ncode_r0x000140006761:\n        uVar6 = uVar3 | 0x400;\n        dwDesiredAccess = uVar6;\n        uVar4 = fcn.14000bb00(arg1, dwProcessId, dwDesiredAccess);\n        if (-1 < uVar4) {\n            if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 0x10) != 0)) {\n                noname_1 = 0xc;\n                goto code_r0x0001400069c0;\n            }\n            goto code_r0x0001400069d8;\n        }\n        if (((puVar7 == NULL) && (uVar4 == 0x80070005)) && (uVar4 = fcn.14000ef2c(),  uVar4 < 0)) {\n            if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 4) != 0)) {\n                uStack968 = uStack968 & 0xffffffff00000000 | uVar4;\n                fcn.1400034ac(*(*0x14003e208 + 0x10), 0xd, 0x1400376d8, dwProcessId);\n            }\n            auStack840 = ZEXT816(0);\n            if (*0x140040768 == 0) goto code_r0x000140006953;\n            iVar5 = *(*0x140040768 + 8);\n            goto code_r0x000140006830;\n        }\n        puVar7 = puVar7 + 1;\n        arg1 = uStack880;\n    } while (puVar7 < 0x2);\n    if (uVar4 < 0) goto code_r0x000140006962;\n    goto code_r0x0001400069d8;\ncode_r0x000140006830:\n    if (iVar5 == 0) goto code_r0x000140006953;\n    LOCK();\n    piVar1 = *0x140040768 + 8;\n    if (iVar5 == *piVar1) {\n        *piVar1 = iVar5 + 1;\n        iVar2 = *0x140040760;\n        auStack840 = CONCAT88(*0x140040768, *0x140040760);\n        if (*0x140040760 != 0) {\n            uStack900 = fcn.1400056dc();\n            if (uVar4 != *(iVar2 + 0x20)) {\n                *(iVar2 + 0x20) = uVar4;\n                *(iVar2 + 8) = 0x140037620;\n                *(iVar2 + 0x18) = uStack900;\n            }\n            if (((5 < *0x14003e240) && ((*0x14003e250 & 0x200000000000) != 0)) &&\n               ((*0x14003e258 & 0x200000000000) == *0x14003e258)) {\n                noname_0 = iVar2;\n                uStack896 = uVar4;\n                uStack872 = fcn.1400055bc(iVar2, auStack520);\n                uStack904 = *(iVar2 + 0x1c);\n                uStack892 = uStack900;\n                iStack864 = iVar2 + 0x24;\n                uStack856 = 0x140037580;\n                uStack848 = *(iVar2 + 0x10);\n                uStack903 = fcn.140008428();\n                puStack912 = &uStack896;\n                puStack920 = &uStack872;\n                puStack928 = &uStack904;\n                puStack936 = &uStack892;\n                piStack944 = &iStack864;\n                puStack952 = &uStack856;\n                puStack960 = &uStack848;\n                uStack968 = &uStack903;\n                fcn.1400012b4(noname_0, 0x140039961);\n            }\n        }\n        goto code_r0x000140006953;\n    }\n    iVar5 = *piVar1;\n    goto code_r0x000140006830;\ncode_r0x000140006953:\n    fcn.1400030c4(auStack840);\ncode_r0x000140006962:\n    if ((((uVar4 != 0x80070057) && (uVar4 != 0x80070005)) && (*0x14003e208 != 0x14003e208)) &&\n       ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n        uStack968 = uStack968 & 0xffffffff00000000 | uVar4;\n        fcn.1400034ac(*(*0x14003e208 + 0x10), 0xe, 0x1400376d8, dwProcessId);\n    }\ncode_r0x0001400069d8:\n    auStack824 = ZEXT816(0);\n    if (*0x140040768 != 0) {\n        iVar5 = *(*0x140040768 + 8);\n        while (iVar5 != 0) {\n            LOCK();\n            piVar1 = *0x140040768 + 8;\n            if (iVar5 == *piVar1) {\n                *piVar1 = iVar5 + 1;\n                iVar2 = *0x140040760;\n                auStack824 = CONCAT88(*0x140040768, *0x140040760);\n                if (((*0x140040760 != 0) && (5 < *0x14003e240)) &&\n                   (((*0x14003e250 & 0x200000000000) != 0 && ((*0x14003e258 & 0x200000000000) == *0x14003e258)))) {\n                    uStack888 = uVar6;\n                    uStack884 = uVar4;\n                    var_60h = fcn.1400055bc(*0x140040760, auStack376);\n                    uStack902 = *(iVar2 + 0x1c);\n                    uVar3 = fcn.1400056dc();\n                    uStack880 = uStack880 & 0xffffffff00000000 | uVar3;\n                    iStack152 = iVar2 + 0x24;\n                    iStack184 = *(iVar2 + 0x10);\n                    uStack901 = fcn.140008428();\n                    var_40h = &uStack888;\n                    var_50h = &uStack884;\n                    uStack64 = 4;\n                    uStack80 = 4;\n                    if (var_60h == 0) {\n                        var_60h = 0x1400373c1;\n                        iStack96 = 1;\n                    }\n                    else {\n                        iStack96 = fcn.140013590(var_60h);\n                        iStack96 = iStack96 + 1;\n                    }\n                    var_bp_70h = &uStack902;\n                    var_80h = &uStack880;\n                    uStack92 = 0;\n                    var_bp_68h = 1;\n                    var_bp_78h = 4;\n                    if (iStack152 == 0) {\n                        iStack152 = 0x1400373c1;\n                        iStack144 = 1;\n                    }\n                    else {\n                        iStack144 = fcn.140013590(iStack152);\n                        iStack144 = iStack144 + 1;\n                    }\n                    uStack140 = 0;\n                    iStack160 = fcn.140013590(0x140037580);\n                    iStack160 = iStack160 + 1;\n                    uStack168 = 0x140037580;\n                    uStack156 = 0;\n                    if (iStack184 == 0) {\n                        iStack184 = 0x1400373c1;\n                        iStack176 = 1;\n                    }\n                    else {\n                        iStack176 = fcn.140013590(iStack184);\n                        iStack176 = iStack176 + 1;\n                    }\n                    puStack200 = &uStack901;\n                    puStack960 = auStack232;\n                    uStack172 = 0;\n                    uStack968 = CONCAT44(uStack968._4_4_, 0xb);\n                    uStack192 = 1;\n                    fcn.140001000(0x14003e240, 0x1400399f2, 0, 0);\n                }\n                break;\n            }\n            iVar5 = *piVar1;\n        }\n    }\n    fcn.1400030c4(auStack824);\ncode_r0x000140006bff:\n    fcn.140018790(uStack56 ^ auStack1000);\n    return;\n}\n",
        "token_count": 3073
    },
    "140006c6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong * fcn.140006c6c(ulong *arg1, ulong arg2)\n\n{\n    int32_t iVar1;\n    ulong uVar2;\n    int64_t iStackX8;\n    \n    iStackX8 = 0;\n    iVar1 = fcn.140006688(&iStackX8, arg2, 0);\n    if (iVar1 < 0) {\n        uVar2 = 0;\n    }\n    else {\n        uVar2 = fcn.140006c28(iStackX8);\n    }\n    if (iStackX8 != 0) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iStackX8);\n    }\n    *(arg1 + 1) = arg2;\n    *arg1 = uVar2;\n    return arg1;\n}\n",
        "token_count": 176
    },
    "14000858": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140008580(ulong LoggerHandle, ulong arg2, ulong noname_2, char *arg4)\n\n{\n    char *pcVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    \n    if (arg4 == NULL) {\n        iVar3 = 5;\n    }\n    else {\n        iVar2 = -1;\n        do {\n            iVar3 = iVar2;\n            iVar2 = iVar3 + 1;\n        } while (arg4[iVar2] != '\\0');\n        iVar3 = iVar3 + 2;\n    }\n    pcVar1 = \"NULL\";\n    if (arg4 != NULL) {\n        pcVar1 = arg4;\n    }\n    (*_sym.imp.ADVAPI32.dll_TraceMessage)(LoggerHandle, 0x2b, 0x140037758, 0x20, pcVar1, iVar3, 0);\n    return;\n}\n",
        "token_count": 200
    },
    "1400085e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.1400085e0(ulong LoggerHandle, ulong noname_1, ulong arg3, char *arg4)\n\n{\n    char *pcVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    \n    if (arg4 == NULL) {\n        iVar3 = 5;\n    }\n    else {\n        iVar2 = -1;\n        do {\n            iVar3 = iVar2;\n            iVar2 = iVar3 + 1;\n        } while (arg4[iVar2] != '\\0');\n        iVar3 = iVar3 + 2;\n    }\n    pcVar1 = \"NULL\";\n    if (arg4 != NULL) {\n        pcVar1 = arg4;\n    }\n    (*_sym.imp.ADVAPI32.dll_TraceMessage)\n              (LoggerHandle, 0x2b, 0x140037758, noname_1, pcVar1, iVar3, &stack0x00000028, 4, 0);\n    return;\n}\n",
        "token_count": 215
    },
    "140008d4": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140008d44(code **arg1)\n\n{\n    *arg1 = vtable.FileDumper.0;\n    if (*(arg1 + 5) == '\\0') {\n        fcn.140008c04(arg1);\n    }\n    if (arg1[3] != 0xffffffffffffffff) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)();\n    }\n    if (arg1[2] != NULL) {\n        (**0x140031a58)();\n    }\n    if (arg1[1] != NULL) {\n        fcn.1400187b4(arg1[1]);\n    }\n    return;\n}\n",
        "token_count": 139
    },
    "14000a50": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_8h\n// WARNING: Variable defined which should be unmapped: var_bp_10h\n// WARNING: Variable defined which should be unmapped: var_bp_18h\n// WARNING: Variable defined which should be unmapped: hModule\n\nvoid fcn.14000a508(int64_t arg1, ulong arg2)\n\n{\n    int64_t arg1_00;\n    int64_t iVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int64_t iVar4;\n    int64_t *arg4;\n    uchar auStack152 [32];\n    ulong uStack120;\n    ulong uStack112;\n    int64_t iStack104;\n    uint uStack96;\n    ulong *puStack88;\n    int64_t iStack72;\n    ulong uStack64;\n    uint uStack56;\n    uint64_t uStack48;\n    ulong hModule;\n    ulong var_bp_18h;\n    ulong var_bp_10h;\n    ulong var_8h;\n    \n    uStack48 = *0x14003ef38 ^ auStack152;\n    iStack72 = 0;\n    iVar2 = fcn.14000c2a8(&iStack72, L\"cabinet.dll\");\n    iVar1 = iStack72;\n    if ((((iVar2 < 0) || (iVar4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iStack72, \"FDICreate\"),  iVar4 == 0)) ||\n        (iVar4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar1, \"FDICopy\"),  iVar4 == 0)) ||\n       (iVar4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar1, \"FDIDestroy\"),  iVar4 == 0)) {\n        if (iVar1 != 0) {\n            (*_sym.imp.KERNEL32.dll_FreeLibrary)();\n        }\n    }\n    else if (iVar1 != 0) {\n        uStack64 = 0;\n        uStack56 = 0;\n        puStack88 = &uStack64;\n        uStack96 = 0;\n        iStack104 = 0x140009800;\n        uStack112 = 0x1400097c0;\n        uStack120 = 0x1400094e0;\n        iVar4 = (**0x140031a58)(0x140009470, fcn.140009480, 0x1400095e0, 0x140009490);\n        *(arg1 + 0x48) = arg2;\n        iStack72 = 0;\n        arg4 = arg1 + 0x20;\n        if (7 < *(arg1 + 0x38)) {\n            arg4 = *arg4;\n        }\n        uVar3 = fcn.14000e5d4(&iStack72, 0x140037750, \"UPDATEPAYLOAD\", arg4);\n        arg1_00 = iStack72;\n        if (uVar3 < 0) {\n            if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n                fcn.140001efc(*(*0x14003e208 + 0x10), 0x24, 0x140037758, uVar3);\n                arg1_00 = iStack72;\n            }\n        }\n        else {\n            uStack112 = 0;\n            uStack120 = 0x14000a7b0;\n            iStack104 = arg1;\n            (**0x140031a58)(iVar4, iStack72, 0x1400373c1, 0);\n            if (iVar4 != 0) {\n                (**0x140031a58)(iVar4);\n            }\n        }\n        if (arg1_00 != 0) {\n            fcn.1400187b4(arg1_00);\n        }\n        *(arg1 + 0x48) = 0;\n        (*_sym.imp.KERNEL32.dll_FreeLibrary)(iVar1);\n        goto code_r0x00014000a77a;\n    }\n    (*_sym.imp.KERNEL32.dll_GetLastError)();\ncode_r0x00014000a77a:\n    fcn.140018790(uStack48 ^ auStack152);\n    return;\n}\n",
        "token_count": 953
    },
    "14000ab1": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.14000ab14(int64_t *arg1, char16_t *arg2)\n\n{\n    int64_t *arg3;\n    int32_t *arg3_00;\n    int64_t *arg3_01;\n    ushort uVar1;\n    code *pcVar2;\n    uchar uVar3;\n    int32_t iVar4;\n    int64_t iVar5;\n    uchar *puVar6;\n    uchar auStack120 [8];\n    uchar auStack112 [40];\n    int64_t iStack72;\n    uint uStack64;\n    uint uStack60;\n    uint64_t uStack56;\n    \n    puVar6 = &stack0xffffffffffffff88;\n    uStack56 = *0x14003ef38 ^ &stack0xffffffffffffff88;\n    iVar5 = *arg2;\n    *arg2 = 0;\n    *arg1 = iVar5;\n    arg1[1] = *(arg2 + 8);\n    *(arg2 + 8) = 0;\n    arg1[2] = *(arg2 + 0x10);\n    *(arg2 + 0x10) = 0;\n    arg1[3] = *(arg2 + 0x18);\n    *(arg2 + 0x18) = 0;\n    arg1[4] = *(arg2 + 0x20);\n    *(arg2 + 0x20) = 0;\n    *(arg1 + 5) = *(arg2 + 0x28);\n    *(arg1 + 0x29) = *(arg2 + 0x29);\n    *(arg1 + 0x2a) = *(arg2 + 0x2a);\n    *(arg1 + 0x2b) = *(arg2 + 0x2b);\n    uVar3 = fcn.14000ae1c();\n    *(arg1 + 0x2c) = uVar3;\n    arg3 = arg1 + 7;\n    arg3_00 = arg1 + 0x34;\n    arg3_01 = arg1 + 6;\n    *arg3_01 = -1;\n    *arg3_00 = -1;\n    *arg3 = -1;\n    iStack72 = 0;\n    iVar4 = fcn.14000f180(&stack0xffffffffffffffb8, arg2, L\"Software\\\\Microsoft\\\\Windows Defender\\\\MpEngine\", 0x20019);\n    iVar5 = iStack72;\n    if (-1 < iVar4) {\n        fcn.14000f5bc(iStack72, L\"MpEngineRing\", arg3_01);\n        fcn.14000f5bc(iVar5, L\"MpCampRing\", arg3_00);\n        arg2 = L\"MpSignatureRing\";\n        fcn.14000f5bc(iVar5, L\"MpSignatureRing\", arg3);\n    }\n    if (((*arg3_01 == -1) && (*arg3_00 == -1)) && (*arg3 == -1)) {\n        if (iVar5 != 0) {\n            (*_sym.imp.ADVAPI32.dll_RegCloseKey)(iVar5);\n            iStack72 = 0;\n        }\n        iVar4 = fcn.14000f180(&stack0xffffffffffffffb8, arg2, L\"Software\\\\Microsoft\\\\Microsoft Antimalware\\\\MpEngine\", \n                              0x20019);\n        iVar5 = iStack72;\n        if (-1 < iVar4) {\n            fcn.14000f5bc(iStack72, L\"MpEngineRing\", arg3_01);\n            fcn.14000f5bc(iVar5, L\"MpCampRing\", arg3_00);\n            fcn.14000f5bc(iVar5, L\"MpSignatureRing\", arg3);\n        }\n    }\n    if (iVar5 != 0) {\n        (*_sym.imp.ADVAPI32.dll_RegCloseKey)(iVar5);\n    }\n    if (*arg1 == 0) {\n        iStack72 = *(*0x14003e248 + -8);\n        uStack64 = *(*0x14003e248 + -4);\n        uStack60 = *(*0x14003e248 + -2);\n        puVar6 = &stack0xffffffffffffff88;\n        if (*0x14003e260 != 0) {\n            pcVar2 = swi(0x29);\n            (*pcVar2)(5);\n            puVar6 = &stack0xffffffffffffff90;\n        }\n        *0x14003e268 = 0;\n        *0x14003e270 = 0;\n        *(puVar6 + -8) = 0x14000ad0e;\n        iVar4 = (*_sym.imp.ADVAPI32.dll_EventRegister)(puVar6 + 0x30, 0x140001cd0, 0x14003e240, 0x14003e260);\n        if ((iVar4 == 0) && (*0x140040738 != 0)) {\n            uVar1 = **0x14003e248;\n            *(puVar6 + -8) = 0x14000ad45;\n            (**0x140031a58)(*0x14003e260, 2, *0x14003e248, uVar1);\n        }\n    }\n    else {\n        (**0x140031a58)(*arg1, 0x14003e240);\n    }\n    *(puVar6 + -8) = 0x14000ad55;\n    fcn.140018790(*(puVar6 + 0x40) ^ puVar6);\n    return;\n}\n",
        "token_count": 1230
    },
    "14000ae1": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint32_t fcn.14000ae1c(ulong param_1, ulong param_2)\n\n{\n    uint32_t uVar1;\n    bool bVar2;\n    int32_t aiStackX8 [2];\n    int64_t aiStackX16 [3];\n    \n    aiStackX16[0] = 0;\n    uVar1 = fcn.14000f180(aiStackX16, param_2, L\"Software\\\\Microsoft\\\\Windows Defender\\\\Features\", 0x20019);\n    if (-1 < uVar1) {\n        aiStackX8[0] = 0;\n        uVar1 = fcn.14000f5bc(aiStackX16[0], L\"SenseEnabled\", aiStackX8);\n        if (-1 < uVar1) {\n            bVar2 = aiStackX8[0] != 0;\n            if (aiStackX16[0] != 0) {\n                uVar1 = (*_sym.imp.ADVAPI32.dll_RegCloseKey)(aiStackX16[0]);\n            }\n            return uVar1 & 0xffffff00 | bVar2;\n        }\n    }\n    if (aiStackX16[0] != 0) {\n        uVar1 = (*_sym.imp.ADVAPI32.dll_RegCloseKey)(aiStackX16[0]);\n    }\n    return uVar1 & 0xffffff00;\n}\n",
        "token_count": 304
    },
    "14000b20": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.14000b20c(ulong LoggerHandle, ulong arg2, ulong noname_2, char *arg4)\n\n{\n    char *pcVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    \n    if (arg4 == NULL) {\n        iVar3 = 5;\n    }\n    else {\n        iVar2 = -1;\n        do {\n            iVar3 = iVar2;\n            iVar2 = iVar3 + 1;\n        } while (arg4[iVar2] != '\\0');\n        iVar3 = iVar3 + 2;\n    }\n    pcVar1 = \"NULL\";\n    if (arg4 != NULL) {\n        pcVar1 = arg4;\n    }\n    (*_sym.imp.ADVAPI32.dll_TraceMessage)(LoggerHandle, 0x2b, 0x140037ab8, 0x1d, pcVar1, iVar3, &stack0x00000028, 4, 0);\n    return;\n}\n",
        "token_count": 215
    },
    "14000b34": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nint32_t fcn.14000b340(int64_t *arg1, ulong lpFileName, ulong dwDesiredAccess, ulong dwShareMode)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    ulong noname_1;\n    \n    *arg1 = -1;\n    iVar2 = (*_sym.imp.KERNEL32.dll_CreateFileW)(lpFileName, dwDesiredAccess, dwShareMode, 0);\n    *arg1 = iVar2;\n    if (iVar2 == -1) {\n        iVar1 = fcn.14000e908();\n        if (iVar1 + 0x7ff8fffeU < 2) {\n            if (*0x14003e208 == 0x14003e208) {\n                return iVar1;\n            }\n            if ((*(*0x14003e208 + 0x1c) & 4) == 0) {\n                return iVar1;\n            }\n            noname_1 = 0xf;\n        }\n        else {\n            if (*0x14003e208 == 0x14003e208) {\n                return iVar1;\n            }\n            if ((*(*0x14003e208 + 0x1c) & 1) == 0) {\n                return iVar1;\n            }\n            noname_1 = 0x10;\n        }\n        fcn.14000b148(*(*0x14003e208 + 0x10), noname_1, 0x140037ab8, lpFileName);\n    }\n    else {\n        iVar1 = 0;\n    }\n    return iVar1;\n}\n",
        "token_count": 349
    },
    "14000b7b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nint32_t fcn.14000b7b4(int32_t *arg1, ulong lpFileName)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = (*_sym.imp.KERNEL32.dll_GetFileAttributesW)();\n    if (iVar1 == -1) {\n        iVar1 = fcn.14000e908();\n        if (((1 < iVar1 + 0x7ff8fffeU) && (*0x14003e208 != 0x14003e208)) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n            fcn.14000b148(*(*0x14003e208 + 0x10), 0x1e, 0x140037ab8, lpFileName);\n        }\n    }\n    else {\n        *arg1 = iVar1;\n        iVar1 = 0;\n    }\n    return iVar1;\n}\n",
        "token_count": 201
    },
    "14000bbb": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nint32_t fcn.14000bbb0(ulong arg1)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = (*_sym.imp.KERNEL32.dll_DeleteFileW)();\n    if (iVar1 == 0) {\n        iVar1 = fcn.14000e908();\n        if (((1 < iVar1 + 0x7ff8fffeU) && (*0x14003e208 != 0x14003e208)) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n            fcn.14000b148(*(*0x14003e208 + 0x10), 0x25, 0x140037ab8, arg1);\n        }\n    }\n    else {\n        iVar1 = 0;\n    }\n    return iVar1;\n}\n",
        "token_count": 183
    },
    "14000c9e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nint32_t fcn.14000c9e4(ulong arg1)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = (*_sym.imp.KERNEL32.dll_RemoveDirectoryW)();\n    if (iVar1 == 0) {\n        iVar1 = fcn.14000e908();\n        if (((1 < iVar1 + 0x7ff8fffeU) && (*0x14003e208 != 0x14003e208)) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n            fcn.14000b148(*(*0x14003e208 + 0x10), 0x1e, 0x140037b40, arg1);\n        }\n    }\n    else {\n        iVar1 = 0;\n    }\n    return iVar1;\n}\n",
        "token_count": 186
    },
    "14000d78": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_bp_10h\n// WARNING: Variable defined which should be unmapped: var_bp_18h\n// WARNING: Variable defined which should be unmapped: var_bp_20h\n\nuint64_t fcn.14000d788(float *arg1, int64_t arg2)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int64_t **ppiVar3;\n    int64_t iVar4;\n    code *pcVar5;\n    int64_t iVar6;\n    uint64_t uVar7;\n    uint64_t uVar8;\n    int64_t *piVar9;\n    uint *puVar10;\n    int64_t *piVar11;\n    uint8_t uVar12;\n    int64_t iVar13;\n    int64_t iVar14;\n    float fVar15;\n    float fVar16;\n    ulong var_30h;\n    int64_t iStack104;\n    int64_t iStack96;\n    uint uStack88;\n    uint uStack84;\n    uint uStack80;\n    uint uStack76;\n    float *var_40h;\n    int64_t *var_38h;\n    ulong var_30h_2;\n    ulong var_28h;\n    ulong var_bp_20h;\n    ulong var_bp_18h;\n    ulong var_bp_10h;\n    \n    if (arg2 != 0) {\n        LOCK();\n        *(arg2 + 8) = *(arg2 + 8) + 1;\n    }\n    piVar11 = arg2 + 0x10;\n    if (7 < *(arg2 + 0x28)) {\n        piVar11 = *piVar11;\n    }\n    if (arg2 != 0) {\n        LOCK();\n        *(arg2 + 8) = *(arg2 + 8) + 1;\n    }\n    iStack104 = piVar11;\n    iStack96 = arg2;\n    uVar7 = fcn.14000df7c(arg1, &iStack104);\n    uVar8 = fcn.14000dff8(arg1, &uStack88, &iStack104, uVar7);\n    if (CONCAT44(uStack76, uStack80) != 0) {\n        uVar12 = 0;\n        iVar14 = arg2;\n        goto code_r0x00014000d92a;\n    }\n    if (*(arg1 + 4) == 0x7ffffffffffffff) {\n        fcn.140010890(\"unordered_map/set too long\");\n        pcVar5 = swi(3);\n        uVar8 = (*pcVar5)();\n        return uVar8;\n    }\n    var_40h = arg1 + 2;\n    var_38h = NULL;\n    piVar9 = fcn.1400187f8(0x20);\n    piVar9[2] = piVar11;\n    iVar14 = 0;\n    iStack96 = 0;\n    piVar9[3] = arg2;\n    iVar13 = *(arg1 + 4);\n    uVar8 = iVar13 + 1;\n    if (uVar8 < 0) {\n        fVar15 = uVar8 >> 1 | uVar8 & 1;\n        fVar15 = fVar15 + fVar15;\n    }\n    else {\n        fVar15 = uVar8;\n    }\n    uVar8 = *(arg1 + 0xe);\n    if (uVar8 < 0) {\n        fVar16 = uVar8 >> 1 | uVar8 & 1;\n        fVar16 = fVar16 + fVar16;\n    }\n    else {\n        fVar16 = uVar8;\n    }\n    var_38h = piVar9;\n    if (*arg1 <= fVar15 / fVar16 && fVar15 / fVar16 != *arg1) {\n        fcn.14000dbdc(arg1);\n        puVar10 = fcn.14000dff8(arg1, &var_30h_2, piVar9 + 2, uVar7);\n        uStack88 = *puVar10;\n        uStack84 = puVar10[1];\n        uStack80 = puVar10[2];\n        uStack76 = puVar10[3];\n        iVar13 = *(arg1 + 4);\n    }\n    iVar6 = CONCAT44(uStack84, uStack88);\n    ppiVar3 = *(iVar6 + 8);\n    *(arg1 + 4) = iVar13 + 1;\n    *piVar9 = iVar6;\n    piVar9[1] = ppiVar3;\n    *ppiVar3 = piVar9;\n    *(iVar6 + 8) = piVar9;\n    iVar13 = *(arg1 + 6);\n    uVar7 = *(arg1 + 0xc) & uVar7;\n    uVar8 = uVar7 * 2;\n    iVar4 = *(iVar13 + uVar7 * 0x10);\n    if (iVar4 == *(arg1 + 2)) {\n        *(iVar13 + uVar7 * 0x10) = piVar9;\ncode_r0x00014000d922:\n        *(iVar13 + 8 + uVar7 * 0x10) = piVar9;\n    }\n    else if (iVar4 == iVar6) {\n        *(iVar13 + uVar7 * 0x10) = piVar9;\n    }\n    else if (*(iVar13 + 8 + uVar7 * 0x10) == ppiVar3) goto code_r0x00014000d922;\n    uVar12 = 1;\ncode_r0x00014000d92a:\n    if (iVar14 != 0) {\n        LOCK();\n        piVar1 = iVar14 + 8;\n        iVar2 = *piVar1;\n        *piVar1 = *piVar1 + -1;\n        uVar8 = iVar2 - 1U;\n        if (iVar2 - 1U < 1) {\n            uVar8 = (**0x140031a58)(iStack96, 1);\n        }\n    }\n    if (arg2 != 0) {\n        LOCK();\n        piVar1 = arg2 + 8;\n        iVar2 = *piVar1;\n        *piVar1 = *piVar1 + -1;\n        if (iVar2 + -1 < 1) {\n            uVar8 = (**0x140031a58)(arg2, 1);\n        }\n    }\n    return uVar8 & 0xffffffffffffff00 | uVar12;\n}\n",
        "token_count": 1450
    },
    "14000e94": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint64_t fcn.14000e94c(int16_t *arg1, int16_t **arg2, ulong arg3)\n\n{\n    int16_t iVar1;\n    bool bVar2;\n    uint64_t uVar3;\n    uint64_t uVar4;\n    uint64_t uVar5;\n    uint64_t uVar6;\n    uint64_t uVar7;\n    \n    uVar7 = 0;\n    *arg2 = NULL;\n    bVar2 = false;\n    uVar4 = 0;\n    if (((*arg1 == 0x2f) || (uVar5 = uVar7,  *arg1 == 0x5c)) && ((uVar5 = uVar4,  arg1[1] == 0x2f || (arg1[1] == 0x5c)))\n       ) {\n        iVar1 = arg1[2];\n        if (iVar1 == 0x2e) {\n            if ((arg1[3] != 0x2f) && (arg1[3] != 0x5c)) goto code_r0x00014000ea70;\n            uVar5 = 4;\n        }\n        else {\n            if (iVar1 == 0x3f) {\n                if ((arg1[3] != 0x2f) && (arg1[3] != 0x5c)) goto code_r0x00014000ea70;\n                iVar1 = arg1[4];\n                if ((((iVar1 - 0x55U & 0xffdf) != 0) || ((arg1[5] - 0x4eU & 0xffdf) != 0)) ||\n                   ((arg1[6] - 0x43U & 0xffdf) != 0)) {\n                    if ((0x19 < iVar1 - 0x61U) && (0x19 < iVar1 - 0x41U)) {\n                        return 0x80070002;\n                    }\n                    if (arg1[5] != 0x3a) {\n                        return 0x80070002;\n                    }\n                    uVar5 = 4;\n                    if ((arg1[6] != 0x2f) && (arg1[6] != 0x5c)) {\n                        return 0x80070002;\n                    }\n                    goto code_r0x00014000ea78;\n                }\n                if ((arg1[7] != 0x2f) && (arg1[7] != 0x5c)) {\n                    return 0x80070002;\n                }\n                uVar5 = 8;\n            }\n            else {\n                if ((iVar1 == 0x2f) || (iVar1 == 0x5c)) goto code_r0x00014000ea78;\ncode_r0x00014000ea70:\n                uVar5 = 2;\n            }\n            bVar2 = true;\n        }\n    }\ncode_r0x00014000ea78:\n    iVar1 = arg1[uVar5];\n    uVar4 = uVar5;\n    uVar6 = uVar5;\n    while (iVar1 != 0) {\n        uVar3 = uVar4;\n        if ((arg1[uVar4] == 0x2f) || (arg1[uVar4] == 0x5c)) {\n            do {\n                do {\n                    uVar4 = uVar3;\n                    uVar6 = uVar4 + 1;\n                    uVar3 = uVar6;\n                } while (arg1[uVar6] == 0x2f);\n            } while (arg1[uVar6] == 0x5c);\ncode_r0x00014000eae2:\n            uVar7 = uVar7 + 1;\n        }\n        else if (arg1[uVar4] == 0x3a) {\n            if (uVar4 - uVar5 == 1) {\n                do {\n                    do {\n                        uVar4 = uVar3;\n                        uVar6 = uVar4 + 1;\n                        uVar3 = uVar6;\n                    } while (arg1[uVar6] == 0x2f);\n                } while (arg1[uVar6] == 0x5c);\n                goto code_r0x00014000eae2;\n            }\n            if ((arg1[uVar4 + 1] == 0x2f) && (arg1[uVar4 + 2] == 0x2f)) {\n                return 0x80004001;\n            }\n            break;\n        }\n        uVar4 = uVar4 + 1;\n        iVar1 = arg1[uVar4];\n    }\n    uVar5 = uVar4 - uVar6;\n    if ((bVar2) && (uVar7 < 2)) {\n        return 0x80070002;\n    }\n    if (uVar5 < 3) {\n        if (uVar5 != 1) {\n            if (uVar5 != 2) {\n                return 0x80070002;\n            }\n            if (arg1[uVar6 + 1] != 0x2e) goto code_r0x00014000eb53;\n        }\n        if (arg1[uVar6] == 0x2e) {\n            return 0x80070002;\n        }\n    }\ncode_r0x00014000eb53:\n    *arg2 = arg1 + uVar6;\n    return arg1[uVar4] != 0;\n}\n",
        "token_count": 1209
    },
    "14000ee5": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t fcn.14000ee5c(uchar *arg1, uint64_t arg2)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    int64_t iStackX8;\n    uint64_t uStackX16;\n    ulong in_stack_ffffffffffffffc0;\n    ulong in_stack_ffffffffffffffc8;\n    \n    iStackX8 = 0;\n    *arg1 = 0;\n    uStackX16 = arg2;\n    uVar1 = fcn.14000ec0c(&iStackX8, 2, 0x20, 0x220, 0, in_stack_ffffffffffffffc0, in_stack_ffffffffffffffc8);\n    if (-1 < uVar1) {\n        uStackX16 = uStackX16 & 0xffffffff00000000;\n        *arg1 = 0;\n        iVar2 = (*_sym.imp.ADVAPI32.dll_CheckTokenMembership)(0, iStackX8, &uStackX16);\n        if (iVar2 == 0) {\n            uVar1 = fcn.14000e908();\n            if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n                fcn.140001efc(*(*0x14003e208 + 0x10), 0x1a, 0x140037f20, uVar1);\n            }\n        }\n        else {\n            uVar1 = 0;\n            *arg1 = uStackX16 != 0;\n        }\n    }\n    if (iStackX8 != 0) {\n        fcn.140009480(iStackX8);\n    }\n    return uVar1;\n}\n",
        "token_count": 403
    },
    "14000f18": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nuint32_t fcn.14000f180(int64_t *arg1, ulong arg2, ulong lpSubKey, ulong samDesired)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    int64_t iStackX16;\n    \n    *arg1 = 0;\n    iStackX16 = 0;\n    uVar1 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyExW)(0xffffffff80000002, lpSubKey, 0, samDesired, &iStackX16);\n    if (uVar1 == 2) {\n        if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 4) != 0)) {\n            fcn.140006544(*(*0x14003e208 + 0x10), 10, 0x140037f30, lpSubKey);\n        }\n        if (iStackX16 != 0) {\n            (*_sym.imp.ADVAPI32.dll_RegCloseKey)();\n        }\n        uVar1 = 0x80070002;\n    }\n    else {\n        if (uVar1 != 0) {\n            if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n                fcn.140001e64(*(*0x14003e208 + 0x10), 0xb, 0x140037f30, lpSubKey);\n            }\n            uVar2 = uVar1 & 0xffff | 0x80070000;\n            if (uVar1 < 1) {\n                uVar2 = uVar1;\n            }\n            if (uVar2 < 0) {\n                if (iStackX16 == 0) {\n                    return uVar2;\n                }\n                (*_sym.imp.ADVAPI32.dll_RegCloseKey)();\n                return uVar2;\n            }\n        }\n        if (iStackX16 == 0) {\n            uVar1 = 0x8000ffff;\n        }\n        else {\n            *arg1 = iStackX16;\n            uVar1 = 0;\n        }\n    }\n    return uVar1;\n}\n",
        "token_count": 505
    },
    "14000f29": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nuint32_t fcn.14000f290(int64_t *arg1, ulong noname_1, ulong arg3, ulong arg4)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    int64_t iStackX24;\n    int32_t aiStackX32 [2];\n    \n    *arg1 = 0;\n    aiStackX32[0] = 0;\n    iStackX24 = 0;\n    uVar1 = (*_sym.imp.ADVAPI32.dll_RegCreateKeyExW)\n                      (0xffffffff80000002, L\"SOFTWARE\\\\Microsoft\\\\MpSigStub\", 0, 0, 0, 2, 0, &iStackX24, aiStackX32);\n    if (uVar1 != 0) {\n        if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n            fcn.140001e64(*(*0x14003e208 + 0x10), 0xc, 0x140037f30, L\"SOFTWARE\\\\Microsoft\\\\MpSigStub\");\n        }\n        uVar2 = uVar1 & 0xffff | 0x80070000;\n        if (uVar1 < 1) {\n            uVar2 = uVar1;\n        }\n        if (uVar2 < 0) {\n            if (iStackX24 == 0) {\n                return uVar2;\n            }\n            (*_sym.imp.ADVAPI32.dll_RegCloseKey)();\n            return uVar2;\n        }\n    }\n    if (iStackX24 == 0) {\n        uVar1 = 0x8000ffff;\n    }\n    else {\n        *arg1 = iStackX24;\n        uVar1 = aiStackX32[0] == 2;\n    }\n    return uVar1;\n}\n",
        "token_count": 424
    },
    "14000f38": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint fcn.14000f38c(ulong arg1, uint64_t arg2, ulong arg3, ulong *arg4)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int64_t in_stack_00000028;\n    \n    if (in_stack_00000028 == 0) {\ncode_r0x00014000f3af:\n        uVar3 = 0;\n    }\n    else {\n        if (arg3 - 1 < 2) {\n            iVar1 = fcn.14000fa50(arg2 >> 1, in_stack_00000028, arg4);\ncode_r0x00014000f3ec:\n            if (iVar1 == 0) {\n                return 0;\n            }\n            if (iVar1 == -0x7ff8ff16) {\n                return 0x800700ea;\n            }\n            iVar2 = 0;\n            if (iVar1 == -0x7ff8ec61) {\n                iVar2 = iVar1;\n            }\n            if (iVar2 != -0x7ff8ec61) goto code_r0x00014000f40b;\n        }\n        else {\n            if (arg3 == 7) {\n                iVar1 = fcn.14000fb64(arg2 >> 1, in_stack_00000028, arg4);\n                goto code_r0x00014000f3ec;\n            }\ncode_r0x00014000f40b:\n            iVar1 = fcn.14000f744(arg3, *arg4, in_stack_00000028);\n            if (iVar1 != 0) goto code_r0x00014000f3af;\n        }\n        if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n            fcn.140006544(*(*0x14003e208 + 0x10), 0x17, 0x140037f30, arg1);\n        }\n        uVar3 = 0x8007139f;\n    }\n    return uVar3;\n}\n",
        "token_count": 475
    },
    "14000f74": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nulong fcn.14000f744(ulong arg1, uint64_t arg2, int64_t arg3)\n\n{\n    char cVar1;\n    int64_t iVar2;\n    ulong noname_1;\n    int64_t iVar3;\n    \n    if ((arg2 & 0xffffffff) != arg2) {\n        if (*0x14003e208 == 0x14003e208) {\n            return 0;\n        }\n        if ((*(*0x14003e208 + 0x1c) & 1) == 0) {\n            return 0;\n        }\n        noname_1 = 0x2e;\n        goto code_r0x00014000f9bc;\n    }\n    if (arg3 == 0) {\n        if (arg1 != 3) {\n            if (*0x14003e208 == 0x14003e208) {\n                return 0;\n            }\n            if ((*(*0x14003e208 + 0x1c) & 1) == 0) {\n                return 0;\n            }\n            noname_1 = 0x2f;\n            goto code_r0x00014000f9bc;\n        }\n    }\n    else {\n        if (arg1 == 0) {\n            return 1;\n        }\n        if (arg1 < 3) {\n            cVar1 = fcn.14000f69c(arg2, arg3);\n            if (cVar1 == '\\0') {\n                if (*0x14003e208 == 0x14003e208) {\n                    return 0;\n                }\n                if ((*(*0x14003e208 + 0x1c) & 1) == 0) {\n                    return 0;\n                }\n                noname_1 = 0x31;\n            }\n            else {\n                if (arg2 >> 1 == 0) {\n                    return 0;\n                }\n                if (*(arg3 + -2 + (arg2 & 0xfffffffffffffffe)) == 0) {\n                    iVar2 = -1;\n                    do {\n                        iVar3 = iVar2;\n                        iVar2 = iVar3 + 1;\n                    } while (*(arg3 + iVar2 * 2) != 0);\n                    if (iVar3 + 2U == arg2 >> 1) {\n                        return 1;\n                    }\n                    if (*0x14003e208 == 0x14003e208) {\n                        return 0;\n                    }\n                    if ((*(*0x14003e208 + 0x1c) & 1) == 0) {\n                        return 0;\n                    }\n                    noname_1 = 0x2b;\n                }\n                else {\n                    if (*0x14003e208 == 0x14003e208) {\n                        return 0;\n                    }\n                    if ((*(*0x14003e208 + 0x1c) & 1) == 0) {\n                        return 0;\n                    }\n                    noname_1 = 0x2a;\n                }\n            }\n            goto code_r0x00014000f9bc;\n        }\n        if (arg1 != 3) {\n            if (arg1 < 4) {\n                return 1;\n            }\n            if (arg1 < 6) {\n                if (arg2 == 4) {\n                    return 1;\n                }\n                if (*0x14003e208 == 0x14003e208) {\n                    return 0;\n                }\n                if ((*(*0x14003e208 + 0x1c) & 1) == 0) {\n                    return 0;\n                }\n                fcn.14000f10c(*(*0x14003e208 + 0x10), 0x30, 0x140037f30, arg2);\n                return 0;\n            }\n            if (arg1 != 7) {\n                return 1;\n            }\n            cVar1 = fcn.14000f69c(arg2, arg3);\n            if (cVar1 == '\\0') {\n                if (*0x14003e208 == 0x14003e208) {\n                    return 0;\n                }\n                if ((*(*0x14003e208 + 0x1c) & 1) == 0) {\n                    return 0;\n                }\n                noname_1 = 0x32;\n            }\n            else {\n                if (arg2 >> 1 == 0) {\n                    return 0;\n                }\n                if (*(arg3 + -2 + (arg2 & 0xfffffffffffffffe)) == 0) {\n                    if (arg2 >> 1 == 1) {\n                        return 1;\n                    }\n                    if (*(arg3 + -4 + (arg2 & 0xfffffffffffffffe)) == 0) {\n                        return 1;\n                    }\n                    if (*0x14003e208 == 0x14003e208) {\n                        return 0;\n                    }\n                    if ((*(*0x14003e208 + 0x1c) & 1) == 0) {\n                        return 0;\n                    }\n                    noname_1 = 0x2d;\n                }\n                else {\n                    if (*0x14003e208 == 0x14003e208) {\n                        return 0;\n                    }\n                    if ((*(*0x14003e208 + 0x1c) & 1) == 0) {\n                        return 0;\n                    }\n                    noname_1 = 0x2c;\n                }\n            }\n            goto code_r0x00014000f9bc;\n        }\n    }\n    if ((arg3 != 0) || (arg2 == 0)) {\n        return 1;\n    }\n    if (*0x14003e208 == 0x14003e208) {\n        return 0;\n    }\n    if ((*(*0x14003e208 + 0x1c) & 1) == 0) {\n        return 0;\n    }\n    noname_1 = 0x33;\ncode_r0x00014000f9bc:\n    fcn.1400084d4(*(*0x14003e208 + 0x10), noname_1, 0x140037f30);\n    return 0;\n}\n",
        "token_count": 1369
    },
    "14000f9e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.14000f9e8(int64_t arg1, int64_t *arg2)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = -1;\n    do {\n        iVar1 = iVar1 + 1;\n    } while (*(arg1 + iVar1 * 2) != 0);\n    iVar1 = iVar1 * 2 + 2;\n    if (*arg2 != iVar1) {\n        if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n            fcn.1400084d4(*(*0x14003e208 + 0x10), 0x34, 0x140037f30);\n        }\n        *arg2 = iVar1;\n    }\n    return 0;\n}\n",
        "token_count": 190
    },
    "14000fb6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nulong fcn.14000fb64(uint64_t arg1, int16_t *arg2, uint64_t *arg3)\n\n{\n    uint64_t uVar1;\n    ulong uVar2;\n    int64_t iVar3;\n    uint64_t uVar4;\n    \n    uVar1 = *arg3;\n    iVar3 = *0x14003e208;\n    if ((uVar1 & 1) != 0) {\n        if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n            fcn.14000f10c(*(*0x14003e208 + 0x10), 0x38, 0x140037f30, uVar1);\n            uVar1 = *arg3;\n        }\n        iVar3 = *0x14003e208;\n        uVar1 = uVar1 - 1;\n        *arg3 = uVar1;\n    }\n    uVar4 = uVar1 >> 1;\n    if (uVar4 < 2) {\n        if (uVar4 == 1) {\n            if (*arg2 == 0) goto code_r0x00014000fc10;\ncode_r0x00014000fc34:\n            if (*(arg2 + ((uVar1 & 0xfffffffffffffffe) - 2)) != 0) goto code_r0x00014000fc75;\n            if (uVar4 < arg1) {\n                uVar4 = uVar1;\n                if ((iVar3 != 0x14003e208) && ((*(iVar3 + 0x1c) & 1) != 0)) {\n                    fcn.1400084d4(*(iVar3 + 0x10), 0x39, 0x140037f30);\n                    uVar4 = *arg3;\n                }\n                *(arg2 + (uVar1 & 0xfffffffffffffffe)) = 0;\n                uVar1 = uVar4 + 2;\n                goto code_r0x00014000fc01;\n            }\n            uVar1 = uVar1 + 2;\ncode_r0x00014000fcd6:\n            *arg3 = uVar1;\n        }\n        else {\n            if (uVar4 != 0) goto code_r0x00014000fc34;\n            *arg3 = 2;\n            if (arg1 != 0) {\n                *arg2 = 0;\n                goto code_r0x00014000fc10;\n            }\n        }\n        uVar2 = 0x800700ea;\n    }\n    else {\n        if (*(arg2 + ((uVar1 & 0xfffffffffffffffe) - 4)) != 0) goto code_r0x00014000fc34;\n        if (*(arg2 + ((uVar1 & 0xfffffffffffffffe) - 2)) == 0) {\n            if (uVar4 != 2) goto code_r0x00014000fc10;\n            uVar1 = uVar1 - 2;\n        }\n        else {\ncode_r0x00014000fc75:\n            if (arg1 <= uVar4 + 1) {\n                if ((iVar3 != 0x14003e208) && ((*(iVar3 + 0x1c) & 2) != 0)) {\n                    fcn.1400084d4(*(iVar3 + 0x10), 0x3b, 0x140037f30);\n                    uVar1 = *arg3;\n                }\n                uVar1 = uVar1 + 4;\n                goto code_r0x00014000fcd6;\n            }\n            uVar4 = uVar1;\n            if ((iVar3 != 0x14003e208) && ((*(iVar3 + 0x1c) & 1) != 0)) {\n                fcn.1400084d4(*(iVar3 + 0x10), 0x3a, 0x140037f30);\n                uVar4 = *arg3;\n            }\n            *(arg2 + (uVar1 & 0xfffffffffffffffe)) = 0;\n            uVar1 = uVar4 + 4;\n        }\ncode_r0x00014000fc01:\n        *arg3 = uVar1;\ncode_r0x00014000fc10:\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 981
    },
    "14001055": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t fcn.140010558(void)\n\n{\n    int32_t iVar1;\n    ulong *puVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    \n    if (*0x140040750 == '\\0') {\n        if (*0x14003e278 == 0x14003e278) {\n            iVar1 = 1;\n        }\n        else {\n            *0x140040750 = '\\x01';\n            for (puVar2 = *0x14003e278; (puVar2 != 0x14003e278 && (puVar2 != NULL)); puVar2 = *puVar2) {\n                (*_sym.imp.KERNEL32.dll_DecodePointer)(puVar2[2]);\n                iVar1 = (**0x140031a58)(puVar2);\n                if (iVar1 < 0) {\n                    iVar4 = puVar2[1];\n                    while( true ) {\n                        iVar3 = 0;\n                        if (iVar4 != 0x14003e278) {\n                            iVar3 = iVar4;\n                        }\n                        if (iVar3 == 0) break;\n                        (*_sym.imp.KERNEL32.dll_DecodePointer)(*(iVar3 + 0x18));\n                        (**0x140031a58)(iVar3);\n                        iVar4 = *(iVar4 + 8);\n                    }\n                    while (*0x14003e278 != 0x14003e278) {\n                        *0x14003e278 = **0x14003e278;\n                        (*0x14003e278)[1] = 0x14003e278;\n                    }\n                    *0x140040750 = 0;\n                    return iVar1;\n                }\n            }\n            iVar1 = 0;\n        }\n    }\n    else {\n        iVar1 = -0x7ff8ffa9;\n    }\n    return iVar1;\n}\n",
        "token_count": 406
    },
    "14001065": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140010654(void)\n\n{\n    int64_t *piVar1;\n    \n    if (*0x140040750 != '\\0') {\n        while (piVar1 = *0x14003e278,  *0x14003e278 != 0x14003e278) {\n            *0x14003e278 = **0x14003e278;\n            (*0x14003e278)[1] = 0x14003e278;\n            (*_sym.imp.KERNEL32.dll_DecodePointer)(piVar1[3]);\n            (**0x140031a58)(piVar1);\n        }\n        *0x140040750 = '\\0';\n    }\n    return;\n}\n",
        "token_count": 155
    },
    "140010dd": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.140010dd4(int64_t *arg1)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    ulong uVar5;\n    int64_t var_30h;\n    int64_t var_28h;\n    int64_t var_20h;\n    int64_t var_18h;\n    \n    if (*arg1 == 0) {\n        fcn.140010e68(&var_30h, 1);\n        if (var_30h == 0) {\n            fcn.140010d24(&var_30h);\n            uVar5 = 0x8007000e;\n        }\n        else {\n            iVar1 = *arg1;\n            *arg1 = var_30h;\n            iVar2 = arg1[1];\n            iVar3 = arg1[2];\n            arg1[1] = var_28h;\n            iVar4 = arg1[3];\n            arg1[2] = var_20h;\n            arg1[3] = var_18h;\n            var_30h = iVar1;\n            var_28h = iVar2;\n            var_20h = iVar3;\n            var_18h = iVar4;\n            fcn.140010d24(&var_30h);\n            uVar5 = 0;\n        }\n    }\n    else {\n        uVar5 = 0x80070057;\n    }\n    return uVar5;\n}\n",
        "token_count": 326
    },
    "140010e6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint64_t * fcn.140010e68(int64_t *arg1, uint64_t arg2)\n\n{\n    uint64_t uVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    uint64_t uVar4;\n    uint64_t *puVar5;\n    \n    *arg1 = 0;\n    puVar5 = 0x140037b50;\n    uVar1 = 0x69;\n    do {\n        uVar4 = uVar1 >> 1;\n        if (puVar5[uVar4] < arg2) {\n            puVar5 = puVar5 + uVar4 + 1;\n            uVar4 = uVar1 + (-1 - uVar4);\n        }\n        uVar1 = uVar4;\n    } while (0 < uVar4);\n    uVar1 = 0xfffffffb;\n    if (puVar5 != 0x140037e98) {\n        uVar1 = *puVar5;\n    }\n    arg1[2] = 0;\n    arg1[3] = 0;\n    arg1[1] = uVar1;\n    if (((arg2 == 0) || (0xaaaaaaaaaaaaaaa < uVar1)) || (fcn.14000ca54(arg1, uVar1 * 0x18),  *arg1 == 0)) {\n        arg1[1] = 0;\n    }\n    else {\n        uVar1 = 0;\n        if (arg1[1] != 0) {\n            iVar3 = 0;\n            do {\n                iVar2 = *arg1;\n                uVar1 = uVar1 + 1;\n                *(iVar3 + iVar2) = 0;\n                iVar2 = iVar2 + 8 + iVar3;\n                iVar3 = iVar3 + 0x18;\n                *(iVar2 + 8) = iVar2;\n                *iVar2 = iVar2;\n            } while (uVar1 < arg1[1]);\n        }\n    }\n    return arg1;\n}\n",
        "token_count": 445
    },
    "14001156": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.140011564(uint64_t param_1, ulong param_2)\n\n{\n    ulong arg1;\n    uint64_t uVar1;\n    char cVar2;\n    uint8_t uVar3;\n    char *pcVar4;\n    \n    arg1 = *0x1400406f0;\n    uVar3 = param_1 ^ 1;\n    uVar1 = param_1 & 0xff;\n    if (uVar3 != 0) {\n        if (uVar3 != 1) {\n            return;\n        }\n        if ((*0x140040758 & (param_1 ^ 1)) == 0) {\n            fcn.140013178(param_1 ^ 1, param_2);\n            *0x14003f1e0 = *0x14003f1e0 & 0xffffffdf | 0x10;\n            LOCK();\n            *0x140040758 = *0x140040758 | 1;\n            pcVar4 = \"v._master_2020-12-14T09:20:49-08:00_5b3acb1_2020-12-22T16:20:51\";\n            cVar2 = str.v._master_2020_12_14T09:20:49_08:00_5b3acb1_2020_12_22T16:20:51[0];\n            while (cVar2 != '\\0') {\n                pcVar4 = pcVar4 + 1;\n                cVar2 = *pcVar4;\n            }\n            *0x14004075c = ~*0x14003f1e0;\n        }\n        fcn.140011774(arg1);\n        uVar1 = *0x140040708;\n    }\n    *0x140040708 = uVar1;\n    *0x1400406f8 = arg1;\n    *0x140040700 = param_1 & 0xff;\n    return;\n}\n",
        "token_count": 433
    },
    "14001160": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t fcn.140011608(void)\n\n{\n    int32_t iVar1;\n    ulong noname_0;\n    ulong noname_1;\n    ulong arg3;\n    \n    *0x1400406f0 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)();\n    fcn.140011564();\n    iVar1 = fcn.1400116d0();\n    if (-1 < iVar1) {\n        arg3 = 0;\n        noname_0 = 0;\n        noname_1 = 1;\n        (*_sym.imp.KERNEL32.dll_HeapSetInformation)();\n        iVar1 = fcn.140010b6c(noname_0, noname_1, arg3);\n        if (-1 < iVar1) {\n            return 0;\n        }\n        if (*0x140040754 != 0) {\n            fcn.140011670();\n        }\n    }\n    fcn.140011564(1);\n    return iVar1;\n}\n",
        "token_count": 214
    },
    "1400116d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t fcn.1400116d0(void)\n\n{\n    int64_t iVar1;\n    int32_t iVar2;\n    int64_t aiStackX8 [4];\n    \n    if (*0x140040754 == 0) {\n        iVar2 = fcn.140010a54();\n        if (-1 < iVar2) {\n            aiStackX8[0] = 0;\n            iVar2 = fcn.140011510(aiStackX8);\n            iVar1 = aiStackX8[0];\n            if (iVar2 < 0) {\n                if (aiStackX8[0] != 0) {\n                    (**0x140031a58)(aiStackX8[0], 1);\n                }\n            }\n            else {\n                *(aiStackX8[0] + 0x14) = 0;\n                (*_sym.imp.KERNEL32.dll_InitializeCriticalSectionAndSpinCount)(aiStackX8[0] + 8, 0);\n                *0x140040754 = *0x140040754 | 2;\n                *0x1400406e8 = iVar1;\n                iVar2 = fcn.140010558();\n                if (-1 < iVar2) {\n                    *0x140040754 = *0x140040754 | 4;\n                    return 0;\n                }\n            }\n        }\n    }\n    else {\n        iVar2 = -0x7ff8ffa9;\n    }\n    fcn.140011670();\n    return iVar2;\n}\n",
        "token_count": 327
    },
    "14001177": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.140011774(int16_t *arg1)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    int32_t *piVar5;\n    uint64_t uVar6;\n    int64_t iVar7;\n    \n    if ((((arg1 == 0) && (*arg1 == 0x5a4d)) && ((*(arg1 + 0x1e) & 3) == 0)) &&\n       ((piVar5 = *(arg1 + 0x1e) + arg1,  *piVar5 == 0x4550 && (5 < piVar5[0x21])))) {\n        uVar1 = piVar5[0x14];\n        uVar2 = piVar5[0x2e];\n        if ((uVar2 - 1 < uVar1 - 1) && (uVar3 = piVar5[0x2f],  uVar3 <= uVar1 - uVar2)) {\n            uVar6 = uVar3 / 7;\n            uVar6 = (uVar3 - uVar6 >> 1) + uVar6 >> 4;\n            do {\n                if (uVar6 == 0) {\n                    return;\n                }\n                uVar6 = uVar6 - 1;\n                iVar7 = arg1 + uVar6 * 0x1c + uVar2;\n            } while (((*(iVar7 + 0xc) != 2) || (uVar1 <= *(iVar7 + 0x14))) ||\n                    (uVar3 = uVar1 - *(iVar7 + 0x14),  uVar3 <= *(iVar7 + 0x10) && *(iVar7 + 0x10) != uVar3));\n            iVar4 = (*_sym.imp.KERNEL32.dll_VirtualLock)(iVar7, 0x1c);\n            if (iVar4 != 0) {\n                (*_sym.imp.KERNEL32.dll_VirtualLock)(*(iVar7 + 0x14) + arg1, *(iVar7 + 0x10));\n            }\n        }\n    }\n    return;\n}\n",
        "token_count": 482
    },
    "14001340": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Possible PIC construction at 0x0001400134b8: Changing call to branch\n// WARNING: Removing unreachable block (ram,0x0001400134bd)\n\nint32_t fcn.14001340c(uint16_t *arg1, uint16_t *arg2)\n\n{\n    uint16_t uVar1;\n    uint16_t uVar2;\n    uint *puVar3;\n    uint32_t uVar4;\n    uint64_t uVar5;\n    int64_t iVar6;\n    int32_t iVar7;\n    uint32_t uVar8;\n    int64_t iStack56;\n    int64_t iStack48;\n    char cStack32;\n    \n    if (*0x14003f218 != 0) {\n        if ((arg1 == NULL) || (arg2 == NULL)) {\n            puVar3 = fcn.1400142cc();\n            *puVar3 = 0x16;\n            fcn.140014060();\n            iVar7 = 0x7fffffff;\n        }\n        else {\n            fcn.140013330(&stack0xffffffffffffffc8, 0);\n            iVar6 = iStack48;\n            if (*(iStack48 + 0x138) == 0) goto code_r0x0001400133d2;\n            do {\n                uVar1 = *arg1;\n                arg1 = arg1 + 1;\n                if (uVar1 < 0x100) {\n                    uVar5 = uVar1;\n                    if ((*(\n                          L\"         (((((                  H\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x10\\x10\\x10\\x10\\x10\\x10\\x10\u0181\u0181\u0181\u0181\u0181\u0181\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\\x10\\x10\\x10\\x10\\x10\\x10\u0182\u0182\u0182\u0182\u0182\u0182\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\\x10\\x10\\x10\\x10      (                          \\b\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\u0112\\x10\\x100\\x10\\x10\\x10\\x10\\x14\\x14\\x10\u0112\\x10\\x10\\x10\\x14\u0112\\x10\\x10\\x10\\x10\\x10\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\\x10\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\\x10\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0101\"\n                          + uVar5) & 1) != 0) {\n                        uVar5 = *(uVar5 + *(iVar6 + 0x110));\n                    }\n                    uVar1 = uVar5;\n                }\n                else {\n                    uVar1 = fcn.1400140f8(uVar1, &stack0xffffffffffffffd0);\n                    iVar6 = iStack48;\n                }\n                uVar2 = *arg2;\n                arg2 = arg2 + 1;\n                if (uVar2 < 0x100) {\n                    uVar5 = uVar2;\n                    if ((*(\n                          L\"         (((((                  H\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x10\\x10\\x10\\x10\\x10\\x10\\x10\u0181\u0181\u0181\u0181\u0181\u0181\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\\x10\\x10\\x10\\x10\\x10\\x10\u0182\u0182\u0182\u0182\u0182\u0182\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\\x10\\x10\\x10\\x10      (                          \\b\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\u0112\\x10\\x100\\x10\\x10\\x10\\x10\\x14\\x14\\x10\u0112\\x10\\x10\\x10\\x14\u0112\\x10\\x10\\x10\\x10\\x10\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\\x10\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\\x10\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0101\"\n                          + uVar5) & 1) != 0) {\n                        uVar5 = *(uVar5 + *(iVar6 + 0x110));\n                    }\n                    uVar2 = uVar5;\n                }\n                else {\n                    uVar2 = fcn.1400140f8(uVar2, &stack0xffffffffffffffd0);\n                    iVar6 = iStack48;\n                }\n                iVar7 = uVar1 - uVar2;\n            } while ((iVar7 == 0) && (uVar1 != 0));\n            if (cStack32 != '\\0') {\n                *(iStack56 + 0x3a8) = *(iStack56 + 0x3a8) & 0xfffffffd;\n            }\n        }\n        return iVar7;\n    }\n    if ((arg1 == NULL) || (arg2 == NULL)) {\n        iStack48 = 0x140013423;\n        puVar3 = fcn.1400142cc();\n        *puVar3 = 0x16;\n        iStack48 = 0x14001342e;\n        fcn.140014060();\n        return 0x7fffffff;\n    }\ncode_r0x0001400133d2:\n    do {\n        uVar1 = *arg1;\n        arg1 = arg1 + 1;\n        uVar2 = *arg2;\n        arg2 = arg2 + 1;\n        uVar8 = uVar1 + 0x20;\n        if (0x19 < uVar1 - 0x41) {\n            uVar8 = uVar1;\n        }\n        uVar4 = uVar2 + 0x20;\n        if (0x19 < uVar2 - 0x41) {\n            uVar4 = uVar2;\n        }\n    } while ((uVar8 - uVar4 == 0) && (uVar8 != 0));\n    return uVar8 - uVar4;\n}\n",
        "token_count": 1564
    },
    "14001363": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint64_t fcn.140013638(uchar (*arg1) [32], uint64_t arg2)\n\n{\n    uchar *puVar1;\n    uchar (*pauVar2) [32];\n    uint64_t uVar3;\n    uchar auVar4 [16];\n    uchar in_YMM1 [32];\n    uint8_t uVar5;\n    \n    pauVar2 = arg1;\n    if (*0x14003ef20 < 5) {\n        if (*0x14003ef20 < 1) {\n            if (arg1 != *arg1 + arg2) {\n                do {\n                    if ((*pauVar2)[0] == '\\0') break;\n                    pauVar2 = *pauVar2 + 1;\n                } while (pauVar2 != *arg1 + arg2);\n            }\n        }\n        else {\n            uVar3 = arg1 & 0xf;\n            uVar3 = -(uVar3 != 0) & 0x10 - uVar3;\n            if (arg2 < uVar3) {\n                uVar3 = arg2;\n            }\n            if (arg1 != *arg1 + uVar3) {\n                do {\n                    if ((*pauVar2)[0] == '\\0') break;\n                    pauVar2 = *pauVar2 + 1;\n                } while (pauVar2 != *arg1 + uVar3);\n            }\n            if (pauVar2 - arg1 != uVar3) {\n                return pauVar2 - arg1;\n            }\n            puVar1 = *pauVar2;\n            while ((pauVar2 != puVar1 + (arg2 - uVar3 & 0xfffffffffffffff0) &&\n                   (uVar5 = -((*pauVar2)[0xf] == '\\0'), \n                   auVar4 = CONCAT115(uVar5, CONCAT114(-((*pauVar2)[0xe] == '\\0'), \n                                                       CONCAT113(-((*pauVar2)[0xd] == '\\0'), \n                                                                 CONCAT112(-((*pauVar2)[0xc] == '\\0'), \n                                                                           CONCAT111(-((*pauVar2)[0xb] == '\\0'), \n                                                                                     CONCAT110(-((*pauVar2)[10] == '\\0')\n                                                                                               , CONCAT19(-((*pauVar2)\n                                                                                                            [9] == '\\0')\n                                                                                                          , CONCAT18(-((\n                                                            *pauVar2)[8] == '\\0'), \n                                                            CONCAT17(-((*pauVar2)[7] == '\\0'), \n                                                                     CONCAT16(-((*pauVar2)[6] == '\\0'), \n                                                                              CONCAT15(-((*pauVar2)[5] == '\\0'), \n                                                                                       CONCAT14(-((*pauVar2)[4] == '\\0')\n                                                                                                , CONCAT13(-((*pauVar2)\n                                                                                                             [3] == '\\0'\n                                                                                                            ), CONCAT12(\n                                                            -((*pauVar2)[2] == '\\0'), \n                                                            CONCAT11(-((*pauVar2)[1] == '\\0'), -((*pauVar2)[0] == '\\0'))\n                                                            )))))))))))))), \n                   (SUB161(auVar4 >> 7, 0) & 1 | (SUB161(auVar4 >> 0xf, 0) & 1) << 1 |\n                    (SUB161(auVar4 >> 0x17, 0) & 1) << 2 | (SUB161(auVar4 >> 0x1f, 0) & 1) << 3 |\n                    (SUB161(auVar4 >> 0x27, 0) & 1) << 4 | (SUB161(auVar4 >> 0x2f, 0) & 1) << 5 |\n                    (SUB161(auVar4 >> 0x37, 0) & 1) << 6 | (SUB161(auVar4 >> 0x3f, 0) & 1) << 7 |\n                    (SUB161(auVar4 >> 0x47, 0) & 1) << 8 | (SUB161(auVar4 >> 0x4f, 0) & 1) << 9 |\n                    (SUB161(auVar4 >> 0x57, 0) & 1) << 10 | (SUB161(auVar4 >> 0x5f, 0) & 1) << 0xb |\n                    (SUB161(auVar4 >> 0x67, 0) & 1) << 0xc | (SUB161(auVar4 >> 0x6f, 0) & 1) << 0xd |\n                    (SUB161(auVar4 >> 0x77, 0) & 1) << 0xe | (uVar5 >> 7) << 0xf) == 0))) {\n                pauVar2 = *pauVar2 + 0x10;\n            }\n            for (; (pauVar2 != *arg1 + arg2 && ((*pauVar2)[0] != '\\0')); pauVar2 = *pauVar2 + 1) {\n            }\n        }\n    }\n    else {\n        uVar3 = arg1 & 0x1f;\n        uVar3 = -(uVar3 != 0) & 0x20 - uVar3;\n        if (arg2 < uVar3) {\n            uVar3 = arg2;\n        }\n        if (arg1 != *arg1 + uVar3) {\n            do {\n                if ((*pauVar2)[0] == '\\0') break;\n                pauVar2 = *pauVar2 + 1;\n            } while (pauVar2 != *arg1 + uVar3);\n        }\n        if (pauVar2 - arg1 != uVar3) {\n            return pauVar2 - arg1;\n        }\n        puVar1 = *pauVar2;\n        for (; pauVar2 != puVar1 + (arg2 - uVar3 & 0xffffffffffffffe0); pauVar2 = pauVar2[1]) {\n            auVar4 = vpxor_avx(SUB3216(in_YMM1, 0), SUB3216(in_YMM1, 0));\n            in_YMM1 = vpcmpeqb_avx2(ZEXT1632(auVar4), *pauVar2);\n            vzeroupper_avx();\n            if ((SUB321(in_YMM1 >> 7, 0) & 1 | (SUB321(in_YMM1 >> 0xf, 0) & 1) << 1 |\n                 (SUB321(in_YMM1 >> 0x17, 0) & 1) << 2 | (SUB321(in_YMM1 >> 0x1f, 0) & 1) << 3 |\n                 (SUB321(in_YMM1 >> 0x27, 0) & 1) << 4 | (SUB321(in_YMM1 >> 0x2f, 0) & 1) << 5 |\n                 (SUB321(in_YMM1 >> 0x37, 0) & 1) << 6 | (SUB321(in_YMM1 >> 0x3f, 0) & 1) << 7 |\n                 (SUB321(in_YMM1 >> 0x47, 0) & 1) << 8 | (SUB321(in_YMM1 >> 0x4f, 0) & 1) << 9 |\n                 (SUB321(in_YMM1 >> 0x57, 0) & 1) << 10 | (SUB321(in_YMM1 >> 0x5f, 0) & 1) << 0xb |\n                 (SUB321(in_YMM1 >> 0x67, 0) & 1) << 0xc | (SUB321(in_YMM1 >> 0x6f, 0) & 1) << 0xd |\n                 (SUB321(in_YMM1 >> 0x77, 0) & 1) << 0xe | SUB321(in_YMM1 >> 0x7f, 0) << 0xf |\n                 (SUB321(in_YMM1 >> 0x87, 0) & 1) << 0x10 | (SUB321(in_YMM1 >> 0x8f, 0) & 1) << 0x11 |\n                 (SUB321(in_YMM1 >> 0x97, 0) & 1) << 0x12 | (SUB321(in_YMM1 >> 0x9f, 0) & 1) << 0x13 |\n                 (SUB321(in_YMM1 >> 0xa7, 0) & 1) << 0x14 | (SUB321(in_YMM1 >> 0xaf, 0) & 1) << 0x15 |\n                 (SUB321(in_YMM1 >> 0xb7, 0) & 1) << 0x16 | SUB321(in_YMM1 >> 0xbf, 0) << 0x17 |\n                 (SUB321(in_YMM1 >> 199, 0) & 1) << 0x18 | (SUB321(in_YMM1 >> 0xcf, 0) & 1) << 0x19 |\n                 (SUB321(in_YMM1 >> 0xd7, 0) & 1) << 0x1a | (SUB321(in_YMM1 >> 0xdf, 0) & 1) << 0x1b |\n                 (SUB321(in_YMM1 >> 0xe7, 0) & 1) << 0x1c | (SUB321(in_YMM1 >> 0xef, 0) & 1) << 0x1d |\n                 (SUB321(in_YMM1 >> 0xf7, 0) & 1) << 0x1e | SUB321(in_YMM1 >> 0xff, 0) << 0x1f) != 0) break;\n        }\n        for (; (pauVar2 != *arg1 + arg2 && ((*pauVar2)[0] != '\\0')); pauVar2 = *pauVar2 + 1) {\n        }\n    }\n    return pauVar2 - arg1;\n}\n",
        "token_count": 2275
    },
    "14001378": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint64_t fcn.140013788(uchar (*arg1) [32], ulong noname_1, ulong noname_2, ulong arg4)\n\n{\n    uint64_t uVar1;\n    uchar (*pauVar2) [32];\n    uint64_t uVar3;\n    uchar auVar4 [16];\n    uchar auVar6 [32];\n    uchar in_YMM2 [32];\n    uint16_t uVar5;\n    \n    pauVar2 = arg1;\n    if (*0x14003ef20 < 5) {\n        if (*0x14003ef20 < 1) {\n            for (; **pauVar2 != 0; pauVar2 = *pauVar2 + 2) {\n            }\n        }\n        else if ((arg1 & 1) == 0) {\n            uVar3 = arg1 & 0xf;\n            uVar3 = -(uVar3 != 0) & 0x10 - uVar3;\n            if (arg1 != *arg1 + (uVar3 & 0xfffffffffffffffe)) {\n                do {\n                    if (**pauVar2 == 0) break;\n                    pauVar2 = *pauVar2 + 2;\n                } while (pauVar2 != *arg1 + (uVar3 & 0xfffffffffffffffe));\n            }\n            uVar1 = pauVar2 - arg1 >> 1;\n            if (uVar1 != uVar3 >> 1) {\n                return uVar1;\n            }\n            pauVar2 = *arg1 + uVar1 * 2;\n            while( true ) {\n                uVar5 = -(*(*pauVar2 + 0xe) == 0);\n                auVar4 = CONCAT214(uVar5, CONCAT212(-(*(*pauVar2 + 0xc) == 0), \n                                                    CONCAT210(-(*(*pauVar2 + 10) == 0), \n                                                              CONCAT28(-(*(*pauVar2 + 8) == 0), \n                                                                       CONCAT26(-(*(*pauVar2 + 6) == 0), \n                                                                                CONCAT24(-(*(*pauVar2 + 4) == 0), \n                                                                                         CONCAT22(-(*(*pauVar2 + 2) == 0\n                                                                                                   ), -(**pauVar2 == 0))\n                                                                                        ))))));\n                if ((SUB161(auVar4 >> 7, 0) & 1 | (SUB161(auVar4 >> 0xf, 0) & 1) << 1 |\n                     (SUB161(auVar4 >> 0x17, 0) & 1) << 2 | (SUB161(auVar4 >> 0x1f, 0) & 1) << 3 |\n                     (SUB161(auVar4 >> 0x27, 0) & 1) << 4 | (SUB161(auVar4 >> 0x2f, 0) & 1) << 5 |\n                     (SUB161(auVar4 >> 0x37, 0) & 1) << 6 | (SUB161(auVar4 >> 0x3f, 0) & 1) << 7 |\n                     (SUB161(auVar4 >> 0x47, 0) & 1) << 8 | (SUB161(auVar4 >> 0x4f, 0) & 1) << 9 |\n                     (SUB161(auVar4 >> 0x57, 0) & 1) << 10 | (SUB161(auVar4 >> 0x5f, 0) & 1) << 0xb |\n                     (SUB161(auVar4 >> 0x67, 0) & 1) << 0xc | (SUB161(auVar4 >> 0x6f, 0) & 1) << 0xd |\n                     (uVar5 >> 7 & 1) << 0xe | uVar5 & 0x8000) != 0) break;\n                pauVar2 = *pauVar2 + 0x10;\n            }\n            for (; **pauVar2 != 0; pauVar2 = *pauVar2 + 2) {\n            }\n        }\n        else {\n            for (; **pauVar2 != 0; pauVar2 = *pauVar2 + 2) {\n            }\n        }\n    }\n    else if ((arg1 & 1) == 0) {\n        uVar3 = arg1 & 0x1f;\n        uVar3 = -(uVar3 != 0) & 0x20 - uVar3;\n        if (arg1 != *arg1 + (uVar3 & 0xfffffffffffffffe)) {\n            do {\n                if (**pauVar2 == 0) break;\n                pauVar2 = *pauVar2 + 2;\n            } while (pauVar2 != *arg1 + (uVar3 & 0xfffffffffffffffe));\n        }\n        uVar1 = pauVar2 - arg1 >> 1;\n        if (uVar1 != uVar3 >> 1) {\n            return uVar1;\n        }\n        pauVar2 = *arg1 + uVar1 * 2;\n        auVar4 = vpxor_avx(SUB3216(in_YMM2, 0), SUB3216(in_YMM2, 0));\n        while (auVar6 = vpcmpeqw_avx2(ZEXT1632(auVar4), *pauVar2), \n              (SUB321(auVar6 >> 7, 0) & 1 | (SUB321(auVar6 >> 0xf, 0) & 1) << 1 | (SUB321(auVar6 >> 0x17, 0) & 1) << 2 |\n               (SUB321(auVar6 >> 0x1f, 0) & 1) << 3 | (SUB321(auVar6 >> 0x27, 0) & 1) << 4 |\n               (SUB321(auVar6 >> 0x2f, 0) & 1) << 5 | (SUB321(auVar6 >> 0x37, 0) & 1) << 6 |\n               (SUB321(auVar6 >> 0x3f, 0) & 1) << 7 | (SUB321(auVar6 >> 0x47, 0) & 1) << 8 |\n               (SUB321(auVar6 >> 0x4f, 0) & 1) << 9 | (SUB321(auVar6 >> 0x57, 0) & 1) << 10 |\n               (SUB321(auVar6 >> 0x5f, 0) & 1) << 0xb | (SUB321(auVar6 >> 0x67, 0) & 1) << 0xc |\n               (SUB321(auVar6 >> 0x6f, 0) & 1) << 0xd | (SUB321(auVar6 >> 0x77, 0) & 1) << 0xe |\n               SUB321(auVar6 >> 0x7f, 0) << 0xf | (SUB321(auVar6 >> 0x87, 0) & 1) << 0x10 |\n               (SUB321(auVar6 >> 0x8f, 0) & 1) << 0x11 | (SUB321(auVar6 >> 0x97, 0) & 1) << 0x12 |\n               (SUB321(auVar6 >> 0x9f, 0) & 1) << 0x13 | (SUB321(auVar6 >> 0xa7, 0) & 1) << 0x14 |\n               (SUB321(auVar6 >> 0xaf, 0) & 1) << 0x15 | (SUB321(auVar6 >> 0xb7, 0) & 1) << 0x16 |\n               SUB321(auVar6 >> 0xbf, 0) << 0x17 | (SUB321(auVar6 >> 199, 0) & 1) << 0x18 |\n               (SUB321(auVar6 >> 0xcf, 0) & 1) << 0x19 | (SUB321(auVar6 >> 0xd7, 0) & 1) << 0x1a |\n               (SUB321(auVar6 >> 0xdf, 0) & 1) << 0x1b | (SUB321(auVar6 >> 0xe7, 0) & 1) << 0x1c |\n               (SUB321(auVar6 >> 0xef, 0) & 1) << 0x1d | (SUB321(auVar6 >> 0xf7, 0) & 1) << 0x1e |\n              SUB321(auVar6 >> 0xff, 0) << 0x1f) == 0) {\n            pauVar2 = pauVar2[1];\n        }\n        vzeroupper_avx();\n        for (; **pauVar2 != 0; pauVar2 = *pauVar2 + 2) {\n        }\n    }\n    else {\n        for (; **pauVar2 != 0; pauVar2 = *pauVar2 + 2) {\n        }\n    }\n    return pauVar2 - arg1 >> 1;\n}\n",
        "token_count": 2129
    },
    "140013ad": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t fcn.140013ad8(uint16_t *arg1, uint16_t *arg2, int64_t arg3)\n\n{\n    uint16_t uVar1;\n    uint16_t uVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    uint32_t uVar5;\n    uint64_t uVar6;\n    int64_t iVar7;\n    uint32_t uVar8;\n    int64_t iStack56;\n    int64_t iStack48;\n    char cStack32;\n    \n    if (*0x14003f218 != 0) {\n        if ((arg1 == NULL) || (arg2 == NULL)) {\n            puVar4 = fcn.1400142cc();\n            *puVar4 = 0x16;\n            fcn.140014060();\n            iVar3 = 0x7fffffff;\n        }\n        else if (arg3 == 0) {\n            iVar3 = 0;\n        }\n        else {\n            fcn.140013330(&stack0xffffffffffffffc8, 0);\n            iVar7 = iStack48;\n            if (*(iStack48 + 0x138) == 0) {\n                iVar3 = fcn.140013a8c(arg1, arg2, arg3);\n            }\n            else {\n                do {\n                    uVar1 = *arg1;\n                    arg1 = arg1 + 1;\n                    if (uVar1 < 0x100) {\n                        uVar6 = uVar1;\n                        if ((*(\n                              L\"         (((((                  H\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x10\\x10\\x10\\x10\\x10\\x10\\x10\u0181\u0181\u0181\u0181\u0181\u0181\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\\x10\\x10\\x10\\x10\\x10\\x10\u0182\u0182\u0182\u0182\u0182\u0182\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\\x10\\x10\\x10\\x10      (                          \\b\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\u0112\\x10\\x100\\x10\\x10\\x10\\x10\\x14\\x14\\x10\u0112\\x10\\x10\\x10\\x14\u0112\\x10\\x10\\x10\\x10\\x10\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\\x10\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\\x10\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0101\"\n                              + uVar6) & 1) != 0) {\n                            uVar6 = *(uVar6 + *(iVar7 + 0x110));\n                        }\n                        uVar1 = uVar6;\n                    }\n                    else {\n                        uVar1 = fcn.1400140f8(uVar1, &stack0xffffffffffffffd0);\n                        iVar7 = iStack48;\n                    }\n                    uVar2 = *arg2;\n                    arg2 = arg2 + 1;\n                    if (uVar2 < 0x100) {\n                        uVar6 = uVar2;\n                        if ((*(\n                              L\"         (((((                  H\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x10\\x10\\x10\\x10\\x10\\x10\\x10\u0181\u0181\u0181\u0181\u0181\u0181\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\\x10\\x10\\x10\\x10\\x10\\x10\u0182\u0182\u0182\u0182\u0182\u0182\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\\x10\\x10\\x10\\x10      (                          \\b\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\u0112\\x10\\x100\\x10\\x10\\x10\\x10\\x14\\x14\\x10\u0112\\x10\\x10\\x10\\x14\u0112\\x10\\x10\\x10\\x10\\x10\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\\x10\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\\x10\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0101\"\n                              + uVar6) & 1) != 0) {\n                            uVar6 = *(uVar6 + *(iVar7 + 0x110));\n                        }\n                        uVar2 = uVar6;\n                    }\n                    else {\n                        uVar2 = fcn.1400140f8(uVar2, &stack0xffffffffffffffd0);\n                        iVar7 = iStack48;\n                    }\n                    iVar3 = uVar1 - uVar2;\n                } while (((iVar3 == 0) && (uVar1 != 0)) && (arg3 = arg3 + -1,  arg3 != 0));\n            }\n            if (cStack32 != '\\0') {\n                *(iStack56 + 0x3a8) = *(iStack56 + 0x3a8) & 0xfffffffd;\n            }\n        }\n        return iVar3;\n    }\n    if ((arg1 != NULL) && (arg2 != NULL)) {\n        if (arg3 != 0) {\n            do {\n                uVar1 = *arg1;\n                arg1 = arg1 + 1;\n                uVar2 = *arg2;\n                arg2 = arg2 + 1;\n                uVar8 = uVar1 + 0x20;\n                if (0x19 < uVar1 - 0x41) {\n                    uVar8 = uVar1;\n                }\n                uVar5 = uVar2 + 0x20;\n                if (0x19 < uVar2 - 0x41) {\n                    uVar5 = uVar2;\n                }\n            } while (((uVar8 - uVar5 == 0) && (uVar8 != 0)) && (arg3 = arg3 + -1,  arg3 != 0));\n            return uVar8 - uVar5;\n        }\n        return 0;\n    }\n    iStack48 = 0x140013aef;\n    puVar4 = fcn.1400142cc();\n    *puVar4 = 0x16;\n    iStack48 = 0x140013afa;\n    fcn.140014060();\n    return 0x7fffffff;\n}\n",
        "token_count": 1610
    },
    "140013c7": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint64_t fcn.140013c70(int64_t *arg1)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    uint auStackX8 [2];\n    \n    if (*arg1 == 0) {\n        auStackX8[0] = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        if (*(arg1 + 2) == '\\0') {\n            arg1[1] = 0;\n            iVar2 = 0;\n            *(arg1 + 2) = 1;\n        }\n        else {\n            iVar2 = arg1[1];\n        }\n        iVar2 = fcn.1400148f0(auStackX8, iVar2);\n        *arg1 = iVar2;\n        (*_sym.imp.KERNEL32.dll_SetLastError)(auStackX8[0]);\n        if (iVar2 == 0) {\n            fcn.140014c5c();\n            pcVar1 = swi(3);\n            iVar2 = (*pcVar1)();\n            return iVar2;\n        }\n    }\n    return *arg1;\n}\n",
        "token_count": 235
    },
    "140013ef": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.140013ef4(ulong noname_0, ulong noname_1, ulong noname_2, ulong noname_3, ulong arg_30h)\n\n{\n    int64_t iVar1;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_bp_28h;\n    uint uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_18h._0_1_ = *0x14003f218 == 0;\n    var_30h._0_1_ = 0;\n    var_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (var_18h) {\n        var_bp_28h._0_4_ = *0x14003e158;\n        var_bp_28h._4_4_ = *0x14003e15c;\n        uStack40 = *0x14003e160;\n        uStack36 = *0x14003e164;\n    }\n    fcn.140013f90(noname_0, noname_1, noname_2, noname_3);\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_10h != '\\0') {\n        iVar1 = fcn.140013c70(&var_40h);\n        *(iVar1 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar1 = fcn.140013c70(&var_40h);\n        *(iVar1 + 0x24) = var_10h._4_4_;\n    }\n    return;\n}\n",
        "token_count": 453
    },
    "1400140f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint16_t fcn.1400140f8(ulong noname_0, ulong arg2)\n\n{\n    int32_t iVar1;\n    uint8_t uVar2;\n    int64_t arg1;\n    uint16_t auStackX8 [8];\n    uint16_t uStackX24;\n    int64_t iStack40;\n    int64_t iStack32;\n    char cStack16;\n    \n    if (noname_0 == 0xffff) {\n        return 0xffff;\n    }\n    auStackX8[0] = noname_0;\n    fcn.140013330(&iStack40, arg2);\n    uVar2 = auStackX8[0];\n    if (*(iStack32 + 0xc) == 0xfde9) {\n        if (0x7f < auStackX8[0]) {\n            arg1 = *(iStack32 + 0x138);\ncode_r0x00014001419f:\n            iVar1 = fcn.140014cb4(arg1, 0x100, auStackX8, 1);\n            if (iVar1 != 0) {\n                auStackX8[0] = uStackX24;\n            }\n            goto code_r0x0001400141d2;\n        }\n        if ((*(\n              L\"         (((((                  H\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x10\\x10\\x10\\x10\\x10\\x10\\x10\u0181\u0181\u0181\u0181\u0181\u0181\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\\x10\\x10\\x10\\x10\\x10\\x10\u0182\u0182\u0182\u0182\u0182\u0182\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\\x10\\x10\\x10\\x10      (                          \\b\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\u0112\\x10\\x100\\x10\\x10\\x10\\x10\\x14\\x14\\x10\u0112\\x10\\x10\\x10\\x14\u0112\\x10\\x10\\x10\\x10\\x10\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\\x10\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\\x10\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0101\"\n              + uVar2) & 1) == 0) {\n            auStackX8[0] = auStackX8[0] & 0xff;\n            goto code_r0x0001400141d2;\n        }\n    }\n    else {\n        if (0xff < auStackX8[0]) {\n            arg1 = *(iStack32 + 0x138);\n            if (arg1 == 0) goto code_r0x0001400141d2;\n            goto code_r0x00014001419f;\n        }\n        if ((*(\n              L\"         (((((                  H\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x10\\x10\\x10\\x10\\x10\\x10\\x10\u0181\u0181\u0181\u0181\u0181\u0181\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\\x10\\x10\\x10\\x10\\x10\\x10\u0182\u0182\u0182\u0182\u0182\u0182\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\\x10\\x10\\x10\\x10      (                          \\b\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\u0112\\x10\\x100\\x10\\x10\\x10\\x10\\x14\\x14\\x10\u0112\\x10\\x10\\x10\\x14\u0112\\x10\\x10\\x10\\x10\\x10\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\\x10\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\\x10\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0101\"\n              + uVar2) & 1) == 0) {\n            auStackX8[0] = auStackX8[0] & 0xff;\n            goto code_r0x0001400141d2;\n        }\n    }\n    auStackX8[0] = *(*(iStack32 + 0x110) + uVar2);\ncode_r0x0001400141d2:\n    if (cStack16 != '\\0') {\n        *(iStack40 + 0x3a8) = *(iStack40 + 0x3a8) & 0xfffffffd;\n    }\n    return auStackX8[0];\n}\n",
        "token_count": 1231
    },
    "14001583": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.140015834(ulong noname_0, uint32_t *arg2, int64_t **arg3, uint32_t *arg4)\n\n{\n    int32_t iVar1;\n    int32_t *piVar2;\n    uint uVar3;\n    uint uVar4;\n    uint uVar5;\n    uint *puVar6;\n    uint *puVar7;\n    uint *puVar8;\n    int64_t iVar9;\n    \n    fcn.140015258(*arg2);\n    puVar6 = *(**arg3 + 0x88) + 0x18;\n    if (*0x14003f600 == NULL) {\ncode_r0x0001400158e7:\n        puVar6 = fcn.1400142cc();\n        *puVar6 = 0x16;\n        fcn.140014060();\n    }\n    else {\n        if (puVar6 == NULL) {\n            fcn.14001a0c0(*0x14003f600, 0, 0x101);\n            goto code_r0x0001400158e7;\n        }\n        iVar9 = 2;\n        puVar8 = *0x14003f600;\n        do {\n            uVar3 = puVar6[1];\n            uVar4 = puVar6[2];\n            uVar5 = puVar6[3];\n            *puVar8 = *puVar6;\n            puVar8[1] = uVar3;\n            puVar8[2] = uVar4;\n            puVar8[3] = uVar5;\n            uVar3 = puVar6[5];\n            uVar4 = puVar6[6];\n            uVar5 = puVar6[7];\n            puVar8[4] = puVar6[4];\n            puVar8[5] = uVar3;\n            puVar8[6] = uVar4;\n            puVar8[7] = uVar5;\n            uVar3 = puVar6[9];\n            uVar4 = puVar6[10];\n            uVar5 = puVar6[0xb];\n            puVar8[8] = puVar6[8];\n            puVar8[9] = uVar3;\n            puVar8[10] = uVar4;\n            puVar8[0xb] = uVar5;\n            uVar3 = puVar6[0xd];\n            uVar4 = puVar6[0xe];\n            uVar5 = puVar6[0xf];\n            puVar8[0xc] = puVar6[0xc];\n            puVar8[0xd] = uVar3;\n            puVar8[0xe] = uVar4;\n            puVar8[0xf] = uVar5;\n            uVar3 = puVar6[0x11];\n            uVar4 = puVar6[0x12];\n            uVar5 = puVar6[0x13];\n            puVar8[0x10] = puVar6[0x10];\n            puVar8[0x11] = uVar3;\n            puVar8[0x12] = uVar4;\n            puVar8[0x13] = uVar5;\n            uVar3 = puVar6[0x15];\n            uVar4 = puVar6[0x16];\n            uVar5 = puVar6[0x17];\n            puVar8[0x14] = puVar6[0x14];\n            puVar8[0x15] = uVar3;\n            puVar8[0x16] = uVar4;\n            puVar8[0x17] = uVar5;\n            uVar3 = puVar6[0x19];\n            uVar4 = puVar6[0x1a];\n            uVar5 = puVar6[0x1b];\n            puVar8[0x18] = puVar6[0x18];\n            puVar8[0x19] = uVar3;\n            puVar8[0x1a] = uVar4;\n            puVar8[0x1b] = uVar5;\n            puVar7 = puVar8 + 0x20;\n            uVar3 = puVar6[0x1d];\n            uVar4 = puVar6[0x1e];\n            uVar5 = puVar6[0x1f];\n            puVar8[0x1c] = puVar6[0x1c];\n            puVar8[0x1d] = uVar3;\n            puVar8[0x1e] = uVar4;\n            puVar8[0x1f] = uVar5;\n            puVar6 = puVar6 + 0x20;\n            iVar9 = iVar9 + -1;\n            puVar8 = puVar7;\n        } while (iVar9 != 0);\n        *puVar7 = *puVar6;\n    }\n    iVar9 = 2;\n    puVar6 = *(**arg3 + 0x88) + 0x119;\n    if (*0x14003f608 != NULL) {\n        puVar8 = *0x14003f608;\n        if (puVar6 != NULL) {\n            do {\n                uVar3 = puVar6[1];\n                uVar4 = puVar6[2];\n                uVar5 = puVar6[3];\n                *puVar8 = *puVar6;\n                puVar8[1] = uVar3;\n                puVar8[2] = uVar4;\n                puVar8[3] = uVar5;\n                uVar3 = puVar6[5];\n                uVar4 = puVar6[6];\n                uVar5 = puVar6[7];\n                puVar8[4] = puVar6[4];\n                puVar8[5] = uVar3;\n                puVar8[6] = uVar4;\n                puVar8[7] = uVar5;\n                uVar3 = puVar6[9];\n                uVar4 = puVar6[10];\n                uVar5 = puVar6[0xb];\n                puVar8[8] = puVar6[8];\n                puVar8[9] = uVar3;\n                puVar8[10] = uVar4;\n                puVar8[0xb] = uVar5;\n                uVar3 = puVar6[0xd];\n                uVar4 = puVar6[0xe];\n                uVar5 = puVar6[0xf];\n                puVar8[0xc] = puVar6[0xc];\n                puVar8[0xd] = uVar3;\n                puVar8[0xe] = uVar4;\n                puVar8[0xf] = uVar5;\n                uVar3 = puVar6[0x11];\n                uVar4 = puVar6[0x12];\n                uVar5 = puVar6[0x13];\n                puVar8[0x10] = puVar6[0x10];\n                puVar8[0x11] = uVar3;\n                puVar8[0x12] = uVar4;\n                puVar8[0x13] = uVar5;\n                uVar3 = puVar6[0x15];\n                uVar4 = puVar6[0x16];\n                uVar5 = puVar6[0x17];\n                puVar8[0x14] = puVar6[0x14];\n                puVar8[0x15] = uVar3;\n                puVar8[0x16] = uVar4;\n                puVar8[0x17] = uVar5;\n                uVar3 = puVar6[0x19];\n                uVar4 = puVar6[0x1a];\n                uVar5 = puVar6[0x1b];\n                puVar8[0x18] = puVar6[0x18];\n                puVar8[0x19] = uVar3;\n                puVar8[0x1a] = uVar4;\n                puVar8[0x1b] = uVar5;\n                uVar3 = puVar6[0x1d];\n                uVar4 = puVar6[0x1e];\n                uVar5 = puVar6[0x1f];\n                puVar8[0x1c] = puVar6[0x1c];\n                puVar8[0x1d] = uVar3;\n                puVar8[0x1e] = uVar4;\n                puVar8[0x1f] = uVar5;\n                puVar6 = puVar6 + 0x20;\n                iVar9 = iVar9 + -1;\n                puVar8 = puVar8 + 0x20;\n            } while (iVar9 != 0);\n            goto code_r0x000140015998;\n        }\n        fcn.14001a0c0(*0x14003f608, 0, 0x100);\n    }\n    puVar6 = fcn.1400142cc();\n    *puVar6 = 0x16;\n    fcn.140014060();\ncode_r0x000140015998:\n    piVar2 = **arg3[1];\n    LOCK();\n    iVar1 = *piVar2;\n    *piVar2 = *piVar2 + -1;\n    if ((iVar1 == 1) && (**arg3[1] != 0x14003e9d0)) {\n        fcn.140014db4(**arg3[1]);\n    }\n    **arg3[1] = *(**arg3 + 0x88);\n    LOCK();\n    **(**arg3 + 0x88) = **(**arg3 + 0x88) + 1;\n    fcn.1400152b8(*arg4);\n    return;\n}\n",
        "token_count": 2173
    },
    "140015f7": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t * fcn.140015f74(int64_t arg1, int32_t **arg2)\n\n{\n    int32_t iVar1;\n    code *pcVar2;\n    int32_t *piVar3;\n    \n    if (((*(arg1 + 0x3a8) & *0x14003ef10) == 0) || (*(arg1 + 0x90) == 0)) {\n        fcn.140015258(5);\n        piVar3 = *(arg1 + 0x88);\n        if (piVar3 != *arg2) {\n            if (piVar3 != NULL) {\n                LOCK();\n                iVar1 = *piVar3;\n                *piVar3 = *piVar3 + -1;\n                if ((iVar1 == 1) && (piVar3 != 0x14003e9d0)) {\n                    fcn.140014db4(piVar3);\n                }\n            }\n            piVar3 = *arg2;\n            *(arg1 + 0x88) = piVar3;\n            LOCK();\n            *piVar3 = *piVar3 + 1;\n        }\n        fcn.1400152b8(5);\n    }\n    else {\n        piVar3 = *(arg1 + 0x88);\n    }\n    if (piVar3 != NULL) {\n        return piVar3;\n    }\n    fcn.140014c5c();\n    pcVar2 = swi(3);\n    piVar3 = (*pcVar2)();\n    return piVar3;\n}\n",
        "token_count": 337
    },
    "14001637": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint fcn.14001637c(ulong arg1, int32_t *arg2)\n\n{\n    uint uVar1;\n    int32_t *piVar2;\n    int64_t iVar3;\n    int32_t *piVar4;\n    int32_t **ppiVar5;\n    int32_t *piVar6;\n    int32_t *piVar7;\n    uint uVar8;\n    \n    ppiVar5 = fcn.140014828(arg1, arg2);\n    if (ppiVar5 != NULL) {\n        piVar2 = *ppiVar5;\n        for (piVar6 = piVar2; piVar6 != piVar2 + 0x30; piVar6 = piVar6 + 4) {\n            if (*piVar6 == arg1) {\n                if (piVar6 == NULL) {\n                    return 0;\n                }\n                iVar3 = *(piVar6 + 2);\n                if (iVar3 == 0) {\n                    return 0;\n                }\n                if (iVar3 == 5) {\n                    *(piVar6 + 2) = 0;\n                    return 1;\n                }\n                if (iVar3 != 1) {\n                    piVar4 = ppiVar5[1];\n                    ppiVar5[1] = arg2;\n                    if (piVar6[1] == 8) {\n                        for (piVar7 = piVar2 + 0xc; piVar7 != piVar2 + 0x30; piVar7 = piVar7 + 4) {\n                            *(piVar7 + 2) = 0;\n                        }\n                        uVar1 = *(ppiVar5 + 2);\n                        if (*piVar6 == -0x3fffff73) {\n                            uVar8 = 0x82;\ncode_r0x0001400164ba:\n                            *(ppiVar5 + 2) = uVar8;\n                        }\n                        else {\n                            if (*piVar6 == -0x3fffff72) {\n                                uVar8 = 0x83;\n                                goto code_r0x0001400164ba;\n                            }\n                            if (*piVar6 == -0x3fffff71) {\n                                uVar8 = 0x86;\n                                goto code_r0x0001400164ba;\n                            }\n                            if (*piVar6 == -0x3fffff70) {\n                                uVar8 = 0x81;\n                                goto code_r0x0001400164ba;\n                            }\n                            if (*piVar6 == -0x3fffff6f) {\n                                uVar8 = 0x84;\n                                goto code_r0x0001400164ba;\n                            }\n                            if (*piVar6 == -0x3fffff6e) {\n                                uVar8 = 0x8a;\n                                goto code_r0x0001400164ba;\n                            }\n                            if (*piVar6 == -0x3fffff6d) {\n                                uVar8 = 0x85;\n                                goto code_r0x0001400164ba;\n                            }\n                            if (*piVar6 == -0x3ffffd4c) {\n                                uVar8 = 0x8e;\n                                goto code_r0x0001400164ba;\n                            }\n                            uVar8 = uVar1;\n                            if (*piVar6 == -0x3ffffd4b) {\n                                uVar8 = 0x8d;\n                                goto code_r0x0001400164ba;\n                            }\n                        }\n                        (**0x140031a58)(8, uVar8);\n                        *(ppiVar5 + 2) = uVar1;\n                    }\n                    else {\n                        *(piVar6 + 2) = 0;\n                        (**0x140031a58)(piVar6[1]);\n                    }\n                    ppiVar5[1] = piVar4;\n                }\n                return 0xffffffff;\n            }\n        }\n    }\n    return 0;\n}\n",
        "token_count": 855
    },
    "140016c0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140016c08(int32_t **arg1)\n\n{\n    ulong arg1_00;\n    \n    if (*0x14003f630 != '\\0') {\n        return;\n    }\n    *0x14003f624 = 1;\n    if (**arg1 == 0) {\n        if (*0x14003f628 != *0x14003ef38) {\n            (**0x140031a58)(0, 0, 0);\n        }\n        arg1_00 = 0x14003f670;\n    }\n    else {\n        if (**arg1 != 1) goto code_r0x000140016c82;\n        arg1_00 = 0x14003f688;\n    }\n    fcn.140017f74(arg1_00);\ncode_r0x000140016c82:\n    if (**arg1 == 0) {\n        fcn.140017b90(0x140031b10, 0x140031b30);\n    }\n    fcn.140017b90(0x140031b38, 0x140031b40);\n    if (*arg1[1] == 0) {\n        *0x14003f630 = '\\x01';\n        *arg1[2] = 1;\n    }\n    return;\n}\n",
        "token_count": 285
    },
    "140016e9": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.140016e98(ulong arg1)\n\n{\n    code *pcVar1;\n    int16_t *piVar2;\n    int32_t *piVar3;\n    uint auStackX16 [2];\n    int32_t aiStackX24 [2];\n    ulong var_28h;\n    uchar var_30h [4];\n    ulong var_2ch;\n    ulong var_20h;\n    uint *var_bp_18h;\n    int32_t *var_bp_10h;\n    ulong *var_8h;\n    \n    aiStackX24[0] = 0;\n    auStackX16[0] = 2;\n    var_20h = 0xfffffffffffffffe;\n    piVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n    if ((((piVar2 != NULL) && (*piVar2 == 0x5a4d)) && (piVar3 = *(piVar2 + 0x1e) + piVar2,  *piVar3 == 0x4550)) &&\n       (((*(piVar3 + 6) == 0x20b && (0xe < piVar3[0x21])) && (piVar3[0x3e] != 0)))) {\n        fcn.140016e00(arg1);\n    }\n    var_28h._0_1_ = 0;\n    var_bp_18h = auStackX16;\n    var_bp_10h = aiStackX24;\n    var_8h = &var_28h;\n    var_2ch._0_4_ = 2;\n    var_2ch._4_4_ = 2;\n    fcn.140016bd0(var_30h, &var_2ch + 4, &var_bp_18h, &var_2ch);\n    if (aiStackX24[0] == 0) {\n        fcn.140016d9c(arg1);\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    return;\n}\n",
        "token_count": 466
    },
    "140017b1": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint64_t fcn.140017b18(ulong arg1, ulong arg2, int64_t **arg3)\n\n{\n    int64_t iVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint64_t uVar4;\n    \n    uVar4 = arg1;\n    uVar2 = 0;\n    uVar3 = arg1 + 1;\n    if (arg3 == NULL) {\n        iVar1 = fcn.140014c2c(arg1);\n        if (uVar3 < 0x101) {\n            uVar2 = *(iVar1 + uVar4 * 2) & arg2;\n        }\n        uVar4 = uVar2;\n    }\n    else if (uVar3 < 0x101) {\n        uVar4 = *(**arg3 + uVar4 * 2) & arg2;\n    }\n    else if (*(*arg3 + 1) < 2) {\n        uVar4 = 0;\n    }\n    else {\n        uVar4 = fcn.140018278(uVar4 & 0xffffffff, arg2, arg3);\n    }\n    return uVar4;\n}\n",
        "token_count": 257
    },
    "14001a26": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.14001a260(int32_t *arg1)\n\n{\n    uint8_t *puVar1;\n    \n    if ((((arg1 != NULL) && (*arg1 == -0x1f928c9d)) && (arg1[6] == 4)) &&\n       ((arg1[8] + 0xe66cfae0U < 3 && (puVar1 = *(arg1 + 0xc),  puVar1 != NULL)))) {\n        if (*(puVar1 + 4) == 0) {\n            if (((*puVar1 & 0x10) != 0) && (**(arg1 + 10) != 0)) {\n                (**0x140031a58)();\n            }\n        }\n        else {\n            fcn.14001a2d8(*(arg1 + 10), *(puVar1 + 4) + *(arg1 + 0xe));\n        }\n    }\n    return;\n}\n",
        "token_count": 208
    },
    "14001aff": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t fcn.14001aff4(int64_t arg1, int64_t arg2, uint64_t arg3)\n\n{\n    uint32_t *puVar1;\n    uint8_t uVar2;\n    uint64_t uVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    uint8_t *puVar7;\n    uint8_t *puVar8;\n    \n    if (*(arg1 + 0x10) != 0) {\n        uVar5 = 0;\n        puVar7 = *(arg1 + 0x10) + *(arg2 + 8);\n        iVar4 = -1;\n        uVar6 = 0;\n        uVar3 = *puVar7 & 0xf;\n        puVar7 = puVar7 + -*(uVar3 + 0x1400349f0);\n        puVar1 = puVar7 + -4;\n        uVar2 = *(uVar3 + 0x140034a00) & 0x1f;\n        if (*puVar1 >> uVar2 != 0) {\n            do {\n                puVar8 = puVar7 + -*((*puVar7 & 0xf) + 0x1400349f0);\n                uVar5 = uVar5 + (*(puVar8 + -4) >> (*((*puVar7 & 0xf) + 0x140034a00) & 0x1f));\n                if (arg3 < uVar5 + **(arg2 + 0x10) + *(arg2 + 8)) break;\n                uVar6 = uVar6 + 1;\n                puVar7 = puVar8 + -*((*puVar8 & 0xf) + 0x1400349f0);\n                iVar4 = (*(puVar7 + -4) >> (*((*puVar8 & 0xf) + 0x140034a00) & 0x1f)) - 1;\n            } while (uVar6 < *puVar1 >> uVar2);\n            if (uVar6 != 0) {\n                return iVar4;\n            }\n        }\n    }\n    return -1;\n}\n",
        "token_count": 483
    },
    "14001b81": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_8h\n// WARNING: Variable defined which should be unmapped: var_10h_2\n// WARNING: Variable defined which should be unmapped: var_bp_28h\n// WARNING: Variable defined which should be unmapped: var_bp_30h\n// WARNING: Variable defined which should be unmapped: var_bp_38h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.14001b81c(int32_t *arg1, ulong arg2, ulong arg3, int32_t *arg4, ulong *noname_4, ulong noname_5, \n                  uint64_t noname_6, int32_t *noname_7, ulong noname_8, ulong noname_9, ulong noname_10, ulong noname_11\n                  , ulong noname_12, ulong noname_13, ulong noname_14, ulong noname_15, ulong arg_90h, ulong arg_98h, \n                  ulong arg_a0h, ulong arg_a8h)\n\n{\n    int64_t iVar1;\n    int32_t *piVar2;\n    uint *puVar3;\n    code *pcVar4;\n    uint32_t uVar5;\n    char cVar6;\n    char cVar7;\n    uint32_t uVar8;\n    int32_t iVar9;\n    int64_t iVar10;\n    ulong uVar11;\n    uint32_t uVar12;\n    uint64_t uVar13;\n    ulong var_8h_2;\n    ulong var_10h;\n    uchar auStack360 [32];\n    ulong *puStack328;\n    ulong *puStack320;\n    ulong uStack312;\n    ulong uStack304;\n    uint64_t uStack296;\n    int32_t *piStack288;\n    char cStack280;\n    char cStack272;\n    char cStack264;\n    char cStack263;\n    int32_t iStack260;\n    ulong uStack256;\n    int32_t *piStack248;\n    int64_t iStack240;\n    ulong uStack232;\n    int32_t *piStack224;\n    uint64_t uStack216;\n    int64_t iStack208;\n    int32_t iStack200;\n    int32_t iStack196;\n    int32_t iStack192;\n    uint32_t uStack188;\n    int32_t iStack184;\n    ulong *puStack176;\n    ulong uStack168;\n    uint uStack160;\n    uint uStack156;\n    uint32_t uStack152;\n    uint uStack148;\n    uint uStack144;\n    uint uStack140;\n    ulong var_80h;\n    ulong var_78h;\n    ulong var_70h;\n    ulong var_bp_68h;\n    ulong var_bp_60h;\n    ulong var_58h;\n    uint64_t var_bp_50h;\n    ulong var_48h;\n    ulong var_40h;\n    ulong var_bp_38h;\n    ulong var_bp_30h;\n    ulong var_bp_28h;\n    ulong var_10h_2;\n    ulong var_8h;\n    \n    var_bp_50h = *0x14003ef38 ^ auStack360;\n    cVar7 = '\\0';\n    piStack224 = noname_7;\n    cStack263 = '\\0';\n    cStack264 = '\\0';\n    uStack256 = arg3;\n    uStack232 = arg2;\n    uVar8 = fcn.14001dba4(arg2, arg4, noname_4);\n    if ((uVar8 < -1) || (*(noname_4 + 4) <= uVar8)) goto code_r0x00014001bd06;\n    if ((*arg1 == -0x1f928c9d) && (((arg1[6] == 4 && (arg1[8] + 0xe66cfae0U < 3)) && (*(arg1 + 0xc) == 0)))) {\n        iVar10 = fcn.14001ad90();\n        if (*(iVar10 + 0x20) == 0) goto code_r0x00014001bc9f;\n        iVar10 = fcn.14001ad90();\n        arg1 = *(iVar10 + 0x20);\n        iVar10 = fcn.14001ad90();\n        cStack263 = '\\x01';\n        arg3 = *(iVar10 + 0x28);\n        uStack256 = arg3;\n        fcn.140019f28(*(arg1 + 0xe));\n        if (((*arg1 == -0x1f928c9d) && (arg1[6] == 4)) && ((arg1[8] + 0xe66cfae0U < 3 && (*(arg1 + 0xc) == 0))))\n        goto code_r0x00014001bd06;\n        iVar10 = fcn.14001ad90();\n        if (*(iVar10 + 0x38) != 0) {\n            iVar10 = fcn.14001ad90();\n            uVar11 = *(iVar10 + 0x38);\n            iVar10 = fcn.14001ad90();\n            *(iVar10 + 0x38) = 0;\n            cVar6 = fcn.14001dc3c(arg1, uVar11);\n            arg3 = uStack256;\n            if (cVar6 == '\\0') {\n                cVar7 = fcn.14001dd2c(uVar11);\n                if (cVar7 != '\\0') {\n                    fcn.14001a260(arg1);\n                    fcn.14001d01c(&var_bp_68h);\n                    fcn.14001acb8(&var_bp_68h, 0x14003c828);\n                    pcVar4 = swi(3);\n                    (*pcVar4)();\n                    return;\n                }\n                fcn.140018028(uVar11);\n                pcVar4 = swi(3);\n                (*pcVar4)();\n                return;\n            }\n        }\n    }\n    uStack168 = *(arg4 + 2);\n    puStack176 = noname_4;\n    if (((*arg1 == -0x1f928c9d) && (arg1[6] == 4)) && (arg1[8] + 0xe66cfae0U < 3)) {\n        if (*(noname_4 + 0xc) != 0) {\n            puStack320 = puStack320 & 0xffffffff00000000 | noname_6 & 0xffffffff;\n            puStack328 = noname_4;\n            fcn.1400197cc(&uStack144, &puStack176, uVar8, arg4);\n            uStack160 = uStack144;\n            uStack156 = uStack140;\n            uStack152 = var_80h;\n            uStack148 = var_80h._4_4_;\n            if (var_80h < var_70h) {\n                iVar10 = CONCAT44(uStack140, uStack144);\n                iStack240 = iVar10;\n                do {\n                    iVar1 = *(*CONCAT44(uStack156, uStack160) + 0x10) + var_80h * 0x14;\n                    piVar2 = iVar1 + *(iVar10 + 8);\n                    iStack200 = *piVar2;\n                    iStack196 = piVar2[1];\n                    iStack192 = piVar2[2];\n                    uVar5 = piVar2[3];\n                    iStack184 = *(iVar1 + 0x10 + *(iVar10 + 8));\n                    uStack188 = uVar5;\n                    if ((iStack200 <= uVar8) && (uVar8 <= iStack196)) {\n                        iStack208 = iStack184 + *(arg4 + 2);\n                        uVar13 = 0;\n                        cVar7 = cStack264;\n                        if (uVar5 != 0) {\n                            do {\n                                puVar3 = iStack208 + uVar13 * 0x14;\n                                var_bp_68h._0_4_ = *puVar3;\n                                var_bp_68h._4_4_ = puVar3[1];\n                                var_bp_60h._0_4_ = puVar3[2];\n                                var_bp_60h._4_4_ = puVar3[3];\n                                var_58h._0_4_ = *(iStack208 + 0x10 + uVar13 * 0x14);\n                                iVar10 = fcn.140019efc();\n                                piStack248 = iVar10 + 4 + *(*(arg1 + 0xc) + 0xc);\n                                iVar10 = fcn.140019efc();\n                                iStack260 = *(iVar10 + *(*(arg1 + 0xc) + 0xc));\n                                iVar10 = iStack240;\n                                for (; iStack240 = iVar10,  0 < iStack260; iStack260 = iStack260 + -1) {\n                                    iVar10 = fcn.140019efc();\n                                    uStack216 = iVar10 + *piStack248;\n                                    iVar9 = fcn.14001c724(&var_bp_68h, uStack216, *(arg1 + 0xc));\n                                    if (iVar9 != 0) {\n                                        cStack272 = noname_5;\n                                        cStack280 = cStack263;\n                                        piStack288 = piStack224;\n                                        uStack296 = uStack296 & 0xffffffff00000000 | noname_6 & 0xffffffff;\n                                        uStack304 = &iStack200;\n                                        uStack312 = uStack216;\n                                        puStack320 = &var_bp_68h;\n                                        puStack328 = noname_4;\n                                        cStack264 = '\\x01';\n                                        fcn.14001b674(arg1, uStack232, uStack256, arg4);\n                                        iVar10 = iStack240;\n                                        cVar7 = '\\x01';\n                                        goto code_r0x00014001bb68;\n                                    }\n                                    piStack248 = piStack248 + 1;\n                                    iVar10 = iStack240;\n                                }\n                                uVar12 = uVar13 + 1;\n                                uVar13 = uVar12;\n                                cVar7 = cStack264;\n                            } while (uVar12 != uVar5);\n                        }\n                    }\ncode_r0x00014001bb68:\n                    var_80h._0_4_ = var_80h + 1;\n                } while (var_80h < var_70h);\n                arg2 = uStack232;\n                if (cVar7 != '\\0') goto code_r0x00014001bc93;\n            }\n        }\n        if ((0x19930520 < (*noname_4 & 0x1fffffff)) &&\n           (((*(noname_4 + 4) != 0 && (iVar10 = fcn.140019ee8(),  iVar10 + *(noname_4 + 4) != 0)) ||\n            (((*(noname_4 + 0x24) >> 2 & 1) != 0 && (cVar7 = fcn.140019610(arg4, noname_4),  cVar7 == '\\0')))))) {\n            if ((*(noname_4 + 0x24) >> 2 & 1) != 0) {\n                iVar10 = fcn.14001ad90();\n                *(iVar10 + 0x20) = arg1;\n                iVar10 = fcn.14001ad90();\n                *(iVar10 + 0x28) = uStack256;\n                fcn.140018028(uStack256);\n                pcVar4 = swi(3);\n                (*pcVar4)();\n                return;\n            }\n            if (*(noname_4 + 4) == 0) {\n                iVar10 = 0;\n            }\n            else {\n                iVar10 = fcn.140019ee8();\n                iVar10 = iVar10 + *(noname_4 + 4);\n            }\n            cVar7 = fcn.14001dc3c(arg1, iVar10);\n            if (cVar7 == '\\0') {\n                uVar11 = fcn.1400196dc(arg2, arg4, noname_4, &uStack216);\n                cStack280 = noname_5;\n                uStack296 = 0;\n                uStack304 = CONCAT44(uStack304._4_4_, 0xffffffff);\n                uStack312 = CONCAT44(uStack312._4_4_, 0xffffffff);\n                puStack320 = noname_4;\n                puStack328 = NULL;\n                piStack288 = arg4;\n                fcn.140019a74(arg2, arg1, uStack256, uVar11);\n            }\n        }\n    }\n    else if (*(noname_4 + 0xc) != 0) {\n        if (noname_5 != '\\0') goto code_r0x00014001bd06;\n        uStack304 = piStack224;\n        uStack312 = uStack312 & 0xffffffff00000000 | noname_6 & 0xffffffff;\n        puStack320 = puStack320 & 0xffffffff00000000 | uVar8;\n        puStack328 = noname_4;\n        fcn.14001c21c(arg1, arg2, arg3, arg4);\n    }\ncode_r0x00014001bc93:\n    iVar10 = fcn.14001ad90();\n    if (*(iVar10 + 0x38) == 0) {\ncode_r0x00014001bc9f:\n        fcn.140018790(var_bp_50h ^ auStack360);\n        return;\n    }\ncode_r0x00014001bd06:\n    fcn.140014c5c();\n    pcVar4 = swi(3);\n    (*pcVar4)();\n    return;\n}\n",
        "token_count": 3029
    },
    "14001ed0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.14001ed00(void)\n\n{\n    char cVar1;\n    ulong uVar2;\n    int64_t *piVar3;\n    bool bVar4;\n    \n    piVar3 = 0x140031090;\n    do {\n        if ((*piVar3 != 0) && (cVar1 = (**0x140031a58)(),  cVar1 == '\\0')) break;\n        piVar3 = piVar3 + 2;\n    } while (piVar3 != 0x140031190);\n    if (piVar3 == 0x140031190) {\n        uVar2 = 1;\n    }\n    else {\n        if (piVar3 != 0x140031090) {\n            piVar3 = piVar3 + -1;\n            do {\n                if ((piVar3[-1] != 0) && (*piVar3 != 0)) {\n                    (**0x140031a58)(0);\n                }\n                bVar4 = piVar3 != 0x140031098;\n                piVar3 = piVar3 + -2;\n            } while (bVar4);\n        }\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 266
    },
    "14001fb0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint64_t fcn.14001fb0c(int64_t arg1)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint64_t uVar3;\n    int64_t iVar4;\n    \n    iVar1 = *(arg1 + 0x34);\n    if (iVar1 < 6) {\n        if (iVar1 != 5) {\n            if (iVar1 != 0) {\n                if (iVar1 == 1) {\n                    uVar2 = *(arg1 + 0x28);\n                    iVar4 = 1;\n                    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n                    if ((uVar2 >> 4 & 1) == 0) {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    else {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    goto code_r0x00014001fb77;\n                }\n                iVar1 = iVar1 + -2;\n                if (iVar1 == 0) {\n                    uVar2 = *(arg1 + 0x28);\n                    iVar4 = 2;\n                    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n                    if ((uVar2 >> 4 & 1) == 0) {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    else {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    goto code_r0x00014001fb77;\n                }\n                goto code_r0x00014001fb4a;\n            }\ncode_r0x00014001fc47:\n            uVar2 = *(arg1 + 0x28);\n            iVar4 = 4;\n            *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n            if ((uVar2 >> 4 & 1) == 0) {\n                uVar3 = *(*(arg1 + 0x18) + -8);\n            }\n            else {\n                uVar3 = *(*(arg1 + 0x18) + -8);\n            }\n            goto code_r0x00014001fb77;\n        }\n    }\n    else if (((iVar1 != 6) && (iVar1 != 7)) && (iVar1 = iVar1 + -9,  iVar1 != 0)) {\ncode_r0x00014001fb4a:\n        if (iVar1 == 1) goto code_r0x00014001fc47;\n        if (iVar1 != 2) {\n            iVar4 = *(arg1 + 8);\n            *(iVar4 + 0x30) = 1;\n            *(iVar4 + 0x2c) = 0x16;\n            uVar3 = fcn.140013f90(0, 0, 0, 0);\n            return uVar3 & 0xffffffffffffff00;\n        }\n    }\n    uVar2 = *(arg1 + 0x28);\n    iVar4 = 8;\n    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n    uVar3 = *(*(arg1 + 0x18) + -8);\ncode_r0x00014001fb77:\n    if (((uVar2 >> 4 & 1) != 0) && (uVar3 < 0)) {\n        uVar3 = -uVar3;\n        uVar2 = uVar2 | 0x40;\n        *(arg1 + 0x28) = uVar2;\n    }\n    if (*(arg1 + 0x30) < 0) {\n        *(arg1 + 0x30) = 1;\n    }\n    else {\n        *(arg1 + 0x28) = uVar2 & 0xfffffff7;\n        fcn.14001ef70(arg1 + 0x50, *(arg1 + 0x30), *(arg1 + 8));\n    }\n    if (uVar3 == 0) {\n        *(arg1 + 0x28) = *(arg1 + 0x28) & 0xffffffdf;\n    }\n    *(arg1 + 0x4c) = 0;\n    if (iVar4 == 8) {\n        fcn.140020a1c(arg1, uVar3);\n    }\n    else {\n        fcn.140020688(arg1, uVar3 & 0xffffffff);\n    }\n    uVar2 = *(arg1 + 0x28);\n    if (((uVar2 >> 7 & 1) != 0) && ((*(arg1 + 0x48) == 0 || (**(arg1 + 0x40) != '0')))) {\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -1;\n        **(arg1 + 0x40) = 0x30;\n        *(arg1 + 0x48) = *(arg1 + 0x48) + 1;\n    }\n    return CONCAT71(uVar2 >> 0xf, 1);\n}\n",
        "token_count": 1158
    },
    "14001fcf": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint64_t fcn.14001fcf4(int64_t arg1)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint64_t uVar3;\n    int64_t iVar4;\n    \n    iVar1 = *(arg1 + 0x34);\n    if (iVar1 < 6) {\n        if (iVar1 != 5) {\n            if (iVar1 != 0) {\n                if (iVar1 == 1) {\n                    uVar2 = *(arg1 + 0x28);\n                    iVar4 = 1;\n                    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n                    if ((uVar2 >> 4 & 1) == 0) {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    else {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    goto code_r0x00014001fd5f;\n                }\n                iVar1 = iVar1 + -2;\n                if (iVar1 == 0) {\n                    uVar2 = *(arg1 + 0x28);\n                    iVar4 = 2;\n                    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n                    if ((uVar2 >> 4 & 1) == 0) {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    else {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    goto code_r0x00014001fd5f;\n                }\n                goto code_r0x00014001fd32;\n            }\ncode_r0x00014001fe2f:\n            uVar2 = *(arg1 + 0x28);\n            iVar4 = 4;\n            *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n            if ((uVar2 >> 4 & 1) == 0) {\n                uVar3 = *(*(arg1 + 0x18) + -8);\n            }\n            else {\n                uVar3 = *(*(arg1 + 0x18) + -8);\n            }\n            goto code_r0x00014001fd5f;\n        }\n    }\n    else if (((iVar1 != 6) && (iVar1 != 7)) && (iVar1 = iVar1 + -9,  iVar1 != 0)) {\ncode_r0x00014001fd32:\n        if (iVar1 == 1) goto code_r0x00014001fe2f;\n        if (iVar1 != 2) {\n            iVar4 = *(arg1 + 8);\n            *(iVar4 + 0x30) = 1;\n            *(iVar4 + 0x2c) = 0x16;\n            uVar3 = fcn.140013f90(0, 0, 0, 0);\n            return uVar3 & 0xffffffffffffff00;\n        }\n    }\n    uVar2 = *(arg1 + 0x28);\n    iVar4 = 8;\n    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n    uVar3 = *(*(arg1 + 0x18) + -8);\ncode_r0x00014001fd5f:\n    if (((uVar2 >> 4 & 1) != 0) && (uVar3 < 0)) {\n        uVar3 = -uVar3;\n        uVar2 = uVar2 | 0x40;\n        *(arg1 + 0x28) = uVar2;\n    }\n    if (*(arg1 + 0x30) < 0) {\n        *(arg1 + 0x30) = 1;\n    }\n    else {\n        *(arg1 + 0x28) = uVar2 & 0xfffffff7;\n        fcn.14001f018(arg1 + 0x50, *(arg1 + 0x30), *(arg1 + 8));\n    }\n    if (uVar3 == 0) {\n        *(arg1 + 0x28) = *(arg1 + 0x28) & 0xffffffdf;\n    }\n    *(arg1 + 0x4c) = 1;\n    if (iVar4 == 8) {\n        fcn.140020a98(arg1, uVar3);\n    }\n    else {\n        fcn.140020704(arg1, uVar3 & 0xffffffff);\n    }\n    uVar2 = *(arg1 + 0x28) >> 7;\n    uVar3 = uVar2;\n    if (((uVar2 & 1) != 0) && ((uVar3 = 0,  *(arg1 + 0x48) == 0 || (**(arg1 + 0x40) != 0x30)))) {\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -2;\n        **(arg1 + 0x40) = 0x30;\n        *(arg1 + 0x48) = *(arg1 + 0x48) + 1;\n    }\n    return CONCAT71(uVar3 >> 8, 1);\n}\n",
        "token_count": 1179
    },
    "14001fee": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint64_t fcn.14001fee0(int64_t arg1)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint64_t uVar3;\n    int64_t iVar4;\n    \n    iVar1 = *(arg1 + 0x34);\n    if (iVar1 < 6) {\n        if (iVar1 != 5) {\n            if (iVar1 != 0) {\n                if (iVar1 == 1) {\n                    uVar2 = *(arg1 + 0x28);\n                    iVar4 = 1;\n                    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n                    if ((uVar2 >> 4 & 1) == 0) {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    else {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    goto code_r0x00014001ff4b;\n                }\n                iVar1 = iVar1 + -2;\n                if (iVar1 == 0) {\n                    uVar2 = *(arg1 + 0x28);\n                    iVar4 = 2;\n                    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n                    if ((uVar2 >> 4 & 1) == 0) {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    else {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    goto code_r0x00014001ff4b;\n                }\n                goto code_r0x00014001ff1e;\n            }\ncode_r0x00014002001b:\n            uVar2 = *(arg1 + 0x28);\n            iVar4 = 4;\n            *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n            if ((uVar2 >> 4 & 1) == 0) {\n                uVar3 = *(*(arg1 + 0x18) + -8);\n            }\n            else {\n                uVar3 = *(*(arg1 + 0x18) + -8);\n            }\n            goto code_r0x00014001ff4b;\n        }\n    }\n    else if (((iVar1 != 6) && (iVar1 != 7)) && (iVar1 = iVar1 + -9,  iVar1 != 0)) {\ncode_r0x00014001ff1e:\n        if (iVar1 == 1) goto code_r0x00014002001b;\n        if (iVar1 != 2) {\n            iVar4 = *(arg1 + 8);\n            *(iVar4 + 0x30) = 1;\n            *(iVar4 + 0x2c) = 0x16;\n            uVar3 = fcn.140013f90(0, 0, 0, 0);\n            return uVar3 & 0xffffffffffffff00;\n        }\n    }\n    uVar2 = *(arg1 + 0x28);\n    iVar4 = 8;\n    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n    uVar3 = *(*(arg1 + 0x18) + -8);\ncode_r0x00014001ff4b:\n    if (((uVar2 >> 4 & 1) != 0) && (uVar3 < 0)) {\n        uVar3 = -uVar3;\n        uVar2 = uVar2 | 0x40;\n        *(arg1 + 0x28) = uVar2;\n    }\n    if (*(arg1 + 0x30) < 0) {\n        *(arg1 + 0x30) = 1;\n    }\n    else {\n        *(arg1 + 0x28) = uVar2 & 0xfffffff7;\n        fcn.14001ef70(arg1 + 0x50, *(arg1 + 0x30), *(arg1 + 8));\n    }\n    if (uVar3 == 0) {\n        *(arg1 + 0x28) = *(arg1 + 0x28) & 0xffffffdf;\n    }\n    *(arg1 + 0x4c) = 0;\n    if (iVar4 == 8) {\n        fcn.140020b20(arg1, uVar3);\n    }\n    else {\n        fcn.14002078c(arg1, uVar3 & 0xffffffff);\n    }\n    uVar2 = *(arg1 + 0x28);\n    if (((uVar2 >> 7 & 1) != 0) && ((*(arg1 + 0x48) == 0 || (**(arg1 + 0x40) != '0')))) {\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -1;\n        **(arg1 + 0x40) = 0x30;\n        *(arg1 + 0x48) = *(arg1 + 0x48) + 1;\n    }\n    return CONCAT71(uVar2 >> 0xf, 1);\n}\n",
        "token_count": 1161
    },
    "1400200c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint64_t fcn.1400200c8(int64_t arg1)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint64_t uVar3;\n    int64_t iVar4;\n    \n    iVar1 = *(arg1 + 0x34);\n    if (iVar1 < 6) {\n        if (iVar1 != 5) {\n            if (iVar1 != 0) {\n                if (iVar1 == 1) {\n                    uVar2 = *(arg1 + 0x28);\n                    iVar4 = 1;\n                    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n                    if ((uVar2 >> 4 & 1) == 0) {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    else {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    goto code_r0x000140020133;\n                }\n                iVar1 = iVar1 + -2;\n                if (iVar1 == 0) {\n                    uVar2 = *(arg1 + 0x28);\n                    iVar4 = 2;\n                    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n                    if ((uVar2 >> 4 & 1) == 0) {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    else {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    goto code_r0x000140020133;\n                }\n                goto code_r0x000140020106;\n            }\ncode_r0x000140020203:\n            uVar2 = *(arg1 + 0x28);\n            iVar4 = 4;\n            *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n            if ((uVar2 >> 4 & 1) == 0) {\n                uVar3 = *(*(arg1 + 0x18) + -8);\n            }\n            else {\n                uVar3 = *(*(arg1 + 0x18) + -8);\n            }\n            goto code_r0x000140020133;\n        }\n    }\n    else if (((iVar1 != 6) && (iVar1 != 7)) && (iVar1 = iVar1 + -9,  iVar1 != 0)) {\ncode_r0x000140020106:\n        if (iVar1 == 1) goto code_r0x000140020203;\n        if (iVar1 != 2) {\n            iVar4 = *(arg1 + 8);\n            *(iVar4 + 0x30) = 1;\n            *(iVar4 + 0x2c) = 0x16;\n            uVar3 = fcn.140013f90(0, 0, 0, 0);\n            return uVar3 & 0xffffffffffffff00;\n        }\n    }\n    uVar2 = *(arg1 + 0x28);\n    iVar4 = 8;\n    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n    uVar3 = *(*(arg1 + 0x18) + -8);\ncode_r0x000140020133:\n    if (((uVar2 >> 4 & 1) != 0) && (uVar3 < 0)) {\n        uVar3 = -uVar3;\n        uVar2 = uVar2 | 0x40;\n        *(arg1 + 0x28) = uVar2;\n    }\n    if (*(arg1 + 0x30) < 0) {\n        *(arg1 + 0x30) = 1;\n    }\n    else {\n        *(arg1 + 0x28) = uVar2 & 0xfffffff7;\n        fcn.14001f018(arg1 + 0x50, *(arg1 + 0x30), *(arg1 + 8));\n    }\n    if (uVar3 == 0) {\n        *(arg1 + 0x28) = *(arg1 + 0x28) & 0xffffffdf;\n    }\n    *(arg1 + 0x4c) = 1;\n    if (iVar4 == 8) {\n        fcn.140020bcc(arg1, uVar3);\n    }\n    else {\n        fcn.140020834(arg1, uVar3 & 0xffffffff);\n    }\n    uVar2 = *(arg1 + 0x28) >> 7;\n    uVar3 = uVar2;\n    if (((uVar2 & 1) != 0) && ((uVar3 = 0,  *(arg1 + 0x48) == 0 || (**(arg1 + 0x40) != 0x30)))) {\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -2;\n        **(arg1 + 0x40) = 0x30;\n        *(arg1 + 0x48) = *(arg1 + 0x48) + 1;\n    }\n    return CONCAT71(uVar3 >> 8, 1);\n}\n",
        "token_count": 1164
    },
    "1400202b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint64_t fcn.1400202b4(int64_t arg1)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint64_t uVar3;\n    int64_t iVar4;\n    \n    iVar1 = *(arg1 + 0x34);\n    if (iVar1 < 6) {\n        if (iVar1 != 5) {\n            if (iVar1 != 0) {\n                if (iVar1 == 1) {\n                    uVar2 = *(arg1 + 0x28);\n                    iVar4 = 1;\n                    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n                    if ((uVar2 >> 4 & 1) == 0) {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    else {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    goto code_r0x00014002031f;\n                }\n                iVar1 = iVar1 + -2;\n                if (iVar1 == 0) {\n                    uVar2 = *(arg1 + 0x28);\n                    iVar4 = 2;\n                    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n                    if ((uVar2 >> 4 & 1) == 0) {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    else {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    goto code_r0x00014002031f;\n                }\n                goto code_r0x0001400202f2;\n            }\ncode_r0x0001400203ef:\n            uVar2 = *(arg1 + 0x28);\n            iVar4 = 4;\n            *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n            if ((uVar2 >> 4 & 1) == 0) {\n                uVar3 = *(*(arg1 + 0x18) + -8);\n            }\n            else {\n                uVar3 = *(*(arg1 + 0x18) + -8);\n            }\n            goto code_r0x00014002031f;\n        }\n    }\n    else if (((iVar1 != 6) && (iVar1 != 7)) && (iVar1 = iVar1 + -9,  iVar1 != 0)) {\ncode_r0x0001400202f2:\n        if (iVar1 == 1) goto code_r0x0001400203ef;\n        if (iVar1 != 2) {\n            iVar4 = *(arg1 + 8);\n            *(iVar4 + 0x30) = 1;\n            *(iVar4 + 0x2c) = 0x16;\n            uVar3 = fcn.140013f90(0, 0, 0, 0);\n            return uVar3 & 0xffffffffffffff00;\n        }\n    }\n    uVar2 = *(arg1 + 0x28);\n    iVar4 = 8;\n    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n    uVar3 = *(*(arg1 + 0x18) + -8);\ncode_r0x00014002031f:\n    if (((uVar2 >> 4 & 1) != 0) && (uVar3 < 0)) {\n        uVar3 = -uVar3;\n        uVar2 = uVar2 | 0x40;\n        *(arg1 + 0x28) = uVar2;\n    }\n    if (*(arg1 + 0x30) < 0) {\n        *(arg1 + 0x30) = 1;\n    }\n    else {\n        *(arg1 + 0x28) = uVar2 & 0xfffffff7;\n        fcn.14001ef70(arg1 + 0x50, *(arg1 + 0x30), *(arg1 + 8));\n    }\n    if (uVar3 == 0) {\n        *(arg1 + 0x28) = *(arg1 + 0x28) & 0xffffffdf;\n    }\n    *(arg1 + 0x4c) = 0;\n    if (iVar4 == 8) {\n        fcn.140020c8c(arg1, uVar3);\n    }\n    else {\n        fcn.1400208ec(arg1, uVar3 & 0xffffffff);\n    }\n    uVar2 = *(arg1 + 0x28);\n    if (((uVar2 >> 7 & 1) != 0) && ((*(arg1 + 0x48) == 0 || (**(arg1 + 0x40) != '0')))) {\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -1;\n        **(arg1 + 0x40) = 0x30;\n        *(arg1 + 0x48) = *(arg1 + 0x48) + 1;\n    }\n    return CONCAT71(uVar2 >> 0xf, 1);\n}\n",
        "token_count": 1159
    },
    "14002049": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint64_t fcn.14002049c(int64_t arg1)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint64_t uVar3;\n    int64_t iVar4;\n    \n    iVar1 = *(arg1 + 0x34);\n    if (iVar1 < 6) {\n        if (iVar1 != 5) {\n            if (iVar1 != 0) {\n                if (iVar1 == 1) {\n                    uVar2 = *(arg1 + 0x28);\n                    iVar4 = 1;\n                    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n                    if ((uVar2 >> 4 & 1) == 0) {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    else {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    goto code_r0x000140020507;\n                }\n                iVar1 = iVar1 + -2;\n                if (iVar1 == 0) {\n                    uVar2 = *(arg1 + 0x28);\n                    iVar4 = 2;\n                    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n                    if ((uVar2 >> 4 & 1) == 0) {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    else {\n                        uVar3 = *(*(arg1 + 0x18) + -8);\n                    }\n                    goto code_r0x000140020507;\n                }\n                goto code_r0x0001400204da;\n            }\ncode_r0x0001400205d7:\n            uVar2 = *(arg1 + 0x28);\n            iVar4 = 4;\n            *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n            if ((uVar2 >> 4 & 1) == 0) {\n                uVar3 = *(*(arg1 + 0x18) + -8);\n            }\n            else {\n                uVar3 = *(*(arg1 + 0x18) + -8);\n            }\n            goto code_r0x000140020507;\n        }\n    }\n    else if (((iVar1 != 6) && (iVar1 != 7)) && (iVar1 = iVar1 + -9,  iVar1 != 0)) {\ncode_r0x0001400204da:\n        if (iVar1 == 1) goto code_r0x0001400205d7;\n        if (iVar1 != 2) {\n            iVar4 = *(arg1 + 8);\n            *(iVar4 + 0x30) = 1;\n            *(iVar4 + 0x2c) = 0x16;\n            uVar3 = fcn.140013f90(0, 0, 0, 0);\n            return uVar3 & 0xffffffffffffff00;\n        }\n    }\n    uVar2 = *(arg1 + 0x28);\n    iVar4 = 8;\n    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n    uVar3 = *(*(arg1 + 0x18) + -8);\ncode_r0x000140020507:\n    if (((uVar2 >> 4 & 1) != 0) && (uVar3 < 0)) {\n        uVar3 = -uVar3;\n        uVar2 = uVar2 | 0x40;\n        *(arg1 + 0x28) = uVar2;\n    }\n    if (*(arg1 + 0x30) < 0) {\n        *(arg1 + 0x30) = 1;\n    }\n    else {\n        *(arg1 + 0x28) = uVar2 & 0xfffffff7;\n        fcn.14001f018(arg1 + 0x50, *(arg1 + 0x30), *(arg1 + 8));\n    }\n    if (uVar3 == 0) {\n        *(arg1 + 0x28) = *(arg1 + 0x28) & 0xffffffdf;\n    }\n    *(arg1 + 0x4c) = 1;\n    if (iVar4 == 8) {\n        fcn.140020d18(arg1, uVar3);\n    }\n    else {\n        fcn.140020978(arg1, uVar3 & 0xffffffff);\n    }\n    uVar2 = *(arg1 + 0x28) >> 7;\n    uVar3 = uVar2;\n    if (((uVar2 & 1) != 0) && ((uVar3 = 0,  *(arg1 + 0x48) == 0 || (**(arg1 + 0x40) != 0x30)))) {\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -2;\n        **(arg1 + 0x40) = 0x30;\n        *(arg1 + 0x48) = *(arg1 + 0x48) + 1;\n    }\n    return CONCAT71(uVar3 >> 8, 1);\n}\n",
        "token_count": 1170
    },
    "140020f4": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nuint fcn.140020f48(int64_t arg1, ulong noname_1, ulong arg3)\n\n{\n    char cVar1;\n    uint uVar2;\n    uint8_t uVar3;\n    int32_t iVar4;\n    int64_t iVar5;\n    \n    iVar5 = *(arg1 + 8);\n    if (*(arg1 + 0x460) == 0) {\n        *(iVar5 + 0x30) = 1;\n        *(iVar5 + 0x2c) = 0x16;\ncode_r0x0001400212bb:\n        fcn.140013f90(0, 0, 0, 0);\ncode_r0x0001400212d4:\n        uVar2 = 0xffffffff;\n    }\n    else if (*(arg1 + 0x10) == 0) {\n        *(iVar5 + 0x30) = 1;\n        *(iVar5 + 0x2c) = 0x16;\n        fcn.140013f90(0, 0, 0, 0);\n        uVar2 = 0xffffffff;\n    }\n    else {\n        *(arg1 + 0x468) = *(arg1 + 0x468) + 1;\n        iVar4 = *(arg1 + 0x468);\n        while (iVar4 != 2) {\n            *(arg1 + 0x48) = 0;\n            *(arg1 + 0x24) = 0;\n            cVar1 = **(arg1 + 0x10);\n            *(arg1 + 0x10) = *(arg1 + 0x10) + 1;\n            *(arg1 + 0x39) = cVar1;\n            if (cVar1 != '\\0') {\n                do {\n                    if (*(arg1 + 0x20) < 0) break;\n                    uVar3 = 0;\n                    if (cVar1 - 0x20U < 0x5b) {\n                        uVar3 = *((cVar1 - 0x20U & 0x7f) * 2 + 0x140034c81);\n                    }\n                    uVar3 = *((uVar3 * 9 + *(arg1 + 0x24) & 0x7f) * 2 + 0x140034c80);\n                    *(arg1 + 0x24) = uVar3;\n                    if (7 < uVar3) goto code_r0x0001400212a8;\n                    if (uVar3 == 0) {\n                        iVar5 = *(arg1 + 8);\n                        *(arg1 + 0x4c) = 0;\n                        if (*(iVar5 + 0x28) == '\\0') {\n                            fcn.140017aa0(iVar5);\n                            cVar1 = *(arg1 + 0x39);\n                        }\n                        if ((-2 < cVar1) && ((*(**(iVar5 + 0x18) + cVar1 * 2) & 0x8000) != 0)) {\n                            iVar5 = *(arg1 + 0x460);\n                            if (*(iVar5 + 0x10) == *(iVar5 + 8)) {\n                                if (*(iVar5 + 0x18) == '\\0') {\n                                    *(arg1 + 0x20) = 0xffffffff;\n                                }\n                                else {\n                                    *(arg1 + 0x20) = *(arg1 + 0x20) + 1;\n                                }\n                            }\n                            else {\n                                *(arg1 + 0x20) = *(arg1 + 0x20) + 1;\n                                *(iVar5 + 0x10) = *(iVar5 + 0x10) + 1;\n                                ***(arg1 + 0x460) = cVar1;\n                                **(arg1 + 0x460) = **(arg1 + 0x460) + 1;\n                            }\n                            cVar1 = **(arg1 + 0x10);\n                            *(arg1 + 0x10) = *(arg1 + 0x10) + 1;\n                            *(arg1 + 0x39) = cVar1;\n                            if (cVar1 == '\\0') {\n                                iVar5 = *(arg1 + 8);\n                                *(iVar5 + 0x30) = 1;\n                                *(iVar5 + 0x2c) = 0x16;\n                                fcn.140013f90(0, 0, 0, 0);\n                                goto code_r0x0001400212a8;\n                            }\n                        }\n                        iVar5 = *(arg1 + 0x460);\n                        if (*(iVar5 + 0x10) == *(iVar5 + 8)) {\n                            if (*(iVar5 + 0x18) == '\\0') {\n                                *(arg1 + 0x20) = 0xffffffff;\n                            }\n                            else {\n                                *(arg1 + 0x20) = *(arg1 + 0x20) + 1;\n                            }\n                        }\n                        else {\n                            *(arg1 + 0x20) = *(arg1 + 0x20) + 1;\n                            *(iVar5 + 0x10) = *(iVar5 + 0x10) + 1;\n                            ***(arg1 + 0x460) = cVar1;\n                            **(arg1 + 0x460) = **(arg1 + 0x460) + 1;\n                        }\n                    }\n                    else if (uVar3 == 1) {\n                        *(arg1 + 0x28) = 0;\n                        *(arg1 + 0x38) = 0;\n                        *(arg1 + 0x30) = 0xffffffff;\n                        *(arg1 + 0x34) = 0;\n                        *(arg1 + 0x4c) = 0;\n                    }\n                    else if (uVar3 == 2) {\n                        if (cVar1 == ' ') {\n                            *(arg1 + 0x28) = *(arg1 + 0x28) | 2;\n                        }\n                        else if (cVar1 == '#') {\n                            *(arg1 + 0x28) = *(arg1 + 0x28) | 0x20;\n                        }\n                        else if (cVar1 == '+') {\n                            *(arg1 + 0x28) = *(arg1 + 0x28) | 1;\n                        }\n                        else if (cVar1 == '-') {\n                            *(arg1 + 0x28) = *(arg1 + 0x28) | 4;\n                        }\n                        else if (cVar1 == '0') {\n                            *(arg1 + 0x28) = *(arg1 + 0x28) | 8;\n                        }\n                    }\n                    else {\n                        if (uVar3 == 3) {\n                            if (cVar1 == '*') {\n                                *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n                                iVar4 = *(*(arg1 + 0x18) + -8);\n                                *(arg1 + 0x2c) = iVar4;\n                                if (iVar4 < 0) {\n                                    *(arg1 + 0x28) = *(arg1 + 0x28) | 4;\n                                    *(arg1 + 0x2c) = -iVar4;\n                                }\ncode_r0x0001400210e2:\n                                cVar1 = '\\x01';\n                            }\n                            else {\n                                iVar5 = arg1 + 0x2c;\ncode_r0x000140021092:\n                                cVar1 = fcn.140020e28(arg1, iVar5);\n                            }\n                        }\n                        else {\n                            if (uVar3 == 4) {\n                                *(arg1 + 0x30) = 0;\n                                goto code_r0x00014002122a;\n                            }\n                            if (uVar3 == 5) {\n                                if (cVar1 == '*') {\n                                    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n                                    iVar4 = *(*(arg1 + 0x18) + -8);\n                                    if (iVar4 < 0) {\n                                        iVar4 = -1;\n                                    }\n                                    *(arg1 + 0x30) = iVar4;\n                                    goto code_r0x0001400210e2;\n                                }\n                                iVar5 = arg1 + 0x30;\n                                goto code_r0x000140021092;\n                            }\n                            if (uVar3 == 6) {\n                                cVar1 = fcn.140021920(arg1);\n                            }\n                            else {\n                                if (uVar3 != 7) goto code_r0x0001400212d4;\n                                cVar1 = fcn.140021c50(arg1);\n                            }\n                        }\n                        if (cVar1 == '\\0') goto code_r0x0001400212d4;\n                    }\ncode_r0x00014002122a:\n                    cVar1 = **(arg1 + 0x10);\n                    *(arg1 + 0x10) = *(arg1 + 0x10) + 1;\n                    *(arg1 + 0x39) = cVar1;\n                } while (cVar1 != '\\0');\n                if ((*(arg1 + 0x24) != '\\0') && (*(arg1 + 0x24) != '\\a')) {\ncode_r0x0001400212a8:\n                    iVar5 = *(arg1 + 8);\n                    *(iVar5 + 0x30) = 1;\n                    *(iVar5 + 0x2c) = 0x16;\n                    goto code_r0x0001400212bb;\n                }\n            }\n            *(arg1 + 0x468) = *(arg1 + 0x468) + 1;\n            iVar4 = *(arg1 + 0x468);\n        }\n        uVar2 = *(arg1 + 0x20);\n    }\n    return uVar2;\n}\n",
        "token_count": 2205
    },
    "1400212d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nuint fcn.1400212d8(int64_t arg1, ulong noname_1, ulong arg3)\n\n{\n    char cVar1;\n    uint uVar2;\n    uint8_t uVar3;\n    int32_t iVar4;\n    int64_t iVar5;\n    \n    iVar5 = *(arg1 + 8);\n    if (*(arg1 + 0x460) == 0) {\n        *(iVar5 + 0x30) = 1;\n        *(iVar5 + 0x2c) = 0x16;\ncode_r0x00014002163d:\n        fcn.140013f90(0, 0, 0, 0);\ncode_r0x000140021656:\n        uVar2 = 0xffffffff;\n    }\n    else if (*(arg1 + 0x10) == 0) {\n        *(iVar5 + 0x30) = 1;\n        *(iVar5 + 0x2c) = 0x16;\n        fcn.140013f90(0, 0, 0, 0);\n        uVar2 = 0xffffffff;\n    }\n    else {\n        *(arg1 + 0x468) = *(arg1 + 0x468) + 1;\n        iVar4 = *(arg1 + 0x468);\n        while (iVar4 != 2) {\n            *(arg1 + 0x48) = 0;\n            *(arg1 + 0x24) = 0;\n            cVar1 = **(arg1 + 0x10);\n            *(arg1 + 0x10) = *(arg1 + 0x10) + 1;\n            *(arg1 + 0x39) = cVar1;\n            while ((cVar1 != '\\0' && (-1 < *(arg1 + 0x20)))) {\n                uVar3 = 0;\n                if (cVar1 - 0x20U < 0x5b) {\n                    uVar3 = *((cVar1 - 0x20U & 0x7f) * 2 + 0x140034b81);\n                }\n                uVar3 = *((*(arg1 + 0x24) + uVar3 * 8 & 0x7f) * 2 + 0x140034b80);\n                *(arg1 + 0x24) = uVar3;\n                if (7 < uVar3) {\ncode_r0x00014002162a:\n                    iVar5 = *(arg1 + 8);\n                    *(iVar5 + 0x30) = 1;\n                    *(iVar5 + 0x2c) = 0x16;\n                    goto code_r0x00014002163d;\n                }\n                if (uVar3 == 0) {\n                    iVar5 = *(arg1 + 8);\n                    *(arg1 + 0x4c) = 0;\n                    if (*(iVar5 + 0x28) == '\\0') {\n                        fcn.140017aa0(iVar5);\n                        cVar1 = *(arg1 + 0x39);\n                    }\n                    if ((-2 < cVar1) && ((*(**(iVar5 + 0x18) + cVar1 * 2) & 0x8000) != 0)) {\n                        iVar5 = *(arg1 + 0x460);\n                        if (*(iVar5 + 0x10) == *(iVar5 + 8)) {\n                            if (*(iVar5 + 0x18) == '\\0') {\n                                *(arg1 + 0x20) = 0xffffffff;\n                            }\n                            else {\n                                *(arg1 + 0x20) = *(arg1 + 0x20) + 1;\n                            }\n                        }\n                        else {\n                            *(arg1 + 0x20) = *(arg1 + 0x20) + 1;\n                            *(iVar5 + 0x10) = *(iVar5 + 0x10) + 1;\n                            ***(arg1 + 0x460) = cVar1;\n                            **(arg1 + 0x460) = **(arg1 + 0x460) + 1;\n                        }\n                        cVar1 = **(arg1 + 0x10);\n                        *(arg1 + 0x10) = *(arg1 + 0x10) + 1;\n                        *(arg1 + 0x39) = cVar1;\n                        if (cVar1 == '\\0') {\n                            iVar5 = *(arg1 + 8);\n                            *(iVar5 + 0x30) = 1;\n                            *(iVar5 + 0x2c) = 0x16;\n                            fcn.140013f90(0, 0, 0, 0);\n                            goto code_r0x00014002162a;\n                        }\n                    }\n                    iVar5 = *(arg1 + 0x460);\n                    if (*(iVar5 + 0x10) == *(iVar5 + 8)) {\n                        if (*(iVar5 + 0x18) == '\\0') {\n                            *(arg1 + 0x20) = 0xffffffff;\n                        }\n                        else {\n                            *(arg1 + 0x20) = *(arg1 + 0x20) + 1;\n                        }\n                    }\n                    else {\n                        *(arg1 + 0x20) = *(arg1 + 0x20) + 1;\n                        *(iVar5 + 0x10) = *(iVar5 + 0x10) + 1;\n                        ***(arg1 + 0x460) = cVar1;\n                        **(arg1 + 0x460) = **(arg1 + 0x460) + 1;\n                    }\n                }\n                else if (uVar3 == 1) {\n                    *(arg1 + 0x28) = 0;\n                    *(arg1 + 0x38) = 0;\n                    *(arg1 + 0x30) = 0xffffffff;\n                    *(arg1 + 0x34) = 0;\n                    *(arg1 + 0x4c) = 0;\n                }\n                else if (uVar3 == 2) {\n                    if (cVar1 == ' ') {\n                        *(arg1 + 0x28) = *(arg1 + 0x28) | 2;\n                    }\n                    else if (cVar1 == '#') {\n                        *(arg1 + 0x28) = *(arg1 + 0x28) | 0x20;\n                    }\n                    else if (cVar1 == '+') {\n                        *(arg1 + 0x28) = *(arg1 + 0x28) | 1;\n                    }\n                    else if (cVar1 == '-') {\n                        *(arg1 + 0x28) = *(arg1 + 0x28) | 4;\n                    }\n                    else if (cVar1 == '0') {\n                        *(arg1 + 0x28) = *(arg1 + 0x28) | 8;\n                    }\n                }\n                else {\n                    if (uVar3 == 3) {\n                        if (cVar1 == '*') {\n                            *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n                            iVar4 = *(*(arg1 + 0x18) + -8);\n                            *(arg1 + 0x2c) = iVar4;\n                            if (iVar4 < 0) {\n                                *(arg1 + 0x28) = *(arg1 + 0x28) | 4;\n                                *(arg1 + 0x2c) = -iVar4;\n                            }\ncode_r0x00014002146f:\n                            cVar1 = '\\x01';\n                        }\n                        else {\n                            iVar5 = arg1 + 0x2c;\ncode_r0x00014002141f:\n                            cVar1 = fcn.140020e28(arg1, iVar5);\n                        }\n                    }\n                    else {\n                        if (uVar3 == 4) {\n                            *(arg1 + 0x30) = 0;\n                            goto code_r0x0001400215b7;\n                        }\n                        if (uVar3 == 5) {\n                            if (cVar1 == '*') {\n                                *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n                                iVar4 = *(*(arg1 + 0x18) + -8);\n                                if (iVar4 < 0) {\n                                    iVar4 = -1;\n                                }\n                                *(arg1 + 0x30) = iVar4;\n                                goto code_r0x00014002146f;\n                            }\n                            iVar5 = arg1 + 0x30;\n                            goto code_r0x00014002141f;\n                        }\n                        if (uVar3 == 6) {\n                            cVar1 = fcn.140021920(arg1);\n                        }\n                        else {\n                            if (uVar3 != 7) goto code_r0x000140021656;\n                            cVar1 = fcn.140021c50(arg1);\n                        }\n                    }\n                    if (cVar1 == '\\0') goto code_r0x000140021656;\n                }\ncode_r0x0001400215b7:\n                cVar1 = **(arg1 + 0x10);\n                *(arg1 + 0x10) = *(arg1 + 0x10) + 1;\n                *(arg1 + 0x39) = cVar1;\n            }\n            *(arg1 + 0x468) = *(arg1 + 0x468) + 1;\n            iVar4 = *(arg1 + 0x468);\n        }\n        uVar2 = *(arg1 + 0x20);\n    }\n    return uVar2;\n}\n",
        "token_count": 2140
    },
    "14002165": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nuint fcn.14002165c(int64_t arg1)\n\n{\n    uint16_t uVar1;\n    char cVar2;\n    uint uVar3;\n    uint8_t uVar4;\n    int32_t iVar5;\n    int64_t iVar6;\n    \n    iVar6 = *(arg1 + 8);\n    if (*(arg1 + 0x460) == 0) {\n        *(iVar6 + 0x30) = 1;\n        *(iVar6 + 0x2c) = 0x16;\ncode_r0x000140021902:\n        fcn.140013f90(0, 0, 0, 0);\ncode_r0x00014002191b:\n        uVar3 = 0xffffffff;\n    }\n    else if (*(arg1 + 0x10) == 0) {\n        *(iVar6 + 0x30) = 1;\n        *(iVar6 + 0x2c) = 0x16;\n        fcn.140013f90(0, 0, 0, 0);\n        uVar3 = 0xffffffff;\n    }\n    else {\n        *(arg1 + 0x468) = *(arg1 + 0x468) + 1;\n        if (*(arg1 + 0x468) != 2) {\ncode_r0x0001400216ef:\n            *(arg1 + 0x48) = 0;\n            *(arg1 + 0x24) = 0;\ncode_r0x00014002189f:\n            while( true ) {\n                while( true ) {\n                    while( true ) {\n                        uVar1 = **(arg1 + 0x10);\n                        *(arg1 + 0x10) = *(arg1 + 0x10) + 1;\n                        *(arg1 + 0x3a) = uVar1;\n                        if ((uVar1 == 0) || (iVar5 = *(arg1 + 0x20),  iVar5 < 0)) goto code_r0x0001400218be;\n                        uVar4 = 0;\n                        if (uVar1 - 0x20 < 0x5b) {\n                            uVar4 = *((uVar1 - 0x20 & 0x7f) * 2 + 0x140034b81);\n                        }\n                        uVar4 = *((*(arg1 + 0x24) + uVar4 * 8 & 0x7f) * 2 + 0x140034b80);\n                        *(arg1 + 0x24) = uVar4;\n                        if (7 < uVar4) {\n                            iVar6 = *(arg1 + 8);\n                            *(iVar6 + 0x30) = 1;\n                            *(iVar6 + 0x2c) = 0x16;\n                            goto code_r0x000140021902;\n                        }\n                        if (uVar4 != 0) break;\n                        *(arg1 + 0x4c) = 1;\n                        iVar6 = *(arg1 + 0x460);\n                        if (*(iVar6 + 0x10) == *(iVar6 + 8)) {\n                            if (*(iVar6 + 0x18) == '\\0') {\n                                *(arg1 + 0x20) = 0xffffffff;\n                            }\n                            else {\n                                *(arg1 + 0x20) = iVar5 + 1;\n                            }\n                        }\n                        else {\n                            *(arg1 + 0x20) = iVar5 + 1;\n                            *(iVar6 + 0x10) = *(iVar6 + 0x10) + 1;\n                            ***(arg1 + 0x460) = uVar1;\n                            **(arg1 + 0x460) = **(arg1 + 0x460) + 2;\n                        }\n                    }\n                    if (uVar4 != 1) break;\n                    *(arg1 + 0x28) = 0;\n                    *(arg1 + 0x38) = 0;\n                    *(arg1 + 0x30) = 0xffffffff;\n                    *(arg1 + 0x34) = 0;\n                    *(arg1 + 0x4c) = 0;\n                }\n                if (uVar4 != 2) break;\n                if (uVar1 == 0x20) {\n                    *(arg1 + 0x28) = *(arg1 + 0x28) | 2;\n                }\n                else if (uVar1 == 0x23) {\n                    *(arg1 + 0x28) = *(arg1 + 0x28) | 0x20;\n                }\n                else if (uVar1 == 0x2b) {\n                    *(arg1 + 0x28) = *(arg1 + 0x28) | 1;\n                }\n                else if (uVar1 == 0x2d) {\n                    *(arg1 + 0x28) = *(arg1 + 0x28) | 4;\n                }\n                else if (uVar1 == 0x30) {\n                    *(arg1 + 0x28) = *(arg1 + 0x28) | 8;\n                }\n            }\n            if (uVar4 == 3) {\n                if (uVar1 == 0x2a) {\n                    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n                    iVar5 = *(*(arg1 + 0x18) + -8);\n                    *(arg1 + 0x2c) = iVar5;\n                    if (iVar5 < 0) {\n                        *(arg1 + 0x28) = *(arg1 + 0x28) | 4;\n                        *(arg1 + 0x2c) = -iVar5;\n                    }\ncode_r0x0001400217f0:\n                    cVar2 = '\\x01';\n                }\n                else {\n                    iVar6 = arg1 + 0x2c;\ncode_r0x00014002179f:\n                    cVar2 = fcn.140020eb8(arg1, iVar6);\n                }\n            }\n            else {\n                if (uVar4 == 4) {\n                    *(arg1 + 0x30) = 0;\n                    goto code_r0x00014002189f;\n                }\n                if (uVar4 == 5) {\n                    if (uVar1 == 0x2a) {\n                        *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n                        iVar5 = *(*(arg1 + 0x18) + -8);\n                        if (iVar5 < 0) {\n                            iVar5 = -1;\n                        }\n                        *(arg1 + 0x30) = iVar5;\n                        goto code_r0x0001400217f0;\n                    }\n                    iVar6 = arg1 + 0x30;\n                    goto code_r0x00014002179f;\n                }\n                if (uVar4 != 6) {\n                    if (uVar4 == 7) {\n                        cVar2 = fcn.14002201c(arg1);\n                        goto code_r0x0001400217f2;\n                    }\n                    goto code_r0x00014002191b;\n                }\n                cVar2 = fcn.140021aa4(arg1);\n            }\ncode_r0x0001400217f2:\n            if (cVar2 == '\\0') goto code_r0x00014002191b;\n            goto code_r0x00014002189f;\n        }\ncode_r0x0001400218d1:\n        uVar3 = *(arg1 + 0x20);\n    }\n    return uVar3;\ncode_r0x0001400218be:\n    *(arg1 + 0x468) = *(arg1 + 0x468) + 1;\n    if (*(arg1 + 0x468) == 2) goto code_r0x0001400218d1;\n    goto code_r0x0001400216ef;\n}\n",
        "token_count": 1768
    },
    "14002192": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint64_t fcn.140021920(uint8_t *arg1)\n\n{\n    int32_t *arg4;\n    int64_t **arg1_00;\n    uint8_t uVar1;\n    uint32_t uVar2;\n    char *pcVar3;\n    int64_t iVar4;\n    int64_t *piVar5;\n    bool bVar6;\n    char cVar7;\n    uint64_t in_RAX;\n    char *pcVar8;\n    uint64_t uVar9;\n    int32_t iVar10;\n    int64_t iVar11;\n    int32_t iVar12;\n    uchar uVar13;\n    int32_t iVar14;\n    uchar auStack120 [32];\n    ulong uStack88;\n    uint uStack72;\n    uchar auStack68 [4];\n    ulong uStack64;\n    uint64_t uStack56;\n    \n    uVar1 = arg1[0x39];\n    pcVar8 = in_RAX & 0xffffffffffffff00;\n    if (uVar1 != 0x46) {\n        if (uVar1 == 0x4e) {\n            if ((*arg1 & 8) != 0) goto code_r0x000140021a9d;\n            arg1[0x24] = 8;\n        }\n        else if (*(arg1 + 0x34) == 0) {\n            if (uVar1 == 0x49) {\n                pcVar3 = *(arg1 + 0x10);\n                cVar7 = *pcVar3;\n                if (cVar7 == '3') {\n                    if (pcVar3[1] == '2') {\n                        pcVar8 = pcVar3 + 2;\n                        *(arg1 + 0x34) = 10;\n                        *(arg1 + 0x10) = pcVar8;\n                    }\n                }\n                else if (cVar7 == '6') {\n                    if (pcVar3[1] == '4') {\n                        pcVar8 = pcVar3 + 2;\n                        *(arg1 + 0x34) = 0xb;\n                        *(arg1 + 0x10) = pcVar8;\n                    }\n                }\n                else if ((cVar7 + 0xa8U < 0x21) && ((0x120821001U >> (cVar7 + 0xa8U & 0x3f) & 1) != 0)) {\n                    *(arg1 + 0x34) = 9;\n                }\n            }\n            else if (uVar1 == 0x4c) {\n                *(arg1 + 0x34) = 8;\n            }\n            else if (uVar1 == 0x54) {\n                *(arg1 + 0x34) = 0xd;\n            }\n            else {\n                if (uVar1 == 0x68) {\n                    if (**(arg1 + 0x10) == 'h') {\n                        *(arg1 + 0x10) = *(arg1 + 0x10) + 1;\n                        pcVar8 = 0x1;\n                    }\n                    else {\n                        pcVar8 = 0x2;\n                    }\n                }\n                else {\n                    if (uVar1 == 0x6a) {\n                        *(arg1 + 0x34) = 5;\n                        goto code_r0x000140021a9d;\n                    }\n                    if (uVar1 != 0x6c) {\n                        if (uVar1 == 0x74) {\n                            *(arg1 + 0x34) = 7;\n                        }\n                        else if (uVar1 == 0x77) {\n                            *(arg1 + 0x34) = 0xc;\n                        }\n                        else if (uVar1 == 0x7a) {\n                            *(arg1 + 0x34) = 6;\n                        }\n                        goto code_r0x000140021a9d;\n                    }\n                    if (**(arg1 + 0x10) == 'l') {\n                        *(arg1 + 0x10) = *(arg1 + 0x10) + 1;\n                        pcVar8 = 0x4;\n                    }\n                    else {\n                        pcVar8 = 0x3;\n                    }\n                }\n                *(arg1 + 0x34) = pcVar8;\n            }\ncode_r0x000140021a9d:\n            return CONCAT71(pcVar8 >> 8, 1);\n        }\n        iVar11 = *(arg1 + 8);\n        *(iVar11 + 0x30) = 1;\n        *(iVar11 + 0x2c) = 0x16;\n        uStack64 = 0x14002197f;\n        uVar9 = fcn.140013f90(0, 0, 0, 0);\n        return uVar9 & 0xffffffffffffff00;\n    }\n    if ((*arg1 & 8) != 0) goto code_r0x000140021a9d;\n    arg1[0x24] = 7;\n    uStack56 = *0x14003ef38 ^ &stack0xffffffffffffff88;\n    uVar1 = arg1[0x39];\n    uVar13 = 0x78;\n    if (uVar1 < 'e') {\n        if (uVar1 == 100) {\ncode_r0x000140021d56:\n            *(arg1 + 0x28) = *(arg1 + 0x28) | 0x10;\ncode_r0x000140021d5a:\n            cVar7 = fcn.14001fee0(arg1);\n        }\n        else {\n            if (uVar1 != 0x41) {\n                if (uVar1 == 0x43) {\ncode_r0x000140021cd6:\n                    cVar7 = fcn.140022a18(arg1);\n                }\n                else {\n                    if (uVar1 < 'E') goto code_r0x000140021ff2;\n                    if (uVar1 < 'H') goto code_r0x000140021d63;\n                    if (uVar1 == 0x53) {\ncode_r0x000140021d18:\n                        cVar7 = fcn.140022c54(arg1);\n                    }\n                    else {\n                        if (uVar1 == 0x58) goto code_r0x000140021cec;\n                        if (uVar1 != 0x5a) {\n                            if (uVar1 != 0x61) {\n                                if (uVar1 != 99) goto code_r0x000140021ff2;\n                                goto code_r0x000140021cd6;\n                            }\n                            goto code_r0x000140021d63;\n                        }\n                        cVar7 = fcn.140022478(arg1);\n                    }\n                }\n                goto code_r0x000140021d68;\n            }\ncode_r0x000140021d63:\n            cVar7 = fcn.14002256c(arg1);\n        }\n    }\n    else {\n        if (uVar1 < 'h') goto code_r0x000140021d63;\n        if (uVar1 == 0x69) goto code_r0x000140021d56;\n        if (uVar1 == 0x6e) {\n            cVar7 = fcn.140022ba0(arg1);\n        }\n        else if (uVar1 == 0x6f) {\n            if ((*(arg1 + 0x28) >> 5 & 1) != 0) {\n                *(arg1 + 0x28) = *(arg1 + 0x28) | 0x80;\n            }\n            cVar7 = fcn.14001fb0c(arg1);\n        }\n        else {\n            if (uVar1 == 0x70) {\n                *(arg1 + 0x30) = 0x10;\n                *(arg1 + 0x34) = 0xb;\n            }\n            else {\n                if (uVar1 == 0x73) goto code_r0x000140021d18;\n                if (uVar1 == 0x75) goto code_r0x000140021d5a;\n                if (uVar1 != 0x78) goto code_r0x000140021ff2;\n            }\ncode_r0x000140021cec:\n            cVar7 = fcn.1400202b4(arg1);\n        }\n    }\ncode_r0x000140021d68:\n    if ((cVar7 == '\\0') || (arg1[0x38] != 0)) goto code_r0x000140021ff2;\n    uVar2 = *(arg1 + 0x28);\n    iVar11 = 0;\n    uStack72 = (uStack72 >> 0x10 & 0xff00) << 0x10;\n    if ((uVar2 >> 4 & 1) != 0) {\n        uStack72._1_3_ = uStack72 >> 8;\n        if ((uVar2 >> 6 & 1) == 0) {\n            if ((uVar2 & 1) == 0) {\n                if ((uVar2 >> 1 & 1) == 0) goto code_r0x000140021dc0;\n                uStack72 = CONCAT31(uStack72._1_3_, 0x20);\n            }\n            else {\n                uStack72 = CONCAT31(uStack72._1_3_, 0x2b);\n            }\n        }\n        else {\n            uStack72 = CONCAT31(uStack72._1_3_, 0x2d);\n        }\n        iVar11 = 1;\n    }\ncode_r0x000140021dc0:\n    uVar1 = arg1[0x39];\n    if (((uVar1 + 0xa8 & 0xdf) == 0) && ((uVar2 >> 5 & 1) != 0)) {\n        bVar6 = true;\n    }\n    else {\n        bVar6 = false;\n    }\n    if ((bVar6) || ((uVar1 + 0xbf & 0xdf) == 0)) {\n        (&stack0xffffffffffffffb8)[iVar11] = 0x30;\n        if ((uVar1 == 0x58) || (uVar1 == 0x41)) {\n            uVar13 = 0x58;\n        }\n        (&stack0xffffffffffffffb9)[iVar11] = uVar13;\n        iVar11 = iVar11 + 2;\n    }\n    iVar12 = (*(arg1 + 0x2c) - iVar11) - *(arg1 + 0x48);\n    if (((uVar2 & 0xc) == 0) && (iVar14 = 0,  0 < iVar12)) {\n        iVar10 = *(arg1 + 0x20);\n        do {\n            iVar4 = *(arg1 + 0x460);\n            if (*(iVar4 + 0x10) == *(iVar4 + 8)) {\n                if (*(iVar4 + 0x18) == '\\0') {\n                    iVar10 = -1;\n                }\n                else {\n                    iVar10 = iVar10 + 1;\n                }\n                *(arg1 + 0x20) = iVar10;\n            }\n            else {\n                *(arg1 + 0x20) = iVar10 + 1;\n                *(iVar4 + 0x10) = *(iVar4 + 0x10) + 1;\n                ***(arg1 + 0x460) = 0x20;\n                **(arg1 + 0x460) = **(arg1 + 0x460) + 1;\n                iVar10 = *(arg1 + 0x20);\n            }\n        } while ((iVar10 != -1) && (iVar14 = iVar14 + 1,  iVar14 < iVar12));\n    }\n    uStack88 = *(arg1 + 8);\n    arg4 = arg1 + 0x20;\n    arg1_00 = arg1 + 0x460;\n    fcn.140022dfc(arg1_00, &stack0xffffffffffffffb8, iVar11, arg4);\n    if (((*(arg1 + 0x28) >> 3 & 1) != 0) && (((*(arg1 + 0x28) >> 2 & 1) == 0 && (iVar14 = 0,  0 < iVar12)))) {\n        iVar10 = *arg4;\n        do {\n            piVar5 = *arg1_00;\n            if (piVar5[2] == piVar5[1]) {\n                if (*(piVar5 + 3) == '\\0') {\n                    iVar10 = -1;\n                }\n                else {\n                    iVar10 = iVar10 + 1;\n                }\n                *arg4 = iVar10;\n            }\n            else {\n                *arg4 = iVar10 + 1;\n                piVar5[2] = piVar5[2] + 1;\n                ***arg1_00 = 0x30;\n                **arg1_00 = **arg1_00 + 1;\n                iVar10 = *arg4;\n            }\n        } while ((iVar10 != -1) && (iVar14 = iVar14 + 1,  iVar14 < iVar12));\n    }\n    if ((arg1[0x4c] == 0) || (*(arg1 + 0x48) < 1)) {\n        uStack88 = *(arg1 + 8);\n        fcn.140022dfc(arg1_00, *(arg1 + 0x40), *(arg1 + 0x48), arg4);\n    }\n    else {\n        iVar14 = 0;\n        do {\n            uStack88 = *(arg1 + 8);\n            uStack72 = 0;\n            iVar10 = fcn.14002683c(&stack0xffffffffffffffb8, &stack0xffffffffffffffbc, 6);\n            if ((iVar10 != 0) || (uStack72 == 0)) {\n                *arg4 = -1;\n                break;\n            }\n            uStack88 = *(arg1 + 8);\n            fcn.140022dfc(arg1_00, &stack0xffffffffffffffbc, uStack72, arg4);\n            iVar14 = iVar14 + 1;\n        } while (iVar14 != *(arg1 + 0x48));\n    }\n    iVar14 = *arg4;\n    if (((-1 < iVar14) && ((*(arg1 + 0x28) >> 2 & 1) != 0)) && (iVar10 = 0,  0 < iVar12)) {\n        do {\n            piVar5 = *arg1_00;\n            if (piVar5[2] == piVar5[1]) {\n                if (*(piVar5 + 3) == '\\0') {\n                    iVar14 = -1;\n                }\n                else {\n                    iVar14 = iVar14 + 1;\n                }\n                *arg4 = iVar14;\n            }\n            else {\n                *arg4 = iVar14 + 1;\n                piVar5[2] = piVar5[2] + 1;\n                ***arg1_00 = 0x20;\n                **arg1_00 = **arg1_00 + 1;\n                iVar14 = *arg4;\n            }\n        } while ((iVar14 != -1) && (iVar10 = iVar10 + 1,  iVar10 < iVar12));\n    }\ncode_r0x000140021ff2:\n    uVar9 = fcn.140018790(uStack56 ^ &stack0xffffffffffffff88);\n    return uVar9;\n}\n",
        "token_count": 3446
    },
    "140021c5": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_bp_10h\n// WARNING: Variable defined which should be unmapped: var_bp_20h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.140021c50(int64_t arg1)\n\n{\n    int32_t *arg4;\n    int64_t **arg1_00;\n    uint32_t uVar1;\n    int64_t iVar2;\n    int64_t *piVar3;\n    bool bVar4;\n    char cVar5;\n    int32_t iVar6;\n    int64_t arg3;\n    int32_t iVar7;\n    uchar uVar8;\n    int32_t iVar9;\n    ulong var_30h;\n    uchar auStack120 [32];\n    ulong uStack88;\n    uint uStack72;\n    uchar auStack68 [12];\n    uint64_t uStack56;\n    ulong var_bp_20h;\n    ulong var_bp_10h;\n    \n    uStack56 = *0x14003ef38 ^ auStack120;\n    cVar5 = *(arg1 + 0x39);\n    uVar8 = 0x78;\n    if (cVar5 < 'e') {\n        if (cVar5 == 'd') {\ncode_r0x000140021d56:\n            *(arg1 + 0x28) = *(arg1 + 0x28) | 0x10;\ncode_r0x000140021d5a:\n            cVar5 = fcn.14001fee0(arg1);\n        }\n        else {\n            if (cVar5 != 'A') {\n                if (cVar5 == 'C') {\ncode_r0x000140021cd6:\n                    cVar5 = fcn.140022a18(arg1);\n                }\n                else {\n                    if (cVar5 < 'E') goto code_r0x000140021ff2;\n                    if (cVar5 < 'H') goto code_r0x000140021d63;\n                    if (cVar5 == 'S') {\ncode_r0x000140021d18:\n                        cVar5 = fcn.140022c54(arg1);\n                    }\n                    else {\n                        if (cVar5 == 'X') goto code_r0x000140021cec;\n                        if (cVar5 != 'Z') {\n                            if (cVar5 != 'a') {\n                                if (cVar5 != 'c') goto code_r0x000140021ff2;\n                                goto code_r0x000140021cd6;\n                            }\n                            goto code_r0x000140021d63;\n                        }\n                        cVar5 = fcn.140022478(arg1);\n                    }\n                }\n                goto code_r0x000140021d68;\n            }\ncode_r0x000140021d63:\n            cVar5 = fcn.14002256c(arg1);\n        }\n    }\n    else {\n        if (cVar5 < 'h') goto code_r0x000140021d63;\n        if (cVar5 == 'i') goto code_r0x000140021d56;\n        if (cVar5 == 'n') {\n            cVar5 = fcn.140022ba0(arg1);\n        }\n        else if (cVar5 == 'o') {\n            if ((*(arg1 + 0x28) >> 5 & 1) != 0) {\n                *(arg1 + 0x28) = *(arg1 + 0x28) | 0x80;\n            }\n            cVar5 = fcn.14001fb0c(arg1);\n        }\n        else {\n            if (cVar5 == 'p') {\n                *(arg1 + 0x30) = 0x10;\n                *(arg1 + 0x34) = 0xb;\n            }\n            else {\n                if (cVar5 == 's') goto code_r0x000140021d18;\n                if (cVar5 == 'u') goto code_r0x000140021d5a;\n                if (cVar5 != 'x') goto code_r0x000140021ff2;\n            }\ncode_r0x000140021cec:\n            cVar5 = fcn.1400202b4(arg1);\n        }\n    }\ncode_r0x000140021d68:\n    if ((cVar5 == '\\0') || (*(arg1 + 0x38) != '\\0')) goto code_r0x000140021ff2;\n    uVar1 = *(arg1 + 0x28);\n    arg3 = 0;\n    uStack72 = (uStack72 >> 0x10 & 0xff00) << 0x10;\n    if ((uVar1 >> 4 & 1) != 0) {\n        uStack72._1_3_ = uStack72 >> 8;\n        if ((uVar1 >> 6 & 1) == 0) {\n            if ((uVar1 & 1) == 0) {\n                if ((uVar1 >> 1 & 1) == 0) goto code_r0x000140021dc0;\n                uStack72 = CONCAT31(uStack72._1_3_, 0x20);\n            }\n            else {\n                uStack72 = CONCAT31(uStack72._1_3_, 0x2b);\n            }\n        }\n        else {\n            uStack72 = CONCAT31(uStack72._1_3_, 0x2d);\n        }\n        arg3 = 1;\n    }\ncode_r0x000140021dc0:\n    cVar5 = *(arg1 + 0x39);\n    if (((cVar5 + 0xa8U & 0xdf) == 0) && ((uVar1 >> 5 & 1) != 0)) {\n        bVar4 = true;\n    }\n    else {\n        bVar4 = false;\n    }\n    if ((bVar4) || ((cVar5 + 0xbfU & 0xdf) == 0)) {\n        auStack68[arg3 + -4] = 0x30;\n        if ((cVar5 == 'X') || (cVar5 == 'A')) {\n            uVar8 = 0x58;\n        }\n        auStack68[arg3 + -3] = uVar8;\n        arg3 = arg3 + 2;\n    }\n    iVar7 = (*(arg1 + 0x2c) - arg3) - *(arg1 + 0x48);\n    if (((uVar1 & 0xc) == 0) && (iVar9 = 0,  0 < iVar7)) {\n        iVar6 = *(arg1 + 0x20);\n        do {\n            iVar2 = *(arg1 + 0x460);\n            if (*(iVar2 + 0x10) == *(iVar2 + 8)) {\n                if (*(iVar2 + 0x18) == '\\0') {\n                    iVar6 = -1;\n                }\n                else {\n                    iVar6 = iVar6 + 1;\n                }\n                *(arg1 + 0x20) = iVar6;\n            }\n            else {\n                *(arg1 + 0x20) = iVar6 + 1;\n                *(iVar2 + 0x10) = *(iVar2 + 0x10) + 1;\n                ***(arg1 + 0x460) = 0x20;\n                **(arg1 + 0x460) = **(arg1 + 0x460) + 1;\n                iVar6 = *(arg1 + 0x20);\n            }\n        } while ((iVar6 != -1) && (iVar9 = iVar9 + 1,  iVar9 < iVar7));\n    }\n    uStack88 = *(arg1 + 8);\n    arg4 = arg1 + 0x20;\n    arg1_00 = arg1 + 0x460;\n    fcn.140022dfc(arg1_00, &uStack72, arg3, arg4);\n    if (((*(arg1 + 0x28) >> 3 & 1) != 0) && (((*(arg1 + 0x28) >> 2 & 1) == 0 && (iVar9 = 0,  0 < iVar7)))) {\n        iVar6 = *arg4;\n        do {\n            piVar3 = *arg1_00;\n            if (piVar3[2] == piVar3[1]) {\n                if (*(piVar3 + 3) == '\\0') {\n                    iVar6 = -1;\n                }\n                else {\n                    iVar6 = iVar6 + 1;\n                }\n                *arg4 = iVar6;\n            }\n            else {\n                *arg4 = iVar6 + 1;\n                piVar3[2] = piVar3[2] + 1;\n                ***arg1_00 = 0x30;\n                **arg1_00 = **arg1_00 + 1;\n                iVar6 = *arg4;\n            }\n        } while ((iVar6 != -1) && (iVar9 = iVar9 + 1,  iVar9 < iVar7));\n    }\n    if ((*(arg1 + 0x4c) == '\\0') || (*(arg1 + 0x48) < 1)) {\n        uStack88 = *(arg1 + 8);\n        fcn.140022dfc(arg1_00, *(arg1 + 0x40), *(arg1 + 0x48), arg4);\n    }\n    else {\n        iVar9 = 0;\n        do {\n            uStack88 = *(arg1 + 8);\n            uStack72 = 0;\n            iVar6 = fcn.14002683c(&uStack72, auStack68, 6);\n            if ((iVar6 != 0) || (uStack72 == 0)) {\n                *arg4 = -1;\n                break;\n            }\n            uStack88 = *(arg1 + 8);\n            fcn.140022dfc(arg1_00, auStack68, uStack72, arg4);\n            iVar9 = iVar9 + 1;\n        } while (iVar9 != *(arg1 + 0x48));\n    }\n    iVar9 = *arg4;\n    if (((-1 < iVar9) && ((*(arg1 + 0x28) >> 2 & 1) != 0)) && (iVar6 = 0,  0 < iVar7)) {\n        do {\n            piVar3 = *arg1_00;\n            if (piVar3[2] == piVar3[1]) {\n                if (*(piVar3 + 3) == '\\0') {\n                    iVar9 = -1;\n                }\n                else {\n                    iVar9 = iVar9 + 1;\n                }\n                *arg4 = iVar9;\n            }\n            else {\n                *arg4 = iVar9 + 1;\n                piVar3[2] = piVar3[2] + 1;\n                ***arg1_00 = 0x20;\n                **arg1_00 = **arg1_00 + 1;\n                iVar9 = *arg4;\n            }\n        } while ((iVar9 != -1) && (iVar6 = iVar6 + 1,  iVar6 < iVar7));\n    }\ncode_r0x000140021ff2:\n    fcn.140018790(uStack56 ^ auStack120);\n    return;\n}\n",
        "token_count": 2485
    },
    "140021aa": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint64_t fcn.140021aa4(uint8_t *arg1)\n\n{\n    int32_t *arg4;\n    int64_t **arg1_00;\n    int16_t iVar1;\n    uint16_t *puVar2;\n    int64_t iVar3;\n    int64_t *piVar4;\n    char cVar5;\n    uint16_t uVar6;\n    uint16_t *puVar7;\n    uint64_t uVar8;\n    int32_t iVar9;\n    uint64_t arg3;\n    uint64_t uVar10;\n    int32_t iVar11;\n    ushort uVar12;\n    int32_t iVar13;\n    uint32_t uVar14;\n    int64_t arg2;\n    uchar auStack120 [32];\n    ulong uStack88;\n    ushort uStack72;\n    uint uStack68;\n    uint64_t uStack64;\n    uint64_t uStack56;\n    \n    uVar6 = *(arg1 + 0x3a);\n    puVar7 = uVar6;\n    if (uVar6 != 0x46) {\n        if (uVar6 == 0x4e) {\n            if ((*arg1 & 8) != 0) goto code_r0x000140021c47;\n            arg1[0x24] = 8;\n        }\n        else if (*(arg1 + 0x34) == 0) {\n            if (uVar6 == 0x49) {\n                puVar2 = *(arg1 + 0x10);\n                uVar6 = *puVar2;\n                puVar7 = uVar6;\n                if (uVar6 == 0x33) {\n                    if (puVar2[1] == 0x32) {\n                        puVar7 = puVar2 + 2;\n                        *(arg1 + 0x34) = 10;\n                        *(arg1 + 0x10) = puVar7;\n                    }\n                }\n                else if (uVar6 == 0x36) {\n                    if (puVar2[1] == 0x34) {\n                        puVar7 = puVar2 + 2;\n                        *(arg1 + 0x34) = 0xb;\n                        *(arg1 + 0x10) = puVar7;\n                    }\n                }\n                else {\n                    puVar7 = uVar6 - 0x58;\n                    if ((uVar6 - 0x58 < 0x21) && ((0x120821001U >> (puVar7 & 0x3f) & 1) != 0)) {\n                        *(arg1 + 0x34) = 9;\n                    }\n                }\n            }\n            else if (uVar6 == 0x4c) {\n                *(arg1 + 0x34) = 8;\n            }\n            else if (uVar6 == 0x54) {\n                *(arg1 + 0x34) = 0xd;\n            }\n            else {\n                if (uVar6 == 0x68) {\n                    if (**(arg1 + 0x10) == 0x68) {\n                        *(arg1 + 0x10) = *(arg1 + 0x10) + 1;\n                        puVar7 = 0x1;\n                    }\n                    else {\n                        puVar7 = 0x2;\n                    }\n                }\n                else {\n                    if (uVar6 == 0x6a) {\n                        *(arg1 + 0x34) = 5;\n                        goto code_r0x000140021c47;\n                    }\n                    if (uVar6 != 0x6c) {\n                        if (uVar6 == 0x74) {\n                            *(arg1 + 0x34) = 7;\n                        }\n                        else if (uVar6 == 0x77) {\n                            *(arg1 + 0x34) = 0xc;\n                        }\n                        else if (uVar6 == 0x7a) {\n                            *(arg1 + 0x34) = 6;\n                        }\n                        goto code_r0x000140021c47;\n                    }\n                    if (**(arg1 + 0x10) == 0x6c) {\n                        *(arg1 + 0x10) = *(arg1 + 0x10) + 1;\n                        puVar7 = 0x4;\n                    }\n                    else {\n                        puVar7 = 0x3;\n                    }\n                }\n                *(arg1 + 0x34) = puVar7;\n            }\ncode_r0x000140021c47:\n            return CONCAT71(puVar7 >> 8, 1);\n        }\n        iVar3 = *(arg1 + 8);\n        *(iVar3 + 0x30) = 1;\n        *(iVar3 + 0x2c) = 0x16;\n        uStack64 = 0x140021b08;\n        uVar8 = fcn.140013f90(0, 0, 0, 0);\n        return uVar8 & 0xffffffffffffff00;\n    }\n    if ((*arg1 & 8) != 0) goto code_r0x000140021c47;\n    arg1[0x24] = 7;\n    uStack56 = *0x14003ef38 ^ &stack0xffffffffffffff88;\n    uVar6 = *(arg1 + 0x3a);\n    uVar12 = 0x78;\n    uVar8 = 1;\n    if (uVar6 < 0x65) {\n        if (uVar6 == 100) {\ncode_r0x000140022143:\n            *(arg1 + 0x28) = *(arg1 + 0x28) | 0x10;\ncode_r0x000140022147:\n            cVar5 = fcn.1400200c8(arg1);\n        }\n        else {\n            if (uVar6 != 0x41) {\n                if (uVar6 == 0x43) {\ncode_r0x0001400220af:\n                    cVar5 = fcn.140022adc(arg1);\n                }\n                else {\n                    if (uVar6 < 0x45) goto code_r0x00014002244d;\n                    if (uVar6 < 0x48) goto code_r0x000140022150;\n                    if (uVar6 == 0x53) {\ncode_r0x000140022105:\n                        cVar5 = fcn.140022cec(arg1);\n                    }\n                    else {\n                        if (uVar6 == 0x58) goto code_r0x0001400220c8;\n                        if (uVar6 != 0x5a) {\n                            if (uVar6 != 0x61) {\n                                if (uVar6 != 99) goto code_r0x00014002244d;\n                                goto code_r0x0001400220af;\n                            }\n                            goto code_r0x000140022150;\n                        }\n                        cVar5 = fcn.1400224f0(arg1);\n                    }\n                }\n                goto code_r0x000140022155;\n            }\ncode_r0x000140022150:\n            cVar5 = fcn.1400227b8(arg1);\n        }\n    }\n    else {\n        if (uVar6 < 0x68) goto code_r0x000140022150;\n        if (uVar6 == 0x69) goto code_r0x000140022143;\n        if (uVar6 == 0x6e) {\n            cVar5 = fcn.140022ba0(arg1);\n        }\n        else if (uVar6 == 0x6f) {\n            if ((*(arg1 + 0x28) >> 5 & 1) != 0) {\n                *(arg1 + 0x28) = *(arg1 + 0x28) | 0x80;\n            }\n            cVar5 = fcn.14001fcf4(arg1);\n        }\n        else {\n            if (uVar6 == 0x70) {\n                *(arg1 + 0x30) = 0x10;\n                *(arg1 + 0x34) = 0xb;\n            }\n            else {\n                if (uVar6 == 0x73) goto code_r0x000140022105;\n                if (uVar6 == 0x75) goto code_r0x000140022147;\n                if (uVar6 != 0x78) goto code_r0x00014002244d;\n            }\ncode_r0x0001400220c8:\n            cVar5 = fcn.14002049c(arg1);\n        }\n    }\ncode_r0x000140022155:\n    uVar10 = 0;\n    if ((cVar5 == '\\0') || (arg1[0x38] != 0)) goto code_r0x00014002244d;\n    uVar14 = *(arg1 + 0x28);\n    uStack68 = 0;\n    uStack64 = uStack64 & 0xffffffffffff0000;\n    arg3 = uVar10;\n    if ((uVar14 >> 4 & 1) != 0) {\n        if ((uVar14 >> 6 & 1) == 0) {\n            if ((uVar14 & 1) == 0) {\n                arg3 = 0;\n                if ((uVar14 >> 1 & 1) != 0) {\n                    uStack68 = 0x20;\n                    arg3 = uVar8;\n                }\n                goto code_r0x0001400221c0;\n            }\n            uVar6 = 0x2b;\n        }\n        else {\n            uVar6 = 0x2d;\n        }\n        uStack68 = uVar6;\n        arg3 = uVar8;\n    }\ncode_r0x0001400221c0:\n    iVar1 = *(arg1 + 0x3a);\n    if (((iVar1 - 0x58U & 0xffdf) != 0) || ((uVar14 >> 5 & 1) == 0)) {\n        uVar8 = uVar10;\n    }\n    if ((uVar8 != '\\0') || ((iVar1 - 0x41U & 0xffdf) == 0)) {\n        *(&stack0xffffffffffffffbc + arg3 * 2) = 0x30;\n        if ((iVar1 == 0x58) || (iVar1 == 0x41)) {\n            uVar12 = 0x58;\n        }\n        *(&stack0xffffffffffffffbe + arg3 * 2) = uVar12;\n        arg3 = arg3 + 2;\n    }\n    iVar11 = (*(arg1 + 0x2c) - arg3) - *(arg1 + 0x48);\n    if (((uVar14 & 0xc) == 0) && (0 < iVar11)) {\n        iVar9 = *(arg1 + 0x20);\n        uVar8 = uVar10;\n        do {\n            iVar3 = *(arg1 + 0x460);\n            if (*(iVar3 + 0x10) == *(iVar3 + 8)) {\n                if (*(iVar3 + 0x18) == '\\0') {\n                    iVar9 = -1;\n                }\n                else {\n                    iVar9 = iVar9 + 1;\n                }\n                *(arg1 + 0x20) = iVar9;\n            }\n            else {\n                *(arg1 + 0x20) = iVar9 + 1;\n                *(iVar3 + 0x10) = *(iVar3 + 0x10) + 1;\n                ***(arg1 + 0x460) = 0x20;\n                **(arg1 + 0x460) = **(arg1 + 0x460) + 2;\n                iVar9 = *(arg1 + 0x20);\n            }\n        } while ((iVar9 != -1) && (uVar14 = uVar8 + 1,  uVar8 = uVar14,  uVar14 < iVar11));\n    }\n    uStack88 = *(arg1 + 8);\n    arg4 = arg1 + 0x20;\n    arg1_00 = arg1 + 0x460;\n    fcn.140022ea0(arg1_00, &stack0xffffffffffffffbc, arg3, arg4);\n    if (((*(arg1 + 0x28) >> 3 & 1) != 0) && (((*(arg1 + 0x28) >> 2 & 1) == 0 && (0 < iVar11)))) {\n        iVar9 = *arg4;\n        uVar8 = uVar10;\n        do {\n            piVar4 = *arg1_00;\n            if (piVar4[2] == piVar4[1]) {\n                if (*(piVar4 + 3) == '\\0') {\n                    iVar9 = -1;\n                }\n                else {\n                    iVar9 = iVar9 + 1;\n                }\n                *arg4 = iVar9;\n            }\n            else {\n                *arg4 = iVar9 + 1;\n                piVar4[2] = piVar4[2] + 1;\n                ***arg1_00 = 0x30;\n                **arg1_00 = **arg1_00 + 2;\n                iVar9 = *arg4;\n            }\n        } while ((iVar9 != -1) && (uVar14 = uVar8 + 1,  uVar8 = uVar14,  uVar14 < iVar11));\n    }\n    if ((arg1[0x4c] == 0) && (iVar9 = *(arg1 + 0x48),  0 < iVar9)) {\n        iVar3 = *(arg1 + 8);\n        if (*(iVar3 + 0x28) == '\\0') {\n            fcn.140017aa0(iVar3);\n            iVar9 = *(arg1 + 0x48);\n        }\n        arg2 = *(arg1 + 0x40);\n        if (iVar9 != 0) {\n            do {\n                uStack72 = 0;\n                iVar9 = fcn.1400269ec(&stack0xffffffffffffffb8, arg2, *(*(iVar3 + 0x18) + 8), *(arg1 + 8));\n                if (iVar9 < 1) {\n                    *(arg1 + 0x20) = 0xffffffff;\n                    break;\n                }\n                piVar4 = *arg1_00;\n                if (piVar4[2] == piVar4[1]) {\n                    if (*(piVar4 + 3) == '\\0') {\n                        *(arg1 + 0x20) = 0xffffffff;\n                    }\n                    else {\n                        *(arg1 + 0x20) = *(arg1 + 0x20) + 1;\n                    }\n                }\n                else {\n                    *(arg1 + 0x20) = *(arg1 + 0x20) + 1;\n                    piVar4[2] = piVar4[2] + 1;\n                    ***arg1_00 = uStack72;\n                    **arg1_00 = **arg1_00 + 2;\n                }\n                arg2 = arg2 + iVar9;\n                uVar14 = uVar10 + 1;\n                uVar10 = uVar14;\n            } while (uVar14 != *(arg1 + 0x48));\n        }\n    }\n    else {\n        uStack88 = *(arg1 + 8);\n        fcn.140022ea0(arg1_00, *(arg1 + 0x40), *(arg1 + 0x48), arg4);\n    }\n    iVar9 = *arg4;\n    if (((-1 < iVar9) && ((*(arg1 + 0x28) >> 2 & 1) != 0)) && (iVar13 = 0,  0 < iVar11)) {\n        do {\n            piVar4 = *arg1_00;\n            if (piVar4[2] == piVar4[1]) {\n                if (*(piVar4 + 3) == '\\0') {\n                    iVar9 = -1;\n                }\n                else {\n                    iVar9 = iVar9 + 1;\n                }\n                *arg4 = iVar9;\n            }\n            else {\n                *arg4 = iVar9 + 1;\n                piVar4[2] = piVar4[2] + 1;\n                ***arg1_00 = 0x20;\n                **arg1_00 = **arg1_00 + 2;\n                iVar9 = *arg4;\n            }\n        } while ((iVar9 != -1) && (iVar13 = iVar13 + 1,  iVar13 < iVar11));\n    }\ncode_r0x00014002244d:\n    uVar8 = fcn.140018790(uStack56 ^ &stack0xffffffffffffff88);\n    return uVar8;\n}\n",
        "token_count": 3725
    },
    "14002256": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.14002256c(int64_t arg1)\n\n{\n    uint8_t uVar1;\n    int64_t *piVar2;\n    char cVar3;\n    int32_t iVar4;\n    int64_t iVar5;\n    uint8_t *puVar6;\n    char *pcVar7;\n    uint8_t *puVar8;\n    int64_t iVar9;\n    uint8_t uVar10;\n    uint64_t uVar11;\n    int64_t arg4;\n    bool bVar12;\n    ulong uStackX8;\n    \n    *(arg1 + 0x28) = *(arg1 + 0x28) | 0x10;\n    iVar4 = *(arg1 + 0x30);\n    if (iVar4 < 0) {\n        iVar4 = (-((*(arg1 + 0x39) + 0xbfU & 0xdf) != 0) & 0xfffffff9) + 0xd;\n        *(arg1 + 0x30) = iVar4;\n    }\n    else if ((iVar4 == 0) && ((*(arg1 + 0x39) == 'g' || (iVar4 = 0,  *(arg1 + 0x39) == 'G')))) {\n        *(arg1 + 0x30) = 1;\n        iVar4 = 1;\n    }\n    iVar9 = arg1 + 0x50;\n    cVar3 = fcn.14001ef70(iVar9, iVar4 + 0x15d, *(arg1 + 8));\n    uVar11 = 0x200;\n    if (cVar3 == '\\0') {\n        if (*(arg1 + 0x458) == 0) {\n            iVar4 = 0x200;\n        }\n        else {\n            iVar4 = *(arg1 + 0x450) >> 1;\n        }\n        *(arg1 + 0x30) = iVar4 + -0x15d;\n    }\n    iVar5 = *(arg1 + 0x458);\n    if (*(arg1 + 0x458) == 0) {\n        iVar5 = iVar9;\n    }\n    *(arg1 + 0x40) = iVar5;\n    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n    iVar5 = *(arg1 + 0x458);\n    uStackX8 = *(*(arg1 + 0x18) + -8);\n    if (iVar5 == 0) {\n        arg4 = arg1 + 0x250;\n        iVar5 = iVar9;\n    }\n    else {\n        arg4 = (*(arg1 + 0x450) >> 1) + iVar5;\n        uVar11 = *(arg1 + 0x450) >> 1;\n    }\n    fcn.140026554(&uStackX8, iVar5, uVar11, arg4);\n    if (((*(arg1 + 0x28) >> 5 & 1) != 0) && (*(arg1 + 0x30) == 0)) {\n        iVar9 = *(arg1 + 8);\n        if (*(iVar9 + 0x28) == '\\0') {\n            fcn.140017aa0(iVar9);\n        }\n        puVar6 = *(arg1 + 0x40);\n        piVar2 = *(iVar9 + 0x18);\n        uVar11 = *puVar6;\n        if (*(uVar11 + piVar2[0x22]) != 'e') {\n            do {\n                puVar6 = puVar6 + 1;\n                uVar11 = *puVar6;\n            } while ((*(*piVar2 + uVar11 * 2) & 4) != 0);\n        }\n        bVar12 = *(uVar11 + piVar2[0x22]) == 'x';\n        if (bVar12) {\n            uVar11 = puVar6[2];\n        }\n        puVar8 = puVar6 + 2;\n        if (!bVar12) {\n            puVar8 = puVar6;\n        }\n        *puVar8 = **piVar2[0x1f];\n        do {\n            puVar8 = puVar8 + 1;\n            uVar1 = *puVar8;\n            uVar10 = uVar11;\n            *puVar8 = uVar10;\n            uVar11 = uVar1;\n        } while (uVar10 != 0);\n    }\n    if (((*(arg1 + 0x39) + 0xb9U & 0xdf) == 0) && ((*(arg1 + 0x28) >> 5 & 1) == 0)) {\n        iVar9 = *(arg1 + 8);\n        if (*(iVar9 + 0x28) == '\\0') {\n            fcn.140017aa0(iVar9);\n        }\n        fcn.140020dbc(*(arg1 + 0x40), iVar9 + 0x18);\n    }\n    pcVar7 = *(arg1 + 0x40);\n    cVar3 = *pcVar7;\n    if (cVar3 == '-') {\n        *(arg1 + 0x28) = *(arg1 + 0x28) | 0x40;\n        pcVar7 = pcVar7 + 1;\n        *(arg1 + 0x40) = pcVar7;\n        cVar3 = *pcVar7;\n    }\n    if ((cVar3 + 0xb7U < 0x26) && ((0x2100000021U >> (cVar3 + 0xb7U & 0x3f) & 1) != 0)) {\n        *(arg1 + 0x28) = *(arg1 + 0x28) & 0xfffffff7;\n        *(arg1 + 0x39) = 0x73;\n    }\n    iVar9 = -1;\n    do {\n        iVar9 = iVar9 + 1;\n    } while (pcVar7[iVar9] != '\\0');\n    *(arg1 + 0x48) = iVar9;\n    return 1;\n}\n",
        "token_count": 1355
    },
    "1400227b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.1400227b8(int64_t arg1)\n\n{\n    uint8_t uVar1;\n    int64_t *piVar2;\n    char cVar3;\n    uint16_t uVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    int64_t iVar7;\n    uint8_t *puVar8;\n    char *pcVar9;\n    uint8_t *puVar10;\n    int64_t iVar11;\n    uint8_t uVar12;\n    uint64_t uVar13;\n    int64_t arg4;\n    bool bVar14;\n    ulong uStackX8;\n    \n    *(arg1 + 0x28) = *(arg1 + 0x28) | 0x10;\n    iVar5 = *(arg1 + 0x30);\n    if (iVar5 < 0) {\n        iVar5 = (-((*(arg1 + 0x3a) - 0x41U & 0xffdf) != 0) & 0xfffffff9) + 0xd;\n        *(arg1 + 0x30) = iVar5;\n    }\n    else if ((iVar5 == 0) && ((*(arg1 + 0x3a) == 0x67 || (iVar5 = 0,  *(arg1 + 0x3a) == 0x47)))) {\n        *(arg1 + 0x30) = 1;\n        iVar5 = 1;\n    }\n    iVar11 = arg1 + 0x50;\n    cVar3 = fcn.14001ef70(iVar11, iVar5 + 0x15d, *(arg1 + 8));\n    uVar13 = 0x200;\n    if (cVar3 == '\\0') {\n        if (*(arg1 + 0x458) == 0) {\n            iVar5 = 0x200;\n        }\n        else {\n            iVar5 = *(arg1 + 0x450) >> 1;\n        }\n        *(arg1 + 0x30) = iVar5 + -0x15d;\n    }\n    iVar7 = *(arg1 + 0x458);\n    if (*(arg1 + 0x458) == 0) {\n        iVar7 = iVar11;\n    }\n    *(arg1 + 0x40) = iVar7;\n    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n    iVar7 = *(arg1 + 0x458);\n    uStackX8 = *(*(arg1 + 0x18) + -8);\n    if (iVar7 == 0) {\n        arg4 = arg1 + 0x250;\n        iVar7 = iVar11;\n    }\n    else {\n        arg4 = (*(arg1 + 0x450) >> 1) + iVar7;\n        uVar13 = *(arg1 + 0x450) >> 1;\n    }\n    fcn.140026554(&uStackX8, iVar7, uVar13, arg4);\n    if (((*(arg1 + 0x28) >> 5 & 1) != 0) && (*(arg1 + 0x30) == 0)) {\n        iVar11 = *(arg1 + 8);\n        if (*(iVar11 + 0x28) == '\\0') {\n            fcn.140017aa0(iVar11);\n        }\n        puVar8 = *(arg1 + 0x40);\n        piVar2 = *(iVar11 + 0x18);\n        uVar13 = *puVar8;\n        if (*(uVar13 + piVar2[0x22]) != 'e') {\n            do {\n                puVar8 = puVar8 + 1;\n                uVar13 = *puVar8;\n            } while ((*(*piVar2 + uVar13 * 2) & 4) != 0);\n        }\n        bVar14 = *(uVar13 + piVar2[0x22]) == 'x';\n        if (bVar14) {\n            uVar13 = puVar8[2];\n        }\n        puVar10 = puVar8 + 2;\n        if (!bVar14) {\n            puVar10 = puVar8;\n        }\n        *puVar10 = **piVar2[0x1f];\n        do {\n            puVar10 = puVar10 + 1;\n            uVar1 = *puVar10;\n            uVar12 = uVar13;\n            *puVar10 = uVar12;\n            uVar13 = uVar1;\n        } while (uVar12 != 0);\n    }\n    uVar4 = *(arg1 + 0x3a) - 0x47;\n    uVar13 = uVar4;\n    if (((uVar4 & 0xffdf) == 0) && (uVar6 = *(arg1 + 0x28) >> 5,  uVar13 = uVar6,  (uVar6 & 1) == 0)) {\n        iVar11 = *(arg1 + 8);\n        if (*(iVar11 + 0x28) == '\\0') {\n            fcn.140017aa0(iVar11);\n        }\n        uVar13 = fcn.140020dbc(*(arg1 + 0x40), iVar11 + 0x18);\n    }\n    pcVar9 = *(arg1 + 0x40);\n    cVar3 = *pcVar9;\n    uVar13 = uVar13 & 0xffffffffffffff00;\n    if (cVar3 == '-') {\n        *(arg1 + 0x28) = *(arg1 + 0x28) | 0x40;\n        pcVar9 = pcVar9 + 1;\n        *(arg1 + 0x40) = pcVar9;\n        cVar3 = *pcVar9;\n    }\n    if ((cVar3 + 0xb7U < 0x26) && ((0x2100000021U >> (cVar3 + 0xb7U & 0x3f) & 1) != 0)) {\n        *(arg1 + 0x28) = *(arg1 + 0x28) & 0xfffffff7;\n        uVar13 = 0;\n        *(arg1 + 0x3a) = 0x73;\n    }\n    iVar11 = -1;\n    do {\n        iVar11 = iVar11 + 1;\n    } while (pcVar9[iVar11] != '\\0');\n    *(arg1 + 0x48) = iVar11;\n    return CONCAT71(uVar13 >> 8, 1);\n}\n",
        "token_count": 1454
    },
    "140022ba": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint64_t fcn.140022ba0(int64_t arg1)\n\n{\n    uint64_t *puVar1;\n    int64_t iVar2;\n    uint64_t uVar3;\n    int32_t iVar4;\n    \n    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n    puVar1 = *(*(arg1 + 0x18) + -8);\n    uVar3 = fcn.140026c24();\n    if (uVar3 == 0) goto code_r0x000140022bc3;\n    iVar4 = *(arg1 + 0x34);\n    if (iVar4 < 6) {\n        if (iVar4 != 5) {\n            if (iVar4 != 0) {\n                if (iVar4 == 1) {\n                    uVar3 = uVar3 & 0xffffffffffffff00;\n                    *puVar1 = *(arg1 + 0x20);\n                    goto code_r0x000140022c3c;\n                }\n                iVar4 = iVar4 + -2;\n                if (iVar4 == 0) {\n                    uVar3 = *(arg1 + 0x20);\n                    *puVar1 = *(arg1 + 0x20);\n                    goto code_r0x000140022c3c;\n                }\n                goto code_r0x000140022c2b;\n            }\ncode_r0x000140022c4d:\n            uVar3 = *(arg1 + 0x20);\n            *puVar1 = *(arg1 + 0x20);\n            goto code_r0x000140022c3c;\n        }\n    }\n    else if (((iVar4 != 6) && (iVar4 != 7)) && (iVar4 = iVar4 + -9,  iVar4 != 0)) {\ncode_r0x000140022c2b:\n        if (iVar4 == 1) goto code_r0x000140022c4d;\n        if (iVar4 != 2) {\ncode_r0x000140022bc3:\n            iVar2 = *(arg1 + 8);\n            *(iVar2 + 0x30) = 1;\n            *(iVar2 + 0x2c) = 0x16;\n            uVar3 = fcn.140013f90(0, 0, 0, 0);\n            return uVar3 & 0xffffffffffffff00;\n        }\n    }\n    uVar3 = *(arg1 + 0x20);\n    *puVar1 = uVar3;\ncode_r0x000140022c3c:\n    *(arg1 + 0x38) = 1;\n    return CONCAT71(uVar3 >> 8, 1);\n}\n",
        "token_count": 596
    },
    "140022d8": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t fcn.140022d84(int64_t arg1, ulong arg2)\n\n{\n    int64_t arg1_00;\n    uint8_t *puVar1;\n    uint8_t *puVar2;\n    int32_t iVar3;\n    \n    arg1_00 = *(arg1 + 8);\n    if (*(arg1_00 + 0x28) == '\\0') {\n        fcn.140017aa0(arg1_00);\n    }\n    puVar2 = *(arg1 + 0x40);\n    iVar3 = 0;\n    if (0 < arg2) {\n        do {\n            if (*puVar2 == 0) {\n                return iVar3;\n            }\n            puVar1 = puVar2 + 1;\n            if ((*(**(arg1_00 + 0x18) + *puVar2 * 2) & 0x8000) == 0) {\n                puVar1 = puVar2;\n            }\n            iVar3 = iVar3 + 1;\n            puVar2 = puVar1 + 1;\n        } while (iVar3 < arg2);\n    }\n    return iVar3;\n}\n",
        "token_count": 253
    },
    "140022f4": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_28h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.140022f48(uint64_t arg1, uchar *arg2, uint64_t arg3, int64_t arg4)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    uint uVar3;\n    uint uVar4;\n    uint uVar5;\n    uint uVar6;\n    uint *in_stack_00000028;\n    ulong var_3e0h;\n    ulong var_3e8h;\n    ulong var_3f0h;\n    ulong var_3f8h;\n    ulong var_400h;\n    uchar auStack1352 [32];\n    ulong uStack1320;\n    int64_t *piStack1312;\n    uchar *puStack1304;\n    uint64_t uStack1296;\n    uint64_t uStack1288;\n    uchar uStack1280;\n    uint uStack1279;\n    ushort uStack1275;\n    uchar uStack1273;\n    int64_t aiStack1272 [2];\n    uchar uStack1256;\n    uchar auStack1248 [16];\n    char cStack1232;\n    uint uStack1228;\n    char cStack1224;\n    uint uStack1220;\n    char cStack1216;\n    uint64_t uStack1208;\n    int64_t *piStack1200;\n    int64_t iStack1192;\n    uint uStack1176;\n    uchar uStack1172;\n    ulong uStack1168;\n    uint uStack1160;\n    ushort uStack1152;\n    uint uStack1136;\n    uchar uStack1132;\n    ulong var_80h;\n    ulong var_bp_78h;\n    ulong var_70h;\n    ulong var_68h;\n    ulong var_bp_60h;\n    ulong var_58h;\n    uchar **var_bp_50h;\n    uint var_bp_48h;\n    uint64_t var_bp_40h;\n    ulong var_bp_38h;\n    ulong var_28h;\n    \n    var_bp_40h = *0x14003ef38 ^ auStack1352;\n    aiStack1272[0] = 0;\n    uStack1256 = 0;\n    cStack1232 = '\\0';\n    cStack1224 = '\\0';\n    cStack1216 = '\\0';\n    if (in_stack_00000028 == NULL) {\n        uVar3 = *0x14003e158;\n        uVar4 = *0x14003e15c;\n        uVar5 = *0x14003e160;\n        uVar6 = *0x14003e164;\n        if (*0x14003f218 == 0) goto code_r0x000140022fb7;\n    }\n    else {\n        uVar3 = *in_stack_00000028;\n        uVar4 = in_stack_00000028[1];\n        uVar5 = in_stack_00000028[2];\n        uVar6 = in_stack_00000028[3];\ncode_r0x000140022fb7:\n        cStack1232 = '\\x01';\n        auStack1248 = CONCAT412(uVar6, CONCAT48(uVar5, CONCAT44(uVar4, uVar3)));\n    }\n    if ((arg4 == 0) || ((arg3 != 0 && (arg2 == NULL)))) {\n        piStack1312 = aiStack1272;\n        cStack1224 = '\\x01';\n        uStack1320 = 0;\n        uStack1228 = 0x16;\n        fcn.140013f90(0, 0, 0, 0);\n        goto code_r0x000140023136;\n    }\n    uStack1279 = 0;\n    uStack1275 = 0;\n    uStack1273 = 0;\n    uStack1288 = 0;\n    if (((arg1 & 2) != 0) || (uStack1280 = 0,  arg2 == NULL)) {\n        uStack1280 = 1;\n    }\n    piStack1200 = aiStack1272;\n    uStack1176 = 0;\n    var_bp_50h = &puStack1304;\n    uStack1172 = 0;\n    uStack1168 = 0;\n    uStack1160 = 0;\n    uStack1152 = 0;\n    uStack1136 = 0;\n    uStack1132 = 0;\n    _var_bp_60h = ZEXT816(0);\n    var_bp_48h = 0;\n    puStack1304 = arg2;\n    uStack1296 = arg3;\n    uStack1208 = arg1;\n    iStack1192 = arg4;\n    iVar1 = fcn.1400212d8(&uStack1208, arg2, arg3);\n    if (arg2 == NULL) {\ncode_r0x00014002312a:\n        fcn.140014db4(var_58h);\n    }\n    else {\n        if ((arg1 & 1) == 0) {\n            if ((arg1 & 2) != 0) {\n                if (arg3 != 0) {\n                    if (iVar1 < 0) {\n                        *arg2 = 0;\n                    }\n                    else {\n                        if (uStack1288 != arg3) goto code_r0x000140023126;\n                        arg2[arg3 - 1] = 0;\n                    }\n                }\n                goto code_r0x00014002312a;\n            }\n            if (arg3 != 0) {\n                if (uStack1288 == arg3) {\n                    arg2[arg3 - 1] = 0;\n                    fcn.140014db4(var_58h);\n                    goto code_r0x000140023136;\n                }\n                goto code_r0x000140023126;\n            }\n        }\n        else if ((arg3 != 0) || (iVar1 == 0)) {\n            if (uStack1288 != arg3) {\ncode_r0x000140023126:\n                arg2[uStack1288] = 0;\n                goto code_r0x00014002312a;\n            }\n            if ((iVar1 < 0) || (iVar1 <= arg3)) goto code_r0x00014002312a;\n        }\n        fcn.140014db4(var_58h);\n    }\ncode_r0x000140023136:\n    uVar3 = uStack1228;\n    if (cStack1232 == '\\x02') {\n        *(aiStack1272[0] + 0x3a8) = *(aiStack1272[0] + 0x3a8) & 0xfffffffd;\n    }\n    if (cStack1224 != '\\0') {\n        iVar2 = fcn.140013c70(aiStack1272);\n        *(iVar2 + 0x20) = uVar3;\n    }\n    if (cStack1216 != '\\0') {\n        iVar2 = fcn.140013c70(aiStack1272);\n        *(iVar2 + 0x24) = uStack1220;\n    }\n    fcn.140018790(var_bp_40h ^ auStack1352);\n    return;\n}\n",
        "token_count": 1594
    },
    "14002319": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t fcn.14002319c(ulong noname_0, uchar *arg2, int64_t arg3, int64_t arg4, uint *arg_30h, ulong arg_38h)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    uint uVar3;\n    uint uVar4;\n    uint uVar5;\n    uint uVar6;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_bp_28h;\n    ulong var_bp_18h;\n    ulong var_bp_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_30h._0_1_ = 0;\n    var_bp_18h._0_1_ = '\\0';\n    var_bp_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (arg_30h == NULL) {\n        uVar3 = *0x14003e158;\n        uVar4 = *0x14003e15c;\n        uVar5 = *0x14003e160;\n        uVar6 = *0x14003e164;\n        if (*0x14003f218 == 0) goto code_r0x0001400231e9;\n    }\n    else {\n        uVar3 = *arg_30h;\n        uVar4 = arg_30h[1];\n        uVar5 = arg_30h[2];\n        uVar6 = arg_30h[3];\ncode_r0x0001400231e9:\n        var_bp_18h._0_1_ = '\\x01';\n        _var_bp_28h = CONCAT412(uVar6, CONCAT48(uVar5, CONCAT44(uVar4, uVar3)));\n    }\n    if (((arg4 == 0) || (arg2 == NULL)) || (arg3 == 0)) {\n        var_bp_18h._4_4_ = 0x16;\n    }\n    else {\n        iVar1 = fcn.14001edc0(noname_0, arg2, arg3, arg4);\n        if (iVar1 < 0) {\n            *arg2 = 0;\n        }\n        if (iVar1 != -2) goto code_r0x00014002325a;\n        var_bp_18h._4_4_ = 0x22;\n    }\n    var_bp_10h._0_1_ = '\\x01';\n    fcn.140013f90(0, 0, 0, 0);\n    iVar1 = -1;\ncode_r0x00014002325a:\n    uVar3 = var_bp_18h._4_4_;\n    if (var_bp_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_bp_10h != '\\0') {\n        iVar2 = fcn.140013c70(&var_40h);\n        *(iVar2 + 0x20) = uVar3;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar2 = fcn.140013c70(&var_40h);\n        *(iVar2 + 0x24) = var_bp_10h._4_4_;\n    }\n    return iVar1;\n}\n",
        "token_count": 770
    },
    "1400232b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_28h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.1400232b0(uint64_t arg1, ushort *arg2, uint64_t arg3, int64_t arg4)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    uint uVar3;\n    uint uVar4;\n    uint uVar5;\n    uint uVar6;\n    uint *in_stack_00000028;\n    ulong var_3e0h;\n    ulong var_3e8h;\n    ulong var_3f0h;\n    ulong var_3f8h;\n    ulong var_400h;\n    uchar auStack1352 [32];\n    ulong uStack1320;\n    int64_t *piStack1312;\n    ushort *puStack1304;\n    uint64_t uStack1296;\n    uint64_t uStack1288;\n    uchar uStack1280;\n    uint uStack1279;\n    ushort uStack1275;\n    uchar uStack1273;\n    int64_t aiStack1272 [2];\n    uchar uStack1256;\n    uchar auStack1248 [16];\n    char cStack1232;\n    uint uStack1228;\n    char cStack1224;\n    uint uStack1220;\n    char cStack1216;\n    uint64_t uStack1208;\n    int64_t *piStack1200;\n    int64_t iStack1192;\n    uint uStack1176;\n    uchar uStack1172;\n    ulong uStack1168;\n    uint uStack1160;\n    uchar uStack1152;\n    ushort uStack1150;\n    uint uStack1136;\n    uchar uStack1132;\n    ulong var_80h;\n    ulong var_bp_78h;\n    ulong var_70h;\n    ulong var_68h;\n    ulong var_bp_60h;\n    ulong var_58h;\n    ushort **var_bp_50h;\n    uint var_bp_48h;\n    uint64_t var_bp_40h;\n    ulong var_bp_38h;\n    ulong var_28h;\n    \n    var_bp_40h = *0x14003ef38 ^ auStack1352;\n    aiStack1272[0] = 0;\n    uStack1256 = 0;\n    cStack1232 = '\\0';\n    cStack1224 = '\\0';\n    cStack1216 = '\\0';\n    if (in_stack_00000028 == NULL) {\n        uVar3 = *0x14003e158;\n        uVar4 = *0x14003e15c;\n        uVar5 = *0x14003e160;\n        uVar6 = *0x14003e164;\n        if (*0x14003f218 == 0) goto code_r0x00014002331f;\n    }\n    else {\n        uVar3 = *in_stack_00000028;\n        uVar4 = in_stack_00000028[1];\n        uVar5 = in_stack_00000028[2];\n        uVar6 = in_stack_00000028[3];\ncode_r0x00014002331f:\n        cStack1232 = '\\x01';\n        auStack1248 = CONCAT412(uVar6, CONCAT48(uVar5, CONCAT44(uVar4, uVar3)));\n    }\n    if ((arg4 == 0) || ((arg3 != 0 && (arg2 == NULL)))) {\n        piStack1312 = aiStack1272;\n        cStack1224 = '\\x01';\n        uStack1320 = 0;\n        uStack1228 = 0x16;\n        fcn.140013f90(0, 0, 0, 0);\n        goto code_r0x0001400234a6;\n    }\n    uStack1279 = 0;\n    uStack1275 = 0;\n    uStack1273 = 0;\n    uStack1288 = 0;\n    if (((arg1 & 2) != 0) || (uStack1280 = 0,  arg2 == NULL)) {\n        uStack1280 = 1;\n    }\n    piStack1200 = aiStack1272;\n    uStack1176 = 0;\n    var_bp_50h = &puStack1304;\n    uStack1172 = 0;\n    uStack1168 = 0;\n    uStack1160 = 0;\n    uStack1152 = 0;\n    uStack1150 = 0;\n    uStack1136 = 0;\n    uStack1132 = 0;\n    _var_bp_60h = ZEXT816(0);\n    var_bp_48h = 0;\n    puStack1304 = arg2;\n    uStack1296 = arg3;\n    uStack1208 = arg1;\n    iStack1192 = arg4;\n    iVar1 = fcn.14002165c(&uStack1208);\n    if (arg2 == NULL) {\ncode_r0x00014002349a:\n        fcn.140014db4(var_58h);\n    }\n    else {\n        if ((arg1 & 1) == 0) {\n            if ((arg1 & 2) != 0) {\n                if (arg3 != 0) {\n                    if (iVar1 < 0) {\n                        *arg2 = 0;\n                    }\n                    else {\n                        if (uStack1288 != arg3) goto code_r0x000140023495;\n                        arg2[arg3 - 1] = 0;\n                    }\n                }\n                goto code_r0x00014002349a;\n            }\n            if (arg3 != 0) {\n                if (uStack1288 == arg3) {\n                    arg2[arg3 - 1] = 0;\n                    fcn.140014db4(var_58h);\n                    goto code_r0x0001400234a6;\n                }\n                goto code_r0x000140023495;\n            }\n        }\n        else if ((arg3 != 0) || (iVar1 == 0)) {\n            if (uStack1288 != arg3) {\ncode_r0x000140023495:\n                arg2[uStack1288] = 0;\n                goto code_r0x00014002349a;\n            }\n            if ((iVar1 < 0) || (iVar1 <= arg3)) goto code_r0x00014002349a;\n        }\n        fcn.140014db4(var_58h);\n    }\ncode_r0x0001400234a6:\n    uVar3 = uStack1228;\n    if (cStack1232 == '\\x02') {\n        *(aiStack1272[0] + 0x3a8) = *(aiStack1272[0] + 0x3a8) & 0xfffffffd;\n    }\n    if (cStack1224 != '\\0') {\n        iVar2 = fcn.140013c70(aiStack1272);\n        *(iVar2 + 0x20) = uVar3;\n    }\n    if (cStack1216 != '\\0') {\n        iVar2 = fcn.140013c70(aiStack1272);\n        *(iVar2 + 0x24) = uStack1220;\n    }\n    fcn.140018790(var_bp_40h ^ auStack1352);\n    return;\n}\n",
        "token_count": 1610
    },
    "14002360": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.140023604(ulong arg1, ulong *arg2)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    ulong in_R8;\n    ulong var_50h;\n    ulong *var_48h;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_28h;\n    uint uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_bp_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_18h._0_1_ = *0x14003f218 == 0;\n    var_30h._0_1_ = 0;\n    var_bp_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (var_18h) {\n        var_28h._0_4_ = *0x14003e158;\n        var_28h._4_4_ = *0x14003e15c;\n        uStack40 = *0x14003e160;\n        uStack36 = *0x14003e164;\n    }\n    if (arg2 != NULL) {\n        *arg2 = arg1;\n    }\n    var_50h = arg1;\n    var_48h = arg2;\n    uVar1 = fcn.1400177b8(&var_40h, &var_50h, in_R8);\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_bp_10h != '\\0') {\n        iVar2 = fcn.140013c70(&var_40h);\n        *(iVar2 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar2 = fcn.140013c70(&var_40h);\n        *(iVar2 + 0x24) = var_bp_10h._4_4_;\n    }\n    return uVar1;\n}\n",
        "token_count": 500
    },
    "140023ac": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.140023ac4(ulong param_1)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_28h;\n    uint uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_bp_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_18h._0_1_ = *0x14003f218 == 0;\n    var_30h._0_1_ = 0;\n    var_bp_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (var_18h) {\n        var_28h._0_4_ = *0x14003e158;\n        var_28h._4_4_ = *0x14003e15c;\n        uStack40 = *0x14003e160;\n        uStack36 = *0x14003e164;\n    }\n    uVar1 = fcn.1400239a4(param_1, &var_40h);\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_bp_10h != '\\0') {\n        iVar2 = fcn.140013c70(&var_40h);\n        *(iVar2 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar2 = fcn.140013c70(&var_40h);\n        *(iVar2 + 0x24) = var_bp_10h._4_4_;\n    }\n    return uVar1;\n}\n",
        "token_count": 433
    },
    "140023b6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint64_t fcn.140023b60(uint32_t *arg1, uint32_t *arg2)\n\n{\n    uint32_t uVar1;\n    uint64_t uVar2;\n    uint64_t uVar3;\n    uint64_t uVar4;\n    uint32_t uVar5;\n    uint32_t *puVar6;\n    uint32_t uVar7;\n    uint64_t uVar8;\n    int64_t iVar9;\n    uint32_t uVar10;\n    int32_t iVar11;\n    int64_t iVar12;\n    int32_t iVar13;\n    uint64_t uVar14;\n    uint32_t uVar15;\n    uint64_t uVar16;\n    uint32_t uVar17;\n    uint32_t uVar18;\n    uint8_t uStackX8;\n    uint32_t uStackX24;\n    uint64_t uStack576;\n    uint64_t uStack560;\n    uchar auStack532 [468];\n    \n    if ((*arg1 == 0) || (uVar5 = *arg2,  uVar5 == 0)) {\n        return 0;\n    }\n    uVar15 = *arg1 - 1;\n    uVar16 = uVar15;\n    uVar18 = uVar5 - 1;\n    if (uVar18 == 0) {\n        uVar5 = arg2[1];\n        uVar8 = 0;\n        if (uVar5 == 1) {\n            uVar5 = arg1[1];\n            *arg1 = 0;\n            fcn.140023fec(arg1 + 1, 0x1cc, auStack532, 0);\n            return uVar5;\n        }\n        uVar14 = uVar8;\n        if (uVar15 != 0) {\n            while (uVar15 != 0xffffffff) {\n                iVar9 = uVar16 + 1;\n                uVar15 = uVar16 - 1;\n                uVar16 = uVar15;\n                uVar2 = arg1[iVar9] | uVar8 << 0x20;\n                uVar8 = uVar2 % uVar5;\n                uVar14 = (uVar14 << 0x20) + SUB164(ZEXT816(uVar2) / ZEXT416(uVar5), 0);\n            }\n            *arg1 = 0;\n            fcn.140023fec(arg1 + 1, 0x1cc, auStack532, 0);\n            arg1[1] = uVar8;\n            arg1[2] = 0;\n            *arg1 = 1;\n            return uVar14;\n        }\n        uVar18 = arg1[1];\n        *arg1 = 0;\n        fcn.140023fec(arg1 + 1, 0x1cc, auStack532, 0);\n        uVar15 = uVar18 % uVar5;\n        arg1[1] = uVar15;\n        *arg1 = uVar15 != 0;\n        return uVar18 / uVar5;\n    }\n    if (uVar15 < uVar18) {\n        return 0;\n    }\n    iVar9 = uVar15;\n    iVar13 = uVar15 - uVar18;\n    iVar12 = iVar13;\n    if (iVar12 <= iVar9) {\n        puVar6 = arg1 + iVar9 + 1;\n        uVar8 = uVar16;\n        do {\n            iVar11 = uVar8;\n            if (*(arg2 + (iVar12 * -4 - arg1) + puVar6) != *puVar6) {\n                if (arg1[iVar11 + 1] <= arg2[(iVar11 - iVar13) + 1]) goto code_r0x000140023cfa;\n                break;\n            }\n            uVar8 = iVar11 - 1;\n            iVar9 = iVar9 + -1;\n            puVar6 = puVar6 + -1;\n        } while (iVar12 <= iVar9);\n    }\n    iVar13 = iVar13 + 1;\ncode_r0x000140023cfa:\n    if (iVar13 == 0) {\n        return 0;\n    }\n    uVar8 = 0;\n    uVar18 = arg2[(uVar5 - 1) + 1];\n    uVar14 = uVar18;\n    uStackX24 = arg2[(uVar5 - 2) + 1];\n    iVar11 = 0x1f;\n    if (uVar18 != 0) {\n        for (; uVar18 >> iVar11 == 0; iVar11 = iVar11 + -1) {\n        }\n    }\n    uVar10 = 0;\n    if (uVar18 == 0) {\n        iVar11 = 0x20;\n        uStackX8 = 0;\n    }\n    else {\n        iVar11 = 0x1f - iVar11;\n        uStackX8 = 0x20 - iVar11;\n        if (iVar11 == 0) goto code_r0x000140023d8d;\n    }\n    uVar7 = uStackX24 >> (uStackX8 & 0x1f);\n    uStackX24 = uStackX24 << (iVar11 & 0x1f);\n    uVar14 = uVar7 | uVar18 << (iVar11 & 0x1f);\n    if (2 < uVar5) {\n        uStackX24 = uStackX24 | arg2[(uVar5 - 3) + 1] >> (uStackX8 & 0x1f);\n    }\ncode_r0x000140023d8d:\n    iVar13 = iVar13 + -1;\n    uStack560 = 0;\n    uVar2 = uVar8;\n    if (-1 < iVar13) {\n        uVar18 = iVar13 + uVar5;\n        do {\n            uVar15 = uVar10;\n            if (uVar18 <= uVar16) {\n                uVar15 = arg1[uVar18 + 1];\n            }\n            uVar7 = arg1[(uVar18 - 2) + 1];\n            uVar2 = uVar7;\n            uStack576 = CONCAT44(uVar15, arg1[(uVar18 - 1) + 1]);\n            if (iVar11 != 0) {\n                uStack576 = uVar7 >> (uStackX8 & 0x3f) | uStack576 << (iVar11 & 0x3f);\n                uVar7 = uVar7 << (iVar11 & 0x1f);\n                uVar2 = uVar7;\n                if (2 < uVar18) {\n                    uVar2 = uVar7 | arg1[(uVar18 - 3) + 1] >> (uStackX8 & 0x1f);\n                }\n            }\n            uVar3 = uStack576 / uVar14;\n            uStack576 = uStack576 % uVar14;\n            if (0xffffffff < uVar3) {\n                iVar9 = uVar3 - 0xffffffff;\n                uVar3 = 0xffffffff;\n                uStack576 = uStack576 + iVar9 * uVar14;\n            }\n            if (uStack576 < 0x100000000) {\n                uVar4 = uStackX24 * uVar3;\n                do {\n                    if (uVar4 <= (uStack576 << 0x20 | uVar2)) break;\n                    uVar3 = uVar3 - 1;\n                    uVar4 = uVar4 - uStackX24;\n                    uStack576 = uStack576 + uVar14;\n                } while (uStack576 < 0x100000000);\n            }\n            if (uVar3 != 0) {\n                uVar16 = uVar8;\n                uVar7 = uVar10;\n                puVar6 = arg2;\n                if (uVar5 != 0) {\n                    do {\n                        uVar16 = uVar16 + puVar6[1] * uVar3;\n                        uVar1 = uVar16;\n                        uVar2 = uVar16 >> 0x20;\n                        uVar16 = uVar2 + 1;\n                        if (uVar1 <= arg1[uVar7 + iVar13 + 1]) {\n                            uVar16 = uVar2;\n                        }\n                        uVar17 = uVar7 + 1;\n                        arg1[uVar7 + iVar13 + 1] = arg1[uVar7 + iVar13 + 1] - uVar1;\n                        uVar7 = uVar17;\n                        puVar6 = puVar6 + 1;\n                    } while (uVar17 < uVar5);\n                }\n                if (uVar15 < uVar16) {\n                    uVar16 = uVar8;\n                    uVar15 = uVar10;\n                    puVar6 = arg2;\n                    if (uVar5 != 0) {\n                        do {\n                            uVar7 = uVar15 + 1;\n                            uVar16 = uVar16 + puVar6[1] + arg1[uVar15 + iVar13 + 1];\n                            arg1[uVar15 + iVar13 + 1] = uVar16;\n                            uVar16 = uVar16 >> 0x20;\n                            uVar15 = uVar7;\n                            puVar6 = puVar6 + 1;\n                        } while (uVar7 < uVar5);\n                    }\n                    uVar3 = uVar3 - 1;\n                }\n                uVar16 = uVar18 - 1;\n            }\n            uVar15 = uVar16;\n            uVar18 = uVar18 - 1;\n            uVar2 = (uStack560 << 0x20) + (uVar3 & 0xffffffff);\n            iVar13 = iVar13 + -1;\n            uStack560 = uVar2;\n        } while (-1 < iVar13);\n    }\n    uVar15 = uVar15 + 1;\n    uVar16 = uVar15;\n    uVar8 = uVar16;\n    if (uVar15 < *arg1) {\n        do {\n            uVar5 = uVar8 + 1;\n            arg1[uVar8 + 1] = 0;\n            uVar8 = uVar5;\n        } while (uVar5 < *arg1);\n    }\n    *arg1 = uVar15;\n    while( true ) {\n        if (uVar15 == 0) {\n            return uVar2;\n        }\n        uVar15 = uVar16 - 1;\n        uVar16 = uVar15;\n        if (arg1[uVar16 + 1] != 0) break;\n        *arg1 = uVar15;\n    }\n    return uVar2;\n}\n",
        "token_count": 2347
    },
    "14002552": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.14002552c(ulong noname_0, ulong *arg2, int64_t **arg3, ulong *arg4)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    \n    fcn.140025a0c(*arg2);\n    if ((**arg3 != 0) && (uVar1 = *(**arg3 + 0x14),  (uVar1 >> 0xd & 1) != 0)) {\n        if ((((uVar1 & 3) == 2) && ((uVar1 & 0xc0) != 0)) || ((uVar1 >> 0xb & 1) != 0)) {\n            if ((*arg3[2] != '\\0') || ((*(**arg3 + 0x14) >> 1 & 1) != 0)) {\n                iVar2 = fcn.140025794(**arg3);\n                if (iVar2 == -1) {\n                    *arg3[3] = 0xffffffff;\n                }\n                else {\n                    *arg3[1] = *arg3[1] + 1;\n                }\n            }\n        }\n        else {\n            *arg3[1] = *arg3[1] + 1;\n        }\n    }\n    fcn.140025a18(*arg4);\n    return;\n}\n",
        "token_count": 296
    },
    "14002570": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nulong fcn.140025708(ulong *arg1, ulong arg2)\n\n{\n    ulong arg2_00;\n    uint32_t uVar1;\n    uint32_t uVar2;\n    \n    if (((*(arg1 + 0x14) & 3) == 2) && ((*(arg1 + 0x14) & 0xc0) != 0)) {\n        uVar2 = *arg1 - *(arg1 + 1);\n        *(arg1 + 2) = 0;\n        arg2_00 = arg1[1];\n        *arg1 = arg2_00;\n        if (0 < uVar2) {\n            uVar1 = fcn.140026bfc(arg1);\n            uVar1 = fcn.14002870c(uVar1, arg2_00, uVar2, arg2);\n            if (uVar2 != uVar1) {\n                LOCK();\n                *(arg1 + 0x14) = *(arg1 + 0x14) | 0x10;\n                return 0xffffffff;\n            }\n            if ((*(arg1 + 0x14) >> 2 & 1) != 0) {\n                LOCK();\n                *(arg1 + 0x14) = *(arg1 + 0x14) & 0xfffffffd;\n            }\n        }\n    }\n    return 0;\n}\n",
        "token_count": 301
    },
    "14002579": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.140025794(int64_t arg1)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int64_t iVar4;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_28h;\n    uint uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_bp_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_18h._0_1_ = *0x14003f218 == 0;\n    var_30h._0_1_ = 0;\n    var_bp_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (var_18h) {\n        var_28h._0_4_ = *0x14003e158;\n        var_28h._4_4_ = *0x14003e15c;\n        uStack40 = *0x14003e160;\n        uStack36 = *0x14003e164;\n    }\n    if (arg1 == 0) {\n        uVar1 = fcn.1400256a8(0);\n        goto code_r0x000140025818;\n    }\n    iVar2 = fcn.140025708(arg1, &var_40h);\n    if (iVar2 == 0) {\n        if ((*(arg1 + 0x14) >> 0xb & 1) != 0) {\n            uVar3 = fcn.140026bfc(arg1);\n            iVar2 = fcn.140027d8c(uVar3);\n            if (iVar2 != 0) goto code_r0x0001400257f4;\n        }\n        uVar1 = 0;\n    }\n    else {\ncode_r0x0001400257f4:\n        uVar1 = 0xffffffff;\n    }\ncode_r0x000140025818:\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_bp_10h != '\\0') {\n        iVar4 = fcn.140013c70(&var_40h);\n        *(iVar4 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar4 = fcn.140013c70(&var_40h);\n        *(iVar4 + 0x24) = var_bp_10h._4_4_;\n    }\n    return uVar1;\n}\n",
        "token_count": 615
    },
    "140025ed": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.140025ed4(uchar *arg1, uchar *arg2, ulong arg3)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    ulong uVar3;\n    uchar *puVar4;\n    uchar *arg2_00;\n    int64_t iVar5;\n    char in_R9B;\n    int32_t in_stack_00000028;\n    int32_t *in_stack_00000030;\n    uint8_t in_stack_00000038;\n    int64_t in_stack_00000040;\n    int64_t iVar6;\n    \n    iVar2 = 0;\n    if (0 < arg3) {\n        iVar2 = arg3;\n    }\n    if (iVar2 + 9 < arg2) {\n        if ((in_stack_00000038 != 0) && (puVar4 = arg1 + (*in_stack_00000030 == 0x2d),  0 < arg3)) {\n            iVar5 = -1;\n            do {\n                iVar6 = iVar5;\n                iVar5 = iVar6 + 1;\n            } while (puVar4[iVar5] != '\\0');\n            fcn.14001a740(puVar4 + 1, puVar4, iVar6 + 2);\n        }\n        puVar4 = arg1;\n        if (*in_stack_00000030 == 0x2d) {\n            *arg1 = 0x2d;\n            puVar4 = arg1 + 1;\n        }\n        if (0 < arg3) {\n            *puVar4 = puVar4[1];\n            puVar4 = puVar4 + 1;\n            if (*(in_stack_00000040 + 0x28) == '\\0') {\n                fcn.140017aa0(in_stack_00000040);\n            }\n            *puVar4 = ***(*(in_stack_00000040 + 0x18) + 0xf8);\n        }\n        puVar4 = puVar4 + (in_stack_00000038 ^ 1) + arg3;\n        arg2_00 = arg1 + (arg2 - puVar4);\n        if (arg2 == 0xffffffffffffffff) {\n            arg2_00 = arg2;\n        }\n        iVar2 = fcn.14001ed60(puVar4, arg2_00, 0x1400357bc);\n        if (iVar2 != 0) {\n            fcn.1400140b0(0, 0, 0, 0, 0);\n            pcVar1 = swi(3);\n            uVar3 = (*pcVar1)();\n            return uVar3;\n        }\n        if (in_R9B != '\\0') {\n            *puVar4 = 0x45;\n        }\n        if (**(in_stack_00000030 + 2) != '0') {\n            iVar2 = in_stack_00000030[1] + -1;\n            if (iVar2 < 0) {\n                iVar2 = -iVar2;\n                puVar4[1] = 0x2d;\n            }\n            if (99 < iVar2) {\n                puVar4[2] = puVar4[2] + iVar2 / 100;\n                iVar2 = iVar2 % 100;\n            }\n            if (9 < iVar2) {\n                puVar4[3] = puVar4[3] + iVar2 / 10;\n                iVar2 = iVar2 % 10;\n            }\n            puVar4[4] = puVar4[4] + iVar2;\n        }\n        if ((in_stack_00000028 == 2) && (puVar4[2] == '0')) {\n            fcn.14001a740(puVar4 + 2, puVar4 + 3, 3);\n        }\n        uVar3 = 0;\n    }\n    else {\n        *(in_stack_00000040 + 0x30) = 1;\n        *(in_stack_00000040 + 0x2c) = 0x22;\n        fcn.140013f90(0, 0, 0, 0);\n        uVar3 = 0x22;\n    }\n    return uVar3;\n}\n",
        "token_count": 924
    },
    "14002619": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.140026190(uchar *arg1, ulong noname_1, ulong arg3, int32_t *arg4)\n\n{\n    uchar *arg1_00;\n    bool bVar1;\n    int32_t iVar2;\n    uchar *arg2;\n    int64_t iVar3;\n    int64_t iVar4;\n    char in_stack_00000028;\n    int64_t in_stack_00000030;\n    \n    if ((in_stack_00000028 != '\\0') && (arg4[1] + -1 == arg3)) {\n        *(arg1 + arg4[1] + -1 + (*arg4 == 0x2d)) = 0x30;\n    }\n    if (*arg4 == 0x2d) {\n        *arg1 = 0x2d;\n        arg1 = arg1 + 1;\n    }\n    iVar2 = arg4[1];\n    if (iVar2 < 1) {\n        if ((iVar2 == 0) && (**(arg4 + 2) == '0')) {\n            bVar1 = true;\n        }\n        else {\n            bVar1 = false;\n        }\n        if ((in_stack_00000028 == '\\0') || (!bVar1)) {\n            iVar4 = -1;\n            do {\n                iVar3 = iVar4;\n                iVar4 = iVar3 + 1;\n            } while (arg1[iVar4] != '\\0');\n            fcn.14001a740(arg1 + 1, arg1, iVar3 + 2);\n        }\n        arg2 = arg1 + 1;\n        *arg1 = 0x30;\n    }\n    else {\n        arg2 = arg1 + iVar2;\n    }\n    if (0 < arg3) {\n        arg1_00 = arg2 + 1;\n        iVar4 = -1;\n        do {\n            iVar3 = iVar4;\n            iVar4 = iVar3 + 1;\n        } while (arg2[iVar4] != '\\0');\n        fcn.14001a740(arg1_00, arg2, iVar3 + 2);\n        if (*(in_stack_00000030 + 0x28) == '\\0') {\n            fcn.140017aa0(in_stack_00000030);\n        }\n        *arg2 = ***(*(in_stack_00000030 + 0x18) + 0xf8);\n        if (arg4[1] < 0) {\n            iVar2 = -arg4[1];\n            if ((in_stack_00000028 != '\\0') || (iVar4 = -1,  iVar2 < arg3)) {\n                iVar4 = -1;\n                arg3._0_4_ = iVar2;\n            }\n            do {\n                iVar3 = iVar4;\n                iVar4 = iVar3 + 1;\n            } while (arg1_00[iVar4] != '\\0');\n            fcn.14001a740(arg1_00 + arg3, arg1_00, iVar3 + 2);\n            fcn.14001a0c0(arg1_00, 0x30, arg3);\n        }\n    }\n    return 0;\n}\n",
        "token_count": 688
    },
    "14002655": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nulong fcn.140026554(uint64_t *arg1, uchar *arg2, uint64_t arg3, int64_t arg4)\n\n{\n    uint64_t uVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    ulong uVar4;\n    int64_t iVar5;\n    uint32_t uVar6;\n    uint64_t uVar7;\n    int64_t in_stack_00000028;\n    int32_t in_stack_00000030;\n    uint64_t in_stack_00000040;\n    int64_t in_stack_00000050;\n    \n    if (arg2 == NULL) {\n        *(in_stack_00000050 + 0x30) = 1;\n        *(in_stack_00000050 + 0x2c) = 0x16;\n    }\n    else {\n        if (((arg3 != 0) && (arg4 != 0)) && (in_stack_00000028 != 0)) {\n            if ((in_stack_00000030 == 0x41) || (in_stack_00000030 - 0x45U < 3)) {\n                uVar6 = 1;\n            }\n            else {\n                uVar6 = 0;\n            }\n            if (((in_stack_00000040 & 8) == 0) && (uVar1 = *arg1,  (uVar1 >> 0x34 & 0x7ff) == 0x7ff)) {\n                if ((uVar1 & 0xfffffffffffff) == 0) {\n                    iVar5 = 0;\n                }\n                else if ((uVar1 < 0) && ((uVar1 & 0xfffffffffffff) == 0x8000000000000)) {\n                    iVar5 = 0xc;\n                }\n                else {\n                    iVar5 = (-((uVar1 & 0x8000000000000) != 0) & 0xfffffffffffffffc) + 8;\n                }\n                if (arg3 < 4U - (uVar1 >> 0x3f)) {\n                    *arg2 = 0;\n                    return 0xc;\n                }\n                uVar7 = 0xffffffffffffffff;\n                if (uVar1 < 0) {\n                    *arg2 = 0x2d;\n                    arg2 = arg2 + 1;\n                    *arg2 = 0;\n                    if (arg3 != 0xffffffffffffffff) {\n                        arg3 = arg3 - 1;\n                    }\n                }\n                uVar6 = (uVar6 ^ 1) * 2;\n                do {\n                    uVar7 = uVar7 + 1;\n                } while (*(*((uVar6 + iVar5) * 8 + 0x140031190) + uVar7) != '\\0');\n                iVar3 = fcn.14001ed60(arg2, arg3, *((uVar6 + (arg3 <= uVar7) + iVar5) * 8 + 0x140031190));\n                if (iVar3 == 0) {\n                    return 0;\n                }\n                fcn.1400140b0(0, 0, 0, 0, 0);\n                pcVar2 = swi(3);\n                uVar4 = (*pcVar2)();\n                return uVar4;\n            }\n            if (in_stack_00000030 != 0x41) {\n                if (in_stack_00000030 == 0x45) {\ncode_r0x0001400267a1:\n                    uVar4 = fcn.140025dd8(arg1, arg2, arg3, arg4);\n                    return uVar4;\n                }\n                if (in_stack_00000030 == 0x46) {\ncode_r0x000140026770:\n                    uVar4 = fcn.1400260b8(arg1, arg2, arg3, arg4);\n                    return uVar4;\n                }\n                if (in_stack_00000030 != 0x47) {\n                    if (in_stack_00000030 == 0x61) goto code_r0x0001400267db;\n                    if (in_stack_00000030 == 0x65) goto code_r0x0001400267a1;\n                    if (in_stack_00000030 == 0x66) goto code_r0x000140026770;\n                }\n                uVar4 = fcn.1400262e8(arg1, arg2, arg3, arg4);\n                return uVar4;\n            }\ncode_r0x0001400267db:\n            uVar4 = fcn.140025a24(arg1, arg2, arg3, arg4);\n            return uVar4;\n        }\n        *(in_stack_00000050 + 0x30) = 1;\n        *(in_stack_00000050 + 0x2c) = 0x16;\n    }\n    fcn.140013f90(0, 0, 0, 0);\n    return 0x16;\n}\n",
        "token_count": 1097
    },
    "1400269e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nint32_t fcn.1400269ec(uint16_t *arg1, uint8_t *arg2, uint64_t arg3, int64_t arg4)\n\n{\n    int64_t *arg2_00;\n    int64_t iVar1;\n    int32_t iVar2;\n    \n    if ((arg2 == NULL) || (arg3 == 0)) {\n        *0x140040468 = 0;\n    }\n    else {\n        if (*arg2 != 0) {\n            if (*(arg4 + 0x28) == '\\0') {\n                fcn.140017aa0(arg4);\n            }\n            arg2_00 = arg4 + 0x18;\n            if (*(*arg2_00 + 0xc) != 0xfde9) {\n                if (*(*arg2_00 + 0x138) == 0) {\n                    if (arg1 != NULL) {\n                        *arg1 = *arg2;\n                    }\n                    return 1;\n                }\n                iVar2 = fcn.1400235a0(*arg2, arg2_00);\n                iVar1 = *arg2_00;\n                if (iVar2 == 0) {\n                    iVar2 = fcn.140016b74(*(iVar1 + 0xc), 9);\n                    if (iVar2 != 0) {\n                        return 1;\n                    }\n                }\n                else if ((((1 < *(iVar1 + 8)) && (*(iVar1 + 8) <= arg3)) &&\n                         (iVar2 = fcn.140016b74(*(iVar1 + 0xc), 9),  iVar2 != 0)) ||\n                        ((*(*arg2_00 + 8) <= arg3 && (arg2[1] != 0)))) {\n                    return *(*arg2_00 + 8);\n                }\n                *(arg4 + 0x30) = 1;\n                *(arg4 + 0x2c) = 0x2a;\n                return -1;\n            }\n            iVar2 = fcn.14002a0c0(arg1);\n            if (iVar2 < 0) {\n                return -1;\n            }\n            return iVar2;\n        }\n        if (arg1 != NULL) {\n            *arg1 = 0;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 500
    },
    "140026b6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.140026b64(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_28h;\n    uint uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_bp_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_18h._0_1_ = *0x14003f218 == 0;\n    var_30h._0_1_ = 0;\n    var_bp_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (var_18h) {\n        var_28h._0_4_ = *0x14003e158;\n        var_28h._4_4_ = *0x14003e15c;\n        uStack40 = *0x14003e160;\n        uStack36 = *0x14003e164;\n    }\n    uVar1 = fcn.1400269ec(arg1, arg2, arg3, &var_40h);\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_bp_10h != '\\0') {\n        iVar2 = fcn.140013c70(&var_40h);\n        *(iVar2 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar2 = fcn.140013c70(&var_40h);\n        *(iVar2 + 0x24) = var_bp_10h._4_4_;\n    }\n    return uVar1;\n}\n",
        "token_count": 444
    },
    "14002727": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.140027278(ulong arg1)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_28h;\n    uint uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_bp_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_18h._0_1_ = *0x14003f218 == 0;\n    var_30h._0_1_ = 0;\n    var_bp_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (var_18h) {\n        var_28h._0_4_ = *0x14003e158;\n        var_28h._4_4_ = *0x14003e15c;\n        uStack40 = *0x14003e160;\n        uStack36 = *0x14003e164;\n    }\n    uVar1 = fcn.140027310(arg1, &var_40h);\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_bp_10h != '\\0') {\n        iVar2 = fcn.140013c70(&var_40h);\n        *(iVar2 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar2 = fcn.140013c70(&var_40h);\n        *(iVar2 + 0x24) = var_bp_10h._4_4_;\n    }\n    return uVar1;\n}\n",
        "token_count": 428
    },
    "14002731": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nulong fcn.140027310(ulong arg1, ulong arg2)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    ulong uVar5;\n    uint64_t uVar6;\n    \n    uVar6 = arg1;\n    iVar3 = fcn.1400250bc(uVar6 & 0xffffffff);\n    if (iVar3 != -1) {\n        if (((arg1 == 1) && ((*(*0x140040030 + 200) & 1) != 0)) || ((arg1 == 2 && ((*(*0x140040030 + 0x80) & 1) != 0))))\n        {\n            iVar3 = fcn.1400250bc(2);\n            iVar4 = fcn.1400250bc(1);\n            if (iVar4 == iVar3) goto code_r0x000140027332;\n        }\n        fcn.1400250bc(uVar6 & 0xffffffff);\n        iVar1 = (*_sym.imp.KERNEL32.dll_CloseHandle)();\n        if (iVar1 == 0) {\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            goto code_r0x000140027390;\n        }\n    }\ncode_r0x000140027332:\n    uVar2 = 0;\ncode_r0x000140027390:\n    fcn.140025000(uVar6 & 0xffffffff);\n    *(*((uVar6 >> 6) * 8 + 0x140040030) + 0x38 + (arg1 & 0x3f) * 0x48) = 0;\n    if (uVar2 == 0) {\n        uVar5 = 0;\n    }\n    else {\n        fcn.140014288(uVar2, arg2);\n        uVar5 = 0xffffffff;\n    }\n    return uVar5;\n}\n",
        "token_count": 424
    },
    "14002761": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint64_t fcn.14002761c(uint8_t **arg1)\n\n{\n    uint8_t **ppuVar1;\n    uint8_t uVar2;\n    uint8_t *arg2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    uint *puVar6;\n    int64_t iVar7;\n    \n    if (arg1 == NULL) {\n        puVar6 = fcn.1400142cc();\n        *puVar6 = 0x16;\n        fcn.140014060();\n        return 0xffffffff;\n    }\n    ppuVar1 = arg1 + 2;\n    *ppuVar1 = *ppuVar1 + -1;\n    if (*ppuVar1 < 0) {\n        if (arg1 == NULL) {\n            puVar6 = fcn.1400142cc();\n            *puVar6 = 0x16;\n            fcn.140014060();\n        }\n        else if (((*(arg1 + 0x14) >> 0xd & 1) != 0) && ((*(arg1 + 0x14) >> 0xc & 1) == 0)) {\n            if ((*(arg1 + 0x14) >> 1 & 1) == 0) {\n                LOCK();\n                *(arg1 + 0x14) = *(arg1 + 0x14) | 1;\n                if ((*(arg1 + 0x14) & 0x4c0) == 0) {\n                    fcn.14002aff4(arg1);\n                }\n                arg2 = arg1[1];\n                uVar5 = *(arg1 + 4);\n                *arg1 = arg2;\n                uVar3 = fcn.140026bfc(arg1);\n                iVar4 = fcn.14002ba50(uVar3, arg2, uVar5);\n                *(arg1 + 2) = iVar4;\n                if (1 < iVar4 + 1U) {\n                    if ((*(arg1 + 0x14) & 6) == 0) {\n                        iVar4 = fcn.140026bfc(arg1);\n                        if ((iVar4 == -1) || (iVar4 = fcn.140026bfc(arg1),  iVar4 == -2)) {\n                            iVar7 = 0x14003ef60;\n                        }\n                        else {\n                            iVar4 = fcn.140026bfc(arg1);\n                            uVar5 = fcn.140026bfc(arg1);\n                            iVar7 = *((iVar4 >> 6) * 8 + 0x140040030) + (uVar5 & 0x3f) * 0x48;\n                        }\n                        if ((*(iVar7 + 0x38) & 0x82) == 0x82) {\n                            LOCK();\n                            *(arg1 + 0x14) = *(arg1 + 0x14) | 0x20;\n                        }\n                    }\n                    if (((*(arg1 + 4) == 0x200) && ((*(arg1 + 0x14) >> 6 & 1) != 0)) && ((*(arg1 + 0x14) >> 8 & 1) == 0)\n                       ) {\n                        *(arg1 + 4) = 0x1000;\n                    }\n                    *(arg1 + 2) = *(arg1 + 2) + -1;\n                    uVar2 = **arg1;\n                    *arg1 = *arg1 + 1;\n                    return uVar2;\n                }\n                LOCK();\n                *(arg1 + 0x14) = *(arg1 + 0x14) | (-(iVar4 != 0) & 8) + 8;\n                *(arg1 + 2) = 0;\n            }\n            else {\n                LOCK();\n                *(arg1 + 0x14) = *(arg1 + 0x14) | 0x10;\n            }\n        }\n        return 0xffffffff;\n    }\n    uVar2 = **arg1;\n    *arg1 = *arg1 + 1;\n    return uVar2;\n}\n",
        "token_count": 912
    },
    "14002867": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.140028674(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_28h;\n    uint uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_bp_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_18h._0_1_ = *0x14003f218 == 0;\n    var_30h._0_1_ = 0;\n    var_bp_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (var_18h) {\n        var_28h._0_4_ = *0x14003e158;\n        var_28h._4_4_ = *0x14003e15c;\n        uStack40 = *0x14003e160;\n        uStack36 = *0x14003e164;\n    }\n    uVar1 = fcn.14002870c(arg1, arg2, arg3, &var_40h);\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_bp_10h != '\\0') {\n        iVar2 = fcn.140013c70(&var_40h);\n        *(iVar2 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar2 = fcn.140013c70(&var_40h);\n        *(iVar2 + 0x24) = var_bp_10h._4_4_;\n    }\n    return uVar1;\n}\n",
        "token_count": 443
    },
    "14002883": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: lpMode\n// WARNING: Variable defined which should be unmapped: var_20h\n// WARNING: Variable defined which should be unmapped: lpNumberOfBytesWritten\n// WARNING: Variable defined which should be unmapped: var_38h\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t fcn.140028834(ulong arg1, int16_t *arg2, ulong arg3, int64_t arg4)\n\n{\n    char cVar1;\n    int64_t iVar2;\n    uint64_t uVar3;\n    int16_t iVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    uint64_t uVar7;\n    uint64_t *puVar8;\n    int64_t iVar9;\n    int32_t iVar10;\n    uint64_t uVar11;\n    uint64_t arg4_00;\n    int16_t *piVar12;\n    ulong uStack112;\n    int32_t iStack104;\n    uint64_t uStack96;\n    int16_t iStack80;\n    ulong var_38h;\n    ulong lpNumberOfBytesWritten;\n    ulong var_20h;\n    ulong lpMode;\n    \n    iVar10 = 0;\n    arg4_00 = arg3;\n    uVar11 = arg1;\n    if (arg3 == 0) {\n        return 0;\n    }\n    if (arg2 == NULL) {\ncode_r0x000140028864:\n        *(arg4 + 0x38) = 1;\n        *(arg4 + 0x34) = 0;\n        *(arg4 + 0x30) = 1;\n        *(arg4 + 0x2c) = 0x16;\n        fcn.140013f90(0, 0, 0, 0);\n        return -1;\n    }\n    uVar7 = arg1 & 0x3f;\n    iVar9 = uVar11 >> 6;\n    iVar2 = *(iVar9 * 8 + 0x140040030);\n    cVar1 = *(iVar2 + 0x39 + uVar7 * 0x48);\n    if ((cVar1 - 1U < 2) && ((~arg3 & 1) == 0)) goto code_r0x000140028864;\n    if ((*(iVar2 + 0x38 + uVar7 * 0x48) & 0x20) != 0) {\n        fcn.14002b560(uVar11 & 0xffffffff, 0, 2, arg4);\n    }\n    uStack96 = 0;\n    iVar5 = fcn.140028bf8(uVar11 & 0xffffffff);\n    if ((iVar5 == 0) || (-1 < *(*(iVar9 * 8 + 0x140040030) + 0x38 + uVar7 * 0x48))) {\ncode_r0x000140028a1d:\n        iVar2 = *(iVar9 * 8 + 0x140040030);\n        if (-1 < *(iVar2 + 0x38 + uVar7 * 0x48)) {\n            uStack112 = 0;\n            iStack104 = 0;\n            iVar5 = (*_sym.imp.KERNEL32.dll_WriteFile)(*(iVar2 + 0x28 + uVar7 * 0x48), arg2, arg4_00, &uStack112 + 4, 0)\n            ;\n            iVar10 = iStack104;\n            uVar3 = uStack112;\n            if (iVar5 == 0) {\n                uVar6 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                uStack112 = uStack112 & 0xffffffff00000000 | uVar6;\n                iVar10 = iStack104;\n                uVar3 = uStack112;\n            }\n            goto code_r0x000140028ac1;\n        }\n        if (cVar1 == '\\0') {\n            puVar8 = fcn.1400282e4(&uStack112, uVar11 & 0xffffffff, arg2, arg4_00);\n        }\n        else if (cVar1 == '\\x01') {\n            puVar8 = fcn.140028504(&uStack112, uVar11 & 0xffffffff, arg2, arg4_00);\n        }\n        else {\n            iVar10 = 0;\n            uVar3 = uStack96;\n            if (cVar1 != '\\x02') goto code_r0x000140028ac1;\n            puVar8 = fcn.1400283e8(&uStack112, uVar11 & 0xffffffff, arg2, arg4_00);\n        }\n    }\n    else {\n        if (*(arg4 + 0x28) == '\\0') {\n            fcn.140017aa0(arg4);\n        }\n        if (((*(*(arg4 + 0x18) + 0x138) == 0) && (*(*(iVar9 * 8 + 0x140040030) + 0x39 + uVar7 * 0x48) == '\\0')) ||\n           (iVar5 = (*_sym.imp.KERNEL32.dll_GetConsoleMode)(),  iVar5 == 0)) goto code_r0x000140028a1d;\n        if (cVar1 != '\\0') {\n            uVar3 = uStack96;\n            if (cVar1 - 1U < 2) {\n                uStack112 = 0;\n                uVar3 = uStack112;\n                if (arg2 < arg2 + arg4_00) {\n                    uStack112._4_4_ = 0;\n                    piVar12 = arg2;\n                    do {\n                        iStack80 = *piVar12;\n                        iVar4 = fcn.14002b568();\n                        if (iVar4 != iStack80) {\ncode_r0x0001400289e1:\n                            uVar6 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                            uStack112 = uStack112 & 0xffffffff00000000 | uVar6;\n                            uVar3 = uStack112;\n                            break;\n                        }\n                        uStack112 = uStack112 & 0xffffffff | uStack112._4_4_ + 2 << 0x20;\n                        uVar6 = uStack112._4_4_ + 2;\n                        if (iStack80 == 10) {\n                            iVar4 = fcn.14002b568(0xd);\n                            if (iVar4 != 0xd) goto code_r0x0001400289e1;\n                            uStack112 = uStack112 & 0xffffffff | uStack112._4_4_ + 3 << 0x20;\n                            iVar10 = iVar10 + 1;\n                            uVar6 = uStack112._4_4_ + 3;\n                        }\n                        uStack112._4_4_ = uVar6;\n                        piVar12 = piVar12 + 1;\n                        uVar3 = uStack112;\n                    } while (piVar12 < arg2 + arg4_00);\n                }\n            }\n            goto code_r0x000140028ac1;\n        }\n        puVar8 = fcn.140027e20(&uStack112, uVar11 & 0xffffffff, arg2, arg4_00);\n    }\n    iVar10 = *(puVar8 + 1);\n    uVar3 = *puVar8;\ncode_r0x000140028ac1:\n    uStack96 = uVar3;\n    iVar5 = uStack96 >> 0x20;\n    if (iVar5 != 0) {\n        return iVar5 - iVar10;\n    }\n    if (uStack96 != 0) {\n        if (uStack96 == 5) {\n            *(arg4 + 0x30) = 1;\n            *(arg4 + 0x2c) = 9;\n            *(arg4 + 0x38) = 1;\n            *(arg4 + 0x34) = 5;\n            return -1;\n        }\n        fcn.140014288(uStack96 & 0xffffffff, arg4);\n        return -1;\n    }\n    if (((*(*(iVar9 * 8 + 0x140040030) + 0x38 + uVar7 * 0x48) & 0x40) != 0) && (*arg2 == '\\x1a')) {\n        return 0;\n    }\n    *(arg4 + 0x34) = 0;\n    *(arg4 + 0x30) = 1;\n    *(arg4 + 0x2c) = 0x1c;\n    *(arg4 + 0x38) = 1;\n    return -1;\n}\n",
        "token_count": 1915
    },
    "140028c5": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint fcn.140028c58(char *arg1, uint64_t arg2, ulong arg3, int32_t *arg4)\n\n{\n    char *pcVar1;\n    int64_t iVar2;\n    char cVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    char *pcVar6;\n    uint uVar7;\n    char *pcVar8;\n    char *pcVar9;\n    int64_t iVar10;\n    bool bVar11;\n    int32_t in_stack_00000028;\n    int32_t in_stack_00000030;\n    int64_t in_stack_00000038;\n    \n    if ((arg1 != NULL) && (arg2 != 0)) {\n        *arg1 = '\\0';\n        iVar4 = 0;\n        if (0 < arg3) {\n            iVar4 = arg3;\n        }\n        if (arg2 <= iVar4 + 1) {\n            uVar7 = 0x22;\n            goto code_r0x000140028c85;\n        }\n        if (arg4 != NULL) {\n            pcVar1 = *(arg4 + 2);\n            pcVar8 = arg1 + 1;\n            *arg1 = '0';\n            pcVar9 = pcVar1;\n            for (; 0 < arg3; arg3._0_4_ = arg3 + -1) {\n                cVar3 = *pcVar9;\n                if (cVar3 == '\\0') {\n                    cVar3 = '0';\n                }\n                else {\n                    pcVar9 = pcVar9 + 1;\n                }\n                *pcVar8 = cVar3;\n                pcVar8 = pcVar8 + 1;\n            }\n            *pcVar8 = '\\0';\n            if (arg3 < 0) goto code_r0x000140028d8f;\n            iVar4 = *arg4;\n            if (in_stack_00000030 == 0) {\n                bVar11 = '4' < *pcVar9;\ncode_r0x000140028d55:\n                bVar11 = bVar11 == false;\ncode_r0x000140028d68:\n                if (bVar11) goto code_r0x000140028d8f;\n            }\n            else {\n                iVar5 = fcn.14002779c();\n                if (iVar5 == 0) {\n                    if (*pcVar9 < '6') {\n                        if (*pcVar9 < '5') goto code_r0x000140028d8f;\n                        pcVar6 = pcVar9;\n                        if (in_stack_00000028 != 0) {\n                            do {\n                                pcVar6 = pcVar6 + 1;\n                            } while (*pcVar6 == '0');\n                            if (*pcVar6 == '\\0') {\n                                if (pcVar9 == pcVar1) goto code_r0x000140028d8f;\n                                bVar11 = pcVar9[-1] & 1;\n                                goto code_r0x000140028d55;\n                            }\n                        }\n                    }\n                }\n                else {\n                    if (iVar5 == 0x200) {\n                        if (*pcVar9 == '0') goto code_r0x000140028d8f;\n                        bVar11 = iVar4 == 0x2d;\n                        goto code_r0x000140028d68;\n                    }\n                    if (((iVar5 != 0x100) || (*pcVar9 == '0')) || (iVar4 != 0x2d)) goto code_r0x000140028d8f;\n                }\n            }\n            while( true ) {\n                pcVar8 = pcVar8 + -1;\n                if (*pcVar8 != '9') break;\n                *pcVar8 = '0';\n            }\n            *pcVar8 = *pcVar8 + '\\x01';\ncode_r0x000140028d8f:\n            if (*arg1 == '1') {\n                arg4[1] = arg4[1] + 1;\n            }\n            else {\n                iVar2 = -1;\n                do {\n                    iVar10 = iVar2;\n                    iVar2 = iVar10 + 1;\n                } while (arg1[iVar10 + 2] != '\\0');\n                fcn.14001a740(arg1, arg1 + 1, iVar10 + 2);\n            }\n            return 0;\n        }\n    }\n    uVar7 = 0x16;\ncode_r0x000140028c85:\n    *(in_stack_00000038 + 0x2c) = uVar7;\n    *(in_stack_00000038 + 0x30) = 1;\n    fcn.140013f90(0, 0, 0, 0);\n    return uVar7;\n}\n",
        "token_count": 1038
    },
    "140028dd": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.140028ddc(uint32_t *arg1, ulong arg2, ulong arg3, uint *arg4)\n\n{\n    uint32_t *puVar1;\n    uint8_t uVar2;\n    code *pcVar3;\n    int8_t iVar4;\n    uint uVar5;\n    int32_t iVar6;\n    uint32_t uVar7;\n    uint64_t uVar8;\n    uint *puVar9;\n    uint8_t uVar10;\n    uint32_t uVar11;\n    uint64_t uVar12;\n    uint64_t uVar13;\n    uint32_t uVar14;\n    int64_t iVar15;\n    uint32_t uVar16;\n    int32_t iVar17;\n    char *pcVar18;\n    uint64_t uVar19;\n    uint32_t uVar20;\n    uint32_t uVar21;\n    uint32_t uVar22;\n    bool bVar23;\n    double dVar24;\n    char *in_stack_00000028;\n    int64_t in_stack_00000030;\n    ulong var_160h;\n    ulong var_334h;\n    ulong var_500h;\n    ulong var_6d0h;\n    uchar auStack2072 [32];\n    ulong uStack2040;\n    ulong uStack2024;\n    uint32_t uStack2016;\n    uint32_t uStack2012;\n    uint32_t uStack2008;\n    uint32_t uStack2004;\n    uint32_t uStack2000;\n    uint32_t *puStack1992;\n    uint32_t uStack1984;\n    uint8_t auStack1976 [8];\n    char cStack1968;\n    uint32_t uStack1960;\n    int32_t iStack1956;\n    char *pcStack1952;\n    uint32_t *puStack1944;\n    uint *puStack1936;\n    uint32_t uStack1928;\n    uint32_t auStack1924 [115];\n    uint32_t uStack1464;\n    uint32_t auStack1460 [115];\n    uint32_t uStack1000;\n    uint32_t auStack996 [115];\n    uint32_t uStack536;\n    uint32_t auStack532 [99];\n    ulong var_80h;\n    ulong var_bp_78h;\n    ulong var_6ch;\n    uint64_t uStack72;\n    \n    uStack72 = *0x14003ef38 ^ auStack2072;\n    pcStack1952 = in_stack_00000028;\n    uStack2024 = arg1;\n    iStack1956 = arg3;\n    puStack1936 = arg4;\n    fcn.14002c01c(auStack1976);\n    cStack1968 = (auStack1976[0] & 0x1f) != 0x1f;\n    if (cStack1968) {\n        fcn.14002c088(auStack1976);\n    }\n    puVar1 = uStack2024;\n    *(arg4 + 2) = in_stack_00000028;\n    uVar5 = 0x20;\n    if (uStack2024 < 0) {\n        uVar5 = 0x2d;\n    }\n    *arg4 = uVar5;\n    fcn.14002bfb8(&uStack1960, 0, 0);\n    uVar8 = puVar1 >> 0x34 & 0x7ff;\n    if (uVar8 == 0) {\n        if (((puVar1 & 0xfffffffffffff) == 0) || ((uStack1960 & 0x1000000) != 0)) {\n            arg4[1] = 0;\n            pcVar18 = 0x140035828;\ncode_r0x000140028f22:\n            iVar6 = fcn.14001ed60(in_stack_00000028, in_stack_00000030, pcVar18);\njoined_r0x000140028f68:\n            if (iVar6 != 0) {\n                uStack2040 = 0;\n                fcn.1400140b0(0, 0, 0, 0);\n                pcVar3 = swi(3);\n                (*pcVar3)();\n                return;\n            }\n            goto code_r0x000140029fd1;\n        }\n    }\n    else if (uVar8 == 0x7ff) {\n        if ((puVar1 & 0xfffffffffffff) == 0) {\n            uVar22 = 1;\n        }\n        else if ((puVar1 < 0) && ((puVar1 & 0xfffffffffffff) == 0x8000000000000)) {\n            uVar22 = 4;\n        }\n        else {\n            uVar22 = ~(puVar1 >> 0x33) & 1 | 2;\n        }\n        arg4[1] = 1;\n        if (uVar22 != 1) {\n            if (uVar22 == 2) {\n                pcVar18 = \"1#QNAN\";\n            }\n            else if (uVar22 == 3) {\n                pcVar18 = \"1#SNAN\";\n            }\n            else {\n                if (uVar22 != 4) goto code_r0x000140028f73;\n                pcVar18 = \"1#IND\";\n            }\n            goto code_r0x000140028f22;\n        }\n        iVar6 = fcn.14001ed60(in_stack_00000028, in_stack_00000030, \"1#INF\");\n        goto joined_r0x000140028f68;\n    }\ncode_r0x000140028f73:\n    uStack2024 = puVar1 & 0x7fffffffffffffff;\n    uStack1984 = arg2 + 1;\n    iVar15 = (-(uStack2024 >> 0x34 != 0) & 0x10000000000000) + (puVar1 & 0xfffffffffffff);\n    uVar21 = (2 - (uStack2024 >> 0x34 != 0)) + (uStack2024 >> 0x34);\n    puStack1992 = uStack2024;\n    fcn.14002c1a0();\n    dVar24 = fcn.14002c0d8();\n    auStack1924[0] = iVar15;\n    uStack2016 = -((dVar24 + 0x80000001U & 0xfffffffe) != 0) & dVar24;\n    auStack1924[1] = iVar15 >> 0x20;\n    uVar22 = auStack1924[1] != 0;\n    uVar14 = uVar22 + 1;\n    if (uVar21 < 0x434) {\n        if (uVar21 == 0x36) {\ncode_r0x000140029387:\n            uStack2024 = uStack2024._4_4_ << 0x20;\n            puVar1 = auStack1924 + (-(auStack1924[1] != 0) & 4);\n            iVar6 = 0x1f;\n            bVar23 = *puVar1 == 0;\n            if (!bVar23) {\n                for (; *puVar1 >> iVar6 == 0; iVar6 = iVar6 + -1) {\n                }\n            }\n            if (bVar23) {\n                iVar6 = 0;\n            }\n            else {\n                iVar6 = iVar6 + 1;\n            }\n            uVar22 = (iVar6 == 0x20) + uVar14;\n            if (uVar22 < 0x74) {\n                uVar16 = uVar22 - 1;\n                while (uVar16 != 0xffffffff) {\n                    uVar20 = uVar16 - 1;\n                    if (uVar16 < uVar14) {\n                        uVar7 = auStack1924[uVar16];\n                    }\n                    else {\n                        uVar7 = 0;\n                    }\n                    if (uVar20 < uVar14) {\n                        uVar11 = auStack1924[uVar20];\n                    }\n                    else {\n                        uVar11 = 0;\n                    }\n                    auStack1924[uVar16] = uVar11 >> 0x1f | uVar7 * 2;\n                    uVar16 = uVar20;\n                }\n            }\n            else {\n                uVar22 = 0;\n            }\n            uVar14 = 0x435 - uVar21 >> 5;\n            uStack1928 = uVar22;\n            fcn.14001a0c0(auStack996, 0, uVar14 * 4);\n            auStack996[uVar14] = 1 << (0x435 - uVar21 & 0x1f);\n        }\n        else {\n            auStack996[1] = 0x100000;\n            auStack996[0] = 0;\n            uStack1000 = 2;\n            if (auStack1924[1] == 0) goto code_r0x000140029387;\n            uVar8 = 0;\n            do {\n                if (auStack996[uVar8] != auStack1924[uVar8]) goto code_r0x000140029387;\n                uVar22 = uVar8 + 1;\n                uVar8 = uVar22;\n            } while (uVar22 != 2);\n            uStack2024 = uStack2024._4_4_ << 0x20;\n            iVar6 = 0x1f;\n            if (auStack1924[1] != 0) {\n                for (; auStack1924[1] >> iVar6 == 0; iVar6 = iVar6 + -1) {\n                }\n            }\n            if (auStack1924[1] == 0) {\n                iVar6 = 0;\n            }\n            else {\n                iVar6 = iVar6 + 1;\n            }\n            uVar22 = (0x20U - iVar6 < 2) + uVar14;\n            if (uVar22 < 0x74) {\n                uVar16 = uVar22 - 1;\n                while (uVar16 != 0xffffffff) {\n                    uVar20 = uVar16 - 1;\n                    if (uVar16 < uVar14) {\n                        uVar7 = auStack1924[uVar16];\n                    }\n                    else {\n                        uVar7 = 0;\n                    }\n                    if (uVar20 < uVar14) {\n                        uVar11 = auStack1924[uVar20];\n                    }\n                    else {\n                        uVar11 = 0;\n                    }\n                    auStack1924[uVar16] = uVar11 >> 0x1e | uVar7 * 4;\n                    uVar16 = uVar20;\n                }\n            }\n            else {\n                uVar22 = 0;\n            }\n            uVar14 = 0x436 - uVar21 >> 5;\n            uStack1928 = uVar22;\n            fcn.14001a0c0(auStack996, 0, uVar14 * 4);\n            auStack996[uVar14] = 1 << (0x436 - uVar21 & 0x1f);\n        }\n        uStack1000 = uVar14 + 1;\n        uVar8 = uStack1000;\n        uStack1464 = uStack1000;\n        if (uVar8 != 0) {\n            if (uVar8 << 2 < 0x1cd) {\n                fcn.14001a740(auStack1460, auStack996, uVar8 << 2);\n            }\n            else {\n                fcn.14001a0c0(auStack1460, 0, 0x1cc);\n                puVar9 = fcn.1400142cc();\n                *puVar9 = 0x22;\n                fcn.140014060();\n            }\n            uVar8 = uStack1464;\n        }\n    }\n    else {\n        auStack996[1] = 0x100000;\n        auStack996[0] = 0;\n        uStack1000 = 2;\n        if (auStack1924[1] == 0) {\ncode_r0x00014002914b:\n            uStack2024 = uStack2024._4_4_ << 0x20;\n            uVar20 = uVar21 - 0x433 & 0x1f;\n            uVar21 = uVar21 - 0x433 >> 5;\n            iVar4 = uVar20;\n            uVar10 = 0x20 - iVar4;\n            uVar16 = (1 << (uVar10 & 0x3f)) - 1;\n            iVar6 = 0x1f;\n            bVar23 = auStack1924[uVar22] == 0;\n            if (!bVar23) {\n                for (; auStack1924[uVar22] >> iVar6 == 0; iVar6 = iVar6 + -1) {\n                }\n            }\n            if (bVar23) {\n                iVar6 = 0;\n            }\n            else {\n                iVar6 = iVar6 + 1;\n            }\n            if ((uVar14 + uVar21 < 0x74) && (uVar22 = (0x20U - iVar6 < uVar20) + uVar14 + uVar21,  uVar22 < 0x74)) {\n                uVar20 = uVar22;\n                while (uVar20 = uVar20 - 1,  uVar20 != uVar21 - 1) {\n                    uVar7 = uVar20 - uVar21;\n                    if (uVar7 < uVar14) {\n                        uVar11 = auStack1924[uVar7];\n                    }\n                    else {\n                        uVar11 = 0;\n                    }\n                    if (uVar7 - 1 < uVar14) {\n                        uVar7 = auStack1924[uVar7 - 1];\n                    }\n                    else {\n                        uVar7 = 0;\n                    }\n                    auStack1924[uVar20] = (uVar7 & ~uVar16) >> (uVar10 & 0x1f) | (uVar11 & uVar16) << iVar4;\n                }\n                uVar8 = 0;\n                if (uVar21 != 0) {\n                    do {\n                        auStack1924[uVar8] = 0;\n                        uVar14 = uVar8 + 1;\n                        uVar8 = uVar14;\n                    } while (uVar14 != uVar21);\n                }\n            }\n            else {\n                uVar22 = 0;\n            }\n            uVar8 = 1;\n            uStack1464 = 1;\n            auStack1460[0] = 2;\n            uStack1928 = uVar22;\n        }\n        else {\n            uVar8 = 0;\n            do {\n                if (auStack996[uVar8] != auStack1924[uVar8]) goto code_r0x00014002914b;\n                uVar16 = uVar8 + 1;\n                uVar8 = uVar16;\n            } while (uVar16 != 2);\n            uStack2024 = uStack2024._4_4_ << 0x20;\n            uVar20 = uVar21 - 0x432 & 0x1f;\n            uVar21 = uVar21 - 0x432 >> 5;\n            iVar4 = uVar20;\n            uVar10 = 0x20 - iVar4;\n            uVar16 = (1 << (uVar10 & 0x3f)) - 1;\n            iVar6 = 0x1f;\n            bVar23 = auStack1924[uVar22] == 0;\n            if (!bVar23) {\n                for (; auStack1924[uVar22] >> iVar6 == 0; iVar6 = iVar6 + -1) {\n                }\n            }\n            if (bVar23) {\n                iVar6 = 0;\n            }\n            else {\n                iVar6 = iVar6 + 1;\n            }\n            if ((uVar14 + uVar21 < 0x74) && (uVar22 = (0x20U - iVar6 < uVar20) + uVar14 + uVar21,  uVar22 < 0x74)) {\n                uVar20 = uVar22;\n                while (uVar20 = uVar20 - 1,  uVar20 != uVar21 - 1) {\n                    uVar7 = uVar20 - uVar21;\n                    if (uVar7 < uVar14) {\n                        uVar11 = auStack1924[uVar7];\n                    }\n                    else {\n                        uVar11 = 0;\n                    }\n                    if (uVar7 - 1 < uVar14) {\n                        uVar7 = auStack1924[uVar7 - 1];\n                    }\n                    else {\n                        uVar7 = 0;\n                    }\n                    auStack1924[uVar20] = (uVar7 & ~uVar16) >> (uVar10 & 0x1f) | (uVar11 & uVar16) << iVar4;\n                }\n                uVar8 = 0;\n                if (uVar21 != 0) {\n                    do {\n                        auStack1924[uVar8] = 0;\n                        uVar14 = uVar8 + 1;\n                        uVar8 = uVar14;\n                    } while (uVar14 != uVar21);\n                }\n            }\n            else {\n                uVar22 = 0;\n            }\n            uVar8 = 1;\n            uStack1464 = 1;\n            auStack1460[0] = 4;\n            uStack1928 = uVar22;\n        }\n    }\n    uVar14 = uVar8;\n    if (uStack2016 < 0) {\n        uStack2004 = -uStack2016;\n        uVar8 = uStack2004 / 10;\n        uStack2024._0_4_ = uVar8;\n        uStack2024 = uStack2024 & 0xffffffff00000000 | uVar8;\n        uStack2012 = uStack2024;\n        if (uStack2024 != 0) {\n            do {\n                uStack2000 = uVar8;\n                if (0x26 < uStack2000) {\n                    uStack2000 = 0x26;\n                }\n                uVar21 = uStack2000 - 1;\n                uVar10 = *(uVar21 * 4 + 0x1400356b2);\n                uVar2 = *(uVar21 * 4 + 0x1400356b3);\n                uStack1000 = uVar2 + uVar10;\n                fcn.14001a0c0(auStack996, 0, uVar10 * 4);\n                fcn.14001a740(auStack996 + uVar10, *(uVar21 * 4 + 0x1400356b0) * 4 + 0x140034da0, uVar2 << 2);\n                uVar21 = auStack1924[0];\n                if (uStack1000 < 2) {\n                    uVar8 = auStack996[0];\n                    if (auStack996[0] == 0) {\ncode_r0x000140029a15:\n                        uVar22 = 0;\n                        uStack1928 = uVar22;\ncode_r0x000140029b26:\n                        bVar23 = true;\n                    }\n                    else {\n                        if ((auStack996[0] == 1) || (uVar22 == 0)) goto code_r0x000140029b26;\n                        uVar19 = 0;\n                        uVar13 = 0;\n                        do {\n                            uVar12 = auStack1924[uVar13] * uVar8 + uVar19;\n                            auStack1924[uVar13] = uVar12;\n                            uVar19 = uVar12 >> 0x20;\n                            uVar21 = uVar12 >> 0x20;\n                            uVar16 = uVar13 + 1;\n                            uVar13 = uVar16;\n                        } while (uVar16 != uVar22);\ncode_r0x000140029af7:\n                        uVar22 = uStack1928;\n                        if (uVar21 == 0) goto code_r0x000140029b26;\n                        if (uStack1928 < 0x73) {\n                            auStack1924[uStack1928] = uVar21;\n                            uVar22 = uStack1928 + 1;\n                            uStack1928 = uVar22;\n                            goto code_r0x000140029b26;\n                        }\n                        uVar22 = 0;\n                        bVar23 = false;\n                        uStack1928 = 0;\n                    }\n                    if (!bVar23) goto code_r0x000140029b31;\n                }\n                else {\n                    if (uVar22 < 2) {\n                        uVar8 = auStack1924[0];\n                        uVar19 = uStack1000 << 2;\n                        uStack1928 = uStack1000;\n                        if (uStack1000 != 0) {\n                            if (uVar19 < 0x1cd) {\n                                fcn.14001a740(auStack1924, auStack996, uVar19);\n                            }\n                            else {\n                                fcn.14001a0c0(auStack1924, 0, 0x1cc);\n                                puVar9 = fcn.1400142cc();\n                                *puVar9 = 0x22;\n                                fcn.140014060();\n                            }\n                        }\n                        if (uVar21 != 0) {\n                            uVar22 = uStack1928;\n                            if ((uVar21 != 1) && (uStack1928 != 0)) {\n                                uVar19 = 0;\n                                uVar13 = 0;\n                                do {\n                                    uVar12 = auStack1924[uVar13] * uVar8 + uVar19;\n                                    auStack1924[uVar13] = uVar12;\n                                    uVar19 = uVar12 >> 0x20;\n                                    uVar21 = uVar12 >> 0x20;\n                                    uVar22 = uVar13 + 1;\n                                    uVar13 = uVar22;\n                                } while (uVar22 != uStack1928);\n                                goto code_r0x000140029af7;\n                            }\n                            goto code_r0x000140029b26;\n                        }\n                        goto code_r0x000140029a15;\n                    }\n                    bVar23 = uStack1000 < uVar22;\n                    puStack1944 = auStack996;\n                    if (!bVar23) {\n                        puStack1944 = auStack1924;\n                    }\n                    puStack1992 = auStack996;\n                    uStack2008 = uVar22;\n                    if (bVar23) {\n                        uStack2008 = uStack1000;\n                    }\n                    uVar21 = uStack1000;\n                    if (bVar23) {\n                        uVar21 = uVar22;\n                        puStack1992 = auStack1924;\n                    }\n                    uStack1928 = 0;\n                    uVar8 = 0;\n                    uStack536 = 0;\n                    if (uStack2008 != 0) {\n                        do {\n                            uVar22 = puStack1944[uVar8];\n                            uVar16 = uVar8;\n                            if (uVar22 == 0) {\n                                if (uVar16 == uStack1928) {\n                                    auStack532[uVar8] = 0;\n                                    uStack1928 = uVar16 + 1;\n                                    uStack536 = uStack1928;\n                                }\n                            }\n                            else {\n                                uVar19 = 0;\n                                if (uVar21 != 0) {\n                                    do {\n                                        uVar20 = uVar8;\n                                        uVar13 = uVar8;\n                                        if (uVar20 == 0x73) break;\n                                        if (uVar20 == uStack1928) {\n                                            auStack532[uVar8] = 0;\n                                            uStack536 = uVar20 + 1;\n                                        }\n                                        uVar13 = uVar20 + 1;\n                                        uVar19 = puStack1992[-uVar16 + uVar20] * uVar22 + auStack532[uVar8] + uVar19;\n                                        auStack532[uVar8] = uVar19;\n                                        uVar19 = uVar19 >> 0x20;\n                                        uVar8 = uVar13;\n                                        uStack1928 = uStack536;\n                                    } while (-uVar16 + uVar20 + 1 != uVar21);\n                                    uVar22 = uVar19;\n                                    uVar8 = uVar13;\n                                    while (uVar22 != 0) {\n                                        uVar20 = uVar8;\n                                        if (uVar20 == 0x73) goto code_r0x000140029b31;\n                                        if (uVar20 == uStack1928) {\n                                            auStack532[uVar8] = 0;\n                                            uStack536 = uVar20 + 1;\n                                        }\n                                        uVar22 = auStack532[uVar8];\n                                        auStack532[uVar8] = uVar22 + uVar19;\n                                        uVar22 = uVar22 + uVar19 >> 0x20;\n                                        uVar19 = uVar22;\n                                        uVar8 = uVar20 + 1;\n                                        uStack1928 = uStack536;\n                                    }\n                                }\n                                if (uVar8 == 0x73) goto code_r0x000140029b31;\n                            }\n                            uVar8 = uVar16 + 1;\n                        } while (uVar16 + 1 != uStack2008);\n                    }\n                    uVar8 = uStack1928 << 2;\n                    uVar22 = uStack1928;\n                    if (uStack1928 != 0) {\n                        if (uVar8 < 0x1cd) {\n                            fcn.14001a740(auStack1924, auStack532, uVar8);\n                            uVar22 = uStack1928;\n                        }\n                        else {\n                            fcn.14001a0c0(auStack1924, 0, 0x1cc);\n                            puVar9 = fcn.1400142cc();\n                            *puVar9 = 0x22;\n                            fcn.140014060();\n                            uVar22 = uStack1928;\n                        }\n                    }\n                }\n                uStack2012 = uStack2012 - uStack2000;\n                uVar8 = uStack2012;\n            } while (uStack2012 != 0);\n        }\n        iVar6 = uStack2004 + uStack2024 * -10;\n        if (iVar6 == 0) goto code_r0x00014002967d;\n        uVar21 = *((iVar6 - 1) * 4 + 0x140035748);\n        if (uVar21 != 0) {\n            if ((uVar21 != 1) && (uVar22 != 0)) {\n                uVar8 = 0;\n                uVar19 = 0;\n                do {\n                    uVar13 = auStack1924[uVar19] * uVar21 + uVar8;\n                    auStack1924[uVar19] = uVar13;\n                    uVar8 = uVar13 >> 0x20;\n                    uVar16 = uVar19 + 1;\n                    uVar19 = uVar16;\n                } while (uVar16 != uVar22);\n                uVar21 = uVar13 >> 0x20;\n                uVar22 = uStack1928;\n                if (uVar21 != 0) {\n                    if (0x72 < uStack1928) goto code_r0x000140029b31;\n                    auStack1924[uStack1928] = uVar21;\n                    uStack1928 = uStack1928 + 1;\n                    uVar22 = uStack1928;\n                }\n            }\n            goto code_r0x00014002967d;\n        }\ncode_r0x000140029b31:\n        uStack1928 = 0;\n    }\n    else {\n        uVar19 = uStack2016 / 10;\n        uStack2008 = uVar19;\n        uStack2000 = uStack2008;\n        while (uStack2008 != 0) {\n            uVar14 = uVar8;\n            uStack2004 = uVar19;\n            if (0x26 < uStack2004) {\n                uStack2004 = 0x26;\n            }\n            uVar21 = uStack2004 - 1;\n            uVar10 = *(uVar21 * 4 + 0x1400356b2);\n            uVar2 = *(uVar21 * 4 + 0x1400356b3);\n            uStack1000 = uVar2 + uVar10;\n            fcn.14001a0c0(auStack996, 0, uVar10 * 4);\n            fcn.14001a740(auStack996 + uVar10, *(uVar21 * 4 + 0x1400356b0) * 4 + 0x140034da0, uVar2 << 2);\n            uVar21 = auStack1460[0];\n            if (uStack1000 < 2) {\n                uVar19 = auStack996[0];\n                if (auStack996[0] == 0) {\ncode_r0x00014002952a:\n                    uVar8 = 0;\ncode_r0x00014002964a:\n                    uStack1464 = uVar8;\ncode_r0x000140029668:\n                    bVar23 = true;\n                }\n                else {\n                    if ((auStack996[0] == 1) || (uVar14 == 0)) goto code_r0x000140029668;\n                    uVar8 = 0;\n                    uVar13 = 0;\n                    do {\n                        uVar12 = auStack1460[uVar13] * uVar19 + uVar8;\n                        auStack1460[uVar13] = uVar12;\n                        uVar8 = uVar12 >> 0x20;\n                        uVar21 = uVar12 >> 0x20;\n                        uVar16 = uVar13 + 1;\n                        uVar13 = uVar16;\n                    } while (uVar16 != uVar14);\ncode_r0x000140029624:\n                    if (uVar21 == 0) {\n                        uVar8 = uStack1464;\n                        goto code_r0x000140029668;\n                    }\n                    if (uStack1464 < 0x73) {\n                        auStack1460[uStack1464] = uVar21;\n                        uVar8 = uStack1464 + 1;\n                        goto code_r0x00014002964a;\n                    }\n                    uVar8 = 0;\n                    bVar23 = false;\n                    uStack1464 = 0;\n                }\n                if (!bVar23) goto code_r0x000140029673;\n            }\n            else {\n                if (uVar14 < 2) {\n                    uVar19 = auStack1460[0];\n                    uVar8 = uStack1000 << 2;\n                    uStack1464 = uStack1000;\n                    if (uStack1000 != 0) {\n                        if (uVar8 < 0x1cd) {\n                            fcn.14001a740(auStack1460, auStack996, uVar8);\n                        }\n                        else {\n                            fcn.14001a0c0(auStack1460, 0, 0x1cc);\n                            puVar9 = fcn.1400142cc();\n                            *puVar9 = 0x22;\n                            fcn.140014060();\n                        }\n                    }\n                    uVar8 = uStack1464;\n                    if (uVar21 != 0) {\n                        if ((uVar21 != 1) && (uStack1464 != 0)) {\n                            uVar8 = 0;\n                            uVar13 = 0;\n                            do {\n                                uVar12 = auStack1460[uVar13] * uVar19 + uVar8;\n                                auStack1460[uVar13] = uVar12;\n                                uVar8 = uVar12 >> 0x20;\n                                uVar21 = uVar12 >> 0x20;\n                                uVar14 = uVar13 + 1;\n                                uVar13 = uVar14;\n                            } while (uVar14 != uStack1464);\n                            goto code_r0x000140029624;\n                        }\n                        goto code_r0x000140029668;\n                    }\n                    goto code_r0x00014002952a;\n                }\n                bVar23 = uStack1000 < uVar14;\n                puStack1992 = auStack996;\n                if (!bVar23) {\n                    puStack1992 = auStack1460;\n                }\n                uStack2024 = auStack996;\n                uStack2012 = uVar14;\n                if (bVar23) {\n                    uStack2012 = uStack1000;\n                }\n                uVar21 = uStack1000;\n                if (bVar23) {\n                    uVar21 = uVar14;\n                    uStack2024 = auStack1460;\n                }\n                uVar8 = 0;\n                uVar19 = 0;\n                uStack536 = 0;\n                if (uStack2012 != 0) {\n                    do {\n                        uVar14 = puStack1992[uVar19];\n                        iVar6 = uVar19;\n                        if (uVar14 == 0) {\n                            if (iVar6 == uVar8) {\n                                auStack532[uVar19] = 0;\n                                uVar8 = iVar6 + 1U;\n                                uStack536 = iVar6 + 1U;\n                            }\n                        }\n                        else {\n                            uVar13 = 0;\n                            if (uVar21 != 0) {\n                                do {\n                                    iVar17 = uVar19;\n                                    uVar12 = uVar19;\n                                    if (iVar17 == 0x73) break;\n                                    if (iVar17 == uVar8) {\n                                        auStack532[uVar19] = 0;\n                                        uStack536 = iVar17 + 1;\n                                    }\n                                    uVar12 = iVar17 + 1U;\n                                    uVar13 = uStack2024[iVar17 + -iVar6] * uVar14 + uVar13 + auStack532[uVar19];\n                                    auStack532[uVar19] = uVar13;\n                                    uVar8 = uStack536;\n                                    uVar13 = uVar13 >> 0x20;\n                                    uVar19 = uVar12;\n                                } while (iVar17 + 1U + -iVar6 != uVar21);\n                                uVar14 = uVar13;\n                                uVar19 = uVar12;\n                                while (uVar14 != 0) {\n                                    iVar17 = uVar19;\n                                    if (iVar17 == 0x73) goto code_r0x000140029673;\n                                    if (iVar17 == uVar8) {\n                                        auStack532[uVar19] = 0;\n                                        uStack536 = iVar17 + 1;\n                                    }\n                                    uVar14 = auStack532[uVar19];\n                                    auStack532[uVar19] = uVar13 + uVar14;\n                                    uVar8 = uStack536;\n                                    uVar14 = uVar13 + uVar14 >> 0x20;\n                                    uVar13 = uVar14;\n                                    uVar19 = iVar17 + 1;\n                                }\n                            }\n                            if (uVar19 == 0x73) goto code_r0x000140029673;\n                        }\n                        uVar19 = iVar6 + 1U;\n                    } while (iVar6 + 1U != uStack2012);\n                }\n                uStack1464 = uVar8;\n                if (uVar8 != 0) {\n                    if (uVar8 << 2 < 0x1cd) {\n                        fcn.14001a740(auStack1460, auStack532, uVar8 << 2);\n                    }\n                    else {\n                        fcn.14001a0c0(auStack1460, 0, 0x1cc);\n                        puVar9 = fcn.1400142cc();\n                        *puVar9 = 0x22;\n                        fcn.140014060();\n                    }\n                    uVar8 = uStack1464;\n                }\n            }\n            uVar14 = uVar8;\n            uStack2008 = uStack2008 - uStack2004;\n            uVar19 = uStack2008;\n        }\n        iVar6 = uStack2016 + uStack2000 * -10;\n        if (iVar6 != 0) {\n            uVar21 = *((iVar6 - 1) * 4 + 0x140035748);\n            if (uVar21 == 0) {\ncode_r0x000140029673:\n                uStack1464 = 0;\ncode_r0x000140029676:\n                uVar14 = uStack1464;\n            }\n            else if ((uVar21 != 1) && (uVar14 != 0)) {\n                uVar8 = 0;\n                uVar19 = 0;\n                do {\n                    uVar13 = auStack1460[uVar19] * uVar21 + uVar8;\n                    auStack1460[uVar19] = uVar13;\n                    uVar8 = uVar13 >> 0x20;\n                    uVar16 = uVar19 + 1;\n                    uVar19 = uVar16;\n                } while (uVar16 != uVar14);\n                uVar21 = uVar13 >> 0x20;\n                uVar14 = uStack1464;\n                if (uVar21 != 0) {\n                    if (0x72 < uStack1464) goto code_r0x000140029673;\n                    auStack1460[uStack1464] = uVar21;\n                    uStack1464 = uStack1464 + 1;\n                    goto code_r0x000140029676;\n                }\n            }\n        }\ncode_r0x00014002967d:\n        if (uVar22 != 0) {\n            uVar8 = 0;\n            uVar19 = 0;\n            do {\n                uVar13 = uVar8 + auStack1924[uVar19] * 10;\n                auStack1924[uVar19] = uVar13;\n                uVar21 = uVar19 + 1;\n                uVar19 = uVar21;\n                uVar8 = uVar13 >> 0x20;\n            } while (uVar21 != uVar22);\n            uVar22 = uVar13 >> 0x20;\n            if (uVar22 != 0) {\n                if (uStack1928 < 0x73) {\n                    auStack1924[uStack1928] = uVar22;\n                    uStack1928 = uStack1928 + 1;\n                }\n                else {\n                    uStack1000 = 0;\n                    uStack1928 = 0;\n                    fcn.140023fec(auStack1924, 0x1cc, auStack996, 0);\n                }\n            }\n        }\n    }\n    iVar6 = fcn.140023b60(&uStack1928, &uStack1464);\n    if (iVar6 == 10) {\n        uVar22 = uStack2016 + 1;\n        *pcStack1952 = '1';\n        pcVar18 = pcStack1952 + 1;\n        if (uVar14 != 0) {\n            uVar8 = 0;\n            uVar19 = 0;\n            do {\n                uVar13 = uVar8 + auStack1460[uVar19] * 10;\n                auStack1460[uVar19] = uVar13;\n                uVar21 = uVar19 + 1;\n                uVar19 = uVar21;\n                uVar8 = uVar13 >> 0x20;\n            } while (uVar21 != uVar14);\n            uVar14 = uVar13 >> 0x20;\n            if (uVar14 != 0) {\n                if (uStack1464 < 0x73) {\n                    auStack1460[uStack1464] = uVar14;\n                    uStack1464 = uStack1464 + 1;\n                }\n                else {\n                    uStack1000 = 0;\n                    uStack1464 = 0;\n                    fcn.140023fec(auStack1460, 0x1cc, auStack996, 0);\n                }\n            }\n        }\n    }\n    else if (iVar6 == 0) {\n        pcVar18 = pcStack1952;\n        uVar22 = uStack2016 - 1;\n    }\n    else {\n        pcVar18 = pcStack1952 + 1;\n        *pcStack1952 = iVar6 + '0';\n        uVar22 = uStack2016;\n    }\n    puStack1936[1] = uVar22;\n    uVar14 = uStack1984;\n    if (((-1 < uVar22) && (uStack1984 < 0x80000000)) && (iStack1956 == 0)) {\n        uVar14 = uStack1984 + uVar22;\n    }\n    uVar8 = uVar14;\n    if (in_stack_00000030 - 1U < uVar14) {\n        uVar8 = in_stack_00000030 - 1U;\n    }\n    pcStack1952 = pcStack1952 + uVar8;\n    while ((pcVar18 != pcStack1952 && (uStack1928 != 0))) {\n        uVar8 = 0;\n        uVar19 = 0;\n        do {\n            uVar13 = auStack1924[uVar19] * 1000000000 + uVar8;\n            auStack1924[uVar19] = uVar13;\n            uVar8 = uVar13 >> 0x20;\n            uVar22 = uVar19 + 1;\n            uVar19 = uVar22;\n        } while (uVar22 != uStack1928);\n        uVar22 = uVar13 >> 0x20;\n        if (uVar22 != 0) {\n            if (uStack1928 < 0x73) {\n                auStack1924[uStack1928] = uVar22;\n                uStack1928 = uStack1928 + 1;\n            }\n            else {\n                uStack1000 = 0;\n                uStack1928 = 0;\n                fcn.140023fec(auStack1924, 0x1cc, auStack996, 0);\n            }\n        }\n        uVar8 = fcn.140023b60(&uStack1928, &uStack1464);\n        uVar22 = 8;\n        do {\n            uVar19 = (uVar8 & 0xffffffff) / 10;\n            if (uVar22 < pcStack1952 - pcVar18) {\n                pcVar18[uVar22] = uVar8 + uVar19 * -10 + '0';\n            }\n            uVar22 = uVar22 - 1;\n            uVar8 = uVar19;\n        } while (uVar22 != 0xffffffff);\n        iVar15 = pcStack1952 - pcVar18;\n        if (9 < iVar15) {\n            iVar15 = 9;\n        }\n        pcVar18 = pcVar18 + iVar15;\n    }\n    *pcVar18 = '\\0';\ncode_r0x000140029fd1:\n    if (cStack1968 != '\\0') {\n        fcn.14002c03c(auStack1976);\n    }\n    fcn.140018790(uStack72 ^ auStack2072);\n    return;\n}\n",
        "token_count": 9628
    },
    "14002a10": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nint64_t fcn.14002a104(uint16_t *arg1, char **arg2, uint64_t arg3, ulong arg4)\n\n{\n    uint32_t uVar1;\n    uint16_t *puVar2;\n    char *pcVar3;\n    char *arg2_00;\n    int64_t iVar4;\n    int64_t iVar5;\n    uint32_t auStackX8 [2];\n    int64_t in_stack_00000028;\n    \n    arg2_00 = *arg2;\n    iVar4 = 0;\n    if (arg1 == NULL) {\n        while( true ) {\n            if (*arg2_00 == '\\0') {\n                iVar5 = 1;\n            }\n            else if (arg2_00[1] == '\\0') {\n                iVar5 = 2;\n            }\n            else {\n                iVar5 = (arg2_00[2] != '\\0') + 3;\n            }\n            iVar5 = fcn.14002c768(0, arg2_00, iVar5, arg4);\n            if (iVar5 == -1) {\n                *(in_stack_00000028 + 0x30) = 1;\n                *(in_stack_00000028 + 0x2c) = 0x2a;\n                return -1;\n            }\n            if (iVar5 == 0) break;\n            if (iVar5 == 4) {\n                iVar4 = iVar4 + 1;\n            }\n            arg2_00 = arg2_00 + iVar5;\n            iVar4 = iVar4 + 1;\n        }\n    }\n    else {\n        puVar2 = arg1;\n        pcVar3 = arg2_00;\n        if (arg3 != 0) {\n            do {\n                if (*arg2_00 == '\\0') {\n                    iVar4 = 1;\n                }\n                else if (arg2_00[1] == '\\0') {\n                    iVar4 = 2;\n                }\n                else {\n                    iVar4 = (arg2_00[2] != '\\0') + 3;\n                }\n                iVar4 = fcn.14002c768(auStackX8, arg2_00, iVar4, arg4);\n                if (iVar4 == -1) {\n                    *arg2 = arg2_00;\n                    *(in_stack_00000028 + 0x30) = 1;\n                    *(in_stack_00000028 + 0x2c) = 0x2a;\n                    return -1;\n                }\n                pcVar3 = NULL;\n                if (iVar4 == 0) {\n                    *puVar2 = 0;\n                    break;\n                }\n                uVar1 = auStackX8[0];\n                if (0xffff < auStackX8[0]) {\n                    pcVar3 = arg2_00;\n                    if (arg3 < 2) break;\n                    auStackX8[0] = auStackX8[0] - 0x10000;\n                    arg3 = arg3 - 1;\n                    *puVar2 = auStackX8[0] >> 10 | 0xd800;\n                    puVar2 = puVar2 + 1;\n                    uVar1 = auStackX8[0] & 0x3ff | 0xdc00;\n                }\n                *puVar2 = uVar1;\n                pcVar3 = arg2_00 + iVar4;\n                puVar2 = puVar2 + 1;\n                arg3 = arg3 - 1;\n                arg2_00 = pcVar3;\n            } while (arg3 != 0);\n        }\n        *arg2 = pcVar3;\n        iVar4 = puVar2 - arg1 >> 1;\n    }\n    return iVar4;\n}\n",
        "token_count": 818
    },
    "14002a36": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint64_t fcn.14002a36c(ulong arg1, uint8_t *arg2, ulong arg3, char *arg4)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    int64_t iVar5;\n    uint32_t *puVar6;\n    uint *puVar7;\n    uint32_t uVar8;\n    int32_t iVar9;\n    uint64_t uVar10;\n    uint32_t auStackX8 [2];\n    \n    uVar10 = arg1;\n    iVar9 = 0;\n    *arg4 = '\\0';\n    if (-1 < *(*((uVar10 >> 6) * 8 + 0x140040030) + 0x38 + (arg1 & 0x3f) * 0x48)) {\n        return 0;\n    }\n    if ((arg3 & 0x74000) == 0) {\n        auStackX8[0] = 0;\n        iVar2 = fcn.14001e9bc(auStackX8);\n        if (iVar2 != 0) {\n            fcn.1400140b0(0, 0, 0, 0, 0);\n            pcVar1 = swi(3);\n            uVar10 = (*pcVar1)();\n            return uVar10;\n        }\n        if ((auStackX8[0] & 0x74000) == 0) {\n            arg3._0_4_ = arg3 | 0x4000;\n        }\n        else {\n            arg3._0_4_ = arg3 | auStackX8[0] & 0x74000;\n        }\n    }\n    uVar8 = arg3 & 0x74000;\n    iVar2 = 2;\n    if (uVar8 == 0x4000) {\n        *arg4 = '\\0';\n    }\n    else if ((uVar8 - 0x10000 & 0xffffbfff) == 0) {\n        if ((arg3 & 0x301) == 0x301) goto code_r0x00014002a433;\n    }\n    else if ((uVar8 - 0x20000 & 0xffffbfff) == 0) {\ncode_r0x00014002a433:\n        *arg4 = '\\x02';\n    }\n    else if ((uVar8 - 0x40000 & 0xffffbfff) == 0) {\n        *arg4 = '\\x01';\n    }\n    if ((arg3 & 0x70000) == 0) {\n        return 0;\n    }\n    if ((*arg2 & 0x40) != 0) {\n        return 0;\n    }\n    uVar8 = *(arg2 + 4);\n    uVar3 = uVar8 & 0xc0000000;\n    if (uVar3 == 0x40000000) {\ncode_r0x00014002a478:\n        uVar3 = *(arg2 + 8);\n        if (uVar3 == 0) {\n            return 0;\n        }\n        if (2 < uVar3) {\n            if (uVar3 < 5) {\n                iVar5 = fcn.14002b4c4(uVar10 & 0xffffffff, 0);\n                if (iVar5 != 0) {\n                    iVar5 = fcn.14002b4c4(arg1, 0, 0);\n                    if (iVar5 == -1) goto code_r0x00014002a4d9;\n                    if (-1 < uVar8) {\n                        return 0;\n                    }\n                    goto code_r0x00014002a4f0;\n                }\n            }\n            else if (uVar3 != 5) {\n                return 0;\n            }\n        }\n        if (*arg4 == '\\x01') {\n            iVar2 = 3;\n            auStackX8[0] = 0xbfbbef;\n        }\n        else {\n            if (*arg4 != '\\x02') {\n                return 0;\n            }\n            auStackX8[0] = 0xfeff;\n        }\n        while (iVar4 = fcn.140028674(uVar10 & 0xffffffff, auStackX8 + iVar9, iVar2 - iVar9),  iVar4 != -1) {\n            iVar9 = iVar9 + iVar4;\n            if (iVar2 <= iVar9) {\n                return 0;\n            }\n        }\n        goto code_r0x00014002a4d9;\n    }\n    if (uVar3 != 0x80000000) {\n        if (uVar3 != 0xc0000000) {\n            return 0;\n        }\n        goto code_r0x00014002a478;\n    }\ncode_r0x00014002a4f0:\n    auStackX8[0] = 0;\n    iVar9 = fcn.14002bb6c(uVar10 & 0xffffffff, auStackX8, 3);\n    if (iVar9 == -1) goto code_r0x00014002a4d9;\n    if (iVar9 == 2) {\ncode_r0x00014002a528:\n        if ((auStackX8[0] & 0xffff) == 0xfffe) {\n            puVar7 = fcn.1400142cc();\n            *puVar7 = 0x16;\n            goto code_r0x00014002a4d9;\n        }\n        if ((auStackX8[0] & 0xffff) == 0xfeff) {\n            iVar5 = fcn.14002b4c4(uVar10 & 0xffffffff, 2, 0);\n            if (iVar5 != -1) {\n                *arg4 = '\\x02';\n                return 0;\n            }\n            goto code_r0x00014002a4d9;\n        }\n    }\n    else if (iVar9 == 3) {\n        if (auStackX8[0] == 0xbfbbef) {\n            *arg4 = '\\x01';\n            return 0;\n        }\n        goto code_r0x00014002a528;\n    }\n    iVar5 = fcn.14002b4c4(uVar10 & 0xffffffff, 0, 0);\n    if (iVar5 != -1) {\n        return 0;\n    }\ncode_r0x00014002a4d9:\n    puVar6 = fcn.1400142cc();\n    return *puVar6;\n}\n",
        "token_count": 1445
    },
    "14002a8b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t fcn.14002a8b4(uint *arg1, uint32_t *arg2, ulong arg3, ulong arg4)\n\n{\n    uint8_t *puVar1;\n    uint32_t uVar2;\n    int64_t iVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    uchar (*pauVar6) [16];\n    uint *puVar7;\n    int32_t *piVar8;\n    int64_t iVar9;\n    uint64_t uVar10;\n    uint64_t uVar11;\n    uint32_t in_stack_00000028;\n    uint32_t in_stack_00000030;\n    uchar auStack168 [8];\n    uchar auStack160 [4];\n    uint32_t uStack156;\n    ulong uStack152;\n    ulong uStack144;\n    uint8_t uStack136;\n    ulong uStack128;\n    uint64_t uStack120;\n    uint64_t uStack112;\n    uint auStack104 [2];\n    ulong uStack96;\n    uint32_t uStack88;\n    uint uStack72;\n    uint uStack68;\n    uint uStack64;\n    uint uStack60;\n    ulong uStack56;\n    \n    puVar7 = &uStack72;\n    pauVar6 = fcn.14002a5e4(puVar7, arg4, in_stack_00000028, in_stack_00000030);\n    _auStack160 = *pauVar6;\n    uStack144 = *pauVar6[1];\n    uVar10 = SUB168(_auStack160 >> 0x40, 0);\n    uVar11 = uVar10 >> 0x20;\n    iVar5 = SUB164(_auStack160 >> 0x60, 0);\n    uStack128 = uStack144;\n    uStack112 = uVar11;\n    if (iVar5 == -1) {\n        puVar7 = fcn.1400142ac(puVar7);\n        *puVar7 = 0;\n        *arg2 = 0xffffffff;\n        goto code_r0x00014002a935;\n    }\n    uVar4 = fcn.140024ec0(uVar10);\n    *arg2 = uVar4;\n    if (uVar4 == 0xffffffff) {\n        puVar7 = fcn.1400142ac(puVar7);\n        *puVar7 = 0;\n        *arg2 = 0xffffffff;\n        puVar7 = fcn.1400142cc();\n        *puVar7 = 0x18;\n        goto code_r0x00014002a935;\n    }\n    uStack144._0_4_ = uStack144 >> 0x20 | uStack144;\n    uStack120 = uStack144;\n    uStack88 = ~(arg4 >> 7) & 1;\n    *arg1 = 1;\n    auStack104[0] = 0x18;\n    uStack96 = 0;\n    iVar9 = (*_sym.imp.KERNEL32.dll_CreateFileW)(arg3, _auStack160 >> 0x20, iVar5, auStack104, uStack152, uStack144, 0);\n    uVar4 = uStack156;\n    if (iVar9 == -1) {\n        if (((uStack156 & 0xc0000000) == 0xc0000000) && ((arg4 & 1) != 0)) {\n            uVar4 = uStack156 & 0x7fffffff;\n            _auStack160 = _auStack160 & 0xffffffffffffffff;\n            iVar9 = (*_sym.imp.KERNEL32.dll_CreateFileW)\n                              (arg3, _auStack160 >> 0x20, uVar11, auStack104, uStack152, uStack144, 0);\n            if (iVar9 != -1) goto code_r0x00014002aa4c;\n        }\n        puVar1 = *((*arg2 >> 6) * 8 + 0x140040030) + 0x38 + (*arg2 & 0x3f) * 0x48;\n        *puVar1 = *puVar1 & 0xfe;\n        uVar4 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        fcn.140014240(uVar4);\n    }\n    else {\ncode_r0x00014002aa4c:\n        iVar5 = (*_sym.imp.KERNEL32.dll_GetFileType)();\n        if (iVar5 != 0) {\n            if (iVar5 == 2) {\n                auStack160[0] = auStack160[0] | 0x40;\n            }\n            else if (iVar5 == 3) {\n                auStack160[0] = auStack160[0] | 8;\n            }\n            fcn.140024dd8(*arg2, iVar9);\n            uStack136 = auStack160[0] | 1;\n            _auStack160 = CONCAT151(stack0xffffffffffffff61, auStack160[0]) | 0x1;\n            *(*((*arg2 >> 6) * 8 + 0x140040030) + 0x38 + (*arg2 & 0x3f) * 0x48) = uStack136;\n            *(*((*arg2 >> 6) * 8 + 0x140040030) + 0x39 + (*arg2 & 0x3f) * 0x48) = 0;\n            if (((arg4 & 2) == 0) || (iVar5 = fcn.14002a7f0(*arg2),  iVar5 == 0)) {\n                uStack72 = auStack160;\n                uStack68 = uStack156;\n                uStack64 = uStack152;\n                uStack60 = uStack152._4_4_;\n                auStack168[0] = 0;\n                uStack56 = uStack128;\n                iVar5 = fcn.14002a36c(*arg2, &uStack72, arg4, auStack168);\n                uVar2 = *arg2;\n                if (iVar5 == 0) {\n                    *(*((uVar2 >> 6) * 8 + 0x140040030) + 0x39 + (uVar2 & 0x3f) * 0x48) = auStack168[0];\n                    uVar10 = *arg2 & 0x3f;\n                    iVar3 = *((*arg2 >> 6) * 8 + 0x140040030);\n                    puVar1 = iVar3 + 0x3d + uVar10 * 0x48;\n                    *puVar1 = *puVar1 & 0xfe;\n                    puVar1 = iVar3 + 0x3d + uVar10 * 0x48;\n                    *puVar1 = *puVar1 | arg4 >> 0x10 & 1;\n                    if (((uStack136 & 0x48) == 0) && ((arg4 & 8) != 0)) {\n                        puVar1 = *((*arg2 >> 6) * 8 + 0x140040030) + 0x38 + (*arg2 & 0x3f) * 0x48;\n                        *puVar1 = *puVar1 | 0x20;\n                    }\n                    if (((uVar4 & 0xc0000000) == 0xc0000000) && ((arg4 & 1) != 0)) {\n                        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar9);\n                        _auStack160 = CONCAT88(uStack152, CONCAT44(uVar4, auStack160)) & 0xffffffffffffffff;\n                        iVar9 = (*_sym.imp.KERNEL32.dll_CreateFileW)\n                                          (arg3, _auStack160 >> 0x20, uStack112 & 0xffffffff, auStack104, uStack152, \n                                           uStack120, 0);\n                        if (iVar9 == -1) {\n                            uVar4 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                            fcn.140014240(uVar4);\n                            puVar1 = *((*arg2 >> 6) * 8 + 0x140040030) + 0x38 + (*arg2 & 0x3f) * 0x48;\n                            *puVar1 = *puVar1 & 0xfe;\n                            fcn.140025000(*arg2);\n                            goto code_r0x00014002a935;\n                        }\n                        *(*((*arg2 >> 6) * 8 + 0x140040030) + 0x28 + (*arg2 & 0x3f) * 0x48) = iVar9;\n                    }\n                    return 0;\n                }\n                uVar10 = uVar2 & 0xffffffff;\n            }\n            else {\n                uVar10 = *arg2;\n            }\n            fcn.140027278(uVar10);\n            return iVar5;\n        }\n        uVar4 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        fcn.140014240(uVar4);\n        puVar1 = *((*arg2 >> 6) * 8 + 0x140040030) + 0x38 + (*arg2 & 0x3f) * 0x48;\n        *puVar1 = *puVar1 & 0xfe;\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar9);\n        if (uVar4 == 0) {\n            puVar7 = fcn.1400142cc();\n            *puVar7 = 0xd;\n        }\n    }\ncode_r0x00014002a935:\n    piVar8 = fcn.1400142cc();\n    return *piVar8;\n}\n",
        "token_count": 2150
    },
    "14002afe": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nushort fcn.14002afec(ulong *arg1)\n\n{\n    uchar uVar1;\n    int32_t iVar2;\n    ulong arg2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    uint *puVar6;\n    ushort uVar7;\n    int64_t iVar8;\n    ushort *puVar9;\n    uchar uVar10;\n    \n    if (arg1 == NULL) {\n        puVar6 = fcn.1400142cc();\n        *puVar6 = 0x16;\n        fcn.140014060();\n    }\n    else if (((*(arg1 + 0x14) >> 0xd & 1) != 0) && ((*(arg1 + 0x14) >> 0xc & 1) == 0)) {\n        if ((*(arg1 + 0x14) >> 1 & 1) == 0) {\n            LOCK();\n            *(arg1 + 0x14) = *(arg1 + 0x14) | 1;\n            if ((*(arg1 + 0x14) & 0x4c0) == 0) {\n                fcn.14002aff4(arg1);\n            }\n            iVar2 = *(arg1 + 2);\n            if (iVar2 == 1) {\n                uVar10 = **arg1;\n            }\n            else {\n                uVar10 = 0;\n            }\n            arg2 = arg1[1];\n            uVar5 = *(arg1 + 4);\n            *arg1 = arg2;\n            uVar3 = fcn.140026bfc(arg1);\n            iVar4 = fcn.14002ba50(uVar3, arg2, uVar5);\n            *(arg1 + 2) = iVar4;\n            if (2 < iVar4 + 1U) {\n                if ((*(arg1 + 0x14) & 6) == 0) {\n                    iVar4 = fcn.140026bfc(arg1);\n                    if ((iVar4 == -1) || (iVar4 = fcn.140026bfc(arg1),  iVar4 == -2)) {\n                        iVar8 = 0x14003ef60;\n                    }\n                    else {\n                        iVar4 = fcn.140026bfc(arg1);\n                        uVar5 = fcn.140026bfc(arg1);\n                        iVar8 = *((iVar4 >> 6) * 8 + 0x140040030) + (uVar5 & 0x3f) * 0x48;\n                    }\n                    if ((*(iVar8 + 0x38) & 0x82) == 0x82) {\n                        LOCK();\n                        *(arg1 + 0x14) = *(arg1 + 0x14) | 0x20;\n                    }\n                }\n                if (((*(arg1 + 4) == 0x200) && ((*(arg1 + 0x14) >> 6 & 1) != 0)) && ((*(arg1 + 0x14) >> 8 & 1) == 0)) {\n                    *(arg1 + 4) = 0x1000;\n                }\n                puVar9 = *arg1;\n                if (iVar2 == 1) {\n                    uVar1 = *puVar9;\n                    *(arg1 + 2) = *(arg1 + 2) + -1;\n                    uVar7 = CONCAT11(uVar1, uVar10);\n                    puVar9 = puVar9 + 1;\n                }\n                else {\n                    uVar7 = *puVar9;\n                    *(arg1 + 2) = *(arg1 + 2) + -2;\n                    puVar9 = puVar9 + 1;\n                }\n                *arg1 = puVar9;\n                return uVar7;\n            }\n            LOCK();\n            *(arg1 + 0x14) = *(arg1 + 0x14) | (-(iVar4 != 0) & 8) + 8;\n            *(arg1 + 2) = 0;\n        }\n        else {\n            LOCK();\n            *(arg1 + 0x14) = *(arg1 + 0x14) | 0x10;\n        }\n    }\n    return 0xffff;\n}\n",
        "token_count": 938
    },
    "14002b4c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nulong fcn.14002b4c4(ulong param_1, ulong param_2, ulong param_3)\n\n{\n    ulong uVar1;\n    int64_t iVar2;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_28h;\n    uint uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_bp_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_18h._0_1_ = *0x14003f218 == 0;\n    var_30h._0_1_ = 0;\n    var_bp_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (var_18h) {\n        var_28h._0_4_ = *0x14003e158;\n        var_28h._4_4_ = *0x14003e15c;\n        uStack40 = *0x14003e160;\n        uStack36 = *0x14003e164;\n    }\n    uVar1 = fcn.14002b418(param_1, param_2, param_3, &var_40h);\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_bp_10h != '\\0') {\n        iVar2 = fcn.140013c70(&var_40h);\n        *(iVar2 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar2 = fcn.140013c70(&var_40h);\n        *(iVar2 + 0x24) = var_bp_10h._4_4_;\n    }\n    return uVar1;\n}\n",
        "token_count": 452
    },
    "14002b5a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nint32_t fcn.14002b5a4(ulong arg1, int16_t *arg2, int64_t arg3)\n\n{\n    int16_t *piVar1;\n    uint8_t *puVar2;\n    uint8_t uVar3;\n    int16_t iVar4;\n    ulong uVar5;\n    int16_t iVar6;\n    int32_t iVar7;\n    uint64_t uVar8;\n    int64_t iVar9;\n    int16_t *piVar10;\n    int16_t *piVar11;\n    int16_t *piVar12;\n    int64_t iVar13;\n    int64_t iVar14;\n    uint16_t auStackX8 [4];\n    uint64_t uStackX16;\n    int32_t aiStackX24 [4];\n    \n    uVar8 = arg1 & 0x3f;\n    iVar14 = arg1 >> 6;\n    iVar13 = 0;\n    iVar9 = *(iVar14 * 8 + 0x140040030);\n    uStackX16 = 4;\n    uVar5 = *(iVar9 + 0x28 + uVar8 * 0x48);\n    if ((arg3 == 0) || (*arg2 != 10)) {\n        puVar2 = iVar9 + 0x38 + uVar8 * 0x48;\n        *puVar2 = *puVar2 & 0xfb;\n    }\n    else {\n        puVar2 = iVar9 + 0x38 + uVar8 * 0x48;\n        *puVar2 = *puVar2 | 4;\n    }\n    piVar1 = arg2 + arg3;\n    piVar12 = arg2;\n    if (arg2 < piVar1) {\n        piVar10 = arg2;\n        do {\n            iVar6 = *piVar10;\n            if (iVar6 == 0x1a) {\n                iVar9 = *(iVar14 * 8 + 0x140040030);\n                uVar3 = *(iVar9 + 0x38 + uVar8 * 0x48);\n                if ((uVar3 & 0x40) != 0) {\n                    *piVar12 = 0x1a;\n                    goto code_r0x00014002b75f;\n                }\n                *(iVar9 + 0x38 + uVar8 * 0x48) = uVar3 | 2;\n                break;\n            }\n            piVar11 = piVar10 + 1;\n            if (iVar6 == 0xd) {\n                if (piVar1 <= piVar11) {\n                    iVar7 = (*_sym.imp.KERNEL32.dll_ReadFile)(uVar5, auStackX8, 2, aiStackX24, 0);\n                    if ((iVar7 == 0) || (aiStackX24[0] == 0)) {\ncode_r0x00014002b738:\n                        *piVar12 = 0xd;\n                        goto code_r0x00014002b75f;\n                    }\n                    uVar8 = arg1 & 0x3f;\n                    if ((*(*(iVar14 * 8 + 0x140040030) + 0x38 + uVar8 * 0x48) & 0x48) == 0) {\n                        if ((auStackX8[0] != 10) || (piVar12 != arg2)) {\n                            fcn.14002b4c4(arg1 & 0xffffffff, 0xfffffffffffffffe, 1);\n                            if (auStackX8[0] != 10) goto code_r0x00014002b738;\n                            break;\n                        }\n                    }\n                    else if (auStackX8[0] != 10) {\n                        *piVar12 = 0xd;\n                        uStackX16 = uStackX16 & 0xffffffffffff0000 | auStackX8[0];\n                        do {\n                            *(*(iVar14 * 8 + 0x140040030) + uVar8 * 0x48 + 0x3a + iVar13) = *(&uStackX16 + iVar13);\n                            iVar13 = iVar13 + 1;\n                        } while (iVar13 < 2);\n                        *(*(iVar14 * 8 + 0x140040030) + 0x3c + uVar8 * 0x48) = 10;\ncode_r0x00014002b75f:\n                        piVar12 = piVar12 + 1;\n                        break;\n                    }\n                    *piVar12 = 10;\n                    goto code_r0x00014002b75f;\n                }\n                iVar9 = 2;\n                if (*piVar11 == 10) {\n                    iVar9 = 4;\n                }\n                iVar4 = *piVar11;\n                piVar11 = piVar10 + iVar9;\n                iVar6 = 10;\n                if (iVar4 != 10) {\n                    iVar6 = 0xd;\n                }\n            }\n            *piVar12 = iVar6;\n            piVar12 = piVar12 + 1;\n            piVar10 = piVar11;\n        } while (piVar11 < piVar1);\n    }\n    return (piVar12 - arg2 >> 1) * 2;\n}\n",
        "token_count": 1146
    },
    "14002b77": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t fcn.14002b77c(ulong arg1, uint8_t *arg2, int64_t arg3, ulong arg4)\n\n{\n    uint8_t uVar1;\n    char cVar2;\n    ulong uVar3;\n    uint32_t uVar4;\n    uint64_t uVar5;\n    uint8_t *puVar6;\n    uint *puVar7;\n    int64_t iVar8;\n    uint8_t *puVar9;\n    uint64_t uVar10;\n    int32_t iVar11;\n    uint8_t *puVar12;\n    uint8_t *puVar13;\n    int64_t iVar14;\n    uint64_t uVar15;\n    char acStackX8 [8];\n    int32_t aiStackX16 [2];\n    \n    uVar15 = arg1;\n    uVar5 = arg1 & 0x3f;\n    iVar14 = uVar15 >> 6;\n    iVar8 = *(iVar14 * 8 + 0x140040030);\n    uVar3 = *(iVar8 + 0x28 + uVar5 * 0x48);\n    if ((arg3 == 0) || (*arg2 != 10)) {\n        puVar9 = iVar8 + 0x38 + uVar5 * 0x48;\n        *puVar9 = *puVar9 & 0xfb;\n    }\n    else {\n        puVar9 = iVar8 + 0x38 + uVar5 * 0x48;\n        *puVar9 = *puVar9 | 4;\n    }\n    puVar9 = arg2 + arg3;\n    puVar13 = arg2;\n    puVar12 = arg2;\n    if (arg2 < puVar9) {\n        do {\n            uVar1 = *puVar13;\n            if (uVar1 == 0x1a) {\n                iVar8 = *(iVar14 * 8 + 0x140040030);\n                uVar1 = *(iVar8 + 0x38 + uVar5 * 0x48);\n                if ((uVar1 & 0x40) != 0) {\n                    *puVar12 = 0x1a;\n                    goto code_r0x00014002b8f7;\n                }\n                *(iVar8 + 0x38 + uVar5 * 0x48) = uVar1 | 2;\n                break;\n            }\n            puVar6 = puVar13 + 1;\n            if (uVar1 == 0xd) {\n                if (puVar9 <= puVar6) {\n                    iVar11 = (*_sym.imp.KERNEL32.dll_ReadFile)(uVar3, acStackX8, 1, aiStackX16, 0);\n                    if ((iVar11 == 0) || (aiStackX16[0] == 0)) {\n                        *puVar12 = 0xd;\n                    }\n                    else if ((*(*(iVar14 * 8 + 0x140040030) + 0x38 + (arg1 & 0x3f) * 0x48) & 0x48) == 0) {\n                        if ((acStackX8[0] == '\\n') && (puVar12 == arg2)) goto code_r0x00014002b88b;\n                        fcn.14002b4c4(uVar15 & 0xffffffff, 0xffffffffffffffff);\n                        if (acStackX8[0] == '\\n') break;\n                        *puVar12 = 0xd;\n                    }\n                    else if (acStackX8[0] == '\\n') {\ncode_r0x00014002b88b:\n                        *puVar12 = 10;\n                    }\n                    else {\n                        *puVar12 = 0xd;\n                        *(*(iVar14 * 8 + 0x140040030) + 0x3a + (arg1 & 0x3f) * 0x48) = acStackX8[0];\n                    }\ncode_r0x00014002b8f7:\n                    puVar12 = puVar12 + 1;\n                    break;\n                }\n                if (*puVar6 == 10) {\n                    *puVar12 = 10;\n                    iVar8 = 2;\n                }\n                else {\n                    *puVar12 = 0xd;\n                    iVar8 = 1;\n                }\n                puVar6 = puVar13 + iVar8;\n            }\n            else {\n                *puVar12 = uVar1;\n            }\n            puVar12 = puVar12 + 1;\n            puVar13 = puVar6;\n        } while (puVar6 < puVar9);\n    }\n    iVar11 = puVar12 - arg2;\n    if (iVar11 == 0) {\n        return 0;\n    }\n    iVar8 = *(iVar14 * 8 + 0x140040030);\n    if (*(iVar8 + 0x39 + uVar5 * 0x48) != '\\0') {\n        puVar9 = arg2 + iVar11;\n        if (puVar9[-1] < '\\0') {\n            uVar10 = 1;\n            for (puVar9 = puVar9 + -1;\n                ((uVar4 = uVar10,  *(*puVar9 + 0x14003f0c0) == '\\0' && (uVar4 < 5)) && (arg2 <= puVar9));\n                puVar9 = puVar9 + -1) {\n                uVar10 = uVar4 + 1;\n            }\n            cVar2 = *(*puVar9 + 0x14003f0c0);\n            if (cVar2 == '\\0') {\n                puVar7 = fcn.1400142cc();\n                *puVar7 = 0x2a;\n                return -1;\n            }\n            if (cVar2 + 1U == uVar4) {\n                puVar9 = puVar9 + uVar10;\n            }\n            else if ((*(iVar8 + 0x38 + uVar5 * 0x48) & 0x48) == 0) {\n                fcn.14002b4c4(uVar15 & 0xffffffff, -uVar4, 1);\n            }\n            else {\n                puVar13 = puVar9 + 1;\n                *(iVar8 + 0x3a + uVar5 * 0x48) = *puVar9;\n                if (1 < uVar4) {\n                    uVar1 = *puVar13;\n                    puVar13 = puVar9 + 2;\n                    *(*(iVar14 * 8 + 0x140040030) + 0x3b + uVar5 * 0x48) = uVar1;\n                }\n                if (uVar4 == 3) {\n                    uVar1 = *puVar13;\n                    puVar13 = puVar13 + 1;\n                    *(*(iVar14 * 8 + 0x140040030) + 0x3c + uVar5 * 0x48) = uVar1;\n                }\n                puVar9 = puVar13 + -uVar10;\n            }\n        }\n        iVar11 = fcn.140016b74(0xfde9, 0);\n        if (iVar11 == 0) {\n            uVar4 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            fcn.140014240(uVar4);\n            return -1;\n        }\n        iVar8 = *(iVar14 * 8 + 0x140040030);\n        puVar13 = iVar8 + 0x3d + uVar5 * 0x48;\n        *puVar13 = *puVar13 & 0xfd;\n        puVar13 = iVar8 + 0x3d + uVar5 * 0x48;\n        *puVar13 = *puVar13 | -(iVar11 != puVar9 - arg2) & 2U;\n        return iVar11 * 2;\n    }\n    return iVar11;\n}\n",
        "token_count": 1750
    },
    "14002bb6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t fcn.14002bb6c(uint64_t arg1, int16_t *arg2, ulong arg3)\n\n{\n    int16_t *piVar1;\n    uint8_t *puVar2;\n    uint8_t uVar3;\n    char cVar4;\n    char cVar5;\n    int32_t iVar6;\n    uint *puVar7;\n    uint64_t uVar8;\n    int16_t *lpMem;\n    ulong uVar9;\n    int16_t *piVar10;\n    int16_t iVar11;\n    uint32_t uVar12;\n    int32_t iVar13;\n    uint64_t uVar14;\n    int64_t iVar15;\n    int16_t *piVar16;\n    uint32_t auStackX32 [2];\n    uchar auStack104 [8];\n    ulong uStack96;\n    uint64_t uStack88;\n    uint64_t uStack80;\n    int16_t *piStack72;\n    \n    uVar12 = arg1;\n    if (uVar12 == 0xfffffffe) {\n        puVar7 = fcn.1400142ac(arg1);\n        *puVar7 = 0;\n        puVar7 = fcn.1400142cc();\n        *puVar7 = 9;\n        return -1;\n    }\n    if ((-1 < uVar12) && (uVar12 < *0x140040430)) {\n        uVar8 = uVar12 & 0x3f;\n        uStack80 = 1;\n        uStack88 = uVar12 >> 6;\n        iVar15 = *(uStack88 * 8 + 0x140040030);\n        uVar3 = *(iVar15 + 0x38 + uVar8 * 0x48);\n        if ((uVar3 & 1) != 0) {\n            if (arg3 < 0x80000000) {\n                if ((arg3 == 0) || ((uVar3 & 2) != 0)) {\n                    return 0;\n                }\n                if (arg2 != NULL) {\n                    cVar5 = *(iVar15 + 0x39 + uVar8 * 0x48);\n                    lpMem = NULL;\n                    uStack96 = *(iVar15 + 0x28 + uVar8 * 0x48);\n                    uVar12 = cVar5 - 1;\n                    if (uVar12 == 0) {\n                        if ((~arg3 & 1) == 0) goto code_r0x00014002bc62;\n                        uVar12 = arg3 >> 1;\n                        if (arg3 >> 1 < 4) {\n                            uVar12 = 4;\n                        }\n                        uVar14 = uVar12;\n                        lpMem = fcn.1400167b4(uVar14);\n                        fcn.140014db4(0);\n                        uVar9 = 0;\n                        fcn.140014db4(0);\n                        if (lpMem != NULL) {\n                            uVar9 = fcn.14002b4c4(arg1 & 0xffffffff, 0, 1);\n                            *(*(uStack88 * 8 + 0x140040030) + 0x30 + uVar8 * 0x48) = uVar9;\n                            iVar15 = *(uStack88 * 8 + 0x140040030);\n                            piStack72 = lpMem;\n                            goto code_r0x00014002bd05;\n                        }\n                        puVar7 = fcn.1400142cc();\n                        *puVar7 = 0xc;\n                        puVar7 = fcn.1400142ac(uVar9);\n                        *puVar7 = 8;\n                    }\n                    else if ((uVar12 == 1) && ((~arg3 & 1) == 0)) {\ncode_r0x00014002bc62:\n                        puVar7 = fcn.1400142ac(uVar12);\n                        *puVar7 = 0;\n                        puVar7 = fcn.1400142cc();\n                        *puVar7 = 0x16;\n                        fcn.140014060();\n                    }\n                    else {\n                        uVar14 = arg3;\n                        piStack72 = arg2;\ncode_r0x00014002bd05:\n                        piVar16 = piStack72;\n                        iVar13 = 0;\n                        if ((((*(iVar15 + 0x38 + uVar8 * 0x48) & 0x48) != 0) &&\n                            (cVar4 = *(iVar15 + 0x3a + uVar8 * 0x48),  iVar13 = 0,  cVar4 != '\\n')) &&\n                           (iVar6 = uVar14,  iVar6 != 0)) {\n                            *piStack72 = cVar4;\n                            piVar16 = piStack72 + 1;\n                            uVar14 = iVar6 - 1U;\n                            iVar13 = 1;\n                            *(*(uStack88 * 8 + 0x140040030) + 0x3a + uVar8 * 0x48) = 10;\n                            if (((cVar5 != '\\0') &&\n                                (cVar4 = *(*(uStack88 * 8 + 0x140040030) + 0x3b + uVar8 * 0x48),  cVar4 != '\\n')) &&\n                               (iVar6 - 1U != 0)) {\n                                *piVar16 = cVar4;\n                                iVar13 = 2;\n                                piVar16 = piStack72 + 1;\n                                uVar14 = iVar6 - 2U;\n                                *(*(uStack88 * 8 + 0x140040030) + 0x3b + uVar8 * 0x48) = 10;\n                                if (((cVar5 == '\\x01') &&\n                                    (cVar4 = *(*(uStack88 * 8 + 0x140040030) + 0x3c + uVar8 * 0x48),  cVar4 != '\\n')) &&\n                                   (iVar6 - 2U != 0)) {\n                                    *piVar16 = cVar4;\n                                    iVar13 = 3;\n                                    piVar16 = piStack72 + 3;\n                                    uVar14 = iVar6 - 3;\n                                    *(*(uStack88 * 8 + 0x140040030) + 0x3c + uVar8 * 0x48) = 10;\n                                }\n                            }\n                        }\n                        iVar6 = fcn.140028bf8(arg1 & 0xffffffff);\n                        if (((iVar6 == 0) || (-1 < *(*(uStack88 * 8 + 0x140040030) + 0x38 + uVar8 * 0x48))) ||\n                           (iVar6 = (*_sym.imp.KERNEL32.dll_GetConsoleMode)(uStack96, auStack104),  iVar6 == 0)) {\n                            uStack80 = uStack80 & 0xffffffffffffff00;\ncode_r0x00014002be38:\n                            uVar9 = uStack96;\n                            iVar6 = (*_sym.imp.KERNEL32.dll_ReadFile)(uStack96, piVar16, uVar14, auStackX32, 0);\n                            if ((iVar6 != 0) && (auStackX32[0] <= arg3)) {\ncode_r0x00014002be74:\n                                iVar13 = iVar13 + auStackX32[0];\n                                if (*(*(uStack88 * 8 + 0x140040030) + 0x38 + uVar8 * 0x48) < '\\0') {\n                                    uVar14 = iVar13;\n                                    if (cVar5 == '\\x02') {\n                                        if (uStack80 == '\\0') {\n                                            iVar13 = fcn.14002b5a4(arg1 & 0xffffffff, piStack72, uVar14 >> 1);\n                                        }\n                                        else {\n                                            piVar1 = piStack72 + (uVar14 & 0xfffffffffffffffe);\n                                            piVar16 = piStack72;\n                                            for (piVar10 = piStack72; piVar10 < piVar1; piVar10 = piVar10 + iVar15) {\n                                                iVar11 = *piVar10;\n                                                if (iVar11 == 0x1a) {\n                                                    puVar2 = *(uStack88 * 8 + 0x140040030) + 0x38 + uVar8 * 0x48;\n                                                    *puVar2 = *puVar2 | 2;\n                                                    break;\n                                                }\n                                                if (((iVar11 == 0xd) && (piVar10 + 1 < piVar1)) && (piVar10[1] == 10)) {\n                                                    iVar11 = 10;\n                                                    iVar15 = 4;\n                                                }\n                                                else {\n                                                    iVar15 = 2;\n                                                }\n                                                *piVar16 = iVar11;\n                                                piVar16 = piVar16 + 1;\n                                            }\n                                            iVar13 = (piVar16 - piStack72 >> 1) * 2;\n                                        }\n                                    }\n                                    else {\n                                        iVar13 = fcn.14002b77c(arg1 & 0xffffffff, piVar16, uVar14, arg2);\n                                    }\n                                }\n                                goto code_r0x00014002be18;\n                            }\n                            uVar12 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                            if (uVar12 != 5) {\n                                if (uVar12 == 0x6d) {\n                                    iVar13 = 0;\n                                    goto code_r0x00014002be18;\n                                }\n                                goto code_r0x00014002be0e;\n                            }\n                            puVar7 = fcn.1400142cc();\n                            *puVar7 = 9;\n                            puVar7 = fcn.1400142ac(uVar9);\n                            *puVar7 = 5;\n                        }\n                        else {\n                            if (cVar5 != '\\x02') goto code_r0x00014002be38;\n                            iVar6 = (*_sym.imp.KERNEL32.dll_ReadConsoleW)(uStack96, piVar16, uVar14 >> 1, auStackX32, 0)\n                            ;\n                            if (iVar6 != 0) {\n                                auStackX32[0] = auStackX32[0] * 2;\n                                goto code_r0x00014002be74;\n                            }\n                            uVar12 = (*_sym.imp.KERNEL32.dll_GetLastError)();\ncode_r0x00014002be0e:\n                            fcn.140014240(uVar12);\n                        }\n                    }\n                    iVar13 = -1;\ncode_r0x00014002be18:\n                    fcn.140014db4(lpMem);\n                    return iVar13;\n                }\n            }\n            puVar7 = fcn.1400142ac(arg1);\n            *puVar7 = 0;\n            puVar7 = fcn.1400142cc();\n            *puVar7 = 0x16;\n            goto code_r0x00014002bf9e;\n        }\n    }\n    puVar7 = fcn.1400142ac(arg1);\n    *puVar7 = 0;\n    puVar7 = fcn.1400142cc();\n    *puVar7 = 9;\ncode_r0x00014002bf9e:\n    fcn.140014060();\n    return -1;\n}\n",
        "token_count": 2493
    },
    "14002c76": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.14002c768(uint64_t arg1, uint8_t *arg2, uint64_t arg3, uint32_t *arg4)\n\n{\n    uint8_t uVar1;\n    uint32_t uVar2;\n    uint8_t uVar3;\n    uint64_t uVar4;\n    uint8_t *puVar5;\n    uint8_t uVar6;\n    uint64_t uVar7;\n    uint32_t *arg1_00;\n    uint32_t *puVar8;\n    uint64_t uVar9;\n    ulong in_stack_00000028;\n    uchar auStack120 [24];\n    uint32_t auStack96 [6];\n    uint64_t uStack72;\n    \n    uStack72 = *0x14003ef38 ^ auStack120;\n    arg1_00 = 0x140040478;\n    if (arg4 != NULL) {\n        arg1_00 = arg4;\n    }\n    puVar5 = 0x1400373c1;\n    if (arg2 != NULL) {\n        puVar5 = arg2;\n    }\n    uVar9 = 1;\n    if (arg2 != NULL) {\n        uVar9 = arg3;\n    }\n    puVar8 = -(arg2 != NULL) & arg1;\n    if (uVar9 == 0) goto code_r0x00014002c925;\n    if (*(arg1_00 + 6) == 0) {\n        uVar3 = *puVar5;\n        puVar5 = puVar5 + 1;\n        if (-1 < uVar3) {\n            if (puVar8 != NULL) {\n                *puVar8 = uVar3;\n            }\n            goto code_r0x00014002c925;\n        }\n        if ((uVar3 & 0xe0) == 0xc0) {\n            uVar6 = 2;\n        }\n        else if ((uVar3 & 0xf0) == 0xe0) {\n            uVar6 = 3;\n        }\n        else {\n            if ((uVar3 & 0xf8) != 0xf0) goto code_r0x00014002c91a;\n            uVar6 = 4;\n        }\n        uVar2 = (1 << (7 - uVar6 & 0x1f)) - 1U & uVar3;\n        uVar3 = uVar6;\ncode_r0x00014002c870:\n        uVar4 = uVar3;\n        uVar7 = uVar3;\n        if (uVar9 <= uVar4) {\n            uVar7 = uVar9;\n        }\n        while (puVar5 - arg2 < uVar7) {\n            uVar1 = *puVar5;\n            puVar5 = puVar5 + 1;\n            if ((uVar1 & 0xc0) != 0x80) goto code_r0x00014002c91a;\n            uVar2 = uVar1 & 0x3f | uVar2 << 6;\n        }\n        if (uVar7 < uVar4) {\n            *(arg1_00 + 1) = uVar6;\n            *(arg1_00 + 6) = uVar3 - uVar7;\n            *arg1_00 = uVar2;\n            goto code_r0x00014002c925;\n        }\n        if ((0x7ff < uVar2 - 0xd800) && (uVar2 < 0x110000)) {\n            auStack96[2] = 0x80;\n            auStack96[3] = 0x800;\n            auStack96[4] = 0x10000;\n            if (auStack96[uVar6] <= uVar2) {\n                if (puVar8 != NULL) {\n                    *puVar8 = uVar2;\n                }\n                fcn.14002c74c(-(uVar2 != 0) & uVar4, arg1_00);\n                goto code_r0x00014002c925;\n            }\n        }\n    }\n    else {\n        uVar6 = *(arg1_00 + 1);\n        uVar2 = *arg1_00;\n        uVar3 = *(arg1_00 + 6);\n        if (((uVar6 - 2 < 3) && (uVar3 != 0)) && (uVar3 < uVar6)) goto code_r0x00014002c870;\n    }\ncode_r0x00014002c91a:\n    fcn.14002c754(arg1_00, in_stack_00000028);\ncode_r0x00014002c925:\n    fcn.140018790(uStack72 ^ auStack120);\n    return;\n}\n",
        "token_count": 1040
    },
    "14002c94": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.14002c944(ulong param_1, ulong param_2)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_28h;\n    uint uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_bp_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_18h._0_1_ = *0x14003f218 == 0;\n    var_30h._0_1_ = 0;\n    var_bp_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (var_18h) {\n        var_28h._0_4_ = *0x14003e158;\n        var_28h._4_4_ = *0x14003e15c;\n        uStack40 = *0x14003e160;\n        uStack36 = *0x14003e164;\n    }\n    uVar1 = fcn.14002c9dc(param_1, param_2, &var_40h);\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_bp_10h != '\\0') {\n        iVar2 = fcn.140013c70(&var_40h);\n        *(iVar2 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar2 = fcn.140013c70(&var_40h);\n        *(iVar2 + 0x24) = var_bp_10h._4_4_;\n    }\n    return uVar1;\n}\n",
        "token_count": 442
    },
    "14002cd1": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint32_t fcn.14002cd1c(ulong arg1, ulong arg2)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint64_t arg1_00;\n    uint32_t uVar3;\n    \n    uVar1 = fcn.14002d3c0();\n    uVar3 = uVar1 >> 3 & 0x10;\n    uVar2 = uVar3 | 8;\n    if ((uVar1 & 0x200) == 0) {\n        uVar2 = uVar3;\n    }\n    uVar3 = uVar2 | 4;\n    if ((uVar1 & 0x400) == 0) {\n        uVar3 = uVar2;\n    }\n    uVar2 = uVar3 | 2;\n    if ((uVar1 & 0x800) == 0) {\n        uVar2 = uVar3;\n    }\n    uVar3 = uVar2 | 1;\n    if ((uVar1 & 0x1000) == 0) {\n        uVar3 = uVar2;\n    }\n    uVar2 = uVar3 | 0x80000;\n    if ((uVar1 & 0x100) == 0) {\n        uVar2 = uVar3;\n    }\n    uVar3 = uVar1 & 0x6000;\n    if (uVar3 != 0) {\n        if (uVar3 == 0x2000) {\n            uVar2 = uVar2 | 0x100;\n        }\n        else if (uVar3 == 0x4000) {\n            uVar2 = uVar2 | 0x200;\n        }\n        else if (uVar3 == 0x6000) {\n            uVar2 = uVar2 | 0x300;\n        }\n    }\n    uVar1 = uVar1 & 0x8040;\n    if (uVar1 == 0x40) {\n        uVar2 = uVar2 | 0x2000000;\n    }\n    else if (uVar1 == 0x8000) {\n        uVar2 = uVar2 | 0x3000000;\n    }\n    else if (uVar1 == 0x8040) {\n        uVar2 = uVar2 | 0x1000000;\n    }\n    uVar1 = ~(arg2 & 0x308031f) & uVar2 | arg1 & arg2 & 0x308031f;\n    if (uVar1 != uVar2) {\n        uVar3 = (uVar1 & 0x10) << 3;\n        uVar2 = uVar3 | 0x200;\n        if ((uVar1 & 8) == 0) {\n            uVar2 = uVar3;\n        }\n        uVar3 = uVar2 | 0x400;\n        if ((uVar1 & 4) == 0) {\n            uVar3 = uVar2;\n        }\n        uVar2 = uVar3 | 0x800;\n        if ((uVar1 & 2) == 0) {\n            uVar2 = uVar3;\n        }\n        uVar3 = uVar2 | 0x1000;\n        if ((uVar1 & 1) == 0) {\n            uVar3 = uVar2;\n        }\n        uVar2 = uVar3 | 0x100;\n        if ((uVar1 & 0x80000) == 0) {\n            uVar2 = uVar3;\n        }\n        arg1_00 = uVar2;\n        uVar3 = uVar1 & 0x300;\n        if (uVar3 != 0) {\n            if (uVar3 == 0x100) {\n                arg1_00 = uVar2 | 0x2000;\n            }\n            else if (uVar3 == 0x200) {\n                arg1_00 = uVar2 | 0x4000;\n            }\n            else if (uVar3 == 0x300) {\n                arg1_00 = uVar2 | 0x6000;\n            }\n        }\n        uVar1 = uVar1 & 0x3000000;\n        uVar2 = arg1_00;\n        if (uVar1 == 0x1000000) {\n            arg1_00 = uVar2 | 0x8040;\n        }\n        else if (uVar1 == 0x2000000) {\n            arg1_00 = uVar2 | 0x40;\n        }\n        else if (uVar1 == 0x3000000) {\n            arg1_00 = uVar2 | 0x8000;\n        }\n        if ((*0x14003f1c8 == '\\0') || ((arg1_00 & 0x40) == 0)) {\n            arg1_00 = arg1_00 & 0xffffffbf;\n            fcn.14002d3d0(arg1_00);\n        }\n        else {\n            fcn.14002d3d0(arg1_00);\n        }\n        uVar1 = arg1_00 >> 3 & 0x10;\n        uVar2 = uVar1 | 8;\n        if ((arg1_00 & 0x200) == 0) {\n            uVar2 = uVar1;\n        }\n        uVar1 = uVar2 | 4;\n        if ((arg1_00 & 0x400) == 0) {\n            uVar1 = uVar2;\n        }\n        uVar2 = uVar1 | 2;\n        if ((arg1_00 & 0x800) == 0) {\n            uVar2 = uVar1;\n        }\n        uVar1 = uVar2 | 1;\n        if ((arg1_00 & 0x1000) == 0) {\n            uVar1 = uVar2;\n        }\n        uVar2 = uVar1 | 0x80000;\n        if ((arg1_00 & 0x100) == 0) {\n            uVar2 = uVar1;\n        }\n        uVar1 = arg1_00 & 0x6000;\n        if ((arg1_00 & 0x6000) != 0) {\n            if (uVar1 == 0x2000) {\n                uVar2 = uVar2 | 0x100;\n            }\n            else if (uVar1 == 0x4000) {\n                uVar2 = uVar2 | 0x200;\n            }\n            else if (uVar1 == 0x6000) {\n                uVar2 = uVar2 | 0x300;\n            }\n        }\n        uVar1 = arg1_00 & 0x8040;\n        if (uVar1 == 0x40) {\n            uVar2 = uVar2 | 0x2000000;\n        }\n        else if (uVar1 == 0x8000) {\n            uVar2 = uVar2 | 0x3000000;\n        }\n        else if (uVar1 == 0x8040) {\n            uVar2 = uVar2 | 0x1000000;\n        }\n    }\n    return uVar2;\n}\n",
        "token_count": 1614
    },
    "14002dd7": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nuchar (*) [16] fcn.14002dd74(uchar (*arg1) [16], ulong arg2)\n\n{\n    uint16_t uVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    char *pcVar5;\n    char *pcVar6;\n    uchar (*pauVar7) [16];\n    bool bVar8;\n    bool bVar9;\n    char cVar10;\n    char cVar12;\n    char cVar13;\n    char cVar14;\n    uchar auVar11 [16];\n    uchar in_XMM1 [16];\n    uchar auVar15 [16];\n    uint8_t uVar16;\n    \n    pauVar7 = NULL;\n    if (arg2 == 0) {\n        pcVar5 = arg1 & 0xfffffffffffffff0;\n        auVar11 = in_XMM1 & 0x0;\n        cVar10 = SUB161(auVar11 >> 0x40, 0);\n        cVar12 = SUB161(auVar11 >> 0x48, 0);\n        cVar13 = SUB161(auVar11 >> 0x50, 0);\n        cVar14 = SUB161(auVar11 >> 0x58, 0);\n        auVar11 = CONCAT115(-(pcVar5[0xf] == '\\0'), \n                            CONCAT114(-(pcVar5[0xe] == '\\0'), \n                                      CONCAT113(-(pcVar5[0xd] == '\\0'), \n                                                CONCAT112(-(pcVar5[0xc] == '\\0'), \n                                                          CONCAT111(-(pcVar5[0xb] == cVar14), \n                                                                    CONCAT110(-(pcVar5[10] == cVar13), \n                                                                              CONCAT19(-(pcVar5[9] == cVar12), \n                                                                                       CONCAT18(-(pcVar5[8] == cVar10), \n                                                                                                CONCAT17(-(pcVar5[7] ==\n                                                                                                          '\\0'), \n                                                            CONCAT16(-(pcVar5[6] == '\\0'), \n                                                                     CONCAT15(-(pcVar5[5] == '\\0'), \n                                                                              CONCAT14(-(pcVar5[4] == '\\0'), \n                                                                                       CONCAT13(-(pcVar5[3] == '\\0'), \n                                                                                                CONCAT12(-(pcVar5[2] ==\n                                                                                                          '\\0'), \n                                                            CONCAT11(-(pcVar5[1] == '\\0'), -(*pcVar5 == '\\0'))))))))))))\n                                                         ))));\n        uVar2 = (SUB161(auVar11 >> 7, 0) & 1 | (SUB161(auVar11 >> 0xf, 0) & 1) << 1 |\n                 (SUB161(auVar11 >> 0x17, 0) & 1) << 2 | (SUB161(auVar11 >> 0x1f, 0) & 1) << 3 |\n                 (SUB161(auVar11 >> 0x27, 0) & 1) << 4 | (SUB161(auVar11 >> 0x2f, 0) & 1) << 5 |\n                 (SUB161(auVar11 >> 0x37, 0) & 1) << 6 | (SUB161(auVar11 >> 0x3f, 0) & 1) << 7 |\n                 (SUB161(auVar11 >> 0x47, 0) & 1) << 8 | (SUB161(auVar11 >> 0x4f, 0) & 1) << 9 |\n                 (SUB161(auVar11 >> 0x57, 0) & 1) << 10 | (SUB161(auVar11 >> 0x5f, 0) & 1) << 0xb |\n                 (SUB161(auVar11 >> 0x67, 0) & 1) << 0xc | (SUB161(auVar11 >> 0x6f, 0) & 1) << 0xd |\n                 (SUB161(auVar11 >> 0x77, 0) & 1) << 0xe | (-(pcVar5[0xf] == '\\0') >> 7) << 0xf) & -1 << (arg1 & 0xf);\n        pcVar6 = pcVar5;\n        if (uVar2 == 0) {\n            do {\n                pcVar5 = pcVar6 + 0x10;\n                auVar11 = CONCAT115(-(pcVar6[0x1f] == '\\0'), \n                                    CONCAT114(-(pcVar6[0x1e] == '\\0'), \n                                              CONCAT113(-(pcVar6[0x1d] == '\\0'), \n                                                        CONCAT112(-(pcVar6[0x1c] == '\\0'), \n                                                                  CONCAT111(-(pcVar6[0x1b] == cVar14), \n                                                                            CONCAT110(-(pcVar6[0x1a] == cVar13), \n                                                                                      CONCAT19(-(pcVar6[0x19] == cVar12)\n                                                                                               , CONCAT18(-(pcVar6[0x18]\n                                                                                                           == cVar10), \n                                                                                                          CONCAT17(-(\n                                                            pcVar6[0x17] == '\\0'), \n                                                            CONCAT16(-(pcVar6[0x16] == '\\0'), \n                                                                     CONCAT15(-(pcVar6[0x15] == '\\0'), \n                                                                              CONCAT14(-(pcVar6[0x14] == '\\0'), \n                                                                                       CONCAT13(-(pcVar6[0x13] == '\\0')\n                                                                                                , CONCAT12(-(pcVar6[0x12\n                                                            ] == '\\0'), \n                                                            CONCAT11(-(pcVar6[0x11] == '\\0'), -(*pcVar5 == '\\0')))))))))\n                                                            )))))));\n                uVar1 = SUB161(auVar11 >> 7, 0) & 1 | (SUB161(auVar11 >> 0xf, 0) & 1) << 1 |\n                        (SUB161(auVar11 >> 0x17, 0) & 1) << 2 | (SUB161(auVar11 >> 0x1f, 0) & 1) << 3 |\n                        (SUB161(auVar11 >> 0x27, 0) & 1) << 4 | (SUB161(auVar11 >> 0x2f, 0) & 1) << 5 |\n                        (SUB161(auVar11 >> 0x37, 0) & 1) << 6 | (SUB161(auVar11 >> 0x3f, 0) & 1) << 7 |\n                        (SUB161(auVar11 >> 0x47, 0) & 1) << 8 | (SUB161(auVar11 >> 0x4f, 0) & 1) << 9 |\n                        (SUB161(auVar11 >> 0x57, 0) & 1) << 10 | (SUB161(auVar11 >> 0x5f, 0) & 1) << 0xb |\n                        (SUB161(auVar11 >> 0x67, 0) & 1) << 0xc | (SUB161(auVar11 >> 0x6f, 0) & 1) << 0xd |\n                        (SUB161(auVar11 >> 0x77, 0) & 1) << 0xe | (-(pcVar6[0x1f] == '\\0') >> 7) << 0xf;\n                uVar2 = uVar1;\n                pcVar6 = pcVar5;\n            } while (uVar1 == 0);\n        }\n        uVar4 = 0;\n        if (uVar2 != 0) {\n            for (; (uVar2 >> uVar4 & 1) == 0; uVar4 = uVar4 + 1) {\n            }\n        }\n        return pcVar5 + uVar4;\n    }\n    if (*0x14003ef20 < 2) {\n        pcVar5 = arg1 & 0xfffffffffffffff0;\n        auVar15 = pshuflw(in_XMM1, ZEXT416((arg2 & 0xff) << 8 | arg2 & 0xff), 0);\n        uVar2 = -1 << (arg1 & 0xf);\n        auVar11 = CONCAT115(-(pcVar5[0xf] == '\\0'), \n                            CONCAT114(-(pcVar5[0xe] == '\\0'), \n                                      CONCAT113(-(pcVar5[0xd] == '\\0'), \n                                                CONCAT112(-(pcVar5[0xc] == '\\0'), \n                                                          CONCAT111(-(pcVar5[0xb] == '\\0'), \n                                                                    CONCAT110(-(pcVar5[10] == '\\0'), \n                                                                              CONCAT19(-(pcVar5[9] == '\\0'), \n                                                                                       CONCAT18(-(pcVar5[8] == '\\0'), \n                                                                                                CONCAT17(-(pcVar5[7] ==\n                                                                                                          '\\0'), \n                                                            CONCAT16(-(pcVar5[6] == '\\0'), \n                                                                     CONCAT15(-(pcVar5[5] == '\\0'), \n                                                                              CONCAT14(-(pcVar5[4] == '\\0'), \n                                                                                       CONCAT13(-(pcVar5[3] == '\\0'), \n                                                                                                CONCAT12(-(pcVar5[2] ==\n                                                                                                          '\\0'), \n                                                            CONCAT11(-(pcVar5[1] == '\\0'), -(*pcVar5 == '\\0'))))))))))))\n                                                         ))));\n        cVar10 = SUB161(auVar15, 0);\n        cVar12 = SUB161(auVar15 >> 8, 0);\n        cVar13 = SUB161(auVar15 >> 0x10, 0);\n        cVar14 = SUB161(auVar15 >> 0x18, 0);\n        auVar15 = CONCAT115(-(cVar14 == pcVar5[0xf]), \n                            CONCAT114(-(cVar13 == pcVar5[0xe]), \n                                      CONCAT113(-(cVar12 == pcVar5[0xd]), \n                                                CONCAT112(-(cVar10 == pcVar5[0xc]), \n                                                          CONCAT111(-(cVar14 == pcVar5[0xb]), \n                                                                    CONCAT110(-(cVar13 == pcVar5[10]), \n                                                                              CONCAT19(-(cVar12 == pcVar5[9]), \n                                                                                       CONCAT18(-(cVar10 == pcVar5[8]), \n                                                                                                CONCAT17(-(cVar14 ==\n                                                                                                          pcVar5[7]), \n                                                                                                         CONCAT16(-(\n                                                            cVar13 == pcVar5[6]), \n                                                            CONCAT15(-(cVar12 == pcVar5[5]), \n                                                                     CONCAT14(-(cVar10 == pcVar5[4]), \n                                                                              CONCAT13(-(cVar14 == pcVar5[3]), \n                                                                                       CONCAT12(-(cVar13 == pcVar5[2]), \n                                                                                                CONCAT11(-(cVar12 ==\n                                                                                                          pcVar5[1]), \n                                                                                                         -(cVar10 ==\n                                                                                                          *pcVar5)))))))\n                                                            )))))))));\n        uVar4 = (SUB161(auVar15 >> 7, 0) & 1 | (SUB161(auVar15 >> 0xf, 0) & 1) << 1 |\n                 (SUB161(auVar15 >> 0x17, 0) & 1) << 2 | (SUB161(auVar15 >> 0x1f, 0) & 1) << 3 |\n                 (SUB161(auVar15 >> 0x27, 0) & 1) << 4 | (SUB161(auVar15 >> 0x2f, 0) & 1) << 5 |\n                 (SUB161(auVar15 >> 0x37, 0) & 1) << 6 | (SUB161(auVar15 >> 0x3f, 0) & 1) << 7 |\n                 (SUB161(auVar15 >> 0x47, 0) & 1) << 8 | (SUB161(auVar15 >> 0x4f, 0) & 1) << 9 |\n                 (SUB161(auVar15 >> 0x57, 0) & 1) << 10 | (SUB161(auVar15 >> 0x5f, 0) & 1) << 0xb |\n                 (SUB161(auVar15 >> 0x67, 0) & 1) << 0xc | (SUB161(auVar15 >> 0x6f, 0) & 1) << 0xd |\n                 (SUB161(auVar15 >> 0x77, 0) & 1) << 0xe | (-(cVar14 == pcVar5[0xf]) >> 7) << 0xf) & uVar2;\n        uVar2 = (SUB161(auVar11 >> 7, 0) & 1 | (SUB161(auVar11 >> 0xf, 0) & 1) << 1 |\n                 (SUB161(auVar11 >> 0x17, 0) & 1) << 2 | (SUB161(auVar11 >> 0x1f, 0) & 1) << 3 |\n                 (SUB161(auVar11 >> 0x27, 0) & 1) << 4 | (SUB161(auVar11 >> 0x2f, 0) & 1) << 5 |\n                 (SUB161(auVar11 >> 0x37, 0) & 1) << 6 | (SUB161(auVar11 >> 0x3f, 0) & 1) << 7 |\n                 (SUB161(auVar11 >> 0x47, 0) & 1) << 8 | (SUB161(auVar11 >> 0x4f, 0) & 1) << 9 |\n                 (SUB161(auVar11 >> 0x57, 0) & 1) << 10 | (SUB161(auVar11 >> 0x5f, 0) & 1) << 0xb |\n                 (SUB161(auVar11 >> 0x67, 0) & 1) << 0xc | (SUB161(auVar11 >> 0x6f, 0) & 1) << 0xd |\n                 (SUB161(auVar11 >> 0x77, 0) & 1) << 0xe | (-(pcVar5[0xf] == '\\0') >> 7) << 0xf) & uVar2;\n        pcVar6 = pcVar5;\n        if (uVar2 == 0) {\n            do {\n                uVar2 = 0x1f;\n                if (uVar4 != 0) {\n                    for (; uVar4 >> uVar2 == 0; uVar2 = uVar2 - 1) {\n                    }\n                }\n                if (uVar4 != 0) {\n                    pauVar7 = pcVar6 + uVar2;\n                }\n                pcVar5 = pcVar6 + 0x10;\n                auVar11 = ZEXT416(CONCAT13(-(pcVar6[0x13] == '\\0'), \n                                           CONCAT12(-(pcVar6[0x12] == '\\0'), \n                                                    CONCAT11(-(pcVar6[0x11] == '\\0'), -(*pcVar5 == '\\0'))))) &\n                          0xffffffffffffffff;\n                uVar16 = -(SUB161(auVar11 >> 0x78, 0) == pcVar6[0x1f]);\n                auVar15 = CONCAT115(uVar16, CONCAT114(-(SUB161(auVar11 >> 0x70, 0) == pcVar6[0x1e]), \n                                                      CONCAT113(-(SUB161(auVar11 >> 0x68, 0) == pcVar6[0x1d]), \n                                                                CONCAT112(-(SUB161(auVar11 >> 0x60, 0) == pcVar6[0x1c])\n                                                                          , CONCAT111(-(SUB161(auVar11 >> 0x58, 0) ==\n                                                                                       pcVar6[0x1b]), \n                                                                                      CONCAT110(-(SUB161(auVar11 >> 0x50\n                                                                                                         , 0) ==\n                                                                                                 pcVar6[0x1a]), \n                                                                                                CONCAT19(-(SUB161(\n                                                            auVar11 >> 0x48, 0) == pcVar6[0x19]), \n                                                            CONCAT18(-(SUB161(auVar11 >> 0x40, 0) == pcVar6[0x18]), \n                                                                     CONCAT17(-(pcVar6[0x17] == '\\0'), \n                                                                              CONCAT16(-(pcVar6[0x16] == '\\0'), \n                                                                                       CONCAT15(-(pcVar6[0x15] == '\\0')\n                                                                                                , CONCAT14(-(pcVar6[0x14\n                                                            ] == '\\0'), SUB164(auVar11, 0)))))))))))));\n                auVar11 = CONCAT115(-(cVar14 == pcVar6[0x1f]), \n                                    CONCAT114(-(cVar13 == pcVar6[0x1e]), \n                                              CONCAT113(-(cVar12 == pcVar6[0x1d]), \n                                                        CONCAT112(-(cVar10 == pcVar6[0x1c]), \n                                                                  CONCAT111(-(cVar14 == pcVar6[0x1b]), \n                                                                            CONCAT110(-(cVar13 == pcVar6[0x1a]), \n                                                                                      CONCAT19(-(cVar12 == pcVar6[0x19])\n                                                                                               , CONCAT18(-(cVar10 ==\n                                                                                                           pcVar6[0x18])\n                                                                                                          , CONCAT17(-(\n                                                            cVar14 == pcVar6[0x17]), \n                                                            CONCAT16(-(cVar13 == pcVar6[0x16]), \n                                                                     CONCAT15(-(cVar12 == pcVar6[0x15]), \n                                                                              CONCAT14(-(cVar10 == pcVar6[0x14]), \n                                                                                       CONCAT13(-(cVar14 == pcVar6[0x13]\n                                                                                                 ), CONCAT12(-(cVar13 ==\n                                                                                                              pcVar6[\n                                                            0x12]), CONCAT11(-(cVar12 == pcVar6[0x11]), \n                                                                             -(cVar10 == *pcVar5))))))))))))))));\n                uVar1 = SUB161(auVar15 >> 7, 0) & 1 | (SUB161(auVar15 >> 0xf, 0) & 1) << 1 |\n                        (SUB161(auVar15 >> 0x17, 0) & 1) << 2 | (SUB161(auVar15 >> 0x1f, 0) & 1) << 3 |\n                        (SUB161(auVar15 >> 0x27, 0) & 1) << 4 | (SUB161(auVar15 >> 0x2f, 0) & 1) << 5 |\n                        (SUB161(auVar15 >> 0x37, 0) & 1) << 6 | (SUB161(auVar15 >> 0x3f, 0) & 1) << 7 |\n                        (SUB161(auVar15 >> 0x47, 0) & 1) << 8 | (SUB161(auVar15 >> 0x4f, 0) & 1) << 9 |\n                        (SUB161(auVar15 >> 0x57, 0) & 1) << 10 | (SUB161(auVar15 >> 0x5f, 0) & 1) << 0xb |\n                        (SUB161(auVar15 >> 0x67, 0) & 1) << 0xc | (SUB161(auVar15 >> 0x6f, 0) & 1) << 0xd |\n                        (SUB161(auVar15 >> 0x77, 0) & 1) << 0xe | (uVar16 >> 7) << 0xf;\n                uVar2 = uVar1;\n                uVar4 = SUB161(auVar11 >> 7, 0) & 1 | (SUB161(auVar11 >> 0xf, 0) & 1) << 1 |\n                        (SUB161(auVar11 >> 0x17, 0) & 1) << 2 | (SUB161(auVar11 >> 0x1f, 0) & 1) << 3 |\n                        (SUB161(auVar11 >> 0x27, 0) & 1) << 4 | (SUB161(auVar11 >> 0x2f, 0) & 1) << 5 |\n                        (SUB161(auVar11 >> 0x37, 0) & 1) << 6 | (SUB161(auVar11 >> 0x3f, 0) & 1) << 7 |\n                        (SUB161(auVar11 >> 0x47, 0) & 1) << 8 | (SUB161(auVar11 >> 0x4f, 0) & 1) << 9 |\n                        (SUB161(auVar11 >> 0x57, 0) & 1) << 10 | (SUB161(auVar11 >> 0x5f, 0) & 1) << 0xb |\n                        (SUB161(auVar11 >> 0x67, 0) & 1) << 0xc | (SUB161(auVar11 >> 0x6f, 0) & 1) << 0xd |\n                        (SUB161(auVar11 >> 0x77, 0) & 1) << 0xe | (-(cVar14 == pcVar6[0x1f]) >> 7) << 0xf;\n                pcVar6 = pcVar5;\n            } while (uVar1 == 0);\n        }\n        uVar4 = uVar4 & (-uVar2 & uVar2) - 1;\n        uVar2 = 0x1f;\n        if (uVar4 != 0) {\n            for (; uVar4 >> uVar2 == 0; uVar2 = uVar2 - 1) {\n            }\n        }\n        if (uVar4 != 0) {\n            pauVar7 = pcVar5 + uVar2;\n        }\n    }\n    else {\n        while( true ) {\n            bVar8 = false;\n            bVar9 = (arg1 & 0xf) == 0;\n            if (bVar9) break;\n            if ((*arg1)[0] == arg2) {\n                pauVar7 = arg1;\n            }\n            if ((*arg1)[0] == '\\0') {\n                return pauVar7;\n            }\n            arg1 = *arg1 + 1;\n        }\n        while( true ) {\n            iVar3 = pcmpistri(ZEXT416(arg2 & 0xff), *arg1, 0x40);\n            if (bVar8) {\n                pauVar7 = *arg1 + iVar3;\n                bVar9 = pauVar7 == NULL;\n                pcmpistri(ZEXT416(arg2 & 0xff), *arg1, 0x40);\n            }\n            if (bVar9) break;\n            bVar8 = 0xffffffffffffffef < arg1;\n            arg1 = arg1[1];\n            bVar9 = arg1 == NULL;\n        }\n    }\n    return pauVar7;\n}\n",
        "token_count": 5227
    },
    "14002dec": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.14002dec0(uchar (*arg1) [16], uint64_t arg2)\n\n{\n    uint64_t uVar1;\n    uint32_t uVar2;\n    uint64_t uVar3;\n    \n    if (arg2 < 0x10) {\n        uVar2 = arg2;\n        if (7 < uVar2) {\n            **arg1 = 0;\n            *(arg1[-1] + arg2 + 8) = 0;\n            return;\n        }\n        if (3 < uVar2) {\n            **arg1 = 0;\n            *(arg1[-1] + arg2 + 0xc) = 0;\n            return;\n        }\n        if (1 < uVar2) {\n            **arg1 = 0;\n            *(arg1[-1] + arg2 + 0xe) = 0;\n            return;\n        }\n        if (uVar2 != 0) {\n            (*arg1)[0] = 0;\n        }\n        return;\n    }\n    if ((arg1 & 0xf) != 0) {\n        **arg1 = 0;\n        *(*arg1 + 8) = 0;\n        uVar1 = -arg1 & 0xf;\n        arg1 = *arg1 + uVar1;\n        arg2 = arg2 - uVar1;\n        if (arg2 < 0x10) {\n            *(arg1 + (arg2 - 0x10)) = 0;\n            *(arg1 + (arg2 - 8)) = 0;\n            return;\n        }\n    }\n    *arg1 = ZEXT816(0);\n    if ((arg2 & 0x10) != 0) {\n        arg1 = arg1[1];\n    }\n    while (uVar1 = arg2 - 0x20,  0x1f < arg2) {\n        *arg1 = ZEXT816(0);\n        arg1[1] = ZEXT816(0);\n        arg1 = arg1[2];\n        arg2 = uVar1;\n    }\n    uVar3 = uVar1 & 0xf;\n    if ((uVar1 & 0xf) == 0) {\n        return;\n    }\n    *(arg1[-1] + uVar3) = 0;\n    *(arg1[-1] + uVar3 + 8) = 0;\n    return;\n}\n",
        "token_count": 528
    },
    "14000b57": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nuint fcn.14000b570(int64_t *arg1, ulong arg2)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    int32_t *piVar3;\n    uint uVar4;\n    ulong in_R8;\n    \n    iVar2 = fcn.140023998(arg2, 0x140037e98);\n    *arg1 = iVar2;\n    if (iVar2 != 0) {\n        return 0;\n    }\n    piVar3 = fcn.1400142cc();\n    iVar1 = *piVar3;\n    if (iVar1 == 2) {\n        uVar4 = 0x80070002;\n    }\n    else if (iVar1 == 5) {\n        uVar4 = 0x8007001e;\n    }\n    else if (iVar1 == 9) {\n        uVar4 = 0x80070006;\n    }\n    else {\n        if (iVar1 != 0xc) {\n            if (iVar1 == 0xd) {\n                uVar4 = 0x80070005;\n                goto code_r0x00014000b608;\n            }\n            if (iVar1 == 0x11) {\n                uVar4 = 0x80070050;\n                goto code_r0x00014000b608;\n            }\n            if (iVar1 != 0x16) {\n                if (iVar1 == 0x1c) {\n                    uVar4 = 0x80070027;\n                }\n                else {\n                    uVar4 = 0x80004005;\n                }\n                goto code_r0x00014000b608;\n            }\n        }\n        uVar4 = 0x8007000e;\n    }\ncode_r0x00014000b608:\n    if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n        fcn.14000b078(*(*0x14003e208 + 0x10), 0x17, in_R8, arg2);\n    }\n    return uVar4;\n}\n",
        "token_count": 472
    },
    "14000201": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.140002010(int64_t arg1, uchar *arg2, uchar *arg3, uint64_t arg4)\n\n{\n    int32_t *piVar1;\n    char cVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    ulong uVar5;\n    ulong uVar6;\n    int64_t iVar7;\n    uint64_t uVar8;\n    ushort *arg2_00;\n    uint64_t uVar9;\n    int64_t iVar10;\n    ulong *arg3_00;\n    uchar *arg4_00;\n    uchar extraout_XMM0 [16];\n    uchar extraout_XMM0_00 [16];\n    uchar extraout_XMM0_01 [16];\n    uchar extraout_XMM0_02 [16];\n    uchar extraout_XMM0_03 [16];\n    int64_t in_stack_00000028;\n    uchar auStack1032 [32];\n    ushort *puStack1000;\n    ulong *puStack992;\n    ulong *puStack984;\n    int64_t *piStack976;\n    uint *puStack968;\n    uchar *puStack960;\n    ulong *puStack952;\n    ushort **ppuStack944;\n    uchar **ppuStack936;\n    uchar **ppuStack928;\n    uchar uStack920;\n    uchar uStack919;\n    uint uStack916;\n    int64_t iStack912;\n    int64_t iStack904;\n    uchar *puStack896;\n    uchar *puStack888;\n    ulong uStack880;\n    ulong uStack872;\n    ushort *puStack864;\n    ulong uStack856;\n    int64_t iStack848;\n    ulong uStack840;\n    ulong uStack832;\n    uchar auStack824 [16];\n    uchar auStack808 [16];\n    ushort uStack792;\n    unkbyte6 Stack790;\n    uint uStack776;\n    uint uStack772;\n    uint uStack768;\n    uint uStack764;\n    ushort uStack760;\n    unkbyte6 Stack758;\n    uint uStack744;\n    uint uStack740;\n    uint uStack736;\n    uint uStack732;\n    uchar auStack728 [16];\n    uchar auStack712 [16];\n    uchar auStack696 [16];\n    uchar auStack680 [16];\n    uchar auStack664 [16];\n    uchar auStack648 [16];\n    uchar auStack632 [144];\n    uchar auStack488 [144];\n    int16_t aiStack344 [140];\n    uint64_t uStack64;\n    \n    uStack64 = *0x14003ef38 ^ auStack1032;\n    iStack912 = -1;\n    uVar8 = 0;\n    uStack880 = 0;\n    uStack872 = 0;\n    arg3_00 = &uStack872;\n    arg4_00 = arg3;\n    iStack904 = arg1;\n    puStack896 = arg2;\n    puStack888 = arg3;\n    uVar3 = fcn.1400040e8(&iStack912, &uStack880, arg3_00, arg3);\n    if (-1 < uVar3) {\n        uStack776 = *0x1400382f0;\n        uStack772 = *0x1400382f4;\n        uStack768 = *0x1400382f8;\n        uStack764 = *0x1400382fc;\n        uStack792 = 0;\n        uStack744 = *0x1400382f0;\n        uStack740 = *0x1400382f4;\n        uStack736 = *0x1400382f8;\n        uStack732 = *0x1400382fc;\n        uStack760 = 0;\n        fcn.140004934(&uStack792, arg3);\n        auStack728 = extraout_XMM0 & 0x0;\n        auStack712 = auStack728;\n        auStack696 = auStack728;\n        uVar5 = fcn.140004934(&uStack792, L\"/stub\");\n        uVar6 = fcn.1400043e4(&uStack880, auStack728);\n        fcn.140004934(uVar5, uVar6);\n        auStack680 = extraout_XMM0_00 & 0x0;\n        auStack664 = auStack680;\n        auStack648 = auStack680;\n        uVar5 = fcn.140004934(&uStack792, L\"/payload\");\n        uVar6 = fcn.1400043e4(&uStack872, auStack680);\n        fcn.140004934(uVar5, uVar6);\n        fcn.140004934(&uStack792, L\"/program\");\n        auStack824 = extraout_XMM0_01;\n        for (uVar9 = uVar8; uVar9 < arg4; uVar9 = uVar9 + 1) {\n            fcn.140004934(&uStack792, *(in_stack_00000028 + uVar9 * 8));\n            auStack824 = extraout_XMM0_02;\n        }\n        auStack824 = auStack824 & 0x0;\n        if (*0x140040768 != 0) {\n            iVar4 = *(*0x140040768 + 8);\n            while (iVar4 != 0) {\n                LOCK();\n                piVar1 = *0x140040768 + 8;\n                if (iVar4 == *piVar1) {\n                    *piVar1 = iVar4 + 1;\n                    iVar10 = *0x140040760;\n                    auStack824 = CONCAT88(*0x140040768, *0x140040760);\n                    if ((((*0x140040760 != 0) && (5 < *0x14003e240)) && ((*0x14003e250 & 0x200000000000) != 0)) &&\n                       ((*0x14003e258 & 0x200000000000) == *0x14003e258)) {\n                        puStack864 = &uStack760;\n                        if (7 < CONCAT44(uStack732, uStack736)) {\n                            puStack864 = CONCAT62(Stack758, uStack760);\n                        }\n                        iVar7 = *0x140040760;\n                        puStack896 = arg3;\n                        puStack888 = arg2;\n                        uStack856 = fcn.1400055bc(*0x140040760, auStack632);\n                        uStack920 = *(iVar10 + 0x1c);\n                        uStack916 = fcn.1400056dc();\n                        iStack848 = iVar10 + 0x24;\n                        uStack840 = 0x140037580;\n                        uStack832 = *(iVar10 + 0x10);\n                        uStack919 = fcn.140008428();\n                        ppuStack928 = &puStack888;\n                        ppuStack936 = &puStack896;\n                        ppuStack944 = &puStack864;\n                        puStack952 = &uStack856;\n                        puStack960 = &uStack920;\n                        puStack968 = &uStack916;\n                        piStack976 = &iStack848;\n                        puStack984 = &uStack840;\n                        puStack992 = &uStack832;\n                        puStack1000 = &uStack919;\n                        fcn.140001090(iVar7, 0x1400393fe);\n                    }\n                    break;\n                }\n                iVar4 = *piVar1;\n            }\n        }\n        fcn.1400030c4(auStack824);\n        iStack904 = 0;\n        auStack808 = extraout_XMM0_03 & 0x0;\n        if (*0x140040768 != 0) {\n            iVar4 = *(*0x140040768 + 8);\n            while (iVar4 != 0) {\n                LOCK();\n                piVar1 = *0x140040768 + 8;\n                if (iVar4 == *piVar1) {\n                    *piVar1 = iVar4 + 1;\n                    auStack808 = CONCAT88(*0x140040768, *0x140040760);\n                    if (*0x140040760 != 0) {\n                        iVar10 = fcn.1400055bc(*0x140040760, auStack488);\n                        goto code_r0x000140002417;\n                    }\n                    break;\n                }\n                iVar4 = *piVar1;\n            }\n        }\n        goto code_r0x000140002443;\n    }\n    if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n        fcn.140001efc(*(*0x14003e208 + 0x10), 10, 0x140037468, uVar3);\n    }\n    goto code_r0x0001400025d9;\n    while (uVar8 = uVar8 + 1,  uVar8 < 0x81) {\ncode_r0x000140002417:\n        cVar2 = *(uVar8 + iVar10);\n        aiStack344[uVar8] = cVar2;\n        if (cVar2 == 0) {\n            fcn.14000bddc(cVar2, aiStack344);\n            break;\n        }\n    }\ncode_r0x000140002443:\n    fcn.1400030c4(auStack808);\n    puStack1000 = &uStack792;\n    if (7 < CONCAT44(uStack764, uStack768)) {\n        puStack1000 = CONCAT62(Stack790, uStack792);\n    }\n    arg2_00 = &uStack760;\n    if (7 < CONCAT44(uStack732, uStack736)) {\n        arg2_00 = CONCAT62(Stack758, uStack760);\n    }\n    puStack960 = arg2;\n    uVar3 = fcn.14000c70c(&iStack904, arg2_00, arg3_00, arg4_00);\n    if (-1 < uVar3) {\n        iVar10 = iStack912;\n        if (iStack912 != -1) {\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(iStack912);\n            iVar10 = -1;\n        }\n        iVar7 = iStack904;\n        fcn.14000b280(iStack904, 0xffffffff);\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetExitCodeProcess)(iVar7, arg1);\n        if ((iVar4 == 0) && (uVar3 = fcn.14000e908(),  uVar3 < 0)) {\n            if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n                fcn.140001efc(*(*0x14003e208 + 0x10), 0xc, 0x140037468, uVar3);\n            }\n            if (iVar7 != 0) {\n                (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar7);\n            }\n            fcn.140002628(&uStack792);\n            if (iVar10 != -1) {\n                (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar10);\n            }\n        }\n        else {\n            if (iVar7 != 0) {\n                (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar7);\n            }\n            fcn.140002628(&uStack792);\n            if (iVar10 != -1) {\n                (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar10);\n            }\n        }\n        goto code_r0x0001400025ec;\n    }\n    if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n        fcn.140001efc(*(*0x14003e208 + 0x10), 0xb, 0x140037468, uVar3);\n    }\n    if (iStack904 != 0) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)();\n    }\n    fcn.140002628(&uStack792);\ncode_r0x0001400025d9:\n    if (iStack912 != -1) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)();\n    }\ncode_r0x0001400025ec:\n    fcn.140018790(uStack64 ^ auStack1032);\n    return;\n}\n",
        "token_count": 2733
    },
    "140003b1": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_8h\n// WARNING: Variable defined which should be unmapped: var_bp_18h\n// WARNING: Variable defined which should be unmapped: var_28h\n// WARNING: Variable defined which should be unmapped: var_30h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.140003b14(ulong arg1, uint64_t *arg2)\n\n{\n    uint8_t uVar1;\n    uint64_t uVar2;\n    uint64_t arg1_00;\n    int32_t iVar3;\n    uint32_t uVar4;\n    ulong noname_1;\n    uint64_t arg3;\n    uint64_t uVar5;\n    uint64_t arg4;\n    uint64_t uVar6;\n    uint64_t arg2_00;\n    uchar auStack184 [32];\n    uint64_t uStack152;\n    uint64_t uStack136;\n    uint64_t uStack128;\n    ulong uStack120;\n    uint64_t uStack112;\n    uint64_t *puStack104;\n    uchar auStack96 [8];\n    ulong lpFileSize;\n    ulong var_48h;\n    ulong var_40h;\n    uint64_t var_38h;\n    ulong var_30h;\n    ulong var_28h;\n    ulong var_bp_18h;\n    ulong var_8h;\n    \n    var_38h = *0x14003ef38 ^ auStack184;\n    uVar5 = 0;\n    uStack136 = 0;\n    uStack120 = arg1;\n    puStack104 = arg2;\n    iVar3 = (*_sym.imp.KERNEL32.dll_GetFileSizeEx)();\n    uVar6 = uStack136;\n    if (iVar3 == 0) {\n        uVar4 = fcn.14000e908();\n        if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n            fcn.140001efc(*(*0x14003e208 + 0x10), 0x15, 0x140037ab8, uVar4);\n        }\n        uVar6 = uVar5;\n        if (-1 < uVar4) goto code_r0x000140003bd0;\n        if ((*0x14003e208 == 0x14003e208) || ((*(*0x14003e208 + 0x1c) & 1) == 0)) goto code_r0x000140003fa2;\n        noname_1 = 0xb;\ncode_r0x000140003bb2:\n        fcn.140001efc(*(*0x14003e208 + 0x10), noname_1, 0x1400374d8, uVar4);\n    }\n    else {\ncode_r0x000140003bd0:\n        iVar3 = (*_sym.imp.KERNEL32.dll_SetFilePointerEx)(arg1, 0, 0);\n        if (iVar3 == 0) {\n            uVar4 = fcn.14000e908();\n            if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n                fcn.140001efc(*(*0x14003e208 + 0x10), 0x14, 0x140037ab8, uVar4);\n            }\n            if (uVar4 < 0) {\n                if ((*0x14003e208 == 0x14003e208) || ((*(*0x14003e208 + 0x1c) & 1) == 0)) goto code_r0x000140003fa2;\n                noname_1 = 0xc;\n                goto code_r0x000140003bb2;\n            }\n        }\n        uStack128 = 0;\n        uVar4 = fcn.1400107a0(&uStack128);\n        if (uVar4 < 0) {\n            if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n                fcn.140001efc(*(*0x14003e208 + 0x10), 0xd, 0x1400374d8, uVar4);\n            }\n        }\n        else {\n            uStack136 = 0;\n            arg2_00 = 0x40000;\n            if (uVar6 < 0x40000) {\n                arg2_00 = uVar6 & 0xffffffff;\n            }\n            uStack112 = arg2_00;\n            uVar4 = fcn.140004740(&uStack136, arg2_00);\n            arg1_00 = uStack128;\n            arg3 = uStack136;\n            uVar2 = arg2_00;\n            if (-1 < uVar4) {\n                while (uVar6 != 0) {\n                    arg4 = arg2_00;\n                    if (uVar6 < uVar2) {\n                        arg4 = uVar6 & 0xffffffff;\n                    }\n                    uStack136 = arg4;\n                    uVar4 = fcn.14000b4c0(uStack120, &uStack136, arg3);\n                    uVar2 = uStack136;\n                    if (uVar4 < 0) {\n                        if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n                            fcn.140001efc(*(*0x14003e208 + 0x10), 0xf, 0x1400374d8, uVar4);\n                        }\n                        if (arg3 != 0) {\n                            fcn.1400187b4(arg3);\n                        }\n                        if (arg1_00 != 0) {\n                            (**0x140031a58)(arg1_00);\n                        }\n                        goto code_r0x000140003fa2;\n                    }\n                    if (uStack136 != arg4) {\n                        if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n                            uStack152 = uStack136;\n                            fcn.1400034f0(*(*0x14003e208 + 0x10), 0x10, 0x1400374d8, arg4);\n                        }\n                        if (arg3 != 0) {\n                            fcn.1400187b4(arg3);\n                        }\n                        if (arg1_00 != 0) {\n                            (**0x140031a58)(arg1_00);\n                        }\n                        goto code_r0x000140003fa2;\n                    }\n                    (**0x140031a58)(arg1_00, uStack136, arg3);\n                    uVar6 = uVar6 - uVar2;\n                    arg2 = puStack104;\n                    uVar2 = uStack112;\n                }\n                if (arg3 != 0) {\n                    fcn.1400187b4(arg3);\n                    arg3 = uVar5;\n                }\n                (**0x140031a58)(arg1_00);\n                uStack128 = 0x20;\n                _auStack96 = ZEXT816(0);\n                _var_48h = ZEXT816(0);\n                fcn.14000e0bc(arg1_00, &uStack128, auStack96);\n                uStack136 = 0;\n                uVar4 = fcn.140004770(&uStack136);\n                if (uVar4 < 0) {\n                    if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n                        fcn.140001efc(*(*0x14003e208 + 0x10), 0x11, 0x1400374d8, uVar4);\n                    }\n                    if (uStack136 != 0) {\n                        fcn.1400187b4(uStack136);\n                    }\n                    if (arg3 != 0) {\n                        fcn.1400187b4(arg3);\n                    }\n                    (**0x140031a58)(arg1_00);\n                }\n                else {\n                    if (uStack128 != 0) {\n                        do {\n                            uVar1 = auStack96[uVar5];\n                            *(uStack136 + uVar5 * 4) = L\"0123456789abcdef\"[uVar1 >> 4];\n                            *(uStack136 + 2 + uVar5 * 4) = L\"0123456789abcdef\"[uVar1 & 0xf];\n                            uVar5 = uVar5 + 1;\n                        } while (uVar5 < uStack128);\n                    }\n                    *(uStack136 + 0x80) = 0;\n                    *arg2 = uStack136;\n                    if (arg3 != 0) {\n                        fcn.1400187b4(arg3);\n                    }\n                    (**0x140031a58)(arg1_00);\n                }\n                goto code_r0x000140003fa2;\n            }\n            if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n                fcn.140001efc(*(*0x14003e208 + 0x10), 0xe, 0x1400374d8, uVar4);\n            }\n            if (uStack136 != 0) {\n                fcn.1400187b4(uStack136);\n            }\n        }\n        if (uStack128 != 0) {\n            (**0x140031a58)();\n        }\n    }\ncode_r0x000140003fa2:\n    fcn.140018790(var_38h ^ auStack184);\n    return;\n}\n",
        "token_count": 2236
    },
    "140003fc": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t fcn.140003fcc(ulong *arg1, ulong arg2)\n\n{\n    int64_t arg1_00;\n    uint32_t uVar1;\n    int64_t iStackX8;\n    uchar auStack72 [12];\n    uint uStack60;\n    uchar auStack56 [16];\n    uchar auStack40 [16];\n    uint uStack24;\n    \n    *arg1 = 0;\n    iStackX8 = 0;\n    uVar1 = fcn.14000e128(&iStackX8, arg2);\n    arg1_00 = iStackX8;\n    if (uVar1 < 0) {\n        if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n            fcn.140003700(*(*0x14003e208 + 0x10), arg2, 0x14003e208, uVar1);\n        }\n        if (iStackX8 != 0) {\n            fcn.1400187b4(iStackX8);\n        }\n    }\n    else {\n        uStack24 = 0;\n        _auStack72 = ZEXT816(0);\n        auStack56 = ZEXT816(0);\n        auStack40 = ZEXT816(0);\n        uVar1 = fcn.14000e25c(auStack72, iStackX8);\n        if (uVar1 < 0) {\n            if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n                fcn.140001efc(*(*0x14003e208 + 0x10), 0x13, 0x1400374d8, uVar1);\n            }\n            if (arg1_00 != 0) {\n                fcn.1400187b4(arg1_00);\n            }\n        }\n        else {\n            *arg1 = CONCAT44(auStack72._8_4_, uStack60);\n            if (arg1_00 != 0) {\n                fcn.1400187b4(arg1_00);\n            }\n            uVar1 = 0;\n        }\n    }\n    return uVar1;\n}\n",
        "token_count": 529
    },
    "1400040e": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_9h\n// WARNING: Variable defined which should be unmapped: var_19h\n// WARNING: Variable defined which should be unmapped: var_29h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.1400040e8(int64_t *arg1, int64_t *arg2, ulong arg3, ulong arg4)\n\n{\n    int64_t arg1_00;\n    uint32_t uVar1;\n    ulong arg4_00;\n    ulong uVar2;\n    ulong var_17h;\n    uchar auStack248 [32];\n    ulong uStack216;\n    ulong uStack208;\n    int64_t iStack184;\n    int64_t iStack176;\n    uchar auStack168 [16];\n    uchar auStack152 [16];\n    uchar auStack136 [16];\n    uchar auStack120 [16];\n    uchar auStack104 [7];\n    ulong var_59h;\n    ulong var_51h;\n    ulong var_49h;\n    uchar auStack72 [7];\n    ulong var_39h;\n    ulong var_29h;\n    ulong var_19h;\n    ulong var_9h;\n    \n    _auStack72 = *0x14003ef38 ^ auStack248;\n    *arg1 = -1;\n    iStack184 = 0;\n    *arg2 = 0x1000145880004;\n    uVar1 = fcn.14000c554(&iStack184, 0);\n    arg1_00 = iStack184;\n    if (uVar1 < 0) {\n        if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n            fcn.140001efc(*(*0x14003e208 + 0x10), 0x15, 0x1400374d8, uVar1);\n            arg1_00 = iStack184;\n        }\n    }\n    else {\n        uVar1 = fcn.140003fcc(arg3, iStack184);\n        if (-1 < uVar1) {\n            if (arg1_00 != 0) {\n                fcn.1400187b4(arg1_00);\n            }\n            iStack184 = -1;\n            uStack216 = CONCAT44(uStack216._4_4_, 3);\n            uVar1 = fcn.14000b340(&iStack184, arg4, 0x80000000, 5);\n            if (uVar1 < 0) {\n                if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n                    uVar2 = 0x18;\ncode_r0x000140004264:\n                    fcn.140001efc(*(*0x14003e208 + 0x10), uVar2, 0x1400374d8, uVar1);\n                }\n            }\n            else {\n                iStack176 = 0;\n                uVar1 = fcn.140003fcc(&iStack176, arg4);\n                if (-1 < uVar1) {\n                    if (iStack176 == *arg2) {\n                        if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 4) != 0)) {\n                            auStack168 = ZEXT816(0);\n                            auStack152 = ZEXT816(0);\n                            auStack136 = ZEXT816(0);\n                            uStack216 = fcn.1400043e4(arg2, auStack168);\n                            fcn.140003534(*(*0x14003e208 + 0x10), 0x1a, 0x1400374d8, arg4);\n                        }\n                        *arg1 = iStack184;\n                    }\n                    else {\n                        if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n                            auStack168 = ZEXT816(0);\n                            auStack152 = ZEXT816(0);\n                            auStack136 = ZEXT816(0);\n                            auStack120 = ZEXT816(0);\n                            _auStack104 = ZEXT816(0);\n                            unique0x100001c2 = ZEXT816(0);\n                            uVar2 = fcn.1400043e4(&iStack176, auStack168);\n                            arg4_00 = fcn.1400043e4(arg2, auStack120);\n                            uStack216 = uVar2;\n                            uStack208 = arg4;\n                            fcn.1400035f0(*(*0x14003e208 + 0x10), 0x1b, 0x1400374d8, arg4_00);\n                        }\n                        if (iStack184 != -1) {\n                            (*_sym.imp.KERNEL32.dll_CloseHandle)();\n                        }\n                    }\n                    goto code_r0x0001400043c6;\n                }\n                if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n                    uVar2 = 0x19;\n                    goto code_r0x000140004264;\n                }\n            }\n            if (iStack184 != -1) {\n                (*_sym.imp.KERNEL32.dll_CloseHandle)();\n            }\n            goto code_r0x0001400043c6;\n        }\n        if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n            fcn.140001efc(*(*0x14003e208 + 0x10), 0x16, 0x1400374d8, uVar1);\n        }\n    }\n    if (arg1_00 != 0) {\n        fcn.1400187b4(arg1_00);\n    }\n    if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n        fcn.140001efc(*(*0x14003e208 + 0x10), 0x17, 0x1400374d8, uVar1);\n    }\ncode_r0x0001400043c6:\n    fcn.140018790(_auStack72 ^ auStack248);\n    return;\n}\n",
        "token_count": 1482
    },
    "140005e9": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.140005e9c(uint32_t **arg1)\n\n{\n    uint32_t **arg1_00;\n    uint32_t *puVar1;\n    char cVar2;\n    uint32_t uVar3;\n    uint32_t *puVar4;\n    int64_t iVar5;\n    ulong in_RDX;\n    ulong arg2;\n    uint64_t arg4;\n    uchar auStack424 [32];\n    uint32_t **ppuStack392;\n    uchar *puStack384;\n    uint32_t **ppuStack376;\n    uint32_t **ppuStack368;\n    uint32_t **ppuStack360;\n    uchar *puStack352;\n    uint32_t **ppuStack344;\n    ulong *puStack336;\n    uint32_t **ppuStack328;\n    uint32_t **ppuStack320;\n    uint32_t **ppuStack312;\n    uint32_t **ppuStack304;\n    uint32_t **ppuStack296;\n    uint32_t **ppuStack288;\n    uchar uStack280;\n    uchar auStack279 [3];\n    uint32_t uStack276;\n    uint32_t *puStack272;\n    uint32_t *puStack264;\n    uint32_t *puStack256;\n    uint32_t auStack248 [2];\n    uint32_t *puStack240;\n    uint32_t *puStack232;\n    ulong uStack224;\n    uint32_t *puStack216;\n    uint32_t *puStack208;\n    uint32_t *puStack200;\n    uint32_t *puStack192;\n    uint32_t *puStack184;\n    uint32_t *puStack176;\n    uchar auStack168 [144];\n    uint64_t uStack24;\n    \n    uStack24 = *0x14003ef38 ^ auStack424;\n    puStack256 = NULL;\n    auStack248[0] = 0;\n    puStack272 = NULL;\n    uVar3 = fcn.14000f180(&puStack272, in_RDX, L\"SOFTWARE\\\\Microsoft\\\\MpSigStub\", 1);\n    puVar4 = puStack272;\n    if (uVar3 < 0) {\n        arg2 = 0x14003e208;\n        if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n            arg2 = 10;\n            fcn.140001efc(*(*0x14003e208 + 0x10), 10, 0x1400377f8, uVar3);\n            puVar4 = puStack272;\n        }\njoined_r0x00014000614e:\n        if (puVar4 != NULL) {\n            (*_sym.imp.ADVAPI32.dll_RegCloseKey)();\n        }\n    }\n    else {\n        ppuStack392 = &puStack256;\n        uStack276 = 0;\n        puStack264 = 0x8;\n        uVar3 = fcn.14000f468(puStack272, 0x1400377b8, &uStack276, &puStack264);\n        arg4 = uVar3;\n        if (uVar3 == 0x800700ea) {\ncode_r0x0001400060a5:\n            arg4 = 0x8007065d;\ncode_r0x0001400060ba:\n            arg2 = 0x14003e208;\n            if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n                arg2 = 0xb;\n                fcn.140001efc(*(*0x14003e208 + 0x10), 0xb, 0x1400377f8, arg4);\n            }\n            if (puVar4 != NULL) {\n                (*_sym.imp.ADVAPI32.dll_RegCloseKey)();\n            }\n            if (arg4 < 0) goto code_r0x000140005f3a;\n        }\n        else {\n            if (uVar3 < 0) goto code_r0x0001400060ba;\n            if (uStack276 != 0xb) goto code_r0x0001400060a5;\n            if (uVar3 < 0) goto code_r0x0001400060ba;\n            arg2 = 0x1400377d8;\n            uVar3 = fcn.14000f5bc(puVar4, 0x1400377d8, auStack248);\n            if (uVar3 < 0) {\n                arg2 = 0x14003e208;\n                if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n                    arg2 = 0xc;\n                    fcn.140001efc(*(*0x14003e208 + 0x10), 0xc, 0x1400377f8, uVar3);\n                }\n                goto joined_r0x00014000614e;\n            }\n            if (puVar4 != NULL) {\n                (*_sym.imp.ADVAPI32.dll_RegCloseKey)();\n            }\n        }\n        puVar4 = fcn.14000a924();\n        if (puStack256 < puVar4) {\n            iVar5 = fcn.14000a924();\n            puVar4 = iVar5 - puStack256;\n            goto code_r0x000140005f3d;\n        }\n    }\ncode_r0x000140005f3a:\n    puVar4 = NULL;\ncode_r0x000140005f3d:\n    arg1_00 = arg1 + 1;\n    puVar1 = *arg1_00;\n    uVar3 = **arg1;\n    if (uVar3 == puVar1[8]) {\n        if (((5 < *0x14003e240) && (arg2 = 0x400000000000,  (*0x14003e250 & 0x400000000000) != 0)) &&\n           ((*0x14003e258 & 0x400000000000) == *0x14003e258)) {\n            puStack200 = puStack256;\n            puStack264 = puStack264 & 0xffffffff00000000 | auStack248[0];\n            uStack276 = puVar1[6];\n            puStack208 = puVar1 + 9;\n            puStack216 = *(puVar1 + 2);\n            uStack224 = 0x140037580;\n            puStack232 = *(puVar1 + 4);\n            auStack279[0] = *(puVar1 + 7);\n            puStack240 = arg1[4];\n            puStack184 = arg1[3];\n            puStack272 = puStack272 & 0xffffffff00000000 | uVar3;\n            puStack192 = puVar4;\n            uStack280 = fcn.140008428();\n            puVar4 = *arg1_00;\n            puStack176 = fcn.1400055bc(puVar4, auStack168);\n            arg2 = 0x1400396d0;\n            ppuStack288 = &puStack192;\n            ppuStack296 = &puStack200;\n            ppuStack304 = &puStack264;\n            ppuStack312 = &uStack276;\n            ppuStack320 = &puStack208;\n            ppuStack328 = &puStack216;\n            puStack336 = &uStack224;\n            ppuStack344 = &puStack232;\n            puStack352 = auStack279;\n            ppuStack360 = &puStack240;\n            ppuStack368 = &puStack184;\n            ppuStack376 = &puStack272;\n            puStack384 = &uStack280;\n            ppuStack392 = &puStack176;\n            fcn.1400018c8(puVar4, 0x1400396d0);\n        }\n    }\n    else if (((5 < *0x14003e240) && (arg2 = 0x400000000000,  (*0x14003e250 & 0x400000000000) != 0)) &&\n            ((*0x14003e258 & 0x400000000000) == *0x14003e258)) {\n        puStack240 = puStack256;\n        uStack276 = auStack248[0];\n        puStack232 = puVar1 + 9;\n        uStack224 = 0x140037580;\n        puStack216 = *(puVar1 + 4);\n        uStack280 = *(puVar1 + 7);\n        puStack208 = arg1[4];\n        puStack200 = arg1[3];\n        puStack264 = puStack264 & 0xffffffff00000000 | uVar3;\n        puStack272 = puVar4;\n        auStack279[0] = fcn.140008428();\n        puVar4 = *arg1_00;\n        puStack192 = fcn.1400055bc(puVar4, auStack168);\n        arg2 = 0x140039797;\n        ppuStack304 = &puStack272;\n        ppuStack312 = &puStack240;\n        ppuStack320 = &uStack276;\n        ppuStack328 = &puStack232;\n        puStack336 = &uStack224;\n        ppuStack344 = &puStack216;\n        puStack352 = &uStack280;\n        ppuStack360 = &puStack208;\n        ppuStack368 = &puStack200;\n        ppuStack376 = &puStack264;\n        puStack384 = auStack279;\n        ppuStack392 = &puStack192;\n        fcn.140001688(puVar4, 0x140039797);\n    }\n    cVar2 = fcn.140008428();\n    if (cVar2 != '\\0') {\n        fcn.14000a984(**arg1, arg2);\n    }\n    if (arg1[4] != NULL) {\n        fcn.1400187b4(arg1[4]);\n    }\n    if (arg1[3] != NULL) {\n        fcn.1400187b4(arg1[3]);\n    }\n    fcn.1400030c4(arg1_00);\n    fcn.140018790(uStack24 ^ auStack424);\n    return;\n}\n",
        "token_count": 2306
    },
    "14000831": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint32_t fcn.140008310(int64_t *arg1, int64_t *arg2, ulong arg3)\n\n{\n    int64_t iVar1;\n    uint32_t uVar2;\n    int64_t iVar3;\n    int64_t iStackX8;\n    uint32_t uStackX16;\n    uint32_t uStackX20;\n    \n    *arg2 = 0;\n    iStackX8 = 0;\n    uVar2 = fcn.140006688(&iStackX8, *(arg1 + 1), arg3);\n    iVar1 = iStackX8;\n    if (uVar2 < 0) {\n        if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n            fcn.140001efc(*(*0x14003e208 + 0x10), 0x20, 0x1400376d8, uVar2);\n        }\n        if (iStackX8 != 0) {\n            (*_sym.imp.KERNEL32.dll_CloseHandle)();\n        }\n    }\n    else {\n        iVar3 = fcn.140006c28(iStackX8);\n        uStackX16 = *arg1;\n        uStackX20 = *(arg1 + 4);\n        iStackX8 = *arg1;\n        if (*arg1 == iVar3) {\n            *arg2 = iVar1;\n            uVar2 = 0;\n        }\n        else {\n            if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n                fcn.140006628(*(*0x14003e208 + 0x10), *(arg1 + 1), uStackX16, iStackX8);\n                iVar3 = iStackX8;\n            }\n            iStackX8 = iVar3;\n            if (iVar1 != 0) {\n                (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar1);\n            }\n            uVar2 = 0x80070057;\n        }\n    }\n    return uVar2;\n}\n",
        "token_count": 490
    },
    "14000865": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_9h\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Variable defined which should be unmapped: var_11h\n// WARNING: Variable defined which should be unmapped: var_19h\n// WARNING: Could not reconcile some variable overlaps\n\nint64_t * fcn.140008654(int64_t *arg1, ulong arg2, int16_t *arg3)\n\n{\n    int16_t iVar1;\n    int16_t iVar2;\n    code *pcVar3;\n    ulong lpFileName;\n    int16_t *piVar4;\n    int64_t *piVar5;\n    uint64_t arg1_00;\n    uint32_t uVar6;\n    int64_t noname_2;\n    int64_t iVar7;\n    ulong var_fh;\n    ulong var_17h;\n    uchar auStackX24 [7];\n    ulong var_27h;\n    ulong var_7fh;\n    int64_t iStack120;\n    int64_t iStack112;\n    ulong uStack104;\n    ulong uStack96;\n    uchar *puStack88;\n    uchar uStack80;\n    uint uStack72;\n    uint uStack68;\n    uint uStack64;\n    uint uStack60;\n    uchar *puStack56;\n    ulong var_19h;\n    ulong var_11h;\n    ulong var_9h;\n    ulong var_1h;\n    \n    iStack120 = -1;\n    var_27h._1_4_ = 0;\n    uStack104 = &var_27h + 1;\n    uStack96 = &var_17h + 1;\n    puStack88 = auStackX24;\n    uStack80 = 0;\n    uStack104._4_4_ = uStack104 >> 0x20;\n    uStack96._4_4_ = uStack96 >> 0x20;\n    uStack72 = uStack104;\n    uStack68 = uStack104._4_4_;\n    uStack64 = uStack96;\n    uStack60 = uStack96._4_4_;\n    uVar6 = 0;\n    unique0x1000024b = arg2;\n    _auStackX24 = arg3;\n    puStack56 = puStack88;\n    while( true ) {\n        lpFileName = stack0x00000010;\n        if (iStack120 != -1) {\n            (*_sym.imp.KERNEL32.dll_CloseHandle)();\n            iStack120 = -1;\n        }\n        noname_2 = 0x80000000;\n        var_27h._1_4_ = fcn.14000b340(&iStack120, lpFileName, 0x80000000, 1);\n        iVar7 = iStack120;\n        arg1_00 = var_27h._1_4_;\n        if (-1 < var_27h._1_4_) {\n            iStack112 = 0;\n            uVar6 = fcn.140003b14(iStack120, &iStack112);\n            var_27h._1_4_ = uVar6;\n            if (uVar6 < 0) goto code_r0x000140008840;\n            noname_2 = iStack112 - _auStackX24;\n            piVar4 = _auStackX24;\n            goto code_r0x00014000877d;\n        }\n        if ((var_27h._1_4_ != 0x80070020) || (uVar6 = uVar6 + 1,  0x13 < uVar6)) break;\n        if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 2) != 0)) {\n            fcn.140006544(*(*0x14003e208 + 0x10), 10, 0x140037758, stack0x00000010);\n        }\n        (*_sym.imp.KERNEL32.dll_Sleep)(500);\n    }\n    goto code_r0x000140008810;\n    while (piVar4 = piVar4 + 1,  iVar2 != 0) {\ncode_r0x00014000877d:\n        iVar1 = *piVar4;\n        iVar2 = *(piVar4 + noname_2);\n        if (iVar1 != iVar2) break;\n    }\n    if (iVar1 == iVar2) {\n        *arg1 = iVar7;\n        if (iStack112 != 0) {\n            fcn.1400187b4(iStack112);\n        }\n        fcn.140008848(&uStack72);\n        return arg1;\n    }\n    if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n        iVar7 = *0x14003e208;\n        fcn.140003128(&iStack112);\n        noname_2 = 0x140037758;\n        fcn.1400035f0(*(iVar7 + 0x10), 0xc, 0x140037758, stack0x00000010);\n    }\n    arg1_00 = 0x80096010;\n    var_27h._1_4_ = 0x80096010;\n    fcn.14000bf14(0x80096010);\ncode_r0x000140008810:\n    if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n        fcn.1400084f4(*(*0x14003e208 + 0x10), *0x14003e208, noname_2, arg1_00 & 0xffffffff);\n        arg1_00 = var_27h._1_4_;\n    }\n    uVar6 = fcn.14000bf14(arg1_00);\ncode_r0x000140008840:\n    fcn.14000bf14(uVar6);\n    pcVar3 = swi(3);\n    piVar5 = (*pcVar3)();\n    return piVar5;\n}\n",
        "token_count": 1377
    },
    "140008c0": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.140008c04(int64_t arg1)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uchar auStack88 [32];\n    uint uStack56;\n    ulong uStack40;\n    uchar auStack32 [16];\n    uint64_t uStack16;\n    \n    uStack16 = *0x14003ef38 ^ auStack88;\n    auStack32 = ZEXT816(0);\n    (*_sym.imp.KERNEL32.dll_GetSystemTime)(auStack32);\n    uStack40 = 0;\n    iVar1 = (*_sym.imp.KERNEL32.dll_SystemTimeToFileTime)(auStack32, &uStack40);\n    if (iVar1 == 0) {\n        if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            fcn.140001e30(*(*0x14003e208 + 0x10), 0x11, 0x140037758, uVar2);\n        }\n    }\n    else {\n        iVar1 = (*_sym.imp.KERNEL32.dll_SetFileTime)(*(arg1 + 0x18), 0, 0, &uStack40);\n        if (((iVar1 == 0) && (*0x14003e208 != 0x14003e208)) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n            uStack56 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            fcn.140001e64(*(*0x14003e208 + 0x10), 0x10, 0x140037758, *(arg1 + 8));\n        }\n    }\n    iVar1 = (*_sym.imp.KERNEL32.dll_FlushFileBuffers)(*(arg1 + 0x18));\n    if (((iVar1 == 0) && (*0x14003e208 != 0x14003e208)) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n        uStack56 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        fcn.140001e64(*(*0x14003e208 + 0x10), 0x12, 0x140037758, *(arg1 + 8));\n    }\n    fcn.140018790(uStack16 ^ auStack88);\n    return;\n}\n",
        "token_count": 564
    },
    "140008dd": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_10h\n// WARNING: Variable defined which should be unmapped: var_20h\n// WARNING: Variable defined which should be unmapped: var_30h\n\nvoid fcn.140008dd0(int64_t arg1, uint64_t *arg2)\n\n{\n    uint8_t uVar1;\n    uint64_t arg3;\n    uint64_t *puVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    ulong noname_1;\n    uint64_t *puVar7;\n    uint32_t uVar8;\n    uchar auStack168 [32];\n    uint64_t uStack136;\n    uint64_t uStack120;\n    uint64_t *puStack112;\n    uchar auStack104 [16];\n    uchar auStack88 [16];\n    uint64_t var_40h;\n    ulong var_38h;\n    ulong var_30h;\n    ulong var_20h;\n    ulong var_10h;\n    \n    var_40h = *0x14003ef38 ^ auStack168;\n    puStack112 = arg2;\n    if (*(arg1 + 0x29) == '\\0') {\n        (**0x140031a58)();\n        iVar3 = (**0x140031a58)(arg1, 0, 0);\n        if (iVar3 != 0) {\n            uVar4 = fcn.14000e908();\n            if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n                fcn.140001e30(*(*0x14003e208 + 0x10), 0x14, 0x140037758, uVar4);\n            }\n            goto code_r0x00014000915c;\n        }\n        uStack120 = 0;\n        uVar4 = 0x40000;\n        if (*(arg1 + 0x24) < 0x40000) {\n            uVar4 = *(arg1 + 0x24);\n        }\n        uVar6 = fcn.140004740(&uStack120, uVar4);\n        arg3 = uStack120;\n        if (-1 < uVar6) {\n            for (uVar6 = *(arg1 + 0x24); uVar6 != 0; uVar6 = uVar6 - uVar8) {\n                uVar8 = uVar4;\n                if (uVar6 < uVar4) {\n                    uVar8 = *(arg1 + 0x24);\n                }\n                uStack120 = uVar8;\n                uVar5 = fcn.14000b4c0(*(arg1 + 0x18), &uStack120, arg3);\n                if (uVar5 < 0) {\n                    if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n                        fcn.140001efc(*(*0x14003e208 + 0x10), 0x16, 0x140037758, uVar5);\n                    }\n                    if (arg3 != 0) {\n                        fcn.1400187b4(arg3);\n                    }\n                    goto code_r0x00014000915c;\n                }\n                if (uStack120 != uVar8) {\n                    if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n                        uStack136 = uStack120;\n                        fcn.1400034f0(*(*0x14003e208 + 0x10), 0x17, 0x140037758, uVar8);\n                    }\n                    if (arg3 != 0) {\n                        fcn.1400187b4(arg3);\n                    }\n                    goto code_r0x00014000915c;\n                }\n                (**0x140031a58)(*(arg1 + 0x10), uStack120, arg3);\n            }\n            if (arg3 != 0) {\n                fcn.1400187b4(arg3);\n            }\n            goto code_r0x000140008fbd;\n        }\n        if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n            noname_1 = 0x15;\n            goto code_r0x000140008f16;\n        }\n    }\n    else {\n        if (*(arg1 + 0x20) != *(arg1 + 0x24)) {\n            if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n                uStack136 = uStack136 & 0xffffffff00000000 | *(arg1 + 0x24);\n                fcn.1400034ac(*(*0x14003e208 + 0x10), 0x13, 0x140037758, *(arg1 + 0x20));\n            }\n            goto code_r0x00014000915c;\n        }\n        *(arg1 + 0x29) = 0;\ncode_r0x000140008fbd:\n        puVar2 = puStack112;\n        puVar7 = NULL;\n        (**0x140031a58)();\n        puStack112 = 0x20;\n        auStack104 = ZEXT816(0);\n        auStack88 = ZEXT816(0);\n        fcn.14000e0bc(*(arg1 + 0x10), &puStack112, auStack104);\n        uStack120 = 0;\n        uVar6 = fcn.140004770(&uStack120);\n        if (-1 < uVar6) {\n            if (puStack112 != NULL) {\n                do {\n                    uVar1 = auStack104[puVar7];\n                    *(uStack120 + puVar7 * 4) = L\"0123456789abcdef\"[uVar1 >> 4];\n                    *(uStack120 + 2 + puVar7 * 4) = L\"0123456789abcdef\"[uVar1 & 0xf];\n                    puVar7 = puVar7 + 1;\n                } while (puVar7 < puStack112);\n            }\n            *(uStack120 + 0x80) = 0;\n            *puVar2 = uStack120;\n            if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 4) != 0)) {\n                uStack136 = *(arg1 + 8);\n                fcn.140003534(*(*0x14003e208 + 0x10), 0x19, 0x140037758, uStack120);\n            }\n            goto code_r0x00014000915c;\n        }\n        if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n            noname_1 = 0x18;\ncode_r0x000140008f16:\n            fcn.140001efc(*(*0x14003e208 + 0x10), noname_1, 0x140037758, uVar6);\n        }\n    }\n    if (uStack120 != 0) {\n        fcn.1400187b4(uStack120);\n    }\ncode_r0x00014000915c:\n    fcn.140018790(var_40h ^ auStack168);\n    return;\n}\n",
        "token_count": 1747
    },
    "14000a98": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint64_t fcn.14000a984(ulong arg1, ulong arg2)\n\n{\n    uint64_t hKey;\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint64_t arg4;\n    char16_t *arg3;\n    ulong uVar3;\n    uint64_t uStackX16;\n    ulong uStackX24;\n    \n    uStackX16 = 0;\n    arg3 = L\"SOFTWARE\\\\Microsoft\\\\MpSigStub\";\n    uVar3 = 2;\n    iVar1 = fcn.14000f180(&uStackX16, arg2, L\"SOFTWARE\\\\Microsoft\\\\MpSigStub\", 2);\n    if (iVar1 == -0x7ff8fffe) {\n        if (uStackX16 != 0) {\n            (*_sym.imp.ADVAPI32.dll_RegCloseKey)();\n            uStackX16 = 0;\n        }\n        uVar2 = fcn.14000f290(&uStackX16, arg2, arg3, uVar3);\n        if (uVar2 < 0) {\n            if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n                fcn.140001efc(*(*0x14003e208 + 0x10), 0xd, 0x1400377f8, uVar2);\n            }\n            if (uStackX16 == 0) {\n                return uVar2;\n            }\n            (*_sym.imp.ADVAPI32.dll_RegCloseKey)();\n            return uVar2;\n        }\n    }\n    uStackX24 = fcn.14000a924();\n    hKey = uStackX16;\n    uVar2 = fcn.14000f60c(uStackX16, 0x1400377b8, 0xb, 8);\n    arg4 = uVar2;\n    if (uVar2 < 0) {\n        if ((*0x14003e208 == 0x14003e208) || ((*(*0x14003e208 + 0x1c) & 1) == 0)) goto code_r0x00014000aa8f;\n        uVar3 = 0xe;\n    }\n    else {\n        uStackX16 = uStackX16 & 0xffffffff00000000 | arg1;\n        uVar2 = fcn.14000f60c(hKey, 0x1400377d8, 4, 4);\n        arg4 = uVar2;\n        if (-1 < uVar2) {\n            if (hKey != 0) {\n                (*_sym.imp.ADVAPI32.dll_RegCloseKey)(hKey);\n            }\n            return 0;\n        }\n        if ((*0x14003e208 == 0x14003e208) || ((*(*0x14003e208 + 0x1c) & 1) == 0)) goto code_r0x00014000aa8f;\n        uVar3 = 0xf;\n    }\n    fcn.140001efc(*(*0x14003e208 + 0x10), uVar3, 0x1400377f8, arg4);\ncode_r0x00014000aa8f:\n    if (hKey != 0) {\n        (*_sym.imp.ADVAPI32.dll_RegCloseKey)(hKey);\n    }\n    return arg4;\n}\n",
        "token_count": 764
    },
    "14000b28": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint64_t fcn.14000b280(ulong hHandle, uint64_t arg2)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint64_t uVar3;\n    uint64_t uVar4;\n    \n    uVar3 = (*_sym.imp.KERNEL32.dll_WaitForSingleObject)();\n    iVar1 = uVar3;\n    if (((iVar1 == 0) || (iVar1 == 0x80)) || (iVar1 == 0x102)) {\n        uVar4 = uVar3 & 0xffffffffffffff00 | iVar1 == 0x102;\n    }\n    else {\n        uVar3 = 0x80070006;\n        if (iVar1 == -1) {\n            uVar2 = fcn.14000e908();\n            uVar3 = uVar2;\n        }\n        uVar4 = 0x14003e208;\n        if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n            uVar4 = fcn.14000af9c(*(*0x14003e208 + 0x10), 0xd, uVar3, arg2 & 0xffffffff);\n        }\n        uVar4 = uVar4 & 0xffffffffffffff00;\n    }\n    return uVar4;\n}\n",
        "token_count": 310
    },
    "14000b2f": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.14000b2f4(ulong hObject)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    \n    iVar1 = (*_sym.imp.KERNEL32.dll_CloseHandle)();\n    if (iVar1 == 0) {\n        uVar2 = fcn.14000e908();\n        if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n            fcn.140001efc(*(*0x14003e208 + 0x10), 0xe, 0x140037ab8, uVar2);\n        }\n    }\n    return;\n}\n",
        "token_count": 159
    },
    "14000b40": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint64_t fcn.14000b400(ulong arg1, uint64_t arg2, int64_t arg3)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint64_t uVar3;\n    uint32_t auStackX16 [2];\n    \n    if ((arg2 & 0xffffffff) == arg2) {\n        uVar3 = arg2 & 0xffffffff;\n        while( true ) {\n            auStackX16[0] = 0;\n            iVar1 = (*_sym.imp.KERNEL32.dll_WriteFile)(arg1, arg3, uVar3, auStackX16, 0);\n            if (iVar1 == 0) break;\n            uVar2 = arg2;\n            if (auStackX16[0] == uVar2) goto code_r0x00014000b4ad;\n            if ((auStackX16[0] == 0) || (uVar2 < auStackX16[0])) {\n                uVar3 = 0x8000ffff;\n                goto code_r0x00014000b471;\n            }\n            arg2 = uVar2 - auStackX16[0];\n            arg3 = arg3 + auStackX16[0];\n            uVar3 = uVar2 - auStackX16[0];\n        }\n        uVar2 = fcn.14000e908();\n        uVar3 = uVar2;\n        if (uVar2 < 0) {\ncode_r0x00014000b471:\n            if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n                fcn.140001efc(*(*0x14003e208 + 0x10), 0x13, 0x140037ab8, uVar3);\n            }\n        }\n        else {\ncode_r0x00014000b4ad:\n            uVar3 = 0;\n        }\n    }\n    else {\n        uVar3 = 0x80070057;\n    }\n    return uVar3;\n}\n",
        "token_count": 468
    },
    "14000b4c": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint64_t fcn.14000b4c0(ulong hFile, uint64_t *arg2, ulong arg3)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint64_t uVar3;\n    uint32_t auStackX16 [6];\n    \n    uVar2 = *arg2;\n    if (uVar2 == *arg2) {\n        *arg2 = 0;\n        auStackX16[0] = 0;\n        iVar1 = (*_sym.imp.KERNEL32.dll_ReadFile)(hFile, arg3, uVar2, auStackX16, 0);\n        if (iVar1 == 0) {\n            uVar2 = fcn.14000e908();\n            uVar3 = uVar2;\n            if (uVar2 != 0x80070026) {\n                if (*0x14003e208 == 0x14003e208) {\n                    return uVar3;\n                }\n                if ((*(*0x14003e208 + 0x1c) & 1) == 0) {\n                    return uVar3;\n                }\n                fcn.140001efc(*(*0x14003e208 + 0x10), 0x16, 0x140037ab8, uVar3);\n                return uVar3;\n            }\n            *arg2 = 0;\n        }\n        else {\n            if (uVar2 < auStackX16[0]) {\n                return 0x8000ffff;\n            }\n            *arg2 = auStackX16[0];\n        }\n        uVar3 = 0;\n    }\n    else {\n        uVar3 = 0x80070057;\n    }\n    return uVar3;\n}\n",
        "token_count": 381
    },
    "14000b65": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint fcn.14000b654(int64_t *arg1, ulong arg2, ulong arg3)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    ulong noname_1;\n    uint64_t noname_2;\n    \n    if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 4) != 0)) {\n        fcn.140001e64(*(*0x14003e208 + 0x10), 0x1a, 0x140037ab8, arg2);\n    }\n    noname_2 = arg3;\n    noname_1 = 0;\n    iVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryExW)(arg2);\n    *arg1 = iVar2;\n    if (iVar2 == 0) {\n        uVar1 = fcn.14000e908();\n        if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n            fcn.14000afe8(*(*0x14003e208 + 0x10), noname_1, noname_2, arg2);\n        }\n    }\n    else {\n        uVar1 = 0;\n    }\n    return uVar1;\n}\n",
        "token_count": 310
    },
    "14000b82": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nulong fcn.14000b82c(ulong arg1)\n\n{\n    ulong uVar1;\n    uint32_t auStackX16 [6];\n    \n    auStackX16[0] = 0;\n    uVar1 = fcn.14000b7b4(auStackX16, arg1);\n    if (-1 < uVar1) {\n        if ((auStackX16[0] & 0x10) == 0) {\n            if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n                fcn.140006544(*(*0x14003e208 + 0x10), 0x1f, 0x140037ab8, arg1);\n            }\n            uVar1 = 0x800700b7;\n        }\n        else {\n            uVar1 = 0;\n        }\n    }\n    return uVar1;\n}\n",
        "token_count": 220
    },
    "14000b89": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nulong fcn.14000b894(ulong arg1)\n\n{\n    ulong uVar1;\n    uint32_t auStackX16 [6];\n    \n    auStackX16[0] = 0;\n    uVar1 = fcn.14000b7b4(auStackX16, arg1);\n    if (-1 < uVar1) {\n        if ((auStackX16[0] & 0x10) == 0) {\n            uVar1 = 0;\n        }\n        else {\n            if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n                fcn.140006544(*(*0x14003e208 + 0x10), 0x20, 0x140037ab8, arg1);\n            }\n            uVar1 = 0x800700b7;\n        }\n    }\n    return uVar1;\n}\n",
        "token_count": 218
    },
    "14000bb0": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nint32_t fcn.14000bb00(int64_t *arg1, ulong dwProcessId, ulong dwDesiredAccess)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    uint64_t noname_2;\n    \n    noname_2 = dwProcessId;\n    iVar2 = (*_sym.imp.KERNEL32.dll_OpenProcess)(dwDesiredAccess, 0);\n    *arg1 = iVar2;\n    if (iVar2 == 0) {\n        iVar1 = fcn.14000e908();\n        if (iVar1 == -0x7ff8ffa9) {\n            if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 4) != 0)) {\n                fcn.14000b1c0(*(*0x14003e208 + 0x10), 0x24, noname_2, dwProcessId);\n            }\n            iVar1 = -0x7ff8ffa9;\n        }\n        else if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n            fcn.14000b1c0(*(*0x14003e208 + 0x10), 0x23, noname_2, dwProcessId);\n        }\n    }\n    else {\n        iVar1 = 0;\n    }\n    return iVar1;\n}\n",
        "token_count": 335
    },
    "14000bc2": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint fcn.14000bc20(ulong arg1, uint64_t *nSize, ushort *lpDst)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint uVar3;\n    \n    uVar1 = *nSize;\n    uVar2 = (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(arg1, lpDst, uVar1);\n    if (uVar2 == 0) {\n        uVar3 = fcn.14000e908();\n        if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n            fcn.14000b148(*(*0x14003e208 + 0x10), 0x27, 0x140037ab8, arg1);\n        }\n    }\n    else {\n        if (uVar1 < uVar2) {\n            if (uVar1 != 0) {\n                *lpDst = 0;\n            }\n        }\n        else if (lpDst[uVar2 - 1] != 0) {\n            return 0x8000ffff;\n        }\n        *nSize = uVar2;\n        uVar3 = 0;\n    }\n    return uVar3;\n}\n",
        "token_count": 290
    },
    "14000bdd": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nint32_t fcn.14000bddc(ulong noname_0, int64_t arg2)\n\n{\n    int32_t iVar1;\n    ulong in_R8;\n    \n    iVar1 = (*_sym.imp.KERNEL32.dll_SetEnvironmentVariableW)(0x140037530);\n    if ((iVar1 != 0) || ((iVar1 = fcn.14000e908(),  arg2 == 0 && (iVar1 == -0x7ff8ff35)))) {\n        return 0;\n    }\n    if (*0x14003e208 == 0x14003e208) {\n        return iVar1;\n    }\n    if ((*(*0x14003e208 + 0x1c) & 1) == 0) {\n        return iVar1;\n    }\n    fcn.14000b078(*(*0x14003e208 + 0x10), 0x29, in_R8, 0x140037530);\n    return iVar1;\n}\n",
        "token_count": 215
    },
    "14000bf1": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.14000bf14(uint64_t arg1)\n\n{\n    code *pcVar1;\n    char cVar2;\n    uint64_t arg4;\n    uchar auStack56 [48];\n    \n    arg4 = arg1 & 0xffffffff;\n    cVar2 = fcn.140003168(arg1);\n    if (cVar2 != '\\0') {\n        if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n            fcn.1400084d4(*(*0x14003e208 + 0x10), 10, 0x140037ad8);\n        }\n        arg4 = 0x8000ffff;\n    }\n    if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n        fcn.140001efc(*(*0x14003e208 + 0x10), 0xb, 0x140037ad8, arg4);\n    }\n    fcn.14000be5c(auStack56, arg4);\n    fcn.14001acb8(auStack56, 0x14003ca40);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 313
    },
    "14000c0a": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint64_t fcn.14000c0a0(ulong *arg1, ulong ProcessHandle, ulong DesiredAccess)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint64_t arg4;\n    ulong uStackX32;\n    \n    uStackX32 = 0;\n    iVar1 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(ProcessHandle, DesiredAccess, &uStackX32);\n    if (iVar1 == 0) {\n        uVar2 = fcn.14000e908();\n        arg4 = uVar2;\n        if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n            fcn.140001efc(*(*0x14003e208 + 0x10), 0xe, 0x140037b40, arg4);\n        }\n    }\n    else {\n        *arg1 = uStackX32;\n        arg4 = 0;\n    }\n    return arg4;\n}\n",
        "token_count": 239
    },
    "14000c3f": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint64_t fcn.14000c3f8(ulong *arg1, ulong lpModuleName, ulong arg3)\n\n{\n    uint32_t uVar1;\n    int64_t hModule;\n    uint64_t uVar2;\n    ulong auStack24 [2];\n    \n    hModule = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(lpModuleName);\n    if (hModule == 0) {\n        uVar1 = fcn.14000e908();\n        uVar2 = uVar1;\n        if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n            fcn.14000b148(*(*0x14003e208 + 0x10), 0x10, 0x140037b40, lpModuleName);\n        }\n    }\n    else {\n        auStack24[0] = 0;\n        uVar2 = fcn.14000b704(auStack24, hModule, arg3);\n        if (uVar2 == -0x7ff8ff81) {\n            uVar2 = 0x8007007f;\n        }\n        else if (-1 < uVar2) {\n            *arg1 = auStack24[0];\n            uVar2 = 0;\n        }\n    }\n    return uVar2;\n}\n",
        "token_count": 307
    },
    "14000c4a": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_11h\n\nuint64_t fcn.14000c4a0(uint64_t *arg1, int64_t arg2, ulong arg3)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint64_t uVar3;\n    ulong var_11h;\n    \n    uVar2 = *arg1;\n    if (uVar2 != *arg1) {\n        return 0x80070057;\n    }\n    if (uVar2 == 0) {\ncode_r0x00014000c539:\n        uVar3 = 0x8007007a;\n    }\n    else {\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetModuleFileNameW)(arg3, arg2, uVar2);\n        if (uVar1 == 0) {\n            uVar2 = fcn.14000e908();\n            uVar3 = uVar2;\n            if (*0x14003e208 == 0x14003e208) {\n                return uVar3;\n            }\n            if ((*(*0x14003e208 + 0x1c) & 1) == 0) {\n                return uVar3;\n            }\n            fcn.140001efc(*(*0x14003e208 + 0x10), 0x11, 0x140037b40, uVar3);\n            return uVar3;\n        }\n        if (uVar1 < uVar2) {\n            if (*(arg2 + uVar1 * 2) == 0) {\n                *arg1 = uVar1 + 1;\n                return 0;\n            }\n        }\n        else if (uVar1 == uVar2) goto code_r0x00014000c539;\n        uVar3 = 0x8000ffff;\n    }\n    return uVar3;\n}\n",
        "token_count": 414
    },
    "14000c6a": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint fcn.14000c6a8(int64_t *arg1)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    \n    iVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n    *arg1 = iVar2;\n    if (iVar2 == 0) {\n        uVar1 = fcn.14000e908();\n        if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n            fcn.14000b148(*(*0x14003e208 + 0x10), 0x12, 0x140037b40, 0);\n        }\n    }\n    else {\n        uVar1 = 0;\n    }\n    return uVar1;\n}\n",
        "token_count": 188
    },
    "14000c70": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t fcn.14000c70c(ulong *arg1, int16_t *arg2, ulong noname_2, ulong arg4)\n\n{\n    int16_t iVar1;\n    int32_t iVar2;\n    int16_t *piVar3;\n    uint64_t uVar4;\n    int64_t arg1_00;\n    int16_t *piVar5;\n    int64_t iStackX32;\n    int64_t in_stack_00000028;\n    ulong in_stack_00000050;\n    int16_t *in_stack_ffffffffffffff18;\n    uchar auStack184 [16];\n    ulong uStack168;\n    uint uStack152;\n    uchar auStack148 [108];\n    \n    iStackX32 = 0;\n    piVar3 = in_stack_ffffffffffffff18;\n    if ((in_stack_00000028 == 0) && (*arg2 != 0x22)) {\n        piVar3 = fcn.14001ab18(arg2);\n        if (piVar3 != NULL) {\n            iVar1 = *arg2;\n            piVar5 = arg2;\n            while ((iVar1 != 0 && (iVar2 = fcn.1400235ec(iVar1),  iVar2 == 0))) {\n                piVar5 = piVar5 + 1;\n                iVar1 = *piVar5;\n            }\n            if (piVar5 <= piVar3) {\n                while ((*piVar3 != 0 && (iVar2 = fcn.1400235ec(*piVar3),  iVar2 == 0))) {\n                    piVar3 = piVar3 + 1;\n                }\n                uVar4 = piVar3 - arg2 >> 1;\n                if (uVar4 < 0) {\n                    iVar2 = -0x7ff8ffa9;\n                    arg1_00 = 0;\n                    goto code_r0x00014000c7fa;\n                }\n                iVar2 = fcn.14000e5b0(&iStackX32, L\"\\\"%.*ls\\\"%ls\", uVar4 & 0xffffffff, arg2);\n                arg1_00 = iStackX32;\n                if (iVar2 < 0) goto code_r0x00014000c7fa;\n                goto code_r0x00014000c7df;\n            }\n        }\ncode_r0x00014000c7e4:\n        iVar2 = fcn.14000ca84(&iStackX32, arg2);\n        arg1_00 = iStackX32;\n        if (iVar2 < 0) goto code_r0x00014000c7fa;\n    }\n    else {\ncode_r0x00014000c7df:\n        in_stack_ffffffffffffff18 = piVar3;\n        if (iStackX32 == 0) goto code_r0x00014000c7e4;\n    }\n    arg1_00 = iStackX32;\n    uStack168 = 0;\n    auStack184 = ZEXT816(0);\n    fcn.14001a0c0(auStack148, 0, 100);\n    uStack152 = 0x68;\n    iVar2 = (*_sym.imp.KERNEL32.dll_CreateProcessW)\n                      (in_stack_00000028, arg1_00, 0, 0, in_stack_ffffffffffffff18 & 0xffffffff00000000, 0x8000000, 0, \n                       in_stack_00000050, &uStack152, auStack184);\n    if (iVar2 != 0) {\n        if (auStack184._8_8_ != 0) {\n            fcn.14000b2f4(auStack184._8_8_);\n        }\n        *arg1 = auStack184._0_8_;\n        if (arg1_00 != 0) {\n            fcn.1400187b4(arg1_00);\n        }\n        return 0;\n    }\n    iVar2 = fcn.14000e908();\n    if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n        fcn.14000b148(*(*0x14003e208 + 0x10), 0x18, 0x140037b40, arg1_00);\n    }\ncode_r0x00014000c7fa:\n    if (arg1_00 != 0) {\n        fcn.1400187b4(arg1_00);\n    }\n    return iVar2;\n}\n",
        "token_count": 1012
    },
    "14000c90": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1bh\n\nuint32_t fcn.14000c904(ulong noname_0, uint64_t *arg2, ushort *arg3)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    ulong var_1bh;\n    \n    uVar3 = *arg2;\n    (*_sym.imp.KERNEL32.dll_SetLastError)(0);\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetEnvironmentVariableW)(0x140037530, arg3, uVar3);\n    if (uVar1 == 0) {\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        uVar4 = uVar2 & 0xffff | 0x80070000;\n        if (uVar2 < 1) {\n            uVar4 = uVar2;\n        }\n        if (uVar4 < 0) {\n            if (uVar4 == 0x800700cb) {\n                return 0x800700cb;\n            }\n            if (*0x14003e208 == 0x14003e208) {\n                return uVar4;\n            }\n            if ((*(*0x14003e208 + 0x1c) & 1) == 0) {\n                return uVar4;\n            }\n            fcn.14000b148(*(*0x14003e208 + 0x10), 0x1b, 0x140037b40, 0x140037530);\n            return uVar4;\n        }\n    }\n    if ((uVar1 < uVar3) && (arg3[uVar1] != 0)) {\n        uVar3 = 0x8000ffff;\n    }\n    else {\n        if ((uVar3 < uVar1 + 1) && (uVar3 != 0)) {\n            *arg3 = 0;\n        }\n        *arg2 = uVar1 + 1;\n        uVar3 = 0;\n    }\n    return uVar3;\n}\n",
        "token_count": 465
    },
    "14000e12": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint64_t fcn.14000e128(int64_t *arg1, ulong arg2)\n\n{\n    int64_t arg1_00;\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint64_t uVar3;\n    uint32_t uVar4;\n    uint auStackX24 [2];\n    int64_t iStackX32;\n    \n    auStackX24[0] = 0;\n    iVar1 = (**0x140031a58)(1, arg2, auStackX24);\n    if (iVar1 == 0) {\n        uVar3 = fcn.14000e908();\n        if (uVar3 < 0) {\n            iVar1 = 0;\n        }\n    }\n    else {\n        uVar3 = 0;\n    }\n    if (-1 < uVar3) {\n        uVar4 = iVar1 + 8;\n        if (uVar4 < 9) {\n            uVar3 = 0x80070216;\n        }\n        else {\n            iStackX32 = 0;\n            uVar2 = fcn.140004740(&iStackX32, uVar4);\n            arg1_00 = iStackX32;\n            uVar3 = uVar2;\n            if (uVar2 < 0) {\n                if (iStackX32 != 0) {\n                    fcn.1400187b4(iStackX32);\n                }\n            }\n            else {\n                iVar1 = (**0x140031a58)(1, arg2, auStackX24[0], uVar4, iStackX32);\n                if (iVar1 == 0) {\n                    uVar4 = fcn.14000e908();\n                }\n                else {\n                    uVar4 = 0;\n                }\n                if (uVar4 < 0) {\n                    if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n                        fcn.14000b148(*(*0x14003e208 + 0x10), 10, 0x140037f10, arg2);\n                    }\n                    if (arg1_00 != 0) {\n                        fcn.1400187b4(arg1_00);\n                    }\n                    uVar3 = uVar4;\n                }\n                else {\n                    *arg1 = arg1_00;\n                    uVar3 = 0;\n                }\n            }\n        }\n    }\n    return uVar3;\n}\n",
        "token_count": 555
    },
    "14000ec0": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_8h\n// WARNING: Variable defined which should be unmapped: var_14h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.14000ec0c(ulong arg1, ulong arg2, ulong nSubAuthority0, ulong nSubAuthority1, ulong *noname_4, ulong noname_5, \n                  ulong arg_40h)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uchar auStack152 [32];\n    uint uStack120;\n    uint uStack112;\n    uint uStack104;\n    uint uStack96;\n    uint uStack88;\n    uint uStack80;\n    ulong *puStack72;\n    ulong uStack56;\n    uint uStack48;\n    ushort uStack44;\n    ulong pSid;\n    uchar var_18h [4];\n    ulong var_14h;\n    ulong var_8h;\n    \n    _var_18h = *0x14003ef38 ^ auStack152;\n    if (arg2 - 1U < 8) {\n        uStack44 = 0x500;\n        uStack48 = 0;\n        pSid._0_4_ = 0;\n        pSid._4_2_ = 0x100;\n        if (noname_4 == NULL) {\n            noname_4 = &uStack48;\n            if (nSubAuthority0 == 0) {\n                noname_4 = &pSid;\n            }\n        }\n        puStack72 = &uStack56;\n        uStack56 = 0;\n        uStack80 = 0;\n        uStack88 = 0;\n        uStack96 = 0;\n        uStack104 = 0;\n        uStack112 = 0;\n        uStack120 = 0;\n        iVar1 = (*_sym.imp.ADVAPI32.dll_AllocateAndInitializeSid)(noname_4);\n        if (iVar1 == 0) {\n            uVar2 = fcn.14000e908();\n            if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n                fcn.140001efc(*(*0x14003e208 + 0x10), 0xd, 0x140037f20, uVar2);\n            }\n        }\n        else {\n            fcn.14000eb70(arg1, uStack56);\n            (*_sym.imp.ADVAPI32.dll_FreeSid)(uStack56);\n        }\n    }\n    fcn.140018790(_var_18h ^ auStack152);\n    return;\n}\n",
        "token_count": 591
    },
    "14000f46": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint64_t fcn.14000f468(ulong hKey, ulong arg2, uint32_t *arg3, uint64_t *arg4)\n\n{\n    uint32_t uVar1;\n    uint64_t uVar2;\n    uint64_t uVar3;\n    uint32_t uVar4;\n    int64_t in_stack_00000028;\n    \n    uVar3 = *arg4;\n    uVar2 = uVar3 & 0xffffffff;\n    if (uVar2 != uVar3) {\n        return 0x80070057;\n    }\n    uVar1 = (*_sym.imp.ADVAPI32.dll_RegQueryValueExW)();\n    uVar4 = uVar1 & 0xffff | 0x80070000;\n    if (uVar1 < 1) {\n        uVar4 = uVar1;\n    }\n    if (uVar4 < 0) {\n        if (uVar4 == 0x80070002) {\n            if (*0x14003e208 == 0x14003e208) {\n                return 0x80070002;\n            }\n            if ((*(*0x14003e208 + 0x1c) & 4) == 0) {\n                return 0x80070002;\n            }\n            fcn.140006544(*(*0x14003e208 + 0x10), 0x15, 0x140037f30, arg2);\n            return 0x80070002;\n        }\n        if (uVar4 != 0x800700ea) {\n            if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n                fcn.14000b148(*(*0x14003e208 + 0x10), 0x16, 0x140037f30, arg2);\n            }\n            return uVar4;\n        }\n        if (uVar2 <= *arg4) {\n            return 0x8000ffff;\n        }\n    }\n    else if ((in_stack_00000028 == 0) || (uVar2 < *arg4 || uVar2 == *arg4)) {\n        uVar4 = *arg3;\n        *arg4 = uVar2;\n        uVar3 = fcn.14000f38c(arg2, uVar3, uVar4, arg4);\n        return uVar3;\n    }\n    *arg4 = uVar2;\n    return 0x800700ea;\n}\n",
        "token_count": 563
    },
    "14000f60": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint32_t fcn.14000f60c(ulong hKey, ulong arg2, ulong dwType, uint64_t arg4)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    \n    if ((arg4 & 0xffffffff) == arg4) {\n        uVar1 = (*_sym.imp.ADVAPI32.dll_RegSetValueExW)(hKey, arg2, 0, dwType);\n        if (uVar1 != 0) {\n            if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n                fcn.140001e64(*(*0x14003e208 + 0x10), 0x18, 0x140037f30, arg2);\n            }\n            uVar2 = uVar1 & 0xffff | 0x80070000;\n            if (uVar1 < 1) {\n                uVar2 = uVar1;\n            }\n            if (uVar2 < 0) {\n                return uVar2;\n            }\n        }\n        uVar1 = 0;\n    }\n    else {\n        uVar1 = 0x80070057;\n    }\n    return uVar1;\n}\n",
        "token_count": 286
    },
    "14000f69": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nulong fcn.14000f69c(uint64_t arg1, uint64_t arg2)\n\n{\n    ulong in_R8;\n    \n    if (arg1 == 0) {\n        if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n            fcn.1400084d4(*(*0x14003e208 + 0x10), 0x27, 0x140037f30);\n        }\n    }\n    else {\n        if ((arg1 & 1) == 0) {\n            if ((((arg2 & 1) != 0) && (*0x14003e208 != 0x14003e208)) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n                fcn.14000f140(*(*0x14003e208 + 0x10), arg2, in_R8, arg2);\n            }\n            return 1;\n        }\n        if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n            fcn.14000f10c(*(*0x14003e208 + 0x10), 0x28, 0x140037f30, arg1);\n        }\n    }\n    return 0;\n}\n",
        "token_count": 328
    },
    "14000fa5": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nulong fcn.14000fa50(uint64_t arg1, int64_t arg2, uint64_t *arg3)\n\n{\n    ulong uVar1;\n    uint64_t uVar2;\n    uint64_t arg4;\n    int64_t iVar3;\n    \n    arg4 = *arg3;\n    iVar3 = *0x14003e208;\n    if ((arg4 & 1) != 0) {\n        if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n            fcn.14000f10c(*(*0x14003e208 + 0x10), 0x35, 0x140037f30, arg4);\n            arg4 = *arg3;\n        }\n        iVar3 = *0x14003e208;\n        arg4 = arg4 - 1;\n        *arg3 = arg4;\n    }\n    if ((arg4 >> 1 == 0) || (*(arg2 + -2 + (arg4 & 0xfffffffffffffffe)) != 0)) {\n        if (arg1 <= arg4 >> 1) {\n            if ((iVar3 != 0x14003e208) && ((*(iVar3 + 0x1c) & 2) != 0)) {\n                fcn.1400084d4(*(iVar3 + 0x10), 0x37, 0x140037f30);\n                arg4 = *arg3;\n            }\n            *arg3 = arg4 + 2;\n            return 0x800700ea;\n        }\n        uVar2 = arg4;\n        if ((iVar3 != 0x14003e208) && ((*(iVar3 + 0x1c) & 1) != 0)) {\n            fcn.1400084d4(*(iVar3 + 0x10), 0x36, 0x140037f30);\n            uVar2 = *arg3;\n        }\n        *(arg2 + (arg4 & 0xfffffffffffffffe)) = 0;\n        *arg3 = uVar2 + 2;\n    }\n    uVar1 = fcn.14000f9e8(arg2, arg3);\n    return uVar1;\n}\n",
        "token_count": 507
    },
    "1400106b": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint32_t fcn.1400106bc(ulong arg1, ulong arg2)\n\n{\n    uint32_t uVar1;\n    \n    uVar1 = (**0x140031a58)(arg2);\n    if (uVar1 < 0) {\n        if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n            fcn.140001efc(*(*0x14003e208 + 0x10), 10, 0x140037fb8, uVar1);\n        }\n    }\n    else {\n        uVar1 = 0;\n    }\n    return uVar1;\n}\n",
        "token_count": 161
    },
    "14001167": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.140011670(void)\n\n{\n    int64_t iVar1;\n    uint64_t uVar2;\n    \n    uVar2 = *0x140040754;\n    if ((*0x140040754 >> 2 & 1) != 0) {\n        fcn.140010654();\n        uVar2 = *0x140040754;\n    }\n    iVar1 = *0x1400406e8;\n    if ((uVar2 >> 1 & 1) != 0) {\n        *0x1400406e8 = 0;\n        if (iVar1 != 0) {\n            (**0x140031a58)(iVar1, 1);\n        }\n    }\n    *0x140040754 = 0;\n    return;\n}\n",
        "token_count": 169
    },
    "1400177b": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint32_t fcn.1400177b8(int64_t arg1, uint8_t **arg2, ulong arg3)\n\n{\n    uint8_t uVar1;\n    uint8_t *puVar2;\n    uint8_t *puVar3;\n    uint8_t **ppuVar4;\n    char cVar5;\n    int32_t iVar6;\n    uint32_t uVar7;\n    uint *puVar8;\n    uint64_t uVar9;\n    uint32_t uVar10;\n    uint64_t uVar11;\n    uint64_t arg1_00;\n    uint32_t uVar12;\n    uint32_t in_R9D;\n    uint32_t uVar13;\n    \n    puVar2 = *arg2;\n    uVar11 = arg3;\n    if (puVar2 == NULL) {\n        puVar8 = fcn.1400142cc();\n        *puVar8 = 0x16;\n        fcn.140014060();\ncode_r0x00014001782d:\n        if (arg2[1] != NULL) {\n            *arg2[1] = *arg2;\n        }\n        return 0;\n    }\n    if ((arg3 != 0) && (0x22 < arg3 - 2)) {\n        *(arg1 + 0x30) = 1;\n        *(arg1 + 0x2c) = 0x16;\n        fcn.140013f90(0, 0, 0, 0);\n        goto code_r0x00014001782d;\n    }\n    arg1_00 = *puVar2;\n    *arg2 = puVar2 + 1;\n    if (*(arg1 + 0x28) == '\\0') {\n        fcn.140017aa0(arg1);\n    }\n    while (iVar6 = fcn.140017b18(arg1_00, 8, arg1 + 0x18),  iVar6 != 0) {\n        arg1_00 = **arg2;\n        *arg2 = *arg2 + 1;\n    }\n    uVar12 = in_R9D & 0xff | 2;\n    if (arg1_00 != '-') {\n        uVar12 = in_R9D & 0xff;\n    }\n    if ((arg1_00 - 0x2bU & 0xfd) == 0) {\n        arg1_00 = **arg2;\n        *arg2 = *arg2 + 1;\n    }\n    uVar9 = uVar11;\n    if ((arg3 & 0xffffffef) == 0) {\n        cVar5 = arg1_00;\n        if (cVar5 - 0x30U < 10) {\n            iVar6 = cVar5 + -0x30;\ncode_r0x0001400178e2:\n            if (iVar6 != 0) goto code_r0x000140017933;\n            puVar3 = *arg2;\n            uVar1 = *puVar3;\n            *arg2 = puVar3 + 1;\n            if ((uVar1 + 0xa8 & 0xdf) != 0) {\n                *arg2 = puVar3;\n                uVar9 = 8;\n                if (arg3 != 0) {\n                    uVar9 = uVar11;\n                }\n                if ((uVar1 != 0) && (*puVar3 != uVar1)) {\n                    puVar8 = fcn.1400142cc();\n                    *puVar8 = 0x16;\n                    fcn.140014060();\n                }\n                goto code_r0x00014001793f;\n            }\n            arg1_00 = puVar3[1];\n            *arg2 = puVar3 + 2;\n            uVar9 = 0x10;\n        }\n        else {\n            if (cVar5 + 0x9fU < 0x1a) {\n                iVar6 = cVar5 + -0x57;\n                goto code_r0x0001400178e2;\n            }\n            if (cVar5 + 0xbfU < 0x1a) {\n                iVar6 = cVar5 + -0x37;\n                goto code_r0x0001400178e2;\n            }\ncode_r0x000140017933:\n            uVar9 = 10;\n        }\n        if (arg3 != 0) {\n            uVar9 = uVar11;\n        }\n    }\ncode_r0x00014001793f:\n    uVar13 = 0;\n    while( true ) {\n        uVar1 = arg1_00;\n        if (uVar1 - 0x30 < 10) {\n            uVar10 = uVar1 - 0x30;\n        }\n        else if (uVar1 + 0x9f < 0x1a) {\n            uVar10 = uVar1 - 0x57;\n        }\n        else if (uVar1 + 0xbf < 0x1a) {\n            uVar10 = uVar1 - 0x37;\n        }\n        else {\n            uVar10 = 0xffffffff;\n        }\n        puVar3 = *arg2;\n        if (uVar9 <= uVar10) break;\n        arg1_00 = *puVar3;\n        uVar7 = uVar13 * uVar9;\n        uVar10 = uVar7 + uVar10;\n        *arg2 = puVar3 + 1;\n        uVar12 = uVar12 | (uVar10 < uVar7 || 0xffffffff / uVar9 < uVar13) << 2 | 8;\n        uVar13 = uVar10;\n    }\n    *arg2 = puVar3 + -1;\n    if ((uVar1 != 0) && (puVar3[-1] != uVar1)) {\n        puVar8 = fcn.1400142cc();\n        *puVar8 = 0x16;\n        fcn.140014060();\n    }\n    if ((uVar12 & 8) == 0) {\n        *arg2 = puVar2;\n        if (arg2[1] == NULL) {\n            return 0;\n        }\n        *arg2[1] = puVar2;\n        return 0;\n    }\n    if ((uVar12 & 4) == 0) {\n        if ((uVar12 & 1) == 0) {\n            if ((uVar12 & 2) == 0) goto code_r0x000140017a69;\ncode_r0x000140017a66:\n            uVar13 = -uVar13;\n            goto code_r0x000140017a69;\n        }\n        if ((uVar12 & 2) == 0) {\n            if (uVar13 < 0x80000000) goto code_r0x000140017a69;\n        }\n        else if (uVar13 < 0x80000001) goto code_r0x000140017a66;\n    }\n    *(arg1 + 0x30) = 1;\n    *(arg1 + 0x2c) = 0x22;\n    if ((uVar12 & 1) != 0) {\n        ppuVar4 = arg2[1];\n        if ((uVar12 & 2) == 0) {\n            if (ppuVar4 != NULL) {\n                *ppuVar4 = *arg2;\n            }\n            return 0x7fffffff;\n        }\n        if (ppuVar4 != NULL) {\n            *ppuVar4 = *arg2;\n        }\n        return 0x80000000;\n    }\n    uVar13 = 0xffffffff;\ncode_r0x000140017a69:\n    if (arg2[1] != NULL) {\n        *arg2[1] = *arg2;\n        return uVar13;\n    }\n    return uVar13;\n}\n",
        "token_count": 1738
    },
    "14001b0d": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint64_t fcn.14001b0dc(int64_t arg1, int64_t **arg2, int32_t *arg3, uint8_t *arg4)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    int64_t *piVar3;\n    int64_t *piVar4;\n    ulong uVar5;\n    int64_t iVar6;\n    uint64_t uVar7;\n    int64_t *piVar8;\n    int64_t *piVar9;\n    int32_t iVar10;\n    int32_t *piVar11;\n    uint8_t *puVar12;\n    int32_t iVar13;\n    \n    piVar9 = NULL;\n    piVar4 = piVar9;\n    piVar11 = arg3;\n    puVar12 = arg4;\n    piVar3 = piVar9;\n    if (arg3[1] != 0) {\n        iVar13 = arg3[1];\n        iVar2 = fcn.140019ee8();\n        piVar4 = iVar13 + iVar2;\n        piVar3 = iVar13;\n    }\n    if (piVar4 == NULL) {\n        return 0;\n    }\n    piVar8 = piVar9;\n    if (piVar3 != 0) {\n        iVar2 = fcn.140019ee8();\n        piVar8 = iVar2 + arg3[1];\n    }\n    if (*(piVar8 + 2) == '\\0') {\n        return 0;\n    }\n    if ((arg3[2] == 0) && (-1 < *arg3)) {\n        return 0;\n    }\n    if (-1 < *arg3) {\n        arg2 = arg3[2] + *arg2;\n    }\n    if ((((*arg3 & 0x80) == 0) || ((*arg4 & 0x10) == 0)) || (*0x14003fc80 == 0)) {\n        if ((*arg3 & 8) != 0) {\n            piVar3 = *(arg1 + 0x28);\n            if ((piVar3 != NULL) && (arg2 != NULL)) {\n                *arg2 = piVar3;\n                goto code_r0x00014001b205;\n            }\n            goto code_r0x00014001b2c9;\n        }\n        if ((*arg4 & 1) != 0) {\n            piVar4 = *(arg1 + 0x28);\n            if ((piVar4 != NULL) && (arg2 != NULL)) {\n                fcn.14001a740(arg2, piVar4, *(arg4 + 0x14));\n                if (*(arg4 + 0x14) != 8) {\n                    return 0;\n                }\n                if (*arg2 == NULL) {\n                    return 0;\n                }\n                piVar3 = *arg2;\n                goto code_r0x00014001b205;\n            }\n            goto code_r0x00014001b2ce;\n        }\n        piVar8 = piVar9;\n        piVar3 = piVar9;\n        if (*(arg4 + 0x18) != 0) {\n            iVar13 = *(arg4 + 0x18);\n            iVar2 = fcn.140019efc();\n            piVar8 = iVar13 + iVar2;\n            piVar3 = iVar13;\n        }\n        if (piVar8 == NULL) {\n            if ((*(arg1 + 0x28) != 0) && (arg2 != NULL)) {\n                iVar13 = *(arg4 + 0x14);\n                uVar5 = fcn.14001a30c(*(arg1 + 0x28), arg4 + 8);\n                fcn.14001a740(arg2, uVar5, iVar13);\n                return 0;\n            }\n            goto code_r0x00014001b2d3;\n        }\n        if ((*(arg1 + 0x28) != 0) && (arg2 != NULL)) {\n            if (piVar3 != 0) {\n                iVar2 = fcn.140019efc();\n                piVar9 = iVar2 + *(arg4 + 0x18);\n            }\n            piVar8 = piVar9;\n            if (piVar9 != NULL) {\n                return ((*arg4 & 4) != 0) + 1;\n            }\n        }\n    }\n    else {\n        piVar3 = (**0x140031a58)();\n        if ((piVar3 != NULL) && (arg2 != NULL)) {\n            *arg2 = piVar3;\ncode_r0x00014001b205:\n            piVar4 = fcn.14001a30c(piVar3, arg4 + 8);\n            *arg2 = piVar4;\n            return 0;\n        }\n        fcn.140014c5c();\n        piVar3 = piVar8;\ncode_r0x00014001b2c9:\n        fcn.140014c5c();\n        piVar8 = piVar3;\ncode_r0x00014001b2ce:\n        fcn.140014c5c();\ncode_r0x00014001b2d3:\n        fcn.140014c5c();\n    }\n    fcn.140014c5c();\n    fcn.140014c5c();\n    iVar6 = 0;\n    iVar10 = 0;\n    iVar2 = iVar6;\n    iVar13 = iVar10;\n    if (piVar11[2] != 0) {\n        iVar13 = piVar11[2];\n        iVar2 = fcn.140019ee8();\n        iVar2 = iVar13 + iVar2;\n    }\n    if (iVar2 == 0) {\n        return 0;\n    }\n    iVar2 = iVar6;\n    if (iVar13 != 0) {\n        iVar2 = fcn.140019ee8();\n        iVar2 = iVar2 + piVar11[2];\n    }\n    if (*(iVar2 + 0x10) == '\\0') {\n        return 0;\n    }\n    if ((piVar11[3] == 0) && (-1 < piVar11[1])) {\n        return 0;\n    }\n    if (-1 < piVar11[1]) {\n        piVar4 = piVar11[3] + *piVar4;\n    }\n    if ((((*(piVar11 + 1) & 0x80) == 0) || ((*puVar12 & 0x10) == 0)) || (*0x14003fc80 == 0)) {\n        if ((*(piVar11 + 1) & 8) != 0) {\n            iVar2 = piVar8[5];\n            if ((iVar2 != 0) && (piVar4 != NULL)) {\n                *piVar4 = iVar2;\n                goto code_r0x00014001b410;\n            }\n            goto code_r0x00014001b4d4;\n        }\n        if ((*puVar12 & 1) != 0) {\n            if ((piVar8[5] != 0) && (piVar4 != NULL)) {\n                fcn.14001a740(piVar4, piVar8[5], *(puVar12 + 0x14));\n                if (*(puVar12 + 0x14) != 8) {\n                    return 0;\n                }\n                if (*piVar4 == 0) {\n                    return 0;\n                }\n                iVar2 = *piVar4;\n                goto code_r0x00014001b410;\n            }\n            goto code_r0x00014001b4d9;\n        }\n        iVar2 = iVar6;\n        if (*(puVar12 + 0x18) != 0) {\n            iVar10 = *(puVar12 + 0x18);\n            iVar2 = fcn.140019efc();\n            iVar2 = iVar10 + iVar2;\n        }\n        if (iVar2 != 0) {\n            if ((piVar8[5] != 0) && (piVar4 != NULL)) {\n                if (iVar10 != 0) {\n                    iVar6 = fcn.140019efc();\n                    iVar6 = iVar6 + *(puVar12 + 0x18);\n                }\n                if (iVar6 != 0) {\n                    return ((*puVar12 & 4) != 0) + 1;\n                }\n            }\n            goto code_r0x00014001b4e3;\n        }\n        if ((piVar8[5] != 0) && (piVar4 != NULL)) {\n            iVar13 = *(puVar12 + 0x14);\n            uVar5 = fcn.14001a30c(piVar8[5], puVar12 + 8);\n            fcn.14001a740(piVar4, uVar5, iVar13);\n            return 0;\n        }\n    }\n    else {\n        iVar2 = (**0x140031a58)();\n        if ((iVar2 != 0) && (piVar4 != NULL)) {\n            *piVar4 = iVar2;\ncode_r0x00014001b410:\n            iVar2 = fcn.14001a30c(iVar2, puVar12 + 8);\n            *piVar4 = iVar2;\n            return 0;\n        }\n        fcn.140014c5c();\ncode_r0x00014001b4d4:\n        fcn.140014c5c();\ncode_r0x00014001b4d9:\n        fcn.140014c5c();\n    }\n    fcn.140014c5c();\ncode_r0x00014001b4e3:\n    fcn.140014c5c();\n    fcn.140014c5c();\n    pcVar1 = swi(3);\n    uVar7 = (*pcVar1)();\n    return uVar7;\n}\n",
        "token_count": 2156
    },
    "14001edc": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.14001edc0(uint64_t arg1, uchar *arg2, int64_t arg3, int64_t arg4)\n\n{\n    int32_t iVar1;\n    int64_t in_stack_00000028;\n    ulong var_3a0h;\n    ulong var_3a8h;\n    ulong var_3b0h;\n    ulong var_3b8h;\n    ulong var_3c0h;\n    uchar auStack1288 [32];\n    ulong uStack1256;\n    uchar *puStack1240;\n    int64_t iStack1232;\n    int64_t iStack1224;\n    uchar uStack1216;\n    uint uStack1215;\n    ushort uStack1211;\n    uchar uStack1209;\n    uint64_t auStack1208 [2];\n    int64_t iStack1192;\n    uint uStack1176;\n    uchar uStack1172;\n    ulong uStack1168;\n    uint uStack1160;\n    ushort uStack1152;\n    uint uStack1136;\n    uchar uStack1132;\n    ulong var_80h;\n    ulong var_bp_78h;\n    ulong var_bp_68h;\n    uchar auStack104 [16];\n    uchar **ppuStack88;\n    uint uStack80;\n    uint64_t uStack72;\n    \n    uStack72 = *0x14003ef38 ^ auStack1288;\n    if ((arg4 == 0) || ((arg3 != 0 && (arg2 == NULL)))) {\n        *(in_stack_00000028 + 0x30) = 1;\n        *(in_stack_00000028 + 0x2c) = 0x16;\n        uStack1256 = 0;\n        fcn.140013f90(0, 0, 0, 0);\n        goto code_r0x00014001ef33;\n    }\n    uStack1215 = 0;\n    uStack1211 = 0;\n    uStack1209 = 0;\n    iStack1224 = 0;\n    if (((arg1 & 2) != 0) || (uStack1216 = 0,  arg2 == NULL)) {\n        uStack1216 = 1;\n    }\n    ppuStack88 = &puStack1240;\n    uStack1176 = 0;\n    uStack1172 = 0;\n    uStack1168 = 0;\n    uStack1160 = 0;\n    uStack1152 = 0;\n    uStack1136 = 0;\n    uStack1132 = 0;\n    auStack104 = ZEXT816(0);\n    uStack80 = 0;\n    puStack1240 = arg2;\n    iStack1232 = arg3;\n    auStack1208[0] = arg1;\n    iStack1192 = arg4;\n    iVar1 = fcn.140020f48(auStack1208, arg2, arg3);\n    if (arg2 != NULL) {\n        if ((arg1 & 1) == 0) {\n            if ((arg1 & 2) == 0) {\n                if (arg3 != 0) {\n                    if (iStack1224 != arg3) goto code_r0x00014001ef21;\ncode_r0x00014001ef68:\n                    arg2[arg3 + -1] = 0;\n                }\n            }\n            else if (arg3 != 0) {\n                if (-1 < iVar1) {\n                    if (iStack1224 == arg3) goto code_r0x00014001ef68;\n                    goto code_r0x00014001ef21;\n                }\n                *arg2 = 0;\n            }\n        }\n        else if (((arg3 != 0) || (iVar1 == 0)) && (iStack1224 != arg3)) {\ncode_r0x00014001ef21:\n            arg2[iStack1224] = 0;\n        }\n    }\n    fcn.140014db4(auStack104._8_8_);\ncode_r0x00014001ef33:\n    fcn.140018790(uStack72 ^ auStack1288);\n    return;\n}\n",
        "token_count": 923
    },
    "14001f10": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint32_t fcn.14001f104(int64_t arg1, char **arg2, ulong arg3)\n\n{\n    char cVar1;\n    char *pcVar2;\n    char **ppcVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    uint *puVar6;\n    uint64_t uVar7;\n    uint32_t uVar8;\n    uint64_t uVar9;\n    char cVar10;\n    uint32_t uVar11;\n    char *pcVar12;\n    uint32_t in_R9D;\n    uint32_t uVar13;\n    \n    pcVar2 = *arg2;\n    uVar9 = arg3;\n    if (pcVar2 == NULL) {\n        puVar6 = fcn.1400142cc();\n        *puVar6 = 0x16;\n        fcn.140014060();\ncode_r0x00014001f176:\n        if (arg2[1] != NULL) {\n            *arg2[1] = *arg2;\n        }\n        return 0;\n    }\n    if ((arg3 != 0) && (0x22 < arg3 - 2)) {\n        *(arg1 + 0x30) = 1;\n        *(arg1 + 0x2c) = 0x16;\n        fcn.140013f90(0, 0, 0, 0);\n        goto code_r0x00014001f176;\n    }\n    cVar10 = *pcVar2;\n    pcVar12 = pcVar2 + 1;\n    uVar11 = in_R9D & 0xff;\n    *arg2 = pcVar12;\n    uVar13 = uVar11 | 2;\n    if ((cVar10 == '-') || (uVar13 = uVar11,  cVar10 == '+')) {\n        uVar11 = uVar13;\n        cVar10 = *pcVar12;\n        pcVar12 = pcVar2 + 2;\n        *arg2 = pcVar12;\n    }\n    if ((arg3 == 0) || (uVar7 = uVar9,  arg3 == 0x10)) {\n        if (cVar10 - 0x30U < 10) {\n            iVar4 = cVar10 + -0x30;\ncode_r0x00014001f1fd:\n            if (iVar4 == 0) {\n                cVar1 = *pcVar12;\n                *arg2 = pcVar12 + 1;\n                if ((cVar1 + 0xa8U & 0xdf) == 0) {\n                    cVar10 = pcVar12[1];\n                    pcVar12 = pcVar12 + 2;\n                    *arg2 = pcVar12;\n                    uVar7 = 0x10;\n                    if (arg3 != 0) {\n                        uVar7 = uVar9;\n                    }\n                }\n                else {\n                    *arg2 = pcVar12;\n                    uVar7 = 8;\n                    if (arg3 != 0) {\n                        uVar7 = uVar9;\n                    }\n                    if ((cVar1 != '\\0') && (*pcVar12 != cVar1)) {\n                        puVar6 = fcn.1400142cc();\n                        *puVar6 = 0x16;\n                        fcn.140014060();\n                        pcVar12 = *arg2;\n                    }\n                }\n                goto code_r0x00014001f260;\n            }\n        }\n        else {\n            if (cVar10 + 0x9fU < 0x1a) {\n                iVar4 = cVar10 + -0x57;\n                goto code_r0x00014001f1fd;\n            }\n            if (cVar10 + 0xbfU < 0x1a) {\n                iVar4 = cVar10 + -0x37;\n                goto code_r0x00014001f1fd;\n            }\n        }\n        uVar7 = 10;\n        if (arg3 != 0) {\n            uVar7 = uVar9;\n        }\n    }\ncode_r0x00014001f260:\n    uVar13 = 0;\n    while( true ) {\n        if (cVar10 - 0x30U < 10) {\n            uVar8 = cVar10 - 0x30;\n        }\n        else if (cVar10 + 0x9fU < 0x1a) {\n            uVar8 = cVar10 - 0x57;\n        }\n        else if (cVar10 + 0xbfU < 0x1a) {\n            uVar8 = cVar10 - 0x37;\n        }\n        else {\n            uVar8 = 0xffffffff;\n        }\n        if (uVar7 <= uVar8) break;\n        cVar10 = *pcVar12;\n        uVar5 = uVar13 * uVar7;\n        uVar8 = uVar5 + uVar8;\n        uVar11 = uVar11 | (uVar8 < uVar5 || 0xffffffff / uVar7 < uVar13) << 2 | 8;\n        pcVar12 = pcVar12 + 1;\n        *arg2 = pcVar12;\n        uVar13 = uVar8;\n    }\n    *arg2 = pcVar12 + -1;\n    if ((cVar10 != '\\0') && (pcVar12[-1] != cVar10)) {\n        puVar6 = fcn.1400142cc();\n        *puVar6 = 0x16;\n        fcn.140014060();\n    }\n    if ((uVar11 & 8) == 0) {\n        *arg2 = pcVar2;\n        if (arg2[1] == NULL) {\n            return 0;\n        }\n        *arg2[1] = pcVar2;\n        return 0;\n    }\n    if ((uVar11 & 4) == 0) {\n        if ((uVar11 & 1) == 0) {\n            if ((uVar11 & 2) == 0) goto code_r0x00014001f383;\ncode_r0x00014001f380:\n            uVar13 = -uVar13;\n            goto code_r0x00014001f383;\n        }\n        if ((uVar11 & 2) == 0) {\n            if (uVar13 < 0x80000000) goto code_r0x00014001f383;\n        }\n        else if (uVar13 < 0x80000001) goto code_r0x00014001f380;\n    }\n    *(arg1 + 0x30) = 1;\n    *(arg1 + 0x2c) = 0x22;\n    if ((uVar11 & 1) != 0) {\n        ppcVar3 = arg2[1];\n        if ((uVar11 & 2) == 0) {\n            if (ppcVar3 != NULL) {\n                *ppcVar3 = *arg2;\n            }\n            return 0x7fffffff;\n        }\n        if (ppcVar3 != NULL) {\n            *ppcVar3 = *arg2;\n        }\n        return 0x80000000;\n    }\n    uVar13 = 0xffffffff;\ncode_r0x00014001f383:\n    if (arg2[1] != NULL) {\n        *arg2[1] = *arg2;\n        return uVar13;\n    }\n    return uVar13;\n}\n",
        "token_count": 1644
    },
    "14001f3b": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint32_t fcn.14001f3b4(int64_t arg1, uint16_t **arg2, ulong arg3)\n\n{\n    uint16_t uVar1;\n    uint16_t *puVar2;\n    uint16_t *puVar3;\n    uint16_t **ppuVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    uint *puVar7;\n    uint64_t uVar8;\n    uint32_t uVar9;\n    uint32_t uVar10;\n    uint16_t uVar11;\n    uint32_t uVar12;\n    uint32_t in_R9D;\n    uint64_t uVar13;\n    int32_t iStack152;\n    \n    puVar2 = *arg2;\n    uVar13 = arg3;\n    if (puVar2 == NULL) {\n        puVar7 = fcn.1400142cc();\n        *puVar7 = 0x16;\n        fcn.140014060();\ncode_r0x00014001f42d:\n        if (arg2[1] != NULL) {\n            *arg2[1] = *arg2;\n        }\n        return 0;\n    }\n    if ((arg3 != 0) && (0x22 < arg3 - 2)) {\n        *(arg1 + 0x30) = 1;\n        *(arg1 + 0x2c) = 0x16;\n        fcn.140013f90(0, 0, 0, 0);\n        goto code_r0x00014001f42d;\n    }\n    uVar11 = *puVar2;\n    *arg2 = puVar2 + 1;\n    uVar12 = in_R9D & 0xff | 2;\n    if (uVar11 != 0x2d) {\n        uVar12 = in_R9D & 0xff;\n    }\n    if ((uVar11 - 0x2b & 0xfffd) == 0) {\n        uVar11 = puVar2[1];\n        *arg2 = puVar2 + 2;\n    }\n    iStack152 = 0xae6;\n    uVar8 = uVar13;\n    if ((arg3 & 0xffffffef) != 0) goto code_r0x00014001f7e8;\n    if (uVar11 < 0x30) goto code_r0x00014001f737;\n    iVar5 = 0x30;\n    if (uVar11 < 0x3a) {\ncode_r0x00014001f57c:\n        iVar5 = uVar11 - iVar5;\ncode_r0x00014001f732:\n        if (iVar5 == -1) goto code_r0x00014001f737;\ncode_r0x00014001f759:\n        if (iVar5 != 0) goto code_r0x00014001f7d9;\n        puVar3 = *arg2;\n        uVar1 = *puVar3;\n        *arg2 = puVar3 + 1;\n        if ((uVar1 - 0x58 & 0xffdf) != 0) {\n            *arg2 = puVar3;\n            uVar8 = 8;\n            if (arg3 != 0) {\n                uVar8 = uVar13;\n            }\n            if ((uVar1 != 0) && (*puVar3 != uVar1)) {\n                puVar7 = fcn.1400142cc();\n                *puVar7 = 0x16;\n                fcn.140014060();\n            }\n            goto code_r0x00014001f7e8;\n        }\n        uVar11 = puVar3[1];\n        *arg2 = puVar3 + 2;\n        uVar8 = 0x10;\n    }\n    else {\n        if (uVar11 < 0xff10) {\n            if (0x65f < uVar11) {\n                if (uVar11 < 0x66a) {\n                    iVar5 = uVar11 - 0x660;\n                    goto code_r0x00014001f732;\n                }\n                if (0x6ef < uVar11) {\n                    if (uVar11 < 0x6fa) {\n                        iVar5 = uVar11 - 0x6f0;\n                        goto code_r0x00014001f732;\n                    }\n                    if (0x965 < uVar11) {\n                        if (uVar11 < 0x970) {\n                            iVar5 = uVar11 - 0x966;\n                            goto code_r0x00014001f732;\n                        }\n                        if (0x9e5 < uVar11) {\n                            if (uVar11 < 0x9f0) {\n                                iVar5 = uVar11 - 0x9e6;\n                                goto code_r0x00014001f732;\n                            }\n                            if (0xa65 < uVar11) {\n                                if (uVar11 < 0xa70) {\n                                    iVar5 = uVar11 - 0xa66;\n                                    goto code_r0x00014001f732;\n                                }\n                                if ((0xae5 < uVar11) &&\n                                   ((iVar5 = iStack152,  uVar11 < 0xaf0 ||\n                                    ((iVar5 = 0xb66,  0xb65 < uVar11 &&\n                                     ((uVar11 < 0xb70 ||\n                                      ((iVar5 = 0xc66,  0xc65 < uVar11 &&\n                                       ((uVar11 < 0xc70 ||\n                                        ((iVar5 = 0xce6,  0xce5 < uVar11 &&\n                                         ((uVar11 < 0xcf0 ||\n                                          ((iVar5 = 0xd66,  0xd65 < uVar11 &&\n                                           ((uVar11 < 0xd70 ||\n                                            ((iVar5 = 0xe50,  0xe4f < uVar11 &&\n                                             ((uVar11 < 0xe5a ||\n                                              ((iVar5 = 0xed0,  0xecf < uVar11 &&\n                                               ((uVar11 < 0xeda ||\n                                                ((iVar5 = 0xf20,  0xf1f < uVar11 &&\n                                                 ((uVar11 < 0xf2a ||\n                                                  ((iVar5 = 0x1040,  0x103f < uVar11 &&\n                                                   ((uVar11 < 0x104a ||\n                                                    ((iVar5 = 0x17e0,  0x17df < uVar11 &&\n                                                     ((uVar11 < 0x17ea || (iVar5 = 0x1810,  uVar11 + 0xe7f0 < 10))))))))\n                                                  )))))))))))))))))))))))))))))))) goto code_r0x00014001f57c;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        else if (uVar11 < 0xff1a) {\n            iVar5 = uVar11 - 0xff10;\n            goto code_r0x00014001f732;\n        }\ncode_r0x00014001f737:\n        uVar9 = uVar11;\n        if ((uVar11 - 0x41 < 0x1a) || (uVar11 - 0x61 < 0x1a)) {\n            if (uVar11 - 0x61 < 0x1a) {\n                uVar9 = uVar11 - 0x20;\n            }\n            iVar5 = uVar9 - 0x37;\n            goto code_r0x00014001f759;\n        }\ncode_r0x00014001f7d9:\n        uVar8 = 10;\n    }\n    if (arg3 != 0) {\n        uVar8 = uVar13;\n    }\ncode_r0x00014001f7e8:\n    uVar9 = 0;\n    do {\n        if (uVar11 < 0x30) goto code_r0x00014001f9b8;\n        if (uVar11 < 0x3a) {\n            uVar10 = uVar11 - 0x30;\ncode_r0x00014001f9b3:\n            if (uVar10 == 0xffffffff) goto code_r0x00014001f9b8;\n        }\n        else {\n            if (uVar11 < 0xff10) {\n                if (0x65f < uVar11) {\n                    if (uVar11 < 0x66a) {\n                        uVar10 = uVar11 - 0x660;\n                        goto code_r0x00014001f9b3;\n                    }\n                    if (0x6ef < uVar11) {\n                        if (uVar11 < 0x6fa) {\n                            uVar10 = uVar11 - 0x6f0;\n                            goto code_r0x00014001f9b3;\n                        }\n                        if (0x965 < uVar11) {\n                            if (uVar11 < 0x970) {\n                                uVar10 = uVar11 - 0x966;\n                                goto code_r0x00014001f9b3;\n                            }\n                            if (0x9e5 < uVar11) {\n                                iVar5 = 0x9e6;\n                                if (uVar11 < 0x9f0) {\ncode_r0x00014001f897:\n                                    uVar10 = uVar11 - iVar5;\n                                    goto code_r0x00014001f9b3;\n                                }\n                                if (0xa65 < uVar11) {\n                                    iVar5 = 0xa66;\n                                    if (uVar11 < 0xa70) goto code_r0x00014001f897;\n                                    if (0xae5 < uVar11) {\n                                        iVar5 = iStack152;\n                                        if (uVar11 < 0xaf0) goto code_r0x00014001f897;\n                                        iVar5 = 0xb66;\n                                        if (0xb65 < uVar11) {\n                                            if (uVar11 < 0xb70) goto code_r0x00014001f897;\n                                            iVar5 = 0xc66;\n                                            if (0xc65 < uVar11) {\n                                                if (uVar11 < 0xc70) goto code_r0x00014001f897;\n                                                iVar5 = 0xce6;\n                                                if (0xce5 < uVar11) {\n                                                    if (uVar11 < 0xcf0) goto code_r0x00014001f897;\n                                                    iVar5 = 0xd66;\n                                                    if (0xd65 < uVar11) {\n                                                        if (uVar11 < 0xd70) goto code_r0x00014001f897;\n                                                        iVar5 = 0xe50;\n                                                        if (0xe4f < uVar11) {\n                                                            if (uVar11 < 0xe5a) goto code_r0x00014001f897;\n                                                            iVar5 = 0xed0;\n                                                            if (0xecf < uVar11) {\n                                                                if (uVar11 < 0xeda) goto code_r0x00014001f897;\n                                                                iVar5 = 0xf20;\n                                                                if (0xf1f < uVar11) {\n                                                                    if (uVar11 < 0xf2a) goto code_r0x00014001f897;\n                                                                    iVar5 = 0x1040;\n                                                                    if (0x103f < uVar11) {\n                                                                        if (uVar11 < 0x104a) goto code_r0x00014001f897;\n                                                                        iVar5 = 0x17e0;\n                                                                        if (0x17df < uVar11) {\n                                                                            if (uVar11 < 0x17ea)\n                                                                            goto code_r0x00014001f897;\n                                                                            if (uVar11 + 0xe7f0 < 10) {\n                                                                                uVar10 = uVar11 - 0x1810;\n                                                                                goto code_r0x00014001f9b3;\n                                                                            }\n                                                                        }\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            else if (uVar11 < 0xff1a) {\n                uVar10 = uVar11 - 0xff10;\n                goto code_r0x00014001f9b3;\n            }\ncode_r0x00014001f9b8:\n            uVar10 = uVar11;\n            if ((uVar11 - 0x41 < 0x1a) || (uVar11 - 0x61 < 0x1a)) {\n                if (uVar11 - 0x61 < 0x1a) {\n                    uVar10 = uVar10 - 0x20;\n                }\n                uVar10 = uVar10 - 0x37;\n            }\n            else {\n                uVar10 = 0xffffffff;\n            }\n        }\n        puVar3 = *arg2;\n        if (uVar8 <= uVar10) break;\n        uVar11 = *puVar3;\n        uVar6 = uVar9 * uVar8;\n        uVar10 = uVar6 + uVar10;\n        *arg2 = puVar3 + 1;\n        uVar12 = uVar12 | (uVar10 < uVar6 || 0xffffffff / uVar8 < uVar9) << 2 | 8;\n        uVar9 = uVar10;\n    } while( true );\n    *arg2 = puVar3 + -1;\n    if ((uVar11 != 0) && (puVar3[-1] != uVar11)) {\n        puVar7 = fcn.1400142cc();\n        *puVar7 = 0x16;\n        fcn.140014060();\n    }\n    if ((uVar12 & 8) == 0) {\n        *arg2 = puVar2;\n        if (arg2[1] == NULL) {\n            return 0;\n        }\n        *arg2[1] = puVar2;\n        return 0;\n    }\n    if ((uVar12 & 4) == 0) {\n        if ((uVar12 & 1) == 0) {\n            if ((uVar12 & 2) == 0) goto code_r0x00014001fadf;\ncode_r0x00014001fadd:\n            uVar9 = -uVar9;\n            goto code_r0x00014001fadf;\n        }\n        if ((uVar12 & 2) == 0) {\n            if (uVar9 < 0x80000000) goto code_r0x00014001fadf;\n        }\n        else if (uVar9 < 0x80000001) goto code_r0x00014001fadd;\n    }\n    *(arg1 + 0x30) = 1;\n    *(arg1 + 0x2c) = 0x22;\n    if ((uVar12 & 1) != 0) {\n        ppuVar4 = arg2[1];\n        if ((uVar12 & 2) == 0) {\n            if (ppuVar4 != NULL) {\n                *ppuVar4 = *arg2;\n            }\n            return 0x7fffffff;\n        }\n        if (ppuVar4 != NULL) {\n            *ppuVar4 = *arg2;\n        }\n        return 0x80000000;\n    }\n    uVar9 = 0xffffffff;\ncode_r0x00014001fadf:\n    if (arg2[1] != NULL) {\n        *arg2[1] = *arg2;\n        return uVar9;\n    }\n    return uVar9;\n}\n",
        "token_count": 3444
    },
    "1400239a": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0"
        ],
        "decompiled_code": "\nuint fcn.1400239a4(int64_t arg1, int64_t arg2)\n\n{\n    uint uVar1;\n    \n    if (arg1 == 0) {\n        *(arg2 + 0x30) = 1;\n        *(arg2 + 0x2c) = 0x16;\n        fcn.140013f90(0, 0, 0, 0);\n    }\n    else {\n        if ((*(arg1 + 0x14) >> 0xc & 1) == 0) {\n            fcn.140025a0c(arg1);\n            uVar1 = fcn.140023a20(arg1, arg2);\n            fcn.140025a18(arg1);\n            return uVar1;\n        }\n        fcn.140026c94(arg1);\n    }\n    return 0xffffffff;\n}\n",
        "token_count": 190
    },
    "140023a2": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint fcn.140023a20(int64_t arg1, int64_t arg2)\n\n{\n    uint uVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    \n    if (arg1 == 0) {\n        *(arg2 + 0x30) = 1;\n        *(arg2 + 0x2c) = 0x16;\n        fcn.140013f90(0, 0, 0, 0);\n        uVar1 = 0xffffffff;\n    }\n    else {\n        uVar1 = 0xffffffff;\n        if ((*(arg1 + 0x14) >> 0xd & 1) != 0) {\n            uVar1 = fcn.140025708(arg1, arg2);\n            fcn.1400273e0(arg1);\n            uVar2 = fcn.140026bfc(arg1);\n            iVar3 = fcn.1400271b4(uVar2, arg2);\n            if (iVar3 < 0) {\n                uVar1 = 0xffffffff;\n            }\n            else if (*(arg1 + 0x28) != 0) {\n                fcn.140014db4(*(arg1 + 0x28));\n                *(arg1 + 0x28) = 0;\n            }\n        }\n        fcn.140026c94(arg1);\n    }\n    return uVar1;\n}\n",
        "token_count": 309
    },
    "140026cb": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nint64_t * fcn.140026cb0(int64_t *arg1)\n\n{\n    uint32_t *puVar1;\n    int64_t *piVar2;\n    uint32_t uVar3;\n    int64_t iVar4;\n    int64_t *piVar5;\n    \n    piVar5 = *0x140040448 + 0x18;\n    piVar2 = piVar5 + *0x140040440 + -3;\n    do {\n        if (piVar5 == piVar2) {\ncode_r0x000140026d7e:\n            *arg1 = 0;\n            return arg1;\n        }\n        iVar4 = *piVar5;\n        if (iVar4 == 0) {\n            iVar4 = fcn.140014d3c(1, 0x58);\n            *piVar5 = iVar4;\n            fcn.140014db4(0);\n            if (*piVar5 != 0) {\n                *(*piVar5 + 0x18) = 0xffffffff;\n                fcn.1400155f8(*piVar5 + 0x30, 4000, 0);\n                iVar4 = *piVar5;\n                LOCK();\n                *(iVar4 + 0x14) = *(iVar4 + 0x14) | 0x2000;\n                fcn.140025a0c(iVar4);\ncode_r0x000140026d79:\n                *arg1 = iVar4;\n                return arg1;\n            }\n            goto code_r0x000140026d7e;\n        }\n        if ((*(iVar4 + 0x14) >> 0xd & 1) == 0) {\n            fcn.140025a0c(iVar4);\n            uVar3 = *(iVar4 + 0x14);\n            while( true ) {\n                LOCK();\n                puVar1 = iVar4 + 0x14;\n                if (uVar3 == *puVar1) break;\n                uVar3 = *puVar1;\n            }\n            *puVar1 = uVar3 | 0x2000;\n            if ((~(uVar3 >> 0xd) & 1) != 0) goto code_r0x000140026d79;\n            fcn.140025a18(iVar4);\n        }\n        piVar5 = piVar5 + 1;\n    } while( true );\n}\n",
        "token_count": 525
    },
    "14002713": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint fcn.14002713c(ulong noname_0, uint32_t *arg2, uint32_t **arg3, uint32_t *arg4)\n\n{\n    uint32_t uVar1;\n    uint32_t *arg2_00;\n    uint uVar2;\n    \n    fcn.140024db0(*arg2);\n    uVar1 = **arg3;\n    arg2_00 = arg3[1];\n    if ((*(*((uVar1 >> 6) * 8 + 0x140040030) + 0x38 + (uVar1 & 0x3f) * 0x48) & 1) == 0) {\n        *(arg2_00 + 0xc) = 1;\n        arg2_00[0xb] = 9;\n        uVar2 = 0xffffffff;\n    }\n    else {\n        uVar2 = fcn.140027310(uVar1, arg2_00);\n    }\n    fcn.140024e98(*arg4);\n    return uVar2;\n}\n",
        "token_count": 233
    },
    "1400271b": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nulong fcn.1400271b4(ulong arg1, int64_t arg2)\n\n{\n    ulong uVar1;\n    uint32_t auStackX8 [4];\n    uchar auStackX24 [8];\n    uint32_t auStackX32 [2];\n    uint32_t auStack40 [2];\n    uint32_t *puStack32;\n    int64_t iStack24;\n    \n    if (arg1 == 0xfffffffe) {\n        *(arg2 + 0x38) = 1;\n        *(arg2 + 0x34) = 0;\n        *(arg2 + 0x30) = 1;\n        *(arg2 + 0x2c) = 9;\n    }\n    else {\n        auStackX8[0] = arg1;\n        if (((-1 < arg1) && (arg1 < *0x140040430)) &&\n           ((*(*((arg1 >> 6) * 8 + 0x140040030) + 0x38 + (arg1 & 0x3f) * 0x48) & 1) != 0)) {\n            puStack32 = auStackX8;\n            auStackX32[0] = arg1;\n            auStack40[0] = arg1;\n            iStack24 = arg2;\n            uVar1 = fcn.14002713c(auStackX24, auStack40, &puStack32, auStackX32);\n            return uVar1;\n        }\n        *(arg2 + 0x38) = 1;\n        *(arg2 + 0x34) = 0;\n        *(arg2 + 0x30) = 1;\n        *(arg2 + 0x2c) = 9;\n        fcn.140013f90(0, 0, 0, 0);\n    }\n    return 0xffffffff;\n}\n",
        "token_count": 414
    },
    "14002870": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint fcn.14002870c(ulong arg1, ulong arg2, ulong arg3, int64_t arg4)\n\n{\n    uint uVar1;\n    uint64_t uVar2;\n    \n    if (arg1 == 0xfffffffe) {\n        *(arg4 + 0x38) = 1;\n        *(arg4 + 0x34) = 0;\n        *(arg4 + 0x30) = 1;\n        *(arg4 + 0x2c) = 9;\n    }\n    else {\n        if ((-1 < arg1) && (arg1 < *0x140040430)) {\n            uVar2 = arg1 >> 6;\n            if ((*(*(uVar2 * 8 + 0x140040030) + 0x38 + (arg1 & 0x3f) * 0x48) & 1) != 0) {\n                fcn.140024db0(arg1 & 0xffffffff);\n                uVar1 = 0xffffffff;\n                if ((*(*(uVar2 * 8 + 0x140040030) + 0x38 + (arg1 & 0x3f) * 0x48) & 1) == 0) {\n                    *(arg4 + 0x30) = 1;\n                    *(arg4 + 0x2c) = 9;\n                    *(arg4 + 0x38) = 1;\n                    *(arg4 + 0x34) = 0;\n                }\n                else {\n                    uVar1 = fcn.140028834(arg1, arg2, arg3, arg4);\n                }\n                fcn.140024e98(arg1);\n                return uVar1;\n            }\n        }\n        *(arg4 + 0x38) = 1;\n        *(arg4 + 0x34) = 0;\n        *(arg4 + 0x30) = 1;\n        *(arg4 + 0x2c) = 9;\n        fcn.140013f90(0, 0, 0, 0);\n    }\n    return 0xffffffff;\n}\n",
        "token_count": 467
    },
    "140028b4": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0"
        ],
        "decompiled_code": "\nint32_t fcn.140028b44(void)\n\n{\n    int64_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int64_t iVar4;\n    int32_t iStack24;\n    \n    iStack24 = 0;\n    fcn.140015258(8);\n    for (iVar3 = 3; iVar3 != *0x140040440; iVar3 = iVar3 + 1) {\n        iVar4 = iVar3;\n        iVar1 = *(*0x140040448 + iVar4 * 8);\n        if (iVar1 != 0) {\n            if (((*(iVar1 + 0x14) >> 0xd & 1) != 0) &&\n               (iVar2 = fcn.140023ac4(*(*0x140040448 + iVar4 * 8)),  iVar2 != -1)) {\n                iStack24 = iStack24 + 1;\n            }\n            (*_sym.imp.KERNEL32.dll_DeleteCriticalSection)(*(*0x140040448 + iVar4 * 8) + 0x30);\n            fcn.140014db4(*(*0x140040448 + iVar4 * 8));\n            *(*0x140040448 + iVar4 * 8) = 0;\n        }\n    }\n    fcn.1400152b8(8);\n    return iStack24;\n}\n",
        "token_count": 299
    },
    "14002b15": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0"
        ],
        "decompiled_code": "\nuint32_t fcn.14002b150(void)\n\n{\n    uint32_t uVar1;\n    uint32_t in_MXCSR;\n    \n    uVar1 = (((in_MXCSR & 0x3f) >> 2 & 8 | in_MXCSR & 0x10) >> 2 | in_MXCSR & 8) >> 1 |\n            ((in_MXCSR & 2) << 3 | in_MXCSR & 4) * 2 | (in_MXCSR & 1) << 4;\n    return uVar1 << 0x18 | uVar1;\n}\n",
        "token_count": 137
    },
    "14002b1a": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0"
        ],
        "decompiled_code": "\nvoid fcn.14002b1a8(ulong arg1)\n\n{\n    return;\n}\n",
        "token_count": 21
    },
    "14002b2e": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0"
        ],
        "decompiled_code": "\nvoid fcn.14002b2e4(ulong arg1)\n\n{\n    return;\n}\n",
        "token_count": 21
    },
    "14000443": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\nvoid fcn.140004438(ulong param_1)\n\n{\n    int32_t *piVar1;\n    int64_t iVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int64_t noname_0;\n    ulong var_30h;\n    uchar auStack328 [32];\n    uchar *puStack296;\n    ulong *puStack288;\n    ulong *puStack280;\n    int64_t *piStack272;\n    uint *puStack264;\n    uchar *puStack256;\n    ulong *puStack248;\n    uint *puStack240;\n    uchar uStack232;\n    uchar auStack231 [3];\n    uint uStack228;\n    uint auStack224 [2];\n    ulong uStack216;\n    int64_t iStack208;\n    ulong uStack200;\n    ulong uStack192;\n    uchar auStack184 [16];\n    uchar auStack168 [32];\n    ulong var_80h;\n    ulong var_bp_78h;\n    ulong var_70h;\n    ulong var_60h;\n    uint64_t uStack24;\n    \n    uStack24 = *0x14003ef38 ^ auStack328;\n    uVar3 = fcn.14000c9e4(param_1);\n    auStack184 = ZEXT816(0);\n    if (*0x140040768 != 0) {\n        iVar4 = *(*0x140040768 + 8);\n        while (iVar4 != 0) {\n            LOCK();\n            piVar1 = *0x140040768 + 8;\n            if (iVar4 == *piVar1) {\n                *piVar1 = iVar4 + 1;\n                iVar2 = *0x140040760;\n                auStack184 = CONCAT88(*0x140040768, *0x140040760);\n                if ((((*0x140040760 != 0) && (5 < *0x14003e240)) && ((*0x14003e250 & 0x200000000000) != 0)) &&\n                   ((*0x14003e258 & 0x200000000000) == *0x14003e258)) {\n                    noname_0 = *0x140040760;\n                    uStack228 = uVar3;\n                    uStack216 = fcn.1400055bc(*0x140040760, auStack168);\n                    uStack232 = *(iVar2 + 0x1c);\n                    auStack224[0] = fcn.1400056dc();\n                    iStack208 = iVar2 + 0x24;\n                    uStack200 = 0x140037580;\n                    uStack192 = *(iVar2 + 0x10);\n                    auStack231[0] = fcn.140008428();\n                    puStack240 = &uStack228;\n                    puStack248 = &uStack216;\n                    puStack256 = &uStack232;\n                    puStack264 = auStack224;\n                    piStack272 = &iStack208;\n                    puStack280 = &uStack200;\n                    puStack288 = &uStack192;\n                    puStack296 = auStack231;\n                    fcn.1400012b4(noname_0, 0x14003949d);\n                }\n                break;\n            }\n            iVar4 = *piVar1;\n        }\n    }\n    fcn.1400030c4(auStack184);\n    fcn.140018790(uStack24 ^ auStack328);\n    return;\n}\n",
        "token_count": 748
    },
    "1400045b": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\nvoid fcn.1400045bc(ulong arg1)\n\n{\n    int32_t *piVar1;\n    int64_t iVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int64_t noname_0;\n    ulong var_30h;\n    uchar auStack328 [32];\n    uchar *puStack296;\n    ulong *puStack288;\n    ulong *puStack280;\n    int64_t *piStack272;\n    uint *puStack264;\n    uchar *puStack256;\n    ulong *puStack248;\n    uint *puStack240;\n    uchar uStack232;\n    uchar auStack231 [3];\n    uint uStack228;\n    uint auStack224 [2];\n    ulong uStack216;\n    int64_t iStack208;\n    ulong uStack200;\n    ulong uStack192;\n    uchar auStack184 [16];\n    uchar auStack168 [32];\n    ulong var_80h;\n    ulong var_bp_78h;\n    ulong var_70h;\n    ulong var_60h;\n    uint64_t uStack24;\n    \n    uStack24 = *0x14003ef38 ^ auStack328;\n    uVar3 = fcn.14000bbb0(arg1);\n    auStack184 = ZEXT816(0);\n    if (*0x140040768 != 0) {\n        iVar4 = *(*0x140040768 + 8);\n        while (iVar4 != 0) {\n            LOCK();\n            piVar1 = *0x140040768 + 8;\n            if (iVar4 == *piVar1) {\n                *piVar1 = iVar4 + 1;\n                iVar2 = *0x140040760;\n                auStack184 = CONCAT88(*0x140040768, *0x140040760);\n                if ((((*0x140040760 != 0) && (5 < *0x14003e240)) && ((*0x14003e250 & 0x200000000000) != 0)) &&\n                   ((*0x14003e258 & 0x200000000000) == *0x14003e258)) {\n                    noname_0 = *0x140040760;\n                    uStack228 = uVar3;\n                    uStack216 = fcn.1400055bc(*0x140040760, auStack168);\n                    uStack232 = *(iVar2 + 0x1c);\n                    auStack224[0] = fcn.1400056dc();\n                    iStack208 = iVar2 + 0x24;\n                    uStack200 = 0x140037580;\n                    uStack192 = *(iVar2 + 0x10);\n                    auStack231[0] = fcn.140008428();\n                    puStack240 = &uStack228;\n                    puStack248 = &uStack216;\n                    puStack256 = &uStack232;\n                    puStack264 = auStack224;\n                    piStack272 = &iStack208;\n                    puStack280 = &uStack200;\n                    puStack288 = &uStack192;\n                    puStack296 = auStack231;\n                    fcn.1400012b4(noname_0, 0x1400395b0);\n                }\n                break;\n            }\n            iVar4 = *piVar1;\n        }\n    }\n    fcn.1400030c4(auStack184);\n    fcn.140018790(uStack24 ^ auStack328);\n    return;\n}\n",
        "token_count": 746
    },
    "140006cd": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_8h\n// WARNING: Variable defined which should be unmapped: var_10h\n// WARNING: Variable defined which should be unmapped: var_bp_18h\n// WARNING: Variable defined which should be unmapped: var_24h\n// WARNING: Variable defined which should be unmapped: var_2ch\n// WARNING: Variable defined which should be unmapped: var_34h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.140006cd8(uint64_t *arg1, ulong *arg2)\n\n{\n    int32_t *piVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint uVar5;\n    int64_t iVar6;\n    uchar *puVar7;\n    ulong uVar8;\n    int64_t iVar9;\n    int64_t iVar10;\n    uint64_t uVar11;\n    uint64_t *arg4;\n    int32_t iVar12;\n    ulong var_8h_2;\n    ulong var_10h_2;\n    ulong var_bp_30h;\n    ulong var_bp_38h;\n    ulong var_50h_2;\n    ulong var_58h_2;\n    ulong var_60h_2;\n    ulong var_70h_2;\n    ulong var_78h_2;\n    ulong var_80h_2;\n    ulong var_88h;\n    ulong var_90h;\n    ulong var_98h;\n    ulong var_a0h;\n    ulong var_a8h;\n    ulong var_b0h;\n    ulong var_b8h;\n    ulong var_c0h;\n    ulong var_c8h;\n    ulong var_d8h;\n    ulong var_e8h;\n    ulong var_f8h;\n    ulong var_108h;\n    ulong var_118h;\n    ulong var_128h;\n    ulong var_138h;\n    ulong var_148h;\n    ulong var_158h;\n    ulong var_190h;\n    ulong var_1c8h;\n    ulong var_200h;\n    ulong var_238h;\n    ulong var_270h;\n    ulong var_2a8h;\n    ulong var_2e0h;\n    ulong var_370h;\n    ulong var_390h;\n    ulong var_5b0h;\n    ulong var_640h;\n    ulong var_6d0h;\n    ulong var_760h;\n    ulong var_7f0h;\n    ulong var_880h;\n    ulong var_910h;\n    ulong var_9a0h;\n    ulong var_9c0h;\n    ulong var_9c8h;\n    ulong var_9d0h;\n    ulong var_9d8h;\n    ulong var_9e0h;\n    ulong var_9e8h;\n    ulong var_9f0h;\n    ulong var_9f8h;\n    ulong var_a00h;\n    ulong var_a08h;\n    ulong var_a10h;\n    ulong var_a18h;\n    ulong var_a20h;\n    ulong var_a28h;\n    ulong var_a30h;\n    ulong var_a38h;\n    ulong var_a40h;\n    uchar auStack2952 [32];\n    ulong uStack2920;\n    ulong *puStack2912;\n    int64_t *piStack2904;\n    int64_t *piStack2896;\n    ulong *puStack2888;\n    uchar *puStack2880;\n    ulong *puStack2872;\n    ulong *puStack2864;\n    uchar uStack2856;\n    uchar auStack2855 [7];\n    ulong uStack2848;\n    uchar uStack2840;\n    uchar uStack2839;\n    uchar uStack2838;\n    uchar uStack2837;\n    uchar uStack2836;\n    uchar uStack2835;\n    uchar uStack2834;\n    uchar uStack2833;\n    uchar uStack2832;\n    uchar uStack2831;\n    uchar uStack2830;\n    uchar uStack2829;\n    uchar uStack2828;\n    uchar auStack2827 [3];\n    uint32_t uStack2824;\n    uint32_t uStack2816;\n    uint32_t uStack2812;\n    uint32_t uStack2808;\n    int64_t iStack2800;\n    int64_t iStack2792;\n    ulong uStack2784;\n    ulong uStack2776;\n    uint32_t uStack2768;\n    uint32_t uStack2764;\n    uint32_t uStack2760;\n    uint32_t uStack2756;\n    uint uStack2752;\n    uint uStack2748;\n    uint uStack2744;\n    uint32_t uStack2740;\n    uint uStack2736;\n    uint32_t uStack2732;\n    uint uStack2728;\n    uint uStack2724;\n    uint uStack2720;\n    ulong *puStack2712;\n    uchar auStack2704 [16];\n    int64_t iStack2688;\n    int64_t iStack2680;\n    ulong uStack2672;\n    ulong uStack2664;\n    int64_t iStack2656;\n    int64_t iStack2648;\n    ulong uStack2640;\n    ulong uStack2632;\n    int64_t iStack2624;\n    int64_t iStack2616;\n    ulong uStack2608;\n    ulong uStack2600;\n    int64_t iStack2592;\n    int64_t iStack2584;\n    ulong uStack2576;\n    ulong uStack2568;\n    int64_t iStack2560;\n    int64_t iStack2552;\n    ulong uStack2544;\n    ulong uStack2536;\n    int64_t iStack2528;\n    int64_t iStack2520;\n    ulong uStack2512;\n    ulong uStack2504;\n    uchar auStack2496 [16];\n    uchar auStack2480 [16];\n    uchar auStack2464 [16];\n    uchar auStack2448 [16];\n    uchar auStack2432 [16];\n    uchar auStack2416 [16];\n    uchar auStack2400 [16];\n    uchar auStack2384 [16];\n    uchar auStack2368 [16];\n    ushort auStack2352 [28];\n    ushort auStack2296 [28];\n    ushort auStack2240 [28];\n    ushort auStack2184 [28];\n    ushort auStack2128 [28];\n    ushort auStack2072 [28];\n    ushort auStack2016 [28];\n    uchar auStack1960 [144];\n    uint uStack1816;\n    uchar auStack1812 [4];\n    uint32_t uStack1808;\n    uint32_t uStack1784;\n    uchar auStack1240 [144];\n    uchar auStack1096 [144];\n    uchar auStack952 [144];\n    uchar auStack808 [144];\n    uchar auStack664 [144];\n    uchar auStack520 [144];\n    uchar auStack376 [144];\n    ulong auStack232 [4];\n    uchar *puStack200;\n    ulong uStack192;\n    int64_t iStack184;\n    int32_t iStack176;\n    uint uStack172;\n    ulong uStack168;\n    int32_t iStack160;\n    uint uStack156;\n    int64_t iStack152;\n    int32_t iStack144;\n    uint uStack140;\n    uint *var_80h;\n    ulong var_78h;\n    uchar *var_70h;\n    ulong var_bp_68h;\n    int64_t var_60h;\n    ulong var_58h;\n    int64_t var_50h;\n    ulong var_bp_48h;\n    uint64_t var_bp_40h;\n    ulong var_34h;\n    ulong var_2ch;\n    ulong var_24h;\n    ulong var_bp_18h;\n    ulong var_10h;\n    ulong var_8h;\n    \n    var_bp_40h = *0x14003ef38 ^ auStack2952;\n    uStack2848 = arg1;\n    puStack2712 = arg2;\n    iVar6 = (*_sym.imp.KERNEL32.dll_CreateToolhelp32Snapshot)();\n    if (iVar6 == -1) {\n        uVar2 = fcn.14000e908();\n        auStack2496 = ZEXT816(0);\n        if (*0x140040768 != 0) {\n            iVar4 = *(*0x140040768 + 8);\n            while (iVar4 != 0) {\n                LOCK();\n                piVar1 = *0x140040768 + 8;\n                if (iVar4 == *piVar1) {\n                    *piVar1 = iVar4 + 1;\n                    iVar6 = *0x140040760;\n                    auStack2496 = CONCAT88(*0x140040768, *0x140040760);\n                    if ((((*0x140040760 != 0) && (5 < *0x14003e240)) && ((*0x14003e250 & 0x200000000000) != 0)) &&\n                       ((*0x14003e258 & 0x200000000000) == *0x14003e258)) {\n                        uStack2752 = 0;\n                        iVar9 = *0x140040760;\n                        uStack2504 = fcn.1400055bc(*0x140040760, auStack1240);\n                        uStack2840 = *(iVar6 + 0x1c);\n                        uStack2748 = fcn.1400056dc();\n                        iStack2688 = iVar6 + 0x24;\n                        uStack2672 = *(iVar6 + 0x10);\n                        iStack2680 = 0x140037580;\n                        uStack2839 = fcn.140008428();\n                        puStack2864 = &uStack2752;\n                        puStack2872 = &uStack2504;\n                        puStack2880 = &uStack2840;\n                        puStack2888 = &uStack2748;\n                        piStack2896 = &iStack2688;\n                        piStack2904 = &iStack2680;\n                        puStack2912 = &uStack2672;\n                        uStack2920 = &uStack2839;\n                        fcn.1400012b4(iVar9, 0x140039a88);\n                    }\n                    break;\n                }\n                iVar4 = *piVar1;\n            }\n        }\n        fcn.1400030c4(auStack2496);\n        auStack2480 = ZEXT816(0);\n        if (*0x140040768 != 0) {\n            iVar4 = *(*0x140040768 + 8);\n            while (iVar4 != 0) {\n                LOCK();\n                piVar1 = *0x140040768 + 8;\n                if (iVar4 == *piVar1) {\n                    *piVar1 = iVar4 + 1;\n                    iVar6 = *0x140040760;\n                    auStack2480 = CONCAT88(*0x140040768, *0x140040760);\n                    if (*0x140040760 != 0) {\n                        uVar3 = fcn.1400056dc();\n                        if (uVar2 != *(iVar6 + 0x20)) {\n                            *(iVar6 + 0x20) = uVar2;\n                            *(iVar6 + 8) = 0x140037668;\n                            *(iVar6 + 0x18) = uVar3;\n                        }\n                        arg2 = puStack2712;\n                        if (((5 < *0x14003e240) && ((*0x14003e250 & 0x200000000000) != 0)) &&\n                           ((*0x14003e258 & 0x200000000000) == *0x14003e258)) {\n                            iVar9 = iVar6;\n                            uStack2824 = uVar2;\n                            uStack2776 = fcn.1400055bc(iVar6, auStack1960);\n                            uStack2856 = *(iVar6 + 0x1c);\n                            iStack2800 = iVar6 + 0x24;\n                            uStack2848 = uStack2848 & 0xffffffff00000000 | uVar3;\n                            uStack2784 = *(iVar6 + 0x10);\n                            iStack2792 = 0x140037580;\n                            auStack2855[0] = fcn.140008428();\n                            puStack2864 = &uStack2824;\n                            puStack2872 = &uStack2776;\n                            puStack2880 = &uStack2856;\n                            puStack2888 = &uStack2848;\n                            piStack2896 = &iStack2800;\n                            piStack2904 = &iStack2792;\n                            puStack2912 = &uStack2784;\n                            uStack2920 = auStack2855;\n                            fcn.1400012b4(iVar9, 0x140039b16);\n                            arg2 = puStack2712;\n                        }\n                    }\n                    break;\n                }\n                iVar4 = *piVar1;\n            }\n        }\n        fcn.1400030c4(auStack2480);\n        if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n            fcn.140001e30(*(*0x14003e208 + 0x10), 0x12, 0x1400376d8, uVar2);\n        }\n        *arg2 = 0;\n        *(arg2 + 1) = 0;\n        goto code_r0x000140007f12;\n    }\n    uStack1816 = 0x238;\n    fcn.14001a0c0(auStack1812, 0, 0x234);\n    iVar4 = (*_sym.imp.KERNEL32.dll_Process32FirstW)();\n    iVar12 = 1;\n    while (iVar4 != 0) {\n        if (uStack1808 == *(uStack2848 + 1)) {\n            uVar11 = uStack1784;\n            if (uStack1784 == 0) goto code_r0x000140007d97;\n            if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 4) != 0)) {\n                auStack2240[0] = 0;\n                uVar8 = fcn.1400082cc(uStack2848, auStack2240);\n                fcn.140006544(*(*0x14003e208 + 0x10), 0x14, 0x1400376d8, uVar8);\n                uVar11 = uStack1784;\n            }\n            fcn.140006c6c(&uStack2816, uVar11);\n            uVar2 = uStack2808;\n            if (((uStack2808 & 3) == 0) &&\n               ((uVar8 = CONCAT44(uStack2812, uStack2816),  uStack2812 != 0 || (uStack2816 != 0)))) {\n                uStack2768 = uStack2816;\n                uStack2764 = uStack2812;\n                uStack2760 = *uStack2848;\n                uVar11 = uStack2760;\n                uStack2756 = *(uStack2848 + 4);\n                if (CONCAT44(uStack2812, uStack2816) < *uStack2848 || CONCAT44(uStack2812, uStack2816) == *uStack2848) {\n                    if (((uStack2812 == uStack2756) && (uStack2816 == uStack2760)) && (uStack2808 == *(uStack2848 + 1)))\n                    {\n                        if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 2) != 0)) {\n                            auStack2352[0] = 0;\n                            uStack2920 = fcn.1400082cc(&uStack2816, auStack2352);\n                            auStack2296[0] = 0;\n                            uVar8 = fcn.1400082cc(uStack2848, auStack2296);\n                            uVar11 = 0x1400376d8;\n                            fcn.140003534(*(*0x14003e208 + 0x10), 0x15, 0x1400376d8, uVar8);\n                        }\n                        auStack2464 = ZEXT816(0);\n                        if (*0x140040768 == 0) goto code_r0x000140007224;\n                        iVar4 = *(*0x140040768 + 8);\n                        goto code_r0x000140007219;\n                    }\n                    uStack1816 = 0x238;\n                    iVar4 = (*_sym.imp.KERNEL32.dll_Process32FirstW)(iVar6, &uStack1816);\n                    if (iVar4 != 0) goto code_r0x0001400075cb;\n                    uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                    uVar2 = uVar3 & 0xffff | 0x80070000;\n                    if (uVar3 < 1) {\n                        uVar2 = uVar3;\n                    }\n                    if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n                        fcn.140001e30(*(*0x14003e208 + 0x10), 0x16, 0x1400376d8, uVar2);\n                    }\n                    auStack2448 = ZEXT816(0);\n                    if (*0x140040768 == 0) goto code_r0x0001400074bf;\n                    iVar4 = *(*0x140040768 + 8);\n                    goto code_r0x0001400074b4;\n                }\n            }\n            if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n                auStack2296[0] = 0;\n                uStack2920 = fcn.1400082cc(&uStack2816, auStack2296);\n                auStack2352[0] = 0;\n                uVar8 = fcn.1400082cc(uStack2848, auStack2352);\n                fcn.140003534(*(*0x14003e208 + 0x10), 0x19, 0x1400376d8, uVar8);\n            }\n            auStack2384 = ZEXT816(0);\n            if (*0x140040768 == 0) goto code_r0x000140007af8;\n            iVar4 = *(*0x140040768 + 8);\n            goto code_r0x000140007aed;\n        }\n        iVar4 = (*_sym.imp.KERNEL32.dll_Process32NextW)();\n    }\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n    uVar2 = uVar3 & 0xffff | 0x80070000;\n    if (uVar3 < 1) {\n        uVar2 = uVar3;\n    }\n    uVar3 = 0;\n    if (uVar2 != 0x80070012) {\n        uVar3 = uVar2;\n    }\n    if (-1 < uVar3) goto code_r0x000140007d97;\n    auStack2368 = ZEXT816(0);\n    if (*0x140040768 != 0) {\n        iVar4 = *(*0x140040768 + 8);\n        while (iVar4 != 0) {\n            LOCK();\n            piVar1 = *0x140040768 + 8;\n            if (iVar4 == *piVar1) {\n                *piVar1 = iVar4 + 1;\n                iVar9 = *0x140040760;\n                auStack2368 = CONCAT88(*0x140040768, *0x140040760);\n                if (*0x140040760 != 0) {\n                    uVar2 = fcn.1400056dc();\n                    if (uVar3 != *(iVar9 + 0x20)) {\n                        *(iVar9 + 0x20) = uVar3;\n                        *(iVar9 + 8) = 0x140037648;\n                        *(iVar9 + 0x18) = uVar2;\n                    }\n                    if (((5 < *0x14003e240) && ((*0x14003e250 & 0x200000000000) != 0)) &&\n                       ((*0x14003e258 & 0x200000000000) == *0x14003e258)) {\n                        iVar10 = iVar9;\n                        uStack2768 = uVar3;\n                        uStack2536 = fcn.1400055bc(iVar9, auStack376);\n                        uStack2828 = *(iVar9 + 0x1c);\n                        iStack2528 = iVar9 + 0x24;\n                        uStack2512 = *(iVar9 + 0x10);\n                        iStack2520 = 0x140037580;\n                        uStack2760 = uVar2;\n                        auStack2827[0] = fcn.140008428();\n                        puStack2864 = &uStack2768;\n                        puStack2872 = &uStack2536;\n                        puStack2880 = &uStack2828;\n                        puStack2888 = &uStack2760;\n                        piStack2896 = &iStack2528;\n                        piStack2904 = &iStack2520;\n                        puStack2912 = &uStack2512;\n                        uStack2920 = auStack2827;\n                        fcn.1400012b4(iVar10, 0x1400398d6);\n                    }\n                }\n                break;\n            }\n            iVar4 = *piVar1;\n        }\n    }\n    fcn.1400030c4(auStack2368);\n    if (*0x14003e208 != 0x14003e208) {\n        if ((*(*0x14003e208 + 0x1c) & 1) != 0) {\n            fcn.140001e30(*(*0x14003e208 + 0x10), 0x13, 0x1400376d8, uVar3);\n        }\n        goto code_r0x000140007d97;\n    }\n    goto code_r0x000140007ddb;\ncode_r0x000140007219:\n    if (iVar4 == 0) goto code_r0x000140007224;\n    LOCK();\n    piVar1 = *0x140040768 + 8;\n    if (iVar4 == *piVar1) {\n        *piVar1 = iVar4 + 1;\n        iVar9 = *0x140040760;\n        auStack2704 = CONCAT88(auStack2704._8_8_, *0x140040760);\n        auStack2464 = CONCAT88(*0x140040768, *0x140040760);\n        if (((*0x140040760 != 0) && (5 < *0x14003e240)) &&\n           (((*0x14003e250 & 0x200000000000) != 0 && ((*0x14003e258 & 0x200000000000) == *0x14003e258)))) {\n            auStack2184[0] = 0;\n            arg4 = uStack2848;\n            var_50h = fcn.1400082cc(uStack2848, auStack2184);\n            puVar7 = auStack1096;\n            var_60h = fcn.1400055bc(iVar9, puVar7);\n            uStack2838 = *(iVar9 + 0x1c);\n            uStack2744 = fcn.1400056dc();\n            iStack152 = iVar9 + 0x24;\n            auStack2704 = CONCAT88(auStack2704._8_8_, *(auStack2704._0_8_ + 0x10));\n            uStack2837 = fcn.140008428();\n            if (var_50h == 0) {\n                var_50h = 0x1400373c4;\n                var_bp_48h._0_4_ = 2;\n            }\n            else {\n                iVar4 = fcn.140013788(var_50h, puVar7, uVar11, arg4);\n                var_bp_48h._0_4_ = iVar4 * 2 + 2;\n            }\n            var_bp_48h._4_4_ = 0;\n            if (var_60h == 0) {\n                var_60h = 0x1400373c1;\n                var_58h._0_4_ = iVar12;\n            }\n            else {\n                iVar4 = fcn.140013590(var_60h);\n                var_58h._0_4_ = iVar4 + 1;\n            }\n            var_70h = &uStack2838;\n            var_80h = &uStack2744;\n            var_58h._4_4_ = 0;\n            var_bp_68h = 1;\n            var_78h = 4;\n            if (iStack152 == 0) {\n                iStack152 = 0x1400373c1;\n                iStack144 = iVar12;\n            }\n            else {\n                iVar4 = fcn.140013590(iStack152);\n                iStack144 = iVar4 + 1;\n            }\n            uStack140 = 0;\n            iStack160 = fcn.140013590(0x140037580);\n            iStack160 = iStack160 + 1;\n            uStack168 = 0x140037580;\n            uStack156 = 0;\n            if (auStack2704._0_8_ == 0) {\n                auStack2704._0_8_ = 0x1400373c1;\n            }\n            else {\n                iVar12 = fcn.140013590(auStack2704._0_8_);\n                iVar12 = iVar12 + 1;\n            }\n            puStack200 = &uStack2837;\n            puStack2912 = auStack232;\n            uStack172 = 0;\n            uStack2920 = CONCAT44(uStack2920._4_4_, 10);\n            uStack192 = 1;\n            iStack184 = auStack2704._0_8_;\n            iStack176 = iVar12;\n            fcn.140001000(0x14003e240, 0x140039849, 0, 0);\n        }\n        goto code_r0x000140007224;\n    }\n    iVar4 = *piVar1;\n    goto code_r0x000140007219;\ncode_r0x000140007224:\n    puVar7 = auStack2464;\n    goto code_r0x00014000722b;\ncode_r0x00014000793b:\n    if (iVar4 == 0) goto code_r0x000140007a34;\n    LOCK();\n    piVar1 = *0x140040768 + 8;\n    if (iVar4 == *piVar1) {\n        *piVar1 = iVar4 + 1;\n        iVar9 = *0x140040760;\n        auStack2400 = CONCAT88(*0x140040768, *0x140040760);\n        if ((((*0x140040760 != 0) && (5 < *0x14003e240)) && ((*0x14003e250 & 0x200000000000) != 0)) &&\n           ((*0x14003e258 & 0x200000000000) == *0x14003e258)) {\n            uStack2848 = CONCAT44(uStack2848._4_4_, 1);\n            iVar10 = *0x140040760;\n            uStack2784 = fcn.1400055bc(*0x140040760, auStack1960);\n            auStack2855[0] = *(iVar9 + 0x1c);\n            uStack2824 = fcn.1400056dc();\n            iStack2792 = iVar9 + 0x24;\n            iStack2800 = 0x140037580;\n            uStack2776 = *(iVar9 + 0x10);\n            uStack2856 = fcn.140008428();\n            puStack2864 = &uStack2848;\n            puStack2872 = &uStack2784;\n            puStack2880 = auStack2855;\n            puStack2888 = &uStack2824;\n            piStack2896 = &iStack2792;\n            piStack2904 = &iStack2800;\n            puStack2912 = &uStack2776;\n            uStack2920 = &uStack2856;\n            fcn.1400012b4(iVar10, 0x140039a88);\n        }\n        goto code_r0x000140007a34;\n    }\n    iVar4 = *piVar1;\n    goto code_r0x00014000793b;\ncode_r0x000140007a34:\n    uVar8 = CONCAT44(uStack2812, uStack2816);\n    uVar2 = uStack2808;\ncode_r0x000140007a3c:\n    fcn.1400030c4(auStack2400);\n    *puStack2712 = uVar8;\n    *(puStack2712 + 1) = uVar2;\n    goto code_r0x000140007f06;\ncode_r0x0001400074b4:\n    if (iVar4 == 0) goto code_r0x0001400074bf;\n    LOCK();\n    piVar1 = *0x140040768 + 8;\n    if (iVar4 == *piVar1) {\n        *piVar1 = iVar4 + 1;\n        iVar9 = *0x140040760;\n        auStack2448 = CONCAT88(*0x140040768, *0x140040760);\n        if (*0x140040760 != 0) {\n            uVar5 = fcn.1400056dc();\n            if (uVar2 != *(iVar9 + 0x20)) {\n                *(iVar9 + 0x20) = uVar2;\n                *(iVar9 + 8) = 0x140037698;\n                *(iVar9 + 0x18) = uVar5;\n            }\n            if (((5 < *0x14003e240) && ((*0x14003e250 & 0x200000000000) != 0)) &&\n               ((*0x14003e258 & 0x200000000000) == *0x14003e258)) {\n                iVar10 = iVar9;\n                uStack2740 = uVar2;\n                uStack2664 = fcn.1400055bc(iVar9, auStack952);\n                uStack2836 = *(iVar9 + 0x1c);\n                iStack2656 = iVar9 + 0x24;\n                uStack2640 = *(iVar9 + 0x10);\n                iStack2648 = 0x140037580;\n                uStack2736 = uVar5;\n                uStack2835 = fcn.140008428();\n                puStack2864 = &uStack2740;\n                puStack2872 = &uStack2664;\n                puStack2880 = &uStack2836;\n                puStack2888 = &uStack2736;\n                piStack2896 = &iStack2656;\n                piStack2904 = &iStack2648;\n                puStack2912 = &uStack2640;\n                uStack2920 = &uStack2835;\n                fcn.1400012b4(iVar10, 0x140039ca9);\n            }\n        }\n        goto code_r0x0001400074bf;\n    }\n    iVar4 = *piVar1;\n    goto code_r0x0001400074b4;\ncode_r0x0001400074bf:\n    puVar7 = auStack2448;\n    goto code_r0x00014000722b;\ncode_r0x000140007aed:\n    if (iVar4 == 0) goto code_r0x000140007af8;\n    LOCK();\n    piVar1 = *0x140040768 + 8;\n    if (iVar4 == *piVar1) {\n        *piVar1 = iVar4 + 1;\n        iVar9 = *0x140040760;\n        auStack2384 = CONCAT88(*0x140040768, *0x140040760);\n        if ((((*0x140040760 != 0) && (5 < *0x14003e240)) && ((*0x14003e250 & 0x200000000000) != 0)) &&\n           ((*0x14003e258 & 0x200000000000) == *0x14003e258)) {\n            iVar10 = *0x140040760;\n            uStack2568 = fcn.1400055bc(*0x140040760, auStack520);\n            uStack2830 = *(iVar9 + 0x1c);\n            uStack2720 = fcn.1400056dc();\n            iStack2560 = iVar9 + 0x24;\n            iStack2552 = 0x140037580;\n            uStack2544 = *(iVar9 + 0x10);\n            uStack2829 = fcn.140008428();\n            puStack2872 = &uStack2568;\n            puStack2880 = &uStack2830;\n            puStack2888 = &uStack2720;\n            piStack2896 = &iStack2560;\n            piStack2904 = &iStack2552;\n            puStack2912 = &uStack2544;\n            uStack2920 = &uStack2829;\n            fcn.140001b54(iVar10, 0x140039c29);\n        }\n        goto code_r0x000140007af8;\n    }\n    iVar4 = *piVar1;\n    goto code_r0x000140007aed;\ncode_r0x000140007af8:\n    puVar7 = auStack2384;\n    goto code_r0x00014000722b;\n    while (iVar4 = (*_sym.imp.KERNEL32.dll_Process32NextW)(iVar6, &uStack1816),  iVar4 != 0) {\ncode_r0x0001400075cb:\n        if (uStack1808 == uVar2) {\n            auStack2400 = ZEXT816(0);\n            if (*0x140040768 == 0) goto code_r0x000140007a3c;\n            iVar4 = *(*0x140040768 + 8);\n            goto code_r0x00014000793b;\n        }\n    }\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n    uVar2 = uVar3 & 0xffff | 0x80070000;\n    if (uVar3 < 1) {\n        uVar2 = uVar3;\n    }\n    if (uVar2 != 0x80070012) {\n        if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n            fcn.140001e30(*(*0x14003e208 + 0x10), 0x17, 0x1400376d8, uVar2);\n        }\n        auStack2432 = ZEXT816(0);\n        if (*0x140040768 != 0) {\n            iVar4 = *(*0x140040768 + 8);\n            while (iVar4 != 0) {\n                LOCK();\n                piVar1 = *0x140040768 + 8;\n                if (iVar4 == *piVar1) {\n                    *piVar1 = iVar4 + 1;\n                    iVar9 = *0x140040760;\n                    auStack2432 = CONCAT88(*0x140040768, *0x140040760);\n                    if (*0x140040760 != 0) {\n                        uVar5 = fcn.1400056dc();\n                        if (uVar2 != *(iVar9 + 0x20)) {\n                            *(iVar9 + 0x20) = uVar2;\n                            *(iVar9 + 8) = 0x140037648;\n                            *(iVar9 + 0x18) = uVar5;\n                        }\n                        if (((5 < *0x14003e240) && ((*0x14003e250 & 0x200000000000) != 0)) &&\n                           ((*0x14003e258 & 0x200000000000) == *0x14003e258)) {\n                            iVar10 = iVar9;\n                            uStack2732 = uVar2;\n                            uStack2632 = fcn.1400055bc(iVar9, auStack808);\n                            uStack2834 = *(iVar9 + 0x1c);\n                            iStack2624 = iVar9 + 0x24;\n                            uStack2608 = *(iVar9 + 0x10);\n                            iStack2616 = 0x140037580;\n                            uStack2728 = uVar5;\n                            uStack2833 = fcn.140008428();\n                            puStack2864 = &uStack2732;\n                            puStack2872 = &uStack2632;\n                            puStack2880 = &uStack2834;\n                            puStack2888 = &uStack2728;\n                            piStack2896 = &iStack2624;\n                            piStack2904 = &iStack2616;\n                            puStack2912 = &uStack2608;\n                            uStack2920 = &uStack2833;\n                            fcn.1400012b4(iVar10, 0x1400398d6);\n                        }\n                    }\n                    break;\n                }\n                iVar4 = *piVar1;\n            }\n        }\n        fcn.1400030c4(auStack2432);\n    }\n    if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n        auStack2128[0] = 0;\n        puVar7 = fcn.1400082cc(uStack2848, auStack2128);\n        auStack2072[0] = 0;\n        uVar8 = fcn.1400082cc(&uStack2816, auStack2072);\n        uStack2920 = puVar7;\n        fcn.140003534(*(*0x14003e208 + 0x10), 0x18, 0x1400376d8, uVar8);\n    }\n    auStack2416 = ZEXT816(0);\n    if (*0x140040768 != 0) {\n        iVar4 = *(*0x140040768 + 8);\n        while (iVar4 != 0) {\n            LOCK();\n            piVar1 = *0x140040768 + 8;\n            if (iVar4 == *piVar1) {\n                *piVar1 = iVar4 + 1;\n                iVar9 = *0x140040760;\n                auStack2416 = CONCAT88(*0x140040768, *0x140040760);\n                if ((((*0x140040760 != 0) && (5 < *0x14003e240)) && ((*0x14003e250 & 0x200000000000) != 0)) &&\n                   ((*0x14003e258 & 0x200000000000) == *0x14003e258)) {\n                    iVar10 = *0x140040760;\n                    uStack2600 = fcn.1400055bc(*0x140040760, auStack664);\n                    uStack2832 = *(iVar9 + 0x1c);\n                    uStack2724 = fcn.1400056dc();\n                    iStack2592 = iVar9 + 0x24;\n                    uStack2576 = *(iVar9 + 0x10);\n                    iStack2584 = 0x140037580;\n                    uStack2831 = fcn.140008428();\n                    puStack2872 = &uStack2600;\n                    puStack2880 = &uStack2832;\n                    puStack2888 = &uStack2724;\n                    piStack2896 = &iStack2592;\n                    piStack2904 = &iStack2584;\n                    puStack2912 = &uStack2576;\n                    uStack2920 = &uStack2831;\n                    fcn.140001b54(iVar10, 0x140039bab);\n                }\n                break;\n            }\n            iVar4 = *piVar1;\n        }\n    }\n    puVar7 = auStack2416;\ncode_r0x00014000722b:\n    fcn.1400030c4(puVar7);\ncode_r0x000140007d97:\n    if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n        auStack2016[0] = 0;\n        uVar8 = fcn.1400082cc(uStack2848, auStack2016);\n        fcn.140006544(*(*0x14003e208 + 0x10), 0x1a, 0x1400376d8, uVar8);\n    }\ncode_r0x000140007ddb:\n    auStack2704 = ZEXT816(0);\n    if (*0x140040768 != 0) {\n        iVar4 = *(*0x140040768 + 8);\n        while (iVar4 != 0) {\n            LOCK();\n            piVar1 = *0x140040768 + 8;\n            if (iVar4 == *piVar1) {\n                *piVar1 = iVar4 + 1;\n                iVar9 = *0x140040760;\n                auStack2704 = CONCAT88(*0x140040768, *0x140040760);\n                if ((((*0x140040760 != 0) && (5 < *0x14003e240)) && ((*0x14003e250 & 0x200000000000) != 0)) &&\n                   ((*0x14003e258 & 0x200000000000) == *0x14003e258)) {\n                    uStack2848 = uStack2848 & 0xffffffff00000000;\n                    iVar10 = *0x140040760;\n                    uStack2784 = fcn.1400055bc(*0x140040760, auStack1960);\n                    auStack2855[0] = *(iVar9 + 0x1c);\n                    uStack2824 = fcn.1400056dc();\n                    iStack2792 = iVar9 + 0x24;\n                    uStack2776 = *(iVar9 + 0x10);\n                    iStack2800 = 0x140037580;\n                    uStack2856 = fcn.140008428();\n                    puStack2864 = &uStack2848;\n                    puStack2872 = &uStack2784;\n                    puStack2880 = auStack2855;\n                    puStack2888 = &uStack2824;\n                    piStack2896 = &iStack2792;\n                    piStack2904 = &iStack2800;\n                    puStack2912 = &uStack2776;\n                    uStack2920 = &uStack2856;\n                    fcn.1400012b4(iVar10, 0x140039a88);\n                }\n                break;\n            }\n            iVar4 = *piVar1;\n        }\n    }\n    fcn.1400030c4(auStack2704);\n    *puStack2712 = 0;\n    *(puStack2712 + 1) = 0;\ncode_r0x000140007f06:\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar6);\ncode_r0x000140007f12:\n    fcn.140018790(var_bp_40h ^ auStack2952);\n    return;\n}\n",
        "token_count": 9758
    },
    "14002c9d": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\nuint fcn.14002c9dc(uint64_t arg1, int64_t arg2, int64_t arg3)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    ulong uVar5;\n    uint64_t uVar6;\n    uint uVar7;\n    uint uVar8;\n    uint64_t arg3_00;\n    \n    arg1 = arg1 & 0xffffffff;\n    iVar3 = fcn.14002b4c4();\n    iVar4 = fcn.14002b4c4();\n    uVar6 = arg2 - iVar4;\n    if ((iVar3 == -1) || (iVar4 == -1)) {\n        if (*(arg3 + 0x30) == '\\0') {\n            uVar8 = 0x16;\n        }\n        else {\n            uVar8 = *(arg3 + 0x2c);\n        }\n    }\n    else {\n        uVar7 = 0;\n        if (uVar6 < 1) {\n            uVar8 = 0;\n            if (uVar6 < 0) {\n                iVar4 = fcn.14002b4c4(arg1, arg2, 0);\n                uVar8 = uVar7;\n                if (iVar4 == -1) {\n                    if (*(arg3 + 0x30) != '\\0') {\n                        uVar8 = *(arg3 + 0x2c);\n                    }\n                }\n                else {\n                    uVar5 = fcn.1400250bc(arg1);\n                    iVar2 = (*_sym.imp.KERNEL32.dll_SetEndOfFile)(uVar5);\n                    if (iVar2 == 0) {\n                        uVar7 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                        *(arg3 + 0x38) = 1;\n                        uVar8 = 0xd;\n                        *(arg3 + 0x34) = uVar7;\n                        *(arg3 + 0x30) = 1;\n                        *(arg3 + 0x2c) = 0xd;\n                    }\n                }\n            }\n        }\n        else {\n            iVar4 = fcn.140014d3c(0x1000, 1);\n            if (iVar4 == 0) {\n                uVar7 = 0xc;\n                *(arg3 + 0x30) = 1;\n                *(arg3 + 0x2c) = 0xc;\n            }\n            else {\n                uVar1 = fcn.14001ea2c(arg1, 0x8000);\n                do {\n                    arg3_00 = uVar6 & 0xffffffff;\n                    if (0xfff < uVar6) {\n                        arg3_00 = 0x1000;\n                    }\n                    iVar2 = fcn.140028834(arg1, iVar4, arg3_00, arg3);\n                    if (iVar2 == -1) {\n                        if ((*(arg3 + 0x38) != '\\0') && (*(arg3 + 0x34) == 5)) {\n                            *(arg3 + 0x30) = 1;\n                            *(arg3 + 0x2c) = 0xd;\n                        }\n                        if (*(arg3 + 0x30) != '\\0') {\n                            uVar7 = *(arg3 + 0x2c);\n                        }\n                        goto code_r0x00014002cacd;\n                    }\n                    uVar6 = uVar6 - iVar2;\n                } while (0 < uVar6);\n                fcn.14001ea2c(arg1, uVar1);\n            }\ncode_r0x00014002cacd:\n            fcn.140014db4(iVar4);\n            uVar8 = uVar7;\n        }\n    }\n    fcn.14002b4c4(arg1, iVar3, 0);\n    return uVar8;\n}\n",
        "token_count": 856
    },
    "14000cd8": {
        "rules": [
            "empty recycle bin quietly/a05fef7955a340fbb66225983c77e1df"
        ],
        "decompiled_code": "\ncode ** fcn.14000cd88(code **arg1, int64_t arg2, int64_t arg3)\n\n{\n    code **ppcVar1;\n    int64_t arg3_00;\n    code *arg2_00;\n    code *arg2_01;\n    int64_t noname_2;\n    \n    *(arg1 + 1) = 0;\n    *arg1 = vtable.CommonUtil::CCmdOptionsLookupMap::CSimpleMapItem.0;\n    ppcVar1 = arg1 + 2;\n    arg1[4] = NULL;\n    arg1[5] = 0x7;\n    *ppcVar1 = 0;\n    arg2_01 = 0xffffffffffffffff;\n    arg2_00 = 0xffffffffffffffff;\n    do {\n        arg2_00 = arg2_00 + 1;\n    } while (*(arg2 + arg2_00 * 2) != 0);\n    if (arg2_00 < 0x8) {\n        arg1[4] = arg2_00;\n        arg3_00 = arg2_00 * 2;\n        noname_2 = arg3_00;\n        fcn.14001a740(ppcVar1, arg2, arg3_00);\n        *(arg3_00 + ppcVar1) = 0;\n    }\n    else {\n        noname_2 = arg3;\n        fcn.140004c4c(ppcVar1, arg2_00, arg3, arg2);\n    }\n    ppcVar1 = arg1 + 6;\n    arg1[8] = NULL;\n    arg1[9] = 0x7;\n    *ppcVar1 = 0;\n    do {\n        arg2_01 = arg2_01 + 1;\n    } while (*(arg3 + arg2_01 * 2) != 0);\n    if (arg2_01 < 0x8) {\n        arg1[8] = arg2_01;\n        fcn.14001a740(ppcVar1, arg3, arg2_01 * 2);\n        *(arg2_01 * 2 + ppcVar1) = 0;\n    }\n    else {\n        fcn.140004c4c(ppcVar1, arg2_01, noname_2, arg3);\n    }\n    return arg1;\n}\n",
        "token_count": 524
    },
    "1400043e": {
        "rules": [
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498"
        ],
        "decompiled_code": "\nulong fcn.1400043e4(uint64_t *arg1, ulong arg2)\n\n{\n    fcn.140003410(arg2, 0x18, L\"%hu.%hu.%hu.%hu\", *arg1 >> 0x30);\n    return arg2;\n}\n",
        "token_count": 62
    },
    "140004a9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nulong * fcn.140004a94(ulong *arg1, int64_t arg2)\n\n{\n    int64_t iVar1;\n    uint64_t arg2_00;\n    ulong *puVar2;\n    ulong in_R8;\n    \n    arg2_00 = 0xffffffffffffffff;\n    do {\n        arg2_00 = arg2_00 + 1;\n    } while (*(arg2 + arg2_00 * 2) != 0);\n    iVar1 = arg1[2];\n    if (arg1[3] - iVar1 < arg2_00) {\n        arg1 = fcn.140004d40(arg1, arg2_00, in_R8, arg2);\n    }\n    else {\n        arg1[2] = iVar1 + arg2_00;\n        puVar2 = arg1;\n        if (7 < arg1[3]) {\n            puVar2 = *arg1;\n        }\n        fcn.14001a740(puVar2 + iVar1 * 2, arg2, arg2_00 * 2);\n        *(puVar2 + (iVar1 + arg2_00) * 2) = 0;\n    }\n    return arg1;\n}\n",
        "token_count": 264
    },
    "1400054f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\ncode ** fcn.1400054f0(code **arg1, ulong arg2)\n\n{\n    ulong uStack24;\n    uchar uStack16;\n    uint uStack15;\n    ushort uStack11;\n    uchar uStack9;\n    \n    uStack16 = 1;\n    *arg1 = vtable.std::exception.0;\n    *(arg1 + 1) = ZEXT816(0);\n    uStack15 = 0;\n    uStack11 = 0;\n    uStack9 = 0;\n    uStack24 = arg2;\n    fcn.14001ac00(&uStack24, arg1 + 1);\n    *arg1 = vtable.std::invalid_argument.0;\n    return arg1;\n}\n",
        "token_count": 159
    },
    "1400082c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nulong fcn.1400082cc(int64_t arg1, ulong arg2)\n\n{\n    fcn.140003410(arg2, 0x1a, L\"%x.%I64x\", *(arg1 + 8));\n    return arg2;\n}\n",
        "token_count": 57
    },
    "140008bc": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nulong * fcn.140008bcc(ulong *arg1)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    ulong *puVar3;\n    \n    *arg1 = 0;\n    uVar2 = fcn.1400107a0(arg1);\n    if (-1 < uVar2) {\n        return arg1;\n    }\n    fcn.14000bf14(uVar2);\n    pcVar1 = swi(3);\n    puVar3 = (*pcVar1)();\n    return puVar3;\n}\n",
        "token_count": 119
    },
    "14000b70": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint32_t fcn.14000b704(int64_t *arg1, ulong hModule, uint64_t lpProcName)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    uint64_t arg2;\n    uint64_t noname_2;\n    \n    arg2 = lpProcName;\n    noname_2 = lpProcName;\n    iVar2 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(hModule);\n    *arg1 = iVar2;\n    if (iVar2 == 0) {\n        iVar1 = fcn.14000e908();\n        if (iVar1 == -0x7ff8ff81) {\n            return -0x7ff8ff81;\n        }\n        if (lpProcName < 0x10000) {\n            if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 2) != 0)) {\n                fcn.14000af9c(*(*0x14003e208 + 0x10), 0x1c, noname_2, lpProcName & 0xffffffff);\n            }\n        }\n        else if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 2) != 0)) {\n            fcn.14000b20c(*(*0x14003e208 + 0x10), arg2, noname_2, lpProcName);\n        }\n        if (iVar1 < 0) {\n            return iVar1;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 365
    },
    "14000b8f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint32_t fcn.14000b8fc(ulong arg1, ulong lpSecurityAttributes)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    \n    iVar1 = (*_sym.imp.KERNEL32.dll_CreateDirectoryW)();\n    if (iVar1 == 0) {\n        iVar1 = fcn.14000e908();\n        if (iVar1 == -0x7ff8ff49) {\n            iVar2 = fcn.14000b82c(arg1);\n            iVar1 = 1;\n            if (iVar2 < 0) {\n                iVar1 = iVar2;\n            }\n        }\n        else if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 1) != 0)) {\n            fcn.14000b148(*(*0x14003e208 + 0x10), 0x21, 0x140037ab8, arg1);\n        }\n    }\n    else {\n        iVar1 = 0;\n    }\n    return iVar1;\n}\n",
        "token_count": 239
    },
    "14000c22": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint32_t fcn.14000c220(ulong noname_0, ulong arg2, int64_t arg3)\n\n{\n    int64_t arg1;\n    int32_t iVar1;\n    int64_t aiStack24 [2];\n    \n    aiStack24[0] = 0;\n    iVar1 = fcn.14000c150(noname_0, aiStack24);\n    arg1 = aiStack24[0];\n    if (-1 < iVar1) {\n        if (arg3 == 0) {\n            iVar1 = fcn.14000ca84(arg2, aiStack24[0]);\n        }\n        else {\n            iVar1 = fcn.14000e5b0(arg2, L\"%ls\\\\%ls\", aiStack24[0], arg3);\n        }\n    }\n    if (arg1 != 0) {\n        fcn.1400187b4(arg1);\n    }\n    return iVar1;\n}\n",
        "token_count": 205
    },
    "14000cfa": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nulong fcn.14000cfa0(ulong *arg1)\n\n{\n    code **ppcVar1;\n    code *pcVar2;\n    \n    ppcVar1 = fcn.1400187f8(0x50);\n    *(ppcVar1 + 1) = 0;\n    *ppcVar1 = vtable.CommonUtil::CCmdOptionsLookupMap.0;\n    *(ppcVar1 + 2) = 0;\n    ppcVar1[3] = NULL;\n    ppcVar1[4] = NULL;\n    pcVar2 = fcn.1400187f8(0x20);\n    *pcVar2 = pcVar2;\n    *(pcVar2 + 8) = pcVar2;\n    ppcVar1[3] = pcVar2;\n    ppcVar1[5] = NULL;\n    ppcVar1[6] = NULL;\n    ppcVar1[7] = NULL;\n    ppcVar1[8] = 0x7;\n    ppcVar1[9] = 0x8;\n    *(ppcVar1 + 2) = 0x3f800000;\n    fcn.14000dac0(ppcVar1 + 5, 0x10, ppcVar1[3]);\n    (**0x140031a58)(ppcVar1);\n    *arg1 = ppcVar1;\n    return 0;\n}\n",
        "token_count": 315
    },
    "14000d36": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_bp_10h\n\nint32_t fcn.14000d360(int64_t *arg1, ulong noname_1, int16_t *arg3, int16_t *arg4)\n\n{\n    bool bVar1;\n    bool bVar2;\n    int64_t arg1_00;\n    int32_t iVar3;\n    int16_t *arg2;\n    int16_t *arg3_00;\n    int64_t iStackX8;\n    int16_t *piStackX32;\n    ulong var_30h;\n    int16_t *apiStack56 [2];\n    ulong var_bp_10h;\n    \n    *arg1 = 0;\n    iStackX8 = 0;\n    arg3_00 = arg3;\n    piStackX32 = arg4;\n    iVar3 = fcn.14000cfa0(&iStackX8);\n    arg1_00 = iStackX8;\n    if (iVar3 < 0) {\n        if (iStackX8 != 0) {\n            (**0x140031a58)();\n        }\n    }\n    else {\n        piStackX32 = NULL;\n        apiStack56[0] = NULL;\n        bVar1 = true;\ncode_r0x00014000d3d4:\n        do {\n            while( true ) {\n                if (bVar1) {\n                    iVar3 = (**0x140031a58)(arg3, &piStackX32);\n                    if (iVar3 < 0) goto joined_r0x00014000d4fc;\n                }\n                else {\n                    piStackX32 = apiStack56[0];\n                }\n                if (piStackX32 == NULL) {\n                    *arg1 = arg1_00;\n                    return 0;\n                }\n                iVar3 = (**0x140031a58)(arg3, apiStack56);\n                if (iVar3 < 0) goto joined_r0x00014000d4fc;\n                bVar2 = false;\n                if (*piStackX32 != 0x40) break;\n                iVar3 = fcn.14000d170(arg1_00, piStackX32 + 1, arg3_00);\n                bVar1 = false;\n                if (iVar3 < 0) goto joined_r0x00014000d4fc;\n            }\n            bVar1 = false;\n            if (*piStackX32 == 0x2d) {\n                arg2 = piStackX32 + 1;\n                if (*arg2 == 0x2d) {\n                    arg2 = piStackX32 + 2;\n                }\n            }\n            else {\n                if (*piStackX32 != 0x2f) goto code_r0x00014000d3d4;\n                arg2 = piStackX32 + 1;\n            }\n            arg3_00 = 0x1400373c4;\n            if ((apiStack56[0] != NULL) && ((*apiStack56[0] - 0x2dU & 0xfffd) != 0)) {\n                bVar2 = true;\n                arg3_00 = apiStack56[0];\n            }\n            iVar3 = fcn.14000cc70(arg1_00, arg2, arg3_00);\n        } while ((iVar3 == -0x7ff8ff49) || (bVar1 = bVar2,  -1 < iVar3));\njoined_r0x00014000d4fc:\n        if (arg1_00 != 0) {\n            (**0x140031a58)(arg1_00);\n        }\n    }\n    return iVar3;\n}\n",
        "token_count": 799
    },
    "14000e2b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint32_t fcn.14000e2bc(ushort *arg1, uint64_t arg2, uint64_t *arg3, ulong arg4)\n\n{\n    uint64_t arg3_00;\n    int32_t iVar1;\n    int32_t iVar2;\n    uint64_t *puVar3;\n    int32_t iVar4;\n    \n    iVar2 = 0;\n    if (arg2 - 1 < 0x7fffffff) {\n        arg3_00 = arg2 - 1;\n        puVar3 = fcn.140003408();\n        iVar1 = fcn.1400232b0(*puVar3 | 1, arg1, arg3_00, arg4);\n        if (iVar1 < 0) {\n            iVar1 = -1;\n        }\n        if ((iVar1 < 0) || (arg3_00 < iVar1)) {\n            iVar4 = -0x7ff8ff86;\n        }\n        else {\n            iVar4 = iVar2;\n            if (iVar1 != arg3_00) goto code_r0x00014000e35e;\n        }\n        arg1[arg3_00] = 0;\n    }\n    else {\n        iVar4 = -0x7ff8ffa9;\n        if (arg2 != 0) {\n            *arg1 = 0;\n            *arg3 = 0;\n            return -0x7ff8ffa9;\n        }\n    }\ncode_r0x00014000e35e:\n    *arg3 = 0;\n    if ((iVar4 < 0) && (iVar2 = iVar4,  iVar4 == -0x7ff8ff86)) {\n        puVar3 = fcn.140003408();\n        iVar2 = fcn.1400232b0(*puVar3 | 2, 0, 0, arg4);\n        if (iVar2 < 0) {\n            iVar2 = -1;\n        }\n        if ((iVar2 < 0) || (iVar2 + 1U <= arg2)) {\n            iVar2 = -0x7fffbffb;\n        }\n        else {\n            *arg3 = iVar2 + 1U;\n            iVar2 = -0x7ff8ff86;\n        }\n    }\n    return iVar2;\n}\n",
        "token_count": 498
    },
    "14000e3d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint32_t fcn.14000e3d8(uchar *arg1, uint64_t arg2, uint64_t *arg3, ulong arg4)\n\n{\n    uint64_t arg3_00;\n    int32_t iVar1;\n    int32_t iVar2;\n    uint64_t *puVar3;\n    int32_t iVar4;\n    \n    iVar2 = 0;\n    if (arg2 - 1 < 0x7fffffff) {\n        arg3_00 = arg2 - 1;\n        puVar3 = fcn.140003408();\n        iVar1 = fcn.140022f48(*puVar3 | 1, arg1, arg3_00, arg4);\n        if (iVar1 < 0) {\n            iVar1 = -1;\n        }\n        if ((iVar1 < 0) || (arg3_00 < iVar1)) {\n            iVar4 = -0x7ff8ff86;\n        }\n        else {\n            iVar4 = iVar2;\n            if (iVar1 != arg3_00) goto code_r0x00014000e478;\n        }\n        arg1[arg3_00] = 0;\n    }\n    else {\n        iVar4 = -0x7ff8ffa9;\n        if (arg2 != 0) {\n            *arg1 = 0;\n            *arg3 = 0;\n            return -0x7ff8ffa9;\n        }\n    }\ncode_r0x00014000e478:\n    *arg3 = 0;\n    if ((iVar4 < 0) && (iVar2 = iVar4,  iVar4 == -0x7ff8ff86)) {\n        puVar3 = fcn.140003408();\n        iVar2 = fcn.140022f48(*puVar3 | 2, 0, 0, arg4);\n        if (iVar2 < 0) {\n            iVar2 = -1;\n        }\n        if ((iVar2 < 0) || (iVar2 + 1U <= arg2)) {\n            iVar2 = -0x7fffbffb;\n        }\n        else {\n            *arg3 = iVar2 + 1U;\n            iVar2 = -0x7ff8ff86;\n        }\n    }\n    return iVar2;\n}\n",
        "token_count": 495
    },
    "14000e4f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint32_t fcn.14000e4f0(int64_t *arg1, ulong arg2, ulong arg3)\n\n{\n    int32_t iVar1;\n    int64_t iStackX8;\n    ulong uStackX32;\n    \n    *arg1 = 0;\n    iStackX8 = 0;\n    uStackX32 = 0;\n    iVar1 = fcn.14000e768(&uStackX32, &iStackX8, arg2, arg3);\n    if (iVar1 < 0) {\n        if (iStackX8 != 0) {\n            fcn.1400187b4(iStackX8);\n        }\n    }\n    else {\n        *arg1 = iStackX8;\n        iVar1 = 0;\n    }\n    return iVar1;\n}\n",
        "token_count": 176
    },
    "14000e55": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint32_t fcn.14000e550(int64_t *arg1, ulong arg2, ulong arg3)\n\n{\n    int32_t iVar1;\n    int64_t iStackX8;\n    ulong uStackX32;\n    \n    *arg1 = 0;\n    iStackX8 = 0;\n    uStackX32 = 0;\n    iVar1 = fcn.14000e5f8(&uStackX32, &iStackX8, arg2, arg3);\n    if (iVar1 < 0) {\n        if (iStackX8 != 0) {\n            fcn.1400187b4(iStackX8);\n        }\n    }\n    else {\n        *arg1 = iStackX8;\n        iVar1 = 0;\n    }\n    return iVar1;\n}\n",
        "token_count": 176
    },
    "14001083": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\ncode ** fcn.14001083c(code **arg1, ulong arg2)\n\n{\n    ulong uStack24;\n    uchar uStack16;\n    uint uStack15;\n    ushort uStack11;\n    uchar uStack9;\n    \n    uStack16 = 1;\n    *arg1 = vtable.std::exception.0;\n    *(arg1 + 1) = ZEXT816(0);\n    uStack15 = 0;\n    uStack11 = 0;\n    uStack9 = 0;\n    uStack24 = arg2;\n    fcn.14001ac00(&uStack24, arg1 + 1);\n    *arg1 = vtable.std::length_error.0;\n    return arg1;\n}\n",
        "token_count": 158
    },
    "140013f9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.140013f90(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    code *pcVar1;\n    uint8_t uVar2;\n    int64_t iVar3;\n    uint64_t *puVar4;\n    ulong in_stack_00000028;\n    ulong in_stack_00000030;\n    \n    iVar3 = fcn.140013cd8(in_stack_00000030);\n    if (((iVar3 == 0) || (*(iVar3 + 0x3b8) == 0)) &&\n       (puVar4 = fcn.140013d44(0x14003f210, in_stack_00000030),  uVar2 = *0x14003ef38 & 0x3f, \n       ((*0x14003ef38 ^ *puVar4) >> uVar2 | (*0x14003ef38 ^ *puVar4) << 0x40 - uVar2) == 0)) {\n        fcn.1400140b0(arg1, arg2, arg3, arg4, in_stack_00000028);\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    (**0x140031a58)(arg1, arg2, arg3, arg4, in_stack_00000028);\n    return;\n}\n",
        "token_count": 297
    },
    "140016e0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.140016e00(ulong arg1)\n\n{\n    int64_t iVar1;\n    int32_t iVar2;\n    ulong in_R9;\n    int64_t aiStackX16 [3];\n    \n    aiStackX16[0] = 0;\n    iVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleExW)(0, L\"mscoree.dll\", aiStackX16, in_R9, 0xfffffffffffffffe);\n    if ((iVar2 != 0) && (iVar1 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(aiStackX16[0], \"CorExitProcess\"),  iVar1 != 0))\n    {\n        (**0x140031a58)(arg1);\n    }\n    if (aiStackX16[0] != 0) {\n        (*_sym.imp.KERNEL32.dll_FreeLibrary)();\n    }\n    return;\n}\n",
        "token_count": 194
    },
    "14001e64": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint64_t * fcn.14001e64c(int16_t *arg1)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    int64_t *arg1_00;\n    int64_t *piVar4;\n    int16_t iVar5;\n    int64_t iVar6;\n    int64_t iVar7;\n    int16_t *piVar8;\n    \n    iVar5 = *arg1;\n    iVar6 = 0;\n    piVar8 = arg1;\n    while (iVar5 != 0) {\n        iVar7 = iVar6 + 1;\n        if (iVar5 == 0x3d) {\n            iVar7 = iVar6;\n        }\n        iVar6 = -1;\n        do {\n            iVar3 = iVar6;\n            iVar6 = iVar3 + 1;\n        } while (piVar8[iVar6] != 0);\n        piVar8 = piVar8 + iVar3 + 2;\n        iVar6 = iVar7;\n        iVar5 = *piVar8;\n    }\n    arg1_00 = fcn.140014d3c(iVar6 + 1, 8);\n    piVar4 = arg1_00;\n    if (arg1_00 == NULL) {\ncode_r0x00014001e6b7:\n        fcn.140014db4(0);\n        arg1_00 = NULL;\n    }\n    else {\n        for (; *arg1 != 0; arg1 = arg1 + iVar7) {\n            iVar6 = -1;\n            do {\n                iVar7 = iVar6;\n                iVar6 = iVar7 + 1;\n            } while (arg1[iVar6] != 0);\n            iVar7 = iVar7 + 2;\n            if (*arg1 != 0x3d) {\n                iVar6 = fcn.140014d3c(iVar7, 2);\n                if (iVar6 == 0) {\n                    fcn.14001e7ac(arg1_00);\n                    fcn.140014db4(0);\n                    goto code_r0x00014001e6b7;\n                }\n                iVar2 = fcn.140016814(iVar6, iVar7, arg1);\n                if (iVar2 != 0) {\n                    fcn.1400140b0(0, 0, 0, 0, 0);\n                    pcVar1 = swi(3);\n                    piVar4 = (*pcVar1)();\n                    return piVar4;\n                }\n                *piVar4 = iVar6;\n                piVar4 = piVar4 + 1;\n                fcn.140014db4(0);\n            }\n        }\n        fcn.140014db4(0);\n    }\n    return arg1_00;\n}\n",
        "token_count": 604
    },
    "14001e7f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint64_t fcn.14001e7f0(void)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    int64_t *piVar3;\n    \n    piVar3 = *0x14003ffd0;\n    if (*0x14003ffd0 == NULL) {\ncode_r0x00014001e813:\n        iVar2 = 0xffffffff;\n    }\n    else {\n        for (; iVar2 = *piVar3,  iVar2 != 0; piVar3 = piVar3 + 1) {\n            iVar1 = fcn.140016b74(0, 0);\n            if (iVar1 == 0) goto code_r0x00014001e813;\n            iVar2 = fcn.140014d3c(iVar1, 2);\n            if (iVar2 == 0) {\n                iVar2 = 0;\ncode_r0x00014001e8a0:\n                fcn.140014db4(iVar2);\n                goto code_r0x00014001e813;\n            }\n            iVar1 = fcn.140016b74(0, 0);\n            if (iVar1 == 0) goto code_r0x00014001e8a0;\n            fcn.140024c08(iVar2, 0);\n            fcn.140014db4(0);\n        }\n    }\n    return iVar2;\n}\n",
        "token_count": 305
    },
    "140020e2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nuint64_t fcn.140020e28(int64_t arg1, uint *arg2)\n\n{\n    int64_t arg1_00;\n    ulong uVar1;\n    uint uVar2;\n    uint64_t uVar3;\n    uint8_t uVar4;\n    uint64_t uStackX8;\n    uint64_t uStack24;\n    uint64_t *puStack16;\n    \n    arg1_00 = *(arg1 + 8);\n    puStack16 = &uStackX8;\n    uStackX8 = *(arg1 + 0x10) - 1;\n    uVar1 = *(arg1_00 + 0x2c);\n    uStack24 = uStackX8;\n    uVar2 = fcn.14001f104(arg1_00, &uStack24, 10);\n    *arg2 = uVar2;\n    uVar3 = *(arg1 + 8);\n    if (((*(uVar3 + 0x30) == '\\0') || (uVar4 = 0,  *(uVar3 + 0x2c) != 0x22)) &&\n       (uVar3 = uStackX8,  uVar4 = 0,  *(arg1 + 0x10) <= uStackX8)) {\n        *(arg1 + 0x10) = uStackX8;\n        uVar4 = 1;\n    }\n    *(arg1_00 + 0x2c) = uVar1;\n    return uVar3 & 0xffffffffffffff00 | uVar4;\n}\n",
        "token_count": 345
    },
    "140020eb": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nuint64_t fcn.140020eb8(int64_t arg1, uint *arg2)\n\n{\n    int64_t arg1_00;\n    ulong uVar1;\n    uint uVar2;\n    uint64_t uVar3;\n    uint8_t uVar4;\n    uint64_t uStackX8;\n    uint64_t uStack24;\n    uint64_t *puStack16;\n    \n    arg1_00 = *(arg1 + 8);\n    puStack16 = &uStackX8;\n    uStackX8 = *(arg1 + 0x10) - 2;\n    uVar1 = *(arg1_00 + 0x2c);\n    uStack24 = uStackX8;\n    uVar2 = fcn.14001f3b4(arg1_00, &uStack24, 10);\n    *arg2 = uVar2;\n    uVar3 = *(arg1 + 8);\n    if (((*(uVar3 + 0x30) == '\\0') || (uVar4 = 0,  *(uVar3 + 0x2c) != 0x22)) &&\n       (uVar3 = uStackX8,  uVar4 = 0,  *(arg1 + 0x10) <= uStackX8)) {\n        *(arg1 + 0x10) = uStackX8;\n        uVar4 = 1;\n    }\n    *(arg1_00 + 0x2c) = uVar1;\n    return uVar3 & 0xffffffffffffff00 | uVar4;\n}\n",
        "token_count": 347
    },
    "140022a1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nulong fcn.140022a18(int64_t arg1)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    uint64_t arg3;\n    uchar *puVar3;\n    \n    iVar1 = *(arg1 + 0x34);\n    if ((iVar1 == 2) ||\n       (((iVar1 != 3 && (iVar1 != 0xc)) && ((*(arg1 + 0x34) == 0xd || ((*(arg1 + 0x39) + 0x9dU & 0xef) == 0)))))) {\n        puVar3 = *(arg1 + 0x458);\n        if (*(arg1 + 0x458) == NULL) {\n            puVar3 = arg1 + 0x50;\n        }\n        *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n        *puVar3 = *(*(arg1 + 0x18) + -8);\n        *(arg1 + 0x48) = 1;\n    }\n    else {\n        *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n        iVar2 = *(arg1 + 0x458);\n        if (iVar2 == 0) {\n            arg3 = 0x200;\n            iVar2 = arg1 + 0x50;\n        }\n        else {\n            arg3 = *(arg1 + 0x450) >> 1;\n        }\n        iVar1 = fcn.14002683c(arg1 + 0x48, iVar2, arg3);\n        if (iVar1 != 0) {\n            *(arg1 + 0x38) = 1;\n        }\n    }\n    iVar2 = *(arg1 + 0x458);\n    if (*(arg1 + 0x458) == 0) {\n        iVar2 = arg1 + 0x50;\n    }\n    *(arg1 + 0x40) = iVar2;\n    return 1;\n}\n",
        "token_count": 443
    },
    "14002413": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint16_t * fcn.14002413c(int16_t *arg1, ulong arg2, int64_t arg3)\n\n{\n    int16_t iVar1;\n    uint *puVar2;\n    int16_t *piVar3;\n    int16_t *piVar4;\n    int32_t iVar5;\n    \n    if ((((arg1 == NULL) && (arg2 != 0)) || (arg2 < 0)) || (arg3 == 0)) {\n        puVar2 = fcn.1400142cc();\n        *puVar2 = 0x16;\n        fcn.140014060();\n    }\n    else if (arg2 != 0) {\n        fcn.140025a0c(arg3);\n        iVar5 = 1;\n        piVar3 = arg1;\n        do {\n            if (iVar5 == arg2) {\ncode_r0x000140024126:\n                *piVar3 = 0;\n                piVar4 = arg1;\ncode_r0x00014002412c:\n                fcn.140025a18(arg3);\n                return piVar4;\n            }\n            iVar1 = fcn.1400275d0(arg3);\n            if (iVar1 == -1) {\n                piVar4 = NULL;\n                if (piVar3 == arg1) goto code_r0x00014002412c;\n                goto code_r0x000140024126;\n            }\n            *piVar3 = iVar1;\n            piVar3 = piVar3 + 1;\n            if (iVar1 == 10) goto code_r0x000140024126;\n            iVar5 = iVar5 + 1;\n        } while( true );\n    }\n    return NULL;\n}\n",
        "token_count": 372
    },
    "140024c0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nuint64_t fcn.140024c08(uint64_t arg1, ulong arg2)\n\n{\n    uint64_t arg2_00;\n    int16_t iVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    uint64_t uVar5;\n    int64_t iVar6;\n    int64_t *piVar7;\n    int64_t *piVar8;\n    uint64_t uVar9;\n    int64_t arg3;\n    int64_t iVar10;\n    \n    uVar9 = 0;\n    if (arg1 == 0) {\n        puVar4 = fcn.1400142cc();\n        *puVar4 = 0x16;\n        return 0xffffffffffffffff;\n    }\n    uVar5 = fcn.14001ab18(arg1);\n    if ((uVar5 == 0) || (uVar5 == arg1)) {\n        puVar4 = fcn.1400142cc();\n        *puVar4 = 0x16;\n        fcn.140014db4(arg1);\n        return 0xffffffffffffffff;\n    }\n    iVar1 = *(uVar5 + 2);\n    if (*0x14003ffd8 == *0x14003ffe0) {\n        *0x14003ffd8 = fcn.140024b18(*0x14003ffd8);\n    }\n    if (*0x14003ffd8 == NULL) {\n        if ((arg2 == 0) || (*0x14003ffd0 == 0)) {\n            if (iVar1 == 0) goto code_r0x00014002486c;\n            if (*0x14003ffd0 == 0) {\n                *0x14003ffd0 = fcn.140014d3c(1, 8);\n                fcn.140014db4(0);\n                if (*0x14003ffd0 == 0) goto code_r0x000140024868;\n                if (*0x14003ffd8 != NULL) goto code_r0x000140024910;\n            }\n            *0x14003ffd8 = fcn.140014d3c(1, 8);\n            fcn.140014db4(0);\n            if (*0x14003ffd8 != NULL) goto code_r0x000140024907;\n        }\n        else {\n            iVar6 = fcn.14001e8e4();\n            if (iVar6 == 0) {\n                puVar4 = fcn.1400142cc();\n                *puVar4 = 0x16;\n            }\n            else {\n                if (*0x14003ffd8 == *0x14003ffe0) {\n                    *0x14003ffd8 = fcn.140024b18(*0x14003ffd8);\n                }\ncode_r0x000140024907:\n                if (*0x14003ffd8 != NULL) goto code_r0x000140024910;\n            }\n        }\n    }\n    else {\ncode_r0x000140024910:\n        piVar7 = *0x14003ffd8;\n        arg3 = uVar5 - arg1 >> 1;\n        iVar6 = **0x14003ffd8;\n        piVar8 = *0x14003ffd8;\n        while (iVar6 != 0) {\n            iVar3 = fcn.140027bc0(arg1, iVar6, arg3);\n            if ((iVar3 == 0) && ((*(*piVar8 + arg3 * 2) == 0x3d || (*(*piVar8 + arg3 * 2) == 0)))) {\n                iVar6 = piVar8 - piVar7 >> 3;\n                goto code_r0x000140024965;\n            }\n            piVar8 = piVar8 + 1;\n            iVar6 = *piVar8;\n        }\n        iVar6 = -(piVar8 - piVar7 >> 3);\ncode_r0x000140024965:\n        uVar5 = uVar9;\n        if ((-1 < iVar6) && (*piVar7 != 0)) {\n            fcn.140014db4(piVar7[iVar6]);\n            if (iVar1 == 0) {\n                for (; piVar7[iVar6] != 0; iVar6 = iVar6 + 1) {\n                    piVar7[iVar6] = piVar7[iVar6 + 1];\n                }\n                piVar7 = fcn.140018380(piVar7, iVar6, 8);\n                fcn.140014db4(0);\n                uVar5 = arg1;\n                if (piVar7 != NULL) {\n                    *0x14003ffd8 = piVar7;\n                }\n            }\n            else {\n                piVar7[iVar6] = arg1;\n            }\ncode_r0x000140024a26:\n            if (arg2 == 0) {\ncode_r0x000140024ac2:\n                fcn.140014db4(uVar5);\n                return 0;\n            }\n            iVar6 = -1;\n            do {\n                iVar10 = iVar6;\n                iVar6 = iVar10 + 1;\n            } while (*(arg1 + iVar6 * 2) != 0);\n            iVar10 = iVar10 + 3;\n            iVar6 = fcn.140014d3c(iVar10, 2);\n            if (iVar6 == 0) {\n                fcn.140014db4(0);\n            }\n            else {\n                iVar3 = fcn.140016814(iVar6, iVar10, arg1);\n                if (iVar3 != 0) {\n                    fcn.1400140b0(0, 0, 0, 0, 0);\n                    pcVar2 = swi(3);\n                    uVar9 = (*pcVar2)();\n                    return uVar9;\n                }\n                uVar9 = iVar6 + (arg3 + 1) * 2;\n                *(uVar9 - 2) = 0;\n                iVar3 = (*_sym.imp.KERNEL32.dll_SetEnvironmentVariableW)(iVar6, -(iVar1 != 0) & uVar9);\n                if (iVar3 != 0) {\n                    fcn.140014db4(iVar6);\n                    goto code_r0x000140024ac2;\n                }\n                puVar4 = fcn.1400142cc();\n                *puVar4 = 0x2a;\n                fcn.140014db4(iVar6);\n                uVar9 = 0xffffffff;\n            }\n            fcn.140014db4(uVar5);\n            return uVar9;\n        }\n        if (iVar1 == 0) goto code_r0x00014002486c;\n        arg2_00 = -iVar6 + 2;\n        if ((-iVar6 <= arg2_00) && (arg2_00 < 0x1fffffffffffffff)) {\n            piVar7 = fcn.140018380(piVar7, arg2_00, 8);\n            fcn.140014db4(0);\n            if (piVar7 != NULL) {\n                piVar7[-iVar6] = arg1;\n                piVar7[1 - iVar6] = 0;\n                *0x14003ffd8 = piVar7;\n                goto code_r0x000140024a26;\n            }\n        }\n    }\ncode_r0x000140024868:\n    uVar9 = 0xffffffffffffffff;\ncode_r0x00014002486c:\n    fcn.140014db4(arg1);\n    return uVar9 & 0xffffffff;\n}\n",
        "token_count": 1651
    },
    "14002b41": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint64_t fcn.14002b418(ulong arg1, ulong arg2, ulong arg3, int64_t arg4)\n\n{\n    uint8_t *puVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int64_t iVar4;\n    int64_t aiStack24 [2];\n    \n    iVar4 = fcn.1400250bc(arg1 & 0xffffffff);\n    if (iVar4 == -1) {\n        *(arg4 + 0x30) = 1;\n        *(arg4 + 0x2c) = 9;\n    }\n    else {\n        iVar2 = (*_sym.imp.KERNEL32.dll_SetFilePointerEx)(iVar4, arg2, aiStack24, arg3);\n        if (iVar2 == 0) {\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            fcn.140014288(uVar3, arg4);\n        }\n        else if (aiStack24[0] != -1) {\n            puVar1 = *((arg1 >> 6) * 8 + 0x140040030) + 0x38 + (arg1 & 0x3f) * 0x48;\n            *puVar1 = *puVar1 & 0xfd;\n            return aiStack24[0];\n        }\n    }\n    return -1;\n}\n",
        "token_count": 300
    },
    "140004c4": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nint64_t * fcn.140004c4c(int64_t *arg1, uint64_t arg2, ulong noname_2, ulong arg4)\n\n{\n    uint64_t uVar1;\n    uint64_t uVar2;\n    code *pcVar3;\n    int64_t arg1_00;\n    int64_t *piVar4;\n    uint64_t uVar5;\n    uint64_t uVar6;\n    \n    uVar6 = 0x7ffffffffffffffe;\n    if (0x7ffffffffffffffe < arg2) {\n        fcn.140004920();\n        pcVar3 = swi(3);\n        piVar4 = (*pcVar3)();\n        return piVar4;\n    }\n    uVar2 = arg1[3];\n    uVar5 = arg2 | 7;\n    if ((uVar5 < 0x7fffffffffffffff) && (uVar2 <= 0x7ffffffffffffffe - (uVar2 >> 1))) {\n        uVar1 = (uVar2 >> 1) + uVar2;\n        uVar6 = uVar5;\n        if (uVar5 < uVar1) {\n            uVar6 = uVar1;\n        }\n        uVar5 = uVar6 + 1;\n        if (0x7fffffffffffffff < uVar5) {\n            fcn.140004888();\n            pcVar3 = swi(3);\n            piVar4 = (*pcVar3)();\n            return piVar4;\n        }\n    }\n    else {\n        uVar5 = 0x7fffffffffffffff;\n    }\n    arg1_00 = fcn.140004e84(uVar5 * 2);\n    arg1[3] = uVar6;\n    arg1[2] = arg2;\n    fcn.14001a740(arg1_00, arg4, arg2 * 2);\n    *(arg2 * 2 + arg1_00) = 0;\n    if (7 < uVar2) {\n        fcn.140003174(*arg1, uVar2 * 2 + 2);\n    }\n    *arg1 = arg1_00;\n    return arg1;\n}\n",
        "token_count": 476
    },
    "140004d4": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nint64_t * fcn.140004d40(int64_t *arg1, uint64_t arg2, ulong noname_2, ulong arg4)\n\n{\n    uint64_t uVar1;\n    int64_t iVar2;\n    uint64_t uVar3;\n    int64_t arg2_00;\n    code *pcVar4;\n    int64_t arg3;\n    int64_t arg1_00;\n    int64_t *piVar5;\n    uint64_t uVar6;\n    uint64_t uVar7;\n    int64_t in_stack_00000028;\n    \n    iVar2 = arg1[2];\n    uVar7 = 0x7ffffffffffffffe;\n    if (0x7ffffffffffffffeU - iVar2 < arg2) {\n        fcn.140004920();\n        pcVar4 = swi(3);\n        piVar5 = (*pcVar4)();\n        return piVar5;\n    }\n    uVar3 = arg1[3];\n    uVar6 = iVar2 + arg2 | 7;\n    if ((uVar6 < 0x7fffffffffffffff) && (uVar3 <= 0x7ffffffffffffffe - (uVar3 >> 1))) {\n        uVar1 = (uVar3 >> 1) + uVar3;\n        uVar7 = uVar6;\n        if (uVar6 < uVar1) {\n            uVar7 = uVar1;\n        }\n        uVar6 = uVar7 + 1;\n        if (0x7fffffffffffffff < uVar6) {\n            fcn.140004888();\n            pcVar4 = swi(3);\n            piVar5 = (*pcVar4)();\n            return piVar5;\n        }\n    }\n    else {\n        uVar6 = 0x7fffffffffffffff;\n    }\n    arg1_00 = fcn.140004e84(uVar6 * 2);\n    arg3 = iVar2 * 2;\n    arg1[2] = iVar2 + arg2;\n    arg1[3] = uVar7;\n    if (uVar3 < 8) {\n        fcn.14001a740(arg1_00, arg1, arg3);\n        fcn.14001a740(arg3 + arg1_00, arg4, in_stack_00000028 * 2);\n        *(arg1_00 + (iVar2 + in_stack_00000028) * 2) = 0;\n    }\n    else {\n        arg2_00 = *arg1;\n        fcn.14001a740(arg1_00, arg2_00, arg3);\n        fcn.14001a740(arg3 + arg1_00, arg4, in_stack_00000028 * 2);\n        *(arg1_00 + (iVar2 + in_stack_00000028) * 2) = 0;\n        fcn.140003174(arg2_00, uVar3 * 2 + 2);\n    }\n    *arg1 = arg1_00;\n    return arg1;\n}\n",
        "token_count": 666
    },
    "14000c55": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nvoid fcn.14000c554(ulong arg1, ulong arg2)\n\n{\n    int32_t iVar1;\n    int64_t arg1_00;\n    uint64_t uVar2;\n    ulong var_140h;\n    uchar auStack616 [32];\n    uint64_t uStack584;\n    int64_t iStack576;\n    uchar auStack568 [528];\n    uint64_t uStack40;\n    \n    uStack40 = *0x14003ef38 ^ auStack616;\n    uStack584 = 0x104;\n    iVar1 = fcn.14000c4a0(&uStack584, auStack568, arg2);\n    if (iVar1 < 0) {\n        if (iVar1 == -0x7ff8ff86) {\n            arg1_00 = 0;\n            iStack576 = 0;\n            uVar2 = uStack584 * 3 >> 1;\n            if (uStack584 < uVar2) {\n                do {\n                    uStack584 = uVar2;\n                    if (arg1_00 != 0) {\n                        fcn.1400187b4(arg1_00);\n                        iStack576 = 0;\n                    }\n                    iVar1 = fcn.140004770(&iStack576);\n                    arg1_00 = iStack576;\n                    if (iVar1 < 0) {\n                        if (iStack576 != 0) {\n                            fcn.1400187b4(iStack576);\n                        }\n                        goto code_r0x00014000c650;\n                    }\n                    iVar1 = fcn.14000c4a0(&uStack584, iStack576, arg2);\n                    if (-1 < iVar1) {\n                        fcn.14000ca84(arg1, arg1_00);\ncode_r0x00014000c684:\n                        if (arg1_00 != 0) {\n                            fcn.1400187b4(arg1_00);\n                        }\n                        goto code_r0x00014000c650;\n                    }\n                    if (iVar1 != -0x7ff8ff86) goto code_r0x00014000c684;\n                    uVar2 = uStack584 * 3 >> 1;\n                } while (uStack584 < uVar2);\n                if (arg1_00 != 0) {\n                    fcn.1400187b4(arg1_00);\n                }\n            }\n        }\n    }\n    else {\n        fcn.14000ca84(arg1, auStack568);\n    }\ncode_r0x00014000c650:\n    fcn.140018790(uStack40 ^ auStack616);\n    return;\n}\n",
        "token_count": 574
    },
    "14000dbd": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nvoid fcn.14000dbdc(float *arg1)\n\n{\n    int64_t *arg3;\n    int64_t *piVar1;\n    int64_t *piVar2;\n    int64_t *piVar3;\n    int64_t **ppiVar4;\n    code *pcVar5;\n    int64_t *piVar6;\n    int32_t iVar7;\n    uint64_t uVar8;\n    int64_t iVar9;\n    int64_t **arg1_00;\n    uint64_t uVar10;\n    uint64_t uVar11;\n    int64_t **ppiVar12;\n    float fVar13;\n    ulong uStackX8;\n    \n    uVar10 = *(arg1 + 4) + 1;\n    uVar8 = *(arg1 + 0xe);\n    if (uVar10 < 0) {\n        fVar13 = uVar10 >> 1 | uVar10 & 1;\n        fVar13 = fVar13 + fVar13;\n    }\n    else {\n        fVar13 = uVar10;\n    }\n    fVar13 = fcn.14002df74(fVar13 / *arg1);\n    iVar9 = 0;\n    if ((*0x1400382e0 <= fVar13) && (fVar13 = fVar13 - *0x1400382e0,  fVar13 < *0x1400382e0)) {\n        iVar9 = -0x8000000000000000;\n    }\n    uVar10 = 8;\n    if (8 < fVar13 + iVar9) {\n        uVar10 = fVar13 + iVar9;\n    }\n    uVar11 = uVar8;\n    if ((uVar8 < uVar10) && ((0x1ff < uVar8 || (uVar11 = uVar8 << 3,  uVar8 << 3 < uVar10)))) {\n        uVar11 = uVar10;\n    }\n    uStackX8 = uStackX8._4_4_ << 0x20;\n    for (iVar9 = 0x3f; 0xfffffffffffffffU >> iVar9 == 0; iVar9 = iVar9 + -1) {\n    }\n    if (1 << (iVar9 & 0x3f) < uVar11) {\n        fcn.140010890(\"invalid hash bucket count\");\n        pcVar5 = swi(3);\n        (*pcVar5)();\n        return;\n    }\n    arg3 = *(arg1 + 2);\n    uStackX8 = uStackX8._4_4_ << 0x20;\n    arg1_00 = arg1 + 6;\n    uVar8 = uVar11 - 1 | 1;\n    iVar9 = 0x3f;\n    if (uVar8 != 0) {\n        for (; uVar8 >> iVar9 == 0; iVar9 = iVar9 + -1) {\n        }\n    }\n    iVar9 = 1 << (iVar9 + 1U & 0x3f);\n    fcn.14000dac0(arg1_00, iVar9 * 2, arg3);\n    *(arg1 + 0xe) = iVar9;\n    *(arg1 + 0xc) = iVar9 + -1;\n    piVar6 = **(arg1 + 2);\njoined_r0x00014000dcef:\n    do {\n        while( true ) {\n            while( true ) {\n                if (piVar6 == arg3) {\n                    uStackX8 = 0;\n                    fcn.14000de40(&uStackX8);\n                    return;\n                }\n                piVar1 = *piVar6;\n                uVar8 = fcn.14000df7c(arg1_00, piVar6 + 2);\n                iVar9 = *(arg1 + 6);\n                uVar8 = uVar8 & *(arg1 + 0xc);\n                if (*(iVar9 + uVar8 * 0x10) != arg3) break;\n                *(iVar9 + uVar8 * 0x10) = piVar6;\n                *(iVar9 + 8 + uVar8 * 0x10) = piVar6;\n                piVar6 = piVar1;\n            }\n            ppiVar12 = *(iVar9 + 8 + uVar8 * 0x10);\n            arg1_00 = piVar6[2];\n            iVar7 = fcn.14001340c(arg1_00, ppiVar12[2]);\n            if (iVar7 != 0) break;\n            piVar2 = *ppiVar12;\n            if (piVar2 != piVar6) {\n                piVar3 = piVar6[1];\n                *piVar3 = piVar1;\n                arg1_00 = piVar1[1];\n                *arg1_00 = piVar2;\n                ppiVar12 = piVar2[1];\n                *ppiVar12 = piVar6;\n                piVar2[1] = arg1_00;\n                piVar1[1] = piVar3;\n                piVar6[1] = ppiVar12;\n            }\n            *(iVar9 + 8 + uVar8 * 0x10) = piVar6;\n            piVar6 = piVar1;\n        }\n        do {\n            if (*(iVar9 + uVar8 * 0x10) == ppiVar12) {\n                piVar2 = piVar6[1];\n                *piVar2 = piVar1;\n                arg1_00 = piVar1[1];\n                *arg1_00 = ppiVar12;\n                ppiVar4 = ppiVar12[1];\n                *ppiVar4 = piVar6;\n                ppiVar12[1] = arg1_00;\n                piVar1[1] = piVar2;\n                piVar6[1] = ppiVar4;\n                *(iVar9 + uVar8 * 0x10) = piVar6;\n                piVar6 = piVar1;\n                goto joined_r0x00014000dcef;\n            }\n            ppiVar12 = ppiVar12[1];\n            iVar7 = fcn.14001340c(piVar6[2], ppiVar12[2]);\n        } while (iVar7 != 0);\n        piVar2 = *ppiVar12;\n        piVar3 = piVar6[1];\n        *piVar3 = piVar1;\n        arg1_00 = piVar1[1];\n        *arg1_00 = piVar2;\n        ppiVar12 = piVar2[1];\n        *ppiVar12 = piVar6;\n        piVar2[1] = arg1_00;\n        piVar1[1] = piVar3;\n        piVar6[1] = ppiVar12;\n        piVar6 = piVar1;\n    } while( true );\n}\n",
        "token_count": 1512
    },
    "1400111b": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nulong fcn.1400111b8(ulong *arg1)\n\n{\n    code **ppcVar1;\n    ulong uVar2;\n    uint64_t uVar3;\n    \n    ppcVar1 = fcn.14002d9b0(0x38);\n    if (ppcVar1 == NULL) {\n        uVar2 = 0x8007000e;\n    }\n    else {\n        *(ppcVar1 + 1) = 0;\n        *ppcVar1 = vtable.CommonUtil::CMpGlobalVarsTable.0;\n        uVar3 = 0x69;\n        ppcVar1[2] = NULL;\n        do {\n            uVar3 = uVar3 >> 1;\n        } while (uVar3 != 0);\n        ppcVar1[4] = NULL;\n        ppcVar1[5] = NULL;\n        ppcVar1[3] = NULL;\n        LOCK();\n        *(ppcVar1 + 1) = *(ppcVar1 + 1) + 1;\n        *arg1 = ppcVar1;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 257
    },
    "14001e25": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nvoid fcn.14001e254(int16_t *arg1, int16_t **arg2, int16_t *arg3, int64_t *arg4)\n\n{\n    bool bVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    int16_t iVar4;\n    int64_t *in_stack_00000028;\n    \n    *in_stack_00000028 = 0;\n    *arg4 = 1;\n    if (arg2 != NULL) {\n        *arg2 = arg3;\n        arg2 = arg2 + 1;\n    }\n    bVar1 = false;\n    do {\n        iVar4 = 0x22;\n        if (*arg1 == 0x22) {\n            bVar1 = !bVar1;\n        }\n        else {\n            *in_stack_00000028 = *in_stack_00000028 + 1;\n            if (arg3 != NULL) {\n                *arg3 = *arg1;\n                arg3 = arg3 + 1;\n            }\n            iVar4 = *arg1;\n            if (iVar4 == 0) goto code_r0x00014001e2eb;\n        }\n        arg1 = arg1 + 1;\n    } while ((bVar1) || ((iVar4 != 0x20 && (iVar4 != 9))));\n    if (arg3 != NULL) {\n        arg3[-1] = 0;\n    }\ncode_r0x00014001e2eb:\n    bVar1 = false;\n    while (iVar4 = *arg1,  iVar4 != 0) {\n        while ((iVar4 == 0x20 || (iVar4 == 9))) {\n            arg1 = arg1 + 1;\n            iVar4 = *arg1;\n        }\n        if (iVar4 == 0) break;\n        if (arg2 != NULL) {\n            *arg2 = arg3;\n            arg2 = arg2 + 1;\n        }\n        *arg4 = *arg4 + 1;\n        while( true ) {\n            uVar3 = 1;\n            uVar2 = 0;\n            for (; *arg1 == 0x5c; arg1 = arg1 + 1) {\n                uVar2 = uVar2 + 1;\n            }\n            if (*arg1 == 0x22) {\n                if ((uVar2 & 1) == 0) {\n                    if ((bVar1) && (arg1[1] == 0x22)) {\n                        arg1 = arg1 + 1;\n                    }\n                    else {\n                        bVar1 = !bVar1;\n                        uVar3 = 0;\n                    }\n                }\n                uVar2 = uVar2 >> 1;\n            }\n            while (uVar2 != 0) {\n                uVar2 = uVar2 - 1;\n                if (arg3 != NULL) {\n                    *arg3 = 0x5c;\n                    arg3 = arg3 + 1;\n                }\n                *in_stack_00000028 = *in_stack_00000028 + 1;\n            }\n            iVar4 = *arg1;\n            if ((iVar4 == 0) || ((!bVar1 && ((iVar4 == 0x20 || (iVar4 == 9)))))) break;\n            if (uVar3 != 0) {\n                if (arg3 != NULL) {\n                    *arg3 = iVar4;\n                    arg3 = arg3 + 1;\n                }\n                *in_stack_00000028 = *in_stack_00000028 + 1;\n            }\n            arg1 = arg1 + 1;\n        }\n        if (arg3 != NULL) {\n            *arg3 = 0;\n            arg3 = arg3 + 1;\n        }\n        *in_stack_00000028 = *in_stack_00000028 + 1;\n    }\n    if (arg2 != NULL) {\n        *arg2 = NULL;\n    }\n    *arg4 = *arg4 + 1;\n    return;\n}\n",
        "token_count": 875
    },
    "14002068": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nvoid fcn.140020688(int64_t arg1, ulong arg2)\n\n{\n    uint8_t uVar1;\n    uint64_t uVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    \n    iVar4 = *(arg1 + 0x458);\n    if (iVar4 == 0) {\n        uVar2 = 0x200;\n        iVar4 = arg1 + 0x50;\n    }\n    else {\n        uVar2 = *(arg1 + 0x450) >> 1;\n    }\n    iVar4 = (uVar2 - 1) + iVar4;\n    *(arg1 + 0x40) = iVar4;\n    iVar3 = iVar4;\n    while( true ) {\n        if ((*(arg1 + 0x30) < 1) && (arg2 == 0)) break;\n        uVar1 = arg2;\n        *(arg1 + 0x30) = *(arg1 + 0x30) + -1;\n        arg2._0_4_ = arg2 >> 3;\n        **(arg1 + 0x40) = (uVar1 & 7) + 0x30;\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -1;\n        iVar3 = *(arg1 + 0x40);\n    }\n    *(arg1 + 0x48) = iVar4 - *(arg1 + 0x40);\n    *(arg1 + 0x40) = iVar3 + 1;\n    return;\n}\n",
        "token_count": 345
    },
    "14002078": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nvoid fcn.14002078c(int64_t arg1, ulong arg2)\n\n{\n    uint64_t uVar1;\n    int64_t iVar2;\n    uint8_t in_R8B;\n    int64_t iVar3;\n    char cVar4;\n    \n    iVar3 = *(arg1 + 0x458);\n    if (iVar3 == 0) {\n        uVar1 = 0x200;\n        iVar3 = arg1 + 0x50;\n    }\n    else {\n        uVar1 = *(arg1 + 0x450) >> 1;\n    }\n    iVar3 = (uVar1 - 1) + iVar3;\n    *(arg1 + 0x40) = iVar3;\n    iVar2 = iVar3;\n    uVar1 = arg2;\n    while ((0 < *(arg1 + 0x30) || (uVar1 != 0))) {\n        *(arg1 + 0x30) = *(arg1 + 0x30) + -1;\n        cVar4 = uVar1 + (uVar1 / 10) * -10 + '0';\n        if ('9' < cVar4) {\n            cVar4 = (in_R8B ^ 1) * ' ' + '\\a' + cVar4;\n        }\n        **(arg1 + 0x40) = cVar4;\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -1;\n        iVar2 = *(arg1 + 0x40);\n        uVar1 = uVar1 / 10;\n    }\n    *(arg1 + 0x48) = iVar3 - *(arg1 + 0x40);\n    *(arg1 + 0x40) = iVar2 + 1;\n    return;\n}\n",
        "token_count": 395
    },
    "1400208e": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nvoid fcn.1400208ec(int64_t arg1, ulong arg2)\n\n{\n    uint64_t uVar1;\n    int64_t iVar2;\n    uint8_t uVar3;\n    uint8_t in_R8B;\n    int64_t iVar4;\n    \n    iVar4 = *(arg1 + 0x458);\n    if (iVar4 == 0) {\n        uVar1 = 0x200;\n        iVar4 = arg1 + 0x50;\n    }\n    else {\n        uVar1 = *(arg1 + 0x450) >> 1;\n    }\n    iVar4 = (uVar1 - 1) + iVar4;\n    *(arg1 + 0x40) = iVar4;\n    iVar2 = iVar4;\n    while( true ) {\n        if ((*(arg1 + 0x30) < 1) && (arg2 == 0)) break;\n        uVar3 = arg2;\n        arg2._0_4_ = arg2 >> 4;\n        uVar3 = (uVar3 & 0xf) + 0x30;\n        *(arg1 + 0x30) = *(arg1 + 0x30) + -1;\n        if (0x39 < uVar3) {\n            uVar3 = (in_R8B ^ 1) * ' ' + '\\a' + uVar3;\n        }\n        **(arg1 + 0x40) = uVar3;\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -1;\n        iVar2 = *(arg1 + 0x40);\n    }\n    *(arg1 + 0x48) = iVar4 - *(arg1 + 0x40);\n    *(arg1 + 0x40) = iVar2 + 1;\n    return;\n}\n",
        "token_count": 405
    },
    "140020a1": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nvoid fcn.140020a1c(int64_t arg1, uint64_t arg2)\n\n{\n    uint64_t uVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    \n    iVar3 = *(arg1 + 0x458);\n    if (iVar3 == 0) {\n        uVar1 = 0x200;\n        iVar3 = arg1 + 0x50;\n    }\n    else {\n        uVar1 = *(arg1 + 0x450) >> 1;\n    }\n    iVar3 = (uVar1 - 1) + iVar3;\n    *(arg1 + 0x40) = iVar3;\n    iVar2 = iVar3;\n    for (; (0 < *(arg1 + 0x30) || (arg2 != 0)); arg2 = arg2 >> 3) {\n        *(arg1 + 0x30) = *(arg1 + 0x30) + -1;\n        **(arg1 + 0x40) = (arg2 & 7) + 0x30;\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -1;\n        iVar2 = *(arg1 + 0x40);\n    }\n    *(arg1 + 0x48) = iVar3 - *(arg1 + 0x40);\n    *(arg1 + 0x40) = iVar2 + 1;\n    return;\n}\n",
        "token_count": 318
    },
    "140020b2": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nvoid fcn.140020b20(int64_t arg1, uint64_t arg2)\n\n{\n    uint64_t uVar1;\n    int64_t iVar2;\n    uint8_t in_R8B;\n    int64_t iVar3;\n    char cVar4;\n    \n    iVar3 = *(arg1 + 0x458);\n    if (iVar3 == 0) {\n        uVar1 = 0x200;\n        iVar3 = arg1 + 0x50;\n    }\n    else {\n        uVar1 = *(arg1 + 0x450) >> 1;\n    }\n    iVar3 = (uVar1 - 1) + iVar3;\n    *(arg1 + 0x40) = iVar3;\n    iVar2 = iVar3;\n    while ((0 < *(arg1 + 0x30) || (arg2 != 0))) {\n        *(arg1 + 0x30) = *(arg1 + 0x30) + -1;\n        cVar4 = arg2 + (arg2 / 10) * -10 + '0';\n        if ('9' < cVar4) {\n            cVar4 = (in_R8B ^ 1) * ' ' + '\\a' + cVar4;\n        }\n        **(arg1 + 0x40) = cVar4;\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -1;\n        iVar2 = *(arg1 + 0x40);\n        arg2 = arg2 / 10;\n    }\n    *(arg1 + 0x48) = iVar3 - *(arg1 + 0x40);\n    *(arg1 + 0x40) = iVar2 + 1;\n    return;\n}\n",
        "token_count": 384
    },
    "140020c8": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nvoid fcn.140020c8c(int64_t arg1, uint64_t arg2)\n\n{\n    uint64_t uVar1;\n    int64_t iVar2;\n    uint8_t uVar3;\n    uint8_t in_R8B;\n    int64_t iVar4;\n    \n    iVar4 = *(arg1 + 0x458);\n    if (iVar4 == 0) {\n        uVar1 = 0x200;\n        iVar4 = arg1 + 0x50;\n    }\n    else {\n        uVar1 = *(arg1 + 0x450) >> 1;\n    }\n    iVar4 = (uVar1 - 1) + iVar4;\n    *(arg1 + 0x40) = iVar4;\n    iVar2 = iVar4;\n    while ((0 < *(arg1 + 0x30) || (arg2 != 0))) {\n        uVar3 = arg2;\n        arg2 = arg2 >> 4;\n        uVar3 = (uVar3 & 0xf) + 0x30;\n        *(arg1 + 0x30) = *(arg1 + 0x30) + -1;\n        if (0x39 < uVar3) {\n            uVar3 = (in_R8B ^ 1) * ' ' + '\\a' + uVar3;\n        }\n        **(arg1 + 0x40) = uVar3;\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -1;\n        iVar2 = *(arg1 + 0x40);\n    }\n    *(arg1 + 0x48) = iVar4 - *(arg1 + 0x40);\n    *(arg1 + 0x40) = iVar2 + 1;\n    return;\n}\n",
        "token_count": 394
    },
    "14002201": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nvoid fcn.14002201c(int64_t arg1)\n\n{\n    int32_t *arg4;\n    int64_t **arg1_00;\n    int16_t iVar1;\n    int64_t iVar2;\n    int64_t *piVar3;\n    char cVar4;\n    uint16_t uVar5;\n    int32_t iVar6;\n    uint64_t arg3;\n    uint64_t uVar7;\n    int32_t iVar8;\n    ushort uVar9;\n    int32_t iVar10;\n    uint64_t uVar11;\n    uint32_t uVar12;\n    int64_t arg2;\n    uchar auStack120 [32];\n    ulong uStack88;\n    ushort auStack72 [2];\n    uint uStack68;\n    ushort uStack64;\n    uint64_t uStack56;\n    \n    uStack56 = *0x14003ef38 ^ auStack120;\n    uVar5 = *(arg1 + 0x3a);\n    uVar9 = 0x78;\n    uVar11 = 1;\n    if (uVar5 < 0x65) {\n        if (uVar5 == 100) {\ncode_r0x000140022143:\n            *(arg1 + 0x28) = *(arg1 + 0x28) | 0x10;\ncode_r0x000140022147:\n            cVar4 = fcn.1400200c8(arg1);\n        }\n        else {\n            if (uVar5 != 0x41) {\n                if (uVar5 == 0x43) {\ncode_r0x0001400220af:\n                    cVar4 = fcn.140022adc(arg1);\n                }\n                else {\n                    if (uVar5 < 0x45) goto code_r0x00014002244d;\n                    if (uVar5 < 0x48) goto code_r0x000140022150;\n                    if (uVar5 == 0x53) {\ncode_r0x000140022105:\n                        cVar4 = fcn.140022cec(arg1);\n                    }\n                    else {\n                        if (uVar5 == 0x58) goto code_r0x0001400220c8;\n                        if (uVar5 != 0x5a) {\n                            if (uVar5 != 0x61) {\n                                if (uVar5 != 99) goto code_r0x00014002244d;\n                                goto code_r0x0001400220af;\n                            }\n                            goto code_r0x000140022150;\n                        }\n                        cVar4 = fcn.1400224f0(arg1);\n                    }\n                }\n                goto code_r0x000140022155;\n            }\ncode_r0x000140022150:\n            cVar4 = fcn.1400227b8(arg1);\n        }\n    }\n    else {\n        if (uVar5 < 0x68) goto code_r0x000140022150;\n        if (uVar5 == 0x69) goto code_r0x000140022143;\n        if (uVar5 == 0x6e) {\n            cVar4 = fcn.140022ba0(arg1);\n        }\n        else if (uVar5 == 0x6f) {\n            if ((*(arg1 + 0x28) >> 5 & 1) != 0) {\n                *(arg1 + 0x28) = *(arg1 + 0x28) | 0x80;\n            }\n            cVar4 = fcn.14001fcf4(arg1);\n        }\n        else {\n            if (uVar5 == 0x70) {\n                *(arg1 + 0x30) = 0x10;\n                *(arg1 + 0x34) = 0xb;\n            }\n            else {\n                if (uVar5 == 0x73) goto code_r0x000140022105;\n                if (uVar5 == 0x75) goto code_r0x000140022147;\n                if (uVar5 != 0x78) goto code_r0x00014002244d;\n            }\ncode_r0x0001400220c8:\n            cVar4 = fcn.14002049c(arg1);\n        }\n    }\ncode_r0x000140022155:\n    uVar7 = 0;\n    if ((cVar4 == '\\0') || (*(arg1 + 0x38) != '\\0')) goto code_r0x00014002244d;\n    uVar12 = *(arg1 + 0x28);\n    uStack68 = 0;\n    uStack64 = 0;\n    arg3 = uVar7;\n    if ((uVar12 >> 4 & 1) != 0) {\n        if ((uVar12 >> 6 & 1) == 0) {\n            if ((uVar12 & 1) == 0) {\n                arg3 = 0;\n                if ((uVar12 >> 1 & 1) != 0) {\n                    uStack68 = 0x20;\n                    arg3 = uVar11;\n                }\n                goto code_r0x0001400221c0;\n            }\n            uVar5 = 0x2b;\n        }\n        else {\n            uVar5 = 0x2d;\n        }\n        uStack68 = uVar5;\n        arg3 = uVar11;\n    }\ncode_r0x0001400221c0:\n    iVar1 = *(arg1 + 0x3a);\n    if (((iVar1 - 0x58U & 0xffdf) != 0) || ((uVar12 >> 5 & 1) == 0)) {\n        uVar11 = uVar7;\n    }\n    if ((uVar11 != '\\0') || ((iVar1 - 0x41U & 0xffdf) == 0)) {\n        *(&uStack68 + arg3 * 2) = 0x30;\n        if ((iVar1 == 0x58) || (iVar1 == 0x41)) {\n            uVar9 = 0x58;\n        }\n        *(&uStack68 + arg3 * 2 + 2) = uVar9;\n        arg3 = arg3 + 2;\n    }\n    iVar8 = (*(arg1 + 0x2c) - arg3) - *(arg1 + 0x48);\n    if (((uVar12 & 0xc) == 0) && (0 < iVar8)) {\n        iVar6 = *(arg1 + 0x20);\n        uVar11 = uVar7;\n        do {\n            iVar2 = *(arg1 + 0x460);\n            if (*(iVar2 + 0x10) == *(iVar2 + 8)) {\n                if (*(iVar2 + 0x18) == '\\0') {\n                    iVar6 = -1;\n                }\n                else {\n                    iVar6 = iVar6 + 1;\n                }\n                *(arg1 + 0x20) = iVar6;\n            }\n            else {\n                *(arg1 + 0x20) = iVar6 + 1;\n                *(iVar2 + 0x10) = *(iVar2 + 0x10) + 1;\n                ***(arg1 + 0x460) = 0x20;\n                **(arg1 + 0x460) = **(arg1 + 0x460) + 2;\n                iVar6 = *(arg1 + 0x20);\n            }\n        } while ((iVar6 != -1) && (uVar12 = uVar11 + 1,  uVar11 = uVar12,  uVar12 < iVar8));\n    }\n    uStack88 = *(arg1 + 8);\n    arg4 = arg1 + 0x20;\n    arg1_00 = arg1 + 0x460;\n    fcn.140022ea0(arg1_00, &uStack68, arg3, arg4);\n    if (((*(arg1 + 0x28) >> 3 & 1) != 0) && (((*(arg1 + 0x28) >> 2 & 1) == 0 && (0 < iVar8)))) {\n        iVar6 = *arg4;\n        uVar11 = uVar7;\n        do {\n            piVar3 = *arg1_00;\n            if (piVar3[2] == piVar3[1]) {\n                if (*(piVar3 + 3) == '\\0') {\n                    iVar6 = -1;\n                }\n                else {\n                    iVar6 = iVar6 + 1;\n                }\n                *arg4 = iVar6;\n            }\n            else {\n                *arg4 = iVar6 + 1;\n                piVar3[2] = piVar3[2] + 1;\n                ***arg1_00 = 0x30;\n                **arg1_00 = **arg1_00 + 2;\n                iVar6 = *arg4;\n            }\n        } while ((iVar6 != -1) && (uVar12 = uVar11 + 1,  uVar11 = uVar12,  uVar12 < iVar8));\n    }\n    if ((*(arg1 + 0x4c) == '\\0') && (iVar6 = *(arg1 + 0x48),  0 < iVar6)) {\n        iVar2 = *(arg1 + 8);\n        if (*(iVar2 + 0x28) == '\\0') {\n            fcn.140017aa0(iVar2);\n            iVar6 = *(arg1 + 0x48);\n        }\n        arg2 = *(arg1 + 0x40);\n        if (iVar6 != 0) {\n            do {\n                auStack72[0] = 0;\n                iVar6 = fcn.1400269ec(auStack72, arg2, *(*(iVar2 + 0x18) + 8), *(arg1 + 8));\n                if (iVar6 < 1) {\n                    *(arg1 + 0x20) = 0xffffffff;\n                    break;\n                }\n                piVar3 = *arg1_00;\n                if (piVar3[2] == piVar3[1]) {\n                    if (*(piVar3 + 3) == '\\0') {\n                        *(arg1 + 0x20) = 0xffffffff;\n                    }\n                    else {\n                        *(arg1 + 0x20) = *(arg1 + 0x20) + 1;\n                    }\n                }\n                else {\n                    *(arg1 + 0x20) = *(arg1 + 0x20) + 1;\n                    piVar3[2] = piVar3[2] + 1;\n                    ***arg1_00 = auStack72[0];\n                    **arg1_00 = **arg1_00 + 2;\n                }\n                arg2 = arg2 + iVar6;\n                uVar12 = uVar7 + 1;\n                uVar7 = uVar12;\n            } while (uVar12 != *(arg1 + 0x48));\n        }\n    }\n    else {\n        uStack88 = *(arg1 + 8);\n        fcn.140022ea0(arg1_00, *(arg1 + 0x40), *(arg1 + 0x48), arg4);\n    }\n    iVar6 = *arg4;\n    if (((-1 < iVar6) && ((*(arg1 + 0x28) >> 2 & 1) != 0)) && (iVar10 = 0,  0 < iVar8)) {\n        do {\n            piVar3 = *arg1_00;\n            if (piVar3[2] == piVar3[1]) {\n                if (*(piVar3 + 3) == '\\0') {\n                    iVar6 = -1;\n                }\n                else {\n                    iVar6 = iVar6 + 1;\n                }\n                *arg4 = iVar6;\n            }\n            else {\n                *arg4 = iVar6 + 1;\n                piVar3[2] = piVar3[2] + 1;\n                ***arg1_00 = 0x20;\n                **arg1_00 = **arg1_00 + 2;\n                iVar6 = *arg4;\n            }\n        } while ((iVar6 != -1) && (iVar10 = iVar10 + 1,  iVar10 < iVar8));\n    }\ncode_r0x00014002244d:\n    fcn.140018790(uStack56 ^ auStack120);\n    return;\n}\n",
        "token_count": 2740
    },
    "14002247": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nulong fcn.140022478(int64_t arg1)\n\n{\n    uint16_t uVar1;\n    int32_t iVar2;\n    uint16_t *puVar3;\n    uint64_t uVar4;\n    bool bVar5;\n    \n    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n    puVar3 = *(*(arg1 + 0x18) + -8);\n    if ((puVar3 == NULL) || (*(puVar3 + 4) == 0)) {\n        uVar4 = 6;\n        *(arg1 + 0x40) = \"(null)\";\n    }\n    else {\n        iVar2 = *(arg1 + 0x34);\n        if (iVar2 == 2) {\ncode_r0x0001400224c0:\n            bVar5 = false;\n        }\n        else if ((iVar2 == 3) || (iVar2 == 0xc)) {\n            bVar5 = true;\n        }\n        else {\n            if (*(arg1 + 0x34) == 0xd) goto code_r0x0001400224c0;\n            bVar5 = (*(arg1 + 0x39) + 0x9dU & 0xef) != 0;\n        }\n        *(arg1 + 0x40) = *(puVar3 + 4);\n        uVar1 = *puVar3;\n        uVar4 = uVar1;\n        if (bVar5) {\n            *(arg1 + 0x4c) = 1;\n            uVar4 = uVar1 >> 1;\n            goto code_r0x0001400224ea;\n        }\n    }\n    *(arg1 + 0x4c) = 0;\ncode_r0x0001400224ea:\n    *(arg1 + 0x48) = uVar4;\n    return CONCAT71(uVar4 >> 8, 1);\n}\n",
        "token_count": 426
    },
    "1400224f": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nulong fcn.1400224f0(ulong *arg1)\n\n{\n    uint16_t uVar1;\n    uint16_t *puVar2;\n    int64_t iVar3;\n    char cVar4;\n    uint32_t uVar5;\n    \n    arg1[3] = arg1[3] + 8;\n    puVar2 = *(arg1[3] + -8);\n    if ((puVar2 == NULL) || (iVar3 = *(puVar2 + 4),  iVar3 == 0)) {\n        arg1[8] = \"(null)\";\n        uVar5 = 6;\n    }\n    else {\n        cVar4 = fcn.14001f0c4(*arg1, *(arg1 + 0x3a), *(arg1 + 0x34));\n        arg1[8] = iVar3;\n        uVar1 = *puVar2;\n        uVar5 = uVar1;\n        if (cVar4 != '\\0') {\n            *(arg1 + 0x4c) = 1;\n            uVar5 = uVar1 >> 1;\n            goto code_r0x000140022554;\n        }\n    }\n    *(arg1 + 0x4c) = 0;\ncode_r0x000140022554:\n    *(arg1 + 9) = uVar5;\n    return 1;\n}\n",
        "token_count": 302
    },
    "14000538": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nulong fcn.14000538c(int64_t arg1, uint64_t arg2, uchar *arg3)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    uint64_t arg3_00;\n    ulong uVar3;\n    \n    if (arg3 == NULL) {\ncode_r0x00014000541e:\n        uVar3 = 0;\n    }\n    else {\n        *arg3 = 0;\n        arg3_00 = arg2 >> 0x20 & 0xffff;\n        if (arg3_00 != 0) {\n            if (*(arg1 + 0x82) < arg3_00) {\n                fcn.14001a0c0(arg3, 0, *(arg1 + 0x82));\n                puVar2 = fcn.1400142cc();\n                *puVar2 = 0x22;\n                fcn.140014060();\n                goto code_r0x00014000541e;\n            }\n            fcn.14001a740(arg3, arg1, arg3_00);\n        }\n        if ((arg2 < 0) && (arg2 == 0)) {\n            arg3[*(arg1 + 0x81)] = 0x21;\n            arg3[*(arg1 + 0x81) + 1] = arg2;\n        }\n        else {\n            if (arg2 < 0) {\n                uVar3 = 0x140037528;\n            }\n            else {\n                uVar3 = 0x14003752c;\n            }\n            iVar1 = fcn.140004edc(arg3 + *(arg1 + 0x81), *(arg1 + 0x82) - *(arg1 + 0x81), uVar3, arg2 & 0xffffffff);\n            if (iVar1 == -1) goto code_r0x00014000541e;\n        }\n        uVar3 = 1;\n    }\n    return uVar3;\n}\n",
        "token_count": 434
    },
    "14000842": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint64_t fcn.140008428(void)\n\n{\n    uint32_t uVar1;\n    uint8_t uVar2;\n    uint64_t uVar3;\n    ulong arg2;\n    int64_t in_GS_OFFSET;\n    uint8_t auStackX8 [32];\n    \n    arg2 = 4;\n    uVar1 = *(**(in_GS_OFFSET + 0x58) + 4);\n    uVar3 = uVar1;\n    if (uVar1 < *0x140040774) {\n        uVar3 = fcn.14002db48(0x140040774);\n        if (*0x140040774 == -1) {\n            auStackX8[0] = 0;\n            fcn.14000ee5c(auStackX8, arg2);\n            uVar2 = auStackX8[0];\n            if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 4) != 0)) {\n                fcn.140001e30(*(*0x14003e208 + 0x10), 0x22, 0x1400376d8, auStackX8[0]);\n            }\n            *0x140040770 = uVar2;\n            uVar3 = fcn.14002dae8(0x140040774);\n        }\n    }\n    return uVar3 & 0xffffffffffffff00 | *0x140040770;\n}\n",
        "token_count": 332
    },
    "14000cb3": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nulong fcn.14000cb34(void)\n\n{\n    int64_t in_GS_OFFSET;\n    \n    if (*(**(in_GS_OFFSET + 0x58) + 4) < *0x1400407f0) {\n        fcn.14002db48(0x1400407f0);\n        if (*0x1400407f0 == -1) {\n            fcn.14000fddc();\n            fcn.140018a6c(0x14002ef10);\n            fcn.14002dae8(0x1400407f0);\n        }\n    }\n    return 0x140040828;\n}\n",
        "token_count": 142
    },
    "14001478": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint64_t fcn.140014784(ulong noname_0, ulong lpFlsData)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    \n    if ((*0x14003e9b8 == -1) || (iVar3 = sub.KERNEL32.dll_FlsGetValue(),  iVar3 == 0)) {\n        iVar2 = sub.KERNEL32.dll_FlsSetValue(*0x14003e9b8, 0xffffffffffffffff);\n        if (iVar2 != 0) {\n            iVar3 = fcn.140014d3c(1, 0x3c8);\n            if (iVar3 == 0) {\n                sub.KERNEL32.dll_FlsSetValue(*0x14003e9b8, 0);\n                iVar3 = 0;\n            }\n            else {\n                iVar2 = sub.KERNEL32.dll_FlsSetValue(*0x14003e9b8, iVar3);\n                if (iVar2 != 0) {\n                    fcn.140014450(iVar3);\n                    fcn.140014db4(0);\n                    return iVar3;\n                }\n                sub.KERNEL32.dll_FlsSetValue(*0x14003e9b8, 0);\n            }\n            fcn.140014db4(iVar3);\n        }\n    }\n    else if (iVar3 != -1) {\n        return iVar3;\n    }\n    fcn.140014c5c();\n    pcVar1 = swi(3);\n    iVar3 = (*pcVar1)();\n    return iVar3;\n}\n",
        "token_count": 343
    },
    "1400148f": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint64_t fcn.1400148f0(ulong noname_0, int64_t lpFlsData)\n\n{\n    int32_t iVar1;\n    int64_t arg1;\n    int64_t iVar2;\n    \n    iVar2 = 0;\n    if ((*0x14003e9b8 == -1) || (arg1 = sub.KERNEL32.dll_FlsGetValue(),  arg1 == 0)) {\n        iVar1 = sub.KERNEL32.dll_FlsSetValue(*0x14003e9b8, 0xffffffffffffffff);\n        if (iVar1 == 0) {\n            return 0;\n        }\n        arg1 = fcn.140014d3c(1, 0x3c8);\n        if (arg1 == 0) {\n            sub.KERNEL32.dll_FlsSetValue(*0x14003e9b8, 0);\n            arg1 = 0;\n        }\n        else {\n            iVar1 = sub.KERNEL32.dll_FlsSetValue(*0x14003e9b8, arg1);\n            if (iVar1 != 0) {\n                fcn.140014450(arg1);\n                fcn.140014db4(0);\n                goto code_r0x000140014991;\n            }\n            sub.KERNEL32.dll_FlsSetValue(*0x14003e9b8, 0);\n        }\n        fcn.140014db4(arg1);\n    }\n    else {\n        if (arg1 == -1) {\n            return 0;\n        }\ncode_r0x000140014991:\n        iVar2 = lpFlsData * 0x3c8 + arg1;\n    }\n    return iVar2;\n}\n",
        "token_count": 366
    },
    "140014a1": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuchar fcn.140014a10(void)\n\n{\n    if (*0x14003e9b8 != -1) {\n        sub.KERNEL32.dll_FlsFree();\n        *0x14003e9b8 = -1;\n    }\n    return 1;\n}\n",
        "token_count": 60
    },
    "14001ada": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint64_t fcn.14001adac(ulong noname_0, ulong arg2)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    int64_t iVar5;\n    \n    if (*0x14003ef50 == -1) {\n        iVar4 = 0;\n    }\n    else {\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        iVar3 = (*_sym.imp.KERNEL32.dll_FlsGetValue)();\n        iVar5 = 0;\n        iVar4 = iVar5;\n        if (((iVar3 != -1) && (iVar4 = iVar3,  iVar3 == 0)) &&\n           (iVar2 = (*_sym.imp.KERNEL32.dll_FlsSetValue)(),  iVar4 = iVar5,  iVar2 != 0)) {\n            iVar4 = fcn.140014d3c(1, 0x80);\n            if ((iVar4 == 0) || (iVar2 = (*_sym.imp.KERNEL32.dll_FlsSetValue)(*0x14003ef50, iVar4),  iVar2 == 0)) {\n                (*_sym.imp.KERNEL32.dll_FlsSetValue)(*0x14003ef50, 0);\n                iVar3 = iVar4;\n            }\n            else {\n                *(iVar4 + 0x78) = 0xfffffffe;\n                iVar3 = iVar5;\n                iVar5 = iVar4;\n            }\n            fcn.140014db4(iVar3);\n            iVar4 = iVar5;\n        }\n        (*_sym.imp.KERNEL32.dll_SetLastError)(uVar1);\n    }\n    return iVar4;\n}\n",
        "token_count": 364
    },
    "14001ae7": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint fcn.14001ae70(void)\n\n{\n    int32_t iVar1;\n    \n    *0x14003ef50 = (*_sym.imp.KERNEL32.dll_FlsAlloc)(0x14001ad70);\n    if (*0x14003ef50 != -1) {\n        iVar1 = (*_sym.imp.KERNEL32.dll_FlsSetValue)(*0x14003ef50, 0x14003fc90);\n        if (iVar1 != 0) {\n            *0x14003fd08 = 0xfffffffe;\n            return 1;\n        }\n        fcn.14001aebc();\n    }\n    return 0;\n}\n",
        "token_count": 142
    },
    "14001aeb": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuchar fcn.14001aebc(void)\n\n{\n    if (*0x14003ef50 != -1) {\n        (*_sym.imp.KERNEL32.dll_FlsFree)();\n        *0x14003ef50 = -1;\n    }\n    return 1;\n}\n",
        "token_count": 60
    },
    "140022c5": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nulong fcn.140022c54(int64_t arg1)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    char *arg1_00;\n    \n    *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n    iVar2 = *(arg1 + 0x30);\n    arg1_00 = *(*(arg1 + 0x18) + -8);\n    iVar1 = *(arg1 + 0x34);\n    if (iVar2 == -1) {\n        iVar2 = 0x7fffffff;\n    }\n    *(arg1 + 0x40) = arg1_00;\n    if ((iVar1 == 2) ||\n       (((iVar1 != 3 && (iVar1 != 0xc)) && ((*(arg1 + 0x34) == 0xd || ((*(arg1 + 0x39) + 0x9dU & 0xef) == 0)))))) {\n        if (arg1_00 == NULL) {\n            arg1_00 = \"(null)\";\n            *(arg1 + 0x40) = \"(null)\";\n        }\n        uVar3 = fcn.140013638(arg1_00, iVar2);\n    }\n    else {\n        if (arg1_00 == NULL) {\n            arg1_00 = 0x140034d80;\n            *(arg1 + 0x40) = 0x140034d80;\n        }\n        *(arg1 + 0x4c) = 1;\n        uVar3 = fcn.1400138b4(arg1_00, iVar2);\n    }\n    *(arg1 + 0x48) = uVar3;\n    return 1;\n}\n",
        "token_count": 388
    },
    "140022ce": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nulong fcn.140022cec(ulong *arg1)\n\n{\n    char cVar1;\n    uint32_t uVar2;\n    uint uVar3;\n    int64_t arg1_00;\n    \n    arg1[3] = arg1[3] + 8;\n    uVar2 = *(arg1 + 6);\n    arg1_00 = *(arg1[3] + -8);\n    arg1[8] = arg1_00;\n    if (uVar2 == 0xffffffff) {\n        uVar2 = 0x7fffffff;\n    }\n    cVar1 = fcn.14001f0c4(*arg1, *(arg1 + 0x3a), *(arg1 + 0x34));\n    if (cVar1 == '\\0') {\n        if (arg1_00 == 0) {\n            arg1[8] = \"(null)\";\n        }\n        uVar3 = fcn.140022d84(arg1, uVar2);\n    }\n    else {\n        if (arg1_00 == 0) {\n            arg1_00 = 0x140034d80;\n            arg1[8] = 0x140034d80;\n        }\n        *(arg1 + 0x4c) = 1;\n        uVar3 = fcn.1400138b4(arg1_00, uVar2);\n    }\n    *(arg1 + 9) = uVar3;\n    return 1;\n}\n",
        "token_count": 323
    },
    "1400055b": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\nuchar * fcn.1400055bc(int64_t *arg1, uchar *arg2)\n\n{\n    uint64_t *puVar1;\n    int64_t arg1_00;\n    uint64_t uVar2;\n    char cVar3;\n    uint64_t uVar4;\n    uint64_t uVar5;\n    uint64_t uVar6;\n    \n    arg1_00 = *arg1;\n    do {\n        while( true ) {\n            LOCK();\n            puVar1 = arg1_00 + 0x88;\n            uVar2 = *puVar1;\n            *puVar1 = *puVar1;\n            uVar5 = uVar2 & 0xffffffff;\n            uVar6 = uVar2 >> 0x20 & 0x7fffffff;\n            uVar4 = uVar2;\n            if ((uVar5 == 0x7fffffff) || (uVar2 < 0)) goto code_r0x0001400056b7;\n            uVar4 = uVar5 + 1;\n            if ((((uVar4 == 10) ||\n                 ((((uVar4 == 100 || (uVar4 == 1000)) || (uVar4 == 10000)) || ((uVar4 == 100000 || (uVar4 == 1000000))))\n                 )) || (uVar4 == 10000000)) || ((uVar4 == 100000000 || (uVar4 == 1000000000)))) {\n                uVar6 = uVar6 + 1;\n            }\n            if (uVar6 < *(arg1_00 + 0x82)) break;\n            uVar4 = uVar6 << 0x20 | uVar5 | 0x8000000000000000;\n            LOCK();\n            puVar1 = arg1_00 + 0x88;\n            uVar5 = *puVar1;\n            *puVar1 = *puVar1 ^ (uVar2 == uVar5) * (*puVar1 ^ uVar4);\n            if (uVar2 == uVar5) goto code_r0x0001400056b7;\n        }\n        uVar4 = uVar6 << 0x20 & 0x7fffffffffffffff | uVar4;\n        LOCK();\n        puVar1 = arg1_00 + 0x88;\n        uVar5 = *puVar1;\n        *puVar1 = *puVar1 ^ (uVar2 == uVar5) * (*puVar1 ^ uVar4);\n    } while (uVar2 != uVar5);\ncode_r0x0001400056b7:\n    cVar3 = fcn.14000538c(arg1_00, uVar4, arg2);\n    if (cVar3 == '\\0') {\n        *arg2 = 0;\n    }\n    return arg2;\n}\n",
        "token_count": 623
    },
    "140025a2": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\nulong fcn.140025a24(uint64_t *arg1, uchar *arg2, uint64_t arg3, ulong arg4)\n\n{\n    uint8_t *puVar1;\n    char cVar2;\n    uint16_t uVar3;\n    ulong uVar4;\n    char *pcVar5;\n    uint8_t *puVar6;\n    int64_t iVar7;\n    int64_t iVar8;\n    uint64_t uVar9;\n    uint8_t uVar10;\n    int16_t iVar11;\n    uint8_t *arg1_00;\n    uint32_t uVar12;\n    uint8_t *puVar13;\n    uint64_t uVar14;\n    uint64_t uVar15;\n    uint32_t in_stack_00000030;\n    uint8_t in_stack_00000038;\n    uint32_t in_stack_00000048;\n    int64_t in_stack_00000050;\n    \n    *arg2 = 0;\n    uVar12 = 0;\n    if (-1 < in_stack_00000030) {\n        uVar12 = in_stack_00000030;\n    }\n    if (arg3 <= uVar12 + 0xb) {\n        *(in_stack_00000050 + 0x30) = 1;\n        *(in_stack_00000050 + 0x2c) = 0x22;\n        fcn.140013f90(0, 0, 0, 0);\n        return 0x22;\n    }\n    uVar14 = *arg1;\n    uVar9 = 0x7ff;\n    if ((uVar14 >> 0x34 & 0x7ff) == 0x7ff) {\n        uVar4 = fcn.140025dd8(arg1, arg2, arg3, arg4);\n        if (uVar4 != 0) {\n            *arg2 = 0;\n            return uVar4;\n        }\n        pcVar5 = fcn.14002dd74(arg2, 0x65);\n        if (pcVar5 == NULL) {\n            return 0;\n        }\n        *pcVar5 = (in_stack_00000038 ^ 1) * ' ' + 'P';\n        pcVar5[3] = '\\0';\n        return 0;\n    }\n    if (uVar14 < 0) {\n        *arg2 = 0x2d;\n        arg2 = arg2 + 1;\n        uVar14 = *arg1;\n    }\n    puVar1 = arg2 + 1;\n    uVar15 = 0x3ff;\n    iVar11 = (in_stack_00000038 ^ 1) * 0x20 + 7;\n    if ((uVar14 & 0x7ff0000000000000) == 0) {\n        *arg2 = 0x30;\n        uVar15 = -((*arg1 & 0xfffffffffffff) != 0) & 0x3fe;\n    }\n    else {\n        *arg2 = 0x31;\n    }\n    arg1_00 = arg2 + 2;\n    if (uVar12 == 0) {\n        uVar10 = 0;\n    }\n    else {\n        if (*(in_stack_00000050 + 0x28) == '\\0') {\n            fcn.140017aa0(in_stack_00000050);\n        }\n        uVar10 = ***(*(in_stack_00000050 + 0x18) + 0xf8);\n    }\n    *puVar1 = uVar10;\n    if ((*arg1 & 0xfffffffffffff) != 0) {\n        uVar9 = 0x30;\n        uVar14 = 0xf000000000000;\n        do {\n            if (uVar12 < 1) {\n                cVar2 = fcn.14002643c(arg1, uVar14, uVar9, in_stack_00000048);\n                uVar9 = uVar14;\n                puVar13 = arg1_00;\n                if (cVar2 != '\\0') {\n                    while( true ) {\n                        puVar6 = puVar13 + -1;\n                        uVar10 = *puVar6;\n                        uVar14 = uVar14 & 0xffffffffffffff00 | uVar10;\n                        if ((uVar14 - 0x46U & 0xdf) != 0) break;\n                        *puVar6 = 0x30;\n                        puVar13 = puVar6;\n                    }\n                    uVar9 = uVar14;\n                    if (puVar6 == puVar1) {\n                        puVar13[-2] = puVar13[-2] + 1;\n                    }\n                    else {\n                        if (uVar10 == 0x39) {\n                            uVar10 = iVar11 + 0x3a;\n                        }\n                        else {\n                            uVar10 = uVar10 + 1;\n                        }\n                        *puVar6 = uVar10;\n                    }\n                }\n                break;\n            }\n            uVar3 = ((*arg1 & uVar14) >> (uVar9 & 0x3f)) + 0x30;\n            if (0x39 < uVar3) {\n                uVar3 = uVar3 + iVar11;\n            }\n            *arg1_00 = uVar3;\n            uVar12 = uVar12 - 1;\n            arg1_00 = arg1_00 + 1;\n            uVar14 = uVar14 >> 4;\n            uVar3 = uVar9 - 4;\n            uVar9 = uVar3;\n        } while (-1 < uVar3);\n    }\n    if (0 < uVar12) {\n        fcn.14001a0c0(arg1_00, uVar9 & 0xffffffffffffff00 | 0x30, uVar12);\n        arg1_00 = arg1_00 + uVar12;\n    }\n    if (*puVar1 == 0) {\n        arg1_00 = puVar1;\n    }\n    *arg1_00 = (in_stack_00000038 ^ 1) * ' ' + 0x50;\n    puVar1 = arg1_00 + 2;\n    uVar12 = *arg1 >> 0x34 & 0x7ff;\n    iVar7 = uVar12 - uVar15;\n    iVar8 = iVar7;\n    if (iVar7 < 0) {\n        iVar8 = uVar15 - uVar12;\n    }\n    uVar10 = 0x2b;\n    if (iVar7 < 0) {\n        uVar10 = 0x2d;\n    }\n    arg1_00[1] = uVar10;\n    *puVar1 = 0x30;\n    puVar13 = puVar1;\n    if (iVar8 < 1000) {\ncode_r0x000140025d44:\n        if (99 < iVar8) goto code_r0x000140025d4a;\ncode_r0x000140025d7d:\n        if (iVar8 < 10) goto code_r0x000140025dae;\n    }\n    else {\n        puVar13 = arg1_00 + 3;\n        *puVar1 = iVar8 / 1000 + 0x30;\n        iVar8 = iVar8 % 1000;\n        if (puVar13 == puVar1) goto code_r0x000140025d44;\ncode_r0x000140025d4a:\n        iVar7 = SUB168(SEXT816(-0x5c28f5c28f5c28f5) * SEXT816(iVar8) >> 0x40, 0) + iVar8;\n        iVar7 = (iVar7 >> 6) - (iVar7 >> 0x3f);\n        *puVar13 = iVar7 + 0x30;\n        puVar13 = puVar13 + 1;\n        iVar8 = iVar8 + iVar7 * -100;\n        if (puVar13 == puVar1) goto code_r0x000140025d7d;\n    }\n    *puVar13 = iVar8 / 10 + 0x30;\n    puVar13 = puVar13 + 1;\n    iVar8 = iVar8 % 10;\ncode_r0x000140025dae:\n    *puVar13 = iVar8 + 0x30;\n    puVar13[1] = 0;\n    return 0;\n}\n",
        "token_count": 1851
    },
    "14001a0c": {
        "rules": [
            "decompress data using aPLib/db7317f0dd944ab688d24dced6f5a7c2"
        ],
        "decompiled_code": "\nuchar (*) [16] fcn.14001a0c0(uchar (*arg1) [16], ulong noname_1, uint64_t arg3)\n\n{\n    uchar (*pauVar1) [16];\n    uchar (*pauVar2) [16];\n    uint16_t uVar3;\n    uint64_t uVar5;\n    uchar auVar6 [12];\n    uint32_t uVar4;\n    uchar auVar7 [13];\n    uchar auVar8 [16];\n    uchar uVar9;\n    \n    uVar5 = noname_1 * 0x101010101010101;\n    uVar3 = uVar5;\n    uVar4 = uVar5;\n    if (arg3 < 0x11) {\n        uVar9 = uVar5;\n    // switch table (17 cases) at 0x14003cb00\n        switch(*(arg3 * 4 + 0x14003cb00) + 0x140000000) {\n        case 0x14001a1f0:\n            *(arg1[-1] + arg3 + 1) = uVar5;\n        case 0x14001a1f4:\n            *(arg1[-1] + arg3 + 9) = uVar4;\n        case 0x14001a1f7:\n            *(arg1[-1] + arg3 + 0xd) = uVar3;\n        case 0x14001a1fb:\n            arg1[-1][arg3 + 0xf] = uVar9;\n            return arg1;\n        case 0x14001a1fe:\n            return arg1;\n        case 0x14001a200:\n            *(arg1[-1] + arg3 + 4) = uVar5;\n        case 0x14001a204:\n            *(arg1[-1] + arg3 + 0xc) = uVar4;\n            return arg1;\n        case 0x14001a208:\n            *(arg1[-1] + arg3 + 7) = uVar5;\n            arg1[-1][arg3 + 0xf] = uVar9;\n            return arg1;\n        case 0x14001a210:\n            *(arg1[-1] + arg3 + 3) = uVar5;\n        case 0x14001a214:\n            *(arg1[-1] + arg3 + 0xb) = uVar4;\n            arg1[-1][arg3 + 0xf] = uVar9;\n            return arg1;\n        case 0x14001a220:\n            *(arg1[-1] + arg3 + 2) = uVar5;\n        case 0x14001a224:\n            *(arg1[-1] + arg3 + 10) = uVar4;\n        case 0x14001a227:\n            *(arg1[-1] + arg3 + 0xe) = uVar3;\n            return arg1;\n        case 0x14001a22c:\n            **arg1 = uVar5;\n            return arg1;\n        case 0x14001a230:\n            **arg1 = uVar5;\n            *(*arg1 + 8) = uVar3;\n            (*arg1)[10] = uVar9;\n            return arg1;\n        case 0x14001a240:\n            **arg1 = uVar5;\n            *(*arg1 + 8) = uVar3;\n            return arg1;\n        case 0x14001a248:\n            **arg1 = uVar5;\n            *(*arg1 + 8) = uVar5;\n            return arg1;\n        }\n    }\n    uVar9 = SUB141(ZEXT814(uVar5) >> 0x30, 0);\n    auVar7 = ZEXT813(uVar5);\n    auVar6 = ZEXT812(uVar5);\n    auVar8 = CONCAT142(SUB1614(CONCAT133(SUB1613(CONCAT124(SUB1612(CONCAT115(SUB1611(CONCAT106(SUB1610(CONCAT97(SUB169(\n                                                            CONCAT88(SUB168(CONCAT79(SUB167(CONCAT610(SUB166(CONCAT511(\n                                                            SUB165(CONCAT412(SUB164(CONCAT313(SUB163(CONCAT214(SUB162(\n                                                            CONCAT115(SUB161(ZEXT816(uVar5) >> 0x38, 0), \n                                                                      CONCAT114(SUB151(ZEXT815(uVar5) >> 0x38, 0), \n                                                                                ZEXT814(uVar5))) >> 0x70, 0), \n                                                            CONCAT113(uVar9, auVar7)) >> 0x68, 0), \n                                                            CONCAT112(uVar9, auVar6)) >> 0x60, 0), \n                                                            CONCAT111(SUB131(auVar7 >> 0x28, 0), ZEXT811(uVar5))) >>\n                                                            0x58, 0), CONCAT110(SUB121(auVar6 >> 0x28, 0), uVar5)) >>\n                                                            0x50, 0), CONCAT19(SUB131(auVar7 >> 0x20, 0), uVar5)) >>\n                                                            0x48, 0), CONCAT18(SUB121(auVar6 >> 0x20, 0), uVar5)) >>\n                                                            0x40, 0), (uVar5 >> 0x18) << 0x38) >> 0x38, 0), \n                                                            (uVar5 >> 0x18) << 0x30) >> 0x30, 0), \n                                                            (uVar5 >> 0x10) << 0x28) >> 0x28, 0), \n                                                            (uVar5 >> 0x10) << 0x20) >> 0x20, 0), (uVar4 >> 8) << 0x18)\n                                                 >> 0x18, 0), (uVar5 >> 8) << 0x10) >> 0x10, 0), \n                       uVar3 & 0xff | uVar3 << 8);\n    pauVar1 = arg1;\n    if (0x80 < arg3) {\n        if ((*0x14003f6e4 & 2) != 0) {\n            for (; arg3 != 0; arg3 = arg3 - 1) {\n                (*pauVar1)[0] = noname_1;\n                pauVar1 = *pauVar1 + 1;\n            }\n            return arg1;\n        }\n        *arg1 = auVar8;\n        pauVar1 = arg1[1] & 0xfffffffffffffff0;\n        arg3 = arg1 + (arg3 - pauVar1);\n        uVar5 = arg3 >> 7;\n        if (uVar5 != 0) {\n            if (*0x14003ef30 < uVar5) {\n                do {\n                    *pauVar1 = auVar8;\n                    pauVar1[1] = auVar8;\n                    pauVar2 = pauVar1[8];\n                    pauVar1[2] = auVar8;\n                    pauVar1[3] = auVar8;\n                    uVar5 = uVar5 - 1;\n                    pauVar1[4] = auVar8;\n                    pauVar1[5] = auVar8;\n                    pauVar1[6] = auVar8;\n                    pauVar1[7] = auVar8;\n                    pauVar1 = pauVar2;\n                } while (uVar5 != 0);\n                arg3 = arg3 & 0x7f;\n            }\n            else {\n                do {\n                    *pauVar1 = auVar8;\n                    pauVar1[1] = auVar8;\n                    pauVar2 = pauVar1[8];\n                    pauVar1[2] = auVar8;\n                    pauVar1[3] = auVar8;\n                    uVar5 = uVar5 - 1;\n                    pauVar1[4] = auVar8;\n                    pauVar1[5] = auVar8;\n                    pauVar1[6] = auVar8;\n                    pauVar1[7] = auVar8;\n                    pauVar1 = pauVar2;\n                } while (uVar5 != 0);\n                arg3 = arg3 & 0x7f;\n            }\n        }\n    }\n    for (uVar5 = arg3 >> 4; uVar5 != 0; uVar5 = uVar5 - 1) {\n        *pauVar1 = auVar8;\n        pauVar1 = pauVar1[1];\n    }\n    if ((arg3 & 0xf) != 0) {\n        *(pauVar1[-1] + (arg3 & 0xf)) = auVar8;\n    }\n    return arg1;\n}\n",
        "token_count": 1946
    },
    "14001a74": {
        "rules": [
            "decompress data using aPLib/db7317f0dd944ab688d24dced6f5a7c2"
        ],
        "decompiled_code": "\nulong * fcn.14001a740(ulong *arg1, ulong *arg2, uint64_t arg3)\n\n{\n    uint *puVar1;\n    uchar uVar2;\n    ushort uVar3;\n    ulong *puVar4;\n    ulong *puVar5;\n    uint *puVar6;\n    uint *puVar7;\n    uint *puVar8;\n    int64_t iVar9;\n    uchar *puVar10;\n    uint64_t uVar11;\n    uint64_t uVar12;\n    uint uVar13;\n    uint uVar14;\n    uint uVar15;\n    uint uVar16;\n    uint uVar17;\n    uint uVar18;\n    uint uVar19;\n    uint uVar20;\n    \n    if (arg3 < 0x11) {\n    // switch table (17 cases) at 0x14003cb50\n        switch(*(arg3 * 4 + 0x14003cb50) + 0x140000000) {\n        case 0x14001a7c0:\n            return arg1;\n        case 0x14001a7c1:\n            *arg1 = *arg2;\n            return arg1;\n        case 0x14001a7c8:\n            *arg1 = *arg2;\n            return arg1;\n        case 0x14001a7cf:\n            uVar2 = *(arg2 + 2);\n            *arg1 = *arg2;\n            *(arg1 + 2) = uVar2;\n            return arg1;\n        case 0x14001a7df:\n            *arg1 = *arg2;\n            return arg1;\n        case 0x14001a7e5:\n            uVar17 = *(arg2 + 4);\n            uVar18 = *(arg2 + 1);\n            uVar19 = *(arg2 + 0xc);\n            *arg1 = *arg2;\n            *(arg1 + 4) = uVar17;\n            *(arg1 + 1) = uVar18;\n            *(arg1 + 0xc) = uVar19;\n            return arg1;\n        case 0x14001a7f0:\n            uVar3 = *(arg2 + 1);\n            uVar2 = *(arg2 + 10);\n            *arg1 = *arg2;\n            *(arg1 + 1) = uVar3;\n            *(arg1 + 10) = uVar2;\n            return arg1;\n        case 0x14001a808:\n            *arg1 = *arg2;\n            return arg1;\n        case 0x14001a810:\n            uVar2 = *(arg2 + 4);\n            *arg1 = *arg2;\n            *(arg1 + 4) = uVar2;\n            return arg1;\n        case 0x14001a820:\n            uVar3 = *(arg2 + 4);\n            *arg1 = *arg2;\n            *(arg1 + 4) = uVar3;\n            return arg1;\n        case 0x14001a830:\n            uVar3 = *(arg2 + 4);\n            uVar2 = *(arg2 + 6);\n            *arg1 = *arg2;\n            *(arg1 + 4) = uVar3;\n            *(arg1 + 6) = uVar2;\n            return arg1;\n        case 0x14001a848:\n            uVar17 = *(arg2 + 1);\n            uVar2 = *(arg2 + 0xc);\n            *arg1 = *arg2;\n            *(arg1 + 1) = uVar17;\n            *(arg1 + 0xc) = uVar2;\n            return arg1;\n        case 0x14001a860:\n            uVar2 = *(arg2 + 1);\n            *arg1 = *arg2;\n            *(arg1 + 1) = uVar2;\n            return arg1;\n        case 0x14001a870:\n            uVar3 = *(arg2 + 1);\n            *arg1 = *arg2;\n            *(arg1 + 1) = uVar3;\n            return arg1;\n        case 0x14001a880:\n            uVar17 = *(arg2 + 1);\n            *arg1 = *arg2;\n            *(arg1 + 1) = uVar17;\n            return arg1;\n        case 0x14001a890:\n            uVar17 = *(arg2 + 1);\n            uVar3 = *(arg2 + 0xc);\n            *arg1 = *arg2;\n            *(arg1 + 1) = uVar17;\n            *(arg1 + 0xc) = uVar3;\n            return arg1;\n        case 0x14001a8b0:\n            uVar17 = *(arg2 + 1);\n            uVar3 = *(arg2 + 0xc);\n            uVar2 = *(arg2 + 0xe);\n            *arg1 = *arg2;\n            *(arg1 + 1) = uVar17;\n            *(arg1 + 0xc) = uVar3;\n            *(arg1 + 0xe) = uVar2;\n            return arg1;\n        }\n    }\n    if (0x20 < arg3) {\n        iVar9 = arg2 - arg1;\n        if ((arg2 < arg1) && (arg1 < arg3 + arg2)) {\n            puVar8 = arg1 + iVar9 + (arg3 - 0x10);\n            uVar17 = puVar8[1];\n            uVar18 = puVar8[2];\n            uVar19 = puVar8[3];\n            puVar6 = arg1 + (arg3 - 0x10);\n            uVar11 = arg3 - 0x10;\n            puVar7 = puVar6;\n            uVar20 = *puVar8;\n            uVar13 = uVar17;\n            uVar14 = uVar18;\n            uVar15 = uVar19;\n            if ((puVar6 & 0xf) != 0) {\n                puVar7 = puVar6 & 0xfffffffffffffff0;\n                puVar1 = puVar7 + iVar9;\n                uVar20 = *puVar1;\n                uVar13 = puVar1[1];\n                uVar14 = puVar1[2];\n                uVar15 = puVar1[3];\n                *puVar6 = *puVar8;\n                *(arg1 + (arg3 - 0xc)) = uVar17;\n                *(arg1 + (arg3 - 8)) = uVar18;\n                *(arg1 + (arg3 - 4)) = uVar19;\n                uVar11 = puVar7 - arg1;\n            }\n            uVar12 = uVar11 >> 7;\n            if (uVar12 != 0) {\n                *puVar7 = uVar20;\n                puVar7[1] = uVar13;\n                puVar7[2] = uVar14;\n                puVar7[3] = uVar15;\n                puVar8 = puVar7;\n                while( true ) {\n                    puVar6 = puVar8 + iVar9 + -0x10;\n                    uVar17 = puVar6[1];\n                    uVar18 = puVar6[2];\n                    uVar19 = puVar6[3];\n                    puVar7 = puVar8 + iVar9 + -0x20;\n                    uVar20 = *puVar7;\n                    uVar13 = puVar7[1];\n                    uVar14 = puVar7[2];\n                    uVar15 = puVar7[3];\n                    puVar7 = puVar8 + -0x20;\n                    puVar8[-4] = *puVar6;\n                    puVar8[-3] = uVar17;\n                    puVar8[-2] = uVar18;\n                    puVar8[-1] = uVar19;\n                    puVar8[-8] = uVar20;\n                    puVar8[-7] = uVar13;\n                    puVar8[-6] = uVar14;\n                    puVar8[-5] = uVar15;\n                    puVar6 = puVar8 + iVar9 + -0x30;\n                    uVar17 = puVar6[1];\n                    uVar18 = puVar6[2];\n                    uVar19 = puVar6[3];\n                    puVar1 = puVar8 + iVar9 + -0x40;\n                    uVar20 = *puVar1;\n                    uVar13 = puVar1[1];\n                    uVar14 = puVar1[2];\n                    uVar15 = puVar1[3];\n                    uVar12 = uVar12 - 1;\n                    puVar8[-0xc] = *puVar6;\n                    puVar8[-0xb] = uVar17;\n                    puVar8[-10] = uVar18;\n                    puVar8[-9] = uVar19;\n                    puVar8[-0x10] = uVar20;\n                    puVar8[-0xf] = uVar13;\n                    puVar8[-0xe] = uVar14;\n                    puVar8[-0xd] = uVar15;\n                    puVar6 = puVar8 + iVar9 + -0x50;\n                    uVar17 = puVar6[1];\n                    uVar18 = puVar6[2];\n                    uVar19 = puVar6[3];\n                    puVar1 = puVar8 + iVar9 + -0x60;\n                    uVar20 = *puVar1;\n                    uVar13 = puVar1[1];\n                    uVar14 = puVar1[2];\n                    uVar15 = puVar1[3];\n                    puVar8[-0x14] = *puVar6;\n                    puVar8[-0x13] = uVar17;\n                    puVar8[-0x12] = uVar18;\n                    puVar8[-0x11] = uVar19;\n                    puVar8[-0x18] = uVar20;\n                    puVar8[-0x17] = uVar13;\n                    puVar8[-0x16] = uVar14;\n                    puVar8[-0x15] = uVar15;\n                    puVar1 = puVar8 + iVar9 + -0x70;\n                    uVar17 = puVar1[1];\n                    uVar18 = puVar1[2];\n                    uVar19 = puVar1[3];\n                    puVar6 = puVar7 + iVar9;\n                    uVar20 = *puVar6;\n                    uVar13 = puVar6[1];\n                    uVar14 = puVar6[2];\n                    uVar15 = puVar6[3];\n                    if (uVar12 == 0) break;\n                    puVar8[-0x1c] = *puVar1;\n                    puVar8[-0x1b] = uVar17;\n                    puVar8[-0x1a] = uVar18;\n                    puVar8[-0x19] = uVar19;\n                    *puVar7 = uVar20;\n                    puVar8[-0x1f] = uVar13;\n                    puVar8[-0x1e] = uVar14;\n                    puVar8[-0x1d] = uVar15;\n                    puVar8 = puVar7;\n                }\n                puVar8[-0x1c] = *puVar1;\n                puVar8[-0x1b] = uVar17;\n                puVar8[-0x1a] = uVar18;\n                puVar8[-0x19] = uVar19;\n                uVar11 = uVar11 & 0x7f;\n            }\n            for (uVar12 = uVar11 >> 4; uVar12 != 0; uVar12 = uVar12 - 1) {\n                *puVar7 = uVar20;\n                puVar7[1] = uVar13;\n                puVar7[2] = uVar14;\n                puVar7[3] = uVar15;\n                puVar7 = puVar7 + -4;\n                puVar8 = puVar7 + iVar9;\n                uVar20 = *puVar8;\n                uVar13 = puVar8[1];\n                uVar14 = puVar8[2];\n                uVar15 = puVar8[3];\n            }\n            if ((uVar11 & 0xf) != 0) {\n                uVar17 = *(arg2 + 4);\n                uVar18 = *(arg2 + 1);\n                uVar19 = *(arg2 + 0xc);\n                *arg1 = *arg2;\n                *(arg1 + 4) = uVar17;\n                *(arg1 + 1) = uVar18;\n                *(arg1 + 0xc) = uVar19;\n            }\n            *puVar7 = uVar20;\n            puVar7[1] = uVar13;\n            puVar7[2] = uVar14;\n            puVar7[3] = uVar15;\n            return arg1;\n        }\n        if (arg3 < 0x81) {\n            puVar8 = arg1 + iVar9;\n            uVar17 = *puVar8;\n            uVar18 = puVar8[1];\n            uVar19 = puVar8[2];\n            uVar20 = puVar8[3];\n            puVar5 = arg1 + 2;\n            puVar10 = arg3 - 0x10;\n        }\n        else {\n            if ((*0x14003f6e4 & 2) != 0) {\n                puVar5 = arg1;\n                for (; arg3 != 0; arg3 = arg3 - 1) {\n                    *puVar5 = *arg2;\n                    arg2 = arg2 + 1;\n                    puVar5 = puVar5 + 1;\n                }\n                return arg1;\n            }\n            puVar8 = arg1 + iVar9;\n            uVar13 = puVar8[1];\n            uVar14 = puVar8[2];\n            uVar15 = puVar8[3];\n            puVar4 = arg1 + 2;\n            uVar17 = *puVar8;\n            uVar18 = uVar13;\n            uVar19 = uVar14;\n            uVar20 = uVar15;\n            if ((arg1 & 0xf) != 0) {\n                puVar7 = (puVar4 & 0xfffffffffffffff0) + iVar9;\n                uVar17 = *puVar7;\n                uVar18 = puVar7[1];\n                uVar19 = puVar7[2];\n                uVar20 = puVar7[3];\n                puVar4 = (puVar4 & 0xfffffffffffffff0) + 0x10;\n                *arg1 = *puVar8;\n                *(arg1 + 4) = uVar13;\n                *(arg1 + 1) = uVar14;\n                *(arg1 + 0xc) = uVar15;\n            }\n            puVar10 = arg1 + (arg3 - puVar4);\n            uVar11 = puVar10 >> 7;\n            puVar5 = puVar4;\n            if (uVar11 != 0) {\n                *(puVar4 + -2) = uVar17;\n                *(puVar4 + -0xc) = uVar18;\n                *(puVar4 + -1) = uVar19;\n                *(puVar4 + -4) = uVar20;\n                if (*0x14003ef28 < uVar11) {\n                    while( true ) {\n                        puVar8 = puVar4 + iVar9;\n                        uVar17 = puVar8[1];\n                        uVar18 = puVar8[2];\n                        uVar19 = puVar8[3];\n                        puVar7 = puVar4 + iVar9 + 0x10;\n                        uVar20 = *puVar7;\n                        uVar13 = puVar7[1];\n                        uVar14 = puVar7[2];\n                        uVar15 = puVar7[3];\n                        puVar5 = puVar4 + 0x10;\n                        *puVar4 = *puVar8;\n                        *(puVar4 + 4) = uVar17;\n                        *(puVar4 + 1) = uVar18;\n                        *(puVar4 + 0xc) = uVar19;\n                        *(puVar4 + 2) = uVar20;\n                        *(puVar4 + 0x14) = uVar13;\n                        *(puVar4 + 3) = uVar14;\n                        *(puVar4 + 0x1c) = uVar15;\n                        puVar8 = puVar4 + iVar9 + 0x20;\n                        uVar17 = puVar8[1];\n                        uVar18 = puVar8[2];\n                        uVar19 = puVar8[3];\n                        puVar7 = puVar4 + iVar9 + 0x30;\n                        uVar20 = *puVar7;\n                        uVar13 = puVar7[1];\n                        uVar14 = puVar7[2];\n                        uVar15 = puVar7[3];\n                        uVar11 = uVar11 - 1;\n                        *(puVar4 + 4) = *puVar8;\n                        *(puVar4 + 0x24) = uVar17;\n                        *(puVar4 + 5) = uVar18;\n                        *(puVar4 + 0x2c) = uVar19;\n                        *(puVar4 + 6) = uVar20;\n                        *(puVar4 + 0x34) = uVar13;\n                        *(puVar4 + 7) = uVar14;\n                        *(puVar4 + 0x3c) = uVar15;\n                        puVar8 = puVar4 + iVar9 + 0x40;\n                        uVar17 = puVar8[1];\n                        uVar18 = puVar8[2];\n                        uVar19 = puVar8[3];\n                        puVar7 = puVar4 + iVar9 + 0x50;\n                        uVar20 = *puVar7;\n                        uVar13 = puVar7[1];\n                        uVar14 = puVar7[2];\n                        uVar15 = puVar7[3];\n                        *(puVar4 + 8) = *puVar8;\n                        *(puVar4 + 0x44) = uVar17;\n                        *(puVar4 + 9) = uVar18;\n                        *(puVar4 + 0x4c) = uVar19;\n                        *(puVar4 + 10) = uVar20;\n                        *(puVar4 + 0x54) = uVar13;\n                        *(puVar4 + 0xb) = uVar14;\n                        *(puVar4 + 0x5c) = uVar15;\n                        puVar8 = puVar4 + iVar9 + 0x60;\n                        uVar13 = *puVar8;\n                        uVar14 = puVar8[1];\n                        uVar15 = puVar8[2];\n                        uVar16 = puVar8[3];\n                        puVar8 = puVar4 + iVar9 + 0x70;\n                        uVar17 = *puVar8;\n                        uVar18 = puVar8[1];\n                        uVar19 = puVar8[2];\n                        uVar20 = puVar8[3];\n                        if (uVar11 == 0) break;\n                        *(puVar4 + 0xc) = uVar13;\n                        *(puVar4 + 100) = uVar14;\n                        *(puVar4 + 0xd) = uVar15;\n                        *(puVar4 + 0x6c) = uVar16;\n                        *(puVar4 + 0xe) = uVar17;\n                        *(puVar4 + 0x74) = uVar18;\n                        *(puVar4 + 0xf) = uVar19;\n                        *(puVar4 + 0x7c) = uVar20;\n                        puVar4 = puVar5;\n                    }\n                }\n                else {\n                    while( true ) {\n                        puVar8 = puVar4 + iVar9;\n                        uVar17 = puVar8[1];\n                        uVar18 = puVar8[2];\n                        uVar19 = puVar8[3];\n                        puVar7 = puVar4 + iVar9 + 0x10;\n                        uVar20 = *puVar7;\n                        uVar13 = puVar7[1];\n                        uVar14 = puVar7[2];\n                        uVar15 = puVar7[3];\n                        puVar5 = puVar4 + 0x10;\n                        *puVar4 = *puVar8;\n                        *(puVar4 + 4) = uVar17;\n                        *(puVar4 + 1) = uVar18;\n                        *(puVar4 + 0xc) = uVar19;\n                        *(puVar4 + 2) = uVar20;\n                        *(puVar4 + 0x14) = uVar13;\n                        *(puVar4 + 3) = uVar14;\n                        *(puVar4 + 0x1c) = uVar15;\n                        puVar8 = puVar4 + iVar9 + 0x20;\n                        uVar17 = puVar8[1];\n                        uVar18 = puVar8[2];\n                        uVar19 = puVar8[3];\n                        puVar7 = puVar4 + iVar9 + 0x30;\n                        uVar20 = *puVar7;\n                        uVar13 = puVar7[1];\n                        uVar14 = puVar7[2];\n                        uVar15 = puVar7[3];\n                        uVar11 = uVar11 - 1;\n                        *(puVar4 + 4) = *puVar8;\n                        *(puVar4 + 0x24) = uVar17;\n                        *(puVar4 + 5) = uVar18;\n                        *(puVar4 + 0x2c) = uVar19;\n                        *(puVar4 + 6) = uVar20;\n                        *(puVar4 + 0x34) = uVar13;\n                        *(puVar4 + 7) = uVar14;\n                        *(puVar4 + 0x3c) = uVar15;\n                        puVar8 = puVar4 + iVar9 + 0x40;\n                        uVar17 = puVar8[1];\n                        uVar18 = puVar8[2];\n                        uVar19 = puVar8[3];\n                        puVar7 = puVar4 + iVar9 + 0x50;\n                        uVar20 = *puVar7;\n                        uVar13 = puVar7[1];\n                        uVar14 = puVar7[2];\n                        uVar15 = puVar7[3];\n                        *(puVar4 + 8) = *puVar8;\n                        *(puVar4 + 0x44) = uVar17;\n                        *(puVar4 + 9) = uVar18;\n                        *(puVar4 + 0x4c) = uVar19;\n                        *(puVar4 + 10) = uVar20;\n                        *(puVar4 + 0x54) = uVar13;\n                        *(puVar4 + 0xb) = uVar14;\n                        *(puVar4 + 0x5c) = uVar15;\n                        puVar8 = puVar4 + iVar9 + 0x60;\n                        uVar13 = *puVar8;\n                        uVar14 = puVar8[1];\n                        uVar15 = puVar8[2];\n                        uVar16 = puVar8[3];\n                        puVar8 = puVar4 + iVar9 + 0x70;\n                        uVar17 = *puVar8;\n                        uVar18 = puVar8[1];\n                        uVar19 = puVar8[2];\n                        uVar20 = puVar8[3];\n                        if (uVar11 == 0) break;\n                        *(puVar4 + 0xc) = uVar13;\n                        *(puVar4 + 100) = uVar14;\n                        *(puVar4 + 0xd) = uVar15;\n                        *(puVar4 + 0x6c) = uVar16;\n                        *(puVar4 + 0xe) = uVar17;\n                        *(puVar4 + 0x74) = uVar18;\n                        *(puVar4 + 0xf) = uVar19;\n                        *(puVar4 + 0x7c) = uVar20;\n                        puVar4 = puVar5;\n                    }\n                }\n                *(puVar5 + -4) = uVar13;\n                *(puVar5 + -0x1c) = uVar14;\n                *(puVar5 + -3) = uVar15;\n                *(puVar5 + -0x14) = uVar16;\n                puVar10 = puVar10 & 0x7f;\n            }\n        }\n        for (uVar11 = puVar10 >> 4; uVar11 != 0; uVar11 = uVar11 - 1) {\n            *(puVar5 + -2) = uVar17;\n            *(puVar5 + -0xc) = uVar18;\n            *(puVar5 + -1) = uVar19;\n            *(puVar5 + -4) = uVar20;\n            puVar8 = puVar5 + iVar9;\n            uVar17 = *puVar8;\n            uVar18 = puVar8[1];\n            uVar19 = puVar8[2];\n            uVar20 = puVar8[3];\n            puVar5 = puVar5 + 2;\n        }\n        uVar11 = puVar10 & 0xf;\n        if (uVar11 != 0) {\n            puVar8 = puVar5 + iVar9 + (uVar11 - 0x10);\n            uVar13 = puVar8[1];\n            uVar14 = puVar8[2];\n            uVar15 = puVar8[3];\n            *(puVar5 + (uVar11 - 0x10)) = *puVar8;\n            *(puVar5 + (uVar11 - 0xc)) = uVar13;\n            *(puVar5 + (uVar11 - 8)) = uVar14;\n            *(puVar5 + (uVar11 - 4)) = uVar15;\n        }\n        *(puVar5 + -2) = uVar17;\n        *(puVar5 + -0xc) = uVar18;\n        *(puVar5 + -1) = uVar19;\n        *(puVar5 + -4) = uVar20;\n        return arg1;\n    }\n    uVar17 = *(arg2 + 4);\n    uVar18 = *(arg2 + 1);\n    uVar19 = *(arg2 + 0xc);\n    puVar8 = arg2 + (arg3 - 0x10);\n    uVar20 = *puVar8;\n    uVar13 = puVar8[1];\n    uVar14 = puVar8[2];\n    uVar15 = puVar8[3];\n    *arg1 = *arg2;\n    *(arg1 + 4) = uVar17;\n    *(arg1 + 1) = uVar18;\n    *(arg1 + 0xc) = uVar19;\n    puVar8 = arg1 + (arg3 - 0x10);\n    *puVar8 = uVar20;\n    puVar8[1] = uVar13;\n    puVar8[2] = uVar14;\n    puVar8[3] = uVar15;\n    return arg1;\n}\n",
        "token_count": 6061
    },
    "14002070": {
        "rules": [
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8",
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf"
        ],
        "decompiled_code": "\nvoid fcn.140020704(int64_t arg1, ulong arg2)\n\n{\n    uint64_t uVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    \n    iVar3 = *(arg1 + 0x458);\n    if (iVar3 == 0) {\n        uVar1 = 0x100;\n        iVar3 = arg1 + 0x50;\n    }\n    else {\n        uVar1 = *(arg1 + 0x450) >> 2;\n    }\n    iVar3 = iVar3 + (uVar1 - 1) * 2;\n    *(arg1 + 0x40) = iVar3;\n    iVar2 = iVar3;\n    while( true ) {\n        if ((*(arg1 + 0x30) < 1) && (arg2 == 0)) break;\n        *(arg1 + 0x30) = *(arg1 + 0x30) + -1;\n        **(arg1 + 0x40) = (arg2 & 7) + 0x30;\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -2;\n        iVar2 = *(arg1 + 0x40);\n        arg2._0_4_ = arg2 >> 3;\n    }\n    *(arg1 + 0x48) = iVar3 - iVar2 >> 1;\n    *(arg1 + 0x40) = iVar2 + 2;\n    return;\n}\n",
        "token_count": 328
    },
    "14002083": {
        "rules": [
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8",
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf"
        ],
        "decompiled_code": "\nvoid fcn.140020834(int64_t arg1, ulong arg2)\n\n{\n    uint64_t uVar1;\n    int64_t iVar2;\n    uint16_t uVar3;\n    int64_t iVar4;\n    uint8_t in_R8B;\n    \n    iVar4 = *(arg1 + 0x458);\n    if (iVar4 == 0) {\n        uVar1 = 0x100;\n        iVar4 = arg1 + 0x50;\n    }\n    else {\n        uVar1 = *(arg1 + 0x450) >> 2;\n    }\n    iVar4 = iVar4 + (uVar1 - 1) * 2;\n    *(arg1 + 0x40) = iVar4;\n    iVar2 = iVar4;\n    uVar1 = arg2;\n    while ((0 < *(arg1 + 0x30) || (uVar1 != 0))) {\n        *(arg1 + 0x30) = *(arg1 + 0x30) + -1;\n        uVar3 = uVar1 + (uVar1 / 10) * -10 + 0x30;\n        if (0x39 < uVar3) {\n            uVar3 = (in_R8B ^ 1) * ' ' + '\\a' + uVar3;\n        }\n        **(arg1 + 0x40) = uVar3;\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -2;\n        iVar2 = *(arg1 + 0x40);\n        uVar1 = uVar1 / 10;\n    }\n    *(arg1 + 0x48) = iVar4 - iVar2 >> 1;\n    *(arg1 + 0x40) = iVar2 + 2;\n    return;\n}\n",
        "token_count": 399
    },
    "14002097": {
        "rules": [
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8",
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf"
        ],
        "decompiled_code": "\nvoid fcn.140020978(int64_t arg1, ulong arg2)\n\n{\n    uint64_t uVar1;\n    int64_t iVar2;\n    uint8_t in_R8B;\n    uint16_t uVar3;\n    int64_t iVar4;\n    \n    iVar4 = *(arg1 + 0x458);\n    if (iVar4 == 0) {\n        uVar1 = 0x100;\n        iVar4 = arg1 + 0x50;\n    }\n    else {\n        uVar1 = *(arg1 + 0x450) >> 2;\n    }\n    iVar4 = iVar4 + (uVar1 - 1) * 2;\n    *(arg1 + 0x40) = iVar4;\n    iVar2 = iVar4;\n    while( true ) {\n        if ((*(arg1 + 0x30) < 1) && (arg2 == 0)) break;\n        uVar3 = arg2;\n        arg2._0_4_ = arg2 >> 4;\n        uVar3 = (uVar3 & 0xf) + 0x30;\n        *(arg1 + 0x30) = *(arg1 + 0x30) + -1;\n        if (0x39 < uVar3) {\n            uVar3 = (in_R8B ^ 1) * ' ' + '\\a' + uVar3;\n        }\n        **(arg1 + 0x40) = uVar3;\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -2;\n        iVar2 = *(arg1 + 0x40);\n    }\n    *(arg1 + 0x48) = iVar4 - iVar2 >> 1;\n    *(arg1 + 0x40) = iVar2 + 2;\n    return;\n}\n",
        "token_count": 404
    },
    "140020a9": {
        "rules": [
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8",
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf"
        ],
        "decompiled_code": "\nvoid fcn.140020a98(int64_t arg1, uint64_t arg2)\n\n{\n    uint64_t uVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    \n    iVar3 = *(arg1 + 0x458);\n    if (iVar3 == 0) {\n        uVar1 = 0x100;\n        iVar3 = arg1 + 0x50;\n    }\n    else {\n        uVar1 = *(arg1 + 0x450) >> 2;\n    }\n    iVar3 = iVar3 + (uVar1 - 1) * 2;\n    *(arg1 + 0x40) = iVar3;\n    iVar2 = iVar3;\n    for (; (0 < *(arg1 + 0x30) || (arg2 != 0)); arg2 = arg2 >> 3) {\n        *(arg1 + 0x30) = *(arg1 + 0x30) + -1;\n        **(arg1 + 0x40) = (arg2 & 7) + 0x30;\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -2;\n        iVar2 = *(arg1 + 0x40);\n    }\n    *(arg1 + 0x48) = iVar3 - iVar2 >> 1;\n    *(arg1 + 0x40) = iVar2 + 2;\n    return;\n}\n",
        "token_count": 317
    },
    "140020bc": {
        "rules": [
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8",
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf"
        ],
        "decompiled_code": "\nvoid fcn.140020bcc(int64_t arg1, uint64_t arg2)\n\n{\n    uint64_t uVar1;\n    int64_t iVar2;\n    uint16_t uVar3;\n    int64_t iVar4;\n    uint8_t in_R8B;\n    \n    iVar4 = *(arg1 + 0x458);\n    if (iVar4 == 0) {\n        uVar1 = 0x100;\n        iVar4 = arg1 + 0x50;\n    }\n    else {\n        uVar1 = *(arg1 + 0x450) >> 2;\n    }\n    iVar4 = iVar4 + (uVar1 - 1) * 2;\n    *(arg1 + 0x40) = iVar4;\n    iVar2 = iVar4;\n    while ((0 < *(arg1 + 0x30) || (arg2 != 0))) {\n        *(arg1 + 0x30) = *(arg1 + 0x30) + -1;\n        uVar3 = arg2 + (arg2 / 10) * -10 + 0x30;\n        if (0x39 < uVar3) {\n            uVar3 = (in_R8B ^ 1) * ' ' + '\\a' + uVar3;\n        }\n        **(arg1 + 0x40) = uVar3;\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -2;\n        iVar2 = *(arg1 + 0x40);\n        arg2 = arg2 / 10;\n    }\n    *(arg1 + 0x48) = iVar4 - iVar2 >> 1;\n    *(arg1 + 0x40) = iVar2 + 2;\n    return;\n}\n",
        "token_count": 388
    },
    "140020d1": {
        "rules": [
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8",
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf"
        ],
        "decompiled_code": "\nvoid fcn.140020d18(int64_t arg1, uint64_t arg2)\n\n{\n    uint64_t uVar1;\n    int64_t iVar2;\n    uint8_t in_R8B;\n    uint16_t uVar3;\n    int64_t iVar4;\n    \n    iVar4 = *(arg1 + 0x458);\n    if (iVar4 == 0) {\n        uVar1 = 0x100;\n        iVar4 = arg1 + 0x50;\n    }\n    else {\n        uVar1 = *(arg1 + 0x450) >> 2;\n    }\n    iVar4 = iVar4 + (uVar1 - 1) * 2;\n    *(arg1 + 0x40) = iVar4;\n    iVar2 = iVar4;\n    while ((0 < *(arg1 + 0x30) || (arg2 != 0))) {\n        uVar3 = arg2;\n        arg2 = arg2 >> 4;\n        uVar3 = (uVar3 & 0xf) + 0x30;\n        *(arg1 + 0x30) = *(arg1 + 0x30) + -1;\n        if (0x39 < uVar3) {\n            uVar3 = (in_R8B ^ 1) * ' ' + '\\a' + uVar3;\n        }\n        **(arg1 + 0x40) = uVar3;\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -2;\n        iVar2 = *(arg1 + 0x40);\n    }\n    *(arg1 + 0x48) = iVar4 - iVar2 >> 1;\n    *(arg1 + 0x40) = iVar2 + 2;\n    return;\n}\n",
        "token_count": 393
    },
    "14002b06": {
        "rules": [
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8",
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf"
        ],
        "decompiled_code": "\nuint32_t fcn.14002b06c(void)\n\n{\n    uint16_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint32_t in_MXCSR;\n    \n    uVar1 = in_MXCSR & 0x8040;\n    if (uVar1 == 0x8000) {\n        uVar4 = 0xc00;\n    }\n    else if (uVar1 == 0x40) {\n        uVar4 = 0x800;\n    }\n    else {\n        uVar4 = 0;\n        if (uVar1 == 0x8040) {\n            uVar4 = 0x400;\n        }\n    }\n    uVar2 = in_MXCSR & 0x6000;\n    if (uVar2 == 0) {\n        uVar3 = 0;\n    }\n    else if (uVar2 == 0x2000) {\n        uVar3 = 0x100;\n    }\n    else if (uVar2 == 0x4000) {\n        uVar3 = 0x200;\n    }\n    else {\n        uVar3 = 0x300;\n        if (uVar2 != 0x6000) {\n            uVar3 = 0;\n        }\n    }\n    uVar4 = ((((in_MXCSR >> 2 & 0x400 | in_MXCSR & 0x800) >> 2 | in_MXCSR & 0x400) >> 2 | in_MXCSR & 0x200) >> 3 |\n            in_MXCSR & 0x180) >> 3 | uVar4 | uVar3;\n    return (uVar3 | uVar4 * 4) << 0x16 | uVar4;\n}\n",
        "token_count": 403
    },
    "1400152d": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nuint64_t fcn.1400152d4(ulong arg1, ulong arg2, uint32_t *arg3, uint32_t *arg4)\n\n{\n    int64_t *piVar1;\n    ulong arg1_00;\n    int64_t iVar2;\n    uint8_t uVar3;\n    int32_t iVar4;\n    int64_t iVar5;\n    uint64_t uVar6;\n    uint64_t uVar7;\n    \n    uVar7 = arg1;\n    uVar6 = *0x14003ef38 ^ *(uVar7 * 8 + 0x14003f510);\n    uVar3 = *0x14003ef38 & 0x3f;\n    uVar6 = uVar6 >> uVar3 | uVar6 << 0x40 - uVar3;\n    if (uVar6 != 0xffffffffffffffff) {\n        if (uVar6 != 0) {\n            return uVar6;\n        }\n        if (arg3 != arg4) {\n            do {\n                uVar6 = *arg3;\n                iVar5 = *(uVar6 * 8 + 0x14003f470);\n                if (iVar5 == 0) {\n                    arg1_00 = *(uVar6 * 8 + 0x14002f2c0);\n                    iVar5 = (*_sym.imp.KERNEL32.dll_LoadLibraryExW)(arg1_00, 0);\n                    if ((iVar5 != 0) ||\n                       ((((iVar4 = (*_sym.imp.KERNEL32.dll_GetLastError)(),  iVar4 == 0x57 &&\n                          (iVar4 = fcn.140016978(arg1_00, L\"api-ms-\", 7),  iVar4 != 0)) &&\n                         (iVar4 = fcn.140016978(arg1_00, L\"ext-ms-\", 7),  iVar4 != 0)) &&\n                        (iVar5 = (*_sym.imp.KERNEL32.dll_LoadLibraryExW)(arg1_00, 0, 0),  iVar5 != 0)))) {\n                        piVar1 = uVar6 * 8 + 0x14003f470;\n                        iVar2 = *piVar1;\n                        *piVar1 = iVar5;\n                        if (iVar2 != 0) {\n                            (*_sym.imp.KERNEL32.dll_FreeLibrary)(iVar5);\n                        }\n                        goto code_r0x000140015459;\n                    }\n                    *(uVar6 * 8 + 0x14003f470) = 0xffffffffffffffff;\n                }\n                else if (iVar5 != -1) {\ncode_r0x000140015459:\n                    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar5, arg2);\n                    if (uVar6 != 0) {\n                        uVar3 = 0x40 - (*0x14003ef38 & 0x3f) & 0x3f;\n                        *(uVar7 * 8 + 0x14003f510) = (uVar6 >> uVar3 | uVar6 << 0x40 - uVar3) ^ *0x14003ef38;\n                        return uVar6;\n                    }\n                    break;\n                }\n                arg3 = arg3 + 1;\n            } while (arg3 != arg4);\n        }\n        uVar3 = 0x40 - (*0x14003ef38 & 0x3f) & 0x3f;\n        *(uVar7 * 8 + 0x14003f510) = (0xffffffffffffffffU >> uVar3 | -1 << 0x40 - uVar3) ^ *0x14003ef38;\n    }\n    return 0;\n}\n",
        "token_count": 809
    },
    "140016ea": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nvoid fcn.140016ea4(uint64_t arg1)\n\n{\n    code *pcVar1;\n    uint8_t uVar2;\n    \n    if (*0x14003f628 == *0x14003ef38) {\n        uVar2 = 0x40 - (*0x14003ef38 & 0x3f) & 0x3f;\n        *0x14003f628 = (arg1 >> uVar2 | arg1 << 0x40 - uVar2) ^ *0x14003ef38;\n        return;\n    }\n    fcn.140018028(arg1);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 155
    },
    "140016ef": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nuint64_t fcn.140016ef0(ulong noname_0, uint32_t *arg2, ulong noname_2, uint32_t *arg4)\n\n{\n    uint8_t uVar1;\n    uint64_t uVar2;\n    \n    fcn.140015258(*arg2);\n    uVar1 = *0x14003ef38 & 0x3f;\n    uVar2 = *0x14003ef38 ^ *0x14003f648;\n    fcn.1400152b8(*arg4);\n    return uVar2 >> uVar1 | uVar2 << 0x40 - uVar1;\n}\n",
        "token_count": 144
    },
    "140017e4": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nulong fcn.140017e44(int64_t **arg1)\n\n{\n    uint64_t uVar1;\n    ulong uVar2;\n    uint64_t uVar3;\n    uint64_t *puVar4;\n    uint8_t uVar5;\n    uint64_t *puVar6;\n    uint64_t *puVar7;\n    uint64_t *lpMem;\n    uint64_t uVar8;\n    uint64_t *puVar9;\n    uint64_t *puVar10;\n    \n    uVar1 = *0x14003ef38;\n    puVar6 = **arg1;\n    if (puVar6 == NULL) {\n        uVar2 = 0xffffffff;\n    }\n    else {\n        uVar5 = *0x14003ef38 & 0x3f;\n        lpMem = (*puVar6 ^ *0x14003ef38) >> uVar5 | (*puVar6 ^ *0x14003ef38) << 0x40 - uVar5;\n        puVar6 = (puVar6[1] ^ *0x14003ef38) >> uVar5 | (puVar6[1] ^ *0x14003ef38) << 0x40 - uVar5;\n        puVar7 = puVar6;\n        uVar3 = *0x14003ef38;\n        puVar10 = lpMem;\n        if (lpMem - 1U < 0xfffffffffffffffe) {\n            while (puVar6 = puVar6 + -1,  lpMem <= puVar6) {\n                if (*puVar6 != uVar1) {\n                    *puVar6 = uVar1;\n                    (**0x140031a58)();\n                    uVar5 = *0x14003ef38 & 0x3f;\n                    uVar8 = ***arg1 ^ *0x14003ef38;\n                    uVar3 = (**arg1)[1] ^ *0x14003ef38;\n                    puVar9 = uVar8 >> uVar5 | uVar8 << 0x40 - uVar5;\n                    puVar4 = uVar3 >> uVar5 | uVar3 << 0x40 - uVar5;\n                    uVar3 = *0x14003ef38;\n                    if ((puVar9 != puVar10) || (puVar4 != puVar7)) {\n                        puVar6 = puVar4;\n                        puVar7 = puVar4;\n                        lpMem = puVar9;\n                        puVar10 = puVar9;\n                    }\n                }\n            }\n            if (lpMem != 0xffffffffffffffff) {\n                fcn.140014db4(lpMem);\n                uVar3 = *0x14003ef38;\n            }\n            ***arg1 = uVar3;\n            *(**arg1 + 8) = uVar3;\n            *(**arg1 + 0x10) = uVar3;\n        }\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 652
    },
    "140024db": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nvoid fcn.140024db0(ulong arg1)\n\n{\n    // WARNING: Could not recover jumptable at 0x000140024dd0. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(*((arg1 >> 6) * 8 + 0x140040030) + (arg1 & 0x3f) * 0x48);\n    return;\n}\n",
        "token_count": 101
    },
    "140024e9": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nvoid fcn.140024e98(ulong arg1)\n\n{\n    // WARNING: Could not recover jumptable at 0x000140024eb8. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(*((arg1 >> 6) * 8 + 0x140040030) + (arg1 & 0x3f) * 0x48);\n    return;\n}\n",
        "token_count": 102
    },
    "1400254f": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nulong fcn.1400254f4(ulong arg1)\n\n{\n    ulong uVar1;\n    uint8_t uVar2;\n    \n    uVar2 = *0x14003ef38 & 0x3f;\n    if (((*0x14003ef38 ^ *0x140040438) >> uVar2 | (*0x14003ef38 ^ *0x140040438) << 0x40 - uVar2) == 0) {\n        return 0;\n    }\n    // WARNING: Could not recover jumptable at 0x000140025525. Too many branches\n    // WARNING: Treating indirect jump as call\n    uVar1 = (**0x140031a58)(arg1);\n    return uVar1;\n}\n",
        "token_count": 167
    },
    "14002a01": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nint64_t fcn.14002a01c(uint8_t *arg1, ulong arg2, ulong *arg3, int64_t arg4)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    uint8_t uVar3;\n    uint8_t uVar4;\n    \n    if (arg1 != NULL) {\n        if (arg2 != 0) {\n            if ((arg2 & 0xffffff80) == 0) {\n                *arg1 = arg2;\n                return 1;\n            }\n            if ((arg2 & 0xfffff800) == 0) {\n                iVar1 = 1;\n                uVar4 = 0xc0;\n                iVar2 = iVar1;\n            }\n            else if ((arg2 & 0xffff0000) == 0) {\n                if (arg2 - 0xd800 < 0x800) {\ncode_r0x00014002c754:\n                    *arg3 = 0;\n                    *(arg4 + 0x30) = 1;\n                    *(arg4 + 0x2c) = 0x2a;\n                    return -1;\n                }\n                iVar1 = 2;\n                uVar4 = 0xe0;\n                iVar2 = iVar1;\n            }\n            else {\n                if (((arg2 & 0xffe00000) != 0) || (0x10ffff < arg2)) goto code_r0x00014002c754;\n                iVar1 = 3;\n                uVar4 = 0xf0;\n                iVar2 = iVar1;\n            }\n            do {\n                uVar3 = arg2;\n                arg2._0_4_ = arg2 >> 6;\n                arg1[iVar1] = uVar3 & 0x3f | 0x80;\n                iVar1 = iVar1 + -1;\n            } while (iVar1 != 0);\n            *arg1 = arg2 | uVar4;\n            *arg3 = 0;\n            return iVar2 + 1;\n        }\n        *arg1 = 0;\n    }\n    *arg3 = 0;\n    return 1;\n}\n",
        "token_count": 466
    },
    "14001317": {
        "rules": [
            "check OS version/56128ea24265487c97cb4913628bf489"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00014001328e)\n// WARNING: Removing unreachable block (ram,0x000140013260)\n// WARNING: Removing unreachable block (ram,0x00014001323f)\n// WARNING: Removing unreachable block (ram,0x000140013212)\n// WARNING: Removing unreachable block (ram,0x0001400131b3)\n\nvoid fcn.140013178(ulong noname_0, ulong arg2)\n\n{\n    uint8_t uVar1;\n    int32_t *piVar2;\n    int32_t *piVar3;\n    int64_t iVar4;\n    uint *puVar5;\n    uint32_t uVar6;\n    uint8_t *puVar7;\n    uint32_t uVar8;\n    uint32_t uVar9;\n    uint8_t in_XCR0;\n    ulong var_20h;\n    int32_t var_bp_18h;\n    int32_t var_14h;\n    uint64_t var_bp_10h;\n    \n    var_bp_10h = *0x14003ef38 ^ &var_20h;\n    uVar6 = 0;\n    puVar7 = 0x140038242;\n    *0x14003f1e0 = 0xfffff020;\n    uVar9 = 0;\n    piVar2 = cpuid_basic_info(0);\n    var_20h._0_4_ = *piVar2;\n    var_20h._4_4_ = piVar2[1];\n    var_bp_18h = piVar2[3];\n    var_14h = piVar2[2];\n    do {\n        uVar1 = puVar7[-2];\n        uVar8 = uVar1;\n        if (uVar8 != uVar6) {\n            if (uVar8 == 0) {\n                piVar3 = cpuid_basic_info(0);\n            }\n            else if (uVar8 == 1) {\n                piVar3 = cpuid_Version_info(1);\n            }\n            else if (uVar8 == 2) {\n                piVar3 = cpuid_cache_tlb_info(2);\n            }\n            else if (uVar8 == 3) {\n                piVar3 = cpuid_serial_info(3);\n            }\n            else if (uVar8 == 4) {\n                piVar3 = cpuid_Deterministic_Cache_Parameters_info(4);\n            }\n            else if (uVar8 == 5) {\n                piVar3 = cpuid_MONITOR_MWAIT_Features_info(5);\n            }\n            else if (uVar8 == 6) {\n                piVar3 = cpuid_Thermal_Power_Management_info(6);\n            }\n            else if (uVar8 == 7) {\n                piVar3 = cpuid_Extended_Feature_Enumeration_info(7);\n            }\n            else if (uVar8 == 9) {\n                piVar3 = cpuid_Direct_Cache_Access_info(9);\n            }\n            else if (uVar8 == 10) {\n                piVar3 = cpuid_Architectural_Performance_Monitoring_info(10);\n            }\n            else if (uVar8 == 0xb) {\n                piVar3 = cpuid_Extended_Topology_info(0xb);\n            }\n            else if (uVar8 == 0xd) {\n                piVar3 = cpuid_Processor_Extended_States_info(0xd);\n            }\n            else if (uVar8 == 0xf) {\n                piVar3 = cpuid_Quality_of_Service_info(0xf);\n            }\n            else if (uVar8 == 0x80000002) {\n                piVar3 = cpuid_brand_part1_info(0x80000002);\n            }\n            else if (uVar8 == 0x80000003) {\n                piVar3 = cpuid_brand_part2_info(0x80000003);\n            }\n            else if (uVar8 == 0x80000004) {\n                piVar3 = cpuid_brand_part3_info(0x80000004);\n            }\n            else {\n                piVar3 = cpuid(uVar8);\n            }\n            var_20h._0_4_ = *piVar3;\n            var_20h._4_4_ = piVar3[1];\n            var_bp_18h = piVar3[3];\n            var_14h = piVar3[2];\n            uVar6 = uVar1;\n        }\n        if ((*piVar2 < uVar1) || ((*(&var_20h + puVar7[-1] * 4) >> (*puVar7 & 0x1f) & 1) == 0)) {\n            *0x14003f1e0 = *0x14003f1e0 | *(puVar7 + 2);\n        }\n        uVar9 = uVar9 + 1;\n        puVar7 = puVar7 + 8;\n    } while (uVar9 < 0x13);\n    iVar4 = cpuid_Version_info(1);\n    if (((*(iVar4 + 0xc) >> 0x1b & 1) == 0) || ((in_XCR0 & 6) != 6)) {\n        *0x14003f1e0 = *0x14003f1e0 | 0x1810;\n    }\n    if ((*0x14003f1e0 & 4) == 0) {\n        iVar4 = cpuid_basic_info(0);\n        if (((*(iVar4 + 4) == 0x68747541) && (*(iVar4 + 0xc) == 0x444d4163)) && (*(iVar4 + 8) == 0x69746e65)) {\n            piVar2 = cpuid_Version_info(1);\n            uVar6 = *piVar2 >> 8 & 0xf;\n            if ((uVar6 < 0xf) || ((*piVar2 >> 0x14 & 0xffU) + uVar6 < 0x15)) {\n                *0x14003f1e0 = *0x14003f1e0 | 4;\n            }\n        }\n    }\n    puVar5 = cpuid_Version_info(1);\n    *0x140040870 = *puVar5;\n    *0x140040874 = puVar5[1];\n    *0x14004087c = puVar5[2];\n    *0x140040878 = puVar5[3];\n    fcn.140018790(*0x14003ef38 ^ &var_20h ^ &var_20h);\n    return;\n}\n",
        "token_count": 1456
    },
    "14000cc7": {
        "rules": [
            "PEB access/cd8d96519f6244b6acf2796407e948b9",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14000cc70(int64_t arg1, ulong arg2, ulong arg3)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    ulong uVar3;\n    int64_t iVar4;\n    ulong *arg1_00;\n    ulong uStackX16;\n    uchar auStack40 [32];\n    \n    uStackX16 = arg2;\n    uVar3 = fcn.14000df7c(arg1, &uStackX16);\n    iVar4 = fcn.14000dff8(arg1 + 0x10, auStack40, &uStackX16, uVar3);\n    iVar4 = *(iVar4 + 8);\n    if (((iVar4 == 0) || (iVar4 == *(arg1 + 0x18))) || (iVar4 = *(iVar4 + 0x18),  iVar4 == 0)) {\n        uVar3 = fcn.1400187f8(0x50);\n        iVar4 = fcn.14000cd88(uVar3, arg2, arg3);\n        if (iVar4 != 0) {\n            LOCK();\n            *(iVar4 + 8) = *(iVar4 + 8) + 1;\n        }\n        fcn.14000d788(arg1 + 0x10, iVar4);\n        if (iVar4 != 0) {\n            LOCK();\n            piVar1 = iVar4 + 8;\n            iVar2 = *piVar1;\n            *piVar1 = *piVar1 + -1;\n            if (iVar2 < 2) {\n                (**0x140031a58)(iVar4, 1);\n            }\n        }\n    }\n    else {\n        arg1_00 = iVar4 + 0x30;\n        if (7 < *(iVar4 + 0x48)) {\n            arg1_00 = *arg1_00;\n        }\n        iVar2 = fcn.14001340c(arg1_00, arg3);\n        if (iVar2 != 0) {\n            return 0x800700b7;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 463
    },
    "140025a0": {
        "rules": [
            "PEB access/cd8d96519f6244b6acf2796407e948b9",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140025a0c(int64_t arg1)\n\n{\n    // WARNING: Could not recover jumptable at 0x000140025a10. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(arg1 + 0x30);\n    return;\n}\n",
        "token_count": 76
    },
    "140025a1": {
        "rules": [
            "PEB access/cd8d96519f6244b6acf2796407e948b9",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140025a18(int64_t arg1)\n\n{\n    // WARNING: Could not recover jumptable at 0x000140025a1c. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(arg1 + 0x30);\n    return;\n}\n",
        "token_count": 77
    },
    "14000dac": {
        "rules": [
            "encrypt data using HC-128/1d01b23c04404fe18b84a06c7e7d83b0",
            "hash data using aphash/10489b186fc44711a1078750698db7a9"
        ],
        "decompiled_code": "\nvoid fcn.14000dac0(uint64_t *arg1, uint64_t arg2, ulong arg3)\n\n{\n    ulong *puVar1;\n    uint64_t uVar2;\n    code *pcVar3;\n    ulong *puVar4;\n    uint64_t uVar5;\n    \n    uVar2 = arg1[1];\n    uVar5 = uVar2 - *arg1 >> 3;\n    if (uVar5 < arg2) {\n        if (0x1fffffffffffffff < arg2) {\n            fcn.140004888();\n            pcVar3 = swi(3);\n            (*pcVar3)();\n            return;\n        }\n        puVar4 = fcn.140004e84(arg2 * 8);\n        if (uVar5 != 0) {\n            fcn.140003174(*arg1, uVar5 * 8);\n        }\n        puVar1 = puVar4 + arg2;\n        *arg1 = puVar4;\n        arg1[1] = puVar1;\n        arg1[2] = puVar1;\n        for (; puVar4 != puVar1; puVar4 = puVar4 + 1) {\n            *puVar4 = arg3;\n        }\n    }\n    else {\n        uVar5 = (uVar2 - *arg1) + 7 >> 3;\n        if (uVar2 <= *arg1 && *arg1 != uVar2) {\n            uVar5 = 0;\n        }\n        if (uVar5 != 0) {\n            puVar4 = *arg1;\n            for (; uVar5 != 0; uVar5 = uVar5 - 1) {\n                *puVar4 = arg3;\n                puVar4 = puVar4 + 1;\n            }\n        }\n    }\n    return;\n}\n",
        "token_count": 399
    },
    "14000de4": {
        "rules": [
            "encrypt data using HC-128/1d01b23c04404fe18b84a06c7e7d83b0",
            "hash data using aphash/10489b186fc44711a1078750698db7a9"
        ],
        "decompiled_code": "\nvoid fcn.14000de40(int64_t *arg1)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    ulong *puVar5;\n    ulong uVar6;\n    uint64_t uVar7;\n    ulong *puVar8;\n    \n    iVar3 = *arg1;\n    if ((iVar3 != 0) && (*(iVar3 + 0x10) != 0)) {\n        puVar8 = *(iVar3 + 8);\n        *puVar8[1] = 0;\n        puVar8 = *puVar8;\n        while (puVar8 != NULL) {\n            iVar4 = puVar8[3];\n            puVar5 = *puVar8;\n            if (iVar4 != 0) {\n                LOCK();\n                piVar1 = iVar4 + 8;\n                iVar2 = *piVar1;\n                *piVar1 = *piVar1 + -1;\n                if (iVar2 < 2) {\n                    (**0x140031a58)(iVar4, 1);\n                }\n            }\n            fcn.140003174(puVar8, 0x20);\n            puVar8 = puVar5;\n        }\n        **(iVar3 + 8) = *(iVar3 + 8);\n        *(*(iVar3 + 8) + 8) = *(iVar3 + 8);\n        *(iVar3 + 0x10) = 0;\n        puVar8 = *(iVar3 + 0x18);\n        uVar7 = (*(iVar3 + 0x20) - puVar8) + 7U >> 3;\n        if (*(iVar3 + 0x20) <= puVar8 && puVar8 != *(iVar3 + 0x20)) {\n            uVar7 = 0;\n        }\n        if (uVar7 != 0) {\n            uVar6 = *(iVar3 + 8);\n            for (; uVar7 != 0; uVar7 = uVar7 - 1) {\n                *puVar8 = uVar6;\n                puVar8 = puVar8 + 1;\n            }\n        }\n    }\n    return;\n}\n",
        "token_count": 486
    },
    "140011a7": {
        "rules": [
            "encrypt data using HC-128/1d01b23c04404fe18b84a06c7e7d83b0",
            "hash data using aphash/10489b186fc44711a1078750698db7a9"
        ],
        "decompiled_code": "\nvoid fcn.140011a74(uint32_t *arg1, int64_t arg2, uint64_t arg3, uint64_t *arg4)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    int32_t iVar8;\n    uint32_t uVar9;\n    uint32_t uVar10;\n    uint32_t uVar11;\n    uint32_t uVar12;\n    uint32_t uVar13;\n    uint32_t uVar14;\n    uint32_t uVar15;\n    uint32_t uVar16;\n    uint32_t uVar17;\n    uint32_t uVar18;\n    uint32_t uVar19;\n    uint32_t *puVar20;\n    uint32_t uVar21;\n    int32_t *piStack392;\n    uint32_t uStack376;\n    uint32_t uStack368;\n    uint32_t uStack360;\n    uint32_t uStack344;\n    uint32_t uStack328;\n    uint32_t uStack312;\n    uint32_t uStack296;\n    uint32_t uStack280;\n    uint32_t uStack264;\n    uint32_t uStack248;\n    uint32_t uStack240;\n    uint32_t uStack236;\n    uint32_t uStack232;\n    uint64_t uStack160;\n    \n    uVar3 = *arg1;\n    uVar19 = arg1[1];\n    uVar16 = arg1[2];\n    uVar13 = arg1[3];\n    uVar21 = arg1[4];\n    uVar5 = arg1[5];\n    uVar6 = arg1[6];\n    uVar7 = arg1[7];\n    if (0x3f < arg3) {\n        uStack160 = arg3 >> 6;\n        puVar20 = arg2 + 8;\n        arg3 = arg3 + uStack160 * -0x40;\n        do {\n            uVar12 = puVar20[-2];\n            uStack264 = uVar12 >> 0x18 | (uVar12 & 0xff0000) >> 8 | (uVar12 & 0xff00) << 8 | uVar12 << 0x18;\n            iVar8 = uVar7 + 0x428a2f98 +\n                    ((uVar6 ^ uVar5) & uVar21 ^ uVar6) +\n                    ((uVar21 >> 6 | uVar21 << 0x1a) ^ (uVar21 >> 0x19 | uVar21 << 7) ^ (uVar21 >> 0xb | uVar21 << 0x15))\n                    + uStack264;\n            uVar12 = iVar8 + uVar13;\n            uVar15 = puVar20[-1];\n            uVar11 = ((uVar16 | uVar19) & uVar3 | uVar16 & uVar19) +\n                     iVar8 + ((uVar3 >> 0x16 | uVar3 << 10) ^ (uVar3 >> 0xd | uVar3 << 0x13) ^\n                             (uVar3 >> 2 | uVar3 << 0x1e));\n            uStack240 = uVar15 >> 0x18 | (uVar15 & 0xff0000) >> 8 | (uVar15 & 0xff00) << 8 | uVar15 << 0x18;\n            iVar8 = uVar6 + 0x71374491 +\n                    ((uVar5 ^ uVar21) & uVar12 ^ uVar5) +\n                    ((uVar12 >> 6 | uVar12 * 0x4000000) ^\n                    (uVar12 >> 0x19 | uVar12 * 0x80) ^ (uVar12 >> 0xb | uVar12 * 0x200000)) + uStack240;\n            uVar15 = iVar8 + uVar16;\n            uVar18 = *puVar20;\n            uVar14 = ((uVar19 | uVar3) & uVar11 | uVar19 & uVar3) +\n                     iVar8 + ((uVar11 >> 0x16 | uVar11 * 0x400) ^ (uVar11 >> 0xd | uVar11 * 0x80000) ^\n                             (uVar11 >> 2 | uVar11 * 0x40000000));\n            uStack248 = uVar18 >> 0x18 | (uVar18 & 0xff0000) >> 8 | (uVar18 & 0xff00) << 8 | uVar18 << 0x18;\n            iVar8 = uStack248 +\n                    ((uVar15 >> 0x19 | uVar15 * 0x80) ^ (uVar15 >> 0xb | uVar15 * 0x200000) ^\n                    (uVar15 >> 6 | uVar15 * 0x4000000)) + ((uVar12 ^ uVar21) & uVar15 ^ uVar21) + uVar5 + 0xb5c0fbcf;\n            uVar18 = iVar8 + uVar19;\n            uVar2 = puVar20[1];\n            uVar17 = ((uVar11 | uVar3) & uVar14 | uVar11 & uVar3) +\n                     iVar8 + ((uVar14 >> 0x16 | uVar14 * 0x400) ^ (uVar14 >> 0xd | uVar14 * 0x80000) ^\n                             (uVar14 >> 2 | uVar14 * 0x40000000));\n            uStack236 = uVar2 >> 0x18 | (uVar2 & 0xff0000) >> 8 | (uVar2 & 0xff00) << 8 | uVar2 << 0x18;\n            iVar8 = uStack236 +\n                    ((uVar18 >> 0x19 | uVar18 * 0x80) ^ (uVar18 >> 0xb | uVar18 * 0x200000) ^\n                    (uVar18 >> 6 | uVar18 * 0x4000000)) + ((uVar15 ^ uVar12) & uVar18 ^ uVar12) + uVar21 + 0xe9b5dba5;\n            uVar2 = iVar8 + uVar3;\n            uVar4 = puVar20[2];\n            uVar1 = ((uVar14 | uVar11) & uVar17 | uVar14 & uVar11) +\n                    iVar8 + ((uVar17 >> 0x16 | uVar17 * 0x400) ^ (uVar17 >> 0xd | uVar17 * 0x80000) ^\n                            (uVar17 >> 2 | uVar17 * 0x40000000));\n            uStack328 = uVar4 >> 0x18 | (uVar4 & 0xff0000) >> 8 | (uVar4 & 0xff00) << 8 | uVar4 << 0x18;\n            iVar8 = uStack328 +\n                    ((uVar2 >> 0x19 | uVar2 * 0x80) ^ (uVar2 >> 0xb | uVar2 * 0x200000) ^\n                    (uVar2 >> 6 | uVar2 * 0x4000000)) + ((uVar18 ^ uVar15) & uVar2 ^ uVar15) + uVar12 + 0x3956c25b;\n            uVar11 = iVar8 + uVar11;\n            uVar4 = puVar20[3];\n            uVar12 = ((uVar17 | uVar14) & uVar1 | uVar17 & uVar14) +\n                     iVar8 + ((uVar1 >> 0x16 | uVar1 * 0x400) ^ (uVar1 >> 0xd | uVar1 * 0x80000) ^\n                             (uVar1 >> 2 | uVar1 * 0x40000000));\n            uStack312 = uVar4 >> 0x18 | (uVar4 & 0xff0000) >> 8 | (uVar4 & 0xff00) << 8 | uVar4 << 0x18;\n            iVar8 = uStack312 +\n                    ((uVar11 >> 0x19 | uVar11 * 0x80) ^ (uVar11 >> 0xb | uVar11 * 0x200000) ^\n                    (uVar11 >> 6 | uVar11 * 0x4000000)) + ((uVar2 ^ uVar18) & uVar11 ^ uVar18) + uVar15 + 0x59f111f1;\n            uVar14 = iVar8 + uVar14;\n            uVar4 = puVar20[4];\n            uVar15 = ((uVar1 | uVar17) & uVar12 | uVar1 & uVar17) +\n                     iVar8 + ((uVar12 >> 0x16 | uVar12 * 0x400) ^ (uVar12 >> 0xd | uVar12 * 0x80000) ^\n                             (uVar12 >> 2 | uVar12 * 0x40000000));\n            uStack368 = uVar4 >> 0x18 | (uVar4 & 0xff0000) >> 8 | (uVar4 & 0xff00) << 8 | uVar4 << 0x18;\n            iVar8 = uStack368 +\n                    ((uVar14 >> 6 | uVar14 * 0x4000000) ^\n                    (uVar14 >> 0x19 | uVar14 * 0x80) ^ (uVar14 >> 0xb | uVar14 * 0x200000)) +\n                    ((uVar11 ^ uVar2) & uVar14 ^ uVar2) + uVar18 + 0x923f82a4;\n            uVar17 = iVar8 + uVar17;\n            uVar4 = puVar20[5];\n            uVar18 = ((uVar12 | uVar1) & uVar15 | uVar12 & uVar1) +\n                     iVar8 + ((uVar15 >> 0x16 | uVar15 * 0x400) ^ (uVar15 >> 0xd | uVar15 * 0x80000) ^\n                             (uVar15 >> 2 | uVar15 * 0x40000000));\n            uStack280 = uVar4 >> 0x18 | (uVar4 & 0xff0000) >> 8 | (uVar4 & 0xff00) << 8 | uVar4 << 0x18;\n            iVar8 = uStack280 +\n                    ((uVar17 >> 6 | uVar17 * 0x4000000) ^\n                    (uVar17 >> 0x19 | uVar17 * 0x80) ^ (uVar17 >> 0xb | uVar17 * 0x200000)) +\n                    ((uVar14 ^ uVar11) & uVar17 ^ uVar11) + uVar2 + 0xab1c5ed5;\n            uVar1 = iVar8 + uVar1;\n            uVar4 = puVar20[6];\n            uVar2 = ((uVar15 | uVar12) & uVar18 | uVar15 & uVar12) +\n                    iVar8 + ((uVar18 >> 0x16 | uVar18 * 0x400) ^ (uVar18 >> 0xd | uVar18 * 0x80000) ^\n                            (uVar18 >> 2 | uVar18 * 0x40000000));\n            uStack360 = uVar4 >> 0x18 | (uVar4 & 0xff0000) >> 8 | (uVar4 & 0xff00) << 8 | uVar4 << 0x18;\n            iVar8 = uStack360 +\n                    ((uVar1 >> 6 | uVar1 * 0x4000000) ^\n                    (uVar1 >> 0x19 | uVar1 * 0x80) ^ (uVar1 >> 0xb | uVar1 * 0x200000)) +\n                    ((uVar17 ^ uVar14) & uVar1 ^ uVar14) + uVar11 + 0xd807aa98;\n            uVar12 = iVar8 + uVar12;\n            uVar11 = ((uVar18 | uVar15) & uVar2 | uVar18 & uVar15) +\n                     iVar8 + ((uVar2 >> 0x16 | uVar2 * 0x400) ^ (uVar2 >> 0xd | uVar2 * 0x80000) ^\n                             (uVar2 >> 2 | uVar2 * 0x40000000));\n            uVar4 = puVar20[7];\n            uStack344 = uVar4 >> 0x18 | (uVar4 & 0xff0000) >> 8 | (uVar4 & 0xff00) << 8 | uVar4 << 0x18;\n            iVar8 = uStack344 +\n                    ((uVar12 >> 6 | uVar12 * 0x4000000) ^\n                    (uVar12 >> 0x19 | uVar12 * 0x80) ^ (uVar12 >> 0xb | uVar12 * 0x200000)) +\n                    ((uVar1 ^ uVar17) & uVar12 ^ uVar17) + uVar14 + 0x12835b01;\n            uVar15 = iVar8 + uVar15;\n            uVar4 = puVar20[8];\n            uVar14 = ((uVar2 | uVar18) & uVar11 | uVar2 & uVar18) +\n                     iVar8 + ((uVar11 >> 0x16 | uVar11 * 0x400) ^ (uVar11 >> 0xd | uVar11 * 0x80000) ^\n                             (uVar11 >> 2 | uVar11 * 0x40000000));\n            uStack376 = uVar4 >> 0x18 | (uVar4 & 0xff0000) >> 8 | (uVar4 & 0xff00) << 8 | uVar4 << 0x18;\n            iVar8 = uStack376 +\n                    ((uVar15 >> 0x19 | uVar15 * 0x80) ^ (uVar15 >> 0xb | uVar15 * 0x200000) ^\n                    (uVar15 >> 6 | uVar15 * 0x4000000)) + ((uVar12 ^ uVar1) & uVar15 ^ uVar1) + 0x243185be + uVar17;\n            uVar18 = uVar18 + iVar8;\n            uVar4 = puVar20[9];\n            uVar17 = ((uVar11 | uVar2) & uVar14 | uVar11 & uVar2) +\n                     iVar8 + ((uVar14 >> 0x16 | uVar14 * 0x400) ^ (uVar14 >> 0xd | uVar14 * 0x80000) ^\n                             (uVar14 >> 2 | uVar14 * 0x40000000));\n            uStack232 = uVar4 >> 0x18 | (uVar4 & 0xff0000) >> 8 | (uVar4 & 0xff00) << 8 | uVar4 << 0x18;\n            iVar8 = ((uVar18 >> 0x19 | uVar18 * 0x80) ^ (uVar18 >> 0xb | uVar18 * 0x200000) ^\n                    (uVar18 >> 6 | uVar18 * 0x4000000)) + uVar1 + ((uVar15 ^ uVar12) & uVar18 ^ uVar12) + 0x550c7dc3 +\n                    uStack232;\n            uVar4 = puVar20[10];\n            uVar2 = uVar2 + iVar8;\n            uVar1 = ((uVar14 | uVar11) & uVar17 | uVar14 & uVar11) +\n                    iVar8 + ((uVar17 >> 0x16 | uVar17 * 0x400) ^ (uVar17 >> 0xd | uVar17 * 0x80000) ^\n                            (uVar17 >> 2 | uVar17 * 0x40000000));\n            uStack296 = uVar4 >> 0x18 | (uVar4 & 0xff0000) >> 8 | (uVar4 & 0xff00) << 8 | uVar4 << 0x18;\n            iVar8 = uStack296 +\n                    ((uVar15 ^ uVar18) & uVar2 ^ uVar15) +\n                    ((uVar2 >> 6 | uVar2 * 0x4000000) ^\n                    (uVar2 >> 0x19 | uVar2 * 0x80) ^ (uVar2 >> 0xb | uVar2 * 0x200000)) + uVar12 + 0x72be5d74;\n            uVar11 = uVar11 + iVar8;\n            uVar4 = puVar20[0xb];\n            uVar12 = ((uVar14 | uVar17) & uVar1 | uVar14 & uVar17) +\n                     iVar8 + ((uVar1 >> 0x16 | uVar1 * 0x400) ^ (uVar1 >> 0xd | uVar1 * 0x80000) ^\n                             (uVar1 >> 2 | uVar1 * 0x40000000));\n            uVar9 = uVar4 >> 0x18 | (uVar4 & 0xff0000) >> 8 | (uVar4 & 0xff00) << 8 | uVar4 << 0x18;\n            uVar4 = puVar20[0xd];\n            iVar8 = uVar9 + ((uVar18 ^ uVar2) & uVar11 ^ uVar18) +\n                            ((uVar11 >> 6 | uVar11 * 0x4000000) ^\n                            (uVar11 >> 0x19 | uVar11 * 0x80) ^ (uVar11 >> 0xb | uVar11 * 0x200000)) +\n                            uVar15 + 0x80deb1fe;\n            uVar14 = uVar14 + iVar8;\n            uVar10 = puVar20[0xc];\n            uVar15 = ((uVar17 | uVar1) & uVar12 | uVar17 & uVar1) +\n                     iVar8 + ((uVar12 >> 0x16 | uVar12 * 0x400) ^ (uVar12 >> 0xd | uVar12 * 0x80000) ^\n                             (uVar12 >> 2 | uVar12 * 0x40000000));\n            uVar10 = uVar10 >> 0x18 | (uVar10 & 0xff0000) >> 8 | (uVar10 & 0xff00) << 8 | uVar10 << 0x18;\n            iVar8 = uVar10 + ((uVar2 ^ uVar11) & uVar14 ^ uVar2) +\n                             ((uVar14 >> 6 | uVar14 * 0x4000000) ^\n                             (uVar14 >> 0x19 | uVar14 * 0x80) ^ (uVar14 >> 0xb | uVar14 * 0x200000)) +\n                             uVar18 + 0x9bdc06a7;\n            uVar17 = uVar17 + iVar8;\n            uVar18 = ((uVar1 | uVar12) & uVar15 | uVar1 & uVar12) +\n                     iVar8 + ((uVar15 >> 0x16 | uVar15 * 0x400) ^ (uVar15 >> 0xd | uVar15 * 0x80000) ^\n                             (uVar15 >> 2 | uVar15 * 0x40000000));\n            uVar4 = uVar4 >> 0x18 | (uVar4 & 0xff0000) >> 8 | (uVar4 & 0xff00) << 8 | uVar4 << 0x18;\n            iVar8 = ((uVar17 >> 0x19 | uVar17 * 0x80) ^ (uVar17 >> 0xb | uVar17 * 0x200000) ^\n                    (uVar17 >> 6 | uVar17 * 0x4000000)) + uVar2 + ((uVar14 ^ uVar11) & uVar17 ^ uVar11) + 0xc19bf174 +\n                    uVar4;\n            uVar1 = uVar1 + iVar8;\n            uVar2 = ((uVar15 | uVar12) & uVar18 | uVar15 & uVar12) +\n                    iVar8 + ((uVar18 >> 0x16 | uVar18 * 0x400) ^ (uVar18 >> 0xd | uVar18 * 0x80000) ^\n                            (uVar18 >> 2 | uVar18 * 0x40000000));\n            piStack392 = 0x140038148;\n            do {\n                uStack264 = ((uVar10 >> 0x13 | uVar10 << 0xd) ^ (uVar10 >> 0x11 | uVar10 << 0xf) ^ uVar10 >> 10) +\n                            uStack344 +\n                            ((uStack240 >> 0x12 | uStack240 << 0xe) ^ (uStack240 >> 7 | uStack240 << 0x19) ^\n                            uStack240 >> 3) + uStack264;\n                iVar8 = uStack264 +\n                        ((uVar1 >> 0x19 | uVar1 << 7) ^ (uVar1 >> 0xb | uVar1 << 0x15) ^ (uVar1 >> 6 | uVar1 << 0x1a)) +\n                        ((uVar14 ^ uVar17) & uVar1 ^ uVar14) + piStack392[-2] + uVar11;\n                uVar12 = iVar8 + uVar12;\n                uVar11 = ((uVar15 | uVar18) & uVar2 | uVar15 & uVar18) +\n                         iVar8 + ((uVar2 >> 0x16 | uVar2 << 10) ^ (uVar2 >> 0xd | uVar2 << 0x13) ^\n                                 (uVar2 >> 2 | uVar2 << 0x1e));\n                uStack240 = ((uStack248 >> 0x12 | uStack248 << 0xe) ^ (uStack248 >> 7 | uStack248 << 0x19) ^\n                            uStack248 >> 3) +\n                            uStack376 + ((uVar4 >> 0x13 | uVar4 << 0xd) ^ (uVar4 >> 0x11 | uVar4 << 0xf) ^ uVar4 >> 10)\n                            + uStack240;\n                iVar8 = ((uVar1 ^ uVar17) & uVar12 ^ uVar17) +\n                        ((uVar12 >> 0x19 | uVar12 * 0x80) ^ (uVar12 >> 0xb | uVar12 * 0x200000) ^\n                        (uVar12 >> 6 | uVar12 * 0x4000000)) + piStack392[-1] + uVar14 + uStack240;\n                uVar15 = iVar8 + uVar15;\n                uVar14 = ((uVar18 | uVar2) & uVar11 | uVar18 & uVar2) +\n                         iVar8 + ((uVar11 >> 0x16 | uVar11 * 0x400) ^ (uVar11 >> 0xd | uVar11 * 0x80000) ^\n                                 (uVar11 >> 2 | uVar11 * 0x40000000));\n                uStack248 = uStack248 +\n                            ((uStack236 >> 0x12 | uStack236 << 0xe) ^ (uStack236 >> 7 | uStack236 << 0x19) ^\n                            uStack236 >> 3) +\n                            uStack232 +\n                            ((uStack264 >> 0x13 | uStack264 * 0x2000) ^ (uStack264 >> 0x11 | uStack264 * 0x8000) ^\n                            uStack264 >> 10);\n                iVar8 = (uVar1 ^ (uVar12 ^ uVar1) & uVar15) +\n                        ((uVar15 >> 0x19 | uVar15 * 0x80) ^ (uVar15 >> 0xb | uVar15 * 0x200000) ^\n                        (uVar15 >> 6 | uVar15 * 0x4000000)) + *piStack392 + uVar17 + uStack248;\n                uVar18 = iVar8 + uVar18;\n                uVar17 = ((uVar11 | uVar2) & uVar14 | uVar11 & uVar2) +\n                         iVar8 + ((uVar14 >> 0x16 | uVar14 * 0x400) ^ (uVar14 >> 0xd | uVar14 * 0x80000) ^\n                                 (uVar14 >> 2 | uVar14 * 0x40000000));\n                uStack236 = ((uStack240 >> 0x13 | uStack240 * 0x2000) ^ (uStack240 >> 0x11 | uStack240 * 0x8000) ^\n                            uStack240 >> 10) +\n                            uStack296 +\n                            ((uStack328 >> 0x12 | uStack328 << 0xe) ^ (uStack328 >> 7 | uStack328 << 0x19) ^\n                            uStack328 >> 3) + uStack236;\n                iVar8 = uVar1 + ((uVar18 >> 0x19 | uVar18 * 0x80) ^ (uVar18 >> 0xb | uVar18 * 0x200000) ^\n                                (uVar18 >> 6 | uVar18 * 0x4000000)) + ((uVar15 ^ uVar12) & uVar18 ^ uVar12) +\n                                piStack392[1] + uStack236;\n                uVar2 = iVar8 + uVar2;\n                uVar1 = ((uVar11 | uVar14) & uVar17 | uVar11 & uVar14) +\n                        iVar8 + ((uVar17 >> 0x16 | uVar17 * 0x400) ^ (uVar17 >> 0xd | uVar17 * 0x80000) ^\n                                (uVar17 >> 2 | uVar17 * 0x40000000));\n                uStack328 = ((uStack312 >> 0x12 | uStack312 << 0xe) ^ (uStack312 >> 7 | uStack312 << 0x19) ^\n                            uStack312 >> 3) + uVar9 +\n                            ((uStack248 >> 0x13 | uStack248 * 0x2000) ^ (uStack248 >> 0x11 | uStack248 * 0x8000) ^\n                            uStack248 >> 10) + uStack328;\n                iVar8 = uStack328 +\n                        ((uVar2 >> 0x19 | uVar2 * 0x80) ^ (uVar2 >> 0xb | uVar2 * 0x200000) ^\n                        (uVar2 >> 6 | uVar2 * 0x4000000)) + ((uVar15 ^ uVar18) & uVar2 ^ uVar15) + piStack392[2] +\n                        uVar12;\n                uVar11 = uVar11 + iVar8;\n                uVar12 = ((uVar14 | uVar17) & uVar1 | uVar14 & uVar17) +\n                         iVar8 + ((uVar1 >> 0x16 | uVar1 * 0x400) ^ (uVar1 >> 0xd | uVar1 * 0x80000) ^\n                                 (uVar1 >> 2 | uVar1 * 0x40000000));\n                uStack312 = ((uStack236 >> 0x13 | uStack236 * 0x2000) ^ (uStack236 >> 0x11 | uStack236 * 0x8000) ^\n                            uStack236 >> 10) + uVar10 +\n                            ((uStack368 >> 0x12 | uStack368 << 0xe) ^ (uStack368 >> 7 | uStack368 << 0x19) ^\n                            uStack368 >> 3) + uStack312;\n                iVar8 = uStack312 +\n                        ((uVar11 >> 0x19 | uVar11 * 0x80) ^ (uVar11 >> 0xb | uVar11 * 0x200000) ^\n                        (uVar11 >> 6 | uVar11 * 0x4000000)) + ((uVar18 ^ uVar2) & uVar11 ^ uVar18) + piStack392[3] +\n                        uVar15;\n                uVar14 = uVar14 + iVar8;\n                uVar15 = ((uVar17 | uVar1) & uVar12 | uVar17 & uVar1) +\n                         iVar8 + ((uVar12 >> 0x16 | uVar12 * 0x400) ^ (uVar12 >> 0xd | uVar12 * 0x80000) ^\n                                 (uVar12 >> 2 | uVar12 * 0x40000000));\n                uStack368 = ((uStack280 >> 0x12 | uStack280 << 0xe) ^ (uStack280 >> 7 | uStack280 << 0x19) ^\n                            uStack280 >> 3) + uVar4 +\n                            ((uStack328 >> 0x13 | uStack328 * 0x2000) ^ (uStack328 >> 0x11 | uStack328 * 0x8000) ^\n                            uStack328 >> 10) + uStack368;\n                iVar8 = uStack368 +\n                        ((uVar14 >> 0x19 | uVar14 * 0x80) ^ (uVar14 >> 0xb | uVar14 * 0x200000) ^\n                        (uVar14 >> 6 | uVar14 * 0x4000000)) + ((uVar2 ^ uVar11) & uVar14 ^ uVar2) + piStack392[4] +\n                        uVar18;\n                uVar17 = iVar8 + uVar17;\n                uVar18 = ((uVar1 | uVar12) & uVar15 | uVar1 & uVar12) +\n                         iVar8 + ((uVar15 >> 0x16 | uVar15 * 0x400) ^ (uVar15 >> 0xd | uVar15 * 0x80000) ^\n                                 (uVar15 >> 2 | uVar15 * 0x40000000));\n                uStack280 = uStack280 +\n                            ((uStack360 >> 0x12 | uStack360 << 0xe) ^ (uStack360 >> 7 | uStack360 << 0x19) ^\n                            uStack360 >> 3) +\n                            uStack264 +\n                            ((uStack312 >> 0x13 | uStack312 * 0x2000) ^ (uStack312 >> 0x11 | uStack312 * 0x8000) ^\n                            uStack312 >> 10);\n                iVar8 = uStack280 +\n                        ((uVar17 >> 0x19 | uVar17 * 0x80) ^ (uVar17 >> 0xb | uVar17 * 0x200000) ^\n                        (uVar17 >> 6 | uVar17 * 0x4000000)) + ((uVar11 ^ uVar14) & uVar17 ^ uVar11) + piStack392[5] +\n                        uVar2;\n                uVar1 = iVar8 + uVar1;\n                uVar2 = ((uVar12 | uVar15) & uVar18 | uVar12 & uVar15) +\n                        iVar8 + ((uVar18 >> 0x16 | uVar18 * 0x400) ^ (uVar18 >> 0xd | uVar18 * 0x80000) ^\n                                (uVar18 >> 2 | uVar18 * 0x40000000));\n                uStack360 = ((uStack344 >> 0x12 | uStack344 << 0xe) ^ (uStack344 >> 7 | uStack344 << 0x19) ^\n                            uStack344 >> 3) + uStack240 +\n                            ((uStack368 >> 0x13 | uStack368 * 0x2000) ^ (uStack368 >> 0x11 | uStack368 * 0x8000) ^\n                            uStack368 >> 10) + uStack360;\n                iVar8 = uStack360 +\n                        ((uVar1 >> 0x19 | uVar1 * 0x80) ^ (uVar1 >> 0xb | uVar1 * 0x200000) ^\n                        (uVar1 >> 6 | uVar1 * 0x4000000)) + ((uVar14 ^ uVar17) & uVar1 ^ uVar14) + piStack392[6] +\n                        uVar11;\n                uVar12 = uVar12 + iVar8;\n                uVar11 = ((uVar15 | uVar18) & uVar2 | uVar15 & uVar18) +\n                         iVar8 + ((uVar2 >> 0x16 | uVar2 * 0x400) ^ (uVar2 >> 0xd | uVar2 * 0x80000) ^\n                                 (uVar2 >> 2 | uVar2 * 0x40000000));\n                uStack344 = ((uStack280 >> 0x13 | uStack280 * 0x2000) ^ (uStack280 >> 0x11 | uStack280 * 0x8000) ^\n                            uStack280 >> 10) + uStack248 +\n                            ((uStack376 >> 0x12 | uStack376 << 0xe) ^ (uStack376 >> 7 | uStack376 << 0x19) ^\n                            uStack376 >> 3) + uStack344;\n                iVar8 = uStack344 +\n                        ((uVar12 >> 0x19 | uVar12 * 0x80) ^ (uVar12 >> 0xb | uVar12 * 0x200000) ^\n                        (uVar12 >> 6 | uVar12 * 0x4000000)) + ((uVar17 ^ uVar1) & uVar12 ^ uVar17) + piStack392[7] +\n                        uVar14;\n                uVar15 = iVar8 + uVar15;\n                uVar14 = ((uVar18 | uVar2) & uVar11 | uVar18 & uVar2) +\n                         iVar8 + ((uVar11 >> 0x16 | uVar11 * 0x400) ^ (uVar11 >> 0xd | uVar11 * 0x80000) ^\n                                 (uVar11 >> 2 | uVar11 * 0x40000000));\n                uStack376 = ((uStack232 >> 0x12 | uStack232 << 0xe) ^ (uStack232 >> 7 | uStack232 << 0x19) ^\n                            uStack232 >> 3) + uStack236 +\n                            ((uStack360 >> 0x13 | uStack360 * 0x2000) ^ (uStack360 >> 0x11 | uStack360 * 0x8000) ^\n                            uStack360 >> 10) + uStack376;\n                iVar8 = uStack376 +\n                        ((uVar15 >> 0x19 | uVar15 * 0x80) ^ (uVar15 >> 0xb | uVar15 * 0x200000) ^\n                        (uVar15 >> 6 | uVar15 * 0x4000000)) + ((uVar1 ^ uVar12) & uVar15 ^ uVar1) + piStack392[8] +\n                        uVar17;\n                uVar18 = iVar8 + uVar18;\n                uVar17 = ((uVar2 | uVar11) & uVar14 | uVar2 & uVar11) +\n                         iVar8 + ((uVar14 >> 0x16 | uVar14 * 0x400) ^ (uVar14 >> 0xd | uVar14 * 0x80000) ^\n                                 (uVar14 >> 2 | uVar14 * 0x40000000));\n                uStack232 = ((uStack344 >> 0x13 | uStack344 * 0x2000) ^ (uStack344 >> 0x11 | uStack344 * 0x8000) ^\n                            uStack344 >> 10) +\n                            uStack328 +\n                            ((uStack296 >> 0x12 | uStack296 << 0xe) ^ (uStack296 >> 7 | uStack296 << 0x19) ^\n                            uStack296 >> 3) + uStack232;\n                iVar8 = ((uVar18 >> 0x19 | uVar18 * 0x80) ^ (uVar18 >> 0xb | uVar18 * 0x200000) ^\n                        (uVar18 >> 6 | uVar18 * 0x4000000)) + ((uVar12 ^ uVar15) & uVar18 ^ uVar12) + piStack392[9] +\n                        uVar1 + uStack232;\n                uVar2 = iVar8 + uVar2;\n                uVar1 = ((uVar11 | uVar14) & uVar17 | uVar11 & uVar14) +\n                        iVar8 + ((uVar17 >> 0x16 | uVar17 * 0x400) ^ (uVar17 >> 0xd | uVar17 * 0x80000) ^\n                                (uVar17 >> 2 | uVar17 * 0x40000000));\n                uStack296 = ((uStack376 >> 0x13 | uStack376 * 0x2000) ^ (uStack376 >> 0x11 | uStack376 * 0x8000) ^\n                            uStack376 >> 10) + uStack312 +\n                            ((uVar9 >> 0x12 | uVar9 << 0xe) ^ (uVar9 >> 7 | uVar9 << 0x19) ^ uVar9 >> 3) + uStack296;\n                iVar8 = uVar12 + ((uVar2 >> 0x19 | uVar2 * 0x80) ^ (uVar2 >> 0xb | uVar2 * 0x200000) ^\n                                 (uVar2 >> 6 | uVar2 * 0x4000000)) + ((uVar15 ^ uVar18) & uVar2 ^ uVar15) +\n                                 piStack392[10] + uStack296;\n                uVar11 = uVar11 + iVar8;\n                uVar12 = ((uVar1 >> 0x16 | uVar1 * 0x400) ^ (uVar1 >> 0xd | uVar1 * 0x80000) ^\n                         (uVar1 >> 2 | uVar1 * 0x40000000)) + iVar8 + ((uVar14 | uVar17) & uVar1 | uVar14 & uVar17);\n                uVar9 = uVar9 + ((uVar10 >> 0x12 | uVar10 << 0xe) ^ (uVar10 >> 7 | uVar10 << 0x19) ^ uVar10 >> 3) +\n                        ((uStack232 >> 0x13 | uStack232 * 0x2000) ^ (uStack232 >> 0x11 | uStack232 * 0x8000) ^\n                        uStack232 >> 10) + uStack368;\n                iVar8 = ((uVar11 >> 0x19 | uVar11 * 0x80) ^ (uVar11 >> 0xb | uVar11 * 0x200000) ^\n                        (uVar11 >> 6 | uVar11 * 0x4000000)) + ((uVar2 ^ uVar18) & uVar11 ^ uVar18) + piStack392[0xb] +\n                        uVar15 + uVar9;\n                uVar14 = iVar8 + uVar14;\n                uVar15 = ((uVar12 >> 0x16 | uVar12 * 0x400) ^ (uVar12 >> 0xd | uVar12 * 0x80000) ^\n                         (uVar12 >> 2 | uVar12 * 0x40000000)) + iVar8 + ((uVar1 | uVar17) & uVar12 | uVar1 & uVar17);\n                uVar10 = uVar10 + ((uStack296 >> 0x13 | uStack296 * 0x2000) ^ (uStack296 >> 0x11 | uStack296 * 0x8000) ^\n                                  uStack296 >> 10) +\n                         ((uVar4 >> 0x12 | uVar4 << 0xe) ^ (uVar4 >> 7 | uVar4 << 0x19) ^ uVar4 >> 3) + uStack280;\n                iVar8 = ((uVar14 >> 0x19 | uVar14 * 0x80) ^ (uVar14 >> 0xb | uVar14 * 0x200000) ^\n                        (uVar14 >> 6 | uVar14 * 0x4000000)) + ((uVar11 ^ uVar2) & uVar14 ^ uVar2) + piStack392[0xc] +\n                        uVar18 + uVar10;\n                uVar17 = iVar8 + uVar17;\n                uVar18 = ((uVar1 | uVar12) & uVar15 | uVar1 & uVar12) +\n                         iVar8 + ((uVar15 >> 0x16 | uVar15 * 0x400) ^ (uVar15 >> 0xd | uVar15 * 0x80000) ^\n                                 (uVar15 >> 2 | uVar15 * 0x40000000));\n                uVar4 = ((uVar9 >> 0x13 | uVar9 * 0x2000) ^ (uVar9 >> 0x11 | uVar9 * 0x8000) ^ uVar9 >> 10) +\n                        uVar4 + ((uStack264 >> 0x12 | uStack264 * 0x4000) ^ (uStack264 >> 7 | uStack264 * 0x2000000) ^\n                                uStack264 >> 3) + uStack360;\n                iVar8 = ((uVar17 >> 0x19 | uVar17 * 0x80) ^ (uVar17 >> 0xb | uVar17 * 0x200000) ^\n                        (uVar17 >> 6 | uVar17 * 0x4000000)) + ((uVar11 ^ uVar14) & uVar17 ^ uVar11) + piStack392[0xd] +\n                        uVar2 + uVar4;\n                uVar1 = uVar1 + iVar8;\n                uVar2 = ((uVar12 | uVar15) & uVar18 | uVar12 & uVar15) +\n                        iVar8 + ((uVar18 >> 0x16 | uVar18 * 0x400) ^ (uVar18 >> 0xd | uVar18 * 0x80000) ^\n                                (uVar18 >> 2 | uVar18 * 0x40000000));\n                piStack392 = piStack392 + 0x10;\n            } while (piStack392 < 0x140038208);\n            uVar16 = uVar15 + uVar16;\n            uVar13 = uVar12 + uVar13;\n            uVar6 = uVar14 + uVar6;\n            uVar7 = uVar11 + uVar7;\n            uVar3 = uVar3 + uVar2;\n            uVar21 = uVar21 + uVar1;\n            uVar19 = uVar19 + uVar18;\n            puVar20 = puVar20 + 0x10;\n            uVar5 = uVar5 + uVar17;\n            uStack160 = uStack160 - 1;\n            arg1[1] = uVar19;\n            arg1[2] = uVar16;\n            arg1[3] = uVar13;\n            arg1[4] = uVar21;\n            arg1[5] = uVar5;\n            arg1[6] = uVar6;\n            arg1[7] = uVar7;\n            *arg1 = uVar3;\n        } while (uStack160 != 0);\n    }\n    *arg4 = arg3;\n    return;\n}\n",
        "token_count": 10077
    },
    "14000fcf": {
        "rules": [
            "decompress data using aPLib/06666ba0b6a14a5481e4ee6eb664d454"
        ],
        "decompiled_code": "\nuint64_t fcn.14000fcf8(uint8_t *arg1, ulong noname_1, int64_t arg3)\n\n{\n    uint64_t uVar1;\n    uint64_t uVar2;\n    uint64_t uVar3;\n    \n    uVar3 = arg1[1] * 0x100 + *arg1 + 0x61c8864680b583eb ^ 0x13c6ef;\n    uVar2 = (arg3 - uVar3) + 0x61c8864680b583eb ^ uVar3 << 9;\n    uVar1 = (-0x61c8864680b583eb - uVar2) - uVar3 ^ uVar2 >> 8;\n    uVar3 = (uVar3 - uVar1) - uVar2 ^ uVar1 >> 0x26;\n    uVar2 = (uVar2 - uVar1) - uVar3 ^ uVar3 << 0x17;\n    uVar1 = (uVar1 - uVar2) - uVar3 ^ uVar2 >> 5;\n    uVar3 = (uVar3 - uVar1) - uVar2 ^ uVar1 >> 0x23;\n    uVar2 = (uVar2 - uVar1) - uVar3 ^ uVar3 << 0x31;\n    uVar1 = (uVar1 - uVar2) - uVar3 ^ uVar2 >> 0xb;\n    uVar3 = (uVar3 - uVar1) - uVar2 ^ uVar1 >> 0xc;\n    uVar2 = (uVar2 - uVar1) - uVar3 ^ uVar3 << 0x12;\n    return (uVar1 - uVar2) - uVar3 ^ uVar2 >> 0x16;\n}\n",
        "token_count": 409
    },
    "14000fdd": {
        "rules": [
            "decompress data using LZO/d8e7b8e532bc4f7fa2e8bf7bf0025ad1"
        ],
        "decompiled_code": "\nvoid fcn.14000fddc(void)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    ulong *arg1;\n    ulong *arg1_00;\n    int64_t arg1_01;\n    uint32_t uVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    ulong uVar7;\n    int64_t iVar8;\n    int32_t iVar9;\n    uchar auStackY280 [32];\n    ulong in_stack_ffffffffffffff10;\n    ulong in_stack_ffffffffffffff18;\n    int64_t iStack184;\n    ulong *puStack176;\n    ulong *puStack168;\n    int64_t iStack160;\n    int64_t iStack152;\n    ulong uStack144;\n    ulong uStack136;\n    ulong uStack120;\n    ulong uStack104;\n    uint uStack96;\n    ushort uStack92;\n    int64_t iStack88;\n    int64_t iStack80;\n    ulong uStack72;\n    ulong uStack64;\n    uint64_t uStack56;\n    \n    uStack56 = *0x14003ef38 ^ auStackY280;\n    uStack120 = 0x140040800;\n    *0x140040800 = ZEXT816(0);\n    *0x140040810 = ZEXT816(0);\n    *0x140040820 = 0;\n    *0x140040828 = 0x18;\n    *0x140040830 = 0x140040800;\n    *0x140040838 = 0;\n    *0x140040840 = 0;\n    iStack152 = 0;\n    uStack96 = 0;\n    uStack92 = 0x500;\n    uVar4 = fcn.14000ec0c(&iStack152, 2, 0x20, 0x220, &uStack96, in_stack_ffffffffffffff10, in_stack_ffffffffffffff18);\n    if (uVar4 < 0) {\ncode_r0x000140010115:\n        uVar4 = fcn.14000bf14(uVar4);\ncode_r0x00014001011d:\n        uVar4 = fcn.14000bf14(uVar4);\ncode_r0x000140010125:\n        uVar4 = fcn.14000bf14(uVar4);\n    }\n    else {\n        iStack160 = 0;\n        uVar4 = fcn.14000ec0c(&iStack160, 2, 0x20, 0x221, &uStack96, in_stack_ffffffffffffff10, \n                              in_stack_ffffffffffffff18);\n        if (uVar4 < 0) goto code_r0x00014001011d;\n        iStack184 = 0;\n        uVar7 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)();\n        uVar4 = fcn.14000c0a0(&iStack184, uVar7, 8);\n        iVar2 = iStack184;\n        if (uVar4 < 0) goto code_r0x000140010125;\n        puStack176 = NULL;\n        uVar4 = fcn.14000ed20(&puStack176, iStack184, 1);\n        arg1 = puStack176;\n        if (-1 < uVar4) {\n            uVar7 = *puStack176;\n            puStack168 = NULL;\n            iVar8 = 4;\n            uStack136 = uVar7;\n            uVar4 = fcn.14000ed20(&puStack168, iVar2, 4);\n            arg1_01 = iStack152;\n            iVar2 = iStack160;\n            arg1_00 = puStack168;\n            if (uVar4 < 0) goto code_r0x000140010135;\n            uStack104 = *puStack168;\n            iStack88 = iStack160;\n            iStack80 = iStack152;\n            uStack72 = uVar7;\n            uStack64 = uStack104;\n            iVar9 = 0x38;\n            do {\n                iVar5 = (*_sym.imp.ADVAPI32.dll_GetLengthSid)();\n                iVar3 = iStack184;\n                iVar9 = iVar9 + -4 + iVar5;\n                iVar8 = iVar8 + -1;\n            } while (iVar8 != 0);\n            uVar4 = iVar9 + 3U & 0xfffffffc;\n            uStack144 = 0;\n            if (uVar4 < 8) {\n                uVar6 = 0x80070057;\n            }\n            else {\n                uVar6 = fcn.14000ca54(&uStack144, uVar4);\n                if (-1 < uVar6) {\n                    iVar9 = (*_sym.imp.ADVAPI32.dll_InitializeSecurityDescriptor)(*0x140040830, 1);\n                    uVar7 = uStack144;\n                    if (iVar9 != 0) {\n                        iVar9 = (*_sym.imp.ADVAPI32.dll_InitializeAcl)(uStack144, uVar4, 2);\n                        if (iVar9 != 0) {\n                            iVar9 = (*_sym.imp.ADVAPI32.dll_AddAccessAllowedAce)(uVar7, 2, 0x80000000, iVar2);\n                            if (iVar9 != 0) {\n                                iVar9 = (*_sym.imp.ADVAPI32.dll_AddAccessAllowedAce)(uVar7, 2, 0x10000000, arg1_01);\n                                if (iVar9 != 0) {\n                                    iVar9 = (*_sym.imp.ADVAPI32.dll_AddAccessAllowedAce)\n                                                      (uVar7, 2, 0x10000000, uStack104);\n                                    if (iVar9 != 0) {\n                                        iVar9 = (*_sym.imp.ADVAPI32.dll_AddAccessAllowedAce)\n                                                          (uVar7, 2, 0x10000000, uStack136);\n                                        if (iVar9 != 0) {\n                                            iVar9 = (*_sym.imp.ADVAPI32.dll_SetSecurityDescriptorDacl)\n                                                              (*0x140040830, 1, uVar7, 0);\n                                            if (iVar9 != 0) goto code_r0x000140010067;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    uVar4 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                    if (uVar4 != 0) {\n                        fcn.14000c050(uVar4);\n                        pcVar1 = swi(3);\n                        (*pcVar1)();\n                        return;\n                    }\ncode_r0x000140010067:\n                    iVar8 = *0x140040840;\n                    *0x140040840 = uVar7;\n                    if (iVar8 != 0) {\n                        fcn.1400187bc(iVar8);\n                    }\n                    fcn.1400187bc(arg1_00);\n                    fcn.1400187bc(arg1);\n                    if (iVar3 != 0) {\n                        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar3);\n                    }\n                    if (iVar2 != 0) {\n                        fcn.140009480(iVar2);\n                    }\n                    if (arg1_01 != 0) {\n                        fcn.140009480(arg1_01);\n                    }\n                    fcn.140018790(uStack56 ^ auStackY280);\n                    return;\n                }\n            }\n            uVar4 = fcn.14000bf14(uVar6);\n            goto code_r0x000140010115;\n        }\n    }\n    uVar4 = fcn.14000bf14(uVar4);\ncode_r0x000140010135:\n    fcn.14000bf14(uVar4);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 1706
    },
    "140010a5": {
        "rules": [
            "compute adler32 checksum/59ba9d7991e641c88d7c729645f1cfca"
        ],
        "decompiled_code": "\nuint32_t fcn.140010a54(void)\n\n{\n    ulong uVar1;\n    uint uVar2;\n    uint uVar3;\n    uint uVar4;\n    uint uVar5;\n    uint uVar6;\n    uint uVar7;\n    uint uVar8;\n    uint uVar9;\n    uint uVar10;\n    uint uVar11;\n    uint uVar12;\n    uint *puVar13;\n    uint *puVar14;\n    int32_t iVar15;\n    uint32_t uVar16;\n    int64_t iVar17;\n    uint32_t uVar18;\n    uint *puVar19;\n    uint *puVar20;\n    uint uStack296;\n    uchar auStack292 [292];\n    \n    uStack296 = 0x11c;\n    fcn.14001a0c0(auStack292, 0, 0x118);\n    iVar17 = 2;\n    puVar13 = 0x1400405b8;\n    puVar14 = &uStack296;\n    do {\n        puVar20 = puVar14;\n        puVar19 = puVar13;\n        uVar2 = puVar20[1];\n        uVar3 = puVar20[2];\n        uVar4 = puVar20[3];\n        uVar5 = puVar20[4];\n        uVar6 = puVar20[5];\n        uVar7 = puVar20[6];\n        uVar8 = puVar20[7];\n        *puVar19 = *puVar20;\n        puVar19[1] = uVar2;\n        puVar19[2] = uVar3;\n        puVar19[3] = uVar4;\n        uVar2 = puVar20[8];\n        uVar3 = puVar20[9];\n        uVar4 = puVar20[10];\n        uVar9 = puVar20[0xb];\n        puVar19[4] = uVar5;\n        puVar19[5] = uVar6;\n        puVar19[6] = uVar7;\n        puVar19[7] = uVar8;\n        uVar5 = puVar20[0xc];\n        uVar6 = puVar20[0xd];\n        uVar7 = puVar20[0xe];\n        uVar8 = puVar20[0xf];\n        puVar19[8] = uVar2;\n        puVar19[9] = uVar3;\n        puVar19[10] = uVar4;\n        puVar19[0xb] = uVar9;\n        uVar2 = puVar20[0x10];\n        uVar3 = puVar20[0x11];\n        uVar4 = puVar20[0x12];\n        uVar9 = puVar20[0x13];\n        puVar19[0xc] = uVar5;\n        puVar19[0xd] = uVar6;\n        puVar19[0xe] = uVar7;\n        puVar19[0xf] = uVar8;\n        uVar5 = puVar20[0x14];\n        uVar6 = puVar20[0x15];\n        uVar7 = puVar20[0x16];\n        uVar8 = puVar20[0x17];\n        puVar19[0x10] = uVar2;\n        puVar19[0x11] = uVar3;\n        puVar19[0x12] = uVar4;\n        puVar19[0x13] = uVar9;\n        uVar9 = puVar20[0x18];\n        uVar10 = puVar20[0x19];\n        uVar11 = puVar20[0x1a];\n        uVar12 = puVar20[0x1b];\n        puVar19[0x14] = uVar5;\n        puVar19[0x15] = uVar6;\n        puVar19[0x16] = uVar7;\n        puVar19[0x17] = uVar8;\n        uVar2 = puVar20[0x1c];\n        uVar3 = puVar20[0x1d];\n        uVar4 = puVar20[0x1e];\n        uVar5 = puVar20[0x1f];\n        puVar19[0x18] = uVar9;\n        puVar19[0x19] = uVar10;\n        puVar19[0x1a] = uVar11;\n        puVar19[0x1b] = uVar12;\n        puVar19[0x1c] = uVar2;\n        puVar19[0x1d] = uVar3;\n        puVar19[0x1e] = uVar4;\n        puVar19[0x1f] = uVar5;\n        iVar17 = iVar17 + -1;\n        puVar13 = puVar19 + 0x20;\n        puVar14 = puVar20 + 0x20;\n    } while (iVar17 != 0);\n    uVar1 = *(puVar20 + 0x24);\n    uVar2 = puVar20[0x21];\n    uVar3 = puVar20[0x22];\n    uVar4 = puVar20[0x23];\n    puVar19[0x20] = puVar20[0x20];\n    puVar19[0x21] = uVar2;\n    puVar19[0x22] = uVar3;\n    puVar19[0x23] = uVar4;\n    *(puVar19 + 0x24) = uVar1;\n    puVar19[0x26] = puVar20[0x26];\n    iVar15 = (*_sym.imp.ntdll.dll_RtlGetVersion)();\n    *0x1400406d3 = 0;\n    if (iVar15 < 0) {\n        (*_sym.imp.ntdll.dll_RtlNtStatusToDosError)();\n        (*_sym.imp.KERNEL32.dll_SetLastError)();\n        uVar16 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        uVar18 = uVar16 & 0xffff | 0x80070000;\n        if (uVar16 < 1) {\n            uVar18 = uVar16;\n        }\n        if (uVar18 < 0) {\n            return uVar18;\n        }\n    }\n    *0x1400406d4 = *0x1400405bc << 0x10 | *0x1400405c0;\n    *0x1400405b0 = 0x130;\n    *0x1400406d8 = CONCAT44(*0x1400406d4, *0x1400405c4);\n    return 0;\n}\n",
        "token_count": 1481
    },
    "1400012b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_9h\n// WARNING: Variable defined which should be unmapped: var_19h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.1400012b4(ulong noname_0, ulong arg2)\n\n{\n    int64_t *in_stack_00000030;\n    int64_t *in_stack_00000038;\n    int64_t *in_stack_00000040;\n    int64_t *in_stack_00000058;\n    uchar auStack264 [32];\n    uint uStack232;\n    uchar *puStack224;\n    uchar auStack216 [40];\n    uint uStack176;\n    uint uStack172;\n    int64_t iStack168;\n    int32_t iStack160;\n    uint uStack156;\n    int64_t iStack152;\n    int32_t iStack144;\n    uint uStack140;\n    uchar auStack136 [3];\n    ulong var_7dh;\n    uint uStack124;\n    ulong var_69h;\n    ulong var_59h;\n    uchar auStack88 [7];\n    ulong var_49h;\n    ulong var_3dh;\n    uint uStack60;\n    uchar auStack56 [3];\n    ulong var_2dh;\n    ulong var_19h;\n    ulong var_9h;\n    \n    _auStack56 = *0x14003ef38 ^ auStack264;\n    uStack60 = 0;\n    _auStack88 = *in_stack_00000058;\n    stack0xffffffffffffffc0 = 4;\n    if (_auStack88 == 0) {\n        _auStack88 = 0x1400373c1;\n        var_49h._1_4_ = 1;\n    }\n    else {\n        var_49h._1_4_ = fcn.140013590(_auStack88);\n        var_49h._1_4_ = var_49h._1_4_ + 1;\n    }\n    stack0xffffffffffffffb4 = 0;\n    stack0xffffffffffffffa4 = 0;\n    stack0xffffffffffffff94 = 0;\n    _auStack136 = *in_stack_00000040;\n    var_59h._1_4_ = 1;\n    var_69h._1_4_ = 4;\n    if (_auStack136 == 0) {\n        _auStack136 = 0x1400373c1;\n        *NULL = 1;\n    }\n    else {\n        *NULL = fcn.140013590(_auStack136);\n        *NULL = *NULL + 1;\n    }\n    uStack124 = 0;\n    iStack152 = *in_stack_00000038;\n    if (iStack152 == 0) {\n        iStack152 = 0x1400373c1;\n        iStack144 = 1;\n    }\n    else {\n        iStack144 = fcn.140013590(iStack152);\n        iStack144 = iStack144 + 1;\n    }\n    uStack140 = 0;\n    iStack168 = *in_stack_00000030;\n    if (iStack168 == 0) {\n        iStack168 = 0x1400373c1;\n        iStack160 = 1;\n    }\n    else {\n        iStack160 = fcn.140013590(iStack168);\n        iStack160 = iStack160 + 1;\n    }\n    uStack156 = 0;\n    uStack172 = 0;\n    puStack224 = auStack216;\n    uStack232 = 10;\n    uStack176 = 1;\n    fcn.140001000(0x14003e240, arg2, 0, 0);\n    fcn.140018790(_auStack56 ^ auStack264);\n    return;\n}\n",
        "token_count": 834
    },
    "140001b5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_9h\n// WARNING: Variable defined which should be unmapped: var_1dh\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.140001b54(ulong noname_0, ulong arg2)\n\n{\n    int64_t *in_stack_00000030;\n    int64_t *in_stack_00000038;\n    int64_t *in_stack_00000040;\n    int64_t *in_stack_00000058;\n    uchar auStack248 [32];\n    uint uStack216;\n    uchar *puStack208;\n    uchar auStack200 [40];\n    uint uStack160;\n    uint uStack156;\n    int64_t iStack152;\n    int32_t iStack144;\n    uint uStack140;\n    uchar auStack136 [7];\n    ulong var_79h;\n    uchar auStack120 [3];\n    ulong var_6dh;\n    uint uStack108;\n    ulong var_59h;\n    ulong var_49h;\n    uchar auStack72 [7];\n    ulong var_39h;\n    uchar auStack56 [3];\n    ulong var_2dh;\n    ulong var_1dh;\n    ulong var_9h;\n    \n    _auStack56 = *0x14003ef38 ^ auStack248;\n    _auStack72 = *in_stack_00000058;\n    if (_auStack72 == 0) {\n        _auStack72 = 0x1400373c1;\n        var_39h._1_4_ = 1;\n    }\n    else {\n        var_39h._1_4_ = fcn.140013590(_auStack72);\n        var_39h._1_4_ = var_39h._1_4_ + 1;\n    }\n    stack0xffffffffffffffc4 = 0;\n    stack0xffffffffffffffb4 = 0;\n    stack0xffffffffffffffa4 = 0;\n    _auStack120 = *in_stack_00000040;\n    var_49h._1_4_ = 1;\n    var_59h._1_4_ = 4;\n    if (_auStack120 == 0) {\n        _auStack120 = 0x1400373c1;\n        *NULL = 1;\n    }\n    else {\n        *NULL = fcn.140013590(_auStack120);\n        *NULL = *NULL + 1;\n    }\n    uStack108 = 0;\n    _auStack136 = *in_stack_00000038;\n    if (_auStack136 == 0) {\n        _auStack136 = 0x1400373c1;\n        var_79h._1_4_ = 1;\n    }\n    else {\n        var_79h._1_4_ = fcn.140013590(_auStack136);\n        var_79h._1_4_ = var_79h._1_4_ + 1;\n    }\n    stack0xffffffffffffff84 = 0;\n    iStack152 = *in_stack_00000030;\n    if (iStack152 == 0) {\n        iStack152 = 0x1400373c1;\n        iStack144 = 1;\n    }\n    else {\n        iStack144 = fcn.140013590(iStack152);\n        iStack144 = iStack144 + 1;\n    }\n    uStack140 = 0;\n    uStack156 = 0;\n    puStack208 = auStack200;\n    uStack216 = 9;\n    uStack160 = 1;\n    fcn.140001000(0x14003e240, arg2, 0, 0);\n    fcn.140018790(_auStack56 ^ auStack248);\n    return;\n}\n",
        "token_count": 824
    },
    "140018a6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.140018a6c(ulong param_1)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.140018a30(param_1);\n    return (iVar1 != 0) - 1;\n}\n",
        "token_count": 56
    },
    "140001e3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140001e30(ulong LoggerHandle, ulong noname_1, ulong MessageGuid, ulong arg4)\n\n{\n    uint auStackX32 [2];\n    \n    auStackX32[0] = arg4;\n    (*_sym.imp.ADVAPI32.dll_TraceMessage)(LoggerHandle, 0x2b, MessageGuid, noname_1, auStackX32, 4, 0);\n    return;\n}\n",
        "token_count": 97
    },
    "140001e6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140001e64(ulong arg1, uint64_t arg2, ulong arg3, int64_t arg4)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    \n    if (arg4 == 0) {\n        iVar1 = 5;\n    }\n    else {\n        iVar1 = fcn.140013788(arg4, arg2, arg3, arg4);\n        iVar1 = iVar1 + 1;\n    }\n    iVar2 = 0x1400373c8;\n    if (arg4 != 0) {\n        iVar2 = arg4;\n    }\n    (*_sym.imp.ADVAPI32.dll_TraceMessage)(arg1, 0x2b, arg3, arg2 & 0xffff, iVar2, iVar1 * 2, &stack0x00000028, 4, 0);\n    return;\n}\n",
        "token_count": 194
    },
    "140001ef": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140001efc(ulong LoggerHandle, ulong noname_1, ulong MessageGuid, ulong arg4)\n\n{\n    uint auStackX32 [2];\n    \n    auStackX32[0] = arg4;\n    (*_sym.imp.ADVAPI32.dll_TraceMessage)(LoggerHandle, 0x2b, MessageGuid, noname_1, auStackX32, 4, 0);\n    return;\n}\n",
        "token_count": 97
    },
    "14000261": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140002610(int64_t *hObject)\n\n{\n    if (*hObject != -1) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(*hObject);\n    }\n    return;\n}\n",
        "token_count": 47
    },
    "14000262": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140002628(ulong *arg1)\n\n{\n    if (7 < arg1[7]) {\n        fcn.140003174(arg1[4], arg1[7] * 2 + 2);\n    }\n    arg1[7] = 7;\n    arg1[6] = 0;\n    *(arg1 + 4) = 0;\n    if (7 < arg1[3]) {\n        fcn.140003174(*arg1, arg1[3] * 2 + 2);\n    }\n    arg1[2] = 0;\n    arg1[3] = 7;\n    *arg1 = 0;\n    return;\n}\n",
        "token_count": 152
    },
    "1400033e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400033e0(int64_t *arg1)\n\n{\n    if (*arg1 != 0) {\n        (**0x140031a58)();\n    }\n    return;\n}\n",
        "token_count": 43
    },
    "14000341": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140003410(ushort *arg1, int64_t arg2, ulong arg3, ulong arg4)\n\n{\n    uint64_t arg3_00;\n    int32_t iVar1;\n    uint64_t *puVar2;\n    ulong uVar3;\n    \n    uVar3 = 0;\n    if (arg2 - 1U < 0x7fffffff) {\n        arg3_00 = arg2 - 1;\n        puVar2 = fcn.140003408();\n        iVar1 = fcn.1400232b0(*puVar2 | 1, arg1, arg3_00, arg3);\n        if (iVar1 < 0) {\n            iVar1 = -1;\n        }\n        if ((iVar1 < 0) || (arg3_00 < iVar1)) {\n            uVar3 = 0x8007007a;\n        }\n        else if (iVar1 != arg3_00) {\n            return 0;\n        }\n        arg1[arg3_00] = 0;\n    }\n    else {\n        uVar3 = 0x80070057;\n        if (arg2 != 0) {\n            *arg1 = 0;\n        }\n    }\n    return uVar3;\n}\n",
        "token_count": 273
    },
    "1400034a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400034ac(ulong LoggerHandle, ulong noname_1, ulong MessageGuid, ulong arg4)\n\n{\n    uint auStackX32 [2];\n    \n    auStackX32[0] = arg4;\n    (*_sym.imp.ADVAPI32.dll_TraceMessage)\n              (LoggerHandle, 0x2b, MessageGuid, noname_1, auStackX32, 4, &stack0x00000028, 4, 0);\n    return;\n}\n",
        "token_count": 110
    },
    "1400034f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400034f0(ulong LoggerHandle, ulong noname_1, ulong MessageGuid, ulong arg4)\n\n{\n    uint auStackX32 [2];\n    \n    auStackX32[0] = arg4;\n    (*_sym.imp.ADVAPI32.dll_TraceMessage)\n              (LoggerHandle, 0x2b, MessageGuid, noname_1, auStackX32, 4, &stack0x00000028, 8, 0);\n    return;\n}\n",
        "token_count": 111
    },
    "14000353": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140003534(ulong arg1, ulong noname_1, ulong MessageGuid, int64_t arg4)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    int64_t in_stack_00000028;\n    \n    iVar4 = -1;\n    iVar3 = 10;\n    if (in_stack_00000028 == 0) {\n        iVar1 = 10;\n    }\n    else {\n        iVar1 = -1;\n        do {\n            iVar1 = iVar1 + 1;\n        } while (*(in_stack_00000028 + iVar1 * 2) != 0);\n        iVar1 = iVar1 * 2 + 2;\n    }\n    iVar2 = 0x1400373c8;\n    if (in_stack_00000028 != 0) {\n        iVar2 = in_stack_00000028;\n    }\n    if (arg4 != 0) {\n        do {\n            iVar4 = iVar4 + 1;\n        } while (*(arg4 + iVar4 * 2) != 0);\n        iVar3 = iVar4 * 2 + 2;\n    }\n    iVar4 = 0x1400373c8;\n    if (arg4 != 0) {\n        iVar4 = arg4;\n    }\n    (*_sym.imp.ADVAPI32.dll_TraceMessage)(arg1, 0x2b, MessageGuid, noname_1, iVar4, iVar3, iVar2, iVar1, 0);\n    return;\n}\n",
        "token_count": 343
    },
    "14000370": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140003700(ulong arg1, ulong noname_1, ulong noname_2, ulong arg4)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    uint auStackX32 [2];\n    int64_t in_stack_00000028;\n    \n    if (in_stack_00000028 == 0) {\n        iVar1 = 10;\n    }\n    else {\n        iVar1 = -1;\n        do {\n            iVar1 = iVar1 + 1;\n        } while (*(in_stack_00000028 + iVar1 * 2) != 0);\n        iVar1 = iVar1 * 2 + 2;\n    }\n    iVar2 = 0x1400373c8;\n    if (in_stack_00000028 != 0) {\n        iVar2 = in_stack_00000028;\n    }\n    auStackX32[0] = arg4;\n    (*_sym.imp.ADVAPI32.dll_TraceMessage)(arg1, 0x2b, 0x1400374d8, 0x12, auStackX32, 4, iVar2, iVar1, 0);\n    return;\n}\n",
        "token_count": 257
    },
    "14000378": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000378c(ulong arg1, ulong noname_1, ulong noname_2, ulong arg4)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    ulong uStackX32;\n    int64_t in_stack_00000038;\n    \n    if (in_stack_00000038 == 0) {\n        iVar1 = 10;\n    }\n    else {\n        iVar1 = -1;\n        do {\n            iVar1 = iVar1 + 1;\n        } while (*(in_stack_00000038 + iVar1 * 2) != 0);\n        iVar1 = iVar1 * 2 + 2;\n    }\n    iVar2 = 0x1400373c8;\n    if (in_stack_00000038 != 0) {\n        iVar2 = in_stack_00000038;\n    }\n    uStackX32 = arg4;\n    (*_sym.imp.ADVAPI32.dll_TraceMessage)\n              (arg1, 0x2b, 0x1400374d8, 10, &uStackX32, 8, &stack0x00000028, 4, &stack0x00000030, 4, iVar2, iVar1, 0);\n    return;\n}\n",
        "token_count": 276
    },
    "14000474": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t fcn.140004740(int64_t *arg1, ulong arg2)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.14002d9a8(arg2, 0x140037fc8);\n    *arg1 = iVar1;\n    return ~-(iVar1 != 0) & 0x8007000e;\n}\n",
        "token_count": 82
    },
    "14000477": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t fcn.140004770(int64_t *arg1)\n\n{\n    ulong uVar1;\n    int64_t iVar2;\n    uint64_t in_RDX;\n    \n    uVar1 = SUB168(ZEXT816(2) * ZEXT816(in_RDX), 0);\n    if (SUB168(ZEXT816(2) * ZEXT816(in_RDX) >> 0x40, 0) != 0) {\n        uVar1 = 0xffffffffffffffff;\n    }\n    iVar2 = fcn.14002d9a8(uVar1, 0x140037fc8);\n    *arg1 = iVar2;\n    return ~-(iVar2 != 0) & 0x8007000e;\n}\n",
        "token_count": 162
    },
    "14000493": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong * fcn.140004934(ulong *arg1, int64_t arg2)\n\n{\n    bool bVar1;\n    int64_t iVar2;\n    ulong *puVar3;\n    uint64_t uVar4;\n    ulong in_R8;\n    \n    if (arg1[2] == 0) {\n        uVar4 = 0xffffffffffffffff;\n        do {\n            uVar4 = uVar4 + 1;\n        } while (*(arg2 + uVar4 * 2) != 0);\n        if (uVar4 < arg1[3] || uVar4 == arg1[3]) {\n            puVar3 = arg1;\n            if (7 < arg1[3]) {\n                puVar3 = *arg1;\n            }\n            arg1[2] = uVar4;\n            fcn.14001a740(puVar3, arg2, uVar4 * 2);\n            *(uVar4 * 2 + puVar3) = 0;\n        }\n        else {\n            fcn.140004c4c(arg1, uVar4, in_R8, arg2);\n        }\n    }\n    if (arg1[6] != 0) {\n        puVar3 = arg1 + 4;\n        uVar4 = arg1[6];\n        if (uVar4 < arg1[7]) {\n            arg1[6] = uVar4 + 1;\n            if (7 < arg1[7]) {\n                puVar3 = *puVar3;\n            }\n            *(puVar3 + uVar4 * 2) = 0x20;\n        }\n        else {\n            fcn.140004b24(puVar3);\n        }\n    }\n    iVar2 = fcn.14001ab18(arg2);\n    if (iVar2 != 0) {\n        iVar2 = fcn.14001ab18(arg2);\n        if (iVar2 == 0) {\n            puVar3 = arg1 + 4;\n            bVar1 = true;\n            uVar4 = arg1[6];\n            if (uVar4 < arg1[7]) {\n                arg1[6] = uVar4 + 1;\n                if (7 < arg1[7]) {\n                    puVar3 = *puVar3;\n                }\n                *(puVar3 + uVar4 * 2) = 0x22;\n            }\n            else {\n                fcn.140004b24(puVar3);\n            }\n            goto code_r0x000140004a34;\n        }\n    }\n    bVar1 = false;\ncode_r0x000140004a34:\n    puVar3 = arg1 + 4;\n    fcn.140004a94(puVar3, arg2);\n    if (bVar1) {\n        uVar4 = arg1[6];\n        if (uVar4 < arg1[7]) {\n            arg1[6] = uVar4 + 1;\n            if (7 < arg1[7]) {\n                puVar3 = *puVar3;\n            }\n            *(puVar3 + uVar4 * 2) = 0x22;\n        }\n        else {\n            fcn.140004b24(puVar3);\n        }\n    }\n    return arg1;\n}\n",
        "token_count": 714
    },
    "140004e8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint64_t fcn.140004e84(uint64_t arg1)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    uint64_t uVar4;\n    \n    if (arg1 < 0x1000) {\n        if (arg1 != 0) {\n            do {\n                uVar4 = fcn.14001eb6c(arg1);\n                if (uVar4 != 0) {\n                    return uVar4;\n                }\n                iVar2 = fcn.140017210(arg1);\n            } while (iVar2 != 0);\n            if (arg1 == 0xffffffffffffffff) {\n                fcn.140004888();\n                pcVar1 = swi(3);\n                uVar4 = (*pcVar1)();\n                return uVar4;\n            }\n            fcn.1400193a8();\n            pcVar1 = swi(3);\n            uVar4 = (*pcVar1)();\n            return uVar4;\n        }\n        uVar4 = 0;\n    }\n    else {\n        if (arg1 + 0x27 <= arg1) {\n            fcn.140004888();\n            pcVar1 = swi(3);\n            uVar4 = (*pcVar1)();\n            return uVar4;\n        }\n        iVar3 = fcn.1400187f8(arg1 + 0x27);\n        if (iVar3 == 0) {\n            fcn.140014080();\n            pcVar1 = swi(3);\n            uVar4 = (*pcVar1)();\n            return uVar4;\n        }\n        uVar4 = iVar3 + 0x27U & 0xffffffffffffffe0;\n        *(uVar4 - 8) = iVar3;\n    }\n    return uVar4;\n}\n",
        "token_count": 391
    },
    "1400187f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400187f8(int64_t arg1)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    int32_t iVar3;\n    \n    do {\n        iVar2 = fcn.14001eb6c(arg1);\n        if (iVar2 != 0) {\n            return;\n        }\n        iVar3 = fcn.140017210(arg1);\n    } while (iVar3 != 0);\n    if (arg1 == -1) {\n        fcn.140004888();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    fcn.1400193a8();\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 164
    },
    "140004ed": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.140004edc(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    ulong *puVar2;\n    ulong uStackX32;\n    \n    uStackX32 = arg4;\n    puVar2 = fcn.140003408();\n    iVar1 = fcn.14002319c(*puVar2, arg1, arg2, arg3, 0, &uStackX32);\n    if (iVar1 < 0) {\n        iVar1 = -1;\n    }\n    return iVar1;\n}\n",
        "token_count": 131
    },
    "140004f3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140004f30(uchar *arg1, int64_t arg2, ulong arg3, ulong arg4)\n\n{\n    uint64_t arg3_00;\n    int32_t iVar1;\n    uint64_t *puVar2;\n    ulong uVar3;\n    \n    if (arg2 - 1U < 0x7fffffff) {\n        uVar3 = 0;\n        arg3_00 = arg2 - 1;\n        puVar2 = fcn.140003408();\n        iVar1 = fcn.140022f48(*puVar2 | 1, arg1, arg3_00, arg3);\n        if (iVar1 < 0) {\n            iVar1 = -1;\n        }\n        if ((iVar1 < 0) || (arg3_00 < iVar1)) {\n            arg1[arg3_00] = 0;\n            uVar3 = 0x8007007a;\n        }\n        else if (iVar1 == arg3_00) {\n            arg1[arg3_00] = 0;\n        }\n    }\n    else {\n        uVar3 = 0x80070057;\n        if (arg2 != 0) {\n            *arg1 = 0;\n        }\n    }\n    return uVar3;\n}\n",
        "token_count": 280
    },
    "14000548": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140005484(int64_t *arg1)\n\n{\n    if (arg1[4] != 0) {\n        fcn.1400187b4(arg1[4]);\n    }\n    if (arg1[3] != 0) {\n        fcn.1400187b4(arg1[3]);\n    }\n    if (arg1[2] != 0) {\n        fcn.1400187b4(arg1[2]);\n    }\n    if (arg1[1] != 0) {\n        fcn.1400187b4(arg1[1]);\n    }\n    if (*arg1 != 0) {\n        (**0x140031a58)(*arg1, 1);\n    }\n    return;\n}\n",
        "token_count": 163
    },
    "1400065a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400065a4(ulong arg1, ulong noname_1, ulong noname_2, int64_t arg4)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    \n    if (arg4 == 0) {\n        iVar1 = 10;\n    }\n    else {\n        iVar1 = -1;\n        do {\n            iVar1 = iVar1 + 1;\n        } while (*(arg4 + iVar1 * 2) != 0);\n        iVar1 = iVar1 * 2 + 2;\n    }\n    iVar2 = 0x1400373c8;\n    if (arg4 != 0) {\n        iVar2 = arg4;\n    }\n    (*_sym.imp.ADVAPI32.dll_TraceMessage)(arg1, 0x2b, 0x1400376d8, 0x1c, iVar2, iVar1, &stack0x00000028, 8, 0);\n    return;\n}\n",
        "token_count": 217
    },
    "14000662": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140006628(ulong LoggerHandle, ulong noname_1, ulong noname_2, ulong arg4)\n\n{\n    ulong uStackX32;\n    \n    uStackX32 = arg4;\n    (*_sym.imp.ADVAPI32.dll_TraceMessage)\n              (LoggerHandle, 0x2b, 0x1400376d8, 0x21, &uStackX32, 8, &stack0x00000028, 8, &stack0x00000030, 4, 0);\n    return;\n}\n",
        "token_count": 124
    },
    "140006c2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint64_t fcn.140006c28(ulong hProcess)\n\n{\n    int32_t iVar1;\n    uint64_t uStackX16;\n    ulong uStackX24;\n    ulong uStackX32;\n    ulong auStack24 [3];\n    \n    uStackX16 = 0;\n    auStack24[0] = 0;\n    uStackX32 = 0;\n    uStackX24 = 0;\n    iVar1 = (*_sym.imp.KERNEL32.dll_GetProcessTimes)(hProcess, &uStackX16, auStack24, &uStackX32, &uStackX24);\n    return -(iVar1 != 0) & uStackX16;\n}\n",
        "token_count": 151
    },
    "1400084d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400084d4(ulong LoggerHandle, ulong noname_1, ulong MessageGuid)\n\n{\n    (*_sym.imp.ADVAPI32.dll_TraceMessage)(LoggerHandle, 0x2b, MessageGuid, noname_1, 0);\n    return;\n}\n",
        "token_count": 64
    },
    "1400084f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400084f4(ulong arg1, ulong noname_1, ulong noname_2, ulong arg4)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    uint auStackX32 [2];\n    int64_t in_stack_00000028;\n    \n    if (in_stack_00000028 == 0) {\n        iVar1 = 10;\n    }\n    else {\n        iVar1 = -1;\n        do {\n            iVar1 = iVar1 + 1;\n        } while (*(in_stack_00000028 + iVar1 * 2) != 0);\n        iVar1 = iVar1 * 2 + 2;\n    }\n    iVar2 = 0x1400373c8;\n    if (in_stack_00000028 != 0) {\n        iVar2 = in_stack_00000028;\n    }\n    auStackX32[0] = arg4;\n    (*_sym.imp.ADVAPI32.dll_TraceMessage)(arg1, 0x2b, 0x140037758, 0xb, auStackX32, 4, iVar2, iVar1, 0);\n    return;\n}\n",
        "token_count": 256
    },
    "140008af": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong * fcn.140008afc(ulong *arg1, ulong arg2)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    ulong *puVar4;\n    ushort in_R8W;\n    ushort in_R9W;\n    uint uVar5;\n    ulong uStack16;\n    \n    *arg1 = 0xffffffffffffffff;\n    uVar5 = 1;\n    uVar2 = fcn.14000b340(arg1, arg2, 0xc0010000, 0);\n    if (-1 < uVar2) {\n        uStack16 = 0;\n        iVar3 = (*_sym.imp.KERNEL32.dll_DosDateTimeToFileTime)(in_R8W, in_R9W, &uStack16);\n        if (iVar3 != 0) {\n            (*_sym.imp.KERNEL32.dll_SetFileTime)(*arg1, &uStack16, 0, 0, uVar5);\n        }\n        if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 4) != 0)) {\n            fcn.140006544(*(*0x14003e208 + 0x10), 0xf, 0x140037758, arg2);\n        }\n        return arg1;\n    }\n    fcn.14000bf14(uVar2);\n    pcVar1 = swi(3);\n    puVar4 = (*pcVar1)();\n    return puVar4;\n}\n",
        "token_count": 342
    },
    "14000920": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nulong * fcn.140009208(ulong *arg1, int16_t *arg2)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    ulong *puVar3;\n    uchar uVar4;\n    uchar auStack56 [16];\n    uchar auStack40 [16];\n    uchar auStack24 [16];\n    \n    uVar4 = 0;\n    if (*arg2 == 0) {\n        auStack56 = ZEXT816(0);\n        auStack40 = ZEXT816(0);\n        auStack24 = ZEXT816(0);\n        (*_sym.imp.KERNEL32.dll_VirtualQuery)(0x1400091d0, auStack56, 0x30);\n        *arg1 = auStack56._8_8_;\n    }\n    else {\n        if ((*0x14003e208 != 0x14003e208) && ((*(*0x14003e208 + 0x1c) & 4) != 0)) {\n            fcn.140006544(*(*0x14003e208 + 0x10), 0x1c, 0x140037758, arg2);\n        }\n        uVar2 = fcn.14000b654(arg1, arg2, 2);\n        if (uVar2 < 0) {\n            fcn.14000bf14(uVar2);\n            pcVar1 = swi(3);\n            puVar3 = (*pcVar1)();\n            return puVar3;\n        }\n        uVar4 = 1;\n    }\n    *(arg1 + 1) = uVar4;\n    return arg1;\n}\n",
        "token_count": 368
    },
    "1400167b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.1400167b4(uint64_t arg1)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    uint *puVar3;\n    \n    if (arg1 < 0xffffffffffffffe1) {\n        if (arg1 == 0) {\n            arg1 = 1;\n        }\n        do {\n            iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(*0x14003f668, 0, arg1);\n            if (iVar2 != 0) {\n                return iVar2;\n            }\n            iVar1 = fcn.140017280();\n        } while ((iVar1 != 0) && (iVar1 = fcn.140017210(arg1),  iVar1 != 0));\n    }\n    puVar3 = fcn.1400142cc();\n    *puVar3 = 0xc;\n    return 0;\n}\n",
        "token_count": 196
    },
    "140014db": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140014db4(int64_t lpMem)\n\n{\n    uint *puVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint uVar4;\n    \n    if ((lpMem != 0) && (iVar2 = (*_sym.imp.KERNEL32.dll_HeapFree)(*0x14003f668, 0, lpMem),  iVar2 == 0)) {\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        uVar4 = fcn.1400141f8(uVar3);\n        puVar1 = fcn.1400142cc();\n        *puVar1 = uVar4;\n    }\n    return;\n}\n",
        "token_count": 154
    },
    "14000a87": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000a870(ulong *arg1)\n\n{\n    ulong *arg1_00;\n    ulong *puVar1;\n    \n    arg1_00 = *arg1;\n    *arg1 = 0;\n    while (arg1_00 != NULL) {\n        puVar1 = *arg1_00;\n        if (arg1_00[5] != -1) {\n            (*_sym.imp.KERNEL32.dll_CloseHandle)();\n        }\n        if (7 < arg1_00[4]) {\n            fcn.140003174(arg1_00[1], arg1_00[4] * 2 + 2);\n        }\n        arg1_00[3] = 0;\n        arg1_00[4] = 7;\n        *(arg1_00 + 1) = 0;\n        fcn.140003174(arg1_00, 0x30);\n        arg1_00 = puVar1;\n    }\n    return;\n}\n",
        "token_count": 215
    },
    "14000ad6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000ad6c(int64_t *arg1)\n\n{\n    ulong uVar1;\n    \n    uVar1 = *0x14003e260;\n    if (*arg1 == 0) {\n        *0x14003e240 = 0;\n        *0x14003e260 = 0;\n        (*_sym.imp.ADVAPI32.dll_EventUnregister)(uVar1);\n    }\n    else {\n        (**0x140031a58)(*arg1, 0x14003e240);\n    }\n    if (arg1[4] != 0) {\n        fcn.1400187b4(arg1[4]);\n    }\n    if (arg1[3] != 0) {\n        fcn.1400187b4(arg1[3]);\n    }\n    if (arg1[2] != 0) {\n        fcn.1400187b4(arg1[2]);\n    }\n    if (arg1[1] != 0) {\n        fcn.1400187b4(arg1[1]);\n    }\n    if (*arg1 != 0) {\n        (**0x140031a58)(*arg1, 1);\n    }\n    return;\n}\n",
        "token_count": 264
    },
    "14000aea": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000aea0(char param_1)\n\n{\n    if (*0x140040728 != 0) {\n        fcn.14000ad6c(*0x140040728);\n        *0x140040728 = 0;\n    }\n    fcn.14000af3c();\n    if ((param_1 == '\\0') && (*0x140040730 != 0)) {\n        if (*(*0x140040730 + 0xc) != 0xf12192e) {\n            (*_sym.imp.KERNEL32.dll_DeleteCriticalSection)();\n        }\n        *0x140040730 = 0;\n    }\n    return;\n}\n",
        "token_count": 143
    },
    "14000aef": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000aef4(void)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.14000c2a8(0x140040740, L\"advapi32.dll\");\n    if (-1 < iVar1) {\n        iVar1 = fcn.14000b704(0x140040738, *0x140040740, \"EventSetInformation\");\n        if (iVar1 < 0) {\n            fcn.14000af3c();\n        }\n    }\n    return;\n}\n",
        "token_count": 115
    },
    "14000af3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000af3c(void)\n\n{\n    *0x140040738 = 0;\n    if (*0x140040740 != 0) {\n        (*_sym.imp.KERNEL32.dll_FreeLibrary)();\n        *0x140040740 = 0;\n    }\n    return;\n}\n",
        "token_count": 66
    },
    "14000af9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000af9c(ulong LoggerHandle, ulong noname_1, ulong noname_2, ulong arg4)\n\n{\n    uint auStackX32 [2];\n    \n    auStackX32[0] = arg4;\n    (*_sym.imp.ADVAPI32.dll_TraceMessage)\n              (LoggerHandle, 0x2b, 0x140037ab8, noname_1, auStackX32, 4, &stack0x00000028, 4, 0);\n    return;\n}\n",
        "token_count": 118
    },
    "14000afe": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000afe8(ulong arg1, ulong noname_1, ulong noname_2, int64_t arg4)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    \n    if (arg4 == 0) {\n        iVar1 = 10;\n    }\n    else {\n        iVar1 = -1;\n        do {\n            iVar1 = iVar1 + 1;\n        } while (*(arg4 + iVar1 * 2) != 0);\n        iVar1 = iVar1 * 2 + 2;\n    }\n    iVar2 = 0x1400373c8;\n    if (arg4 != 0) {\n        iVar2 = arg4;\n    }\n    (*_sym.imp.ADVAPI32.dll_TraceMessage)\n              (arg1, 0x2b, 0x140037ab8, 0x1b, iVar2, iVar1, &stack0x00000028, 4, &stack0x00000030, 4, 0);\n    return;\n}\n",
        "token_count": 228
    },
    "14000b07": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000b078(ulong arg1, ulong noname_1, ulong noname_2, int64_t arg4)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    int64_t in_stack_00000028;\n    \n    iVar1 = -1;\n    iVar4 = 10;\n    if (in_stack_00000028 == 0) {\n        iVar3 = 10;\n    }\n    else {\n        iVar3 = -1;\n        do {\n            iVar3 = iVar3 + 1;\n        } while (*(in_stack_00000028 + iVar3 * 2) != 0);\n        iVar3 = iVar3 * 2 + 2;\n    }\n    iVar2 = 0x1400373c8;\n    if (in_stack_00000028 != 0) {\n        iVar2 = in_stack_00000028;\n    }\n    if (arg4 != 0) {\n        do {\n            iVar1 = iVar1 + 1;\n        } while (*(arg4 + iVar1 * 2) != 0);\n        iVar4 = iVar1 * 2 + 2;\n    }\n    iVar1 = 0x1400373c8;\n    if (arg4 != 0) {\n        iVar1 = arg4;\n    }\n    (*_sym.imp.ADVAPI32.dll_TraceMessage)\n              (arg1, 0x2b, 0x140037ab8, noname_1, iVar1, iVar4, iVar2, iVar3, &stack0x00000030, 4, 0);\n    return;\n}\n",
        "token_count": 364
    },
    "14000b14": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000b148(ulong arg1, ulong noname_1, ulong MessageGuid, int64_t arg4)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    \n    if (arg4 == 0) {\n        iVar1 = 10;\n    }\n    else {\n        iVar1 = -1;\n        do {\n            iVar1 = iVar1 + 1;\n        } while (*(arg4 + iVar1 * 2) != 0);\n        iVar1 = iVar1 * 2 + 2;\n    }\n    iVar2 = 0x1400373c8;\n    if (arg4 != 0) {\n        iVar2 = arg4;\n    }\n    (*_sym.imp.ADVAPI32.dll_TraceMessage)(arg1, 0x2b, MessageGuid, noname_1, iVar2, iVar1, &stack0x00000028, 4, 0);\n    return;\n}\n",
        "token_count": 207
    },
    "14000b1c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000b1c0(ulong LoggerHandle, ulong noname_1, ulong noname_2, ulong arg4)\n\n{\n    uint auStackX32 [2];\n    \n    auStackX32[0] = arg4;\n    (*_sym.imp.ADVAPI32.dll_TraceMessage)\n              (LoggerHandle, 0x2b, 0x140037ab8, noname_1, auStackX32, 4, &stack0x00000028, 4, 0);\n    return;\n}\n",
        "token_count": 119
    },
    "14000b98": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000b984(ulong arg1)\n\n{\n    int64_t arg1_00;\n    int32_t iVar1;\n    int64_t iVar2;\n    uchar auStack664 [32];\n    int64_t aiStack632 [2];\n    uint8_t auStack616 [44];\n    int16_t iStack572;\n    int16_t iStack570;\n    int16_t iStack568;\n    uint64_t uStack24;\n    \n    uStack24 = *0x14003ef38 ^ auStack664;\n    aiStack632[0] = 0;\n    iVar1 = fcn.14000e5b0(aiStack632, 0x140037a98, arg1, 0x140037488);\n    if (iVar1 < 0) {\n        if (aiStack632[0] != 0) {\n            fcn.1400187b4(aiStack632[0]);\n        }\n    }\n    else {\n        fcn.14001a0c0(auStack616, 0, 0x250);\n        arg1_00 = aiStack632[0];\n        iVar2 = (*_sym.imp.KERNEL32.dll_FindFirstFileW)(aiStack632[0], auStack616);\n        if ((iVar2 != -1) || (iVar1 = fcn.14000e908(),  iVar2 = 0,  -1 < iVar1)) {\n            do {\n                if ((((auStack616[0] & 0x10) == 0) || (iStack572 != 0x2e)) ||\n                   ((iStack570 != 0 && ((iStack570 != 0x2e || (iStack568 != 0)))))) {\n                    if (iVar2 - 1U < 0xfffffffffffffffe) {\n                        (*_sym.imp.KERNEL32.dll_FindClose)(iVar2);\n                    }\n                    if (arg1_00 != 0) {\n                        fcn.1400187b4(arg1_00);\n                    }\n                    goto code_r0x00014000bad6;\n                }\n                iVar1 = (*_sym.imp.KERNEL32.dll_FindNextFileW)(iVar2, auStack616);\n            } while ((iVar1 != 0) || ((iVar1 = fcn.14000e908(),  iVar1 != -0x7ff8ffee && (-1 < iVar1))));\n            if (iVar2 - 1U < 0xfffffffffffffffe) {\n                (*_sym.imp.KERNEL32.dll_FindClose)(iVar2);\n            }\n        }\n        if (arg1_00 != 0) {\n            fcn.1400187b4(arg1_00);\n        }\n    }\ncode_r0x00014000bad6:\n    fcn.140018790(uStack24 ^ auStack664);\n    return;\n}\n",
        "token_count": 608
    },
    "14000be5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** fcn.14000be5c(code **arg1, ulong arg2)\n\n{\n    *(arg1 + 1) = ZEXT816(0);\n    *(arg1 + 5) = arg2;\n    *arg1 = vtable.CommonUtil::CHResultExceptionImpl.0;\n    fcn.140004f30(arg1 + 3, 0xe, 0x140037ac8, arg2);\n    return arg1;\n}\n",
        "token_count": 100
    },
    "14000c07": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.14000c07c(ulong arg1)\n\n{\n    fcn.14001acb8(0, 0);\n    return arg1;\n}\n",
        "token_count": 36
    },
    "14000c2a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.14000c2a8(ulong arg1, ulong arg2)\n\n{\n    int64_t arg1_00;\n    int32_t iVar1;\n    int64_t arg1_01;\n    ulong in_R9;\n    int64_t iStackX24;\n    int64_t iStackX32;\n    ulong var_30h;\n    ulong var_38h;\n    \n    iStackX24 = 0;\n    iVar1 = fcn.14000c220(_sym.imp.KERNEL32.dll_GetSystemDirectoryW, &iStackX24, arg2);\n    arg1_01 = iStackX24;\n    if (iVar1 < 0) {\ncode_r0x00014000c2e1:\n        if (iStackX24 == 0) {\n            return iVar1;\n        }\n        fcn.1400187b4(iStackX24);\n        return iVar1;\n    }\n    iVar1 = fcn.14000b894(iStackX24);\n    if (iVar1 < 0) {\n        iStackX32 = 0;\n        iVar1 = fcn.14000e5b0(&iStackX32, L\"forwarders\\\\%ls\", arg2, in_R9);\n        if (iVar1 < 0) {\n            if (iStackX32 != 0) {\n                fcn.1400187b4(iStackX32);\n            }\n            goto code_r0x00014000c3d4;\n        }\n        if (arg1_01 != 0) {\n            fcn.1400187b4(arg1_01);\n            iStackX24 = 0;\n        }\n        arg1_00 = iStackX32;\n        iVar1 = fcn.14000c220(_sym.imp.KERNEL32.dll_GetSystemDirectoryW, &iStackX24, iStackX32);\n        arg1_01 = iStackX24;\n        if (iVar1 < 0) {\n            if (arg1_00 != 0) {\n                fcn.1400187b4(arg1_00);\n            }\n            goto code_r0x00014000c2e1;\n        }\n        iVar1 = fcn.14000b894(iStackX24);\n        if (iVar1 < 0) {\n            if (arg1_00 != 0) {\n                fcn.1400187b4(arg1_00);\n            }\n            if (arg1_01 == 0) {\n                return iVar1;\n            }\n            fcn.1400187b4(arg1_01);\n            return iVar1;\n        }\n        if (arg1_00 != 0) {\n            fcn.1400187b4(arg1_00);\n        }\n    }\n    iVar1 = fcn.14000b654(arg1, arg1_01, 8);\ncode_r0x00014000c3d4:\n    if (arg1_01 != 0) {\n        fcn.1400187b4(arg1_01);\n    }\n    return iVar1;\n}\n",
        "token_count": 663
    },
    "14000ca5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t fcn.14000ca54(int64_t *arg1, ulong arg2)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.14002d9b0(arg2);\n    *arg1 = iVar1;\n    return ~-(iVar1 != 0) & 0x8007000e;\n}\n",
        "token_count": 75
    },
    "14000ca8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14000ca84(ulong *arg1, int64_t arg2)\n\n{\n    ulong uVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    \n    iVar2 = -1;\n    do {\n        iVar3 = iVar2;\n        iVar2 = iVar3 + 1;\n    } while (*(arg2 + iVar2 * 2) != 0);\n    uVar1 = fcn.140004770(arg1);\n    if (-1 < uVar1) {\n        fcn.14001a740(*arg1, arg2, (iVar3 + 2) * 2);\n        uVar1 = 0;\n    }\n    return uVar1;\n}\n",
        "token_count": 154
    },
    "14000cf2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000cf24(code **arg1)\n\n{\n    if (0x7 < arg1[9]) {\n        fcn.140003174(arg1[6], arg1[9] * 2 + 2);\n    }\n    arg1[9] = 0x7;\n    arg1[8] = NULL;\n    *(arg1 + 6) = 0;\n    if (0x7 < arg1[5]) {\n        fcn.140003174(arg1[2], arg1[5] * 2 + 2);\n    }\n    arg1[4] = NULL;\n    arg1[5] = 0x7;\n    *(arg1 + 2) = 0;\n    *arg1 = vtable.CommonUtil::CRefObject.0;\n    return;\n}\n",
        "token_count": 179
    },
    "14000d07": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint16_t * fcn.14000d074(int16_t *arg1)\n\n{\n    int16_t iVar1;\n    int32_t iVar2;\n    char in_DL;\n    \n    iVar1 = *arg1;\n    while( true ) {\n        if (iVar1 == 0) {\n            return arg1;\n        }\n        iVar2 = fcn.1400235ec();\n        if (in_DL != (iVar2 != 0)) break;\n        arg1 = arg1 + 1;\n        iVar1 = *arg1;\n    }\n    return arg1;\n}\n",
        "token_count": 124
    },
    "14000d0c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14000d0c0(ushort *arg1, int16_t **arg2, int16_t **arg3)\n\n{\n    ushort *puVar1;\n    ushort *puVar2;\n    int32_t iVar3;\n    int64_t iVar4;\n    int16_t *arg1_00;\n    ulong uVar5;\n    int16_t *piVar6;\n    \n    iVar4 = -1;\n    do {\n        iVar4 = iVar4 + 1;\n    } while (arg1[iVar4] != 0);\n    arg1_00 = fcn.14000d074(arg1);\n    if (*arg1_00 == 0) {\n        uVar5 = 0x80070667;\n    }\n    else {\n        piVar6 = fcn.14000d074(arg1_00);\n        if (*piVar6 == 0) {\n            *arg2 = arg1_00;\n            *arg3 = piVar6;\n        }\n        else {\n            *piVar6 = 0;\n            piVar6 = fcn.14000d074(piVar6 + 1);\n            *arg2 = arg1_00;\n            *arg3 = piVar6;\n            puVar2 = arg1 + iVar4;\n            do {\n                puVar1 = puVar2;\n                if (puVar1 == arg1) break;\n                iVar3 = fcn.1400235ec(puVar1[-1]);\n                puVar2 = puVar1 + -1;\n            } while (iVar3 != 0);\n            *puVar1 = 0;\n        }\n        uVar5 = 0;\n    }\n    return uVar5;\n}\n",
        "token_count": 366
    },
    "14000d17": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_bp_10h\n// WARNING: Variable defined which should be unmapped: var_bp_18h\n// WARNING: Variable defined which should be unmapped: var_20h\n\nint16_t * fcn.14000d170(ulong arg1, ulong arg2, int64_t arg3)\n\n{\n    int16_t *arg1_00;\n    int16_t iVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    int16_t *piVar4;\n    int64_t iVar5;\n    int64_t iVar6;\n    int16_t *arg1_01;\n    int16_t *piVar7;\n    int16_t *arg1_02;\n    int64_t iStackX24;\n    int16_t *piStackX32;\n    ulong var_48h;\n    int16_t *piStack72;\n    int16_t *piStack64;\n    ulong auStack56 [2];\n    ulong var_20h;\n    ulong var_bp_18h;\n    ulong var_bp_10h;\n    \n    iStackX24 = arg3;\n    piVar4 = fcn.14000b894(arg2);\n    piVar7 = NULL;\n    if (-1 < piVar4) {\n        iStackX24 = 0;\n        uVar2 = fcn.14000b570(&iStackX24, arg2);\n        piVar4 = uVar2;\n        if (-1 < uVar2) {\n            piStack72 = NULL;\n            uVar2 = fcn.140004770(&piStack72);\n            arg1_00 = piStack72;\n            piVar4 = uVar2;\n            if (-1 < uVar2) {\n                iVar5 = (**0x140031a58)(arg1);\ncode_r0x00014000d210:\n                iVar6 = fcn.14002413c(arg1_00, 0x800, iStackX24);\n                if (iVar6 != 0) {\n                    iVar1 = *arg1_00;\n                    piVar4 = arg1_00;\n                    while ((iVar1 != 0 && (iVar3 = fcn.1400235ec(iVar1),  iVar3 != 0))) {\n                        piVar4 = piVar4 + 1;\n                        iVar1 = *piVar4;\n                    }\n                    if ((*piVar4 != 0) && (*piVar4 != 0x23)) {\n                        piStackX32 = NULL;\n                        arg1_01 = piVar7;\n                        arg1_02 = arg1_00;\n                        if ((iVar5 == 0) && (iVar6 = fcn.14001ab18(arg1_00),  iVar6 != 0)) {\n                            uVar2 = fcn.14000bccc(&piStackX32, arg1_00);\n                            piVar4 = uVar2;\n                            arg1_01 = piStackX32;\n                            arg1_02 = piStackX32;\n                            if (-1 < uVar2) goto code_r0x00014000d294;\n                        }\n                        else {\ncode_r0x00014000d294:\n                            piStack64 = NULL;\n                            auStack56[0] = 0;\n                            uVar2 = fcn.14000d0c0(arg1_02, &piStack64, auStack56);\n                            piVar4 = uVar2;\n                            if (-1 < uVar2) {\n                                piVar4 = piStack64;\n                                if ((*piStack64 - 0x2dU & 0xfffd) == 0) {\n                                    piVar4 = piStack64 + 1;\n                                }\n                                uVar2 = fcn.14000cc70(arg1, piVar4, auStack56[0]);\n                                piVar4 = uVar2;\n                                if (uVar2 == 0x800700b7) {\n                                    piVar4 = 0x80070667;\n                                }\n                                else if (-1 < uVar2) {\n                                    if (arg1_01 != NULL) {\n                                        fcn.1400187b4(arg1_01);\n                                    }\n                                    goto code_r0x00014000d210;\n                                }\n                            }\n                        }\n                        if (arg1_01 != NULL) {\n                            fcn.1400187b4(arg1_01);\n                        }\n                        goto code_r0x00014000d328;\n                    }\n                    goto code_r0x00014000d210;\n                }\n                iVar3 = fcn.140024144(iStackX24);\n                piVar4 = 0x80004005;\n                if (iVar3 != 0) {\n                    piVar4 = piVar7;\n                }\n            }\ncode_r0x00014000d328:\n            if (arg1_00 != NULL) {\n                fcn.1400187b4(arg1_00);\n            }\n        }\n        if (iStackX24 != 0) {\n            fcn.140023ac4(iStackX24);\n        }\n    }\n    return piVar4;\n}\n",
        "token_count": 1102
    },
    "14000d5b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.14000d5b8(ulong arg1, ulong noname_1, int64_t arg3, int64_t arg4)\n\n{\n    int64_t iVar1;\n    int32_t iVar2;\n    int64_t arg4_00;\n    int64_t iStack0000000000000028;\n    \n    iStack0000000000000028 = 0;\n    arg4_00 = arg4;\n    iVar2 = fcn.14000df18(&stack0x00000028);\n    iVar1 = iStack0000000000000028;\n    if (iVar2 < 0) {\n        if (iStack0000000000000028 != 0) {\n            (**0x140031a58)();\n        }\n    }\n    else {\n        *(iStack0000000000000028 + 0x18) = arg4;\n        *(iStack0000000000000028 + 0x10) = arg4;\n        *(iStack0000000000000028 + 0x20) = arg4 + arg3 * 8;\n        iVar2 = fcn.14000d360(arg1, noname_1, iStack0000000000000028, arg4_00);\n        if (iVar1 != 0) {\n            (**0x140031a58)(iVar1);\n        }\n    }\n    return iVar2;\n}\n",
        "token_count": 301
    },
    "14000317": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nuint * fcn.140003174(int64_t arg1, uint64_t arg2)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    uint uVar3;\n    uint *puVar4;\n    int64_t iVar5;\n    \n    iVar5 = arg1;\n    if (0xfff < arg2) {\n        iVar5 = *(arg1 + -8);\n        if (0x1f < (arg1 - iVar5) - 8U) {\n            fcn.140014080(arg1 - iVar5, arg2 + 0x27);\n            pcVar1 = swi(3);\n            puVar4 = (*pcVar1)();\n            return puVar4;\n        }\n    }\n    puVar4 = NULL;\n    if ((iVar5 != 0) && (puVar4 = (*_sym.imp.KERNEL32.dll_HeapFree)(*0x14003f668, 0, iVar5),  puVar4 == 0)) {\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        uVar3 = fcn.1400141f8(uVar2);\n        puVar4 = fcn.1400142cc();\n        *puVar4 = uVar3;\n    }\n    return puVar4;\n}\n",
        "token_count": 279
    },
    "14000da3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x000140003181)\n// WARNING: Removing unreachable block (ram,0x0001400031a2)\n// WARNING: Removing unreachable block (ram,0x000140003196)\n\nuint * fcn.14000da34(int64_t *arg1)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    ulong *puVar3;\n    int64_t iVar4;\n    ulong *puVar5;\n    uint32_t uVar6;\n    uint uVar7;\n    uint *puVar8;\n    ulong unaff_RBX;\n    ulong in_R9;\n    \n    puVar3 = *arg1;\n    *puVar3[1] = 0;\n    puVar3 = *puVar3;\n    while (puVar3 != NULL) {\n        iVar4 = puVar3[3];\n        puVar5 = *puVar3;\n        if (iVar4 != 0) {\n            LOCK();\n            piVar1 = iVar4 + 8;\n            iVar2 = *piVar1;\n            *piVar1 = *piVar1 + -1;\n            if (iVar2 < 2) {\n                (**0x140031a58)(iVar4, 1);\n            }\n        }\n        fcn.140003174(puVar3, 0x20);\n        puVar3 = puVar5;\n    }\n    puVar8 = NULL;\n    if ((*arg1 != 0) &&\n       (puVar8 = (*_sym.imp.KERNEL32.dll_HeapFree)(*0x14003f668, 0, *arg1, in_R9, unaff_RBX),  puVar8 == 0)) {\n        uVar6 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        uVar7 = fcn.1400141f8(uVar6);\n        puVar8 = fcn.1400142cc();\n        *puVar8 = uVar7;\n    }\n    return puVar8;\n}\n",
        "token_count": 437
    },
    "14000df1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14000df18(ulong *arg1)\n\n{\n    code **ppcVar1;\n    ulong uVar2;\n    \n    ppcVar1 = fcn.14002d9b0(0x28);\n    if (ppcVar1 == NULL) {\n        uVar2 = 0x8007000e;\n    }\n    else {\n        *(ppcVar1 + 1) = 0;\n        *ppcVar1 = vtable.CommonUtil::CArgvIter.0;\n        (**0x140031a58)(ppcVar1);\n        *arg1 = ppcVar1;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 154
    },
    "14000df7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14000df7c(uint64_t arg1, int64_t *arg2)\n\n{\n    int64_t iVar1;\n    uint16_t uVar2;\n    uint64_t uVar3;\n    ulong arg3;\n    uint64_t uVar4;\n    uint64_t uStackX8;\n    \n    iVar1 = *arg2;\n    uVar3 = 0xffffffffffffffff;\n    uVar4 = 0;\n    arg3 = 0x2db39507;\n    do {\n        uVar3 = uVar3 + 1;\n    } while (*(iVar1 + uVar3 * 2) != 0);\n    uStackX8 = arg1;\n    if (uVar3 != 0) {\n        do {\n            uVar2 = fcn.1400141f0(*(iVar1 + uVar4 * 2));\n            uStackX8 = uStackX8 & 0xffffffffffff0000 | uVar2;\n            arg3 = fcn.14000fcf8(&uStackX8, 2, arg3);\n            uVar4 = uVar4 + 1;\n        } while (uVar4 < uVar3);\n    }\n    return arg3;\n}\n",
        "token_count": 266
    },
    "14000dff": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "contain loop"
        ],
        "decompiled_code": "\nint64_t ** fcn.14000dff8(int64_t arg1, int64_t **arg2, ulong *arg3, uint64_t arg4)\n\n{\n    int64_t **ppiVar1;\n    int32_t iVar2;\n    ulong arg1_00;\n    int64_t **ppiVar3;\n    \n    arg4 = *(arg1 + 0x30) & arg4;\n    ppiVar3 = *(*(arg1 + 0x18) + 8 + arg4 * 0x10);\n    if (ppiVar3 == *(arg1 + 8)) {\n        *arg2 = *(arg1 + 8);\ncode_r0x00014000e032:\n        arg2[1] = NULL;\n    }\n    else {\n        ppiVar1 = *(*(arg1 + 0x18) + arg4 * 0x10);\n        arg1_00 = *arg3;\n        while( true ) {\n            iVar2 = fcn.14001340c(arg1_00, ppiVar3[2]);\n            if (iVar2 == 0) break;\n            if (ppiVar3 == ppiVar1) {\n                *arg2 = ppiVar3;\n                goto code_r0x00014000e032;\n            }\n            ppiVar3 = ppiVar3[1];\n            arg1_00 = *arg3;\n        }\n        *arg2 = *ppiVar3;\n        arg2[1] = ppiVar3;\n    }\n    return arg2;\n}\n",
        "token_count": 333
    },
    "14000e0b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000e0bc(ulong arg1, uint64_t *arg2, ulong arg3)\n\n{\n    uint64_t uVar1;\n    uint64_t uStackX8;\n    ulong uStackX16;\n    \n    uStackX8 = 0;\n    uStackX16 = 0;\n    (**0x140031a58)(arg1, &uStackX8, &uStackX16);\n    uVar1 = uStackX8;\n    if (uStackX8 <= *arg2) {\n        fcn.14001a740(arg3, uStackX16, uStackX8);\n        *arg2 = uVar1;\n    }\n    return;\n}\n",
        "token_count": 153
    },
    "14000e25": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14000e25c(uint *arg1, ulong arg2)\n\n{\n    uint uVar1;\n    uint uVar2;\n    uint uVar3;\n    uint uVar4;\n    uint uVar5;\n    uint uVar6;\n    uint uVar7;\n    uint uVar8;\n    uint uVar9;\n    ulong uVar10;\n    uint32_t auStackX24 [2];\n    uint *puStackX32;\n    \n    auStackX24[0] = 0;\n    puStackX32 = NULL;\n    uVar10 = fcn.140010218(arg2, arg2, &puStackX32, auStackX24);\n    if (-1 < uVar10) {\n        if (auStackX24[0] < 0x34) {\n            uVar10 = 0x8000ffff;\n        }\n        else {\n            uVar1 = puStackX32[1];\n            uVar2 = puStackX32[2];\n            uVar3 = puStackX32[3];\n            uVar4 = puStackX32[4];\n            uVar5 = puStackX32[5];\n            uVar6 = puStackX32[6];\n            uVar7 = puStackX32[7];\n            *arg1 = *puStackX32;\n            arg1[1] = uVar1;\n            arg1[2] = uVar2;\n            arg1[3] = uVar3;\n            uVar2 = puStackX32[8];\n            uVar3 = puStackX32[9];\n            uVar8 = puStackX32[10];\n            uVar9 = puStackX32[0xb];\n            uVar1 = puStackX32[0xc];\n            arg1[4] = uVar4;\n            arg1[5] = uVar5;\n            arg1[6] = uVar6;\n            arg1[7] = uVar7;\n            arg1[8] = uVar2;\n            arg1[9] = uVar3;\n            arg1[10] = uVar8;\n            arg1[0xb] = uVar9;\n            arg1[0xc] = uVar1;\n            uVar10 = 0;\n        }\n    }\n    return uVar10;\n}\n",
        "token_count": 502
    },
    "14000e5b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000e5b0(ulong noname_0, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    ulong uStackX24;\n    ulong uStackX32;\n    \n    uStackX24 = arg3;\n    uStackX32 = arg4;\n    fcn.14000e4f0(noname_0, arg2, &uStackX24);\n    return;\n}\n",
        "token_count": 92
    },
    "14000e5d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000e5d4(ulong noname_0, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    ulong uStackX24;\n    ulong uStackX32;\n    \n    uStackX24 = arg3;\n    uStackX32 = arg4;\n    fcn.14000e550(noname_0, arg2, &uStackX24);\n    return;\n}\n",
        "token_count": 90
    },
    "14000e90": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t fcn.14000e908(void)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    \n    uVar1 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n    uVar2 = uVar1 & 0xffff | 0x80070000;\n    if (uVar1 < 1) {\n        uVar2 = uVar1;\n    }\n    if (-1 < uVar2) {\n        uVar2 = 0x80004005;\n    }\n    return uVar2;\n}\n",
        "token_count": 120
    },
    "14000e93": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000e934(ulong noname_0, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    return;\n}\n",
        "token_count": 33
    },
    "14000ef2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.14000ef2c(void)\n\n{\n    int64_t iVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    ulong ProcessHandle;\n    uint32_t uVar4;\n    uchar auStack88 [32];\n    ulong uStack56;\n    ulong uStack48;\n    int64_t iStack40;\n    uchar auStack32 [16];\n    uint64_t uStack16;\n    \n    uStack16 = *0x14003ef38 ^ auStack88;\n    iStack40 = 0;\n    auStack32 = ZEXT816(0);\n    iVar2 = (*_sym.imp.ADVAPI32.dll_LookupPrivilegeValueW)(0, L\"SeDebugPrivilege\", auStack32 + 4);\n    if (iVar2 != 0) {\n        auStack32 = CONCAT124(auStack32._4_12_, 1);\n        auStack32 = CONCAT412(2, auStack32._0_12_);\n        ProcessHandle = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)();\n        iVar2 = fcn.14000c0a0(&iStack40, ProcessHandle, 0x28);\n        iVar1 = iStack40;\n        if (iVar2 < 0) {\n            if (iStack40 != 0) {\n                (*_sym.imp.KERNEL32.dll_CloseHandle)();\n            }\n        }\n        else {\n            uStack48 = 0;\n            uStack56 = 0;\n            iVar2 = (*_sym.imp.ADVAPI32.dll_AdjustTokenPrivileges)(iStack40, 0, auStack32, 0);\n            if (iVar2 == 0) {\n                fcn.14000e908();\n            }\n            else {\n                uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                uVar4 = uVar3 & 0xffff | 0x80070000;\n                if (uVar3 < 1) {\n                    uVar4 = uVar3;\n                }\n                if (-1 < uVar4) {\n                    if (iVar1 != 0) {\n                        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar1);\n                    }\n                    goto code_r0x00014000f021;\n                }\n            }\n            if (iVar1 != 0) {\n                (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar1);\n            }\n        }\n    }\ncode_r0x00014000f021:\n    fcn.140018790(uStack16 ^ auStack88);\n    return;\n}\n",
        "token_count": 556
    },
    "14000f03": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t fcn.14000f03c(uint *arg1)\n\n{\n    uint uVar1;\n    uint uVar2;\n    uint uVar3;\n    uint uVar4;\n    uint uVar5;\n    uint uVar6;\n    uint uVar7;\n    uint uVar8;\n    uint uVar9;\n    uint uVar10;\n    uint *puVar11;\n    uint *puVar12;\n    int32_t iVar13;\n    uint uVar14;\n    uint32_t uVar15;\n    uint *puVar16;\n    uint32_t uVar17;\n    int64_t iVar18;\n    uint *puVar19;\n    uint uStack296;\n    uchar auStack292 [284];\n    \n    uStack296 = 0x114;\n    fcn.14001a0c0(auStack292, 0, 0x110);\n    iVar18 = 2;\n    puVar11 = &uStack296;\n    puVar12 = arg1;\n    do {\n        puVar19 = puVar12;\n        puVar16 = puVar11;\n        uVar14 = puVar16[1];\n        uVar1 = puVar16[2];\n        uVar2 = puVar16[3];\n        uVar3 = puVar16[4];\n        uVar4 = puVar16[5];\n        uVar5 = puVar16[6];\n        uVar6 = puVar16[7];\n        *puVar19 = *puVar16;\n        puVar19[1] = uVar14;\n        puVar19[2] = uVar1;\n        puVar19[3] = uVar2;\n        uVar14 = puVar16[8];\n        uVar1 = puVar16[9];\n        uVar2 = puVar16[10];\n        uVar7 = puVar16[0xb];\n        puVar19[4] = uVar3;\n        puVar19[5] = uVar4;\n        puVar19[6] = uVar5;\n        puVar19[7] = uVar6;\n        uVar3 = puVar16[0xc];\n        uVar4 = puVar16[0xd];\n        uVar5 = puVar16[0xe];\n        uVar6 = puVar16[0xf];\n        puVar19[8] = uVar14;\n        puVar19[9] = uVar1;\n        puVar19[10] = uVar2;\n        puVar19[0xb] = uVar7;\n        uVar14 = puVar16[0x10];\n        uVar1 = puVar16[0x11];\n        uVar2 = puVar16[0x12];\n        uVar7 = puVar16[0x13];\n        puVar19[0xc] = uVar3;\n        puVar19[0xd] = uVar4;\n        puVar19[0xe] = uVar5;\n        puVar19[0xf] = uVar6;\n        uVar3 = puVar16[0x14];\n        uVar4 = puVar16[0x15];\n        uVar5 = puVar16[0x16];\n        uVar6 = puVar16[0x17];\n        puVar19[0x10] = uVar14;\n        puVar19[0x11] = uVar1;\n        puVar19[0x12] = uVar2;\n        puVar19[0x13] = uVar7;\n        uVar7 = puVar16[0x18];\n        uVar8 = puVar16[0x19];\n        uVar9 = puVar16[0x1a];\n        uVar10 = puVar16[0x1b];\n        puVar19[0x14] = uVar3;\n        puVar19[0x15] = uVar4;\n        puVar19[0x16] = uVar5;\n        puVar19[0x17] = uVar6;\n        uVar14 = puVar16[0x1c];\n        uVar1 = puVar16[0x1d];\n        uVar2 = puVar16[0x1e];\n        uVar3 = puVar16[0x1f];\n        puVar19[0x18] = uVar7;\n        puVar19[0x19] = uVar8;\n        puVar19[0x1a] = uVar9;\n        puVar19[0x1b] = uVar10;\n        puVar19[0x1c] = uVar14;\n        puVar19[0x1d] = uVar1;\n        puVar19[0x1e] = uVar2;\n        puVar19[0x1f] = uVar3;\n        iVar18 = iVar18 + -1;\n        puVar11 = puVar16 + 0x20;\n        puVar12 = puVar19 + 0x20;\n    } while (iVar18 != 0);\n    uVar1 = puVar16[0x21];\n    uVar2 = puVar16[0x22];\n    uVar3 = puVar16[0x23];\n    uVar14 = puVar16[0x24];\n    puVar19[0x20] = puVar16[0x20];\n    puVar19[0x21] = uVar1;\n    puVar19[0x22] = uVar2;\n    puVar19[0x23] = uVar3;\n    puVar19[0x24] = uVar14;\n    iVar13 = (*_sym.imp.ntdll.dll_RtlGetVersion)(arg1);\n    if (iVar13 < 0) {\n        uVar14 = (*_sym.imp.ntdll.dll_RtlNtStatusToDosError)(iVar13);\n        (*_sym.imp.KERNEL32.dll_SetLastError)(uVar14);\n        uVar15 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        uVar17 = uVar15 & 0xffff | 0x80070000;\n        if (uVar15 < 1) {\n            uVar17 = uVar15;\n        }\n    }\n    else {\n        uVar17 = 0;\n    }\n    return uVar17;\n}\n",
        "token_count": 1369
    },
    "14000f10": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000f10c(ulong LoggerHandle, ulong noname_1, ulong MessageGuid, ulong arg4)\n\n{\n    ulong uStackX32;\n    \n    uStackX32 = arg4;\n    (*_sym.imp.ADVAPI32.dll_TraceMessage)(LoggerHandle, 0x2b, MessageGuid, noname_1, &uStackX32, 8, 0);\n    return;\n}\n",
        "token_count": 94
    },
    "14000f14": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000f140(ulong LoggerHandle, ulong noname_1, ulong noname_2, ulong arg4)\n\n{\n    ulong uStackX32;\n    \n    uStackX32 = arg4;\n    (*_sym.imp.ADVAPI32.dll_TraceMessage)(LoggerHandle, 0x2b, 0x140037f30, 0x29, &uStackX32, 8, 0);\n    return;\n}\n",
        "token_count": 100
    },
    "14000f5b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.14000f5bc(ulong hKey, ulong arg2, ulong arg3)\n\n{\n    int32_t iVar1;\n    int32_t aiStackX32 [2];\n    ulong auStack24 [3];\n    \n    aiStackX32[0] = 0;\n    auStack24[0] = 4;\n    iVar1 = fcn.14000f468(hKey, arg2, aiStackX32, auStack24);\n    if (iVar1 != -0x7ff8ff16) {\n        if (iVar1 < 0) {\n            if (iVar1 != -0x7ff8fffe) {\n                return iVar1;\n            }\n            return -0x7ff8fffe;\n        }\n        if (aiStackX32[0] == 4) {\n            return 0;\n        }\n    }\n    return -0x7ff8f9a3;\n}\n",
        "token_count": 202
    },
    "14001021": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t fcn.140010218(ulong param_1)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    \n    iVar2 = (**0x140031a58)(param_1, 0x140037488);\n    if (iVar2 == 0) {\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        uVar1 = uVar3 & 0xffff | 0x80070000;\n        if (uVar3 < 1) {\n            uVar1 = uVar3;\n        }\n        uVar3 = 0x80070715;\n        if (uVar1 < 0) {\n            uVar3 = uVar1;\n        }\n    }\n    else {\n        uVar3 = 0;\n    }\n    return uVar3;\n}\n",
        "token_count": 188
    },
    "14001072": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140010728(void)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    \n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(0x140040550);\n    iVar3 = *0x1400405a8;\n    if ((*0x1400405a0 != 0) && (*0x1400405a0 = *0x1400405a0 + -1,  *0x1400405a0 == 0)) {\n        *0x1400405a8 = 0;\n        if (iVar3 != 0) {\n            LOCK();\n            piVar1 = iVar3 + 8;\n            iVar2 = *piVar1;\n            *piVar1 = *piVar1 + -1;\n            if (iVar2 < 2) {\n                (**0x140031a58)(iVar3, 1);\n            }\n        }\n    }\n    // WARNING: Could not recover jumptable at 0x000140010799. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(0x140040550);\n    return;\n}\n",
        "token_count": 264
    },
    "1400107a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.1400107a0(int64_t *arg1)\n\n{\n    int64_t iVar1;\n    int32_t iVar2;\n    int64_t iStackX8;\n    \n    *arg1 = 0;\n    iStackX8 = 0;\n    iVar2 = fcn.14001136c(&iStackX8);\n    iVar1 = iStackX8;\n    if (iVar2 < 0) {\n        if (iStackX8 != 0) {\n            (**0x140031a58)();\n        }\n    }\n    else {\n        (**0x140031a58)(iStackX8);\n        *arg1 = iVar1;\n        iVar2 = 0;\n    }\n    return iVar2;\n}\n",
        "token_count": 162
    },
    "14001094": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001094c(code **arg1)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    code *pcVar3;\n    \n    *arg1 = vtable.CommonUtil::CMpUtilsLibrary.0;\n    if (arg1[6] != NULL) {\n        (**0x140031a58)();\n    }\n    if (arg1[5] != NULL) {\n        (**0x140031a58)();\n    }\n    pcVar3 = arg1[4];\n    if (pcVar3 != NULL) {\n        LOCK();\n        piVar1 = pcVar3 + 8;\n        iVar2 = *piVar1;\n        *piVar1 = *piVar1 + -1;\n        if (iVar2 < 2) {\n            (**0x140031a58)(pcVar3, 1);\n        }\n    }\n    pcVar3 = arg1[3];\n    if (pcVar3 != NULL) {\n        LOCK();\n        piVar1 = pcVar3 + 8;\n        iVar2 = *piVar1;\n        *piVar1 = *piVar1 + -1;\n        if (iVar2 < 2) {\n            (**0x140031a58)(pcVar3, 1);\n        }\n    }\n    *arg1 = vtable.CommonUtil::CRefObject.0;\n    return;\n}\n",
        "token_count": 298
    },
    "140010d2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint * fcn.140010d24(int64_t *arg1)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int64_t *piVar3;\n    int64_t iVar4;\n    uint32_t uVar5;\n    uint uVar6;\n    uint *puVar7;\n    ulong unaff_RBX;\n    uint64_t uVar8;\n    int64_t *piVar9;\n    int64_t iVar10;\n    ulong in_R9;\n    \n    uVar8 = 0;\n    if (arg1[1] != 0) {\n        iVar10 = 0;\n        do {\n            piVar9 = *arg1 + 8 + iVar10;\n            while (piVar3 = *piVar9,  piVar3 != piVar9) {\n                iVar4 = *piVar3;\n                *piVar9 = iVar4;\n                *(iVar4 + 8) = piVar9;\n                if (piVar3 == 0x18) break;\n                arg1[2] = arg1[2] + -1;\n                piVar3[1] = piVar3;\n                *piVar3 = piVar3;\n                LOCK();\n                piVar1 = piVar3 + -2;\n                iVar2 = *piVar1;\n                *piVar1 = *piVar1 + -1;\n                if (iVar2 < 2) {\n                    (**0x140031a58)();\n                }\n            }\n            uVar8 = uVar8 + 1;\n            *(iVar10 + *arg1) = 0;\n            iVar10 = iVar10 + 0x18;\n        } while (uVar8 < arg1[1]);\n    }\n    puVar7 = NULL;\n    if ((*arg1 != 0) &&\n       (puVar7 = (*_sym.imp.KERNEL32.dll_HeapFree)(*0x14003f668, 0, *arg1, in_R9, unaff_RBX),  puVar7 == 0)) {\n        uVar5 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        uVar6 = fcn.1400141f8(uVar5);\n        puVar7 = fcn.1400142cc();\n        *puVar7 = uVar6;\n    }\n    return puVar7;\n}\n",
        "token_count": 505
    },
    "140010ff": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.140010ff8(int64_t *arg1)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    int32_t iVar5;\n    int64_t iStackX8;\n    int64_t iStackX16;\n    ulong var_30h;\n    ulong var_38h;\n    \n    *arg1 = 0;\n    iStackX8 = 0;\n    iVar5 = fcn.140011214(&iStackX8);\n    iVar4 = iStackX8;\n    if (iVar5 < 0) {\n        if (iStackX8 == 0) {\n            return iVar5;\n        }\n        LOCK();\n        piVar1 = iStackX8 + 8;\n        iVar2 = *piVar1;\n        *piVar1 = *piVar1 + -1;\n        if (0 < iVar2 + -1) {\n            return iVar5;\n        }\n        (**0x140031a58)(iStackX8, 1);\n        return iVar5;\n    }\n    if (*(iStackX8 + 0x10) != 0) {\n        *(iStackX8 + 0x10) = 0;\n    }\n    *(iStackX8 + 0x10) = 0x12345678;\n    iVar3 = *(iStackX8 + 0x18);\n    if (iVar3 != 0) {\n        LOCK();\n        piVar1 = iVar3 + 8;\n        iVar5 = *piVar1;\n        *piVar1 = *piVar1 + -1;\n        if (iVar5 + -1 < 1) {\n            (**0x140031a58)(iVar3, 1);\n        }\n        *(iVar4 + 0x18) = 0;\n    }\n    *(iVar4 + 0x18) = 0;\n    iStackX16 = 0;\n    iVar5 = fcn.1400111b8(&iStackX16);\n    iVar3 = iStackX16;\n    if (iVar5 < 0) {\n        if (iStackX16 != 0) {\n            LOCK();\n            piVar1 = iStackX16 + 8;\n            iVar2 = *piVar1;\n            *piVar1 = *piVar1 + -1;\n            if (iVar2 + -1 < 1) {\n                (**0x140031a58)(iStackX16, 1);\n            }\n        }\n    }\n    else {\n        iVar5 = fcn.140010dd4(iStackX16 + 0x10);\n        if (-1 < iVar5) {\n            *(iVar4 + 0x18) = iVar3;\n            goto code_r0x000140011197;\n        }\n        if (iVar3 != 0) {\n            LOCK();\n            piVar1 = iVar3 + 8;\n            iVar2 = *piVar1;\n            *piVar1 = *piVar1 + -1;\n            if (iVar2 + -1 < 1) {\n                (**0x140031a58)(iStackX16, 1);\n            }\n        }\n    }\n    if (-1 < iVar5) {\n        iVar5 = 0;\n    }\n    if (iVar5 < 0) {\n        if (iStackX8 == 0) {\n            return iVar5;\n        }\n        LOCK();\n        piVar1 = iStackX8 + 8;\n        iVar2 = *piVar1;\n        *piVar1 = *piVar1 + -1;\n        if (0 < iVar2 + -1) {\n            return iVar5;\n        }\n        (**0x140031a58)(iStackX8, 1);\n        return iVar5;\n    }\ncode_r0x000140011197:\n    *arg1 = iStackX8;\n    return 0;\n}\n",
        "token_count": 850
    },
    "14001121": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140011214(ulong *arg1)\n\n{\n    code **ppcVar1;\n    ulong uVar2;\n    \n    ppcVar1 = fcn.14002d9b0(0x38);\n    if (ppcVar1 == NULL) {\n        uVar2 = 0x8007000e;\n    }\n    else {\n        *(ppcVar1 + 1) = 0;\n        *ppcVar1 = vtable.CommonUtil::CMpUtilsLibrary.0;\n        ppcVar1[2] = NULL;\n        ppcVar1[3] = NULL;\n        ppcVar1[4] = NULL;\n        ppcVar1[5] = NULL;\n        ppcVar1[6] = NULL;\n        LOCK();\n        *(ppcVar1 + 1) = *(ppcVar1 + 1) + 1;\n        *arg1 = ppcVar1;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 221
    },
    "14001136": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14001136c(ulong *arg1)\n\n{\n    code **ppcVar1;\n    ulong uVar2;\n    \n    ppcVar1 = fcn.14002d9b0(0xc0);\n    if (ppcVar1 == NULL) {\n        uVar2 = 0x8007000e;\n    }\n    else {\n        *(ppcVar1 + 1) = 0;\n        *ppcVar1 = vtable.CommonUtil::CMpSha256.0;\n        *(ppcVar1 + 0x16) = 0;\n        (**0x140031a58)(ppcVar1);\n        *arg1 = ppcVar1;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 170
    },
    "14001148": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140011484(code **arg1)\n\n{\n    if (arg1[8] != NULL) {\n        (**0x140031a58)();\n    }\n    if (arg1[7] != NULL) {\n        (**0x140031a58)();\n    }\n    if (arg1[6] != NULL) {\n        (**0x140031a58)();\n    }\n    if (*(arg1 + 0x14) != 0xf12192e) {\n        (*_sym.imp.KERNEL32.dll_DeleteCriticalSection)();\n    }\n    *arg1 = vtable.CommonUtil::CPtrObjectProcessHeap.0;\n    return;\n}\n",
        "token_count": 139
    },
    "14001151": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140011510(ulong *arg1)\n\n{\n    ulong uVar1;\n    code **ppcVar2;\n    \n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n    ppcVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1, 0, 0x48);\n    if (ppcVar2 == NULL) {\n        uVar1 = 0x8007000e;\n    }\n    else {\n        *(ppcVar2 + 0x14) = 0xf12192e;\n        *ppcVar2 = vtable.CommonUtil::CPredefinedMpHeapsHolder.0;\n        ppcVar2[6] = NULL;\n        ppcVar2[7] = NULL;\n        ppcVar2[8] = NULL;\n        *arg1 = ppcVar2;\n        uVar1 = 0;\n    }\n    return uVar1;\n}\n",
        "token_count": 208
    },
    "140013cd": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.140013cd8(int64_t *arg1)\n\n{\n    int64_t iVar1;\n    int64_t lpFlsData;\n    uint auStackX8 [2];\n    \n    iVar1 = *arg1;\n    lpFlsData = 0;\n    if (iVar1 == 0) {\n        auStackX8[0] = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        if (*(arg1 + 2) == '\\0') {\n            arg1[1] = 0;\n            *(arg1 + 2) = 1;\n        }\n        else {\n            lpFlsData = arg1[1];\n        }\n        iVar1 = fcn.1400148f0(auStackX8, lpFlsData);\n        *arg1 = iVar1;\n        (*_sym.imp.KERNEL32.dll_SetLastError)(auStackX8[0]);\n    }\n    return iVar1;\n}\n",
        "token_count": 204
    },
    "140013d4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.140013d44(int64_t arg1, int64_t arg2)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    \n    iVar2 = 0;\n    if (*(arg2 + 0x10) == '\\0') {\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        *(arg2 + 8) = 0;\n        *(arg2 + 0x10) = 1;\n        (*_sym.imp.KERNEL32.dll_SetLastError)(uVar1);\n    }\n    else {\n        iVar2 = *(arg2 + 8);\n    }\n    return arg1 + iVar2 * 8;\n}\n",
        "token_count": 149
    },
    "14001424": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140014240(uint64_t arg1)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    uint *puVar3;\n    uint64_t arg1_00;\n    ulong in_RDX;\n    \n    arg1_00 = arg1 & 0xffffffff;\n    iVar2 = fcn.140014828(arg1, in_RDX);\n    if (iVar2 == 0) {\n        puVar3 = 0x14003e9b4;\n    }\n    else {\n        puVar3 = iVar2 + 0x24;\n    }\n    *puVar3 = arg1_00;\n    uVar1 = fcn.1400141f8(arg1_00);\n    iVar2 = fcn.140014828(arg1_00, in_RDX);\n    puVar3 = 0x14003e9b0;\n    if (iVar2 != 0) {\n        puVar3 = iVar2 + 0x20;\n    }\n    *puVar3 = uVar1;\n    return;\n}\n",
        "token_count": 228
    },
    "14001428": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140014288(ulong arg1, int64_t arg2)\n\n{\n    uint uVar1;\n    \n    *(arg2 + 0x38) = 1;\n    *(arg2 + 0x34) = arg1;\n    uVar1 = fcn.1400141f8(arg1);\n    *(arg2 + 0x2c) = uVar1;\n    *(arg2 + 0x30) = 1;\n    return;\n}\n",
        "token_count": 105
    },
    "140014a3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140014a34(int64_t arg1, int64_t *arg2)\n\n{\n    int64_t iVar1;\n    \n    if ((*arg2 != *0x14003f220) && ((*0x14003ef10 & *(arg1 + 0x3a8)) == 0)) {\n        iVar1 = fcn.140015124(arg1);\n        *arg2 = iVar1;\n    }\n    return;\n}\n",
        "token_count": 97
    },
    "140014a6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140014a68(int64_t arg1, int64_t *arg2)\n\n{\n    int64_t iVar1;\n    int64_t in_R8;\n    \n    if ((*arg2 != *(in_R8 * 8 + 0x14003f220)) && ((*0x14003ef10 & *(arg1 + 0x3a8)) == 0)) {\n        iVar1 = fcn.140015124(arg1);\n        *arg2 = iVar1;\n    }\n    return;\n}\n",
        "token_count": 113
    },
    "140014aa": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140014aa0(int64_t arg1, int64_t *arg2)\n\n{\n    int64_t iVar1;\n    \n    if ((*arg2 != *0x14003f610) && ((*0x14003ef10 & *(arg1 + 0x3a8)) == 0)) {\n        iVar1 = fcn.1400160a0(arg1);\n        *arg2 = iVar1;\n    }\n    return;\n}\n",
        "token_count": 99
    },
    "140014ad": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140014ad4(int64_t arg1, int64_t *arg2)\n\n{\n    int64_t iVar1;\n    int64_t in_R8;\n    \n    if ((*arg2 != *(in_R8 * 8 + 0x14003f610)) && ((*0x14003ef10 & *(arg1 + 0x3a8)) == 0)) {\n        iVar1 = fcn.1400160a0(arg1);\n        *arg2 = iVar1;\n    }\n    return;\n}\n",
        "token_count": 115
    },
    "14001528": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140015280(void)\n\n{\n    uint64_t uVar1;\n    \n    uVar1 = *0x14003f460;\n    while (uVar1 != 0) {\n        uVar1 = uVar1 - 1;\n        (*_sym.imp.KERNEL32.dll_DeleteCriticalSection)(uVar1 * 0x28 + 0x14003f230);\n        *0x14003f460 = *0x14003f460 - 1;\n    }\n    return 1;\n}\n",
        "token_count": 113
    },
    "14001549": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140015494(ulong arg1)\n\n{\n    int64_t iVar1;\n    ulong uVar2;\n    \n    iVar1 = fcn.1400152d4(0x18, \"AppPolicyGetProcessTerminationMethod\", 0x14003317c, \n                          \"AppPolicyGetProcessTerminationMethod\");\n    if (iVar1 != 0) {\n    // WARNING: Could not recover jumptable at 0x0001400154da. Too many branches\n    // WARNING: Treating indirect jump as call\n        uVar2 = (**0x140031a58)(0xfffffffffffffffa, arg1);\n        return uVar2;\n    }\n    return 0xc0000225;\n}\n",
        "token_count": 157
    },
    "1400155f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400155f8(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.1400152d4(0xe, 0x140033128, 0x140033120, 0x140033128);\n    if (iVar1 == 0) {\n        (*_sym.imp.KERNEL32.dll_InitializeCriticalSectionAndSpinCount)(arg1, arg2);\n    }\n    else {\n        (**0x140031a58)(arg1, arg2, arg3);\n    }\n    return;\n}\n",
        "token_count": 130
    },
    "14001566": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140015668(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    ulong in_stack_00000028;\n    uint in_stack_00000030;\n    ulong in_stack_00000038;\n    ulong in_stack_00000040;\n    ulong in_stack_00000048;\n    \n    iVar2 = fcn.1400152d4(0x10, \"LCMapStringEx\", 0x140033148, \"LCMapStringEx\");\n    if (iVar2 == 0) {\n        uVar1 = fcn.140015754(arg1, 0);\n        (*_sym.imp.KERNEL32.dll_LCMapStringW)(uVar1, arg2, arg3, arg4, in_stack_00000028, in_stack_00000030);\n    }\n    else {\n        (**0x140031a58)(arg1, arg2, arg3, arg4, in_stack_00000028, in_stack_00000030, in_stack_00000038, \n                        in_stack_00000040, in_stack_00000048);\n    }\n    return;\n}\n",
        "token_count": 259
    },
    "14001575": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140015754(ulong arg1, ulong arg2)\n\n{\n    int64_t iVar1;\n    char *arg2_00;\n    \n    arg2_00 = \"LocaleNameToLCID\";\n    iVar1 = fcn.1400152d4(0x12, \"LocaleNameToLCID\", 0x140033160, \"LocaleNameToLCID\");\n    if (iVar1 == 0) {\n        fcn.1400172fc(arg1, arg2_00);\n    }\n    else {\n        (**0x140031a58)(arg1, arg2);\n    }\n    return;\n}\n",
        "token_count": 137
    },
    "140015a8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.140015a84(int64_t arg1)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    ushort *puVar3;\n    int64_t iVar4;\n    \n    fcn.14001a0c0(arg1 + 0x18, 0, 0x101);\n    iVar2 = 0;\n    *(arg1 + 4) = 0;\n    *(arg1 + 0x220) = 0;\n    puVar3 = arg1 + 0xc;\n    for (iVar1 = 6; iVar4 = iVar2,  iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    do {\n        iVar1 = iVar4 + 1;\n        *(arg1 + iVar4 + 0x18) = *(iVar4 + 0x14003e9e8);\n        iVar4 = iVar1;\n    } while (iVar1 < 0x101);\n    do {\n        iVar1 = iVar2 + 1;\n        *(arg1 + iVar2 + 0x119) = *(iVar2 + 0x14003eae9);\n        iVar2 = iVar1;\n    } while (iVar1 < 0x100);\n    return;\n}\n",
        "token_count": 294
    },
    "1400160a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t * fcn.1400160a0(ulong arg1)\n\n{\n    int32_t iVar1;\n    code *pcVar2;\n    int32_t *piVar3;\n    int64_t iVar4;\n    ulong in_RDX;\n    \n    iVar4 = fcn.1400146b0(arg1, in_RDX);\n    if (((*(iVar4 + 0x3a8) & *0x14003ef10) == 0) || (*(iVar4 + 0x90) == 0)) {\n        fcn.140015258(5);\n        piVar3 = *(iVar4 + 0x88);\n        if (piVar3 != *0x14003f610) {\n            if (piVar3 != NULL) {\n                LOCK();\n                iVar1 = *piVar3;\n                *piVar3 = *piVar3 + -1;\n                if ((iVar1 == 1) && (piVar3 != 0x14003e9d0)) {\n                    fcn.140014db4(piVar3);\n                }\n            }\n            piVar3 = *0x14003f610;\n            *(iVar4 + 0x88) = *0x14003f610;\n            LOCK();\n            *piVar3 = *piVar3 + 1;\n        }\n        fcn.1400152b8(5);\n    }\n    else {\n        piVar3 = *(iVar4 + 0x88);\n    }\n    if (piVar3 != NULL) {\n        return piVar3;\n    }\n    fcn.140014c5c();\n    pcVar2 = swi(3);\n    piVar3 = (*pcVar2)();\n    return piVar3;\n}\n",
        "token_count": 374
    },
    "14001650": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140016500(int64_t arg1)\n\n{\n    if (arg1 != 0) {\n        if (*(arg1 + 0x18) != *0x14003e188) {\n            fcn.140014db4(*(arg1 + 0x18));\n        }\n        if (*(arg1 + 0x20) != *0x14003e190) {\n            fcn.140014db4(*(arg1 + 0x20));\n        }\n        if (*(arg1 + 0x28) != *0x14003e198) {\n            fcn.140014db4(*(arg1 + 0x28));\n        }\n        if (*(arg1 + 0x30) != *0x14003e1a0) {\n            fcn.140014db4(*(arg1 + 0x30));\n        }\n        if (*(arg1 + 0x38) != *0x14003e1a8) {\n            fcn.140014db4(*(arg1 + 0x38));\n        }\n        if (*(arg1 + 0x40) != *0x14003e1b0) {\n            fcn.140014db4(*(arg1 + 0x40));\n        }\n        if (*(arg1 + 0x48) != *0x14003e1b8) {\n            fcn.140014db4(*(arg1 + 0x48));\n        }\n        if (*(arg1 + 0x68) != *0x14003e1d8) {\n            fcn.140014db4(*(arg1 + 0x68));\n        }\n        if (*(arg1 + 0x70) != *0x14003e1e0) {\n            fcn.140014db4(*(arg1 + 0x70));\n        }\n        if (*(arg1 + 0x78) != *0x14003e1e8) {\n            fcn.140014db4(*(arg1 + 0x78));\n        }\n        if (*(arg1 + 0x80) != *0x14003e1f0) {\n            fcn.140014db4(*(arg1 + 0x80));\n        }\n        if (*(arg1 + 0x88) != *0x14003e1f8) {\n            fcn.140014db4(*(arg1 + 0x88));\n        }\n        if (*(arg1 + 0x90) != *0x14003e200) {\n            fcn.140014db4(*(arg1 + 0x90));\n        }\n    }\n    return;\n}\n",
        "token_count": 569
    },
    "14001660": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001660c(int64_t *arg1)\n\n{\n    if (arg1 != NULL) {\n        if (*arg1 != *0x14003e170) {\n            fcn.140014db4(*arg1);\n        }\n        if (arg1[1] != *0x14003e178) {\n            fcn.140014db4(arg1[1]);\n        }\n        if (arg1[2] != *0x14003e180) {\n            fcn.140014db4(arg1[2]);\n        }\n        if (arg1[0xb] != *0x14003e1c8) {\n            fcn.140014db4(arg1[0xb]);\n        }\n        if (arg1[0xc] != *0x14003e1d0) {\n            fcn.140014db4(arg1[0xc]);\n        }\n    }\n    return;\n}\n",
        "token_count": 201
    },
    "14001667": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140016678(ulong *arg1)\n\n{\n    ulong *puVar1;\n    int64_t in_RDX;\n    \n    puVar1 = arg1 + in_RDX;\n    if (arg1 != puVar1) {\n        do {\n            fcn.140014db4(*arg1);\n            arg1 = arg1 + 1;\n        } while (arg1 != puVar1);\n    }\n    return;\n}\n",
        "token_count": 96
    },
    "14001687": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.14001687c(int16_t *arg1, int64_t arg2, int64_t arg3, int64_t arg4)\n\n{\n    int16_t iVar1;\n    uint *puVar2;\n    int64_t iVar3;\n    int16_t *piVar4;\n    uint uVar5;\n    int64_t iVar6;\n    int64_t iVar7;\n    \n    if (arg4 == 0) {\n        if (arg1 == NULL) {\n            if (arg2 == 0) {\n                return 0;\n            }\n        }\n        else {\ncode_r0x0001400168cf:\n            if (arg2 != 0) {\n                if (arg4 == 0) {\n                    *arg1 = 0;\n                    return 0;\n                }\n                if (arg3 != 0) {\n                    piVar4 = arg1;\n                    iVar3 = arg4;\n                    iVar7 = arg2;\n                    if (arg4 == -1) {\n                        do {\n                            iVar1 = *((arg3 - arg1) + piVar4);\n                            *piVar4 = iVar1;\n                            piVar4 = piVar4 + 1;\n                            if (iVar1 == 0) {\n                                return 0;\n                            }\n                            iVar7 = iVar7 + -1;\n                        } while (iVar7 != 0);\n                    }\n                    else {\n                        do {\n                            iVar6 = iVar3;\n                            iVar1 = *((arg3 - arg1) + piVar4);\n                            *piVar4 = iVar1;\n                            piVar4 = piVar4 + 1;\n                            if (iVar1 == 0) {\n                                return 0;\n                            }\n                            iVar7 = iVar7 + -1;\n                        } while ((iVar7 != 0) && (iVar3 = iVar6 + -1,  iVar6 + -1 != 0));\n                        iVar3 = iVar6 + -1;\n                        if (iVar7 == 0) {\n                            iVar3 = iVar6;\n                        }\n                        if (iVar3 == 0) {\n                            *piVar4 = 0;\n                        }\n                    }\n                    if (iVar7 != 0) {\n                        return 0;\n                    }\n                    if (arg4 == -1) {\n                        arg1[arg2 + -1] = 0;\n                        return 0x50;\n                    }\n                    *arg1 = 0;\n                    puVar2 = fcn.1400142cc();\n                    uVar5 = 0x22;\n                    goto code_r0x0001400168ad;\n                }\n                *arg1 = 0;\n            }\n        }\n    }\n    else if (arg1 != NULL) goto code_r0x0001400168cf;\n    puVar2 = fcn.1400142cc();\n    uVar5 = 0x16;\ncode_r0x0001400168ad:\n    *puVar2 = uVar5;\n    fcn.140014060();\n    return uVar5;\n}\n",
        "token_count": 639
    },
    "140016bd": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140016bd0(ulong noname_0, uint32_t *arg2, ulong arg3, uint32_t *arg4)\n\n{\n    fcn.140015258(*arg2);\n    fcn.140016c08(arg3);\n    fcn.1400152b8(*arg4);\n    return;\n}\n",
        "token_count": 74
    },
    "14001721": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140017210(ulong arg1)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    \n    iVar2 = fcn.14001724c();\n    if ((iVar2 != 0) && (iVar1 = (**0x140031a58)(arg1),  iVar1 != 0)) {\n        return 1;\n    }\n    return 0;\n}\n",
        "token_count": 87
    },
    "1400172f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.1400172fc(int64_t arg1, ulong arg2)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    \n    if (arg1 != 0) {\n        iVar4 = 0;\n        iVar5 = 0xe3;\n        do {\n            iVar2 = (iVar5 + iVar4) / 2;\n            iVar3 = fcn.140013a8c(arg1, *(iVar2 * 0x10 + 0x1400301c0), 0x55);\n            if (iVar3 == 0) {\n                uVar1 = *(iVar2 * 0x10 + 0x1400301c8);\n                if (uVar1 < 0) {\n                    return 0;\n                }\n                if (0xe3 < uVar1) {\n                    return 0;\n                }\n                return *(uVar1 * 0x10 + 0x14002f380);\n            }\n            if (iVar3 < 0) {\n                iVar5 = iVar2 + -1;\n            }\n            else {\n                iVar4 = iVar2 + 1;\n            }\n        } while (iVar4 <= iVar5);\n    }\n    return 0;\n}\n",
        "token_count": 286
    },
    "140017aa": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140017aa0(int64_t arg1)\n\n{\n    int64_t arg1_00;\n    \n    arg1_00 = fcn.140013c70(arg1);\n    *(arg1 + 0x18) = *(arg1_00 + 0x90);\n    *(arg1 + 0x20) = *(arg1_00 + 0x88);\n    fcn.140014a68(arg1_00, arg1 + 0x18);\n    fcn.140014ad4(arg1_00, arg1 + 0x20);\n    if ((*(arg1_00 + 0x3a8) & 2) == 0) {\n        *(arg1_00 + 0x3a8) = *(arg1_00 + 0x3a8) | 2;\n        *(arg1 + 0x28) = 2;\n    }\n    return;\n}\n",
        "token_count": 205
    },
    "140017b9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140017b90(int64_t *arg1, int64_t *arg2)\n\n{\n    if (arg1 != arg2) {\n        do {\n            if (*arg1 != 0) {\n                (**0x140031a58)();\n            }\n            arg1 = arg1 + 1;\n        } while (arg1 != arg2);\n    }\n    return;\n}\n",
        "token_count": 84
    },
    "140017bd": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140017bd4(int64_t *arg1, int64_t *arg2)\n\n{\n    ulong uVar1;\n    bool bVar2;\n    \n    bVar2 = arg1 == arg2;\n    while( true ) {\n        if (bVar2) {\n            return 0;\n        }\n        if ((*arg1 != 0) && (uVar1 = (**0x140031a58)(),  uVar1 != 0)) break;\n        arg1 = arg1 + 1;\n        bVar2 = arg1 == arg2;\n    }\n    return uVar1;\n}\n",
        "token_count": 133
    },
    "140017c5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.140017c58(ulong noname_0, uint32_t *arg2, ulong arg3, uint32_t *arg4)\n\n{\n    uint uVar1;\n    \n    fcn.140015258(*arg2);\n    uVar1 = fcn.140017e44(arg3);\n    fcn.1400152b8(*arg4);\n    return uVar1;\n}\n",
        "token_count": 88
    },
    "140017fe": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.140017fe0(ulong arg1, ulong arg2)\n\n{\n    ulong uStackX8;\n    ulong uStackX16;\n    ulong var_20h_2;\n    ulong var_28h;\n    ulong var_20h;\n    ulong *var_18h;\n    ulong *var_bp_10h;\n    \n    var_18h = &uStackX8;\n    var_bp_10h = &uStackX16;\n    var_28h._0_4_ = 2;\n    var_20h._0_4_ = 2;\n    uStackX8 = arg1;\n    uStackX16 = arg2;\n    fcn.140017c1c(&var_20h_2, &var_20h, &var_18h, &var_28h);\n    return;\n}\n",
        "token_count": 194
    },
    "140017f7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140017f74(ulong arg1)\n\n{\n    ulong uStackX8;\n    uchar auStackX16 [8];\n    uint auStackX24 [2];\n    uint auStackX32 [2];\n    ulong *puStack24;\n    ulong uStack16;\n    \n    uStack16 = 0xfffffffffffffffe;\n    puStack24 = &uStackX8;\n    auStackX24[0] = 2;\n    auStackX32[0] = 2;\n    uStackX8 = arg1;\n    fcn.140017c58(auStackX16, auStackX32, &puStack24, auStackX24);\n    return;\n}\n",
        "token_count": 151
    },
    "14001811": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.14001811c(char *arg1, int64_t arg2, int64_t arg3, int64_t arg4)\n\n{\n    char cVar1;\n    uint *puVar2;\n    int64_t iVar3;\n    char *pcVar4;\n    uint uVar5;\n    int64_t iVar6;\n    int64_t iVar7;\n    \n    if (arg4 == 0) {\n        if (arg1 == NULL) {\n            if (arg2 == 0) {\n                return 0;\n            }\n        }\n        else {\ncode_r0x00014001816f:\n            if (arg2 != 0) {\n                if (arg4 == 0) {\n                    *arg1 = '\\0';\n                    return 0;\n                }\n                if (arg3 != 0) {\n                    pcVar4 = arg1;\n                    iVar3 = arg4;\n                    iVar7 = arg2;\n                    if (arg4 == -1) {\n                        do {\n                            cVar1 = pcVar4[arg3 - arg1];\n                            *pcVar4 = cVar1;\n                            pcVar4 = pcVar4 + 1;\n                            if (cVar1 == '\\0') {\n                                return 0;\n                            }\n                            iVar7 = iVar7 + -1;\n                        } while (iVar7 != 0);\n                    }\n                    else {\n                        do {\n                            iVar6 = iVar3;\n                            cVar1 = pcVar4[arg3 - arg1];\n                            *pcVar4 = cVar1;\n                            pcVar4 = pcVar4 + 1;\n                            if (cVar1 == '\\0') {\n                                return 0;\n                            }\n                            iVar7 = iVar7 + -1;\n                        } while ((iVar7 != 0) && (iVar3 = iVar6 + -1,  iVar6 + -1 != 0));\n                        iVar3 = iVar6 + -1;\n                        if (iVar7 == 0) {\n                            iVar3 = iVar6;\n                        }\n                        if (iVar3 == 0) {\n                            *pcVar4 = '\\0';\n                        }\n                    }\n                    if (iVar7 != 0) {\n                        return 0;\n                    }\n                    if (arg4 == -1) {\n                        arg1[arg2 + -1] = '\\0';\n                        return 0x50;\n                    }\n                    *arg1 = '\\0';\n                    puVar2 = fcn.1400142cc();\n                    uVar5 = 0x22;\n                    goto code_r0x00014001814d;\n                }\n                *arg1 = '\\0';\n            }\n        }\n    }\n    else if (arg1 != NULL) goto code_r0x00014001816f;\n    puVar2 = fcn.1400142cc();\n    uVar5 = 0x16;\ncode_r0x00014001814d:\n    *puVar2 = uVar5;\n    fcn.140014060();\n    return uVar5;\n}\n",
        "token_count": 634
    },
    "14001930": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140019304(void)\n\n{\n    int64_t *piVar1;\n    \n    for (piVar1 = 0x14003a320; piVar1 < 0x14003a320; piVar1 = piVar1 + 1) {\n        if (*piVar1 != 0) {\n            (**0x140031a58)();\n        }\n    }\n    return;\n}\n",
        "token_count": 88
    },
    "14001ab9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuchar fcn.14001ab94(void)\n\n{\n    char cVar1;\n    \n    cVar1 = fcn.14001e08c();\n    if (cVar1 != '\\0') {\n        cVar1 = fcn.14001ae70();\n        if (cVar1 != '\\0') {\n            return 1;\n        }\n        fcn.14001e0c0();\n    }\n    return 0;\n}\n",
        "token_count": 94
    },
    "14001acb": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001acb8(int64_t *arg1, uint8_t *arg2)\n\n{\n    int64_t iStack56;\n    ulong uStack48;\n    int64_t *piStack40;\n    uint8_t *puStack32;\n    int64_t iStack24;\n    \n    uStack48 = 0x19930520;\n    if ((arg2 != NULL) && ((*arg2 & 0x10) != 0)) {\n        arg2 = *(*(*arg1 + -8) + 0x30);\n        (**0x140031a58)();\n    }\n    iStack56 = (*_sym.imp.ntdll.dll_RtlPcToFileHeader)(arg2, &iStack56);\n    if ((arg2 != NULL) && (((*arg2 & 8) != 0 || (iStack56 == 0)))) {\n        uStack48 = 0x1994000;\n    }\n    piStack40 = arg1;\n    puStack32 = arg2;\n    iStack24 = iStack56;\n    (*_sym.imp.KERNEL32.dll_RaiseException)(0xe06d7363, 1, 4, &uStack48);\n    return;\n}\n",
        "token_count": 260
    },
    "14001af8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint64_t fcn.14001af8c(int64_t arg1, int64_t arg2, uint64_t arg3)\n\n{\n    int64_t iVar1;\n    code *pcVar2;\n    uint64_t uVar3;\n    uint32_t uVar4;\n    int64_t iVar5;\n    \n    if (arg1 != 0) {\n        iVar5 = *(arg1 + 0x18);\n        iVar1 = *(arg2 + 8);\n        if (iVar5 + iVar1 != 0) {\n            uVar3 = 0;\n            if (*(arg1 + 0x14) != 0) {\n                do {\n                    if (arg3 < *(iVar5 + uVar3 * 8 + iVar1) + iVar1) break;\n                    uVar4 = uVar3 + 1;\n                    uVar3 = uVar4;\n                } while (uVar4 < *(arg1 + 0x14));\n                if (uVar3 != 0) {\n                    return *(iVar5 + (uVar3 - 1) * 8 + 4 + iVar1);\n                }\n            }\n            return 0xffffffff;\n        }\n    }\n    fcn.140014c5c();\n    pcVar2 = swi(3);\n    uVar3 = (*pcVar2)();\n    return uVar3;\n}\n",
        "token_count": 293
    },
    "14001e08": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nbool fcn.14001e08c(void)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = (*_sym.imp.KERNEL32.dll_InitializeCriticalSectionEx)(0x14003fd10, 4000, 0);\n    if (iVar1 == 0) {\n        fcn.14001e0c0();\n    }\n    else {\n        *0x14003fd38 = *0x14003fd38 + 1;\n    }\n    return iVar1 != 0;\n}\n",
        "token_count": 109
    },
    "14001e0c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14001e0c0(void)\n\n{\n    uint64_t uVar1;\n    \n    uVar1 = *0x14003fd38;\n    while (uVar1 != 0) {\n        uVar1 = uVar1 - 1;\n        (*_sym.imp.KERNEL32.dll_DeleteCriticalSection)(uVar1 * 0x28 + 0x14003fd10);\n        *0x14003fd38 = *0x14003fd38 - 1;\n    }\n    return 1;\n}\n",
        "token_count": 116
    },
    "14001e19": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001e190(ulong arg1, ulong *arg2)\n\n{\n    fcn.14001e020(arg1, *arg2, 2);\n    return;\n}\n",
        "token_count": 42
    },
    "14001e1c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001e1c0(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    code *pcVar1;\n    ulong arg1_00;\n    \n    pcVar1 = fcn.14001e020(arg1, arg2, arg4);\n    (*pcVar1)(arg3);\n    arg1_00 = fcn.14001e050();\n    fcn.14001e020(arg1_00, arg2, 2);\n    return;\n}\n",
        "token_count": 111
    },
    "14001e5d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14001e5dc(void)\n\n{\n    int64_t iVar1;\n    int64_t arg1;\n    ulong uVar2;\n    int64_t iVar3;\n    \n    uVar2 = 0;\n    if (*0x14003ffd8 == 0) {\n        arg1 = fcn.140024718();\n        if (arg1 == 0) {\n            fcn.140014db4(0);\n            uVar2 = 0xffffffff;\n        }\n        else {\n            iVar3 = fcn.14001e64c(arg1);\n            iVar1 = iVar3;\n            if (iVar3 == 0) {\n                uVar2 = 0xffffffff;\n                iVar3 = *0x14003ffd8;\n                iVar1 = *0x14003ffe0;\n            }\n            *0x14003ffe0 = iVar1;\n            *0x14003ffd8 = iVar3;\n            fcn.140014db4(0);\n            fcn.140014db4(arg1);\n        }\n    }\n    else {\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 246
    },
    "14001e8a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001e8ac(int64_t *arg1)\n\n{\n    if (*arg1 != *0x14003ffe8) {\n        fcn.14001e768(*arg1);\n    }\n    return;\n}\n",
        "token_count": 51
    },
    "14001e8c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001e8c8(int64_t *arg1)\n\n{\n    if (*arg1 != *0x14003ffe0) {\n        fcn.14001e7ac(*arg1);\n    }\n    return;\n}\n",
        "token_count": 53
    },
    "14001e7a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001e7ac(int64_t *arg1)\n\n{\n    int64_t lpMem;\n    int64_t *piVar1;\n    \n    if (arg1 != NULL) {\n        lpMem = *arg1;\n        piVar1 = arg1;\n        while (lpMem != 0) {\n            fcn.140014db4(lpMem);\n            piVar1 = piVar1 + 1;\n            lpMem = *piVar1;\n        }\n        fcn.140014db4(arg1);\n    }\n    return;\n}\n",
        "token_count": 121
    },
    "14001e92": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.14001e920(void)\n\n{\n    int64_t *lpMem;\n    int64_t lpMem_00;\n    int64_t *piVar1;\n    \n    fcn.14001e8ac(0x14003ffd0);\n    fcn.14001e8c8(0x14003ffd8);\n    fcn.14001e768(*0x14003ffe8);\n    lpMem = *0x14003ffe0;\n    if (*0x14003ffe0 != NULL) {\n        lpMem_00 = **0x14003ffe0;\n        piVar1 = *0x14003ffe0;\n        while (lpMem_00 != 0) {\n            fcn.140014db4(lpMem_00);\n            piVar1 = piVar1 + 1;\n            lpMem_00 = *piVar1;\n        }\n        fcn.140014db4(lpMem);\n    }\n    return;\n}\n",
        "token_count": 209
    },
    "14001e9b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14001e9bc(uint *arg1)\n\n{\n    uint *puVar1;\n    ulong uVar2;\n    \n    if (arg1 == NULL) {\n        puVar1 = fcn.1400142cc();\n        *puVar1 = 0x16;\n        fcn.140014060();\n        uVar2 = 0x16;\n    }\n    else {\n        *arg1 = *0x140040024;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 115
    },
    "14001ef7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint64_t fcn.14001ef70(int64_t arg1, uint64_t arg2, int64_t arg3)\n\n{\n    int64_t iVar1;\n    uint64_t uVar2;\n    \n    if (arg2 < 0x8000000000000000) {\n        arg2 = arg2 * 2;\n        if (((*(arg1 + 0x408) == 0) && (arg2 < 0x401)) || (arg2 < *(arg1 + 0x400) || arg2 == *(arg1 + 0x400))) {\n            uVar2 = 0x7fffffffffffff01;\n        }\n        else {\n            iVar1 = fcn.1400167b4(arg2);\n            if (iVar1 != 0) {\n                fcn.140014db4(*(arg1 + 0x408));\n                *(arg1 + 0x408) = iVar1;\n                *(arg1 + 0x400) = arg2;\n            }\n            uVar2 = fcn.140014db4(0);\n            uVar2 = uVar2 & 0xffffffffffffff00 | iVar1 != 0;\n        }\n    }\n    else {\n        *(arg3 + 0x30) = 1;\n        uVar2 = 0x7fffffffffffff00;\n        *(arg3 + 0x2c) = 0xc;\n    }\n    return uVar2;\n}\n",
        "token_count": 314
    },
    "14001f01": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint64_t fcn.14001f018(int64_t arg1, uint64_t arg2, int64_t arg3)\n\n{\n    int64_t iVar1;\n    uint64_t uVar2;\n    \n    if (arg2 < 0x4000000000000000) {\n        arg2 = arg2 * 4;\n        if (((*(arg1 + 0x408) == 0) && (arg2 < 0x401)) || (arg2 < *(arg1 + 0x400) || arg2 - *(arg1 + 0x400) == 0)) {\n            uVar2 = 0x3fffffffffffff01;\n        }\n        else {\n            iVar1 = fcn.1400167b4(arg2);\n            if (iVar1 != 0) {\n                fcn.140014db4(*(arg1 + 0x408));\n                *(arg1 + 0x408) = iVar1;\n                *(arg1 + 0x400) = arg2;\n            }\n            uVar2 = fcn.140014db4(0);\n            uVar2 = uVar2 & 0xffffffffffffff00 | iVar1 != 0;\n        }\n    }\n    else {\n        *(arg3 + 0x30) = 1;\n        uVar2 = 0x3fffffffffffff00;\n        *(arg3 + 0x2c) = 0xc;\n    }\n    return uVar2;\n}\n",
        "token_count": 318
    },
    "140022ad": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff"
        ],
        "decompiled_code": "\nulong fcn.140022adc(ulong *arg1)\n\n{\n    ushort uVar1;\n    int64_t arg1_00;\n    int32_t iVar2;\n    ulong *puVar3;\n    uchar uStackX8;\n    char cStackX9;\n    \n    *(arg1 + 0x4c) = 1;\n    arg1[3] = arg1[3] + 8;\n    uVar1 = *(arg1[3] + -8);\n    cStackX9 = fcn.14001f0c4(*arg1, *(arg1 + 0x3a), *(arg1 + 0x34));\n    if (cStackX9 == '\\0') {\n        uStackX8 = uVar1;\n        arg1_00 = arg1[1];\n        if (*(arg1_00 + 0x28) == '\\0') {\n            fcn.140017aa0(arg1_00);\n        }\n        puVar3 = arg1[0x8b];\n        if (arg1[0x8b] == NULL) {\n            puVar3 = arg1 + 10;\n        }\n        iVar2 = fcn.1400269ec(puVar3, &uStackX8, *(*(arg1_00 + 0x18) + 8), arg1_00);\n        if (iVar2 < 0) {\n            *(arg1 + 7) = 1;\n        }\n    }\n    else {\n        puVar3 = arg1[0x8b];\n        if (arg1[0x8b] == NULL) {\n            puVar3 = arg1 + 10;\n        }\n        *puVar3 = uVar1;\n    }\n    *(arg1 + 9) = 1;\n    puVar3 = arg1[0x8b];\n    if (arg1[0x8b] == NULL) {\n        puVar3 = arg1 + 10;\n    }\n    arg1[8] = puVar3;\n    return 1;\n}\n",
        "token_count": 445
    },
    "14002471": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.140024710(int16_t **arg1, int64_t *arg2)\n\n{\n    code *pcVar1;\n    uint8_t uVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    int16_t *piVar5;\n    int16_t *piVar6;\n    int64_t iVar7;\n    uint16_t uVar8;\n    int64_t *piVar9;\n    int64_t iVar10;\n    int64_t iVar11;\n    int64_t iVar12;\n    ulong var_1b0h;\n    ulong var_1b8h;\n    uchar auStack760 [32];\n    ulong uStack728;\n    uint uStack720;\n    uchar auStack712 [16];\n    ulong uStack696;\n    int64_t iStack688;\n    int64_t *piStack680;\n    uchar auStack664 [44];\n    int16_t iStack620;\n    int16_t iStack618;\n    int16_t iStack616;\n    ulong var_74h;\n    ulong uStack72;\n    uint64_t uStack64;\n    \n    uStack64 = *0x14003ef38 ^ auStack760;\n    piStack680 = arg2;\n    if (arg2 == NULL) {\n        puVar4 = fcn.1400142cc();\n        *puVar4 = 0x16;\n        fcn.140014060();\n    }\n    else {\n        *arg2 = 0;\n        piVar5 = *arg1;\n        auStack712 = ZEXT816(0);\n        auStack712._8_8_ = NULL;\n        auStack712._0_8_ = NULL;\n        uStack696 = 0;\n        while (piVar5 != NULL) {\n            uStack72 = CONCAT26(uStack72._6_2_, 0x3f002a);\n            piVar6 = fcn.1400169a4(piVar5, &uStack72);\n            piVar5 = *arg1;\n            if (piVar6 == NULL) {\n                iVar3 = fcn.140024584(piVar5, 0, 0, auStack712);\n                if (iVar3 != 0) {\n                    piVar9 = auStack712._0_8_;\n                    if (auStack712._0_8_ != auStack712._8_8_) {\n                        do {\n                            fcn.140014db4(*piVar9);\n                            piVar9 = piVar9 + 1;\n                        } while (piVar9 != auStack712._8_8_);\n                    }\n                    goto code_r0x000140024497;\n                }\n            }\n            else {\n                while ((piVar6 != piVar5 &&\n                       ((0x2d < *piVar6 - 0x2fU || ((0x200000000801U >> (*piVar6 - 0x2fU & 0x3f) & 1) == 0))))) {\n                    piVar6 = piVar6 + -1;\n                }\n                if ((*piVar6 != 0x3a) || (piVar6 == piVar5 + 1)) {\n                    uVar8 = *piVar6 - 0x2f;\n                    if ((0x2d < uVar8) || (uVar2 = 1,  (0x200000000801U >> (uVar8 & 0x3f) & 1) == 0)) {\n                        uVar2 = 0;\n                    }\n                    uStack720 = 0;\n                    uStack728 = 0;\n                    iVar7 = (*_sym.imp.KERNEL32.dll_FindFirstFileExW)(piVar5, 0, auStack664, 0);\n                    if (iVar7 != -1) {\n                        iVar10 = auStack712._8_8_ - auStack712._0_8_ >> 3;\n                        do {\n                            if (((iStack620 != 0x2e) || ((iStack618 != 0 && ((iStack618 != 0x2e || (iStack616 != 0))))))\n                               && (iVar3 = fcn.140024584(&iStack620, piVar5, -uVar2 & (piVar6 - piVar5 >> 1) + 1U, \n                                                         auStack712),  iVar3 != 0)) {\n                                (*_sym.imp.KERNEL32.dll_FindClose)(iVar7);\n                                goto code_r0x0001400243f4;\n                            }\n                            iVar3 = (*_sym.imp.KERNEL32.dll_FindNextFileW)(iVar7, auStack664);\n                        } while (iVar3 != 0);\n                        iVar7 = auStack712._8_8_ - auStack712._0_8_ >> 3;\n                        if (iVar10 != iVar7) {\n                            fcn.1400277b0(auStack712._0_8_ + iVar10, iVar7 - iVar10, 8, 0x140024180);\n                        }\n                        (*_sym.imp.KERNEL32.dll_FindClose)();\n                        goto code_r0x0001400243b9;\n                    }\n                }\n                iVar3 = fcn.140024584(piVar5, 0, 0, auStack712);\n                if (iVar3 != 0) {\ncode_r0x0001400243f4:\n                    piVar9 = auStack712._0_8_;\n                    if (auStack712._0_8_ != auStack712._8_8_) {\n                        do {\n                            fcn.140014db4(*piVar9);\n                            piVar9 = piVar9 + 1;\n                        } while (piVar9 != auStack712._8_8_);\n                    }\n                    goto code_r0x000140024497;\n                }\n            }\ncode_r0x0001400243b9:\n            arg1 = arg1 + 1;\n            piVar5 = *arg1;\n        }\n        iVar7 = (auStack712._8_8_ - auStack712._0_8_ >> 3) + 1;\n        iStack688 = 0;\n        for (piVar9 = auStack712._0_8_; piVar9 != auStack712._8_8_; piVar9 = piVar9 + 1) {\n            iVar10 = -1;\n            do {\n                iVar10 = iVar10 + 1;\n            } while (*(*piVar9 + iVar10 * 2) != 0);\n            iStack688 = iStack688 + 1 + iVar10;\n        }\n        iVar10 = fcn.14001e3f8(iVar7, iStack688);\n        if (iVar10 == 0) {\n            fcn.140014db4(0);\n            for (piVar9 = auStack712._0_8_; piVar9 != auStack712._8_8_; piVar9 = piVar9 + 1) {\n                fcn.140014db4(*piVar9);\n            }\ncode_r0x000140024497:\n            fcn.140014db4(auStack712._0_8_);\n        }\n        else {\n            iVar7 = iVar10 + iVar7 * 8;\n            uStack72 = iVar7;\n            if (auStack712._0_8_ != auStack712._8_8_) {\n                piVar9 = auStack712._0_8_;\n                do {\n                    iVar11 = -1;\n                    do {\n                        iVar12 = iVar11;\n                        iVar11 = iVar12 + 1;\n                    } while (*(*piVar9 + iVar11 * 2) != 0);\n                    iVar12 = iVar12 + 2;\n                    iVar3 = fcn.14001687c(iVar7, iStack688 - (iVar7 - uStack72 >> 1), *piVar9, iVar12);\n                    if (iVar3 != 0) {\n                        uStack728 = 0;\n                        fcn.1400140b0(0, 0, 0, 0);\n                        pcVar1 = swi(3);\n                        (*pcVar1)();\n                        return;\n                    }\n                    *(piVar9 + (iVar10 - auStack712._0_8_)) = iVar7;\n                    piVar9 = piVar9 + 1;\n                    iVar7 = iVar7 + iVar12 * 2;\n                } while (piVar9 != auStack712._8_8_);\n            }\n            *piStack680 = iVar10;\n            fcn.140014db4(0);\n            for (piVar9 = auStack712._0_8_; piVar9 != auStack712._8_8_; piVar9 = piVar9 + 1) {\n                fcn.140014db4(*piVar9);\n            }\n            fcn.140014db4(auStack712._0_8_);\n        }\n    }\n    fcn.140018790(uStack64 ^ auStack760);\n    return;\n}\n",
        "token_count": 1947
    },
    "14002683": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.14002683c(int32_t *arg1, uchar *arg2, uint64_t arg3)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint16_t in_R9W;\n    uint64_t uStackX16;\n    uint16_t auStackX32 [4];\n    int64_t in_stack_00000028;\n    \n    if ((arg2 == NULL) && (arg3 != 0)) {\n        if (arg1 == NULL) {\n            return 0;\n        }\n        *arg1 = 0;\n        return 0;\n    }\n    if (arg1 != NULL) {\n        *arg1 = -1;\n    }\n    if (arg3 < 0x80000000) {\n        auStackX32[0] = in_R9W;\n        if (*(in_stack_00000028 + 0x28) == '\\0') {\n            fcn.140017aa0(in_stack_00000028);\n        }\n        uVar1 = *(*(in_stack_00000028 + 0x18) + 0xc);\n        if (uVar1 == 0xfde9) {\n            uStackX16 = 0;\n            iVar2 = fcn.14002a01c(arg2, auStackX32[0], &uStackX16, in_stack_00000028);\n            if (arg1 != NULL) {\n                *arg1 = iVar2;\n            }\n            if (iVar2 < 5) {\n                return 0;\n            }\n            if (*(in_stack_00000028 + 0x30) != '\\0') {\n                return *(in_stack_00000028 + 0x2c);\n            }\n            return 0;\n        }\n        if (*(*(in_stack_00000028 + 0x18) + 0x138) == 0) {\n            if (0xff < auStackX32[0]) {\n                if ((arg2 != NULL) && (arg3 != 0)) {\n                    fcn.14001a0c0(arg2, 0, arg3);\n                }\n                goto code_r0x00014002691e;\n            }\n            if (arg2 == NULL) {\ncode_r0x00014002694a:\n                if (arg1 != NULL) {\n                    *arg1 = 1;\n                }\n                return 0;\n            }\n            if (arg3 != 0) {\n                *arg2 = auStackX32[0];\n                goto code_r0x00014002694a;\n            }\n        }\n        else {\n            uStackX16 = uStackX16 & 0xffffffff00000000;\n            iVar2 = fcn.14001806c(uVar1, 0, auStackX32, 1);\n            if (iVar2 != 0) {\n                if (uStackX16 == 0) {\n                    if (arg1 == NULL) {\n                        return 0;\n                    }\n                    *arg1 = iVar2;\n                    return 0;\n                }\ncode_r0x00014002691e:\n                *(in_stack_00000028 + 0x2c) = 0x2a;\n                *(in_stack_00000028 + 0x30) = 1;\n                return 0x2a;\n            }\n            iVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            if (iVar2 != 0x7a) goto code_r0x00014002691e;\n            if ((arg2 != NULL) && (arg3 != 0)) {\n                fcn.14001a0c0(arg2, 0, arg3);\n            }\n        }\n        uVar3 = 0x22;\n    }\n    else {\n        uVar3 = 0x16;\n    }\n    *(in_stack_00000028 + 0x2c) = uVar3;\n    *(in_stack_00000028 + 0x30) = 1;\n    fcn.140013f90(0, 0, 0, 0);\n    return uVar3;\n}\n",
        "token_count": 901
    },
    "14002779": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t fcn.14002779c(void)\n\n{\n    uint32_t uVar1;\n    \n    uVar1 = fcn.14002b06c();\n    return uVar1 & 0x300;\n}\n",
        "token_count": 49
    },
    "14002a0c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14002a0c0(ushort *arg1)\n\n{\n    uint64_t uVar1;\n    ulong in_RDX;\n    ulong in_R8;\n    ulong in_R9;\n    uint32_t auStack24 [4];\n    \n    uVar1 = fcn.14002c768(auStack24, in_RDX, in_R8, in_R9);\n    if (uVar1 < 5) {\n        if (0xffff < auStack24[0]) {\n            auStack24[0] = 0xfffd;\n        }\n        if (arg1 != NULL) {\n            *arg1 = auStack24[0];\n        }\n    }\n    return;\n}\n",
        "token_count": 151
    },
    "14002aca": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14002aca4(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    uint32_t in_stack_00000028;\n    \n    fcn.14002a2a8(arg2, arg3, arg4, in_stack_00000028);\n    return;\n}\n",
        "token_count": 69
    },
    "14002d2f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14002d2f0(ulong param_1, ulong param_2, ulong param_3)\n\n{\n    fcn.14002d310(param_1, param_2, param_3, 0x1b);\n    return;\n}\n",
        "token_count": 58
    },
    "14002d9b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14002d9b0(ulong arg1)\n\n{\n    fcn.1400187f8(arg1);\n    return;\n}\n",
        "token_count": 33
    },
    "14002dbf": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14002dbfc(ulong arg1)\n\n{\n    if (*0x1400404c8 != 0) {\n    // WARNING: Could not recover jumptable at 0x00014002dc30. Too many branches\n    // WARNING: Treating indirect jump as call\n        (**0x140031a58)(0x140040490, 0x1400404a0, arg1);\n        return;\n    }\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(0x1400404a0);\n    (*_sym.imp.KERNEL32.dll_WaitForSingleObjectEx)(*0x140040498, arg1, 0);\n    // WARNING: Could not recover jumptable at 0x00014002dc62. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(0x1400404a0);\n    return;\n}\n",
        "token_count": 205
    },
    "140020db": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid fcn.140020dbc(char *arg1, int64_t *arg2)\n\n{\n    char cVar1;\n    char *pcVar2;\n    char *pcVar3;\n    int64_t iVar4;\n    \n    cVar1 = *arg1;\n    while ((cVar1 != '\\0' && (cVar1 != ***(*arg2 + 0xf8)))) {\n        arg1 = arg1 + 1;\n        cVar1 = *arg1;\n    }\n    if (cVar1 != '\\0') {\n        do {\n            arg1 = arg1 + 1;\n            pcVar2 = arg1;\n            if (*arg1 == '\\0') break;\n        } while ((*arg1 + 0xbbU & 0xdf) != 0);\n        do {\n            pcVar3 = pcVar2;\n            pcVar2 = pcVar3 + -1;\n        } while (*pcVar2 == '0');\n        pcVar3 = pcVar3 + -2;\n        if (*pcVar2 != ***(*arg2 + 0xf8)) {\n            pcVar3 = pcVar2;\n        }\n        iVar4 = arg1 - pcVar3;\n        do {\n            cVar1 = pcVar3[iVar4];\n            pcVar3 = pcVar3 + 1;\n            *pcVar3 = cVar1;\n        } while (cVar1 != '\\0');\n    }\n    return;\n}\n",
        "token_count": 309
    },
    "1400035f": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.1400035f0(ulong arg1, ulong noname_1, ulong arg3, int64_t arg4)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    int64_t iVar5;\n    int64_t iVar6;\n    int64_t in_stack_00000028;\n    int64_t in_stack_00000030;\n    \n    iVar6 = -1;\n    iVar4 = 10;\n    if (in_stack_00000030 == 0) {\n        iVar1 = 10;\n    }\n    else {\n        iVar1 = -1;\n        do {\n            iVar1 = iVar1 + 1;\n        } while (*(in_stack_00000030 + iVar1 * 2) != 0);\n        iVar1 = iVar1 * 2 + 2;\n    }\n    iVar5 = 0x1400373c8;\n    if (in_stack_00000030 != 0) {\n        iVar5 = in_stack_00000030;\n    }\n    if (in_stack_00000028 == 0) {\n        iVar2 = 10;\n    }\n    else {\n        iVar2 = -1;\n        do {\n            iVar2 = iVar2 + 1;\n        } while (*(in_stack_00000028 + iVar2 * 2) != 0);\n        iVar2 = iVar2 * 2 + 2;\n    }\n    iVar3 = 0x1400373c8;\n    if (in_stack_00000028 != 0) {\n        iVar3 = in_stack_00000028;\n    }\n    if (arg4 != 0) {\n        do {\n            iVar6 = iVar6 + 1;\n        } while (*(arg4 + iVar6 * 2) != 0);\n        iVar4 = iVar6 * 2 + 2;\n    }\n    iVar6 = 0x1400373c8;\n    if (arg4 != 0) {\n        iVar6 = arg4;\n    }\n    (*_sym.imp.ADVAPI32.dll_TraceMessage)(arg1, 0x2b, arg3, noname_1, iVar6, iVar4, iVar3, iVar2, iVar5, iVar1, 0);\n    return;\n}\n",
        "token_count": 498
    },
    "14000bcc": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.14000bccc(int64_t *arg1, ulong arg2)\n\n{\n    int64_t arg1_00;\n    int32_t iVar1;\n    uint64_t uVar2;\n    uchar auStack616 [32];\n    uint64_t uStack584;\n    int64_t iStack576;\n    uchar auStack568 [528];\n    uint64_t uStack40;\n    \n    uStack40 = *0x14003ef38 ^ auStack616;\n    uStack584 = 0x104;\n    iVar1 = fcn.14000bc20(arg2, &uStack584, auStack568);\n    if (-1 < iVar1) {\n        uVar2 = uStack584;\n        if (uStack584 < 0x105) {\n            fcn.14000ca84(arg1, auStack568);\n        }\n        else {\n            while( true ) {\n                iStack576 = 0;\n                iVar1 = fcn.140004770(&iStack576);\n                arg1_00 = iStack576;\n                if (iVar1 < 0) break;\n                iVar1 = fcn.14000bc20(arg2, &uStack584, iStack576);\n                if (iVar1 < 0) {\n                    if (arg1_00 != 0) {\n                        fcn.1400187b4(arg1_00);\n                    }\n                    goto code_r0x00014000bdb2;\n                }\n                if (uStack584 <= uVar2) {\n                    *arg1 = arg1_00;\n                    goto code_r0x00014000bdb2;\n                }\n                uVar2 = uStack584;\n                if (arg1_00 != 0) {\n                    fcn.1400187b4(arg1_00);\n                }\n            }\n            if (iStack576 != 0) {\n                fcn.1400187b4(iStack576);\n            }\n        }\n    }\ncode_r0x00014000bdb2:\n    fcn.140018790(uStack40 ^ auStack616);\n    return;\n}\n",
        "token_count": 446
    },
    "14001af7": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nuint64_t fcn.14001af7c(int64_t arg1, uint64_t *arg2)\n\n{\n    code *pcVar1;\n    uint64_t uVar2;\n    uint32_t uVar3;\n    uint64_t uVar4;\n    int64_t iVar5;\n    \n    if (arg1 != 0) {\n        iVar5 = *(arg1 + 0x18);\n        uVar2 = arg2[1];\n        if (iVar5 + uVar2 != 0) {\n            uVar4 = 0;\n            if (*(arg1 + 0x14) != 0) {\n                do {\n                    if (*arg2 < *(iVar5 + uVar4 * 8 + uVar2) + uVar2) break;\n                    uVar3 = uVar4 + 1;\n                    uVar4 = uVar3;\n                } while (uVar3 < *(arg1 + 0x14));\n                if (uVar4 != 0) {\n                    return *(iVar5 + (uVar4 - 1) * 8 + 4 + uVar2);\n                }\n            }\n            return 0xffffffff;\n        }\n    }\n    fcn.140014c5c();\n    pcVar1 = swi(3);\n    uVar2 = (*pcVar1)();\n    return uVar2;\n}\n",
        "token_count": 292
    },
    "14001eb6": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nint64_t fcn.14001eb6c(uint64_t arg1)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    uint *puVar3;\n    \n    if (arg1 < 0xffffffffffffffe1) {\n        if (arg1 == 0) {\n            arg1 = 1;\n        }\n        do {\n            iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(*0x14003f668, 0, arg1);\n            if (iVar2 != 0) {\n                return iVar2;\n            }\n            iVar1 = fcn.140017280();\n        } while ((iVar1 != 0) && (iVar1 = fcn.140017210(arg1),  iVar1 != 0));\n    }\n    puVar3 = fcn.1400142cc();\n    *puVar3 = 0xc;\n    return 0;\n}\n",
        "token_count": 196
    },
    "14002dc6": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.14002dc6c(int64_t arg1)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    int32_t iVar3;\n    \n    do {\n        iVar2 = fcn.14001eb6c(arg1);\n        if (iVar2 != 0) {\n            return;\n        }\n        iVar3 = fcn.140017210(arg1);\n    } while (iVar3 != 0);\n    if (arg1 == -1) {\n        fcn.140004888();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    fcn.1400193a8();\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 164
    },
    "140016ee": {
        "rules": [
            "parse PE header"
        ],
        "decompiled_code": "\nvoid fcn.140016ee4(ulong arg1)\n\n{\n    code *pcVar1;\n    int16_t *piVar2;\n    int32_t *piVar3;\n    uint auStackX16 [2];\n    int32_t aiStackX24 [2];\n    uchar auStackX32 [8];\n    uchar auStack56 [4];\n    uint uStack52;\n    uint auStack48 [2];\n    ulong uStack40;\n    uint *puStack32;\n    int32_t *piStack24;\n    uchar *puStack16;\n    \n    aiStackX24[0] = 0;\n    auStackX16[0] = 0;\n    uStack40 = 0xfffffffffffffffe;\n    piVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n    if ((((piVar2 != NULL) && (*piVar2 == 0x5a4d)) && (piVar3 = *(piVar2 + 0x1e) + piVar2,  *piVar3 == 0x4550)) &&\n       (((*(piVar3 + 6) == 0x20b && (0xe < piVar3[0x21])) && (piVar3[0x3e] != 0)))) {\n        fcn.140016e00(arg1);\n    }\n    auStackX32[0] = 0;\n    puStack32 = auStackX16;\n    piStack24 = aiStackX24;\n    puStack16 = auStackX32;\n    uStack52 = 2;\n    auStack48[0] = 2;\n    fcn.140016bd0(auStack56, auStack48, &puStack32, &uStack52);\n    if (aiStackX24[0] == 0) {\n        fcn.140016d9c(arg1);\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    return;\n}\n",
        "token_count": 432
    },
    "14001185": {
        "rules": [
            "hash data using SHA256"
        ],
        "decompiled_code": "\nvoid fcn.14001185c(uint *arg1)\n\n{\n    uint uVar1;\n    uint uVar2;\n    uint uVar3;\n    \n    *(arg1 + 4) = 0;\n    *arg1 = 0;\n    uVar3 = *0x140038004;\n    uVar2 = *0x140038000;\n    uVar1 = *0x140037ffc;\n    arg1[0x18] = *0x140037ff8;\n    arg1[0x19] = uVar1;\n    arg1[0x1a] = uVar2;\n    arg1[0x1b] = uVar3;\n    uVar3 = *0x140038014;\n    uVar2 = *0x140038010;\n    uVar1 = *0x14003800c;\n    arg1[0x1c] = *0x140038008;\n    arg1[0x1d] = uVar1;\n    arg1[0x1e] = uVar2;\n    arg1[0x1f] = uVar3;\n    return;\n}\n",
        "token_count": 248
    },
    "140016d9": {
        "rules": [
            "terminate process"
        ],
        "decompiled_code": "\nvoid fcn.140016d9c(uint64_t arg1)\n\n{\n    code *pcVar1;\n    ulong uVar2;\n    char cVar3;\n    \n    arg1 = arg1 & 0xffffffff;\n    cVar3 = fcn.140016dd0();\n    if (cVar3 != '\\0') {\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)();\n        (*_sym.imp.KERNEL32.dll_TerminateProcess)(uVar2, arg1);\n    }\n    fcn.140016e00(arg1);\n    (*_sym.imp.KERNEL32.dll_ExitProcess)(arg1);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 159
    }
}