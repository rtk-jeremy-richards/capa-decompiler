{
    "null": {
        "rules": [
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0",
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "14002930": {
        "rules": [
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0",
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.14002930c(int64_t arg1, char *arg2, uint64_t arg3, int64_t arg4)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    char *pcVar4;\n    int64_t iVar5;\n    ulong uVar6;\n    ulong uVar7;\n    uchar auStack440 [32];\n    int32_t iStack408;\n    uint32_t uStack400;\n    ulong uStack392;\n    uint auStack376 [2];\n    ulong uStack368;\n    uint32_t uStack360;\n    uchar auStack344 [272];\n    uint64_t uStack72;\n    \n    uStack72 = *0x1400d96f0 ^ auStack440;\n    *(arg1 + 8) = 0xffffffffffffffff;\n    uVar1 = arg3;\n    uVar7 = 0;\n    uVar3 = 0;\n    *(arg1 + 0x10) = 0;\n    fcn.140004828(arg1 + 0x18, arg2, arg3);\n    if (arg2 != NULL) {\n        iVar5 = 0x104;\n        pcVar4 = arg2;\n        do {\n            if (*pcVar4 == '\\0') break;\n            pcVar4 = pcVar4 + 1;\n            iVar5 = iVar5 + -1;\n        } while (iVar5 != 0);\n        if (iVar5 != 0) {\n            iVar2 = fcn.140028e08(auStack344, arg2, arg4);\n            if (iVar2 != 0) {\n                uVar3 = fcn.1400699a0(auStack344);\n                fcn.140005294(arg1 + 0x18, auStack344, uVar3);\n                iStack408 = 3;\n                if ((arg3 & 3) == 0) {\n                    uVar6 = 0x80000000;\n                }\n                else if ((uVar1 & 3) == 1) {\n                    uVar6 = 0x40000000;\n                }\n                else {\n                    uVar6 = uVar7;\n                    if ((uVar1 & 3) == 2) {\n                        uVar6 = 0xc0000000;\n                    }\n                }\n                uVar3 = uVar1 & 0x70;\n                if (((arg3 & 0x70) != 0) && (uVar3 != 0x10)) {\n                    if (uVar3 == 0x20) {\n                        uVar7 = 1;\n                    }\n                    else if (uVar3 == 0x30) {\n                        uVar7 = 2;\n                    }\n                    else if (uVar3 == 0x40) {\n                        uVar7 = 3;\n                    }\n                }\n                auStack376[0] = 0x18;\n                uStack368 = 0;\n                uStack360 = ~((uVar1 & 0xffff7fff) >> 7) & 1;\n                if (((uVar1 & 0xffff7fff) >> 0xc & 1) != 0) {\n                    iStack408 = (-((arg3 & 0x2000) != 0) & 2) + 2;\n                }\n                uStack400 = 0x80;\n                if ((uVar1 >> 0x10 & 1) != 0) {\n                    uStack400 = 0x20000080;\n                }\n                if ((uVar1 >> 0x11 & 1) != 0) {\n                    uStack400 = uStack400 | 0x80000000;\n                }\n                if ((uVar1 >> 0x12 & 1) != 0) {\n                    uStack400 = uStack400 | 0x10000000;\n                }\n                if ((uVar1 >> 0x13 & 1) != 0) {\n                    uStack400 = uStack400 | 0x8000000;\n                }\n                uStack392 = 0;\n                iVar5 = (*_sym.imp.KERNEL32.dll_CreateFileA)(arg2, uVar6, uVar7, auStack376);\n                if (iVar5 == -1) {\n                    fcn.140028da8(arg4, arg2);\n                }\n                else {\n                    *(arg1 + 8) = iVar5;\n                    *(arg1 + 0x10) = 1;\n                }\n            }\n            goto code_r0x0001400294de;\n        }\n    }\n    if (arg4 != 0) {\n        *(arg4 + 0x10) = 3;\n        if (arg2 != NULL) {\n            uVar3 = fcn.1400699a0(arg2);\n        }\n        fcn.140005294(arg4 + 0x18, arg2, uVar3);\n    }\ncode_r0x0001400294de:\n    fcn.140069870(uStack72 ^ auStack440);\n    return;\n}\n",
        "token_count": 1100
    },
    "140029f6": {
        "rules": [
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0",
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nulong fcn.140029f68(int64_t *arg1, ulong arg2, ulong arg3)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int64_t iVar4;\n    uint32_t *arg1_00;\n    ulong uVar5;\n    \n    *(arg1 + 1) = arg3;\n    if (arg3 <= arg3 + 0x40) {\n        iVar4 = (*_sym.imp.KERNEL32.dll_GlobalAlloc)(0x40);\n        *arg1 = iVar4;\n        if (iVar4 != 0) {\n            arg1_00 = (*_sym.imp.KERNEL32.dll_GlobalLock)(iVar4);\n            iVar2 = fcn.140069a48(arg1_00, *(arg1 + 1), arg2, *(arg1 + 1));\n            if (iVar2 != 0) {\n                if (iVar2 == 0xc) {\n                    fcn.140020738();\n                    pcVar1 = swi(3);\n                    uVar5 = (*pcVar1)();\n                    return uVar5;\n                }\n                if ((iVar2 == 0x16) || (iVar2 == 0x22)) {\n                    fcn.140020780();\n                    pcVar1 = swi(3);\n                    uVar5 = (*pcVar1)();\n                    return uVar5;\n                }\n                if (iVar2 != 0x50) {\n                    fcn.140020780();\n                    pcVar1 = swi(3);\n                    uVar5 = (*pcVar1)();\n                    return uVar5;\n                }\n            }\n            if (*(arg1_00 + 2) == -1) {\n                uVar3 = arg1_00[3];\n            }\n            else {\n                uVar3 = *arg1_00;\n            }\n            *(arg1 + 0xc) = ~(uVar3 >> 6) & 1;\n            (*_sym.imp.KERNEL32.dll_GlobalUnlock)(*arg1);\n            return 1;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 451
    },
    "14002d35": {
        "rules": [
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0",
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nint32_t fcn.14002d354(int64_t arg1)\n\n{\n    if ((*(arg1 + 0xb0) >> 0xc & 1) != 0) {\n        return (-((*(arg1 + 0xac) & 1) != 0) & 0xfffffff0) + 0x20;\n    }\n    return 0;\n}\n",
        "token_count": 84
    },
    "14002d37": {
        "rules": [
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0",
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.14002d374(int64_t arg1, ulong arg2)\n\n{\n    ulong *puVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    int64_t *apiStackX8 [4];\n    \n    if ((*(arg1 + 0xb0) >> 0xc & 1) != 0) {\n        if ((*(arg1 + 0xac) & 1) != (arg2 != 0)) {\n            apiStackX8[0] = NULL;\n            *(arg1 + 0xac) = *(arg1 + 0xac) ^ 1;\n            puVar1 = *(arg1 + 0x80);\n            if (puVar1 == NULL) {\n                fcn.140020780();\n                pcVar2 = swi(3);\n                (*pcVar2)();\n                return;\n            }\n            iVar3 = (***puVar1)(puVar1, 0x1400b6848, apiStackX8);\n            if (-1 < iVar3) {\n                (**(*apiStackX8[0] + 0x28))(apiStackX8[0], 0xfffffd37);\n                (**(*apiStackX8[0] + 0x10))();\n            }\n        }\n    }\n    return;\n}\n",
        "token_count": 282
    },
    "14002ef1": {
        "rules": [
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0",
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.14002ef1c(ulong *arg1, ulong arg2, ulong noname_2, ulong arg4)\n\n{\n    code *pcVar1;\n    uchar in_stack_00000028;\n    uchar in_stack_00000030;\n    uint in_stack_00000038;\n    ulong in_stack_00000040;\n    int64_t in_stack_00000048;\n    int64_t in_stack_00000050;\n    ulong in_stack_00000058;\n    \n    if (arg1 == NULL) {\n        fcn.1400031e0(0x80004005);\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    *arg1 = arg2;\n    *(arg1 + 0x54) = noname_2;\n    *(arg1 + 10) = 0;\n    arg1[2] = 0;\n    arg1[3] = 0;\n    arg1[4] = 0;\n    *(arg1 + 0x3c) = noname_2 >> 0xe & 1;\n    arg1[6] = 0;\n    arg1[5] = in_stack_00000058;\n    arg1[9] = arg4;\n    *(arg1 + 8) = in_stack_00000038;\n    *(arg1 + 7) = 1;\n    *(arg1 + 0x56) = in_stack_00000028;\n    *(arg1 + 0x57) = in_stack_00000030;\n    arg1[1] = in_stack_00000040;\n    if (in_stack_00000048 != 0) {\n        *(arg1 + 7) = 3;\n        arg1[2] = in_stack_00000048;\n    }\n    if (in_stack_00000050 != 0) {\n        *(arg1 + 7) = *(arg1 + 7) | 4;\n        arg1[3] = in_stack_00000050;\n    }\n    return;\n}\n",
        "token_count": 450
    },
    "14003d32": {
        "rules": [
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0",
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint64_t * fcn.14003d320(uint64_t *arg1, uint64_t *arg2, ulong arg3)\n\n{\n    uint8_t uVar1;\n    uint32_t uVar2;\n    uint64_t uVar3;\n    uint64_t uVar4;\n    uint uVar5;\n    \n    uVar5 = 0;\n    if (*(arg1 + 1) != 0) {\n        uVar4 = *arg1;\n        *(arg2 + 1) = *(arg1 + 1);\n        *arg2 = uVar4;\n        return arg2;\n    }\n    uVar4 = *arg1;\n    if ((uVar4 == 0) || (arg3 == 0)) {\n        *arg2 = 0;\n        *(arg2 + 1) = 0;\n        return arg2;\n    }\n    uVar1 = *(arg1 + 4) >> 0x18 ^ arg3 >> 0x18;\n    if (uVar4 < 0) {\n        uVar4 = -uVar4;\n    }\n    uVar2 = fcn.14006bd00(arg3);\n    uVar3 = (uVar4 >> 0x20) * uVar2;\n    if ((uVar3 < 0x80000001) &&\n       (uVar4 = (uVar4 & 0xffffffff) * uVar2,  uVar3 = (uVar3 << 0x20) + uVar4,  uVar4 <= uVar3)) {\n        if (uVar1 < '\\0') {\n            uVar3 = -uVar3;\n        }\n        if (-1 < (uVar3 >> 0x20 ^ *(arg1 + 4) ^ arg3)) goto code_r0x00014003d3f5;\n    }\n    uVar5 = 1;\n    uVar3 = (uVar1 < '\\0') + 0x7fffffffffffffff;\ncode_r0x00014003d3f5:\n    *arg2 = uVar3;\n    *(arg2 + 1) = uVar5;\n    return arg2;\n}\n",
        "token_count": 470
    },
    "14004152": {
        "rules": [
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0",
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nint32_t * fcn.14004152c(int64_t *arg1, int32_t *arg2, int64_t arg3, ulong arg4)\n\n{\n    int64_t iVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint64_t uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint64_t uVar7;\n    int64_t iVar8;\n    uint8_t *puVar9;\n    int32_t iVar10;\n    int32_t iVar11;\n    uint8_t uVar12;\n    int32_t iVar13;\n    \n    iVar1 = *arg1;\n    iVar11 = 0;\n    iVar8 = arg4;\n    *arg2 = 0;\n    arg2[1] = 0;\n    iVar10 = 0;\n    uVar4 = (**(iVar1 + 0x230))();\n    if (0 < arg4) {\n        puVar9 = arg3 + 9;\n        do {\n            iVar13 = *(puVar9 + -9);\n            uVar2 = fcn.140015284(arg1);\n            if (((uVar2 >> 0xb & 1) == 0) && (*0x1400d8a34 != 0x40047)) {\n                uVar7 = (iVar13 * 2) / 3 + (iVar13 * 2 >> 0x3f) & 0xffffffff;\n                iVar13 = (uVar7 >> 0x1f) + uVar7;\n            }\n            if ((puVar9[-1] & 8) == 0) {\n                iVar6 = *(arg1 + 300);\n                uVar12 = *puVar9 & 1;\n                if (uVar12 == 0) {\n                    if (((*puVar9 & 8) != 0) && ((uVar4 & 1) != 0)) {\n                        iVar6 = iVar6 + *0x1400d8a38;\n                    }\n                    iVar3 = *arg2;\n                    if (*arg2 < iVar11 + iVar6) {\n                        iVar3 = iVar11 + iVar6;\n                    }\n                    iVar5 = *(arg1 + 0x26) + iVar10;\n                    *arg2 = iVar3;\ncode_r0x00014004161b:\n                    iVar3 = arg2[1];\n                    if (arg2[1] < iVar5) {\n                        iVar3 = iVar5;\n                    }\n                    arg2[1] = iVar3;\n                }\n                else {\n                    if ((puVar9[-1] & 0x20) != 0) {\n                        iVar5 = *(arg1 + 0x26) + iVar10 + iVar13;\n                        goto code_r0x00014004161b;\n                    }\n                    iVar3 = *arg2;\n                    if (*arg2 < *(puVar9 + -9) + iVar11) {\n                        iVar3 = *(puVar9 + -9) + iVar11;\n                    }\n                    *arg2 = iVar3;\n                }\n                if (uVar12 != 0) {\n                    iVar6 = *(puVar9 + -9);\n                }\n                iVar11 = iVar11 + iVar6;\n                if ((puVar9[-1] & 0x20) != 0) {\n                    iVar10 = iVar10 + *(arg1 + 0x26);\n                    iVar11 = 0;\n                    if (uVar12 != 0) {\n                        iVar10 = iVar10 + iVar13;\n                    }\n                }\n            }\n            puVar9 = puVar9 + 0x20;\n            iVar8 = iVar8 + -1;\n        } while (iVar8 != 0);\n    }\n    return arg2;\n}\n",
        "token_count": 810
    },
    "14004232": {
        "rules": [
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0",
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nulong * fcn.140042324(int64_t *arg1, ulong *arg2, ulong arg3, ulong arg4)\n\n{\n    uint32_t uVar1;\n    ulong uVar2;\n    uint64_t arg2_00;\n    ulong *puVar3;\n    int32_t *piVar4;\n    int64_t iVar5;\n    int32_t iVar6;\n    uint64_t uVar7;\n    int64_t iVar8;\n    int32_t iVar9;\n    uint32_t uVar10;\n    uint8_t *puVar11;\n    int32_t *piVar12;\n    uint64_t uVar13;\n    uint64_t uVar14;\n    uint *puVar15;\n    uint64_t uVar16;\n    uint auStackX8 [2];\n    ulong uStackX16;\n    uint32_t uStackX24;\n    int32_t iStackX32;\n    uint64_t uStack136;\n    int64_t iStack128;\n    int64_t iStack120;\n    ulong uStack112;\n    int32_t iStack104;\n    int32_t iStack100;\n    uint uStack96;\n    uint uStack92;\n    uint uStack88;\n    uint uStack84;\n    \n    iVar5 = *arg1;\n    uVar14 = 0;\n    *arg2 = 0;\n    *(arg2 + 4) = 0;\n    uStackX16 = arg2;\n    uStackX24 = arg3;\n    iStackX32 = arg4;\n    uVar1 = (**(iVar5 + 0x230))(arg1, 0x418);\n    uVar16 = uVar1;\n    arg2_00 = uVar14;\n    if (uVar1 != 0) {\n        uVar2 = SUB168(ZEXT416(0x20) * ZEXT816(uVar16), 0);\n        if (SUB168(ZEXT416(0x20) * ZEXT816(uVar16) >> 0x40, 0) != 0) {\n            uVar2 = 0xffffffffffffffff;\n        }\n        arg2_00 = fcn.140003694(uVar2);\n        arg4._0_4_ = iStackX32;\n        if (0 < uVar16) {\n            puVar11 = arg2_00 + 8;\n            uVar14 = uVar16;\n            do {\n                (**(*arg1 + 0x230))(arg1, 0x417);\n                *puVar11 = *puVar11 ^ 4;\n                puVar11 = puVar11 + 0x20;\n                uVar14 = uVar14 - 1;\n                arg2 = uStackX16;\n                arg4._0_4_ = iStackX32;\n            } while (uVar14 != 0);\n        }\n    }\n    iVar6 = uVar14;\n    if (uVar1 <= iVar6) goto code_r0x000140042714;\n    uVar10 = *(arg1 + 0xe4);\n    if ((uVar10 & 2) == 0) {\n        if ((uVar10 & 4) == 0) {\ncode_r0x000140042480:\n            uVar13 = -((arg3 & 2) != 0) & 0x7fff;\n        }\n        else if ((arg3 & 4) == 0) {\n            if ((arg3 & 8) == 0) {\n                if ((arg3 & 0x10) == 0) {\n                    if (arg4 == -1) {\n                        if ((uVar10 & 1) == 0) goto code_r0x000140042480;\n                        goto code_r0x00014004240a;\n                    }\n                    (*_sym.imp.USER32.dll_SetRectEmpty)(&uStack112);\n                    (**(*arg1 + 0x290))(arg1, &uStack112);\n                    if ((arg3 & 0x20) == 0) {\n                        uStack112._4_4_ = iStack104 - uStack112;\n                    }\n                    else {\n                        uStack112._4_4_ = iStack100 - uStack112._4_4_;\n                    }\n                    uVar13 = uStack112._4_4_ + arg4;\n                }\n                else {\n                    uVar13 = 0;\n                }\n            }\n            else {\n                uVar13 = 0x7fff;\n            }\n        }\n        else {\ncode_r0x00014004240a:\n            uVar13 = *(arg1 + 0x19);\n        }\n        fcn.140041678(arg1, arg2_00, uVar1, uVar13);\n    }\n    puVar3 = fcn.14004152c(arg1, auStackX8, arg2_00, uVar1);\n    *arg2 = *puVar3;\n    if ((arg3 & 0x40) != 0) {\n        auStackX8[0] = *(arg1 + 0x24);\n        uVar13 = uVar14 & 0xffffffff;\n        iVar9 = uVar13;\n        *(arg1 + 0x24) = iVar6;\n        uStack136 = uVar14;\n        if (uVar14 < uVar16) {\n            piVar12 = arg2_00 + 4;\n            piVar4 = piVar12;\n            uVar7 = uVar16;\n            do {\n                if (((*(piVar4 + 5) & 1) != 0) && (*piVar4 != iVar6)) {\n                    uVar13 = uVar13 + 1;\n                }\n                iVar9 = uVar13;\n                piVar4 = piVar4 + 8;\n                uVar7 = uVar7 - 1;\n            } while (uVar7 != 0);\n            arg2 = uStackX16;\n            if (iVar6 < iVar9) {\n                uVar2 = SUB168(ZEXT816(0x18) * ZEXT816(iVar9), 0);\n                if (SUB168(ZEXT816(0x18) * ZEXT816(iVar9) >> 0x40, 0) != 0) {\n                    uVar2 = 0xffffffffffffffff;\n                }\n                uStack136 = fcn.140003694(uVar2);\n                iVar8 = 0;\n                iVar5 = iVar9;\n                iStack120 = 0;\n                iStack128 = 0;\n                uVar13 = uVar14 & 0xffffffff;\n                puVar15 = uStack136 + 8;\n                uStack112 = iVar5;\n                do {\n                    iVar9 = uVar13;\n                    if (iVar5 <= iVar8) break;\n                    if (((*(piVar12 + 5) & 1) != 0) && (*piVar12 != 0)) {\n                        puVar15[-2] = uVar14;\n                        puVar15[-1] = *piVar12;\n                        (**(*arg1 + 0x310))(arg1, uVar14 & 0xffffffff);\n                        fcn.14001b7f0(arg1, &uStack96);\n                        *puVar15 = uStack96;\n                        puVar15[1] = uStack92;\n                        puVar15[2] = uStack88;\n                        puVar15[3] = uStack84;\n                        iVar8 = iStack128 + 1;\n                        uVar13 = iVar9 + 1;\n                        puVar15 = puVar15 + 6;\n                        iVar5 = uStack112;\n                        iStack128 = iVar8;\n                    }\n                    iVar9 = uVar13;\n                    iStack120 = iStack120 + 1;\n                    uVar14 = uVar14 + 1;\n                    piVar12 = piVar12 + 8;\n                } while (iStack120 < uVar16);\n                uVar14 = 0;\n                arg2 = uStackX16;\n                arg3._0_4_ = uStackX24;\n            }\n        }\n        if (((*(arg1 + 0xe4) & 1) != 0) && ((*(arg1 + 0xe4) & 4) != 0)) {\n            *(arg1 + 0x19) = *arg2;\n        }\n        uVar13 = uVar14 & 0xffffffff;\n        uVar16 = arg2_00;\n        if (uVar14 < uVar1) {\n            do {\n                fcn.140041294(arg1, uVar13, uVar16);\n                uVar10 = uVar13 + 1;\n                uVar13 = uVar10;\n                uVar16 = uVar16 + 0x20;\n            } while (uVar10 < uVar1);\n            uVar14 = 0;\n        }\n        if (uVar14 < iVar9) {\n            iVar5 = iVar9;\n            if (uVar14 < iVar5) {\n                puVar3 = uStack136 + 8;\n                do {\n                    iVar8 = fcn.1400150a4(arg1, *(puVar3 + -4));\n                    if (iVar8 != 0) {\n                        (*_sym.imp.USER32.dll_GetWindowRect)();\n                        iVar9 = uStack112 - *puVar3;\n                        iVar6 = uStack112._4_4_ - (*puVar3 >> 0x20);\n                        (**(*arg1 + 0x310))(arg1);\n                        fcn.140015950(iVar8, 0, iVar9 + uStack112, iVar6 + uStack112._4_4_);\n                    }\n                    puVar3 = puVar3 + 3;\n                    iVar5 = iVar5 + -1;\n                } while (iVar5 != 0);\n            }\n            fcn.1400036d8(uStack136);\n        }\n        *(arg1 + 0x24) = auStackX8[0];\n        arg2 = uStackX16;\n    }\n    fcn.1400036d8(arg2_00);\ncode_r0x000140042714:\n    (*_sym.imp.USER32.dll_SetRectEmpty)(&uStack112);\n    (**(*arg1 + 0x290))(arg1, &uStack112);\n    *(arg2 + 4) = *(arg2 + 4) + (uStack112._4_4_ - iStack100);\n    *arg2 = *arg2 + (uStack112 - iStack104);\n    fcn.1400566b8(arg1, &uStackX16, arg3 & 1, arg3 & 2);\n    iVar6 = uStackX16;\n    if (*arg2 != iVar6 && iVar6 <= *arg2) {\n        iVar6 = *arg2;\n    }\n    *arg2 = iVar6;\n    if (*(arg2 + 4) != uStackX16._4_4_ && uStackX16._4_4_ <= *(arg2 + 4)) {\n        uStackX16._4_4_ = *(arg2 + 4);\n    }\n    *(arg2 + 4) = uStackX16._4_4_;\n    return arg2;\n}\n",
        "token_count": 2442
    },
    "14006c9f": {
        "rules": [
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0",
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint8_t * fcn.14006c9f8(uint8_t *arg1, uint8_t *arg2)\n\n{\n    uint *puVar1;\n    uint8_t *puVar2;\n    uchar auStack40 [8];\n    int64_t iStack32;\n    int64_t iStack24;\n    char cStack16;\n    \n    if ((arg1 == NULL) || (arg2 == NULL)) {\n        puVar1 = fcn.14006abb0();\n        *puVar1 = 0x16;\n        fcn.140070df0(0, 0, 0, 0);\n    }\n    else if (arg1 < arg2) {\n        fcn.14006b7c8(auStack40, 0);\n        if (*(iStack32 + 8) == 0) {\n            if (cStack16 == '\\0') {\n                return arg2 + -1;\n            }\n            *(iStack24 + 200) = *(iStack24 + 200) & 0xfffffffd;\n            return arg2 + -1;\n        }\n        puVar2 = arg2 + -1;\n        do {\n            puVar2 = puVar2 + -1;\n            if (puVar2 < arg1) break;\n        } while ((*(*puVar2 + 0x1d + iStack32) & 4) != 0);\n        if (cStack16 != '\\0') {\n            *(iStack24 + 200) = *(iStack24 + 200) & 0xfffffffd;\n        }\n        return arg2 + (-1 - (arg2 - puVar2 & 1));\n    }\n    return NULL;\n}\n",
        "token_count": 365
    },
    "14000a5c": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.14000a5c4(int64_t arg1, int64_t arg2, uint64_t arg3)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint64_t uVar4;\n    \n    if ((arg3 != 0) && (arg2 == 0)) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    if ((~*(arg1 + 0x20) & 1) == 0) {\n        if (arg3 != 0) {\n            do {\n                uVar4 = 0xfffffff;\n                if (arg3 < 0xfffffff) {\n                    uVar4 = arg3 & 0xffffffff;\n                }\n                uVar3 = uVar4 * 8;\n                uVar2 = fcn.140038594(arg1, arg2, uVar3);\n                if (uVar2 != uVar3) {\n                    fcn.1400384a8(3, 0);\n                    pcVar1 = swi(3);\n                    (*pcVar1)();\n                    return;\n                }\n                arg2 = arg2 + uVar4 * 8;\n                arg3 = arg3 - uVar4;\n            } while (arg3 != 0);\n        }\n    }\n    else if (arg3 != 0) {\n        do {\n            uVar4 = 0xfffffff;\n            if (arg3 < 0xfffffff) {\n                uVar4 = arg3 & 0xffffffff;\n            }\n            fcn.1400392d0(arg1, arg2, uVar4 << 3);\n            arg2 = arg2 + uVar4 * 8;\n            arg3 = arg3 - uVar4;\n        } while (arg3 != 0);\n    }\n    return;\n}\n",
        "token_count": 413
    },
    "14001611": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nulong * fcn.140016118(ulong *arg1, ulong *arg2)\n\n{\n    ulong uVar1;\n    uint32_t uVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    int64_t iVar5;\n    \n    iVar5 = arg1[1];\n    uVar1 = *arg1;\n    iVar4 = iVar5;\n    if (iVar5 != 0) {\n        do {\n            iVar3 = iVar4;\n            uVar2 = fcn.14001567c(*(iVar3 + 0x10));\n            iVar4 = iVar3;\n            if ((uVar2 >> 0x11 & 1) != 0) break;\n            iVar4 = *(iVar3 + 8);\n            iVar5 = iVar3;\n        } while (iVar4 != 0);\n        if (iVar4 != 0) {\n            arg2[1] = iVar4;\n            goto code_r0x000140016169;\n        }\n    }\n    arg2[1] = iVar5;\ncode_r0x000140016169:\n    *arg2 = uVar1;\n    return arg2;\n}\n",
        "token_count": 248
    },
    "14001618": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nint64_t * fcn.140016184(int64_t *arg1, int64_t *arg2)\n\n{\n    int64_t iVar1;\n    ulong *puVar2;\n    code *pcVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    int64_t *piVar6;\n    ulong *puVar7;\n    \n    iVar1 = *arg1;\n    *arg2 = iVar1;\n    if (iVar1 != *arg1) {\n        fcn.140020780();\n        pcVar3 = swi(3);\n        piVar6 = (*pcVar3)();\n        return piVar6;\n    }\n    puVar2 = arg1[1];\n    iVar4 = 1;\n    arg2[1] = puVar2;\n    puVar7 = puVar2;\n    do {\n        if (puVar2 == NULL) break;\n        if (puVar7 != NULL) {\n            puVar7 = *puVar7;\n        }\n        iVar4 = iVar4 + -1;\n    } while (0 < iVar4);\n    while( true ) {\n        if (puVar7 == NULL) {\n            return arg2;\n        }\n        uVar5 = fcn.14001567c(puVar7[2]);\n        if ((uVar5 >> 0x11 & 1) != 0) break;\n        puVar7 = *puVar7;\n        if (arg2[1] != 0) {\n            if (arg2[1] == NULL) {\n                fcn.140020780();\n                pcVar3 = swi(3);\n                piVar6 = (*pcVar3)();\n                return piVar6;\n            }\n            arg2[1] = *arg2[1];\n        }\n    }\n    return arg2;\n}\n",
        "token_count": 391
    },
    "1400162c": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.1400162cc(int64_t *arg1)\n\n{\n    int64_t iVar1;\n    int64_t *arg1_00;\n    int64_t iVar2;\n    code *pcVar3;\n    bool bVar4;\n    uint32_t uVar5;\n    int64_t *piVar6;\n    uint64_t uVar7;\n    uchar auStack24 [16];\n    \n    iVar1 = *arg1;\n    piVar6 = arg1[1];\n    bVar4 = false;\n    do {\n        if (((piVar6 == NULL) || (piVar6 = *piVar6,  piVar6 == NULL)) ||\n           (uVar5 = fcn.14001567c(piVar6[2]),  (uVar5 >> 0x11 & 1) != 0)) {\n            piVar6 = fcn.140016118(arg1, auStack24);\n            if (iVar1 != *piVar6) {\n                fcn.140020780();\n                pcVar3 = swi(3);\n                (*pcVar3)();\n                return;\n            }\n            piVar6 = piVar6[1];\n            if (piVar6 == NULL) {\n                return;\n            }\n            if (bVar4) {\n                return;\n            }\n            bVar4 = true;\n        }\n        arg1_00 = piVar6[2];\n        iVar2 = *arg1_00;\n        if (((iVar2 == 0) || (uVar7 = (*_sym.imp.USER32.dll_SendMessageA)(iVar2, 0x87, 0, 0),  (uVar7 >> 8 & 1) == 0))\n           && ((uVar5 = fcn.14001567c(arg1_00),  (uVar5 >> 0x1c & 1) != 0 && ((uVar5 >> 0x1b & 1) == 0)))) {\n            if (*arg1 == iVar1) {\n                arg1[1] = piVar6;\n                return;\n            }\n            fcn.140020780();\n            pcVar3 = swi(3);\n            (*pcVar3)();\n            return;\n        }\n    } while( true );\n}\n",
        "token_count": 486
    },
    "14001639": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.14001639c(int64_t *arg1)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    code *pcVar3;\n    bool bVar4;\n    uint32_t uVar5;\n    int64_t *piVar6;\n    uint64_t uVar7;\n    int64_t iVar8;\n    uchar auStack24 [16];\n    \n    iVar1 = *arg1;\n    iVar8 = arg1[1];\n    bVar4 = false;\n    do {\n        if (iVar8 == 0) goto code_r0x0001400163dc;\n        uVar5 = fcn.14001567c(*(iVar8 + 0x10));\n        if ((uVar5 >> 0x11 & 1) != 0) goto code_r0x0001400163dc;\n        iVar8 = *(iVar8 + 8);\n        while (iVar8 == 0) {\ncode_r0x0001400163dc:\n            piVar6 = fcn.140016184(arg1, auStack24);\n            if (iVar1 != *piVar6) {\n                fcn.140020780();\n                pcVar3 = swi(3);\n                (*pcVar3)();\n                return;\n            }\n            iVar8 = piVar6[1];\n            if (iVar8 == 0) {\n                return;\n            }\n            if (bVar4) {\n                return;\n            }\n            bVar4 = true;\n        }\n        piVar6 = *(iVar8 + 0x10);\n        iVar2 = *piVar6;\n        if ((((iVar2 == 0) || (uVar7 = (*_sym.imp.USER32.dll_SendMessageA)(iVar2, 0x87, 0, 0),  (uVar7 >> 8 & 1) == 0))\n            && (uVar5 = fcn.14001567c(piVar6),  (uVar5 >> 0x1c & 1) != 0)) && ((uVar5 >> 0x1b & 1) == 0)) {\n            if (*arg1 == iVar1) {\n                arg1[1] = iVar8;\n                return;\n            }\n            fcn.140020780();\n            pcVar3 = swi(3);\n            (*pcVar3)();\n            return;\n        }\n    } while( true );\n}\n",
        "token_count": 517
    },
    "140022f4": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint64_t fcn.140022f44(int64_t lpCriticalSection)\n\n{\n    uint32_t *puVar1;\n    int32_t iVar2;\n    code *pcVar3;\n    uint8_t *puVar4;\n    uint64_t uVar5;\n    ulong uVar6;\n    int64_t iVar7;\n    uint32_t uVar8;\n    uint32_t uVar9;\n    \n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(lpCriticalSection + 0x28);\n    iVar2 = *(lpCriticalSection + 4);\n    uVar8 = *(lpCriticalSection + 8);\n    if ((iVar2 <= uVar8) || ((*(*(lpCriticalSection + 0x10) + uVar8 * 0x10) & 1) != 0)) {\n        uVar8 = 1;\n        iVar7 = 1;\n        if (1 < iVar2) {\n            puVar4 = *(lpCriticalSection + 0x10);\n            do {\n                puVar4 = puVar4 + 0x10;\n                if ((*puVar4 & 1) == 0) break;\n                iVar7 = iVar7 + 1;\n                uVar8 = uVar8 + 1;\n            } while (iVar7 < iVar2);\n        }\n        if (iVar2 <= uVar8) {\n            uVar9 = iVar2 + 0x20;\n            if (*(lpCriticalSection + 0x10) == 0) {\n                if (0xffffffff < uVar9 << 4) {\n                    fcn.1400031e0(0x80070057);\n                    pcVar3 = swi(3);\n                    uVar5 = (*pcVar3)();\n                    return uVar5;\n                }\n                iVar7 = (*_sym.imp.KERNEL32.dll_GlobalAlloc)(2);\n            }\n            else {\n                uVar6 = (*_sym.imp.KERNEL32.dll_GlobalHandle)();\n                (*_sym.imp.KERNEL32.dll_GlobalUnlock)(uVar6);\n                if (0xffffffff < uVar9 << 4) {\n                    fcn.1400031e0(0x80070057);\n                    pcVar3 = swi(3);\n                    uVar5 = (*pcVar3)();\n                    return uVar5;\n                }\n                iVar7 = (*_sym.imp.KERNEL32.dll_GlobalReAlloc)(uVar6, uVar9 << 4 & 0xffffffff, 0x2002);\n            }\n            if (iVar7 == 0) {\n                if (*(lpCriticalSection + 0x10) != 0) {\n                    uVar6 = (*_sym.imp.KERNEL32.dll_GlobalHandle)();\n                    (*_sym.imp.KERNEL32.dll_GlobalLock)(uVar6);\n                }\n                (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(lpCriticalSection + 0x28);\n                fcn.140020738();\n                pcVar3 = swi(3);\n                uVar5 = (*pcVar3)();\n                return uVar5;\n            }\n            iVar7 = (*_sym.imp.KERNEL32.dll_GlobalLock)(iVar7);\n            fcn.1400698a0(*(lpCriticalSection + 4) * 0x10 + iVar7, 0, uVar9 - *(lpCriticalSection + 4) << 4);\n            *(lpCriticalSection + 4) = uVar9;\n            *(lpCriticalSection + 0x10) = iVar7;\n        }\n    }\n    if (*(lpCriticalSection + 0xc) <= uVar8) {\n        *(lpCriticalSection + 0xc) = uVar8 + 1;\n    }\n    puVar1 = *(lpCriticalSection + 0x10) + uVar8 * 0x10;\n    *puVar1 = *puVar1 | 1;\n    *(lpCriticalSection + 8) = uVar8 + 1;\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(lpCriticalSection + 0x28);\n    return uVar8;\n}\n",
        "token_count": 851
    },
    "14003732": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nint64_t fcn.140037320(int64_t arg1, int64_t arg2, ulong arg3)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    ulong uVar3;\n    int64_t iVar4;\n    \n    if (arg2 == 0) {\ncode_r0x0001400373e6:\n        uVar3 = (*_sym.imp.USER32.dll_GetTopWindow)(*(arg1 + 0x40));\n        iVar4 = fcn.14000fc08(uVar3);\n        if (iVar4 == 0) {\n            return arg1;\n        }\n    }\n    else {\n        uVar3 = *(arg2 + 0x40);\n        while( true ) {\n            uVar3 = (*_sym.imp.USER32.dll_GetWindow)(uVar3, 2);\n            iVar4 = fcn.14000fc08(uVar3);\n            if (iVar4 != 0) break;\n            uVar3 = (*_sym.imp.USER32.dll_GetParent)(*(arg2 + 0x40));\n            uVar3 = fcn.14000fc08(uVar3);\n            arg2 = fcn.1400372a4(arg1, uVar3);\n            if ((arg2 == 0) || (arg2 == arg1)) goto code_r0x0001400373e6;\n            uVar3 = *(arg2 + 0x40);\n        }\n        uVar3 = (*_sym.imp.USER32.dll_GetWindow)(*(arg2 + 0x40), 2);\n        iVar4 = fcn.14000fc08(uVar3);\n    }\n    uVar1 = (*_sym.imp.USER32.dll_GetWindowLongA)(*(iVar4 + 0x40));\n    if ((uVar1 >> 0x10 & 1) != 0) {\n        if ((((arg3 & 1) == 0) || (iVar2 = (*_sym.imp.USER32.dll_IsWindowVisible)(*(iVar4 + 0x40)),  iVar2 != 0)) &&\n           (((arg3 & 2) == 0 || (iVar2 = fcn.14001549c(iVar4),  iVar2 != 0)))) {\n            arg1 = iVar4;\n            iVar4 = 0;\n        }\n        iVar4 = fcn.140037320(arg1, iVar4, arg3);\n    }\n    return iVar4;\n}\n",
        "token_count": 525
    },
    "14003859": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint64_t fcn.140038594(int64_t arg1, int64_t arg2, ulong arg3)\n\n{\n    int64_t *piVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uint64_t uVar6;\n    int32_t iVar7;\n    uint32_t uVar8;\n    int32_t iVar9;\n    uint32_t uVar10;\n    int64_t iVar11;\n    \n    if ((arg3 == 0) || (arg2 == 0)) {\n        uVar6 = 0;\n    }\n    else {\n        if ((*(arg1 + 0x20) & 1) == 0) {\n            fcn.1400384a8(4, *(arg1 + 0x18));\n            pcVar2 = swi(3);\n            uVar6 = (*pcVar2)();\n            return uVar6;\n        }\n        piVar1 = arg1 + 0x40;\n        uVar8 = *piVar1 - *(arg1 + 0x38);\n        uVar6 = uVar8;\n        if (arg3 < uVar8) {\n            uVar6 = arg3;\n        }\n        iVar3 = fcn.140069a48(arg2, arg3, *(arg1 + 0x38), uVar6);\n        if (iVar3 != 0) {\n            if (iVar3 == 0xc) {\n                fcn.140020738();\n                pcVar2 = swi(3);\n                uVar6 = (*pcVar2)();\n                return uVar6;\n            }\n            if ((iVar3 == 0x16) || (iVar3 == 0x22)) {\n                fcn.140020780();\n                pcVar2 = swi(3);\n                uVar6 = (*pcVar2)();\n                return uVar6;\n            }\n            if (iVar3 != 0x50) {\n                fcn.140020780();\n                pcVar2 = swi(3);\n                uVar6 = (*pcVar2)();\n                return uVar6;\n            }\n        }\n        *(arg1 + 0x38) = *(arg1 + 0x38) + uVar6;\n        arg2 = arg2 + uVar6;\n        uVar8 = arg3 - uVar6;\n        if (uVar8 != 0) {\n            iVar9 = uVar8 - uVar8 % *(arg1 + 0x28);\n            iVar7 = 0;\n            iVar3 = iVar9;\n            do {\n                uVar4 = (**(**(arg1 + 0x30) + 0x68))(*(arg1 + 0x30), arg2, iVar3);\n                iVar7 = iVar7 + uVar4;\n                iVar3 = iVar3 - uVar4;\n                arg2 = arg2 + uVar4;\n                if (uVar4 == 0) break;\n            } while (iVar3 != 0);\n            uVar8 = uVar8 - iVar7;\n            if ((uVar8 != 0) && (iVar7 == iVar9)) {\n                if (*(arg1 + 0xc) == 0) {\n                    uVar4 = uVar8;\n                    if ((*(arg1 + 0x10) == 0) && (uVar4 = *(arg1 + 0x28),  *(arg1 + 0x28) < uVar8)) {\n                        uVar4 = uVar8;\n                    }\n                    iVar11 = *(arg1 + 0x48);\n                    uVar10 = 0;\n                    do {\n                        uVar5 = (**(**(arg1 + 0x30) + 0x68))(*(arg1 + 0x30), iVar11, uVar4);\n                        uVar10 = uVar10 + uVar5;\n                        uVar4 = uVar4 - uVar5;\n                        iVar11 = iVar11 + uVar5;\n                        if ((uVar5 == 0) || (uVar4 == 0)) break;\n                    } while (uVar10 < uVar8);\n                    iVar11 = *(arg1 + 0x48);\n                    *piVar1 = uVar10 + iVar11;\n                }\n                else {\n                    (**(**(arg1 + 0x30) + 0xa0))(*(arg1 + 0x30), 0, *(arg1 + 0x28), arg1 + 0x48, piVar1);\n                    iVar11 = *(arg1 + 0x48);\n                }\n                uVar4 = *piVar1 - iVar11;\n                *(arg1 + 0x38) = iVar11;\n                if (uVar8 < uVar4) {\n                    uVar4 = uVar8;\n                }\n                iVar3 = fcn.140069a48(arg2, uVar8, iVar11, uVar4);\n                if (iVar3 != 0) {\n                    if (iVar3 == 0xc) {\n                        fcn.140020738();\n                        pcVar2 = swi(3);\n                        uVar6 = (*pcVar2)();\n                        return uVar6;\n                    }\n                    if ((iVar3 == 0x16) || (iVar3 == 0x22)) {\n                        fcn.140020780();\n                        pcVar2 = swi(3);\n                        uVar6 = (*pcVar2)();\n                        return uVar6;\n                    }\n                    if (iVar3 != 0x50) {\n                        fcn.140020780();\n                        pcVar2 = swi(3);\n                        uVar6 = (*pcVar2)();\n                        return uVar6;\n                    }\n                }\n                *(arg1 + 0x38) = *(arg1 + 0x38) + uVar4;\n                uVar8 = uVar8 - uVar4;\n            }\n        }\n        uVar6 = arg3 - uVar8;\n    }\n    return uVar6;\n}\n",
        "token_count": 1304
    },
    "14003877": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.140038770(int64_t arg1)\n\n{\n    int64_t *piVar1;\n    int64_t iVar2;\n    \n    if ((*(arg1 + 0x20) & 1) == 0) {\n        piVar1 = arg1 + 0x48;\n        if (*(arg1 + 0xc) == 0) {\n            iVar2 = *piVar1;\n            if (*(arg1 + 0x38) != iVar2) {\n                (**(**(arg1 + 0x30) + 0x70))(*(arg1 + 0x30), iVar2, *(arg1 + 0x38) - iVar2);\n            }\n        }\n        else {\n            if (*(arg1 + 0x38) != *piVar1) {\n                (**(**(arg1 + 0x30) + 0xa0))(*(arg1 + 0x30), 2, *(arg1 + 0x38) - *piVar1, 0, 0);\n            }\n            (**(**(arg1 + 0x30) + 0xa0))(*(arg1 + 0x30), 1, *(arg1 + 0x28), piVar1, arg1 + 0x40);\n        }\n        iVar2 = *piVar1;\n    }\n    else {\n        if (*(arg1 + 0x40) != *(arg1 + 0x38)) {\n            (**(**(arg1 + 0x30) + 0x50))(*(arg1 + 0x30), *(arg1 + 0x38) - *(arg1 + 0x40), 1);\n        }\n        iVar2 = *(arg1 + 0x40);\n    }\n    *(arg1 + 0x38) = iVar2;\n    return;\n}\n",
        "token_count": 400
    },
    "140038c6": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint64_t fcn.140038c64(int64_t arg1, uint *arg2)\n\n{\n    uint32_t uVar1;\n    uint8_t *puVar2;\n    uint32_t *puVar3;\n    code *pcVar4;\n    uint64_t uVar5;\n    uint16_t *puVar6;\n    uint8_t uVar7;\n    uint16_t uVar8;\n    \n    *arg2 = 1;\n    if ((*(arg1 + 0x20) & 1) == 0) {\n        fcn.1400384a8(4, *(arg1 + 0x18));\n        pcVar4 = swi(3);\n        uVar5 = (*pcVar4)();\n        return uVar5;\n    }\n    uVar5 = *(arg1 + 0x38) + 1;\n    if (*(arg1 + 0x40) <= uVar5 && uVar5 != *(arg1 + 0x40)) {\n        fcn.140038830(arg1, (*(arg1 + 0x38) - *(arg1 + 0x40)) + 1);\n    }\n    puVar2 = *(arg1 + 0x38);\n    uVar7 = *puVar2;\n    *(arg1 + 0x38) = puVar2 + 1;\n    if (uVar7 == 0xff) {\n        if ((*(arg1 + 0x20) & 1) == 0) {\n            fcn.1400384a8(4, *(arg1 + 0x18));\n            pcVar4 = swi(3);\n            uVar5 = (*pcVar4)();\n            return uVar5;\n        }\n        if (*(arg1 + 0x40) <= puVar2 + 3 && puVar2 + 3 != *(arg1 + 0x40)) {\n            fcn.140038830(arg1, (*(arg1 + 0x38) - *(arg1 + 0x40)) + 2);\n        }\n        uVar8 = **(arg1 + 0x38);\n        puVar6 = *(arg1 + 0x38) + 1;\n        *(arg1 + 0x38) = puVar6;\n        if (uVar8 == 0xfffe) {\n            *arg2 = 2;\n            if ((*(arg1 + 0x20) & 1) == 0) {\n                fcn.1400384a8(4, *(arg1 + 0x18));\n                pcVar4 = swi(3);\n                uVar5 = (*pcVar4)();\n                return uVar5;\n            }\n            uVar5 = *(arg1 + 0x38) + 1;\n            if (*(arg1 + 0x40) <= uVar5 && uVar5 != *(arg1 + 0x40)) {\n                fcn.140038830(arg1, (*(arg1 + 0x38) - *(arg1 + 0x40)) + 1);\n            }\n            puVar2 = *(arg1 + 0x38);\n            uVar7 = *puVar2;\n            *(arg1 + 0x38) = puVar2 + 1;\n            if (uVar7 != 0xff) goto code_r0x000140038cbb;\n            if ((*(arg1 + 0x20) & 1) == 0) {\n                fcn.1400384a8(4, *(arg1 + 0x18));\n                pcVar4 = swi(3);\n                uVar5 = (*pcVar4)();\n                return uVar5;\n            }\n            if (*(arg1 + 0x40) <= puVar2 + 3 && puVar2 + 3 != *(arg1 + 0x40)) {\n                fcn.140038830(arg1, (*(arg1 + 0x38) - *(arg1 + 0x40)) + 2);\n            }\n            uVar8 = **(arg1 + 0x38);\n            puVar6 = *(arg1 + 0x38) + 1;\n            *(arg1 + 0x38) = puVar6;\n        }\n        if (uVar8 < 0xffff) {\n            uVar5 = uVar8;\n        }\n        else {\n            if ((*(arg1 + 0x20) & 1) == 0) {\n                fcn.1400384a8(4, *(arg1 + 0x18));\n                pcVar4 = swi(3);\n                uVar5 = (*pcVar4)();\n                return uVar5;\n            }\n            if (*(arg1 + 0x40) <= puVar6 + 2 && puVar6 + 2 != *(arg1 + 0x40)) {\n                fcn.140038830(arg1, (*(arg1 + 0x38) - *(arg1 + 0x40)) + 4);\n            }\n            puVar3 = *(arg1 + 0x38);\n            uVar1 = *puVar3;\n            uVar5 = uVar1;\n            *(arg1 + 0x38) = puVar3 + 1;\n            if (uVar1 == 0xffffffff) {\n                if ((*(arg1 + 0x20) & 1) == 0) {\n                    fcn.1400384a8(4, *(arg1 + 0x18));\n                    pcVar4 = swi(3);\n                    uVar5 = (*pcVar4)();\n                    return uVar5;\n                }\n                if (*(arg1 + 0x40) <= puVar3 + 3 && puVar3 + 3 != *(arg1 + 0x40)) {\n                    fcn.140038830(arg1, (*(arg1 + 0x38) - *(arg1 + 0x40)) + 8);\n                }\n                uVar5 = **(arg1 + 0x38);\n                *(arg1 + 0x38) = *(arg1 + 0x38) + 1;\n            }\n        }\n    }\n    else {\ncode_r0x000140038cbb:\n        uVar5 = uVar7;\n    }\n    return uVar5;\n}\n",
        "token_count": 1370
    },
    "1400391b": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.1400391b0(int64_t arg1, uint32_t *arg2)\n\n{\n    uint16_t uVar1;\n    code *pcVar2;\n    uint32_t uVar3;\n    uint64_t uVar4;\n    uchar auStack120 [32];\n    uchar auStack88 [64];\n    uint64_t uStack24;\n    \n    uStack24 = *0x1400d96f0 ^ auStack120;\n    if (arg2 != NULL) {\n        if ((*(arg1 + 0x20) & 1) == 0) {\n            fcn.1400384a8(4, *(arg1 + 0x18));\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n        uVar4 = *(arg1 + 0x38) + 2;\n        if (*(arg1 + 0x40) <= uVar4 && uVar4 != *(arg1 + 0x40)) {\n            fcn.140038830(arg1, (*(arg1 + 0x38) - *(arg1 + 0x40)) + 2);\n        }\n        uVar1 = **(arg1 + 0x38);\n        *(arg1 + 0x38) = *(arg1 + 0x38) + 1;\n        *arg2 = uVar1;\n        if ((*(arg1 + 0x20) & 1) == 0) {\n            fcn.1400384a8(4, *(arg1 + 0x18));\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n        uVar4 = *(arg1 + 0x38) + 2;\n        if (*(arg1 + 0x40) <= uVar4 && uVar4 != *(arg1 + 0x40)) {\n            fcn.140038830(arg1, (*(arg1 + 0x38) - *(arg1 + 0x40)) + 2);\n        }\n        uVar1 = **(arg1 + 0x38);\n        *(arg1 + 0x38) = *(arg1 + 0x38) + 1;\n        if ((uVar1 < 0x40) && (uVar3 = fcn.140038594(arg1, auStack88, uVar1),  uVar3 == uVar1)) {\n            auStack88[uVar1] = 0;\n            fcn.140039148(auStack88);\n        }\n    }\n    fcn.140069870(uStack24 ^ auStack120);\n    return;\n}\n",
        "token_count": 579
    },
    "1400392d": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.1400392d0(int64_t arg1, int64_t arg2, ulong arg3)\n\n{\n    int64_t *piVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint64_t arg4;\n    \n    if ((arg3 != 0) && (arg2 != 0)) {\n        if ((~*(arg1 + 0x20) & 1) == 0) {\n            fcn.1400384a8(2, *(arg1 + 0x18));\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n        piVar1 = arg1 + 0x40;\n        uVar4 = *piVar1 - *(arg1 + 0x38);\n        arg4 = uVar4;\n        if (arg3 < uVar4) {\n            arg4 = arg3;\n        }\n        iVar3 = fcn.140069a48(*(arg1 + 0x38), *piVar1 - *(arg1 + 0x38), arg2, arg4);\n        if (iVar3 != 0) {\n            if (iVar3 == 0xc) {\n                fcn.140020738();\n                pcVar2 = swi(3);\n                (*pcVar2)();\n                return;\n            }\n            if ((iVar3 == 0x16) || (iVar3 == 0x22)) {\n                fcn.140020780();\n                pcVar2 = swi(3);\n                (*pcVar2)();\n                return;\n            }\n            if (iVar3 != 0x50) {\n                fcn.140020780();\n                pcVar2 = swi(3);\n                (*pcVar2)();\n                return;\n            }\n        }\n        *(arg1 + 0x38) = *(arg1 + 0x38) + arg4;\n        arg3._0_4_ = arg3 - arg4;\n        if (arg3 != 0) {\n            fcn.140038770(arg1);\n            uVar4 = arg3 - arg3 % *(arg1 + 0x28);\n            (**(**(arg1 + 0x30) + 0x70))(*(arg1 + 0x30), arg2 + arg4, uVar4);\n            arg3._0_4_ = arg3 - uVar4;\n            if (*(arg1 + 0xc) != 0) {\n                (**(**(arg1 + 0x30) + 0xa0))(*(arg1 + 0x30), 1, *(arg1 + 0x28), arg1 + 0x48, piVar1);\n                *(arg1 + 0x38) = *(arg1 + 0x48);\n            }\n            if (*(arg1 + 0x28) <= arg3) {\n                fcn.140020780();\n                pcVar2 = swi(3);\n                (*pcVar2)();\n                return;\n            }\n            if (*(arg1 + 0x38) != *(arg1 + 0x48)) {\n                fcn.140020780();\n                pcVar2 = swi(3);\n                (*pcVar2)();\n                return;\n            }\n            iVar3 = fcn.140069a48(*(arg1 + 0x38), arg3, arg2 + arg4 + uVar4, arg3);\n            if (iVar3 != 0) {\n                if (iVar3 == 0xc) {\n                    fcn.140020738();\n                    pcVar2 = swi(3);\n                    (*pcVar2)();\n                    return;\n                }\n                if ((iVar3 == 0x16) || (iVar3 == 0x22)) {\n                    fcn.140020780();\n                    pcVar2 = swi(3);\n                    (*pcVar2)();\n                    return;\n                }\n                if (iVar3 != 0x50) {\n                    fcn.140020780();\n                    pcVar2 = swi(3);\n                    (*pcVar2)();\n                    return;\n                }\n            }\n            *(arg1 + 0x38) = *(arg1 + 0x38) + arg3;\n        }\n    }\n    return;\n}\n",
        "token_count": 920
    },
    "14003944": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.14003944c(int64_t arg1, uint64_t arg2)\n\n{\n    code *pcVar1;\n    uint64_t uVar2;\n    \n    if (arg2 < 0xffff) {\n        if ((~*(arg1 + 0x20) & 1) == 0) {\n            fcn.1400384a8(2, *(arg1 + 0x18));\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        uVar2 = *(arg1 + 0x38) + 2;\n        if (*(arg1 + 0x40) <= uVar2 && uVar2 != *(arg1 + 0x40)) {\n            fcn.140038770(arg1);\n        }\n        **(arg1 + 0x38) = arg2;\n        *(arg1 + 0x38) = *(arg1 + 0x38) + 2;\n    }\n    else {\n        if ((~*(arg1 + 0x20) & 1) == 0) {\n            fcn.1400384a8(2, *(arg1 + 0x18));\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        uVar2 = *(arg1 + 0x38) + 2;\n        if (*(arg1 + 0x40) <= uVar2 && uVar2 != *(arg1 + 0x40)) {\n            fcn.140038770(arg1);\n        }\n        **(arg1 + 0x38) = 0xffff;\n        *(arg1 + 0x38) = *(arg1 + 0x38) + 2;\n        if (arg2 < 0xffffffff) {\n            if ((~*(arg1 + 0x20) & 1) == 0) {\n                fcn.1400384a8(2, *(arg1 + 0x18));\n                pcVar1 = swi(3);\n                (*pcVar1)();\n                return;\n            }\n            uVar2 = *(arg1 + 0x38) + 4;\n            if (*(arg1 + 0x40) <= uVar2 && uVar2 != *(arg1 + 0x40)) {\n                fcn.140038770(arg1);\n            }\n            **(arg1 + 0x38) = arg2;\n            *(arg1 + 0x38) = *(arg1 + 0x38) + 4;\n        }\n        else {\n            if ((~*(arg1 + 0x20) & 1) == 0) {\n                fcn.1400384a8(2, *(arg1 + 0x18));\n                pcVar1 = swi(3);\n                (*pcVar1)();\n                return;\n            }\n            uVar2 = *(arg1 + 0x38) + 4;\n            if (*(arg1 + 0x40) <= uVar2 && uVar2 != *(arg1 + 0x40)) {\n                fcn.140038770(arg1);\n            }\n            **(arg1 + 0x38) = 0xffffffff;\n            *(arg1 + 0x38) = *(arg1 + 0x38) + 4;\n            if ((~*(arg1 + 0x20) & 1) == 0) {\n                fcn.1400384a8(2, *(arg1 + 0x18));\n                pcVar1 = swi(3);\n                (*pcVar1)();\n                return;\n            }\n            uVar2 = *(arg1 + 0x38) + 8;\n            if (*(arg1 + 0x40) <= uVar2 && uVar2 != *(arg1 + 0x40)) {\n                fcn.140038770(arg1);\n            }\n            **(arg1 + 0x38) = arg2;\n            *(arg1 + 0x38) = *(arg1 + 0x38) + 8;\n        }\n    }\n    return;\n}\n",
        "token_count": 895
    },
    "14003959": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint64_t fcn.140039598(int64_t arg1)\n\n{\n    uint16_t uVar1;\n    uint32_t uVar2;\n    uint16_t *puVar3;\n    uint32_t *puVar4;\n    code *pcVar5;\n    uint64_t uVar6;\n    \n    if ((*(arg1 + 0x20) & 1) == 0) {\n        fcn.1400384a8(4, *(arg1 + 0x18));\n        pcVar5 = swi(3);\n        uVar6 = (*pcVar5)();\n        return uVar6;\n    }\n    uVar6 = *(arg1 + 0x38) + 2;\n    if (*(arg1 + 0x40) <= uVar6 && uVar6 != *(arg1 + 0x40)) {\n        fcn.140038830(arg1, (*(arg1 + 0x38) - *(arg1 + 0x40)) + 2);\n    }\n    puVar3 = *(arg1 + 0x38);\n    uVar1 = *puVar3;\n    *(arg1 + 0x38) = puVar3 + 1;\n    if (uVar1 == 0xffff) {\n        if ((*(arg1 + 0x20) & 1) == 0) {\n            fcn.1400384a8(4, *(arg1 + 0x18));\n            pcVar5 = swi(3);\n            uVar6 = (*pcVar5)();\n            return uVar6;\n        }\n        if (*(arg1 + 0x40) <= puVar3 + 3 && puVar3 + 3 != *(arg1 + 0x40)) {\n            fcn.140038830(arg1, (*(arg1 + 0x38) - *(arg1 + 0x40)) + 4);\n        }\n        puVar4 = *(arg1 + 0x38);\n        uVar2 = *puVar4;\n        uVar6 = uVar2;\n        *(arg1 + 0x38) = puVar4 + 1;\n        if (uVar2 == 0xffffffff) {\n            if ((*(arg1 + 0x20) & 1) == 0) {\n                fcn.1400384a8(4, *(arg1 + 0x18));\n                pcVar5 = swi(3);\n                uVar6 = (*pcVar5)();\n                return uVar6;\n            }\n            if (*(arg1 + 0x40) <= puVar4 + 3 && puVar4 + 3 != *(arg1 + 0x40)) {\n                fcn.140038830(arg1, (*(arg1 + 0x38) - *(arg1 + 0x40)) + 8);\n            }\n            uVar6 = **(arg1 + 0x38);\n            *(arg1 + 0x38) = *(arg1 + 0x38) + 1;\n        }\n    }\n    else {\n        uVar6 = uVar1;\n    }\n    return uVar6;\n}\n",
        "token_count": 683
    },
    "1400396b": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nint64_t fcn.1400396b4(int64_t arg1, int64_t arg2, ulong arg3)\n\n{\n    uint64_t uVar1;\n    char *pcVar2;\n    char cVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    \n    iVar5 = arg3;\n    if (arg3 < 0) {\n        iVar5 = -arg3;\n    }\n    if (arg2 == 0) {\n        arg2 = 0;\n    }\n    else {\n        for (iVar4 = 0; iVar4 < iVar5; iVar4 = iVar4 + 1) {\n            if ((*(arg1 + 0x20) & 1) == 0) {\n                fcn.1400384a8(4, *(arg1 + 0x18));\n            }\n            uVar1 = *(arg1 + 0x38) + 1;\n            if (*(arg1 + 0x40) <= uVar1 && uVar1 != *(arg1 + 0x40)) {\n                fcn.140038830(arg1, (*(arg1 + 0x38) - *(arg1 + 0x40)) + 1);\n            }\n            cVar3 = **(arg1 + 0x38);\n            pcVar2 = *(arg1 + 0x38) + 1;\n            *(arg1 + 0x38) = pcVar2;\n            if (cVar3 == '\\n') {\ncode_r0x000140039798:\n                if (arg3 != iVar5) {\n                    *(iVar4 + arg2) = cVar3;\n                    iVar4 = iVar4 + 1;\n                }\n                break;\n            }\n            if (cVar3 == '\\r') {\n                if ((*(arg1 + 0x20) & 1) == 0) {\n                    pcVar2 = fcn.1400384a8(4, *(arg1 + 0x18));\n                }\n                if (*(arg1 + 0x40) <= pcVar2 + 1 && pcVar2 + 1 != *(arg1 + 0x40)) {\n                    fcn.140038830(arg1, (*(arg1 + 0x38) - *(arg1 + 0x40)) + 1);\n                }\n                cVar3 = **(arg1 + 0x38);\n                *(arg1 + 0x38) = *(arg1 + 0x38) + 1;\n                goto code_r0x000140039798;\n            }\n            *(iVar4 + arg2) = cVar3;\n        }\n        *(iVar4 + arg2) = 0;\n    }\n    return arg2;\n}\n",
        "token_count": 591
    },
    "14003980": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.140039800(int64_t *lpString, int64_t arg2)\n\n{\n    int64_t *piVar1;\n    ushort uVar2;\n    int64_t arg3;\n    code *pcVar3;\n    uint16_t uVar4;\n    int32_t iVar5;\n    uint64_t uVar6;\n    uint32_t uVar7;\n    uint32_t uVar8;\n    \n    uVar4 = (*_sym.imp.KERNEL32.dll_lstrlenA)(*lpString);\n    uVar2 = *(lpString + 0xc);\n    if ((~*(arg2 + 0x20) & 1) == 0) {\n        fcn.1400384a8(2, *(arg2 + 0x18));\n        pcVar3 = swi(3);\n        (*pcVar3)();\n        return;\n    }\n    uVar6 = *(arg2 + 0x38) + 2;\n    if (*(arg2 + 0x40) <= uVar6 && uVar6 != *(arg2 + 0x40)) {\n        fcn.140038770(arg2);\n    }\n    **(arg2 + 0x38) = uVar2;\n    *(arg2 + 0x38) = *(arg2 + 0x38) + 2;\n    if ((~*(arg2 + 0x20) & 1) == 0) {\n        fcn.1400384a8(2, *(arg2 + 0x18));\n        pcVar3 = swi(3);\n        (*pcVar3)();\n        return;\n    }\n    uVar6 = *(arg2 + 0x38) + 2;\n    if (*(arg2 + 0x40) <= uVar6 && uVar6 != *(arg2 + 0x40)) {\n        fcn.140038770(arg2);\n    }\n    uVar7 = uVar4;\n    **(arg2 + 0x38) = uVar4;\n    *(arg2 + 0x38) = *(arg2 + 0x38) + 2;\n    arg3 = *lpString;\n    if ((uVar7 != 0) && (arg3 != 0)) {\n        if ((~*(arg2 + 0x20) & 1) == 0) {\n            fcn.1400384a8(2, *(arg2 + 0x18));\n            pcVar3 = swi(3);\n            (*pcVar3)();\n            return;\n        }\n        piVar1 = arg2 + 0x40;\n        uVar8 = *piVar1 - *(arg2 + 0x38);\n        if (uVar7 < uVar8) {\n            uVar8 = uVar7;\n        }\n        uVar6 = uVar8;\n        iVar5 = fcn.140069a48(*(arg2 + 0x38), *piVar1 - *(arg2 + 0x38), arg3, uVar6);\n        if (iVar5 != 0) {\n            if (iVar5 == 0xc) {\n                fcn.140020738();\n                pcVar3 = swi(3);\n                (*pcVar3)();\n                return;\n            }\n            if ((iVar5 == 0x16) || (iVar5 == 0x22)) {\n                fcn.140020780();\n                pcVar3 = swi(3);\n                (*pcVar3)();\n                return;\n            }\n            if (iVar5 != 0x50) {\n                fcn.140020780();\n                pcVar3 = swi(3);\n                (*pcVar3)();\n                return;\n            }\n        }\n        *(arg2 + 0x38) = *(arg2 + 0x38) + uVar6;\n        uVar7 = uVar7 - uVar8;\n        if (uVar7 != 0) {\n            fcn.140038770(arg2);\n            uVar8 = uVar7 - uVar7 % *(arg2 + 0x28);\n            (**(**(arg2 + 0x30) + 0x70))(*(arg2 + 0x30), arg3 + uVar6, uVar8);\n            uVar7 = uVar7 - uVar8;\n            if (*(arg2 + 0xc) != 0) {\n                (**(**(arg2 + 0x30) + 0xa0))(*(arg2 + 0x30), 1, *(arg2 + 0x28), arg2 + 0x48, piVar1);\n                *(arg2 + 0x38) = *(arg2 + 0x48);\n            }\n            if (*(arg2 + 0x28) <= uVar7) {\n                fcn.140020780();\n                pcVar3 = swi(3);\n                (*pcVar3)();\n                return;\n            }\n            if (*(arg2 + 0x38) != *(arg2 + 0x48)) {\n                fcn.140020780();\n                pcVar3 = swi(3);\n                (*pcVar3)();\n                return;\n            }\n            iVar5 = fcn.140069a48(*(arg2 + 0x38), uVar7, arg3 + uVar6 + uVar8, uVar7);\n            if (iVar5 != 0) {\n                if (iVar5 == 0xc) {\n                    fcn.140020738();\n                    pcVar3 = swi(3);\n                    (*pcVar3)();\n                    return;\n                }\n                if ((iVar5 == 0x16) || (iVar5 == 0x22)) {\n                    fcn.140020780();\n                    pcVar3 = swi(3);\n                    (*pcVar3)();\n                    return;\n                }\n                if (iVar5 != 0x50) {\n                    fcn.140020780();\n                    pcVar3 = swi(3);\n                    (*pcVar3)();\n                    return;\n                }\n            }\n            *(arg2 + 0x38) = *(arg2 + 0x38) + uVar7;\n        }\n    }\n    return;\n}\n",
        "token_count": 1334
    },
    "14003d0a": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nint64_t fcn.14003d0ac(int64_t arg1, ulong *pvarg)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int64_t iVar4;\n    uint64_t uVar5;\n    \n    uVar2 = (*_sym.imp.OLEAUT32.dll_VariantInit)(*pvarg);\n    if ((~*(arg1 + 0x20) & 1) == 0) {\n        fcn.1400384a8(2, *(arg1 + 0x18));\n        pcVar1 = swi(3);\n        iVar4 = (*pcVar1)();\n        return iVar4;\n    }\n    uVar5 = *(arg1 + 0x38) + 4;\n    if (*(arg1 + 0x40) <= uVar5 && uVar5 != *(arg1 + 0x40)) {\n        fcn.140038770(arg1);\n    }\n    **(arg1 + 0x38) = uVar2;\n    *(arg1 + 0x38) = *(arg1 + 0x38) + 4;\n    iVar3 = (*_sym.imp.OLEAUT32.dll_VariantInit)(*pvarg);\n    if (iVar3 != 0) {\n        iVar3 = (*_sym.imp.OLEAUT32.dll_VariantInit)(*pvarg);\n        fcn.1400392d0(arg1, *pvarg, iVar3 * 2);\n    }\n    (*_sym.imp.OLEAUT32.dll_SysStringLen)(*pvarg);\n    return arg1;\n}\n",
        "token_count": 348
    },
    "14003d15": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nint64_t fcn.14003d15c(int64_t arg1, int64_t *arg2)\n\n{\n    int32_t iVar1;\n    code *pcVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    int64_t iVar5;\n    uint64_t uVar6;\n    int64_t iStackX8;\n    \n    if ((*(arg1 + 0x20) & 1) == 0) {\n        fcn.1400384a8(4, *(arg1 + 0x18));\n        pcVar2 = swi(3);\n        iVar5 = (*pcVar2)();\n        return iVar5;\n    }\n    uVar6 = *(arg1 + 0x38) + 4;\n    if (*(arg1 + 0x40) <= uVar6 && uVar6 != *(arg1 + 0x40)) {\n        fcn.140038830(arg1, (*(arg1 + 0x38) - *(arg1 + 0x40)) + 4);\n    }\n    iVar1 = **(arg1 + 0x38);\n    *(arg1 + 0x38) = *(arg1 + 0x38) + 1;\n    if (iVar1 == 0) {\n        (*_sym.imp.OLEAUT32.dll_SysStringLen)(*arg2);\n        *arg2 = 0;\n    }\n    else {\n        iStackX8 = *arg2;\n        *arg2 = 0;\n        (*_sym.imp.OLEAUT32.dll_SysFreeString)(&iStackX8, 0);\n        uVar3 = iVar1 * 2;\n        uVar4 = fcn.140038594(arg1, iStackX8, uVar3);\n        iVar5 = iStackX8;\n        if (uVar4 != uVar3) {\n            fcn.1400384a8(3, 0);\n            pcVar2 = swi(3);\n            iVar5 = (*pcVar2)();\n            return iVar5;\n        }\n        if (*arg2 != iStackX8) {\n            (*_sym.imp.OLEAUT32.dll_SysStringLen)(*arg2);\n            *arg2 = iVar5;\n        }\n    }\n    return arg1;\n}\n",
        "token_count": 497
    },
    "14004083": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.14004083c(int64_t *arg1)\n\n{\n    uint32_t uVar1;\n    ulong uVar2;\n    uchar auStackX8 [32];\n    \n    uVar1 = *(arg1 + 0xe4);\n    *(arg1 + 0x24) = 0;\n    if (((uVar1 & 1) == 0) || ((uVar1 & 4) == 0)) {\n        uVar2 = 0x4a;\n        if ((uVar1 & 0xa000) == 0) {\n            uVar2 = 0x50;\n        }\n    }\n    else {\n        uVar2 = 0x46;\n    }\n    (**(*arg1 + 0x280))(arg1, auStackX8, 0, uVar2);\n    return;\n}\n",
        "token_count": 184
    },
    "1400408e": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nint32_t fcn.1400408e8(int64_t arg1, int64_t arg2, ulong arg3, ulong arg4)\n\n{\n    int64_t iVar1;\n    uint8_t *puVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int64_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    \n    iVar4 = 0;\n    iVar7 = 0;\n    iVar6 = 0;\n    if (arg3 < 1) {\ncode_r0x0001400409f0:\n        return iVar4 + 1;\n    }\ncode_r0x000140040918:\n    iVar5 = iVar7;\n    iVar1 = iVar5 * 0x20;\n    puVar2 = iVar1 + 8 + arg2;\n    *puVar2 = *puVar2 & 0xdf;\n    if ((*(iVar1 + 8 + arg2) & 8) == 0) {\n        if ((*(iVar1 + 9 + arg2) & 1) == 0) {\n            iVar3 = *(arg1 + 300);\n        }\n        else {\n            iVar3 = *(iVar1 + arg2);\n        }\n        iVar6 = iVar6 + iVar3;\n        if (arg4 < iVar6) {\n            if (-1 < iVar7) {\n                puVar2 = iVar5 * 0x20 + 8 + arg2;\n                iVar3 = iVar7;\n                do {\n                    if ((*puVar2 & 0x20) != 0) break;\n                    if ((((puVar2[1] & 1) != 0) && (*(puVar2 + -4) == 0)) && ((*puVar2 & 8) == 0))\n                    goto code_r0x0001400409d5;\n                    iVar3 = iVar3 + -1;\n                    puVar2 = puVar2 + -0x20;\n                    iVar5 = iVar5 + -1;\n                } while (-1 < iVar5);\n            }\n            iVar3 = iVar7 + -1;\n            iVar1 = iVar3;\n            if (-1 < iVar3) {\n                puVar2 = iVar1 * 0x20 + 8 + arg2;\n                do {\n                    if ((*puVar2 & 0x20) != 0) break;\n                    if (((*puVar2 & 8) == 0) && (((puVar2[1] & 1) == 0 || (*(puVar2 + -4) == 0))))\n                    goto code_r0x0001400409d5;\n                    iVar3 = iVar3 + -1;\n                    puVar2 = puVar2 + -0x20;\n                    iVar1 = iVar1 + -1;\n                } while (-1 < iVar1);\n            }\n        }\n    }\n    goto code_r0x0001400409e4;\ncode_r0x0001400409d5:\n    iVar7 = iVar3;\n    iVar6 = 0;\n    puVar2 = iVar7 * 0x20 + 8 + arg2;\n    *puVar2 = *puVar2 | 0x20;\n    iVar4 = iVar4 + 1;\ncode_r0x0001400409e4:\n    iVar7 = iVar7 + 1;\n    if (arg3 <= iVar7) goto code_r0x0001400409f0;\n    goto code_r0x000140040918;\n}\n",
        "token_count": 752
    },
    "14004129": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.140041294(int64_t *arg1, ulong arg2, int32_t *arg3)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uchar *puVar3;\n    int64_t iVar4;\n    uchar auStack136 [32];\n    uchar auStack104 [16];\n    int32_t aiStack88 [2];\n    uint8_t uStack79;\n    uchar uStack78;\n    uchar uStack77;\n    uint64_t uStack56;\n    \n    uStack56 = *0x1400d96f0 ^ auStack136;\n    iVar4 = arg2;\n    (**(*arg1 + 0x230))(arg1, 0x417, iVar4);\n    *(arg3 + 2) = *(arg3 + 2) ^ 4;\n    uStack78 = 0;\n    uStack77 = 0;\n    *(arg3 + 10) = 0;\n    *(arg3 + 0xb) = 0;\n    iVar1 = fcn.14006af20(arg3, aiStack88, 0x20);\n    if (iVar1 != 0) {\n        uVar2 = fcn.140015284(arg1);\n        fcn.1400152ec(arg1, 0x10000000, 0, 0);\n        (**(*arg1 + 0x230))(arg1, 0x416, iVar4, 0);\n        if (*(arg3 + 6) < -1) {\n            iVar1 = (*_sym.imp.USER32.dll_SendMessageA)(arg1[8], 0x43d, 0, 0);\n            (*_sym.imp.USER32.dll_SendMessageA)(arg1[8], 0xb, 0);\n            (*_sym.imp.USER32.dll_SendMessageA)(arg1[8], 0x43c, iVar1 + 1, 0);\n            (*_sym.imp.USER32.dll_SendMessageA)(arg1[8], 0x43c, iVar1, 0);\n            (*_sym.imp.USER32.dll_SendMessageA)(arg1[8], 0xb, 1);\n            *(arg3 + 6) = *(arg3 + 6) + 1000000;\n        }\n        (**(*arg1 + 0x230))(arg1);\n        fcn.1400152ec(arg1, 0, uVar2 & 0x10000000, 0);\n        if ((((*(arg3 + 9) ^ uStack79) & 1) == 0) && (((*(arg3 + 9) & 1) == 0 || (*arg3 == aiStack88[0])))) {\n            iVar4 = (**(*arg1 + 0x230))(arg1, 0x41d, iVar4, auStack104);\n            if (iVar4 == 0) goto code_r0x000140041430;\n            puVar3 = auStack104;\n        }\n        else {\n            puVar3 = NULL;\n        }\n        (*_sym.imp.USER32.dll_InvalidateRect)(arg1[8], puVar3, 1);\n    }\ncode_r0x000140041430:\n    fcn.140069870(uStack56 ^ auStack136);\n    return;\n}\n",
        "token_count": 715
    },
    "1400499a": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.1400499a8(int64_t arg1, int64_t arg2, uint64_t arg3)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint64_t uVar4;\n    \n    if ((arg3 != 0) && (arg2 == 0)) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    if ((~*(arg1 + 0x20) & 1) == 0) {\n        if (arg3 != 0) {\n            do {\n                uVar4 = 0xfffffff;\n                if (arg3 < 0xfffffff) {\n                    uVar4 = arg3 & 0xffffffff;\n                }\n                uVar3 = uVar4 * 8;\n                uVar2 = fcn.140038594(arg1, arg2, uVar3);\n                if (uVar2 != uVar3) {\n                    fcn.1400384a8(3, 0);\n                    pcVar1 = swi(3);\n                    (*pcVar1)();\n                    return;\n                }\n                arg2 = arg2 + uVar4 * 8;\n                arg3 = arg3 - uVar4;\n            } while (arg3 != 0);\n        }\n    }\n    else if (arg3 != 0) {\n        do {\n            uVar4 = 0xfffffff;\n            if (arg3 < 0xfffffff) {\n                uVar4 = arg3 & 0xffffffff;\n            }\n            fcn.1400392d0(arg1, arg2, uVar4 << 3);\n            arg2 = arg2 + uVar4 * 8;\n            arg3 = arg3 - uVar4;\n        } while (arg3 != 0);\n    }\n    return;\n}\n",
        "token_count": 412
    },
    "14004b2f": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint64_t fcn.14004b2f0(int64_t arg1, ulong arg2, ulong *arg3, ulong *arg4)\n\n{\n    int32_t *piVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int64_t *piVar5;\n    uint64_t uVar6;\n    int64_t iVar7;\n    int64_t arg1_00;\n    uint64_t uVar8;\n    ulong uVar9;\n    code **arg3_00;\n    ulong arg2_00;\n    char *arg2_01;\n    uint32_t uVar10;\n    int64_t iVar11;\n    uint32_t uVar12;\n    uint32_t *arg3_01;\n    uint32_t uStackX24;\n    int64_t iStack616;\n    uint32_t uStack608;\n    uint32_t uStack604;\n    int64_t iStack600;\n    int64_t iStack592;\n    uint32_t uStack584;\n    uint8_t auStack580 [4];\n    code *pcStack576;\n    int64_t iStack568;\n    int64_t iStack560;\n    int32_t iStack536;\n    int32_t iStack532;\n    uint uStack528;\n    int64_t iStack520;\n    int32_t iStack512;\n    int32_t iStack508;\n    uint uStack504;\n    uint uStack500;\n    uint64_t uStack496;\n    code *pcStack488;\n    ulong uStack480;\n    code *apcStack472 [2];\n    int64_t iStack456;\n    uchar auStack448 [8];\n    uint uStack440;\n    ulong *puStack432;\n    uint32_t auStack424 [3];\n    uint32_t uStack412;\n    uchar auStack408 [8];\n    ulong uStack400;\n    uint uStack376;\n    uint uStack372;\n    uint uStack368;\n    uint32_t uStack360;\n    ulong uStack328;\n    int64_t iStack320;\n    uchar auStack296 [16];\n    uchar auStack280 [8];\n    ulong uStack272;\n    ulong uStack240;\n    uchar auStack232 [16];\n    uchar auStack216 [48];\n    uint uStack168;\n    uint uStack164;\n    ulong uStack128;\n    \n    uStack240 = 0xfffffffffffffffe;\n    piVar5 = fcn.140017fc0();\n    if (piVar5 == NULL) {\n        fcn.1400031e0(0x80004005);\n        pcVar2 = swi(3);\n        uVar6 = (*pcVar2)();\n        return uVar6;\n    }\n    iVar7 = (**(*piVar5 + 0x18))(piVar5);\n    iStack616 = iVar7 + 0x18;\n    iVar3 = (*_sym.imp.KERNEL32.dll_lstrlenA)(\"ReBarWindow32\");\n    uVar12 = iVar3 + 1;\n    iVar11 = iVar7 + 0x18;\n    if ((*(iVar7 + 0xc) - uVar12 | 1U - *(iVar7 + 0x10)) < 0) {\n        fcn.1400033e0(&iStack616, uVar12);\n        iVar11 = iStack616;\n    }\n    (*_sym.imp.USER32.dll_GetClassNameA)(*arg3, iVar11, uVar12);\n    iVar3 = fcn.14006b544(iVar11, *(iVar11 + -0xc));\n    if ((iVar3 < 0) || (*(iVar11 + -0xc) < iVar3)) {\n        uVar6 = fcn.1400031e0(0x80070057);\n    }\n    else {\n        *(iVar11 + -0x10) = iVar3;\n        *(iVar3 + iVar11) = 0;\n        iVar7 = fcn.14000fc4c(*arg3);\n        iVar3 = fcn.14006b9a4(iVar11, \"ReBarWindow32\");\n        if (((iVar3 == 0) && (iVar7 != 0)) && (iVar3 = fcn.140020b84(iVar7, 0x1400ae0e8),  iVar3 != 0)) {\n            arg1_00 = fcn.140010d58(iVar7);\n            if ((arg1_00 != 0) && (arg1 != arg1_00)) {\n                uVar12 = fcn.14004b2f0(arg1_00, arg2, arg3, arg4);\n                LOCK();\n                piVar1 = iVar11 + -8;\n                iVar3 = *piVar1;\n                *piVar1 = *piVar1 + -1;\n                if (0 < iVar3 + -1) {\n                    return uVar12;\n                }\n                (**(**(iVar11 + -0x18) + 8))();\n                return uVar12;\n            }\n            fcn.140019cc4(&pcStack488);\n            piVar5 = fcn.140017fc0();\n            if (piVar5 == NULL) {\n                fcn.1400031e0(0x80004005);\n                pcVar2 = swi(3);\n                uVar6 = (*pcVar2)();\n                return uVar6;\n            }\n            iStack592 = (**(*piVar5 + 0x18))();\n            iStack592 = iStack592 + 0x18;\n            piVar5 = fcn.140017fc0();\n            if (piVar5 == NULL) {\n                fcn.1400031e0(0x80004005);\n                pcVar2 = swi(3);\n                uVar6 = (*pcVar2)();\n                return uVar6;\n            }\n            iStack600 = (**(*piVar5 + 0x18))(piVar5);\n            iStack600 = iStack600 + 0x18;\n            fcn.14001b0e0(auStack408);\n            fcn.14001bde0(auStack280, arg1);\n            uStack504 = 0;\n            uStack500 = 0;\n            uStack168 = *(iVar7 + 0x108);\n            uStack164 = 0x10;\n            (*_sym.imp.USER32.dll_SendMessageA)(*(iVar7 + 0x40), 0x41d, *(arg3 + 3), &uStack168);\n            (*_sym.imp.USER32.dll_SendMessageA)(*(iVar7 + 0x40), 0x409, *(arg3 + 3), auStack448);\n            iVar3 = (*_sym.imp.KERNEL32.dll_lstrlenA)(\"ToolbarWindow32\");\n            uVar12 = iVar3 + 1;\n            if ((*(iVar11 + -0xc) - uVar12 | 1U - *(iVar11 + -8)) < 0) {\n                fcn.1400033e0(&iStack616, uVar12);\n                iVar11 = iStack616;\n            }\n            (*_sym.imp.USER32.dll_GetClassNameA)(uStack128, iVar11, uVar12);\n            iVar3 = fcn.14006b544(iVar11, *(iVar11 + -0xc));\n            if ((iVar3 < 0) || (*(iVar11 + -0xc) < iVar3)) {\n                fcn.1400031e0(0x80070057);\n            }\n            else {\n                *(iVar11 + -0x10) = iVar3;\n                *(iVar3 + iVar11) = 0;\n                iStack520 = fcn.14000fc4c(uStack128);\n                arg2_01 = \"ToolbarWindow32\";\n                iVar3 = fcn.14006b9a4(iVar11, \"ToolbarWindow32\");\n                iVar11 = iStack520;\n                if ((iVar3 == 0) && (iStack520 != 0)) {\n                    arg2_01 = 0x1400a7648;\n                    iVar3 = fcn.140020b84(iStack520, 0x1400a7648);\n                    if (iVar3 != 0) {\n                        puStack432 = arg3 + 5;\n                        uStack440 = *puStack432;\n                        fcn.14001b7f0(iVar7, auStack448);\n                        fcn.14001b798(iVar11, auStack448);\n                        uVar8 = (*_sym.imp.USER32.dll_SendMessageA)(*(iVar11 + 0x40), 0x418, 0, 0);\n                        uVar6 = uVar8 & 0xffffffff;\n                        uStack496 = uVar8;\n                        do {\n                            uVar12 = uVar6 - 1;\n                            uVar6 = uVar12;\n                            (*_sym.imp.USER32.dll_SendMessageA)(*(iVar11 + 0x40), 0x41d, uVar12);\n                            iVar3 = (*_sym.imp.USER32.dll_IntersectRect)(auStack232, auStack448, auStack296);\n                            if (iVar3 != 0) break;\n                        } while (uVar12 != 0);\n                        fcn.1400698a0(&uStack376, 0, 0x50);\n                        uStack376 = 0x50;\n                        uVar9 = (*_sym.imp.USER32.dll_SendMessageA)(*(iVar11 + 0x40), 0x431, 0);\n                        iStack456 = fcn.14005c5a4(uVar9);\n                        fcn.1400590c8(&pcStack576);\n                        pcStack576 = vtable.CTypedPtrArray_class_CObArray__class_CBitmap____ptr64_.0;\n                        fcn.1400590fc(&pcStack576, uVar8 - uVar12, 0xffffffffffffffff);\n                        uVar9 = (*_sym.imp.USER32.dll_CreatePopupMenu)();\n                        fcn.1400197b0(&pcStack488, uVar9);\n                        uVar9 = (*_sym.imp.GDI32.dll_CreateCompatibleDC)(uStack272);\n                        fcn.14001bcf8(auStack408, uVar9);\n                        uVar10 = 0;\n                        uStackX24 = 0;\n                        iVar11 = 0;\n                        if (uVar12 < uStack496) {\n                            do {\n                                arg3_01 = &uStack608;\n                                iVar3 = uVar6;\n                                fcn.140040a4c(iStack520, uVar6, arg3_01, auStack580);\n                                if ((auStack580[0] & 1) == 0) {\n                                    uStack372 = 0x162;\n                                    uStack584 = uStack608;\n                                    uVar8 = fcn.140017ddc(uStack608);\n                                    if (uVar8 == 0) {\ncode_r0x00014004b7e8:\n                                        fcn.140004828(&iStack600, uVar6, arg3_01);\n                                    }\n                                    else {\n                                        arg3_01 = uStack584;\n                                        iVar4 = fcn.140002fd0(&iStack592, uVar8, arg3_01);\n                                        uVar6 = uVar8;\n                                        if (iVar4 == 0) goto code_r0x00014004b7e8;\n                                        fcn.140017df0(&iStack600, iStack592, 1);\n                                    }\n                                    arg3_00 = fcn.140003694(0x10);\n                                    if (arg3_00 == NULL) {\n                                        arg3_00 = NULL;\n                                    }\n                                    else {\n                                        arg3_00[1] = NULL;\n                                        *arg3_00 = vtable.CBitmap.0;\n                                    }\n                                    fcn.14005942c(&pcStack576, uVar10, arg3_00);\n                                    if (iStack456 == 0) {\ncode_r0x00014004b9f9:\n                                        uStack328 = 0;\n                                    }\n                                    else {\n                                        uVar9 = *(iStack456 + 8);\n                                        iVar7 = fcn.140017ad4();\n                                        iVar4 = fcn.140049ce4(**(iVar7 + 200), uVar9, uStack604, auStack216);\n                                        uVar10 = uStackX24;\n                                        if (iVar4 == 0) goto code_r0x00014004b9f9;\n                                        (*_sym.imp.USER32.dll_CopyRect)(&iStack536);\n                                        iStack508 = -iStack532;\n                                        iStack512 = -iStack536;\n                                        (*_sym.imp.USER32.dll_OffsetRect)(&iStack536);\n                                        if ((iVar11 < 0) || (iStack560 <= iVar11)) {\n                                            fcn.140020780();\n                                            pcVar2 = swi(3);\n                                            uVar6 = (*pcVar2)();\n                                            return uVar6;\n                                        }\n                                        uVar9 = *(iStack568 + iVar11 * 8);\n                                        arg2_00 = (*_sym.imp.GDI32.dll_CreateCompatibleBitmap)(uStack272, uStack528);\n                                        fcn.14001c094(uVar9, arg2_00);\n                                        if (iStack560 <= iVar11) {\n                                            fcn.140020780();\n                                            pcVar2 = swi(3);\n                                            uVar6 = (*pcVar2)();\n                                            return uVar6;\n                                        }\n                                        iVar7 = *(iStack568 + iVar11 * 8);\n                                        if (iVar7 == 0) {\n                                            uVar9 = 0;\n                                        }\n                                        else {\n                                            uVar9 = *(iVar7 + 8);\n                                        }\n                                        uVar9 = fcn.14001c230(uStack400, uVar9);\n                                        if (iStack560 <= iVar11) {\n                                            fcn.140020780();\n                                            pcVar2 = swi(3);\n                                            uVar6 = (*pcVar2)();\n                                            return uVar6;\n                                        }\n                                        *(iStack568 + iVar11 * 8) = uVar9;\n                                        uVar12 = (*_sym.imp.USER32.dll_GetSysColor)(4);\n                                        fcn.140042e00(auStack408, &iStack536, uVar12);\n                                        fcn.140049e68(iStack456, auStack408, uStack604, CONCAT44(uStack500, uStack504));\n                                        if (iStack560 <= iVar11) {\n                                            fcn.140020780();\n                                            pcVar2 = swi(3);\n                                            uVar6 = (*pcVar2)();\n                                            return uVar6;\n                                        }\n                                        iVar7 = *(iStack568 + iVar11 * 8);\n                                        if (iVar7 == 0) {\n                                            uVar9 = 0;\n                                        }\n                                        else {\n                                            uVar9 = *(iVar7 + 8);\n                                        }\n                                        uVar9 = fcn.14001c230(uStack400, uVar9);\n                                        if (iStack560 <= iVar11) {\n                                            fcn.140020780();\n                                            pcVar2 = swi(3);\n                                            uVar6 = (*pcVar2)();\n                                            return uVar6;\n                                        }\n                                        *(iStack568 + iVar11 * 8) = uVar9;\n                                        if (iStack560 <= iVar11) {\n                                            fcn.140020780();\n                                            pcVar2 = swi(3);\n                                            uVar6 = (*pcVar2)();\n                                            return uVar6;\n                                        }\n                                        uStack328 = *(iStack568 + iVar11 * 8);\n                                    }\n                                    iStack320 = iStack600;\n                                    uStack360 = uStack608;\n                                    uStack368 = 0x100;\n                                    uVar10 = uVar10 + 1;\n                                    iVar11 = iVar11 + 1;\n                                    uStackX24 = uVar10;\ncode_r0x00014004ba4d:\n                                    (*_sym.imp.USER32.dll_InsertMenuItemA)(uStack480);\n                                }\n                                else if (uVar10 != 0) {\n                                    uStack372 = 0x100;\n                                    uStack368 = 0x800;\n                                    goto code_r0x00014004ba4d;\n                                }\n                                uVar12 = iVar3 + 1;\n                                uVar6 = uVar12;\n                            } while (uVar12 < uStack496);\n                        }\n                        (*_sym.imp.USER32.dll_CopyRect)(auStack424, puStack432);\n                        fcn.14001b7f0(arg1, auStack424);\n                        uVar9 = 0;\n                        fcn.14000daec(&pcStack488, 0, auStack424[0], uStack412);\n                        *arg4 = 0;\n                        uVar12 = 0;\n                        iVar11 = 0;\n                        if (uStackX24 != 0) {\n                            do {\n                                if ((iVar11 < 0) || (iStack560 <= iVar11)) {\n                                    fcn.140020780();\n                                    break;\n                                }\n                                piVar5 = *(iStack568 + iVar11 * 8);\n                                if (piVar5 != NULL) {\n                                    uVar9 = 1;\n                                    (**(*piVar5 + 8))();\n                                }\n                                uVar12 = uVar12 + 1;\n                                iVar11 = iVar11 + 1;\n                            } while (uVar12 < uStackX24);\n                        }\n                        fcn.1400590e8(&pcStack576);\n                        fcn.14001be44(auStack280, uVar9);\n                        fcn.14001bdb8(auStack408, uVar9);\n                        LOCK();\n                        piVar1 = iStack600 + -8;\n                        iVar3 = *piVar1;\n                        *piVar1 = *piVar1 + -1;\n                        if (iVar3 + -1 < 1) {\n                            (**(**(iStack600 + -0x18) + 8))();\n                        }\n                        LOCK();\n                        piVar1 = iStack592 + -8;\n                        iVar3 = *piVar1;\n                        *piVar1 = *piVar1 + -1;\n                        if (iVar3 + -1 < 1) {\n                            (**(**(iStack592 + -0x18) + 8))();\n                        }\n                        apcStack472[0] = vtable.CFont.0;\n                        fcn.140019c30(apcStack472);\n                        pcStack488 = vtable.CMenu.0;\n                        fcn.140019830(&pcStack488);\n                        LOCK();\n                        piVar1 = iStack616 + -8;\n                        iVar3 = *piVar1;\n                        *piVar1 = *piVar1 + -1;\n                        if (iVar3 + -1 < 1) {\n                            (**(**(iStack616 + -0x18) + 8))();\n                        }\n                        return 1;\n                    }\n                }\n                fcn.14001be44(auStack280, arg2_01);\n                fcn.14001bdb8(auStack408, arg2_01);\n                LOCK();\n                piVar1 = iStack600 + -8;\n                iVar3 = *piVar1;\n                *piVar1 = *piVar1 + -1;\n                if (iVar3 + -1 < 1) {\n                    (**(**(iStack600 + -0x18) + 8))();\n                }\n                LOCK();\n                piVar1 = iStack592 + -8;\n                iVar3 = *piVar1;\n                *piVar1 = *piVar1 + -1;\n                if (iVar3 + -1 < 1) {\n                    (**(**(iStack592 + -0x18) + 8))();\n                }\n                apcStack472[0] = vtable.CFont.0;\n                fcn.140019c30(apcStack472);\n                pcStack488 = vtable.CMenu.0;\n                fcn.140019830(&pcStack488);\n                iVar11 = iStack616;\n            }\n        }\n        LOCK();\n        piVar1 = iVar11 + -8;\n        iVar3 = *piVar1;\n        *piVar1 = *piVar1 + -1;\n        if (iVar3 + -1 < 1) {\n            (**(**(iVar11 + -0x18) + 8))();\n        }\n        uVar6 = 0;\n    }\n    return uVar6;\n}\n",
        "token_count": 4425
    },
    "14004d49": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.14004d490(int64_t arg1)\n\n{\n    int32_t *piVar1;\n    code *pcVar2;\n    uchar auVar3 [16];\n    int64_t *piVar4;\n    int32_t iVar5;\n    int64_t iVar6;\n    int64_t iVar7;\n    ulong uVar8;\n    int64_t *piVar9;\n    int64_t *piVar10;\n    uint uVar11;\n    char *arg1_00;\n    uint32_t uVar12;\n    uint64_t uVar13;\n    int64_t *in_R8;\n    int64_t in_R9;\n    int64_t arg4;\n    uint64_t uVar14;\n    int64_t *piVar15;\n    int64_t iStackX16;\n    int64_t *piStackX24;\n    int64_t iStackX32;\n    int64_t *piStack120;\n    int64_t iStack112;\n    int64_t iStack104;\n    int64_t iStack96;\n    uint64_t uStack88;\n    ulong uStack80;\n    \n    uStack80 = 0xfffffffffffffffe;\n    if (*(arg1 + 0xf0) == 1) {\n        uVar14 = 0;\n        if (*(*(arg1 + 0xe8) + 0x58) != 0) {\n            fcn.14002010c(&iStack112, *(*(arg1 + 0xe8) + 0x58));\n            iVar5 = (**(**(arg1 + 0xf8) + 0x88))(*(arg1 + 0xf8), iStack112);\n            if (iVar5 < 0) {\n                fcn.140020780();\n            }\n            LOCK();\n            piVar1 = iStack112 + -8;\n            iVar5 = *piVar1;\n            *piVar1 = *piVar1 + -1;\n            if (iVar5 + -1 < 1) {\n                (**(**(iStack112 + -0x18) + 8))();\n            }\n        }\n        if (*(*(arg1 + 0xe8) + 0x68) != 0) {\n            fcn.14002010c(&iStack104, *(*(arg1 + 0xe8) + 0x68));\n            iVar5 = (**(**(arg1 + 0xf8) + 0xb0))(*(arg1 + 0xf8), iStack104);\n            if (iVar5 < 0) {\n                fcn.140020780();\n            }\n            LOCK();\n            piVar1 = iStack104 + -8;\n            iVar5 = *piVar1;\n            *piVar1 = *piVar1 + -1;\n            if (iVar5 + -1 < 1) {\n                (**(**(iStack104 + -0x18) + 8))();\n            }\n        }\n        if ((*(*(arg1 + 0xe8) + 0x18) != 0) && (arg1_00 = *(*(arg1 + 0xe8) + 0x18),  uVar13 = uVar14,  *arg1_00 != '\\0')\n           ) {\n            do {\n                iVar6 = fcn.1400699a0(arg1_00);\n                iVar7 = fcn.1400699a0(arg1_00 + iVar6 + 1);\n                arg1_00 = arg1_00 + iVar6 + 1 + iVar7 + 1;\n                uVar12 = uVar13 + 1;\n                uVar13 = uVar12;\n            } while (*arg1_00 != '\\0');\n            if (uVar12 != 0) {\n                uVar13 = uVar12;\n                uVar8 = SUB168(ZEXT816(0x10) * ZEXT816(uVar13), 0);\n                if (SUB168(ZEXT816(0x10) * ZEXT816(uVar13) >> 0x40, 0) != 0) {\n                    uVar8 = 0xffffffffffffffff;\n                }\n                piVar9 = fcn.140003694(uVar8);\n                if (piVar9 == NULL) {\n                    fcn.140020738();\n                    pcVar2 = swi(3);\n                    (*pcVar2)();\n                    return;\n                }\n                iVar6 = *(*(arg1 + 0xe8) + 0x18);\n                piVar15 = piVar9;\n                if (uVar13 != 0) {\n                    do {\n                        piVar10 = fcn.140017fc0();\n                        if (piVar10 == NULL) {\ncode_r0x00014004d777:\n                            fcn.1400031e0(0x80004005);\n                            pcVar2 = swi(3);\n                            (*pcVar2)();\n                            return;\n                        }\n                        iVar7 = (**(*piVar10 + 0x18))(piVar10);\n                        piStackX24 = iVar7 + 0x18;\n                        iVar7 = fcn.1400699a0(iVar6);\n                        auVar3 = ZEXT816(2) * ZEXT816(iVar7 + 1U);\n                        uVar8 = SUB168(auVar3, 0);\n                        if (SUB168(auVar3 >> 0x40, 0) != 0) {\n                            uVar8 = 0xffffffffffffffff;\n                        }\n                        iStack96 = fcn.140003694(uVar8);\n                        if (iStack96 == 0) {\n                            fcn.140020738();\n                            goto code_r0x00014004d777;\n                        }\n                        fcn.14001f7c0(&piStackX24, iVar6, in_R8, in_R9);\n                        arg4 = (*(piStackX24 + -2) + 1) * 2;\n                        piVar10 = piStackX24;\n                        fcn.140069a48(iStack96, (*(piStackX24 + -2) + 1) * 2, piStackX24, arg4);\n                        *piVar15 = iStack96;\n                        iVar6 = iVar6 + iVar7 + 1U;\n                        iVar7 = fcn.1400699a0(iVar6);\n                        uStack88 = iVar7 + 1;\n                        uVar8 = SUB168(ZEXT816(2) * ZEXT816(uStack88), 0);\n                        if (SUB168(ZEXT816(2) * ZEXT816(uStack88) >> 0x40, 0) != 0) {\n                            uVar8 = 0xffffffffffffffff;\n                        }\n                        iStack96 = fcn.140003694(uVar8);\n                        if (iStack96 == 0) {\n                            fcn.140020738();\n                            pcVar2 = swi(3);\n                            (*pcVar2)();\n                            return;\n                        }\n                        fcn.14001f7c0(&piStackX24, iVar6, piVar10, arg4);\n                        piVar4 = piStackX24;\n                        in_R9 = (*(piStackX24 + -2) + 1) * 2;\n                        in_R8 = piStackX24;\n                        fcn.140069a48(iStack96, (*(piStackX24 + -2) + 1) * 2, piStackX24, in_R9);\n                        piVar15[1] = iStack96;\n                        iVar6 = iVar6 + uStack88;\n                        uVar14 = uVar14 + 1;\n                        LOCK();\n                        piVar10 = piVar4 + -1;\n                        iVar5 = *piVar10;\n                        *piVar10 = *piVar10 + -1;\n                        if (iVar5 + -1 < 1) {\n                            (**(*piVar4[-3] + 8))();\n                        }\n                        piVar15 = piVar15 + 2;\n                    } while (uVar14 < uVar13);\n                }\n                in_R8 = piVar9;\n                iVar5 = (**(**(arg1 + 0xf8) + 0x20))(*(arg1 + 0xf8), uVar12);\n                piVar15 = piVar9;\n                if (iVar5 < 0) {\n                    fcn.140020780();\n                    pcVar2 = swi(3);\n                    (*pcVar2)();\n                    return;\n                }\n                for (; uVar13 != 0; uVar13 = uVar13 - 1) {\n                    fcn.1400036d8(*piVar15);\n                    fcn.1400036d8(piVar15[1]);\n                    piVar15 = piVar15 + 2;\n                }\n                fcn.1400036d8(piVar9);\n                if (*(*(arg1 + 0xe8) + 0x2c) < 2) {\n                    uVar11 = 1;\n                }\n                else {\n                    uVar11 = *(*(arg1 + 0xe8) + 0x2c);\n                }\n                iVar5 = (**(**(arg1 + 0xf8) + 0x28))(*(arg1 + 0xf8), uVar11);\n                if (iVar5 < 0) {\n                    fcn.140020780();\n                    pcVar2 = swi(3);\n                    (*pcVar2)();\n                    return;\n                }\n            }\n        }\n        if ((*(*(arg1 + 0xe8) + 0x30) != 0) || (*(*(arg1 + 0xe8) + 0x50) != 0)) {\n            piVar9 = fcn.140017fc0();\n            if (piVar9 == NULL) {\n                fcn.1400031e0(0x80004005);\n                pcVar2 = swi(3);\n                (*pcVar2)();\n                return;\n            }\n            iStackX16 = (**(*piVar9 + 0x18))();\n            iStackX16 = iStackX16 + 0x18;\n            iVar6 = iStackX16;\n            if (*(*(arg1 + 0xe8) + 0x30) != 0) {\n                fcn.14002010c(&iStackX32, *(*(arg1 + 0xe8) + 0x30));\n                fcn.140018f38(&iStackX16, &iStackX32);\n                if (1 < *(iStackX16 + -8)) {\n                    fcn.1400184e4(&iStackX16, *(iStackX16 + -0x10));\n                }\n                iVar6 = iStackX16;\n                (*_sym.imp.SHLWAPI.dll_PathRemoveFileSpecW)(iStackX16);\n                iVar5 = fcn.14006d630(iVar6, *(iVar6 + -0xc));\n                if ((iVar5 < 0) || (*(iVar6 + -0xc) < iVar5)) {\n                    fcn.1400031e0(0x80070057);\n                }\n                else {\n                    *(iVar6 + -0x10) = iVar5;\n                    *(iVar6 + iVar5 * 2) = 0;\n                    iVar5 = *(iVar6 + -0x10);\n                    if ((iVar5 < 0) || (*(iStackX32 + -0x10) < iVar5)) {\n                        fcn.1400031e0(0x80070057);\n                        pcVar2 = swi(3);\n                        (*pcVar2)();\n                        return;\n                    }\n                    if (*(iStackX32 + iVar5 * 2) == 0x5c) {\n                        iVar5 = iVar5 + 1;\n                    }\n                    in_R8 = **(arg1 + 0xf8);\n                    iVar5 = (*in_R8[0xf])(*(arg1 + 0xf8), iStackX32 + iVar5 * 2);\n                    if (iVar5 < 0) {\n                        fcn.140020780();\n                    }\n                    LOCK();\n                    piVar1 = iStackX32 + -8;\n                    iVar5 = *piVar1;\n                    *piVar1 = *piVar1 + -1;\n                    iVar6 = iStackX16;\n                    if (iVar5 + -1 < 1) {\n                        (**(**(iStackX32 + -0x18) + 8))();\n                        iVar6 = iStackX16;\n                    }\n                }\n            }\n            if ((*(*(arg1 + 0xe8) + 0x50) != 0) && (*(iVar6 + -0x10) == 0)) {\n                fcn.14001f7c0(&iStackX16, *(*(arg1 + 0xe8) + 0x50), in_R8, in_R9);\n                iVar6 = iStackX16;\n            }\n            if (*(iVar6 + -0x10) != 0) {\n                piStack120 = NULL;\n                if ((*0x1400deb50 & 1) == 0) {\n                    *0x1400deb50 = *0x1400deb50 | 1;\n                    *0x1400deb48 = fcn.14000d578(\"Shell32.dll\");\n                }\n                if (*0x1400deb48 == 0) {\n                    fcn.140020780();\n                    pcVar2 = swi(3);\n                    (*pcVar2)();\n                    return;\n                }\n                if ((*0x1400deb50 & 2) == 0) {\n                    *0x1400deb50 = *0x1400deb50 | 2;\n                    *0x1400deb40 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(*0x1400deb48, \"SHCreateItemFromParsingName\");\n                }\n                if (*0x1400deb40 == NULL) {\n                    fcn.140020780();\n                    pcVar2 = swi(3);\n                    (*pcVar2)();\n                    return;\n                }\n                iVar5 = (**0x1400deb40)(iVar6, 0, 0x1400a9700, &piStack120);\n                if (-1 < iVar5) {\n                    iVar5 = (**(**(arg1 + 0xf8) + 0x60))(*(arg1 + 0xf8), piStack120);\n                    if (iVar5 < 0) {\n                        fcn.140020780();\n                        pcVar2 = swi(3);\n                        (*pcVar2)();\n                        return;\n                    }\n                    (**(*piStack120 + 0x10))();\n                }\n            }\n            LOCK();\n            piVar1 = iVar6 + -8;\n            iVar5 = *piVar1;\n            *piVar1 = *piVar1 + -1;\n            if (iVar5 + -1 < 1) {\n                (**(**(iVar6 + -0x18) + 8))();\n            }\n        }\n        iVar5 = (**(**(arg1 + 0xf8) + 0x50))();\n        if (iVar5 < 0) {\n            fcn.140020780();\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n        iVar5 = (**(**(arg1 + 0xf8) + 0x48))();\n        if (iVar5 < 0) {\n            fcn.140020780();\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n    }\n    return;\n}\n",
        "token_count": 3364
    },
    "14005698": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.140056988(int64_t hWnd, int64_t lParam)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t iStack24;\n    int32_t iStack20;\n    int32_t iStack16;\n    int32_t iStack12;\n    \n    (*_sym.imp.USER32.dll_DefWindowProcA)(*(hWnd + 0x40), 0x46, 0, lParam);\n    if ((*(lParam + 0x20) & 1) == 0) {\n        (*_sym.imp.USER32.dll_GetWindowRect)(*(hWnd + 0x40), &iStack24);\n        iVar1 = *(lParam + 0x18);\n        iStack16 = iStack16 - iStack24;\n        iVar2 = *(lParam + 0x1c);\n        iStack12 = iStack12 - iStack20;\n        if ((iVar1 != iStack16) && ((*(hWnd + 0xe4) >> 10 & 1) != 0)) {\n            (*_sym.imp.USER32.dll_SetRect)(&iStack24, iVar1 - *0x1400deac0, 0, iVar1, iVar2);\n            (*_sym.imp.USER32.dll_InvalidateRect)(*(hWnd + 0x40), &iStack24, 1);\n            (*_sym.imp.USER32.dll_SetRect)(&iStack24, iStack16 - *0x1400deac0, 0, iStack16, iVar2);\n            (*_sym.imp.USER32.dll_InvalidateRect)(*(hWnd + 0x40), &iStack24, 1);\n        }\n        if ((iVar2 != iStack12) && ((*(hWnd + 0xe4) >> 0xb & 1) != 0)) {\n            (*_sym.imp.USER32.dll_SetRect)(&iStack24, 0, iVar2 - *0x1400deac4, iVar1, iVar2);\n            (*_sym.imp.USER32.dll_InvalidateRect)(*(hWnd + 0x40), &iStack24, 1);\n            (*_sym.imp.USER32.dll_SetRect)(&iStack24, 0, iStack12 - *0x1400deac4, iVar1, iStack12);\n            (*_sym.imp.USER32.dll_InvalidateRect)(*(hWnd + 0x40), &iStack24, 1);\n        }\n    }\n    return;\n}\n",
        "token_count": 543
    },
    "140056e0": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nulong fcn.140056e08(int64_t *arg1, ulong noname_1, int64_t *arg3)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint8_t uVar5;\n    bool bVar6;\n    int32_t iStackX8;\n    int32_t iStackX12;\n    int32_t iStack40;\n    int32_t iStack36;\n    int32_t iStack32;\n    int32_t iStack28;\n    \n    uVar2 = (**(*arg1 + 0x2d8))(arg1, arg3);\n    if (((uVar2 >> 0x1c & 1) != 0) && ((uVar2 & 0xf000) != 0)) {\n        (*_sym.imp.USER32.dll_CopyRect)(&iStack40, arg3 + 1);\n        iVar4 = iStack32 - iStack40;\n        iVar3 = iStack28 - iStack36;\n        bVar6 = *(arg3 + 4) != 0;\n        if (((*(arg1 + 0xe4) & 4) == 0) || ((*(arg1 + 0xe4) & 1) == 0)) {\n            if ((uVar2 & 0xa000) == 0) {\n                uVar5 = bVar6 | 0x10;\n            }\n            else {\n                uVar5 = bVar6 | 10;\n            }\n        }\n        else {\n            uVar5 = bVar6 | 6;\n        }\n        (**(*arg1 + 0x280))(arg1, &iStackX8, 0xffffffff, uVar5);\n        if (iStackX8 < iVar4) {\n            iVar4 = iStackX8;\n        }\n        if (iStackX12 < iVar3) {\n            iVar3 = iStackX12;\n        }\n        if ((uVar2 & 0xa000) == 0) {\n            if ((uVar2 & 0x5000) != 0) {\n                *(arg3 + 3) = *(arg3 + 3) + iVar4;\n                iVar1 = iVar3;\n                if (*(arg3 + 0x1c) != iVar3 && iVar3 <= *(arg3 + 0x1c)) {\n                    iVar1 = *(arg3 + 0x1c);\n                }\n                *(arg3 + 0x1c) = iVar1;\n                if ((uVar2 >> 0xc & 1) == 0) {\n                    if ((uVar2 >> 0xe & 1) != 0) {\n                        iStack40 = iStack32 - iVar4;\n                        *(arg3 + 2) = *(arg3 + 2) - iVar4;\n                    }\n                }\n                else {\n                    *(arg3 + 1) = *(arg3 + 1) + iVar4;\n                }\n            }\n        }\n        else {\n            *(arg3 + 0x1c) = *(arg3 + 0x1c) + iVar3;\n            iVar1 = iVar4;\n            if (*(arg3 + 3) != iVar4 && iVar4 <= *(arg3 + 3)) {\n                iVar1 = *(arg3 + 3);\n            }\n            *(arg3 + 3) = iVar1;\n            if ((uVar2 >> 0xd & 1) == 0) {\n                if ((uVar2 >> 0xf & 1) != 0) {\n                    iStack36 = iStack28 - iVar3;\n                    *(arg3 + 0x14) = *(arg3 + 0x14) - iVar3;\n                }\n            }\n            else {\n                *(arg3 + 0xc) = *(arg3 + 0xc) + iVar3;\n            }\n        }\n        iStack32 = iStack40 + iVar4;\n        iStack28 = iStack36 + iVar3;\n        if (*arg3 != 0) {\n            iStackX8 = iVar4;\n            iStackX12 = iVar3;\n            fcn.14000ca34(arg3, arg1[8], &iStack40);\n        }\n    }\n    return 0;\n}\n",
        "token_count": 929
    },
    "14006308": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.140063088(int64_t arg1, int64_t arg2)\n\n{\n    uint32_t uVar1;\n    code *pcVar2;\n    uint32_t uVar3;\n    uint32_t *puVar4;\n    uint64_t uVar5;\n    uint64_t *puVar6;\n    \n    if (arg2 == 0) {\n        fcn.1400384a8(6, *(arg1 + 0x18));\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    if ((~*(arg1 + 0x20) & 1) == 0) {\n        fcn.1400384a8(1, *(arg1 + 0x18));\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    if (*(arg2 + 0xc) == 0xffff) {\n        fcn.14002075c();\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    fcn.140062ef8(arg1, 0);\n    puVar4 = fcn.14003a6a4(*(arg1 + 0x58), arg2);\n    uVar1 = *puVar4;\n    uVar3 = ~*(arg1 + 0x20);\n    if (uVar1 == 0) {\n        if ((uVar3 & 1) == 0) {\n            fcn.1400384a8(2, *(arg1 + 0x18));\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n        uVar5 = *(arg1 + 0x38) + 2;\n        if (*(arg1 + 0x40) <= uVar5 && uVar5 != *(arg1 + 0x40)) {\n            fcn.140038770(arg1);\n        }\n        **(arg1 + 0x38) = 0xffff;\n        *(arg1 + 0x38) = *(arg1 + 0x38) + 2;\n        fcn.140039800(arg2, arg1);\n        fcn.14006291c(arg1);\n        uVar1 = *(arg1 + 0x50);\n        puVar6 = fcn.14003a6a4(*(arg1 + 0x58), arg2);\n        *puVar6 = uVar1;\n        *(arg1 + 0x50) = *(arg1 + 0x50) + 1;\n    }\n    else if (uVar1 < 0x7fff) {\n        if ((uVar3 & 1) == 0) {\n            fcn.1400384a8(2, *(arg1 + 0x18));\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n        uVar5 = *(arg1 + 0x38) + 2;\n        if (*(arg1 + 0x40) <= uVar5 && uVar5 != *(arg1 + 0x40)) {\n            fcn.140038770(arg1);\n        }\n        **(arg1 + 0x38) = uVar1 | 0x8000;\n        *(arg1 + 0x38) = *(arg1 + 0x38) + 2;\n    }\n    else {\n        if ((uVar3 & 1) == 0) {\n            fcn.1400384a8(2, *(arg1 + 0x18));\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n        uVar5 = *(arg1 + 0x38) + 2;\n        if (*(arg1 + 0x40) <= uVar5 && uVar5 != *(arg1 + 0x40)) {\n            fcn.140038770(arg1);\n        }\n        **(arg1 + 0x38) = 0x7fff;\n        *(arg1 + 0x38) = *(arg1 + 0x38) + 2;\n        if ((~*(arg1 + 0x20) & 1) == 0) {\n            fcn.1400384a8(2, *(arg1 + 0x18));\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n        uVar5 = *(arg1 + 0x38) + 4;\n        if (*(arg1 + 0x40) <= uVar5 && uVar5 != *(arg1 + 0x40)) {\n            fcn.140038770(arg1);\n        }\n        **(arg1 + 0x38) = uVar1 | 0x80000000;\n        *(arg1 + 0x38) = *(arg1 + 0x38) + 4;\n    }\n    return;\n}\n",
        "token_count": 1085
    },
    "1400635d": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.1400635d0(int64_t arg1, int64_t *arg2)\n\n{\n    uint32_t uVar1;\n    code *pcVar2;\n    uint64_t uVar3;\n    uint32_t *puVar4;\n    ulong arg2_00;\n    uint64_t *puVar5;\n    \n    if ((~*(arg1 + 0x20) & 1) == 0) {\n        fcn.1400384a8(2, *(arg1 + 0x18));\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    fcn.140062ef8(arg1, 0);\n    if (arg2 == NULL) {\n        if ((~*(arg1 + 0x20) & 1) == 0) {\n            fcn.1400384a8(2, *(arg1 + 0x18));\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n        uVar3 = *(arg1 + 0x38) + 2;\n        if (*(arg1 + 0x40) <= uVar3 && uVar3 != *(arg1 + 0x40)) {\n            fcn.140038770(arg1);\n        }\n        **(arg1 + 0x38) = 0;\n    }\n    else {\n        puVar4 = fcn.14003a6a4(*(arg1 + 0x58), arg2);\n        uVar1 = *puVar4;\n        if (uVar1 == 0) {\n            arg2_00 = (***arg2)(arg2);\n            fcn.140063088(arg1, arg2_00);\n            fcn.14006291c(arg1);\n            uVar1 = *(arg1 + 0x50);\n            puVar5 = fcn.14003a6a4(*(arg1 + 0x58), arg2);\n            *puVar5 = uVar1;\n            *(arg1 + 0x50) = *(arg1 + 0x50) + 1;\n            (**(*arg2 + 0x10))(arg2, arg1);\n            return;\n        }\n        if (0x7ffe < uVar1) {\n            if ((~*(arg1 + 0x20) & 1) == 0) {\n                fcn.1400384a8(2, *(arg1 + 0x18));\n                pcVar2 = swi(3);\n                (*pcVar2)();\n                return;\n            }\n            uVar3 = *(arg1 + 0x38) + 2;\n            if (*(arg1 + 0x40) <= uVar3 && uVar3 != *(arg1 + 0x40)) {\n                fcn.140038770(arg1);\n            }\n            **(arg1 + 0x38) = 0x7fff;\n            *(arg1 + 0x38) = *(arg1 + 0x38) + 2;\n            if ((~*(arg1 + 0x20) & 1) != 0) {\n                uVar3 = *(arg1 + 0x38) + 4;\n                if (*(arg1 + 0x40) <= uVar3 && uVar3 != *(arg1 + 0x40)) {\n                    fcn.140038770(arg1);\n                }\n                **(arg1 + 0x38) = uVar1;\n                *(arg1 + 0x38) = *(arg1 + 0x38) + 4;\n                return;\n            }\n            fcn.1400384a8(2, *(arg1 + 0x18));\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n        if ((~*(arg1 + 0x20) & 1) == 0) {\n            fcn.1400384a8(2, *(arg1 + 0x18));\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n        uVar3 = *(arg1 + 0x38) + 2;\n        if (*(arg1 + 0x40) <= uVar3 && uVar3 != *(arg1 + 0x40)) {\n            fcn.140038770(arg1);\n        }\n        **(arg1 + 0x38) = uVar1;\n    }\n    *(arg1 + 0x38) = *(arg1 + 0x38) + 2;\n    return;\n}\n",
        "token_count": 1005
    },
    "140064a0": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nint64_t fcn.140064a00(ulong arg1, int64_t arg2)\n\n{\n    int64_t iVar1;\n    ulong in_R8;\n    ulong in_R9;\n    ulong uVar2;\n    \n    uVar2 = 0xfffffffffffffffe;\n    if ((*0x1400debd0 & 1) == 0) {\n        *0x1400debd0 = *0x1400debd0 | 1;\n        *0x1400debc8 = fcn.14000d578(\"UxTheme.dll\");\n    }\n    if ((*0x1400debc8 != 0) &&\n       (iVar1 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(*0x1400debc8, arg1, in_R8, in_R9, uVar2),  iVar1 != 0)) {\n        arg2 = iVar1;\n    }\n    return arg2;\n}\n",
        "token_count": 203
    },
    "140064a7": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.140064a70(void)\n\n{\n    if ((*0x1400debe0 & 1) == 0) {\n        *0x1400debe0 = *0x1400debe0 | 1;\n        *0x1400debd8 = fcn.140064a00(\"IsAppThemed\", 0x1400649d0);\n    }\n    // WARNING: Could not recover jumptable at 0x000140064ab7. Too many branches\n    // WARNING: Treating indirect jump as call\n    (**0x1400debd8)();\n    return;\n}\n",
        "token_count": 136
    },
    "140064ab": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.140064abc(ulong arg1, ulong arg2)\n\n{\n    if ((*0x1400debf0 & 1) == 0) {\n        *0x1400debf0 = *0x1400debf0 | 1;\n        *0x1400debe8 = fcn.140064a00(\"OpenThemeData\", 0x1400649d4);\n    }\n    // WARNING: Could not recover jumptable at 0x000140064b1c. Too many branches\n    // WARNING: Treating indirect jump as call\n    (**0x1400debe8)(arg1, arg2);\n    return;\n}\n",
        "token_count": 148
    },
    "140064b2": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.140064b20(ulong arg1)\n\n{\n    if ((*0x1400dec00 & 1) == 0) {\n        *0x1400dec00 = *0x1400dec00 | 1;\n        *0x1400debf8 = fcn.140064a00(\"CloseThemeData\", 0x1400649d8);\n    }\n    // WARNING: Could not recover jumptable at 0x000140064b70. Too many branches\n    // WARNING: Treating indirect jump as call\n    (**0x1400debf8)(arg1);\n    return;\n}\n",
        "token_count": 138
    },
    "140064b7": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.140064b74(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    ulong in_stack_00000028;\n    ulong in_stack_00000030;\n    ulong uVar1;\n    \n    uVar1 = 0xfffffffffffffffe;\n    if ((*0x1400dec10 & 1) == 0) {\n        *0x1400dec10 = *0x1400dec10 | 1;\n        *0x1400dec08 = fcn.140064a00(\"DrawThemeBackground\", 0x1400649e0);\n    }\n    (**0x1400dec08)(arg1, arg2, arg3, arg4, in_stack_00000028, in_stack_00000030, uVar1);\n    return;\n}\n",
        "token_count": 176
    },
    "140064c1": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.140064c10(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    ulong in_stack_00000028;\n    uint in_stack_00000030;\n    ulong in_stack_00000038;\n    \n    if ((*0x1400dec20 & 1) == 0) {\n        *0x1400dec20 = *0x1400dec20 | 1;\n        *0x1400dec18 = fcn.140064a00(\"GetThemePartSize\", 0x1400649e8);\n    }\n    (**0x1400dec18)(arg1, arg2, arg3, arg4, in_stack_00000028, in_stack_00000030, in_stack_00000038);\n    return;\n}\n",
        "token_count": 172
    },
    "140064cb": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.140064cbc(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    if ((*0x1400dec30 & 1) == 0) {\n        *0x1400dec30 = *0x1400dec30 | 1;\n        *0x1400dec28 = fcn.140064a00(\"IsThemeBackgroundPartiallyTransparent\", 0x1400649f0);\n    }\n    // WARNING: Could not recover jumptable at 0x000140064d2a. Too many branches\n    // WARNING: Treating indirect jump as call\n    (**0x1400dec28)(arg1, arg2, arg3);\n    return;\n}\n",
        "token_count": 153
    },
    "140064d3": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.140064d30(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    if ((*0x1400dec40 & 1) == 0) {\n        *0x1400dec40 = *0x1400dec40 | 1;\n        *0x1400dec38 = fcn.140064a00(\"DrawThemeParentBackground\", 0x1400649f4);\n    }\n    // WARNING: Could not recover jumptable at 0x000140064da0. Too many branches\n    // WARNING: Treating indirect jump as call\n    (**0x1400dec38)(arg1, arg2, arg3);\n    return;\n}\n",
        "token_count": 151
    },
    "14008565": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nulong fcn.140085650(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    ulong uVar5;\n    code *pcVar6;\n    code *pcVar7;\n    int64_t iVar8;\n    uchar auStackX32 [8];\n    uchar auStack56 [8];\n    uint8_t uStack48;\n    \n    iVar2 = fcn.14006e8e0();\n    iVar8 = 0;\n    if (*0x1400dfb08 == 0) {\n        iVar3 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(\"USER32.DLL\");\n        if (iVar3 == 0) {\n            return 0;\n        }\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar3, 0x1400b2f68);\n        if (iVar4 == 0) {\n            return 0;\n        }\n        *0x1400dfb08 = sub.KERNEL32.dll_EncodePointer(iVar4);\n        uVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar3, 0x1400b2f58);\n        *0x1400dfb10 = sub.KERNEL32.dll_EncodePointer(uVar5);\n        uVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar3, 0x1400b2f40);\n        *0x1400dfb18 = sub.KERNEL32.dll_EncodePointer(uVar5);\n        uVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar3, \"GetUserObjectInformationA\");\n        *0x1400dfb28 = sub.KERNEL32.dll_EncodePointer(uVar5);\n        if (*0x1400dfb28 != 0) {\n            uVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar3, \"GetProcessWindowStation\");\n            *0x1400dfb20 = sub.KERNEL32.dll_EncodePointer(uVar5);\n        }\n    }\n    if ((*0x1400dfb20 != iVar2) && (*0x1400dfb28 != iVar2)) {\n        pcVar6 = sub.KERNEL32.dll_DecodePointer(*0x1400dfb20);\n        pcVar7 = sub.KERNEL32.dll_DecodePointer(*0x1400dfb28);\n        if (((pcVar6 != NULL) && (pcVar7 != NULL)) &&\n           (((iVar3 = (*pcVar6)(),  iVar3 == 0 || (iVar1 = (*pcVar7)(iVar3, 1, auStack56, 0xc, auStackX32),  iVar1 == 0)\n             ) || ((uStack48 & 1) == 0)))) {\n            arg3._0_4_ = arg3 | 0x200000;\n            goto code_r0x00014008580a;\n        }\n    }\n    if ((((*0x1400dfb10 != iVar2) && (pcVar6 = sub.KERNEL32.dll_DecodePointer(),  pcVar6 != NULL)) &&\n        (iVar8 = (*pcVar6)(),  iVar8 != 0)) &&\n       ((*0x1400dfb18 != iVar2 && (pcVar6 = sub.KERNEL32.dll_DecodePointer(),  pcVar6 != NULL)))) {\n        iVar8 = (*pcVar6)(iVar8);\n    }\ncode_r0x00014008580a:\n    pcVar6 = sub.KERNEL32.dll_DecodePointer(*0x1400dfb08);\n    if (pcVar6 == NULL) {\n        return 0;\n    }\n    uVar5 = (*pcVar6)(iVar8, arg1, arg2, arg3);\n    return uVar5;\n}\n",
        "token_count": 837
    },
    "14008e3f": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.14008e3f8(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uchar auStack136 [32];\n    uint uStack104;\n    uint uStack96;\n    uint uStack88;\n    uchar *puStack80;\n    uchar auStack72 [16];\n    int64_t iStack56;\n    char cStack48;\n    uchar auStack40 [8];\n    uchar auStack32 [16];\n    uint64_t uStack16;\n    \n    uStack16 = *0x1400d96f0 ^ auStack136;\n    fcn.14006b7c8(auStack72, arg3);\n    puStack80 = auStack72;\n    uStack88 = 0;\n    uStack96 = 0;\n    uStack104 = 0;\n    uVar1 = fcn.140092558(auStack32, auStack40, arg2, 0);\n    iVar2 = fcn.1400910fc(auStack32, arg1);\n    if ((uVar1 & 3) == 0) {\n        if (iVar2 == 1) {\n            if (cStack48 != '\\0') {\n                *(iStack56 + 200) = *(iStack56 + 200) & 0xfffffffd;\n            }\n            goto code_r0x00014008e4dc;\n        }\n        if (iVar2 != 2) goto code_r0x00014008e4c7;\n    }\n    else if ((uVar1 & 1) == 0) {\n        if ((uVar1 & 2) != 0) {\n            if (cStack48 != '\\0') {\n                *(iStack56 + 200) = *(iStack56 + 200) & 0xfffffffd;\n            }\n            goto code_r0x00014008e4dc;\n        }\ncode_r0x00014008e4c7:\n        if (cStack48 != '\\0') {\n            *(iStack56 + 200) = *(iStack56 + 200) & 0xfffffffd;\n        }\n        goto code_r0x00014008e4dc;\n    }\n    if (cStack48 != '\\0') {\n        *(iStack56 + 200) = *(iStack56 + 200) & 0xfffffffd;\n    }\ncode_r0x00014008e4dc:\n    fcn.140069870(uStack16 ^ auStack136);\n    return;\n}\n",
        "token_count": 550
    },
    "14008e61": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.14008e614(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uchar auStack136 [32];\n    uint uStack104;\n    uint uStack96;\n    uint uStack88;\n    uchar *puStack80;\n    uchar auStack72 [16];\n    int64_t iStack56;\n    char cStack48;\n    uchar auStack40 [8];\n    uchar auStack32 [16];\n    uint64_t uStack16;\n    \n    uStack16 = *0x1400d96f0 ^ auStack136;\n    fcn.14006b7c8(auStack72, arg3);\n    puStack80 = auStack72;\n    uStack88 = 0;\n    uStack96 = 0;\n    uStack104 = 0;\n    uVar1 = fcn.140092558(auStack32, auStack40, arg2, 0);\n    iVar2 = fcn.140091700(auStack32, arg1);\n    if ((uVar1 & 3) == 0) {\n        if (iVar2 == 1) {\n            if (cStack48 != '\\0') {\n                *(iStack56 + 200) = *(iStack56 + 200) & 0xfffffffd;\n            }\n            goto code_r0x00014008e6f8;\n        }\n        if (iVar2 != 2) goto code_r0x00014008e6e3;\n    }\n    else if ((uVar1 & 1) == 0) {\n        if ((uVar1 & 2) != 0) {\n            if (cStack48 != '\\0') {\n                *(iStack56 + 200) = *(iStack56 + 200) & 0xfffffffd;\n            }\n            goto code_r0x00014008e6f8;\n        }\ncode_r0x00014008e6e3:\n        if (cStack48 != '\\0') {\n            *(iStack56 + 200) = *(iStack56 + 200) & 0xfffffffd;\n        }\n        goto code_r0x00014008e6f8;\n    }\n    if (cStack48 != '\\0') {\n        *(iStack56 + 200) = *(iStack56 + 200) & 0xfffffffd;\n    }\ncode_r0x00014008e6f8:\n    fcn.140069870(uStack16 ^ auStack136);\n    return;\n}\n",
        "token_count": 551
    },
    "14000116": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint fcn.140001160(ulong param_1, ulong param_2, ulong param_3, ulong param_4)\n\n{\n    int64_t iVar1;\n    uint uVar2;\n    uint uStack24;\n    \n    uVar2 = 0;\n    iVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(\"KERNEL32.DLL\");\n    if (iVar1 == 0) {\n        uStack24 = 0;\n    }\n    else {\n        *0x1400db190 = (*_sym.imp.KERNEL32.dll_GetProcAddress)\n                                 (iVar1, \"CreateToolhelp32Snapshot\", param_3, param_4, uVar2);\n        *0x1400db198 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar1, \"Module32First\");\n        *0x1400db1a0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar1, \"Module32Next\");\n        *0x1400db1a8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar1, \"Process32First\");\n        *0x1400db1b0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar1, \"Process32Next\");\n        *0x1400db1b8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar1, \"Thread32First\");\n        *0x1400db1c0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar1, \"Thread32Next\");\n        if ((((*0x1400db198 == 0) || (*0x1400db1a0 == 0)) || (*0x1400db1a8 == 0)) ||\n           (((*0x1400db1b0 == 0 || (*0x1400db1b8 == 0)) || ((*0x1400db1c0 == 0 || (*0x1400db190 == 0)))))) {\n            uStack24 = 0;\n        }\n        else {\n            uStack24 = 1;\n        }\n    }\n    return uStack24;\n}\n",
        "token_count": 455
    },
    "140002fd": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.140002fd0(int64_t *arg1, ulong arg2, ulong arg3)\n\n{\n    uint32_t uVar1;\n    int64_t arg2_00;\n    ulong uVar2;\n    ushort *puStack120;\n    \n    arg2_00 = (*_sym.imp.KERNEL32.dll_FindResourceA)(arg2);\n    if (arg2_00 == 0) {\n        puStack120 = NULL;\n    }\n    else {\n        puStack120 = fcn.140003210(arg2, arg2_00, arg3);\n    }\n    if (puStack120 == NULL) {\n        uVar2 = 0;\n    }\n    else {\n        uVar1 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(3, 0, puStack120 + 1, *puStack120, 0, 0, 0, 0);\n        if ((1U - *(*arg1 + -8) | *(*arg1 + -0xc) - uVar1) < 0) {\n            fcn.1400033e0(arg1, uVar1);\n        }\n        (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(3, 0, puStack120 + 1, *puStack120, *arg1, uVar1, 0, 0);\n        if ((uVar1 < 0) || (*(*arg1 + -0xc) < uVar1)) {\n            fcn.1400031e0(0x80070057);\n        }\n        *(*arg1 + -0x10) = uVar1;\n        *(uVar1 + *arg1) = 0;\n        uVar2 = 1;\n    }\n    return uVar2;\n}\n",
        "token_count": 384
    },
    "14000321": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint16_t * fcn.140003210(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    uint32_t uVar1;\n    int64_t iVar2;\n    uint16_t *puVar3;\n    uint16_t *puStack40;\n    uint32_t uStack20;\n    \n    iVar2 = (*_sym.imp.KERNEL32.dll_LoadResource)(arg1, arg2);\n    if (iVar2 == 0) {\n        puStack40 = NULL;\n    }\n    else {\n        puStack40 = (*_sym.imp.KERNEL32.dll_LockResource)(iVar2);\n        if (puStack40 == NULL) {\n            puStack40 = NULL;\n        }\n        else {\n            uVar1 = (*_sym.imp.KERNEL32.dll_SizeofResource)(arg1, arg2);\n            puVar3 = puStack40 + uVar1;\n            uStack20 = arg3 & 0xf;\n            for (; (uStack20 != 0 && (puStack40 < puVar3)); puStack40 = puStack40 + *puStack40 + 1) {\n                uStack20 = uStack20 - 1;\n            }\n            if (puStack40 < puVar3) {\n                if (*puStack40 == 0) {\n                    puStack40 = NULL;\n                }\n            }\n            else {\n                puStack40 = NULL;\n            }\n        }\n    }\n    return puStack40;\n}\n",
        "token_count": 308
    },
    "14000330": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint64_t * fcn.140003300(int64_t *arg1, int64_t *arg2, ulong pv)\n\n{\n    int64_t iVar1;\n    \n    if (arg2 == NULL) {\n        fcn.1400031e0(0x80004005);\n    }\n    iVar1 = (**(*arg2 + 0x18))(arg2);\n    *arg1 = iVar1 + 0x18;\n    return arg1;\n}\n",
        "token_count": 100
    },
    "1400033e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.1400033e0(int64_t *arg1, ulong arg2)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    uint32_t uStackX16;\n    uint32_t uStack16;\n    \n    iVar2 = *arg1;\n    uStackX16 = arg2;\n    if (*(iVar2 + -0x10) != arg2 && arg2 <= *(iVar2 + -0x10)) {\n        uStackX16 = *(iVar2 + -0x10);\n    }\n    if (*(iVar2 + -8) < 2) {\n        if (*(iVar2 + -0xc) < uStackX16) {\n            iVar1 = *(iVar2 + -0xc);\n            if (iVar1 < 0x401) {\n                uStack16 = iVar1 << 1;\n            }\n            else {\n                uStack16 = iVar1 + 0x400;\n            }\n            if (uStack16 < uStackX16) {\n                uStack16 = uStackX16;\n            }\n            fcn.1400035e0(arg1, uStack16);\n        }\n    }\n    else {\n        fcn.1400034b0(arg1, uStackX16);\n    }\n    return;\n}\n",
        "token_count": 273
    },
    "1400034b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.1400034b0(int64_t *arg1, ulong arg2)\n\n{\n    int32_t iVar1;\n    int64_t arg3;\n    int64_t **ppiVar2;\n    ulong *puVar3;\n    int64_t iVar4;\n    int32_t *piVar5;\n    int32_t iStack24;\n    \n    arg3 = *arg1;\n    ppiVar2 = arg3 + -0x18;\n    iVar1 = *(arg3 + -0x10);\n    puVar3 = (**(**ppiVar2 + 0x20))(*ppiVar2);\n    iVar4 = (***puVar3)(puVar3, arg2, 1);\n    if (iVar4 == 0) {\n        fcn.1400035c0();\n    }\n    iStack24 = arg2;\n    if (iVar1 < arg2) {\n        iStack24 = iVar1;\n    }\n    fcn.140069a48(iVar4 + 0x18, iStack24 + 1, arg3, iStack24 + 1);\n    *(iVar4 + 8) = iVar1;\n    piVar5 = arg3 + -8;\n    LOCK();\n    iVar1 = *piVar5;\n    *piVar5 = *piVar5 + -1;\n    if (iVar1 + -1 < 1) {\n        (**(**ppiVar2 + 8))(*ppiVar2, ppiVar2);\n    }\n    *arg1 = iVar4 + 0x18;\n    return;\n}\n",
        "token_count": 338
    },
    "1400035e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.1400035e0(int64_t *arg1, ulong arg2)\n\n{\n    int64_t *piVar1;\n    int64_t **ppiVar2;\n    int64_t iVar3;\n    \n    ppiVar2 = *arg1 + -0x18;\n    piVar1 = *ppiVar2;\n    if ((*(*arg1 + -0xc) < arg2) && (0 < arg2)) {\n        iVar3 = (**(*piVar1 + 0x10))(piVar1, ppiVar2, arg2, 1);\n        if (iVar3 == 0) {\n            fcn.1400035c0();\n        }\n        *arg1 = iVar3 + 0x18;\n    }\n    else {\n        fcn.1400035c0();\n    }\n    return;\n}\n",
        "token_count": 182
    },
    "14000371": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong * fcn.140003710(ulong *arg1, ulong arg2)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    ulong *puVar3;\n    \n    arg1[1] = 0;\n    *arg1 = arg2;\n    if (*0x1400db200 == '\\0') {\n        iVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(\"KERNEL32\");\n        if (iVar2 == 0) {\n            fcn.140020780();\n            pcVar1 = swi(3);\n            puVar3 = (*pcVar1)();\n            return puVar3;\n        }\n        *0x1400db1e0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar2, \"CreateActCtxA\");\n        *0x1400db1e8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar2, \"ReleaseActCtx\");\n        *0x1400db1f0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar2, \"ActivateActCtx\");\n        *0x1400db1f8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar2, \"DeactivateActCtx\");\n        if (*0x1400db1e0 == 0) {\n            if (((*0x1400db1e8 != 0) || (*0x1400db1f0 != 0)) || (*0x1400db1f8 != 0)) {\n                fcn.140020780();\n                pcVar1 = swi(3);\n                puVar3 = (*pcVar1)();\n                return puVar3;\n            }\n        }\n        else if (((*0x1400db1e8 == 0) || (*0x1400db1f0 == 0)) || (*0x1400db1f8 == 0)) {\n            fcn.140020780();\n            pcVar1 = swi(3);\n            puVar3 = (*pcVar1)();\n            return puVar3;\n        }\n        *0x1400db200 = '\\x01';\n    }\n    return arg1;\n}\n",
        "token_count": 464
    },
    "140003b6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140003b6c(int64_t vt, ulong cDims, ulong ppsaOut)\n\n{\n    if (*(vt + 0x110) != 0) {\n        (**(**(vt + 0x110) + 0x28))();\n    }\n    if (*(vt + 0x124) != 0) {\n        fcn.140020f58(vt, \"Settings\", \"PreviewPages\", *(vt + 0x124));\n    }\n    return;\n}\n",
        "token_count": 108
    },
    "140003db": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.140003db0(int64_t arg1, ulong arg2)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    ulong uVar3;\n    ulong uStackX8;\n    \n    if (*(arg1 + 0xe8) != 0) {\n        iVar2 = (*_sym.imp.KERNEL32.dll_GlobalLock)();\n        iVar1 = (*_sym.imp.KERNEL32.dll_lstrcmpA)(*(iVar2 + 2) + iVar2, arg2);\n        if (iVar1 == 0) {\n            iVar1 = sub.WINSPOOL.DRV_OpenPrinterA(arg2, &uStackX8, 0);\n            if (iVar1 != 0) {\n                if (*(arg1 + 0xe0) != 0) {\n                    fcn.1400227c4(*(arg1 + 0xe0));\n                }\n                iVar1 = sub.WINSPOOL.DRV_DocumentPropertiesA(0, uStackX8, arg2, 0, 0, 0);\n                uVar3 = (*_sym.imp.KERNEL32.dll_GlobalAlloc)(0x42, iVar1);\n                *(arg1 + 0xe0) = uVar3;\n                uVar3 = (*_sym.imp.KERNEL32.dll_GlobalLock)(uVar3);\n                iVar1 = sub.WINSPOOL.DRV_DocumentPropertiesA(0, uStackX8, arg2, uVar3, 0, 2);\n                if (iVar1 != 1) {\n                    fcn.1400227c4(*(arg1 + 0xe0));\n                    *(arg1 + 0xe0) = 0;\n                }\n                sub.WINSPOOL.DRV_ClosePrinter(uStackX8);\n            }\n        }\n    }\n    return;\n}\n",
        "token_count": 385
    },
    "1400043a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.1400043a0(int64_t arg1, ulong lpString1)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = (*_sym.imp.KERNEL32.dll_lstrcmpA)(lpString1, 0x1400a12f8);\n    if (iVar1 == 0) {\n        *(arg1 + 0x18) = 3;\n    }\n    else {\n        iVar1 = (*_sym.imp.KERNEL32.dll_lstrcmpA)(lpString1, 0x1400a12f4);\n        if (iVar1 == 0) {\n            *(arg1 + 0x18) = 2;\n        }\n        else {\n            iVar1 = (*_sym.imp.KERNEL32.dll_CompareStringA)(0x409, 1, lpString1, 0xffffffff, \"Register\", 0xffffffff);\n            if ((iVar1 != 2) &&\n               (iVar1 = (*_sym.imp.KERNEL32.dll_CompareStringA)\n                                  (0x409, 1, lpString1, 0xffffffff, \"Regserver\", 0xffffffff),  iVar1 != 2)) {\n                iVar1 = (*_sym.imp.KERNEL32.dll_CompareStringA)\n                                  (0x409, 1, lpString1, 0xffffffff, \"RegisterPerUser\", 0xffffffff);\n                if ((iVar1 != 2) &&\n                   (iVar1 = (*_sym.imp.KERNEL32.dll_CompareStringA)\n                                      (0x409, 1, lpString1, 0xffffffff, \"RegserverPerUser\", 0xffffffff),  iVar1 != 2)) {\n                    iVar1 = (*_sym.imp.KERNEL32.dll_CompareStringA)\n                                      (0x409, 1, lpString1, 0xffffffff, \"Unregister\", 0xffffffff);\n                    if ((iVar1 == 2) ||\n                       (iVar1 = (*_sym.imp.KERNEL32.dll_CompareStringA)\n                                          (0x409, 1, lpString1, 0xffffffff, \"Unregserver\", 0xffffffff),  iVar1 == 2)) {\n                        *(arg1 + 0x18) = 6;\n                        return;\n                    }\n                    iVar1 = (*_sym.imp.KERNEL32.dll_CompareStringA)\n                                      (0x409, 1, lpString1, 0xffffffff, \"UnregisterPerUser\", 0xffffffff);\n                    if ((iVar1 != 2) &&\n                       (iVar1 = (*_sym.imp.KERNEL32.dll_CompareStringA)\n                                          (0x409, 1, lpString1, 0xffffffff, \"UnregserverPerUser\", 0xffffffff), \n                       iVar1 != 2)) {\n                        iVar1 = (*_sym.imp.KERNEL32.dll_lstrcmpA)(lpString1, 0x1400a125c);\n                        if (iVar1 == 0) {\n                            fcn.1400236b4(0);\n                            *(arg1 + 0x18) = 4;\n                            return;\n                        }\n                        iVar1 = (*_sym.imp.KERNEL32.dll_CompareStringA)\n                                          (0x409, 1, lpString1, 0xffffffff, \"Embedding\", 0xffffffff);\n                        if (iVar1 == 2) {\n                            fcn.1400236b4(0);\n                            *(arg1 + 0xc) = 1;\n                        }\n                        else {\n                            iVar1 = (*_sym.imp.KERNEL32.dll_CompareStringA)\n                                              (0x409, 1, lpString1, 0xffffffff, \"Automation\", 0xffffffff);\n                            if (iVar1 != 2) {\n                                return;\n                            }\n                            fcn.1400236b4(0);\n                            *(arg1 + 0x10) = 1;\n                        }\n                        *(arg1 + 8) = 0;\n                        return;\n                    }\n                    *(arg1 + 0x18) = 6;\n                    *(arg1 + 0x14) = 1;\n                    return;\n                }\n                *(arg1 + 0x14) = 1;\n            }\n            *(arg1 + 0x18) = 5;\n        }\n    }\n    return;\n}\n",
        "token_count": 910
    },
    "1400048d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.1400048d0(int64_t *arg1)\n\n{\n    if ((*0x1400db1e8 != NULL) && (*arg1 != -1)) {\n        if ((*0x1400db1f8 != NULL) && (arg1[1] != 0)) {\n            arg1[1] = 0;\n            (**0x1400db1f8)(0);\n        }\n        (**0x1400db1e8)(*arg1);\n    }\n    return;\n}\n",
        "token_count": 112
    },
    "14000576": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nvoid fcn.140005760(int64_t arg1, int64_t arg2)\n\n{\n    uint32_t uVar1;\n    int64_t *arg1_00;\n    uint64_t arg3;\n    \n    arg1_00 = arg1 + 0x20;\n    arg3 = 0;\n    if ((*(*arg1_00 + -0x10) == 0) ||\n       ((*(arg1 + 0x18) == 3 &&\n        ((arg1_00 = arg1 + 0x28,  *(*arg1_00 + -0x10) == 0 ||\n         ((*(arg1 + 0x18) == 3 &&\n          ((arg1_00 = arg1 + 0x30,  *(*arg1_00 + -0x10) == 0 ||\n           ((*(arg1 + 0x18) == 3 && (arg1_00 = arg1 + 0x38,  *(*arg1_00 + -0x10) == 0)))))))))))) {\n        if (arg2 != 0) {\n            uVar1 = fcn.1400699a0(arg2);\n            arg3 = uVar1;\n        }\n        fcn.140005294(arg1_00, arg2, arg3);\n    }\n    return;\n}\n",
        "token_count": 287
    },
    "140005bc": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint64_t fcn.140005bcc(int64_t *arg1, uint64_t arg2, ulong arg3, int64_t arg4)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    uint64_t uVar4;\n    ulong *puVar5;\n    code **ppcVar6;\n    uint32_t uVar7;\n    int64_t *piVar8;\n    ulong in_stack_00000028;\n    \n    arg2 = arg2 & 0xffffffff;\n    if (arg3 == 0xfffffffe) {\n        iVar3 = fcn.140017ad4();\n        if (*(iVar3 + 0x68) != 0) {\n            iVar3 = fcn.140017ad4();\n            uVar4 = (**(**(iVar3 + 0x68) + 8))(*(iVar3 + 0x68), arg1, arg2, arg4, in_stack_00000028);\n            return uVar4;\n        }\n        fcn.140020780();\n        pcVar1 = swi(3);\n        uVar4 = (*pcVar1)();\n        return uVar4;\n    }\n    if (arg3 == 0xfffffffd) {\n        uVar7 = 0;\n        if (arg4 == 0) {\n            fcn.140020780();\n            pcVar1 = swi(3);\n            uVar4 = (*pcVar1)();\n            return uVar4;\n        }\n        iVar3 = *(arg4 + 0x50);\n        puVar5 = (**(*arg1 + 0x58))();\n        do {\n            if ((puVar5 == NULL) || (uVar7 != 0)) {\n                return uVar7;\n            }\n            piVar8 = puVar5[1];\n            while (((*(piVar8 + 1) != 0 && (*(piVar8 + 0xc) != 0)) && (uVar7 == 0))) {\n                if (arg2 == *(piVar8 + 1)) {\n                    if (iVar3 == 0) {\n                        if (*piVar8 == 0) {\ncode_r0x000140005c9a:\n                            uVar7 = 1;\n                            *(arg4 + 8) = *(piVar8 + 0xc);\n                        }\n                    }\n                    else if ((*piVar8 != 0) && (iVar2 = fcn.14006af20(iVar3, *piVar8, 0x10),  iVar2 == 0))\n                    goto code_r0x000140005c9a;\n                }\n                piVar8 = piVar8 + 2;\n            }\n            puVar5 = *puVar5;\n        } while( true );\n    }\n    uVar7 = arg3;\n    if (arg3 != 0xffffffff) {\n        uVar7 = arg3 & 0xffff;\n        uVar4 = arg3 >> 0x10;\n        if (arg3 >> 0x10 != 0) goto code_r0x000140005cd8;\n    }\n    uVar4 = 0x111;\ncode_r0x000140005cd8:\n    ppcVar6 = (**(*arg1 + 0x50))();\n    while( true ) {\n        if (*ppcVar6 == NULL) {\n            return 0;\n        }\n        iVar3 = fcn.14000c830(ppcVar6[1], uVar4, uVar7, arg2);\n        if (iVar3 != 0) break;\n        ppcVar6 = (**ppcVar6)();\n    }\n    uVar4 = fcn.140005a48(arg1, arg2, uVar7, *(iVar3 + 0x18));\n    return uVar4;\n}\n",
        "token_count": 823
    },
    "140005e3": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint64_t fcn.140005e38(ulong *arg1, int64_t *arg2, ulong arg3)\n\n{\n    int32_t iVar1;\n    code *pcVar2;\n    uint32_t uVar3;\n    uint uVar4;\n    uint64_t uVar5;\n    ulong auStack24 [2];\n    \n    iVar1 = *(arg1 + 1);\n    if ((iVar1 == 0) || (iVar1 == -1)) {\n        uVar5 = 1;\n    }\n    else {\n        if (arg2 == NULL) {\n            fcn.140020780();\n            pcVar2 = swi(3);\n            uVar5 = (*pcVar2)();\n            return uVar5;\n        }\n        *(arg1 + 5) = 0;\n        uVar3 = (**(*arg2 + 0x18))(arg2, iVar1, 0xffffffff, arg1, 0);\n        uVar5 = uVar3;\n        if ((arg3 != 0) && (*(arg1 + 5) == 0)) {\n            auStack24[0] = 0;\n            uVar4 = (**(*arg2 + 0x18))(arg2, *(arg1 + 1), 0, arg1, auStack24);\n            (***arg1)(arg1, uVar4);\n        }\n    }\n    return uVar5;\n}\n",
        "token_count": 305
    },
    "14000642": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nulong fcn.140006420(ulong noname_0, ulong *arg2)\n\n{\n    ulong uVar1;\n    \n    if (*(arg2 + 1) == 1) {\n        uVar1 = 0xffffffffffffffff;\n    }\n    else {\n        if (*(arg2 + 1) == 0xf) {\n            (*_sym.imp.USER32.dll_ValidateRect)(*arg2, 0);\n        }\n        uVar1 = 0;\n    }\n    return uVar1;\n}\n",
        "token_count": 109
    },
    "1400066d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.1400066d0(int64_t *arg1, int64_t arg2)\n\n{\n    code **ppcVar1;\n    int64_t iVar2;\n    code *arg1_00;\n    \n    ppcVar1 = (**(*arg1 + 0x50))();\n    do {\n        if (*ppcVar1 == NULL) {\n            return 0;\n        }\n        arg1_00 = ppcVar1[1];\n        if (*(arg2 + 8) < 0xc000) {\n            iVar2 = fcn.14000c830(arg1_00, *(arg2 + 8), 0, 0);\n            if (iVar2 != 0) {\ncode_r0x000140006716:\n                (**(iVar2 + 0x18))(arg1, *(arg2 + 0x10), *(arg2 + 0x18));\n                return 1;\n            }\n        }\n        else {\n            while (iVar2 = fcn.14000c830(arg1_00, 0xc000, 0, 0),  iVar2 != 0) {\n                if (**(iVar2 + 0x10) == *(arg2 + 8)) goto code_r0x000140006716;\n                arg1_00 = iVar2 + 0x20;\n            }\n        }\n        ppcVar1 = (**ppcVar1)();\n    } while( true );\n}\n",
        "token_count": 311
    },
    "1400068d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.1400068d4(int64_t *arg1)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    int64_t *piVar3;\n    ulong uVar4;\n    int64_t *piVar5;\n    \n    iVar2 = fcn.140017b90();\n    if (((*(iVar2 + 8) == 0) || (*arg1 != 0)) || (iVar1 = fcn.1400066d0(*(iVar2 + 8), arg1),  iVar1 == 0)) {\n        iVar2 = fcn.140017b90();\n        if (*(iVar2 + 8) == NULL) {\n            piVar3 = NULL;\n        }\n        else {\n            piVar3 = (**(**(iVar2 + 8) + 0xe8))();\n        }\n        if (piVar3 == NULL) {\n            iVar2 = 0;\n        }\n        else {\n            iVar2 = piVar3[8];\n        }\n        iVar1 = fcn.140010380(iVar2, arg1);\n        if (iVar1 == 0) {\n            if (piVar3 != NULL) {\n                uVar4 = fcn.14000fc08(*arg1);\n                piVar5 = fcn.140012120(uVar4);\n                if (piVar5 != piVar3) {\n                    uVar4 = (**(*piVar3 + 0x210))(piVar3, arg1);\n                    return uVar4;\n                }\n            }\n            return 0;\n        }\n    }\n    return 1;\n}\n",
        "token_count": 344
    },
    "14006afe": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.14006afe8(ulong arg1)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int64_t arg1_00;\n    \n    if (*0x1400b1798 != NULL) {\n        iVar2 = fcn.1400722d0(0x1400b1798);\n        if (iVar2 != 0) {\n            (**0x1400b1798)();\n        }\n    }\n    arg1_00 = fcn.14006e9f4();\n    if (arg1_00 != 0) {\n        fcn.14006ebd4(arg1_00);\n    }\n    (*_sym.imp.KERNEL32.dll_ExitThread)(arg1);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 178
    },
    "140006ee": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140006ee8(void)\n\n{\n    int64_t iVar1;\n    ulong uVar2;\n    uint uVar3;\n    \n    iVar1 = fcn.140017ad4();\n    if (*(iVar1 + 0x28) == '\\0') {\n        iVar1 = fcn.140016f48();\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetCurrentThreadId)();\n        uVar2 = (*_sym.imp.USER32.dll_SetWindowsHookExA)(0xffffffff, 0x140006cb0, 0, uVar3);\n        *(iVar1 + 0x50) = uVar2;\n    }\n    return;\n}\n",
        "token_count": 146
    },
    "14000722": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.14000722c(int64_t arg1, ulong arg2, uint64_t arg3, ulong arg4)\n\n{\n    code *pcVar1;\n    ulong uVar2;\n    int64_t iVar3;\n    ulong uStack72;\n    int64_t iStack64;\n    uint32_t uStack56;\n    int64_t iStack40;\n    int64_t iStack32;\n    int32_t iStack24;\n    \n    if (*(arg1 + 0x58) != 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        uVar2 = (*pcVar1)();\n        return uVar2;\n    }\n    fcn.1400698a0(&uStack72, 0, 0x38);\n    uStack72 = fcn.140016f48();\n    iStack64 = arg1;\n    iStack40 = (*_sym.imp.KERNEL32.dll_CreateEventA)(0, 1, 0);\n    iStack32 = (*_sym.imp.KERNEL32.dll_CreateEventA)(0, 1, 0);\n    uStack56 = arg2;\n    if (iStack40 != 0) {\n        if (iStack32 != 0) {\n            iVar3 = fcn.14006b0f8(arg4, arg3 & 0xffffffff, 0x1400070c0, &uStack72);\n            *(arg1 + 0x58) = iVar3;\n            if (iVar3 == 0) {\n                (*_sym.imp.KERNEL32.dll_CloseHandle)(iStack40);\n            }\n            else {\n                (*_sym.imp.KERNEL32.dll_ResumeThread)(iVar3);\n                (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(iStack40, 0xffffffff);\n                (*_sym.imp.KERNEL32.dll_CloseHandle)(iStack40);\n                if ((arg2 & 4) != 0) {\n                    (*_sym.imp.KERNEL32.dll_SuspendThread)(*(arg1 + 0x58));\n                }\n                if (iStack24 == 0) {\n                    (*_sym.imp.KERNEL32.dll_SetEvent)(iStack32);\n                    return 1;\n                }\n                (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(*(arg1 + 0x58), 0xffffffff);\n                (*_sym.imp.KERNEL32.dll_CloseHandle)(*(arg1 + 0x58));\n                *(arg1 + 0x58) = 0;\n            }\n            goto code_r0x000140007380;\n        }\n        (*_sym.imp.KERNEL32.dll_CloseHandle)();\n    }\n    if (iStack32 == 0) {\n        return 0;\n    }\ncode_r0x000140007380:\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(iStack32);\n    return 0;\n}\n",
        "token_count": 622
    },
    "14000756": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.14000756c(int64_t arg1)\n\n{\n    ulong uVar1;\n    \n    if (*(arg1 + 0xb0) == 0) {\n        uVar1 = 0;\n    }\n    else {\n        uVar1 = (**(**(arg1 + 0xb0) + 0x20))();\n    }\n    return uVar1;\n}\n",
        "token_count": 84
    },
    "1400075e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint64_t ** fcn.1400075ec(int64_t **arg1)\n\n{\n    code *pcVar1;\n    int64_t *piVar2;\n    int64_t **ppiVar3;\n    \n    piVar2 = (**(**arg1 + 0x20))();\n    if ((*(arg1 + 2) < 0) || (piVar2 != *arg1)) {\n        ppiVar3 = (***piVar2)(piVar2, *(arg1 + 1), 1);\n        if (ppiVar3 == NULL) {\n            fcn.1400035c0();\n            pcVar1 = swi(3);\n            ppiVar3 = (*pcVar1)();\n            return ppiVar3;\n        }\n        *(ppiVar3 + 1) = *(arg1 + 1);\n        fcn.140069a48(ppiVar3 + 3, *(arg1 + 1) + 1, arg1 + 3, *(arg1 + 1) + 1);\n    }\n    else {\n        LOCK();\n        *(arg1 + 2) = *(arg1 + 2) + 1;\n        ppiVar3 = arg1;\n    }\n    return ppiVar3;\n}\n",
        "token_count": 270
    },
    "140007bb": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint64_t * fcn.140007bbc(int64_t *arg1, int64_t *arg2)\n\n{\n    int64_t **arg1_00;\n    int32_t *piVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    int64_t **ppiVar5;\n    \n    iVar4 = *arg2;\n    iVar3 = *arg1;\n    arg1_00 = iVar4 + -0x18;\n    ppiVar5 = iVar3 + -0x18;\n    if (arg1_00 != ppiVar5) {\n        if ((*(iVar3 + -8) < 0) || (*arg1_00 != *ppiVar5)) {\n            fcn.140005294(arg1, iVar4, *(iVar4 + -0x10));\n        }\n        else {\n            iVar4 = fcn.1400075ec(arg1_00);\n            LOCK();\n            piVar1 = iVar3 + -8;\n            iVar2 = *piVar1;\n            *piVar1 = *piVar1 + -1;\n            if (iVar2 + -1 < 1) {\n                (**(**ppiVar5 + 8))(*ppiVar5, ppiVar5);\n            }\n            *arg1 = iVar4 + 0x18;\n        }\n    }\n    return arg1;\n}\n",
        "token_count": 299
    },
    "140007e9": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.140007e98(int64_t arg1, int64_t *arg2)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    ulong arg2_00;\n    uchar auStack392 [32];\n    int64_t aiStack360 [2];\n    ulong uStack344;\n    int64_t iStack336;\n    int64_t iStack328;\n    int64_t iStack320;\n    ulong uStack312;\n    uchar auStack296 [272];\n    uint64_t uStack24;\n    \n    uStack312 = 0xfffffffffffffffe;\n    uStack24 = *0x1400d96f0 ^ auStack392;\n    iStack336 = arg1;\n    aiStack360[0] = fcn.1400075ec(*arg2 + -0x18);\n    aiStack360[0] = aiStack360[0] + 0x18;\n    if ((arg1 == -0x80000000) && (iVar3 = fcn.140016830(),  iVar3 == 1)) {\n        arg2_00 = fcn.140007cfc(&iStack320, \"Software\\\\Classes\\\\\", aiStack360);\n        fcn.140007bbc(aiStack360, arg2_00);\n        LOCK();\n        piVar1 = iStack320 + -8;\n        iVar3 = *piVar1;\n        *piVar1 = *piVar1 + -1;\n        if (iVar3 + -1 < 1) {\n            (**(**(iStack320 + -0x18) + 8))();\n        }\n        arg1 = -0x7fffffff;\n        iStack336 = -0x7fffffff;\n    }\n    iVar3 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyA)(arg1, aiStack360[0], &uStack344);\n    if (iVar3 == 0) {\n        do {\n            iVar3 = (*_sym.imp.ADVAPI32.dll_RegEnumKeyA)(uStack344, 0, auStack296, 0x104);\n            if (iVar3 != 0) break;\n            fcn.1400057dc(&iStack328, auStack296);\n            iVar3 = fcn.140007e98(uStack344, &iStack328);\n            LOCK();\n            piVar1 = iStack328 + -8;\n            iVar2 = *piVar1;\n            *piVar1 = *piVar1 + -1;\n            if (iVar2 + -1 < 1) {\n                (**(**(iStack328 + -0x18) + 8))();\n            }\n        } while (iVar3 == 0);\n        if ((iVar3 == 0x103) || (iVar3 == 0x3f2)) {\n            (*_sym.imp.ADVAPI32.dll_RegDeleteKeyA)(arg1, aiStack360[0]);\n        }\n        (*_sym.imp.ADVAPI32.dll_RegCloseKey)(uStack344);\n    }\n    LOCK();\n    piVar1 = aiStack360[0] + -8;\n    iVar3 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar3 + -1 < 1) {\n        (**(**(aiStack360[0] + -0x18) + 8))();\n    }\n    fcn.140069870(uStack24 ^ auStack392);\n    return;\n}\n",
        "token_count": 751
    },
    "1400084f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.1400084f4(int64_t arg1)\n\n{\n    if (*(arg1 + 0xb0) != 0) {\n        (**(**(arg1 + 0xb0) + 0x48))();\n    }\n    return;\n}\n",
        "token_count": 58
    },
    "1400086d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nuint64_t fcn.1400086d8(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint uVar3;\n    int64_t iVar4;\n    uint64_t uVar5;\n    ulong uStack16;\n    \n    uStack16 = 0;\n    iVar4 = fcn.140017ad4();\n    uVar5 = fcn.140016658(*(iVar4 + 0xd8), &uStack16);\n    iVar1 = uVar5;\n    if (iVar1 != 0) {\n        uVar2 = (*_sym.imp.USER32.dll_MessageBoxA)(arg1, arg2, arg3, arg4, 0);\n        uVar5 = uVar2;\n        if (iVar1 != 2) {\n            if (uVar2 != 0) {\n                uVar3 = 0;\n            }\n            else {\n                uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            }\n            fcn.14001663c(0, uStack16);\n            if (uVar2 == 0) {\n                (*_sym.imp.KERNEL32.dll_SetLastError)(uVar3);\n            }\n        }\n    }\n    return uVar5;\n}\n",
        "token_count": 283
    },
    "14000879": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140008790(ulong arg1)\n\n{\n    int32_t iVar1;\n    int64_t *piVar2;\n    \n    piVar2 = fcn.1400063f8();\n    if (piVar2 == NULL) {\n        piVar2 = NULL;\n    }\n    else {\n        piVar2 = (**(*piVar2 + 0xe8))(piVar2);\n    }\n    if (piVar2 != NULL) {\n        iVar1 = (**(*piVar2 + 0x250))(piVar2);\n        if ((iVar1 != 0) && (piVar2[0x1c] != 0)) {\n            (**(*piVar2[0x1c] + 200))(piVar2[0x1c], arg1);\n        }\n    }\n    return;\n}\n",
        "token_count": 179
    },
    "14000890": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.140008904(int64_t arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    int64_t arg1_00;\n    int32_t *piVar2;\n    int32_t iVar3;\n    uchar *arg3_00;\n    uchar auStack392 [32];\n    int32_t aiStack360 [2];\n    int64_t iStack352;\n    uchar auStack344 [259];\n    uchar uStack85;\n    uint64_t uStack72;\n    \n    uStack72 = *0x1400d96f0 ^ auStack392;\n    fcn.140008790(0);\n    arg1_00 = fcn.1400087f8(0, &iStack352);\n    if (arg1_00 != iStack352) {\n        (*_sym.imp.USER32.dll_EnableWindow)(arg1_00, 1);\n    }\n    iVar3 = 0;\n    aiStack360[0] = 0;\n    (*_sym.imp.USER32.dll_GetWindowThreadProcessId)(arg1_00, aiStack360);\n    if ((((arg1_00 == 0) || (iVar1 = (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)(),  aiStack360[0] != iVar1)) ||\n        (piVar2 = (*_sym.imp.USER32.dll_SendMessageA)(arg1_00, 0x376, 0),  piVar2 == NULL)) &&\n       (piVar2 = NULL,  arg1 != 0)) {\n        piVar2 = arg1 + 0xf0;\n    }\n    if ((piVar2 != NULL) && (iVar3 = *piVar2,  arg4 != 0)) {\n        *piVar2 = arg4 + 0x30000;\n    }\n    if ((arg3 & 0xf0) == 0) {\n        if ((arg3 & 0xf) < 2) {\n            arg3._0_4_ = arg3 | 0x30;\n        }\n        else if ((arg3 & 0xf) - 3 < 2) {\n            arg3._0_4_ = arg3 | 0x20;\n        }\n    }\n    auStack344[0] = 0;\n    if (arg1 == 0) {\n        arg3_00 = auStack344;\n        iVar1 = (*_sym.imp.KERNEL32.dll_GetModuleFileNameA)(0, auStack344, 0x104);\n        if (iVar1 == 0x104) {\n            uStack85 = 0;\n        }\n    }\n    else {\n        arg3_00 = *(arg1 + 0xa0);\n    }\n    fcn.1400086d8(arg1_00, arg2, arg3_00, arg3);\n    if (piVar2 != NULL) {\n        *piVar2 = iVar3;\n    }\n    if (iStack352 != 0) {\n        (*_sym.imp.USER32.dll_EnableWindow)(iStack352, 1);\n    }\n    fcn.140008790(1);\n    fcn.140069870(uStack72 ^ auStack392);\n    return;\n}\n",
        "token_count": 696
    },
    "140008c2": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140008c2c(code **arg1)\n\n{\n    int64_t *piVar1;\n    code *pcVar2;\n    ulong in_R8;\n    ulong in_R9;\n    ulong uVar3;\n    \n    *arg1 = vtable.CDialog.0;\n    if (arg1[8] != NULL) {\n        fcn.14000ff48(arg1);\n    }\n    uVar3 = 0xfffffffffffffffe;\n    *arg1 = vtable.CWnd.0;\n    if ((((arg1[8] != NULL) && (arg1 != 0x1400de280)) && (arg1 != 0x1400de330)) &&\n       ((arg1 != 0x1400de3e0 && (arg1 != 0x1400de490)))) {\n        fcn.14000ff48(arg1);\n    }\n    piVar1 = arg1[0x13];\n    if (piVar1 != NULL) {\n        (**(*piVar1 + 8))(piVar1, 1, in_R8, in_R9, uVar3);\n    }\n    pcVar2 = arg1[0x14];\n    if ((pcVar2 != NULL) && (*(pcVar2 + 0x50) == arg1)) {\n        *(pcVar2 + 0x50) = 0;\n    }\n    if (arg1[4] != NULL) {\n        (**(arg1[4] + 0x38))();\n    }\n    arg1[7] = NULL;\n    return;\n}\n",
        "token_count": 339
    },
    "140010b9": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140010b98(code **arg1)\n\n{\n    int64_t *piVar1;\n    code *pcVar2;\n    ulong in_R8;\n    ulong in_R9;\n    ulong uVar3;\n    \n    uVar3 = 0xfffffffffffffffe;\n    *arg1 = vtable.CWnd.0;\n    if ((((arg1[8] != NULL) && (arg1 != 0x1400de280)) && (arg1 != 0x1400de330)) &&\n       ((arg1 != 0x1400de3e0 && (arg1 != 0x1400de490)))) {\n        fcn.14000ff48(arg1);\n    }\n    piVar1 = arg1[0x13];\n    if (piVar1 != NULL) {\n        (**(*piVar1 + 8))(piVar1, 1, in_R8, in_R9, uVar3);\n    }\n    pcVar2 = arg1[0x14];\n    if ((pcVar2 != NULL) && (*(pcVar2 + 0x50) == arg1)) {\n        *(pcVar2 + 0x50) = 0;\n    }\n    if (arg1[4] != NULL) {\n        (**(arg1[4] + 0x38))();\n    }\n    arg1[7] = NULL;\n    return;\n}\n",
        "token_count": 301
    },
    "14000929": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.14000929c(void)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    int64_t *piVar3;\n    ulong uVar4;\n    uchar auStack24 [24];\n    \n    iVar2 = fcn.140017ad4();\n    if (*(iVar2 + 8) == 0) {\n        uVar4 = 0;\n    }\n    else {\n        piVar3 = fcn.1400063f8();\n        if (piVar3 == NULL) {\n            piVar3 = NULL;\n        }\n        else {\n            piVar3 = (**(*piVar3 + 0xe8))(piVar3);\n        }\n        if ((piVar3 != NULL) && (iVar1 = (**(*piVar3 + 0x18))(piVar3, 0xe146, 0, 0, auStack24),  iVar1 != 0)) {\n            return 1;\n        }\n        iVar2 = fcn.140017ad4();\n        uVar4 = (**(**(iVar2 + 8) + 0x18))(*(iVar2 + 8), 0xe146, 0, 0, auStack24);\n    }\n    return uVar4;\n}\n",
        "token_count": 269
    },
    "14000975": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint64_t fcn.14000975c(int64_t *arg1)\n\n{\n    bool bVar1;\n    bool bVar2;\n    bool bVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    int64_t iVar6;\n    int64_t iVar7;\n    int64_t iVar8;\n    int64_t iVar9;\n    int64_t *piVar10;\n    int64_t *hWnd;\n    ulong arg3;\n    uint32_t uVar11;\n    ulong uStack104;\n    \n    iVar8 = arg1[0x18];\n    iVar7 = arg1[0x17];\n    iVar6 = fcn.140017ad4();\n    uStack104 = *(iVar6 + 0x18);\n    if (arg1[0x16] != 0) {\n        iVar7 = fcn.140017ad4();\n        uStack104 = *(iVar7 + 0x18);\n        (*_sym.imp.KERNEL32.dll_FindResourceA)(uStack104, arg1[0x16], 5);\n        iVar7 = (*_sym.imp.KERNEL32.dll_LoadResource)(uStack104);\n    }\n    if (iVar7 != 0) {\n        iVar8 = (*_sym.imp.KERNEL32.dll_LockResource)(iVar7);\n    }\n    if (iVar8 == 0) {\n        iVar8 = -1;\n    }\n    else {\n        iVar6 = fcn.1400090f0(arg1);\n        fcn.14000fd24();\n        hWnd = NULL;\n        bVar3 = false;\n        bVar1 = false;\n        bVar2 = false;\n        if (((iVar6 != 0) &&\n            (iVar9 = (*_sym.imp.USER32.dll_GetDesktopWindow)(),  bVar1 = bVar3,  bVar2 = false,  iVar6 != iVar9)) &&\n           (iVar4 = (*_sym.imp.USER32.dll_IsWindowEnabled)(iVar6),  iVar4 != 0)) {\n            (*_sym.imp.USER32.dll_EnableWindow)(iVar6);\n            bVar2 = true;\n            piVar10 = fcn.1400063f8();\n            if (piVar10 != NULL) {\n                hWnd = (**(*piVar10 + 0xe8))(piVar10);\n            }\n            if (((hWnd != NULL) && (iVar4 = (**(*hWnd + 0x250))(hWnd),  iVar4 != 0)) &&\n               (iVar4 = fcn.14001549c(hWnd),  iVar4 != 0)) {\n                fcn.1400154cc(hWnd, 0);\n                bVar1 = bVar2;\n            }\n        }\n        fcn.140012ea4(arg1);\n        arg3 = fcn.14000fc08(iVar6);\n        iVar4 = fcn.1400094f0(arg1, iVar8, arg3, uStack104);\n        if (iVar4 != 0) {\n            if ((*(arg1 + 0xf) & 0x10) != 0) {\n                uVar5 = fcn.140015284(arg1);\n                uVar11 = 4;\n                if ((uVar5 >> 8 & 1) != 0) {\n                    uVar11 = 5;\n                }\n                fcn.14000f454(arg1, uVar11);\n            }\n            if (arg1[8] != 0) {\n                fcn.140015950(arg1, 0, 0, 0);\n            }\n        }\n        if (bVar1) {\n            fcn.1400154cc(hWnd, 1);\n        }\n        if (bVar2) {\n            (*_sym.imp.USER32.dll_EnableWindow)(iVar6, 1);\n        }\n        if ((iVar6 != 0) && (iVar8 = (*_sym.imp.USER32.dll_GetActiveWindow)(),  iVar8 == arg1[8])) {\n            (*_sym.imp.USER32.dll_SetActiveWindow)(iVar6);\n        }\n        (**(*arg1 + 0xc0))(arg1);\n        fcn.14000914c(arg1);\n        if (arg1[0x16] != 0) {\n            (*_sym.imp.KERNEL32.dll_FreeResource)(iVar7);\n        }\n        iVar8 = *(arg1 + 0x11);\n    }\n    return iVar8;\n}\n",
        "token_count": 949
    },
    "140009b4": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint fcn.140009b4c(int64_t arg1, uint64_t arg2, ulong arg3)\n\n{\n    ulong arg4;\n    uint uVar1;\n    int64_t iVar2;\n    ulong uVar3;\n    \n    *(arg1 + 0xb0) = arg2;\n    if (((arg2 & 0xffffffffffff0000) == 0) && (*(arg1 + 0xa8) == 0)) {\n        *(arg1 + 0xa8) = arg2 & 0xffff;\n    }\n    iVar2 = fcn.140017ad4();\n    arg4 = *(iVar2 + 0x18);\n    uVar3 = (*_sym.imp.KERNEL32.dll_FindResourceA)(arg4, arg2, 5);\n    uVar3 = (*_sym.imp.KERNEL32.dll_LoadResource)(arg4, uVar3);\n    uVar1 = fcn.140009af0(arg1, uVar3, arg3, arg4);\n    (*_sym.imp.KERNEL32.dll_FreeResource)(uVar3);\n    return uVar1;\n}\n",
        "token_count": 240
    },
    "14000a2d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.14000a2dc(int64_t arg1, ulong arg2, ulong arg3)\n\n{\n    int64_t iVar1;\n    code *pcVar2;\n    int64_t iVar3;\n    ulong *puVar4;\n    \n    if (*(arg1 + 0x20) == 0) {\n        iVar3 = fcn.14002aaa4(arg1 + 0x28, *(arg1 + 0x30), 0x18);\n        iVar1 = *(arg1 + 0x30);\n        puVar4 = iVar3 + -0x10 + iVar1 * 0x18;\n        while (iVar1 = iVar1 + -1,  -1 < iVar1) {\n            *puVar4 = *(arg1 + 0x20);\n            *(arg1 + 0x20) = puVar4;\n            puVar4 = puVar4 + -3;\n        }\n    }\n    puVar4 = *(arg1 + 0x20);\n    if (puVar4 != NULL) {\n        *(arg1 + 0x20) = *puVar4;\n        puVar4[1] = arg2;\n        *puVar4 = arg3;\n        *(arg1 + 0x18) = *(arg1 + 0x18) + 1;\n        return;\n    }\n    fcn.140020780();\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 320
    },
    "14000b52": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.14000b524(void)\n\n{\n    uchar auStack216 [32];\n    uint uStack184;\n    uchar auStack180 [156];\n    uint64_t uStack24;\n    \n    uStack24 = *0x1400d96f0 ^ auStack216;\n    fcn.1400698a0(auStack180, 0, 0x90);\n    uStack184 = 0x94;\n    (*_sym.imp.KERNEL32.dll_GetVersionExA)(&uStack184);\n    fcn.140069870(uStack24 ^ auStack216);\n    return;\n}\n",
        "token_count": 132
    },
    "14000b7a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.14000b7ac(int32_t *arg1, ulong arg2)\n\n{\n    int32_t iVar1;\n    ulong uVar2;\n    \n    iVar1 = fcn.14000b584();\n    if (iVar1 == 0) {\n        if (((arg2 & 3) == 0) &&\n           ((((arg1[2] < 1 || (arg1[3] < 1)) || (iVar1 = (*_sym.imp.USER32.dll_GetSystemMetrics)(0),  iVar1 <= *arg1))\n            || (iVar1 = (*_sym.imp.USER32.dll_GetSystemMetrics)(1),  iVar1 <= arg1[1])))) {\n            uVar2 = 0;\n        }\n        else {\n            uVar2 = 0x12340042;\n        }\n        return uVar2;\n    }\n    uVar2 = (**0x1400de240)(arg1, arg2);\n    return uVar2;\n}\n",
        "token_count": 210
    },
    "14000bb0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nint32_t fcn.14000bb0c(int64_t *arg1, ulong arg2)\n\n{\n    uint32_t uVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int64_t iVar4;\n    int64_t *piVar5;\n    ushort *puVar6;\n    uint32_t uVar7;\n    uint32_t uVar8;\n    uint64_t uVar9;\n    uint32_t *puVar11;\n    uint *puVar12;\n    uint auStackX8 [2];\n    uint16_t in_stack_00000028;\n    int64_t *in_stack_00000030;\n    ushort *in_stack_00000038;\n    uint *in_stack_00000048;\n    int64_t iStack200;\n    int64_t iStack192;\n    int64_t iStack184;\n    int64_t *apiStack168 [4];\n    int64_t *piStack136;\n    int64_t aiStack128 [3];\n    int64_t iStack104;\n    int64_t iStack96;\n    int64_t iStack88;\n    ulong uStack80;\n    ushort auStack72 [16];\n    uint64_t uVar10;\n    \n    uVar10 = 0;\n    auStack72[0] = 0;\n    if (arg1 == NULL) {\n        return -0x7ff8ffa9;\n    }\n    if (in_stack_00000030 == NULL) {\n        return -0x7ffdfff8;\n    }\n    uVar1 = *(in_stack_00000030 + 2);\n    if (5 < uVar1) {\n        return -0x7ffdfff2;\n    }\n    if (*(in_stack_00000030 + 0x14) != 0) {\n        puVar11 = in_stack_00000030[1];\n        uVar9 = uVar10;\n        do {\n            if (uVar1 <= *puVar11) {\n                return -0x7ffdfff2;\n            }\n            uVar7 = uVar9 + 1;\n            uVar10 = uVar7;\n            uVar8 = *puVar11;\n            puVar11 = puVar11 + 1;\n            apiStack168[uVar8] = *in_stack_00000030 + uVar9 * 0x18;\n            uVar9 = uVar10;\n        } while (uVar7 < *(in_stack_00000030 + 0x14));\n    }\n    if (uVar10 < uVar1) {\n        piVar5 = *in_stack_00000030 + uVar10 * 0x18;\n        do {\n            iVar3 = uVar10;\n            uVar8 = iVar3 + 1;\n            uVar10 = uVar8;\n            apiStack168[(uVar1 - iVar3) - 1] = piVar5;\n            piVar5 = piVar5 + 3;\n        } while (uVar8 < uVar1);\n    }\n    iVar3 = -0x7ffdfffd;\n    puVar12 = auStackX8;\n    if (in_stack_00000048 != NULL) {\n        puVar12 = in_stack_00000048;\n    }\n    puVar6 = auStack72;\n    if (in_stack_00000038 != NULL) {\n        puVar6 = in_stack_00000038;\n    }\n    (*_sym.imp.OLEAUT32.dll_VariantClear)();\n    if (0x12 < arg2 + 0x139aU) goto code_r0x00014000c3ac;\n    // switch table (19 cases) at 0x14000c3dc\n    switch(*((arg2 + 0x139aU) * 4 + 0x14000c3dc) + 0x140000000) {\n    case 0x14000bc49:\n        if (*(in_stack_00000030 + 2) == 1) {\n            iStack200 = *apiStack168[0];\n            iStack192 = apiStack168[0][1];\n            iStack184 = apiStack168[0][2];\n            iVar3 = (**(*arg1 + 200))(arg1, &iStack200);\n            goto code_r0x00014000c3ac;\n        }\n        break;\n    case 0x14000bc8a:\n        if (*(in_stack_00000030 + 2) == 2) {\n            if (*apiStack168[0] != 3) {\n                iVar3 = (*_sym.imp.OLEAUT32.dll_VariantTimeToDosDateTime)(aiStack128, apiStack168[0], 0, 3);\n                if (iVar3 < 0) goto code_r0x00014000bf93;\n                apiStack168[0] = aiStack128;\n            }\n            uVar2 = *(apiStack168[0] + 1);\n            if (*apiStack168[1] != 3) {\n                iVar3 = (*_sym.imp.OLEAUT32.dll_VariantTimeToDosDateTime)(aiStack128, apiStack168[1], 0, 3);\n                if (iVar3 < 0) {\ncode_r0x00014000c2d8:\n                    *puVar12 = 1;\n                    goto code_r0x00014000c3ac;\n                }\n                apiStack168[1] = aiStack128;\n            }\n            iVar3 = (**(*arg1 + 0xc0))(arg1, uVar2, *(apiStack168[1] + 1), puVar6);\n            goto code_r0x00014000c3ac;\n        }\n        break;\n    case 0x14000bd16:\n        if (*(in_stack_00000030 + 2) == 2) {\n            if (*apiStack168[0] != 3) {\n                iVar3 = (*_sym.imp.OLEAUT32.dll_VariantTimeToDosDateTime)(aiStack128, apiStack168[0], 0, 3);\n                if (iVar3 < 0) goto code_r0x00014000bf93;\n                apiStack168[0] = aiStack128;\n            }\n            iStack200 = *apiStack168[1];\n            iStack192 = apiStack168[1][1];\n            iStack184 = apiStack168[1][2];\n            iVar3 = (**(*arg1 + 0xb8))(arg1, *(apiStack168[0] + 1), &iStack200, puVar6);\n            goto code_r0x00014000c3ac;\n        }\n        break;\n    case 0x14000bd8f:\n        iVar4 = iStack104;\n        if (*(in_stack_00000030 + 2) == 5) {\n            while (((*apiStack168[0] & 0x4000) != 0 && ((*apiStack168[0] & 0xf) != 0))) {\n                if ((*apiStack168[0] & 0xc) == 0) {\n                    iVar4 = apiStack168[0][1];\n                }\n                else {\n                    (*_sym.imp.OLEAUT32.dll_VariantCopy)(apiStack168[0][1]);\n                    *apiStack168[0][1] = 3;\n                    iVar4 = apiStack168[0][1] + 8;\n                }\n            }\n            *puVar12 = 0;\n            iStack200 = *piStack136;\n            iStack192 = piStack136[1];\n            iStack184 = piStack136[2];\n            iVar3 = (**(*arg1 + 0xb0))(arg1, iVar4, iStack96, iStack88, uStack80, &iStack200);\n            goto code_r0x00014000c3ac;\n        }\n        break;\n    case 0x14000be44:\n        if (*(in_stack_00000030 + 2) == 2) {\n            if (*apiStack168[0] != 3) {\n                iVar3 = (*_sym.imp.OLEAUT32.dll_VariantTimeToDosDateTime)(aiStack128, apiStack168[0], 0, 3);\n                if (iVar3 < 0) goto code_r0x00014000bf93;\n                apiStack168[0] = aiStack128;\n            }\n            iStack200 = *apiStack168[1];\n            iStack192 = apiStack168[1][1];\n            iStack184 = apiStack168[1][2];\n            iVar3 = (**(*arg1 + 0xa8))(arg1, *(apiStack168[0] + 1), &iStack200);\n            goto code_r0x00014000c3ac;\n        }\n        break;\n    case 0x14000beba:\n        if (*(in_stack_00000030 + 2) == 1) {\n            iStack200 = *apiStack168[0];\n            iStack192 = apiStack168[0][1];\n            iStack184 = apiStack168[0][2];\n            iVar3 = (**(*arg1 + 0xa0))(arg1, &iStack200, puVar6 + 4);\ncode_r0x00014000c260:\n            if (-1 < iVar3) {\n                *puVar6 = 8;\n            }\n            goto code_r0x00014000c3ac;\n        }\n        break;\n    case 0x14000beff:\n        iVar3 = (**(*arg1 + 0x98))(arg1, puVar6);\n        goto code_r0x00014000c3ac;\n    case 0x14000bf14:\n        iVar3 = (**(*arg1 + 0x90))(arg1, puVar6);\n        goto code_r0x00014000c3ac;\n    case 0x14000bf29:\n        if (*(in_stack_00000030 + 2) == 1) {\n            iStack200 = *apiStack168[0];\n            iStack192 = apiStack168[0][1];\n            iStack184 = apiStack168[0][2];\n            iVar3 = (**(*arg1 + 0x88))(arg1, &iStack200, puVar6 + 4);\n            goto code_r0x00014000c260;\n        }\n        break;\n    case 0x14000bf6e:\n        if (*(in_stack_00000030 + 2) == 2) {\n            if (((*apiStack168[0] & 0x4000) != 0) && ((*apiStack168[0] & 0xc) == 0)) {\n                iVar3 = -0x7ffdfffb;\ncode_r0x00014000bf93:\n                *puVar12 = 0;\n                goto code_r0x00014000c3ac;\n            }\n            if (*apiStack168[0] == 0x400c) {\n                (*_sym.imp.OLEAUT32.dll_VariantCopy)(apiStack168[0][1]);\n                *apiStack168[0][1] = 8;\n                piVar5 = apiStack168[0][1] + 8;\n            }\n            else if (*apiStack168[0] == 0x4008) {\n                piVar5 = apiStack168[0][1];\n            }\n            else {\n                (*_sym.imp.OLEAUT32.dll_VariantCopy)(apiStack168[0]);\n                piVar5 = apiStack168[0] + 1;\n                *apiStack168[0] = 8;\n            }\n            iStack200 = *apiStack168[1];\n            iStack192 = apiStack168[1][1];\n            iStack184 = apiStack168[1][2];\n            iVar3 = (**(*arg1 + 0x80))(arg1, piVar5, &iStack200, puVar6 + 4);\n            goto code_r0x00014000c37c;\n        }\n        break;\n    case 0x14000c026:\n        if (*(in_stack_00000030 + 2) == 1) {\n            iStack200 = *apiStack168[0];\n            iStack192 = apiStack168[0][1];\n            iStack184 = apiStack168[0][2];\n            iVar3 = (**(*arg1 + 0x78))(arg1, &iStack200, puVar6 + 4);\n            goto code_r0x00014000c260;\n        }\n        break;\n    case 0x14000c068:\n        if (*(in_stack_00000030 + 2) == 1) {\n            iStack200 = *apiStack168[0];\n            iStack192 = apiStack168[0][1];\n            iStack184 = apiStack168[0][2];\n            iVar3 = (**(*arg1 + 0x70))(arg1, &iStack200, puVar6);\n            goto code_r0x00014000c3ac;\n        }\n        break;\n    case 0x14000c0a9:\n        if (*(in_stack_00000030 + 2) == 1) {\n            iStack200 = *apiStack168[0];\n            iStack192 = apiStack168[0][1];\n            iStack184 = apiStack168[0][2];\n            iVar3 = (**(*arg1 + 0x68))(arg1, &iStack200, puVar6);\n            goto code_r0x00014000c3ac;\n        }\n        break;\n    case 0x14000c0ea:\n        if (*(in_stack_00000030 + 2) == 1) {\n            iStack200 = *apiStack168[0];\n            iStack192 = apiStack168[0][1];\n            iStack184 = apiStack168[0][2];\n            iVar3 = (**(*arg1 + 0x60))(arg1, &iStack200, puVar6 + 4);\n            goto code_r0x00014000c260;\n        }\n        break;\n    case 0x14000c12c:\n        if ((in_stack_00000028 & 2) == 0) {\n            if ((in_stack_00000028 & 4) == 0) goto code_r0x00014000c219;\n            if (*(in_stack_00000030 + 2) == 2) {\n                iStack200 = *apiStack168[0];\n                iStack192 = apiStack168[0][1];\n                iStack184 = apiStack168[0][2];\n                if (*apiStack168[1] != 8) {\n                    iVar3 = (*_sym.imp.OLEAUT32.dll_VariantTimeToDosDateTime)(aiStack128, apiStack168[1], 0, 3);\n                    if (iVar3 < 0) goto code_r0x00014000c2d8;\n                    apiStack168[1] = aiStack128;\n                }\n                iStack104 = iStack200;\n                iStack96 = iStack192;\n                iStack88 = iStack184;\n                iVar3 = (**(*arg1 + 0xd8))(arg1, &iStack104, apiStack168[1][1]);\n                goto code_r0x00014000c3ac;\n            }\n        }\n        else if (*(in_stack_00000030 + 2) == 1) {\n            iStack200 = *apiStack168[0];\n            iStack192 = apiStack168[0][1];\n            iStack184 = apiStack168[0][2];\n            iVar3 = (**(*arg1 + 0x58))(arg1, &iStack200, puVar6 + 4);\n            goto code_r0x00014000c260;\n        }\n        break;\n    case 0x14000c219:\ncode_r0x00014000c219:\n        if ((in_stack_00000028 & 2) == 0) {\n            if ((in_stack_00000028 & 4) == 0) goto code_r0x00014000c326;\n            if (*(in_stack_00000030 + 2) == 2) {\n                iStack104 = *apiStack168[0];\n                iStack96 = apiStack168[0][1];\n                iStack88 = apiStack168[0][2];\n                if (*apiStack168[1] != 8) {\n                    iVar3 = (*_sym.imp.OLEAUT32.dll_VariantTimeToDosDateTime)(aiStack128, apiStack168[1], 0, 3);\n                    if (iVar3 < 0) goto code_r0x00014000c2d8;\n                    apiStack168[1] = aiStack128;\n                }\n                iStack200 = iStack104;\n                iStack192 = iStack96;\n                iStack184 = iStack88;\n                iVar3 = (**(*arg1 + 0xd0))(arg1, &iStack200, apiStack168[1][1]);\n                goto code_r0x00014000c3ac;\n            }\n        }\n        else if (*(in_stack_00000030 + 2) == 1) {\n            iStack104 = *apiStack168[0];\n            iStack96 = apiStack168[0][1];\n            iStack88 = apiStack168[0][2];\n            iVar3 = (**(*arg1 + 0x50))(arg1, &iStack104, puVar6 + 4);\n            goto code_r0x00014000c260;\n        }\n        break;\n    case 0x14000c326:\ncode_r0x00014000c326:\n        if (*(in_stack_00000030 + 2) == 1) {\n            iStack104 = *apiStack168[0];\n            iStack96 = apiStack168[0][1];\n            iStack88 = apiStack168[0][2];\n            iVar3 = (**(*arg1 + 0x48))(arg1, &iStack104, puVar6 + 4);\n            goto code_r0x00014000c39d;\n        }\n        break;\n    case 0x14000c36e:\n        iVar3 = (**(*arg1 + 0x40))(arg1, puVar6 + 4);\ncode_r0x00014000c37c:\n        if (-1 < iVar3) {\n            *puVar6 = 3;\n        }\n        goto code_r0x00014000c3ac;\n    case 0x14000c38f:\n        iVar3 = (**(*arg1 + 0x38))(arg1, puVar6 + 4);\ncode_r0x00014000c39d:\n        if (-1 < iVar3) {\n            *puVar6 = 9;\n        }\n        goto code_r0x00014000c3ac;\n    }\n    iVar3 = -0x7ffdfff2;\ncode_r0x00014000c3ac:\n    (*_sym.imp.OLEAUT32.dll_VariantCopy)(aiStack128);\n    return iVar3;\n}\n",
        "token_count": 4138
    },
    "14002445": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nint64_t fcn.140024458(int64_t arg1, int64_t arg2)\n\n{\n    int64_t iVar1;\n    ulong arg1_00;\n    int64_t iVar2;\n    int64_t *piVar3;\n    \n    if (arg2 == 0) {\n        iVar1 = 0;\n    }\n    else {\n        iVar1 = fcn.14003a45c(arg1 + 0x30, arg2);\n        if (iVar1 == 0) {\n            iVar1 = fcn.14003a45c(arg1 + 0x68, arg2);\n            if (iVar1 == 0) {\n                arg1_00 = fcn.140003684(0x140022808);\n                iVar1 = fcn.14004c040(arg1 + 8);\n                iVar2 = iVar1;\n                if (iVar1 == 0) {\n                    iVar2 = fcn.140020738();\n                }\n                (**(arg1 + 0x20))(iVar2);\n                piVar3 = fcn.14003a6a4(arg1 + 0x68, arg2);\n                *piVar3 = iVar1;\n                fcn.140003684(arg1_00);\n                iVar2 = *(arg1 + 0xa8);\n                *(iVar1 + iVar2) = arg2;\n                if (*(arg1 + 0xb0) == 2) {\n                    *(iVar1 + 8 + iVar2) = arg2;\n                }\n            }\n            else {\n                iVar2 = *(arg1 + 0xa8);\n                *(iVar1 + iVar2) = arg2;\n                if (*(arg1 + 0xb0) == 2) {\n                    *(iVar1 + 8 + iVar2) = arg2;\n                }\n            }\n        }\n    }\n    return iVar1;\n}\n",
        "token_count": 401
    },
    "14000c83": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t * fcn.14000c832(int32_t *arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    while( true ) {\n        if (*(arg1 + 4) == 0) {\n            return NULL;\n        }\n        if ((((*arg1 == arg2) && (arg1[1] == arg3)) && (arg1[2] <= arg4)) && (arg4 < arg1[3] || arg4 == arg1[3])) break;\n        arg1 = arg1 + 8;\n    }\n    return arg1;\n}\n",
        "token_count": 129
    },
    "14000c9c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.14000c9cc(int64_t *arg1, ulong arg2, uint *arg3, ulong arg4)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    \n    iVar2 = arg1[8];\n    if (arg2 != 2) {\n        iVar1 = (**(*arg1 + 0xf0))();\n        if (iVar1 != 0) {\n            iVar2 = *(iVar1 + 0x40);\n            arg2._0_4_ = 2;\n        }\n    }\n    *arg3 = 0x1c;\n    arg3[1] = arg4;\n    // WARNING: Could not recover jumptable at 0x00014000ca2d. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.USER32.dll_GetScrollInfo)(iVar2, arg2, arg3);\n    return;\n}\n",
        "token_count": 201
    },
    "14000ca3": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.14000ca34(int64_t *arg1, ulong hWnd, int32_t *arg3)\n\n{\n    int32_t iVar1;\n    ulong uVar2;\n    int64_t iVar3;\n    uchar auStack24 [8];\n    uchar auStack16 [8];\n    \n    uVar2 = (*_sym.imp.USER32.dll_GetParent)(hWnd);\n    if ((arg1 == NULL) || (*arg1 != 0)) {\n        (*_sym.imp.USER32.dll_GetWindowRect)(hWnd, auStack24);\n        (*_sym.imp.USER32.dll_ScreenToClient)(uVar2, auStack24);\n        (*_sym.imp.USER32.dll_ScreenToClient)(uVar2, auStack16);\n        iVar1 = (*_sym.imp.USER32.dll_EqualRect)();\n        if (iVar1 == 0) {\n            if (arg1 == NULL) {\n                (*_sym.imp.USER32.dll_SetWindowPos)(hWnd, 0, *arg3, arg3[1], arg3[2] - *arg3, arg3[3] - arg3[1], 0x14);\n            }\n            else {\n                iVar3 = (*_sym.imp.USER32.dll_DeferWindowPos)\n                                  (*arg1, hWnd, 0, *arg3, arg3[1], arg3[2] - *arg3, arg3[3] - arg3[1], 0x14);\n                *arg1 = iVar3;\n            }\n        }\n    }\n    return;\n}\n",
        "token_count": 331
    },
    "14000cff": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nulong fcn.14000cff4(int64_t arg1, ulong arg2, ulong arg3, int64_t arg4)\n\n{\n    int32_t iVar1;\n    ulong uVar2;\n    int32_t in_stack_00000028;\n    uchar auStack24 [4];\n    uint uStack20;\n    \n    if ((((arg1 == 0) || (arg4 == 0)) || (iVar1 = arg3,  iVar1 == 1)) || ((iVar1 == 0 || (iVar1 == 5)))) {\ncode_r0x00014000d07e:\n        uVar2 = 0;\n    }\n    else {\n        if (iVar1 == 2) {\n            iVar1 = fcn.14002295c(arg2, 2, arg3, arg4);\n            if (iVar1 == 0) goto code_r0x00014000d07e;\n        }\n        (*_sym.imp.GDI32.dll_GetObjectA)(arg4, 0x10, auStack24);\n        (*_sym.imp.GDI32.dll_SetBkColor)(arg1, uStack20);\n        if (in_stack_00000028 == -1) {\n            in_stack_00000028 = (*_sym.imp.USER32.dll_GetSysColor)(8);\n        }\n        (*_sym.imp.GDI32.dll_SetTextColor)(arg1, in_stack_00000028);\n        uVar2 = 1;\n    }\n    return uVar2;\n}\n",
        "token_count": 319
    },
    "14000d25": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nint16_t fcn.14000d258(ulong arg1)\n\n{\n    int16_t iVar1;\n    int16_t extraout_AX;\n    int16_t extraout_AX_00;\n    uint extraout_EAX;\n    int32_t iVar2;\n    uint extraout_var;\n    uint uVar3;\n    ulong in_R8;\n    ulong in_R9;\n    bool bVar4;\n    ulong auStackX24 [2];\n    \n    auStackX24[0] = 0;\n    fcn.140017ad4();\n    iVar2 = fcn.140016658(*(CONCAT44(extraout_var, extraout_EAX) + 0xd8), auStackX24);\n    iVar1 = iVar2;\n    uVar3 = 0;\n    if ((iVar2 != 0) && (iVar1 = (*_sym.imp.USER32.dll_RegisterClassA)(arg1),  iVar2 != 2)) {\n        bVar4 = iVar1 == 0;\n        if (bVar4) {\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        }\n        fcn.14001663c(0, auStackX24[0], in_R8, in_R9, iVar1);\n        iVar1 = extraout_AX;\n        if (bVar4) {\n            (*_sym.imp.KERNEL32.dll_SetLastError)(uVar3);\n            iVar1 = extraout_AX_00;\n        }\n    }\n    return iVar1;\n}\n",
        "token_count": 320
    },
    "14000d2f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nuint64_t fcn.14000d2f4(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint uVar3;\n    int64_t iVar4;\n    uint64_t uVar5;\n    ulong in_R9;\n    ulong uStack16;\n    \n    uStack16 = 0;\n    iVar4 = fcn.140017ad4();\n    uVar5 = fcn.140016658(*(iVar4 + 0xd8), &uStack16);\n    iVar1 = uVar5;\n    if (iVar1 != 0) {\n        uVar2 = (*_sym.imp.USER32.dll_GetClassInfoA)(arg1, arg2, arg3, in_R9, 0);\n        uVar5 = uVar2;\n        if (iVar1 != 2) {\n            if (uVar2 != 0) {\n                uVar3 = 0;\n            }\n            else {\n                uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            }\n            fcn.14001663c(0, uStack16);\n            if (uVar2 == 0) {\n                (*_sym.imp.KERNEL32.dll_SetLastError)(uVar3);\n            }\n        }\n    }\n    return uVar5;\n}\n",
        "token_count": 288
    },
    "14000d3a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nuint64_t fcn.14000d3a0(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint uVar3;\n    int64_t iVar4;\n    uint64_t uVar5;\n    ulong in_R9;\n    ulong uStack16;\n    \n    uStack16 = 0;\n    iVar4 = fcn.140017ad4();\n    uVar5 = fcn.140016658(*(iVar4 + 0xd8), &uStack16);\n    iVar1 = uVar5;\n    if (iVar1 != 0) {\n        uVar2 = (*_sym.imp.USER32.dll_GetClassInfoExA)(arg1, arg2, arg3, in_R9, 0);\n        uVar5 = uVar2;\n        if (iVar1 != 2) {\n            if (uVar2 != 0) {\n                uVar3 = 0;\n            }\n            else {\n                uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            }\n            fcn.14001663c(0, uStack16);\n            if (uVar2 == 0) {\n                (*_sym.imp.KERNEL32.dll_SetLastError)(uVar3);\n            }\n        }\n    }\n    return uVar5;\n}\n",
        "token_count": 289
    },
    "14000d44": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nint64_t fcn.14000d44c(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int64_t iVar3;\n    uint in_stack_00000028;\n    uint in_stack_00000030;\n    uint in_stack_00000038;\n    uint in_stack_00000040;\n    ulong in_stack_00000048;\n    ulong in_stack_00000050;\n    ulong in_stack_00000058;\n    ulong in_stack_00000060;\n    ulong uStack32;\n    int64_t iStack24;\n    \n    uStack32 = 0;\n    iVar3 = fcn.140017ad4();\n    iVar1 = fcn.140016658(*(iVar3 + 0xd8), &uStack32);\n    iStack24 = 0;\n    if (iVar1 == 0) {\n        iVar3 = 0;\n    }\n    else {\n        iVar3 = (*_sym.imp.USER32.dll_CreateWindowExA)\n                          (arg1, arg2, arg3, arg4, in_stack_00000028, in_stack_00000030, in_stack_00000038, \n                           in_stack_00000040, in_stack_00000048, in_stack_00000050, in_stack_00000058, in_stack_00000060\n                           , iVar1);\n        if (iVar1 != 2) {\n            iStack24 = iVar3;\n            if (iVar3 != 0) {\n                uVar2 = 0;\n            }\n            else {\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            }\n            fcn.14001663c(0, uStack32);\n            if (iVar3 == 0) {\n                (*_sym.imp.KERNEL32.dll_SetLastError)(uVar2);\n            }\n        }\n    }\n    return iVar3;\n}\n",
        "token_count": 416
    },
    "14000d57": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nint64_t fcn.14000d578(ulong arg1)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int64_t iVar3;\n    ulong in_R8;\n    ulong in_R9;\n    ulong uStackX24;\n    int64_t iVar4;\n    \n    uStackX24 = 0;\n    iVar3 = fcn.140017ad4();\n    iVar1 = fcn.140016658(*(iVar3 + 0xd8), &uStackX24);\n    if (iVar1 == 0) {\n        iVar3 = 0;\n    }\n    else {\n        iVar3 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(arg1);\n        if (iVar1 != 2) {\n            iVar4 = iVar3;\n            if (iVar3 != 0) {\n                uVar2 = 0;\n            }\n            else {\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            }\n            fcn.14001663c(0, uStackX24, in_R8, in_R9, iVar4);\n            if (iVar3 == 0) {\n                (*_sym.imp.KERNEL32.dll_SetLastError)(uVar2);\n            }\n        }\n    }\n    return iVar3;\n}\n",
        "token_count": 274
    },
    "14000d63": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.14000d63c(ulong *arg1)\n\n{\n    if (*(arg1 + 1) != 0) {\n        fcn.14001663c(0, *arg1);\n    }\n    return;\n}\n",
        "token_count": 52
    },
    "1400240f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.1400240f0(ulong arg1)\n\n{\n    int32_t *piVar1;\n    code *pcVar2;\n    int64_t iVar3;\n    \n    iVar3 = arg1;\n    if (0x10 < arg1) {\n        fcn.140020780();\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    if (*0x1400de784 == 0) {\n        fcn.140024050();\n    }\n    if (*(iVar3 * 4 + 0x1400dea60) == 0) {\n        (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(0x1400dea38);\n        if (*(iVar3 * 4 + 0x1400dea60) == 0) {\n            (*_sym.imp.KERNEL32.dll_InitializeCriticalSection)(iVar3 * 0x28 + 0x1400de790);\n            piVar1 = iVar3 * 4 + 0x1400dea60;\n            *piVar1 = *piVar1 + 1;\n        }\n        (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(0x1400dea38);\n    }\n    // WARNING: Could not recover jumptable at 0x00014002417a. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(iVar3 * 0x28 + 0x1400de790);\n    return;\n}\n",
        "token_count": 327
    },
    "14000df9": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nvoid fcn.14000df9c(int64_t *arg1, ulong arg2, uint64_t arg3)\n\n{\n    int64_t hWnd;\n    \n    if (arg2 == 3) {\n        fcn.14000df9c(arg1, 0, arg3);\n        arg2._0_4_ = 1;\n    }\n    hWnd = (**(*arg1 + 0xf0))(arg1);\n    if (hWnd == 0) {\n        (*_sym.imp.USER32.dll_ShowScrollBar)(arg1[8], arg2, arg3 & 0xffffffff);\n    }\n    else {\n        fcn.1400154cc(hWnd, arg3 & 0xffffffff);\n    }\n    return;\n}\n",
        "token_count": 157
    },
    "14000efb": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint64_t fcn.14000efb4(int64_t arg1)\n\n{\n    int64_t *piVar1;\n    code *pcVar2;\n    uint64_t uVar3;\n    ulong *puVar4;\n    \n    uVar3 = 0;\n    if (*(arg1 + 0x98) != 0) {\n        puVar4 = *(*(arg1 + 0x98) + 0x88);\n        while (puVar4 != NULL) {\n            if (puVar4 == NULL) {\n                fcn.140020780();\n                pcVar2 = swi(3);\n                uVar3 = (*pcVar2)();\n                return uVar3;\n            }\n            piVar1 = puVar4 + 2;\n            puVar4 = *puVar4;\n            if ((*(*piVar1 + 8) != 0) && (*(*(*piVar1 + 8) + 0xb4) != 0)) {\n                uVar3 = uVar3 + 1;\n            }\n        }\n    }\n    return uVar3;\n}\n",
        "token_count": 236
    },
    "14000f6d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong * fcn.14000f6d4(int64_t lpModuleName, ulong *arg2)\n\n{\n    int64_t iVar1;\n    ulong uVar2;\n    \n    if (*(lpModuleName + 0x20) == 0) {\n        if (*(lpModuleName + 8) == 0) {\n            iVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(*(lpModuleName + 0x18));\n            *(lpModuleName + 8) = iVar1;\n            if (iVar1 == 0) {\n                iVar1 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(*(lpModuleName + 0x18));\n                *(lpModuleName + 8) = iVar1;\n                *(lpModuleName + 0x10) = iVar1 != 0;\n            }\n        }\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(*(lpModuleName + 8), \"InitCommonControls\");\n        *(lpModuleName + 0x20) = uVar2;\n    }\n    *arg2 = *(lpModuleName + 0x20);\n    return arg2;\n}\n",
        "token_count": 239
    },
    "14000f74": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.14000f748(int64_t arg1)\n\n{\n    int64_t iVar1;\n    int32_t iVar2;\n    code *pcVar3;\n    ulong uStackX24;\n    uchar auStackX32 [8];\n    \n    uStackX24 = 0;\n    iVar1 = fcn.140017ad4();\n    iVar2 = fcn.140016658(*(iVar1 + 0xd8), &uStackX24);\n    if (iVar2 != 0) {\n        fcn.14000f6d4(arg1, auStackX32);\n        pcVar3 = *(arg1 + 0x20);\n        if (pcVar3 == NULL) {\n            fcn.140020780();\n        }\n        (*pcVar3)();\n        if (iVar2 != 2) {\n            fcn.14001663c(0, uStackX24);\n        }\n    }\n    return;\n}\n",
        "token_count": 202
    },
    "14000f7c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong * fcn.14000f7c0(int64_t lpModuleName, ulong *arg2)\n\n{\n    int64_t iVar1;\n    ulong uVar2;\n    \n    if (*(lpModuleName + 0x28) == 0) {\n        if (*(lpModuleName + 8) == 0) {\n            iVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(*(lpModuleName + 0x18));\n            *(lpModuleName + 8) = iVar1;\n            if (iVar1 == 0) {\n                iVar1 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(*(lpModuleName + 0x18));\n                *(lpModuleName + 8) = iVar1;\n                *(lpModuleName + 0x10) = iVar1 != 0;\n            }\n        }\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(*(lpModuleName + 8), \"InitCommonControlsEx\");\n        *(lpModuleName + 0x28) = uVar2;\n    }\n    *arg2 = *(lpModuleName + 0x28);\n    return arg2;\n}\n",
        "token_count": 240
    },
    "14000f83": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nuint64_t fcn.14000f834(int64_t arg1, ulong arg2)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint uVar3;\n    int64_t iVar4;\n    uint64_t uVar5;\n    ulong in_R8;\n    ulong in_R9;\n    code *pcVar6;\n    bool bVar7;\n    ulong uStackX32;\n    uchar auStack16 [8];\n    \n    uStackX32 = 0;\n    iVar4 = fcn.140017ad4();\n    uVar5 = fcn.140016658(*(iVar4 + 0xd8), &uStackX32);\n    iVar1 = uVar5;\n    if (iVar1 != 0) {\n        fcn.14000f7c0(arg1, auStack16);\n        pcVar6 = *(arg1 + 0x28);\n        if (pcVar6 == NULL) {\n            fcn.140020780();\n        }\n        uVar2 = (*pcVar6)(arg2);\n        uVar5 = uVar2;\n        if (iVar1 != 2) {\n            bVar7 = uVar2 != 0;\n            if (bVar7) {\n                uVar3 = 0;\n            }\n            else {\n                uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            }\n            fcn.14001663c(0, uStackX32, in_R8, in_R9, uVar2);\n            if (!bVar7) {\n                (*_sym.imp.KERNEL32.dll_SetLastError)(uVar3);\n            }\n        }\n    }\n    return uVar5;\n}\n",
        "token_count": 363
    },
    "14000f8e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong * fcn.14000f8e8(int64_t lpModuleName, ulong *arg2)\n\n{\n    int64_t iVar1;\n    ulong uVar2;\n    \n    if (*(lpModuleName + 0x20) == 0) {\n        if (*(lpModuleName + 8) == 0) {\n            iVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(*(lpModuleName + 0x18));\n            *(lpModuleName + 8) = iVar1;\n            if (iVar1 == 0) {\n                iVar1 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(*(lpModuleName + 0x18));\n                *(lpModuleName + 8) = iVar1;\n                *(lpModuleName + 0x10) = iVar1 != 0;\n            }\n        }\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(*(lpModuleName + 8), \"InitNetworkAddressControl\");\n        *(lpModuleName + 0x20) = uVar2;\n    }\n    *arg2 = *(lpModuleName + 0x20);\n    return arg2;\n}\n",
        "token_count": 240
    },
    "14000f95": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nuint64_t fcn.14000f95c(int64_t arg1)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint uVar3;\n    int64_t iVar4;\n    uint64_t uVar5;\n    ulong in_R8;\n    ulong in_R9;\n    code *pcVar6;\n    bool bVar7;\n    ulong uStackX24;\n    uchar auStackX32 [8];\n    \n    uStackX24 = 0;\n    iVar4 = fcn.140017ad4();\n    uVar5 = fcn.140016658(*(iVar4 + 0xd8), &uStackX24);\n    iVar1 = uVar5;\n    if (iVar1 != 0) {\n        fcn.14000f8e8(arg1, auStackX32);\n        pcVar6 = *(arg1 + 0x20);\n        if (pcVar6 == NULL) {\n            fcn.140020780();\n        }\n        uVar2 = (*pcVar6)();\n        uVar5 = uVar2;\n        if (iVar1 != 2) {\n            bVar7 = uVar2 != 0;\n            if (bVar7) {\n                uVar3 = 0;\n            }\n            else {\n                uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            }\n            fcn.14001663c(0, uStackX24, in_R8, in_R9, uVar2);\n            if (!bVar7) {\n                (*_sym.imp.KERNEL32.dll_SetLastError)(uVar3);\n            }\n        }\n    }\n    return uVar5;\n}\n",
        "token_count": 359
    },
    "14000fd2": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint64_t fcn.14000fd24(void)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    uint64_t uVar3;\n    int64_t iVar4;\n    bool bVar5;\n    \n    iVar2 = fcn.1400234a0(0x1400de580, 0x140006808);\n    if (iVar2 != 0) {\n        iVar4 = fcn.140017ad4();\n        if ((*(iVar4 + 0x28) != '\\0') && (*(iVar2 + 0x48) != 0)) {\n            (*_sym.imp.USER32.dll_UnhookWindowsHookEx)();\n            *(iVar2 + 0x48) = 0;\n        }\n        bVar5 = *(iVar2 + 0x28) == 0;\n        if (!bVar5) {\n            *(iVar2 + 0x28) = 0;\n        }\n        return bVar5;\n    }\n    fcn.140020780();\n    pcVar1 = swi(3);\n    uVar3 = (*pcVar1)();\n    return uVar3;\n}\n",
        "token_count": 245
    },
    "14001019": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.140010198(int64_t arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int64_t arg1_00;\n    uint32_t uVar1;\n    int64_t arg1_01;\n    int64_t iVar2;\n    int64_t *piVar3;\n    uint32_t uVar4;\n    int64_t iVar5;\n    uint32_t in_stack_00000028;\n    int32_t *in_stack_00000030;\n    ulong *in_stack_00000038;\n    int32_t in_stack_00000040;\n    int64_t iStack88;\n    ulong uStack80;\n    ulong uStack72;\n    int32_t iStack64;\n    int32_t iStack60;\n    \n    iStack60 = 0;\n    iStack64 = 0;\n    if (in_stack_00000038 == NULL) {\n        (*_sym.imp.USER32.dll_GetClientRect)(*(arg1 + 0x40), &uStack80);\n    }\n    else {\n        uStack80 = *in_stack_00000038;\n        uStack72 = in_stack_00000038[1];\n    }\n    uVar4 = in_stack_00000028 & 0xffff7fff;\n    if (uVar4 == 1) {\n        iStack88 = 0;\n    }\n    else {\n        iStack88 = (*_sym.imp.USER32.dll_BeginDeferWindowPos)(8);\n    }\n    arg1_01 = (*_sym.imp.USER32.dll_GetTopWindow)(*(arg1 + 0x40));\n    arg1_00 = 0;\n    while (arg1_01 != 0) {\n        uVar1 = (*_sym.imp.USER32.dll_GetDlgCtrlID)(arg1_01);\n        iVar2 = fcn.14000fc4c(arg1_01);\n        iVar5 = arg1_01;\n        if ((((uVar1 != arg4) && (iVar5 = arg1_00,  arg2 <= uVar1)) && (uVar1 <= arg3)) && (iVar2 != 0)) {\n            (*_sym.imp.USER32.dll_SendMessageA)(arg1_01, 0x361, 0, &iStack88);\n        }\n        arg1_01 = (*_sym.imp.USER32.dll_GetWindow)(arg1_01, 2);\n        arg1_00 = iVar5;\n    }\n    if (uVar4 == 1) {\n        if (in_stack_00000040 == 0) {\n            in_stack_00000030[1] = 0;\n            *in_stack_00000030 = 0;\n            in_stack_00000030[2] = iStack64;\n            in_stack_00000030[3] = iStack60;\n        }\n        else {\n            (*_sym.imp.USER32.dll_CopyRect)(in_stack_00000030, &uStack80);\n        }\n    }\n    else {\n        if ((arg4 != 0) && (arg1_00 != 0)) {\n            piVar3 = fcn.14000fc08(arg1_00);\n            if (uVar4 == 2) {\n                uStack80 = CONCAT44((uStack80 >> 0x20) + in_stack_00000030[1], uStack80 + *in_stack_00000030);\n                uStack72 = CONCAT44((uStack72 >> 0x20) - in_stack_00000030[3], uStack72 - in_stack_00000030[2]);\n            }\n            if ((in_stack_00000028 >> 0xf & 1) == 0) {\n                (**(*piVar3 + 0xd0))(piVar3, &uStack80, 0);\n                fcn.14000ca34(&iStack88, arg1_00, &uStack80);\n            }\n        }\n        if (iStack88 != 0) {\n            (*_sym.imp.USER32.dll_EndDeferWindowPos)();\n        }\n    }\n    return;\n}\n",
        "token_count": 886
    },
    "14001045": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140010454(int64_t arg1)\n\n{\n    int32_t iVar1;\n    \n    if ((*(arg1 + 0x98) != 0) && (iVar1 = (**(**(arg1 + 0x98) + 0x120))(),  iVar1 != 0)) {\n        return;\n    }\n    fcn.14000fb10(arg1);\n    return;\n}\n",
        "token_count": 90
    },
    "1400109a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nulong fcn.1400109ac(int64_t *arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int64_t iVar3;\n    ulong uVar4;\n    ulong in_stack_00000028;\n    uint32_t auStack120 [2];\n    int64_t iStack112;\n    ulong uStack104;\n    uchar auStack96 [24];\n    uchar auStack72 [48];\n    \n    uStack104 = 0xfffffffffffffffe;\n    iVar3 = fcn.1400234a0(0x1400de580, 0x140006808);\n    iStack112 = iVar3;\n    if (iVar3 == 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        uVar4 = (*pcVar1)();\n        return uVar4;\n    }\n    fcn.14006b210(auStack72, iVar3 + 0x98, 0x30);\n    *(iVar3 + 0x98) = arg2;\n    *(iVar3 + 0xa0) = arg3;\n    *(iVar3 + 0xa8) = arg4;\n    *(iVar3 + 0xb0) = in_stack_00000028;\n    if ((arg3 == 2) && (arg1[0x13] != 0)) {\n        (**(*arg1[0x13] + 0xc0))(arg1[0x13], 0);\n    }\n    auStack120[0] = 0;\n    if (arg3 == 0x110) {\n        fcn.14000d89c(arg1, auStack96, auStack120);\n    }\n    uVar2 = auStack120[0];\n    uVar4 = (**(*arg1 + 0x220))(arg1, arg3, arg4, in_stack_00000028);\n    if (arg3 == 0x110) {\n        fcn.140010914(arg1, auStack96, uVar2);\n    }\n    fcn.14006b210(iVar3 + 0x98, auStack72, 0x30);\n    return uVar4;\n}\n",
        "token_count": 488
    },
    "140010da": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint64_t * fcn.140010da8(int64_t *arg1)\n\n{\n    int64_t *arg1_00;\n    int32_t iVar1;\n    int64_t *piVar2;\n    \n    if ((arg1 == NULL) || (arg1[8] == 0)) {\n        arg1 = NULL;\n    }\n    else {\n        iVar1 = (**(*arg1 + 0x250))();\n        piVar2 = arg1;\n        if (iVar1 == 0) {\n            arg1 = fcn.140010d58(arg1);\n            piVar2 = arg1;\n        }\n        while (arg1_00 = piVar2,  arg1_00 != NULL) {\n            piVar2 = fcn.140010d58(arg1_00);\n            arg1 = arg1_00;\n        }\n    }\n    return arg1;\n}\n",
        "token_count": 192
    },
    "14001120": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nvoid fcn.140011200(int64_t arg1, ulong arg2, ulong arg3)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    int64_t arg1_00;\n    int64_t arg1_01;\n    uint64_t uVar3;\n    uint32_t uVar4;\n    ulong uVar5;\n    uchar auStack248 [8];\n    uint32_t uStack240;\n    uchar *puStack216;\n    uchar auStack184 [64];\n    int64_t iStack120;\n    \n    fcn.140005e08(auStack248);\n    fcn.14000d828(auStack184);\n    for (arg1_00 = (*_sym.imp.USER32.dll_GetTopWindow)(*(arg1 + 0x40)); arg1_00 != 0;\n        arg1_00 = (*_sym.imp.USER32.dll_GetWindow)(arg1_00)) {\n        iStack120 = arg1_00;\n        uStack240 = (*_sym.imp.USER32.dll_GetDlgCtrlID)(arg1_00);\n        puStack216 = auStack184;\n        arg1_01 = fcn.14000fc4c(arg1_00);\n        if ((arg1_01 == 0) || (iVar1 = fcn.140005bcc(arg1_01, 0, 0xbd11ffff, auStack248),  iVar1 == 0)) {\n            uVar5 = 0;\n            iVar1 = fcn.140005bcc(arg1, uStack240, 0xffffffff, auStack248);\n            if (iVar1 == 0) {\n                uVar4 = arg3;\n                if (arg3 != 0) {\n                    uVar3 = (*_sym.imp.USER32.dll_SendMessageA)(iStack120, 0x87, 0, 0, uVar5);\n                    if ((uVar3 >> 0xd & 1) == 0) {\n                        uVar4 = 0;\n                    }\n                    else {\n                        uVar2 = fcn.140015284(auStack184);\n                        uVar2 = uVar2 & 0xf;\n                        if ((((uVar2 == 3) || (uVar2 == 6)) || (uVar2 == 7)) || (uVar2 == 9)) {\n                            uVar4 = 0;\n                        }\n                    }\n                }\n                fcn.140005e38(auStack248, arg2, uVar4);\n            }\n        }\n    }\n    iStack120 = 0;\n    fcn.140010b98(auStack184);\n    return;\n}\n",
        "token_count": 570
    },
    "14001137": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.140011378(int64_t *arg1, ulong arg2)\n\n{\n    ulong uVar1;\n    int64_t *piVar2;\n    int64_t iVar3;\n    \n    uVar1 = fcn.14000fc78(arg1, arg2);\n    if (uVar1 != 0) {\n        (**(*arg1 + 0xa0))(arg1);\n        piVar2 = (**(*arg1 + 0x1f0))(arg1);\n        iVar3 = (*_sym.imp.USER32.dll_SetWindowLongPtrA)(arg2, 0xfffffffc, 0x140010b0c);\n        if (*piVar2 == 0) {\n            *piVar2 = iVar3;\n        }\n        uVar1 = 1;\n    }\n    return uVar1;\n}\n",
        "token_count": 179
    },
    "140011ca": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140011ca4(int64_t hWnd, int64_t *arg2)\n\n{\n    int64_t iVar1;\n    code *pcVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    \n    if (*(hWnd + 0xa0) == 0) {\n        uVar3 = (*_sym.imp.USER32.dll_GetWindowTextLengthA)();\n        if ((1U - *(*arg2 + -8) | *(*arg2 + -0xc) - uVar3) < 0) {\n            fcn.1400033e0(arg2, uVar3);\n        }\n        iVar1 = *arg2;\n        if ((uVar3 < 0) || (*(iVar1 + -0xc) < uVar3)) {\n            fcn.1400031e0(0x80070057);\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n        *(iVar1 + -0x10) = uVar3;\n        *(uVar3 + *arg2) = 0;\n        (*_sym.imp.USER32.dll_GetWindowTextA)(*(hWnd + 0x40), iVar1, uVar3 + 1);\n        iVar1 = *arg2;\n        if (iVar1 == 0) {\n            iVar4 = 0;\n        }\n        else {\n            iVar4 = fcn.14006b544(iVar1, *(iVar1 + -0xc));\n            if (iVar4 < 0) goto code_r0x000140011d48;\n        }\n        if (*(*arg2 + -0xc) < iVar4) {\ncode_r0x000140011d48:\n            fcn.1400031e0(0x80070057);\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n        *(*arg2 + -0x10) = iVar4;\n        *(iVar4 + *arg2) = 0;\n    }\n    else {\n        (**(**(hWnd + 0xa0) + 0x118))();\n    }\n    return;\n}\n",
        "token_count": 460
    },
    "140011e3": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.140011e30(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    ulong uVar3;\n    int64_t iVar4;\n    \n    fcn.1400240f0(0xc);\n    iVar2 = fcn.140022cd8(0x1400de540, 0x140010874);\n    if (iVar2 == 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        uVar3 = (*pcVar1)();\n        return uVar3;\n    }\n    if (*(iVar2 + 0x10) == 0) {\n        iVar4 = fcn.14000d578(\"hhctrl.ocx\");\n        *(iVar2 + 8) = iVar4;\n        if (iVar4 != 0) {\n            iVar4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar4, \"HtmlHelpA\");\n            *(iVar2 + 0x10) = iVar4;\n            if (iVar4 != 0) goto code_r0x000140011eca;\n            (*_sym.imp.KERNEL32.dll_FreeLibrary)(*(iVar2 + 8));\n            *(iVar2 + 8) = 0;\n        }\n        uVar3 = 0;\n    }\n    else {\ncode_r0x000140011eca:\n        fcn.140024184(0xc);\n        uVar3 = (**(iVar2 + 0x10))(arg1, arg2, arg3, arg4);\n    }\n    return uVar3;\n}\n",
        "token_count": 353
    },
    "140011f0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.140011f00(int64_t *arg1, uint64_t arg2, int64_t arg3)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    ulong uVar4;\n    int32_t iVar5;\n    uint64_t uVar6;\n    uint32_t uVar7;\n    uchar auStack88 [8];\n    int32_t iStack80;\n    int32_t iStack24;\n    \n    uVar6 = arg2 & 0xffff;\n    uVar7 = arg2 >> 0x10 & 0xffff;\n    iVar5 = uVar6;\n    if (arg3 == 0) {\n        if (iVar5 == 0) {\n            return 0;\n        }\n        fcn.14000c918(auStack88);\n        iStack80 = iVar5;\n        (**(*arg1 + 0x18))(arg1, uVar6, 0xffffffff, auStack88, 0);\n        if (iStack24 != 0) {\n            uVar7 = 0;\ncode_r0x000140011fb5:\n            uVar4 = (**(*arg1 + 0x18))(arg1, uVar6, uVar7, 0, 0);\n            return uVar4;\n        }\n    }\n    else {\n        iVar3 = fcn.1400234a0(0x1400de580, 0x140006808);\n        if (iVar3 == 0) {\n            fcn.140020780();\n            pcVar1 = swi(3);\n            uVar4 = (*pcVar1)();\n            return uVar4;\n        }\n        if ((*(iVar3 + 0x138) != arg1[8]) && (iVar2 = fcn.140010ec4(arg3, 0),  iVar2 == 0)) {\n            if (iVar5 == 0) {\n                return 0;\n            }\n            goto code_r0x000140011fb5;\n        }\n    }\n    return 1;\n}\n",
        "token_count": 448
    },
    "140012ea": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140012ea4(int64_t arg1)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    \n    iVar3 = fcn.1400234a0(0x1400de580, 0x140006808);\n    if (iVar3 == 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    if (*(iVar3 + 0x28) != arg1) {\n        if (*(iVar3 + 0x48) == 0) {\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetCurrentThreadId)();\n            iVar4 = (*_sym.imp.USER32.dll_SetWindowsHookExA)(5, 0x140012ba0, 0, uVar2);\n            *(iVar3 + 0x48) = iVar4;\n            if (iVar4 == 0) {\n                fcn.140020738();\n                pcVar1 = swi(3);\n                (*pcVar1)();\n                return;\n            }\n        }\n        *(iVar3 + 0x28) = arg1;\n    }\n    return;\n}\n",
        "token_count": 268
    },
    "1400131a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.1400131a8(int64_t *arg1, ulong arg2, uint64_t arg3, int64_t *arg4)\n\n{\n    uint uVar1;\n    code *pcVar2;\n    int16_t iVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    ulong uVar6;\n    code **ppcVar7;\n    uchar *puVar8;\n    int64_t iVar9;\n    ulong uVar10;\n    uint64_t uVar11;\n    uchar *arg2_00;\n    uint64_t uVar12;\n    int16_t iVar13;\n    uint32_t *puVar14;\n    uint32_t *puVar15;\n    uint64_t *in_stack_00000028;\n    uint64_t *in_stack_fffffffffffffee8;\n    uint64_t uStack264;\n    int32_t iStack256;\n    int32_t iStack252;\n    uint uStack248;\n    uchar auStack240 [8];\n    int64_t iStack232;\n    ulong uStack208;\n    uchar auStack200 [64];\n    int64_t iStack136;\n    int64_t iStack40;\n    \n    uStack208 = 0xfffffffffffffffe;\n    uStack264 = 0;\n    uStack248 = 0x7fffffff;\n    if (arg2 == 0x111) {\n        iVar4 = (**(*arg1 + 0x1e0))(arg1, arg3, arg4);\n        if (iVar4 == 0) {\n            return 0;\n        }\n        uStack264 = 1;\n    }\n    else if (arg2 == 0x4e) {\n        if ((*arg4 == 0) || (iVar4 = (**(*arg1 + 0x1e8))(arg1, arg3, arg4, &uStack264),  iVar4 == 0)) {\n            return 0;\n        }\n    }\n    else {\n        if (arg2 == 6) {\n            uVar6 = fcn.14000fc08(arg4);\n            fcn.1400128e8(arg1, arg3, uVar6);\n        }\n        iVar13 = arg4;\n        if ((arg2 == 0x20) && (iVar4 = fcn.14001298c(arg1, iVar13, arg4 >> 0x10 & 0xffff),  iVar4 != 0)) {\n            uStack264 = 1;\n        }\n        else {\n            if (((arg1[0x13] != 0) && (0 < *(arg1[0x13] + 0xe0))) &&\n               ((((0x1ff < arg2 && (arg2 < 0x20a)) || ((0xff < arg2 && (arg2 < 0x110)))) || (arg2 - 0x281 < 0x11)))) {\n                in_stack_fffffffffffffee8 = &uStack264;\n                iVar4 = (**(*arg1[0x13] + 0x128))(arg1[0x13], arg2, arg3, arg4, in_stack_fffffffffffffee8);\n                if (iVar4 != 0) goto code_r0x000140013f3b;\n            }\n            ppcVar7 = (**(*arg1 + 0x50))();\n            uVar12 = (ppcVar7 ^ arg2) & 0x1ff;\n            uStack248 = 7;\n            fcn.1400240f0(7);\n            uVar11 = 0x1400db230;\n            if ((arg2 != *(uVar12 * 0x18 + 0x1400db230)) || (ppcVar7 != *(uVar12 * 0x18 + 0x1400db240))) {\n                *(uVar12 * 0x18 + 0x1400db230) = arg2;\n                *(uVar12 * 0x18 + 0x1400db240) = ppcVar7;\n                pcVar2 = *ppcVar7;\n                do {\n                    if (pcVar2 == NULL) {\n                        *(uVar12 * 0x18 + 0x1400db238) = 0;\n                        fcn.140024184(7);\n                        return 0;\n                    }\n                    if (arg2 < 0xc000) {\n                        puVar14 = ppcVar7[1];\n                        iVar9 = *(puVar14 + 4);\n                        for (; (puVar15 = NULL,  iVar9 != 0 &&\n                               (((*puVar14 != arg2 || (puVar14[1] != 0)) || (puVar15 = puVar14,  puVar14[2] != 0))));\n                            puVar14 = puVar14 + 8) {\n                            iVar9 = *(puVar14 + 0xc);\n                        }\n                        if (puVar15 != NULL) {\n                            *(uVar12 * 0x18 + 0x1400db238) = puVar15;\n                            fcn.140024184(7);\n                            goto code_r0x00014001342e;\n                        }\n                    }\n                    else {\n                        puVar14 = ppcVar7[1];\n                        while( true ) {\n                            iVar9 = *(puVar14 + 4);\n                            for (; (puVar15 = NULL,  iVar9 != 0 &&\n                                   (((*puVar14 != 0xc000 || (puVar14[1] != 0)) || (puVar15 = puVar14,  puVar14[2] != 0))\n                                   )); puVar14 = puVar14 + 8) {\n                                iVar9 = *(puVar14 + 0xc);\n                            }\n                            if (puVar15 == NULL) break;\n                            if (**(puVar15 + 4) == arg2) {\n                                *(uVar12 * 0x18 + 0x1400db238) = puVar15;\n                                fcn.140024184(7);\n                                goto code_r0x000140013f26;\n                            }\n                            puVar14 = puVar15 + 8;\n                        }\n                    }\n                    ppcVar7 = (*pcVar2)();\n                    pcVar2 = *ppcVar7;\n                } while( true );\n            }\n            puVar15 = *(uVar12 * 0x18 + 0x1400db238);\n            fcn.140024184(7);\n            if (puVar15 == NULL) {\n                return 0;\n            }\n            if (arg2 < 0xc000) {\ncode_r0x00014001342e:\n                uStack248 = 0x7fffffff;\n                pcVar2 = *(puVar15 + 6);\n                uVar12 = *(puVar15 + 4);\n                iVar3 = arg4 >> 0x10;\n                if (uVar12 < 0x25) {\n                    if (uVar12 == 0x24) {\n                        uVar6 = fcn.14000fc08(arg4);\n                        (*pcVar2)(arg1, uVar6);\n                    }\n                    else if (uVar12 < 0x13) {\n                        if (uVar12 == 0x12) {\n                            (*pcVar2)(arg1, arg3, arg4);\n                        }\n                        else if (uVar12 < 10) {\n                            if (uVar12 == 9) {\n                                fcn.14001b0e0(auStack240);\n                                iStack232 = arg4[1];\n                                puVar8 = auStack240;\n                                uStack264 = (*pcVar2)(arg1, puVar8, *(arg4 + 2));\n                                iStack232 = 0;\n                                fcn.14001bdb8(auStack240, puVar8);\n                            }\n                            else if (uVar12 == 1) {\n                                uVar6 = fcn.14001bcd4(arg3);\n                                iVar4 = (*pcVar2)(arg1, uVar6);\n                                uStack264 = iVar4;\n                            }\n                            else if (uVar12 == 2) {\n                                iVar4 = (*pcVar2)(arg1, arg3 & 0xffffffff);\n                                uStack264 = iVar4;\n                            }\n                            else if (uVar12 == 3) {\n                                iVar4 = (*pcVar2)(arg1, arg3 & 0xffffffff);\n                                uStack264 = iVar4;\n                            }\n                            else if (uVar12 == 4) {\n                                iVar4 = (*pcVar2)(arg1, arg3);\n                                uStack264 = iVar4;\n                            }\n                            else if (uVar12 == 5) {\n                                uVar6 = fcn.14000fc08(arg3);\n                                iVar4 = (*pcVar2)(arg1, uVar6, arg4 & 0xffff, arg4 >> 0x10 & 0xffff);\n                                uStack264 = iVar4;\n                            }\n                            else if (uVar12 == 6) {\n                                uVar6 = fcn.14000fc08(arg3);\n                                iVar4 = (*pcVar2)(arg1, uVar6, arg4);\n                                uStack264 = iVar4;\n                            }\n                            else if (uVar12 == 7) {\n                                iVar4 = (*pcVar2)(arg1, arg4);\n                                uStack264 = iVar4;\n                            }\n                            else if (uVar12 == 8) {\n                                fcn.14001b0e0(auStack240);\n                                iStack232 = arg4[1];\n                                fcn.14000d828(auStack200);\n                                iStack136 = *arg4;\n                                uVar1 = *(arg4 + 2);\n                                puVar8 = fcn.14000fc4c(iStack136);\n                                if (puVar8 == NULL) {\n                                    if ((arg1[0x13] != 0) &&\n                                       (iVar9 = fcn.14003a45c(arg1[0x13] + 0x48, iStack136),  iVar9 != 0)) {\n                                        iStack40 = iVar9;\n                                    }\n                                    puVar8 = auStack200;\n                                }\n                                arg2_00 = auStack240;\n                                uStack264 = (*pcVar2)(arg1, arg2_00, puVar8, uVar1);\n                                iStack232 = 0;\n                                iStack136 = 0;\n                                fcn.140010b98(auStack200);\n                                fcn.14001bdb8(auStack240, arg2_00);\n                            }\n                        }\n                        else if (uVar12 == 10) {\n                            uVar6 = fcn.14000fc08(arg4);\n                            iVar4 = (*pcVar2)(arg1, arg3 & 0xffff, uVar6, arg3 >> 0x10 & 0xffff);\n                            uStack264 = iVar4;\n                        }\n                        else if (uVar12 == 0xb) {\n                            iVar4 = (*pcVar2)(arg1, arg3 & 0xffff, arg3 >> 0x10 & 0xffff);\n                            uStack264 = iVar4;\n                        }\n                        else if (uVar12 == 0xc) {\n                            uVar6 = fcn.14000fc08(arg3);\n                            iVar4 = (*pcVar2)(arg1, uVar6, arg4 & 0xffff, arg4 >> 0x10 & 0xffff);\n                            uStack264 = iVar4;\n                        }\n                        else if (uVar12 == 0xd) {\n                            iVar4 = (*pcVar2)(arg1, arg4);\n                            uStack264 = iVar4;\n                        }\n                        else if (uVar12 == 0xe) {\n                            uStack264 = (*pcVar2)(arg1, arg3, arg4);\n                        }\n                        else if (uVar12 == 0xf) {\n                            uVar6 = fcn.140019760(arg4);\n                            uStack264 = (*pcVar2)(arg1, arg3 & 0xffff, arg3 >> 0x10 & 0xffff, uVar6);\n                        }\n                        else if (uVar12 == 0x10) {\n                            (*pcVar2)(arg1, arg3 & 0xffffffff, arg4);\n                        }\n                        else if (uVar12 == 0x11) {\n                            (*pcVar2)(arg1, arg3);\n                        }\n                    }\n                    else if (uVar12 < 0x1c) {\n                        if (uVar12 == 0x1b) {\n                            iVar4 = (*pcVar2)(arg1, arg3 & 0xffffffff);\n                            uStack264 = iVar4;\n                        }\n                        else if (uVar12 == 0x13) {\n                            (*pcVar2)(arg1);\n                        }\n                        else if (uVar12 == 0x14) {\n                            (*pcVar2)(arg1, arg3 & 0xffffffff);\n                        }\n                        else if (uVar12 == 0x15) {\n                            (*pcVar2)(arg1, arg3 & 0xffffffff, arg4 & 0xffffffff);\n                        }\n                        else if (uVar12 == 0x16) {\n                            (*pcVar2)(arg1, arg3 & 0xffff, arg3 >> 0x10 & 0xffff);\n                        }\n                        else if (uVar12 == 0x17) {\n                            (*pcVar2)(arg1, iVar13, iVar3);\n                        }\n                        else if (uVar12 == 0x18) {\n                            (*pcVar2)(arg1, arg3 & 0xffffffff, arg4 & 0xffff, arg4 >> 0x10 & 0xffff);\n                        }\n                        else if (uVar12 == 0x19) {\n                            (*pcVar2)(arg1, arg3 & 0xffffffff, arg4 & 0xffff, arg4 >> 0x10 & 0xffff);\n                        }\n                        else if (uVar12 == 0x1a) {\n                            uVar6 = fcn.14000fc08(arg4);\n                            (*pcVar2)(arg1, arg3 & 0xffffffff, uVar6);\n                        }\n                    }\n                    else if (uVar12 == 0x1c) {\n                        uVar5 = (*pcVar2)(arg1, arg3 & 0xffffffff);\n                        uStack264 = uVar5;\n                    }\n                    else if (uVar12 == 0x1d) {\n                        iVar4 = (*pcVar2)(arg1);\n                        uStack264 = iVar4;\n                    }\n                    else if (uVar12 == 0x1e) {\n                        (*pcVar2)(arg1, arg3, arg4);\n                    }\n                    else if (uVar12 == 0x1f) {\n                        uVar6 = fcn.14000fc08(arg3);\n                        uVar10 = fcn.14000fc08(arg4);\n                        (*pcVar2)(arg1, arg1[8] == arg4, uVar10, uVar6);\n                    }\n                    else if (uVar12 == 0x20) {\n                        uVar6 = fcn.14001bcd4(arg3);\n                        (*pcVar2)(arg1, uVar6);\n                    }\n                    else if (uVar12 == 0x21) {\n                        uVar6 = fcn.140019760(arg3);\n                        (*pcVar2)(arg1, uVar6);\n                    }\n                    else if (uVar12 == 0x22) {\n                        uVar6 = fcn.140019760(arg3);\n                        (*pcVar2)(arg1, uVar6, iVar13, iVar3);\n                    }\n                    else if (uVar12 == 0x23) {\n                        uVar6 = fcn.14000fc08(arg3);\n                        (*pcVar2)(arg1, uVar6);\n                    }\n                }\n                else if (uVar12 < 0x38) {\n                    if (uVar12 == 0x37) {\n                        iStack256 = iVar13;\n                        iStack252 = iVar3;\n                        iVar4 = (*pcVar2)(arg1, arg3 & 0xffff, arg3 >> 0x10, CONCAT44(iStack252, iStack256));\n                        uStack264 = iVar4;\n                        if (uStack264 == 0) {\n                            return 0;\n                        }\n                    }\n                    else if (uVar12 < 0x2f) {\n                        if (uVar12 == 0x2e) {\n                            (*pcVar2)(arg1, arg3 & 0xffffffff, arg4);\n                            uStack264 = 1;\n                        }\n                        else if (uVar12 == 0x25) {\n                            uVar6 = fcn.14000fc08(arg3);\n                            (*pcVar2)(arg1, uVar6, arg4 & 0xffff, arg4 >> 0x10 & 0xffff);\n                        }\n                        else if (uVar12 == 0x26) {\n                            iStack256 = iVar13;\n                            iStack252 = iVar3;\n                            uVar6 = fcn.14000fc08(arg3);\n                            (*pcVar2)(arg1, uVar6, CONCAT44(iStack252, iStack256));\n                        }\n                        else if (uVar12 == 0x27) {\n                            uVar6 = fcn.14000fc08(arg3);\n                            (*pcVar2)(arg1, uVar6, arg4);\n                        }\n                        else if (uVar12 == 0x28) {\n                            uStack264 = (*pcVar2)(arg1);\n                        }\n                        else if (uVar12 == 0x29) {\n                            uVar6 = fcn.14000fc08(arg4);\n                            (*pcVar2)(arg1, arg3 & 0xffff, uVar6, arg3 >> 0x10 & 0xffff);\n                        }\n                        else if (0x29 < uVar12) {\n                            if (uVar12 < 0x2c) {\n                                iVar4 = arg3 >> 0x10;\n                                if (uVar12 == 0x2a) {\n                                    uVar6 = fcn.14000fc08(arg4);\n                                    (*pcVar2)(arg1, arg3, iVar4, uVar6);\n                                }\n                                else {\n                                    (*pcVar2)(arg1, arg3, iVar4);\n                                }\n                            }\n                            else if (uVar12 == 0x2c) {\n                                (*pcVar2)(arg1, arg4);\n                            }\n                            else if (uVar12 == 0x2d) {\n                                (*pcVar2)(arg1, arg3 & 0xffffffff, arg4);\n                            }\n                        }\n                    }\n                    else if (uVar12 == 0x2f) {\n                        iVar4 = (*pcVar2)(arg1, arg3 & 0xffffffff, arg4);\n                        uStack264 = iVar4;\n                    }\n                    else if (uVar12 == 0x30) {\n                        iStack256 = iVar13;\n                        iStack252 = iVar3;\n                        uVar5 = (*pcVar2)(arg1, CONCAT44(iStack252, iStack256));\n                        uStack264 = uVar5;\n                    }\n                    else if (uVar12 == 0x31) {\n                        uVar5 = (*pcVar2)(arg1);\n                        uStack264 = uVar5;\n                    }\n                    else if (uVar12 == 0x32) {\n                        (*pcVar2)(arg1, arg3 & 0xffffffff, arg4);\n                    }\n                    else if (uVar12 == 0x33) {\n                        (*pcVar2)(arg1, arg4);\n                    }\n                    else if (uVar12 == 0x34) {\n                        (*pcVar2)(arg1, arg3 & 0xffff, arg3 >> 0x10 & 0xffff, arg4);\n                    }\n                    else if (uVar12 == 0x35) {\n                        iStack256 = iVar13;\n                        iStack252 = iVar3;\n                        (*pcVar2)(arg1, arg3 & 0xffffffff, CONCAT44(iStack252, iStack256));\n                    }\n                    else if (uVar12 == 0x36) {\n                        (*pcVar2)(arg1, arg3 & 0xffffffff, arg4);\n                        uStack264 = 1;\n                    }\n                }\n                else if (uVar12 < 0x4d) {\n                    if (uVar12 == 0x4c) {\n                        (*pcVar2)(arg1, arg3 & 0xffffffff, arg4);\n                    }\n                    else if (uVar12 == 0x38) {\n                        iStack256 = iVar13;\n                        iStack252 = iVar3;\n                        (*pcVar2)(arg1, arg3 & 0xffff, arg3 >> 0x10, CONCAT44(iStack252, iStack256));\n                    }\n                    else if (uVar12 == 0x45) {\n                        uStack264 = (*pcVar2)(arg1);\n                        if (uStack264 != 0) {\n                            return 0;\n                        }\n                    }\n                    else if (uVar12 == 0x46) {\n                        iStack256 = iVar13;\n                        iStack252 = iVar3;\n                        uStack264 = (*pcVar2)(arg1, CONCAT44(iStack252, iStack256));\n                    }\n                    else if (uVar12 == 0x47) {\n                        uVar6 = fcn.14000fc08(arg3);\n                        uVar5 = (*pcVar2)(arg1, uVar6, arg4 & 0xffffffff);\n                        uStack264 = uVar5;\n                    }\n                    else if (uVar12 == 0x48) {\n                        uVar6 = fcn.140019760(arg4);\n                        (*pcVar2)(arg1, arg3 & 0xffffffff, uVar6);\n                    }\n                    else if (uVar12 == 0x49) {\n                        uVar6 = fcn.140019760(arg4);\n                        uVar5 = (*pcVar2)(arg1, arg3 & 0xffffffff, uVar6);\n                        uStack264 = uVar5;\n                    }\n                    else if (uVar12 == 0x4a) {\n                        uVar5 = (*pcVar2)(arg1, arg4);\n                        uStack264 = uVar5;\n                    }\n                    else if (uVar12 == 0x4b) {\n                        uVar6 = fcn.140019760(arg3);\n                        (*pcVar2)(arg1, uVar6, arg4 & 0xffffffff);\n                    }\n                }\n                else if (uVar12 == 0x4d) {\n                    uVar5 = arg4 >> 0x10;\n                    uVar6 = fcn.14000fc08(arg3);\n                    (*pcVar2)(arg1, uVar6, uVar5 & 0xfff, uVar5 & 0xf000, \n                              in_stack_fffffffffffffee8 & 0xffffffff00000000 | arg4 & 0xffff);\n                    uStack264 = 1;\n                }\n                else if (uVar12 == 0x4e) {\n                    (*pcVar2)(arg1, arg3 & 0xff, arg4);\n                }\n                else if (uVar12 == 0x4f) {\n                    uVar5 = (*pcVar2)(arg1, arg3 & 0xffffffff, arg4 & 0xffffffff);\n                    uStack264 = uVar5;\n                }\n                else if (uVar12 == 0x50) {\n                    iStack256 = iVar13;\n                    iStack252 = iVar3;\n                    (*pcVar2)(arg1, arg3 & 0xffff, arg3 >> 0x10 & 0xffff, CONCAT44(iStack252, iStack256));\n                    uStack264 = 1;\n                }\n                else if (uVar12 == 0x51) {\n                    iStack256 = iVar13;\n                    iStack252 = iVar3;\n                    (*pcVar2)(arg1, arg3 & 0xffff, arg3 >> 0x10 & 0xffff, CONCAT44(iStack252, iStack256));\n                    uStack264 = 1;\n                }\n                else if (uVar12 == 0x52) {\n                    (*pcVar2)(arg1, uVar11 & 0xffffffffffffff00 | arg3 & 0xff, arg4 & 0xffffffff);\n                    uStack264 = 1;\n                }\n                else if (uVar12 == 0x53) {\n                    (*pcVar2)(arg1, arg3 & 0xffffffff, arg4);\n                }\n                else if (uVar12 == 0x54) {\n                    (*pcVar2)(arg1, arg3 & 0xffff);\n                }\n            }\n            else {\ncode_r0x000140013f26:\n                uStack248 = 0x7fffffff;\n                uStack264 = (**(puVar15 + 6))(arg1, arg3, arg4);\n            }\n        }\n    }\ncode_r0x000140013f3b:\n    if (in_stack_00000028 != NULL) {\n        *in_stack_00000028 = uStack264;\n    }\n    return 1;\n}\n",
        "token_count": 5491
    },
    "14001442": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint64_t fcn.140014428(int64_t arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int64_t iVar1;\n    int64_t *in_stack_00000028;\n    \n    if (*(arg1 + 0xa0) == 0) {\n        iVar1 = fcn.140014048(arg1, arg2, arg3, arg4);\n    }\n    else {\n        iVar1 = (*_sym.imp.USER32.dll_SendMessageA)(*(arg1 + 0x40), arg2 + 0x2000);\n        if ((6 < arg2 - 0x132U) || (iVar1 != 0)) {\n            if (in_stack_00000028 != NULL) {\n                *in_stack_00000028 = iVar1;\n            }\n            iVar1 = 1;\n        }\n    }\n    return iVar1;\n}\n",
        "token_count": 192
    },
    "14001475": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint64_t fcn.140014758(ulong arg1, int64_t arg2, int64_t arg3, int64_t arg4)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    uint *puVar5;\n    int32_t *piVar6;\n    uint uVar7;\n    uint auStack104 [2];\n    ulong uStack96;\n    uint uStack88;\n    uint uStack84;\n    ulong uStack80;\n    int64_t iStack72;\n    int64_t iStack64;\n    int64_t iStack56;\n    ulong uStack48;\n    int64_t iStack40;\n    \n    iVar3 = fcn.140016f48();\n    iVar3 = iVar3 + 0xd8;\n    iVar4 = fcn.140017ad4();\n    uStack80 = *(iVar4 + 0x10);\n    if (((arg2 == 0) && (arg3 == 0)) && (arg4 == 0)) {\n        puVar5 = fcn.14006abb0();\n        uVar7 = *puVar5;\n        puVar5 = fcn.14006abb0();\n        *puVar5 = 0;\n        fcn.14006aa44(iVar3, 0x60, 0x5f, \"Afx:%p:%x\");\n    }\n    else {\n        puVar5 = fcn.14006abb0();\n        uVar7 = *puVar5;\n        puVar5 = fcn.14006abb0();\n        *puVar5 = 0;\n        fcn.14006aa44(iVar3, 0x60, 0x5f, \"Afx:%p:%x:%p:%p:%p\");\n    }\n    piVar6 = fcn.14006abb0();\n    if (*piVar6 == 0) {\n        puVar5 = fcn.14006abb0();\n        *puVar5 = uVar7;\n    }\n    else {\n        piVar6 = fcn.14006abb0();\n        if (*piVar6 != 0) {\n            if (*piVar6 == 0xc) {\n                fcn.1400031e0(0x8007000e);\n                pcVar1 = swi(3);\n                iVar3 = (*pcVar1)();\n                return iVar3;\n            }\n            if ((*piVar6 == 0x16) || (*piVar6 == 0x22)) {\n                fcn.1400031e0(0x80070057);\n                pcVar1 = swi(3);\n                iVar3 = (*pcVar1)();\n                return iVar3;\n            }\n            if (*piVar6 != 0x50) {\n                fcn.1400031e0(0x80004005);\n                pcVar1 = swi(3);\n                iVar3 = (*pcVar1)();\n                return iVar3;\n            }\n        }\n    }\n    iVar2 = fcn.14000d2f4(uStack80, iVar3, auStack104);\n    if (iVar2 == 0) {\n        uStack84 = 0;\n        uStack88 = 0;\n        uStack48 = 0;\n        uStack96 = _sym.imp.USER32.dll_DefWindowProcA;\n        auStack104[0] = arg1;\n        iStack72 = arg4;\n        iStack64 = arg2;\n        iStack56 = arg3;\n        iStack40 = iVar3;\n        iVar2 = fcn.14001469c(auStack104);\n        if (iVar2 == 0) {\n            fcn.14001af14();\n        }\n    }\n    return iVar3;\n}\n",
        "token_count": 814
    },
    "140014eb": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.140014eb0(ulong noname_0, int64_t arg2)\n\n{\n    if (*(arg2 + 0x40) == 0) {\n        fcn.140014ae0(1);\n        *(arg2 + 0x40) = \"AfxWnd90s\";\n    }\n    return 1;\n}\n",
        "token_count": 76
    },
    "140014ff": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.140014ff4(int64_t arg1)\n\n{\n    ulong uVar1;\n    \n    if (*(arg1 + 0x98) == 0) {\n        uVar1 = 0;\n    }\n    else {\n        uVar1 = (**(**(arg1 + 0x98) + 0x130))();\n    }\n    return uVar1;\n}\n",
        "token_count": 84
    },
    "14001501": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.14001501c(int64_t arg1)\n\n{\n    ulong uVar1;\n    \n    if (*(arg1 + 0x98) == 0) {\n        uVar1 = 0;\n    }\n    else {\n        uVar1 = (**(**(arg1 + 0x98) + 0xa8))();\n    }\n    return uVar1;\n}\n",
        "token_count": 84
    },
    "1400150a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.1400150a4(int64_t hDlg, ulong pboolOut)\n\n{\n    ulong arg1;\n    \n    if (*(hDlg + 0x98) == 0) {\n        arg1 = (*_sym.imp.USER32.dll_GetDlgItem)(*(hDlg + 0x40));\n        fcn.14000fc08(arg1);\n    }\n    else {\n        (**(**(hDlg + 0x98) + 0xe8))();\n    }\n    return;\n}\n",
        "token_count": 108
    },
    "1400150d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.1400150dc(int64_t hDlg, ulong nIDDlgItem, ulong *arg3)\n\n{\n    ulong uVar1;\n    \n    if (*(hDlg + 0x98) == 0) {\n        uVar1 = (*_sym.imp.USER32.dll_GetDlgItem)(*(hDlg + 0x40));\n        *arg3 = uVar1;\n    }\n    else {\n        (**(**(hDlg + 0x98) + 0xe0))();\n    }\n    return;\n}\n",
        "token_count": 113
    },
    "14001521": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140015210(int64_t hDlg, ulong nIDButton)\n\n{\n    if (*(hDlg + 0x98) == 0) {\n        (*_sym.imp.USER32.dll_IsDlgButtonChecked)(*(hDlg + 0x40));\n    }\n    else {\n        (**(**(hDlg + 0x98) + 0x118))();\n    }\n    return;\n}\n",
        "token_count": 88
    },
    "14001528": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140015284(int64_t hWnd)\n\n{\n    if (*(hWnd + 0xa0) == 0) {\n        (*_sym.imp.USER32.dll_GetWindowLongA)(*(hWnd + 0x40), 0xfffffff0);\n    }\n    else {\n        (**(**(hWnd + 0xa0) + 0xf0))();\n    }\n    return;\n}\n",
        "token_count": 88
    },
    "1400152b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.1400152b8(int64_t hWnd)\n\n{\n    if (*(hWnd + 0xa0) == 0) {\n        (*_sym.imp.USER32.dll_GetWindowLongA)(*(hWnd + 0x40), 0xffffffec);\n    }\n    else {\n        (**(**(hWnd + 0xa0) + 0xf8))();\n    }\n    return;\n}\n",
        "token_count": 89
    },
    "1400152e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.1400152ec(int64_t arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    if (*(arg1 + 0xa0) == 0) {\n        fcn.14000c600(*(arg1 + 0x40), arg2, arg3, arg4);\n    }\n    else {\n        (**(**(arg1 + 0xa0) + 0x100))();\n    }\n    return;\n}\n",
        "token_count": 100
    },
    "14001531": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.14001531c(int64_t arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    if (*(arg1 + 0xa0) == 0) {\n        fcn.14000c620(*(arg1 + 0x40), arg2, arg3, arg4);\n    }\n    else {\n        (**(**(arg1 + 0xa0) + 0x108))();\n    }\n    return;\n}\n",
        "token_count": 100
    },
    "14001534": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.14001534c(int64_t hWnd, ulong arg2)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    \n    if (hWnd == 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    iVar2 = (*_sym.imp.USER32.dll_IsWindow)(*(hWnd + 0x40));\n    if (iVar2 == 0) {\n        if (*(hWnd + 0xa0) == 0) {\n            fcn.140020780();\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n    }\n    else if (*(hWnd + 0xa0) == 0) {\n        (*_sym.imp.USER32.dll_SetWindowTextA)(*(hWnd + 0x40), arg2);\n        return;\n    }\n    (**(**(hWnd + 0xa0) + 0x110))(*(hWnd + 0xa0), arg2);\n    return;\n}\n",
        "token_count": 233
    },
    "1400153b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.1400153bc(int64_t hWnd)\n\n{\n    if (*(hWnd + 0xa0) == 0) {\n        (*_sym.imp.USER32.dll_GetDlgCtrlID)(*(hWnd + 0x40));\n    }\n    else {\n        (**(**(hWnd + 0xa0) + 0x120))();\n    }\n    return;\n}\n",
        "token_count": 83
    },
    "14001542": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140015424(int64_t hWnd, ulong X, ulong Y, ulong nWidth)\n\n{\n    if (*(hWnd + 0xa0) == 0) {\n        (*_sym.imp.USER32.dll_MoveWindow)(*(hWnd + 0x40));\n    }\n    else {\n        (**(**(hWnd + 0xa0) + 0x130))();\n    }\n    return;\n}\n",
        "token_count": 90
    },
    "14001546": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.14001546c(int64_t hWnd, ulong nCmdShow)\n\n{\n    if (*(hWnd + 0xa0) == 0) {\n        (*_sym.imp.USER32.dll_ShowWindow)(*(hWnd + 0x40));\n    }\n    else {\n        (**(**(hWnd + 0xa0) + 0x140))();\n    }\n    return;\n}\n",
        "token_count": 86
    },
    "14001549": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.14001549c(int64_t hWnd)\n\n{\n    if (*(hWnd + 0xa0) == 0) {\n        (*_sym.imp.USER32.dll_IsWindowEnabled)(*(hWnd + 0x40));\n    }\n    else {\n        (**(**(hWnd + 0xa0) + 0x148))();\n    }\n    return;\n}\n",
        "token_count": 82
    },
    "1400154c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.1400154cc(int64_t hWnd, ulong bEnable)\n\n{\n    if (*(hWnd + 0xa0) == 0) {\n        (*_sym.imp.USER32.dll_EnableWindow)(*(hWnd + 0x40));\n    }\n    else {\n        (**(**(hWnd + 0xa0) + 0x150))();\n    }\n    return;\n}\n",
        "token_count": 85
    },
    "1400154f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.1400154fc(int64_t hWnd)\n\n{\n    ulong arg1;\n    \n    if (*(hWnd + 0xa0) == 0) {\n        arg1 = (*_sym.imp.USER32.dll_SetFocus)(*(hWnd + 0x40));\n        fcn.14000fc08(arg1);\n    }\n    else {\n        (**(**(hWnd + 0xa0) + 0x160))();\n    }\n    return;\n}\n",
        "token_count": 101
    },
    "14001557": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140015570(int64_t arg1, ulong noname_1, ulong noname_2, ulong arg4)\n\n{\n    if (*(arg1 + 0xa0) != 0) {\n        fcn.140015534(arg1);\n    }\n    return;\n}\n",
        "token_count": 63
    },
    "14001564": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140015648(int64_t arg1, int64_t arg2)\n\n{\n    if ((*(arg1 + 0xa0) == 0) && (*(arg2 + 0x98) != 0)) {\n        (**(**(arg2 + 0x98) + 0x138))(*(arg2 + 0x98), arg1);\n    }\n    return;\n}\n",
        "token_count": 88
    },
    "14001567": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.14001567c(ulong *arg1)\n\n{\n    if (arg1[1] == 0) {\n        (*_sym.imp.USER32.dll_GetWindowLongA)(*arg1, 0xfffffff0);\n    }\n    else {\n        (**(*arg1[1] + 0xf0))();\n    }\n    return;\n}\n",
        "token_count": 77
    },
    "1400159c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.1400159c8(int64_t hWnd, int64_t arg2)\n\n{\n    ulong arg2_00;\n    int64_t iVar1;\n    \n    if ((hWnd != 0) && (*(hWnd + 0xa0) == 0)) {\n        arg2_00 = (*_sym.imp.USER32.dll_GetParent)(*(hWnd + 0x40));\n        iVar1 = fcn.14003a45c(arg2 + 0x30, arg2_00);\n        if ((iVar1 != 0) && (*(iVar1 + 0x98) != 0)) {\n            (**(**(iVar1 + 0x98) + 0x138))(*(iVar1 + 0x98), hWnd, 0);\n        }\n    }\n    return;\n}\n",
        "token_count": 175
    },
    "140015b6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint64_t * fcn.140015b6c(int64_t arg1, int64_t *arg2, ulong arg3)\n\n{\n    int64_t *piVar1;\n    int64_t *arg1_00;\n    uint32_t uVar2;\n    ulong uVar3;\n    int64_t iVar4;\n    int64_t **ppiVar5;\n    int64_t iVar6;\n    ulong uVar7;\n    code *pcVar8;\n    code *pcVar9;\n    bool bVar10;\n    int64_t iStackX8;\n    \n    if (*(arg1 + 0x98) != 0) {\n        if ((*(arg1 + 0x78) >> 0xb & 1) == 0) {\n            uVar3 = *(arg1 + 0x40);\n            uVar7 = 5;\n            while( true ) {\n                uVar3 = (*_sym.imp.USER32.dll_GetWindow)(uVar3, uVar7);\n                iVar4 = fcn.14000fc08(uVar3);\n                if (iVar4 == 0) break;\n                uVar2 = fcn.1400152b8(iVar4);\n                if ((((uVar2 >> 0x10 & 1) != 0) && (uVar2 = fcn.140015284(iVar4),  (uVar2 >> 0x1c & 1) != 0)) &&\n                   (uVar2 = fcn.140015284(iVar4),  (uVar2 >> 0x1b & 1) == 0)) {\n                    return NULL;\n                }\n                uVar3 = *(iVar4 + 0x40);\n                uVar7 = 2;\n            }\n        }\n        if (arg3 == 0) {\n            pcVar9 = 0x14000a534;\n            pcVar8 = 0x14000a210;\n        }\n        else {\n            pcVar9 = 0x140015ad8;\n            pcVar8 = 0x1400157f0;\n        }\n        iStackX8 = (*pcVar8)(*(arg1 + 0x98) + 0x80);\ncode_r0x000140015c34:\n        do {\n            if (iStackX8 == 0) {\n                return NULL;\n            }\n            ppiVar5 = (*pcVar9)(*(arg1 + 0x98) + 0x80, &iStackX8);\n            piVar1 = *ppiVar5;\n            if (arg2 == NULL) {\n                if (piVar1[1] == 0) {\n                    iVar4 = *piVar1;\n                }\n                else {\n                    iVar4 = *(piVar1[1] + 0x48);\n                }\n                if ((iVar4 != 0) && (iVar6 = (*_sym.imp.USER32.dll_GetFocus)(),  iVar4 == iVar6)) break;\n                if (piVar1[1] == 0) goto code_r0x000140015c34;\n                bVar10 = piVar1[1] == *(*(arg1 + 0x98) + 0xd8);\n            }\n            else {\n                bVar10 = arg2 == piVar1;\n            }\n        } while (!bVar10);\n        if (piVar1 != NULL) {\n            while( true ) {\n                if (iStackX8 == 0) {\n                    iStackX8 = (*pcVar8)(*(arg1 + 0x98) + 0x80);\n                }\n                ppiVar5 = (*pcVar9)(*(arg1 + 0x98) + 0x80, &iStackX8);\n                arg1_00 = *ppiVar5;\n                uVar2 = fcn.14001567c(arg1_00);\n                if (arg1_00 == piVar1) break;\n                if ((((uVar2 >> 0x10 & 1) != 0) && ((uVar2 >> 0x1b & 1) == 0)) && ((uVar2 >> 0x1c & 1) != 0)) {\n                    return arg1_00;\n                }\n            }\n            return arg1_00;\n        }\n    }\n    return NULL;\n}\n",
        "token_count": 934
    },
    "140015d2": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140015d28(int64_t arg1, ulong *arg2)\n\n{\n    ulong *puVar1;\n    int64_t iVar2;\n    code *pcVar3;\n    uint32_t uVar4;\n    ulong *puVar5;\n    ulong uVar6;\n    ulong *puVar7;\n    int64_t iVar8;\n    ulong *arg1_00;\n    \n    if (*(arg1 + 0x98) == 0) {\n        return;\n    }\n    if (arg2 == NULL) {\n        return;\n    }\n    if ((*(arg2 + 2) != 0) && (iVar8 = (*_sym.imp.USER32.dll_SendMessageA)(*arg2, 0xf0, 0, 0),  iVar8 == 1)) {\n        uVar6 = *arg2;\ncode_r0x000140015de0:\n        (*_sym.imp.USER32.dll_SendMessageA)(uVar6, 0xf1, 0, 0);\n        return;\n    }\n    puVar5 = fcn.14003ae80(*(arg1 + 0x98) + 0x80, arg2, 0);\n    if (puVar5 == NULL) {\n        fcn.140020780();\n        pcVar3 = swi(3);\n        (*pcVar3)();\n        return;\n    }\n    puVar7 = *puVar5;\ncode_r0x000140015da0:\n    if (puVar7 == NULL) {\ncode_r0x000140015df3:\n        iVar8 = puVar5[1];\n        while( true ) {\n            if (iVar8 == 0) {\n                return;\n            }\n            iVar2 = *(iVar8 + 8);\n            arg1_00 = *(iVar8 + 0x10);\n            if ((*(arg1_00 + 2) != 0) &&\n               (iVar8 = (*_sym.imp.USER32.dll_SendMessageA)(*arg1_00, 0xf0, 0, 0),  iVar8 == 1)) break;\n            uVar4 = fcn.14001567c(arg1_00);\n            iVar8 = iVar2;\n            if ((uVar4 >> 0x11 & 1) != 0) {\n                return;\n            }\n        }\n    }\n    else {\n        puVar1 = *puVar7;\n        arg1_00 = puVar7[2];\n        uVar4 = fcn.14001567c(arg1_00);\n        if ((uVar4 >> 0x11 & 1) != 0) goto code_r0x000140015df3;\n        puVar7 = puVar1;\n        if ((*(arg1_00 + 2) == 0) || (iVar8 = (*_sym.imp.USER32.dll_SendMessageA)(*arg1_00, 0xf0),  iVar8 != 1))\n        goto code_r0x000140015da0;\n    }\n    uVar6 = *arg1_00;\n    goto code_r0x000140015de0;\n}\n",
        "token_count": 672
    },
    "140015f2": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint64_t fcn.140015f28(int64_t hWnd, ulong arg2, ulong arg3)\n\n{\n    int32_t *piVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint64_t uVar5;\n    int64_t *piVar6;\n    ulong in_R9;\n    int64_t iStackX8;\n    \n    if (*(hWnd + 0xa0) == 0) {\n        uVar5 = (*_sym.imp.USER32.dll_GetWindowTextA)(*(hWnd + 0x40), arg2, arg3, in_R9, 0xfffffffffffffffe);\n    }\n    else {\n        piVar6 = fcn.140017fc0();\n        if (piVar6 == NULL) {\n            fcn.1400031e0(0x80004005);\n            pcVar2 = swi(3);\n            uVar5 = (*pcVar2)();\n            return uVar5;\n        }\n        iStackX8 = (**(*piVar6 + 0x18))(piVar6);\n        iStackX8 = iStackX8 + 0x18;\n        (**(**(hWnd + 0xa0) + 0x118))(*(hWnd + 0xa0), &iStackX8);\n        iVar3 = fcn.14006bb18(arg2, arg3, iStackX8, 0xffffffffffffffff);\n        if (iVar3 != 0) {\n            if (iVar3 == 0xc) {\n                fcn.140020738();\n                pcVar2 = swi(3);\n                uVar5 = (*pcVar2)();\n                return uVar5;\n            }\n            if ((iVar3 == 0x16) || (iVar3 == 0x22)) {\n                fcn.140020780();\n                pcVar2 = swi(3);\n                uVar5 = (*pcVar2)();\n                return uVar5;\n            }\n            if (iVar3 != 0x50) {\n                fcn.140020780();\n                pcVar2 = swi(3);\n                uVar5 = (*pcVar2)();\n                return uVar5;\n            }\n        }\n        uVar4 = (*_sym.imp.KERNEL32.dll_lstrlenA)();\n        uVar5 = uVar4;\n        LOCK();\n        piVar1 = iStackX8 + -8;\n        iVar3 = *piVar1;\n        *piVar1 = *piVar1 + -1;\n        if (iVar3 + -1 < 1) {\n            (**(**(iStackX8 + -0x18) + 8))();\n        }\n    }\n    return uVar5;\n}\n",
        "token_count": 588
    },
    "14001647": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.140016470(int64_t arg1, int64_t arg2)\n\n{\n    int64_t iStack24;\n    int64_t iStack16;\n    \n    if (*(arg1 + 0x98) != 0) {\n        if (arg2 == 0) {\n            iStack16 = fcn.14001623c(arg1);\n        }\n        else {\n            iStack16 = fcn.14001620c(arg1, arg2);\n        }\n        if (iStack16 != 0) {\n            iStack24 = *(arg1 + 0x98) + 0x80;\n            fcn.14001639c(&iStack24);\n            if (iStack16 != 0) {\n                return *(iStack16 + 0x10);\n            }\n        }\n    }\n    return 0;\n}\n",
        "token_count": 183
    },
    "1400164d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.1400164d4(int64_t arg1, int64_t arg2)\n\n{\n    int64_t iStack24;\n    int64_t iStack16;\n    \n    if (*(arg1 + 0x98) != 0) {\n        if (arg2 == 0) {\n            iStack16 = fcn.14001623c(arg1);\n        }\n        else {\n            iStack16 = fcn.14001620c(arg1, arg2);\n        }\n        if (iStack16 != 0) {\n            iStack24 = *(arg1 + 0x98) + 0x80;\n            fcn.1400162cc(&iStack24);\n            if (iStack16 != 0) {\n                return *(iStack16 + 0x10);\n            }\n        }\n    }\n    return 0;\n}\n",
        "token_count": 185
    },
    "14001654": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140016548(void)\n\n{\n    code *pcVar1;\n    \n    if (*0x1400de570 == 0) {\n        *0x1400de570 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(\"KERNEL32\");\n        if (*0x1400de570 == 0) {\n            fcn.140020780();\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        *0x1400de548 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(*0x1400de570, \"CreateActCtxW\");\n        *0x1400de550 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(*0x1400de570, \"ReleaseActCtx\");\n        *0x1400de558 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(*0x1400de570, \"ActivateActCtx\");\n        *0x1400de560 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(*0x1400de570, \"DeactivateActCtx\");\n    }\n    return;\n}\n",
        "token_count": 237
    },
    "140016d5": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140016d54(code **arg1)\n\n{\n    ulong *puVar1;\n    int64_t *piVar2;\n    int64_t iVar3;\n    ulong arg1_00;\n    \n    *arg1 = vtable.AFX_MODULE_THREAD_STATE.0;\n    if (arg1[0xf] != NULL) {\n        (**(*arg1[0xf] + 0x288))();\n    }\n    fcn.1400036d8(arg1[0x12]);\n    puVar1 = arg1[5];\n    if (puVar1 != NULL) {\n        (***puVar1)(puVar1, 1);\n    }\n    puVar1 = arg1[6];\n    if (puVar1 != NULL) {\n        (***puVar1)(puVar1, 1);\n    }\n    puVar1 = arg1[7];\n    if (puVar1 != NULL) {\n        (***puVar1)(puVar1, 1);\n    }\n    puVar1 = arg1[8];\n    if (puVar1 != NULL) {\n        (***puVar1)(puVar1, 1);\n    }\n    puVar1 = arg1[9];\n    if (puVar1 != NULL) {\n        (***puVar1)(puVar1, 1);\n    }\n    if (arg1[0xe] != NULL) {\n        iVar3 = *(arg1[0xe] + 0x18);\n        while (iVar3 != 0) {\n            arg1_00 = fcn.14003ad94(arg1[0xe]);\n            fcn.1400036d8(arg1_00);\n            iVar3 = *(arg1[0xe] + 0x18);\n        }\n    }\n    piVar2 = arg1[0xc];\n    if (piVar2 != NULL) {\n        (**(*piVar2 + 8))(piVar2, 1);\n    }\n    piVar2 = arg1[0xd];\n    if (piVar2 != NULL) {\n        (**(*piVar2 + 8))(piVar2, 1);\n    }\n    piVar2 = arg1[0xe];\n    if (piVar2 != NULL) {\n        (**(*piVar2 + 8))(piVar2, 1);\n    }\n    return;\n}\n",
        "token_count": 506
    },
    "1400183f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint64_t ** fcn.1400183f8(int64_t **arg1)\n\n{\n    code *pcVar1;\n    int64_t arg2;\n    int64_t *piVar2;\n    int64_t **ppiVar3;\n    \n    piVar2 = (**(**arg1 + 0x20))();\n    if ((*(arg1 + 2) < 0) || (piVar2 != *arg1)) {\n        ppiVar3 = (***piVar2)(piVar2, *(arg1 + 1), 2);\n        if (ppiVar3 == NULL) {\n            fcn.1400183ac();\n            pcVar1 = swi(3);\n            ppiVar3 = (*pcVar1)();\n            return ppiVar3;\n        }\n        *(ppiVar3 + 1) = *(arg1 + 1);\n        arg2 = (*(arg1 + 1) + 1) * 2;\n        fcn.140069a48(ppiVar3 + 3, arg2, arg1 + 3, arg2);\n    }\n    else {\n        LOCK();\n        *(arg1 + 2) = *(arg1 + 2) + 1;\n        ppiVar3 = arg1;\n    }\n    return ppiVar3;\n}\n",
        "token_count": 280
    },
    "14001892": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.14001892c(int64_t *arg1, ulong arg2)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    uint32_t uVar3;\n    uint64_t arg2_00;\n    \n    iVar2 = *arg1;\n    if (*(iVar2 + -0x10) != arg2 && arg2 <= *(iVar2 + -0x10)) {\n        arg2._0_4_ = *(iVar2 + -0x10);\n    }\n    if (*(iVar2 + -8) < 2) {\n        iVar1 = *(iVar2 + -0xc);\n        if (iVar1 < arg2) {\n            if (iVar1 < 0x401) {\n                uVar3 = iVar1 * 2;\n            }\n            else {\n                uVar3 = iVar1 + 0x400;\n            }\n            arg2_00 = uVar3;\n            if (uVar3 < arg2) {\n                arg2_00 = arg2;\n            }\n            fcn.140018594(arg1, arg2_00);\n        }\n    }\n    else {\n        fcn.1400184e4(arg1, arg2);\n    }\n    return;\n}\n",
        "token_count": 263
    },
    "140018f3": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint64_t * fcn.140018f38(int64_t *arg1, int64_t *arg2)\n\n{\n    int64_t **arg1_00;\n    int32_t *piVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    int64_t **ppiVar5;\n    \n    iVar4 = *arg2;\n    iVar3 = *arg1;\n    arg1_00 = iVar4 + -0x18;\n    ppiVar5 = iVar3 + -0x18;\n    if (arg1_00 != ppiVar5) {\n        if ((*(iVar3 + -8) < 0) || (*arg1_00 != *ppiVar5)) {\n            fcn.140018c68(arg1, iVar4, *(iVar4 + -0x10));\n        }\n        else {\n            iVar4 = fcn.1400183f8(arg1_00);\n            LOCK();\n            piVar1 = iVar3 + -8;\n            iVar2 = *piVar1;\n            *piVar1 = *piVar1 + -1;\n            if (iVar2 + -1 < 1) {\n                (**(**ppiVar5 + 8))(*ppiVar5, ppiVar5);\n            }\n            *arg1 = iVar4 + 0x18;\n        }\n    }\n    return arg1;\n}\n",
        "token_count": 302
    },
    "140018fb": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.140018fb8(ulong arg1, ulong arg2)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    code *pcVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    ulong arg2_00;\n    uint64_t uVar6;\n    uchar auStack392 [32];\n    int32_t aiStack360 [2];\n    int64_t iStack352;\n    int64_t iStack344;\n    ulong uStack336;\n    uchar *puStack328;\n    uchar auStack320 [136];\n    uchar *puStack184;\n    uchar auStack176 [136];\n    uint64_t uStack40;\n    \n    uStack336 = 0xfffffffffffffffe;\n    uStack40 = *0x1400d96f0 ^ auStack392;\n    uVar4 = fcn.140038c64(arg1, aiStack360);\n    if (aiStack360[0] != 1) {\n        uVar6 = uVar4;\n        puStack184 = NULL;\n        if (uVar4 == 0) {\ncode_r0x00014001911f:\n            puStack184 = auStack176;\n        }\n        else {\n            if (SUB168((ZEXT816(0) << 0x40 | ZEXT816(0xffffffffffffffff)) / ZEXT816(uVar6), 0) < 2) {\n                fcn.1400031e0(0x80070057);\n                pcVar3 = swi(3);\n                (*pcVar3)();\n                return;\n            }\n            if (uVar6 * 2 < 0x81) goto code_r0x00014001911f;\n            fcn.140018214(&puStack184, uVar6 * 2);\n        }\n        uVar5 = fcn.140038594(arg1, puStack184, uVar4 * 2);\n        if (uVar5 != uVar6 * 2) {\n            fcn.1400384a8(3, 0);\n            pcVar3 = swi(3);\n            (*pcVar3)();\n            return;\n        }\n        arg2_00 = fcn.140018d3c(&iStack344, puStack184, uVar4);\n        fcn.140007bbc(arg2, arg2_00);\n        LOCK();\n        piVar1 = iStack344 + -8;\n        iVar2 = *piVar1;\n        *piVar1 = *piVar1 + -1;\n        if (iVar2 + -1 < 1) {\n            (**(**(iStack344 + -0x18) + 8))();\n        }\n        if (puStack184 != auStack176) {\n            fcn.1400181e0(&puStack184);\n        }\n        goto code_r0x0001400191b4;\n    }\n    uVar6 = uVar4;\n    puStack328 = NULL;\n    if (uVar4 == 0) {\ncode_r0x000140019046:\n        puStack328 = auStack320;\n    }\n    else {\n        if (SUB168((ZEXT816(0) << 0x40 | ZEXT816(0xffffffffffffffff)) / ZEXT816(uVar6), 0) == 0) {\n            fcn.1400031e0(0x80070057);\n            pcVar3 = swi(3);\n            (*pcVar3)();\n            return;\n        }\n        if (uVar6 < 0x81) goto code_r0x000140019046;\n        fcn.1400181e8(&puStack328, uVar6);\n    }\n    uVar5 = fcn.140038594(arg1, puStack328, uVar4);\n    if (uVar5 != uVar4) {\n        fcn.1400384a8(3, 0);\n        pcVar3 = swi(3);\n        (*pcVar3)();\n        return;\n    }\n    fcn.140018694(&iStack352, puStack328, uVar4, \"P;\\n@\\x01\");\n    fcn.140007bbc(arg2, &iStack352);\n    LOCK();\n    piVar1 = iStack352 + -8;\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 + -1 < 1) {\n        (**(**(iStack352 + -0x18) + 8))();\n    }\n    if (puStack328 != auStack320) {\n        fcn.1400181d8(&puStack328);\n    }\ncode_r0x0001400191b4:\n    fcn.140069870(uStack40 ^ auStack392);\n    return;\n}\n",
        "token_count": 1037
    },
    "14001926": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.140019264(ulong arg1, ulong arg2)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    code *pcVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    ulong arg2_00;\n    uint64_t uVar6;\n    uchar auStack392 [32];\n    int32_t aiStack360 [2];\n    int64_t iStack352;\n    int64_t iStack344;\n    ulong uStack336;\n    uchar *puStack328;\n    uchar auStack320 [136];\n    uchar *puStack184;\n    uchar auStack176 [136];\n    uint64_t uStack40;\n    \n    uStack336 = 0xfffffffffffffffe;\n    uStack40 = *0x1400d96f0 ^ auStack392;\n    uVar4 = fcn.140038c64(arg1, aiStack360);\n    if (aiStack360[0] != 1) {\n        uVar6 = uVar4;\n        puStack184 = NULL;\n        if (uVar4 == 0) {\ncode_r0x0001400193c2:\n            puStack184 = auStack176;\n        }\n        else {\n            if (SUB168((ZEXT816(0) << 0x40 | ZEXT816(0xffffffffffffffff)) / ZEXT816(uVar6), 0) < 2) {\n                fcn.1400031e0(0x80070057);\n                pcVar3 = swi(3);\n                (*pcVar3)();\n                return;\n            }\n            if (uVar6 * 2 < 0x81) goto code_r0x0001400193c2;\n            fcn.140018214(&puStack184, uVar6 * 2);\n        }\n        uVar5 = fcn.140038594(arg1, puStack184, uVar4 * 2);\n        if (uVar5 != uVar6 * 2) {\n            fcn.1400384a8(3, 0);\n            pcVar3 = swi(3);\n            (*pcVar3)();\n            return;\n        }\n        fcn.140018848(&iStack352, puStack184, uVar4, \"P;\\n@\\x01\");\n        fcn.140018f38(arg2, &iStack352);\n        LOCK();\n        piVar1 = iStack352 + -8;\n        iVar2 = *piVar1;\n        *piVar1 = *piVar1 + -1;\n        if (iVar2 + -1 < 1) {\n            (**(**(iStack352 + -0x18) + 8))();\n        }\n        if (puStack184 != auStack176) {\n            fcn.1400181e0(&puStack184);\n        }\n        goto code_r0x000140019460;\n    }\n    uVar6 = uVar4;\n    puStack328 = NULL;\n    if (uVar4 == 0) {\ncode_r0x0001400192f2:\n        puStack328 = auStack320;\n    }\n    else {\n        if (SUB168((ZEXT816(0) << 0x40 | ZEXT816(0xffffffffffffffff)) / ZEXT816(uVar6), 0) == 0) {\n            fcn.1400031e0(0x80070057);\n            pcVar3 = swi(3);\n            (*pcVar3)();\n            return;\n        }\n        if (uVar6 < 0x81) goto code_r0x0001400192f2;\n        fcn.1400181e8(&puStack328, uVar6);\n    }\n    uVar5 = fcn.140038594(arg1, puStack328, uVar4);\n    if (uVar5 != uVar4) {\n        fcn.1400384a8(3, 0);\n        pcVar3 = swi(3);\n        (*pcVar3)();\n        return;\n    }\n    arg2_00 = fcn.140018e44(&iStack344, puStack328, uVar4);\n    fcn.140018f38(arg2, arg2_00);\n    LOCK();\n    piVar1 = iStack344 + -8;\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 + -1 < 1) {\n        (**(**(iStack344 + -0x18) + 8))();\n    }\n    if (puStack328 != auStack320) {\n        fcn.1400181d8(&puStack328);\n    }\ncode_r0x000140019460:\n    fcn.140069870(uStack40 ^ auStack392);\n    return;\n}\n",
        "token_count": 1039
    },
    "14001983": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.140019830(int64_t arg1)\n\n{\n    ulong uVar1;\n    \n    if (*(arg1 + 8) == 0) {\n        uVar1 = 0;\n    }\n    else {\n        uVar1 = fcn.1400197ec(arg1);\n        uVar1 = (*_sym.imp.USER32.dll_DestroyMenu)(uVar1);\n    }\n    return uVar1;\n}\n",
        "token_count": 92
    },
    "14001bdb": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.14001bdb8(code **arg1, ulong arg2)\n\n{\n    ulong uVar1;\n    ulong in_R8;\n    \n    *arg1 = vtable.CDC.0;\n    if (arg1[1] != NULL) {\n        uVar1 = fcn.14001bd44(arg1, arg2, in_R8);\n        (*_sym.imp.GDI32.dll_DeleteDC)(uVar1);\n    }\n    return;\n}\n",
        "token_count": 100
    },
    "14001c11": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.14001c114(int64_t arg1)\n\n{\n    ulong uVar1;\n    \n    if (*(arg1 + 8) == 0) {\n        uVar1 = 0;\n    }\n    else {\n        uVar1 = fcn.14001c0d0(arg1);\n        uVar1 = (*_sym.imp.GDI32.dll_DeleteObject)(uVar1);\n    }\n    return uVar1;\n}\n",
        "token_count": 96
    },
    "14001e0e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nint64_t * fcn.14001e0e4(int64_t *arg1)\n\n{\n    int32_t iVar1;\n    int32_t aiStackX8 [2];\n    int64_t *piStackX16;\n    int64_t *apiStackX24 [2];\n    \n    if (arg1 != NULL) {\n        iVar1 = (**(*arg1 + 0xb0))(arg1, aiStackX8);\n        if ((iVar1 != 0) || (aiStackX8[0] != 1)) {\n            (**(*arg1 + 8))(arg1);\n            return arg1;\n        }\n        piStackX16 = NULL;\n        iVar1 = (**(*arg1 + 0x60))(arg1, 1, &piStackX16);\n        if (iVar1 == 0) {\n            apiStackX24[0] = NULL;\n            (**(*piStackX16 + 0x18))(piStackX16, 1, apiStackX24);\n            fcn.14003a77c(&piStackX16);\n            return apiStackX24[0];\n        }\n    }\n    return NULL;\n}\n",
        "token_count": 250
    },
    "14001e64": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.14001e640(int64_t **arg1)\n\n{\n    int64_t **lpMem;\n    int64_t *piVar1;\n    \n    piVar1 = *arg1;\n    while (piVar1 != NULL) {\n        lpMem = *arg1;\n        *arg1 = *lpMem;\n        fcn.140069e50(lpMem);\n        piVar1 = *arg1;\n    }\n    return;\n}\n",
        "token_count": 97
    },
    "14002061": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140020614(int64_t *arg1)\n\n{\n    if (0 < *(arg1 + 1)) {\n        (**(*arg1 + 8))(arg1, 1);\n    }\n    return;\n}\n",
        "token_count": 50
    },
    "140020ac": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.140020ac8(int64_t arg1)\n\n{\n    code *pcVar1;\n    ulong uVar2;\n    \n    if (arg1 == 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        uVar2 = (*pcVar1)();\n        return uVar2;\n    }\n    if (*(arg1 + 0x10) == 0) {\n        uVar2 = 0;\n    }\n    else {\n        uVar2 = (**(arg1 + 0x10))();\n    }\n    return uVar2;\n}\n",
        "token_count": 130
    },
    "140020eb": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint64_t fcn.140020eb8(int64_t arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    uint64_t uVar3;\n    uint auStackX8 [2];\n    uint32_t uStack24;\n    uchar auStack20 [12];\n    \n    if (*(arg1 + 0xa8) == 0) {\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetPrivateProfileIntA)(arg2, arg3, arg4, *(arg1 + 0xd0));\n    }\n    else {\n        iVar2 = fcn.140020e44(arg1, arg2);\n        if (iVar2 != 0) {\n            auStackX8[0] = 4;\n            iVar1 = (*_sym.imp.ADVAPI32.dll_RegQueryValueExA)(iVar2, arg3, 0, auStack20, &uStack24, auStackX8);\n            (*_sym.imp.ADVAPI32.dll_RegCloseKey)(iVar2);\n            if (iVar1 == 0) {\n                arg4._0_4_ = uStack24;\n            }\n        }\n        uVar3 = arg4;\n    }\n    return uVar3;\n}\n",
        "token_count": 278
    },
    "14002129": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140021298(int64_t param_1, int64_t *param_2, ulong param_3, ulong param_4)\n\n{\n    int32_t *piVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int64_t iVar5;\n    int64_t iVar6;\n    int64_t *piVar7;\n    int64_t iVar8;\n    int64_t iVar9;\n    int64_t arg1;\n    int64_t aiStackX8 [3];\n    uchar auStackX32 [8];\n    ulong uStack56;\n    \n    uStack56 = 0x1400212ab;\n    iVar5 = fcn.140097600();\n    iVar5 = -iVar5;\n    *(&stack0x00000010 + iVar5) = 0xfffffffffffffffe;\n    *(&stack0x00001020 + iVar5) = *0x1400d96f0 ^ &stack0xffffffffffffffd0 + iVar5;\n    iVar9 = *(&stack0x00001090 + iVar5);\n    *(&stack0x00000004 + iVar5) = 0;\n    if (*(param_1 + 0xa8) == 0) {\n        iVar6 = 0x1400a0e8b;\n        if (iVar9 != 0) {\n            iVar6 = iVar9;\n        }\n        *(&stack0xfffffffffffffff8 + iVar5) = *(param_1 + 0xd0);\n        *(&stack0xfffffffffffffff0 + iVar5) = 0x1000;\n        *(&stack0xffffffffffffffc8 + iVar5) = 0x140021487;\n        (*_sym.imp.KERNEL32.dll_GetPrivateProfileStringA)(param_3, param_4, iVar6, &stack0x00000020 + iVar5);\n        *(&stack0xffffffffffffffc8 + iVar5) = 0x140021494;\n        fcn.1400057dc(param_2, &stack0x00000020 + iVar5);\n    }\n    else {\n        *(&stack0xffffffffffffffc8 + iVar5) = 0x1400212f5;\n        iVar6 = fcn.140020e44(param_1, param_3);\n        if (iVar6 == 0) {\n            *(&stack0xffffffffffffffc8 + iVar5) = 0x140021308;\n            fcn.1400057dc(param_2, iVar9);\n        }\n        else {\n            *(&stack0xffffffffffffffc8 + iVar5) = 0x140021315;\n            piVar7 = fcn.140017fc0();\n            if (piVar7 == NULL) {\n                *(&stack0xffffffffffffffc8 + iVar5) = 0x14002132e;\n                fcn.1400031e0(0x80004005);\n                pcVar2 = swi(3);\n                (*pcVar2)();\n                return;\n            }\n            pcVar2 = *(*piVar7 + 0x18);\n            *(&stack0xffffffffffffffc8 + iVar5) = 0x140021338;\n            iVar8 = (*pcVar2)(piVar7);\n            arg1 = iVar8 + 0x18;\n            *(&stack0x00000008 + iVar5) = arg1;\n            *(&stack0x00000004 + iVar5) = 0;\n            *(&stack0x00000000 + iVar5) = 0;\n            *(&stack0xfffffffffffffff8 + iVar5) = &stack0x00000000 + iVar5;\n            *(&stack0xfffffffffffffff0 + iVar5) = 0;\n            *(&stack0xffffffffffffffc8 + iVar5) = 0x14002136f;\n            iVar3 = (*_sym.imp.ADVAPI32.dll_RegQueryValueExA)(iVar6, param_4, 0, &stack0x00000004 + iVar5);\n            if (iVar3 == 0) {\n                if ((*(iVar8 + 0xc) - *(&stack0x00000000 + iVar5) | 1U - *(iVar8 + 0x10)) < 0) {\n                    *(&stack0xffffffffffffffc8 + iVar5) = 0x140021393;\n                    fcn.1400033e0(&stack0x00000008 + iVar5, *(&stack0x00000000 + iVar5));\n                    arg1 = *(&stack0x00000008 + iVar5);\n                }\n                *(&stack0xfffffffffffffff8 + iVar5) = &stack0x00000000 + iVar5;\n                *(&stack0xfffffffffffffff0 + iVar5) = arg1;\n                *(&stack0xffffffffffffffc8 + iVar5) = 0x1400213bb;\n                iVar3 = (*_sym.imp.ADVAPI32.dll_RegQueryValueExA)(iVar6, param_4, 0, &stack0x00000004 + iVar5);\n                iVar4 = *(arg1 + -0xc);\n                *(&stack0xffffffffffffffc8 + iVar5) = 0x1400213ca;\n                iVar4 = fcn.14006b544(arg1, iVar4);\n                if ((iVar4 < 0) || (*(arg1 + -0xc) < iVar4)) {\n                    *(&stack0xffffffffffffffc8 + iVar5) = 0x1400213e8;\n                    fcn.1400031e0(0x80070057);\n                    pcVar2 = swi(3);\n                    (*pcVar2)();\n                    return;\n                }\n                *(arg1 + -0x10) = iVar4;\n                *(iVar4 + arg1) = 0;\n            }\n            *(&stack0xffffffffffffffc8 + iVar5) = 0x1400213f2;\n            (*_sym.imp.ADVAPI32.dll_RegCloseKey)(iVar6);\n            if (iVar3 == 0) {\n                *(&stack0xffffffffffffffc8 + iVar5) = 0x140021400;\n                iVar9 = fcn.1400075ec(arg1 + -0x18);\n                *param_2 = iVar9 + 0x18;\n                LOCK();\n                piVar1 = arg1 + -8;\n                iVar3 = *piVar1;\n                *piVar1 = *piVar1 + -1;\n                if (iVar3 + -1 < 1) {\n                    piVar7 = *(arg1 + -0x18);\n                    pcVar2 = *(*piVar7 + 8);\n                    *(&stack0xffffffffffffffc8 + iVar5) = 0x140021423;\n                    (*pcVar2)(piVar7, arg1 + -0x18);\n                }\n            }\n            else {\n                *(&stack0xffffffffffffffc8 + iVar5) = 0x140021433;\n                fcn.1400057dc(param_2, iVar9);\n                LOCK();\n                piVar1 = arg1 + -8;\n                iVar3 = *piVar1;\n                *piVar1 = *piVar1 + -1;\n                if (iVar3 + -1 < 1) {\n                    pcVar2 = *(**(arg1 + -0x18) + 8);\n                    *(&stack0xffffffffffffffc8 + iVar5) = 0x14002144f;\n                    (*pcVar2)();\n                }\n            }\n        }\n    }\n    *(&stack0xffffffffffffffc8 + iVar5) = 0x1400214a7;\n    fcn.140069870(*(&stack0x00001020 + iVar5) ^ &stack0xffffffffffffffd0 + iVar5);\n    return;\n}\n",
        "token_count": 1679
    },
    "14002171": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nvoid fcn.14002171c(char *arg1, ulong arg2, ulong arg3)\n\n{\n    char cVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    char *arg1_00;\n    int32_t iVar5;\n    ulong in_R9;\n    \n    iVar3 = fcn.14003ad1c(arg1);\n    if (iVar3 == 0) {\n        fcn.140020780();\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    iVar3 = (*_sym.imp.KERNEL32.dll_lstrlenA)(arg1);\n    iVar4 = fcn.1400461d4(arg1, 0, 0, in_R9);\n    iVar4 = iVar4 + -1;\n    if (arg2 < iVar3) {\n        if (arg2 < iVar4) {\n            if (arg3 == 0) {\n                *arg1 = '\\0';\n            }\n            else {\n                iVar3 = fcn.14006a34c(arg1, iVar3 + 1, arg1 + (iVar3 - iVar4));\n                if (iVar3 != 0) {\n                    if (iVar3 == 0xc) {\n                        fcn.140020738();\n                        pcVar2 = swi(3);\n                        (*pcVar2)();\n                        return;\n                    }\n                    if ((iVar3 == 0x16) || (iVar3 == 0x22)) {\n                        fcn.140020780();\n                        pcVar2 = swi(3);\n                        (*pcVar2)();\n                        return;\n                    }\n                    if (iVar3 != 0x50) {\n                        fcn.140020780();\n                        pcVar2 = swi(3);\n                        (*pcVar2)();\n                        return;\n                    }\n                }\n            }\n        }\n        else {\n            arg1_00 = arg1 + 2;\n            if ((*arg1 == '\\\\') && (arg1[1] == '\\\\')) {\n                cVar1 = *arg1_00;\n                while (cVar1 != '\\\\') {\n                    arg1_00 = fcn.14006c2cc(arg1_00);\n                    cVar1 = *arg1_00;\n                }\n            }\n            if (3 < iVar3 - iVar4) {\n                do {\n                    arg1_00 = fcn.14006c2cc(arg1_00);\n                } while (*arg1_00 != '\\\\');\n            }\n            iVar5 = arg1_00 - arg1;\n            if (arg2 < iVar5 + 5 + iVar4) {\n                iVar3 = fcn.14006a34c(arg1, iVar3 + 1, arg1 + (iVar3 - iVar4));\n                if (iVar3 != 0) {\n                    if (iVar3 == 0xc) {\n                        fcn.140020738();\n                        pcVar2 = swi(3);\n                        (*pcVar2)();\n                        return;\n                    }\n                    if ((iVar3 == 0x16) || (iVar3 == 0x22)) {\n                        fcn.140020780();\n                        pcVar2 = swi(3);\n                        (*pcVar2)();\n                        return;\n                    }\n                    if (iVar3 != 0x50) {\n                        fcn.140020780();\n                        pcVar2 = swi(3);\n                        (*pcVar2)();\n                        return;\n                    }\n                }\n            }\n            else {\n                while (iVar4 = (*_sym.imp.KERNEL32.dll_lstrlenA)(),  arg2 < iVar4 + 4 + iVar5) {\n                    do {\n                        arg1_00 = fcn.14006c2cc(arg1_00);\n                    } while (*arg1_00 != '\\\\');\n                }\n                if ((iVar5 < 0) || (arg2 <= iVar5)) {\n                    iVar5 = arg2;\n                }\n                iVar4 = fcn.140069a48(arg1 + iVar5, (iVar3 - iVar5) + 1, \"\\\\...\", 5);\n                if (iVar4 != 0) {\n                    if (iVar4 == 0xc) {\n                        fcn.140020738();\n                        pcVar2 = swi(3);\n                        (*pcVar2)();\n                        return;\n                    }\n                    if ((iVar4 == 0x16) || (iVar4 == 0x22)) {\n                        fcn.140020780();\n                        pcVar2 = swi(3);\n                        (*pcVar2)();\n                        return;\n                    }\n                    if (iVar4 != 0x50) {\n                        fcn.140020780();\n                        pcVar2 = swi(3);\n                        (*pcVar2)();\n                        return;\n                    }\n                }\n                iVar3 = fcn.14006add0(arg1, iVar3 + 1, arg1_00);\n                if (iVar3 != 0) {\n                    if (iVar3 == 0xc) {\n                        fcn.140020738();\n                        pcVar2 = swi(3);\n                        (*pcVar2)();\n                        return;\n                    }\n                    if ((iVar3 == 0x16) || (iVar3 == 0x22)) {\n                        fcn.140020780();\n                        pcVar2 = swi(3);\n                        (*pcVar2)();\n                        return;\n                    }\n                    if (iVar3 != 0x50) {\n                        fcn.140020780();\n                        pcVar2 = swi(3);\n                        (*pcVar2)();\n                        return;\n                    }\n                }\n            }\n        }\n    }\n    return;\n}\n",
        "token_count": 1197
    },
    "14002295": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.14002295c(int64_t arg1, ulong arg2, ulong noname_2, ulong arg4)\n\n{\n    uint32_t uVar1;\n    uchar auStack88 [32];\n    char *pcStack56;\n    uint uStack48;\n    uchar auStack40 [16];\n    uint64_t uStack24;\n    \n    uStack24 = *0x1400d96f0 ^ auStack88;\n    if ((arg1 != 0) && (uVar1 = (*_sym.imp.USER32.dll_GetWindowLongA)(arg1, 0xfffffff0),  (uVar1 & 0xf) == arg2)) {\n        (*_sym.imp.USER32.dll_GetClassNameA)(arg1, auStack40, 10);\n        uStack48 = 0xffffffff;\n        pcStack56 = \"combobox\";\n        (*_sym.imp.KERNEL32.dll_CompareStringA)(0x409, 1, auStack40);\n    }\n    fcn.140069870(uStack24 ^ auStack88);\n    return;\n}\n",
        "token_count": 232
    },
    "140022a0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.140022a00(ulong hWnd, ulong arg2, ulong noname_2, ulong arg4)\n\n{\n    uchar auStack104 [32];\n    ulong uStack72;\n    uint uStack64;\n    uchar auStack56 [32];\n    uint64_t uStack24;\n    \n    uStack24 = *0x1400d96f0 ^ auStack104;\n    (*_sym.imp.USER32.dll_GetClassNameA)(hWnd, auStack56, 0x20);\n    uStack64 = 0xffffffff;\n    uStack72 = arg2;\n    (*_sym.imp.KERNEL32.dll_CompareStringA)(0x409, 1, auStack56);\n    fcn.140069870(uStack24 ^ auStack104);\n    return;\n}\n",
        "token_count": 169
    },
    "140022c4": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140022c44(int64_t lpCriticalSection, ulong arg2)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    int32_t iVar3;\n    \n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(lpCriticalSection + 0x28);\n    iVar3 = 1;\n    if (1 < *(lpCriticalSection + 0xc)) {\n        iVar2 = 0x10;\n        do {\n            iVar1 = *(lpCriticalSection + 0x10);\n            if ((*(iVar1 + 8 + iVar2) == 0) && ((*(iVar1 + iVar2) & 1) != 0)) {\n                *(iVar1 + 8 + iVar2) = arg2;\n            }\n            iVar3 = iVar3 + 1;\n            iVar2 = iVar2 + 0x10;\n        } while (iVar3 < *(lpCriticalSection + 0xc));\n    }\n    // WARNING: Could not recover jumptable at 0x000140022cad. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(lpCriticalSection + 0x28);\n    return;\n}\n",
        "token_count": 258
    },
    "14002317": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140023174(uint *lpCriticalSection, ulong arg2, int64_t arg3)\n\n{\n    code **ppcVar1;\n    code *pcVar2;\n    ulong in_R9;\n    ulong uVar3;\n    \n    uVar3 = 0xfffffffffffffffe;\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(lpCriticalSection + 10);\n    if ((arg2 < 1) || (lpCriticalSection[3] <= arg2)) {\n        (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(lpCriticalSection + 10);\n        return;\n    }\n    ppcVar1 = (*_sym.imp.KERNEL32.dll_TlsGetValue)(*lpCriticalSection);\n    if (ppcVar1 == NULL) {\n        ppcVar1 = fcn.140022b98(0x20);\n        if (ppcVar1 == NULL) {\n            ppcVar1 = NULL;\n        }\n        else {\n            *ppcVar1 = vtable.CThreadData.0;\n        }\n        *(ppcVar1 + 2) = 0;\n        ppcVar1[3] = NULL;\n        *(ppcVar1 + *(lpCriticalSection + 8)) = *(lpCriticalSection + 6);\n        *(lpCriticalSection + 6) = ppcVar1;\n    }\n    else if ((arg2 < *(ppcVar1 + 2)) || (arg3 == 0)) goto code_r0x0001400232c1;\n    if (ppcVar1[3] == NULL) {\n        if (0xffffffff < lpCriticalSection[3] << 3) {\n            fcn.1400031e0(0x80070057);\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n        pcVar2 = (*_sym.imp.KERNEL32.dll_LocalAlloc)(0);\n    }\n    else {\n        if (0xffffffff < lpCriticalSection[3] << 3) {\n            fcn.1400031e0(0x80070057);\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n        pcVar2 = (*_sym.imp.KERNEL32.dll_LocalReAlloc)\n                           (ppcVar1[3], lpCriticalSection[3] << 3 & 0xffffffff, 2, in_R9, uVar3);\n    }\n    if (pcVar2 == NULL) {\n        (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(lpCriticalSection + 10);\n        fcn.140020738();\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    ppcVar1[3] = pcVar2;\n    fcn.1400698a0(pcVar2 + *(ppcVar1 + 2) * 8, 0, lpCriticalSection[3] - *(ppcVar1 + 2) << 3);\n    *(ppcVar1 + 2) = lpCriticalSection[3];\n    (*_sym.imp.KERNEL32.dll_TlsSetValue)(*lpCriticalSection, ppcVar1);\ncode_r0x0001400232c1:\n    if ((ppcVar1[3] != NULL) && (arg2 < *(ppcVar1 + 2))) {\n        *(ppcVar1[3] + arg2 * 8) = arg3;\n    }\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(lpCriticalSection + 10);\n    return;\n}\n",
        "token_count": 751
    },
    "14002332": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140023324(uint *arg1, ulong *arg2, int64_t arg3)\n\n{\n    ulong *puVar1;\n    bool bVar2;\n    int64_t iVar3;\n    int32_t iVar4;\n    int64_t iVar5;\n    \n    bVar2 = true;\n    iVar4 = 1;\n    if (1 < *(arg2 + 2)) {\n        iVar3 = 8;\n        iVar5 = 0x10;\n        do {\n            if ((arg3 == 0) || (*(*(arg1 + 4) + 8 + iVar5) == arg3)) {\n                puVar1 = *(iVar3 + arg2[3]);\n                if (puVar1 != NULL) {\n                    (***puVar1)(puVar1, 1);\n                }\n                *(iVar3 + arg2[3]) = 0;\n            }\n            else if (*(iVar3 + arg2[3]) != 0) {\n                bVar2 = false;\n            }\n            iVar4 = iVar4 + 1;\n            iVar5 = iVar5 + 0x10;\n            iVar3 = iVar3 + 8;\n        } while (iVar4 < *(arg2 + 2));\n        if (!bVar2) {\n            return;\n        }\n    }\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(arg1 + 10);\n    fcn.140022df4(arg1 + 6, arg2);\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(arg1 + 10);\n    (*_sym.imp.KERNEL32.dll_LocalFree)(arg2[3]);\n    (***arg2)(arg2, 1);\n    (*_sym.imp.KERNEL32.dll_TlsSetValue)(*arg1, 0);\n    return;\n}\n",
        "token_count": 385
    },
    "1400234a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint64_t fcn.1400234a0(uint32_t *arg1, code *arg2)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int64_t iVar3;\n    \n    if (arg2 == NULL) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        iVar3 = (*pcVar1)();\n        return iVar3;\n    }\n    if (*arg1 == 0) {\n        if (*0x1400de720 == 0) {\n            *0x1400de720 = fcn.140022ef4(0x1400de730);\n            if (*0x1400de720 == 0) {\n                fcn.140020780();\n                pcVar1 = swi(3);\n                iVar3 = (*pcVar1)();\n                return iVar3;\n            }\n        }\n        uVar2 = fcn.140022f44(*0x1400de720);\n        *arg1 = uVar2;\n        if (uVar2 == 0) {\n            fcn.140020780();\n            pcVar1 = swi(3);\n            iVar3 = (*pcVar1)();\n            return iVar3;\n        }\n    }\n    iVar3 = fcn.140022bd4(*0x1400de720, *arg1);\n    if (iVar3 == 0) {\n        iVar3 = (*arg2)();\n        fcn.140023174(*0x1400de720, *arg1, iVar3);\n    }\n    return iVar3;\n}\n",
        "token_count": 336
    },
    "1400236e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.1400236e0(void)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    \n    iVar2 = fcn.140017ad4();\n    if (*(iVar2 + 0x54) == 0) {\n        iVar2 = fcn.140017ad4();\n        *(iVar2 + 0x54) = 1;\n        iVar2 = fcn.140017ad4();\n        iVar2 = *(iVar2 + 8);\n        if ((iVar2 == 0) || (*(iVar2 + 0x40) == 0)) {\n            iVar2 = fcn.140017ad4();\n            if (*(iVar2 + 0x28) == '\\0') {\n                fcn.140003c34(0);\n            }\n        }\n        else {\n            iVar1 = fcn.14001549c(*(iVar2 + 0x40));\n            if (iVar1 != 0) {\n                (**(**(iVar2 + 0x40) + 0xc0))();\n            }\n        }\n    }\n    return;\n}\n",
        "token_count": 234
    },
    "1400239d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.1400239d0(int64_t *arg1)\n\n{\n    int64_t iVar1;\n    uchar auStack24 [16];\n    \n    if ((*0x1400deb08 == 0) && (*0x1400deb08 = (*_sym.imp.USER32.dll_LoadCursorA)(0, 0x7f8b),  *0x1400deb08 == 0)) {\n        iVar1 = fcn.140017ad4();\n        *0x1400deb08 = (*_sym.imp.USER32.dll_LoadCursorA)(*(iVar1 + 0x18), 0x7901);\n        if (*0x1400deb08 == 0) {\n            return;\n        }\n    }\n    (**(*arg1 + 0x18))(arg1, 0xe145, 0, 0, auStack24);\n    return;\n}\n",
        "token_count": 191
    },
    "140023a4": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint64_t fcn.140023a40(int64_t arg1, ulong arg2, uint *arg3)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int64_t iVar4;\n    ulong uVar5;\n    int64_t iVar6;\n    int64_t iVar7;\n    int64_t iVar8;\n    int64_t arg2_00;\n    uint uVar9;\n    \n    if (*(arg1 + 0xc4) == 0) {\n        return 0;\n    }\n    iVar4 = (*_sym.imp.USER32.dll_GetCapture)();\n    uVar5 = (*_sym.imp.USER32.dll_WindowFromPoint)(arg2);\n    iVar6 = fcn.14000fc08(uVar5);\n    if (iVar6 == 0) {\n        arg2_00 = 0;\n    }\n    else {\n        arg2_00 = *(iVar6 + 0x40);\n    }\n    iVar6 = fcn.140012120(iVar6);\n    uVar5 = (*_sym.imp.USER32.dll_GetActiveWindow)();\n    uVar5 = fcn.14000fc08(uVar5);\n    iVar7 = fcn.140012120(uVar5);\n    uVar9 = 0;\n    iVar1 = (*_sym.imp.KERNEL32.dll_GetCurrentThreadId)();\n    if (arg2_00 == 0) {\n        iVar2 = 0;\n    }\n    else {\n        iVar2 = (*_sym.imp.USER32.dll_GetWindowThreadProcessId)(arg2_00, 0);\n    }\n    if ((iVar7 == 0) || (iVar8 = (*_sym.imp.USER32.dll_GetDesktopWindow)(),  arg2_00 == iVar8)) {\n        uVar5 = *0x1400deb00;\n        if (iVar4 == *(arg1 + 0x40)) {\n            (*_sym.imp.USER32.dll_ReleaseCapture)();\n            uVar5 = *0x1400deb00;\n        }\ncode_r0x000140023b5b:\n        (*_sym.imp.USER32.dll_SetCursor)(uVar5);\n        goto code_r0x000140023b61;\n    }\n    if (arg2_00 == 0) {\ncode_r0x000140023b33:\n        if (iVar1 != iVar2) goto code_r0x000140023b38;\n    }\n    else {\n        if (iVar1 == iVar2) {\n            iVar3 = fcn.140046cf8(*(arg1 + 0x40), arg2_00);\n            if (iVar3 != 0) {\n                uVar9 = 1;\n                if (iVar7 != iVar6) {\n                    arg2_00 = 0;\n                    uVar9 = 1;\n                    goto code_r0x000140023b61;\n                }\n                uVar5 = *0x1400deb08;\n                if (iVar4 != *(arg1 + 0x40)) {\n                    (*_sym.imp.USER32.dll_SetCapture)();\n                    uVar5 = *0x1400deb08;\n                }\n                goto code_r0x000140023b5b;\n            }\n            goto code_r0x000140023b33;\n        }\ncode_r0x000140023b38:\n        arg2_00 = 0;\n    }\n    uVar9 = 0;\n    if (iVar4 == *(arg1 + 0x40)) {\n        (*_sym.imp.USER32.dll_ReleaseCapture)();\n        uVar9 = 0;\n    }\ncode_r0x000140023b61:\n    if (arg3 != NULL) {\n        *arg3 = uVar9;\n    }\n    return arg2_00;\n}\n",
        "token_count": 805
    },
    "140023b8": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.140023b84(int64_t *arg1, int64_t arg2, int32_t *arg3)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    int32_t aiStackX16 [4];\n    ulong uStackX32;\n    uchar auStack72 [48];\n    \n    uVar1 = *(arg2 + 8);\n    if ((uVar1 == 0x367) || ((uVar1 == 0x100 && (*(arg2 + 0x10) == 0x1b)))) {\ncode_r0x000140023de3:\n        (*_sym.imp.USER32.dll_PeekMessageA)(arg2, 0, uVar1, uVar1, 1);\n        return 0;\n    }\n    if (((uVar1 < 0x200) || (0x209 < uVar1)) && ((uVar1 < 0xa0 || (0xa9 < uVar1)))) {\n        if ((uVar1 != 0x112) && ((uVar1 < 0x100 || (0x109 < uVar1)))) {\n            iVar2 = (*_sym.imp.USER32.dll_PeekMessageA)(arg2, 0, uVar1, uVar1, 1);\n            if (iVar2 == 0) {\n                return 1;\n            }\ncode_r0x000140023cd4:\n            (*_sym.imp.USER32.dll_DispatchMessageA)(arg2);\n            return 1;\n        }\n        iVar3 = (*_sym.imp.USER32.dll_GetCapture)();\n        if (iVar3 != 0) {\n            (*_sym.imp.USER32.dll_ReleaseCapture)();\n            do {\n                iVar2 = (*_sym.imp.USER32.dll_PeekMessageA)(auStack72, 0, 0x200, 0x209, 3);\n            } while (iVar2 != 0);\n        }\n        iVar2 = (*_sym.imp.USER32.dll_PeekMessageA)(arg2, 0, *(arg2 + 8), *(arg2 + 8), 0);\n        if (iVar2 == 0) goto code_r0x000140023db7;\n        (*_sym.imp.USER32.dll_GetMessageA)(arg2, 0, *(arg2 + 8), *(arg2 + 8));\n        iVar2 = (**(*arg1 + 0x210))(arg1, arg2);\n        if ((iVar2 != 0) ||\n           (((*_sym.imp.USER32.dll_TranslateMessage)(arg2),  *(arg2 + 8) != 0x112 &&\n            ((*(arg2 + 8) < 0x104 || (0x107 < *(arg2 + 8))))))) goto code_r0x000140023db7;\n    }\n    else {\n        iVar3 = fcn.140023a40(arg1, *(arg2 + 0x24), aiStackX16);\n        if (iVar3 == 0) {\n            return 1;\n        }\n        if (aiStackX16[0] == 0) {\n            (*_sym.imp.USER32.dll_PeekMessageA)(arg2, 0, *(arg2 + 8), *(arg2 + 8), 1);\n            goto code_r0x000140023cd4;\n        }\n        if (*(arg2 + 8) != 0x201) {\n            (*_sym.imp.USER32.dll_PeekMessageA)(arg2, 0, *(arg2 + 8), *(arg2 + 8), 1);\n            return 1;\n        }\n        uVar1 = (*_sym.imp.USER32.dll_SendMessageA)(iVar3, 0x84, 0, CONCAT22(*(arg2 + 0x28), *(arg2 + 0x24)));\n        if ((uVar1 != 5) && (uVar1 != 3)) {\n            if (uVar1 == 1) {\n                iVar2 = fcn.140023760(iVar3, *(arg2 + 0x24));\n                *arg3 = iVar2;\n            }\n            else {\n                if (uVar1 < 0x16) {\n                    iVar2 = uVar1 + 0x40000;\n                }\n                else {\n                    iVar2 = -1;\n                }\n                *arg3 = iVar2;\n            }\n            uVar1 = *(arg2 + 8);\n            goto code_r0x000140023de3;\n        }\n        (*_sym.imp.USER32.dll_ReleaseCapture)();\n        (*_sym.imp.USER32.dll_GetMessageA)(arg2, 0, 0xa1, 0xa1);\n    }\n    (*_sym.imp.USER32.dll_DispatchMessageA)(arg2);\ncode_r0x000140023db7:\n    (*_sym.imp.USER32.dll_GetCursorPos)(&uStackX32);\n    fcn.140023a40(arg1, uStackX32, 0);\n    return 1;\n}\n",
        "token_count": 1093
    },
    "140023e0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.140023e0c(int64_t arg1)\n\n{\n    int64_t *piVar1;\n    int64_t *piVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int64_t iVar5;\n    ulong arg1_00;\n    int32_t iVar6;\n    int32_t aiStackX8 [2];\n    ulong uStackX16;\n    uchar auStack72 [48];\n    \n    if (((*(arg1 + 0xc4) != 1) && (iVar3 = fcn.1400239d0(arg1),  iVar3 != 0)) &&\n       (iVar3 = (*_sym.imp.USER32.dll_PeekMessageA)(auStack72, *(arg1 + 0x40), 0x367, 0x367, 3),  iVar3 == 0)) {\n        iVar3 = *(arg1 + 0xc4);\n        *(arg1 + 0xc4) = 1;\n        if (((iVar3 == 2) || (piVar1 = *(arg1 + 0xe0),  piVar1 == NULL)) ||\n           (iVar4 = (**(*piVar1 + 0xc0))(piVar1, 1),  iVar4 != 0)) {\n            if (iVar3 == 0) {\n                (*_sym.imp.USER32.dll_PostMessageA)(*(arg1 + 0x40), 0x111, 0xe145);\n                *(arg1 + 0xc4) = 2;\n            }\n            else {\n                iVar3 = (*_sym.imp.USER32.dll_SendMessageA)(*(arg1 + 0x40), 0x362, 0xe002, 0);\n                if (iVar3 == 0) {\n                    iVar3 = 0xe001;\n                }\n                aiStackX8[0] = 0;\n                (*_sym.imp.USER32.dll_GetCursorPos)(&uStackX16);\n                fcn.140023a40(arg1, uStackX16, 0);\n                iVar5 = fcn.140017ad4();\n                piVar1 = *(iVar5 + 8);\n                iVar4 = *(arg1 + 0xc4);\n                iVar6 = 0;\n                while (iVar4 != 0) {\n                    iVar4 = (*_sym.imp.USER32.dll_PeekMessageA)(auStack72, 0, 0, 0, 0);\n                    if (iVar4 == 0) {\n                        iVar4 = (**(*piVar1 + 0xc0))(piVar1);\n                        if (iVar4 == 0) {\n                            (*_sym.imp.USER32.dll_WaitMessage)();\n                        }\n                    }\n                    else {\n                        iVar4 = fcn.140023b84(arg1, auStack72, aiStackX8);\n                        iVar6 = aiStackX8[0];\n                        if (iVar4 == 0) break;\n                    }\n                    iVar6 = aiStackX8[0];\n                    iVar4 = *(arg1 + 0xc4);\n                }\n                *(arg1 + 0xc4) = 0;\n                (*_sym.imp.USER32.dll_ReleaseCapture)();\n                arg1_00 = (*_sym.imp.USER32.dll_SetCapture)(*(arg1 + 0x40));\n                fcn.14000fc08(arg1_00);\n                (*_sym.imp.USER32.dll_ReleaseCapture)();\n                (*_sym.imp.USER32.dll_SendMessageA)(*(arg1 + 0x40), 0x362, iVar3, 0);\n                piVar2 = *(arg1 + 0xe0);\n                if (piVar2 != NULL) {\n                    (**(*piVar2 + 0xc0))(piVar2, 0);\n                }\n                if (iVar6 != 0) {\n                    if (iVar6 == -1) {\n                        (*_sym.imp.USER32.dll_SendMessageA)(*(arg1 + 0x40), 0x111, 0xe147, 0);\n                    }\n                    else {\n                        (**(*piVar1 + 0x158))(piVar1, iVar6, 1);\n                    }\n                }\n                (*_sym.imp.USER32.dll_PostMessageA)(*(arg1 + 0x40), 0x36a, 0, 0);\n            }\n        }\n        else {\n            (**(**(arg1 + 0xe0) + 0xc0))(*(arg1 + 0xe0), 0);\n            *(arg1 + 0xc4) = 0;\n        }\n    }\n    return;\n}\n",
        "token_count": 992
    },
    "14002408": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140024080(void)\n\n{\n    int32_t *piVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    \n    if (*0x1400de784 != 0) {\n        *0x1400de784 = *0x1400de784 + -1;\n        (*_sym.imp.KERNEL32.dll_DeleteCriticalSection)(0x1400dea38);\n        piVar1 = 0x1400dea60;\n        iVar3 = 0x1400de790;\n        iVar2 = 0x11;\n        do {\n            if (*piVar1 != 0) {\n                (*_sym.imp.KERNEL32.dll_DeleteCriticalSection)(iVar3);\n                *piVar1 = *piVar1 + -1;\n            }\n            iVar3 = iVar3 + 0x28;\n            piVar1 = piVar1 + 1;\n            iVar2 = iVar2 + -1;\n        } while (iVar2 != 0);\n    }\n    return;\n}\n",
        "token_count": 217
    },
    "14002453": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.14002453c(int64_t arg1, ulong arg2)\n\n{\n    int64_t iVar1;\n    int64_t iStackX8;\n    int64_t iStackX16;\n    uchar auStackX24 [8];\n    \n    if (arg1 != 0) {\n        iStackX16 = -(*(arg1 + 0x80) != 0);\n        while (iStackX16 != 0) {\n            fcn.14003a538(arg1 + 0x68, &iStackX16, auStackX24, &iStackX8);\n            iVar1 = *(arg1 + 0xa8);\n            *(iStackX8 + iVar1) = 0;\n            if (*(arg1 + 0xb0) == 2) {\n                *(iStackX8 + 8 + iVar1) = 0;\n            }\n            (**(arg1 + 0x28))(iStackX8);\n        }\n        fcn.14003a3c8(arg1 + 0x68);\n        fcn.14004bf74(arg1 + 8);\n    }\n    return;\n}\n",
        "token_count": 248
    },
    "140024dc": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint64_t fcn.140024dc4(int64_t arg1)\n\n{\n    int64_t *piVar1;\n    code *pcVar2;\n    uint64_t uVar3;\n    ulong *puVar4;\n    uint32_t uVar5;\n    int64_t iStackX8;\n    \n    puVar4 = *(arg1 + 0x10);\n    uVar5 = 0;\n    while( true ) {\n        if (puVar4 == NULL) {\n            return uVar5;\n        }\n        if (puVar4 == NULL) break;\n        piVar1 = puVar4[2];\n        puVar4 = *puVar4;\n        iStackX8 = (**(*piVar1 + 0xa8))(piVar1);\n        while (iStackX8 != 0) {\n            (**(*piVar1 + 0xb0))(piVar1, &iStackX8);\n            uVar5 = uVar5 + 1;\n        }\n    }\n    fcn.140020780();\n    pcVar2 = swi(3);\n    uVar3 = (*pcVar2)();\n    return uVar3;\n}\n",
        "token_count": 251
    },
    "1400251f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.1400251f0(code **arg1)\n\n{\n    ulong *puVar1;\n    int64_t *piVar2;\n    ulong *arg2;\n    ulong in_R8;\n    ulong in_R9;\n    ulong uVar3;\n    \n    uVar3 = 0xfffffffffffffffe;\n    *arg1 = vtable.CDocManager.0;\n    puVar1 = arg1[2];\n    do {\n        arg2 = puVar1;\n        if (arg2 == NULL) {\ncode_r0x000140025260:\n            arg1[1] = vtable.CPtrList.0;\n            arg1[4] = NULL;\n            arg1[5] = NULL;\n            arg1[3] = NULL;\n            arg1[2] = NULL;\n            fcn.14002aadc(arg1[6]);\n            arg1[6] = NULL;\n            return;\n        }\n        if (arg2 == NULL) {\n            fcn.140020780();\n            goto code_r0x000140025260;\n        }\n        puVar1 = *arg2;\n        piVar2 = arg2[2];\n        if (*(piVar2 + 8) != 0) {\n            fcn.14003ae14(arg1 + 1, arg2);\n            (**(*piVar2 + 8))(piVar2, 1, in_R8, in_R9, uVar3);\n        }\n    } while( true );\n}\n",
        "token_count": 317
    },
    "1400257c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.1400257c4(int64_t *arg1, ulong arg2)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    code *pcVar3;\n    uchar in_R8B;\n    \n    if (-1 < arg2) {\n        iVar2 = *arg1;\n        iVar1 = *(iVar2 + -0x10);\n        if (arg2 < iVar1) {\n            if (1 < *(iVar2 + -8)) {\n                fcn.1400034b0(arg1, *(iVar2 + -0x10));\n            }\n            *(arg2 + *arg1) = in_R8B;\n            if ((-1 < iVar1) && (iVar1 <= *(*arg1 + -0xc))) {\n                *(*arg1 + -0x10) = iVar1;\n                *(iVar1 + *arg1) = 0;\n                return;\n            }\n            fcn.1400031e0(0x80070057);\n            pcVar3 = swi(3);\n            (*pcVar3)();\n            return;\n        }\n    }\n    fcn.1400031e0(0x80070057);\n    pcVar3 = swi(3);\n    (*pcVar3)();\n    return;\n}\n",
        "token_count": 272
    },
    "140027a7": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint64_t * fcn.140027a78(int64_t *arg1, int64_t *arg2, char *arg3, int32_t *arg4)\n\n{\n    uint64_t arg1_00;\n    int32_t iVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    int64_t *piVar5;\n    int64_t iVar6;\n    uint64_t uVar7;\n    \n    iVar3 = *arg4;\n    if (iVar3 < 0) {\n        fcn.1400031e0(0x80070057);\n        pcVar2 = swi(3);\n        piVar5 = (*pcVar2)();\n        return piVar5;\n    }\n    if ((arg3 == NULL) || (*arg3 == '\\0')) {\n        if (iVar3 < *(*arg1 + -0x10)) {\n            piVar5 = *(*arg1 + -0x18);\n            if (piVar5 == NULL) {\n                iVar6 = 0;\n            }\n            else {\n                iVar6 = (**(*piVar5 + 0x20))();\n            }\n            if (iVar6 == 0) {\n                piVar5 = fcn.140017fc0();\n                iVar6 = (**(*piVar5 + 0x20))(piVar5);\n            }\n            fcn.140025e28(arg2, *arg4 + *arg1, iVar6);\n            return arg2;\n        }\n    }\n    else {\n        iVar6 = *arg1;\n        arg1_00 = iVar6 + iVar3;\n        uVar7 = *(iVar6 + -0x10) + iVar6;\n        if (arg1_00 < uVar7) {\n            iVar3 = fcn.14006cb20(arg1_00, arg3);\n            if (iVar3 + arg1_00 < uVar7) {\n                uVar4 = fcn.14006cc48(iVar3 + arg1_00, arg3);\n                iVar1 = *arg4;\n                *arg4 = iVar3 + iVar1 + 1U + uVar4;\n                fcn.140025848(arg1, arg2, iVar3 + iVar1, uVar4);\n                return arg2;\n            }\n        }\n    }\n    *arg4 = -1;\n    if (*(*arg1 + -0x18) == NULL) {\n        piVar5 = NULL;\n    }\n    else {\n        piVar5 = (**(**(*arg1 + -0x18) + 0x20))();\n    }\n    if (piVar5 == NULL) {\n        piVar5 = fcn.140017fc0();\n        piVar5 = (**(*piVar5 + 0x20))(piVar5);\n        if (piVar5 == NULL) {\n            fcn.1400031e0(0x80004005);\n            pcVar2 = swi(3);\n            piVar5 = (*pcVar2)();\n            return piVar5;\n        }\n    }\n    iVar6 = (**(*piVar5 + 0x18))();\n    *arg2 = iVar6 + 0x18;\n    return arg2;\n}\n",
        "token_count": 695
    },
    "140027bc": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140027bc8(int64_t *arg1, int64_t arg2, int64_t *arg3, int64_t *arg4)\n\n{\n    int32_t *piVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    int64_t *piVar4;\n    ulong uVar5;\n    int32_t aiStackX24 [4];\n    int64_t iStack72;\n    int64_t iStack64;\n    int64_t iStack56;\n    int64_t iStack48;\n    ulong uStack40;\n    \n    uStack40 = 0xfffffffffffffffe;\n    if (arg3 == NULL) {\n        fcn.140020780();\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    piVar4 = fcn.140017fc0();\n    if (piVar4 != NULL) {\n        iStack64 = (**(*piVar4 + 0x18))();\n        iStack64 = iStack64 + 0x18;\n        piVar4 = fcn.140017fc0();\n        if (piVar4 != NULL) {\n            iStack72 = (**(*piVar4 + 0x18))(piVar4);\n            iStack72 = iStack72 + 0x18;\n            iVar3 = (**(*arg3 + 200))(arg3, &iStack64);\n            if ((iVar3 != 0) && (*(iStack64 + -0x10) != 0)) {\n                uVar5 = 3;\n                piVar4 = &iStack72;\n                iVar3 = (**(*arg3 + 200))(arg3);\n                if ((iVar3 != 0) && (*(iStack72 + -0x10) != 0)) {\n                    if (arg4 != NULL) {\n                        fcn.140004828(arg4, piVar4, uVar5);\n                    }\n                    fcn.140007ad0(arg1, iStack72, *(iStack72 + -0x10));\n                    fcn.140011bcc(arg1);\n                    aiStackX24[0] = 0;\n                    do {\n                        fcn.140027a78(&iStack64, &iStack56, 0x1400a5958, aiStackX24);\n                        if (aiStackX24[0] != -1) {\n                            if ((arg4 != NULL) && (*(*arg4 + -0x10) == 0)) {\n                                uVar5 = fcn.14002591c(&iStack56, &iStack48, 1);\n                                fcn.140007bbc(arg4, uVar5);\n                                LOCK();\n                                piVar1 = iStack48 + -8;\n                                iVar3 = *piVar1;\n                                *piVar1 = *piVar1 + -1;\n                                if (iVar3 + -1 < 1) {\n                                    (**(**(iStack48 + -0x18) + 8))();\n                                }\n                                *(arg2 + 0x68) = *arg4;\n                                *(arg2 + 0x2c) = *(arg2 + 0x28) + 1;\n                            }\n                            fcn.140011bcc(arg1);\n                            fcn.140007ad0(arg1, iStack56, *(iStack56 + -0x10));\n                            fcn.140011bcc(arg1);\n                        }\n                        LOCK();\n                        piVar1 = iStack56 + -8;\n                        iVar3 = *piVar1;\n                        *piVar1 = *piVar1 + -1;\n                        if (iVar3 + -1 < 1) {\n                            (**(**(iStack56 + -0x18) + 8))();\n                        }\n                    } while (aiStackX24[0] != -1);\n                    fcn.1400257c4(arg1, *(*arg1 + -0x10) - 1);\n                    *(arg2 + 0x28) = *(arg2 + 0x28) + 1;\n                }\n            }\n            LOCK();\n            piVar1 = iStack72 + -8;\n            iVar3 = *piVar1;\n            *piVar1 = *piVar1 + -1;\n            if (iVar3 + -1 < 1) {\n                (**(**(iStack72 + -0x18) + 8))();\n            }\n            LOCK();\n            piVar1 = iStack64 + -8;\n            iVar3 = *piVar1;\n            *piVar1 = *piVar1 + -1;\n            if (iVar3 + -1 < 1) {\n                (**(**(iStack64 + -0x18) + 8))();\n            }\n            return;\n        }\n        fcn.1400031e0(0x80004005);\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    fcn.1400031e0(0x80004005);\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 1096
    },
    "14002824": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140028240(int64_t pdispIn, ulong lcid, ulong pcyOut)\n\n{\n    if (*(pdispIn + 0xb0) != 0) {\n        (**(**(pdispIn + 0xb0) + 0x68))();\n    }\n    return;\n}\n",
        "token_count": 68
    },
    "14002836": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.14002836c(char *arg1, ulong arg2, ulong noname_2, ulong arg4)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int64_t iVar4;\n    uchar auStack1656 [32];\n    int16_t *piStack1624;\n    int16_t aiStack1608 [264];\n    uint8_t auStack1080 [528];\n    int16_t aiStack552 [264];\n    uint64_t uStack24;\n    \n    uStack24 = *0x1400d96f0 ^ auStack1656;\n    iVar1 = (*_sym.imp.KERNEL32.dll_lstrcmpiA)();\n    if ((iVar1 == 0) && (iVar1 = (*_sym.imp.USER32.dll_GetSystemMetrics)(0x2a),  iVar1 != 0)) {\n        iVar1 = (*_sym.imp.KERNEL32.dll_lstrlenA)(arg1);\n        iVar2 = (*_sym.imp.KERNEL32.dll_lstrlenA)(arg2);\n        if (iVar1 == iVar2) {\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetThreadLocale)();\n            piStack1624 = aiStack552;\n            (*_sym.imp.KERNEL32.dll_GetStringTypeExA)(uVar3, 1, arg1);\n            piStack1624 = auStack1080;\n            (*_sym.imp.KERNEL32.dll_GetStringTypeExA)(uVar3, 4, arg1);\n            piStack1624 = aiStack1608;\n            (*_sym.imp.KERNEL32.dll_GetStringTypeExA)(uVar3, 1, arg2);\n            if (*arg1 != '\\0') {\n                iVar4 = 0;\n                do {\n                    if (((auStack1080[iVar4] & 0x80) != 0) && (*(aiStack552 + iVar4) != *(aiStack1608 + iVar4))) break;\n                    iVar4 = iVar4 + 2;\n                    arg1 = fcn.14006c2cc(arg1);\n                } while (*arg1 != '\\0');\n            }\n        }\n    }\n    fcn.140069870(uStack24 ^ auStack1656);\n    return;\n}\n",
        "token_count": 485
    },
    "140028cf": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140028cf0(code **arg1, ulong arg2)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    code *pcVar3;\n    uchar auStack616 [56];\n    code **ppcStack560;\n    ulong uStack544;\n    uint64_t uStack24;\n    \n    uStack544 = 0xfffffffffffffffe;\n    uStack24 = *0x1400d96f0 ^ auStack616;\n    *arg1 = vtable.CFile.0;\n    ppcStack560 = arg1;\n    if ((arg1[1] != 0xffffffffffffffff) && (*(arg1 + 2) != 0)) {\n        fcn.140028850(arg1, arg2);\n    }\n    pcVar3 = arg1[3];\n    LOCK();\n    piVar1 = pcVar3 + -8;\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 + -1 < 1) {\n        (**(**(pcVar3 + -0x18) + 8))();\n    }\n    fcn.140069870(uStack24 ^ auStack616);\n    return;\n}\n",
        "token_count": 266
    },
    "14002b11": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nbool fcn.14002b114(int32_t *arg1)\n\n{\n    return *arg1 != 2;\n}\n",
        "token_count": 27
    },
    "14002b3b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nbool fcn.14002b3b4(int64_t arg1, ulong arg2, uint64_t arg3, int32_t *arg4)\n\n{\n    int64_t *piVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    ulong *arg2_00;\n    int64_t **ppiVar4;\n    bool bVar5;\n    ulong in_stack_00000028;\n    uint32_t in_stack_00000030;\n    ulong in_stack_00000038;\n    ulong in_stack_00000040;\n    uint in_stack_00000048;\n    int64_t **in_stack_00000068;\n    uint64_t uVar6;\n    int64_t *piStack72;\n    ulong uStack64;\n    \n    uStack64 = 0xfffffffffffffffe;\n    piStack72 = NULL;\n    uVar6 = arg3;\n    iVar2 = (**(**(arg1 + 0x40) + 0x260))(*(arg1 + 0x40), arg1, &piStack72, in_stack_00000048, arg3);\n    if ((iVar2 != 0) && (piStack72 == NULL)) {\n        iVar3 = fcn.140017ad4();\n        if (*(iVar3 + 0x68) == 0) {\n            fcn.140020780();\n        }\n        iVar3 = fcn.140017ad4();\n        piStack72 = (**(**(iVar3 + 0x68) + 0x18))(*(iVar3 + 0x68), arg1, arg4);\n    }\n    if (piStack72 == NULL) {\n        bVar5 = false;\n    }\n    else {\n        if (*arg4 == 2) {\n            iVar2 = (**(*piStack72 + 0xa0))\n                              (piStack72, arg2, arg3, in_stack_00000028, uVar6 & 0xffffffff00000000 | in_stack_00000030\n                               , in_stack_00000038, in_stack_00000040);\n        }\n        else {\n            iVar2 = fcn.14002d1f4(piStack72, arg2, arg4, in_stack_00000030);\n        }\n        bVar5 = -1 < iVar2;\n        if (bVar5) {\n            arg2_00 = fcn.140003694(0x18);\n            if (arg2_00 == NULL) {\n                arg2_00 = NULL;\n            }\n            else {\n                *arg2_00 = 0;\n                arg2_00[1] = piStack72;\n                *(arg2_00 + 2) = 0;\n            }\n            fcn.14003afa8(arg1 + 0x80, arg2_00);\n            piVar1 = piStack72;\n            if (piStack72[9] != 0) {\n                ppiVar4 = fcn.14003a6a4(arg1 + 0x48, piStack72[9]);\n                *ppiVar4 = piVar1;\n            }\n            if (in_stack_00000068 != NULL) {\n                *in_stack_00000068 = piStack72;\n            }\n        }\n        else if (piStack72 != NULL) {\n            (**(*piStack72 + 8))(piStack72, 1);\n        }\n    }\n    return bVar5;\n}\n",
        "token_count": 735
    },
    "14002b9c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.14002b9c8(code **arg1)\n\n{\n    ulong *puVar1;\n    int64_t *piVar2;\n    code *pcVar3;\n    ulong *arg2;\n    int32_t iVar4;\n    int64_t iVar5;\n    ulong in_R9;\n    int64_t *piStackX16;\n    ulong uVar6;\n    \n    uVar6 = 0xfffffffffffffffe;\n    *arg1 = vtable.COleControlContainer.0;\n    puVar1 = arg1[0x11];\n    while( true ) {\n        arg2 = puVar1;\n        if (arg2 == NULL) {\n            pcVar3 = arg1[0x13];\n            while (pcVar3 != NULL) {\n                iVar5 = fcn.14003ad94(arg1 + 0x10);\n                if (iVar5 != 0) {\n                    piVar2 = *(iVar5 + 8);\n                    if (piVar2 != NULL) {\n                        (**(*piVar2 + 8))(piVar2, 1, *piVar2, in_R9, uVar6);\n                    }\n                    fcn.1400036d8(iVar5);\n                }\n                pcVar3 = arg1[0x13];\n            }\n            fcn.14003a3c8(arg1 + 9);\n            fcn.14003a77c(arg1 + 0x18);\n            if (0 < *(arg1 + 1)) {\n                piStackX16 = NULL;\n                iVar4 = fcn.14003aabc(arg1, 0x1400b6098, &piStackX16);\n                if (-1 < iVar4) {\n                    fcn.14003a7a4(piStackX16);\n                }\n                if (piStackX16 != NULL) {\n                    (**(*piStackX16 + 0x10))();\n                }\n            }\n            fcn.14003aed0(arg1 + 0x10);\n            fcn.14003a628(arg1 + 9);\n            if (arg1[4] != NULL) {\n                (**(arg1[4] + 0x38))();\n            }\n            arg1[7] = NULL;\n            return;\n        }\n        if (arg2 == NULL) break;\n        puVar1 = *arg2;\n        iVar5 = arg2[2];\n        if (((iVar5 != 0) && (*(iVar5 + 8) != 0)) && (*(*(iVar5 + 8) + 0xd8) == 0)) {\n            fcn.14003ae14(arg1 + 0x10, arg2);\n            piVar2 = *(iVar5 + 8);\n            if (piVar2 != NULL) {\n                (**(*piVar2 + 8))(piVar2, 1);\n            }\n            fcn.1400036d8(iVar5);\n        }\n    }\n    fcn.140020780();\n    pcVar3 = swi(3);\n    (*pcVar3)();\n    return;\n}\n",
        "token_count": 662
    },
    "14002c6e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.14002c6e4(int64_t arg1, code **arg2)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    ulong arg2_00;\n    uchar auStack232 [32];\n    code *pcStack200;\n    int64_t iStack192;\n    int64_t iStack184;\n    uint auStack176 [2];\n    int64_t iStack168;\n    int32_t iStack160;\n    uint uStack156;\n    ushort uStack152;\n    uint16_t uStack150;\n    uint32_t uStack148;\n    uint32_t uStack144;\n    uint32_t uStack140;\n    ulong uStack136;\n    uchar auStack128 [16];\n    ulong uStack112;\n    int32_t aiStack88 [4];\n    ushort uStack72;\n    uint8_t uStack68;\n    uint8_t uStack67;\n    uint8_t uStack66;\n    uint8_t uStack65;\n    uchar auStack60 [36];\n    uint64_t uStack24;\n    \n    uStack136 = 0xfffffffffffffffe;\n    uStack24 = *0x1400d96f0 ^ auStack232;\n    iStack192 = 0;\n    pcStack200 = vtable.CFont.0;\n    if ((arg2 == NULL) || (arg2[1] == NULL)) {\n        iStack192 = (*_sym.imp.GDI32.dll_GetStockObject)(0x11);\n        if (iStack192 == 0) {\n            iStack192 = (*_sym.imp.GDI32.dll_GetStockObject)(0xd);\n            if (iStack192 == 0) {\n                *(arg1 + 0xc0) = 0;\n                pcStack200 = vtable.CFont.0;\n                fcn.140019c30(&pcStack200);\n                goto code_r0x00014002c8a8;\n            }\n        }\n        arg2 = &pcStack200;\n    }\n    (*_sym.imp.GDI32.dll_GetObjectA)(arg2[1], 0x3c, aiStack88);\n    auStack176[0] = 0x28;\n    fcn.14002010c(&iStack184, auStack60);\n    iStack168 = iStack184;\n    uStack152 = uStack72;\n    uStack150 = uStack65;\n    uStack148 = uStack68;\n    uStack144 = uStack67;\n    uStack140 = uStack66;\n    if (aiStack88[0] < 0) {\n        aiStack88[0] = -aiStack88[0];\n    }\n    fcn.14001be84(auStack128, *(arg1 + 0x40));\n    iStack160 = (*_sym.imp.GDI32.dll_GetDeviceCaps)(uStack112);\n    iStack160 = (aiStack88[0] * 720000) / iStack160;\n    uStack156 = 0;\n    fcn.14003a77c(arg1 + 0xc0);\n    arg2_00 = 0x1400b6938;\n    iVar2 = (*_sym.imp.OLEAUT32.dll_OleTranslateColor)(auStack176, 0x1400b6938, arg1 + 0xc0);\n    if (iVar2 < 0) {\n        *(arg1 + 0xc0) = 0;\n    }\n    fcn.14001bee8(auStack128, arg2_00);\n    LOCK();\n    piVar1 = iStack184 + -8;\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 + -1 < 1) {\n        (**(**(iStack184 + -0x18) + 8))();\n    }\n    pcStack200 = vtable.CFont.0;\n    fcn.140019c30(&pcStack200);\ncode_r0x00014002c8a8:\n    fcn.140069870(uStack24 ^ auStack232);\n    return;\n}\n",
        "token_count": 888
    },
    "14002cc5": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.14002cc5c(int64_t *arg1, ulong arg2)\n\n{\n    ulong uVar1;\n    int64_t iVar2;\n    \n    *arg1 = 0;\n    uVar1 = SUB168(ZEXT816(0x10) * ZEXT816(arg2), 0);\n    if (SUB168(ZEXT816(0x10) * ZEXT816(arg2) >> 0x40, 0) != 0) {\n        uVar1 = 0xffffffffffffffff;\n    }\n    iVar2 = fcn.140003694(uVar1);\n    *arg1 = iVar2;\n    if (*arg1 == 0) {\n        uVar1 = 0x8007000e;\n    }\n    else {\n        *(arg1 + 1) = arg2;\n        uVar1 = 0;\n    }\n    return uVar1;\n}\n",
        "token_count": 194
    },
    "14002d07": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.14002d074(int64_t arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    ulong uVar1;\n    \n    *(arg1 + 0x10) = arg3;\n    *(arg1 + 0x30) = arg4;\n    *(arg1 + 0x20) = 0;\n    *(arg1 + 0x28) = 0;\n    fcn.1400698a0(arg3, 0, arg4);\n    fcn.1400036d8(*(arg1 + 0x18));\n    *(arg1 + 0x18) = 0;\n    uVar1 = SUB168(ZEXT816(0x58) * ZEXT816(arg2), 0);\n    if (SUB168(ZEXT816(0x58) * ZEXT816(arg2) >> 0x40, 0) != 0) {\n        uVar1 = 0xffffffffffffffff;\n    }\n    uVar1 = fcn.140003694(uVar1);\n    *(arg1 + 0x18) = uVar1;\n    if (*(arg1 + 0x18) == 0) {\n        uVar1 = 0x8007000e;\n    }\n    else {\n        *(arg1 + 0x20) = arg2;\n        uVar1 = 0;\n    }\n    return uVar1;\n}\n",
        "token_count": 307
    },
    "14002d3f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint fcn.14002d3f8(int64_t arg1, ulong arg2, ulong arg3)\n\n{\n    int32_t iVar1;\n    uint auStackX8 [2];\n    int64_t *piStackX32;\n    int64_t *apiStack24 [2];\n    \n    if ((*(arg1 + 0x80) != 0) && (iVar1 = (****(arg1 + 0x80))(*(arg1 + 0x80), 0x1400b67f8, apiStack24),  -1 < iVar1)) {\n        piStackX32 = NULL;\n        auStackX8[0] = 0;\n        iVar1 = (**(*apiStack24[0] + 0x20))(apiStack24[0], arg2, &piStackX32);\n        if (-1 < iVar1) {\n            (**(*piStackX32 + 0x28))(piStackX32, arg3, auStackX8);\n            (**(*piStackX32 + 0x10))();\n        }\n        (**(*apiStack24[0] + 0x10))();\n        return auStackX8[0];\n    }\n    return 0;\n}\n",
        "token_count": 264
    },
    "14002d48": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.14002d48c(int64_t arg1, ulong arg2, ulong arg3)\n\n{\n    int32_t iVar1;\n    int64_t *piStackX32;\n    int64_t *apiStack24 [2];\n    \n    if (((arg3 != 0) && (*(arg1 + 0x80) != 0)) &&\n       (iVar1 = (****(arg1 + 0x80))(*(arg1 + 0x80), 0x1400b67f8, apiStack24),  -1 < iVar1)) {\n        piStackX32 = NULL;\n        iVar1 = (**(*apiStack24[0] + 0x20))(apiStack24[0], arg2, &piStackX32);\n        if (-1 < iVar1) {\n            (**(*piStackX32 + 0x30))(piStackX32, arg3);\n            (**(*piStackX32 + 0x10))();\n        }\n        (**(*apiStack24[0] + 0x10))();\n    }\n    return;\n}\n",
        "token_count": 234
    },
    "14002d51": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nbool fcn.14002d518(int64_t arg1, ulong *arg2)\n\n{\n    ulong uVar1;\n    ulong uVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    bool bVar5;\n    uint auStackX8 [2];\n    uint auStackX16 [2];\n    int64_t *piStackX24;\n    int64_t *piStackX32;\n    int64_t *piStack56;\n    int64_t iStack48;\n    int64_t *piStack40;\n    ulong *puStack32;\n    \n    uVar2 = *0x1400b54c0;\n    uVar1 = *0x1400b54b8;\n    uVar4 = 0;\n    piStack56 = NULL;\n    *arg2 = *0x1400b54b8;\n    arg2[1] = uVar2;\n    iVar3 = (****(arg1 + 0x80))(uVar1, *(arg1 + 0x80), 0x1400b6828, &piStack56);\n    if (-1 < iVar3) {\n        (**(*piStack56 + 0x20))(piStack56, 1, arg2);\n        (**(*piStack56 + 0x10))();\n    }\n    piStack40 = NULL;\n    iVar3 = fcn.14006af20(arg2, 0x1400b54b8, 0x10);\n    if (iVar3 == 0) {\n        iVar3 = (****(arg1 + 0x80))(*(arg1 + 0x80), 0x1400b6818, &piStack40);\n        if (-1 < iVar3) {\n            piStackX24 = NULL;\n            iVar3 = (**(*piStack40 + 0x18))(piStack40, &piStackX24);\n            if (-1 < iVar3) {\n                iVar3 = (**(*piStackX24 + 0x18))(piStackX24, &iStack48);\n                if (-1 < iVar3) {\n                    bVar5 = *(iStack48 + 0x34) != 0;\n                    while (bVar5) {\n                        iVar3 = (**(*piStackX24 + 0x48))(piStackX24, uVar4, auStackX8);\n                        if ((-1 < iVar3) && ((auStackX8[0] & 7) == 3)) {\n                            piStackX32 = NULL;\n                            iVar3 = (**(*piStackX24 + 0x40))(piStackX24, uVar4, auStackX16);\n                            if (-1 < iVar3) {\n                                iVar3 = (**(*piStackX24 + 0x70))(piStackX24, auStackX16[0], &piStackX32);\n                                if (-1 < iVar3) {\n                                    iVar3 = (**(*piStackX32 + 0x18))(piStackX32, &puStack32);\n                                    if (-1 < iVar3) {\n                                        uVar1 = *puStack32;\n                                        uVar2 = puStack32[1];\n                                        *arg2 = uVar1;\n                                        arg2[1] = uVar2;\n                                        (**(*piStackX32 + 0x98))(uVar1);\n                                    }\n                                    (**(*piStackX32 + 0x10))();\n                                }\n                            }\n                            break;\n                        }\n                        uVar4 = uVar4 + 1;\n                        bVar5 = uVar4 < *(iStack48 + 0x34);\n                    }\n                    (**(*piStackX24 + 0x98))(piStackX24, iStack48);\n                }\n                (**(*piStackX24 + 0x10))();\n            }\n            (**(*piStack40 + 0x10))();\n        }\n    }\n    iVar3 = fcn.14006af20(arg2, 0x1400b54b8, 0x10);\n    return iVar3 != 0;\n}\n",
        "token_count": 875
    },
    "14002d84": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.14002d848(int64_t *arg1, ulong arg2)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int64_t *piStackX8;\n    \n    if ((*(arg1 + 0x16) >> 0xe & 1) == 0) {\n        (**(*arg1 + 0x160))();\n    }\n    piStackX8 = NULL;\n    if (arg1[0x10] == 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    iVar2 = (***arg1[0x10])(arg1[0x10], 0x1400b6848, &piStackX8);\n    if (-1 < iVar2) {\n        if (piStackX8 == NULL) {\n            fcn.140020780();\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        (**(*piStackX8 + 0x20))(piStackX8, arg2);\n        (**(*piStackX8 + 0x10))();\n    }\n    return;\n}\n",
        "token_count": 262
    },
    "14002d8c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.14002d8cc(int64_t arg1, ulong arg2)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int64_t *apiStackX8 [4];\n    \n    if (*(arg1 + 0x80) == 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    apiStackX8[0] = NULL;\n    iVar2 = (****(arg1 + 0x80))(*(arg1 + 0x80), 0x1400b6848, apiStackX8);\n    if (-1 < iVar2) {\n        if (apiStackX8[0] == NULL) {\n            fcn.140020780();\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        (**(*apiStackX8[0] + 0x30))(apiStackX8[0], arg2);\n        (**(*apiStackX8[0] + 0x10))();\n    }\n    return;\n}\n",
        "token_count": 243
    },
    "14002d99": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.14002d990(int64_t arg1)\n\n{\n    int32_t iVar1;\n    int64_t *piVar2;\n    \n    *(arg1 + 0x48) = 0;\n    piVar2 = *(arg1 + 0x50);\n    if (piVar2 != NULL) {\n        if (piVar2[8] != 0) {\n            piVar2 = (**(*piVar2 + 0x1f0))();\n            iVar1 = (*_sym.imp.USER32.dll_IsWindow)(*(*(arg1 + 0x50) + 0x40));\n            if ((iVar1 != 0) && (*piVar2 != 0)) {\n                fcn.14001080c(*(arg1 + 0x50));\n            }\n            fcn.14000fcd8(*(arg1 + 0x50));\n        }\n        *(*(arg1 + 0x50) + 0xa0) = 0;\n    }\n    return;\n}\n",
        "token_count": 218
    },
    "14002da0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.14002da00(int64_t psa, ulong arg2)\n\n{\n    int64_t iVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    ulong uVar4;\n    \n    if ((*(psa + 0x50) != 0) &&\n       (iVar3 = (**(**(psa + 0x50) + 0x18))(*(psa + 0x50), *(psa + 0x58), 0xfffffffe, arg2, 0),  iVar3 != 0)) {\n        return 1;\n    }\n    iVar1 = *(psa + 0x40);\n    if ((iVar1 != 0) && (*(iVar1 + 0x40) != 0)) {\n        uVar4 = (**(**(iVar1 + 0x40) + 0x18))(*(iVar1 + 0x40), *(psa + 0x58), 0xfffffffe, arg2, 0);\n        return uVar4;\n    }\n    fcn.140020780();\n    pcVar2 = swi(3);\n    uVar4 = (*pcVar2)();\n    return uVar4;\n}\n",
        "token_count": 262
    },
    "14002e57": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nulong fcn.14002e578(ulong noname_0, uint *arg2, uint *arg3)\n\n{\n    uint64_t arg2_00;\n    int32_t iVar1;\n    uint64_t uVar2;\n    uint uVar3;\n    uint uVar4;\n    uint uVar5;\n    int64_t iVar6;\n    ulong uVar7;\n    \n    arg2[4] = arg3[4];\n    iVar1 = arg3[4];\n    if (iVar1 == 0) {\n        uVar3 = arg3[1];\n        uVar4 = arg3[2];\n        uVar5 = arg3[3];\n        *arg2 = *arg3;\n        arg2[1] = uVar3;\n        arg2[2] = uVar4;\n        arg2[3] = uVar5;\ncode_r0x00014002e5c3:\n        iVar6 = fcn.14006bd0c(*(arg3 + 6));\n        arg2_00 = iVar6 + 1;\n        if (arg2_00 < 0x100000000) {\n            uVar2 = (arg2_00 & 0xffffffff) * 2;\n            if (uVar2 < 0x100000000) {\n                iVar6 = (*_sym.imp.ole32.dll_CoTaskMemAlloc)(uVar2 & 0xffffffff);\n            }\n            else {\n                iVar6 = 0;\n            }\n            *(arg2 + 6) = iVar6;\n            if (iVar6 != 0) {\n                fcn.14006bd28(iVar6, arg2_00, *(arg3 + 6));\n                goto code_r0x00014002e60c;\n            }\n        }\n        uVar7 = 0;\n    }\n    else {\n        if (iVar1 == 1) {\n            uVar3 = arg3[1];\n            uVar4 = arg3[2];\n            uVar5 = arg3[3];\n            *arg2 = *arg3;\n            arg2[1] = uVar3;\n            arg2[2] = uVar4;\n            arg2[3] = uVar5;\n            arg2[6] = arg3[6];\n        }\n        else if (iVar1 == 2) goto code_r0x00014002e5c3;\ncode_r0x00014002e60c:\n        uVar7 = 1;\n    }\n    return uVar7;\n}\n",
        "token_count": 542
    },
    "14002e6a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.14002e6ac(int64_t arg1)\n\n{\n    int64_t *piVar1;\n    ulong uVar2;\n    \n    if (*(arg1 + 0x10) == 0) {\n        uVar2 = 0;\n    }\n    else {\n        (**(**(arg1 + 0x10) + 0x168))();\n        piVar1 = *(*(arg1 + 0x10) + 0xd8);\n        (**(*piVar1 + 8))(piVar1, arg1, 1);\n        uVar2 = (****(*(arg1 + 0x10) + 0xd8))();\n    }\n    return uVar2;\n}\n",
        "token_count": 154
    },
    "140052d7": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140052d78(int64_t **arg1)\n\n{\n    if (*arg1 != NULL) {\n        if (*(arg1 + 1) != 0) {\n            (**(**arg1 + 0x10))();\n        }\n        *arg1 = NULL;\n    }\n    return;\n}\n",
        "token_count": 67
    },
    "14002f04": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.14002f040(int64_t arg1, uint64_t arg2, ushort *arg3)\n\n{\n    uint64_t *puVar1;\n    int64_t iVar2;\n    uint32_t uVar3;\n    \n    if (*(arg1 + 0x38) == '\\0') {\n        iVar2 = *(arg1 + 0x28);\n        if (arg2 <= *(arg1 + 0x18) + -1 + *(iVar2 + 0x10)) {\n            arg2 = arg2 - *(iVar2 + 0x10);\ncode_r0x00014002f09c:\n            if (arg3 != NULL) {\n                *arg3 = *(iVar2 + 0x28 + arg2 * 0x50);\n                return 1;\n            }\n        }\n    }\n    else {\n        uVar3 = 0;\n        if (*(arg1 + 0x18) != 0) {\n            iVar2 = *(arg1 + 0x28);\n            puVar1 = iVar2 + 0x10;\n            do {\n                if (*puVar1 == arg2) {\n                    arg2 = uVar3;\n                    goto code_r0x00014002f09c;\n                }\n                uVar3 = uVar3 + 1;\n                puVar1 = puVar1 + 10;\n            } while (uVar3 < *(arg1 + 0x18));\n        }\n    }\n    return 0;\n}\n",
        "token_count": 320
    },
    "1400314d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint64_t fcn.1400314dc(int64_t **arg1)\n\n{\n    uint32_t uVar1;\n    int64_t *piVar2;\n    uint64_t uVar3;\n    uint64_t uVar4;\n    uint32_t uVar5;\n    int64_t iVar6;\n    ulong uVar7;\n    \n    uVar4 = 0;\n    uVar5 = 0;\n    uVar1 = *(arg1[2] + 1);\n    if (uVar1 != 0) {\n        iVar6 = 0;\n        do {\n            piVar2 = arg1[2];\n            if (((uVar5 < *(piVar2 + 1)) && (*piVar2 != 0)) && (*(iVar6 + 8 + *piVar2) != '\\0')) {\n                if (uVar5 < *(piVar2 + 1)) {\n                    uVar7 = *(iVar6 + *piVar2);\n                }\n                else {\n                    uVar7 = 0;\n                }\n                uVar3 = (**(**arg1 + 0x20))(*arg1, arg1[3], uVar7, piVar2[2]);\n                uVar4 = uVar3 & 0xffffffff;\n                if (uVar3 < 0) {\n                    return uVar3;\n                }\n            }\n            uVar5 = uVar5 + 1;\n            iVar6 = iVar6 + 0x10;\n        } while (uVar5 < uVar1);\n    }\n    return uVar4;\n}\n",
        "token_count": 336
    },
    "14003161": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint64_t fcn.140031618(int64_t **arg1, ulong arg2, ulong noname_2, ulong arg4)\n\n{\n    int64_t **ppiVar1;\n    uint32_t uVar2;\n    uint64_t uVar3;\n    int64_t **ppiStackX8;\n    ulong uStackX32;\n    \n    uStackX32 = 0;\n    ppiVar1 = arg1 + 3;\n    if (*ppiVar1 != NULL) {\n        (**(**arg1 + 0x30))(*arg1, 1, ppiVar1, 0, 0, 0);\n        *ppiVar1 = NULL;\n    }\n    ppiStackX8 = ppiVar1;\n    uVar3 = (**(**arg1 + 0x28))(*arg1, 0, arg2, (-(noname_2 != '\\0') & 2) - 1, &uStackX32, &ppiStackX8);\n    if (uVar3 == 0) {\n        uVar2 = fcn.1400314dc(arg1);\n        uVar3 = uVar2;\n        if ((uVar2 < 0) && (*ppiVar1 != NULL)) {\n            (**(**arg1 + 0x30))(*arg1, 1, ppiVar1, 0, 0, 0);\n            *ppiVar1 = NULL;\n        }\n    }\n    return uVar3;\n}\n",
        "token_count": 322
    },
    "140031e6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t fcn.140031e64(int64_t *arg1, ulong *arg2)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    uint32_t uVar3;\n    int64_t *piStackX16;\n    \n    if (arg2 == NULL) {\ncode_r0x000140031e83:\n        iVar1 = -0x7fffbffb;\n    }\n    else {\n        if (*(arg1 + 1) == 0) {\n            return 0;\n        }\n        piStackX16 = NULL;\n        iVar1 = (***arg2)(arg2, 0x1400a6598, &piStackX16);\n        if (-1 < iVar1) {\n            if (*arg1 == 0) {\n                if (piStackX16 != NULL) {\n                    (**(*piStackX16 + 0x10))();\n                }\n                goto code_r0x000140031e83;\n            }\n            uVar3 = 0;\n            if (*(arg1 + 1) != 0) {\n                iVar2 = 0;\n                do {\n                    (**(*piStackX16 + 0x30))(piStackX16, *(*arg1 + iVar2), 0);\n                    uVar3 = uVar3 + 1;\n                    iVar2 = iVar2 + 0x10;\n                } while (uVar3 < *(arg1 + 1));\n            }\n        }\n        *(arg1 + 1) = 0;\n        fcn.1400036d8(*arg1);\n        *arg1 = 0;\n        if (piStackX16 != NULL) {\n            (**(*piStackX16 + 0x10))();\n        }\n    }\n    return iVar1;\n}\n",
        "token_count": 380
    },
    "14003200": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t fcn.140032004(int64_t *arg1, ulong *arg2)\n\n{\n    int32_t iVar1;\n    int64_t *apiStackX16 [3];\n    \n    if (arg2 == NULL) {\n        return -0x7fffbffb;\n    }\n    apiStackX16[0] = NULL;\n    iVar1 = (***arg2)(arg2, 0x1400a6598, apiStackX16);\n    if (iVar1 < 0) {\ncode_r0x000140032043:\n        if (apiStackX16[0] != NULL) {\n            (**(*apiStackX16[0] + 0x10))();\n        }\n    }\n    else {\n        if (*arg1 == 0) {\n            iVar1 = fcn.14002cc5c(arg1, 1);\n            if (iVar1 < 0) goto code_r0x000140032043;\n            *(*arg1 + 8) = 1;\n        }\n        iVar1 = fcn.14002ccc8(arg1[3], arg1[4], *arg1, arg1[6]);\n        if (apiStackX16[0] != NULL) {\n            (**(*apiStackX16[0] + 0x10))();\n        }\n    }\n    return iVar1;\n}\n",
        "token_count": 290
    },
    "140032bb": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "log keystrokes via raw input data/18af53aa16f24c3fa3538f182ae5df5a"
        ],
        "decompiled_code": "\nvoid fcn.140032bbc(int64_t arg1, ulong arg2)\n\n{\n    uint16_t uVar1;\n    int64_t iVar2;\n    uint64_t uVar3;\n    int64_t *piVar4;\n    int64_t iVar5;\n    \n    uVar3 = 0;\n    if (*(arg1 + 0x18) != 0) {\n        iVar5 = 0;\n        do {\n            if ((*(arg1 + 0x20) == 0) || (*(*(arg1 + 0x20) + uVar3) != '\\x01')) {\n                iVar2 = *(arg1 + 0x28);\n                if ((*(iVar2 + 0x28 + iVar5) == 0xd) || (*(iVar2 + 0x28 + iVar5) == 9)) {\n                    if (*((*(iVar2 + 0x20 + iVar5) + 7 + *(iVar2 + 8 + iVar5) & 0xfffffffffffffff8U) + 8 +\n                         *(arg1 + 0x10)) != 0) goto code_r0x000140032caf;\n                    uVar1 = *(*(arg1 + 0x28) + 0x28 + iVar5);\n                    iVar2 = *(arg1 + 0x10) + *(*(arg1 + 0x28) + 8 + iVar5);\n                }\n                else {\n                    uVar1 = *(iVar2 + 0x28 + iVar5);\n                    iVar2 = *(iVar2 + 8 + iVar5) + *(arg1 + 0x10);\n                }\n                fcn.140032ac4(uVar1, iVar2, arg2);\n            }\n            else if (((*((*(*(arg1 + 0x28) + 0x20 + iVar5) + 7 + *(*(arg1 + 0x28) + 8 + iVar5) & 0xfffffffffffffff8U) +\n                         8 + *(arg1 + 0x10)) != 3) &&\n                     (piVar4 = *(*(arg1 + 0x28) + 8 + iVar5) + *(arg1 + 0x10),  piVar4 != NULL)) && (*piVar4 != 0)) {\n                (*_sym.imp.ole32.dll_CoTaskMemFree)(*piVar4);\n                *piVar4 = 0;\n            }\ncode_r0x000140032caf:\n            uVar3 = uVar3 + 1;\n            iVar5 = iVar5 + 0x50;\n        } while (uVar3 < *(arg1 + 0x18));\n    }\n    return;\n}\n",
        "token_count": 578
    },
    "14003328": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.14003328c(int64_t *arg1, ulong *arg2)\n\n{\n    uint64_t *puVar1;\n    uint16_t *puVar2;\n    int64_t *piVar3;\n    uchar uVar4;\n    uchar uVar5;\n    uint8_t uVar6;\n    int64_t iVar7;\n    code *pcVar8;\n    ulong uVar9;\n    int32_t iVar10;\n    uint32_t uVar11;\n    ulong uVar12;\n    int64_t *arg1_00;\n    int64_t iVar13;\n    uint64_t uVar14;\n    uint64_t uVar15;\n    uint64_t uVar16;\n    int64_t *piVar17;\n    uint64_t arg1_01;\n    uchar auStack344 [32];\n    ulong uStack312;\n    uchar uStack304;\n    uint uStack296;\n    uint64_t uStack288;\n    uint64_t uStack280;\n    int64_t iStack272;\n    uint *puStack264;\n    char cStack248;\n    uint16_t uStack246;\n    uint *puStack240;\n    uint32_t uStack232;\n    int64_t *piStack224;\n    int64_t *piStack216;\n    uint64_t uStack208;\n    ulong *puStack200;\n    int64_t *piStack192;\n    uint *puStack184;\n    ushort uStack176;\n    int64_t *piStack168;\n    uint64_t uStack160;\n    int64_t *piStack152;\n    ulong *puStack144;\n    int32_t iStack136;\n    int32_t iStack132;\n    uint uStack128;\n    uint uStack124;\n    ulong uStack120;\n    ulong uStack72;\n    ulong uStack64;\n    uint64_t uStack56;\n    \n    uStack120 = 0xfffffffffffffffe;\n    uStack56 = *0x1400d96f0 ^ auStack344;\n    uStack72 = CONCAT44(*0x1400a693c, *0x1400a6938);\n    uStack64 = CONCAT44(*0x1400a6944, *0x1400a6940);\n    uVar14 = 0;\n    cStack248 = '\\0';\n    puStack200 = arg2;\n    piStack168 = arg1;\n    puStack144 = arg2;\n    if (arg2 != NULL) {\n        piStack224 = NULL;\n        iVar10 = (***arg2)(uStack72, arg2, 0x1400a6598);\n        if (iVar10 < 0) {\n            if (piStack224 != NULL) {\n                (**(*piStack224 + 0x10))();\n            }\n        }\n        else {\n            uStack208 = 0;\n            if (arg1[5] == 0) {\n                piStack216 = NULL;\n                iVar10 = (***arg2)(arg2, 0x1400a6578, &piStack216);\n                if (iVar10 < 0) {\n                    if (piStack216 != NULL) {\n                        (**(*piStack216 + 0x10))();\n                    }\n                    if (piStack224 != NULL) {\n                        (**(*piStack224 + 0x10))();\n                    }\n                    goto code_r0x000140033def;\n                }\n                iVar10 = (**(*piStack216 + 0x18))(piStack216, arg1 + 3, arg1 + 5, arg1 + 6);\n                if (iVar10 < 0) {\n                    if (piStack216 != NULL) {\n                        (**(*piStack216 + 0x10))();\n                    }\n                    if (piStack224 != NULL) {\n                        (**(*piStack224 + 0x10))();\n                    }\n                    goto code_r0x000140033def;\n                }\n                *(arg1 + 7) = 0;\n                if (piStack216 != NULL) {\n                    (**(*piStack216 + 0x10))();\n                }\n            }\n            else {\n                *(arg1 + 7) = 1;\n            }\n            piStack216 = NULL;\n            uVar12 = SUB168(ZEXT816(0x58) * ZEXT816(arg1[3]), 0);\n            if (SUB168(ZEXT816(0x58) * ZEXT816(arg1[3]) >> 0x40, 0) != 0) {\n                uVar12 = 0xffffffffffffffff;\n            }\n            arg1_00 = fcn.140003694(uVar12);\n            piStack216 = arg1_00;\n            if (arg1_00 == NULL) {\n                if (piStack224 != NULL) {\n                    (**(*piStack224 + 0x10))();\n                }\n            }\n            else {\n                piStack152 = arg1_00;\n                iVar13 = fcn.140003694(arg1[3]);\n                arg1[4] = iVar13;\n                if (arg1[4] == 0) {\n                    fcn.1400036d8(arg1_00);\n                    if (piStack224 != NULL) {\n                        (**(*piStack224 + 0x10))();\n                    }\n                }\n                else {\n                    uStack232 = 0;\n                    uVar15 = uVar14;\n                    arg1_01 = uVar14;\n                    piStack192 = arg1_00;\n                    while (piVar17 = piStack192,  uVar15 < arg1[3]) {\n                        *(uVar15 + arg1[4]) = 0;\n                        puStack240 = uVar15 * 0x50;\n                        iVar13 = arg1[5];\n                        puVar1 = puStack240 + iVar13 + 0x20;\n                        if ((*puVar1 < arg1[8] || *puVar1 == arg1[8]) || (*(puStack240 + iVar13 + 0x28) == 0xd)) {\n                            if (*(puStack240 + iVar13 + 0x28) == 0xd) {\n                                puStack240 = NULL;\n                                puStack184 = fcn.140003694(0x14);\n                                if (puStack184 == NULL) {\n                                    uVar14 = uStack232;\n                                    puStack240 = puStack184;\n                                    if (uStack232 != 0) {\n                                        piVar17 = arg1_00 + 5;\n                                        do {\n                                            fcn.1400036d8(*piVar17);\n                                            piVar17 = piVar17 + 0xb;\n                                            uVar14 = uVar14 - 1;\n                                        } while (uVar14 != 0);\n                                    }\n                                    fcn.1400036d8(arg1[4]);\n                                    arg1[4] = 0;\n                                    fcn.1400036d8(arg1_00);\n                                    if (piStack224 != NULL) {\n                                        (**(*piStack224 + 0x10))();\n                                    }\n                                    goto code_r0x000140033def;\n                                }\n                                *puStack184 = 0;\n                                uVar9 = *0x1400a6920;\n                                uVar12 = *0x1400a6918;\n                                *(puStack184 + 1) = *0x1400a6918;\n                                *(puStack184 + 3) = uVar9;\n                                puStack240 = uStack232 * 0x50;\n                                *(puStack240 + arg1[5] + 0x28) = 0xd;\n                                *(puStack240 + arg1[5] + 0x20) = 8;\n                                iVar13 = arg1[5];\n                                uVar11 = fcn.14002ce50(uVar12);\n                                uStack288 = (uVar11 - 1) + arg1_01 & ~(uVar11 - 1);\n                                iVar7 = *(puStack240 + iVar13 + 0x20);\n                                uStack280 = iVar7 + 7 + uStack288 & 0xfffffffffffffff8;\n                                iStack272 = uStack280 + 8;\n                                arg1_01 = uStack280 + 0xc;\n                                puStack264 = puStack184;\n                                uStack296 = 0;\n                                uStack304 = *(puStack240 + iVar13 + 0x2b);\n                                uStack312 = uStack312 & 0xffffffffffffff00 | *(puStack240 + iVar13 + 0x2a);\n                                uStack208 = arg1_01;\n                                uStack160 = uStack288;\n                                fcn.14002ef1c(piVar17, *(puStack240 + iVar13 + 0x10), *(puStack240 + iVar13 + 0x28), \n                                              iVar7);\n                                uVar15 = uStack160;\n                            }\n                            else {\n                                if (*(puStack240 + iVar13 + 0x28) == 0x81) {\n                                    piVar3 = puStack240 + iVar13 + 0x20;\n                                    *piVar3 = *piVar3 + 1;\n                                }\n                                iVar13 = arg1[5];\n                                if (*(puStack240 + iVar13 + 0x28) == 0x82) {\n                                    *(puStack240 + iVar13 + 0x20) = *(puStack240 + iVar13 + 0x20) * 2 + 2;\n                                }\n                                iVar13 = arg1[5];\n                                uVar11 = fcn.14002ce50();\n                                uStack288 = (uVar11 - 1) + arg1_01 & ~(uVar11 - 1);\n                                iVar7 = *(puStack240 + iVar13 + 0x20);\n                                uStack280 = iVar7 + 7 + uStack288 & 0xfffffffffffffff8;\n                                iStack272 = uStack280 + 8;\n                                arg1_01 = uStack280 + 0xc;\n                                puStack264 = NULL;\n                                uStack296 = 0;\n                                uStack304 = *(puStack240 + iVar13 + 0x2b);\n                                uStack312 = uStack312 & 0xffffffffffffff00 | *(puStack240 + iVar13 + 0x2a);\n                                uStack208 = arg1_01;\n                                uStack160 = uStack288;\n                                fcn.14002ef1c(piVar17, *(puStack240 + iVar13 + 0x10), *(puStack240 + iVar13 + 0x28), \n                                              iVar7);\n                                uVar15 = uStack160;\n                            }\n                        }\n                        else if (*(arg1 + 0x3c) == 2) {\n                            uVar16 = arg1_01 + 7 & 0xfffffffffffffff8;\n                            arg1_01 = uVar16 + 0xc;\n                            *(puStack240 + iVar13 + 0x20) = 0;\n                            iVar13 = arg1[5];\n                            uVar4 = *(puStack240 + iVar13 + 0x2b);\n                            uVar5 = *(puStack240 + iVar13 + 0x2a);\n                            puStack184 = *(puStack240 + iVar13 + 0x20);\n                            uStack246 = *(puStack240 + iVar13 + 0x28);\n                            iVar13 = *(puStack240 + iVar13 + 0x10);\n                            uStack208 = arg1_01;\n                            if (piStack192 == NULL) {\n                                fcn.1400031e0(0x80004005);\n                                pcVar8 = swi(3);\n                                (*pcVar8)();\n                                return;\n                            }\n                            *(piStack192 + 0x3c) = 0;\n                            piStack192[5] = 0;\n                            *(piStack192 + 8) = 0;\n                            *piStack192 = iVar13;\n                            *(piStack192 + 0x54) = uStack246;\n                            *(piStack192 + 0x56) = uVar5;\n                            *(piStack192 + 0x57) = uVar4;\n                            *(piStack192 + 10) = 0;\n                            piStack192[1] = 0;\n                            piStack192[2] = 0;\n                            piStack192[3] = 0;\n                            piStack192[4] = 0;\n                            piStack192[6] = 0;\n                            piStack192[9] = puStack184;\n                            *(piStack192 + 7) = 0;\n                            if (uVar16 != 0) {\n                                *(piStack192 + 7) = 2;\n                                piStack192[2] = uVar16;\n                            }\n                            uVar15 = uVar14;\n                            if (uVar16 + 8 != 0) {\n                                *(piStack192 + 7) = *(piStack192 + 7) | 4;\n                                piStack192[3] = uVar16 + 8;\n                            }\n                        }\n                        else if (*(arg1 + 0x3c) == 1) {\n                            puVar2 = puStack240 + iVar13 + 0x28;\n                            *puVar2 = *puVar2 | 0x4000;\n                            *(puStack240 + arg1[5] + 0x20) = 8;\n                            *(uVar15 + arg1[4]) = 1;\n                            iVar13 = arg1[5];\n                            uStack176 = *(puStack240 + iVar13 + 0x28);\n                            uVar11 = fcn.14002ce50();\n                            uVar15 = (uVar11 - 1) + arg1_01 & ~(uVar11 - 1);\n                            iVar7 = *(puStack240 + iVar13 + 0x20);\n                            uVar16 = iVar7 + 7 + uVar15 & 0xfffffffffffffff8;\n                            arg1_01 = uVar16 + 0xc;\n                            uVar4 = *(puStack240 + iVar13 + 0x2b);\n                            uVar6 = *(puStack240 + iVar13 + 0x2a);\n                            uStack246 = uStack246 & 0xff00 | uVar6;\n                            iVar13 = *(puStack240 + iVar13 + 0x10);\n                            uStack208 = arg1_01;\n                            if (piVar17 == NULL) {\n                                fcn.1400031e0(0x80004005);\n                                pcVar8 = swi(3);\n                                (*pcVar8)();\n                                return;\n                            }\n                            *(piVar17 + 0x3c) = 0;\n                            piVar17[5] = 0;\n                            *(piVar17 + 8) = 0;\n                            *piVar17 = iVar13;\n                            *(piVar17 + 0x54) = uStack176;\n                            *(piVar17 + 0x56) = uVar6;\n                            *(piVar17 + 0x57) = uVar4;\n                            *(piVar17 + 10) = 0;\n                            piVar17[2] = 0;\n                            piVar17[3] = 0;\n                            piVar17[4] = 0;\n                            piVar17[6] = 0;\n                            piVar17[9] = iVar7;\n                            *(piVar17 + 7) = 1;\n                            piVar17[1] = uVar15;\n                            if (uVar16 != 0) {\n                                *(piVar17 + 7) = 3;\n                                piVar17[2] = uVar16;\n                            }\n                            if (uVar16 + 8 != 0) {\n                                *(piVar17 + 7) = *(piVar17 + 7) | 4;\n                                piVar17[3] = uVar16 + 8;\n                            }\n                        }\n                        else {\n                            if (cStack248 == '\\0') {\n                                uStack128 = 0x89;\n                                uStack124 = 0x8b;\n                                iStack136 = 0;\n                                iStack132 = 0;\n                                uStack312 = CONCAT44(uStack312._4_4_, 2);\n                                fcn.14003314c(arg1, arg2, &uStack128, &iStack136);\n                                if (iStack136 == 0) {\n                                    if (iStack132 != 0) {\n                                        uStack72 = CONCAT44(*0x1400a692c, *0x1400a6928);\n                                        uStack64 = CONCAT44(*0x1400a6934, *0x1400a6930);\n                                    }\n                                }\n                                else {\n                                    uStack72 = CONCAT44(*0x1400a693c, *0x1400a6938);\n                                    uStack64 = CONCAT44(*0x1400a6944, *0x1400a6940);\n                                }\n                                cStack248 = '\\x01';\n                            }\n                            puStack240 = NULL;\n                            puStack184 = fcn.140003694(0x14);\n                            if (puStack184 == NULL) {\n                                uVar14 = uStack232;\n                                puStack240 = puStack184;\n                                if (uStack232 != 0) {\n                                    piVar17 = arg1_00 + 5;\n                                    do {\n                                        fcn.1400036d8(*piVar17);\n                                        piVar17 = piVar17 + 0xb;\n                                        uVar14 = uVar14 - 1;\n                                    } while (uVar14 != 0);\n                                }\n                                fcn.1400036d8(arg1[4]);\n                                arg1[4] = 0;\n                                fcn.1400036d8(arg1_00);\n                                if (piStack224 != NULL) {\n                                    (**(*piStack224 + 0x10))();\n                                }\n                                goto code_r0x000140033def;\n                            }\n                            *puStack184 = 0;\n                            *(puStack184 + 1) = uStack72;\n                            *(puStack184 + 3) = uStack64;\n                            puStack240 = uStack232 * 0x50;\n                            *(puStack240 + arg1[5] + 0x28) = 0xd;\n                            *(puStack240 + arg1[5] + 0x20) = 8;\n                            iVar13 = arg1[5];\n                            uVar11 = fcn.14002ce50(uStack72);\n                            uStack288 = (uVar11 - 1) + arg1_01 & ~(uVar11 - 1);\n                            iVar7 = *(puStack240 + iVar13 + 0x20);\n                            uStack280 = iVar7 + 7 + uStack288 & 0xfffffffffffffff8;\n                            iStack272 = uStack280 + 8;\n                            arg1_01 = uStack280 + 0xc;\n                            puStack264 = puStack184;\n                            uStack296 = 0;\n                            uStack304 = *(puStack240 + iVar13 + 0x2b);\n                            uStack312 = uStack312 & 0xffffffffffffff00 | *(puStack240 + iVar13 + 0x2a);\n                            uStack208 = arg1_01;\n                            uStack160 = uStack288;\n                            fcn.14002ef1c(piVar17, *(puStack240 + iVar13 + 0x10), *(puStack240 + iVar13 + 0x28), iVar7);\n                            uVar15 = uStack160;\n                        }\n                        piStack192 = piVar17 + 0xb;\n                        *(puStack240 + arg1[5] + 8) = uVar15;\n                        uStack232 = uStack232 + 1;\n                        arg2 = puStack200;\n                        uVar15 = uStack232;\n                    }\n                    if (*arg1 == 0) {\n                        iVar10 = fcn.14002cc5c(arg1, 1);\n                        if (iVar10 < 0) {\n                            if (arg1[3] != 0) {\n                                piVar17 = arg1_00 + 5;\n                                do {\n                                    fcn.1400036d8(*piVar17);\n                                    uVar14 = uVar14 + 1;\n                                    piVar17 = piVar17 + 0xb;\n                                } while (uVar14 < arg1[3]);\n                            }\n                            fcn.1400036d8(arg1[4]);\n                            arg1[4] = 0;\n                            fcn.1400036d8(arg1_00);\n                            if (piStack224 != NULL) {\n                                (**(*piStack224 + 0x10))();\n                            }\n                            goto code_r0x000140033def;\n                        }\n                        *(*arg1 + 8) = 1;\n                    }\n                    arg1[2] = 0;\n                    iVar13 = fcn.140003694(arg1_01);\n                    arg1[2] = iVar13;\n                    if (arg1[2] == 0) {\n                        if (arg1[3] != 0) {\n                            piVar17 = arg1_00 + 5;\n                            do {\n                                fcn.1400036d8(*piVar17);\n                                uVar14 = uVar14 + 1;\n                                piVar17 = piVar17 + 0xb;\n                            } while (uVar14 < arg1[3]);\n                        }\n                        fcn.1400036d8(arg1[4]);\n                        arg1[4] = 0;\n                        fcn.1400036d8(arg1_00);\n                        if (piStack224 != NULL) {\n                            (**(*piStack224 + 0x10))();\n                        }\n                    }\n                    else {\n                        fcn.1400698a0(arg1[2], 0, arg1_01);\n                        uStack312 = piStack224;\n                        iVar10 = fcn.14002ccc8(arg1_00, arg1[3], *arg1, arg1_01);\n                        if (iVar10 < 0) {\n                            fcn.1400036d8(arg1[4]);\n                            arg1[4] = 0;\n                        }\n                        fcn.1400036d8(arg1_00);\n                        if (piStack224 != NULL) {\n                            (**(*piStack224 + 0x10))();\n                        }\n                    }\n                }\n            }\n        }\n    }\ncode_r0x000140033def:\n    fcn.140069870(uStack56 ^ auStack344);\n    return;\n}\n",
        "token_count": 4861
    },
    "14003516": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint64_t fcn.140035164(int64_t arg1)\n\n{\n    ulong *puVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint64_t uVar5;\n    int64_t iVar6;\n    ulong arg1_00;\n    int64_t iVar7;\n    bool bVar8;\n    int64_t *piStackX8;\n    int64_t *piStackX16;\n    uint32_t uStack56;\n    uint32_t uStack52;\n    int32_t iStack48;\n    int32_t iStack40;\n    int32_t iStack36;\n    int32_t iStack32;\n    int32_t iStack28;\n    \n    if (*(arg1 + 8) == 0) {\n        fcn.140020780();\n        pcVar2 = swi(3);\n        uVar5 = (*pcVar2)();\n        return uVar5;\n    }\n    iVar6 = *(*(arg1 + 8) + 0x50);\n    if (iVar6 == 0) {\n        fcn.140020780();\n        pcVar2 = swi(3);\n        uVar5 = (*pcVar2)();\n        return uVar5;\n    }\n    iVar6 = fcn.140012120(iVar6);\n    if (iVar6 == 0) {\n        fcn.140020780();\n        pcVar2 = swi(3);\n        uVar5 = (*pcVar2)();\n        return uVar5;\n    }\n    iVar3 = (*_sym.imp.USER32.dll_IsWindowVisible)(*(iVar6 + 0x40));\n    bVar8 = iVar3 == 0;\n    if (bVar8) {\n        arg1_00 = (*_sym.imp.USER32.dll_GetDesktopWindow)();\n        iVar7 = fcn.14000fc08(arg1_00);\n        (*_sym.imp.USER32.dll_GetWindowRect)(*(iVar7 + 0x40), &iStack40);\n        (*_sym.imp.USER32.dll_GetWindowRect)(*(iVar6 + 0x40));\n        fcn.140015424(iVar6, (iStack32 - iStack40) / 2, (iStack28 - iStack36) / 2, 0);\n        fcn.14001546c(iVar6, 1);\n    }\n    puVar1 = *(*(arg1 + 8) + 0x80);\n    iVar3 = (***puVar1)(puVar1, 0x1400a6390, arg1 + 0x90);\n    if (iVar3 < 0) {\n        puVar1 = *(*(arg1 + 8) + 0x80);\n        uVar5 = (***puVar1)(puVar1, 0x1400a63f0, &piStackX8);\n        if (uVar5 < 0) {\n            return uVar5;\n        }\n        (**(*piStackX8 + 0x28))(piStackX8, &piStackX16);\n        (**(*piStackX8 + 0x10))();\n        if (piStackX16 == NULL) {\n            return 0x80004005;\n        }\n        uVar4 = (***piStackX16)(piStackX16, 0x1400b5a18, arg1 + 0x10);\n        (**(*piStackX16 + 0x10))();\n        if (uVar4 < 0) {\n            return uVar4;\n        }\n        (****(arg1 + 0x10))();\n    }\n    else {\n        uVar4 = (**(**(arg1 + 0x90) + 0x18))();\n        if (*(arg1 + 0x98) == 0) {\n            uVar4 = 0x80004003;\n        }\n        if (uVar4 < 0) {\n            if (bVar8) {\n                fcn.140015424(iVar6, uStack56, uStack52, iStack48 - uStack56);\n                fcn.14001546c(iVar6, 0);\n            }\n            return uVar4;\n        }\n    }\n    uVar4 = fcn.140033e20(arg1);\n    if (bVar8) {\n        fcn.140015424(iVar6, uStack56, uStack52, iStack48 - uStack56);\n        fcn.14001546c(iVar6, 0);\n    }\n    return uVar4;\n}\n",
        "token_count": 987
    },
    "140035f9": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nvoid fcn.140035f98(int64_t arg1, ulong arg2, ulong arg3)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int64_t arg1_00;\n    code *pcVar3;\n    char cVar4;\n    ulong uVar5;\n    int64_t iVar6;\n    ulong *puVar7;\n    uint64_t arg2_00;\n    ulong *puVar8;\n    uint64_t *puVar9;\n    uchar auStack616 [32];\n    uint32_t uStack584;\n    uint32_t uStack576;\n    uint32_t uStack568;\n    int32_t iStack552;\n    uint16_t auStack548 [2];\n    uchar auStack544 [24];\n    uint16_t uStack520;\n    uint16_t uStack518;\n    uint16_t uStack516;\n    int16_t iStack512;\n    uint16_t uStack510;\n    uint16_t uStack508;\n    int16_t iStack504;\n    uint16_t uStack502;\n    uint16_t uStack500;\n    uint16_t uStack498;\n    uint16_t uStack496;\n    uint16_t uStack494;\n    int64_t iStack488;\n    ulong uStack480;\n    uint uStack472;\n    ulong uStack464;\n    uint uStack456;\n    int64_t iStack448;\n    ushort auStack440 [4];\n    ulong uStack432;\n    ushort auStack416 [4];\n    ulong uStack408;\n    ushort auStack392 [4];\n    uint uStack384;\n    ushort auStack368 [4];\n    double dStack360;\n    ushort auStack344 [4];\n    uchar uStack336;\n    ushort auStack320 [4];\n    ulong uStack312;\n    ushort auStack296 [4];\n    ulong uStack288;\n    ushort auStack272 [4];\n    ulong uStack264;\n    ushort auStack248 [4];\n    ulong uStack240;\n    ulong uStack224;\n    ulong auStack216 [2];\n    uchar auStack200 [24];\n    uchar auStack176 [24];\n    uchar auStack152 [24];\n    uchar auStack128 [24];\n    uchar auStack104 [24];\n    uchar auStack80 [24];\n    uchar uStack56;\n    char cStack55;\n    char cStack54;\n    int64_t iStack53;\n    uint64_t uStack32;\n    \n    uStack224 = 0xfffffffffffffffe;\n    uStack32 = *0x1400d96f0 ^ auStack616;\n    arg2_00 = arg3;\n    puVar7 = NULL;\n    iStack552 = 0;\n    if (*(arg1 + 0x90) == 0) {\n        fcn.140020780();\n        pcVar3 = swi(3);\n        (*pcVar3)();\n        return;\n    }\n    if (*(arg1 + 0xa8) == 0) {\n        fcn.140020780();\n        pcVar3 = swi(3);\n        (*pcVar3)();\n        return;\n    }\n    fcn.14003ba3c(auStack544);\n    iStack552 = 3;\n    fcn.140031f48(*(arg1 + 0xa8), arg2_00, &iStack552);\n    if (iStack552 == 3) {\n        fcn.14003c2e4(arg2, auStack544);\n        (*_sym.imp.OLEAUT32.dll_VariantCopy)(auStack544);\n        goto code_r0x000140036a90;\n    }\n    arg1_00 = *(arg1 + 0xa8);\n    cVar4 = fcn.14002f040(arg1_00, arg2_00, auStack548);\n    if (cVar4 == '\\0') {\n        fcn.14003c2e4(arg2, auStack544);\n        (*_sym.imp.OLEAUT32.dll_VariantCopy)(auStack544);\n        goto code_r0x000140036a90;\n    }\n    if (auStack548[0] < 0x82) {\n        if (auStack548[0] == 0x81) {\n            if (*(arg1_00 + 0x38) == '\\0') {\n                iVar6 = *(arg1_00 + 0x28);\n                if (arg2_00 <= *(arg1_00 + 0x18) + -1 + *(iVar6 + 0x10)) {\n                    puVar8 = arg2_00 - *(iVar6 + 0x10);\ncode_r0x000140036690:\n                    puVar7 = *(iVar6 + 8 + puVar8 * 0x50) + *(arg1_00 + 0x10);\n                }\n            }\n            else if (*(arg1_00 + 0x18) != 0) {\n                iVar6 = *(arg1_00 + 0x28);\n                puVar9 = iVar6 + 0x10;\n                puVar8 = puVar7;\n                do {\n                    if (*puVar9 == arg2_00) goto code_r0x000140036690;\n                    puVar8 = puVar8 + 1;\n                    puVar9 = puVar9 + 10;\n                } while (puVar8 < *(arg1_00 + 0x18));\n            }\n            puVar7 = fcn.1400057dc(&iStack488, puVar7);\n            uVar5 = fcn.14003fda8(auStack80, *puVar7);\n            fcn.14003ba18(auStack544, uVar5);\n            (*_sym.imp.OLEAUT32.dll_VariantCopy)(auStack80);\n            LOCK();\n            piVar1 = iStack488 + -8;\n            iVar2 = *piVar1;\n            *piVar1 = *piVar1 + -1;\n            if (iVar2 + -1 < 1) {\n                (**(**(iStack488 + -0x18) + 8))();\n            }\n        }\n        else if (auStack548[0] < 9) {\n            if (auStack548[0] == 8) goto code_r0x0001400369b3;\n            if (auStack548[0] == 2) {\ncode_r0x000140036413:\n                if ((*(arg1_00 + 0x38) != '\\0') && (*(arg1_00 + 0x18) != 0)) {\n                    puVar9 = *(arg1_00 + 0x28) + 0x10;\n                    do {\n                        if (*puVar9 == arg2_00) break;\n                        puVar7 = puVar7 + 1;\n                        puVar9 = puVar9 + 10;\n                    } while (puVar7 < *(arg1_00 + 0x18));\n                }\n                uVar5 = fcn.14003b700(auStack200);\n                fcn.14003ba18(auStack544, uVar5);\n                (*_sym.imp.OLEAUT32.dll_VariantCopy)(auStack200);\n            }\n            else if (auStack548[0] == 3) {\ncode_r0x000140036385:\n                if (*(arg1_00 + 0x38) == '\\0') {\n                    iVar6 = *(arg1_00 + 0x28);\n                    if (arg2_00 <= *(arg1_00 + 0x18) + -1 + *(iVar6 + 0x10)) {\n                        puVar8 = arg2_00 - *(iVar6 + 0x10);\ncode_r0x0001400363cc:\n                        puVar7 = *(iVar6 + 8 + puVar8 * 0x50) + *(arg1_00 + 0x10);\n                    }\n                }\n                else if (*(arg1_00 + 0x18) != 0) {\n                    iVar6 = *(arg1_00 + 0x28);\n                    puVar9 = iVar6 + 0x10;\n                    puVar8 = puVar7;\n                    do {\n                        if (*puVar9 == arg2_00) goto code_r0x0001400363cc;\n                        puVar8 = puVar8 + 1;\n                        puVar9 = puVar9 + 10;\n                    } while (puVar8 < *(arg1_00 + 0x18));\n                }\n                uVar5 = fcn.14003b730(auStack152, *puVar7);\n                fcn.14003ba18(auStack544, uVar5);\n                (*_sym.imp.OLEAUT32.dll_VariantCopy)(auStack152);\n            }\n            else if (auStack548[0] == 4) {\n                if (*(arg1_00 + 0x38) == '\\0') {\n                    iVar6 = *(arg1_00 + 0x28);\n                    if (arg2_00 <= *(arg1_00 + 0x18) + -1 + *(iVar6 + 0x10)) {\n                        puVar8 = arg2_00 - *(iVar6 + 0x10);\ncode_r0x0001400362f9:\n                        puVar7 = *(iVar6 + 8 + puVar8 * 0x50) + *(arg1_00 + 0x10);\n                    }\n                }\n                else if (*(arg1_00 + 0x18) != 0) {\n                    iVar6 = *(arg1_00 + 0x28);\n                    puVar9 = iVar6 + 0x10;\n                    puVar8 = puVar7;\n                    do {\n                        if (*puVar9 == arg2_00) goto code_r0x0001400362f9;\n                        puVar8 = puVar8 + 1;\n                        puVar9 = puVar9 + 10;\n                    } while (puVar8 < *(arg1_00 + 0x18));\n                }\n                uStack384 = *puVar7;\n                auStack392[0] = 4;\n                fcn.14003ba18(auStack544, auStack392);\n                (*_sym.imp.OLEAUT32.dll_VariantCopy)(auStack392);\n            }\n            else if (auStack548[0] == 5) {\n                if (*(arg1_00 + 0x38) == '\\0') {\n                    iVar6 = *(arg1_00 + 0x28);\n                    if (arg2_00 <= *(arg1_00 + 0x18) + -1 + *(iVar6 + 0x10)) {\n                        puVar8 = arg2_00 - *(iVar6 + 0x10);\ncode_r0x000140036262:\n                        puVar7 = *(iVar6 + 8 + puVar8 * 0x50) + *(arg1_00 + 0x10);\n                    }\n                }\n                else if (*(arg1_00 + 0x18) != 0) {\n                    iVar6 = *(arg1_00 + 0x28);\n                    puVar9 = iVar6 + 0x10;\n                    puVar8 = puVar7;\n                    do {\n                        if (*puVar9 == arg2_00) goto code_r0x000140036262;\n                        puVar8 = puVar8 + 1;\n                        puVar9 = puVar9 + 10;\n                    } while (puVar8 < *(arg1_00 + 0x18));\n                }\n                uStack312 = *puVar7;\n                auStack320[0] = 5;\n                fcn.14003ba18(auStack544, auStack320);\n                (*_sym.imp.OLEAUT32.dll_VariantCopy)(auStack320);\n            }\n            else if (auStack548[0] == 6) {\n                if (*(arg1_00 + 0x38) == '\\0') {\n                    iVar6 = *(arg1_00 + 0x28);\n                    if (arg2_00 <= *(arg1_00 + 0x18) + -1 + *(iVar6 + 0x10)) {\n                        puVar8 = arg2_00 - *(iVar6 + 0x10);\ncode_r0x0001400361cd:\n                        puVar7 = *(iVar6 + 8 + puVar8 * 0x50) + *(arg1_00 + 0x10);\n                    }\n                }\n                else if (*(arg1_00 + 0x18) != 0) {\n                    iVar6 = *(arg1_00 + 0x28);\n                    puVar9 = iVar6 + 0x10;\n                    puVar8 = puVar7;\n                    do {\n                        if (*puVar9 == arg2_00) goto code_r0x0001400361cd;\n                        puVar8 = puVar8 + 1;\n                        puVar9 = puVar9 + 10;\n                    } while (puVar8 < *(arg1_00 + 0x18));\n                }\n                uStack264 = *puVar7;\n                auStack272[0] = 6;\n                fcn.14003ba18(auStack544, auStack272);\n                (*_sym.imp.OLEAUT32.dll_VariantCopy)(auStack272);\n            }\n            else if (auStack548[0] == 7) {\n                if (*(arg1_00 + 0x38) == '\\0') {\n                    iVar6 = *(arg1_00 + 0x28);\n                    if (arg2_00 <= *(arg1_00 + 0x18) + -1 + *(iVar6 + 0x10)) {\n                        puVar8 = arg2_00 - *(iVar6 + 0x10);\ncode_r0x000140036136:\n                        puVar7 = *(iVar6 + 8 + puVar8 * 0x50) + *(arg1_00 + 0x10);\n                    }\n                }\n                else if (*(arg1_00 + 0x18) != 0) {\n                    iVar6 = *(arg1_00 + 0x28);\n                    puVar9 = iVar6 + 0x10;\n                    puVar8 = puVar7;\n                    do {\n                        if (*puVar9 == arg2_00) goto code_r0x000140036136;\n                        puVar8 = puVar8 + 1;\n                        puVar9 = puVar9 + 10;\n                    } while (puVar8 < *(arg1_00 + 0x18));\n                }\n                uStack432 = *puVar7;\n                auStack440[0] = 7;\n                fcn.14003ba18(auStack544, auStack440);\n                (*_sym.imp.OLEAUT32.dll_VariantCopy)(auStack440);\n            }\n        }\n        else if (auStack548[0] == 0xb) {\n            if ((*(arg1_00 + 0x38) != '\\0') && (*(arg1_00 + 0x18) != 0)) {\n                puVar9 = *(arg1_00 + 0x28) + 0x10;\n                do {\n                    if (*puVar9 == arg2_00) break;\n                    puVar7 = puVar7 + 1;\n                    puVar9 = puVar9 + 10;\n                } while (puVar7 < *(arg1_00 + 0x18));\n            }\n            uVar5 = fcn.14003b700(auStack128);\n            fcn.14003ba18(auStack544, uVar5);\n            (*_sym.imp.OLEAUT32.dll_VariantCopy)(auStack128);\n        }\n        else if (auStack548[0] == 0xc) {\n            if (*(arg1_00 + 0x38) == '\\0') {\n                iVar6 = *(arg1_00 + 0x28);\n                if (arg2_00 <= *(arg1_00 + 0x18) + -1 + *(iVar6 + 0x10)) {\n                    puVar8 = arg2_00 - *(iVar6 + 0x10);\ncode_r0x000140036578:\n                    puVar7 = *(iVar6 + 8 + puVar8 * 0x50) + *(arg1_00 + 0x10);\n                }\n            }\n            else if (*(arg1_00 + 0x18) != 0) {\n                iVar6 = *(arg1_00 + 0x28);\n                puVar9 = iVar6 + 0x10;\n                puVar8 = puVar7;\n                do {\n                    if (*puVar9 == arg2_00) goto code_r0x000140036578;\n                    puVar8 = puVar8 + 1;\n                    puVar9 = puVar9 + 10;\n                } while (puVar8 < *(arg1_00 + 0x18));\n            }\n            uVar5 = fcn.14003c2a8(auStack176, puVar7);\n            fcn.14003ba18(auStack544, uVar5);\n            (*_sym.imp.OLEAUT32.dll_VariantCopy)(auStack176);\n        }\n        else if (0xf < auStack548[0]) {\n            if (auStack548[0] < 0x12) {\n                if (*(arg1_00 + 0x38) == '\\0') {\n                    iVar6 = *(arg1_00 + 0x28);\n                    if (arg2_00 <= *(arg1_00 + 0x18) + -1 + *(iVar6 + 0x10)) {\n                        puVar8 = arg2_00 - *(iVar6 + 0x10);\ncode_r0x0001400364e9:\n                        puVar7 = *(iVar6 + 8 + puVar8 * 0x50) + *(arg1_00 + 0x10);\n                    }\n                }\n                else if (*(arg1_00 + 0x18) != 0) {\n                    iVar6 = *(arg1_00 + 0x28);\n                    puVar9 = iVar6 + 0x10;\n                    puVar8 = puVar7;\n                    do {\n                        if (*puVar9 == arg2_00) goto code_r0x0001400364e9;\n                        puVar8 = puVar8 + 1;\n                        puVar9 = puVar9 + 10;\n                    } while (puVar8 < *(arg1_00 + 0x18));\n                }\n                uStack336 = *puVar7;\n                auStack344[0] = 0x11;\n                fcn.14003ba18(auStack544, auStack344);\n                (*_sym.imp.OLEAUT32.dll_VariantCopy)(auStack344);\n            }\n            else {\n                if (auStack548[0] == 0x12) goto code_r0x000140036413;\n                if (auStack548[0] == 0x13) goto code_r0x000140036385;\n            }\n        }\n    }\n    else if (auStack548[0] == 0x82) {\ncode_r0x0001400369b3:\n        if (*(arg1_00 + 0x38) == '\\0') {\n            iVar6 = *(arg1_00 + 0x28);\n            if (arg2_00 <= *(arg1_00 + 0x18) + -1 + *(iVar6 + 0x10)) {\n                puVar8 = arg2_00 - *(iVar6 + 0x10);\ncode_r0x0001400369fa:\n                puVar7 = *(iVar6 + 8 + puVar8 * 0x50) + *(arg1_00 + 0x10);\n            }\n        }\n        else if (*(arg1_00 + 0x18) != 0) {\n            iVar6 = *(arg1_00 + 0x28);\n            puVar9 = iVar6 + 0x10;\n            puVar8 = puVar7;\n            do {\n                if (*puVar9 == arg2_00) goto code_r0x0001400369fa;\n                puVar8 = puVar8 + 1;\n                puVar9 = puVar9 + 10;\n            } while (puVar8 < *(arg1_00 + 0x18));\n        }\n        puVar7 = fcn.14001f14c(&iStack448, puVar7);\n        uVar5 = fcn.14003fda8(auStack104, *puVar7);\n        fcn.14003ba18(auStack544, uVar5);\n        (*_sym.imp.OLEAUT32.dll_VariantCopy)(auStack104);\n        LOCK();\n        piVar1 = iStack448 + -8;\n        iVar2 = *piVar1;\n        *piVar1 = *piVar1 + -1;\n        if (iVar2 + -1 < 1) {\n            (**(**(iStack448 + -0x18) + 8))();\n        }\n    }\n    else if (auStack548[0] == 0x83) {\n        cVar4 = fcn.1400316e0(arg1_00, arg2_00, &uStack56);\n        if (cVar4 != '\\0') {\n            dStack360 = iStack53;\n            for (; cStack55 != '\\0'; cStack55 = cStack55 + -1) {\n                dStack360 = dStack360 / *0x1400a6d30;\n            }\n            if (cStack54 == '\\0') {\n                dStack360 = *0x1400a6d28 - dStack360;\n            }\n            auStack368[0] = 5;\n            fcn.14003ba18(auStack544, auStack368);\n            (*_sym.imp.OLEAUT32.dll_VariantCopy)(auStack368);\n        }\n    }\n    else if (auStack548[0] == 0x85) {\n        cVar4 = fcn.14003176c(arg1_00, arg2_00, &iStack512);\n        if (cVar4 != '\\0') {\n            uStack480 = 0;\n            uStack472 = 0;\n            uStack568 = 0;\n            uStack576 = 0;\n            uStack584 = 0;\n            fcn.14002ed6c(&uStack480, iStack512, uStack510, uStack508);\n            auStack248[0] = 7;\n            uStack240 = uStack480;\n            fcn.14003ba18(auStack544, auStack248);\n            (*_sym.imp.OLEAUT32.dll_VariantCopy)(auStack248);\n        }\n    }\n    else if (auStack548[0] == 0x86) {\n        cVar4 = fcn.1400317e8(arg1_00, arg2_00, &uStack520);\n        if (cVar4 != '\\0') {\n            uStack464 = 0;\n            uStack456 = 0;\n            uStack568 = uStack516;\n            uStack576 = uStack518;\n            uStack584 = uStack520;\n            fcn.14002ed6c(&uStack464, 0x76b, 0xc, 0x1e);\n            auStack416[0] = 7;\n            uStack408 = uStack464;\n            fcn.14003ba18(auStack544, auStack416);\n            (*_sym.imp.OLEAUT32.dll_VariantCopy)(auStack416);\n        }\n    }\n    else if ((auStack548[0] == 0x87) && (cVar4 = fcn.140031864(arg1_00, arg2_00, &iStack504),  cVar4 != '\\0')) {\n        uStack568 = uStack494;\n        uStack576 = uStack496;\n        uStack584 = uStack498;\n        fcn.14002ed6c(auStack216, iStack504, uStack502, uStack500);\n        auStack296[0] = 7;\n        uStack288 = auStack216[0];\n        fcn.14003ba18(auStack544, auStack296);\n        (*_sym.imp.OLEAUT32.dll_VariantCopy)(auStack296);\n    }\n    fcn.14003c2e4(arg2, auStack544);\n    (*_sym.imp.OLEAUT32.dll_VariantCopy)(auStack544);\ncode_r0x000140036a90:\n    fcn.140069870(uStack32 ^ auStack616);\n    return;\n}\n",
        "token_count": 5383
    },
    "140036d1": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140036d14(code **arg1)\n\n{\n    int32_t *piVar1;\n    code *pcVar2;\n    int64_t *piVar3;\n    int64_t iVar4;\n    int32_t iVar5;\n    int64_t *piStackX16;\n    int64_t *piStackX24;\n    \n    *arg1 = vtable.COleControlSite.0;\n    pcVar2 = arg1[8];\n    if ((pcVar2 != NULL) && (*(pcVar2 + 0xd0) == arg1)) {\n        *(pcVar2 + 0xd0) = 0;\n    }\n    pcVar2 = arg1[0x1b];\n    if (pcVar2 != NULL) {\n        fcn.1400359f8(pcVar2);\n        fcn.1400036d8(pcVar2);\n    }\n    fcn.14002d990(arg1);\n    fcn.14002d48c(arg1, arg1 + 0x6c, *(arg1 + 0x14));\n    fcn.14002d48c(arg1, 0x1400b6898, *(arg1 + 0xa4));\n    fcn.14002d48c(arg1, 0x1400b5a48, *(arg1 + 0xd4));\n    if (arg1[0x13] != NULL) {\n        (**(*arg1[0x13] + 0x10))();\n        arg1[0x13] = NULL;\n    }\n    if (arg1[0x11] != NULL) {\n        (**(*arg1[0x11] + 0x28))();\n        (**(*arg1[0x11] + 0x10))();\n        arg1[0x11] = NULL;\n    }\n    if (arg1[0x12] != NULL) {\n        (**(*arg1[0x12] + 0x10))();\n        arg1[0x12] = NULL;\n    }\n    piVar3 = arg1[0x10];\n    if (piVar3 != NULL) {\n        (**(*piVar3 + 0x18))(piVar3, 0);\n        (**(*arg1[0x10] + 0x30))(arg1[0x10], 1);\n        (**(*arg1[0x10] + 0x10))();\n        arg1[0x10] = NULL;\n    }\n    (*_sym.imp.OLEAUT32.dll_VariantCopy)(arg1 + 0x21);\n    pcVar2 = arg1[0x1c];\n    if (pcVar2 != NULL) {\n        arg1[0x1c] = *(pcVar2 + 0x20);\n        iVar4 = *(pcVar2 + 0x10);\n        if ((iVar4 != 0) && (*(iVar4 + 0xd8) != 0)) {\n            (**(**(iVar4 + 0xd8) + 8))(*(iVar4 + 0xd8), pcVar2, 0);\n        }\n        fcn.1400036d8(pcVar2);\n    }\n    if (((*(arg1 + 0x1e) != 0) && (pcVar2 = arg1[0x1d],  pcVar2 != NULL)) && (*(pcVar2 + 0xd8) != 0)) {\n        (**(**(pcVar2 + 0xd8) + 0x10))(*(pcVar2 + 0xd8), arg1, 0);\n    }\n    if ((arg1[8] != NULL) && (*(arg1 + 0xb4) != 0)) {\n        piVar1 = arg1[8] + 0xe0;\n        *piVar1 = *piVar1 + -1;\n    }\n    piStackX24 = NULL;\n    iVar5 = (**arg1[0x2b])(arg1 + 0x2b, 0x1400b6098, &piStackX24);\n    if (-1 < iVar5) {\n        fcn.14003a7a4(piStackX24);\n    }\n    piStackX16 = NULL;\n    iVar5 = (**arg1[0x2c])(arg1 + 0x2c, 0x1400b6098, &piStackX16);\n    if (-1 < iVar5) {\n        fcn.14003a7a4(piStackX16);\n    }\n    if (piStackX16 != NULL) {\n        (**(*piStackX16 + 0x10))();\n    }\n    if (piStackX24 != NULL) {\n        (**(*piStackX24 + 0x10))();\n    }\n    fcn.140052d78(arg1 + 0x24);\n    pcVar2 = arg1[0x1f];\n    LOCK();\n    piVar1 = pcVar2 + -8;\n    iVar5 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar5 + -1 < 1) {\n        (**(**(pcVar2 + -0x18) + 8))();\n    }\n    if (arg1[4] != NULL) {\n        (**(arg1[4] + 0x38))();\n    }\n    arg1[7] = NULL;\n    return;\n}\n",
        "token_count": 1179
    },
    "140037a9": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint64_t * fcn.140037a9c(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    ulong *puVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    int64_t *piVar5;\n    int64_t iVar6;\n    int64_t iVar7;\n    int64_t *piVar8;\n    int32_t iVar9;\n    ulong *puVar10;\n    int64_t *piVar11;\n    \n    piVar11 = NULL;\n    piVar5 = fcn.140037878(arg1, arg2);\n    piVar8 = piVar5;\n    if ((piVar5 == NULL) && (iVar6 = fcn.14000d158(arg1),  iVar6 != 0)) {\n        puVar10 = *(iVar6 + 0x88);\n        while (piVar8 = piVar5,  puVar10 != NULL) {\n            puVar1 = *puVar10;\n            piVar8 = puVar10[2];\n            if (((piVar8[1] != 0) && (piVar8[1] == *(iVar6 + 0xd8))) ||\n               ((puVar10 = puVar1,  *piVar8 != 0 && (iVar7 = (*_sym.imp.USER32.dll_GetFocus)(),  *piVar8 == iVar7))))\n            break;\n        }\n    }\n    iVar9 = 0;\n    do {\n        piVar8 = fcn.1400378d8(arg1, piVar8, arg3);\n        if (piVar8 == NULL) {\n            return NULL;\n        }\n        iVar3 = fcn.140037140(piVar8);\n        if ((iVar3 != 0) && (piVar8 = fcn.140015b6c(arg1, piVar8, 0),  piVar8 == NULL)) {\n            return NULL;\n        }\n        if (piVar8 == NULL) {\ncode_r0x000140037b83:\n            if (piVar8[1] == 0) {\n                fcn.140020780();\n                pcVar2 = swi(3);\n                piVar8 = (*pcVar2)();\n                return piVar8;\n            }\n            uVar4 = (**(*piVar8[1] + 0xf0))();\n            uVar4 = uVar4 >> 0x1b & 1;\n        }\n        else {\n            if (piVar8[1] == 0) {\n                iVar6 = *piVar8;\n            }\n            else {\n                iVar6 = *(piVar8[1] + 0x48);\n            }\n            if (iVar6 == 0) goto code_r0x000140037b83;\n            uVar4 = (*_sym.imp.USER32.dll_IsWindowEnabled)();\n        }\n        if (uVar4 == 0) {\n            return piVar8;\n        }\n        if (piVar8 == piVar11) {\n            return NULL;\n        }\n        if (piVar11 == NULL) {\n            piVar11 = piVar8;\n        }\n        iVar9 = iVar9 + 1;\n        if (0x1ff < iVar9) {\n            return NULL;\n        }\n    } while( true );\n}\n",
        "token_count": 714
    },
    "1400384f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.1400384fc(int64_t arg1)\n\n{\n    int64_t *piVar1;\n    int32_t iVar2;\n    int64_t *apiStackX8 [4];\n    \n    *(arg1 + 0x30) = 0;\n    if (*(arg1 + 0x24) == 0) {\n        fcn.1400036d8(*(arg1 + 0x48));\n        *(arg1 + 0x48) = 0;\n        *(arg1 + 0x38) = 0;\n    }\n    if (*(arg1 + 0x60) != 0) {\n        iVar2 = fcn.14003a4a4(*(arg1 + 0x60), 1, apiStackX8);\n        if ((iVar2 != 0) && (apiStackX8[0] != NULL)) {\n            (**(*apiStackX8[0] + 8))(apiStackX8[0], 1);\n        }\n    }\n    piVar1 = *(arg1 + 0x60);\n    if (piVar1 != NULL) {\n        (**(*piVar1 + 8))(piVar1, 1);\n    }\n    piVar1 = *(arg1 + 0x58);\n    *(arg1 + 0x60) = 0;\n    if (piVar1 != NULL) {\n        (**(*piVar1 + 8))(piVar1, 1);\n    }\n    *(arg1 + 0x58) = 0;\n    return;\n}\n",
        "token_count": 337
    },
    "14003883": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140038830(int64_t arg1, ulong arg2)\n\n{\n    int64_t *piVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    uint64_t arg1_00;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    int64_t iVar6;\n    uint32_t uVar7;\n    uint64_t arg4;\n    \n    if ((*(arg1 + 0x20) & 1) == 0) {\n        fcn.1400384a8(4, *(arg1 + 0x18));\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    piVar1 = arg1 + 0x40;\n    uVar4 = *piVar1 - *(arg1 + 0x38);\n    arg4 = uVar4;\n    uVar7 = uVar4 + arg2;\n    if (*(arg1 + 0xc) == 0) {\n        arg1_00 = *(arg1 + 0x48);\n        if (arg1_00 < *(arg1 + 0x38)) {\n            if (0 < uVar4) {\n                iVar3 = fcn.14006a3c0(arg1_00, *piVar1 - arg1_00, *(arg1 + 0x38), arg4);\n                if (iVar3 != 0) {\n                    if (iVar3 == 0xc) {\n                        fcn.140020738();\n                        pcVar2 = swi(3);\n                        (*pcVar2)();\n                        return;\n                    }\n                    if ((iVar3 == 0x16) || (iVar3 == 0x22)) {\n                        fcn.140020780();\n                        pcVar2 = swi(3);\n                        (*pcVar2)();\n                        return;\n                    }\n                    if (iVar3 != 0x50) {\n                        fcn.140020780();\n                        pcVar2 = swi(3);\n                        (*pcVar2)();\n                        return;\n                    }\n                }\n                arg1_00 = *(arg1 + 0x48);\n                *(arg1 + 0x38) = arg1_00;\n                *piVar1 = arg4 + arg1_00;\n            }\n            if (*(arg1 + 0x10) == 0) {\n                arg2._0_4_ = *(arg1 + 0x28);\n            }\n            arg2._0_4_ = arg2 - uVar4;\n            iVar6 = arg4 + arg1_00;\n            do {\n                uVar4 = (**(**(arg1 + 0x30) + 0x68))(*(arg1 + 0x30), iVar6, arg2);\n                uVar5 = arg4 + uVar4;\n                arg4 = uVar5;\n                arg2._0_4_ = arg2 - uVar4;\n                iVar6 = iVar6 + uVar4;\n                if ((uVar4 == 0) || (arg2 == 0)) break;\n            } while (uVar5 < uVar7);\n            *(arg1 + 0x38) = *(arg1 + 0x48);\n            *piVar1 = arg4 + *(arg1 + 0x48);\n        }\n    }\n    else {\n        if (uVar4 != 0) {\n            (**(**(arg1 + 0x30) + 0x50))();\n        }\n        (**(**(arg1 + 0x30) + 0xa0))(*(arg1 + 0x30), 0, *(arg1 + 0x28), arg1 + 0x48, piVar1);\n        *(arg1 + 0x38) = *(arg1 + 0x48);\n    }\n    if (*piVar1 - *(arg1 + 0x38) < uVar7) {\n        fcn.1400384a8(3, 0);\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    return;\n}\n",
        "token_count": 889
    },
    "1400398c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.1400398c4(int64_t arg1)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    \n    if ((*(arg1 + 0x30) != 0) && ((*(arg1 + 0x20) & 2) == 0)) {\n        fcn.140038770(arg1);\n        *(arg1 + 0x30) = 0;\n    }\n    fcn.1400384fc(arg1);\n    iVar3 = *(arg1 + 0x18);\n    LOCK();\n    piVar1 = iVar3 + -8;\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 + -1 < 1) {\n        (**(**(iVar3 + -0x18) + 8))();\n    }\n    return;\n}\n",
        "token_count": 200
    },
    "140039a0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong * fcn.140039a00(ulong *arg1, int64_t *arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t *piVar1;\n    code *pcVar2;\n    uint32_t uVar3;\n    int64_t *piVar4;\n    ulong *puVar5;\n    int64_t iVar6;\n    ulong uVar7;\n    int64_t iVar8;\n    int32_t iVar9;\n    ulong in_stack_00000028;\n    int64_t iStack40;\n    ulong uStack32;\n    \n    uStack32 = 0xfffffffffffffffe;\n    piVar4 = fcn.140017fc0();\n    if (piVar4 == NULL) {\n        fcn.1400031e0(0x80004005);\n        pcVar2 = swi(3);\n        puVar5 = (*pcVar2)();\n        return puVar5;\n    }\n    iVar6 = (**(*piVar4 + 0x18))(piVar4);\n    arg1[3] = iVar6 + 0x18;\n    if (arg2 == NULL) {\n        fcn.140020780();\n        pcVar2 = swi(3);\n        puVar5 = (*pcVar2)();\n        return puVar5;\n    }\n    uVar7 = (**(*arg2 + 0x30))(arg2, &iStack40);\n    fcn.140007bbc(arg1 + 3, uVar7);\n    LOCK();\n    piVar1 = iStack40 + -8;\n    iVar9 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar9 + -1 < 1) {\n        (**(**(iStack40 + -0x18) + 8))();\n    }\n    *(arg1 + 4) = arg3;\n    arg1[6] = arg2;\n    arg1[0xc] = 0;\n    arg1[0xb] = 0;\n    *arg1 = 0;\n    *(arg1 + 1) = 1;\n    *(arg1 + 0x14) = 0xffffffff;\n    *(arg1 + 0xd) = (-((~arg3 & 1) != 0) & 0xffffffd0) + 0x40;\n    *(arg1 + 0x6c) = 0x89;\n    arg1[9] = in_stack_00000028;\n    *(arg1 + 0x24) = 1;\n    *(arg1 + 0xc) = 0;\n    uVar3 = (**(*arg2 + 0xa0))(arg2, 3, 0, 0, 0);\n    *(arg1 + 2) = uVar3 & 2;\n    if (arg4 < 0x80) {\n        *(arg1 + 5) = 0x80;\n        arg1[9] = 0;\n    }\n    else {\n        *(arg1 + 5) = arg4;\n    }\n    iVar9 = *(arg1 + 5);\n    if (arg1[9] == 0) {\n        uVar3 = (**(*arg1[6] + 0xa0))(arg1[6], 3, 0, 0, 0);\n        *(arg1 + 0xc) = uVar3 & 1;\n        if ((uVar3 & 1) == 0) {\n            uVar7 = fcn.140003694(*(arg1 + 5));\n            arg1[9] = uVar7;\n            *(arg1 + 0x24) = 0;\n        }\n        else {\n            iVar9 = 0;\n        }\n    }\n    iVar8 = iVar9 + arg1[9];\n    arg1[8] = iVar8;\n    iVar6 = arg1[9];\n    if ((*(arg1 + 4) & 1) != 0) {\n        iVar6 = iVar8;\n    }\n    arg1[7] = iVar6;\n    return arg1;\n}\n",
        "token_count": 890
    },
    "14003a0e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.14003a0e4(int64_t *arg1)\n\n{\n    arg1[4] = 0;\n    arg1[5] = 0;\n    arg1[6] = 0;\n    arg1[7] = 0;\n    if ((arg1[8] != 0) && (*(arg1 + 9) != 0)) {\n        (**(*arg1 + 0xc0))();\n    }\n    arg1[8] = 0;\n    return;\n}\n",
        "token_count": 112
    },
    "14003a27": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.14003a274(code **arg1)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    code *pcVar3;\n    ulong in_RDX;\n    uchar auStack616 [56];\n    code **ppcStack560;\n    ulong uStack544;\n    ulong uStack64;\n    uint64_t uStack24;\n    \n    uStack24 = 0xfffffffffffffffe;\n    *arg1 = vtable.CMemFile.0;\n    if (arg1[8] != NULL) {\n        uStack64 = 0x14003a2a0;\n        fcn.14003a0e4(arg1);\n    }\n    arg1[4] = NULL;\n    arg1[5] = NULL;\n    arg1[6] = NULL;\n    arg1[7] = NULL;\n    uStack544 = 0xfffffffffffffffe;\n    uStack24 = *0x1400d96f0 ^ &stack0xfffffffffffffd98;\n    *arg1 = vtable.CFile.0;\n    ppcStack560 = arg1;\n    if ((arg1[1] != 0xffffffffffffffff) && (*(arg1 + 2) != 0)) {\n        fcn.140028850(arg1, in_RDX);\n    }\n    pcVar3 = arg1[3];\n    LOCK();\n    piVar1 = pcVar3 + -8;\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 + -1 < 1) {\n        (**(**(pcVar3 + -0x18) + 8))();\n    }\n    fcn.140069870(uStack24 ^ &stack0xfffffffffffffd98);\n    return;\n}\n",
        "token_count": 385
    },
    "14003a63": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.14003a638(int64_t arg1)\n\n{\n    int64_t iVar1;\n    ulong uVar2;\n    int64_t iVar3;\n    ulong *puVar4;\n    \n    if (*(arg1 + 0x20) == 0) {\n        iVar3 = fcn.14002aaa4(arg1 + 0x28, *(arg1 + 0x30), 0x18);\n        iVar1 = *(arg1 + 0x30);\n        puVar4 = iVar3 + -0x10 + iVar1 * 0x18;\n        while (iVar1 = iVar1 + -1,  -1 < iVar1) {\n            *puVar4 = *(arg1 + 0x20);\n            *(arg1 + 0x20) = puVar4;\n            puVar4 = puVar4 + -3;\n        }\n    }\n    puVar4 = *(arg1 + 0x20);\n    uVar2 = *puVar4;\n    *(arg1 + 0x18) = *(arg1 + 0x18) + 1;\n    *(arg1 + 0x20) = uVar2;\n    puVar4[1] = 0;\n    puVar4[2] = 0;\n    return;\n}\n",
        "token_count": 282
    },
    "14003a81": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t * fcn.14003a81c(int64_t *arg1, int32_t *arg2)\n\n{\n    int32_t *piVar1;\n    int64_t **ppiVar2;\n    int64_t *piVar3;\n    int32_t **ppiVar4;\n    \n    piVar1 = (**(*arg1 + 0x88))();\n    if (piVar1 == NULL) {\n        ppiVar2 = (**(*arg1 + 0x70))();\n        if ((((*0x1400b6098 == *arg2) && (arg2[1] == *0x1400b609c)) && (arg2[2] == *0x1400b60a0)) &&\n           (arg2[3] == *0x1400b60a4)) {\n            do {\n                for (piVar3 = ppiVar2[1]; *piVar3 != 0; piVar3 = piVar3 + 2) {\n                    if (*(piVar3[1] + arg1) != 0) {\n                        return piVar3[1] + arg1;\n                    }\n                }\n                ppiVar2 = *ppiVar2;\n            } while (ppiVar2 != NULL);\n        }\n        else {\n            do {\n                for (ppiVar4 = ppiVar2[1]; piVar1 = *ppiVar4,  piVar1 != NULL; ppiVar4 = ppiVar4 + 2) {\n                    if (((*piVar1 == *arg2) && (piVar1[1] == arg2[1])) &&\n                       ((piVar1[2] == arg2[2] && ((piVar1[3] == arg2[3] && (*(ppiVar4[1] + arg1) != 0)))))) {\n                        return ppiVar4[1] + arg1;\n                    }\n                }\n                ppiVar2 = *ppiVar2;\n            } while (ppiVar2 != NULL);\n        }\n        piVar1 = NULL;\n    }\n    return piVar1;\n}\n",
        "token_count": 452
    },
    "14003a8f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint64_t fcn.14003a8f0(int64_t *arg1, ulong arg2)\n\n{\n    ulong *puVar1;\n    int32_t iVar2;\n    int64_t *piVar3;\n    int64_t *piVar4;\n    int64_t iStackX8;\n    \n    piVar3 = (**(*arg1 + 0x70))();\n    do {\n        for (piVar4 = piVar3[1]; *piVar4 != 0; piVar4 = piVar4 + 2) {\n        }\n        for (piVar4 = piVar4 + 1; *piVar4 != -1; piVar4 = piVar4 + 2) {\n            puVar1 = *(arg1 + *piVar4);\n            if (puVar1 != NULL) {\n                iStackX8 = 0;\n                iVar2 = (***puVar1)(puVar1, arg2, &iStackX8);\n                if ((iVar2 == 0) && (iStackX8 != 0)) {\n                    return iStackX8;\n                }\n            }\n        }\n        piVar3 = *piVar3;\n        if (piVar3 == NULL) {\n            return 0;\n        }\n    } while( true );\n}\n",
        "token_count": 278
    },
    "14003aa0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint64_t fcn.14003aa08(int64_t arg1)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    uint64_t uVar3;\n    \n    if (*(arg1 + 0x10) == 0) {\n        LOCK();\n        piVar1 = arg1 + 8;\n        iVar2 = *piVar1;\n        *piVar1 = *piVar1 + 1;\n        uVar3 = iVar2 + 1;\n    }\n    else {\n        uVar3 = (**(**(arg1 + 0x10) + 8))();\n    }\n    return uVar3;\n}\n",
        "token_count": 142
    },
    "14003aa3": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t fcn.14003aa30(int64_t *arg1)\n\n{\n    int64_t *piVar1;\n    int32_t iVar2;\n    ulong in_R8;\n    ulong in_R9;\n    ulong uVar3;\n    ulong uStack32;\n    int32_t iStack24;\n    \n    uVar3 = 0xfffffffffffffffe;\n    if (*(arg1 + 1) == 0) {\n        iVar2 = 0;\n    }\n    else {\n        LOCK();\n        piVar1 = arg1 + 1;\n        iVar2 = *piVar1;\n        *piVar1 = *piVar1 + -1;\n        iVar2 = iVar2 + -1;\n        if (iVar2 == 0) {\n            fcn.140017bd0(&uStack32, arg1[7]);\n            (**(*arg1 + 0x20))(arg1);\n            if (iStack24 != 0) {\n                fcn.14001663c(0, uStack32, in_R8, in_R9, uVar3);\n            }\n        }\n    }\n    return iVar2;\n}\n",
        "token_count": 244
    },
    "14003aa9": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.14003aa98(int64_t psa)\n\n{\n    if (*(psa + 0x10) == 0) {\n        fcn.14003aa30(psa);\n    }\n    else {\n        (**(**(psa + 0x10) + 0x10))();\n    }\n    return;\n}\n",
        "token_count": 73
    },
    "14003ab1": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.14003ab14(int64_t arg1)\n\n{\n    ulong in_RDX;\n    ulong in_R8;\n    \n    if (*(arg1 + 0x10) == 0) {\n        fcn.14003aabc(arg1, in_RDX, in_R8);\n    }\n    else {\n        (****(arg1 + 0x10))();\n    }\n    return;\n}\n",
        "token_count": 88
    },
    "14003abf": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.14003abf4(void)\n\n{\n    uint uVar1;\n    uchar auStack72 [32];\n    uchar auStack40 [24];\n    uint64_t uStack16;\n    \n    uStack16 = *0x1400d96f0 ^ auStack72;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetOEMCP)();\n    (*_sym.imp.KERNEL32.dll_GetCPInfo)(uVar1, auStack40);\n    fcn.140069870(uStack16 ^ auStack72);\n    return;\n}\n",
        "token_count": 121
    },
    "14003aee": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.14003aee0(int64_t arg1, ulong arg2, ulong arg3)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    ulong *puVar3;\n    \n    if (*(arg1 + 0x20) == 0) {\n        iVar2 = fcn.14002aaa4(arg1 + 0x28, *(arg1 + 0x30), 0x18);\n        iVar1 = *(arg1 + 0x30);\n        puVar3 = iVar2 + -0x10 + iVar1 * 0x18;\n        while (iVar1 = iVar1 + -1,  -1 < iVar1) {\n            *puVar3 = *(arg1 + 0x20);\n            *(arg1 + 0x20) = puVar3;\n            puVar3 = puVar3 + -3;\n        }\n    }\n    puVar3 = *(arg1 + 0x20);\n    *(arg1 + 0x20) = *puVar3;\n    puVar3[1] = arg2;\n    *puVar3 = arg3;\n    *(arg1 + 0x18) = *(arg1 + 0x18) + 1;\n    puVar3[2] = 0;\n    return;\n}\n",
        "token_count": 285
    },
    "14003b17": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.14003b178(void)\n\n{\n    int32_t *piVar1;\n    int64_t *piVar2;\n    int32_t iVar3;\n    int64_t iVar4;\n    int64_t iVar5;\n    ulong arg2;\n    int64_t **arg2_00;\n    ulong pv;\n    uint auStackX8 [2];\n    int64_t *piStackX16;\n    int64_t aiStackX24 [2];\n    \n    iVar4 = fcn.140017ad4();\n    fcn.1400240f0(1);\n    auStackX8[0] = 0;\n    iVar4 = iVar4 + 0x58;\n    pv = 0x1400a7238;\n    arg2_00 = &piStackX16;\n    fcn.140027a78(iVar4, arg2_00, 0x1400a7238, auStackX8);\n    iVar3 = *(piStackX16 + -2);\n    while (iVar3 != 0) {\n        iVar5 = fcn.140017ad4();\n        (*_sym.imp.USER32.dll_UnregisterClassA)(piStackX16, *(iVar5 + 0x10));\n        pv = 0x1400a7238;\n        arg2 = fcn.140027a78(iVar4, aiStackX24, 0x1400a7238, auStackX8);\n        fcn.140007bbc(&piStackX16, arg2);\n        arg2_00 = aiStackX24[0] + -0x18;\n        LOCK();\n        piVar1 = aiStackX24[0] + -8;\n        iVar3 = *piVar1;\n        *piVar1 = *piVar1 + -1;\n        if (iVar3 + -1 < 1) {\n            (**(**arg2_00 + 8))();\n        }\n        iVar3 = *(piStackX16 + -2);\n    }\n    fcn.140004828(iVar4, arg2_00, pv);\n    fcn.140024184(1);\n    LOCK();\n    piVar2 = piStackX16 + -1;\n    iVar3 = *piVar2;\n    *piVar2 = *piVar2 + -1;\n    if (iVar3 + -1 < 1) {\n        (**(*piStackX16[-3] + 8))();\n    }\n    return;\n}\n",
        "token_count": 532
    },
    "14003b26": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.14003b268(void)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    \n    fcn.14003b178();\n    iVar3 = fcn.140017ad4();\n    if ((*(iVar3 + 8) != 0) && (pcVar1 = *(*(iVar3 + 8) + 0x78),  pcVar1 != NULL)) {\n        (*pcVar1)(1);\n    }\n    iVar3 = fcn.140017b90();\n    if (*(iVar3 + 0x78) != NULL) {\n        iVar2 = (**(**(iVar3 + 0x78) + 0x288))();\n        if (iVar2 != 0) {\n            *(iVar3 + 0x78) = 0;\n        }\n    }\n    iVar3 = fcn.140016f48();\n    iVar4 = fcn.140017ad4();\n    if (*(iVar4 + 0x28) == '\\0') {\n        if (*(iVar3 + 0x50) != 0) {\n            (*_sym.imp.USER32.dll_UnhookWindowsHookEx)();\n            *(iVar3 + 0x50) = 0;\n        }\n        if (*(iVar3 + 0x48) != 0) {\n            (*_sym.imp.USER32.dll_UnhookWindowsHookEx)();\n            *(iVar3 + 0x48) = 0;\n        }\n    }\n    return;\n}\n",
        "token_count": 329
    },
    "14003b62": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.14003b62c(int16_t *psa, ulong arg2)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int64_t iVar4;\n    int32_t iStackX8;\n    uint uStackX12;\n    int32_t aiStackX24 [2];\n    int32_t iStackX32;\n    int32_t iStackX36;\n    \n    if ((*psa != 0x2011) || (iVar2 = (*_sym.imp.OLEAUT32.dll_SafeArrayGetElemsize)(*(psa + 4)),  iVar2 != 1)) {\n        (*_sym.imp.OLEAUT32.dll_VariantCopy)(psa);\n        *psa = 0x2011;\n        uStackX12 = 0;\n        iStackX8 = arg2;\n        iVar4 = (*_sym.imp.OLEAUT32.dll_SafeArrayDestroy)(0x11, 1, &iStackX8);\n        *(psa + 4) = iVar4;\n        if (iVar4 != 0) {\n            return;\n        }\n        fcn.140020738();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    uVar3 = (*_sym.imp.OLEAUT32.dll_SafeArrayLock)(*(psa + 4), 1, aiStackX24);\n    fcn.14003b2f8(uVar3);\n    uVar3 = (*_sym.imp.OLEAUT32.dll_SafeArrayGetLBound)(*(psa + 4), 1, &iStackX8);\n    fcn.14003b2f8(uVar3);\n    iStackX8 = iStackX8 - aiStackX24[0];\n    if (iStackX8 < 0) {\n        iStackX8 = 0;\n    }\n    if (iStackX8 == arg2) {\n        return;\n    }\n    iStackX36 = aiStackX24[0];\n    iStackX32 = arg2;\n    uVar3 = (*_sym.imp.OLEAUT32.dll_SafeArrayAllocDescriptorEx)(*(psa + 4), &iStackX32);\n    fcn.14003b2f8(uVar3);\n    return;\n}\n",
        "token_count": 510
    },
    "14003cd0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.14003cd0c(uint16_t *arg1, ulong pvargSrc, ulong arg3, int64_t arg4)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int64_t iVar3;\n    \n    if ((((arg3 != 0) && (arg4 != 0)) && ((pvargSrc & 0x2000) == 0)) &&\n       ((((pvargSrc & 0x4000) == 0 && ((pvargSrc & 0x1000) == 0)) && ((pvargSrc != 0 && (pvargSrc != 1)))))) {\n        (*_sym.imp.OLEAUT32.dll_VariantCopy)();\n        iVar3 = (*_sym.imp.OLEAUT32.dll_SafeArrayDestroy)(pvargSrc, arg3, arg4);\n        *(arg1 + 4) = iVar3;\n        if (iVar3 == 0) {\n            fcn.140020738();\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        *(arg1 + 0xe) = arg3;\n        *arg1 = pvargSrc | 0x2000;\n        uVar2 = (*_sym.imp.OLEAUT32.dll_SafeArrayGetUBound)(iVar3);\n        *(arg1 + 0xc) = uVar2;\n        return;\n    }\n    fcn.140020780();\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 330
    },
    "14003d22": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nint64_t * fcn.14003d22c(int64_t *arg1, int64_t *arg2, int64_t *arg3)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    \n    iVar2 = *(arg1 + 1);\n    *(arg2 + 4) = 0;\n    *arg2 = 0;\n    *(arg2 + 1) = 0;\n    if ((iVar2 == 2) || (*(arg3 + 1) == 2)) {\n        *(arg2 + 1) = 2;\n    }\n    else {\n        if ((*(arg1 + 1) != 1) && (*(arg3 + 1) != 1)) {\n            uVar1 = *(arg1 + 4);\n            *arg2 = *arg3 + *arg1;\n            if ((*(arg3 + 4) ^ uVar1) < 0) {\n                return arg2;\n            }\n            if (-1 < (uVar1 ^ *(arg2 + 4))) {\n                return arg2;\n            }\n        }\n        *(arg2 + 1) = 1;\n    }\n    return arg2;\n}\n",
        "token_count": 259
    },
    "14003df0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nvoid fcn.14003df0c(int64_t arg1, uint16_t *arg2)\n\n{\n    uchar uVar1;\n    uint16_t uVar2;\n    ulong uVar3;\n    code *pcVar4;\n    uint32_t uVar5;\n    uint64_t uVar6;\n    int64_t iVar7;\n    uint uVar8;\n    uint uVar9;\n    uchar auStack152 [32];\n    int64_t *piStack120;\n    uint16_t *puStack112;\n    uchar auStack104 [16];\n    ulong uStack88;\n    uint uStack80;\n    ushort uStack76;\n    ushort uStack74;\n    uchar auStack72 [16];\n    uint64_t uStack56;\n    \n    uStack88 = 0xfffffffffffffffe;\n    uStack56 = *0x1400d96f0 ^ auStack152;\n    uVar2 = *arg2;\n    puStack112 = arg2;\n    if ((~*(arg1 + 0x20) & 1) == 0) {\n        fcn.1400384a8(2, *(arg1 + 0x18));\n        pcVar4 = swi(3);\n        (*pcVar4)();\n        return;\n    }\n    uVar6 = *(arg1 + 0x38) + 2;\n    if (*(arg1 + 0x40) <= uVar6 && uVar6 != *(arg1 + 0x40)) {\n        fcn.140038770(arg1);\n    }\n    **(arg1 + 0x38) = uVar2;\n    *(arg1 + 0x38) = *(arg1 + 0x38) + 2;\n    iVar7 = *(arg1 + 0x38);\n    if (((*arg2 & 0x4000) != 0) || ((*arg2 & 0x2000) != 0)) {\n        (*_sym.imp.OLEAUT32.dll_VariantCopy)(arg2);\n        goto code_r0x00014003e68c;\n    }\n    uVar2 = *arg2;\n    if (uVar2 < 0xb) {\n        if (uVar2 == 10) {\n            uVar8 = *(arg2 + 4);\n            if ((~*(arg1 + 0x20) & 1) == 0) {\n                fcn.1400384a8(2, *(arg1 + 0x18));\n                pcVar4 = swi(3);\n                (*pcVar4)();\n                return;\n            }\n            if (*(arg1 + 0x40) <= iVar7 + 4U && iVar7 + 4U != *(arg1 + 0x40)) {\n                fcn.140038770(arg1);\n            }\n            **(arg1 + 0x38) = uVar8;\n            *(arg1 + 0x38) = *(arg1 + 0x38) + 4;\n            (*_sym.imp.OLEAUT32.dll_VariantCopy)(arg2);\n            goto code_r0x00014003e68c;\n        }\n        if (uVar2 < 6) {\n            if (uVar2 == 5) {\n                uVar8 = *(arg2 + 4);\n                uVar9 = *(arg2 + 4) >> 0x20;\n                if ((~*(arg1 + 0x20) & 1) == 0) {\n                    fcn.1400384a8(2, *(arg1 + 0x18));\n                    pcVar4 = swi(3);\n                    (*pcVar4)();\n                    return;\n                }\n                if (*(arg1 + 0x40) <= iVar7 + 8U && iVar7 + 8U != *(arg1 + 0x40)) {\n                    fcn.140038770(arg1);\n                }\n                **(arg1 + 0x38) = CONCAT44(uVar9, uVar8);\n                *(arg1 + 0x38) = *(arg1 + 0x38) + 8;\n                (*_sym.imp.OLEAUT32.dll_VariantCopy)(arg2);\n                goto code_r0x00014003e68c;\n            }\n            if (uVar2 < 2) {\n                (*_sym.imp.OLEAUT32.dll_VariantCopy)(arg2);\n                goto code_r0x00014003e68c;\n            }\n            if (uVar2 == 2) {\n                uVar2 = arg2[4];\n                if ((~*(arg1 + 0x20) & 1) == 0) {\n                    fcn.1400384a8(2, *(arg1 + 0x18));\n                    pcVar4 = swi(3);\n                    (*pcVar4)();\n                    return;\n                }\n                if (*(arg1 + 0x40) <= iVar7 + 2U && iVar7 + 2U != *(arg1 + 0x40)) {\n                    fcn.140038770(arg1);\n                }\n                **(arg1 + 0x38) = uVar2;\n                *(arg1 + 0x38) = *(arg1 + 0x38) + 2;\n                (*_sym.imp.OLEAUT32.dll_VariantCopy)(arg2);\n                goto code_r0x00014003e68c;\n            }\n            if (uVar2 == 3) {\n                uVar8 = *(arg2 + 4);\n                if ((~*(arg1 + 0x20) & 1) == 0) {\n                    fcn.1400384a8(2, *(arg1 + 0x18));\n                    pcVar4 = swi(3);\n                    (*pcVar4)();\n                    return;\n                }\n                if (*(arg1 + 0x40) <= iVar7 + 4U && iVar7 + 4U != *(arg1 + 0x40)) {\n                    fcn.140038770(arg1);\n                }\n                **(arg1 + 0x38) = uVar8;\n                *(arg1 + 0x38) = *(arg1 + 0x38) + 4;\n                (*_sym.imp.OLEAUT32.dll_VariantCopy)(arg2);\n                goto code_r0x00014003e68c;\n            }\n            if (uVar2 == 4) {\n                uVar8 = *(arg2 + 4);\n                if ((~*(arg1 + 0x20) & 1) == 0) {\n                    fcn.1400384a8(2, *(arg1 + 0x18));\n                    pcVar4 = swi(3);\n                    (*pcVar4)();\n                    return;\n                }\n                if (*(arg1 + 0x40) <= iVar7 + 4U && iVar7 + 4U != *(arg1 + 0x40)) {\n                    fcn.140038770(arg1);\n                }\n                **(arg1 + 0x38) = uVar8;\n                *(arg1 + 0x38) = *(arg1 + 0x38) + 4;\n                (*_sym.imp.OLEAUT32.dll_VariantCopy)(arg2);\n                goto code_r0x00014003e68c;\n            }\n        }\n        else {\n            if (uVar2 == 6) {\n                uVar8 = *(arg2 + 4);\n                if ((~*(arg1 + 0x20) & 1) == 0) {\n                    fcn.1400384a8(2, *(arg1 + 0x18));\n                    pcVar4 = swi(3);\n                    (*pcVar4)();\n                    return;\n                }\n                if (*(arg1 + 0x40) <= iVar7 + 4U && iVar7 + 4U != *(arg1 + 0x40)) {\n                    fcn.140038770(arg1);\n                }\n                **(arg1 + 0x38) = uVar8;\n                *(arg1 + 0x38) = *(arg1 + 0x38) + 4;\n                uVar8 = *(arg2 + 6);\n                if ((~*(arg1 + 0x20) & 1) == 0) {\n                    fcn.1400384a8(2, *(arg1 + 0x18));\n                    pcVar4 = swi(3);\n                    (*pcVar4)();\n                    return;\n                }\n                uVar6 = *(arg1 + 0x38) + 4;\n                if (*(arg1 + 0x40) <= uVar6 && uVar6 != *(arg1 + 0x40)) {\n                    fcn.140038770(arg1);\n                }\n                **(arg1 + 0x38) = uVar8;\n                *(arg1 + 0x38) = *(arg1 + 0x38) + 4;\n                (*_sym.imp.OLEAUT32.dll_VariantCopy)(arg2);\n                goto code_r0x00014003e68c;\n            }\n            if (uVar2 == 7) {\n                uVar8 = *(arg2 + 4);\n                uVar9 = *(arg2 + 4) >> 0x20;\n                if ((~*(arg1 + 0x20) & 1) == 0) {\n                    fcn.1400384a8(2, *(arg1 + 0x18));\n                    pcVar4 = swi(3);\n                    (*pcVar4)();\n                    return;\n                }\n                if (*(arg1 + 0x40) <= iVar7 + 8U && iVar7 + 8U != *(arg1 + 0x40)) {\n                    fcn.140038770(arg1);\n                }\n                **(arg1 + 0x38) = CONCAT44(uVar9, uVar8);\n                *(arg1 + 0x38) = *(arg1 + 0x38) + 8;\n                (*_sym.imp.OLEAUT32.dll_VariantCopy)(arg2);\n                goto code_r0x00014003e68c;\n            }\n            if (uVar2 == 8) {\n                uVar5 = (*_sym.imp.OLEAUT32.dll_SysAllocStringByteLen)();\n                if ((~*(arg1 + 0x20) & 1) == 0) {\n                    fcn.1400384a8(2, *(arg1 + 0x18));\n                    pcVar4 = swi(3);\n                    (*pcVar4)();\n                    return;\n                }\n                uVar6 = *(arg1 + 0x38) + 4;\n                if (*(arg1 + 0x40) <= uVar6 && uVar6 != *(arg1 + 0x40)) {\n                    fcn.140038770(arg1);\n                }\n                **(arg1 + 0x38) = uVar5;\n                *(arg1 + 0x38) = *(arg1 + 0x38) + 4;\n                if (uVar5 != 0) {\n                    fcn.1400392d0(arg1, *(arg2 + 4), uVar5);\n                }\n                (*_sym.imp.OLEAUT32.dll_VariantCopy)(arg2);\n                goto code_r0x00014003e68c;\n            }\n            if (uVar2 == 9) goto code_r0x00014003e4e1;\n        }\n    }\n    else {\n        if (uVar2 == 0xb) {\n            uVar2 = arg2[4];\n            if ((~*(arg1 + 0x20) & 1) == 0) {\n                fcn.1400384a8(2, *(arg1 + 0x18));\n                pcVar4 = swi(3);\n                (*pcVar4)();\n                return;\n            }\n            if (*(arg1 + 0x40) <= iVar7 + 2U && iVar7 + 2U != *(arg1 + 0x40)) {\n                fcn.140038770(arg1);\n            }\n            **(arg1 + 0x38) = uVar2;\n            *(arg1 + 0x38) = *(arg1 + 0x38) + 2;\n            (*_sym.imp.OLEAUT32.dll_VariantCopy)(arg2);\n            goto code_r0x00014003e68c;\n        }\n        if (uVar2 == 0xd) {\ncode_r0x00014003e4e1:\n            fcn.1400540ac(auStack104, arg1);\n            uVar5 = (****(arg2 + 4))(*(arg2 + 4), 0x1400b61b8, &piStack120);\n            if (uVar5 < 0) {\n                uVar5 = (****(arg2 + 4))(*(arg2 + 4), 0x1400b68c8, &piStack120);\n            }\n            fcn.14003b2f8(uVar5);\n            uVar5 = (**(*piStack120 + 0x18))(piStack120, &uStack80);\n            fcn.14003b2f8(uVar5);\n            if ((~*(arg1 + 0x20) & 1) == 0) {\n                fcn.1400384a8(2, *(arg1 + 0x18));\n            }\n            uVar6 = *(arg1 + 0x38) + 4;\n            if (*(arg1 + 0x40) <= uVar6 && uVar6 != *(arg1 + 0x40)) {\n                fcn.140038770(arg1);\n            }\n            **(arg1 + 0x38) = uStack80;\n            *(arg1 + 0x38) = *(arg1 + 0x38) + 4;\n            iVar7 = *(arg1 + 0x38);\n            if ((~*(arg1 + 0x20) & 1) == 0) {\n                iVar7 = 2;\n                fcn.1400384a8(2, *(arg1 + 0x18));\n            }\n            if (*(arg1 + 0x40) <= iVar7 + 2U && iVar7 + 2U != *(arg1 + 0x40)) {\n                fcn.140038770(arg1);\n            }\n            **(arg1 + 0x38) = uStack76;\n            *(arg1 + 0x38) = *(arg1 + 0x38) + 2;\n            iVar7 = *(arg1 + 0x38);\n            if ((~*(arg1 + 0x20) & 1) == 0) {\n                iVar7 = 2;\n                fcn.1400384a8(2, *(arg1 + 0x18));\n            }\n            if (*(arg1 + 0x40) <= iVar7 + 2U && iVar7 + 2U != *(arg1 + 0x40)) {\n                fcn.140038770(arg1);\n            }\n            **(arg1 + 0x38) = uStack74;\n            *(arg1 + 0x38) = *(arg1 + 0x38) + 2;\n            fcn.1400392d0(arg1, auStack72, 8);\n            uVar5 = (**(*piStack120 + 0x30))(piStack120, auStack104, 1);\n            fcn.14003b2f8(uVar5);\n            (**(*piStack120 + 0x10))();\n            (*_sym.imp.OLEAUT32.dll_VariantCopy)(arg2);\n            goto code_r0x00014003e68c;\n        }\n        if (uVar2 == 0x10) {\n            uVar1 = *(arg2 + 4);\n            if ((~*(arg1 + 0x20) & 1) == 0) {\n                fcn.1400384a8(2, *(arg1 + 0x18));\n                pcVar4 = swi(3);\n                (*pcVar4)();\n                return;\n            }\n            if (*(arg1 + 0x40) <= iVar7 + 1U && iVar7 + 1U != *(arg1 + 0x40)) {\n                fcn.140038770(arg1);\n            }\n            **(arg1 + 0x38) = uVar1;\n            *(arg1 + 0x38) = *(arg1 + 0x38) + 1;\n            (*_sym.imp.OLEAUT32.dll_VariantCopy)(arg2);\n            goto code_r0x00014003e68c;\n        }\n        if (uVar2 == 0x11) {\n            uVar1 = *(arg2 + 4);\n            if ((~*(arg1 + 0x20) & 1) == 0) {\n                fcn.1400384a8(2, *(arg1 + 0x18));\n                pcVar4 = swi(3);\n                (*pcVar4)();\n                return;\n            }\n            if (*(arg1 + 0x40) <= iVar7 + 1U && iVar7 + 1U != *(arg1 + 0x40)) {\n                fcn.140038770(arg1);\n            }\n            **(arg1 + 0x38) = uVar1;\n            *(arg1 + 0x38) = *(arg1 + 0x38) + 1;\n            (*_sym.imp.OLEAUT32.dll_VariantCopy)(arg2);\n            goto code_r0x00014003e68c;\n        }\n        if (uVar2 == 0x12) {\n            uVar2 = arg2[4];\n            if ((~*(arg1 + 0x20) & 1) == 0) {\n                fcn.1400384a8(2, *(arg1 + 0x18));\n                pcVar4 = swi(3);\n                (*pcVar4)();\n                return;\n            }\n            if (*(arg1 + 0x40) <= iVar7 + 2U && iVar7 + 2U != *(arg1 + 0x40)) {\n                fcn.140038770(arg1);\n            }\n            **(arg1 + 0x38) = uVar2;\n            *(arg1 + 0x38) = *(arg1 + 0x38) + 2;\n            (*_sym.imp.OLEAUT32.dll_VariantCopy)(arg2);\n            goto code_r0x00014003e68c;\n        }\n        if (uVar2 == 0x13) {\n            uVar8 = *(arg2 + 4);\n            if ((~*(arg1 + 0x20) & 1) == 0) {\n                fcn.1400384a8(2, *(arg1 + 0x18));\n                pcVar4 = swi(3);\n                (*pcVar4)();\n                return;\n            }\n            if (*(arg1 + 0x40) <= iVar7 + 4U && iVar7 + 4U != *(arg1 + 0x40)) {\n                fcn.140038770(arg1);\n            }\n            **(arg1 + 0x38) = uVar8;\n            *(arg1 + 0x38) = *(arg1 + 0x38) + 4;\n            (*_sym.imp.OLEAUT32.dll_VariantCopy)(arg2);\n            goto code_r0x00014003e68c;\n        }\n        if (uVar2 == 0x14) {\n            uVar3 = *(arg2 + 4);\n            if ((~*(arg1 + 0x20) & 1) == 0) {\n                fcn.1400384a8(2, *(arg1 + 0x18));\n                pcVar4 = swi(3);\n                (*pcVar4)();\n                return;\n            }\n            if (*(arg1 + 0x40) <= iVar7 + 8U && iVar7 + 8U != *(arg1 + 0x40)) {\n                fcn.140038770(arg1);\n            }\n            **(arg1 + 0x38) = uVar3;\n            *(arg1 + 0x38) = *(arg1 + 0x38) + 8;\n            (*_sym.imp.OLEAUT32.dll_VariantCopy)(arg2);\n            goto code_r0x00014003e68c;\n        }\n        if (uVar2 == 0x15) {\n            uVar3 = *(arg2 + 4);\n            if ((~*(arg1 + 0x20) & 1) == 0) {\n                fcn.1400384a8(2, *(arg1 + 0x18));\n                pcVar4 = swi(3);\n                (*pcVar4)();\n                return;\n            }\n            if (*(arg1 + 0x40) <= iVar7 + 8U && iVar7 + 8U != *(arg1 + 0x40)) {\n                fcn.140038770(arg1);\n            }\n            **(arg1 + 0x38) = uVar3;\n            *(arg1 + 0x38) = *(arg1 + 0x38) + 8;\n            (*_sym.imp.OLEAUT32.dll_VariantCopy)(arg2);\n            goto code_r0x00014003e68c;\n        }\n    }\n    (*_sym.imp.OLEAUT32.dll_VariantCopy)(arg2);\ncode_r0x00014003e68c:\n    fcn.140069870(uStack56 ^ auStack152);\n    return;\n}\n",
        "token_count": 4736
    },
    "14003e6b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nvoid fcn.14003e6b8(int64_t arg1, uint16_t *pvargDest)\n\n{\n    ulong *puVar1;\n    uint16_t uVar2;\n    uint *puVar3;\n    ushort *puVar4;\n    code *pcVar5;\n    uint32_t uVar6;\n    int32_t iVar7;\n    uint32_t uVar8;\n    uint64_t uVar9;\n    int64_t iVar10;\n    ulong uVar11;\n    ulong uVar12;\n    uchar auStack168 [32];\n    ulong *puStack136;\n    int64_t *piStack120;\n    uint16_t *puStack112;\n    ulong uStack104;\n    uchar auStack96 [16];\n    uint uStack80;\n    ushort uStack76;\n    ushort uStack74;\n    uchar auStack72 [16];\n    uint64_t uStack56;\n    \n    uStack104 = 0xfffffffffffffffe;\n    uStack56 = *0x1400d96f0 ^ auStack168;\n    puStack112 = pvargDest;\n    if (*pvargDest != 0) {\n        (*_sym.imp.OLEAUT32.dll_VariantCopy)();\n    }\n    if ((*(arg1 + 0x20) & 1) == 0) {\n        fcn.1400384a8(4, *(arg1 + 0x18));\n        pcVar5 = swi(3);\n        (*pcVar5)();\n        return;\n    }\n    uVar9 = *(arg1 + 0x38) + 2;\n    if (*(arg1 + 0x40) <= uVar9 && uVar9 != *(arg1 + 0x40)) {\n        fcn.140038830(arg1, (*(arg1 + 0x38) - *(arg1 + 0x40)) + 2);\n    }\n    *pvargDest = **(arg1 + 0x38);\n    *(arg1 + 0x38) = *(arg1 + 0x38) + 2;\n    iVar10 = *(arg1 + 0x38);\n    if (((*pvargDest & 0x4000) != 0) || ((*pvargDest & 0x2000) != 0)) goto code_r0x00014003ee95;\n    uVar2 = *pvargDest;\n    if (uVar2 < 0xb) {\n        if (uVar2 == 10) {\n            if ((*(arg1 + 0x20) & 1) == 0) {\n                fcn.1400384a8(4, *(arg1 + 0x18));\n                pcVar5 = swi(3);\n                (*pcVar5)();\n                return;\n            }\n            if (*(arg1 + 0x40) <= iVar10 + 4U && iVar10 + 4U != *(arg1 + 0x40)) {\n                fcn.140038830(arg1, (*(arg1 + 0x38) - *(arg1 + 0x40)) + 4);\n            }\n            *(pvargDest + 4) = **(arg1 + 0x38);\n            *(arg1 + 0x38) = *(arg1 + 0x38) + 4;\n            goto code_r0x00014003ee95;\n        }\n        if (uVar2 < 6) {\n            if (uVar2 == 5) {\n                if ((*(arg1 + 0x20) & 1) == 0) {\n                    fcn.1400384a8(4, *(arg1 + 0x18));\n                    pcVar5 = swi(3);\n                    (*pcVar5)();\n                    return;\n                }\n                if (*(arg1 + 0x40) <= iVar10 + 8U && iVar10 + 8U != *(arg1 + 0x40)) {\n                    fcn.140038830(arg1, (*(arg1 + 0x38) - *(arg1 + 0x40)) + 8);\n                }\n                *(pvargDest + 4) = **(arg1 + 0x38);\n                *(arg1 + 0x38) = *(arg1 + 0x38) + 8;\n            }\n            else if (1 < uVar2) {\n                if (uVar2 == 2) {\n                    if ((*(arg1 + 0x20) & 1) == 0) {\n                        fcn.1400384a8(4, *(arg1 + 0x18));\n                        pcVar5 = swi(3);\n                        (*pcVar5)();\n                        return;\n                    }\n                    if (*(arg1 + 0x40) <= iVar10 + 2U && iVar10 + 2U != *(arg1 + 0x40)) {\n                        fcn.140038830(arg1, (*(arg1 + 0x38) - *(arg1 + 0x40)) + 2);\n                    }\n                    pvargDest[4] = **(arg1 + 0x38);\n                    *(arg1 + 0x38) = *(arg1 + 0x38) + 2;\n                }\n                else if (uVar2 == 3) {\n                    if ((*(arg1 + 0x20) & 1) == 0) {\n                        fcn.1400384a8(4, *(arg1 + 0x18));\n                        pcVar5 = swi(3);\n                        (*pcVar5)();\n                        return;\n                    }\n                    if (*(arg1 + 0x40) <= iVar10 + 4U && iVar10 + 4U != *(arg1 + 0x40)) {\n                        fcn.140038830(arg1, (*(arg1 + 0x38) - *(arg1 + 0x40)) + 4);\n                    }\n                    *(pvargDest + 4) = **(arg1 + 0x38);\n                    *(arg1 + 0x38) = *(arg1 + 0x38) + 4;\n                }\n                else if (uVar2 == 4) {\n                    if ((*(arg1 + 0x20) & 1) == 0) {\n                        fcn.1400384a8(uVar2, *(arg1 + 0x18));\n                        pcVar5 = swi(3);\n                        (*pcVar5)();\n                        return;\n                    }\n                    if (*(arg1 + 0x40) <= iVar10 + 4U && iVar10 + 4U != *(arg1 + 0x40)) {\n                        fcn.140038830(arg1, (*(arg1 + 0x38) - *(arg1 + 0x40)) + 4);\n                    }\n                    *(pvargDest + 4) = **(arg1 + 0x38);\n                    *(arg1 + 0x38) = *(arg1 + 0x38) + 4;\n                }\n            }\n            goto code_r0x00014003ee95;\n        }\n        if (uVar2 == 6) {\n            if ((*(arg1 + 0x20) & 1) == 0) {\n                fcn.1400384a8(4, *(arg1 + 0x18));\n                pcVar5 = swi(3);\n                (*pcVar5)();\n                return;\n            }\n            if (*(arg1 + 0x40) <= iVar10 + 4U && iVar10 + 4U != *(arg1 + 0x40)) {\n                fcn.140038830(arg1, (*(arg1 + 0x38) - *(arg1 + 0x40)) + 4);\n            }\n            *(pvargDest + 4) = **(arg1 + 0x38);\n            *(arg1 + 0x38) = *(arg1 + 0x38) + 4;\n            if ((*(arg1 + 0x20) & 1) == 0) {\n                fcn.1400384a8(4, *(arg1 + 0x18));\n                pcVar5 = swi(3);\n                (*pcVar5)();\n                return;\n            }\n            uVar9 = *(arg1 + 0x38) + 4;\n            if (*(arg1 + 0x40) <= uVar9 && uVar9 != *(arg1 + 0x40)) {\n                fcn.140038830(arg1, (*(arg1 + 0x38) - *(arg1 + 0x40)) + 4);\n            }\n            *(pvargDest + 6) = **(arg1 + 0x38);\n            *(arg1 + 0x38) = *(arg1 + 0x38) + 4;\n            goto code_r0x00014003ee95;\n        }\n        if (uVar2 == 7) {\n            if ((*(arg1 + 0x20) & 1) == 0) {\n                fcn.1400384a8(4, *(arg1 + 0x18));\n                pcVar5 = swi(3);\n                (*pcVar5)();\n                return;\n            }\n            if (*(arg1 + 0x40) <= iVar10 + 8U && iVar10 + 8U != *(arg1 + 0x40)) {\n                fcn.140038830(arg1, (*(arg1 + 0x38) - *(arg1 + 0x40)) + 8);\n            }\n            *(pvargDest + 4) = **(arg1 + 0x38);\n            *(arg1 + 0x38) = *(arg1 + 0x38) + 8;\n            goto code_r0x00014003ee95;\n        }\n        if (uVar2 == 8) {\n            if ((*(arg1 + 0x20) & 1) == 0) {\n                fcn.1400384a8(4, *(arg1 + 0x18));\n                pcVar5 = swi(3);\n                (*pcVar5)();\n                return;\n            }\n            if (*(arg1 + 0x40) <= iVar10 + 4U && iVar10 + 4U != *(arg1 + 0x40)) {\n                fcn.140038830(arg1, (*(arg1 + 0x38) - *(arg1 + 0x40)) + 4);\n            }\n            uVar8 = **(arg1 + 0x38);\n            *(arg1 + 0x38) = *(arg1 + 0x38) + 1;\n            if (uVar8 == 0) {\n                *(pvargDest + 4) = 0;\n            }\n            else {\n                iVar10 = (*_sym.imp.OLEAUT32.dll_DllRegisterServer)(0, uVar8);\n                *(pvargDest + 4) = iVar10;\n                if (iVar10 == 0) {\n                    fcn.140020738();\n                    pcVar5 = swi(3);\n                    (*pcVar5)();\n                    return;\n                }\n                uVar6 = fcn.140038594(arg1, iVar10, uVar8);\n                if (uVar6 != uVar8) {\n                    fcn.1400384a8(3, 0);\n                    pcVar5 = swi(3);\n                    (*pcVar5)();\n                    return;\n                }\n            }\n            goto code_r0x00014003ee95;\n        }\n        if (uVar2 != 9) goto code_r0x00014003ee95;\n    }\n    else {\n        if (uVar2 == 0xb) {\n            if ((*(arg1 + 0x20) & 1) == 0) {\n                fcn.1400384a8(4, *(arg1 + 0x18));\n                pcVar5 = swi(3);\n                (*pcVar5)();\n                return;\n            }\n            if (*(arg1 + 0x40) <= iVar10 + 2U && iVar10 + 2U != *(arg1 + 0x40)) {\n                fcn.140038830(arg1, (*(arg1 + 0x38) - *(arg1 + 0x40)) + 2);\n            }\n            pvargDest[4] = **(arg1 + 0x38);\n            *(arg1 + 0x38) = *(arg1 + 0x38) + 2;\n            goto code_r0x00014003ee95;\n        }\n        if (uVar2 != 0xd) {\n            if (uVar2 == 0x10) {\n                if ((*(arg1 + 0x20) & 1) == 0) {\n                    fcn.1400384a8(4, *(arg1 + 0x18));\n                    pcVar5 = swi(3);\n                    (*pcVar5)();\n                    return;\n                }\n                if (*(arg1 + 0x40) <= iVar10 + 1U && iVar10 + 1U != *(arg1 + 0x40)) {\n                    fcn.140038830(arg1, (*(arg1 + 0x38) - *(arg1 + 0x40)) + 1);\n                }\n                *(pvargDest + 4) = **(arg1 + 0x38);\n                *(arg1 + 0x38) = *(arg1 + 0x38) + 1;\n            }\n            else if (uVar2 == 0x11) {\n                if ((*(arg1 + 0x20) & 1) == 0) {\n                    fcn.1400384a8(4, *(arg1 + 0x18));\n                    pcVar5 = swi(3);\n                    (*pcVar5)();\n                    return;\n                }\n                if (*(arg1 + 0x40) <= iVar10 + 1U && iVar10 + 1U != *(arg1 + 0x40)) {\n                    fcn.140038830(arg1, (*(arg1 + 0x38) - *(arg1 + 0x40)) + 1);\n                }\n                *(pvargDest + 4) = **(arg1 + 0x38);\n                *(arg1 + 0x38) = *(arg1 + 0x38) + 1;\n            }\n            else if (uVar2 == 0x12) {\n                if ((*(arg1 + 0x20) & 1) == 0) {\n                    fcn.1400384a8(4, *(arg1 + 0x18));\n                    pcVar5 = swi(3);\n                    (*pcVar5)();\n                    return;\n                }\n                if (*(arg1 + 0x40) <= iVar10 + 2U && iVar10 + 2U != *(arg1 + 0x40)) {\n                    fcn.140038830(arg1, (*(arg1 + 0x38) - *(arg1 + 0x40)) + 2);\n                }\n                pvargDest[4] = **(arg1 + 0x38);\n                *(arg1 + 0x38) = *(arg1 + 0x38) + 2;\n            }\n            else if (uVar2 == 0x13) {\n                if ((*(arg1 + 0x20) & 1) == 0) {\n                    fcn.1400384a8(4, *(arg1 + 0x18));\n                    pcVar5 = swi(3);\n                    (*pcVar5)();\n                    return;\n                }\n                if (*(arg1 + 0x40) <= iVar10 + 4U && iVar10 + 4U != *(arg1 + 0x40)) {\n                    fcn.140038830(arg1, (*(arg1 + 0x38) - *(arg1 + 0x40)) + 4);\n                }\n                *(pvargDest + 4) = **(arg1 + 0x38);\n                *(arg1 + 0x38) = *(arg1 + 0x38) + 4;\n            }\n            else if (uVar2 == 0x14) {\n                if ((*(arg1 + 0x20) & 1) == 0) {\n                    fcn.1400384a8(4, *(arg1 + 0x18));\n                    pcVar5 = swi(3);\n                    (*pcVar5)();\n                    return;\n                }\n                if (*(arg1 + 0x40) <= iVar10 + 8U && iVar10 + 8U != *(arg1 + 0x40)) {\n                    fcn.140038830(arg1, (*(arg1 + 0x38) - *(arg1 + 0x40)) + 8);\n                }\n                *(pvargDest + 4) = **(arg1 + 0x38);\n                *(arg1 + 0x38) = *(arg1 + 0x38) + 8;\n            }\n            else if (uVar2 == 0x15) {\n                if ((*(arg1 + 0x20) & 1) == 0) {\n                    fcn.1400384a8(4, *(arg1 + 0x18));\n                    pcVar5 = swi(3);\n                    (*pcVar5)();\n                    return;\n                }\n                if (*(arg1 + 0x40) <= iVar10 + 8U && iVar10 + 8U != *(arg1 + 0x40)) {\n                    fcn.140038830(arg1, (*(arg1 + 0x38) - *(arg1 + 0x40)) + 8);\n                }\n                *(pvargDest + 4) = **(arg1 + 0x38);\n                *(arg1 + 0x38) = *(arg1 + 0x38) + 8;\n            }\n            goto code_r0x00014003ee95;\n        }\n    }\n    piStack120 = NULL;\n    fcn.1400540ac(auStack96, arg1);\n    if ((*(arg1 + 0x20) & 1) == 0) {\n        fcn.1400384a8(4, *(arg1 + 0x18));\n        pcVar5 = swi(3);\n        (*pcVar5)();\n        return;\n    }\n    uVar9 = *(arg1 + 0x38) + 4;\n    if (*(arg1 + 0x40) <= uVar9 && uVar9 != *(arg1 + 0x40)) {\n        fcn.140038830(arg1, (*(arg1 + 0x38) - *(arg1 + 0x40)) + 4);\n    }\n    puVar3 = *(arg1 + 0x38);\n    uStack80 = *puVar3;\n    *(arg1 + 0x38) = puVar3 + 1;\n    if ((*(arg1 + 0x20) & 1) == 0) {\n        fcn.1400384a8(4, *(arg1 + 0x18));\n        pcVar5 = swi(3);\n        (*pcVar5)();\n        return;\n    }\n    if (*(arg1 + 0x40) <= puVar3 + 6U && puVar3 + 6U != *(arg1 + 0x40)) {\n        fcn.140038830(arg1, (*(arg1 + 0x38) - *(arg1 + 0x40)) + 2);\n    }\n    puVar4 = *(arg1 + 0x38);\n    uStack76 = *puVar4;\n    *(arg1 + 0x38) = puVar4 + 1;\n    if ((*(arg1 + 0x20) & 1) == 0) {\n        fcn.1400384a8(4, *(arg1 + 0x18));\n        pcVar5 = swi(3);\n        (*pcVar5)();\n        return;\n    }\n    if (*(arg1 + 0x40) <= puVar4 + 2 && puVar4 + 2 != *(arg1 + 0x40)) {\n        fcn.140038830(arg1, (*(arg1 + 0x38) - *(arg1 + 0x40)) + 2);\n    }\n    uStack74 = **(arg1 + 0x38);\n    *(arg1 + 0x38) = *(arg1 + 0x38) + 1;\n    iVar7 = fcn.140038594(arg1, auStack72, 8);\n    if (iVar7 != 8) {\n        fcn.1400384a8(3, 0);\n        pcVar5 = swi(3);\n        (*pcVar5)();\n        return;\n    }\n    uVar12 = 0x1400b44e8;\n    uVar11 = 0x1400b44e8;\n    if (*pvargDest == 0xd) {\n        uVar11 = 0x1400b6098;\n    }\n    puVar1 = pvargDest + 4;\n    puStack136 = puVar1;\n    uVar8 = (*_sym.imp.ole32.dll_CoCreateInstance)(&uStack80, 0, 0x17, uVar11);\n    if (uVar8 == 0x80070057) {\n        if (*pvargDest == 0xd) {\n            uVar12 = 0x1400b6098;\n        }\n        puStack136 = puVar1;\n        uVar8 = (*_sym.imp.ole32.dll_CoCreateInstance)(&uStack80, 0, 7, uVar12);\n    }\n    fcn.14003b2f8(uVar8);\n    uVar8 = (****puVar1)(*puVar1, 0x1400b61b8, &piStack120);\n    if (uVar8 < 0) {\n        uVar8 = (****puVar1)(*puVar1, 0x1400b68c8, &piStack120);\n    }\n    fcn.14003b2f8(uVar8);\n    uVar8 = (**(*piStack120 + 0x28))(piStack120, auStack96);\n    fcn.14003b2f8(uVar8);\n    (**(*piStack120 + 0x10))();\ncode_r0x00014003ee95:\n    fcn.140069870(uStack56 ^ auStack168);\n    return;\n}\n",
        "token_count": 4929
    },
    "14003f17": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nint64_t * fcn.14003f178(ulong *arg1, int64_t *arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    code *pcVar2;\n    uint32_t uVar3;\n    int64_t *piVar4;\n    int64_t **ppiVar5;\n    int64_t iVar6;\n    int64_t **ppiVar7;\n    int64_t **ppiStack56;\n    ulong uStack48;\n    ushort auStack40 [4];\n    ulong auStack32 [3];\n    \n    uStack48 = 0xfffffffffffffffe;\n    ppiStack56 = ppiStack56 & 0xffffffff00000000;\n    piVar4 = fcn.140017fc0();\n    if (piVar4 == NULL) {\n        fcn.1400031e0(0x80004005);\n        pcVar2 = swi(3);\n        piVar4 = (*pcVar2)();\n        return piVar4;\n    }\n    ppiVar5 = (**(*piVar4 + 0x18))();\n    ppiVar7 = ppiVar5 + 3;\n    ppiStack56 = ppiVar7;\n    if (*(arg1 + 1) == 2) {\n        iVar6 = fcn.1400075ec(ppiVar5);\n        *arg2 = iVar6 + 0x18;\n        LOCK();\n        ppiVar7 = ppiVar5 + 2;\n        iVar1 = *ppiVar7;\n        *ppiVar7 = *ppiVar7 + -1;\n        if (iVar1 + -1 < 1) {\n            (**(**ppiVar5 + 8))(*ppiVar5, ppiVar5);\n        }\n    }\n    else if (*(arg1 + 1) == 1) {\n        iVar6 = fcn.140017ddc();\n        if (iVar6 != 0) {\n            iVar6 = fcn.140002fd0(&ppiStack56, iVar6, 0xf098);\n            ppiVar7 = ppiStack56;\n        }\n        if (iVar6 == 0) {\n            fcn.140020780();\n            pcVar2 = swi(3);\n            piVar4 = (*pcVar2)();\n            return piVar4;\n        }\n        iVar6 = fcn.1400075ec(ppiVar7 + -3);\n        *arg2 = iVar6 + 0x18;\n        LOCK();\n        ppiVar5 = ppiVar7 + -1;\n        iVar1 = *ppiVar5;\n        *ppiVar5 = *ppiVar5 + -1;\n        if (iVar1 + -1 < 1) {\n            (**(*ppiVar7[-3] + 8))(ppiVar7[-3], ppiVar7 + -3);\n        }\n    }\n    else {\n        fcn.1400698a0(auStack40, 0, 0x18);\n        uVar3 = (*_sym.imp.OLEAUT32.dll_VarBstrFromDate)(*arg1, arg4, arg3, auStack32);\n        fcn.14003b2f8(uVar3);\n        auStack40[0] = 8;\n        fcn.14001f14c(arg2, auStack32[0]);\n        (*_sym.imp.OLEAUT32.dll_VariantCopy)(auStack40);\n        LOCK();\n        ppiVar7 = ppiVar5 + 2;\n        iVar1 = *ppiVar7;\n        *ppiVar7 = *ppiVar7 + -1;\n        if (iVar1 + -1 < 1) {\n            (**(**ppiVar5 + 8))();\n        }\n    }\n    return arg2;\n}\n",
        "token_count": 809
    },
    "14003fb3": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nint64_t * fcn.14003fb3c(ulong *arg1, int64_t *arg2, ulong dwFlags, ulong arg4)\n\n{\n    int32_t *piVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    int64_t *piVar4;\n    int64_t iVar5;\n    int64_t iVar6;\n    uint64_t uStackX8;\n    int64_t iStack40;\n    int64_t iStack32;\n    int64_t iStack24;\n    ulong uStack16;\n    \n    uStack16 = 0xfffffffffffffffe;\n    uStackX8 = uStackX8 & 0xffffffff00000000;\n    if (*(arg1 + 1) == 2) {\n        fcn.1400057dc(arg2, 0x1400a0e8b);\n    }\n    else if (*(arg1 + 1) == 1) {\n        piVar4 = fcn.140017fc0();\n        if (piVar4 == NULL) {\n            fcn.1400031e0(0x80004005);\n            pcVar2 = swi(3);\n            piVar4 = (*pcVar2)();\n            return piVar4;\n        }\n        iVar5 = (**(*piVar4 + 0x18))(piVar4);\n        iStack40 = iVar5 + 0x18;\n        iVar6 = fcn.140017ddc(0xd800);\n        iVar5 = iVar5 + 0x18;\n        if ((iVar6 == 0) || (iVar3 = fcn.140002fd0(&iStack40, iVar6, 0xd800),  iVar5 = iStack40,  iVar3 == 0)) {\n            fcn.1400057dc(arg2, \"Invalid DateTime\");\n            LOCK();\n            piVar1 = iVar5 + -8;\n            iVar3 = *piVar1;\n            *piVar1 = *piVar1 + -1;\n            if (iVar3 + -1 < 1) {\n                (**(**(iVar5 + -0x18) + 8))();\n            }\n        }\n        else {\n            iVar6 = fcn.1400075ec(iStack40 + -0x18);\n            *arg2 = iVar6 + 0x18;\n            LOCK();\n            piVar1 = iVar5 + -8;\n            iVar3 = *piVar1;\n            *piVar1 = *piVar1 + -1;\n            if (iVar3 + -1 < 1) {\n                (**(**(iVar5 + -0x18) + 8))(*(iVar5 + -0x18), iVar5 + -0x18);\n            }\n        }\n    }\n    else {\n        uStackX8 = 0;\n        iVar3 = (*_sym.imp.OLEAUT32.dll_VarBstrFromDisp)(*arg1, arg1, arg4, dwFlags, &uStackX8);\n        if (iVar3 < 0) {\n            piVar4 = fcn.140017fc0();\n            if (piVar4 == NULL) {\n                fcn.1400031e0(0x80004005);\n                pcVar2 = swi(3);\n                piVar4 = (*pcVar2)();\n                return piVar4;\n            }\n            iVar5 = (**(*piVar4 + 0x18))(piVar4);\n            iStack32 = iVar5 + 0x18;\n            iVar6 = fcn.140017ddc(0xd800);\n            iVar5 = iVar5 + 0x18;\n            if ((iVar6 == 0) || (iVar3 = fcn.140002fd0(&iStack32, iVar6, 0xd800),  iVar5 = iStack32,  iVar3 == 0)) {\n                fcn.1400057dc(arg2, \"Invalid DateTime\");\n                LOCK();\n                piVar1 = iVar5 + -8;\n                iVar3 = *piVar1;\n                *piVar1 = *piVar1 + -1;\n                if (iVar3 + -1 < 1) {\n                    (**(**(iVar5 + -0x18) + 8))();\n                }\n                (*_sym.imp.OLEAUT32.dll_SysStringLen)(uStackX8);\n            }\n            else {\n                iVar6 = fcn.1400075ec(iStack32 + -0x18);\n                *arg2 = iVar6 + 0x18;\n                LOCK();\n                piVar1 = iVar5 + -8;\n                iVar3 = *piVar1;\n                *piVar1 = *piVar1 + -1;\n                if (iVar3 + -1 < 1) {\n                    (**(**(iVar5 + -0x18) + 8))(*(iVar5 + -0x18), iVar5 + -0x18);\n                }\n                (*_sym.imp.OLEAUT32.dll_SysStringLen)(uStackX8);\n            }\n        }\n        else {\n            fcn.14001f14c(&iStack24, uStackX8);\n            iVar5 = fcn.1400075ec(iStack24 + -0x18);\n            *arg2 = iVar5 + 0x18;\n            LOCK();\n            piVar1 = iStack24 + -8;\n            iVar3 = *piVar1;\n            *piVar1 = *piVar1 + -1;\n            if (iVar3 + -1 < 1) {\n                (**(**(iStack24 + -0x18) + 8))();\n            }\n            (*_sym.imp.OLEAUT32.dll_SysStringLen)(uStackX8);\n        }\n    }\n    return arg2;\n}\n",
        "token_count": 1234
    },
    "14004203": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t fcn.140042030(void)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    code *pcVar5;\n    uint uStack40;\n    ushort uStack36;\n    ushort uStack32;\n    \n    iVar1 = *0x1400d8a34;\n    if (*0x1400d8a34 == -1) {\n        iVar3 = fcn.140017ad4();\n        iVar3 = **(iVar3 + 200);\n        if (*(iVar3 + 8) == 0) {\n            iVar4 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(*(iVar3 + 0x18));\n            *(iVar3 + 8) = iVar4;\n            if (iVar4 == 0) {\n                iVar4 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(*(iVar3 + 0x18));\n                *(iVar3 + 8) = iVar4;\n                *(iVar3 + 0x10) = iVar4 != 0;\n            }\n        }\n        pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(*(iVar3 + 8));\n        iVar1 = 0x40000;\n        if (pcVar5 != NULL) {\n            fcn.1400698a0(&uStack40, 0, 0x14);\n            uStack40 = 0x14;\n            iVar2 = (*pcVar5)();\n            if (-1 < iVar2) {\n                iVar1 = CONCAT22(uStack36, uStack32);\n            }\n        }\n    }\n    *0x1400d8a34 = iVar1;\n    return *0x1400d8a34;\n}\n",
        "token_count": 381
    },
    "140042c2": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140042c28(int64_t *arg1, int64_t **arg2, int64_t *arg3)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    code *pcVar3;\n    int64_t *piVar4;\n    int64_t *arg3_00;\n    uchar auStack120 [32];\n    int64_t iStack88;\n    int64_t iStack80;\n    int64_t iStack72;\n    ulong uStack64;\n    uchar auStack56 [8];\n    uint8_t uStack48;\n    int64_t iStack32;\n    uint64_t uStack24;\n    \n    uStack64 = 0xfffffffffffffffe;\n    uStack24 = *0x1400d96f0 ^ auStack120;\n    arg3_00 = arg3;\n    if (arg1[0x27] == 0) {\ncode_r0x000140042d4a:\n        fcn.140004828(arg3, arg2, arg3_00);\n    }\n    else {\n        arg3_00 = arg2;\n        (**(*arg1 + 0x230))(arg1, 0x417, arg3_00, auStack56);\n        uStack48 = uStack48 ^ 4;\n        iStack80 = -(*(arg1[0x27] + 0x18) != 0);\n        piVar4 = fcn.140017fc0();\n        if (piVar4 == NULL) {\n            fcn.1400031e0(0x80004005);\n            pcVar3 = swi(3);\n            (*pcVar3)();\n            return;\n        }\n        iStack88 = (**(*piVar4 + 0x18))(piVar4);\n        iStack88 = iStack88 + 0x18;\n        do {\n            if (iStack80 == 0) {\n                arg2 = iStack88 + -0x18;\n                LOCK();\n                piVar1 = iStack88 + -8;\n                iVar2 = *piVar1;\n                *piVar1 = *piVar1 + -1;\n                if (iVar2 + -1 < 1) {\n                    (**(**arg2 + 8))();\n                }\n                goto code_r0x000140042d4a;\n            }\n            arg3_00 = &iStack88;\n            fcn.140058104(arg1[0x27], &iStack80, arg3_00, &iStack72);\n        } while (iStack72 != iStack32);\n        fcn.140007bbc(arg3, &iStack88);\n        LOCK();\n        piVar1 = iStack88 + -8;\n        iVar2 = *piVar1;\n        *piVar1 = *piVar1 + -1;\n        if (iVar2 + -1 < 1) {\n            (**(**(iStack88 + -0x18) + 8))();\n        }\n    }\n    fcn.140069870(uStack24 ^ auStack120);\n    return;\n}\n",
        "token_count": 663
    },
    "140042f3": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.140042f30(int64_t *pvarg, uint *arg2)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    uint uVar3;\n    \n    uVar2 = *0x1400deac8;\n    uVar3 = *0x1400deacc;\n    if (pvarg != NULL) {\n        iVar1 = (*_sym.imp.GDI32.dll_GetMapMode)(pvarg[2]);\n        if ((iVar1 < 7) && (iVar1 != 1)) {\n            (**(*pvarg + 0x68))(pvarg, 3);\n            fcn.14001bac4(pvarg, arg2);\n            (**(*pvarg + 0x68))(pvarg, iVar1);\n            return;\n        }\n        uVar2 = (*_sym.imp.GDI32.dll_GetDeviceCaps)(pvarg[2], 0x58);\n        uVar3 = (*_sym.imp.GDI32.dll_GetDeviceCaps)(pvarg[2], 0x5a);\n    }\n    uVar2 = (*_sym.imp.KERNEL32.dll_MulDiv)(*arg2, 0x9ec, uVar2);\n    *arg2 = uVar2;\n    uVar2 = (*_sym.imp.KERNEL32.dll_MulDiv)(arg2[1], 0x9ec, uVar3);\n    arg2[1] = uVar2;\n    return;\n}\n",
        "token_count": 314
    },
    "140042ff": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.140042ff0(int64_t *pvarg, uint *arg2)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    uint uVar3;\n    \n    uVar2 = *0x1400deac8;\n    uVar3 = *0x1400deacc;\n    if (pvarg != NULL) {\n        iVar1 = (*_sym.imp.GDI32.dll_GetMapMode)(pvarg[2]);\n        if ((iVar1 < 7) && (iVar1 != 1)) {\n            (**(*pvarg + 0x68))(pvarg, 3);\n            fcn.14001ba40(pvarg, arg2);\n            (**(*pvarg + 0x68))(pvarg, iVar1);\n            return;\n        }\n        uVar2 = (*_sym.imp.GDI32.dll_GetDeviceCaps)(pvarg[2], 0x58);\n        uVar3 = (*_sym.imp.GDI32.dll_GetDeviceCaps)(pvarg[2], 0x5a);\n    }\n    uVar2 = (*_sym.imp.KERNEL32.dll_MulDiv)(*arg2, uVar2, 0x9ec);\n    *arg2 = uVar2;\n    uVar2 = (*_sym.imp.KERNEL32.dll_MulDiv)(arg2[1], uVar3, 0x9ec);\n    arg2[1] = uVar2;\n    return;\n}\n",
        "token_count": 314
    },
    "14004310": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140043108(void)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    int32_t iVar3;\n    int16_t *piVar4;\n    uchar auStack88 [32];\n    int16_t *piStack56;\n    int16_t aiStack40 [8];\n    uint64_t uStack24;\n    \n    uStack24 = *0x1400d96f0 ^ auStack88;\n    fcn.1400240f0(8);\n    if (*0x1400deb30 == 0) {\n        piVar4 = aiStack40;\n        iVar1 = 0;\n        do {\n            iVar3 = iVar1 + 1;\n            *piVar4 = 0x5555 << (iVar1 & 1);\n            piVar4 = piVar4 + 1;\n            iVar1 = iVar3;\n        } while (iVar3 < 8);\n        piStack56 = aiStack40;\n        iVar2 = (*_sym.imp.GDI32.dll_CreateBitmap)(8, 8, 1, 1);\n        if (iVar2 != 0) {\n            *0x1400deb30 = (*_sym.imp.GDI32.dll_CreatePatternBrush)(iVar2);\n            (*_sym.imp.GDI32.dll_DeleteObject)(iVar2);\n        }\n    }\n    if (*0x1400deb38 == '\\0') {\n        iVar1 = fcn.1400696f8(0x140042df4);\n        *0x1400deb38 = iVar1 == 0;\n    }\n    fcn.140024184(8);\n    fcn.14001c070(*0x1400deb30);\n    fcn.140069870(uStack24 ^ auStack88);\n    return;\n}\n",
        "token_count": 383
    },
    "14004350": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140043508(int64_t *arg1, ulong arg2, ulong arg3, uint *arg4)\n\n{\n    code *pcVar1;\n    ulong uVar2;\n    int64_t arg2_00;\n    code **arg2_01;\n    int32_t iStackX24;\n    int32_t iStackX28;\n    int32_t in_stack_00000028;\n    int32_t in_stack_0000002c;\n    int64_t in_stack_00000030;\n    int64_t in_stack_00000038;\n    int32_t iStack128;\n    int32_t iStack124;\n    int32_t iStack120;\n    int32_t iStack116;\n    code *pcStack112;\n    int64_t iStack104;\n    code *pcStack96;\n    ulong uStack88;\n    code *pcStack80;\n    ulong uStack72;\n    code *pcStack64;\n    ulong uStack56;\n    code *pcStack48;\n    ulong uStack40;\n    \n    uStack40 = 0;\n    pcStack48 = vtable.CRgn.0;\n    uStack56 = 0;\n    pcStack64 = vtable.CRgn.0;\n    uStack72 = 0;\n    pcStack80 = vtable.CRgn.0;\n    uVar2 = (*_sym.imp.GDI32.dll_CreateRectRgnIndirect)(arg2);\n    fcn.14001c094(&pcStack64, uVar2);\n    (*_sym.imp.USER32.dll_CopyRect)(&iStack128, arg2);\n    iStackX28 = arg3 >> 0x20;\n    iStackX24 = arg3;\n    (*_sym.imp.USER32.dll_InflateRect)(&iStack128, -iStackX24, -iStackX28);\n    (*_sym.imp.USER32.dll_IntersectRect)(&iStack128, &iStack128, arg2);\n    uVar2 = (*_sym.imp.GDI32.dll_CreateRectRgnIndirect)(&iStack128);\n    fcn.14001c094(&pcStack80, uVar2);\n    uVar2 = (*_sym.imp.GDI32.dll_CreateRectRgn)(0, 0, 0, 0);\n    fcn.14001c094(&pcStack48, uVar2);\n    (*_sym.imp.GDI32.dll_CombineRgn)(uStack40, uStack56, uStack72, 3);\n    if (in_stack_00000030 == 0) {\n        in_stack_00000030 = fcn.140043108();\n    }\n    if (in_stack_00000030 == 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    if (in_stack_00000038 == 0) {\n        in_stack_00000038 = in_stack_00000030;\n    }\n    uStack88 = 0;\n    pcStack96 = vtable.CRgn.0;\n    iStack104 = 0;\n    pcStack112 = vtable.CRgn.0;\n    if (arg4 != NULL) {\n        uVar2 = (*_sym.imp.GDI32.dll_CreateRectRgn)(0, 0, 0, 0);\n        fcn.14001c094(&pcStack96, uVar2);\n        (*_sym.imp.GDI32.dll_SetRectRgn)(uStack56, *arg4, arg4[1], arg4[2], arg4[3]);\n        (*_sym.imp.USER32.dll_CopyRect)(&iStack128, arg4);\n        (*_sym.imp.USER32.dll_InflateRect)(&iStack128, -in_stack_00000028, -in_stack_0000002c);\n        (*_sym.imp.USER32.dll_IntersectRect)(&iStack128, &iStack128, arg4);\n        (*_sym.imp.GDI32.dll_SetRectRgn)(uStack72, iStack128, iStack124, iStack120, iStack116);\n        (*_sym.imp.GDI32.dll_CombineRgn)(uStack88, uStack56, uStack72, 3);\n        if (*(in_stack_00000030 + 8) == *(in_stack_00000038 + 8)) {\n            uVar2 = (*_sym.imp.GDI32.dll_CreateRectRgn)(0, 0, 0, 0);\n            fcn.14001c094(&pcStack112, uVar2);\n            (*_sym.imp.GDI32.dll_CombineRgn)(iStack104, uStack88, uStack40, 3);\n        }\n    }\n    if ((*(in_stack_00000030 + 8) != *(in_stack_00000038 + 8)) && (arg4 != NULL)) {\n        fcn.14001b6cc(arg1, &pcStack96);\n        (**(*arg1 + 0xa0))(arg1, &iStack128);\n        uVar2 = fcn.14001c308(arg1, in_stack_00000038);\n        (*_sym.imp.GDI32.dll_PatBlt)\n                  (arg1[1], iStack128, iStack124, iStack120 - iStack128, iStack116 - iStack124, 0x5a0049);\n        fcn.14001c308(arg1, uVar2);\n    }\n    arg2_01 = &pcStack112;\n    if (iStack104 == 0) {\n        arg2_01 = &pcStack48;\n    }\n    fcn.14001b6cc(arg1, arg2_01);\n    (**(*arg1 + 0xa0))(arg1, &iStack128);\n    arg2_00 = fcn.14001c308(arg1, in_stack_00000030);\n    (*_sym.imp.GDI32.dll_PatBlt)(arg1[1], iStack128, iStack124, iStack120 - iStack128, iStack116 - iStack124, 0x5a0049);\n    if (arg2_00 != 0) {\n        fcn.14001c308(arg1, arg2_00);\n    }\n    fcn.14001b6cc(arg1, 0);\n    pcStack112 = vtable.CRgn.0;\n    fcn.140019c30(&pcStack112);\n    pcStack96 = vtable.CRgn.0;\n    fcn.140019c30(&pcStack96);\n    pcStack80 = vtable.CRgn.0;\n    fcn.140019c30(&pcStack80);\n    pcStack64 = vtable.CRgn.0;\n    fcn.140019c30(&pcStack64);\n    pcStack48 = vtable.CRgn.0;\n    fcn.140019c30(&pcStack48);\n    return;\n}\n",
        "token_count": 1499
    },
    "140044e8": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nvoid fcn.140044e88(int64_t *arg1)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uchar auStack328 [32];\n    uchar *puStack296;\n    uint uStack288;\n    ulong uStack280;\n    ulong uStack272;\n    int32_t aiStack264 [2];\n    int64_t *piStack256;\n    ulong uStack248;\n    uchar auStack232 [128];\n    uchar auStack104 [80];\n    uint64_t uStack24;\n    \n    uStack24 = *0x1400d96f0 ^ auStack328;\n    iVar2 = fcn.14006a34c(auStack232, 0x80, \"Interface\\\\\");\n    if (iVar2 != 0) {\n        if (iVar2 == 0xc) {\n            fcn.140020738();\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        if ((iVar2 == 0x16) || (iVar2 == 0x22)) {\n            fcn.140020780();\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        if (iVar2 != 0x50) {\n            fcn.140020780();\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n    }\n    iVar2 = (*_sym.imp.KERNEL32.dll_lstrlenA)(auStack232);\n    iVar3 = (**(*arg1 + 0x18))(arg1);\n    iVar5 = 0;\n    if (0 < iVar3) {\n        do {\n            iVar4 = (**(*arg1 + 0x28))(arg1, iVar5, aiStack264);\n            if ((-1 < iVar4) && ((aiStack264[0] == 4 || (aiStack264[0] == 3)))) {\n                piStack256 = NULL;\n                iVar4 = (**(*arg1 + 0x20))(arg1, iVar5, &piStack256);\n                if (-1 < iVar4) {\n                    iVar4 = (**(*piStack256 + 0x18))();\n                    if (-1 < iVar4) {\n                        (*_sym.imp.ole32.dll_StringFromGUID2)(uStack248, auStack104, 0x27);\n                        uStack272 = 0;\n                        uStack280 = 0;\n                        uStack288 = 0x27;\n                        puStack296 = auStack232 + iVar2;\n                        (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(3, 0, auStack104, 0xffffffff);\n                        fcn.140044e30(0xffffffff80000000, auStack232);\n                        (**(*piStack256 + 0x98))();\n                    }\n                    (**(*piStack256 + 0x10))();\n                }\n            }\n            iVar5 = iVar5 + 1;\n        } while (iVar5 < iVar3);\n    }\n    fcn.140069870(uStack24 ^ auStack328);\n    return;\n}\n",
        "token_count": 689
    },
    "14004502": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint fcn.140045024(int64_t arg1, ulong arg2, ulong arg3)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    uint uVar3;\n    ulong arg2_00;\n    ulong in_R9;\n    int64_t iStackX8;\n    int64_t iStackX32;\n    ulong uVar4;\n    \n    uVar4 = 0xfffffffffffffffe;\n    fcn.1400057dc(&iStackX8, arg2);\n    if (arg1 == -0x80000000) {\n        iVar2 = fcn.140016830();\n        if (iVar2 == 1) {\n            arg2_00 = fcn.140007cfc(&iStackX32, \"Software\\\\Classes\\\\\", &iStackX8);\n            fcn.140007bbc(&iStackX8, arg2_00);\n            LOCK();\n            piVar1 = iStackX32 + -8;\n            iVar2 = *piVar1;\n            *piVar1 = *piVar1 + -1;\n            if (iVar2 + -1 < 1) {\n                (**(**(iStackX32 + -0x18) + 8))();\n            }\n            arg1 = -0x7fffffff;\n        }\n    }\n    uVar3 = (*_sym.imp.ADVAPI32.dll_RegCreateKeyA)(arg1, iStackX8, arg3, in_R9, uVar4);\n    LOCK();\n    piVar1 = iStackX8 + -8;\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 + -1 < 1) {\n        (**(**(iStackX8 + -0x18) + 8))();\n    }\n    return uVar3;\n}\n",
        "token_count": 400
    },
    "1400450e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint fcn.1400450ec(int64_t arg1, ulong arg2, ulong arg3)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    uint uVar3;\n    ulong arg2_00;\n    ulong in_R9;\n    int64_t iStackX8;\n    int64_t iStackX32;\n    ulong uVar4;\n    \n    uVar4 = 0xfffffffffffffffe;\n    fcn.1400057dc(&iStackX8, arg2);\n    if (arg1 == -0x80000000) {\n        iVar2 = fcn.140016830();\n        if (iVar2 == 1) {\n            arg2_00 = fcn.140007cfc(&iStackX32, \"Software\\\\Classes\\\\\", &iStackX8);\n            fcn.140007bbc(&iStackX8, arg2_00);\n            LOCK();\n            piVar1 = iStackX32 + -8;\n            iVar2 = *piVar1;\n            *piVar1 = *piVar1 + -1;\n            if (iVar2 + -1 < 1) {\n                (**(**(iStackX32 + -0x18) + 8))();\n            }\n            arg1 = -0x7fffffff;\n        }\n    }\n    uVar3 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyA)(arg1, iStackX8, arg3, in_R9, uVar4);\n    LOCK();\n    piVar1 = iStackX8 + -8;\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 + -1 < 1) {\n        (**(**(iStackX8 + -0x18) + 8))();\n    }\n    return uVar3;\n}\n",
        "token_count": 401
    },
    "1400451b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint fcn.1400451b4(int64_t arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    uint uVar3;\n    ulong arg2_00;\n    int64_t iStackX8;\n    ulong in_stack_00000028;\n    int64_t iStack24;\n    ulong uStack16;\n    \n    uStack16 = 0xfffffffffffffffe;\n    fcn.1400057dc(&iStackX8, arg2);\n    if (arg1 == -0x80000000) {\n        iVar2 = fcn.140016830();\n        if (iVar2 == 1) {\n            arg2_00 = fcn.140007cfc(&iStack24, \"Software\\\\Classes\\\\\", &iStackX8);\n            fcn.140007bbc(&iStackX8, arg2_00);\n            LOCK();\n            piVar1 = iStack24 + -8;\n            iVar2 = *piVar1;\n            *piVar1 = *piVar1 + -1;\n            if (iVar2 + -1 < 1) {\n                (**(**(iStack24 + -0x18) + 8))();\n            }\n            arg1 = -0x7fffffff;\n        }\n    }\n    uVar3 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyExA)(arg1, iStackX8, arg3, arg4, in_stack_00000028);\n    LOCK();\n    piVar1 = iStackX8 + -8;\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 + -1 < 1) {\n        (**(**(iStackX8 + -0x18) + 8))();\n    }\n    return uVar3;\n}\n",
        "token_count": 408
    },
    "14004529": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint fcn.140045294(int64_t arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    uint uVar3;\n    ulong arg2_00;\n    int64_t iStackX8;\n    int64_t iStack24;\n    ulong uStack16;\n    \n    uStack16 = 0xfffffffffffffffe;\n    fcn.1400057dc(&iStackX8, arg2);\n    if (arg1 == -0x80000000) {\n        iVar2 = fcn.140016830();\n        if (iVar2 == 1) {\n            arg2_00 = fcn.140007cfc(&iStack24, \"Software\\\\Classes\\\\\", &iStackX8);\n            fcn.140007bbc(&iStackX8, arg2_00);\n            LOCK();\n            piVar1 = iStack24 + -8;\n            iVar2 = *piVar1;\n            *piVar1 = *piVar1 + -1;\n            if (iVar2 + -1 < 1) {\n                (**(**(iStack24 + -0x18) + 8))();\n            }\n            arg1 = -0x7fffffff;\n        }\n    }\n    uVar3 = (*_sym.imp.ADVAPI32.dll_RegQueryValueA)(arg1, iStackX8, arg3, arg4);\n    LOCK();\n    piVar1 = iStackX8 + -8;\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 + -1 < 1) {\n        (**(**(iStackX8 + -0x18) + 8))();\n    }\n    return uVar3;\n}\n",
        "token_count": 389
    },
    "14004536": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint fcn.14004536c(int64_t arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    uint uVar3;\n    ulong arg2_00;\n    int64_t iStackX8;\n    uint in_stack_00000028;\n    int64_t iStack24;\n    ulong uStack16;\n    \n    uStack16 = 0xfffffffffffffffe;\n    fcn.1400057dc(&iStackX8, arg2);\n    if (arg1 == -0x80000000) {\n        iVar2 = fcn.140016830();\n        if (iVar2 == 1) {\n            arg2_00 = fcn.140007cfc(&iStack24, \"Software\\\\Classes\\\\\", &iStackX8);\n            fcn.140007bbc(&iStackX8, arg2_00);\n            LOCK();\n            piVar1 = iStack24 + -8;\n            iVar2 = *piVar1;\n            *piVar1 = *piVar1 + -1;\n            if (iVar2 + -1 < 1) {\n                (**(**(iStack24 + -0x18) + 8))();\n            }\n            arg1 = -0x7fffffff;\n        }\n    }\n    uVar3 = (*_sym.imp.ADVAPI32.dll_RegSetValueA)(arg1, iStackX8, arg3, arg4, in_stack_00000028);\n    LOCK();\n    piVar1 = iStackX8 + -8;\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 + -1 < 1) {\n        (**(**(iStackX8 + -0x18) + 8))();\n    }\n    return uVar3;\n}\n",
        "token_count": 405
    },
    "14004544": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint fcn.14004544c(int64_t arg1, ulong arg2)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    uint uVar3;\n    ulong arg2_00;\n    int64_t aiStackX8 [2];\n    int64_t aiStackX24 [2];\n    \n    fcn.1400057dc(aiStackX8, arg2);\n    if (arg1 == -0x80000000) {\n        iVar2 = fcn.140016830();\n        if (iVar2 == 1) {\n            arg2_00 = fcn.140007cfc(aiStackX24, \"Software\\\\Classes\\\\\", aiStackX8);\n            fcn.140007bbc(aiStackX8, arg2_00);\n            LOCK();\n            piVar1 = aiStackX24[0] + -8;\n            iVar2 = *piVar1;\n            *piVar1 = *piVar1 + -1;\n            if (iVar2 + -1 < 1) {\n                (**(**(aiStackX24[0] + -0x18) + 8))();\n            }\n            arg1 = -0x7fffffff;\n        }\n    }\n    uVar3 = (*_sym.imp.ADVAPI32.dll_RegDeleteKeyA)(arg1, aiStackX8[0]);\n    LOCK();\n    piVar1 = aiStackX8[0] + -8;\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 + -1 < 1) {\n        (**(**(aiStackX8[0] + -0x18) + 8))();\n    }\n    return uVar3;\n}\n",
        "token_count": 377
    },
    "14004625": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140046250(int64_t arg1)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    uchar *arg1_00;\n    int64_t iVar4;\n    uchar *arg1_01;\n    ulong in_R9;\n    uchar auStack856 [32];\n    uchar auStack824 [260];\n    uchar auStack564 [12];\n    uchar auStack552 [272];\n    uchar auStack280 [256];\n    uint64_t uStack24;\n    \n    uStack24 = *0x1400d96f0 ^ auStack856;\n    iVar3 = fcn.140017ad4();\n    *(iVar3 + 0x10) = *(arg1 + 0x88);\n    *(iVar3 + 0x18) = *(arg1 + 0x88);\n    iVar2 = (*_sym.imp.KERNEL32.dll_GetModuleFileNameA)(*(arg1 + 0x88), auStack824, 0x104);\n    if ((iVar2 == 0) || (iVar2 == 0x104)) {\n        fcn.14001af38();\n    }\n    arg1_00 = (*_sym.imp.SHLWAPI.dll_PathFindExtensionA)(auStack824);\n    if (arg1_00 == NULL) {\n        fcn.14001af38();\n    }\n    *arg1_00 = 0;\n    iVar2 = fcn.1400461d4(auStack824, auStack552, 0x104, in_R9);\n    if (iVar2 != 0) {\n        fcn.14001af38();\n    }\n    if (*(arg1 + 0xc0) == 0) {\n        iVar4 = fcn.14006ae94(auStack552);\n        *(arg1 + 0xc0) = iVar4;\n        if (iVar4 == 0) {\n            fcn.140020738();\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n    }\n    iVar4 = *(arg1 + 0xa0);\n    if (iVar4 == 0) {\n        iVar2 = fcn.140017c2c(0xe000, auStack280, 0x100);\n        arg1_01 = auStack280;\n        if (iVar2 == 0) {\n            arg1_01 = *(arg1 + 0xc0);\n        }\n        iVar4 = fcn.14006ae94(arg1_01);\n        *(arg1 + 0xa0) = iVar4;\n        if (iVar4 == 0) {\n            fcn.140020738();\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n    }\n    *(iVar3 + 0x20) = iVar4;\n    if (*(arg1 + 200) == 0) {\n        if (*(arg1 + 0xd8) == 1) {\n            iVar2 = fcn.14006a34c(arg1_00, auStack564 + -arg1_00, \".CHM\");\n            if (iVar2 != 0) {\n                if (iVar2 == 0xc) {\n                    fcn.140020738();\n                    pcVar1 = swi(3);\n                    (*pcVar1)();\n                    return;\n                }\n                if ((iVar2 == 0x16) || (iVar2 == 0x22)) {\n                    fcn.140020780();\n                    pcVar1 = swi(3);\n                    (*pcVar1)();\n                    return;\n                }\n                if (iVar2 != 0x50) {\n                    fcn.140020780();\n                    pcVar1 = swi(3);\n                    (*pcVar1)();\n                    return;\n                }\n            }\n        }\n        else {\n            iVar2 = fcn.14006a34c(arg1_00, auStack564 + -arg1_00, \".HLP\");\n            if (iVar2 != 0) {\n                if (iVar2 == 0xc) {\n                    fcn.140020738();\n                    pcVar1 = swi(3);\n                    (*pcVar1)();\n                    return;\n                }\n                if ((iVar2 == 0x16) || (iVar2 == 0x22)) {\n                    fcn.140020780();\n                    pcVar1 = swi(3);\n                    (*pcVar1)();\n                    return;\n                }\n                if (iVar2 != 0x50) {\n                    fcn.140020780();\n                    pcVar1 = swi(3);\n                    (*pcVar1)();\n                    return;\n                }\n            }\n        }\n        iVar3 = fcn.14006ae94(auStack824);\n        *(arg1 + 200) = iVar3;\n        if (iVar3 == 0) {\n            fcn.140020738();\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        *arg1_00 = 0;\n    }\n    if (*(arg1 + 0xd0) == 0) {\n        iVar2 = fcn.14006add0(auStack552, 0x104, \".INI\");\n        if (iVar2 != 0) {\n            if (iVar2 == 0xc) {\n                fcn.140020738();\n                pcVar1 = swi(3);\n                (*pcVar1)();\n                return;\n            }\n            if ((iVar2 == 0x16) || (iVar2 == 0x22)) {\n                fcn.140020780();\n                pcVar1 = swi(3);\n                (*pcVar1)();\n                return;\n            }\n            if (iVar2 != 0x50) {\n                fcn.140020780();\n                pcVar1 = swi(3);\n                (*pcVar1)();\n                return;\n            }\n        }\n        iVar3 = fcn.14006ae94(auStack552);\n        *(arg1 + 0xd0) = iVar3;\n        if (iVar3 == 0) {\n            fcn.140020738();\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n    }\n    fcn.140069870(uStack24 ^ auStack856);\n    return;\n}\n",
        "token_count": 1356
    },
    "1400464b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.1400464b8(ulong arg1, ulong noname_1, ulong arg3, ulong arg4)\n\n{\n    uint32_t uVar1;\n    int64_t iVar2;\n    \n    uVar1 = (*_sym.imp.KERNEL32.dll_SetErrorMode)(0);\n    (*_sym.imp.KERNEL32.dll_SetErrorMode)(uVar1 | 0x8001);\n    iVar2 = fcn.140017ad4();\n    *(iVar2 + 0x10) = arg1;\n    *(iVar2 + 0x18) = arg1;\n    fcn.140016690(iVar2);\n    iVar2 = fcn.140017ad4();\n    iVar2 = *(iVar2 + 8);\n    if (iVar2 != 0) {\n        *(iVar2 + 0x88) = arg1;\n        *(iVar2 + 0x90) = arg3;\n        *(iVar2 + 0x98) = arg4;\n        fcn.140046250(iVar2);\n    }\n    iVar2 = fcn.140017ad4();\n    if (*(iVar2 + 0x28) == '\\0') {\n        fcn.140006ee8();\n    }\n    iVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(\"user32.dll\");\n    if (iVar2 != 0) {\n        *0x1400de270 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar2, \"NotifyWinEvent\");\n    }\n    return 1;\n}\n",
        "token_count": 333
    },
    "1400465d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nuint fcn.1400465d4(ulong arg1)\n\n{\n    int32_t iVar1;\n    bool bVar2;\n    \n    if (arg1 < 0x10c) {\n        if (arg1 == 0x10b) {\n            return 3;\n        }\n        if (0x3e < arg1) {\n            if (arg1 < 0x6c) {\n                if (arg1 == 0x6b) {\n                    return 2;\n                }\n                if (0x47 < arg1) {\n                    if (arg1 == 0x50) {\n                        return 5;\n                    }\n                    if (arg1 == 0x52) {\n                        return 5;\n                    }\n                    if (arg1 == 0x55) {\n                        return 3;\n                    }\n                    if (arg1 != 0x56) {\n                        if (arg1 == 0x58) {\n                            return 10;\n                        }\n                        return 1;\n                    }\n                    return 5;\n                }\n                if (arg1 == 0x47) {\n                    return 5;\n                }\n                if (arg1 == 0x40) {\n                    return 5;\n                }\n                if (arg1 == 0x41) {\n                    return 5;\n                }\n                if (arg1 == 0x42) {\n                    return 6;\n                }\n                if (arg1 == 0x43) {\n                    return 3;\n                }\n                iVar1 = arg1 - 0x44;\n                if (iVar1 == 0) {\n                    return 4;\n                }\n            }\n            else {\n                if (arg1 < 0x91) {\n                    if (arg1 == 0x90) {\n                        return 3;\n                    }\n                    if (arg1 < 0x76) {\n                        if (arg1 == 0x75) {\n                            return 10;\n                        }\n                        if (arg1 == 0x6c) {\n                            return 0xc;\n                        }\n                        if (arg1 == 0x6f) {\n                            return 3;\n                        }\n                        if (arg1 == 0x70) {\n                            return 0xd;\n                        }\n                        iVar1 = arg1 - 0x71;\n                        if (iVar1 == 0) {\n                            return 4;\n                        }\n                        goto code_r0x0001400467d3;\n                    }\n                    if (arg1 == 0x7b) {\n                        return 3;\n                    }\n                    if (arg1 == 0x7c) {\n                        return 3;\n                    }\n                    if (arg1 == 0x7d) {\n                        return 3;\n                    }\n                    iVar1 = arg1 - 0x83;\n                    if (iVar1 == 0) {\n                        return 9;\n                    }\ncode_r0x00014004668c:\n                    if (iVar1 == 1) {\n                        return 9;\n                    }\n                    return 1;\n                }\n                if (arg1 < 0xb7) {\n                    if (arg1 == 0xb6) {\n                        return 6;\n                    }\n                    if (arg1 == 0x91) {\n                        return 7;\n                    }\n                    if (arg1 == 0x9a) {\n                        return 3;\n                    }\n                    if (arg1 == 0xa1) {\n                        return 3;\n                    }\n                    if (arg1 == 0xa7) {\n                        return 0xc;\n                    }\n                    bVar2 = arg1 == 0xaa;\n                    goto code_r0x000140046840;\n                }\n                if (arg1 == 0xb7) {\n                    return 5;\n                }\n                if (arg1 == 0xbf) {\n                    return 6;\n                }\n                if (arg1 == 0xc1) {\n                    return 6;\n                }\n                iVar1 = arg1 - 0xce;\n                if (iVar1 == 0) {\n                    return 3;\n                }\n            }\n            bVar2 = iVar1 == 2;\ncode_r0x000140046632:\n            if (bVar2) {\n                return 3;\n            }\n            return 1;\n        }\n        if (arg1 == 0x3e) {\n            return 8;\n        }\n        if (arg1 < 0x1a) {\n            if (arg1 == 0x19) {\n                return 9;\n            }\n            if (arg1 < 0x11) {\n                if (arg1 == 0x10) {\n                    return 7;\n                }\n                if (arg1 == 0) {\n                    return 0;\n                }\n                if (arg1 == 2) {\n                    return 2;\n                }\n                if (arg1 == 3) {\n                    return 3;\n                }\n                if (arg1 == 4) {\n                    return 4;\n                }\n                if (arg1 == 5) {\n                    return 5;\n                }\n                if (arg1 == 6) {\n                    return 2;\n                }\n                if (arg1 == 0xb) {\n                    return 6;\n                }\n                if (arg1 == 0xc) {\n                    return 5;\n                }\n                bVar2 = arg1 == 0xf;\n                goto code_r0x000140046632;\n            }\n            if (arg1 == 0x11) {\n                return 3;\n            }\n            if (arg1 == 0x12) {\n                return 2;\n            }\n            if (arg1 == 0x13) {\n                return 5;\n            }\n            if (((arg1 != 0x14) && (arg1 != 0x15)) && ((arg1 != 0x16 && (iVar1 = arg1 - 0x17,  iVar1 != 0))))\n            goto code_r0x00014004668c;\n        }\n        else {\n            if (arg1 < 0x28) {\n                if (arg1 == 0x27) {\n                    return 0xd;\n                }\n                if (arg1 == 0x1a) {\n                    return 6;\n                }\n                if (arg1 == 0x1b) {\n                    return 9;\n                }\n                if (arg1 == 0x1d) {\n                    return 5;\n                }\n                if (arg1 == 0x1e) {\n                    return 9;\n                }\n                if (arg1 == 0x20) {\n                    return 0xb;\n                }\n                if (arg1 == 0x21) {\n                    return 0xc;\n                }\n                if (arg1 != 0x22) {\n                    if (arg1 == 0x24) {\n                        return 4;\n                    }\n                    if (arg1 == 0x26) {\n                        return 0xe;\n                    }\n                    return 1;\n                }\n                return 3;\n            }\n            if (arg1 == 0x34) {\n                return 3;\n            }\n            if (arg1 == 0x35) {\n                return 3;\n            }\n            if (arg1 == 0x36) {\n                return 5;\n            }\n            if (arg1 == 0x37) {\n                return 3;\n            }\n            if (arg1 != 0x39) {\n                if (arg1 == 0x3a) {\n                    return 5;\n                }\n                iVar1 = arg1 - 0x3b;\n                if (iVar1 != 0) {\ncode_r0x0001400467d3:\n                    if (iVar1 == 1) {\n                        return 6;\n                    }\n                    return 1;\n                }\n            }\n        }\n    }\n    else if (((arg1 != 0x3e3) && (arg1 != 0x3e4)) && (arg1 != 0x3e5)) {\n        bVar2 = arg1 == 999;\ncode_r0x000140046840:\n        if (bVar2) {\n            return 5;\n        }\n        return 1;\n    }\n    return 10;\n}\n",
        "token_count": 1748
    },
    "140046dc": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140046dc8(int64_t arg1, ulong arg2)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    int64_t arg1_00;\n    int64_t iVar3;\n    ulong uVar4;\n    \n    arg1_00 = (*_sym.imp.USER32.dll_GetDesktopWindow)();\n    uVar4 = 5;\n    while( true ) {\n        arg1_00 = (*_sym.imp.USER32.dll_GetWindow)(arg1_00, uVar4);\n        if (arg1_00 == 0) break;\n        iVar3 = fcn.14000fc4c(arg1_00);\n        if ((iVar3 != 0) && (*(arg1 + 0x40) != arg1_00)) {\n            iVar1 = fcn.140046cf8(*(arg1 + 0x40), arg1_00);\n            if (iVar1 != 0) {\n                uVar2 = (*_sym.imp.USER32.dll_GetWindowLongA)(arg1_00, 0xfffffff0);\n                if (arg2 == 0) {\n                    if ((uVar2 & 0x18000000) == 0x10000000) {\n                        (*_sym.imp.USER32.dll_ShowWindow)(arg1_00, 0);\n                        *(iVar3 + 0x78) = *(iVar3 + 0x78) | 2;\n                    }\n                }\n                else if ((((uVar2 & 0x18000000) == 0) && ((*(iVar3 + 0x78) & 2) != 0)) && (*(arg1 + 0x138) == 0)) {\n                    (*_sym.imp.USER32.dll_ShowWindow)(arg1_00, 4);\n                    *(iVar3 + 0x78) = *(iVar3 + 0x78) & 0xfffffffd;\n                }\n            }\n        }\n        uVar4 = 2;\n    }\n    return;\n}\n",
        "token_count": 431
    },
    "140046ea": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.140046ea0(ulong noname_0, int64_t arg2)\n\n{\n    if (*(arg2 + 0x40) == 0) {\n        fcn.140014ae0(8);\n        *(arg2 + 0x40) = \"AfxFrameOrView90s\";\n    }\n    if ((*(arg2 + 0x30) >> 0xf & 1) != 0) {\n        *(arg2 + 0x30) = *(arg2 + 0x30) | 0x4000;\n    }\n    *(arg2 + 0x48) = *(arg2 + 0x48) | 0x200;\n    return 1;\n}\n",
        "token_count": 158
    },
    "140046ff": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140046ff4(int64_t arg1, int64_t *arg2, ulong arg3)\n\n{\n    int64_t *piVar1;\n    \n    piVar1 = *(arg1 + 0x130);\n    if (arg2 != piVar1) {\n        *(arg1 + 0x130) = 0;\n        if (piVar1 != NULL) {\n            (**(*piVar1 + 0x2d0))(piVar1, 0, arg2, piVar1);\n        }\n        if (((*(arg1 + 0x130) == 0) && (*(arg1 + 0x130) = arg2,  arg2 != NULL)) && (arg3 != 0)) {\n            (**(*arg2 + 0x2d0))(arg2, 1, arg2, piVar1);\n        }\n    }\n    return;\n}\n",
        "token_count": 195
    },
    "1400478d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.1400478d4(ulong *arg1)\n\n{\n    if (arg1[1] != 0) {\n        *(arg1[1] + 0x158) = *arg1;\n        *(arg1[1] + 0x160) = arg1[2];\n    }\n    return;\n}\n",
        "token_count": 73
    },
    "140047ed": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.140047edc(int64_t *arg1, ulong arg2, ulong arg3)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    ulong uVar4;\n    uint32_t auStack168 [8];\n    int64_t iStack136;\n    ulong uStack128;\n    ulong uStack120;\n    uchar auStack88 [48];\n    uint uStack40;\n    int64_t iStack24;\n    \n    iVar2 = fcn.140017ad4();\n    iVar2 = (*_sym.imp.USER32.dll_LoadIconA)(*(iVar2 + 0x18));\n    if (iVar2 != 0) {\n        fcn.1400698a0(auStack88, 0, 0x50);\n        uStack40 = arg2;\n        (**(*arg1 + 200))(arg1, auStack88);\n        if (iStack24 != 0) {\n            iVar3 = fcn.140017ad4();\n            iVar1 = fcn.14000d2f4(*(iVar3 + 0x10), iStack24, auStack168);\n            if ((iVar1 != 0) && (iStack136 != iVar2)) {\n                uVar4 = fcn.140014758(auStack168[0], uStack128, uStack120, iVar2);\n                return uVar4;\n            }\n        }\n    }\n    return 0;\n}\n",
        "token_count": 316
    },
    "14004862": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140048628(int64_t arg1, ulong arg2)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    \n    iVar2 = fcn.140010da8(arg1);\n    if (iVar2 == 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    arg2._0_4_ = arg2 & 0xfff0;\n    if ((*(iVar2 + 0xc4) == 0) ||\n       ((((((arg2 != 0xf000 && (arg2 != 0xf010)) && (arg2 != 0xf020)) && ((arg2 != 0xf030 && (arg2 != 0xf040)))) &&\n         ((arg2 != 0xf050 && ((arg2 != 0xf060 && (arg2 != 0xf120)))))) && (arg2 != 0xf130)))) {\n        fcn.14000fb10(arg1);\n    }\n    else {\n        iVar2 = (*_sym.imp.USER32.dll_SendMessageA)(*(arg1 + 0x40), 0x365, 0, (arg2 - 0xf000 >> 4) + 0x1ef00);\n        if (iVar2 == 0) {\n            (*_sym.imp.USER32.dll_SendMessageA)(*(arg1 + 0x40), 0x111, 0xe147, 0);\n        }\n    }\n    return;\n}\n",
        "token_count": 331
    },
    "14004892": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140048928(ulong noname_0, int64_t *arg2, ulong arg3, ulong arg4)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int64_t *hWnd;\n    ulong nCmdShow;\n    \n    if (arg2 == NULL) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    hWnd = fcn.140010d58(arg2);\n    if (hWnd == NULL) {\n        hWnd = arg2[0x1e];\n    }\n    if (arg4 == 0) {\n        fcn.140015950(arg2, 0, 0, 0);\n        (**(*arg2 + 0x2c8))(arg2);\n        if ((arg3 != 0) || (iVar2 = fcn.1400471b0(arg2),  iVar2 == 0)) {\n            (**(*hWnd + 0x2a0))(hWnd);\n        }\n    }\n    else {\n        (**(*arg2 + 0x2c8))(arg2);\n        *(hWnd + 0x31) = *(hWnd + 0x31) | 0xc;\n    }\n    iVar2 = fcn.1400471b0(arg2);\n    if (iVar2 == 0) {\n        return;\n    }\n    if (arg2[0x1f] == 0) {\n        uVar3 = arg3 != 0;\n    }\n    else {\n        uVar3 = (**(*arg2[0x1f] + 0x308))();\n    }\n    if (uVar3 == 1) {\n        if (arg3 != 0) {\n            *(hWnd + 0x24) = 0xffffffff;\n            if (arg4 == 0) {\n                nCmdShow = 8;\n                goto code_r0x000140048a55;\n            }\n            *(hWnd + 0x24) = 8;\n            goto code_r0x000140048a63;\n        }\n    }\n    else if (uVar3 == 0) {\n        *(hWnd + 0x24) = 0xffffffff;\n        if (arg4 != 0) {\n            *(hWnd + 0x24) = 0;\n            return;\n        }\n        nCmdShow = 0;\ncode_r0x000140048a55:\n        fcn.14001546c(hWnd, nCmdShow);\n        return;\n    }\n    if (arg4 != 0) {\n        return;\n    }\ncode_r0x000140048a63:\n    (**(*hWnd + 0x2a0))(hWnd, 0);\n    return;\n}\n",
        "token_count": 610
    },
    "1400494d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.1400494d4(int64_t *arg1)\n\n{\n    uint32_t uVar1;\n    int32_t in_EDX;\n    \n    if (*(arg1 + 0x2c) == 0) {\n        *(arg1 + 0x2c) = 1;\n        if ((*(arg1 + 0x31) & 4) != 0) {\n            in_EDX = 1;\n        }\n        *(arg1 + 0x31) = *(arg1 + 0x31) & 0xfffffff3;\n        if ((in_EDX != 0) && (arg1[0x1c] != NULL)) {\n            (**(*arg1[0x1c] + 0xa0))();\n        }\n        uVar1 = fcn.140015284(arg1);\n        if ((uVar1 >> 0xd & 1) == 0) {\n            fcn.140010198(arg1, 0, 0xffff, 0xe900);\n        }\n        else {\n            fcn.140010198(arg1, 0, 0xffff, 0xe900);\n            fcn.140010198(arg1, 0, 0xffff, 0xe900);\n            (**(*arg1 + 0xd0))(arg1);\n            fcn.140015950(arg1, 0, 0, 0);\n        }\n        *(arg1 + 0x2c) = 0;\n    }\n    return;\n}\n",
        "token_count": 329
    },
    "140049a7": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140049a70(int64_t arg1, ulong arg2, ulong arg3)\n\n{\n    int64_t iVar1;\n    code *pcVar2;\n    int64_t iVar3;\n    ulong *puVar4;\n    \n    if (*(arg1 + 0x20) == 0) {\n        iVar3 = fcn.14002aaa4(arg1 + 0x28, *(arg1 + 0x30), 0x18);\n        iVar1 = *(arg1 + 0x30);\n        puVar4 = iVar3 + -0x10 + iVar1 * 0x18;\n        while (iVar1 = iVar1 + -1,  -1 < iVar1) {\n            *puVar4 = *(arg1 + 0x20);\n            *(arg1 + 0x20) = puVar4;\n            puVar4 = puVar4 + -3;\n        }\n    }\n    puVar4 = *(arg1 + 0x20);\n    if (puVar4 != NULL) {\n        *(arg1 + 0x20) = *puVar4;\n        puVar4[1] = arg2;\n        *puVar4 = arg3;\n        *(arg1 + 0x18) = *(arg1 + 0x18) + 1;\n        return;\n    }\n    fcn.140020780();\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 319
    },
    "140049af": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong * fcn.140049afc(int64_t lpModuleName, ulong *arg2)\n\n{\n    int64_t iVar1;\n    ulong uVar2;\n    \n    if (*(lpModuleName + 0x78) == 0) {\n        if (*(lpModuleName + 8) == 0) {\n            iVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(*(lpModuleName + 0x18));\n            *(lpModuleName + 8) = iVar1;\n            if (iVar1 == 0) {\n                iVar1 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(*(lpModuleName + 0x18));\n                *(lpModuleName + 8) = iVar1;\n                *(lpModuleName + 0x10) = iVar1 != 0;\n            }\n        }\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(*(lpModuleName + 8), \"ImageList_Draw\");\n        *(lpModuleName + 0x78) = uVar2;\n    }\n    *arg2 = *(lpModuleName + 0x78);\n    return arg2;\n}\n",
        "token_count": 236
    },
    "140049b7": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nuint64_t fcn.140049b70(int64_t arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    int64_t iVar3;\n    uint64_t uVar4;\n    code *pcVar5;\n    uint in_stack_00000028;\n    uint in_stack_00000030;\n    uint in_stack_00000038;\n    uint uVar6;\n    ulong uStack32;\n    uchar auStack24 [16];\n    \n    uStack32 = 0;\n    iVar3 = fcn.140017ad4();\n    uVar4 = fcn.140016658(*(iVar3 + 0xd8), &uStack32);\n    iVar1 = uVar4;\n    uVar6 = 0;\n    if (iVar1 != 0) {\n        fcn.140049afc(arg1, auStack24);\n        pcVar5 = *(arg1 + 0x78);\n        if (pcVar5 == NULL) {\n            fcn.140020780();\n        }\n        uVar2 = (*pcVar5)(arg2, arg3, arg4, in_stack_00000028, in_stack_00000030, in_stack_00000038, uVar6);\n        uVar4 = uVar2;\n        if (iVar1 != 2) {\n            if (uVar2 != 0) {\n                uVar6 = 0;\n            }\n            else {\n                uVar6 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            }\n            fcn.14001663c(0, uStack32);\n            if (uVar2 == 0) {\n                (*_sym.imp.KERNEL32.dll_SetLastError)(uVar6);\n            }\n        }\n    }\n    return uVar4;\n}\n",
        "token_count": 394
    },
    "140049c6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong * fcn.140049c68(int64_t lpModuleName, ulong *arg2)\n\n{\n    int64_t iVar1;\n    ulong uVar2;\n    \n    if (*(lpModuleName + 0x138) == 0) {\n        if (*(lpModuleName + 8) == 0) {\n            iVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(*(lpModuleName + 0x18));\n            *(lpModuleName + 8) = iVar1;\n            if (iVar1 == 0) {\n                iVar1 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(*(lpModuleName + 0x18));\n                *(lpModuleName + 8) = iVar1;\n                *(lpModuleName + 0x10) = iVar1 != 0;\n            }\n        }\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(*(lpModuleName + 8), \"ImageList_GetImageInfo\");\n        *(lpModuleName + 0x138) = uVar2;\n    }\n    *arg2 = *(lpModuleName + 0x138);\n    return arg2;\n}\n",
        "token_count": 239
    },
    "140049ce": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nuint64_t fcn.140049ce4(int64_t arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint uVar3;\n    int64_t iVar4;\n    uint64_t uVar5;\n    code *pcVar6;\n    ulong uStack32;\n    uchar auStack24 [16];\n    \n    uStack32 = 0;\n    iVar4 = fcn.140017ad4();\n    uVar5 = fcn.140016658(*(iVar4 + 0xd8), &uStack32);\n    iVar1 = uVar5;\n    if (iVar1 != 0) {\n        fcn.140049c68(arg1, auStack24);\n        pcVar6 = *(arg1 + 0x138);\n        if (pcVar6 == NULL) {\n            fcn.140020780();\n        }\n        uVar2 = (*pcVar6)(arg2, arg3, arg4);\n        uVar5 = uVar2;\n        if (iVar1 != 2) {\n            if (uVar2 != 0) {\n                uVar3 = 0;\n            }\n            else {\n                uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            }\n            fcn.14001663c(0, uStack32);\n            if (uVar2 == 0) {\n                (*_sym.imp.KERNEL32.dll_SetLastError)(uVar3);\n            }\n        }\n    }\n    return uVar5;\n}\n",
        "token_count": 335
    },
    "14004a53": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.14004a538(int64_t arg1)\n\n{\n    ulong *puVar1;\n    ulong *puVar2;\n    code *pcVar3;\n    int32_t iVar4;\n    ulong uVar5;\n    int64_t *piVar6;\n    code *pcStack136;\n    ulong *puStack128;\n    ulong uStack120;\n    ulong uStack112;\n    ulong uStack104;\n    ulong uStack96;\n    ulong uStack88;\n    code *pcStack80;\n    ulong *puStack72;\n    ulong uStack64;\n    ulong uStack56;\n    ulong uStack48;\n    ulong uStack40;\n    ulong uStack32;\n    ulong uStack24;\n    \n    uStack24 = 0xfffffffffffffffe;\n    pcStack80 = vtable.CList_struct_HWND______ptr64__struct_HWND______ptr64_.0;\n    uStack56 = 0;\n    uStack48 = 0;\n    uStack64 = 0;\n    puStack72 = NULL;\n    uStack40 = 0;\n    uStack32 = 10;\n    pcStack136 = vtable.CList_struct_HWND______ptr64__struct_HWND______ptr64_.0;\n    uStack112 = 0;\n    uStack104 = 0;\n    uStack120 = 0;\n    puStack128 = NULL;\n    uStack96 = 0;\n    uStack88 = 10;\n    puVar2 = *(arg1 + 0xf0);\n    while (puVar1 = puStack72,  puVar2 != NULL) {\n        if (puVar2 == NULL) {\n            fcn.140020780();\n            pcVar3 = swi(3);\n            (*pcVar3)();\n            return;\n        }\n        puVar1 = *puVar2;\n        piVar6 = puVar2[2];\n        iVar4 = (**(*piVar6 + 0x2e0))(piVar6);\n        puVar2 = puVar1;\n        if (iVar4 == 0) {\n            fcn.14004a2b4(&pcStack136, piVar6[8]);\n        }\n        else {\n            fcn.14004a2b4(&pcStack80, piVar6[8]);\n        }\n    }\n    while( true ) {\n        while( true ) {\n            do {\n                puVar2 = puStack128;\n                if (puVar1 == NULL) {\n                    while (puVar2 != NULL) {\n                        puVar1 = puVar2 + 2;\n                        puVar2 = *puVar2;\n                        uVar5 = fcn.14000fc4c(*puVar1);\n                        piVar6 = fcn.140020bb8(0x1400a8268, uVar5);\n                        if (piVar6 != NULL) {\n                            (**(*piVar6 + 0xc0))(piVar6);\n                        }\n                    }\n                    pcStack136 = vtable.CList_struct_HWND______ptr64__struct_HWND______ptr64_.0;\n                    fcn.140047600(&pcStack136);\n                    pcStack80 = vtable.CList_struct_HWND______ptr64__struct_HWND______ptr64_.0;\n                    fcn.140047600(&pcStack80);\n                    return;\n                }\n                puVar2 = puVar1 + 2;\n                puVar1 = *puVar1;\n                uVar5 = fcn.14000fc4c(*puVar2);\n                piVar6 = fcn.140020bb8(0x1400ad708, uVar5);\n            } while (piVar6 == NULL);\n            if (*(piVar6 + 0x21) != 0) break;\n            (**(*piVar6 + 0xc0))();\n        }\n        piVar6 = fcn.140010d58(piVar6);\n        if (piVar6 == NULL) break;\n        (**(*piVar6 + 0xc0))(piVar6);\n    }\n    fcn.140020780();\n    pcVar3 = swi(3);\n    (*pcVar3)();\n    return;\n}\n",
        "token_count": 899
    },
    "14004bf4": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint32_t * fcn.14004bf48(uint32_t *arg1, ulong arg2, ulong arg3)\n\n{\n    if (arg2 < 8) {\n        arg2._0_4_ = 8;\n    }\n    if (arg3 < 2) {\n        arg3._0_4_ = 0x40;\n    }\n    *(arg1 + 4) = 0;\n    *(arg1 + 2) = 0;\n    arg1[1] = arg3;\n    *arg1 = arg2;\n    return arg1;\n}\n",
        "token_count": 126
    },
    "14004c04": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.14004c040(uint32_t *arg1)\n\n{\n    uint32_t uVar1;\n    int64_t iVar2;\n    ulong *puVar3;\n    \n    if (*(arg1 + 4) == 0) {\n        iVar2 = fcn.14002aaa4(arg1 + 2, arg1[1], *arg1);\n        uVar1 = arg1[1];\n        puVar3 = iVar2 + 8 + (uVar1 - 1) * *arg1;\n        while (uVar1 = uVar1 - 1,  -1 < uVar1) {\n            *puVar3 = *(arg1 + 4);\n            *(arg1 + 4) = puVar3;\n            puVar3 = puVar3 - *arg1;\n        }\n    }\n    *(arg1 + 4) = **(arg1 + 4);\n    return;\n}\n",
        "token_count": 201
    },
    "14004c99": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong * fcn.14004c99c(int64_t lpModuleName, ulong *arg2)\n\n{\n    int64_t iVar1;\n    ulong uVar2;\n    \n    if (*(lpModuleName + 0x20) == 0) {\n        if (*(lpModuleName + 8) == 0) {\n            iVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(*(lpModuleName + 0x18));\n            *(lpModuleName + 8) = iVar1;\n            if (iVar1 == 0) {\n                iVar1 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(*(lpModuleName + 0x18));\n                *(lpModuleName + 8) = iVar1;\n                *(lpModuleName + 0x10) = iVar1 != 0;\n            }\n        }\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(*(lpModuleName + 8), 0x1400a9270);\n        *(lpModuleName + 0x20) = uVar2;\n    }\n    *arg2 = *(lpModuleName + 0x20);\n    return arg2;\n}\n",
        "token_count": 242
    },
    "14004ca1": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nuint64_t fcn.14004ca10(int64_t arg1, ulong arg2)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint uVar3;\n    int64_t iVar4;\n    uint64_t uVar5;\n    ulong in_R8;\n    ulong in_R9;\n    code *pcVar6;\n    bool bVar7;\n    ulong uStackX32;\n    uchar auStack16 [8];\n    \n    uStackX32 = 0;\n    iVar4 = fcn.140017ad4();\n    uVar5 = fcn.140016658(*(iVar4 + 0xd8), &uStackX32);\n    iVar1 = uVar5;\n    if (iVar1 != 0) {\n        fcn.14004c99c(arg1, auStack16);\n        pcVar6 = *(arg1 + 0x20);\n        if (pcVar6 == NULL) {\n            fcn.140020780();\n        }\n        uVar2 = (*pcVar6)(arg2);\n        uVar5 = uVar2;\n        if (iVar1 != 2) {\n            bVar7 = uVar2 != 0;\n            if (bVar7) {\n                uVar3 = 0;\n            }\n            else {\n                uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            }\n            fcn.14001663c(0, uStackX32, in_R8, in_R9, uVar2);\n            if (!bVar7) {\n                (*_sym.imp.KERNEL32.dll_SetLastError)(uVar3);\n            }\n        }\n    }\n    return uVar5;\n}\n",
        "token_count": 362
    },
    "14004cac": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong * fcn.14004cac4(int64_t lpModuleName, ulong *arg2)\n\n{\n    int64_t iVar1;\n    ulong uVar2;\n    \n    if (*(lpModuleName + 0x30) == 0) {\n        if (*(lpModuleName + 8) == 0) {\n            iVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(*(lpModuleName + 0x18));\n            *(lpModuleName + 8) = iVar1;\n            if (iVar1 == 0) {\n                iVar1 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(*(lpModuleName + 0x18));\n                *(lpModuleName + 8) = iVar1;\n                *(lpModuleName + 0x10) = iVar1 != 0;\n            }\n        }\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(*(lpModuleName + 8), \"GetSaveFileNameA\");\n        *(lpModuleName + 0x30) = uVar2;\n    }\n    *arg2 = *(lpModuleName + 0x30);\n    return arg2;\n}\n",
        "token_count": 238
    },
    "14004cb3": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nuint64_t fcn.14004cb38(int64_t arg1, ulong arg2)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint uVar3;\n    int64_t iVar4;\n    uint64_t uVar5;\n    ulong in_R8;\n    ulong in_R9;\n    code *pcVar6;\n    bool bVar7;\n    ulong uStackX32;\n    uchar auStack16 [8];\n    \n    uStackX32 = 0;\n    iVar4 = fcn.140017ad4();\n    uVar5 = fcn.140016658(*(iVar4 + 0xd8), &uStackX32);\n    iVar1 = uVar5;\n    if (iVar1 != 0) {\n        fcn.14004cac4(arg1, auStack16);\n        pcVar6 = *(arg1 + 0x30);\n        if (pcVar6 == NULL) {\n            fcn.140020780();\n        }\n        uVar2 = (*pcVar6)(arg2);\n        uVar5 = uVar2;\n        if (iVar1 != 2) {\n            bVar7 = uVar2 != 0;\n            if (bVar7) {\n                uVar3 = 0;\n            }\n            else {\n                uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            }\n            fcn.14001663c(0, uStackX32, in_R8, in_R9, uVar2);\n            if (!bVar7) {\n                (*_sym.imp.KERNEL32.dll_SetLastError)(uVar3);\n            }\n        }\n    }\n    return uVar5;\n}\n",
        "token_count": 361
    },
    "14004cc8": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.14004cc84(code **arg1)\n\n{\n    int32_t *piVar1;\n    int64_t *piVar2;\n    code *pcVar3;\n    int32_t iVar4;\n    ulong in_R8;\n    ulong in_R9;\n    ulong uVar5;\n    \n    uVar5 = 0xfffffffffffffffe;\n    *arg1 = vtable.CFileDialog.0;\n    fcn.140069e50(arg1[0x1d]);\n    if (*(arg1 + 0x1e) == 1) {\n        iVar4 = (**(*arg1[0x1f] + 0x40))(arg1[0x1f], *(arg1 + 0xf4), in_R8, in_R9, uVar5);\n        if (iVar4 < 0) {\n            fcn.140020780();\n            pcVar3 = swi(3);\n            (*pcVar3)();\n            return;\n        }\n        (**(*arg1[0x20] + 0x10))();\n        iVar4 = (**(*arg1[0x1f] + 0x10))();\n        if (iVar4 != 0) {\n            fcn.140020780();\n            pcVar3 = swi(3);\n            (*pcVar3)();\n            return;\n        }\n        (*_sym.imp.ole32.dll_CoUninitialize)();\n    }\n    pcVar3 = arg1[0x22];\n    LOCK();\n    piVar1 = pcVar3 + -8;\n    iVar4 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar4 + -1 < 1) {\n        (**(**(pcVar3 + -0x18) + 8))();\n    }\n    *arg1 = vtable.CCommonDialog.0;\n    *arg1 = vtable.CDialog.0;\n    if (arg1[8] != NULL) {\n        fcn.14000ff48(arg1);\n    }\n    uVar5 = 0xfffffffffffffffe;\n    *arg1 = vtable.CWnd.0;\n    if ((((arg1[8] != NULL) && (arg1 != 0x1400de280)) && (arg1 != 0x1400de330)) &&\n       ((arg1 != 0x1400de3e0 && (arg1 != 0x1400de490)))) {\n        fcn.14000ff48(arg1);\n    }\n    piVar2 = arg1[0x13];\n    if (piVar2 != NULL) {\n        (**(*piVar2 + 8))(piVar2, 1, in_R8, in_R9, uVar5);\n    }\n    pcVar3 = arg1[0x14];\n    if ((pcVar3 != NULL) && (*(pcVar3 + 0x50) == arg1)) {\n        *(pcVar3 + 0x50) = 0;\n    }\n    if (arg1[4] != NULL) {\n        (**(arg1[4] + 0x38))();\n    }\n    arg1[7] = NULL;\n    return;\n}\n",
        "token_count": 687
    },
    "14004dcd": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nint64_t fcn.14004dcd0(int64_t lpString)\n\n{\n    bool bVar1;\n    int32_t iVar2;\n    ulong uVar3;\n    ulong uVar4;\n    int64_t iVar5;\n    int64_t iVar6;\n    \n    iVar2 = (*_sym.imp.KERNEL32.dll_lstrlenA)();\n    fcn.1400698a0(iVar2 + 1U + *(*(lpString + 0xe8) + 0x30), 0, *(*(lpString + 0xe8) + 0x38) - (iVar2 + 1U));\n    uVar3 = (*_sym.imp.USER32.dll_GetFocus)();\n    iVar5 = *(lpString + 0xe8);\n    bVar1 = false;\n    uVar4 = fcn.1400090f0(lpString);\n    *(iVar5 + 8) = uVar4;\n    fcn.14000fd24();\n    if (*(*(lpString + 0xe8) + 8) != 0) {\n        iVar2 = (*_sym.imp.USER32.dll_IsWindowEnabled)(*(*(lpString + 0xe8) + 8));\n        if (iVar2 != 0) {\n            bVar1 = true;\n            (*_sym.imp.USER32.dll_EnableWindow)(*(*(lpString + 0xe8) + 8), 0);\n        }\n    }\n    iVar5 = fcn.140016f48();\n    if ((*(lpString + 0xf0) == 1) || ((*(*(lpString + 0xe8) + 0x60) >> 0x13 & 1) == 0)) {\n        fcn.140012ea4(lpString);\n    }\n    else {\n        *(iVar5 + 0x30) = lpString;\n    }\n    if (*(lpString + 0xf0) == 1) {\n        fcn.14004d490(lpString);\n        iVar2 = (**(**(lpString + 0xf8) + 0x18))(*(lpString + 0xf8), *(*(lpString + 0xe8) + 8));\n        iVar6 = (iVar2 != 0) + 1;\n    }\n    else {\n        uVar4 = *(lpString + 0xe8);\n        if (*(lpString + 0x108) == 0) {\n            iVar6 = fcn.140017ad4();\n            iVar2 = fcn.14004cb38(*(*(iVar6 + 200) + 8), uVar4);\n        }\n        else {\n            iVar6 = fcn.140017ad4();\n            iVar2 = fcn.14004ca10(*(*(iVar6 + 200) + 8), uVar4);\n        }\n        iVar6 = iVar2;\n    }\n    *(iVar5 + 0x30) = 0;\n    if (bVar1) {\n        (*_sym.imp.USER32.dll_EnableWindow)(*(*(lpString + 0xe8) + 8), 1);\n    }\n    iVar2 = (*_sym.imp.USER32.dll_IsWindow)(uVar3);\n    if (iVar2 != 0) {\n        (*_sym.imp.USER32.dll_SetFocus)(uVar3);\n    }\n    fcn.14000914c(lpString);\n    iVar5 = 2;\n    if (iVar6 != 0) {\n        iVar5 = iVar6;\n    }\n    return iVar5;\n}\n",
        "token_count": 751
    },
    "14004de8": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint64_t * fcn.14004de80(int64_t arg1, int64_t *arg2)\n\n{\n    int32_t *piVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    int64_t *piVar4;\n    int64_t iVar5;\n    int64_t iVar6;\n    ulong uVar7;\n    ulong *noname_2;\n    ulong uVar8;\n    ulong in_R9;\n    uint auStackX8 [4];\n    int64_t iStackX24;\n    int64_t *piStackX32;\n    ulong uStack72;\n    int64_t iStack64;\n    ulong uStack56;\n    \n    uStack56 = 0xfffffffffffffffe;\n    auStackX8[0] = 0;\n    if (*(arg1 + 0xf0) == 1) {\n        if (*(arg1 + 0x40) == 0) {\n            fcn.1400057dc(arg2, *(*(arg1 + 0xe8) + 0x30));\n            return arg2;\n        }\n        piVar4 = fcn.140017fc0();\n        if (piVar4 != NULL) {\n            iVar5 = (**(*piVar4 + 0x18))(piVar4);\n            iVar5 = iVar5 + 0x18;\n            iStack64 = iVar5;\n            iVar3 = (**(**(arg1 + 0xf8) + 0x70))(*(arg1 + 0xf8), &piStackX32);\n            if (-1 < iVar3) {\n                iVar3 = (**(*piStackX32 + 0x30))(piStackX32, 0x400000, auStackX8);\n                if ((iVar3 != 1) || (iVar3 = (**(*piStackX32 + 0x30))(piStackX32, 0x20000000, auStackX8),  iVar3 != 0))\n                {\n                    uStack72 = 0;\n                    noname_2 = &uStack72;\n                    iVar3 = (**(*piStackX32 + 0x28))(piStackX32, 0x80058000);\n                    if (-1 < iVar3) {\n                        fcn.14001f070(&iStack64, uStack72, noname_2, in_R9);\n                        iVar5 = iStack64;\n                        iVar3 = fcn.14006b544(iStack64, *(iStack64 + -0xc));\n                        if ((iVar3 < 0) || (*(iVar5 + -0xc) < iVar3)) {\n                            fcn.1400031e0(0x80070057);\n                            pcVar2 = swi(3);\n                            piVar4 = (*pcVar2)();\n                            return piVar4;\n                        }\n                        *(iVar5 + -0x10) = iVar3;\n                        *(iVar3 + iVar5) = 0;\n                        (*_sym.imp.ole32.dll_CoTaskMemFree)(uStack72);\n                    }\n                }\n                (**(*piStackX32 + 0x10))();\n            }\n            iVar6 = fcn.1400075ec(iVar5 + -0x18);\n            *arg2 = iVar6 + 0x18;\n            LOCK();\n            piVar1 = iVar5 + -8;\n            iVar3 = *piVar1;\n            *piVar1 = *piVar1 + -1;\n            if (0 < iVar3 + -1) {\n                return arg2;\n            }\n            (**(**(iVar5 + -0x18) + 8))(*(iVar5 + -0x18), iVar5 + -0x18);\n            return arg2;\n        }\n        fcn.1400031e0(0x80004005);\n        pcVar2 = swi(3);\n        piVar4 = (*pcVar2)();\n        return piVar4;\n    }\n    if (((*(*(arg1 + 0xe8) + 0x60) >> 0x13 & 1) != 0) && (*(arg1 + 0x40) != 0)) {\n        piVar4 = fcn.140017fc0();\n        if (piVar4 == NULL) {\n            fcn.1400031e0(0x80004005);\n            pcVar2 = swi(3);\n            piVar4 = (*pcVar2)();\n            return piVar4;\n        }\n        iVar5 = (**(*piVar4 + 0x18))();\n        iStackX24 = iVar5 + 0x18;\n        if ((*(iVar5 + 0xc) - 0x104U | 1U - *(iVar5 + 0x10)) < 0) {\n            fcn.1400033e0(&iStackX24, 0x104);\n        }\n        iVar5 = iStackX24;\n        uVar7 = (*_sym.imp.USER32.dll_GetParent)(*(arg1 + 0x40));\n        iVar6 = fcn.14000fc08(uVar7);\n        uVar8 = 0x104;\n        uVar7 = 0x464;\n        iVar6 = (*_sym.imp.USER32.dll_SendMessageA)(*(iVar6 + 0x40), 0x464, 0x104, iVar5);\n        if (iVar6 < 0) {\n            fcn.140004828(&iStackX24, uVar7, uVar8);\n            iVar5 = iStackX24;\n        }\n        else {\n            iVar3 = fcn.14006b544(iVar5, *(iVar5 + -0xc));\n            if ((iVar3 < 0) || (*(iVar5 + -0xc) < iVar3)) {\n                fcn.1400031e0(0x80070057);\n                goto code_r0x00014004e1e5;\n            }\n            *(iVar5 + -0x10) = iVar3;\n            *(iVar3 + iVar5) = 0;\n        }\n        if (*(iVar5 + -0x10) != 0) {\n            if ((*(iVar5 + -0xc) - 0x104U | 1U - *(iVar5 + -8)) < 0) {\n                fcn.1400033e0(&iStackX24, 0x104);\n                iVar5 = iStackX24;\n            }\n            uVar7 = (*_sym.imp.USER32.dll_GetParent)(*(arg1 + 0x40));\n            iVar6 = fcn.14000fc08(uVar7);\n            uVar8 = 0x104;\n            uVar7 = 0x465;\n            iVar6 = (*_sym.imp.USER32.dll_SendMessageA)(*(iVar6 + 0x40), 0x465, 0x104, iVar5);\n            if (iVar6 < 0) {\n                fcn.140004828(&iStackX24, uVar7, uVar8);\n                iVar5 = iStackX24;\n            }\n            else {\n                iVar3 = fcn.14006b544(iVar5, *(iVar5 + -0xc));\n                if ((-1 < iVar3) && (iVar3 <= *(iVar5 + -0xc))) {\n                    *(iVar5 + -0x10) = iVar3;\n                    *(iVar3 + iVar5) = 0;\n                    iVar6 = fcn.1400075ec(iVar5 + -0x18);\n                    *arg2 = iVar6 + 0x18;\n                    LOCK();\n                    piVar1 = iVar5 + -8;\n                    iVar3 = *piVar1;\n                    *piVar1 = *piVar1 + -1;\n                    if (0 < iVar3 + -1) {\n                        return arg2;\n                    }\n                    (**(**(iVar5 + -0x18) + 8))(*(iVar5 + -0x18), iVar5 + -0x18);\n                    return arg2;\n                }\n                fcn.1400031e0(0x80070057);\n            }\n        }\n        LOCK();\n        piVar1 = iVar5 + -8;\n        iVar3 = *piVar1;\n        *piVar1 = *piVar1 + -1;\n        if (iVar3 + -1 < 1) {\n            (**(**(iVar5 + -0x18) + 8))();\n        }\n    }\ncode_r0x00014004e1e5:\n    fcn.1400057dc(arg2, *(*(arg1 + 0xe8) + 0x30));\n    return arg2;\n}\n",
        "token_count": 1863
    },
    "14004e20": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint64_t * fcn.14004e208(int64_t arg1, int64_t *arg2)\n\n{\n    int32_t *piVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    int64_t iVar4;\n    int64_t *piVar5;\n    ulong uVar6;\n    int64_t iVar7;\n    ulong in_R8;\n    ulong pv;\n    ulong in_R9;\n    uint uStackX8;\n    uint uStackX12;\n    int64_t iStackX24;\n    ulong uStackX32;\n    \n    uStackX8 = 0;\n    if (*(arg1 + 0xf0) == 1) {\n        if (*(arg1 + 0x40) != 0) {\n            iVar3 = (**(**(arg1 + 0xf8) + 0x80))(*(arg1 + 0xf8), &uStackX32, in_R8, in_R9, 0xfffffffffffffffe);\n            fcn.14001f14c(&uStackX8, uStackX32);\n            if (-1 < iVar3) {\n                (*_sym.imp.ole32.dll_CoTaskMemFree)(uStackX32);\n            }\n            iVar3 = fcn.14006b544(CONCAT44(uStackX12, uStackX8), *(CONCAT44(uStackX12, uStackX8) + -0xc));\n            if ((-1 < iVar3) && (iVar3 <= *(CONCAT44(uStackX12, uStackX8) + -0xc))) {\n                *(CONCAT44(uStackX12, uStackX8) + -0x10) = iVar3;\n                *(iVar3 + CONCAT44(uStackX12, uStackX8)) = 0;\n                iVar4 = fcn.1400075ec(CONCAT44(uStackX12, uStackX8) + -0x18);\n                *arg2 = iVar4 + 0x18;\n                LOCK();\n                piVar1 = CONCAT44(uStackX12, uStackX8) + -8;\n                iVar3 = *piVar1;\n                *piVar1 = *piVar1 + -1;\n                if (0 < iVar3 + -1) {\n                    return arg2;\n                }\n                (**(**(CONCAT44(uStackX12, uStackX8) + -0x18) + 8))();\n                return arg2;\n            }\n            arg1 = 0x80070057;\n            fcn.1400031e0(0x80070057);\n        }\n        fcn.1400057dc(arg2, *(*(arg1 + 0xe8) + 0x40));\n    }\n    else {\n        if (((*(*(arg1 + 0xe8) + 0x60) >> 0x13 & 1) != 0) && (*(arg1 + 0x40) != 0)) {\n            piVar5 = fcn.140017fc0();\n            if (piVar5 == NULL) {\n                fcn.1400031e0(0x80004005);\n                pcVar2 = swi(3);\n                piVar5 = (*pcVar2)();\n                return piVar5;\n            }\n            iVar4 = (**(*piVar5 + 0x18))(piVar5);\n            iStackX24 = iVar4 + 0x18;\n            if ((*(iVar4 + 0xc) - 0x104U | 1U - *(iVar4 + 0x10)) < 0) {\n                fcn.1400033e0(&iStackX24, 0x104);\n            }\n            iVar4 = iStackX24;\n            uVar6 = (*_sym.imp.USER32.dll_GetParent)(*(arg1 + 0x40));\n            iVar7 = fcn.14000fc08(uVar6);\n            uVar6 = 0x464;\n            pv = 0x104;\n            iVar7 = (*_sym.imp.USER32.dll_SendMessageA)(*(iVar7 + 0x40), 0x464, 0x104, iVar4);\n            if (iVar7 < 0) {\n                fcn.140004828(&iStackX24, uVar6, pv);\n                LOCK();\n                piVar1 = iStackX24 + -8;\n                iVar3 = *piVar1;\n                *piVar1 = *piVar1 + -1;\n                if (iVar3 + -1 < 1) {\n                    (**(**(iStackX24 + -0x18) + 8))();\n                }\n            }\n            else {\n                iVar3 = fcn.14006b544(iVar4, *(iVar4 + -0xc));\n                if ((-1 < iVar3) && (iVar3 <= *(iVar4 + -0xc))) {\n                    *(iVar4 + -0x10) = iVar3;\n                    *(iVar3 + iVar4) = 0;\n                    iVar7 = fcn.1400075ec(iVar4 + -0x18);\n                    *arg2 = iVar7 + 0x18;\n                    LOCK();\n                    piVar1 = iVar4 + -8;\n                    iVar3 = *piVar1;\n                    *piVar1 = *piVar1 + -1;\n                    if (0 < iVar3 + -1) {\n                        return arg2;\n                    }\n                    (**(**(iVar4 + -0x18) + 8))(*(iVar4 + -0x18), iVar4 + -0x18);\n                    return arg2;\n                }\n                fcn.1400031e0(0x80070057);\n            }\n        }\n        fcn.1400057dc(arg2, *(*(arg1 + 0xe8) + 0x40));\n    }\n    return arg2;\n}\n",
        "token_count": 1266
    },
    "14004eeb": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.14004eeb8(int64_t arg1)\n\n{\n    int32_t *piVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    int64_t iVar5;\n    int64_t *piVar6;\n    int64_t *piVar7;\n    int64_t iVar8;\n    uchar *puVar9;\n    uint auStackX8 [2];\n    int64_t iStackX16;\n    int64_t iStackX24;\n    int64_t iStackX32;\n    int64_t iStack136;\n    int64_t *piStack128;\n    int64_t *piStack120;\n    int64_t *piStack112;\n    int64_t *piStack104;\n    int64_t *piStack96;\n    int64_t iStack88;\n    int64_t iStack80;\n    int64_t iStack72;\n    int64_t iStack64;\n    ulong uStack56;\n    \n    uStack56 = 0xfffffffffffffffe;\n    if (*(arg1 + 0xf0) == 1) {\n        iVar3 = (**(**(arg1 + 0xf8) + 0xa0))(*(arg1 + 0xf8), &piStack96);\n        if (iVar3 < 0) {\n            if ((*(*(arg1 + 0xe8) + 0x60) >> 9 & 1) != 0) {\n                piStack104 = NULL;\n                iVar3 = (****(arg1 + 0xf8))(*(arg1 + 0xf8), 0x1400a9240, &piStack104);\n                if (-1 < iVar3) {\n                    piStack112 = NULL;\n                    iVar3 = (**(*piStack104 + 0xd8))(piStack104, &piStack112);\n                    if (-1 < iVar3) {\n                        iVar3 = (**(*piStack112 + 0x48))(piStack112, &piStack120);\n                        if (-1 < iVar3) {\n                            auStackX8[0] = 0;\n                            iVar3 = (**(*piStack120 + 0x18))(piStack120, 1, &piStack128, auStackX8);\n                            if (iVar3 == 0) {\n                                piVar6 = fcn.140017fc0();\n                                if (piVar6 == NULL) {\n                                    fcn.1400031e0(0x80004005);\n                                    pcVar2 = swi(3);\n                                    (*pcVar2)();\n                                    return;\n                                }\n                                iVar8 = (**(*piVar6 + 0x18))(piVar6);\n                                iVar8 = iVar8 + 0x18;\n                                puVar9 = *(*(arg1 + 0xe8) + 0x30);\n                                iStackX16 = 0;\n                                iStack136 = iVar8;\n                                iVar3 = (**(*piStack128 + 0x28))(piStack128, 0x80058000, &iStackX16);\n                                if (-1 < iVar3) {\n                                    (*_sym.imp.SHLWAPI.dll_PathRemoveFileSpecW)(iStackX16);\n                                    iVar3 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)\n                                                      (0, 0, iStackX16, 0xffffffff, puVar9, \n                                                       *(*(arg1 + 0xe8) + 0x38) + -1, 0, 0);\n                                    puVar9 = puVar9 + iVar3;\n                                    (*_sym.imp.ole32.dll_CoTaskMemFree)(iStackX16);\n                                }\n                                do {\n                                    iStackX16 = 0;\n                                    iVar3 = (**(*piStack128 + 0x28))(piStack128, 0x80058000);\n                                    iVar5 = iStackX16;\n                                    if (-1 < iVar3) {\n                                        if (iStackX16 == 0) {\n                                            uVar4 = 0;\n                                        }\n                                        else {\n                                            uVar4 = fcn.14006bd0c(iStackX16);\n                                        }\n                                        fcn.140018c68(&iStack136, iVar5, uVar4);\n                                        if (1 < *(iStack136 + -8)) {\n                                            fcn.1400184e4(&iStack136, *(iStack136 + -0x10));\n                                        }\n                                        iVar8 = iStack136;\n                                        (*_sym.imp.SHLWAPI.dll_PathRemoveFileSpecW)(iStack136);\n                                        iVar3 = fcn.14006d630(iVar8, *(iVar8 + -0xc));\n                                        if ((iVar3 < 0) || (*(iVar8 + -0xc) < iVar3)) {\n                                            fcn.1400031e0(0x80070057);\n                                            pcVar2 = swi(3);\n                                            (*pcVar2)();\n                                            return;\n                                        }\n                                        *(iVar8 + -0x10) = iVar3;\n                                        *(iVar8 + iVar3 * 2) = 0;\n                                        iVar5 = *(iVar8 + -0x10);\n                                        if (*(iStackX16 + iVar5 * 2) == 0x5c) {\n                                            iVar5 = iVar5 + 1;\n                                        }\n                                        iVar3 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)\n                                                          (0, 0, iStackX16 + iVar5 * 2, 0xffffffff, puVar9, \n                                                           ((*(*(arg1 + 0xe8) + 0x38) + *(*(arg1 + 0xe8) + 0x30)) -\n                                                           puVar9) + -1, 0, 0);\n                                        puVar9 = puVar9 + iVar3;\n                                        (*_sym.imp.ole32.dll_CoTaskMemFree)(iStackX16);\n                                    }\n                                    (**(*piStack128 + 0x10))();\n                                } while ((puVar9 < (*(*(arg1 + 0xe8) + 0x38) - 1) + *(*(arg1 + 0xe8) + 0x30)) &&\n                                        (iVar3 = (**(*piStack120 + 0x18))(piStack120, 1, &piStack128),  iVar3 == 0));\n                                if (puVar9 < (*(*(arg1 + 0xe8) + 0x38) - 1) + *(*(arg1 + 0xe8) + 0x30)) {\n                                    *puVar9 = 0;\n                                }\n                                else {\n                                    *((*(*(arg1 + 0xe8) + 0x38) - 2) + *(*(arg1 + 0xe8) + 0x30)) = 0;\n                                    *((*(*(arg1 + 0xe8) + 0x38) - 1) + *(*(arg1 + 0xe8) + 0x30)) = 0;\n                                }\n                                LOCK();\n                                piVar1 = iVar8 + -8;\n                                iVar3 = *piVar1;\n                                *piVar1 = *piVar1 + -1;\n                                if (iVar3 + -1 < 1) {\n                                    (**(**(iVar8 + -0x18) + 8))();\n                                }\n                            }\n                            (**(*piStack120 + 0x10))();\n                        }\n                        (**(*piStack112 + 0x10))();\n                    }\n                    (**(*piStack104 + 0x10))();\n                }\n            }\n        }\n        else {\n            iStackX32 = 0;\n            iVar3 = (**(*piStack96 + 0x28))(piStack96, 0x80058000, &iStackX32);\n            if (-1 < iVar3) {\n                fcn.14004ee14(&iStackX24, iStackX32);\n                if (1 < *(iStackX24 + -8)) {\n                    fcn.1400184e4(&iStackX24, *(iStackX24 + -0x10));\n                }\n                (*_sym.imp.SHLWAPI.dll_PathRemoveFileSpecW)(iStackX24);\n                iVar3 = fcn.14006d630(iStackX24, *(iStackX24 + -0xc));\n                if ((iVar3 < 0) || (*(iStackX24 + -0xc) < iVar3)) {\n                    fcn.1400031e0(0x80070057);\n                }\n                else {\n                    *(iStackX24 + -0x10) = iVar3;\n                    *(iStackX24 + iVar3 * 2) = 0;\n                    iVar8 = *(iStackX24 + -0x10);\n                    if (*(iStackX32 + iVar8 * 2) == 0x5c) {\n                        iVar8 = iVar8 + 1;\n                    }\n                    (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)\n                              (0, 0, iStackX32 + iVar8 * 2, 0xffffffff, *(*(arg1 + 0xe8) + 0x40), \n                               *(*(arg1 + 0xe8) + 0x48), 0, 0);\n                    *((*(*(arg1 + 0xe8) + 0x48) - 1) + *(*(arg1 + 0xe8) + 0x40)) = 0;\n                    (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)\n                              (0, 0, iStackX32, 0xffffffff, *(*(arg1 + 0xe8) + 0x30), *(*(arg1 + 0xe8) + 0x38) + -1, 0, \n                               0);\n                    *((*(*(arg1 + 0xe8) + 0x38) - 2) + *(*(arg1 + 0xe8) + 0x30)) = 0;\n                    iVar8 = *(arg1 + 0xe8);\n                    iVar5 = fcn.1400699a0(*(iVar8 + 0x30));\n                    *(iVar5 + 1 + *(iVar8 + 0x30)) = 0;\n                    (*_sym.imp.ole32.dll_CoTaskMemFree)(iStackX32);\n                    LOCK();\n                    piVar1 = iStackX24 + -8;\n                    iVar3 = *piVar1;\n                    *piVar1 = *piVar1 + -1;\n                    if (iVar3 + -1 < 1) {\n                        (**(**(iStackX24 + -0x18) + 8))();\n                    }\n                }\n            }\n            (**(*piStack96 + 0x10))();\n        }\n        piVar6 = fcn.14004de80(arg1, &iStack64);\n        piVar7 = fcn.14004e208(arg1, &iStack80);\n        *(*(arg1 + 0xe8) + 100) = *(*piVar6 + -0x10) - *(*piVar7 + -0x10);\n        LOCK();\n        piVar1 = iStack80 + -8;\n        iVar3 = *piVar1;\n        *piVar1 = *piVar1 + -1;\n        if (iVar3 + -1 < 1) {\n            (**(**(iStack80 + -0x18) + 8))();\n        }\n        LOCK();\n        piVar1 = iStack64 + -8;\n        iVar3 = *piVar1;\n        *piVar1 = *piVar1 + -1;\n        if (iVar3 + -1 < 1) {\n            (**(**(iStack64 + -0x18) + 8))();\n        }\n        piVar6 = fcn.14004de80(arg1, &iStack72);\n        piVar7 = fcn.14004e454(arg1, &iStack88);\n        *(*(arg1 + 0xe8) + 0x66) = *(*piVar6 + -0x10) - *(*piVar7 + -0x10);\n        LOCK();\n        piVar1 = iStack88 + -8;\n        iVar3 = *piVar1;\n        *piVar1 = *piVar1 + -1;\n        if (iVar3 + -1 < 1) {\n            (**(**(iStack88 + -0x18) + 8))();\n        }\n        LOCK();\n        piVar1 = iStack72 + -8;\n        iVar3 = *piVar1;\n        *piVar1 = *piVar1 + -1;\n        if (iVar3 + -1 < 1) {\n            (**(**(iStack72 + -0x18) + 8))();\n        }\n    }\n    return;\n}\n",
        "token_count": 2772
    },
    "1400503c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.1400503c8(ulong *arg1)\n\n{\n    if (*(arg1 + 2) != 0) {\n        fcn.1400036d8(*arg1);\n    }\n    return;\n}\n",
        "token_count": 50
    },
    "14005075": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint64_t fcn.140050758(int64_t arg1, int64_t arg2, int16_t **arg3, uint *arg4)\n\n{\n    ulong *arg1_00;\n    int16_t iVar1;\n    uint16_t uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint64_t uVar5;\n    int16_t *piVar6;\n    ulong uVar7;\n    ulong uStack80;\n    int32_t iStack72;\n    int16_t aiStack64 [12];\n    \n    uVar7 = 0xfffffffffffffffe;\n    fcn.14003ba3c(aiStack64);\n    piVar6 = *arg3;\n    iVar1 = *(arg2 + 0x18);\n    uVar3 = 0;\n    if ((iVar1 != 0xc) && (uVar3 = 0,  *piVar6 != iVar1)) {\n        uVar5 = (*_sym.imp.OLEAUT32.dll_VariantTimeToDosDateTime)(aiStack64, piVar6, 0, iVar1, uVar7);\n        uVar3 = uVar5;\n        if (uVar3 < 0) {\n            *arg4 = 0;\n            return uVar5;\n        }\n        piVar6 = aiStack64;\n    }\n    arg1_00 = arg1 + *(arg2 + 0x30);\n    uVar2 = *(arg2 + 0x18);\n    if (uVar2 < 0xb) {\n        if (uVar2 == 10) {\n            *arg1_00 = *(piVar6 + 4);\n            goto code_r0x000140050916;\n        }\n        if (uVar2 == 2) {\ncode_r0x0001400508b6:\n            *arg1_00 = piVar6[4];\n            goto code_r0x000140050916;\n        }\n        if (uVar2 == 3) {\ncode_r0x0001400508af:\n            *arg1_00 = *(piVar6 + 4);\n            goto code_r0x000140050916;\n        }\n        if (uVar2 == 4) {\n            *arg1_00 = *(piVar6 + 4);\n            goto code_r0x000140050916;\n        }\n        if (uVar2 == 5) {\n            *arg1_00 = *(piVar6 + 4);\n            goto code_r0x000140050916;\n        }\n        if (uVar2 == 6) {\n            *arg1_00 = *(piVar6 + 4);\n            goto code_r0x000140050916;\n        }\n        if (uVar2 == 7) {\n            *arg1_00 = *(piVar6 + 4);\n            goto code_r0x000140050916;\n        }\n        if (uVar2 == 8) {\n            fcn.140043fa0(arg1_00, *(piVar6 + 4));\n            goto code_r0x000140050916;\n        }\n        if (uVar2 != 9) goto code_r0x0001400508c6;\n    }\n    else {\n        if (uVar2 == 0xb) {\n            *arg1_00 = piVar6[4] != 0;\n            goto code_r0x000140050916;\n        }\n        if (uVar2 == 0xc) {\n            iVar4 = (*_sym.imp.OLEAUT32.dll_VariantCopyInd)(arg1_00, piVar6);\n            if (iVar4 != 0) {\n                *arg4 = 0;\n            }\n            goto code_r0x000140050916;\n        }\n        if (uVar2 != 0xd) {\n            if (0xf < uVar2) {\n                if (uVar2 < 0x12) {\n                    *arg1_00 = *(piVar6 + 4);\n                    goto code_r0x000140050916;\n                }\n                if (uVar2 == 0x12) goto code_r0x0001400508b6;\n                if (uVar2 == 0x13) goto code_r0x0001400508af;\n                if (uVar2 - 0x14 < 2) {\n                    *arg1_00 = *(piVar6 + 4);\n                    goto code_r0x000140050916;\n                }\n            }\ncode_r0x0001400508c6:\n            *arg4 = 0;\n            uVar3 = 0x80020008;\n            goto code_r0x000140050916;\n        }\n    }\n    if (*(piVar6 + 4) != 0) {\n        (**(**(piVar6 + 4) + 8))();\n    }\n    fcn.14003a77c(arg1_00);\n    *arg1_00 = *(piVar6 + 4);\ncode_r0x000140050916:\n    (*_sym.imp.OLEAUT32.dll_VariantCopy)(aiStack64);\n    if ((-1 < uVar3) && (*(arg2 + 0x28) != 0)) {\n        fcn.140017bd0(&uStack80, *(arg1 + 0x38));\n        (**(arg2 + 0x28))(arg1);\n        if (iStack72 != 0) {\n            fcn.14001663c(0, uStack80);\n        }\n    }\n    return uVar3;\n}\n",
        "token_count": 1202
    },
    "14005097": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nuint32_t fcn.140050978(int64_t *arg1, ulong arg2)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    ulong *puVar4;\n    uint32_t uVar5;\n    \n    iVar3 = 0;\n    if (arg1 != NULL) {\n        do {\n            puVar4 = arg1[1];\n            uVar1 = fcn.1400501d0(arg1);\n            uVar5 = 0;\n            if (uVar1 != 0) {\n                do {\n                    if ((*(puVar4 + 3) != 0xfff) &&\n                       (iVar2 = (*_sym.imp.KERNEL32.dll_CompareStringA)(0x409, 1, *puVar4, 0xffffffff, arg2, 0xffffffff)\n                       ,  iVar2 == 2)) {\n                        if (*(puVar4 + 1) != 0xffffffff) {\n                            return *(puVar4 + 1);\n                        }\n                        return uVar5 + 1 | iVar3 << 0x10;\n                    }\n                    uVar5 = uVar5 + 1;\n                    puVar4 = puVar4 + 8;\n                } while (uVar5 < uVar1);\n            }\n            arg1 = *arg1;\n            iVar3 = iVar3 + 1;\n        } while (arg1 != NULL);\n    }\n    return 0xffffffff;\n}\n",
        "token_count": 316
    },
    "140050cc": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140050cc0(code **arg1)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    \n    *arg1 = vtable.CArray_class_CVariantBoolPair__class_CVariantBoolPair_const____ptr64_.0;\n    if (arg1[1] != NULL) {\n        iVar1 = 0;\n        if (0 < arg1[2]) {\n            iVar2 = 0;\n            do {\n                if (*(arg1[1] + iVar2 + 0x10) != 0) {\n                    fcn.1400036d8(*(arg1[1] + iVar2));\n                }\n                iVar1 = iVar1 + 1;\n                iVar2 = iVar2 + 0x18;\n            } while (iVar1 < arg1[2]);\n        }\n        fcn.1400036d8(arg1[1]);\n    }\n    return;\n}\n",
        "token_count": 196
    },
    "140050db": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140050db4(int64_t arg1, int64_t arg2, ulong *arg3)\n\n{\n    ulong *puVar1;\n    ulong uVar2;\n    code *pcVar3;\n    \n    if (arg2 < 0) {\n        fcn.140020780();\n        pcVar3 = swi(3);\n        (*pcVar3)();\n        return;\n    }\n    if (*(arg1 + 0x10) <= arg2) {\n        fcn.140050434(arg1, arg2 + 1, 0xffffffffffffffff);\n    }\n    puVar1 = *(arg1 + 8) + arg2 * 0x18;\n    if (puVar1 != arg3) {\n        uVar2 = *arg3;\n        if (*(arg3 + 2) != 0) {\n            *arg3 = 0;\n        }\n        *puVar1 = uVar2;\n        puVar1[1] = arg3[1];\n        *(puVar1 + 2) = *(arg3 + 2);\n    }\n    return;\n}\n",
        "token_count": 237
    },
    "140050f0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nint64_t * fcn.140050f04(int64_t arg1, int64_t arg2, uint16_t *arg3, uint *arg4)\n\n{\n    int64_t **ppiVar1;\n    uint8_t uVar2;\n    uint16_t uVar3;\n    uint16_t uVar4;\n    uint32_t uVar5;\n    int64_t *piVar6;\n    code *pcVar7;\n    int64_t *piVar8;\n    \n    ppiVar1 = arg1 + *(arg2 + 0x30);\n    uVar3 = *(arg2 + 0x18);\n    piVar8 = uVar3;\n    if (uVar3 != 0xc) {\n        *arg3 = uVar3;\n    }\n    uVar4 = *(arg2 + 0x18);\n    if (uVar4 < 0xb) {\n        if (uVar4 != 10) {\n            if (uVar4 == 2) {\ncode_r0x000140050fe0:\n                uVar3 = *ppiVar1;\n                arg3[4] = uVar3;\n                return uVar3;\n            }\n            if ((uVar4 != 3) && (uVar4 != 4)) {\n                if ((uVar4 == 5) || ((uVar4 == 6 || (uVar4 == 7)))) {\ncode_r0x000140050fd0:\n                    piVar8 = *ppiVar1;\ncode_r0x000140050fd3:\n                    *(arg3 + 4) = piVar8;\n                    return piVar8;\n                }\n                if (uVar4 == 8) {\n                    piVar8 = fcn.14000d198(*ppiVar1, *(*ppiVar1 + -2));\n                    if (piVar8 == NULL) {\n                        fcn.1400035c0();\n                        pcVar7 = swi(3);\n                        piVar8 = (*pcVar7)();\n                        return piVar8;\n                    }\n                    goto code_r0x000140050fd3;\n                }\n                if (uVar4 == 9) goto code_r0x000140050f77;\n                goto code_r0x000140050ffd;\n            }\n        }\ncode_r0x000140050fd9:\n        piVar8 = *ppiVar1;\n        *(arg3 + 4) = *ppiVar1;\n    }\n    else {\n        if (uVar4 == 0xb) {\n            uVar5 = *ppiVar1;\n            arg3[4] = -(uVar5 != 0);\n            return -uVar5;\n        }\n        if (uVar4 == 0xc) {\n            piVar8 = (*_sym.imp.OLEAUT32.dll_VariantCopyInd)(arg3);\n            if (piVar8 == 0) {\n                return piVar8;\n            }\n        }\n        else {\n            if (uVar4 == 0xd) {\ncode_r0x000140050f77:\n                piVar6 = *ppiVar1;\n                *(arg3 + 4) = piVar6;\n                if (piVar6 == NULL) {\n                    return piVar8;\n                }\n                piVar8 = (**(*piVar6 + 8))();\n                return piVar8;\n            }\n            if (0xf < uVar4) {\n                if (uVar4 < 0x12) {\n                    uVar2 = *ppiVar1;\n                    *(arg3 + 4) = uVar2;\n                    return uVar3 & 0xff00 | uVar2;\n                }\n                if (uVar4 == 0x12) goto code_r0x000140050fe0;\n                if (uVar4 == 0x13) goto code_r0x000140050fd9;\n                piVar8 = uVar4 - 0x14;\n                if (uVar4 - 0x14 < 2) goto code_r0x000140050fd0;\n            }\n        }\ncode_r0x000140050ffd:\n        *arg4 = 0;\n    }\n    return piVar8;\n}\n",
        "token_count": 897
    },
    "1400510d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint64_t fcn.1400510d8(ulong arg1, ulong *arg2, uint8_t *arg3, uint32_t *arg4)\n\n{\n    uint8_t uVar1;\n    int16_t iVar2;\n    int64_t iVar3;\n    code *pcVar4;\n    int64_t *piVar5;\n    bool bVar6;\n    uint32_t uVar7;\n    ulong uVar8;\n    uint32_t *puVar9;\n    uint32_t *puVar10;\n    uint16_t uVar11;\n    uint32_t **ppuVar12;\n    uint16_t uVar13;\n    uint64_t uVar14;\n    int32_t iVar15;\n    int16_t in_stack_00000028;\n    int32_t in_stack_00000030;\n    uint in_stack_00000034;\n    int32_t *in_stack_00000038;\n    int64_t in_stack_00000040;\n    int64_t in_stack_00000048;\n    ulong uVar16;\n    uint32_t *puStack64;\n    int64_t iStack56;\n    int32_t iStack48;\n    \n    uVar16 = 0xfffffffffffffffe;\n    *arg2 = arg1;\n    ppuVar12 = arg2 + 1;\n    if ((in_stack_00000028 == 6) || (in_stack_00000028 == 0xc)) {\n        *ppuVar12 = arg4;\n        ppuVar12 = arg2 + 2;\n    }\n    piVar5 = CONCAT44(in_stack_00000034, in_stack_00000030);\n    iVar3 = *piVar5;\n    bVar6 = false;\n    iVar15 = *(piVar5 + 2);\n    in_stack_00000030 = *(piVar5 + 0x14);\n    uVar1 = *arg3;\n    do {\n        if (uVar1 == 0) {\ncode_r0x00014005150b:\n            if (iVar15 < 1) {\n                if (*arg3 == 0) {\n                    uVar14 = 0;\n                }\n                else {\n                    *in_stack_00000038 = *(piVar5 + 2);\n                    uVar14 = 0x8002000f;\n                }\n            }\n            else {\n                uVar14 = 0x8002000e;\ncode_r0x000140051516:\n                *in_stack_00000038 = iVar15;\n            }\n            return uVar14;\n        }\n        iVar15 = iVar15 + -1;\n        uVar1 = *arg3;\n        uVar11 = uVar1;\n        if ((uVar1 != 0xff) && ((uVar1 & 0x40) != 0)) {\n            uVar11 = uVar1 & 0xffbf | 0x4000;\n        }\n        if (iVar15 < in_stack_00000030) {\n            if (uVar11 != 0xff) {\n                if ((!bVar6) && (uVar11 == 0xc)) {\n                    *0x1400deb58 = 10;\n                    *0x1400deb60 = 0x80020004;\n                    puVar10 = 0x1400deb58;\n                    goto code_r0x0001400512b3;\n                }\n                goto code_r0x00014005150b;\n            }\n            iVar15 = *(piVar5 + 0x14);\n            in_stack_00000030 = 0;\n            bVar6 = true;\n        }\n        else {\n            if (uVar11 == 0xff) goto code_r0x00014005150b;\n            puVar9 = iVar3 + iVar15 * 0x18;\n            puVar10 = puVar9;\n            if ((uVar11 != 0xc) && (uVar11 != *puVar9)) {\n                puVar10 = in_stack_00000040 + iVar15 * 0x18;\n                uVar13 = uVar11;\n                if (uVar11 == 0xe) {\n                    uVar13 = 8;\n                }\n                if (*puVar9 != uVar13) {\n                    uVar7 = (*_sym.imp.OLEAUT32.dll_VariantTimeToDosDateTime)(puVar10, puVar9, 0, uVar13, uVar16);\n                    uVar14 = uVar7;\n                    if (uVar7 < 0) goto code_r0x000140051516;\n                }\n                if (uVar11 == 0xe) {\n                    if (*puVar9 == uVar13) {\n                        uVar8 = fcn.1400438cc(*(puVar9 + 2));\n                        *(puVar10 + 2) = uVar8;\n                        *puVar10 = 8;\n                    }\n                    else {\n                        uVar8 = fcn.1400438cc(*(puVar10 + 2));\n                        *(puVar10 + 2) = uVar8;\n                        (*_sym.imp.OLEAUT32.dll_SysStringLen)();\n                    }\n                    uVar11 = 8;\n                }\n            }\ncode_r0x0001400512b3:\n            if ((uVar11 & 0x4000) == 0) {\n                if (uVar11 < 0xc) {\n                    if (uVar11 == 0xb) {\n                        *ppuVar12 = *(puVar10 + 2) != 0;\n                        ppuVar12 = ppuVar12 + 1;\n                    }\n                    else if (uVar11 == 2) {\n                        *ppuVar12 = *(puVar10 + 2);\n                        ppuVar12 = ppuVar12 + 1;\n                    }\n                    else if (uVar11 == 3) {\n                        *ppuVar12 = puVar10[2];\n                        ppuVar12 = ppuVar12 + 1;\n                    }\n                    else if (uVar11 == 4) {\n                        *ppuVar12 = puVar10[2];\n                        ppuVar12 = ppuVar12 + 4;\n                    }\n                    else if (uVar11 == 5) {\n                        *ppuVar12 = *(puVar10 + 2);\n                        ppuVar12 = ppuVar12 + 1;\n                    }\n                    else if (uVar11 == 6) {\n                        *ppuVar12 = *(puVar10 + 2);\n                        ppuVar12 = ppuVar12 + 1;\n                    }\n                    else if (uVar11 == 7) {\n                        *ppuVar12 = *(puVar10 + 2);\n                        ppuVar12 = ppuVar12 + 1;\n                    }\n                    else if (uVar11 == 8) {\n                        *ppuVar12 = *(puVar10 + 2);\n                        ppuVar12 = ppuVar12 + 1;\n                    }\n                    else {\n                        if (uVar11 == 9) goto code_r0x0001400514bf;\n                        if (uVar11 == 10) {\n                            *ppuVar12 = puVar10[2];\n                            ppuVar12 = ppuVar12 + 1;\n                        }\n                    }\n                }\n                else if (uVar11 == 0xc) {\n                    *ppuVar12 = puVar10;\n                    ppuVar12 = ppuVar12 + 1;\n                }\n                else if (uVar11 == 0xd) {\ncode_r0x0001400514bf:\n                    *ppuVar12 = *(puVar10 + 2);\n                    ppuVar12 = ppuVar12 + 1;\n                }\n                else if (uVar11 == 0x10) {\n                    *ppuVar12 = *(puVar10 + 2);\n                    ppuVar12 = ppuVar12 + 1;\n                }\n                else if (uVar11 == 0x11) {\n                    *ppuVar12 = *(puVar10 + 2);\n                    ppuVar12 = ppuVar12 + 1;\n                }\n                else if (uVar11 == 0x12) {\n                    *ppuVar12 = *(puVar10 + 2);\n                    ppuVar12 = ppuVar12 + 1;\n                }\n                else if (uVar11 == 0x13) {\n                    *ppuVar12 = puVar10[2];\n                    ppuVar12 = ppuVar12 + 1;\n                }\n                else if (uVar11 == 0x14) {\n                    *ppuVar12 = *(puVar10 + 2);\n                    ppuVar12 = ppuVar12 + 1;\n                }\n                else if (uVar11 == 0x15) {\n                    *ppuVar12 = *(puVar10 + 2);\n                    ppuVar12 = ppuVar12 + 1;\n                }\n            }\n            else {\n                if ((uVar11 == 0x400b) && (in_stack_00000048 != 0)) {\n                    iVar2 = **(puVar10 + 2);\n                    puVar9 = fcn.140003694(4);\n                    if (puVar9 == NULL) {\n                        puVar9 = NULL;\n                    }\n                    else {\n                        *puVar9 = iVar2 != 0;\n                    }\n                    iStack56 = *(puVar10 + 2);\n                    iStack48 = 1;\n                    puStack64 = puVar9;\n                    if ((puVar9 == NULL) || (iStack56 == 0)) {\n                        fcn.140020780();\n                        pcVar4 = swi(3);\n                        uVar14 = (*pcVar4)();\n                        return uVar14;\n                    }\n                    fcn.140050db4(in_stack_00000048, *(in_stack_00000048 + 0x10), &puStack64);\n                    if (iStack48 != 0) {\n                        fcn.1400036d8(puStack64);\n                    }\n                }\n                else {\n                    puVar9 = *(puVar10 + 2);\n                }\n                *ppuVar12 = puVar9;\n                ppuVar12 = ppuVar12 + 1;\n            }\n            ppuVar12 = ppuVar12 + 7U & 0xfffffffffffffff8;\n        }\n        arg3 = arg3 + 1;\n        uVar1 = *arg3;\n    } while( true );\n}\n",
        "token_count": 2264
    },
    "14005156": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_10h\n// WARNING: Variable defined which should be unmapped: var_18h\n// WARNING: Variable defined which should be unmapped: var_20h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.140051560(int64_t arg1, uint64_t arg2, ulong noname_2, ulong *arg4, int64_t noname_4, ulong noname_5, \n                  ulong noname_6, ulong noname_7, ulong noname_8, ulong noname_9, ulong noname_10, ulong noname_11, \n                  ulong noname_12, ulong noname_13, ulong noname_14, ulong noname_15, ulong noname_16, ulong noname_17, \n                  ulong noname_18, ulong noname_19, ulong noname_20, ulong noname_21, ulong noname_22, ulong noname_23, \n                  ulong noname_24, ulong noname_25, ulong arg_e0h, ulong arg_e8h)\n\n{\n    code *pcVar1;\n    int64_t arg1_00;\n    char cVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    int64_t iVar5;\n    int64_t *piVar6;\n    int16_t iVar7;\n    uint64_t uVar8;\n    uchar *puVar9;\n    int64_t *piVar10;\n    uchar *puVar11;\n    uchar *puVar12;\n    int64_t *piVar13;\n    int64_t iVar14;\n    uint16_t uVar15;\n    ulong arg1_01;\n    uint uVar16;\n    ulong var_8h;\n    ulong var_10h;\n    ulong var_18h;\n    ulong var_20h;\n    ulong pvargDest;\n    ulong var_40h;\n    ulong var_48h;\n    ulong var_bp_50h;\n    ulong var_58h;\n    ulong var_60h;\n    ulong var_68h;\n    ulong var_70h;\n    ulong var_78h;\n    ulong var_88h;\n    ulong var_90h;\n    ulong var_c0h;\n    ulong var_c8h;\n    ulong var_d0h;\n    ulong uStack272;\n    uchar auStack264 [80];\n    uchar auStack184 [4];\n    int32_t iStack180;\n    uchar *puStack176;\n    ulong uStack168;\n    int32_t iStack160;\n    uint64_t uStack152;\n    ulong uStack144;\n    ulong uStack136;\n    ulong uStack128;\n    int64_t iStack120;\n    ulong *puStack112;\n    code *pcStack104;\n    ulong uStack96;\n    ulong uStack88;\n    ulong uStack80;\n    ulong uStack72;\n    ulong uStack64;\n    uint64_t uStack48;\n    \n    puVar11 = &stack0xfffffffffffffef8;\n    uStack64 = 0xfffffffffffffffe;\n    uStack48 = *0x1400d96f0 ^ &stack0xffffffffffffff48;\n    uStack272 = 0x1400515c7;\n    uStack152 = arg2;\n    iStack120 = arg1;\n    puStack112 = arg4;\n    fcn.140017bd0(&stack0xffffffffffffff58, *(arg1 + 0x38));\n    piVar13 = NULL;\n    auStack184[0] = 0;\n    puStack176 = &stack0xffffffffffffff48;\n    if (*(arg2 + 0x10) != 0) {\n        puStack176 = *(arg2 + 0x10);\n    }\n    uStack272 = 0x1400515e8;\n    uVar3 = (*_sym.imp.KERNEL32.dll_lstrlenA)();\n    arg1_01 = *(arg2 + 0x20);\n    uVar15 = *(arg2 + 0x18);\n    puVar9 = puStack176;\n    if ((noname_2 & 0xc) != 0) {\n        uStack272 = 0x140051609;\n        cVar2 = fcn.14001ebe0(uVar3 + 3);\n        if (cVar2 == '\\0') {\n            puVar12 = &stack0xfffffffffffffef8;\n            if (iStack160 != 0) {\n                uStack272 = 0x14005161e;\n                fcn.14001663c(0, uStack168);\n                puVar12 = &stack0xfffffffffffffef8;\n            }\n            goto code_r0x000140051a8f;\n        }\n        uStack272 = 0x140051653;\n        iVar5 = fcn.140097600();\n        puVar12 = puStack176;\n        iVar5 = -iVar5;\n        puVar11 = &stack0xfffffffffffffef8 + iVar5;\n        puVar9 = &stack0xffffffffffffff48 + iVar5;\n        *(&stack0xfffffffffffffef0 + iVar5) = 0x14005166d;\n        iVar4 = fcn.140069a48(puVar9, uVar3 + 3, puVar12, uVar3);\n        uVar8 = uStack152;\n        if (iVar4 != 0) {\n            if (iVar4 == 0xc) {\n                *(&stack0xfffffffffffffef0 + iVar5) = 0x140051696;\n                fcn.140020738();\n                pcVar1 = swi(3);\n                (*pcVar1)();\n                return;\n            }\n            if ((iVar4 == 0x16) || (iVar4 == 0x22)) {\n                *(&stack0xfffffffffffffef0 + iVar5) = 0x140051690;\n                fcn.140020780();\n                pcVar1 = swi(3);\n                (*pcVar1)();\n                return;\n            }\n            if (iVar4 != 0x50) {\n                *(&stack0xfffffffffffffef0 + iVar5) = 0x14005168a;\n                fcn.140020780();\n                pcVar1 = swi(3);\n                (*pcVar1)();\n                return;\n            }\n        }\n        iVar7 = *(uStack152 + 0x18);\n        if (iVar7 == 8) {\n            iVar7 = 0xe;\n        }\n        puVar9[uVar3] = 0xff;\n        puVar9[uVar3 + 1] = iVar7;\n        puVar9[uVar3 + 2] = 0;\n        arg1_01 = *(uVar8 + 0x28);\n        uVar15 = 0;\n    }\n    uVar3 = *(noname_4 + 0x10);\n    *(puVar11 + -8) = 0x1400516f3;\n    cVar2 = fcn.14001ebe0(uVar3 * 0x18);\n    puVar12 = puVar11;\n    if (cVar2 == '\\0') {\n        if (iStack160 != 0) {\n            *(puVar11 + -8) = 0x140051708;\n            fcn.14001663c(0, uStack168);\n        }\n        goto code_r0x000140051a8f;\n    }\n    if (0x5555555 < *(noname_4 + 0x10)) {\n        if (iStack160 != 0) {\n            *(puVar11 + -8) = 0x14005172d;\n            fcn.14001663c(0, uStack168);\n        }\n        goto code_r0x000140051a8f;\n    }\n    iVar14 = *(noname_4 + 0x10) * 0x18;\n    *(puVar11 + -8) = 0x140051759;\n    iVar5 = fcn.140097600();\n    iVar5 = -iVar5;\n    puStack176 = puVar11 + iVar5 + 0x50;\n    *(puVar11 + iVar5 + -8) = 0x14005176f;\n    fcn.1400698a0(puVar11 + iVar5 + 0x50, 0, iVar14);\n    *(puVar11 + iVar5 + -8) = 0x14005177b;\n    iVar4 = fcn.140050260(puVar9);\n    iStack180 = iVar4;\n    *(puVar11 + iVar5 + -8) = 0x140051789;\n    cVar2 = fcn.14001ebe0(iVar4 + 0x20);\n    if (cVar2 == '\\0') {\n        puVar12 = puVar11 + iVar5;\n        if (iStack160 != 0) {\n            *(puVar11 + iVar5 + -8) = 0x14005179e;\n            fcn.14001663c(0, uStack168);\n            puVar12 = puVar11 + iVar5;\n        }\n        goto code_r0x000140051a8f;\n    }\n    *(puVar11 + iVar5 + -8) = 0x1400517be;\n    iVar14 = fcn.140097600();\n    iVar14 = -iVar14;\n    puVar12 = puVar11 + iVar14 + iVar5 + 0x50;\n    pcStack104 = vtable.CArray_class_CVariantBoolPair__class_CVariantBoolPair_const____ptr64_.0;\n    uStack96 = 0;\n    uStack72 = 0;\n    uStack80 = 0;\n    uStack88 = 0;\n    *(puVar11 + iVar14 + iVar5 + 0x40) = &stack0xffffffffffffff98;\n    *(puVar11 + iVar14 + iVar5 + 0x38) = puStack176;\n    *(puVar11 + iVar14 + iVar5 + 0x30) = noname_5;\n    *(puVar11 + iVar14 + iVar5 + 0x28) = noname_4;\n    *(puVar11 + iVar14 + iVar5 + 0x20) = uVar15;\n    arg1_00 = iStack120;\n    *(puVar11 + iVar14 + iVar5 + -8) = 0x140051824;\n    uVar3 = fcn.1400510d8(arg1_00, puVar12, puVar9, &stack0xffffffffffffff70);\n    uStack152 = uStack152 & 0xffffffff00000000 | uVar3;\n    piVar10 = NULL;\n    piVar6 = piVar13;\n    if (uVar3 == 0) {\n        piVar6 = piVar10;\n        if (uVar15 == 4) {\n            *(puVar11 + iVar14 + iVar5 + -8) = 0x1400518b1;\n            uVar16 = fcn.140060630(arg1_01, puVar12);\n            uStack144 = CONCAT44(uStack144._4_4_, uVar16);\n        }\n        else if (uVar15 == 5) {\n            *(puVar11 + iVar14 + iVar5 + -8) = 0x14005189b;\n            uStack144 = fcn.140060630(arg1_01, puVar12);\n        }\n        else if (uVar15 == 7) {\n            *(puVar11 + iVar14 + iVar5 + -8) = 0x140051885;\n            uStack144 = fcn.140060630(arg1_01, puVar12);\n        }\n        else if (uVar15 - 0x14 < 2) {\n            *(puVar11 + iVar14 + iVar5 + -8) = 0x14005185c;\n            uStack144 = fcn.140060630(arg1_01, puVar12);\n            piVar6 = piVar13;\n        }\n        else {\n            *(puVar11 + iVar14 + iVar5 + -8) = 0x140051871;\n            piVar6 = fcn.140060630(arg1_01, puVar12);\n        }\n    }\n    puVar9 = puStack176;\n    if (*(noname_4 + 0x10) != 0) {\n        do {\n            *(puVar11 + iVar14 + iVar5 + -8) = 0x1400518d4;\n            (*_sym.imp.OLEAUT32.dll_VariantCopy)(puVar9 + piVar13 * 0x18);\n            uVar3 = piVar13 + 1;\n            piVar13 = uVar3;\n            arg4 = puStack112;\n        } while (uVar3 < *(noname_4 + 0x10));\n    }\n    if (uStack152 != 0) {\n        *(puVar11 + iVar14 + iVar5 + -8) = 0x1400518f3;\n        fcn.140050cc0(&stack0xffffffffffffff98);\n        puVar12 = puVar11 + iVar14 + iVar5;\n        if (iStack160 != 0) {\n            *(puVar11 + iVar14 + iVar5 + -8) = 0x140051904;\n            fcn.14001663c(0, uStack168);\n            puVar12 = puVar11 + iVar14 + iVar5;\n        }\n        goto code_r0x000140051a8f;\n    }\n    *(puVar11 + iVar14 + iVar5 + -8) = 0x140051915;\n    fcn.140050e78(&stack0xffffffffffffff98);\n    if (arg4 == NULL) {\n        if (uVar15 == 8) {\n            *(puVar11 + iVar14 + iVar5 + -8) = 0x140051a72;\n            (*_sym.imp.OLEAUT32.dll_SysStringLen)(piVar6);\n        }\n        else if (uVar15 == 9) {\ncode_r0x000140051a59:\n            if (piVar6 != NULL) {\n                pcVar1 = *(*piVar6 + 0x10);\n                *(puVar11 + iVar14 + iVar5 + -8) = 0x140051a67;\n                (*pcVar1)(piVar6);\n            }\n        }\n        else if (uVar15 == 0xc) {\n            *(puVar11 + iVar14 + iVar5 + -8) = 0x140051a57;\n            (*_sym.imp.OLEAUT32.dll_VariantCopy)(&stack0xffffffffffffff70);\n        }\n        else if (uVar15 == 0xd) goto code_r0x000140051a59;\n    }\n    else {\n        *arg4 = uVar15;\n        if (uVar15 < 0xb) {\n            if (uVar15 == 10) {\n                *(arg4 + 1) = piVar6;\n            }\n            else if (uVar15 == 2) {\ncode_r0x0001400519fa:\n                *(arg4 + 1) = piVar6;\n            }\n            else if (uVar15 == 3) {\ncode_r0x0001400519f5:\n                *(arg4 + 1) = piVar6;\n            }\n            else if (uVar15 == 4) {\n                *(arg4 + 1) = uStack144;\n            }\n            else if (uVar15 == 5) {\n                arg4[1] = uStack144;\n            }\n            else if (uVar15 == 6) {\n                arg4[1] = uStack144;\n            }\n            else if (uVar15 == 7) {\n                arg4[1] = uStack144;\n            }\n            else if (uVar15 == 8) {\n                arg4[1] = piVar6;\n            }\n            else if (uVar15 == 9) goto code_r0x000140051a05;\n        }\n        else if (uVar15 == 0xb) {\n            *(arg4 + 1) = -(piVar6 != 0);\n        }\n        else if (uVar15 == 0xc) {\n            *arg4 = uStack144;\n            arg4[1] = uStack136;\n            arg4[2] = uStack128;\n        }\n        else if (uVar15 == 0xd) {\ncode_r0x000140051a05:\n            arg4[1] = piVar6;\n        }\n        else if (0xf < uVar15) {\n            if (uVar15 < 0x12) {\n                *(arg4 + 1) = piVar6;\n            }\n            else {\n                if (uVar15 == 0x12) goto code_r0x0001400519fa;\n                if (uVar15 == 0x13) goto code_r0x0001400519f5;\n                if (uVar15 - 0x14 < 2) {\n                    arg4[1] = uStack144;\n                }\n            }\n        }\n    }\n    *(puVar11 + iVar14 + iVar5 + -8) = 0x140051a7c;\n    fcn.140050cc0(&stack0xffffffffffffff98);\n    puVar12 = puVar11 + iVar14 + iVar5;\n    if (iStack160 != 0) {\n        *(puVar11 + iVar14 + iVar5 + -8) = 0x140051a8d;\n        fcn.14001663c(0, uStack168);\n        puVar12 = puVar11 + iVar14 + iVar5;\n    }\ncode_r0x000140051a8f:\n    uVar8 = uStack48 ^ &stack0xffffffffffffff48;\n    *(puVar12 + -8) = 0x140051a9e;\n    fcn.140069870(uVar8);\n    return;\n}\n",
        "token_count": 3916
    },
    "140051e2": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140051e24(ushort *arg1, int64_t arg2)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    ulong *puVar3;\n    ulong uVar4;\n    int64_t iVar5;\n    uchar *arg2_00;\n    uchar auStack376 [32];\n    int64_t iStack344;\n    int64_t iStack336;\n    int64_t iStack328;\n    int64_t iStack320;\n    int64_t aiStack312 [2];\n    uchar auStack296 [256];\n    uint64_t uStack40;\n    \n    uStack40 = *0x1400d96f0 ^ auStack376;\n    fcn.1400698a0(arg1, 0, 0x40);\n    arg2_00 = auStack296;\n    iVar2 = fcn.140020b84(arg2, 0x1400a9a28);\n    if (iVar2 == 0) {\n        iVar2 = fcn.140020b84(arg2, \"`K\\n@\\x01\");\n        uVar4 = 0xf10a;\n        if (iVar2 == 0) {\n            uVar4 = 0xf108;\n        }\n        fcn.140017c2c(uVar4, auStack296, 0x100);\n        *arg1 = uVar4;\n    }\n    else {\n        arg2_00 = *(arg2 + 0x18);\n        *arg1 = *(arg2 + 0x10);\n        *(arg1 + 0x10) = *(arg2 + 0x20);\n        *(arg1 + 0x1c) = *(arg2 + 0x38);\n        if (*(*(arg2 + 0x28) + -0x10) != 0) {\n            puVar3 = fcn.14002010c(aiStack312, *(arg2 + 0x28));\n            uVar4 = (*_sym.imp.OLEAUT32.dll_SysReAllocString)(*puVar3);\n            *(arg1 + 0xc) = uVar4;\n            LOCK();\n            piVar1 = aiStack312[0] + -8;\n            iVar2 = *piVar1;\n            *piVar1 = *piVar1 + -1;\n            if (iVar2 + -1 < 1) {\n                (**(**(aiStack312[0] + -0x18) + 8))();\n            }\n        }\n        if (*(*(arg2 + 0x30) + -0x10) != 0) {\n            puVar3 = fcn.14002010c(&iStack328, *(arg2 + 0x30));\n            uVar4 = (*_sym.imp.OLEAUT32.dll_SysReAllocString)(*puVar3);\n            *(arg1 + 4) = uVar4;\n            LOCK();\n            piVar1 = iStack328 + -8;\n            iVar2 = *piVar1;\n            *piVar1 = *piVar1 + -1;\n            if (iVar2 + -1 < 1) {\n                (**(**(iStack328 + -0x18) + 8))();\n            }\n        }\n    }\n    puVar3 = fcn.14002010c(&iStack344, arg2_00);\n    uVar4 = (*_sym.imp.OLEAUT32.dll_SysReAllocString)(*puVar3);\n    *(arg1 + 8) = uVar4;\n    LOCK();\n    piVar1 = iStack344 + -8;\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 + -1 < 1) {\n        (**(**(iStack344 + -0x18) + 8))();\n    }\n    if (*(arg1 + 4) == 0) {\n        iVar5 = fcn.140017ad4();\n        puVar3 = fcn.14002010c(&iStack336, *(iVar5 + 0x20));\n        uVar4 = (*_sym.imp.OLEAUT32.dll_SysReAllocString)(*puVar3);\n        *(arg1 + 4) = uVar4;\n        LOCK();\n        piVar1 = iStack336 + -8;\n        iVar2 = *piVar1;\n        *piVar1 = *piVar1 + -1;\n        if (iVar2 + -1 < 1) {\n            (**(**(iStack336 + -0x18) + 8))();\n        }\n    }\n    if ((*(arg1 + 0xc) == 0) && (*(arg1 + 0x10) != 0)) {\n        iVar5 = fcn.140017ad4();\n        puVar3 = fcn.14002010c(&iStack320, *(*(iVar5 + 8) + 200));\n        uVar4 = (*_sym.imp.OLEAUT32.dll_SysReAllocString)(*puVar3);\n        *(arg1 + 0xc) = uVar4;\n        LOCK();\n        piVar1 = iStack320 + -8;\n        iVar2 = *piVar1;\n        *piVar1 = *piVar1 + -1;\n        if (iVar2 + -1 < 1) {\n            (**(**(iStack320 + -0x18) + 8))();\n        }\n    }\n    fcn.140069870(uStack40 ^ auStack376);\n    return;\n}\n",
        "token_count": 1195
    },
    "1400527f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.1400527fc(code **arg1)\n\n{\n    *arg1 = vtable.CEnumArray.0;\n    if (arg1[9] != NULL) {\n        fcn.14003aa30(arg1[9]);\n    }\n    if (*(arg1 + 0xc) != 0) {\n        fcn.1400036d8(arg1[10]);\n    }\n    if (arg1[4] != NULL) {\n        (**(arg1[4] + 0x38))();\n    }\n    arg1[7] = NULL;\n    return;\n}\n",
        "token_count": 128
    },
    "140052f5": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140052f50(int64_t **arg1, ulong arg2)\n\n{\n    int32_t *piVar1;\n    uint8_t uVar2;\n    uint16_t uVar3;\n    uint32_t *puVar4;\n    ulong *puVar5;\n    code *pcVar6;\n    uint32_t uVar7;\n    int32_t iVar8;\n    int64_t iVar9;\n    ulong *puVar10;\n    uint32_t **ppuVar11;\n    int64_t iVar12;\n    uint16_t in_R8W;\n    ulong uVar13;\n    uint16_t in_R9W;\n    uint64_t arg4;\n    uint8_t *puVar14;\n    uint auStackX8 [2];\n    uint uStackX16;\n    ulong *in_stack_00000028;\n    uint8_t *in_stack_00000030;\n    int64_t in_stack_00000038;\n    ulong uStack264;\n    uchar uStack256;\n    uchar uStack255;\n    ushort uStack254;\n    uint uStack252;\n    ulong uStack248;\n    int64_t iStack240;\n    uint *puStack232;\n    uint32_t uStack224;\n    uint uStack220;\n    uint uStack216;\n    int64_t iStack208;\n    int64_t iStack200;\n    uint32_t *puStack192;\n    uint32_t *puStack184;\n    int32_t iStack176;\n    uint16_t auStack168 [4];\n    ulong uStack160;\n    ulong uStack152;\n    ulong uStack144;\n    uint uStack136;\n    code *pcStack120;\n    uint uStack112;\n    code *pcStack104;\n    ulong uStack96;\n    ulong uStack88;\n    ulong uStack80;\n    ulong uStack72;\n    ulong uStack64;\n    \n    uStack64 = 0xfffffffffffffffe;\n    if (*arg1 != NULL) {\n        iStack240 = 0;\n        puStack232 = NULL;\n        uStack224 = 0;\n        uStack220 = 0;\n        uStackX16 = arg2;\n        fcn.1400698a0(&iStack240, 0, 0x18);\n        if (in_stack_00000030 != NULL) {\n            uStack224 = (*_sym.imp.KERNEL32.dll_lstrlenA)(in_stack_00000030);\n        }\n        auStackX8[0] = 0xfffffffd;\n        if ((in_R8W & 0xc) != 0) {\n            uStack220 = 1;\n            puStack232 = auStackX8;\n        }\n        pcStack104 = vtable.CArray_class_CVariantBoolPair__class_CVariantBoolPair_const____ptr64_.0;\n        uStack96 = 0;\n        uStack72 = 0;\n        uStack80 = 0;\n        uStack88 = 0;\n        if (uStack224 != 0) {\n            uVar13 = SUB168(ZEXT816(0x18) * ZEXT416(uStack224), 0);\n            if (SUB168(ZEXT816(0x18) * ZEXT416(uStack224) >> 0x40, 0) != 0) {\n                uVar13 = 0xffffffffffffffff;\n            }\n            iVar9 = fcn.140003694(uVar13);\n            iStack240 = iVar9;\n            fcn.1400698a0(iVar9, 0, uStack224 * 0x18);\n            puVar10 = iVar9 + (uStack224 - 1) * 0x18;\n            if (*in_stack_00000030 != 0) {\n                ppuVar11 = in_stack_00000038 + -8;\n                puVar14 = in_stack_00000030;\n                do {\n                    uVar2 = *puVar14;\n                    *puVar10 = uVar2;\n                    if ((uVar2 & 0x40) != 0) {\n                        *puVar10 = uVar2 & 0xffbf | 0x4000;\n                    }\n                    uVar3 = *puVar10;\n                    if (uVar3 < 0x4003) {\n                        if (uVar3 == 0x4002) {\n                            puVar10[1] = ppuVar11[1];\n                            ppuVar11 = ppuVar11 + 1;\n                        }\n                        else if (uVar3 < 0xc) {\n                            if (uVar3 == 0xb) {\n                                *(puVar10 + 1) = -(*(ppuVar11 + 1) != 0);\n                                ppuVar11 = ppuVar11 + 1;\n                            }\n                            else if (uVar3 == 2) {\n                                *(puVar10 + 1) = *(ppuVar11 + 1);\n                                ppuVar11 = ppuVar11 + 1;\n                            }\n                            else if (uVar3 == 3) {\n                                *(puVar10 + 1) = *(ppuVar11 + 1);\n                                ppuVar11 = ppuVar11 + 1;\n                            }\n                            else if (uVar3 == 4) {\n                                *(puVar10 + 1) = ppuVar11[1];\n                                ppuVar11 = ppuVar11 + 1;\n                            }\n                            else if (uVar3 == 5) {\n                                puVar10[1] = ppuVar11[1];\n                                ppuVar11 = ppuVar11 + 1;\n                            }\n                            else if (uVar3 == 6) {\n                                puVar10[1] = *ppuVar11[1];\n                                ppuVar11 = ppuVar11 + 1;\n                            }\n                            else if (uVar3 == 7) {\n                                puVar10[1] = ppuVar11[1];\n                                ppuVar11 = ppuVar11 + 1;\n                            }\n                            else if (uVar3 == 8) {\n                                ppuVar11 = ppuVar11 + 1;\n                                puVar4 = *ppuVar11;\n                                iVar9 = (*_sym.imp.OLEAUT32.dll_SysReAllocString)();\n                                puVar10[1] = iVar9;\n                                if ((puVar4 != NULL) && (iVar9 == 0)) {\n                                    fcn.140020738();\n                                    goto code_r0x0001400535dd;\n                                }\n                            }\n                            else if (uVar3 == 9) {\n                                puVar10[1] = ppuVar11[1];\n                                ppuVar11 = ppuVar11 + 1;\n                            }\n                            else if (uVar3 == 10) {\n                                *(puVar10 + 1) = *(ppuVar11 + 1);\n                                ppuVar11 = ppuVar11 + 1;\n                            }\n                        }\n                        else if (uVar3 == 0xc) {\n                            puVar5 = ppuVar11[1];\n                            *puVar10 = *puVar5;\n                            puVar10[1] = puVar5[1];\n                            puVar10[2] = puVar5[2];\n                            ppuVar11 = ppuVar11 + 1;\n                        }\n                        else if (uVar3 == 0xd) {\n                            puVar10[1] = ppuVar11[1];\n                            ppuVar11 = ppuVar11 + 1;\n                        }\n                        else if (uVar3 == 0xe) {\n                            puVar4 = ppuVar11[1];\n                            fcn.14002010c(&iStack200, puVar4);\n                            iVar9 = (*_sym.imp.OLEAUT32.dll_SysReAllocString)();\n                            puVar10[1] = iVar9;\n                            if ((puVar4 != NULL) && (iVar9 == 0)) {\ncode_r0x0001400535dd:\n                                fcn.140020738();\n                                break;\n                            }\n                            *puVar10 = 8;\n                            LOCK();\n                            piVar1 = iStack200 + -8;\n                            iVar8 = *piVar1;\n                            *piVar1 = *piVar1 + -1;\n                            if (0 < iVar8 + -1) goto code_r0x0001400534ed;\n                            (**(**(iStack200 + -0x18) + 8))();\n                            ppuVar11 = ppuVar11 + 1;\n                        }\n                        else if (uVar3 == 0x10) {\n                            *(puVar10 + 1) = *(ppuVar11 + 1);\n                            ppuVar11 = ppuVar11 + 1;\n                        }\n                        else if (uVar3 == 0x11) {\n                            *(puVar10 + 1) = *(ppuVar11 + 1);\n                            ppuVar11 = ppuVar11 + 1;\n                        }\n                        else if (uVar3 == 0x12) {\n                            *(puVar10 + 1) = *(ppuVar11 + 1);\n                            ppuVar11 = ppuVar11 + 1;\n                        }\n                        else if (uVar3 == 0x13) {\n                            *(puVar10 + 1) = *(ppuVar11 + 1);\n                            ppuVar11 = ppuVar11 + 1;\n                        }\n                        else if (uVar3 == 0x14) {\n                            puVar10[1] = ppuVar11[1];\n                            ppuVar11 = ppuVar11 + 1;\n                        }\n                        else if (uVar3 == 0x15) {\n                            puVar10[1] = ppuVar11[1];\n                            ppuVar11 = ppuVar11 + 1;\n                        }\n                    }\n                    else if (uVar3 < 0x400c) {\n                        if (uVar3 == 0x400b) {\n                            puStack192 = ppuVar11[1];\n                            *puStack192 = -(*puStack192 != 0) & 0xffff;\n                            puVar10[1] = puStack192;\n                            iStack176 = 0;\n                            puStack184 = puStack192;\n                            fcn.140050db4(&pcStack104, uStack88, &puStack192);\n                            if (iStack176 == 0) {\ncode_r0x0001400534ed:\n                                ppuVar11 = ppuVar11 + 1;\n                            }\n                            else {\n                                fcn.1400036d8(puStack192);\n                                ppuVar11 = ppuVar11 + 1;\n                            }\n                        }\n                        else if (uVar3 == 0x4003) {\n                            puVar10[1] = ppuVar11[1];\n                            ppuVar11 = ppuVar11 + 1;\n                        }\n                        else if (uVar3 == 0x4004) {\n                            puVar10[1] = ppuVar11[1];\n                            ppuVar11 = ppuVar11 + 1;\n                        }\n                        else if (uVar3 == 0x4005) {\n                            puVar10[1] = ppuVar11[1];\n                            ppuVar11 = ppuVar11 + 1;\n                        }\n                        else if (uVar3 == 0x4006) {\n                            puVar10[1] = ppuVar11[1];\n                            ppuVar11 = ppuVar11 + 1;\n                        }\n                        else if (uVar3 == 0x4007) {\n                            puVar10[1] = ppuVar11[1];\n                            ppuVar11 = ppuVar11 + 1;\n                        }\n                        else if (uVar3 == 0x4008) {\n                            puVar10[1] = ppuVar11[1];\n                            ppuVar11 = ppuVar11 + 1;\n                        }\n                        else if (uVar3 == 0x4009) {\n                            puVar10[1] = ppuVar11[1];\n                            ppuVar11 = ppuVar11 + 1;\n                        }\n                        else if (uVar3 == 0x400a) {\n                            puVar10[1] = ppuVar11[1];\n                            ppuVar11 = ppuVar11 + 1;\n                        }\n                    }\n                    else if (uVar3 == 0x400c) {\n                        ppuVar11 = ppuVar11 + 1;\n                        puVar10[1] = *ppuVar11;\n                    }\n                    else if (uVar3 == 0x400d) {\n                        ppuVar11 = ppuVar11 + 1;\n                        puVar10[1] = *ppuVar11;\n                    }\n                    else if (uVar3 == 0x4010) {\n                        ppuVar11 = ppuVar11 + 1;\n                        puVar10[1] = *ppuVar11;\n                    }\n                    else if (uVar3 == 0x4011) {\n                        ppuVar11 = ppuVar11 + 1;\n                        puVar10[1] = *ppuVar11;\n                    }\n                    else if (uVar3 == 0x4012) {\n                        ppuVar11 = ppuVar11 + 1;\n                        puVar10[1] = *ppuVar11;\n                    }\n                    else if (uVar3 == 0x4013) {\n                        ppuVar11 = ppuVar11 + 1;\n                        puVar10[1] = *ppuVar11;\n                    }\n                    else if (uVar3 == 0x4014) {\n                        ppuVar11 = ppuVar11 + 1;\n                        puVar10[1] = *ppuVar11;\n                    }\n                    else if (uVar3 == 0x4015) {\n                        ppuVar11 = ppuVar11 + 1;\n                        puVar10[1] = *ppuVar11;\n                    }\n                    puVar10 = puVar10 + -3;\n                    puVar14 = puVar14 + 1;\n                } while (*puVar14 != 0);\n            }\n        }\n        iVar9 = 0;\n        fcn.14003ba3c(&uStack264);\n        fcn.1400698a0(auStack168, 0, 0x40);\n        uStack216 = 0xffffffff;\n        arg4 = 0;\n        uVar13 = 0x1400b54b8;\n        uVar7 = (**(**arg1 + 0x30))();\n        fcn.140052e10(&pcStack104);\n        if (uStack224 != 0) {\n            iVar12 = iStack240 + -0x18 + uStack224 * 0x18;\n            uVar2 = *in_stack_00000030;\n            while (uVar2 != 0) {\n                if ((*in_stack_00000030 == 8) || (*in_stack_00000030 == 0xe)) {\n                    (*_sym.imp.OLEAUT32.dll_VariantCopy)(iVar12);\n                }\n                iVar12 = iVar12 + -0x18;\n                in_stack_00000030 = in_stack_00000030 + 1;\n                uVar2 = *in_stack_00000030;\n            }\n        }\n        fcn.1400036d8(iStack240);\n        iStack240 = 0;\n        if (uVar7 < 0) {\n            (*_sym.imp.OLEAUT32.dll_VariantCopy)();\n            if (uVar7 == 0x80020009) {\n                if (pcStack120 != NULL) {\n                    (*pcStack120)(auStack168);\n                }\n                iStack208 = fcn.140003694(0x40);\n                if (iStack208 != 0) {\n                    arg4 = auStack168[0];\n                    uVar13 = 0;\n                    iVar9 = fcn.140051be8(iStack208, 0, 0);\n                }\n                iVar8 = (*_sym.imp.OLEAUT32.dll_VariantInit)(uStack160);\n                if (iVar8 != 0) {\n                    fcn.14001f070(iVar9 + 0x30, uStack160, uVar13, arg4);\n                }\n                (*_sym.imp.OLEAUT32.dll_SysStringLen)(uStack160);\n                iVar8 = (*_sym.imp.OLEAUT32.dll_VariantInit)(uStack152);\n                if (iVar8 != 0) {\n                    fcn.14001f070(iVar9 + 0x18, uStack152, uVar13, arg4);\n                }\n                (*_sym.imp.OLEAUT32.dll_SysStringLen)(uStack152);\n                iVar8 = (*_sym.imp.OLEAUT32.dll_VariantInit)(uStack144);\n                if (iVar8 != 0) {\n                    fcn.14001f070(iVar9 + 0x28, uStack144, uVar13, arg4);\n                }\n                (*_sym.imp.OLEAUT32.dll_SysStringLen)(uStack144);\n                *(iVar9 + 0x20) = uStack136;\n                *(iVar9 + 0x38) = uStack112;\n                iStack208 = iVar9;\n                fcn.14006ba84(&iStack208, 0x1400d31a8);\n                pcVar6 = swi(3);\n                (*pcVar6)();\n                return;\n            }\n            fcn.14001e6c4(uVar7);\n            pcVar6 = swi(3);\n            (*pcVar6)();\n            return;\n        }\n        if (in_R9W != 0) {\n            if (in_R9W != 0xc) {\n                uVar7 = (*_sym.imp.OLEAUT32.dll_VariantTimeToDosDateTime)(&uStack264, &uStack264, 0, in_R9W);\n                if (uVar7 < 0) {\n                    (*_sym.imp.OLEAUT32.dll_VariantCopy)();\n                    fcn.14001e6c4(uVar7);\n                    pcVar6 = swi(3);\n                    (*pcVar6)();\n                    return;\n                }\n            }\n            if (in_R9W < 0xc) {\n                if (in_R9W == 0xb) {\n                    *in_stack_00000028 = CONCAT11(uStack255, uStack256) != 0;\n                }\n                else if (in_R9W == 2) {\n                    *in_stack_00000028 = CONCAT11(uStack255, uStack256);\n                }\n                else if (in_R9W == 3) {\n                    *in_stack_00000028 = CONCAT22(uStack254, CONCAT11(uStack255, uStack256));\n                }\n                else if (in_R9W == 4) {\n                    *in_stack_00000028 = CONCAT22(uStack254, CONCAT11(uStack255, uStack256));\n                }\n                else if (in_R9W == 5) {\n                    *in_stack_00000028 = CONCAT44(uStack252, CONCAT22(uStack254, CONCAT11(uStack255, uStack256)));\n                }\n                else if (in_R9W == 6) {\n                    *in_stack_00000028 = CONCAT44(uStack252, CONCAT22(uStack254, CONCAT11(uStack255, uStack256)));\n                }\n                else if (in_R9W == 7) {\n                    *in_stack_00000028 = CONCAT44(uStack252, CONCAT22(uStack254, CONCAT11(uStack255, uStack256)));\n                }\n                else if (in_R9W == 8) {\n                    fcn.140043fa0(in_stack_00000028, \n                                  CONCAT44(uStack252, CONCAT22(uStack254, CONCAT11(uStack255, uStack256))));\n                    (*_sym.imp.OLEAUT32.dll_SysStringLen)\n                              (CONCAT44(uStack252, CONCAT22(uStack254, CONCAT11(uStack255, uStack256))));\n                }\n                else if (in_R9W == 9) {\n                    *in_stack_00000028 = CONCAT44(uStack252, CONCAT22(uStack254, CONCAT11(uStack255, uStack256)));\n                }\n                else if (in_R9W == 10) {\n                    *in_stack_00000028 = CONCAT22(uStack254, CONCAT11(uStack255, uStack256));\n                }\n            }\n            else if (in_R9W == 0xc) {\n                *in_stack_00000028 = uStack264;\n                in_stack_00000028[1] = CONCAT44(uStack252, CONCAT22(uStack254, CONCAT11(uStack255, uStack256)));\n                in_stack_00000028[2] = uStack248;\n            }\n            else if (in_R9W == 0xd) {\n                *in_stack_00000028 = CONCAT44(uStack252, CONCAT22(uStack254, CONCAT11(uStack255, uStack256)));\n            }\n            else if (in_R9W == 0x10) {\n                *in_stack_00000028 = uStack256;\n            }\n            else if (in_R9W == 0x11) {\n                *in_stack_00000028 = uStack256;\n            }\n            else if (in_R9W == 0x12) {\n                *in_stack_00000028 = CONCAT11(uStack255, uStack256);\n            }\n            else if (in_R9W == 0x13) {\n                *in_stack_00000028 = CONCAT22(uStack254, CONCAT11(uStack255, uStack256));\n            }\n            else if (in_R9W == 0x14) {\n                *in_stack_00000028 = CONCAT44(uStack252, CONCAT22(uStack254, CONCAT11(uStack255, uStack256)));\n            }\n            else if (in_R9W == 0x15) {\n                *in_stack_00000028 = CONCAT44(uStack252, CONCAT22(uStack254, CONCAT11(uStack255, uStack256)));\n            }\n        }\n        fcn.140050cc0(&pcStack104);\n        if (iStack240 != 0) {\n            fcn.1400036d8(iStack240);\n        }\n    }\n    return;\n}\n",
        "token_count": 4853
    },
    "140053c4": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.140053c44(ulong arg1)\n\n{\n    int64_t *piVar1;\n    int64_t iVar2;\n    \n    fcn.140062344();\n    fcn.14006107c();\n    fcn.140060914();\n    if (arg1 == 0) {\n        iVar2 = fcn.1400063f8();\n        if (iVar2 != 0) {\n            piVar1 = *(iVar2 + 0x80);\n            if (piVar1 != NULL) {\n                (**(*piVar1 + 8))(piVar1, 1);\n            }\n            *(iVar2 + 0x80) = 0;\n        }\n        iVar2 = fcn.140016f48();\n        if (*(iVar2 + 0x17c) == 1) {\n            (*_sym.imp.ole32.dll_CoFreeUnusedLibraries)();\n            (*_sym.imp.ole32.dll_OleUninitialize)();\n            *(iVar2 + 0x17c) = 0;\n        }\n    }\n    return;\n}\n",
        "token_count": 231
    },
    "140054be": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140054bec(int32_t *arg1)\n\n{\n    code *pcVar1;\n    int64_t aiStackX8 [4];\n    \n    if ((*arg1 != 0) && (arg1[4] != 0)) {\n        fcn.1400150dc(*(arg1 + 2), arg1[4], aiStackX8);\n        if (aiStackX8[0] != 0) {\n            (*_sym.imp.USER32.dll_SetFocus)();\n            if (arg1[5] != 0) {\n                (*_sym.imp.USER32.dll_SendMessageA)(aiStackX8[0], 0xb1, 0, 0xffffffffffffffff);\n            }\n        }\n    }\n    aiStackX8[0] = 0x1400de630;\n    fcn.14006ba84(aiStackX8, 0x1400d2e78);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 218
    },
    "1400550e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.1400550e4(int32_t *arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    uint uVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    ulong arg1_00;\n    uint *puVar4;\n    int32_t *piVar5;\n    ulong in_stack_00000028;\n    uchar auStack168 [32];\n    ulong *puStack136;\n    uchar auStack120 [64];\n    uint64_t uStack56;\n    \n    uStack56 = *0x1400d96f0 ^ auStack168;\n    arg1_00 = fcn.140054b98(arg1, arg2);\n    arg1[5] = 1;\n    if (*arg1 == 0) {\n        puVar4 = fcn.14006abb0();\n        uVar1 = *puVar4;\n        puVar4 = fcn.14006abb0();\n        *puVar4 = 0;\n        puStack136 = &stack0x00000028;\n        fcn.14006a8b8(auStack120, 0x40, 0x3f, arg3);\n        piVar5 = fcn.14006abb0();\n        if (*piVar5 == 0) {\n            puVar4 = fcn.14006abb0();\n            *puVar4 = uVar1;\n        }\n        else {\n            piVar5 = fcn.14006abb0();\n            if (*piVar5 != 0) {\n                if (*piVar5 == 0xc) {\n                    fcn.1400031e0(0x8007000e);\n                    pcVar2 = swi(3);\n                    (*pcVar2)();\n                    return;\n                }\n                if ((*piVar5 == 0x16) || (*piVar5 == 0x22)) {\n                    fcn.1400031e0(0x80070057);\n                    pcVar2 = swi(3);\n                    (*pcVar2)();\n                    return;\n                }\n                if (*piVar5 != 0x50) {\n                    fcn.1400031e0(0x80004005);\n                    pcVar2 = swi(3);\n                    (*pcVar2)();\n                    return;\n                }\n            }\n        }\n        fcn.1400226d4(arg1_00, auStack120);\n    }\n    else {\n        (*_sym.imp.USER32.dll_GetWindowTextA)(arg1_00, auStack120, 0x40);\n        iVar3 = fcn.14006e33c(auStack120, 0x40, arg3, in_stack_00000028);\n        if (iVar3 != 1) {\n            fcn.140008aec(arg4, 0, 0xffffffff);\n            fcn.140054bec(arg1);\n        }\n    }\n    fcn.140069870(uStack56 ^ auStack168);\n    return;\n}\n",
        "token_count": 641
    },
    "14005545": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140055454(int32_t *arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    code *pcVar3;\n    uint *puVar4;\n    int32_t *piVar5;\n    int64_t *piVar6;\n    ulong noname_1;\n    uint64_t arg3_00;\n    uint32_t in_stack_00000028;\n    uchar auStack248 [32];\n    ulong uStack216;\n    int64_t iStack200;\n    ulong uStack192;\n    uchar auStack184 [64];\n    uchar auStack120 [64];\n    uint64_t uStack56;\n    \n    uStack192 = 0xfffffffffffffffe;\n    uStack56 = *0x1400d96f0 ^ auStack248;\n    if (*arg1 != 0) {\n        puVar4 = fcn.14006abb0();\n        uVar1 = *puVar4;\n        puVar4 = fcn.14006abb0();\n        *puVar4 = 0;\n        uStack216 = arg2;\n        fcn.14006aa44(auStack120, 0x40, 0x3f, arg4);\n        piVar5 = fcn.14006abb0();\n        if (*piVar5 == 0) {\n            puVar4 = fcn.14006abb0();\n            *puVar4 = uVar1;\n        }\n        else {\n            piVar5 = fcn.14006abb0();\n            if (*piVar5 != 0) {\n                if (*piVar5 == 0xc) {\n                    fcn.1400031e0(0x8007000e);\n                    pcVar3 = swi(3);\n                    (*pcVar3)();\n                    return;\n                }\n                if ((*piVar5 == 0x16) || (*piVar5 == 0x22)) {\n                    fcn.1400031e0(0x80070057);\n                    pcVar3 = swi(3);\n                    (*pcVar3)();\n                    return;\n                }\n                if (*piVar5 != 0x50) {\n                    fcn.1400031e0(0x80004005);\n                    pcVar3 = swi(3);\n                    (*pcVar3)();\n                    return;\n                }\n            }\n        }\n        puVar4 = fcn.14006abb0();\n        uVar1 = *puVar4;\n        puVar4 = fcn.14006abb0();\n        *puVar4 = 0;\n        uStack216 = arg3;\n        fcn.14006aa44(auStack184, 0x40, 0x3f, arg4);\n        piVar5 = fcn.14006abb0();\n        if (*piVar5 == 0) {\n            puVar4 = fcn.14006abb0();\n            *puVar4 = uVar1;\n        }\n        else {\n            piVar5 = fcn.14006abb0();\n            if (*piVar5 != 0) {\n                if (*piVar5 == 0xc) {\n                    fcn.1400031e0(0x8007000e);\n                    pcVar3 = swi(3);\n                    (*pcVar3)();\n                    return;\n                }\n                if ((*piVar5 == 0x16) || (*piVar5 == 0x22)) {\n                    fcn.1400031e0(0x80070057);\n                    pcVar3 = swi(3);\n                    (*pcVar3)();\n                    return;\n                }\n                if (*piVar5 != 0x50) {\n                    fcn.1400031e0(0x80004005);\n                    pcVar3 = swi(3);\n                    (*pcVar3)();\n                    return;\n                }\n            }\n        }\n        piVar6 = fcn.140017fc0();\n        if (piVar6 == NULL) {\n            fcn.1400031e0(0x80004005);\n            pcVar3 = swi(3);\n            (*pcVar3)();\n            return;\n        }\n        iStack200 = (**(*piVar6 + 0x18))(piVar6);\n        iStack200 = iStack200 + 0x18;\n        fcn.1400543dc(&iStack200, in_stack_00000028, auStack120, auStack184);\n        arg3_00 = in_stack_00000028;\n        noname_1 = 0x30;\n        fcn.140008a94(iStack200, 0x30, arg3_00);\n        fcn.140004828(&iStack200, noname_1, arg3_00);\n        fcn.140054bec(arg1);\n        LOCK();\n        piVar5 = iStack200 + -8;\n        iVar2 = *piVar5;\n        *piVar5 = *piVar5 + -1;\n        if (iVar2 + -1 < 1) {\n            (**(**(iStack200 + -0x18) + 8))();\n        }\n    }\n    fcn.140069870(uStack56 ^ auStack248);\n    return;\n}\n",
        "token_count": 1127
    },
    "140055b6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140055b64(int32_t *arg1, uint64_t arg2, int64_t *arg3)\n\n{\n    int64_t arg1_00;\n    code *pcVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    ulong noname_1;\n    ulong pv;\n    ulong uStackX8;\n    \n    fcn.140054b98(arg1, arg2);\n    fcn.1400150dc(*(arg1 + 2), arg2 & 0xffffffff, &uStackX8);\n    if (*arg1 == 0) {\n        (*_sym.imp.USER32.dll_SendMessageA)(uStackX8, 0x18c, 0xffffffffffffffff, *arg3);\n    }\n    else {\n        pv = 0;\n        noname_1 = 0x188;\n        iVar2 = (*_sym.imp.USER32.dll_SendMessageA)();\n        if (iVar2 == -1) {\n            fcn.140004828(arg3, noname_1, pv);\n        }\n        else {\n            uVar3 = (*_sym.imp.USER32.dll_SendMessageA)(uStackX8, 0x18a, iVar2, 0);\n            if ((1U - *(*arg3 + -8) | *(*arg3 + -0xc) - uVar3) < 0) {\n                fcn.1400033e0(arg3, uVar3);\n            }\n            if ((uVar3 < 0) || (*(*arg3 + -0xc) < uVar3)) {\n                fcn.1400031e0(0x80070057);\n                pcVar1 = swi(3);\n                (*pcVar1)();\n                return;\n            }\n            *(*arg3 + -0x10) = uVar3;\n            *(uVar3 + *arg3) = 0;\n            (*_sym.imp.USER32.dll_SendMessageA)(uStackX8, 0x189, iVar2);\n        }\n        arg1_00 = *arg3;\n        if (arg1_00 == 0) {\n            iVar2 = 0;\n        }\n        else {\n            iVar2 = fcn.14006b544(arg1_00, *(arg1_00 + -0xc));\n            if (iVar2 < 0) goto code_r0x000140055c61;\n        }\n        if (*(*arg3 + -0xc) < iVar2) {\ncode_r0x000140055c61:\n            fcn.1400031e0(0x80070057);\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        *(*arg3 + -0x10) = iVar2;\n        *(iVar2 + *arg3) = 0;\n    }\n    return;\n}\n",
        "token_count": 613
    },
    "140055d1": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140055d14(int32_t *arg1, uint64_t arg2, int64_t *arg3)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int64_t iVar3;\n    int32_t iVar4;\n    ulong uStackX8;\n    \n    fcn.140054b98(arg1, arg2);\n    fcn.1400150dc(*(arg1 + 2), arg2 & 0xffffffff, &uStackX8);\n    if (*arg1 == 0) {\n        iVar3 = (*_sym.imp.USER32.dll_SendMessageA)(uStackX8, 0x14d, 0xffffffffffffffff, *arg3);\n        if (iVar3 == -1) {\n            fcn.1400226d4(uStackX8, *arg3);\n        }\n    }\n    else {\n        uVar2 = (*_sym.imp.USER32.dll_GetWindowTextLengthA)();\n        if (uVar2 < 1) {\n            if ((1U - *(*arg3 + -8) | *(*arg3 + -0xc) - 0xffU) < 0) {\n                fcn.1400033e0(arg3, 0xff);\n            }\n            iVar3 = *arg3;\n            iVar4 = 0x100;\n        }\n        else {\n            if ((1U - *(*arg3 + -8) | *(*arg3 + -0xc) - uVar2) < 0) {\n                fcn.1400033e0(arg3, uVar2);\n            }\n            iVar3 = *arg3;\n            if (*(iVar3 + -0xc) < uVar2) {\n                fcn.1400031e0(0x80070057);\n                pcVar1 = swi(3);\n                (*pcVar1)();\n                return;\n            }\n            *(iVar3 + -0x10) = uVar2;\n            iVar4 = uVar2 + 1;\n            *(uVar2 + *arg3) = 0;\n        }\n        (*_sym.imp.USER32.dll_GetWindowTextA)(uStackX8, iVar3, iVar4);\n        iVar3 = *arg3;\n        if (iVar3 == 0) {\n            iVar4 = 0;\n        }\n        else {\n            iVar4 = fcn.14006b544(iVar3, *(iVar3 + -0xc));\n            if (iVar4 < 0) goto code_r0x000140055dfe;\n        }\n        if (*(*arg3 + -0xc) < iVar4) {\ncode_r0x000140055dfe:\n            fcn.1400031e0(0x80070057);\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        *(*arg3 + -0x10) = iVar4;\n        *(iVar4 + *arg3) = 0;\n    }\n    return;\n}\n",
        "token_count": 637
    },
    "14005622": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.14005622c(int64_t arg1)\n\n{\n    int32_t iVar1;\n    int64_t *piVar2;\n    \n    if ((*(arg1 + 0x40) != 0) && (iVar1 = fcn.1400471b0(arg1),  iVar1 != 0)) {\n        piVar2 = fcn.140047190(arg1);\n        (**(*piVar2 + 0xc0))(piVar2);\n        return;\n    }\n    fcn.14000ff48(arg1);\n    return;\n}\n",
        "token_count": 123
    },
    "140057d2": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong * fcn.140057d2c(int64_t arg1)\n\n{\n    ulong uVar1;\n    code *pcVar2;\n    int64_t iVar3;\n    int64_t *piVar4;\n    ulong *puVar5;\n    int64_t iVar6;\n    \n    if (*(arg1 + 0x20) == 0) {\n        iVar3 = fcn.14002aaa4(arg1 + 0x28, *(arg1 + 0x30), 0x20);\n        iVar6 = *(arg1 + 0x30);\n        puVar5 = iVar3 + -0x18 + iVar6 * 0x20;\n        while (iVar6 = iVar6 + -1,  -1 < iVar6) {\n            *puVar5 = *(arg1 + 0x20);\n            *(arg1 + 0x20) = puVar5;\n            puVar5 = puVar5 + -4;\n        }\n    }\n    puVar5 = *(arg1 + 0x20);\n    uVar1 = *puVar5;\n    *(arg1 + 0x18) = *(arg1 + 0x18) + 1;\n    *(arg1 + 0x20) = uVar1;\n    if (puVar5 + 2 != NULL) {\n        piVar4 = fcn.140017fc0();\n        if (piVar4 == NULL) {\n            fcn.1400031e0(0x80004005);\n            pcVar2 = swi(3);\n            puVar5 = (*pcVar2)();\n            return puVar5;\n        }\n        iVar6 = (**(*piVar4 + 0x18))(piVar4);\n        puVar5[2] = iVar6 + 0x18;\n    }\n    puVar5[3] = 0;\n    return puVar5;\n}\n",
        "token_count": 409
    },
    "140057ef": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140057ef0(int64_t arg1)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    code *pcVar4;\n    int64_t iVar5;\n    uint32_t uVar6;\n    ulong *puVar7;\n    \n    if (*(arg1 + 8) != 0) {\n        uVar6 = 0;\n        if (*(arg1 + 0x10) != 0) {\n            iVar5 = 0;\n            do {\n                for (puVar7 = *(*(arg1 + 8) + iVar5); puVar7 != NULL; puVar7 = *puVar7) {\n                    if (puVar7 + 2 == NULL) {\n                        fcn.140020780();\n                        pcVar4 = swi(3);\n                        (*pcVar4)();\n                        return;\n                    }\n                    iVar3 = puVar7[2];\n                    LOCK();\n                    piVar1 = iVar3 + -8;\n                    iVar2 = *piVar1;\n                    *piVar1 = *piVar1 + -1;\n                    if (iVar2 + -1 < 1) {\n                        (**(**(iVar3 + -0x18) + 8))();\n                    }\n                }\n                uVar6 = uVar6 + 1;\n                iVar5 = iVar5 + 8;\n            } while (uVar6 < *(arg1 + 0x10));\n        }\n        fcn.1400036d8(*(arg1 + 8));\n        *(arg1 + 8) = 0;\n    }\n    *(arg1 + 0x18) = 0;\n    *(arg1 + 0x20) = 0;\n    fcn.14002aadc(*(arg1 + 0x28));\n    *(arg1 + 0x28) = 0;\n    return;\n}\n",
        "token_count": 409
    },
    "1400584e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.1400584ec(char **arg1, ulong arg2, uint64_t arg3, int64_t arg4)\n\n{\n    int64_t **ppiVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    char *arg2_00;\n    code *pcVar4;\n    int64_t iVar5;\n    int64_t *piVar6;\n    ulong uVar7;\n    int64_t **ppiVar8;\n    int64_t iStack72;\n    int64_t iStack64;\n    ulong uStack56;\n    int64_t **ppiStack48;\n    int64_t iStack40;\n    uint uStack32;\n    \n    uStack56 = 0xfffffffffffffffe;\n    piVar6 = fcn.140017fc0();\n    if (piVar6 == NULL) {\n        fcn.1400031e0(0x80004005);\n        pcVar4 = swi(3);\n        uVar7 = (*pcVar4)();\n        return uVar7;\n    }\n    iStack72 = (**(*piVar6 + 0x18))();\n    iStack72 = iStack72 + 0x18;\n    piVar6 = fcn.140017fc0();\n    if (piVar6 != NULL) {\n        ppiVar8 = (**(*piVar6 + 0x18))(piVar6);\n        ppiStack48 = ppiVar8 + 3;\n        iStack64 = 0;\n        if (arg4 == -0x80000000) {\n            fcn.1400451b4(0xffffffff80000000, 0x1400a4990, 0, 0x20019);\n        }\n        iVar5 = iStack64;\n        uStack32 = 0;\n        arg2_00 = *arg1;\n        iStack40 = iStack64;\n        while (arg2_00 != NULL) {\n            arg1 = arg1 + 1;\n            if (((arg4 != -0x80000000) || (*arg2_00 != '\\0')) &&\n               ((fcn.1400540c0(&iStack72, arg2_00, arg2, arg3 & 0xffffffff),  arg4 != -0x80000000 ||\n                (*(iStack72 + -0x10) != 0)))) {\n                fcn.140024aa8(iStack72);\n            }\n            arg2_00 = *arg1;\n        }\n        if (iVar5 != 0) {\n            (*_sym.imp.ADVAPI32.dll_RegCloseKey)(iVar5);\n        }\n        LOCK();\n        ppiVar1 = ppiVar8 + 2;\n        iVar3 = *ppiVar1;\n        *ppiVar1 = *ppiVar1 + -1;\n        if (iVar3 + -1 < 1) {\n            (**(**ppiVar8 + 8))();\n        }\n        LOCK();\n        piVar2 = iStack72 + -8;\n        iVar3 = *piVar2;\n        *piVar2 = *piVar2 + -1;\n        if (iVar3 + -1 < 1) {\n            (**(**(iStack72 + -0x18) + 8))();\n        }\n        return 1;\n    }\n    fcn.1400031e0(0x80004005);\n    pcVar4 = swi(3);\n    uVar7 = (*pcVar4)();\n    return uVar7;\n}\n",
        "token_count": 752
    },
    "1400588d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.1400588d0(ulong arg1, ulong rclsid, ulong arg3, ulong arg4)\n\n{\n    int32_t *piVar1;\n    code *pcVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    int64_t iVar5;\n    int64_t *piVar6;\n    ulong uVar7;\n    int64_t iVar8;\n    int64_t **ppiVar9;\n    uint64_t uVar10;\n    ulong in_stack_00000028;\n    uint32_t in_stack_00000030;\n    int64_t in_stack_00000038;\n    char *in_stack_00000040;\n    int64_t iStack72;\n    int64_t iStack64;\n    int64_t iStack56;\n    ulong uStack48;\n    int64_t iStack40;\n    int64_t iStack32;\n    int64_t iStack24;\n    ulong uStack16;\n    \n    uStack16 = 0xfffffffffffffffe;\n    uVar7 = arg4;\n    (*_sym.imp.ole32.dll_StringFromCLSID)(rclsid);\n    iVar5 = fcn.140043a9c(uStack48);\n    if (iVar5 == 0) {\n        return 0;\n    }\n    fcn.140058304(arg1, 0, iVar5);\n    fcn.140058304(arg1, 1, arg3);\n    (*_sym.imp.ole32.dll_CoTaskMemFree)();\n    piVar6 = fcn.140017fc0();\n    if (piVar6 == NULL) {\n        fcn.1400031e0(0x80004005);\n        pcVar2 = swi(3);\n        uVar7 = (*pcVar2)();\n        return uVar7;\n    }\n    iStack64 = (**(*piVar6 + 0x18))(piVar6);\n    iStack64 = iStack64 + 0x18;\n    iVar5 = fcn.140017ad4();\n    fcn.14002913c(*(iVar5 + 0x10), &iStack64);\n    fcn.140058304(arg1, 2, iStack64);\n    fcn.140058304(arg1, 3, arg4);\n    fcn.140058304(arg1, 4, in_stack_00000028);\n    iVar5 = fcn.140017ad4();\n    fcn.140058304(arg1, 5, *(iVar5 + 0x20));\n    piVar6 = fcn.140017fc0();\n    if (piVar6 == NULL) {\n        fcn.1400031e0(0x80004005);\n        pcVar2 = swi(3);\n        uVar7 = (*pcVar2)();\n        return uVar7;\n    }\n    iStack56 = (**(*piVar6 + 0x18))(piVar6);\n    iVar5 = iStack64;\n    iStack56 = iStack56 + 0x18;\n    if (in_stack_00000030 != 0) {\n        iVar8 = fcn.140017ad4();\n        iVar5 = (*_sym.imp.SHELL32.dll_ExtractIconA)(*(iVar8 + 0x10), iVar5);\n        if (iVar5 == 0) {\n            in_stack_00000030 = 0;\n        }\n        else {\n            (*_sym.imp.USER32.dll_DestroyIcon)(iVar5);\n        }\n    }\n    fcn.1400054f4(&iStack56, 0x1400a4fac, in_stack_00000030, uVar7);\n    fcn.140058304(arg1, 6, iStack56);\n    fcn.140058304(arg1, 7, in_stack_00000038);\n    piVar6 = fcn.140017fc0();\n    if (piVar6 == NULL) {\n        fcn.1400031e0(0x80004005);\n        pcVar2 = swi(3);\n        uVar7 = (*pcVar2)();\n        return uVar7;\n    }\n    iStack72 = (**(*piVar6 + 0x18))(piVar6);\n    iStack72 = iStack72 + 0x18;\n    if ((in_stack_00000040 == NULL) || (*in_stack_00000040 == '\\0')) {\n        if (in_stack_00000038 == 0) {\n            uVar3 = 0;\n        }\n        else {\n            uVar3 = fcn.1400699a0(in_stack_00000038);\n        }\n        uVar10 = uVar3;\n        fcn.140005294(&iStack72, in_stack_00000038, uVar10);\n        iVar5 = iStack72;\n        if (0 < *(iStack72 + -0x10)) {\n            in_stack_00000038 = 0x28;\n            iVar8 = fcn.14006bc24(iStack72, 0x28);\n            if ((iVar8 != 0) && (iVar4 = iVar8 - iVar5,  iVar4 != -1)) {\n                uVar10 = iVar4 + 1;\n                uVar7 = fcn.14002591c(&iStack72, &iStack40, uVar10);\n                fcn.140007bbc(&iStack72, uVar7);\n                ppiVar9 = iStack40 + -0x18;\n                LOCK();\n                piVar1 = iStack40 + -8;\n                iVar4 = *piVar1;\n                *piVar1 = *piVar1 + -1;\n                if (iVar4 + -1 < 1) {\n                    (**(**ppiVar9 + 8))();\n                }\n                iVar5 = iStack72;\n                if (0 < *(iStack72 + -0x10)) {\n                    ppiVar9 = 0x2e;\n                    iVar8 = fcn.14006bc24(iStack72, 0x2e);\n                    if ((iVar8 != 0) && (uVar3 = iVar8 - iVar5,  uVar3 != 0xffffffff)) {\n                        uVar10 = uVar3;\n                        uVar7 = fcn.14002591c(&iStack72, &iStack32, uVar10);\n                        fcn.140007bbc(&iStack72, uVar7);\n                        ppiVar9 = iStack32 + -0x18;\n                        LOCK();\n                        piVar1 = iStack32 + -8;\n                        iVar4 = *piVar1;\n                        *piVar1 = *piVar1 + -1;\n                        if (iVar4 + -1 < 1) {\n                            (**(**ppiVar9 + 8))();\n                        }\n                        iVar5 = iStack72;\n                        if (0 < *(iStack72 + -0x10)) {\n                            ppiVar9 = 0x29;\n                            iVar8 = fcn.14006bc24(iStack72, 0x29);\n                            if ((iVar8 != 0) && (uVar3 = iVar8 - iVar5,  uVar3 != 0xffffffff)) {\n                                uVar7 = fcn.140025730(&iStack72, &iStack24, uVar3);\n                                fcn.140007bbc(&iStack72, uVar7);\n                                LOCK();\n                                piVar1 = iStack24 + -8;\n                                iVar4 = *piVar1;\n                                *piVar1 = *piVar1 + -1;\n                                if (iVar4 + -1 < 1) {\n                                    (**(**(iStack24 + -0x18) + 8))();\n                                }\n                                goto code_r0x000140058c63;\n                            }\n                        }\n                        fcn.140004828(&iStack72, ppiVar9, uVar10);\n                        goto code_r0x000140058c63;\n                    }\n                }\n                fcn.140004828(&iStack72, ppiVar9, uVar10);\n                goto code_r0x000140058c63;\n            }\n        }\n        fcn.140004828(&iStack72, in_stack_00000038, uVar10);\n    }\n    else {\n        uVar3 = fcn.1400699a0(in_stack_00000040);\n        fcn.140005294(&iStack72, in_stack_00000040, uVar3);\n    }\ncode_r0x000140058c63:\n    iVar5 = iStack72;\n    fcn.140058304(arg1, 8, iStack72);\n    LOCK();\n    piVar1 = iVar5 + -8;\n    iVar4 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar4 + -1 < 1) {\n        (**(**(iVar5 + -0x18) + 8))();\n    }\n    LOCK();\n    piVar1 = iStack56 + -8;\n    iVar4 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar4 + -1 < 1) {\n        (**(**(iStack56 + -0x18) + 8))();\n    }\n    LOCK();\n    piVar1 = iStack64 + -8;\n    iVar4 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar4 + -1 < 1) {\n        (**(**(iStack64 + -0x18) + 8))();\n    }\n    return 1;\n}\n",
        "token_count": 2081
    },
    "14005b66": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong * fcn.14005b664(int64_t lpModuleName, ulong *arg2)\n\n{\n    int64_t iVar1;\n    ulong uVar2;\n    \n    if (*(lpModuleName + 0x30) == 0) {\n        if (*(lpModuleName + 8) == 0) {\n            iVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(*(lpModuleName + 0x18));\n            *(lpModuleName + 8) = iVar1;\n            if (iVar1 == 0) {\n                iVar1 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(*(lpModuleName + 0x18));\n                *(lpModuleName + 8) = iVar1;\n                *(lpModuleName + 0x10) = iVar1 != 0;\n            }\n        }\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(*(lpModuleName + 8), \"ImageList_Create\");\n        *(lpModuleName + 0x30) = uVar2;\n    }\n    *arg2 = *(lpModuleName + 0x30);\n    return arg2;\n}\n",
        "token_count": 237
    },
    "14005b6d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nint64_t fcn.14005b6d8(int64_t arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int64_t iVar3;\n    code *pcVar4;\n    uint in_stack_00000028;\n    uint in_stack_00000030;\n    ulong uStack32;\n    int64_t iStack24;\n    uchar auStack16 [8];\n    \n    uStack32 = 0;\n    iVar3 = fcn.140017ad4();\n    iVar1 = fcn.140016658(*(iVar3 + 0xd8), &uStack32);\n    iStack24 = 0;\n    if (iVar1 == 0) {\n        iVar3 = 0;\n    }\n    else {\n        fcn.14005b664(arg1, auStack16);\n        pcVar4 = *(arg1 + 0x30);\n        if (pcVar4 == NULL) {\n            fcn.140020780();\n        }\n        iVar3 = (*pcVar4)(arg2, arg3, arg4, in_stack_00000028, in_stack_00000030);\n        if (iVar1 != 2) {\n            iStack24 = iVar3;\n            if (iVar3 != 0) {\n                uVar2 = 0;\n            }\n            else {\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            }\n            fcn.14001663c(0, uStack32);\n            if (iVar3 == 0) {\n                (*_sym.imp.KERNEL32.dll_SetLastError)(uVar2);\n            }\n        }\n    }\n    return iVar3;\n}\n",
        "token_count": 367
    },
    "14005b7c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong * fcn.14005b7cc(int64_t lpModuleName, ulong *arg2)\n\n{\n    int64_t iVar1;\n    ulong uVar2;\n    \n    if (*(lpModuleName + 0x38) == 0) {\n        if (*(lpModuleName + 8) == 0) {\n            iVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(*(lpModuleName + 0x18));\n            *(lpModuleName + 8) = iVar1;\n            if (iVar1 == 0) {\n                iVar1 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(*(lpModuleName + 0x18));\n                *(lpModuleName + 8) = iVar1;\n                *(lpModuleName + 0x10) = iVar1 != 0;\n            }\n        }\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(*(lpModuleName + 8), \"ImageList_Destroy\");\n        *(lpModuleName + 0x38) = uVar2;\n    }\n    *arg2 = *(lpModuleName + 0x38);\n    return arg2;\n}\n",
        "token_count": 238
    },
    "14005b84": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nuint64_t fcn.14005b840(int64_t arg1, ulong arg2)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint uVar3;\n    int64_t iVar4;\n    uint64_t uVar5;\n    ulong in_R8;\n    ulong in_R9;\n    code *pcVar6;\n    bool bVar7;\n    ulong uStackX32;\n    uchar auStack16 [8];\n    \n    uStackX32 = 0;\n    iVar4 = fcn.140017ad4();\n    uVar5 = fcn.140016658(*(iVar4 + 0xd8), &uStackX32);\n    iVar1 = uVar5;\n    if (iVar1 != 0) {\n        fcn.14005b7cc(arg1, auStack16);\n        pcVar6 = *(arg1 + 0x38);\n        if (pcVar6 == NULL) {\n            fcn.140020780();\n        }\n        uVar2 = (*pcVar6)(arg2);\n        uVar5 = uVar2;\n        if (iVar1 != 2) {\n            bVar7 = uVar2 != 0;\n            if (bVar7) {\n                uVar3 = 0;\n            }\n            else {\n                uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            }\n            fcn.14001663c(0, uStackX32, in_R8, in_R9, uVar2);\n            if (!bVar7) {\n                (*_sym.imp.KERNEL32.dll_SetLastError)(uVar3);\n            }\n        }\n    }\n    return uVar5;\n}\n",
        "token_count": 362
    },
    "14005b8f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong * fcn.14005b8f4(int64_t lpModuleName, ulong *arg2)\n\n{\n    int64_t iVar1;\n    ulong uVar2;\n    \n    if (*(lpModuleName + 0xb0) == 0) {\n        if (*(lpModuleName + 8) == 0) {\n            iVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(*(lpModuleName + 0x18));\n            *(lpModuleName + 8) = iVar1;\n            if (iVar1 == 0) {\n                iVar1 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(*(lpModuleName + 0x18));\n                *(lpModuleName + 8) = iVar1;\n                *(lpModuleName + 0x10) = iVar1 != 0;\n            }\n        }\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(*(lpModuleName + 8), \"ImageList_LoadImageA\");\n        *(lpModuleName + 0xb0) = uVar2;\n    }\n    *arg2 = *(lpModuleName + 0xb0);\n    return arg2;\n}\n",
        "token_count": 241
    },
    "14005b97": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nint64_t fcn.14005b970(int64_t arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int64_t iVar3;\n    code *pcVar4;\n    uint in_stack_00000028;\n    uint in_stack_00000030;\n    uint in_stack_00000038;\n    uint in_stack_00000040;\n    ulong uStack32;\n    int64_t iStack24;\n    uchar auStack16 [8];\n    \n    uStack32 = 0;\n    iVar3 = fcn.140017ad4();\n    iVar1 = fcn.140016658(*(iVar3 + 0xd8), &uStack32);\n    iStack24 = 0;\n    if (iVar1 == 0) {\n        iVar3 = 0;\n    }\n    else {\n        fcn.14005b8f4(arg1, auStack16);\n        pcVar4 = *(arg1 + 0xb0);\n        if (pcVar4 == NULL) {\n            fcn.140020780();\n        }\n        iVar3 = (*pcVar4)(arg2, arg3, arg4, in_stack_00000028, in_stack_00000030, in_stack_00000038, in_stack_00000040);\n        if (iVar1 != 2) {\n            iStack24 = iVar3;\n            if (iVar3 != 0) {\n                uVar2 = 0;\n            }\n            else {\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            }\n            fcn.14001663c(0, uStack32);\n            if (iVar3 == 0) {\n                (*_sym.imp.KERNEL32.dll_SetLastError)(uVar2);\n            }\n        }\n    }\n    return iVar3;\n}\n",
        "token_count": 399
    },
    "14005ba7": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong * fcn.14005ba7c(int64_t lpModuleName, ulong *arg2)\n\n{\n    int64_t iVar1;\n    ulong uVar2;\n    \n    if (*(lpModuleName + 0x108) == 0) {\n        if (*(lpModuleName + 8) == 0) {\n            iVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(*(lpModuleName + 0x18));\n            *(lpModuleName + 8) = iVar1;\n            if (iVar1 == 0) {\n                iVar1 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(*(lpModuleName + 0x18));\n                *(lpModuleName + 8) = iVar1;\n                *(lpModuleName + 0x10) = iVar1 != 0;\n            }\n        }\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(*(lpModuleName + 8), \"ImageList_Read\");\n        *(lpModuleName + 0x108) = uVar2;\n    }\n    *arg2 = *(lpModuleName + 0x108);\n    return arg2;\n}\n",
        "token_count": 238
    },
    "14005baf": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nint64_t fcn.14005baf8(int64_t arg1, ulong arg2)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int64_t iVar3;\n    ulong in_R8;\n    ulong in_R9;\n    code *pcVar4;\n    ulong uStackX32;\n    int64_t iVar5;\n    uchar auStack16 [8];\n    \n    uStackX32 = 0;\n    iVar3 = fcn.140017ad4();\n    iVar1 = fcn.140016658(*(iVar3 + 0xd8), &uStackX32);\n    if (iVar1 == 0) {\n        iVar3 = 0;\n    }\n    else {\n        fcn.14005ba7c(arg1, auStack16);\n        pcVar4 = *(arg1 + 0x108);\n        if (pcVar4 == NULL) {\n            fcn.140020780();\n        }\n        iVar3 = (*pcVar4)(arg2);\n        if (iVar1 != 2) {\n            iVar5 = iVar3;\n            if (iVar3 != 0) {\n                uVar2 = 0;\n            }\n            else {\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            }\n            fcn.14001663c(0, uStackX32, in_R8, in_R9, iVar5);\n            if (iVar3 == 0) {\n                (*_sym.imp.KERNEL32.dll_SetLastError)(uVar2);\n            }\n        }\n    }\n    return iVar3;\n}\n",
        "token_count": 338
    },
    "14005bbb": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong * fcn.14005bbb8(int64_t lpModuleName, ulong *arg2)\n\n{\n    int64_t iVar1;\n    ulong uVar2;\n    \n    if (*(lpModuleName + 0x110) == 0) {\n        if (*(lpModuleName + 8) == 0) {\n            iVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(*(lpModuleName + 0x18));\n            *(lpModuleName + 8) = iVar1;\n            if (iVar1 == 0) {\n                iVar1 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(*(lpModuleName + 0x18));\n                *(lpModuleName + 8) = iVar1;\n                *(lpModuleName + 0x10) = iVar1 != 0;\n            }\n        }\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(*(lpModuleName + 8), \"ImageList_Write\");\n        *(lpModuleName + 0x110) = uVar2;\n    }\n    *arg2 = *(lpModuleName + 0x110);\n    return arg2;\n}\n",
        "token_count": 237
    },
    "14005bc3": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nuint64_t fcn.14005bc34(int64_t arg1, ulong arg2, ulong arg3)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint uVar3;\n    int64_t iVar4;\n    uint64_t uVar5;\n    code *pcVar6;\n    ulong uStack32;\n    uchar auStack24 [16];\n    \n    uStack32 = 0;\n    iVar4 = fcn.140017ad4();\n    uVar5 = fcn.140016658(*(iVar4 + 0xd8), &uStack32);\n    iVar1 = uVar5;\n    if (iVar1 != 0) {\n        fcn.14005bbb8(arg1, auStack24);\n        pcVar6 = *(arg1 + 0x110);\n        if (pcVar6 == NULL) {\n            fcn.140020780();\n        }\n        uVar2 = (*pcVar6)(arg2, arg3);\n        uVar5 = uVar2;\n        if (iVar1 != 2) {\n            if (uVar2 != 0) {\n                uVar3 = 0;\n            }\n            else {\n                uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            }\n            fcn.14001663c(0, uStack32);\n            if (uVar2 == 0) {\n                (*_sym.imp.KERNEL32.dll_SetLastError)(uVar3);\n            }\n        }\n    }\n    return uVar5;\n}\n",
        "token_count": 328
    },
    "14005bcf": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong * fcn.14005bcfc(int64_t lpModuleName, ulong *arg2)\n\n{\n    int64_t iVar1;\n    ulong uVar2;\n    \n    if (*(lpModuleName + 0x140) == 0) {\n        if (*(lpModuleName + 8) == 0) {\n            iVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(*(lpModuleName + 0x18));\n            *(lpModuleName + 8) = iVar1;\n            if (iVar1 == 0) {\n                iVar1 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(*(lpModuleName + 0x18));\n                *(lpModuleName + 8) = iVar1;\n                *(lpModuleName + 0x10) = iVar1 != 0;\n            }\n        }\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(*(lpModuleName + 8), \"ImageList_Merge\");\n        *(lpModuleName + 0x140) = uVar2;\n    }\n    *arg2 = *(lpModuleName + 0x140);\n    return arg2;\n}\n",
        "token_count": 238
    },
    "14005bd7": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nint64_t fcn.14005bd78(int64_t arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int64_t iVar3;\n    code *pcVar4;\n    uint in_stack_00000028;\n    uint in_stack_00000030;\n    uint in_stack_00000038;\n    int32_t iVar5;\n    ulong uStack32;\n    int64_t iStack24;\n    uchar auStack16 [8];\n    \n    uStack32 = 0;\n    iVar3 = fcn.140017ad4();\n    iVar1 = fcn.140016658(*(iVar3 + 0xd8), &uStack32);\n    iStack24 = 0;\n    if (iVar1 == 0) {\n        iVar3 = 0;\n    }\n    else {\n        iVar5 = iVar1;\n        fcn.14005bcfc(arg1, auStack16);\n        pcVar4 = *(arg1 + 0x140);\n        if (pcVar4 == NULL) {\n            fcn.140020780();\n        }\n        iVar3 = (*pcVar4)(arg2, arg3, arg4, in_stack_00000028, in_stack_00000030, in_stack_00000038, iVar5);\n        if (iVar1 != 2) {\n            iStack24 = iVar3;\n            if (iVar3 != 0) {\n                uVar2 = 0;\n            }\n            else {\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            }\n            fcn.14001663c(0, uStack32);\n            if (iVar3 == 0) {\n                (*_sym.imp.KERNEL32.dll_SetLastError)(uVar2);\n            }\n        }\n    }\n    return iVar3;\n}\n",
        "token_count": 398
    },
    "14005be7": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong * fcn.14005be7c(int64_t lpModuleName, ulong *arg2)\n\n{\n    int64_t iVar1;\n    ulong uVar2;\n    \n    if (*(lpModuleName + 0x198) == 0) {\n        if (*(lpModuleName + 8) == 0) {\n            iVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(*(lpModuleName + 0x18));\n            *(lpModuleName + 8) = iVar1;\n            if (iVar1 == 0) {\n                iVar1 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(*(lpModuleName + 0x18));\n                *(lpModuleName + 8) = iVar1;\n                *(lpModuleName + 0x10) = iVar1 != 0;\n            }\n        }\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(*(lpModuleName + 8), \"MakeDragList\");\n        *(lpModuleName + 0x198) = uVar2;\n    }\n    *arg2 = *(lpModuleName + 0x198);\n    return arg2;\n}\n",
        "token_count": 238
    },
    "14005bfb": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong * fcn.14005bfb0(int64_t lpModuleName, ulong *arg2)\n\n{\n    int64_t iVar1;\n    ulong uVar2;\n    \n    if (*(lpModuleName + 0x1a8) == 0) {\n        if (*(lpModuleName + 8) == 0) {\n            iVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(*(lpModuleName + 0x18));\n            *(lpModuleName + 8) = iVar1;\n            if (iVar1 == 0) {\n                iVar1 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(*(lpModuleName + 0x18));\n                *(lpModuleName + 8) = iVar1;\n                *(lpModuleName + 0x10) = iVar1 != 0;\n            }\n        }\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(*(lpModuleName + 8), \"LBItemFromPt\");\n        *(lpModuleName + 0x1a8) = uVar2;\n    }\n    *arg2 = *(lpModuleName + 0x1a8);\n    return arg2;\n}\n",
        "token_count": 245
    },
    "14005c02": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nint32_t fcn.14005c02c(int64_t arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int64_t iVar4;\n    code *pcVar5;\n    ulong uStack32;\n    uchar auStack24 [16];\n    \n    uStack32 = 0;\n    iVar4 = fcn.140017ad4();\n    iVar1 = fcn.140016658(*(iVar4 + 0xd8), &uStack32);\n    if (iVar1 == 0) {\n        iVar2 = -1;\n    }\n    else {\n        fcn.14005bfb0(arg1, auStack24);\n        pcVar5 = *(arg1 + 0x1a8);\n        if (pcVar5 == NULL) {\n            fcn.140020780();\n        }\n        iVar2 = (*pcVar5)(arg2, arg3, arg4);\n        if (iVar1 != 2) {\n            if (iVar2 != -1) {\n                uVar3 = 0;\n            }\n            else {\n                uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            }\n            fcn.14001663c(0, uStack32);\n            if (iVar2 == -1) {\n                (*_sym.imp.KERNEL32.dll_SetLastError)(uVar3);\n            }\n        }\n    }\n    return iVar2;\n}\n",
        "token_count": 320
    },
    "14005c56": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.14005c56c(int64_t arg1)\n\n{\n    ulong uVar1;\n    int64_t iVar2;\n    \n    if (*(arg1 + 8) == 0) {\n        uVar1 = 0;\n    }\n    else {\n        uVar1 = fcn.14005c528(arg1);\n        iVar2 = fcn.140017ad4();\n        uVar1 = fcn.14005b840(**(iVar2 + 200), uVar1);\n    }\n    return uVar1;\n}\n",
        "token_count": 118
    },
    "14005e2d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.14005e2d0(int64_t arg1, uint64_t hWnd, ulong arg3)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    int64_t arg2;\n    int32_t iVar4;\n    \n    if (0xffff < hWnd) {\n        uVar2 = (*_sym.imp.USER32.dll_GetDlgCtrlID)(*(hWnd + 0x40));\n        hWnd = uVar2;\n    }\n    iVar3 = fcn.14005dd90(arg1, hWnd, 0xffffffff);\n    arg2 = iVar3;\n    if (0 < iVar3) {\n        fcn.1400675b8(arg1 + 0x110, arg2, 1);\n        iVar4 = iVar3 + -1;\n        if ((iVar4 < 0) || (*(arg1 + 0x120) <= iVar4)) {\n            fcn.140020780();\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        if (*(*(arg1 + 0x118) + iVar4 * 8) == 0) {\n            if ((iVar3 < 0) || (*(arg1 + 0x120) <= arg2)) {\n                fcn.140020780();\n                pcVar1 = swi(3);\n                (*pcVar1)();\n                return;\n            }\n            if (*(*(arg1 + 0x118) + arg2 * 8) == 0) {\n                fcn.1400675b8(arg1 + 0x110, arg2, 1);\n            }\n        }\n    }\n    return;\n}\n",
        "token_count": 364
    },
    "14005e38": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.14005e388(int64_t *arg1, int64_t arg2, ulong arg3, ulong arg4)\n\n{\n    int64_t iVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    ulong uVar6;\n    int64_t *hWnd;\n    uint64_t arg2_00;\n    \n    if (arg1 == NULL) {\n        fcn.140020780();\n        pcVar2 = swi(3);\n        uVar6 = (*pcVar2)();\n        return uVar6;\n    }\n    if (arg2 == 0) {\n        fcn.140020780();\n        pcVar2 = swi(3);\n        uVar6 = (*pcVar2)();\n        return uVar6;\n    }\n    iVar3 = fcn.14005dd90(arg1, arg2, arg3);\n    arg2_00 = iVar3;\n    if (iVar3 < 1) {\n        fcn.140020780();\n        pcVar2 = swi(3);\n        uVar6 = (*pcVar2)();\n        return uVar6;\n    }\n    if (arg4 == 1) {\n        if ((iVar3 < 0) || (arg1[0x24] <= arg2_00)) {\n            fcn.140020780();\n            pcVar2 = swi(3);\n            uVar6 = (*pcVar2)();\n            return uVar6;\n        }\n        iVar1 = arg1[0x23];\n        uVar4 = (*_sym.imp.USER32.dll_GetDlgCtrlID)(*(arg2 + 0x40));\n        *(iVar1 + arg2_00 * 8) = uVar4;\n        if ((iVar3 < 0) || (arg1[0x24] <= arg2_00)) {\n            fcn.140020780();\n            pcVar2 = swi(3);\n            uVar6 = (*pcVar2)();\n            return uVar6;\n        }\n        iVar5 = fcn.14005dd90(arg1, *(arg1[0x23] + arg2_00 * 8), arg2_00 & 0xffffffff);\n        if (0 < iVar5) {\n            fcn.1400675b8(arg1 + 0x22, arg2_00, 1);\n            iVar5 = iVar3 + -1;\n            if ((iVar5 < 0) || (arg1[0x24] <= iVar5)) {\n                fcn.140020780();\n                pcVar2 = swi(3);\n                uVar6 = (*pcVar2)();\n                return uVar6;\n            }\n            if (*(arg1[0x23] + iVar5 * 8) == 0) {\n                if ((iVar3 < 0) || (arg1[0x24] <= arg2_00)) {\n                    fcn.140020780();\n                    pcVar2 = swi(3);\n                    uVar6 = (*pcVar2)();\n                    return uVar6;\n                }\n                if (*(arg1[0x23] + arg2_00 * 8) == 0) {\n                    fcn.1400675b8(arg1 + 0x22, arg2_00, 1);\n                }\n            }\n        }\n    }\n    else {\n        uVar6 = 1;\n        fcn.1400675b8(arg1 + 0x22, arg2_00, 1);\n        iVar5 = iVar3 + -1;\n        if ((iVar5 < 0) || (arg1[0x24] <= iVar5)) {\n            fcn.140020780();\n            pcVar2 = swi(3);\n            uVar6 = (*pcVar2)();\n            return uVar6;\n        }\n        if (*(arg1[0x23] + iVar5 * 8) == 0) {\n            if ((iVar3 < 0) || (arg1[0x24] <= arg2_00)) {\n                fcn.140020780();\n                pcVar2 = swi(3);\n                uVar6 = (*pcVar2)();\n                return uVar6;\n            }\n            if (*(arg1[0x23] + arg2_00 * 8) == 0) {\n                uVar6 = 1;\n                fcn.1400675b8(arg1 + 0x22, arg2_00, 1);\n            }\n        }\n        if (arg4 != -1) {\n            fcn.14005e2d0(arg1, arg2, uVar6);\n        }\n    }\n    if (*(arg2 + 0x100) != 0) {\n        hWnd = fcn.140047190(arg1);\n        if ((*(arg1 + 0x21) == 0) || (iVar3 = (**(*arg1 + 0x308))(arg1),  iVar3 != 0)) {\n            *(hWnd + 0x31) = *(hWnd + 0x31) | 0xc;\n        }\n        else {\n            iVar3 = fcn.14005e220(arg1);\n            if (iVar3 == 0) {\n                (**(*hWnd + 0xc0))();\n                return 1;\n            }\n            fcn.14001546c(hWnd, 0);\n        }\n    }\n    return 0;\n}\n",
        "token_count": 1176
    },
    "14005edc": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.14005edc0(int64_t arg1, int64_t arg2, int64_t arg3)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    ulong uVar4;\n    int64_t iVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    uint64_t uVar8;\n    uint64_t arg3_00;\n    uchar auStack456 [32];\n    int32_t iStack424;\n    int32_t iStack416;\n    uint uStack408;\n    uint32_t uStack392;\n    uint32_t uStack388;\n    int32_t iStack384;\n    int32_t iStack380;\n    int32_t iStack376;\n    int32_t iStack372;\n    uchar auStack368 [24];\n    uint32_t uStack344;\n    uint32_t uStack340;\n    int32_t iStack336;\n    int32_t iStack332;\n    uchar auStack328 [272];\n    uint64_t uStack56;\n    \n    uStack56 = *0x1400d96f0 ^ auStack456;\n    if (arg1 == 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    if (arg2 == 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    (*_sym.imp.USER32.dll_GetWindowRect)(*(arg2 + 0x40));\n    if (*(arg2 + 0xf8) == arg1) {\n        if (arg3 == 0) goto code_r0x00014005f0c1;\n        iVar2 = (*_sym.imp.USER32.dll_EqualRect)(auStack368);\n        if (iVar2 != 0) goto code_r0x00014005f0c1;\n    }\n    if ((*(arg1 + 0x108) != 0) && ((*(arg2 + 0xe8) & 0x40) != 0)) {\n        *(arg1 + 0xe4) = *(arg1 + 0xe4) | 0x40;\n    }\n    *(arg1 + 0xe4) = *(arg1 + 0xe4) & 0xfffffff9;\n    uVar6 = *(arg1 + 0xe4);\n    *(arg1 + 0xe4) = *(arg2 + 0xe4) & 6 | uVar6;\n    if ((uVar6 & 0x40) == 0) {\n        fcn.140015f28(arg2, auStack328, 0x104);\n        fcn.1400226d4(*(arg1 + 0x40), auStack328);\n    }\n    uVar6 = (*(arg2 + 0xe4) ^ *(arg1 + 0xe4)) & 0xf000 ^ *(arg2 + 0xe4);\n    uVar7 = 1;\n    if (*(arg1 + 0x108) == 0) {\n        uVar6 = uVar6 & 0xfffffffe | 0xf00;\n    }\n    else {\n        uVar6 = uVar6 | 0xf01;\n    }\n    fcn.140056014(arg2, uVar6);\n    uVar6 = 0;\n    if (*(arg2 + 0xf8) != arg1) {\n        iVar2 = (*_sym.imp.USER32.dll_IsWindowVisible)(*(arg2 + 0x40));\n        uVar6 = 0;\n        if (iVar2 != 0) {\n            uStack408 = 0x97;\n            iStack416 = 0;\n            iStack424 = 0;\n            fcn.140015950(arg2, 0, 0, 0);\n            uVar6 = uVar7;\n        }\n    }\n    arg3_00 = 0xffffffff;\n    if (arg3 == 0) {\n        fcn.14006746c(arg1 + 0x110, *(arg1 + 0x120), arg2);\n        fcn.14006746c(arg1 + 0x110, *(arg1 + 0x120), 0);\n        uStack408 = 0x115;\n        iStack416 = 0;\n        uStack388 = -*0x1400deac4;\n        uStack392 = -*0x1400deac0;\n        iStack424 = 0;\n    }\n    else {\n        (*_sym.imp.USER32.dll_CopyRect)(&uStack392, arg3);\n        fcn.14001b798(arg1, &uStack392);\n        uStack344 = uStack392;\n        uStack340 = uStack388;\n        iStack336 = iStack384;\n        iStack332 = iStack380;\n        iStack376 = (iStack384 - uStack392) / 2 + uStack392;\n        iStack372 = (iStack380 - uStack388) / 2 + uStack388;\n        uVar3 = fcn.14005de1c(arg1, arg2, &uStack344, CONCAT44(iStack372, iStack376));\n        iStack416 = iStack380 - uStack388;\n        uStack408 = 0x114;\n        iStack424 = iStack384 - uStack392;\n        arg3_00 = uVar3;\n    }\n    uVar8 = uStack392;\n    fcn.140015950(arg2, 0, uVar8, uStack388);\n    uVar4 = (*_sym.imp.USER32.dll_GetParent)(*(arg2 + 0x40));\n    iVar5 = fcn.14000fc08(uVar4);\n    if (iVar5 != arg1) {\n        uVar4 = (*_sym.imp.USER32.dll_SetParent)(*(arg2 + 0x40));\n        fcn.14000fc08(uVar4);\n    }\n    iVar5 = *(arg2 + 0xf8);\n    if (iVar5 == arg1) {\n        uVar8 = 0;\ncode_r0x00014005f071:\n        fcn.14005e388(iVar5, arg2, arg3_00, uVar8);\n        uVar8 = arg3_00;\n    }\n    else if (iVar5 != 0) {\n        if ((*(arg1 + 0x108) == 0) || (*(iVar5 + 0x108) != 0)) {\n            uVar7 = 0;\n        }\n        uVar8 = uVar7;\n        arg3_00 = 0xffffffff;\n        goto code_r0x00014005f071;\n    }\n    *(arg2 + 0xf8) = arg1;\n    if (uVar6 != 0) {\n        uStack408 = 0x57;\n        iStack416 = 0;\n        iStack424 = 0;\n        uVar8 = 0;\n        fcn.140015950(arg2, 0, 0, 0);\n    }\n    fcn.14005e2d0(arg1, arg2, uVar8);\n    iVar5 = fcn.140047190(arg1);\n    *(iVar5 + 0x188) = *(iVar5 + 0x188) | 0xc;\ncode_r0x00014005f0c1:\n    fcn.140069870(uStack56 ^ auStack456);\n    return;\n}\n",
        "token_count": 1648
    },
    "14006875": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140068754(ulong arg1, int64_t arg2, int64_t arg3, int64_t arg4)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    ulong uVar4;\n    int64_t iVar5;\n    uint32_t *puVar6;\n    uchar auStack440 [32];\n    int32_t iStack408;\n    int32_t iStack400;\n    uint uStack392;\n    uint32_t uStack376;\n    uint32_t uStack372;\n    int32_t iStack368;\n    int32_t iStack364;\n    int32_t iStack360;\n    int32_t iStack356;\n    uchar auStack352 [24];\n    uint32_t uStack328;\n    uint32_t uStack324;\n    int32_t iStack320;\n    int32_t iStack316;\n    uchar auStack312 [248];\n    ulong uStack64;\n    uint64_t uStack40;\n    \n    if (arg2 == 0) {\n        uStack64 = 0x140068782;\n        fcn.140020780();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    if (arg3 == 0) {\n        iVar5 = 0;\n        puVar6 = 0x1400b15d0;\n        do {\n            uStack64 = 0x14006879b;\n            arg3 = fcn.140048f28(arg1, *puVar6);\n            if (arg3 != 0) {\n                uStack64 = 0x1400687ad;\n                uVar2 = (*_sym.imp.USER32.dll_GetDlgCtrlID)(*(arg2 + 0x40));\n                uStack64 = 0x1400687bb;\n                iVar3 = fcn.14005dd90(arg3, uVar2, 0xffffffff);\n                if (0 < iVar3) goto code_r0x00014005f0e8;\n            }\n            if (((puVar6[1] ^ *(arg2 + 0xe4)) & 0xf000) == 0) {\n                uStack64 = 0x1400687d9;\n                iVar5 = fcn.140048f28(arg1, *puVar6);\n            }\n            puVar6 = puVar6 + 2;\n        } while (puVar6 < 0x1400b15f0);\n        arg3 = iVar5;\n        if (iVar5 == 0) {\n            uStack64 = 0x1400687f9;\n            fcn.140020780();\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n    }\ncode_r0x00014005f0e8:\n    uStack40 = *0x1400d96f0 ^ &stack0xfffffffffffffe48;\n    if (arg3 == 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    if (arg2 == 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    (*_sym.imp.USER32.dll_GetWindowRect)(*(arg2 + 0x40));\n    if (*(arg2 + 0xf8) == arg3) {\n        if (arg4 == 0) goto code_r0x00014005f395;\n        iVar3 = (*_sym.imp.USER32.dll_EqualRect)(&stack0xfffffffffffffea0);\n        if (iVar3 != 0) goto code_r0x00014005f395;\n    }\n    if ((*(arg3 + 0x108) != 0) && ((*(arg2 + 0xe8) & 0x40) != 0)) {\n        *(arg3 + 0xe4) = *(arg3 + 0xe4) | 0x40;\n    }\n    *(arg3 + 0xe4) = *(arg3 + 0xe4) & 0xfffffff9;\n    uVar2 = *(arg3 + 0xe4);\n    *(arg3 + 0xe4) = *(arg2 + 0xe4) & 6 | uVar2;\n    if ((uVar2 & 0x40) == 0) {\n        fcn.140015f28(arg2, &stack0xfffffffffffffec8, 0x104);\n        fcn.1400226d4(*(arg3 + 0x40), &stack0xfffffffffffffec8);\n    }\n    uVar2 = (*(arg2 + 0xe4) ^ *(arg3 + 0xe4)) & 0xf000 ^ *(arg2 + 0xe4);\n    if (*(arg3 + 0x108) == 0) {\n        uVar2 = uVar2 & 0xfffffffe | 0xf00;\n    }\n    else {\n        uVar2 = uVar2 | 0xf01;\n    }\n    fcn.140056014(arg2, uVar2);\n    uVar2 = (*_sym.imp.USER32.dll_GetDlgCtrlID)(*(arg2 + 0x40));\n    iVar3 = fcn.14005dd90(arg3, uVar2, 0xffffffff);\n    if (0 < iVar3) {\n        if ((iVar3 < 0) || (*(arg3 + 0x120) <= iVar3)) {\n            fcn.140020780();\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        *(*(arg3 + 0x118) + iVar3 * 8) = arg2;\n    }\n    if (arg4 == 0) {\n        if (iVar3 < 1) {\n            fcn.14006746c(arg3 + 0x110, *(arg3 + 0x120), arg2);\n            fcn.14006746c(arg3 + 0x110, *(arg3 + 0x120), 0);\n        }\n        uStack392 = 0x115;\n        iStack400 = 0;\n        uStack372 = -*0x1400deac4;\n        uStack376 = -*0x1400deac0;\n        iStack408 = 0;\n    }\n    else {\n        (*_sym.imp.USER32.dll_CopyRect)(&stack0xfffffffffffffe88, arg4);\n        fcn.14001b798(arg3, &stack0xfffffffffffffe88);\n        if (iVar3 < 1) {\n            uStack328 = uStack376;\n            uStack324 = uStack372;\n            iStack320 = iStack368;\n            iStack316 = iStack364;\n            iStack360 = (iStack368 - uStack376) / 2 + uStack376;\n            iStack356 = (iStack364 - uStack372) / 2 + uStack372;\n            fcn.14005de1c(arg3, arg2, &stack0xfffffffffffffeb8, CONCAT44(iStack356, iStack360));\n        }\n        iStack400 = iStack364 - uStack372;\n        uStack392 = 0x114;\n        iStack408 = iStack368 - uStack376;\n    }\n    fcn.140015950(arg2, 0, uStack376, uStack372);\n    uVar4 = (*_sym.imp.USER32.dll_GetParent)(*(arg2 + 0x40));\n    iVar5 = fcn.14000fc08(uVar4);\n    if (iVar5 != arg3) {\n        uVar4 = (*_sym.imp.USER32.dll_SetParent)(*(arg2 + 0x40), *(arg3 + 0x40));\n        fcn.14000fc08(uVar4);\n    }\n    if (*(arg2 + 0xf8) != 0) {\n        fcn.14005e388(*(arg2 + 0xf8), arg2, 0xffffffff, 0);\n    }\n    *(arg2 + 0xf8) = arg3;\n    iVar5 = fcn.140047190(arg3);\n    *(iVar5 + 0x188) = *(iVar5 + 0x188) | 0xc;\ncode_r0x00014005f395:\n    fcn.140069870(uStack40 ^ &stack0xfffffffffffffe48);\n    return;\n}\n",
        "token_count": 1849
    },
    "14006042": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.140060420(int64_t arg1, ulong arg2, ulong arg3, ulong *arg4)\n\n{\n    int32_t iVar1;\n    \n    if ((((*(arg1 + 8) != -1) && (*(arg1 + 8) == arg2)) && (*(arg1 + 0x28) != 0)) &&\n       (iVar1 = fcn.14006af20(arg1 + 0x18, arg3, 0x10),  iVar1 == 0)) {\n        *arg4 = *(arg1 + 0x28);\n        (**(**(arg1 + 0x28) + 8))();\n        return 1;\n    }\n    *arg4 = 0;\n    return 0;\n}\n",
        "token_count": 165
    },
    "14006066": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\ncode ** fcn.140060664(code **arg1, code **arg2)\n\n{\n    int64_t **ppiVar1;\n    code *pcVar2;\n    code *pcVar3;\n    int32_t iVar4;\n    int64_t iVar5;\n    \n    arg1[4] = NULL;\n    ppiVar1 = arg1 + 3;\n    *arg1 = vtable.COleControlLock.0;\n    pcVar2 = *arg2;\n    pcVar3 = arg2[1];\n    *ppiVar1 = NULL;\n    arg1[1] = pcVar2;\n    arg1[2] = pcVar3;\n    iVar5 = fcn.140016f48(pcVar2);\n    if ((*(iVar5 + 0x17c) == 0) && (iVar4 = fcn.140053d30(),  iVar4 == 0)) {\n        return arg1;\n    }\n    iVar4 = (*_sym.imp.ole32.dll_CoGetClassObject)(arg2, 3, 0, 0x1400b60b8, ppiVar1);\n    if ((-1 < iVar4) && (iVar4 = (**(**ppiVar1 + 0x20))(*ppiVar1, 1),  iVar4 < 0)) {\n        (**(**ppiVar1 + 0x10))();\n        *ppiVar1 = NULL;\n    }\n    return arg1;\n}\n",
        "token_count": 314
    },
    "140060a1": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140060a18(int64_t arg1)\n\n{\n    if (*(arg1 + 0x7a) != '\\0') {\n        if (*(arg1 + 0x48) != 0) {\n            (*_sym.imp.ole32.dll_CoRevokeClassObject)();\n            *(arg1 + 0x48) = 0;\n        }\n        *(arg1 + 0x7a) = 0;\n    }\n    return;\n}\n",
        "token_count": 102
    },
    "140060aa": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuchar fcn.140060aa8(int64_t *arg1)\n\n{\n    uchar uVar1;\n    \n    if (*(arg1 + 0xf) == '\\0') {\n        uVar1 = (**(*arg1 + 0xc0))();\n        *(arg1 + 0xf) = 1;\n        *(arg1 + 0x79) = uVar1;\n    }\n    return *(arg1 + 0x79);\n}\n",
        "token_count": 97
    },
    "14006123": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.14006123c(code **arg1)\n\n{\n    int64_t iVar1;\n    uchar auStack616 [56];\n    code **ppcStack560;\n    ulong uStack544;\n    uint64_t uStack24;\n    \n    uStack544 = 0xfffffffffffffffe;\n    uStack24 = *0x1400d96f0 ^ auStack616;\n    *arg1 = vtable.COleObjectFactory.0;\n    ppcStack560 = arg1;\n    if (arg1[7] != NULL) {\n        fcn.140060a18(arg1);\n        iVar1 = fcn.140017ad4();\n        fcn.1400240f0(0);\n        fcn.140022df4(iVar1 + 0x40, arg1);\n        fcn.140024184(0);\n    }\n    fcn.140005fb8(arg1);\n    fcn.140069870(uStack24 ^ auStack616);\n    return;\n}\n",
        "token_count": 215
    },
    "14006155": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140061558(int64_t arg1)\n\n{\n    int64_t iVar1;\n    uint32_t uVar2;\n    \n    if (*(arg1 + 0x40) != 0) {\n        uVar2 = 0;\n        if (*(arg1 + 0x4c) != 0) {\n            iVar1 = 0;\n            do {\n                (*_sym.imp.ole32.dll_CoTaskMemFree)(*(iVar1 + 8 + *(arg1 + 0x40)));\n                (*_sym.imp.ole32.dll_ReleaseStgMedium)(uVar2 * 0x40 + 0x20 + *(arg1 + 0x40));\n                uVar2 = uVar2 + 1;\n                iVar1 = iVar1 + 0x40;\n            } while (uVar2 < *(arg1 + 0x4c));\n        }\n        fcn.1400036d8(*(arg1 + 0x40));\n        *(arg1 + 0x40) = 0;\n        *(arg1 + 0x48) = 0;\n        *(arg1 + 0x4c) = 0;\n    }\n    return;\n}\n",
        "token_count": 261
    },
    "1400615d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nint16_t * fcn.1400615d0(int64_t arg1, int16_t *arg2, ulong arg3)\n\n{\n    int16_t *piVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint32_t *arg2_00;\n    uint32_t *arg1_00;\n    int32_t iVar4;\n    int64_t iVar5;\n    uint32_t uVar6;\n    int16_t *piVar7;\n    bool bVar8;\n    \n    uVar6 = 0;\n    piVar7 = NULL;\n    if (*(arg1 + 0x4c) != 0) {\n        iVar5 = 0;\n        do {\n            piVar1 = iVar5 + *(arg1 + 0x40);\n            if ((*piVar1 == *arg2) && ((*(arg2 + 0xc) & *(piVar1 + 0xc)) != 0)) {\n                iVar4 = *(piVar1 + 8);\n                if ((iVar4 != 2) && ((iVar4 != 4 && (*(piVar1 + 0x10) != 0)))) {\n                    iVar2 = *(piVar1 + 10);\n                    iVar3 = *(arg2 + 10);\n                    if ((iVar2 != iVar3) && (((iVar2 != 0 || (iVar3 != -1)) && ((iVar2 != -1 || (iVar3 != 0))))))\n                    goto code_r0x000140061683;\n                }\n                if ((iVar4 == *(arg2 + 8)) && (*(piVar1 + 0x1c) == arg3)) {\n                    arg2_00 = *(arg2 + 4);\n                    arg1_00 = *(piVar1 + 4);\n                    piVar7 = piVar1;\n                    if (arg1_00 == NULL) {\n                        bVar8 = arg2_00 == NULL;\n                    }\n                    else {\n                        if ((arg2_00 == NULL) || (*arg1_00 != *arg2_00)) goto code_r0x000140061683;\n                        iVar4 = fcn.14006af20(arg1_00, arg2_00, *arg1_00);\n                        bVar8 = iVar4 == 0;\n                    }\n                    if (bVar8) {\n                        return piVar1;\n                    }\n                }\n            }\ncode_r0x000140061683:\n            uVar6 = uVar6 + 1;\n            iVar5 = iVar5 + 0x40;\n        } while (uVar6 < *(arg1 + 0x4c));\n    }\n    return piVar7;\n}\n",
        "token_count": 574
    },
    "1400619e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint64_t fcn.1400619e0(int64_t arg1, ulong arg2, ulong arg3)\n\n{\n    code *pcVar1;\n    uchar auVar2 [16];\n    int32_t iVar3;\n    int64_t iVar4;\n    ulong uVar5;\n    \n    iVar4 = fcn.1400615d0(arg1, arg2, arg3);\n    if (iVar4 == 0) {\n        if ((*(arg1 + 0x40) == 0) || (*(arg1 + 0x4c) == *(arg1 + 0x48))) {\n            auVar2 = ZEXT816(0x40) * ZEXT416(*(arg1 + 0x48) + *(arg1 + 0x50));\n            uVar5 = SUB168(auVar2, 0);\n            if (SUB168(auVar2 >> 0x40, 0) != 0) {\n                uVar5 = 0xffffffffffffffff;\n            }\n            uVar5 = fcn.140003694(uVar5);\n            *(arg1 + 0x48) = *(arg1 + 0x48) + *(arg1 + 0x50);\n            if (*(arg1 + 0x40) != 0) {\n                iVar3 = fcn.140069a48(uVar5, *(arg1 + 0x50) + *(arg1 + 0x48) << 6, *(arg1 + 0x40), *(arg1 + 0x4c) << 6);\n                if (iVar3 != 0) {\n                    if (iVar3 == 0xc) {\n                        fcn.140020738();\n                        pcVar1 = swi(3);\n                        iVar4 = (*pcVar1)();\n                        return iVar4;\n                    }\n                    if ((iVar3 == 0x16) || (iVar3 == 0x22)) {\n                        fcn.140020780();\n                        pcVar1 = swi(3);\n                        iVar4 = (*pcVar1)();\n                        return iVar4;\n                    }\n                    if (iVar3 != 0x50) {\n                        fcn.140020780();\n                        pcVar1 = swi(3);\n                        iVar4 = (*pcVar1)();\n                        return iVar4;\n                    }\n                }\n                fcn.1400036d8(*(arg1 + 0x40));\n            }\n            *(arg1 + 0x40) = uVar5;\n        }\n        iVar4 = *(arg1 + 0x4c) * 0x40 + *(arg1 + 0x40);\n        *(arg1 + 0x4c) = *(arg1 + 0x4c) + 1;\n    }\n    else {\n        (*_sym.imp.ole32.dll_CoTaskMemFree)(*(iVar4 + 8));\n        (*_sym.imp.ole32.dll_ReleaseStgMedium)(iVar4 + 0x20);\n    }\n    *(iVar4 + 0x38) = arg3;\n    fcn.14006b210(iVar4, arg2, 0x20);\n    return iVar4;\n}\n",
        "token_count": 682
    },
    "1400623a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.1400623a0(int64_t arg1)\n\n{\n    if (*(arg1 + 0x40) != 0) {\n        (*_sym.imp.ole32.dll_CoRegisterMessageFilter)(0, 0);\n        *(arg1 + 0x40) = 0;\n    }\n    return;\n}\n",
        "token_count": 73
    },
    "14006323": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint64_t fcn.140063234(int64_t arg1, int64_t arg2, uint32_t *arg3, uint32_t *arg4)\n\n{\n    uint16_t uVar1;\n    uint16_t *puVar2;\n    code *pcVar3;\n    int32_t iVar4;\n    int64_t iVar5;\n    uint64_t uVar6;\n    uint64_t *puVar7;\n    uint32_t uVar8;\n    uint32_t uVar9;\n    uint32_t auStackX8 [2];\n    ulong uStack56;\n    int64_t iStack48;\n    \n    if ((*(arg1 + 0x20) & 1) == 0) {\n        fcn.1400384a8(1, *(arg1 + 0x18));\n        pcVar3 = swi(3);\n        iVar5 = (*pcVar3)();\n        return iVar5;\n    }\n    if ((arg2 != 0) && (*(arg2 + 0xc) == 0xffff)) {\n        fcn.14002075c();\n        pcVar3 = swi(3);\n        iVar5 = (*pcVar3)();\n        return iVar5;\n    }\n    fcn.140062ef8(arg1, 0);\n    if ((*(arg1 + 0x20) & 1) == 0) {\n        fcn.1400384a8(4, *(arg1 + 0x18));\n        pcVar3 = swi(3);\n        iVar5 = (*pcVar3)();\n        return iVar5;\n    }\n    uVar6 = *(arg1 + 0x38) + 2;\n    if (*(arg1 + 0x40) <= uVar6 && uVar6 != *(arg1 + 0x40)) {\n        fcn.140038830(arg1, (*(arg1 + 0x38) - *(arg1 + 0x40)) + 2);\n    }\n    puVar2 = *(arg1 + 0x38);\n    uVar1 = *puVar2;\n    *(arg1 + 0x38) = puVar2 + 1;\n    if (uVar1 == 0x7fff) {\n        if ((*(arg1 + 0x20) & 1) == 0) {\n            fcn.1400384a8(4, *(arg1 + 0x18));\n            pcVar3 = swi(3);\n            iVar5 = (*pcVar3)();\n            return iVar5;\n        }\n        if (*(arg1 + 0x40) <= puVar2 + 3 && puVar2 + 3 != *(arg1 + 0x40)) {\n            fcn.140038830(arg1, (*(arg1 + 0x38) - *(arg1 + 0x40)) + 4);\n        }\n        uVar9 = **(arg1 + 0x38);\n        *(arg1 + 0x38) = *(arg1 + 0x38) + 1;\n    }\n    else {\n        uVar9 = (uVar1 & 0x8000) << 0x10 | uVar1 & 0xffff7fff;\n    }\n    if (uVar9 < 0) {\n        if (uVar1 == 0xffff) {\n            iVar5 = fcn.1400391b0(arg1, auStackX8);\n            if (iVar5 == 0) {\n                fcn.1400384a8(6, *(arg1 + 0x18));\n                pcVar3 = swi(3);\n                iVar5 = (*pcVar3)();\n                return iVar5;\n            }\n            if ((*(iVar5 + 0xc) & 0x7fffffff) != auStackX8[0]) {\n                if (-1 < *(iVar5 + 0xc)) {\n                    fcn.1400384a8(7, *(arg1 + 0x18));\n                    pcVar3 = swi(3);\n                    iVar5 = (*pcVar3)();\n                    return iVar5;\n                }\n                fcn.140062ddc(arg1, 0);\n                uVar6 = auStackX8[0];\n                puVar7 = fcn.14003a6a4(*(arg1 + 0x60), iVar5);\n                *puVar7 = uVar6;\n            }\n            fcn.14006291c(arg1);\n            fcn.1400674bc(*(arg1 + 0x58), *(arg1 + 0x50), iVar5, 1);\n            iStack48 = 0;\n            fcn.14003a4a4(*(arg1 + 0x60), 1, &iStack48);\n            if (iStack48 == 0) {\n                fcn.140020780();\n                pcVar3 = swi(3);\n                iVar5 = (*pcVar3)();\n                return iVar5;\n            }\n            uStack56 = CONCAT44(uStack56._4_4_, 1);\n            fcn.140062b8c(iStack48, *(arg1 + 0x50), &uStack56, 1);\n            *(arg1 + 0x50) = *(arg1 + 0x50) + 1;\n        }\n        else {\n            uVar8 = uVar9 & 0x7fffffff;\n            if ((uVar8 == 0) || (*(*(arg1 + 0x58) + 0x10) - 1U < uVar8)) {\n                fcn.1400384a8(5, *(arg1 + 0x18));\n                pcVar3 = swi(3);\n                iVar5 = (*pcVar3)();\n                return iVar5;\n            }\n            uStack56 = 0;\n            fcn.14003a4a4(*(arg1 + 0x60), 1, &uStack56);\n            if (uStack56 == 0) {\n                fcn.140020780();\n                pcVar3 = swi(3);\n                iVar5 = (*pcVar3)();\n                return iVar5;\n            }\n            if (*(uStack56 + 0x10) <= uVar8) {\n                fcn.140020780();\n                pcVar3 = swi(3);\n                iVar5 = (*pcVar3)();\n                return iVar5;\n            }\n            if (*(*(uStack56 + 8) + uVar8 * 4) == 2) {\n                fcn.1400384a8(5, *(arg1 + 0x18));\n                pcVar3 = swi(3);\n                iVar5 = (*pcVar3)();\n                return iVar5;\n            }\n            if (*(*(arg1 + 0x58) + 0x10) <= uVar8) {\n                fcn.140020780();\n                pcVar3 = swi(3);\n                iVar5 = (*pcVar3)();\n                return iVar5;\n            }\n            iVar5 = *(*(*(arg1 + 0x58) + 8) + uVar8 * 8);\n            auStackX8[0] = 0;\n            if ((*(arg1 + 0x60) == 0) || (iVar4 = fcn.14003a4a4(*(arg1 + 0x60), iVar5, &uStack56),  iVar4 == 0)) {\n                auStackX8[0] = *(iVar5 + 0xc) & 0x7fffffff;\n            }\n            else {\n                auStackX8[0] = uStack56;\n            }\n        }\n        if ((arg2 != 0) && (iVar4 = fcn.140020b28(iVar5, arg2),  iVar4 == 0)) {\n            fcn.1400384a8(6, *(arg1 + 0x18));\n            pcVar3 = swi(3);\n            iVar5 = (*pcVar3)();\n            return iVar5;\n        }\n        if (arg3 == NULL) {\n            *(arg1 + 0x14) = auStackX8[0];\n        }\n        else {\n            *arg3 = auStackX8[0];\n        }\n        if (arg4 != NULL) {\n            *arg4 = uVar9;\n        }\n    }\n    else {\n        if (arg4 == NULL) {\n            fcn.1400384a8(5, *(arg1 + 0x18));\n            pcVar3 = swi(3);\n            iVar5 = (*pcVar3)();\n            return iVar5;\n        }\n        *arg4 = uVar9;\n        iVar5 = 0;\n    }\n    return iVar5;\n}\n",
        "token_count": 1894
    },
    "1400648e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.1400648e0(int64_t arg1, ulong arg2)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    uint uStack88;\n    uint uStack84;\n    ulong uStack80;\n    ulong uStack72;\n    \n    iVar1 = fcn.140017b90();\n    iVar2 = *(iVar1 + 0x78);\n    if (arg2 == 0) {\n        if ((*(arg1 + 0x78) & 1) != 0) {\n            if (*(iVar1 + 0x80) == arg1) {\n                fcn.14000da6c(1);\n            }\n            if ((iVar2 != 0) && (*(iVar2 + 0x40) != 0)) {\n                fcn.1400698a0(&uStack88, 0, 0x48);\n                uStack80 = *(arg1 + 0x40);\n                uStack88 = 0x40;\n                uStack84 = 1;\n                uStack72 = uStack80;\n                (*_sym.imp.USER32.dll_SendMessageA)(*(iVar2 + 0x40), 0x405, 0, &uStack88);\n            }\n            *(arg1 + 0x78) = *(arg1 + 0x78) & 0xfffffffe;\n        }\n    }\n    else if ((*(arg1 + 0x78) & 1) == 0) {\n        iVar2 = fcn.140017ad4();\n        *(iVar2 + 0x60) = 0x1400646b0;\n        *(arg1 + 0x78) = *(arg1 + 0x78) | 1;\n    }\n    return 1;\n}\n",
        "token_count": 385
    },
    "140065dd": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t fcn.140065ddc(int64_t arg1)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint uStack24;\n    uint uStack20;\n    uint uStack16;\n    uint uStack12;\n    \n    iVar1 = 0;\n    uVar4 = *(arg1 + 0x88) & 0xa000;\n    if (*(arg1 + 0x8c) != 0) {\n        uVar4 = uVar4 == 0;\n    }\n    if ((uVar4 == 0) || ((*(arg1 + 0x80) & 0xa000) == 0)) {\n        if ((*(arg1 + 0x80) & 0x5000) == 0) goto code_r0x000140065e59;\n        uStack24 = *(arg1 + 0x3c);\n        uStack20 = *(arg1 + 0x40);\n        uStack16 = *(arg1 + 0x44);\n        uStack12 = *(arg1 + 0x48);\n        uVar4 = *(arg1 + 0x80) & 0xffff5fff;\n    }\n    else {\n        uStack24 = *(arg1 + 0x2c);\n        uStack20 = *(arg1 + 0x30);\n        uStack16 = *(arg1 + 0x34);\n        uStack12 = *(arg1 + 0x38);\n        uVar4 = *(arg1 + 0x80) & 0xffffafff;\n    }\n    iVar1 = fcn.140068ad0(*(arg1 + 0x78), &uStack24, uVar4, 0);\ncode_r0x000140065e59:\n    if ((*(arg1 + 0x8c) == 0) && (iVar1 == 0)) {\n        if ((*(arg1 + 0x80) & 0xa000) != 0) {\n            uStack24 = *(arg1 + 0x3c);\n            uStack20 = *(arg1 + 0x40);\n            uStack16 = *(arg1 + 0x44);\n            uStack12 = *(arg1 + 0x48);\n            iVar2 = fcn.140068ad0(*(arg1 + 0x78), &uStack24, *(arg1 + 0x80) & 0xffffafff, 0);\n            uStack24 = *(arg1 + 0x2c);\n            uStack20 = *(arg1 + 0x30);\n            uStack16 = *(arg1 + 0x34);\n            uStack12 = *(arg1 + 0x38);\n            iVar3 = fcn.140068ad0(*(arg1 + 0x78), &uStack24, *(arg1 + 0x80) & 0xffffafff, 0);\n            iVar1 = 0;\n            if (iVar3 == iVar2) {\n                iVar1 = iVar3;\n            }\n            if (iVar1 != 0) {\n                return iVar1;\n            }\n        }\n        if ((*(arg1 + 0x80) & 0x5000) != 0) {\n            uStack24 = *(arg1 + 0x2c);\n            uStack20 = *(arg1 + 0x30);\n            uStack16 = *(arg1 + 0x34);\n            uStack12 = *(arg1 + 0x38);\n            iVar2 = fcn.140068ad0(*(arg1 + 0x78), &uStack24, *(arg1 + 0x80) & 0xffff5fff, 0);\n            uStack24 = *(arg1 + 0x3c);\n            uStack20 = *(arg1 + 0x40);\n            uStack16 = *(arg1 + 0x44);\n            uStack12 = *(arg1 + 0x48);\n            iVar3 = fcn.140068ad0(*(arg1 + 0x78), &uStack24, *(arg1 + 0x80) & 0xffff5fff, 0);\n            iVar1 = 0;\n            if (iVar3 == iVar2) {\n                iVar1 = iVar3;\n            }\n        }\n    }\n    return iVar1;\n}\n",
        "token_count": 959
    },
    "1400667b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.1400667bc(int64_t arg1)\n\n{\n    int32_t iVar1;\n    ulong uVar2;\n    ulong *puVar3;\n    uint32_t uVar4;\n    ulong uStack24;\n    ulong uStack16;\n    \n    fcn.140066758(arg1);\n    if (*(arg1 + 0x84) == 0) {\n        uVar4 = *(arg1 + 0x88);\n        if ((((uVar4 & 4) == 0) && (((uVar4 & 0xa000) == 0 || (*(arg1 + 0x8c) != 0)))) &&\n           (((uVar4 & 0x5000) == 0 || (*(arg1 + 0x8c) == 0)))) {\n            uVar2 = *(arg1 + 0x5c);\n            uVar4 = *(arg1 + 0x80) & 0x40 | 0x1000;\n        }\n        else {\n            uVar2 = *(arg1 + 0x4c);\n            uVar4 = *(arg1 + 0x80) & 0x40 | 0x2000;\n        }\n        *(arg1 + 0xbc) = uVar4;\n        *(arg1 + 0xc0) = uVar2;\n        fcn.140068920(*(arg1 + 0x78), *(arg1 + 0x70), uVar2, uVar4);\n    }\n    else {\n        uVar2 = fcn.140065f48(arg1, *(arg1 + 0x84));\n        puVar3 = arg1 + 0x2c;\n        if ((*(arg1 + 0x84) & 0x5000) != 0) {\n            puVar3 = arg1 + 0x3c;\n        }\n        uStack24 = *puVar3;\n        uStack16 = puVar3[1];\n        iVar1 = (*_sym.imp.USER32.dll_GetDlgCtrlID)(uStack24);\n        if (iVar1 - 0xe81bU < 4) {\n            *(arg1 + 0xa8) = iVar1;\n            *(arg1 + 0xac) = uStack24;\n            *(arg1 + 0xb0) = uStack24._4_4_;\n            *(arg1 + 0xb4) = uStack16;\n            *(arg1 + 0xb8) = uStack16._4_4_;\n            fcn.14001b798(uVar2, arg1 + 0xac);\n        }\n        fcn.1400686bc(*(arg1 + 0x78), *(arg1 + 0x70), uVar2, &uStack24);\n        (**(**(arg1 + 0x78) + 0x2a0))(*(arg1 + 0x78), 1);\n    }\n    return;\n}\n",
        "token_count": 649
    },
    "14006892": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140068920(ulong arg1, int64_t arg2, uint64_t arg3, uint64_t arg4)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    ulong arg1_00;\n    int64_t *hWnd;\n    int64_t iVar4;\n    uint64_t arg2_00;\n    \n    arg2_00 = arg4 & 0xffffffff;\n    if (arg2 == 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    uVar3 = arg2_00;\n    if ((((*(arg2 + 0xf0) == 0) || (iVar4 = *(arg2 + 0xf8),  iVar4 == 0)) || (*(iVar4 + 0x108) == 0)) ||\n       ((iVar2 = fcn.14005e220(iVar4),  iVar2 != 1 || ((*(iVar4 + 0xe4) & uVar3 & 0xf000) == 0)))) {\n        if (((*(arg2 + 0xe4) & 4) != 0) && (arg2_00 = uVar3 | 4,  (arg4 & 0x5000) != 0)) {\n            arg2_00 = uVar3 & 0xffff2fff | 0x2004;\n        }\n        hWnd = fcn.140068660(arg1, arg2_00);\n        if (hWnd == NULL) {\n            fcn.140020780();\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        fcn.140015950(hWnd, 0, arg3 & 0xffffffff, arg3 >> 0x20);\n        if (hWnd[0xe] == 0) {\n            hWnd[0xe] = *(arg2 + 0x40);\n        }\n        iVar4 = fcn.1400150a4(hWnd, 0xe81f);\n        if (iVar4 == 0) {\n            fcn.140020780();\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        fcn.14005edc0(iVar4, arg2, 0);\n        (**(*hWnd + 0x2a0))(hWnd, 1);\n        uVar3 = (*_sym.imp.USER32.dll_GetWindowLongA)(*(arg2 + 0x40), 0xfffffff0);\n        if ((uVar3 >> 0x1c & 1) == 0) {\n            return;\n        }\n        fcn.14001546c(hWnd, 8);\n    }\n    else {\n        arg1_00 = (*_sym.imp.USER32.dll_GetParent)(*(iVar4 + 0x40));\n        hWnd = fcn.14000fc08(arg1_00);\n        if (hWnd == NULL) {\n            fcn.140020780();\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        fcn.140015950(hWnd, 0, arg3 & 0xffffffff, arg3 >> 0x20);\n        (**(*hWnd + 0x2a0))(hWnd, 1);\n    }\n    (*_sym.imp.USER32.dll_UpdateWindow)(hWnd[8]);\n    return;\n}\n",
        "token_count": 755
    },
    "14006693": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nulong fcn.140066938(int64_t arg1)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    ulong uVar3;\n    uchar auStack56 [8];\n    int32_t iStack48;\n    uint32_t uStack40;\n    uint uStack36;\n    ulong uStack20;\n    \n    iVar2 = (*_sym.imp.USER32.dll_GetCapture)();\n    if (iVar2 == 0) {\n        uVar3 = (*_sym.imp.USER32.dll_SetCapture)(*(*(arg1 + 0x70) + 0x40));\n        fcn.14000fc08(uVar3);\n        do {\n            while( true ) {\n                uVar3 = (*_sym.imp.USER32.dll_GetCapture)();\n                iVar2 = fcn.14000fc08(uVar3);\n                if (iVar2 != *(arg1 + 0x70)) goto code_r0x000140066a65;\n                iVar1 = (*_sym.imp.USER32.dll_GetMessageA)();\n                if (iVar1 == 0) {\n                    fcn.140003c34(uStack40);\n                    goto code_r0x000140066a65;\n                }\n                if (iStack48 == 0x100) break;\n                if (iStack48 == 0x101) {\n                    if (*(arg1 + 0xa0) != 0) {\n                        fcn.140066530(arg1, uStack40, 0);\n                    }\n                }\n                else if (iStack48 == 0x200) {\n                    if (*(arg1 + 0xa0) == 0) {\n                        fcn.140066580(arg1, uStack20);\n                    }\n                    else {\n                        fcn.14006647c(arg1, uStack20);\n                    }\n                }\n                else {\n                    if (iStack48 == 0x202) {\n                        if (*(arg1 + 0xa0) == 0) {\n                            fcn.1400668e0(arg1);\n                        }\n                        else {\n                            fcn.1400667bc(arg1);\n                        }\n                        return 1;\n                    }\n                    if (iStack48 == 0x204) goto code_r0x000140066a65;\n                    (*_sym.imp.USER32.dll_DispatchMessageA)(auStack56);\n                }\n            }\n            if (*(arg1 + 0xa0) != 0) {\n                fcn.140066530(arg1, uStack40, 1);\n            }\n        } while (CONCAT44(uStack36, uStack40) != 0x1b);\ncode_r0x000140066a65:\n        fcn.140066758(arg1);\n    }\n    return 0;\n}\n",
        "token_count": 584
    },
    "1400678b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.1400678b0(int64_t *arg1, ulong noname_1, ulong pv)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int64_t *piVar3;\n    code *pcVar4;\n    int64_t iVar5;\n    \n    if (arg1[4] != 0) {\n        (**(*arg1 + 0x90))();\n        fcn.14003a77c(arg1 + 4);\n    }\n    arg1 = arg1 + 5;\n    iVar5 = *arg1;\n    piVar3 = *(iVar5 + -0x18);\n    if (*(iVar5 + -0x10) != 0) {\n        if (*(iVar5 + -8) < 0) {\n            if (*(iVar5 + -0xc) < 0) {\n                fcn.1400031e0(0x80070057);\n                pcVar4 = swi(3);\n                (*pcVar4)();\n                return;\n            }\n            *(iVar5 + -0x10) = 0;\n            **arg1 = 0;\n        }\n        else {\n            LOCK();\n            piVar1 = iVar5 + -8;\n            iVar2 = *piVar1;\n            *piVar1 = *piVar1 + -1;\n            if (iVar2 + -1 < 1) {\n                (**(**(iVar5 + -0x18) + 8))();\n            }\n            iVar5 = (**(*piVar3 + 0x18))(piVar3);\n            *arg1 = iVar5 + 0x18;\n        }\n    }\n    return;\n}\n",
        "token_count": 359
    },
    "14006791": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140067918(code **arg1)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    ulong in_RDX;\n    int64_t **arg2;\n    ulong in_R8;\n    uchar auStack616 [56];\n    code **ppcStack560;\n    ulong uStack544;\n    uint64_t uStack24;\n    \n    uStack544 = 0xfffffffffffffffe;\n    uStack24 = *0x1400d96f0 ^ auStack616;\n    *arg1 = vtable.COleStreamFile.0;\n    ppcStack560 = arg1;\n    if ((arg1[4] != NULL) && (*(arg1 + 2) != 0)) {\n        fcn.1400678b0(arg1, in_RDX, in_R8);\n    }\n    arg2 = arg1[5] + -0x18;\n    LOCK();\n    piVar1 = arg1[5] + -8;\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 + -1 < 1) {\n        (**(**arg2 + 8))();\n    }\n    fcn.140028cf0(arg1, arg2);\n    fcn.140069870(uStack24 ^ auStack616);\n    return;\n}\n",
        "token_count": 293
    },
    "14006820": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.14006820c(code **arg1, ulong arg2)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    code *pcVar3;\n    uchar auStack616 [56];\n    code **ppcStack560;\n    ulong uStack544;\n    ulong uStack64;\n    uint64_t uStack24;\n    \n    uStack24 = 0xfffffffffffffffe;\n    *arg1 = vtable.CSharedFile.0;\n    if (arg1[8] != NULL) {\n        uStack64 = 0x140068238;\n        fcn.14003a0e4(arg1);\n    }\n    uStack24 = 0xfffffffffffffffe;\n    *arg1 = vtable.CMemFile.0;\n    if (arg1[8] != NULL) {\n        uStack64 = 0x14003a2a0;\n        fcn.14003a0e4(arg1);\n    }\n    arg1[4] = NULL;\n    arg1[5] = NULL;\n    arg1[6] = NULL;\n    arg1[7] = NULL;\n    uStack544 = 0xfffffffffffffffe;\n    uStack24 = *0x1400d96f0 ^ &stack0xfffffffffffffd98;\n    *arg1 = vtable.CFile.0;\n    ppcStack560 = arg1;\n    if ((arg1[1] != 0xffffffffffffffff) && (*(arg1 + 2) != 0)) {\n        fcn.140028850(arg1, arg2);\n    }\n    pcVar3 = arg1[3];\n    LOCK();\n    piVar1 = pcVar3 + -8;\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 + -1 < 1) {\n        (**(**(pcVar3 + -0x18) + 8))();\n    }\n    fcn.140069870(uStack24 ^ &stack0xfffffffffffffd98);\n    return;\n}\n",
        "token_count": 445
    },
    "140068ad": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint32_t fcn.140068ad0(int64_t arg1, ulong arg2, ulong arg3, int64_t **arg4)\n\n{\n    ulong *puVar1;\n    int64_t *piVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    ulong *puVar5;\n    int32_t iStack24;\n    int32_t iStack20;\n    int32_t iStack16;\n    int32_t iStack12;\n    \n    if (arg4 != NULL) {\n        *arg4 = NULL;\n    }\n    puVar5 = *(arg1 + 0xf0);\n    do {\n        do {\n            if (puVar5 == NULL) {\n                return 0;\n            }\n            puVar1 = *puVar5;\n            piVar2 = puVar5[2];\n            iVar3 = (**(*piVar2 + 0x2e0))(piVar2);\n            puVar5 = puVar1;\n        } while ((((iVar3 == 0) || (iVar3 = (*_sym.imp.USER32.dll_IsWindowVisible)(piVar2[8]),  iVar3 == 0)) ||\n                 (uVar4 = *(piVar2 + 0xe4) & arg3 & 0xf040,  (uVar4 & 0xf000) == 0)) ||\n                ((*(piVar2 + 0x21) != 0 && (uVar4 == '\\0'))));\n        (*_sym.imp.USER32.dll_GetWindowRect)(piVar2[8], &iStack24);\n        if (iStack16 == iStack24) {\n            iStack16 = iStack16 + 1;\n        }\n        if (iStack12 == iStack20) {\n            iStack12 = iStack12 + 1;\n        }\n        iVar3 = (*_sym.imp.USER32.dll_IntersectRect)(&iStack24, &iStack24, arg2);\n    } while (iVar3 == 0);\n    if (arg4 != NULL) {\n        *arg4 = piVar2;\n    }\n    return *(piVar2 + 0xe4) & arg3 & 0xf040;\n}\n",
        "token_count": 471
    },
    "14006a2a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00014006a25d)\n// WARNING: Removing unreachable block (ram,0x00014006a292)\n\nvoid fcn.14006a2ac(ulong arg1)\n\n{\n    int64_t *piVar1;\n    int64_t *piVar2;\n    int64_t iVar3;\n    code *pcVar4;\n    int64_t *piVar5;\n    int64_t *piVar6;\n    int64_t *piVar7;\n    int64_t *piVar8;\n    \n    fcn.1400721c8(8);\n    if (*0x1400decc8 != 1) {\n        *0x1400decc4 = 1;\n        *0x1400decc0 = 0;\n        piVar1 = sub.KERNEL32.dll_DecodePointer(*0x1400e0e30);\n        if (piVar1 != NULL) {\n            piVar2 = sub.KERNEL32.dll_DecodePointer(*0x1400e0e28);\n            piVar7 = piVar2;\n            piVar8 = piVar1;\ncode_r0x00014006a1b6:\n            piVar2 = piVar2 + -1;\n            if (piVar1 <= piVar2) goto code_r0x00014006a1c4;\n            goto code_r0x00014006a1d0;\n        }\ncode_r0x00014006a231:\n        fcn.140069f70(0x1400a0268, 0x1400a0280);\n        fcn.140069f70(0x1400a0288, 0x1400a0290);\n    }\n    *0x1400decc8 = 1;\n    fcn.1400720a8(8);\n    fcn.140069f04(arg1);\n    (*_sym.imp.KERNEL32.dll_ExitProcess)(arg1);\n    pcVar4 = swi(3);\n    (*pcVar4)();\n    return;\ncode_r0x00014006a1c4:\n    iVar3 = fcn.14006e8e0();\n    if (*piVar2 != iVar3) {\ncode_r0x00014006a1d0:\n        if (piVar1 <= piVar2) {\n            pcVar4 = sub.KERNEL32.dll_DecodePointer(*piVar2);\n            iVar3 = fcn.14006e8e0();\n            *piVar2 = iVar3;\n            (*pcVar4)();\n            piVar5 = sub.KERNEL32.dll_DecodePointer(*0x1400e0e30);\n            piVar6 = sub.KERNEL32.dll_DecodePointer(*0x1400e0e28);\n            if ((piVar8 != piVar5) || (piVar7 != piVar6)) {\n                piVar1 = piVar5;\n                piVar2 = piVar6;\n                piVar7 = piVar6;\n                piVar8 = piVar5;\n            }\n            goto code_r0x00014006a1b6;\n        }\n        goto code_r0x00014006a231;\n    }\n    goto code_r0x00014006a1b6;\n}\n",
        "token_count": 705
    },
    "14006dd5": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00014006dd08)\n\nint64_t fcn.14006dd54(int32_t *arg1)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    int64_t iVar5;\n    int64_t iVar6;\n    int64_t iVar7;\n    int64_t iVar8;\n    int32_t aiStackX8 [4];\n    int32_t aiStackX24 [2];\n    int64_t iStackX32;\n    uchar auStack72 [32];\n    int32_t iStack40;\n    \n    aiStackX24[0] = 0;\n    aiStackX8[0] = 0;\n    if (arg1 == NULL) {\n        puVar2 = fcn.14006abb0();\n        *puVar2 = 0x16;\n        fcn.140070df0(0, 0, 0, 0);\n        return -1;\n    }\n    iStackX32 = arg1[5];\n    if (iStackX32 - 0x45U < 0x409) {\n        iVar1 = arg1[4];\n        if ((iVar1 < 0) || (0xb < iVar1)) {\n            iVar3 = iVar1 % 0xc;\n            iStackX32 = iStackX32 + iVar1 / 0xc;\n            arg1[4] = iVar3;\n            if (iVar3 < 0) {\n                iStackX32 = iStackX32 + -1;\n                arg1[4] = iVar3 + 0xc;\n            }\n            if (0x408 < iStackX32 - 0x45U) goto code_r0x00014006dd3b;\n        }\n        iVar8 = *(arg1[4] * 4 + 0x1400da548);\n        uVar4 = iStackX32 >> 0x3f & 3;\n        if (((((iStackX32 + uVar4 & 3) == uVar4) &&\n             (iVar5 = SUB168(SEXT816(-0x5c28f5c28f5c28f5) * SEXT816(iStackX32) >> 0x40, 0) + iStackX32, \n             iStackX32 != ((iVar5 >> 6) - (iVar5 >> 0x3f)) * 100)) ||\n            (iVar5 = iStackX32 + 0x76c, \n            iVar6 = SUB168(SEXT816(-0x5c28f5c28f5c28f5) * SEXT816(iVar5) >> 0x40, 0) + iVar5, \n            iVar5 == ((iVar6 >> 8) - (iVar6 >> 0x3f)) * 400)) && (1 < arg1[4])) {\n            iVar8 = iVar8 + 1;\n        }\n        iVar5 = iStackX32 + -1;\n        iVar6 = iStackX32 + 299 + SUB168(SEXT816(-0x5c28f5c28f5c28f5) * SEXT816(iStackX32 + 299) >> 0x40, 0);\n        iVar7 = SUB168(SEXT816(-0x5c28f5c28f5c28f5) * SEXT816(iVar5) >> 0x40, 0) + iVar5;\n        iStackX32 = *arg1 + (arg1[1] +\n                            (arg1[2] +\n                            (iStackX32 * 0x16d + -0x63df +\n                            (iVar5 + (iVar5 >> 0x3f & 3) >> 2) + iVar8 +\n                            ((((iVar6 >> 8) - (iVar6 >> 0x3f)) + arg1[3]) - ((iVar7 >> 6) - (iVar7 >> 0x3f)))) * 0x18) *\n                            0x3c) * 0x3c;\n        fcn.14007b63c();\n        iVar1 = fcn.14007aa90(aiStackX24);\n        if (iVar1 != 0) {\n            fcn.140070c68(0, 0, 0, 0, 0);\n        }\n        iVar1 = fcn.14007aad0(aiStackX8);\n        if (iVar1 != 0) {\n            fcn.140070c68(0, 0, 0, 0, 0);\n        }\n        iStackX32 = iStackX32 + aiStackX8[0];\n        iVar1 = fcn.14006dd68(auStack72, &iStackX32);\n        if (iVar1 == 0) {\n            if ((0 < arg1[8]) || ((arg1[8] < 0 && (0 < iStack40)))) {\n                iStackX32 = iStackX32 + aiStackX24[0];\n                iVar1 = fcn.14006dd68(auStack72, &iStackX32);\n                if (iVar1 != 0) goto code_r0x00014006dd3b;\n            }\n            fcn.14006b210(arg1, auStack72, 0x24);\n            return iStackX32;\n        }\n    }\ncode_r0x00014006dd3b:\n    puVar2 = fcn.14006abb0();\n    *puVar2 = 0x16;\n    return -1;\n}\n",
        "token_count": 1226
    },
    "14008bb2": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint fcn.14008bb28(uint16_t *arg1, uint8_t *arg2, uint64_t arg3, ulong arg4)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    int64_t aiStack40 [2];\n    int64_t iStack24;\n    char cStack16;\n    \n    if ((arg2 != NULL) && (arg3 != 0)) {\n        if (*arg2 != 0) {\n            fcn.14006b7c8(aiStack40, arg4);\n            if (*(aiStack40[0] + 0x14) != 0) {\n                iVar2 = fcn.140087444(*arg2, aiStack40);\n                if (iVar2 == 0) {\n                    iVar2 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)\n                                      (*(aiStack40[0] + 4), 9, arg2, 1, arg1, arg1 != NULL);\n                    if (iVar2 != 0) goto code_r0x00014008bb98;\n                }\n                else {\n                    iVar2 = *(aiStack40[0] + 0x10c);\n                    if ((((1 < iVar2) && (iVar2 <= arg3)) &&\n                        (iVar2 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)\n                                           (*(aiStack40[0] + 4), 9, arg2, iVar2, arg1, arg1 != NULL),  iVar2 != 0)) ||\n                       ((*(aiStack40[0] + 0x10c) <= arg3 && (arg2[1] != 0)))) {\n                        uVar1 = *(aiStack40[0] + 0x10c);\n                        if (cStack16 == '\\0') {\n                            return uVar1;\n                        }\n                        *(iStack24 + 200) = *(iStack24 + 200) & 0xfffffffd;\n                        return uVar1;\n                    }\n                }\n                puVar3 = fcn.14006abb0();\n                *puVar3 = 0x2a;\n                if (cStack16 != '\\0') {\n                    *(iStack24 + 200) = *(iStack24 + 200) & 0xfffffffd;\n                }\n                return 0xffffffff;\n            }\n            if (arg1 != NULL) {\n                *arg1 = *arg2;\n            }\ncode_r0x00014008bb98:\n            if (cStack16 != '\\0') {\n                *(iStack24 + 200) = *(iStack24 + 200) & 0xfffffffd;\n            }\n            return 1;\n        }\n        if (arg1 != NULL) {\n            *arg1 = 0;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 610
    },
    "14008fb5": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t fcn.14008fb58(ulong arg1)\n\n{\n    int64_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    int64_t iVar6;\n    \n    iVar5 = 0;\n    iVar3 = 0;\n    fcn.1400721c8(1);\n    for (uVar4 = 0; uVar4 < *0x1400e0c00; uVar4 = uVar4 + 1) {\n        iVar6 = uVar4;\n        if ((*(*0x1400dfbf8 + iVar6 * 8) != 0) && (iVar1 = *(*0x1400dfbf8 + iVar6 * 8),  (*(iVar1 + 0x18) & 0x83) != 0))\n        {\n            fcn.14008735c(uVar4, iVar1);\n            iVar1 = *(*0x1400dfbf8 + iVar6 * 8);\n            if ((*(iVar1 + 0x18) & 0x83) != 0) {\n                if (arg1 == 1) {\n                    iVar2 = fcn.14008fb10(iVar1);\n                    if (iVar2 != -1) {\n                        iVar5 = iVar5 + 1;\n                    }\n                }\n                else if (((arg1 == 0) && ((*(iVar1 + 0x18) & 2) != 0)) && (iVar2 = fcn.14008fb10(iVar1),  iVar2 == -1))\n                {\n                    iVar3 = -1;\n                }\n            }\n            fcn.1400873e4(uVar4, *(*0x1400dfbf8 + iVar6 * 8));\n        }\n    }\n    fcn.1400720a8(1);\n    if (arg1 == 1) {\n        iVar3 = iVar5;\n    }\n    return iVar3;\n}\n",
        "token_count": 435
    },
    "1400910f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nuint64_t fcn.1400910fc(uint16_t *arg1, uint32_t *arg2)\n\n{\n    uint16_t uVar1;\n    char cVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint64_t uVar5;\n    int64_t iVar6;\n    uint8_t uVar7;\n    uint32_t *puVar8;\n    uint32_t uVar9;\n    uint64_t uVar10;\n    uint32_t uVar11;\n    int32_t iVar12;\n    int32_t iVar13;\n    int64_t iVar14;\n    uint64_t uVar15;\n    uint64_t uVar16;\n    int32_t iVar17;\n    uint32_t auStack88 [4];\n    uint32_t uStack72;\n    uint32_t uStack68;\n    int32_t iStack64;\n    \n    uVar1 = arg1[5];\n    uVar15 = 0;\n    uVar10 = 1;\n    uVar11 = uVar1 & 0x7fff;\n    iVar12 = uVar11 - 0x3fff;\n    auStack88[0] = *(arg1 + 3);\n    auStack88[1] = *(arg1 + 1);\n    auStack88[2] = *arg1 << 0x10;\n    iVar4 = 0;\n    uVar5 = uVar15;\n    if (iVar12 == -0x3fff) {\n        do {\n            if (auStack88[uVar5] != 0) {\n                auStack88[0] = 0;\n                auStack88[1] = 0;\n                uVar15 = 2;\n                break;\n            }\n            uVar5 = uVar5 + 1;\n        } while (uVar5 < 3);\n    }\n    else {\n        uStack72 = *(arg1 + 3);\n        uStack68 = *(arg1 + 1);\n        iStack64 = *arg1 << 0x10;\n        uVar9 = str.5_v_[0] >> 0x1f & 0x1f;\n        uVar3 = str.5_v_[0] + uVar9;\n        iVar17 = uVar3 >> 5;\n        uVar3 = 0x1f - ((uVar3 & 0x1f) - uVar9);\n        uVar7 = uVar3;\n        if ((auStack88[iVar17] >> (uVar3 & 0x1f) & 1) != 0) {\n            if ((auStack88[iVar17] & ~(-1 << (uVar7 & 0x1f))) == 0) {\n                for (iVar6 = iVar17 + 1; iVar6 < 3; iVar6 = iVar6 + 1) {\n                    if (auStack88[iVar6] != 0) goto code_r0x000140091209;\n                }\n            }\n            else {\ncode_r0x000140091209:\n                uVar3 = str.5_v_[0] + L'\\xffffffff' >> 0x1f & 0x1f;\n                iVar4 = str.5_v_[0] + L'\\xffffffff' + uVar3;\n                iVar13 = iVar4 >> 5;\n                uVar9 = 1 << (0x1f - ((iVar4 & 0x1f) - uVar3) & 0x1f);\n                uVar3 = auStack88[iVar13] + uVar9;\n                if ((uVar3 < auStack88[iVar13]) || (uVar3 < uVar9)) {\n                    uVar5 = 1;\n                }\n                iVar4 = uVar5;\n                auStack88[iVar13] = uVar3;\n                iVar6 = iVar13 + -1;\n                while ((-1 < iVar6 && (iVar4 = uVar5,  iVar4 != 0))) {\n                    uVar3 = auStack88[iVar6] + 1;\n                    if ((uVar3 < auStack88[iVar6]) || (uVar5 = uVar15,  uVar3 == 0)) {\n                        uVar5 = uVar10;\n                    }\n                    iVar4 = uVar5;\n                    auStack88[iVar6] = uVar3;\n                    iVar6 = iVar6 + -1;\n                }\n            }\n        }\n        auStack88[iVar17] = auStack88[iVar17] & -1 << (uVar7 & 0x1f);\n        iVar6 = iVar17 + 1;\n        if (iVar6 < 3) {\n            fcn.1400698a0(auStack88 + iVar6, 0, (3 - iVar6) * 4);\n        }\n        iVar17 = iVar12;\n        if (iVar4 != 0) {\n            iVar17 = uVar11 - 0x3ffe;\n        }\n        if (iVar17 < *0x1400dabdc - str.5_v_[0]) {\n            auStack88[0] = 0;\n            auStack88[1] = 0;\n            uVar15 = 2;\n            iVar4 = 0;\n        }\n        else if (*0x1400dabdc < iVar17) {\n            uVar11 = str.5_v_[1] >> 0x1f & 0x1f;\n            iVar4 = str.5_v_[1] + uVar11;\n            iVar12 = iVar4 >> 5;\n            uVar7 = iVar4;\n            cVar2 = uVar11;\n            if (iVar17 < *0x1400dabd8) {\n                auStack88[0] = auStack88[0] & 0x7fffffff;\n                iVar4 = str.5_v_[3] + iVar17;\n                uVar7 = (uVar7 & 0x1f) - cVar2;\n                uVar5 = uVar15;\n                uVar10 = uVar15;\n                do {\n                    uVar11 = auStack88[uVar5];\n                    auStack88[uVar5] = uVar11 >> (uVar7 & 0x1f) | uVar10;\n                    uVar5 = uVar5 + 1;\n                    uVar10 = (~(-1 << (uVar7 & 0x1f)) & uVar11) << (0x20 - uVar7 & 0x1f);\n                } while (uVar5 < 3);\n                iVar6 = 2;\n                puVar8 = auStack88 + (2 - iVar12);\n                do {\n                    if (iVar6 < iVar12) {\n                        auStack88[iVar6] = 0;\n                    }\n                    else {\n                        auStack88[iVar6] = *puVar8;\n                    }\n                    iVar6 = iVar6 + -1;\n                    puVar8 = puVar8 + -1;\n                } while (-1 < iVar6);\n            }\n            else {\n                uVar7 = (uVar7 & 0x1f) - cVar2;\n                auStack88[0] = 0x80000000;\n                auStack88[1] = 0;\n                auStack88[2] = 0;\n                uVar5 = uVar15;\n                do {\n                    uVar11 = auStack88[uVar15];\n                    auStack88[uVar15] = uVar11 >> (uVar7 & 0x1f) | uVar5;\n                    uVar15 = uVar15 + 1;\n                    uVar5 = (~(-1 << (uVar7 & 0x1f)) & uVar11) << (0x20 - uVar7 & 0x1f);\n                } while (uVar15 < 3);\n                iVar6 = 2;\n                puVar8 = auStack88 + (2 - iVar12);\n                do {\n                    if (iVar6 < iVar12) {\n                        auStack88[iVar6] = 0;\n                    }\n                    else {\n                        auStack88[iVar6] = *puVar8;\n                    }\n                    iVar6 = iVar6 + -1;\n                    puVar8 = puVar8 + -1;\n                } while (-1 < iVar6);\n                iVar4 = str.5_v_[3] + *0x1400dabd8;\n                uVar15 = uVar10;\n            }\n        }\n        else {\n            auStack88[0] = uStack72;\n            auStack88[1] = uStack68;\n            auStack88[2] = iStack64;\n            uVar11 = *0x1400dabdc - iVar12 >> 0x1f & 0x1f;\n            iVar4 = (*0x1400dabdc - iVar12) + uVar11;\n            uVar7 = (iVar4 & 0x1f) - uVar11;\n            uVar5 = uVar15;\n            uVar16 = uVar15;\n            do {\n                uVar11 = auStack88[uVar5];\n                auStack88[uVar5] = uVar11 >> (uVar7 & 0x1f) | uVar16;\n                uVar5 = uVar5 + 1;\n                uVar16 = (uVar11 & ~(-1 << (uVar7 & 0x1f))) << (0x20 - uVar7 & 0x1f);\n            } while (uVar5 < 3);\n            iVar14 = iVar4 >> 5;\n            iVar6 = 2;\n            puVar8 = auStack88 + (2 - iVar14);\n            do {\n                if (iVar6 < iVar14) {\n                    auStack88[iVar6] = 0;\n                }\n                else {\n                    auStack88[iVar6] = *puVar8;\n                }\n                iVar6 = iVar6 + -1;\n                puVar8 = puVar8 + -1;\n            } while (-1 < iVar6);\n            uVar3 = str.5_v_[0] >> 0x1f & 0x1f;\n            uVar11 = str.5_v_[0] + uVar3;\n            iVar4 = uVar11 >> 5;\n            uVar11 = 0x1f - ((uVar11 & 0x1f) - uVar3);\n            uVar7 = uVar11;\n            if ((auStack88[iVar4] >> (uVar11 & 0x1f) & 1) != 0) {\n                if ((auStack88[iVar4] & ~(-1 << (uVar7 & 0x1f))) == 0) {\n                    for (iVar6 = iVar4 + 1; iVar6 < 3; iVar6 = iVar6 + 1) {\n                        if (auStack88[iVar6] != 0) goto code_r0x0001400913f6;\n                    }\n                }\n                else {\ncode_r0x0001400913f6:\n                    uVar11 = str.5_v_[0] + L'\\xffffffff' >> 0x1f & 0x1f;\n                    iVar12 = str.5_v_[0] + L'\\xffffffff' + uVar11;\n                    iVar17 = iVar12 >> 5;\n                    uVar3 = 1 << (0x1f - ((iVar12 & 0x1f) - uVar11) & 0x1f);\n                    uVar11 = auStack88[iVar17] + uVar3;\n                    if ((uVar11 < auStack88[iVar17]) || (uVar5 = uVar15,  uVar11 < uVar3)) {\n                        uVar5 = uVar10;\n                    }\n                    auStack88[iVar17] = uVar11;\n                    iVar6 = iVar17 + -1;\n                    while ((-1 < iVar6 && (uVar5 != 0))) {\n                        uVar11 = auStack88[iVar6] + 1;\n                        if ((uVar11 < auStack88[iVar6]) || (uVar5 = uVar15,  uVar11 == 0)) {\n                            uVar5 = uVar10;\n                        }\n                        auStack88[iVar6] = uVar11;\n                        iVar6 = iVar6 + -1;\n                    }\n                }\n            }\n            auStack88[iVar4] = auStack88[iVar4] & -1 << (uVar7 & 0x1f);\n            iVar6 = iVar4 + 1;\n            if (iVar6 < 3) {\n                fcn.1400698a0(auStack88 + iVar6, 0, (3 - iVar6) * 4);\n            }\n            uVar11 = str.5_v_[1] + L'\\x01' >> 0x1f & 0x1f;\n            iVar4 = str.5_v_[1] + L'\\x01' + uVar11;\n            uVar7 = (iVar4 & 0x1f) - uVar11;\n            uVar5 = uVar15;\n            do {\n                uVar11 = auStack88[uVar15];\n                auStack88[uVar15] = uVar11 >> (uVar7 & 0x1f) | uVar5;\n                uVar15 = uVar15 + 1;\n                uVar5 = (uVar11 & ~(-1 << (uVar7 & 0x1f))) << (0x20 - uVar7 & 0x1f);\n            } while (uVar15 < 3);\n            iVar14 = iVar4 >> 5;\n            iVar6 = 2;\n            puVar8 = auStack88 + (2 - iVar14);\n            do {\n                if (iVar6 < iVar14) {\n                    auStack88[iVar6] = 0;\n                }\n                else {\n                    auStack88[iVar6] = *puVar8;\n                }\n                iVar6 = iVar6 + -1;\n                puVar8 = puVar8 + -1;\n            } while (-1 < iVar6);\n            iVar4 = 0;\n            uVar15 = 2;\n        }\n    }\n    auStack88[0] = iVar4 << (0x1fU - str.5_v_[1] & 0x1f) | -((uVar1 & 0x8000) != 0) & 0x80000000 | auStack88[0];\n    if (str.5_v_[2] == L'@') {\n        arg2[1] = auStack88[0];\n        *arg2 = auStack88[1];\n    }\n    else if (str.5_v_[2] == L' ') {\n        *arg2 = auStack88[0];\n    }\n    return uVar15;\n}\n",
        "token_count": 3202
    },
    "14009170": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nuint64_t fcn.140091700(uint16_t *arg1, uint32_t *arg2)\n\n{\n    uint16_t uVar1;\n    char cVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint64_t uVar5;\n    int64_t iVar6;\n    uint8_t uVar7;\n    uint32_t *puVar8;\n    uint32_t uVar9;\n    uint64_t uVar10;\n    uint32_t uVar11;\n    int32_t iVar12;\n    int32_t iVar13;\n    int64_t iVar14;\n    uint64_t uVar15;\n    uint64_t uVar16;\n    int32_t iVar17;\n    uint32_t auStack88 [4];\n    uint32_t uStack72;\n    uint32_t uStack68;\n    int32_t iStack64;\n    \n    uVar1 = arg1[5];\n    uVar15 = 0;\n    uVar10 = 1;\n    uVar11 = uVar1 & 0x7fff;\n    iVar12 = uVar11 - 0x3fff;\n    auStack88[0] = *(arg1 + 3);\n    auStack88[1] = *(arg1 + 1);\n    auStack88[2] = *arg1 << 0x10;\n    iVar4 = 0;\n    uVar5 = uVar15;\n    if (iVar12 == -0x3fff) {\n        do {\n            if (auStack88[uVar5] != 0) {\n                auStack88[0] = 0;\n                auStack88[1] = 0;\n                uVar15 = 2;\n                break;\n            }\n            uVar5 = uVar5 + 1;\n        } while (uVar5 < 3);\n    }\n    else {\n        uStack72 = *(arg1 + 3);\n        uStack68 = *(arg1 + 1);\n        iStack64 = *arg1 << 0x10;\n        uVar9 = *0x1400dabf8 >> 0x1f & 0x1f;\n        uVar3 = *0x1400dabf8 + uVar9;\n        iVar17 = uVar3 >> 5;\n        uVar3 = 0x1f - ((uVar3 & 0x1f) - uVar9);\n        uVar7 = uVar3;\n        if ((auStack88[iVar17] >> (uVar3 & 0x1f) & 1) != 0) {\n            if ((auStack88[iVar17] & ~(-1 << (uVar7 & 0x1f))) == 0) {\n                for (iVar6 = iVar17 + 1; iVar6 < 3; iVar6 = iVar6 + 1) {\n                    if (auStack88[iVar6] != 0) goto code_r0x00014009180d;\n                }\n            }\n            else {\ncode_r0x00014009180d:\n                uVar3 = *0x1400dabf8 + -1 >> 0x1f & 0x1f;\n                iVar4 = *0x1400dabf8 + -1 + uVar3;\n                iVar13 = iVar4 >> 5;\n                uVar9 = 1 << (0x1f - ((iVar4 & 0x1f) - uVar3) & 0x1f);\n                uVar3 = auStack88[iVar13] + uVar9;\n                if ((uVar3 < auStack88[iVar13]) || (uVar3 < uVar9)) {\n                    uVar5 = 1;\n                }\n                iVar4 = uVar5;\n                auStack88[iVar13] = uVar3;\n                iVar6 = iVar13 + -1;\n                while ((-1 < iVar6 && (iVar4 = uVar5,  iVar4 != 0))) {\n                    uVar3 = auStack88[iVar6] + 1;\n                    if ((uVar3 < auStack88[iVar6]) || (uVar5 = uVar15,  uVar3 == 0)) {\n                        uVar5 = uVar10;\n                    }\n                    iVar4 = uVar5;\n                    auStack88[iVar6] = uVar3;\n                    iVar6 = iVar6 + -1;\n                }\n            }\n        }\n        auStack88[iVar17] = auStack88[iVar17] & -1 << (uVar7 & 0x1f);\n        iVar6 = iVar17 + 1;\n        if (iVar6 < 3) {\n            fcn.1400698a0(auStack88 + iVar6, 0, (3 - iVar6) * 4);\n        }\n        iVar17 = iVar12;\n        if (iVar4 != 0) {\n            iVar17 = uVar11 - 0x3ffe;\n        }\n        if (iVar17 < *0x1400dabf4 - *0x1400dabf8) {\n            auStack88[0] = 0;\n            auStack88[1] = 0;\n            uVar15 = 2;\n            iVar4 = 0;\n        }\n        else if (*0x1400dabf4 < iVar17) {\n            uVar11 = *0x1400dabfc >> 0x1f & 0x1f;\n            iVar4 = *0x1400dabfc + uVar11;\n            iVar12 = iVar4 >> 5;\n            uVar7 = iVar4;\n            cVar2 = uVar11;\n            if (iVar17 < *0x1400dabf0) {\n                auStack88[0] = auStack88[0] & 0x7fffffff;\n                iVar4 = *0x1400dac04 + iVar17;\n                uVar7 = (uVar7 & 0x1f) - cVar2;\n                uVar5 = uVar15;\n                uVar10 = uVar15;\n                do {\n                    uVar11 = auStack88[uVar5];\n                    auStack88[uVar5] = uVar11 >> (uVar7 & 0x1f) | uVar10;\n                    uVar5 = uVar5 + 1;\n                    uVar10 = (~(-1 << (uVar7 & 0x1f)) & uVar11) << (0x20 - uVar7 & 0x1f);\n                } while (uVar5 < 3);\n                iVar6 = 2;\n                puVar8 = auStack88 + (2 - iVar12);\n                do {\n                    if (iVar6 < iVar12) {\n                        auStack88[iVar6] = 0;\n                    }\n                    else {\n                        auStack88[iVar6] = *puVar8;\n                    }\n                    iVar6 = iVar6 + -1;\n                    puVar8 = puVar8 + -1;\n                } while (-1 < iVar6);\n            }\n            else {\n                uVar7 = (uVar7 & 0x1f) - cVar2;\n                auStack88[0] = 0x80000000;\n                auStack88[1] = 0;\n                auStack88[2] = 0;\n                uVar5 = uVar15;\n                do {\n                    uVar11 = auStack88[uVar15];\n                    auStack88[uVar15] = uVar11 >> (uVar7 & 0x1f) | uVar5;\n                    uVar15 = uVar15 + 1;\n                    uVar5 = (~(-1 << (uVar7 & 0x1f)) & uVar11) << (0x20 - uVar7 & 0x1f);\n                } while (uVar15 < 3);\n                iVar6 = 2;\n                puVar8 = auStack88 + (2 - iVar12);\n                do {\n                    if (iVar6 < iVar12) {\n                        auStack88[iVar6] = 0;\n                    }\n                    else {\n                        auStack88[iVar6] = *puVar8;\n                    }\n                    iVar6 = iVar6 + -1;\n                    puVar8 = puVar8 + -1;\n                } while (-1 < iVar6);\n                iVar4 = *0x1400dac04 + *0x1400dabf0;\n                uVar15 = uVar10;\n            }\n        }\n        else {\n            auStack88[0] = uStack72;\n            auStack88[1] = uStack68;\n            auStack88[2] = iStack64;\n            uVar11 = *0x1400dabf4 - iVar12 >> 0x1f & 0x1f;\n            iVar4 = (*0x1400dabf4 - iVar12) + uVar11;\n            uVar7 = (iVar4 & 0x1f) - uVar11;\n            uVar5 = uVar15;\n            uVar16 = uVar15;\n            do {\n                uVar11 = auStack88[uVar5];\n                auStack88[uVar5] = uVar11 >> (uVar7 & 0x1f) | uVar16;\n                uVar5 = uVar5 + 1;\n                uVar16 = (uVar11 & ~(-1 << (uVar7 & 0x1f))) << (0x20 - uVar7 & 0x1f);\n            } while (uVar5 < 3);\n            iVar14 = iVar4 >> 5;\n            iVar6 = 2;\n            puVar8 = auStack88 + (2 - iVar14);\n            do {\n                if (iVar6 < iVar14) {\n                    auStack88[iVar6] = 0;\n                }\n                else {\n                    auStack88[iVar6] = *puVar8;\n                }\n                iVar6 = iVar6 + -1;\n                puVar8 = puVar8 + -1;\n            } while (-1 < iVar6);\n            uVar3 = *0x1400dabf8 >> 0x1f & 0x1f;\n            uVar11 = *0x1400dabf8 + uVar3;\n            iVar4 = uVar11 >> 5;\n            uVar11 = 0x1f - ((uVar11 & 0x1f) - uVar3);\n            uVar7 = uVar11;\n            if ((auStack88[iVar4] >> (uVar11 & 0x1f) & 1) != 0) {\n                if ((auStack88[iVar4] & ~(-1 << (uVar7 & 0x1f))) == 0) {\n                    for (iVar6 = iVar4 + 1; iVar6 < 3; iVar6 = iVar6 + 1) {\n                        if (auStack88[iVar6] != 0) goto code_r0x0001400919fa;\n                    }\n                }\n                else {\ncode_r0x0001400919fa:\n                    uVar11 = *0x1400dabf8 + -1 >> 0x1f & 0x1f;\n                    iVar12 = *0x1400dabf8 + -1 + uVar11;\n                    iVar17 = iVar12 >> 5;\n                    uVar3 = 1 << (0x1f - ((iVar12 & 0x1f) - uVar11) & 0x1f);\n                    uVar11 = auStack88[iVar17] + uVar3;\n                    if ((uVar11 < auStack88[iVar17]) || (uVar5 = uVar15,  uVar11 < uVar3)) {\n                        uVar5 = uVar10;\n                    }\n                    auStack88[iVar17] = uVar11;\n                    iVar6 = iVar17 + -1;\n                    while ((-1 < iVar6 && (uVar5 != 0))) {\n                        uVar11 = auStack88[iVar6] + 1;\n                        if ((uVar11 < auStack88[iVar6]) || (uVar5 = uVar15,  uVar11 == 0)) {\n                            uVar5 = uVar10;\n                        }\n                        auStack88[iVar6] = uVar11;\n                        iVar6 = iVar6 + -1;\n                    }\n                }\n            }\n            auStack88[iVar4] = auStack88[iVar4] & -1 << (uVar7 & 0x1f);\n            iVar6 = iVar4 + 1;\n            if (iVar6 < 3) {\n                fcn.1400698a0(auStack88 + iVar6, 0, (3 - iVar6) * 4);\n            }\n            uVar11 = *0x1400dabfc + 1 >> 0x1f & 0x1f;\n            iVar4 = *0x1400dabfc + 1 + uVar11;\n            uVar7 = (iVar4 & 0x1f) - uVar11;\n            uVar5 = uVar15;\n            do {\n                uVar11 = auStack88[uVar15];\n                auStack88[uVar15] = uVar11 >> (uVar7 & 0x1f) | uVar5;\n                uVar15 = uVar15 + 1;\n                uVar5 = (uVar11 & ~(-1 << (uVar7 & 0x1f))) << (0x20 - uVar7 & 0x1f);\n            } while (uVar15 < 3);\n            iVar14 = iVar4 >> 5;\n            iVar6 = 2;\n            puVar8 = auStack88 + (2 - iVar14);\n            do {\n                if (iVar6 < iVar14) {\n                    auStack88[iVar6] = 0;\n                }\n                else {\n                    auStack88[iVar6] = *puVar8;\n                }\n                iVar6 = iVar6 + -1;\n                puVar8 = puVar8 + -1;\n            } while (-1 < iVar6);\n            iVar4 = 0;\n            uVar15 = 2;\n        }\n    }\n    auStack88[0] = iVar4 << (0x1fU - *0x1400dabfc & 0x1f) | -((uVar1 & 0x8000) != 0) & 0x80000000 | auStack88[0];\n    if (*0x1400dac00 == 0x40) {\n        arg2[1] = auStack88[0];\n        *arg2 = auStack88[1];\n    }\n    else if (*0x1400dac00 == 0x20) {\n        *arg2 = auStack88[0];\n    }\n    return uVar15;\n}\n",
        "token_count": 3218
    },
    "140093bc": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint64_t fcn.140093bc0(int64_t arg1, int64_t arg2, uint64_t arg3)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    uint64_t uVar3;\n    uchar auStack40 [8];\n    int64_t iStack32;\n    int64_t iStack24;\n    char cStack16;\n    \n    fcn.14006b7c8(auStack40, 0);\n    if (arg3 == 0) {\n        if (cStack16 != '\\0') {\n            *(iStack24 + 200) = *(iStack24 + 200) & 0xfffffffd;\n        }\n        return 0;\n    }\n    if (((arg1 == 0) || (arg2 == 0)) || (0x7fffffff < arg3)) {\n        puVar2 = fcn.14006abb0();\n        *puVar2 = 0x16;\n        fcn.140070df0(0, 0, 0, 0);\ncode_r0x000140093b1f:\n        if (cStack16 != '\\0') {\n            *(iStack24 + 200) = *(iStack24 + 200) & 0xfffffffd;\n        }\n        uVar3 = 0x7fffffff;\n    }\n    else {\n        if (*(iStack32 + 8) == 0) {\n            uVar3 = fcn.14009524c(arg1, arg2, arg3, 0);\n        }\n        else {\n            iVar1 = fcn.1400951c0(auStack40, *(iStack32 + 0xc), 0x1001, arg1);\n            if (iVar1 == 0) goto code_r0x000140093b1f;\n            uVar3 = iVar1 - 2;\n        }\n        if (cStack16 != '\\0') {\n            *(iStack24 + 200) = *(iStack24 + 200) & 0xfffffffd;\n        }\n    }\n    return uVar3;\n}\n",
        "token_count": 450
    },
    "1400974b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint fcn.1400974bc(ulong arg1, ulong arg2, ulong arg3, uint64_t arg4)\n\n{\n    int64_t *piVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int64_t *piVar4;\n    int64_t iVar5;\n    \n    piVar4 = fcn.1400063f8();\n    iVar5 = fcn.140017ad4();\n    piVar1 = *(iVar5 + 8);\n    iVar2 = fcn.1400464b8(arg1, arg2, arg3, arg4 & 0xffffffff);\n    uVar3 = 0xffffffff;\n    if ((iVar2 != 0) && ((piVar1 == NULL || (iVar2 = (**(*piVar1 + 0x120))(piVar1),  uVar3 = 0xffffffff,  iVar2 != 0))))\n    {\n        iVar2 = (**(*piVar4 + 0xa0))(piVar4);\n        if (iVar2 == 0) {\n            if (piVar4[8] != 0) {\n                (**(*piVar4[8] + 0xc0))();\n            }\n            uVar3 = (**(*piVar4 + 0xd0))(piVar4);\n        }\n        else {\n            uVar3 = (**(*piVar4 + 0xa8))(piVar4);\n        }\n    }\n    fcn.14003b268();\n    return uVar3;\n}\n",
        "token_count": 323
    },
    "1400014f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nulong fcn.1400014f0(uint16_t *arg1, uint16_t *arg2)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    ulong uVar4;\n    uint16_t *puStackX8;\n    uint16_t *puStackX16;\n    uint32_t uStack24;\n    uint16_t uStack20;\n    uint16_t uStack16;\n    \n    iVar1 = fcn.1400014b0(arg1);\n    iVar2 = fcn.1400014b0(arg2);\n    if (iVar1 == iVar2) {\n        puStackX8 = arg1;\n        puStackX16 = arg2;\n        for (uStack24 = 0; uVar3 = fcn.1400014b0(puStackX8),  uStack24 < uVar3; uStack24 = uStack24 + 1) {\n            uStack20 = *puStackX8;\n            uStack16 = *puStackX16;\n            if ((0x40 < uStack20) &&\n               (uStack20 <=\n                ((((((((((((((*0x1400d7108 * *0x1400d7108 + 0x5a + *0x1400d7104 * -9 + *0x1400d70fc * -3 +\n                              *0x1400d710c * -6 + *0x1400d7108 * -6) - *0x1400d70fc * *0x1400d70fc) +\n                           *0x1400d70f8 * *0x1400d7108) - *0x1400d710c * *0x1400d7108) - *0x1400d7100 * *0x1400d70fc) +\n                        *0x1400d7108 * *0x1400d7108) - *0x1400d70fc * *0x1400d70fc) + *0x1400d70f8 * *0x1400d7108) -\n                     *0x1400d710c * *0x1400d7108) - *0x1400d7100 * *0x1400d70fc) + *0x1400d7108 * *0x1400d7108 +\n                   *0x1400d7100 * -3) - *0x1400d70fc * *0x1400d70fc) + *0x1400d70f8 * *0x1400d7108) -\n                *0x1400d710c * *0x1400d7108) - *0x1400d7100 * *0x1400d70fc)) {\n                uStack20 = uStack20 + 0x20;\n            }\n            if ((0x40 < uStack16) && (uStack16 < 0x5b)) {\n                uStack16 = uStack16 + 0x20;\n            }\n            if (uStack20 != uStack16) {\n                return 1;\n            }\n            puStackX8 = puStackX8 + 1;\n            puStackX16 = puStackX16 + 1;\n        }\n        uVar4 = 0;\n    }\n    else {\n        uVar4 = 1;\n    }\n    return uVar4;\n}\n",
        "token_count": 746
    },
    "140004f6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\ncode ** fcn.140004f60(code **arg1, int64_t arg2)\n\n{\n    uint uVar1;\n    code *pcVar2;\n    int64_t iVar3;\n    code **ppcVar4;\n    int64_t iVar5;\n    \n    fcn.140006b58(arg1);\n    *arg1 = vtable.CWinApp.0;\n    if (arg2 == 0) {\n        arg1[0x14] = NULL;\n    }\n    else {\n        pcVar2 = fcn.14006ae94(arg2);\n        arg1[0x14] = pcVar2;\n    }\n    iVar3 = fcn.140017ad4();\n    if (iVar3 == 0) {\n        fcn.140020780();\n        pcVar2 = swi(3);\n        ppcVar4 = (*pcVar2)();\n        return ppcVar4;\n    }\n    iVar5 = fcn.1400234a0(iVar3 + 0xc0, 0x140003eb0);\n    if (iVar5 == 0) {\n        fcn.140020780();\n        pcVar2 = swi(3);\n        ppcVar4 = (*pcVar2)();\n        return ppcVar4;\n    }\n    if (iVar5 == 0) {\n        fcn.140020780();\n        pcVar2 = swi(3);\n        ppcVar4 = (*pcVar2)();\n        return ppcVar4;\n    }\n    *(iVar5 + 8) = arg1;\n    pcVar2 = (*_sym.imp.KERNEL32.dll_GetCurrentThread)();\n    arg1[0xb] = pcVar2;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetCurrentThreadId)();\n    *(arg1 + 0xc) = uVar1;\n    *(iVar3 + 8) = arg1;\n    arg1[0x11] = NULL;\n    arg1[0x1f] = NULL;\n    arg1[0x19] = NULL;\n    arg1[0x1a] = NULL;\n    arg1[0x15] = NULL;\n    arg1[0x18] = NULL;\n    arg1[0x22] = NULL;\n    arg1[0x16] = NULL;\n    *(arg1 + 0x122) = 0;\n    *(arg1 + 0x24) = 0;\n    arg1[0x12] = NULL;\n    arg1[0x23] = NULL;\n    *(arg1 + 0x20) = 0;\n    arg1[0x21] = NULL;\n    arg1[0x1c] = NULL;\n    arg1[0x1d] = NULL;\n    *(arg1 + 0x124) = 0;\n    arg1[0x26] = NULL;\n    *(arg1 + 0x17) = 0;\n    *(arg1 + 0x1b) = 0;\n    arg1[0x25] = 0x200;\n    return arg1;\n}\n",
        "token_count": 670
    },
    "1400057d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint64_t * fcn.1400057dc(int64_t *arg1, uint64_t arg2)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int64_t *piVar3;\n    int64_t iVar4;\n    \n    piVar3 = fcn.140017fc0();\n    if (piVar3 == NULL) {\n        fcn.1400031e0(0x80004005);\n        pcVar1 = swi(3);\n        piVar3 = (*pcVar1)();\n        return piVar3;\n    }\n    iVar4 = (**(*piVar3 + 0x18))(piVar3);\n    *arg1 = iVar4 + 0x18;\n    if (arg2 == 0) {\n        uVar2 = 0;\n    }\n    else {\n        if ((arg2 & 0xffffffffffff0000) == 0) {\n            iVar4 = fcn.140017ddc(arg2 & 0xffff);\n            if (iVar4 == 0) {\n                return arg1;\n            }\n            fcn.140002fd0(arg1, iVar4, arg2 & 0xffff);\n            return arg1;\n        }\n        uVar2 = fcn.1400699a0(arg2);\n    }\n    fcn.140005294(arg1, arg2, uVar2);\n    return arg1;\n}\n",
        "token_count": 302
    },
    "14000658": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.140006580(code **arg1)\n\n{\n    int64_t iVar1;\n    \n    *arg1 = vtable.CWinThread.0;\n    if (arg1[0xb] != NULL) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)();\n    }\n    iVar1 = fcn.140017b90();\n    if (*(iVar1 + 8) == arg1) {\n        *(iVar1 + 8) = 0;\n    }\n    if (arg1[4] != NULL) {\n        (**(arg1[4] + 0x38))();\n    }\n    arg1[7] = NULL;\n    return;\n}\n",
        "token_count": 144
    },
    "140006ac": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\ncode ** fcn.140006acc(code **arg1, code *arg2, code *arg3)\n\n{\n    fcn.140005f80(arg1);\n    *arg1 = vtable.CWinThread.0;\n    arg1[0xe] = arg2;\n    arg1[0xd] = arg3;\n    fcn.14000652c(arg1);\n    return arg1;\n}\n",
        "token_count": 88
    },
    "140006f2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nuint64_t fcn.140006f28(int64_t arg1, ulong arg2)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    uint64_t uVar4;\n    int64_t iVar5;\n    \n    if (arg2 < 1) {\n        iVar5 = *(arg1 + 0x40);\n        if (((iVar5 != 0) && (*(iVar5 + 0x40) != 0)) && (iVar2 = (*_sym.imp.USER32.dll_IsWindowVisible)(),  iVar2 != 0))\n        {\n            fcn.1400109ac(iVar5, *(iVar5 + 0x40), 0x363, 1);\n            fcn.140010dfc(*(iVar5 + 0x40), 0x363, 1, 0);\n        }\n        iVar3 = fcn.140017ad4();\n        iVar3 = fcn.1400234a0(iVar3 + 0xc0, 0x140003eb0);\n        if (iVar3 == 0) {\n            fcn.140020780();\n            pcVar1 = swi(3);\n            uVar4 = (*pcVar1)();\n            return uVar4;\n        }\n        for (iVar3 = *(iVar3 + 0x10); iVar3 != 0; iVar3 = *(iVar3 + 200)) {\n            if ((*(iVar3 + 0x40) != 0) && (iVar3 != iVar5)) {\n                if (*(iVar3 + 0x120) == 0) {\n                    fcn.14001546c(iVar3, 0);\n                }\n                iVar2 = (*_sym.imp.USER32.dll_IsWindowVisible)(*(iVar3 + 0x40));\n                if ((iVar2 != 0) || (-1 < *(iVar3 + 0x120))) {\n                    fcn.1400109ac(iVar3, *(iVar3 + 0x40), 0x363, 1);\n                    fcn.140010dfc(*(iVar3 + 0x40), 0x363, 1, 0);\n                }\n                if (0 < *(iVar3 + 0x120)) {\n                    fcn.14001546c(iVar3, *(iVar3 + 0x120));\n                }\n                *(iVar3 + 0x120) = 0xffffffff;\n            }\n        }\n    }\n    else {\n        iVar5 = fcn.140017ad4();\n        iVar5 = fcn.1400234a0(iVar5 + 0xc0, 0x140003eb0);\n        if (iVar5 == 0) {\n            fcn.140020780();\n            pcVar1 = swi(3);\n            uVar4 = (*pcVar1)();\n            return uVar4;\n        }\n        if (*(iVar5 + 0x20) == 0) {\n            fcn.140024358();\n            fcn.1400246f4(1);\n        }\n    }\n    return arg2 < 1;\n}\n",
        "token_count": 671
    },
    "140008ae": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nuint64_t fcn.140008aec(uint64_t arg1, uint64_t arg2, ulong arg3)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    code *pcVar3;\n    uint32_t uVar4;\n    int64_t *piVar5;\n    uint64_t uVar6;\n    int64_t iVar7;\n    int64_t arg2_00;\n    int64_t iStackX32;\n    \n    arg1 = arg1 & 0xffffffff;\n    piVar5 = fcn.140017fc0();\n    if (piVar5 == NULL) {\n        fcn.1400031e0(0x80004005);\n        pcVar3 = swi(3);\n        uVar6 = (*pcVar3)();\n        return uVar6;\n    }\n    iVar7 = (**(*piVar5 + 0x18))(piVar5);\n    iStackX32 = iVar7 + 0x18;\n    arg2_00 = fcn.140017ddc(arg1);\n    iVar7 = iVar7 + 0x18;\n    if (arg2_00 != 0) {\n        fcn.140002fd0(&iStackX32, arg2_00, arg1);\n        iVar7 = iStackX32;\n    }\n    if (arg3 == 0xffffffff) {\n        arg3._0_4_ = arg1;\n    }\n    uVar4 = fcn.140008a94(iVar7, arg2 & 0xffffffff, arg3);\n    LOCK();\n    piVar1 = iVar7 + -8;\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 + -1 < 1) {\n        (**(**(iVar7 + -0x18) + 8))();\n    }\n    return uVar4;\n}\n",
        "token_count": 412
    },
    "140009af": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.140009af0(ulong arg1, ulong hResData, ulong arg3, ulong arg4)\n\n{\n    ulong arg2;\n    \n    arg2 = (*_sym.imp.KERNEL32.dll_LockResource)(hResData);\n    fcn.1400099f8(arg1, arg2, arg3, 0);\n    return;\n}\n",
        "token_count": 79
    },
    "14000a95": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.14000a958(code **arg1)\n\n{\n    ulong *puVar1;\n    ulong in_R8;\n    ulong in_R9;\n    \n    *arg1 = vtable.CControlSiteFactoryMgr.0;\n    puVar1 = arg1[8];\n    if (puVar1 != NULL) {\n        (***puVar1)(puVar1, 1, in_R8, in_R9, 0xfffffffffffffffe);\n    }\n    fcn.14000a2a0(arg1 + 1);\n    arg1[1] = vtable.CList_class_IControlSiteFactory____ptr64__class_IControlSiteFactory____ptr64_.0;\n    for (puVar1 = arg1[2]; puVar1 != NULL; puVar1 = *puVar1) {\n    }\n    arg1[4] = NULL;\n    arg1[5] = NULL;\n    arg1[3] = NULL;\n    arg1[2] = NULL;\n    fcn.14002aadc(arg1[6]);\n    arg1[6] = NULL;\n    return;\n}\n",
        "token_count": 239
    },
    "14000ab2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\ncode ** fcn.14000ab20(code **arg1)\n\n{\n    code **arg2;\n    \n    *arg1 = vtable.CControlSiteFactoryMgr.0;\n    arg1[1] = vtable.CList_class_IControlSiteFactory____ptr64__class_IControlSiteFactory____ptr64_.0;\n    arg1[4] = NULL;\n    arg1[5] = NULL;\n    arg1[3] = NULL;\n    arg1[2] = NULL;\n    arg1[6] = NULL;\n    arg1[7] = 0xa;\n    arg2 = fcn.140003694(8);\n    if (arg2 == NULL) {\n        arg2 = NULL;\n    }\n    else {\n        *arg2 = vtable.COleControlSiteFactory.0;\n    }\n    arg1[8] = arg2;\n    fcn.14000a9b0(arg1, arg2);\n    return arg1;\n}\n",
        "token_count": 207
    },
    "14000b89": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nulong fcn.14000b898(int64_t arg1, uint32_t *arg2)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    ulong uVar3;\n    uint32_t uStack24;\n    uint32_t uStack20;\n    uint32_t uStack16;\n    uint32_t uStack12;\n    \n    iVar1 = fcn.14000b584();\n    if (iVar1 == 0) {\n        if ((((arg1 == 0x12340042) && (arg2 != NULL)) && (0x27 < *arg2)) &&\n           (iVar1 = (*_sym.imp.USER32.dll_SystemParametersInfoA)(0x30, 0, &uStack24),  iVar1 != 0)) {\n            arg2[1] = 0;\n            arg2[2] = 0;\n            uVar2 = (*_sym.imp.USER32.dll_GetSystemMetrics)(0);\n            arg2[3] = uVar2;\n            uVar2 = (*_sym.imp.USER32.dll_GetSystemMetrics)(1);\n            arg2[9] = 1;\n            arg2[5] = uStack24;\n            arg2[6] = uStack20;\n            arg2[7] = uStack16;\n            arg2[8] = uStack12;\n            arg2[4] = uVar2;\n            if (0x47 < *arg2) {\n                fcn.14006b9ac(arg2 + 10, 0x20, \"DISPLAY\", 0x1f);\n            }\n            return 1;\n        }\n        uVar3 = 0;\n    }\n    else {\n        uVar3 = (**0x1400de250)(arg1, arg2);\n    }\n    return uVar3;\n}\n",
        "token_count": 390
    },
    "14000c87": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nulong fcn.14000c870(int64_t *arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    ulong uStackX8;\n    ulong *puVar2;\n    \n    uStackX8 = 0;\n    puVar2 = &uStackX8;\n    iVar1 = (**(*arg1 + 0x228))(arg1);\n    if (iVar1 == 0) {\n        uStackX8 = (**(*arg1 + 0x230))(arg1, arg2, arg3, arg4, puVar2);\n    }\n    return uStackX8;\n}\n",
        "token_count": 140
    },
    "14000d19": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint64_t fcn.14000d198(ulong lpMultiByteStr, ulong cbMultiByte)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    \n    uVar1 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)(3, 0, lpMultiByteStr, cbMultiByte, 0, 0);\n    iVar2 = (*_sym.imp.OLEAUT32.dll_SysReAllocStringLen)(0, uVar1);\n    if (iVar2 != 0) {\n        (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)(3, 0, lpMultiByteStr, cbMultiByte, iVar2, uVar1);\n    }\n    return iVar2;\n}\n",
        "token_count": 159
    },
    "14000f45": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nuint fcn.14000f454(int64_t *arg1, uint64_t arg2)\n\n{\n    bool bVar1;\n    bool bVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    int64_t iVar5;\n    int64_t arg1_00;\n    int64_t iVar6;\n    int32_t iVar7;\n    \n    iVar7 = 0;\n    bVar1 = true;\n    bVar2 = true;\n    if (((arg2 & 4) == 0) || (uVar3 = fcn.140015284(arg1),  (uVar3 >> 0x1c & 1) != 0)) {\n        bVar1 = false;\n    }\n    iVar5 = (*_sym.imp.USER32.dll_GetParent)();\n    *(arg1 + 0xf) = *(arg1 + 0xf) | 0x18;\n    arg1_00 = fcn.14000640c();\ncode_r0x00014000f531:\n    while ((!bVar2 || (iVar4 = (*_sym.imp.USER32.dll_PeekMessageA)(arg1_00, 0, 0, 0, 0),  iVar4 != 0))) {\n        do {\n            iVar4 = fcn.140006c88();\n            if (iVar4 == 0) {\n                fcn.140003c34(0);\n                return 0xffffffff;\n            }\n            if ((bVar1) && ((*(arg1_00 + 8) == 0x118 || (*(arg1_00 + 8) == 0x104)))) {\n                fcn.14001546c(arg1, 1);\n                (*_sym.imp.USER32.dll_UpdateWindow)(arg1[8]);\n                bVar1 = false;\n            }\n            iVar4 = (**(*arg1 + 0x110))(arg1);\n            if (iVar4 == 0) {\n                *(arg1 + 0xf) = *(arg1 + 0xf) & 0xffffffe7;\n                return *(arg1 + 0x11);\n            }\n            iVar4 = fcn.140006a24(arg1_00);\n            if (iVar4 != 0) {\n                iVar7 = 0;\n                bVar2 = true;\n            }\n            iVar4 = (*_sym.imp.USER32.dll_PeekMessageA)();\n        } while (iVar4 != 0);\n    }\n    if (bVar1) {\n        fcn.14001546c(arg1, 1);\n        (*_sym.imp.USER32.dll_UpdateWindow)();\n        bVar1 = false;\n    }\n    if ((((arg2 & 1) == 0) && (iVar5 != 0)) && (iVar7 == 0)) {\n        (*_sym.imp.USER32.dll_SendMessageA)();\n    }\n    if ((arg2 & 2) == 0) goto code_r0x00014000f512;\n    goto code_r0x00014000f52f;\ncode_r0x00014000f512:\n    iVar6 = (*_sym.imp.USER32.dll_SendMessageA)();\n    iVar7 = iVar7 + 1;\n    if (iVar6 == 0) {\ncode_r0x00014000f52f:\n        bVar2 = false;\n    }\n    goto code_r0x00014000f531;\n}\n",
        "token_count": 730
    },
    "1400103f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.1400103f0(int64_t *arg1, ulong arg2)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    \n    iVar2 = fcn.1400234a0(0x1400de580, 0x140006808);\n    if (iVar2 == 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    (**(*arg1 + 0x240))(arg1, *(iVar2 + 0xa0), *(iVar2 + 0xa8), *(iVar2 + 0xb0), arg2);\n    return;\n}\n",
        "token_count": 151
    },
    "14001091": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.140010914(int64_t *arg1, int32_t *arg2, ulong arg3)\n\n{\n    int32_t iVar1;\n    uint64_t uVar2;\n    ulong arg1_00;\n    int64_t hWnd;\n    int32_t iStack24;\n    int32_t iStack20;\n    \n    if (((((arg3 >> 0x1c & 1) == 0) && (uVar2 = fcn.140015284(arg1),  (uVar2 & 0x50000000) == 0)) &&\n        ((*_sym.imp.USER32.dll_GetWindowRect)(arg1[8], &iStack24),  *arg2 == iStack24)) && (arg2[1] == iStack20)) {\n        arg1_00 = (*_sym.imp.USER32.dll_GetWindow)(arg1[8]);\n        hWnd = fcn.14000fc08(arg1_00);\n        if (((hWnd == 0) || (iVar1 = fcn.14001549c(hWnd),  iVar1 == 0)) &&\n           (iVar1 = (**(*arg1 + 0x248))(arg1),  iVar1 != 0)) {\n            fcn.14000f1fc(arg1, 0);\n        }\n    }\n    return;\n}\n",
        "token_count": 285
    },
    "140010df": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.140010dfc(ulong hWnd, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int64_t arg1;\n    int64_t iVar1;\n    int32_t in_stack_00000028;\n    int32_t in_stack_00000030;\n    \n    for (arg1 = (*_sym.imp.USER32.dll_GetTopWindow)(); arg1 != 0; arg1 = (*_sym.imp.USER32.dll_GetWindow)(arg1)) {\n        if (in_stack_00000030 == 0) {\n            (*_sym.imp.USER32.dll_SendMessageA)();\n        }\n        else {\n            iVar1 = fcn.14000fc4c(arg1);\n            if (iVar1 != 0) {\n                fcn.1400109ac(iVar1, *(iVar1 + 0x40), arg2, arg3);\n            }\n        }\n        if ((in_stack_00000028 != 0) && (iVar1 = (*_sym.imp.USER32.dll_GetTopWindow)(arg1),  iVar1 != 0)) {\n            fcn.140010dfc(arg1, arg2, arg3, arg4);\n        }\n    }\n    return;\n}\n",
        "token_count": 259
    },
    "1400128e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.1400128e8(int64_t arg1, ulong arg2, int64_t arg3)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    ulong uStack24;\n    ulong uStack16;\n    \n    uVar1 = fcn.140015284(arg1);\n    if (((uVar1 >> 0x1e & 1) == 0) && (iVar3 = fcn.140012120(arg1),  iVar3 != 0)) {\n        if ((arg3 != 0) &&\n           ((iVar2 = (*_sym.imp.USER32.dll_IsWindow)(*(arg3 + 0x40)),  iVar2 != 0 &&\n            (iVar4 = fcn.140012120(arg3),  iVar3 == iVar4)))) {\n            return;\n        }\n        uStack24 = *(arg1 + 0x40);\n        if (arg3 == 0) {\n            uStack16 = 0;\n        }\n        else {\n            uStack16 = *(arg3 + 0x40);\n        }\n        (*_sym.imp.USER32.dll_SendMessageA)(*(iVar3 + 0x40), 0x36e, arg2, &uStack24);\n    }\n    return;\n}\n",
        "token_count": 287
    },
    "1400130d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.1400130d8(int64_t *arg1)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    uint uVar4;\n    uint uVar5;\n    \n    iVar2 = (**(*arg1 + 0x250))();\n    if (iVar2 != 0) {\n        (**(*arg1 + 0x310))(arg1);\n    }\n    (*_sym.imp.USER32.dll_SendMessageA)(arg1[8]);\n    fcn.140010dfc(arg1[8], 0x1f, 0, 0);\n    iVar3 = fcn.140012120(arg1);\n    if (iVar3 == 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    (*_sym.imp.USER32.dll_SendMessageA)(*(iVar3 + 0x40));\n    uVar5 = 1;\n    uVar4 = 1;\n    fcn.140010dfc(*(iVar3 + 0x40), 0x1f, 0, 0);\n    iVar3 = (*_sym.imp.USER32.dll_GetCapture)();\n    if (iVar3 != 0) {\n        (*_sym.imp.USER32.dll_SendMessageA)(iVar3, 0x1f, 0, 0, uVar4, uVar5);\n    }\n    return;\n}\n",
        "token_count": 318
    },
    "140016f7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.140016f70(code **arg1, ulong noname_1, ulong pv)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int64_t *piVar3;\n    ulong *puVar4;\n    code *pcVar5;\n    ulong in_R9;\n    \n    *arg1 = vtable.AFX_MODULE_STATE.0;\n    piVar3 = arg1[0x17];\n    if (piVar3 != NULL) {\n        (**(*piVar3 + 0x18))(piVar3, arg1 + 0x10, pv, in_R9, 0xfffffffffffffffe);\n        piVar3 = arg1[0x17];\n        if (piVar3 != NULL) {\n            (**(*piVar3 + 8))(piVar3, 1);\n        }\n    }\n    puVar4 = *arg1[0x19];\n    if (puVar4 != NULL) {\n        (***puVar4)(puVar4, 1);\n    }\n    puVar4 = *(arg1[0x19] + 8);\n    if (puVar4 != NULL) {\n        (***puVar4)(puVar4, 1);\n    }\n    fcn.1400036d8(arg1[0x19]);\n    if ((arg1[0x1b] != NULL) && (arg1[0x1b] != 0xffffffffffffffff)) {\n        if (*0x1400de550 != NULL) {\n            (**0x1400de550)();\n        }\n        arg1[0x1b] = 0xffffffffffffffff;\n    }\n    fcn.14002355c(arg1 + 0x18);\n    pcVar5 = arg1[0xb];\n    LOCK();\n    piVar1 = pcVar5 + -8;\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 + -1 < 1) {\n        (**(**(pcVar5 + -0x18) + 8))();\n    }\n    return;\n}\n",
        "token_count": 457
    },
    "14001719": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\ncode ** fcn.14001719c(code **arg1)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    int64_t iStackX8;\n    \n    fcn.1400057dc(&iStackX8, \"comctl32.dll\");\n    *arg1 = vtable.CDllIsolationWrapperBase.0;\n    iVar3 = fcn.1400075ec(iStackX8 + -0x18);\n    arg1[3] = iVar3 + 0x18;\n    arg1[1] = NULL;\n    *(arg1 + 2) = 0;\n    LOCK();\n    piVar1 = iStackX8 + -8;\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 + -1 < 1) {\n        (**(**(iStackX8 + -0x18) + 8))();\n    }\n    *arg1 = vtable.CComCtlWrapper.0;\n    arg1[4] = NULL;\n    arg1[5] = NULL;\n    arg1[6] = NULL;\n    arg1[7] = NULL;\n    arg1[8] = NULL;\n    arg1[9] = NULL;\n    arg1[10] = NULL;\n    arg1[0xb] = NULL;\n    arg1[0xc] = NULL;\n    arg1[0xd] = NULL;\n    arg1[0xe] = NULL;\n    arg1[0xf] = NULL;\n    arg1[0x10] = NULL;\n    arg1[0x11] = NULL;\n    arg1[0x12] = NULL;\n    arg1[0x13] = NULL;\n    arg1[0x14] = NULL;\n    arg1[0x15] = NULL;\n    arg1[0x16] = NULL;\n    arg1[0x17] = NULL;\n    arg1[0x18] = NULL;\n    arg1[0x19] = NULL;\n    arg1[0x1a] = NULL;\n    arg1[0x1b] = NULL;\n    arg1[0x1c] = NULL;\n    arg1[0x1d] = NULL;\n    arg1[0x1e] = NULL;\n    arg1[0x1f] = NULL;\n    arg1[0x20] = NULL;\n    arg1[0x21] = NULL;\n    arg1[0x22] = NULL;\n    arg1[0x23] = NULL;\n    arg1[0x24] = NULL;\n    arg1[0x25] = NULL;\n    arg1[0x26] = NULL;\n    arg1[0x27] = NULL;\n    arg1[0x28] = NULL;\n    arg1[0x29] = NULL;\n    arg1[0x2a] = NULL;\n    arg1[0x2b] = NULL;\n    arg1[0x2c] = NULL;\n    arg1[0x2d] = NULL;\n    arg1[0x2e] = NULL;\n    arg1[0x2f] = NULL;\n    arg1[0x30] = NULL;\n    arg1[0x31] = NULL;\n    arg1[0x32] = NULL;\n    arg1[0x33] = NULL;\n    arg1[0x34] = NULL;\n    arg1[0x35] = NULL;\n    arg1[0x36] = NULL;\n    arg1[0x37] = NULL;\n    arg1[0x38] = NULL;\n    arg1[0x39] = NULL;\n    arg1[0x3a] = NULL;\n    arg1[0x3b] = NULL;\n    arg1[0x3c] = NULL;\n    arg1[0x3d] = NULL;\n    arg1[0x3e] = NULL;\n    arg1[0x3f] = NULL;\n    arg1[0x40] = NULL;\n    arg1[0x41] = NULL;\n    arg1[0x42] = NULL;\n    arg1[0x43] = NULL;\n    arg1[0x44] = NULL;\n    arg1[0x45] = NULL;\n    arg1[0x46] = NULL;\n    arg1[0x47] = NULL;\n    arg1[0x48] = NULL;\n    arg1[0x49] = NULL;\n    arg1[0x4a] = NULL;\n    arg1[0x4b] = NULL;\n    arg1[0x4c] = NULL;\n    arg1[0x4d] = NULL;\n    arg1[0x4e] = NULL;\n    arg1[0x4f] = NULL;\n    arg1[0x50] = NULL;\n    arg1[0x51] = NULL;\n    arg1[0x52] = NULL;\n    arg1[0x53] = NULL;\n    arg1[0x54] = NULL;\n    arg1[0x55] = NULL;\n    arg1[0x56] = NULL;\n    arg1[0x57] = NULL;\n    arg1[0x58] = NULL;\n    arg1[0x59] = NULL;\n    arg1[0x5a] = NULL;\n    arg1[0x5b] = NULL;\n    arg1[0x5c] = NULL;\n    arg1[0x5d] = NULL;\n    arg1[0x5e] = NULL;\n    arg1[0x5f] = NULL;\n    arg1[0x60] = NULL;\n    arg1[0x61] = NULL;\n    return arg1;\n}\n",
        "token_count": 1280
    },
    "14001754": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\ncode ** fcn.140017544(code **arg1)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    int64_t iStackX8;\n    \n    fcn.1400057dc(&iStackX8, \"comdlg32.dll\");\n    *arg1 = vtable.CDllIsolationWrapperBase.0;\n    iVar3 = fcn.1400075ec(iStackX8 + -0x18);\n    arg1[3] = iVar3 + 0x18;\n    arg1[1] = NULL;\n    *(arg1 + 2) = 0;\n    LOCK();\n    piVar1 = iStackX8 + -8;\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 + -1 < 1) {\n        (**(**(iStackX8 + -0x18) + 8))();\n    }\n    *arg1 = vtable.CCommDlgWrapper.0;\n    arg1[4] = NULL;\n    arg1[5] = NULL;\n    arg1[6] = NULL;\n    arg1[7] = NULL;\n    arg1[8] = NULL;\n    arg1[9] = NULL;\n    arg1[10] = NULL;\n    arg1[0xb] = NULL;\n    arg1[0xc] = NULL;\n    arg1[0xd] = NULL;\n    arg1[0xe] = NULL;\n    arg1[0xf] = NULL;\n    arg1[0x10] = NULL;\n    arg1[0x11] = NULL;\n    arg1[0x12] = NULL;\n    arg1[0x13] = NULL;\n    arg1[0x14] = NULL;\n    arg1[0x15] = NULL;\n    arg1[0x16] = NULL;\n    arg1[0x17] = NULL;\n    arg1[0x18] = NULL;\n    return arg1;\n}\n",
        "token_count": 446
    },
    "1400176e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\ncode ** fcn.1400176ec(code **arg1)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    int64_t aiStackX8 [4];\n    \n    fcn.1400057dc(aiStackX8, \"shell32.dll\");\n    *arg1 = vtable.CDllIsolationWrapperBase.0;\n    iVar3 = fcn.1400075ec(aiStackX8[0] + -0x18);\n    arg1[3] = iVar3 + 0x18;\n    arg1[1] = NULL;\n    *(arg1 + 2) = 0;\n    LOCK();\n    piVar1 = aiStackX8[0] + -8;\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 + -1 < 1) {\n        (**(**(aiStackX8[0] + -0x18) + 8))();\n    }\n    *arg1 = vtable.CShellWrapper.0;\n    arg1[4] = NULL;\n    return arg1;\n}\n",
        "token_count": 252
    },
    "14001782": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\ncode ** fcn.140017820(code **arg1, ulong arg2)\n\n{\n    int64_t *piVar1;\n    code **ppcVar2;\n    int64_t iVar3;\n    code *pcVar4;\n    ulong uVar5;\n    \n    *arg1 = vtable.AFX_MODULE_STATE.0;\n    arg1[6] = NULL;\n    arg1[7] = NULL;\n    arg1[8] = NULL;\n    arg1[9] = NULL;\n    piVar1 = fcn.140017fc0();\n    if (piVar1 == NULL) {\n        fcn.1400031e0(0x80004005);\n        pcVar4 = swi(3);\n        ppcVar2 = (*pcVar4)();\n        return ppcVar2;\n    }\n    iVar3 = (**(*piVar1 + 0x18))(piVar1);\n    arg1[0xb] = iVar3 + 0x18;\n    arg1[0xe] = NULL;\n    arg1[0xf] = NULL;\n    *(arg1 + 0x11) = 0xffffffff;\n    arg1[0x12] = NULL;\n    arg1[0x15] = NULL;\n    *(arg1 + 0x16) = 0;\n    arg1[9] = 0x40;\n    arg1[7] = 0x20;\n    *(arg1 + 0x2c) = 0;\n    *(arg1 + 5) = arg2;\n    if ((*(arg1[0xb] + -0xc) - 0x1000U | 1U - *(arg1[0xb] + -8)) < 0) {\n        fcn.1400033e0(arg1 + 0xb, 0x1000);\n    }\n    *(arg1 + 0x54) = 1;\n    arg1[0xf] = 0x20;\n    pcVar4 = fcn.140003694(0x18);\n    arg1[0x19] = pcVar4;\n    iVar3 = fcn.140022b98(0x310);\n    if (iVar3 == 0) {\n        uVar5 = 0;\n    }\n    else {\n        uVar5 = fcn.14001719c(iVar3);\n    }\n    *arg1[0x19] = uVar5;\n    iVar3 = fcn.140022b98(200);\n    if (iVar3 == 0) {\n        uVar5 = 0;\n    }\n    else {\n        uVar5 = fcn.140017544(iVar3);\n    }\n    *(arg1[0x19] + 8) = uVar5;\n    iVar3 = fcn.140022b98(0x28);\n    if (iVar3 == 0) {\n        uVar5 = 0;\n    }\n    else {\n        uVar5 = fcn.1400176ec(iVar3);\n    }\n    *(arg1[0x19] + 0x10) = uVar5;\n    *(arg1 + 0x1a) = 1;\n    arg1[0x1b] = NULL;\n    *(arg1 + 0x1c) = 0;\n    *(arg1 + 0xe4) = 0;\n    return arg1;\n}\n",
        "token_count": 738
    },
    "14001826": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nuint64_t fcn.14001826c(ushort *arg1, int64_t lpMultiByteStr, ulong arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    uint64_t uVar2;\n    \n    uVar2 = 0;\n    if ((arg1 != NULL) && (lpMultiByteStr != 0)) {\n        *arg1 = 0;\n        iVar1 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)(0, 0, lpMultiByteStr, 0xffffffff, arg1, arg3);\n        uVar2 = -(iVar1 != 0) & arg1;\n    }\n    return uVar2;\n}\n",
        "token_count": 149
    },
    "14001991": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nuint64_t fcn.140019910(int64_t hMenu, uint64_t arg2, int64_t *arg3, ulong flags)\n\n{\n    int64_t iVar1;\n    code *pcVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint64_t uVar5;\n    uint32_t uVar6;\n    ulong pv;\n    \n    pv = 0;\n    uVar5 = arg2 & 0xffffffff;\n    uVar3 = (*_sym.imp.USER32.dll_GetMenuStringA)(*(hMenu + 8), arg2, 0, 0, flags);\n    if (uVar3 < 1) {\n        fcn.140004828(arg3, arg2, pv);\n    }\n    else {\n        uVar6 = uVar3 + 1;\n        if ((1U - *(*arg3 + -8) | *(*arg3 + -0xc) - uVar6) < 0) {\n            fcn.1400033e0(arg3, uVar6);\n        }\n        iVar1 = *arg3;\n        if ((uVar6 < 0) || (*(iVar1 + -0xc) < uVar6)) {\n            fcn.1400031e0(0x80070057);\n            pcVar2 = swi(3);\n            uVar5 = (*pcVar2)();\n            return uVar5;\n        }\n        *(iVar1 + -0x10) = uVar6;\n        *(uVar6 + *arg3) = 0;\n        (*_sym.imp.USER32.dll_GetMenuStringA)(*(hMenu + 8), uVar5, iVar1, uVar6, flags);\n        iVar1 = *arg3;\n        if (iVar1 == 0) {\n            iVar4 = 0;\n        }\n        else {\n            iVar4 = fcn.14006b544(iVar1, *(iVar1 + -0xc));\n            if (iVar4 < 0) goto code_r0x0001400199d2;\n        }\n        if (*(*arg3 + -0xc) < iVar4) {\ncode_r0x0001400199d2:\n            fcn.1400031e0(0x80070057);\n            pcVar2 = swi(3);\n            uVar5 = (*pcVar2)();\n            return uVar5;\n        }\n        *(*arg3 + -0x10) = iVar4;\n        *(iVar4 + *arg3) = 0;\n    }\n    return uVar3;\n}\n",
        "token_count": 551
    },
    "140019d8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nulong fcn.140019d80(code **arg1)\n\n{\n    ulong uVar1;\n    \n    arg1[2] = vtable.CFont.0;\n    fcn.140019c30(arg1 + 2);\n    *arg1 = vtable.CMenu.0;\n    if (arg1[1] == NULL) {\n        uVar1 = 0;\n    }\n    else {\n        uVar1 = fcn.1400197ec(arg1);\n        uVar1 = (*_sym.imp.USER32.dll_DestroyMenu)(uVar1);\n    }\n    return uVar1;\n}\n",
        "token_count": 130
    },
    "14001a9b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.14001a9b8(int64_t arg1, uint *nRightRect)\n\n{\n    if (*(arg1 + 8) != *(arg1 + 0x10)) {\n        (*_sym.imp.GDI32.dll_ExcludeClipRect)(*(arg1 + 8), *nRightRect, nRightRect[1], nRightRect[2], nRightRect[3]);\n    }\n    if (*(arg1 + 0x10) != 0) {\n        (*_sym.imp.GDI32.dll_ExcludeClipRect)(*(arg1 + 0x10), *nRightRect, nRightRect[1], nRightRect[2], nRightRect[3]);\n    }\n    return;\n}\n",
        "token_count": 158
    },
    "14001aa9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.14001aa90(int64_t arg1, uint *nRightRect)\n\n{\n    if (*(arg1 + 8) != *(arg1 + 0x10)) {\n        (*_sym.imp.GDI32.dll_IntersectClipRect)(*(arg1 + 8), *nRightRect, nRightRect[1], nRightRect[2], nRightRect[3]);\n    }\n    if (*(arg1 + 0x10) != 0) {\n        (*_sym.imp.GDI32.dll_IntersectClipRect)\n                  (*(arg1 + 0x10), *nRightRect, nRightRect[1], nRightRect[2], nRightRect[3]);\n    }\n    return;\n}\n",
        "token_count": 157
    },
    "14001bde": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\ncode ** fcn.14001bde0(code **arg1, int64_t arg2)\n\n{\n    int32_t iVar1;\n    ulong arg2_00;\n    code *pcVar2;\n    \n    arg1[1] = NULL;\n    arg1[2] = NULL;\n    *(arg1 + 3) = 0;\n    *arg1 = vtable.CClientDC.0;\n    if (arg2 == 0) {\n        pcVar2 = NULL;\n    }\n    else {\n        pcVar2 = *(arg2 + 0x40);\n    }\n    arg1[4] = pcVar2;\n    arg2_00 = (*_sym.imp.USER32.dll_GetDC)();\n    iVar1 = fcn.14001bcf8(arg1, arg2_00);\n    if (iVar1 == 0) {\n        fcn.14001af14();\n    }\n    return arg1;\n}\n",
        "token_count": 200
    },
    "14001be4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.14001be44(code **arg1, ulong arg2)\n\n{\n    ulong uVar1;\n    ulong in_R8;\n    \n    *arg1 = vtable.CClientDC.0;\n    uVar1 = fcn.14001bd44(arg1, arg2, in_R8);\n    (*_sym.imp.USER32.dll_ReleaseDC)(arg1[4]);\n    *arg1 = vtable.CDC.0;\n    if (arg1[1] != NULL) {\n        uVar1 = fcn.14001bd44(arg1, uVar1, in_R8);\n        (*_sym.imp.GDI32.dll_DeleteDC)(uVar1);\n    }\n    return;\n}\n",
        "token_count": 152
    },
    "14001be8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\ncode ** fcn.14001be84(code **arg1, int64_t arg2)\n\n{\n    int32_t iVar1;\n    ulong arg2_00;\n    code *pcVar2;\n    \n    arg1[1] = NULL;\n    arg1[2] = NULL;\n    *(arg1 + 3) = 0;\n    *arg1 = vtable.CWindowDC.0;\n    if (arg2 == 0) {\n        pcVar2 = NULL;\n    }\n    else {\n        pcVar2 = *(arg2 + 0x40);\n    }\n    arg1[4] = pcVar2;\n    arg2_00 = (*_sym.imp.USER32.dll_GetWindowDC)();\n    iVar1 = fcn.14001bcf8(arg1, arg2_00);\n    if (iVar1 == 0) {\n        fcn.14001af14();\n    }\n    return arg1;\n}\n",
        "token_count": 200
    },
    "14001bee": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.14001bee8(code **arg1, ulong arg2)\n\n{\n    ulong uVar1;\n    ulong in_R8;\n    \n    *arg1 = vtable.CWindowDC.0;\n    uVar1 = fcn.14001bd44(arg1, arg2, in_R8);\n    (*_sym.imp.USER32.dll_ReleaseDC)(arg1[4]);\n    *arg1 = vtable.CDC.0;\n    if (arg1[1] != NULL) {\n        uVar1 = fcn.14001bd44(arg1, uVar1, in_R8);\n        (*_sym.imp.GDI32.dll_DeleteDC)(uVar1);\n    }\n    return;\n}\n",
        "token_count": 152
    },
    "14001bf2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\ncode ** fcn.14001bf28(code **arg1, int64_t hWnd)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    ulong arg2;\n    ulong in_R8;\n    ulong in_R9;\n    \n    arg1[1] = NULL;\n    arg1[2] = NULL;\n    *(arg1 + 3) = 0;\n    *arg1 = vtable.CPaintDC.0;\n    pcVar1 = *(hWnd + 0x40);\n    arg1[4] = pcVar1;\n    arg2 = (*_sym.imp.USER32.dll_BeginPaint)(pcVar1, arg1 + 5, in_R8, in_R9, 0xfffffffffffffffe);\n    iVar2 = fcn.14001bcf8(arg1, arg2);\n    if (iVar2 == 0) {\n        fcn.14001af14();\n    }\n    return arg1;\n}\n",
        "token_count": 204
    },
    "14001bf8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.14001bf88(code **lpPaint)\n\n{\n    ulong uVar1;\n    code **noname_1;\n    ulong in_R8;\n    \n    *lpPaint = vtable.CPaintDC.0;\n    noname_1 = lpPaint + 5;\n    (*_sym.imp.USER32.dll_EndPaint)(lpPaint[4]);\n    fcn.14001bd44(lpPaint, noname_1, in_R8);\n    *lpPaint = vtable.CDC.0;\n    if (lpPaint[1] != NULL) {\n        uVar1 = fcn.14001bd44(lpPaint, noname_1, in_R8);\n        (*_sym.imp.GDI32.dll_DeleteDC)(uVar1);\n    }\n    return;\n}\n",
        "token_count": 167
    },
    "14001c8f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\ncode ** fcn.14001c8fc(code **arg1, ulong arg2)\n\n{\n    int32_t iVar1;\n    ulong arg2_00;\n    \n    arg1[1] = NULL;\n    *arg1 = vtable.CBrush.0;\n    arg2_00 = (*_sym.imp.GDI32.dll_CreateSolidBrush)(arg2);\n    iVar1 = fcn.14001c094(arg1, arg2_00);\n    if (iVar1 == 0) {\n        fcn.14001af14();\n    }\n    return arg1;\n}\n",
        "token_count": 124
    },
    "14001e6c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.14001e6c4(ulong arg1)\n\n{\n    code *pcVar1;\n    code **arg1_00;\n    code **appcStackX16 [3];\n    \n    arg1_00 = fcn.140003694(0x18);\n    if (arg1_00 == NULL) {\n        arg1_00 = NULL;\n    }\n    else {\n        appcStackX16[0] = arg1_00;\n        fcn.1400207c8(arg1_00);\n        *arg1_00 = vtable.COleException.0;\n        *(arg1_00 + 2) = 0;\n    }\n    *(arg1_00 + 2) = arg1;\n    appcStackX16[0] = arg1_00;\n    fcn.14006ba84(appcStackX16, 0x1400d2ef0);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 218
    },
    "14001e8b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint64_t fcn.14001e8b4(ulong *arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    uint32_t uVar1;\n    code *pcVar2;\n    ulong uVar3;\n    ulong uVar4;\n    int32_t iVar5;\n    int64_t iVar6;\n    int32_t *piVar7;\n    uint32_t uVar8;\n    int16_t *arg3_00;\n    uint32_t uVar9;\n    int32_t in_stack_00000028;\n    int16_t *in_stack_00000030;\n    int16_t *in_stack_00000038;\n    \n    if (in_stack_00000030 == NULL) {\n        uVar8 = 0;\n    }\n    else {\n        iVar5 = (*_sym.imp.KERNEL32.dll_lstrlenW)(in_stack_00000030);\n        uVar8 = iVar5 + 1;\n    }\n    arg3_00 = in_stack_00000030;\n    uVar9 = uVar8;\n    if ((in_stack_00000038 != NULL) && (*in_stack_00000038 != 0)) {\n        iVar5 = (*_sym.imp.KERNEL32.dll_lstrlenW)(in_stack_00000038);\n        arg3_00 = in_stack_00000038;\n        uVar9 = iVar5 + 1;\n    }\n    iVar6 = (*_sym.imp.KERNEL32.dll_GlobalAlloc)(0x2042);\n    if (iVar6 == 0) {\n        iVar6 = 0;\n    }\n    else {\n        piVar7 = (*_sym.imp.KERNEL32.dll_GlobalLock)();\n        if (in_stack_00000030 == NULL) {\n            piVar7[0xb] = 0;\n        }\n        else {\n            piVar7[0xb] = 0x34;\n            iVar5 = fcn.14006bd28(piVar7 + 0xd, uVar8, in_stack_00000030);\n            if (iVar5 != 0) {\n                if (iVar5 == 0xc) {\n                    fcn.140020738();\n                    pcVar2 = swi(3);\n                    iVar6 = (*pcVar2)();\n                    return iVar6;\n                }\n                if ((iVar5 == 0x16) || (iVar5 == 0x22)) {\n                    fcn.140020780();\n                    pcVar2 = swi(3);\n                    iVar6 = (*pcVar2)();\n                    return iVar6;\n                }\n                if (iVar5 != 0x50) {\n                    fcn.140020780();\n                    pcVar2 = swi(3);\n                    iVar6 = (*pcVar2)();\n                    return iVar6;\n                }\n            }\n        }\n        if (arg3_00 == NULL) {\n            piVar7[0xc] = 0;\n        }\n        else {\n            uVar1 = uVar8 * 2 + 0x34;\n            piVar7[0xc] = uVar1;\n            iVar5 = fcn.14006bd28(uVar1 + piVar7, uVar9, arg3_00);\n            if (iVar5 != 0) {\n                if (iVar5 == 0xc) {\n                    fcn.140020738();\n                    pcVar2 = swi(3);\n                    iVar6 = (*pcVar2)();\n                    return iVar6;\n                }\n                if ((iVar5 == 0x16) || (iVar5 == 0x22)) {\n                    fcn.140020780();\n                    pcVar2 = swi(3);\n                    iVar6 = (*pcVar2)();\n                    return iVar6;\n                }\n                if (iVar5 != 0x50) {\n                    fcn.140020780();\n                    pcVar2 = swi(3);\n                    iVar6 = (*pcVar2)();\n                    return iVar6;\n                }\n            }\n        }\n        *(piVar7 + 6) = arg3;\n        *(piVar7 + 8) = arg4;\n        *piVar7 = (uVar9 + uVar8) * 2 + 0x34;\n        uVar3 = *arg1;\n        uVar4 = arg1[1];\n        piVar7[5] = arg2;\n        *(piVar7 + 1) = uVar3;\n        *(piVar7 + 3) = uVar4;\n        piVar7[10] = in_stack_00000028;\n        (*_sym.imp.KERNEL32.dll_GlobalUnlock)(uVar3, iVar6);\n    }\n    return iVar6;\n}\n",
        "token_count": 992
    },
    "14001ebe": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_10h\n\nvoid fcn.14001ebe0(int64_t arg1)\n\n{\n    uint64_t uVar1;\n    uchar *puVar2;\n    ulong var_8h;\n    ulong var_10h;\n    ulong var_bp_20h;\n    uchar auStack56 [32];\n    uchar auStack24 [8];\n    uint64_t uStack16;\n    \n    puVar2 = &stack0xffffffffffffffc8;\n    uStack16 = *0x1400d96f0 ^ &stack0xffffffffffffffe8;\n    if (-arg1 - 1U < 0x4000) {\n        auStack24[0] = 0;\n    }\n    else {\n        uVar1 = arg1 + 0x400f;\n        if (uVar1 <= arg1 + 0x4000U) {\n            uVar1 = 0xffffffffffffff0;\n        }\n        uVar1 = uVar1 & 0xfffffffffffffff0;\n        fcn.140097600();\n        puVar2 = &stack0xffffffffffffffc8 + -uVar1;\n    }\n    uVar1 = uStack16 ^ &stack0xffffffffffffffe8;\n    *(puVar2 + -8) = 0x14001ec59;\n    fcn.140069870(uVar1);\n    return;\n}\n",
        "token_count": 302
    },
    "14001ec6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nushort * fcn.14001ec64(ushort *lpWideCharStr, int64_t lpMultiByteStr, ulong noname_2, ulong arg4)\n\n{\n    ushort *puVar1;\n    int32_t iVar2;\n    \n    if ((lpMultiByteStr != 0) && (lpWideCharStr != NULL)) {\n        *lpWideCharStr = 0;\n        (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)(3, 0, lpMultiByteStr, 0xffffffff, lpWideCharStr, 0x20);\n        iVar2 = fcn.140069a48(lpWideCharStr + 0x20, 0x26, lpMultiByteStr + 0x20, 0x26);\n        if (iVar2 == 0) {\n            puVar1 = lpWideCharStr + 0x33;\n            if ((puVar1 != NULL) && (lpMultiByteStr + 0x46 != 0)) {\n                *puVar1 = 0;\n                (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)(3, 0, lpMultiByteStr + 0x46, 0xffffffff, puVar1, 0x20);\n            }\n            iVar2 = fcn.140069a48(lpWideCharStr + 0x53, 0x36, lpMultiByteStr + 0x66, 0x36);\n            if ((iVar2 == 0) &&\n               ((*(lpMultiByteStr + 0x26) == 0 ||\n                (iVar2 = fcn.140069a48(lpWideCharStr + 0x6e, *(lpMultiByteStr + 0x26), lpMultiByteStr + 0x9c, \n                                       *(lpMultiByteStr + 0x26)),  iVar2 == 0)))) {\n                lpWideCharStr[0x22] = 0xdc;\n                return lpWideCharStr;\n            }\n        }\n    }\n    return NULL;\n}\n",
        "token_count": 436
    },
    "14001f14": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint64_t * fcn.14001f14c(int64_t *arg1, uint64_t arg2)\n\n{\n    code *pcVar1;\n    int64_t *piVar2;\n    int64_t iVar3;\n    uint64_t noname_2;\n    ulong in_R9;\n    \n    piVar2 = fcn.140017fc0();\n    noname_2 = piVar2 != NULL;\n    if (piVar2 == NULL) {\n        fcn.1400031e0(0x80004005);\n        pcVar1 = swi(3);\n        piVar2 = (*pcVar1)();\n        return piVar2;\n    }\n    iVar3 = (**(*piVar2 + 0x18))(piVar2);\n    *arg1 = iVar3 + 0x18;\n    if ((arg2 == 0) || ((arg2 & 0xffffffffffff0000) != 0)) {\n        fcn.14001f070(arg1, arg2, noname_2, in_R9);\n    }\n    else {\n        iVar3 = fcn.140017ddc(arg2 & 0xffff);\n        if (iVar3 != 0) {\n            fcn.140002fd0(arg1, iVar3, arg2 & 0xffff);\n        }\n    }\n    return arg1;\n}\n",
        "token_count": 290
    },
    "14001f7c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint64_t * fcn.14001f7c0(int64_t *arg1, int64_t lpMultiByteStr, int64_t noname_2, ulong arg4)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int64_t *piVar3;\n    int64_t noname_1;\n    uint32_t uVar4;\n    \n    uVar4 = 0;\n    noname_1 = lpMultiByteStr;\n    if (lpMultiByteStr != 0) {\n        noname_1 = 0;\n        noname_2 = lpMultiByteStr;\n        iVar2 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)(3, 0, lpMultiByteStr, 0xffffffff, 0, 0);\n        uVar4 = iVar2 - 1;\n    }\n    if (uVar4 < 1) {\n        fcn.140018474(arg1, noname_1, noname_2);\n    }\n    else {\n        if ((1U - *(*arg1 + -8) | *(*arg1 + -0xc) - uVar4) < 0) {\n            fcn.14001892c(arg1, uVar4);\n        }\n        (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)(3, 0, lpMultiByteStr, 0xffffffff, *arg1, uVar4);\n        if (*(*arg1 + -0xc) < uVar4) {\n            fcn.1400031e0(0x80070057);\n            pcVar1 = swi(3);\n            piVar3 = (*pcVar1)();\n            return piVar3;\n        }\n        *(*arg1 + -0x10) = uVar4;\n        *(*arg1 + uVar4 * 2) = 0;\n    }\n    return arg1;\n}\n",
        "token_count": 409
    },
    "14002010": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint64_t * fcn.14002010c(int64_t *arg1, uint64_t arg2)\n\n{\n    code *pcVar1;\n    int64_t *piVar2;\n    int64_t iVar3;\n    uint64_t noname_2;\n    ulong in_R9;\n    \n    piVar2 = fcn.140017fc0();\n    noname_2 = piVar2 != NULL;\n    if (piVar2 == NULL) {\n        fcn.1400031e0(0x80004005);\n        pcVar1 = swi(3);\n        piVar2 = (*pcVar1)();\n        return piVar2;\n    }\n    iVar3 = (**(*piVar2 + 0x18))(piVar2);\n    *arg1 = iVar3 + 0x18;\n    if ((arg2 == 0) || ((arg2 & 0xffffffffffff0000) != 0)) {\n        fcn.14001f7c0(arg1, arg2, noname_2, in_R9);\n    }\n    else {\n        iVar3 = fcn.140017ddc(arg2 & 0xffff);\n        if (iVar3 != 0) {\n            fcn.14001f898(arg1, iVar3, arg2 & 0xffff);\n        }\n    }\n    return arg1;\n}\n",
        "token_count": 291
    },
    "14002101": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nuint64_t fcn.140021018(int64_t arg1, ulong arg2, int64_t arg3, int64_t arg4)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    uint64_t uVar3;\n    \n    if (*(arg1 + 0xa8) == 0) {\n        uVar3 = (*_sym.imp.KERNEL32.dll_WritePrivateProfileStringA)(arg2, arg3, arg4, *(arg1 + 0xd0));\n        return uVar3;\n    }\n    if (arg3 == 0) {\n        iVar2 = fcn.140020d40(arg1);\n        if (iVar2 != 0) {\n            iVar1 = (*_sym.imp.ADVAPI32.dll_RegDeleteKeyA)(iVar2, arg2);\n            goto code_r0x0001400210cd;\n        }\n    }\n    else if (arg4 == 0) {\n        iVar2 = fcn.140020e44(arg1, arg2);\n        if (iVar2 != 0) {\n            iVar1 = (*_sym.imp.ADVAPI32.dll_RegDeleteValueA)(iVar2, arg3);\ncode_r0x0001400210cd:\n            (*_sym.imp.ADVAPI32.dll_RegCloseKey)(iVar2);\n            return iVar1 == 0;\n        }\n    }\n    else {\n        iVar2 = fcn.140020e44(arg1, arg2);\n        if (iVar2 != 0) {\n            iVar1 = (*_sym.imp.KERNEL32.dll_lstrlenA)(arg4);\n            iVar1 = (*_sym.imp.ADVAPI32.dll_RegSetValueExA)(iVar2, arg3, 0, 1, arg4, iVar1 + 1);\n            goto code_r0x0001400210cd;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 402
    },
    "140022a6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint64_t fcn.140022a6c(int64_t arg1, ulong arg2)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    ulong uVar3;\n    ulong auStackX16 [3];\n    uchar auStack24 [16];\n    \n    auStackX16[0] = arg2;\n    (*_sym.imp.USER32.dll_ClientToScreen)(arg1, auStackX16);\n    uVar3 = 5;\n    do {\n        arg1 = (*_sym.imp.USER32.dll_GetWindow)(arg1, uVar3);\n        if (arg1 == 0) {\n            return 0;\n        }\n        iVar1 = (*_sym.imp.USER32.dll_GetDlgCtrlID)(arg1);\n        if ((iVar1 != 0xffff) &&\n           (uVar2 = (*_sym.imp.USER32.dll_GetWindowLongA)(arg1, 0xfffffff0),  (uVar2 >> 0x1c & 1) != 0)) {\n            (*_sym.imp.USER32.dll_GetWindowRect)(arg1, auStack24);\n            iVar1 = (*_sym.imp.USER32.dll_PtInRect)(auStack24, auStackX16[0]);\n            if (iVar1 != 0) {\n                return arg1;\n            }\n        }\n        uVar3 = 2;\n    } while( true );\n}\n",
        "token_count": 300
    },
    "140022cd": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint64_t fcn.140022cd8(int64_t *arg1, code *arg2)\n\n{\n    int64_t iVar1;\n    \n    if (*arg1 == 0) {\n        fcn.1400240f0(0x10);\n        if (*arg1 == 0) {\n            iVar1 = (*arg2)();\n            *arg1 = iVar1;\n        }\n        fcn.140024184(0x10);\n    }\n    return *arg1;\n}\n",
        "token_count": 105
    },
    "14002436": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\ncode ** fcn.14002436c(code **arg1, code *arg2, code *arg3, code *arg4)\n\n{\n    code *pcVar1;\n    code **ppcVar2;\n    code *in_stack_00000028;\n    uint in_stack_00000030;\n    \n    *arg1 = vtable.CHandleMap.0;\n    fcn.14004bf48(arg1 + 1, *(arg2 + 8), 0x40);\n    fcn.14003a5f0(arg1 + 6, 10);\n    fcn.14003a5f0(arg1 + 0xd, 4);\n    if (arg3 == NULL) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        ppcVar2 = (*pcVar1)();\n        return ppcVar2;\n    }\n    if (arg4 == NULL) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        ppcVar2 = (*pcVar1)();\n        return ppcVar2;\n    }\n    fcn.14003a348(arg1 + 0xd, 7, 0);\n    arg1[0x14] = arg2;\n    arg1[4] = arg3;\n    arg1[5] = arg4;\n    arg1[0x15] = in_stack_00000028;\n    *(arg1 + 0x16) = in_stack_00000030;\n    return arg1;\n}\n",
        "token_count": 331
    },
    "1400246f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nbool fcn.1400246f4(ulong arg1)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    uint64_t uVar4;\n    int64_t arg1_00;\n    ulong uVar5;\n    uint32_t uVar6;\n    \n    iVar1 = fcn.140017b90();\n    arg1_00 = 0;\n    if (*(iVar1 + 0x20) != 0) {\n        uVar6 = *(iVar1 + 0x20) - 1;\n        uVar4 = uVar6;\n        *(iVar1 + 0x20) = uVar6;\n        if (uVar6 == 0) {\n            if (arg1 != 0) {\n                if (arg1 != -1) {\n                    iVar2 = fcn.1400063f8();\n                    if ((iVar2 != 0) && (*(iVar2 + 0x78) != NULL)) {\n                        uVar4 = 0;\n                        (**(iVar2 + 0x78))(0);\n                    }\n                }\n                fcn.14002453c(*(iVar1 + 0x40), uVar4);\n                fcn.14002453c(*(iVar1 + 0x38), uVar4);\n                fcn.14002453c(*(iVar1 + 0x30), uVar4);\n                fcn.14002453c(*(iVar1 + 0x28), uVar4);\n                fcn.14002453c(*(iVar1 + 0x48), uVar4);\n            }\n            iVar2 = fcn.140017ad4();\n            iVar2 = *(iVar2 + 8);\n            iVar3 = fcn.140022cb4(0x1400de580);\n            if ((iVar3 != 0) && (iVar2 != 0)) {\n                if (*(iVar3 + 0x18) != 0) {\n                    uVar4 = fcn.14006c7a8(*(iVar3 + 0x18));\n                    if (*(iVar2 + 0x128) <= uVar4) goto code_r0x000140024813;\n                }\n                if (*(iVar2 + 0x128) != 0) {\n                    if (*(iVar3 + 0x18) != 0) {\n                        arg1_00 = fcn.14006c7a8(*(iVar3 + 0x18));\n                        fcn.140069e50(*(iVar3 + 0x18));\n                    }\n                    iVar2 = fcn.140069d98(*(iVar2 + 0x128));\n                    *(iVar3 + 0x18) = iVar2;\n                    if ((iVar2 == 0) && (arg1_00 != 0)) {\n                        uVar5 = fcn.140069d98(arg1_00);\n                        *(iVar3 + 0x18) = uVar5;\n                    }\n                }\n            }\n        }\n    }\ncode_r0x000140024813:\n    return *(iVar1 + 0x20) != 0;\n}\n",
        "token_count": 670
    },
    "14002483": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nbool fcn.140024838(ulong arg1, ulong lpString, int64_t arg3)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    bool bVar3;\n    ulong uStackX24;\n    \n    if (arg3 == 0) {\n        (*_sym.imp.KERNEL32.dll_lstrlenA)(lpString);\n        iVar1 = fcn.14004536c(0xffffffff80000000, arg1, 1, lpString);\n        bVar3 = iVar1 == 0;\n    }\n    else {\n        iVar1 = fcn.140045024(0xffffffff80000000, arg1, &uStackX24);\n        if (iVar1 == 0) {\n            iVar1 = (*_sym.imp.KERNEL32.dll_lstrlenA)(lpString);\n            iVar1 = (*_sym.imp.ADVAPI32.dll_RegSetValueExA)(uStackX24, arg3, 0, 1, lpString, iVar1 + 1);\n            iVar2 = (*_sym.imp.ADVAPI32.dll_RegCloseKey)(uStackX24);\n            if ((iVar2 == 0) && (iVar1 == 0)) {\n                return true;\n            }\n        }\n        bVar3 = false;\n    }\n    return bVar3;\n}\n",
        "token_count": 281
    },
    "140025e2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint64_t * fcn.140025e28(int64_t *arg1, uint64_t arg2, int64_t *psa)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int64_t *piVar3;\n    int64_t iVar4;\n    \n    if (psa == NULL) {\n        fcn.1400031e0(0x80004005);\n        pcVar1 = swi(3);\n        piVar3 = (*pcVar1)();\n        return piVar3;\n    }\n    iVar4 = (**(*psa + 0x18))(psa);\n    *arg1 = iVar4 + 0x18;\n    if (arg2 == 0) {\n        uVar2 = 0;\n    }\n    else {\n        if ((arg2 & 0xffffffffffff0000) == 0) {\n            iVar4 = fcn.140017ddc(arg2 & 0xffff);\n            if (iVar4 == 0) {\n                return arg1;\n            }\n            fcn.140002fd0(arg1, iVar4, arg2 & 0xffff);\n            return arg1;\n        }\n        uVar2 = fcn.1400699a0(arg2);\n    }\n    fcn.140005294(arg1, arg2, uVar2);\n    return arg1;\n}\n",
        "token_count": 293
    },
    "14002921": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\ncode ** fcn.140029218(code **arg1, ulong arg2, ulong arg3, int64_t arg4)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int64_t *piVar3;\n    code **ppcVar4;\n    int64_t iVar5;\n    uint64_t arg3_00;\n    \n    fcn.1400207c8(arg1);\n    *arg1 = vtable.CFileException.0;\n    piVar3 = fcn.140017fc0();\n    arg3_00 = 0;\n    if (piVar3 == NULL) {\n        fcn.1400031e0(0x80004005);\n        pcVar1 = swi(3);\n        ppcVar4 = (*pcVar1)();\n        return ppcVar4;\n    }\n    iVar5 = (**(*piVar3 + 0x18))(piVar3);\n    arg1[3] = iVar5 + 0x18;\n    *(arg1 + 2) = arg2;\n    *(arg1 + 0x14) = arg3;\n    if (arg4 != 0) {\n        uVar2 = fcn.1400699a0(arg4);\n        arg3_00 = uVar2;\n    }\n    fcn.140005294(arg1 + 3, arg4, arg3_00);\n    return arg1;\n}\n",
        "token_count": 306
    },
    "1400296c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nuint64_t fcn.1400296c8(ulong noname_0, ulong arg2, ulong arg3, ulong *arg4)\n\n{\n    int32_t *piVar1;\n    int64_t iVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    int64_t *piVar5;\n    uint64_t uVar6;\n    int64_t iVar7;\n    code *pcVar8;\n    int64_t iStackX32;\n    int64_t iStack24;\n    ulong uStack16;\n    \n    uStack16 = 0xfffffffffffffffe;\n    *arg4 = 0;\n    fcn.140029500(&iStackX32, arg2);\n    piVar5 = fcn.140017fc0();\n    if (piVar5 != NULL) {\n        iStack24 = (**(*piVar5 + 0x18))(piVar5);\n        iStack24 = iStack24 + 0x18;\n        iVar3 = fcn.140028a74(iStackX32, &iStack24);\n        iVar2 = iStack24;\n        if (iVar3 == 0) {\n            LOCK();\n            piVar1 = iStack24 + -8;\n            iVar3 = *piVar1;\n            *piVar1 = *piVar1 + -1;\n            if (iVar3 + -1 < 1) {\n                (**(**(iStack24 + -0x18) + 8))();\n            }\n            LOCK();\n            piVar1 = iStackX32 + -8;\n            iVar3 = *piVar1;\n            *piVar1 = *piVar1 + -1;\n            if (iVar3 + -1 < 1) {\n                (**(**(iStackX32 + -0x18) + 8))();\n            }\n            uVar6 = 0x80040154;\n        }\n        else {\n            iVar7 = fcn.14000d578(iStack24);\n            if (iVar7 == 0) {\n                LOCK();\n                piVar1 = iVar2 + -8;\n                iVar3 = *piVar1;\n                *piVar1 = *piVar1 + -1;\n                if (iVar3 + -1 < 1) {\n                    (**(**(iVar2 + -0x18) + 8))();\n                }\n                LOCK();\n                piVar1 = iStackX32 + -8;\n                iVar3 = *piVar1;\n                *piVar1 = *piVar1 + -1;\n                if (iVar3 + -1 < 1) {\n                    (**(**(iStackX32 + -0x18) + 8))();\n                }\n                uVar6 = 0x80040154;\n            }\n            else {\n                pcVar8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar7, \"DllGetClassObject\");\n                if (pcVar8 == NULL) {\n                    LOCK();\n                    piVar1 = iVar2 + -8;\n                    iVar3 = *piVar1;\n                    *piVar1 = *piVar1 + -1;\n                    if (iVar3 + -1 < 1) {\n                        (**(**(iVar2 + -0x18) + 8))();\n                    }\n                    LOCK();\n                    piVar1 = iStackX32 + -8;\n                    iVar3 = *piVar1;\n                    *piVar1 = *piVar1 + -1;\n                    if (iVar3 + -1 < 1) {\n                        (**(**(iStackX32 + -0x18) + 8))();\n                    }\n                    uVar6 = 0x800401f9;\n                }\n                else {\n                    uVar4 = (*pcVar8)(arg2, arg3, arg4);\n                    uVar6 = uVar4;\n                    LOCK();\n                    piVar1 = iVar2 + -8;\n                    iVar3 = *piVar1;\n                    *piVar1 = *piVar1 + -1;\n                    if (iVar3 + -1 < 1) {\n                        (**(**(iVar2 + -0x18) + 8))();\n                    }\n                    LOCK();\n                    piVar1 = iStackX32 + -8;\n                    iVar3 = *piVar1;\n                    *piVar1 = *piVar1 + -1;\n                    if (iVar3 + -1 < 1) {\n                        (**(**(iStackX32 + -0x18) + 8))();\n                    }\n                }\n            }\n        }\n        return uVar6;\n    }\n    fcn.1400031e0(0x80004005);\n    pcVar8 = swi(3);\n    uVar6 = (*pcVar8)();\n    return uVar6;\n}\n",
        "token_count": 1017
    },
    "1400298a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nuint64_t fcn.1400298a0(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    uint32_t uVar1;\n    uint64_t uVar2;\n    ulong *in_stack_00000028;\n    int64_t *apiStack24 [2];\n    \n    apiStack24[0] = NULL;\n    if (in_stack_00000028 == NULL) {\n        uVar2 = 0x80070057;\n    }\n    else {\n        *in_stack_00000028 = 0;\n        uVar2 = fcn.1400296c8(arg1, arg2, 0x1400b60b8, apiStack24);\n        if (-1 < uVar2) {\n            if (apiStack24[0] == NULL) {\n                uVar2 = 0x80004003;\n            }\n            else {\n                uVar1 = (**(*apiStack24[0] + 0x18))(apiStack24[0], arg3, arg4, in_stack_00000028);\n                uVar2 = uVar1;\n                (**(*apiStack24[0] + 0x10))();\n            }\n        }\n    }\n    return uVar2;\n}\n",
        "token_count": 269
    },
    "14002b29": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nbool fcn.14002b29c(int64_t *arg1, ulong arg2)\n\n{\n    int64_t *piVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int64_t iVar4;\n    ulong uVar5;\n    ulong in_R8;\n    ulong in_R9;\n    \n    if (arg1[0x13] == 0) {\n        iVar2 = (**(*arg1 + 600))(arg1, arg1 + 0x13, in_R8, in_R9, 0xfffffffffffffffe);\n        if ((iVar2 != 0) && (arg1[0x13] == 0)) {\n            iVar4 = fcn.140017ad4();\n            iVar4 = (**(**(iVar4 + 0x68) + 0x10))(*(iVar4 + 0x68), arg1);\n            arg1[0x13] = iVar4;\n        }\n        if (arg2 == 0) {\n            iVar4 = *arg1[0x13];\n            uVar5 = (**(*arg1 + 0x270))(arg1);\n            (**(iVar4 + 0x140))(arg1[0x13], uVar5);\n        }\n    }\n    piVar1 = arg1 + 0x13;\n    if (*piVar1 != 0) {\n        while ((*(arg1 + 0xf) >> 8 & 1) == 0) {\n            *(arg1 + 0xf) = *(arg1 + 0xf) | 0x100;\n            uVar5 = (*_sym.imp.USER32.dll_GetParent)(arg1[8]);\n            arg1 = fcn.14000fc08(uVar5);\n            iVar4 = 0;\n            if (arg1 != NULL) {\n                iVar4 = arg1[8];\n            }\n            uVar3 = (*_sym.imp.USER32.dll_GetWindowLongA)(iVar4, 0xfffffff0);\n            if (((uVar3 >> 0x1e & 1) == 0) || (arg1 == NULL)) break;\n        }\n    }\n    return *piVar1 != 0;\n}\n",
        "token_count": 475
    },
    "14002c62": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\ncode ** fcn.14002c624(code **arg1, code *arg2)\n\n{\n    fcn.140005f80(arg1);\n    *arg1 = vtable.COleControlContainer.0;\n    arg1[8] = arg2;\n    fcn.14003a5f0(arg1 + 9, 10);\n    fcn.14003aea8(arg1 + 0x10, 10);\n    arg1[0x10] = vtable.CTypedPtrList_class_CPtrList__struct_COleControlSiteOrWnd____ptr64_.0;\n    *(arg1 + 0x17) = 0xffffffff;\n    *(arg1 + 0xbc) = 0xffffffff;\n    arg1[0x18] = NULL;\n    arg1[0x19] = NULL;\n    arg1[0x1a] = NULL;\n    arg1[0x1b] = NULL;\n    *(arg1 + 0x1c) = 0;\n    arg1[0x1d] = vtable.COleControlContainer::XOleIPFrame.0;\n    arg1[0x1e] = vtable.COleControlContainer::XOleContainer.0;\n    return arg1;\n}\n",
        "token_count": 272
    },
    "14002cf2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nulong fcn.14002cf2c(int16_t *arg1, ulong *arg2)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    ulong uVar3;\n    ulong uVar4;\n    int16_t iStack24;\n    int16_t iStack22;\n    int16_t iStack18;\n    int16_t iStack16;\n    int16_t iStack14;\n    int16_t iStack12;\n    \n    uVar3 = 0;\n    uVar4 = 0;\n    if (arg2 == NULL) {\n        fcn.1400031e0(0x80004005);\n        pcVar1 = swi(3);\n        uVar3 = (*pcVar1)();\n        return uVar3;\n    }\n    iVar2 = (*_sym.imp.OLEAUT32.dll_VariantTimeToSystemTime)();\n    fcn.1400698a0(&iStack24, 0, 0x10);\n    if (iVar2 != 0) {\n        iVar2 = (*_sym.imp.OLEAUT32.dll_UnRegisterTypeLib)(*arg2);\n        if ((((iVar2 != 0) && (*arg1 == iStack24)) && (uVar3 = uVar4,  arg1[1] == iStack22)) &&\n           (((arg1[3] == iStack18 && (arg1[4] == iStack16)) && ((arg1[5] == iStack14 && (arg1[6] == iStack12)))))) {\n            uVar3 = 1;\n        }\n    }\n    return uVar3;\n}\n",
        "token_count": 347
    },
    "14002ed6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nuint32_t fcn.14002ed6c(int64_t arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    ushort uStack24;\n    ushort uStack22;\n    ushort uStack18;\n    \n    fcn.1400698a0(&uStack24, 0, 0x10);\n    uStack24 = arg2;\n    uStack22 = arg3;\n    uStack18 = arg4;\n    iVar1 = fcn.14002cf2c(&uStack24, arg1);\n    *(arg1 + 8) = iVar1 == 0;\n    return iVar1 == 0;\n}\n",
        "token_count": 147
    },
    "14003505": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.14003505c(int64_t **arg1)\n\n{\n    int64_t *piVar1;\n    int64_t *arg2;\n    \n    piVar1 = arg1[4];\n    if (piVar1 != NULL) {\n        arg2 = *arg1;\n        if (arg2 != NULL) {\n            fcn.140032bbc(piVar1, arg2);\n            fcn.140031e64(piVar1, arg2);\n        }\n        piVar1 = arg1[4];\n        if (piVar1 != NULL) {\n            (*_sym.imp.ole32.dll_CoTaskMemFree)(piVar1[5]);\n            piVar1[5] = 0;\n            (*_sym.imp.ole32.dll_CoTaskMemFree)(piVar1[6]);\n            piVar1[6] = 0;\n            fcn.1400036d8(piVar1[2]);\n            piVar1[2] = 0;\n            fcn.1400036d8(piVar1[4]);\n            piVar1[4] = 0;\n            piVar1[3] = 0;\n            fcn.1400036d8(piVar1);\n        }\n        arg1[4] = NULL;\n    }\n    piVar1 = *arg1;\n    if (piVar1 != NULL) {\n        if (arg1[3] != NULL) {\n            (**(*piVar1 + 0x30))(piVar1, 1, arg1 + 3, 0, 0, 0);\n            arg1[3] = NULL;\n        }\n        piVar1 = *arg1;\n        if (piVar1 != NULL) {\n            *arg1 = NULL;\n            (**(*piVar1 + 0x10))();\n        }\n        piVar1 = arg1[1];\n        if (piVar1 != NULL) {\n            arg1[1] = NULL;\n            (**(*piVar1 + 0x10))();\n        }\n    }\n    return;\n}\n",
        "token_count": 443
    },
    "14003540": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\ncode ** fcn.140035400(code **arg1, code *arg2)\n\n{\n    code *pcVar1;\n    int64_t *piVar2;\n    code **ppcVar3;\n    int64_t iVar4;\n    \n    fcn.140005f80(arg1);\n    *arg1 = vtable.COleControlSite.0;\n    arg1[8] = arg2;\n    arg1[10] = NULL;\n    *(arg1 + 0xb) = 0xffffffff;\n    arg1[0x10] = NULL;\n    arg1[0x11] = NULL;\n    arg1[0x12] = NULL;\n    arg1[0x13] = NULL;\n    *(arg1 + 0x14) = 0;\n    *(arg1 + 0xa4) = 0;\n    *(arg1 + 0x16) = 0;\n    *(arg1 + 0xb4) = 0;\n    *(arg1 + 0x1a) = 0;\n    *(arg1 + 0xd4) = 0;\n    arg1[0x1b] = NULL;\n    arg1[0x1c] = NULL;\n    arg1[0x1d] = NULL;\n    *(arg1 + 0x1e) = 0;\n    *(arg1 + 0xf4) = 0;\n    piVar2 = fcn.140017fc0();\n    if (piVar2 == NULL) {\n        fcn.1400031e0(0x80004005);\n        pcVar1 = swi(3);\n        ppcVar3 = (*pcVar1)();\n        return ppcVar3;\n    }\n    iVar4 = (**(*piVar2 + 0x18))(piVar2);\n    arg1[0x1f] = iVar4 + 0x18;\n    *(arg1 + 0x20) = 0;\n    fcn.140052c04(arg1 + 0x24);\n    arg1[0x26] = NULL;\n    arg1[0x27] = vtable.COleControlSite::XOleClientSite.0;\n    arg1[0x28] = vtable.COleControlSite::XOleIPSite.0;\n    arg1[0x29] = vtable.COleControlSite::XOleControlSite.0;\n    arg1[0x2a] = vtable.COleControlSite::XAmbientProps.0;\n    arg1[0x2b] = vtable.COleControlSite::XPropertyNotifySink.0;\n    arg1[0x2c] = vtable.COleControlSite::XEventSink.0;\n    arg1[0x2d] = vtable.COleControlSite::XBoundObjectSite.0;\n    arg1[0x2e] = vtable.COleControlSite::XNotifyDBEvents.0;\n    arg1[0x2f] = vtable.COleControlSite::XRowsetNotify.0;\n    fcn.1400698a0(arg1 + 0x21, 0, 0x18);\n    *(arg1 + 0x21) = 0;\n    return arg1;\n}\n",
        "token_count": 711
    },
    "1400359f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.1400359f8(code **arg1)\n\n{\n    ulong *puVar1;\n    code *pcVar2;\n    int64_t **ppiVar3;\n    int64_t *piVar4;\n    ulong *puVar5;\n    ulong arg2;\n    int32_t iVar6;\n    uint64_t uVar7;\n    uint32_t uVar8;\n    uint64_t uVar9;\n    uint64_t uVar10;\n    ulong in_R9;\n    int64_t **ppiStackX16;\n    int64_t *apiStackX24 [2];\n    \n    *arg1 = vtable.CDataSourceControl.0;\n    uVar10 = 0;\n    if ((((*(arg1 + 0x16) != 0) && (arg1[0x14] != NULL)) &&\n        (puVar1 = *arg1[0x14],  iVar6 = (***puVar1)(puVar1, 0x1400b67f8, apiStackX24, in_R9, 0xfffffffffffffffe), \n        -1 < iVar6)) && (apiStackX24[0] != NULL)) {\n        ppiStackX16 = NULL;\n        iVar6 = (**(*apiStackX24[0] + 0x20))(apiStackX24[0], 0x1400b6b78, &ppiStackX16);\n        if ((-1 < iVar6) && (ppiStackX16 != NULL)) {\n            (*(*ppiStackX16)[6])(ppiStackX16, *(arg1 + 0x16));\n            (*(*ppiStackX16)[2])();\n        }\n        (**(*apiStackX24[0] + 0x10))();\n    }\n    pcVar2 = arg1[9];\n    while (((pcVar2 != NULL && (ppiVar3 = *(arg1[7] + 0x10),  ppiVar3 != NULL)) && (piVar4 = *ppiVar3,  piVar4 != NULL))\n          ) {\n        (**(*piVar4 + 0x178))(piVar4, *(ppiVar3 + 0xc), 0);\n        (*ppiVar3)[0x1d] = 0;\n        pcVar2 = arg1[9];\n    }\n    fcn.14003ad34(arg1 + 6);\n    if (arg1[0x10] != NULL) {\n        uVar7 = uVar10;\n        uVar9 = uVar10;\n        if (0 < arg1[0xe]) {\n            do {\n                (*_sym.imp.OLEAUT32.dll_VariantCopy)(arg1[0x10] + uVar7 * 0x18);\n                uVar8 = uVar9 + 1;\n                uVar7 = uVar8;\n                uVar9 = uVar8;\n            } while (uVar8 < arg1[0xe]);\n        }\n        if (arg1[0xe] != NULL) {\n            fcn.1400036d8(arg1[0xf]);\n            fcn.1400036d8(arg1[0x10]);\n        }\n    }\n    if (arg1[2] != NULL) {\n        (**(*arg1[2] + 0x10))();\n    }\n    if (arg1[3] != NULL) {\n        (**(*arg1[3] + 0x10))();\n    }\n    if (arg1[5] != NULL) {\n        uVar7 = uVar10;\n        if (0 < arg1[4]) {\n            do {\n                puVar1 = *(*(arg1[5] + uVar10 + 0x38) + 8);\n                while (puVar1 != NULL) {\n                    if (puVar1 == NULL) {\n                        fcn.140020780();\n                        pcVar2 = swi(3);\n                        (*pcVar2)();\n                        return;\n                    }\n                    puVar5 = *puVar1;\n                    *(puVar1[2] + 0xe8) = 0;\n                    puVar1 = puVar5;\n                }\n                fcn.14003ad34(*(arg1[5] + uVar10 + 0x38));\n                piVar4 = *(arg1[5] + uVar10 + 0x38);\n                if (piVar4 != NULL) {\n                    (**(*piVar4 + 8))(piVar4, 1);\n                }\n                uVar8 = uVar7 + 1;\n                uVar7 = uVar8;\n                uVar10 = uVar10 + 0x40;\n            } while (uVar8 < arg1[4]);\n        }\n        (*_sym.imp.ole32.dll_CoTaskMemFree)(arg1[5]);\n    }\n    if (arg1[0xd] != NULL) {\n        (*_sym.imp.ole32.dll_CoTaskMemFree)();\n    }\n    pcVar2 = arg1[0x15];\n    if (pcVar2 != NULL) {\n        arg2 = *arg1[0x14];\n        fcn.140032bbc(pcVar2, arg2);\n        fcn.140031e64(pcVar2, arg2);\n        pcVar2 = arg1[0x15];\n        (*_sym.imp.ole32.dll_CoTaskMemFree)(*(pcVar2 + 0x28));\n        *(pcVar2 + 0x28) = 0;\n        (*_sym.imp.ole32.dll_CoTaskMemFree)(*(pcVar2 + 0x30));\n        *(pcVar2 + 0x30) = 0;\n        fcn.1400036d8(*(pcVar2 + 0x10));\n        *(pcVar2 + 0x10) = 0;\n        fcn.1400036d8(*(pcVar2 + 0x20));\n        *(pcVar2 + 0x20) = 0;\n        *(pcVar2 + 0x18) = 0;\n    }\n    pcVar2 = arg1[0x15];\n    if (pcVar2 != NULL) {\n        (*_sym.imp.ole32.dll_CoTaskMemFree)(*(pcVar2 + 0x28));\n        *(pcVar2 + 0x28) = 0;\n        (*_sym.imp.ole32.dll_CoTaskMemFree)(*(pcVar2 + 0x30));\n        *(pcVar2 + 0x30) = 0;\n        fcn.1400036d8(*(pcVar2 + 0x10));\n        *(pcVar2 + 0x10) = 0;\n        fcn.1400036d8(*(pcVar2 + 0x20));\n        *(pcVar2 + 0x20) = 0;\n        *(pcVar2 + 0x18) = 0;\n        fcn.1400036d8(pcVar2);\n    }\n    ppiVar3 = arg1[0x14];\n    ppiStackX16 = ppiVar3;\n    if (ppiVar3 != NULL) {\n        fcn.14003505c(ppiVar3);\n        if (ppiVar3[1] != NULL) {\n            (**(*ppiVar3[1] + 0x10))();\n        }\n        if (*ppiVar3 != NULL) {\n            (**(**ppiVar3 + 0x10))();\n        }\n        fcn.1400036d8(ppiVar3);\n    }\n    if (arg1[0x13] != NULL) {\n        (**(*arg1[0x13] + 0x10))();\n    }\n    if (arg1[0x12] != NULL) {\n        (**(*arg1[0x12] + 0x10))();\n    }\n    arg1[6] = vtable.CPtrList.0;\n    arg1[9] = NULL;\n    arg1[10] = NULL;\n    arg1[8] = NULL;\n    arg1[7] = NULL;\n    fcn.14002aadc(arg1[0xb]);\n    arg1[0xb] = NULL;\n    return;\n}\n",
        "token_count": 1776
    },
    "14003837": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\ncode ** fcn.14003837c(code **arg1, ulong arg2, int64_t arg3)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int64_t *piVar3;\n    code **ppcVar4;\n    int64_t iVar5;\n    uint64_t arg3_00;\n    \n    fcn.1400207c8(arg1);\n    *arg1 = vtable.CArchiveException.0;\n    piVar3 = fcn.140017fc0();\n    arg3_00 = 0;\n    if (piVar3 == NULL) {\n        fcn.1400031e0(0x80004005);\n        pcVar1 = swi(3);\n        ppcVar4 = (*pcVar1)();\n        return ppcVar4;\n    }\n    iVar5 = (**(*piVar3 + 0x18))(piVar3);\n    arg1[3] = iVar5 + 0x18;\n    *(arg1 + 2) = arg2;\n    if (arg3 != 0) {\n        uVar2 = fcn.1400699a0(arg3);\n        arg3_00 = uVar2;\n    }\n    fcn.140005294(arg1 + 3, arg3, arg3_00);\n    return arg1;\n}\n",
        "token_count": 289
    },
    "1400384a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.1400384a8(ulong arg1, ulong arg2)\n\n{\n    code *pcVar1;\n    ulong uStackX24;\n    int64_t iStackX32;\n    \n    iStackX32 = fcn.140003694(0x20);\n    uStackX24 = 0;\n    if (iStackX32 != 0) {\n        uStackX24 = fcn.14003837c(iStackX32, arg1, arg2);\n    }\n    fcn.14006ba84(&uStackX24, 0x1400d30c8);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 152
    },
    "140039d7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\ncode ** fcn.140039d78(code **arg1, code *arg2, ulong arg3, ulong arg4)\n\n{\n    code **ppcVar1;\n    code *pcVar2;\n    \n    fcn.1400288d8(arg1);\n    *arg1 = vtable.CMemFile.0;\n    if ((arg2 == NULL) && (arg3 != 0)) {\n        fcn.140020780();\n        pcVar2 = swi(3);\n        ppcVar1 = (*pcVar2)();\n        return ppcVar1;\n    }\n    arg1[4] = arg4;\n    arg1[5] = NULL;\n    arg1[6] = arg3;\n    pcVar2 = NULL;\n    if (arg4 == 0) {\n        pcVar2 = arg3;\n    }\n    arg1[7] = pcVar2;\n    arg1[8] = arg2;\n    *(arg1 + 9) = 0;\n    return arg1;\n}\n",
        "token_count": 220
    },
    "14003f0e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint64_t * fcn.14003f0ec(int64_t *arg1, uint64_t arg2, int64_t *psa)\n\n{\n    code *pcVar1;\n    int64_t *piVar2;\n    int64_t iVar3;\n    ulong in_R9;\n    \n    if (psa == NULL) {\n        fcn.1400031e0(0x80004005);\n        pcVar1 = swi(3);\n        piVar2 = (*pcVar1)();\n        return piVar2;\n    }\n    iVar3 = (**(*psa + 0x18))(psa);\n    *arg1 = iVar3 + 0x18;\n    if ((arg2 == 0) || ((arg2 & 0xffffffffffff0000) != 0)) {\n        fcn.14001f070(arg1, arg2, psa, in_R9);\n    }\n    else {\n        iVar3 = fcn.140017ddc(arg2 & 0xffff);\n        if (iVar3 != 0) {\n            fcn.140002fd0(arg1, iVar3, arg2 & 0xffff);\n        }\n    }\n    return arg1;\n}\n",
        "token_count": 258
    },
    "14003f51": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\ncode ** fcn.14003f510(code **arg1, ulong arg2)\n\n{\n    code *pcVar1;\n    \n    pcVar1 = fcn.140017fc0();\n    *arg1 = vtable.ATL::CFixedStringMgr.0;\n    arg1[1] = pcVar1;\n    arg1[2] = arg1 + 4;\n    *(arg1 + 6) = 0xffffffff;\n    *(arg1[2] + 8) = 0;\n    *(arg1[2] + 0xc) = 0x40;\n    *arg1[2] = arg1;\n    *(arg1[2] + 0x18) = 0;\n    fcn.14003f0ec(arg1 + 3, arg2, arg1);\n    *arg1 = \n    vtable.ATL::CFixedStringT_class_ATL::CStringT_char__class_StrTraitMFC_char__class_ATL::ChTraitsCRT_char_____64_.0;\n    return arg1;\n}\n",
        "token_count": 229
    },
    "14003f59": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint64_t * fcn.14003f598(int64_t *arg1, uint64_t arg2, int64_t *psa)\n\n{\n    code *pcVar1;\n    int64_t *piVar2;\n    int64_t iVar3;\n    ulong in_R9;\n    \n    if (psa == NULL) {\n        fcn.1400031e0(0x80004005);\n        pcVar1 = swi(3);\n        piVar2 = (*pcVar1)();\n        return piVar2;\n    }\n    iVar3 = (**(*psa + 0x18))(psa);\n    *arg1 = iVar3 + 0x18;\n    if ((arg2 == 0) || ((arg2 & 0xffffffffffff0000) != 0)) {\n        fcn.14001f7c0(arg1, arg2, psa, in_R9);\n    }\n    else {\n        iVar3 = fcn.140017ddc(arg2 & 0xffff);\n        if (iVar3 != 0) {\n            fcn.14001f898(arg1, iVar3, arg2 & 0xffff);\n        }\n    }\n    return arg1;\n}\n",
        "token_count": 259
    },
    "14003f62": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nulong fcn.14003f624(ulong *arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    code *pcVar3;\n    uint32_t uVar4;\n    ulong *puVar5;\n    ulong uVar6;\n    int64_t aiStack24 [2];\n    \n    puVar5 = fcn.14002010c(aiStack24, arg2);\n    uVar4 = (*_sym.imp.OLEAUT32.dll_VarCyFromDisp)(*puVar5, arg4, arg3, arg1);\n    LOCK();\n    piVar1 = aiStack24[0] + -8;\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 + -1 < 1) {\n        (**(**(aiStack24[0] + -0x18) + 8))();\n    }\n    if (uVar4 < 0) {\n        if (uVar4 == 0x80020005) {\n            *arg1 = 0;\n        }\n        else {\n            if (uVar4 != 0x8002000a) {\n                if (uVar4 == 0x8007000e) {\n                    fcn.140020738();\n                    pcVar3 = swi(3);\n                    uVar6 = (*pcVar3)();\n                    return uVar6;\n                }\n                fcn.14001e6c4(uVar4);\n                pcVar3 = swi(3);\n                uVar6 = (*pcVar3)();\n                return uVar6;\n            }\n            *arg1 = 0x8000000000000000;\n        }\n        *(arg1 + 1) = 1;\n        uVar6 = 0;\n    }\n    else {\n        *(arg1 + 1) = 0;\n        uVar6 = 1;\n    }\n    return uVar6;\n}\n",
        "token_count": 431
    },
    "14003fab": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\ncode ** fcn.14003fab4(code **arg1, ulong arg2)\n\n{\n    code *pcVar1;\n    \n    pcVar1 = fcn.140017fc0();\n    *arg1 = vtable.ATL::CFixedStringMgr.0;\n    arg1[1] = pcVar1;\n    arg1[2] = arg1 + 4;\n    *(arg1 + 6) = 0xffffffff;\n    *(arg1[2] + 8) = 0;\n    *(arg1[2] + 0xc) = 0x100;\n    *arg1[2] = arg1;\n    *(arg1[2] + 0x18) = 0;\n    fcn.14003f598(arg1 + 3, arg2, arg1);\n    *arg1 = \n    vtable.ATL::CFixedStringT_class_ATL::CStringT_wchar_t__class_StrTraitMFC_wchar_t__class_ATL::ChTraitsCRT_wchar_t_____256_.0\n    ;\n    return arg1;\n}\n",
        "token_count": 236
    },
    "1400404f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.1400404fc(code **arg1)\n\n{\n    code *pcVar1;\n    int64_t *piVar2;\n    int64_t iVar3;\n    ulong in_R8;\n    ulong in_R9;\n    ulong uVar4;\n    \n    uVar4 = 0xfffffffffffffffe;\n    *arg1 = vtable.CToolBar.0;\n    fcn.140022798(arg1 + 0x23);\n    piVar2 = arg1[0x27];\n    if (piVar2 != NULL) {\n        (**(*piVar2 + 8))(piVar2, 1, in_R8, in_R9, uVar4);\n    }\n    *(arg1 + 0xcc) = 0;\n    uVar4 = 0xfffffffffffffffe;\n    arg1[0x15] = NULL;\n    fcn.14005622c(arg1);\n    if (arg1[0x1e] != NULL) {\n        fcn.140046f4c(arg1[0x1e], arg1);\n    }\n    piVar2 = arg1[0x20];\n    arg1[0x20] = NULL;\n    if (piVar2 != NULL) {\n        (**(*piVar2 + 0x18))(piVar2, 1, in_R8, in_R9, uVar4);\n    }\n    if (arg1[0x1a] != NULL) {\n        fcn.140069e50(arg1[0x1a]);\n    }\n    iVar3 = fcn.140017b90();\n    if (*(iVar3 + 0xa0) == arg1) {\n        *(iVar3 + 0xa0) = 0;\n        *(iVar3 + 0x98) = 0xffffffffffffffff;\n    }\n    uVar4 = 0xfffffffffffffffe;\n    *arg1 = vtable.CWnd.0;\n    if ((((arg1[8] != NULL) && (arg1 != 0x1400de280)) && (arg1 != 0x1400de330)) &&\n       ((arg1 != 0x1400de3e0 && (arg1 != 0x1400de490)))) {\n        fcn.14000ff48(arg1);\n    }\n    piVar2 = arg1[0x13];\n    if (piVar2 != NULL) {\n        (**(*piVar2 + 8))(piVar2, 1, in_R8, in_R9, uVar4);\n    }\n    pcVar1 = arg1[0x14];\n    if ((pcVar1 != NULL) && (*(pcVar1 + 0x50) == arg1)) {\n        *(pcVar1 + 0x50) = 0;\n    }\n    if (arg1[4] != NULL) {\n        (**(arg1[4] + 0x38))();\n    }\n    arg1[7] = NULL;\n    return;\n}\n",
        "token_count": 641
    },
    "14005662": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.140056624(code **arg1)\n\n{\n    code *pcVar1;\n    int64_t *piVar2;\n    int64_t iVar3;\n    ulong in_R8;\n    ulong in_R9;\n    ulong uVar4;\n    \n    uVar4 = 0xfffffffffffffffe;\n    arg1[0x15] = NULL;\n    fcn.14005622c(arg1);\n    if (arg1[0x1e] != NULL) {\n        fcn.140046f4c(arg1[0x1e], arg1);\n    }\n    piVar2 = arg1[0x20];\n    arg1[0x20] = NULL;\n    if (piVar2 != NULL) {\n        (**(*piVar2 + 0x18))(piVar2, 1, in_R8, in_R9, uVar4);\n    }\n    if (arg1[0x1a] != NULL) {\n        fcn.140069e50(arg1[0x1a]);\n    }\n    iVar3 = fcn.140017b90();\n    if (*(iVar3 + 0xa0) == arg1) {\n        *(iVar3 + 0xa0) = 0;\n        *(iVar3 + 0x98) = 0xffffffffffffffff;\n    }\n    uVar4 = 0xfffffffffffffffe;\n    *arg1 = vtable.CWnd.0;\n    if ((((arg1[8] != NULL) && (arg1 != 0x1400de280)) && (arg1 != 0x1400de330)) &&\n       ((arg1 != 0x1400de3e0 && (arg1 != 0x1400de490)))) {\n        fcn.14000ff48(arg1);\n    }\n    piVar2 = arg1[0x13];\n    if (piVar2 != NULL) {\n        (**(*piVar2 + 8))(piVar2, 1, in_R8, in_R9, uVar4);\n    }\n    pcVar1 = arg1[0x14];\n    if ((pcVar1 != NULL) && (*(pcVar1 + 0x50) == arg1)) {\n        *(pcVar1 + 0x50) = 0;\n    }\n    if (arg1[4] != NULL) {\n        (**(arg1[4] + 0x38))();\n    }\n    arg1[7] = NULL;\n    return;\n}\n",
        "token_count": 536
    },
    "14004327": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.140043274(ulong arg1, uint64_t arg2, uint64_t arg3, ulong arg4)\n\n{\n    uint64_t arg2_00;\n    uint64_t arg3_00;\n    int32_t in_stack_00000028;\n    \n    arg3_00 = arg3 & 0xffffffff;\n    arg2_00 = arg2 & 0xffffffff;\n    fcn.1400431e0(arg1, arg2, arg3, arg4 - 1);\n    fcn.1400431e0(arg1, arg2_00, arg3_00, 1);\n    fcn.1400431e0(arg1, arg2_00 + arg4, arg3_00, 0xffffffff);\n    fcn.1400431e0(arg1, arg2_00, arg3_00 + in_stack_00000028, arg4);\n    return;\n}\n",
        "token_count": 200
    },
    "14004397": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint64_t fcn.140043974(int64_t arg1, ulong noname_1, ulong noname_2, ulong arg4)\n\n{\n    uint64_t uVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    \n    if (arg1 != 0) {\n        iVar2 = (*_sym.imp.KERNEL32.dll_lstrlenA)();\n        uVar1 = (iVar2 + 1U) * 2;\n        if (uVar1 < 0x100000000) {\n            iVar3 = (*_sym.imp.ole32.dll_CoTaskMemAlloc)(uVar1 & 0xffffffff);\n            if (iVar3 == 0) {\n                return 0;\n            }\n            iVar2 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)(0, 0, arg1, 0xffffffff, iVar3, iVar2 + 1U);\n            if (iVar2 != 0) {\n                return iVar3;\n            }\n            (*_sym.imp.ole32.dll_CoTaskMemFree)(iVar3);\n        }\n    }\n    return 0;\n}\n",
        "token_count": 243
    },
    "140044e3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nuint fcn.140044e30(ulong arg1, ulong arg2)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int64_t aiStackX24 [2];\n    \n    fcn.1400057dc(aiStackX24, arg2);\n    uVar3 = fcn.140007e98(arg1, aiStackX24);\n    LOCK();\n    piVar1 = aiStackX24[0] + -8;\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 + -1 < 1) {\n        (**(**(aiStackX24[0] + -0x18) + 8))();\n    }\n    return uVar3;\n}\n",
        "token_count": 175
    },
    "14004550": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint64_t * fcn.140045504(int64_t *arg1, ulong arg2)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int64_t psa;\n    int64_t *piVar3;\n    int64_t iStackX8;\n    \n    if (*(*arg1 + -0x18) == NULL) {\n        psa = 0;\n    }\n    else {\n        psa = (**(**(*arg1 + -0x18) + 0x20))();\n    }\n    if (psa == 0) {\n        piVar3 = fcn.140017fc0();\n        psa = (**(*piVar3 + 0x20))(piVar3);\n    }\n    fcn.14003f598(&iStackX8, arg2, psa);\n    fcn.140044388(arg1, iStackX8, *(iStackX8 + -0x10));\n    LOCK();\n    piVar1 = iStackX8 + -8;\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 + -1 < 1) {\n        (**(**(iStackX8 + -0x18) + 8))();\n    }\n    return arg1;\n}\n",
        "token_count": 286
    },
    "140046a0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.140046a0c(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    code *pcVar1;\n    int64_t arg1_00;\n    ulong uStackX32;\n    \n    arg1_00 = fcn.140003694(0x20);\n    uStackX32 = 0;\n    if (arg1_00 != 0) {\n        uStackX32 = fcn.140029218(arg1_00, arg1, arg2, arg3);\n    }\n    fcn.14006ba84(&uStackX32, 0x1400d3138);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 157
    },
    "14004a8f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\ncode ** fcn.14004a8f0(code **arg1)\n\n{\n    code *pcVar1;\n    int64_t *piVar2;\n    code **ppcVar3;\n    int64_t iVar4;\n    \n    fcn.14000d828(arg1);\n    *arg1 = vtable.CFrameWnd.0;\n    fcn.14003aea8(arg1 + 0x1d, 10);\n    piVar2 = fcn.140017fc0();\n    if (piVar2 == NULL) {\n        fcn.1400031e0(0x80004005);\n        pcVar1 = swi(3);\n        ppcVar3 = (*pcVar1)();\n        return ppcVar3;\n    }\n    iVar4 = (**(*piVar2 + 0x18))(piVar2);\n    arg1[0x2b] = iVar4 + 0x18;\n    *(arg1 + 0xac) = 0xffffffff;\n    *(arg1 + 0x15) = 1;\n    arg1[0x27] = NULL;\n    arg1[0x16] = NULL;\n    arg1[0x17] = NULL;\n    *(arg1 + 0x124) = 0;\n    *(arg1 + 0x25) = 0;\n    *(arg1 + 300) = 0;\n    arg1[0x26] = NULL;\n    *(arg1 + 0x28) = 0;\n    arg1[0x29] = NULL;\n    arg1[0x1c] = NULL;\n    arg1[0x2a] = NULL;\n    *(arg1 + 0x31) = 0;\n    (*_sym.imp.USER32.dll_SetRectEmpty)(arg1 + 0x1a);\n    *(arg1 + 0xc4) = 0;\n    *(arg1 + 0x18) = 0;\n    arg1[0x19] = NULL;\n    *(arg1 + 0x2c) = 0;\n    arg1[0x2d] = NULL;\n    *(arg1 + 0x24) = 0xffffffff;\n    *(arg1 + 0x2e) = 1;\n    *(arg1 + 0x174) = 1;\n    arg1[0x2f] = NULL;\n    *(arg1 + 0x30) = 0;\n    *(arg1 + 0x184) = 0;\n    fcn.14004a38c(arg1);\n    return arg1;\n}\n",
        "token_count": 564
    },
    "14004e45": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint64_t * fcn.14004e454(int64_t arg1, int64_t *arg2)\n\n{\n    int32_t *piVar1;\n    code *pcVar2;\n    uint64_t uVar3;\n    int32_t iVar4;\n    int64_t *piVar5;\n    int64_t iVar6;\n    ulong uVar7;\n    char *pcVar8;\n    int64_t iVar9;\n    int64_t arg2_00;\n    uint64_t uVar10;\n    uint64_t auStackX8 [2];\n    int64_t iStackX24;\n    int64_t iStackX32;\n    int64_t iStack56;\n    ulong uStack48;\n    \n    uStack48 = 0xfffffffffffffffe;\n    auStackX8[0] = auStackX8[0] & 0xffffffff00000000;\n    iVar6 = arg1;\n    if (*(arg1 + 0xf0) == 1) {\n        piVar5 = fcn.140017fc0();\n        uVar10 = piVar5 != NULL;\n        if (piVar5 == NULL) {\n            fcn.1400031e0(0x80004005);\n            pcVar2 = swi(3);\n            piVar5 = (*pcVar2)();\n            return piVar5;\n        }\n        iVar6 = (**(*piVar5 + 0x18))(piVar5);\n        auStackX8[0] = iVar6 + 0x18;\n        if (*(arg1 + 0x40) == 0) {\n            uVar7 = fcn.14004de80(arg1, &iStack56);\n            fcn.140007bbc(auStackX8, uVar7);\n            LOCK();\n            piVar1 = iStack56 + -8;\n            iVar4 = *piVar1;\n            *piVar1 = *piVar1 + -1;\n            if (iVar4 + -1 < 1) {\n                (**(**(iStack56 + -0x18) + 8))();\n            }\n        }\n        else {\n            uVar7 = fcn.14004e208(arg1, &iStackX32);\n            fcn.140007bbc(auStackX8, uVar7);\n            LOCK();\n            piVar1 = iStackX32 + -8;\n            iVar4 = *piVar1;\n            *piVar1 = *piVar1 + -1;\n            if (iVar4 + -1 < 1) {\n                (**(**(iStackX32 + -0x18) + 8))();\n            }\n        }\n        uVar3 = auStackX8[0];\n        iVar6 = 0xffffffff;\n        iVar9 = *(auStackX8[0] - 0xc);\n        iVar4 = fcn.14006b544(auStackX8[0], iVar9);\n        if ((-1 < iVar4) && (iVar4 <= *(uVar3 - 0xc))) {\n            *(uVar3 - 0x10) = iVar4;\n            *(iVar4 + uVar3) = 0;\n            pcVar8 = (*_sym.imp.SHLWAPI.dll_PathFindExtensionA)(uVar3);\n            if ((pcVar8 != NULL) && (*pcVar8 == '.')) {\n                fcn.1400057dc(arg2, pcVar8 + 1);\n                LOCK();\n                piVar1 = uVar3 - 8;\n                iVar4 = *piVar1;\n                *piVar1 = *piVar1 + -1;\n                if (0 < iVar4 + -1) {\n                    return arg2;\n                }\n                (**(**(uVar3 - 0x18) + 8))();\n                return arg2;\n            }\n            fcn.140004828(auStackX8, iVar9, uVar10);\n            uVar10 = auStackX8[0];\n            iVar6 = fcn.1400075ec(auStackX8[0] - 0x18);\n            *arg2 = iVar6 + 0x18;\n            LOCK();\n            piVar1 = uVar10 - 8;\n            iVar4 = *piVar1;\n            *piVar1 = *piVar1 + -1;\n            if (0 < iVar4 + -1) {\n                return arg2;\n            }\n            (**(**(uVar10 - 0x18) + 8))(*(uVar10 - 0x18), uVar10 - 0x18);\n            return arg2;\n        }\n        arg1 = 0x80070057;\n        fcn.1400031e0(0x80070057);\n    }\n    iVar9 = *(arg1 + 0xe8);\n    if (((*(iVar9 + 0x60) >> 0x13 & 1) != 0) && (*(iVar6 + 0x40) != 0)) {\n        piVar5 = fcn.140017fc0();\n        if (piVar5 == NULL) {\n            fcn.1400031e0(0x80004005);\n            pcVar2 = swi(3);\n            piVar5 = (*pcVar2)();\n            return piVar5;\n        }\n        iVar9 = (**(*piVar5 + 0x18))(piVar5);\n        iStackX24 = iVar9 + 0x18;\n        if ((*(iVar9 + 0xc) - 0x104U | 1U - *(iVar9 + 0x10)) < 0) {\n            fcn.1400033e0(&iStackX24, 0x104);\n        }\n        iVar9 = iStackX24;\n        uVar7 = (*_sym.imp.USER32.dll_GetParent)(*(iVar6 + 0x40));\n        iVar6 = fcn.14000fc08(uVar7);\n        uVar7 = 0x104;\n        iVar6 = (*_sym.imp.USER32.dll_SendMessageA)(*(iVar6 + 0x40), 0x464, 0x104, iVar9);\n        arg2_00 = *(iVar9 + -0xc);\n        iVar4 = fcn.14006b544(iVar9, arg2_00);\n        if ((-1 < iVar4) && (iVar4 <= *(iVar9 + -0xc))) {\n            *(iVar9 + -0x10) = iVar4;\n            *(iVar4 + iVar9) = 0;\n            if ((-1 < iVar6) &&\n               ((pcVar8 = (*_sym.imp.SHLWAPI.dll_PathFindExtensionA)(iVar9),  pcVar8 != NULL && (*pcVar8 == '.')))) {\n                fcn.1400057dc(arg2, pcVar8 + 1);\n                LOCK();\n                piVar1 = iVar9 + -8;\n                iVar4 = *piVar1;\n                *piVar1 = *piVar1 + -1;\n                if (0 < iVar4 + -1) {\n                    return arg2;\n                }\n                (**(**(iVar9 + -0x18) + 8))();\n                return arg2;\n            }\n            fcn.140004828(&iStackX24, arg2_00, uVar7);\n            iVar6 = iStackX24;\n            iVar9 = fcn.1400075ec(iStackX24 + -0x18);\n            *arg2 = iVar9 + 0x18;\n            LOCK();\n            piVar1 = iVar6 + -8;\n            iVar4 = *piVar1;\n            *piVar1 = *piVar1 + -1;\n            if (0 < iVar4 + -1) {\n                return arg2;\n            }\n            (**(**(iVar6 + -0x18) + 8))(*(iVar6 + -0x18), iVar6 + -0x18);\n            return arg2;\n        }\n        iVar9 = 0x80070057;\n        fcn.1400031e0(0x80070057);\n    }\n    iVar6 = *(iVar6 + 0x260);\n    if (iVar6 == 0) {\n        if (*(iVar9 + 0x66) == 0) {\n            fcn.1400057dc(arg2, 0x1400a0e8b);\n        }\n        else {\n            fcn.1400057dc(arg2, *(iVar9 + 0x66) + *(iVar9 + 0x30));\n        }\n    }\n    else if (*(iVar6 + 0x66) == 0) {\n        fcn.1400057dc(arg2, 0x1400a0e8b);\n    }\n    else {\n        fcn.1400057dc(arg2, *(iVar6 + 0x66) + *(iVar6 + 0x30));\n    }\n    return arg2;\n}\n",
        "token_count": 1926
    },
    "14004ee1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint64_t * fcn.14004ee14(int64_t *arg1, uint64_t arg2)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int64_t *piVar3;\n    int64_t iVar4;\n    \n    piVar3 = fcn.140017fc0();\n    if (piVar3 == NULL) {\n        fcn.1400031e0(0x80004005);\n        pcVar1 = swi(3);\n        piVar3 = (*pcVar1)();\n        return piVar3;\n    }\n    iVar4 = (**(*piVar3 + 0x18))(piVar3);\n    *arg1 = iVar4 + 0x18;\n    if (arg2 == 0) {\n        uVar2 = 0;\n    }\n    else {\n        if ((arg2 & 0xffffffffffff0000) == 0) {\n            iVar4 = fcn.140017ddc(arg2 & 0xffff);\n            if (iVar4 == 0) {\n                return arg1;\n            }\n            fcn.14001f898(arg1, iVar4, arg2 & 0xffff);\n            return arg1;\n        }\n        uVar2 = fcn.14006bd0c(arg2);\n    }\n    fcn.140018c68(arg1, arg2, uVar2);\n    return arg1;\n}\n",
        "token_count": 303
    },
    "140051be": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\ncode ** fcn.140051be8(code **arg1, int64_t arg2, ulong arg3)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int64_t *piVar3;\n    code **ppcVar4;\n    int64_t iVar5;\n    int16_t in_R9W;\n    \n    fcn.1400207c8(arg1);\n    *arg1 = vtable.COleDispatchException.0;\n    piVar3 = fcn.140017fc0();\n    if (piVar3 == NULL) {\n        fcn.1400031e0(0x80004005);\n        pcVar1 = swi(3);\n        ppcVar4 = (*pcVar1)();\n        return ppcVar4;\n    }\n    iVar5 = (**(*piVar3 + 0x18))();\n    arg1[3] = iVar5 + 0x18;\n    piVar3 = fcn.140017fc0();\n    if (piVar3 == NULL) {\n        fcn.1400031e0(0x80004005);\n        pcVar1 = swi(3);\n        ppcVar4 = (*pcVar1)();\n        return ppcVar4;\n    }\n    iVar5 = (**(*piVar3 + 0x18))();\n    arg1[5] = iVar5 + 0x18;\n    piVar3 = fcn.140017fc0();\n    if (piVar3 == NULL) {\n        fcn.1400031e0(0x80004005);\n        pcVar1 = swi(3);\n        ppcVar4 = (*pcVar1)();\n        return ppcVar4;\n    }\n    iVar5 = (**(*piVar3 + 0x18))(piVar3);\n    arg1[6] = iVar5 + 0x18;\n    *(arg1 + 4) = -(arg3 != 0) & arg3 + 0x60000U;\n    *(arg1 + 2) = in_R9W;\n    if (arg2 != 0) {\n        uVar2 = fcn.1400699a0(arg2);\n        fcn.140005294(arg1 + 3, arg2, uVar2);\n    }\n    *(arg1 + 7) = ~-(in_R9W != 0) & 0x8000ffff;\n    return arg1;\n}\n",
        "token_count": 526
    },
    "140052c9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nulong fcn.140052c9c(int64_t *arg1, ulong rclsid, int64_t arg3)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    int64_t *piStackX8;\n    \n    piStackX8 = NULL;\n    *(arg1 + 1) = 1;\n    iVar1 = (*_sym.imp.ole32.dll_CoCreateInstance)(rclsid, 0, 0x17, 0x1400b6098, &piStackX8);\n    if (iVar1 == -0x7ff8ffa9) {\n        iVar1 = (*_sym.imp.ole32.dll_CoCreateInstance)(rclsid, 0, 7, 0x1400b6098, &piStackX8);\n    }\n    if ((-1 < iVar1) && (iVar1 = (*_sym.imp.ole32.dll_OleRun)(piStackX8),  -1 < iVar1)) {\n        iVar2 = fcn.14003a750(piStackX8);\n        *arg1 = iVar2;\n        if (iVar2 != 0) {\n            (**(*piStackX8 + 0x10))();\n            return 1;\n        }\n    }\n    fcn.14003a77c(&piStackX8);\n    if (arg3 != 0) {\n        *(arg3 + 0x10) = iVar1;\n    }\n    return 0;\n}\n",
        "token_count": 321
    },
    "140053d3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nulong fcn.140053d30(void)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    ulong uVar4;\n    \n    iVar2 = fcn.140016f48();\n    iVar3 = fcn.140017ad4();\n    uVar4 = 0;\n    if (*(iVar3 + 0x28) == '\\0') {\n        iVar1 = (*_sym.imp.ole32.dll_OleInitialize)();\n        if (iVar1 < 0) {\n            fcn.140053c44(0);\n            uVar4 = 0;\n        }\n        else {\n            *(iVar2 + 0x17c) = 1;\n            iVar2 = fcn.1400063f8();\n            *(iVar2 + 0x78) = 0x140053cb8;\n            if (*(iVar2 + 0x80) == 0) {\n                iVar3 = fcn.140003694(0x68);\n                if (iVar3 != 0) {\n                    uVar4 = fcn.140062864(iVar3);\n                }\n                *(iVar2 + 0x80) = uVar4;\n                iVar2 = fcn.1400063f8();\n                fcn.140062374(*(iVar2 + 0x80));\n            }\n            uVar4 = 1;\n        }\n    }\n    else {\n        *(iVar2 + 0x17c) = 0xffffffff;\n        uVar4 = 1;\n    }\n    return uVar4;\n}\n",
        "token_count": 337
    },
    "1400542c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.1400542cc(ulong arg1, uint64_t arg2, ulong arg3, uint64_t arg4)\n\n{\n    int32_t *piVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    int64_t *piVar4;\n    int64_t iVar5;\n    int64_t arg2_00;\n    int64_t iStack24;\n    ulong uStack16;\n    \n    uStack16 = 0xfffffffffffffffe;\n    piVar4 = fcn.140017fc0();\n    if (piVar4 != NULL) {\n        iVar5 = (**(*piVar4 + 0x18))(piVar4);\n        iStack24 = iVar5 + 0x18;\n        arg2_00 = fcn.140017ddc(arg2 & 0xffffffff);\n        iVar5 = iVar5 + 0x18;\n        if ((arg2_00 == 0) ||\n           (iVar3 = fcn.140002fd0(&iStack24, arg2_00, arg2 & 0xffffffff),  iVar5 = iStack24,  iVar3 == 0)) {\n            LOCK();\n            piVar1 = iVar5 + -8;\n            iVar3 = *piVar1;\n            *piVar1 = *piVar1 + -1;\n            if (iVar3 + -1 < 1) {\n                (**(**(iVar5 + -0x18) + 8))();\n            }\n        }\n        else {\n            fcn.1400540c0(arg1, iStack24, arg3, arg4 & 0xffffffff);\n            LOCK();\n            piVar1 = iVar5 + -8;\n            iVar3 = *piVar1;\n            *piVar1 = *piVar1 + -1;\n            if (iVar3 + -1 < 1) {\n                (**(**(iVar5 + -0x18) + 8))();\n            }\n        }\n        return;\n    }\n    fcn.1400031e0(0x80004005);\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 461
    },
    "140057e5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint64_t fcn.140057e5c(ulong noname_0, ulong noname_1, ulong *arg3)\n\n{\n    int64_t iVar1;\n    uchar auStackX32 [8];\n    uchar auStack24 [16];\n    \n    iVar1 = fcn.140057dd0(noname_0, noname_1, auStack24, auStackX32);\n    if (iVar1 != 0) {\n        *arg3 = *(iVar1 + 0x18);\n        iVar1 = 1;\n    }\n    return iVar1;\n}\n",
        "token_count": 125
    },
    "140057e8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint64_t fcn.140057e8c(ulong arg1, ulong arg2, ulong *arg3)\n\n{\n    int64_t iVar1;\n    uchar auStackX32 [8];\n    uchar auStack24 [16];\n    \n    iVar1 = fcn.140057dd0(arg1, arg2, auStack24, auStackX32);\n    if (iVar1 != 0) {\n        *arg3 = *(iVar1 + 0x10);\n        iVar1 = 1;\n    }\n    return iVar1;\n}\n",
        "token_count": 117
    },
    "14005837": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nchar * fcn.140058370(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    int32_t iVar1;\n    char *pcVar2;\n    int64_t iVar3;\n    char *pcVar4;\n    ulong uStackX32;\n    uint64_t in_stack_ffffffffffffffc8;\n    uint64_t uVar5;\n    \n    pcVar4 = NULL;\n    if ((arg3 & 1) == 0) {\ncode_r0x0001400583eb:\n        pcVar2 = \"Apartment\";\n        if ((arg3 & 2) == 0) {\n            pcVar2 = pcVar4;\n        }\n        pcVar4 = \"Free\";\n        if ((arg3 & 4) == 0) {\n            pcVar4 = pcVar2;\n        }\n        pcVar2 = \"Both\";\n        if ((arg3 & 6) != 6) {\n            pcVar2 = pcVar4;\n        }\n        if (pcVar2 != NULL) {\n            iVar1 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyExA)(arg2, \"InprocServer32\", 0, 0x20006, &uStackX32);\n            if (iVar1 == 0) {\n                iVar1 = (*_sym.imp.KERNEL32.dll_lstrlenA)(pcVar2);\n                iVar1 = (*_sym.imp.ADVAPI32.dll_RegSetValueExA)(uStackX32, \"ThreadingModel\", 0, 1, pcVar2, iVar1 + 1);\n                pcVar4 = iVar1 == 0;\n                (*_sym.imp.ADVAPI32.dll_RegCloseKey)(uStackX32);\n            }\n            else {\n                iVar3 = fcn.140017ad4();\n                pcVar4 = NULL;\n                if (*(iVar3 + 0x28) == '\\0') {\n                    pcVar4 = 0x1;\n                }\n            }\n            if (pcVar4 == 0) goto code_r0x0001400584a7;\n        }\n        pcVar4 = 0x1;\n    }\n    else {\n        uVar5 = in_stack_ffffffffffffffc8 & 0xffffffff00000000;\n        iVar1 = (*_sym.imp.ADVAPI32.dll_RegSetValueA)(arg1, \"Insertable\", 1, 0x1400a0e8b, uVar5);\n        if ((iVar1 == 0) &&\n           (iVar1 = (*_sym.imp.ADVAPI32.dll_RegSetValueA)\n                              (arg2, \"Insertable\", 1, 0x1400a0e8b, uVar5 & 0xffffffff00000000),  iVar1 == 0))\n        goto code_r0x0001400583eb;\ncode_r0x0001400584a7:\n        if ((arg3 & 1) != 0) {\n            (*_sym.imp.ADVAPI32.dll_RegDeleteValueA)(arg2, \"Insertable\");\n            (*_sym.imp.ADVAPI32.dll_RegDeleteValueA)(arg1, \"Insertable\");\n        }\n    }\n    return pcVar4;\n}\n",
        "token_count": 683
    },
    "14005d1e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint64_t * fcn.14005d1e4(int64_t *arg1, ulong uCode, ulong arg3)\n\n{\n    int64_t iVar1;\n    code *pcVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    int64_t *piVar7;\n    int64_t iVar8;\n    uint32_t uVar9;\n    \n    iVar4 = (*_sym.imp.USER32.dll_MapVirtualKeyA)();\n    uVar9 = iVar4 << 0x10;\n    if (arg3 != 0) {\n        uVar9 = uVar9 | 0x1000000;\n    }\n    piVar7 = fcn.140017fc0();\n    if (piVar7 == NULL) {\n        fcn.1400031e0(0x80004005);\n        pcVar2 = swi(3);\n        piVar7 = (*pcVar2)();\n        return piVar7;\n    }\n    iVar8 = (**(*piVar7 + 0x18))(piVar7);\n    *arg1 = iVar8 + 0x18;\n    iVar8 = 0x40;\n    uVar6 = 0x40;\n    do {\n        uVar3 = uVar6 * 2;\n        iVar8 = iVar8 * 2;\n        if ((*(*arg1 + -0xc) + uVar6 * -2 | 1U - *(*arg1 + -8)) < 0) {\n            fcn.1400033e0(arg1, uVar3);\n        }\n        iVar1 = *arg1;\n        if ((uVar3 < 0) || (*(iVar1 + -0xc) < uVar3)) {\n            piVar7 = fcn.1400031e0(0x80070057);\n            return piVar7;\n        }\n        *(iVar1 + -0x10) = uVar3;\n        *(iVar8 + *arg1) = 0;\n        uVar5 = (*_sym.imp.USER32.dll_GetKeyNameTextA)(uVar9, iVar1, uVar3 + 1);\n        uVar6 = uVar5;\n        if (uVar5 == 0xffffffff) {\n            iVar1 = *arg1;\n            if (iVar1 != 0) {\n                uVar6 = fcn.14006b544(iVar1, *(iVar1 + -0xc));\n                goto code_r0x00014005d2c9;\n            }\n            uVar6 = 0;\n        }\n        else {\ncode_r0x00014005d2c9:\n            if (uVar6 < 0) goto code_r0x00014005d2eb;\n        }\n        if (*(*arg1 + -0xc) < uVar6) {\ncode_r0x00014005d2eb:\n            fcn.1400031e0(0x80070057);\n            pcVar2 = swi(3);\n            piVar7 = (*pcVar2)();\n            return piVar7;\n        }\n        *(*arg1 + -0x10) = uVar6;\n        *(uVar6 + *arg1) = 0;\n        uVar6 = uVar3;\n        if (uVar5 != uVar3) {\n            return arg1;\n        }\n    } while( true );\n}\n",
        "token_count": 737
    },
    "14005dac": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\ncode ** fcn.14005dac0(code **arg1, ulong arg2)\n\n{\n    fcn.140055ecc(arg1);\n    *arg1 = vtable.CDockBar.0;\n    fcn.140067108(arg1 + 0x22);\n    *(arg1 + 0x21) = arg2;\n    *(arg1 + 0x16) = 1;\n    fcn.14006746c(arg1 + 0x22, arg1[0x24], 0);\n    *(arg1 + 0x27) = 0;\n    (*_sym.imp.USER32.dll_SetRectEmpty)(arg1 + 0x13c);\n    *(arg1 + 0xbc) = 0;\n    *(arg1 + 0x18) = 0;\n    *(arg1 + 0x17) = 0;\n    *(arg1 + 0xb4) = 0;\n    return arg1;\n}\n",
        "token_count": 208
    },
    "14005de1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nuint64_t fcn.14005de1c(int64_t arg1, int64_t arg2, int32_t *arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    uint64_t uVar4;\n    int64_t *piVar5;\n    int32_t iVar6;\n    uint32_t uVar7;\n    uint64_t arg2_00;\n    uint32_t uVar8;\n    bool bVar9;\n    bool bVar10;\n    int32_t iStackX8;\n    int32_t iStackX32;\n    int32_t iStackX36;\n    int32_t iStack72;\n    int32_t iStack68;\n    int32_t iStack64;\n    int32_t iStack60;\n    \n    if (arg1 == 0) {\n        fcn.140020780();\n        pcVar2 = swi(3);\n        uVar4 = (*pcVar2)();\n        return uVar4;\n    }\n    if (arg2 == 0) {\n        fcn.140020780();\n        pcVar2 = swi(3);\n        uVar4 = (*pcVar2)();\n        return uVar4;\n    }\n    iVar6 = 0;\n    uVar4 = 0;\n    iVar3 = 0;\n    iStackX8 = 0;\n    uVar8 = *(arg1 + 0xe4) & 0xa000;\n    arg2_00 = 0;\n    if (0 < *(arg1 + 0x120)) {\n        do {\n            piVar5 = fcn.14005dde4(arg1, arg2_00);\n            if (piVar5 == NULL) {\n                iStackX32 = arg4;\n                iStackX8 = iStackX8 + (iVar6 - *0x1400deac4);\n                iVar6 = 0;\n                if (uVar8 != 0) {\n                    iStackX36 = arg4 >> 0x20;\n                    iStackX32 = iStackX36;\n                }\n                if (iStackX32 < iStackX8) {\n                    if (arg2_00 == 0) {\n                        fcn.1400674bc(arg1 + 0x110, uVar4 + 1, 0, 1);\n                    }\n                    uVar8 = uVar4 + 1;\n                    fcn.1400674bc(arg1 + 0x110, uVar8, arg2, 1);\n                    goto code_r0x00014005df93;\n                }\ncode_r0x00014005df47:\n                uVar4 = arg2_00;\n            }\n            else {\n                iVar3 = (**(*piVar5 + 0x2d0))(piVar5);\n                if (iVar3 != 0) {\n                    (*_sym.imp.USER32.dll_GetWindowRect)(piVar5[8], &iStack72);\n                    fcn.14001b798(arg1, &iStack72);\n                    if (uVar8 == 0) {\n                        iVar3 = (iStack64 - iStack72) + -1;\n                    }\n                    else {\n                        iVar3 = iStack60 - iStack68;\n                    }\n                    if (iVar6 <= iVar3) {\n                        if (uVar8 == 0) {\n                            iVar6 = (iStack64 - iStack72) + -1;\n                        }\n                        else {\n                            iVar6 = iStack60 - iStack68;\n                        }\n                    }\n                    if (uVar8 == 0) {\n                        bVar10 = SBORROW4(arg3[1], iStack68);\n                        iVar3 = arg3[1];\n                        iVar1 = iVar3 - iStack68;\n                        bVar9 = iVar3 == iStack68;\n                    }\n                    else {\n                        bVar10 = SBORROW4(*arg3, iStack72);\n                        iVar1 = *arg3 - iStack72;\n                        bVar9 = *arg3 == iStack72;\n                    }\n                    if (!bVar9 && bVar10 == iVar1 < 0) goto code_r0x00014005df47;\n                }\n            }\n            iVar3 = uVar4;\n            uVar7 = arg2_00 + 1;\n            arg2_00 = uVar7;\n        } while (uVar7 < *(arg1 + 0x120));\n    }\n    uVar8 = iVar3 + 1;\n    fcn.1400674bc(arg1 + 0x110, uVar8, 0, 1);\n    fcn.1400674bc(arg1 + 0x110, uVar8, arg2, 1);\ncode_r0x00014005df93:\n    return uVar8;\n}\n",
        "token_count": 1038
    },
    "14005e1a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.14005e1a0(code **arg1)\n\n{\n    code *pcVar1;\n    int64_t *piVar2;\n    int64_t iVar3;\n    uint32_t uVar4;\n    uint64_t arg2;\n    ulong in_R8;\n    ulong in_R9;\n    ulong uVar5;\n    \n    *arg1 = vtable.CDockBar.0;\n    arg2 = 0;\n    if (0 < arg1[0x24]) {\n        do {\n            iVar3 = fcn.14005dde4(arg1, arg2);\n            if ((iVar3 != 0) && (*(iVar3 + 0xf8) == arg1)) {\n                *(iVar3 + 0xf8) = 0;\n            }\n            uVar4 = arg2 + 1;\n            arg2 = uVar4;\n        } while (uVar4 < arg1[0x24]);\n    }\n    fcn.140067128(arg1 + 0x22);\n    uVar5 = 0xfffffffffffffffe;\n    arg1[0x15] = NULL;\n    fcn.14005622c(arg1);\n    if (arg1[0x1e] != NULL) {\n        fcn.140046f4c(arg1[0x1e], arg1);\n    }\n    piVar2 = arg1[0x20];\n    arg1[0x20] = NULL;\n    if (piVar2 != NULL) {\n        (**(*piVar2 + 0x18))(piVar2, 1, in_R8, in_R9, uVar5);\n    }\n    if (arg1[0x1a] != NULL) {\n        fcn.140069e50(arg1[0x1a]);\n    }\n    iVar3 = fcn.140017b90();\n    if (*(iVar3 + 0xa0) == arg1) {\n        *(iVar3 + 0xa0) = 0;\n        *(iVar3 + 0x98) = 0xffffffffffffffff;\n    }\n    uVar5 = 0xfffffffffffffffe;\n    *arg1 = vtable.CWnd.0;\n    if ((((arg1[8] != NULL) && (arg1 != 0x1400de280)) && (arg1 != 0x1400de330)) &&\n       ((arg1 != 0x1400de3e0 && (arg1 != 0x1400de490)))) {\n        fcn.14000ff48(arg1);\n    }\n    piVar2 = arg1[0x13];\n    if (piVar2 != NULL) {\n        (**(*piVar2 + 8))(piVar2, 1, in_R8, in_R9, uVar5);\n    }\n    pcVar1 = arg1[0x14];\n    if ((pcVar1 != NULL) && (*(pcVar1 + 0x50) == arg1)) {\n        *(pcVar1 + 0x50) = 0;\n    }\n    if (arg1[4] != NULL) {\n        (**(arg1[4] + 0x38))();\n    }\n    arg1[7] = NULL;\n    return;\n}\n",
        "token_count": 698
    },
    "140065be": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.140065be0(code **arg1)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    code *pcVar3;\n    int64_t iVar4;\n    ulong *puVar5;\n    int64_t iVar6;\n    uchar auStack616 [56];\n    code **ppcStack560;\n    ulong uStack544;\n    ulong uStack64;\n    uint64_t uStack24;\n    \n    uStack24 = 0xfffffffffffffffe;\n    *arg1 = vtable.CMiniFrameWnd.0;\n    uStack64 = 0x140065c05;\n    fcn.14000ff48(arg1);\n    pcVar3 = arg1[0x34];\n    LOCK();\n    piVar1 = pcVar3 + -8;\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 + -1 < 1) {\n        uStack64 = 0x140065c28;\n        (**(**(pcVar3 + -0x18) + 8))();\n    }\n    uStack544 = 0xfffffffffffffffe;\n    uStack24 = *0x1400d96f0 ^ &stack0xfffffffffffffd98;\n    *arg1 = vtable.CFrameWnd.0;\n    ppcStack560 = arg1;\n    fcn.14004a3cc(arg1);\n    iVar4 = fcn.140016f48();\n    while (*(iVar4 + 0x158) == arg1) {\n        puVar5 = *(iVar4 + 0x160);\n        iVar6 = puVar5[1];\n        if (iVar6 == 0) {\n            fcn.140020780();\n        }\n        *(iVar6 + 0x158) = *puVar5;\n        *(puVar5[1] + 0x160) = puVar5[2];\n        puVar5[1] = 0;\n    }\n    if (arg1[0x29] != NULL) {\n        fcn.1400036d8(arg1[0x29]);\n    }\n    pcVar3 = arg1[0x2b];\n    LOCK();\n    piVar1 = pcVar3 + -8;\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 + -1 < 1) {\n        (**(**(pcVar3 + -0x18) + 8))();\n    }\n    fcn.14003aed0(arg1 + 0x1d);\n    fcn.140010b98(arg1);\n    fcn.140069870(uStack24 ^ &stack0xfffffffffffffd98);\n    return;\n}\n",
        "token_count": 598
    },
    "14005f8f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nulong fcn.14005f8f8(int64_t *arg1, int64_t arg2, uint *arg3)\n\n{\n    code *pcVar1;\n    ulong uVar2;\n    int64_t *piVar3;\n    ulong *puVar4;\n    int64_t iVar5;\n    int32_t iVar6;\n    uint uVar7;\n    int32_t iStackX16;\n    int32_t iStackX20;\n    int32_t iStack24;\n    int32_t iStack20;\n    int32_t iStack16;\n    int32_t iStack12;\n    \n    if (arg2 == 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        uVar2 = (*pcVar1)();\n        return uVar2;\n    }\n    uVar7 = *(arg1 + 0x21);\n    arg3[1] = arg3[1] | 0x70;\n    *arg3 = uVar7;\n    *(arg3 + 10) = *(arg2 + 0x40);\n    piVar3 = fcn.140020bb8(0x1400a8268, arg2);\n    if (piVar3 == NULL) {\n        (*_sym.imp.USER32.dll_GetWindowRect)();\n        iStackX16 = iStack16 - iStack24;\n        iStackX20 = iStack12 - iStack20;\n        uVar2 = CONCAT44(iStackX20, iStackX16);\n    }\n    else {\n        puVar4 = (**(*piVar3 + 0x278))(piVar3, &iStackX16, 0, *(arg1 + 0xe4) & 0xa000);\n        uVar2 = *puVar4;\n    }\n    uVar7 = uVar2 >> 0x20;\n    arg3[0xd] = uVar7;\n    iVar6 = 0;\n    if (*0x1400d8a34 < 0x40048) {\n        iVar6 = 4;\n    }\n    iVar6 = iVar6 + uVar2;\n    arg3[0x16] = iVar6;\n    arg3[0xe] = iVar6;\n    if ((arg3[2] >> 9 & 1) == 0) {\n        arg3[0xc] = iVar6;\n    }\n    else {\n        arg3[1] = arg3[1] | 0x200;\n        arg3[0xc] = uVar7;\n    }\n    iVar5 = (**(*arg1 + 0x230))(arg1, 0x401, 0xffffffffffffffff, arg3);\n    if (iVar5 == 0) {\n        uVar2 = 0;\n    }\n    else {\n        piVar3 = fcn.140010d58(arg1);\n        if (piVar3 != NULL) {\n            (**(*piVar3 + 0x2a0))(piVar3, 1);\n        }\n        (*_sym.imp.USER32.dll_SendMessageA)(arg1[8], 0x41f, 0, 0);\n        uVar2 = 1;\n    }\n    return uVar2;\n}\n",
        "token_count": 697
    },
    "14006078": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nbool fcn.140060780(ulong arg1)\n\n{\n    int64_t iVar1;\n    ulong *arg2;\n    ulong in_R8;\n    ulong in_R9;\n    ulong uVar2;\n    \n    uVar2 = 0xfffffffffffffffe;\n    iVar1 = fcn.140003694(0x28);\n    arg2 = NULL;\n    if (iVar1 != 0) {\n        arg2 = fcn.140060664(iVar1, arg1);\n    }\n    if (arg2[3] == 0) {\n        (***arg2)(arg2, 1, in_R8, in_R9, uVar2);\n        arg2 = NULL;\n    }\n    else {\n        iVar1 = fcn.140017ad4();\n        fcn.1400240f0(0xb);\n        fcn.140022dcc(iVar1 + 0x70, arg2);\n        fcn.140024184(0xb);\n    }\n    return arg2 != NULL;\n}\n",
        "token_count": 220
    },
    "14006185": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\ncode ** fcn.14006185c(code **arg1)\n\n{\n    fcn.140052b40(arg1, 0x20, 0, 0);\n    *(arg1 + 0xe) = 0;\n    *arg1 = vtable.CEnumFormatEtc.0;\n    return arg1;\n}\n",
        "token_count": 72
    },
    "1400621f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.1400621f0(code **arg1)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    \n    *arg1 = vtable.COleDataSource.0;\n    iVar2 = fcn.140022cd8(0x1400dec58, 0x1400619a8);\n    if (iVar2 == 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    if (arg1 == *(iVar2 + 0x10)) {\n        *(iVar2 + 0x10) = 0;\n    }\n    fcn.140061558(arg1);\n    if (arg1[4] != NULL) {\n        (**(arg1[4] + 0x38))();\n    }\n    arg1[7] = NULL;\n    return;\n}\n",
        "token_count": 195
    },
    "140062ef": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.140062ef8(int64_t arg1, int64_t arg2)\n\n{\n    uint32_t uVar1;\n    code *pcVar2;\n    ulong uVar3;\n    ulong *puVar4;\n    uint64_t *puVar5;\n    ulong uStackX8;\n    int64_t aiStackX24 [2];\n    \n    if ((~*(arg1 + 0x20) & 1) == 0) {\n        uVar3 = 0;\n        if (*(arg1 + 0x58) == 0) {\n            uStackX8 = fcn.140003694(0x28);\n            if (uStackX8 != 0) {\n                uVar3 = fcn.140067108(uStackX8);\n            }\n            *(arg1 + 0x58) = uVar3;\n            fcn.14006713c(uVar3, 1, *(arg1 + 0x68));\n            if (*(*(arg1 + 0x58) + 0x10) < 1) {\n                fcn.140020780();\n                pcVar2 = swi(3);\n                (*pcVar2)();\n                return;\n            }\n            **(*(arg1 + 0x58) + 8) = 0;\n            *(arg1 + 0x50) = 1;\n            aiStackX24[0] = 0;\n            fcn.140062ddc(arg1, aiStackX24);\n            uStackX8 = uStackX8 & 0xffffffff00000000;\n            fcn.140062b8c(aiStackX24[0], 0, &uStackX8, 1);\n        }\n        if (arg2 != 0) {\n            fcn.14006291c(arg1);\n            fcn.1400674bc(*(arg1 + 0x58), *(arg1 + 0x50), arg2, 1);\n            aiStackX24[0] = 0;\n            fcn.14003a4a4(*(arg1 + 0x60), 1, aiStackX24);\n            if (aiStackX24[0] == 0) {\n                fcn.140020780();\n                pcVar2 = swi(3);\n                (*pcVar2)();\n                return;\n            }\n            uStackX8 = CONCAT44(uStackX8._4_4_, 2);\n            fcn.140062b8c(aiStackX24[0], *(arg1 + 0x50), &uStackX8, 1);\n            *(arg1 + 0x50) = *(arg1 + 0x50) + 1;\n        }\n    }\n    else {\n        uVar3 = 0;\n        if (*(arg1 + 0x58) == 0) {\n            uStackX8 = fcn.140003694(0x38);\n            if (uStackX8 != 0) {\n                uVar3 = fcn.14003a5f0(uStackX8, *(arg1 + 0x68));\n            }\n            *(arg1 + 0x58) = uVar3;\n            fcn.14003a348(uVar3, *(arg1 + 0x6c), 1);\n            puVar4 = fcn.14003a6a4(*(arg1 + 0x58), 0);\n            *puVar4 = 0;\n            *(arg1 + 0x50) = 1;\n        }\n        if (arg2 != 0) {\n            fcn.14006291c(arg1);\n            uVar1 = *(arg1 + 0x50);\n            puVar5 = fcn.14003a6a4(*(arg1 + 0x58), arg2);\n            *puVar5 = uVar1;\n            *(arg1 + 0x50) = *(arg1 + 0x50) + 1;\n        }\n    }\n    return;\n}\n",
        "token_count": 869
    },
    "1400639c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.1400639c8(code **arg1)\n\n{\n    int64_t *piVar1;\n    code *pcVar2;\n    ulong in_R8;\n    ulong in_R9;\n    ulong uVar3;\n    \n    *arg1 = vtable.CToolTipCtrl.0;\n    fcn.14000ff48(arg1);\n    fcn.140057f9c(arg1 + 0x15);\n    uVar3 = 0xfffffffffffffffe;\n    *arg1 = vtable.CWnd.0;\n    if ((((arg1[8] != NULL) && (arg1 != 0x1400de280)) && (arg1 != 0x1400de330)) &&\n       ((arg1 != 0x1400de3e0 && (arg1 != 0x1400de490)))) {\n        fcn.14000ff48(arg1);\n    }\n    piVar1 = arg1[0x13];\n    if (piVar1 != NULL) {\n        (**(*piVar1 + 8))(piVar1, 1, in_R8, in_R9, uVar3);\n    }\n    pcVar2 = arg1[0x14];\n    if ((pcVar2 != NULL) && (*(pcVar2 + 0x50) == arg1)) {\n        *(pcVar2 + 0x50) = 0;\n    }\n    if (arg1[4] != NULL) {\n        (**(arg1[4] + 0x38))();\n    }\n    arg1[7] = NULL;\n    return;\n}\n",
        "token_count": 343
    },
    "14008ffb": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nuint fcn.14008ffb4(int64_t arg1, ulong arg2, ulong arg3)\n\n{\n    uint32_t uVar1;\n    uint uVar2;\n    int64_t iVar3;\n    uint *puVar4;\n    \n    iVar3 = fcn.1400871e8();\n    iVar3 = iVar3 + 0x30;\n    if (arg1 == 0) {\n        puVar4 = fcn.14006abb0();\n        *puVar4 = 0x16;\n        fcn.140070df0(0, 0, 0, 0);\n        uVar2 = 0xffffffff;\n    }\n    else {\n        fcn.1400872fc(iVar3);\n        uVar1 = fcn.14008fdf0(iVar3);\n        uVar2 = fcn.140072f88(iVar3, arg1, arg2, arg3);\n        fcn.14008fec4(uVar1, iVar3);\n        fcn.14008738c(iVar3);\n    }\n    return uVar2;\n}\n",
        "token_count": 235
    },
    "14000492": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.140004920(ulong arg1, uint16_t *arg2)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    ulong uVar4;\n    code *pcVar5;\n    uint *puVar6;\n    int32_t *piVar7;\n    int64_t iVar8;\n    uint16_t uVar9;\n    int32_t iVar10;\n    int64_t iVar11;\n    int64_t iVar12;\n    uchar auStack792 [32];\n    uint16_t *puStack760;\n    uchar *puStack752;\n    uint16_t auStack744 [4];\n    int64_t iStack736;\n    int64_t iStack728;\n    uchar auStack720 [8];\n    int32_t aiStack712 [6];\n    uint uStack688;\n    uint uStack684;\n    uchar *puStack680;\n    ulong uStack656;\n    ulong uStack640;\n    ulong uStack632;\n    uchar auStack616 [260];\n    uchar uStack356;\n    uchar uStack355;\n    uchar auStack344 [288];\n    uint64_t uStack56;\n    \n    uStack632 = 0xfffffffffffffffe;\n    uStack56 = *0x1400d96f0 ^ auStack792;\n    iVar12 = 0;\n    auStack744[0] = 0;\n    iVar10 = 0;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(0x1400a1378);\n    pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)();\n    if (pcVar5 == NULL) {\n        iVar11 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(\"ntdll.dll\");\n        if (iVar11 != 0) {\n            auStack744[0] = 0;\n            puStack760 = auStack744;\n            (*_sym.imp.KERNEL32.dll_EnumResourceLanguagesA)(iVar11, 0x10, 1, 0x1400036f8);\n            if (auStack744[0] != 0) {\n                uVar9 = auStack744[0] & 0x3ff;\n                aiStack712[0] = (*_sym.imp.KERNEL32.dll_ConvertDefaultLocale)(auStack744[0]);\n                aiStack712[1] = (*_sym.imp.KERNEL32.dll_ConvertDefaultLocale)(uVar9);\n                iVar10 = 2;\n            }\n        }\n    }\n    else {\n        auStack744[0] = (*pcVar5)();\n        uVar9 = auStack744[0] & 0x3ff;\n        aiStack712[0] = (*_sym.imp.KERNEL32.dll_ConvertDefaultLocale)(auStack744[0]);\n        aiStack712[1] = (*_sym.imp.KERNEL32.dll_ConvertDefaultLocale)(uVar9);\n        iVar10 = 2;\n        pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar4, \"GetSystemDefaultUILanguage\");\n        if (pcVar5 != NULL) {\n            auStack744[0] = (*pcVar5)();\n            uVar9 = auStack744[0] & 0x3ff;\n            aiStack712[2] = (*_sym.imp.KERNEL32.dll_ConvertDefaultLocale)(auStack744[0]);\n            aiStack712[3] = (*_sym.imp.KERNEL32.dll_ConvertDefaultLocale)(uVar9);\n            iVar10 = 4;\n        }\n    }\n    aiStack712[iVar10] = 0x800;\n    uStack355 = 0;\n    uStack356 = 0;\n    iVar2 = (*_sym.imp.KERNEL32.dll_GetModuleFileNameA)(0x140000000, auStack616, 0x105);\n    if (iVar2 != 0) {\n        fcn.1400698a0(&uStack688, 0, 0x38);\n        uStack688 = 0x38;\n        puStack680 = auStack616;\n        uStack656 = 1000;\n        uStack640 = 0x140000000;\n        uStack684 = 0x88;\n        fcn.140003710(&iStack736, 0xffffffffffffffff);\n        if ((((*0x1400db1e0 == NULL) || ((iStack736 == -1 && (iStack736 = (**0x1400db1e0)(),  iStack736 != -1)))) &&\n            (*0x1400db1f0 != NULL)) && ((iStack736 != -1 && (iStack728 == 0)))) {\n            (**0x1400db1f0)(iStack736, &iStack728);\n        }\n        iVar11 = iVar12;\n        if (iVar10 + 1 != 0) {\n            do {\n                if (aiStack712[iVar11] == 0x800) {\n                    iVar2 = fcn.14006a34c(auStack720, 4, 0x1400a1238);\n                    if (iVar2 != 0) {\n                        if (iVar2 == 0xc) {\n                            fcn.140020738();\n                            pcVar5 = swi(3);\n                            (*pcVar5)();\n                            return;\n                        }\n                        if ((iVar2 == 0x16) || (iVar2 == 0x22)) {\n                            fcn.140020780();\n                            pcVar5 = swi(3);\n                            (*pcVar5)();\n                            return;\n                        }\n                        if (iVar2 != 0x50) {\n                            fcn.140020780();\n                            pcVar5 = swi(3);\n                            (*pcVar5)();\n                            return;\n                        }\n                    }\ncode_r0x000140004c09:\n                    puVar6 = fcn.14006abb0();\n                    uVar1 = *puVar6;\n                    puVar6 = fcn.14006abb0();\n                    *puVar6 = 0;\n                    puStack752 = auStack720;\n                    puStack760 = arg2;\n                    uVar3 = fcn.14006aa44(auStack344, 0x112, 0x111, arg1);\n                    piVar7 = fcn.14006abb0();\n                    if (*piVar7 == 0) {\n                        puVar6 = fcn.14006abb0();\n                        *puVar6 = uVar1;\ncode_r0x000140004c73:\n                        iVar8 = iVar12;\n                        if ((uVar3 != 0xffffffff) && (uVar3 < 0x112)) {\n                            iVar8 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)();\n                        }\n                        if (iVar8 == 0) goto code_r0x000140004c9b;\n                    }\n                    else {\n                        piVar7 = fcn.14006abb0();\n                        if (*piVar7 == 0) goto code_r0x000140004c73;\n                        if (*piVar7 != 0xc) {\n                            if ((*piVar7 == 0x16) || (*piVar7 == 0x22)) {\n                                fcn.1400031e0(0x80070057);\n                                pcVar5 = swi(3);\n                                (*pcVar5)();\n                                return;\n                            }\n                            if (*piVar7 != 0x50) {\n                                fcn.1400031e0(0x80004005);\n                                pcVar5 = swi(3);\n                                (*pcVar5)();\n                                return;\n                            }\n                            goto code_r0x000140004c73;\n                        }\n                        fcn.1400031e0(0x8007000e);\n                    }\n                    if ((*0x1400db1e8 != NULL) && (iStack736 != -1)) {\n                        if ((*0x1400db1f8 != NULL) && (iStack728 != 0)) {\n                            iStack728 = 0;\n                            (**0x1400db1f8)(0);\n                        }\n                        (**0x1400db1e8)(iStack736);\n                    }\n                    goto code_r0x000140004d74;\n                }\n                iVar2 = (*_sym.imp.KERNEL32.dll_GetLocaleInfoA)(aiStack712[iVar11], 3);\n                if (iVar2 != 0) goto code_r0x000140004c09;\ncode_r0x000140004c9b:\n                iVar11 = iVar11 + 1;\n            } while (iVar11 < iVar10 + 1);\n        }\n        if ((*0x1400db1e8 != NULL) && (iStack736 != -1)) {\n            if ((*0x1400db1f8 != NULL) && (iStack728 != 0)) {\n                iStack728 = 0;\n                (**0x1400db1f8)(0);\n            }\n            (**0x1400db1e8)(iStack736);\n        }\n    }\ncode_r0x000140004d74:\n    fcn.140069870(uStack56 ^ auStack792);\n    return;\n}\n",
        "token_count": 1963
    },
    "140008d7": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\ncode ** fcn.140008d78(code **arg1, uint64_t arg2, code *arg3)\n\n{\n    fcn.14000d828(arg1);\n    *arg1 = vtable.CDialog.0;\n    fcn.1400698a0(arg1 + 0x15, 0, 0x40);\n    arg1[0x16] = arg2 & 0xffff;\n    *(arg1 + 0x15) = arg2;\n    arg1[0x1a] = arg3;\n    return arg1;\n}\n",
        "token_count": 124
    },
    "14000f1f": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738",
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.14000f1fc(int64_t arg1, int64_t arg2)\n\n{\n    uint32_t uVar1;\n    int64_t iVar2;\n    int64_t *piVar3;\n    int64_t iVar4;\n    ulong uVar5;\n    int64_t arg1_00;\n    uint32_t uVar6;\n    uint32_t uStack104;\n    uint32_t uStack100;\n    int32_t iStack96;\n    int32_t iStack92;\n    int32_t iStack88;\n    int32_t iStack84;\n    int32_t iStack80;\n    int32_t iStack76;\n    int32_t iStack72;\n    int32_t iStack68;\n    int32_t iStack64;\n    int32_t iStack60;\n    uint auStack56 [5];\n    uchar auStack36 [28];\n    \n    uVar1 = fcn.140015284(arg1);\n    arg1_00 = 0;\n    if (arg2 == 0) {\n        if ((uVar1 >> 0x1e & 1) == 0) {\n            iVar4 = (*_sym.imp.USER32.dll_GetWindow)(*(arg1 + 0x40), 4);\n        }\n        else {\n            iVar4 = (*_sym.imp.USER32.dll_GetParent)();\n        }\n        if ((iVar4 != 0) && (iVar2 = (*_sym.imp.USER32.dll_SendMessageA)(iVar4, 0x36b),  iVar2 != 0)) {\n            iVar4 = iVar2;\n        }\n    }\n    else {\n        iVar4 = *(arg2 + 0x40);\n    }\n    (*_sym.imp.USER32.dll_GetWindowRect)(*(arg1 + 0x40), &iStack88);\n    if ((uVar1 >> 0x1e & 1) == 0) {\n        if ((iVar4 != 0) &&\n           ((uVar1 = (*_sym.imp.USER32.dll_GetWindowLongA)(iVar4, 0xfffffff0),  (uVar1 >> 0x1c & 1) == 0 ||\n            ((uVar1 >> 0x1d & 1) != 0)))) {\n            iVar4 = arg1_00;\n        }\n        auStack56[0] = 0x28;\n        if (iVar4 == 0) {\n            piVar3 = fcn.1400063f8();\n            iVar4 = arg1_00;\n            if (piVar3 != NULL) {\n                iVar4 = (**(*piVar3 + 0xe8))(piVar3);\n            }\n            if (iVar4 != 0) {\n                arg1_00 = *(iVar4 + 0x40);\n            }\n            uVar5 = fcn.14000b818(arg1_00, 1);\n            fcn.14000b898(uVar5, auStack56);\n            (*_sym.imp.USER32.dll_CopyRect)(&iStack72, auStack36);\n        }\n        else {\n            (*_sym.imp.USER32.dll_GetWindowRect)(iVar4, &iStack72);\n            uVar5 = fcn.14000b818(iVar4, 2);\n            fcn.14000b898(uVar5, auStack56);\n        }\n        (*_sym.imp.USER32.dll_CopyRect)();\n    }\n    else {\n        uVar5 = (*_sym.imp.USER32.dll_GetParent)(*(arg1 + 0x40));\n        (*_sym.imp.USER32.dll_GetClientRect)(uVar5, &uStack104);\n        (*_sym.imp.USER32.dll_GetClientRect)(iVar4, &iStack72);\n        (*_sym.imp.USER32.dll_MapWindowPoints)();\n    }\n    uVar1 = (iStack64 + iStack72) / 2 - (iStack80 - iStack88) / 2;\n    uVar6 = (iStack60 + iStack68) / 2 - (iStack76 - iStack84) / 2;\n    if (iStack96 < (iStack80 - iStack88) + uVar1) {\n        uVar1 = (iStack88 - iStack80) + iStack96;\n    }\n    if (uVar1 < uStack104) {\n        uVar1 = uStack104;\n    }\n    if (iStack92 < (iStack76 - iStack84) + uVar6) {\n        uVar6 = (iStack84 - iStack76) + iStack92;\n    }\n    if (uVar6 < uStack100) {\n        uVar6 = uStack100;\n    }\n    fcn.140015950(arg1, 0, uVar1, uVar6);\n    return;\n}\n",
        "token_count": 1030
    },
    "1400106d": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nuint32_t fcn.1400106d0(ulong arg1, ulong arg2)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    int64_t *piVar3;\n    uint32_t uVar4;\n    uchar auStackX24 [16];\n    \n    uVar4 = 0;\n    iVar2 = fcn.140017ad4();\n    piVar3 = fcn.14000f7c0(**(iVar2 + 200), auStackX24);\n    if (*piVar3 == 0) {\n        if ((arg2 & 0x3fc0) == arg2) {\n            iVar2 = fcn.140017ad4();\n            fcn.14000f748(**(iVar2 + 200));\n            uVar4 = 0x3fc0;\n        }\n    }\n    else {\n        iVar2 = fcn.140017ad4();\n        iVar1 = fcn.14000f834(**(iVar2 + 200), arg1);\n        if (iVar1 != 0) {\n            uVar4 = arg2;\n        }\n    }\n    return uVar4;\n}\n",
        "token_count": 249
    },
    "14001ed5": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nuchar * fcn.14001ed58(uchar *arg1, int64_t lpWideCharStr, ulong noname_2, ulong arg4)\n\n{\n    uchar *puVar1;\n    int32_t iVar2;\n    \n    if ((lpWideCharStr != 0) && (arg1 != NULL)) {\n        *arg1 = 0;\n        (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(3, 0, lpWideCharStr, 0xffffffff, arg1, 0x20, 0, 0);\n        iVar2 = fcn.140069a48(arg1 + 0x20, 0x26, lpWideCharStr + 0x40, 0x26);\n        if (iVar2 == 0) {\n            puVar1 = arg1 + 0x46;\n            if ((puVar1 != NULL) && (lpWideCharStr + 0x66 != 0)) {\n                *puVar1 = 0;\n                (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(3, 0, lpWideCharStr + 0x66, 0xffffffff, puVar1, 0x20, 0, 0)\n                ;\n            }\n            iVar2 = fcn.140069a48(arg1 + 0x66, 0x36, lpWideCharStr + 0xa6, 0x36);\n            if ((iVar2 == 0) &&\n               ((*(lpWideCharStr + 0x46) == 0 ||\n                (iVar2 = fcn.140069a48(arg1 + 0x9c, *(lpWideCharStr + 0x46), lpWideCharStr + 0xdc, \n                                       *(lpWideCharStr + 0x46)),  iVar2 == 0)))) {\n                *(arg1 + 0x24) = 0x9c;\n                return arg1;\n            }\n        }\n    }\n    return NULL;\n}\n",
        "token_count": 432
    },
    "140028e0": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738",
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.140028e08(uint64_t lpBuffer, int64_t arg2, int64_t arg3)\n\n{\n    int32_t *piVar1;\n    code *pcVar2;\n    int64_t iVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    int64_t *piVar6;\n    int64_t iVar7;\n    int32_t iVar8;\n    uint64_t arg3_00;\n    uchar auStack488 [32];\n    uchar *puStack456;\n    uint32_t *puStack448;\n    ulong uStack440;\n    uint uStack432;\n    uint32_t auStack424 [2];\n    uint64_t uStack416;\n    int64_t iStack408;\n    uchar auStack400 [8];\n    ulong uStack392;\n    uchar auStack332 [276];\n    uint64_t uStack56;\n    \n    uStack392 = 0xfffffffffffffffe;\n    uStack56 = *0x1400d96f0 ^ auStack488;\n    arg3_00 = 0;\n    if (lpBuffer == 0) {\n        fcn.140020780();\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    if (arg2 == 0) {\n        fcn.140020780();\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetFullPathNameA)(arg2, 0x104, lpBuffer, &uStack416);\n    if (uVar4 == 0) {\n        iVar5 = fcn.14006bb18(lpBuffer, 0x104, arg2, 0xffffffffffffffff);\n        if (iVar5 != 0) {\n            if (iVar5 == 0xc) {\n                fcn.140020738();\n                pcVar2 = swi(3);\n                (*pcVar2)();\n                return;\n            }\n            if ((iVar5 == 0x16) || (iVar5 == 0x22)) {\n                fcn.140020780();\n                pcVar2 = swi(3);\n                (*pcVar2)();\n                return;\n            }\n            if (iVar5 != 0x50) {\n                fcn.140020780();\n                pcVar2 = swi(3);\n                (*pcVar2)();\n                return;\n            }\n        }\n        fcn.140028da8(arg3, arg2);\n    }\n    else if (uVar4 < 0x104) {\n        piVar6 = fcn.140017fc0();\n        if (piVar6 == NULL) {\n            fcn.1400031e0(0x80004005);\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n        iStack408 = (**(*piVar6 + 0x18))(piVar6);\n        iStack408 = iStack408 + 0x18;\n        fcn.140028bb8(lpBuffer, &iStack408);\n        iVar3 = iStack408;\n        iVar5 = (*_sym.imp.SHLWAPI.dll_PathIsUNCA)(iStack408);\n        if (iVar5 == 0) {\n            uStack432 = 0;\n            uStack440 = 0;\n            puStack448 = auStack424;\n            puStack456 = auStack400;\n            iVar5 = (*_sym.imp.KERNEL32.dll_GetVolumeInformationA)(iVar3, 0, 0, 0);\n            if (iVar5 == 0) {\n                fcn.140028da8(arg3, arg2);\n                LOCK();\n                piVar1 = iVar3 + -8;\n                iVar5 = *piVar1;\n                *piVar1 = *piVar1 + -1;\n                if (iVar5 + -1 < 1) {\n                    (**(**(iVar3 + -0x18) + 8))();\n                }\n                goto code_r0x00014002910c;\n            }\n            if ((auStack424[0] & 2) == 0) {\n                (*_sym.imp.USER32.dll_CharUpperA)(lpBuffer);\n            }\n            if (((auStack424[0] & 4) == 0) && (iVar7 = (*_sym.imp.KERNEL32.dll_FindFirstFileA)(arg2),  iVar7 != -1)) {\n                (*_sym.imp.KERNEL32.dll_FindClose)(iVar7);\n                if ((uStack416 == 0) || (uStack416 <= lpBuffer)) {\n                    fcn.140028da8(arg3, arg2);\n                    LOCK();\n                    piVar1 = iVar3 + -8;\n                    iVar5 = *piVar1;\n                    *piVar1 = *piVar1 + -1;\n                    if (iVar5 + -1 < 1) {\n                        (**(**(iVar3 + -0x18) + 8))();\n                    }\n                    goto code_r0x00014002910c;\n                }\n                iVar5 = (*_sym.imp.KERNEL32.dll_lstrlenA)(auStack332);\n                iVar8 = uStack416 - lpBuffer;\n                if (0x103 < iVar5 + iVar8) {\n                    if (arg3 != 0) {\n                        *(arg3 + 0x10) = 3;\n                        if (arg2 == 0) {\n                            uVar4 = 0;\n                        }\n                        else {\n                            uVar4 = fcn.1400699a0(arg2);\n                        }\n                        fcn.140005294(arg3 + 0x18, arg2, uVar4);\n                    }\n                    LOCK();\n                    piVar1 = iVar3 + -8;\n                    iVar5 = *piVar1;\n                    *piVar1 = *piVar1 + -1;\n                    if (iVar5 + -1 < 1) {\n                        (**(**(iVar3 + -0x18) + 8))();\n                    }\n                    goto code_r0x00014002910c;\n                }\n                iVar5 = fcn.14006a34c(uStack416, 0x104 - iVar8, auStack332);\n                if (iVar5 != 0) {\n                    if (iVar5 == 0xc) {\n                        fcn.140020738();\n                        pcVar2 = swi(3);\n                        (*pcVar2)();\n                        return;\n                    }\n                    if ((iVar5 == 0x16) || (iVar5 == 0x22)) {\n                        fcn.140020780();\n                        pcVar2 = swi(3);\n                        (*pcVar2)();\n                        return;\n                    }\n                    if (iVar5 != 0x50) {\n                        fcn.140020780();\n                        pcVar2 = swi(3);\n                        (*pcVar2)();\n                        return;\n                    }\n                }\n            }\n        }\n        LOCK();\n        piVar1 = iVar3 + -8;\n        iVar5 = *piVar1;\n        *piVar1 = *piVar1 + -1;\n        if (iVar5 + -1 < 1) {\n            (**(**(iVar3 + -0x18) + 8))();\n        }\n    }\n    else if (arg3 != 0) {\n        *(arg3 + 0x10) = 3;\n        if (arg2 != 0) {\n            uVar4 = fcn.1400699a0(arg2);\n            arg3_00 = uVar4;\n        }\n        fcn.140005294(arg3 + 0x18, arg2, arg3_00);\n    }\ncode_r0x00014002910c:\n    fcn.140069870(uStack56 ^ auStack488);\n    return;\n}\n",
        "token_count": 1668
    },
    "14002992": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.140029924(int64_t arg1, ulong arg2, uchar *arg3, ulong arg4)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    uchar auStack520 [32];\n    ulong uStack488;\n    uchar auStack472 [8];\n    int64_t *piStack464;\n    int64_t *piStack456;\n    int64_t iStack448;\n    ulong uStack440;\n    uchar auStack424 [12];\n    uint32_t uStack412;\n    uint64_t uStack56;\n    \n    uStack440 = 0xfffffffffffffffe;\n    uStack56 = *0x1400d96f0 ^ auStack520;\n    piStack464 = NULL;\n    *arg3 = 0;\n    if (arg1 != 0) {\n        uStack488 = CONCAT44(uStack488._4_4_, 0x800);\n        iVar3 = (*_sym.imp.SHELL32.dll_SHGetFileInfoA)(arg2, 0, auStack424, 0x168);\n        if ((iVar3 != 0) && ((uStack412 >> 0x10 & 1) != 0)) {\n            uStack488 = &piStack464;\n            iVar2 = fcn.1400298a0(auStack472, 0x1400a5998, 0, 0x1400a59a8);\n            if ((-1 < iVar2) && (piStack464 != NULL)) {\n                piStack456 = NULL;\n                iVar2 = (***piStack464)(piStack464, 0x1400b6238, &piStack456);\n                if (-1 < iVar2) {\n                    fcn.14002010c(&iStack448, arg2);\n                    if (piStack456 != NULL) {\n                        iVar2 = (**(*piStack456 + 0x28))(piStack456, iStack448, 0);\n                        if ((-1 < iVar2) &&\n                           (iVar2 = (**(*piStack464 + 0x98))(piStack464, *(arg1 + 0x40), 2),  -1 < iVar2)) {\n                            uStack488 = uStack488 & 0xffffffff00000000;\n                            (**(*piStack464 + 0x18))(piStack464, arg3, arg4, 0);\n                            (**(*piStack456 + 0x10))();\n                            (**(*piStack464 + 0x10))();\n                            LOCK();\n                            piVar1 = iStack448 + -8;\n                            iVar2 = *piVar1;\n                            *piVar1 = *piVar1 + -1;\n                            if (iVar2 + -1 < 1) {\n                                (**(**(iStack448 + -0x18) + 8))();\n                            }\n                            goto code_r0x000140029ae1;\n                        }\n                        if (piStack456 != NULL) {\n                            (**(*piStack456 + 0x10))();\n                        }\n                    }\n                    LOCK();\n                    piVar1 = iStack448 + -8;\n                    iVar2 = *piVar1;\n                    *piVar1 = *piVar1 + -1;\n                    if (iVar2 + -1 < 1) {\n                        (**(**(iStack448 + -0x18) + 8))();\n                    }\n                }\n                (**(*piStack464 + 0x10))();\n            }\n        }\n    }\ncode_r0x000140029ae1:\n    fcn.140069870(uStack56 ^ auStack520);\n    return;\n}\n",
        "token_count": 788
    },
    "14002a0d": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.14002a0d4(ulong *hMem, ulong arg2, ulong noname_2, ulong arg4)\n\n{\n    code *pcVar1;\n    int16_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint32_t *arg1;\n    ushort *puVar6;\n    uint64_t arg2_00;\n    int64_t arg2_01;\n    uint32_t uVar7;\n    uint64_t arg1_00;\n    int32_t iVar8;\n    uint64_t arg3;\n    bool bVar9;\n    uchar auStack200 [32];\n    uchar *puStack168;\n    uint uStack160;\n    ushort uStack152;\n    uchar auStack136 [64];\n    uint64_t uStack72;\n    \n    uStack72 = *0x1400d96f0 ^ auStack200;\n    uStack152 = noname_2;\n    if (*(hMem + 1) != 0) {\n        arg1 = (*_sym.imp.KERNEL32.dll_GlobalLock)(*hMem);\n        bVar9 = *(arg1 + 2) == -1;\n        if (*(arg1 + 2) == -1) {\n            uVar7 = arg1[3];\n        }\n        else {\n            uVar7 = *arg1;\n        }\n        iVar8 = (-bVar9 & 2) + 1;\n        iVar5 = iVar8 * 2;\n        if (bVar9) {\n            arg1[3] = arg1[3] | 0x40;\n        }\n        else {\n            *arg1 = *arg1 | 0x40;\n        }\n        iVar3 = (*_sym.imp.KERNEL32.dll_lstrlenA)(arg2);\n        if (iVar3 < 0x20) {\n            puStack168 = auStack136;\n            uStack160 = 0x20;\n            iVar3 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)(0, 0, arg2, 0xffffffff);\n            iVar3 = iVar5 + iVar3 * 2;\n            if (iVar5 <= iVar3) {\n                puVar6 = fcn.140029bac(arg1);\n                iVar4 = 0;\n                if ((uVar7 & 0x40) != 0) {\n                    iVar4 = fcn.14006bd0c(iVar5 + puVar6);\n                    iVar4 = iVar5 + 2 + iVar4 * 2;\n                }\n                arg3 = iVar4 + 3 + puVar6 & 0xfffffffffffffffc;\n                arg1_00 = iVar3 + 3 + puVar6 & 0xfffffffffffffffc;\n                if (bVar9) {\n                    iVar2 = *(arg1 + 4);\n                }\n                else {\n                    iVar2 = *(arg1 + 2);\n                }\n                if ((iVar3 != iVar4) && (iVar2 != 0)) {\n                    arg2_00 = (*(hMem + 1) - arg3) + arg1;\n                    if (*(hMem + 1) < arg2_00) goto code_r0x00014002a2a9;\n                    iVar4 = fcn.14006a3c0(arg1_00, arg2_00, arg3, arg2_00);\n                    if (iVar4 != 0) {\n                        if (iVar4 == 0xc) {\n                            fcn.140020738();\n                            pcVar1 = swi(3);\n                            (*pcVar1)();\n                            return;\n                        }\n                        if ((iVar4 == 0x16) || (iVar4 == 0x22)) {\n                            fcn.140020780();\n                            pcVar1 = swi(3);\n                            (*pcVar1)();\n                            return;\n                        }\n                        if (iVar4 != 0x50) {\n                            fcn.140020780();\n                            pcVar1 = swi(3);\n                            (*pcVar1)();\n                            return;\n                        }\n                    }\n                }\n                arg2_01 = iVar3 + iVar8 * -2;\n                *puVar6 = uStack152;\n                iVar5 = fcn.14006a3c0(iVar5 + puVar6, arg2_01, auStack136, arg2_01);\n                if (iVar5 != 0) {\n                    if (iVar5 == 0xc) {\n                        fcn.140020738();\n                        pcVar1 = swi(3);\n                        (*pcVar1)();\n                        return;\n                    }\n                    if ((iVar5 == 0x16) || (iVar5 == 0x22)) {\n                        fcn.140020780();\n                        pcVar1 = swi(3);\n                        (*pcVar1)();\n                        return;\n                    }\n                    if (iVar5 != 0x50) {\n                        fcn.140020780();\n                        pcVar1 = swi(3);\n                        (*pcVar1)();\n                        return;\n                    }\n                }\n                *(hMem + 1) = *(hMem + 1) + (arg1_00 - arg3);\n                (*_sym.imp.KERNEL32.dll_GlobalUnlock)(*hMem);\n                *(hMem + 0xc) = 0;\n            }\n        }\n    }\ncode_r0x00014002a2a9:\n    fcn.140069870(uStack72 ^ auStack200);\n    return;\n}\n",
        "token_count": 1169
    },
    "14003314": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.14003314c(ulong noname_0, ulong *arg2, ulong arg3, int32_t *arg4)\n\n{\n    int16_t *piVar1;\n    int64_t iVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    int64_t iVar5;\n    uint32_t uVar6;\n    uint32_t in_stack_00000028;\n    uchar auStack136 [32];\n    int64_t **ppiStack104;\n    int64_t *piStack88;\n    int64_t *piStack80;\n    uint uStack72;\n    ulong uStack64;\n    ulong uStack52;\n    ulong uStack44;\n    uint64_t uStack32;\n    \n    uStack32 = *0x1400d96f0 ^ auStack136;\n    if ((arg2 != NULL) && (arg4 != NULL)) {\n        piStack80 = NULL;\n        iVar3 = (***arg2)(arg2, 0x1400a6588, &piStack80);\n        if (in_stack_00000028 != 0) {\n            fcn.1400698a0(arg4, 0, in_stack_00000028 << 2);\n        }\n        if (-1 < iVar3) {\n            uStack72 = 0;\n            piStack88 = NULL;\n            ppiStack104 = &piStack88;\n            uStack52 = *0x1400b7f80;\n            uStack44 = *0x1400b7f88;\n            uStack64 = arg3;\n            iVar3 = (**(*piStack80 + 0x18))(*0x1400b7f80);\n            if (-1 < iVar3) {\n                uVar6 = 0;\n                iVar5 = 0;\n                while( true ) {\n                    uVar4 = in_stack_00000028;\n                    if (*(piStack88 + 1) < in_stack_00000028) {\n                        uVar4 = *(piStack88 + 1);\n                    }\n                    iVar2 = *piStack88;\n                    if (uVar4 <= uVar6) break;\n                    piVar1 = iVar2 + 0x38 + iVar5;\n                    uVar6 = uVar6 + 1;\n                    iVar5 = iVar5 + 0x48;\n                    *arg4 = *piVar1;\n                    arg4 = arg4 + 1;\n                }\n                if (iVar2 != 0) {\n                    (*_sym.imp.ole32.dll_CoTaskMemFree)(iVar2);\n                }\n            }\n            (*_sym.imp.ole32.dll_CoTaskMemFree)(piStack88);\n        }\n        if (piStack80 != NULL) {\n            (**(*piStack80 + 0x10))();\n        }\n    }\n    fcn.140069870(uStack32 ^ auStack136);\n    return;\n}\n",
        "token_count": 625
    },
    "140033e2": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.140033e20(int64_t *vt)\n\n{\n    int64_t iVar1;\n    ulong *puVar2;\n    uint64_t uVar3;\n    int64_t *piVar4;\n    ulong *puVar5;\n    code *pcVar6;\n    int32_t iVar7;\n    int64_t **ppiVar8;\n    int64_t arg1;\n    int64_t **ppiVar9;\n    int64_t **ppiVar10;\n    uint32_t uVar11;\n    int64_t **ppiVar12;\n    ulong in_R9;\n    uchar auStack312 [32];\n    ulong uStack280;\n    ulong uStack272;\n    int64_t *piStack264;\n    int64_t **ppiStack256;\n    int64_t *piStack248;\n    int64_t iStack240;\n    int64_t **ppiStack232;\n    uint uStack224;\n    int64_t iStack216;\n    int64_t iStack208;\n    ulong uStack200;\n    int64_t **ppiStack192;\n    ulong uStack184;\n    uchar auStack168 [32];\n    uint uStack136;\n    uint uStack132;\n    uint uStack128;\n    uint uStack124;\n    uint uStack120;\n    uint uStack116;\n    uchar auStack112 [32];\n    uint uStack80;\n    uint uStack76;\n    uint uStack72;\n    uint uStack68;\n    uint uStack64;\n    uint uStack60;\n    uint64_t uStack56;\n    \n    uStack184 = 0xfffffffffffffffe;\n    uStack56 = *0x1400d96f0 ^ auStack312;\n    iVar1 = vt[5];\n    iStack240 = vt[4];\n    ppiVar10 = NULL;\n    if (vt[0x12] == 0) {\n        piVar4 = vt[2];\n        if ((piVar4 == NULL) ||\n           (iVar7 = (**(*piVar4 + 0x18))(piVar4, 0x1400b5a08, &piStack264, &ppiStack256),  iVar7 < 0))\n        goto code_r0x000140034319;\n        fcn.14002e578(vt, auStack168, 0x1400b7058);\n        uStack136 = 0;\n        uStack132 = 0;\n        uStack124 = 0x20;\n        uStack128 = 0xffffffff;\n        uStack120 = 0;\n        uStack116 = 0x1fb;\n        fcn.14002e578(vt, auStack112, 0x1400b7178);\n        uStack80 = 0x28;\n        uStack76 = 0;\n        uStack68 = 0x30;\n        uStack72 = 0xffffffff;\n        uStack64 = 0;\n        uStack60 = 0x1e;\n        uStack280 = uStack280._4_4_ << 0x20;\n        iVar7 = (**(*piStack264 + 0x20))(piStack264, 2, auStack168);\n        if (iVar7 < 0) {\n            (**(*piStack264 + 0x10))();\n            goto code_r0x000140034319;\n        }\n        ppiStack232 = ppiStack256;\n        uStack224 = 1;\n        iStack216 = 0;\n        iStack208 = 0;\n        uStack200 = 0;\n        iVar7 = (**(*piStack264 + 0x30))(piStack264, 0, &ppiStack232);\n        if (iVar7 < 0) {\n            (**(*piStack264 + 0x10))();\n            goto code_r0x000140034319;\n        }\n        vt[5] = iStack216;\n        ppiStack256 = ppiStack192;\n        vt[0xd] = iStack208;\n        vt[4] = ppiStack192;\n        (**(*piStack264 + 0x10))();\n    }\n    else {\n        iVar7 = (**(*vt[0x13] + 0x28))(vt[0x13], 0x1400b6a58, &piStack248);\n        if (iVar7 < 0) goto code_r0x000140034319;\n        iVar7 = (***piStack248)(piStack248, 0x1400b67f8, &ppiStack256);\n        if (-1 < iVar7) {\n            piStack264 = NULL;\n            iVar7 = (*(*ppiStack256)[4])(ppiStack256, 0x1400b6b78, &piStack264);\n            if (-1 < iVar7) {\n                (**(*piStack264 + 0x28))(piStack264, vt[1] + 0x178, vt + 0x16);\n                (**(*piStack264 + 0x10))();\n            }\n            (*(*ppiStack256)[2])();\n        }\n        ppiVar8 = fcn.140003694(0x28);\n        piVar4 = piStack248;\n        ppiVar12 = ppiVar10;\n        ppiStack256 = ppiVar8;\n        if (ppiVar8 != NULL) {\n            *ppiVar8 = NULL;\n            ppiVar8[1] = NULL;\n            ppiVar8[4] = NULL;\n            ppiVar8[2] = NULL;\n            ppiVar8[3] = NULL;\n            ppiVar12 = ppiVar8;\n            if (*ppiVar8 != piStack248) {\n                if (piStack248 != NULL) {\n                    (**(*piStack248 + 8))(piStack248);\n                }\n                if (*ppiVar8 != NULL) {\n                    (**(**ppiVar8 + 0x10))();\n                }\n                *ppiVar8 = piVar4;\n            }\n        }\n        vt[0x14] = ppiVar12;\n        (**(*piStack248 + 0x10))();\n        puVar2 = *vt[0x14];\n        if (puVar2 != NULL) {\n            (***puVar2)(puVar2, 0x1400a65a8, vt[0x14] + 1);\n        }\n        ppiVar8 = fcn.140003694(0x48);\n        ppiVar12 = ppiVar10;\n        if (ppiVar8 != NULL) {\n            *ppiVar8 = NULL;\n            *(ppiVar8 + 1) = 0;\n            ppiVar8[2] = NULL;\n            ppiVar8[3] = NULL;\n            ppiVar8[5] = NULL;\n            ppiVar8[6] = NULL;\n            *(ppiVar8 + 0x3c) = 0;\n            ppiVar8[8] = 0x1f40;\n            ppiVar8[4] = NULL;\n            ppiVar12 = ppiVar8;\n        }\n        vt[0x15] = ppiVar12;\n        fcn.14003328c(ppiVar12, *vt[0x14]);\n        *(vt[0x14] + 0x10) = vt[0x15];\n        uVar3 = *(vt[0x15] + 0x18);\n        vt[4] = uVar3;\n        if (0x1ffffff < uVar3) goto code_r0x000140034319;\n        arg1 = (*_sym.imp.ole32.dll_CoTaskMemAlloc)();\n        vt[5] = arg1;\n        if (arg1 == 0) {\n            fcn.140020738();\n            pcVar6 = swi(3);\n            (*pcVar6)();\n            return;\n        }\n        ppiVar12 = vt[4] << 6;\n        fcn.1400698a0(arg1, 0, ppiVar12);\n        ppiVar8 = vt[0x14];\n        if (ppiVar8[3] != NULL) {\n            uStack272 = 0;\n            uStack280 = 0;\n            in_R9 = 0;\n            ppiVar12 = ppiVar8 + 3;\n            (**(**ppiVar8 + 0x30))();\n            ppiVar8[3] = NULL;\n        }\n        iVar7 = (**(**ppiVar8 + 0x38))();\n        if (-1 < iVar7) {\n            fcn.140031618(ppiVar8, 0, CONCAT71(ppiVar12 >> 8, 1), in_R9);\n        }\n        ppiVar12 = vt[0x14] + 3;\n        if (*ppiVar12 != NULL) {\n            piVar4 = *vt[0x14];\n            uStack272 = 0;\n            uStack280 = 0;\n            (**(*piVar4 + 0x30))(piVar4, 1, ppiVar12);\n            *ppiVar12 = NULL;\n        }\n    }\n    ppiVar12 = ppiVar10;\n    ppiVar8 = ppiVar10;\n    if (0 < vt[4]) {\n        do {\n            ppiStack256 = fcn.140003694(0x38);\n            ppiVar9 = ppiVar10;\n            if (ppiStack256 != NULL) {\n                ppiVar9 = fcn.14003aea8(ppiStack256, 10);\n            }\n            *(ppiVar8 + vt[5] + 0x38) = ppiVar9;\n            uVar11 = ppiVar12 + 1;\n            ppiVar12 = uVar11;\n            ppiVar8 = ppiVar8 + 8;\n        } while (uVar11 < vt[4]);\n    }\n    if (iVar1 != 0) {\n        if (0 < iStack240) {\n            ppiVar12 = iVar1 + 0x38;\n            do {\n                puVar2 = (*ppiVar12)[1];\n                while (puVar2 != NULL) {\n                    if (puVar2 == NULL) {\n                        fcn.140020780();\n                        pcVar6 = swi(3);\n                        (*pcVar6)();\n                        return;\n                    }\n                    puVar5 = *puVar2;\n                    (**(*vt + 0x10))(vt, puVar2[2], 1);\n                    puVar2 = puVar5;\n                }\n                fcn.14003ad34(*ppiVar12);\n                piVar4 = *ppiVar12;\n                if (piVar4 != NULL) {\n                    (**(*piVar4 + 8))(piVar4, 1);\n                }\n                uVar11 = ppiVar10 + 1;\n                ppiVar10 = uVar11;\n                ppiVar12 = ppiVar12 + 8;\n            } while (uVar11 < iStack240);\n        }\n        (*_sym.imp.ole32.dll_CoTaskMemFree)(iVar1);\n    }\ncode_r0x000140034319:\n    fcn.140069870(uStack56 ^ auStack312);\n    return;\n}\n",
        "token_count": 2441
    },
    "14003a6a": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nulong * fcn.14003a6a4(int64_t arg1, ulong arg2)\n\n{\n    ulong *puVar1;\n    int64_t arg1_00;\n    uint32_t auStackX24 [2];\n    uchar auStackX32 [8];\n    \n    arg1_00 = arg1;\n    puVar1 = fcn.14003a424(arg1, arg2, auStackX24, auStackX32);\n    if (puVar1 == NULL) {\n        if (*(arg1_00 + 8) == 0) {\n            fcn.14003a348(arg1_00, *(arg1_00 + 0x10), 1);\n        }\n        puVar1 = fcn.14003a638(arg1);\n        puVar1[1] = arg2;\n        *puVar1 = *(*(arg1 + 8) + auStackX24[0] * 8);\n        *(*(arg1 + 8) + auStackX24[0] * 8) = puVar1;\n    }\n    return puVar1 + 2;\n}\n",
        "token_count": 242
    },
    "14003b31": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nbool fcn.14003b31c(int64_t arg1, int64_t arg2, ulong plUbound)\n\n{\n    uchar auVar1 [16];\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    int32_t iVar6;\n    int64_t arg1_00;\n    int64_t arg1_01;\n    ulong uVar7;\n    int64_t arg1_02;\n    int64_t iVar8;\n    uint64_t uVar9;\n    uint64_t uVar10;\n    bool bVar11;\n    ulong uStack152;\n    int64_t iStack144;\n    ulong uStack136;\n    int64_t iStack128;\n    int64_t iStack120;\n    int64_t iStack112;\n    int64_t iStack104;\n    int32_t *piStack96;\n    int32_t *piStack88;\n    int32_t *piStack80;\n    ulong uStack72;\n    \n    uStack72 = 0xfffffffffffffffe;\n    if ((arg1 == 0) || (arg2 == 0)) {\n        bVar11 = arg1 == arg2;\n    }\n    else {\n        uVar2 = (*_sym.imp.OLEAUT32.dll_SafeArrayGetElemsize)();\n        uVar3 = (*_sym.imp.OLEAUT32.dll_SafeArrayGetElemsize)(arg2);\n        if (uVar2 == uVar3) {\n            if (uVar2 == 0) {\n                bVar11 = true;\n            }\n            else {\n                uVar4 = (*_sym.imp.OLEAUT32.dll_SafeArrayGetUBound)(arg1);\n                uVar5 = (*_sym.imp.OLEAUT32.dll_SafeArrayGetUBound)(arg2);\n                if (uVar4 == uVar5) {\n                    iStack112 = 0;\n                    iStack128 = 0;\n                    iStack120 = 0;\n                    iStack104 = 0;\n                    uStack152 = 0;\n                    uStack136 = 0;\n                    auVar1 = ZEXT816(4) * ZEXT816(uVar2);\n                    uVar7 = SUB168(auVar1, 0);\n                    if (SUB168(auVar1 >> 0x40, 0) != 0) {\n                        uVar7 = 0xffffffffffffffff;\n                    }\n                    arg1_00 = fcn.140003694(uVar7);\n                    auVar1 = ZEXT816(4) * ZEXT816(uVar3);\n                    uVar7 = SUB168(auVar1, 0);\n                    if (SUB168(auVar1 >> 0x40, 0) != 0) {\n                        uVar7 = 0xffffffffffffffff;\n                    }\n                    iStack112 = arg1_00;\n                    iStack144 = fcn.140003694(uVar7);\n                    auVar1 = ZEXT816(4) * ZEXT816(uVar2);\n                    uVar7 = SUB168(auVar1, 0);\n                    if (SUB168(auVar1 >> 0x40, 0) != 0) {\n                        uVar7 = 0xffffffffffffffff;\n                    }\n                    iStack128 = iStack144;\n                    arg1_01 = fcn.140003694(uVar7);\n                    auVar1 = ZEXT816(4) * ZEXT816(uVar3);\n                    uVar7 = SUB168(auVar1, 0);\n                    if (SUB168(auVar1 >> 0x40, 0) != 0) {\n                        uVar7 = 0xffffffffffffffff;\n                    }\n                    iStack120 = arg1_01;\n                    arg1_02 = fcn.140003694(uVar7);\n                    iVar8 = 1;\n                    uVar9 = 0;\n                    iStack104 = arg1_02;\n                    while (uVar9 < uVar2) {\n                        piStack80 = arg1_00 + uVar9 * 4;\n                        uVar5 = uVar9 + 1;\n                        uVar10 = uVar5;\n                        uVar3 = (*_sym.imp.OLEAUT32.dll_SafeArrayLock)(arg1, uVar10, piStack80);\n                        fcn.14003b2f8(uVar3);\n                        piStack88 = iStack144 + uVar9 * 4;\n                        uVar3 = (*_sym.imp.OLEAUT32.dll_SafeArrayLock)(arg2, uVar5, piStack88);\n                        fcn.14003b2f8(uVar3);\n                        piStack96 = arg1_01 + uVar9 * 4;\n                        uVar3 = (*_sym.imp.OLEAUT32.dll_SafeArrayGetLBound)(arg1, uVar10, piStack96);\n                        fcn.14003b2f8(uVar3);\n                        uVar3 = (*_sym.imp.OLEAUT32.dll_SafeArrayGetLBound)();\n                        fcn.14003b2f8(uVar3);\n                        if (*piStack96 - *piStack80 != *(arg1_02 + uVar9 * 4) - *piStack88) {\n                            fcn.1400036d8(arg1_00);\n                            fcn.1400036d8(iStack144);\n                            fcn.1400036d8(arg1_01);\n                            fcn.1400036d8(arg1_02);\n                            return false;\n                        }\n                        iVar8 = iVar8 * ((*piStack96 - *piStack80) + 1);\n                        uVar9 = uVar10;\n                    }\n                    uVar2 = (*_sym.imp.OLEAUT32.dll_SafeArrayUnaccessData)(arg1, &uStack152);\n                    fcn.14003b2f8(uVar2);\n                    uVar2 = (*_sym.imp.OLEAUT32.dll_SafeArrayUnaccessData)(arg2, &uStack136);\n                    fcn.14003b2f8(uVar2);\n                    iVar6 = fcn.14006af20(uStack152, uStack136, uVar4 * iVar8);\n                    bVar11 = iVar6 == 0;\n                    uVar2 = (*_sym.imp.OLEAUT32.dll_SafeArrayGetElement)();\n                    fcn.14003b2f8(uVar2);\n                    uVar2 = (*_sym.imp.OLEAUT32.dll_SafeArrayGetElement)();\n                    fcn.14003b2f8(uVar2);\n                    fcn.1400036d8(arg1_00);\n                    fcn.1400036d8(iStack144);\n                    fcn.1400036d8(arg1_01);\n                    fcn.1400036d8(arg1_02);\n                }\n                else {\n                    bVar11 = false;\n                }\n            }\n        }\n        else {\n            bVar11 = false;\n        }\n    }\n    return bVar11;\n}\n",
        "token_count": 1513
    },
    "14003d48": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.14003d488(ulong *arg1, ulong arg2, ulong arg3)\n\n{\n    ulong uVar1;\n    uint32_t uVar2;\n    uint64_t *puVar3;\n    ulong *puVar4;\n    uint64_t uStack56;\n    uint uStack48;\n    uint64_t uStack40;\n    uint uStack32;\n    uchar auStack24 [16];\n    \n    uStack56 = uStack56;\n    uStack48 = 0;\n    uStack40 = uStack40;\n    uStack32 = 0;\n    uVar2 = fcn.14006bd00(arg2);\n    uStack56 = uStack56 & 0xffffffff00000000 | uVar2;\n    puVar3 = fcn.14003d320(&uStack56, auStack24, 10000);\n    uStack56 = *puVar3;\n    uStack48 = *(puVar3 + 1);\n    if (arg2 < 0) {\n        puVar3 = fcn.14003d2e4(&uStack56, auStack24);\n        uStack56 = *puVar3;\n        uStack48 = *(puVar3 + 1);\n    }\n    uVar2 = fcn.14006bd00(arg3);\n    uStack40 = uStack40 & 0xffffffff00000000 | uVar2;\n    if (arg3 < 0) {\n        puVar3 = fcn.14003d2e4(&uStack40, auStack24);\n        uStack40 = *puVar3;\n        uStack32 = *(puVar3 + 1);\n    }\n    puVar4 = fcn.14003d22c(&uStack56, auStack24, &uStack40);\n    uVar1 = *puVar4;\n    *(arg1 + 1) = 0;\n    *arg1 = uVar1;\n    return;\n}\n",
        "token_count": 431
    },
    "14003fda": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nushort * fcn.14003fda8(ushort *arg1, int64_t lpString)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    code *pcVar3;\n    uint uVar4;\n    int64_t iVar5;\n    ushort *puVar6;\n    uint64_t noname_1;\n    int16_t in_R8W;\n    unkbyte6 in_R8;\n    code *apcStack592 [3];\n    int64_t aiStack568 [70];\n    \n    *arg1 = 8;\n    *(arg1 + 4) = 0;\n    if (lpString != 0) {\n        if (in_R8W == 0xe) {\n            uVar4 = (*_sym.imp.KERNEL32.dll_lstrlenA)(lpString);\n            iVar5 = (*_sym.imp.OLEAUT32.dll_DllRegisterServer)(lpString, uVar4);\n            *(arg1 + 4) = iVar5;\n            if (iVar5 == 0) {\n                fcn.140020738();\n                pcVar3 = swi(3);\n                puVar6 = (*pcVar3)();\n                return puVar6;\n            }\n        }\n        else {\n            iVar5 = fcn.14003fab4(apcStack592, lpString);\n            noname_1 = *(*(iVar5 + 0x18) + -0x10);\n            iVar5 = (*_sym.imp.OLEAUT32.dll_SysReAllocStringLen)();\n            if (iVar5 == 0) {\n                fcn.1400183ac();\n                pcVar3 = swi(3);\n                puVar6 = (*pcVar3)();\n                return puVar6;\n            }\n            *(arg1 + 4) = iVar5;\n            apcStack592[0] =\n                 vtable.ATL::CFixedStringT_class_ATL::CStringT_wchar_t__class_StrTraitMFC_wchar_t__class_ATL::ChTraitsCRT_wchar_t_____256_.0\n            ;\n            fcn.140018474(aiStack568, noname_1, CONCAT62(in_R8, in_R8W));\n            LOCK();\n            piVar1 = aiStack568[0] + -8;\n            iVar2 = *piVar1;\n            *piVar1 = *piVar1 + -1;\n            if (iVar2 + -1 < 1) {\n                (**(**(aiStack568[0] + -0x18) + 8))();\n            }\n        }\n    }\n    return arg1;\n}\n",
        "token_count": 555
    },
    "1400431e": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.1400431e0(int64_t hdc, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t in_stack_00000028;\n    int32_t iStack24;\n    int32_t iStack20;\n    int32_t iStack16;\n    int32_t iStack12;\n    \n    (*_sym.imp.GDI32.dll_SetBkColor)(*(hdc + 8));\n    iStack16 = arg2 + arg4;\n    iStack12 = arg3 + in_stack_00000028;\n    iStack24 = arg2;\n    iStack20 = arg3;\n    (*_sym.imp.GDI32.dll_ExtTextOutA)(*(hdc + 8), 0, 0, 2, &iStack24, 0, 0, 0);\n    return;\n}\n",
        "token_count": 184
    },
    "140047d6": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nint64_t * fcn.140047d64(ulong arg1, int64_t *arg2, ulong arg3)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int64_t *piVar4;\n    uint uStack24;\n    uint uStack20;\n    uint uStack16;\n    uint uStack12;\n    \n    if (arg2 == NULL) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        piVar4 = (*pcVar1)();\n        return piVar4;\n    }\n    if (*arg2 != 0) {\n        piVar4 = fcn.140020ac8(*arg2);\n        if (piVar4 != NULL) {\n            uStack24 = 0;\n            uStack20 = 0;\n            uStack16 = 0;\n            uStack12 = 0;\n            iVar2 = (**(*piVar4 + 0xa8))(piVar4, 0, 0, 0x50800000, &uStack24, arg1, arg3, arg2);\n            if (iVar2 != 0) {\n                uVar3 = fcn.1400152b8(piVar4);\n                if ((uVar3 >> 9 & 1) == 0) {\n                    return piVar4;\n                }\n                fcn.14001531c(arg1, 0x200, 0, 0x20);\n                return piVar4;\n            }\n        }\n        return NULL;\n    }\n    fcn.140020780();\n    pcVar1 = swi(3);\n    piVar4 = (*pcVar1)();\n    return piVar4;\n}\n",
        "token_count": 372
    },
    "14004f6e": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nulong * fcn.14004f6e0(ulong *arg1, ulong lpFileTime, ulong arg3)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    ulong *puVar3;\n    ulong uVar4;\n    uchar auStackX32 [8];\n    ulong uStack40;\n    uint16_t uStack32;\n    uint16_t uStack30;\n    uint16_t uStack26;\n    \n    iVar2 = (*_sym.imp.KERNEL32.dll_FileTimeToLocalFileTime)(lpFileTime, auStackX32);\n    if (iVar2 == 0) {\n        *arg1 = 0;\n        fcn.1400031e0(0x80070057);\n        pcVar1 = swi(3);\n        puVar3 = (*pcVar1)();\n        return puVar3;\n    }\n    iVar2 = (*_sym.imp.KERNEL32.dll_FileTimeToSystemTime)();\n    if (iVar2 == 0) {\n        *arg1 = 0;\n        fcn.1400031e0(0x80070057);\n        pcVar1 = swi(3);\n        puVar3 = (*pcVar1)();\n        return puVar3;\n    }\n    uVar4 = 0;\n    if (0x76b < uStack32) {\n        fcn.14004f598(&uStack40, uStack32, uStack30, uStack26);\n        uVar4 = uStack40;\n    }\n    *arg1 = uVar4;\n    return arg1;\n}\n",
        "token_count": 336
    },
    "140051d6": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.140051d6c(ulong noname_0, ulong arg2, ulong arg3)\n\n{\n    code *pcVar1;\n    uchar auStack360 [32];\n    ulong uStack328;\n    ulong uStack320;\n    int64_t iStack312;\n    uchar auStack296 [256];\n    uint64_t uStack40;\n    \n    uStack320 = 0xfffffffffffffffe;\n    uStack40 = *0x1400d96f0 ^ auStack360;\n    fcn.140017c2c(arg2, auStack296, 0x100);\n    if (arg3 == 0xffffffff) {\n        arg3._0_4_ = arg2;\n    }\n    iStack312 = fcn.140003694(0x40);\n    uStack328 = 0;\n    if (iStack312 != 0) {\n        uStack328 = fcn.140051be8(iStack312, auStack296, arg3);\n    }\n    fcn.14006ba84(&uStack328, 0x1400d31a8);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 257
    },
    "1400543b": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.1400543bc(ulong noname_0, ulong noname_1, ulong arg3)\n\n{\n    ulong auStackX24 [2];\n    \n    auStackX24[0] = arg3;\n    fcn.1400542cc(noname_0, noname_1, auStackX24, 1);\n    return;\n}\n",
        "token_count": 79
    },
    "14005867": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.14005867c(char **arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t *piVar1;\n    char *arg2_00;\n    code *pcVar2;\n    int64_t arg2_01;\n    int64_t arg4_00;\n    int64_t iVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    int64_t *piVar6;\n    int64_t in_stack_00000028;\n    uchar auStack440 [32];\n    int64_t *piStack408;\n    uint32_t uStack392;\n    int64_t iStack384;\n    int64_t iStack376;\n    uint auStack368 [2];\n    int64_t iStack360;\n    ulong uStack352;\n    int64_t iStack344;\n    uint uStack336;\n    uchar auStack328 [256];\n    uint64_t uStack72;\n    \n    uStack352 = 0xfffffffffffffffe;\n    uStack72 = *0x1400d96f0 ^ auStack440;\n    uStack392 = arg3;\n    piVar6 = fcn.140017fc0();\n    if (piVar6 == NULL) {\n        fcn.1400031e0(0x80004005);\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    iStack384 = (**(*piVar6 + 0x18))();\n    iStack384 = iStack384 + 0x18;\n    piVar6 = fcn.140017fc0();\n    if (piVar6 == NULL) {\n        fcn.1400031e0(0x80004005);\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    iStack376 = (**(*piVar6 + 0x18))();\n    iStack376 = iStack376 + 0x18;\n    iStack360 = 0;\n    if (in_stack_00000028 == -0x80000000) {\n        piStack408 = &iStack360;\n        fcn.1400451b4(0xffffffff80000000, 0x1400a4990, 0, 0x20019);\n    }\n    iVar3 = iStack360;\n    uStack336 = 0;\n    arg2_00 = *arg1;\n    iStack344 = iStack360;\n    while (arg2_00 != NULL) {\n        arg1 = arg1 + 1;\n        if ((in_stack_00000028 != -0x80000000) || (*arg2_00 != '\\0')) {\n            iVar4 = (*_sym.imp.KERNEL32.dll_lstrlenA)(arg2_00);\n            fcn.1400540c0(&iStack384, arg2_00, arg2, uStack392);\n            fcn.1400540c0(&iStack376, arg2_00 + iVar4 + 1, arg2, uStack392);\n            if ((in_stack_00000028 != -0x80000000) || (*(iStack384 + -0x10) != 0)) {\n                if (arg4 == 0) {\n                    auStack368[0] = 0x100;\n                    iVar4 = fcn.140045294(in_stack_00000028, iStack384, auStack328, auStack368);\n                    if (iVar4 == 0) goto code_r0x00014005883b;\n                }\n                arg4_00 = iStack376;\n                arg2_01 = iStack384;\n                uVar5 = (*_sym.imp.KERNEL32.dll_lstrlenA)(iStack376);\n                piStack408 = piStack408 & 0xffffffff00000000 | uVar5;\n                iVar4 = fcn.14004536c(in_stack_00000028, arg2_01, 1, arg4_00);\n                if (iVar4 != 0) break;\n            }\n        }\ncode_r0x00014005883b:\n        arg2_00 = *arg1;\n    }\n    if (iVar3 != 0) {\n        (*_sym.imp.ADVAPI32.dll_RegCloseKey)();\n    }\n    LOCK();\n    piVar1 = iStack376 + -8;\n    iVar4 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar4 + -1 < 1) {\n        (**(**(iStack376 + -0x18) + 8))();\n    }\n    LOCK();\n    piVar1 = iStack384 + -8;\n    iVar4 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar4 + -1 < 1) {\n        (**(**(iStack384 + -0x18) + 8))();\n    }\n    fcn.140069870(uStack72 ^ auStack440);\n    return;\n}\n",
        "token_count": 1083
    },
    "140060bc": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00014002418d)\n\nvoid fcn.140060bc4(int64_t arg1, ulong *noname_1, ulong arg3, ulong arg4)\n\n{\n    ulong uVar1;\n    ulong uVar2;\n    int64_t iVar3;\n    uint in_stack_00000028;\n    ulong in_stack_00000030;\n    \n    *(arg1 + 0x48) = 0;\n    *(arg1 + 0x7a) = 0;\n    uVar1 = *noname_1;\n    uVar2 = noname_1[1];\n    *(arg1 + 0x6c) = in_stack_00000028;\n    *(arg1 + 0x4c) = uVar1;\n    *(arg1 + 0x54) = uVar2;\n    *(arg1 + 0x60) = arg3;\n    *(arg1 + 0x68) = arg4;\n    *(arg1 + 0x7b) = 0xff;\n    *(arg1 + 0x70) = in_stack_00000030;\n    *(arg1 + 0x78) = 0;\n    *(arg1 + 0x79) = 0;\n    *(arg1 + 0x40) = 0;\n    iVar3 = fcn.140017ad4(uVar1);\n    fcn.1400240f0(0);\n    fcn.140022dcc(iVar3 + 0x40, arg1);\n    // WARNING: Could not recover jumptable at 0x0001400241a9. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(0x1400de790);\n    return;\n}\n",
        "token_count": 398
    },
    "140063d6": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.140063d6c(ulong noname_0, uint *arg2, int64_t arg3, int64_t arg4)\n\n{\n    ulong uVar1;\n    \n    fcn.1400698a0(arg2, 0, 0x40);\n    *arg2 = 0x40;\n    if (arg3 != 0) {\n        arg3 = *(arg3 + 0x40);\n    }\n    if (arg4 == 0) {\n        uVar1 = (*_sym.imp.USER32.dll_GetParent)(arg3);\n        arg2[1] = 1;\n        *(arg2 + 4) = arg3;\n        *(arg2 + 2) = uVar1;\n    }\n    else {\n        arg2[1] = 0;\n        *(arg2 + 2) = arg3;\n        *(arg2 + 4) = arg4;\n    }\n    return;\n}\n",
        "token_count": 205
    },
    "1400662a": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.1400662a8(int64_t arg1, ulong arg2)\n\n{\n    ulong arg1_00;\n    int64_t iVar1;\n    int64_t iVar2;\n    int32_t iStackX8;\n    int32_t iStackX12;\n    ulong uStack56;\n    ulong uStack48;\n    \n    iStackX8 = 1;\n    iStackX12 = 1;\n    arg1_00 = (*_sym.imp.GDI32.dll_GetStockObject)(0);\n    iVar1 = fcn.14001c070(arg1_00);\n    iVar2 = fcn.140043108();\n    if ((*(arg1 + 0x84) & 0xa000) == 0) {\n        if ((*(arg1 + 0x84) & 0x5000) == 0) {\n            iStackX8 = (*_sym.imp.USER32.dll_GetSystemMetrics)(0x20);\n            iStackX8 = iStackX8 + -1;\n            iStackX12 = (*_sym.imp.USER32.dll_GetSystemMetrics)(0x21);\n            iStackX12 = iStackX12 + -1;\n            iVar1 = iVar2;\n            if ((((*(arg1 + 0x88) & 0xa000) == 0) || (*(arg1 + 0x8c) != 0)) &&\n               (((*(arg1 + 0x88) & 0x5000) == 0 || (*(arg1 + 0x8c) == 0)))) {\n                uStack56 = *(arg1 + 0x5c);\n                uStack48 = *(arg1 + 100);\n            }\n            else {\n                uStack56 = *(arg1 + 0x4c);\n                uStack48 = *(arg1 + 0x54);\n            }\n        }\n        else {\n            uStack56 = *(arg1 + 0x3c);\n            uStack48 = *(arg1 + 0x44);\n        }\n    }\n    else {\n        uStack56 = *(arg1 + 0x2c);\n        uStack48 = *(arg1 + 0x34);\n    }\n    if (arg2 != 0) {\n        iStackX12 = 0;\n        iStackX8 = 0;\n    }\n    if (((*(arg1 + 0x84) & 0xa000) != 0) || ((*(arg1 + 0x84) & 0x5000) != 0)) {\n        (*_sym.imp.USER32.dll_InflateRect)(uStack56, &uStack56, 0xffffffff, 0xffffffff);\n    }\n    fcn.140043508(*(arg1 + 0x98), &uStack56, CONCAT44(iStackX12, iStackX8), arg1 + 0x10);\n    *(arg1 + 0x20) = CONCAT44(iStackX12, iStackX8);\n    *(arg1 + 0x10) = uStack56;\n    *(arg1 + 0x14) = uStack56._4_4_;\n    *(arg1 + 0x18) = uStack48;\n    *(arg1 + 0x1c) = uStack48._4_4_;\n    *(arg1 + 0x28) = iVar1 == iVar2;\n    return;\n}\n",
        "token_count": 742
    },
    "14006658": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.140066580(int64_t arg1, ulong pvargSrc)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    ulong uVar3;\n    int32_t iStackX8;\n    int32_t iStackX12;\n    ulong uStackX16;\n    ulong uStack56;\n    ulong uStack48;\n    int32_t iStack40;\n    int32_t iStack36;\n    int32_t iStack32;\n    int32_t iStack28;\n    uchar auStack24 [16];\n    \n    iStackX8 = pvargSrc - *(arg1 + 8);\n    iStackX12 = (pvargSrc >> 0x20) - (*(arg1 + 8) >> 0x20);\n    iVar1 = *(arg1 + 0xa4);\n    uVar3 = 2;\n    if (iVar1 == 10) {\n        *(arg1 + 0x2c) = *(arg1 + 0x2c) + iStackX8;\n    }\n    else {\n        if (iVar1 != 0xb) {\n            uVar3 = 0x22;\n            if (iVar1 == 0xc) {\n                *(arg1 + 0x30) = *(arg1 + 0x30) + iStackX12;\n            }\n            else {\n                *(arg1 + 0x38) = *(arg1 + 0x38) + iStackX12;\n            }\n            iVar1 = *(arg1 + 0x38) - *(arg1 + 0x30);\n            goto code_r0x0001400665f8;\n        }\n        *(arg1 + 0x34) = *(arg1 + 0x34) + iStackX8;\n    }\n    iVar1 = *(arg1 + 0x34) - *(arg1 + 0x2c);\ncode_r0x0001400665f8:\n    iVar2 = 0;\n    if (-1 < iVar1) {\n        iVar2 = iVar1;\n    }\n    uStackX16 = pvargSrc;\n    (**(**(arg1 + 0x70) + 0x280))(*(arg1 + 0x70), &iStackX8, iVar2, uVar3);\n    iStack40 = (*_sym.imp.USER32.dll_GetSystemMetrics)(0x4c);\n    iStack36 = (*_sym.imp.USER32.dll_GetSystemMetrics)(0x4d);\n    iStack32 = (*_sym.imp.USER32.dll_GetSystemMetrics)(0x4e);\n    iStack32 = iStack32 + iStack40;\n    iStack28 = (*_sym.imp.USER32.dll_GetSystemMetrics)(0x4f);\n    iStack28 = iStack28 + iStack36;\n    uVar3 = *(arg1 + 0x4c);\n    uStack48 = *(arg1 + 0x54);\n    if ((*(arg1 + 0xa4) == 10) || (*(arg1 + 0xa4) == 0xc)) {\n        uStack48._4_4_ = uStack48 >> 0x20;\n        uStack56 = CONCAT44(((*(arg1 + 0x60) - *(arg1 + 0x68)) - iStackX12) + uStack48._4_4_, \n                            ((*(arg1 + 0x5c) - *(arg1 + 100)) - iStackX8) + uStack48);\n        iVar1 = (*_sym.imp.USER32.dll_IntersectRect)(uVar3, auStack24, &iStack40, &uStack56);\n        if (iVar1 != 0) {\n            *(arg1 + 0x3c) = *(arg1 + 0x44) - iStackX8;\n            *(arg1 + 0x40) = *(arg1 + 0x48) - iStackX12;\n            *(arg1 + 0x4c) = uStack56;\n            *(arg1 + 0x50) = uStack56._4_4_;\n        }\n    }\n    else {\n        uStack56._0_4_ = uVar3;\n        uStack48 = CONCAT44(((uVar3 >> 0x20) - *(arg1 + 0x60)) + *(arg1 + 0x68) + iStackX12, \n                            (*(arg1 + 100) - *(arg1 + 0x5c)) + uStack56 + iStackX8);\n        uStack56 = uVar3;\n        iVar1 = (*_sym.imp.USER32.dll_IntersectRect)(uVar3, auStack24, &iStack40, &uStack56);\n        if (iVar1 != 0) {\n            *(arg1 + 0x44) = *(arg1 + 0x3c) + iStackX8;\n            *(arg1 + 0x54) = uStack48;\n            *(arg1 + 0x48) = *(arg1 + 0x40) + iStackX12;\n            *(arg1 + 0x58) = uStack48._4_4_;\n        }\n    }\n    *(arg1 + 8) = uStackX16;\n    fcn.1400662a8(arg1, 0);\n    return;\n}\n",
        "token_count": 1171
    },
    "140067bd": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.140067bdc(code **arg1, code *arg2)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int64_t *piVar4;\n    int64_t iVar5;\n    code *pcVar6;\n    ulong in_R8;\n    uchar auStack440 [32];\n    int64_t iStack408;\n    code **ppcStack400;\n    ulong uStack392;\n    int64_t aiStack376 [10];\n    uchar auStack296 [272];\n    uint64_t uStack24;\n    \n    uStack392 = 0xfffffffffffffffe;\n    uStack24 = *0x1400d96f0 ^ auStack440;\n    pcVar6 = arg2;\n    ppcStack400 = arg1;\n    fcn.1400288d8(arg1);\n    *arg1 = vtable.COleStreamFile.0;\n    piVar4 = fcn.140017fc0();\n    if (piVar4 == NULL) {\n        fcn.1400031e0(0x80004005);\n        pcVar6 = swi(3);\n        (*pcVar6)();\n        return;\n    }\n    iVar5 = (**(*piVar4 + 0x18))();\n    arg1[5] = iVar5 + 0x18;\n    arg1[4] = arg2;\n    fcn.140004828(arg1 + 5, pcVar6, in_R8);\n    piVar4 = arg1[4];\n    if (piVar4 != NULL) {\n        iVar2 = (**(*piVar4 + 0x60))(piVar4, aiStack376);\n        if ((iVar2 == 0) && (aiStack376[0] != 0)) {\n            fcn.14001f14c(&iStack408, aiStack376[0]);\n            if (0x103 < *(iStack408 + -0x10)) {\n                (*_sym.imp.ole32.dll_CoTaskMemFree)();\n                fcn.140046a0c(3, 0xffffffff, 0);\n                pcVar6 = swi(3);\n                (*pcVar6)();\n                return;\n            }\n            fcn.140029134(auStack296, iStack408);\n            (*_sym.imp.ole32.dll_CoTaskMemFree)(aiStack376[0]);\n            uVar3 = fcn.1400699a0(auStack296);\n            fcn.140005294(arg1 + 5, auStack296, uVar3);\n            LOCK();\n            piVar1 = iStack408 + -8;\n            iVar2 = *piVar1;\n            *piVar1 = *piVar1 + -1;\n            if (iVar2 + -1 < 1) {\n                (**(**(iStack408 + -0x18) + 8))();\n            }\n        }\n    }\n    fcn.140069870(uStack24 ^ auStack440);\n    return;\n}\n",
        "token_count": 653
    },
    "14006d35": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nuint32_t fcn.14006d35c(ulong arg1)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uchar uStackX8;\n    uchar uStackX9;\n    int64_t iStack40;\n    int64_t iStack32;\n    int64_t iStack24;\n    char cStack16;\n    \n    fcn.14006b7c8(&iStack40, 0);\n    if (arg1 < 0x100) {\n        if (*(iStack40 + 0x10c) < 2) {\n            uVar2 = *(*(iStack40 + 0x140) + arg1 * 2) & 4;\n        }\n        else {\n            uVar2 = fcn.140079464(arg1, 4, &iStack40);\n        }\n        if (cStack16 != '\\0') {\n            *(iStack24 + 200) = *(iStack24 + 200) & 0xfffffffd;\n        }\n    }\n    else {\n        uStackX9 = arg1;\n        uStackX8 = arg1 >> 8;\n        if ((*(iStack32 + 8) == 0) || (iVar1 = fcn.140079838(&iStack40, 1, &uStackX8, 2),  iVar1 == 0)) {\n            if (cStack16 != '\\0') {\n                *(iStack24 + 200) = *(iStack24 + 200) & 0xfffffffd;\n            }\n            uVar2 = 0;\n        }\n        else {\n            uVar2 = 0;\n            if (cStack16 != '\\0') {\n                *(iStack24 + 200) = *(iStack24 + 200) & 0xfffffffd;\n            }\n        }\n    }\n    return uVar2;\n}\n",
        "token_count": 402
    },
    "14006d49": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nuint32_t fcn.14006d498(ulong arg1)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uchar uStackX8;\n    uchar uStackX9;\n    int64_t iStack40;\n    int64_t iStack32;\n    int64_t iStack24;\n    char cStack16;\n    \n    fcn.14006b7c8(&iStack40, 0);\n    if (arg1 < 0x100) {\n        if (*(iStack40 + 0x10c) < 2) {\n            uVar2 = *(*(iStack40 + 0x140) + arg1 * 2) & 8;\n        }\n        else {\n            uVar2 = fcn.140079464(arg1, 8, &iStack40);\n        }\n        if (cStack16 != '\\0') {\n            *(iStack24 + 200) = *(iStack24 + 200) & 0xfffffffd;\n        }\n    }\n    else {\n        uStackX9 = arg1;\n        uStackX8 = arg1 >> 8;\n        if ((*(iStack32 + 8) == 0) || (iVar1 = fcn.140079838(0, 1, &uStackX8, 2),  iVar1 == 0)) {\n            if (cStack16 != '\\0') {\n                *(iStack24 + 200) = *(iStack24 + 200) & 0xfffffffd;\n            }\n            uVar2 = 0;\n        }\n        else {\n            uVar2 = 0;\n            if (cStack16 != '\\0') {\n                *(iStack24 + 200) = *(iStack24 + 200) & 0xfffffffd;\n            }\n        }\n    }\n    return uVar2;\n}\n",
        "token_count": 399
    },
    "14000622": {
        "rules": [
            "empty recycle bin quietly/a05fef7955a340fbb66225983c77e1df"
        ],
        "decompiled_code": "\nvoid fcn.14000622c(ulong noname_0, ulong arg2)\n\n{\n    uint8_t uVar1;\n    code *pcVar2;\n    uint uVar3;\n    uchar *puVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    int64_t iVar8;\n    uint16_t uVar9;\n    uint8_t *puVar10;\n    int32_t iVar11;\n    uchar auStack200 [32];\n    uchar *puStack168;\n    uchar auStack152 [128];\n    uint64_t uStack24;\n    \n    uStack24 = *0x1400d96f0 ^ auStack200;\n    uVar3 = (*_sym.imp.USER32.dll_GetMenuCheckMarkDimensions)();\n    iVar6 = uVar3;\n    iVar7 = uVar3 >> 0x10;\n    if ((4 < iVar6) && (iVar8 = 5,  5 < iVar7)) {\n        if (0x20 < iVar6) {\n            iVar6 = 0x20;\n        }\n        iVar5 = iVar6 + 0xf >> 4;\n        iVar11 = (iVar5 * 0x10 + (iVar6 + -4) / 2) - iVar6;\n        if (0xc < iVar11) {\n            iVar11 = 0xc;\n        }\n        if (0x20 < iVar7) {\n            iVar7 = 0x20;\n        }\n        fcn.1400698a0(auStack152, 0xff, 0x80);\n        puVar10 = 0x1400a17a0;\n        puVar4 = auStack152 + (iVar7 + -6 >> 1) * iVar5 * 2;\n        do {\n            uVar1 = *puVar10;\n            puVar10 = puVar10 + 1;\n            uVar9 = ~(uVar1 << (iVar11 & 0x1f));\n            puVar4[1] = uVar9;\n            *puVar4 = uVar9 >> 8;\n            puVar4 = puVar4 + iVar5 * 2;\n            iVar8 = iVar8 + -1;\n        } while (iVar8 != 0);\n        puStack168 = auStack152;\n        *0x1400deb20 = (*_sym.imp.GDI32.dll_CreateBitmap)(iVar6, iVar7, 1);\n        if (*0x1400deb20 == 0) {\n            *0x1400deb20 = (*_sym.imp.USER32.dll_LoadBitmapA)(0, 0x7fe3);\n        }\n        fcn.140069870(uStack24 ^ auStack200);\n        return;\n    }\n    fcn.140020780();\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 621
    },
    "140031f4": {
        "rules": [
            "empty recycle bin quietly/a05fef7955a340fbb66225983c77e1df"
        ],
        "decompiled_code": "\nulong fcn.140031f48(int64_t arg1, uint64_t arg2, uint *arg3)\n\n{\n    int64_t iVar1;\n    code *pcVar2;\n    ulong uVar3;\n    uint64_t *puVar4;\n    uint64_t uVar5;\n    \n    uVar5 = 0;\n    if (arg3 == NULL) {\n        fcn.1400031e0(0x80004005);\n        pcVar2 = swi(3);\n        uVar3 = (*pcVar2)();\n        return uVar3;\n    }\n    if (*(arg1 + 0x38) == '\\0') {\n        iVar1 = *(*(arg1 + 0x28) + 0x10);\n        if (arg2 <= *(arg1 + 0x18) + -1 + iVar1) {\n            uVar5 = arg2 - iVar1;\ncode_r0x000140031fb3:\n            *arg3 = *((*(*(arg1 + 0x28) + 0x20 + uVar5 * 0x50) + 7 + *(*(arg1 + 0x28) + 8 + uVar5 * 0x50) &\n                      0xfffffffffffffff8U) + 8 + *(arg1 + 0x10));\n            return 1;\n        }\n    }\n    else if (*(arg1 + 0x18) != 0) {\n        puVar4 = *(arg1 + 0x28) + 0x10;\n        do {\n            if (*puVar4 == arg2) goto code_r0x000140031fb3;\n            uVar5 = uVar5 + 1;\n            puVar4 = puVar4 + 10;\n        } while (uVar5 < *(arg1 + 0x18));\n    }\n    return 0;\n}\n",
        "token_count": 405
    },
    "14004715": {
        "rules": [
            "empty recycle bin quietly/a05fef7955a340fbb66225983c77e1df"
        ],
        "decompiled_code": "\nvoid fcn.14004715c(int64_t hWnd, ulong arg2)\n\n{\n    ulong uVar1;\n    \n    if ((((arg2 != 0) && (arg2 != 6)) && (arg2 != 7)) && ((arg2 != 8 && (arg2 != 4)))) {\n        uVar1 = (*_sym.imp.USER32.dll_GetLastActivePopup)(*(hWnd + 0x40));\n        (*_sym.imp.USER32.dll_BringWindowToTop)(uVar1);\n    }\n    return;\n}\n",
        "token_count": 117
    },
    "14005026": {
        "rules": [
            "empty recycle bin quietly/a05fef7955a340fbb66225983c77e1df"
        ],
        "decompiled_code": "\nuint64_t fcn.140050260(uint8_t *arg1)\n\n{\n    uint8_t uVar1;\n    code *pcVar2;\n    uint64_t uVar3;\n    uint16_t in_DX;\n    int64_t iVar4;\n    \n    if (0x15 < in_DX) {\n        fcn.140020780();\n        pcVar2 = swi(3);\n        uVar3 = (*pcVar2)();\n        return uVar3;\n    }\n    uVar3 = *(in_DX * 4 + 0x1400a99d0) + 0xfU & 0xfffffff8;\n    do {\n        uVar1 = *arg1;\n        if (uVar1 == 0) {\n            return uVar3;\n        }\n        if (uVar1 != 0xff) {\n            iVar4 = 0x1400a9970;\n            if ((uVar1 & 0x40) == 0) {\n                iVar4 = 0x1400a9910;\n            }\n            if (0x15 < (uVar1 & 0xbf)) {\n                fcn.140020780();\n                pcVar2 = swi(3);\n                uVar3 = (*pcVar2)();\n                return uVar3;\n            }\n            uVar3 = *(iVar4 + (uVar1 & 0xbf) * 4) + 7 + uVar3 & 0xfffffff8;\n        }\n        arg1 = arg1 + 1;\n    } while( true );\n}\n",
        "token_count": 333
    },
    "14001404": {
        "rules": [
            "check OS version/56128ea24265487c97cb4913628bf489"
        ],
        "decompiled_code": "\nuint64_t fcn.140014048(ulong arg1, ulong arg2, ulong arg3, int64_t arg4)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint64_t uVar3;\n    int64_t *in_stack_00000028;\n    uchar auStack40 [8];\n    int64_t iStack32;\n    int32_t iStack24;\n    \n    if (arg2 < 0x2b) {\ncode_r0x000140014096:\n        if (arg2 - 0x132 < 7) {\n            iStack24 = arg2 - 0x132;\n            iStack32 = arg3;\n            uVar1 = fcn.1400131a8(arg1, 0xbc19, 0, auStack40);\n            return -(*in_stack_00000028 != 0) & uVar1;\n        }\ncode_r0x00014001416c:\n        uVar3 = 0;\n    }\n    else {\n        if ((0x2f < arg2) && (arg2 != 0x39)) {\n            if (arg2 == 0x4e) {\n                iStack32 = arg4;\n                uVar3 = fcn.140005bcc(arg1, 0, *(arg4 + 0x10) | 0xbc4e0000, auStack40);\n                return uVar3;\n            }\n            if (arg2 == 0x111) {\n                iVar2 = fcn.140005bcc(arg1, 0, arg3 >> 0x10 | 0xbd110000, 0);\n                if (iVar2 != 0) {\n                    if (in_stack_00000028 == NULL) {\n                        return 1;\n                    }\n                    *in_stack_00000028 = 1;\n                    return 1;\n                }\n                goto code_r0x00014001416c;\n            }\n            if ((arg2 < 0x114) || ((0x115 < arg2 && (arg2 != 0x210)))) goto code_r0x000140014096;\n        }\n        uVar3 = fcn.1400131a8(arg1, arg2 + 0xbc00, arg3, arg4);\n    }\n    return uVar3;\n}\n",
        "token_count": 498
    },
    "14003138": {
        "rules": [
            "check OS version/56128ea24265487c97cb4913628bf489"
        ],
        "decompiled_code": "\nuint fcn.14003138c(int64_t arg1, ulong noname_1, ulong arg3, uint32_t *arg4)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint uStack56;\n    uint uStack52;\n    ulong uStack48;\n    ulong uStack40;\n    ulong uStack32;\n    uint uStack20;\n    uint uStack12;\n    \n    uStack12 = 1;\n    if ((((noname_1 & 1) != 0) || ((noname_1 & 2) != 0)) && (uVar2 = 0,  arg3 != 0)) {\n        do {\n            uVar1 = *arg4;\n            if (0x13 < uVar1) {\n                if (uVar1 == 0x14) {\ncode_r0x000140031439:\n                    uStack12 = 5;\n                    goto code_r0x00014003143e;\n                }\n                if (uVar1 != 0x15) {\n                    if (uVar1 == 0x17) goto code_r0x0001400313d0;\n                    if (uVar1 == 0x18) {\n                        uStack12 = 2;\n                        goto code_r0x00014003143e;\n                    }\n                    if (uVar1 == 0x19) goto code_r0x00014003143e;\n                    if (uVar1 == 0x1f) {\n                        uStack12 = 4;\n                        goto code_r0x00014003143e;\n                    }\n                    goto code_r0x000140031412;\n                }\ncode_r0x0001400313f0:\n                uStack12 = 7;\ncode_r0x00014003143e:\n                uStack52 = 0xffffffff;\n                uStack56 = 3;\n                uStack48 = 0;\n                uStack40 = 0;\n                uStack32 = 0;\n                uStack20 = 0;\n                fcn.14002da00(arg1 + -0x170, &uStack56);\n                return uStack20;\n            }\n            if (uVar1 == 0x13) goto code_r0x0001400313f0;\n            if (uVar1 < 9) {\n                if (5 < uVar1) goto code_r0x0001400313f0;\n                if (uVar1 == 1) {\n                    uStack12 = 3;\n                    goto code_r0x00014003143e;\n                }\n                if (uVar1 == 2) goto code_r0x000140031439;\n                if (uVar1 == 3) goto code_r0x0001400313d0;\n            }\n            else if (8 < uVar1) {\n                if (uVar1 < 0xb) {\ncode_r0x0001400313d0:\n                    uStack12 = 6;\n                    goto code_r0x00014003143e;\n                }\n                if ((uVar1 < 0xd) || ((0xe < uVar1 && (uVar1 < 0x11)))) goto code_r0x0001400313f0;\n            }\ncode_r0x000140031412:\n            uVar2 = uVar2 + 1;\n            arg4 = arg4 + 0xe;\n        } while (uVar2 < arg3);\n    }\n    return 0;\n}\n",
        "token_count": 749
    },
    "14004d06": {
        "rules": [
            "check OS version/56128ea24265487c97cb4913628bf489"
        ],
        "decompiled_code": "\nvoid fcn.14004d060(code **arg1, ulong arg2, int64_t *arg3, int64_t arg4)\n\n{\n    code **ppcVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int64_t *piVar4;\n    int64_t iVar5;\n    code *pcVar6;\n    uchar *puVar7;\n    uint uVar8;\n    uint32_t in_stack_00000028;\n    int64_t in_stack_00000030;\n    ulong in_stack_00000038;\n    uint32_t in_stack_00000040;\n    uint in_stack_00000048;\n    uchar auStack312 [32];\n    int64_t **ppiStack280;\n    int64_t *piStack264;\n    code *pcStack256;\n    ulong uStack248;\n    code **ppcStack240;\n    uint uStack232;\n    uint32_t uStack228;\n    uint64_t uStack72;\n    \n    uStack248 = 0xfffffffffffffffe;\n    uStack72 = *0x1400d96f0 ^ auStack312;\n    piStack264 = arg3;\n    ppcStack240 = arg1;\n    fcn.140008d78(arg1, 0, in_stack_00000038);\n    *arg1 = vtable.CFileDialog.0;\n    piVar4 = fcn.140017fc0();\n    if (piVar4 == NULL) {\n        fcn.1400031e0(0x80004005);\n        pcVar6 = swi(3);\n        (*pcVar6)();\n        return;\n    }\n    iVar5 = (**(*piVar4 + 0x18))();\n    arg1[0x22] = iVar5 + 0x18;\n    arg1[0x4d] = NULL;\n    arg1[0x4e] = NULL;\n    if (in_stack_00000040 == 0) {\n        fcn.1400698a0(&uStack232, 0, 0x94);\n        uStack232 = 0x94;\n        (*_sym.imp.KERNEL32.dll_GetVersionExA)();\n        uVar8 = 0;\n        if (5 < uStack228) {\n            uVar8 = in_stack_00000048;\n        }\n        *(arg1 + 0x1e) = uVar8;\n        in_stack_00000040 = 0x98;\n    }\n    pcVar6 = fcn.140069d98(in_stack_00000040);\n    arg1[0x1d] = pcVar6;\n    if (pcVar6 == NULL) {\n        fcn.140020738();\n        pcVar6 = swi(3);\n        (*pcVar6)();\n        return;\n    }\n    fcn.1400698a0(pcVar6, 0, in_stack_00000040);\n    ppcVar1 = arg1 + 0x2b;\n    *ppcVar1 = 0;\n    *(arg1 + 0x23) = 0;\n    arg1[0x4c] = NULL;\n    *(arg1 + 0x21) = arg2;\n    *(arg1 + 0x15) = 0x7005 - (arg2 != 0);\n    *arg1[0x1d] = in_stack_00000040;\n    *(arg1[0x1d] + 0x30) = ppcVar1;\n    *(arg1[0x1d] + 0x38) = 0x104;\n    *(arg1[0x1d] + 0x68) = piStack264;\n    *(arg1[0x1d] + 0x40) = arg1 + 0x23;\n    *(arg1[0x1d] + 0x48) = 0x40;\n    *(arg1[0x1d] + 0x60) = *(arg1[0x1d] + 0x60) | in_stack_00000028 | 0x80020;\n    if ((in_stack_00000028 & 0x40) != 0) {\n        *(arg1[0x1d] + 0x60) = *(arg1[0x1d] + 0x60) & 0xff7fffff;\n    }\n    iVar5 = fcn.140017ad4();\n    *(arg1[0x1d] + 0x10) = *(iVar5 + 0x18);\n    *(arg1[0x1d] + 0x78) = 0x14005ff6c;\n    if ((arg4 != 0) && (iVar2 = fcn.14006bb18(ppcVar1, 0x104, arg4, 0xffffffffffffffff),  iVar2 != 0)) {\n        if (iVar2 == 0xc) {\n            fcn.140020738();\n            pcVar6 = swi(3);\n            (*pcVar6)();\n            return;\n        }\n        if ((iVar2 == 0x16) || (iVar2 == 0x22)) {\n            fcn.140020780();\n            pcVar6 = swi(3);\n            (*pcVar6)();\n            return;\n        }\n        if (iVar2 != 0x50) {\n            fcn.140020780();\n            pcVar6 = swi(3);\n            (*pcVar6)();\n            return;\n        }\n    }\n    if (in_stack_00000030 != 0) {\n        uVar3 = fcn.1400699a0(in_stack_00000030);\n        fcn.140005294(arg1 + 0x22, in_stack_00000030, uVar3);\n        if ((*(arg1[0x22] + -0xc) | 1U - *(arg1[0x22] + -8)) < 0) {\n            fcn.1400033e0(arg1 + 0x22, 0);\n        }\n        for (puVar7 = fcn.14006bc24(arg1[0x22], 0x7c); puVar7 != NULL; puVar7 = fcn.14006bc24(puVar7 + 1, 0x7c)) {\n            *puVar7 = 0;\n        }\n        *(arg1[0x1d] + 0x18) = arg1[0x22];\n    }\n    if (*(arg1 + 0x1e) == 1) {\n        iVar2 = (*_sym.imp.ole32.dll_CoInitializeEx)(0, 2);\n        if (iVar2 < 0) {\n            *(arg1 + 0x1e) = 0;\n        }\n        else {\n            arg1[0x4d] = vtable.CFileDialog::XFileDialogEvents.0;\n            arg1[0x4e] = vtable.CFileDialog::XFileDialogControlEvents.0;\n            if (*(arg1 + 0x21) == 0) {\n                ppiStack280 = &piStack264;\n                iVar2 = (*_sym.imp.ole32.dll_CoCreateInstance)(0x1400d8bf0, 0, 1, 0x1400a96c8);\n            }\n            else {\n                ppiStack280 = &piStack264;\n                iVar2 = (*_sym.imp.ole32.dll_CoCreateInstance)(0x1400d8be0, 0, 1, 0x1400a96c8);\n            }\n            if (iVar2 < 0) {\n                *(arg1 + 0x1e) = 0;\n            }\n            else {\n                iVar2 = (***piStack264)(piStack264, 0x1400a9260, &pcStack256);\n                if (iVar2 < 0) {\n                    fcn.140020780();\n                    pcVar6 = swi(3);\n                    (*pcVar6)();\n                    return;\n                }\n                iVar2 = (**(*piStack264 + 0x38))(piStack264, arg1 + 0x4d, arg1 + 0xf4);\n                if (iVar2 < 0) {\n                    fcn.140020780();\n                    pcVar6 = swi(3);\n                    (*pcVar6)();\n                    return;\n                }\n                arg1[0x1f] = piStack264;\n                arg1[0x20] = pcStack256;\n            }\n        }\n    }\n    fcn.140069870(uStack72 ^ auStack312);\n    return;\n}\n",
        "token_count": 1880
    },
    "14001e56": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid fcn.14001e560(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    \n    if (arg4 == -1) {\n        arg4._0_4_ = fcn.14006bd0c(arg3);\n        arg4._0_4_ = arg4 + 1;\n    }\n    iVar2 = fcn.140069a48(arg1, arg2 * 2, arg3, arg4 * 2);\n    if (iVar2 != 0) {\n        if (iVar2 == 0xc) {\n            fcn.140020738();\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        if ((iVar2 == 0x16) || (iVar2 == 0x22)) {\n            fcn.140020780();\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        if (iVar2 != 0x50) {\n            fcn.140020780();\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n    }\n    return;\n}\n",
        "token_count": 266
    },
    "140022ef": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint32_t * fcn.140022ef4(int32_t *arg1)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t *piVar3;\n    \n    *(arg1 + 6) = 0;\n    *(arg1 + 8) = 8;\n    arg1[1] = 0;\n    arg1[2] = 1;\n    arg1[3] = 0;\n    *(arg1 + 4) = 0;\n    iVar2 = (*_sym.imp.KERNEL32.dll_TlsAlloc)();\n    *arg1 = iVar2;\n    if (iVar2 == -1) {\n        fcn.140020738();\n        pcVar1 = swi(3);\n        piVar3 = (*pcVar1)();\n        return piVar3;\n    }\n    (*_sym.imp.KERNEL32.dll_InitializeCriticalSection)(arg1 + 10);\n    return arg1;\n}\n",
        "token_count": 205
    },
    "1400235a": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid fcn.1400235ac(int32_t *arg1)\n\n{\n    int64_t iVar1;\n    int64_t arg2;\n    ulong uVar2;\n    \n    arg2 = *(arg1 + 6);\n    while (arg2 != 0) {\n        iVar1 = *(arg2 + 8);\n        fcn.140023324(arg1, arg2, 0);\n        arg2 = iVar1;\n    }\n    if (*arg1 != -1) {\n        (*_sym.imp.KERNEL32.dll_TlsFree)(*arg1);\n    }\n    if (*(arg1 + 4) != 0) {\n        uVar2 = (*_sym.imp.KERNEL32.dll_GlobalHandle)();\n        (*_sym.imp.KERNEL32.dll_GlobalUnlock)(uVar2);\n        (*_sym.imp.KERNEL32.dll_GlobalFree)(uVar2);\n    }\n    // WARNING: Could not recover jumptable at 0x000140023618. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_DeleteCriticalSection)(arg1 + 10);\n    return;\n}\n",
        "token_count": 243
    },
    "14004041": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint32_t fcn.140040414(void)\n\n{\n    uint uVar1;\n    ulong uVar2;\n    int64_t iVar3;\n    ulong uVar4;\n    \n    if (*0x1400d8a38 == -1) {\n        uVar2 = (*_sym.imp.USER32.dll_GetDC)(0);\n        uVar4 = 0;\n        uVar1 = (*_sym.imp.USER32.dll_GetSystemMetrics)(0x48);\n        iVar3 = (*_sym.imp.GDI32.dll_CreateFontA)(uVar1, 0, 0, 0, 400, 0, 0, 0, 2, 0, 0, 0, 0, \"Marlett\");\n        if (iVar3 != 0) {\n            uVar4 = (*_sym.imp.GDI32.dll_SelectObject)(uVar2, iVar3);\n        }\n        (*_sym.imp.GDI32.dll_GetCharWidthA)(uVar2, 0x36, 0x36, 0x1400d8a38);\n        if (iVar3 != 0) {\n            (*_sym.imp.GDI32.dll_SelectObject)(uVar2, uVar4);\n            (*_sym.imp.GDI32.dll_DeleteObject)(iVar3);\n        }\n        (*_sym.imp.USER32.dll_ReleaseDC)(0, uVar2);\n    }\n    return *0x1400d8a38;\n}\n",
        "token_count": 312
    },
    "140043fa": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid fcn.140043fa0(int64_t *arg1, ulong lpWideCharStr)\n\n{\n    int64_t iVar1;\n    code *pcVar2;\n    uint uVar3;\n    uint32_t uVar4;\n    \n    if (arg1 == NULL) {\n        return;\n    }\n    uVar3 = (*_sym.imp.OLEAUT32.dll_VariantInit)(lpWideCharStr);\n    uVar4 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(0, 0, lpWideCharStr, uVar3, 0, 0, 0, 0);\n    if ((1U - *(*arg1 + -8) | *(*arg1 + -0xc) - uVar4) < 0) {\n        fcn.1400033e0(arg1, uVar4);\n    }\n    iVar1 = *arg1;\n    if ((uVar4 < 0) || (*(iVar1 + -0xc) < uVar4)) {\n        fcn.1400031e0(0x80070057);\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    *(iVar1 + -0x10) = uVar4;\n    *(uVar4 + *arg1) = 0;\n    (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(0, 0, lpWideCharStr, uVar3, iVar1, uVar4, 0, 0);\n    if (uVar4 == 0xffffffff) {\n        iVar1 = *arg1;\n        if (iVar1 != 0) {\n            uVar4 = fcn.14006b544(iVar1, *(iVar1 + -0xc));\n            goto code_r0x000140044076;\n        }\n        uVar4 = 0;\n    }\n    else {\ncode_r0x000140044076:\n        if (uVar4 < 0) goto code_r0x0001400440a4;\n    }\n    if (uVar4 <= *(*arg1 + -0xc)) {\n        *(*arg1 + -0x10) = uVar4;\n        *(uVar4 + *arg1) = 0;\n        return;\n    }\ncode_r0x0001400440a4:\n    fcn.1400031e0(0x80070057);\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 537
    },
    "14004fd8": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nulong fcn.14004fd84(int64_t arg1, int64_t *arg2)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    ulong uVar3;\n    int64_t *piVar4;\n    uchar uVar5;\n    uchar auStackX8 [8];\n    uchar auStackX16 [8];\n    uchar auStackX24 [8];\n    int64_t iStackX32;\n    uchar auStack56 [8];\n    uchar auStack48 [24];\n    \n    fcn.1400698a0(arg2, 0, 0x128);\n    iVar2 = fcn.14006bb18(arg2 + 0x22, 0x104, *(arg1 + 0x18), 0xffffffffffffffff);\n    if (iVar2 != 0) {\n        if (iVar2 == 0xc) {\n            fcn.140020738();\n            pcVar1 = swi(3);\n            uVar3 = (*pcVar1)();\n            return uVar3;\n        }\n        if ((iVar2 == 0x16) || (iVar2 == 0x22)) {\n            fcn.140020780();\n            pcVar1 = swi(3);\n            uVar3 = (*pcVar1)();\n            return uVar3;\n        }\n        if (iVar2 != 0x50) {\n            fcn.140020780();\n            pcVar1 = swi(3);\n            uVar3 = (*pcVar1)();\n            return uVar3;\n        }\n    }\n    if (*(arg1 + 8) == *0x1400a59b8) {\ncode_r0x00014004ff42:\n        uVar3 = 1;\n    }\n    else {\n        iVar2 = (*_sym.imp.KERNEL32.dll_GetFileTime)(*(arg1 + 8), auStackX8, auStackX16, auStackX24);\n        if (iVar2 != 0) {\n            iVar2 = (*_sym.imp.KERNEL32.dll_GetFileSizeEx)(*(arg1 + 8), &iStackX32);\n            if (iVar2 != 0) {\n                arg2[3] = iStackX32;\n                if (*(*(arg1 + 0x18) + -0x10) == 0) {\n                    *(arg2 + 4) = 0;\n                }\n                else {\n                    iVar2 = (*_sym.imp.KERNEL32.dll_GetFileAttributesA)();\n                    uVar5 = iVar2;\n                    if (iVar2 == -1) {\n                        uVar5 = 0;\n                    }\n                    *(arg2 + 4) = uVar5;\n                }\n                iVar2 = (*_sym.imp.KERNEL32.dll_FileTimeToLocalFileTime)(auStackX8, auStack56);\n                if (iVar2 == 0) {\ncode_r0x00014004fe95:\n                    *arg2 = 0;\n                }\n                else {\n                    iVar2 = (*_sym.imp.KERNEL32.dll_FileTimeToSystemTime)(auStack56, auStack48);\n                    if (iVar2 == 0) goto code_r0x00014004fe95;\n                    piVar4 = fcn.14004f6e0(auStack56, auStackX8, 0xffffffff);\n                    *arg2 = *piVar4;\n                }\n                iVar2 = (*_sym.imp.KERNEL32.dll_FileTimeToLocalFileTime)(auStackX16, auStack56);\n                if (iVar2 == 0) {\ncode_r0x00014004fedc:\n                    arg2[2] = 0;\n                }\n                else {\n                    iVar2 = (*_sym.imp.KERNEL32.dll_FileTimeToSystemTime)(auStack56, auStack48);\n                    if (iVar2 == 0) goto code_r0x00014004fedc;\n                    piVar4 = fcn.14004f6e0(auStack56, auStackX16, 0xffffffff);\n                    arg2[2] = *piVar4;\n                }\n                iVar2 = (*_sym.imp.KERNEL32.dll_FileTimeToLocalFileTime)(auStackX24, auStack56);\n                if (iVar2 == 0) {\ncode_r0x00014004ff24:\n                    arg2[1] = 0;\n                }\n                else {\n                    iVar2 = (*_sym.imp.KERNEL32.dll_FileTimeToSystemTime)(auStack56, auStack48);\n                    if (iVar2 == 0) goto code_r0x00014004ff24;\n                    piVar4 = fcn.14004f6e0(auStack56, auStackX24, 0xffffffff);\n                    arg2[1] = *piVar4;\n                }\n                if (*arg2 == 0) {\n                    *arg2 = arg2[1];\n                }\n                if (arg2[2] == 0) {\n                    arg2[2] = arg2[1];\n                }\n                goto code_r0x00014004ff42;\n            }\n        }\n        uVar3 = 0;\n    }\n    return uVar3;\n}\n",
        "token_count": 1105
    },
    "1400501d": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint fcn.1400501d0(int64_t arg1)\n\n{\n    int64_t iVar1;\n    \n    if (**(arg1 + 0x10) == -1) {\n        for (iVar1 = *(arg1 + 8); *(iVar1 + 0x30) != -1; iVar1 = iVar1 + 0x40) {\n        }\n        **(arg1 + 0x10) = iVar1 - *(arg1 + 8) >> 6;\n    }\n    return **(arg1 + 0x10);\n}\n",
        "token_count": 123
    },
    "140050a3": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint64_t * fcn.140050a3c(int64_t *arg1, uint64_t arg2)\n\n{\n    int64_t **arg1_00;\n    int64_t **ppiVar1;\n    uint64_t uVar2;\n    int64_t *piVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    bool bVar7;\n    \n    arg2 = arg2 & 0xffffffff;\n    arg1_00 = (**(*arg1 + 0x60))();\n    iVar5 = arg2;\n    bVar7 = iVar5 == 0;\n    if (bVar7) {\n        ppiVar1 = arg1_00;\n        if (arg1_00 == NULL) {\n            return NULL;\n        }\n        do {\n            for (piVar3 = ppiVar1[1]; piVar3[6] != -1; piVar3 = piVar3 + 8) {\n                if (*(piVar3 + 3) == 0xfff) {\n                    arg2 = *(piVar3 + 1);\n                    if (*(piVar3 + 1) == 0xffffffff) {\n                        uVar2 = fcn.140050978(arg1_00, *piVar3);\n                        arg2 = uVar2 & 0xffffffff;\n                        if (uVar2 == -1) {\n                            return NULL;\n                        }\n                    }\n                    iVar5 = arg2;\n                    bVar7 = iVar5 == 0;\n                    goto code_r0x000140050aa0;\n                }\n            }\n            ppiVar1 = *ppiVar1;\n        } while (ppiVar1 != NULL);\n    }\n    else {\ncode_r0x000140050aa0:\n        if (!bVar7 && -1 < iVar5) {\n            uVar4 = 0;\n            if (arg1_00 == NULL) {\n                return NULL;\n            }\n            uVar6 = arg2;\n            ppiVar1 = arg1_00;\n            do {\n                if ((uVar6 >> 0x10 & 0xffff) <= uVar4) break;\n                ppiVar1 = *ppiVar1;\n                uVar4 = uVar4 + 1;\n            } while (ppiVar1 != NULL);\n            if ((ppiVar1 != NULL) && (uVar4 = fcn.1400501d0(ppiVar1),  (uVar6 & 0xffff) <= uVar4)) {\n                piVar3 = ppiVar1[1] + (arg2 & 0xffff) * 8 + -8;\n                if (*(piVar3 + 1) == -1) {\n                    return piVar3;\n                }\n                if (*(piVar3 + 1) == uVar6) {\n                    return piVar3;\n                }\n            }\n        }\n    }\n    do {\n        if (arg1_00 == NULL) {\n            return NULL;\n        }\n        for (piVar3 = arg1_00[1]; piVar3[6] != -1; piVar3 = piVar3 + 8) {\n            if (*(piVar3 + 1) == arg2) {\n                return piVar3;\n            }\n        }\n        arg1_00 = *arg1_00;\n    } while( true );\n}\n",
        "token_count": 721
    },
    "1400540c": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid fcn.1400540c0(char **arg1, char *arg2, int64_t arg3, ulong arg4)\n\n{\n    char cVar1;\n    char *arg1_00;\n    code *pcVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    char *pcVar6;\n    uint64_t arg2_00;\n    \n    arg2_00 = 0;\n    if (arg2 == NULL) {\n        fcn.140020780();\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    if (arg3 == 0) {\n        fcn.140020780();\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    cVar1 = *arg2;\n    pcVar6 = arg2;\n    while (iVar5 = arg2_00,  cVar1 != '\\0') {\n        if (*pcVar6 == '%') {\n            cVar1 = pcVar6[1];\n            if ((cVar1 < '1') || ('9' < cVar1)) {\n                if ((cVar1 < 'A') || ('Z' < cVar1)) goto code_r0x000140054155;\n                if (cVar1 < ':') goto code_r0x000140054130;\n                iVar4 = cVar1 + -0x38;\n            }\n            else {\ncode_r0x000140054130:\n                iVar4 = cVar1 + -0x31;\n            }\n            pcVar6 = pcVar6 + 2;\n            if (arg4 <= iVar4) goto code_r0x00014005416a;\n            if (*(arg3 + iVar4 * 8) != 0) {\n                iVar4 = (*_sym.imp.KERNEL32.dll_lstrlenA)();\n                arg2_00 = iVar5 + iVar4;\n            }\n        }\n        else {\ncode_r0x000140054155:\n            iVar4 = fcn.14006c59c(*pcVar6);\n            if (iVar4 != 0) {\n                iVar5 = iVar5 + 1;\n                pcVar6 = pcVar6 + 1;\n            }\n            pcVar6 = pcVar6 + 1;\ncode_r0x00014005416a:\n            arg2_00 = iVar5 + 1;\n        }\n        cVar1 = *pcVar6;\n    }\n    if ((1U - *(*arg1 + -8) | *(*arg1 + -0xc) - iVar5) < 0) {\n        fcn.1400033e0(arg1, arg2_00);\n    }\n    pcVar6 = *arg1;\n    while( true ) {\n        iVar4 = arg2_00;\n        iVar5 = 0;\n        if (*arg2 == '\\0') break;\n        if (*arg2 == '%') {\n            cVar1 = arg2[1];\n            if ((cVar1 < '1') || ('9' < cVar1)) {\n                if ((cVar1 < 'A') || ('Z' < cVar1)) goto code_r0x000140054229;\n                if (cVar1 < ':') goto code_r0x0001400541c5;\n                iVar5 = cVar1 + -0x38;\n            }\n            else {\ncode_r0x0001400541c5:\n                iVar5 = cVar1 + -0x31;\n            }\n            arg2 = arg2 + 2;\n            if (arg4 <= iVar5) {\n                *pcVar6 = '?';\n                goto code_r0x000140054249;\n            }\n            if (*(arg3 + iVar5 * 8) != 0) {\n                iVar3 = (*_sym.imp.KERNEL32.dll_lstrlenA)();\n                iVar5 = fcn.14006a34c(pcVar6, iVar4 + 1, *(arg3 + iVar5 * 8));\n                if (iVar5 != 0) {\n                    if (iVar5 == 0xc) {\n                        fcn.140020738();\n                        pcVar2 = swi(3);\n                        (*pcVar2)();\n                        return;\n                    }\n                    if ((iVar5 == 0x16) || (iVar5 == 0x22)) {\n                        fcn.140020780();\n                        pcVar2 = swi(3);\n                        (*pcVar2)();\n                        return;\n                    }\n                    if (iVar5 != 0x50) {\n                        fcn.140020780();\n                        pcVar2 = swi(3);\n                        (*pcVar2)();\n                        return;\n                    }\n                }\n                arg2_00 = iVar4 - iVar3;\n                pcVar6 = pcVar6 + iVar3;\n            }\n        }\n        else {\ncode_r0x000140054229:\n            iVar5 = fcn.14006c59c(*arg2);\n            if (iVar5 != 0) {\n                cVar1 = *arg2;\n                arg2 = arg2 + 1;\n                *pcVar6 = cVar1;\n                pcVar6 = pcVar6 + 1;\n                iVar4 = iVar4 + -1;\n            }\n            cVar1 = *arg2;\n            arg2 = arg2 + 1;\n            *pcVar6 = cVar1;\ncode_r0x000140054249:\n            pcVar6 = pcVar6 + 1;\n            arg2_00 = iVar4 - 1;\n        }\n    }\n    arg1_00 = *arg1;\n    iVar4 = pcVar6 - arg1_00;\n    if (iVar4 == -1) {\n        if (arg1_00 != NULL) {\n            iVar4 = fcn.14006b544(arg1_00, *(arg1_00 + -0xc));\n            goto code_r0x000140054285;\n        }\n    }\n    else {\ncode_r0x000140054285:\n        iVar5 = iVar4;\n        if (iVar4 < 0) goto code_r0x0001400542be;\n    }\n    if (iVar5 <= *(*arg1 + -0xc)) {\n        *(*arg1 + -0x10) = iVar5;\n        (*arg1)[iVar5] = '\\0';\n        return;\n    }\ncode_r0x0001400542be:\n    fcn.1400031e0(0x80070057);\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 1414
    },
    "14005d38": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid fcn.14005d384(int64_t arg1, ulong arg2)\n\n{\n    ulong uVar1;\n    ulong uVar2;\n    int64_t arg1_00;\n    int32_t iStack48;\n    int32_t iStack44;\n    int32_t iStack40;\n    int32_t iStack36;\n    code *pcStack32;\n    ulong uStack24;\n    \n    if (arg2 != -1) {\n        uVar1 = fcn.140043108();\n        (*_sym.imp.USER32.dll_GetClientRect)(*(arg1 + 0x40), &iStack48);\n        uStack24 = 0;\n        pcStack32 = vtable.CRgn.0;\n        uVar2 = (*_sym.imp.GDI32.dll_CreateRectRgnIndirect)(&iStack48);\n        fcn.14001c094(&pcStack32, uVar2);\n        uVar2 = (*_sym.imp.USER32.dll_GetDC)(*(arg1 + 0x40));\n        arg1_00 = fcn.14001bcd4(uVar2);\n        fcn.14001b6cc(arg1_00, &pcStack32);\n        (*_sym.imp.USER32.dll_SendMessageA)(*(arg1 + 0x40), 0x198, arg2, &iStack48);\n        iStack36 = iStack44 + 2;\n        iStack44 = iStack44 + -2;\n        uVar1 = fcn.14001c308(arg1_00, uVar1);\n        (*_sym.imp.GDI32.dll_PatBlt)\n                  (*(arg1_00 + 8), iStack48, iStack44, iStack40 - iStack48, iStack36 - iStack44, 0x5a0049);\n        fcn.14001c308(arg1_00, uVar1);\n        (*_sym.imp.USER32.dll_ReleaseDC)(*(arg1 + 0x40), *(arg1_00 + 8));\n        pcStack32 = vtable.CRgn.0;\n        fcn.140019c30(&pcStack32);\n    }\n    return;\n}\n",
        "token_count": 468
    },
    "1400601e": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nulong fcn.1400601e4(int64_t arg1, ulong arg2, ulong *arg3)\n\n{\n    ulong uVar1;\n    \n    if ((*(arg1 + 8) == -1) || (*(arg1 + 8) != arg2)) {\n        *arg3 = 0;\n        uVar1 = 0;\n    }\n    else {\n        *arg3 = *(arg1 + 0x10);\n        (**(**(arg1 + 0x10) + 8))();\n        uVar1 = 1;\n    }\n    return uVar1;\n}\n",
        "token_count": 129
    },
    "140005a4": {
        "rules": [
            "parse credit card information/330c87771d2c420b9aab664e2b442302"
        ],
        "decompiled_code": "\nuint64_t fcn.140005a48(int64_t arg1, uint64_t arg2, ulong noname_2, code *arg4)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    uint64_t uVar3;\n    ulong *in_stack_00000028;\n    uint64_t in_stack_00000030;\n    int64_t *in_stack_00000038;\n    \n    if (arg1 == 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        uVar3 = (*pcVar1)();\n        return uVar3;\n    }\n    if (in_stack_00000038 != NULL) {\n        *in_stack_00000038 = arg1;\n        in_stack_00000038[1] = arg4;\n        return 1;\n    }\n    if (in_stack_00000030 < 0x40) {\n        if (in_stack_00000030 == 0x3f) {\n            if (in_stack_00000028 == NULL) {\n                fcn.140020780();\n                pcVar1 = swi(3);\n                uVar3 = (*pcVar1)();\n                return uVar3;\n            }\n            (*arg4)(arg1, arg2, in_stack_00000028[1], *in_stack_00000028);\n            return 1;\n        }\n        if (in_stack_00000030 == 0x39) {\n            (*arg4)();\n            return 1;\n        }\n        if (in_stack_00000030 == 0x3a) {\n            uVar2 = (*arg4)();\n        }\n        else {\n            if (in_stack_00000030 == 0x3b) {\n                (*arg4)();\n                return 1;\n            }\n            if (in_stack_00000030 == 0x3c) {\n                uVar2 = (*arg4)();\n            }\n            else {\n                if (in_stack_00000030 == 0x3d) {\n                    if (in_stack_00000028 == NULL) {\n                        fcn.140020780();\n                        pcVar1 = swi(3);\n                        uVar3 = (*pcVar1)();\n                        return uVar3;\n                    }\n                    (*arg4)(arg1, in_stack_00000028[1], *in_stack_00000028);\n                    return 1;\n                }\n                if (in_stack_00000030 != 0x3e) {\n                    return 0;\n                }\n                if (in_stack_00000028 == NULL) {\n                    fcn.140020780();\n                    pcVar1 = swi(3);\n                    uVar3 = (*pcVar1)();\n                    return uVar3;\n                }\n                uVar2 = (*arg4)(arg1, in_stack_00000028[1], *in_stack_00000028);\n            }\n        }\n    }\n    else if (in_stack_00000030 == 0x40) {\n        if (in_stack_00000028 == NULL) {\n            fcn.140020780();\n            pcVar1 = swi(3);\n            uVar3 = (*pcVar1)();\n            return uVar3;\n        }\n        uVar2 = (*arg4)(arg1, arg2, in_stack_00000028[1], *in_stack_00000028);\n    }\n    else {\n        if (in_stack_00000030 == 0x41) {\n            if (in_stack_00000028 == NULL) {\n                fcn.140020780();\n                pcVar1 = swi(3);\n                uVar3 = (*pcVar1)();\n                return uVar3;\n            }\n            (*arg4)(arg1, in_stack_00000028);\n        }\n        else {\n            if (in_stack_00000030 != 0x42) {\n                if (in_stack_00000030 == 0x43) {\n                    (*arg4)(arg1, in_stack_00000028);\n                    return 1;\n                }\n                if (in_stack_00000030 != 0x44) {\n                    return 0;\n                }\n                uVar2 = (*arg4)(arg1, in_stack_00000028);\n                goto code_r0x000140005bbb;\n            }\n            if (in_stack_00000028 == NULL) {\n                fcn.140020780();\n                pcVar1 = swi(3);\n                uVar3 = (*pcVar1)();\n                return uVar3;\n            }\n            (*arg4)(arg1, in_stack_00000028, arg2 & 0xffffffff);\n        }\n        uVar2 = *(in_stack_00000028 + 0x2c) == 0;\n        *(in_stack_00000028 + 0x2c) = 0;\n    }\ncode_r0x000140005bbb:\n    return uVar2;\n}\n",
        "token_count": 1056
    },
    "14000faa": {
        "rules": [
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498"
        ],
        "decompiled_code": "\nint64_t fcn.14000faa8(void)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int64_t iVar3;\n    \n    iVar3 = fcn.1400234a0(0x1400de580, 0x140006808);\n    if (iVar3 == 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        iVar3 = (*pcVar1)();\n        return iVar3;\n    }\n    uVar2 = (*_sym.imp.USER32.dll_GetMessageTime)();\n    *(iVar3 + 0xb8) = uVar2;\n    uVar2 = (*_sym.imp.USER32.dll_GetMessagePos)();\n    *(iVar3 + 0xbc) = CONCAT44(uVar2 >> 0x10, uVar2);\n    return iVar3 + 0x98;\n}\n",
        "token_count": 190
    },
    "140029da": {
        "rules": [
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498"
        ],
        "decompiled_code": "\nvoid fcn.140029da4(ulong arg1, ulong noname_1, ulong arg3, ulong arg4)\n\n{\n    code *pcVar1;\n    uint16_t uVar2;\n    uint uVar3;\n    int32_t iVar4;\n    ulong uVar5;\n    int64_t iVar6;\n    ulong uVar7;\n    uint32_t uVar8;\n    uint32_t uVar9;\n    uint *in_stack_00000028;\n    uchar auStack248 [32];\n    int32_t aiStack216 [2];\n    int32_t aiStack208 [4];\n    int32_t iStack192;\n    int32_t aiStack152 [4];\n    uint uStack136;\n    uchar uStack129;\n    uchar auStack124 [36];\n    uint64_t uStack88;\n    \n    uStack88 = *0x1400d96f0 ^ auStack248;\n    uVar5 = (*_sym.imp.USER32.dll_GetDC)(0);\n    fcn.1400698a0(aiStack152, 0, 0x3c);\n    uVar3 = (*_sym.imp.GDI32.dll_GetDeviceCaps)(uVar5, 0x5a);\n    aiStack152[0] = (*_sym.imp.KERNEL32.dll_MulDiv)(noname_1, uVar3, 0x48);\n    aiStack152[0] = -aiStack152[0];\n    uStack136 = 400;\n    uStack129 = 1;\n    iVar4 = fcn.14006bb18(auStack124, 0x20, arg1);\n    if (iVar4 != 0) {\n        if (iVar4 == 0xc) {\n            fcn.140020738();\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        if ((iVar4 == 0x16) || (iVar4 == 0x22)) {\n            fcn.140020780();\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        if (iVar4 != 0x50) {\n            fcn.140020780();\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n    }\n    iVar6 = (*_sym.imp.GDI32.dll_CreateFontIndirectA)(aiStack152);\n    if (iVar6 == 0) {\n        uVar2 = (*_sym.imp.USER32.dll_GetDialogBaseUnits)();\n        uVar9 = uVar2;\n        uVar8 = (*_sym.imp.USER32.dll_GetDialogBaseUnits)();\n        uVar8 = uVar8 >> 0x10;\n    }\n    else {\n        uVar7 = (*_sym.imp.GDI32.dll_SelectObject)(uVar5, iVar6);\n        (*_sym.imp.GDI32.dll_GetTextMetricsA)(uVar5, aiStack208);\n        uVar8 = iStack192 + aiStack208[0];\n        (*_sym.imp.GDI32.dll_GetTextExtentPoint32A)\n                  (uVar5, \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\", 0x34, aiStack216);\n        uVar9 = (aiStack216[0] + 0x1a) / 0x34;\n        (*_sym.imp.GDI32.dll_SelectObject)(uVar5, uVar7);\n        (*_sym.imp.GDI32.dll_DeleteObject)(iVar6);\n    }\n    (*_sym.imp.USER32.dll_ReleaseDC)(0, uVar5);\n    uVar3 = (*_sym.imp.KERNEL32.dll_MulDiv)(arg3, uVar9, 4);\n    *in_stack_00000028 = uVar3;\n    uVar3 = (*_sym.imp.KERNEL32.dll_MulDiv)(arg4, uVar8, 8);\n    in_stack_00000028[1] = uVar3;\n    fcn.140069870(uStack88 ^ auStack248);\n    return;\n}\n",
        "token_count": 864
    },
    "14003771": {
        "rules": [
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498"
        ],
        "decompiled_code": "\nuint64_t fcn.140037714(int64_t hWnd)\n\n{\n    uint64_t uVar1;\n    uint64_t uVar2;\n    \n    uVar1 = (*_sym.imp.USER32.dll_SendMessageA)(*(hWnd + 0x40), 0x400, 0, 0);\n    uVar2 = 1;\n    if (uVar1 >> 0x10 == 0x534b) {\n        uVar2 = uVar1 & 0xffff;\n    }\n    return uVar2;\n}\n",
        "token_count": 118
    },
    "140040ca": {
        "rules": [
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498"
        ],
        "decompiled_code": "\nint64_t fcn.140040ca8(ulong hModule, ulong hResInfo, ulong arg3)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uint8_t extraout_AH;\n    int64_t iVar6;\n    int32_t *arg3_00;\n    uint32_t *arg1;\n    ulong uVar7;\n    ulong uVar8;\n    ulong uVar9;\n    int64_t iVar10;\n    int64_t iVar11;\n    \n    iVar6 = (*_sym.imp.KERNEL32.dll_LoadResource)();\n    if ((iVar6 != 0) && (arg3_00 = (*_sym.imp.KERNEL32.dll_LockResource)(),  arg3_00 != NULL)) {\n        uVar2 = *arg3_00 + 0x40;\n        arg1 = fcn.140069d98(uVar2);\n        if (arg1 != NULL) {\n            iVar3 = fcn.140069a48(arg1, uVar2, arg3_00, uVar2);\n            if (iVar3 != 0) {\n                if (iVar3 == 0xc) {\n                    fcn.140020738();\n                    pcVar1 = swi(3);\n                    iVar6 = (*pcVar1)();\n                    return iVar6;\n                }\n                if ((iVar3 == 0x16) || (iVar3 == 0x22)) {\n                    fcn.140020780();\n                    pcVar1 = swi(3);\n                    iVar6 = (*pcVar1)();\n                    return iVar6;\n                }\n                if (iVar3 != 0x50) {\n                    fcn.140020780();\n                    pcVar1 = swi(3);\n                    iVar6 = (*pcVar1)();\n                    return iVar6;\n                }\n            }\n            uVar2 = *arg1;\n            iVar10 = 0;\n            do {\n                uVar4 = 0;\n                iVar11 = 0;\n                do {\n                    if (*(arg1 + iVar10 * 4 + uVar2) == *(iVar11 * 8 + 0x1400a7628)) {\n                        if (arg3 == 0) {\n                            (*_sym.imp.USER32.dll_GetSysColor)();\n                            uVar4 = (*_sym.imp.USER32.dll_GetSysColor)();\n                            uVar5 = (*_sym.imp.USER32.dll_GetSysColor)();\n                            *(arg1 + iVar10 * 4 + uVar2) =\n                                 (uVar5 & 0xff) << 0x10 | uVar4 >> 0x10 & 0xff | extraout_AH << 8;\n                        }\n                        else if (*(iVar11 * 8 + 0x1400a762c) != 0x12) {\n                            *(arg1 + iVar10 * 4 + uVar2) = 0xffffff;\n                        }\n                        break;\n                    }\n                    uVar4 = uVar4 + 1;\n                    iVar11 = iVar11 + 1;\n                } while (uVar4 < 4);\n                iVar10 = iVar10 + 1;\n                if (0xf < iVar10) {\n                    uVar2 = arg1[2];\n                    uVar4 = arg1[1];\n                    uVar7 = (*_sym.imp.USER32.dll_GetDC)(0);\n                    iVar10 = (*_sym.imp.GDI32.dll_CreateCompatibleBitmap)(uVar7, uVar4, uVar2);\n                    if (iVar10 != 0) {\n                        uVar8 = (*_sym.imp.GDI32.dll_CreateCompatibleDC)(uVar7);\n                        uVar9 = (*_sym.imp.GDI32.dll_SelectObject)();\n                        (*_sym.imp.GDI32.dll_StretchDIBits)\n                                  (uVar8, 0, 0, uVar4, uVar2, 0, 0, uVar4, uVar2, \n                                   arg3_00 + (1 << (*(arg1 + 0xe) & 0x3f)) + 10, arg1, 0, 0xcc0020);\n                        (*_sym.imp.GDI32.dll_SelectObject)(uVar8, uVar9);\n                        (*_sym.imp.GDI32.dll_DeleteDC)(uVar8);\n                    }\n                    (*_sym.imp.USER32.dll_ReleaseDC)(0, uVar7);\n                    fcn.140069e50(arg1);\n                    (*_sym.imp.KERNEL32.dll_FreeResource)(iVar6);\n                    return iVar10;\n                }\n            } while( true );\n        }\n    }\n    return 0;\n}\n",
        "token_count": 1002
    },
    "14004109": {
        "rules": [
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498"
        ],
        "decompiled_code": "\nvoid fcn.140041098(int64_t hWnd, ulong arg2, ulong arg3)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    ushort uStackX16;\n    ushort uStackX20;\n    ushort uStackX24;\n    ushort uStackX28;\n    \n    iVar1 = (*_sym.imp.USER32.dll_IsWindow)(*(hWnd + 0x40));\n    if (iVar1 == 0) {\n        *(hWnd + 300) = arg2;\n        *(hWnd + 0x124) = arg3;\n    }\n    else {\n        uStackX28 = arg3 >> 0x20;\n        uStackX24 = arg3;\n        (*_sym.imp.USER32.dll_SendMessageA)(*(hWnd + 0x40), 0x420, 0, CONCAT22(uStackX28, uStackX24));\n        uStackX20 = arg2 >> 0x20;\n        uStackX16 = arg2;\n        (*_sym.imp.USER32.dll_SendMessageA)(*(hWnd + 0x40), 0x41f, 0, CONCAT22(uStackX20, uStackX16));\n        if (0x5ffff < *0x1400d8a34) {\n            uVar2 = (*_sym.imp.USER32.dll_SendMessageA)(*(hWnd + 0x40), 0x43a, 0, 0);\n            *(hWnd + 0x130) = uVar2 >> 0x10;\n            *(hWnd + 300) = uVar2 & 0xffff;\n        }\n        (*_sym.imp.USER32.dll_InvalidateRect)(*(hWnd + 0x40), 0, 1);\n    }\n    return;\n}\n",
        "token_count": 387
    },
    "1400414a": {
        "rules": [
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498",
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498",
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498"
        ],
        "decompiled_code": "\nvoid fcn.1400414a4(int64_t *arg1, ulong arg2, ulong arg3)\n\n{\n    uint8_t uVar1;\n    uchar auStack104 [32];\n    uchar auStack72 [8];\n    uint8_t uStack64;\n    char cStack63;\n    uint64_t uStack40;\n    \n    uStack40 = *0x1400d96f0 ^ auStack104;\n    (**(*arg1 + 0x230))(arg1, 0x417, arg2, auStack72);\n    uVar1 = arg3 >> 0x10;\n    if ((cStack63 != arg3) || ((uStack64 ^ 4) != uVar1)) {\n        uStack64 = uVar1;\n        cStack63 = arg3;\n        fcn.140041294(arg1, arg2 & 0xffffffff, auStack72);\n        *(arg1 + 0x24) = 1;\n    }\n    fcn.140069870(uStack40 ^ auStack104);\n    return;\n}\n",
        "token_count": 229
    },
    "14006503": {
        "rules": [
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498"
        ],
        "decompiled_code": "\nulong fcn.14006503c(int64_t *arg1, ulong arg2, uint64_t arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    ulong uVar2;\n    int64_t *in_stack_00000028;\n    \n    iVar1 = arg2;\n    if (iVar1 == 0x2b) {\n        (**(*arg1 + 0x280))(arg1, arg4);\n    }\n    else if (iVar1 == 0x2c) {\n        (**(*arg1 + 0x288))(arg1, arg4);\n    }\n    else if (iVar1 == 0x2d) {\n        (**(*arg1 + 0x298))(arg1, arg4);\n    }\n    else {\n        if (iVar1 == 0x2e) {\n            iVar1 = (**(*arg1 + 0x2a0))(arg1, arg3 & 0xffff, arg3 >> 0x10 & 0xffff);\n        }\n        else if (iVar1 == 0x2f) {\n            iVar1 = (**(*arg1 + 0x2a8))(arg1, arg3 & 0xffff, arg3 >> 0x10 & 0xffff);\n        }\n        else {\n            if (iVar1 != 0x39) {\n                uVar2 = fcn.140014428(arg1, arg2, arg3, arg4);\n                return uVar2;\n            }\n            iVar1 = (**(*arg1 + 0x290))(arg1, arg4);\n        }\n        *in_stack_00000028 = iVar1;\n    }\n    return 1;\n}\n",
        "token_count": 360
    },
    "140009cb": {
        "rules": [
            "check for kernel debugger via shared user data structure/3e5f0b53f7994283abe93631eebb775f"
        ],
        "decompiled_code": "\nuint64_t fcn.140009cb0(uint32_t *arg1)\n\n{\n    int16_t iVar1;\n    int16_t *piVar2;\n    int16_t *piVar3;\n    uint32_t uVar4;\n    bool bVar5;\n    \n    uVar4 = *arg1;\n    bVar5 = *(arg1 + 2) == -1;\n    if (bVar5) {\n        uVar4 = arg1[3];\n        piVar3 = arg1 + 0x1a;\n    }\n    else {\n        piVar3 = arg1 + 0x12;\n    }\n    if (*piVar3 == -1) {\n        piVar3 = piVar3 + 2;\n    }\n    else {\n        do {\n            iVar1 = *piVar3;\n            piVar3 = piVar3 + 1;\n        } while (iVar1 != 0);\n    }\n    if (*piVar3 == -1) {\n        piVar3 = piVar3 + 2;\n    }\n    else {\n        do {\n            iVar1 = *piVar3;\n            piVar3 = piVar3 + 1;\n        } while (iVar1 != 0);\n    }\n    do {\n        piVar2 = piVar3;\n        piVar3 = piVar2 + 1;\n    } while (*piVar2 != 0);\n    if ((uVar4 & 0x40) != 0) {\n        piVar3 = piVar2 + (-bVar5 & 2) + 2;\n        do {\n            iVar1 = *piVar3;\n            piVar3 = piVar3 + 1;\n        } while (iVar1 != 0);\n    }\n    return piVar3 + 3U & 0xfffffffffffffffc;\n}\n",
        "token_count": 390
    },
    "14006b9a": {
        "rules": [
            "check for kernel debugger via shared user data structure/3e5f0b53f7994283abe93631eebb775f",
            "check for kernel debugger via shared user data structure/3e5f0b53f7994283abe93631eebb775f"
        ],
        "decompiled_code": "\nuint64_t fcn.14006b9a4(uint8_t *arg1, uint8_t *arg2)\n\n{\n    uint8_t uVar1;\n    uint8_t uVar2;\n    uint *puVar3;\n    uint64_t uVar4;\n    uint16_t uVar5;\n    uint64_t uVar6;\n    uint8_t *puVar7;\n    uint8_t *puVar8;\n    uchar auStack40 [8];\n    int64_t iStack32;\n    int64_t iStack24;\n    char cStack16;\n    \n    fcn.14006b7c8(auStack40, 0);\n    if ((arg1 == NULL) || (arg2 == NULL)) {\n        puVar3 = fcn.14006abb0();\n        *puVar3 = 0x16;\n        fcn.140070df0(0, 0, 0, 0);\n        if (cStack16 != '\\0') {\n            *(iStack24 + 200) = *(iStack24 + 200) & 0xfffffffd;\n        }\n        uVar4 = 0x7fffffff;\n    }\n    else if (*(iStack32 + 8) == 0) {\n        uVar4 = fcn.140069720(arg1, arg2);\ncode_r0x00014006b97e:\n        if (cStack16 != '\\0') {\n            *(iStack24 + 200) = *(iStack24 + 200) & 0xfffffffd;\n        }\n    }\n    else {\n        do {\n            uVar1 = *arg1;\n            puVar8 = arg1 + 1;\n            uVar4 = uVar1;\n            if (((*(uVar1 + 0x1d + iStack32) & 4) != 0) && (uVar4 = 0,  *puVar8 != 0)) {\n                uVar2 = *puVar8;\n                puVar8 = arg1 + 2;\n                uVar4 = CONCAT11(uVar1, uVar2);\n            }\n            uVar1 = *arg2;\n            puVar7 = arg2 + 1;\n            uVar6 = uVar1;\n            if (((*(uVar1 + 0x1d + iStack32) & 4) != 0) && (uVar6 = 0,  *puVar7 != 0)) {\n                uVar2 = *puVar7;\n                puVar7 = arg2 + 2;\n                uVar6 = CONCAT11(uVar1, uVar2);\n            }\n            uVar5 = uVar4;\n            if (uVar6 != uVar5) {\n                uVar4 = (-(uVar6 < uVar5) & 2) - 1;\n                goto code_r0x00014006b97e;\n            }\n            arg2 = puVar7;\n            arg1 = puVar8;\n        } while (uVar5 != 0);\n        if (cStack16 != '\\0') {\n            *(iStack24 + 200) = *(iStack24 + 200) & 0xfffffffd;\n        }\n        uVar4 = 0;\n    }\n    return uVar4;\n}\n",
        "token_count": 705
    },
    "140029c0": {
        "rules": [
            "check for kernel debugger via shared user data structure/3e5f0b53f7994283abe93631eebb775f"
        ],
        "decompiled_code": "\nuint64_t fcn.140029c04(uint32_t *arg1)\n\n{\n    uint16_t uVar1;\n    uint32_t uVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    uint16_t *puVar5;\n    int16_t iVar6;\n    bool bVar7;\n    \n    bVar7 = *(arg1 + 2) == -1;\n    iVar3 = fcn.140029bac(arg1);\n    if (*(arg1 + 2) == -1) {\n        uVar2 = arg1[3];\n    }\n    else {\n        uVar2 = *arg1;\n    }\n    if ((uVar2 & 0x40) != 0) {\n        iVar3 = iVar3 + ((-bVar7 & 2) + 1) * 2;\n        iVar4 = fcn.14006bd0c(iVar3);\n        iVar3 = iVar3 + 2 + iVar4 * 2;\n    }\n    if (bVar7) {\n        iVar6 = *(arg1 + 4);\n    }\n    else {\n        iVar6 = *(arg1 + 2);\n    }\n    if (iVar6 != 0) {\n        do {\n            puVar5 = (iVar3 + 3U & 0xfffffffffffffffc) + (-bVar7 & 6) + 0x12;\n            if (*puVar5 == 0xffff) {\n                puVar5 = puVar5 + 2;\n            }\n            else {\n                do {\n                    uVar1 = *puVar5;\n                    puVar5 = puVar5 + 1;\n                } while (uVar1 != 0);\n            }\n            if (*puVar5 == 0xffff) {\n                puVar5 = puVar5 + 2;\n            }\n            else {\n                do {\n                    uVar1 = *puVar5;\n                    puVar5 = puVar5 + 1;\n                } while (uVar1 != 0);\n            }\n            uVar1 = *puVar5;\n            if ((uVar1 != 0) && (!bVar7)) {\n                uVar1 = uVar1 - 2;\n            }\n            iVar6 = iVar6 + -1;\n            iVar3 = puVar5 + uVar1 + 2;\n        } while (iVar6 != 0);\n    }\n    return iVar3 - arg1 & 0xffffffff;\n}\n",
        "token_count": 525
    },
    "14002ccc": {
        "rules": [
            "check for kernel debugger via shared user data structure/3e5f0b53f7994283abe93631eebb775f"
        ],
        "decompiled_code": "\nuint fcn.14002ccc8(int64_t arg1, int64_t arg2, int64_t arg3, ulong arg4)\n\n{\n    uint uVar1;\n    ulong *puVar2;\n    int64_t *in_stack_00000028;\n    \n    if (((arg1 == 0) || (arg3 == 0)) || (in_stack_00000028 == NULL)) {\n        uVar1 = 0x80004005;\n    }\n    else {\n        uVar1 = (**(*in_stack_00000028 + 0x20))\n                          (in_stack_00000028, (-(*(arg1 + 0x40) != 0) & 2U) + 2, arg2, arg1, arg4, arg3, 0);\n        if (arg2 != 0) {\n            puVar2 = arg1 + 0x28;\n            do {\n                fcn.1400036d8(*puVar2);\n                puVar2 = puVar2 + 0xb;\n                arg2 = arg2 + -1;\n            } while (arg2 != 0);\n        }\n    }\n    return uVar1;\n}\n",
        "token_count": 254
    },
    "14006e24": {
        "rules": [
            "check for kernel debugger via shared user data structure/3e5f0b53f7994283abe93631eebb775f"
        ],
        "decompiled_code": "\nuint64_t fcn.14006e24c(uint8_t *arg1, uint8_t *arg2, int64_t arg3)\n\n{\n    uint8_t uVar1;\n    uint8_t uVar2;\n    uint64_t uVar3;\n    uint *puVar4;\n    int64_t iVar5;\n    uint16_t uVar6;\n    uint8_t *puVar7;\n    uint8_t *puVar8;\n    uchar auStack40 [8];\n    int64_t iStack32;\n    int64_t iStack24;\n    char cStack16;\n    \n    if (arg3 == 0) {\n        return 0;\n    }\n    fcn.14006b7c8(auStack40, 0);\n    if (*(iStack32 + 8) == 0) {\n        uVar3 = fcn.14007b920(arg1, arg2, arg3);\ncode_r0x00014006e222:\n        if (cStack16 != '\\0') {\n            *(iStack24 + 200) = *(iStack24 + 200) & 0xfffffffd;\n            return uVar3;\n        }\n        return uVar3;\n    }\n    if ((arg1 == NULL) || (arg2 == NULL)) {\n        puVar4 = fcn.14006abb0();\n        *puVar4 = 0x16;\n        fcn.140070df0(0, 0, 0, 0);\n        if (cStack16 != '\\0') {\n            *(iStack24 + 200) = *(iStack24 + 200) & 0xfffffffd;\n        }\n        return 0x7fffffff;\n    }\n    do {\n        uVar3 = *arg1;\n        iVar5 = arg3 + -1;\n        puVar8 = arg1 + 1;\n        uVar6 = 0;\n        if ((*(uVar3 + 0x1d + iStack32) & 4) == 0) {\ncode_r0x00014006e1c0:\n            uVar6 = uVar3;\n            uVar1 = *arg2;\n            puVar7 = arg2 + 1;\n            uVar3 = uVar1;\n            if (((*(uVar1 + 0x1d + iStack32) & 4) != 0) && (uVar3 = 0,  iVar5 != 0)) {\n                iVar5 = arg3 + -2;\n                if (*puVar7 == 0) {\n                    uVar3 = 0;\n                }\n                else {\n                    uVar2 = *puVar7;\n                    puVar7 = arg2 + 2;\n                    uVar3 = CONCAT11(uVar1, uVar2);\n                }\n            }\n        }\n        else {\n            if (iVar5 != 0) {\n                if (*puVar8 == 0) {\n                    uVar3 = 0;\n                }\n                else {\n                    uVar3 = CONCAT11(*arg1, *puVar8);\n                    puVar8 = arg1 + 2;\n                }\n                goto code_r0x00014006e1c0;\n            }\n            if ((*(*arg2 + 0x1d + iStack32) & 4) != 0) {\ncode_r0x00014006e1ff:\n                if (cStack16 == '\\0') {\n                    return 0;\n                }\n                *(iStack24 + 200) = *(iStack24 + 200) & 0xfffffffd;\n                return 0;\n            }\n            uVar3 = *arg2;\n            puVar7 = arg2;\n        }\n        if (uVar3 != uVar6) {\n            uVar3 = (-(uVar3 < uVar6) & 2) - 1;\n            goto code_r0x00014006e222;\n        }\n        if ((uVar6 == 0) || (arg3 = iVar5,  arg2 = puVar7,  arg1 = puVar8,  iVar5 == 0)) goto code_r0x00014006e1ff;\n    } while( true );\n}\n",
        "token_count": 900
    },
    "140063dd": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/73780005e39049dabd818a965d665a12",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/bde1572c33fb4ad4a176b04786e84c23"
        ],
        "decompiled_code": "\nvoid fcn.140063ddc(int64_t arg1, int64_t arg2)\n\n{\n    ulong uStackX8;\n    ulong uStack56;\n    int32_t iStack48;\n    int64_t iStack32;\n    uchar auStack20 [12];\n    \n    fcn.14006b210(&uStack56, arg2, 0x30);\n    uStack56 = (*_sym.imp.USER32.dll_SendMessageA)(*(arg1 + 0x40), 0x410, 0, auStack20);\n    uStackX8 = *(arg2 + 0x24);\n    if (iStack48 - 0x200U < 10) {\n        (*_sym.imp.USER32.dll_ScreenToClient)(uStack56, &uStackX8);\n    }\n    iStack32 = uStackX8 & 0xffff | uStackX8._4_2_ << 0x10;\n    (*_sym.imp.USER32.dll_SendMessageA)(*(arg1 + 0x40), 0x407, 0, &uStack56);\n    return;\n}\n",
        "token_count": 242
    },
    "14000ade": {
        "rules": [
            "decompress data using LZO/d8e7b8e532bc4f7fa2e8bf7bf0025ad1"
        ],
        "decompiled_code": "\nvoid fcn.14000ade8(ulong noname_0, int64_t arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t *piVar1;\n    code *pcVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    int64_t iVar5;\n    int64_t *piVar6;\n    int64_t iVar7;\n    uint64_t arg2_00;\n    uint *puVar8;\n    uint32_t *puVar9;\n    int64_t iVar10;\n    uchar *puVar11;\n    uint *puVar12;\n    uint *in_stack_00000028;\n    int16_t in_stack_00000030;\n    uint32_t *in_stack_00000038;\n    uint32_t in_stack_00000040;\n    ulong *in_stack_00000048;\n    ulong var_98h;\n    uchar auStack392 [32];\n    uint uStack360;\n    int32_t *piStack352;\n    uint32_t uStack344;\n    uchar *puStack336;\n    uint32_t uStack328;\n    int64_t iStack320;\n    int64_t *piStack312;\n    ushort uStack296;\n    ushort uStack294;\n    int64_t iStack288;\n    uint64_t uStack280;\n    uint32_t uStack272;\n    uint uStack268;\n    uint32_t uStack264;\n    int64_t iStack256;\n    uint uStack248;\n    uint uStack244;\n    ushort uStack240;\n    ushort uStack238;\n    ushort uStack236;\n    int16_t iStack234;\n    ushort uStack232;\n    ulong *puStack224;\n    int32_t iStack216;\n    int32_t iStack212;\n    int32_t iStack208;\n    int32_t iStack204;\n    ulong uStack200;\n    int64_t iStack192;\n    ulong uStack184;\n    int64_t iStack176;\n    uchar auStack168 [80];\n    uchar auStack88 [16];\n    uint64_t uStack72;\n    \n    uStack184 = 0xfffffffffffffffe;\n    uStack72 = *0x1400d96f0 ^ auStack392;\n    uStack200 = arg3;\n    iStack192 = arg2;\n    puStack224 = in_stack_00000048;\n    puVar12 = in_stack_00000028 + 0x12;\n    iVar5 = 0;\n    puVar8 = in_stack_00000028;\n    if (arg4 != 0) {\n        uStack248 = in_stack_00000028[2];\n        uStack244 = in_stack_00000028[1];\n        uStack240 = *(in_stack_00000028 + 3);\n        uStack238 = *(in_stack_00000028 + 0xe);\n        uStack236 = *(in_stack_00000028 + 4);\n        iStack234 = *puVar12;\n        uStack232 = *(in_stack_00000028 + 5);\n        puVar8 = &uStack248;\n        puVar12 = in_stack_00000028 + 6;\n    }\n    iStack212 = *(puVar8 + 10);\n    iStack204 = *(puVar8 + 0xe) + iStack212;\n    iStack216 = *(puVar8 + 2);\n    iStack208 = *(puVar8 + 3) + iStack216;\n    (*_sym.imp.USER32.dll_MapDialogRect)(*(arg2 + 0x40), &iStack216);\n    if (3 < in_stack_00000040) {\n        uVar3 = *in_stack_00000038;\n        in_stack_00000038 = in_stack_00000038 + 1;\n        in_stack_00000040 = in_stack_00000040 - 4;\n        if (uVar3 != 0) {\n            iVar5 = (*_sym.imp.OLEAUT32.dll_SysReAllocStringLen)(in_stack_00000038, uVar3);\n            in_stack_00000038 = in_stack_00000038 + uVar3 * 2;\n            in_stack_00000040 = in_stack_00000040 + uVar3 * -2;\n        }\n    }\n    uStack280 = 0;\n    piVar6 = fcn.140017fc0();\n    if (piVar6 != NULL) {\n        iVar7 = (**(*piVar6 + 0x18))();\n        iVar7 = iVar7 + 0x18;\n        uStack296 = 0;\n        uStack272 = 0;\n        uStack268 = 0;\n        iStack256 = iVar7;\n        if ((in_stack_00000030 == 0x37a) || (in_stack_00000030 == 0x37b)) {\n            uStack264 = *in_stack_00000038;\n            in_stack_00000038 = in_stack_00000038 + 3;\n            iVar4 = uStack264 - 0xc;\n            arg2_00 = uStack280;\n            while (iVar4 != 0) {\n                uStack280 = uStack280 & 0xffffffff00000000 | *in_stack_00000038;\n                uStack294 = *(in_stack_00000038 + 1);\n                puVar9 = in_stack_00000038 + 6;\n                if (*in_stack_00000038 == 0x80010001) {\n                    uStack272 = *puVar9;\n                    uStack268 = *(in_stack_00000038 + 10);\n                    iVar10 = in_stack_00000038 + 0x16;\n                    if (iVar10 == 0) {\n                        uVar3 = 0;\n                    }\n                    else {\n                        uVar3 = fcn.1400699a0(iVar10);\n                    }\n                    fcn.140005294(&iStack256, iVar10, uVar3);\n                    iVar7 = iStack256;\n                    in_stack_00000038 = iVar10 + (*(iStack256 + -0x10) + 1);\n                    iVar4 = iVar4 + (-0x17 - *(iStack256 + -0x10));\n                    uStack296 = uStack294;\n                }\n                else {\n                    iStack176 = fcn.140003694(0x28);\n                    in_stack_00000038 = puVar9;\n                    if (iStack176 == 0) {\n                        arg2_00 = 0;\n                        iVar4 = iVar4 + -6;\n                    }\n                    else {\n                        arg2_00 = fcn.14002e680(iStack176, arg2_00, uStack280 & 0xffffffff);\n                        iVar4 = iVar4 + -6;\n                    }\n                }\n            }\n            in_stack_00000040 = in_stack_00000040 - uStack264;\n            in_stack_00000030 = in_stack_00000030 + -4;\n            uStack280 = arg2_00;\n        }\n        if (*puVar12 == 0x7b) {\n            iVar4 = (*_sym.imp.ole32.dll_CLSIDFromString)(puVar12, auStack88);\n        }\n        else {\n            iVar4 = (*_sym.imp.ole32.dll_CLSIDFromProgID)(puVar12, auStack88);\n        }\n        fcn.140039d78(auStack168, in_stack_00000038, in_stack_00000040, 0);\n        iVar10 = iStack192;\n        puVar11 = auStack168;\n        if (in_stack_00000030 == 0x378) {\n            puVar11 = NULL;\n        }\n        iStack288 = 0;\n        if ((-1 < iVar4) && (iVar4 = fcn.14002b29c(iStack192, 1),  iVar4 != 0)) {\n            piStack312 = &iStack288;\n            uStack328 = in_stack_00000030 == 0x377;\n            uStack344 = *(puVar8 + 4);\n            piStack352 = &iStack216;\n            uStack360 = *puVar8;\n            puStack336 = puVar11;\n            iStack320 = iVar5;\n            iVar4 = fcn.14002bbb4(*(iVar10 + 0x98), 0, auStack88, 0);\n            if (iVar4 != 0) {\n                fcn.14002d8cc(iStack288, 1);\n                uStack344 = 0x13;\n                piStack352 = piStack352 & 0xffffffff00000000;\n                uStack360 = 0;\n                (*_sym.imp.USER32.dll_SetWindowPos)(*(iStack288 + 0x48), uStack200, 0, 0);\n                *(iStack288 + 0xe0) = uStack280;\n                fcn.140007bbc(iStack288 + 0xf8, &iStack256);\n                *(iStack288 + 0xe8) = uStack296;\n                *(iStack288 + 0xf0) = uStack272;\n                *(iStack288 + 0xf4) = uStack268;\n            }\n        }\n        if (iVar5 != 0) {\n            (*_sym.imp.OLEAUT32.dll_SysStringLen)(iVar5);\n        }\n        if (iStack288 == 0) {\n            *puStack224 = 0;\n            fcn.14003a274(auStack168);\n            LOCK();\n            piVar1 = iVar7 + -8;\n            iVar4 = *piVar1;\n            *piVar1 = *piVar1 + -1;\n            if (iVar4 + -1 < 1) {\n                (**(**(iVar7 + -0x18) + 8))();\n            }\n        }\n        else {\n            *puStack224 = *(iStack288 + 0x48);\n            fcn.14003a274(auStack168);\n            LOCK();\n            piVar1 = iVar7 + -8;\n            iVar4 = *piVar1;\n            *piVar1 = *piVar1 + -1;\n            if (iVar4 + -1 < 1) {\n                (**(**(iVar7 + -0x18) + 8))();\n            }\n        }\n        fcn.140069870(uStack72 ^ auStack392);\n        return;\n    }\n    fcn.1400031e0(0x80004005);\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 2282
    },
    "140019cc": {
        "rules": [
            "decompress data using LZO/d8e7b8e532bc4f7fa2e8bf7bf0025ad1"
        ],
        "decompiled_code": "\nvoid fcn.140019cc4(code **arg1)\n\n{\n    uint32_t uVar1;\n    ulong arg2;\n    uchar auStack424 [32];\n    code **ppcStack392;\n    ulong uStack384;\n    int32_t aiStack376 [40];\n    uchar auStack216 [192];\n    uint64_t uStack24;\n    \n    uStack384 = 0xfffffffffffffffe;\n    uStack24 = *0x1400d96f0 ^ auStack424;\n    arg1[1] = NULL;\n    *arg1 = vtable.CChevronOwnerDrawMenu.0;\n    arg1[3] = NULL;\n    arg1[2] = vtable.CFont.0;\n    ppcStack392 = arg1;\n    uVar1 = fcn.140042030();\n    aiStack376[0] = (-(uVar1 < 0x60001) & 0xfffffffc) + 0x158;\n    (*_sym.imp.USER32.dll_SystemParametersInfoA)(0x29, aiStack376[0], aiStack376);\n    arg2 = (*_sym.imp.GDI32.dll_CreateFontIndirectA)(auStack216);\n    fcn.14001c094(arg1 + 2, arg2);\n    fcn.140069870(uStack24 ^ auStack424);\n    return;\n}\n",
        "token_count": 293
    },
    "14000fc4": {
        "rules": [
            "PEB access/cd8d96519f6244b6acf2796407e948b9",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000fc4c(ulong arg1)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.140017b90();\n    if (*(iVar1 + 0x28) != 0) {\n        fcn.14003a45c(*(iVar1 + 0x28) + 0x30, arg1);\n    }\n    return;\n}\n",
        "token_count": 85
    },
    "14000fcd": {
        "rules": [
            "PEB access/cd8d96519f6244b6acf2796407e948b9",
            "PEB access/cd8d96519f6244b6acf2796407e948b9"
        ],
        "decompiled_code": "\nint64_t fcn.14000fcd8(int64_t arg1)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    \n    iVar1 = *(arg1 + 0x40);\n    if (iVar1 != 0) {\n        iVar2 = fcn.140017b90();\n        if (*(iVar2 + 0x28) != 0) {\n            fcn.14003a4d0(*(iVar2 + 0x28) + 0x30, *(arg1 + 0x40));\n        }\n        *(arg1 + 0x40) = 0;\n    }\n    *(arg1 + 0xa0) = 0;\n    return iVar1;\n}\n",
        "token_count": 157
    },
    "14000ff4": {
        "rules": [
            "PEB access/cd8d96519f6244b6acf2796407e948b9"
        ],
        "decompiled_code": "\nuint64_t fcn.14000ff48(int64_t arg1)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int64_t iVar3;\n    uint64_t uVar4;\n    \n    uVar4 = 0;\n    if (*(arg1 + 0x40) == 0) {\n        if (*(arg1 + 0xa0) == 0) {\n            return 0;\n        }\n        if (*(arg1 + 0x40) == 0) goto code_r0x00014000ff91;\n    }\n    iVar3 = fcn.140017b90();\n    if (*(iVar3 + 0x28) == 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        uVar4 = (*pcVar1)();\n        return uVar4;\n    }\n    fcn.14003a45c(*(iVar3 + 0x28) + 0x30, *(arg1 + 0x40));\ncode_r0x00014000ff91:\n    if ((*(arg1 + 0x40) != 0) || (*(arg1 + 0xa0) != 0)) {\n        if (*(arg1 + 0xa0) == 0) {\n            uVar2 = (*_sym.imp.USER32.dll_DestroyWindow)();\n        }\n        else {\n            uVar2 = (**(**(arg1 + 0xa0) + 0xb0))();\n        }\n        uVar4 = uVar2;\n    }\n    return uVar4;\n}\n",
        "token_count": 341
    },
    "14001978": {
        "rules": [
            "PEB access/cd8d96519f6244b6acf2796407e948b9",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140019784(ulong arg1)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.140017b90();\n    if (*(iVar1 + 0x30) != 0) {\n        fcn.14003a45c(*(iVar1 + 0x30) + 0x30, arg1);\n    }\n    return;\n}\n",
        "token_count": 83
    },
    "1400197e": {
        "rules": [
            "PEB access/cd8d96519f6244b6acf2796407e948b9"
        ],
        "decompiled_code": "\nint64_t fcn.1400197ec(int64_t arg1)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    \n    iVar1 = *(arg1 + 8);\n    if (iVar1 != 0) {\n        iVar2 = fcn.140017b90();\n        if (*(iVar2 + 0x30) != 0) {\n            fcn.14003a4d0(*(iVar2 + 0x30) + 0x30, *(arg1 + 8));\n        }\n    }\n    *(arg1 + 8) = 0;\n    return iVar1;\n}\n",
        "token_count": 136
    },
    "14001bd4": {
        "rules": [
            "PEB access/cd8d96519f6244b6acf2796407e948b9"
        ],
        "decompiled_code": "\nint64_t fcn.14001bd44(int64_t *arg1, ulong noname_1, ulong ppsaOut)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    \n    iVar1 = arg1[1];\n    if (iVar1 != 0) {\n        iVar2 = fcn.140017b90();\n        if (*(iVar2 + 0x38) != 0) {\n            fcn.14003a4d0(*(iVar2 + 0x38) + 0x30, arg1[1]);\n        }\n    }\n    (**(*arg1 + 0x28))(arg1);\n    arg1[1] = 0;\n    return iVar1;\n}\n",
        "token_count": 157
    },
    "14001c0d": {
        "rules": [
            "PEB access/cd8d96519f6244b6acf2796407e948b9"
        ],
        "decompiled_code": "\nint64_t fcn.14001c0d0(int64_t arg1)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    \n    iVar1 = *(arg1 + 8);\n    if (iVar1 != 0) {\n        iVar2 = fcn.140017b90();\n        if (*(iVar2 + 0x40) != 0) {\n            fcn.14003a4d0(*(iVar2 + 0x40) + 0x30, *(arg1 + 8));\n        }\n    }\n    *(arg1 + 8) = 0;\n    return iVar1;\n}\n",
        "token_count": 138
    },
    "14002e45": {
        "rules": [
            "PEB access/cd8d96519f6244b6acf2796407e948b9"
        ],
        "decompiled_code": "\ncode ** fcn.14002e458(code **arg1, code *arg2)\n\n{\n    arg1[1] = arg2;\n    *arg1 = vtable.CDataSourceControl.0;\n    arg1[2] = NULL;\n    arg1[3] = NULL;\n    arg1[4] = NULL;\n    arg1[5] = NULL;\n    fcn.14003aea8(arg1 + 6, 10);\n    arg1[0xd] = NULL;\n    arg1[0xe] = NULL;\n    arg1[0xf] = NULL;\n    arg1[0x10] = NULL;\n    *(arg1 + 0x11) = 0;\n    arg1[0x12] = NULL;\n    arg1[0x13] = NULL;\n    arg1[0x14] = NULL;\n    arg1[0x15] = NULL;\n    *(arg1 + 0x16) = 0;\n    return arg1;\n}\n",
        "token_count": 216
    },
    "14005c52": {
        "rules": [
            "PEB access/cd8d96519f6244b6acf2796407e948b9"
        ],
        "decompiled_code": "\nint64_t fcn.14005c528(int64_t arg1)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    \n    iVar1 = *(arg1 + 8);\n    if (iVar1 != 0) {\n        iVar2 = fcn.140017b90();\n        if (*(iVar2 + 0x48) != 0) {\n            fcn.14003a4d0(*(iVar2 + 0x48) + 0x30, *(arg1 + 8));\n        }\n    }\n    *(arg1 + 8) = 0;\n    return iVar1;\n}\n",
        "token_count": 136
    },
    "14005c5c": {
        "rules": [
            "PEB access/cd8d96519f6244b6acf2796407e948b9",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14005c5c8(ulong arg1)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.140017b90();\n    if (*(iVar1 + 0x48) != 0) {\n        fcn.14003a45c(*(iVar1 + 0x48) + 0x30, arg1);\n    }\n    return;\n}\n",
        "token_count": 86
    },
    "140017f4": {
        "rules": [
            "hash data using djb2/6ad21e310d674441ba35d7276afbe57d",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint64_t fcn.140017f4c(uint16_t *arg1, ulong arg2)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint64_t uVar3;\n    \n    iVar2 = fcn.14003ad10(arg1);\n    uVar3 = 0;\n    if (iVar2 != 0) {\n        for (; *arg1 != 0; arg1 = arg1 + 1) {\n            uVar3 = uVar3 * 0x21 + *arg1;\n        }\n        return uVar3;\n    }\n    fcn.140020780();\n    pcVar1 = swi(3);\n    uVar3 = (*pcVar1)();\n    return uVar3;\n}\n",
        "token_count": 162
    },
    "140057dd": {
        "rules": [
            "hash data using djb2/6ad21e310d674441ba35d7276afbe57d",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong * fcn.140057dd0(int64_t arg1, char *arg2, uint *arg3, uint32_t *arg4)\n\n{\n    uint64_t uVar1;\n    code *pcVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    ulong *puVar5;\n    char cVar6;\n    char *pcVar7;\n    \n    uVar3 = 0;\n    if (arg2 == NULL) {\n        fcn.140020780();\n        pcVar2 = swi(3);\n        puVar5 = (*pcVar2)();\n        return puVar5;\n    }\n    cVar6 = *arg2;\n    pcVar7 = arg2;\n    while (cVar6 != '\\0') {\n        uVar3 = uVar3 * 0x21 + cVar6;\n        pcVar7 = pcVar7 + 1;\n        cVar6 = *pcVar7;\n    }\n    *arg4 = uVar3;\n    uVar1 = uVar3 % *(arg1 + 0x10);\n    *arg3 = uVar1;\n    if (*(arg1 + 8) != 0) {\n        for (puVar5 = *(*(arg1 + 8) + uVar1 * 8); puVar5 != NULL; puVar5 = *puVar5) {\n            if ((*(puVar5 + 1) == *arg4) && (iVar4 = fcn.14006b9a4(puVar5[2], arg2),  iVar4 == 0)) {\n                return puVar5;\n            }\n        }\n    }\n    return NULL;\n}\n",
        "token_count": 362
    },
    "14001f1e": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nvoid fcn.14001f1e0(ulong noname_0, int32_t *arg2, int32_t *arg3)\n\n{\n    int32_t *piVar1;\n    int64_t *piVar2;\n    code *pcVar3;\n    uint64_t arg2_00;\n    int32_t iVar4;\n    int64_t iVar5;\n    int64_t iVar6;\n    ulong uVar7;\n    int64_t iVar8;\n    uchar auStack216 [32];\n    ulong uStack184;\n    uint uStack168;\n    uint uStack164;\n    uint64_t uStack160;\n    ulong uStack152;\n    uchar auStack136 [16];\n    ulong uStack120;\n    uint64_t uStack56;\n    \n    uStack152 = 0xfffffffffffffffe;\n    uStack56 = *0x1400d96f0 ^ auStack216;\n    iVar8 = 0;\n    if (*arg2 == 0) {\n        iVar4 = *arg3;\n        if (iVar4 != 1) {\n            if (iVar4 == 2) {\n                *arg2 = 2;\n                if (*(arg3 + 2) == 0) {\n                    fcn.140020780();\n                    pcVar3 = swi(3);\n                    (*pcVar3)();\n                    return;\n                }\n                iVar4 = (*_sym.imp.KERNEL32.dll_lstrlenW)(*(arg3 + 2), noname_0);\n                arg2_00 = (iVar4 + 1) * 2;\n                if (arg2_00 < 0x100000000) {\n                    iVar8 = (*_sym.imp.ole32.dll_CoTaskMemAlloc)(arg2_00 & 0xffffffff);\n                }\n                *(arg2 + 2) = iVar8;\n                if ((iVar8 != 0) && (iVar4 = fcn.140069a48(iVar8, arg2_00, *(arg3 + 2), arg2_00),  iVar4 != 0)) {\n                    if (iVar4 == 0xc) {\n                        fcn.140020738();\n                        pcVar3 = swi(3);\n                        (*pcVar3)();\n                        return;\n                    }\n                    if ((iVar4 == 0x16) || (iVar4 == 0x22)) {\n                        fcn.140020780();\n                        pcVar3 = swi(3);\n                        (*pcVar3)();\n                        return;\n                    }\n                    if (iVar4 != 0x50) {\n                        fcn.140020780();\n                        pcVar3 = swi(3);\n                        (*pcVar3)();\n                        return;\n                    }\n                }\n                goto code_r0x00014001f582;\n            }\n            if (iVar4 == 4) {\n                piVar2 = *(arg3 + 2);\n                *(arg2 + 2) = piVar2;\n                (**(*piVar2 + 8))();\n                *arg2 = 4;\n                goto code_r0x00014001f582;\n            }\n            if (iVar4 == 8) {\n                piVar2 = *(arg3 + 2);\n                *(arg2 + 2) = piVar2;\n                (**(*piVar2 + 8))();\n                *arg2 = 8;\n                goto code_r0x00014001f582;\n            }\n            if (iVar4 == 0x10) {\n                *arg2 = 0x10;\n                *(arg2 + 2) = 0;\n                goto code_r0x00014001f3af;\n            }\n            if (iVar4 == 0x20) {\n                iVar8 = fcn.14001e7d0(0, *(arg3 + 2));\n                if (iVar8 != 0) {\n                    iVar5 = (*_sym.imp.KERNEL32.dll_GlobalLock)(iVar8);\n                    iVar6 = (*_sym.imp.GDI32.dll_CopyMetaFileA)(*(iVar5 + 0x10), 0);\n                    *(iVar5 + 0x10) = iVar6;\n                    if (iVar6 == 0) {\n                        (*_sym.imp.KERNEL32.dll_GlobalUnlock)(iVar8);\n                        (*_sym.imp.KERNEL32.dll_GlobalFree)(iVar8);\n                    }\n                    else {\n                        (*_sym.imp.KERNEL32.dll_GlobalUnlock)(iVar8);\n                        *(arg2 + 2) = iVar8;\n                        *arg2 = 0x20;\n                    }\n                }\n                goto code_r0x00014001f582;\n            }\n            if (iVar4 != 0x40) goto code_r0x00014001f582;\n        }\n        *arg2 = iVar4;\n        *(arg2 + 2) = 0;\n    }\ncode_r0x00014001f3af:\n    iVar4 = *arg3;\n    if (iVar4 == 1) {\n        iVar8 = fcn.14001e7d0(*(arg2 + 2), *(arg3 + 2));\n        if (iVar8 != 0) {\n            *(arg2 + 2) = iVar8;\n        }\n    }\n    else if (iVar4 == 2) {\n        fcn.14001f14c(&uStack160, *(arg2 + 2));\n        fcn.14001f14c(&uStack168, *(arg2 + 2));\n        (*_sym.imp.KERNEL32.dll_CopyFileA)\n                  (-(*(arg3 + 2) != 0) & uStack160, -(*(arg2 + 2) != 0) & CONCAT44(uStack164, uStack168), 0);\n        LOCK();\n        piVar1 = CONCAT44(uStack164, uStack168) + -8;\n        iVar4 = *piVar1;\n        *piVar1 = *piVar1 + -1;\n        if (iVar4 + -1 < 1) {\n            (**(**(CONCAT44(uStack164, uStack168) + -0x18) + 8))();\n        }\n        LOCK();\n        piVar1 = uStack160 - 8;\n        iVar4 = *piVar1;\n        *piVar1 = *piVar1 + -1;\n        if (iVar4 + -1 < 1) {\n            (**(**(uStack160 - 0x18) + 8))();\n        }\n    }\n    else if (iVar4 == 4) {\n        iVar4 = (**(**(arg3 + 2) + 0x60))(*(arg3 + 2), auStack136, 1);\n        if (iVar4 == 0) {\n            uStack168 = 0;\n            uStack164 = 0;\n            (**(**(arg2 + 2) + 0x28))(*(arg2 + 2), 0, 0, 0);\n            (**(**(arg3 + 2) + 0x28))(*(arg3 + 2), 0, 0, 0);\n            uStack184 = 0;\n            iVar4 = (**(**(arg3 + 2) + 0x38))(*(arg3 + 2), *(arg2 + 2), uStack120, 0);\n            if (iVar4 == 0) {\n                (**(**(arg2 + 2) + 0x28))(*(arg2 + 2), 0, 0, 0);\n                (**(**(arg3 + 2) + 0x28))(*(arg3 + 2), 0, 0, 0);\n            }\n        }\n    }\n    else if (iVar4 == 8) {\n        uStack184 = *(arg2 + 2);\n        (**(**(arg3 + 2) + 0x38))(*(arg3 + 2), 0, 0, 0);\n    }\n    else if (((iVar4 == 0x10) || (iVar4 == 0x40)) && (*(arg2 + 2) == 0)) {\n        uVar7 = (*_sym.imp.ole32.dll_OleDuplicateData)(*(arg3 + 2), noname_0, 0);\n        *(arg2 + 2) = uVar7;\n    }\ncode_r0x00014001f582:\n    fcn.140069870(uStack56 ^ auStack216);\n    return;\n}\n",
        "token_count": 1809
    },
    "14004657": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nulong fcn.140046570(ulong arg1)\n\n{\n    if (arg1 < 0x17) {\n        if (arg1 == 0x16) {\n            return 10;\n        }\n        if (arg1 != 1) {\n            if (arg1 == 2) {\n                return 2;\n            }\n            if (arg1 == 5) {\n                return 10;\n            }\n            if (arg1 == 9) {\n                return 6;\n            }\n            if (arg1 != 0xd) {\n                return 1;\n            }\n        }\n        return 5;\n    }\n    if (arg1 == 0x17) {\n        return 2;\n    }\n    if (arg1 == 0x18) {\n        return 4;\n    }\n    if (arg1 == 0x1c) {\n        return 0xd;\n    }\n    if (arg1 != 0x24) {\n        return 1;\n    }\n    return 0xb;\n}\n",
        "token_count": 218
    },
    "14003dcb": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_10h\n\nvoid fcn.14003dcbc(ulong *arg1, int64_t arg2, ulong arg3, ulong arg4)\n\n{\n    code *pcVar1;\n    uchar *puVar2;\n    char cVar3;\n    int32_t iVar4;\n    int64_t iVar5;\n    ulong *lpMem;\n    ulong *puVar6;\n    uint64_t uVar7;\n    uchar *puVar8;\n    ulong *puVar9;\n    ulong *puVar10;\n    ulong var_10h;\n    ulong var_40h;\n    ulong var_48h;\n    ulong var_50h;\n    uchar auStack104 [48];\n    uint64_t auStack56 [2];\n    \n    puVar8 = &stack0xffffffffffffff98;\n    auStack56[0] = *0x1400d96f0 ^ &stack0xffffffffffffffc8;\n    puVar9 = NULL;\n    if (arg2 == 0) {\n        arg2 = 0x1400a0e8b;\n    }\n    lpMem = puVar9;\n    puVar2 = &stack0xffffffffffffff98;\n    if (arg2 != 0) {\n        iVar4 = (*_sym.imp.KERNEL32.dll_lstrlenA)(arg2);\n        iVar5 = (iVar4 + 1) * 2;\n        puVar2 = &stack0xffffffffffffff98;\n        if (iVar5 + 0x80000000U < 0x100000000) {\n            iVar4 = iVar5;\n            if (iVar4 < 0x401) {\n                cVar3 = fcn.14001ebe0(iVar4);\n                puVar6 = NULL;\n                if (cVar3 == '\\0') goto code_r0x00014003dd78;\n                iVar5 = fcn.140097600();\n                puVar8 = &stack0xffffffffffffff98 + -iVar5;\n                puVar10 = &stack0xffffffffffffffc8 + -iVar5;\n            }\n            else {\ncode_r0x00014003dd78:\n                if (-iVar4 - 1U < 0x10) {\n                    fcn.1400031e0(0x80070057);\n                    pcVar1 = swi(3);\n                    (*pcVar1)();\n                    return;\n                }\n                lpMem = fcn.140069d98(iVar4 + 0x10);\n                puVar6 = NULL;\n                puVar2 = &stack0xffffffffffffff98;\n                if (lpMem == NULL) goto code_r0x00014003dddc;\n                *lpMem = 0;\n                puVar10 = lpMem + 2;\n            }\n            puVar9 = lpMem;\n            puVar2 = puVar8;\n            if (puVar10 == puVar6) goto code_r0x00014003dddc;\n            *puVar10 = puVar6;\n            *(puVar8 + 0x28) = iVar4 >> 1;\n            *(puVar8 + 0x20) = puVar10;\n            *(puVar8 + -8) = 0x14003ddce;\n            iVar4 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)(3, 0, arg2, 0xffffffff);\n            uVar7 = -(iVar4 != 0) & puVar10;\n        }\n        else {\ncode_r0x00014003dddc:\n            puVar8 = puVar2;\n            lpMem = puVar9;\n            uVar7 = 0;\n        }\n        puVar2 = puVar8;\n        if (uVar7 != 0) {\n            *(puVar8 + -8) = 0x14003ddf7;\n            iVar4 = (*_sym.imp.OLEAUT32.dll_VarDateFromDisp)(uVar7, arg4, arg3, arg1);\n            if (iVar4 < 0) {\n                *(arg1 + 1) = 1;\n                if (iVar4 == -0x7ffdfffb) {\n                    *arg1 = 0;\n                    while (lpMem != NULL) {\n                        puVar9 = *lpMem;\n                        *(puVar8 + -8) = 0x14003de19;\n                        fcn.140069e50(lpMem);\n                        lpMem = puVar9;\n                    }\n                }\n                else {\n                    *arg1 = 0xbff0000000000000;\n                    if (iVar4 == -0x7ffdfff6) {\n                        while (lpMem != NULL) {\n                            puVar9 = *lpMem;\n                            *(puVar8 + -8) = 0x14003de41;\n                            fcn.140069e50(lpMem);\n                            lpMem = puVar9;\n                        }\n                    }\n                    else {\n                        while (lpMem != NULL) {\n                            puVar9 = *lpMem;\n                            *(puVar8 + -8) = 0x14003de53;\n                            fcn.140069e50(lpMem);\n                            lpMem = puVar9;\n                        }\n                    }\n                }\n            }\n            else {\n                *(arg1 + 1) = 0;\n                while (lpMem != NULL) {\n                    puVar9 = *lpMem;\n                    *(puVar8 + -8) = 0x14003de6a;\n                    fcn.140069e50(lpMem);\n                    lpMem = puVar9;\n                }\n            }\n            goto code_r0x00014003de9c;\n        }\n    }\n    puVar8 = puVar2;\n    *arg1 = 0;\n    *(arg1 + 1) = 1;\n    while (lpMem != NULL) {\n        puVar9 = *lpMem;\n        *(puVar8 + -8) = 0x14003de95;\n        fcn.140069e50(lpMem);\n        lpMem = puVar9;\n    }\ncode_r0x00014003de9c:\n    uVar7 = auStack56[0] ^ &stack0xffffffffffffffc8;\n    *(puVar8 + -8) = 0x14003dea8;\n    fcn.140069870(uVar7);\n    return;\n}\n",
        "token_count": 1358
    },
    "14002376": {
        "rules": [
            "compute adler32 checksum/59ba9d7991e641c88d7c729645f1cfca"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t fcn.140023760(int64_t arg1, ulong arg2)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    ulong uStackX16;\n    \n    uStackX16 = arg2;\n    while( true ) {\n        (*_sym.imp.USER32.dll_ScreenToClient)(arg1, &uStackX16);\n        iVar1 = (*_sym.imp.USER32.dll_SendMessageA)(arg1, 0x366, 0, CONCAT22(uStackX16._4_2_, uStackX16));\n        (*_sym.imp.USER32.dll_ClientToScreen)(arg1, &uStackX16);\n        uVar2 = (*_sym.imp.USER32.dll_GetWindowLongA)(arg1, 0xfffffff0);\n        if ((uVar2 >> 0x1e & 1) == 0) break;\n        arg1 = (*_sym.imp.USER32.dll_GetParent)(arg1);\n        if ((arg1 == 0) || (iVar1 != 0)) break;\n    }\n    if (iVar1 == 0) {\n        iVar1 = -1;\n    }\n    return iVar1;\n}\n",
        "token_count": 265
    },
    "14004089": {
        "rules": [
            "compute adler32 checksum/59ba9d7991e641c88d7c729645f1cfca"
        ],
        "decompiled_code": "\nvoid fcn.140040894(int64_t *arg1, ulong arg2)\n\n{\n    uchar auStack88 [32];\n    uchar auStack56 [32];\n    uint64_t uStack24;\n    \n    uStack24 = *0x1400d96f0 ^ auStack88;\n    (**(*arg1 + 0x230))(arg1, 0x417, arg2, auStack56);\n    fcn.140069870(uStack24 ^ auStack88);\n    return;\n}\n",
        "token_count": 109
    },
    "140040a4": {
        "rules": [
            "compute adler32 checksum/59ba9d7991e641c88d7c729645f1cfca"
        ],
        "decompiled_code": "\nvoid fcn.140040a4c(int64_t *arg1, ulong arg2, uint *arg3, uint32_t *arg4)\n\n{\n    uint *in_stack_00000028;\n    uchar auStack104 [32];\n    uint uStack72;\n    uint uStack68;\n    uint8_t uStack64;\n    uint8_t uStack63;\n    uint64_t uStack40;\n    \n    uStack40 = *0x1400d96f0 ^ auStack104;\n    (**(*arg1 + 0x230))(arg1, 0x417, arg2, &uStack72);\n    *arg3 = uStack68;\n    *arg4 = (uStack64 ^ 4) << 0x10 | uStack63;\n    *in_stack_00000028 = uStack72;\n    fcn.140069870(uStack40 ^ auStack104);\n    return;\n}\n",
        "token_count": 199
    },
    "14006bc2": {
        "rules": [
            "decompress data using aPLib/06666ba0b6a14a5481e4ee6eb664d454"
        ],
        "decompiled_code": "\nuint8_t * fcn.14006bc24(uint8_t *arg1, ulong arg2)\n\n{\n    uint8_t uVar1;\n    uint *puVar2;\n    uint8_t *puVar3;\n    uchar auStack40 [8];\n    int64_t iStack32;\n    int64_t iStack24;\n    char cStack16;\n    \n    fcn.14006b7c8(auStack40, 0);\n    if (arg1 == NULL) {\n        puVar2 = fcn.14006abb0();\n        *puVar2 = 0x16;\n        fcn.140070df0(0, 0, 0, 0);\n    }\n    else {\n        if (*(iStack32 + 8) == 0) {\n            arg1 = fcn.140077df8(arg1);\ncode_r0x00014006bbac:\n            if (cStack16 == '\\0') {\n                return arg1;\n            }\n            *(iStack24 + 200) = *(iStack24 + 200) & 0xfffffffd;\n            return arg1;\n        }\n        while( true ) {\n            uVar1 = *arg1;\n            if (uVar1 == 0) break;\n            if ((*(uVar1 + 0x1d + iStack32) & 4) == 0) {\n                puVar3 = arg1;\n                if (arg2 == uVar1) break;\n            }\n            else {\n                puVar3 = arg1 + 1;\n                if (*puVar3 == 0) goto code_r0x00014006bb73;\n                if (arg2 == CONCAT11(uVar1, *puVar3)) goto code_r0x00014006bbac;\n            }\n            arg1 = puVar3 + 1;\n        }\n        if (arg2 == uVar1) {\n            if (cStack16 == '\\0') {\n                return arg1;\n            }\n            *(iStack24 + 200) = *(iStack24 + 200) & 0xfffffffd;\n            return arg1;\n        }\n    }\ncode_r0x00014006bb73:\n    if (cStack16 != '\\0') {\n        *(iStack24 + 200) = *(iStack24 + 200) & 0xfffffffd;\n    }\n    return NULL;\n}\n",
        "token_count": 511
    },
    "14006c93": {
        "rules": [
            "decompress data using aPLib/06666ba0b6a14a5481e4ee6eb664d454"
        ],
        "decompiled_code": "\nuint8_t * fcn.14006c934(uint8_t *arg1, ulong arg2)\n\n{\n    uint8_t uVar1;\n    uint16_t uVar2;\n    uint *puVar3;\n    uint8_t *puVar4;\n    uint8_t uVar5;\n    uint8_t *puVar6;\n    uchar auStack40 [8];\n    int64_t iStack32;\n    int64_t iStack24;\n    char cStack16;\n    \n    puVar4 = NULL;\n    fcn.14006b7c8(auStack40, 0);\n    if (arg1 == NULL) {\n        puVar3 = fcn.14006abb0();\n        *puVar3 = 0x16;\n        fcn.140070df0(0, 0, 0, 0);\n        if (cStack16 != '\\0') {\n            *(iStack24 + 200) = *(iStack24 + 200) & 0xfffffffd;\n        }\n        puVar4 = NULL;\n    }\n    else if (*(iStack32 + 8) == 0) {\n        puVar4 = fcn.1400792f4(arg1);\n        if (cStack16 != '\\0') {\n            *(iStack24 + 200) = *(iStack24 + 200) & 0xfffffffd;\n        }\n    }\n    else {\n        do {\n            uVar5 = *arg1;\n            if ((*(uVar5 + 0x1d + iStack32) & 4) == 0) {\n                puVar6 = arg1;\n                if (arg2 == uVar5) {\n                    puVar4 = arg1;\n                }\n            }\n            else {\n                puVar6 = arg1 + 1;\n                uVar1 = *puVar6;\n                if (uVar1 == 0) {\n                    uVar5 = uVar1;\n                    if (puVar4 == NULL) {\n                        puVar4 = puVar6;\n                    }\n                }\n                else {\n                    uVar2 = CONCAT11(uVar5, uVar1);\n                    uVar5 = uVar1;\n                    if (arg2 == uVar2) {\n                        puVar4 = arg1;\n                    }\n                }\n            }\n            arg1 = puVar6 + 1;\n        } while (uVar5 != 0);\n        if (cStack16 != '\\0') {\n            *(iStack24 + 200) = *(iStack24 + 200) & 0xfffffffd;\n        }\n    }\n    return puVar4;\n}\n",
        "token_count": 559
    },
    "1400698a": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nvoid fcn.1400698a0(uint64_t *arg1, uint64_t noname_1, uint64_t arg3)\n\n{\n    uint32_t uVar1;\n    uint64_t *puVar2;\n    uint64_t uVar3;\n    \n    uVar3 = arg3;\n    if (7 < arg3) {\n        noname_1 = (noname_1 & 0xff) * 0x101010101010101;\n        if (0x3f < arg3) {\n            uVar1 = -arg1 & 7;\n            if (uVar1 != 0) {\n                uVar3 = arg3 - uVar1;\n                *arg1 = noname_1;\n            }\n            arg1 = uVar1 + arg1;\n            arg3 = uVar3 & 0x3f;\n            uVar3 = uVar3 >> 6;\n            if (uVar3 != 0) {\n                puVar2 = arg1;\n                if (uVar3 < 0x1c00) {\n                    do {\n                        *puVar2 = noname_1;\n                        puVar2[1] = noname_1;\n                        puVar2[2] = noname_1;\n                        arg1 = puVar2 + 8;\n                        puVar2[3] = noname_1;\n                        puVar2[4] = noname_1;\n                        uVar3 = uVar3 - 1;\n                        puVar2[5] = noname_1;\n                        puVar2[6] = noname_1;\n                        puVar2[7] = noname_1;\n                        puVar2 = arg1;\n                    } while (uVar3 != 0);\n                }\n                else {\n                    do {\n                        *puVar2 = noname_1;\n                        puVar2[1] = noname_1;\n                        puVar2[2] = noname_1;\n                        arg1 = puVar2 + 8;\n                        puVar2[3] = noname_1;\n                        puVar2[4] = noname_1;\n                        uVar3 = uVar3 - 1;\n                        puVar2[5] = noname_1;\n                        puVar2[6] = noname_1;\n                        puVar2[7] = noname_1;\n                        puVar2 = arg1;\n                    } while (uVar3 != 0);\n                    LOCK();\n                }\n            }\n        }\n        uVar3 = arg3 & 7;\n        for (arg3 = arg3 >> 3; arg3 != 0; arg3 = arg3 - 1) {\n            *arg1 = noname_1;\n            arg1 = arg1 + 1;\n        }\n    }\n    for (; uVar3 != 0; uVar3 = uVar3 - 1) {\n        *arg1 = noname_1;\n        arg1 = arg1 + 1;\n    }\n    return;\n}\n",
        "token_count": 650
    },
    "140047c7": {
        "rules": [
            "hash data using aphash/10489b186fc44711a1078750698db7a9",
            "encrypt data using HC-128/1d01b23c04404fe18b84a06c7e7d83b0"
        ],
        "decompiled_code": "\nvoid fcn.140047c74(int64_t arg1, ulong arg2)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    int64_t arg2_00;\n    ulong uVar4;\n    int64_t hWnd;\n    \n    uVar2 = fcn.140015284(arg1);\n    hWnd = arg1;\n    if ((uVar2 >> 0x1e & 1) == 0) {\n        hWnd = fcn.140010da8(arg1);\n    }\n    if (hWnd != 0) {\n        if ((arg2 & 0xc) != 0) {\n            iVar3 = fcn.14001549c(hWnd);\n            if ((((~(arg2 >> 3) & 1) == 0) || (iVar3 == 0)) || (hWnd == arg1)) {\n                (*_sym.imp.USER32.dll_SendMessageA)(*(hWnd + 0x40), 0x86, 0, 0);\n            }\n            else {\n                *(arg1 + 0x78) = *(arg1 + 0x78) | 0x200;\n                (*_sym.imp.USER32.dll_SendMessageA)(*(hWnd + 0x40), 0x86, 1, 0);\n                *(arg1 + 0x78) = *(arg1 + 0x78) & 0xfffffdff;\n            }\n        }\n        arg2_00 = (*_sym.imp.USER32.dll_GetDesktopWindow)();\n        uVar4 = 5;\n        while (arg2_00 = (*_sym.imp.USER32.dll_GetWindow)(arg2_00, uVar4),  arg2_00 != 0) {\n            iVar3 = fcn.140046cf8(*(hWnd + 0x40), arg2_00);\n            if (iVar3 != 0) {\n                (*_sym.imp.USER32.dll_SendMessageA)(arg2_00, 0x36d, arg2, 0);\n            }\n            uVar4 = 2;\n        }\n        return;\n    }\n    fcn.140020780();\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 491
    },
    "140061cc": {
        "rules": [
            "hash data using djb2/86fcf1c18148478ab58e8c52ba43c8d5",
            "hash data using jshash/2d43aa00ef9c47beadbc2522c99f9e7b"
        ],
        "decompiled_code": "\nvoid fcn.140061ccc(int64_t arg1, ushort *arg2)\n\n{\n    code *pcVar1;\n    uchar auVar2 [16];\n    int32_t iVar3;\n    ulong uVar4;\n    ushort *puVar5;\n    \n    if (*(arg1 + 0x5c) == *(arg1 + 0x70)) {\n        auVar2 = ZEXT816(0x20) * ZEXT416(*(arg1 + 0x5c) + 10);\n        uVar4 = SUB168(auVar2, 0);\n        if (SUB168(auVar2 >> 0x40, 0) != 0) {\n            uVar4 = 0xffffffffffffffff;\n        }\n        uVar4 = fcn.140003694(uVar4);\n        *(arg1 + 0x70) = *(arg1 + 0x70) + 10;\n        iVar3 = fcn.140069a48(uVar4, *(arg1 + 0x5c) + 10 << 5, *(arg1 + 0x50), *(arg1 + 0x5c) << 5);\n        if (iVar3 != 0) {\n            if (iVar3 == 0xc) {\n                fcn.140020738();\n                pcVar1 = swi(3);\n                (*pcVar1)();\n                return;\n            }\n            if ((iVar3 == 0x16) || (iVar3 == 0x22)) {\n                fcn.140020780();\n                pcVar1 = swi(3);\n                (*pcVar1)();\n                return;\n            }\n            if (iVar3 != 0x50) {\n                fcn.140020780();\n                pcVar1 = swi(3);\n                (*pcVar1)();\n                return;\n            }\n        }\n        fcn.1400036d8(*(arg1 + 0x50));\n        *(arg1 + 0x50) = uVar4;\n    }\n    puVar5 = *(arg1 + 0x5c) * 0x20 + *(arg1 + 0x50);\n    *puVar5 = *arg2;\n    *(puVar5 + 4) = *(arg2 + 4);\n    *(puVar5 + 8) = *(arg2 + 8);\n    *(puVar5 + 10) = *(arg2 + 10);\n    *(puVar5 + 0xc) = *(arg2 + 0xc);\n    *(arg1 + 0x5c) = *(arg1 + 0x5c) + 1;\n    return;\n}\n",
        "token_count": 573
    },
    "14004f59": {
        "rules": [
            "parse credit card information/e6f146abe79f47cd84115fe8b7938431"
        ],
        "decompiled_code": "\nint64_t * fcn.14004f598(int64_t *arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    code *pcVar1;\n    int64_t *piVar2;\n    int64_t iVar3;\n    uint32_t in_stack_00000028;\n    uint32_t in_stack_00000030;\n    uint32_t in_stack_00000038;\n    uchar auStack56 [12];\n    int32_t iStack44;\n    int32_t iStack40;\n    int32_t iStack36;\n    \n    if (arg2 < 0x76c) {\n        fcn.1400031e0(0x80004005);\n        pcVar1 = swi(3);\n        piVar2 = (*pcVar1)();\n        return piVar2;\n    }\n    if (0xb < arg3 - 1U) {\n        fcn.1400031e0(0x80004005);\n        pcVar1 = swi(3);\n        piVar2 = (*pcVar1)();\n        return piVar2;\n    }\n    if (0x1e < arg4 - 1U) {\n        fcn.1400031e0(0x80004005);\n        pcVar1 = swi(3);\n        piVar2 = (*pcVar1)();\n        return piVar2;\n    }\n    if (0x17 < in_stack_00000028) {\n        fcn.1400031e0(0x80004005);\n        pcVar1 = swi(3);\n        piVar2 = (*pcVar1)();\n        return piVar2;\n    }\n    if (0x3b < in_stack_00000030) {\n        fcn.1400031e0(0x80004005);\n        pcVar1 = swi(3);\n        piVar2 = (*pcVar1)();\n        return piVar2;\n    }\n    if (0x3b < in_stack_00000038) {\n        fcn.1400031e0(0x80004005);\n        pcVar1 = swi(3);\n        piVar2 = (*pcVar1)();\n        return piVar2;\n    }\n    iStack40 = arg3 + -1;\n    iStack36 = arg2 + -0x76c;\n    iStack44 = arg4;\n    iVar3 = fcn.14006dd54(auStack56);\n    *arg1 = iVar3;\n    if (iVar3 == -1) {\n        fcn.1400031e0(0x80070057);\n        pcVar1 = swi(3);\n        piVar2 = (*pcVar1)();\n        return piVar2;\n    }\n    return arg1;\n}\n",
        "token_count": 592
    },
    "14006237": {
        "rules": [
            "PEB access/35f28d23090149119036cdb16976bf66"
        ],
        "decompiled_code": "\nbool fcn.140062374(int64_t lpMessageFilter)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = (*_sym.imp.ole32.dll_CoRegisterMessageFilter)(lpMessageFilter + 0x60, 0);\n    if (iVar1 == 0) {\n        *(lpMessageFilter + 0x40) = 1;\n    }\n    return iVar1 == 0;\n}\n",
        "token_count": 90
    },
    "14000105": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** fcn.140001050(code **arg1)\n\n{\n    fcn.140004f60(arg1, 0);\n    *arg1 = vtable.CTaskApp.0;\n    return arg1;\n}\n",
        "token_count": 48
    },
    "14000113": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140001130(ulong arg1)\n\n{\n    fcn.140008c2c(arg1);\n    return;\n}\n",
        "token_count": 30
    },
    "1400012c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** fcn.1400012c0(code **arg1)\n\n{\n    fcn.140008d78(arg1, 100, 0);\n    *arg1 = vtable.CAboutDlg.0;\n    return arg1;\n}\n",
        "token_count": 53
    },
    "14000138": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** fcn.140001380(code **arg1, ulong arg2)\n\n{\n    int64_t iVar1;\n    code *pcVar2;\n    \n    fcn.140008d78(arg1, 0x66, arg2);\n    *arg1 = vtable.CTaskDlg.0;\n    fcn.140017ad4();\n    iVar1 = fcn.140017ad4();\n    pcVar2 = (*_sym.imp.USER32.dll_LoadIconA)(*(iVar1 + 0x18), 0x80);\n    arg1[0x1d] = pcVar2;\n    return arg1;\n}\n",
        "token_count": 137
    },
    "14000149": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "PEB access"
        ],
        "decompiled_code": "\nulong fcn.140001490(void)\n\n{\n    int64_t in_GS_OFFSET;\n    \n    return *(in_GS_OFFSET + 0x60);\n}\n",
        "token_count": 35
    },
    "1400014b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.1400014b0(int16_t *arg1)\n\n{\n    int16_t *piStackX8;\n    int32_t iStack24;\n    \n    iStack24 = 0;\n    for (piStackX8 = arg1; *piStackX8 != 0; piStackX8 = piStackX8 + 1) {\n        iStack24 = iStack24 + 1;\n    }\n    return iStack24;\n}\n",
        "token_count": 102
    },
    "14000189": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain loop",
            "resolve function by parsing PE exports"
        ],
        "decompiled_code": "\nint64_t fcn.140001890(int64_t arg1, ulong arg2)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    int64_t iVar5;\n    uint32_t uStack72;\n    \n    iVar5 = arg1 + *((((((((((((((((((((((((((((((((((((((((((((((((((((((arg1 + *(arg1 + *0x1400d710c * -0x40 +\n                                                                                   *0x1400d7108 * *0x1400d7108 * 0x40 +\n                                                                                   *0x1400d7104 * -0x40 +\n                                                                                   *0x1400d710c * 0x40 +\n                                                                                   *0x1400d70fc * -0x40 +\n                                                                                   *0x1400d7100 * -0x40 +\n                                                                                   *0x1400d70fc * -0x40 +\n                                                                                   *0x1400d710c * 0x40 +\n                                                                                   *0x1400d710c * -0x40 +\n                                                                                   *0x1400d710c * -0x40 +\n                                                                                   *0x1400d7108 * -0x40 +\n                                                                                   *0x1400d7108 * 0x40 +\n                                                                                   *0x1400d7108 * -0x40 +\n                                                                                   *0x1400d70fc * *0x1400d70fc * -0x40 +\n                                                                                   *0x1400d70f8 * *0x1400d7108 * 0x40 +\n                                                                                   *0x1400d7104 * -0x40 +\n                                                                                   *0x1400d7104 * -0x40 +\n                                                                                   *0x1400d70fc * 0x40 +\n                                                                                   *0x1400d7108 * -0x40 +\n                                                                                   *0x1400d710c * *0x1400d7108 * -0x40 +\n                                                                                   *0x1400d7100 * *0x1400d70fc * -0x40 +\n                                                                                   *0x1400d710c * -0x40 +\n                                                                                   *0x1400d710c * -0x40 +\n                                                                                   *0x1400d7108 * *0x1400d7108 * 0x40 +\n                                                                                   *0x1400d7104 * -0x40 +\n                                                                                   *0x1400d710c * 0x40 +\n                                                                                   *0x1400d70fc * -0x40 +\n                                                                                   *0x1400d7100 * -0x40 +\n                                                                                   *0x1400d70fc * -0x40 +\n                                                                                   *0x1400d710c * 0x40 +\n                                                                                   *0x1400d710c * -0x40 +\n                                                                                   *0x1400d710c * -0x40 +\n                                                                                   *0x1400d7108 * -0x40 +\n                                                                                   *0x1400d7108 * 0x40 +\n                                                                                   *0x1400d7108 * -0x40 +\n                                                                                   *0x1400d70fc * *0x1400d70fc * -0x40 +\n                                                                                   *0x1400d70f8 * *0x1400d7108 * 0x40 +\n                                                                                   *0x1400d7104 * -0x40 +\n                                                                                   *0x1400d7104 * -0x40 +\n                                                                                   *0x1400d70fc * 0x40 +\n                                                                                   *0x1400d7108 * -0x40 +\n                                                                                   *0x1400d710c * *0x1400d7108 * -0x40 +\n                                                                                   *0x1400d7100 * *0x1400d70fc * -0x40 +\n                                                                                   *0x1400d710c * -0x40 +\n                                                                                   *0x1400d710c * -0x40 +\n                                                                                   *0x1400d7108 * *0x1400d7108 * 0x40 +\n                                                                                   *0x1400d7104 * -0x40 +\n                                                                                   *0x1400d710c * 0x40 +\n                                                                                   *0x1400d70fc * -0x40 +\n                                                                                   *0x1400d7100 * -0x40 +\n                                                                                   *0x1400d70fc * -0x40 +\n                                                                                   *0x1400d710c * 0x40 +\n                                                                                   *0x1400d710c * -0x40 +\n                                                                                   *0x1400d710c * -0x40 +\n                                                                                   *0x1400d7108 * -0x40 +\n                                                                                   *0x1400d7108 * 0x40 +\n                                                                                   *0x1400d7108 * -0x40 +\n                                                                                   *0x1400d70fc * *0x1400d70fc * -0x40 +\n                                                                                   *0x1400d70f8 * *0x1400d7108 * 0x40 +\n                                                                                   *0x1400d7104 * -0x40 +\n                                                                                   *0x1400d7104 * -0x40 +\n                                                                                   *0x1400d70fc * 0x40 +\n                                                                                   *0x1400d7108 * -0x40 +\n                                                                                   *0x1400d710c * *0x1400d7108 * -0x40 +\n                                                                                   *0x1400d7100 * *0x1400d70fc * -0x40 +\n                                                                                   *0x1400d710c * -0x40 + 0x3c)) -\n                                                                        *0x1400d7100) -\n                                                                       *0x1400d7100 * *0x1400d7108 * *0x1400d7104) +\n                                                                       *0x1400d7108 + *0x1400d710c * *0x1400d7108 +\n                                                                      *0x1400d7108) - *0x1400d7100) - *0x1400d710c) -\n                                                                   *0x1400d7104) + *0x1400d710c +\n                                                                  *0x1400d70fc * *0x1400d7100) -\n                                                                 *0x1400d7104 * *0x1400d7104) + *0x1400d7100 +\n                                                                *0x1400d70f8) - *0x1400d7104) - *0x1400d710c) +\n                                                             *0x1400d710c * *0x1400d7108) - *0x1400d7108) - *0x1400d7100\n                                                           ) - *0x1400d7100 * *0x1400d7108 * *0x1400d7104) +\n                                                          *0x1400d7108 + *0x1400d710c * *0x1400d7108 + *0x1400d7108) -\n                                                        *0x1400d7100) - *0x1400d710c) - *0x1400d7104) + *0x1400d710c +\n                                                     *0x1400d70fc * *0x1400d7100) - *0x1400d7104 * *0x1400d7104) +\n                                                    *0x1400d7100 + *0x1400d70f8) - *0x1400d7104) - *0x1400d710c) +\n                                                *0x1400d710c * *0x1400d7108) - *0x1400d7108) - *0x1400d7100) -\n                                             *0x1400d7100 * *0x1400d7108 * *0x1400d7104) + *0x1400d7108 +\n                                             *0x1400d710c * *0x1400d7108 + *0x1400d7108) - *0x1400d7100) - *0x1400d710c)\n                                         - *0x1400d7104) + *0x1400d710c + *0x1400d70fc * *0x1400d7100) -\n                                       *0x1400d7104 * *0x1400d7104) + *0x1400d7100 + *0x1400d70f8) - *0x1400d7104) -\n                                    *0x1400d710c) + *0x1400d710c * *0x1400d7108) - *0x1400d7108) - *0x1400d7100) -\n                                *0x1400d7100 * *0x1400d7108 * *0x1400d7104) + *0x1400d7108 + *0x1400d710c * *0x1400d7108\n                               + *0x1400d7108) - *0x1400d7100) - *0x1400d710c) - *0x1400d7104) + *0x1400d710c +\n                           *0x1400d70fc * *0x1400d7100) - *0x1400d7104 * *0x1400d7104) + *0x1400d7100 + *0x1400d70f8) -\n                        *0x1400d7104) - *0x1400d710c) + *0x1400d710c * *0x1400d7108) - *0x1400d7108) + 0x88);\n    uVar1 = *(iVar5 + 0x20);\n    uVar2 = *(iVar5 + 0x1c);\n    uVar3 = *(iVar5 + 0x24);\n    uStack72 = 0;\n    while( true ) {\n        if (*(iVar5 + 0x18) <= uStack72) {\n            return 0;\n        }\n        iVar4 = fcn.140069720(arg1 + *(arg1 + uVar1 + uStack72 * 4), arg2);\n        if (iVar4 == 0) break;\n        uStack72 = uStack72 + 1;\n    }\n    return arg1 + *(arg1 + uVar2 +\n                   *(arg1 + uVar3 +\n                    ((((uStack72 - *0x1400d70fc * *0x1400d70fc * *0x1400d7100) + *0x1400d7104 * -2 + *0x1400d70fc * -2 +\n                       *0x1400d710c * -2 + *0x1400d70fc * *0x1400d70f8 + *0x1400d7100 * 2 + *0x1400d7100 * *0x1400d70fc\n                      + *0x1400d70fc * *0x1400d70f8) - *0x1400d70fc * *0x1400d70fc * *0x1400d7100) + *0x1400d70f8 * 2 +\n                     *0x1400d70fc * *0x1400d70f8 + *0x1400d7100 * *0x1400d70fc + *0x1400d70fc * *0x1400d70f8) * 2) * 4);\n}\n",
        "token_count": 2618
    },
    "1400029d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400029d0(ulong arg1)\n\n{\n    fcn.140008c2c(arg1);\n    return;\n}\n",
        "token_count": 32
    },
    "140002fb": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140002fb0(ulong arg1)\n\n{\n    fcn.140003380(arg1);\n    return;\n}\n",
        "token_count": 29
    },
    "14000338": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140003380(int64_t *arg1)\n\n{\n    int32_t iVar1;\n    int64_t **ppiVar2;\n    int32_t *piVar3;\n    \n    ppiVar2 = *arg1 + -0x18;\n    piVar3 = *arg1 + -8;\n    LOCK();\n    iVar1 = *piVar3;\n    *piVar3 = *piVar3 + -1;\n    if (iVar1 + -1 < 1) {\n        (**(**ppiVar2 + 8))(*ppiVar2, ppiVar2);\n    }\n    return;\n}\n",
        "token_count": 134
    },
    "14000369": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.140003694(ulong arg1)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    \n    while( true ) {\n        iVar2 = fcn.140069d98(arg1);\n        if (iVar2 != 0) {\n            return iVar2;\n        }\n        if (*0x1400d7190 == NULL) break;\n        iVar1 = (**0x1400d7190)(arg1);\n        if (iVar1 == 0) {\n            return 0;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 124
    },
    "140069e5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140069e50(int64_t lpMem)\n\n{\n    uint *puVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint uVar4;\n    \n    if ((lpMem != 0) && (iVar2 = (*_sym.imp.KERNEL32.dll_HeapFree)(*0x1400df6a0, 0, lpMem),  iVar2 == 0)) {\n        puVar1 = fcn.14006abb0();\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        uVar4 = fcn.14006ab68(uVar3);\n        *puVar1 = uVar4;\n    }\n    return;\n}\n",
        "token_count": 155
    },
    "140003c3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140003c34(ulong arg1)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.1400063f8();\n    if ((iVar1 != 0) && (*(iVar1 + 0x78) != NULL)) {\n        (**(iVar1 + 0x78))(1, 1);\n    }\n    // WARNING: Could not recover jumptable at 0x000140003c5f. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.USER32.dll_PostQuitMessage)(arg1);\n    return;\n}\n",
        "token_count": 132
    },
    "14000482": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140004828(int64_t *arg1, ulong noname_1, ulong pv)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int64_t *piVar3;\n    code *pcVar4;\n    int64_t iVar5;\n    \n    iVar5 = *arg1;\n    piVar3 = *(iVar5 + -0x18);\n    if (*(iVar5 + -0x10) != 0) {\n        if (*(iVar5 + -8) < 0) {\n            if (*(iVar5 + -0xc) < 0) {\n                fcn.1400031e0(0x80070057);\n                pcVar4 = swi(3);\n                (*pcVar4)();\n                return;\n            }\n            *(iVar5 + -0x10) = 0;\n            **arg1 = 0;\n        }\n        else {\n            LOCK();\n            piVar1 = iVar5 + -8;\n            iVar2 = *piVar1;\n            *piVar1 = *piVar1 + -1;\n            if (iVar2 + -1 < 1) {\n                (**(**(iVar5 + -0x18) + 8))();\n            }\n            iVar5 = (**(*piVar3 + 0x18))(piVar3);\n            *arg1 = iVar5 + 0x18;\n        }\n    }\n    return;\n}\n",
        "token_count": 305
    },
    "1400050c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** fcn.1400050c4(code **arg1)\n\n{\n    code *pcVar1;\n    int64_t *piVar2;\n    code **ppcVar3;\n    int64_t iVar4;\n    \n    *arg1 = vtable.CCommandLineInfo.0;\n    piVar2 = fcn.140017fc0();\n    if (piVar2 == NULL) {\n        fcn.1400031e0(0x80004005);\n        pcVar1 = swi(3);\n        ppcVar3 = (*pcVar1)();\n        return ppcVar3;\n    }\n    iVar4 = (**(*piVar2 + 0x18))(piVar2);\n    arg1[4] = iVar4 + 0x18;\n    piVar2 = fcn.140017fc0();\n    if (piVar2 == NULL) {\n        fcn.1400031e0(0x80004005);\n        pcVar1 = swi(3);\n        ppcVar3 = (*pcVar1)();\n        return ppcVar3;\n    }\n    iVar4 = (**(*piVar2 + 0x18))(piVar2);\n    arg1[5] = iVar4 + 0x18;\n    piVar2 = fcn.140017fc0();\n    if (piVar2 == NULL) {\n        fcn.1400031e0(0x80004005);\n        pcVar1 = swi(3);\n        ppcVar3 = (*pcVar1)();\n        return ppcVar3;\n    }\n    iVar4 = (**(*piVar2 + 0x18))(piVar2);\n    arg1[6] = iVar4 + 0x18;\n    piVar2 = fcn.140017fc0();\n    if (piVar2 == NULL) {\n        fcn.1400031e0(0x80004005);\n        pcVar1 = swi(3);\n        ppcVar3 = (*pcVar1)();\n        return ppcVar3;\n    }\n    iVar4 = (**(*piVar2 + 0x18))(piVar2);\n    arg1[7] = iVar4 + 0x18;\n    *(arg1 + 0xc) = 0;\n    *(arg1 + 2) = 0;\n    *(arg1 + 0x14) = 0;\n    *(arg1 + 3) = 0;\n    *(arg1 + 1) = 1;\n    return arg1;\n}\n",
        "token_count": 543
    },
    "14000519": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140005190(code **arg1)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    code *pcVar3;\n    \n    pcVar3 = arg1[7];\n    *arg1 = vtable.CCommandLineInfo.0;\n    LOCK();\n    piVar1 = pcVar3 + -8;\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 + -1 < 1) {\n        (**(**(pcVar3 + -0x18) + 8))();\n    }\n    pcVar3 = arg1[6];\n    LOCK();\n    piVar1 = pcVar3 + -8;\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 + -1 < 1) {\n        (**(**(pcVar3 + -0x18) + 8))();\n    }\n    pcVar3 = arg1[5];\n    LOCK();\n    piVar1 = pcVar3 + -8;\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 + -1 < 1) {\n        (**(**(pcVar3 + -0x18) + 8))();\n    }\n    pcVar3 = arg1[4];\n    LOCK();\n    piVar1 = pcVar3 + -8;\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 + -1 < 1) {\n        (**(**(pcVar3 + -0x18) + 8))();\n    }\n    return;\n}\n",
        "token_count": 379
    },
    "14000529": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140005294(int64_t *arg1, int64_t arg2, uint64_t arg3)\n\n{\n    uint32_t uVar1;\n    int64_t iVar2;\n    int64_t arg1_00;\n    code *pcVar3;\n    int64_t arg4;\n    int32_t iVar4;\n    \n    iVar4 = arg3;\n    arg4 = iVar4;\n    if (iVar4 == 0) {\n        fcn.140004828(arg1, arg2, arg3);\n    }\n    else {\n        if (arg2 == 0) {\n            fcn.1400031e0(0x80070057);\n            pcVar3 = swi(3);\n            (*pcVar3)();\n            return;\n        }\n        iVar2 = *arg1;\n        uVar1 = *(iVar2 + -0x10);\n        if ((1U - *(iVar2 + -8) | *(iVar2 + -0xc) - iVar4) < 0) {\n            fcn.1400033e0(arg1, arg3 & 0xffffffff);\n        }\n        arg1_00 = *arg1;\n        if (uVar1 < arg2 - iVar2) {\n            fcn.140069a48(arg1_00, *(arg1_00 + -0xc), arg2, arg4);\n        }\n        else {\n            fcn.14006a3c0(arg1_00, *(arg1_00 + -0xc), arg1_00 + (arg2 - iVar2), arg4);\n        }\n        if ((iVar4 < 0) || (*(*arg1 + -0xc) < iVar4)) {\n            fcn.1400031e0(0x80070057);\n            pcVar3 = swi(3);\n            (*pcVar3)();\n            return;\n        }\n        *(*arg1 + -0x10) = iVar4;\n        *(*arg1 + arg4) = 0;\n    }\n    return;\n}\n",
        "token_count": 433
    },
    "14000536": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140005360(int64_t *arg1, int64_t arg2, ulong arg3)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    \n    if (arg2 == 0) {\n        fcn.1400031e0(0x80070057);\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    uVar2 = fcn.14006a50c(arg2, arg3);\n    if ((1U - *(*arg1 + -8) | *(*arg1 + -0xc) - uVar2) < 0) {\n        fcn.1400033e0(arg1, uVar2);\n    }\n    fcn.14006a744(*arg1, uVar2 + 1, arg2, arg3);\n    if ((-1 < uVar2) && (uVar2 <= *(*arg1 + -0xc))) {\n        *(*arg1 + -0x10) = uVar2;\n        *(uVar2 + *arg1) = 0;\n        return;\n    }\n    fcn.1400031e0(0x80070057);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 278
    },
    "1400054f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400054f4(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    ulong uStackX24;\n    ulong uStackX32;\n    \n    uStackX24 = arg3;\n    uStackX32 = arg4;\n    fcn.140005360(arg1, arg2, &uStackX24);\n    return;\n}\n",
        "token_count": 84
    },
    "14000551": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140005518(code **arg1)\n\n{\n    int64_t *piVar1;\n    int64_t iVar2;\n    uchar auStack616 [56];\n    code **ppcStack560;\n    ulong uStack544;\n    uint64_t uStack24;\n    \n    uStack544 = 0xfffffffffffffffe;\n    uStack24 = *0x1400d96f0 ^ auStack616;\n    *arg1 = vtable.CWinApp.0;\n    piVar1 = arg1[0x16];\n    ppcStack560 = arg1;\n    if (piVar1 != NULL) {\n        (**(*piVar1 + 8))(piVar1, 1);\n    }\n    piVar1 = arg1[0x22];\n    if (piVar1 != NULL) {\n        (**(*piVar1 + 0x30))(piVar1, 1);\n    }\n    iVar2 = fcn.140017ad4();\n    if (*(iVar2 + 0x28) == '\\0') {\n        if (*0x1400db1d8 != NULL) {\n            (**(**0x1400db1d8 + 8))(*0x1400db1d8, 1);\n            *0x1400db1d8 = NULL;\n        }\n        if (*0x1400db1d0 != NULL) {\n            (**(**0x1400db1d0 + 8))(*0x1400db1d0, 1);\n            *0x1400db1d0 = NULL;\n        }\n    }\n    if (arg1[0x1c] != NULL) {\n        fcn.1400227c4(arg1[0x1c]);\n    }\n    if (arg1[0x1d] != NULL) {\n        fcn.1400227c4(arg1[0x1d]);\n    }\n    if (*(arg1 + 0x24) != 0) {\n        (*_sym.imp.KERNEL32.dll_GlobalDeleteAtom)();\n    }\n    if (*(arg1 + 0x122) != 0) {\n        (*_sym.imp.KERNEL32.dll_GlobalDeleteAtom)();\n    }\n    piVar1 = arg1[0x23];\n    if (piVar1 != NULL) {\n        (**(*piVar1 + 8))(piVar1, 1);\n    }\n    iVar2 = fcn.140017ad4();\n    if (*(iVar2 + 0x20) == arg1[0x14]) {\n        *(iVar2 + 0x20) = 0;\n    }\n    if (*(iVar2 + 8) == arg1) {\n        *(iVar2 + 8) = 0;\n    }\n    fcn.140069e50(arg1[0x14]);\n    fcn.140069e50(arg1[0x15]);\n    fcn.140069e50(arg1[0x18]);\n    fcn.140069e50(arg1[0x19]);\n    fcn.140069e50(arg1[0x1a]);\n    arg1[0xb] = NULL;\n    fcn.140006580(arg1);\n    fcn.140069870(uStack24 ^ auStack616);\n    return;\n}\n",
        "token_count": 705
    },
    "14000fc0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14000fc08(ulong arg1)\n\n{\n    ulong arg1_00;\n    ulong hWnd;\n    \n    arg1_00 = fcn.14000fb64(1);\n    hWnd = fcn.140024458(arg1_00, arg1);\n    fcn.1400159c8(hWnd, arg1_00);\n    return hWnd;\n}\n",
        "token_count": 81
    },
    "140005f8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.140005f80(int64_t arg1)\n\n{\n    ulong uVar1;\n    \n    uVar1 = fcn.140017ad4();\n    *(arg1 + 0x38) = uVar1;\n    *(arg1 + 8) = 1;\n    *(arg1 + 0x10) = 0;\n    *(arg1 + 0x18) = 0;\n    *(arg1 + 0x20) = 0;\n    *(arg1 + 0x30) = 0;\n    *(arg1 + 0x28) = 1;\n    return arg1;\n}\n",
        "token_count": 141
    },
    "140005fb": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140005fb8(int64_t arg1)\n\n{\n    if (*(arg1 + 0x20) != 0) {\n        (**(*(arg1 + 0x20) + 0x38))();\n    }\n    *(arg1 + 0x38) = 0;\n    return;\n}\n",
        "token_count": 70
    },
    "140005fd": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140005fdc(void)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.140017ad4();\n    // WARNING: Could not recover jumptable at 0x000140005ff5. Too many branches\n    // WARNING: Treating indirect jump as call\n    (**(**(iVar1 + 8) + 0x138))(*(iVar1 + 8), 1);\n    return;\n}\n",
        "token_count": 96
    },
    "140005ff": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140005ffc(void)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.140017ad4();\n    // WARNING: Could not recover jumptable at 0x000140006013. Too many branches\n    // WARNING: Treating indirect jump as call\n    (**(**(iVar1 + 8) + 0x138))(*(iVar1 + 8), 0xffffffff);\n    return;\n}\n",
        "token_count": 96
    },
    "14000640": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.14000640c(void)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.140016f48();\n    return iVar1 + 0x58;\n}\n",
        "token_count": 45
    },
    "14000644": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000644c(ulong arg1, ulong arg2)\n\n{\n    int64_t *piVar1;\n    int64_t iVar2;\n    \n    iVar2 = fcn.140017b90();\n    piVar1 = *(iVar2 + 8);\n    if (piVar1 == NULL) {\n        fcn.140006420(arg1, arg2);\n    }\n    else {\n        (**(*piVar1 + 0xd8))(piVar1, arg1, arg2);\n    }\n    return;\n}\n",
        "token_count": 116
    },
    "14000649": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140006494(int64_t arg1)\n\n{\n    int64_t *piVar1;\n    int64_t iVar2;\n    \n    fcn.140024358();\n    fcn.1400246f4(0xffffffff);\n    if (arg1 == 0) {\n        iVar2 = fcn.140017b90();\n        if ((iVar2 != 0) && (*(iVar2 + 0x78) != NULL)) {\n            (**(**(iVar2 + 0x78) + 0xc0))();\n            piVar1 = *(iVar2 + 0x78);\n            if (piVar1 != NULL) {\n                (**(*piVar1 + 8))(piVar1, 1);\n            }\n            *(iVar2 + 0x78) = 0;\n        }\n    }\n    if (*0x1400de720 != 0) {\n        fcn.140023418(*0x1400de720, arg1, 0);\n    }\n    return;\n}\n",
        "token_count": 219
    },
    "14000652": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000652c(int64_t arg1)\n\n{\n    int64_t iVar1;\n    \n    *(arg1 + 0x40) = 0;\n    *(arg1 + 0x48) = 0;\n    *(arg1 + 0x58) = 0;\n    *(arg1 + 0x60) = 0;\n    iVar1 = fcn.140016f48();\n    *(iVar1 + 0x60) = 0;\n    *(iVar1 + 0x90) = 0;\n    (*_sym.imp.USER32.dll_GetCursorPos)(iVar1 + 0x88);\n    *(arg1 + 0x80) = 0;\n    *(arg1 + 0x78) = 0;\n    *(arg1 + 0x50) = 1;\n    return;\n}\n",
        "token_count": 186
    },
    "14000697": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140006978(ulong arg1)\n\n{\n    int64_t *piVar1;\n    int64_t iVar2;\n    \n    iVar2 = fcn.140017b90();\n    piVar1 = *(iVar2 + 8);\n    if (piVar1 == NULL) {\n        fcn.1400068d4(arg1);\n    }\n    else {\n        (**(*piVar1 + 0xb0))(piVar1, arg1);\n    }\n    return;\n}\n",
        "token_count": 107
    },
    "1400069a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.1400069ac(int64_t arg1)\n\n{\n    int32_t iVar1;\n    ulong uVar2;\n    int64_t iVar3;\n    \n    iVar1 = *(arg1 + 8);\n    if ((iVar1 == 0x200) || (iVar1 == 0xa0)) {\n        iVar3 = fcn.140016f48();\n        uVar2 = *(arg1 + 0x24);\n        if ((*(iVar3 + 0x88) == uVar2) && ((*(iVar3 + 0x8c) == uVar2 >> 0x20 && (*(arg1 + 8) == *(iVar3 + 0x90))))) {\n            return 0;\n        }\n        *(iVar3 + 0x88) = uVar2;\n        *(iVar3 + 0x90) = *(arg1 + 8);\n    }\n    else if ((iVar1 == 0xf) || (iVar1 == 0x118)) {\n        return 0;\n    }\n    return 1;\n}\n",
        "token_count": 231
    },
    "140006a2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140006a24(ulong arg1)\n\n{\n    int64_t *piVar1;\n    int64_t iVar2;\n    \n    iVar2 = fcn.140017b90();\n    piVar1 = *(iVar2 + 8);\n    if (piVar1 == NULL) {\n        fcn.1400069ac(arg1);\n    }\n    else {\n        (**(*piVar1 + 200))(piVar1, arg1);\n    }\n    return;\n}\n",
        "token_count": 105
    },
    "140006a5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140006a58(ulong arg1, ulong arg2)\n\n{\n    int64_t *piVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    int64_t iVar4;\n    \n    iVar4 = fcn.140017b90();\n    piVar1 = *(iVar4 + 8);\n    if (piVar1 != NULL) {\n        if (piVar1[0xf] != NULL) {\n            (*piVar1[0xf])();\n        }\n        if (arg2 != 0) {\n            (**(*piVar1 + 0xf0))();\n        }\n        *(iVar4 + 8) = 0;\n    }\n    fcn.140006494(0);\n    if (*0x1400b1798 != NULL) {\n        iVar3 = fcn.1400722d0(0x1400b1798);\n        if (iVar3 != 0) {\n            (**0x1400b1798)();\n        }\n    }\n    iVar4 = fcn.14006e9f4();\n    if (iVar4 != 0) {\n        fcn.14006ebd4(iVar4);\n    }\n    (*_sym.imp.KERNEL32.dll_ExitThread)(arg1);\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 293
    },
    "140006c2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140006c24(void)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    ulong uVar3;\n    \n    iVar2 = fcn.140016f48();\n    uVar3 = (*_sym.imp.USER32.dll_GetMessageA)(iVar2 + 0x58, 0, 0, 0);\n    if (uVar3 != 0) {\n        if (*(iVar2 + 0x60) != 0x36a) {\n            iVar1 = fcn.140006978(iVar2 + 0x58);\n            if (iVar1 == 0) {\n                (*_sym.imp.USER32.dll_TranslateMessage)(iVar2 + 0x58);\n                (*_sym.imp.USER32.dll_DispatchMessageA)(iVar2 + 0x58);\n            }\n        }\n        uVar3 = 1;\n    }\n    return uVar3;\n}\n",
        "token_count": 199
    },
    "140006c8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140006c88(void)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.140017b90();\n    if (*(iVar1 + 8) == NULL) {\n        fcn.140006c24();\n    }\n    else {\n        (**(**(iVar1 + 8) + 0xb8))();\n    }\n    return;\n}\n",
        "token_count": 82
    },
    "140007a1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140007a14(int64_t *arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int64_t arg1_00;\n    code *pcVar1;\n    int64_t arg2_00;\n    uint32_t uVar2;\n    int32_t in_stack_00000028;\n    \n    arg2_00 = arg3;\n    uVar2 = arg3 + in_stack_00000028;\n    if ((1U - *(*arg1 + -8) | *(*arg1 + -0xc) - uVar2) < 0) {\n        fcn.1400033e0(arg1, uVar2);\n    }\n    arg1_00 = *arg1;\n    fcn.140069a48(arg1_00, arg2_00, arg2, arg2_00);\n    fcn.140069a48(arg2_00 + arg1_00, in_stack_00000028, arg4, in_stack_00000028);\n    if ((-1 < uVar2) && (uVar2 <= *(*arg1 + -0xc))) {\n        *(*arg1 + -0x10) = uVar2;\n        *(uVar2 + *arg1) = 0;\n        return;\n    }\n    fcn.1400031e0(0x80070057);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 314
    },
    "140007ad": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140007ad0(int64_t *arg1, int64_t arg2, ulong arg3)\n\n{\n    uint32_t uVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint64_t uVar5;\n    \n    uVar1 = *(*arg1 + -0x10);\n    uVar5 = arg2 - *arg1;\n    if (arg3 < 0) {\n        fcn.1400031e0(0x80070057);\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    if (arg2 == 0) {\n        iVar3 = 0;\n    }\n    else {\n        iVar3 = fcn.1400699a0(arg2);\n    }\n    if (iVar3 < arg3) {\n        arg3._0_4_ = iVar3;\n    }\n    if (0x7fffffff - arg3 < uVar1) {\n        fcn.1400031e0(0x80070057);\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    uVar4 = uVar1 + arg3;\n    if ((1U - *(*arg1 + -8) | *(*arg1 + -0xc) - uVar4) < 0) {\n        fcn.1400033e0(arg1, uVar4);\n    }\n    if (uVar5 <= uVar1) {\n        arg2 = *arg1 + uVar5;\n    }\n    fcn.140069a48(uVar1 + *arg1, arg3, arg2, arg3);\n    if ((-1 < uVar4) && (uVar4 <= *(*arg1 + -0xc))) {\n        *(*arg1 + -0x10) = uVar4;\n        *(uVar4 + *arg1) = 0;\n        return;\n    }\n    fcn.1400031e0(0x80070057);\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 463
    },
    "140007c3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "execute .NET assembly via CLR host/2c9ef85a2fe94af39efaaae3fc9e6a8a"
        ],
        "decompiled_code": "\nint64_t * fcn.140007c3c(int64_t *arg1, int64_t *arg2, int64_t arg3)\n\n{\n    code *pcVar1;\n    int64_t *piVar2;\n    int64_t iVar3;\n    \n    piVar2 = NULL;\n    if (*(*arg2 + -0x18) != NULL) {\n        piVar2 = (**(**(*arg2 + -0x18) + 0x20))();\n    }\n    if (piVar2 == NULL) {\n        piVar2 = fcn.140017fc0();\n        piVar2 = (**(*piVar2 + 0x20))();\n    }\n    if (piVar2 != NULL) {\n        iVar3 = (**(*piVar2 + 0x18))(piVar2);\n        *arg1 = iVar3 + 0x18;\n        if (arg3 != 0) {\n            fcn.1400699a0(arg3);\n        }\n        fcn.140007a14(arg1, *arg2, *(*arg2 + -0x10), arg3);\n        return arg1;\n    }\n    fcn.1400031e0(0x80004005);\n    pcVar1 = swi(3);\n    piVar2 = (*pcVar1)();\n    return piVar2;\n}\n",
        "token_count": 291
    },
    "140007cf": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t * fcn.140007cfc(int64_t *arg1, int64_t arg2, int64_t *arg3)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int64_t *piVar3;\n    int64_t iVar4;\n    \n    piVar3 = NULL;\n    uVar2 = 0;\n    if (*(*arg3 + -0x18) != NULL) {\n        piVar3 = (**(**(*arg3 + -0x18) + 0x20))();\n    }\n    if (piVar3 == NULL) {\n        piVar3 = fcn.140017fc0();\n        piVar3 = (**(*piVar3 + 0x20))();\n    }\n    if (piVar3 != NULL) {\n        iVar4 = (**(*piVar3 + 0x18))(piVar3);\n        *arg1 = iVar4 + 0x18;\n        iVar4 = *arg3;\n        if (arg2 != 0) {\n            uVar2 = fcn.1400699a0(arg2);\n        }\n        fcn.140007a14(arg1, arg2, uVar2, iVar4);\n        return arg1;\n    }\n    fcn.1400031e0(0x80004005);\n    pcVar1 = swi(3);\n    piVar3 = (*pcVar1)();\n    return piVar3;\n}\n",
        "token_count": 312
    },
    "14002418": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140024184(ulong arg1)\n\n{\n    code *pcVar1;\n    \n    if (0x10 < arg1) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    // WARNING: Could not recover jumptable at 0x0001400241a9. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(arg1 * 0x28 + 0x1400de790);\n    return;\n}\n",
        "token_count": 131
    },
    "1400085c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400085c4(int64_t arg1)\n\n{\n    fcn.14001546c(*(arg1 + 0x40), 0);\n    (*_sym.imp.USER32.dll_ShowOwnedPopups)(*(*(arg1 + 0x40) + 0x40), 0);\n    fcn.140015950(*(arg1 + 0x40), 0x1400de330, 0, 0);\n    return;\n}\n",
        "token_count": 102
    },
    "1400087f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.1400087f8(int64_t arg1, int64_t *arg2)\n\n{\n    int64_t iVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    int64_t iVar4;\n    int64_t *piVar5;\n    int64_t iVar6;\n    int64_t iVar7;\n    \n    iVar4 = arg1;\n    if (arg1 != 0) goto code_r0x00014000885d;\n    iVar4 = fcn.140016f48();\n    if (*(iVar4 + 0x158) == 0) {\n        piVar5 = fcn.1400063f8();\n        if (piVar5 == NULL) {\n            iVar4 = 0;\n        }\n        else {\n            iVar4 = (**(*piVar5 + 0xe8))(piVar5);\n        }\n        if (iVar4 == 0) {\n            iVar4 = 0;\n            iVar6 = iVar4;\n            iVar7 = iVar4;\n            goto joined_r0x00014000888b;\n        }\n        iVar4 = *(iVar4 + 0x40);\n    }\n    else {\n        iVar4 = *(*(iVar4 + 0x158) + 0x40);\n    }\n    for (; iVar6 = iVar4,  iVar7 = iVar4,  iVar4 != 0; iVar4 = (*_sym.imp.USER32.dll_GetParent)(iVar4)) {\ncode_r0x00014000885d:\n        uVar2 = (*_sym.imp.USER32.dll_GetWindowLongA)(iVar4, 0xfffffff0);\n        iVar6 = iVar4;\n        iVar7 = iVar4;\n        if ((uVar2 >> 0x1e & 1) == 0) break;\n    }\njoined_r0x00014000888b:\n    while (iVar1 = iVar6,  iVar1 != 0) {\n        iVar6 = (*_sym.imp.USER32.dll_GetParent)(iVar1);\n        iVar4 = iVar1;\n    }\n    if ((arg1 == 0) && (iVar7 != 0)) {\n        iVar7 = (*_sym.imp.USER32.dll_GetLastActivePopup)(iVar7);\n    }\n    if (arg2 != NULL) {\n        if (((iVar4 == 0) || (iVar3 = (*_sym.imp.USER32.dll_IsWindowEnabled)(iVar4),  iVar3 == 0)) || (iVar4 == iVar7))\n        {\n            *arg2 = 0;\n        }\n        else {\n            *arg2 = iVar4;\n            (*_sym.imp.USER32.dll_EnableWindow)(iVar4, 0);\n        }\n    }\n    return iVar7;\n}\n",
        "token_count": 584
    },
    "140008a9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140008a94(ulong arg1, uint64_t arg2, uint64_t arg3)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.140017ad4();\n    if (*(iVar1 + 8) == NULL) {\n        fcn.140008904(0, arg1, arg2 & 0xffffffff, arg3 & 0xffffffff);\n    }\n    else {\n        (**(**(iVar1 + 8) + 0x130))();\n    }\n    return;\n}\n",
        "token_count": 115
    },
    "140008bb": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.140008bb0(ulong arg1, ulong arg2)\n\n{\n    int32_t iVar1;\n    ulong arg2_00;\n    int64_t *piVar2;\n    int64_t iVar3;\n    \n    if (arg2 == 0x110) {\n        arg2_00 = fcn.14000fc4c(arg1);\n        piVar2 = fcn.140020bb8(0x1400a1c08, arg2_00);\n        if (piVar2 == NULL) {\n            iVar3 = 1;\n        }\n        else {\n            iVar1 = (**(*piVar2 + 0x2a0))(piVar2);\n            iVar3 = iVar1;\n        }\n    }\n    else {\n        iVar3 = 0;\n    }\n    return iVar3;\n}\n",
        "token_count": 180
    },
    "140008c6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140008c68(ulong arg1)\n\n{\n    int32_t iVar1;\n    uchar auStack184 [32];\n    ulong uStack152;\n    uchar auStack136 [112];\n    uint64_t uStack24;\n    \n    uStack152 = 0xfffffffffffffffe;\n    uStack24 = *0x1400d96f0 ^ auStack184;\n    fcn.14001bf28(auStack136, arg1);\n    iVar1 = fcn.140014ff4(arg1);\n    if (iVar1 == 0) {\n        fcn.14000fb10(arg1);\n        fcn.14001bf88(auStack136);\n    }\n    else {\n        fcn.14001bf88(auStack136);\n    }\n    fcn.140069870(uStack24 ^ auStack184);\n    return;\n}\n",
        "token_count": 186
    },
    "140008e3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140008e30(int64_t *arg1, ulong arg2)\n\n{\n    if ((*(arg1 + 0xf) & 0x18) != 0) {\n        (**(*arg1 + 0x118))(arg1, arg2 & 0xffffffff);\n    }\n    // WARNING: Could not recover jumptable at 0x000140008e62. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.USER32.dll_EndDialog)(arg1[8], arg2);\n    return;\n}\n",
        "token_count": 124
    },
    "1400090f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.1400090f0(int64_t arg1)\n\n{\n    int64_t iVar1;\n    ulong uVar2;\n    \n    iVar1 = fcn.140017ad4();\n    uVar2 = 0;\n    if (*(iVar1 + 8) != 0) {\n        fcn.1400088fc(*(iVar1 + 8), 0);\n    }\n    if (*(arg1 + 0xd0) != 0) {\n        uVar2 = *(*(arg1 + 0xd0) + 0x40);\n    }\n    uVar2 = fcn.1400087f8(uVar2, arg1 + 0xd8);\n    fcn.140012ea4(arg1);\n    return uVar2;\n}\n",
        "token_count": 167
    },
    "14000914": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000914c(int64_t arg1)\n\n{\n    int64_t iVar1;\n    int32_t iVar2;\n    \n    fcn.14000fd24();\n    fcn.14000fcd8(arg1);\n    iVar2 = (*_sym.imp.USER32.dll_IsWindow)(*(arg1 + 0xd8));\n    if (iVar2 != 0) {\n        (*_sym.imp.USER32.dll_EnableWindow)(*(arg1 + 0xd8), 1);\n    }\n    *(arg1 + 0xd8) = 0;\n    iVar1 = fcn.140017ad4();\n    if (*(iVar1 + 8) != 0) {\n        fcn.1400088fc(*(iVar1 + 8), 1);\n    }\n    return;\n}\n",
        "token_count": 174
    },
    "14000fb1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000fb10(int64_t *arg1)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    \n    iVar2 = fcn.1400234a0(0x1400de580, 0x140006808);\n    if (iVar2 == 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    // WARNING: Could not recover jumptable at 0x00014000fb5a. Too many branches\n    // WARNING: Treating indirect jump as call\n    (**(*arg1 + 0x230))(arg1, *(iVar2 + 0xa0), *(iVar2 + 0xa8), *(iVar2 + 0xb0));\n    return;\n}\n",
        "token_count": 179
    },
    "14000932": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140009324(int64_t arg1)\n\n{\n    int32_t iVar1;\n    int64_t hWnd;\n    \n    if (*(arg1 + 200) == 0) {\n        iVar1 = fcn.140014ee0(arg1, *(arg1 + 0xb0));\n    }\n    else {\n        iVar1 = fcn.1400148f8(arg1, *(arg1 + 200));\n    }\n    if ((iVar1 != 0) && (iVar1 = fcn.14000f16c(arg1, 0),  iVar1 != 0)) {\n        hWnd = fcn.1400150a4(arg1, 0xe146);\n        if (hWnd != 0) {\n            iVar1 = fcn.14000929c();\n            fcn.14001546c(hWnd, -(iVar1 != 0) & 5);\n        }\n        return 1;\n    }\n    fcn.140008e30(arg1, 0xffffffff);\n    return 0;\n}\n",
        "token_count": 223
    },
    "1400094f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint64_t fcn.1400094f0(int64_t *arg1, int64_t arg2, int64_t arg3, int64_t arg4)\n\n{\n    int32_t *piVar1;\n    int64_t *piVar2;\n    code *pcVar3;\n    int32_t iVar4;\n    int64_t iVar5;\n    int64_t *piVar6;\n    uint64_t uVar7;\n    int64_t iVar8;\n    ushort auStackX32 [4];\n    int64_t iStack128;\n    int64_t iStack120;\n    int64_t *piStack112;\n    uchar auStack104 [24];\n    ulong uStack80;\n    uchar auStack72 [32];\n    \n    uStack80 = 0xfffffffffffffffe;\n    iVar8 = 0;\n    if (arg4 == 0) {\n        iVar5 = fcn.140017ad4();\n        arg4 = *(iVar5 + 0x18);\n    }\n    iVar5 = fcn.140017ad4();\n    piVar2 = *(iVar5 + 0x68);\n    iStack120 = 0;\n    piStack112 = piVar2;\n    fcn.140014ae0(0x10);\n    fcn.140014ae0(0x3c000);\n    if (piVar2 != NULL) {\n        iVar4 = (**(*arg1 + 0x268))(arg1, auStack72);\n        if (iVar4 == 0) {\n            return 0;\n        }\n        arg2 = (**(*piVar2 + 0x28))(piVar2, auStack72, arg2);\n    }\n    if (arg2 == 0) {\n        uVar7 = 0;\n    }\n    else {\n        piVar6 = fcn.140017fc0();\n        if (piVar6 == NULL) {\n            fcn.1400031e0(0x80004005);\n            pcVar3 = swi(3);\n            uVar7 = (*pcVar3)();\n            return uVar7;\n        }\n        iStack128 = (**(*piVar6 + 0x18))(piVar6);\n        iStack128 = iStack128 + 0x18;\n        auStackX32[0] = 0;\n        iVar4 = fcn.14002a48c(arg2, &iStack128, auStackX32);\n        iVar5 = iVar8;\n        if (iVar4 == 0) {\n            fcn.14002a3d0(auStack104, arg2);\n            fcn.14002a2d4(auStack104);\n            iVar5 = fcn.140029b4c(auStack104);\n            fcn.140029b34(auStack104);\n            if (iVar5 != 0) {\n                arg2 = (*_sym.imp.KERNEL32.dll_GlobalLock)(iVar5);\n            }\n        }\n        *(arg1 + 0x11) = 0xffffffff;\n        *(arg1 + 0xf) = *(arg1 + 0xf) | 0x10;\n        fcn.140012ea4(arg1);\n        if (arg3 != 0) {\n            iVar8 = *(arg3 + 0x40);\n        }\n        iVar8 = (*_sym.imp.USER32.dll_CreateDialogIndirectParamA)(arg4, arg2, iVar8, fcn.140008bb0, 0);\n        LOCK();\n        piVar1 = iStack128 + -8;\n        iVar4 = *piVar1;\n        *piVar1 = *piVar1 + -1;\n        iStack120 = iVar8;\n        if (iVar4 + -1 < 1) {\n            (**(**(iStack128 + -0x18) + 8))();\n        }\n        if ((piVar2 != NULL) && (iVar8 != 0)) {\n            (**(*piVar2 + 0x30))(piVar2, auStack72);\n            (**(*arg1 + 0x268))(arg1, 0);\n        }\n        iVar4 = fcn.14000fd24();\n        if (iVar4 == 0) {\n            (**(*arg1 + 0x238))(arg1);\n        }\n        if ((iVar8 != 0) && ((*(arg1 + 0xf) & 0x10) == 0)) {\n            (*_sym.imp.USER32.dll_DestroyWindow)(iVar8);\n            iVar8 = 0;\n        }\n        if (iVar5 != 0) {\n            (*_sym.imp.KERNEL32.dll_GlobalUnlock)(iVar5);\n            (*_sym.imp.KERNEL32.dll_GlobalFree)(iVar5);\n        }\n        uVar7 = iVar8 != 0;\n    }\n    return uVar7;\n}\n",
        "token_count": 1035
    },
    "1400099f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint64_t fcn.1400099f8(int64_t *arg1, int64_t arg2, int64_t arg3, int64_t arg4)\n\n{\n    int32_t *piVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    int64_t iVar4;\n    int64_t *piVar5;\n    uint64_t uVar6;\n    int64_t iVar7;\n    int64_t *piVar8;\n    ushort uStackX32;\n    int64_t in_stack_00000028;\n    int64_t iStack128;\n    int64_t iStack120;\n    int64_t *piStack112;\n    uchar auStack104 [24];\n    ulong uStack80;\n    uchar auStack72 [24];\n    ulong uStack48;\n    \n    if (arg3 == 0) {\n        uStack48 = 0x140009a1d;\n        piVar8 = fcn.1400063f8();\n        if (piVar8 == NULL) {\n            arg3 = 0;\n        }\n        else {\n            uStack48 = 0x140009a2f;\n            arg3 = (**(*piVar8 + 0xe8))(piVar8);\n        }\n    }\n    arg1[0x19] = arg4;\n    uStack80 = 0xfffffffffffffffe;\n    iVar7 = 0;\n    if (in_stack_00000028 == 0) {\n        iVar4 = fcn.140017ad4();\n        in_stack_00000028 = *(iVar4 + 0x18);\n    }\n    iVar4 = fcn.140017ad4();\n    piVar8 = *(iVar4 + 0x68);\n    iStack120 = 0;\n    piStack112 = piVar8;\n    fcn.140014ae0(0x10);\n    fcn.140014ae0(0x3c000);\n    if (piVar8 != NULL) {\n        iVar3 = (**(*arg1 + 0x268))(arg1, &stack0xffffffffffffffb8);\n        if (iVar3 == 0) {\n            return 0;\n        }\n        arg2 = (**(*piVar8 + 0x28))(piVar8, &stack0xffffffffffffffb8, arg2);\n    }\n    if (arg2 == 0) {\n        uVar6 = 0;\n    }\n    else {\n        piVar5 = fcn.140017fc0();\n        if (piVar5 == NULL) {\n            fcn.1400031e0(0x80004005);\n            pcVar2 = swi(3);\n            uVar6 = (*pcVar2)();\n            return uVar6;\n        }\n        iStack128 = (**(*piVar5 + 0x18))(piVar5);\n        iStack128 = iStack128 + 0x18;\n        uStackX32 = 0;\n        iVar3 = fcn.14002a48c(arg2, &stack0xffffffffffffff80, &stack0x00000020);\n        iVar4 = iVar7;\n        if (iVar3 == 0) {\n            fcn.14002a3d0(&stack0xffffffffffffff98, arg2);\n            fcn.14002a2d4(&stack0xffffffffffffff98);\n            iVar4 = fcn.140029b4c(&stack0xffffffffffffff98);\n            fcn.140029b34(&stack0xffffffffffffff98);\n            if (iVar4 != 0) {\n                arg2 = (*_sym.imp.KERNEL32.dll_GlobalLock)(iVar4);\n            }\n        }\n        *(arg1 + 0x11) = 0xffffffff;\n        *(arg1 + 0xf) = *(arg1 + 0xf) | 0x10;\n        fcn.140012ea4(arg1);\n        if (arg3 != 0) {\n            iVar7 = *(arg3 + 0x40);\n        }\n        iVar7 = (*_sym.imp.USER32.dll_CreateDialogIndirectParamA)(in_stack_00000028, arg2, iVar7, fcn.140008bb0, 0);\n        LOCK();\n        piVar1 = iStack128 + -8;\n        iVar3 = *piVar1;\n        *piVar1 = *piVar1 + -1;\n        iStack120 = iVar7;\n        if (iVar3 + -1 < 1) {\n            (**(**(iStack128 + -0x18) + 8))();\n        }\n        if ((piVar8 != NULL) && (iVar7 != 0)) {\n            (**(*piVar8 + 0x30))(piVar8, &stack0xffffffffffffffb8);\n            (**(*arg1 + 0x268))(arg1, 0);\n        }\n        iVar3 = fcn.14000fd24();\n        if (iVar3 == 0) {\n            (**(*arg1 + 0x238))(arg1);\n        }\n        if ((iVar7 != 0) && ((*(arg1 + 0xf) & 0x10) == 0)) {\n            (*_sym.imp.USER32.dll_DestroyWindow)(iVar7);\n            iVar7 = 0;\n        }\n        if (iVar4 != 0) {\n            (*_sym.imp.KERNEL32.dll_GlobalUnlock)(iVar4);\n            (*_sym.imp.KERNEL32.dll_GlobalFree)(iVar4);\n        }\n        uVar6 = iVar7 != 0;\n    }\n    return uVar6;\n}\n",
        "token_count": 1193
    },
    "140009d4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint64_t fcn.140009d44(int64_t arg1, ulong arg2)\n\n{\n    uint16_t uVar1;\n    uint16_t *puVar2;\n    \n    if (arg2 == 0) {\n        puVar2 = arg1 + 0x12;\n    }\n    else {\n        puVar2 = arg1 + 0x18;\n    }\n    if (*puVar2 == 0xffff) {\n        puVar2 = puVar2 + 2;\n    }\n    else {\n        do {\n            uVar1 = *puVar2;\n            puVar2 = puVar2 + 1;\n        } while (uVar1 != 0);\n    }\n    if (*puVar2 == 0xffff) {\n        puVar2 = puVar2 + 2;\n    }\n    else {\n        do {\n            uVar1 = *puVar2;\n            puVar2 = puVar2 + 1;\n        } while (uVar1 != 0);\n    }\n    uVar1 = *puVar2;\n    if ((uVar1 != 0) && (arg2 == 0)) {\n        uVar1 = uVar1 - 2;\n    }\n    return uVar1 + 5 + puVar2 & 0xfffffffffffffffc;\n}\n",
        "token_count": 280
    },
    "14000a2a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000a2a0(int64_t arg1)\n\n{\n    ulong *puVar1;\n    \n    for (puVar1 = *(arg1 + 8); puVar1 != NULL; puVar1 = *puVar1) {\n    }\n    *(arg1 + 0x18) = 0;\n    *(arg1 + 0x20) = 0;\n    *(arg1 + 0x10) = 0;\n    *(arg1 + 8) = 0;\n    fcn.14002aadc(*(arg1 + 0x28));\n    *(arg1 + 0x28) = 0;\n    return;\n}\n",
        "token_count": 147
    },
    "14000a4d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.14000a4dc(int64_t arg1, ulong arg2, ulong arg3)\n\n{\n    int64_t *piVar1;\n    int64_t iVar2;\n    ulong *puVar3;\n    \n    puVar3 = *(arg1 + 0x10);\n    iVar2 = 0;\n    do {\n        if (puVar3 == NULL) {\n            return iVar2;\n        }\n        piVar1 = puVar3[2];\n        puVar3 = *puVar3;\n    } while ((piVar1 == NULL) || (iVar2 = (**(*piVar1 + 8))(piVar1, arg2, arg3),  iVar2 == 0));\n    return iVar2;\n}\n",
        "token_count": 160
    },
    "14000a68": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000a68c(int64_t arg1, ulong arg2)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.14000a2dc(arg1, 0, *(arg1 + 8));\n    *(iVar1 + 0x10) = arg2;\n    if (*(arg1 + 8) == 0) {\n        *(arg1 + 0x10) = iVar1;\n    }\n    else {\n        *(*(arg1 + 8) + 8) = iVar1;\n    }\n    *(arg1 + 8) = iVar1;\n    return;\n}\n",
        "token_count": 136
    },
    "14000a6d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong * fcn.14000a6d0(int64_t arg1, int64_t arg2, ulong *arg3)\n\n{\n    code *pcVar1;\n    ulong *puVar2;\n    \n    if (arg3 == NULL) {\n        arg3 = *(arg1 + 8);\n    }\n    else {\n        arg3 = *arg3;\n    }\n    while( true ) {\n        if (arg3 == NULL) {\n            return NULL;\n        }\n        if (arg3 + 2 == NULL) break;\n        if (arg3[2] == arg2) {\n            return arg3;\n        }\n        arg3 = *arg3;\n    }\n    fcn.140020780();\n    pcVar1 = swi(3);\n    puVar2 = (*pcVar1)();\n    return puVar2;\n}\n",
        "token_count": 179
    },
    "14000a77": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000a774(int64_t arg1, ulong arg2)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.14000a2dc(arg1, *(arg1 + 0x10), 0);\n    *(iVar1 + 0x10) = arg2;\n    if (*(arg1 + 0x10) == NULL) {\n        *(arg1 + 8) = iVar1;\n    }\n    else {\n        **(arg1 + 0x10) = iVar1;\n    }\n    *(arg1 + 0x10) = iVar1;\n    return;\n}\n",
        "token_count": 136
    },
    "14000a7b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000a7b8(ulong noname_0, int64_t arg2, ulong pv)\n\n{\n    uint16_t uVar1;\n    int64_t *piVar2;\n    int64_t iVar3;\n    code *pcVar4;\n    int64_t iVar5;\n    int64_t iVar6;\n    ulong *puVar7;\n    \n    if (*(arg2 + 0x98) != 0) {\n        puVar7 = *(*(arg2 + 0x98) + 0x88);\n        while (puVar7 != NULL) {\n            if (puVar7 == NULL) {\n                fcn.140020780();\n                pcVar4 = swi(3);\n                (*pcVar4)();\n                return;\n            }\n            iVar3 = puVar7[2];\n            puVar7 = *puVar7;\n            if (*(iVar3 + 8) != 0) {\n                for (iVar6 = *(*(iVar3 + 8) + 0xe0); iVar6 != 0; iVar6 = fcn.14002e6a4(iVar6)) {\n                    fcn.14002e6a0(iVar6, *(iVar3 + 8));\n                    if (*(iVar6 + 8) != 0) {\n                        iVar5 = fcn.1400150a4(arg2, *(iVar6 + 8));\n                        fcn.1400321c0(iVar6, *(iVar5 + 0xa0));\n                    }\n                }\n                uVar1 = *(*(iVar3 + 8) + 0xe8);\n                if (uVar1 != 0) {\n                    iVar6 = fcn.1400150a4(arg2, uVar1);\n                    (**(**(iVar6 + 0xa0) + 0x168))();\n                    *(*(iVar3 + 8) + 0xe8) = *(iVar6 + 0xa0);\n                    piVar2 = *(*(iVar6 + 0xa0) + 0xd8);\n                    (**(*piVar2 + 0x10))(piVar2, *(iVar3 + 8), 1);\n                }\n            }\n        }\n        puVar7 = *(*(arg2 + 0x98) + 0x88);\n        while (puVar7 != NULL) {\n            if (puVar7 == NULL) {\n                fcn.140020780();\n                pcVar4 = swi(3);\n                (*pcVar4)();\n                return;\n            }\n            piVar2 = puVar7 + 2;\n            puVar7 = *puVar7;\n            iVar3 = *(*piVar2 + 8);\n            if ((iVar3 != 0) && (*(iVar3 + 0xd8) != 0)) {\n                (**(**(iVar3 + 0xd8) + 0x18))();\n            }\n        }\n    }\n    return;\n}\n",
        "token_count": 630
    },
    "14000a9b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14000a9b0(int64_t arg1, int64_t arg2)\n\n{\n    code *pcVar1;\n    ulong uVar2;\n    int64_t iVar3;\n    \n    if (arg2 == 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        uVar2 = (*pcVar1)();\n        return uVar2;\n    }\n    iVar3 = fcn.14000a6d0(arg1 + 8, arg2, 0);\n    if (iVar3 == 0) {\n        fcn.14000a68c(arg1 + 8, arg2);\n    }\n    return 0;\n}\n",
        "token_count": 152
    },
    "14000aa3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000aa38(int64_t arg1, int64_t *arg2)\n\n{\n    int64_t *piVar1;\n    \n    if (arg2 == *(arg1 + 8)) {\n        *(arg1 + 8) = *arg2;\n    }\n    else {\n        *arg2[1] = *arg2;\n    }\n    if (arg2 == *(arg1 + 0x10)) {\n        *(arg1 + 0x10) = arg2[1];\n    }\n    else {\n        *(*arg2 + 8) = arg2[1];\n    }\n    *arg2 = *(arg1 + 0x20);\n    piVar1 = arg1 + 0x18;\n    *piVar1 = *piVar1 + -1;\n    *(arg1 + 0x20) = arg2;\n    if (*piVar1 == 0) {\n        fcn.14000a2a0(arg1);\n    }\n    return;\n}\n",
        "token_count": 217
    },
    "14000ac7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000ac78(int64_t arg1)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    \n    if (arg1 == 0) {\n        arg1 = fcn.140022cd8(0x1400db218, 0x14000a9f4);\n        if (arg1 == 0) {\n            fcn.140020780();\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n    }\n    iVar2 = fcn.140017ad4();\n    *(iVar2 + 0x68) = arg1;\n    return;\n}\n",
        "token_count": 141
    },
    "14000b58": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nbool fcn.14000b584(void)\n\n{\n    int64_t iVar1;\n    bool bVar2;\n    \n    bVar2 = false;\n    if (*0x1400de268 == 0) {\n        *0x1400de26c = fcn.14000b524();\n        iVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(\"USER32\");\n        if (((((iVar1 == 0) ||\n              (*0x1400de230 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar1, 0x1400a23d8),  *0x1400de230 == 0)) ||\n             (*0x1400de238 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar1, \"MonitorFromWindow\"),  *0x1400de238 == 0))\n            || ((*0x1400de240 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar1, \"MonitorFromRect\"),  *0x1400de240 == 0 ||\n                (*0x1400de248 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar1, \"MonitorFromPoint\"),  *0x1400de248 == 0))\n               )) || ((*0x1400de258 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar1, \"EnumDisplayMonitors\"), \n                      *0x1400de258 == 0 ||\n                      ((*0x1400de250 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar1, \"GetMonitorInfoA\"), \n                       *0x1400de250 == 0 ||\n                       (*0x1400de260 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar1, \"EnumDisplayDevicesA\"), \n                       *0x1400de260 == 0)))))) {\n            *0x1400de230 = 0;\n            *0x1400de238 = 0;\n            *0x1400de240 = 0;\n            *0x1400de248 = 0;\n            *0x1400de250 = 0;\n            *0x1400de258 = 0;\n            *0x1400de260 = 0;\n        }\n        else {\n            bVar2 = true;\n        }\n        *0x1400de268 = 1;\n        return bVar2;\n    }\n    return *0x1400de250 != 0;\n}\n",
        "token_count": 525
    },
    "14000b81": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14000b818(ulong arg1, uint64_t arg2)\n\n{\n    int32_t iVar1;\n    ulong uVar2;\n    uchar auStack28 [20];\n    \n    iVar1 = fcn.14000b584();\n    if (iVar1 == 0) {\n        if ((arg2 & 3) == 0) {\n            iVar1 = (*_sym.imp.USER32.dll_IsIconic)(arg1);\n            if (iVar1 == 0) {\n                iVar1 = (*_sym.imp.USER32.dll_GetWindowRect)(arg1);\n            }\n            else {\n                iVar1 = (*_sym.imp.USER32.dll_GetWindowPlacement)();\n            }\n            if (iVar1 == 0) {\n                uVar2 = 0;\n            }\n            else {\n                uVar2 = fcn.14000b7ac(auStack28, arg2 & 0xffffffff);\n            }\n        }\n        else {\n            uVar2 = 0x12340042;\n        }\n    }\n    else {\n        uVar2 = (**0x1400de238)(arg1, arg2 & 0xffffffff);\n    }\n    return uVar2;\n}\n",
        "token_count": 253
    },
    "14000c42": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14000c428(ulong noname_0, ulong *arg2, ulong arg3)\n\n{\n    bool bVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint *puVar4;\n    ulong *puVar5;\n    int64_t iVar6;\n    uint *in_stack_00000028;\n    \n    uVar3 = 0;\n    if (arg3 != 0) {\n        do {\n            bVar1 = false;\n            puVar4 = 0x1400d7510;\n            puVar5 = 0x1400d7470;\n            iVar6 = 0x13;\n            do {\n                iVar2 = (*_sym.imp.KERNEL32.dll_lstrcmpW)(*arg2, *puVar5);\n                if (iVar2 == 0) {\n                    bVar1 = true;\n                    *in_stack_00000028 = *puVar4;\n                }\n                puVar5 = puVar5 + 1;\n                puVar4 = puVar4 + 1;\n                iVar6 = iVar6 + -1;\n            } while (iVar6 != 0);\n            if (!bVar1) {\n                return 0x80020006;\n            }\n            uVar3 = uVar3 + 1;\n            arg2 = arg2 + 1;\n            in_stack_00000028 = in_stack_00000028 + 1;\n        } while (uVar3 < arg3);\n    }\n    return 0;\n}\n",
        "token_count": 326
    },
    "14000c57": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14000c574(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    uint32_t uVar1;\n    ulong uVar2;\n    uint32_t in_stack_00000028;\n    \n    uVar1 = (*_sym.imp.USER32.dll_GetWindowLongA)();\n    arg4._0_4_ = ~arg3 & uVar1 | arg4;\n    if (uVar1 == arg4) {\n        uVar2 = 0;\n    }\n    else {\n        (*_sym.imp.USER32.dll_SetWindowLongA)(arg1, arg2, arg4);\n        if (in_stack_00000028 != 0) {\n            (*_sym.imp.USER32.dll_SetWindowPos)(arg1, 0, 0, 0, 0, 0, in_stack_00000028 | 0x17);\n        }\n        uVar2 = 1;\n    }\n    return uVar2;\n}\n",
        "token_count": 211
    },
    "14000c60": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000c600(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    fcn.14000c574(arg1, 0xfffffff0, arg2, arg3);\n    return;\n}\n",
        "token_count": 54
    },
    "14000c62": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000c620(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    fcn.14000c574(arg1, 0xffffffec, arg2, arg3);\n    return;\n}\n",
        "token_count": 53
    },
    "14001976": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.140019760(int64_t arg1)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    ulong arg1_00;\n    int64_t iVar3;\n    int64_t *piVar4;\n    \n    iVar1 = fcn.1400196bc(1);\n    if (arg1 == 0) {\n        iVar2 = 0;\n    }\n    else {\n        iVar2 = fcn.14003a45c(iVar1 + 0x30, arg1);\n        if (iVar2 == 0) {\n            iVar2 = fcn.14003a45c(iVar1 + 0x68, arg1);\n            if (iVar2 == 0) {\n                arg1_00 = fcn.140003684(0x140022808);\n                iVar2 = fcn.14004c040(iVar1 + 8);\n                iVar3 = iVar2;\n                if (iVar2 == 0) {\n                    iVar3 = fcn.140020738();\n                }\n                (**(iVar1 + 0x20))(iVar3);\n                piVar4 = fcn.14003a6a4(iVar1 + 0x68, arg1);\n                *piVar4 = iVar2;\n                fcn.140003684(arg1_00);\n                iVar3 = *(iVar1 + 0xa8);\n                *(iVar2 + iVar3) = arg1;\n                if (*(iVar1 + 0xb0) == 2) {\n                    *(iVar2 + 8 + iVar3) = arg1;\n                }\n            }\n            else {\n                iVar3 = *(iVar1 + 0xa8);\n                *(iVar2 + iVar3) = arg1;\n                if (*(iVar1 + 0xb0) == 2) {\n                    *(iVar2 + 8 + iVar3) = arg1;\n                }\n            }\n        }\n    }\n    return iVar2;\n}\n",
        "token_count": 420
    },
    "14000c71": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14000c71c(ulong arg1, ulong arg2)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.140017ad4();\n    if (*(iVar1 + 0x60) != NULL) {\n        (**(iVar1 + 0x60))(arg2, arg1);\n    }\n    return 0;\n}\n",
        "token_count": 80
    },
    "14000c75": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint64_t fcn.14000c750(int64_t arg1, ulong arg2, uint32_t *arg3)\n\n{\n    ulong uVar1;\n    uint32_t uVar2;\n    int64_t iVar3;\n    uint64_t uVar4;\n    uint64_t uVar5;\n    \n    iVar3 = fcn.140022a6c(*(arg1 + 0x40), arg2);\n    if (iVar3 == 0) {\n        uVar5 = 0xffffffffffffffff;\n    }\n    else {\n        uVar2 = (*_sym.imp.USER32.dll_GetDlgCtrlID)(iVar3);\n        uVar5 = uVar2;\n        if ((arg3 != NULL) && (0x3f < *arg3)) {\n            uVar1 = *(arg1 + 0x40);\n            arg3[1] = arg3[1] | 1;\n            *(arg3 + 0xc) = 0xffffffffffffffff;\n            *(arg3 + 2) = uVar1;\n            *(arg3 + 4) = iVar3;\n            uVar4 = (*_sym.imp.USER32.dll_SendMessageA)(iVar3, 0x87, 0, 0);\n            if ((uVar4 >> 0xd & 1) == 0) {\n                arg3[1] = arg3[1] | 0x80000002;\n            }\n        }\n    }\n    return uVar5;\n}\n",
        "token_count": 317
    },
    "14000c91": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** fcn.14000c918(code **arg1)\n\n{\n    fcn.140005e08(arg1);\n    *(arg1 + 8) = 1;\n    *arg1 = vtable.CTestCmdUI.0;\n    return arg1;\n}\n",
        "token_count": 59
    },
    "14000cc6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "execute .NET assembly via CLR host/2c9ef85a2fe94af39efaaae3fc9e6a8a"
        ],
        "decompiled_code": "\nvoid fcn.14000cc64(int64_t arg1, ulong *arg2)\n\n{\n    ulong uStack40;\n    ulong uStack32;\n    ulong uStack24;\n    \n    uStack40 = *arg2;\n    uStack32 = arg2[1];\n    uStack24 = arg2[2];\n    (**(**(arg1 + 0x50) + 0x50))(*(arg1 + 0x50), &uStack40);\n    return;\n}\n",
        "token_count": 105
    },
    "14000ce9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000ce9c(int64_t arg1)\n\n{\n    (**(**(arg1 + 0x50) + 0xb0))();\n    return;\n}\n",
        "token_count": 40
    },
    "14000d0a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14000d0a4(ulong noname_0, int64_t arg2)\n\n{\n    uint32_t uVar1;\n    ulong uVar2;\n    \n    uVar1 = *(arg2 + 8);\n    if (((uVar1 < 0x100) || (0x109 < uVar1)) && ((uVar1 < 0x200 || (0x209 < uVar1)))) {\n        uVar2 = 0;\n    }\n    else {\n        uVar2 = fcn.140015240(noname_0, arg2);\n    }\n    return uVar2;\n}\n",
        "token_count": 136
    },
    "14000d82": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** fcn.14000d828(code **arg1)\n\n{\n    fcn.140005f80(arg1);\n    *arg1 = vtable.CWnd.0;\n    arg1[0xc] = vtable.CWnd::XAccessible.0;\n    arg1[0xd] = vtable.CWnd::XAccessibleServer.0;\n    arg1[8] = NULL;\n    *(arg1 + 9) = 0;\n    arg1[0xb] = NULL;\n    arg1[10] = NULL;\n    arg1[0xe] = NULL;\n    *(arg1 + 0xf) = 0;\n    arg1[0x10] = NULL;\n    *(arg1 + 0x11) = 0;\n    arg1[0x12] = NULL;\n    arg1[0x13] = NULL;\n    arg1[0x14] = NULL;\n    return arg1;\n}\n",
        "token_count": 203
    },
    "14000d89": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000d89c(int64_t hWnd, ulong lpRect, uint *arg3)\n\n{\n    uint uVar1;\n    \n    (*_sym.imp.USER32.dll_GetWindowRect)(*(hWnd + 0x40));\n    uVar1 = fcn.140015284(hWnd);\n    *arg3 = uVar1;\n    return;\n}\n",
        "token_count": 79
    },
    "14000da6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000da6c(ulong arg1)\n\n{\n    int64_t iVar1;\n    int64_t *piVar2;\n    int16_t iVar3;\n    int64_t iVar4;\n    \n    iVar4 = fcn.140017b90();\n    if ((*(iVar4 + 0x78) != 0) && (iVar1 = *(*(iVar4 + 0x78) + 0x40),  iVar1 != 0)) {\n        (*_sym.imp.USER32.dll_SendMessageA)(iVar1, 0x401, 0, 0);\n    }\n    piVar2 = *(iVar4 + 0xa0);\n    if ((arg1 != 0) && (piVar2 != NULL)) {\n        iVar3 = (*_sym.imp.USER32.dll_GetKeyState)(1);\n        if (-1 < iVar3) {\n            (**(*piVar2 + 0x2f8))(piVar2, 0xffffffffffffffff);\n        }\n    }\n    return;\n}\n",
        "token_count": 221
    },
    "14000dae": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000daec(int64_t arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    ulong uVar1;\n    ulong uVar2;\n    int64_t iVar3;\n    int64_t in_stack_00000028;\n    ulong in_stack_00000030;\n    \n    iVar3 = fcn.140016f48();\n    uVar1 = *(iVar3 + 200);\n    uVar2 = *(iVar3 + 0xd0);\n    if (in_stack_00000028 != 0) {\n        in_stack_00000028 = *(in_stack_00000028 + 0x40);\n    }\n    *(iVar3 + 200) = in_stack_00000028;\n    *(iVar3 + 0xd0) = *(arg1 + 8);\n    (*_sym.imp.USER32.dll_TrackPopupMenu)(*(arg1 + 8), arg2, arg3, arg4, 0, in_stack_00000028, in_stack_00000030);\n    *(iVar3 + 200) = uVar1;\n    *(iVar3 + 0xd0) = uVar2;\n    return;\n}\n",
        "token_count": 254
    },
    "14000dc5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.14000dc5c(int64_t hMenu, uint64_t arg2)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int64_t iVar4;\n    ulong arg1;\n    int32_t iVar5;\n    \n    arg2 = arg2 & 0xffffffff;\n    if (hMenu == 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        iVar4 = (*pcVar1)();\n        return iVar4;\n    }\n    iVar2 = (*_sym.imp.USER32.dll_GetMenuItemCount)(*(hMenu + 8));\n    iVar5 = 0;\n    if (0 < iVar2) {\n        do {\n            arg1 = (*_sym.imp.USER32.dll_GetSubMenu)(*(hMenu + 8));\n            iVar4 = fcn.140019760(arg1);\n            if (iVar4 == 0) {\n                iVar3 = (*_sym.imp.USER32.dll_GetMenuItemID)(*(hMenu + 8));\n                if (iVar3 == arg2) goto code_r0x00014000dcef;\n            }\n            else {\n                if (*(iVar4 + 8) == arg2) {\ncode_r0x00014000dcef:\n                    iVar4 = fcn.140019784(*(hMenu + 8));\n                    return iVar4;\n                }\n                iVar4 = fcn.14000dc5c(iVar4, arg2);\n                if (iVar4 != 0) {\n                    return iVar4;\n                }\n            }\n            iVar5 = iVar5 + 1;\n        } while (iVar5 < iVar2);\n    }\n    return 0;\n}\n",
        "token_count": 367
    },
    "14000dcf": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000dcfc(code **arg1)\n\n{\n    *arg1 = vtable._AFX_HTMLHELP_STATE.0;\n    if (arg1[1] != NULL) {\n        (*_sym.imp.KERNEL32.dll_FreeLibrary)();\n    }\n    return;\n}\n",
        "token_count": 60
    },
    "14000ddd": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint64_t fcn.14000ddd4(int64_t arg1, ulong arg2, int64_t arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint uVar3;\n    uint64_t uVar4;\n    int64_t iVar5;\n    ulong uVar6;\n    ulong uStack16;\n    \n    uVar6 = 0;\n    if (arg3 == 0) {\n        iVar5 = fcn.140017ad4();\n        arg3 = *(iVar5 + 0x20);\n    }\n    if (arg1 != 0) {\n        uVar6 = *(arg1 + 0x40);\n    }\n    uStack16 = 0;\n    iVar5 = fcn.140017ad4();\n    uVar4 = fcn.140016658(*(iVar5 + 0xd8), &uStack16);\n    iVar1 = uVar4;\n    if (iVar1 != 0) {\n        uVar2 = (*_sym.imp.USER32.dll_MessageBoxA)(uVar6, arg2, arg3, arg4, 0);\n        uVar4 = uVar2;\n        if (iVar1 != 2) {\n            if (uVar2 != 0) {\n                uVar3 = 0;\n            }\n            else {\n                uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            }\n            fcn.14001663c(0, uStack16);\n            if (uVar2 == 0) {\n                (*_sym.imp.KERNEL32.dll_SetLastError)(uVar3);\n            }\n        }\n    }\n    return uVar4;\n}\n",
        "token_count": 363
    },
    "14000df3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000df3c(int64_t *arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = (**(*arg1 + 0xf0))();\n    if (iVar1 == 0) {\n        iVar1 = arg1[8];\n    }\n    else {\n        iVar1 = *(iVar1 + 0x40);\n        arg2._0_4_ = 2;\n    }\n    // WARNING: Could not recover jumptable at 0x00014000df94. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.USER32.dll_GetScrollRange)(iVar1, arg2, arg3, arg4);\n    return;\n}\n",
        "token_count": 167
    },
    "14000e16": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14000e168(ulong param_1, int16_t param_2)\n\n{\n    int64_t iVar1;\n    \n    if (param_2 == 0) {\n        iVar1 = fcn.140017b90();\n        if ((*(iVar1 + 0x90) != 0) && ((*(*(iVar1 + 0x90) + 4) >> 0x1e & 1) == 0)) {\n            fcn.14000da6c(1);\n        }\n    }\n    return 0;\n}\n",
        "token_count": 122
    },
    "14000ef9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000ef9c(int64_t **arg1)\n\n{\n    if (*arg1 != NULL) {\n        (**(**arg1 + 0x10))();\n    }\n    return;\n}\n",
        "token_count": 45
    },
    "14000f16": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.14000f16c(int64_t *arg1, ulong arg2)\n\n{\n    ulong uVar1;\n    int64_t iVar2;\n    ulong in_R9;\n    ulong uVar3;\n    uint auStack40 [2];\n    int64_t *piStack32;\n    uint uStack24;\n    \n    uVar3 = 0xfffffffffffffffe;\n    uStack24 = 0;\n    auStack40[0] = arg2;\n    piStack32 = arg1;\n    iVar2 = fcn.140016f48();\n    uVar1 = *(iVar2 + 0x138);\n    *(iVar2 + 0x138) = arg1[8];\n    (**(*arg1 + 0x1f8))(arg1, auStack40, *arg1, in_R9, uVar3);\n    *(iVar2 + 0x138) = uVar1;\n    return 1;\n}\n",
        "token_count": 204
    },
    "14000fa8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000fa84(uint32_t *arg1)\n\n{\n    if (*arg1 != 0x7fffffff) {\n        fcn.140024184(*arg1);\n        *arg1 = 0x7fffffff;\n    }\n    return;\n}\n",
        "token_count": 58
    },
    "14000fb6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14000fb64(ulong arg1)\n\n{\n    int64_t iVar1;\n    ulong arg1_00;\n    int64_t arg1_01;\n    ulong uVar2;\n    \n    iVar1 = fcn.140017b90();\n    uVar2 = 0;\n    if ((*(iVar1 + 0x28) == 0) && (arg1 != 0)) {\n        arg1_00 = fcn.140003684(0x140022808);\n        arg1_01 = fcn.140003694(0xb8);\n        if (arg1_01 != 0) {\n            uVar2 = fcn.14002436c(arg1_01, 0x1400a2328, 0x14000f648, 0x14000d168);\n        }\n        *(iVar1 + 0x28) = uVar2;\n        fcn.140003684(arg1_00);\n    }\n    return *(iVar1 + 0x28);\n}\n",
        "token_count": 223
    },
    "14000fc7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nbool fcn.14000fc78(int64_t arg1, int64_t arg2)\n\n{\n    int64_t arg2_00;\n    int64_t *piVar1;\n    \n    if (arg2 != 0) {\n        arg2_00 = fcn.14000fb64(1);\n        *(arg1 + 0x40) = arg2;\n        piVar1 = fcn.14003a6a4(arg2_00 + 0x30, arg2);\n        *piVar1 = arg1;\n        fcn.1400159c8(arg1, arg2_00);\n    }\n    return arg2 != 0;\n}\n",
        "token_count": 145
    },
    "14001007": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140010078(int64_t arg1)\n\n{\n    uint32_t uVar1;\n    int64_t iVar2;\n    ulong uVar3;\n    int64_t arg1_00;\n    \n    if ((arg1 == 0) || (iVar2 = *(arg1 + 0x40),  *(arg1 + 0x40) == 0)) {\n        uVar3 = 0;\n    }\n    else {\n        do {\n            arg1_00 = iVar2;\n            uVar1 = (*_sym.imp.USER32.dll_GetWindowLongA)(arg1_00, 0xfffffff0);\n            if ((uVar1 >> 0x1e & 1) == 0) break;\n            iVar2 = (*_sym.imp.USER32.dll_GetParent)(arg1_00);\n        } while (iVar2 != 0);\n        uVar3 = fcn.14000fc08(arg1_00);\n    }\n    return uVar3;\n}\n",
        "token_count": 214
    },
    "1400100e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.1400100ec(ulong arg1, uint64_t arg2, uint64_t arg3)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    \n    arg3 = arg3 & 0xffffffff;\n    iVar1 = (*_sym.imp.USER32.dll_GetDlgItem)();\n    if (iVar1 != 0) {\n        iVar2 = (*_sym.imp.USER32.dll_GetTopWindow)(iVar1);\n        if ((iVar2 != 0) && (iVar2 = fcn.1400100ec(iVar1, arg2 & 0xffffffff, arg3),  iVar2 != 0)) {\n            return iVar2;\n        }\n        if (arg3 == 0) {\n            iVar1 = fcn.14000fc08(iVar1);\n            return iVar1;\n        }\n        iVar1 = fcn.14000fc4c(iVar1);\n        if (iVar1 != 0) {\n            return iVar1;\n        }\n    }\n    iVar1 = (*_sym.imp.USER32.dll_GetTopWindow)(arg1);\n    while( true ) {\n        if (iVar1 == 0) {\n            return 0;\n        }\n        iVar2 = fcn.1400100ec(iVar1, arg2 & 0xffffffff, arg3);\n        if (iVar2 != 0) break;\n        iVar1 = (*_sym.imp.USER32.dll_GetWindow)(iVar1);\n    }\n    return iVar2;\n}\n",
        "token_count": 316
    },
    "14001038": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140010380(int64_t arg1, int64_t *arg2)\n\n{\n    int32_t iVar1;\n    int64_t *piVar2;\n    int64_t arg1_00;\n    \n    arg1_00 = *arg2;\n    while( true ) {\n        if (arg1_00 == 0) {\n            return 0;\n        }\n        piVar2 = fcn.14000fc4c(arg1_00);\n        if ((piVar2 != NULL) && (iVar1 = (**(*piVar2 + 0x210))(piVar2, arg2),  iVar1 != 0)) break;\n        if (arg1_00 == arg1) {\n            return 0;\n        }\n        arg1_00 = (*_sym.imp.USER32.dll_GetParent)(arg1_00);\n    }\n    return 1;\n}\n",
        "token_count": 190
    },
    "14001065": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140010658(int64_t *arg1)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    uchar auStack56 [8];\n    ulong uStack48;\n    \n    while( true ) {\n        iVar2 = (*_sym.imp.USER32.dll_PeekMessageA)(auStack56, 0, 0x121, 0x121, 1);\n        if (iVar2 == 0) break;\n        (*_sym.imp.USER32.dll_DispatchMessageA)(auStack56);\n    }\n    uStack48 = 0x14000fb2c;\n    iVar3 = fcn.1400234a0(0x1400de580, 0x140006808);\n    if (iVar3 == 0) {\n        uStack48 = 0x14000fb39;\n        fcn.140020780();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    // WARNING: Could not recover jumptable at 0x00014000fb5a. Too many branches\n    // WARNING: Treating indirect jump as call\n    (**(*arg1 + 0x230))(arg1, *(iVar3 + 0xa0), *(iVar3 + 0xa8), *(iVar3 + 0xb0));\n    return;\n}\n",
        "token_count": 299
    },
    "14001080": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.14001080c(int64_t *arg1)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    ulong *puVar3;\n    \n    puVar3 = (**(*arg1 + 0x1f0))();\n    (*_sym.imp.USER32.dll_SetWindowLongPtrA)(arg1[8], 0xfffffffc, *puVar3);\n    *puVar3 = 0;\n    iVar1 = arg1[8];\n    if (iVar1 != 0) {\n        iVar2 = fcn.140017b90();\n        if (*(iVar2 + 0x28) != 0) {\n            fcn.14003a4d0(*(iVar2 + 0x28) + 0x30, arg1[8]);\n        }\n        arg1[8] = 0;\n    }\n    arg1[0x14] = 0;\n    return iVar1;\n}\n",
        "token_count": 206
    },
    "140010d5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t * fcn.140010d58(int64_t arg1)\n\n{\n    int32_t iVar1;\n    ulong arg1_00;\n    int64_t *piVar2;\n    int64_t iVar3;\n    \n    if ((arg1 != 0) && (iVar3 = *(arg1 + 0x40),  iVar3 != 0)) {\n        while( true ) {\n            arg1_00 = (*_sym.imp.USER32.dll_GetParent)(iVar3);\n            piVar2 = fcn.14000fc08(arg1_00);\n            if (piVar2 == NULL) break;\n            iVar1 = (**(*piVar2 + 0x250))(piVar2);\n            if (iVar1 != 0) {\n                return piVar2;\n            }\n            iVar3 = piVar2[8];\n        }\n    }\n    return NULL;\n}\n",
        "token_count": 190
    },
    "140010ec": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint64_t fcn.140010ec4(ulong arg1, ulong arg2)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    int64_t arg1_00;\n    ulong arg2_00;\n    uint64_t uVar3;\n    uchar auStack184 [64];\n    ulong uStack120;\n    int64_t iStack24;\n    \n    iVar2 = fcn.140017b90();\n    if (*(iVar2 + 0x28) == 0) {\n        uVar3 = 0;\n    }\n    else {\n        iVar2 = *(iVar2 + 0x28) + 0x30;\n        arg1_00 = fcn.14003a45c(iVar2, arg1);\n        if (arg1_00 == 0) {\n            arg2_00 = (*_sym.imp.USER32.dll_GetParent)(arg1);\n            iVar2 = fcn.14003a45c(iVar2, arg2_00);\n            if (((iVar2 != 0) && (*(iVar2 + 0x98) != 0)) &&\n               (iStack24 = fcn.14003a45c(*(iVar2 + 0x98) + 0x48, arg1),  iStack24 != 0)) {\n                fcn.14000c4f8(auStack184, arg1);\n                iVar1 = fcn.1400103f0(auStack184, arg2);\n                uStack120 = 0;\n                fcn.140010b98(auStack184);\n                return iVar1 != 0;\n            }\n            uVar3 = 0;\n        }\n        else {\n            uVar3 = fcn.1400103f0(arg1_00, arg2);\n        }\n    }\n    return uVar3;\n}\n",
        "token_count": 394
    },
    "14001102": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.140011020(int64_t hWnd)\n\n{\n    ulong uVar1;\n    int64_t iVar2;\n    int32_t iVar3;\n    \n    iVar3 = 0;\n    uVar1 = (*_sym.imp.USER32.dll_GetWindow)(*(hWnd + 0x40), 5);\n    iVar2 = fcn.14000fc08(uVar1);\n    while (iVar2 != 0) {\n        uVar1 = (*_sym.imp.USER32.dll_GetWindow)(*(iVar2 + 0x40), 2);\n        iVar2 = fcn.14000fc08(uVar1);\n        iVar3 = iVar3 + 1;\n    }\n    return iVar3;\n}\n",
        "token_count": 156
    },
    "140011bc": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140011bcc(int64_t *arg1)\n\n{\n    uint32_t uVar1;\n    int64_t iVar2;\n    code *pcVar3;\n    uchar in_DL;\n    uint32_t uVar4;\n    \n    iVar2 = *arg1;\n    uVar1 = *(iVar2 + -0x10);\n    uVar4 = uVar1 + 1;\n    if ((1U - *(iVar2 + -8) | *(iVar2 + -0xc) - uVar4) < 0) {\n        fcn.1400033e0(arg1, uVar4);\n    }\n    *(uVar1 + *arg1) = in_DL;\n    if ((-1 < uVar4) && (uVar4 <= *(*arg1 + -0xc))) {\n        *(*arg1 + -0x10) = uVar4;\n        *(uVar4 + *arg1) = 0;\n        return;\n    }\n    fcn.1400031e0(0x80070057);\n    pcVar3 = swi(3);\n    (*pcVar3)();\n    return;\n}\n",
        "token_count": 245
    },
    "140011fe": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140011fe8(int64_t *arg1, ulong noname_1, ulong *hWnd, ulong arg4)\n\n{\n    uint32_t uVar1;\n    code *pcVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int64_t iVar5;\n    ulong uVar6;\n    ulong uStack40;\n    ulong *puStack32;\n    \n    uVar6 = *hWnd;\n    uVar3 = (*_sym.imp.USER32.dll_GetDlgCtrlID)(uVar6);\n    uVar1 = *(hWnd + 2);\n    iVar5 = fcn.1400234a0(0x1400de580, 0x140006808);\n    if (iVar5 == 0) {\n        fcn.140020780();\n        pcVar2 = swi(3);\n        uVar6 = (*pcVar2)();\n        return uVar6;\n    }\n    if ((*(iVar5 + 0x138) != arg1[8]) && (iVar4 = fcn.140010ec4(uVar6, arg4),  iVar4 == 0)) {\n        uStack40 = arg4;\n        puStack32 = hWnd;\n        uVar6 = (**(*arg1 + 0x18))(arg1, uVar3, uVar1 & 0xffff | 0x4e0000, &uStack40, 0);\n        return uVar6;\n    }\n    return 1;\n}\n",
        "token_count": 322
    },
    "1400120a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.1400120a8(ulong arg1)\n\n{\n    uint32_t uVar1;\n    int64_t iVar2;\n    int64_t arg1_00;\n    ulong uVar3;\n    \n    iVar2 = fcn.14000fc4c(arg1);\n    uVar3 = 0;\n    if (iVar2 == 0) {\n        uVar1 = (*_sym.imp.USER32.dll_GetWindowLongA)(arg1, 0xfffffff0);\n        if ((uVar1 >> 0x1e & 1) == 0) {\n            uVar3 = (*_sym.imp.USER32.dll_GetWindow)(arg1, 4);\n        }\n        else {\n            uVar3 = (*_sym.imp.USER32.dll_GetParent)();\n        }\n    }\n    else {\n        arg1_00 = *(iVar2 + 0x70);\n        if (arg1_00 == 0) {\n            arg1_00 = (*_sym.imp.USER32.dll_GetParent)(*(iVar2 + 0x40));\n        }\n        iVar2 = fcn.14000fc08(arg1_00);\n        if (iVar2 != 0) {\n            uVar3 = *(iVar2 + 0x40);\n        }\n    }\n    return uVar3;\n}\n",
        "token_count": 280
    },
    "14001212": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140012120(int64_t arg1)\n\n{\n    int64_t iVar1;\n    ulong uVar2;\n    int64_t arg1_00;\n    \n    if ((arg1 == 0) || (iVar1 = *(arg1 + 0x40),  *(arg1 + 0x40) == 0)) {\n        uVar2 = 0;\n    }\n    else {\n        do {\n            arg1_00 = iVar1;\n            iVar1 = fcn.1400120a8(arg1_00);\n        } while (iVar1 != 0);\n        uVar2 = fcn.14000fc08(arg1_00);\n    }\n    return uVar2;\n}\n",
        "token_count": 154
    },
    "14001215": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14001215c(int64_t arg1, ulong arg2, int64_t arg3)\n\n{\n    ulong uVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    int64_t hWnd;\n    ulong uVar4;\n    ulong arg1_00;\n    \n    hWnd = fcn.140012120(arg1);\n    uVar2 = arg2 & 0xfff0;\n    if ((uVar2 == 0xf040) || (uVar2 == 0xf050)) {\n        if (arg3 != 0x75) {\n            return 0;\n        }\n        if (hWnd == 0) {\n            return 0;\n        }\n        fcn.1400154fc(hWnd);\n    }\n    else {\n        if ((uVar2 != 0xf060) && (uVar2 != 0xf100)) {\n            return 0;\n        }\n        if (((uVar2 == 0xf060) || (arg3 != 0)) && (hWnd != 0)) {\n            uVar1 = *(arg1 + 0x40);\n            uVar4 = (*_sym.imp.USER32.dll_GetFocus)();\n            arg1_00 = (*_sym.imp.USER32.dll_SetActiveWindow)(*(hWnd + 0x40));\n            fcn.14000fc08(arg1_00);\n            (*_sym.imp.USER32.dll_SendMessageA)(*(hWnd + 0x40), 0x112, arg2, arg3);\n            iVar3 = (*_sym.imp.USER32.dll_IsWindow)(uVar1);\n            if (iVar3 != 0) {\n                (*_sym.imp.USER32.dll_SetActiveWindow)(uVar1);\n            }\n            iVar3 = (*_sym.imp.USER32.dll_IsWindow)(uVar4);\n            if (iVar3 != 0) {\n                (*_sym.imp.USER32.dll_SetFocus)(uVar4);\n            }\n        }\n    }\n    return 1;\n}\n",
        "token_count": 428
    },
    "14002374": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140023744(void)\n\n{\n    int32_t *piVar1;\n    int64_t iVar2;\n    \n    iVar2 = fcn.140017ad4();\n    LOCK();\n    piVar1 = iVar2 + 0x50;\n    *piVar1 = *piVar1 + -1;\n    if (*piVar1 == 0) {\n        fcn.1400236e0();\n    }\n    return;\n}\n",
        "token_count": 97
    },
    "14001298": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14001298c(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    ulong uVar3;\n    int64_t iVar4;\n    \n    if (((arg2 == -2) && (((arg3 == 0x201 || (arg3 == 0x207)) || (arg3 == 0x204)))) &&\n       (iVar2 = fcn.140012120(arg1),  iVar2 != 0)) {\n        uVar3 = (*_sym.imp.USER32.dll_GetLastActivePopup)(*(iVar2 + 0x40));\n        iVar2 = fcn.14000fc08(uVar3);\n        if (iVar2 != 0) {\n            uVar3 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n            iVar4 = fcn.14000fc08(uVar3);\n            if ((iVar2 != iVar4) && (iVar1 = fcn.14001549c(iVar2),  iVar1 != 0)) {\n                (*_sym.imp.USER32.dll_SetForegroundWindow)(*(iVar2 + 0x40));\n                return 1;\n            }\n        }\n    }\n    return 0;\n}\n",
        "token_count": 265
    },
    "140013f9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint64_t fcn.140013f90(ulong arg1)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    uint64_t uVar3;\n    ulong uVar4;\n    int64_t iVar5;\n    \n    iVar2 = fcn.140012120(arg1);\n    if (iVar2 == 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        uVar3 = (*pcVar1)();\n        return uVar3;\n    }\n    uVar4 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n    iVar5 = fcn.14000fc08(uVar4);\n    uVar4 = (*_sym.imp.USER32.dll_GetLastActivePopup)(*(iVar2 + 0x40));\n    iVar2 = fcn.14000fc08(uVar4);\n    return iVar5 == iVar2;\n}\n",
        "token_count": 193
    },
    "140013ff": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140013ff0(int64_t arg1)\n\n{\n    code *pcVar1;\n    ulong arg1_00;\n    int32_t iVar2;\n    int64_t iVar3;\n    \n    arg1_00 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n    iVar3 = fcn.14000fc08(arg1_00);\n    if (iVar3 != 0) {\n        if (*(iVar3 + 0x40) == *(arg1 + 0x40)) {\n            return;\n        }\n        iVar2 = (*_sym.imp.USER32.dll_IsChild)();\n        if (iVar2 != 0) {\n            return;\n        }\n    }\n    iVar3 = fcn.140012120(arg1);\n    if (iVar3 != 0) {\n        (*_sym.imp.USER32.dll_SetForegroundWindow)(*(iVar3 + 0x40));\n        return;\n    }\n    fcn.140020780();\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 223
    },
    "1400141b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.1400141b8(ulong *arg1)\n\n{\n    code **ppcVar1;\n    code **ppcVar2;\n    uint uVar3;\n    \n    ppcVar2 = NULL;\n    if (arg1 == NULL) {\n        uVar3 = 0x80004003;\n    }\n    else {\n        *arg1 = 0;\n        ppcVar1 = fcn.140003694(0x30);\n        if (ppcVar1 != NULL) {\n            *(ppcVar1 + 5) = 0;\n            ppcVar1[2] = NULL;\n            ppcVar1[3] = NULL;\n            *ppcVar1 = vtable.CMFCComObject_class_ATL::CAccessibleProxy_.2.0;\n            ppcVar1[1] = vtable.CMFCComObject_class_ATL::CAccessibleProxy_.1.0;\n            ppcVar1[4] = vtable.CMFCComObject_class_ATL::CAccessibleProxy_.0;\n            fcn.1400236a0();\n            ppcVar2 = ppcVar1;\n        }\n        uVar3 = 0x8007000e;\n        if (ppcVar2 != NULL) {\n            uVar3 = 0;\n        }\n        *arg1 = ppcVar2;\n    }\n    return uVar3;\n}\n",
        "token_count": 305
    },
    "14001427": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140014274(void)\n\n{\n    int64_t iVar1;\n    uchar auStack616 [64];\n    ulong uStack552;\n    uint64_t uStack24;\n    \n    uStack552 = 0xfffffffffffffffe;\n    uStack24 = *0x1400d96f0 ^ auStack616;\n    iVar1 = fcn.140017ad4();\n    fcn.140005ffc(*(iVar1 + 8));\n    fcn.140069870(uStack24 ^ auStack616);\n    return;\n}\n",
        "token_count": 116
    },
    "1400148f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.1400148f8(int64_t arg1, int16_t *arg2)\n\n{\n    int32_t *piVar1;\n    int16_t iVar2;\n    int16_t iVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    int16_t iVar6;\n    int64_t iVar7;\n    int32_t iVar8;\n    int64_t iStackX16;\n    uint auStack104 [2];\n    ulong uStack96;\n    int64_t iStack88;\n    \n    iVar8 = 1;\n    if (arg2 != NULL) {\n        do {\n            iVar3 = *arg2;\n            if (iVar3 == 0) break;\n            iVar2 = arg2[1];\n            uVar4 = *(arg2 + 2);\n            arg2 = arg2 + 4;\n            if (iVar2 == 0x1234) {\ncode_r0x0001400149b0:\n                fcn.1400698a0(&uStack96, 0, 0x30);\n                uStack96 = 0xffffffffffffffff;\n                auStack104[0] = 1;\n                fcn.1400057dc(&iStackX16, arg2);\n                iStack88 = iStackX16;\n                iVar7 = (*_sym.imp.USER32.dll_SendDlgItemMessageA)(*(arg1 + 0x40), iVar3, 0x401, 0, auStack104);\n                if (iVar7 == -1) {\n                    iVar8 = 0;\n                }\n                LOCK();\n                piVar1 = iStackX16 + -8;\n                iVar5 = *piVar1;\n                *piVar1 = *piVar1 + -1;\n                if (iVar5 + -1 < 1) {\n                    (**(**(iStackX16 + -0x18) + 8))();\n                }\n            }\n            else {\n                iVar6 = 0x180;\n                if (iVar2 == 0x401) {\ncode_r0x00014001498a:\n                    iVar7 = (*_sym.imp.USER32.dll_SendDlgItemMessageA)(*(arg1 + 0x40), iVar3, iVar6, 0, arg2);\n                    if (iVar7 == -1) {\n                        iVar8 = 0;\n                    }\n                }\n                else {\n                    iVar6 = iVar2;\n                    if (iVar2 == 0x403) {\n                        iVar6 = 0x143;\n                    }\n                    if (iVar6 == 0x401) goto code_r0x0001400149b0;\n                    if ((iVar6 == 0x180) || (iVar6 == 0x143)) goto code_r0x00014001498a;\n                }\n            }\n            arg2 = arg2 + uVar4;\n        } while (iVar8 != 0);\n        if (iVar8 == 0) {\n            return 0;\n        }\n    }\n    fcn.140010dfc(*(arg1 + 0x40), 0x364, 0, 0);\n    return iVar8;\n}\n",
        "token_count": 672
    },
    "140014a8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140014a8c(int64_t arg1, ulong arg2, ulong arg3)\n\n{\n    int16_t iVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int64_t iVar4;\n    int64_t iVar5;\n    ulong uVar6;\n    uint64_t arg3_00;\n    uchar auStack104 [56];\n    ulong uStack48;\n    \n    *(arg1 + 0x40) = arg2;\n    uStack48 = 0x140014aa5;\n    iVar5 = fcn.140017ad4();\n    uStack48 = 0x140014ab2;\n    iVar5 = (*_sym.imp.USER32.dll_LoadIconA)(*(iVar5 + 0x18), arg3);\n    *(arg1 + 0x20) = iVar5;\n    if (iVar5 == 0) {\n        uStack48 = 0x140014ac8;\n        uVar6 = (*_sym.imp.USER32.dll_LoadIconA)(0, 0x7f00);\n        *(arg1 + 0x20) = uVar6;\n    }\n    iVar2 = fcn.14000d2f4(*(arg1 + 0x18), *(arg1 + 0x40), &stack0xffffffffffffff98);\n    arg3_00 = 0;\n    if (iVar2 == 0) {\n        iVar1 = fcn.14000d258(arg1);\n        if (iVar1 == 0) {\n            uVar6 = 0;\n        }\n        else {\n            iVar5 = fcn.140017ad4();\n            if (*(iVar5 + 0x28) != '\\0') {\n                fcn.1400240f0(1);\n                iVar4 = fcn.140017ad4();\n                iVar5 = *(arg1 + 0x40);\n                if (iVar5 != 0) {\n                    uVar3 = fcn.1400699a0(iVar5);\n                    arg3_00 = uVar3;\n                }\n                fcn.140007ad0(iVar4 + 0x58, iVar5, arg3_00);\n                fcn.140011bcc(iVar4 + 0x58);\n                fcn.140024184(1);\n            }\n            uVar6 = 1;\n        }\n    }\n    else {\n        uVar6 = 1;\n    }\n    return uVar6;\n}\n",
        "token_count": 532
    },
    "140014ee": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.140014ee0(ulong arg1, int64_t arg2)\n\n{\n    ulong uVar1;\n    uint uVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    int64_t arg2_00;\n    \n    arg2_00 = 0;\n    iVar4 = 0;\n    if (arg2 != 0) {\n        iVar3 = fcn.140017ad4();\n        uVar1 = *(iVar3 + 0x18);\n        iVar3 = (*_sym.imp.KERNEL32.dll_FindResourceA)(uVar1, arg2, 0xf0);\n        if (iVar3 != 0) {\n            iVar4 = (*_sym.imp.KERNEL32.dll_LoadResource)(uVar1, iVar3);\n            if (iVar4 == 0) {\n                return 0;\n            }\n            arg2_00 = (*_sym.imp.KERNEL32.dll_LockResource)(iVar4);\n        }\n    }\n    uVar2 = fcn.1400148f8(arg1, arg2_00);\n    if ((arg2_00 != 0) && (iVar4 != 0)) {\n        (*_sym.imp.KERNEL32.dll_FreeResource)(iVar4);\n    }\n    return uVar2;\n}\n",
        "token_count": 276
    },
    "14001524": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140015240(int64_t hDlg, ulong arg2)\n\n{\n    int64_t iVar1;\n    \n    if ((*(hDlg + 0x78) >> 8 & 1) == 0) {\n        (*_sym.imp.USER32.dll_IsDialogMessageA)(*(hDlg + 0x40));\n    }\n    else {\n        iVar1 = fcn.140017ad4();\n        (**(**(iVar1 + 0x68) + 0x50))(*(iVar1 + 0x68), hDlg, arg2);\n    }\n    return;\n}\n",
        "token_count": 129
    },
    "14001553": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140015534(int64_t arg1)\n\n{\n    if (*(arg1 + 0xa0) != NULL) {\n        (**(**(arg1 + 0xa0) + 0xc0))();\n    }\n    return;\n}\n",
        "token_count": 55
    },
    "14001595": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140015950(int64_t hWnd, int64_t arg2, ulong X, ulong Y)\n\n{\n    ulong uVar1;\n    \n    uVar1 = 0;\n    if (*(hWnd + 0xa0) == 0) {\n        if (arg2 != 0) {\n            uVar1 = *(arg2 + 0x40);\n        }\n        (*_sym.imp.USER32.dll_SetWindowPos)(*(hWnd + 0x40), uVar1);\n    }\n    else {\n        (**(**(hWnd + 0xa0) + 0x138))(*(hWnd + 0xa0), arg2);\n    }\n    return;\n}\n",
        "token_count": 149
    },
    "14001620": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong * fcn.14001620c(int64_t arg1, int64_t arg2)\n\n{\n    ulong *puVar1;\n    \n    if (*(arg1 + 0x98) != 0) {\n        for (puVar1 = *(*(arg1 + 0x98) + 0x88); puVar1 != NULL; puVar1 = *puVar1) {\n            if (puVar1[2] == arg2) {\n                return puVar1;\n            }\n        }\n    }\n    return NULL;\n}\n",
        "token_count": 117
    },
    "14001623": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong * fcn.14001623c(int64_t arg1)\n\n{\n    int64_t *piVar1;\n    int64_t iVar2;\n    ulong *puVar3;\n    int64_t iVar4;\n    \n    if (*(arg1 + 0x98) != 0) {\n        for (puVar3 = *(*(arg1 + 0x98) + 0x88); puVar3 != NULL; puVar3 = *puVar3) {\n            piVar1 = puVar3[2];\n            if (piVar1[1] == 0) {\n                iVar4 = *piVar1;\n            }\n            else {\n                iVar4 = *(piVar1[1] + 0x48);\n            }\n            if ((iVar4 != 0) && (iVar2 = (*_sym.imp.USER32.dll_GetFocus)(),  iVar4 == iVar2)) {\n                return puVar3;\n            }\n            if ((piVar1[1] != 0) && (piVar1[1] == *(*(arg1 + 0x98) + 0xd8))) {\n                return puVar3;\n            }\n        }\n    }\n    return NULL;\n}\n",
        "token_count": 258
    },
    "14002355": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14002355c(uint32_t *arg1)\n\n{\n    if ((*arg1 != 0) && (*0x1400de720 != 0)) {\n        fcn.1400230d8(*0x1400de720, *arg1);\n    }\n    *arg1 = 0;\n    return;\n}\n",
        "token_count": 74
    },
    "14001663": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001663c(void)\n\n{\n    if (*0x1400de560 != NULL) {\n        (**0x1400de560)();\n    }\n    return;\n}\n",
        "token_count": 40
    },
    "14001665": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint64_t fcn.140016658(ulong noname_0, int64_t arg2)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint64_t uVar3;\n    \n    if (arg2 == 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        uVar3 = (*pcVar1)();\n        return uVar3;\n    }\n    if (*0x1400de558 == NULL) {\n        uVar3 = 2;\n    }\n    else {\n        iVar2 = (**0x1400de558)();\n        uVar3 = iVar2 != 0;\n    }\n    return uVar3;\n}\n",
        "token_count": 151
    },
    "1400167e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400167e8(int64_t arg1)\n\n{\n    int32_t *piVar1;\n    \n    LOCK();\n    piVar1 = arg1 + 0x30;\n    *piVar1 = *piVar1 + -1;\n    if (*piVar1 == 0) {\n        if (*(arg1 + 0x28) != NULL) {\n            (**(**(arg1 + 0x28) + 0x10))();\n            *(arg1 + 0x28) = 0;\n        }\n        if (*(arg1 + 0x10) != NULL) {\n            (**(**(arg1 + 0x10) + 0x10))();\n            *(arg1 + 0x10) = 0;\n        }\n    }\n    return;\n}\n",
        "token_count": 174
    },
    "140016c7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140016c78(code **arg1)\n\n{\n    *arg1 = vtable._AFX_THREAD_STATE.0;\n    if (arg1[10] != NULL) {\n        (*_sym.imp.USER32.dll_UnhookWindowsHookEx)();\n    }\n    if (arg1[9] != NULL) {\n        (*_sym.imp.USER32.dll_UnhookWindowsHookEx)();\n    }\n    if (arg1[3] != NULL) {\n        fcn.140069e50(arg1[3]);\n    }\n    return;\n}\n",
        "token_count": 116
    },
    "140016f4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140016f48(void)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    \n    iVar2 = fcn.1400234a0(0x1400de580, 0x140006808);\n    if (iVar2 == 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    return;\n}\n",
        "token_count": 97
    },
    "140017ad": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140017ad4(void)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    \n    iVar2 = fcn.1400234a0(0x1400de580, 0x140006808);\n    if (iVar2 == 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    if (*(iVar2 + 8) == 0) {\n        iVar2 = fcn.140022cd8(0x1400de578, 0x140017a40);\n        if (iVar2 == 0) {\n            fcn.140020780();\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n    }\n    return;\n}\n",
        "token_count": 179
    },
    "140017b9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140017b90(void)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    \n    iVar2 = fcn.140017ad4();\n    iVar2 = fcn.1400234a0(iVar2 + 0xc0, 0x140003eb0);\n    if (iVar2 == 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    return;\n}\n",
        "token_count": 111
    },
    "140017bd": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.140017bd0(int64_t arg1, int64_t arg2)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    \n    iVar2 = fcn.140017ad4();\n    uVar1 = 0;\n    if (((*(iVar2 + 0xd0) != 0) && (*(arg2 + 0xd8) != -1)) && (*0x1400de558 != NULL)) {\n        uVar1 = (**0x1400de558)(*(arg2 + 0xd8), arg1);\n    }\n    *(arg1 + 8) = uVar1;\n    return arg1;\n}\n",
        "token_count": 146
    },
    "140017c2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140017c2c(uint64_t arg1, uchar *arg2, ulong arg3)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    ushort *puVar3;\n    ulong uVar4;\n    \n    if ((arg2 == NULL) || (arg3 == 0)) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        uVar4 = (*pcVar1)();\n        return uVar4;\n    }\n    iVar2 = fcn.140017ad4();\n    uVar4 = *(iVar2 + 0x18);\n    iVar2 = (*_sym.imp.KERNEL32.dll_FindResourceA)(uVar4, ((arg1 & 0xffffffff) >> 4) + 1);\n    if ((iVar2 != 0) && (puVar3 = fcn.140003210(uVar4, iVar2, arg1 & 0xffffffff),  puVar3 != NULL)) {\n        uVar4 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(0, 0, puVar3 + 1, *puVar3, arg2, arg3 + -1, 0, 0);\n        arg2[uVar4] = 0;\n        return uVar4;\n    }\n    *arg2 = 0;\n    return 0;\n}\n",
        "token_count": 297
    },
    "140017dd": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140017ddc(void)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.140017ad4();\n    return *(iVar1 + 0x18);\n}\n",
        "token_count": 44
    },
    "140017df": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140017df0(int64_t *arg1, int64_t arg2, uint64_t arg3)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    ulong uVar4;\n    uint64_t arg2_00;\n    int64_t arg2_01;\n    uint32_t uVar5;\n    uint64_t uVar6;\n    char in_R9B;\n    \n    uVar6 = arg3 & 0xffffffff;\n    if (arg2 == 0) {\ncode_r0x000140017e1a:\n        uVar4 = 0;\n    }\n    else {\n        if (uVar6 != 0) {\n            do {\n                arg2_00 = in_R9B;\n                uVar5 = uVar6 - 1;\n                uVar6 = uVar5;\n                arg2 = fcn.14006bc24(arg2, arg2_00);\n                if (arg2 == 0) {\n                    fcn.140004828(arg1, arg2_00, arg3);\n                    goto code_r0x000140017e1a;\n                }\n                arg2 = arg2 + 1;\n            } while (uVar5 != 0);\n        }\n        iVar3 = fcn.14006bc24(arg2, in_R9B);\n        if (iVar3 == 0) {\n            uVar5 = (*_sym.imp.KERNEL32.dll_lstrlenA)(arg2);\n        }\n        else {\n            uVar5 = iVar3 - arg2;\n        }\n        if ((1U - *(*arg1 + -8) | *(*arg1 + -0xc) - uVar5) < 0) {\n            fcn.1400033e0(arg1, uVar5);\n        }\n        iVar3 = *arg1;\n        if ((uVar5 < 0) || (*(iVar3 + -0xc) < uVar5)) {\n            fcn.1400031e0(0x80070057);\n            pcVar1 = swi(3);\n            uVar4 = (*pcVar1)();\n            return uVar4;\n        }\n        *(iVar3 + -0x10) = uVar5;\n        arg2_01 = uVar5;\n        *(arg2_01 + *arg1) = 0;\n        iVar2 = fcn.140069a48(iVar3, arg2_01, arg2, arg2_01);\n        if (iVar2 != 0) {\n            if (iVar2 == 0xc) {\n                fcn.140020738();\n                pcVar1 = swi(3);\n                uVar4 = (*pcVar1)();\n                return uVar4;\n            }\n            if ((iVar2 == 0x16) || (iVar2 == 0x22)) {\n                fcn.140020780();\n                pcVar1 = swi(3);\n                uVar4 = (*pcVar1)();\n                return uVar4;\n            }\n            if (iVar2 != 0x50) {\n                fcn.140020780();\n                pcVar1 = swi(3);\n                uVar4 = (*pcVar1)();\n                return uVar4;\n            }\n        }\n        iVar3 = *arg1;\n        if (iVar3 == 0) {\n            iVar2 = 0;\n        }\n        else {\n            iVar2 = fcn.14006b544(iVar3, *(iVar3 + -0xc));\n            if (iVar2 < 0) goto code_r0x000140017f34;\n        }\n        if (*(*arg1 + -0xc) < iVar2) {\ncode_r0x000140017f34:\n            fcn.1400031e0(0x80070057);\n            pcVar1 = swi(3);\n            uVar4 = (*pcVar1)();\n            return uVar4;\n        }\n        *(*arg1 + -0x10) = iVar2;\n        *(iVar2 + *arg1) = 0;\n        uVar4 = 1;\n    }\n    return uVar4;\n}\n",
        "token_count": 891
    },
    "1400181e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400181e8(int64_t *arg1, ulong arg2)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    \n    iVar2 = fcn.140069d98(arg2);\n    if (iVar2 == 0) {\n        fcn.1400031e0(0x8007000e);\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    *arg1 = iVar2;\n    return;\n}\n",
        "token_count": 111
    },
    "14001821": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140018214(int64_t *arg1, ulong arg2)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    \n    iVar2 = fcn.140069d98(arg2);\n    if (iVar2 == 0) {\n        fcn.1400031e0(0x8007000e);\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    *arg1 = iVar2;\n    return;\n}\n",
        "token_count": 109
    },
    "1400182b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint64_t fcn.1400182b0(uchar *arg1, int64_t lpWideCharStr, ulong arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    uint64_t uVar2;\n    \n    uVar2 = 0;\n    if ((arg1 != NULL) && (lpWideCharStr != 0)) {\n        *arg1 = 0;\n        iVar1 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(0, 0, lpWideCharStr, 0xffffffff, arg1, arg3, 0, 0);\n        uVar2 = -(iVar1 != 0) & arg1;\n    }\n    return uVar2;\n}\n",
        "token_count": 156
    },
    "14001838": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140018384(int64_t *arg1)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    \n    iVar3 = *arg1;\n    LOCK();\n    piVar1 = iVar3 + -8;\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 + -1 < 1) {\n        (**(**(iVar3 + -0x18) + 8))();\n    }\n    return;\n}\n",
        "token_count": 121
    },
    "14001847": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140018474(int64_t *arg1, ulong noname_1, ulong pv)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int64_t *piVar3;\n    code *pcVar4;\n    int64_t iVar5;\n    \n    iVar5 = *arg1;\n    piVar3 = *(iVar5 + -0x18);\n    if (*(iVar5 + -0x10) != 0) {\n        if (*(iVar5 + -8) < 0) {\n            if (*(iVar5 + -0xc) < 0) {\n                fcn.1400031e0(0x80070057);\n                pcVar4 = swi(3);\n                (*pcVar4)();\n                return;\n            }\n            *(iVar5 + -0x10) = 0;\n            **arg1 = 0;\n        }\n        else {\n            LOCK();\n            piVar1 = iVar5 + -8;\n            iVar2 = *piVar1;\n            *piVar1 = *piVar1 + -1;\n            if (iVar2 + -1 < 1) {\n                (**(**(iVar5 + -0x18) + 8))();\n            }\n            iVar5 = (**(*piVar3 + 0x18))(piVar3);\n            *arg1 = iVar5 + 0x18;\n        }\n    }\n    return;\n}\n",
        "token_count": 305
    },
    "1400184e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400184e4(int64_t *arg1, ulong arg2)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int64_t arg3;\n    code *pcVar3;\n    int64_t arg2_00;\n    ulong *puVar4;\n    int64_t iVar5;\n    \n    arg3 = *arg1;\n    iVar2 = *(arg3 + -0x10);\n    puVar4 = (**(**(arg3 + -0x18) + 0x20))();\n    iVar5 = (***puVar4)(puVar4, arg2, 2);\n    if (iVar5 == 0) {\n        fcn.1400183ac();\n        pcVar3 = swi(3);\n        (*pcVar3)();\n        return;\n    }\n    if (iVar2 < arg2) {\n        arg2._0_4_ = iVar2;\n    }\n    arg2_00 = (arg2 + 1) * 2;\n    fcn.140069a48(iVar5 + 0x18, arg2_00, arg3, arg2_00);\n    *(iVar5 + 8) = iVar2;\n    LOCK();\n    piVar1 = arg3 + -8;\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 + -1 < 1) {\n        (**(**(arg3 + -0x18) + 8))(*(arg3 + -0x18), arg3 + -0x18);\n    }\n    *arg1 = iVar5 + 0x18;\n    return;\n}\n",
        "token_count": 365
    },
    "14001859": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140018594(int64_t *arg1, ulong arg2)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    \n    if ((*(*arg1 + -0xc) < arg2) && (0 < arg2)) {\n        iVar2 = (**(**(*arg1 + -0x18) + 0x10))();\n        if (iVar2 == 0) {\n            fcn.1400183ac();\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        *arg1 = iVar2 + 0x18;\n        return;\n    }\n    fcn.1400183ac();\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 167
    },
    "14001860": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001860c(int64_t *arg1)\n\n{\n    if (*arg1 != arg1 + 1) {\n        fcn.1400181d8(arg1);\n    }\n    return;\n}\n",
        "token_count": 48
    },
    "14001862": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140018624(int64_t *arg1)\n\n{\n    if (*arg1 != arg1 + 1) {\n        fcn.1400181e0(arg1);\n    }\n    return;\n}\n",
        "token_count": 47
    },
    "14001869": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t * fcn.140018694(int64_t *arg1, int64_t arg2, ulong arg3, ulong *arg4)\n\n{\n    code *pcVar1;\n    int64_t *piVar2;\n    int64_t iVar3;\n    uint64_t arg2_00;\n    \n    arg2_00 = arg3;\n    if (arg4 == NULL) {\n        fcn.1400031e0(0x80004005);\n        pcVar1 = swi(3);\n        piVar2 = (*pcVar1)();\n        return piVar2;\n    }\n    if ((arg2 == 0) && (arg3 != 0)) {\n        fcn.1400031e0(0x80070057);\n        pcVar1 = swi(3);\n        piVar2 = (*pcVar1)();\n        return piVar2;\n    }\n    iVar3 = (***arg4)(arg4, arg2_00 & 0xffffffff, 1);\n    if (iVar3 == 0) {\n        fcn.1400035c0();\n        pcVar1 = swi(3);\n        piVar2 = (*pcVar1)();\n        return piVar2;\n    }\n    *arg1 = iVar3 + 0x18;\n    if ((-1 < arg3) && (arg3 <= *(iVar3 + 0xc))) {\n        *(iVar3 + 8) = arg3;\n        *(arg2_00 + *arg1) = 0;\n        fcn.140069a48(*arg1, arg2_00, arg2, arg2_00);\n        return arg1;\n    }\n    fcn.1400031e0(0x80070057);\n    pcVar1 = swi(3);\n    piVar2 = (*pcVar1)();\n    return piVar2;\n}\n",
        "token_count": 401
    },
    "14001876": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14001876c(ulong arg1, int64_t *arg2)\n\n{\n    fcn.140038e44(arg1, *(*arg2 + -0x10), 0);\n    fcn.1400392d0(arg1, *arg2, *(*arg2 + -0x10));\n    return arg1;\n}\n",
        "token_count": 76
    },
    "1400187a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.1400187a8(ulong arg1, int64_t *arg2)\n\n{\n    fcn.140038e44(arg1, *(*arg2 + -0x10), 1);\n    fcn.1400392d0(arg1, *arg2, *(*arg2 + -0x10) * 2);\n    return arg1;\n}\n",
        "token_count": 81
    },
    "1400187e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400187ec(int64_t *arg1)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    \n    iVar3 = *arg1;\n    LOCK();\n    piVar1 = iVar3 + -8;\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 + -1 < 1) {\n        (**(**(iVar3 + -0x18) + 8))();\n    }\n    return;\n}\n",
        "token_count": 122
    },
    "14001884": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t * fcn.140018848(int64_t *arg1, int64_t arg2, ulong arg3, ulong *arg4)\n\n{\n    code *pcVar1;\n    int64_t *piVar2;\n    int64_t iVar3;\n    \n    if (arg4 == NULL) {\n        fcn.1400031e0(0x80004005);\n        pcVar1 = swi(3);\n        piVar2 = (*pcVar1)();\n        return piVar2;\n    }\n    if ((arg2 == 0) && (arg3 != 0)) {\n        fcn.1400031e0(0x80070057);\n        pcVar1 = swi(3);\n        piVar2 = (*pcVar1)();\n        return piVar2;\n    }\n    iVar3 = (***arg4)(arg4, arg3 & 0xffffffff, 2);\n    if (iVar3 == 0) {\n        fcn.1400183ac();\n        pcVar1 = swi(3);\n        piVar2 = (*pcVar1)();\n        return piVar2;\n    }\n    *arg1 = iVar3 + 0x18;\n    if ((-1 < arg3) && (arg3 <= *(iVar3 + 0xc))) {\n        *(iVar3 + 8) = arg3;\n        iVar3 = arg3 * 2;\n        *(iVar3 + *arg1) = 0;\n        fcn.140069a48(*arg1, iVar3, arg2, iVar3);\n        return arg1;\n    }\n    fcn.1400031e0(0x80070057);\n    pcVar1 = swi(3);\n    piVar2 = (*pcVar1)();\n    return piVar2;\n}\n",
        "token_count": 384
    },
    "140018c6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140018c68(int64_t *arg1, int64_t arg2, uint64_t arg3)\n\n{\n    uint32_t uVar1;\n    int64_t iVar2;\n    code *pcVar3;\n    int64_t arg2_00;\n    int64_t arg4;\n    uint64_t uVar4;\n    int32_t iVar5;\n    \n    iVar5 = arg3;\n    if (iVar5 == 0) {\n        fcn.140018474(arg1, arg2, arg3);\n    }\n    else {\n        if (arg2 == 0) {\n            fcn.1400031e0(0x80070057);\n            pcVar3 = swi(3);\n            (*pcVar3)();\n            return;\n        }\n        iVar2 = *arg1;\n        uVar1 = *(iVar2 + -0x10);\n        uVar4 = arg2 - iVar2 >> 1;\n        if ((1U - *(iVar2 + -8) | *(iVar2 + -0xc) - iVar5) < 0) {\n            fcn.14001892c(arg1, arg3 & 0xffffffff);\n        }\n        iVar2 = *arg1;\n        arg2_00 = *(iVar2 + -0xc) * 2;\n        arg4 = iVar5 * 2;\n        if (uVar1 < uVar4) {\n            fcn.140069a48(iVar2, arg2_00, arg2, arg4);\n        }\n        else {\n            fcn.14006a3c0(iVar2, arg2_00, iVar2 + uVar4 * 2, arg4);\n        }\n        if ((iVar5 < 0) || (*(*arg1 + -0xc) < iVar5)) {\n            fcn.1400031e0(0x80070057);\n            pcVar3 = swi(3);\n            (*pcVar3)();\n            return;\n        }\n        *(*arg1 + -0x10) = iVar5;\n        *(arg4 + *arg1) = 0;\n    }\n    return;\n}\n",
        "token_count": 459
    },
    "140018d3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t * fcn.140018d3c(int64_t *arg1, int64_t arg2, ulong arg3)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int64_t iVar3;\n    int64_t *piVar4;\n    ulong uVar5;\n    \n    uVar5 = 0xfffffffffffffffe;\n    iVar3 = (**(_str.P__n_ + 0x18))(\"P;\\n@\\x01\");\n    *arg1 = iVar3 + 0x18;\n    if (0 < arg3) {\n        if (arg2 == 0) {\n            fcn.1400031e0(0x80070057);\n            pcVar1 = swi(3);\n            piVar4 = (*pcVar1)();\n            return piVar4;\n        }\n        uVar2 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(3, 0, arg2, arg3, 0, 0, 0, 0, uVar5);\n        if ((*(*arg1 + -0xc) - uVar2 | 1U - *(*arg1 + -8)) < 0) {\n            fcn.1400033e0(arg1, uVar2);\n        }\n        (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(3, 0, arg2, arg3, *arg1, uVar2, 0, 0);\n        if ((uVar2 < 0) || (*(*arg1 + -0xc) < uVar2)) {\n            fcn.1400031e0(0x80070057);\n        }\n        else {\n            *(*arg1 + -0x10) = uVar2;\n            *(uVar2 + *arg1) = 0;\n        }\n    }\n    return arg1;\n}\n",
        "token_count": 405
    },
    "140018e4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "execute .NET assembly via CLR host/2c9ef85a2fe94af39efaaae3fc9e6a8a"
        ],
        "decompiled_code": "\nint64_t * fcn.140018e44(int64_t *arg1, int64_t arg2, ulong arg3)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int64_t iVar3;\n    int64_t *piVar4;\n    ulong uVar5;\n    \n    uVar5 = 0xfffffffffffffffe;\n    iVar3 = (**(_str.P__n_ + 0x18))(\"P;\\n@\\x01\");\n    *arg1 = iVar3 + 0x18;\n    if (0 < arg3) {\n        if (arg2 == 0) {\n            fcn.1400031e0(0x80070057);\n            pcVar1 = swi(3);\n            piVar4 = (*pcVar1)();\n            return piVar4;\n        }\n        uVar2 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)(3, 0, arg2, arg3, 0, 0, uVar5);\n        if ((*(*arg1 + -0xc) - uVar2 | 1U - *(*arg1 + -8)) < 0) {\n            fcn.14001892c(arg1, uVar2);\n        }\n        (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)(3, 0, arg2, arg3, *arg1, uVar2);\n        if ((uVar2 < 0) || (*(*arg1 + -0xc) < uVar2)) {\n            fcn.1400031e0(0x80070057);\n        }\n        else {\n            *(*arg1 + -0x10) = uVar2;\n            *(*arg1 + uVar2 * 2) = 0;\n        }\n    }\n    return arg1;\n}\n",
        "token_count": 393
    },
    "14001c09": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nbool fcn.14001c094(int64_t arg1, int64_t arg2)\n\n{\n    int64_t iVar1;\n    int64_t *piVar2;\n    \n    if (arg2 != 0) {\n        *(arg1 + 8) = arg2;\n        iVar1 = fcn.14001bfcc(1);\n        piVar2 = fcn.14003a6a4(iVar1 + 0x30, *(arg1 + 8));\n        *piVar2 = arg1;\n    }\n    return arg2 != 0;\n}\n",
        "token_count": 125
    },
    "14001bcf": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nbool fcn.14001bcf8(int64_t *arg1, int64_t arg2)\n\n{\n    int64_t iVar1;\n    int64_t **ppiVar2;\n    \n    if (arg2 != 0) {\n        arg1[1] = arg2;\n        iVar1 = fcn.14001bc30(1);\n        ppiVar2 = fcn.14003a6a4(iVar1 + 0x30, arg1[1]);\n        *ppiVar2 = arg1;\n        (**(*arg1 + 0x18))(arg1, arg1[1]);\n    }\n    return arg2 != 0;\n}\n",
        "token_count": 143
    },
    "1400196b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.1400196bc(ulong arg1)\n\n{\n    int64_t iVar1;\n    ulong arg1_00;\n    int64_t arg1_01;\n    ulong uVar2;\n    \n    iVar1 = fcn.140017b90();\n    uVar2 = 0;\n    if ((*(iVar1 + 0x30) == 0) && (arg1 != 0)) {\n        arg1_00 = fcn.140003684(0x140022808);\n        arg1_01 = fcn.140003694(0xb8);\n        if (arg1_01 != 0) {\n            uVar2 = fcn.14002436c(arg1_01, 0x1400a3c20, 0x1400196a4, 0x140019518);\n        }\n        *(iVar1 + 0x30) = uVar2;\n        fcn.140003684(arg1_00);\n    }\n    return *(iVar1 + 0x30);\n}\n",
        "token_count": 224
    },
    "1400197b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nbool fcn.1400197b0(int64_t arg1, int64_t arg2)\n\n{\n    int64_t iVar1;\n    int64_t *piVar2;\n    \n    if (arg2 != 0) {\n        *(arg1 + 8) = arg2;\n        iVar1 = fcn.1400196bc(1);\n        piVar2 = fcn.14003a6a4(iVar1 + 0x30, *(arg1 + 8));\n        *piVar2 = arg1;\n    }\n    return arg2 != 0;\n}\n",
        "token_count": 126
    },
    "140019c3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140019c30(code **arg1)\n\n{\n    uchar auStack616 [64];\n    ulong uStack552;\n    uint64_t uStack24;\n    \n    uStack552 = 0xfffffffffffffffe;\n    uStack24 = *0x1400d96f0 ^ auStack616;\n    *arg1 = vtable.CGdiObject.0;\n    fcn.14001c114(arg1);\n    fcn.140069870(uStack24 ^ auStack616);\n    return;\n}\n",
        "token_count": 111
    },
    "14001a6a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14001a6a4(int64_t arg1, ulong arg2)\n\n{\n    ulong uVar1;\n    \n    uVar1 = 0xffffffff;\n    if (*(arg1 + 8) != *(arg1 + 0x10)) {\n        uVar1 = (*_sym.imp.GDI32.dll_SetBkColor)();\n    }\n    if (*(arg1 + 0x10) != 0) {\n        uVar1 = (*_sym.imp.GDI32.dll_SetBkColor)(*(arg1 + 0x10), arg2);\n    }\n    return uVar1;\n}\n",
        "token_count": 133
    },
    "14001a6e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14001a6e4(int64_t arg1, ulong arg2)\n\n{\n    ulong uVar1;\n    \n    uVar1 = 0;\n    if (*(arg1 + 8) != *(arg1 + 0x10)) {\n        uVar1 = (*_sym.imp.GDI32.dll_SetBkMode)();\n    }\n    if (*(arg1 + 0x10) != 0) {\n        uVar1 = (*_sym.imp.GDI32.dll_SetBkMode)(*(arg1 + 0x10), arg2);\n    }\n    return uVar1;\n}\n",
        "token_count": 132
    },
    "14001a7e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14001a7e4(int64_t arg1, ulong arg2)\n\n{\n    ulong uVar1;\n    \n    uVar1 = 0xffffffff;\n    if (*(arg1 + 8) != *(arg1 + 0x10)) {\n        uVar1 = (*_sym.imp.GDI32.dll_SetTextColor)();\n    }\n    if (*(arg1 + 0x10) != 0) {\n        uVar1 = (*_sym.imp.GDI32.dll_SetTextColor)(*(arg1 + 0x10), arg2);\n    }\n    return uVar1;\n}\n",
        "token_count": 129
    },
    "14001acf": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.14001acf4(int64_t arg1)\n\n{\n    uint uVar1;\n    ulong uVar2;\n    code *pcVar3;\n    \n    uVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(\"GDI32.DLL\");\n    pcVar3 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2, \"GetLayout\");\n    if (pcVar3 == NULL) {\n        uVar1 = 0xffffffff;\n        (*_sym.imp.KERNEL32.dll_SetLastError)(0x78);\n    }\n    else {\n        uVar1 = (*pcVar3)(*(arg1 + 8));\n    }\n    return uVar1;\n}\n",
        "token_count": 150
    },
    "14001ad4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.14001ad40(int64_t arg1, ulong arg2)\n\n{\n    uint uVar1;\n    ulong uVar2;\n    code *pcVar3;\n    \n    uVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(\"GDI32.DLL\");\n    uVar1 = 0;\n    pcVar3 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2, \"SetLayout\");\n    if (pcVar3 == NULL) {\n        if (arg2 != 0) {\n            uVar1 = 0xffffffff;\n            (*_sym.imp.KERNEL32.dll_SetLastError)(0x78);\n        }\n    }\n    else {\n        uVar1 = (*pcVar3)(*(arg1 + 8), arg2);\n    }\n    return uVar1;\n}\n",
        "token_count": 177
    },
    "14001b50": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14001b504(int64_t arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    if (*(arg1 + 8) != *(arg1 + 0x10)) {\n        (*_sym.imp.GDI32.dll_SetWindowOrgEx)(*(arg1 + 8), arg3, arg4, arg2);\n    }\n    if (*(arg1 + 0x10) != 0) {\n        (*_sym.imp.GDI32.dll_SetWindowOrgEx)(*(arg1 + 0x10), arg3, arg4, arg2);\n    }\n    return arg2;\n}\n",
        "token_count": 136
    },
    "14001b6c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14001b6cc(int64_t arg1, int64_t arg2)\n\n{\n    ulong uVar1;\n    ulong uVar2;\n    \n    uVar2 = 0;\n    uVar1 = uVar2;\n    if (*(arg1 + 8) != *(arg1 + 0x10)) {\n        if (arg2 != 0) {\n            uVar1 = *(arg2 + 8);\n        }\n        uVar1 = (*_sym.imp.GDI32.dll_SelectClipRgn)(*(arg1 + 8), uVar1);\n    }\n    if (*(arg1 + 0x10) != 0) {\n        if (arg2 != 0) {\n            uVar2 = *(arg2 + 8);\n        }\n        uVar1 = (*_sym.imp.GDI32.dll_SelectClipRgn)(*(arg1 + 0x10), uVar2);\n    }\n    return uVar1;\n}\n",
        "token_count": 208
    },
    "14001b79": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001b798(int64_t hWnd, uint *arg2)\n\n{\n    uint uVar1;\n    uint32_t uVar2;\n    \n    (*_sym.imp.USER32.dll_ScreenToClient)(*(hWnd + 0x40));\n    (*_sym.imp.USER32.dll_ScreenToClient)(*(hWnd + 0x40), arg2 + 2);\n    uVar2 = fcn.1400152b8(hWnd);\n    if ((uVar2 >> 0x16 & 1) != 0) {\n        uVar1 = *arg2;\n        *arg2 = arg2[2];\n        arg2[2] = uVar1;\n    }\n    return;\n}\n",
        "token_count": 156
    },
    "14001b7f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001b7f0(int64_t hWnd, uint *arg2)\n\n{\n    uint uVar1;\n    uint32_t uVar2;\n    \n    (*_sym.imp.USER32.dll_ClientToScreen)(*(hWnd + 0x40));\n    (*_sym.imp.USER32.dll_ClientToScreen)(*(hWnd + 0x40), arg2 + 2);\n    uVar2 = fcn.1400152b8(hWnd);\n    if ((uVar2 >> 0x16 & 1) != 0) {\n        uVar1 = *arg2;\n        *arg2 = arg2[2];\n        arg2[2] = uVar1;\n    }\n    return;\n}\n",
        "token_count": 156
    },
    "14001b9c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14001b9cc(int64_t arg1, int64_t arg2, ulong arg3)\n\n{\n    ulong uVar1;\n    ulong uVar2;\n    \n    uVar2 = 0;\n    uVar1 = uVar2;\n    if (*(arg1 + 8) != *(arg1 + 0x10)) {\n        if (arg2 != 0) {\n            uVar1 = *(arg2 + 8);\n        }\n        uVar1 = (*_sym.imp.GDI32.dll_ExtSelectClipRgn)(*(arg1 + 8), uVar1);\n    }\n    if (*(arg1 + 0x10) != 0) {\n        if (arg2 != 0) {\n            uVar2 = *(arg2 + 8);\n        }\n        uVar1 = (*_sym.imp.GDI32.dll_ExtSelectClipRgn)(*(arg1 + 0x10), uVar2, arg3);\n    }\n    return uVar1;\n}\n",
        "token_count": 219
    },
    "14001ba4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001ba40(int64_t hdc, uint *arg2)\n\n{\n    uint uVar1;\n    uint uVar2;\n    uint32_t uStackX8;\n    uint32_t uStackX12;\n    uint32_t uStackX16;\n    uint32_t uStackX20;\n    \n    (*_sym.imp.GDI32.dll_GetWindowExtEx)(*(hdc + 0x10), &uStackX8);\n    (*_sym.imp.GDI32.dll_GetViewportExtEx)(*(hdc + 0x10), &uStackX16);\n    uVar1 = fcn.14006bd00(uStackX8);\n    uVar2 = fcn.14006bd00(uStackX16);\n    uVar1 = (*_sym.imp.KERNEL32.dll_MulDiv)(*arg2, uVar2, uVar1);\n    *arg2 = uVar1;\n    uVar1 = fcn.14006bd00(uStackX12);\n    uVar2 = fcn.14006bd00(uStackX20);\n    uVar1 = (*_sym.imp.KERNEL32.dll_MulDiv)(arg2[1], uVar2, uVar1);\n    arg2[1] = uVar1;\n    return;\n}\n",
        "token_count": 277
    },
    "14001bac": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001bac4(int64_t hdc, uint *arg2)\n\n{\n    uint uVar1;\n    uint uVar2;\n    uint32_t uStackX8;\n    uint32_t uStackX12;\n    uint32_t uStackX16;\n    uint32_t uStackX20;\n    \n    (*_sym.imp.GDI32.dll_GetWindowExtEx)(*(hdc + 0x10), &uStackX16);\n    (*_sym.imp.GDI32.dll_GetViewportExtEx)(*(hdc + 0x10), &uStackX8);\n    uVar1 = fcn.14006bd00(uStackX8);\n    uVar2 = fcn.14006bd00(uStackX16);\n    uVar1 = (*_sym.imp.KERNEL32.dll_MulDiv)(*arg2, uVar2, uVar1);\n    *arg2 = uVar1;\n    uVar1 = fcn.14006bd00(uStackX12);\n    uVar2 = fcn.14006bd00(uStackX20);\n    uVar1 = (*_sym.imp.KERNEL32.dll_MulDiv)(arg2[1], uVar2, uVar1);\n    arg2[1] = uVar1;\n    return;\n}\n",
        "token_count": 277
    },
    "14001bc3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14001bc30(ulong arg1)\n\n{\n    int64_t iVar1;\n    ulong arg1_00;\n    int64_t arg1_01;\n    ulong uVar2;\n    \n    iVar1 = fcn.140017b90();\n    uVar2 = 0;\n    if ((*(iVar1 + 0x38) == 0) && (arg1 != 0)) {\n        arg1_00 = fcn.140003684(0x140022808);\n        arg1_01 = fcn.140003694(0xb8);\n        if (arg1_01 != 0) {\n            uVar2 = fcn.14002436c(arg1_01, 0x1400a3f60, 0x14001bba8, 0x14001af5c);\n        }\n        *(iVar1 + 0x38) = uVar2;\n        fcn.140003684(arg1_00);\n    }\n    return *(iVar1 + 0x38);\n}\n",
        "token_count": 226
    },
    "14001bcd": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.14001bcd4(int64_t arg1)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    ulong arg1_00;\n    int64_t iVar3;\n    int64_t *piVar4;\n    \n    iVar1 = fcn.14001bc30(1);\n    if (arg1 == 0) {\n        iVar2 = 0;\n    }\n    else {\n        iVar2 = fcn.14003a45c(iVar1 + 0x30, arg1);\n        if (iVar2 == 0) {\n            iVar2 = fcn.14003a45c(iVar1 + 0x68, arg1);\n            if (iVar2 == 0) {\n                arg1_00 = fcn.140003684(0x140022808);\n                iVar2 = fcn.14004c040(iVar1 + 8);\n                iVar3 = iVar2;\n                if (iVar2 == 0) {\n                    iVar3 = fcn.140020738();\n                }\n                (**(iVar1 + 0x20))(iVar3);\n                piVar4 = fcn.14003a6a4(iVar1 + 0x68, arg1);\n                *piVar4 = iVar2;\n                fcn.140003684(arg1_00);\n                iVar3 = *(iVar1 + 0xa8);\n                *(iVar2 + iVar3) = arg1;\n                if (*(iVar1 + 0xb0) == 2) {\n                    *(iVar2 + 8 + iVar3) = arg1;\n                }\n            }\n            else {\n                iVar3 = *(iVar1 + 0xa8);\n                *(iVar2 + iVar3) = arg1;\n                if (*(iVar1 + 0xb0) == 2) {\n                    *(iVar2 + 8 + iVar3) = arg1;\n                }\n            }\n        }\n    }\n    return iVar2;\n}\n",
        "token_count": 421
    },
    "14001bfc": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14001bfcc(ulong arg1)\n\n{\n    int64_t iVar1;\n    ulong arg1_00;\n    int64_t arg1_01;\n    ulong uVar2;\n    \n    iVar1 = fcn.140017b90();\n    uVar2 = 0;\n    if ((*(iVar1 + 0x40) == 0) && (arg1 != 0)) {\n        arg1_00 = fcn.140003684(0x140022808);\n        arg1_01 = fcn.140003694(0xb8);\n        if (arg1_01 != 0) {\n            uVar2 = fcn.14002436c(arg1_01, 0x1400a4020, 0x14001bbc8, 0x14001af68);\n        }\n        *(iVar1 + 0x40) = uVar2;\n        fcn.140003684(arg1_00);\n    }\n    return *(iVar1 + 0x40);\n}\n",
        "token_count": 223
    },
    "14001c07": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.14001c070(int64_t arg1)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    ulong arg1_00;\n    int64_t iVar3;\n    int64_t *piVar4;\n    \n    iVar1 = fcn.14001bfcc(1);\n    if (arg1 == 0) {\n        iVar2 = 0;\n    }\n    else {\n        iVar2 = fcn.14003a45c(iVar1 + 0x30, arg1);\n        if (iVar2 == 0) {\n            iVar2 = fcn.14003a45c(iVar1 + 0x68, arg1);\n            if (iVar2 == 0) {\n                arg1_00 = fcn.140003684(0x140022808);\n                iVar2 = fcn.14004c040(iVar1 + 8);\n                iVar3 = iVar2;\n                if (iVar2 == 0) {\n                    iVar3 = fcn.140020738();\n                }\n                (**(iVar1 + 0x20))(iVar3);\n                piVar4 = fcn.14003a6a4(iVar1 + 0x68, arg1);\n                *piVar4 = iVar2;\n                fcn.140003684(arg1_00);\n                iVar3 = *(iVar1 + 0xa8);\n                *(iVar2 + iVar3) = arg1;\n                if (*(iVar1 + 0xb0) == 2) {\n                    *(iVar2 + 8 + iVar3) = arg1;\n                }\n            }\n            else {\n                iVar3 = *(iVar1 + 0xa8);\n                *(iVar2 + iVar3) = arg1;\n                if (*(iVar1 + 0xb0) == 2) {\n                    *(iVar2 + 8 + iVar3) = arg1;\n                }\n            }\n        }\n    }\n    return iVar2;\n}\n",
        "token_count": 421
    },
    "14001c23": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.14001c230(ulong hdc, ulong hgdiobj)\n\n{\n    int64_t iVar1;\n    int64_t arg2;\n    int64_t iVar2;\n    ulong arg1;\n    int64_t iVar3;\n    int64_t *piVar4;\n    \n    arg2 = (*_sym.imp.GDI32.dll_SelectObject)();\n    iVar1 = fcn.14001bfcc(1);\n    if (arg2 == 0) {\n        iVar2 = 0;\n    }\n    else {\n        iVar2 = fcn.14003a45c(iVar1 + 0x30, arg2);\n        if (iVar2 == 0) {\n            iVar2 = fcn.14003a45c(iVar1 + 0x68, arg2);\n            if (iVar2 == 0) {\n                arg1 = fcn.140003684(0x140022808);\n                iVar2 = fcn.14004c040(iVar1 + 8);\n                iVar3 = iVar2;\n                if (iVar2 == 0) {\n                    iVar3 = fcn.140020738();\n                }\n                (**(iVar1 + 0x20))(iVar3);\n                piVar4 = fcn.14003a6a4(iVar1 + 0x68, arg2);\n                *piVar4 = iVar2;\n                fcn.140003684(arg1);\n                iVar3 = *(iVar1 + 0xa8);\n                *(iVar2 + iVar3) = arg2;\n                if (*(iVar1 + 0xb0) == 2) {\n                    *(iVar2 + 8 + iVar3) = arg2;\n                }\n            }\n            else {\n                iVar3 = *(iVar1 + 0xa8);\n                *(iVar2 + iVar3) = arg2;\n                if (*(iVar1 + 0xb0) == 2) {\n                    *(iVar2 + 8 + iVar3) = arg2;\n                }\n            }\n        }\n    }\n    return iVar2;\n}\n",
        "token_count": 440
    },
    "14001c30": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.14001c308(int64_t arg1, int64_t arg2)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    ulong arg1_00;\n    int64_t iVar4;\n    int64_t *piVar5;\n    \n    iVar1 = 0;\n    iVar2 = iVar1;\n    if (*(arg1 + 8) != *(arg1 + 0x10)) {\n        if (arg2 != 0) {\n            iVar2 = *(arg2 + 8);\n        }\n        iVar2 = (*_sym.imp.GDI32.dll_SelectObject)(*(arg1 + 8), iVar2);\n    }\n    if (*(arg1 + 0x10) != 0) {\n        if (arg2 != 0) {\n            iVar1 = *(arg2 + 8);\n        }\n        iVar2 = (*_sym.imp.GDI32.dll_SelectObject)(*(arg1 + 0x10), iVar1);\n    }\n    iVar1 = fcn.14001bfcc(1);\n    if (iVar2 == 0) {\n        iVar3 = 0;\n    }\n    else {\n        iVar3 = fcn.14003a45c(iVar1 + 0x30, iVar2);\n        if (iVar3 == 0) {\n            iVar3 = fcn.14003a45c(iVar1 + 0x68, iVar2);\n            if (iVar3 == 0) {\n                arg1_00 = fcn.140003684(0x140022808);\n                iVar3 = fcn.14004c040(iVar1 + 8);\n                iVar4 = iVar3;\n                if (iVar3 == 0) {\n                    iVar4 = fcn.140020738();\n                }\n                (**(iVar1 + 0x20))(iVar4);\n                piVar5 = fcn.14003a6a4(iVar1 + 0x68, iVar2);\n                *piVar5 = iVar3;\n                fcn.140003684(arg1_00);\n                iVar4 = *(iVar1 + 0xa8);\n                *(iVar3 + iVar4) = iVar2;\n                if (*(iVar1 + 0xb0) == 2) {\n                    *(iVar3 + 8 + iVar4) = iVar2;\n                }\n            }\n            else {\n                iVar4 = *(iVar1 + 0xa8);\n                *(iVar3 + iVar4) = iVar2;\n                if (*(iVar1 + 0xb0) == 2) {\n                    *(iVar3 + 8 + iVar4) = iVar2;\n                }\n            }\n        }\n    }\n    return iVar3;\n}\n",
        "token_count": 586
    },
    "14001c37": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.14001c374(int64_t arg1, int64_t arg2)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    ulong arg1_00;\n    int64_t iVar4;\n    int64_t *piVar5;\n    \n    iVar1 = 0;\n    iVar2 = iVar1;\n    if (*(arg1 + 8) != *(arg1 + 0x10)) {\n        if (arg2 != 0) {\n            iVar2 = *(arg2 + 8);\n        }\n        iVar2 = (*_sym.imp.GDI32.dll_SelectObject)(*(arg1 + 8), iVar2);\n    }\n    if (*(arg1 + 0x10) != 0) {\n        if (arg2 != 0) {\n            iVar1 = *(arg2 + 8);\n        }\n        iVar2 = (*_sym.imp.GDI32.dll_SelectObject)(*(arg1 + 0x10), iVar1);\n    }\n    iVar1 = fcn.14001bfcc(1);\n    if (iVar2 == 0) {\n        iVar3 = 0;\n    }\n    else {\n        iVar3 = fcn.14003a45c(iVar1 + 0x30, iVar2);\n        if (iVar3 == 0) {\n            iVar3 = fcn.14003a45c(iVar1 + 0x68, iVar2);\n            if (iVar3 == 0) {\n                arg1_00 = fcn.140003684(0x140022808);\n                iVar3 = fcn.14004c040(iVar1 + 8);\n                iVar4 = iVar3;\n                if (iVar3 == 0) {\n                    iVar4 = fcn.140020738();\n                }\n                (**(iVar1 + 0x20))(iVar4);\n                piVar5 = fcn.14003a6a4(iVar1 + 0x68, iVar2);\n                *piVar5 = iVar3;\n                fcn.140003684(arg1_00);\n                iVar4 = *(iVar1 + 0xa8);\n                *(iVar3 + iVar4) = iVar2;\n                if (*(iVar1 + 0xb0) == 2) {\n                    *(iVar3 + 8 + iVar4) = iVar2;\n                }\n            }\n            else {\n                iVar4 = *(iVar1 + 0xa8);\n                *(iVar3 + iVar4) = iVar2;\n                if (*(iVar1 + 0xb0) == 2) {\n                    *(iVar3 + 8 + iVar4) = iVar2;\n                }\n            }\n        }\n    }\n    return iVar3;\n}\n",
        "token_count": 586
    },
    "14001dd6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.14001dd6c(int64_t arg1)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.140020b84(arg1, \"PI\\n@\\x01\");\n    if (iVar1 == 0) {\n        iVar1 = fcn.140020b84(arg1, \"`K\\n@\\x01\");\n        if (iVar1 == 0) {\n            iVar1 = fcn.140020b84(arg1, \"HK\\n@\\x01\");\n            iVar1 = (-(iVar1 != 0) & 0xffff4002) + 0x8000ffff;\n        }\n        else {\n            iVar1 = -0x7ff8fff2;\n        }\n    }\n    else {\n        iVar1 = *(arg1 + 0x10);\n    }\n    return iVar1;\n}\n",
        "token_count": 183
    },
    "14001deb": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint16_t * fcn.14001deb8(int16_t *arg1, ulong noname_1, int16_t *arg3)\n\n{\n    code *pcVar1;\n    int16_t *piVar2;\n    \n    if (arg3 == NULL) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        piVar2 = (*pcVar1)();\n        return piVar2;\n    }\n    if ((arg1 == NULL) && (noname_1 != 0)) {\n        *(arg3 + 10) = 0xffffffff;\n        *(arg3 + 0xc) = 0xffffffff;\n        *arg3 = noname_1;\n        *(arg3 + 4) = 0;\n        *(arg3 + 8) = 1;\n        arg1 = arg3;\n    }\n    return arg1;\n}\n",
        "token_count": 190
    },
    "14001e7d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.14001e7d0(int64_t arg1, ulong hMem)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint64_t uVar4;\n    uint64_t uVar5;\n    ulong arg3;\n    ulong arg1_00;\n    int64_t iVar6;\n    \n    uVar4 = (*_sym.imp.KERNEL32.dll_GlobalSize)(hMem);\n    if (arg1 == 0) {\n        arg1 = (*_sym.imp.KERNEL32.dll_GlobalAlloc)(0x2002);\n        if (arg1 != 0) {\ncode_r0x00014001e828:\n            arg3 = (*_sym.imp.KERNEL32.dll_GlobalLock)(hMem);\n            arg1_00 = (*_sym.imp.KERNEL32.dll_GlobalLock)(arg1);\n            uVar2 = (*_sym.imp.KERNEL32.dll_GlobalSize)(arg1);\n            iVar3 = fcn.140069a48(arg1_00, uVar2, arg3, uVar4 & 0xffffffff);\n            if (iVar3 != 0) {\n                if (iVar3 == 0xc) {\n                    fcn.140020738();\n                    pcVar1 = swi(3);\n                    iVar6 = (*pcVar1)();\n                    return iVar6;\n                }\n                if ((iVar3 == 0x16) || (iVar3 == 0x22)) {\n                    fcn.140020780();\n                    pcVar1 = swi(3);\n                    iVar6 = (*pcVar1)();\n                    return iVar6;\n                }\n                if (iVar3 != 0x50) {\n                    fcn.140020780();\n                    pcVar1 = swi(3);\n                    iVar6 = (*pcVar1)();\n                    return iVar6;\n                }\n            }\n            (*_sym.imp.KERNEL32.dll_GlobalUnlock)(arg1);\n            (*_sym.imp.KERNEL32.dll_GlobalUnlock)(hMem);\n            return arg1;\n        }\n    }\n    else {\n        uVar5 = (*_sym.imp.KERNEL32.dll_GlobalSize)(arg1);\n        if (uVar4 <= uVar5) goto code_r0x00014001e828;\n    }\n    return 0;\n}\n",
        "token_count": 489
    },
    "14001ea3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001ea34(int64_t **arg1)\n\n{\n    if (*arg1 != NULL) {\n        (**(**arg1 + 0x10))();\n    }\n    return;\n}\n",
        "token_count": 44
    },
    "14001ea4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001ea4c(int64_t **arg1)\n\n{\n    if (*arg1 != NULL) {\n        (**(**arg1 + 0x10))();\n    }\n    return;\n}\n",
        "token_count": 45
    },
    "14001ea9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.14001ea94(uint32_t *cb)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    \n    if ((cb == NULL) || (iVar3 = (*_sym.imp.ole32.dll_CoTaskMemAlloc)(*cb),  iVar3 == 0)) {\n        iVar3 = 0;\n    }\n    else {\n        iVar2 = fcn.140069a48(iVar3, *cb, cb, *cb);\n        if (iVar2 != 0) {\n            if (iVar2 == 0xc) {\n                fcn.140020738();\n                pcVar1 = swi(3);\n                iVar3 = (*pcVar1)();\n                return iVar3;\n            }\n            if ((iVar2 == 0x16) || (iVar2 == 0x22)) {\n                fcn.140020780();\n                pcVar1 = swi(3);\n                iVar3 = (*pcVar1)();\n                return iVar3;\n            }\n            if (iVar2 != 0x50) {\n                fcn.140020780();\n                pcVar1 = swi(3);\n                iVar3 = (*pcVar1)();\n                return iVar3;\n            }\n        }\n    }\n    return iVar3;\n}\n",
        "token_count": 278
    },
    "14001eb0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nvoid fcn.14001eb04(ushort *arg1, ushort *arg2)\n\n{\n    ulong uVar1;\n    \n    *arg1 = *arg2;\n    uVar1 = fcn.14001ea94(*(arg2 + 4));\n    *(arg1 + 4) = uVar1;\n    *(arg1 + 8) = *(arg2 + 8);\n    *(arg1 + 10) = *(arg2 + 10);\n    *(arg1 + 0xc) = *(arg2 + 0xc);\n    return;\n}\n",
        "token_count": 123
    },
    "14001eea": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001eeac(int64_t **arg1)\n\n{\n    if (*arg1 != NULL) {\n        (**(**arg1 + 0x10))();\n    }\n    return;\n}\n",
        "token_count": 44
    },
    "14001eec": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001eec4(int64_t **arg1)\n\n{\n    if (*arg1 != NULL) {\n        (**(**arg1 + 0x10))();\n    }\n    return;\n}\n",
        "token_count": 44
    },
    "14001f07": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t * fcn.14001f070(int64_t *arg1, int64_t lpWideCharStr, int64_t noname_2, ulong arg4)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int64_t *piVar3;\n    int64_t noname_1;\n    uint32_t uVar4;\n    \n    if (lpWideCharStr == 0) {\n        uVar4 = 0;\n        noname_1 = lpWideCharStr;\n    }\n    else {\n        noname_1 = 0;\n        noname_2 = lpWideCharStr;\n        iVar2 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(3, 0, lpWideCharStr, 0xffffffff, 0, 0, 0, 0);\n        uVar4 = iVar2 - 1;\n    }\n    if (uVar4 < 1) {\n        fcn.140004828(arg1, noname_1, noname_2);\n    }\n    else {\n        if ((1U - *(*arg1 + -8) | *(*arg1 + -0xc) - uVar4) < 0) {\n            fcn.1400033e0(arg1, uVar4);\n        }\n        (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(3, 0, lpWideCharStr, 0xffffffff, *arg1, uVar4, 0, 0);\n        if (*(*arg1 + -0xc) < uVar4) {\n            fcn.1400031e0(0x80070057);\n            pcVar1 = swi(3);\n            piVar3 = (*pcVar1)();\n            return piVar3;\n        }\n        *(*arg1 + -0x10) = uVar4;\n        *(uVar4 + *arg1) = 0;\n    }\n    return arg1;\n}\n",
        "token_count": 423
    },
    "14001f89": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nulong fcn.14001f898(int64_t *arg1, ulong hModule, ulong arg3)\n\n{\n    uint32_t uVar1;\n    uint16_t uVar2;\n    code *pcVar3;\n    int64_t arg2;\n    uint16_t *puVar4;\n    ulong uVar5;\n    \n    arg2 = (*_sym.imp.KERNEL32.dll_FindResourceA)(hModule, (arg3 >> 4) + 1);\n    if ((arg2 == 0) || (puVar4 = fcn.140003210(hModule, arg2, arg3),  puVar4 == NULL)) {\n        uVar5 = 0;\n    }\n    else {\n        uVar2 = *puVar4;\n        if ((1U - *(*arg1 + -8) | *(*arg1 + -0xc) - uVar2) < 0) {\n            fcn.14001892c(arg1, uVar2);\n        }\n        fcn.14001e560(*arg1, uVar2, puVar4 + 1, *puVar4);\n        uVar1 = *(*arg1 + -0xc);\n        if (uVar2 != uVar1 && uVar1 <= uVar2) {\n            fcn.1400031e0(0x80070057);\n            pcVar3 = swi(3);\n            uVar5 = (*pcVar3)();\n            return uVar5;\n        }\n        *(*arg1 + -0x10) = uVar2;\n        uVar5 = 1;\n        *(*arg1 + uVar2 * 2) = 0;\n    }\n    return uVar5;\n}\n",
        "token_count": 364
    },
    "1400201a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_10h\n// WARNING: Variable defined which should be unmapped: var_18h\n// WARNING: Variable defined which should be unmapped: var_bp_20h\n\nvoid fcn.1400201a0(uint16_t *arg1, int64_t arg2)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    uchar *puVar3;\n    char cVar4;\n    uint16_t uVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    ulong *puVar9;\n    ulong *puVar10;\n    int32_t *piVar11;\n    uint16_t uVar12;\n    uint64_t uVar13;\n    ulong *arg2_00;\n    uchar *puVar14;\n    uchar *puVar15;\n    ulong *arg2_01;\n    ulong in_R8;\n    ulong in_R9;\n    int32_t iVar16;\n    int32_t iVar17;\n    ulong var_8h;\n    ulong var_10h;\n    ulong var_18h;\n    ulong var_bp_20h;\n    ulong var_28h;\n    ulong var_30h;\n    ulong var_60h;\n    ulong var_68h;\n    ulong var_70h;\n    uchar auStack120 [32];\n    int64_t iStack88;\n    int64_t iStack80;\n    int64_t iStack72;\n    ulong *puStack64;\n    ulong uStack56;\n    uint64_t uStack48;\n    \n    puVar14 = &stack0xffffffffffffff88;\n    puVar15 = &stack0xffffffffffffff88;\n    uStack56 = 0xfffffffffffffffe;\n    uStack48 = *0x1400d96f0 ^ &stack0xffffffffffffffa8;\n    puVar10 = NULL;\n    iVar8 = 0;\n    puStack64 = NULL;\n    puVar9 = puVar10;\n    if (*arg1 != 0) {\n        puVar9 = *arg1 + arg1;\n    }\n    arg2_00 = puVar10;\n    if (arg1[1] != 0) {\n        arg2_00 = arg1[1] + arg1;\n    }\n    arg2_01 = puVar10;\n    if (arg1[2] != 0) {\n        arg2_01 = arg1[2] + arg1;\n    }\n    if (puVar9 == NULL) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    if (arg2_00 == NULL) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    if (arg2_01 == NULL) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    fcn.14002010c(&stack0xffffffffffffffa8, puVar9);\n    fcn.14002010c(&stack0xffffffffffffffb8, arg2_00);\n    fcn.14002010c(&stack0xffffffffffffffb0, arg2_01);\n    iVar17 = 0;\n    iVar7 = iVar17;\n    if (puVar9 != NULL) {\n        iVar7 = *(iStack88 + -0x10) * 2 + 2;\n    }\n    if (arg2_00 != NULL) {\n        iVar8 = *(iStack72 + -0x10) * 2 + 2;\n    }\n    if (arg2_01 != NULL) {\n        iVar17 = *(iStack80 + -0x10) * 2 + 2;\n    }\n    puVar3 = &stack0xffffffffffffff88;\n    if (arg2 != 0) {\n        uVar13 = *(arg2 + 0x26) + 0xdc;\n        if ((uVar13 < 0x401) && (cVar4 = fcn.14001ebe0(uVar13),  cVar4 != '\\0')) {\n            uVar13 = *(arg2 + 0x26) + 0xeb;\n            if (uVar13 <= *(arg2 + 0x26) + 0xdc) {\n                uVar13 = 0xffffffffffffff0;\n            }\n            uVar13 = uVar13 & 0xfffffffffffffff0;\n            fcn.140097600();\n            puVar10 = &stack0xffffffffffffffa8 + -uVar13;\n            puVar14 = &stack0xffffffffffffff88 + -uVar13;\n        }\n        else {\n            if (-(*(arg2 + 0x26) + 0xdc) - 1 < 0x10) {\n                fcn.1400031e0(0x80070057);\n                goto code_r0x00014002057c;\n            }\n            puVar9 = fcn.140069d98(*(arg2 + 0x26) + 0xec);\n            if (puVar9 != NULL) {\n                *puVar9 = 0;\n                puStack64 = puVar9;\n                puVar10 = puVar9 + 2;\n                puVar14 = &stack0xffffffffffffff88;\n            }\n        }\n        *(puVar14 + -8) = 0x14002035d;\n        puVar10 = fcn.14001ec64(puVar10, arg2, in_R8, in_R9);\n        puVar3 = puVar14;\n    }\n    puVar15 = puVar3;\n    if (puVar10 == NULL) {\n        *(puVar15 + -8) = 0x140020373;\n        fcn.140020780();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    iVar16 = *(puVar10 + 0x44) + *(puVar10 + 0x46) + 0x10 + iVar17 + iVar8 + iVar7;\n    *(puVar15 + -8) = 0x140020393;\n    piVar11 = (*_sym.imp.ole32.dll_CoTaskMemAlloc)();\n    iVar2 = iStack88;\n    if (piVar11 != NULL) {\n        *piVar11 = iVar16;\n        *(piVar11 + 1) = 0x10;\n        if (0 < iVar7) {\n            iVar6 = *(iStack88 + -0x10);\n            *(puVar15 + -8) = 0x1400203c6;\n            iVar6 = fcn.14006bd28(piVar11 + 4, iVar6 + 1, iVar2);\n            if (iVar6 != 0) {\n                if (iVar6 == 0xc) {\n                    *(puVar15 + -8) = 0x1400203f0;\n                    fcn.140020738();\n                    pcVar1 = swi(3);\n                    (*pcVar1)();\n                    return;\n                }\n                if ((iVar6 == 0x16) || (iVar6 == 0x22)) {\n                    *(puVar15 + -8) = 0x1400203ea;\n                    fcn.140020780();\n                    pcVar1 = swi(3);\n                    (*pcVar1)();\n                    return;\n                }\n                if (iVar6 != 0x50) {\n                    *(puVar15 + -8) = 0x1400203e4;\n                    fcn.140020780();\n                    pcVar1 = swi(3);\n                    (*pcVar1)();\n                    return;\n                }\n            }\n        }\n        iVar2 = iStack72;\n        uVar12 = *(piVar11 + 1) + iVar7;\n        *(piVar11 + 6) = uVar12;\n        if (0 < iVar8) {\n            iVar7 = *(iStack72 + -0x10);\n            *(puVar15 + -8) = 0x14002041a;\n            iVar7 = fcn.14006bd28(uVar12 + piVar11, iVar7 + 1, iVar2);\n            if (iVar7 != 0) {\n                if (iVar7 == 0xc) {\n                    *(puVar15 + -8) = 0x140020444;\n                    fcn.140020738();\n                    pcVar1 = swi(3);\n                    (*pcVar1)();\n                    return;\n                }\n                if ((iVar7 == 0x16) || (iVar7 == 0x22)) {\n                    *(puVar15 + -8) = 0x14002043e;\n                    fcn.140020780();\n                    pcVar1 = swi(3);\n                    (*pcVar1)();\n                    return;\n                }\n                if (iVar7 != 0x50) {\n                    *(puVar15 + -8) = 0x140020438;\n                    fcn.140020780();\n                    pcVar1 = swi(3);\n                    (*pcVar1)();\n                    return;\n                }\n            }\n        }\n        iVar2 = iStack80;\n        uVar12 = *(piVar11 + 6) + iVar8;\n        *(piVar11 + 2) = uVar12;\n        if (iVar17 != 0) {\n            iVar8 = *(iStack80 + -0x10);\n            *(puVar15 + -8) = 0x14002046e;\n            iVar8 = fcn.14006bd28(uVar12 + piVar11, iVar8 + 1, iVar2);\n            if (iVar8 != 0) {\n                if (iVar8 == 0xc) {\n                    *(puVar15 + -8) = 0x140020498;\n                    fcn.140020738();\n                    pcVar1 = swi(3);\n                    (*pcVar1)();\n                    return;\n                }\n                if ((iVar8 == 0x16) || (iVar8 == 0x22)) {\n                    *(puVar15 + -8) = 0x140020492;\n                    fcn.140020780();\n                    pcVar1 = swi(3);\n                    (*pcVar1)();\n                    return;\n                }\n                if (iVar8 != 0x50) {\n                    *(puVar15 + -8) = 0x14002048c;\n                    fcn.140020780();\n                    pcVar1 = swi(3);\n                    (*pcVar1)();\n                    return;\n                }\n            }\n        }\n        uVar5 = *(piVar11 + 2) + iVar17;\n        *(piVar11 + 10) = uVar5;\n        uVar12 = *(puVar10 + 0x46);\n        *(puVar15 + -8) = 0x1400204c4;\n        iVar8 = fcn.140069a48(uVar5 + piVar11, iVar16 - uVar5, puVar10, uVar12 + 0xdc);\n        if (iVar8 != 0) {\n            if (iVar8 == 0xc) {\n                *(puVar15 + -8) = 0x1400204ee;\n                fcn.140020738();\n            }\n            else {\n                if ((iVar8 == 0x16) || (iVar8 == 0x22)) {\n                    *(puVar15 + -8) = 0x1400204e8;\n                    fcn.140020780();\n                    pcVar1 = swi(3);\n                    (*pcVar1)();\n                    return;\n                }\n                if (iVar8 != 0x50) {\n                    *(puVar15 + -8) = 0x1400204e2;\n                    fcn.140020780();\n                    pcVar1 = swi(3);\n                    (*pcVar1)();\n                    return;\n                }\n            }\n        }\n    }\n    LOCK();\n    piVar11 = iStack80 + -8;\n    iVar8 = *piVar11;\n    *piVar11 = *piVar11 + -1;\n    if (iVar8 + -1 < 1) {\n        pcVar1 = *(**(iStack80 + -0x18) + 8);\n        *(puVar15 + -8) = 0x140020512;\n        (*pcVar1)();\n    }\n    LOCK();\n    piVar11 = iStack72 + -8;\n    iVar8 = *piVar11;\n    *piVar11 = *piVar11 + -1;\n    if (iVar8 + -1 < 1) {\n        pcVar1 = *(**(iStack72 + -0x18) + 8);\n        *(puVar15 + -8) = 0x140020532;\n        (*pcVar1)();\n    }\n    LOCK();\n    piVar11 = iStack88 + -8;\n    iVar8 = *piVar11;\n    *piVar11 = *piVar11 + -1;\n    puVar10 = puStack64;\n    if (iVar8 + -1 < 1) {\n        pcVar1 = *(**(iStack88 + -0x18) + 8);\n        *(puVar15 + -8) = 0x140020552;\n        (*pcVar1)();\n        puVar10 = puStack64;\n    }\n    while (puVar10 != NULL) {\n        puVar9 = *puVar10;\n        *(puVar15 + -8) = 0x140020567;\n        fcn.140069e50(puVar10);\n        puVar10 = puVar9;\n    }\ncode_r0x00014002057c:\n    uVar13 = uStack48 ^ &stack0xffffffffffffffa8;\n    *(puVar15 + -8) = 0x140020588;\n    fcn.140069870(uVar13);\n    return;\n}\n",
        "token_count": 3007
    },
    "14002070": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nvoid fcn.140020700(int64_t arg1)\n\n{\n    int32_t iVar1;\n    \n    *(arg1 + 0x14) = 1;\n    iVar1 = fcn.140017c2c(*(arg1 + 0x9c), arg1 + 0x1c, 0x80);\n    *(arg1 + 0x18) = iVar1 != 0;\n    return;\n}\n",
        "token_count": 94
    },
    "140020b2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140020b28(int64_t arg1, int64_t arg2)\n\n{\n    code *pcVar1;\n    ulong uVar2;\n    \n    if (arg1 == 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        uVar2 = (*pcVar1)();\n        return uVar2;\n    }\n    if (arg2 != 0) {\n        do {\n            if (arg1 == arg2) {\n                return 1;\n            }\n            arg1 = *(arg1 + 0x18);\n        } while (arg1 != 0);\n        return 0;\n    }\n    fcn.140020780();\n    pcVar1 = swi(3);\n    uVar2 = (*pcVar1)();\n    return uVar2;\n}\n",
        "token_count": 177
    },
    "140020b8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140020b84(ulong *arg1, int64_t arg2)\n\n{\n    code *pcVar1;\n    ulong uVar2;\n    int64_t iVar3;\n    \n    if (arg1 == NULL) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        uVar2 = (*pcVar1)();\n        return uVar2;\n    }\n    iVar3 = (***arg1)();\n    if (iVar3 == 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        uVar2 = (*pcVar1)();\n        return uVar2;\n    }\n    if (iVar3 == 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        uVar2 = (*pcVar1)();\n        return uVar2;\n    }\n    if (arg2 != 0) {\n        do {\n            if (iVar3 == arg2) {\n                return 1;\n            }\n            iVar3 = *(iVar3 + 0x18);\n        } while (iVar3 != 0);\n        return 0;\n    }\n    fcn.140020780();\n    pcVar1 = swi(3);\n    uVar2 = (*pcVar1)();\n    return uVar2;\n}\n",
        "token_count": 284
    },
    "140020bb": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.140020bb8(ulong arg1, int64_t arg2)\n\n{\n    int32_t iVar1;\n    \n    if ((arg2 == 0) || (iVar1 = fcn.140020b84(arg2, arg1),  iVar1 == 0)) {\n        arg2 = 0;\n    }\n    return arg2;\n}\n",
        "token_count": 81
    },
    "140020be": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00014002418d)\n\nvoid fcn.140020be4(ulong arg1)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.140017ad4();\n    fcn.1400240f0(0);\n    fcn.140022dcc(iVar1 + 0x30, arg1);\n    // WARNING: Could not recover jumptable at 0x0001400241a9. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(0x1400de790);\n    return;\n}\n",
        "token_count": 143
    },
    "140020c9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140020c90(int64_t arg1, ulong arg2)\n\n{\n    ulong uVar1;\n    \n    fcn.140069e50(*(arg1 + 0xa8));\n    uVar1 = fcn.14006ae94(arg2);\n    *(arg1 + 0xa8) = uVar1;\n    fcn.140069e50(*(arg1 + 0xd0));\n    uVar1 = fcn.14006ae94(*(arg1 + 0xa0));\n    *(arg1 + 0xd0) = uVar1;\n    return;\n}\n",
        "token_count": 131
    },
    "140020d4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140020d40(int64_t arg1)\n\n{\n    int32_t iVar1;\n    uchar auStackX16 [8];\n    int64_t iStackX24;\n    int64_t iStackX32;\n    int64_t *piVar2;\n    uint64_t uVar3;\n    ulong auStack24 [2];\n    \n    auStack24[0] = 0;\n    iStackX24 = 0;\n    iStackX32 = 0;\n    piVar2 = &iStackX24;\n    iVar1 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyExA)(0xffffffff80000001, \"software\", 0, 0x2001f, piVar2);\n    if (iVar1 == 0) {\n        uVar3 = piVar2 & 0xffffffff00000000;\n        iVar1 = (*_sym.imp.ADVAPI32.dll_RegCreateKeyExA)\n                          (iStackX24, *(arg1 + 0xa8), 0, 0, uVar3, 0x2001f, 0, &iStackX32, auStackX16);\n        if (iVar1 == 0) {\n            (*_sym.imp.ADVAPI32.dll_RegCreateKeyExA)\n                      (iStackX32, *(arg1 + 0xd0), 0, 0, uVar3 & 0xffffffff00000000, 0x2001f, 0, auStack24, auStackX16);\n        }\n    }\n    if (iStackX24 != 0) {\n        (*_sym.imp.ADVAPI32.dll_RegCloseKey)();\n    }\n    if (iStackX32 != 0) {\n        (*_sym.imp.ADVAPI32.dll_RegCloseKey)();\n    }\n    return auStack24[0];\n}\n",
        "token_count": 397
    },
    "140020e4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.140020e44(ulong arg1, ulong arg2)\n\n{\n    int64_t iVar1;\n    uchar auStackX24 [8];\n    int64_t iStackX32;\n    \n    iStackX32 = 0;\n    iVar1 = fcn.140020d40(arg1);\n    if (iVar1 != 0) {\n        (*_sym.imp.ADVAPI32.dll_RegCreateKeyExA)(iVar1, arg2, 0, 0, 0, 0x2001f, 0, &iStackX32, auStackX24);\n        (*_sym.imp.ADVAPI32.dll_RegCloseKey)(iVar1);\n        iVar1 = iStackX32;\n    }\n    return iVar1;\n}\n",
        "token_count": 166
    },
    "140020f5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140020f58(int64_t arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int64_t iVar1;\n    uchar auStack120 [32];\n    uint *puStack88;\n    uint uStack80;\n    uint auStack72 [2];\n    uchar auStack64 [16];\n    uint64_t uStack48;\n    \n    uStack48 = *0x1400d96f0 ^ auStack120;\n    auStack72[0] = arg4;\n    if (*(arg1 + 0xa8) == 0) {\n        fcn.14006aa00(auStack64, 0x10, 0x1400a4fac, arg4);\n        (*_sym.imp.KERNEL32.dll_WritePrivateProfileStringA)(arg2, arg3, auStack64, *(arg1 + 0xd0));\n    }\n    else {\n        iVar1 = fcn.140020e44(arg1, arg2);\n        if (iVar1 != 0) {\n            puStack88 = auStack72;\n            uStack80 = 4;\n            (*_sym.imp.ADVAPI32.dll_RegSetValueExA)(iVar1, arg3, 0);\n            (*_sym.imp.ADVAPI32.dll_RegCloseKey)(iVar1);\n        }\n    }\n    fcn.140069870(uStack48 ^ auStack120);\n    return;\n}\n",
        "token_count": 304
    },
    "14002124": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140021248(int64_t *arg1)\n\n{\n    if (*arg1 != 0) {\n        (*_sym.imp.ADVAPI32.dll_RegCloseKey)();\n        *arg1 = 0;\n    }\n    *(arg1 + 1) = 0;\n    return;\n}\n",
        "token_count": 66
    },
    "1400219b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400219b8(code **arg1)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    code *pcVar3;\n    \n    *arg1 = vtable.CRecentFileList.0;\n    pcVar3 = arg1[2];\n    if (pcVar3 != NULL) {\n        fcn.14006c244(pcVar3, 8, *(pcVar3 + -8), fcn.140002fb0);\n        fcn.1400036d8(pcVar3 + -8);\n    }\n    pcVar3 = arg1[6];\n    LOCK();\n    piVar1 = pcVar3 + -8;\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 + -1 < 1) {\n        (**(**(pcVar3 + -0x18) + 8))();\n    }\n    pcVar3 = arg1[4];\n    LOCK();\n    piVar1 = pcVar3 + -8;\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 + -1 < 1) {\n        (**(**(pcVar3 + -0x18) + 8))();\n    }\n    pcVar3 = arg1[3];\n    LOCK();\n    piVar1 = pcVar3 + -8;\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 + -1 < 1) {\n        (**(**(pcVar3 + -0x18) + 8))();\n    }\n    return;\n}\n",
        "token_count": 370
    },
    "140021dc": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t * fcn.140021dcc(int64_t *arg1, int64_t *arg2, ulong *arg3)\n\n{\n    code *pcVar1;\n    int64_t *piVar2;\n    int64_t iVar3;\n    \n    if (*(*arg2 + -0x18) == NULL) {\n        piVar2 = NULL;\n    }\n    else {\n        piVar2 = (**(**(*arg2 + -0x18) + 0x20))();\n    }\n    if (piVar2 == NULL) {\n        piVar2 = fcn.140017fc0();\n        piVar2 = (**(*piVar2 + 0x20))();\n    }\n    if (piVar2 == NULL) {\n        fcn.1400031e0(0x80004005);\n        pcVar1 = swi(3);\n        piVar2 = (*pcVar1)();\n        return piVar2;\n    }\n    iVar3 = (**(*piVar2 + 0x18))(piVar2);\n    *arg1 = iVar3 + 0x18;\n    fcn.140007a14(arg1, *arg2, *(*arg2 + -0x10), *arg3);\n    return arg1;\n}\n",
        "token_count": 270
    },
    "140021fe": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** fcn.140021fe8(code **arg1, ulong arg2, int64_t arg3, int64_t arg4)\n\n{\n    code *pcVar1;\n    uchar auVar2 [16];\n    uint32_t uVar3;\n    int64_t *piVar4;\n    code **ppcVar5;\n    int64_t iVar6;\n    uint64_t uVar7;\n    int32_t *piVar8;\n    int32_t *arg3_00;\n    int32_t *piVar9;\n    int32_t in_stack_00000028;\n    uint in_stack_00000030;\n    \n    *arg1 = vtable.CRecentFileList.0;\n    piVar4 = fcn.140017fc0();\n    arg3_00 = NULL;\n    if (piVar4 == NULL) {\n        fcn.1400031e0(0x80004005);\n        pcVar1 = swi(3);\n        ppcVar5 = (*pcVar1)();\n        return ppcVar5;\n    }\n    iVar6 = (**(*piVar4 + 0x18))();\n    arg1[3] = iVar6 + 0x18;\n    piVar4 = fcn.140017fc0();\n    if (piVar4 == NULL) {\n        fcn.1400031e0(0x80004005);\n        pcVar1 = swi(3);\n        ppcVar5 = (*pcVar1)();\n        return ppcVar5;\n    }\n    iVar6 = (**(*piVar4 + 0x18))();\n    arg1[4] = iVar6 + 0x18;\n    piVar4 = fcn.140017fc0();\n    if (piVar4 == NULL) {\n        fcn.1400031e0(0x80004005);\n        pcVar1 = swi(3);\n        ppcVar5 = (*pcVar1)();\n        return ppcVar5;\n    }\n    iVar6 = (**(*piVar4 + 0x18))(piVar4);\n    arg1[6] = iVar6 + 0x18;\n    if (-1 < in_stack_00000028) {\n        auVar2 = ZEXT816(8) * ZEXT816(in_stack_00000028);\n        uVar7 = SUB168(auVar2, 0);\n        if (SUB168(auVar2 >> 0x40, 0) != 0) {\n            uVar7 = 0xffffffffffffffff;\n        }\n        iVar6 = uVar7 + 8;\n        if (0xfffffffffffffff7 < uVar7) {\n            iVar6 = -1;\n        }\n        piVar8 = fcn.140003694(iVar6);\n        piVar9 = arg3_00;\n        if (piVar8 != NULL) {\n            *piVar8 = in_stack_00000028;\n            fcn.14006c320(piVar8 + 2, 8, in_stack_00000028 & 0xffffffff, 0x140004ef8);\n            piVar9 = piVar8 + 2;\n        }\n        arg1[2] = piVar9;\n        if (piVar9 != NULL) {\n            *(arg1 + 1) = in_stack_00000028;\n            *(arg1 + 5) = arg2;\n            if (arg3 == 0) {\n                uVar3 = 0;\n            }\n            else {\n                uVar3 = fcn.1400699a0(arg3);\n            }\n            fcn.140005294(arg1 + 3, arg3, uVar3);\n            if (arg4 != 0) {\n                uVar3 = fcn.1400699a0(arg4);\n                arg3_00 = uVar3;\n            }\n            fcn.140005294(arg1 + 4, arg4, arg3_00);\n            *(arg1 + 0x2c) = in_stack_00000030;\n            return arg1;\n        }\n        fcn.140020780();\n        pcVar1 = swi(3);\n        ppcVar5 = (*pcVar1)();\n        return ppcVar5;\n    }\n    fcn.140020780();\n    pcVar1 = swi(3);\n    ppcVar5 = (*pcVar1)();\n    return ppcVar5;\n}\n",
        "token_count": 948
    },
    "14002279": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140022798(int64_t *arg1)\n\n{\n    code *pcVar1;\n    \n    if (arg1 == NULL) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    if (*arg1 != 0) {\n        (*_sym.imp.GDI32.dll_DeleteObject)();\n        *arg1 = 0;\n    }\n    return;\n}\n",
        "token_count": 98
    },
    "1400227c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400227c4(int64_t arg1)\n\n{\n    uint8_t uVar1;\n    uint32_t uVar2;\n    \n    if (arg1 != 0) {\n        uVar1 = (*_sym.imp.KERNEL32.dll_GlobalFlags)();\n        uVar2 = uVar1;\n        if (uVar1 != 0) {\n            do {\n                (*_sym.imp.KERNEL32.dll_GlobalUnlock)(arg1);\n                uVar2 = uVar2 - 1;\n            } while (uVar2 != 0);\n        }\n        (*_sym.imp.KERNEL32.dll_GlobalFree)(arg1);\n    }\n    return;\n}\n",
        "token_count": 144
    },
    "140022af": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140022af4(int64_t arg1, ulong noname_1, ulong arg3)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    int64_t arg1_00;\n    ulong in_R9;\n    \n    arg1_00 = (*_sym.imp.USER32.dll_GetFocus)();\n    if (arg1_00 == 0) {\n        return;\n    }\n    if (arg1_00 == arg1) {\n        return;\n    }\n    iVar3 = fcn.14002295c(arg1_00, 3, arg3, in_R9);\n    if (iVar3 == 0) {\n        arg1_00 = (*_sym.imp.USER32.dll_GetParent)(arg1_00);\n        if (arg1_00 == arg1) {\n            return;\n        }\n        iVar3 = fcn.14002295c(arg1_00, 2, arg3, in_R9);\n        if (iVar3 == 0) {\n            return;\n        }\n    }\n    if ((arg1 != 0) && (uVar4 = (*_sym.imp.USER32.dll_GetWindowLongA)(arg1, 0xfffffff0),  (uVar4 >> 0x1e & 1) != 0)) {\n        iVar1 = (*_sym.imp.USER32.dll_GetParent)(arg1);\n        iVar2 = (*_sym.imp.USER32.dll_GetDesktopWindow)();\n        if (iVar1 == iVar2) {\n            return;\n        }\n    }\n    (*_sym.imp.USER32.dll_SendMessageA)(arg1_00, 0x14f, 0, 0);\n    return;\n}\n",
        "token_count": 376
    },
    "140022b9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140022b98(ulong uBytes)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    \n    iVar2 = (*_sym.imp.KERNEL32.dll_LocalAlloc)(0x40, uBytes);\n    if (iVar2 == 0) {\n        fcn.140020738();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    return;\n}\n",
        "token_count": 95
    },
    "140022bd": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "get thread local storage value"
        ],
        "decompiled_code": "\nulong fcn.140022bd4(uint *lpCriticalSection, ulong arg2)\n\n{\n    ulong uVar1;\n    int64_t iVar2;\n    \n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(lpCriticalSection + 10);\n    if ((((0 < arg2) && (arg2 < lpCriticalSection[3])) &&\n        (iVar2 = (*_sym.imp.KERNEL32.dll_TlsGetValue)(*lpCriticalSection),  iVar2 != 0)) && (arg2 < *(iVar2 + 0x10))) {\n        uVar1 = *(*(iVar2 + 0x18) + arg2 * 8);\n        (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(lpCriticalSection + 10);\n        return uVar1;\n    }\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(lpCriticalSection + 10);\n    return 0;\n}\n",
        "token_count": 186
    },
    "140022cb": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140022cb4(uint32_t *arg1)\n\n{\n    ulong uVar1;\n    \n    if ((*arg1 == 0) || (*0x1400de720 == 0)) {\n        uVar1 = 0;\n    }\n    else {\n        uVar1 = fcn.140022bd4(*0x1400de720, *arg1);\n    }\n    return uVar1;\n}\n",
        "token_count": 92
    },
    "140022dc": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140022dcc(int64_t *arg1, int64_t arg2)\n\n{\n    code *pcVar1;\n    \n    if (arg2 == 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    *(arg2 + arg1[1]) = *arg1;\n    *arg1 = arg2;\n    return;\n}\n",
        "token_count": 96
    },
    "140022df": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140022df4(int64_t *arg1, int64_t arg2)\n\n{\n    int64_t iVar1;\n    code *pcVar2;\n    ulong uVar3;\n    int64_t iVar4;\n    \n    iVar4 = *arg1;\n    uVar3 = 0;\n    if (iVar4 == 0) {\n        uVar3 = 0;\n    }\n    else if (iVar4 == arg2) {\n        if (arg2 == 0) {\n            fcn.140020780();\n            pcVar2 = swi(3);\n            uVar3 = (*pcVar2)();\n            return uVar3;\n        }\n        *arg1 = *(arg2 + arg1[1]);\ncode_r0x000140022e5c:\n        uVar3 = 1;\n    }\n    else {\n        if (iVar4 == 0) {\n            fcn.140020780();\n            pcVar2 = swi(3);\n            uVar3 = (*pcVar2)();\n            return uVar3;\n        }\n        do {\n            iVar1 = arg1[1];\n            if (*(iVar1 + iVar4) == arg2) {\n                if (arg2 == 0) {\n                    fcn.140020780();\n                    pcVar2 = swi(3);\n                    uVar3 = (*pcVar2)();\n                    return uVar3;\n                }\n                *(iVar1 + iVar4) = *(iVar1 + arg2);\n                goto code_r0x000140022e5c;\n            }\n            iVar4 = *(iVar1 + iVar4);\n        } while (iVar4 != 0);\n    }\n    return uVar3;\n}\n",
        "token_count": 361
    },
    "1400230d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.1400230d8(int64_t lpCriticalSection, ulong arg2)\n\n{\n    uint32_t *puVar1;\n    ulong *puVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    \n    iVar4 = arg2;\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(lpCriticalSection + 0x28);\n    if ((0 < arg2) && (arg2 < *(lpCriticalSection + 0xc))) {\n        for (iVar3 = *(lpCriticalSection + 0x18); iVar3 != 0; iVar3 = *(iVar3 + 8)) {\n            if (arg2 < *(iVar3 + 0x10)) {\n                puVar2 = *(*(iVar3 + 0x18) + iVar4 * 8);\n                if (puVar2 != NULL) {\n                    (***puVar2)(puVar2, 1);\n                }\n                *(*(iVar3 + 0x18) + iVar4 * 8) = 0;\n            }\n        }\n        puVar1 = *(lpCriticalSection + 0x10) + iVar4 * 0x10;\n        *puVar1 = *puVar1 & 0xfffffffe;\n    }\n    // WARNING: Could not recover jumptable at 0x00014002316a. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(lpCriticalSection + 0x28);\n    return;\n}\n",
        "token_count": 324
    },
    "14002341": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain loop",
            "get thread local storage value"
        ],
        "decompiled_code": "\nvoid fcn.140023418(uint *lpCriticalSection, ulong arg2, ulong arg3)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    \n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(lpCriticalSection + 10);\n    if (arg3 == 0) {\n        iVar2 = (*_sym.imp.KERNEL32.dll_TlsGetValue)(*lpCriticalSection);\n        if (iVar2 != 0) {\n            fcn.140023324(lpCriticalSection, iVar2, arg2);\n        }\n    }\n    else {\n        iVar2 = *(lpCriticalSection + 6);\n        while (iVar2 != 0) {\n            iVar1 = *(iVar2 + 8);\n            fcn.140023324(lpCriticalSection, iVar2, arg2);\n            iVar2 = iVar1;\n        }\n    }\n    // WARNING: Could not recover jumptable at 0x000140023498. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(lpCriticalSection + 10);\n    return;\n}\n",
        "token_count": 233
    },
    "14002358": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140023588(ulong arg1, ulong arg2)\n\n{\n    if (*0x1400de720 != 0) {\n        fcn.140023418(*0x1400de720, arg1, arg2);\n    }\n    return;\n}\n",
        "token_count": 59
    },
    "14002368": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nbool fcn.140023688(void)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.140017ad4();\n    return *(iVar1 + 0x50) == 0;\n}\n",
        "token_count": 47
    },
    "1400236a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400236a0(void)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.140017ad4();\n    LOCK();\n    *(iVar1 + 0x50) = *(iVar1 + 0x50) + 1;\n    return;\n}\n",
        "token_count": 64
    },
    "1400236b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400236b4(ulong arg1)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.140017ad4();\n    *(iVar1 + 0x54) = arg1;\n    return;\n}\n",
        "token_count": 54
    },
    "1400236c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.1400236cc(void)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.140017ad4();\n    return *(iVar1 + 0x54);\n}\n",
        "token_count": 44
    },
    "14002383": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14002383c(int64_t arg1)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    \n    for (iVar2 = (*_sym.imp.USER32.dll_GetCapture)(); iVar2 != 0; iVar2 = fcn.1400120a8(iVar2)) {\n        iVar3 = (*_sym.imp.USER32.dll_SendMessageA)(iVar2, 0x365, 0, 0);\n        if (iVar3 != 0) {\n            return;\n        }\n    }\n    for (iVar2 = (*_sym.imp.USER32.dll_GetFocus)(); iVar2 != 0; iVar2 = fcn.1400120a8(iVar2)) {\n        iVar3 = (*_sym.imp.USER32.dll_SendMessageA)(iVar2, 0x365, 0, 0);\n        if (iVar3 != 0) {\n            return;\n        }\n    }\n    iVar2 = fcn.140012120(arg1);\n    if (iVar2 != 0) {\n        iVar2 = (*_sym.imp.USER32.dll_GetLastActivePopup)(*(iVar2 + 0x40));\n        while( true ) {\n            if (iVar2 == 0) {\n                (*_sym.imp.USER32.dll_SendMessageA)(*(arg1 + 0x40), 0x111, 0xe147, 0);\n                return;\n            }\n            iVar3 = (*_sym.imp.USER32.dll_SendMessageA)(iVar2, 0x365, 0, 0);\n            if (iVar3 != 0) break;\n            iVar2 = fcn.1400120a8(iVar2);\n        }\n        return;\n    }\n    fcn.140020780();\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 402
    },
    "14002391": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14002391c(int64_t arg1)\n\n{\n    int64_t iVar1;\n    \n    if (*(arg1 + 0xc0) == 0) {\n        fcn.14002383c(arg1);\n    }\n    else if (*(arg1 + 0xc0) != 0x3f107) {\n        iVar1 = fcn.140017ad4();\n        (**(**(iVar1 + 8) + 0x158))(*(iVar1 + 8), *(arg1 + 0xc0), 1);\n    }\n    return;\n}\n",
        "token_count": 127
    },
    "14002405": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.140024050(void)\n\n{\n    if (*0x1400de784 == 0) {\n        *0x1400de784 = 1;\n        (*_sym.imp.KERNEL32.dll_InitializeCriticalSection)(0x1400dea38);\n    }\n    return *0x1400de784;\n}\n",
        "token_count": 72
    },
    "1400241b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400241b0(int64_t arg1)\n\n{\n    ulong uVar1;\n    uint uVar2;\n    \n    uVar2 = (*_sym.imp.USER32.dll_GetSysColor)(0xf);\n    *(arg1 + 0x30) = uVar2;\n    uVar2 = (*_sym.imp.USER32.dll_GetSysColor)(0x10);\n    *(arg1 + 0x34) = uVar2;\n    uVar2 = (*_sym.imp.USER32.dll_GetSysColor)(0x14);\n    *(arg1 + 0x38) = uVar2;\n    uVar2 = (*_sym.imp.USER32.dll_GetSysColor)(0x12);\n    *(arg1 + 0x3c) = uVar2;\n    uVar2 = (*_sym.imp.USER32.dll_GetSysColor)(6);\n    *(arg1 + 0x40) = uVar2;\n    uVar1 = (*_sym.imp.USER32.dll_GetSysColorBrush)(0xf);\n    *(arg1 + 0x28) = uVar1;\n    uVar1 = (*_sym.imp.USER32.dll_GetSysColorBrush)(6);\n    *(arg1 + 0x20) = uVar1;\n    return;\n}\n",
        "token_count": 274
    },
    "14002422": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140024224(int64_t arg1)\n\n{\n    uint uVar1;\n    ulong uVar2;\n    \n    uVar1 = (*_sym.imp.USER32.dll_GetSystemMetrics)(0xb);\n    *(arg1 + 8) = uVar1;\n    uVar1 = (*_sym.imp.USER32.dll_GetSystemMetrics)(0xc);\n    *(arg1 + 0xc) = uVar1;\n    *0x1400deab0 = (*_sym.imp.USER32.dll_GetSystemMetrics)(2);\n    *0x1400deab0 = *0x1400deab0 + 1;\n    *0x1400deab4 = (*_sym.imp.USER32.dll_GetSystemMetrics)(3);\n    *0x1400deab4 = *0x1400deab4 + 1;\n    uVar2 = (*_sym.imp.USER32.dll_GetDC)(0);\n    uVar1 = (*_sym.imp.GDI32.dll_GetDeviceCaps)(uVar2, 0x58);\n    *(arg1 + 0x18) = uVar1;\n    uVar1 = (*_sym.imp.GDI32.dll_GetDeviceCaps)(uVar2, 0x5a);\n    *(arg1 + 0x1c) = uVar1;\n    // WARNING: Could not recover jumptable at 0x0001400242af. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.USER32.dll_ReleaseDC)(0, uVar2);\n    return;\n}\n",
        "token_count": 340
    },
    "1400242b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.1400242b8(int64_t arg1)\n\n{\n    ulong uVar1;\n    \n    fcn.140024224(arg1);\n    *(arg1 + 0x28) = 0;\n    fcn.1400241b0(arg1);\n    uVar1 = (*_sym.imp.USER32.dll_LoadCursorA)(0, 0x7f02);\n    *(arg1 + 0x48) = uVar1;\n    uVar1 = (*_sym.imp.USER32.dll_LoadCursorA)(0, 0x7f00);\n    *(arg1 + 0x70) = 0;\n    *(arg1 + 0x58) = 0;\n    *(arg1 + 0x50) = uVar1;\n    *(arg1 + 0x10) = 2;\n    *(arg1 + 0x14) = 2;\n    return arg1;\n}\n",
        "token_count": 204
    },
    "14002435": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140024358(void)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.140017b90();\n    *(iVar1 + 0x20) = *(iVar1 + 0x20) + 1;\n    return;\n}\n",
        "token_count": 59
    },
    "140024aa": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140024aa8(ulong arg1)\n\n{\n    int32_t iVar1;\n    int64_t arg1_00;\n    uchar *arg2;\n    uchar auStack344 [32];\n    ulong auStack312 [2];\n    uchar auStack296 [272];\n    uint64_t uStack24;\n    \n    uStack24 = *0x1400d96f0 ^ auStack344;\n    arg1_00 = fcn.14006ae94(arg1);\n    if (arg1_00 != 0) {\n        iVar1 = (*_sym.imp.KERNEL32.dll_lstrlenA)(arg1_00);\n        arg2 = iVar1 + arg1_00;\n        while (arg2 != NULL) {\n            *arg2 = 0;\n            fcn.14006c9f8(arg1_00, arg2);\n            iVar1 = fcn.1400450ec(0xffffffff80000000, arg1_00, auStack312);\n            if (iVar1 != 0) break;\n            iVar1 = (*_sym.imp.ADVAPI32.dll_RegEnumKeyA)(auStack312[0], 0, auStack296, 0x105);\n            (*_sym.imp.ADVAPI32.dll_RegCloseKey)(auStack312[0]);\n            if (iVar1 == 0) break;\n            fcn.14004544c(0xffffffff80000000, arg1_00);\n            arg2 = fcn.14006c934(arg1_00, 0x5c);\n        }\n        fcn.140069e50(arg1_00);\n    }\n    fcn.140069870(uStack24 ^ auStack344);\n    return;\n}\n",
        "token_count": 368
    },
    "140024b9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** fcn.140024b94(code **arg1)\n\n{\n    *arg1 = vtable.CDocManager.0;\n    fcn.14003aea8(arg1 + 1, 10);\n    return arg1;\n}\n",
        "token_count": 52
    },
    "14003ad3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14003ad34(int64_t arg1)\n\n{\n    *(arg1 + 0x18) = 0;\n    *(arg1 + 0x20) = 0;\n    *(arg1 + 0x10) = 0;\n    *(arg1 + 8) = 0;\n    fcn.14002aadc(*(arg1 + 0x28));\n    *(arg1 + 0x28) = 0;\n    return;\n}\n",
        "token_count": 105
    },
    "14002569": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t * fcn.140025690(int64_t *arg1, int64_t *arg2, ulong arg3)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    int64_t arg4;\n    int64_t *piVar3;\n    \n    arg4 = 0;\n    iVar2 = *arg1;\n    iVar1 = *(iVar2 + -0x10);\n    if (arg3 < 0) {\n        arg3._0_4_ = 0;\n    }\n    if (arg3 < iVar1) {\n        if (*(iVar2 + -0x18) != NULL) {\n            arg4 = (**(**(iVar2 + -0x18) + 0x20))();\n        }\n        if (arg4 == 0) {\n            piVar3 = fcn.140017fc0();\n            arg4 = (**(*piVar3 + 0x20))(piVar3);\n        }\n        fcn.140018694(arg2, (iVar1 - arg3) + *arg1, arg3, arg4);\n    }\n    else {\n        iVar2 = fcn.1400075ec(iVar2 + -0x18);\n        *arg2 = iVar2 + 0x18;\n    }\n    return arg2;\n}\n",
        "token_count": 280
    },
    "14002573": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t * fcn.140025730(int64_t *arg1, int64_t *arg2, ulong arg3)\n\n{\n    int64_t iVar1;\n    int64_t arg4;\n    int64_t *piVar2;\n    \n    arg4 = 0;\n    iVar1 = *arg1;\n    if (arg3 < 0) {\n        arg3._0_4_ = 0;\n    }\n    if (arg3 < *(iVar1 + -0x10)) {\n        if (*(iVar1 + -0x18) != NULL) {\n            arg4 = (**(**(iVar1 + -0x18) + 0x20))();\n        }\n        if (arg4 == 0) {\n            piVar2 = fcn.140017fc0();\n            arg4 = (**(*piVar2 + 0x20))(piVar2);\n        }\n        fcn.140018694(arg2, *arg1, arg3, arg4);\n    }\n    else {\n        iVar1 = fcn.1400075ec(iVar1 + -0x18);\n        *arg2 = iVar1 + 0x18;\n    }\n    return arg2;\n}\n",
        "token_count": 258
    },
    "14002584": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t * fcn.140025848(int64_t *arg1, int64_t *arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    code *pcVar2;\n    int64_t iVar3;\n    uint64_t arg4_00;\n    int64_t *piVar4;\n    uint64_t arg3_00;\n    \n    arg4_00 = 0;\n    if (arg3 < 0) {\n        arg3._0_4_ = 0;\n    }\n    arg3_00 = arg4;\n    if (arg4 < 0) {\n        arg3_00 = arg4_00;\n    }\n    if (0x7fffffff - arg3 < arg3_00) {\n        fcn.1400031e0(0x80070057);\n        pcVar2 = swi(3);\n        piVar4 = (*pcVar2)();\n        return piVar4;\n    }\n    iVar3 = *arg1;\n    iVar1 = *(iVar3 + -0x10);\n    if (iVar1 < arg3 + arg3_00) {\n        arg3_00 = iVar1 - arg3;\n    }\n    if (iVar1 < arg3) {\n        arg3_00 = arg4_00;\n    }\n    if ((arg3 == 0) && (arg3_00 == iVar1)) {\n        iVar3 = fcn.1400075ec(iVar3 + -0x18);\n        *arg2 = iVar3 + 0x18;\n    }\n    else {\n        if (*(iVar3 + -0x18) != NULL) {\n            arg4_00 = (**(**(iVar3 + -0x18) + 0x20))();\n        }\n        if (arg4_00 == 0) {\n            piVar4 = fcn.140017fc0();\n            arg4_00 = (**(*piVar4 + 0x20))(piVar4);\n        }\n        fcn.140018694(arg2, arg3 + *arg1, arg3_00, arg4_00);\n    }\n    return arg2;\n}\n",
        "token_count": 464
    },
    "14002591": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14002591c(int64_t *arg1, ulong arg2, ulong arg3)\n\n{\n    fcn.140025848(arg1, arg2, arg3, *(*arg1 + -0x10) - arg3);\n    return arg2;\n}\n",
        "token_count": 60
    },
    "1400287c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400287c0(ulong arg1, uchar *arg2, ulong arg3, ulong arg4)\n\n{\n    int16_t iVar1;\n    uchar *puVar2;\n    uchar auStack360 [32];\n    uchar auStack328 [272];\n    uint64_t uStack56;\n    \n    uStack56 = *0x1400d96f0 ^ auStack360;\n    puVar2 = arg2;\n    if (arg2 == NULL) {\n        puVar2 = auStack328;\n        arg3._0_4_ = 0x104;\n    }\n    iVar1 = (*_sym.imp.COMDLG32.dll_GetFileTitleA)(arg1, puVar2);\n    if (iVar1 == 0) {\n        if (arg2 == NULL) {\n            (*_sym.imp.KERNEL32.dll_lstrlenA)(puVar2);\n        }\n    }\n    else {\n        fcn.1400461d4(arg1, arg2, arg3, arg4);\n    }\n    fcn.140069870(uStack56 ^ auStack360);\n    return;\n}\n",
        "token_count": 239
    },
    "14002885": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140028850(int64_t arg1, ulong arg2)\n\n{\n    ulong arg2_00;\n    int32_t iVar1;\n    uint32_t uVar2;\n    ulong in_R8;\n    bool bVar3;\n    \n    bVar3 = false;\n    if (*(arg1 + 8) != -1) {\n        iVar1 = (*_sym.imp.KERNEL32.dll_CloseHandle)();\n        bVar3 = iVar1 == 0;\n    }\n    *(arg1 + 8) = 0xffffffffffffffff;\n    *(arg1 + 0x10) = 0;\n    fcn.140004828(arg1 + 0x18, arg2, in_R8);\n    if (bVar3) {\n        arg2_00 = *(arg1 + 0x18);\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        fcn.140046a6c(uVar2, arg2_00);\n    }\n    return;\n}\n",
        "token_count": 216
    },
    "1400288d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** fcn.1400288d8(code **arg1)\n\n{\n    code *pcVar1;\n    int64_t *piVar2;\n    code **ppcVar3;\n    int64_t iVar4;\n    \n    *arg1 = vtable.CFile.0;\n    piVar2 = fcn.140017fc0();\n    if (piVar2 == NULL) {\n        fcn.1400031e0(0x80004005);\n        pcVar1 = swi(3);\n        ppcVar3 = (*pcVar1)();\n        return ppcVar3;\n    }\n    iVar4 = (**(*piVar2 + 0x18))(piVar2);\n    arg1[3] = iVar4 + 0x18;\n    arg1[1] = 0xffffffffffffffff;\n    *(arg1 + 2) = 0;\n    return arg1;\n}\n",
        "token_count": 194
    },
    "140028a4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140028a40(code **arg1)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    code *pcVar3;\n    \n    pcVar3 = arg1[3];\n    *arg1 = vtable.CFileException.0;\n    LOCK();\n    piVar1 = pcVar3 + -8;\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 + -1 < 1) {\n        (**(**(pcVar3 + -0x18) + 8))();\n    }\n    return;\n}\n",
        "token_count": 137
    },
    "140028a7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint64_t fcn.140028a74(ulong arg1, int64_t *arg2)\n\n{\n    int64_t iVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    uint64_t uVar4;\n    uint auStackX16 [2];\n    uint auStackX24 [2];\n    ulong uStackX32;\n    ulong uStack40;\n    ulong uStack32;\n    \n    uStack32 = 0;\n    uVar4 = 0;\n    if ((1U - *(*arg2 + -8) | *(*arg2 + -0xc) - 0x104U) < 0) {\n        fcn.1400033e0(arg2, 0x104);\n    }\n    iVar1 = *arg2;\n    auStackX24[0] = 0;\n    auStackX16[0] = 0x104;\n    iVar3 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyA)(0xffffffff80000000, 0x1400a4990, &uStack32);\n    if (iVar3 == 0) {\n        uStack40 = 0;\n        iVar3 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyA)(uStack32, arg1, &uStack40);\n        if (iVar3 == 0) {\n            uStackX32 = 0;\n            iVar3 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyA)(uStack40, \"InProcServer32\", &uStackX32);\n            if (iVar3 == 0) {\n                iVar3 = (*_sym.imp.ADVAPI32.dll_RegQueryValueExA)\n                                  (uStackX32, 0x1400a0e8b, 0, auStackX24, iVar1, auStackX16);\n                uVar4 = iVar3 == 0;\n                (*_sym.imp.ADVAPI32.dll_RegCloseKey)(uStackX32);\n            }\n            (*_sym.imp.ADVAPI32.dll_RegCloseKey)(uStack40);\n        }\n        (*_sym.imp.ADVAPI32.dll_RegCloseKey)(uStack32);\n    }\n    iVar1 = *arg2;\n    if (iVar1 == 0) {\n        iVar3 = 0;\n    }\n    else {\n        iVar3 = fcn.14006b544(iVar1, *(iVar1 + -0xc));\n        if (iVar3 < 0) goto code_r0x000140028bac;\n    }\n    if (iVar3 <= *(*arg2 + -0xc)) {\n        *(*arg2 + -0x10) = iVar3;\n        *(iVar3 + *arg2) = 0;\n        return uVar4;\n    }\ncode_r0x000140028bac:\n    fcn.1400031e0(0x80070057);\n    pcVar2 = swi(3);\n    uVar4 = (*pcVar2)();\n    return uVar4;\n}\n",
        "token_count": 644
    },
    "140028bb": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140028bb8(ulong arg1, int64_t *arg2)\n\n{\n    int64_t iVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    \n    if ((1U - *(*arg2 + -8) | *(*arg2 + -0xc) - 0x104U) < 0) {\n        fcn.1400033e0(arg2, 0x104);\n    }\n    iVar1 = *arg2;\n    fcn.1400698a0(iVar1, 0, 0x104);\n    iVar3 = fcn.14006bb18(iVar1, 0x104, arg1, 0xffffffffffffffff);\n    if (iVar3 != 0) {\n        if (iVar3 == 0xc) {\n            fcn.140020738();\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n        if ((iVar3 == 0x16) || (iVar3 == 0x22)) {\n            fcn.140020780();\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n        if (iVar3 != 0x50) {\n            fcn.140020780();\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n    }\n    (*_sym.imp.SHLWAPI.dll_PathStripToRootA)(iVar1);\n    iVar1 = *arg2;\n    if (iVar1 == 0) {\n        iVar3 = 0;\n    }\n    else {\n        iVar3 = fcn.14006b544(iVar1, *(iVar1 + -0xc));\n        if (iVar3 < 0) goto code_r0x000140028c90;\n    }\n    if (iVar3 <= *(*arg2 + -0xc)) {\n        *(*arg2 + -0x10) = iVar3;\n        *(iVar3 + *arg2) = 0;\n        return;\n    }\ncode_r0x000140028c90:\n    fcn.1400031e0(0x80070057);\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 485
    },
    "140028da": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140028da8(int64_t arg1, int64_t arg2)\n\n{\n    uint32_t uVar1;\n    uint uVar2;\n    uint32_t uVar3;\n    \n    uVar3 = 0;\n    if (arg1 != 0) {\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        *(arg1 + 0x14) = uVar1;\n        uVar2 = fcn.1400465d4(uVar1);\n        *(arg1 + 0x10) = uVar2;\n        if (arg2 != 0) {\n            uVar3 = fcn.1400699a0(arg2);\n        }\n        fcn.140005294(arg1 + 0x18, arg2, uVar3);\n    }\n    return;\n}\n",
        "token_count": 182
    },
    "14002913": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14002913c(ulong hModule, int64_t *arg2)\n\n{\n    int64_t arg1;\n    code *pcVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uchar auStack328 [32];\n    uchar auStack296 [272];\n    uint64_t uStack24;\n    \n    uStack24 = *0x1400d96f0 ^ auStack328;\n    (*_sym.imp.KERNEL32.dll_GetModuleFileNameA)(hModule, auStack296, 0x104);\n    if ((1U - *(*arg2 + -8) | *(*arg2 + -0xc) - 0x104U) < 0) {\n        fcn.1400033e0(arg2, 0x104);\n    }\n    iVar2 = (*_sym.imp.KERNEL32.dll_GetShortPathNameA)(auStack296, *arg2);\n    if (iVar2 == 0) {\n        uVar3 = fcn.1400699a0(auStack296);\n        fcn.140005294(arg2, auStack296, uVar3);\n    }\n    arg1 = *arg2;\n    if (arg1 == 0) {\n        iVar2 = 0;\n    }\n    else {\n        iVar2 = fcn.14006b544(arg1, *(arg1 + -0xc));\n        if (iVar2 < 0) goto code_r0x00014002920a;\n    }\n    if (iVar2 <= *(*arg2 + -0xc)) {\n        *(*arg2 + -0x10) = iVar2;\n        *(iVar2 + *arg2) = 0;\n        fcn.140069870(uStack24 ^ auStack328);\n        return;\n    }\ncode_r0x00014002920a:\n    fcn.1400031e0(0x80070057);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 430
    },
    "140029ba": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint16_t * fcn.140029bac(int64_t arg1)\n\n{\n    int16_t iVar1;\n    int16_t *piVar2;\n    \n    piVar2 = arg1 + 0x1a;\n    if (*(arg1 + 2) != -1) {\n        piVar2 = arg1 + 0x12;\n    }\n    if (*piVar2 == -1) {\n        piVar2 = piVar2 + 2;\n    }\n    else {\n        do {\n            iVar1 = *piVar2;\n            piVar2 = piVar2 + 1;\n        } while (iVar1 != 0);\n    }\n    if (*piVar2 == -1) {\n        piVar2 = piVar2 + 2;\n    }\n    else {\n        do {\n            iVar1 = *piVar2;\n            piVar2 = piVar2 + 1;\n        } while (iVar1 != 0);\n    }\n    do {\n        iVar1 = *piVar2;\n        piVar2 = piVar2 + 1;\n    } while (iVar1 != 0);\n    return piVar2;\n}\n",
        "token_count": 247
    },
    "140029d1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140029d10(ulong *hMem, int32_t *arg2)\n\n{\n    int16_t iVar1;\n    int64_t iVar2;\n    \n    iVar2 = (*_sym.imp.KERNEL32.dll_GlobalLock)(*hMem);\n    if (*(iVar2 + 2) == -1) {\n        *arg2 = *(iVar2 + 0x16);\n        iVar1 = *(iVar2 + 0x18);\n    }\n    else {\n        *arg2 = *(iVar2 + 0xe);\n        iVar1 = *(iVar2 + 0x10);\n    }\n    arg2[1] = iVar1;\n    // WARNING: Could not recover jumptable at 0x000140029d63. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_GlobalUnlock)(*hMem);\n    return;\n}\n",
        "token_count": 194
    },
    "14002a3d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong * fcn.14002a3d0(ulong *arg1, int64_t arg2)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    ulong *puVar4;\n    \n    if (arg2 == 0) {\n        *arg1 = 0;\n        *(arg1 + 1) = 0;\n        *(arg1 + 0xc) = 0;\n    }\n    else {\n        uVar2 = fcn.140029c04(arg2);\n        iVar3 = fcn.140029f68(arg1, arg2, uVar2);\n        if (iVar3 == 0) {\n            fcn.140020738();\n            pcVar1 = swi(3);\n            puVar4 = (*pcVar1)();\n            return puVar4;\n        }\n    }\n    return arg1;\n}\n",
        "token_count": 193
    },
    "14002a48": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14002a48c(uint32_t *arg1, int64_t *arg2, ushort *arg3)\n\n{\n    int64_t iVar1;\n    code *pcVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    ushort *puVar5;\n    ulong uVar6;\n    int16_t iVar7;\n    \n    iVar7 = -1;\n    if (*(arg1 + 2) == -1) {\n        uVar3 = arg1[3];\n    }\n    else {\n        uVar3 = *arg1;\n    }\n    if ((uVar3 & 0x40) == 0) {\n        uVar6 = 0;\n    }\n    else {\n        puVar5 = fcn.140029bac(arg1);\n        *arg3 = *puVar5;\n        iVar4 = 1;\n        if (*(arg1 + 2) == iVar7) {\n            iVar4 = 3;\n        }\n        if ((1U - *(*arg2 + -8) | *(*arg2 + -0xc) - 0x20U) < 0) {\n            fcn.1400033e0(arg2, 0x20);\n        }\n        iVar1 = *arg2;\n        if (*(iVar1 + -0xc) < 0x20) {\n            fcn.1400031e0(0x80070057);\n            pcVar2 = swi(3);\n            uVar6 = (*pcVar2)();\n            return uVar6;\n        }\n        *(iVar1 + -0x10) = 0x20;\n        *(*arg2 + 0x20) = 0;\n        (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(0, 0, puVar5 + iVar4 * 2, 0xffffffff, iVar1, 0x20, 0, 0);\n        iVar1 = *arg2;\n        if (iVar1 == 0) {\n            iVar4 = 0;\n        }\n        else {\n            iVar4 = fcn.14006b544(iVar1, *(iVar1 + -0xc));\n            if (iVar4 < 0) goto code_r0x00014002a58f;\n        }\n        if (*(*arg2 + -0xc) < iVar4) {\ncode_r0x00014002a58f:\n            fcn.1400031e0(0x80070057);\n            pcVar2 = swi(3);\n            uVar6 = (*pcVar2)();\n            return uVar6;\n        }\n        *(*arg2 + -0x10) = iVar4;\n        *(iVar4 + *arg2) = 0;\n        uVar6 = 1;\n    }\n    return uVar6;\n}\n",
        "token_count": 603
    },
    "14002a59": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.14002a59c(ulong *hMem, ulong arg2, ulong arg3)\n\n{\n    uint uVar1;\n    ulong arg1;\n    \n    arg1 = (*_sym.imp.KERNEL32.dll_GlobalLock)(*hMem);\n    uVar1 = fcn.14002a48c(arg1, arg2, arg3);\n    (*_sym.imp.KERNEL32.dll_GlobalUnlock)(*hMem);\n    return uVar1;\n}\n",
        "token_count": 99
    },
    "14002a6e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.14002a6e8(int64_t *arg1, ulong arg2, int32_t *arg3, ulong arg4)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    ulong *puVar3;\n    uint64_t uVar4;\n    \n    if (arg3 == NULL) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        iVar2 = (*pcVar1)();\n        return iVar2;\n    }\n    puVar3 = (**(*arg1 + 0x78))();\n    do {\n        if (puVar3 == NULL) {\n            return 0;\n        }\n        iVar2 = puVar3[1];\n        uVar4 = *(iVar2 + 0x30);\n        if (uVar4 != 0xffffffffffffffff) {\n            do {\n                if ((*(iVar2 + 8) == arg3[1]) && (uVar4 == (*arg3 != 0))) {\n                    if (*(iVar2 + 0x44) == -1) {\n                        if (*(iVar2 + 0x40) == -1) {\n                            return iVar2;\n                        }\n                        if (*(iVar2 + 0x40) == arg2) {\n                            return iVar2;\n                        }\n                    }\n                    else if ((*(iVar2 + 0x40) < arg2 || *(iVar2 + 0x40) == arg2) &&\n                            (arg2 < *(iVar2 + 0x44) || arg2 == *(iVar2 + 0x44))) {\n                        return iVar2;\n                    }\n                }\n                uVar4 = *(iVar2 + 0x78);\n                iVar2 = iVar2 + 0x48;\n            } while (uVar4 != 0xffffffffffffffff);\n        }\n        puVar3 = *puVar3;\n    } while( true );\n}\n",
        "token_count": 405
    },
    "14002aaa": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14002aaa4(ulong *arg1, int64_t arg2, int64_t arg3)\n\n{\n    code *pcVar1;\n    ulong *puVar2;\n    \n    if ((arg2 != 0) && (arg3 != 0)) {\n        puVar2 = fcn.140003694(arg2 * arg3 + 8);\n        *puVar2 = *arg1;\n        *arg1 = puVar2;\n        return;\n    }\n    fcn.140020780();\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 133
    },
    "14002aba": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14002abac(int64_t arg1)\n\n{\n    int64_t *piVar1;\n    \n    piVar1 = *(arg1 + 8);\n    if (piVar1 != NULL) {\n        (**(*piVar1 + 8))(piVar1, 1);\n    }\n    return;\n}\n",
        "token_count": 71
    },
    "14002aef": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.14002aef0(ulong arg1, int64_t arg2)\n\n{\n    int32_t iVar1;\n    \n    if (arg2 != 0) {\n        do {\n            iVar1 = (*_sym.imp.USER32.dll_GetDlgCtrlID)(arg2);\n            if (iVar1 == arg1) {\n                return arg2;\n            }\n            arg2 = (*_sym.imp.USER32.dll_GetWindow)(arg2, 2);\n        } while (arg2 != 0);\n    }\n    return arg2;\n}\n",
        "token_count": 119
    },
    "14002b12": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14002b128(ulong arg1, ulong arg2)\n\n{\n    fcn.14003afa8(arg1, arg2);\n    return;\n}\n",
        "token_count": 37
    },
    "14002b15": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14002b150(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    fcn.14003b084(arg1, arg2, arg3);\n    return;\n}\n",
        "token_count": 44
    },
    "14002b28": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14002b284(int64_t **arg1)\n\n{\n    if (*arg1 != NULL) {\n        (**(**arg1 + 0x10))();\n    }\n    return;\n}\n",
        "token_count": 44
    },
    "14002b5e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14002b5e0(ulong arg1, ulong arg2, uint *noname_2, ulong arg4)\n\n{\n    uchar auStack184 [32];\n    ulong uStack152;\n    uint auStack72 [2];\n    ulong uStack64;\n    uint uStack56;\n    uint uStack52;\n    uint uStack48;\n    uint uStack44;\n    uint64_t uStack40;\n    \n    uStack40 = *0x1400d96f0 ^ auStack184;\n    uStack56 = *noname_2;\n    uStack52 = noname_2[1];\n    uStack48 = noname_2[2];\n    uStack44 = noname_2[3];\n    uStack64 = 0;\n    auStack72[0] = 2;\n    uStack152 = arg4;\n    fcn.14002b3b4(arg1, arg2, noname_2, auStack72);\n    fcn.140069870(uStack40 ^ auStack184);\n    return;\n}\n",
        "token_count": 230
    },
    "14002bc9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14002bc9c(ulong arg1, ulong arg2, int64_t arg3, ulong arg4)\n\n{\n    fcn.14002b3b4(arg1, arg2, arg3 + 0x10, arg3);\n    return;\n}\n",
        "token_count": 61
    },
    "14002bd6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14002bd60(int64_t arg1, ulong arg2)\n\n{\n    int64_t *piVar1;\n    code *pcVar2;\n    ulong *puVar3;\n    \n    puVar3 = *(arg1 + 0x88);\n    while( true ) {\n        if (puVar3 == NULL) {\n            return;\n        }\n        if (puVar3 == NULL) break;\n        piVar1 = puVar3 + 2;\n        puVar3 = *puVar3;\n        if (*(*piVar1 + 8) != 0) {\n            fcn.14002d8cc(*(*piVar1 + 8), arg2);\n        }\n    }\n    fcn.140020780();\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 181
    },
    "14002d05": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14002d054(int64_t arg1)\n\n{\n    uint *puVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint uVar4;\n    ulong unaff_RBX;\n    ulong in_R9;\n    \n    fcn.1400036d8(*(arg1 + 0x18));\n    if ((*(arg1 + 0x48) != 0) &&\n       (iVar2 = (*_sym.imp.KERNEL32.dll_HeapFree)(*0x1400df6a0, 0, *(arg1 + 0x48), in_R9, unaff_RBX),  iVar2 == 0)) {\n        puVar1 = fcn.14006abb0();\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        uVar4 = fcn.14006ab68(uVar3);\n        *puVar1 = uVar4;\n    }\n    return;\n}\n",
        "token_count": 209
    },
    "14002d1f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "execute .NET assembly via CLR host/2c9ef85a2fe94af39efaaae3fc9e6a8a"
        ],
        "decompiled_code": "\nvoid fcn.14002d1f4(int64_t *arg1, ulong noname_1, int64_t arg3, ulong arg4)\n\n{\n    (**(*arg1 + 0x188))(arg1, noname_1, arg3 + 0x10, arg3, 0, arg4);\n    return;\n}\n",
        "token_count": 75
    },
    "14002d25": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.14002d254(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    ulong in_stack_00000028;\n    ulong in_stack_00000030;\n    int64_t *apiStack24 [2];\n    \n    iVar1 = (*_sym.imp.OLEAUT32.dll_VariantInit)(in_stack_00000030);\n    apiStack24[0] = NULL;\n    if (iVar1 == 0) {\n        iVar1 = (*_sym.imp.ole32.dll_CoGetClassObject)();\n        if (iVar1 < 0) {\n            return iVar1;\n        }\n        iVar1 = (**(*apiStack24[0] + 0x18))(apiStack24[0], arg2, arg4, in_stack_00000028);\n    }\n    else {\n        iVar1 = (*_sym.imp.ole32.dll_CoGetClassObject)(arg1, arg3, 0, 0x1400b6808, apiStack24);\n        if (iVar1 < 0) {\n            return iVar1;\n        }\n        iVar1 = (**(*apiStack24[0] + 0x38))(apiStack24[0], arg2, 0, arg4);\n    }\n    (**(*apiStack24[0] + 0x10))();\n    return iVar1;\n}\n",
        "token_count": 301
    },
    "14002d6e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14002d6e4(int64_t arg1)\n\n{\n    ulong *puVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    int64_t *piStackX8;\n    \n    fcn.1400698a0(arg1 + 0xb8, 0, 0x18);\n    puVar1 = *(arg1 + 0x80);\n    piStackX8 = NULL;\n    *(arg1 + 0xb8) = 0x18;\n    if (puVar1 == NULL) {\n        fcn.140020780();\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    iVar3 = (***puVar1)(puVar1, 0x1400b6848, &piStackX8);\n    if (-1 < iVar3) {\n        (**(*piStackX8 + 0x18))(piStackX8, arg1 + 0xb8);\n        (**(*piStackX8 + 0x10))();\n    }\n    return;\n}\n",
        "token_count": 236
    },
    "14002d76": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.14002d764(int64_t arg1, int64_t arg2)\n\n{\n    code *pcVar1;\n    uchar auVar2 [16];\n    int32_t iVar3;\n    ulong arg1_00;\n    uint8_t *arg1_01;\n    uint8_t uVar4;\n    uint8_t *puVar5;\n    int64_t iVar6;\n    int64_t iVar7;\n    \n    iVar6 = 0;\n    if ((*(arg1 + 200) == 0) || (*(arg1 + 0xc0) == 0)) {\n        iVar6 = 0;\n    }\n    else {\n        auVar2 = ZEXT416(6) * ZEXT216(*(arg1 + 200));\n        arg1_00 = SUB168(auVar2, 0);\n        if (SUB168(auVar2 >> 0x40, 0) != 0) {\n            arg1_00 = 0xffffffffffffffff;\n        }\n        arg1_01 = fcn.140003694(arg1_00);\n        iVar3 = (*_sym.imp.USER32.dll_CopyAcceleratorTableA)(*(arg1 + 0xc0), arg1_01, *(arg1 + 200));\n        puVar5 = arg1_01;\n        iVar7 = iVar6;\n        if (0 < iVar3) {\n            do {\n                if (arg2 == 0) {\n                    fcn.140020780();\n                    pcVar1 = swi(3);\n                    iVar6 = (*pcVar1)();\n                    return iVar6;\n                }\n                uVar4 = 0;\n                if (*(arg2 + 8) == 0x106) {\n                    uVar4 = 0x10;\n                }\n                if (((*puVar5 & 0xfd) == uVar4) && (*(puVar5 + 2) == *(arg2 + 0x10))) {\n                    iVar6 = 1;\n                    break;\n                }\n                iVar7 = iVar7 + 1;\n                puVar5 = puVar5 + 6;\n            } while (iVar7 < iVar3);\n        }\n        fcn.1400036d8(arg1_01);\n    }\n    return iVar6;\n}\n",
        "token_count": 486
    },
    "14002d93": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14002d930(int64_t arg1, ulong noname_1, ulong pv)\n\n{\n    int64_t *piVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    int64_t aiStackX8 [4];\n    \n    piVar1 = *(arg1 + 0x88);\n    if (piVar1 == NULL) {\n        fcn.140020780();\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    aiStackX8[0] = 0;\n    iVar3 = (**(*piVar1 + 0x18))(piVar1, aiStackX8);\n    if ((-1 < iVar3) && (*(arg1 + 0x48) != aiStackX8[0])) {\n        *(arg1 + 0x48) = aiStackX8[0];\n        if (*(arg1 + 0x50) != 0) {\n            fcn.14000fc78(*(arg1 + 0x50), aiStackX8[0]);\n            *(*(arg1 + 0x50) + 0xa0) = arg1;\n        }\n    }\n    return;\n}\n",
        "token_count": 264
    },
    "14002e70": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14002e700(int64_t arg1, ulong arg2, ulong *arg3, ulong *arg4)\n\n{\n    ulong uVar1;\n    int64_t arg1_00;\n    \n    if (arg4 != NULL) {\n        *arg4 = 0;\n    }\n    arg1_00 = *(arg1 + 0xe0);\n    while( true ) {\n        if (arg1_00 == 0) {\n            return 0;\n        }\n        if (*(arg1_00 + 0xc) == arg2) break;\n        arg1_00 = *(arg1_00 + 0x20);\n    }\n    uVar1 = fcn.14002e6ac(arg1_00);\n    *arg3 = uVar1;\n    return 0;\n}\n",
        "token_count": 175
    },
    "14002efc": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14002efc0(int64_t **arg1)\n\n{\n    if (*arg1 != NULL) {\n        (**(**arg1 + 0x10))();\n    }\n    return;\n}\n",
        "token_count": 45
    },
    "14002f26": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14002f260(int64_t **arg1)\n\n{\n    if (*arg1 != NULL) {\n        (**(**arg1 + 0x10))();\n    }\n    return;\n}\n",
        "token_count": 44
    },
    "14002f33": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint64_t fcn.14002f33c(int64_t arg1)\n\n{\n    int64_t *piVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint64_t uVar5;\n    uint32_t uVar6;\n    ulong in_R9;\n    int32_t iStackX8;\n    int32_t iStackX12;\n    ulong uVar7;\n    uchar auStack48 [40];\n    \n    uVar7 = 0xfffffffffffffffe;\n    iStackX12 = *(arg1 + 0x68) - *(arg1 + 0x60);\n    iStackX8 = *(arg1 + 100) - *(arg1 + 0x5c);\n    fcn.14001bde0(auStack48, 0);\n    fcn.140042f30(auStack48, &iStackX8);\n    piVar1 = *(arg1 + 0x80);\n    if (piVar1 == NULL) {\n        fcn.140020780();\n        pcVar2 = swi(3);\n        uVar5 = (*pcVar2)();\n        return uVar5;\n    }\n    uVar5 = 1;\n    iVar3 = (**(*piVar1 + 0x88))(piVar1, 1, &iStackX8, in_R9, uVar7);\n    if (-1 < iVar3) {\n        uVar5 = 1;\n        iVar4 = (**(**(arg1 + 0x80) + 0x90))(*(arg1 + 0x80), 1, &iStackX8);\n        if (-1 < iVar4) {\n            fcn.140042ff0(auStack48, &iStackX8);\n            *(arg1 + 100) = iStackX8 + *(arg1 + 0x5c);\n            uVar6 = *(arg1 + 0x60) + iStackX12;\n            uVar5 = uVar6;\n            *(arg1 + 0x68) = uVar6;\n        }\n    }\n    fcn.14001be44(auStack48, uVar5);\n    return -1 < iVar3;\n}\n",
        "token_count": 486
    },
    "14003117": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14003117c(int64_t **arg1)\n\n{\n    int64_t *piVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    int64_t iVar4;\n    ushort uVar5;\n    int64_t *piStackX8;\n    \n    if ((*(arg1 + 0xc) != -0x7ffeffff) && (piVar1 = *arg1,  piVar1 != NULL)) {\n        if (piVar1[0x10] == 0) {\n            fcn.140020780();\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n        iVar3 = (***piVar1[0x10])(piVar1[0x10], 0x1400b5aa8, &piStackX8);\n        if (iVar3 < 0) {\n            iVar4 = fcn.14002e6ac(arg1);\n            if (iVar4 != 0) {\n                uVar5 = 0xd;\n                if (arg1[2][0x1b] != 0) {\n                    uVar5 = 0x800d;\n                }\n                (**(**arg1 + 0xe0))(*arg1, *(arg1 + 0xc), uVar5, iVar4);\n            }\n        }\n        else {\n            (**(*piStackX8 + 0x18))(piStackX8, *(arg1 + 0xc), arg1[2] != NULL, arg1 + 3);\n            (**(*piStackX8 + 0x10))();\n        }\n    }\n    return;\n}\n",
        "token_count": 359
    },
    "1400314c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400314c0(ulong *arg1)\n\n{\n    fcn.1400036d8(*arg1);\n    *arg1 = 0;\n    return;\n}\n",
        "token_count": 42
    },
    "14003156": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140031568(int64_t **arg1)\n\n{\n    if (*arg1 != NULL) {\n        (**(**arg1 + 0x10))();\n    }\n    return;\n}\n",
        "token_count": 43
    },
    "14003158": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140031580(int64_t **arg1)\n\n{\n    if (*arg1 != NULL) {\n        (**(**arg1 + 0x10))();\n    }\n    return;\n}\n",
        "token_count": 43
    },
    "1400316e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.1400316e0(int64_t arg1, uint64_t arg2, ulong *arg3)\n\n{\n    uint64_t *puVar1;\n    uint64_t uVar2;\n    ulong *puVar3;\n    int64_t iVar4;\n    \n    uVar2 = 0;\n    if (arg3 != NULL) {\n        if (*(arg1 + 0x38) == '\\0') {\n            iVar4 = *(arg1 + 0x28);\n            if (arg2 <= *(arg1 + 0x18) + -1 + *(iVar4 + 0x10)) {\n                uVar2 = arg2 - *(iVar4 + 0x10);\ncode_r0x000140031738:\n                puVar3 = *(iVar4 + 8 + uVar2 * 0x50) + *(arg1 + 0x10);\n                *arg3 = *puVar3;\n                arg3[1] = puVar3[1];\n                *(arg3 + 2) = *(puVar3 + 2);\n                *(arg3 + 0x12) = *(puVar3 + 0x12);\n                return 1;\n            }\n        }\n        else if (*(arg1 + 0x18) != 0) {\n            iVar4 = *(arg1 + 0x28);\n            puVar1 = iVar4 + 0x10;\n            do {\n                if (*puVar1 == arg2) goto code_r0x000140031738;\n                uVar2 = uVar2 + 1;\n                puVar1 = puVar1 + 10;\n            } while (uVar2 < *(arg1 + 0x18));\n        }\n    }\n    return 0;\n}\n",
        "token_count": 379
    },
    "14003176": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14003176c(int64_t arg1, uint64_t arg2, uint *arg3)\n\n{\n    uint64_t *puVar1;\n    uint64_t uVar2;\n    uint *puVar3;\n    int64_t iVar4;\n    \n    uVar2 = 0;\n    if (arg3 != NULL) {\n        if (*(arg1 + 0x38) == '\\0') {\n            iVar4 = *(arg1 + 0x28);\n            if (arg2 <= *(arg1 + 0x18) + -1 + *(iVar4 + 0x10)) {\n                uVar2 = arg2 - *(iVar4 + 0x10);\ncode_r0x0001400317c4:\n                puVar3 = *(iVar4 + 8 + uVar2 * 0x50) + *(arg1 + 0x10);\n                *arg3 = *puVar3;\n                *(arg3 + 1) = *(puVar3 + 1);\n                return 1;\n            }\n        }\n        else if (*(arg1 + 0x18) != 0) {\n            iVar4 = *(arg1 + 0x28);\n            puVar1 = iVar4 + 0x10;\n            do {\n                if (*puVar1 == arg2) goto code_r0x0001400317c4;\n                uVar2 = uVar2 + 1;\n                puVar1 = puVar1 + 10;\n            } while (uVar2 < *(arg1 + 0x18));\n        }\n    }\n    return 0;\n}\n",
        "token_count": 348
    },
    "1400317e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.1400317e8(int64_t arg1, uint64_t arg2, uint *arg3)\n\n{\n    uint64_t *puVar1;\n    uint64_t uVar2;\n    uint *puVar3;\n    int64_t iVar4;\n    \n    uVar2 = 0;\n    if (arg3 != NULL) {\n        if (*(arg1 + 0x38) == '\\0') {\n            iVar4 = *(arg1 + 0x28);\n            if (arg2 <= *(arg1 + 0x18) + -1 + *(iVar4 + 0x10)) {\n                uVar2 = arg2 - *(iVar4 + 0x10);\ncode_r0x000140031840:\n                puVar3 = *(iVar4 + 8 + uVar2 * 0x50) + *(arg1 + 0x10);\n                *arg3 = *puVar3;\n                *(arg3 + 1) = *(puVar3 + 1);\n                return 1;\n            }\n        }\n        else if (*(arg1 + 0x18) != 0) {\n            iVar4 = *(arg1 + 0x28);\n            puVar1 = iVar4 + 0x10;\n            do {\n                if (*puVar1 == arg2) goto code_r0x000140031840;\n                uVar2 = uVar2 + 1;\n                puVar1 = puVar1 + 10;\n            } while (uVar2 < *(arg1 + 0x18));\n        }\n    }\n    return 0;\n}\n",
        "token_count": 345
    },
    "14003186": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140031864(int64_t arg1, uint64_t arg2, uint *arg3)\n\n{\n    uint uVar1;\n    uint uVar2;\n    uint uVar3;\n    uint64_t *puVar4;\n    uint64_t uVar5;\n    uint *puVar6;\n    int64_t iVar7;\n    \n    uVar5 = 0;\n    if (arg3 != NULL) {\n        if (*(arg1 + 0x38) == '\\0') {\n            iVar7 = *(arg1 + 0x28);\n            if (arg2 <= *(arg1 + 0x18) + -1 + *(iVar7 + 0x10)) {\n                uVar5 = arg2 - *(iVar7 + 0x10);\ncode_r0x0001400318c6:\n                puVar6 = *(iVar7 + 8 + uVar5 * 0x50) + *(arg1 + 0x10);\n                uVar1 = puVar6[1];\n                uVar2 = puVar6[2];\n                uVar3 = puVar6[3];\n                *arg3 = *puVar6;\n                arg3[1] = uVar1;\n                arg3[2] = uVar2;\n                arg3[3] = uVar3;\n                return 1;\n            }\n        }\n        else if (*(arg1 + 0x18) != 0) {\n            iVar7 = *(arg1 + 0x28);\n            puVar4 = iVar7 + 0x10;\n            do {\n                if (*puVar4 == arg2) goto code_r0x0001400318c6;\n                uVar5 = uVar5 + 1;\n                puVar4 = puVar4 + 10;\n            } while (uVar5 < *(arg1 + 0x18));\n        }\n    }\n    return 0;\n}\n",
        "token_count": 414
    },
    "1400318e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.1400318e4(int64_t arg1, uint64_t arg2, ushort *arg3)\n\n{\n    uint64_t *puVar1;\n    uint64_t uVar2;\n    int64_t iVar3;\n    \n    uVar2 = 0;\n    if (*(arg1 + 0x38) == '\\0') {\n        iVar3 = *(arg1 + 0x28);\n        if (arg2 <= *(arg1 + 0x18) + -1 + *(iVar3 + 0x10)) {\n            uVar2 = arg2 - *(iVar3 + 0x10);\ncode_r0x000140031940:\n            *(*(iVar3 + 8 + uVar2 * 0x50) + *(arg1 + 0x10)) = *arg3;\n            return 1;\n        }\n    }\n    else if (*(arg1 + 0x18) != 0) {\n        iVar3 = *(arg1 + 0x28);\n        puVar1 = iVar3 + 0x10;\n        do {\n            if (*puVar1 == arg2) goto code_r0x000140031940;\n            uVar2 = uVar2 + 1;\n            puVar1 = puVar1 + 10;\n        } while (uVar2 < *(arg1 + 0x18));\n    }\n    return 0;\n}\n",
        "token_count": 302
    },
    "14003195": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14003195c(int64_t arg1, uint64_t arg2, uint *arg3)\n\n{\n    uint64_t *puVar1;\n    uint64_t uVar2;\n    int64_t iVar3;\n    \n    uVar2 = 0;\n    if (*(arg1 + 0x38) == '\\0') {\n        iVar3 = *(arg1 + 0x28);\n        if (arg2 <= *(arg1 + 0x18) + -1 + *(iVar3 + 0x10)) {\n            uVar2 = arg2 - *(iVar3 + 0x10);\ncode_r0x0001400319b8:\n            *(*(iVar3 + 8 + uVar2 * 0x50) + *(arg1 + 0x10)) = *arg3;\n            return 1;\n        }\n    }\n    else if (*(arg1 + 0x18) != 0) {\n        iVar3 = *(arg1 + 0x28);\n        puVar1 = iVar3 + 0x10;\n        do {\n            if (*puVar1 == arg2) goto code_r0x0001400319b8;\n            uVar2 = uVar2 + 1;\n            puVar1 = puVar1 + 10;\n        } while (uVar2 < *(arg1 + 0x18));\n    }\n    return 0;\n}\n",
        "token_count": 305
    },
    "1400319d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.1400319d4(int64_t arg1, uint64_t arg2, uint *arg3)\n\n{\n    uint64_t *puVar1;\n    uint64_t uVar2;\n    int64_t iVar3;\n    \n    uVar2 = 0;\n    if (*(arg1 + 0x38) == '\\0') {\n        iVar3 = *(arg1 + 0x28);\n        if (arg2 <= *(arg1 + 0x18) + -1 + *(iVar3 + 0x10)) {\n            uVar2 = arg2 - *(iVar3 + 0x10);\ncode_r0x000140031a30:\n            *(*(iVar3 + 8 + uVar2 * 0x50) + *(arg1 + 0x10)) = *arg3;\n            return 1;\n        }\n    }\n    else if (*(arg1 + 0x18) != 0) {\n        iVar3 = *(arg1 + 0x28);\n        puVar1 = iVar3 + 0x10;\n        do {\n            if (*puVar1 == arg2) goto code_r0x000140031a30;\n            uVar2 = uVar2 + 1;\n            puVar1 = puVar1 + 10;\n        } while (uVar2 < *(arg1 + 0x18));\n    }\n    return 0;\n}\n",
        "token_count": 304
    },
    "140031a4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140031a4c(int64_t arg1, uint64_t arg2, ulong *arg3)\n\n{\n    uint64_t *puVar1;\n    uint64_t uVar2;\n    int64_t iVar3;\n    \n    uVar2 = 0;\n    if (*(arg1 + 0x38) == '\\0') {\n        iVar3 = *(arg1 + 0x28);\n        if (arg2 <= *(arg1 + 0x18) + -1 + *(iVar3 + 0x10)) {\n            uVar2 = arg2 - *(iVar3 + 0x10);\ncode_r0x000140031aa8:\n            *(*(iVar3 + 8 + uVar2 * 0x50) + *(arg1 + 0x10)) = *arg3;\n            return 1;\n        }\n    }\n    else if (*(arg1 + 0x18) != 0) {\n        iVar3 = *(arg1 + 0x28);\n        puVar1 = iVar3 + 0x10;\n        do {\n            if (*puVar1 == arg2) goto code_r0x000140031aa8;\n            uVar2 = uVar2 + 1;\n            puVar1 = puVar1 + 10;\n        } while (uVar2 < *(arg1 + 0x18));\n    }\n    return 0;\n}\n",
        "token_count": 304
    },
    "140031ac": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140031ac4(int64_t arg1, uint64_t arg2, ulong *arg3)\n\n{\n    uint64_t *puVar1;\n    int64_t iVar2;\n    uint64_t uVar3;\n    \n    uVar3 = 0;\n    if (arg3 != NULL) {\n        if (*(arg1 + 0x38) == '\\0') {\n            iVar2 = *(arg1 + 0x28);\n            if (arg2 <= *(arg1 + 0x18) + -1 + *(iVar2 + 0x10)) {\n                uVar3 = arg2 - *(iVar2 + 0x10);\ncode_r0x000140031b33:\n                *arg3 = *(*(iVar2 + 8 + uVar3 * 0x50) + *(arg1 + 0x10));\n                return 1;\n            }\n        }\n        else if (*(arg1 + 0x18) != 0) {\n            iVar2 = *(arg1 + 0x28);\n            puVar1 = iVar2 + 0x10;\n            do {\n                if (*puVar1 == arg2) goto code_r0x000140031b33;\n                uVar3 = uVar3 + 1;\n                puVar1 = puVar1 + 10;\n            } while (uVar3 < *(arg1 + 0x18));\n        }\n    }\n    return 0;\n}\n",
        "token_count": 313
    },
    "140031b5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140031b50(int64_t arg1, uint64_t arg2, ulong *arg3)\n\n{\n    uint64_t *puVar1;\n    uint64_t uVar2;\n    int64_t iVar3;\n    \n    uVar2 = 0;\n    if (*(arg1 + 0x38) == '\\0') {\n        iVar3 = *(arg1 + 0x28);\n        if (arg2 <= *(arg1 + 0x18) + -1 + *(iVar3 + 0x10)) {\n            uVar2 = arg2 - *(iVar3 + 0x10);\ncode_r0x000140031bac:\n            *(*(iVar3 + 8 + uVar2 * 0x50) + *(arg1 + 0x10)) = *arg3;\n            return 1;\n        }\n    }\n    else if (*(arg1 + 0x18) != 0) {\n        iVar3 = *(arg1 + 0x28);\n        puVar1 = iVar3 + 0x10;\n        do {\n            if (*puVar1 == arg2) goto code_r0x000140031bac;\n            uVar2 = uVar2 + 1;\n            puVar1 = puVar1 + 10;\n        } while (uVar2 < *(arg1 + 0x18));\n    }\n    return 0;\n}\n",
        "token_count": 301
    },
    "140031bc": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140031bc8(int64_t arg1, uint64_t arg2, uint *arg3)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    uint uVar3;\n    uint uVar4;\n    uint64_t *puVar5;\n    uint64_t uVar6;\n    int64_t iVar7;\n    \n    uVar6 = 0;\n    if (*(arg1 + 0x38) == '\\0') {\n        iVar7 = *(arg1 + 0x28);\n        if (arg2 <= *(arg1 + 0x18) + -1 + *(iVar7 + 0x10)) {\n            uVar6 = arg2 - *(iVar7 + 0x10);\ncode_r0x000140031c24:\n            uVar2 = arg3[1];\n            uVar3 = arg3[2];\n            uVar4 = arg3[3];\n            puVar1 = *(iVar7 + 8 + uVar6 * 0x50) + *(arg1 + 0x10);\n            *puVar1 = *arg3;\n            puVar1[1] = uVar2;\n            puVar1[2] = uVar3;\n            puVar1[3] = uVar4;\n            return 1;\n        }\n    }\n    else if (*(arg1 + 0x18) != 0) {\n        iVar7 = *(arg1 + 0x28);\n        puVar5 = iVar7 + 0x10;\n        do {\n            if (*puVar5 == arg2) goto code_r0x000140031c24;\n            uVar6 = uVar6 + 1;\n            puVar5 = puVar5 + 10;\n        } while (uVar6 < *(arg1 + 0x18));\n    }\n    return 0;\n}\n",
        "token_count": 402
    },
    "140031c4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140031c44(int64_t arg1, uint64_t arg2, uchar *arg3)\n\n{\n    uint64_t *puVar1;\n    uint64_t uVar2;\n    int64_t iVar3;\n    \n    uVar2 = 0;\n    if (*(arg1 + 0x38) == '\\0') {\n        iVar3 = *(arg1 + 0x28);\n        if (arg2 <= *(arg1 + 0x18) + -1 + *(iVar3 + 0x10)) {\n            uVar2 = arg2 - *(iVar3 + 0x10);\ncode_r0x000140031ca0:\n            *(*(iVar3 + 8 + uVar2 * 0x50) + *(arg1 + 0x10)) = *arg3;\n            return 1;\n        }\n    }\n    else if (*(arg1 + 0x18) != 0) {\n        iVar3 = *(arg1 + 0x28);\n        puVar1 = iVar3 + 0x10;\n        do {\n            if (*puVar1 == arg2) goto code_r0x000140031ca0;\n            uVar2 = uVar2 + 1;\n            puVar1 = puVar1 + 10;\n        } while (uVar2 < *(arg1 + 0x18));\n    }\n    return 0;\n}\n",
        "token_count": 303
    },
    "140031cb": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140031cbc(int64_t arg1, uint64_t arg2, uchar *arg3)\n\n{\n    uint64_t *puVar1;\n    uint64_t uVar2;\n    int64_t iVar3;\n    \n    uVar2 = 0;\n    if (*(arg1 + 0x38) == '\\0') {\n        iVar3 = *(arg1 + 0x28);\n        if (arg2 <= *(arg1 + 0x18) + -1 + *(iVar3 + 0x10)) {\n            uVar2 = arg2 - *(iVar3 + 0x10);\ncode_r0x000140031d18:\n            *(*(iVar3 + 8 + uVar2 * 0x50) + *(arg1 + 0x10)) = *arg3;\n            return 1;\n        }\n    }\n    else if (*(arg1 + 0x18) != 0) {\n        iVar3 = *(arg1 + 0x28);\n        puVar1 = iVar3 + 0x10;\n        do {\n            if (*puVar1 == arg2) goto code_r0x000140031d18;\n            uVar2 = uVar2 + 1;\n            puVar1 = puVar1 + 10;\n        } while (uVar2 < *(arg1 + 0x18));\n    }\n    return 0;\n}\n",
        "token_count": 302
    },
    "140031d3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140031d34(int64_t arg1, uint64_t arg2, ushort *arg3)\n\n{\n    uint64_t *puVar1;\n    uint64_t uVar2;\n    int64_t iVar3;\n    \n    uVar2 = 0;\n    if (*(arg1 + 0x38) == '\\0') {\n        iVar3 = *(arg1 + 0x28);\n        if (arg2 <= *(arg1 + 0x18) + -1 + *(iVar3 + 0x10)) {\n            uVar2 = arg2 - *(iVar3 + 0x10);\ncode_r0x000140031d90:\n            *(*(iVar3 + 8 + uVar2 * 0x50) + *(arg1 + 0x10)) = *arg3;\n            return 1;\n        }\n    }\n    else if (*(arg1 + 0x18) != 0) {\n        iVar3 = *(arg1 + 0x28);\n        puVar1 = iVar3 + 0x10;\n        do {\n            if (*puVar1 == arg2) goto code_r0x000140031d90;\n            uVar2 = uVar2 + 1;\n            puVar1 = puVar1 + 10;\n        } while (uVar2 < *(arg1 + 0x18));\n    }\n    return 0;\n}\n",
        "token_count": 303
    },
    "140031da": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140031dac(int64_t arg1, uint64_t arg2, uint *arg3)\n\n{\n    uint64_t *puVar1;\n    uint64_t uVar2;\n    int64_t iVar3;\n    \n    uVar2 = 0;\n    if (*(arg1 + 0x38) == '\\0') {\n        iVar3 = *(arg1 + 0x28);\n        if (arg2 <= *(arg1 + 0x18) + -1 + *(iVar3 + 0x10)) {\n            uVar2 = arg2 - *(iVar3 + 0x10);\ncode_r0x000140031e08:\n            *(*(iVar3 + 8 + uVar2 * 0x50) + *(arg1 + 0x10)) = *arg3;\n            return 1;\n        }\n    }\n    else if (*(arg1 + 0x18) != 0) {\n        iVar3 = *(arg1 + 0x28);\n        puVar1 = iVar3 + 0x10;\n        do {\n            if (*puVar1 == arg2) goto code_r0x000140031e08;\n            uVar2 = uVar2 + 1;\n            puVar1 = puVar1 + 10;\n        } while (uVar2 < *(arg1 + 0x18));\n    }\n    return 0;\n}\n",
        "token_count": 302
    },
    "14003213": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140032138(int64_t arg1)\n\n{\n    int64_t arg1_00;\n    ulong uVar1;\n    ulong uStack56;\n    uint uStack48;\n    ulong uStack40;\n    ulong uStack32;\n    ulong uStack24;\n    \n    if (*(arg1 + 0x90) == 0) {\n        if (*(arg1 + 0x70) != 0) {\n            uStack40 = *(arg1 + 0x80);\n            uStack32 = 0;\n            uStack24 = 0;\n            uStack48 = 0;\n            uStack56 = 1;\n            uVar1 = (**(**(arg1 + 0x10) + 0x40))(*(arg1 + 0x10), 1, 0x1400b73f9, 0, &uStack56);\n            return uVar1;\n        }\n    }\n    else {\n        arg1_00 = *(arg1 + 0xa0);\n        if ((arg1_00 != 0) && (*(arg1_00 + 0x18) != 0)) {\n            uVar1 = fcn.1400314dc(arg1_00);\n            return uVar1;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 280
    },
    "1400321c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400321c0(int64_t arg1, int64_t arg2)\n\n{\n    if (*(arg1 + 0x10) != arg2) {\n        *(arg1 + 0x10) = arg2;\n        fcn.14003117c(arg1);\n    }\n    return;\n}\n",
        "token_count": 70
    },
    "140032ac": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140032ac4(ulong noname_0, int64_t **pvargDest, ulong *arg3)\n\n{\n    int64_t *apiStackX16 [3];\n    \n    if (pvargDest == NULL) {\n        return;\n    }\n    if ((noname_0 & 0x2000) == 0) {\n        if (noname_0 == 8) {\n            (*_sym.imp.OLEAUT32.dll_SysStringLen)(*pvargDest);\n        }\n        else {\n            if (noname_0 != 9) {\n                if (noname_0 == 0xc) {\n                    (*_sym.imp.OLEAUT32.dll_VariantCopy)(pvargDest);\n                    goto code_r0x000140032b8c;\n                }\n                if (noname_0 != 0xd) {\n                    if ((((noname_0 == 0x88) && (apiStackX16[0] = NULL,  arg3 != NULL)) &&\n                        ((***arg3)(arg3, 0x1400a68e0, apiStackX16),  apiStackX16[0] != NULL)) &&\n                       ((**(*apiStackX16[0] + 0x20))(apiStackX16[0], *pvargDest, 0),  apiStackX16[0] != NULL)) {\n                        (**(*apiStackX16[0] + 0x10))();\n                    }\n                    goto code_r0x000140032b8c;\n                }\n            }\n            if (*pvargDest == NULL) goto code_r0x000140032b8c;\n            (**(**pvargDest + 0x10))();\n        }\n    }\n    else {\n        if (*pvargDest == NULL) goto code_r0x000140032b8c;\n        (*_sym.imp.OLEAUT32.dll_SafeArrayGetDim)();\n    }\n    *pvargDest = NULL;\ncode_r0x000140032b8c:\n    if (((noname_0 & 0x1000) != 0) && ((noname_0 & 0x4000) != 0xffffffff)) {\n        (*_sym.imp.ole32.dll_CoTaskMemFree)(pvargDest[1]);\n    }\n    return;\n}\n",
        "token_count": 495
    },
    "14003303": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.140033030(int64_t arg1)\n\n{\n    uint32_t uVar1;\n    int64_t *piVar2;\n    int64_t *piVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    int64_t iVar6;\n    ulong uVar7;\n    \n    iVar4 = 0;\n    uVar5 = 0;\n    uVar1 = *(*(arg1 + 0x10) + 8);\n    if (uVar1 != 0) {\n        iVar6 = 0;\n        do {\n            piVar2 = *(arg1 + 8);\n            if (piVar2 == NULL) {\n                iVar4 = -0x7fffbffe;\n            }\n            else {\n                piVar3 = *(arg1 + 0x10);\n                if (uVar5 < *(piVar3 + 1)) {\n                    uVar7 = *(iVar6 + *piVar3);\n                }\n                else {\n                    uVar7 = 0;\n                }\n                iVar4 = (**(*piVar2 + 0x20))(piVar2, *(arg1 + 0x18), uVar7, piVar3[2]);\n            }\n            if (iVar4 < 0) {\n                return iVar4;\n            }\n            uVar5 = uVar5 + 1;\n            iVar6 = iVar6 + 0x10;\n        } while (uVar5 < uVar1);\n    }\n    return iVar4;\n}\n",
        "token_count": 326
    },
    "14003706": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140037064(int64_t hWnd, int64_t lParam)\n\n{\n    ulong uVar1;\n    \n    uVar1 = 0;\n    if (hWnd == 0) {\n        uVar1 = 0;\n    }\n    else {\n        if (lParam != 0) {\n            uVar1 = *(lParam + 0x10);\n        }\n        uVar1 = (*_sym.imp.USER32.dll_SendMessageA)(*(hWnd + 0x40), 0x87, uVar1, lParam);\n    }\n    return uVar1;\n}\n",
        "token_count": 128
    },
    "14003714": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140037140(int64_t *arg1)\n\n{\n    int64_t *piVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int64_t iVar4;\n    \n    if (arg1 != NULL) {\n        piVar1 = arg1[1];\n        if (piVar1 == NULL) {\n            iVar4 = *arg1;\n        }\n        else {\n            iVar4 = piVar1[9];\n        }\n        if (iVar4 == 0) {\n            if ((piVar1 == NULL) || (uVar3 = (**(*piVar1 + 0xf0))(piVar1),  (uVar3 >> 0x1b & 1) == 0))\n            goto code_r0x000140037192;\n        }\n        else {\n            iVar2 = (*_sym.imp.USER32.dll_IsWindowEnabled)();\n            if (iVar2 != 0) {\ncode_r0x000140037192:\n                if (arg1[1] == 0) {\n                    return 0;\n                }\n                if ((*(arg1[1] + 0xb0) >> 0xd & 1) == 0) {\n                    return 0;\n                }\n                return 1;\n            }\n        }\n    }\n    return 0;\n}\n",
        "token_count": 283
    },
    "1400371b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint64_t fcn.1400371b8(int64_t hWnd)\n\n{\n    uint32_t uVar1;\n    uint64_t uVar2;\n    \n    if (hWnd == 0) {\n        uVar2 = 0;\n    }\n    else if (*(hWnd + 0xa0) == 0) {\n        uVar1 = (*_sym.imp.USER32.dll_SendMessageA)(*(hWnd + 0x40), 0x87, 0, 0);\n        uVar2 = uVar1 & 0x30;\n    }\n    else {\n        uVar2 = fcn.14002d354(*(hWnd + 0xa0));\n    }\n    return uVar2;\n}\n",
        "token_count": 157
    },
    "14003725": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140037258(int64_t hWnd, ulong noname_1, ulong noname_2, ulong lParam)\n\n{\n    ulong arg1;\n    uint64_t uVar1;\n    \n    uVar1 = 0;\n    if (hWnd != 0) {\n        uVar1 = (*_sym.imp.USER32.dll_SendMessageA)(*(hWnd + 0x40), 0x87, 0, 0);\n    }\n    if ((uVar1 & 8) != 0) {\n        (*_sym.imp.USER32.dll_SendMessageA)(*(hWnd + 0x40), 0xb1, 0, 0xffffffffffffffff);\n    }\n    if (*(hWnd + 0xa0) == 0) {\n        arg1 = (*_sym.imp.USER32.dll_SetFocus)(*(hWnd + 0x40));\n        fcn.14000fc08(arg1);\n    }\n    else {\n        (**(**(hWnd + 0xa0) + 0x160))();\n    }\n    return;\n}\n",
        "token_count": 230
    },
    "1400372a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.1400372a4(int64_t arg1, int64_t arg2)\n\n{\n    uint32_t uVar1;\n    ulong arg1_00;\n    int64_t iVar2;\n    int64_t iVar3;\n    \n    iVar2 = 0;\n    iVar3 = iVar2;\n    if (arg2 != 0) {\n        do {\n            iVar2 = arg2;\n            uVar1 = (*_sym.imp.USER32.dll_GetWindowLongA)(*(iVar2 + 0x40), 0xfffffff0);\n            if ((uVar1 & 0xc0000000) != 0x40000000) {\n                return iVar3;\n            }\n            if (iVar2 == arg1) {\n                return iVar3;\n            }\n            arg1_00 = (*_sym.imp.USER32.dll_GetParent)(*(iVar2 + 0x40));\n            arg2 = fcn.14000fc08(arg1_00);\n            uVar1 = (*_sym.imp.USER32.dll_GetWindowLongA)(*(arg2 + 0x40), 0xffffffec);\n            iVar3 = iVar2;\n        } while ((uVar1 >> 0x10 & 1) == 0);\n    }\n    return iVar2;\n}\n",
        "token_count": 275
    },
    "14003742": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140037428(int64_t arg1)\n\n{\n    int64_t iVar1;\n    int32_t iVar2;\n    ulong uVar3;\n    int64_t iVar4;\n    int64_t *piVar5;\n    \n    if (arg1 != 0) {\n        piVar5 = NULL;\n        iVar4 = arg1;\n        do {\n            iVar1 = *(iVar4 + 0x98);\n            if ((iVar1 != 0) || (piVar5 = *(iVar4 + 0xa0),  piVar5 != NULL)) break;\n            uVar3 = (*_sym.imp.USER32.dll_GetParent)(*(iVar4 + 0x40));\n            iVar4 = fcn.14000fc08(uVar3);\n        } while (iVar4 != 0);\n        if ((iVar4 != 0) && (iVar1 == 0)) {\n            (**(*piVar5 + 0x160))(piVar5);\n            uVar3 = (*_sym.imp.USER32.dll_GetFocus)();\n            iVar4 = fcn.14000fc08(uVar3);\n            if ((iVar4 != arg1) && (iVar2 = (*_sym.imp.USER32.dll_IsWindow)(*(arg1 + 0x40)),  iVar2 != 0)) {\n                fcn.1400154fc(arg1);\n            }\n        }\n    }\n    return;\n}\n",
        "token_count": 300
    },
    "1400374c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400374c8(int64_t hWnd, int64_t arg2)\n\n{\n    int64_t *piVar1;\n    int64_t iVar2;\n    int32_t iVar3;\n    ulong arg1;\n    int64_t iVar4;\n    \n    if (((hWnd != 0) && (iVar3 = (*_sym.imp.USER32.dll_IsWindow)(*(hWnd + 0x40)),  iVar3 != 0)) && (hWnd != arg2)) {\n        do {\n            piVar1 = *(hWnd + 0x98);\n            if (piVar1 != NULL) {\n                iVar2 = piVar1[0x19];\n                iVar4 = 0;\n                if (((iVar2 != 0) && (*(iVar2 + 0xb4) == 0)) && (iVar4 = fcn.14000fc08(*(iVar2 + 0x48)),  iVar4 == 0)) {\n                    return;\n                }\n                if ((arg2 != 0) && (iVar4 != 0)) {\n                    if (arg2 == iVar4) {\n                        return;\n                    }\n                    iVar3 = (*_sym.imp.USER32.dll_IsChild)(*(iVar4 + 0x40), *(arg2 + 0x40));\n                    if (iVar3 != 0) {\n                        return;\n                    }\n                }\n                (**(*piVar1 + 0xc0))(piVar1, 0);\n                return;\n            }\n            arg1 = (*_sym.imp.USER32.dll_GetParent)(*(hWnd + 0x40));\n            hWnd = fcn.14000fc08(arg1);\n        } while (hWnd != 0);\n    }\n    return;\n}\n",
        "token_count": 368
    },
    "14003758": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.140037588(int64_t arg1, ulong arg2)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    \n    iVar2 = fcn.1400150a4(arg1, arg2);\n    if (iVar2 == 0) {\n        iVar3 = fcn.140037320(arg1, 0, 1);\n        iVar2 = iVar3;\n        if (iVar3 != arg1) {\n            do {\n                iVar1 = fcn.1400153bc(iVar2);\n                if (iVar1 == arg2) {\n                    return iVar2;\n                }\n                iVar2 = fcn.140037320(arg1, iVar2, 1);\n            } while ((iVar2 != 0) && (iVar2 != iVar3));\n        }\n        iVar2 = 0;\n    }\n    return iVar2;\n}\n",
        "token_count": 196
    },
    "14003760": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14003760c(int64_t arg1, ulong arg2)\n\n{\n    uint8_t uVar1;\n    \n    if (*(arg1 + 0xa0) == 0) {\n        uVar1 = (*_sym.imp.USER32.dll_SendMessageA)(*(arg1 + 0x40), 0x87, 0, 0);\n        if ((uVar1 & (-(arg2 != 0) & 0x10U) + 0x10) != 0) {\n            (*_sym.imp.USER32.dll_SendMessageA)(*(arg1 + 0x40), 0xf4, arg2 != 0, 1);\n        }\n    }\n    else {\n        fcn.14002d374(*(arg1 + 0xa0), arg2);\n    }\n    return;\n}\n",
        "token_count": 182
    },
    "14003768": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140037688(ulong arg1, int64_t arg2)\n\n{\n    uint32_t uVar1;\n    int64_t iVar2;\n    int64_t arg1_00;\n    \n    if ((arg2 == 0) || (uVar1 = (*_sym.imp.USER32.dll_GetWindowLongA)(*(arg2 + 0x40)),  (uVar1 >> 0x10 & 1) != 0)) {\n        iVar2 = fcn.140037320(arg1, 0, 3);\n    }\n    else {\n        iVar2 = fcn.1400372a4(arg1, arg2);\n    }\n    arg1_00 = iVar2;\n    if (iVar2 != 0) {\n        do {\n            fcn.14003760c(arg1_00, 0);\n            arg1_00 = fcn.140037320(arg1, arg1_00, 0);\n            if (arg1_00 == 0) {\n                return;\n            }\n        } while (arg1_00 != iVar2);\n    }\n    return;\n}\n",
        "token_count": 240
    },
    "14003775": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140037750(int64_t hWndParent, int64_t arg2, int64_t arg3)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    int64_t iVar4;\n    \n    uVar2 = 0;\n    iVar1 = (*_sym.imp.USER32.dll_IsChild)(*(hWndParent + 0x40));\n    if (iVar1 == 0) {\n        return;\n    }\n    if (arg3 != 0) {\n        uVar2 = (*_sym.imp.USER32.dll_GetWindowLongA)(*(arg3 + 0x40));\n        if ((uVar2 >> 0x10 & 1) != 0) {\n            return;\n        }\n        uVar2 = fcn.1400371b8(arg3);\n    }\n    if (arg2 == arg3) {\n        if ((uVar2 & 0x20) == 0) {\n            return;\n        }\n        if (arg2 == 0) goto code_r0x000140037856;\n        uVar3 = fcn.140037714(hWndParent);\n        iVar4 = fcn.140037588(hWndParent, uVar3);\n        if (((iVar4 == 0) || (iVar4 == arg3)) || (uVar3 = fcn.1400371b8(iVar4),  (uVar3 & 0x10) == 0))\n        goto code_r0x000140037856;\ncode_r0x00014003781b:\n        fcn.140037688(hWndParent, iVar4);\n    }\n    else {\n        iVar4 = arg3;\n        if (((arg2 != 0) && (iVar1 = fcn.1400371b8(arg2),  iVar1 != 0)) || ((arg3 != 0 && (uVar2 != 0))))\n        goto code_r0x00014003781b;\n    }\n    if ((uVar2 & 0x30) == 0) {\n        uVar2 = fcn.140037714(hWndParent);\n        arg3 = fcn.140037588(hWndParent, uVar2);\n        uVar2 = fcn.1400371b8(arg3);\n        if ((uVar2 & 0x20) == 0) {\n            return;\n        }\n        iVar1 = fcn.14001549c(arg3);\n        if (iVar1 == 0) {\n            return;\n        }\n    }\ncode_r0x000140037856:\n    fcn.14003760c(arg3, 1);\n    return;\n}\n",
        "token_count": 568
    },
    "14003787": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t * fcn.140037878(ulong arg1, int64_t arg2)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    int64_t *piVar3;\n    ulong *puVar4;\n    \n    iVar2 = fcn.14000d158(arg1);\n    if (iVar2 == 0) {\ncode_r0x0001400378c4:\n        piVar3 = NULL;\n    }\n    else {\n        puVar4 = *(iVar2 + 0x88);\n        do {\n            if (puVar4 == NULL) goto code_r0x0001400378c4;\n            if (puVar4 == NULL) {\n                fcn.140020780();\n                pcVar1 = swi(3);\n                piVar3 = (*pcVar1)();\n                return piVar3;\n            }\n            piVar3 = puVar4[2];\n            puVar4 = *puVar4;\n        } while (((piVar3[1] == 0) || (*(piVar3[1] + 0x48) != *(arg2 + 0x40))) && (*piVar3 != *(arg2 + 0x40)));\n    }\n    return piVar3;\n}\n",
        "token_count": 268
    },
    "1400378d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t * fcn.1400378d8(int64_t arg1, int64_t *arg2, ulong arg3)\n\n{\n    int64_t *piVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    int64_t *piVar5;\n    ulong arg2_00;\n    int64_t iVar6;\n    int64_t iVar7;\n    int64_t **ppiVar8;\n    int64_t **ppiVar9;\n    int32_t iVar10;\n    \n    if (arg1 == 0) {\n        fcn.140020780();\n        pcVar2 = swi(3);\n        piVar5 = (*pcVar2)();\n        return piVar5;\n    }\n    iVar3 = 0;\n    piVar5 = arg2;\n    iVar10 = 0;\n    if (arg2 != NULL) {\n        if (arg2[1] == 0) {\n            iVar6 = *arg2;\n        }\n        else {\n            iVar6 = *(arg2[1] + 0x48);\n        }\n        iVar10 = iVar3;\n        if (iVar6 != 0) {\n            arg2_00 = fcn.14000fc08(iVar6);\n            iVar6 = fcn.1400372a4(arg1, arg2_00);\n            if (iVar6 != 0) {\n                piVar5 = fcn.140037878(arg1, iVar6);\n            }\n        }\n    }\n    while (((piVar5 = fcn.1400164d4(arg1, piVar5),  piVar5 != NULL && (iVar10 = iVar10 + 1,  piVar5 != arg2)) &&\n           (iVar10 < 0x3d))) {\n        if ((piVar5[1] != 0) && (iVar3 = fcn.14002d764(piVar5[1], arg3),  iVar3 != 0)) {\n            return piVar5;\n        }\n    }\n    iVar6 = fcn.14000d158(arg1);\n    if (iVar6 != 0) {\n        ppiVar8 = *(iVar6 + 0x88);\n        if (arg2 == NULL) {\n            if (ppiVar8 == NULL) {\n                fcn.140020780();\n                pcVar2 = swi(3);\n                piVar5 = (*pcVar2)();\n                return piVar5;\n            }\n            piVar5 = ppiVar8[2];\n            ppiVar9 = *ppiVar8;\n            arg2 = piVar5;\n        }\n        else {\n            piVar5 = NULL;\n            if (ppiVar8 == NULL) {\n                return NULL;\n            }\n            do {\n                ppiVar9 = ppiVar8;\n                if (piVar5 == arg2) break;\n                if (ppiVar8 == NULL) {\n                    fcn.140020780();\n                    pcVar2 = swi(3);\n                    piVar5 = (*pcVar2)();\n                    return piVar5;\n                }\n                ppiVar9 = *ppiVar8;\n                piVar5 = ppiVar8[2];\n                ppiVar8 = ppiVar9;\n            } while (ppiVar9 != NULL);\n        }\n        if ((ppiVar9 != NULL) && (piVar1 = arg2,  piVar5 != NULL)) {\n            while (piVar1 != NULL) {\n                if (ppiVar9 == NULL) {\n                    ppiVar9 = *(iVar6 + 0x88);\n                }\n                if (ppiVar9 == NULL) {\n                    fcn.140020780();\n                    pcVar2 = swi(3);\n                    piVar5 = (*pcVar2)();\n                    return piVar5;\n                }\n                piVar5 = ppiVar9[2];\n                ppiVar9 = *ppiVar9;\n                if ((piVar5[1] != 0) && (iVar10 = fcn.14002d764(piVar5[1], arg3),  iVar10 != 0)) {\n                    piVar1 = piVar5[1];\n                    if (piVar1 == NULL) {\n                        iVar7 = *piVar5;\n                    }\n                    else {\n                        iVar7 = piVar1[9];\n                    }\n                    if (iVar7 == 0) {\n                        if (piVar1 == NULL) {\n                            fcn.140020780();\n                            pcVar2 = swi(3);\n                            piVar5 = (*pcVar2)();\n                            return piVar5;\n                        }\n                        uVar4 = (**(*piVar1 + 0xf0))(piVar1);\n                        if ((uVar4 >> 0x1b & 1) == 0) {\n                            return piVar5;\n                        }\n                    }\n                    else {\n                        iVar10 = (*_sym.imp.USER32.dll_IsWindowEnabled)();\n                        if (iVar10 != 0) {\n                            return piVar5;\n                        }\n                    }\n                }\n                piVar1 = piVar5 - arg2;\n            }\n        }\n    }\n    return NULL;\n}\n",
        "token_count": 1100
    },
    "140038e4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140038e44(int64_t arg1, uint64_t arg2, ulong arg3)\n\n{\n    code *pcVar1;\n    uint8_t uVar2;\n    uint64_t uVar3;\n    \n    if (arg3 != 0) {\n        if ((~*(arg1 + 0x20) & 1) == 0) {\n            fcn.1400384a8(2, *(arg1 + 0x18));\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        uVar3 = *(arg1 + 0x38) + 1;\n        if (*(arg1 + 0x40) <= uVar3 && uVar3 != *(arg1 + 0x40)) {\n            fcn.140038770(arg1);\n        }\n        **(arg1 + 0x38) = 0xff;\n        *(arg1 + 0x38) = *(arg1 + 0x38) + 1;\n        if ((~*(arg1 + 0x20) & 1) == 0) {\n            fcn.1400384a8(2, *(arg1 + 0x18));\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        uVar3 = *(arg1 + 0x38) + 2;\n        if (*(arg1 + 0x40) <= uVar3 && uVar3 != *(arg1 + 0x40)) {\n            fcn.140038770(arg1);\n        }\n        **(arg1 + 0x38) = 0xfffe;\n        *(arg1 + 0x38) = *(arg1 + 0x38) + 2;\n    }\n    uVar2 = ~*(arg1 + 0x20);\n    if (arg2 < 0xff) {\n        if ((uVar2 & 1) == 0) {\n            fcn.1400384a8(2, *(arg1 + 0x18));\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        uVar3 = *(arg1 + 0x38) + 1;\n        if (*(arg1 + 0x40) <= uVar3 && uVar3 != *(arg1 + 0x40)) {\n            fcn.140038770(arg1);\n        }\n        **(arg1 + 0x38) = arg2;\n        *(arg1 + 0x38) = *(arg1 + 0x38) + 1;\n    }\n    else if (arg2 < 0xfffe) {\n        if ((uVar2 & 1) == 0) {\n            fcn.1400384a8(2, *(arg1 + 0x18));\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        uVar3 = *(arg1 + 0x38) + 1;\n        if (*(arg1 + 0x40) <= uVar3 && uVar3 != *(arg1 + 0x40)) {\n            fcn.140038770(arg1);\n        }\n        **(arg1 + 0x38) = 0xff;\n        *(arg1 + 0x38) = *(arg1 + 0x38) + 1;\n        if ((~*(arg1 + 0x20) & 1) == 0) {\n            fcn.1400384a8(2, *(arg1 + 0x18));\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        uVar3 = *(arg1 + 0x38) + 2;\n        if (*(arg1 + 0x40) <= uVar3 && uVar3 != *(arg1 + 0x40)) {\n            fcn.140038770(arg1);\n        }\n        **(arg1 + 0x38) = arg2;\n        *(arg1 + 0x38) = *(arg1 + 0x38) + 2;\n    }\n    else if (arg2 < 0xffffffff) {\n        if ((uVar2 & 1) == 0) {\n            fcn.1400384a8(2, *(arg1 + 0x18));\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        uVar3 = *(arg1 + 0x38) + 1;\n        if (*(arg1 + 0x40) <= uVar3 && uVar3 != *(arg1 + 0x40)) {\n            fcn.140038770(arg1);\n        }\n        **(arg1 + 0x38) = 0xff;\n        *(arg1 + 0x38) = *(arg1 + 0x38) + 1;\n        if ((~*(arg1 + 0x20) & 1) == 0) {\n            fcn.1400384a8(2, *(arg1 + 0x18));\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        uVar3 = *(arg1 + 0x38) + 2;\n        if (*(arg1 + 0x40) <= uVar3 && uVar3 != *(arg1 + 0x40)) {\n            fcn.140038770(arg1);\n        }\n        **(arg1 + 0x38) = 0xffff;\n        *(arg1 + 0x38) = *(arg1 + 0x38) + 2;\n        if ((~*(arg1 + 0x20) & 1) == 0) {\n            fcn.1400384a8(2, *(arg1 + 0x18));\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        uVar3 = *(arg1 + 0x38) + 4;\n        if (*(arg1 + 0x40) <= uVar3 && uVar3 != *(arg1 + 0x40)) {\n            fcn.140038770(arg1);\n        }\n        **(arg1 + 0x38) = arg2;\n        *(arg1 + 0x38) = *(arg1 + 0x38) + 4;\n    }\n    else {\n        if ((uVar2 & 1) == 0) {\n            fcn.1400384a8(2, *(arg1 + 0x18));\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        uVar3 = *(arg1 + 0x38) + 1;\n        if (*(arg1 + 0x40) <= uVar3 && uVar3 != *(arg1 + 0x40)) {\n            fcn.140038770(arg1);\n        }\n        **(arg1 + 0x38) = 0xff;\n        *(arg1 + 0x38) = *(arg1 + 0x38) + 1;\n        if ((~*(arg1 + 0x20) & 1) == 0) {\n            fcn.1400384a8(2, *(arg1 + 0x18));\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        uVar3 = *(arg1 + 0x38) + 2;\n        if (*(arg1 + 0x40) <= uVar3 && uVar3 != *(arg1 + 0x40)) {\n            fcn.140038770(arg1);\n        }\n        **(arg1 + 0x38) = 0xffff;\n        *(arg1 + 0x38) = *(arg1 + 0x38) + 2;\n        if ((~*(arg1 + 0x20) & 1) == 0) {\n            fcn.1400384a8(2, *(arg1 + 0x18));\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        uVar3 = *(arg1 + 0x38) + 4;\n        if (*(arg1 + 0x40) <= uVar3 && uVar3 != *(arg1 + 0x40)) {\n            fcn.140038770(arg1);\n        }\n        **(arg1 + 0x38) = 0xffffffff;\n        *(arg1 + 0x38) = *(arg1 + 0x38) + 4;\n        if ((~*(arg1 + 0x20) & 1) == 0) {\n            fcn.1400384a8(2, *(arg1 + 0x18));\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        uVar3 = *(arg1 + 0x38) + 8;\n        if (*(arg1 + 0x40) <= uVar3 && uVar3 != *(arg1 + 0x40)) {\n            fcn.140038770(arg1);\n        }\n        **(arg1 + 0x38) = arg2;\n        *(arg1 + 0x38) = *(arg1 + 0x38) + 8;\n    }\n    return;\n}\n",
        "token_count": 2065
    },
    "14003914": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong * fcn.140039148(int64_t arg1)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    ulong *puVar3;\n    int64_t iVar4;\n    \n    if (arg1 == 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        puVar3 = (*pcVar1)();\n        return puVar3;\n    }\n    iVar4 = fcn.140017ad4();\n    fcn.1400240f0(0);\n    puVar3 = *(iVar4 + 0x30);\n    while( true ) {\n        if (puVar3 == NULL) {\n            fcn.140024184(0);\n            return NULL;\n        }\n        iVar2 = (*_sym.imp.KERNEL32.dll_lstrcmpA)(arg1, *puVar3);\n        if (iVar2 == 0) break;\n        puVar3 = puVar3[4];\n    }\n    fcn.140024184(0);\n    return puVar3;\n}\n",
        "token_count": 226
    },
    "1400397d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400397d8(int64_t arg1)\n\n{\n    code *pcVar1;\n    int64_t arg1_00;\n    \n    if (arg1 == 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    arg1_00 = fcn.140039148(arg1);\n    if (arg1_00 != 0) {\n        fcn.140020ac8(arg1_00);\n    }\n    return;\n}\n",
        "token_count": 119
    },
    "140039d2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** fcn.140039d2c(code **arg1, ulong arg2)\n\n{\n    fcn.1400288d8(arg1);\n    arg1[4] = arg2;\n    arg1[5] = NULL;\n    arg1[6] = NULL;\n    arg1[7] = NULL;\n    arg1[8] = NULL;\n    *arg1 = vtable.CMemFile.0;\n    *(arg1 + 9) = 1;\n    return arg1;\n}\n",
        "token_count": 110
    },
    "14003a34": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14003a348(int64_t arg1, ulong arg2, ulong arg3)\n\n{\n    ulong uVar1;\n    uint64_t uVar2;\n    \n    uVar2 = arg2;\n    if (arg2 == 0) {\n        uVar2 = 0x11;\n    }\n    if (*(arg1 + 8) != 0) {\n        fcn.1400036d8(*(arg1 + 8));\n        *(arg1 + 8) = 0;\n    }\n    if (arg3 != 0) {\n        uVar1 = SUB168(ZEXT816(8) * ZEXT816(uVar2), 0);\n        if (SUB168(ZEXT816(8) * ZEXT816(uVar2) >> 0x40, 0) != 0) {\n            uVar1 = 0xffffffffffffffff;\n        }\n        uVar1 = fcn.140003694(uVar1);\n        *(arg1 + 8) = uVar1;\n        fcn.1400698a0(uVar1, 0, uVar2 << 3);\n    }\n    *(arg1 + 0x10) = uVar2;\n    return;\n}\n",
        "token_count": 264
    },
    "14003a3c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14003a3c8(int64_t arg1)\n\n{\n    if (*(arg1 + 8) != 0) {\n        fcn.1400036d8(*(arg1 + 8));\n        *(arg1 + 8) = 0;\n    }\n    *(arg1 + 0x18) = 0;\n    *(arg1 + 0x20) = 0;\n    fcn.14002aadc(*(arg1 + 0x28));\n    *(arg1 + 0x28) = 0;\n    return;\n}\n",
        "token_count": 125
    },
    "14003a45": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14003a45c(int64_t arg1, uint64_t arg2)\n\n{\n    code *pcVar1;\n    ulong uVar2;\n    ulong *puVar3;\n    \n    if (arg1 == 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        uVar2 = (*pcVar1)();\n        return uVar2;\n    }\n    if (*(arg1 + 8) != 0) {\n        for (puVar3 = *(*(arg1 + 8) + ((arg2 >> 4 & 0xffffffff) % *(arg1 + 0x10)) * 8); puVar3 != NULL; puVar3 = *puVar3\n            ) {\n            if (puVar3[1] == arg2) {\n                return puVar3[2];\n            }\n        }\n    }\n    return 0;\n}\n",
        "token_count": 197
    },
    "14003a4a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.14003a4a4(ulong arg1, ulong arg2, ulong *arg3)\n\n{\n    int64_t iVar1;\n    uchar auStackX32 [8];\n    uchar auStack24 [24];\n    \n    iVar1 = fcn.14003a424(arg1, arg2, auStack24, auStackX32);\n    if (iVar1 != 0) {\n        *arg3 = *(iVar1 + 0x10);\n        iVar1 = 1;\n    }\n    return iVar1;\n}\n",
        "token_count": 118
    },
    "14003a4d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14003a4d0(int64_t arg1, uint64_t arg2)\n\n{\n    int64_t *piVar1;\n    ulong *puVar2;\n    ulong *puVar3;\n    ulong *puVar4;\n    \n    if (*(arg1 + 8) != 0) {\n        puVar4 = *(arg1 + 8) + ((arg2 >> 4 & 0xffffffff) % *(arg1 + 0x10)) * 8;\n        puVar2 = *puVar4;\n        while (puVar3 = puVar2,  puVar3 != NULL) {\n            if (puVar3[1] == arg2) {\n                *puVar4 = *puVar3;\n                *puVar3 = *(arg1 + 0x20);\n                piVar1 = arg1 + 0x18;\n                *piVar1 = *piVar1 + -1;\n                *(arg1 + 0x20) = puVar3;\n                if (*piVar1 == 0) {\n                    fcn.14003a3c8(arg1);\n                }\n                return 1;\n            }\n            puVar4 = puVar3;\n            puVar2 = *puVar3;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 280
    },
    "14003a53": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14003a538(int64_t arg1, int64_t **arg2, int64_t *arg3, int64_t *arg4)\n\n{\n    code *pcVar1;\n    int64_t **ppiVar2;\n    int64_t *piVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    int64_t *piVar6;\n    \n    piVar6 = *arg2;\n    if (piVar6 != NULL) {\n        if ((piVar6 == 0xffffffffffffffff) && (uVar5 = 0,  *(arg1 + 0x10) != 0)) {\n            ppiVar2 = *(arg1 + 8);\n            while (piVar6 = *ppiVar2,  piVar6 == NULL) {\n                uVar5 = uVar5 + 1;\n                ppiVar2 = ppiVar2 + 1;\n                if (*(arg1 + 0x10) <= uVar5) {\n                    fcn.140020780();\n                    pcVar1 = swi(3);\n                    (*pcVar1)();\n                    return;\n                }\n            }\n        }\n        piVar3 = *piVar6;\n        if (piVar3 == NULL) {\n            uVar5 = *(arg1 + 0x10);\n            uVar4 = (piVar6[1] >> 4 & 0xffffffff) % uVar5 + 1;\n            if (uVar4 < uVar5) {\n                ppiVar2 = *(arg1 + 8) + uVar4 * 8;\n                do {\n                    piVar3 = *ppiVar2;\n                    if (piVar3 != NULL) break;\n                    uVar4 = uVar4 + 1;\n                    ppiVar2 = ppiVar2 + 1;\n                } while (uVar4 < uVar5);\n            }\n        }\n        *arg2 = piVar3;\n        *arg3 = piVar6[1];\n        *arg4 = piVar6[2];\n    }\n    return;\n}\n",
        "token_count": 450
    },
    "14003a75": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nulong fcn.14003a750(ulong *arg1)\n\n{\n    int32_t iVar1;\n    ulong in_RDX;\n    ulong auStackX8 [4];\n    \n    auStackX8[0] = 0;\n    iVar1 = (***arg1)(arg1, in_RDX, auStackX8);\n    if (iVar1 != 0) {\n        auStackX8[0] = 0;\n    }\n    return auStackX8[0];\n}\n",
        "token_count": 106
    },
    "14003a77": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14003a77c(int64_t **arg1)\n\n{\n    ulong uVar1;\n    \n    if (*arg1 == NULL) {\n        uVar1 = 0;\n    }\n    else {\n        uVar1 = (**(**arg1 + 0x10))();\n        *arg1 = NULL;\n    }\n    return uVar1;\n}\n",
        "token_count": 79
    },
    "14003a7a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14003a7a4(ulong arg1)\n\n{\n    int64_t iVar1;\n    code *pcVar2;\n    uchar auStack72 [32];\n    ulong uStack40;\n    ushort uStack32;\n    char cStack30;\n    uint64_t uStack24;\n    \n    uStack24 = *0x1400d96f0 ^ auStack72;\n    uStack40 = str.mfcm90.dll._0_8_;\n    uStack32 = str.mfcm90.dll._8_2_;\n    cStack30 = str.mfcm90.dll[10];\n    iVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(&uStack40);\n    if (iVar1 != 0) {\n        pcVar2 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar1, \"AfxmReleaseManagedReferences\");\n        if (pcVar2 != NULL) {\n            (*pcVar2)(arg1);\n        }\n    }\n    fcn.140069870(uStack24 ^ auStack72);\n    return;\n}\n",
        "token_count": 232
    },
    "14003aab": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t fcn.14003aabc(ulong arg1, ulong arg2, int64_t *arg3)\n\n{\n    uint32_t uVar1;\n    int64_t iVar2;\n    \n    iVar2 = fcn.14003a81c(arg1, arg2);\n    *arg3 = iVar2;\n    if (iVar2 == 0) {\n        iVar2 = fcn.14003a8f0(arg1, arg2);\n        *arg3 = iVar2;\n        uVar1 = ~-(iVar2 != 0) & 0x80004002;\n    }\n    else {\n        fcn.14003aa08(arg1);\n        uVar1 = 0;\n    }\n    return uVar1;\n}\n",
        "token_count": 161
    },
    "14003ac3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14003ac38(uint64_t nAtom)\n\n{\n    int32_t iVar1;\n    uchar auStack312 [32];\n    uchar auStack280 [256];\n    uint64_t uStack24;\n    \n    uStack24 = *0x1400d96f0 ^ auStack312;\n    iVar1 = (*_sym.imp.KERNEL32.dll_GetAtomNameA)(nAtom, auStack280, 0x100);\n    if ((((iVar1 == 0) && (iVar1 = (*_sym.imp.KERNEL32.dll_GetLastError)(),  iVar1 != 0x7a)) && (iVar1 != 0xea)) &&\n       (iVar1 = (*_sym.imp.KERNEL32.dll_GlobalGetAtomNameA)(nAtom & 0xffff, auStack280, 0x100),  iVar1 == 0)) {\n        (*_sym.imp.KERNEL32.dll_GetLastError)();\n    }\n    fcn.140069870(uStack24 ^ auStack312);\n    return;\n}\n",
        "token_count": 218
    },
    "14003ad6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14003ad68(int64_t arg1, ulong *arg2)\n\n{\n    int64_t *piVar1;\n    code *pcVar2;\n    \n    if (arg2 == NULL) {\n        fcn.140020780();\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    *arg2 = *(arg1 + 0x20);\n    piVar1 = arg1 + 0x18;\n    *piVar1 = *piVar1 + -1;\n    *(arg1 + 0x20) = arg2;\n    if (*piVar1 == 0) {\n        fcn.14003ad34(arg1);\n    }\n    return;\n}\n",
        "token_count": 159
    },
    "14003ad9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.14003ad94(int64_t arg1)\n\n{\n    int64_t *arg2;\n    int64_t iVar1;\n    code *pcVar2;\n    int64_t iVar3;\n    \n    if (arg1 == 0) {\n        fcn.140020780();\n        pcVar2 = swi(3);\n        iVar3 = (*pcVar2)();\n        return iVar3;\n    }\n    arg2 = *(arg1 + 8);\n    if (arg2 == NULL) {\n        fcn.140020780();\n        pcVar2 = swi(3);\n        iVar3 = (*pcVar2)();\n        return iVar3;\n    }\n    iVar3 = *arg2;\n    iVar1 = arg2[2];\n    *(arg1 + 8) = iVar3;\n    if (iVar3 == 0) {\n        *(arg1 + 0x10) = 0;\n    }\n    else {\n        *(iVar3 + 8) = 0;\n    }\n    fcn.14003ad68(arg1, arg2);\n    return iVar1;\n}\n",
        "token_count": 238
    },
    "14003ae1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14003ae14(int64_t arg1, int64_t *arg2)\n\n{\n    int64_t *piVar1;\n    code *pcVar2;\n    \n    if (arg2 == NULL) {\n        fcn.140020780();\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    if (arg2 == *(arg1 + 8)) {\n        *(arg1 + 8) = *arg2;\n    }\n    else {\n        *arg2[1] = *arg2;\n    }\n    if (arg2 == *(arg1 + 0x10)) {\n        *(arg1 + 0x10) = arg2[1];\n    }\n    else {\n        *(*arg2 + 8) = arg2[1];\n    }\n    if (arg2 == NULL) {\n        fcn.140020780();\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    *arg2 = *(arg1 + 0x20);\n    piVar1 = arg1 + 0x18;\n    *piVar1 = *piVar1 + -1;\n    *(arg1 + 0x20) = arg2;\n    if (*piVar1 == 0) {\n        fcn.14003ad34(arg1);\n    }\n    return;\n}\n",
        "token_count": 298
    },
    "14003af6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14003af64(int64_t arg1, ulong arg2)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.14003aee0(arg1, 0, *(arg1 + 8));\n    *(iVar1 + 0x10) = arg2;\n    if (*(arg1 + 8) == 0) {\n        *(arg1 + 0x10) = iVar1;\n    }\n    else {\n        *(*(arg1 + 8) + 8) = iVar1;\n    }\n    *(arg1 + 8) = iVar1;\n    return;\n}\n",
        "token_count": 135
    },
    "14003afa": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14003afa8(int64_t arg1, ulong arg2)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.14003aee0(arg1, *(arg1 + 0x10), 0);\n    *(iVar1 + 0x10) = arg2;\n    if (*(arg1 + 0x10) == NULL) {\n        *(arg1 + 8) = iVar1;\n    }\n    else {\n        **(arg1 + 0x10) = iVar1;\n    }\n    *(arg1 + 0x10) = iVar1;\n    return;\n}\n",
        "token_count": 136
    },
    "14003b08": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14003b084(int64_t arg1, int64_t arg2, ulong arg3)\n\n{\n    int64_t iVar1;\n    \n    if (arg2 == 0) {\n        fcn.14003af64(arg1, arg3);\n    }\n    else {\n        iVar1 = fcn.14003aee0(arg1, *(arg2 + 8), arg2);\n        *(iVar1 + 0x10) = arg3;\n        if (*(arg2 + 8) == NULL) {\n            *(arg1 + 8) = iVar1;\n        }\n        else {\n            **(arg2 + 8) = iVar1;\n        }\n        *(arg2 + 8) = iVar1;\n    }\n    return;\n}\n",
        "token_count": 165
    },
    "14003b2f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14003b2f8(ulong arg1)\n\n{\n    code *pcVar1;\n    \n    if (-1 < arg1) {\n        return;\n    }\n    if (arg1 == -0x7ff8fff2) {\n        fcn.140020738();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    fcn.14001e6c4(arg1);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 117
    },
    "14003b79": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14003b794(int16_t *arg1, ulong noname_1, int16_t *arg3)\n\n{\n    uint32_t uVar1;\n    \n    if (arg3 == NULL) {\n        arg3 = arg1;\n    }\n    if ((arg3 != arg1) || (noname_1 != *arg1)) {\n        uVar1 = (*_sym.imp.OLEAUT32.dll_VariantTimeToDosDateTime)(arg1, arg3, 0, noname_1);\n        fcn.14003b2f8(uVar1);\n    }\n    return;\n}\n",
        "token_count": 133
    },
    "14003b9d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.14003b9d0(int64_t arg1, int64_t arg2)\n\n{\n    uint32_t uVar1;\n    \n    if (arg1 != arg2) {\n        uVar1 = (*_sym.imp.OLEAUT32.dll_VariantCopyInd)();\n        fcn.14003b2f8(uVar1);\n    }\n    return arg1;\n}\n",
        "token_count": 86
    },
    "14003ba1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.14003ba18(int64_t arg1, int64_t arg2)\n\n{\n    uint32_t uVar1;\n    \n    if (arg1 != arg2) {\n        uVar1 = (*_sym.imp.OLEAUT32.dll_VariantCopyInd)();\n        fcn.14003b2f8(uVar1);\n    }\n    return arg1;\n}\n",
        "token_count": 84
    },
    "14003bb3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14003bb38(ulong arg1, uint16_t *arg2)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    ulong uVar3;\n    \n    if ((*arg2 & 0x2000) == 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        uVar3 = (*pcVar1)();\n        return uVar3;\n    }\n    uVar2 = (*_sym.imp.OLEAUT32.dll_VariantCopyInd)();\n    fcn.14003b2f8(uVar2);\n    return arg1;\n}\n",
        "token_count": 136
    },
    "14003bb6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14003bb68(ulong arg1, uint16_t *arg2)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    ulong uVar3;\n    \n    if ((*arg2 & 0x2000) == 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        uVar3 = (*pcVar1)();\n        return uVar3;\n    }\n    uVar2 = (*_sym.imp.OLEAUT32.dll_VariantCopyInd)();\n    fcn.14003b2f8(uVar2);\n    return arg1;\n}\n",
        "token_count": 136
    },
    "14003bb9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14003bb98(ulong arg1, uint16_t *arg2)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    ulong uVar3;\n    \n    if ((*arg2 & 0x2000) == 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        uVar3 = (*pcVar1)();\n        return uVar3;\n    }\n    uVar2 = (*_sym.imp.OLEAUT32.dll_VariantCopyInd)();\n    fcn.14003b2f8(uVar2);\n    return arg1;\n}\n",
        "token_count": 136
    },
    "14003bbc": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14003bbc8(ulong arg1, uint16_t *arg2)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    ulong uVar3;\n    \n    if ((*arg2 & 0x2000) == 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        uVar3 = (*pcVar1)();\n        return uVar3;\n    }\n    uVar2 = (*_sym.imp.OLEAUT32.dll_VariantCopyInd)();\n    fcn.14003b2f8(uVar2);\n    return arg1;\n}\n",
        "token_count": 136
    },
    "14003c1e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14003c1e4(ulong arg1, ulong arg2, uint64_t arg3)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    ulong uStackX32;\n    \n    uVar2 = (*_sym.imp.OLEAUT32.dll_SafeArrayUnaccessData)(arg1, &uStackX32);\n    fcn.14003b2f8(uVar2);\n    iVar3 = fcn.140069a48(uStackX32, arg3 & 0xffffffff, arg2, arg3 & 0xffffffff);\n    if (iVar3 != 0) {\n        if (iVar3 == 0xc) {\n            fcn.140020738();\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        if ((iVar3 == 0x16) || (iVar3 == 0x22)) {\n            fcn.140020780();\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        if (iVar3 != 0x50) {\n            fcn.140020780();\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n    }\n    uVar2 = (*_sym.imp.OLEAUT32.dll_SafeArrayGetElement)();\n    fcn.14003b2f8(uVar2);\n    return;\n}\n",
        "token_count": 316
    },
    "14003c26": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14003c26c(ulong arg1, ulong arg2)\n\n{\n    uint32_t uVar1;\n    \n    fcn.1400698a0(arg1, 0, 0x18);\n    uVar1 = (*_sym.imp.OLEAUT32.dll_VariantCopyInd)(arg1, arg2);\n    fcn.14003b2f8(uVar1);\n    return arg1;\n}\n",
        "token_count": 94
    },
    "14003c2a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14003c2a8(ulong arg1, ulong arg2)\n\n{\n    uint32_t uVar1;\n    \n    fcn.1400698a0(arg1, 0, 0x18);\n    uVar1 = (*_sym.imp.OLEAUT32.dll_VariantCopyInd)(arg1, arg2);\n    fcn.14003b2f8(uVar1);\n    return arg1;\n}\n",
        "token_count": 95
    },
    "14003c2e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14003c2e4(ulong arg1, ulong arg2)\n\n{\n    uint32_t uVar1;\n    \n    fcn.1400698a0(arg1, 0, 0x18);\n    uVar1 = (*_sym.imp.OLEAUT32.dll_VariantCopyInd)(arg1, arg2);\n    fcn.14003b2f8(uVar1);\n    return arg1;\n}\n",
        "token_count": 95
    },
    "14003ef5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14003ef5c(code **arg1, ulong arg2)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    code *pcVar3;\n    ulong in_R8;\n    \n    *arg1 = \n    vtable.ATL::CFixedStringT_class_ATL::CStringT_wchar_t__class_StrTraitMFC_wchar_t__class_ATL::ChTraitsCRT_wchar_t_____256_.0\n    ;\n    fcn.140018474(arg1 + 3, arg2, in_R8);\n    pcVar3 = arg1[3];\n    LOCK();\n    piVar1 = pcVar3 + -8;\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 + -1 < 1) {\n        (**(**(pcVar3 + -0x18) + 8))();\n    }\n    *arg1 = vtable.ATL::CFixedStringMgr.0;\n    return;\n}\n",
        "token_count": 226
    },
    "14003efb": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14003efb0(code **arg1, ulong arg2)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    code *pcVar3;\n    ulong in_R8;\n    \n    *arg1 = \n    vtable.ATL::CFixedStringT_class_ATL::CStringT_char__class_StrTraitMFC_char__class_ATL::ChTraitsCRT_char_____64_.0;\n    fcn.140004828(arg1 + 3, arg2, in_R8);\n    pcVar3 = arg1[3];\n    LOCK();\n    piVar1 = pcVar3 + -8;\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 + -1 < 1) {\n        (**(**(pcVar3 + -0x18) + 8))();\n    }\n    *arg1 = vtable.ATL::CFixedStringMgr.0;\n    return;\n}\n",
        "token_count": 218
    },
    "14004063": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140040634(int64_t *arg1, int32_t *arg2, ulong arg3)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint uVar4;\n    int64_t iVar5;\n    int32_t iVar6;\n    uchar auStack120 [32];\n    int32_t iStack88;\n    int32_t iStack84;\n    uchar uStack80;\n    uchar uStack79;\n    ulong uStack64;\n    uint64_t uStack56;\n    \n    uStack56 = *0x1400d96f0 ^ auStack120;\n    for (iVar2 = (**(*arg1 + 0x230))(); iVar2 != 0; iVar2 = iVar2 + -1) {\n        (**(*arg1 + 0x230))(arg1, 0x416, 0, 0);\n    }\n    fcn.1400698a0(&iStack88, 0, 0x20);\n    uStack64 = 0xffffffffffffffff;\n    iVar2 = 0;\n    if (arg2 == NULL) {\n        uStack80 = 4;\n        if (0 < arg3) {\n            do {\n                iVar5 = (**(*arg1 + 0x230))(arg1, 0x414, 1, &iStack88);\n                if (iVar5 == 0) goto code_r0x00014004079a;\n                iVar2 = iVar2 + 1;\n            } while (iVar2 < arg3);\n        }\n    }\n    else {\n        iVar6 = 0;\n        if (0 < arg3) {\n            do {\n                iStack84 = *arg2;\n                arg2 = arg2 + 1;\n                uStack80 = 4;\n                if (iStack84 == 0) {\n                    uStack79 = 1;\n                    uVar3 = fcn.140015284(arg1);\n                    iVar1 = iVar2;\n                    if (((uVar3 >> 0xb & 1) == 0) && (*0x1400d8a34 != 0x40047)) {\n                        iStack88 = 8;\n                    }\n                    else {\n                        iStack88 = 6;\n                    }\n                }\n                else {\n                    uStack79 = 0;\n                    iVar1 = iVar2 + 1;\n                    iStack88 = iVar2;\n                }\n                iVar2 = iVar1;\n                iVar5 = (**(*arg1 + 0x230))(arg1, 0x414, 1, &iStack88);\n                if (iVar5 == 0) goto code_r0x00014004079a;\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < arg3);\n        }\n    }\n    uVar4 = (**(*arg1 + 0x230))(arg1, 0x418, 0, 0);\n    *(arg1 + 0x24) = 1;\n    *(arg1 + 0xcc) = uVar4;\ncode_r0x00014004079a:\n    fcn.140069870(uStack56 ^ auStack120);\n    return;\n}\n",
        "token_count": 689
    },
    "1400407f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400407fc(int64_t *arg1, ulong arg2)\n\n{\n    uchar auStack88 [32];\n    uchar auStack56 [32];\n    uint64_t uStack24;\n    \n    uStack24 = *0x1400d96f0 ^ auStack88;\n    (**(*arg1 + 0x230))(arg1, 0x417, arg2, auStack56);\n    fcn.140069870(uStack24 ^ auStack88);\n    return;\n}\n",
        "token_count": 110
    },
    "14004120": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140041200(int64_t arg1, ulong arg2)\n\n{\n    ulong hModule;\n    int32_t iVar1;\n    int64_t iVar2;\n    ulong hgdiobj;\n    \n    iVar2 = fcn.140017ad4();\n    hModule = *(iVar2 + 0x18);\n    iVar2 = (*_sym.imp.KERNEL32.dll_FindResourceA)(hModule, arg2);\n    if (iVar2 != 0) {\n        hgdiobj = fcn.140040ca8(hModule, iVar2, 0);\n        iVar1 = fcn.14004055c(arg1, hgdiobj);\n        if (iVar1 != 0) {\n            *(arg1 + 0x110) = hModule;\n            *(arg1 + 0x108) = iVar2;\n            return 1;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 194
    },
    "14004167": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.140041678(ulong arg1, ulong arg2, uint64_t arg3, uint64_t arg4)\n\n{\n    uint64_t uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    uint64_t *puVar6;\n    int32_t iVar7;\n    uint32_t uVar8;\n    uint64_t uVar9;\n    uint64_t arg4_00;\n    bool bVar10;\n    int32_t in_stack_00000028;\n    ulong uStack56;\n    ulong uStack48;\n    uchar auStack40 [16];\n    \n    uVar8 = 0;\n    uVar9 = arg4 & 0xffffffff;\n    arg4_00 = arg3 & 0xffffffff;\n    iVar5 = uVar9;\n    if (in_stack_00000028 == 0) {\n        iVar2 = fcn.1400408e8(arg1, arg2, arg3, arg4);\n        iVar3 = fcn.1400408e8(arg1, arg2, arg4_00, 0);\n        if ((iVar3 != iVar2) && (0 < iVar5)) {\n            do {\n                uVar4 = (uVar8 + uVar9) / 2;\n                iVar5 = fcn.1400408e8(arg1, arg2, arg4_00, uVar4);\n                if (iVar5 == iVar2) {\n                    uVar9 = uVar4;\n                }\n                else {\n                    bVar10 = uVar8 == uVar4;\n                    uVar8 = uVar4;\n                    if (bVar10) {\n                        fcn.1400408e8(arg1, arg2, arg4_00, uVar9);\n                        break;\n                    }\n                }\n            } while (uVar8 < uVar9);\n        }\n        fcn.14004152c(arg1, &uStack48, arg2, arg4_00);\n        uVar9 = uStack48 & 0xffffffff;\n    }\n    else {\n        fcn.1400408e8(arg1, arg2, arg3, 0);\n        puVar6 = fcn.14004152c(arg1, &uStack48, arg2, arg4_00);\n        uVar9 = *puVar6;\n        fcn.1400408e8(arg1, arg2, arg4_00, 0x7fff);\n        puVar6 = fcn.14004152c(arg1, &uStack48, arg2, arg4_00);\n        uStack56 = uVar9;\n        do {\n            uVar1 = *puVar6;\n            uStack48 = uVar1;\n            while( true ) {\n                iVar2 = uVar9;\n                iVar3 = uVar1;\n                if (iVar3 <= iVar2) {\n                    return;\n                }\n                fcn.1400408e8(arg1, arg2, arg4_00, (iVar3 + iVar2) / 2);\n                puVar6 = fcn.14004152c(arg1, auStack40, arg2, arg4_00);\n                iVar7 = *puVar6 >> 0x20;\n                if (iVar7 <= iVar5) break;\n                if ((iVar2 == *puVar6) && (uStack56._4_4_ == iVar7)) {\n                    uVar9 = uVar1 & 0xffffffff;\n                    goto code_r0x0001400417e5;\n                }\n                uVar9 = *puVar6;\n                uStack56 = uVar9;\n            }\n            if (iVar5 <= iVar7) {\n                return;\n            }\n        } while ((iVar3 != *puVar6) || (uStack48._4_4_ != iVar7));\n        uVar9 = uVar9 & 0xffffffff;\n    }\ncode_r0x0001400417e5:\n    fcn.1400408e8(arg1, arg2, arg4_00, uVar9);\n    return;\n}\n",
        "token_count": 901
    },
    "140042e0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140042e00(int64_t arg1, int64_t arg2, ulong crColor)\n\n{\n    code *pcVar1;\n    \n    if (arg1 == 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    if (*(arg1 + 8) == 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    if (arg2 == 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    (*_sym.imp.GDI32.dll_SetBkColor)(*(arg1 + 8), crColor);\n    (*_sym.imp.GDI32.dll_ExtTextOutA)(*(arg1 + 8), 0, 0, 2, arg2, 0, 0, 0);\n    return;\n}\n",
        "token_count": 226
    },
    "14004332": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140043328(ulong arg1, ulong arg2, int64_t arg3)\n\n{\n    uint uVar1;\n    ulong uVar2;\n    uchar auStack152 [32];\n    uint uStack120;\n    int32_t iStack116;\n    uint uStack112;\n    int32_t iStack108;\n    int32_t aiStack104 [16];\n    uint64_t uStack40;\n    \n    uStack40 = *0x1400d96f0 ^ auStack152;\n    if (arg3 == 0) {\n        uVar2 = (*_sym.imp.USER32.dll_GetDC)(0);\n    }\n    else {\n        uVar2 = *(arg3 + 0x10);\n    }\n    fcn.14006b210(aiStack104, arg2, 0x3c);\n    uVar1 = (*_sym.imp.GDI32.dll_GetDeviceCaps)(uVar2, 0x5a);\n    iStack108 = (*_sym.imp.KERNEL32.dll_MulDiv)(uVar1, aiStack104[0], 0x2d0);\n    uStack112 = 0;\n    (*_sym.imp.GDI32.dll_DPtoLP)(uVar2, &uStack112, 1);\n    uStack120 = 0;\n    iStack116 = 0;\n    (*_sym.imp.GDI32.dll_DPtoLP)(uVar2, &uStack120, 1);\n    aiStack104[0] = fcn.14006bd00(iStack108 - iStack116);\n    aiStack104[0] = -aiStack104[0];\n    if (arg3 == 0) {\n        (*_sym.imp.USER32.dll_ReleaseDC)(0, uVar2);\n    }\n    uVar2 = (*_sym.imp.GDI32.dll_CreateFontIndirectA)(aiStack104);\n    fcn.14001c094(arg1, uVar2);\n    fcn.140069870(uStack40 ^ auStack152);\n    return;\n}\n",
        "token_count": 438
    },
    "1400438c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.1400438cc(int64_t arg1)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    uint uVar3;\n    int64_t iVar4;\n    \n    if (arg1 == 0) {\n        iVar4 = 0;\n    }\n    else {\n        uVar2 = (*_sym.imp.OLEAUT32.dll_VariantInit)();\n        uVar3 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(0, 0, arg1, uVar2, 0, 0, 0, 0);\n        iVar4 = (*_sym.imp.OLEAUT32.dll_DllRegisterServer)(0, uVar3);\n        if (iVar4 == 0) {\n            fcn.140020738();\n            pcVar1 = swi(3);\n            iVar4 = (*pcVar1)();\n            return iVar4;\n        }\n        (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(0, 0, arg1, uVar2, iVar4, uVar3, 0, 0);\n    }\n    return iVar4;\n}\n",
        "token_count": 246
    },
    "1400439f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.1400439f4(int64_t arg1)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    \n    if (arg1 == 0) {\n        iVar2 = 0;\n    }\n    else {\n        iVar1 = fcn.14006bd0c(arg1);\n        iVar1 = iVar1 * 2 + 2;\n        iVar2 = (*_sym.imp.ole32.dll_CoTaskMemAlloc)(iVar1);\n        if ((iVar2 != 0) &&\n           (iVar1 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(0, 0, arg1, 0xffffffff, iVar2, iVar1, 0, 0), \n           iVar1 == 0)) {\n            (*_sym.imp.ole32.dll_CoTaskMemFree)(iVar2);\n            iVar2 = 0;\n        }\n    }\n    return iVar2;\n}\n",
        "token_count": 203
    },
    "140043a9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140043a9c(ulong arg1)\n\n{\n    ulong uVar1;\n    \n    uVar1 = fcn.1400439f4(arg1);\n    (*_sym.imp.ole32.dll_CoTaskMemFree)(arg1);\n    return uVar1;\n}\n",
        "token_count": 64
    },
    "1400441b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.1400441b8(int64_t *arg1, ulong hKey, ulong lpSubKey, ulong lpClass)\n\n{\n    int32_t iVar1;\n    uint32_t in_stack_00000030;\n    uint *in_stack_00000040;\n    uint uStack24;\n    \n    iVar1 = (*_sym.imp.ADVAPI32.dll_RegCreateKeyExA)(hKey, lpSubKey, 0);\n    if (in_stack_00000040 != NULL) {\n        *in_stack_00000040 = uStack24;\n    }\n    if (iVar1 == 0) {\n        if (*arg1 != 0) {\n            iVar1 = (*_sym.imp.ADVAPI32.dll_RegCloseKey)();\n            *arg1 = 0;\n        }\n        *arg1 = 0;\n        *(arg1 + 1) = in_stack_00000030 & 0x300;\n    }\n    return iVar1;\n}\n",
        "token_count": 209
    },
    "14004438": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140044388(int64_t *arg1, int64_t arg2, ulong arg3)\n\n{\n    uint32_t uVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint64_t uVar5;\n    \n    uVar1 = *(*arg1 + -0x10);\n    uVar5 = arg2 - *arg1 >> 1;\n    iVar3 = 0;\n    if (arg3 < 0) {\n        fcn.1400031e0(0x80070057);\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    if (arg2 != 0) {\n        iVar3 = fcn.14006bd0c(arg2);\n    }\n    if (iVar3 < arg3) {\n        arg3._0_4_ = iVar3;\n    }\n    if (uVar1 <= 0x7fffffff - arg3) {\n        uVar4 = uVar1 + arg3;\n        if ((1U - *(*arg1 + -8) | *(*arg1 + -0xc) - uVar4) < 0) {\n            fcn.14001892c(arg1, uVar4);\n        }\n        if (uVar5 <= uVar1) {\n            arg2 = *arg1 + uVar5 * 2;\n        }\n        fcn.140069a48(*arg1 + uVar1 * 2, arg3 * 2, arg2, arg3 * 2);\n        if ((-1 < uVar4) && (uVar4 <= *(*arg1 + -0xc))) {\n            *(*arg1 + -0x10) = uVar4;\n            *(*arg1 + uVar4 * 2) = 0;\n            return;\n        }\n        fcn.1400031e0(0x80070057);\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    fcn.1400031e0(0x80070057);\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 474
    },
    "14004448": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t * fcn.14004448c(int64_t *arg1, int64_t *arg2, ulong arg3)\n\n{\n    int64_t iVar1;\n    int64_t arg4;\n    int64_t *piVar2;\n    \n    arg4 = 0;\n    iVar1 = *arg1;\n    if (arg3 < 0) {\n        arg3._0_4_ = 0;\n    }\n    if (arg3 < *(iVar1 + -0x10)) {\n        if (*(iVar1 + -0x18) != NULL) {\n            arg4 = (**(**(iVar1 + -0x18) + 0x20))();\n        }\n        if (arg4 == 0) {\n            piVar2 = fcn.140017fc0();\n            arg4 = (**(*piVar2 + 0x20))(piVar2);\n        }\n        fcn.140018848(arg2, *arg1, arg3, arg4);\n    }\n    else {\n        iVar1 = fcn.1400183f8(iVar1 + -0x18);\n        *arg2 = iVar1 + 0x18;\n    }\n    return arg2;\n}\n",
        "token_count": 260
    },
    "1400461d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint64_t fcn.1400461d4(int64_t arg1, int64_t arg2, ulong arg3, ulong arg4)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint64_t uVar3;\n    ulong uVar4;\n    \n    if (arg1 == 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        uVar3 = (*pcVar1)();\n        return uVar3;\n    }\n    uVar4 = (*_sym.imp.SHLWAPI.dll_PathFindFileNameA)();\n    if (arg2 == 0) {\n        iVar2 = (*_sym.imp.KERNEL32.dll_lstrlenA)(uVar4);\n        uVar3 = iVar2 + 1;\n    }\n    else {\n        iVar2 = fcn.14006bb18(arg2, arg3, uVar4, 0xffffffffffffffff);\n        if (iVar2 != 0) {\n            if (iVar2 == 0xc) {\n                fcn.140020738();\n                pcVar1 = swi(3);\n                uVar3 = (*pcVar1)();\n                return uVar3;\n            }\n            if ((iVar2 == 0x16) || (iVar2 == 0x22)) {\n                fcn.140020780();\n                pcVar1 = swi(3);\n                uVar3 = (*pcVar1)();\n                return uVar3;\n            }\n            if (iVar2 != 0x50) {\n                fcn.140020780();\n                pcVar1 = swi(3);\n                uVar3 = (*pcVar1)();\n                return uVar3;\n            }\n        }\n        uVar3 = 0;\n    }\n    return uVar3;\n}\n",
        "token_count": 381
    },
    "140046a6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140046a6c(uint64_t arg1, ulong arg2)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    uint64_t uVar3;\n    \n    uVar3 = arg1 & 0xffffffff;\n    if (arg1 != 0) {\n        uVar2 = fcn.1400465d4(arg1);\n        fcn.140046a0c(uVar2, uVar3 & 0xffffffff, arg2);\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    return;\n}\n",
        "token_count": 132
    },
    "140046cf": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140046cf8(int64_t arg1, int64_t arg2)\n\n{\n    do {\n        if (arg1 == arg2) {\n            return 1;\n        }\n        arg2 = fcn.1400120a8(arg2);\n    } while (arg2 != 0);\n    return 0;\n}\n",
        "token_count": 73
    },
    "140046f4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140046f4c(int64_t arg1, ulong arg2)\n\n{\n    int64_t arg2_00;\n    \n    arg2_00 = fcn.14003ae80(arg1 + 0xe8, arg2, 0);\n    if (arg2_00 != 0) {\n        fcn.14003ae14(arg1 + 0xe8, arg2_00);\n    }\n    return;\n}\n",
        "token_count": 97
    },
    "14004719": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.140047190(int64_t arg1)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.140010d58(arg1);\n    if (iVar1 == 0) {\n        iVar1 = *(arg1 + 0xf0);\n    }\n    return iVar1;\n}\n",
        "token_count": 70
    },
    "1400471b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.1400471b0(int64_t *arg1)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    \n    iVar1 = (**(*arg1 + 0x2e0))();\n    uVar2 = 0;\n    if (iVar1 == 0) {\n        if ((arg1[0x1f] != 0) && (*(arg1[0x1f] + 0x108) != 0)) {\n            uVar2 = 1;\n        }\n    }\n    else {\n        uVar2 = *(arg1 + 0x21);\n    }\n    return uVar2;\n}\n",
        "token_count": 141
    },
    "14004738": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140047384(int64_t arg1, int64_t arg2, int64_t arg3)\n\n{\n    int64_t iVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    ulong arg1_00;\n    int64_t iVar4;\n    int64_t iVar5;\n    int32_t iVar6;\n    \n    iVar6 = 0;\n    if (arg2 < 0) {\n        fcn.140020780();\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    if (-1 < arg3) {\n        *(arg1 + 0x20) = arg3;\n    }\n    iVar5 = *(arg1 + 8);\n    if (arg2 == 0) {\n        if (iVar5 != 0) {\n            if (0 < *(arg1 + 0x10)) {\n                do {\n                    iVar6 = iVar6 + 1;\n                } while (iVar6 < *(arg1 + 0x10));\n            }\n            fcn.1400036d8(iVar5);\n            *(arg1 + 8) = 0;\n        }\n        *(arg1 + 0x18) = 0;\n        *(arg1 + 0x10) = 0;\n        return;\n    }\n    if (iVar5 == 0) {\n        iVar4 = *(arg1 + 0x20);\n        if (*(arg1 + 0x20) < arg2) {\n            iVar4 = arg2;\n        }\n        arg1_00 = fcn.140003694(iVar4 << 3);\n        *(arg1 + 8) = arg1_00;\n        fcn.1400698a0(arg1_00, 0, iVar4 << 3);\n        if (0 < arg2) {\n            do {\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < arg2);\n        }\n    }\n    else {\n        iVar1 = *(arg1 + 0x18);\n        if (arg2 <= iVar1) {\n            iVar1 = *(arg1 + 0x10);\n            if (iVar1 < arg2) {\n                fcn.1400698a0(iVar5 + iVar1 * 8, 0, (arg2 - iVar1) * 8);\n                if (0 < arg2 - *(arg1 + 0x10)) {\n                    do {\n                        iVar6 = iVar6 + 1;\n                    } while (iVar6 < arg2 - *(arg1 + 0x10));\n                }\n            }\n            else if ((arg2 < iVar1) && (0 < iVar1 - arg2)) {\n                do {\n                    iVar6 = iVar6 + 1;\n                } while (iVar6 < *(arg1 + 0x10) - arg2);\n            }\n            goto code_r0x000140047593;\n        }\n        iVar5 = *(arg1 + 0x20);\n        if (iVar5 == 0) {\n            iVar4 = *(arg1 + 0x10) + (*(arg1 + 0x10) >> 0x3f & 7) >> 3;\n            iVar5 = iVar4;\n            if (0x400 < iVar4) {\n                iVar5 = 0x400;\n            }\n            if (iVar4 < 4) {\n                iVar5 = 4;\n            }\n        }\n        iVar4 = arg2;\n        if (arg2 < iVar5 + iVar1) {\n            iVar4 = iVar5 + iVar1;\n        }\n        if (iVar4 < iVar1) {\n            fcn.140020780();\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n        iVar5 = fcn.140003694(iVar4 << 3);\n        iVar3 = fcn.140069a48(iVar5, iVar4 << 3, *(arg1 + 8), *(arg1 + 0x10) << 3);\n        if (iVar3 != 0) {\n            if (iVar3 == 0xc) {\n                fcn.140020738();\n                pcVar2 = swi(3);\n                (*pcVar2)();\n                return;\n            }\n            if ((iVar3 == 0x16) || (iVar3 == 0x22)) {\n                fcn.140020780();\n                pcVar2 = swi(3);\n                (*pcVar2)();\n                return;\n            }\n            if (iVar3 != 0x50) {\n                fcn.140020780();\n                pcVar2 = swi(3);\n                (*pcVar2)();\n                return;\n            }\n        }\n        fcn.1400698a0(iVar5 + *(arg1 + 0x10) * 8, 0, (arg2 - *(arg1 + 0x10)) * 8);\n        if (0 < arg2 - *(arg1 + 0x10)) {\n            do {\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < arg2 - *(arg1 + 0x10));\n        }\n        fcn.1400036d8(*(arg1 + 8));\n        *(arg1 + 8) = iVar5;\n    }\n    *(arg1 + 0x18) = iVar4;\ncode_r0x000140047593:\n    *(arg1 + 0x10) = arg2;\n    return;\n}\n",
        "token_count": 1182
    },
    "1400475b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400475b0(int64_t arg1, int64_t arg2, ulong arg3)\n\n{\n    code *pcVar1;\n    \n    if (arg2 < 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    if (*(arg1 + 0x10) <= arg2) {\n        fcn.140047384(arg1, arg2 + 1, 0xffffffffffffffff);\n    }\n    *(*(arg1 + 8) + arg2 * 8) = arg3;\n    return;\n}\n",
        "token_count": 137
    },
    "14004760": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140047600(int64_t arg1)\n\n{\n    ulong *puVar1;\n    \n    for (puVar1 = *(arg1 + 8); puVar1 != NULL; puVar1 = *puVar1) {\n    }\n    *(arg1 + 0x18) = 0;\n    *(arg1 + 0x20) = 0;\n    *(arg1 + 0x10) = 0;\n    *(arg1 + 8) = 0;\n    fcn.14002aadc(*(arg1 + 0x28));\n    *(arg1 + 0x28) = 0;\n    return;\n}\n",
        "token_count": 144
    },
    "14005c5a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.14005c5a4(int64_t arg1)\n\n{\n    int64_t iVar1;\n    ulong arg1_00;\n    int64_t iVar2;\n    int64_t *piVar3;\n    int64_t iVar4;\n    \n    iVar4 = fcn.14005c484(1);\n    if (arg1 == 0) {\n        iVar1 = 0;\n    }\n    else {\n        iVar1 = fcn.14003a45c(iVar4 + 0x30, arg1);\n        if (iVar1 == 0) {\n            iVar1 = fcn.14003a45c(iVar4 + 0x68, arg1);\n            if (iVar1 == 0) {\n                arg1_00 = fcn.140003684(0x140022808);\n                iVar1 = fcn.14004c040(iVar4 + 8);\n                iVar2 = iVar1;\n                if (iVar1 == 0) {\n                    iVar2 = fcn.140020738();\n                }\n                (**(iVar4 + 0x20))(iVar2);\n                piVar3 = fcn.14003a6a4(iVar4 + 0x68, arg1);\n                *piVar3 = iVar1;\n                fcn.140003684(arg1_00);\n                iVar2 = *(iVar4 + 0xa8);\n                *(iVar1 + iVar2) = arg1;\n                if (*(iVar4 + 0xb0) == 2) {\n                    *(iVar1 + 8 + iVar2) = arg1;\n                }\n            }\n            else {\n                iVar2 = *(iVar4 + 0xa8);\n                *(iVar1 + iVar2) = arg1;\n                if (*(iVar4 + 0xb0) == 2) {\n                    *(iVar1 + 8 + iVar2) = arg1;\n                }\n            }\n        }\n    }\n    return iVar1;\n}\n",
        "token_count": 423
    },
    "1400479a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nbool fcn.1400479a8(int64_t arg1, ulong arg2)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.140017ad4();\n    iVar1 = (*_sym.imp.USER32.dll_LoadAcceleratorsA)(*(iVar1 + 0x18), arg2);\n    *(arg1 + 0xb8) = iVar1;\n    return iVar1 != 0;\n}\n",
        "token_count": 92
    },
    "140048f2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.140048f28(int64_t arg1, ulong arg2)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    ulong *puVar4;\n    \n    if (arg2 == 0) {\ncode_r0x000140048f68:\n        iVar3 = 0;\n    }\n    else {\n        puVar4 = *(arg1 + 0xf0);\n        do {\n            if (puVar4 == NULL) goto code_r0x000140048f68;\n            if (puVar4 == NULL) {\n                fcn.140020780();\n                pcVar1 = swi(3);\n                iVar3 = (*pcVar1)();\n                return iVar3;\n            }\n            iVar3 = puVar4[2];\n            puVar4 = *puVar4;\n            iVar2 = (*_sym.imp.USER32.dll_GetDlgCtrlID)(*(iVar3 + 0x40));\n        } while (iVar2 != arg2);\n    }\n    return iVar3;\n}\n",
        "token_count": 227
    },
    "1400498c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400498cc(code **arg1)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = 0;\n    *arg1 = vtable.CArray_struct_HWND______ptr64__struct_HWND______ptr64_.0;\n    if (arg1[1] != NULL) {\n        if (0 < arg1[2]) {\n            do {\n                iVar1 = iVar1 + 1;\n            } while (iVar1 < arg1[2]);\n        }\n        fcn.1400036d8(arg1[1]);\n    }\n    return;\n}\n",
        "token_count": 127
    },
    "140049e6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140049e68(int64_t arg1, int64_t arg2, uint64_t arg3, ulong arg4)\n\n{\n    ulong arg2_00;\n    int64_t iVar1;\n    ulong arg4_00;\n    \n    arg4_00 = 0;\n    if (arg2 != 0) {\n        arg4_00 = *(arg2 + 8);\n    }\n    arg2_00 = *(arg1 + 8);\n    iVar1 = fcn.140017ad4();\n    fcn.140049b70(**(iVar1 + 200), arg2_00, arg3 & 0xffffffff, arg4_00);\n    return;\n}\n",
        "token_count": 150
    },
    "14004a2b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14004a2b4(int64_t arg1, ulong arg2)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.140049a70(arg1, *(arg1 + 0x10), 0);\n    *(iVar1 + 0x10) = arg2;\n    if (*(arg1 + 0x10) == NULL) {\n        *(arg1 + 8) = iVar1;\n    }\n    else {\n        **(arg1 + 0x10) = iVar1;\n    }\n    *(arg1 + 0x10) = iVar1;\n    return;\n}\n",
        "token_count": 137
    },
    "14004a38": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14004a38c(int64_t arg1)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    \n    iVar2 = fcn.140017ad4();\n    iVar2 = fcn.1400234a0(iVar2 + 0xc0, 0x140003eb0);\n    if (iVar2 == 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    if (arg1 == 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    *(arg1 + *(iVar2 + 0x18)) = *(iVar2 + 0x10);\n    *(iVar2 + 0x10) = arg1;\n    return;\n}\n",
        "token_count": 193
    },
    "14004a3c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14004a3cc(int64_t arg1)\n\n{\n    int64_t iVar1;\n    code *pcVar2;\n    int64_t iVar3;\n    ulong uVar4;\n    int64_t iVar5;\n    \n    iVar3 = fcn.140017ad4();\n    iVar3 = fcn.1400234a0(iVar3 + 0xc0, 0x140003eb0);\n    if (iVar3 == 0) {\n        fcn.140020780();\n        pcVar2 = swi(3);\n        uVar4 = (*pcVar2)();\n        return uVar4;\n    }\n    iVar5 = *(iVar3 + 0x10);\n    uVar4 = 0;\n    if (iVar5 == 0) {\n        uVar4 = 0;\n    }\n    else if (iVar5 == arg1) {\n        if (arg1 == 0) {\n            fcn.140020780();\n            pcVar2 = swi(3);\n            uVar4 = (*pcVar2)();\n            return uVar4;\n        }\n        *(iVar3 + 0x10) = *(arg1 + *(iVar3 + 0x18));\ncode_r0x000140022e5c:\n        uVar4 = 1;\n    }\n    else {\n        if (iVar5 == 0) {\n            fcn.140020780();\n            pcVar2 = swi(3);\n            uVar4 = (*pcVar2)();\n            return uVar4;\n        }\n        do {\n            iVar1 = *(iVar3 + 0x18);\n            if (*(iVar1 + iVar5) == arg1) {\n                if (arg1 == 0) {\n                    fcn.140020780();\n                    pcVar2 = swi(3);\n                    uVar4 = (*pcVar2)();\n                    return uVar4;\n                }\n                *(iVar1 + iVar5) = *(iVar1 + arg1);\n                goto code_r0x000140022e5c;\n            }\n            iVar5 = *(iVar1 + iVar5);\n        } while (iVar5 != 0);\n    }\n    return uVar4;\n}\n",
        "token_count": 468
    },
    "14004acc": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14004acc0(code **arg1)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    code *pcVar3;\n    int64_t iVar4;\n    ulong *puVar5;\n    int64_t iVar6;\n    uchar auStack616 [56];\n    code **ppcStack560;\n    ulong uStack544;\n    uint64_t uStack24;\n    \n    uStack544 = 0xfffffffffffffffe;\n    uStack24 = *0x1400d96f0 ^ auStack616;\n    *arg1 = vtable.CFrameWnd.0;\n    ppcStack560 = arg1;\n    fcn.14004a3cc(arg1);\n    iVar4 = fcn.140016f48();\n    while (*(iVar4 + 0x158) == arg1) {\n        puVar5 = *(iVar4 + 0x160);\n        iVar6 = puVar5[1];\n        if (iVar6 == 0) {\n            fcn.140020780();\n        }\n        *(iVar6 + 0x158) = *puVar5;\n        *(puVar5[1] + 0x160) = puVar5[2];\n        puVar5[1] = 0;\n    }\n    if (arg1[0x29] != NULL) {\n        fcn.1400036d8(arg1[0x29]);\n    }\n    pcVar3 = arg1[0x2b];\n    LOCK();\n    piVar1 = pcVar3 + -8;\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 + -1 < 1) {\n        (**(**(pcVar3 + -0x18) + 8))();\n    }\n    fcn.14003aed0(arg1 + 0x1d);\n    fcn.140010b98(arg1);\n    fcn.140069870(uStack24 ^ auStack616);\n    return;\n}\n",
        "token_count": 439
    },
    "14004bcf": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14004bcf8(int64_t arg1, int64_t arg2)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    code *pcVar3;\n    int64_t iVar4;\n    uint32_t uVar5;\n    int64_t *piVar6;\n    uchar auStack136 [32];\n    int64_t iStack104;\n    ulong uStack96;\n    uchar auStack88 [32];\n    uchar auStack56 [32];\n    uint64_t uStack24;\n    \n    uStack96 = 0xfffffffffffffffe;\n    uStack24 = *0x1400d96f0 ^ auStack136;\n    piVar6 = fcn.140017fc0();\n    if (piVar6 == NULL) {\n        fcn.1400031e0(0x80004005);\n        pcVar3 = swi(3);\n        (*pcVar3)();\n        return;\n    }\n    iStack104 = (**(*piVar6 + 0x18))(piVar6);\n    iStack104 = iStack104 + 0x18;\n    uVar5 = fcn.140015284(arg1);\n    if ((uVar5 >> 0xe & 1) == 0) {\n        fcn.140007ad0(&iStack104, *(arg1 + 0x158), *(*(arg1 + 0x158) + -0x10));\n        if (arg2 != 0) {\n            uVar5 = fcn.1400699a0(0x1400a8eb8);\n            fcn.140007ad0(&iStack104, 0x1400a8eb8, uVar5);\n            uVar5 = fcn.1400699a0(arg2);\n            fcn.140007ad0(&iStack104, arg2, uVar5);\n            if (0 < *(arg1 + 0xac)) {\n                fcn.14006aa00(auStack56, 0x20, 0x1400a8ebc, *(arg1 + 0xac));\n                uVar5 = fcn.1400699a0(auStack56);\n                fcn.140007ad0(&iStack104, auStack56, uVar5);\n            }\n        }\n    }\n    else {\n        if (arg2 != 0) {\n            uVar5 = fcn.1400699a0(arg2);\n            fcn.140007ad0(&iStack104, arg2, uVar5);\n            if (0 < *(arg1 + 0xac)) {\n                fcn.14006aa00(auStack88, 0x20, 0x1400a8ebc, *(arg1 + 0xac));\n                uVar5 = fcn.1400699a0(auStack88);\n                fcn.140007ad0(&iStack104, auStack88, uVar5);\n            }\n            uVar5 = fcn.1400699a0(0x1400a8eb8);\n            fcn.140007ad0(&iStack104, 0x1400a8eb8, uVar5);\n        }\n        fcn.140007ad0(&iStack104, *(arg1 + 0x158), *(*(arg1 + 0x158) + -0x10));\n    }\n    iVar4 = iStack104;\n    fcn.1400226d4(*(arg1 + 0x40), iStack104);\n    LOCK();\n    piVar1 = iVar4 + -8;\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 + -1 < 1) {\n        (**(**(iVar4 + -0x18) + 8))();\n    }\n    fcn.140069870(uStack24 ^ auStack136);\n    return;\n}\n",
        "token_count": 853
    },
    "14004bf7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14004bf74(int64_t arg1)\n\n{\n    fcn.14002aadc(*(arg1 + 8));\n    *(arg1 + 8) = 0;\n    *(arg1 + 0x10) = 0;\n    return;\n}\n",
        "token_count": 61
    },
    "14004faa": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14004faa0(ulong arg1, int64_t arg2)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uchar auStack56 [48];\n    \n    if (arg2 == 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    fcn.14006dd68(auStack56, arg1);\n    fcn.14006dd68(auStack56, arg1);\n    fcn.14006dd68(auStack56, arg1);\n    fcn.14006dd68(auStack56, arg1);\n    fcn.14006dd68(auStack56, arg1);\n    fcn.14006dd68(auStack56, arg1);\n    iVar2 = (*_sym.imp.KERNEL32.dll_SystemTimeToFileTime)();\n    if (iVar2 == 0) {\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        fcn.140046a6c(uVar3, 0);\n    }\n    iVar2 = (*_sym.imp.KERNEL32.dll_LocalFileTimeToFileTime)();\n    if (iVar2 == 0) {\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        fcn.140046a6c(uVar3, 0);\n    }\n    return;\n}\n",
        "token_count": 315
    },
    "14005043": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140050434(int64_t arg1, int64_t arg2, int64_t arg3)\n\n{\n    ulong *puVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    ulong arg1_00;\n    int64_t iVar4;\n    int64_t iVar5;\n    uint64_t uVar6;\n    int64_t iVar7;\n    uint32_t uVar8;\n    uint64_t uVar9;\n    \n    uVar6 = 0;\n    if (arg2 < 0) {\n        fcn.140020780();\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    if (-1 < arg3) {\n        *(arg1 + 0x20) = arg3;\n    }\n    if (arg2 == 0) {\n        if (*(arg1 + 8) != 0) {\n            uVar9 = uVar6;\n            if (0 < *(arg1 + 0x10)) {\n                do {\n                    if (*(uVar6 + 0x10 + *(arg1 + 8)) != 0) {\n                        fcn.1400036d8(*(uVar6 + *(arg1 + 8)));\n                    }\n                    uVar8 = uVar9 + 1;\n                    uVar6 = uVar6 + 0x18;\n                    uVar9 = uVar8;\n                } while (uVar8 < *(arg1 + 0x10));\n            }\n            fcn.1400036d8(*(arg1 + 8));\n            *(arg1 + 8) = 0;\n        }\n        *(arg1 + 0x18) = 0;\n        *(arg1 + 0x10) = 0;\n        return;\n    }\n    if (*(arg1 + 8) == 0) {\n        iVar4 = *(arg1 + 0x20);\n        if (*(arg1 + 0x20) < arg2) {\n            iVar4 = arg2;\n        }\n        arg1_00 = fcn.140003694(iVar4 * 0x18);\n        *(arg1 + 8) = arg1_00;\n        fcn.1400698a0(arg1_00, 0, iVar4 * 0x18);\n        uVar9 = uVar6;\n        if (0 < arg2) {\n            do {\n                puVar1 = uVar6 + *(arg1 + 8);\n                if (puVar1 != NULL) {\n                    *puVar1 = 0;\n                    puVar1[1] = 0;\n                }\n                uVar8 = uVar9 + 1;\n                uVar6 = uVar6 + 0x18;\n                uVar9 = uVar8;\n            } while (uVar8 < arg2);\n        }\n    }\n    else {\n        iVar7 = *(arg1 + 0x18);\n        if (arg2 <= iVar7) {\n            iVar7 = *(arg1 + 0x10);\n            if (iVar7 < arg2) {\n                fcn.1400698a0(*(arg1 + 8) + iVar7 * 0x18, 0, (arg2 - iVar7) * 0x18);\n                uVar9 = uVar6;\n                if (0 < arg2 - *(arg1 + 0x10)) {\n                    do {\n                        puVar1 = *(arg1 + 8) + (uVar6 + *(arg1 + 0x10)) * 0x18;\n                        if (puVar1 != NULL) {\n                            *puVar1 = 0;\n                            puVar1[1] = 0;\n                        }\n                        uVar8 = uVar9 + 1;\n                        uVar9 = uVar8;\n                        uVar6 = uVar6 + 1;\n                    } while (uVar8 < arg2 - *(arg1 + 0x10));\n                }\n            }\n            else if ((arg2 < iVar7) && (0 < iVar7 - arg2)) {\n                iVar7 = arg2 * 0x18;\n                do {\n                    if (*(iVar7 + 0x10 + *(arg1 + 8)) != 0) {\n                        fcn.1400036d8(*(iVar7 + *(arg1 + 8)));\n                    }\n                    uVar8 = uVar6 + 1;\n                    uVar6 = uVar8;\n                    iVar7 = iVar7 + 0x18;\n                } while (uVar8 < *(arg1 + 0x10) - arg2);\n            }\n            goto code_r0x000140050713;\n        }\n        iVar5 = *(arg1 + 0x20);\n        if (iVar5 == 0) {\n            iVar4 = *(arg1 + 0x10) + (*(arg1 + 0x10) >> 0x3f & 7) >> 3;\n            iVar5 = iVar4;\n            if (0x400 < iVar4) {\n                iVar5 = 0x400;\n            }\n            if (iVar4 < 4) {\n                iVar5 = 4;\n            }\n        }\n        iVar4 = arg2;\n        if (arg2 < iVar5 + iVar7) {\n            iVar4 = iVar5 + iVar7;\n        }\n        if (iVar4 < iVar7) {\n            fcn.140020780();\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n        iVar7 = fcn.140003694(iVar4 * 0x18);\n        iVar3 = fcn.140069a48(iVar7, iVar4 * 0x18, *(arg1 + 8), *(arg1 + 0x10) * 0x18);\n        if (iVar3 != 0) {\n            if (iVar3 == 0xc) {\n                fcn.140020738();\n                pcVar2 = swi(3);\n                (*pcVar2)();\n                return;\n            }\n            if ((iVar3 == 0x16) || (iVar3 == 0x22)) {\n                fcn.140020780();\n                pcVar2 = swi(3);\n                (*pcVar2)();\n                return;\n            }\n            if (iVar3 != 0x50) {\n                fcn.140020780();\n                pcVar2 = swi(3);\n                (*pcVar2)();\n                return;\n            }\n        }\n        fcn.1400698a0(iVar7 + *(arg1 + 0x10) * 0x18, 0, (arg2 - *(arg1 + 0x10)) * 0x18);\n        uVar9 = uVar6;\n        if (0 < arg2 - *(arg1 + 0x10)) {\n            do {\n                puVar1 = iVar7 + (uVar6 + *(arg1 + 0x10)) * 0x18;\n                if (puVar1 != NULL) {\n                    *puVar1 = 0;\n                    puVar1[1] = 0;\n                }\n                uVar8 = uVar9 + 1;\n                uVar9 = uVar8;\n                uVar6 = uVar6 + 1;\n            } while (uVar8 < arg2 - *(arg1 + 0x10));\n        }\n        fcn.1400036d8(*(arg1 + 8));\n        *(arg1 + 8) = iVar7;\n    }\n    *(arg1 + 0x18) = iVar4;\ncode_r0x000140050713:\n    *(arg1 + 0x10) = arg2;\n    return;\n}\n",
        "token_count": 1666
    },
    "140050e7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140050e78(int64_t arg1)\n\n{\n    int32_t *piVar1;\n    int16_t *piVar2;\n    code *pcVar3;\n    int64_t iVar4;\n    int64_t iVar5;\n    int64_t iVar6;\n    int32_t iVar7;\n    \n    iVar4 = *(arg1 + 0x10);\n    iVar7 = 0;\n    iVar6 = 0;\n    if (0 < iVar4) {\n        iVar5 = 0;\n        do {\n            if ((iVar5 < 0) || (iVar4 <= iVar6)) {\n                fcn.140020780();\n                pcVar3 = swi(3);\n                (*pcVar3)();\n                return;\n            }\n            piVar1 = *(*(arg1 + 8) + iVar5);\n            if ((piVar1 == NULL) || (piVar2 = *(*(arg1 + 8) + 8 + iVar5),  piVar2 == NULL)) {\n                fcn.140020780();\n                pcVar3 = swi(3);\n                (*pcVar3)();\n                return;\n            }\n            iVar7 = iVar7 + 1;\n            iVar6 = iVar6 + 1;\n            *piVar2 = -(*piVar1 != 0);\n            iVar4 = *(arg1 + 0x10);\n            iVar5 = iVar5 + 0x18;\n        } while (iVar7 < iVar4);\n    }\n    return;\n}\n",
        "token_count": 323
    },
    "14005102": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140051024(code **arg1)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    code *pcVar3;\n    \n    pcVar3 = arg1[6];\n    *arg1 = vtable.COleDispatchException.0;\n    LOCK();\n    piVar1 = pcVar3 + -8;\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 + -1 < 1) {\n        (**(**(pcVar3 + -0x18) + 8))();\n    }\n    pcVar3 = arg1[5];\n    LOCK();\n    piVar1 = pcVar3 + -8;\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 + -1 < 1) {\n        (**(**(pcVar3 + -0x18) + 8))();\n    }\n    pcVar3 = arg1[3];\n    LOCK();\n    piVar1 = pcVar3 + -8;\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 + -1 < 1) {\n        (**(**(pcVar3 + -0x18) + 8))();\n    }\n    return;\n}\n",
        "token_count": 299
    },
    "1400528c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.1400528c8(int64_t arg1, ulong arg2)\n\n{\n    int64_t arg2_00;\n    code *pcVar1;\n    int32_t iVar2;\n    ulong uVar3;\n    \n    if (*(arg1 + 0x58) < *(arg1 + 0x5c)) {\n        arg2_00 = *(arg1 + 0x40);\n        iVar2 = fcn.140069a48(arg2, arg2_00, *(arg1 + 0x58) * arg2_00 + *(arg1 + 0x50), arg2_00);\n        if (iVar2 != 0) {\n            if (iVar2 == 0xc) {\n                fcn.140020738();\n                pcVar1 = swi(3);\n                uVar3 = (*pcVar1)();\n                return uVar3;\n            }\n            if ((iVar2 == 0x16) || (iVar2 == 0x22)) {\n                fcn.140020780();\n                pcVar1 = swi(3);\n                uVar3 = (*pcVar1)();\n                return uVar3;\n            }\n            if (iVar2 != 0x50) {\n                fcn.140020780();\n                pcVar1 = swi(3);\n                uVar3 = (*pcVar1)();\n                return uVar3;\n            }\n        }\n        uVar3 = 1;\n        *(arg1 + 0x58) = *(arg1 + 0x58) + 1;\n    }\n    else {\n        uVar3 = 0;\n    }\n    return uVar3;\n}\n",
        "token_count": 356
    },
    "140052b4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** fcn.140052b40(code **arg1, code *arg2, code *arg3, ulong arg4)\n\n{\n    uint in_stack_00000028;\n    \n    fcn.140005f80(arg1);\n    *arg1 = vtable.CEnumArray.0;\n    arg1[0xd] = vtable.CEnumArray::XEnumVOID.0;\n    arg1[9] = NULL;\n    *(arg1 + 0xb) = 0;\n    *(arg1 + 0xc) = in_stack_00000028;\n    arg1[8] = arg2;\n    arg1[10] = arg3;\n    *(arg1 + 0x5c) = arg4;\n    return arg1;\n}\n",
        "token_count": 164
    },
    "140052dd": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140052ddc(ulong *arg1, ulong arg2, ulong arg3)\n\n{\n    fcn.140052d78(arg1);\n    *arg1 = arg2;\n    *(arg1 + 1) = arg3;\n    return;\n}\n",
        "token_count": 59
    },
    "140052e1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140052e10(int64_t arg1)\n\n{\n    uint32_t *puVar1;\n    int16_t *piVar2;\n    code *pcVar3;\n    int64_t iVar4;\n    uint64_t uVar5;\n    uint64_t uVar6;\n    uint32_t uVar7;\n    uint64_t uVar8;\n    \n    iVar4 = *(arg1 + 0x10);\n    uVar5 = 0;\n    uVar6 = uVar5;\n    uVar8 = uVar5;\n    if (0 < iVar4) {\n        do {\n            if ((uVar5 < 0) || (iVar4 <= uVar6)) {\n                fcn.140020780();\n                pcVar3 = swi(3);\n                (*pcVar3)();\n                return;\n            }\n            puVar1 = *(*(arg1 + 8) + uVar5);\n            if ((puVar1 == NULL) || (piVar2 = *(*(arg1 + 8) + 8 + uVar5),  piVar2 == NULL)) {\n                fcn.140020780();\n                pcVar3 = swi(3);\n                (*pcVar3)();\n                return;\n            }\n            uVar7 = uVar8 + 1;\n            *puVar1 = *piVar2 != 0;\n            iVar4 = *(arg1 + 0x10);\n            uVar5 = uVar5 + 0x18;\n            uVar6 = uVar6 + 1;\n            uVar8 = uVar7;\n        } while (uVar7 < iVar4);\n    }\n    return;\n}\n",
        "token_count": 358
    },
    "140052e8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.140052e80(char *arg1, ulong arg2)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int64_t iStackX8;\n    \n    fcn.14002010c(&iStackX8, arg1);\n    if (*arg1 == '{') {\n        uVar3 = (*_sym.imp.ole32.dll_CLSIDFromString)();\n    }\n    else {\n        uVar3 = (*_sym.imp.ole32.dll_CLSIDFromProgID)(iStackX8, arg2);\n    }\n    LOCK();\n    piVar1 = iStackX8 + -8;\n    iVar2 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar2 + -1 < 1) {\n        (**(**(iStackX8 + -0x18) + 8))();\n    }\n    return uVar3;\n}\n",
        "token_count": 208
    },
    "140053a9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140053a90(ulong arg1, ulong arg2)\n\n{\n    fcn.140052f50(arg1, arg2);\n    return;\n}\n",
        "token_count": 37
    },
    "140053de": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140053de8(char *arg1, ulong lpString)\n\n{\n    char cVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    ulong uVar5;\n    \n    iVar3 = (*_sym.imp.KERNEL32.dll_lstrlenA)(lpString);\n    while( true ) {\n        cVar1 = *arg1;\n        if (cVar1 == '\\0') {\n            return 0;\n        }\n        if (((cVar1 == '-') || (cVar1 == '/')) && (iVar4 = fcn.14006e24c(lpString, arg1 + 1, iVar3),  iVar4 == 0))\n        break;\n        arg1 = arg1 + 1;\n    }\n    iVar4 = (*_sym.imp.KERNEL32.dll_lstrlenA)();\n    iVar3 = fcn.14006a3c0(arg1, iVar4, arg1 + iVar3 + 1, iVar4 - iVar3);\n    if (iVar3 != 0) {\n        if (iVar3 == 0xc) {\n            fcn.140020738();\n            pcVar2 = swi(3);\n            uVar5 = (*pcVar2)();\n            return uVar5;\n        }\n        if ((iVar3 == 0x16) || (iVar3 == 0x22)) {\n            fcn.140020780();\n            pcVar2 = swi(3);\n            uVar5 = (*pcVar2)();\n            return uVar5;\n        }\n        if (iVar3 != 0x50) {\n            fcn.140020780();\n            pcVar2 = swi(3);\n            uVar5 = (*pcVar2)();\n            return uVar5;\n        }\n    }\n    return 1;\n}\n",
        "token_count": 389
    },
    "1400543d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400543dc(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    ulong uStack24;\n    ulong uStack16;\n    \n    uStack24 = arg3;\n    uStack16 = arg4;\n    fcn.1400542cc(arg1, arg2, &uStack24, 2);\n    return;\n}\n",
        "token_count": 82
    },
    "1400544d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400544d0(int64_t arg1, uint64_t arg2, int64_t arg3)\n\n{\n    int64_t iVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    ulong arg1_00;\n    int64_t iVar4;\n    int64_t iVar5;\n    uint64_t arg1_01;\n    \n    if (arg2 < 0) {\n        fcn.140020780();\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    if (-1 < arg3) {\n        *(arg1 + 0x20) = arg3;\n    }\n    iVar5 = *(arg1 + 8);\n    if (arg2 == 0) {\n        fcn.1400036d8(iVar5);\n        *(arg1 + 8) = 0;\n        *(arg1 + 0x18) = 0;\n        *(arg1 + 0x10) = 0;\n    }\n    else {\n        if (iVar5 == 0) {\n            if (0xffffffff < arg2) {\n                fcn.140020780();\n                pcVar2 = swi(3);\n                (*pcVar2)();\n                return;\n            }\n            arg1_00 = fcn.140003694(arg2);\n            *(arg1 + 8) = arg1_00;\n            fcn.1400698a0(arg1_00, 0, arg2);\n            *(arg1 + 0x18) = arg2;\n        }\n        else {\n            iVar1 = *(arg1 + 0x18);\n            if (iVar1 < arg2) {\n                iVar5 = *(arg1 + 0x20);\n                if (*(arg1 + 0x20) == 0) {\n                    iVar4 = *(arg1 + 0x10) + (*(arg1 + 0x10) >> 0x3f & 7) >> 3;\n                    if (((iVar4 < 4) || (iVar5 = 0x400,  iVar4 < 0x401)) && (iVar5 = iVar4,  iVar4 < 4)) {\n                        iVar5 = 4;\n                    }\n                }\n                arg1_01 = arg2;\n                if (arg2 < iVar5 + iVar1) {\n                    arg1_01 = iVar5 + iVar1;\n                }\n                if (arg1_01 < iVar1) {\n                    fcn.140020780();\n                    pcVar2 = swi(3);\n                    (*pcVar2)();\n                    return;\n                }\n                iVar5 = fcn.140003694(arg1_01);\n                iVar3 = fcn.140069a48(iVar5, arg1_01, *(arg1 + 8), *(arg1 + 0x10));\n                if (iVar3 != 0) {\n                    if (iVar3 == 0xc) {\n                        fcn.140020738();\n                        pcVar2 = swi(3);\n                        (*pcVar2)();\n                        return;\n                    }\n                    if ((iVar3 == 0x16) || (iVar3 == 0x22)) {\n                        fcn.140020780();\n                        pcVar2 = swi(3);\n                        (*pcVar2)();\n                        return;\n                    }\n                    if (iVar3 != 0x50) {\n                        fcn.140020780();\n                        pcVar2 = swi(3);\n                        (*pcVar2)();\n                        return;\n                    }\n                }\n                fcn.1400698a0(*(arg1 + 0x10) + iVar5, 0, arg2 - *(arg1 + 0x10));\n                fcn.1400036d8(*(arg1 + 8));\n                *(arg1 + 8) = iVar5;\n                *(arg1 + 0x18) = arg1_01;\n            }\n            else {\n                iVar1 = *(arg1 + 0x10);\n                if (iVar1 < arg2) {\n                    fcn.1400698a0(iVar5 + iVar1, 0, arg2 - iVar1);\n                }\n            }\n        }\n        *(arg1 + 0x10) = arg2;\n    }\n    return;\n}\n",
        "token_count": 917
    },
    "14005482": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140054828(int64_t arg1, int64_t arg2, ulong arg3, int64_t arg4)\n\n{\n    int64_t iVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    int64_t arg3_00;\n    \n    if ((arg2 < 0) || (arg4 < 1)) {\n        fcn.140020780();\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    if (arg2 < *(arg1 + 0x10)) {\n        iVar1 = *(arg1 + 0x10);\n        fcn.1400544d0(arg1, iVar1 + arg4, 0xffffffffffffffff);\n        arg3_00 = *(arg1 + 8) + arg2;\n        iVar3 = fcn.14006a3c0(arg3_00 + arg4, (*(arg1 + 0x10) - arg2) - arg4, arg3_00, iVar1 - arg2);\n        if (iVar3 != 0) {\n            if (iVar3 == 0xc) {\n                fcn.140020738();\n                pcVar2 = swi(3);\n                (*pcVar2)();\n                return;\n            }\n            if ((iVar3 == 0x16) || (iVar3 == 0x22)) {\n                fcn.140020780();\n                pcVar2 = swi(3);\n                (*pcVar2)();\n                return;\n            }\n            if (iVar3 != 0x50) {\n                fcn.140020780();\n                pcVar2 = swi(3);\n                (*pcVar2)();\n                return;\n            }\n        }\n        fcn.1400698a0(arg2 + *(arg1 + 8), 0, arg4);\n    }\n    else {\n        fcn.1400544d0(arg1, arg2 + arg4, 0xffffffffffffffff);\n    }\n    do {\n        *(arg2 + *(arg1 + 8)) = arg3;\n        arg2 = arg2 + 1;\n        arg4 = arg4 + -1;\n    } while (arg4 != 0);\n    return;\n}\n",
        "token_count": 479
    },
    "140054b9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.140054b98(int64_t arg1, ulong arg2)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    int64_t iStackX8;\n    \n    fcn.1400150dc(*(arg1 + 8), arg2, &iStackX8);\n    if ((iStackX8 == 0) && (iVar2 = fcn.14001501c(*(arg1 + 8)),  iVar2 == 0)) {\n        fcn.14002075c();\n        pcVar1 = swi(3);\n        iVar2 = (*pcVar1)();\n        return iVar2;\n    }\n    *(arg1 + 0x14) = 0;\n    *(arg1 + 0x10) = arg2;\n    return iStackX8;\n}\n",
        "token_count": 179
    },
    "1400550c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400550c8(int64_t arg1)\n\n{\n    ulong in_RDX;\n    \n    fcn.140054b98(arg1, in_RDX);\n    *(arg1 + 0x14) = 1;\n    return;\n}\n",
        "token_count": 57
    },
    "140055ec": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.140055ecc(int64_t arg1)\n\n{\n    fcn.14000d828(arg1);\n    *(arg1 + 0xc4) = 2;\n    *(arg1 + 200) = 0x7fff;\n    *(arg1 + 0xb8) = 6;\n    *(arg1 + 0xb4) = 6;\n    *(arg1 + 0xc0) = 1;\n    *(arg1 + 0xbc) = 1;\n    *(arg1 + 0xcc) = 0;\n    *(arg1 + 0xd0) = 0;\n    *(arg1 + 0xb0) = 0;\n    *(arg1 + 0x70) = 0;\n    *(arg1 + 0xd8) = 0;\n    *(arg1 + 0xe0) = 0;\n    *(arg1 + 0xf0) = 0;\n    *(arg1 + 0xf8) = 0;\n    *(arg1 + 0x100) = 0;\n    *(arg1 + 0xe4) = 0;\n    *(arg1 + 0xe8) = 0;\n    *(arg1 + 0xa8) = 0;\n    return arg1;\n}\n",
        "token_count": 285
    },
    "14005601": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140056014(int64_t *arg1, ulong arg2)\n\n{\n    uint32_t uVar1;\n    \n    fcn.1400648e0(arg1, arg2 & 0x10);\n    uVar1 = *(arg1 + 0xe4);\n    if (uVar1 != arg2) {\n        *(arg1 + 0xe4) = arg2;\n        (**(*arg1 + 0x2e8))(arg1, uVar1, arg2);\n    }\n    return;\n}\n",
        "token_count": 117
    },
    "1400564e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400564e4(int64_t arg1, int32_t *arg2, ulong arg3)\n\n{\n    uint32_t uVar1;\n    \n    uVar1 = *(arg1 + 0xe4);\n    if ((uVar1 >> 8 & 1) != 0) {\n        *arg2 = *arg2 + *0x1400deac0;\n    }\n    if ((uVar1 >> 9 & 1) != 0) {\n        arg2[1] = arg2[1] + *0x1400deac4;\n    }\n    if ((uVar1 >> 10 & 1) != 0) {\n        arg2[2] = arg2[2] - *0x1400deac0;\n    }\n    if ((uVar1 >> 0xb & 1) != 0) {\n        arg2[3] = arg2[3] - *0x1400deac4;\n    }\n    if (arg3 == 0) {\n        *arg2 = *arg2 + *(arg1 + 0xbc);\n        arg2[1] = arg2[1] + *(arg1 + 0xb4);\n        arg2[2] = arg2[2] - *(arg1 + 0xc0);\n        arg2[3] = arg2[3] - *(arg1 + 0xb8);\n        if ((*(arg1 + 0xe4) & 0x400001) == 0x400000) {\n            arg2[1] = arg2[1] + 7;\n        }\n    }\n    else {\n        *arg2 = *arg2 + *(arg1 + 0xb4);\n        arg2[1] = arg2[1] + *(arg1 + 0xbc);\n        arg2[2] = arg2[2] - *(arg1 + 0xb8);\n        arg2[3] = arg2[3] - *(arg1 + 0xc0);\n        if ((*(arg1 + 0xe4) & 0x400001) == 0x400000) {\n            *arg2 = *arg2 + 7;\n            return;\n        }\n    }\n    return;\n}\n",
        "token_count": 492
    },
    "1400566e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400566e4(int64_t hWnd, ulong arg2, ulong arg3)\n\n{\n    (*_sym.imp.USER32.dll_KillTimer)(*(hWnd + 0x40), 0xe000);\n    (*_sym.imp.USER32.dll_KillTimer)(*(hWnd + 0x40), 0xe001);\n    // WARNING: Could not recover jumptable at 0x000140056736. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.USER32.dll_SetTimer)(*(hWnd + 0x40), arg2, arg3, 0);\n    return;\n}\n",
        "token_count": 143
    },
    "14005797": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140057978(int64_t *arg1, uint64_t arg2, ulong arg3, int64_t arg4)\n\n{\n    int32_t iVar1;\n    ulong uVar2;\n    int64_t iVar3;\n    uint32_t uVar4;\n    uint64_t uVar5;\n    bool bVar6;\n    ulong *puVar7;\n    ulong auStack24 [2];\n    \n    uVar4 = arg2;\n    uVar5 = arg2 & 0xffffffff;\n    if ((uVar4 < 0x2b) || ((((0x2f < uVar4 && (uVar4 != 0x39)) && (uVar4 != 0x4e)) && (uVar4 != 0x111)))) {\n        uVar2 = fcn.14000c870(arg1, arg2, arg3, arg4);\n        return uVar2;\n    }\n    puVar7 = auStack24;\n    iVar1 = (**(*arg1 + 0x228))(arg1);\n    if (iVar1 != 0) {\n        return auStack24[0];\n    }\n    if ((arg1[0x15] != 0) && (uVar5 == 0x111)) {\n        uVar2 = (*_sym.imp.USER32.dll_SendMessageA)(*(arg1[0x15] + 0x40), uVar5, arg3, arg4);\n        return uVar2;\n    }\n    iVar3 = arg1[0xe];\n    if (iVar3 == 0) {\n        iVar3 = (*_sym.imp.USER32.dll_GetParent)(arg1[8]);\n    }\n    iVar3 = fcn.14000fc08(iVar3);\n    auStack24[0] = (*_sym.imp.USER32.dll_SendMessageA)(*(iVar3 + 0x40), uVar5, arg3, arg4, puVar7);\n    if (uVar5 != 0x4e) {\n        return auStack24[0];\n    }\n    if (*(arg4 + 0x10) == -0x208) {\n        if (*(arg4 + 0x70) != 0) {\n            return auStack24[0];\n        }\n        if (*(arg4 + 0x18) == NULL) goto code_r0x000140057a96;\n        bVar6 = **(arg4 + 0x18) == '\\0';\n    }\n    else {\n        if (*(arg4 + 0x10) != -0x212) {\n            return auStack24[0];\n        }\n        if (*(arg4 + 0xc0) != 0) {\n            return auStack24[0];\n        }\n        if (*(arg4 + 0x18) == NULL) goto code_r0x000140057a96;\n        bVar6 = **(arg4 + 0x18) == 0;\n    }\n    if (!bVar6) {\n        return auStack24[0];\n    }\ncode_r0x000140057a96:\n    uVar2 = fcn.14000c870(arg1, 0x4e, arg3, arg4);\n    return uVar2;\n}\n",
        "token_count": 697
    },
    "140057c2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140057c20(int64_t arg1, ulong arg2, ulong arg3)\n\n{\n    ulong uVar1;\n    uint64_t uVar2;\n    \n    uVar2 = arg2;\n    if (arg2 == 0) {\n        uVar2 = 0x11;\n    }\n    if (*(arg1 + 8) != 0) {\n        fcn.1400036d8(*(arg1 + 8));\n        *(arg1 + 8) = 0;\n    }\n    if (arg3 != 0) {\n        uVar1 = SUB168(ZEXT816(8) * ZEXT816(uVar2), 0);\n        if (SUB168(ZEXT816(8) * ZEXT816(uVar2) >> 0x40, 0) != 0) {\n            uVar1 = 0xffffffffffffffff;\n        }\n        uVar1 = fcn.140003694(uVar1);\n        *(arg1 + 8) = uVar1;\n        fcn.1400698a0(uVar1, 0, uVar2 << 3);\n    }\n    *(arg1 + 0x10) = uVar2;\n    return;\n}\n",
        "token_count": 264
    },
    "140057fa": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140057fac(int64_t arg1, ulong *arg2)\n\n{\n    int32_t *piVar1;\n    int64_t *piVar2;\n    int32_t iVar3;\n    int64_t iVar4;\n    code *pcVar5;\n    \n    if (arg2 + 2 == NULL) {\n        fcn.140020780();\n        pcVar5 = swi(3);\n        (*pcVar5)();\n        return;\n    }\n    iVar4 = arg2[2];\n    LOCK();\n    piVar1 = iVar4 + -8;\n    iVar3 = *piVar1;\n    *piVar1 = *piVar1 + -1;\n    if (iVar3 + -1 < 1) {\n        (**(**(iVar4 + -0x18) + 8))();\n    }\n    *arg2 = *(arg1 + 0x20);\n    piVar2 = arg1 + 0x18;\n    *piVar2 = *piVar2 + -1;\n    *(arg1 + 0x20) = arg2;\n    if (*piVar2 == 0) {\n        fcn.140057ef0(arg1);\n    }\n    return;\n}\n",
        "token_count": 262
    },
    "14005810": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140058104(int64_t arg1, int64_t **arg2, ulong arg3, int64_t *arg4)\n\n{\n    code *pcVar1;\n    int64_t **ppiVar2;\n    int64_t *piVar3;\n    uint32_t uVar4;\n    int64_t *piVar5;\n    uint32_t uVar6;\n    \n    piVar5 = *arg2;\n    if (piVar5 != NULL) {\n        if ((piVar5 == 0xffffffffffffffff) && (uVar6 = 0,  *(arg1 + 0x10) != 0)) {\n            ppiVar2 = *(arg1 + 8);\n            while (piVar5 = *ppiVar2,  piVar5 == NULL) {\n                uVar6 = uVar6 + 1;\n                ppiVar2 = ppiVar2 + 1;\n                if (*(arg1 + 0x10) <= uVar6) {\n                    fcn.140020780();\n                    pcVar1 = swi(3);\n                    (*pcVar1)();\n                    return;\n                }\n            }\n        }\n        piVar3 = *piVar5;\n        if (piVar3 == NULL) {\n            uVar6 = *(arg1 + 0x10);\n            uVar4 = *(piVar5 + 1) % uVar6 + 1;\n            if (uVar4 < uVar6) {\n                ppiVar2 = *(arg1 + 8) + uVar4 * 8;\n                do {\n                    piVar3 = *ppiVar2;\n                    if (piVar3 != NULL) break;\n                    uVar4 = uVar4 + 1;\n                    ppiVar2 = ppiVar2 + 1;\n                } while (uVar4 < uVar6);\n            }\n        }\n        *arg2 = piVar3;\n        fcn.140007bbc(arg3, piVar5 + 2);\n        *arg4 = piVar5[3];\n    }\n    return;\n}\n",
        "token_count": 445
    },
    "1400581b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong * fcn.1400581b4(int64_t arg1, int64_t arg2)\n\n{\n    uint32_t uVar1;\n    ulong *puVar2;\n    uint auStackX24 [2];\n    uint32_t auStackX32 [2];\n    \n    puVar2 = fcn.140057dd0(arg1, arg2, auStackX32, auStackX24);\n    uVar1 = 0;\n    if (puVar2 == NULL) {\n        if (*(arg1 + 8) == 0) {\n            fcn.140057c20(arg1, *(arg1 + 0x10), 1);\n        }\n        puVar2 = fcn.140057d2c(arg1);\n        *(puVar2 + 1) = auStackX24[0];\n        if (arg2 != 0) {\n            uVar1 = fcn.1400699a0(arg2);\n        }\n        fcn.140005294(puVar2 + 2, arg2, uVar1);\n        *puVar2 = *(*(arg1 + 8) + auStackX32[0] * 8);\n        *(*(arg1 + 8) + auStackX32[0] * 8) = puVar2;\n    }\n    return puVar2 + 3;\n}\n",
        "token_count": 292
    },
    "14005825": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong * fcn.14005825c(ulong *arg1, ulong arg2)\n\n{\n    uchar auVar1 [16];\n    ulong uVar2;\n    \n    auVar1 = ZEXT816(8) * ZEXT816(arg2);\n    uVar2 = SUB168(auVar1, 0);\n    if (SUB168(auVar1 >> 0x40, 0) != 0) {\n        uVar2 = 0xffffffffffffffff;\n    }\n    uVar2 = fcn.140003694(uVar2);\n    *arg1 = uVar2;\n    fcn.1400698a0(uVar2, 0, arg2 << 3);\n    *(arg1 + 1) = arg2;\n    return arg1;\n}\n",
        "token_count": 168
    },
    "1400582b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400582b8(int64_t *arg1)\n\n{\n    uint *puVar1;\n    int32_t iVar2;\n    uint uVar3;\n    ulong unaff_RBX;\n    uint64_t uVar4;\n    uint32_t uVar5;\n    uint64_t uVar6;\n    ulong in_R9;\n    \n    uVar4 = 0;\n    uVar6 = uVar4;\n    if (0 < *(arg1 + 1)) {\n        do {\n            fcn.140069e50(*(uVar4 + *arg1));\n            uVar5 = uVar6 + 1;\n            uVar4 = uVar4 + 8;\n            uVar6 = uVar5;\n        } while (uVar5 < *(arg1 + 1));\n    }\n    if ((*arg1 != 0) &&\n       (iVar2 = (*_sym.imp.KERNEL32.dll_HeapFree)(*0x1400df6a0, 0, *arg1, in_R9, unaff_RBX),  iVar2 == 0)) {\n        puVar1 = fcn.14006abb0();\n        uVar5 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        uVar3 = fcn.14006ab68(uVar5);\n        *puVar1 = uVar3;\n    }\n    return;\n}\n",
        "token_count": 297
    },
    "14005830": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140058304(int64_t *arg1, ulong arg2, int64_t arg3)\n\n{\n    ulong uVar1;\n    \n    fcn.140069e50(*(*arg1 + arg2 * 8));\n    uVar1 = 0;\n    if (arg3 != 0) {\n        uVar1 = fcn.14006ae94(arg3);\n    }\n    *(*arg1 + arg2 * 8) = uVar1;\n    return;\n}\n",
        "token_count": 107
    },
    "140058cf": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.140058cf0(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    int32_t in_stack_00000028;\n    int64_t in_stack_00000030;\n    int64_t in_stack_00000038;\n    ulong auStack48 [3];\n    \n    iVar2 = 0;\n    if (in_stack_00000030 == 0) {\n        in_stack_00000030 = *(in_stack_00000028 * 0x10 + 0x1400aa910);\n    }\n    if (in_stack_00000038 == 0) {\n        iVar3 = fcn.140017ad4();\n        if (*(iVar3 + 0x28) == '\\0') {\n            in_stack_00000038 = *(in_stack_00000028 * 0x10 + 0x1400aa918);\n        }\n        else {\n            in_stack_00000038 = *(in_stack_00000028 * 0x10 + 0x1400aa968);\n        }\n    }\n    fcn.14005825c(auStack48, 10);\n    iVar1 = fcn.1400588d0(auStack48, arg1, arg2, arg3);\n    if (((iVar1 != 0) && (iVar2 = fcn.14005867c(in_stack_00000030, auStack48[0], 10, 0),  iVar2 != 0)) &&\n       (in_stack_00000038 != 0)) {\n        iVar2 = fcn.14005867c(in_stack_00000038, auStack48[0], 10, 1);\n    }\n    fcn.1400582b8(auStack48);\n    return iVar2;\n}\n",
        "token_count": 408
    },
    "140058e6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.140058e60(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    int32_t in_stack_00000028;\n    int64_t in_stack_00000030;\n    int64_t in_stack_00000038;\n    ulong auStack48 [3];\n    \n    iVar2 = 0;\n    if (in_stack_00000030 == 0) {\n        in_stack_00000030 = *(in_stack_00000028 * 0x10 + 0x1400aa910);\n    }\n    if (in_stack_00000038 == 0) {\n        iVar3 = fcn.140017ad4();\n        if (*(iVar3 + 0x28) == '\\0') {\n            in_stack_00000038 = *(in_stack_00000028 * 0x10 + 0x1400aa918);\n        }\n        else {\n            in_stack_00000038 = *(in_stack_00000028 * 0x10 + 0x1400aa968);\n        }\n    }\n    fcn.14005825c(auStack48, 10);\n    iVar1 = fcn.1400588d0(auStack48, arg1, arg2, arg3);\n    if (((iVar1 != 0) && (iVar2 = fcn.1400584ec(in_stack_00000030, auStack48[0], 10, 0xffffffff80000000),  iVar2 != 0))\n       && (in_stack_00000038 != 0)) {\n        iVar2 = fcn.1400584ec(in_stack_00000038, auStack48[0], 10, 0xffffffff80000000);\n    }\n    fcn.1400582b8(auStack48);\n    return iVar2;\n}\n",
        "token_count": 416
    },
    "140058fb": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140058fb0(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    fcn.140058cf0(arg1, arg2, arg3, arg4);\n    return;\n}\n",
        "token_count": 51
    },
    "1400590f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400590fc(int64_t arg1, int64_t arg2, int64_t arg3)\n\n{\n    int64_t iVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    ulong arg1_00;\n    int64_t iVar4;\n    int64_t iVar5;\n    \n    if (arg2 < 0) {\n        fcn.140020780();\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    if (-1 < arg3) {\n        *(arg1 + 0x20) = arg3;\n    }\n    iVar5 = *(arg1 + 8);\n    if (arg2 == 0) {\n        fcn.1400036d8(iVar5);\n        *(arg1 + 8) = 0;\n        *(arg1 + 0x18) = 0;\n        *(arg1 + 0x10) = 0;\n    }\n    else {\n        if (iVar5 == 0) {\n            arg1_00 = fcn.140003694(arg2 << 3);\n            *(arg1 + 8) = arg1_00;\n            fcn.1400698a0(arg1_00, 0, arg2 << 3);\n            *(arg1 + 0x18) = arg2;\n        }\n        else {\n            iVar1 = *(arg1 + 0x18);\n            if (iVar1 < arg2) {\n                iVar5 = *(arg1 + 0x20);\n                if (*(arg1 + 0x20) == 0) {\n                    iVar4 = *(arg1 + 0x10) + (*(arg1 + 0x10) >> 0x3f & 7) >> 3;\n                    if (((iVar4 < 4) || (iVar5 = 0x400,  iVar4 < 0x401)) && (iVar5 = iVar4,  iVar4 < 4)) {\n                        iVar5 = 4;\n                    }\n                }\n                iVar4 = arg2;\n                if (arg2 < iVar5 + iVar1) {\n                    iVar4 = iVar5 + iVar1;\n                }\n                if (iVar4 < iVar1) {\n                    fcn.140020780();\n                    pcVar2 = swi(3);\n                    (*pcVar2)();\n                    return;\n                }\n                iVar5 = fcn.140003694(iVar4 << 3);\n                iVar3 = fcn.140069a48(iVar5, iVar4 << 3, *(arg1 + 8), *(arg1 + 0x10) << 3);\n                if (iVar3 != 0) {\n                    if (iVar3 == 0xc) {\n                        fcn.140020738();\n                        pcVar2 = swi(3);\n                        (*pcVar2)();\n                        return;\n                    }\n                    if ((iVar3 == 0x16) || (iVar3 == 0x22)) {\n                        fcn.140020780();\n                        pcVar2 = swi(3);\n                        (*pcVar2)();\n                        return;\n                    }\n                    if (iVar3 != 0x50) {\n                        fcn.140020780();\n                        pcVar2 = swi(3);\n                        (*pcVar2)();\n                        return;\n                    }\n                }\n                fcn.1400698a0(iVar5 + *(arg1 + 0x10) * 8, 0, (arg2 - *(arg1 + 0x10)) * 8);\n                fcn.1400036d8(*(arg1 + 8));\n                *(arg1 + 8) = iVar5;\n                *(arg1 + 0x18) = iVar4;\n            }\n            else {\n                iVar1 = *(arg1 + 0x10);\n                if (iVar1 < arg2) {\n                    fcn.1400698a0(iVar5 + iVar1 * 8, 0, (arg2 - iVar1) * 8);\n                }\n            }\n        }\n        *(arg1 + 0x10) = arg2;\n    }\n    return;\n}\n",
        "token_count": 890
    },
    "14005942": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14005942c(int64_t arg1, int64_t arg2, ulong arg3)\n\n{\n    code *pcVar1;\n    \n    if (arg2 < 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    if (*(arg1 + 0x10) <= arg2) {\n        fcn.1400590fc(arg1, arg2 + 1, 0xffffffffffffffff);\n    }\n    *(*(arg1 + 8) + arg2 * 8) = arg3;\n    return;\n}\n",
        "token_count": 137
    },
    "14005947": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14005947c(int64_t arg1, int64_t arg2, ulong arg3, int64_t arg4)\n\n{\n    int64_t iVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    \n    if ((arg2 < 0) || (arg4 < 1)) {\n        fcn.140020780();\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    if (arg2 < *(arg1 + 0x10)) {\n        iVar1 = *(arg1 + 0x10);\n        fcn.1400590fc(arg1, iVar1 + arg4, 0xffffffffffffffff);\n        iVar3 = fcn.14006a3c0(*(arg1 + 8) + (arg2 + arg4) * 8, ((*(arg1 + 0x10) - arg2) - arg4) * 8, \n                              *(arg1 + 8) + arg2 * 8, (iVar1 - arg2) * 8);\n        if (iVar3 != 0) {\n            if (iVar3 == 0xc) {\n                fcn.140020738();\n                pcVar2 = swi(3);\n                (*pcVar2)();\n                return;\n            }\n            if ((iVar3 == 0x16) || (iVar3 == 0x22)) {\n                fcn.140020780();\n                pcVar2 = swi(3);\n                (*pcVar2)();\n                return;\n            }\n            if (iVar3 != 0x50) {\n                fcn.140020780();\n                pcVar2 = swi(3);\n                (*pcVar2)();\n                return;\n            }\n        }\n        fcn.1400698a0(*(arg1 + 8) + arg2 * 8, 0, arg4 << 3);\n    }\n    else {\n        fcn.1400590fc(arg1, arg2 + arg4, 0xffffffffffffffff);\n    }\n    arg2 = arg2 << 3;\n    do {\n        *(arg2 + *(arg1 + 8)) = arg3;\n        arg2 = arg2 + 8;\n        arg4 = arg4 + -1;\n    } while (arg4 != 0);\n    return;\n}\n",
        "token_count": 501
    },
    "14005983": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140059830(int64_t *arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    uint in_stack_00000028;\n    \n    fcn.140014ae0(0x1000);\n    (**(*arg1 + 0xa8))(arg1, \"ToolbarWindow32\", 0, arg2, arg3, arg4, in_stack_00000028, 0);\n    return;\n}\n",
        "token_count": 97
    },
    "1400599a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400599a8(int64_t *arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    uint in_stack_00000028;\n    \n    fcn.140014ae0(0x1000);\n    (**(*arg1 + 0xa8))(arg1, \"msctls_statusbar32\", 0, arg2, arg3, arg4, in_stack_00000028, 0);\n    return;\n}\n",
        "token_count": 102
    },
    "140059b9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140059b9c(int64_t *arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    uint in_stack_00000028;\n    \n    fcn.140014ae0(0x400);\n    (**(*arg1 + 0xa8))(arg1, \"SysListView32\", 0, arg2, arg3, arg4, in_stack_00000028, 0);\n    return;\n}\n",
        "token_count": 98
    },
    "140059d0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140059d00(int64_t hWnd, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    uint uStack104;\n    uint uStack100;\n    uint uStack96;\n    \n    uStack104 = arg4;\n    uStack100 = arg2;\n    uStack96 = arg3;\n    (*_sym.imp.USER32.dll_SendMessageA)(*(hWnd + 0x40), 0x1006, 0, &uStack104);\n    return;\n}\n",
        "token_count": 109
    },
    "140059ee": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140059ee0(int64_t *arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    uint in_stack_00000028;\n    \n    fcn.140014ae0(0x80);\n    (**(*arg1 + 0xa8))(arg1, \"SysTreeView32\", 0, arg2, arg3, arg4, in_stack_00000028, 0);\n    return;\n}\n",
        "token_count": 97
    },
    "14005a98": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14005a980(int64_t hWnd, uint16_t *arg2, uint16_t *arg3)\n\n{\n    uint16_t uVar1;\n    \n    uVar1 = (*_sym.imp.USER32.dll_SendMessageA)(*(hWnd + 0x40), 0x402, 0, 0);\n    *arg2 = uVar1 & 0xff;\n    *arg3 = uVar1 >> 8;\n    return;\n}\n",
        "token_count": 103
    },
    "14005c48": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14005c484(ulong arg1)\n\n{\n    int64_t iVar1;\n    ulong arg1_00;\n    int64_t arg1_01;\n    ulong uVar2;\n    \n    iVar1 = fcn.140017b90();\n    uVar2 = 0;\n    if ((*(iVar1 + 0x48) == 0) && (arg1 != 0)) {\n        arg1_00 = fcn.140003684(0x140022808);\n        arg1_01 = fcn.140003694(0xb8);\n        if (arg1_01 != 0) {\n            uVar2 = fcn.14002436c(arg1_01, 0x1400aae50, 0x14005b64c, 0x14005adb4);\n        }\n        *(iVar1 + 0x48) = uVar2;\n        fcn.140003684(arg1_00);\n    }\n    return *(iVar1 + 0x48);\n}\n",
        "token_count": 224
    },
    "14005c5f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nbool fcn.14005c5f4(int64_t arg1, int64_t arg2)\n\n{\n    int64_t iVar1;\n    int64_t *piVar2;\n    \n    if (arg2 != 0) {\n        iVar1 = fcn.14005c484(1);\n        *(arg1 + 8) = arg2;\n        piVar2 = fcn.14003a6a4(iVar1 + 0x30, arg2);\n        *piVar2 = arg1;\n    }\n    return arg2 != 0;\n}\n",
        "token_count": 123
    },
    "14005c82": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14005c820(int64_t hWnd, ulong wParam)\n\n{\n    ulong arg1;\n    int64_t iVar1;\n    \n    arg1 = (*_sym.imp.USER32.dll_SendMessageA)(*(hWnd + 0x40), 0x1002, wParam, 0);\n    iVar1 = fcn.14005c5c8(arg1);\n    if (iVar1 != 0) {\n        (*_sym.imp.USER32.dll_SendMessageA)(*(hWnd + 0x40), 0x1003, wParam, 0);\n    }\n    return;\n}\n",
        "token_count": 130
    },
    "14005c91": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14005c914(int64_t hWnd, ulong wParam)\n\n{\n    ulong arg1;\n    int64_t iVar1;\n    \n    arg1 = (*_sym.imp.USER32.dll_SendMessageA)(*(hWnd + 0x40), 0x1108, wParam, 0);\n    iVar1 = fcn.14005c5c8(arg1);\n    if (iVar1 != 0) {\n        (*_sym.imp.USER32.dll_SendMessageA)(*(hWnd + 0x40), 0x1109, wParam, 0);\n    }\n    return;\n}\n",
        "token_count": 130
    },
    "14005d33": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14005d338(code **arg1)\n\n{\n    uchar auStack616 [64];\n    ulong uStack552;\n    uint64_t uStack24;\n    \n    uStack552 = 0xfffffffffffffffe;\n    uStack24 = *0x1400d96f0 ^ auStack616;\n    *arg1 = vtable.CImageList.0;\n    fcn.14005c56c(arg1);\n    fcn.140069870(uStack24 ^ auStack616);\n    return;\n}\n",
        "token_count": 112
    },
    "14005dd9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint64_t fcn.14005dd90(int64_t arg1, int64_t arg2, ulong arg3)\n\n{\n    int64_t iVar1;\n    code *pcVar2;\n    uint64_t uVar3;\n    uint32_t uVar4;\n    int64_t iVar5;\n    \n    iVar1 = *(arg1 + 0x120);\n    uVar3 = 0;\n    iVar5 = 0;\n    if (0 < iVar1) {\n        do {\n            if (uVar3 != arg3) {\n                if ((iVar5 < 0) || (iVar1 <= iVar5)) {\n                    fcn.140020780();\n                    pcVar2 = swi(3);\n                    uVar3 = (*pcVar2)();\n                    return uVar3;\n                }\n                if (*(*(arg1 + 0x118) + iVar5 * 8) == arg2) {\n                    return uVar3;\n                }\n            }\n            uVar4 = uVar3 + 1;\n            uVar3 = uVar4;\n            iVar5 = iVar5 + 1;\n        } while (uVar4 < iVar1);\n    }\n    return 0xffffffff;\n}\n",
        "token_count": 256
    },
    "14005dde": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint64_t fcn.14005dde4(int64_t arg1, ulong arg2)\n\n{\n    code *pcVar1;\n    uint64_t uVar2;\n    int64_t iVar3;\n    \n    iVar3 = arg2;\n    if ((-1 < iVar3) && (iVar3 < *(arg1 + 0x120))) {\n        uVar2 = *(*(arg1 + 0x118) + iVar3 * 8);\n        if (uVar2 < 0x10000) {\n            uVar2 = 0;\n        }\n        return uVar2;\n    }\n    fcn.140020780();\n    pcVar1 = swi(3);\n    uVar2 = (*pcVar1)();\n    return uVar2;\n}\n",
        "token_count": 165
    },
    "14005e22": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.14005e220(int64_t arg1)\n\n{\n    int64_t iVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint64_t arg2;\n    \n    iVar2 = 0;\n    arg2 = 0;\n    if (0 < *(arg1 + 0x120)) {\n        do {\n            iVar1 = fcn.14005dde4(arg1, arg2);\n            if (iVar1 != 0) {\n                iVar2 = iVar2 + 1;\n            }\n            uVar3 = arg2 + 1;\n            arg2 = uVar3;\n        } while (uVar3 < *(arg1 + 0x120));\n    }\n    return iVar2;\n}\n",
        "token_count": 163
    },
    "14006021": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140060218(int64_t arg1, ulong arg2, int64_t *arg3)\n\n{\n    uint uVar1;\n    uint uVar2;\n    uint uVar3;\n    \n    if (arg3 != NULL) {\n        *(arg1 + 8) = arg2;\n        uVar3 = *0x1400b54c4;\n        uVar2 = *0x1400b54c0;\n        uVar1 = *0x1400b54bc;\n        *(arg1 + 0x18) = *0x1400b54b8;\n        *(arg1 + 0x1c) = uVar1;\n        *(arg1 + 0x20) = uVar2;\n        *(arg1 + 0x24) = uVar3;\n        fcn.14003a77c(arg1 + 0x28);\n        fcn.14003a77c(arg1 + 0x10);\n        *(arg1 + 0x10) = arg3;\n        (**(*arg3 + 8))(arg3);\n    }\n    return;\n}\n",
        "token_count": 243
    },
    "14006026": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140060268(int64_t arg1, ulong arg2, uint *noname_2, int64_t *arg4)\n\n{\n    uint uVar1;\n    uint uVar2;\n    uint uVar3;\n    \n    if ((arg4 != NULL) && (*(arg1 + 8) == arg2)) {\n        uVar1 = noname_2[1];\n        uVar2 = noname_2[2];\n        uVar3 = noname_2[3];\n        *(arg1 + 0x18) = *noname_2;\n        *(arg1 + 0x1c) = uVar1;\n        *(arg1 + 0x20) = uVar2;\n        *(arg1 + 0x24) = uVar3;\n        fcn.14003a77c(arg1 + 0x28);\n        *(arg1 + 0x28) = arg4;\n        (**(*arg4 + 8))(arg4);\n    }\n    return;\n}\n",
        "token_count": 221
    },
    "14006048": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140060484(int64_t *arg1, ulong arg2, ulong arg3, ulong *arg4)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    ulong arg1_00;\n    int64_t iVar3;\n    uint64_t arg2_00;\n    uchar auStack424 [32];\n    int64_t *piStack392;\n    int64_t iStack384;\n    uchar auStack376 [8];\n    int32_t iStack368;\n    ulong uStack360;\n    uchar auStack344 [272];\n    uint64_t uStack72;\n    \n    uStack360 = 0xfffffffffffffffe;\n    uStack72 = *0x1400d96f0 ^ auStack424;\n    arg2_00 = arg2;\n    fcn.1400240f0(0xd);\n    arg1_00 = (**(*arg1 + 0x40))(arg1);\n    piStack392 = NULL;\n    iVar2 = fcn.140060420(arg1_00, arg2_00, arg3, arg4);\n    if (iVar2 == 0) {\n        iVar2 = fcn.1400601e4(arg1_00, arg2, &piStack392);\n        if (iVar2 == 0) {\n            iVar2 = (**(*arg1 + 0x48))(arg1, arg2_00, &piStack392);\n            if (iVar2 < 0) {\n                fcn.140017bd0(auStack376, arg1[7]);\n                iVar3 = fcn.140017ad4();\n                (*_sym.imp.KERNEL32.dll_GetModuleFileNameA)(*(iVar3 + 0x10), auStack344, 0x104);\n                fcn.14002010c(&iStack384, auStack344);\n                iVar2 = (*_sym.imp.OLEAUT32.dll_LoadRegTypeLib)(iStack384, &piStack392);\n                if (iVar2 < 0) {\n                    piStack392 = NULL;\n                }\n                LOCK();\n                piVar1 = iStack384 + -8;\n                iVar2 = *piVar1;\n                *piVar1 = *piVar1 + -1;\n                if (iVar2 + -1 < 1) {\n                    (**(**(iStack384 + -0x18) + 8))();\n                }\n                if (iStack368 != 0) {\n                    fcn.14001663c(0);\n                }\n            }\n            fcn.140060218(arg1_00, arg2_00, piStack392);\n        }\n        if (piStack392 != NULL) {\n            (**(*piStack392 + 0x30))(piStack392, arg3, arg4);\n            (**(*piStack392 + 0x10))();\n            fcn.140060268(arg1_00, arg2_00, arg3, *arg4);\n        }\n    }\n    fcn.140024184(0xd);\n    fcn.140069870(uStack72 ^ auStack424);\n    return;\n}\n",
        "token_count": 666
    },
    "14006070": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140060704(code **arg1)\n\n{\n    int64_t *piVar1;\n    \n    *arg1 = vtable.COleControlLock.0;\n    piVar1 = arg1[3];\n    if (piVar1 != NULL) {\n        (**(*piVar1 + 0x20))(piVar1, 0);\n        (**(*arg1[3] + 0x10))();\n        arg1[3] = NULL;\n    }\n    return;\n}\n",
        "token_count": 107
    },
    "14006087": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140060870(ulong arg1)\n\n{\n    ulong *puVar1;\n    ulong *arg2;\n    int32_t iVar2;\n    int64_t iVar3;\n    ulong uVar4;\n    \n    iVar3 = fcn.140017ad4();\n    fcn.1400240f0(0xb);\n    uVar4 = 0;\n    puVar1 = *(iVar3 + 0x70);\n    while (arg2 = puVar1,  arg2 != NULL) {\n        puVar1 = arg2[4];\n        iVar2 = fcn.14006af20(arg1, arg2 + 1, 0x10);\n        if (iVar2 == 0) {\n            fcn.140022df4(iVar3 + 0x70, arg2);\n            (***arg2)(arg2, 1);\n            uVar4 = 1;\n        }\n    }\n    fcn.140024184(0xb);\n    return uVar4;\n}\n",
        "token_count": 219
    },
    "14006091": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00014002418d)\n\nvoid fcn.140060914(void)\n\n{\n    ulong *arg2;\n    int64_t iVar1;\n    \n    iVar1 = fcn.140017ad4();\n    fcn.1400240f0(0xb);\n    while (arg2 = *(iVar1 + 0x70),  arg2 != NULL) {\n        fcn.140022df4(iVar1 + 0x70, arg2);\n        if (arg2 != NULL) {\n            (***arg2)(arg2, 1);\n        }\n    }\n    // WARNING: Could not recover jumptable at 0x0001400241a9. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(0x1400de948);\n    return;\n}\n",
        "token_count": 194
    },
    "14006107": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00014002418d)\n\nvoid fcn.14006107c(void)\n\n{\n    int64_t arg1;\n    \n    arg1 = fcn.140017ad4();\n    fcn.1400240f0(0);\n    while (arg1 = *(arg1 + 0x40),  arg1 != 0) {\n        fcn.140060a18(arg1);\n    }\n    // WARNING: Could not recover jumptable at 0x0001400241a9. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(0x1400de790);\n    return;\n}\n",
        "token_count": 157
    },
    "14006189": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140061894(code **arg1)\n\n{\n    ulong *puVar1;\n    uint32_t uVar2;\n    \n    uVar2 = 0;\n    *arg1 = vtable.CEnumFormatEtc.0;\n    if ((arg1[9] == NULL) && (*(arg1 + 0x5c) != 0)) {\n        puVar1 = arg1[10] + 8;\n        do {\n            (*_sym.imp.ole32.dll_CoTaskMemFree)(*puVar1);\n            uVar2 = uVar2 + 1;\n            puVar1 = puVar1 + 4;\n        } while (uVar2 < *(arg1 + 0x5c));\n    }\n    *arg1 = vtable.CEnumArray.0;\n    if (arg1[9] != NULL) {\n        fcn.14003aa30(arg1[9]);\n    }\n    if (*(arg1 + 0xc) != 0) {\n        fcn.1400036d8(arg1[10]);\n    }\n    if (arg1[4] != NULL) {\n        (**(arg1[4] + 0x38))();\n    }\n    arg1[7] = NULL;\n    return;\n}\n",
        "token_count": 273
    },
    "1400622b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.1400622b4(void)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    ulong uVar4;\n    \n    iVar3 = fcn.140022cd8(0x1400dec58, 0x1400619a8);\n    if (iVar3 == 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        uVar4 = (*pcVar1)();\n        return uVar4;\n    }\n    if (*(iVar3 + 0x10) != 0) {\n        uVar4 = fcn.14003a81c(*(iVar3 + 0x10), 0x1400b62d8);\n        iVar2 = (*_sym.imp.ole32.dll_OleIsCurrentClipboard)(uVar4);\n        if (iVar2 == 0) {\n            return *(iVar3 + 0x10);\n        }\n        *(iVar3 + 0x10) = 0;\n    }\n    return 0;\n}\n",
        "token_count": 230
    },
    "14006234": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140062344(void)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.1400622b4();\n    if (iVar1 != 0) {\n        (*_sym.imp.ole32.dll_OleFlushClipboard)();\n    }\n    return;\n}\n",
        "token_count": 62
    },
    "14006253": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140062538(code **arg1)\n\n{\n    *arg1 = vtable.COleMessageFilter.0;\n    fcn.1400623a0(arg1);\n    if (arg1[4] != NULL) {\n        (**(arg1[4] + 0x38))();\n    }\n    arg1[7] = NULL;\n    return;\n}\n",
        "token_count": 82
    },
    "14006286": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** fcn.140062864(code **arg1)\n\n{\n    fcn.140005f80(arg1);\n    *arg1 = vtable.COleMessageFilter.0;\n    arg1[0xc] = vtable.COleMessageFilter::XMessageFilter.0;\n    *(arg1 + 9) = 1;\n    *(arg1 + 0x4c) = 1;\n    *(arg1 + 0x44) = 0;\n    *(arg1 + 0xb) = 2;\n    *(arg1 + 0x54) = 10000;\n    *(arg1 + 0x5c) = 8000;\n    *(arg1 + 10) = 0;\n    *(arg1 + 8) = 0;\n    return arg1;\n}\n",
        "token_count": 176
    },
    "14006291": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14006291c(int64_t arg1)\n\n{\n    code *pcVar1;\n    \n    if (0x3ffffffd < *(arg1 + 0x50)) {\n        fcn.1400384a8(5, *(arg1 + 0x18));\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    return;\n}\n",
        "token_count": 89
    },
    "14006296": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140062960(int64_t arg1, int64_t arg2, int64_t arg3)\n\n{\n    int64_t iVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    ulong arg1_00;\n    int64_t iVar4;\n    int64_t iVar5;\n    int32_t iVar6;\n    \n    iVar6 = 0;\n    if (arg2 < 0) {\n        fcn.140020780();\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    if (-1 < arg3) {\n        *(arg1 + 0x20) = arg3;\n    }\n    iVar5 = *(arg1 + 8);\n    if (arg2 == 0) {\n        if (iVar5 != 0) {\n            if (0 < *(arg1 + 0x10)) {\n                do {\n                    iVar6 = iVar6 + 1;\n                } while (iVar6 < *(arg1 + 0x10));\n            }\n            fcn.1400036d8(iVar5);\n            *(arg1 + 8) = 0;\n        }\n        *(arg1 + 0x18) = 0;\n        *(arg1 + 0x10) = 0;\n        return;\n    }\n    if (iVar5 == 0) {\n        iVar4 = *(arg1 + 0x20);\n        if (*(arg1 + 0x20) < arg2) {\n            iVar4 = arg2;\n        }\n        arg1_00 = fcn.140003694(iVar4 << 2);\n        *(arg1 + 8) = arg1_00;\n        fcn.1400698a0(arg1_00, 0, iVar4 << 2);\n        if (0 < arg2) {\n            do {\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < arg2);\n        }\n    }\n    else {\n        iVar1 = *(arg1 + 0x18);\n        if (arg2 <= iVar1) {\n            iVar1 = *(arg1 + 0x10);\n            if (iVar1 < arg2) {\n                fcn.1400698a0(iVar5 + iVar1 * 4, 0, (arg2 - iVar1) * 4);\n                if (0 < arg2 - *(arg1 + 0x10)) {\n                    do {\n                        iVar6 = iVar6 + 1;\n                    } while (iVar6 < arg2 - *(arg1 + 0x10));\n                }\n            }\n            else if ((arg2 < iVar1) && (0 < iVar1 - arg2)) {\n                do {\n                    iVar6 = iVar6 + 1;\n                } while (iVar6 < *(arg1 + 0x10) - arg2);\n            }\n            goto code_r0x000140062b6f;\n        }\n        iVar5 = *(arg1 + 0x20);\n        if (iVar5 == 0) {\n            iVar4 = *(arg1 + 0x10) + (*(arg1 + 0x10) >> 0x3f & 7) >> 3;\n            iVar5 = iVar4;\n            if (0x400 < iVar4) {\n                iVar5 = 0x400;\n            }\n            if (iVar4 < 4) {\n                iVar5 = 4;\n            }\n        }\n        iVar4 = arg2;\n        if (arg2 < iVar5 + iVar1) {\n            iVar4 = iVar5 + iVar1;\n        }\n        if (iVar4 < iVar1) {\n            fcn.140020780();\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n        iVar5 = fcn.140003694(iVar4 << 2);\n        iVar3 = fcn.140069a48(iVar5, iVar4 << 2, *(arg1 + 8), *(arg1 + 0x10) << 2);\n        if (iVar3 != 0) {\n            if (iVar3 == 0xc) {\n                fcn.140020738();\n                pcVar2 = swi(3);\n                (*pcVar2)();\n                return;\n            }\n            if ((iVar3 == 0x16) || (iVar3 == 0x22)) {\n                fcn.140020780();\n                pcVar2 = swi(3);\n                (*pcVar2)();\n                return;\n            }\n            if (iVar3 != 0x50) {\n                fcn.140020780();\n                pcVar2 = swi(3);\n                (*pcVar2)();\n                return;\n            }\n        }\n        fcn.1400698a0(iVar5 + *(arg1 + 0x10) * 4, 0, (arg2 - *(arg1 + 0x10)) * 4);\n        if (0 < arg2 - *(arg1 + 0x10)) {\n            do {\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < arg2 - *(arg1 + 0x10));\n        }\n        fcn.1400036d8(*(arg1 + 8));\n        *(arg1 + 8) = iVar5;\n    }\n    *(arg1 + 0x18) = iVar4;\ncode_r0x000140062b6f:\n    *(arg1 + 0x10) = arg2;\n    return;\n}\n",
        "token_count": 1186
    },
    "140062b8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140062b8c(int64_t arg1, int64_t arg2, uint *arg3, int64_t arg4)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    int32_t iVar3;\n    \n    if ((arg2 < 0) || (arg4 < 1)) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    if (arg2 < *(arg1 + 0x10)) {\n        iVar2 = *(arg1 + 0x10);\n        fcn.140062960(arg1, arg4 + iVar2, 0xffffffffffffffff);\n        iVar3 = 0;\n        if (0 < arg4) {\n            do {\n                iVar3 = iVar3 + 1;\n            } while (iVar3 < arg4);\n        }\n        iVar2 = (iVar2 - arg2) * 4;\n        iVar3 = fcn.14006a3c0(*(arg1 + 8) + (arg2 + arg4) * 4, iVar2, *(arg1 + 8) + arg2 * 4, iVar2);\n        if (iVar3 != 0) {\n            if (iVar3 == 0xc) {\n                fcn.140020738();\n                pcVar1 = swi(3);\n                (*pcVar1)();\n                return;\n            }\n            if ((iVar3 == 0x16) || (iVar3 == 0x22)) {\n                fcn.140020780();\n                pcVar1 = swi(3);\n                (*pcVar1)();\n                return;\n            }\n            if (iVar3 != 0x50) {\n                fcn.140020780();\n                pcVar1 = swi(3);\n                (*pcVar1)();\n                return;\n            }\n        }\n        fcn.1400698a0(*(arg1 + 8) + arg2 * 4, 0, arg4 << 2);\n        iVar3 = 0;\n        if (0 < arg4) {\n            do {\n                iVar3 = iVar3 + 1;\n            } while (iVar3 < arg4);\n        }\n    }\n    else {\n        fcn.140062960(arg1, arg2 + arg4, 0xffffffffffffffff);\n    }\n    arg2 = arg2 << 2;\n    do {\n        *(arg2 + *(arg1 + 8)) = *arg3;\n        arg2 = arg2 + 4;\n        arg4 = arg4 + -1;\n    } while (arg4 != 0);\n    return;\n}\n",
        "token_count": 570
    },
    "140062ca": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140062cac(code **arg1)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = 0;\n    *arg1 = vtable.CArray_enum_CArchive::LoadArrayObjType__enum_CArchive::LoadArrayObjType_const____ptr64_.0;\n    if (arg1[1] != NULL) {\n        if (0 < arg1[2]) {\n            do {\n                iVar1 = iVar1 + 1;\n            } while (iVar1 < arg1[2]);\n        }\n        fcn.1400036d8(arg1[1]);\n    }\n    return;\n}\n",
        "token_count": 132
    },
    "140062dd": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140062ddc(int64_t arg1, ulong *arg2)\n\n{\n    code **ppcVar1;\n    int32_t iVar2;\n    int64_t arg1_00;\n    ulong *puVar3;\n    code **ppcStackX24;\n    code **ppcStackX32;\n    \n    arg1_00 = *(arg1 + 0x60);\n    ppcStackX24 = NULL;\n    if (arg1_00 == 0) {\n        ppcStackX32 = fcn.140003694(0x38);\n        if (ppcStackX32 == NULL) {\n            arg1_00 = 0;\n        }\n        else {\n            arg1_00 = fcn.14003a5f0(ppcStackX32, 10);\n        }\n    }\n    iVar2 = fcn.14003a4a4(arg1_00, 1, &ppcStackX24);\n    if (iVar2 == 0) {\n        ppcStackX32 = fcn.140003694(0x28);\n        if (ppcStackX32 == NULL) {\n            ppcStackX32 = NULL;\n        }\n        else {\n            *ppcStackX32 = \n            vtable.CArray_enum_CArchive::LoadArrayObjType__enum_CArchive::LoadArrayObjType_const____ptr64_.0;\n            ppcStackX32[1] = NULL;\n            ppcStackX32[4] = NULL;\n            ppcStackX32[3] = NULL;\n            ppcStackX32[2] = NULL;\n        }\n        ppcVar1 = ppcStackX32;\n        fcn.140062960(ppcStackX32, 1, *(arg1 + 0x68));\n        puVar3 = fcn.14003a6a4(arg1_00, 1);\n        *puVar3 = ppcVar1;\n        ppcStackX24 = ppcVar1;\n    }\n    *(arg1 + 0x60) = arg1_00;\n    if (arg2 != NULL) {\n        *arg2 = ppcStackX24;\n    }\n    return;\n}\n",
        "token_count": 475
    },
    "14006376": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "execute .NET assembly via CLR host/2c9ef85a2fe94af39efaaae3fc9e6a8a"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint64_t * fcn.14006376c(int64_t arg1, int64_t arg2)\n\n{\n    uint uVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    int64_t *piVar4;\n    int64_t iVar5;\n    uint64_t uVar6;\n    ulong uStackX8;\n    uint auStackX24 [2];\n    int64_t iStackX32;\n    \n    if ((*(arg1 + 0x20) & 1) == 0) {\n        fcn.1400384a8(4, *(arg1 + 0x18));\n        pcVar2 = swi(3);\n        piVar4 = (*pcVar2)();\n        return piVar4;\n    }\n    iVar5 = fcn.140063234(arg1, arg2, auStackX24, &uStackX8);\n    if (iVar5 == 0) {\n        uVar6 = uStackX8 & 0xffffffff;\n        if (*(*(arg1 + 0x58) + 0x10) - 1U < uStackX8) {\n            fcn.1400384a8(5, *(arg1 + 0x18));\n            pcVar2 = swi(3);\n            piVar4 = (*pcVar2)();\n            return piVar4;\n        }\n        uStackX8 = 0;\n        iVar3 = fcn.14003a4a4(*(arg1 + 0x60), 1, &uStackX8);\n        if (iVar3 != 0) {\n            if (uStackX8 == 0) {\n                fcn.140020780();\n                pcVar2 = swi(3);\n                piVar4 = (*pcVar2)();\n                return piVar4;\n            }\n            if (uStackX8 <= *(uStackX8 + 0x10) - 1U) {\n                if (*(uStackX8 + 0x10) <= uVar6) {\n                    fcn.140020780();\n                    pcVar2 = swi(3);\n                    piVar4 = (*pcVar2)();\n                    return piVar4;\n                }\n                if (*(*(uStackX8 + 8) + uVar6 * 4) == 1) {\n                    fcn.1400384a8(5, *(arg1 + 0x18));\n                    pcVar2 = swi(3);\n                    piVar4 = (*pcVar2)();\n                    return piVar4;\n                }\n            }\n        }\n        if (uVar6 < *(*(arg1 + 0x58) + 0x10)) {\n            piVar4 = *(*(*(arg1 + 0x58) + 8) + uVar6 * 8);\n            if (piVar4 == NULL) {\n                return NULL;\n            }\n            if (arg2 == 0) {\n                return piVar4;\n            }\n            iVar3 = fcn.140020b84(piVar4, arg2);\n            if (iVar3 != 0) {\n                return piVar4;\n            }\n            fcn.1400384a8(6, *(arg1 + 0x18));\n            pcVar2 = swi(3);\n            piVar4 = (*pcVar2)();\n            return piVar4;\n        }\n        iVar5 = fcn.140020780();\n    }\n    piVar4 = fcn.140020ac8(iVar5);\n    if (piVar4 == NULL) {\n        fcn.140020738();\n    }\n    fcn.14006291c(arg1);\n    fcn.1400674bc(*(arg1 + 0x58), *(arg1 + 0x50), piVar4, 1);\n    iStackX32 = 0;\n    fcn.14003a4a4(*(arg1 + 0x60), 1, &iStackX32);\n    iVar5 = iStackX32;\n    if (iStackX32 == 0) {\n        fcn.140020780();\n    }\n    uStackX8 = CONCAT44(uStackX8._4_4_, 2);\n    fcn.140062b8c(iVar5, *(arg1 + 0x50), &uStackX8, 1);\n    *(arg1 + 0x50) = *(arg1 + 0x50) + 1;\n    uVar1 = *(arg1 + 0x14);\n    *(arg1 + 0x14) = auStackX24[0];\n    (**(*piVar4 + 0x10))(piVar4, arg1);\n    *(arg1 + 0x14) = uVar1;\n    return piVar4;\n}\n",
        "token_count": 1039
    },
    "1400654c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400654c4(int64_t hWnd, ulong wParam, int64_t *arg3)\n\n{\n    int64_t arg1;\n    code *pcVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    \n    uVar2 = (*_sym.imp.USER32.dll_SendMessageA)(*(hWnd + 0x40), 0x18a, wParam, 0);\n    if ((1U - *(*arg3 + -8) | *(*arg3 + -0xc) - uVar2) < 0) {\n        fcn.1400033e0(arg3, uVar2);\n    }\n    if ((uVar2 < 0) || (*(*arg3 + -0xc) < uVar2)) {\n        fcn.1400031e0(0x80070057);\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    *(*arg3 + -0x10) = uVar2;\n    *(uVar2 + *arg3) = 0;\n    (*_sym.imp.USER32.dll_SendMessageA)(*(hWnd + 0x40), 0x189, wParam);\n    arg1 = *arg3;\n    if (arg1 == 0) {\n        iVar3 = 0;\n    }\n    else {\n        iVar3 = fcn.14006b544(arg1, *(arg1 + -0xc));\n        if (iVar3 < 0) goto code_r0x00014006558a;\n    }\n    if (iVar3 <= *(*arg3 + -0xc)) {\n        *(*arg3 + -0x10) = iVar3;\n        *(iVar3 + *arg3) = 0;\n        return;\n    }\ncode_r0x00014006558a:\n    fcn.1400031e0(0x80070057);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 429
    },
    "140065b8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** fcn.140065b8c(code **arg1)\n\n{\n    code *pcVar1;\n    int64_t *piVar2;\n    code **ppcVar3;\n    int64_t iVar4;\n    \n    fcn.14004a8f0(arg1);\n    *arg1 = vtable.CMiniFrameWnd.0;\n    piVar2 = fcn.140017fc0();\n    if (piVar2 == NULL) {\n        fcn.1400031e0(0x80004005);\n        pcVar1 = swi(3);\n        ppcVar3 = (*pcVar1)();\n        return ppcVar3;\n    }\n    iVar4 = (**(*piVar2 + 0x18))(piVar2);\n    arg1[0x34] = iVar4 + 0x18;\n    *(arg1 + 0x33) = 0;\n    return arg1;\n}\n",
        "token_count": 201
    },
    "140065f4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140065f48(int64_t arg1, ulong arg2)\n\n{\n    ulong auStackX24 [2];\n    uint uStack24;\n    uint uStack20;\n    uint uStack16;\n    uint uStack12;\n    \n    if ((arg2 & 0xa000) == 0) {\n        if ((arg2 & 0x5000) == 0) {\n            return 0;\n        }\n        uStack24 = *(arg1 + 0x3c);\n        uStack20 = *(arg1 + 0x40);\n        uStack16 = *(arg1 + 0x44);\n        uStack12 = *(arg1 + 0x48);\n        arg2._0_4_ = arg2 & 0xffff5fff;\n    }\n    else {\n        uStack24 = *(arg1 + 0x2c);\n        uStack20 = *(arg1 + 0x30);\n        uStack16 = *(arg1 + 0x34);\n        uStack12 = *(arg1 + 0x38);\n        arg2._0_4_ = arg2 & 0xffffafff;\n    }\n    fcn.140068ad0(*(arg1 + 0x78), &uStack24, arg2, auStackX24);\n    return auStackX24[0];\n}\n",
        "token_count": 291
    },
    "140065ff": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140065ff8(int32_t *arg1, ulong arg2)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    \n    iVar1 = arg2;\n    if (iVar1 < *arg1) {\n        iVar1 = iVar1 - *arg1;\n    }\n    else if (arg1[2] < iVar1) {\n        iVar1 = iVar1 - arg1[2];\n    }\n    else {\n        iVar1 = 0;\n    }\n    iVar2 = arg2 >> 0x20;\n    if (iVar2 < arg1[1]) {\n        iVar2 = iVar2 - arg1[1];\n    }\n    else if (arg1[3] < iVar2) {\n        iVar2 = iVar2 - arg1[3];\n    }\n    else {\n        iVar2 = 0;\n    }\n    (*_sym.imp.USER32.dll_OffsetRect)(arg1, iVar1, iVar2);\n    return;\n}\n",
        "token_count": 209
    },
    "1400661b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400661bc(int64_t arg1)\n\n{\n    int32_t iVar1;\n    ulong uVar2;\n    int64_t iVar3;\n    uchar auStack56 [48];\n    \n    while( true ) {\n        iVar1 = (*_sym.imp.USER32.dll_PeekMessageA)(auStack56, 0, 0xf, 0xf, 0);\n        if (iVar1 == 0) {\n            *(arg1 + 0x80) = *(*(arg1 + 0x70) + 0xe8);\n            *(arg1 + 0x88) = *(*(arg1 + 0x70) + 0xe4) & 0xf000;\n            (*_sym.imp.USER32.dll_SetRectEmpty)(arg1 + 0x10);\n            *(arg1 + 0x24) = 0;\n            *(arg1 + 0x20) = 0;\n            *(arg1 + 0x28) = 0;\n            *(arg1 + 0x8c) = 0;\n            *(arg1 + 0x90) = 0;\n            uVar2 = (*_sym.imp.USER32.dll_GetDesktopWindow)();\n            iVar3 = fcn.14000fc08(uVar2);\n            iVar1 = (*_sym.imp.USER32.dll_LockWindowUpdate)(*(iVar3 + 0x40));\n            uVar2 = 0x403;\n            if (iVar1 == 0) {\n                uVar2 = 3;\n            }\n            uVar2 = (*_sym.imp.USER32.dll_GetDCEx)(*(iVar3 + 0x40), 0, uVar2);\n            uVar2 = fcn.14001bcd4(uVar2);\n            *(arg1 + 0x98) = uVar2;\n            return;\n        }\n        iVar1 = (*_sym.imp.USER32.dll_GetMessageA)(auStack56);\n        if (iVar1 == 0) break;\n        (*_sym.imp.USER32.dll_DispatchMessageA)(auStack56);\n    }\n    return;\n}\n",
        "token_count": 454
    },
    "14006641": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140066418(int64_t arg1, int32_t *arg2, ulong arg3)\n\n{\n    uint uVar1;\n    uint uVar2;\n    \n    if (*arg2 != arg3) {\n        *arg2 = arg3;\n        uVar1 = 0;\n        if ((((*(arg1 + 0x80) & 0xa000) == 0) || ((*(arg1 + 0x80) & 0x5000) == 0)) || (uVar2 = 1,  *(arg1 + 0x8c) == 0))\n        {\n            uVar2 = uVar1;\n        }\n        *(arg1 + 0x8c) = uVar2;\n        if (*(arg1 + 0x90) == 0) {\n            uVar1 = fcn.140065ddc(arg1);\n        }\n        *(arg1 + 0x84) = uVar1;\n        fcn.1400662a8(arg1, 0);\n    }\n    return;\n}\n",
        "token_count": 231
    },
    "14006647": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid fcn.14006647c(int64_t lprc, ulong dx)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    \n    iVar3 = dx - *(lprc + 8);\n    iVar2 = (dx >> 0x20) - (*(lprc + 8) >> 0x20);\n    (*_sym.imp.USER32.dll_OffsetRect)(lprc + 0x2c, iVar3, iVar2);\n    (*_sym.imp.USER32.dll_OffsetRect)(lprc + 0x4c, iVar3, iVar2);\n    (*_sym.imp.USER32.dll_OffsetRect)(lprc + 0x3c, iVar3, iVar2);\n    (*_sym.imp.USER32.dll_OffsetRect)(lprc + 0x5c, iVar3, iVar2);\n    *(lprc + 8) = dx;\n    uVar1 = 0;\n    if (*(lprc + 0x90) == 0) {\n        uVar1 = fcn.140065ddc(lprc);\n    }\n    *(lprc + 0x84) = uVar1;\n    fcn.1400662a8(lprc, 0);\n    return;\n}\n",
        "token_count": 281
    },
    "14006653": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140066530(int64_t arg1, ulong arg2, uint64_t arg3)\n\n{\n    if (arg2 == 0x11) {\n        fcn.140066418(arg1, arg1 + 0x90, arg3);\n    }\n    if (arg2 == 0x10) {\n        fcn.140066418(arg1, arg1 + 0x8c, arg3 & 0xffffffff);\n    }\n    return;\n}\n",
        "token_count": 104
    },
    "14006675": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140066758(int64_t arg1)\n\n{\n    ulong arg1_00;\n    int64_t iVar1;\n    \n    fcn.1400662a8(arg1, 1);\n    (*_sym.imp.USER32.dll_ReleaseCapture)();\n    arg1_00 = (*_sym.imp.USER32.dll_GetDesktopWindow)();\n    iVar1 = fcn.14000fc08(arg1_00);\n    (*_sym.imp.USER32.dll_LockWindowUpdate)(0);\n    if (*(arg1 + 0x98) != 0) {\n        (*_sym.imp.USER32.dll_ReleaseDC)(*(iVar1 + 0x40), *(*(arg1 + 0x98) + 8));\n        *(arg1 + 0x98) = 0;\n    }\n    return;\n}\n",
        "token_count": 174
    },
    "1400668e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x000140068a00)\n\nvoid fcn.1400668e0(int64_t arg1)\n\n{\n    uint64_t uVar1;\n    int64_t arg2;\n    code *pcVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    ulong uVar5;\n    int64_t *hWnd;\n    int64_t iVar6;\n    uchar auStackX8 [8];\n    \n    fcn.140066758(arg1);\n    (**(**(arg1 + 0x70) + 0x280))(*(arg1 + 0x70), auStackX8, *(arg1 + 0x44) - *(arg1 + 0x3c));\n    uVar4 = *(arg1 + 0x80);\n    uVar1 = *(arg1 + 0x4c);\n    arg2 = *(arg1 + 0x70);\n    uVar5 = *(arg1 + 0x78);\n    if (arg2 == 0) {\n        fcn.140020780();\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    if ((((*(arg2 + 0xf0) == 0) || (iVar6 = *(arg2 + 0xf8),  iVar6 == 0)) || (*(iVar6 + 0x108) == 0)) ||\n       ((iVar3 = fcn.14005e220(iVar6),  iVar3 != 1 || ((*(iVar6 + 0xe4) & 0x2000) == 0)))) {\n        hWnd = fcn.140068660(uVar5, uVar4 & 0x40 | 0x2004);\n        if (hWnd == NULL) {\n            fcn.140020780();\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n        fcn.140015950(hWnd, 0, uVar1 & 0xffffffff, uVar1 >> 0x20);\n        if (hWnd[0xe] == 0) {\n            hWnd[0xe] = *(arg2 + 0x40);\n        }\n        iVar6 = fcn.1400150a4(hWnd, 0xe81f);\n        if (iVar6 == 0) {\n            fcn.140020780();\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n        fcn.14005edc0(iVar6, arg2, 0);\n        (**(*hWnd + 0x2a0))(hWnd, 1);\n        uVar4 = (*_sym.imp.USER32.dll_GetWindowLongA)(*(arg2 + 0x40), 0xfffffff0);\n        if ((uVar4 >> 0x1c & 1) == 0) {\n            return;\n        }\n        fcn.14001546c(hWnd, 8);\n    }\n    else {\n        uVar5 = (*_sym.imp.USER32.dll_GetParent)(*(iVar6 + 0x40));\n        hWnd = fcn.14000fc08(uVar5);\n        if (hWnd == NULL) {\n            fcn.140020780();\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n        fcn.140015950(hWnd, 0, uVar1 & 0xffffffff, uVar1 >> 0x20);\n        (**(*hWnd + 0x2a0))(hWnd, 1);\n    }\n    (*_sym.imp.USER32.dll_UpdateWindow)(hWnd[8]);\n    return;\n}\n",
        "token_count": 802
    },
    "14006706": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14006706c(code **arg1, ulong noname_1, ulong arg3)\n\n{\n    int64_t arg1_00;\n    uchar auStack616 [64];\n    ulong uStack552;\n    uint64_t uStack24;\n    \n    uStack552 = 0xfffffffffffffffe;\n    uStack24 = *0x1400d96f0 ^ auStack616;\n    *arg1 = vtable.CDockContext.0;\n    arg1_00 = *(arg1[0xe] + 0xf8);\n    if (arg1_00 != 0) {\n        fcn.14005e388(arg1_00, arg1[0xe], 0xffffffff, 0);\n    }\n    fcn.140069870(uStack24 ^ auStack616);\n    return;\n}\n",
        "token_count": 178
    },
    "14006713": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14006713c(int64_t arg1, int64_t arg2, int64_t arg3)\n\n{\n    int64_t iVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    ulong arg1_00;\n    int64_t iVar4;\n    int64_t iVar5;\n    \n    if (arg2 < 0) {\n        fcn.140020780();\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    if (-1 < arg3) {\n        *(arg1 + 0x20) = arg3;\n    }\n    iVar5 = *(arg1 + 8);\n    if (arg2 == 0) {\n        fcn.1400036d8(iVar5);\n        *(arg1 + 8) = 0;\n        *(arg1 + 0x18) = 0;\n        *(arg1 + 0x10) = 0;\n    }\n    else {\n        if (iVar5 == 0) {\n            arg1_00 = fcn.140003694(arg2 << 3);\n            *(arg1 + 8) = arg1_00;\n            fcn.1400698a0(arg1_00, 0, arg2 << 3);\n            *(arg1 + 0x18) = arg2;\n        }\n        else {\n            iVar1 = *(arg1 + 0x18);\n            if (iVar1 < arg2) {\n                iVar5 = *(arg1 + 0x20);\n                if (*(arg1 + 0x20) == 0) {\n                    iVar4 = *(arg1 + 0x10) + (*(arg1 + 0x10) >> 0x3f & 7) >> 3;\n                    if (((iVar4 < 4) || (iVar5 = 0x400,  iVar4 < 0x401)) && (iVar5 = iVar4,  iVar4 < 4)) {\n                        iVar5 = 4;\n                    }\n                }\n                iVar4 = arg2;\n                if (arg2 < iVar5 + iVar1) {\n                    iVar4 = iVar5 + iVar1;\n                }\n                if (iVar4 < iVar1) {\n                    fcn.140020780();\n                    pcVar2 = swi(3);\n                    (*pcVar2)();\n                    return;\n                }\n                iVar5 = fcn.140003694(iVar4 << 3);\n                iVar3 = fcn.140069a48(iVar5, iVar4 << 3, *(arg1 + 8), *(arg1 + 0x10) << 3);\n                if (iVar3 != 0) {\n                    if (iVar3 == 0xc) {\n                        fcn.140020738();\n                        pcVar2 = swi(3);\n                        (*pcVar2)();\n                        return;\n                    }\n                    if ((iVar3 == 0x16) || (iVar3 == 0x22)) {\n                        fcn.140020780();\n                        pcVar2 = swi(3);\n                        (*pcVar2)();\n                        return;\n                    }\n                    if (iVar3 != 0x50) {\n                        fcn.140020780();\n                        pcVar2 = swi(3);\n                        (*pcVar2)();\n                        return;\n                    }\n                }\n                fcn.1400698a0(iVar5 + *(arg1 + 0x10) * 8, 0, (arg2 - *(arg1 + 0x10)) * 8);\n                fcn.1400036d8(*(arg1 + 8));\n                *(arg1 + 8) = iVar5;\n                *(arg1 + 0x18) = iVar4;\n            }\n            else {\n                iVar1 = *(arg1 + 0x10);\n                if (iVar1 < arg2) {\n                    fcn.1400698a0(iVar5 + iVar1 * 8, 0, (arg2 - iVar1) * 8);\n                }\n            }\n        }\n        *(arg1 + 0x10) = arg2;\n    }\n    return;\n}\n",
        "token_count": 890
    },
    "14006746": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14006746c(int64_t arg1, int64_t arg2, ulong arg3)\n\n{\n    code *pcVar1;\n    \n    if (arg2 < 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    if (*(arg1 + 0x10) <= arg2) {\n        fcn.14006713c(arg1, arg2 + 1, 0xffffffffffffffff);\n    }\n    *(*(arg1 + 8) + arg2 * 8) = arg3;\n    return;\n}\n",
        "token_count": 137
    },
    "1400674b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400674bc(int64_t arg1, int64_t arg2, ulong arg3, int64_t arg4)\n\n{\n    int64_t iVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    \n    if ((arg2 < 0) || (arg4 < 1)) {\n        fcn.140020780();\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    if (arg2 < *(arg1 + 0x10)) {\n        iVar1 = *(arg1 + 0x10);\n        fcn.14006713c(arg1, iVar1 + arg4, 0xffffffffffffffff);\n        iVar3 = fcn.14006a3c0(*(arg1 + 8) + (arg2 + arg4) * 8, ((*(arg1 + 0x10) - arg2) - arg4) * 8, \n                              *(arg1 + 8) + arg2 * 8, (iVar1 - arg2) * 8);\n        if (iVar3 != 0) {\n            if (iVar3 == 0xc) {\n                fcn.140020738();\n                pcVar2 = swi(3);\n                (*pcVar2)();\n                return;\n            }\n            if ((iVar3 == 0x16) || (iVar3 == 0x22)) {\n                fcn.140020780();\n                pcVar2 = swi(3);\n                (*pcVar2)();\n                return;\n            }\n            if (iVar3 != 0x50) {\n                fcn.140020780();\n                pcVar2 = swi(3);\n                (*pcVar2)();\n                return;\n            }\n        }\n        fcn.1400698a0(*(arg1 + 8) + arg2 * 8, 0, arg4 << 3);\n    }\n    else {\n        fcn.14006713c(arg1, arg2 + arg4, 0xffffffffffffffff);\n    }\n    arg2 = arg2 << 3;\n    do {\n        *(arg2 + *(arg1 + 8)) = arg3;\n        arg2 = arg2 + 8;\n        arg4 = arg4 + -1;\n    } while (arg4 != 0);\n    return;\n}\n",
        "token_count": 501
    },
    "1400675b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400675b8(int64_t arg1, int64_t arg2, int64_t arg3)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    \n    iVar4 = arg3 + arg2;\n    if ((((arg2 < 0) || (arg3 < 0)) || (*(arg1 + 0x10) < iVar4)) || ((iVar4 < arg2 || (iVar4 < arg3)))) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    iVar3 = *(arg1 + 0x10) - iVar4;\n    if (iVar3 != 0) {\n        iVar3 = iVar3 * 8;\n        iVar2 = fcn.14006a3c0(*(arg1 + 8) + arg2 * 8, iVar3, *(arg1 + 8) + iVar4 * 8, iVar3);\n        if (iVar2 != 0) {\n            if (iVar2 == 0xc) {\n                fcn.140020738();\n                pcVar1 = swi(3);\n                (*pcVar1)();\n                return;\n            }\n            if ((iVar2 == 0x16) || (iVar2 == 0x22)) {\n                fcn.140020780();\n                pcVar1 = swi(3);\n                (*pcVar1)();\n                return;\n            }\n            if (iVar2 != 0x50) {\n                fcn.140020780();\n                pcVar1 = swi(3);\n                (*pcVar1)();\n                return;\n            }\n        }\n    }\n    *(arg1 + 0x10) = *(arg1 + 0x10) - arg3;\n    return;\n}\n",
        "token_count": 402
    },
    "14006775": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140067750(int64_t arg1, int64_t arg2)\n\n{\n    code *pcVar1;\n    \n    if (arg2 == 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    *(arg1 + 0x20) = arg2;\n    *(arg1 + 0x10) = 0;\n    return;\n}\n",
        "token_count": 100
    },
    "14006779": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140067798(int64_t arg1, ulong arg2)\n\n{\n    uint uVar1;\n    uint32_t uVar2;\n    \n    uVar1 = 1;\n    if ((((arg2 >> 0x1f & 1) == 0) || ((arg2 & 0x1fff0000) != 0x30000)) || (uVar2 = arg2 & 0xffff,  0xff < uVar2)) {\n        if ((arg2 == 0x80030100) || (((-0x7ffcff00 < arg2 && (-0x7ffcfefb < arg2)) && (arg2 == 0x80030106)))) {\n            uVar1 = 0xb;\n        }\n    }\n    else {\n        uVar1 = fcn.1400465d4(uVar2);\n        arg2._0_4_ = uVar2;\n    }\n    *(arg1 + 0x10) = uVar1;\n    *(arg1 + 0x14) = arg2;\n    return;\n}\n",
        "token_count": 236
    },
    "14006781": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nbool fcn.140067810(int64_t ppstm, int64_t arg2)\n\n{\n    uint32_t uVar1;\n    \n    uVar1 = (*_sym.imp.ole32.dll_CreateStreamOnHGlobal)(0, 1, ppstm + 0x20);\n    if ((uVar1 < 0) && (arg2 != 0)) {\n        fcn.140067798(arg2, uVar1);\n    }\n    return -1 < uVar1;\n}\n",
        "token_count": 107
    },
    "1400681c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** fcn.1400681cc(code **arg1, ulong arg2, ulong arg3)\n\n{\n    fcn.140039d2c(arg1, arg3);\n    arg1[0xb] = NULL;\n    *(arg1 + 10) = arg2;\n    *arg1 = vtable.CSharedFile.0;\n    *(arg1 + 0xc) = 1;\n    return arg1;\n}\n",
        "token_count": 93
    },
    "14006824": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140068248(int64_t arg1, int64_t hMem, ulong arg3)\n\n{\n    code *pcVar1;\n    ulong uVar2;\n    uint32_t uVar3;\n    \n    if (hMem == 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    *(arg1 + 0x58) = hMem;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GlobalLock)(hMem);\n    *(arg1 + 0x40) = uVar2;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GlobalSize)();\n    *(arg1 + 0x60) = arg3;\n    *(arg1 + 0x38) = uVar3;\n    *(arg1 + 0x30) = uVar3;\n    return;\n}\n",
        "token_count": 198
    },
    "14006833": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14006833c(int64_t hMem)\n\n{\n    ulong uVar1;\n    \n    uVar1 = *(hMem + 0x58);\n    (*_sym.imp.KERNEL32.dll_GlobalUnlock)(uVar1);\n    *(hMem + 0x58) = 0;\n    *(hMem + 0x40) = 0;\n    *(hMem + 0x30) = 0;\n    return uVar1;\n}\n",
        "token_count": 102
    },
    "14006847": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** fcn.14006847c(code **arg1, ulong arg2)\n\n{\n    fcn.140008d78(arg1, 0, arg2);\n    *(arg1 + 0x1d) = 0xffffffff;\n    *arg1 = vtable.CCommonDialog.0;\n    return arg1;\n}\n",
        "token_count": 72
    },
    "1400684a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** fcn.1400684ac(code **arg1, code *arg2, ulong arg3, ulong arg4)\n\n{\n    ulong in_stack_00000028;\n    \n    fcn.14006847c(arg1, in_stack_00000028);\n    *arg1 = vtable.COleBusyDialog.0;\n    fcn.1400698a0(arg1 + 0x1e, 0, 0x50);\n    *(arg1 + 0x1e) = 0x50;\n    *(arg1 + 0xf4) = arg4;\n    if (arg3 != 0) {\n        *(arg1 + 0xf4) = arg4 | 8;\n    }\n    arg1[0x26] = arg2;\n    arg1[0x21] = 0x1400683f8;\n    return arg1;\n}\n",
        "token_count": 193
    },
    "14006855": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140068558(int64_t arg1)\n\n{\n    int32_t iVar1;\n    ulong uVar2;\n    uint uVar3;\n    int64_t iStackX8;\n    \n    if (*(arg1 + 0xd0) == 0) {\n        uVar2 = 0;\n    }\n    else {\n        uVar2 = *(*(arg1 + 0xd0) + 0x40);\n    }\n    uVar2 = fcn.1400087f8(uVar2, &iStackX8);\n    *(arg1 + 0xf8) = uVar2;\n    fcn.140012ea4(arg1);\n    iVar1 = sub.oledlg.dll_OleUIBusyA(arg1 + 0xf0);\n    fcn.14000fd24();\n    fcn.14000fcd8(arg1);\n    if (iStackX8 != 0) {\n        (*_sym.imp.USER32.dll_EnableWindow)(iStackX8, 1);\n    }\n    uVar2 = 2;\n    if (iVar1 != 2) {\n        if (iVar1 == 0x75) {\n            *(arg1 + 0x140) = 1;\n        }\n        else if (iVar1 == 0x76) {\n            *(arg1 + 0x140) = 2;\n        }\n        else if (iVar1 == 0x77) {\n            *(arg1 + 0x140) = 3;\n        }\n        else {\n            *(arg1 + 0xe8) = iVar1;\n            uVar3 = 0xffffffff;\n            if (iVar1 == 1) {\n                uVar3 = 1;\n            }\n            *(arg1 + 0x140) = uVar3;\n        }\n        uVar2 = 1;\n    }\n    return uVar2;\n}\n",
        "token_count": 405
    },
    "14006866": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t * fcn.140068660(int64_t arg1, ulong arg2)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int64_t *piVar3;\n    \n    piVar3 = fcn.140020ac8(*(arg1 + 0x168));\n    if (piVar3 == NULL) {\n        fcn.140020738();\n        pcVar1 = swi(3);\n        piVar3 = (*pcVar1)();\n        return piVar3;\n    }\n    iVar2 = (**(*piVar3 + 0x338))(piVar3, arg1, arg2);\n    if (iVar2 == 0) {\n        fcn.14001af14();\n    }\n    return piVar3;\n}\n",
        "token_count": 166
    },
    "1400686b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400686bc(ulong arg1, int64_t arg2, int64_t arg3, int64_t arg4)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    ulong uVar3;\n    int64_t iVar4;\n    uint32_t *puVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    int32_t iVar8;\n    uint64_t uVar9;\n    uint64_t arg3_00;\n    uchar auStack456 [32];\n    int32_t iStack424;\n    int32_t iStack416;\n    uint uStack408;\n    uint32_t uStack392;\n    uint32_t uStack388;\n    int32_t iStack384;\n    int32_t iStack380;\n    int32_t iStack376;\n    int32_t iStack372;\n    uchar auStack368 [24];\n    uint32_t uStack344;\n    uint32_t uStack340;\n    int32_t iStack336;\n    int32_t iStack332;\n    uchar auStack328 [272];\n    uint64_t uStack56;\n    ulong uStack48;\n    \n    if (arg2 == 0) {\n        uStack48 = 0x1400686dc;\n        fcn.140020780();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    if (arg3 == 0) {\n        iVar8 = 0;\n        puVar5 = 0x1400b15d4;\n        do {\n            if ((*puVar5 & 0xf000) == (*(arg2 + 0xe4) & 0xf000)) {\n                uStack48 = 0x14006872e;\n                arg3 = fcn.140048f28(arg1, *(iVar8 * 8 + 0x1400b15d0));\n                if (arg3 != 0) goto code_r0x00014005edc0;\n                break;\n            }\n            puVar5 = puVar5 + 2;\n            iVar8 = iVar8 + 1;\n        } while (puVar5 < 0x1400b15f4);\n        uStack48 = 0x140068738;\n        fcn.140020780();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\ncode_r0x00014005edc0:\n    uStack56 = *0x1400d96f0 ^ &stack0xfffffffffffffe38;\n    if (arg3 == 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    if (arg2 == 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    (*_sym.imp.USER32.dll_GetWindowRect)(*(arg2 + 0x40));\n    if ((*(arg2 + 0xf8) == arg3) &&\n       ((arg4 == 0 || (iVar8 = (*_sym.imp.USER32.dll_EqualRect)(&stack0xfffffffffffffe90),  iVar8 != 0))))\n    goto code_r0x00014005f0c1;\n    if ((*(arg3 + 0x108) != 0) && ((*(arg2 + 0xe8) & 0x40) != 0)) {\n        *(arg3 + 0xe4) = *(arg3 + 0xe4) | 0x40;\n    }\n    *(arg3 + 0xe4) = *(arg3 + 0xe4) & 0xfffffff9;\n    uVar6 = *(arg3 + 0xe4);\n    *(arg3 + 0xe4) = *(arg2 + 0xe4) & 6 | uVar6;\n    if ((uVar6 & 0x40) == 0) {\n        fcn.140015f28(arg2, &stack0xfffffffffffffeb8, 0x104);\n        fcn.1400226d4(*(arg3 + 0x40), &stack0xfffffffffffffeb8);\n    }\n    uVar6 = (*(arg2 + 0xe4) ^ *(arg3 + 0xe4)) & 0xf000 ^ *(arg2 + 0xe4);\n    uVar7 = 1;\n    if (*(arg3 + 0x108) == 0) {\n        uVar6 = uVar6 & 0xfffffffe | 0xf00;\n    }\n    else {\n        uVar6 = uVar6 | 0xf01;\n    }\n    fcn.140056014(arg2, uVar6);\n    uVar6 = 0;\n    if ((*(arg2 + 0xf8) != arg3) &&\n       (iVar8 = (*_sym.imp.USER32.dll_IsWindowVisible)(*(arg2 + 0x40)),  uVar6 = 0,  iVar8 != 0)) {\n        uStack408 = 0x97;\n        iStack416 = 0;\n        iStack424 = 0;\n        fcn.140015950(arg2, 0, 0, 0);\n        uVar6 = uVar7;\n    }\n    arg3_00 = 0xffffffff;\n    if (arg4 == 0) {\n        fcn.14006746c(arg3 + 0x110, *(arg3 + 0x120), arg2);\n        fcn.14006746c(arg3 + 0x110, *(arg3 + 0x120), 0);\n        uStack408 = 0x115;\n        iStack416 = 0;\n        uStack388 = -*0x1400deac4;\n        uStack392 = -*0x1400deac0;\n        iStack424 = 0;\n    }\n    else {\n        (*_sym.imp.USER32.dll_CopyRect)(&stack0xfffffffffffffe78, arg4);\n        fcn.14001b798(arg3, &stack0xfffffffffffffe78);\n        uStack344 = uStack392;\n        uStack340 = uStack388;\n        iStack336 = iStack384;\n        iStack332 = iStack380;\n        iStack376 = (iStack384 - uStack392) / 2 + uStack392;\n        iStack372 = (iStack380 - uStack388) / 2 + uStack388;\n        uVar2 = fcn.14005de1c(arg3, arg2, &stack0xfffffffffffffea8, CONCAT44(iStack372, iStack376));\n        iStack416 = iStack380 - uStack388;\n        uStack408 = 0x114;\n        iStack424 = iStack384 - uStack392;\n        arg3_00 = uVar2;\n    }\n    uVar9 = uStack392;\n    fcn.140015950(arg2, 0, uVar9, uStack388);\n    uVar3 = (*_sym.imp.USER32.dll_GetParent)(*(arg2 + 0x40));\n    iVar4 = fcn.14000fc08(uVar3);\n    if (iVar4 != arg3) {\n        uVar3 = (*_sym.imp.USER32.dll_SetParent)(*(arg2 + 0x40));\n        fcn.14000fc08(uVar3);\n    }\n    iVar4 = *(arg2 + 0xf8);\n    if (iVar4 == arg3) {\n        uVar9 = 0;\ncode_r0x00014005f071:\n        fcn.14005e388(iVar4, arg2, arg3_00, uVar9);\n        uVar9 = arg3_00;\n    }\n    else if (iVar4 != 0) {\n        if ((*(arg3 + 0x108) == 0) || (*(iVar4 + 0x108) != 0)) {\n            uVar7 = 0;\n        }\n        uVar9 = uVar7;\n        arg3_00 = 0xffffffff;\n        goto code_r0x00014005f071;\n    }\n    *(arg2 + 0xf8) = arg3;\n    if (uVar6 != 0) {\n        uStack408 = 0x57;\n        iStack416 = 0;\n        iStack424 = 0;\n        uVar9 = 0;\n        fcn.140015950(arg2, 0, 0, 0);\n    }\n    fcn.14005e2d0(arg3, arg2, uVar9);\n    iVar4 = fcn.140047190(arg3);\n    *(iVar4 + 0x188) = *(iVar4 + 0x188) | 0xc;\ncode_r0x00014005f0c1:\n    fcn.140069870(uStack56 ^ &stack0xfffffffffffffe38);\n    return;\n}\n",
        "token_count": 1956
    },
    "14006a50": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14006a50c(int64_t arg1, ulong arg2)\n\n{\n    uint *puVar1;\n    ulong uVar2;\n    ulong uStack56;\n    uint uStack48;\n    ulong uStack40;\n    uint uStack32;\n    \n    if (arg1 == 0) {\n        puVar1 = fcn.14006abb0();\n        *puVar1 = 0x16;\n        fcn.140070df0(0, 0, 0, 0);\n        uVar2 = 0xffffffff;\n    }\n    else {\n        uStack40 = 0;\n        uStack56 = 0;\n        uStack48 = 0x7fffffff;\n        uStack32 = 0x42;\n        uVar2 = fcn.140072f88(&uStack56, arg1, 0, arg2);\n    }\n    return uVar2;\n}\n",
        "token_count": 199
    },
    "14006a90": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.14006a90c(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.14006a56c(0x140073cf4, arg1, arg2, arg3);\n    if (iVar1 < 0) {\n        iVar1 = -1;\n    }\n    return iVar1;\n}\n",
        "token_count": 92
    },
    "14006d17": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14006d178(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    ulong arg1_00;\n    \n    if (*0x1400df958 == 0) {\n        arg1_00 = 0x1400da440;\n    }\n    else {\n        arg1_00 = 0;\n    }\n    fcn.14006cef4(arg1_00, arg1, arg2, arg3);\n    return;\n}\n",
        "token_count": 101
    },
    "14006cb2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.14006cb20(uint8_t *arg1, uint8_t *arg2)\n\n{\n    uint8_t uVar1;\n    int64_t iVar2;\n    uint *puVar3;\n    uint8_t *puVar4;\n    uint8_t *puVar5;\n    uchar auStack40 [8];\n    int64_t iStack32;\n    int64_t iStack24;\n    char cStack16;\n    \n    fcn.14006b7c8(auStack40, 0);\n    if (*(iStack32 + 8) == 0) {\n        iVar2 = fcn.14007931c(arg1, arg2);\n        if (cStack16 != '\\0') {\n            *(iStack24 + 200) = *(iStack24 + 200) & 0xfffffffd;\n        }\n    }\n    else if ((arg1 == NULL) || (arg2 == NULL)) {\n        puVar3 = fcn.14006abb0();\n        *puVar3 = 0x16;\n        fcn.140070df0(0, 0, 0, 0);\n        if (cStack16 != '\\0') {\n            *(iStack24 + 200) = *(iStack24 + 200) & 0xfffffffd;\n        }\n        iVar2 = 0;\n    }\n    else {\n        uVar1 = *arg1;\n        puVar5 = arg1;\n        while (uVar1 != 0) {\n            uVar1 = *arg2;\n            puVar4 = arg2;\n            while (uVar1 != 0) {\n                uVar1 = *puVar4;\n                if ((*(uVar1 + 0x1d + iStack32) & 4) == 0) {\n                    if (uVar1 == *puVar5) break;\n                }\n                else {\n                    if (((uVar1 == *puVar5) && (puVar4[1] == puVar5[1])) || (puVar4[1] == 0)) break;\n                    puVar4 = puVar4 + 1;\n                }\n                puVar4 = puVar4 + 1;\n                uVar1 = *puVar4;\n            }\n            if ((*puVar4 == 0) || (((*(*puVar5 + 0x1d + iStack32) & 4) != 0 && (puVar5 = puVar5 + 1,  *puVar5 == 0))))\n            break;\n            puVar5 = puVar5 + 1;\n            uVar1 = *puVar5;\n        }\n        iVar2 = puVar5 - arg1;\n        if (cStack16 != '\\0') {\n            *(iStack24 + 200) = *(iStack24 + 200) & 0xfffffffd;\n        }\n    }\n    return iVar2;\n}\n",
        "token_count": 627
    },
    "14006cc4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.14006cc48(uint8_t *arg1, uint8_t *arg2)\n\n{\n    uint8_t uVar1;\n    int64_t iVar2;\n    uint *puVar3;\n    uint8_t *puVar4;\n    uint8_t *puVar5;\n    uchar auStack40 [8];\n    int64_t iStack32;\n    int64_t iStack24;\n    char cStack16;\n    \n    fcn.14006b7c8(auStack40, 0);\n    if (*(iStack32 + 8) == 0) {\n        iVar2 = fcn.1400793d0(arg1, arg2);\n        if (cStack16 != '\\0') {\n            *(iStack24 + 200) = *(iStack24 + 200) & 0xfffffffd;\n        }\n    }\n    else if ((arg1 == NULL) || (arg2 == NULL)) {\n        puVar3 = fcn.14006abb0();\n        *puVar3 = 0x16;\n        fcn.140070df0(0, 0, 0, 0);\n        if (cStack16 != '\\0') {\n            *(iStack24 + 200) = *(iStack24 + 200) & 0xfffffffd;\n        }\n        iVar2 = 0;\n    }\n    else {\n        uVar1 = *arg1;\n        puVar5 = arg1;\n        while (uVar1 != 0) {\n            uVar1 = *arg2;\n            puVar4 = arg2;\n            while (uVar1 != 0) {\n                uVar1 = *puVar4;\n                if ((*(uVar1 + 0x1d + iStack32) & 4) == 0) {\n                    if (uVar1 == *puVar5) break;\n                }\n                else {\n                    if (((uVar1 == *puVar5) && (puVar4[1] == puVar5[1])) || (puVar4[1] == 0)) break;\n                    puVar4 = puVar4 + 1;\n                }\n                puVar4 = puVar4 + 1;\n                uVar1 = *puVar4;\n            }\n            if ((*puVar4 != 0) || (((*(*puVar5 + 0x1d + iStack32) & 4) != 0 && (puVar5 = puVar5 + 1,  *puVar5 == 0))))\n            break;\n            puVar5 = puVar5 + 1;\n            uVar1 = *puVar5;\n        }\n        iVar2 = puVar5 - arg1;\n        if (cStack16 != '\\0') {\n            *(iStack24 + 200) = *(iStack24 + 200) & 0xfffffffd;\n        }\n    }\n    return iVar2;\n}\n",
        "token_count": 628
    },
    "14006e33": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14006e33c(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    fcn.14006e254(0x14007cde4, arg1, arg2, arg3);\n    return;\n}\n",
        "token_count": 58
    },
    "14006e7a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nuint fcn.14006e7a8(int64_t arg1, int64_t arg2, int64_t arg3)\n\n{\n    uint32_t uVar1;\n    int64_t iVar2;\n    uint32_t uVar3;\n    int32_t *piVar4;\n    \n    if (arg1 == 0) {\n        fcn.14007089c();\n    }\n    uVar1 = *(arg1 + 0x14);\n    if (*(arg1 + 0x18) + *(arg2 + 8) == 0) {\n        fcn.14007089c();\n    }\n    uVar3 = 0;\n    if (uVar1 != 0) {\n        iVar2 = *(arg2 + 8);\n        piVar4 = iVar2 + *(arg1 + 0x18);\n        do {\n            if (arg3 < *piVar4 + iVar2) break;\n            uVar3 = uVar3 + 1;\n            piVar4 = piVar4 + 2;\n        } while (uVar3 < uVar1);\n        if (uVar3 != 0) {\n            return *(*(arg1 + 0x18) + (uVar3 - 1) * 8 + 4 + iVar2);\n        }\n    }\n    return 0xffffffff;\n}\n",
        "token_count": 288
    },
    "140071d6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140071d60(void)\n\n{\n    code **ppcVar1;\n    \n    for (ppcVar1 = 0x1400be3b8; ppcVar1 < 0x1400be3b8; ppcVar1 = ppcVar1 + 1) {\n        if (*ppcVar1 != NULL) {\n            (**ppcVar1)();\n        }\n    }\n    return;\n}\n",
        "token_count": 94
    },
    "140078ae": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.140078aec(uchar *arg1, int64_t arg2, ulong arg3, ulong arg4)\n\n{\n    uint uVar1;\n    uint *puVar2;\n    uchar *puStack56;\n    int32_t iStack48;\n    uchar *puStack40;\n    uint uStack32;\n    \n    if ((arg2 == 0) || (arg1 == NULL)) {\n        puVar2 = fcn.14006abb0();\n        *puVar2 = 0x16;\n        fcn.140070df0(0, 0, 0, 0);\n        uVar1 = 0xffffffff;\n    }\n    else {\n        uStack32 = 0x42;\n        iStack48 = 0x7fffffff;\n        puStack56 = arg1;\n        puStack40 = arg1;\n        uVar1 = fcn.140077f24(&puStack56, arg2, arg3, arg4);\n        iStack48 = iStack48 + -1;\n        if (iStack48 < 0) {\n            fcn.140072cb8(0, &puStack56);\n        }\n        else {\n            *puStack56 = 0;\n            puStack56 = puStack56 + 1;\n        }\n        iStack48 = iStack48 + -1;\n        if (iStack48 < 0) {\n            fcn.140072cb8(0, &puStack56);\n        }\n        else {\n            *puStack56 = 0;\n        }\n    }\n    return uVar1;\n}\n",
        "token_count": 340
    },
    "140078b5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140078b50(int64_t arg1, ulong arg2)\n\n{\n    uint *puVar1;\n    ulong uVar2;\n    ulong uStack56;\n    uint uStack48;\n    ulong uStack40;\n    uint uStack32;\n    \n    if (arg1 == 0) {\n        puVar1 = fcn.14006abb0();\n        *puVar1 = 0x16;\n        fcn.140070df0(0, 0, 0, 0);\n        uVar2 = 0xffffffff;\n    }\n    else {\n        uStack40 = 0;\n        uStack56 = 0;\n        uStack48 = 0x7fffffff;\n        uStack32 = 0x42;\n        uVar2 = fcn.140077f24(&uStack56, arg1, 0, arg2);\n    }\n    return uVar2;\n}\n",
        "token_count": 198
    },
    "140078f9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.140078f94(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.140078bb0(0x14008bf2c, arg1, arg2, arg3);\n    if (iVar1 < 0) {\n        iVar1 = -1;\n    }\n    return iVar1;\n}\n",
        "token_count": 91
    },
    "14007aa5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14007aa50(uint *arg1)\n\n{\n    uint *puVar1;\n    ulong uVar2;\n    \n    if (arg1 == NULL) {\n        puVar1 = fcn.14006abb0();\n        *puVar1 = 0x16;\n        fcn.140070df0(0, 0, 0, 0);\n        uVar2 = 0x16;\n    }\n    else {\n        *arg1 = *0x1400da454;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 127
    },
    "14007aa9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14007aa90(uint *arg1)\n\n{\n    uint *puVar1;\n    ulong uVar2;\n    \n    if (arg1 == NULL) {\n        puVar1 = fcn.14006abb0();\n        *puVar1 = 0x16;\n        fcn.140070df0(0, 0, 0, 0);\n        uVar2 = 0x16;\n    }\n    else {\n        *arg1 = *0x1400da458;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 127
    },
    "14007aad": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14007aad0(uint *arg1)\n\n{\n    uint *puVar1;\n    ulong uVar2;\n    \n    if (arg1 == NULL) {\n        puVar1 = fcn.14006abb0();\n        *puVar1 = 0x16;\n        fcn.140070df0(0, 0, 0, 0);\n        uVar2 = 0x16;\n    }\n    else {\n        *arg1 = *0x1400da450;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 127
    },
    "1400853d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** fcn.1400853d8(code **arg1, ulong arg2)\n\n{\n    ulong auStackX16 [3];\n    \n    auStackX16[0] = arg2;\n    fcn.1400851b4(arg1, auStackX16);\n    *arg1 = vtable.std::bad_typeid.0;\n    return arg1;\n}\n",
        "token_count": 81
    },
    "1400967a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.1400967ac(ulong lpCriticalSection)\n\n{\n    (*_sym.imp.KERNEL32.dll_InitializeCriticalSection)();\n    return 0;\n}\n",
        "token_count": 34
    },
    "14009682": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140096824(int64_t *arg1, ulong arg2)\n\n{\n    int64_t arg1_00;\n    code *pcVar1;\n    int32_t iVar2;\n    ulong uVar3;\n    \n    if ((arg2 < 0) || (iVar2 = *(arg1 + 1),  iVar2 <= arg2)) {\n        uVar3 = 0;\n    }\n    else {\n        if (arg2 != iVar2 + -1) {\n            arg1_00 = *arg1 + arg2 * 8;\n            iVar2 = fcn.14006a3c0(arg1_00, iVar2 - arg2 << 3, arg1_00 + 8, (iVar2 - arg2) + -1 << 3);\n            if (iVar2 != 0) {\n                if (iVar2 == 0xc) {\n                    fcn.1400031e0(0x8007000e);\n                    pcVar1 = swi(3);\n                    uVar3 = (*pcVar1)();\n                    return uVar3;\n                }\n                if ((iVar2 == 0x16) || (iVar2 == 0x22)) {\n                    fcn.1400031e0(0x80070057);\n                    pcVar1 = swi(3);\n                    uVar3 = (*pcVar1)();\n                    return uVar3;\n                }\n                if (iVar2 != 0x50) {\n                    fcn.1400031e0(0x80004005);\n                    pcVar1 = swi(3);\n                    uVar3 = (*pcVar1)();\n                    return uVar3;\n                }\n            }\n        }\n        *(arg1 + 1) = *(arg1 + 1) + -1;\n        uVar3 = 1;\n    }\n    return uVar3;\n}\n",
        "token_count": 399
    },
    "140096b2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140096b20(uint64_t *arg1, ulong *arg2)\n\n{\n    int32_t iVar1;\n    ulong *puVar2;\n    code *pcVar3;\n    ulong uVar4;\n    uint64_t uVar5;\n    uint32_t uVar6;\n    \n    iVar1 = *(arg1 + 0xc);\n    if (*(arg1 + 1) == iVar1) {\n        puVar2 = *arg1;\n        if ((puVar2 <= arg2) && (arg2 < puVar2 + iVar1)) {\n            fcn.1400031e0(0x80004005);\n            pcVar3 = swi(3);\n            uVar4 = (*pcVar3)();\n            return uVar4;\n        }\n        if (iVar1 == 0) {\n            uVar6 = 1;\ncode_r0x000140096b74:\n            uVar5 = fcn.1400855ac(puVar2, uVar6, 8);\n            if (uVar5 != 0) {\n                *(arg1 + 0xc) = uVar6;\n                *arg1 = uVar5;\n                goto code_r0x000140096b90;\n            }\n        }\n        else {\n            uVar6 = *(arg1 + 1) * 2;\n            if ((-1 < uVar6) && (uVar6 < 0x10000000)) goto code_r0x000140096b74;\n        }\n        uVar4 = 0;\n    }\n    else {\ncode_r0x000140096b90:\n        puVar2 = *arg1 + *(arg1 + 1) * 8;\n        if (puVar2 != NULL) {\n            *puVar2 = *arg2;\n        }\n        *(arg1 + 1) = *(arg1 + 1) + 1;\n        uVar4 = 1;\n    }\n    return uVar4;\n}\n",
        "token_count": 427
    },
    "140096bc": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint * fcn.140096bc4(uint *arg1)\n\n{\n    int32_t iVar1;\n    \n    fcn.1400698a0(arg1 + 10, 0, 0x28);\n    *(arg1 + 0x14) = 0;\n    arg1[0x16] = 0;\n    arg1[0x17] = 0;\n    *(arg1 + 4) = 0x140000000;\n    *(arg1 + 2) = 0x140000000;\n    *arg1 = 0x60;\n    arg1[6] = 0x900;\n    *(arg1 + 8) = 0x1400b8340;\n    iVar1 = fcn.1400967ac(arg1 + 10);\n    if (iVar1 < 0) {\n        *0x1400db000 = 1;\n    }\n    return arg1;\n}\n",
        "token_count": 204
    },
    "1400696f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.1400696f8(ulong param_1)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.1400695f0(param_1);\n    return (iVar1 != 0) - 1;\n}\n",
        "token_count": 57
    },
    "1400031e": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid fcn.1400031e0(ulong arg1)\n\n{\n    if (arg1 == 0x8007000e) {\n        fcn.140020738();\n    }\n    else {\n        fcn.14001e6c4(arg1);\n    }\n    return;\n}\n",
        "token_count": 63
    },
    "14000d9a": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid fcn.14000d9ac(int64_t *arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    ulong uVar1;\n    int32_t *in_stack_00000028;\n    int64_t in_stack_00000030;\n    uint in_stack_00000038;\n    \n    uVar1 = 0;\n    if (in_stack_00000030 != 0) {\n        uVar1 = *(in_stack_00000030 + 0x40);\n    }\n    (**(*arg1 + 0xb8))(arg1, 0, arg2, arg3, arg4 | 0x40000000, *in_stack_00000028, in_stack_00000028[1], \n                       in_stack_00000028[2] - *in_stack_00000028, in_stack_00000028[3] - in_stack_00000028[1], uVar1, \n                       in_stack_00000038);\n    return;\n}\n",
        "token_count": 217
    },
    "140012f1": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nuint64_t fcn.140012f1c(int64_t *arg1, ulong arg2, ulong arg3, int64_t arg4)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint64_t uVar3;\n    int64_t iVar4;\n    uint32_t in_stack_00000028;\n    uchar auStack88 [8];\n    ulong uStack80;\n    uint32_t uStack40;\n    int64_t iStack32;\n    ulong uStack24;\n    uint32_t uStack16;\n    \n    if (arg4 != 0) {\n        iVar2 = fcn.14003ad1c(arg4);\n        if (iVar2 == 0) {\n            fcn.140020780();\n            pcVar1 = swi(3);\n            uVar3 = (*pcVar1)();\n            return uVar3;\n        }\n    }\n    uStack40 = in_stack_00000028;\n    iStack32 = arg4;\n    uStack24 = arg3;\n    uStack16 = arg2;\n    iVar4 = fcn.140017ad4();\n    uStack80 = *(iVar4 + 0x10);\n    iVar2 = (**(*arg1 + 200))(arg1, auStack88);\n    if (iVar2 == 0) {\n        (**(*arg1 + 0x238))();\n        uVar3 = 0;\n    }\n    else {\n        fcn.140012ea4(arg1);\n        iVar4 = fcn.14000d44c(uStack16, uStack24, iStack32, uStack40);\n        iVar2 = fcn.14000fd24();\n        if (iVar2 == 0) {\n            (**(*arg1 + 0x238))(arg1);\n        }\n        uVar3 = iVar4 != 0;\n    }\n    return uVar3;\n}\n",
        "token_count": 405
    },
    "14001469": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nulong fcn.14001469c(int64_t arg1)\n\n{\n    int16_t iVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int64_t iVar4;\n    int64_t iVar5;\n    ulong uVar6;\n    uint64_t arg3;\n    uchar auStack104 [96];\n    \n    iVar2 = fcn.14000d2f4(*(arg1 + 0x18), *(arg1 + 0x40), auStack104);\n    arg3 = 0;\n    if (iVar2 == 0) {\n        iVar1 = fcn.14000d258(arg1);\n        if (iVar1 == 0) {\n            uVar6 = 0;\n        }\n        else {\n            iVar4 = fcn.140017ad4();\n            if (*(iVar4 + 0x28) != '\\0') {\n                fcn.1400240f0(1);\n                iVar5 = fcn.140017ad4();\n                iVar4 = *(arg1 + 0x40);\n                if (iVar4 != 0) {\n                    uVar3 = fcn.1400699a0(iVar4);\n                    arg3 = uVar3;\n                }\n                fcn.140007ad0(iVar5 + 0x58, iVar4, arg3);\n                fcn.140011bcc(iVar5 + 0x58);\n                fcn.140024184(1);\n            }\n            uVar6 = 1;\n        }\n    }\n    else {\n        uVar6 = 1;\n    }\n    return uVar6;\n}\n",
        "token_count": 348
    },
    "14001669": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid fcn.140016690(int64_t arg1)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    ulong uVar3;\n    uchar auStack648 [32];\n    uint uStack616;\n    uint uStack612;\n    uchar *puStack608;\n    ulong uStack584;\n    ulong uStack568;\n    uchar auStack552 [520];\n    int16_t iStack32;\n    ushort uStack30;\n    uint64_t uStack24;\n    \n    uStack24 = *0x1400d96f0 ^ auStack648;\n    fcn.140016548();\n    uVar3 = *(arg1 + 0x10);\n    uStack30 = 0;\n    iStack32 = 0;\n    iVar1 = (*_sym.imp.KERNEL32.dll_GetModuleFileNameW)(uVar3, auStack552, 0x105);\n    if (iVar1 != 0) {\n        if (iStack32 == 0) {\n            puStack608 = auStack552;\n            uStack616 = 0x38;\n            uStack612 = 0x88;\n            uStack584 = 2;\n            uStack568 = uVar3;\n            if (*0x1400de548 == NULL) {\n                iVar2 = -1;\n            }\n            else {\n                iVar2 = (**0x1400de548)(&uStack616);\n            }\n            *(arg1 + 0xd8) = iVar2;\n            if (iVar2 == -1) {\n                uStack584 = 3;\n                if (*0x1400de548 == NULL) {\n                    uVar3 = 0xffffffffffffffff;\n                }\n                else {\n                    uVar3 = (**0x1400de548)(&uStack616);\n                }\n                *(arg1 + 0xd8) = uVar3;\n            }\n            if (*(arg1 + 0xd8) == -1) {\n                uStack584 = 1;\n                if (*0x1400de548 == NULL) {\n                    iVar2 = -1;\n                }\n                else {\n                    iVar2 = (**0x1400de548)(&uStack616);\n                }\n                *(arg1 + 0xd8) = iVar2;\n                if (iVar2 == -1) {\n                    *(arg1 + 0xd8) = 0;\n                }\n            }\n        }\n        else {\n            (*_sym.imp.KERNEL32.dll_SetLastError)(0x6f);\n        }\n    }\n    fcn.140069870(uStack24 ^ auStack648);\n    return;\n}\n",
        "token_count": 555
    },
    "14001c9e": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nvoid fcn.14001c9e8(int64_t arg1, ulong arg2, ulong arg3)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    ulong uVar3;\n    int64_t iVar4;\n    ulong uVar5;\n    int64_t iVar6;\n    int64_t iVar7;\n    uint64_t uVar8;\n    code *pcStack184;\n    ulong uStack176;\n    ulong uStack168;\n    uint uStack160;\n    uint32_t uStack148;\n    uint32_t uStack144;\n    ushort uStack136;\n    ushort uStack134;\n    code *pcStack120;\n    ulong uStack112;\n    code *pcStack104;\n    ulong uStack96;\n    ulong uStack88;\n    uint uStack80;\n    code *apcStack72 [2];\n    code *apcStack56 [2];\n    ulong uStack40;\n    \n    uStack40 = 0xfffffffffffffffe;\n    pcStack184 = vtable.CDC.0;\n    uStack176 = 0;\n    uStack168 = 0;\n    uStack160 = 0;\n    pcStack104 = vtable.CDC.0;\n    uStack96 = 0;\n    uStack88 = 0;\n    uStack80 = 0;\n    uStack112 = 0;\n    pcStack120 = vtable.CBitmap.0;\n    uVar1 = (*_sym.imp.USER32.dll_GetSysColor)(0x14);\n    fcn.14001c8fc(apcStack72, uVar1);\n    uVar1 = (*_sym.imp.USER32.dll_GetSysColor)(0x10);\n    fcn.14001c8fc(apcStack56, uVar1);\n    uVar3 = (*_sym.imp.GDI32.dll_CreateCompatibleDC)(0);\n    iVar2 = fcn.14001bcf8(&pcStack184, uVar3);\n    if (iVar2 != 0) {\n        uVar3 = (*_sym.imp.GDI32.dll_CreateCompatibleDC)(0);\n        iVar2 = fcn.14001bcf8(&pcStack104, uVar3);\n        if (iVar2 != 0) {\n            (*_sym.imp.GDI32.dll_GetObjectA)(*(arg1 + 8), 0x20);\n            fcn.14001c114(arg2);\n            uVar3 = (*_sym.imp.GDI32.dll_CreateBitmap)(uStack148, uStack144, uStack136, uStack134, 0);\n            iVar2 = fcn.14001c094(arg2, uVar3);\n            if (iVar2 != 0) {\n                uVar8 = 0;\n                uVar3 = (*_sym.imp.GDI32.dll_CreateBitmap)(uStack148, uStack144, 1, 1, 0);\n                iVar2 = fcn.14001c094(&pcStack120, uVar3);\n                if (iVar2 != 0) {\n                    uVar3 = (*_sym.imp.GDI32.dll_SelectObject)(uStack176, *(arg1 + 8));\n                    iVar4 = fcn.14001c070(uVar3);\n                    uVar3 = uStack112;\n                    uVar5 = (*_sym.imp.GDI32.dll_SelectObject)(uStack96);\n                    iVar6 = fcn.14001c070(uVar5);\n                    if ((iVar4 == 0) || (iVar6 == 0)) {\n                        apcStack56[0] = vtable.CBrush.0;\n                        fcn.140019c30(apcStack56);\n                        apcStack72[0] = vtable.CBrush.0;\n                        fcn.140019c30(apcStack72);\n                        pcStack120 = vtable.CBitmap.0;\n                        fcn.140019c30(&pcStack120);\n                        fcn.14001bdb8(&pcStack104, uVar3);\n                        fcn.14001bdb8(&pcStack184, uVar3);\n                        return;\n                    }\n                    uVar1 = (*_sym.imp.GDI32.dll_GetPixel)(uStack176);\n                    uVar1 = fcn.14001a6a4(&pcStack184, uVar1);\n                    uVar8 = uVar8 & 0xffffffff00000000 | uStack144;\n                    (*_sym.imp.GDI32.dll_BitBlt)(uStack96, 0, 0, uStack148, uVar8, uStack176, 0, 0, 0xcc0020);\n                    fcn.14001a6a4(&pcStack184, 0xffffff);\n                    uVar8 = uVar8 & 0xffffffff00000000 | uStack144;\n                    (*_sym.imp.GDI32.dll_BitBlt)(uStack96, 0, 0, uStack148, uVar8, uStack176, 0, 0, 0x1100a6);\n                    uVar3 = (*_sym.imp.GDI32.dll_SelectObject)(uStack176);\n                    iVar7 = fcn.14001c070(uVar3);\n                    if (iVar7 != 0) {\n                        uVar8 = uVar8 & 0xffffffff00000000;\n                        fcn.1400431e0(&pcStack184, 0, 0, uStack148);\n                        fcn.14001a6a4(&pcStack184, 0xffffff);\n                        uVar3 = fcn.14001c308(&pcStack184, apcStack72);\n                        uVar8 = uVar8 & 0xffffffff00000000 | uStack144;\n                        (*_sym.imp.GDI32.dll_BitBlt)(uStack176, 1, 1, uStack148, uVar8, uStack96, 0, 0, 0xe20746);\n                        fcn.14001c308(&pcStack184, apcStack56);\n                        (*_sym.imp.GDI32.dll_BitBlt)\n                                  (uStack176, 0, 0, uStack148, uVar8 & 0xffffffff00000000 | uStack144, uStack96, 0, 0, \n                                   0xe20746);\n                        fcn.14001c308(&pcStack184, uVar3);\n                        fcn.14001a6a4(&pcStack184, uVar1);\n                    }\n                    uVar3 = (*_sym.imp.GDI32.dll_SelectObject)(uStack96, *(iVar6 + 8));\n                    fcn.14001c070(uVar3);\n                    uVar3 = *(iVar4 + 8);\n                    uVar5 = (*_sym.imp.GDI32.dll_SelectObject)(uStack176);\n                    fcn.14001c070(uVar5);\n                }\n            }\n        }\n    }\n    apcStack56[0] = vtable.CBrush.0;\n    fcn.140019c30(apcStack56);\n    apcStack72[0] = vtable.CBrush.0;\n    fcn.140019c30(apcStack72);\n    pcStack120 = vtable.CBitmap.0;\n    fcn.140019c30(&pcStack120);\n    fcn.14001bdb8(&pcStack104, uVar3);\n    fcn.14001bdb8(&pcStack184, uVar3);\n    return;\n}\n",
        "token_count": 1600
    },
    "14001d2b": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid fcn.14001d2b8(int64_t arg1, ulong arg2, uint64_t arg3, uint64_t arg4)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    ulong uVar4;\n    int64_t iVar5;\n    ulong arg1_00;\n    int64_t iVar6;\n    int64_t iVar7;\n    ulong uVar8;\n    uint64_t uVar9;\n    code *pcStack232;\n    ulong uStack224;\n    uchar auStack216 [4];\n    uint uStack212;\n    uint32_t uStack208;\n    ushort uStack200;\n    ushort uStack198;\n    code *pcStack184;\n    ulong uStack176;\n    ulong uStack168;\n    uint uStack160;\n    code *pcStack152;\n    ulong uStack144;\n    ulong uStack136;\n    uint uStack128;\n    code *pcStack120;\n    ulong uStack112;\n    code *pcStack104;\n    ulong uStack96;\n    ulong uStack88;\n    uint uStack80;\n    uint uStack72;\n    uint uStack68;\n    uint uStack64;\n    uint32_t uStack60;\n    ulong uStack56;\n    \n    uStack56 = 0xfffffffffffffffe;\n    pcStack184 = vtable.CDC.0;\n    uVar8 = 0;\n    uStack176 = 0;\n    uStack168 = 0;\n    uStack160 = 0;\n    pcStack104 = vtable.CDC.0;\n    uStack96 = 0;\n    uStack88 = 0;\n    uStack80 = 0;\n    pcStack152 = vtable.CDC.0;\n    uStack144 = 0;\n    uStack136 = 0;\n    uStack128 = 0;\n    uStack224 = 0;\n    pcStack232 = vtable.CBitmap.0;\n    uStack112 = 0;\n    pcStack120 = vtable.CBrush.0;\n    uVar4 = (*_sym.imp.GDI32.dll_CreateCompatibleDC)(0);\n    iVar1 = fcn.14001bcf8(&pcStack184, uVar4);\n    if (iVar1 != 0) {\n        uVar4 = (*_sym.imp.GDI32.dll_CreateCompatibleDC)(0);\n        iVar1 = fcn.14001bcf8(&pcStack104, uVar4);\n        if (iVar1 != 0) {\n            uVar4 = (*_sym.imp.GDI32.dll_CreateCompatibleDC)(0);\n            iVar1 = fcn.14001bcf8(&pcStack152, uVar4);\n            if (iVar1 != 0) {\n                uVar4 = 0x20;\n                iVar1 = (*_sym.imp.GDI32.dll_GetObjectA)(*(arg1 + 8), 0x20, auStack216);\n                if (iVar1 != 0) {\n                    fcn.14001c114(arg2);\n                    uVar4 = (*_sym.imp.GDI32.dll_CreateBitmap)(uStack212, uStack208, uStack200, uStack198, 0);\n                    iVar1 = fcn.14001c094(arg2, uVar4);\n                    if (iVar1 != 0) {\n                        uVar4 = (*_sym.imp.GDI32.dll_CreateBitmap)(8, 8, 1, 1, 0x1400a4908);\n                        fcn.14001c094(&pcStack232, uVar4);\n                        uVar4 = (*_sym.imp.GDI32.dll_CreatePatternBrush)(uStack224);\n                        fcn.14001c094(&pcStack120, uVar4);\n                        fcn.14001c114(&pcStack232);\n                        uVar9 = 0;\n                        uVar4 = (*_sym.imp.GDI32.dll_CreateBitmap)(uStack212, uStack208, 1, 1, 0);\n                        fcn.14001c094(&pcStack232, uVar4);\n                        uVar4 = (*_sym.imp.GDI32.dll_SelectObject)(uStack176, *(arg1 + 8));\n                        iVar5 = fcn.14001c070(uVar4);\n                        uVar4 = uStack224;\n                        arg1_00 = (*_sym.imp.GDI32.dll_SelectObject)(uStack96);\n                        iVar6 = fcn.14001c070(arg1_00);\n                        if ((iVar5 == 0) || (iVar6 == 0)) {\n                            pcStack120 = vtable.CBrush.0;\n                            fcn.140019c30(&pcStack120);\n                            pcStack232 = vtable.CBitmap.0;\n                            fcn.140019c30(&pcStack232);\n                            fcn.14001bdb8(&pcStack152, uVar4);\n                            fcn.14001bdb8(&pcStack104, uVar4);\n                            fcn.14001bdb8(&pcStack184, uVar4);\n                            return;\n                        }\n                        uVar2 = (*_sym.imp.GDI32.dll_GetPixel)(uStack176, 0, 0);\n                        uVar2 = fcn.14001a6a4(&pcStack184, uVar2);\n                        uVar9 = uVar9 & 0xffffffff00000000 | uStack208;\n                        (*_sym.imp.GDI32.dll_BitBlt)(uStack96, 0, 0, uStack212, uVar9, uStack176, 0, 0, 0xcc0020);\n                        fcn.14001a6a4(&pcStack184, 0xffffff);\n                        uVar9 = uVar9 & 0xffffffff00000000 | uStack208;\n                        (*_sym.imp.GDI32.dll_BitBlt)(uStack96, 0, 0, uStack212, uVar9, uStack176, 0, 0, 0xee0086);\n                        fcn.14001a6a4(&pcStack184, uVar2);\n                        uVar4 = (*_sym.imp.GDI32.dll_SelectObject)(uStack144);\n                        iVar7 = fcn.14001c070(uVar4);\n                        if (iVar7 != 0) {\n                            uVar2 = fcn.14001a7e4(&pcStack152, arg3 & 0xffffffff);\n                            uVar3 = fcn.14001a6a4(&pcStack152, arg4 & 0xffffffff);\n                            uStack72 = 0;\n                            uStack68 = 0;\n                            uStack64 = uStack212;\n                            uStack60 = uStack208;\n                            (*_sym.imp.USER32.dll_FillRect)(uStack144, &uStack72, uStack112);\n                            fcn.14001a7e4(&pcStack152, uVar2);\n                            fcn.14001a6a4(&pcStack152, uVar3);\n                            uVar9 = uVar9 & 0xffffffff00000000 | uStack208;\n                            (*_sym.imp.GDI32.dll_BitBlt)(uStack144, 0, 0, uStack212, uVar9, uStack176, 0, 0, 0x660046);\n                            uVar9 = uVar9 & 0xffffffff00000000 | uStack208;\n                            (*_sym.imp.GDI32.dll_BitBlt)(uStack144, 0, 0, uStack212, uVar9, uStack96, 0, 0, 0x8800c6);\n                            (*_sym.imp.GDI32.dll_BitBlt)\n                                      (uStack144, 0, 0, uStack212, uVar9 & 0xffffffff00000000 | uStack208, uStack176, 0\n                                       , 0, 0x660046);\n                            uVar8 = *(iVar7 + 8);\n                        }\n                        uVar8 = (*_sym.imp.GDI32.dll_SelectObject)(uStack144, uVar8);\n                        fcn.14001c070(uVar8);\n                        uVar8 = (*_sym.imp.GDI32.dll_SelectObject)(uStack96, *(iVar6 + 8));\n                        fcn.14001c070(uVar8);\n                        uVar4 = *(iVar5 + 8);\n                        uVar8 = (*_sym.imp.GDI32.dll_SelectObject)(uStack176);\n                        fcn.14001c070(uVar8);\n                    }\n                }\n            }\n        }\n    }\n    pcStack120 = vtable.CBrush.0;\n    fcn.140019c30(&pcStack120);\n    pcStack232 = vtable.CBitmap.0;\n    fcn.140019c30(&pcStack232);\n    fcn.14001bdb8(&pcStack152, uVar4);\n    fcn.14001bdb8(&pcStack104, uVar4);\n    fcn.14001bdb8(&pcStack184, uVar4);\n    return;\n}\n",
        "token_count": 1956
    },
    "14002a2d": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid fcn.14002a2d4(ulong arg1)\n\n{\n    uint16_t uVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    ulong uVar4;\n    uint16_t in_DX;\n    char *arg2;\n    ulong in_R9;\n    uchar auStack136 [32];\n    int32_t iStack104;\n    char acStack76 [36];\n    uint64_t uStack40;\n    \n    uStack40 = *0x1400d96f0 ^ auStack136;\n    uVar1 = 10;\n    arg2 = \"System\";\n    iVar3 = (*_sym.imp.GDI32.dll_GetStockObject)(0x11);\n    if (iVar3 == 0) {\n        iVar3 = (*_sym.imp.GDI32.dll_GetStockObject)(0xd);\n        if (iVar3 == 0) goto code_r0x00014002a391;\n    }\n    iVar2 = (*_sym.imp.GDI32.dll_GetObjectA)(iVar3, 0x3c);\n    if (iVar2 != 0) {\n        arg2 = acStack76;\n        uVar4 = (*_sym.imp.USER32.dll_GetDC)();\n        if (iStack104 < 0) {\n            iStack104 = -iStack104;\n        }\n        (*_sym.imp.GDI32.dll_GetDeviceCaps)(uVar4, 0x5a);\n        uVar1 = (*_sym.imp.KERNEL32.dll_MulDiv)(iStack104, 0x48);\n        (*_sym.imp.USER32.dll_ReleaseDC)(0, uVar4);\n    }\ncode_r0x00014002a391:\n    if (in_DX == 0) {\n        in_DX = uVar1;\n    }\n    fcn.14002a0d4(arg1, arg2, in_DX, in_R9);\n    fcn.140069870(uStack40 ^ auStack136);\n    return;\n}\n",
        "token_count": 423
    },
    "14002950": {
        "rules": [
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff"
        ],
        "decompiled_code": "\nvoid fcn.140029500(ulong arg1, uint32_t *arg2)\n\n{\n    uchar auStack424 [32];\n    uint32_t uStack392;\n    uint32_t uStack384;\n    uint32_t uStack376;\n    uint32_t uStack368;\n    uint32_t uStack360;\n    uint32_t uStack352;\n    uint32_t uStack344;\n    uint32_t uStack336;\n    uint32_t uStack328;\n    uint32_t uStack320;\n    uint uStack312;\n    uchar auStack296 [256];\n    uint64_t uStack40;\n    \n    uStack40 = *0x1400d96f0 ^ auStack424;\n    uStack312 = 0;\n    uStack320 = *(arg2 + 0xf);\n    uStack328 = *(arg2 + 0xe);\n    uStack336 = *(arg2 + 0xd);\n    uStack344 = *(arg2 + 3);\n    uStack352 = *(arg2 + 0xb);\n    uStack360 = *(arg2 + 10);\n    uStack368 = *(arg2 + 9);\n    uStack376 = *(arg2 + 2);\n    uStack384 = *(arg2 + 6);\n    uStack392 = *(arg2 + 1);\n    fcn.14006aa00(auStack296, 0x100, \"{%08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X}\", *arg2);\n    fcn.1400057dc(arg1, auStack296);\n    fcn.140069870(uStack40 ^ auStack424);\n    return;\n}\n",
        "token_count": 374
    },
    "14004055": {
        "rules": [
            "execute .NET assembly via CLR host/2c9ef85a2fe94af39efaaae3fc9e6a8a"
        ],
        "decompiled_code": "\nuint32_t fcn.14004055c(int64_t *arg1, int64_t hgdiobj)\n\n{\n    int64_t *arg1_00;\n    uint32_t uVar1;\n    int64_t iVar2;\n    ulong uStack104;\n    int64_t iStack96;\n    uchar auStack88 [4];\n    int32_t iStack84;\n    ulong uStack56;\n    int64_t iStack48;\n    ulong uStack40;\n    int64_t iStack32;\n    int32_t iStack24;\n    \n    (*_sym.imp.GDI32.dll_GetObjectA)(hgdiobj, 0x20, auStack88);\n    arg1_00 = arg1 + 0x23;\n    if (*arg1_00 == 0) {\n        uStack104 = 0;\n        iStack96 = hgdiobj;\n        iVar2 = (**(*arg1 + 0x230))(arg1, 0x413, iStack84 / *(arg1 + 0x124), &uStack104);\n        uVar1 = iVar2 == 0;\n    }\n    else {\n        uStack56 = 0;\n        uStack40 = 0;\n        iStack24 = iStack84 / *(arg1 + 0x124);\n        iStack48 = *arg1_00;\n        iStack32 = hgdiobj;\n        uVar1 = (**(*arg1 + 0x230))(arg1, 0x42e, 0, &uStack56);\n    }\n    if (uVar1 != 0) {\n        fcn.140022798(arg1_00);\n        *arg1_00 = hgdiobj;\n    }\n    return uVar1;\n}\n",
        "token_count": 374
    },
    "14000a72": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.14000a728(code **arg1)\n\n{\n    ulong *puVar1;\n    \n    *arg1 = vtable.CList_class_IControlSiteFactory____ptr64__class_IControlSiteFactory____ptr64_.0;\n    for (puVar1 = arg1[1]; puVar1 != NULL; puVar1 = *puVar1) {\n    }\n    arg1[3] = NULL;\n    arg1[4] = NULL;\n    arg1[2] = NULL;\n    arg1[1] = NULL;\n    fcn.14002aadc(arg1[5]);\n    arg1[5] = NULL;\n    return;\n}\n",
        "token_count": 144
    },
    "14003a42": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nulong * fcn.14003a424(int64_t arg1, uint64_t arg2, uint *arg3, uint *arg4)\n\n{\n    uint64_t uVar1;\n    ulong *puVar2;\n    \n    *arg4 = arg2 >> 4;\n    uVar1 = (arg2 >> 4 & 0xffffffff) % *(arg1 + 0x10);\n    *arg3 = uVar1;\n    if (*(arg1 + 8) != 0) {\n        for (puVar2 = *(*(arg1 + 8) + uVar1 * 8); puVar2 != NULL; puVar2 = *puVar2) {\n            if (puVar2[1] == arg2) {\n                return puVar2;\n            }\n        }\n    }\n    return NULL;\n}\n",
        "token_count": 179
    },
    "14003ae8": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.14003ae80(int64_t arg1, int64_t arg2, ulong *arg3)\n\n{\n    if (arg3 == NULL) {\n        arg3 = *(arg1 + 8);\n    }\n    else {\n        arg3 = *arg3;\n    }\n    for (; (arg3 != NULL && (arg3[2] != arg2)); arg3 = *arg3) {\n    }\n    return;\n}\n",
        "token_count": 95
    },
    "14003ba3": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x0001400698c0)\n// WARNING: Removing unreachable block (ram,0x0001400698c8)\n// WARNING: Removing unreachable block (ram,0x0001400698ce)\n// WARNING: Removing unreachable block (ram,0x000140069917)\n// WARNING: Removing unreachable block (ram,0x000140069950)\n// WARNING: Removing unreachable block (ram,0x000140069980)\n// WARNING: Removing unreachable block (ram,0x000140069920)\n// WARNING: Removing unreachable block (ram,0x000140069948)\n// WARNING: Removing unreachable block (ram,0x000140069901)\n\nvoid fcn.14003ba3c(ulong *arg1)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = 3;\n    do {\n        *arg1 = 0;\n        arg1 = arg1 + 1;\n        iVar1 = iVar1 + -1;\n    } while (iVar1 != 0);\n    return;\n}\n",
        "token_count": 226
    },
    "14004992": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.14004992c(code **arg1)\n\n{\n    ulong *puVar1;\n    \n    *arg1 = vtable.CList_struct_HWND______ptr64__struct_HWND______ptr64_.0;\n    for (puVar1 = arg1[1]; puVar1 != NULL; puVar1 = *puVar1) {\n    }\n    arg1[3] = NULL;\n    arg1[4] = NULL;\n    arg1[2] = NULL;\n    arg1[1] = NULL;\n    fcn.14002aadc(arg1[5]);\n    arg1[5] = NULL;\n    return;\n}\n",
        "token_count": 142
    },
    "140057f9": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.140057f9c(code **arg1)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    code *pcVar4;\n    int64_t iVar5;\n    uint32_t uVar6;\n    ulong *puVar7;\n    \n    *arg1 = vtable.CMapStringToPtr.0;\n    if (arg1[1] != NULL) {\n        uVar6 = 0;\n        if (*(arg1 + 2) != 0) {\n            iVar5 = 0;\n            do {\n                for (puVar7 = *(arg1[1] + iVar5); puVar7 != NULL; puVar7 = *puVar7) {\n                    if (puVar7 + 2 == NULL) {\n                        fcn.140020780();\n                        pcVar4 = swi(3);\n                        (*pcVar4)();\n                        return;\n                    }\n                    iVar3 = puVar7[2];\n                    LOCK();\n                    piVar1 = iVar3 + -8;\n                    iVar2 = *piVar1;\n                    *piVar1 = *piVar1 + -1;\n                    if (iVar2 + -1 < 1) {\n                        (**(**(iVar3 + -0x18) + 8))();\n                    }\n                }\n                uVar6 = uVar6 + 1;\n                iVar5 = iVar5 + 8;\n            } while (uVar6 < *(arg1 + 2));\n        }\n        fcn.1400036d8(arg1[1]);\n        arg1[1] = NULL;\n    }\n    arg1[3] = NULL;\n    arg1[4] = NULL;\n    fcn.14002aadc(arg1[5]);\n    arg1[5] = NULL;\n    return;\n}\n",
        "token_count": 392
    },
    "14006a2b": {
        "rules": [
            "contain loop",
            "terminate process"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00014006a25d)\n// WARNING: Removing unreachable block (ram,0x00014006a175)\n// WARNING: Removing unreachable block (ram,0x00014006a192)\n// WARNING: Removing unreachable block (ram,0x00014006a1b6)\n// WARNING: Removing unreachable block (ram,0x00014006a1c4)\n// WARNING: Removing unreachable block (ram,0x00014006a1ce)\n// WARNING: Removing unreachable block (ram,0x00014006a1d0)\n// WARNING: Removing unreachable block (ram,0x00014006a1d5)\n// WARNING: Removing unreachable block (ram,0x00014006a20a)\n// WARNING: Removing unreachable block (ram,0x00014006a20f)\n// WARNING: Removing unreachable block (ram,0x00014006a22f)\n// WARNING: Removing unreachable block (ram,0x00014006a231)\n// WARNING: Removing unreachable block (ram,0x00014006a292)\n\nvoid fcn.14006a2b8(ulong arg1)\n\n{\n    code *pcVar1;\n    \n    fcn.1400721c8(8);\n    if (*0x1400decc8 != 1) {\n        *0x1400decc4 = 1;\n        *0x1400decc0 = 0;\n        fcn.140069f70(0x1400a0288, 0x1400a0290);\n    }\n    *0x1400decc8 = 1;\n    fcn.1400720a8(8);\n    fcn.140069f04(arg1);\n    (*_sym.imp.KERNEL32.dll_ExitProcess)(arg1);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 412
    },
    "14006e83": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nuint fcn.14006e834(int64_t arg1, int64_t *arg2)\n\n{\n    uint32_t uVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    uint32_t uVar4;\n    int32_t *piVar5;\n    \n    iVar3 = *arg2;\n    if (arg1 == 0) {\n        fcn.14007089c();\n    }\n    uVar1 = *(arg1 + 0x14);\n    if (*(arg1 + 0x18) + arg2[1] == 0) {\n        fcn.14007089c();\n    }\n    uVar4 = 0;\n    if (uVar1 != 0) {\n        iVar2 = arg2[1];\n        piVar5 = iVar2 + *(arg1 + 0x18);\n        do {\n            if (iVar3 < *piVar5 + iVar2) break;\n            uVar4 = uVar4 + 1;\n            piVar5 = piVar5 + 2;\n        } while (uVar4 < uVar1);\n        if (uVar4 != 0) {\n            return *(*(arg1 + 0x18) + (uVar4 - 1) * 8 + 4 + iVar2);\n        }\n    }\n    return 0xffffffff;\n}\n",
        "token_count": 292
    },
    "14008fc9": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00014008fbe6)\n// WARNING: Removing unreachable block (ram,0x00014008fbeb)\n// WARNING: Removing unreachable block (ram,0x00014008fbf1)\n// WARNING: Removing unreachable block (ram,0x00014008fbf9)\n// WARNING: Removing unreachable block (ram,0x00014008fbfd)\n\nint32_t fcn.14008fc90(void)\n\n{\n    int64_t iVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    int64_t iVar5;\n    \n    iVar4 = 0;\n    fcn.1400721c8(1);\n    for (uVar3 = 0; uVar3 < *0x1400e0c00; uVar3 = uVar3 + 1) {\n        iVar5 = uVar3;\n        if ((*(*0x1400dfbf8 + iVar5 * 8) != 0) && (iVar1 = *(*0x1400dfbf8 + iVar5 * 8),  (*(iVar1 + 0x18) & 0x83) != 0))\n        {\n            fcn.14008735c(uVar3, iVar1);\n            iVar1 = *(*0x1400dfbf8 + iVar5 * 8);\n            if (((*(iVar1 + 0x18) & 0x83) != 0) && (iVar2 = fcn.14008fb10(iVar1),  iVar2 != -1)) {\n                iVar4 = iVar4 + 1;\n            }\n            fcn.1400873e4(uVar3, *(*0x1400dfbf8 + iVar5 * 8));\n        }\n    }\n    fcn.1400720a8(1);\n    return iVar4;\n}\n",
        "token_count": 407
    },
    "1400226d": {
        "rules": [
            "get graphical window text"
        ],
        "decompiled_code": "\nvoid fcn.1400226d4(int64_t arg1, int64_t lpString)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uchar auStack312 [32];\n    uchar uStack280;\n    uchar auStack279 [255];\n    uint64_t uStack24;\n    \n    uStack24 = *0x1400d96f0 ^ auStack312;\n    if (arg1 == 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    if (lpString == 0) {\n        fcn.140020780();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    uVar2 = (*_sym.imp.KERNEL32.dll_lstrlenA)(lpString);\n    uStack280 = 0;\n    fcn.1400698a0(auStack279, 0, 0xff);\n    if (uVar2 < 0x101) {\n        uVar3 = (*_sym.imp.USER32.dll_GetWindowTextA)(arg1, &uStack280);\n        if (uVar3 == uVar2) {\n            iVar4 = (*_sym.imp.KERNEL32.dll_lstrcmpA)(&uStack280, lpString);\n            if (iVar4 == 0) goto code_r0x000140022771;\n        }\n    }\n    (*_sym.imp.USER32.dll_SetWindowTextA)(arg1, lpString);\ncode_r0x000140022771:\n    fcn.140069870(uStack24 ^ auStack312);\n    return;\n}\n",
        "token_count": 372
    }
}