{
    "null": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "01003101": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl\nfcn.01003101(int32_t *arg_8h, int32_t arg_ch, uint arg_10h, uint arg_14h, uint32_t *arg_18h, uint arg_1ch, \n            int32_t arg_20h, int32_t arg_24h)\n\n{\n    code *pcVar1;\n    uint32_t *puVar2;\n    char cVar3;\n    int32_t iVar4;\n    uint arg_8h_00;\n    int32_t iVar5;\n    uint *puVar6;\n    uint *puVar7;\n    int32_t *piVar8;\n    int32_t var_68h;\n    int32_t var_64h;\n    int32_t var_5ch;\n    uint *var_58h;\n    uint var_54h;\n    uint uStack84;\n    uint uStack80;\n    uint uStack76;\n    int32_t *var_44h;\n    uint32_t *var_40h;\n    uint32_t *var_38h;\n    uint32_t *var_34h;\n    uint var_30h;\n    int32_t *var_2ch;\n    int32_t var_28h;\n    int32_t *var_24h;\n    int32_t var_20h;\n    uint32_t var_1ch;\n    uint *var_18h;\n    int32_t var_14h;\n    uint32_t *var_10h;\n    int32_t var_ch;\n    uint var_8h;\n    uint var_1h;\n    \n    var_1ch = var_1ch & 0xffffff00;\n    var_1h._0_1_ = '\\0';\n    var_ch = fcn.010040a4(arg_ch, arg_14h, arg_18h);\n    if ((var_ch < -1) || (arg_18h[1] <= var_ch)) goto code_r0x010034b1;\n    if (((*arg_8h != -0x1f928c9d) || (arg_8h[4] != 3)) ||\n       ((((arg_8h[5] != 0x19930520 && (arg_8h[5] != 0x19930521)) && (arg_8h[5] != 0x19930522)) ||\n        (iVar5 = 0,  arg_8h[7] != 0)))) {\n        var_8h = arg_10h;\n        goto code_r0x01003254;\n    }\n    iVar4 = fcn.01002dbc();\n    if (*(iVar4 + 0x10) == 0) {\n        return;\n    }\n    iVar4 = fcn.01002dbc();\n    arg_8h = *(iVar4 + 0x10);\n    iVar4 = fcn.01002dbc();\n    var_1ch = CONCAT31(var_1ch._1_3_, 1);\n    var_8h = *(iVar4 + 0x14);\n    if ((arg_8h == NULL) ||\n       ((((*arg_8h == -0x1f928c9d && (arg_8h[4] == 3)) &&\n         ((arg_8h[5] == 0x19930520 || ((arg_8h[5] == 0x19930521 || (arg_8h[5] == 0x19930522)))))) && (arg_8h[7] == 0))))\n    goto code_r0x010034b1;\n    iVar4 = fcn.01002dbc();\n    if (*(iVar4 + 0x1c) == 0) {\ncode_r0x01003254:\n        var_34h = arg_18h;\n        var_30h = 0;\n        if (((*arg_8h == -0x1f928c9d) && (arg_8h[4] == 3)) &&\n           ((arg_8h[5] == 0x19930520 || ((arg_8h[5] == 0x19930521 || (arg_8h[5] == 0x19930522)))))) {\n            if (arg_18h[3] != 0) {\n                fcn.0100236b(&var_44h, &var_34h, var_ch, arg_14h, arg_18h, arg_20h);\n                var_2ch = var_44h;\n                var_10h = var_40h;\n                if (var_40h < var_38h) {\n                    var_20h = var_40h * 0x14;\n                    do {\n                        iVar5 = var_ch;\n                        puVar6 = *(*var_2ch + 0x10) + var_20h;\n                        puVar7 = &var_68h;\n                        var_10h = var_40h;\n                        for (iVar4 = 5; iVar4 != 0; iVar4 = iVar4 + -1) {\n                            *puVar7 = *puVar6;\n                            puVar6 = puVar6 + 1;\n                            puVar7 = puVar7 + 1;\n                        }\n                        if (((var_68h <= iVar5) && (iVar5 <= var_64h)) && (var_14h = 0,  var_5ch != 0)) {\n                            iVar5 = **(arg_8h[7] + 0xc);\n                            var_24h = *(arg_8h[7] + 0xc) + 1;\n                            var_18h = var_58h;\n                            var_28h = iVar5;\n                            do {\n                                var_54h = *var_18h;\n                                uStack84 = var_18h[1];\n                                uStack80 = var_18h[2];\n                                uStack76 = var_18h[3];\n                                iVar4 = iVar5;\n                                piVar8 = var_24h;\n                                var_40h = var_10h;\n                                for (; var_10h = var_40h,  0 < iVar4; iVar4 = iVar4 + -1) {\n                                    iVar5 = fcn.010035ed(&var_54h, *piVar8, arg_8h[7]);\n                                    if (iVar5 != 0) {\n                                        var_1h._0_1_ = '\\x01';\n                                        fcn.01003081(arg_8h, arg_ch, var_8h, arg_14h, arg_18h, &var_54h, *piVar8, \n                                                     &var_68h, arg_20h, arg_24h);\n                                        var_40h = var_10h;\n                                        goto code_r0x0100338f;\n                                    }\n                                    piVar8 = piVar8 + 1;\n                                    iVar5 = var_28h;\n                                    var_40h = var_10h;\n                                }\n                                var_14h = var_14h + 1;\n                                var_18h = var_18h + 4;\n                            } while (var_14h != var_5ch);\n                        }\ncode_r0x0100338f:\n                        var_40h = var_40h + 1;\n                        var_20h = var_20h + 0x14;\n                        var_10h = var_40h;\n                    } while (var_40h < var_38h);\n                }\n            }\n            if (arg_1ch != '\\0') {\n                fcn.01002794(arg_8h);\n            }\n            if (((var_1h == '\\0') && (0x19930520 < (*arg_18h & 0x1fffffff))) &&\n               ((arg_18h[7] != 0 || (((arg_18h[8] >> 2 & 1) != 0 && (arg_20h == 0)))))) {\n                if ((arg_18h[8] >> 2 & 1) != 0) {\n                    iVar5 = fcn.01002dbc();\n                    *(iVar5 + 0x10) = arg_8h;\n                    iVar5 = fcn.01002dbc();\n                    *(iVar5 + 0x14) = var_8h;\n                    goto code_r0x0100344d;\n                }\n                cVar3 = fcn.01003b1c(arg_8h, arg_18h[7]);\n                if (cVar3 == '\\0') goto code_r0x01003472;\n            }\n        }\n        else if (arg_18h[3] != 0) {\n            if (arg_1ch != '\\0') goto code_r0x010034b1;\n            fcn.010034b7(arg_8h, arg_ch, var_8h, arg_14h, arg_18h, var_ch, arg_20h, arg_24h);\n        }\n        iVar5 = fcn.01002dbc();\n        if (*(iVar5 + 0x1c) == 0) {\n            return;\n        }\n    }\n    else {\n        iVar4 = fcn.01002dbc();\n        var_10h = *(iVar4 + 0x1c);\n        iVar4 = fcn.01002dbc();\n        *(iVar4 + 0x1c) = 0;\n        cVar3 = fcn.01003b1c(arg_8h, var_10h);\n        puVar2 = var_10h;\n        if (cVar3 != '\\0') goto code_r0x01003254;\n        arg_18h = puVar2;\n        if (0 < *var_10h) {\n            var_10h = NULL;\n            do {\n                cVar3 = fcn.010037b0(0x102846c);\n                if (cVar3 != '\\0') goto code_r0x01003452;\n                iVar5 = iVar5 + 1;\n                var_10h = var_10h + 4;\n            } while (iVar5 < *puVar2);\n        }\ncode_r0x0100344d:\n        fcn.01005c6e();\ncode_r0x01003452:\n        fcn.01002794(arg_8h);\n        fcn.01003798();\n        fcn.0100293b(&var_40h, 0x102600c);\ncode_r0x01003472:\n        iVar5 = fcn.01002dbc();\n        *(iVar5 + 0x10) = arg_8h;\n        iVar5 = fcn.01002dbc();\n        *(iVar5 + 0x14) = var_8h;\n        if (arg_24h == 0) {\n            arg_24h = arg_ch;\n        }\n        fcn.0100254f(arg_24h, arg_8h);\n        fcn.01003a1c(arg_ch, arg_14h, arg_18h);\n        arg_8h_00 = fcn.01003bd9(arg_18h);\n        fcn.01003993(arg_8h_00);\n    }\ncode_r0x010034b1:\n    fcn.01005caa();\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 2495
    },
    "0100a588": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_10h\n\nuint __cdecl fcn.0100a588(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    uint32_t lpCriticalSection;\n    uint *puVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t unaff_EBP;\n    uint *in_FS_OFFSET;\n    uint var_20h;\n    uint var_1ch;\n    uint var_10h;\n    uint var_4h;\n    \n    fcn.01002130(0x10262c8, 0x10);\n    lpCriticalSection = *(unaff_EBP + 8);\n    if (lpCriticalSection == 0xfffffffe) {\n        puVar1 = fcn.0100662d();\n        *puVar1 = 0;\n        puVar1 = fcn.01006640();\n        *puVar1 = 9;\n    }\n    else {\n        if ((-1 < lpCriticalSection) && (lpCriticalSection < *0x1028eb0)) {\n            iVar3 = (lpCriticalSection & 0x3f) * 0x38;\n            *(unaff_EBP + -0x20) = iVar3;\n            if ((*(*((lpCriticalSection >> 6) * 4 + 0x1028cb0) + 0x28 + iVar3) & 1) != 0) {\n                fcn.01009baf(lpCriticalSection);\n                uVar2 = 0xffffffff;\n                *(unaff_EBP + -0x1c) = 0xffffffff;\n                *(unaff_EBP + -4) = 0;\n                if ((*(*((lpCriticalSection >> 6) * 4 + 0x1028cb0) + 0x28 + *(unaff_EBP + -0x20)) & 1) == 0) {\n                    puVar1 = fcn.01006640();\n                    *puVar1 = 9;\n                    puVar1 = fcn.0100662d();\n                    *puVar1 = 0;\n                }\n                else {\n                    uVar2 = fcn.0100a67a(lpCriticalSection, *(unaff_EBP + 0xc), *(unaff_EBP + 0x10));\n                    *(unaff_EBP + -0x1c) = uVar2;\n                }\n                *(unaff_EBP + -4) = 0xfffffffe;\n                fcn.0100a647();\n                goto code_r0x0100a66a;\n            }\n        }\n        puVar1 = fcn.0100662d();\n        *puVar1 = 0;\n        puVar1 = fcn.01006640();\n        *puVar1 = 9;\n        fcn.01004eb0();\n    }\n    uVar2 = 0xffffffff;\ncode_r0x0100a66a:\n    *in_FS_OFFSET = *(unaff_EBP + -0x10);\n    return uVar2;\n}\n",
        "token_count": 669
    },
    "01001140": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuchar * __fastcall fcn.01001140(uint param_1, char param_2)\n\n{\n    uint16_t uVar1;\n    int16_t iVar2;\n    uchar *puVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uint16_t *puVar6;\n    uint32_t uVar7;\n    uint32_t uVar8;\n    uchar *puVar9;\n    int16_t *piVar10;\n    int32_t iVar11;\n    char cStack24;\n    \n    puVar3 = *0x10399ac;\n    if (*0x1027892 < 0x34) {\n        *0x102789e = *0x1027876;\n    }\n    uVar4 = fcn.0100f050();\n    if (*0x10283f4 <= *0x10278a0) {\n        *0x102840c = *0x1027876;\n    }\n    fcn.0100f050();\n    iVar2 = *0x1027896;\n    if (*0x1027896 == 0) {\n        uVar7 = *0x1027876;\n        uVar5 = (uVar4 - *0x1027876) + 0xa9;\n    }\n    else {\n        uVar7 = uVar4 + 0x23;\n        uVar5 = 0x61;\n        *0x1027876 = uVar7;\n    }\n    piVar10 = 0x1027882;\n    uVar8 = uVar5 * 2 - uVar4;\n    do {\n        cStack24 = uVar4;\n        if (uVar5 != *0x1027890) {\n            uVar1 = uVar5 * *piVar10;\n            uVar5 = uVar1;\n            *0x1027876 = (uVar1 - cStack24) - uVar7;\n            uVar7 = *0x1027876;\n            if (*0x1027876 == *0x102788a) break;\n        }\n        piVar10 = piVar10 + 2;\n    } while (piVar10 < 0x102789a);\n    puVar6 = 0x1027882;\n    iVar11 = 0x4636;\n    do {\n        if (uVar8 != *0x1027890) {\n            uVar8 = uVar8 * *puVar6;\n            *0x1027876 = (uVar8 - uVar7) - param_2;\n            uVar7 = *0x1027876;\n            if (*0x1027876 == *0x102788a) break;\n        }\n        puVar6 = puVar6 + 2;\n    } while (puVar6 < 0x102789a);\n    puVar9 = puVar3;\n    do {\n        iVar11 = iVar11 + -1;\n        *puVar9 = puVar9[0x1020cd0 - puVar3];\n        if (iVar2 != 0) {\n            *0x1027876 = cStack24 * '\\x02' + -0x3c + uVar8;\n        }\n        puVar9 = puVar9 + 1;\n    } while (iVar11 != 0);\n    fcn.0100f050();\n    if (*0x1027892 <= uVar4) {\n        *0x102789e = *0x1027876;\n    }\n    return puVar3;\n}\n",
        "token_count": 764
    },
    "01002439": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint __cdecl\nfcn.01002439(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint noname_4, uint noname_5, uint noname_6, \n            uint noname_7, uint noname_8, uint noname_9, uint noname_10, uint noname_11, uint noname_12, uint noname_13\n            , uint noname_14, uint noname_15, uint noname_16, uint arg_8h, uint arg_ch, uint noname_19, uint noname_20, \n            uint arg_18h, uint arg_1ch, uint arg_20h)\n\n{\n    int32_t iVar1;\n    int32_t *in_FS_OFFSET;\n    uint var_40h;\n    uint *var_3ch;\n    uint *var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint *var_40h_2;\n    code *pcStack64;\n    uint32_t uStack60;\n    uint uStack56;\n    uint *puStack52;\n    uint uStack48;\n    uint uStack44;\n    uchar *puStack40;\n    uchar *var_20h_2;\n    int32_t var_1ch_2;\n    uint *var_18h;\n    uint var_14h;\n    code *var_10h;\n    code *var_ch;\n    uint var_8h;\n    code *var_4h;\n    \n    var_20h_2 = &stack0xfffffffc;\n    puStack40 = &stack0xffffffb8;\n    if (var_3ch == 0x123) {\n        *var_38h = 0x10024f3;\n        var_8h = 1;\n    }\n    else {\n        pcStack64 = fcn.0100263f;\n        uStack60 = *0x1027004 ^ &fcn.01002439::var_40h_2;\n        uStack56 = var_2ch;\n        puStack52 = var_38h;\n        uStack48 = var_28h;\n        uStack44 = var_24h;\n        var_1ch_2 = 0;\n        var_40h_2 = *in_FS_OFFSET;\n        *in_FS_OFFSET = &fcn.01002439::var_40h_2;\n        var_8h = 1;\n        var_18h = var_3ch;\n        var_14h = var_34h;\n        iVar1 = fcn.01002dbc();\n        var_4h = *(iVar1 + 8);\n        var_ch = *0x101c138;\n        (**0x101c138)();\n        var_10h = var_4h;\n        (*var_4h)(*var_3ch, &fcn.01002439::var_18h);\n        var_8h = 0;\n        if (var_1ch_2 == 0) {\n            *in_FS_OFFSET = var_40h_2;\n        }\n        else {\n            *var_40h_2 = **in_FS_OFFSET;\n            *in_FS_OFFSET = var_40h_2;\n        }\n    }\n    return var_8h;\n}\n",
        "token_count": 751
    },
    "01003917": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.01003917(uint noname_0, uint arg_ch)\n\n{\n    int32_t iVar1;\n    int32_t unaff_EBX;\n    int32_t unaff_EBP;\n    int32_t *unaff_EDI;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    \n    *(*(unaff_EBP + 0xc) + -4) = *(unaff_EBP + -0x30);\n    fcn.010025f7(*(unaff_EBP + -0x34));\n    iVar1 = fcn.01002dbc();\n    *(iVar1 + 0x10) = *(unaff_EBP + -0x38);\n    iVar1 = fcn.01002dbc();\n    *(iVar1 + 0x14) = *(unaff_EBP + -0x3c);\n    if ((((*unaff_EDI == -0x1f928c9d) && (unaff_EDI[4] == 3)) &&\n        ((unaff_EDI[5] == 0x19930520 || ((unaff_EDI[5] == 0x19930521 || (unaff_EDI[5] == 0x19930522)))))) &&\n       ((*(unaff_EBP + -0x40) == 0 && (unaff_EBX != 0)))) {\n        iVar1 = fcn.0100289a(unaff_EDI[6]);\n        if (iVar1 != 0) {\n            fcn.01002794(unaff_EDI);\n        }\n    }\n    return;\n}\n",
        "token_count": 372
    },
    "01003a34": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_10h\n\nvoid __cdecl fcn.01003a34(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    int32_t iVar1;\n    uint arg_10h_00;\n    code *pcVar2;\n    int32_t arg_10h_01;\n    int32_t iVar3;\n    int32_t unaff_EBP;\n    uint *in_FS_OFFSET;\n    uint var_20h;\n    uint var_1ch;\n    uint var_10h;\n    uint var_4h;\n    \n    fcn.01002130(0x1025f28, 0x10);\n    arg_10h_01 = fcn.010040a4(*(unaff_EBP + 8), *(unaff_EBP + 0xc), *(unaff_EBP + 0x10));\n    *(unaff_EBP + -0x1c) = arg_10h_01;\n    iVar3 = fcn.01002dbc();\n    *(iVar3 + 0x18) = *(iVar3 + 0x18) + 1;\n    *(unaff_EBP + -4) = 0;\n    while (arg_10h_01 != *(unaff_EBP + 0x14)) {\n        if ((arg_10h_01 < 0) || (iVar3 = *(unaff_EBP + 0x10),  *(iVar3 + 4) <= arg_10h_01)) goto code_r0x01003b16;\n        iVar1 = *(iVar3 + 8);\n        arg_10h_00 = *(iVar1 + arg_10h_01 * 8);\n        *(unaff_EBP + -0x20) = arg_10h_00;\n        *(unaff_EBP + -4) = 1;\n        if (*(iVar1 + 4 + arg_10h_01 * 8) != 0) {\n            fcn.010040c1(*(unaff_EBP + 8), iVar3, arg_10h_00);\n            fcn.01003bf0(*(*(iVar3 + 8) + 4 + arg_10h_01 * 8), *(unaff_EBP + 8), 0x103);\n        }\n        *(unaff_EBP + -4) = 0;\n        arg_10h_01 = *(unaff_EBP + -0x20);\n        *(unaff_EBP + -0x1c) = arg_10h_01;\n    }\n    *(unaff_EBP + -4) = 0xfffffffe;\n    fcn.01003b02();\n    if (arg_10h_01 == *(unaff_EBP + 0x14)) {\n        fcn.010040c1(*(unaff_EBP + 8), *(unaff_EBP + 0x10), arg_10h_01);\n        *in_FS_OFFSET = *(unaff_EBP + -0x10);\n        return;\n    }\ncode_r0x01003b16:\n    fcn.01005caa();\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 725
    },
    "01003b02": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.01003b02(void)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.01002dbc();\n    if (0 < *(iVar1 + 0x18)) {\n        iVar1 = fcn.01002dbc();\n        *(iVar1 + 0x18) = *(iVar1 + 0x18) + -1;\n    }\n    return;\n}\n",
        "token_count": 87
    },
    "01003ca0": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Unable to track spacebase fully for stack\n\nvoid fcn.01003ca0(uint param_1, uint param_2, uint param_3)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint *puVar5;\n    uchar *puVar6;\n    uchar *puVar7;\n    ushort in_SS;\n    ushort in_FS;\n    uint uStack36;\n    uint uStack32;\n    uint uStack28;\n    uint uStack24;\n    uint uStack20;\n    \n    uStack20 = param_1;\n    uStack24 = param_2;\n    uStack28 = param_3;\n    uStack32 = param_3;\n    uStack36 = 0x1003d2d;\n    puVar1 = segment(in_FS, 0);\n    puVar6 = &stack0xffffffdc & 0xffff0000 | *0x10 - 0x28U;\n    puVar5 = segment(in_SS, *0x10 - 0x28U);\n    *puVar5 = *puVar1;\n    *(puVar6 + 8) = *0x1027004 ^ puVar6;\n    uVar2 = segment(in_FS, 0);\n    *uVar2 = puVar6;\n    puVar7 = puVar6;\n    while( true ) {\n        iVar3 = *(puVar7 + 0x30);\n        uVar4 = *(iVar3 + 0xc);\n        if ((uVar4 == 0xfffffffe) || ((*(puVar7 + 0x34) != 0xfffffffe && (uVar4 <= *(puVar7 + 0x34))))) break;\n        puVar1 = (*(iVar3 + 8) ^ **(puVar7 + 0x2c)) + 0x10 + uVar4 * 0xc;\n        *(iVar3 + 0xc) = *puVar1;\n        if (puVar1[1] == 0) {\n            *(puVar7 + -4) = 0x101;\n            *(puVar7 + -8) = 0x1003d11;\n            fcn.0100476c();\n            *(puVar7 + -8) = 0x1003d1e;\n            fcn.0100478b();\n            puVar7 = puVar7 + -4;\n        }\n    }\n    puVar1 = segment(in_FS, 0);\n    puVar5 = segment(in_SS, puVar7);\n    *puVar1 = *puVar5;\n    return;\n}\n",
        "token_count": 575
    },
    "01005767": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.01005767(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    int32_t *piVar3;\n    int32_t *piVar4;\n    char *var_10h;\n    uint var_ch;\n    int32_t *var_8h;\n    int32_t var_4h;\n    \n    if (arg_8h == 0) {\n        iVar1 = 0;\n    }\n    else if ((arg_8h == 2) || (arg_8h == 1)) {\n        fcn.010075a3();\n        iVar1 = 0;\n        fcn.01006fe4(0, 0x1028920, 0x104);\n        *0x1028bb8 = 0x1028920;\n        var_10h = *0x1028bc8;\n        if ((*0x1028bc8 == NULL) || (**0x1028bc8 == '\\0')) {\n            var_10h = 0x1028920;\n        }\n        var_4h = 0;\n        var_ch = 0;\n        fcn.010055a1(var_10h, 0, 0, &var_4h, &var_ch);\n        piVar3 = fcn.01005718(var_4h, var_ch, 1);\n        piVar4 = piVar3;\n        if (piVar3 == NULL) {\n            puVar2 = fcn.01006640();\n            iVar1 = 0xc;\n            *puVar2 = 0xc;\n        }\n        else {\n            fcn.010055a1(var_10h, piVar3, piVar3 + var_4h, &var_4h, &var_ch);\n            if (arg_8h == 1) {\n                *0x1028bbc = var_4h + -1;\n                piVar4 = NULL;\n                *0x1028bc0 = piVar3;\n            }\n            else {\n                var_8h = NULL;\n                iVar1 = fcn.01006ed7(piVar3, &var_8h);\n                piVar3 = var_8h;\n                if (iVar1 == 0) {\n                    *0x1028bbc = 0;\n                    iVar1 = *var_8h;\n                    while (iVar1 != 0) {\n                        var_8h = var_8h + 1;\n                        *0x1028bbc = *0x1028bbc + 1;\n                        iVar1 = *var_8h;\n                    }\n                    var_8h = NULL;\n                    iVar1 = 0;\n                    *0x1028bc0 = piVar3;\n                }\n                fcn.0100655c(var_8h);\n                var_8h = NULL;\n            }\n        }\n        fcn.0100655c(piVar4);\n    }\n    else {\n        puVar2 = fcn.01006640();\n        iVar1 = 0x16;\n        *puVar2 = 0x16;\n        fcn.01004eb0();\n    }\n    return iVar1;\n}\n",
        "token_count": 694
    },
    "0100595a": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint fcn.0100595a(void)\n\n{\n    int32_t arg_8h;\n    int32_t iVar1;\n    uint uVar2;\n    \n    if (*0x1028a28 != 0) {\n        return 0;\n    }\n    fcn.010075a3();\n    arg_8h = fcn.01007a5a();\n    if (arg_8h == 0) {\n        uVar2 = 0xffffffff;\n    }\n    else {\n        iVar1 = fcn.010057c5(arg_8h);\n        if (iVar1 == 0) {\n            uVar2 = 0xffffffff;\n        }\n        else {\n            uVar2 = 0;\n            *0x1028a28 = iVar1;\n            *0x1028a34 = iVar1;\n        }\n        fcn.0100655c(0);\n    }\n    fcn.0100655c(arg_8h);\n    return uVar2;\n}\n",
        "token_count": 213
    },
    "0100655c": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0100655c(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    uint uVar3;\n    \n    if (arg_8h != 0) {\n        iVar1 = (*_sym.imp.KERNEL32.dll_HeapFree)(*0x1028ca8, 0, arg_8h);\n        if (iVar1 == 0) {\n            puVar2 = fcn.01006640();\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            uVar3 = fcn.010065c7(uVar3);\n            *puVar2 = uVar3;\n        }\n    }\n    return;\n}\n",
        "token_count": 156
    },
    "010084d4": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.010084d4(void)\n\n{\n    int32_t unaff_EBP;\n    uint var_20h;\n    uint var_19h;\n    \n    if (*(unaff_EBP + -0x19) != '\\0') {\n        fcn.010064f7(3);\n    }\n    return;\n}\n",
        "token_count": 71
    },
    "0100d3ee": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nulong fcn.0100d3ee(void)\n\n{\n    uint32_t uVar1;\n    uint8_t uVar2;\n    uint32_t uVar3;\n    bool bVar4;\n    unkint10 in_ST0;\n    ulong uStack32;\n    uint16_t uStack24;\n    \n    uStack32._0_4_ = in_ST0;\n    uStack32._4_4_ = in_ST0 >> 0x20;\n    uStack32 = in_ST0;\n    uStack24 = in_ST0 >> 0x40;\n    uStack24 = uStack24 & 0x7fff;\n    if (uStack24 < 0x3fff) {\n        return 0;\n    }\n    if (uStack32._4_4_ < 0) {\n        if (uStack24 < 0x403e) {\n            uVar2 = 0x3e - uStack24;\n            uVar3 = uStack32._4_4_;\n            if (0x1f < uVar2) {\n                uVar3 = 0;\n                uStack32._0_4_ = uStack32._4_4_;\n            }\n            uVar1 = uStack32 >> (uVar2 & 0x1f) | uVar3 << 0x20 - (uVar2 & 0x1f);\n            uVar3 = uVar3 >> (uVar2 & 0x1f);\n            if (in_ST0 < 0) {\n                bVar4 = uVar1 != 0;\n                uVar1 = -uVar1;\n                uVar3 = -(uVar3 + bVar4);\n            }\n            return CONCAT44(uVar3, uVar1);\n        }\n        if (((uStack24 < 0x403f) && ((uStack32._4_4_ * 2 | uStack32) == 0)) && (in_ST0 < 0)) {\n            return uStack32;\n        }\n    }\n    return 0x8000000000000000;\n}\n",
        "token_count": 459
    },
    "0100d840": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.0100d840(void)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    char *pcVar4;\n    uint32_t uVar5;\n    char *pcVar6;\n    uint32_t uVar7;\n    int32_t *in_FS_OFFSET;\n    uint arg_8h;\n    int32_t var_34h;\n    uint32_t var_30h;\n    uint32_t var_29h;\n    char *var_18h;\n    uint32_t var_14h;\n    uint32_t var_10h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x101b47d;\n    var_ch = *in_FS_OFFSET;\n    var_10h = *0x1027004 ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    *0x10278a4 = (var_29h - *0x1027878) + 0x35;\n    iVar2 = (*_sym.imp.KERNEL32.dll_GetSystemDirectoryA)(0x1028f08, 0x855, var_10h);\n    var_18h = NULL;\n    *0x10278a4 = (((var_34h - iVar2) - *0x10278a4) - *0x102787c) + -0x160cc;\n    var_14h = 0xf;\n    stack0xffffffd4 = stack0xffffffd4 & 0xffffff00;\n    *0x1027878 = iVar2 + *0x10278a4 * -0x43;\n    *0x1027870 = *0x102787c + iVar2 * -0x43;\n    fcn.01001340(*0x1027878);\n    arg_8h = 0xfffffff5;\n    var_4h = 0;\n    (*_sym.imp.KERNEL32.dll_GetStdHandle)();\n    *0x1027874 = *0x1027874 + *0x10278a4 + 0x60cc;\n    pcVar4 = 0x10399b8;\n    do {\n        pcVar6 = pcVar4;\n        pcVar4 = pcVar6 + 1;\n    } while (*pcVar6 != '\\0');\n    pcVar6 = pcVar6 + -0x10399b8;\n    if (var_14h - var_18h < pcVar6) {\n        var_30h = var_30h & 0xffffff00;\n        fcn.01001480(pcVar6, var_30h, var_18h, pcVar6);\n    }\n    else {\n        uVar3 = &var_29h + 1;\n        if (0xf < var_14h) {\n            uVar3 = stack0xffffffd4;\n        }\n        pcVar4 = var_18h + uVar3;\n        var_18h = pcVar6 + var_18h;\n        fcn.010040d0(pcVar4, 0x10399b8);\n        pcVar4[pcVar6] = '\\0';\n    }\n    if (*0x1027880 + *0x1027898 == 0x3c0) {\n        uVar3 = *0x1027896;\n        var_30h = (*0x10278a4 * 0xffbe & 0xffff) * 2 - *0x10278a0;\n    }\n    else {\n        uVar3 = *0x10278a4 + 2 + *0x10278a0;\n        var_30h = *0x10278a4 * 2 + 0x160cc;\n        *0x1027896 = uVar3;\n    }\n    var_29h._0_1_ = *0x10278a0 + -0x3e + var_30h;\n    uVar7 = *0x1027878 & 0xffff;\n    uVar5 = 0x12 - uVar7;\n    *0x1027874 = uVar5;\n    if (*0x102789e == 0x1e29) {\n        var_30h = var_30h - (uVar3 & 0xffff);\n        uVar5 = var_30h * 2 + 0x9c2;\n        *0x1027874 = uVar5;\n    }\n    *0x10399a8 = 1;\n    *0x10278a4 = var_30h;\n    do {\n        if (uVar5 != *0x1027890) {\n            *0x1027874 = *(*0x10399a8 * 2 + 0x1027880) * uVar5;\n            uVar5 = *0x1027874;\n            var_30h = (*0x1027874 - *0x10278a0) - var_30h;\n            *0x10278a4 = var_30h;\n            if (var_30h == *0x102788a) break;\n        }\n        *0x10399a8 = *0x10399a8 + 2;\n    } while (*0x10399a8 < 0xd);\n    if (*0x102789e == 0x1e29) {\n        *0x10278a4 = (var_29h - *0x1027896) * 2 + 0x9c2;\n    }\n    if (*0x10283fc == 0) {\n        *0x10278a0 = *0x10278a0 + 0x48 + (*0x1027878 - (uVar5 & 0xffff));\n    }\n    else {\n        uVar5 = *0x10278a0 + 0x9c2 + uVar7;\n        *0x1027874 = uVar5;\n    }\n    if (*0x10283f4 <= *0x1027878) {\n        *0x102840c = uVar5 & 0xffff;\n        *0x10278a0 = *0x102840c * 2 + 0xa0a;\n    }\n    (*_sym.imp.KERNEL32.dll_OpenMutexA)(0x1f0001, 1, \"stri\");\n    *0x1027876 = *0x1027876 + (*0x10278a4 - *0x1027878) + 'H';\n    if (uVar7 <= *0x10278a4) {\n        *0x1027880 = *0x1027880 - *0x10278a4;\n        uVar7 = 0x35;\n    }\n    *0x10278a4 = *0x1027878 + 0x4a + uVar7;\n    *0x1027874 = *0x1027874 + *0x10278a4 * -0x74 + uVar7 * -2;\n    *0x1027878 = uVar7;\n    fcn.0100dd40();\n    *0x1027878 = *0x1027874 + 0x9c2 + *0x10278a4;\n    *0x1027874 = *0x10278a0 + *0x10278a4 * -0x43;\n    if (*0x1027896 == 0) {\n        *0x1027878 = (*0x1027878 - *0x10278a4) + 0x51;\n    }\n    else {\n        *0x10278a4 = *0x1027878 + 0x9cb;\n    }\n    if (0xf < var_14h) {\n        uVar3 = stack0xffffffd4;\n        if ((0xfff < var_14h + 1) && (uVar3 = *(stack0xffffffd4 - 4),  0x1f < (stack0xffffffd4 - uVar3) - 4)) {\n            fcn.01004ec0();\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        fcn.01001701(uVar3);\n    }\n    *in_FS_OFFSET = var_ch;\n    fcn.010016c0(arg_8h);\n    return;\n}\n",
        "token_count": 1858
    },
    "0100dd40": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t __fastcall fcn.0100dd40(int32_t param_1)\n\n{\n    int16_t iVar1;\n    int32_t iVar2;\n    char cVar3;\n    uint16_t uVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    int32_t iVar8;\n    int16_t *piVar9;\n    uint16_t *puVar10;\n    uint32_t uVar11;\n    uint8_t uStack70;\n    uint32_t uStack68;\n    uint32_t uStack64;\n    uint32_t uStack60;\n    uint32_t uStack56;\n    uint32_t uStack52;\n    uint32_t uStack48;\n    uint32_t uStack40;\n    uint32_t uStack36;\n    uint32_t uStack32;\n    uint32_t uStack28;\n    uint32_t uStack24;\n    uint32_t uStack20;\n    uint32_t uStack16;\n    \n    *0x1027880 = *0x1027880 - *0x10278a4;\n    uVar11 = (*0x1027874 - *0x10278a4) * 2 + 0x35;\n    iVar2 = fcn.0100ef10();\n    uVar6 = *0x10278a4;\n    uVar7 = *0x10278a0;\n    piVar9 = 0x1027896;\n    do {\n        if (uVar7 != *0x1027880) {\n            *piVar9 = *piVar9 - uVar7;\n            uVar11 = uVar6 + 0x9c2 + uVar7;\n        }\n        piVar9 = piVar9 + -2;\n    } while (0x1027882 < piVar9);\n    *0x10399ac = 0x1029610;\n    *0x1027874 = uVar11 + (*0x1027878 * -0x3a - param_1);\n    uVar5 = *0x1027876;\n    uVar11 = *0x1027874;\n    *0x1027878 = fcn.0100f170();\n    piVar9 = 0x1027882;\n    uVar6 = *0x10278a4;\n    do {\n        if (*0x1027874 != *0x1027890) {\n            *0x1027874 = *piVar9 * *0x1027874;\n            uVar6 = (*0x1027874 - uVar7) - uVar6;\n            *0x10278a4 = uVar6;\n            if (uVar6 == *0x102788a) break;\n        }\n        piVar9 = piVar9 + 2;\n    } while (piVar9 < 0x102789a);\n    uVar6 = -uVar6;\n    *0x1027874 = uVar6;\n    *0x1027870 = iVar2 + (uVar5 - uVar11) + 0x90 + (*0x1027876 - (uVar6 & 0xffff));\n    uStack20._0_1_ = uVar6;\n    uStack20._0_1_ = *0x1027870 - uStack20;\n    *0x1027876 = uStack20 - *0x1027876;\n    *0x1027878 = fcn.0100f050();\n    iVar2 = *0x1027870;\n    *0x1027876 = uStack20 - *0x1027876;\n    *0x1027878 = fcn.0100f170();\n    *0x1027874 = *0x1027874 * -0x39 - *0x10278a4;\n    if (*0x1027896 == 0) {\n        *0x1027870 = (*0x1027878 - *0x10278a4) + 0x48 + iVar2;\n    }\n    else {\n        *0x10278a4 = iVar2 + 0x9c2 + *0x1027878;\n    }\n    fcn.01001140();\n    *0x1027878 = fcn.0100ef10();\n    uVar7 = *0x10278a0;\n    uStack68 = *0x10278a0;\n    if (*0x1027898 + *0x1027880 == 0x3c0) {\n        iVar2 = (*0x10278a4 * 0xffbe & 0xffff) * 2 - *0x10278a0;\n    }\n    else {\n        *0x1027896 = *0x10278a0 + 2 + *0x10278a4;\n        iVar2 = *0x10278a4 * 2 + 0x160cc;\n    }\n    uStack28 = 0x25d1dda;\n    *0x1027874 = -iVar2;\n    if (*0x1027898 + *0x1027880 == 0x3c0) {\n        *0x10278a4 = iVar2 * -0x84 - *0x1027878;\n    }\n    else {\n        *0x1027896 = iVar2 + *0x1027878 + 2;\n        *0x10278a4 = iVar2 * 2 + 0x160cc;\n    }\n    if (*0x1027892 <= *0x10278a0) {\n        *0x102789e = *0x10278a4;\n        *0x1027874 = *0x102789e * 2 + 0xa0a;\n    }\n    *0x1028410 = *0x1028410 + _sym.imp.KERNEL32.dll_VirtualProtect;\n    uStack40 = fcn.0100f170();\n    uVar4 = (*0x1027874 - (*0x10278a4 & 0xffff)) + 0x35;\n    uStack32 = uVar4;\n    uStack20 = 0xf;\n    uStack24 = 0x7f;\n    uStack36 = 0x90;\n    uVar6 = *0x10278a4 + 0x9c2 + uVar4;\n    if (*0x1027880 + *0x1027898 == 0x3c0) {\n        uStack56 = *0x1027896;\n        uVar7 = (*0x10278a4 & 0xff) * 0xbe;\n        uStack52 = (uVar7 & 0xff) * 2 - uStack40;\n    }\n    else {\n        uStack56 = (*0x10278a4 & 0xffff) + 2 + uStack40;\n        uStack52 = *0x10278a4 * 2 + 0x160cc;\n        uVar7 = -uVar7;\n        *0x1027896 = uStack56;\n    }\n    if (uStack52 <= (uVar7 & 0xff)) {\n        uStack60._0_2_ = uStack40;\n        *0x1027880 = *0x1027880 - uStack60;\n        uStack52 = ((uVar7 & 0xff) - uStack40) + 0x35;\n    }\n    while( true ) {\n        uStack70 = uVar7 + -0x34 + uStack32;\n        if (uStack56 == 0) {\n            uStack60._0_1_ = uStack40;\n            uStack70 = (uStack70 - uStack52) + 'H' + uStack60;\n        }\n        else {\n            uStack52 = uStack40 + 0x9c2 + uStack70;\n        }\n        uVar7 = uStack52 & 0xffff;\n        uVar11 = (uStack32 - uStack52) + 0x35;\n        uStack48 = uVar11 & 0xffff;\n        if (*0x102789e == 0x1e29) {\n            uStack48 = uVar11 - uStack56;\n            uVar6 = uStack48 * 2 + 0x9c2;\n        }\n        if (uStack40 < uStack48) {\n            uVar6 = (uStack48 - uStack52) - uStack68;\n            uStack68 = uVar6;\n            if (uStack40 == 0) {\n                if (*0x1027880 + *0x1027898 == 0x3c0) {\n                    uStack68 = uVar6 * -0x84 - uStack52;\n                }\n                else {\n                    uStack68 = uVar6 * 2 + 0x160cc;\n                    uStack56 = uVar7 + 2 + uVar6;\n                    *0x1027896 = uStack56;\n                }\n            }\n            uVar6 = uStack68 + uStack40 + 0x9c2;\n            uStack48 = uStack48 * 2 - uVar7 & 0xffff;\n            *0x10278a0 = uStack68;\n        }\n        uStack48 = uStack48 + uVar7 + 0x9c2;\n        uStack70 = uStack48 + -0x34 + uStack70;\n        uStack64 = uStack52;\n        if (uVar6 < (uStack48 & 0xffff)) {\n            uVar6 = uVar6 + (uStack70 - (uStack48 & 0xffff)) + 0x48;\n            uStack48 = (uStack48 - uVar7) + 0x35;\n            uStack70 = (uVar6 - uStack70) - uStack48;\n        }\n        else if (*0x102789e == 0x1e29) {\n            uStack64 = uStack52 - (uStack56 & 0xffff);\n            uVar6 = uStack64 * 2 + 0x9c2;\n        }\n        uStack60 = uStack48 & 0xffff;\n        if (uStack28 == 0) break;\n        uVar7 = uStack64 & 0xffff;\n        uStack32 = 0x11;\n        iVar2 = uStack60 * 2 - uStack64;\n        uVar11 = 0x706;\n        *0x1027874 = iVar2;\n        *0x1027876 = (uVar6 - iVar2) - uStack70;\n        *0x1027878 = uStack68 + 0x9d3;\n        while( true ) {\n            if (*0x102789e == 0x1e29) {\n                *0x1027878 = *0x1027878 + (uStack56 & 0xffff) * -2;\n                uStack32 = *0x1027878 * 2 + 0x9c2 & 0xffff;\n            }\n            uVar5 = *0x1027876;\n            iVar2 = uStack64 * -0x43;\n            if (uStack56 != 0) {\n                iVar2 = (uStack32 + 0x9c2) * 2;\n            }\n            uVar6 = uVar5 + iVar2;\n            *0x102960c = *(*0x10399ac + -0x706 + uVar11) + 0x10a02b4;\n            *0x10278a0 = uVar6;\n            *0x10278a4 = uStack64;\n            *(*0x10399ac + -0x706 + uVar11) = *0x102960c;\n            uVar11 = uVar11 + 4;\n            uStack52 = *0x10278a4;\n            uStack64 = *0x10278a4;\n            if (0x825 < uVar11) break;\n            uStack56 = *0x1027896;\n        }\n        iVar2 = uVar6 + uStack32 + 0x9c2;\n        if (*0x1027880 + *0x1027898 == 0x3c0) {\n            uStack56 = *0x1027896;\n            uStack40 = iVar2 * -0x84 - *0x10278a4;\n        }\n        else {\n            uStack56 = uVar7 + 2 + iVar2;\n            uStack40 = iVar2 * 2 + 0x160cc;\n            *0x1027896 = uStack56;\n        }\n        iVar1 = uVar7 + *0x1027874;\n        uVar4 = iVar1 + 0x9c2;\n        uStack32 = uVar4;\n        uStack28 = uStack28 + -1;\n        uVar6 = *0x10278a4 + uStack40 * -0x43;\n        if (*0x1027880 + *0x1027898 == 0x3c0) {\n            uVar6 = uVar5 * -0x42;\n            uVar7 = uVar6 * '\\x02' - uVar4;\n            uStack68 = *0x10278a0;\n        }\n        else {\n            *0x1027896 = iVar1 + 0x9c4 + *0x1027876;\n            uStack56 = *0x1027896;\n            uVar7 = *0x1027876 * '\\x02' - 0x34;\n            uStack68 = *0x10278a0;\n        }\n    }\n    if (*0x102789e == 0x1e29) {\n        uStack70 = uStack70 - *0x1027896;\n        uVar6 = uStack70 * 2 + 0x9c2;\n    }\n    if (uStack60 < uVar6) {\n        uVar6 = (uVar6 + ((uVar6 - uStack70) - uStack60) * -0x3a) - uStack60;\n        uVar7 = (uStack60 * 2 + 0x48) - uStack64;\n        uStack60 = uVar7 & 0xffff;\n        if (uStack68 <= uVar6) {\n            *0x1027880 = *0x1027880 - uStack64;\n            *0x10278a0 = (uVar6 - uStack64) + 0x35;\n            uStack60 = uVar7 & 0xffff;\n            uStack68 = *0x10278a0;\n        }\n    }\n    if (*0x102789e == 0x1e29) {\n        uStack64 = uStack64 - (uStack56 & 0xffff);\n        uStack60 = uStack64 * 2 + 0x9c2;\n    }\n    uStack52 = 0x25d1dda;\n    uVar7 = (uStack60 & 0xffff) + 0x9c2 + uStack64;\n    cVar3 = uVar7;\n    iVar2 = (uVar6 - uStack64) - uStack40;\n    *0x1027874 = uVar7;\n    uStack70 = (uVar6 - cVar3) + 0x35;\n    iVar8 = (uVar7 & 0xffff) + 0x160cc + uStack64;\n    uStack32 = *0x1027898;\n    if (*0x1027880 + uStack32 == 0x3c0) {\n        iVar8 = iVar2 * -0x42;\n        uVar11 = uStack56;\n    }\n    else {\n        uVar11 = iVar2 + 2 + uVar6;\n        *0x1027896 = uVar11;\n    }\n    uVar7 = uVar7 & 0xffff;\n    if (*0x102840c == 0x1e29) {\n        uStack70 = uStack70 - *0x10283fc;\n        *0x1027874 = (uStack70 + 0x4e1) * 2;\n        uVar7 = *0x1027874;\n        cVar3 = *0x1027874;\n    }\n    uStack64 = uVar6 + 0x100bf08;\n    *0x1027876 = (uStack68 - uVar7) - uStack70;\n    uStack56 = iVar8;\n    if (*0x10283fc == 0) {\n        uStack64 = uVar6 + 0x100bf50 + (uVar7 - *0x1027876);\n    }\n    else {\n        *0x1027876 = uStack64 + -0x3e + cVar3;\n    }\n    while( true ) {\n        *0x1027870 = uStack64;\n        uVar6 = uVar7 & 0xffff;\n        if (uVar11 == 0) {\n            uVar7 = CONCAT11(uVar6, *0x1027876);\n            *0x1027870 = (uStack64 - (uVar7 & 0xff)) + uVar6 + 0x48;\n        }\n        else {\n            *0x1027876 = uVar7 + -0x3e + uStack64;\n            uVar7 = CONCAT11(uVar6, *0x1027876);\n        }\n        uStack60 = *0x1027870;\n        if ((0x11855 < *0x1027870) && (uStack60 = uStack64 + 0x37,  (uVar7 & 0xff) <= uStack60)) {\n            *0x1027880 = *0x1027880 - uVar6;\n            *0x1027876 = (uStack60 - ((uVar7 & 0xffffff00) >> 8)) + 0x35;\n            uVar7 = uVar7 & 0xffffff00 | *0x1027876;\n        }\n        cVar3 = uVar7 >> 8;\n        if (uStack52 == 0) break;\n        uStack28 = (uStack60 - uStack56) + 0x35;\n        if (*0x1027880 + uStack32 == 0x3c0) {\n            uStack60 = (uVar7 & 0xff) * -0x42;\n            *0x1027876 = uStack60 * '\\x02' - cVar3;\n        }\n        else {\n            *0x1027896 = (uVar7 & 0xff) + 2 + uVar6;\n            uVar11 = *0x1027896;\n            *0x1027876 = uVar7 * '\\x02' - 0x34;\n        }\n        if (uStack24 < 3) {\n            uStack24 = uStack24 - 1;\n            uStack28 = (((uStack68 - uStack28) - uStack56) - uStack24) + -0x160cc;\n        }\n        if (*0x102789e == 0x1e29) {\n            *0x1027876 = *0x1027876 - *0x1027896;\n            uStack60 = *0x1027876 * 2 + 0x9c2;\n        }\n        if (uVar11 == 0) {\n            uStack60 = uStack60 + 0x48 + (uStack56 - uVar6);\n        }\n        else {\n            uVar6 = uStack56 + 0x9c2 + uStack60;\n            *0x1027874 = uVar6;\n        }\n        uVar6 = uVar6 & 0xffff;\n        uStack48 = (uStack68 - uStack28) - uStack36;\n        *0x1027870 = uStack60;\n        *0x10278a4 = uStack56;\n        if ((0x83cc < uStack48) && (*0x1027878 = uStack60 * 2 - uStack56,  uStack48 = *0x1027878,  uStack68 == uVar6)) {\n            if (*0x1027876 <= uStack60) {\n                *0x1027880 = *0x1027880 - uVar6;\n                *0x1027876 = (uStack60 - uVar6) + 0x35;\n            }\n            iVar2 = fcn.0100ef10();\n            uVar11 = *0x1027896;\n            if (*0x1027896 == 0) {\n                *0x10278a4 = *0x10278a4 + 0x48 + (*0x1027876 - uVar6);\n            }\n            else {\n                *0x1027874 = *0x1027876 + *0x10278a4 + 0x9c2;\n                uVar6 = *0x1027874;\n            }\n            *0x1027870 = iVar2 + (*0x1027876 * -0x3a - uVar6);\n            uStack48 = *0x1027878;\n        }\n        uStack16._0_2_ = uVar6;\n        if (uStack52 < 0x2e) {\n            if (uVar6 <= *0x1027870) {\n                *0x1027880 = *0x1027880 - *0x10278a4;\n                *0x1027874 = (*0x1027870 - *0x10278a4) + 0x35;\n            }\n            *0x1027878 = uStack48;\n            (*_sym.imp.KERNEL32.dll_Sleep)(0x81);\n            uStack16._0_2_ = *0x10278a4 + 2 + *0x1027874;\n            uVar11 = *0x1027896;\n            uStack48 = (uStack16 - *0x1027870) - *0x1027878;\n            uStack68 = *0x10278a0;\n        }\n        if (*0x1027880 + *0x1027898 == 0x3c0) {\n            *0x1027870 = *0x10278a4 * -0x42;\n            iVar2 = *0x10278a4 * -0x84 - uStack48;\n        }\n        else {\n            uVar11 = *0x10278a4 + 2 + uStack48;\n            *0x1027896 = uVar11;\n            iVar2 = *0x10278a4 * 2 + 0x160cc;\n        }\n        iVar1 = iVar2;\n        if (uStack36 < 0xf) {\n            if (uVar11 == 0) {\n                *0x1027870 = *0x1027870 + 0x48 + (iVar2 - uStack48);\n            }\n            if (*0x1027880 + *0x1027898 == 0x3c0) {\n                uStack68 = iVar2 * -0x42;\n                iVar1 = iVar1 * -0x84 - *0x1027870;\n                uStack36 = uStack36 - 1;\n            }\n            else {\n                uVar11 = iVar2 + 2 + *0x1027870;\n                iVar1 = iVar1 * 2 + 0x60cc;\n                uStack36 = uStack36 - 1;\n                *0x1027896 = uVar11;\n            }\n        }\n        uStack16 = 0x11;\n        *0x1027874 = uStack16 + 0x9c2 + iVar1;\n        uStack28 = 0x706;\n        uStack56 = uStack52 + uStack68 * -0x43;\n        *0x1027878 = uStack68 + 0x9d3;\n        while( true ) {\n            if (*0x102789e == 0x1e29) {\n                *0x1027878 = *0x1027878 + (uVar11 & 0xffff) * -2;\n                uStack16 = *0x1027878 * 2 + 0x9c2 & 0xffff;\n            }\n            iVar2 = uStack56 * -0x43;\n            if (uVar11 != 0) {\n                iVar2 = (uStack16 + 0x9c2) * 2;\n            }\n            uVar7 = *0x1027876 + iVar2;\n            *0x102960c = *(*0x10399ac + -0x706 + uStack28) + 0x10a02b4;\n            *0x10278a0 = uVar7;\n            *0x10278a4 = uStack56;\n            *(*0x10399ac + -0x706 + uStack28) = *0x102960c;\n            uStack28 = uStack28 + 4;\n            uStack56 = *0x10278a4;\n            uStack64 = *0x10278a4 + 0x9c2 + uStack16;\n            if (0x825 < uStack28) break;\n            uVar11 = *0x1027896;\n        }\n        uStack32 = *0x1027898;\n        iVar2 = uStack16 + 0x9c2 + uVar7;\n        if (*0x1027880 + uStack32 == 0x3c0) {\n            uStack64 = iVar2 * -0x42;\n            iVar2 = iVar2 * -0x84 - *0x10278a4;\n            uVar11 = *0x1027896;\n        }\n        else {\n            uVar11 = *0x10278a4 + 2 + iVar2;\n            iVar2 = iVar2 * 2 + 0x160cc;\n            *0x1027896 = uVar11;\n        }\n        if (uVar11 != 0) {\n            *0x10278a4 = *0x1027874 + 0x9c2 + iVar2;\n        }\n        uStack52 = uStack52 - 1;\n        if (uStack20 < 9) {\n            if (*0x102789e == 0x1e29) {\n                uStack64 = (((uVar7 - uStack20) + 0x35) - uVar11) * 2 + 0x9c2;\n            }\n            *0x10278a0 = uStack20 + 0x9c1 + iVar2;\n            uStack20 = uStack20 - 1;\ncode_r0x0100ecbf:\n            uVar7 = *0x10278a4 + 0x32;\n            *0x1027874 = uVar7;\n            uStack68 = *0x10278a0;\n            uStack56 = *0x10278a4;\n        }\n        else {\n            if (*0x102789e != 0x1e29) goto code_r0x0100ecbf;\n            *0x1027876 = *0x1027876 - *0x1027896;\n            uStack64 = *0x1027876 * 2 + 0x9c2;\n            uStack68 = *0x10278a0;\n            uVar7 = *0x10278a4 + 0x32;\n            *0x1027874 = uVar7;\n            uStack56 = *0x10278a4;\n        }\n    }\n    if (uVar11 != 0) {\n        *0x1027876 = cVar3 + -0x3e + uStack56;\n    }\n    *0x1027878 = param_1 + uVar6 * -0x43;\n    iVar2 = (uStack60 - uVar6) + 0x35;\n    if (*0x1027898 + *0x1027880 == 0x3c0) {\n        *0x1027876 = iVar2 * -0x42;\n    }\n    else {\n        *0x1027896 = *0x1027878 + 2 + iVar2;\n    }\n    *0x1027874 = 0x5b8;\n    *0x10278a4 = uStack60 * 2 + -0x5b8;\n    *0x1027870 = uStack60 * 2 + 2;\n    fcn.0100f410(*0x1027870, 0x5b8);\n    *0x1027874 = *0x1027874 + *0x1027870 + 0x60cc;\n    uVar6 = fcn.0100f220();\n    uVar7 = *0x1027878;\n    uVar5 = *0x1027878 * 2 - *0x1027870;\n    uVar11 = uVar5 & 0xffff;\n    if (*0x1027870 == 0x5c3cfc50) {\n        piVar9 = 0x1027882;\n        uVar6 = (uVar5 & 0xffff) * 2 - *0x10278a0;\n        do {\n            if (uVar5 != *0x1027890) {\n                uVar4 = uVar5 * *piVar9;\n                uVar5 = uVar4;\n                uVar6 = (uVar4 - *0x10278a0) - uVar6;\n                if (uVar6 == *0x102788a) break;\n            }\n            piVar9 = piVar9 + 2;\n        } while (piVar9 < 0x102789a);\n        puVar10 = 0x1027882;\n        uVar5 = uVar6 + 0x9c2 + *0x10278a0;\n        do {\n            uVar11 = uVar5 & 0xffff;\n            if (uVar11 != *0x1027890) {\n                uVar5 = *puVar10 * uVar11;\n                uVar11 = uVar5 & 0xffff;\n                uVar5 = uVar5 & 0xffff;\n                uVar6 = (uVar11 - *0x10278a0) - uVar6;\n                if (uVar6 == *0x102788a) break;\n            }\n            puVar10 = puVar10 + 2;\n        } while (puVar10 < 0x102789a);\n    }\n    uVar5 = *0x1027876;\n    *0x10278a0 = uVar11 + 0x9c2 + uVar5;\n    *0x1027874 = *0x1027870 + 0x60cc + uVar11;\n    piVar9 = 0x1027896;\n    *0x10278a4 = uVar6;\n    do {\n        if (uVar7 != *0x1027880) {\n            iVar1 = uVar7;\n            *piVar9 = *piVar9 - iVar1;\n            *0x1027874 = iVar1 + 0x9c2 + uVar6;\n        }\n        piVar9 = piVar9 + -2;\n    } while (0x1027882 < piVar9);\n    return uVar5;\n}\n",
        "token_count": 6909
    },
    "0100f050": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0100f050(uint32_t param_1)\n\n{\n    int16_t *piVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint8_t uStack9;\n    \n    piVar1 = 0x1027896;\n    uVar2 = *0x1027878;\n    do {\n        if (param_1 != *0x1027880) {\n            *piVar1 = *piVar1 - param_1;\n            uVar2 = *0x10278a4 + 0x9c2 + param_1;\n            *0x1027878 = uVar2;\n        }\n        piVar1 = piVar1 + -2;\n    } while (0x1027882 < piVar1);\n    if (*0x1027892 <= param_1) {\n        *0x102789e = *0x1027876;\n        uVar2 = *0x1027876 * 2 + 0xa0a;\n        *0x1027878 = uVar2;\n    }\n    *0x10399a8 = 1;\n    *0x10278a4 = uStack9 * 2 - *0x1027870;\n    uVar3 = *0x10278a4;\n    do {\n        if (uVar2 != *0x1027890) {\n            uVar2 = *(*0x10399a8 * 2 + 0x1027880) * uVar2;\n            uVar3 = (uVar2 - uVar3) - param_1;\n            *0x1027878 = uVar2;\n            if (uVar3 == *0x102788a) break;\n        }\n        *0x10399a8 = *0x10399a8 + 2;\n    } while (*0x10399a8 < 0xd);\n    if (*0x1027896 == 0) {\n        *0x1027878 = param_1 + 0x48 + (uVar2 - *0x1027876);\n        return *0x1027870;\n    }\n    *0x1027876 = uVar2 + -0x3e + param_1;\n    return *0x1027870;\n}\n",
        "token_count": 503
    },
    "0100f410": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Could not reconcile some variable overlaps\n\nuint16_t __cdecl fcn.0100f410(uint32_t arg_8h, uint arg_ch)\n\n{\n    int16_t iVar1;\n    char cVar2;\n    uint8_t uVar3;\n    code *pcVar4;\n    uint var_1ch;\n    int32_t var_18h;\n    uint32_t var_14h;\n    uint var_10h;\n    uint32_t var_ch;\n    int32_t var_8h;\n    uint var_1h;\n    \n    var_10h = 0x40;\n    var_ch = *0x1027896;\n    if (var_ch != 0) {\n        *0x1027874 = arg_8h + 0x9c2 + *0x10278a4;\n    }\n    var_8h = (*0x1027874 - var_8h) - *0x10278a0;\n    *0x10278a4 = *0x1027874 + var_1h * -0x43;\n    if (*0x1027892 <= *0x1027874) {\n        *0x102789e = *0x1027876;\n        *0x10278a4 = (*0x1027876 - *0x1027874) + *0x1027874 + 0xa0a + *0x1027876;\n    }\n    *0x1027876 = fcn.0100ffa0();\n    if (*0x1027898 + *0x1027880 == 0x3c0) {\n        *0x10278a4 = *0x1027874 + *0x1027874 * -0x43;\n        *0x1027874 = *0x10278a4 * 2 - *0x10278a0;\n    }\n    else {\n        *0x1027896 = *0x1027874 + 2 + *0x10278a0;\n        *0x1027874 = *0x1027874 * 2 + 0x60cc;\n    }\n    var_8h = *0x10278a0 + 0x160cc + var_8h;\n    *0x102787c = (var_8h - *0x102787c) - arg_ch;\n    var_1h._0_1_ = (*0x10278a4 - var_1h) - *0x1027874;\n    *0x1027876 = fcn.0100fdf0(&var_1ch);\n    if (*0x1027892 <= *0x10278a0) {\n        *0x102789e = *0x1027874;\n        *0x10278a4 = *0x1027874 + *0x1027874 + 0xa0a;\n    }\n    var_8h = (*0x1027874 + 0x35) - *0x10278a0;\n    uVar3 = fcn.01010040(var_10h);\n    if (*0x102789e == 0x1e29) {\n        *0x10278a4 = (*0x1027874 - *0x1027896) + 0x9c2 + (*0x1027874 - *0x1027896);\n    }\n    iVar1 = *0x10278a0;\n    *0x1027874 = var_8h + 2 + iVar1;\n    if (*0x1027874 <= *0x10278a4) {\n        *0x1027880 = *0x1027880 - iVar1;\n        *0x1027874 = (*0x10278a4 + 0x35) - iVar1;\n    }\n    if (*0x1027892 <= *0x1027874) {\n        *0x102789e = uVar3;\n        *0x10278a4 = (uVar3 - *0x1027874) + *0x1027874 + 0xa0a + uVar3;\n    }\n    if (*0x102789e == 0x1e29) {\n        *0x1027874 = *0x1027874 - *0x1027896;\n        *0x10278a4 = *0x1027874 + 0x9c2 + *0x1027874;\n    }\n    pcVar4 = *0x1028410 + -0x3b64;\n    var_1h._0_1_ = *0x10278a4 * '\\x02' - *0x1027874;\n    if (*0x1027898 + *0x1027880 == 0x3c0) {\n        *0x10278a4 = uVar3 + uVar3 * -0x43;\n        *0x1027876 = *0x10278a4 * '\\x02' - *0x1027874;\n    }\n    else {\n        *0x1027896 = uVar3 + 2 + *0x1027874;\n        *0x1027876 = uVar3 * '\\x02' + -0x34;\n    }\n    *0x1027876 = fcn.0100fdf0(pcVar4, *0x10399ac, *0x1020cc8);\n    if (*0x1027892 <= *0x10278a0) {\n        *0x102789e = *0x1027874;\n        *0x10278a4 = *0x1027874 + *0x1027874 + 0xa0a;\n    }\n    var_8h = (*0x1027874 - (var_8h * 0x3a + *0x10278a0)) * 2 - *0x10278a0;\n    *0x1027874 = *0x10278a0 + var_8h * -0x43;\n    (*pcVar4)();\n    *0x1027874 = var_8h + 0x9c2 + *0x1027876;\n    if (*0x1027892 <= arg_8h) {\n        var_1h._0_1_ = *0x1027874 * '\\x02' + '\\n';\n        *0x102789e = *0x1027874;\n    }\n    if (*0x1028400 + *0x10283d0 == 0x3c0) {\n        var_8h = *0x10278a4 * -0x42;\n        *0x10278a4 = *0x10278a4 * -0x42;\n    }\n    else {\n        *0x10283fc = *0x10278a4 + 2 + var_8h;\n        *0x10278a4 = *0x10278a4 * 2 + 0x160cc;\n    }\n    var_14h = *0x1027896;\n    if (var_14h == 0) {\n        *0x10278a4 = ((*0x1027874 + 0x48) - *0x1027876) + *0x10278a4;\n    }\n    else {\n        *0x1027876 = *0x1027874 + -0x3e + *0x10278a4;\n    }\n    *0x1027876 = fcn.0100ffa0();\n    if (*0x1027892 <= *0x10278a0) {\n        *0x102789e = *0x1027874;\n        *0x10278a4 = *0x1027874 + *0x1027874 + 0xa0a;\n    }\n    *0x1027874 = *0x10278a0 + var_8h * -0x43;\n    if (*0x102789e == 0x1e29) {\n        *0x1027876 = *0x1027876 - *0x1027896;\n        *0x10278a4 = *0x1027876 + 0x9c2 + *0x1027876;\n    }\n    var_18h = *0x10283fc;\n    cVar2 = *0x1027874;\n    if (*0x10283fc == 0) {\n        *0x10278a0 = ((*0x1027874 + 0x48) - *0x1027876) + *0x10278a0;\n    }\n    else {\n        *0x1027876 = cVar2 + -0x3e + *0x10278a0;\n    }\n    if (*0x1027892 <= *0x10278a4) {\n        *0x102789e = *0x1027876;\n        *0x1027876 = (*0x10278a4 * '\\x03' + *0x1027876 * 'z') - 0x34;\n    }\n    var_1h._0_1_ = cVar2 + -0x34 + var_1h;\n    if (*0x1027876 <= *0x10278a4) {\n        *0x1027880 = *0x1027880 - *0x1027874;\n        *0x1027876 = (*0x10278a4 + '5') - cVar2;\n    }\n    *0x1027876 = fcn.0100fdf0();\n    return *0x1027874;\n}\n",
        "token_count": 2122
    },
    "01010040": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.01010040(void)\n\n{\n    uint32_t uVar1;\n    int16_t *piVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint16_t uVar5;\n    uint32_t uVar6;\n    uint16_t *puVar7;\n    uint8_t uStack15;\n    char cStack8;\n    char cStack4;\n    \n    uVar1 = *0x10278a0;\n    if (*0x1027896 == 0) {\n        *0x1027878 = (*0x1027878 - *0x10278a4) + 0x48 + *0x10278a0;\n    }\n    else {\n        *0x10278a4 = *0x10278a0 + 0x9c2 + *0x1027878;\n    }\n    iVar3 = *0x1027870 + *0x1027878 * -0x3b;\n    piVar2 = 0x1027896;\n    cStack8 = *0x1027878;\n    uVar6 = (*0x1027876 + *0x10278a4 * -0x3a) - cStack8;\n    uVar5 = *0x1027880;\n    do {\n        if (uVar1 != uVar5) {\n            *piVar2 = *piVar2 - uVar1;\n            uVar5 = *0x1027880;\n        }\n        piVar2 = piVar2 + -2;\n    } while (0x1027882 < piVar2);\n    cStack4 = iVar3;\n    *0x1027870 = uVar6 + 0x16101;\n    puVar7 = 0x1027882;\n    uVar4 = iVar3 * 2 - *0x1027870;\n    uStack15 = cStack4 + *0x1027870 * -0x43;\n    *0x1027878 = uVar4;\n    do {\n        if (uVar4 != *0x1027890) {\n            uVar4 = *puVar7 * uVar4;\n            uStack15 = (uVar4 - uVar1) - uStack15;\n            *0x1027878 = uVar4;\n            if (uStack15 == *0x102788a) break;\n        }\n        puVar7 = puVar7 + 2;\n    } while (puVar7 < 0x102789a);\n    *0x1027870 = (iVar3 + uVar4 * -0x3a) - *0x1027870;\n    *0x1027876 = ('\\x02' - cStack4) + *0x1027870;\n    if (*0x1027876 <= uVar4) {\n        *0x1027880 = uVar5 - uVar1;\n        *0x1027876 = (uVar4 - uVar1) + 0x35;\n    }\n    *0x10278a4 = -(uVar6 + 0x16ac3 + ((uVar4 + iVar3) - *0x1027870));\n    return;\n}\n",
        "token_count": 699
    },
    "0100ef10": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint32_t __fastcall fcn.0100ef10(uint32_t param_1)\n\n{\n    uint32_t uVar1;\n    int16_t *piVar2;\n    uint16_t *puVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    \n    uVar4 = *0x10278a0;\n    uVar1 = *0x1027876;\n    piVar2 = 0x1027896;\n    iVar5 = uVar1 + *0x10278a4 * -0x43;\n    do {\n        if (uVar4 != *0x1027880) {\n            *piVar2 = *piVar2 - uVar4;\n            iVar5 = *0x10278a4 + 0x9c2 + uVar4;\n        }\n        piVar2 = piVar2 + -2;\n    } while (0x1027882 < piVar2);\n    if (*0x1027892 <= param_1) {\n        *0x102789e = *0x1027876;\n        *0x1027878 = uVar1 * 2 + 0xa0a;\n    }\n    puVar3 = 0x1027882;\n    uVar1 = uVar1 + 0x48 + (*0x10278a4 - iVar5);\n    uVar4 = *0x1027878;\n    do {\n        if (uVar4 != *0x1027890) {\n            uVar4 = *puVar3 * uVar4;\n            *0x1027876 = (uVar4 - *0x1027876) - param_1;\n            *0x1027878 = uVar4;\n            if (*0x1027876 == *0x102788a) break;\n        }\n        puVar3 = puVar3 + 2;\n    } while (puVar3 < 0x102789a);\n    *0x10399a8 = 0xb;\n    do {\n        if (param_1 != *0x1027880) {\n            piVar2 = *0x10399a8 * 2 + 0x1027880;\n            *piVar2 = *piVar2 - param_1;\n            uVar4 = param_1 + 0x9c2 + ((uVar1 & 0xffff) * 2 - iVar5);\n            *0x1027878 = uVar4;\n        }\n        *0x10399a8 = *0x10399a8 + -2;\n    } while (1 < *0x10399a8);\n    *0x10278a4 = (*0x1027876 - uVar4) + 0x35;\n    return uVar1 & 0xffff;\n}\n",
        "token_count": 608
    },
    "01001340": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nint32_t ** __fastcall fcn.01001340(int32_t **param_1)\n\n{\n    int32_t *piVar1;\n    code *pcVar2;\n    char *pcVar3;\n    int32_t *noname_0;\n    int32_t iVar4;\n    int32_t **ppiVar5;\n    int32_t *piVar6;\n    char *pcVar7;\n    int32_t *piVar8;\n    uint unaff_EDI;\n    int32_t *piVar9;\n    \n    pcVar3 = 0x1028f08;\n    do {\n        pcVar7 = pcVar3;\n        pcVar3 = pcVar7 + 1;\n    } while (*pcVar7 != '\\0');\n    piVar8 = pcVar7 + -0x1028f08;\n    piVar1 = param_1[5];\n    if (piVar8 <= piVar1) {\n        ppiVar5 = param_1;\n        if (0xf < piVar1) {\n            ppiVar5 = *param_1;\n        }\n        param_1[4] = piVar8;\n        fcn.010040d0(ppiVar5, 0x1028f08, piVar8);\n        *(ppiVar5 + piVar8) = '\\0';\n        return param_1;\n    }\n    if (piVar8 < 0x80000000) {\n        piVar9 = piVar8 | 0xf;\n        if ((piVar9 < 0x80000000) && (piVar1 <= 0x7fffffff - (piVar1 >> 1))) {\n            piVar6 = (piVar1 >> 1) + piVar1;\n            if (piVar9 < piVar6) {\n                piVar9 = piVar6;\n            }\n            piVar6 = piVar9 + 1;\n            if (0xfff < piVar6) {\n                noname_0 = piVar9 + 9;\n                if (noname_0 <= piVar6) goto code_r0x0100146b;\n                goto code_r0x010013df;\n            }\n            if (piVar6 == NULL) {\n                piVar6 = NULL;\n            }\n            else {\n                piVar6 = fcn.010016d1(piVar6, unaff_EDI);\n            }\ncode_r0x0100140a:\n            param_1[4] = piVar8;\n            param_1[5] = piVar9;\n            fcn.01004790(piVar6, 0x1028f08, piVar8);\n            *(piVar8 + piVar6) = '\\0';\n            if (piVar1 < 0x10) {\ncode_r0x01001455:\n                *param_1 = piVar6;\n                return param_1;\n            }\n            piVar8 = *param_1;\n            piVar9 = piVar8;\n            if ((piVar1 + 1U < 0x1000) || (piVar9 = piVar8[-1],  piVar8 + (-4 - piVar9) < 0x20)) {\n                fcn.01001701(piVar9);\n                goto code_r0x01001455;\n            }\n        }\n        else {\n            piVar9 = 0x7fffffff;\n            noname_0 = 0x80000023;\ncode_r0x010013df:\n            iVar4 = fcn.010016d1(noname_0, unaff_EDI);\n            if (iVar4 != 0) {\n                piVar6 = iVar4 + 0x23U & 0xffffffe0;\n                piVar6[-1] = iVar4;\n                goto code_r0x0100140a;\n            }\n        }\n        fcn.01004ec0();\n    }\n    fcn.01001130();\ncode_r0x0100146b:\n    fcn.010010b0();\n    pcVar2 = swi(3);\n    ppiVar5 = (*pcVar2)();\n    return ppiVar5;\n}\n",
        "token_count": 891
    },
    "01001480": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nuint32_t * __thiscall fcn.01001480(uint32_t *param_1, uint32_t param_2, uint param_3, uint param_4, int32_t param_5)\n\n{\n    uint32_t uVar1;\n    code *pcVar2;\n    uint32_t noname_0;\n    int32_t iVar3;\n    uchar *puVar4;\n    uint32_t *puVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    uint unaff_EDI;\n    uint32_t uVar8;\n    \n    uVar7 = param_1[4];\n    if (0x7fffffff - uVar7 < param_2) {\n        fcn.01001130();\ncode_r0x010015c6:\n        fcn.010010b0();\n        goto code_r0x010015cb;\n    }\n    uVar6 = param_2 + uVar7 | 0xf;\n    uVar1 = param_1[5];\n    if ((uVar6 < 0x80000000) && (uVar1 <= 0x7fffffff - (uVar1 >> 1))) {\n        uVar8 = (uVar1 >> 1) + uVar1;\n        if (uVar6 < uVar8) {\n            uVar6 = uVar8;\n        }\n        uVar8 = uVar6 + 1;\n        if (0xfff < uVar8) {\n            noname_0 = uVar6 + 0x24;\n            if (noname_0 <= uVar8) goto code_r0x010015c6;\n            goto code_r0x010014bd;\n        }\n        if (uVar8 == 0) {\n            uVar8 = 0;\n        }\n        else {\n            uVar8 = fcn.010016d1(uVar8, unaff_EDI);\n        }\n    }\n    else {\n        uVar6 = 0x7fffffff;\n        noname_0 = 0x80000023;\ncode_r0x010014bd:\n        iVar3 = fcn.010016d1(noname_0, unaff_EDI);\n        if (iVar3 == 0) goto code_r0x010015cb;\n        uVar8 = iVar3 + 0x23U & 0xffffffe0;\n        *(uVar8 - 4) = iVar3;\n    }\n    param_1[4] = param_2 + uVar7;\n    param_1[5] = uVar6;\n    puVar4 = param_5 + uVar8 + uVar7;\n    if (uVar1 < 0x10) {\n        fcn.01004790(uVar8, param_1, uVar7);\n        fcn.01004790(uVar8 + uVar7, 0x10399b8, param_5);\n        *puVar4 = 0;\n        *param_1 = uVar8;\n        return param_1;\n    }\n    uVar6 = *param_1;\n    fcn.01004790(uVar8, uVar6, uVar7);\n    fcn.01004790(uVar8 + uVar7, 0x10399b8, param_5);\n    *puVar4 = 0;\n    uVar7 = uVar6;\n    if ((uVar1 + 1 < 0x1000) || (uVar7 = *(uVar6 - 4),  (uVar6 - uVar7) - 4 < 0x20)) {\n        fcn.01001701(uVar7);\n        *param_1 = uVar8;\n        return param_1;\n    }\ncode_r0x010015cb:\n    fcn.01004ec0();\n    pcVar2 = swi(3);\n    puVar5 = (*pcVar2)();\n    return puVar5;\n}\n",
        "token_count": 854
    },
    "0100218b": {
        "rules": [
            "encrypt data using Curve25519/bbf924b96e5b4ce780ce59f68f21b030"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x010021f8)\n// WARNING: Removing unreachable block (ram,0x010021bd)\n// WARNING: Removing unreachable block (ram,0x0100226f)\n\nuint fcn.0100218b(void)\n\n{\n    int32_t *piVar1;\n    uint32_t *puVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    uint32_t in_XCR0;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    *0x102885c = 0;\n    *0x1027010 = *0x1027010 | 1;\n    iVar3 = sub.KERNEL32.dll_IsProcessorFeaturePresent(10);\n    uVar4 = *0x1027010;\n    if (iVar3 != 0) {\n        piVar1 = cpuid_basic_info(0);\n        puVar2 = cpuid_Version_info(1);\n        uVar5 = puVar2[3];\n        if (((piVar1[1] ^ 0x756e6547U | piVar1[3] ^ 0x6c65746eU | piVar1[2] ^ 0x49656e69U) == 0) &&\n           (((((uVar4 = *puVar2 & 0xfff3ff0,  uVar4 == 0x106c0 || (uVar4 == 0x20660)) || (uVar4 == 0x20670)) ||\n             ((uVar4 == 0x30650 || (uVar4 == 0x30660)))) || (uVar4 == 0x30670)))) {\n            *0x1028860 = *0x1028860 | 1;\n        }\n        if (*piVar1 < 7) {\n            uVar6 = 0;\n        }\n        else {\n            iVar3 = cpuid_Extended_Feature_Enumeration_info(7);\n            uVar6 = *(iVar3 + 4);\n            if ((uVar6 & 0x200) != 0) {\n                *0x1028860 = *0x1028860 | 2;\n            }\n        }\n        *0x102885c = 1;\n        uVar4 = *0x1027010 | 2;\n        if ((uVar5 & 0x100000) != 0) {\n            uVar4 = *0x1027010 | 6;\n            *0x102885c = 2;\n            if ((((uVar5 & 0x8000000) != 0) && ((uVar5 & 0x10000000) != 0)) && ((in_XCR0 & 6) == 6)) {\n                *0x102885c = 3;\n                uVar4 = *0x1027010 | 0xe;\n                if ((uVar6 & 0x20) != 0) {\n                    *0x102885c = 5;\n                    uVar4 = *0x1027010 | 0x2e;\n                    if (((uVar6 & 0xd0030000) == 0xd0030000) && ((in_XCR0 & 0xe0) == 0xe0)) {\n                        *0x1027010 = *0x1027010 | 0x6e;\n                        *0x102885c = 6;\n                        uVar4 = *0x1027010;\n                    }\n                }\n            }\n        }\n    }\n    *0x1027010 = uVar4;\n    return 0;\n}\n",
        "token_count": 846
    },
    "01002d86": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.01002d86(int32_t arg_8h)\n\n{\n    if (*0x1027020 != -1) {\n        if (arg_8h == 0) {\n            arg_8h = fcn.01003fc7(*0x1027020);\n        }\n        fcn.01004002(*0x1027020, 0);\n        fcn.01002d6a(arg_8h);\n    }\n    return;\n}\n",
        "token_count": 104
    },
    "010094e7": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint __cdecl fcn.010094e7(char *arg_8h, int32_t arg_ch, int32_t arg_10h, int32_t arg_14h)\n\n{\n    char cVar1;\n    uint *puVar2;\n    int32_t iVar3;\n    char *pcVar4;\n    int32_t iVar5;\n    uint uVar6;\n    \n    if (arg_14h == 0) {\n        if (arg_8h == NULL) {\n            if (arg_ch == 0) {\n                return 0;\n            }\n        }\n        else {\ncode_r0x0100946a:\n            if (arg_ch != 0) {\n                if (arg_14h == 0) {\n                    *arg_8h = '\\0';\n                    return 0;\n                }\n                if (arg_10h != 0) {\n                    iVar3 = arg_14h;\n                    pcVar4 = arg_8h;\n                    iVar5 = arg_ch;\n                    if (arg_14h == -1) {\n                        do {\n                            cVar1 = pcVar4[arg_10h - arg_8h];\n                            *pcVar4 = cVar1;\n                            pcVar4 = pcVar4 + 1;\n                            if (cVar1 == '\\0') break;\n                            iVar5 = iVar5 + -1;\n                        } while (iVar5 != 0);\n                    }\n                    else {\n                        do {\n                            cVar1 = pcVar4[arg_10h - arg_8h];\n                            *pcVar4 = cVar1;\n                            pcVar4 = pcVar4 + 1;\n                            if ((cVar1 == '\\0') || (iVar5 = iVar5 + -1,  iVar5 == 0)) break;\n                            iVar3 = iVar3 + -1;\n                        } while (iVar3 != 0);\n                        if (iVar3 == 0) {\n                            *pcVar4 = '\\0';\n                        }\n                    }\n                    if (iVar5 != 0) {\n                        return 0;\n                    }\n                    if (arg_14h == -1) {\n                        arg_8h[arg_ch + -1] = '\\0';\n                        return 0x50;\n                    }\n                    *arg_8h = '\\0';\n                    puVar2 = fcn.01006640();\n                    uVar6 = 0x22;\n                    goto code_r0x01009458;\n                }\n                *arg_8h = '\\0';\n            }\n        }\n    }\n    else if (arg_8h != NULL) goto code_r0x0100946a;\n    puVar2 = fcn.01006640();\n    uVar6 = 0x16;\ncode_r0x01009458:\n    *puVar2 = uVar6;\n    fcn.01004eb0();\n    return uVar6;\n}\n",
        "token_count": 611
    },
    "0100b470": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nbool fcn.0100b470(void)\n\n{\n    if (*0x1027850 == -2) {\n        fcn.0100b451();\n    }\n    return *0x1027850 != -1;\n}\n",
        "token_count": 49
    },
    "0100b48f": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid fcn.0100b48f(void)\n\n{\n    if ((*0x1027850 != -1) && (*0x1027850 != -2)) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(*0x1027850);\n    }\n    return;\n}\n",
        "token_count": 61
    },
    "01006ed7": {
        "rules": [
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf",
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8"
        ],
        "decompiled_code": "\n// WARNING: Type propagation algorithm not settling\n\nint32_t __cdecl fcn.01006ed7(int32_t *arg_8h, int32_t *arg_ch)\n\n{\n    char cVar1;\n    code *pcVar2;\n    uint *puVar3;\n    int32_t iVar4;\n    char *pcVar5;\n    uint32_t uVar6;\n    char *pcVar7;\n    int32_t iVar8;\n    uint32_t uVar9;\n    char **ppcVar10;\n    char **arg_8h_00;\n    char **var_28h;\n    char **var_24h;\n    uint var_20h;\n    char **var_1ch;\n    char *var_18h;\n    char *var_14h;\n    char *var_10h;\n    char *var_ch;\n    char **var_8h;\n    char *var_4h;\n    \n    if (arg_ch == NULL) {\n        puVar3 = fcn.01006640();\n        iVar8 = 0x16;\n        *puVar3 = 0x16;\n        fcn.01004eb0();\n    }\n    else {\n        pcVar7 = NULL;\n        *arg_ch = 0;\n        iVar8 = *arg_8h;\n        var_28h = NULL;\n        var_24h = NULL;\n        var_20h = 0;\n        ppcVar10 = var_28h;\n        while (var_28h = ppcVar10,  iVar8 != 0) {\n            var_4h = CONCAT13(var_4h >> 0x18, 0x3f2a);\n            iVar8 = fcn.01009500(iVar8, &var_4h);\n            if (iVar8 == 0) {\n                iVar8 = fcn.01006a55(*arg_8h, 0, 0, &var_28h);\n            }\n            else {\n                iVar8 = fcn.01006b06(*arg_8h, iVar8, &var_28h);\n            }\n            ppcVar10 = var_28h;\n            var_8h = iVar8;\n            if (iVar8 != 0) goto code_r0x01006a06;\n            arg_8h = arg_8h + 1;\n            iVar8 = *arg_8h;\n        }\n        var_4h = NULL;\n        var_ch = (var_24h - ppcVar10 >> 2) + 1;\n        uVar9 = ~-(var_24h < ppcVar10) & (var_24h - ppcVar10) + 3U >> 2;\n        var_8h = ppcVar10;\n        if (uVar9 != 0) {\n            uVar6 = 0;\n            do {\n                pcVar5 = *var_8h;\n                var_10h = pcVar5 + 1;\n                do {\n                    cVar1 = *pcVar5;\n                    pcVar5 = pcVar5 + 1;\n                } while (cVar1 != '\\0');\n                pcVar7 = pcVar5 + pcVar7 + (1 - var_10h);\n                var_8h = var_8h + 1;\n                uVar6 = uVar6 + 1;\n                var_4h = pcVar7;\n            } while (uVar6 != uVar9);\n        }\n        iVar8 = fcn.01005718(var_ch, var_4h, 1);\n        if (iVar8 == 0) {\n            iVar8 = -1;\n            var_8h = 0xffffffff;\n        }\n        else {\n            var_ch = iVar8 + var_ch * 4;\n            var_18h = var_ch;\n            if (ppcVar10 != var_24h) {\n                var_1ch = iVar8 - ppcVar10;\n                var_8h = ppcVar10;\n                do {\n                    var_14h = *var_8h;\n                    var_10h = var_14h;\n                    do {\n                        cVar1 = *var_10h;\n                        var_10h = var_10h + 1;\n                    } while (cVar1 != '\\0');\n                    var_10h = var_10h + (1 - (var_14h + 1));\n                    iVar4 = fcn.010094e7(var_ch, var_4h + (var_18h - var_ch), var_14h, var_10h);\n                    if (iVar4 != 0) {\n                        fcn.01004edd(0, 0, 0, 0, 0);\n                        pcVar2 = swi(3);\n                        iVar8 = (*pcVar2)();\n                        return iVar8;\n                    }\n                    *(var_1ch + var_8h) = var_ch;\n                    var_8h = var_8h + 1;\n                    var_ch = var_ch + var_10h;\n                } while (var_8h != var_24h);\n            }\n            var_8h = NULL;\n            *arg_ch = iVar8;\n            iVar8 = 0;\n        }\n        fcn.0100655c(0);\ncode_r0x01006a06:\n        uVar6 = 0;\n        uVar9 = ~-(var_24h < ppcVar10) & var_24h + (3 - ppcVar10) >> 2;\n        arg_8h_00 = ppcVar10;\n        var_1ch = ppcVar10;\n        var_18h = uVar9;\n        if (uVar9 != 0) {\n            do {\n                fcn.0100655c(*ppcVar10);\n                uVar6 = uVar6 + 1;\n                ppcVar10 = ppcVar10 + 1;\n                iVar8 = var_8h;\n                arg_8h_00 = var_28h;\n            } while (uVar6 != uVar9);\n        }\n        fcn.0100655c(arg_8h_00);\n    }\n    return iVar8;\n}\n",
        "token_count": 1341
    },
    "01009baf": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.01009baf(uint32_t lpCriticalSection)\n\n{\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)\n              ((lpCriticalSection & 0x3f) * 0x38 + *((lpCriticalSection >> 6) * 4 + 0x1028cb0));\n    return;\n}\n",
        "token_count": 70
    },
    "01009bd2": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.01009bd2(uint32_t lpCriticalSection)\n\n{\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)\n              ((lpCriticalSection & 0x3f) * 0x38 + *((lpCriticalSection >> 6) * 4 + 0x1028cb0));\n    return;\n}\n",
        "token_count": 71
    },
    "0100f220": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0100f220(uint param_1, uint32_t param_2)\n\n{\n    uint16_t uVar1;\n    int16_t iVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    int16_t iVar5;\n    int16_t *piVar6;\n    uint16_t uVar7;\n    uint var_8h;\n    \n    iVar4 = *0x10278a4;\n    uVar3 = *0x1027870;\n    piVar6 = 0x1027896;\n    do {\n        if (uVar3 != *0x1027880) {\n            *piVar6 = *piVar6 - uVar3;\n            *0x10278a0 = iVar4 + 0x9c2 + uVar3;\n        }\n        piVar6 = piVar6 + -2;\n    } while (0x1027882 < piVar6);\n    piVar6 = 0x1027896;\n    uVar7 = *0x1027880;\n    do {\n        iVar2 = param_2;\n        if (param_2 != uVar7) {\n            *piVar6 = *piVar6 - iVar2;\n            uVar7 = *0x1027880;\n        }\n        piVar6 = piVar6 + -2;\n    } while (0x1027882 < piVar6);\n    *0x1027878 = *0x1027874 + param_2 + 2;\n    iVar5 = (*0x1027870 & 0xff) + *0x1027870;\n    uVar1 = iVar5 + 2;\n    if (*0x1027898 + uVar7 == 0x3c0) {\n        *0x1027878 = uVar1 * -0x42;\n        *0x1027874 = uVar1 * -0x84 - iVar2;\n    }\n    else {\n        *0x1027896 = iVar5 + 4 + iVar2;\n        *0x1027874 = uVar1 * 2 + 0x60cc;\n    }\n    *0x1027876 = 0x35;\n    return;\n}\n",
        "token_count": 483
    },
    "01001000": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** __thiscall fcn.01001000(code **param_1, int32_t param_2)\n\n{\n    // [00] -r-x section size 110592 named .text\n    *param_1 = vtable.std::exception.0;\n    *(param_1 + 1) = 0;\n    fcn.01002712(param_2 + 4, param_1 + 1);\n    return param_1;\n}\n",
        "token_count": 98
    },
    "010020ce": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x010020de)\n// WARNING: Removing unreachable block (ram,0x010020df)\n// WARNING: Removing unreachable block (ram,0x010020e5)\n// WARNING: Removing unreachable block (ram,0x010020ef)\n// WARNING: Removing unreachable block (ram,0x010020f6)\n\nvoid fcn.010020ce(void)\n\n{\n    return;\n}\n",
        "token_count": 92
    },
    "010020fa": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x0100210a)\n// WARNING: Removing unreachable block (ram,0x0100210b)\n// WARNING: Removing unreachable block (ram,0x01002111)\n// WARNING: Removing unreachable block (ram,0x0100211b)\n// WARNING: Removing unreachable block (ram,0x01002122)\n\nvoid fcn.010020fa(void)\n\n{\n    return;\n}\n",
        "token_count": 93
    },
    "010064af": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.010064af(int32_t lpCriticalSection)\n\n{\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(lpCriticalSection * 0x18 + 0x1028a50);\n    return;\n}\n",
        "token_count": 49
    },
    "010064f7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.010064f7(int32_t lpCriticalSection)\n\n{\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(lpCriticalSection * 0x18 + 0x1028a50);\n    return;\n}\n",
        "token_count": 51
    },
    "0100677a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0100677a(int16_t *arg_8h, int32_t arg_ch, uint noname_2, uint arg_14h)\n\n{\n    int32_t iVar1;\n    uint32_t arg_8h_00;\n    uint uVar2;\n    int32_t *piVar3;\n    \n    if (arg_8h == NULL) {\n        fcn.01006d9c();\n        *(arg_ch + 8) = 0;\n        *(arg_ch + 0xc) = 0;\n    }\n    else {\n        if (*arg_8h != 0) {\n            arg_8h_00 = fcn.01007976(arg_14h, 0, arg_8h, 0xffffffff, 0, 0, 0, 0);\n            if (arg_8h_00 == 0) {\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                fcn.0100660a(uVar2);\n                piVar3 = fcn.01006640();\n                return *piVar3;\n            }\n            if ((*(arg_ch + 0xc) <= arg_8h_00 && arg_8h_00 != *(arg_ch + 0xc)) &&\n               (iVar1 = fcn.01006db6(arg_8h_00),  iVar1 != 0)) {\n                return iVar1;\n            }\n            iVar1 = fcn.01007976(arg_14h, 0, arg_8h, 0xffffffff, *(arg_ch + 8), *(arg_ch + 0xc), 0, 0);\n            if (iVar1 == 0) {\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                fcn.0100660a(uVar2);\n                piVar3 = fcn.01006640();\n                return *piVar3;\n            }\n            *(arg_ch + 0x10) = iVar1 + -1;\n            return 0;\n        }\n        if ((*(arg_ch + 0xc) == 0) && (iVar1 = fcn.01006db6(1),  iVar1 != 0)) {\n            return iVar1;\n        }\n        **(arg_ch + 8) = 0;\n    }\n    *(arg_ch + 0x10) = 0;\n    return 0;\n}\n",
        "token_count": 524
    },
    "01006db6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.01006db6(uint arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t in_ECX;\n    \n    fcn.01006d9c();\n    iVar1 = fcn.01006e31(in_ECX + 8, arg_8h);\n    if (iVar1 == 0) {\n        *(in_ECX + 0x14) = 1;\n        iVar1 = 0;\n        *(in_ECX + 0xc) = arg_8h;\n    }\n    else {\n        *(in_ECX + 0xc) = 0;\n        *(in_ECX + 0x14) = 0;\n    }\n    return iVar1;\n}\n",
        "token_count": 159
    },
    "01006df2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.01006df2(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t in_ECX;\n    \n    fcn.01006d9c();\n    iVar1 = fcn.01006e31(in_ECX + 8, arg_8h * 2);\n    if (iVar1 == 0) {\n        *(in_ECX + 0x14) = 1;\n        iVar1 = 0;\n        *(in_ECX + 0xc) = arg_8h;\n    }\n    else {\n        *(in_ECX + 0xc) = 0;\n        *(in_ECX + 0x14) = 0;\n    }\n    return iVar1;\n}\n",
        "token_count": 164
    },
    "01007b4b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.01007b4b(void)\n\n{\n    fcn.01007c60(0, \"AreFileApisANSI\", 0x101d420, \"AreFileApisANSI\");\n    return;\n}\n",
        "token_count": 49
    },
    "01007b65": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.01007b65(void)\n\n{\n    fcn.01007c60(0x14, \"LCMapStringEx\", 0x101d45c, \"LCMapStringEx\");\n    return;\n}\n",
        "token_count": 49
    },
    "01007b7f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.01007b7f(void)\n\n{\n    fcn.01007c60(0x16, \"LocaleNameToLCID\", 0x101d474, \"LocaleNameToLCID\");\n    return;\n}\n",
        "token_count": 51
    },
    "01008338": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.01008338(void)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.0100621c();\n    return iVar1 + 8;\n}\n",
        "token_count": 42
    },
    "0100893c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0100893c(int32_t lpCriticalSection)\n\n{\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(lpCriticalSection + 0x20);\n    return;\n}\n",
        "token_count": 42
    },
    "01008950": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.01008950(int32_t lpCriticalSection)\n\n{\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(lpCriticalSection + 0x20);\n    return;\n}\n",
        "token_count": 42
    },
    "0100bfa7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nfloat10 __cdecl fcn.0100bfa7(uint arg_8h, uint noname_1, uint arg_10h, uint arg_14h)\n\n{\n    float10 in_ST0;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    \n    fcn.0100c4c5();\n    return in_ST0;\n}\n",
        "token_count": 92
    },
    "0100d2b1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t fcn.0100d2b1(void)\n\n{\n    uint32_t uVar1;\n    unkint10 in_ST0;\n    uint32_t uStack28;\n    uint16_t uStack24;\n    \n    uStack28 = in_ST0 >> 0x20;\n    uStack24 = in_ST0 >> 0x40;\n    uStack24 = uStack24 & 0x7fff;\n    uVar1 = in_ST0 < 0;\n    if (uStack24 < 0x3fff) {\n        return 0;\n    }\n    if (uStack28 < 0) {\n        if (uStack24 < 0x401e) {\n            return (uStack28 >> (0x3eU - uStack24 & 0x1f) ^ -uVar1) + uVar1;\n        }\n        if (((uStack24 < 0x401f) && (uVar1 != 0)) && (uStack28 == 0x80000000)) {\n            return uStack28;\n        }\n    }\n    return 0x80000000;\n}\n",
        "token_count": 243
    },
    "0100d367": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t fcn.0100d367(void)\n\n{\n    unkint10 in_ST0;\n    uint32_t uStack28;\n    uint16_t uStack24;\n    \n    uStack28 = in_ST0 >> 0x20;\n    uStack24 = in_ST0 >> 0x40;\n    uStack24 = uStack24 & 0x7fff;\n    if (in_ST0 < 0) {\n        if (uStack24 < 0x3fff) {\n            return 0;\n        }\n    }\n    else {\n        if (uStack24 < 0x3fff) {\n            return 0;\n        }\n        if ((uStack28 < 0) && (uStack24 < 0x401f)) {\n            return uStack28 >> (0x3eU - uStack24 & 0x1f);\n        }\n    }\n    return 0xffffffff;\n}\n",
        "token_count": 197
    },
    "0100d4cc": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.0100d4cc(void)\n\n{\n    uint8_t uVar1;\n    uint32_t uVar2;\n    unkint10 in_ST0;\n    uint32_t uStack32;\n    uint32_t uStack28;\n    uint16_t uStack24;\n    \n    uStack32 = in_ST0;\n    uStack28 = in_ST0 >> 0x20;\n    uStack24 = in_ST0 >> 0x40;\n    uStack24 = uStack24 & 0x7fff;\n    if (in_ST0 < 0) {\n        if (uStack24 < 0x3fff) {\n            return 0;\n        }\n    }\n    else {\n        if (uStack24 < 0x3fff) {\n            return 0;\n        }\n        if ((uStack28 < 0) && (uStack24 < 0x403f)) {\n            uVar1 = 0x3e - uStack24;\n            uVar2 = uStack28;\n            if (0x1f < uVar1) {\n                uVar2 = 0;\n                uStack32 = uStack28;\n            }\n            return CONCAT44(uVar2 >> (uVar1 & 0x1f), uStack32 >> (uVar1 & 0x1f) | uVar2 << 0x20 - (uVar1 & 0x1f));\n        }\n    }\n    return 0xffffffffffffffff;\n}\n",
        "token_count": 318
    },
    "0100f170": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff"
        ],
        "decompiled_code": "\nint16_t __fastcall fcn.0100f170(int32_t param_1)\n\n{\n    char cStack4;\n    \n    if (*0x1027880 + *0x1027898 == 0x3c0) {\n        *0x1027878 = *0x10278a4 * -0x42;\n        *0x10278a4 = *0x10278a4 * -0x84 - param_1;\n    }\n    else {\n        *0x1027896 = *0x10278a4 + 2 + param_1;\n        *0x10278a4 = *0x10278a4 * 2 + 0x160cc;\n    }\n    cStack4 = param_1;\n    if (*0x1027896 == 0) {\n        *0x1027878 = (param_1 - (cStack4 + *0x10278a4 * -0x43)) + 0x48 + *0x1027878;\n    }\n    *0x1027874 = *0x10278a4 * -0x39 + 2;\n    *0x1027876 = *0x10278a4 + '\\x02' + cStack4;\n    return *0x1027874;\n}\n",
        "token_count": 282
    },
    "0100fdf0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t fcn.0100fdf0(void)\n\n{\n    char cVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint16_t *puVar5;\n    uint8_t uVar6;\n    uint32_t uVar7;\n    uint32_t uStack8;\n    \n    uVar7 = 0x1eb;\n    uVar2 = uStack8 * 2 - *0x1027876;\n    uVar4 = uVar2;\n    if (uVar2 <= uStack8) {\n        *0x1027880 = *0x1027880 - *0x10278a0;\n        uVar4 = (uStack8 - *0x10278a0) + 0x35;\n    }\n    iVar3 = uVar2 + (uVar4 - *0x10278a0) + 0x48;\n    cVar1 = *0x10278a0;\n    if (*0x1027898 + *0x1027880 == 0x3c0) {\n        uVar4 = *0x1027876 * -0x42;\n        uVar7 = (uVar4 * '\\x02' - *0x1027876) * -0x42;\n        uVar6 = uVar7 * '\\x02' - cVar1;\n    }\n    else {\n        uVar6 = *0x1027876 * '\\x02' - 0x34;\n        *0x1027896 = uVar6 + 2 + *0x10278a0;\n        uVar6 = uVar6 * '\\x02' - 0x34;\n    }\n    puVar5 = 0x1027882;\n    *0x1027876 = uVar6;\n    do {\n        if (uVar7 != *0x1027890) {\n            uVar7 = uVar7 * *puVar5;\n            uVar6 = (uVar7 - cVar1) - uVar6;\n            *0x1027876 = uVar6;\n            if (uVar6 == *0x102788a) break;\n        }\n        puVar5 = puVar5 + 2;\n    } while (puVar5 < 0x102789a);\n    uVar4 = iVar3 + 0x9c2 + uVar4 & 0xffff;\n    if (*0x1027896 == 0) {\n        uVar7 = uVar7 + 0x48 + (*0x10278a0 - uVar6);\n    }\n    else {\n        uVar6 = cVar1 + -0x3e + uVar7;\n        *0x1027876 = uVar6;\n    }\n    *0x10278a4 = (uVar4 - iVar3) + 0x35;\n    *0x10399a8 = 1;\n    do {\n        if (uVar7 != *0x1027890) {\n            uVar7 = uVar7 * *(*0x10399a8 * 2 + 0x1027880);\n            uVar6 = (uVar7 - cVar1) - uVar6;\n            *0x1027876 = uVar6;\n            if (uVar6 == *0x102788a) {\n                return uVar4;\n            }\n        }\n        *0x10399a8 = *0x10399a8 + 2;\n    } while (*0x10399a8 < 0xd);\n    return uVar4;\n}\n",
        "token_count": 785
    },
    "0100ffa0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff"
        ],
        "decompiled_code": "\nuint __fastcall fcn.0100ffa0(uint param_1)\n\n{\n    int32_t iVar1;\n    \n    if (*0x1027880 + *0x1027898 == 0x3c0) {\n        iVar1 = *0x10278a4 * -0x84 - *0x10278a0;\n        *0x1027876 = (iVar1 + '\\x02' + *0x10278a4 * -0x42) * '|' - *0x10278a0;\n        *0x10278a4 = iVar1 * -0x84 - *0x10278a0;\n        return param_1;\n    }\n    iVar1 = *0x10278a4 * 2 + 0x1607a;\n    *0x1027876 = iVar1 * '\\x02' + -0x34;\n    *0x1027896 = (iVar1 & 0xff) + *0x10278a0 + 2;\n    *0x10278a4 = (*0x10278a4 * 2 + 0x160cc) * 2 + 0x160cc;\n    return param_1;\n}\n",
        "token_count": 262
    },
    "010101c0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x010101c3) overlaps instruction at (ram,0x010101c2)\n// \n// WARNING: Removing unreachable block (ram,0x010101d6)\n// WARNING: Removing unreachable block (ram,0x0101020e)\n// WARNING: Removing unreachable block (ram,0x010101e2)\n// WARNING: Removing unreachable block (ram,0x010101c3)\n// WARNING: Type propagation algorithm not settling\n\nvoid __cdecl\nfcn.010101c0(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint noname_4, uint noname_5, uint noname_6, \n            uint noname_7, uint noname_8, uint noname_9, uint noname_10, uint noname_11, uint noname_12, uint arg_3ch, \n            uint noname_14, uint arg_44h, uint arg_48h, uint arg_4ch)\n\n{\n    uint8_t uVar1;\n    uint8_t uVar2;\n    code *pcVar3;\n    uint32_t uVar4;\n    uint8_t uVar5;\n    char cVar6;\n    char *in_EAX;\n    char *pcVar7;\n    int32_t *in_ECX;\n    uint unaff_EBX;\n    int32_t unaff_EBP;\n    uint8_t *unaff_EDI;\n    uint8_t in_AF;\n    uint var_36h;\n    \n    uVar5 = in_EAX;\n    *in_EAX = *in_EAX + uVar5;\n    uVar1 = *unaff_EDI;\n    *unaff_EDI = *unaff_EDI + in_ECX;\n    uVar2 = 9 < (uVar5 & 0xf) | in_AF;\n    uVar5 = uVar5 + uVar2 * -6;\n    uVar4 = in_EAX & 0xffffff00 | uVar5 + (0x9f < uVar5 | CARRY1(uVar1, in_ECX) | uVar2 * (uVar5 < 6)) * -0x60;\n    pcVar7 = uVar4 - *in_ECX;\n    cVar6 = pcVar7;\n    if (SBORROW4(uVar4, *in_ECX)) {\n        *(pcVar7 * 2) = *(pcVar7 * 2) + unaff_EDI;\n        *pcVar7 = *pcVar7 + cVar6;\n    }\n    else {\n        *pcVar7 = *pcVar7 + cVar6;\n        *(unaff_EBP + -0x36) = *(unaff_EBP + -0x36) + (unaff_EBX >> 8);\n        pcVar7 = pcVar7 & 0xffffff00 | cVar6 - *in_ECX;\n        *pcVar7 = *pcVar7 + (cVar6 - *in_ECX);\n    }\n    pcVar3 = swi(3);\n    (*pcVar3)();\n    return;\n}\n",
        "token_count": 682
    },
    "010026dc": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.010026dc(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    uint in_EAX;\n    uint uVar1;\n    uint var_8h;\n    uint var_4h;\n    \n    uVar1 = fcn.0100367b(arg_8h, arg_ch, arg_10h, arg_14h, in_EAX, 0, 0, 0);\n    return uVar1;\n}\n",
        "token_count": 110
    },
    "010096e7": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.010096e7(int32_t arg_8h)\n\n{\n    if ((arg_8h != 0) && (*(arg_8h + -8) == 0xdddd)) {\n        fcn.0100655c(arg_8h + -8);\n    }\n    return;\n}\n",
        "token_count": 70
    },
    "0100b451": {
        "rules": [
            "create or open file"
        ],
        "decompiled_code": "\nvoid fcn.0100b451(void)\n\n{\n    *0x1027850 = (*_sym.imp.KERNEL32.dll_CreateFileW)(L\"CONOUT$\", 0x40000000, 3, 0, 3, 0, 0);\n    return;\n}\n",
        "token_count": 63
    },
    "01004fa9": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nint32_t fcn.01004fa9(uint32_t param_1)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    \n    if (param_1 < 0xffffffe1) {\n        if (param_1 == 0) {\n            param_1 = 1;\n        }\n        do {\n            iVar1 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(*0x1028ca8, 0, param_1);\n            if (iVar1 != 0) {\n                return iVar1;\n            }\n            iVar1 = fcn.01008f9f();\n        } while ((iVar1 != 0) && (iVar1 = fcn.01004f20(param_1),  iVar1 != 0));\n    }\n    puVar2 = fcn.01006640();\n    *puVar2 = 0xc;\n    return 0;\n}\n",
        "token_count": 195
    }
}