{
    "006b5176": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t fcn.006b5176(uint32_t param_1)\n\n{\n    int32_t in_EAX;\n    int32_t iVar1;\n    uint32_t unaff_EDI;\n    \n    do {\n        iVar1 = fcn.00928005();\n        if (iVar1 != 0) {\n            return iVar1;\n        }\n        if (*(in_EAX + 0xc) <= *(in_EAX + 0x2c)) {\n            *(in_EAX + 0x30) = *(in_EAX + 0xc);\n        }\n        fcn.006cffb0(unaff_EDI);\n    } while (((*(in_EAX + 0x24) < unaff_EDI) && (*(in_EAX + 0x18) < param_1)) && (*(in_EAX + 0x48) < 0x112));\n    if (0x112 < *(in_EAX + 0x48)) {\n        *(in_EAX + 0x48) = 0x112;\n    }\n    return 0;\n}\n",
        "token_count": 231
    },
    "006cffb0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.006cffb0(int32_t arg_8h)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    int32_t unaff_ESI;\n    uint var_8h;\n    uint var_4h;\n    \n    uVar1 = *(unaff_ESI + 0x48);\n    if ((uVar1 != 0) && (uVar1 < 0x112)) {\n        uVar2 = *(unaff_ESI + 0x38);\n        uVar3 = *(unaff_ESI + 0x28);\n        uVar5 = *(unaff_ESI + 0x24);\n        iVar4 = *(unaff_ESI + 0x14);\n        uVar6 = uVar1;\n        if (arg_8h - uVar5 < uVar1) {\n            uVar6 = arg_8h - uVar5;\n        }\n        if ((*(unaff_ESI + 0x30) == 0) && (*(unaff_ESI + 0xc) - *(unaff_ESI + 0x2c) <= uVar6)) {\n            *(unaff_ESI + 0x30) = *(unaff_ESI + 0xc);\n        }\n        *(unaff_ESI + 0x2c) = *(unaff_ESI + 0x2c) + uVar6;\n        *(unaff_ESI + 0x48) = uVar1 - uVar6;\n        for (; uVar6 != 0; uVar6 = uVar6 - 1) {\n            *(uVar5 + iVar4) = *(((-(uVar5 < uVar2) & uVar3) - uVar2) + uVar5 + iVar4);\n            uVar5 = uVar5 + 1;\n        }\n        *(unaff_ESI + 0x24) = uVar5;\n    }\n    return;\n}\n",
        "token_count": 456
    },
    "006d2777": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint __cdecl fcn.006d2777(uint8_t *arg_8h)\n\n{\n    uint8_t *puVar1;\n    int16_t iVar2;\n    int32_t in_EAX;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    uint *in_ECX;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    int32_t iVar8;\n    uint32_t uVar9;\n    uint32_t uVar10;\n    uint16_t *puVar11;\n    uint var_18h;\n    uint32_t var_14h;\n    uint32_t var_10h;\n    uint32_t var_ch;\n    uint32_t var_8h;\n    uint var_4h;\n    \n    uVar7 = in_ECX[7];\n    uVar10 = in_ECX[8];\n    puVar1 = arg_8h + in_EAX;\n    iVar4 = in_ECX[4];\n    iVar8 = in_ECX[0xd];\n    uVar9 = (1 << (in_ECX[2] & 0x1f)) - 1U & in_ECX[0xb];\n    if (uVar7 < 0x1000000) {\n        if (puVar1 <= arg_8h) {\n            return 0;\n        }\n        uVar7 = uVar7 << 8;\n        uVar10 = uVar10 << 8 | *arg_8h;\n        arg_8h = arg_8h + 1;\n    }\n    uVar3 = (uVar7 >> 0xb) * *(iVar4 + (iVar8 * 0x10 + uVar9) * 2);\n    if (uVar10 < uVar3) {\n        var_ch = iVar4 + 0xe6c;\n        if ((in_ECX[0xc] != 0) || (in_ECX[0xb] != 0)) {\n            iVar4 = in_ECX[9];\n            if (iVar4 == 0) {\n                iVar4 = in_ECX[10];\n            }\n            var_ch = var_ch + ((*(in_ECX[5] + -1 + iVar4) >> (8U - *in_ECX & 0x1f)) +\n                              (((1 << (in_ECX[1] & 0x1f)) - 1U & in_ECX[0xb]) << (*in_ECX & 0x1f))) * 0x600;\n        }\n        if (in_ECX[0xd] < 7) {\n            uVar7 = 1;\n            do {\n                if (uVar3 < 0x1000000) {\n                    if (puVar1 <= arg_8h) {\n                        return 0;\n                    }\n                    uVar3 = uVar3 << 8;\n                    uVar10 = uVar10 << 8 | *arg_8h;\n                    arg_8h = arg_8h + 1;\n                }\n                uVar9 = (uVar3 >> 0xb) * *(var_ch + uVar7 * 2);\n                if (uVar10 < uVar9) {\n                    uVar7 = uVar7 * 2;\n                    uVar3 = uVar9;\n                }\n                else {\n                    uVar3 = uVar3 - uVar9;\n                    uVar10 = uVar10 - uVar9;\n                    uVar7 = uVar7 * 2 + 1;\n                }\n            } while (uVar7 < 0x100);\n        }\n        else {\n            if (in_ECX[9] < in_ECX[0xe]) {\n                iVar4 = in_ECX[10];\n            }\n            else {\n                iVar4 = 0;\n            }\n            uVar9 = *((in_ECX[5] - in_ECX[0xe]) + in_ECX[9] + iVar4);\n            var_8h = 0x100;\n            uVar7 = 1;\n            do {\n                uVar9 = uVar9 * 2;\n                iVar4 = 0;\n                if (uVar9 != 0) {\n                    for (; (uVar9 >> iVar4 & 1) == 0; iVar4 = iVar4 + 1) {\n                    }\n                }\n                uVar5 = var_8h & uVar9;\n                if (uVar3 < 0x1000000) {\n                    if (puVar1 <= arg_8h) {\n                        return 0;\n                    }\n                    uVar3 = uVar3 << 8;\n                    uVar10 = uVar10 << 8 | *arg_8h;\n                    arg_8h = arg_8h + 1;\n                }\n                uVar6 = (uVar3 >> 0xb) * *(var_ch + (uVar5 + uVar7 + var_8h) * 2);\n                if (uVar10 < uVar6) {\n                    uVar7 = uVar7 * 2;\n                    uVar5 = ~uVar5;\n                    uVar3 = uVar6;\n                }\n                else {\n                    uVar3 = uVar3 - uVar6;\n                    uVar10 = uVar10 - uVar6;\n                    uVar7 = uVar7 * 2 + 1;\n                }\n                var_8h = var_8h & uVar5;\n            } while (uVar7 < 0x100);\n        }\n        var_18h = 1;\n        goto code_r0x006ce3a8;\n    }\n    uVar7 = uVar7 - uVar3;\n    uVar10 = uVar10 - uVar3;\n    if (uVar7 < 0x1000000) {\n        if (puVar1 <= arg_8h) {\n            return 0;\n        }\n        uVar7 = uVar7 * 0x100;\n        uVar10 = uVar10 * 0x100 | *arg_8h;\n        arg_8h = arg_8h + 1;\n    }\n    uVar5 = (uVar7 >> 0xb) * *(iVar4 + 0x180 + iVar8 * 2);\n    if (uVar10 < uVar5) {\n        var_ch = 0;\n        puVar11 = iVar4 + 0x664;\n        var_18h = 2;\n    }\n    else {\n        uVar7 = uVar7 - uVar5;\n        uVar10 = uVar10 - uVar5;\n        var_18h = 3;\n        if (uVar7 < 0x1000000) {\n            if (puVar1 <= arg_8h) {\n                return 0;\n            }\n            uVar7 = uVar7 * 0x100;\n            uVar10 = uVar10 * 0x100 | *arg_8h;\n            arg_8h = arg_8h + 1;\n        }\n        uVar3 = (uVar7 >> 0xb) * *(iVar4 + 0x198 + iVar8 * 2);\n        if (uVar10 < uVar3) {\n            if (uVar3 < 0x1000000) {\n                if (puVar1 <= arg_8h) {\n                    return 0;\n                }\n                uVar3 = uVar3 * 0x100;\n                uVar10 = uVar10 << 8 | *arg_8h;\n                arg_8h = arg_8h + 1;\n            }\n            uVar5 = (uVar3 >> 0xb) * *(iVar4 + ((iVar8 + 0xf) * 0x10 + uVar9) * 2);\n            if (uVar10 < uVar5) {\n                if ((uVar5 < 0x1000000) && (puVar1 <= arg_8h)) {\n                    return 0;\n                }\n                return 3;\n            }\ncode_r0x006c2e75:\n            iVar2 = 0xf;\n            if (uVar10 != 0) {\n                for (; uVar10 >> iVar2 == 0; iVar2 = iVar2 + -1) {\n                }\n            }\n            uVar10 = uVar10 - uVar5;\n            uVar5 = uVar3 - uVar5;\n        }\n        else {\n            uVar7 = uVar7 - uVar3;\n            uVar10 = uVar10 - uVar3;\n            if (uVar7 < 0x1000000) {\n                if (puVar1 <= arg_8h) {\n                    return 0;\n                }\n                uVar7 = uVar7 * 0x100;\n                uVar10 = uVar10 * 0x100 | *arg_8h;\n                arg_8h = arg_8h + 1;\n            }\n            uVar5 = (uVar7 >> 0xb) * *(iVar4 + 0x1b0 + iVar8 * 2);\n            if (uVar5 <= uVar10) {\n                uVar3 = uVar7 - uVar5;\n                uVar10 = uVar10 - uVar5;\n                if (uVar3 < 0x1000000) {\n                    if (puVar1 <= arg_8h) {\n                        return 0;\n                    }\n                    uVar3 = uVar3 * 0x100;\n                    uVar10 = uVar10 * 0x100 | *arg_8h;\n                    arg_8h = arg_8h + 1;\n                }\n                uVar5 = (uVar3 >> 0xb) * *(iVar4 + 0x1c8 + iVar8 * 2);\n                if (uVar5 <= uVar10) goto code_r0x006c2e75;\n            }\n        }\n        var_ch = 0xc;\n        puVar11 = iVar4 + 0xa68;\n    }\n    if (uVar5 < 0x1000000) {\n        if (puVar1 <= arg_8h) {\n            return 0;\n        }\n        uVar5 = uVar5 << 8;\n        uVar10 = uVar10 << 8 | *arg_8h;\n        arg_8h = arg_8h + 1;\n    }\n    uVar3 = (uVar5 >> 0xb) * *puVar11;\n    if (uVar10 < uVar3) {\n        puVar11 = puVar11 + uVar9 * 8 + 2;\n        var_14h = 0;\n        var_10h = 8;\n    }\n    else {\n        uVar5 = uVar5 - uVar3;\n        uVar10 = uVar10 - uVar3;\n        if (uVar5 < 0x1000000) {\n            if (puVar1 <= arg_8h) {\n                return 0;\n            }\n            uVar5 = uVar5 * 0x100;\n            uVar10 = uVar10 * 0x100 | *arg_8h;\n            arg_8h = arg_8h + 1;\n        }\n        uVar7 = (uVar5 >> 0xb) * puVar11[1];\n        if (uVar10 < uVar7) {\n            puVar11 = puVar11 + uVar9 * 8 + 0x82;\n            var_14h = 8;\n            var_10h = 8;\n            uVar3 = uVar7;\n        }\n        else {\n            uVar3 = uVar5 - uVar7;\n            uVar10 = uVar10 - uVar7;\n            puVar11 = puVar11 + 0x102;\n            var_14h = 0x10;\n            var_10h = 0x100;\n        }\n    }\n    uVar7 = 1;\n    do {\n        if (uVar3 < 0x1000000) {\n            if (puVar1 <= arg_8h) {\n                return 0;\n            }\n            uVar3 = uVar3 << 8;\n            uVar10 = uVar10 << 8 | *arg_8h;\n            arg_8h = arg_8h + 1;\n        }\n        uVar9 = (uVar3 >> 0xb) * puVar11[uVar7];\n        if (uVar10 < uVar9) {\n            uVar7 = uVar7 * 2;\n            uVar3 = uVar9;\n        }\n        else {\n            uVar3 = uVar3 - uVar9;\n            uVar10 = uVar10 - uVar9;\n            uVar7 = uVar7 * 2 + 1;\n        }\n    } while (uVar7 < var_10h);\n    uVar7 = uVar7 + (var_14h - var_10h);\n    if (var_ch < 4) {\n        if (3 < uVar7) {\n            uVar7 = 3;\n            iVar8 = 0x1f;\n            if (uVar3 != 0) {\n                for (; uVar3 >> iVar8 == 0; iVar8 = iVar8 + -1) {\n                }\n            }\n        }\n        uVar9 = 1;\n        do {\n            if (uVar3 < 0x1000000) {\n                if (puVar1 <= arg_8h) {\n                    return 0;\n                }\n                uVar3 = uVar3 << 8;\n                uVar10 = uVar10 << 8 | *arg_8h;\n                arg_8h = arg_8h + 1;\n            }\n            uVar5 = (uVar3 >> 0xb) * *(uVar7 * 0x80 + 0x360 + iVar4 + uVar9 * 2);\n            if (uVar10 < uVar5) {\n                uVar9 = uVar9 * 2;\n                uVar3 = uVar5;\n            }\n            else {\n                uVar3 = uVar3 - uVar5;\n                uVar10 = uVar10 - uVar5;\n                uVar9 = uVar9 * 2 + 1;\n            }\n        } while (uVar9 < 0x40);\n        uVar9 = uVar9 - 0x40;\n        if (3 < uVar9) {\n            var_14h = (uVar9 >> 1) - 1;\n            if (uVar9 < 0xe) {\n                iVar8 = 0x1f;\n                if (var_14h != 0) {\n                    for (; var_14h >> iVar8 == 0; iVar8 = iVar8 + -1) {\n                    }\n                }\n                var_ch = iVar4 + 0x55e + (((uVar9 & 1 | 2) << (var_14h & 0x1f)) - uVar9) * 2;\n            }\n            else {\n                iVar8 = (uVar9 >> 1) - 5;\n                do {\n                    if (uVar3 < 0x1000000) {\n                        if (puVar1 <= arg_8h) {\n                            return 0;\n                        }\n                        uVar3 = uVar3 << 8;\n                        uVar10 = uVar10 << 8 | *arg_8h;\n                        arg_8h = arg_8h + 1;\n                    }\n                    uVar3 = uVar3 >> 1;\n                    uVar10 = uVar10 - (0xffffffffU - (uVar10 - uVar3 >> 0x1f) & uVar3);\n                    iVar8 = iVar8 + -1;\n                } while (iVar8 != 0);\n                var_ch = iVar4 + 0x644;\n                var_14h = 4;\n            }\n            iVar4 = 1;\n            do {\n                if (uVar3 < 0x1000000) {\n                    if (puVar1 <= arg_8h) {\n                        return 0;\n                    }\n                    uVar10 = uVar10 << 8 | *arg_8h;\n                    uVar3 = uVar3 << 8;\n                    arg_8h = arg_8h + 1;\n                }\n                uVar7 = (uVar3 >> 0xb) * *(var_ch + iVar4 * 2);\n                if (uVar10 < uVar7) {\n                    iVar4 = iVar4 * 2;\n                    uVar3 = uVar7;\n                }\n                else {\n                    uVar3 = uVar3 - uVar7;\n                    uVar10 = uVar10 - uVar7;\n                    iVar4 = iVar4 * 2 + 1;\n                }\n                var_14h = var_14h - 1;\n            } while (var_14h != 0);\n        }\n    }\ncode_r0x006ce3a8:\n    if (0xffffff < uVar3) {\n        return var_18h;\n    }\n    if (puVar1 <= arg_8h) {\n        return 0;\n    }\n    return var_18h;\n}\n",
        "token_count": 3753
    },
    "006b7639": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x006b7713)\n\nbool fcn.006b7639(uint32_t param_1, uchar *param_2, uint32_t *param_3, uint *param_4)\n\n{\n    uint *in_EAX;\n    uint32_t uVar1;\n    uchar *puVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint *puVar5;\n    uint32_t uStack8;\n    \n    uStack8 = *param_3;\n    *param_3 = 0;\n    fcn.006cffb0(param_1);\n    *param_4 = 0;\n    iVar3 = in_EAX[0x12];\n    do {\n        if (iVar3 == 0x112) {\n            if (in_EAX[8] == 0) {\n                *param_4 = 1;\n                iVar3 = 0;\n                if (*0x10 != 0x4) {\n                    for (; (&stack0xfffffffc >> iVar3 & 1) == 0; iVar3 = iVar3 + 1) {\n                    }\n                }\n            }\n            return in_EAX[8] != 0;\n        }\n        if (in_EAX[0x13] != 0) {\n            while ((uStack8 != 0 && (in_EAX[0x16] < 5))) {\n                *(in_EAX[0x16] + 0x5c + in_EAX) = *param_2;\n                in_EAX[0x16] = in_EAX[0x16] + 1;\n                *param_3 = *param_3 + 1;\n                param_2 = param_2 + 1;\n                uStack8 = uStack8 - 1;\n            }\n            if (in_EAX[0x16] < 5) goto code_r0x006d9398;\n            if (*(in_EAX + 0x17) != '\\0') {\n                return true;\n            }\n            in_EAX[8] = CONCAT31(CONCAT21(CONCAT11(*(in_EAX + 0x5d), *(in_EAX + 0x5e)), *(in_EAX + 0x5f)), \n                                 *(in_EAX + 0x18));\n            in_EAX[7] = 0xffffffff;\n            in_EAX[0x13] = 0;\n            in_EAX[0x16] = 0;\n        }\n        if (param_1 <= in_EAX[9]) {\n            if ((in_EAX[0x12] == 0) && (in_EAX[8] == 0)) {\n                *param_4 = 4;\n                return false;\n            }\n            *param_4 = 2;\n            return false;\n        }\n        if (in_EAX[0x14] != 0) {\n            rdtsc();\n            rdtsc();\n            uVar1 = (0x300 << (in_EAX[1] + *in_EAX & 0x1fU)) + 0x736;\n            if (uVar1 != 0) {\n                puVar5 = in_EAX[4];\n                for (uVar4 = uVar1 >> 1; uVar4 != 0; uVar4 = uVar4 - 1) {\n                    *puVar5 = 0x4000400;\n                    puVar5 = puVar5 + 1;\n                }\n                for (uVar1 = (uVar1 & 1) != 0; uVar1 != 0; uVar1 = uVar1 - 1) {\n                    *puVar5 = 0x400;\n                    puVar5 = puVar5 + 2;\n                }\n            }\n            in_EAX[0x11] = 1;\n            in_EAX[0x10] = 1;\n            in_EAX[0xf] = 1;\n            in_EAX[0xe] = 1;\n            in_EAX[0xd] = 0;\n            in_EAX[0x14] = 0;\n        }\n        uVar1 = in_EAX[0x16];\n        if (uVar1 == 0) {\n            if (uStack8 < 0x14) {\n                iVar3 = fcn.006d2777(param_2);\n                puVar2 = param_2;\n                if (iVar3 == 0) {\n                    puVar2 = param_2 + uStack8;\n                    if (param_2 != puVar2) {\n                        iVar3 = 0x5c - param_2;\n                        do {\n                            param_2[in_EAX + iVar3] = *param_2;\n                            param_2 = param_2 + 1;\n                        } while (param_2 != puVar2);\n                    }\n                    in_EAX[0x16] = uStack8;\n                    *param_3 = *param_3 + uStack8;\ncode_r0x006d9398:\n                    *param_4 = 3;\n                    return false;\n                }\n            }\n            else {\n                puVar2 = param_2 + (uStack8 - 0x14);\n            }\n            in_EAX[6] = param_2;\n            iVar3 = fcn.006b5176(puVar2);\n            if (iVar3 != 0) {\n                return true;\n            }\n            iVar3 = 0;\n            if (*0x10 != 0x4) {\n                for (; (&stack0xfffffffc >> iVar3 & 1) == 0; iVar3 = iVar3 + 1) {\n                }\n            }\n            iVar3 = in_EAX[6] - param_2;\n            *param_3 = *param_3 + iVar3;\n        }\n        else {\n            for (uVar4 = 0; (uVar1 < 0x14 && (uVar4 < uStack8)); uVar4 = uVar4 + 1) {\n                *(uVar1 + 0x5c + in_EAX) = param_2[uVar4];\n                uVar1 = uVar1 + 1;\n            }\n            in_EAX[0x16] = uVar1;\n            if ((uVar1 < 0x14) && (iVar3 = fcn.006d2777(in_EAX + 0x17),  iVar3 == 0)) {\n                *param_3 = *param_3 + uVar4;\n                *param_4 = 3;\n                return false;\n            }\n            in_EAX[6] = in_EAX + 0x17;\n            iVar3 = fcn.006b5176(in_EAX + 0x17);\n            if (iVar3 != 0) {\n                return true;\n            }\n            iVar3 = (uVar4 - 0x5c) + ((in_EAX[6] - uVar1) - in_EAX);\n            *param_3 = *param_3 + iVar3;\n            in_EAX[0x16] = 0;\n        }\n        param_2 = param_2 + iVar3;\n        uStack8 = uStack8 - iVar3;\n        iVar3 = in_EAX[0x12];\n    } while( true );\n}\n",
        "token_count": 1589
    },
    "00928005": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x006ea0f4)\n\nuint fcn.00928005(uint *param_1, uint16_t *param_2, uint8_t *param_3)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    uint uVar3;\n    uint16_t *puVar4;\n    uint uVar5;\n    uint16_t *puVar6;\n    int16_t iVar7;\n    uint32_t uVar8;\n    uint16_t *puVar9;\n    uint16_t *puVar10;\n    uint32_t uVar11;\n    uint32_t uVar12;\n    uint16_t uVar13;\n    uint32_t uVar14;\n    uchar *puVar15;\n    int32_t iVar16;\n    uint32_t uVar17;\n    int32_t iVar18;\n    uint32_t uVar19;\n    uchar *puVar20;\n    uint32_t uVar21;\n    uint32_t uVar22;\n    uint16_t *puVar23;\n    uint16_t *puVar24;\n    int32_t iStack72;\n    uint8_t uStack68;\n    uint16_t *puStack60;\n    uint16_t *puStack52;\n    uint16_t *puStack48;\n    int32_t iStack44;\n    uint32_t uStack32;\n    uint16_t *puStack28;\n    uint32_t uStack24;\n    uint32_t uStack20;\n    uint16_t *puStack16;\n    int32_t iStack12;\n    uint8_t *puStack8;\n    \n    puStack28 = param_1[0xe];\n    iVar1 = param_1[4];\n    puStack48 = param_1[0xf];\n    puStack52 = param_1[0x10];\n    uStack24 = param_1[0xd];\n    puStack60 = param_1[0x11];\n    uVar21 = param_1[8];\n    iVar18 = 0;\n    if (*0x10 != 0x60) {\n        for (; (&stack0xffffffa0 >> iVar18 & 1) == 0; iVar18 = iVar18 + 1) {\n        }\n    }\n    uVar2 = param_1[2];\n    uVar3 = param_1[1];\n    puVar4 = param_1[5];\n    puStack16 = param_1[9];\n    uVar5 = *param_1;\n    puVar6 = param_1[10];\n    uStack20 = param_1[0xb];\n    puStack8 = param_1[6];\n    uVar22 = param_1[0xc];\n    uVar17 = param_1[7];\n    iStack44 = 0;\n    do {\n        puVar24 = puStack16;\n        puVar23 = puStack60;\n        uVar11 = uStack20 & (1 << (uVar2 & 0x1f)) - 1U;\n        puVar9 = iVar1 + (uStack24 * 0x10 + uVar11) * 2;\n        uVar13 = *puVar9;\n        uVar8 = uVar17;\n        if (uVar17 < 0x1000000) {\n            uVar8 = uVar17 << 8;\n            uVar21 = uVar21 << 8 | *puStack8;\n            puStack8 = puStack8 + 1;\n        }\n        uVar17 = (uVar8 >> 0xb) * uVar13;\n        if (uVar21 < uVar17) {\n            *puVar9 = (0x800 - uVar13 >> 5) + uVar13;\n            iVar18 = iVar1 + 0xe6c;\n            if ((uVar22 != 0) || (uStack20 != 0)) {\n                puVar9 = puStack16;\n                if (puStack16 == NULL) {\n                    puVar9 = puVar6;\n                }\n                uStack68 = uVar5;\n                iVar18 = iVar18 + ((*(puVar9 + -1 + puVar4) >> (8 - uStack68 & 0x1f)) +\n                                  ((uStack20 & (1 << (uVar3 & 0x1f)) - 1U) << (uStack68 & 0x1f))) * 0x600;\n            }\n            if (uStack24 < 7) {\n                uVar12 = uStack24;\n                if (3 < uStack24) {\n                    uVar12 = 3;\n                }\n                uVar8 = 1;\n                do {\n                    uVar13 = *(iVar18 + uVar8 * 2);\n                    if (uVar17 < 0x1000000) {\n                        uVar17 = uVar17 << 8;\n                        uVar21 = uVar21 << 8 | *puStack8;\n                        puStack8 = puStack8 + 1;\n                    }\n                    uVar11 = (uVar17 >> 0xb) * uVar13;\n                    if (uVar21 < uVar11) {\n                        *(iVar18 + uVar8 * 2) = (0x800 - uVar13 >> 5) + uVar13;\n                        uVar8 = uVar8 * 2;\n                        uVar17 = uVar11;\n                    }\n                    else {\n                        uVar17 = uVar17 - uVar11;\n                        uVar21 = uVar21 - uVar11;\n                        *(iVar18 + uVar8 * 2) = uVar13 - (uVar13 >> 5);\n                        uVar8 = uVar8 * 2 + 1;\n                    }\n                } while (uVar8 < 0x100);\n            }\n            else {\n                uStack32 = 0x100;\n                uVar11 = *(((-(puStack16 < puStack28) & puVar6) - puStack28) + param_1[5] + puStack16);\n                uVar12 = (-(uStack24 < 10) & 0xfffffffd) + 6;\n                uVar8 = 1;\n                do {\n                    uVar11 = uVar11 * 2;\n                    uVar14 = uStack32 & uVar11;\n                    puVar9 = iVar18 + (uStack32 + uVar14 + uVar8) * 2;\n                    uVar13 = *puVar9;\n                    if (uVar17 < 0x1000000) {\n                        uVar17 = uVar17 << 8;\n                        uVar21 = uVar21 << 8 | *puStack8;\n                        puStack8 = puStack8 + 1;\n                    }\n                    uVar19 = (uVar17 >> 0xb) * uVar13;\n                    if (uVar21 < uVar19) {\n                        *puVar9 = (0x800 - uVar13 >> 5) + uVar13;\n                        uVar8 = uVar8 * 2;\n                        uVar14 = ~uVar14;\n                        uVar17 = uVar19;\n                    }\n                    else {\n                        uVar17 = uVar17 - uVar19;\n                        uVar21 = uVar21 - uVar19;\n                        *puVar9 = uVar13 - (uVar13 >> 5);\n                        uVar8 = uVar8 * 2 + 1;\n                    }\n                    uStack32 = uStack32 & uVar14;\n                } while (uVar8 < 0x100);\n            }\n            uStack24 = uStack24 - uVar12;\n            *(puStack16 + puVar4) = uVar8;\n            uStack20 = uStack20 + 1;\n            puVar9 = puVar4;\n            puVar23 = puStack16 + 1;\n        }\n        else {\n            uVar8 = uVar8 - uVar17;\n            uVar21 = uVar21 - uVar17;\n            *puVar9 = uVar13 - (uVar13 >> 5);\n            uVar13 = *(iVar1 + 0x180 + uStack24 * 2);\n            if (uVar8 < 0x1000000) {\n                uVar8 = uVar8 * 0x100;\n                uVar21 = uVar21 * 0x100 | *puStack8;\n                puStack8 = puStack8 + 1;\n            }\n            uVar12 = (uVar8 >> 0xb) * uVar13;\n            if (uVar21 < uVar12) {\n                *(iVar1 + 0x180 + uStack24 * 2) = (0x800 - uVar13 >> 5) + uVar13;\n                uStack24 = uStack24 + 0xc;\n                puVar9 = iVar1 + 0x664;\n            }\n            else {\n                uVar8 = uVar8 - uVar12;\n                uVar21 = uVar21 - uVar12;\n                *(iVar1 + 0x180 + uStack24 * 2) = uVar13 - (uVar13 >> 5);\n                if ((uVar22 == 0) && (uStack20 == 0)) {\n                    return 1;\n                }\n                uVar13 = *(iVar1 + 0x198 + uStack24 * 2);\n                if (uVar8 < 0x1000000) {\n                    uVar8 = uVar8 * 0x100;\n                    uVar21 = uVar21 * 0x100 | *puStack8;\n                    puStack8 = puStack8 + 1;\n                }\n                uVar12 = (uVar8 >> 0xb) * uVar13;\n                if (uVar21 < uVar12) {\n                    *(iVar1 + 0x198 + uStack24 * 2) = (0x800 - uVar13 >> 5) + uVar13;\n                    puVar9 = iVar1 + ((uStack24 + 0xf) * 0x10 + uVar11) * 2;\n                    uVar13 = *puVar9;\n                    if (uVar12 < 0x1000000) {\n                        uVar12 = uVar12 * 0x100;\n                        uVar21 = uVar21 << 8 | *puStack8;\n                        puStack8 = puStack8 + 1;\n                    }\n                    uVar17 = (uVar12 >> 0xb) * uVar13;\n                    if (uVar21 < uVar17) {\n                        *puVar9 = (0x800 - uVar13 >> 5) + uVar13;\n                        iVar7 = 0;\n                        if (uVar17 != 0) {\n                            for (; (uVar17 >> iVar7 & 1) == 0; iVar7 = iVar7 + 1) {\n                            }\n                        }\n                        uStack20 = uStack20 + 1;\n                        *(puStack16 + puVar4) =\n                             *(((-(puStack16 < puStack28) & puVar6) - puStack28) + puStack16 + puVar4);\n                        puVar9 = puStack16 + 1;\n                        uStack24 = (-(uStack24 < 7) & 0xfffffffe) + 0xb;\n                        puVar23 = puVar9;\n                        goto code_r0x006e5306;\n                    }\n                    uVar12 = uVar12 - uVar17;\n                    uVar21 = uVar21 - uVar17;\n                    *puVar9 = uVar13 - (uVar13 >> 5);\n                }\n                else {\n                    uVar8 = uVar8 - uVar12;\n                    uVar21 = uVar21 - uVar12;\n                    *(iVar1 + 0x198 + uStack24 * 2) = uVar13 - (uVar13 >> 5);\n                    iVar7 = 0xf;\n                    if (uVar21 != 0) {\n                        for (; uVar21 >> iVar7 == 0; iVar7 = iVar7 + -1) {\n                        }\n                    }\n                    uVar13 = *(iVar1 + 0x1b0 + uStack24 * 2);\n                    if (uVar8 < 0x1000000) {\n                        uVar8 = uVar8 * 0x100;\n                        uVar21 = uVar21 * 0x100 | *puStack8;\n                        puStack8 = puStack8 + 1;\n                    }\n                    uVar12 = (uVar8 >> 0xb) * uVar13;\n                    if (uVar21 < uVar12) {\n                        *(iVar1 + 0x1b0 + uStack24 * 2) = (0x800 - uVar13 >> 5) + uVar13;\n                        puVar23 = puStack48;\n                    }\n                    else {\n                        uVar8 = uVar8 - uVar12;\n                        uVar21 = uVar21 - uVar12;\n                        *(iVar1 + 0x1b0 + uStack24 * 2) = uVar13 - (uVar13 >> 5);\n                        uVar13 = *(iVar1 + 0x1c8 + uStack24 * 2);\n                        if (uVar8 < 0x1000000) {\n                            uVar8 = uVar8 * 0x100;\n                            uVar21 = uVar21 * 0x100 | *puStack8;\n                            puStack8 = puStack8 + 1;\n                        }\n                        uVar17 = (uVar8 >> 0xb) * uVar13;\n                        if (uVar21 < uVar17) {\n                            *(iVar1 + 0x1c8 + uStack24 * 2) = (0x800 - uVar13 >> 5) + uVar13;\n                            uVar12 = uVar17;\n                            puVar23 = puStack52;\n                        }\n                        else {\n                            uVar12 = uVar8 - uVar17;\n                            uVar21 = uVar21 - uVar17;\n                            *(iVar1 + 0x1c8 + uStack24 * 2) = uVar13 - (uVar13 >> 5);\n                            puStack60 = puStack52;\n                        }\n                        puStack52 = puStack48;\n                    }\n                    puStack48 = puStack28;\n                    puVar9 = puStack28;\n                    puStack28 = puVar23;\n                }\n                puVar23 = CONCAT22(uVar12 >> 0x2f, 0x3bff);\n                if (uStack24 == 7) {\n                    puVar23 = puVar9;\n                }\n                iVar18 = 0;\n                if (puVar23 != NULL) {\n                    for (; (puVar23 >> iVar18 & 1) == 0; iVar18 = iVar18 + 1) {\n                    }\n                }\n                uStack24 = (-(uStack24 < 7) & 0xfffffffd) + 0xb;\n                puVar9 = iVar1 + 0xa68;\n            }\n            uVar13 = *puVar9;\n            if (uVar12 < 0x1000000) {\n                uVar12 = uVar12 << 8;\n                uVar21 = uVar21 << 8 | *puStack8;\n                puStack8 = puStack8 + 1;\n            }\n            uVar17 = (uVar12 >> 0xb) * uVar13;\n            if (uVar21 < uVar17) {\n                *puVar9 = (0x800 - uVar13 >> 5) + uVar13;\n                puVar9 = puVar9 + uVar11 * 8 + 2;\n                iStack12 = 0;\n                uStack32 = 8;\n            }\n            else {\n                uVar12 = uVar12 - uVar17;\n                uVar21 = uVar21 - uVar17;\n                *puVar9 = uVar13 - (uVar13 >> 5);\n                uVar13 = puVar9[1];\n                if (uVar12 < 0x1000000) {\n                    uVar12 = uVar12 * 0x100;\n                    uVar21 = uVar21 * 0x100 | *puStack8;\n                    puStack8 = puStack8 + 1;\n                }\n                uVar8 = (uVar12 >> 0xb) * uVar13;\n                if (uVar21 < uVar8) {\n                    puVar9[1] = (0x800 - uVar13 >> 5) + uVar13;\n                    puVar9 = puVar9 + uVar11 * 8 + 0x82;\n                    iStack12 = 8;\n                    uStack32 = 8;\n                    uVar17 = uVar8;\n                }\n                else {\n                    uVar17 = uVar12 - uVar8;\n                    uVar21 = uVar21 - uVar8;\n                    puVar9[1] = uVar13 - (uVar13 >> 5);\n                    puVar9 = puVar9 + 0x102;\n                    iStack12 = 0x10;\n                    uStack32 = 0x100;\n                }\n            }\n            uVar8 = 1;\n            do {\n                uVar13 = puVar9[uVar8];\n                if (uVar17 < 0x1000000) {\n                    uVar17 = uVar17 << 8;\n                    uVar21 = uVar21 << 8 | *puStack8;\n                    puStack8 = puStack8 + 1;\n                }\n                uVar11 = (uVar17 >> 0xb) * uVar13;\n                if (uVar21 < uVar11) {\n                    iVar18 = 0x1f;\n                    if (uStack24 != 0) {\n                        for (; uStack24 >> iVar18 == 0; iVar18 = iVar18 + -1) {\n                        }\n                    }\n                    puVar9[uVar8] = (0x800 - uVar13 >> 5) + uVar13;\n                    uVar8 = uVar8 * 2;\n                    uVar17 = uVar11;\n                }\n                else {\n                    uVar17 = uVar17 - uVar11;\n                    uVar21 = uVar21 - uVar11;\n                    puVar9[uVar8] = uVar13 - (uVar13 >> 5);\n                    uVar8 = uVar8 * 2 + 1;\n                }\n            } while (uVar8 < uStack32);\n            uVar8 = uVar8 + (iStack12 - uStack32);\n            if (0xb < uStack24) {\n                uVar11 = uVar8;\n                if (3 < uVar8) {\n                    uVar11 = 3;\n                }\n                iVar18 = uVar11 * 0x80 + 0x360 + iVar1;\n                uVar13 = *(iVar18 + 2);\n                if (uVar17 < 0x1000000) {\n                    uVar17 = uVar17 << 8;\n                    uVar21 = uVar21 << 8 | *puStack8;\n                    puStack8 = puStack8 + 1;\n                }\n                uVar11 = (uVar17 >> 0xb) * uVar13;\n                if (uVar21 < uVar11) {\n                    *(iVar18 + 2) = (0x800 - uVar13 >> 5) + uVar13;\n                    iVar16 = 2;\n                    uVar17 = uVar11;\n                }\n                else {\n                    uVar17 = uVar17 - uVar11;\n                    uVar21 = uVar21 - uVar11;\n                    *(iVar18 + 2) = uVar13 - (uVar13 >> 5);\n                    iVar16 = 3;\n                }\n                iVar16 = iVar16 * 2;\n                uVar13 = *(iVar16 + iVar18);\n                if (uVar17 < 0x1000000) {\n                    uVar17 = uVar17 << 8;\n                    uVar21 = uVar21 << 8 | *puStack8;\n                    puStack8 = puStack8 + 1;\n                }\n                uVar11 = (uVar17 >> 0xb) * uVar13;\n                if (uVar21 < uVar11) {\n                    *(iVar16 + iVar18) = (0x800 - uVar13 >> 5) + uVar13;\n                    uVar17 = uVar11;\n                }\n                else {\n                    uVar17 = uVar17 - uVar11;\n                    uVar21 = uVar21 - uVar11;\n                    *(iVar16 + iVar18) = uVar13 - (uVar13 >> 5);\n                    iVar16 = iVar16 + 1;\n                }\n                iVar16 = iVar16 * 2;\n                uVar13 = *(iVar16 + iVar18);\n                if (uVar17 < 0x1000000) {\n                    uVar17 = uVar17 << 8;\n                    uVar21 = uVar21 << 8 | *puStack8;\n                    puStack8 = puStack8 + 1;\n                }\n                uVar11 = (uVar17 >> 0xb) * uVar13;\n                if (uVar21 < uVar11) {\n                    *(iVar16 + iVar18) = (0x800 - uVar13 >> 5) + uVar13;\n                    uVar17 = uVar11;\n                }\n                else {\n                    uVar17 = uVar17 - uVar11;\n                    uVar21 = uVar21 - uVar11;\n                    *(iVar16 + iVar18) = uVar13 - (uVar13 >> 5);\n                    iVar16 = iVar16 + 1;\n                }\n                iVar16 = iVar16 * 2;\n                uVar13 = *(iVar16 + iVar18);\n                if (uVar17 < 0x1000000) {\n                    uVar17 = uVar17 << 8;\n                    uVar21 = uVar21 << 8 | *puStack8;\n                    puStack8 = puStack8 + 1;\n                }\n                uVar11 = (uVar17 >> 0xb) * uVar13;\n                if (uVar21 < uVar11) {\n                    *(iVar16 + iVar18) = (0x800 - uVar13 >> 5) + uVar13;\n                    uVar17 = uVar11;\n                }\n                else {\n                    uVar17 = uVar17 - uVar11;\n                    uVar21 = uVar21 - uVar11;\n                    *(iVar16 + iVar18) = uVar13 - (uVar13 >> 5);\n                    iVar16 = iVar16 + 1;\n                }\n                iVar16 = iVar16 * 2;\n                uVar13 = *(iVar16 + iVar18);\n                if (uVar17 < 0x1000000) {\n                    uVar17 = uVar17 << 8;\n                    uVar21 = uVar21 << 8 | *puStack8;\n                    puStack8 = puStack8 + 1;\n                }\n                uVar11 = (uVar17 >> 0xb) * uVar13;\n                if (uVar21 < uVar11) {\n                    *(iVar16 + iVar18) = (0x800 - uVar13 >> 5) + uVar13;\n                    uVar17 = uVar11;\n                }\n                else {\n                    uVar17 = uVar17 - uVar11;\n                    uVar21 = uVar21 - uVar11;\n                    *(iVar16 + iVar18) = uVar13 - (uVar13 >> 5);\n                    iVar16 = iVar16 + 1;\n                }\n                iVar16 = iVar16 * 2;\n                uVar13 = *(iVar16 + iVar18);\n                if (uVar17 < 0x1000000) {\n                    uVar17 = uVar17 << 8;\n                    uVar21 = uVar21 << 8 | *puStack8;\n                    puStack8 = puStack8 + 1;\n                }\n                uVar11 = (uVar17 >> 0xb) * uVar13;\n                if (uVar21 < uVar11) {\n                    *(iVar16 + iVar18) = (0x800 - uVar13 >> 5) + uVar13;\n                    uVar17 = uVar11;\n                }\n                else {\n                    uVar17 = uVar17 - uVar11;\n                    uVar21 = uVar21 - uVar11;\n                    *(iVar16 + iVar18) = uVar13 - (uVar13 >> 5);\n                    iVar16 = iVar16 + 1;\n                }\n                uVar11 = iVar16 - 0x40;\n                if (3 < uVar11) {\n                    iVar18 = 1;\n                    iStack72 = (uVar11 >> 1) - 1;\n                    uVar12 = uVar11 & 1 | 2;\n                    if (uVar11 < 0xe) {\n                        uVar12 = uVar12 << (iStack72 & 0x1f);\n                        puStack60 = 0x1;\n                        iVar16 = iVar1 + 0x55e + (uVar12 - uVar11) * 2;\n                        uVar11 = uVar12;\n                        do {\n                            uVar13 = *(iVar16 + iVar18 * 2);\n                            if (uVar17 < 0x1000000) {\n                                uVar17 = uVar17 << 8;\n                                uVar21 = uVar21 << 8 | *puStack8;\n                                puStack8 = puStack8 + 1;\n                            }\n                            uVar12 = (uVar17 >> 0xb) * uVar13;\n                            if (uVar21 < uVar12) {\n                                *(iVar16 + iVar18 * 2) = (0x800 - uVar13 >> 5) + uVar13;\n                                iVar18 = iVar18 * 2;\n                                uVar17 = uVar12;\n                            }\n                            else {\n                                uVar17 = uVar17 - uVar12;\n                                uVar21 = uVar21 - uVar12;\n                                uVar11 = uVar11 | puStack60;\n                                *(iVar16 + iVar18 * 2) = uVar13 - (uVar13 >> 5);\n                                iVar18 = iVar18 * 2 + 1;\n                            }\n                            puStack60 = puStack60 << 1;\n                            iStack72 = iStack72 + -1;\n                        } while (iStack72 != 0);\n                    }\n                    else {\n                        iVar18 = (uVar11 >> 1) - 5;\n                        do {\n                            if (uVar17 < 0x1000000) {\n                                uVar17 = uVar17 << 8;\n                                uVar21 = uVar21 << 8 | *puStack8;\n                                puStack8 = puStack8 + 1;\n                            }\n                            uVar17 = uVar17 >> 1;\n                            uVar11 = uVar21 - uVar17 >> 0x1f;\n                            uVar12 = uVar11 + 1 + uVar12 * 2;\n                            uVar11 = uVar11 & uVar17;\n                            uVar21 = (uVar21 - uVar17) + uVar11;\n                            iVar18 = iVar18 + -1;\n                        } while (iVar18 != 0);\n                        iVar7 = 0xf;\n                        uVar13 = uVar11;\n                        if (uVar13 != 0) {\n                            for (; uVar13 >> iVar7 == 0; iVar7 = iVar7 + -1) {\n                            }\n                        }\n                        uVar13 = *(iVar1 + 0x646);\n                        uVar11 = uVar12 * 0x10;\n                        if (uVar17 < 0x1000000) {\n                            uVar17 = uVar17 << 8;\n                            uVar21 = uVar21 * 0x100 | *puStack8;\n                            puStack8 = puStack8 + 1;\n                        }\n                        uVar12 = (uVar17 >> 0xb) * uVar13;\n                        if (uVar21 < uVar12) {\n                            *(iVar1 + 0x646) = (0x800 - uVar13 >> 5) + uVar13;\n                            iVar18 = 2;\n                            uVar17 = uVar12;\n                        }\n                        else {\n                            uVar17 = uVar17 - uVar12;\n                            uVar21 = uVar21 - uVar12;\n                            *(iVar1 + 0x646) = uVar13 - (uVar13 >> 5);\n                            iVar18 = 3;\n                            uVar11 = uVar11 | 1;\n                        }\n                        iVar18 = iVar18 * 2;\n                        uVar13 = *(iVar18 + 0x644 + iVar1);\n                        if (uVar17 < 0x1000000) {\n                            uVar17 = uVar17 << 8;\n                            uVar21 = uVar21 << 8 | *puStack8;\n                            puStack8 = puStack8 + 1;\n                            iVar7 = 0xf;\n                            if (uVar11 != 0) {\n                                for (; uVar11 >> iVar7 == 0; iVar7 = iVar7 + -1) {\n                                }\n                            }\n                        }\n                        uVar12 = (uVar17 >> 0xb) * uVar13;\n                        if (uVar21 < uVar12) {\n                            *(iVar18 + 0x644 + iVar1) = (0x800 - uVar13 >> 5) + uVar13;\n                            uVar17 = uVar12;\n                        }\n                        else {\n                            uVar17 = uVar17 - uVar12;\n                            uVar21 = uVar21 - uVar12;\n                            iVar7 = 0xf;\n                            if (uVar21 != 0) {\n                                for (; uVar21 >> iVar7 == 0; iVar7 = iVar7 + -1) {\n                                }\n                            }\n                            *(iVar18 + 0x644 + iVar1) = uVar13 - (uVar13 >> 5);\n                            iVar18 = iVar18 + 1;\n                            uVar11 = uVar11 | 2;\n                        }\n                        puVar9 = iVar18 * 2;\n                        uVar13 = *(puVar9 + iVar1 + 0x644);\n                        if (uVar17 < 0x1000000) {\n                            uVar17 = uVar17 << 8;\n                            uVar21 = uVar21 << 8 | *puStack8;\n                            puStack8 = puStack8 + 1;\n                        }\n                        uVar12 = (uVar17 >> 0xb) * uVar13;\n                        if (uVar21 < uVar12) {\n                            *(puVar9 + iVar1 + 0x644) = (0x800 - uVar13 >> 5) + uVar13;\n                            uVar17 = uVar12;\n                        }\n                        else {\n                            uVar17 = uVar17 - uVar12;\n                            uVar21 = uVar21 - uVar12;\n                            *(puVar9 + iVar1 + 0x644) = uVar13 - (uVar13 >> 5);\n                            puVar9 = puVar9 + 1;\n                            uVar11 = uVar11 | 4;\n                        }\n                        uVar13 = *(iVar1 + 0x644 + puVar9 * 2);\n                        uVar12 = uVar13;\n                        if (uVar17 < 0x1000000) {\n                            uVar17 = uVar17 << 8;\n                            uVar21 = uVar21 << 8 | *puStack8;\n                            puStack8 = puStack8 + 1;\n                        }\n                        uVar14 = (uVar17 >> 0xb) * uVar12;\n                        if (uVar21 < uVar14) {\n                            puVar23 = (0x800 - uVar12 >> 5) + uVar12;\n                            *(iVar1 + 0x644 + puVar9 * 2) = puVar23;\n                            uVar17 = uVar14;\n                            puVar9 = puVar23;\n                        }\n                        else {\n                            uVar17 = uVar17 - uVar14;\n                            uVar21 = uVar21 - uVar14;\n                            *(iVar1 + 0x644 + puVar9 * 2) = uVar13 - (uVar13 >> 5);\n                            uVar11 = uVar11 | 8;\n                        }\n                        if (uVar11 == 0xffffffff) {\n                            iStack44 = uVar8 + 0x112;\n                            uStack24 = uStack24 - 0xc;\ncode_r0x006da244:\n                            if (uVar17 < 0x1000000) {\n                                uVar17 = uVar17 << 8;\n                                uVar21 = uVar21 << 8 | *puStack8;\n                                puStack8 = puStack8 + 1;\n                                puVar9 = 0x2443b263;\n                            }\n                            param_1[7] = uVar17;\n                            param_1[6] = puStack8;\n                            uVar22 = (puVar9 & 0xffff0000 | puVar9 & 0xf7ff) & ~(1 << (uVar21 & 0x1f));\n                            param_1[9] = puStack16;\n                            iVar1 = 0x1f;\n                            if (uVar22 != 0) {\n                                for (; uVar22 >> iVar1 == 0; iVar1 = iVar1 + -1) {\n                                }\n                            }\n                            param_1[0x12] = iStack44;\n                            iVar7 = 0;\n                            if (uStack20 != 0) {\n                                for (; (uStack20 >> iVar7 & 1) == 0; iVar7 = iVar7 + 1) {\n                                }\n                            }\n                            param_1[0xe] = puStack28;\n                            param_1[0xb] = uStack20;\n                            param_1[0x10] = puStack52;\n                            param_1[8] = uVar21;\n                            param_1[0xf] = puStack48;\n                            param_1[0xd] = uStack24;\n                            param_1[0x11] = puStack60;\n                            return 0;\n                        }\n                    }\n                }\n                puStack60 = puStack52;\n                puStack52 = puStack48;\n                puStack48 = puStack28;\n                puStack28 = uVar11 + 1;\n                uVar12 = uVar22;\n                if (uVar22 == 0) {\n                    uVar12 = uStack20;\n                }\n                if (uVar12 <= uVar11) {\n                    return 1;\n                }\n                uStack24 = (-(uStack24 < 0x13) & 0xfffffffd) + 10;\n            }\n            uVar8 = uVar8 + 2;\n            if (param_2 == puStack16) {\n                return 1;\n            }\n            puStack16 = param_2 - puStack16;\n            if ((uVar8 <= puStack16) && (iVar18 = 0x1f,  puStack16 = uVar8,  uVar21 != 0)) {\n                for (; uVar21 >> iVar18 == 0; iVar18 = iVar18 + -1) {\n                }\n            }\n            uStack20 = uStack20 + puStack16;\n            iStack44 = uVar8 - puStack16;\n            puVar10 = ((-(puVar24 < puStack28) & puVar6) - puStack28) + puVar24;\n            if (puVar6 < puVar10 + puStack16) {\n                do {\n                    *(puVar24 + puVar4) = *(puVar10 + puVar4);\n                    puVar10 = puVar10 + 1;\n                    puVar24 = puVar24 + 1;\n                    if (puVar10 == puVar6) {\n                        puVar10 = NULL;\n                    }\n                    puStack16 = puStack16 - 1;\n                    puVar9 = puVar24;\n                    puVar23 = puVar24;\n                } while (puStack16 != NULL);\n            }\n            else {\n                puVar15 = puVar4 + puVar24;\n                puVar20 = puVar15 + puStack16;\n                do {\n                    *puVar15 = puVar15[puVar10 - puVar24];\n                    puVar15 = puVar15 + 1;\n                    puVar9 = puVar24 + puStack16;\n                    puVar23 = puVar24 + puStack16;\n                } while (puVar15 != puVar20);\n            }\n        }\ncode_r0x006e5306:\n        puStack16 = puVar23;\n        if ((param_2 <= puStack16) || (param_3 <= puStack8)) goto code_r0x006da244;\n    } while( true );\n}\n",
        "token_count": 8057
    },
    "006c670d": {
        "rules": [
            "parse credit card information/93e2f528dd4f49e5bd82bbd1ddd3192d"
        ],
        "decompiled_code": "\nuint32_t __thiscall fcn.006c670d(int32_t param_1, char *param_2)\n\n{\n    char *pcVar1;\n    char *pcVar2;\n    int16_t iVar3;\n    char *pcVar4;\n    \n    pcVar4 = NULL;\n    if (param_2 != NULL) {\n        do {\n            pcVar1 = pcVar4 + param_1;\n            iVar3 = 0;\n            if (*0x10 - 4U != 0) {\n                for (; (*0x10 - 4U >> iVar3 & 1) == 0; iVar3 = iVar3 + 1) {\n                }\n            }\n            pcVar2 = pcVar1 + (5 - param_1);\n            if (((((((pcVar2 + 4 < param_2) && (*pcVar1 == 'V')) && (pcVar4[param_1 + 1] == 'i')) &&\n                  (((pcVar4[param_1 + 2] == 'r' && (pcVar4[param_1 + 3] == 't')) &&\n                   ((pcVar4[param_1 + 4] == 'u' && ((pcVar4[param_1 + 5] == 'a' && (pcVar4[param_1 + 6] == 'l'))))))))\n                 && ((pcVar4[param_1 + 7] == 'B' && ((pcVar4[param_1 + 8] == 'o' && (pcVar4[param_1 + 9] == 'x')))))) ||\n                (((pcVar2 < param_2 &&\n                  ((((*pcVar1 == 'V' && (pcVar4[param_1 + 1] == 'M')) && (pcVar4[param_1 + 2] == 'w')) &&\n                   ((pcVar4[param_1 + 3] == 'a' && (pcVar4[param_1 + 4] == 'r')))))) && (pcVar4[param_1 + 5] == 'e'))))\n               || (((((pcVar2 + 3 < param_2 && (*pcVar1 == 'P')) &&\n                     ((pcVar4[param_1 + 1] == 'a' &&\n                      (((pcVar4[param_1 + 2] == 'r' && (pcVar4[param_1 + 3] == 'a')) && (pcVar4[param_1 + 4] == 'l')))))\n                     ) && ((pcVar4[param_1 + 5] == 'l' && (pcVar4[param_1 + 6] == 'e')))) &&\n                   ((pcVar4[param_1 + 7] == 'l' && (pcVar4[param_1 + 8] == 's')))))) {\n                return CONCAT31(pcVar4 >> 8, 1);\n            }\n            pcVar4 = pcVar4 + 1;\n        } while (pcVar4 < param_2);\n    }\n    return pcVar4 & 0xffffff00;\n}\n",
        "token_count": 656
    },
    "null": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "006b4d6e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x006b4d9d)\n\nvoid fcn.006b4d6e(int32_t param_1)\n\n{\n    int16_t iVar1;\n    uint32_t uVar2;\n    \n    uVar2 = param_1 + 1;\n    uVar2 = ~((uVar2 >> 0x18 | (uVar2 & 0xff0000) >> 8 | (uVar2 & 0xff00) << 8 | uVar2 * 0x1000000) ^ 0x60ff47e7);\n    for (iVar1 = 0; (0x1e8U >> iVar1 & 1) == 0; iVar1 = iVar1 + 1) {\n    }\n    uVar2 = ~(*(uVar2 - 4) ^ uVar2) ^ 0x24503285;\n    // WARNING: Could not recover jumptable at 0x006b4e16. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*(0x6b4de4 - (uVar2 >> 0x18 | (uVar2 & 0xff0000) >> 8 | (uVar2 & 0xff00) << 8 | uVar2 << 0x18)))();\n    return;\n}\n",
        "token_count": 295
    },
    "006e7800": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nuint32_t __fastcall fcn.006e7800(uint8_t *param_1)\n\n{\n    int16_t iVar1;\n    uint8_t uVar2;\n    uint8_t *in_EAX;\n    uint8_t uVar3;\n    uint8_t uVar4;\n    \n    iVar1 = 0;\n    if (*0x10 - 0x14U != 0) {\n        for (; (*0x10 - 0x14U >> iVar1 & 1) == 0; iVar1 = iVar1 + 1) {\n        }\n    }\n    uVar4 = 0;\n    do {\n        uVar3 = *in_EAX;\n        uVar2 = *param_1;\n        param_1 = param_1 + 1;\n        in_EAX = in_EAX + 1;\n        uVar2 = uVar2 ^ (0xf1d6c0f << (uVar4 & 0x1f) | 0xf1d6c0f >> 0x20 - (uVar4 & 0x1f)) + uVar4;\n        uVar4 = uVar4 + 1;\n        if (uVar2 + 0xbf < 0x1a) {\n            uVar2 = uVar2 + 0x20;\n        }\n        if (uVar3 + 0xbf < 0x1a) {\n            uVar3 = uVar3 + 0x20;\n        }\n    } while ((uVar2 != 0) && (uVar2 == uVar3));\n    if (uVar2 < uVar3) {\n        return 0xffffffff;\n    }\n    return uVar3 < uVar2;\n}\n",
        "token_count": 374
    },
    "006e80d7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.006e80d7(void)\n\n{\n    uint8_t uVar1;\n    int32_t in_EAX;\n    uint32_t uVar2;\n    uint var_104h;\n    \n    uVar2 = 0;\n    do {\n        uVar1 = uVar2 & 0x1f;\n        uVar1 = (0xf1d6c0f << uVar1 | 0xf1d6c0f >> 0x20 - uVar1) + uVar2 ^ (&var_104h + uVar2)[in_EAX - &var_104h];\n        *(&var_104h + uVar2) = uVar1;\n        if (uVar1 == 0) break;\n        uVar2 = uVar2 + 1;\n    } while (uVar2 < 0x104);\n    (**0x6d3084)(&var_104h);\n    return;\n}\n",
        "token_count": 207
    }
}