{
    "null": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "008c56c0": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nint32_t * __thiscall fcn.008c56c0(int32_t *param_1, uint8_t param_2)\n\n{\n    uint *puVar1;\n    \n    if (*param_1 != 0) {\n        puVar1 = fcn.008c3690();\n        if (puVar1 != NULL) {\n            (***puVar1)(1);\n        }\n    }\n    if ((param_2 & 1) != 0) {\n        fcn.008cab32(param_1);\n    }\n    return param_1;\n}\n",
        "token_count": 122
    },
    "008c5950": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.008c5950(int32_t param_1)\n\n{\n    if ((*(param_1 + 0x40) & 1) != 0) {\n        fcn.008cab32(**(param_1 + 0x10));\n    }\n    **(param_1 + 0x10) = 0;\n    **(param_1 + 0x20) = 0;\n    **(param_1 + 0x30) = 0;\n    **(param_1 + 0x14) = 0;\n    **(param_1 + 0x24) = 0;\n    **(param_1 + 0x34) = 0;\n    *(param_1 + 0x40) = *(param_1 + 0x40) & 0xfffffffe;\n    *(param_1 + 0x3c) = 0;\n    return;\n}\n",
        "token_count": 205
    },
    "008c73a0": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint * __thiscall fcn.008c73a0(uint *param_1, uint8_t param_2)\n\n{\n    uint32_t uVar1;\n    uint *in_FS_OFFSET;\n    uint uStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack4 = 0xffffffff;\n    uStack8 = 0x8e3cb8;\n    uStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &uStack12;\n    fcn.008c6980();\n    uVar1 = 0;\n    *param_1 = 0x9344d4;\n    if ((param_2 & 1) == 0) {\n        uVar1 = 4;\n    }\n    if ((param_2 & 2) == 0) {\n        uVar1 = uVar1 | 2;\n    }\n    if ((param_2 & 8) != 0) {\n        uVar1 = uVar1 | 8;\n    }\n    if ((param_2 & 4) != 0) {\n        uVar1 = uVar1 | 0x10;\n    }\n    param_1[0xf] = 0;\n    param_1[0x10] = uVar1;\n    *in_FS_OFFSET = uStack12;\n    return param_1;\n}\n",
        "token_count": 294
    },
    "008c7f20": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.008c7f20(int32_t *param_1)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    uint unaff_EBX;\n    uint *in_FS_OFFSET;\n    bool bVar3;\n    uchar auStack156 [8];\n    uint32_t uStack148;\n    uint uStack28;\n    uint uStack20;\n    uint uStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack4 = 0xffffffff;\n    uStack8 = 0x8e3eef;\n    uStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &uStack12;\n    if ((param_1 != NULL) && (*param_1 == 0)) {\n        iVar1 = fcn.008cade9(0x18);\n        uStack4 = 0;\n        bVar3 = iVar1 == 0;\n        if (bVar3) {\n            iVar1 = 0;\n        }\n        else {\n            uVar2 = fcn.008c7ec0(auStack156);\n            uStack8 = CONCAT31(uStack8._1_3_, 1);\n            unaff_EBX = 1;\n            uVar2 = fcn.008c7700(uVar2);\n            uStack12 = 2;\n            iVar1 = fcn.008c5ec0(uVar2, 0);\n        }\n        *param_1 = iVar1;\n        uStack20 = 3;\n        if (!bVar3) {\n            fcn.008c77a0();\n        }\n        uStack20 = 0xffffffff;\n        if ((!bVar3) && (0xf < uStack148)) {\n            fcn.008cab32(unaff_EBX);\n        }\n    }\n    *in_FS_OFFSET = uStack28;\n    return 2;\n}\n",
        "token_count": 411
    },
    "008ca0f6": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008ca0f6(uint32_t arg_8h)\n\n{\n    uint *in_ECX;\n    \n    *in_ECX = 0x9345fc;\n    fcn.008c75b0();\n    if ((arg_8h & 1) != 0) {\n        fcn.008cab32();\n    }\n    return;\n}\n",
        "token_count": 82
    },
    "008ca145": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008ca145(uint32_t arg_8h)\n\n{\n    uint *in_ECX;\n    \n    *in_ECX = 0x934608;\n    fcn.008c75b0();\n    if ((arg_8h & 1) != 0) {\n        fcn.008cab32();\n    }\n    return;\n}\n",
        "token_count": 79
    },
    "008ca541": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008ca541(uint32_t arg_8h)\n\n{\n    fcn.008ca44d();\n    if ((arg_8h & 1) != 0) {\n        fcn.008cab32();\n    }\n    return;\n}\n",
        "token_count": 58
    },
    "008ca562": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008ca562(uint32_t arg_8h)\n\n{\n    uint *in_ECX;\n    \n    *in_ECX = 0x934674;\n    fcn.008ca44d();\n    if ((arg_8h & 1) != 0) {\n        fcn.008cab32();\n    }\n    return;\n}\n",
        "token_count": 78
    },
    "008ca589": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008ca589(uint32_t arg_8h)\n\n{\n    uint *in_ECX;\n    \n    *in_ECX = 0x934680;\n    fcn.008ca44d();\n    if ((arg_8h & 1) != 0) {\n        fcn.008cab32();\n    }\n    return;\n}\n",
        "token_count": 78
    },
    "008ca5b0": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008ca5b0(uint32_t arg_8h)\n\n{\n    uint *in_ECX;\n    \n    *in_ECX = 0x934680;\n    fcn.008ca44d();\n    if ((arg_8h & 1) != 0) {\n        fcn.008cab32();\n    }\n    return;\n}\n",
        "token_count": 80
    },
    "008caa7a": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008caa7a(uint32_t arg_8h)\n\n{\n    fcn.008caa6a();\n    if ((arg_8h & 1) != 0) {\n        fcn.008cab32();\n    }\n    return;\n}\n",
        "token_count": 59
    },
    "008cdfea": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008cdfea(uint32_t arg_8h)\n\n{\n    uint *in_ECX;\n    \n    *in_ECX = 0x935008;\n    fcn.008ca44d();\n    if ((arg_8h & 1) != 0) {\n        fcn.008cab32();\n    }\n    return;\n}\n",
        "token_count": 78
    },
    "008db390": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint * __cdecl fcn.008db390(uint *arg_8h)\n\n{\n    char cVar1;\n    uint uVar2;\n    uint *puVar3;\n    uint var_10h;\n    uint var_8h;\n    uint var_4h;\n    \n    if (**0x92f418 == 'X') {\n        uVar2 = 0x9367f4;\n    }\n    else {\n        if (**0x92f418 != 'Z') {\n            fcn.008daf60(&var_8h);\n            if ((var_4h == '\\0') && (cVar1 = **0x92f418,  cVar1 != '\\0')) {\n                if (cVar1 != '@') {\n                    if (cVar1 != 'Z') {\n                        fcn.008da682(2);\n                        return arg_8h;\n                    }\n                    *0x92f418 = *0x92f418 + 1;\n                    uVar2 = 0x936814;\n                    if ((~(*0x92f428 >> 0x12) & 1) == 0) {\n                        uVar2 = 0x936808;\n                    }\n                    puVar3 = fcn.008db146(&var_10h, uVar2);\n                    *arg_8h = *puVar3;\n                    arg_8h[1] = puVar3[1];\n                    return arg_8h;\n                }\n                *0x92f418 = *0x92f418 + 1;\n            }\n            *arg_8h = var_8h;\n            arg_8h[1] = var_4h;\n            return arg_8h;\n        }\n        uVar2 = 0x93563c;\n        if ((~(*0x92f428 >> 0x12) & 1) == 0) {\n            uVar2 = 0x9367fc;\n        }\n    }\n    *0x92f418 = *0x92f418 + 1;\n    fcn.008daa4e(uVar2);\n    return arg_8h;\n}\n",
        "token_count": 461
    },
    "008df2f5": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.008df2f5(uint arg_8h, uint arg_ch, uint32_t arg_10h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t arg_8h_00;\n    uint uVar3;\n    code *pcVar4;\n    code *pcVar5;\n    uint var_14h;\n    uint var_ch;\n    uint var_8h;\n    int32_t var_4h;\n    \n    iVar1 = fcn.008cf234();\n    var_4h = 0;\n    if (*0x92f470 == 0) {\n        iVar2 = (**0x93414c)(0x936b58);\n        pcVar4 = *0x934008;\n        if (iVar2 == 0) {\n            return 0;\n        }\n        arg_8h_00 = (**0x934008)(iVar2, 0x936b4c);\n        if (arg_8h_00 == 0) {\n            return 0;\n        }\n        *0x92f470 = fcn.008cf1c2(arg_8h_00);\n        uVar3 = (*pcVar4)(iVar2, 0x936b3c);\n        *0x92f474 = fcn.008cf1c2(uVar3);\n        uVar3 = (*pcVar4)(iVar2, 0x936b28);\n        *0x92f478 = fcn.008cf1c2(uVar3);\n        uVar3 = (*pcVar4)(iVar2, 0x936b0c);\n        *0x92f480 = fcn.008cf1c2(uVar3);\n        if (*0x92f480 != 0) {\n            uVar3 = (*pcVar4)(iVar2, 0x936af4);\n            *0x92f47c = fcn.008cf1c2(uVar3);\n        }\n    }\n    if ((*0x92f47c != iVar1) && (*0x92f480 != iVar1)) {\n        pcVar4 = fcn.008cf23d(*0x92f47c);\n        pcVar5 = fcn.008cf23d(*0x92f480);\n        if (((pcVar4 != NULL) && (pcVar5 != NULL)) &&\n           (((iVar2 = (*pcVar4)(),  iVar2 == 0 || (iVar2 = (*pcVar5)(iVar2, 1, &var_14h, 0xc, &var_8h),  iVar2 == 0)) ||\n            ((var_ch & 1) == 0)))) {\n            arg_10h = arg_10h | 0x200000;\n            goto code_r0x008df437;\n        }\n    }\n    if ((((*0x92f474 != iVar1) && (pcVar4 = fcn.008cf23d(*0x92f474),  pcVar4 != NULL)) &&\n        (var_4h = (*pcVar4)(),  var_4h != 0)) &&\n       ((*0x92f478 != iVar1 && (pcVar4 = fcn.008cf23d(*0x92f478),  pcVar4 != NULL)))) {\n        var_4h = (*pcVar4)(var_4h);\n    }\ncode_r0x008df437:\n    pcVar4 = fcn.008cf23d(*0x92f470);\n    if (pcVar4 == NULL) {\n        return 0;\n    }\n    uVar3 = (*pcVar4)(var_4h, arg_8h, arg_ch, arg_10h);\n    return uVar3;\n}\n",
        "token_count": 824
    },
    "008e00e6": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.008e00e6(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t *piVar1;\n    uint32_t arg_8h_00;\n    uint *puVar2;\n    uint uVar3;\n    int32_t unaff_EBP;\n    int32_t iVar4;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.008d1534(0x938d80, 0x10);\n    arg_8h_00 = *(unaff_EBP + 8);\n    if (arg_8h_00 == 0xfffffffe) {\n        puVar2 = fcn.008cfdcf();\n        *puVar2 = 0;\n        puVar2 = fcn.008cfdbc();\n        *puVar2 = 9;\n    }\n    else {\n        if ((-1 < arg_8h_00) && (arg_8h_00 < *0x92f548)) {\n            piVar1 = (arg_8h_00 >> 5) * 4 + 0x92f560;\n            iVar4 = (arg_8h_00 & 0x1f) * 0x40;\n            if ((*(*piVar1 + 4 + iVar4) & 1) != 0) {\n                fcn.008df63c(arg_8h_00);\n                *(unaff_EBP + -4) = 0;\n                if ((*(*piVar1 + 4 + iVar4) & 1) == 0) {\n                    puVar2 = fcn.008cfdbc();\n                    *puVar2 = 9;\n                    puVar2 = fcn.008cfdcf();\n                    *puVar2 = 0;\n                    *(unaff_EBP + -0x1c) = 0xffffffff;\n                }\n                else {\n                    uVar3 = fcn.008df9b3(*(unaff_EBP + 8), *(unaff_EBP + 0xc), *(unaff_EBP + 0x10));\n                    *(unaff_EBP + -0x1c) = uVar3;\n                }\n                *(unaff_EBP + -4) = 0xfffffffe;\n                fcn.008e01b8(0x938d80);\n                goto code_r0x008e01b2;\n            }\n        }\n        puVar2 = fcn.008cfdcf();\n        *puVar2 = 0;\n        puVar2 = fcn.008cfdbc();\n        *puVar2 = 9;\n        fcn.008cad8d(0, 0, 0, 0, 0);\n    }\ncode_r0x008e01b2:\n    fcn.008d1579();\n    return;\n}\n",
        "token_count": 634
    },
    "008c35c0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.008c35c0(int32_t *param_1)\n\n{\n    int32_t iVar1;\n    int32_t **in_FS_OFFSET;\n    int32_t *piStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack4 = 0xffffffff;\n    uStack8 = 0x8e3968;\n    piStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &piStack12;\n    if (*param_1 == 0) {\n        fcn.008c981a(0);\n        if (*param_1 == 0) {\n            *0x92e8b8 = *0x92e8b8 + 1;\n            *param_1 = *0x92e8b8;\n        }\n        uStack8 = 0xffffffff;\n        fcn.008c9842();\n    }\n    iVar1 = *param_1;\n    *in_FS_OFFSET = param_1;\n    return iVar1;\n}\n",
        "token_count": 221
    },
    "008c6350": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint __fastcall fcn.008c6350(int32_t param_1)\n\n{\n    if (**(param_1 + 0x20) != 0) {\n        return **(param_1 + 0x30);\n    }\n    return 0;\n}\n",
        "token_count": 58
    },
    "008c6390": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint __fastcall fcn.008c6390(int32_t param_1)\n\n{\n    if (**(param_1 + 0x24) != 0) {\n        return **(param_1 + 0x34);\n    }\n    return 0;\n}\n",
        "token_count": 58
    },
    "008c6900": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.008c6900(uint32_t param_1)\n\n{\n    code *pcVar1;\n    \n    if (param_1 == 0) {\n        param_1 = 0;\n    }\n    else if (0xffffffff / param_1 == 0) {\n        fcn.008c3340();\n        fcn.008cae4e(&stack0xfffffff0, 0x937910);\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    fcn.008cade9(param_1);\n    return;\n}\n",
        "token_count": 127
    },
    "008c6f00": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.008c6f00(int32_t param_1, char param_2, int32_t param_3)\n\n{\n    uint arg_10h;\n    \n    if ((param_2 != '\\0') && (0xf < *(param_1 + 0x18))) {\n        arg_10h = *(param_1 + 4);\n        if (param_3 != 0) {\n            fcn.008cab3d(param_1 + 4, 0x10, arg_10h, param_3);\n        }\n        fcn.008cab32(arg_10h);\n    }\n    *(param_1 + 0x14) = param_3;\n    *(param_1 + 0x18) = 0xf;\n    *(param_1 + 4 + param_3) = 0;\n    return;\n}\n",
        "token_count": 190
    },
    "008c82d0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nint32_t fcn.008c82d0(void)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint *in_FS_OFFSET;\n    int32_t *unaff_retaddr;\n    int32_t arg_8h;\n    uchar auStack32 [4];\n    uint uStack28;\n    uint uStack20;\n    uint uStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack4 = 0xffffffff;\n    uStack8 = 0x8e3fc8;\n    uStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &uStack12;\n    arg_8h = 0;\n    fcn.008c981a(0);\n    iVar1 = *0x92e844;\n    uStack8 = 0;\n    uVar2 = fcn.008c35c0();\n    iVar3 = *unaff_retaddr;\n    if (uVar2 < *(iVar3 + 0xc)) {\n        iVar4 = *(*(iVar3 + 8) + uVar2 * 4);\n        if (iVar4 == 0) goto code_r0x008c8329;\ncode_r0x008c8347:\n        if (iVar4 != 0) goto code_r0x008c839d;\n    }\n    else {\n        iVar4 = 0;\ncode_r0x008c8329:\n        if (*(iVar3 + 0x14) == '\\0') goto code_r0x008c8347;\n        iVar3 = fcn.008c99b1();\n        if (uVar2 < *(iVar3 + 0xc)) {\n            iVar4 = *(*(iVar3 + 8) + uVar2 * 4);\n            goto code_r0x008c8347;\n        }\n    }\n    iVar4 = iVar1;\n    if (iVar1 == 0) {\n        iVar3 = fcn.008c7f20(&stack0xffffffdc, unaff_retaddr);\n        if (iVar3 == -1) {\n            fcn.008ca470(0x934558);\n            fcn.008cae4e(auStack32, 0x938018);\n        }\n        *0x92e844 = arg_8h;\n        fcn.008c3630();\n        fcn.008c9b20(arg_8h);\n        iVar4 = arg_8h;\n    }\ncode_r0x008c839d:\n    uStack20 = 0xffffffff;\n    fcn.008c9842();\n    *in_FS_OFFSET = uStack28;\n    return iVar4;\n}\n",
        "token_count": 583
    },
    "008c84c0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.008c84c0(int32_t param_1, uint32_t param_2, char param_3)\n\n{\n    uint32_t uVar1;\n    uint32_t extraout_ECX;\n    uint32_t extraout_ECX_00;\n    uint *in_FS_OFFSET;\n    uint uStack92;\n    uchar auStack68 [32];\n    uint uStack36;\n    uint uStack16;\n    uint uStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack12 = *in_FS_OFFSET;\n    uStack4 = 0xffffffff;\n    uStack8 = 0x8e3ff8;\n    *in_FS_OFFSET = &stack0xfffffff4;\n    *(param_1 + 8) = param_2 & 0x17;\n    uVar1 = *(param_1 + 0xc) & param_2 & 0x17;\n    if (uVar1 != 0) {\n        if (param_3 != '\\0') {\n            uStack92 = 0x8c84fd;\n            fcn.008cae4e(0, 0);\n            uVar1 = extraout_ECX;\n        }\n        if ((uVar1 & 4) != 0) {\n            uStack92 = 0x934594;\n            fcn.008c8150();\n            uStack16 = 0;\n            fcn.008c8050(&stack0xffffffa4);\n            fcn.008cae4e(&stack0xffffffbc, 0x93807c);\n            uVar1 = extraout_ECX_00;\n        }\n        if ((uVar1 & 2) != 0) {\n            uStack92 = 0x93457c;\n            fcn.008c8150();\n            uStack16 = 1;\n            fcn.008c8050(&stack0xffffffa4);\n            fcn.008cae4e(&stack0xffffffbc, 0x93807c);\n        }\n        uStack92 = 0x934564;\n        fcn.008c8150();\n        uStack16 = 2;\n        fcn.008c8050(&stack0xffffffa4);\n        fcn.008cae4e(&stack0xffffffbc, 0x93807c);\n    }\n    *in_FS_OFFSET = uStack36;\n    return;\n}\n",
        "token_count": 518
    },
    "008c8b90": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.008c8b90(int32_t param_1, uint param_2)\n\n{\n    uchar uVar1;\n    char unaff_SI;\n    \n    fcn.008c8690();\n    *(param_1 + 0x28) = param_2;\n    *(param_1 + 0x2c) = 0;\n    uVar1 = fcn.008c8760(0x20);\n    *(param_1 + 0x30) = uVar1;\n    if (*(param_1 + 0x28) == 0) {\n        fcn.008c84c0(*(param_1 + 8) | 4, 0);\n    }\n    if (unaff_SI != '\\0') {\n        fcn.008c9e90(param_1);\n        return;\n    }\n    *(param_1 + 4) = 0;\n    return;\n}\n",
        "token_count": 202
    },
    "008ca44d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.008ca44d(uint *param_1)\n\n{\n    *param_1 = 0x934654;\n    if (param_1[2] != 0) {\n        fcn.008caea5(param_1[1]);\n    }\n    return;\n}\n",
        "token_count": 64
    },
    "008ca766": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint __cdecl\nfcn.008ca766(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint noname_4, uint noname_5, uint noname_6, \n            uint noname_7, uint noname_8, uint noname_9, uint noname_10, uint noname_11, uint noname_12, uint noname_13\n            , uint noname_14, uint arg_8h, uint arg_ch, uint noname_17, uint noname_18, uint arg_18h, uint arg_1ch, \n            uint arg_20h)\n\n{\n    int32_t iVar1;\n    int32_t *in_FS_OFFSET;\n    uint *var_8h_3;\n    uint *var_ch_2;\n    uint var_10h_2;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    uint var_38h;\n    uint *var_34h;\n    uint var_30h;\n    code *var_2ch;\n    uint *var_28h_2;\n    code *pcStack40;\n    uint32_t uStack36;\n    uint uStack32;\n    uint *puStack28;\n    uint uStack24;\n    uint uStack20;\n    uchar *puStack16;\n    uchar *var_8h_2;\n    int32_t var_4h_2;\n    \n    var_8h_2 = &stack0xfffffffc;\n    puStack16 = &stack0xffffffc0;\n    if (var_8h_3 == 0x123) {\n        *var_ch_2 = 0x8ca811;\n        var_38h = 1;\n    }\n    else {\n        pcStack40 = fcn.008ca83d;\n        uStack36 = *0x8e76e4 ^ &fcn.008ca766::var_28h_2;\n        uStack32 = var_24h;\n        puStack28 = var_ch_2;\n        uStack24 = var_20h;\n        uStack20 = var_1ch;\n        var_4h_2 = 0;\n        var_28h_2 = *in_FS_OFFSET;\n        *in_FS_OFFSET = &fcn.008ca766::var_28h_2;\n        var_34h = var_8h_3;\n        var_30h = var_10h_2;\n        iVar1 = fcn.008cf4c6();\n        var_2ch = *(iVar1 + 0x80);\n        (*var_2ch)(*var_8h_3, &fcn.008ca766::var_34h);\n        var_38h = 0;\n        if (var_4h_2 == 0) {\n            *in_FS_OFFSET = var_28h_2;\n        }\n        else {\n            *var_28h_2 = **in_FS_OFFSET;\n            *in_FS_OFFSET = var_28h_2;\n        }\n    }\n    return var_38h;\n}\n",
        "token_count": 722
    },
    "008caea5": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.008caea5(uint arg_8h)\n\n{\n    int32_t arg_8h_00;\n    int32_t iVar1;\n    uint *puVar2;\n    uint uVar3;\n    int32_t unaff_EBP;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.008d1534(0x938670, 0xc);\n    iVar1 = *(unaff_EBP + 8);\n    if (iVar1 != 0) {\n        if (*0x9306b8 == 3) {\n            fcn.008d04e2(4);\n            *(unaff_EBP + -4) = 0;\n            arg_8h_00 = fcn.008d0610(iVar1);\n            *(unaff_EBP + -0x1c) = arg_8h_00;\n            if (arg_8h_00 != 0) {\n                fcn.008d0640(arg_8h_00, iVar1);\n            }\n            *(unaff_EBP + -4) = 0xfffffffe;\n            fcn.008caefb();\n            if (*(unaff_EBP + -0x1c) != 0) goto code_r0x008caf2d;\n            iVar1 = *(unaff_EBP + 8);\n        }\n        iVar1 = (**0x93407c)(*0x92e9b4, 0, iVar1);\n        if (iVar1 == 0) {\n            puVar2 = fcn.008cfdbc();\n            uVar3 = (**0x934078)();\n            uVar3 = fcn.008cfd7a(uVar3);\n            *puVar2 = uVar3;\n        }\n    }\ncode_r0x008caf2d:\n    fcn.008d1579();\n    return;\n}\n",
        "token_count": 423
    },
    "008ccb73": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008ccb73(uint arg_8h)\n\n{\n    uint in_EAX;\n    uint uVar1;\n    int32_t in_ECX;\n    uint in_EDX;\n    uint unaff_EBX;\n    uint unaff_EBP;\n    uint unaff_ESI;\n    uint unaff_EDI;\n    ushort in_ES;\n    ushort in_CS;\n    ushort in_SS;\n    ushort in_DS;\n    ushort in_FS;\n    ushort in_GS;\n    uint8_t in_AF;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    uint unaff_retaddr;\n    int32_t var_328h;\n    uint var_324h;\n    uint var_320h;\n    \n    if (in_ECX == *0x8e76e4) {\n        return;\n    }\n    *0x92f1e8 = (in_NT & 1) * 0x4000 | SBORROW4(&stack0xfffffffc, 0x328) * 0x800 | (in_IF & 1) * 0x200 |\n                (in_TF & 1) * 0x100 | (&var_328h < 0) * 0x80 | (*0x10 == 0x32c) * 0x40 | (in_AF & 1) * 0x10 |\n                ((POPCOUNT(&var_328h & 0xff) & 1U) == 0) * 4 | &stack0xfffffffc < 0x328 | (in_ID & 1) * 0x200000 |\n                (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n    *0x92f1ec = &arg_8h;\n    *0x92f128 = 0x10001;\n    *0x92f0d0 = 0xc0000409;\n    *0x92f0d4 = 1;\n    var_328h = *0x8e76e4;\n    var_324h = *0x8e76e8;\n    *0x92f0dc = unaff_retaddr;\n    *0x92f1b4 = in_GS;\n    *0x92f1b8 = in_FS;\n    *0x92f1bc = in_ES;\n    *0x92f1c0 = in_DS;\n    *0x92f1c4 = unaff_EDI;\n    *0x92f1c8 = unaff_ESI;\n    *0x92f1cc = unaff_EBX;\n    *0x92f1d0 = in_EDX;\n    *0x92f1d4 = in_ECX;\n    *0x92f1d8 = in_EAX;\n    *0x92f1dc = unaff_EBP;\n    *0x92f1e0 = unaff_retaddr;\n    *0x92f1e4 = in_CS;\n    *0x92f1f0 = in_SS;\n    *0x92f120 = (**0x934070)();\n    fcn.008d0215(1);\n    (**0x93406c)(0);\n    (**0x934068)(0x9356f4);\n    if (*0x92f120 == 0) {\n        fcn.008d0215(1);\n    }\n    uVar1 = (**0x934064)(0xc0000409);\n    (**0x934060)(uVar1);\n    return;\n}\n",
        "token_count": 833
    },
    "008ce0b9": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.008ce0b9(uint arg_8h, uint noname_1, uint arg_10h, uint arg_14h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t *piVar4;\n    int32_t unaff_EBP;\n    int32_t iVar5;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.008d1534(0x9387c0, 0x10);\n    iVar1 = *(unaff_EBP + 0x10);\n    iVar2 = *(unaff_EBP + 8);\n    if (*(iVar1 + 4) < 0x81) {\n        iVar5 = *(iVar2 + 8);\n    }\n    else {\n        iVar5 = *(iVar2 + 8);\n    }\n    *(unaff_EBP + -0x1c) = iVar5;\n    iVar3 = fcn.008cf4c6();\n    *(iVar3 + 0x90) = *(iVar3 + 0x90) + 1;\n    *(unaff_EBP + -4) = 0;\n    while (iVar5 != *(unaff_EBP + 0x14)) {\n        if ((iVar5 < 0) || (*(iVar1 + 4) <= iVar5)) {\n            fcn.008cf862();\n        }\n        iVar3 = iVar5 * 8;\n        piVar4 = *(iVar1 + 8) + iVar3;\n        iVar5 = *piVar4;\n        *(unaff_EBP + -0x20) = iVar5;\n        *(unaff_EBP + -4) = 1;\n        if (piVar4[1] != 0) {\n            *(iVar2 + 8) = iVar5;\n            fcn.008cf8b0(*(*(iVar1 + 8) + 4 + iVar3), iVar2, 0x103);\n        }\n        *(unaff_EBP + -4) = 0;\n        *(unaff_EBP + -0x1c) = iVar5;\n    }\n    *(unaff_EBP + -4) = 0xfffffffe;\n    fcn.008ce17f();\n    if (iVar5 != *(unaff_EBP + 0x14)) {\n        fcn.008cf862();\n    }\n    *(iVar2 + 8) = iVar5;\n    fcn.008d1579();\n    return;\n}\n",
        "token_count": 569
    },
    "008ce17f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.008ce17f(void)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.008cf4c6();\n    if (0 < *(iVar1 + 0x90)) {\n        iVar1 = fcn.008cf4c6();\n        *(iVar1 + 0x90) = *(iVar1 + 0x90) + -1;\n    }\n    return;\n}\n",
        "token_count": 91
    },
    "008ce830": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008ce830(uint noname_0, uint noname_1, uint arg_10h)\n\n{\n    int32_t iVar1;\n    int32_t unaff_EBP;\n    int32_t *unaff_ESI;\n    int32_t unaff_EDI;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_1ch;\n    \n    *(unaff_EDI + -4) = *(unaff_EBP + -0x24);\n    fcn.008ca9a4(*(unaff_EBP + -0x28));\n    iVar1 = fcn.008cf4c6();\n    *(iVar1 + 0x88) = *(unaff_EBP + -0x2c);\n    iVar1 = fcn.008cf4c6();\n    *(iVar1 + 0x8c) = *(unaff_EBP + -0x30);\n    if ((((*unaff_ESI == -0x1f928c9d) && (unaff_ESI[4] == 3)) &&\n        ((iVar1 = unaff_ESI[5],  iVar1 == 0x19930520 || ((iVar1 == 0x19930521 || (iVar1 == 0x19930522)))))) &&\n       ((*(unaff_EBP + -0x34) == 0 && (*(unaff_EBP + -0x1c) != 0)))) {\n        iVar1 = fcn.008ca97d(unaff_ESI[6]);\n        if (iVar1 != 0) {\n            fcn.008ce1df(unaff_ESI);\n        }\n    }\n    return;\n}\n",
        "token_count": 384
    },
    "008d1938": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\n// WARNING: Possible PIC construction at 0x008d1a2b: Changing call to branch\n// WARNING: Removing unreachable block (ram,0x008d1a30)\n// WARNING: Removing unreachable block (ram,0x008d1a5e)\n// WARNING: Removing unreachable block (ram,0x008d1a36)\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.008d1938(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t *piVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    code *pcVar4;\n    int32_t unaff_EBP;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.008d1534(0x938ad0, 0x18);\n    fcn.008d04e2(8);\n    *(unaff_EBP + -4) = 0;\n    if (*0x92eb3c != 1) {\n        *0x92eb38 = 1;\n        *0x92eb34 = *(unaff_EBP + 0x10);\n        if (*(unaff_EBP + 0xc) == 0) {\n            piVar1 = fcn.008cf23d(*0x93068c);\n            *(unaff_EBP + -0x28) = piVar1;\n            if (piVar1 != NULL) {\n                piVar2 = fcn.008cf23d(*0x930688);\n                *(unaff_EBP + -0x24) = piVar2;\n                *(unaff_EBP + -0x1c) = piVar1;\n                *(unaff_EBP + -0x20) = piVar2;\n                while( true ) {\n                    piVar2 = piVar2 + -1;\n                    *(unaff_EBP + -0x24) = piVar2;\n                    if (piVar2 < piVar1) break;\n                    iVar3 = fcn.008cf234();\n                    if (*piVar2 != iVar3) {\n                        if (piVar2 < piVar1) break;\n                        pcVar4 = fcn.008cf23d(*piVar2);\n                        iVar3 = fcn.008cf234();\n                        *piVar2 = iVar3;\n                        (*pcVar4)();\n                        iVar3 = fcn.008cf23d(*0x93068c);\n                        piVar1 = fcn.008cf23d(*0x930688);\n                        if ((*(unaff_EBP + -0x1c) != iVar3) || (*(unaff_EBP + -0x20) != piVar1)) {\n                            *(unaff_EBP + -0x1c) = iVar3;\n                            *(unaff_EBP + -0x28) = iVar3;\n                            *(unaff_EBP + -0x20) = piVar1;\n                            *(unaff_EBP + -0x24) = piVar1;\n                            piVar2 = piVar1;\n                        }\n                        piVar1 = *(unaff_EBP + -0x28);\n                    }\n                }\n            }\n            fcn.008d17fa(0x9341d0);\n        }\n        fcn.008d17fa(0x9341d8);\n    }\n    *(unaff_EBP + -4) = 0xfffffffe;\n    if (*(unaff_EBP + 0x10) != 0) {\n        fcn.008d03f0(8);\n    }\n    return;\n}\n",
        "token_count": 805
    },
    "008d4492": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.008d4492(void)\n\n{\n    int32_t unaff_EBP;\n    uint var_1ch;\n    \n    if (*(unaff_EBP + -0x1c) != 0) {\n        fcn.008d03f0(0);\n    }\n    return;\n}\n",
        "token_count": 66
    },
    "008c3630": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.008c3630(int32_t param_1)\n\n{\n    int32_t *in_FS_OFFSET;\n    int32_t iStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack4 = 0xffffffff;\n    uStack8 = 0x8e3988;\n    iStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &iStack12;\n    fcn.008c981a(0);\n    if (*(param_1 + 4) != -1) {\n        *(param_1 + 4) = *(param_1 + 4) + 1;\n    }\n    uStack8 = 0xffffffff;\n    fcn.008c9842();\n    *in_FS_OFFSET = param_1;\n    return;\n}\n",
        "token_count": 174
    },
    "008c3690": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint32_t __fastcall fcn.008c3690(uint32_t param_1)\n\n{\n    int32_t iVar1;\n    uint32_t *in_FS_OFFSET;\n    uint32_t uStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack4 = 0xffffffff;\n    uStack8 = 0x8e39a8;\n    uStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &uStack12;\n    fcn.008c981a(0);\n    iVar1 = *(param_1 + 4);\n    if ((iVar1 != 0) && (iVar1 != -1)) {\n        *(param_1 + 4) = iVar1 + -1;\n    }\n    iVar1 = *(param_1 + 4);\n    uStack8 = 0xffffffff;\n    fcn.008c9842();\n    *in_FS_OFFSET = param_1;\n    return ~-(iVar1 != 0) & param_1;\n}\n",
        "token_count": 217
    },
    "008c3a00": {
        "rules": [
            "compute adler32 checksum/9b5b0101cb1f4ee58265f4165dc89da1/add814525c1e453b80d52fb1e3a7e9dc"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __fastcall fcn.008c3a00(uint param_1, uint *param_2)\n\n{\n    uint8_t uVar1;\n    uint8_t uVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uchar auStack124 [2];\n    uint8_t uStack122;\n    int32_t iVar6;\n    uint32_t *puStack48;\n    int32_t *piStack44;\n    uchar auStack32 [4];\n    uint *apuStack28 [7];\n    \n    apuStack28[0] = param_2;\n    *0x9139d4 = (**0x93400c)();\n    *0x90658c = (**0x934008)(*0x9139d4, 0x93420c);\n    iVar3 = (**0x90658c)(0, *param_2);\n    uVar4 = 0;\n    iVar6 = 4;\n    uVar5 = 0;\n    if (*puStack48 == 0) {\n        *piStack44 = iVar3;\n        *puStack48 = 0;\n        return;\n    }\n    do {\n        *0x9005a8 = 0;\n        if (*0x92e818 == 0xc3a) {\n            *0x906588 = 0;\n        }\n        *0x91397c = 0x9f4faef4;\n        uVar2 = *(*piStack44 + 2 + uVar5);\n        uVar1 = *(*piStack44 + 3 + uVar5);\n        auStack124[1] = *(*piStack44 + uVar5);\n        uStack122 = *(*piStack44 + uVar5) >> 8;\n        _auStack124 = CONCAT12(uStack122 | uVar1 << 4 & 0xc0, CONCAT11(auStack124[1] | (uVar1 & 0x30) << 2, uVar1 << 4))\n        ;\n        *0x9139c0 = 0;\n        *0x9139c4 = 0;\n        if (*0x92e818 == 0xbfb) {\n            (**0x934004)(0, 0, 0x934218, 0, &stack0xffffff88);\n            *0x8fc650 = 0xea6088b6;\n            *0x8fc654 = 0xffffffff;\n        }\n        *0x8fc638 = 0;\n        *0x8fc63c = 0;\n        auStack124[1] = (_auStack124 & 0xffff00) >> 8;\n        uStack122 = (_auStack124 & 0xffff00) >> 0x10;\n        *(uVar4 + iVar3) = auStack124[1];\n        *(uVar4 + 1 + iVar3) = uStack122;\n        *0x913934 = 0;\n        if (*0x92e818 == 0x8a) {\n            (**0x934000)(0, auStack32, 0, 0, apuStack28);\n            *0x8fc61c = 0x9bb5a1c2;\n        }\n        *0x911600 = 0;\n        *(uVar4 + 2 + iVar3) = uVar2 | uVar1 << 6;\n        uVar5 = uVar5 + iVar6;\n        uVar4 = uVar4 + 3;\n    } while (uVar5 < *puStack48);\n    *piStack44 = iVar3;\n    *puStack48 = uVar4;\n    return;\n}\n",
        "token_count": 813
    },
    "008c7130": {
        "rules": [
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43",
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.008c7130(int32_t param_1, uint32_t param_2, int32_t param_3)\n\n{\n    uint32_t uVar1;\n    uint *arg_8h;\n    int32_t arg_10h;\n    uint *puVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint *in_FS_OFFSET;\n    uint32_t var_8h;\n    int32_t var_ch;\n    uint var_10h;\n    uint var_18h;\n    uint var_14h;\n    uint var_ch_2;\n    uint uStack12;\n    uint var_4h;\n    \n    uStack12 = 0x8e3c80;\n    var_ch_2 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &var_ch_2;\n    uVar4 = var_8h | 0xf;\n    if (uVar4 != 0xffffffff) {\n        uVar1 = *(param_1 + 0x18);\n        uVar3 = uVar1 >> 1;\n        var_8h = uVar4;\n        if ((uVar4 / 3 < uVar3) && (uVar1 <= -uVar3 - 2)) {\n            var_8h = uVar3 + uVar1;\n        }\n    }\n    var_4h = 0;\n    arg_8h = fcn.008c6900(var_8h + 1);\n    var_4h = 0xffffffff;\n    if (var_ch != 0) {\n        if (*(param_1 + 0x18) < 0x10) {\n            arg_10h = param_1 + 4;\n        }\n        else {\n            arg_10h = *(param_1 + 4);\n        }\n        fcn.008cab3d(arg_8h, var_8h + 1, arg_10h, var_ch);\n    }\n    if (0xf < *(param_1 + 0x18)) {\n        fcn.008cab32(*(param_1 + 4));\n    }\n    puVar2 = param_1 + 4;\n    *puVar2 = 0;\n    *puVar2 = arg_8h;\n    *(param_1 + 0x18) = var_8h;\n    *(param_1 + 0x14) = var_ch;\n    if (0xf < var_8h) {\n        puVar2 = arg_8h;\n    }\n    *(puVar2 + var_ch) = 0;\n    *in_FS_OFFSET = var_ch_2;\n    return;\n}\n",
        "token_count": 578
    },
    "008c90a0": {
        "rules": [
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43",
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __thiscall fcn.008c90a0(int32_t param_1, uint param_2, int32_t param_3, uint32_t param_4, uint param_5)\n\n{\n    uint32_t uVar1;\n    uchar *puVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint uVar5;\n    int32_t iVar6;\n    uint32_t uVar7;\n    uint *in_FS_OFFSET;\n    int32_t var_ch_2;\n    uint32_t var_10h_2;\n    uint var_14h;\n    uint var_10h;\n    uint var_38h;\n    int32_t var_1ch;\n    int32_t var_18h;\n    int32_t var_14h_2;\n    uchar *puStack20;\n    uint var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x8e4190;\n    var_ch = *in_FS_OFFSET;\n    *in_FS_OFFSET = &var_ch;\n    puStack20 = &stack0xffffffb8;\n    iVar3 = *(param_1 + 0xc);\n    if (iVar3 == 0) {\n        uVar7 = 0;\n    }\n    else {\n        iVar6 = *(param_1 + 0x14) - iVar3;\n        iVar3 = iVar6 * -0x6db6db6d;\n        uVar7 = iVar6 / 0x1c;\n    }\n    if (var_10h_2 != 0) {\n        iVar3 = (*(param_1 + 0x10) - *(param_1 + 0xc)) / 0x1c;\n        var_1ch = param_1;\n        puVar2 = &stack0xffffffb8;\n        if (0x9249249U - iVar3 < var_10h_2) {\n            iVar3 = fcn.008c8190();\n            puVar2 = puStack20;\n        }\n        puStack20 = puVar2;\n        uVar1 = iVar3 + var_10h_2;\n        if (uVar7 < uVar1) {\n            if (0x9249249 - (uVar7 >> 1) < uVar7) {\n                uVar7 = 0;\n            }\n            else {\n                uVar7 = uVar7 + (uVar7 >> 1);\n            }\n            if (uVar7 < uVar1) {\n                uVar7 = uVar1;\n            }\n            iVar4 = fcn.008c6a10(uVar7);\n            var_4h = 0;\n            var_14h_2 = iVar4;\n            var_14h_2 = fcn.008c8e80(*(param_1 + 0xc), var_ch_2, iVar4);\n            var_14h_2 = fcn.008c8da0(var_14h_2, var_10h_2, var_14h);\n            fcn.008c8e80(var_ch_2, *(param_1 + 0x10), var_14h_2);\n            var_4h = 0xffffffff;\n            iVar3 = *(param_1 + 0xc);\n            iVar6 = *(param_1 + 0x10);\n            if (*(param_1 + 0xc) != 0) {\n                fcn.008c8430(param_1 + 8, var_14h);\n                fcn.008cab32(*(param_1 + 0xc));\n            }\n            *(param_1 + 0x14) = iVar4 + uVar7 * 0x1c;\n            *(param_1 + 0x10) = iVar4 + (var_10h_2 + (iVar6 - iVar3) / 0x1c) * 0x1c;\n            *(param_1 + 0xc) = iVar4;\n            *in_FS_OFFSET = var_ch;\n            return iVar4;\n        }\n        if ((*(param_1 + 0x10) - var_ch_2) / 0x1c < var_10h_2) {\n            fcn.008c7b30(var_14h);\n            var_4h = 2;\n            fcn.008c8e80(var_ch_2, *(param_1 + 0x10), var_10h_2 * 0x1c + var_ch_2);\n            var_4h = CONCAT31(var_4h._1_3_, 3);\n            fcn.008c8da0(*(param_1 + 0x10), var_10h_2 - (*(param_1 + 0x10) - var_ch_2) / 0x1c, &var_38h);\n            var_4h = 2;\n            *(param_1 + 0x10) = *(param_1 + 0x10) + var_10h_2 * 0x1c;\n            fcn.008c8830(var_ch_2, *(param_1 + 0x10) + var_10h_2 * -0x1c, &var_38h);\n        }\n        else {\n            fcn.008c7b30(var_14h);\n            var_4h = 5;\n            var_18h = *(param_1 + 0x10);\n            iVar3 = var_18h + var_10h_2 * -0x1c;\n            uVar5 = fcn.008c8e80(iVar3, var_18h, var_18h);\n            *(param_1 + 0x10) = uVar5;\n            fcn.008c8eb0(var_ch_2, iVar3, var_18h);\n            fcn.008c8830(var_ch_2, var_10h_2 * 0x1c + var_ch_2, &var_38h);\n        }\n        var_4h = 0xffffffff;\n        iVar3 = fcn.008c7340();\n    }\n    *in_FS_OFFSET = var_ch;\n    return iVar3;\n}\n",
        "token_count": 1372
    },
    "008c4060": {
        "rules": [
            "encrypt data using HC-128/01272f7612224ac7bcc403d9d7459f40"
        ],
        "decompiled_code": "\nuint32_t fcn.008c4060(void)\n\n{\n    *0x906560 = 0;\n    if (*0x92e818 == 0x13d4) {\n        (**0x934010)(0, 0, 0x934238);\n        *0x905dc8 = 0x9c9f9508;\n        *0x905dcc = 0xffffffff;\n    }\n    if (*0x92e818 == 0x82b) {\n        *0x8fc618 = 0;\n    }\n    *0x903b90 = *0x903b90 * 0x343fd + 0x269ec3;\n    *0x8fc624 = 0;\n    *0x906568 = 0xf71ca014;\n    *0x90656c = 0xffffffff;\n    *0x9139a0 = 0x8f9ea07e;\n    *0x9139a4 = 0xffffffff;\n    return *0x903b90 >> 0x10 & 0x7fff;\n}\n",
        "token_count": 237
    },
    "008c4e00": {
        "rules": [
            "compute adler32 checksum/59ba9d7991e641c88d7c729645f1cfca"
        ],
        "decompiled_code": "\nuint fcn.008c4e00(void)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    uint uVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    uint *in_FS_OFFSET;\n    int32_t iStack2272;\n    int32_t iStack2264;\n    uint32_t auStack2260 [2];\n    ushort uStack2252;\n    uint32_t uStack2250;\n    ushort uStack2246;\n    ushort uStack2244;\n    ushort uStack2242;\n    ushort uStack2240;\n    ushort uStack2238;\n    uint uStack2236;\n    int32_t iStack2232;\n    uint uStack2228;\n    uint32_t uStack2224;\n    uint32_t uStack2220;\n    uchar auStack2212 [20];\n    uchar auStack2192 [112];\n    uchar auStack2080 [2056];\n    uint uStack24;\n    uint uStack12;\n    uint uStack8;\n    uint32_t uStack4;\n    \n    uStack12 = *in_FS_OFFSET;\n    uStack4 = 0xffffffff;\n    uStack8 = 0x8e4211;\n    *in_FS_OFFSET = &uStack12;\n    if (iStack2272 == 0x3443d2) {\n        (**0x934030)(0, 0);\n        (**0x93402c)(0, 0, auStack2212);\n        uStack2250 = 0;\n        uStack2246 = 0;\n        uStack2244 = 0;\n        uStack2242 = 0;\n        uStack2240 = 0;\n        uStack2238 = 0;\n        uStack2252 = 0;\n        (**0x934028)(0, 0, &uStack2252, 0, auStack2080, 0);\n        (**0x934024)(0, 0);\n        (**0x934180)(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n        fcn.008c9380(3, 1);\n        fcn.008c8b10();\n        uStack2228 = 0xf;\n        iStack2232 = 0;\n        uStack2250 = uStack2250 & 0xff00ffff;\n        fcn.008c79c0(0x934330, 0x23);\n        fcn.008c94f0(auStack2260);\n        if (0xf < CONCAT22(uStack2238, uStack2240)) {\n            fcn.008cab32(auStack2260[0]);\n        }\n        uVar4 = uStack2220;\n        uStack2240 = 0xf;\n        uStack2238 = 0;\n        uStack2244 = 0;\n        uStack2242 = 0;\n        auStack2260[0] = auStack2260[0] & 0xffffff00;\n        if (uStack2220 < uStack2224) {\n            fcn.008cadb3();\n        }\n        uVar3 = uStack2236;\n        if (uStack2220 < uStack2224) {\n            fcn.008cadb3();\n        }\n        fcn.008c8cb0(auStack2192, uStack2236, uStack2224, uVar3, uVar4);\n        fcn.008cb17d(0);\n        fcn.008cb0c6(0, 0);\n        fcn.008caffc(0);\n        uStack4 = uStack4 & 0xffffff00;\n        fcn.008c8ee0();\n        uStack4 = 0xffffffff;\n        fcn.008c72c0();\n    }\n    pcVar2 = *0x934020;\n    pcVar1 = *0x93401c;\n    iVar5 = 0;\n    while( true ) {\n        (*pcVar2)(0, 0, 0, 0);\n        (*pcVar1)();\n        if (((0xda2daf < iVar5) && (iStack2232 != 0x12866)) && (iStack2264 != 0x6720a8)) break;\n        iVar5 = iVar5 + 1;\n        if (0x2881c1f9 < iVar5) {\ncode_r0x008c5005:\n            *0x906548 = (**0x934018)(0, *0x92e818);\n            uVar4 = 0;\n            *0x92e824 = *0x8e5008;\n            if (*0x92e818 != 0) {\n                do {\n                    (*0x906548)[uVar4] = *(*0x92e824 + 0x4defc + uVar4);\n                    uVar4 = uVar4 + 1;\n                } while (uVar4 < *0x92e818);\n            }\n            fcn.008c3a00();\n            *0x9139d4 = (**0x934014)(0x934354);\n            *0x8fe3cb = 0x65;\n            *0x92e834 = 0;\n            *0x8fe3c2 = 0x72;\n            *0x913960 = 0;\n            *0x913964 = 0;\n            *0x8fe3c6 = 0x6c;\n            *0x92e830 = 0;\n            *0x8fe3c5 = 0x61;\n            *0x913938 = 0;\n            *0x8fe3c0 = 0x56;\n            *0x8e85d0 = 0xb5b13a98;\n            *0x8fe3cd = 0x74;\n            *0x913948 = 0;\n            *0x91394c = 0;\n            *0x8fe3cc = 99;\n            *0x8fe3c1 = 0x69;\n            *0x90657c = 0x87a93600;\n            *0x8fe3c9 = 0x6f;\n            *0x8fc644 = 0;\n            *0x8fe3ca = 0x74;\n            *0x903b70 = 0x9cd13e94;\n            *0x903b74 = 0xffffffff;\n            *0x8fe3c8 = 0x72;\n            *0x913954 = 0x8c592958;\n            *0x8fe3c3 = 0x74;\n            *0x8e85c0 = 0xd698eb94;\n            *0x8fe3c7 = 0x50;\n            *0x913ad8 = 0;\n            *0x913adc = 0;\n            *0x91160c = 0xd44c988a;\n            *0x8fe3c4 = 0x75;\n            *0x903bc8 = 0x9f16720e;\n            *0x903bcc = 0xffffffff;\n            *0x8fe3ce = 0;\n            iVar5 = 0;\n            do {\n                if (iVar5 == 0x112f38) {\n                    fcn.008c4390();\n                }\n                iVar5 = iVar5 + 1;\n            } while (iVar5 < 0x43827a);\n            fcn.008c4050();\n            fcn.008c4350();\n            *0x9139e0 = *0x906548;\n            (**0x906548)();\n            *in_FS_OFFSET = uStack24;\n            return 0;\n        }\n    }\n    *0x92e818 = *0x8e5414 + 0x4defc;\n    goto code_r0x008c5005;\n}\n",
        "token_count": 1740
    },
    "008e3650": {
        "rules": [
            "compute adler32 checksum/59ba9d7991e641c88d7c729645f1cfca"
        ],
        "decompiled_code": "\nuint32_t * fcn.008e3650(uint32_t *param_1, char param_2)\n\n{\n    uint32_t uVar1;\n    char cVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint32_t *puVar5;\n    \n    uVar1 = param_1 & 3;\n    while (uVar1 != 0) {\n        if (*param_1 == param_2) {\n            return param_1;\n        }\n        if (*param_1 == '\\0') {\n            return NULL;\n        }\n        uVar1 = param_1 + 1 & 3;\n        param_1 = param_1 + 1;\n    }\n    while( true ) {\n        while( true ) {\n            uVar1 = *param_1;\n            uVar4 = uVar1 ^ CONCAT22(CONCAT11(param_2, param_2), CONCAT11(param_2, param_2));\n            uVar3 = uVar1 ^ 0xffffffff ^ uVar1 + 0x7efefeff;\n            puVar5 = param_1 + 1;\n            if (((uVar4 ^ 0xffffffff ^ uVar4 + 0x7efefeff) & 0x81010100) != 0) break;\n            param_1 = puVar5;\n            if ((uVar3 & 0x81010100) != 0) {\n                if ((uVar3 & 0x1010100) != 0) {\n                    return NULL;\n                }\n                if ((uVar1 + 0x7efefeff & 0x80000000) == 0) {\n                    return NULL;\n                }\n            }\n        }\n        uVar1 = *param_1;\n        if (uVar1 == param_2) {\n            return param_1;\n        }\n        if (uVar1 == '\\0') {\n            return NULL;\n        }\n        cVar2 = uVar1 >> 8;\n        if (cVar2 == param_2) {\n            return param_1 + 1;\n        }\n        if (cVar2 == '\\0') break;\n        cVar2 = uVar1 >> 0x10;\n        if (cVar2 == param_2) {\n            return param_1 + 2;\n        }\n        if (cVar2 == '\\0') {\n            return NULL;\n        }\n        cVar2 = uVar1 >> 0x18;\n        if (cVar2 == param_2) {\n            return param_1 + 3;\n        }\n        param_1 = puVar5;\n        if (cVar2 == '\\0') {\n            return NULL;\n        }\n    }\n    return NULL;\n}\n",
        "token_count": 591
    },
    "008d9aff": {
        "rules": [
            "encrypt data using Curve25519/bbf924b96e5b4ce780ce59f68f21b030"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x008d9f27)\n// WARNING: Removing unreachable block (ram,0x008d9ee7)\n// WARNING: Removing unreachable block (ram,0x008d9eff)\n// WARNING: Removing unreachable block (ram,0x008d9ea7)\n// WARNING: Removing unreachable block (ram,0x008d9f3f)\n// WARNING: Removing unreachable block (ram,0x008d9ebf)\n// WARNING: Removing unreachable block (ram,0x008d9d93)\n\nuint32_t fcn.008d9aff(void)\n\n{\n    char cVar1;\n    uint32_t uVar2;\n    char *pcVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    bool bVar6;\n    \n    do {\n        uVar5 = 0;\n        if (**0x92f418 == '_') {\n            *0x92f418 = *0x92f418 + 1;\n            uVar5 = 0x4000;\n        }\n        cVar1 = **0x92f418;\n        if (('@' < cVar1) && (cVar1 < '[')) {\n            uVar2 = **0x92f418 - 0x41;\n            *0x92f418 = *0x92f418 + 1;\n            if ((uVar2 & 1) == 0) {\n                uVar5 = uVar5 | 0x8000;\n            }\n            else {\n                uVar5 = uVar5 | 0xa000;\n            }\n            if (0x17 < uVar2) {\n                return uVar5;\n            }\n            if ((uVar5 & 0x8000) == 0) {\n                uVar5 = uVar5 & 0xffff9fff;\n            }\n            else {\n                uVar5 = uVar5 | 0x800;\n            }\n            uVar4 = uVar2 & 0x18;\n            if (uVar4 == 0) {\n                if ((uVar5 & 0x8000) == 0) {\n                    uVar5 = uVar5 | 0x800;\n                }\n                else {\n                    uVar5 = uVar5 | 0x40;\n                }\n            }\n            else if (uVar4 == 8) {\n                if ((uVar5 & 0x8000) == 0) {\n                    uVar5 = uVar5 & 0xfffff7ff | 0x1000;\n                }\n                else {\n                    uVar5 = uVar5 | 0x80;\n                }\n            }\n            else {\n                if (uVar4 != 0x10) {\n                    return 0xffff;\n                }\n                if ((uVar5 & 0x8000) == 0) {\n                    uVar5 = uVar5 & 0xffffe7ff;\n                }\n            }\n            uVar2 = uVar2 & 6;\n            if (uVar2 != 0) {\n                if (uVar2 == 2) {\n                    if ((uVar5 & 0x8000) == 0) {\n                        return uVar5 & 0xffff9fff;\n                    }\n                    return uVar5 | 0x200;\n                }\n                if (uVar2 != 4) {\n                    if (uVar2 != 6) {\n                        return 0xffff;\n                    }\n                    return uVar5 | 0x400;\n                }\n                return uVar5 | 0x100;\n            }\n            return uVar5;\n        }\n        if (cVar1 != '$') {\n            cVar1 = **0x92f418;\n            if (('/' < cVar1) && (cVar1 < '9')) {\n                *0x92f418 = *0x92f418 + 1;\n    // switch table (9 cases) at 0x8d9fc7\n                switch(cVar1) {\n                case '0':\n                    return 0x800;\n                case '1':\n                    return 0x1000;\n                case '2':\n                    return 0;\n                case '3':\n                    return 0x4000;\n                case '4':\n                    return 0x2000;\n                case '5':\n                    return 0x6000;\n                case '6':\n                    return 0x6800;\n                case '7':\n                    return 0x7000;\n                case '8':\n                    return 0x7800;\n                default:\n                    return 0xffff;\n                }\n            }\n            if (cVar1 != '9') {\n                return (cVar1 != '\\0') + 0xfffe;\n            }\n            *0x92f418 = *0x92f418 + 1;\n            return 0xfffd;\n        }\n        bVar6 = false;\n        pcVar3 = *0x92f418 + 1;\n        cVar1 = *pcVar3;\n        if ('B' < cVar1) {\n            if (cVar1 == 'C') {\n                uVar5 = 0x7c00;\n                goto code_r0x008d9e5d;\n            }\n            if (cVar1 == 'D') {\n                uVar5 = uVar5 | 0x9100;\n                goto code_r0x008d9e5d;\n            }\n            if (cVar1 == 'E') {\n                uVar5 = uVar5 | 0x9200;\n                goto code_r0x008d9e5d;\n            }\n            if (cVar1 != 'R') {\n                *0x92f418 = pcVar3;\n                return 0xffff;\n            }\n            pcVar3 = *0x92f418 + 2;\n            cVar1 = *pcVar3;\n            bVar6 = true;\n            if ((cVar1 < '0') || ('5' < cVar1)) {\n                *0x92f418 = pcVar3;\n                return (cVar1 == '\\0') + 0xfffe;\n            }\ncode_r0x008d9d73:\n            if (bVar6) {\n                uVar5 = uVar5 | 0x8e00;\n            }\n            else {\n                uVar5 = uVar5 | 0x8d00;\n            }\n            if ((*pcVar3 - 0x30U & 1) != 0) {\n                uVar5 = uVar5 | 0x2000;\n            }\n            uVar2 = *pcVar3 - 0x30U & 6;\n            if (uVar2 == 0) {\n                if ((uVar5 & 0x8000) == 0) {\n                    uVar5 = uVar5 | 0x800;\n                }\n                else {\n                    uVar5 = uVar5 | 0x40;\n                }\n            }\n            else if (uVar2 == 2) {\n                if ((uVar5 & 0x8000) == 0) {\n                    uVar5 = uVar5 & 0xfffff7ff | 0x1000;\n                }\n                else {\n                    uVar5 = uVar5 | 0x80;\n                }\n            }\n            else {\n                if (uVar2 != 4) {\n                    *0x92f418 = pcVar3;\n                    return 0xffff;\n                }\n                if ((uVar5 & 0x8000) == 0) {\n                    uVar5 = uVar5 & 0xffffe7ff;\n                }\n            }\n            goto code_r0x008d9e5d;\n        }\n        if (cVar1 == 'B') {\n            uVar5 = uVar5 | 0x9800;\n            goto code_r0x008d9e5d;\n        }\n        if (cVar1 == '\\0') {\n            uVar5 = 0xfffe;\n            pcVar3 = *0x92f418;\n            goto code_r0x008d9e5d;\n        }\n        if (cVar1 != '$') {\n            if (cVar1 < '0') {\n                *0x92f418 = pcVar3;\n                return 0xffff;\n            }\n            if ('5' < cVar1) {\n                if (cVar1 != 'A') {\n                    *0x92f418 = pcVar3;\n                    return 0xffff;\n                }\n                uVar5 = uVar5 | 0x9000;\n                goto code_r0x008d9e5d;\n            }\n            goto code_r0x008d9d73;\n        }\n        if ((*0x92f418)[2] == 'P') {\n            pcVar3 = *0x92f418 + 2;\n        }\n        *0x92f418 = pcVar3 + 1;\n        cVar1 = **0x92f418;\n        if (cVar1 < 'K') {\n            if (cVar1 == 'J') {\ncode_r0x008d9cec:\n                cVar1 = pcVar3[2];\n                if (('/' < cVar1) && (cVar1 < ':')) {\n                    *0x92f418 = pcVar3 + cVar1 + -0x2d;\n                    uVar5 = fcn.008d9aff();\n                    return uVar5 | 0x10000;\n                }\n                uVar5 = 0xffff;\n                pcVar3 = pcVar3 + 2;\ncode_r0x008d9e5d:\n                *0x92f418 = pcVar3 + 1;\n                return uVar5;\n            }\n            if (cVar1 == '\\0') {\n                return 0xfffe;\n            }\n            if (cVar1 != 'F') {\n                bVar6 = cVar1 == 'H';\ncode_r0x008d9ba6:\n                if (!bVar6) {\n                    return 0xffff;\n                }\n            }\n        }\n        else {\n            if (cVar1 < 'L') {\n                return 0xffff;\n            }\n            if ('M' < cVar1) {\n                if ('O' < cVar1) {\n                    bVar6 = cVar1 == 'Q';\n                    goto code_r0x008d9ba6;\n                }\n                goto code_r0x008d9cec;\n            }\n        }\n        *0x92f418 = pcVar3 + 2;\n    } while( true );\n}\n",
        "token_count": 2288
    },
    "008df98b": {
        "rules": [
            "decompress data using LZO/b26d4b886bd545b48ed63f32c6357c17",
            "decompress data using LZO/b26d4b886bd545b48ed63f32c6357c17"
        ],
        "decompiled_code": "\nvoid fcn.008df98b(void)\n\n{\n    uint8_t *puVar1;\n    int32_t unaff_EBP;\n    uint32_t unaff_ESI;\n    int32_t unaff_EDI;\n    uint var_1ch;\n    \n    if (*(unaff_EBP + -0x1c) == unaff_EDI) {\n        puVar1 = *((unaff_ESI >> 5) * 4 + 0x92f560) + 4 + (unaff_ESI & 0x1f) * 0x40;\n        *puVar1 = *puVar1 & 0xfe;\n    }\n    fcn.008df6dc(unaff_ESI);\n    return;\n}\n",
        "token_count": 158
    },
    "008c3340": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint * __fastcall fcn.008c3340(uint *param_1)\n\n{\n    uint *in_FS_OFFSET;\n    uint uStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack4 = 0xffffffff;\n    uStack8 = 0x8e3908;\n    uStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &uStack12;\n    fcn.008ca325(&stack0x00000004);\n    *param_1 = 0x93441c;\n    *in_FS_OFFSET = param_1;\n    return param_1;\n}\n",
        "token_count": 133
    },
    "008c3490": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.008c3490(uint param_1, uint param_2, uint param_3, uint param_4)\n\n{\n    fcn.008cab3d(param_1, param_2, param_3, param_4);\n    return param_1;\n}\n",
        "token_count": 61
    },
    "008c34c0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.008c34c0(uint param_1, uint param_2, uint param_3, uint param_4)\n\n{\n    fcn.008cabba(param_1, param_2, param_3, param_4);\n    return param_1;\n}\n",
        "token_count": 61
    },
    "008c3950": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint * __thiscall fcn.008c3950(int32_t param_1, uint *param_2)\n\n{\n    uint *in_FS_OFFSET;\n    uint uStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack4 = 0xffffffff;\n    uStack8 = 0x8e3a39;\n    uStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &uStack12;\n    *param_2 = **(param_1 + 0x24);\n    fcn.008c3630();\n    *in_FS_OFFSET = uStack12;\n    return param_2;\n}\n",
        "token_count": 140
    },
    "008c4350": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.008c4350(int32_t param_1, int32_t param_2)\n\n{\n    uint8_t uVar1;\n    int32_t iVar2;\n    uint8_t uStack8;\n    \n    iVar2 = 0;\n    if (0 < param_2) {\n        do {\n            uStack8 = *(iVar2 + param_1);\n            uVar1 = fcn.008c4060();\n            uStack8 = uStack8 ^ uVar1;\n            *(iVar2 + param_1) = uStack8;\n            iVar2 = iVar2 + 1;\n        } while (iVar2 < param_2);\n    }\n    return;\n}\n",
        "token_count": 150
    },
    "008c55f0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.008c55f0(int32_t param_1)\n\n{\n    uint uVar1;\n    uint *in_FS_OFFSET;\n    uchar auStack12 [12];\n    \n    uVar1 = *in_FS_OFFSET;\n    *in_FS_OFFSET = auStack12;\n    *(*(*(param_1 + -0xc) + 4) + -0xc + param_1) = 0x934458;\n    *(*(*(param_1 + -4) + 4) + -4 + param_1) = 0x934440;\n    *(*(*(param_1 + -0xc) + 4) + -0xc + param_1) = 0x934450;\n    *in_FS_OFFSET = uVar1;\n    return;\n}\n",
        "token_count": 167
    },
    "008c5700": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.008c5700(int32_t *param_1)\n\n{\n    int32_t *arg_8h;\n    uint *in_FS_OFFSET;\n    uint uStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack8 = 0x8e3ab8;\n    uStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &uStack12;\n    arg_8h = param_1 + 1;\n    *(*(*param_1 + 4) + -4 + arg_8h) = 0x934440;\n    *arg_8h = 0x934448;\n    uStack4 = 0xffffffff;\n    *arg_8h = 0x934438;\n    fcn.008c9ee2(arg_8h);\n    *in_FS_OFFSET = uStack12;\n    return;\n}\n",
        "token_count": 193
    },
    "008c5760": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.008c5760(int32_t *param_1)\n\n{\n    int32_t *arg_8h;\n    uint *in_FS_OFFSET;\n    uint uStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack8 = 0x8e3ad8;\n    uStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &uStack12;\n    arg_8h = param_1 + 2;\n    *(*(*param_1 + 4) + -8 + arg_8h) = 0x934450;\n    *arg_8h = 0x934448;\n    uStack4 = 0xffffffff;\n    *arg_8h = 0x934438;\n    fcn.008c9ee2(arg_8h);\n    *in_FS_OFFSET = uStack12;\n    return;\n}\n",
        "token_count": 193
    },
    "008c57c0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.008c57c0(int32_t param_1)\n\n{\n    uint *arg_8h;\n    uint *in_FS_OFFSET;\n    uint uStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack4 = 0xffffffff;\n    uStack8 = 0x8e3af8;\n    uStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &uStack12;\n    arg_8h = param_1 + 0xc;\n    fcn.008c55f0();\n    *arg_8h = 0x934448;\n    uStack4 = 0xffffffff;\n    *arg_8h = 0x934438;\n    fcn.008c9ee2(arg_8h);\n    *in_FS_OFFSET = uStack12;\n    return;\n}\n",
        "token_count": 185
    },
    "008c5c70": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nint32_t ** __thiscall fcn.008c5c70(int32_t **param_1, int32_t param_2)\n\n{\n    int32_t *piVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    \n    piVar2 = *param_1;\n    if (piVar2 == NULL) {\n        fcn.008cadb3();\n        piVar2 = *param_1;\n        if (piVar2 != NULL) goto code_r0x008c5c85;\n        iVar3 = 0;\n    }\n    else {\ncode_r0x008c5c85:\n        iVar3 = *piVar2;\n    }\n    piVar1 = param_1[1] + param_2 * 7;\n    if (piVar1 < *(iVar3 + 0x10) || piVar1 == *(iVar3 + 0x10)) {\n        if (piVar2 == NULL) {\n            iVar3 = 0;\n        }\n        else {\n            iVar3 = *piVar2;\n        }\n        if (*(iVar3 + 0xc) <= piVar1) goto code_r0x008c5cba;\n    }\n    fcn.008cadb3();\ncode_r0x008c5cba:\n    param_1[1] = param_1[1] + param_2 * 7;\n    return param_1;\n}\n",
        "token_count": 307
    },
    "008c5dc0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint * __thiscall fcn.008c5dc0(uint *param_1, uint param_2)\n\n{\n    uint *in_FS_OFFSET;\n    uint uStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack4 = 0xffffffff;\n    uStack8 = 0x8e3b68;\n    uStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &uStack12;\n    fcn.008ca395(param_2);\n    *param_1 = 0x93441c;\n    *in_FS_OFFSET = param_1;\n    return param_1;\n}\n",
        "token_count": 137
    },
    "008c5ec0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a",
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\nuint * __thiscall fcn.008c5ec0(uint *param_1, uint param_2, uint param_3)\n\n{\n    uint *puVar1;\n    uint *in_FS_OFFSET;\n    uchar auStack28 [16];\n    uint uStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack8 = 0x8e3b90;\n    uStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &uStack12;\n    *param_1 = 0x934428;\n    param_1[1] = param_3;\n    *param_1 = 0x934430;\n    uStack4 = 1;\n    *param_1 = 0x934468;\n    puVar1 = fcn.008c96f7(auStack28);\n    param_1[2] = *puVar1;\n    param_1[3] = puVar1[1];\n    param_1[4] = puVar1[2];\n    param_1[5] = puVar1[3];\n    *in_FS_OFFSET = uStack12;\n    return param_1;\n}\n",
        "token_count": 253
    },
    "008c6120": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.008c6120(uint *param_1)\n\n{\n    uint *in_FS_OFFSET;\n    uint uStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack8 = 0x8e3bb0;\n    uStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &uStack12;\n    *param_1 = 0x934468;\n    uStack4 = 0;\n    if (param_1[5] < 1) {\n        if (param_1[5] < 0) {\n            fcn.008cae9a(param_1[4]);\n        }\n    }\n    else {\n        fcn.008caea5(param_1[4]);\n    }\n    *param_1 = 0x934430;\n    *param_1 = 0x934428;\n    *in_FS_OFFSET = uStack12;\n    return;\n}\n",
        "token_count": 202
    },
    "008c61c0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.008c61c0(uint *param_1)\n\n{\n    int32_t *piVar1;\n    uint *puVar2;\n    uint *in_FS_OFFSET;\n    uint uStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack8 = 0x8e3bcb;\n    uStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &uStack12;\n    *param_1 = 0x934498;\n    uStack4 = 0;\n    piVar1 = param_1[0xe];\n    if (piVar1 != NULL) {\n        if (*piVar1 != 0) {\n            puVar2 = fcn.008c3690();\n            if (puVar2 != NULL) {\n                (***puVar2)(1);\n            }\n        }\n        fcn.008cab32(piVar1);\n    }\n    uStack4 = 0xffffffff;\n    fcn.008ca04a();\n    *in_FS_OFFSET = uStack12;\n    return;\n}\n",
        "token_count": 230
    },
    "008c6440": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.008c6440(uint *param_1)\n\n{\n    uint *in_FS_OFFSET;\n    uint uStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack8 = 0x8e3be8;\n    uStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &uStack12;\n    *param_1 = 0x9344d4;\n    uStack4 = 0;\n    fcn.008c5950();\n    uStack4 = 0xffffffff;\n    fcn.008c61c0();\n    *in_FS_OFFSET = uStack12;\n    return;\n}\n",
        "token_count": 143
    },
    "008c6980": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint * __fastcall fcn.008c6980(uint *param_1)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    uint *in_FS_OFFSET;\n    uint uStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack4 = 0xffffffff;\n    uStack8 = 0x8e3c0b;\n    uStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &uStack12;\n    *param_1 = 0x934498;\n    fcn.008ca030();\n    uStack4 = 0;\n    puVar1 = fcn.008cade9(4);\n    if (puVar1 == NULL) {\n        puVar1 = NULL;\n    }\n    else {\n        uVar2 = fcn.008c9c76();\n        *puVar1 = uVar2;\n        fcn.008c99b1();\n        fcn.008c3630();\n    }\n    param_1[0xe] = puVar1;\n    fcn.008c5bb0();\n    *in_FS_OFFSET = uStack12;\n    return param_1;\n}\n",
        "token_count": 252
    },
    "008c6a10": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.008c6a10(uint32_t param_1)\n\n{\n    code *pcVar1;\n    \n    if (param_1 == 0) {\n        param_1 = 0;\n    }\n    else if (0xffffffff / param_1 < 0x1c) {\n        fcn.008c3340();\n        fcn.008cae4e(&stack0xfffffff0, 0x937910);\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    fcn.008cade9(param_1 * 0x1c);\n    return;\n}\n",
        "token_count": 137
    },
    "008c6c90": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.008c6c90(int32_t param_1)\n\n{\n    uint *in_FS_OFFSET;\n    uint uStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack8 = 0x8e3c36;\n    uStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &uStack12;\n    *(*(*(param_1 + -0x54) + 4) + -0x54 + param_1) = 0x934510;\n    uStack4 = 0;\n    fcn.008c6440();\n    uStack4 = 0xffffffff;\n    fcn.008c55f0();\n    *in_FS_OFFSET = uStack12;\n    return;\n}\n",
        "token_count": 164
    },
    "008c6f50": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nint32_t __thiscall fcn.008c6f50(int32_t param_1, uint *param_2, uint32_t param_3)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    uint *puVar5;\n    \n    uVar1 = param_2;\n    if (*(param_1 + 0x14) < param_2) {\n        fcn.008ca1a4();\n    }\n    uVar2 = *(param_1 + 0x14) - param_2;\n    if (uVar2 < param_3) {\n        param_3 = uVar2;\n    }\n    if (param_3 != 0) {\n        puVar5 = param_1 + 4;\n        puVar4 = puVar5;\n        param_2 = puVar5;\n        if (0xf < *(param_1 + 0x18)) {\n            puVar4 = *puVar5;\n            param_2 = *puVar5;\n        }\n        fcn.008cabba(puVar4 + uVar1, *(param_1 + 0x18) - uVar1, param_2 + param_3 + uVar1, uVar2 - param_3);\n        iVar3 = *(param_1 + 0x14) - param_3;\n        *(param_1 + 0x14) = iVar3;\n        if (0xf < *(param_1 + 0x18)) {\n            puVar5 = *puVar5;\n        }\n        *(iVar3 + puVar5) = 0;\n    }\n    return param_1;\n}\n",
        "token_count": 372
    },
    "008c7090": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t * __fastcall fcn.008c7090(int32_t *param_1)\n\n{\n    int32_t **ppiVar1;\n    uint *in_FS_OFFSET;\n    uint uStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack4 = 0xffffffff;\n    uStack8 = 0x8e3c71;\n    uStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &uStack12;\n    ppiVar1 = fcn.008cade9(4);\n    if (ppiVar1 == NULL) {\n        ppiVar1 = NULL;\n    }\n    else {\n        *ppiVar1 = param_1;\n    }\n    *param_1 = ppiVar1;\n    *in_FS_OFFSET = uStack12;\n    return param_1;\n}\n",
        "token_count": 180
    },
    "008c72c0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.008c72c0(int32_t param_1)\n\n{\n    uint *arg_8h;\n    uint *in_FS_OFFSET;\n    uint uStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack4 = 0xffffffff;\n    uStack8 = 0x8e3c98;\n    uStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &uStack12;\n    arg_8h = param_1 + 0x54;\n    fcn.008c6c90();\n    *arg_8h = 0x934448;\n    uStack4 = 0xffffffff;\n    *arg_8h = 0x934438;\n    fcn.008c9ee2(arg_8h);\n    *in_FS_OFFSET = uStack12;\n    return;\n}\n",
        "token_count": 186
    },
    "008c7340": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.008c7340(int32_t param_1)\n\n{\n    if (0xf < *(param_1 + 0x18)) {\n        fcn.008cab32(*(param_1 + 4));\n    }\n    *(param_1 + 0x18) = 0xf;\n    *(param_1 + 0x14) = 0;\n    *(param_1 + 4) = 0;\n    return;\n}\n",
        "token_count": 101
    },
    "008c75b0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.008c75b0(uint *param_1)\n\n{\n    uint *in_FS_OFFSET;\n    uint uStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack8 = 0x8e3d03;\n    uStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &uStack12;\n    *param_1 = 0x934518;\n    uStack4 = 0;\n    if (0xf < param_1[9]) {\n        fcn.008cab32(param_1[4]);\n    }\n    param_1[9] = 0xf;\n    param_1[8] = 0;\n    *(param_1 + 4) = 0;\n    uStack4 = 0xffffffff;\n    fcn.008ca44d();\n    *in_FS_OFFSET = uStack12;\n    return;\n}\n",
        "token_count": 196
    },
    "008c7660": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.008c7660(uint *param_1)\n\n{\n    uint *in_FS_OFFSET;\n    uint uStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack8 = 0x8e3d23;\n    uStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &uStack12;\n    *param_1 = 0x934524;\n    uStack4 = 0;\n    if (0xf < param_1[9]) {\n        fcn.008cab32(param_1[4]);\n    }\n    param_1[9] = 0xf;\n    param_1[8] = 0;\n    *(param_1 + 4) = 0;\n    uStack4 = 0xffffffff;\n    fcn.008ca44d();\n    *in_FS_OFFSET = uStack12;\n    return;\n}\n",
        "token_count": 195
    },
    "008c7700": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.008c7700(int32_t param_1)\n\n{\n    int32_t *in_FS_OFFSET;\n    uint unaff_retaddr;\n    int32_t iStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack4 = 0xffffffff;\n    uStack8 = 0x8e3d64;\n    iStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &iStack12;\n    fcn.008c981a(0);\n    *(param_1 + 0x1c) = 0xf;\n    *(param_1 + 0x18) = 0;\n    *(param_1 + 8) = 0;\n    *(param_1 + 0x38) = 0xf;\n    *(param_1 + 0x34) = 0;\n    *(param_1 + 0x24) = 0;\n    *(param_1 + 0x54) = 0xf;\n    *(param_1 + 0x50) = 0;\n    *(param_1 + 0x40) = 0;\n    *(param_1 + 0x70) = 0xf;\n    *(param_1 + 0x6c) = 0;\n    *(param_1 + 0x5c) = 0;\n    uStack8 = 4;\n    fcn.008c9d5d(param_1, unaff_retaddr);\n    *in_FS_OFFSET = param_1;\n    return param_1;\n}\n",
        "token_count": 342
    },
    "008c77a0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __fastcall fcn.008c77a0(int32_t param_1)\n\n{\n    uint *in_FS_OFFSET;\n    uint uStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack8 = 0x8e3da4;\n    uStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &uStack12;\n    uStack4 = 4;\n    fcn.008c9b9c(param_1);\n    uStack4._0_1_ = 3;\n    if (0xf < *(param_1 + 0x70)) {\n        fcn.008cab32(*(param_1 + 0x5c));\n    }\n    *(param_1 + 0x70) = 0xf;\n    *(param_1 + 0x6c) = 0;\n    *(param_1 + 0x5c) = 0;\n    uStack4._0_1_ = 2;\n    if (0xf < *(param_1 + 0x54)) {\n        fcn.008cab32(*(param_1 + 0x40));\n    }\n    *(param_1 + 0x54) = 0xf;\n    *(param_1 + 0x50) = 0;\n    *(param_1 + 0x40) = 0;\n    uStack4._0_1_ = 1;\n    if (0xf < *(param_1 + 0x38)) {\n        fcn.008cab32(*(param_1 + 0x24));\n    }\n    *(param_1 + 0x38) = 0xf;\n    *(param_1 + 0x34) = 0;\n    *(param_1 + 0x24) = 0;\n    uStack4 = uStack4._1_3_ << 8;\n    if (0xf < *(param_1 + 0x1c)) {\n        fcn.008cab32(*(param_1 + 8));\n    }\n    *(param_1 + 0x1c) = 0xf;\n    *(param_1 + 0x18) = 0;\n    *(param_1 + 8) = 0;\n    uStack4 = 0xffffffff;\n    fcn.008c9842();\n    *in_FS_OFFSET = uStack12;\n    return;\n}\n",
        "token_count": 530
    },
    "008c7880": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __thiscall fcn.008c7880(int32_t param_1, int32_t param_2, uint32_t param_3, uint32_t param_4)\n\n{\n    int32_t *arg_8h;\n    int32_t *piVar1;\n    uint32_t arg_14h;\n    \n    if (*(param_2 + 0x14) < param_3) {\n        fcn.008ca1a4();\n    }\n    arg_14h = *(param_2 + 0x14) - param_3;\n    if (param_4 < arg_14h) {\n        arg_14h = param_4;\n    }\n    if (param_1 != param_2) {\n        if (arg_14h == 0xffffffff) {\n            fcn.008ca16c();\n        }\n        if (*(param_1 + 0x18) < arg_14h) {\n            fcn.008c7130(arg_14h, *(param_1 + 0x14));\n        }\n        else if (arg_14h == 0) {\n            *(param_1 + 0x14) = 0;\n            if (*(param_1 + 0x18) < 0x10) {\n                *(param_1 + 4) = 0;\n                return param_1;\n            }\n            **(param_1 + 4) = 0;\n            return param_1;\n        }\n        if (arg_14h != 0) {\n            if (*(param_2 + 0x18) < 0x10) {\n                param_2 = param_2 + 4;\n            }\n            else {\n                param_2 = *(param_2 + 4);\n            }\n            piVar1 = param_1 + 4;\n            arg_8h = piVar1;\n            if (0xf < *(param_1 + 0x18)) {\n                arg_8h = *piVar1;\n            }\n            fcn.008cab3d(arg_8h, *(param_1 + 0x18), param_2 + param_3, arg_14h);\n            *(param_1 + 0x14) = arg_14h;\n            if (0xf < *(param_1 + 0x18)) {\n                piVar1 = *piVar1;\n            }\n            *(piVar1 + arg_14h) = 0;\n        }\n        return param_1;\n    }\n    fcn.008c6f50(arg_14h + param_3, 0xffffffff);\n    fcn.008c6f50(0, param_3);\n    return param_1;\n}\n",
        "token_count": 585
    },
    "008c79c0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __thiscall fcn.008c79c0(int32_t param_1, uint *param_2, uint32_t param_3)\n\n{\n    uint32_t uVar1;\n    uint *puVar2;\n    int32_t iVar3;\n    int32_t *arg_8h;\n    uint *puVar4;\n    int32_t *piVar5;\n    \n    if (param_2 != NULL) {\n        uVar1 = *(param_1 + 0x18);\n        puVar2 = param_1 + 4;\n        puVar4 = puVar2;\n        if (0xf < uVar1) {\n            puVar4 = *puVar2;\n        }\n        if (puVar4 <= param_2) {\n            puVar4 = puVar2;\n            if (0xf < uVar1) {\n                puVar4 = *puVar2;\n            }\n            if (param_2 < *(param_1 + 0x14) + puVar4) {\n                if (0xf < uVar1) {\n                    puVar2 = *puVar2;\n                }\n                iVar3 = fcn.008c7880(param_1, param_2 - puVar2, param_3);\n                return iVar3;\n            }\n        }\n    }\n    if (param_3 == 0xffffffff) {\n        fcn.008ca16c();\n    }\n    if (*(param_1 + 0x18) < param_3) {\n        fcn.008c7130(param_3, *(param_1 + 0x14));\n    }\n    else if (param_3 == 0) {\n        *(param_1 + 0x14) = 0;\n        if (*(param_1 + 0x18) < 0x10) {\n            *(param_1 + 4) = 0;\n            return param_1;\n        }\n        **(param_1 + 4) = 0;\n        return param_1;\n    }\n    if (param_3 != 0) {\n        piVar5 = param_1 + 4;\n        arg_8h = piVar5;\n        if (0xf < *(param_1 + 0x18)) {\n            arg_8h = *piVar5;\n        }\n        fcn.008cab3d(arg_8h, *(param_1 + 0x18), param_2, param_3);\n        *(param_1 + 0x14) = param_3;\n        if (0xf < *(param_1 + 0x18)) {\n            piVar5 = *piVar5;\n        }\n        *(piVar5 + param_3) = 0;\n    }\n    return param_1;\n}\n",
        "token_count": 598
    },
    "008c7be0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.008c7be0(int32_t param_1, int32_t param_2, int32_t param_3)\n\n{\n    if (param_1 == param_2) {\n        return param_3;\n    }\n    do {\n        fcn.008c7880();\n        param_1 = param_1 + 0x1c;\n        param_3 = param_3 + 0x1c;\n    } while (param_1 != param_2);\n    return param_3;\n}\n",
        "token_count": 115
    },
    "008c7ce0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a",
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\nuint * __thiscall fcn.008c7ce0(uint *param_1, uint param_2)\n\n{\n    uint *in_FS_OFFSET;\n    uint uStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack4 = 0xffffffff;\n    uStack8 = 0x8e3de3;\n    uStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &uStack12;\n    fcn.008ca314();\n    uStack4 = 0;\n    *param_1 = 0x934518;\n    param_1[8] = 0;\n    param_1[9] = 0xf;\n    *(param_1 + 4) = 0;\n    fcn.008c7880(param_2, 0);\n    *in_FS_OFFSET = 0xffffffff;\n    return param_1;\n}\n",
        "token_count": 192
    },
    "008c7d50": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint * __thiscall fcn.008c7d50(uint *param_1, uint param_2)\n\n{\n    uint *in_FS_OFFSET;\n    uint uStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack4 = 0xffffffff;\n    uStack8 = 0x8e3df8;\n    uStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &uStack12;\n    fcn.008c7ce0(param_2);\n    *param_1 = 0x934530;\n    *in_FS_OFFSET = param_1;\n    return param_1;\n}\n",
        "token_count": 138
    },
    "008c7e50": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a",
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\nuint * __thiscall fcn.008c7e50(uint *param_1, uint param_2)\n\n{\n    uint *in_FS_OFFSET;\n    uint uStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack4 = 0xffffffff;\n    uStack8 = 0x8e3e63;\n    uStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &uStack12;\n    fcn.008ca314();\n    uStack4 = 0;\n    *param_1 = 0x934524;\n    param_1[8] = 0;\n    param_1[9] = 0xf;\n    *(param_1 + 4) = 0;\n    fcn.008c7880(param_2, 0);\n    *in_FS_OFFSET = 0xffffffff;\n    return param_1;\n}\n",
        "token_count": 192
    },
    "008c7ec0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nint32_t __thiscall fcn.008c7ec0(int32_t *param_1, int32_t param_2)\n\n{\n    int32_t iVar1;\n    uint unaff_ESI;\n    uint *in_FS_OFFSET;\n    uint uStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack4 = 0xffffffff;\n    uStack8 = 0x8e3e89;\n    uStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &uStack12;\n    iVar1 = *param_1;\n    *(param_2 + 0x18) = 0xf;\n    *(param_2 + 0x14) = 0;\n    *(param_2 + 4) = 0;\n    fcn.008c7880(iVar1 + 0x18, 0, 0xffffffff);\n    *in_FS_OFFSET = unaff_ESI;\n    return param_2;\n}\n",
        "token_count": 210
    },
    "008c8050": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint * __thiscall fcn.008c8050(uint *param_1, uint param_2)\n\n{\n    uint *in_FS_OFFSET;\n    uint uStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack4 = 0xffffffff;\n    uStack8 = 0x8e3f08;\n    uStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &uStack12;\n    fcn.008c7e50(param_2);\n    *param_1 = 0x93453c;\n    *in_FS_OFFSET = param_1;\n    return param_1;\n}\n",
        "token_count": 138
    },
    "008c8200": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nuint * __thiscall fcn.008c8200(uint *param_1, int32_t param_2)\n\n{\n    int32_t *in_FS_OFFSET;\n    int32_t iVar1;\n    int32_t iStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack4 = 0xffffffff;\n    uStack8 = 0x8e3f93;\n    iStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &iStack12;\n    iVar1 = param_2;\n    fcn.008ca395(param_2);\n    uStack8 = 0;\n    *param_1 = 0x934518;\n    param_1[9] = 0xf;\n    param_1[8] = 0;\n    *(param_1 + 4) = 0;\n    fcn.008c7880(param_2 + 0xc, 0, 0xffffffff);\n    *in_FS_OFFSET = iVar1;\n    return param_1;\n}\n",
        "token_count": 222
    },
    "008c83d0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a",
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\nint32_t fcn.008c83d0(int32_t param_1, int32_t param_2, int32_t param_3)\n\n{\n    uint32_t uStack8;\n    uint32_t uStack4;\n    \n    uStack4 = uStack4 & 0xffffff00;\n    uStack8 = uStack8 & 0xffffff00;\n    fcn.008c7be0(param_1, param_2, param_3, param_3, uStack4, uStack8);\n    return param_3 + ((param_2 - param_1) / 0x1c) * 0x1c;\n}\n",
        "token_count": 142
    },
    "008c8430": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.008c8430(int32_t param_1, int32_t param_2)\n\n{\n    if (param_1 != param_2) {\n        do {\n            if (0xf < *(param_1 + 0x18)) {\n                fcn.008cab32(*(param_1 + 4));\n            }\n            *(param_1 + 0x18) = 0xf;\n            *(param_1 + 0x14) = 0;\n            *(param_1 + 4) = 0;\n            param_1 = param_1 + 0x1c;\n        } while (param_1 != param_2);\n    }\n    return;\n}\n",
        "token_count": 152
    },
    "008c85b0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nuint * __thiscall fcn.008c85b0(uint *param_1, int32_t param_2)\n\n{\n    int32_t *in_FS_OFFSET;\n    int32_t iVar1;\n    int32_t iStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack4 = 0xffffffff;\n    uStack8 = 0x8e4023;\n    iStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &iStack12;\n    iVar1 = param_2;\n    fcn.008ca395(param_2);\n    uStack8 = 0;\n    *param_1 = 0x934524;\n    param_1[9] = 0xf;\n    param_1[8] = 0;\n    *(param_1 + 4) = 0;\n    fcn.008c7880(param_2 + 0xc, 0, 0xffffffff);\n    *in_FS_OFFSET = iVar1;\n    return param_1;\n}\n",
        "token_count": 222
    },
    "008c8690": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a",
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.008c8690(int32_t param_1)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    \n    *(param_1 + 0x24) = 0;\n    *(param_1 + 4) = 0;\n    *(param_1 + 0xc) = 0;\n    *(param_1 + 0x10) = 0x201;\n    *(param_1 + 0x14) = 6;\n    *(param_1 + 0x18) = 0;\n    *(param_1 + 0x1c) = 0;\n    *(param_1 + 0x20) = 0;\n    fcn.008c84c0(0, 0);\n    puVar1 = fcn.008cade9(4);\n    if (puVar1 != NULL) {\n        uVar2 = fcn.008c9c76();\n        *puVar1 = uVar2;\n        fcn.008c99b1();\n        fcn.008c3630();\n        *(param_1 + 0x24) = puVar1;\n        return;\n    }\n    *(param_1 + 0x24) = 0;\n    return;\n}\n",
        "token_count": 275
    },
    "008c8760": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.008c8760(void)\n\n{\n    uint uVar1;\n    int32_t *piVar2;\n    uint *puVar3;\n    int32_t unaff_ESI;\n    int32_t *in_FS_OFFSET;\n    uint unaff_retaddr;\n    uchar auStack16 [4];\n    int32_t iStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack4 = 0xffffffff;\n    uStack8 = 0x8e4058;\n    iStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &iStack12;\n    uVar1 = fcn.008c3950(auStack16);\n    uStack8 = 0;\n    piVar2 = fcn.008c82d0(uVar1);\n    uStack8 = 0xffffffff;\n    if (unaff_ESI != 0) {\n        puVar3 = fcn.008c3690();\n        if (puVar3 != NULL) {\n            (***puVar3)(1);\n        }\n    }\n    (**(*piVar2 + 0x18))(unaff_retaddr);\n    *in_FS_OFFSET = unaff_ESI;\n    return;\n}\n",
        "token_count": 262
    },
    "008c8830": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.008c8830(int32_t param_1, int32_t param_2)\n\n{\n    if (param_1 != param_2) {\n        do {\n            fcn.008c7880();\n            param_1 = param_1 + 0x1c;\n        } while (param_1 != param_2);\n    }\n    return;\n}\n",
        "token_count": 81
    },
    "008c8860": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __fastcall fcn.008c8860(int32_t param_1, int32_t param_2, uint param_3)\n\n{\n    uchar *puVar1;\n    uint *in_FS_OFFSET;\n    uint var_8h;\n    uint var_10h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    uStack12 = 0x8e4081;\n    var_ch = *in_FS_OFFSET;\n    *in_FS_OFFSET = &var_ch;\n    var_4h._1_3_ = 0;\n    for (; param_2 != 0; param_2 = param_2 + -1) {\n        var_4h._0_1_ = 1;\n        if (param_1 != 0) {\n            *(param_1 + 0x18) = 0xf;\n            *(param_1 + 0x14) = 0;\n            if (*(param_1 + 0x18) < 0x10) {\n                puVar1 = param_1 + 4;\n            }\n            else {\n                puVar1 = *(param_1 + 4);\n            }\n            *puVar1 = 0;\n            fcn.008c7880(var_8h, 0, 0xffffffff);\n        }\n        param_1 = param_1 + 0x1c;\n    }\n    *in_FS_OFFSET = var_ch;\n    return;\n}\n",
        "token_count": 359
    },
    "008c8920": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __fastcall fcn.008c8920(int32_t param_1, int32_t param_2, int32_t param_3)\n\n{\n    uint uVar1;\n    uint uVar2;\n    uint uVar3;\n    uchar *puVar4;\n    uint *in_FS_OFFSET;\n    int32_t var_8h;\n    uint var_10h;\n    uint var_50h;\n    uint32_t var_4ch;\n    uint var_3ch;\n    uint32_t var_38h;\n    uint var_28h;\n    int32_t var_24h;\n    int32_t var_20h;\n    int32_t var_1ch;\n    int32_t var_18h;\n    int32_t var_14h;\n    uchar *puStack20;\n    uint var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    uStack12 = 0x8e40a9;\n    var_ch = *in_FS_OFFSET;\n    *in_FS_OFFSET = &var_ch;\n    puStack20 = &stack0xffffffa0;\n    var_18h = var_8h;\n    var_38h = 0xf;\n    var_3ch = 0;\n    var_4ch = var_4ch & 0xffffff00;\n    var_4h._1_3_ = 0;\n    var_14h = param_2;\n    while (param_1 != var_14h) {\n        var_4h._0_1_ = 2;\n        var_20h = var_8h;\n        var_1ch = var_8h;\n        if (var_8h != 0) {\n            *(var_8h + 0x18) = 0xf;\n            *(var_8h + 0x14) = 0;\n            if (*(var_8h + 0x18) < 0x10) {\n                puVar4 = var_8h + 4;\n            }\n            else {\n                puVar4 = *(var_8h + 4);\n            }\n            *puVar4 = 0;\n            fcn.008c7880(&var_50h, 0, 0xffffffff);\n        }\n        if (var_8h != param_1) {\n            uVar1 = *(var_8h + 4);\n            uVar2 = *(var_8h + 8);\n            uVar3 = *(var_8h + 0xc);\n            var_28h = *(var_8h + 0x10);\n            *(var_8h + 4) = *(param_1 + 4);\n            *(var_8h + 8) = *(param_1 + 8);\n            *(var_8h + 0xc) = *(param_1 + 0xc);\n            *(var_8h + 0x10) = *(param_1 + 0x10);\n            *(param_1 + 4) = uVar1;\n            *(param_1 + 8) = uVar2;\n            *(param_1 + 0xc) = uVar3;\n            *(param_1 + 0x10) = var_28h;\n            uVar1 = *(var_8h + 0x14);\n            *(var_8h + 0x14) = *(param_1 + 0x14);\n            *(param_1 + 0x14) = uVar1;\n            uVar1 = *(var_8h + 0x18);\n            *(var_8h + 0x18) = *(param_1 + 0x18);\n            *(param_1 + 0x18) = uVar1;\n        }\n        var_8h = var_8h + 0x1c;\n        param_1 = param_1 + 0x1c;\n        var_24h = param_1;\n    }\n    var_4h = 0xffffffff;\n    if (0xf < var_38h) {\n        fcn.008cab32(var_4ch);\n    }\n    *in_FS_OFFSET = var_ch;\n    return var_8h;\n}\n",
        "token_count": 922
    },
    "008c8b10": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.008c8b10(int32_t param_1)\n\n{\n    uint *in_FS_OFFSET;\n    int32_t iStack28;\n    uint uStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack4 = 0xffffffff;\n    uStack8 = 0x8e40d0;\n    uStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &uStack12;\n    iStack28 = param_1;\n    fcn.008c7090();\n    *(param_1 + 0xc) = 0;\n    *(param_1 + 0x10) = 0;\n    *(param_1 + 0x14) = 0;\n    *in_FS_OFFSET = &iStack28;\n    return param_1;\n}\n",
        "token_count": 180
    },
    "008c8b70": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.008c8b70(int32_t param_1, uint param_2, uint param_3)\n\n{\n    fcn.008c8430(param_1 + 8, param_3);\n    return;\n}\n",
        "token_count": 54
    },
    "008c8c50": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a",
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\nint32_t fcn.008c8c50(int32_t param_1, int32_t param_2, int32_t param_3, uint param_4, uint param_5)\n\n{\n    fcn.008c8a70(param_1, param_2, param_3, param_3, param_5, 0);\n    return param_3 + ((param_2 - param_1) / 0x1c) * -0x1c;\n}\n",
        "token_count": 106
    },
    "008c8cb0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nint32_t * __thiscall\nfcn.008c8cb0(int32_t *param_1, int32_t *param_2, uint param_3, uint32_t param_4, uint param_5, uint32_t param_6)\n\n{\n    uint32_t *puVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    \n    piVar2 = param_2;\n    *param_2 = 0;\n    if (((param_1 == NULL) || (param_4 <= param_1[3] && param_1[3] != param_4)) ||\n       (param_1[4] <= param_4 && param_4 != param_1[4])) {\n        fcn.008cadb3();\n    }\n    *param_2 = *param_1;\n    param_2[1] = param_4;\n    if ((param_6 <= param_1[3] && param_1[3] != param_6) || (param_1[4] <= param_6 && param_6 != param_1[4])) {\n        fcn.008cadb3();\n    }\n    if ((*param_2 == 0) || (*param_2 != *param_1)) {\n        fcn.008cadb3();\n    }\n    puVar1 = param_2 + 1;\n    if (*puVar1 != param_6) {\n        param_2 = param_2 & 0xffffff00;\n        iVar3 = fcn.008c83d0(param_6, param_1[4], *puVar1, param_2, param_2, param_2);\n        fcn.008c8430(param_1 + 2, param_2);\n        param_1[4] = iVar3;\n    }\n    return piVar2;\n}\n",
        "token_count": 402
    },
    "008c8da0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __thiscall fcn.008c8da0(uint32_t param_1, int32_t param_2, int32_t param_3, uint param_4)\n\n{\n    uint32_t uStack4;\n    \n    uStack4 = param_1 & 0xffffff00;\n    fcn.008c8860(param_4, param_1 + 8, param_4, uStack4);\n    return param_2 + param_3 * 0x1c;\n}\n",
        "token_count": 109
    },
    "008c8e80": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.008c8e80(uint32_t param_1, uint param_2, uint param_3, uint param_4)\n\n{\n    uint32_t uStack4;\n    \n    uStack4 = param_1 & 0xffffff00;\n    fcn.008c8920(param_4, param_1 + 8, param_4, uStack4);\n    return;\n}\n",
        "token_count": 90
    },
    "008c8eb0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.008c8eb0(uint param_1, uint param_2, uint param_3)\n\n{\n    fcn.008c8c50(param_1, param_2, param_3, param_2, param_2, 0);\n    return;\n}\n",
        "token_count": 62
    },
    "008c8ee0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.008c8ee0(uint *param_1)\n\n{\n    uint unaff_ESI;\n    uint *in_FS_OFFSET;\n    uint uStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack8 = 0x8e4120;\n    uStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &uStack12;\n    uStack4 = 0;\n    if (param_1[3] != 0) {\n        fcn.008c8430(param_1 + 2, param_1);\n        fcn.008cab32(param_1[3]);\n    }\n    param_1[3] = 0;\n    param_1[4] = 0;\n    param_1[5] = 0;\n    uStack12 = 0xffffffff;\n    fcn.008cab32(*param_1);\n    *in_FS_OFFSET = unaff_ESI;\n    return;\n}\n",
        "token_count": 211
    },
    "008c8fa0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t * __thiscall fcn.008c8fa0(int32_t *param_1, uint param_2, int32_t param_3)\n\n{\n    int32_t iVar1;\n    uchar uVar2;\n    uint unaff_EBX;\n    uint *in_FS_OFFSET;\n    uint uStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack4 = 0xffffffff;\n    uStack8 = 0x8e416a;\n    uStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &uStack12;\n    if (param_3 != 0) {\n        *param_1 = 0x9345bc;\n        param_1[2] = 0x9345b4;\n        param_1[3] = 0x934438;\n        param_1[3] = 0x934448;\n        uStack4 = 1;\n    }\n    *(param_1 + *(*param_1 + 4)) = 0x934450;\n    param_1[1] = 0;\n    iVar1 = *(*param_1 + 4);\n    fcn.008c8690();\n    *(param_1 + iVar1 + 0x28) = param_2;\n    *(param_1 + iVar1 + 0x2c) = 0;\n    uVar2 = fcn.008c8760(0x20);\n    *(param_1 + iVar1 + 0x30) = uVar2;\n    if (*(param_1 + iVar1 + 0x28) == 0) {\n        fcn.008c84c0(*(param_1 + iVar1 + 8) | 4, 0);\n    }\n    *(param_1 + iVar1 + 4) = 0;\n    *(param_1 + *(param_1[2] + 4) + 8) = 0x934440;\n    *(param_1 + *(*param_1 + 4)) = 0x934458;\n    *in_FS_OFFSET = unaff_EBX;\n    return param_1;\n}\n",
        "token_count": 463
    },
    "008c9380": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t * __thiscall fcn.008c9380(int32_t *param_1, uint param_2, int32_t param_3)\n\n{\n    uint unaff_ESI;\n    uint *in_FS_OFFSET;\n    uint uStack12;\n    uint uStack8;\n    uint uStack4;\n    \n    uStack4 = 0xffffffff;\n    uStack8 = 0x8e41da;\n    uStack12 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &uStack12;\n    if (param_3 != 0) {\n        *param_1 = 0x9345cc;\n        param_1[2] = 0x9345c4;\n        param_1[0x15] = 0x934438;\n        param_1[0x15] = 0x934448;\n        uStack4 = 1;\n    }\n    fcn.008c8fa0(param_1 + 3, 0);\n    uStack12 = 2;\n    *(param_1 + *(*param_1 + 4)) = 0x934510;\n    fcn.008c73a0(uStack4);\n    *in_FS_OFFSET = unaff_ESI;\n    return param_1;\n}\n",
        "token_count": 273
    },
    "008c9430": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.008c9430(int32_t *param_1, uint param_2, int32_t param_3, int32_t param_4, uint param_5)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint *unaff_ESI;\n    int32_t iVar3;\n    uint uVar4;\n    \n    uVar1 = param_1[3];\n    iVar2 = param_1[4] - uVar1;\n    iVar3 = iVar2 >> 0x1f;\n    if (iVar2 / 0x1c + iVar3 == iVar3) {\n        iVar3 = 0;\n    }\n    else {\n        if (param_1[4] < uVar1) {\n            fcn.008cadb3();\n        }\n        if ((param_3 == 0) || (param_3 != *param_1)) {\n            fcn.008cadb3();\n        }\n        iVar3 = (param_4 - uVar1) / 0x1c;\n    }\n    uVar4 = 1;\n    fcn.008c90a0(param_3, param_4, 1, param_5);\n    if (param_1[4] <= param_1[3] && param_1[3] != param_1[4]) {\n        fcn.008cadb3();\n    }\n    iVar2 = *param_1;\n    fcn.008c5c70(iVar3);\n    *unaff_ESI = uVar4;\n    unaff_ESI[1] = iVar2;\n    return;\n}\n",
        "token_count": 356
    },
    "008c94f0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.008c94f0(uint *param_1, uint param_2)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint32_t auStack8 [2];\n    \n    uVar1 = param_1[3];\n    if (uVar1 == 0) {\n        uVar3 = 0;\n    }\n    else {\n        uVar3 = (param_1[5] - uVar1) / 0x1c;\n    }\n    uVar2 = param_1[4];\n    if ((uVar2 - uVar1) / 0x1c < uVar3) {\n        auStack8[0] = auStack8[0] & 0xffffff00;\n        fcn.008c8860(param_2, param_1 + 2, param_2, auStack8[0]);\n        param_1[4] = uVar2 + 0x1c;\n        return;\n    }\n    if (uVar2 < uVar1) {\n        fcn.008cadb3();\n    }\n    fcn.008c9430(auStack8, *param_1, uVar2, param_2);\n    return;\n}\n",
        "token_count": 280
    },
    "008c98a1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008c98a1(uint32_t arg_8h)\n\n{\n    fcn.008ca2a9((arg_8h & 3) * 0x18 + 0x92e848);\n    return;\n}\n",
        "token_count": 56
    },
    "008c98bd": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008c98bd(uint32_t arg_8h)\n\n{\n    fcn.008ca2b9((arg_8h & 3) * 0x18 + 0x92e848);\n    return;\n}\n",
        "token_count": 55
    },
    "008c9ab5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008c9ab5(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    fcn.008c3490(arg_8h, arg_ch, arg_10h, arg_14h);\n    return;\n}\n",
        "token_count": 65
    },
    "008c9ad0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008c9ad0(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    fcn.008c34c0(arg_8h, arg_ch, arg_10h, arg_14h);\n    return;\n}\n",
        "token_count": 66
    },
    "008c9b5e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008c9b5e(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    uint var_4h;\n    \n    fcn.008c9ab5(arg_8h, arg_ch, arg_10h, arg_14h);\n    return;\n}\n",
        "token_count": 75
    },
    "008c9b7d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008c9b7d(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    uint var_4h;\n    \n    fcn.008c9ad0(arg_8h, arg_ch, arg_10h, arg_14h);\n    return;\n}\n",
        "token_count": 75
    },
    "008d183b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.008d183b(int32_t *arg_8h)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    \n    if ((arg_8h == NULL) || (*0x92eb30 == 0)) {\n        puVar1 = fcn.008cfdbc();\n        *puVar1 = 0x16;\n        fcn.008cad8d(0, 0, 0, 0, 0);\n        uVar2 = 0x16;\n    }\n    else {\n        *arg_8h = *0x92eb30;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 149
    },
    "008d1877": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.008d1877(int32_t *arg_8h)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    \n    if ((arg_8h == NULL) || (*0x92eb2c == 0)) {\n        puVar1 = fcn.008cfdbc();\n        *puVar1 = 0x16;\n        fcn.008cad8d(0, 0, 0, 0, 0);\n        uVar2 = 0x16;\n    }\n    else {\n        *arg_8h = *0x92eb2c;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 151
    },
    "008d1a64": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008d1a64(uint arg_8h)\n\n{\n    fcn.008d1938(arg_8h, 0, 0);\n    return;\n}\n",
        "token_count": 42
    },
    "008d2bc2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x008d2bd6)\n// WARNING: Removing unreachable block (ram,0x008d2bdc)\n// WARNING: Removing unreachable block (ram,0x008d2bde)\n\nvoid fcn.008d2bc2(void)\n\n{\n    return;\n}\n",
        "token_count": 68
    },
    "008e091f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.008e091f(uint *arg_8h)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    \n    if (arg_8h == NULL) {\n        puVar1 = fcn.008cfdbc();\n        *puVar1 = 0x16;\n        fcn.008cad8d(0, 0, 0, 0, 0);\n        uVar2 = 0x16;\n    }\n    else {\n        *arg_8h = *0x8e8484;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 137
    },
    "008e0958": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.008e0958(uint *arg_8h)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    \n    if (arg_8h == NULL) {\n        puVar1 = fcn.008cfdbc();\n        *puVar1 = 0x16;\n        fcn.008cad8d(0, 0, 0, 0, 0);\n        uVar2 = 0x16;\n    }\n    else {\n        *arg_8h = *0x8e8488;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 137
    },
    "008e0991": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.008e0991(uint *arg_8h)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    \n    if (arg_8h == NULL) {\n        puVar1 = fcn.008cfdbc();\n        *puVar1 = 0x16;\n        fcn.008cad8d(0, 0, 0, 0, 0);\n        uVar2 = 0x16;\n    }\n    else {\n        *arg_8h = *0x8e8480;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 137
    },
    "008ca6a8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.008ca6a8(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    uint in_EAX;\n    uint uVar1;\n    uint var_8h;\n    uint var_4h;\n    \n    uVar1 = fcn.008cf0c2(arg_8h, arg_ch, arg_10h, arg_14h, in_EAX, 0, 0, 0);\n    return uVar1;\n}\n",
        "token_count": 113
    },
    "008c9842": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.008c9842(int32_t *param_1)\n\n{\n    if (*param_1 < 4) {\n        fcn.008ca2b9(*param_1 * 0x18 + 0x92e848);\n    }\n    return;\n}\n",
        "token_count": 63
    },
    "008c8a70": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid fcn.008c8a70(int32_t param_1, int32_t param_2, int32_t param_3)\n\n{\n    uint uVar1;\n    uint uVar2;\n    uint uVar3;\n    uint uVar4;\n    int32_t iVar5;\n    \n    if (param_1 != param_2) {\n        do {\n            iVar5 = param_2 + -0x1c;\n            if (param_3 + -0x1c != iVar5) {\n                uVar1 = *(param_3 + -0x18);\n                uVar2 = *(param_3 + -0x14);\n                uVar3 = *(param_3 + -0x10);\n                uVar4 = *(param_3 + -0xc);\n                *(param_3 + -0x18) = *(param_2 + -0x18);\n                *(param_3 + -0x14) = *(param_2 + -0x14);\n                *(param_3 + -0x10) = *(param_2 + -0x10);\n                *(param_3 + -0xc) = *(param_2 + -0xc);\n                *(param_2 + -0x18) = uVar1;\n                *(param_2 + -0x14) = uVar2;\n                *(param_2 + -0x10) = uVar3;\n                *(param_2 + -0xc) = uVar4;\n                uVar1 = *(param_3 + -8);\n                *(param_3 + -8) = *(param_2 + -8);\n                *(param_2 + -8) = uVar1;\n                uVar1 = *(param_3 + -4);\n                *(param_3 + -4) = *(param_2 + -4);\n                *(param_2 + -4) = uVar1;\n            }\n            param_3 = param_3 + -0x1c;\n            param_2 = iVar5;\n        } while (iVar5 != param_1);\n    }\n    return;\n}\n",
        "token_count": 450
    },
    "008c5bb0": {
        "rules": [
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a",
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.008c5bb0(int32_t param_1)\n\n{\n    *(param_1 + 0x20) = param_1 + 0x18;\n    *(param_1 + 0x24) = param_1 + 0x1c;\n    *(param_1 + 0x10) = param_1 + 8;\n    *(param_1 + 0x30) = param_1 + 0x28;\n    *(param_1 + 0x14) = param_1 + 0xc;\n    *(param_1 + 0x34) = param_1 + 0x2c;\n    *(param_1 + 0xc) = 0;\n    **(param_1 + 0x24) = 0;\n    **(param_1 + 0x34) = 0;\n    **(param_1 + 0x10) = 0;\n    **(param_1 + 0x20) = 0;\n    **(param_1 + 0x30) = 0;\n    return;\n}\n",
        "token_count": 243
    },
    "008c7b30": {
        "rules": [
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nint32_t __thiscall fcn.008c7b30(int32_t param_1, uint param_2)\n\n{\n    *(param_1 + 0x14) = 0;\n    *(param_1 + 0x18) = 0xf;\n    *(param_1 + 4) = 0;\n    fcn.008c7880(param_2, 0, 0xffffffff);\n    return param_1;\n}\n",
        "token_count": 98
    },
    "008c8150": {
        "rules": [
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a",
            "contain loop"
        ],
        "decompiled_code": "\nint32_t __thiscall fcn.008c8150(int32_t param_1, char *param_2)\n\n{\n    char cVar1;\n    char *pcVar2;\n    \n    *(param_1 + 0x18) = 0xf;\n    *(param_1 + 0x14) = 0;\n    *(param_1 + 4) = 0;\n    pcVar2 = param_2;\n    do {\n        cVar1 = *pcVar2;\n        pcVar2 = pcVar2 + 1;\n    } while (cVar1 != '\\0');\n    fcn.008c79c0(param_2, pcVar2 - (param_2 + 1));\n    return param_1;\n}\n",
        "token_count": 163
    },
    "008e2ac0": {
        "rules": [
            "create or open file"
        ],
        "decompiled_code": "\nvoid fcn.008e2ac0(void)\n\n{\n    *0x8e85a4 = (**0x934174)(0x936bb0, 0x40000000, 3, 0, 3, 0, 0);\n    return;\n}\n",
        "token_count": 61
    },
    "008c7b60": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.008c7b60(char *param_1)\n\n{\n    char cVar1;\n    char *pcVar2;\n    \n    pcVar2 = param_1;\n    do {\n        cVar1 = *pcVar2;\n        pcVar2 = pcVar2 + 1;\n    } while (cVar1 != '\\0');\n    fcn.008c79c0(param_1, pcVar2 - (param_1 + 1));\n    return;\n}\n",
        "token_count": 105
    },
    "008c9bc4": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.008c9bc4(char *param_1)\n\n{\n    char cVar1;\n    char *pcVar2;\n    \n    pcVar2 = param_1;\n    do {\n        cVar1 = *pcVar2;\n        pcVar2 = pcVar2 + 1;\n    } while (cVar1 != '\\0');\n    fcn.008c79c0(param_1, pcVar2 - (param_1 + 1));\n    return;\n}\n",
        "token_count": 105
    },
    "008cf8fc": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.008cf8fc(uint arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t *arg_8h_00;\n    int32_t *piVar3;\n    int32_t *piVar4;\n    int32_t unaff_EBP;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.008d1534(0x938a10, 0xc);\n    fcn.008d04e2(0xe);\n    *(unaff_EBP + -4) = 0;\n    arg_8h_00 = *0x92e9ac;\n    iVar1 = *(unaff_EBP + 8);\n    iVar2 = *(iVar1 + 4);\n    if (iVar2 != 0) {\n        piVar3 = 0x92e9a8;\n        do {\n            piVar4 = piVar3;\n            *(unaff_EBP + -0x1c) = arg_8h_00;\n            if (arg_8h_00 == NULL) goto code_r0x008cf940;\n            piVar3 = arg_8h_00;\n        } while (*arg_8h_00 != iVar2);\n        piVar4[1] = arg_8h_00[1];\n        fcn.008caea5(arg_8h_00);\ncode_r0x008cf940:\n        fcn.008caea5(*(iVar1 + 4));\n        *(iVar1 + 4) = 0;\n    }\n    *(unaff_EBP + -4) = 0xfffffffe;\n    fcn.008cf963();\n    fcn.008d1579();\n    return;\n}\n",
        "token_count": 398
    },
    "008cfa61": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.008cfa61(uint arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t *arg_8h_00;\n    int32_t *piVar3;\n    int32_t *piVar4;\n    int32_t unaff_EBP;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.008d1534(0x938a50, 0xc);\n    fcn.008d04e2(0xe);\n    *(unaff_EBP + -4) = 0;\n    arg_8h_00 = *0x92e9ac;\n    iVar1 = *(unaff_EBP + 8);\n    iVar2 = *(iVar1 + 4);\n    if (iVar2 != 0) {\n        piVar3 = 0x92e9a8;\n        do {\n            piVar4 = piVar3;\n            *(unaff_EBP + -0x1c) = arg_8h_00;\n            if (arg_8h_00 == NULL) goto code_r0x008cfaa5;\n            piVar3 = arg_8h_00;\n        } while (*arg_8h_00 != iVar2);\n        piVar4[1] = arg_8h_00[1];\n        fcn.008caea5(arg_8h_00);\ncode_r0x008cfaa5:\n        fcn.008caea5(*(iVar1 + 4));\n        *(iVar1 + 4) = 0;\n    }\n    *(unaff_EBP + -4) = 0xfffffffe;\n    fcn.008cfac8();\n    fcn.008d1579();\n    return;\n}\n",
        "token_count": 403
    },
    "008e0756": {
        "rules": [
            "get geographical location"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.008e0756(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    (**0x934020)(arg_8h, arg_ch, arg_10h, arg_14h);\n    return;\n}\n",
        "token_count": 63
    }
}