{
    "00545e18": {
        "rules": [
            "hash data using aphash/d4672a7c2b8d413ab72f7529ccc05031"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00545e18(uint32_t *param_1, uint *param_2)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uchar auStack2848 [1024];\n    uchar auStack1824 [1024];\n    uchar auStack800 [8];\n    uchar auStack792 [20];\n    uchar auStack772 [4];\n    uchar auStack768 [4];\n    uchar auStack764 [4];\n    uchar auStack760 [4];\n    int32_t iStack756;\n    uint uStack752;\n    uint uStack748;\n    int32_t iStack744;\n    uint32_t uStack740;\n    int32_t iStack736;\n    uint32_t *puStack732;\n    int32_t iStack728;\n    uint32_t uStack724;\n    uint uStack720;\n    uint uStack716;\n    uint uStack712;\n    uint uStack708;\n    uint uStack704;\n    uint uStack700;\n    uint uStack696;\n    uint uStack692;\n    uint uStack688;\n    uint uStack684;\n    uint uStack680;\n    uint uStack676;\n    uint uStack672;\n    uint uStack668;\n    uint uStack664;\n    uint uStack660;\n    uint uStack656;\n    uint uStack652;\n    uint uStack648;\n    uint uStack644;\n    uint uStack640;\n    uint uStack636;\n    uint uStack632;\n    uint uStack628;\n    uint uStack624;\n    uint uStack620;\n    uint uStack616;\n    uint uStack612;\n    uint uStack608;\n    uint uStack604;\n    uint uStack600;\n    uint uStack596;\n    uint uStack592;\n    uint uStack588;\n    uint uStack584;\n    uint uStack580;\n    uint uStack576;\n    uint uStack572;\n    uint uStack568;\n    uint uStack564;\n    uint uStack560;\n    uint uStack556;\n    uint uStack552;\n    uint uStack548;\n    uint uStack544;\n    uint uStack540;\n    uint uStack536;\n    uint uStack532;\n    uint uStack528;\n    uint uStack524;\n    uint uStack520;\n    uint uStack516;\n    uint uStack512;\n    uint uStack508;\n    uint uStack504;\n    uint uStack500;\n    uint uStack496;\n    uint uStack492;\n    uint uStack488;\n    uint uStack484;\n    uint uStack480;\n    uint uStack476;\n    uint uStack472;\n    uint uStack468;\n    uint uStack464;\n    uint uStack460;\n    uint uStack456;\n    uint uStack452;\n    uint uStack448;\n    uint uStack444;\n    uint uStack440;\n    uint uStack436;\n    uint uStack432;\n    uint uStack428;\n    uint uStack424;\n    uint uStack420;\n    uint uStack416;\n    uint uStack412;\n    uint uStack408;\n    uint uStack404;\n    uint uStack400;\n    uint uStack396;\n    uint uStack392;\n    uint uStack388;\n    uint uStack384;\n    uint uStack380;\n    uint uStack376;\n    uint uStack372;\n    uint uStack368;\n    uint uStack364;\n    uint uStack360;\n    uint uStack356;\n    uint uStack352;\n    uint uStack348;\n    uint uStack344;\n    uint uStack340;\n    uint uStack336;\n    uint uStack332;\n    uint uStack328;\n    uint uStack324;\n    uint uStack320;\n    uint uStack316;\n    uint uStack312;\n    uint uStack308;\n    uint uStack304;\n    uint uStack300;\n    uint uStack296;\n    uint uStack292;\n    uint uStack288;\n    uint uStack284;\n    uint uStack280;\n    uint uStack276;\n    uint uStack272;\n    uint uStack268;\n    uint uStack264;\n    uint uStack260;\n    uint uStack256;\n    uint uStack252;\n    uint uStack248;\n    uint uStack244;\n    uint uStack240;\n    uint uStack236;\n    uint uStack232;\n    uint uStack228;\n    uint uStack224;\n    uint uStack220;\n    uint uStack216;\n    uint uStack212;\n    uint uStack208;\n    uint uStack204;\n    uint uStack200;\n    uint uStack196;\n    uint uStack192;\n    uint uStack188;\n    uint uStack184;\n    uint uStack180;\n    uint uStack176;\n    uint uStack172;\n    uint uStack168;\n    uint uStack164;\n    uint uStack160;\n    uint uStack156;\n    uint uStack152;\n    uint uStack148;\n    uint uStack144;\n    uint uStack140;\n    uint uStack136;\n    uint uStack132;\n    uint uStack128;\n    uint uStack124;\n    uint uStack120;\n    uint uStack116;\n    uint uStack112;\n    uint uStack108;\n    uint uStack104;\n    uint uStack100;\n    uint uStack96;\n    uint uStack92;\n    uint uStack88;\n    uint uStack84;\n    uint uStack80;\n    uint uStack76;\n    uint uStack72;\n    uint uStack68;\n    uint uStack64;\n    uint uStack60;\n    uint uStack56;\n    uint uStack52;\n    uint uStack48;\n    uint uStack44;\n    uint uStack40;\n    uint uStack36;\n    uint uStack32;\n    uint uStack28;\n    uint uStack24;\n    uint uStack20;\n    uint32_t uStack16;\n    int32_t iStack12;\n    uint32_t uStack8;\n    \n    uStack16 = *param_1;\n    uStack740 = param_1[1];\n    puStack732 = param_1;\n    if (*0xacd6c4 == 0x134) {\n        (*_sym.imp.KERNEL32.dll_WaitForMultipleObjects)(0, 0, 0, 0);\n        (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(0, 0);\n        (*_sym.imp.KERNEL32.dll_SleepEx)(0, 0);\n        (*_sym.imp.KERNEL32.dll_ReleaseSemaphore)(0, 0, 0);\n        (*_sym.imp.KERNEL32.dll_ResetEvent)(0);\n        (*_sym.imp.KERNEL32.dll_PulseEvent)(0);\n        (*_sym.imp.KERNEL32.dll_SetEvent)(0);\n        (*_sym.imp.KERNEL32.dll_GetFileAttributesA)(0x401250);\n        (*_sym.imp.KERNEL32.dll_WriteProcessMemory)(0, 0, 0, 0, &iStack728);\n    }\n    iStack12 = 0;\n    if (*0xacd6c4 == 0x114e) {\n        (*_sym.imp.KERNEL32.dll_SetFileShortNameA)(0, 0);\n        (*_sym.imp.KERNEL32.dll_SetEndOfFile)(0);\n    }\n    uStack752 = *param_2;\n    uStack748 = param_2[1];\n    iStack728 = -0x61c88647;\n    fcn.00545e0b();\n    iStack12 = iStack12 + 0x54;\n    if (*0xacd6c4 == 0xb54) {\n        (*_sym.imp.KERNEL32.dll_FindActCtxSectionGuid)(0, 0, 0, 0, 0);\n        (*_sym.imp.KERNEL32.dll_BuildCommDCBA)(0x401260, auStack800);\n        (*_sym.imp.KERNEL32.dll_GetProfileSectionA)(0x40126c, auStack1824, 0);\n        (*_sym.imp.KERNEL32.dll_WriteFile)(0, 0, 0, 0, 0);\n        (*_sym.imp.KERNEL32.dll_ReadFile)(0, 0, 0, 0, 0);\n        (*_sym.imp.ADVAPI32.dll_AdjustTokenGroups)(0, 0, 0, 0, puStack732, &iStack744);\n        (*_sym.imp.ADVAPI32.dll_AdjustTokenPrivileges)(0, 0, 0, 0, 0, 0);\n    }\n    iStack756 = param_2[2];\n    iStack744 = param_2[3];\n    iStack736 = 0x20;\n    do {\n        fcn.00545e00();\n        if (*0xacd6c4 == 0x4c3) {\n            (*_sym.imp.KERNEL32.dll_FlushFileBuffers)(0);\n            (*_sym.imp.KERNEL32.dll_LoadLibraryA)(0x40128c);\n            (*_sym.imp.KERNEL32.dll_RequestDeviceWakeup)(0);\n            (*_sym.imp.KERNEL32.dll_GetLongPathNameA)(0x4012a0, auStack1824, 0);\n            (*_sym.imp.KERNEL32.dll_WriteProfileSectionW)(0x401328, 0x4012b8);\n        }\n        uVar2 = uStack724 + iStack756;\n        if (*0xacd6c4 == 0xfa9) {\n            *0xa65a34 = 0xedeb2e40;\n        }\n        uVar1 = iStack12 + uStack16;\n        *0xa65a30 = 0x9150ce2e;\n        uStack8 = (uStack16 >> 5) + iStack744;\n        if (*0xacd6c4 == 0x912) {\n            (*_sym.imp.KERNEL32.dll_BuildCommDCBW)(0x401358, auStack800);\n            *0xa46690 = 0;\n        }\n        uStack472 = 0x23409e45;\n        uStack524 = 0x546684a8;\n        uStack656 = 0x3f378b90;\n        uStack660 = 0x26b873dc;\n        uStack340 = 0x358cf5cb;\n        uStack448 = 0x29983644;\n        uStack112 = 0x7dc6e5f5;\n        uStack212 = 0x3aa9ec81;\n        uStack516 = 0x39fd3d19;\n        uStack652 = 0x348f6274;\n        uStack280 = 0x6e41c7d3;\n        uStack644 = 0x53e187b4;\n        uStack204 = 0xfed61d6;\n        uStack636 = 0x7ada085d;\n        uStack132 = 0x4a1e8d93;\n        uStack332 = 0x456866b3;\n        uStack528 = 0x510c15d;\n        uStack124 = 0xa2eee99;\n        uStack196 = 0x778c3974;\n        uStack508 = 0x5a464473;\n        uStack500 = 0x685fa3d3;\n        uStack420 = 0x6d8c862c;\n        uStack272 = 0x6888eb1;\n        uStack628 = 0x5090d793;\n        uStack512 = 0x4abedd81;\n        uStack488 = 0x76ec4423;\n        uStack160 = 0x15e92005;\n        uStack28 = 0x70241620;\n        uStack620 = 0x131b9522;\n        uStack188 = 0x2942bb1d;\n        uStack240 = 0x2523a75b;\n        uStack268 = 0x11d08d33;\n        uStack260 = 0x4b222137;\n        uStack624 = 0x321ecfe3;\n        uStack612 = 0x575b796;\n        uStack696 = 0x1fffdd6a;\n        uStack116 = 0x75faf039;\n        uStack592 = 0x15899521;\n        uStack668 = 0x1109d039;\n        uStack232 = 0x75fcdb38;\n        uStack104 = 0x713f7202;\n        uStack504 = 0x2a34467c;\n        uStack152 = 0x7ab9969b;\n        uStack324 = 0x6e6f4f62;\n        uStack344 = 0x68a0941f;\n        uStack108 = 0x771b8962;\n        uStack412 = 0x708fef37;\n        uStack400 = 0xae5cf82;\n        uStack224 = 0x5afd073b;\n        uStack192 = 0x7da8d542;\n        uStack560 = 0x63059b8b;\n        uStack56 = 0x4e282ba7;\n        uStack416 = 0x5c4d4cf4;\n        uStack48 = 0x1a6faced;\n        uStack440 = 0x2a7bc4d0;\n        uStack632 = 0x571fe9f2;\n        uStack716 = 0x7fb79e3b;\n        uStack704 = 0x12911132;\n        uStack604 = 0x5e46be7b;\n        uStack180 = 0x3ab28b4;\n        uStack24 = 0x79ed9082;\n        uStack640 = 0x51c3c43d;\n        uStack392 = 0x4ed5ae5f;\n        uStack100 = 0x77ee5c69;\n        uStack584 = 0x699e0318;\n        uStack384 = 0x6a3df6d9;\n        uStack404 = 0x6a68727f;\n        uStack312 = 0x71a88410;\n        uStack464 = 0x72144519;\n        uStack700 = 0x7943706e;\n        uStack144 = 0x166ccf3d;\n        uStack376 = 0x5d7bef27;\n        uStack336 = 0x3fb67f18;\n        uStack596 = 0x687df6e2;\n        uStack396 = 0xb23fdac;\n        uStack264 = 0x3c0ec683;\n        uStack184 = 0x52c79ee7;\n        uStack576 = 0xea67b34;\n        uStack216 = 0x59ee28df;\n        uStack368 = 0x2817525b;\n        uStack492 = 0x41ec49cf;\n        uStack92 = 0x152f532e;\n        uStack96 = 0x6bcf2b09;\n        uStack588 = 0xd0455f;\n        uStack608 = 0x113cca32;\n        uStack88 = 0x2ca09670;\n        uStack720 = 0x1083bd57;\n        uStack172 = 0x8e56de1;\n        uStack432 = 0x357268d5;\n        uStack544 = 0x3f5a247a;\n        uStack40 = 0x7a66e545;\n        uStack676 = 0x24e4c52e;\n        uStack360 = 0x18be6c3e;\n        uStack316 = 0x3db8192e;\n        uStack520 = 0x777708fe;\n        uStack672 = 0x746719ea;\n        uStack304 = 0x70e28784;\n        uStack388 = 0x74b1451c;\n        uStack164 = 0x1fc38e1c;\n        uStack712 = 0x1a454084;\n        uStack256 = 0x6cfab315;\n        uStack308 = 0x5bcca26f;\n        uStack580 = 0xadc7db7;\n        uStack480 = 0x33be3dc9;\n        uStack572 = 0x218471aa;\n        uStack380 = 0x65649589;\n        uStack328 = 0x51dad296;\n        uStack568 = 0x3c96d833;\n        uStack176 = 0x65f5d1c;\n        uStack408 = 0x45644988;\n        uStack372 = 0x69748472;\n        uStack252 = 0x297ecfd3;\n        uStack552 = 0x4f7dbcd7;\n        uStack80 = 0x18561cab;\n        uStack156 = 0x720ef4aa;\n        uStack320 = 0x10ed17e7;\n        uStack496 = 0x3953200b;\n        uStack84 = 0x5142c32a;\n        uStack680 = 0x563d11f2;\n        uStack484 = 0x160fd461;\n        uStack564 = 0x603ca06c;\n        uStack244 = 0x13629ac1;\n        uStack300 = 0x74093f37;\n        uStack692 = 0x679680a8;\n        uStack476 = 0x207d8eeb;\n        uStack32 = 0xa216c63;\n        uStack236 = 0x2f5adecc;\n        uStack364 = 0x44a2df35;\n        uStack556 = 0x4a3c9e05;\n        uStack548 = 0x2ac010e7;\n        uStack76 = 0x67852e;\n        uStack352 = 0x483f468d;\n        uStack72 = 0xea69142;\n        uStack468 = 0x1b85e6;\n        uStack68 = 0x2e8bf091;\n        uStack136 = 0x7accba6a;\n        uStack208 = 0x70b903ac;\n        uStack424 = 0x8dfbb34;\n        uStack168 = 0x41683a2c;\n        uStack648 = 0x1c83fdd3;\n        uStack248 = 0x4ad81701;\n        uStack292 = 0x5d5c7f97;\n        uStack60 = 0x679ac91e;\n        uStack52 = 0x1899f8c7;\n        uStack148 = 0x4b6ad8c;\n        uStack296 = 0x103e9126;\n        uStack64 = 0x72b610fa;\n        uStack460 = 0x348041df;\n        uStack140 = 0x7cee9c15;\n        uStack708 = 0x18528e3a;\n        uStack452 = 0x2d0d3107;\n        uStack228 = 0x7b65c550;\n        uStack540 = 0x75ec9eda;\n        uStack600 = 0x42646a58;\n        uStack456 = 0x3ddf5eff;\n        uStack284 = 0x36dc2ee9;\n        uStack44 = 0x21b2f01a;\n        uStack664 = 0x726bed3c;\n        uStack684 = 0x6718329c;\n        uStack536 = 0x8d77509;\n        uStack128 = 0x56f4f074;\n        uStack688 = 0x6b3a3a26;\n        uStack444 = 0x6bee7b34;\n        uStack436 = 0x2a76cefe;\n        uStack36 = 0x25736362;\n        uStack428 = 0x5e24fb8f;\n        uStack288 = 0x13cc9676;\n        uStack276 = 0x145ce368;\n        uStack200 = 0x53a4e4aa;\n        uStack356 = 0x180454cc;\n        uStack616 = 0x5abc23bd;\n        uStack120 = 0x7a98d7b;\n        uStack532 = 0x48a0c18f;\n        uStack220 = 0x6e4572f2;\n        uStack348 = 0x924e26a9;\n        uStack8 = uStack8 ^ uVar2 ^ uVar1;\n        fcn.00545e12();\n        if (*0xacd6c4 == 0x426) {\n            (*_sym.imp.KERNEL32.dll_SetLastError)(0);\n            (*_sym.imp.KERNEL32.dll_WriteConsoleW)(0, auStack1824, 0, auStack760, 0);\n        }\n        uVar2 = uStack740;\n        uStack20 = 4;\n        uStack724 = uStack740 << 4;\n        fcn.00545e15();\n        uStack8 = uVar2 >> 5;\n        fcn.00545e15();\n        uVar1 = fcn.00545e06();\n        if (*0xacd6c4 == 0xb3f) {\n            (*_sym.imp.KERNEL32.dll_GetConsoleAliasesW)(auStack2848, 0, 0);\n        }\n        uStack724 = uVar1 ^ uStack8;\n        *0x666fb4 = 0;\n        uStack16 = uStack16 - uStack724;\n        if (*0xacd6c4 == 0x1d5) {\n            (*_sym.imp.KERNEL32.dll_WriteTapemark)(0, 0, 0, 0);\n            (*_sym.imp.KERNEL32.dll_SetTapePosition)(0, 0, 0, 0, 0, 0);\n            (*_sym.imp.KERNEL32.dll_GetTapeParameters)(0, 0, 0, 0);\n            (*_sym.imp.KERNEL32.dll_ReadConsoleInputA)(0, auStack792, 0, auStack768);\n            (*_sym.imp.KERNEL32.dll_WriteConsoleInputA)(0, 0, 0, auStack772);\n            (*_sym.imp.KERNEL32.dll_GetCPInfoExA)(0, 0, 0);\n            (*_sym.imp.KERNEL32.dll_ReleaseActCtx)(0);\n            (*_sym.imp.KERNEL32.dll_GetUserDefaultLCID)();\n            (*_sym.imp.KERNEL32.dll_GetLongPathNameW)(0x401360, auStack2848, 0);\n            (*_sym.imp.KERNEL32.dll_ProcessIdToSessionId)(0, auStack764);\n        }\n        iStack12 = iStack12 - iStack728;\n        iStack736 = iStack736 + -1;\n    } while (iStack736 != 0);\n    puStack732[1] = uVar2;\n    *puStack732 = uStack16;\n    return;\n}\n",
        "token_count": 5065
    },
    "00546809": {
        "rules": [
            "encrypt data using HC-128/1d01b23c04404fe18b84a06c7e7d83b0",
            "hash data using aphash/10489b186fc44711a1078750698db7a9"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00546809(uint param_1, uint32_t param_2)\n\n{\n    for (param_2 = param_2 >> 3; param_2 != 0; param_2 = param_2 - 1) {\n        if (*0xacd6c4 == 0x319) {\n            (*_sym.imp.KERNEL32.dll_GetEnvironmentStrings)();\n            (*_sym.imp.KERNEL32.dll_ZombifyActCtx)(0);\n            (*_sym.imp.KERNEL32.dll_ReadConsoleW)(0, 0, 0, 0, 0);\n            (*_sym.imp.KERNEL32.dll_GetConsoleAliasesLengthW)(0);\n        }\n        fcn.00545e18();\n    }\n    return;\n}\n",
        "token_count": 163
    },
    "0054685b": {
        "rules": [
            "parse credit card information/4eef9ae1278b42f592aee8ead6d8bf37"
        ],
        "decompiled_code": "\nvoid fcn.0054685b(void)\n\n{\n    uint32_t uVar1;\n    uint uStack24;\n    uint uStack20;\n    uint uStack16;\n    \n    uStack16 = 0x4013f4;\n    uStack20 = 0x546869;\n    *0xa65a24 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)();\n    uStack20 = 0x401410;\n    uStack24 = *0xa65a24;\n    *0xa65a1c = (*_sym.imp.KERNEL32.dll_GetProcAddress)();\n    *0xa4669c = (**0xa65a1c)(0, *0xacd6c4);\n    (*_sym.imp.KERNEL32.dll_VirtualProtect)(*0xa4669c, *0xacd6c4, 0x40, &stack0xffffffe8);\n    uVar1 = 0;\n    while( true ) {\n        (*_sym.imp.KERNEL32.dll_GetGeoInfoA)(0, 0, 0, 0, 0);\n        if (0x11c825e < uVar1) break;\n        uVar1 = uVar1 + 1;\n        if ((0x6c < uVar1 >> 0x1f) && ((0x6d < uVar1 >> 0x1f || (0xd69e5f84 < uVar1)))) break;\n    }\n    *0xacd6c8 = *0x553734;\n    uVar1 = 0;\n    if (*0xacd6c4 != 0) {\n        do {\n            (*0xa4669c)[uVar1] = *(*0xacd6c8 + 0xb2d3b + uVar1);\n            uVar1 = uVar1 + 1;\n        } while (uVar1 < *0xacd6c4);\n    }\n    fcn.00546809(0x553008);\n    *0xa65a2c = *0xa4669c;\n    (**0xa4669c)();\n    return;\n}\n",
        "token_count": 458
    },
    "00547005": {
        "rules": [
            "decompress data using LZO/b26d4b886bd545b48ed63f32c6357c17"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.00547005(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t *piVar1;\n    uint32_t arg_8h_00;\n    uint *puVar2;\n    uint uVar3;\n    int32_t unaff_EBP;\n    int32_t iVar4;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.005477e0(0x551960, 0x10);\n    arg_8h_00 = *(unaff_EBP + 8);\n    if (arg_8h_00 == 0xfffffffe) {\n        puVar2 = fcn.00547498();\n        *puVar2 = 0;\n        puVar2 = fcn.00547485();\n        *puVar2 = 9;\n    }\n    else {\n        if ((-1 < arg_8h_00) && (arg_8h_00 < *0xace254)) {\n            piVar1 = (arg_8h_00 >> 5) * 4 + 0xace260;\n            iVar4 = (arg_8h_00 & 0x1f) * 0x40;\n            if ((*(*piVar1 + 4 + iVar4) & 1) != 0) {\n                fcn.0054a751(arg_8h_00);\n                *(unaff_EBP + -4) = 0;\n                if ((*(*piVar1 + 4 + iVar4) & 1) == 0) {\n                    puVar2 = fcn.00547485();\n                    *puVar2 = 9;\n                    puVar2 = fcn.00547498();\n                    *puVar2 = 0;\n                    *(unaff_EBP + -0x1c) = 0xffffffff;\n                }\n                else {\n                    uVar3 = fcn.00546f90(*(unaff_EBP + 8), *(unaff_EBP + 0xc), *(unaff_EBP + 0x10));\n                    *(unaff_EBP + -0x1c) = uVar3;\n                }\n                *(unaff_EBP + -4) = 0xfffffffe;\n                fcn.005470d7(0x551960);\n                goto code_r0x005470d1;\n            }\n        }\n        puVar2 = fcn.00547498();\n        *puVar2 = 0;\n        puVar2 = fcn.00547485();\n        *puVar2 = 9;\n        fcn.005477ba(0, 0, 0, 0, 0);\n    }\ncode_r0x005470d1:\n    fcn.00547825();\n    return;\n}\n",
        "token_count": 619
    },
    "0054b0e5": {
        "rules": [
            "decompress data using LZO/b26d4b886bd545b48ed63f32c6357c17"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.0054b0e5(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t *piVar1;\n    uint32_t arg_8h_00;\n    uint *puVar2;\n    uint uVar3;\n    int32_t unaff_EBP;\n    int32_t iVar4;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.005477e0(0x551ae0, 0x10);\n    arg_8h_00 = *(unaff_EBP + 8);\n    if (arg_8h_00 == 0xfffffffe) {\n        puVar2 = fcn.00547498();\n        *puVar2 = 0;\n        puVar2 = fcn.00547485();\n        *puVar2 = 9;\n    }\n    else {\n        if ((-1 < arg_8h_00) && (arg_8h_00 < *0xace254)) {\n            piVar1 = (arg_8h_00 >> 5) * 4 + 0xace260;\n            iVar4 = (arg_8h_00 & 0x1f) * 0x40;\n            if ((*(*piVar1 + 4 + iVar4) & 1) != 0) {\n                fcn.0054a751(arg_8h_00);\n                *(unaff_EBP + -4) = 0;\n                if ((*(*piVar1 + 4 + iVar4) & 1) == 0) {\n                    puVar2 = fcn.00547485();\n                    *puVar2 = 9;\n                    puVar2 = fcn.00547498();\n                    *puVar2 = 0;\n                    *(unaff_EBP + -0x1c) = 0xffffffff;\n                }\n                else {\n                    uVar3 = fcn.0054a9b2(*(unaff_EBP + 8), *(unaff_EBP + 0xc), *(unaff_EBP + 0x10));\n                    *(unaff_EBP + -0x1c) = uVar3;\n                }\n                *(unaff_EBP + -4) = 0xfffffffe;\n                fcn.0054b1b7(0x551ae0);\n                goto code_r0x0054b1b1;\n            }\n        }\n        puVar2 = fcn.00547498();\n        *puVar2 = 0;\n        puVar2 = fcn.00547485();\n        *puVar2 = 9;\n        fcn.005477ba(0, 0, 0, 0, 0);\n    }\ncode_r0x0054b1b1:\n    fcn.00547825();\n    return;\n}\n",
        "token_count": 632
    },
    "0054c00a": {
        "rules": [
            "decompress data using LZO/b26d4b886bd545b48ed63f32c6357c17"
        ],
        "decompiled_code": "\nvoid fcn.0054c00a(void)\n\n{\n    uint8_t *puVar1;\n    int32_t unaff_EBP;\n    int32_t unaff_ESI;\n    uint32_t *unaff_EDI;\n    uint var_20h;\n    uint var_1ch;\n    \n    if (*(unaff_EBP + -0x1c) != unaff_ESI) {\n        if (*(unaff_EBP + -0x20) != unaff_ESI) {\n            puVar1 = *((*unaff_EDI >> 5) * 4 + 0xace260) + 4 + (*unaff_EDI & 0x1f) * 0x40;\n            *puVar1 = *puVar1 & 0xfe;\n        }\n        fcn.0054a7f1(*unaff_EDI);\n    }\n    return;\n}\n",
        "token_count": 192
    },
    "0054eab7": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.0054eab7(uint arg_8h, uint arg_ch, uint32_t arg_10h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t arg_8h_00;\n    uint uVar3;\n    code *pcVar4;\n    code *pcVar5;\n    uint var_14h;\n    uint var_ch;\n    uint var_8h;\n    int32_t var_4h;\n    \n    iVar1 = fcn.00548f5f();\n    var_4h = 0;\n    if (*0xacde2c == 0) {\n        iVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(0x401d00);\n        pcVar4 = _sym.imp.KERNEL32.dll_GetProcAddress;\n        if (iVar2 == 0) {\n            return 0;\n        }\n        arg_8h_00 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar2, 0x401cf4);\n        if (arg_8h_00 == 0) {\n            return 0;\n        }\n        *0xacde2c = fcn.00548eed(arg_8h_00);\n        uVar3 = (*pcVar4)(iVar2, 0x401ce4);\n        *0xacde30 = fcn.00548eed(uVar3);\n        uVar3 = (*pcVar4)(iVar2, 0x401cd0);\n        *0xacde34 = fcn.00548eed(uVar3);\n        uVar3 = (*pcVar4)(iVar2, 0x401cb4);\n        *0xacde3c = fcn.00548eed(uVar3);\n        if (*0xacde3c != 0) {\n            uVar3 = (*pcVar4)(iVar2, 0x401c9c);\n            *0xacde38 = fcn.00548eed(uVar3);\n        }\n    }\n    if ((*0xacde38 != iVar1) && (*0xacde3c != iVar1)) {\n        pcVar4 = fcn.00548f68(*0xacde38);\n        pcVar5 = fcn.00548f68(*0xacde3c);\n        if (((pcVar4 != NULL) && (pcVar5 != NULL)) &&\n           (((iVar2 = (*pcVar4)(),  iVar2 == 0 || (iVar2 = (*pcVar5)(iVar2, 1, &var_14h, 0xc, &var_8h),  iVar2 == 0)) ||\n            ((var_ch & 1) == 0)))) {\n            arg_10h = arg_10h | 0x200000;\n            goto code_r0x0054ebf9;\n        }\n    }\n    if ((((*0xacde30 != iVar1) && (pcVar4 = fcn.00548f68(*0xacde30),  pcVar4 != NULL)) &&\n        (var_4h = (*pcVar4)(),  var_4h != 0)) &&\n       ((*0xacde34 != iVar1 && (pcVar4 = fcn.00548f68(*0xacde34),  pcVar4 != NULL)))) {\n        var_4h = (*pcVar4)(var_4h);\n    }\ncode_r0x0054ebf9:\n    pcVar4 = fcn.00548f68(*0xacde2c);\n    if (pcVar4 == NULL) {\n        return 0;\n    }\n    uVar3 = (*pcVar4)(var_4h, arg_8h, arg_ch, arg_10h);\n    return uVar3;\n}\n",
        "token_count": 820
    },
    "005499e4": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Possible PIC construction at 0x00549ad7: Changing call to branch\n// WARNING: Removing unreachable block (ram,0x00549adc)\n// WARNING: Removing unreachable block (ram,0x00549b0a)\n// WARNING: Removing unreachable block (ram,0x00549ae2)\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.005499e4(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t *piVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    code *pcVar4;\n    int32_t unaff_EBP;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.005477e0(0x551a58, 0x18);\n    fcn.0054b41e(8);\n    *(unaff_EBP + -4) = 0;\n    if (*0xacd734 != 1) {\n        *0xacd730 = 1;\n        *0xacd72c = *(unaff_EBP + 0x10);\n        if (*(unaff_EBP + 0xc) == 0) {\n            piVar1 = fcn.00548f68(*0xace368);\n            *(unaff_EBP + -0x28) = piVar1;\n            if (piVar1 != NULL) {\n                piVar2 = fcn.00548f68(*0xace364);\n                *(unaff_EBP + -0x24) = piVar2;\n                *(unaff_EBP + -0x1c) = piVar1;\n                *(unaff_EBP + -0x20) = piVar2;\n                while( true ) {\n                    piVar2 = piVar2 + -1;\n                    *(unaff_EBP + -0x24) = piVar2;\n                    if (piVar2 < piVar1) break;\n                    iVar3 = fcn.00548f5f();\n                    if (*piVar2 != iVar3) {\n                        if (piVar2 < piVar1) break;\n                        pcVar4 = fcn.00548f68(*piVar2);\n                        iVar3 = fcn.00548f5f();\n                        *piVar2 = iVar3;\n                        (*pcVar4)();\n                        iVar3 = fcn.00548f68(*0xace368);\n                        piVar1 = fcn.00548f68(*0xace364);\n                        if ((*(unaff_EBP + -0x1c) != iVar3) || (*(unaff_EBP + -0x20) != piVar1)) {\n                            *(unaff_EBP + -0x1c) = iVar3;\n                            *(unaff_EBP + -0x28) = iVar3;\n                            *(unaff_EBP + -0x20) = piVar1;\n                            *(unaff_EBP + -0x24) = piVar1;\n                            piVar2 = piVar1;\n                        }\n                        piVar1 = *(unaff_EBP + -0x28);\n                    }\n                }\n            }\n            fcn.0054991e(0x401208);\n        }\n        fcn.0054991e(0x401210);\n    }\n    *(unaff_EBP + -4) = 0xfffffffe;\n    if (*(unaff_EBP + 0x10) != 0) {\n        fcn.0054b344(8);\n    }\n    return;\n}\n",
        "token_count": 793
    },
    "0054b665": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0054b665(uint arg_8h)\n\n{\n    uint in_EAX;\n    uint uVar1;\n    int32_t in_ECX;\n    uint in_EDX;\n    uint unaff_EBX;\n    uint unaff_EBP;\n    uint unaff_ESI;\n    uint unaff_EDI;\n    ushort in_ES;\n    ushort in_CS;\n    ushort in_SS;\n    ushort in_DS;\n    ushort in_FS;\n    ushort in_GS;\n    uint8_t in_AF;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    uint unaff_retaddr;\n    int32_t var_328h;\n    uint var_324h;\n    uint var_320h;\n    \n    if (in_ECX == *0x555c48) {\n        return;\n    }\n    *0xacdf58 = (in_NT & 1) * 0x4000 | SBORROW4(&stack0xfffffffc, 0x328) * 0x800 | (in_IF & 1) * 0x200 |\n                (in_TF & 1) * 0x100 | (&var_328h < 0) * 0x80 | (*0x10 == 0x32c) * 0x40 | (in_AF & 1) * 0x10 |\n                ((POPCOUNT(&var_328h & 0xff) & 1U) == 0) * 4 | &stack0xfffffffc < 0x328 | (in_ID & 1) * 0x200000 |\n                (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n    *0xacdf5c = &arg_8h;\n    *0xacde98 = 0x10001;\n    *0xacde40 = 0xc0000409;\n    *0xacde44 = 1;\n    var_328h = *0x555c48;\n    var_324h = *0x555c4c;\n    *0xacde4c = unaff_retaddr;\n    *0xacdf24 = in_GS;\n    *0xacdf28 = in_FS;\n    *0xacdf2c = in_ES;\n    *0xacdf30 = in_DS;\n    *0xacdf34 = unaff_EDI;\n    *0xacdf38 = unaff_ESI;\n    *0xacdf3c = unaff_EBX;\n    *0xacdf40 = in_EDX;\n    *0xacdf44 = in_ECX;\n    *0xacdf48 = in_EAX;\n    *0xacdf4c = unaff_EBP;\n    *0xacdf50 = unaff_retaddr;\n    *0xacdf54 = in_CS;\n    *0xacdf60 = in_SS;\n    *0xacde90 = (*_sym.imp.KERNEL32.dll_IsDebuggerPresent)();\n    fcn.0054b65d(1);\n    (*_sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter)(0);\n    (*_sym.imp.KERNEL32.dll_UnhandledExceptionFilter)(0x401d0c);\n    if (*0xacde90 == 0) {\n        fcn.0054b65d(1);\n    }\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(0xc0000409);\n    (*_sym.imp.KERNEL32.dll_TerminateProcess)(uVar1);\n    return;\n}\n",
        "token_count": 813
    },
    "0054e18b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.0054e18b(void)\n\n{\n    int32_t unaff_EBP;\n    uint var_1ch;\n    \n    if (*(unaff_EBP + -0x1c) != 0) {\n        fcn.0054b344(0);\n    }\n    return;\n}\n",
        "token_count": 66
    },
    "00545e0b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00545e0b(int32_t *param_1)\n\n{\n    *param_1 = *param_1 + -0x3910c934;\n    return;\n}\n",
        "token_count": 44
    },
    "00545e15": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00545e15(int32_t *param_1, int32_t param_2)\n\n{\n    *param_1 = *param_1 + param_2;\n    return;\n}\n",
        "token_count": 46
    },
    "null": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint main(void)\n\n{\n    char cVar1;\n    char *pcVar2;\n    \n    if (*0xacd6c4 == 0x598) {\n        (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)();\n        (*_sym.imp.KERNEL32.dll_HeapCompact)();\n        (*_sym.imp.KERNEL32.dll_CreateJobObjectA)(0);\n        (*_sym.imp.KERNEL32.dll_GetAtomNameA)(0, &stack0xfffffbd0, 0);\n        fcn.00546d63(0, 0);\n        fcn.00546d19();\n    }\n    *0xacd6c4 = *0x5546e4 + 0xb2d3b;\n    pcVar2 = 0x556840;\n    do {\n        cVar1 = *pcVar2;\n        pcVar2 = pcVar2 + 1;\n    } while (cVar1 != '\\0');\n    if (pcVar2 == 0x557d56) {\n        if (*0xacd6c4 == 0x18) {\n            (*_sym.imp.KERNEL32.dll_WaitForSingleObject)();\n            (*_sym.imp.KERNEL32.dll_WaitForMultipleObjectsEx)();\n            (*_sym.imp.KERNEL32.dll_GetOEMCP)();\n        }\n        if (*0xacd6c4 == 0x6ad) {\n            (*_sym.imp.KERNEL32.dll_SetLocaleInfoW)();\n            (*_sym.imp.KERNEL32.dll_HeapUnlock)();\n            (*_sym.imp.WINHTTP.dll_WinHttpSetOption)();\n        }\n        fcn.00546c54(0x556840, 0x401440);\n        fcn.00546c14(0, 0);\n        fcn.00546bfd(0x401450, 0x40144c);\n        fcn.00546ab4(0, 0, 0);\n    }\n    fcn.0054685b();\n    return 0;\n}\n",
        "token_count": 432
    },
    "00546bfd": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00546bfd(uint arg_8h, uint arg_ch)\n\n{\n    fcn.00546b39(arg_8h, arg_ch, 0x40);\n    return;\n}\n",
        "token_count": 46
    },
    "00546c54": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_1ch\n\nvoid __cdecl fcn.00546c54(uint arg_8h, uint arg_ch)\n\n{\n    uint *puVar1;\n    int32_t iVar2;\n    uint arg_8h_00;\n    int32_t iVar3;\n    uint uVar4;\n    int32_t unaff_EBP;\n    uint var_1ch;\n    uint arg_10h;\n    uint var_4h;\n    \n    fcn.005477e0(0x5518f8, 0xc);\n    if (*(unaff_EBP + 8) == 0) {\n        puVar1 = fcn.00547485();\n        *puVar1 = 0x16;\n        fcn.005477ba(0, 0, 0, 0, 0);\n    }\n    else {\n        iVar2 = fcn.005474ce();\n        fcn.005475e6(1, iVar2 + 0x20);\n        *(unaff_EBP + -4) = 0;\n        iVar2 = fcn.005474ce();\n        arg_8h_00 = fcn.00548041(iVar2 + 0x20);\n        iVar2 = unaff_EBP + 0xc;\n        arg_10h = 0;\n        uVar4 = *(unaff_EBP + 8);\n        iVar3 = fcn.005474ce();\n        uVar4 = fcn.0054823e(iVar3 + 0x20, uVar4, arg_10h, iVar2);\n        *(unaff_EBP + -0x1c) = uVar4;\n        iVar2 = fcn.005474ce();\n        fcn.005480dd(arg_8h_00, iVar2 + 0x20);\n        *(unaff_EBP + -4) = 0xfffffffe;\n        fcn.00546cf0();\n    }\n    fcn.00547825();\n    return;\n}\n",
        "token_count": 455
    },
    "00546cf0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00546cf0(void)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.005474ce();\n    fcn.00547654(1, iVar1 + 0x20);\n    return;\n}\n",
        "token_count": 53
    },
    "00549b10": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00549b10(uint arg_8h)\n\n{\n    fcn.005499e4(arg_8h, 0, 0);\n    return;\n}\n",
        "token_count": 41
    },
    "0054a4c1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x0054a4d5)\n// WARNING: Removing unreachable block (ram,0x0054a4db)\n// WARNING: Removing unreachable block (ram,0x0054a4dd)\n\nvoid fcn.0054a4c1(void)\n\n{\n    return;\n}\n",
        "token_count": 70
    },
    "0054bf6c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.0054bf6c(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h, uint arg_1ch)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    int32_t unaff_EBP;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.005477e0(0x551ba0, 0x14);\n    *(unaff_EBP + -0x1c) = 0;\n    puVar1 = *(unaff_EBP + 0x18);\n    if (((puVar1 == NULL) || (*puVar1 = 0xffffffff,  *(unaff_EBP + 8) == 0)) ||\n       ((*(unaff_EBP + 0x1c) != 0 && ((*(unaff_EBP + 0x14) & 0xfffffe7f) != 0)))) {\n        puVar1 = fcn.00547485();\n        *puVar1 = 0x16;\n        fcn.005477ba(0, 0, 0, 0, 0);\n    }\n    else {\n        *(unaff_EBP + -4) = 0;\n        uVar2 = fcn.0054b84d(unaff_EBP + -0x1c, *(unaff_EBP + 8), *(unaff_EBP + 0xc), *(unaff_EBP + 0x10), \n                             *(unaff_EBP + 0x14));\n        *(unaff_EBP + -0x20) = uVar2;\n        *(unaff_EBP + -4) = 0xfffffffe;\n        fcn.0054c00a();\n        if (*(unaff_EBP + -0x20) != 0) {\n            *puVar1 = 0xffffffff;\n        }\n    }\n    fcn.00547825();\n    return;\n}\n",
        "token_count": 455
    },
    "0054c038": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0054c038(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h, uint arg_18h)\n\n{\n    fcn.0054bf6c(arg_ch, arg_10h, arg_14h, arg_18h, arg_8h, 1);\n    return;\n}\n",
        "token_count": 79
    },
    "0054fe98": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0054fe98(uint *arg_8h)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    \n    if (arg_8h == NULL) {\n        puVar1 = fcn.00547485();\n        *puVar1 = 0x16;\n        fcn.005477ba(0, 0, 0, 0, 0);\n        uVar2 = 0x16;\n    }\n    else {\n        *arg_8h = *0xace170;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 134
    },
    "005512a9": {
        "rules": [
            "create or open file"
        ],
        "decompiled_code": "\nvoid fcn.005512a9(void)\n\n{\n    *0x556714 = (*_sym.imp.KERNEL32.dll_CreateFileA)(0x40264c, 0x40000000, 3, 0, 3, 0, 0);\n    return;\n}\n",
        "token_count": 63
    }
}