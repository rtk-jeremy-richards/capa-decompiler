{
    "10001060": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/a3d2ca57787b45ac887fefbb531cd56b",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/f4adb04e51ec4c55be451936d9d27cc9"
        ],
        "decompiled_code": "\nvoid fcn.10001060(void)\n\n{\n    *0x1006781c = *0x1004a358 + 0x400df3e0;\n    return;\n}\n",
        "token_count": 41
    },
    "null": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "100014c0": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl fcn.100014c0(uint arg_8h)\n\n{\n    char cVar1;\n    bool bVar2;\n    bool bVar3;\n    uint *puVar4;\n    int32_t in_ECX;\n    int32_t iVar5;\n    char *pcVar6;\n    char *pcVar7;\n    uint unaff_EDI;\n    int32_t *in_FS_OFFSET;\n    uint var_48h;\n    uint var_44h;\n    int32_t var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_1ch;\n    uint var_18h;\n    uint32_t var_14h;\n    int32_t var_ch;\n    uint uStack12;\n    uint uStack8;\n    \n    uStack8 = 0xffffffff;\n    uStack12 = 0x1003d349;\n    var_ch = *in_FS_OFFSET;\n    var_14h = *0x1004f06c ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    iVar5 = *(in_ECX + 4);\n    if (iVar5 == 0) {\n        var_30h = 0xf;\n        var_44h._0_1_ = 0;\n        puVar4 = &var_44h;\n        bVar3 = true;\n        bVar2 = false;\n        var_34h = iVar5;\n    }\n    else {\n        pcVar7 = *(iVar5 + 0x18);\n        if (pcVar7 == NULL) {\n            pcVar7 = iVar5 + 0x1c;\n        }\n        var_18h = 0xf;\n        var_1ch = 0;\n        var_2ch._0_1_ = 0;\n        if (*pcVar7 == '\\0') {\n            iVar5 = 0;\n        }\n        else {\n            pcVar6 = pcVar7;\n            do {\n                cVar1 = *pcVar6;\n                pcVar6 = pcVar6 + 1;\n            } while (cVar1 != '\\0');\n            iVar5 = pcVar6 - (pcVar7 + 1);\n        }\n        fcn.10003d80(pcVar7, iVar5, var_14h);\n        puVar4 = &var_2ch;\n        bVar3 = false;\n        bVar2 = true;\n    }\n    fcn.10003670(puVar4);\n    if (bVar2) {\n        fcn.10003600();\n    }\n    if (bVar3) {\n        fcn.10003600();\n    }\n    *in_FS_OFFSET = var_ch;\n    fcn.1000e9b7(unaff_EDI);\n    return;\n}\n",
        "token_count": 607
    },
    "10006d20": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __thiscall\nfcn.10006d20(int32_t **param_1, int32_t **param_2, int32_t **param_3, int32_t **param_4, int32_t *param_5)\n\n{\n    uint16_t *puVar1;\n    uint16_t uVar2;\n    int32_t iVar3;\n    char cVar4;\n    int32_t **ppiVar5;\n    int32_t **ppiVar6;\n    uint32_t uVar7;\n    uint32_t uVar8;\n    uint16_t *puVar9;\n    uint32_t uVar10;\n    int32_t **ppiVar11;\n    int32_t **unaff_retaddr;\n    \n    if (param_5 == NULL) {\n        param_5 = param_1[0x16];\n    }\n    if (param_3 != param_4) {\n        while (param_5 != NULL) {\n            ppiVar11 = param_4;\n    // switch table (21 cases) at 0x10006fbc\n            switch(param_5[1]) {\n            case 1:\n            case 8:\n            case 9:\n            case 0xd:\n            case 0xe:\n            case 0x14:\n                param_5 = param_5[3];\n                break;\n            case 2:\n                if ((*(param_1 + 0x18) & 1) == 0) goto code_r0x10006d70;\n                goto code_r0x10006fab;\n            case 3:\n                if ((*(param_1 + 0x18) & 2) == 0) goto code_r0x10006da0;\n                goto code_r0x10006fab;\n            default:\n                goto code_r0x10006d82;\n            case 6:\n                goto code_r0x10006dc1;\n            case 7:\n                goto code_r0x10006e07;\n            case 0xc:\n            case 0x15:\n                param_5 = NULL;\n                break;\n            case 0x10:\n                goto code_r0x10006f83;\n            }\n        }\n    }\n    goto code_r0x10006d82;\ncode_r0x10006e07:\n    uVar2 = *param_3;\n    uVar10 = uVar2;\n    ppiVar5 = param_3;\n    if ((param_5[5] == 0) || (ppiVar6 = fcn.10008ac0(param_3, param_3 + 2),  *ppiVar6 == param_3)) {\n        if (param_5[8] != 0) {\n            uVar7 = uVar10;\n            if ((param_1[0x17] & 0x800) != 0) {\n                uVar7 = fcn.100075a0(uVar10);\n                uVar7 = uVar7 & 0xffff;\n                ppiVar5 = param_2;\n                ppiVar11 = param_3;\n            }\n            uVar8 = 0;\n            if (*(param_5[8] + 4) != 0) {\n                iVar3 = *(param_5[8] + 8);\n                do {\n                    if ((*(iVar3 + uVar8 * 2) <= uVar7) && (uVar7 <= *(iVar3 + 2 + uVar8 * 2))) goto code_r0x10006f49;\n                    uVar8 = uVar8 + 2;\n                } while (uVar8 < *(param_5[8] + 4));\n            }\n        }\n        if (uVar2 < 0x100) {\n            if ((param_5[6] == 0) || ((*((uVar2 >> 3) + param_5[6]) & 1 << (uVar2 & 7)) == 0)) {\ncode_r0x10006f50:\n                uVar10 = 0;\n            }\n            else {\n                uVar10 = 1;\n            }\n        }\n        else {\n            iVar3 = param_5[7];\n            if (iVar3 != 0) {\n                puVar9 = *(iVar3 + 8);\n                puVar1 = puVar9 + *(iVar3 + 4);\n                if (puVar9 != puVar1) {\n                    do {\n                        if (*puVar9 == uVar2) break;\n                        puVar9 = puVar9 + 1;\n                    } while (puVar9 != puVar1);\n                    if (puVar9 != puVar1) {\n                        uVar10 = 1;\n                        goto code_r0x10006f52;\n                    }\n                }\n            }\n            if ((*(param_5 + 9) == 0) ||\n               (ppiVar5 = unaff_retaddr,  cVar4 = fcn.10007500(uVar10, *(param_5 + 9)),  ppiVar11 = param_2, \n               unaff_retaddr = ppiVar5,  cVar4 == '\\0')) {\n                if ((param_5[10] == 0) ||\n                   (cVar4 = fcn.10008b60(param_1[0x1c]),  ppiVar5 = param_3,  ppiVar11 = param_4,  cVar4 == '\\0'))\n                goto code_r0x10006f50;\ncode_r0x10006f49:\n                uVar10 = 1;\n            }\n            else {\n                uVar10 = 1;\n            }\n        }\n    }\n    else {\n        uVar10 = 1;\n    }\ncode_r0x10006f52:\n    param_3 = ppiVar5;\n    if (uVar10 != (param_5[2] & 1U)) goto code_r0x10006d82;\n    param_3 = ppiVar5 + 2;\n    if (param_3 == ppiVar11) {\n        *param_2 = param_3;\n        return;\n    }\n    goto code_r0x10006e07;\ncode_r0x10006dc1:\n    while( true ) {\n        ppiVar11 = param_3 + 2;\n        ppiVar5 = fcn.10008a40(param_3, ppiVar11, param_5[7] + 2, param_1[0x1c], param_1[0x17]);\n        if (*ppiVar5 != param_3) break;\n        param_3 = ppiVar11;\n        if (ppiVar11 == param_4) {\n            *param_2 = ppiVar11;\n            return;\n        }\n    }\n    goto code_r0x10006d82;\ncode_r0x10006da0:\n    while (*param_3 != 10) {\n        param_3 = param_3 + 2;\n        if (param_3 == param_4) {\n            *param_2 = param_3;\n            return;\n        }\n    }\n    goto code_r0x10006d82;\n    while( true ) {\n        param_4 = fcn.10006d20();\n        param_4 = *param_4;\n        param_5 = param_5[6];\n        if (param_1 == param_4) break;\ncode_r0x10006f83:\n        if (param_5 == NULL) break;\n    }\ncode_r0x10006fab:\n    *param_2 = param_4;\n    return;\n    while (param_3 = param_3 + 2,  param_3 != param_4) {\ncode_r0x10006d70:\n        if (*(param_3 + -2) == 10) break;\n    }\ncode_r0x10006d82:\n    *param_2 = param_3;\n    return;\n}\n",
        "token_count": 1713
    },
    "100081b0": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_30h\n// WARNING: Variable defined which should be unmapped: var_2ch\n\nuint32_t __cdecl fcn.100081b0(int32_t arg_8h)\n\n{\n    uint32_t uVar1;\n    uint16_t uVar2;\n    int32_t iVar3;\n    code *pcVar4;\n    uint8_t uVar5;\n    char cVar6;\n    uint32_t uVar7;\n    uint16_t *puVar8;\n    int32_t iVar9;\n    uint16_t **ppuVar10;\n    int32_t *piVar11;\n    uint8_t *puVar12;\n    char extraout_CL;\n    uint16_t **in_ECX;\n    uint8_t uVar13;\n    ushort uVar14;\n    uint unaff_EBX;\n    uint unaff_ESI;\n    uint unaff_EDI;\n    ushort in_ES;\n    int32_t *in_FS_OFFSET;\n    bool bVar15;\n    bool bVar16;\n    ulong uVar17;\n    int32_t in_stack_852d0ffc;\n    uint arg_10h;\n    uint in_stack_ffffffb8;\n    uint16_t *var_30h;\n    uint var_2ch;\n    uint in_stack_ffffffd4;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x1003d7a8;\n    var_ch = *in_FS_OFFSET;\n    uVar7 = *0x1004f06c ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &fcn.100081b0::var_ch;\n    if ((0 < in_ECX[0x1f]) && (puVar8 = in_ECX[0x1f] + -1,  in_ECX[0x1f] = puVar8,  puVar8 < 1)) {\n        in_stack_ffffffb8 = 0xc;\n        fcn.1000df64(0xc);\n    }\n    if ((0 < in_ECX[0x1e]) && (puVar8 = in_ECX[0x1e] + -1,  in_ECX[0x1e] = puVar8,  puVar8 < 1)) {\n        fcn.1000df64(0xb);\n    }\n    bVar15 = false;\n    if (arg_8h != 0) {\n        do {\n            iVar9 = *(arg_8h + 4);\n            uVar1 = iVar9 - 1;\n            if (0x14 < uVar1) {\n                uVar17 = fcn.1000df64(0xd);\n                puVar12 = uVar17;\n                uVar13 = uVar17 >> 0x20;\n                *puVar12 = *puVar12 + uVar13;\n                *puVar12 = *puVar12 + uVar13;\n                *((uVar17 >> 0x20) + -0x7d08f000) = in_ES;\n                uVar5 = *puVar12;\n                *puVar12 = *puVar12 + uVar13;\n                piVar11 = puVar12 + (-0x4e100083 - CARRY1(uVar5, uVar13));\n                *piVar11 = *piVar11 + 0x10;\n                *piVar11 = *piVar11 + uVar13;\n                uVar14 = uVar17 >> 0x20;\n                out(*0x1, uVar14);\n                *piVar11 = *piVar11 + 0x10;\n                out(*0x5, uVar14);\n                *piVar11 = *piVar11 + 0x10;\n                *0x4f100084 = *0x4f100084 + arg_8h;\n                *(arg_8h + -0x19efff7c) = *(arg_8h + -0x19efff7c) + extraout_CL;\n                *piVar11 = *piVar11 + 0x10;\n                puVar12 = piVar11 + in_stack_852d0ffc;\n                *puVar12 = *puVar12 + uVar13;\n                *puVar12 = *puVar12 + uVar13;\n                pcVar4 = swi(3);\n                uVar7 = (*pcVar4)();\n                return uVar7;\n            }\n    // switch table (21 cases) at 0x100085a4\n            switch(*(uVar1 * 4 + 0x100085a4)) {\n            case 0x10008236:\n                if ((in_ECX[0x18] & 0x101) == 1) {\ncode_r0x10008285:\n                    bVar15 = true;\n                    goto code_r0x100083f9;\n                }\n                if (((in_ECX[0x18] & 0x100) != 0) || (*in_ECX != in_ECX[0x13])) {\n                    bVar15 = (*in_ECX)[-1] != 10;\n                }\n                break;\n            case 0x1000826a:\n                if (((*(in_ECX + 0x18) & 2) != 0) || ((*in_ECX != in_ECX[0x14] && (**in_ECX != 10))))\n                goto code_r0x10008285;\n                break;\n            case 0x1000828c:\n                if ((((in_ECX[0x18] & 4) == 0) || (*in_ECX != in_ECX[0x13])) &&\n                   (((in_ECX[0x18] & 8) == 0 || (*in_ECX != in_ECX[0x14])))) {\n                    if ((*in_ECX == in_ECX[0x14]) || (uVar2 = **in_ECX,  uVar2 != uVar2)) {\ncode_r0x100082d4:\n                        arg_8h._3_1_ = '\\0';\n                    }\n                    else {\n                        iVar9 = fcn.10010d20(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_\", uVar2);\n                        arg_8h._3_1_ = '\\x01';\n                        if (iVar9 == 0) goto code_r0x100082d4;\n                    }\n                    cVar6 = fcn.10009780(*in_ECX, 0xffffffff);\n                    bVar16 = cVar6 != arg_8h._3_1_;\n                }\n                else {\n                    bVar16 = false;\n                }\n                if (bVar16 == (*(arg_8h + 8) & 1)) goto code_r0x10008285;\n                break;\n            case 0x100082f7:\n                puVar8 = *in_ECX;\n                if (((puVar8 == in_ECX[0x14]) || (*puVar8 == 10)) || (*puVar8 == 0xd)) goto code_r0x10008285;\n                *in_ECX = puVar8 + 1;\n                break;\n            case 0x1000831d:\n                ppuVar10 = fcn.10008a40(*in_ECX, in_ECX[0x14], *(arg_8h + 0x1c) + *(arg_8h + 0x18) * 2, in_ECX[0x1c], \n                                        in_ECX[0x17]);\n                if (*ppuVar10 == *in_ECX) goto code_r0x10008285;\n                *in_ECX = *ppuVar10;\n                break;\n            case 0x1000834e:\n                if ((*in_ECX == in_ECX[0x14]) ||\n                   (cVar6 = fcn.100097e0(arg_8h, in_stack_ffffffb8, uVar7, unaff_EDI, unaff_ESI, unaff_EBX, var_30h, \n                                         var_2ch, in_stack_ffffffd4),  cVar6 == '\\0')) goto code_r0x10008285;\n                bVar15 = false;\n                goto code_r0x100083e4;\n            case 0x1000836f:\n                var_30h = *in_ECX;\n                fcn.100091d0(in_ECX + 1);\n                puVar8 = in_ECX[4];\n                var_4h = 0;\n                cVar6 = fcn.100081b0(*(arg_8h + 0x14));\n                if (cVar6 == (iVar9 == 0xb)) {\n                    *in_ECX = var_30h;\n                    in_ECX[4] = puVar8;\n                    fcn.10009080(&fcn.100081b0::var_2ch);\n                    bVar15 = true;\n                }\n                else {\n                    *in_ECX = var_30h;\n                }\n                var_4h = 0xffffffff;\n                fcn.10006660();\n                break;\n            case 0x1000841d:\n                *(in_ECX[5] + *(arg_8h + 0x14) * 4) = *in_ECX;\n                puVar8 = in_ECX[4];\n                if (*(arg_8h + 0x14) < puVar8) {\n                    do {\n                        puVar8 = puVar8 + -1;\n                        *(in_ECX[1] + (puVar8 >> 5) * 2) = *(in_ECX[1] + (puVar8 >> 5) * 2) & ~(1 << (puVar8 & 0x1f));\n                    } while (*(arg_8h + 0x14) < puVar8);\n                }\n                break;\n            case 0x1000844f:\n                iVar9 = *(arg_8h + 0x14);\n                if ((*(in_ECX + 0x65) != '\\0') || (*(iVar9 + 0x14) != 0)) {\n                    *(in_ECX[1] + (*(iVar9 + 0x14) >> 5) * 2) =\n                         *(in_ECX[1] + (*(iVar9 + 0x14) >> 5) * 2) | 1 << (*(iVar9 + 0x14) & 0x1f);\n                    *(in_ECX[5] + *(iVar9 + 0x14) * 4 + 2) = *in_ECX;\n                }\n                break;\n            case 0x1000848b:\n                uVar1 = *(arg_8h + 0x14);\n                if ((*(in_ECX[1] + (uVar1 >> 5) * 2) & 1 << (uVar1 & 0x1f)) != 0) {\n                    puVar8 = *in_ECX;\n                    iVar9 = *(in_ECX[5] + uVar1 * 4);\n                    iVar3 = *(in_ECX[5] + uVar1 * 4 + 4);\n                    if (iVar9 != iVar3) {\n                        ppuVar10 = fcn.10009f20(puVar8, in_ECX[0x14], iVar9, iVar3, in_ECX[0x17]);\n                        puVar8 = *ppuVar10;\n                        if (puVar8 == *in_ECX) goto code_r0x10008285;\n                    }\n                    *in_ECX = puVar8;\n                }\n                break;\n            case 0x100084e6:\n                cVar6 = fcn.10009290(arg_8h);\n                if (cVar6 == '\\0') {\n                    bVar15 = true;\n                }\ncode_r0x100084fc:\n                arg_8h = 0;\n                break;\n            case 0x100084fc:\n                goto code_r0x100084fc;\n            case 0x10008503:\n                uVar5 = *(arg_8h + 8) >> 1;\n                arg_10h = 0;\ncode_r0x10008511:\n                cVar6 = fcn.100095b0(arg_8h, uVar5 & 1, arg_10h);\n                if (cVar6 == '\\0') {\n                    bVar15 = true;\n                }\n                goto code_r0x10008526;\n            case 0x1000852d:\n                arg_8h = *(arg_8h + 0x14);\n                if (*(arg_8h + 0x24) == 0) {\n                    arg_10h = *(in_ECX[0x10] + *(arg_8h + 0x20) * 4);\n                    uVar5 = *(arg_8h + 8) >> 1;\n                    goto code_r0x10008511;\n                }\ncode_r0x10008526:\n                arg_8h = 0;\n                break;\n            case 0x1000854d:\n                if ((((in_ECX[0x18] & 0x2020) == 0) || (in_ECX[0x13] != *in_ECX)) &&\n                   ((*(in_ECX + 0x1d) == '\\0' || (*in_ECX == in_ECX[0x14])))) {\n                    if ((*(in_ECX + 0x19) != '\\0') && (cVar6 = fcn.10009970(),  cVar6 == '\\0')) goto code_r0x10008526;\n                    fcn.10008ed0();\n                    *(in_ECX + 0x19) = 1;\n                    arg_8h = 0;\n                }\n                else {\n                    bVar15 = true;\n                    arg_8h = 0;\n                }\n            }\n            if (bVar15) break;\ncode_r0x100083e4:\n            if ((arg_8h == 0) || (arg_8h = *(arg_8h + 0xc),  arg_8h == 0)) break;\n        } while( true );\n    }\ncode_r0x100083f9:\n    puVar8 = in_ECX[0x1f];\n    if (0 < puVar8) {\n        puVar8 = puVar8 + 1;\n        in_ECX[0x1f] = puVar8;\n    }\n    *in_FS_OFFSET = var_ch;\n    return puVar8 & 0xffffff00 | !bVar15;\n}\n",
        "token_count": 3236
    },
    "10008600": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.10008600(int32_t *param_1)\n\n{\n    ushort uVar1;\n    uint16_t uVar2;\n    char cVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    bool bVar6;\n    \n    if (*param_1 == param_1[2]) {\n        param_1[0x13] = -1;\n        *(param_1 + 0x12) = 0xffff;\n    }\n    else {\n        uVar1 = **param_1;\n        *(param_1 + 0x12) = uVar1;\n        iVar4 = fcn.10010d20(\"()$^.*+?[]|\\\\-{},:=!\\n\\r\\b\", uVar1);\n        if (iVar4 == 0) {\n            uVar5 = 0;\n        }\n        else {\n            uVar5 = *(param_1 + 0x12);\n        }\n        param_1[0x13] = uVar5;\n    }\n    // switch table (116 cases) at 0x1000870c\n    switch(*(param_1 + 0x12)) {\n    case 10:\n        if ((*(param_1 + 0x14) & 4) == 0) {\n            return;\n        }\n        if (param_1[4] != 0) {\n            return;\n        }\n        param_1[0x13] = 0x7c;\n        return;\n    default:\n        goto code_r0x10008709;\n    case 0x24:\n        if ((param_1[0x14] & 0x2000000U) == 0) {\n            return;\n        }\n        if (*param_1 + 2 == param_1[2]) {\n            return;\n        }\n        if (*(*param_1 + 2) == 10) {\n            return;\n        }\n        param_1[0x13] = 0;\n        return;\n    case 0x28:\n    case 0x29:\n        bVar6 = (*(param_1 + 0x14) & 8) == 0;\n        break;\n    case 0x2a:\n        if ((param_1[0x14] & 0x4000000U) == 0) {\n            return;\n        }\n        cVar3 = fcn.10009d30();\n        if (cVar3 == '\\0') {\n            return;\n        }\n        param_1[0x13] = 0;\n        return;\n    case 0x2b:\n    case 0x3f:\n        bVar6 = (*(param_1 + 0x14) & 1) == 0;\n        break;\n    case 0x5c:\n        cVar3 = fcn.10009a20();\n        if (cVar3 == '\\0') {\n            return;\n        }\n        uVar2 = *(*param_1 + 2);\n        *(param_1 + 0x12) = uVar2;\n        param_1[0x13] = uVar2;\n        return;\n    case 0x5e:\n        if ((param_1[0x14] & 0x2000000U) == 0) {\n            return;\n        }\n        cVar3 = fcn.10009d30();\n        bVar6 = cVar3 == '\\0';\n        break;\n    case 0x7b:\n    case 0x7d:\n        bVar6 = (*(param_1 + 0x14) & 0x10) == 0;\n        break;\n    case 0x7c:\n        bVar6 = (*(param_1 + 0x14) & 2) == 0;\n    }\n    if (bVar6) {\n        param_1[0x13] = 0;\n    }\ncode_r0x10008709:\n    return;\n}\n",
        "token_count": 859
    },
    "100097e0": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187"
        ],
        "decompiled_code": "\nuint __cdecl\nfcn.100097e0(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint arg_18h, uint arg_1ch, uint arg_20h, \n            uint arg_24h, uint arg_28h)\n\n{\n    uint16_t *puVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    char cVar4;\n    uint8_t uVar5;\n    uint16_t **ppuVar6;\n    uint32_t uVar7;\n    uint16_t **in_ECX;\n    uint32_t uVar8;\n    uint16_t *puVar9;\n    uint16_t *puVar10;\n    uint32_t uVar11;\n    int32_t var_8h;\n    \n    uVar11 = **in_ECX;\n    if ((in_ECX[0x17] & 0x100) != 0) {\n        pcVar2 = **(in_ECX[0x1c] + 2);\n        if (pcVar2 == vtable.std::ctype_wchar_t_.0) {\n            uVar11 = fcn.1000dfc7(uVar11, *(in_ECX[0x1c] + 2) + 2);\n        }\n        else {\n            uVar11 = (**(pcVar2 + 0x20))(uVar11);\n        }\n        uVar11 = uVar11 & 0xffff;\n    }\n    puVar10 = *in_ECX + 1;\n    if (*(var_8h + 0x14) != 0) {\n        ppuVar6 = fcn.10008ac0(*in_ECX, in_ECX[0x14]);\n        if (*ppuVar6 != *in_ECX) {\n            uVar11 = 1;\n            puVar10 = *ppuVar6;\n            goto code_r0x1000993d;\n        }\n    }\n    if (*(var_8h + 0x20) != 0) {\n        uVar7 = uVar11;\n        if ((in_ECX[0x17] & 0x800) != 0) {\n            uVar7 = fcn.100075a0(uVar11);\n            uVar7 = uVar7 & 0xffff;\n        }\n        uVar8 = 0;\n        if (*(*(var_8h + 0x20) + 4) != 0) {\n            iVar3 = *(*(var_8h + 0x20) + 8);\n            do {\n                if ((*(iVar3 + uVar8 * 2) <= uVar7) && (uVar7 <= *(iVar3 + 2 + uVar8 * 2))) goto code_r0x10009934;\n                uVar8 = uVar8 + 2;\n            } while (uVar8 < *(*(var_8h + 0x20) + 4));\n        }\n    }\n    if (uVar11 < 0x100) {\n        if (*(var_8h + 0x18) != 0) {\n            uVar5 = *((uVar11 >> 3) + *(var_8h + 0x18)) & 1 << (uVar11 & 7);\ncode_r0x10009932:\n            if (uVar5 != 0) {\ncode_r0x10009934:\n                uVar11 = 1;\n                goto code_r0x1000993d;\n            }\n        }\n    }\n    else {\n        iVar3 = *(var_8h + 0x1c);\n        if (iVar3 != 0) {\n            puVar9 = *(iVar3 + 8);\n            puVar1 = puVar9 + *(iVar3 + 4);\n            if (puVar9 != puVar1) {\n                do {\n                    if (*puVar9 == uVar11) break;\n                    puVar9 = puVar9 + 1;\n                } while (puVar9 != puVar1);\n                if (puVar9 != puVar1) {\n                    uVar11 = 1;\n                    goto code_r0x1000993d;\n                }\n            }\n        }\n        if ((*(var_8h + 0x24) != 0) && (cVar4 = fcn.10007500(uVar11, *(var_8h + 0x24)),  cVar4 != '\\0')) {\n            uVar11 = 1;\n            goto code_r0x1000993d;\n        }\n        if (*(var_8h + 0x28) != 0) {\n            uVar5 = fcn.10008b60(in_ECX[0x1c]);\n            goto code_r0x10009932;\n        }\n    }\n    uVar11 = 0;\ncode_r0x1000993d:\n    if (uVar11 != (*(var_8h + 8) & 1)) {\n        *in_ECX = puVar10;\n        return 1;\n    }\n    return 0;\n}\n",
        "token_count": 1106
    },
    "1000b7d0": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187"
        ],
        "decompiled_code": "\nuint __fastcall fcn.1000b7d0(int32_t *param_1)\n\n{\n    uint16_t *puVar1;\n    int32_t iVar2;\n    uint8_t uVar3;\n    uint16_t uVar4;\n    uint32_t unaff_EDI;\n    \n    iVar2 = *param_1;\n    if (iVar2 != param_1[2]) {\n        uVar4 = fcn.1000cc20(iVar2, iVar2 + 2, param_1[0x10] >> 8 & 1);\n        if (uVar4 != 0) {\n            if (unaff_EDI != '\\0') {\n                fcn.1000bc80();\n            }\n            if (**(param_1[0xf] + 4) == vtable.std::ctype_wchar_t_.0) {\n                uVar3 = fcn.1000df84(*(param_1 + 0x12));\n                uVar3 = uVar3 & 1;\n            }\n            else {\n                uVar3 = (**(**(param_1[0xf] + 4) + 0x10))(1, *(param_1 + 0x12));\n            }\n            iVar2 = param_1[10];\n            fcn.1000d090(iVar2, uVar4, unaff_EDI & 0xffffff00 | uVar3);\n            puVar1 = iVar2 + 0x24;\n            *puVar1 = *puVar1 | uVar4;\n            fcn.10009a60();\n            return 1;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 355
    },
    "1000cdc0": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.1000cdc0(int16_t **param_1, int16_t *param_2)\n\n{\n    uint16_t *puVar1;\n    int16_t *piVar2;\n    code *pcVar3;\n    uint16_t uVar4;\n    int16_t *piVar5;\n    uint arg_8h;\n    int32_t iVar6;\n    \n    if (param_2 == 0x3a) {\n        arg_8h = 1;\n    }\n    else if (param_2 == 0x3d) {\n        arg_8h = 0;\n    }\n    else {\n        arg_8h = 0xe;\n        if (param_2 == 0x2e) {\n            arg_8h = 0;\n        }\n    }\n    piVar2 = *param_1;\n    iVar6 = 0;\n    piVar5 = param_1[0x13];\n    while ((((piVar5 != 0x3a && (piVar5 = param_1[0x13],  piVar5 != 0x3d)) && (piVar5 != 0x2e)) &&\n           (piVar5 != 0xffffffff))) {\n        piVar5 = *param_1;\n        if (piVar5 != param_1[2]) {\n            if (((*piVar5 == 0x5c) && (piVar5 = piVar5 + 1,  piVar5 != param_1[2])) &&\n               ((((param_1[0x14] & 8) == 0 && ((*piVar5 == 0x28 || (*piVar5 == 0x29)))) ||\n                (((param_1[0x14] & 0x10) == 0 && ((*piVar5 == 0x7b || (*piVar5 == 0x7d)))))))) {\n                *param_1 = piVar5;\n            }\n            *param_1 = *param_1 + 1;\n        }\n        fcn.10008600();\n        iVar6 = iVar6 + 1;\n        piVar5 = param_1[0x13];\n    }\n    if (param_1[0x13] == param_2) {\n        if (param_2 == 0x3a) {\n            uVar4 = fcn.1000cc20(piVar2, *param_1, param_1[0x10] >> 8 & 1);\n            if (uVar4 != 0) {\n                piVar2 = param_1[10];\n                fcn.1000d090(piVar2, uVar4, 0);\n                puVar1 = piVar2 + 0x12;\n                *puVar1 = *puVar1 | uVar4;\n                goto code_r0x1000ced2;\n            }\n            goto code_r0x1000cef0;\n        }\n        if (param_2 != 0x3d) {\n            if (param_2 != 0x2e) {\ncode_r0x1000ced2:\n                fcn.10009a60();\n                fcn.1000aab0(0x5d, arg_8h);\n                return;\n            }\n            if (piVar2 != *param_1) {\n                fcn.1000d370(piVar2, *param_1, iVar6, param_1[10] + 10);\n                goto code_r0x1000ced2;\n            }\n            goto code_r0x1000cefe;\n        }\n        if (piVar2 != *param_1) {\n            fcn.1000d100(piVar2, *param_1, iVar6);\n            goto code_r0x1000ced2;\n        }\n    }\n    else {\n        fcn.1000df64(arg_8h);\ncode_r0x1000cef0:\n        fcn.1000df64(1);\n    }\n    fcn.1000df64(0);\ncode_r0x1000cefe:\n    fcn.1000df64(0);\n    pcVar3 = swi(3);\n    (*pcVar3)();\n    return;\n}\n",
        "token_count": 914
    },
    "1000cf90": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187"
        ],
        "decompiled_code": "\nuint8_t __fastcall fcn.1000cf90(int32_t param_1)\n\n{\n    uint32_t uVar1;\n    \n    uVar1 = *(param_1 + 0x50);\n    if ((uVar1 & 0x400000) != 0) {\n    // switch table (52 cases) at 0x1000cfe4\n        switch(*(param_1 + 0x48)) {\n        case 0x44:\n        case 0x53:\n        case 0x57:\n        case 99:\n        case 100:\n        case 0x73:\n        case 0x77:\n            goto code_r0x1000cfe0;\n        default:\ncode_r0x1000cfb5:\n            return 1;\n        }\n    }\n    // switch table (92 cases) at 0x1000d020\n    switch(*(param_1 + 0x48)) {\n    case 0x22:\n    case 0x2f:\n        return uVar1 >> 0x18 & 1;\n    default:\ncode_r0x1000cfe0:\n        return 0;\n    case 0x24:\n    case 0x2a:\n    case 0x2e:\n    case 0x5b:\n    case 0x5c:\n    case 0x5e:\n    case 0x7c:\n        goto code_r0x1000cfb5;\n    case 0x28:\n    case 0x29:\n    case 0x2b:\n    case 0x3f:\n    case 0x7b:\n    case 0x7d:\n        return uVar1 >> 0x17 & 1;\n    }\n}\n",
        "token_count": 380
    },
    "1002133e": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_10h\n\nuint __cdecl fcn.1002133e(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    uint32_t lpCriticalSection;\n    uint *puVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t unaff_EBP;\n    uint *in_FS_OFFSET;\n    uint var_20h;\n    uint var_1ch;\n    uint var_10h;\n    uint var_4h;\n    \n    fcn.1000f7a0(0x1004d6a0, 0x10);\n    lpCriticalSection = *(unaff_EBP + 8);\n    if (lpCriticalSection == 0xfffffffe) {\n        puVar1 = fcn.10013e66();\n        *puVar1 = 0;\n        puVar1 = fcn.10013e79();\n        *puVar1 = 9;\n    }\n    else {\n        if ((-1 < lpCriticalSection) && (lpCriticalSection < *0x10056ce0)) {\n            iVar3 = (lpCriticalSection & 0x3f) * 0x38;\n            *(unaff_EBP + -0x20) = iVar3;\n            if ((*(*((lpCriticalSection >> 6) * 4 + 0x10056ae0) + 0x28 + iVar3) & 1) != 0) {\n                fcn.1001fff1(lpCriticalSection);\n                uVar2 = 0xffffffff;\n                *(unaff_EBP + -0x1c) = 0xffffffff;\n                *(unaff_EBP + -4) = 0;\n                if ((*(*((lpCriticalSection >> 6) * 4 + 0x10056ae0) + 0x28 + *(unaff_EBP + -0x20)) & 1) == 0) {\n                    puVar1 = fcn.10013e79();\n                    *puVar1 = 9;\n                    puVar1 = fcn.10013e66();\n                    *puVar1 = 0;\n                }\n                else {\n                    uVar2 = fcn.10021430(lpCriticalSection, *(unaff_EBP + 0xc), *(unaff_EBP + 0x10));\n                    *(unaff_EBP + -0x1c) = uVar2;\n                }\n                *(unaff_EBP + -4) = 0xfffffffe;\n                fcn.100213fd();\n                goto code_r0x10021420;\n            }\n        }\n        puVar1 = fcn.10013e66();\n        *puVar1 = 0;\n        puVar1 = fcn.10013e79();\n        *puVar1 = 9;\n        fcn.10013d94();\n    }\n    uVar2 = 0xffffffff;\ncode_r0x10021420:\n    *in_FS_OFFSET = *(unaff_EBP + -0x10);\n    return uVar2;\n}\n",
        "token_count": 670
    },
    "10001670": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint __cdecl fcn.10001670(int32_t *arg_8h, int32_t arg_ch)\n\n{\n    uint32_t uVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t arg_8h_00;\n    int32_t *in_FS_OFFSET;\n    uint var_44h;\n    uint var_10h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x1003d37f;\n    var_ch = *in_FS_OFFSET;\n    uVar1 = *0x1004f06c ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    if ((arg_8h != NULL) && (*arg_8h == 0)) {\n        fcn.1000e9c8(0x44);\n        var_4h = 0;\n        iVar3 = *(arg_ch + 4);\n        if (iVar3 == 0) {\n            arg_8h_00 = 0x1004a240;\n        }\n        else {\n            arg_8h_00 = *(iVar3 + 0x18);\n            if (arg_8h_00 == 0) {\n                arg_8h_00 = iVar3 + 0x1c;\n            }\n        }\n        uVar2 = fcn.10001230(arg_8h_00);\n        iVar3 = fcn.10001610(uVar2, 0, arg_8h_00, uVar1);\n        *arg_8h = iVar3;\n        fcn.10001310();\n    }\n    *in_FS_OFFSET = var_ch;\n    return 2;\n}\n",
        "token_count": 385
    },
    "10001b40": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint8_t fcn.10001b40(void)\n\n{\n    int32_t iVar1;\n    uint8_t uVar2;\n    char cVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint32_t uStack20;\n    int32_t *piStack16;\n    char cStack12;\n    int32_t iStack4;\n    \n    iVar4 = *0x1004f978;\n    uVar2 = 1;\n    uStack20 = 10;\n    if ((*0x1004f994 == 0) && (*0x1004f990 < 0xb)) {\n        *0x1004f9c0 = *0x1004f978;\n        *0x1004f9c4 = 0;\n        *0x1004f978 = 0x38;\n        uStack20 = iVar4 * 4 - 0x7a1aU & 0xffff;\n    }\n    piStack16 = *0x10066d70;\n    iStack4 = 0x32;\n    iVar4 = *0x1004fa00;\n    do {\n        iVar5 = *0x1004f978;\n        if ((*0x1004f994 == 0) && (*0x1004f990 <= uStack20)) {\n            *0x1004f9c4 = 0;\n            *0x1004f978 = 0x38;\n            uStack20 = (uStack20 * 9 + iVar5 * 4) - 0x7a74 & 0xffff;\n            *0x1004f9c0 = iVar5;\n        }\n        iVar1 = (iVar4 - *0x1004f976) + 0x38;\n        *0x1004f976 = uVar2 * '\\x02' + uStack20;\n        cVar3 = *0x1004f978;\n        iVar5 = iVar4;\n        if ((*0x1004f994 == 0) && (*0x1004f990 <= uStack20)) {\n            *0x1004f9c4 = 0;\n            uVar2 = uVar2 * '\\x04' + iVar4 * '\\x03' + uStack20 * '\\x03' + 0x29;\n            iVar5 = (uVar2 - uStack20) + 0x38;\n            *0x1004f9c0 = iVar4;\n            *0x1004fa00 = iVar5;\n        }\n        *0x10066d68 = *piStack16 + 0x1092334;\n        uVar2 = uVar2 + cVar3 + -0x1a + uStack20;\n        *0x1004fa04 = iVar1;\n        *piStack16 = *0x10066d68;\n        uStack20._0_2_ = uStack20 + (uVar2 - iVar1);\n        iStack4 = iStack4 + -1;\n        uStack20 = uStack20;\n        iVar4 = iVar5;\n        piStack16 = piStack16 + 1;\n    } while (iStack4 != 0);\n    if ((*0x1004f9e0 == 2) && (*0x1004f9e4 == 0)) {\n        cStack12 = iVar1;\n        return uVar2 * '\\x02' + 'c' + cStack12 + cVar3;\n    }\n    *0x1004f978 = uVar2 + 0x1f + iVar1;\n    return uVar2;\n}\n",
        "token_count": 794
    },
    "10001d30": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Control flow encountered bad instruction data\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t __fastcall fcn.10001d30(int32_t param_1)\n\n{\n    uint8_t uVar1;\n    int16_t iVar2;\n    int16_t iVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    int32_t iVar7;\n    uint32_t uVar8;\n    char cVar9;\n    int16_t *piVar10;\n    uint32_t uVar11;\n    uint32_t *puVar12;\n    uint16_t uVar13;\n    uint32_t uVar14;\n    uint8_t *puVar15;\n    bool bVar16;\n    ulong uVar17;\n    uint8_t uStack73;\n    uint32_t uStack72;\n    uint32_t uStack68;\n    uint32_t uStack64;\n    int32_t iStack60;\n    int32_t iStack56;\n    uint32_t uStack52;\n    int32_t iStack48;\n    uint32_t uStack44;\n    uint32_t uStack40;\n    \n    if ((*0x1004f9e0 == 2) && (*0x1004f9e4 == 0)) {\n        *0x1004f974 = *0x1004f974 * 3 + 0x6163 + *0x1004fa04;\n    }\n    else {\n        *0x1004f974 = *0x1004f974 + *0x1004fa04 + 0x1f;\n    }\n    piVar10 = 0x10055c5a;\n    uVar4 = *0x1004f974 >> 0x10;\n    uVar5 = *0x1004f978;\n    do {\n        iVar2 = param_1;\n        if (uVar5 == *0x10055c10) break;\n        *piVar10 = *piVar10 - iVar2;\n        piVar10 = piVar10 + -2;\n        uVar5 = ((uVar4 & 0xff) + uVar5) * 2 + 0x16157;\n    } while (0x10055c14 < piVar10);\n    piVar10 = 0x1004f990;\n    uVar13 = *0x1004f974 + iVar2 + *0x1004fa04 + -0x1a;\n    uVar4 = uVar13;\n    while ((uVar4 != *0x1004f990 || (*0x1004f994 != 0))) {\n        uVar13 = *piVar10 * uVar13 + -0x1a + *0x1004fa00 + *0x1004fa04;\n        uVar4 = uVar13;\n        if (((uVar4 == *0x1004f980) && (*0x1004f984 == 0)) || (piVar10 = piVar10 + 4,  0x1004fa9f < piVar10)) break;\n    }\n    iVar2 = iVar2 + 0x1f + uVar5;\n    *0x1004f974 = iVar2;\n    *0x10066d70 = 0x10057d50;\n    *0x1004f974 = CONCAT12((param_1 - *0x1004f974) + '8', iVar2);\n    fcn.10023d30();\n    if ((*0x1004f994 == 0) && (*0x1004f990 <= *0x1004fa00)) {\n        *0x1004f9c0 = *0x1004fa04;\n        *0x1004f9c4 = 0;\n        uVar5 = *0x1004fa00 * 3 + *0x1004f974 * 4 + *0x1004fa04 * 3 + 0x2429;\n        *0x1004f974 = *0x1004f974 & 0xffff0000 | uVar5 & 0xffff;\n        *0x1004fa04 = ((uVar5 & 0xffff) - *0x1004fa00) + 0x38;\n    }\n    uVar5 = *0x1004f974 * 2 - *0x1004fa04;\n    uVar4 = *0x1004f976;\n    *0x1004f974 = *0x1004f974 & 0xff000000 | CONCAT12(*0x1004f976 + uVar5 + -0x6f, uVar5);\n    *0x1004f978 = fcn.10023d30();\n    *0x1004f976 = *0x1004f976 + uVar5 + -0x6f;\n    *0x1004f974 = *0x1004f974 & 0xff000000 | *0x1004f974;\n    fcn.100240e0();\n    if (*0x1004fa04 <= (*0x1004f974 & 0xffff)) {\n        bVar16 = CARRY4(*0x1004f9a0, *0x1004fa00);\n        *0x1004f9a0 = *0x1004f9a0 + *0x1004fa00;\n        *0x1004f9a4 = *0x1004f9a4 + bVar16;\n        *0x1004f974 = *0x1004f974 & 0xffff0000 | (*0x1004fa04 - *0x1004fa00) * 2 - 0x14;\n    }\n    uStack44 = 0x18eccde;\n    uVar11 = *0x1004f974 & 0xffff0000;\n    uVar6 = (*0x1004f974 * 2 - *0x1004fa04) - 0xc & 0xffff;\n    *0x1004f974 = uVar11 | uVar6;\n    if (*0x1004fa04 <= (uVar5 & 0xffff) + uVar4 + 0x1f) {\n        bVar16 = CARRY4(*0x1004f9a0, *0x1004f978);\n        *0x1004f9a0 = *0x1004f9a0 + *0x1004f978;\n        *0x1004f9a4 = *0x1004f9a4 + bVar16;\n    }\n    if ((*0x1004f994 == 0) && (*0x1004f990 <= *0x1004fa00)) {\n        *0x1004f9c0 = *0x1004fa04;\n        *0x1004f9c4 = 0;\n        uVar13 = *0x1004fa00 * 3 + uVar6 * 4 + *0x1004fa04 * 3 + 0x2429;\n        *0x1004f974 = uVar11 | uVar13;\n        *0x1004fa04 = (uVar13 - *0x1004fa00) + 0x38;\n    }\n    uVar6 = fcn.100242d0();\n    uVar4 = (*0x1004f974 * 2 - *0x1004fa04) - 0xc;\n    uVar5 = uVar4 & 0xffff;\n    uVar4 = uVar4 & 0xffff;\n    iVar7 = *0x1004fa04 + uVar5;\n    uStack52 = 0xc;\n    uVar11 = (*0x1004fa00 - 0x1a) + *0x1004f976 + uVar5;\n    uStack40 = 0xaa;\n    *0x1004f974 = uVar4;\n    if ((*0x1004f9f0 - *0x1004f990 == 0x1d2) && (*0x1004f9f4 - *0x1004f994 == *0x1004f9f0 < *0x1004f990)) {\n        uVar5 = *0x1004fa04 * 2 + 0x1f;\n        uVar4 = uVar5 & 0xffff;\n        uVar5 = *0x1004fa04 + ((uVar5 & 0xffff) - uVar11);\n    }\n    uStack64 = 0x66;\n    iStack60 = 0;\n    uVar4 = uVar5 + uVar4 * 2;\n    *0x1004f974 = *0x1004f974 & 0xffff0000 | uVar4 & 0xffff;\n    uStack68 = (uVar4 & 0xffff) + uVar5 + iVar7 + 5;\n    puVar12 = 0x1004faa8;\n    *0x1004f978 = uVar6;\n    *0x1004fa00 = uVar11;\n    do {\n        if (((uVar4 & 0xffff) == *0x1004f980) && (*0x1004f984 == 0)) break;\n        uVar4 = *puVar12;\n        *puVar12 = *puVar12 - uVar11;\n        uVar8 = *0x1004f974;\n        puVar12[1] = puVar12[1] - (uVar4 < uVar11);\n        puVar12 = puVar12 + -4;\n        uVar4 = (uVar8 + uVar5) * 2 + 0x6157;\n        *0x1004f974 = *0x1004f974 & 0xffff0000 | uVar4 & 0xffff;\n    } while (0x1004f990 < puVar12);\n    iVar2 = uVar5;\n    if ((*0x1004f9b0 == 0x199d) && (*0x1004f9b4 == 0)) {\n        uVar5 = (uVar5 * 2 + *0x1004f9f0 * -3 + -0x1046f) * 2 - 0x1046f;\n    }\n    uVar4 = *0x1004f974 & 0xffff0000;\n    *0x1004f974 = uVar4 | (*0x1004f974 * 2 - iVar2) + (-8 - uVar5);\n    if (uVar5 <= *0x1004f976 + (uVar11 - *0x1004f974)) {\n        bVar16 = CARRY4(*0x1004f9a0, uVar6);\n        *0x1004f9a0 = *0x1004f9a0 + uVar6;\n        *0x1004f9a4 = *0x1004f9a4 + bVar16;\n    }\n    *0x1004fa04 = uVar5;\n    if ((*0x1004f994 == 0) && (*0x1004f990 <= uVar11)) {\n        *0x1004f9c4 = 0;\n        uVar8 = uVar11 * 3 + *0x1004f974 * 4 + uVar5 * 3 + 0x2429;\n        *0x1004f974 = uVar4 | uVar8 & 0xffff;\n        *0x1004fa04 = ((uVar8 & 0xffff) - uVar11) + 0x38;\n        *0x1004f9c0 = uVar5;\n    }\n    uVar5 = *0x1004fa04 + (*0x1004f974 - 0xd) * 2;\n    *0x1004f974 = *0x1004f974 & 0xffff0000 | uVar5 & 0xffff;\n    if ((*0x1004f9b0 == 0x199d) && (*0x1004f9b4 == 0)) {\n        *0x1004fa04 = (*0x1004fa04 - *0x1004f9f0) * 2 - 0x1046f;\n    }\n    iStack48 = *0x1004f9f0 - *0x1004f990;\n    iStack56 = (*0x1004f9f4 - *0x1004f994) - (*0x1004f9f0 < *0x1004f990);\n    while( true ) {\n        uVar4 = *0x1004f974;\n        uStack73 = uStack68 * '\\x02' + *0x1004f974;\n        if ((iStack48 == 0x1d2) && (iStack56 == 0)) {\n            uStack73 = *0x1004fa04 * '\\x02' + 0x1f;\n            *0x1004fa04 = *0x1004fa04 + (uStack73 - uVar6);\n        }\n        else {\n            *0x1004fa04 = uStack73;\n        }\n        uVar13 = uVar5 + (-8 - *0x1004fa04);\n        uVar5 = uVar13;\n        if ((*0x1004f994 == 0) && (*0x1004f990 <= *0x1004fa04)) {\n            *0x1004f9c0 = uVar13;\n            *0x1004f9c4 = 0;\n            uStack68 = *0x1004fa04 * 3 + 0x42429 + *0x1004f9c0 * 3 + uStack68 * 4;\n            uVar5 = (uStack68 - *0x1004fa04) + 0x38;\n            uVar13 = uVar5;\n        }\n        *0x1004f974 = CONCAT22(CONCAT11(*0x1004f977, uStack73), uVar13);\n        iVar2 = uVar11;\n        if (uVar6 < (uVar5 & 0xffff)) {\n            iVar3 = iVar2 + 0x57;\n            *0x1004f974 = CONCAT22(CONCAT11(*0x1004f977, uStack73), iVar3);\n            uVar5 = uVar6 == 0;\n            if (uVar5 != 0) {\n                *0x1004f974 = iVar3;\n                uStack73 = ((uVar6 == 0) - *0x1004f974) + 0x38;\n                *0x1004f974 = CONCAT12(uStack73, iVar3);\n                *0x1004f974 = uVar4 & 0xff000000 | *0x1004f974;\n                if (uVar11 <= uVar5) {\n                    bVar16 = CARRY4(*0x1004f9a0, *0x1004fa04);\n                    *0x1004f9a0 = *0x1004f9a0 + *0x1004fa04;\n                    *0x1004f9a4 = *0x1004f9a4 + bVar16;\n                }\n            }\n            uStack68 = (uVar6 - uVar11) - 8;\n        }\n        uVar5 = *0x1004fa04 + (*0x1004f974 - 0xd) * 2;\n        uVar13 = uVar5;\n        uVar4 = uVar5 & 0xffff;\n        if (uStack68 < (uVar5 & 0xffff)) {\n            uVar13 = *0x1004fa04 + (uVar4 + -0xd) * 2;\n            uVar4 = uVar13;\n            uStack68 = *0x1004fa04;\n        }\n        else if ((iStack48 == 0x1d2) && (iStack56 == 0)) {\n            uStack68 = (*0x1004fa04 * 3 - uVar6) + 0x1f;\n        }\n        uVar5 = uStack73;\n        iVar3 = uStack68;\n        *0x1004fa04 = uStack68;\n        if (uStack44 == 0) break;\n        uVar13 = uVar13 + (0x38 - iVar3);\n        iVar7 = uVar13 + uVar5 + 0x1f;\n        *0x1004f974 = *0x1004f974 & 0xffff0000 | uVar13;\n        fcn.10001b40();\n        iStack48 = *0x1004f9f0 - *0x1004f990;\n        iStack56 = (*0x1004f9f4 - *0x1004f994) - (*0x1004f9f0 < *0x1004f990);\n        if ((iStack48 == 0x1d2) && (iStack56 == 0)) {\n            uStack68 = *0x1004f976 * 2 + 0x1f;\n            cVar9 = *0x1004f976 + (uStack68 - *0x1004f974);\n        }\n        else {\n            cVar9 = iVar7;\n            uStack68 = iVar7;\n        }\n        uStack44 = uStack44 + -1;\n        uVar5 = *0x1004fa04 + *0x1004f974 * 2;\n        *0x1004f974 = *0x1004f974 & 0xffff0000 | uVar5 & 0xffff;\n        *0x1004f974 = uVar5 & 0xffff;\n        uStack68 = uStack68 + -0x1a + *0x1004fa00 + *0x1004f978;\n        uVar6 = *0x1004f978 + (uStack68 - *0x1004fa04);\n        uVar11 = *0x1004fa00;\n        *0x1004f978 = uVar6;\n        if ((*0x1004f994 == 0) && (*0x1004f990 <= (uVar5 & 0xffff))) {\n            *0x1004f9c0 = cVar9 + *0x1004f974 + -0x6f;\n            *0x1004f9c4 = 0;\n            uStack68 = *0x1004f9c0 * 3 + 0x42429 + (uVar5 & 0xffff) * 3 + uStack68 * 4;\n        }\n    }\n    uVar8 = uVar13;\n    iVar7 = uVar5 - uVar8;\n    uStack44 = iVar7 - 8;\n    if (uVar8 < uStack44) {\n        uVar13 = uVar13 + iVar3 + 0x1f;\n        uVar8 = uVar13;\n        uStack44 = uStack44 + iVar7 + -0x26 + uVar8 + uVar5;\n        uVar4 = uVar13;\n        if (uVar11 <= uStack44) {\n            bVar16 = CARRY4(*0x1004f9a0, uStack68);\n            *0x1004f9a0 = *0x1004f9a0 + uStack68;\n            *0x1004f9a4 = *0x1004f9a4 + bVar16;\n            uStack44 = (uVar11 - uStack68) * 2 - 0x14;\n        }\n    }\n    if ((*0x1004f9e0 == 2) && (*0x1004f9e4 == 0)) {\n        uVar4 = uVar4 * 2 + 0x6163 + iVar2 + iVar3;\n    }\n    else {\n        *0x1004fa04 = uVar11 + 0x1f + uVar8;\n    }\n    iStack56 = 0x18eccde;\n    uVar5 = *0x1004fa04 + uVar4 * 3 + 0x6163;\n    uVar4 = uVar5 & 0xffff;\n    iVar7 = (*0x1004fa04 * 2 - (uVar5 & 0xffff)) + uVar6 + (uStack44 - 0x26);\n    if (*0x10055c28 == 2) {\n        uVar13 = uVar4 * 2 + uStack73 + iVar2 + 0x6163;\n        uVar5 = uVar13;\n        uVar4 = uVar13;\n    }\n    *0x1004f974 = uVar4;\n    uVar1 = iVar7 * '\\x02' + *0x1004f974;\n    if (uVar1 <= uVar5) {\n        *0x10055c18 = *0x10055c18 + iVar7;\n        uVar5 = (uVar1 - iVar7) * 2 - 0x14;\n        *0x1004f974 = uVar5;\n    }\n    *0x1004f976 = uVar11 * '\\x02' + *0x1004f974;\n    uVar4 = *0x1004f974 & 0xff000000;\n    *0x1004f974 = uVar4 | *0x1004f976 << 0x10;\n    uStack72 = iVar7 + 0x1002e4e8;\n    if (*0x10055c14 <= uVar5) {\n        *0x10055c20 = *0x1004f976;\n        uStack72 = *0x1004f976 * 3 + 0x42429 + (uVar5 & 0xffff) * 3 + uStack72 * 4;\n        *0x1004f976 = (uStack72 - *0x1004f974) + 0x38;\n        *0x1004f977 = uVar4 >> 0x18;\n        *0x1004f974 = CONCAT11(*0x1004f977, *0x1004f976) << 0x10;\n    }\ncode_r0x10002614:\n    uVar4 = *0x1004f974;\n    iStack60 = iStack60 + 1;\n    uStack72 = uStack72 + (uVar6 - *0x1004fa04) + -0xc;\n    if (*0x1004f976 <= uStack72) {\n        uVar11 = uVar5 & 0xffff;\n        bVar16 = CARRY4(*0x1004f9a0, uVar11);\n        *0x1004f9a0 = *0x1004f9a0 + uVar11;\n        *0x1004f9a4 = *0x1004f9a4 + bVar16;\n        uStack72 = (*0x1004f976 - uVar11) * 2 - 0x14;\n    }\n    if (0xa9b7 < uStack72) {\n        *0x1004f978 = *0x1004fa04 + uStack72 * 2;\n    }\n    if ((*0x1004f9f0 - *0x1004f990 == 0x1d2) && (*0x1004f9f4 - *0x1004f994 == *0x1004f9f0 < *0x1004f990)) {\n        uStack72 = (uVar5 & 0xffff) * 2 + 0x1f;\n        uVar5 = uVar5 + (uStack72 - *0x1004fa04);\n    }\n    else {\n        uVar5 = uStack72 & 0xffff;\n    }\n    *0x1004f974 = *0x1004f974 & 0xffff0000 | uVar5;\n    if (iStack60 < 0x44) {\n        *0x1004f974 = uVar5;\n        if ((*0x1004f9e0 == 2) && (*0x1004f9e4 == 0)) {\n            *0x1004f974 = uVar4 & 0xffff0000 | *0x1004f974 * 2 + *0x1004f976 + iStack60 + 0x6163;\n        }\n        else {\n            *0x1004f974 = uVar5;\n            *0x1004f974 = CONCAT12(*0x1004f974 + '\\x1f' + iStack60, *0x1004f974);\n            *0x1004f974 = uVar4 & 0xff000000 | *0x1004f974;\n        }\n        iVar7 = (*_sym.imp.KERNEL32.dll_GetSystemDirectoryW)(0x10056e00, 0x4b3);\n        uVar5 = *0x1004f974 & 0xffff;\n        uStack72 = (*0x1004f978 - 0x1a) + *0x1004fa04 + iVar7;\n        if ((*0x1004f9b0 == 0x199d) && (*0x1004f9b4 == 0)) {\n            *0x1004f976 = (*0x1004f976 - *0x1004f9f0) * '\\x02' + 0x91;\n            *0x1004f974 = *0x1004f974 & 0xff000000 | *0x1004f974;\n        }\n    }\n    uStack73 = *0x1004f974;\n    if ((*0x1004f9e0 == 2) && (*0x1004f9e4 == 0)) {\n        uStack72 = *0x1004f976 + uStack72 * 2 + 0x16163 + uVar5;\n    }\n    else {\n        *0x1004f976 = uStack72 + *0x1004f974 + 0x1f;\n        *0x1004f974 = *0x1004f974 & 0xff000000 | *0x1004f974;\n    }\n    uVar4 = uStack40 - 1;\n    if (3 < uStack40) {\n        uVar4 = uStack40;\n    }\n    *0x1004f978 = uStack72 * 2 + *0x1004fa04;\n    if ((*0x1004f9e0 == 2) && (*0x1004f9e4 == 0)) {\n        uStack72 = *0x1004fa04 + 0x16163 + (*0x1004f976 + 0x16163 + uStack72 * 2) * 2 + uVar5 * 3;\n    }\n    else {\n        *0x1004f976 = *0x1004f974 + '\\x1f' + uStack72;\n        uVar5 = uStack72 + 0x1f + *0x1004fa04;\n        *0x1004f974 = uVar5 & 0xffff;\n        *0x1004f974 = uVar5 & 0xffff;\n        *0x1004f974 = *0x1004f974 & 0xff000000 | *0x1004f974;\n        uStack73 = *0x1004f974;\n    }\n    *0x1004fa00 = uStack64 + 0x1f + *0x1004f978;\n    uStack68 = *0x1004f978;\n    if (0xa74c < *0x1004f978) {\n        uStack68 = *0x1004f978 + (uStack72 - *0x1004fa04);\n        *0x1004f978 = uStack68;\n        if (*0x1004fa00 == (uVar5 & 0xffff)) {\n            if ((*0x1004f9b0 == 0x199d) && (*0x1004f9b4 == 0)) {\n                *0x1004f974 = CONCAT12((*0x1004f976 - *0x1004f9f0) * '\\x02' + -0x6f, *0x1004f974);\n                *0x1004f974 = *0x1004f974 & 0xff000000 | *0x1004f974;\n            }\n            uStack72 = fcn.10023d30();\n            if ((*0x1004f9b0 == 0x199d) && (*0x1004f9b4 == 0)) {\n                uVar5 = (*0x1004f974 - *0x1004f9f0) * 2 - 0x46f;\n                *0x1004f974 = *0x1004f974 & 0xffff0000 | uVar5 & 0xffff;\n                *0x1004f974 = uVar5 & 0xffff;\n                uStack73 = *0x1004f974;\n            }\n            *0x1004f976 = (uStack72 - uStack73) + 0x38;\n            *0x1004f974 = *0x1004f974 & 0xff000000 | *0x1004f974;\n        }\n        if ((*0x1004f9b0 == 0x199d) && (*0x1004f9b4 == 0)) {\n            uVar5 = (*0x1004f974 - *0x1004f9f0) * 2 - 0x46f;\n            *0x1004f974 = *0x1004f974 & 0xffff0000 | uVar5 & 0xffff;\n        }\n    }\n    iVar2 = uVar5;\n    iVar7 = *0x1004f9f0 - *0x1004f990;\n    uVar6 = *0x1004f9f0 < *0x1004f990;\n    uVar8 = *0x1004f9f4 - *0x1004f994;\n    uVar11 = uStack72;\n    if ((iVar7 == 0x1d2) && (uVar8 == uVar6)) {\n        uStack72 = *0x1004fa04 * 2 + 0x1f;\n        uVar11 = *0x1004fa04 + (uStack72 - uStack68);\n    }\n    if (uStack64 < 0xf) {\n        *0x1004f978 = uStack72;\n        if ((iVar7 == 0x1d2) && (uVar8 == uVar6)) {\n            uStack72 = uStack68 * 2 + 0x1f;\n            *0x1004f978 = uStack68 + (uStack72 - uVar11);\n        }\n        uVar14 = *0x1004fa00;\n        if ((iVar7 == 0x1d2) && (uVar8 == uVar6)) {\n            *0x1004fa00 = uVar11 * 2 + 0x1f;\n            uVar14 = uVar11 + (*0x1004fa00 - uStack72);\n        }\n        uStack64 = uStack64 - 1;\n        uVar11 = uVar14;\n        uStack68 = *0x1004f978;\n        if ((*0x1004f9b0 == 0x199d) && (*0x1004f9b4 == 0)) {\n            *0x1004f978 = (*0x1004f978 - *0x1004f9f0) * 2 - 0x1046f;\n            uStack68 = *0x1004f978;\ncode_r0x100029eb:\n            uVar11 = (uVar11 - *0x1004f9f0) * 2 - 0x1046f;\n        }\n    }\n    else if ((*0x1004f9b0 == 0x199d) && (*0x1004f9b4 == 0)) goto code_r0x100029eb;\n    if ((*0x1004f9e0 == 2) && (*0x1004f9e4 == 0)) {\n        iVar2 = *0x1004f974 * 2 + *0x1004f976 + uStack68 + 0x6163;\n    }\n    else {\n        *0x1004f978 = *0x1004f976 + 0x1f + (uVar5 & 0xffff);\n        uStack68 = *0x1004f978;\n    }\n    uVar5 = *0x1004f974 & 0xffff0000;\n    *0x1004f974 = uVar5 | iVar2 + (0x38 - uVar11);\n    if (iStack56 != 0) {\n        *0x1004fa04 = *0x1004fa00 + uVar11 * 2 + 0x16163 + iStack56;\n        fcn.10001b40();\n        if (*0x1004fa04 <= (*0x1004f974 & 0xffff)) {\n            bVar16 = CARRY4(*0x1004f9a0, *0x1004f978);\n            *0x1004f9a0 = *0x1004f9a0 + *0x1004f978;\n            *0x1004f9a4 = *0x1004f9a4 + bVar16;\n        }\n        iStack56 = iStack56 + -1;\n        uVar5 = uStack52 + *0x1004fa00 * 2;\n        uStack40 = uVar4;\n        if (uStack52 < 5) {\n            uVar6 = uStack72;\n            if ((*0x1004f9f0 - *0x1004f990 == 0x1d2) && (*0x1004f9f4 - *0x1004f994 == *0x1004f9f0 < *0x1004f990)) {\n                uStack72 = *0x1004f978 * 2 + 0x1f;\n                uVar6 = *0x1004f978 + (uStack72 - *0x1004fa04);\n            }\n            if ((*0x1004f994 == 0) && (*0x1004f990 <= *0x1004fa04)) {\n                *0x1004f9c0 = uVar5 & 0xffff;\n                *0x1004f9c4 = 0;\n                uStack72 = *0x1004fa04 * 3 + 0x42429 + *0x1004f9c0 * 3 + uStack72 * 4;\n                uVar5 = (uStack72 - *0x1004fa04) + 0x38;\n            }\n            *0x1004fa00 = (uStack52 - 0x1b) + uVar6 + *0x1004fa00;\n            *0x1004fa04 = (uVar5 & 0xffff) - 0x10;\n            *0x1004f978 = uVar6;\n            uStack52 = uStack52 - 1;\n        }\n        else {\n            uVar6 = *0x1004f978;\n            if ((*0x1004f9e0 == 2) && (*0x1004f9e4 == 0)) {\n                uStack72 = uStack72 * 2 + 0x16163 + *0x1004f976 + uStack64;\n                *0x1004fa04 = (uVar5 & 0xffff) - 0x10;\n            }\n            else {\n                *0x1004f976 = uStack64 + '\\x1f' + uStack72;\n                *0x1004fa04 = (uVar5 & 0xffff) - 0x10;\n                *0x1004f974 = CONCAT11(*0x1004f977, *0x1004f976) << 0x10;\n            }\n        }\n        goto code_r0x10002614;\n    }\n    iVar7 = uStack72 * 2 + uStack68 + uVar11;\n    uVar4 = (uStack68 - param_1) + 0x38;\n    if ((*0x1004f9f0 - *0x1004f990 == 0x1d2) && (*0x1004f9f4 - *0x1004f994 == *0x1004f9f0 < *0x1004f990)) {\n        uVar11 = uVar11 & 0xffffff00 | (*0x1004f976 * '\\x03' - uVar4) + 0x1f;\n    }\n    puVar15 = 0x1004f990;\n    *0x1004f976 = CONCAT11(uVar5 >> 0x18, uVar11);\n    *0x1004fa04 = (iVar7 - (uVar4 & 0xffff)) + 0x1619b;\n    uVar5 = uVar11 & 0xff;\n    while ((*0x1004f974 = *0x1004f976 << 0x10,  uVar5 != *0x1004f990 || (*0x1004f994 != 0))) {\n        uVar4 = *puVar15 * (uVar11 & 0xff);\n        uStack52._0_1_ = *0x1004fa04;\n        uVar1 = uVar4 + -0x1a + uStack52 + uStack68;\n        uVar5 = uVar1;\n        uVar11 = uVar4 & 0xffffff00 | uVar5;\n        *0x1004f976 = CONCAT11(*0x1004f977, uVar1);\n        if (((uVar5 == *0x1004f980) && (*0x1004f984 == 0)) || (puVar15 = puVar15 + 8,  0x1004fa9f < puVar15)) break;\n    }\n    iVar7 = *0x1004fa04 * 2 + -0x108b8;\n    *0x1004f978 = uStack68 * 2 + 0x16163 + (iVar7 + uStack68 * 2 & 0xffff) + iVar7;\n    uVar13 = (*0x1004f978 - iVar7) + 0x38;\n    if (*0x1004fa04 <= uVar13) {\n        bVar16 = CARRY4(*0x1004f9a0, *0x1004f978);\n        *0x1004f9a0 = *0x1004f9a0 + *0x1004f978;\n        *0x1004f9a4 = *0x1004f9a4 + bVar16;\n        uVar13 = (*0x1004fa04 - *0x1004f978) * 2 - 0x14;\n    }\n    *0x1004f974 = CONCAT22(*0x1004f976, uVar13);\n    if (*0x10055c1c == 0x199d) {\n        uVar1 = (uVar11 - *0x10055c2c) * '\\x02' + 0x91;\n        uVar11 = uVar11 & 0xffffff00 | uVar1;\n        *0x1004f974 = CONCAT12(uVar1, uVar13);\n    }\n    uVar17 = fcn.1003cc80();\n    *0x1004fa00 = ((*0x1004f974 >> 0x10 & 0xff) - (*0x1004f974 & 0xffff)) + -8;\n    if (*0x1004fa00 == 1) {\n        *0x1004fa04 = uVar17;\n    // WARNING: Bad instruction - Truncating control flow here\n        halt_baddata();\n    }\n    uVar5 = (uVar11 - (uVar17 >> 0x20)) + 0x38;\n    iVar2 = uVar5;\n    if ((*0x1004f9f0 - *0x1004f990 == 0x1d2) && (*0x1004f9f4 - *0x1004f994 == *0x1004f9f0 < *0x1004f990)) {\n        uVar5 = iVar7 * 2 + 0x1f;\n        iVar2 = uVar5;\n        uVar5 = iVar7 + ((uVar5 & 0xffff) - uVar11);\n    }\n    else {\n        uVar5 = uVar5 & 0xffff;\n    }\n    uVar13 = iVar2 + (uVar17 >> 0x20) + -0x46f;\n    uVar4 = *0x1004f974 & 0xffff0000;\n    *0x1004f974 = uVar4 | uVar13;\n    *0x1004fa04 = uVar5;\n    if ((*0x1004f994 == 0) && (*0x1004f990 <= uVar11)) {\n        *0x1004f9c4 = 0;\n        uVar13 = uVar11 * 3 + uVar13 * 4 + uVar5 * 3 + 0x2429;\n        *0x1004f974 = uVar4 | uVar13;\n        *0x1004fa04 = (uVar13 - uVar11) + 0x38;\n        *0x1004f9c0 = uVar5;\n    }\n    return *0x1004f974 >> 0x10 & 0xff;\n}\n",
        "token_count": 9343
    },
    "100036f0": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl fcn.100036f0(uint32_t arg_8h)\n\n{\n    char cVar1;\n    uint *puVar2;\n    int32_t **ppiVar3;\n    int32_t *piVar4;\n    int32_t **ppiVar5;\n    int32_t **ppiVar6;\n    uint64_t uVar7;\n    int32_t **ppiVar8;\n    uint *puVar9;\n    int32_t iVar10;\n    int32_t **in_ECX;\n    uint32_t uVar11;\n    uint32_t extraout_ECX;\n    uint32_t uVar12;\n    uint *puVar13;\n    int32_t *piVar14;\n    int32_t **ppiVar15;\n    int32_t *in_FS_OFFSET;\n    uint *puVar16;\n    uint var_44h;\n    uint var_3ch;\n    uint var_38h;\n    int32_t **var_34h;\n    int32_t **var_30h;\n    int32_t **var_2ch;\n    uint var_28h;\n    int32_t **var_24h;\n    uint32_t var_20h;\n    uint var_1ch;\n    int32_t **var_18h;\n    int32_t **var_14h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x1003d496;\n    var_ch = *in_FS_OFFSET;\n    *in_FS_OFFSET = &var_ch;\n    var_34h = NULL;\n    var_30h = NULL;\n    var_2ch = NULL;\n    var_24h = in_ECX;\n    if (arg_8h != '\\x02') {\n        if (arg_8h != '\\x01') goto code_r0x10003816;\n        uVar11 = (*in_ECX)[1];\n        if (uVar11 != 0) {\n            if (0xfffffff < uVar11) {\n                uVar11 = fcn.1000df24(\"vector<T> too long\");\n            }\n            fcn.10004950(uVar11);\n        }\n        puVar16 = **in_ECX;\n        puVar2 = *puVar16;\n        do {\n            do {\n                while( true ) {\n                    do {\n                        puVar13 = puVar2;\n                        if (puVar13 == puVar16) goto code_r0x10003816;\n                        fcn.100043e0();\n                        puVar2 = puVar13;\n                    } while (*(puVar13 + 0xd) != '\\0');\n                    puVar2 = puVar13[2];\n                    if (*(puVar2 + 0xd) != '\\0') break;\n                    cVar1 = *(*puVar2 + 0xd);\n                    puVar13 = *puVar2;\n                    while (cVar1 == '\\0') {\n                        cVar1 = *(*puVar13 + 0xd);\n                        puVar2 = puVar13;\n                        puVar13 = *puVar13;\n                    }\n                }\n                puVar2 = puVar13[1];\n            } while (*(puVar2 + 0xd) != '\\0');\n            do {\n                puVar9 = puVar2;\n                puVar2 = puVar9;\n                if (puVar13 != puVar9[2]) break;\n                puVar2 = puVar9[1];\n                puVar13 = puVar9;\n            } while (*(puVar2 + 0xd) == '\\0');\n        } while( true );\n    }\n    uVar11 = (*in_ECX)[1] - **in_ECX >> 4;\n    if (uVar11 == 0) goto code_r0x10003762;\n    if (uVar11 < 0x10000000) goto code_r0x10003759;\ncode_r0x1000374f:\n    fcn.1000df24(\"vector<T> too long\");\n    uVar11 = extraout_ECX;\ncode_r0x10003759:\n    fcn.10004950(uVar11);\ncode_r0x10003762:\n    _var_1ch = _var_1ch & 0xffffff00ffffffff;\n    fcn.1000b230((*in_ECX)[1], &var_34h, var_18h);\ncode_r0x10003816:\n    if (var_34h != var_30h) {\n        do {\n            _var_1ch = 0;\n            cVar1 = *(var_30h + -4);\n            ppiVar3 = var_30h[-2];\n            var_30h[-2] = NULL;\n            *(var_30h + -4) = 0;\n            var_30h[-1] = NULL;\n            fcn.100034a0();\n            var_30h = var_30h + -4;\n            if (cVar1 == '\\x02') {\n                var_20h = var_20h & 0xffffff00;\n                fcn.1000b230(ppiVar3[1], &var_34h, var_20h);\n                piVar4 = ppiVar3[1];\n                for (piVar14 = *ppiVar3; piVar14 != piVar4; piVar14 = piVar14 + 4) {\n                    fcn.100034a0();\n                }\n                ppiVar3[1] = *ppiVar3;\n            }\n            else if (cVar1 == '\\x01') {\n                ppiVar5 = *ppiVar3;\n                ppiVar15 = *ppiVar5;\n                if (ppiVar15 != ppiVar5) {\n                    var_14h = var_2ch;\n                    do {\n                        var_18h = ppiVar15 + 10;\n                        uVar7 = _var_1ch & 0xffffffff;\n                        _var_1ch = uVar7 | ZEXT48(var_18h) << 0x20;\n                        in_ECX = var_34h;\n                        if ((var_18h < var_30h) && (var_34h <= var_18h)) {\n                            var_18h = var_18h - var_34h >> 4;\n                            _var_1ch = uVar7 | ZEXT48(var_18h) << 0x20;\n                            if ((var_30h == var_14h) && (var_14h - var_30h >> 4 == 0)) {\n                                iVar10 = var_30h - var_34h >> 4;\n                                if (iVar10 == 0xfffffff) goto code_r0x1000374f;\n                                uVar11 = iVar10 + 1;\n                                var_14h = var_14h - var_34h >> 4;\n                                uVar12 = 0;\n                                if (var_14h <= 0xfffffff - (var_14h >> 1)) {\n                                    uVar12 = (var_14h >> 1) + var_14h;\n                                }\n                                if (uVar11 <= uVar12) {\n                                    uVar11 = uVar12;\n                                }\n                                fcn.10004950(uVar11);\n                                var_14h = var_2ch;\n                            }\n                            var_18h = var_34h + var_18h * 4;\n                        }\n                        else if ((var_30h == var_14h) && (var_14h - var_30h >> 4 == 0)) {\n                            if (var_30h - var_34h >> 4 == 0xfffffff) goto code_r0x1000374f;\n                            var_14h = var_14h - var_34h >> 4;\n                            fcn.10004950();\n                            var_14h = var_2ch;\n                        }\n                        if (var_30h != NULL) {\n                            *var_30h = *var_18h;\n                            var_30h[2] = var_18h[2];\n                            var_30h[3] = var_18h[3];\n                            _var_1ch = 0;\n                            var_18h[2] = NULL;\n                            *var_18h = 0;\n                            var_18h[3] = NULL;\n                            var_14h = var_2ch;\n                        }\n                        var_30h = var_30h + 4;\n                        if (*(ppiVar15 + 0xd) == '\\0') {\n                            ppiVar6 = ppiVar15[2];\n                            if (*(ppiVar6 + 0xd) == '\\0') {\n                                cVar1 = *(*ppiVar6 + 0xd);\n                                ppiVar15 = ppiVar6;\n                                ppiVar6 = *ppiVar6;\n                                while (cVar1 == '\\0') {\n                                    cVar1 = *(*ppiVar6 + 0xd);\n                                    ppiVar15 = ppiVar6;\n                                    ppiVar6 = *ppiVar6;\n                                }\n                            }\n                            else {\n                                cVar1 = *(ppiVar15[1] + 0xd);\n                                ppiVar8 = ppiVar15[1];\n                                ppiVar6 = ppiVar15;\n                                while ((ppiVar15 = ppiVar8,  cVar1 == '\\0' && (ppiVar6 == ppiVar15[2]))) {\n                                    cVar1 = *(ppiVar15[1] + 0xd);\n                                    ppiVar8 = ppiVar15[1];\n                                    ppiVar6 = ppiVar15;\n                                }\n                            }\n                        }\n                    } while (ppiVar15 != ppiVar5);\n                }\n                var_4h = 0;\n                fcn.10004850((*ppiVar3)[1]);\n                (*ppiVar3)[1] = *ppiVar3;\n                **ppiVar3 = *ppiVar3;\n                var_4h = 0xffffffff;\n                (*ppiVar3)[2] = *ppiVar3;\n                ppiVar3[1] = NULL;\n            }\n            fcn.100034a0();\n            in_ECX = var_24h;\n        } while (var_34h != var_30h);\n    }\n    uVar11 = (arg_8h & 0xff) - 1;\n    if (uVar11 < 8) {\n    // switch table (8 cases) at 0x10003b3c\n        switch(*(uVar11 * 4 + 0x10003b3c)) {\n        case 0x10003aac:\n            piVar4 = *in_ECX;\n            puVar16 = *piVar4;\n            fcn.10007b70(&arg_8h, *puVar16, puVar16);\n            fcn.1000ed48(*piVar4);\n            break;\n        case 0x10003acc:\n            fcn.10005910();\n            puVar16 = 0xc;\n            break;\n        case 0x10003ad7:\n            fcn.10003600();\n            puVar16 = 0x18;\n            break;\n        case 0x10003ae2:\n            fcn.10007740();\n            puVar16 = 0x10;\n            break;\n        case 0x10003af7:\n            goto code_r0x10003af7;\n        }\n        fcn.100011b0(*in_ECX, 1, puVar16);\n    }\ncode_r0x10003af7:\n    ppiVar5 = var_30h;\n    ppiVar3 = var_34h;\n    if (var_34h != NULL) {\n        for (; ppiVar3 != ppiVar5; ppiVar3 = ppiVar3 + 4) {\n            fcn.100034a0();\n        }\n        fcn.10005130(var_34h, var_2ch - var_34h >> 4);\n    }\n    *in_FS_OFFSET = var_ch;\n    return;\n}\n",
        "token_count": 2638
    },
    "10003c60": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.10003c60(uint32_t **param_1, char param_2, uint32_t *param_3)\n\n{\n    uint32_t *puVar1;\n    code *pcVar2;\n    uint32_t *puVar3;\n    \n    if ((param_2 == '\\0') || (param_1[5] < 0x10)) goto code_r0x10003cb5;\n    puVar1 = *param_1;\n    if (param_3 != NULL) {\n        fcn.10011230(param_1, puVar1, param_3);\n    }\n    puVar3 = puVar1;\n    if (param_1[5] + 1U < 0x1000) {\ncode_r0x10003cac:\n        fcn.1000ed48(puVar3);\ncode_r0x10003cb5:\n        param_1[5] = 0xf;\n        param_1[4] = param_3;\n        if (0xf < param_1[5]) {\n            param_1 = *param_1;\n        }\n        *(param_1 + param_3) = 0;\n        return;\n    }\n    if ((puVar1 & 0x1f) == 0) {\n        puVar3 = puVar1[-1];\n        if (puVar1 <= puVar3) goto code_r0x10003cd6;\n        if (3 < puVar1 - puVar3) {\n            if (0x23 < puVar1 - puVar3) goto code_r0x10003ce0;\n            goto code_r0x10003cac;\n        }\n    }\n    else {\n        fcn.10013da4();\ncode_r0x10003cd6:\n        fcn.10013da4();\n    }\n    fcn.10013da4();\ncode_r0x10003ce0:\n    fcn.10013da4();\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 445
    },
    "10004800": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint32_t ** __fastcall fcn.10004800(int32_t **param_1)\n\n{\n    char cVar1;\n    int32_t *piVar2;\n    int32_t **ppiVar3;\n    int32_t **ppiVar4;\n    \n    piVar2 = *param_1;\n    if (*(piVar2 + 0xd) == '\\0') {\n        ppiVar3 = piVar2[2];\n        if (*(ppiVar3 + 0xd) == '\\0') {\n            cVar1 = *(*ppiVar3 + 0xd);\n            ppiVar4 = *ppiVar3;\n            while (cVar1 == '\\0') {\n                cVar1 = *(*ppiVar4 + 0xd);\n                ppiVar3 = ppiVar4;\n                ppiVar4 = *ppiVar4;\n            }\n            *param_1 = ppiVar3;\n            return param_1;\n        }\n        piVar2 = piVar2[1];\n        cVar1 = *(piVar2 + 0xd);\n        while ((cVar1 == '\\0' && (*param_1 == piVar2[2]))) {\n            *param_1 = piVar2;\n            piVar2 = piVar2[1];\n            cVar1 = *(piVar2 + 0xd);\n        }\n        *param_1 = piVar2;\n    }\n    return param_1;\n}\n",
        "token_count": 307
    },
    "10004850": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.10004850(int32_t *param_1)\n\n{\n    char cVar1;\n    int32_t *piVar2;\n    uint32_t uVar3;\n    code *pcVar4;\n    uint32_t uVar5;\n    int32_t **ppiVar6;\n    \n    cVar1 = *(param_1 + 0xd);\n    do {\n        if (cVar1 != '\\0') {\n            return;\n        }\n        fcn.10004850();\n        piVar2 = *param_1;\n        ppiVar6 = param_1 + 4;\n        fcn.100034a0();\n        if (0xf < param_1[9]) {\n            uVar3 = *ppiVar6;\n            uVar5 = uVar3;\n            if ((0xfff < param_1[9] + 1U) &&\n               (((((uVar3 & 0x1f) != 0 || (uVar5 = *(uVar3 - 4),  uVar3 <= uVar5)) || (uVar3 - uVar5 < 4)) ||\n                (0x23 < uVar3 - uVar5)))) {\n                fcn.10013da4();\n                pcVar4 = swi(3);\n                (*pcVar4)();\n                return;\n            }\n            fcn.1000ed48(uVar5);\n        }\n        param_1[9] = 0xf;\n        param_1[8] = 0;\n        if (0xf < param_1[9]) {\n            ppiVar6 = *ppiVar6;\n        }\n        *ppiVar6 = 0;\n        fcn.1000ed48(param_1);\n        cVar1 = *(piVar2 + 0xd);\n        param_1 = piVar2;\n    } while( true );\n}\n",
        "token_count": 400
    },
    "10005560": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint __thiscall fcn.10005560(uint param_1, char *param_2)\n\n{\n    char cVar1;\n    uint uVar2;\n    int32_t iVar3;\n    char *pcVar4;\n    \n    if (*param_2 == '\\0') {\n        iVar3 = 0;\n    }\n    else {\n        pcVar4 = param_2;\n        do {\n            cVar1 = *pcVar4;\n            pcVar4 = pcVar4 + 1;\n        } while (cVar1 != '\\0');\n        iVar3 = pcVar4 - (param_2 + 1);\n    }\n    uVar2 = fcn.10003f90(param_2, iVar3);\n    fcn.10003670(uVar2);\n    return param_1;\n}\n",
        "token_count": 173
    },
    "10005650": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl fcn.10005650(char *arg_8h)\n\n{\n    char cVar1;\n    code *pcVar2;\n    uint arg_8h_00;\n    char *in_ECX;\n    int32_t iVar3;\n    char *pcVar4;\n    char *pcVar5;\n    int32_t *in_FS_OFFSET;\n    uint var_80h;\n    uint var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_44h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_1ch;\n    uint var_18h;\n    uint32_t var_14h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x1003d5c8;\n    var_ch = *in_FS_OFFSET;\n    var_14h = *0x1004f06c ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    if (*in_ECX == '\\0') {\n        *in_ECX = '\\x01';\n        fcn.10004280(1);\n        *(in_ECX + 8) = var_64h;\n        *(in_ECX + 0xc) = var_60h;\n    }\n    if (*in_ECX == '\\x01') {\n        var_18h = 0xf;\n        var_1ch = 0;\n        var_2ch._0_1_ = 0;\n        if (*arg_8h == '\\0') {\n            iVar3 = 0;\n        }\n        else {\n            pcVar4 = arg_8h;\n            do {\n                cVar1 = *pcVar4;\n                pcVar4 = pcVar4 + 1;\n            } while (cVar1 != '\\0');\n            iVar3 = pcVar4 - (arg_8h + 1);\n        }\n        fcn.10003d80(arg_8h);\n        var_4h = 0;\n        fcn.10008df0(&var_64h, &var_2ch);\n        fcn.10003600();\n        *in_FS_OFFSET = var_ch;\n        fcn.1000e9b7(iVar3);\n        return;\n    }\n    pcVar4 = fcn.10005f50();\n    var_30h = 0xf;\n    var_34h = 0;\n    var_44h._0_1_ = 0;\n    if (*pcVar4 == '\\0') {\n        iVar3 = 0;\n    }\n    else {\n        pcVar5 = pcVar4;\n        do {\n            cVar1 = *pcVar5;\n            pcVar5 = pcVar5 + 1;\n        } while (cVar1 != '\\0');\n        iVar3 = pcVar5 - (pcVar4 + 1);\n    }\n    fcn.10003d80(pcVar4, iVar3);\n    var_4h = 1;\n    arg_8h_00 = fcn.10005530(&var_44h);\n    var_4h = CONCAT31(var_4h._1_3_, 2);\n    fcn.10003210(arg_8h_00);\n    fcn.100117a4(&var_80h, 0x1004d784);\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 780
    },
    "10005a70": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t * __cdecl fcn.10005a70(int32_t arg_8h)\n\n{\n    int32_t *piVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    int32_t *arg_8h_00;\n    int32_t *in_FS_OFFSET;\n    uint32_t uVar4;\n    uint uVar5;\n    code *var_28h;\n    uint var_24h;\n    uint var_1ch;\n    uint var_18h;\n    int32_t *var_14h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x1003d668;\n    var_ch = *in_FS_OFFSET;\n    uVar2 = *0x1004f06c ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    uVar5 = 0;\n    fcn.1000d8b6(0);\n    piVar1 = *0x10067834;\n    var_4h = 0;\n    var_14h = *0x10067834;\n    if (*0x10067838 == 0) {\n        uVar4 = *0x10067838;\n        fcn.1000d8b6(0);\n        if (*0x10067838 == 0) {\n            *0x10056158 = *0x10056158 + 1;\n            *0x10067838 = *0x10056158;\n        }\n        fcn.1000d90e(uVar4, uVar5, uVar2);\n    }\n    uVar2 = *0x10067838;\n    iVar3 = *(arg_8h + 4);\n    if (*0x10067838 < *(iVar3 + 0xc)) {\n        arg_8h_00 = *(*(iVar3 + 8) + *0x10067838 * 4);\n        if (arg_8h_00 != NULL) goto code_r0x10005b8a;\n    }\n    else {\n        arg_8h_00 = NULL;\n    }\n    if (*(iVar3 + 0x14) == '\\0') {\ncode_r0x10005b1e:\n        if (arg_8h_00 != NULL) goto code_r0x10005b8a;\n    }\n    else {\n        iVar3 = fcn.1000daf5();\n        if (uVar2 < *(iVar3 + 0xc)) {\n            arg_8h_00 = *(*(iVar3 + 8) + uVar2 * 4);\n            goto code_r0x10005b1e;\n        }\n    }\n    arg_8h_00 = piVar1;\n    if (piVar1 == NULL) {\n        iVar3 = fcn.10005fe0(&var_14h, arg_8h);\n        if (iVar3 == -1) {\n            var_28h = vtable.std::bad_cast.0;\n            _var_24h = 0x1004a224;\n            fcn.100117a4(&var_28h, 0x1004d7d8);\n        }\n        arg_8h_00 = var_14h;\n        *0x10067834 = var_14h;\n        if (*(*var_14h + 4) == method.std::locale::_Locimp.virtual_4) {\n            LOCK();\n            var_14h[1] = var_14h[1] + 1;\n        }\n        else {\n            (**(*var_14h + 4))();\n        }\n        fcn.1000dac7(arg_8h_00);\n    }\ncode_r0x10005b8a:\n    fcn.1000d90e();\n    *in_FS_OFFSET = var_ch;\n    return arg_8h_00;\n}\n",
        "token_count": 869
    },
    "10005bb0": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t * __cdecl fcn.10005bb0(int32_t arg_8h)\n\n{\n    int32_t *piVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    int32_t *arg_8h_00;\n    int32_t *in_FS_OFFSET;\n    uint32_t uVar4;\n    uint uVar5;\n    code *var_28h;\n    uint var_24h;\n    uint var_1ch;\n    uint var_18h;\n    int32_t *var_14h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x1003d668;\n    var_ch = *in_FS_OFFSET;\n    uVar2 = *0x1004f06c ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    uVar5 = 0;\n    fcn.1000d8b6(0);\n    piVar1 = *0x10067830;\n    var_4h = 0;\n    var_14h = *0x10067830;\n    if (*0x10056174 == 0) {\n        uVar4 = *0x10056174;\n        fcn.1000d8b6(0);\n        if (*0x10056174 == 0) {\n            *0x10056158 = *0x10056158 + 1;\n            *0x10056174 = *0x10056158;\n        }\n        fcn.1000d90e(uVar4, uVar5, uVar2);\n    }\n    uVar2 = *0x10056174;\n    iVar3 = *(arg_8h + 4);\n    if (*0x10056174 < *(iVar3 + 0xc)) {\n        arg_8h_00 = *(*(iVar3 + 8) + *0x10056174 * 4);\n        if (arg_8h_00 != NULL) goto code_r0x10005cca;\n    }\n    else {\n        arg_8h_00 = NULL;\n    }\n    if (*(iVar3 + 0x14) == '\\0') {\ncode_r0x10005c5e:\n        if (arg_8h_00 != NULL) goto code_r0x10005cca;\n    }\n    else {\n        iVar3 = fcn.1000daf5();\n        if (uVar2 < *(iVar3 + 0xc)) {\n            arg_8h_00 = *(*(iVar3 + 8) + uVar2 * 4);\n            goto code_r0x10005c5e;\n        }\n    }\n    arg_8h_00 = piVar1;\n    if (piVar1 == NULL) {\n        iVar3 = fcn.10001670(&var_14h, arg_8h);\n        if (iVar3 == -1) {\n            var_28h = vtable.std::bad_cast.0;\n            _var_24h = 0x1004a224;\n            fcn.100117a4(&var_28h, 0x1004d7d8);\n        }\n        arg_8h_00 = var_14h;\n        *0x10067830 = var_14h;\n        if (*(*var_14h + 4) == method.std::locale::_Locimp.virtual_4) {\n            LOCK();\n            var_14h[1] = var_14h[1] + 1;\n        }\n        else {\n            (**(*var_14h + 4))();\n        }\n        fcn.1000dac7(arg_8h_00);\n    }\ncode_r0x10005cca:\n    fcn.1000d90e();\n    *in_FS_OFFSET = var_ch;\n    return arg_8h_00;\n}\n",
        "token_count": 862
    },
    "10005fe0": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl fcn.10005fe0(int32_t *arg_8h, uint arg_ch)\n\n{\n    uint32_t uVar1;\n    code **ppcVar2;\n    uint *arg_8h_00;\n    uint unaff_ESI;\n    int32_t *in_FS_OFFSET;\n    ulong uVar3;\n    uint *arg_8h_01;\n    uint var_64h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint32_t var_10h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x1003d6f8;\n    var_ch = *in_FS_OFFSET;\n    uVar1 = *0x1004f06c ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    var_10h = uVar1;\n    if ((arg_8h != NULL) && (*arg_8h == 0)) {\n        ppcVar2 = fcn.1000e9c8(0x10);\n        arg_8h_01 = &var_28h;\n        var_4h = 0;\n        arg_8h_00 = fcn.100014c0(arg_8h_01);\n        var_4h = CONCAT31(var_4h._1_3_, 1);\n        if (0xf < arg_8h_00[5]) {\n            arg_8h_00 = *arg_8h_00;\n        }\n        fcn.10001230(arg_8h_00);\n        ppcVar2[1] = NULL;\n        *ppcVar2 = vtable.std::collate_wchar_t_.0;\n        uVar3 = fcn.1000e094(arg_8h_00, arg_8h_01, uVar1);\n        ppcVar2[2] = uVar3;\n        ppcVar2[3] = uVar3 >> 0x20;\n        *arg_8h = ppcVar2;\n        fcn.10001310();\n        fcn.10003600();\n    }\n    *in_FS_OFFSET = var_ch;\n    fcn.1000e9b7(unaff_ESI);\n    return;\n}\n",
        "token_count": 528
    },
    "10007b70": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint32_t ** __cdecl fcn.10007b70(int32_t **arg_8h, int32_t **arg_ch, int32_t **arg_10h)\n\n{\n    char cVar1;\n    int32_t **ppiVar2;\n    int32_t **ppiVar3;\n    uint32_t uVar4;\n    int32_t **in_ECX;\n    int32_t *in_FS_OFFSET;\n    uint var_10h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x1003d776;\n    var_ch = *in_FS_OFFSET;\n    uVar4 = *0x1004f06c ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    ppiVar2 = *in_ECX;\n    if ((arg_ch == *ppiVar2) && (arg_10h == ppiVar2)) {\n        var_4h = 0;\n        fcn.10004850(ppiVar2[1], uVar4);\n        (*in_ECX)[1] = *in_ECX;\n        **in_ECX = *in_ECX;\n        (*in_ECX)[2] = *in_ECX;\n        in_ECX[1] = NULL;\n        *arg_8h = **in_ECX;\n        *in_FS_OFFSET = var_ch;\n        return arg_8h;\n    }\n    if (arg_ch != arg_10h) {\n        do {\n            if (*(arg_ch + 0xd) == '\\0') {\n                ppiVar2 = arg_ch[2];\n                if (*(ppiVar2 + 0xd) == '\\0') {\n                    cVar1 = *(*ppiVar2 + 0xd);\n                    arg_ch = ppiVar2;\n                    ppiVar2 = *ppiVar2;\n                    while (cVar1 == '\\0') {\n                        cVar1 = *(*ppiVar2 + 0xd);\n                        arg_ch = ppiVar2;\n                        ppiVar2 = *ppiVar2;\n                    }\n                }\n                else {\n                    cVar1 = *(arg_ch[1] + 0xd);\n                    ppiVar3 = arg_ch[1];\n                    ppiVar2 = arg_ch;\n                    while ((arg_ch = ppiVar3,  cVar1 == '\\0' && (ppiVar2 == arg_ch[2]))) {\n                        cVar1 = *(arg_ch[1] + 0xd);\n                        ppiVar3 = arg_ch[1];\n                        ppiVar2 = arg_ch;\n                    }\n                }\n            }\n            fcn.10007da0();\n        } while (arg_ch != arg_10h);\n    }\n    *arg_8h = arg_ch;\n    *in_FS_OFFSET = var_ch;\n    return arg_8h;\n}\n",
        "token_count": 622
    },
    "10007da0": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.10007da0(int32_t *param_1, int32_t **param_2, int32_t **param_3)\n\n{\n    uchar uVar1;\n    char cVar2;\n    int32_t iVar3;\n    int32_t **ppiVar4;\n    uint32_t uVar5;\n    code *pcVar6;\n    int32_t **ppiVar7;\n    int32_t **ppiVar8;\n    int32_t **ppiVar9;\n    uint32_t uVar10;\n    int32_t **ppiVar11;\n    int32_t **unaff_EBX;\n    int32_t **ppiVar12;\n    \n    ppiVar7 = param_3;\n    if (*(param_3 + 0xd) == '\\0') {\n        ppiVar9 = param_3[2];\n        if (*(ppiVar9 + 0xd) == '\\0') {\n            cVar2 = *(*ppiVar9 + 0xd);\n            param_3 = ppiVar9;\n            ppiVar9 = *ppiVar9;\n            while (cVar2 == '\\0') {\n                cVar2 = *(*ppiVar9 + 0xd);\n                param_3 = ppiVar9;\n                ppiVar9 = *ppiVar9;\n            }\n        }\n        else {\n            cVar2 = *(param_3[1] + 0xd);\n            ppiVar12 = param_3[1];\n            ppiVar9 = param_3;\n            while ((param_3 = ppiVar12,  cVar2 == '\\0' && (ppiVar9 == param_3[2]))) {\n                cVar2 = *(param_3[1] + 0xd);\n                ppiVar12 = param_3[1];\n                ppiVar9 = param_3;\n            }\n        }\n    }\n    ppiVar9 = *ppiVar7;\n    if (*(ppiVar9 + 0xd) == '\\0') {\n        ppiVar12 = ppiVar9;\n        if ((*(ppiVar7[2] + 0xd) != '\\0') || (ppiVar12 = param_3[2],  param_3 == ppiVar7)) goto code_r0x10007e20;\n        ppiVar9[1] = param_3;\n        *param_3 = *ppiVar7;\n        ppiVar9 = param_3;\n        if (param_3 != ppiVar7[2]) {\n            ppiVar9 = param_3[1];\n            if (*(ppiVar12 + 0xd) == '\\0') {\n                ppiVar12[1] = ppiVar9;\n            }\n            *ppiVar9 = ppiVar12;\n            param_3[2] = ppiVar7[2];\n            ppiVar7[2][1] = param_3;\n        }\n        if (*(*param_1 + 4) == ppiVar7) {\n            *(*param_1 + 4) = param_3;\n        }\n        else {\n            ppiVar8 = ppiVar7[1];\n            if (*ppiVar8 == ppiVar7) {\n                *ppiVar8 = param_3;\n            }\n            else {\n                ppiVar8[2] = param_3;\n            }\n        }\n        param_3[1] = ppiVar7[1];\n        uVar1 = *(param_3 + 3);\n        *(param_3 + 3) = *(ppiVar7 + 3);\n        *(ppiVar7 + 3) = uVar1;\n    }\n    else {\n        ppiVar12 = ppiVar7[2];\ncode_r0x10007e20:\n        ppiVar9 = ppiVar7[1];\n        if (*(ppiVar12 + 0xd) == '\\0') {\n            ppiVar12[1] = ppiVar9;\n        }\n        if (*(*param_1 + 4) == ppiVar7) {\n            *(*param_1 + 4) = ppiVar12;\n        }\n        else if (*ppiVar9 == ppiVar7) {\n            *ppiVar9 = ppiVar12;\n        }\n        else {\n            ppiVar9[2] = ppiVar12;\n        }\n        if (**param_1 == ppiVar7) {\n            ppiVar8 = ppiVar9;\n            if (*(ppiVar12 + 0xd) == '\\0') {\n                cVar2 = *(*ppiVar12 + 0xd);\n                ppiVar11 = *ppiVar12;\n                ppiVar8 = ppiVar12;\n                while (ppiVar4 = ppiVar11,  cVar2 == '\\0') {\n                    ppiVar11 = *ppiVar4;\n                    cVar2 = *(ppiVar11 + 0xd);\n                    ppiVar8 = ppiVar4;\n                }\n            }\n            **param_1 = ppiVar8;\n        }\n        iVar3 = *param_1;\n        if (*(iVar3 + 8) == ppiVar7) {\n            if (*(ppiVar12 + 0xd) == '\\0') {\n                cVar2 = *(ppiVar12[2] + 0xd);\n                ppiVar8 = ppiVar12[2];\n                ppiVar11 = ppiVar12;\n                while (ppiVar4 = ppiVar8,  cVar2 == '\\0') {\n                    ppiVar8 = ppiVar4[2];\n                    cVar2 = *(ppiVar8 + 0xd);\n                    ppiVar11 = ppiVar4;\n                }\n                *(iVar3 + 8) = ppiVar11;\n            }\n            else {\n                *(iVar3 + 8) = ppiVar9;\n            }\n        }\n    }\n    if (*(ppiVar7 + 3) == '\\x01') {\n        if (ppiVar12 != *(*param_1 + 4)) {\n            do {\n                ppiVar8 = ppiVar9;\n                if (*(ppiVar12 + 3) != '\\x01') break;\n                ppiVar9 = *ppiVar8;\n                ppiVar11 = ppiVar8;\n                if (ppiVar12 == ppiVar9) {\n                    ppiVar9 = ppiVar8[2];\n                    if (*(ppiVar9 + 3) == '\\0') {\n                        *(ppiVar9 + 3) = 1;\n                        ppiVar9 = ppiVar8[2];\n                        *(ppiVar8 + 3) = 0;\n                        ppiVar8[2] = *ppiVar9;\n                        if (*(*ppiVar9 + 0xd) == '\\0') {\n                            (*ppiVar9)[1] = ppiVar8;\n                        }\n                        ppiVar9[1] = ppiVar8[1];\n                        if (ppiVar8 == *(*param_1 + 4)) {\n                            *(*param_1 + 4) = ppiVar9;\n                        }\n                        else {\n                            ppiVar4 = ppiVar8[1];\n                            if (ppiVar8 == *ppiVar4) {\n                                *ppiVar4 = ppiVar9;\n                            }\n                            else {\n                                ppiVar4[2] = ppiVar9;\n                            }\n                        }\n                        *ppiVar9 = ppiVar8;\n                        ppiVar8[1] = ppiVar9;\n                        ppiVar9 = ppiVar8[2];\n                    }\n                    if (*(ppiVar9 + 0xd) == '\\0') {\n                        if ((*(*ppiVar9 + 3) != '\\x01') || (*(ppiVar9[2] + 3) != '\\x01')) {\n                            if (*(ppiVar9[2] + 3) == '\\x01') {\n                                *(*ppiVar9 + 3) = 1;\n                                *(ppiVar9 + 3) = 0;\n                                fcn.10008100();\n                                ppiVar9 = ppiVar8[2];\n                            }\n                            *(ppiVar9 + 3) = *(ppiVar8 + 3);\n                            *(ppiVar8 + 3) = 1;\n                            *(ppiVar9[2] + 3) = 1;\n                            fcn.10008160(ppiVar8);\n                            break;\n                        }\ncode_r0x10008006:\n                        *(ppiVar9 + 3) = 0;\n                    }\n                }\n                else {\n                    if (*(ppiVar9 + 3) == '\\0') {\n                        *(ppiVar9 + 3) = 1;\n                        *(ppiVar8 + 3) = 0;\n                        ppiVar11 = unaff_EBX;\n                        fcn.10008100();\n                        ppiVar9 = *ppiVar8;\n                        unaff_EBX = ppiVar11;\n                    }\n                    if (*(ppiVar9 + 0xd) == '\\0') {\n                        if ((*(ppiVar9[2] + 3) == '\\x01') && (*(*ppiVar9 + 3) == '\\x01')) goto code_r0x10008006;\n                        if (*(*ppiVar9 + 3) == '\\x01') {\n                            *(ppiVar9[2] + 3) = 1;\n                            *(ppiVar9 + 3) = 0;\n                            fcn.10008160();\n                            ppiVar9 = *ppiVar8;\n                        }\n                        *(ppiVar9 + 3) = *(ppiVar8 + 3);\n                        *(ppiVar8 + 3) = 1;\n                        *(*ppiVar9 + 3) = 1;\n                        fcn.10008100(ppiVar8);\n                        break;\n                    }\n                }\n                ppiVar9 = ppiVar8[1];\n                ppiVar12 = ppiVar8;\n            } while (ppiVar11 != *(*param_1 + 4));\n        }\n        *(ppiVar12 + 3) = 1;\n    }\n    ppiVar9 = ppiVar7 + 4;\n    fcn.100034a0();\n    if (ppiVar7[9] < 0x10) goto code_r0x100080a2;\n    uVar5 = *ppiVar9;\n    uVar10 = uVar5;\n    if (ppiVar7[9] + 1U < 0x1000) {\ncode_r0x10008099:\n        fcn.1000ed48(uVar10);\ncode_r0x100080a2:\n        ppiVar7[9] = 0xf;\n        ppiVar7[8] = NULL;\n        if (0xf < ppiVar7[9]) {\n            ppiVar9 = *ppiVar9;\n        }\n        *ppiVar9 = 0;\n        fcn.1000ed48(ppiVar7);\n        if (param_1[1] != 0) {\n            param_1[1] = param_1[1] + -1;\n        }\n        *param_2 = param_3;\n        return;\n    }\n    if ((uVar5 & 0x1f) == 0) {\n        uVar10 = *(uVar5 - 4);\n        if (uVar5 <= uVar10) goto code_r0x100080e7;\n        if (3 < uVar5 - uVar10) {\n            if (0x23 < uVar5 - uVar10) goto code_r0x100080f1;\n            goto code_r0x10008099;\n        }\n    }\n    else {\n        fcn.10013da4();\ncode_r0x100080e7:\n        fcn.10013da4();\n    }\n    fcn.10013da4();\ncode_r0x100080f1:\n    fcn.10013da4();\n    pcVar6 = swi(3);\n    (*pcVar6)();\n    return;\n}\n",
        "token_count": 2592
    },
    "10008100": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.10008100(int32_t *param_1, int32_t *param_2)\n\n{\n    int32_t iVar1;\n    int32_t *piVar2;\n    \n    iVar1 = *param_2;\n    *param_2 = *(iVar1 + 8);\n    if (*(*(iVar1 + 8) + 0xd) == '\\0') {\n        *(*(iVar1 + 8) + 4) = param_2;\n    }\n    *(iVar1 + 4) = param_2[1];\n    if (param_2 == *(*param_1 + 4)) {\n        *(*param_1 + 4) = iVar1;\n        *(iVar1 + 8) = param_2;\n        param_2[1] = iVar1;\n        return;\n    }\n    piVar2 = param_2[1];\n    if (param_2 == piVar2[2]) {\n        piVar2[2] = iVar1;\n        *(iVar1 + 8) = param_2;\n        param_2[1] = iVar1;\n        return;\n    }\n    *piVar2 = iVar1;\n    *(iVar1 + 8) = param_2;\n    param_2[1] = iVar1;\n    return;\n}\n",
        "token_count": 282
    },
    "10008160": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.10008160(int32_t *param_1, int32_t *param_2)\n\n{\n    int32_t **ppiVar1;\n    int32_t **ppiVar2;\n    \n    ppiVar1 = param_2[2];\n    param_2[2] = *ppiVar1;\n    if (*(*ppiVar1 + 0xd) == '\\0') {\n        *(*ppiVar1 + 4) = param_2;\n    }\n    ppiVar1[1] = param_2[1];\n    if (param_2 == *(*param_1 + 4)) {\n        *(*param_1 + 4) = ppiVar1;\n        *ppiVar1 = param_2;\n        param_2[1] = ppiVar1;\n        return;\n    }\n    ppiVar2 = param_2[1];\n    if (param_2 == *ppiVar2) {\n        *ppiVar2 = ppiVar1;\n        *ppiVar1 = param_2;\n        param_2[1] = ppiVar1;\n        return;\n    }\n    ppiVar2[2] = ppiVar1;\n    *ppiVar1 = param_2;\n    param_2[1] = ppiVar1;\n    return;\n}\n",
        "token_count": 284
    },
    "10009170": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint32_t ** __fastcall fcn.10009170(int32_t **param_1)\n\n{\n    char cVar1;\n    int32_t **ppiVar2;\n    int32_t *piVar3;\n    int32_t *piVar4;\n    \n    ppiVar2 = *param_1;\n    if (*(ppiVar2 + 0xd) != '\\0') {\n        *param_1 = ppiVar2[2];\n        return param_1;\n    }\n    piVar4 = *ppiVar2;\n    if (*(piVar4 + 0xd) == '\\0') {\n        piVar3 = piVar4[2];\n        if (*(piVar4[2] + 0xd) == '\\0') {\n            do {\n                piVar4 = piVar3;\n                piVar3 = piVar4[2];\n            } while (*(piVar3 + 0xd) == '\\0');\n            *param_1 = piVar4;\n            return param_1;\n        }\n    }\n    else {\n        piVar4 = ppiVar2[1];\n        cVar1 = *(piVar4 + 0xd);\n        while ((cVar1 == '\\0' && (*param_1 == *piVar4))) {\n            *param_1 = piVar4;\n            piVar4 = piVar4[1];\n            cVar1 = *(piVar4 + 0xd);\n        }\n        if (*(*param_1 + 0xd) != '\\0') {\n            return param_1;\n        }\n    }\n    *param_1 = piVar4;\n    return param_1;\n}\n",
        "token_count": 351
    },
    "10009290": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t __cdecl fcn.10009290(int32_t **arg_8h)\n\n{\n    int32_t *piVar1;\n    int32_t *piVar2;\n    char cVar3;\n    uint32_t uVar4;\n    int32_t **in_ECX;\n    uint32_t extraout_ECX;\n    uint32_t extraout_ECX_00;\n    uint32_t extraout_ECX_01;\n    uint32_t extraout_ECX_02;\n    uint32_t extraout_ECX_03;\n    uint32_t extraout_ECX_04;\n    uint32_t extraout_ECX_05;\n    uint32_t extraout_ECX_06;\n    uint32_t extraout_ECX_07;\n    uint32_t extraout_ECX_08;\n    uint32_t extraout_ECX_09;\n    uint32_t extraout_ECX_10;\n    uint32_t extraout_ECX_11;\n    uint32_t extraout_ECX_12;\n    uint32_t extraout_ECX_13;\n    int32_t **ppiVar5;\n    uint32_t uVar6;\n    int32_t **ppiVar7;\n    int32_t *in_FS_OFFSET;\n    int32_t *var_54h;\n    uint32_t var_50h;\n    int32_t var_48h;\n    int32_t *var_44h;\n    uint32_t var_40h;\n    int32_t var_38h;\n    int32_t **var_34h;\n    uint32_t var_30h;\n    int32_t var_28h;\n    int32_t *var_24h;\n    uint32_t var_20h;\n    int32_t var_18h;\n    int32_t **var_14h;\n    int32_t **var_10h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x1003d840;\n    var_ch = *in_FS_OFFSET;\n    uVar4 = *0x1004f06c ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    var_34h = *in_ECX;\n    ppiVar5 = in_ECX + 1;\n    var_10h = in_ECX;\n    fcn.100091d0(ppiVar5, uVar4);\n    var_24h = in_ECX[4];\n    var_14h = in_ECX + 5;\n    var_4h = 0;\n    uVar4 = fcn.1000a5a0(var_14h);\n    var_4h = 1;\n    if (arg_8h != NULL) {\n        do {\n            *in_ECX = var_34h;\n            in_ECX[4] = var_24h;\n            fcn.10009080(&var_30h);\n            fcn.10008f10(&var_20h);\n            uVar4 = fcn.100081b0(arg_8h[3]);\n            if (uVar4 != '\\0') goto code_r0x10009354;\n            arg_8h = arg_8h[6];\n        } while (arg_8h != NULL);\n    }\n    ppiVar5 = ppiVar5 & 0xffffff00;\n    do {\n        if (var_20h == 0) {\ncode_r0x10009538:\n            if (var_30h != 0) {\n                uVar4 = var_28h - var_30h >> 2;\n                if (0x3fffffff < uVar4) {\n                    uVar4 = fcn.10013da4();\n                    var_30h = extraout_ECX_10;\n                }\n                if (0xfff < uVar4 << 2) {\n                    uVar4 = var_30h;\n                    if ((var_30h & 0x1f) != 0) {\n                        fcn.10013da4();\n                        uVar4 = extraout_ECX_11;\n                    }\n                    var_30h = *(uVar4 - 4);\n                    if (uVar4 <= var_30h) {\n                        var_30h = fcn.10013da4();\n                        uVar4 = extraout_ECX_12;\n                    }\n                    uVar4 = uVar4 - var_30h;\n                    if (uVar4 < 4) {\n                        var_30h = fcn.10013da4();\n                        uVar4 = extraout_ECX_13;\n                    }\n                    if (0x23 < uVar4) {\n                        var_30h = fcn.10013da4();\n                    }\n                }\n                uVar4 = fcn.1000ed48(var_30h);\n            }\n            *in_FS_OFFSET = var_ch;\n            return uVar4 & 0xffffff00 | ppiVar5 & 0xff;\n        }\n        uVar4 = var_18h - var_20h >> 3;\n        if (uVar4 < 0x20000000) {\n            if (0xfff < uVar4 << 3) {\n                uVar4 = var_20h;\n                if ((var_20h & 0x1f) != 0) {\n                    fcn.10013da4();\n                    uVar4 = extraout_ECX_07;\n                }\n                var_20h = *(uVar4 - 4);\n                if (uVar4 <= var_20h) {\n                    var_20h = fcn.10013da4();\n                    uVar4 = extraout_ECX_08;\n                }\n                uVar4 = uVar4 - var_20h;\n                if (uVar4 < 4) {\n                    var_20h = fcn.10013da4();\n                    uVar4 = extraout_ECX_09;\n                }\n                if (0x23 < uVar4) {\n                    var_20h = fcn.10013da4();\n                }\n            }\n            uVar4 = fcn.1000ed48(var_20h);\n            goto code_r0x10009538;\n        }\n        uVar4 = fcn.10013da4();\ncode_r0x10009354:\n        if (*(in_ECX + 0x1b) == '\\0') {\n            ppiVar5 = CONCAT31(ppiVar5 >> 8, 1);\n        }\n        else {\n            var_54h = *in_ECX;\n            fcn.100091d0(ppiVar5);\n            var_44h = ppiVar5[3];\n            ppiVar5 = in_ECX + 5;\n            var_4h._0_1_ = 2;\n            fcn.1000a5a0();\n            var_4h = CONCAT31(var_4h._1_3_, 3);\n            piVar1 = arg_8h[6];\n            uVar4 = *in_ECX - var_34h >> 1;\n            in_ECX = var_34h;\n            ppiVar7 = var_10h;\n            for (; piVar1 != NULL; piVar1 = piVar1[6]) {\n                *ppiVar7 = in_ECX;\n                ppiVar7[4] = var_24h;\n                fcn.10009080(&var_30h, ppiVar5);\n                fcn.10008f10(&var_20h);\n                ppiVar5 = piVar1[3];\n                cVar3 = fcn.100081b0(ppiVar5);\n                in_ECX = var_34h;\n                arg_8h = uVar4;\n                if (cVar3 != '\\0') {\n                    piVar2 = *ppiVar7;\n                    uVar6 = piVar2 - var_34h >> 1;\n                    ppiVar7 = var_10h;\n                    if (uVar4 < uVar6) {\n                        var_44h = var_10h[4];\n                        fcn.10009080(var_10h + 1);\n                        fcn.10008f10(var_14h);\n                        ppiVar7 = var_10h;\n                        arg_8h = uVar6;\n                        var_54h = piVar2;\n                    }\n                }\n                uVar4 = arg_8h;\n                arg_8h = ppiVar7;\n            }\n            *var_10h = var_54h;\n            var_10h[4] = var_44h;\n            fcn.10009080(&var_50h, ppiVar5);\n            uVar4 = fcn.10008f10(&var_40h);\n            ppiVar5 = 0x1;\n            if (var_40h != 0) {\n                uVar6 = var_38h - var_40h >> 3;\n                uVar4 = var_40h;\n                if (0x1fffffff < uVar6) {\n                    uVar6 = fcn.10013da4();\n                    uVar4 = extraout_ECX;\n                }\n                if (0xfff < uVar6 << 3) {\n                    uVar6 = uVar4;\n                    if ((uVar4 & 0x1f) != 0) {\n                        fcn.10013da4();\n                        uVar6 = extraout_ECX_00;\n                    }\n                    uVar4 = *(uVar6 - 4);\n                    if (uVar6 <= uVar4) {\n                        uVar4 = fcn.10013da4();\n                        uVar6 = extraout_ECX_01;\n                    }\n                    uVar6 = uVar6 - uVar4;\n                    if (uVar6 < 4) {\n                        uVar4 = fcn.10013da4();\n                        uVar6 = extraout_ECX_02;\n                    }\n                    if (0x23 < uVar6) {\n                        uVar4 = fcn.10013da4();\n                    }\n                }\n                uVar4 = fcn.1000ed48(uVar4);\n            }\n            if (var_50h != 0) {\n                uVar6 = var_48h - var_50h >> 2;\n                uVar4 = var_50h;\n                if (0x3fffffff < uVar6) {\n                    uVar6 = fcn.10013da4();\n                    uVar4 = extraout_ECX_03;\n                }\n                if (0xfff < uVar6 << 2) {\n                    uVar6 = uVar4;\n                    if ((uVar4 & 0x1f) != 0) {\n                        fcn.10013da4();\n                        uVar6 = extraout_ECX_04;\n                    }\n                    uVar4 = *(uVar6 - 4);\n                    if (uVar6 <= uVar4) {\n                        uVar4 = fcn.10013da4();\n                        uVar6 = extraout_ECX_05;\n                    }\n                    uVar6 = uVar6 - uVar4;\n                    if (uVar6 < 4) {\n                        uVar4 = fcn.10013da4();\n                        uVar6 = extraout_ECX_06;\n                    }\n                    if (0x23 < uVar6) {\n                        uVar4 = fcn.10013da4();\n                    }\n                }\n                uVar4 = fcn.1000ed48(uVar4);\n            }\n        }\n    } while( true );\n}\n",
        "token_count": 2516
    },
    "100095b0": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.100095b0(int32_t arg_8h, uint arg_ch, int32_t arg_10h)\n\n{\n    uint8_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    int32_t *in_ECX;\n    char cVar4;\n    int32_t *in_FS_OFFSET;\n    uint arg_8h_00;\n    int32_t var_3ch;\n    uint var_38h;\n    int32_t var_2ch;\n    uint var_28h;\n    int32_t var_1ch;\n    int32_t *var_18h;\n    int32_t *var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x1003d870;\n    var_ch = *in_FS_OFFSET;\n    uVar2 = *0x1004f06c ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    if (*(arg_8h + 0x24) == 1) {\n        uVar2 = fcn.1000a720(arg_8h, arg_ch);\n        *in_FS_OFFSET = var_ch;\n        return uVar2;\n    }\n    var_3ch = *in_ECX;\n    fcn.100091d0(in_ECX + 1, uVar2);\n    var_2ch = in_ECX[4];\n    var_4h = 0;\n    fcn.1000a5a0(in_ECX + 5);\n    var_4h = 1;\n    var_14h = in_ECX[0x10] + *(arg_8h + 0x20) * 8;\n    var_1ch = *var_14h;\n    var_18h = var_14h[1];\n    var_10h = *in_ECX;\n    if ((arg_10h == 0) || (*var_18h != var_10h)) {\n        uVar2 = 0x100;\n    }\n    else {\n        uVar2 = 0;\n    }\n    if ((*(arg_8h + 0x18) < 0) || (arg_10h < *(arg_8h + 0x18))) {\n        cVar4 = uVar2 >> 8;\n        if (arg_10h < *(arg_8h + 0x14)) {\n            if (cVar4 == '\\0') goto code_r0x10009714;\n            *var_14h = arg_10h + 1;\n            var_14h[1] = &var_10h;\n            arg_8h_00 = *(arg_8h + 0xc);\n            goto code_r0x1000971a;\n        }\n        if (arg_ch != '\\0') {\n            if (cVar4 == '\\0') {\n                if (1 < arg_10h) goto code_r0x10009727;\n            }\n            else {\n                *var_14h = arg_10h + 1;\n                var_14h[1] = &var_10h;\n                uVar1 = fcn.100081b0(*(arg_8h + 0xc));\n                uVar2 = uVar1;\n                if (uVar1 != 0) goto code_r0x1000974a;\n            }\n            *var_14h = var_1ch;\n            var_14h[1] = var_18h;\n            fcn.10008ed0();\n            goto code_r0x10009714;\n        }\n        arg_8h_00 = *(*(arg_8h + 0x1c) + 0xc);\n        uVar1 = fcn.100081b0(arg_8h_00);\n        uVar2 = uVar1;\n        if (uVar1 != 0) goto code_r0x1000974a;\n        if (cVar4 != '\\0') {\n            fcn.10008ed0(&var_3ch);\n            *var_14h = arg_10h + 1;\n            var_14h[1] = &var_10h;\n            goto code_r0x1000971a;\n        }\n    }\n    else {\ncode_r0x10009714:\n        arg_8h_00 = *(*(arg_8h + 0x1c) + 0xc);\ncode_r0x1000971a:\n        uVar1 = fcn.100081b0(arg_8h_00);\n        uVar2 = uVar1;\n        if (uVar1 != 0) goto code_r0x1000974a;\n    }\ncode_r0x10009727:\n    *in_ECX = var_3ch;\n    in_ECX[4] = var_2ch;\n    fcn.10009080(&var_38h);\n    fcn.10008f10(&var_28h);\ncode_r0x1000974a:\n    *var_14h = var_1ch;\n    var_14h[1] = var_18h;\n    fcn.10006130();\n    uVar3 = fcn.10006660();\n    *in_FS_OFFSET = var_ch;\n    return uVar3 & 0xffffff00 | uVar2 & 0xff;\n}\n",
        "token_count": 1198
    },
    "10009ab0": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint32_t __fastcall fcn.10009ab0(int16_t **param_1)\n\n{\n    code *pcVar1;\n    char cVar2;\n    int16_t *in_EAX;\n    code **ppcVar3;\n    int16_t *piVar4;\n    uint32_t uVar5;\n    uint8_t uVar6;\n    uint8_t uVar7;\n    \n    uVar7 = 0;\n    uVar6 = 0;\n    piVar4 = param_1[0x13];\n    while( true ) {\n        if ((piVar4 == 0xffffffff) || (in_EAX = param_1[0x13],  uVar6 = uVar7,  in_EAX == 0x7c)) goto code_r0x10009d0c;\n        if (in_EAX == 0x29) break;\ncode_r0x10009ae9:\n        if (in_EAX == 0x2e) {\n            ppcVar3 = fcn.1000e9c8(0x14);\n            ppcVar3[4] = NULL;\n            *ppcVar3 = vtable.std::_Node_base.0;\n            ppcVar3[1] = 0x5;\n            ppcVar3[2] = NULL;\n            ppcVar3[3] = NULL;\n            ppcVar3[4] = param_1[10];\n            if (*(param_1[10] + 6) != NULL) {\n                ppcVar3[3] = *(param_1[10] + 6);\n                *(*(param_1[10] + 6) + 0x10) = ppcVar3;\n            }\n            *(param_1[10] + 6) = ppcVar3;\n            param_1[10] = ppcVar3;\n            piVar4 = *param_1;\n            if (piVar4 != param_1[2]) {\n                if (((*piVar4 == 0x5c) && (piVar4 = piVar4 + 1,  piVar4 != param_1[2])) &&\n                   ((((param_1[0x14] & 8) == 0 && ((*piVar4 == 0x28 || (*piVar4 == 0x29)))) ||\n                    (((param_1[0x14] & 0x10) == 0 && ((*piVar4 == 0x7b || (*piVar4 == 0x7d)))))))) {\n                    *param_1 = piVar4;\n                }\n                *param_1 = *param_1 + 1;\n            }\n            fcn.10008600();\ncode_r0x10009cf9:\n            in_EAX = fcn.1000ad10();\n        }\n        else if (in_EAX == 0x5c) {\n            piVar4 = *param_1;\n            if (piVar4 != param_1[2]) {\n                if (((*piVar4 == 0x5c) && (piVar4 = piVar4 + 1,  piVar4 != param_1[2])) &&\n                   ((((param_1[0x14] & 8) == 0 && ((*piVar4 == 0x28 || (*piVar4 == 0x29)))) ||\n                    (((param_1[0x14] & 0x10) == 0 && ((*piVar4 == 0x7b || (*piVar4 == 0x7d)))))))) {\n                    *param_1 = piVar4;\n                }\n                *param_1 = *param_1 + 1;\n            }\n            fcn.10008600();\n            if (((param_1[0x14] & 0x80) == 0) || (*(param_1 + 0x12) != 0x62)) {\n                if (((param_1[0x14] & 0x80) == 0) || (*(param_1 + 0x12) != 0x42)) {\n                    fcn.1000aba0();\n                    goto code_r0x10009cf9;\n                }\n                fcn.1000af00();\n                *(param_1[10] + 4) = *(param_1[10] + 4) ^ 1;\n                in_EAX = fcn.10009a60();\n            }\n            else {\n                fcn.1000af00();\n                in_EAX = fcn.10009a60();\n            }\n        }\n        else {\n            if (in_EAX == 0x5b) {\n                fcn.10009a60();\n                fcn.1000ab10();\n                fcn.1000aab0(0x5d, 4);\n                goto code_r0x10009cf9;\n            }\n            if (in_EAX == 0x28) {\n                fcn.10009a60();\n                cVar2 = fcn.1000ac70();\n                in_EAX = fcn.1000aab0(0x29, 5);\n                if (cVar2 != '\\0') goto code_r0x10009cf9;\n            }\n            else if (in_EAX == 0x5e) {\n                fcn.1000ae40();\n                in_EAX = fcn.10009a60();\n            }\n            else {\n                if (in_EAX != 0x24) {\n                    if ((((in_EAX == 0x2a) || (in_EAX == 0x2b)) || (in_EAX == 0x3f)) || (in_EAX == 0x7b))\n                    goto code_r0x10009d27;\n                    if ((in_EAX == 0x7d) && ((param_1[0x14] & 0x10000000) == 0)) goto code_r0x10009d19;\n                    if ((in_EAX == 0x5d) && ((param_1[0x14] & 0x10000000) == 0)) goto code_r0x10009d20;\n                    fcn.1000af60(*(param_1 + 0x12));\n                    fcn.10009a60();\n                    goto code_r0x10009cf9;\n                }\n                fcn.1000aea0();\n                in_EAX = fcn.10009a60();\n            }\n        }\n        piVar4 = param_1[0x13];\n        uVar7 = 1;\n        uVar6 = 1;\n    }\n    if (param_1[4] == NULL) {\n        if ((param_1[0x14] & 0x10000000) != 0) goto code_r0x10009ae9;\n        fcn.1000df64(5);\ncode_r0x10009d19:\n        fcn.1000df64(6);\ncode_r0x10009d20:\n        fcn.1000df64(4);\ncode_r0x10009d27:\n        fcn.1000df64(10);\n        pcVar1 = swi(3);\n        uVar5 = (*pcVar1)();\n        return uVar5;\n    }\ncode_r0x10009d0c:\n    return in_EAX & 0xffffff00 | uVar6;\n}\n",
        "token_count": 1606
    },
    "10009e90": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.10009e90(int32_t param_1, int32_t param_2, code *param_3)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    code *pcVar3;\n    int32_t iVar4;\n    code **ppcVar5;\n    \n    iVar2 = *(param_2 + 0xc);\n    pcVar3 = *(param_3 + 0xc);\n    *(param_3 + 0xc) = 0;\n    iVar4 = *(param_1 + 4);\n    *(param_1 + 4) = param_3;\n    *(param_3 + 0xc) = 0;\n    *(iVar4 + 0xc) = param_3;\n    piVar1 = iVar2 + 0x18;\n    iVar4 = *piVar1;\n    while (iVar4 != 0) {\n        iVar2 = *piVar1;\n        piVar1 = iVar2 + 0x18;\n        iVar4 = *(iVar2 + 0x18);\n    }\n    ppcVar5 = fcn.1000e9c8(0x1c);\n    ppcVar5[5] = param_3;\n    ppcVar5[1] = 0x10;\n    ppcVar5[2] = NULL;\n    ppcVar5[3] = NULL;\n    ppcVar5[4] = NULL;\n    *ppcVar5 = vtable.std::_Node_if.0;\n    ppcVar5[6] = NULL;\n    *(iVar2 + 0x18) = ppcVar5;\n    ppcVar5[3] = pcVar3;\n    *(pcVar3 + 0x10) = *(iVar2 + 0x18);\n    return;\n}\n",
        "token_count": 398
    },
    "1000a300": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid __thiscall\nfcn.1000a300(char *param_1, uint param_2, uint32_t *param_3, uint32_t param_4, uint32_t *param_5, uint32_t param_6)\n\n{\n    uint32_t uVar1;\n    \n    while ((param_3 != param_5 || (param_4 != param_6))) {\n        if (*param_1 == '\\0') {\n            uVar1 = *param_3 & ~(1 << (param_4 & 0x1f));\n        }\n        else {\n            uVar1 = *param_3 | 1 << (param_4 & 0x1f);\n        }\n        *param_3 = uVar1;\n        if (param_4 < 0x1f) {\n            param_4 = param_4 + 1;\n        }\n        else {\n            param_3 = param_3 + 1;\n            param_4 = 0;\n        }\n    }\n    return;\n}\n",
        "token_count": 219
    },
    "1000a3c0": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint * __cdecl fcn.1000a3c0(int32_t **noname_0, uint noname_1, uint arg_10h)\n\n{\n    char cVar1;\n    int32_t *piVar2;\n    uint *puVar3;\n    int32_t **ppiVar4;\n    uint32_t uVar5;\n    int32_t *in_ECX;\n    int32_t *piVar6;\n    int32_t *piVar7;\n    int32_t **ppiVar8;\n    uint *puVar9;\n    bool bVar10;\n    uint *puStack4;\n    \n    puStack4 = (*in_ECX)[1];\n    cVar1 = *(puStack4 + 0xd);\n    puVar3 = *in_ECX;\n    do {\n        if (cVar1 != '\\0') {\n            return puVar3;\n        }\n        ppiVar4 = puStack4 + 4;\n        ppiVar8 = noname_0;\n        if (0xf < noname_0[5]) {\n            ppiVar8 = *noname_0;\n        }\n        if (0xf < puStack4[9]) {\n            ppiVar4 = *ppiVar4;\n        }\n        piVar2 = puStack4[8];\n        piVar6 = noname_0[4];\n        piVar7 = piVar6;\n        if (piVar2 < piVar6) {\n            piVar7 = piVar2;\n        }\n        if (piVar7 == NULL) {\ncode_r0x1000a480:\n            if (piVar2 < piVar6) goto code_r0x1000a462;\ncode_r0x1000a484:\n            puVar9 = *puStack4;\n        }\n        else {\n            while (piVar6 = piVar7 + -1,  0x3 < piVar7) {\n                if (*ppiVar4 != *ppiVar8) goto code_r0x1000a426;\n                ppiVar4 = ppiVar4 + 1;\n                ppiVar8 = ppiVar8 + 1;\n                piVar7 = piVar6;\n            }\n            if (piVar6 == 0xfffffffc) {\ncode_r0x1000a45a:\n                uVar5 = 0;\n            }\n            else {\ncode_r0x1000a426:\n                bVar10 = *ppiVar4 < *ppiVar8;\n                if ((*ppiVar4 == *ppiVar8) &&\n                   ((piVar6 == 0xfffffffd ||\n                    ((bVar10 = *(ppiVar4 + 1) < *(ppiVar8 + 1),  *(ppiVar4 + 1) == *(ppiVar8 + 1) &&\n                     ((piVar6 == 0xfffffffe ||\n                      ((bVar10 = *(ppiVar4 + 2) < *(ppiVar8 + 2),  *(ppiVar4 + 2) == *(ppiVar8 + 2) &&\n                       ((piVar6 == 0xffffffff ||\n                        (bVar10 = *(ppiVar4 + 3) < *(ppiVar8 + 3),  *(ppiVar4 + 3) == *(ppiVar8 + 3)))))))))))))\n                goto code_r0x1000a45a;\n                uVar5 = -bVar10 | 1;\n            }\n            if (uVar5 == 0) {\n                piVar6 = noname_0[4];\n                goto code_r0x1000a480;\n            }\n            if (-1 < uVar5) goto code_r0x1000a484;\ncode_r0x1000a462:\n            puVar9 = puStack4[2];\n            puStack4 = puVar3;\n        }\n        cVar1 = *(puVar9 + 0xd);\n        puVar3 = puStack4;\n        puStack4 = puVar9;\n    } while( true );\n}\n",
        "token_count": 857
    },
    "1000a720": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t __cdecl fcn.1000a720(int32_t arg_8h, uint arg_ch)\n\n{\n    int32_t iVar1;\n    char cVar2;\n    uint32_t uVar3;\n    int32_t *in_ECX;\n    uint32_t extraout_ECX;\n    uint32_t extraout_ECX_00;\n    uint32_t extraout_ECX_01;\n    uint32_t extraout_ECX_02;\n    uint32_t extraout_ECX_03;\n    uint32_t extraout_ECX_04;\n    uint32_t extraout_ECX_05;\n    uint32_t extraout_ECX_06;\n    uint32_t extraout_ECX_07;\n    uint32_t extraout_ECX_08;\n    uint32_t extraout_ECX_09;\n    uint32_t extraout_ECX_10;\n    uint32_t extraout_ECX_11;\n    uint32_t extraout_ECX_12;\n    uint32_t extraout_ECX_13;\n    uint32_t extraout_ECX_14;\n    uint8_t uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t *piVar7;\n    int32_t *piVar8;\n    int32_t iVar9;\n    int32_t *in_FS_OFFSET;\n    bool bVar10;\n    int32_t var_60h;\n    uint32_t var_5ch;\n    int32_t var_54h;\n    int32_t var_50h;\n    uint32_t var_4ch;\n    int32_t var_44h;\n    int32_t var_40h;\n    uint32_t var_3ch;\n    int32_t var_34h;\n    int32_t var_30h;\n    uint32_t var_2ch;\n    int32_t var_24h;\n    int32_t *var_1ch;\n    int32_t *var_18h;\n    int32_t *var_14h;\n    uint8_t var_dh;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x1003d900;\n    var_ch = *in_FS_OFFSET;\n    uVar3 = *0x1004f06c ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    var_60h = *in_ECX;\n    piVar8 = in_ECX + 1;\n    iVar5 = 0;\n    var_18h = piVar8;\n    var_14h = in_ECX;\n    fcn.100091d0(piVar8, uVar3);\n    var_50h = in_ECX[4];\n    var_1ch = in_ECX + 5;\n    var_4h = 0;\n    fcn.1000a5a0(var_1ch);\n    var_4h = 1;\n    piVar7 = in_ECX;\n    if (0 < *(arg_8h + 0x14)) {\n        do {\n            piVar7 = var_14h;\n            iVar9 = *in_ECX;\n            cVar2 = fcn.100081b0(*(arg_8h + 0xc));\n            if (cVar2 == '\\0') {\n                *piVar7 = var_60h;\n                piVar7[4] = var_50h;\n                fcn.10009080(&var_5ch);\n                uVar3 = fcn.10008f10();\n                uVar4 = 0;\n                goto code_r0x1000a9dd;\n            }\n            if (iVar9 == *piVar7) {\n                iVar5 = *(arg_8h + 0x14) + -1;\n            }\n            iVar5 = iVar5 + 1;\n            in_ECX = piVar7;\n            piVar8 = var_18h;\n        } while (iVar5 < *(arg_8h + 0x14));\n    }\n    var_40h = *piVar7;\n    fcn.100091d0(piVar8);\n    var_30h = piVar8[3];\n    var_4h._0_1_ = 2;\n    fcn.1000a5a0(piVar7 + 5);\n    var_4h = CONCAT31(var_4h._1_3_, 3);\n    iVar9 = *piVar7;\n    var_dh = 0;\n    uVar3 = fcn.100081b0(*(*(arg_8h + 0x1c) + 0xc));\n    if (uVar3 != '\\0') {\n        if (arg_ch == '\\0') {\ncode_r0x1000a8ee:\n            uVar4 = 1;\n            goto code_r0x1000a925;\n        }\n        var_40h = *piVar7;\n        var_30h = piVar7[4];\n        fcn.10009080(piVar7 + 1);\n        fcn.10008f10(piVar7 + 5);\n        var_dh = 1;\n    }\n    do {\n        iVar6 = iVar5;\n        if ((*(arg_8h + 0x18) != -1) && (iVar6 = iVar5 + 1,  *(arg_8h + 0x18) <= iVar5)) break;\n        *piVar7 = iVar9;\n        piVar7[4] = var_50h;\n        fcn.10009080(&var_5ch);\n        cVar2 = fcn.100081b0(*(arg_8h + 0xc));\n        if (cVar2 == '\\0') break;\n        iVar1 = *piVar7;\n        uVar3 = fcn.100081b0(*(*(arg_8h + 0x1c) + 0xc));\n        if (uVar3 != '\\0') {\n            if (arg_ch == '\\0') goto code_r0x1000a8ee;\n            var_40h = *var_14h;\n            var_30h = var_18h[3];\n            fcn.10009080(var_18h);\n            fcn.10008f10(var_1ch);\n            var_dh = 1;\n        }\n        bVar10 = iVar9 != iVar1;\n        iVar5 = iVar6;\n        piVar7 = var_14h;\n        iVar9 = iVar1;\n    } while (bVar10);\n    uVar4 = var_dh;\n    piVar8 = &var_40h;\n    if (var_dh == 0) {\n        piVar8 = &var_60h;\n    }\n    *var_14h = *piVar8;\n    var_18h[3] = piVar8[4];\n    fcn.10009080(piVar8 + 1);\n    uVar3 = fcn.10008f10(piVar8 + 5);\ncode_r0x1000a925:\n    if (var_2ch != 0) {\n        uVar3 = var_24h - var_2ch >> 3;\n        if (0x1fffffff < uVar3) {\n            uVar3 = fcn.10013da4();\n            var_2ch = extraout_ECX;\n        }\n        if (0xfff < uVar3 << 3) {\n            uVar3 = var_2ch;\n            if ((var_2ch & 0x1f) != 0) {\n                fcn.10013da4();\n                uVar3 = extraout_ECX_00;\n            }\n            var_2ch = *(uVar3 - 4);\n            if (uVar3 <= var_2ch) {\n                var_2ch = fcn.10013da4();\n                uVar3 = extraout_ECX_01;\n            }\n            uVar3 = uVar3 - var_2ch;\n            if (uVar3 < 4) {\n                var_2ch = fcn.10013da4();\n                uVar3 = extraout_ECX_02;\n            }\n            if (0x23 < uVar3) {\n                var_2ch = fcn.10013da4();\n            }\n        }\n        uVar3 = fcn.1000ed48(var_2ch);\n    }\n    if (var_3ch != 0) {\n        uVar3 = var_34h - var_3ch >> 2;\n        if (0x3fffffff < uVar3) {\n            uVar3 = fcn.10013da4();\n            var_3ch = extraout_ECX_03;\n        }\n        if (0xfff < uVar3 << 2) {\n            uVar3 = var_3ch;\n            if ((var_3ch & 0x1f) != 0) {\n                fcn.10013da4();\n                uVar3 = extraout_ECX_04;\n            }\n            var_3ch = *(uVar3 - 4);\n            if (uVar3 <= var_3ch) {\n                var_3ch = fcn.10013da4();\n                uVar3 = extraout_ECX_05;\n            }\n            uVar3 = uVar3 - var_3ch;\n            if (uVar3 < 4) {\n                var_3ch = fcn.10013da4();\n                uVar3 = extraout_ECX_06;\n            }\n            if (0x23 < uVar3) {\n                var_3ch = fcn.10013da4();\n            }\n        }\n        uVar3 = fcn.1000ed48(var_3ch);\n    }\ncode_r0x1000a9dd:\n    if (var_4ch != 0) {\n        uVar3 = var_44h - var_4ch >> 3;\n        if (0x1fffffff < uVar3) {\n            uVar3 = fcn.10013da4();\n            var_4ch = extraout_ECX_07;\n        }\n        if (0xfff < uVar3 << 3) {\n            uVar3 = var_4ch;\n            if ((var_4ch & 0x1f) != 0) {\n                fcn.10013da4();\n                uVar3 = extraout_ECX_08;\n            }\n            var_4ch = *(uVar3 - 4);\n            if (uVar3 <= var_4ch) {\n                var_4ch = fcn.10013da4();\n                uVar3 = extraout_ECX_09;\n            }\n            uVar3 = uVar3 - var_4ch;\n            if (uVar3 < 4) {\n                var_4ch = fcn.10013da4();\n                uVar3 = extraout_ECX_10;\n            }\n            if (0x23 < uVar3) {\n                var_4ch = fcn.10013da4();\n            }\n        }\n        uVar3 = fcn.1000ed48(var_4ch);\n    }\n    if (var_5ch != 0) {\n        uVar3 = var_54h - var_5ch >> 2;\n        if (0x3fffffff < uVar3) {\n            uVar3 = fcn.10013da4();\n            var_5ch = extraout_ECX_11;\n        }\n        if (0xfff < uVar3 << 2) {\n            uVar3 = var_5ch;\n            if ((var_5ch & 0x1f) != 0) {\n                fcn.10013da4();\n                uVar3 = extraout_ECX_12;\n            }\n            var_5ch = *(uVar3 - 4);\n            if (uVar3 <= var_5ch) {\n                var_5ch = fcn.10013da4();\n                uVar3 = extraout_ECX_13;\n            }\n            uVar3 = uVar3 - var_5ch;\n            if (uVar3 < 4) {\n                var_5ch = fcn.10013da4();\n                uVar3 = extraout_ECX_14;\n            }\n            if (0x23 < uVar3) {\n                var_5ch = fcn.10013da4();\n            }\n        }\n        uVar3 = fcn.1000ed48(var_5ch);\n    }\n    *in_FS_OFFSET = var_ch;\n    return uVar3 & 0xffffff00 | uVar4;\n}\n",
        "token_count": 2758
    },
    "1000b010": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.1000b010(uchar *param_1, char *param_2)\n\n{\n    char cVar1;\n    uint32_t uVar2;\n    uchar *puVar3;\n    int32_t iVar4;\n    char *pcVar5;\n    int32_t *in_FS_OFFSET;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x1003d939;\n    var_ch = *in_FS_OFFSET;\n    uVar2 = *0x1004f06c ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    *param_1 = 3;\n    puVar3 = fcn.1000e9c8(0x18);\n    var_4h = 1;\n    if (puVar3 != NULL) {\n        *(puVar3 + 0x14) = 0xf;\n        *(puVar3 + 0x10) = 0;\n        *puVar3 = 0;\n        if (*param_2 == '\\0') {\n            iVar4 = 0;\n        }\n        else {\n            pcVar5 = param_2;\n            do {\n                cVar1 = *pcVar5;\n                pcVar5 = pcVar5 + 1;\n            } while (cVar1 != '\\0');\n            iVar4 = pcVar5 - (param_2 + 1);\n        }\n        fcn.10003d80(param_2, iVar4, uVar2);\n    }\n    *(param_1 + 8) = puVar3;\n    *in_FS_OFFSET = var_ch;\n    return;\n}\n",
        "token_count": 401
    },
    "1000b440": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint * __thiscall fcn.1000b440(int32_t **param_1, uint *param_2, int32_t *param_3, uint param_4, uint param_5)\n\n{\n    int32_t *piVar1;\n    char cVar2;\n    int32_t iVar3;\n    int32_t **ppiVar4;\n    uint *puVar5;\n    int32_t *piVar6;\n    uint extraout_ECX;\n    uint extraout_ECX_00;\n    uint extraout_ECX_01;\n    uint extraout_ECX_02;\n    uint extraout_ECX_03;\n    uint extraout_ECX_04;\n    uint uVar7;\n    int32_t *in_FS_OFFSET;\n    uint *var_8h;\n    int32_t *var_ch_2;\n    uint var_10h_2;\n    uint var_14h_2;\n    uint var_10h;\n    uint var_ch;\n    uint32_t uStack52;\n    uint var_1ch;\n    int32_t **var_18h;\n    int32_t *var_14h;\n    uint32_t *puStack20;\n    int32_t var_ch_3;\n    uint uStack12;\n    uint var_4h;\n    \n    uStack12 = 0x1003d990;\n    var_ch_3 = *in_FS_OFFSET;\n    uStack52 = *0x1004f06c ^ &stack0xfffffffc;\n    puStack20 = &uStack52;\n    *in_FS_OFFSET = &var_ch_3;\n    var_4h = 0;\n    var_14h = NULL;\n    var_18h = param_1;\n    if (param_1[1] == NULL) {\n        puStack20 = &uStack52;\n        fcn.1000c0d0(var_8h, 1, *param_1, param_1, var_14h_2);\n        *in_FS_OFFSET = var_ch_3;\n        return var_8h;\n    }\n    piVar6 = *param_1;\n    if (var_ch_2 == *piVar6) {\n        piVar6 = var_ch_2 + 4;\n        if (0xf < var_ch_2[9]) {\n            piVar6 = *piVar6;\n        }\n        puStack20 = &uStack52;\n        iVar3 = fcn.10003cf0(piVar6, var_ch_2[8]);\n        uVar7 = extraout_ECX;\n        if (iVar3 < 0) {\n            fcn.1000c0d0(var_8h, 1, var_ch_2, extraout_ECX, var_14h_2);\n            *in_FS_OFFSET = var_ch_3;\n            return var_8h;\n        }\n    }\n    else if (var_ch_2 == piVar6) {\n        iVar3 = piVar6[2];\n        puStack20 = &uStack52;\n        cVar2 = fcn.10008fe0(iVar3 + 0x10, var_10h_2);\n        uVar7 = extraout_ECX_00;\n        if (cVar2 != '\\0') {\n            fcn.1000c0d0(var_8h, 0, iVar3, extraout_ECX_00, var_14h_2);\n            *in_FS_OFFSET = var_ch_3;\n            return var_8h;\n        }\n    }\n    else {\n        cVar2 = fcn.10008fe0(var_10h_2, var_ch_2 + 4);\n        if (cVar2 != '\\0') {\n            var_14h = var_ch_2;\n            fcn.10009170();\n            piVar1 = var_14h;\n            cVar2 = fcn.10008fe0(var_14h + 4, var_10h_2);\n            if (cVar2 != '\\0') {\n                if (*(piVar1[2] + 0xd) != '\\0') {\n                    fcn.1000c0d0(var_8h, 0, piVar1, extraout_ECX_01, var_14h_2);\n                    *in_FS_OFFSET = var_ch_3;\n                    return var_8h;\n                }\n                fcn.1000c0d0(var_8h, 1, var_ch_2, extraout_ECX_01, var_14h_2);\n                *in_FS_OFFSET = var_ch_3;\n                return var_8h;\n            }\n        }\n        cVar2 = fcn.10008fe0(var_ch_2 + 4, var_10h_2);\n        uVar7 = extraout_ECX_02;\n        if (cVar2 != '\\0') {\n            var_14h = var_ch_2;\n            ppiVar4 = fcn.10004800();\n            piVar1 = var_14h;\n            uVar7 = extraout_ECX_03;\n            if ((*ppiVar4 == piVar6) ||\n               (cVar2 = fcn.10008fe0(var_10h_2, var_14h + 4),  uVar7 = extraout_ECX_04,  cVar2 != '\\0')) {\n                if (*(var_ch_2[2] + 0xd) != '\\0') {\n                    fcn.1000c0d0(var_8h, 0, var_ch_2, uVar7, var_14h_2);\n                    *in_FS_OFFSET = var_ch_3;\n                    return var_8h;\n                }\n                fcn.1000c0d0(var_8h, 1, piVar1, uVar7, var_14h_2);\n                *in_FS_OFFSET = var_ch_3;\n                return var_8h;\n            }\n        }\n    }\n    var_4h = 0xffffffff;\n    puVar5 = fcn.1000c2c0(&var_1ch, uVar7, var_10h_2, var_14h_2);\n    *var_8h = *puVar5;\n    *in_FS_OFFSET = var_ch_3;\n    return var_8h;\n}\n",
        "token_count": 1368
    },
    "1000b870": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.1000b870(int16_t **param_1)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int16_t *piVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    \n    iVar2 = fcn.1000c620();\n    if (iVar2 == 0) {\n        return;\n    }\n    do {\n        if (iVar2 != 2) {\n            if ((param_1[0x11] == NULL) && ((param_1[0x14] & 0x100000) == 0)) {\n                fcn.1000df64(2);\n                goto code_r0x1000b9b1;\n            }\n            if (param_1[0x13] == 0x2d) {\n                piVar3 = *param_1;\n                if (piVar3 != param_1[2]) {\n                    if (((*piVar3 == 0x5c) && (piVar3 = piVar3 + 1,  piVar3 != param_1[2])) &&\n                       ((((param_1[0x14] & 8) == 0 && ((*piVar3 == 0x28 || (*piVar3 == 0x29)))) ||\n                        (((param_1[0x14] & 0x10) == 0 && ((*piVar3 == 0x7b || (*piVar3 == 0x7d)))))))) {\n                        *param_1 = piVar3;\n                    }\n                    *param_1 = *param_1 + 1;\n                }\n                fcn.10008600();\n                uVar5 = *(param_1 + 0x11);\n                iVar2 = fcn.1000c620();\n                if (iVar2 == 0) {\n                    if (0xff < *(param_1 + 0x11)) {\n                        fcn.1000cb70(*(param_1 + 0x11));\n                        fcn.1000cae0(0x2d);\n                        return;\n                    }\n                    fcn.1000cae0();\n                    fcn.1000cae0(0x2d);\n                    return;\n                }\n                if (iVar2 == 2) {\ncode_r0x1000b9b1:\n                    fcn.1000df64(8);\n                    pcVar1 = swi(3);\n                    (*pcVar1)();\n                    return;\n                }\n                if ((param_1[0x10] & 0x800) != 0) {\n                    uVar4 = fcn.100075a0(*(param_1 + 0x11));\n                    param_1[0x11] = uVar4 & 0xffff;\n                    uVar5 = fcn.100075a0(uVar5);\n                    uVar5 = uVar5 & 0xffff;\n                }\n                if (*(param_1 + 0x11) < uVar5) goto code_r0x1000b9b1;\n                fcn.1000c840(uVar5, *(param_1 + 0x11));\n            }\n            else if (*(param_1 + 0x11) < 0x100) {\n                fcn.1000cae0();\n            }\n            else {\n                fcn.1000cb70(*(param_1 + 0x11));\n            }\n        }\n        iVar2 = fcn.1000c620();\n        if (iVar2 == 0) {\n            return;\n        }\n    } while( true );\n}\n",
        "token_count": 771
    },
    "1000b9c0": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint __fastcall fcn.1000b9c0(int32_t param_1)\n\n{\n    int16_t iVar1;\n    uint32_t uVar2;\n    code *pcVar3;\n    char cVar4;\n    uint16_t uVar5;\n    int32_t iVar6;\n    uint uVar7;\n    int16_t *piVar8;\n    int16_t **extraout_ECX;\n    uint64_t uVar9;\n    \n    if (*(param_1 + 0x4c) == -1) {\n        uVar9 = fcn.1000df64(2);\ncode_r0x1000baf9:\n        cVar4 = (**(uVar9 + 0x10))(0x103, uVar9 >> 0x20);\ncode_r0x1000ba71:\n        if (cVar4 == '\\0') {\n            fcn.1000df64(0x1000bb10);\n            goto code_r0x1000bb10;\n        }\n        *(param_1 + 0x44) = *(param_1 + 0x48) & 0x1f;\ncode_r0x1000b9fe:\n        fcn.10009a60();\n    }\n    else {\n        if (((*(param_1 + 0x50) & 0x10000) != 0) && (cVar4 = fcn.1000c7d0(*(param_1 + 0x48)),  cVar4 != '\\0'))\n        goto code_r0x1000b9fe;\n        uVar2 = *(param_1 + 0x50);\n        if ((uVar2 & 0x8000) != 0) {\n            if (*(param_1 + 0x48) == 0x61) {\n                *(param_1 + 0x44) = 7;\n            }\n            else {\n                if (*(param_1 + 0x48) != 0x62) goto code_r0x1000ba2b;\n                *(param_1 + 0x44) = 8;\n            }\n            goto code_r0x1000b9fe;\n        }\ncode_r0x1000ba2b:\n        iVar1 = *(param_1 + 0x48);\n        if ((iVar1 == 99) && ((uVar2 & 0x40000) != 0)) {\n            fcn.10009a60();\n            pcVar3 = **(*(param_1 + 0x3c) + 4);\n            uVar9 = CONCAT24(*(param_1 + 0x48), pcVar3);\n            if (pcVar3 != vtable.std::ctype_wchar_t_.0) goto code_r0x1000baf9;\n            uVar5 = fcn.1000df84(*(param_1 + 0x48));\n            cVar4 = (uVar5 & 0x103) != 0;\n            goto code_r0x1000ba71;\n        }\n        if ((iVar1 == 0x78) && ((uVar2 & 0x1000) != 0)) {\n            fcn.10009a60();\n            uVar7 = 2;\ncode_r0x1000ba9d:\n            iVar6 = fcn.1000c540(0x10, uVar7);\n            if (iVar6 != 0) goto code_r0x1000bb10;\n        }\n        else {\n            if ((iVar1 == 0x75) && ((uVar2 & 0x800) != 0)) {\n                fcn.10009a60();\n                uVar7 = 4;\n                goto code_r0x1000ba9d;\n            }\n            if (((uVar2 & 0x2000) == 0) || (iVar6 = fcn.1000c540(8, 3),  iVar6 == 3)) {\n                cVar4 = fcn.1000cf90();\n                if (cVar4 == '\\0') {\n                    return 0;\n                }\n                extraout_ECX[0x11] = *(extraout_ECX + 0x12);\n                piVar8 = *extraout_ECX;\n                if (piVar8 != extraout_ECX[2]) {\n                    if (((*piVar8 == 0x5c) && (piVar8 = piVar8 + 1,  piVar8 != extraout_ECX[2])) &&\n                       ((((extraout_ECX[0x14] & 8) == 0 && ((*piVar8 == 0x28 || (*piVar8 == 0x29)))) ||\n                        (((extraout_ECX[0x14] & 0x10) == 0 && ((*piVar8 == 0x7b || (*piVar8 == 0x7d)))))))) {\n                        *extraout_ECX = piVar8;\n                    }\n                    *extraout_ECX = *extraout_ECX + 1;\n                }\n                fcn.10008600();\n                return 1;\n            }\n            if (*(param_1 + 0x44) == 0) goto code_r0x1000bb10;\n        }\n    }\n    if (*(param_1 + 0x44) < 0x10000) {\n        *(param_1 + 0x44) = *(param_1 + 0x44);\n        return 1;\n    }\ncode_r0x1000bb10:\n    fcn.1000df64(2);\n    pcVar3 = swi(3);\n    uVar7 = (*pcVar3)();\n    return uVar7;\n}\n",
        "token_count": 1233
    },
    "1000bd80": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.1000bd80(int32_t *param_1, int32_t param_2, char param_3)\n\n{\n    int32_t iVar1;\n    code *pcVar2;\n    code **ppcVar3;\n    code **ppcVar4;\n    code **ppcVar5;\n    code **ppcVar6;\n    code **ppcVar7;\n    uint *puVar8;\n    uint uVar9;\n    code *pcVar10;\n    int32_t unaff_retaddr;\n    \n    iVar1 = param_1[1];\n    if ((*(iVar1 + 4) == 6) && (*(iVar1 + 0x18) != 1)) {\n        *(iVar1 + 0x18) = *(iVar1 + 0x18) + -1;\n        fcn.1000af60(*(*(iVar1 + 0x1c) + *(iVar1 + 0x18) * 2));\n    }\n    pcVar10 = param_1[1];\n    if ((*(pcVar10 + 4) == 9) || (*(pcVar10 + 4) == 0xe)) {\n        pcVar10 = *(pcVar10 + 0x14);\n    }\n    if ((unaff_retaddr == 0) && (param_2 == 1)) {\n        ppcVar3 = fcn.1000e9c8(0x14);\n        ppcVar3[1] = 0x11;\n        ppcVar3[2] = NULL;\n        ppcVar3[3] = NULL;\n        ppcVar3[4] = NULL;\n        *ppcVar3 = vtable.std::_Node_endif.0;\n        ppcVar4 = fcn.1000e9c8(0x1c);\n        ppcVar4[1] = 0x10;\n        ppcVar4[2] = NULL;\n        ppcVar4[3] = NULL;\n        ppcVar4[4] = NULL;\n        *ppcVar4 = vtable.std::_Node_if.0;\n        ppcVar4[5] = ppcVar3;\n        ppcVar4[6] = NULL;\n        ppcVar5 = fcn.1000e9c8(0x1c);\n        ppcVar5[1] = 0x10;\n        ppcVar5[2] = NULL;\n        ppcVar5[3] = NULL;\n        ppcVar5[4] = NULL;\n        *ppcVar5 = vtable.std::_Node_if.0;\n        ppcVar5[5] = ppcVar3;\n        ppcVar5[6] = NULL;\n        ppcVar6 = fcn.1000e9c8(0x14);\n        *ppcVar6 = vtable.std::_Node_base.0;\n        ppcVar6[1] = 0x8;\n        ppcVar6[2] = NULL;\n        ppcVar6[3] = NULL;\n        ppcVar6[4] = NULL;\n        ppcVar7 = fcn.1000e9c8(0x18);\n        ppcVar7[1] = 0x9;\n        ppcVar7[2] = NULL;\n        ppcVar7[3] = NULL;\n        ppcVar7[4] = NULL;\n        *ppcVar7 = vtable.std::_Node_end_group.0;\n        ppcVar7[5] = ppcVar6;\n        ppcVar5[3] = ppcVar6;\n        ppcVar6[4] = ppcVar5;\n        ppcVar6[3] = ppcVar7;\n        ppcVar7[4] = ppcVar6;\n        ppcVar7[3] = ppcVar3;\n        ppcVar4[6] = ppcVar5;\n        ppcVar3[4] = param_1[1];\n        if (*(param_1[1] + 0xc) != NULL) {\n            ppcVar3[3] = *(param_1[1] + 0xc);\n            *(*(param_1[1] + 0xc) + 0x10) = ppcVar3;\n        }\n        *(param_1[1] + 0xc) = ppcVar3;\n        param_1[1] = ppcVar3;\n        *(*(pcVar10 + 0x10) + 0xc) = ppcVar4;\n        ppcVar4[4] = *(pcVar10 + 0x10);\n        *(pcVar10 + 0x10) = ppcVar4;\n        ppcVar4[3] = pcVar10;\n        if (param_3 == '\\0') {\n            pcVar2 = ppcVar5[3];\n            uVar9 = *(pcVar10 + 0x10);\n            *(pcVar10 + 0x10) = *(pcVar2 + 0x10);\n            *(pcVar2 + 0x10) = uVar9;\n            pcVar10 = ppcVar4[3];\n            ppcVar4[3] = ppcVar5[3];\n            ppcVar5[3] = pcVar10;\n            return;\n        }\n    }\n    else {\n        ppcVar3 = fcn.1000e9c8(0x18);\n        ppcVar3[1] = 0x13;\n        ppcVar3[2] = NULL;\n        ppcVar3[3] = NULL;\n        ppcVar3[4] = NULL;\n        *ppcVar3 = vtable.std::_Node_end_rep.0;\n        ppcVar3[5] = NULL;\n        puVar8 = fcn.1000e9c8(0x28);\n        iVar1 = *(*param_1 + 0x18);\n        *(*param_1 + 0x18) = iVar1 + 1;\n        uVar9 = 0;\n        puVar8[1] = 0x12;\n        if (param_3 != '\\0') {\n            uVar9 = 2;\n        }\n        puVar8[3] = 0;\n        puVar8[2] = uVar9;\n        puVar8[5] = unaff_retaddr;\n        puVar8[4] = 0;\n        *puVar8 = 0x1004b730;\n        puVar8[6] = param_2;\n        puVar8[7] = ppcVar3;\n        puVar8[8] = iVar1;\n        puVar8[9] = 0xffffffff;\n        ppcVar3[5] = puVar8;\n        ppcVar3[4] = param_1[1];\n        if (*(param_1[1] + 0xc) != NULL) {\n            ppcVar3[3] = *(param_1[1] + 0xc);\n            *(*(param_1[1] + 0xc) + 0x10) = ppcVar3;\n        }\n        *(param_1[1] + 0xc) = ppcVar3;\n        param_1[1] = ppcVar3;\n        *(*(pcVar10 + 0x10) + 0xc) = puVar8;\n        puVar8[4] = *(pcVar10 + 0x10);\n        *(pcVar10 + 0x10) = puVar8;\n        puVar8[3] = pcVar10;\n    }\n    return;\n}\n",
        "token_count": 1672
    },
    "1000c0d0": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid __thiscall\nfcn.1000c0d0(int32_t **param_1, int32_t **param_2, char param_3, int32_t **param_4, uint param_5, int32_t *param_6)\n\n{\n    char cVar1;\n    int32_t **ppiVar2;\n    code *pcVar3;\n    int32_t *piVar4;\n    int32_t *piVar5;\n    int32_t **ppiVar6;\n    int32_t *piVar7;\n    \n    if (0x4924922 < param_1[1]) {\n        fcn.100034a0();\n        fcn.10003600();\n        fcn.1000ed48(param_6);\n        fcn.1000df24(\"map/set<T> too long\");\n        pcVar3 = swi(3);\n        (*pcVar3)();\n        return;\n    }\n    param_1[1] = param_1[1] + 1;\n    param_6[1] = param_4;\n    if (param_4 == *param_1) {\n        (*param_1)[1] = param_6;\n        **param_1 = param_6;\n        (*param_1)[2] = param_6;\n    }\n    else if (param_3 == '\\0') {\n        param_4[2] = param_6;\n        if (param_4 == (*param_1)[2]) {\n            (*param_1)[2] = param_6;\n        }\n    }\n    else {\n        *param_4 = param_6;\n        if (param_4 == **param_1) {\n            **param_1 = param_6;\n        }\n    }\n    cVar1 = *(param_6[1] + 0xc);\n    piVar7 = param_6;\n    do {\n        if (cVar1 != '\\0') {\n            *((*param_1)[1] + 0xc) = 1;\n            *param_2 = param_6;\n            return;\n        }\n        piVar5 = piVar7[1];\n        piVar4 = *piVar5[1];\n        if (piVar5 == piVar4) {\n            piVar4 = piVar5[1][2];\n            if (*(piVar4 + 3) == '\\0') goto code_r0x1000c1f3;\n            if (piVar7 == piVar5[2]) {\n                ppiVar6 = piVar5[2];\n                piVar5[2] = *ppiVar6;\n                if (*(*ppiVar6 + 0xd) == '\\0') {\n                    (*ppiVar6)[1] = piVar5;\n                }\n                ppiVar6[1] = piVar5[1];\n                if (piVar5 == (*param_1)[1]) {\n                    (*param_1)[1] = ppiVar6;\n                }\n                else {\n                    ppiVar2 = piVar5[1];\n                    if (piVar5 == *ppiVar2) {\n                        *ppiVar2 = ppiVar6;\n                    }\n                    else {\n                        ppiVar2[2] = ppiVar6;\n                    }\n                }\n                *ppiVar6 = piVar5;\n                piVar5[1] = ppiVar6;\n                piVar7 = piVar5;\n            }\n            *(piVar7[1] + 0xc) = 1;\n            *(*(piVar7[1] + 4) + 0xc) = 0;\n            piVar5 = *(piVar7[1] + 4);\n            ppiVar6 = *piVar5;\n            *piVar5 = ppiVar6[2];\n            if (*(ppiVar6[2] + 0xd) == '\\0') {\n                *(ppiVar6[2] + 4) = piVar5;\n            }\n            ppiVar6[1] = piVar5[1];\n            if (piVar5 == (*param_1)[1]) {\n                (*param_1)[1] = ppiVar6;\n                ppiVar6[2] = piVar5;\n            }\n            else {\n                piVar4 = piVar5[1];\n                if (piVar5 == piVar4[2]) {\n                    piVar4[2] = ppiVar6;\n                    ppiVar6[2] = piVar5;\n                }\n                else {\n                    *piVar4 = ppiVar6;\n                    ppiVar6[2] = piVar5;\n                }\n            }\ncode_r0x1000c267:\n            piVar5[1] = ppiVar6;\n        }\n        else {\n            if (*(piVar4 + 3) != '\\0') {\n                if (piVar7 == *piVar5) {\n                    fcn.10008100();\n                    piVar7 = piVar5;\n                }\n                *(piVar7[1] + 0xc) = 1;\n                *(*(piVar7[1] + 4) + 0xc) = 0;\n                piVar5 = *(piVar7[1] + 4);\n                ppiVar6 = piVar5[2];\n                piVar5[2] = *ppiVar6;\n                if (*(*ppiVar6 + 0xd) == '\\0') {\n                    (*ppiVar6)[1] = piVar5;\n                }\n                ppiVar6[1] = piVar5[1];\n                if (piVar5 == (*param_1)[1]) {\n                    (*param_1)[1] = ppiVar6;\n                }\n                else {\n                    ppiVar2 = piVar5[1];\n                    if (piVar5 == *ppiVar2) {\n                        *ppiVar2 = ppiVar6;\n                    }\n                    else {\n                        ppiVar2[2] = ppiVar6;\n                    }\n                }\n                *ppiVar6 = piVar5;\n                goto code_r0x1000c267;\n            }\ncode_r0x1000c1f3:\n            *(piVar5 + 3) = 1;\n            *(piVar4 + 3) = 1;\n            *(*(piVar7[1] + 4) + 0xc) = 0;\n            piVar7 = *(piVar7[1] + 4);\n        }\n        cVar1 = *(piVar7[1] + 0xc);\n    } while( true );\n}\n",
        "token_count": 1416
    },
    "1000c2c0": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.1000c2c0(int32_t **param_1, int32_t **param_2, uint param_3, int32_t **param_4, uint param_5)\n\n{\n    int32_t *piVar1;\n    int32_t *piVar2;\n    int32_t *piVar3;\n    uint uVar4;\n    uint8_t uVar5;\n    uint8_t uVar6;\n    uint32_t uVar7;\n    int32_t **ppiVar8;\n    int32_t iVar9;\n    int32_t **ppiVar10;\n    int32_t **extraout_ECX;\n    int32_t *piVar11;\n    int32_t **ppiVar12;\n    int32_t **ppiVar13;\n    int32_t *in_FS_OFFSET;\n    bool bVar14;\n    int32_t **var_8h;\n    int32_t **var_10h_2;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h_2;\n    int32_t var_ch_2;\n    uint uStack12;\n    uint var_4h;\n    \n    ppiVar8 = var_10h_2;\n    uStack12 = 0x1003d9b0;\n    var_ch_2 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &var_ch_2;\n    var_4h = 0;\n    uVar5 = 1;\n    param_1 = *param_1;\n    uVar6 = 1;\n    ppiVar12 = param_1;\n    if (*(param_1[1] + 0xd) == '\\0') {\n        piVar1 = var_10h_2[4];\n        ppiVar10 = param_1[1];\n        do {\n            ppiVar12 = ppiVar10;\n            ppiVar10 = ppiVar12 + 4;\n            if (0xf < ppiVar12[9]) {\n                ppiVar10 = *ppiVar10;\n            }\n            ppiVar13 = var_10h_2;\n            if (0xf < var_10h_2[5]) {\n                ppiVar13 = *var_10h_2;\n            }\n            piVar2 = ppiVar12[8];\n            piVar11 = piVar2;\n            if (piVar1 < piVar2) {\n                piVar11 = piVar1;\n            }\n            if (piVar11 == NULL) {\ncode_r0x1000c3a5:\n                if (piVar1 < piVar2) {\n                    uVar7 = 0xffffffff;\n                }\n                else {\n                    uVar7 = piVar2 < piVar1;\n                }\n            }\n            else {\n                while (piVar3 = piVar11 + -1,  0x3 < piVar11) {\n                    if (*ppiVar13 != *ppiVar10) goto code_r0x1000c368;\n                    ppiVar13 = ppiVar13 + 1;\n                    ppiVar10 = ppiVar10 + 1;\n                    piVar11 = piVar3;\n                }\n                if (piVar3 == 0xfffffffc) {\ncode_r0x1000c39c:\n                    uVar7 = 0;\n                }\n                else {\ncode_r0x1000c368:\n                    bVar14 = *ppiVar13 < *ppiVar10;\n                    if ((*ppiVar13 == *ppiVar10) &&\n                       ((piVar3 == 0xfffffffd ||\n                        ((bVar14 = *(ppiVar13 + 1) < *(ppiVar10 + 1),  *(ppiVar13 + 1) == *(ppiVar10 + 1) &&\n                         ((piVar3 == 0xfffffffe ||\n                          ((bVar14 = *(ppiVar13 + 2) < *(ppiVar10 + 2),  *(ppiVar13 + 2) == *(ppiVar10 + 2) &&\n                           ((piVar3 == 0xffffffff ||\n                            (bVar14 = *(ppiVar13 + 3) < *(ppiVar10 + 3),  *(ppiVar13 + 3) == *(ppiVar10 + 3)))))))))))))\n                    goto code_r0x1000c39c;\n                    uVar7 = -bVar14 | 1;\n                }\n                if (uVar7 == 0) goto code_r0x1000c3a5;\n            }\n            uVar6 = uVar7 >> 0x18;\n            uVar5 = uVar6 >> 7;\n            uVar6 = uVar6 >> 7;\n            if (uVar7 < 0) {\n                ppiVar10 = *ppiVar12;\n            }\n            else {\n                ppiVar10 = ppiVar12[2];\n            }\n        } while (*(ppiVar10 + 0xd) == '\\0');\n    }\n    var_10h_2 = ppiVar12;\n    if (uVar5 != 0) {\n        if (ppiVar12 == *param_1) {\n            uVar6 = 1;\n            goto code_r0x1000c3f6;\n        }\n        fcn.10009170();\n    }\n    ppiVar13 = var_10h_2;\n    ppiVar10 = ppiVar8 + 4;\n    if (0xf < ppiVar8[5]) {\n        ppiVar8 = *ppiVar8;\n    }\n    iVar9 = fcn.10003cf0(ppiVar8, *ppiVar10);\n    uVar4 = var_14h;\n    param_1 = extraout_ECX;\n    if (-1 < iVar9) {\n        fcn.100034a0();\n        fcn.10003600();\n        fcn.1000ed48(uVar4);\n        *var_8h = ppiVar13;\n        *(var_8h + 1) = 0;\n        *in_FS_OFFSET = var_ch_2;\n        return;\n    }\ncode_r0x1000c3f6:\n    ppiVar8 = fcn.1000c0d0(&param_4, uVar6, ppiVar12, param_1, var_14h);\n    *var_8h = *ppiVar8;\n    *(var_8h + 1) = 1;\n    *in_FS_OFFSET = var_ch_2;\n    return;\n}\n",
        "token_count": 1437
    },
    "1000c840": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.1000c840(int32_t param_1, uint32_t param_2, uint16_t param_3)\n\n{\n    code **ppcVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    uint32_t *puVar4;\n    uchar (*pauVar5) [16];\n    uint32_t uVar6;\n    uint *puVar7;\n    uint32_t uVar8;\n    uint8_t *puVar9;\n    uint32_t uVar10;\n    \n    param_2 = param_2 & 0xffff;\n    uVar10 = param_3;\n    if ((*(param_1 + 8) & 0x100) != 0) {\n        ppcVar1 = *(*(param_1 + 0xc) + 4);\n        pcVar2 = *ppcVar1;\n        if (pcVar2 == vtable.std::ctype_wchar_t_.0) {\n            param_2 = fcn.1000dfc7(param_2, ppcVar1 + 2);\n        }\n        else {\n            param_2 = (**(pcVar2 + 0x20))(param_2);\n        }\n        param_2 = param_2 & 0xffff;\n        ppcVar1 = *(*(param_1 + 0xc) + 4);\n        pcVar2 = *ppcVar1;\n        if (pcVar2 == vtable.std::ctype_wchar_t_.0) {\n            uVar10 = fcn.1000dfc7(uVar10, ppcVar1 + 2);\n        }\n        else {\n            uVar10 = (**(pcVar2 + 0x20))(uVar10);\n        }\n        uVar10 = uVar10 & 0xffff;\n    }\n    iVar3 = *(param_1 + 4);\n    if (param_2 <= uVar10) {\n        while (uVar10 < *(param_1 + 0x10)) {\n            if (*(iVar3 + 0x18) == 0) {\n                pauVar5 = fcn.1000e9c8(0x20);\n                *pauVar5 = ZEXT816(0);\n                pauVar5[1] = ZEXT816(0);\n                *(iVar3 + 0x18) = pauVar5;\n            }\n            uVar6 = param_2 & 7;\n            puVar9 = (param_2 >> 3) + *(iVar3 + 0x18);\n            param_2 = param_2 + 1;\n            *puVar9 = *puVar9 | 1 << uVar6;\n            if (uVar10 < param_2) {\n                return;\n            }\n        }\n        if (uVar10 < param_2) {\n            return;\n        }\n        if (uVar10 - param_2 < *(param_1 + 0x14)) {\n            if (uVar10 < param_2) {\n                return;\n            }\n            do {\n                fcn.1000cb70();\n                param_2 = param_2 + 1;\n            } while (param_2 <= uVar10);\n            return;\n        }\n        if (*(iVar3 + 0x20) == 0) {\n            puVar7 = fcn.1000e9c8(0xc);\n            *puVar7 = 0;\n            puVar7[1] = 0;\n            puVar7[2] = 0;\n            *(iVar3 + 0x20) = puVar7;\n        }\n        puVar4 = *(iVar3 + 0x20);\n        uVar6 = puVar4[1];\n        if (*puVar4 < uVar6 || *puVar4 == uVar6) {\n            uVar8 = fcn.10013bc2(puVar4[2], (uVar6 + 0x10) * 2);\n            if (uVar8 == 0) {\n                fcn.1000f48a();\n                goto code_r0x1000c9da;\n            }\n            puVar4[2] = uVar8;\n            *puVar4 = uVar6 + 0x10;\n        }\n        *(puVar4[2] + puVar4[1] * 2) = param_2;\n        puVar4[1] = puVar4[1] + 1;\n        puVar4 = *(iVar3 + 0x20);\n        uVar6 = puVar4[1];\n        if (*puVar4 < uVar6 || *puVar4 == uVar6) {\n            uVar8 = fcn.10013bc2(puVar4[2], (uVar6 + 0x10) * 2);\n            if (uVar8 == 0) {\ncode_r0x1000c9da:\n                fcn.1000f48a();\n                pcVar2 = swi(3);\n                (*pcVar2)();\n                return;\n            }\n            puVar4[2] = uVar8;\n            *puVar4 = uVar6 + 0x10;\n        }\n        *(puVar4[2] + puVar4[1] * 2) = uVar10;\n        puVar4[1] = puVar4[1] + 1;\n    }\n    return;\n}\n",
        "token_count": 1170
    },
    "1000cae0": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.1000cae0(int32_t param_1, uint32_t param_2)\n\n{\n    code **ppcVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    uchar (*pauVar4) [16];\n    uint8_t *puVar5;\n    \n    if ((*(param_1 + 8) & 0x100) != 0) {\n        ppcVar1 = *(*(param_1 + 0xc) + 4);\n        pcVar2 = *ppcVar1;\n        if (pcVar2 == vtable.std::ctype_wchar_t_.0) {\n            param_2 = fcn.1000dfc7(param_2, ppcVar1 + 2);\n            param_2 = param_2 & 0xffff;\n        }\n        else {\n            param_2 = (**(pcVar2 + 0x20))(param_2);\n            param_2 = param_2 & 0xffff;\n        }\n    }\n    iVar3 = *(param_1 + 4);\n    if (*(iVar3 + 0x18) == 0) {\n        pauVar4 = fcn.1000e9c8(0x20);\n        *pauVar4 = ZEXT816(0);\n        pauVar4[1] = ZEXT816(0);\n        *(iVar3 + 0x18) = pauVar4;\n    }\n    puVar5 = *(iVar3 + 0x18) + ((param_2 & 0xffff) >> 3);\n    *puVar5 = *puVar5 | 1 << (param_2 & 7);\n    return;\n}\n",
        "token_count": 367
    },
    "1000cb70": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.1000cb70(int32_t param_1, uint param_2)\n\n{\n    code **ppcVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    uint32_t *puVar4;\n    uint32_t uVar5;\n    ushort uVar6;\n    uint *puVar7;\n    uint32_t uVar8;\n    \n    if ((*(param_1 + 8) & 0x100) == 0) {\n        uVar6 = param_2;\n    }\n    else {\n        ppcVar1 = *(*(param_1 + 0xc) + 4);\n        pcVar2 = *ppcVar1;\n        if (pcVar2 == vtable.std::ctype_wchar_t_.0) {\n            uVar6 = fcn.1000dfc7(param_2, ppcVar1 + 2);\n        }\n        else {\n            uVar6 = (**(pcVar2 + 0x20))(param_2);\n        }\n    }\n    iVar3 = *(param_1 + 4);\n    if (*(iVar3 + 0x1c) == 0) {\n        puVar7 = fcn.1000e9c8(0xc);\n        *puVar7 = 0;\n        puVar7[1] = 0;\n        puVar7[2] = 0;\n        *(iVar3 + 0x1c) = puVar7;\n    }\n    puVar4 = *(iVar3 + 0x1c);\n    uVar5 = puVar4[1];\n    if (*puVar4 < uVar5 || *puVar4 == uVar5) {\n        uVar8 = fcn.10013bc2(puVar4[2], (uVar5 + 0x10) * 2);\n        if (uVar8 == 0) {\n            fcn.1000f48a();\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n        puVar4[2] = uVar8;\n        *puVar4 = uVar5 + 0x10;\n    }\n    *(puVar4[2] + puVar4[1] * 2) = uVar6;\n    puVar4[1] = puVar4[1] + 1;\n    return;\n}\n",
        "token_count": 519
    },
    "1000cc20": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint16_t __thiscall fcn.1000cc20(uint param_1, int32_t param_2, uint32_t param_3, char param_4)\n\n{\n    char cVar1;\n    uint16_t uVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    int32_t iVar5;\n    uint uStack4;\n    \n    iVar5 = 0;\n    if (*0x1004b784 != 0) {\n        iVar3 = 0;\n        param_2 = param_3 - param_2;\n        puVar4 = 0x1004b784;\n        uStack4 = param_1;\n        do {\n            if (param_2 >> 1 == *(iVar3 + 0x1004b788) * 2 >> 1) {\n                param_3 = param_3 & 0xffffff00;\n                cVar1 = fcn.1000d590(*puVar4, &uStack4, param_3);\n                if (cVar1 != '\\0') break;\n            }\n            iVar5 = iVar5 + 1;\n            iVar3 = iVar5 * 0x10;\n            puVar4 = iVar3 + 0x1004b784;\n        } while (*(iVar3 + 0x1004b784) != 0);\n    }\n    uVar2 = 0;\n    if (*(iVar5 * 0x10 + 0x1004b784) != 0) {\n        uVar2 = *(iVar5 * 0x10 + 0x1004b78c);\n    }\n    if ((param_4 != '\\0') && ((uVar2 & 3) != 0)) {\n        uVar2 = uVar2 | 3;\n    }\n    return uVar2;\n}\n",
        "token_count": 392
    },
    "1000cf10": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint32_t __fastcall fcn.1000cf10(int32_t param_1)\n\n{\n    code *pcVar1;\n    char cVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    \n    if (((*(param_1 + 0x50) & 0x4000) == 0) || (*(param_1 + 0x48) != 0x5c)) {\n        if ((*(param_1 + 0x50) & 0x20000) != 0) {\n            cVar2 = fcn.1000b7d0(0);\n            if (cVar2 != '\\0') {\n                return 2;\n            }\n        }\n        iVar3 = fcn.1000c540(10, 0x7fffffff);\n        if (iVar3 == 0x7fffffff) {\n            cVar2 = fcn.1000b9c0();\n            return cVar2 != '\\0';\n        }\n        if (*(param_1 + 0x44) != 0) {\n            fcn.1000df64(2);\n            pcVar1 = swi(3);\n            uVar4 = (*pcVar1)();\n            return uVar4;\n        }\n    }\n    else {\n        *(param_1 + 0x44) = 0x5c;\n        fcn.10009a60();\n    }\n    return 1;\n}\n",
        "token_count": 310
    },
    "1000d090": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.1000d090(int32_t param_1)\n\n{\n    char cVar1;\n    uchar (*pauVar2) [16];\n    uint8_t *puVar3;\n    uint32_t uVar4;\n    \n    uVar4 = 0;\n    do {\n        cVar1 = fcn.10007500();\n        if (cVar1 != param_1) {\n            if (*(param_1 + 0x18) == 0) {\n                pauVar2 = fcn.1000e9c8(0x20);\n                *pauVar2 = ZEXT816(0);\n                pauVar2[1] = ZEXT816(0);\n                *(param_1 + 0x18) = pauVar2;\n            }\n            puVar3 = (uVar4 >> 3) + *(param_1 + 0x18);\n            *puVar3 = *puVar3 | 1 << (uVar4 & 7);\n        }\n        uVar4 = uVar4 + 1;\n    } while (uVar4 < 0x100);\n    return;\n}\n",
        "token_count": 245
    },
    "1000d100": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.1000d100(int32_t param_1, uint param_2, uint param_3, uint32_t param_4)\n\n{\n    uint16_t **ppuVar1;\n    uint16_t *puVar2;\n    uint16_t **ppuVar3;\n    uchar (*pauVar4) [16];\n    uint32_t *puVar5;\n    uint32_t uVar6;\n    uint ****extraout_ECX;\n    uint ****extraout_ECX_00;\n    uint ****extraout_ECX_01;\n    uint32_t extraout_ECX_02;\n    uint ****ppppuVar7;\n    uint8_t *puVar8;\n    uint16_t *puVar9;\n    uint32_t uVar10;\n    uint32_t **ppuVar11;\n    uint32_t uVar12;\n    int32_t **in_FS_OFFSET;\n    uint *arg_ch;\n    uint uStack92;\n    uint32_t *puStack88;\n    uint32_t auStack84 [5];\n    uint32_t uStack64;\n    uint ****appppuStack60 [4];\n    uint16_t *puStack44;\n    uint32_t uStack40;\n    uint32_t uStack36;\n    uchar *puStack32;\n    int32_t *piStack28;\n    uint uStack24;\n    uint uStack20;\n    \n    puStack32 = &stack0xfffffffc;\n    uStack20 = 0xffffffff;\n    uStack24 = 0x1003d9f8;\n    piStack28 = *in_FS_OFFSET;\n    uStack36 = *0x1004f06c ^ &stack0xfffffff0;\n    *in_FS_OFFSET = &piStack28;\n    puStack88 = *(param_1 + 4);\n    fcn.1000d3e0(appppuStack60, param_2, param_3);\n    uStack20 = 0;\n    uVar12 = 0;\n    do {\n        uStack92 = uVar12 & 0xffff;\n        arg_ch = &uStack92;\n        ppuVar3 = fcn.1000d3e0(auStack84, arg_ch, &uStack92 + 2);\n        ppppuVar7 = appppuStack60;\n        if (7 < uStack40) {\n            ppppuVar7 = appppuStack60[0];\n        }\n        ppuVar1 = ppuVar3 + 4;\n        if (0x7 < ppuVar3[5]) {\n            ppuVar3 = *ppuVar3;\n        }\n        puVar2 = *ppuVar1;\n        puVar9 = puStack44;\n        if (puVar2 < puStack44) {\n            puVar9 = puVar2;\n        }\n        for (; puVar9 != NULL; puVar9 = puVar9 + -1) {\n            if (*ppuVar3 != *ppppuVar7) {\n                uVar10 = (-(*ppuVar3 < *ppppuVar7) & 0xfffffffe) + 1;\n                goto code_r0x1000d1b3;\n            }\n            ppuVar3 = ppuVar3 + 2;\n            ppppuVar7 = ppppuVar7 + 2;\n        }\n        uVar10 = 0;\ncode_r0x1000d1b3:\n        if (uVar10 == 0) {\n            puVar2 = *ppuVar1;\n            if (puVar2 < puStack44) {\n                uVar10 = 0xffffffff;\n            }\n            else {\n                uVar10 = puStack44 < puVar2;\n            }\n        }\n        if (7 < uStack64) {\n            if ((0x7fffffff < uStack64 + 1) ||\n               ((uVar6 = auStack84[0],  0xfff < (uStack64 + 1) * 2 &&\n                (((((auStack84[0] & 0x1f) != 0 || (uVar6 = *(auStack84[0] - 4),  auStack84[0] <= uVar6)) ||\n                  (auStack84[0] - uVar6 < 4)) || (0x23 < auStack84[0] - uVar6)))))) goto code_r0x1000d302;\n            fcn.1000ed48(uVar6);\n        }\n        puVar5 = puStack88;\n        if (uVar10 == 0) {\n            if (puStack88[6] == 0) {\n                pauVar4 = fcn.1000e9c8(0x20);\n                *pauVar4 = ZEXT816(0);\n                pauVar4[1] = ZEXT816(0);\n                puVar5[6] = pauVar4;\n            }\n            puVar8 = (uVar12 >> 3) + puVar5[6];\n            *puVar8 = *puVar8 | 1 << (uVar12 & 7);\n        }\n        uVar12 = uVar12 + 1;\n    } while (uVar12 < 0x100);\n    puStack88 = puVar5[10];\n    ppuVar11 = puVar5 + 10;\n    if (puStack88 != NULL) {\n        do {\n            puVar5 = *ppuVar11;\n            if (*puVar5 <= param_4) break;\n            ppuVar11 = puVar5 + 4;\n        } while (puVar5[4] != 0);\n        puStack88 = *ppuVar11;\n        if ((puStack88 != NULL) && (param_4 == *puStack88)) goto code_r0x1000d2df;\n    }\n    puVar5 = fcn.1000e9c8(0x14);\n    *puVar5 = param_4;\n    puVar5[1] = 0;\n    puVar5[2] = 0;\n    puVar5[3] = 0;\n    *ppuVar11 = puVar5;\n    puVar5[4] = puStack88;\ncode_r0x1000d2df:\n    fcn.1000d530(param_2, param_3);\n    if (7 < uStack40) {\n        uStack40 = uStack40 + 1;\n        if (0x7fffffff < uStack40) {\ncode_r0x1000d302:\n            uStack40 = fcn.10013da4();\n            appppuStack60[0] = extraout_ECX;\n        }\n        if (0xfff < uStack40 * 2) {\n            ppppuVar7 = appppuStack60[0];\n            if ((appppuStack60[0] & 0x1f) != 0) {\n                fcn.10013da4();\n                ppppuVar7 = extraout_ECX_00;\n            }\n            appppuStack60[0] = ppppuVar7[-1];\n            if (ppppuVar7 <= appppuStack60[0]) {\n                appppuStack60[0] = fcn.10013da4();\n                ppppuVar7 = extraout_ECX_01;\n            }\n            uVar12 = ppppuVar7 - appppuStack60[0];\n            if (uVar12 < 4) {\n                appppuStack60[0] = fcn.10013da4();\n                uVar12 = extraout_ECX_02;\n            }\n            if (0x23 < uVar12) {\n                appppuStack60[0] = fcn.10013da4();\n            }\n        }\n        fcn.1000ed48(appppuStack60[0]);\n    }\n    *in_FS_OFFSET = piStack28;\n    fcn.1000e9b7(arg_ch);\n    return;\n}\n",
        "token_count": 1738
    },
    "1000d370": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.1000d370(uint param_1, uint param_2, uint32_t param_3, uint32_t **param_4)\n\n{\n    uint32_t *puVar1;\n    uint32_t *puVar2;\n    \n    puVar2 = *param_4;\n    if (puVar2 != NULL) {\n        do {\n            puVar2 = *param_4;\n            if (*puVar2 <= param_3) break;\n            param_4 = puVar2 + 4;\n        } while (puVar2[4] != 0);\n        puVar2 = *param_4;\n        if ((puVar2 != NULL) && (param_3 == *puVar2)) goto code_r0x1000d3c4;\n    }\n    puVar1 = fcn.1000e9c8(0x14);\n    *puVar1 = param_3;\n    puVar1[1] = 0;\n    puVar1[2] = 0;\n    puVar1[3] = 0;\n    *param_4 = puVar1;\n    puVar1[4] = puVar2;\ncode_r0x1000d3c4:\n    fcn.1000d530(param_1, param_2);\n    return;\n}\n",
        "token_count": 285
    },
    "100101bd": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.100101bd(void)\n\n{\n    int32_t iVar1;\n    int32_t unaff_EBX;\n    int32_t unaff_EBP;\n    int32_t *unaff_EDI;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_1ch;\n    \n    *(unaff_EBX + -4) = *(unaff_EBP + -0x2c);\n    fcn.100110dc(*(unaff_EBP + -0x30));\n    iVar1 = fcn.100134b0();\n    *(iVar1 + 0x10) = *(unaff_EBP + -0x34);\n    iVar1 = fcn.100134b0();\n    *(iVar1 + 0x14) = *(unaff_EBP + -0x38);\n    if (((((*unaff_EDI == -0x1f928c9d) && (unaff_EDI[4] == 3)) &&\n         ((unaff_EDI[5] == 0x19930520 || ((unaff_EDI[5] == 0x19930521 || (unaff_EDI[5] == 0x19930522)))))) &&\n        (*(unaff_EBP + -0x3c) == 0)) &&\n       ((*(unaff_EBP + -0x1c) != 0 && (iVar1 = fcn.10011126(unaff_EDI[6]),  iVar1 != 0)))) {\n        fcn.1000ff8e(unaff_EDI);\n    }\n    return;\n}\n",
        "token_count": 370
    },
    "10010ac9": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.10010ac9(uint arg_8h, uint noname_1, uint arg_10h, uint arg_14h)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t unaff_EBP;\n    int32_t iVar4;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.1000f7a0(0x1004d1f8, 0x10);\n    if (*(*(unaff_EBP + 0x10) + 4) < 0x81) {\n        iVar4 = *(*(unaff_EBP + 8) + 8);\n    }\n    else {\n        iVar4 = *(*(unaff_EBP + 8) + 8);\n    }\n    *(unaff_EBP + -0x1c) = iVar4;\n    iVar3 = fcn.100134b0();\n    *(iVar3 + 0x18) = *(iVar3 + 0x18) + 1;\n    *(unaff_EBP + -4) = 0;\n    while( true ) {\n        if (iVar4 == *(unaff_EBP + 0x14)) goto code_r0x10010b5d;\n        if ((iVar4 < 0) || (iVar3 = *(unaff_EBP + 0x10),  *(iVar3 + 4) <= iVar4)) break;\n        iVar1 = *(iVar3 + 8);\n        uVar2 = *(iVar1 + iVar4 * 8);\n        *(unaff_EBP + -0x20) = uVar2;\n        *(unaff_EBP + -4) = 1;\n        if (*(iVar1 + 4 + iVar4 * 8) != 0) {\n            iVar1 = *(unaff_EBP + 8);\n            *(iVar1 + 8) = uVar2;\n            fcn.100135a0(*(*(iVar3 + 8) + 4 + iVar4 * 8), iVar1, 0x103);\n        }\n        *(unaff_EBP + -4) = 0;\n        iVar4 = *(unaff_EBP + -0x20);\n        *(unaff_EBP + -0x1c) = iVar4;\n    }\n    do {\n        fcn.10015f80();\ncode_r0x10010b5d:\n        *(unaff_EBP + -4) = 0xfffffffe;\n        fcn.10010b7d();\n    } while (iVar4 != *(unaff_EBP + 0x14));\n    *(*(unaff_EBP + 8) + 8) = iVar4;\n    fcn.1000f7e6();\n    return;\n}\n",
        "token_count": 630
    },
    "10010b7d": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.10010b7d(void)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.100134b0();\n    if (0 < *(iVar1 + 0x18)) {\n        iVar1 = fcn.100134b0();\n        *(iVar1 + 0x18) = *(iVar1 + 0x18) + -1;\n    }\n    return;\n}\n",
        "token_count": 90
    },
    "1001485e": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.1001485e(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    uint uVar3;\n    \n    if (arg_8h != 0) {\n        iVar1 = (*_sym.imp.KERNEL32.dll_HeapFree)(*0x10056aac, 0, arg_8h);\n        if (iVar1 == 0) {\n            puVar2 = fcn.10013e79();\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            uVar3 = fcn.10013e00(uVar3);\n            *puVar2 = uVar3;\n        }\n    }\n    return;\n}\n",
        "token_count": 156
    },
    "10015858": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.10015858(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    int32_t *piVar3;\n    int32_t *piVar4;\n    char *var_10h;\n    uint var_ch;\n    int32_t *var_8h;\n    int32_t var_4h;\n    \n    if (arg_8h == 0) {\n        iVar1 = 0;\n    }\n    else if ((arg_8h == 2) || (arg_8h == 1)) {\n        fcn.1001cc4c();\n        iVar1 = 0;\n        fcn.1001c68d(0, 0x10056898, 0x104);\n        *0x10056dc0 = 0x10056898;\n        var_10h = *0x10056dd0;\n        if ((*0x10056dd0 == NULL) || (**0x10056dd0 == '\\0')) {\n            var_10h = 0x10056898;\n        }\n        var_4h = 0;\n        var_ch = 0;\n        fcn.10015692(var_10h, 0, 0, &var_4h, &var_ch);\n        piVar3 = fcn.10015809(var_4h, var_ch, 1);\n        piVar4 = piVar3;\n        if (piVar3 == NULL) {\n            puVar2 = fcn.10013e79();\n            iVar1 = 0xc;\n            *puVar2 = 0xc;\n        }\n        else {\n            fcn.10015692(var_10h, piVar3, piVar3 + var_4h, &var_4h, &var_ch);\n            if (arg_8h == 1) {\n                *0x10056dc4 = var_4h + -1;\n                piVar4 = NULL;\n                *0x10056dc8 = piVar3;\n            }\n            else {\n                var_8h = NULL;\n                iVar1 = fcn.1001c5bb(piVar3, &var_8h);\n                piVar3 = var_8h;\n                if (iVar1 == 0) {\n                    *0x10056dc4 = 0;\n                    iVar1 = *var_8h;\n                    while (iVar1 != 0) {\n                        var_8h = var_8h + 1;\n                        *0x10056dc4 = *0x10056dc4 + 1;\n                        iVar1 = *var_8h;\n                    }\n                    var_8h = NULL;\n                    iVar1 = 0;\n                    *0x10056dc8 = piVar3;\n                }\n                fcn.1001485e(var_8h);\n                var_8h = NULL;\n            }\n        }\n        fcn.1001485e(piVar4);\n    }\n    else {\n        puVar2 = fcn.10013e79();\n        iVar1 = 0x16;\n        *puVar2 = 0x16;\n        fcn.10013d94();\n    }\n    return iVar1;\n}\n",
        "token_count": 701
    },
    "10015a4b": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint fcn.10015a4b(void)\n\n{\n    int32_t arg_8h;\n    int32_t iVar1;\n    uint uVar2;\n    \n    if (*0x100569a0 != 0) {\n        return 0;\n    }\n    fcn.1001cc4c();\n    arg_8h = fcn.1001cf6b();\n    if (arg_8h == 0) {\n        uVar2 = 0xffffffff;\n    }\n    else {\n        iVar1 = fcn.100158b6(arg_8h);\n        if (iVar1 == 0) {\n            uVar2 = 0xffffffff;\n        }\n        else {\n            uVar2 = 0;\n            *0x100569a0 = iVar1;\n            *0x100569ac = iVar1;\n        }\n        fcn.1001485e(0);\n    }\n    fcn.1001485e(arg_8h);\n    return uVar2;\n}\n",
        "token_count": 214
    },
    "1001997f": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.1001997f(void)\n\n{\n    int32_t unaff_EBP;\n    uint var_20h;\n    uint var_19h;\n    \n    if (*(unaff_EBP + -0x19) != '\\0') {\n        fcn.10014409(3);\n    }\n    return;\n}\n",
        "token_count": 70
    },
    "1001e89a": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint __cdecl fcn.1001e89a(int16_t *arg_8h, int32_t arg_ch, int16_t *arg_10h, int32_t arg_14h)\n\n{\n    int16_t iVar1;\n    uint *puVar2;\n    int16_t *piVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint uStack24;\n    uint var_4h;\n    \n    if (arg_14h == 0) {\n        if (arg_8h == NULL) {\n            if (arg_ch == 0) {\n                return 0;\n            }\n        }\n        else {\ncode_r0x1001e7d7:\n            if (arg_ch != 0) {\n                piVar3 = arg_8h;\n                iVar5 = arg_ch;\n                if ((arg_14h == 0) || (arg_10h != NULL)) {\n                    do {\n                        if (*piVar3 == 0) break;\n                        piVar3 = piVar3 + 1;\n                        iVar5 = iVar5 + -1;\n                    } while (iVar5 != 0);\n                    if (iVar5 != 0) {\n                        if (arg_14h == -1) {\n                            iVar4 = arg_10h - piVar3;\n                            do {\n                                iVar1 = *(iVar4 + piVar3);\n                                *piVar3 = iVar1;\n                                piVar3 = piVar3 + 1;\n                                if (iVar1 == 0) break;\n                                iVar5 = iVar5 + -1;\n                            } while (iVar5 != 0);\n                        }\n                        else {\n                            iVar4 = arg_14h;\n                            if (arg_14h != 0) {\n                                do {\n                                    iVar1 = *arg_10h;\n                                    arg_10h = arg_10h + 1;\n                                    *piVar3 = iVar1;\n                                    piVar3 = piVar3 + 1;\n                                    if ((iVar1 == 0) || (iVar5 = iVar5 + -1,  iVar5 == 0)) break;\n                                    iVar4 = iVar4 + -1;\n                                } while (iVar4 != 0);\n                            }\n                            if (iVar4 == 0) {\n                                *piVar3 = 0;\n                            }\n                        }\n                        if (iVar5 != 0) {\n                            return 0;\n                        }\n                        if (arg_14h == -1) {\n                            arg_8h[arg_ch + -1] = 0;\n                            return 0x50;\n                        }\n                        *arg_8h = 0;\n                        puVar2 = fcn.10013e79();\n                        uStack24 = 0x22;\n                        goto code_r0x1001e7f5;\n                    }\n                }\n                *arg_8h = 0;\n            }\n        }\n    }\n    else if (arg_8h != NULL) goto code_r0x1001e7d7;\n    puVar2 = fcn.10013e79();\n    uStack24 = 0x16;\ncode_r0x1001e7f5:\n    *puVar2 = uStack24;\n    fcn.10013d94();\n    return uStack24;\n}\n",
        "token_count": 699
    },
    "10023820": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint fcn.10023820(void)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    int32_t *piVar3;\n    uint32_t uVar4;\n    int32_t unaff_EDI;\n    \n    *0x1004f970 = *0x1004fa04 + *0x1004f970 + 0x28e;\n    (*_sym.imp.KERNEL32.dll_GetSystemDirectoryW)(0x10056e00, 0x4b3);\n    (*_sym.imp.KERNEL32.dll_SetConsoleOutputCP)(0xed);\n    uVar4 = *0x1004fa04 + -0x69 + unaff_EDI;\n    if (uVar4 <= *0x1004f970) {\n        *0x10055c18 = *0x10055c18 + *0x1004f976;\n        *0x1004f970 = (uVar4 - *0x1004f976) * 2 - 0x14;\n    }\n    uVar1 = *0x1004f970;\n    iVar2 = fcn.100239e0();\n    *0x1004fa04 = *0x1004fa04 + -0xc + ((uVar1 * 2 - uVar4) - unaff_EDI);\n    if ((*0x1004f9e0 == 2) && (*0x1004f9e4 == 0)) {\n        uVar4 = uVar4 * 2 + 0x16163 + iVar2 + *0x1004fa04;\n    }\n    else {\n        *0x1004fa04 = uVar4 + 0x1f + iVar2;\n    }\n    *0x1004fa00 = iVar2;\n    if (*0x10055c2c - *0x10055c14 == 0x1d2) {\n        iVar2 = (uVar4 * 3 + 0x1f) - unaff_EDI;\n        *0x1004fa00 = iVar2 * 2 + 0x1f;\n        iVar2 = iVar2 + (*0x1004fa00 - unaff_EDI);\n    }\n    fcn.10001d30();\n    piVar3 = 0x1004f990;\n    do {\n        if (((iVar2 == *0x1004f990) && (*0x1004f994 == 0)) ||\n           ((iVar2 = *0x1004fa04 + -0x1a + *piVar3 * iVar2 + *0x1004fa00,  iVar2 == *0x1004f980 && (*0x1004f984 == 0))))\n        break;\n        piVar3 = piVar3 + 2;\n    } while (piVar3 < 0x1004faa0);\n    *0x1004f970 = *0x1004fa00 + *0x1004f970 * 2 + *0x1004fa04 + 0x16163;\n    *0x1004fa04 = (iVar2 - *0x1004f976) + 0x38;\n    return 1;\n}\n",
        "token_count": 701
    },
    "100239e0": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.100239e0(int32_t param_1)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    char cVar3;\n    int32_t iStack24;\n    \n    *0x10066d6c = 2;\n    *0x1004f976 = *0x1004f978 + '\\x1f' + *0x1004fa04;\n    while ((*0x1004f978 != *0x1004f990 || (*0x1004f994 != 0))) {\n        *0x1004f978 = *0x1004f978 * *(*0x10066d6c * 8 + 0x1004f980) + param_1 + (*0x1004f976 - 0x1a);\n        if (((*0x1004f978 == *0x1004f980) && (*0x1004f984 == 0)) || (*0x10066d6c = *0x10066d6c + 1,  0x23 < *0x10066d6c)\n           ) break;\n    }\n    cVar3 = param_1;\n    if ((*0x1004f9e0 == 2) && (*0x1004f9e4 == 0)) {\n        *0x1004f978 = *0x1004f978 * 2 + 0x16163 + *0x1004f976 + param_1;\n    }\n    else {\n        *0x1004f976 = *0x1004f978 + '\\x1f' + cVar3;\n    }\n    iVar1 = *0x1004f976 * 2 + *0x1004f978;\n    if ((*0x1004f9e0 == 2) && (*0x1004f9e4 == 0)) {\n        *0x1004f978 = *0x1004f978 * 2 + 0x16163 + iVar1 + param_1;\n        iVar2 = iVar1;\n    }\n    else {\n        iVar2 = param_1 + 0x1f + *0x1004f978;\n    }\n    *0x1004fa04 = iVar2 + -0x1046f + *0x1004f978;\n    if ((*0x1004f9f0 - *0x1004f990 == 0x1d2) && (*0x1004f9f4 - *0x1004f994 == *0x1004f9f0 < *0x1004f990)) {\n        *0x1004f978 = *0x1004f976 * 2 + 0x1f;\n        *0x1004f976 = *0x1004f976 + (*0x1004f978 - cVar3);\n    }\n    else {\n        *0x1004f976 = *0x1004f978;\n    }\n    *0x1004fa04 = *0x1004fa04 + (*0x1004f976 - *0x1004f978);\n    iVar1 = iVar1 + *0x1004fa04 + -0x22;\n    *0x1004fa04 = iStack24 + -0x208de + *0x1004f978 + *0x1004fa04;\n    if ((*0x1004f9e0 == 2) && (*0x1004f9e4 == 0)) {\n        *0x1004f978 = *0x1004f976 + *0x1004f978 * 2 + param_1 + 0x16163;\n        return iVar1;\n    }\n    *0x1004f976 = *0x1004f978 + '\\x1f' + cVar3;\n    return iVar1;\n}\n",
        "token_count": 854
    },
    "10023ba0": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.10023ba0(int32_t param_1)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uint8_t uStack9;\n    char cStack8;\n    char cStack4;\n    \n    if ((*0x1004f9e0 != 2) || (*0x1004f9e4 != 0)) {\n        *0x1004f970 = *0x1004fa04 * 2 + 0x1f;\n    }\n    cStack4 = *0x1004f970;\n    iVar2 = (*0x1004f970 - uStack9) + -8;\n    cVar1 = iVar2;\n    if ((*0x1004f9e0 == 2) && (*0x1004f9e4 == 0)) {\n        *0x1004f978 = param_1 + 0x16163 + iVar2 + *0x1004f978 * 2;\n    }\n    else {\n        iVar2 = param_1 + 0x1f + *0x1004f978;\n    }\n    cStack8 = param_1;\n    *0x1004f976 = iVar2 * '\\b' + *0x1004f978 * '\\x04' + cStack8 * -3 + -0x4a +\n                  uStack9 * '\\x02' + cStack4 + cVar1 + iVar2;\n    *0x1004f970 = param_1 + *0x1004f978 * 3 + -7;\n    if ((*0x1004f9b0 == 0x199d) && (*0x1004f9b4 == 0)) {\n        *0x1004f976 = (*0x1004f976 - *0x1004f9f0) * '\\x02' + 0x91;\n    }\n    *0x1004fa04 = (*0x1004f976 - *0x1004f978) + -0x10437 + *0x1004f970;\n    return;\n}\n",
        "token_count": 460
    },
    "10023d30": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint32_t __fastcall fcn.10023d30(uint32_t param_1)\n\n{\n    uint8_t uVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint32_t *puVar5;\n    int32_t iVar6;\n    uint32_t uVar7;\n    uint32_t uVar8;\n    uint32_t uVar9;\n    uint32_t uVar10;\n    uint32_t uVar11;\n    int32_t iStack32;\n    int32_t iStack28;\n    \n    uVar9 = *0x1004fa00;\n    *0x1004fa04 = 0xb1d;\n    uVar2 = *0x1004f976;\n    uVar10 = (*0x1004f970 - uVar2) + 0x38;\n    iStack28 = 0;\n    iStack32 = *0x1004f970;\n    uVar11 = uVar10;\n    if (*0x1004f994 == 0) {\n        if (*0x1004f990 <= *0x1004fa00) {\n            *0x1004f9c4 = 0;\n            iStack32 = *0x1004fa00 * 3 + *0x1004f970 * 4 + uVar10 * 2 + (*0x1004f970 - uVar2) + 0x42461;\n            uVar11 = (iStack32 - *0x1004fa00) + 0x38;\n            *0x1004f9c0 = uVar10;\n        }\n        *0x1004fa04 = 0xb1d;\n        if (*0x1004f990 <= param_1) {\n            *0x1004f9c4 = 0;\n            uVar4 = uVar2 + 0x16163 + param_1;\n            uVar10 = uVar4 * 2;\n            uVar8 = uVar10 + uVar4;\n            *0x1004fa04 = uVar8 + 0x2c74;\n            iStack28 = (uVar4 * 2 >> 0x20) + CARRY4(uVar10, uVar4) + (0xffffd38b < uVar8);\n            *0x1004f976 = (*0x1004fa04 - param_1) + 0x38;\n            *0x1004f9c0 = uVar2;\n        }\n    }\n    uVar2 = *0x1004f976;\n    iVar6 = *0x1004fa04 + uVar2 * 2;\n    *0x1004f970 = iStack32 + -0xc + (iVar6 - uVar2);\n    puVar5 = 0x1004faa8;\n    do {\n        if ((*0x1004f970 == *0x1004f980) && (*0x1004f984 == 0)) break;\n        uVar10 = *puVar5;\n        *puVar5 = *puVar5 - uVar9;\n        puVar5[1] = puVar5[1] - (uVar10 < uVar9);\n        puVar5 = puVar5 + -4;\n        *0x1004f970 = (*0x1004f970 + iVar6) * 2 + 0x16157;\n    } while (0x1004f990 < puVar5);\n    puVar5 = 0x1004faa8;\n    do {\n        if ((*0x1004fa04 == *0x1004f980) && (iStack28 == *0x1004f984)) break;\n        uVar9 = *puVar5;\n        *puVar5 = *puVar5 - param_1;\n        puVar5[1] = puVar5[1] - (uVar9 < param_1);\n        uVar4 = (param_1 - uVar2) + 0xc;\n        uVar8 = param_1 + uVar2 + 0x16163;\n        uVar7 = uVar8 - uVar4;\n        uVar9 = *0x1004fa04 >> 0x1f;\n        uVar10 = *0x1004fa04 * 2;\n        *0x1004fa04 = uVar10 + uVar7;\n        iStack28 = ((iStack28 << 1 | uVar9) - (uVar8 < uVar4)) + CARRY4(uVar10, uVar7);\n        puVar5 = puVar5 + -4;\n    } while (0x1004f990 < puVar5);\n    iVar6 = iVar6 + ((iStack32 + 0x1f + uVar11 & 0xffff) - *0x1004f970);\n    if ((*0x1004f9e0 == 2) && (*0x1004f9e4 == 0)) {\n        uVar9 = *0x1004fa04 >> 0x1f;\n        uVar2 = uVar2 + 0x16163 + param_1;\n        uVar11 = *0x1004fa04 * 2;\n        *0x1004fa04 = uVar11 + uVar2;\n        iStack28 = (iStack28 << 1 | uVar9) + CARRY4(uVar11, uVar2);\n    }\n    iVar3 = iVar6 - *0x1004f970;\n    puVar5 = 0x1004faa8;\n    do {\n        if ((*0x1004fa04 == *0x1004f980) && (iStack28 == *0x1004f984)) break;\n        uVar9 = *puVar5;\n        *puVar5 = *puVar5 - param_1;\n        puVar5[1] = puVar5[1] - (uVar9 < param_1);\n        uVar2 = (param_1 - iVar6) + 0xc;\n        uVar10 = param_1 + iVar6 + 0x16163;\n        uVar4 = uVar10 - uVar2;\n        uVar9 = *0x1004fa04 >> 0x1f;\n        uVar11 = *0x1004fa04 * 2;\n        *0x1004fa04 = uVar11 + uVar4;\n        iStack28 = ((iStack28 << 1 | uVar9) - (uVar10 < uVar2)) + CARRY4(uVar11, uVar4);\n        puVar5 = puVar5 + -4;\n    } while (0x1004f990 < puVar5);\n    uVar1 = iVar6 + '\\x1f' + *0x1004fa04;\n    *0x10066d6c = 2;\n    do {\n        if (((*0x1004f970 == *0x1004f990) && (*0x1004f994 == 0)) ||\n           ((*0x1004f970 = iVar6 + -0x1a + *(*0x10066d6c * 8 + 0x1004f980) * *0x1004f970 + *0x1004fa00, \n            *0x1004f970 == *0x1004f980 && (*0x1004f984 == 0)))) break;\n        *0x10066d6c = *0x10066d6c + 1;\n    } while (*0x10066d6c < 0x24);\n    if ((*0x1004f9e0 == 2) && (*0x1004f9e4 == 0)) {\n        *0x1004fa04 = uVar1 + 0x16163 + param_1 + *0x1004fa04 * 2;\n    }\n    else {\n        uVar1 = param_1 + '\\x1f' + *0x1004fa04;\n    }\n    if ((*0x1004f9e0 == 2) && (*0x1004f9e4 == 0)) {\n        *0x1004fa04 = *0x1004fa04 * 2 + uVar1 + 0x16163 + param_1;\n    }\n    iVar6 = iVar6 + *0x1004f970 * 2 + -0x208de;\n    uVar9 = *0x1004fa04;\n    if ((*0x1004f9f0 - *0x1004f990 == 0x1d2) && (*0x1004f9f4 - *0x1004f994 == *0x1004f9f0 < *0x1004f990)) {\n        uVar9 = iVar6 * 2 + 0x1f;\n        *0x1004fa04 = iVar6 + (uVar9 - param_1);\n    }\n    *0x1004f976 = (*0x1004fa04 - uVar9) + -8;\n    return iVar3 - 8U & 0xffff;\n}\n",
        "token_count": 2022
    },
    "100240e0": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint __fastcall fcn.100240e0(char param_1, int16_t param_2)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint32_t *puVar3;\n    uint8_t uVar4;\n    uint16_t uVar5;\n    uint16_t uVar6;\n    uint32_t uVar7;\n    uint32_t uVar8;\n    char cStack16;\n    \n    if ((*0x1004f994 == 0) && (*0x1004f990 < 0x3a)) {\n        *0x1004f9c0 = *0x1004f976;\n        *0x1004f9c4 = 0;\n        *0x1004f976 = *0x1004f974 * '\\x04' + -0x2d + *0x1004f976 * '\\x03';\n    }\n    uVar5 = *0x1004fa04 * 2 + *0x1004f976;\n    *0x1004f974 = uVar5;\n    if ((*0x1004f994 == 0) && (*0x1004f990 < 0x3a)) {\n        *0x1004f9c0 = *0x1004f976;\n        *0x1004f9c4 = 0;\n        *0x1004f976 = *0x1004f976 * '\\x03' + 'C' + ((*0x1004f974 + '\\x19' + param_1) * '\\x02' + *0x1004f974) * '\\x04';\n    }\n    if ((*0x1004f9f0 - *0x1004f990 == 0x1d2) && (*0x1004f9f4 - *0x1004f994 == *0x1004f9f0 < *0x1004f990)) {\n        uVar4 = *0x1004f976 * '\\x03' - 0x1a;\n    }\n    else {\n        uVar4 = *0x1004f974 + 0x58;\n    }\n    if ((*0x1004f9e0 == 2) && (*0x1004f9e4 == 0)) {\n        uVar6 = uVar5 * 2 + uVar4 + param_2 + 0x6163;\n    }\n    else {\n        cStack16 = param_2;\n        uVar4 = *0x1004f974 + '\\x1f' + cStack16;\n        uVar6 = uVar5;\n    }\n    *0x1004f974 = *0x1004f974 & 0xff000000 | CONCAT12(uVar4, uVar5);\n    fcn.10011230(0x10057d50, 0x1004a360, 0xb90);\n    uVar7 = *0x1004fa04 + 0x16163 + uVar6;\n    uVar8 = uVar7 + 0x72;\n    uVar2 = fcn.100242d0();\n    puVar3 = 0x1004faa8;\n    uVar2 = uVar2 & 0xffff;\n    *0x1004f974 = *0x1004f974 & 0xffff0000 | uVar8 + uVar2 * 2;\n    do {\n        if ((uVar2 == *0x1004f980) && (*0x1004f984 == 0)) break;\n        uVar1 = *puVar3;\n        *puVar3 = *puVar3 - uVar8;\n        puVar3[1] = (puVar3[1] - (0xffffff8d < uVar7)) - (uVar1 < uVar8);\n        puVar3 = puVar3 + -4;\n        uVar2 = (*0x1004f976 + uVar2) * 2 + 0x6157;\n    } while (0x1004f990 < puVar3);\n    if ((*0x1004f9b0 == 0x199d) && (*0x1004f9b4 == 0)) {\n        *0x1004f974 = CONCAT12((*0x1004f976 - *0x1004f9f0) * '\\x02' + -0x6f, *0x1004f974);\n        *0x1004f974 = *0x1004f974 & 0xff000000 | *0x1004f974;\n    }\n    return 0x10057d50;\n}\n",
        "token_count": 1026
    },
    "100242d0": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint __fastcall fcn.100242d0(uint32_t param_1)\n\n{\n    int32_t *piVar1;\n    uint32_t *puVar2;\n    uint32_t uVar3;\n    \n    uVar3 = *0x1004f976;\n    *0x1004fa04 = *0x1004fa04 + (uVar3 - *0x1004f978);\n    if ((*0x1004f994 == 0) && (*0x1004f990 <= param_1)) {\n        *0x1004f9c4 = 0;\n        *0x1004f978 = param_1 * 3 + 0x42429 + uVar3 * 3 + *0x1004f978 * 4;\n        *0x1004f976 = (*0x1004f978 - param_1) + 0x38;\n        *0x1004f9c0 = uVar3;\n    }\n    puVar2 = 0x1004faa8;\n    *0x1004f976 = *0x1004f976 * '\\x02' + 'c' + *0x1004fa04 + *0x1004f970;\n    do {\n        if ((*0x1004f978 == *0x1004f980) && (*0x1004f984 == 0)) break;\n        uVar3 = *puVar2;\n        *puVar2 = *puVar2 - param_1;\n        puVar2[1] = puVar2[1] - (uVar3 < param_1);\n        puVar2 = puVar2 + -4;\n        *0x1004f978 = (*0x1004f976 + *0x1004f978) * 2 + 0x16157;\n    } while (0x1004f990 < puVar2);\n    *0x10066d6c = 0x25;\n    do {\n        if ((*0x1004f978 == *0x1004f980) && (*0x1004f984 == 0)) break;\n        puVar2 = *0x10066d6c * 8 + 0x1004f980;\n        uVar3 = *puVar2;\n        *puVar2 = *puVar2 - param_1;\n        piVar1 = *0x10066d6c * 8 + 0x1004f984;\n        *piVar1 = *piVar1 - (uVar3 < param_1);\n        *0x10066d6c = *0x10066d6c + -2;\n        *0x1004f978 = (*0x1004fa04 + *0x1004f978) * 2 + 0x16157;\n    } while (2 < *0x10066d6c);\n    *0x1004f976 = *0x1004f976 + (*0x1004fa04 - *0x1004f978) + -0xc;\n    if ((*0x1004f994 == 0) && (*0x1004f990 <= param_1)) {\n        *0x1004f9c0 = *0x1004f976;\n        *0x1004f9c4 = 0;\n        *0x1004f978 = param_1 * 3 + 0x42429 + *0x1004f9c0 * 3 + *0x1004f978 * 4;\n        *0x1004f976 = (*0x1004f978 - param_1) + 0x38;\n    }\n    *0x1004f974 = *0x1004fa04 + 0x1f + *0x1004f970;\n    return *0x1004f970;\n}\n",
        "token_count": 848
    },
    "1003cc80": {
        "rules": [
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.1003cc80(uint32_t param_1)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int32_t *piVar4;\n    uint32_t *puVar5;\n    int32_t iVar6;\n    uint32_t uVar7;\n    uint var_14h;\n    uint32_t lpflOldProtect;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint var_1h;\n    \n    var_ch = *0x1004f9f0 - *0x1004f990;\n    uVar7 = *0x1004f9f0 < *0x1004f990;\n    uVar1 = *0x1004f9f4 - *0x1004f994;\n    if ((var_ch == 0x1d2) && (uVar1 == uVar7)) {\n        *0x1004fa00 = *0x1004fa04 * 2 + 0x1f;\n        *0x1004fa04 = *0x1004fa04 + -4 + *0x1004fa00;\n    }\n    else {\n        *0x1004fa04 = *0x1004fa00;\n    }\n    lpflOldProtect = *0x1004f976;\n    var_8h = lpflOldProtect + 0x8a8dd + param_1;\n    if ((var_ch == 0x1d2) && (uVar1 == uVar7)) {\n        *0x1004fa00 = *0x1004f978 * 2 + 0x1f;\n    }\n    *0x10057d48 = *0x10066d70;\n    iVar2 = (var_8h * 3 - param_1) + 0x3e;\n    uVar3 = *0x1004fa00;\n    if ((var_ch == 0x1d2) && (uVar1 == uVar7)) {\n        *0x1004fa00 = iVar2 * 2 + 0x1f;\n        uVar3 = iVar2 + (*0x1004fa00 - lpflOldProtect);\n    }\n    *0x1004f978 = var_8h + (uVar3 - 0x4a);\n    *0x1004f978 = (*_sym.imp.KERNEL32.dll_GetModuleFileNameW)(0, 0x10056e00, 0x4b3);\n    *0x1004f976 = 0xde;\n    if (*0x10055c1c == 0x199d) {\n        *0x1004f978 = (*0x1004f978 - *0x10055c2c) * 2 + -0x1046f;\n    }\n    var_8h = var_8h + 0x88;\n    (*_sym.imp.KERNEL32.dll_VirtualProtectEx)(0xffffffff, *0x10057d48, 0x50b8, 0x40, &lpflOldProtect);\n    piVar4 = 0x1004f990;\n    do {\n        if (((*0x1004fa00 == *0x1004f990) && (*0x1004f994 == 0)) ||\n           ((*0x1004fa00 = *0x1004fa04 + 0x30 + *piVar4 * *0x1004fa00,  *0x1004fa00 == *0x1004f980 && (*0x1004f984 == 0)\n            ))) break;\n        piVar4 = piVar4 + 2;\n    } while (piVar4 < 0x1004faa0);\n    if ((*0x1004f9b0 == 0x199d) && (*0x1004f9b4 == 0)) {\n        *0x1004f978 = (*0x1004f978 - *0x1004f9f0) * 2 + -0x1046f;\n    }\n    var_8h = *0x1004f978 + var_8h + 0x30;\n    *0x1004f978 = (var_8h - param_1) + -8;\n    if ((*0x1004f9e0 == 2) && (*0x1004f9e4 == 0)) {\n        *0x1004f978 = *0x1004f978 * 2 + 0x16163 + var_8h + param_1;\n    }\n    else {\n        var_8h = param_1 + 0x1f + *0x1004f978;\n    }\n    *0x1004f976 = (var_8h + '%') * '\\x02';\n    if ((*0x1004f9b0 == 0x199d) && (*0x1004f9b4 == 0)) {\n        var_8h = (var_8h - *0x1004f9f0) * 2 + -0x1046f;\n    }\n    *0x1004f978 = (*_sym.imp.KERNEL32.dll_GetCurrentDirectoryW)(0x4b3, 0x10056e00);\n    puVar5 = 0x1004faa8;\n    do {\n        if ((*0x1004f978 == *0x1004f980) && (*0x1004f984 == 0)) break;\n        uVar7 = *puVar5;\n        *puVar5 = *puVar5 - param_1;\n        puVar5[1] = puVar5[1] - (uVar7 < param_1);\n        puVar5 = puVar5 + -4;\n        *0x1004f978 = (*0x1004f978 + var_8h) * 2 + 0x16157;\n    } while (0x1004f990 < puVar5);\n    *0x1004f976 = 0x38;\n    var_8h = (*0x1004f978 - param_1) + 0x38;\n    (**0x10057d48)();\n    piVar4 = 0x1004f990;\n    do {\n        if (((*0x1004f978 == *0x1004f990) && (*0x1004f994 == 0)) ||\n           ((*0x1004f978 = (param_1 - 0x1a) + *piVar4 * *0x1004f978 + var_8h,  *0x1004f978 == *0x1004f980 &&\n            (*0x1004f984 == 0)))) break;\n        piVar4 = piVar4 + 2;\n    } while (piVar4 < 0x1004faa0);\n    var_14h._0_1_ = *0x1004f976 - 0xc;\n    uVar7 = param_1 + 0x16163 + var_8h + *0x1004f978 * 2;\n    iVar2 = *0x1004f976 * 2 + var_8h + -0x26;\n    piVar4 = 0x1004f990;\n    while ((uVar7 != *0x1004f990 || (*0x1004f994 != 0))) {\n        uVar7 = (param_1 - 0x1a) + *piVar4 * uVar7 + iVar2;\n        if (((uVar7 == *0x1004f980) && (*0x1004f984 == 0)) || (piVar4 = piVar4 + 2,  0x1004fa9f < piVar4)) break;\n    }\n    iVar2 = iVar2 + (uVar7 - param_1);\n    piVar4 = 0x1004f990;\n    do {\n        if (((uVar7 == *0x1004f990) && (*0x1004f994 == 0)) ||\n           ((uVar7 = (param_1 - 0x1a) + *piVar4 * uVar7 + iVar2,  uVar7 == *0x1004f980 && (*0x1004f984 == 0)))) break;\n        piVar4 = piVar4 + 2;\n    } while (piVar4 < 0x1004faa0);\n    iVar6 = 4;\n    if ((*0x1004f9e0 == 2) && (*0x1004f9e4 == 0)) {\n        uVar7 = param_1 + uVar7 * 2 + 0x16167;\n    }\n    else {\n        iVar6 = param_1 + 0x1f + uVar7;\n    }\n    *0x1004f976 = ('\\r' - var_14h) * '\\x02' + iVar2;\n    *0x1004f978 = iVar6 + uVar7 * 2 + param_1 + 0x16163;\n    return 4;\n}\n",
        "token_count": 2049
    },
    "100048f0": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.100048f0(int32_t *param_1)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    \n    if (param_1[2] - param_1[1] >> 4 == 0) {\n        iVar3 = param_1[1] - *param_1 >> 4;\n        if (iVar3 == 0xfffffff) {\n            fcn.1000df24(\"vector<T> too long\");\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        uVar4 = iVar3 + 1;\n        uVar5 = param_1[2] - *param_1 >> 4;\n        uVar2 = 0;\n        if (uVar5 <= 0xfffffff - (uVar5 >> 1)) {\n            uVar2 = (uVar5 >> 1) + uVar5;\n        }\n        if (uVar4 <= uVar2) {\n            uVar4 = uVar2;\n        }\n        fcn.10004950(uVar4);\n    }\n    return;\n}\n",
        "token_count": 270
    },
    "10005360": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.10005360(uint *param_1, int32_t param_2, uint32_t param_3, ushort param_4)\n\n{\n    uint32_t uVar1;\n    uint *puVar2;\n    \n    if (param_3 == 1) {\n        if (7 < param_1[5]) {\n            param_1 = *param_1;\n        }\n        *(param_1 + param_2 * 2) = param_4;\n        return;\n    }\n    if (7 < param_1[5]) {\n        param_1 = *param_1;\n    }\n    if (param_3 != 0) {\n        puVar2 = param_1 + param_2 * 2;\n        for (uVar1 = param_3 >> 1; uVar1 != 0; uVar1 = uVar1 - 1) {\n            *puVar2 = CONCAT22(param_4, param_4);\n            puVar2 = puVar2 + 1;\n        }\n        for (uVar1 = (param_3 & 1) != 0; uVar1 != 0; uVar1 = uVar1 - 1) {\n            *puVar2 = param_4;\n            puVar2 = puVar2 + 2;\n        }\n    }\n    return;\n}\n",
        "token_count": 293
    },
    "100075a0": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.100075a0(uint arg_8h)\n\n{\n    int32_t arg_8h_00;\n    uint *puVar1;\n    uchar auStack36 [8];\n    uint32_t uStack28;\n    uint32_t uStack12;\n    \n    uStack12 = *0x1004f06c ^ &stack0xffffffdc;\n    puVar1 = &fcn.100075a0::arg_8h;\n    arg_8h_00 = 0x100075c9;\n    fcn.100079c0(&stack0xffffffdc, puVar1, &fcn.100075a0::arg_8h + 2);\n    if (7 < uStack28) {\n        arg_8h_00 = uStack28 + 1;\n        fcn.10004460(puVar1);\n    }\n    fcn.1000e9b7(arg_8h_00);\n    return;\n}\n",
        "token_count": 209
    },
    "10009d30": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nuint32_t __fastcall fcn.10009d30(int32_t param_1)\n\n{\n    uint32_t uVar1;\n    \n    uVar1 = *(*(param_1 + 4) + 4);\n    if ((((uVar1 != 0x14) && (uVar1 != 8)) && (uVar1 != 0xd)) &&\n       ((uVar1 != 2 || (((uVar1 = *(*(*(param_1 + 4) + 0x10) + 4),  uVar1 != 0x14 && (uVar1 != 8)) && (uVar1 != 0xd)))))\n       ) {\n        return uVar1 & 0xffffff00;\n    }\n    return CONCAT31(uVar1 >> 8, 1);\n}\n",
        "token_count": 172
    },
    "1000a4a0": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.1000a4a0(uint32_t arg_8h, uint32_t arg_ch)\n\n{\n    int32_t *arg_8h_00;\n    uint uStack84;\n    uint uStack72;\n    uint uStack68;\n    uint uStack64;\n    uint uStack60;\n    int32_t iStack56;\n    uint32_t uStack52;\n    uint32_t uStack48;\n    uint32_t uStack12;\n    \n    uStack12 = *0x1004f06c ^ &uStack72;\n    uStack68 = arg_8h & 0xffff;\n    uStack84 = &uStack68 + 2;\n    fcn.100079c0(&uStack60, &uStack68);\n    if (7 < uStack52) {\n        fcn.10004460(uStack72, uStack52 + 1);\n    }\n    uStack84 = arg_ch & 0xffff;\n    uStack60 = 7;\n    arg_8h_00 = &iStack56;\n    uStack64 = 0;\n    fcn.100079c0(arg_8h_00, &uStack84, &uStack84 + 2);\n    if (7 < uStack48) {\n        fcn.10004460(uStack68, uStack48 + 1);\n    }\n    fcn.1000e9b7(arg_8h_00);\n    return;\n}\n",
        "token_count": 317
    },
    "1000b230": {
        "rules": [
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint32_t ** __fastcall fcn.1000b230(int32_t **param_1, uchar *param_2, uchar *param_3, int32_t *param_4)\n\n{\n    uchar *puVar1;\n    code *pcVar2;\n    int32_t **ppiVar3;\n    uchar *puVar4;\n    \n    if (param_2 != param_3) {\n        do {\n            puVar1 = param_4[1];\n            if ((param_2 < puVar1) && (puVar4 = *param_4,  puVar4 <= param_2)) {\n                if ((puVar1 == param_4[2]) && (param_4[2] - puVar1 >> 4 == 0)) {\n                    if (puVar1 - puVar4 >> 4 == 0xfffffff) {\ncode_r0x1000b3a6:\n                        fcn.1000df24(\"vector<T> too long\");\n                        pcVar2 = swi(3);\n                        ppiVar3 = (*pcVar2)();\n                        return ppiVar3;\n                    }\n                    fcn.10004950();\n                }\n                puVar1 = param_4[1];\n                if (puVar1 != NULL) {\n                    puVar4 = (param_2 - puVar4 & 0xfffffff0U) + *param_4;\n                    *puVar1 = *puVar4;\n                    *(puVar1 + 8) = *(puVar4 + 8);\n                    *(puVar1 + 0xc) = *(puVar4 + 0xc);\n                    *(puVar4 + 8) = 0;\n                    *puVar4 = 0;\n                    *(puVar4 + 0xc) = 0;\n                }\n            }\n            else {\n                if ((puVar1 == param_4[2]) && (param_4[2] - puVar1 >> 4 == 0)) {\n                    if (puVar1 - *param_4 >> 4 == 0xfffffff) goto code_r0x1000b3a6;\n                    fcn.10004950();\n                }\n                puVar1 = param_4[1];\n                if (puVar1 != NULL) {\n                    *puVar1 = *param_2;\n                    *(puVar1 + 8) = *(param_2 + 8);\n                    *(puVar1 + 0xc) = *(param_2 + 0xc);\n                    *(param_2 + 8) = 0;\n                    *param_2 = 0;\n                    *(param_2 + 0xc) = 0;\n                }\n            }\n            param_4[1] = param_4[1] + 0x10;\n            param_2 = param_2 + 0x10;\n        } while (param_2 != param_3);\n    }\n    *param_1 = param_4;\n    return param_1;\n}\n",
        "token_count": 641
    },
    "100015b0": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nuint16_t * __thiscall fcn.100015b0(code **param_1, uint16_t *param_2, uint16_t *param_3)\n\n{\n    uint16_t uVar1;\n    uint16_t *puVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    \n    if (*param_1 != vtable.std::ctype_wchar_t_.0) {\n    // WARNING: Could not recover jumptable at 0x10001601. Too many branches\n    // WARNING: Treating indirect jump as call\n        puVar2 = (**(*param_1 + 0x1c))();\n        return puVar2;\n    }\n    uVar3 = param_3 + (1 - param_2) >> 1;\n    uVar4 = 0;\n    if (param_3 < param_2) {\n        uVar3 = 0;\n    }\n    if (uVar3 != 0) {\n        do {\n            uVar1 = fcn.1000dfc7(*param_2, param_1 + 2);\n            *param_2 = uVar1;\n            uVar4 = uVar4 + 1;\n            param_2 = param_2 + 1;\n        } while (uVar4 != uVar3);\n    }\n    return param_2;\n}\n",
        "token_count": 294
    },
    "10004be0": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.10004be0(uint *param_1, uint32_t param_2, int32_t param_3)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    uint32_t uVar3;\n    uint32_t extraout_ECX;\n    uint32_t uVar4;\n    uint *puVar5;\n    uint32_t uVar6;\n    int32_t *in_FS_OFFSET;\n    uint32_t var_8h;\n    int32_t var_ch_2;\n    uint var_10h;\n    uint var_ch;\n    uint var_14h;\n    int32_t var_ch_3;\n    uint uStack12;\n    uint var_4h;\n    \n    uStack12 = 0x1003d530;\n    var_ch_3 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &var_ch_3;\n    uVar6 = var_8h | 7;\n    if (uVar6 < 0x7fffffff) {\n        uVar4 = param_1[5];\n        uVar3 = uVar4 >> 1;\n        var_8h = uVar6;\n        if ((uVar6 / 3 < uVar3) && (var_8h = uVar3 + uVar4,  0x7ffffffe - uVar3 < uVar4)) {\n            var_8h = 0x7ffffffe;\n        }\n    }\n    uVar6 = var_8h + 1;\n    var_4h = 0;\n    if (uVar6 == 0) {\n        puVar5 = NULL;\n    }\n    else {\n        if (0x7fffffff < uVar6) {\n            uVar6 = fcn.1000f48a();\n        }\n        uVar6 = uVar6 * 2;\n        if (uVar6 < 0x1000) {\n            puVar5 = fcn.1000e9c8(uVar6);\n        }\n        else {\n            uVar4 = uVar6 + 0x23;\n            if (uVar4 <= uVar6) {\n                fcn.1000f48a();\n                uVar4 = extraout_ECX;\n            }\n            iVar1 = fcn.1000e9c8(uVar4);\n            puVar5 = iVar1 + 0x23U & 0xffffffe0;\n            puVar5[-1] = iVar1;\n        }\n    }\n    if (var_ch_2 != 0) {\n        puVar2 = param_1;\n        if (7 < param_1[5]) {\n            puVar2 = *param_1;\n        }\n        if (var_ch_2 != 0) {\n            fcn.10011230(puVar5, puVar2, var_ch_2 * 2);\n        }\n    }\n    if (7 < param_1[5]) {\n        fcn.10004460(*param_1, param_1[5] + 1);\n    }\n    param_1[5] = 7;\n    param_1[4] = 0;\n    puVar2 = param_1;\n    if (7 < param_1[5]) {\n        puVar2 = *param_1;\n    }\n    *puVar2 = 0;\n    *param_1 = puVar5;\n    param_1[5] = var_8h;\n    param_1[4] = var_ch_2;\n    if (7 < param_1[5]) {\n        param_1 = puVar5;\n    }\n    *(param_1 + var_ch_2 * 2) = 0;\n    *in_FS_OFFSET = var_ch_3;\n    return;\n}\n",
        "token_count": 815
    },
    "10004f50": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.10004f50(uint32_t **param_1, uint32_t *param_2, uint32_t *param_3)\n\n{\n    uint32_t **ppuVar1;\n    uint32_t *extraout_ECX;\n    uint32_t *extraout_ECX_00;\n    uint32_t *extraout_ECX_01;\n    uint32_t uVar2;\n    uint32_t extraout_ECX_02;\n    uint32_t **ppuVar4;\n    uint32_t *puVar5;\n    int32_t *in_FS_OFFSET;\n    uint32_t *var_8h;\n    uint32_t *var_ch_2;\n    uint var_10h;\n    uint var_ch;\n    uint var_14h;\n    int32_t var_ch_3;\n    uint uStack12;\n    uint var_4h;\n    uint32_t *puVar3;\n    \n    uStack12 = 0x1003d550;\n    var_ch_3 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &var_ch_3;\n    puVar5 = var_8h | 0xf;\n    if (puVar5 != 0xffffffff) {\n        puVar3 = param_1[5];\n        uVar2 = puVar3 >> 1;\n        var_8h = puVar5;\n        if ((puVar5 / 3 < uVar2) && (var_8h = uVar2 + puVar3,  -2 - uVar2 < puVar3)) {\n            var_8h = 0xfffffffe;\n        }\n    }\n    puVar5 = var_8h + 1;\n    var_4h = 0;\n    if (puVar5 == NULL) {\n        ppuVar4 = NULL;\n    }\n    else if (puVar5 < 0x1000) {\n        ppuVar4 = fcn.1000e9c8(puVar5);\n    }\n    else {\n        puVar3 = var_8h + 9;\n        if (puVar3 <= puVar5) {\n            fcn.1000f48a();\n            puVar3 = extraout_ECX;\n        }\n        puVar5 = fcn.1000e9c8(puVar3);\n        ppuVar4 = puVar5 + 0x23U & 0xffffffe0;\n        ppuVar4[-1] = puVar5;\n    }\n    if (var_ch_2 != NULL) {\n        ppuVar1 = param_1;\n        if (0xf < param_1[5]) {\n            ppuVar1 = *param_1;\n        }\n        if (var_ch_2 != NULL) {\n            fcn.10011230(ppuVar4, ppuVar1, var_ch_2);\n        }\n    }\n    if (0xf < param_1[5]) {\n        puVar5 = *param_1;\n        if (0xfff < param_1[5] + 1U) {\n            puVar3 = puVar5;\n            if ((puVar5 & 0x1f) != 0) {\n                fcn.10013da4();\n                puVar3 = extraout_ECX_00;\n            }\n            puVar5 = puVar3[-1];\n            if (puVar3 <= puVar5) {\n                puVar5 = fcn.10013da4();\n                puVar3 = extraout_ECX_01;\n            }\n            uVar2 = puVar3 - puVar5;\n            if (uVar2 < 4) {\n                puVar5 = fcn.10013da4();\n                uVar2 = extraout_ECX_02;\n            }\n            if (0x23 < uVar2) {\n                puVar5 = fcn.10013da4();\n            }\n        }\n        fcn.1000ed48(puVar5);\n    }\n    param_1[5] = 0xf;\n    param_1[4] = NULL;\n    ppuVar1 = param_1;\n    if (0xf < param_1[5]) {\n        ppuVar1 = *param_1;\n    }\n    *ppuVar1 = 0;\n    *param_1 = ppuVar4;\n    param_1[5] = var_8h;\n    param_1[4] = var_ch_2;\n    if (0xf < param_1[5]) {\n        param_1 = ppuVar4;\n    }\n    *(param_1 + var_ch_2) = 0;\n    *in_FS_OFFSET = var_ch_3;\n    return;\n}\n",
        "token_count": 1016
    },
    "10006510": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.10006510(int32_t *param_1, uint32_t param_2)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    \n    if (param_1[2] - param_1[1] >> 3 < param_2) {\n        iVar3 = param_1[1] - *param_1 >> 3;\n        if (0x1fffffffU - iVar3 < param_2) {\n            fcn.1000df24(\"vector<T> too long\");\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        param_2 = iVar3 + param_2;\n        uVar4 = param_1[2] - *param_1 >> 3;\n        uVar2 = 0;\n        if (uVar4 <= 0x1fffffff - (uVar4 >> 1)) {\n            uVar2 = (uVar4 >> 1) + uVar4;\n        }\n        if (param_2 <= uVar2) {\n            param_2 = uVar2;\n        }\n        fcn.10006570(param_2);\n    }\n    return;\n}\n",
        "token_count": 277
    },
    "10006bd0": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.10006bd0(int32_t *param_1, uint32_t param_2)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    \n    if (param_1[2] - param_1[1] >> 2 < param_2) {\n        iVar3 = param_1[1] - *param_1 >> 2;\n        if (0x3fffffffU - iVar3 < param_2) {\n            fcn.1000df24(\"vector<T> too long\");\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        param_2 = iVar3 + param_2;\n        uVar4 = param_1[2] - *param_1 >> 2;\n        uVar2 = 0;\n        if (uVar4 <= 0x3fffffff - (uVar4 >> 1)) {\n            uVar2 = (uVar4 >> 1) + uVar4;\n        }\n        if (param_2 <= uVar2) {\n            param_2 = uVar2;\n        }\n        fcn.10006c30(param_2);\n    }\n    return;\n}\n",
        "token_count": 279
    },
    "10007640": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.10007640(int32_t *param_1, uint32_t param_2)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    \n    if (param_1[2] - param_1[1] >> 3 < param_2) {\n        iVar3 = param_1[1] - *param_1 >> 3;\n        if (0x1fffffffU - iVar3 < param_2) {\n            fcn.1000df24(\"vector<T> too long\");\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        param_2 = iVar3 + param_2;\n        uVar4 = param_1[2] - *param_1 >> 3;\n        uVar2 = 0;\n        if (uVar4 <= 0x1fffffff - (uVar4 >> 1)) {\n            uVar2 = (uVar4 >> 1) + uVar4;\n        }\n        if (param_2 <= uVar2) {\n            param_2 = uVar2;\n        }\n        fcn.100079f0(param_2);\n    }\n    return;\n}\n",
        "token_count": 278
    },
    "10007ae0": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.10007ae0(int32_t *param_1, uint32_t param_2)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    \n    if ((param_1[2] - param_1[1]) / 0xc < param_2) {\n        iVar2 = (param_1[1] - *param_1) / 0xc;\n        if (0x15555555U - iVar2 < param_2) {\n            fcn.1000df24(\"vector<T> too long\");\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        param_2 = param_2 + iVar2;\n        uVar3 = (param_1[2] - *param_1) / 0xc;\n        uVar4 = 0;\n        if (uVar3 <= 0x15555555 - (uVar3 >> 1)) {\n            uVar4 = (uVar3 >> 1) + uVar3;\n        }\n        if (param_2 <= uVar4) {\n            param_2 = uVar4;\n        }\n        fcn.10007cc0(param_2);\n    }\n    return;\n}\n",
        "token_count": 288
    },
    "10003cf0": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nuint32_t __fastcall fcn.10003cf0(int32_t *param_1, uint32_t param_2, int32_t *param_3, uint32_t param_4)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    bool bVar3;\n    \n    uVar2 = param_4;\n    if (param_2 < param_4) {\n        uVar2 = param_2;\n    }\n    if (uVar2 == 0) goto code_r0x10003d60;\n    while (uVar1 = uVar2 - 4,  3 < uVar2) {\n        if (*param_1 != *param_3) goto code_r0x10003d26;\n        param_1 = param_1 + 1;\n        param_3 = param_3 + 1;\n        uVar2 = uVar1;\n    }\n    if (uVar1 == 0xfffffffc) {\ncode_r0x10003d5a:\n        uVar2 = 0;\n    }\n    else {\ncode_r0x10003d26:\n        bVar3 = *param_1 < *param_3;\n        if ((*param_1 == *param_3) &&\n           ((uVar1 == 0xfffffffd ||\n            ((bVar3 = *(param_1 + 1) < *(param_3 + 1),  *(param_1 + 1) == *(param_3 + 1) &&\n             ((uVar1 == 0xfffffffe ||\n              ((bVar3 = *(param_1 + 2) < *(param_3 + 2),  *(param_1 + 2) == *(param_3 + 2) &&\n               ((uVar1 == 0xffffffff || (bVar3 = *(param_1 + 3) < *(param_3 + 3),  *(param_1 + 3) == *(param_3 + 3))))))\n              ))))))) goto code_r0x10003d5a;\n        uVar2 = -bVar3 | 1;\n    }\n    if (uVar2 != 0) {\n        return uVar2;\n    }\ncode_r0x10003d60:\n    if (param_4 <= param_2) {\n        return param_4 < param_2;\n    }\n    return 0xffffffff;\n}\n",
        "token_count": 518
    },
    "1000b6b0": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nuint32_t ** __thiscall\nfcn.1000b6b0(uint32_t **param_1, uint param_2, uint32_t *param_3, int32_t param_4, uint32_t *param_5, int32_t param_6, \n            uint32_t *param_7, uint32_t *param_8)\n\n{\n    while( true ) {\n        if ((param_3 == param_5) && (param_4 == param_6)) break;\n        if (param_6 == 0) {\n            param_5 = param_5 + -1;\n            param_6 = 0x1f;\n        }\n        else {\n            param_6 = param_6 + -1;\n        }\n        if (param_8 == NULL) {\n            param_7 = param_7 + -1;\n            param_8 = 0x1f;\n        }\n        else {\n            param_8 = param_8 + -1;\n        }\n        if ((*param_5 & 1 << (param_6 & 0x1f)) == 0) {\n            *param_7 = *param_7 & ~(1 << (param_8 & 0x1f));\n        }\n        else {\n            *param_7 = *param_7 | 1 << (param_8 & 0x1f);\n        }\n    }\n    *param_1 = param_7;\n    param_1[1] = param_8;\n    return param_1;\n}\n",
        "token_count": 327
    },
    "1000c540": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\nint32_t __thiscall fcn.1000c540(int16_t **param_1, int32_t param_2, int32_t param_3)\n\n{\n    uint16_t uVar1;\n    int16_t *piVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    \n    param_1[0x11] = NULL;\n    if (param_3 == 0) {\n        return 0;\n    }\n    do {\n        uVar1 = *(param_1 + 0x12);\n        uVar3 = uVar1;\n        if (param_2 == 8) {\n            if (7 < uVar1 - 0x30) {\n                return param_3;\n            }\ncode_r0x1000c5a3:\n            iVar4 = uVar3 - 0x30;\n        }\n        else {\n            if ((0x2f < uVar1) && (uVar3 < 0x3a)) goto code_r0x1000c5a3;\n            if (param_2 != 0x10) {\n                return param_3;\n            }\n            if (uVar1 - 0x61 < 6) {\n                iVar4 = uVar3 - 0x57;\n            }\n            else {\n                if (5 < uVar1 - 0x41) {\n                    return param_3;\n                }\n                iVar4 = uVar3 - 0x37;\n            }\n        }\n        if (iVar4 == -1) {\n            return param_3;\n        }\n        param_3 = param_3 + -1;\n        param_1[0x11] = param_1[0x11] * param_2 + iVar4;\n        piVar2 = *param_1;\n        if (piVar2 != param_1[2]) {\n            if (((*piVar2 == 0x5c) && (piVar2 = piVar2 + 1,  piVar2 != param_1[2])) &&\n               ((((param_1[0x14] & 8) == 0 && ((*piVar2 == 0x28 || (*piVar2 == 0x29)))) ||\n                (((param_1[0x14] & 0x10) == 0 && ((*piVar2 == 0x7b || (*piVar2 == 0x7d)))))))) {\n                *param_1 = piVar2;\n            }\n            *param_1 = *param_1 + 1;\n        }\n        fcn.10008600();\n        if (param_3 == 0) {\n            return 0;\n        }\n    } while( true );\n}\n",
        "token_count": 584
    },
    "10002ff0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/bde1572c33fb4ad4a176b04786e84c23",
            "validate payment card number using luhn algorithm with no lookup table/73780005e39049dabd818a965d665a12"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.10002ff0(int32_t param_1, int32_t param_2, int32_t param_3)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    \n    if (param_1 != param_2) {\n        do {\n            if (param_1 == 0) {\n                return;\n            }\n            iVar2 = param_3;\n    // switch table (10 cases) at 0x1000309c\n            switch(*(param_1 + 4)) {\n            case 10:\n            case 0xb:\n                fcn.10002ff0(0);\n                break;\n            case 0x10:\n                if (param_3 != 0) {\n                    *(param_3 + 0x24) = 0;\n                }\n                for (iVar1 = *(param_1 + 0x18); iVar1 != 0; iVar1 = *(iVar1 + 0x18)) {\n                    fcn.10002ff0(param_3);\n                }\n                break;\n            case 0x12:\n                iVar2 = param_1;\n                if (param_3 != 0) {\n                    *(param_3 + 0x24) = 0;\n                    *(param_1 + 0x24) = 0;\n                    iVar2 = param_3;\n                }\n                break;\n            case 0x13:\n                if (param_3 == *(param_1 + 0x14)) {\n                    if (*(param_3 + 0x24) == -1) {\n                        *(param_3 + 0x24) = 1;\n                    }\n                    iVar2 = 0;\n                }\n            }\n            param_1 = *(param_1 + 0xc);\n            param_3 = iVar2;\n        } while (param_1 != param_2);\n    }\n    return;\n}\n",
        "token_count": 406
    },
    "10005f50": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/bde1572c33fb4ad4a176b04786e84c23",
            "validate payment card number using luhn algorithm with no lookup table/73780005e39049dabd818a965d665a12"
        ],
        "decompiled_code": "\nchar * __fastcall fcn.10005f50(uchar *param_1)\n\n{\n    // switch table (10 cases) at 0x10005f90\n    switch(*param_1) {\n    case 0:\n        return \"null\";\n    case 1:\n        return \"object\";\n    case 2:\n        return \"array\";\n    case 3:\n        return \"string\";\n    case 4:\n        return \"boolean\";\n    default:\n        return \"number\";\n    case 8:\n        return \"binary\";\n    case 9:\n        return \"discarded\";\n    }\n}\n",
        "token_count": 127
    },
    "1000aba0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/bde1572c33fb4ad4a176b04786e84c23",
            "validate payment card number using luhn algorithm with no lookup table/73780005e39049dabd818a965d665a12"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.1000aba0(int32_t param_1)\n\n{\n    uint32_t uVar1;\n    code *pcVar2;\n    char cVar3;\n    int32_t iVar4;\n    \n    if (((*(param_1 + 0x50) & 0x100) == 0) || (iVar4 = fcn.1000c540(10, 0x7fffffff),  iVar4 == 0x7fffffff)) {\n        cVar3 = fcn.1000b9c0();\n        if (cVar3 != '\\0') {\n            fcn.1000af60(*(param_1 + 0x44));\n            return;\n        }\n        if (((*(param_1 + 0x50) & 0x20000) != 0) && (cVar3 = fcn.1000b7d0(),  cVar3 != '\\0')) {\n            return;\n        }\n    }\n    else {\n        uVar1 = *(param_1 + 0x44);\n        if (uVar1 == 0) {\n            if ((*(param_1 + 0x50) & 0x100000) != 0) {\n                fcn.1000af60(0);\n                return;\n            }\n            fcn.1000df64(2);\n        }\n        else if (((((*(param_1 + 0x50) & 0x200) == 0) || (uVar1 < 10)) && (uVar1 <= *(param_1 + 0xc))) &&\n                ((uVar1 <= *(param_1 + 0x20) && *(param_1 + 0x20) != uVar1 &&\n                 ((*(*(param_1 + 0x14) + (uVar1 >> 5) * 4) & 1 << (uVar1 & 0x1f)) != 0)))) {\n            fcn.1000bd10(uVar1);\n            return;\n        }\n        fcn.1000df64(3);\n    }\n    fcn.1000df64(2);\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 479
    },
    "100077b0": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x10007825)\n\nvoid __thiscall fcn.100077b0(int32_t *param_1, uint32_t param_2)\n\n{\n    uint32_t *puVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    \n    iVar3 = param_1[1];\n    iVar4 = *param_1;\n    uVar5 = param_2 + 0x1f >> 5;\n    if (uVar5 < iVar3 - iVar4 >> 2) {\n        iVar2 = iVar4 + uVar5 * 4;\n        if (iVar2 == iVar4) {\n            param_1[1] = iVar4;\n        }\n        else if (iVar2 != iVar3) {\n            fcn.1000f9e0(iVar2, iVar3, 0);\n            param_1[1] = iVar2;\n        }\n    }\n    param_1[3] = param_2;\n    if ((param_2 & 0x1f) != 0) {\n        puVar1 = *param_1 + uVar5 * 4 + -4;\n        *puVar1 = *puVar1 & (1 << (param_2 & 0x1f)) - 1U;\n    }\n    return;\n}\n",
        "token_count": 305
    },
    "10009780": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint32_t __thiscall fcn.10009780(int32_t param_1, uint16_t *param_2, int32_t param_3)\n\n{\n    uint16_t uVar1;\n    int32_t iVar2;\n    \n    if (param_3 == -1) {\n        if ((param_2 == *(param_1 + 0x4c)) && ((*(param_1 + 0x60) & 0x100) == 0)) {\ncode_r0x100097d6:\n            return param_2 & 0xffffff00;\n        }\n    }\n    else if (param_3 == 0) {\n        if (param_2 == *(param_1 + 0x50)) goto code_r0x100097d6;\n        goto code_r0x100097a2;\n    }\n    param_2 = param_2 + -1;\ncode_r0x100097a2:\n    uVar1 = *param_2;\n    if (uVar1 == uVar1) {\n        iVar2 = fcn.10010d20(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_\", uVar1);\n        if (iVar2 != 0) {\n            return 1;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 271
    },
    "1000ad10": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.1000ad10(int16_t **param_1)\n\n{\n    code *pcVar1;\n    char cVar2;\n    int32_t iVar3;\n    int16_t *piVar4;\n    int16_t *piVar5;\n    int16_t *piVar6;\n    \n    piVar4 = NULL;\n    piVar5 = 0xffffffff;\n    piVar6 = param_1[0x13];\n    if (piVar6 == 0x2a) goto code_r0x1000ad2e;\n    if (piVar6 == 0x2b) {\n        piVar4 = 0x1;\n        goto code_r0x1000ad2e;\n    }\n    if (piVar6 == 0x3f) {\n        piVar5 = 0x1;\n        goto code_r0x1000ad2e;\n    }\n    if (piVar6 != 0x7b) {\n        return;\n    }\n    fcn.10009a60();\n    iVar3 = fcn.1000c540(10, 0x7fffffff);\n    if (iVar3 == 0x7fffffff) {\n        fcn.1000df64(7);\ncode_r0x1000ae30:\n        fcn.1000df64(7);\n        goto code_r0x1000ae37;\n    }\n    piVar4 = param_1[0x11];\n    piVar6 = piVar4;\n    if (param_1[0x13] == 0x2c) {\n        fcn.10009a60();\n        if (param_1[0x13] != 0x7d) {\n            cVar2 = fcn.1000b7b0();\n            if (cVar2 == '\\0') goto code_r0x1000ae30;\n            piVar6 = param_1[0x11];\n            goto code_r0x1000ae00;\n        }\n    }\n    else {\ncode_r0x1000ae00:\n        piVar5 = piVar6;\n        if (param_1[0x13] != 0x7d) goto code_r0x1000ae37;\n    }\n    if ((piVar5 == 0xffffffff) || (piVar4 <= piVar5)) {\ncode_r0x1000ad2e:\n        *(param_1[10] + 4) = *(param_1[10] + 4) | 4;\n        piVar6 = *param_1;\n        if (piVar6 != param_1[2]) {\n            if (((*piVar6 == 0x5c) && (piVar6 = piVar6 + 1,  piVar6 != param_1[2])) &&\n               ((((param_1[0x14] & 8) == 0 && ((*piVar6 == 0x28 || (*piVar6 == 0x29)))) ||\n                (((param_1[0x14] & 0x10) == 0 && ((*piVar6 == 0x7b || (*piVar6 == 0x7d)))))))) {\n                *param_1 = piVar6;\n            }\n            *param_1 = *param_1 + 1;\n        }\n        fcn.10008600();\n        if (((param_1[0x14] & 0x400) != 0) && (param_1[0x13] == 0x3f)) {\n            fcn.10009a60();\n            fcn.1000bd80(piVar4, piVar5, 0);\n            return;\n        }\n        fcn.1000bd80(piVar4, piVar5, 1);\n        return;\n    }\ncode_r0x1000ae37:\n    fcn.1000df64(7);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 863
    },
    "1000c620": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint __fastcall fcn.1000c620(int16_t **param_1)\n\n{\n    char cVar1;\n    int16_t *piVar2;\n    uint uVar3;\n    uint extraout_ECX;\n    \n    piVar2 = param_1[0x13];\n    if (piVar2 != 0x5c) {\n        if (piVar2 != 0x5b) {\n            if ((piVar2 != 0x5d) && (piVar2 != 0xffffffff)) {\n                param_1[0x11] = *(param_1 + 0x12);\n                fcn.10009a60();\n                return 1;\n            }\n            return 0;\n        }\n        fcn.10009a60();\n        piVar2 = param_1[0x13];\n        if (((piVar2 != 0x3a) && (piVar2 != 0x3d)) && (piVar2 != 0x2e)) {\n            param_1[0x11] = 0x5b;\n            return 1;\n        }\n        fcn.10009a60();\n        fcn.1000cdc0(piVar2);\n        return 2;\n    }\n    piVar2 = *param_1;\n    if (piVar2 != param_1[2]) {\n        if (((*piVar2 == 0x5c) && (piVar2 = piVar2 + 1,  piVar2 != param_1[2])) &&\n           ((((param_1[0x14] & 8) == 0 && ((*piVar2 == 0x28 || (*piVar2 == 0x29)))) ||\n            (((param_1[0x14] & 0x10) == 0 && ((*piVar2 == 0x7b || (*piVar2 == 0x7d)))))))) {\n            *param_1 = piVar2;\n        }\n        *param_1 = *param_1 + 1;\n    }\n    fcn.10008600();\n    if ((param_1[0x14] & 0x200000) != 0) {\n        uVar3 = fcn.1000cf10(extraout_ECX);\n        return uVar3;\n    }\n    if ((param_1[0x14] & 0x10000) != 0) {\n        cVar1 = fcn.1000c7d0(*(param_1 + 0x12));\n        if (cVar1 != '\\0') goto code_r0x1000c6dc;\n    }\n    if ((param_1[0x14] & 0x8000) != 0) {\n        if (*(param_1 + 0x12) == 0x61) {\n            param_1[0x11] = 0x7;\n            fcn.10009a60();\n            return 1;\n        }\n        if (*(param_1 + 0x12) == 0x62) {\n            param_1[0x11] = 0x8;\ncode_r0x1000c6dc:\n            fcn.10009a60();\n            return 1;\n        }\n    }\n    param_1[0x11] = 0x5c;\n    return 1;\n}\n",
        "token_count": 725
    },
    "1001347a": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.1001347a(int32_t arg_8h)\n\n{\n    if (*0x1004f090 != -1) {\n        if (arg_8h == 0) {\n            arg_8h = fcn.100137ec(*0x1004f090);\n        }\n        fcn.10013826(*0x1004f090, 0);\n        fcn.1001345e(arg_8h);\n    }\n    return;\n}\n",
        "token_count": 105
    },
    "1001d82e": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint __cdecl fcn.1001d82e(char *arg_8h, int32_t arg_ch, int32_t arg_10h, int32_t arg_14h)\n\n{\n    char cVar1;\n    uint *puVar2;\n    int32_t iVar3;\n    char *pcVar4;\n    int32_t iVar5;\n    uint uVar6;\n    \n    if (arg_14h == 0) {\n        if (arg_8h == NULL) {\n            if (arg_ch == 0) {\n                return 0;\n            }\n        }\n        else {\ncode_r0x1001d7b1:\n            if (arg_ch != 0) {\n                if (arg_14h == 0) {\n                    *arg_8h = '\\0';\n                    return 0;\n                }\n                if (arg_10h != 0) {\n                    iVar3 = arg_14h;\n                    pcVar4 = arg_8h;\n                    iVar5 = arg_ch;\n                    if (arg_14h == -1) {\n                        do {\n                            cVar1 = pcVar4[arg_10h - arg_8h];\n                            *pcVar4 = cVar1;\n                            pcVar4 = pcVar4 + 1;\n                            if (cVar1 == '\\0') break;\n                            iVar5 = iVar5 + -1;\n                        } while (iVar5 != 0);\n                    }\n                    else {\n                        do {\n                            cVar1 = pcVar4[arg_10h - arg_8h];\n                            *pcVar4 = cVar1;\n                            pcVar4 = pcVar4 + 1;\n                            if ((cVar1 == '\\0') || (iVar5 = iVar5 + -1,  iVar5 == 0)) break;\n                            iVar3 = iVar3 + -1;\n                        } while (iVar3 != 0);\n                        if (iVar3 == 0) {\n                            *pcVar4 = '\\0';\n                        }\n                    }\n                    if (iVar5 != 0) {\n                        return 0;\n                    }\n                    if (arg_14h == -1) {\n                        arg_8h[arg_ch + -1] = '\\0';\n                        return 0x50;\n                    }\n                    *arg_8h = '\\0';\n                    puVar2 = fcn.10013e79();\n                    uVar6 = 0x22;\n                    goto code_r0x1001d79f;\n                }\n                *arg_8h = '\\0';\n            }\n        }\n    }\n    else if (arg_8h != NULL) goto code_r0x1001d7b1;\n    puVar2 = fcn.10013e79();\n    uVar6 = 0x16;\ncode_r0x1001d79f:\n    *puVar2 = uVar6;\n    fcn.10013d94();\n    return uVar6;\n}\n",
        "token_count": 622
    },
    "1001e970": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint __cdecl fcn.1001e970(int16_t *arg_8h, int32_t arg_ch, int32_t arg_10h, int32_t arg_14h)\n\n{\n    int16_t iVar1;\n    uint *puVar2;\n    int32_t iVar3;\n    int16_t *piVar4;\n    int32_t iVar5;\n    uint uVar6;\n    \n    if (arg_14h == 0) {\n        if (arg_8h == NULL) {\n            if (arg_ch == 0) {\n                return 0;\n            }\n        }\n        else {\ncode_r0x1001e8db:\n            if (arg_ch != 0) {\n                if (arg_14h == 0) {\n                    *arg_8h = 0;\n                    return 0;\n                }\n                if (arg_10h != 0) {\n                    iVar3 = arg_14h;\n                    piVar4 = arg_8h;\n                    iVar5 = arg_ch;\n                    if (arg_14h == -1) {\n                        do {\n                            iVar1 = *((arg_10h - arg_8h) + piVar4);\n                            *piVar4 = iVar1;\n                            piVar4 = piVar4 + 1;\n                            if (iVar1 == 0) break;\n                            iVar5 = iVar5 + -1;\n                        } while (iVar5 != 0);\n                    }\n                    else {\n                        do {\n                            iVar1 = *((arg_10h - arg_8h) + piVar4);\n                            *piVar4 = iVar1;\n                            piVar4 = piVar4 + 1;\n                            if ((iVar1 == 0) || (iVar5 = iVar5 + -1,  iVar5 == 0)) break;\n                            iVar3 = iVar3 + -1;\n                        } while (iVar3 != 0);\n                        if (iVar3 == 0) {\n                            *piVar4 = 0;\n                        }\n                    }\n                    if (iVar5 != 0) {\n                        return 0;\n                    }\n                    if (arg_14h == -1) {\n                        arg_8h[arg_ch + -1] = 0;\n                        return 0x50;\n                    }\n                    *arg_8h = 0;\n                    puVar2 = fcn.10013e79();\n                    uVar6 = 0x22;\n                    goto code_r0x1001e8c9;\n                }\n                *arg_8h = 0;\n            }\n        }\n    }\n    else if (arg_8h != NULL) goto code_r0x1001e8db;\n    puVar2 = fcn.10013e79();\n    uVar6 = 0x16;\ncode_r0x1001e8c9:\n    *puVar2 = uVar6;\n    fcn.10013d94();\n    return uVar6;\n}\n",
        "token_count": 626
    },
    "10022520": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nbool fcn.10022520(void)\n\n{\n    if (*0x1004f960 == -2) {\n        fcn.10022501();\n    }\n    return *0x1004f960 != -1;\n}\n",
        "token_count": 49
    },
    "1002253f": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid fcn.1002253f(void)\n\n{\n    if ((*0x1004f960 != -1) && (*0x1004f960 != -2)) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(*0x1004f960);\n    }\n    return;\n}\n",
        "token_count": 63
    },
    "1000f4c4": {
        "rules": [
            "empty recycle bin quietly/a05fef7955a340fbb66225983c77e1df"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x1000f505)\n// WARNING: Removing unreachable block (ram,0x1000f5b5)\n// WARNING: Removing unreachable block (ram,0x1000f53f)\n\nuint fcn.1000f4c4(void)\n\n{\n    int32_t *piVar1;\n    uint32_t *puVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    uint32_t in_XCR0;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint32_t var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    *0x1005664c = 0;\n    *0x1004f080 = *0x1004f080 | 1;\n    iVar4 = sub.KERNEL32.dll_IsProcessorFeaturePresent(10);\n    uVar3 = *0x1004f080;\n    if (iVar4 != 0) {\n        var_10h = 0;\n        *0x1004f080 = *0x1004f080 | 2;\n        *0x1005664c = 1;\n        piVar1 = cpuid_basic_info(0);\n        puVar2 = cpuid_Version_info(1);\n        uVar6 = puVar2[3];\n        if (((piVar1[2] ^ 0x49656e69U | piVar1[3] ^ 0x6c65746eU | piVar1[1] ^ 0x756e6547U) == 0) &&\n           (((((uVar5 = *puVar2 & 0xfff3ff0,  uVar5 == 0x106c0 || (uVar5 == 0x20660)) || (uVar5 == 0x20670)) ||\n             ((uVar5 == 0x30650 || (uVar5 == 0x30660)))) || (uVar5 == 0x30670)))) {\n            *0x10056650 = *0x10056650 | 1;\n        }\n        if (6 < *piVar1) {\n            iVar4 = cpuid_Extended_Feature_Enumeration_info(7);\n            var_10h = *(iVar4 + 4);\n            if ((var_10h & 0x200) != 0) {\n                *0x10056650 = *0x10056650 | 2;\n            }\n        }\n        if ((uVar6 & 0x100000) != 0) {\n            *0x1004f080 = uVar3 | 6;\n            *0x1005664c = 2;\n            if ((((uVar6 & 0x8000000) != 0) && ((uVar6 & 0x10000000) != 0)) && ((in_XCR0 & 6) == 6)) {\n                *0x1004f080 = uVar3 | 0xe;\n                *0x1005664c = 3;\n                if ((var_10h & 0x20) != 0) {\n                    *0x1004f080 = uVar3 | 0x2e;\n                    *0x1005664c = 5;\n                }\n            }\n        }\n    }\n    return 0;\n}\n",
        "token_count": 777
    },
    "100053c0": {
        "rules": [
            "encrypt data using HC-128/1d01b23c04404fe18b84a06c7e7d83b0",
            "hash data using aphash/10489b186fc44711a1078750698db7a9"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.100053c0(uchar *param_1, uint32_t param_2)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint unaff_ESI;\n    char *pcVar3;\n    char *pcVar4;\n    uchar *puStack36;\n    uint uStack32;\n    char acStack9 [5];\n    uint32_t uStack4;\n    \n    uStack4 = *0x1004f06c ^ &puStack36;\n    uStack32 = 0;\n    pcVar4 = acStack9 + 2;\n    if (param_2 < 0) {\n        uVar2 = -param_2;\n        do {\n            pcVar3 = pcVar4;\n            pcVar4 = pcVar3 + -1;\n            uVar1 = uVar2 / 10;\n            *pcVar4 = uVar2 + uVar1 * -10 + '0';\n            uVar2 = uVar1;\n        } while (uVar1 != 0);\n        pcVar4 = pcVar3 + -2;\n        *pcVar4 = '-';\n    }\n    else {\n        do {\n            pcVar4 = pcVar4 + -1;\n            uVar2 = param_2 / 10;\n            *pcVar4 = param_2 + uVar2 * -10 + '0';\n            param_2 = uVar2;\n        } while (uVar2 != 0);\n    }\n    *(param_1 + 0x14) = 0xf;\n    *(param_1 + 0x10) = 0;\n    *param_1 = 0;\n    puStack36 = param_1;\n    if (pcVar4 != acStack9 + 2) {\n        fcn.10003d80(pcVar4, (acStack9 + 2) - pcVar4);\n    }\n    fcn.1000e9b7(unaff_ESI);\n    return;\n}\n",
        "token_count": 432
    },
    "10005790": {
        "rules": [
            "check for trap flag exception/d5d4160e77a5474aa5157e4631e4f1b3"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.10005790(int32_t arg_8h, int32_t arg_ch, uint32_t arg_10h, uint arg_14h)\n\n{\n    int32_t iVar1;\n    char cVar2;\n    int32_t *piVar3;\n    uint32_t uVar4;\n    uint *in_ECX;\n    int32_t *in_EDX;\n    uint8_t uVar5;\n    int32_t *in_FS_OFFSET;\n    uint var_90h;\n    uint var_8ch;\n    uint var_7ch;\n    uint var_6ch;\n    uint var_5ch;\n    uint var_50h;\n    uint var_3ch;\n    uint var_30h;\n    uint var_10h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x1003d5fb;\n    var_ch = *in_FS_OFFSET;\n    *in_FS_OFFSET = &var_ch;\n    iVar1 = *in_EDX;\n    if (iVar1 == 0) {\n        *in_FS_OFFSET = var_ch;\n        return 0;\n    }\n    uVar5 = 0;\n    fcn.10005df0(arg_8h, arg_ch, in_EDX + 1, iVar1, *(iVar1 + 0x1c), *(iVar1 + 0x14), arg_10h);\n    var_4h = 0;\n    cVar2 = fcn.10007000();\n    if (cVar2 == '\\0') {\n        if ((arg_8h == arg_ch) || ((arg_10h & 0x40) != 0)) goto code_r0x100058cd;\n        piVar3 = fcn.10006d20(&var_10h, arg_8h + 2, arg_ch, 0);\n        iVar1 = *piVar3;\n        while (iVar1 != arg_ch) {\n            cVar2 = fcn.10007000();\n            if (cVar2 != '\\0') goto code_r0x100058b6;\n            piVar3 = fcn.10006d20();\n            iVar1 = *piVar3;\n        }\n        cVar2 = fcn.10007000();\n        if (cVar2 == '\\0') goto code_r0x100058cd;\n    }\ncode_r0x100058b6:\n    uVar5 = 1;\n    if (in_ECX != NULL) {\n        *in_ECX = arg_14h;\n        in_ECX[5] = arg_8h;\n        *(in_ECX + 7) = arg_8h != in_ECX[6];\n    }\ncode_r0x100058cd:\n    fcn.10006130();\n    fcn.10006130();\n    fcn.10006660();\n    fcn.10006130();\n    uVar4 = fcn.10006660();\n    *in_FS_OFFSET = var_ch;\n    return uVar4 & 0xffffff00 | uVar5;\n}\n",
        "token_count": 683
    },
    "10005df0": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl\nfcn.10005df0(uint arg_8h, uint arg_ch, uint arg_10h, int32_t arg_14h, uint arg_18h, uint arg_1ch, uint32_t arg_20h)\n\n{\n    uchar uVar1;\n    uint32_t uVar2;\n    uint *in_ECX;\n    int32_t *in_FS_OFFSET;\n    uint var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x1003d6ae;\n    var_ch = *in_FS_OFFSET;\n    uVar2 = *0x1004f06c ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    *in_ECX = 0;\n    var_10h = 0;\n    in_ECX[1] = 0;\n    in_ECX[2] = 0;\n    in_ECX[3] = 0;\n    fcn.100067a0(0, &var_10h, uVar2);\n    in_ECX[4] = 0;\n    in_ECX[5] = 0;\n    in_ECX[6] = 0;\n    in_ECX[7] = 0;\n    var_4h = 0;\n    in_ECX[8] = 0;\n    var_10h = 0;\n    in_ECX[9] = 0;\n    in_ECX[10] = 0;\n    in_ECX[0xb] = 0;\n    fcn.100067a0(0, &var_10h);\n    in_ECX[0xc] = 0;\n    in_ECX[0xd] = 0;\n    in_ECX[0xe] = 0;\n    in_ECX[0xf] = 0;\n    in_ECX[0x10] = 0;\n    in_ECX[0x11] = 0;\n    in_ECX[0x12] = 0;\n    var_4h = CONCAT31(var_4h._1_3_, 2);\n    in_ECX[0x13] = 0;\n    in_ECX[0x14] = arg_ch;\n    in_ECX[0x15] = arg_8h;\n    in_ECX[0x17] = arg_1ch;\n    in_ECX[0x16] = arg_14h;\n    in_ECX[0x18] = arg_20h;\n    *(in_ECX + 0x19) = 0;\n    in_ECX[0x1a] = arg_18h;\n    if (((*(arg_14h + 8) & 8) == 0) || ((arg_20h & 0x10) != 0)) {\n        uVar1 = 0;\n    }\n    else {\n        uVar1 = 1;\n    }\n    *(in_ECX + 0x1b) = uVar1;\n    in_ECX[0x1c] = arg_10h;\n    fcn.100061b0(*(arg_14h + 0x18));\n    *in_FS_OFFSET = var_ch;\n    return;\n}\n",
        "token_count": 739
    },
    "100066e0": {
        "rules": [
            "hash data using aphash/d4672a7c2b8d413ab72f7529ccc05031"
        ],
        "decompiled_code": "\nint32_t * __thiscall fcn.100066e0(int32_t *param_1, int32_t *param_2)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    \n    uVar1 = param_1[3];\n    iVar2 = *param_1;\n    *param_2 = iVar2;\n    param_2[1] = 0;\n    if (uVar1 != 0) {\n        if ((uVar1 < 0) && (uVar1 != 0)) {\n            *param_2 = iVar2 - ((~uVar1 >> 5) * 4 + 4);\n            param_2[1] = uVar1 & 0x1f;\n            return param_2;\n        }\n        param_2[1] = uVar1 & 0x1f;\n        *param_2 = iVar2 + (uVar1 >> 5) * 4;\n    }\n    return param_2;\n}\n",
        "token_count": 218
    },
    "10006820": {
        "rules": [
            "hash data using aphash/d4672a7c2b8d413ab72f7529ccc05031"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.10006820(uint32_t *param_1, uint param_2, int32_t param_3, uint param_4, uint param_5, uint param_6)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    int32_t *piStack24;\n    int32_t *piStack8;\n    uint32_t uStack4;\n    \n    uVar3 = fcn.100069f0(param_3, param_5, param_6);\n    uVar2 = *param_1;\n    uVar1 = uVar3 + param_3;\n    if ((uVar1 < 0) && (uVar1 != 0)) {\n        iVar4 = (-uVar1 - 1 >> 5) * -4 + -4;\n    }\n    else {\n        iVar4 = (uVar1 >> 5) * 4;\n    }\n    if ((uVar3 < 0) && (uVar3 != 0)) {\n        iVar5 = (-uVar3 - 1 >> 5) * -4 + -4;\n    }\n    else {\n        iVar5 = (uVar3 >> 5) * 4;\n    }\n    uStack4 = uVar2 & 0xffffff00;\n    uVar6 = uVar3 & 0x1f;\n    fcn.1000a300(uStack4, uVar2 + iVar5, uVar6, uVar2 + iVar4, uVar1 & 0x1f);\n    iVar4 = *piStack24;\n    if ((uVar3 < 0) && (uVar3 != 0)) {\n        piStack8[1] = uVar6;\n        *piStack8 = iVar4 + (-uVar3 - 1 >> 5) * -4 + -4;\n        return;\n    }\n    piStack8[1] = uVar6;\n    *piStack8 = iVar4 + (uVar3 >> 5) * 4;\n    return;\n}\n",
        "token_count": 476
    },
    "10006930": {
        "rules": [
            "hash data using aphash/d4672a7c2b8d413ab72f7529ccc05031"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.10006930(int32_t *param_1, int32_t *param_2, int32_t param_3)\n\n{\n    uint32_t uVar1;\n    \n    uVar1 = param_1[1];\n    if ((param_3 < 0) && (uVar1 < -param_3)) {\n        *param_2 = *param_1 + (-(uVar1 + param_3) - 1 >> 5) * -4 + -4;\n        param_2[1] = uVar1 + param_3 & 0x1f;\n        return;\n    }\n    *param_2 = *param_1 + (uVar1 + param_3 >> 5) * 4;\n    param_2[1] = uVar1 + param_3 & 0x1f;\n    return;\n}\n",
        "token_count": 192
    },
    "100069f0": {
        "rules": [
            "hash data using aphash/d4672a7c2b8d413ab72f7529ccc05031"
        ],
        "decompiled_code": "\nint32_t __thiscall fcn.100069f0(int32_t *param_1, uint32_t param_2, int32_t param_3, int32_t param_4)\n\n{\n    uint uVar1;\n    uint uVar2;\n    code *pcVar3;\n    uint32_t uVar4;\n    uint *puVar5;\n    int32_t iVar6;\n    uint unaff_EDI;\n    int32_t iVar7;\n    uchar auStack32 [4];\n    uchar auStack28 [4];\n    uchar auStack24 [4];\n    uint32_t uStack20;\n    \n    uVar4 = param_2;\n    iVar6 = (param_3 - *param_1 >> 2) * 0x20 + param_4;\n    if (param_2 != 0) {\n        if (-param_1[3] - 1U < param_2) {\n            fcn.1000df24(\"vector<bool> too long\");\n            pcVar3 = swi(3);\n            iVar6 = (*pcVar3)();\n            return iVar6;\n        }\n        param_2 = 0;\n        fcn.10006b40(uVar4 + 0x1f + param_1[3] >> 5, &param_2);\n        iVar7 = param_1[3];\n        if (iVar7 == 0) {\n            param_1[3] = uVar4;\n            return iVar6;\n        }\n        fcn.100066e0(auStack32);\n        param_1[3] = uVar4 + iVar7;\n        iVar7 = *param_1;\n        puVar5 = fcn.100066e0(auStack28);\n        uVar1 = *puVar5;\n        uVar2 = puVar5[1];\n        puVar5 = fcn.10006930(auStack24, iVar6);\n        uStack20 = uStack20 & 0xffffff00;\n        fcn.1000b6b0(uStack20, *puVar5, puVar5[1], unaff_EDI, iVar7, uVar1, uVar2);\n    }\n    return iVar6;\n}\n",
        "token_count": 476
    },
    "10007000": {
        "rules": [
            "hash data using aphash/d4672a7c2b8d413ab72f7529ccc05031"
        ],
        "decompiled_code": "\nuchar __thiscall fcn.10007000(uint *param_1, uint *param_2)\n\n{\n    int32_t **ppiVar1;\n    char cVar2;\n    uint uVar3;\n    uint *extraout_ECX;\n    uint *puVar4;\n    uint32_t uVar5;\n    uint *unaff_EDI;\n    int32_t iVar6;\n    \n    puVar4 = param_1;\n    if (param_2 != NULL) {\n        *(param_2 + 1) = 1;\n        fcn.100076a0(0);\n        puVar4 = extraout_ECX;\n    }\n    param_1[0x13] = param_1[0x15];\n    *param_1 = param_1[0x15];\n    fcn.10007440(param_1[0x1a], puVar4);\n    fcn.100073e0(param_1[0x1a]);\n    *(param_1 + 0x1d) = 0;\n    param_1[0x1e] = 10000000;\n    param_1[0x1f] = 1000;\n    *(param_1 + 0x65) = param_2 != NULL;\n    *(param_1 + 0x19) = 0;\n    cVar2 = fcn.100081b0(param_1[0x16]);\n    if (cVar2 != '\\0') {\n        if (param_2 != NULL) {\n            ppiVar1 = param_2 + 2;\n            fcn.100076a0(param_1[0x1a]);\n            uVar5 = 0;\n            if (param_1[0x1a] != 0) {\n                iVar6 = 0;\n                do {\n                    if ((*(param_1[9] + (uVar5 >> 5) * 4) & 1 << (uVar5 & 0x1f)) == 0) {\n                        *(iVar6 + 8 + *ppiVar1) = 0;\n                        *(iVar6 + *ppiVar1) = param_1[0x14];\n                        uVar3 = param_1[0x14];\n                    }\n                    else {\n                        *(iVar6 + 8 + *ppiVar1) = 1;\n                        *(iVar6 + *ppiVar1) = *(param_1[0xd] + uVar5 * 8);\n                        uVar3 = *(param_1[0xd] + 4 + uVar5 * 8);\n                    }\n                    uVar5 = uVar5 + 1;\n                    *(iVar6 + 4 + *ppiVar1) = uVar3;\n                    iVar6 = iVar6 + 0xc;\n                    param_2 = unaff_EDI;\n                } while (uVar5 < param_1[0x1a]);\n            }\n            *param_2 = param_1[0x13];\n            param_2[5] = param_1[0x13];\n            iVar6 = **ppiVar1;\n            param_2[6] = iVar6;\n            *(param_2 + 7) = param_2[5] != iVar6;\n            param_2[8] = (*ppiVar1)[1];\n            iVar6 = param_1[0x14];\n            param_2[9] = iVar6;\n            *(param_2 + 10) = param_2[8] != iVar6;\n            param_2[0xb] = param_1[0x14];\n            param_2[0xc] = param_1[0x14];\n        }\n        return 1;\n    }\n    return 0;\n}\n",
        "token_count": 808
    },
    "10007440": {
        "rules": [
            "hash data using aphash/d4672a7c2b8d413ab72f7529ccc05031"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.10007440(uint32_t *param_1, uint32_t param_2)\n\n{\n    uint32_t uVar1;\n    uint uVar2;\n    uint uVar3;\n    int32_t iVar4;\n    uint *puVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    uint32_t uStack32;\n    uint auStack28 [2];\n    uchar auStack20 [4];\n    uchar auStack16 [16];\n    \n    uStack32 = uStack32 & 0xffffff00;\n    uVar1 = param_1[3];\n    if (uVar1 < param_2) {\n        uVar7 = *param_1;\n        uVar6 = 0;\n        if (uVar1 != 0) {\n            if ((uVar1 < 0) && (uVar1 != 0)) {\n                iVar4 = (-uVar1 - 1 >> 5) * -4 + -4;\n            }\n            else {\n                iVar4 = (uVar1 >> 5) * 4;\n            }\n            uVar7 = uVar7 + iVar4;\n            uVar6 = uVar1 & 0x1f;\n        }\n        fcn.10006820(auStack28, param_2 - uVar1, &uStack32, uVar7, uVar6);\n        return;\n    }\n    if (param_2 < uVar1) {\n        puVar5 = fcn.100066e0(auStack20);\n        auStack28[0] = 0;\n        uVar2 = *puVar5;\n        uVar3 = puVar5[1];\n        uStack32 = *param_1;\n        puVar5 = fcn.10006930(auStack16, param_2);\n        fcn.10007830(&stack0xffffffd8, *puVar5, puVar5[1], uVar2, uVar3);\n    }\n    return;\n}\n",
        "token_count": 438
    },
    "10007830": {
        "rules": [
            "hash data using aphash/d4672a7c2b8d413ab72f7529ccc05031"
        ],
        "decompiled_code": "\nvoid __thiscall\nfcn.10007830(uint32_t *param_1, uint param_2, int32_t param_3, int32_t param_4, int32_t param_5, int32_t param_6)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    uint32_t uVar8;\n    int32_t *unaff_retaddr;\n    uint32_t uStack24;\n    uint32_t uStack16;\n    int32_t iStack8;\n    \n    uVar4 = 0;\n    uStack16 = *param_1;\n    uVar1 = param_1[3];\n    uVar5 = uStack16;\n    if (uVar1 != 0) {\n        uVar4 = (param_3 - uStack16 >> 2) * 0x20 + param_4;\n        if ((uVar4 < 0) && (uVar4 != 0)) {\n            iVar2 = (-uVar4 - 1 >> 5) * -4 + -4;\n        }\n        else {\n            iVar2 = (uVar4 >> 5) * 4;\n        }\n        uVar5 = uStack16 + iVar2;\n        uVar4 = uVar4 & 0x1f;\n    }\n    uVar8 = 0;\n    uStack24 = uStack16;\n    if (uVar1 != 0) {\n        uVar8 = (param_5 - uStack16 >> 2) * 0x20 + param_6;\n        if ((uVar8 < 0) && (uVar8 != 0)) {\n            iVar2 = (-uVar8 - 1 >> 5) * -4 + -4;\n        }\n        else {\n            iVar2 = (uVar8 >> 5) * 4;\n        }\n        uStack24 = uStack16 + iVar2;\n        uVar8 = uVar8 & 0x1f;\n    }\n    uVar7 = (uVar5 - uStack16 >> 2) * 0x20 + uVar4;\n    if ((uVar5 != uStack24) || (uVar4 != uVar8)) {\n        uVar6 = 0;\n        uVar3 = uStack16;\n        if (uVar1 != 0) {\n            if ((uVar1 < 0) && (uVar1 != 0)) {\n                iVar2 = (-uVar1 - 1 >> 5) * -4 + -4;\n            }\n            else {\n                iVar2 = (uVar1 >> 5) * 4;\n            }\n            uVar3 = uStack16 + iVar2;\n            uVar6 = uVar1 & 0x1f;\n        }\n        uStack16 = uStack16 & 0xffffff00;\n        fcn.1000cd30(uStack16, uStack24, uVar8, uVar3, uVar6, uVar5, uVar4);\n        fcn.100077b0((uVar5 - *param_1 >> 2) * 0x20 + iStack8);\n    }\n    uVar1 = *param_1;\n    if ((uVar7 < 0) && (uVar7 != 0)) {\n        iVar2 = (-uVar7 - 1 >> 5) * -4 + -4;\n    }\n    else {\n        iVar2 = (uVar7 >> 5) * 4;\n    }\n    unaff_retaddr[1] = uVar7 & 0x1f;\n    *unaff_retaddr = uVar1 + iVar2;\n    return;\n}\n",
        "token_count": 836
    },
    "10009970": {
        "rules": [
            "hash data using aphash/d4672a7c2b8d413ab72f7529ccc05031"
        ],
        "decompiled_code": "\nuint32_t __fastcall fcn.10009970(int32_t param_1)\n\n{\n    int32_t *piVar1;\n    int32_t *piVar2;\n    uint32_t *in_EAX;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    \n    uVar5 = 0;\n    if (*(param_1 + 0x68) != 0) {\n        do {\n            iVar3 = (uVar5 >> 5) * 4;\n            in_EAX = *(param_1 + 0x24) + iVar3;\n            uVar4 = 1 << (uVar5 & 0x1f);\n            if (((*in_EAX & uVar4) != 0) && (in_EAX = *(param_1 + 4) + iVar3,  (*in_EAX & uVar4) != 0)) {\n                piVar1 = *(param_1 + 0x34) + uVar5 * 8;\n                piVar2 = *(param_1 + 0x14) + uVar5 * 8;\n                if (*piVar1 != *piVar2) {\n                    uVar4 = *(*(param_1 + 0x14) + uVar5 * 8) - *(param_1 + 0x4c);\n                    return uVar4 & 0xffffff00 |\n                           (*(*(param_1 + 0x34) + uVar5 * 8) - *(param_1 + 0x4c) & 0xfffffffeU) < (uVar4 & 0xfffffffe);\n                }\n                in_EAX = piVar1[1];\n                if (in_EAX != piVar2[1]) {\n                    uVar4 = *(*(param_1 + 0x14) + 4 + uVar5 * 8) - *(param_1 + 0x4c);\n                    return uVar4 & 0xffffff00 |\n                           (*(*(param_1 + 0x34) + 4 + uVar5 * 8) - *(param_1 + 0x4c) & 0xfffffffeU) <\n                           (uVar4 & 0xfffffffe);\n                }\n            }\n            uVar5 = uVar5 + 1;\n        } while (uVar5 < *(param_1 + 0x68));\n    }\n    return in_EAX & 0xffffff00;\n}\n",
        "token_count": 537
    },
    "1000bb20": {
        "rules": [
            "hash data using aphash/d4672a7c2b8d413ab72f7529ccc05031"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.1000bb20(int32_t param_1)\n\n{\n    uint32_t *puVar1;\n    code **ppcVar2;\n    uint extraout_ECX;\n    code *pcVar3;\n    \n    pcVar3 = *(param_1 + 0xc) + 1;\n    *(param_1 + 0xc) = pcVar3;\n    ppcVar2 = fcn.1000e9c8(0x18);\n    ppcVar2[4] = NULL;\n    ppcVar2[1] = 0xd;\n    ppcVar2[2] = NULL;\n    ppcVar2[3] = NULL;\n    *ppcVar2 = vtable.std::_Node_capture.0;\n    ppcVar2[5] = pcVar3;\n    ppcVar2[4] = *(param_1 + 0x28);\n    pcVar3 = *(*(param_1 + 0x28) + 0xc);\n    if (pcVar3 != NULL) {\n        ppcVar2[3] = pcVar3;\n        *(*(*(param_1 + 0x28) + 0xc) + 0x10) = ppcVar2;\n    }\n    *(*(param_1 + 0x28) + 0xc) = ppcVar2;\n    *(param_1 + 0x28) = ppcVar2;\n    fcn.100087b0();\n    fcn.10008950(ppcVar2);\n    fcn.10007440(*(param_1 + 0xc) + 1, extraout_ECX);\n    puVar1 = *(param_1 + 0x14) + (ppcVar2[5] >> 5) * 4;\n    *puVar1 = *puVar1 | 1 << (ppcVar2[5] & 0x1f);\n    return;\n}\n",
        "token_count": 424
    },
    "10008950": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.10008950(int32_t param_1, code *param_2)\n\n{\n    int32_t iVar1;\n    code **ppcVar2;\n    code *pcVar3;\n    \n    iVar1 = *(param_2 + 4);\n    if (iVar1 == 8) {\n        pcVar3 = 0x9;\n    }\n    else if (iVar1 == 10) {\n        pcVar3 = 0xc;\n    }\n    else {\n        pcVar3 = (iVar1 != 0xb) * 2 + 0xc;\n    }\n    ppcVar2 = fcn.1000e9c8(0x18);\n    ppcVar2[4] = NULL;\n    ppcVar2[1] = pcVar3;\n    ppcVar2[2] = NULL;\n    ppcVar2[3] = NULL;\n    *ppcVar2 = vtable.std::_Node_end_group.0;\n    ppcVar2[5] = param_2;\n    ppcVar2[4] = *(param_1 + 4);\n    pcVar3 = *(*(param_1 + 4) + 0xc);\n    if (pcVar3 != NULL) {\n        ppcVar2[3] = pcVar3;\n        *(*(*(param_1 + 4) + 0xc) + 0x10) = ppcVar2;\n    }\n    *(*(param_1 + 4) + 0xc) = ppcVar2;\n    *(param_1 + 4) = ppcVar2;\n    return;\n}\n",
        "token_count": 354
    },
    "1000e34e": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\nvoid fcn.1000e34e(void)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    code *pcVar3;\n    int32_t *in_FS_OFFSET;\n    int32_t var_ch;\n    uint uStack12;\n    uint uStack8;\n    \n    uStack8 = 0xffffffff;\n    uStack12 = 0x1003d2f0;\n    var_ch = *in_FS_OFFSET;\n    uVar2 = *0x1004f06c ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    while (*0x1004f008 < 10) {\n        iVar1 = *0x1004f008 * 4;\n        *0x1004f008 = *0x1004f008 + 1;\n        pcVar3 = (*_sym.imp.KERNEL32.dll_DecodePointer)(*(iVar1 + 0x100561a8), uVar2);\n        if (pcVar3 != NULL) {\n            fcn.1000f0a9();\n            (*pcVar3)();\n        }\n    }\n    *in_FS_OFFSET = var_ch;\n    return;\n}\n",
        "token_count": 253
    },
    "1000ab10": {
        "rules": [
            "parse credit card information/f44d27b3cce043409e5315cf54d1899b",
            "search for credit card data/ac143e9ae29c414184a69c9308e24693"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.1000ab10(int16_t **param_1)\n\n{\n    int16_t *piVar1;\n    \n    fcn.1000bc80();\n    if (param_1[0x13] == 0x5e) {\n        *(param_1[10] + 4) = *(param_1[10] + 4) ^ 1;\n        piVar1 = *param_1;\n        if (piVar1 != param_1[2]) {\n            if (((*piVar1 == 0x5c) && (piVar1 = piVar1 + 1,  piVar1 != param_1[2])) &&\n               ((((param_1[0x14] & 8) == 0 && ((*piVar1 == 0x28 || (*piVar1 == 0x29)))) ||\n                (((param_1[0x14] & 0x10) == 0 && ((*piVar1 == 0x7b || (*piVar1 == 0x7d)))))))) {\n                *param_1 = piVar1;\n            }\n            *param_1 = *param_1 + 1;\n        }\n        fcn.10008600();\n    }\n    if (((param_1[0x14] & 0x20000000) != 0) && (param_1[0x13] == 0x5d)) {\n        fcn.1000cae0(0x5d);\n        fcn.10009a60();\n    }\n    fcn.1000b870();\n    return;\n}\n",
        "token_count": 349
    },
    "1000ac70": {
        "rules": [
            "parse credit card information/330c87771d2c420b9aab664e2b442302"
        ],
        "decompiled_code": "\nuint __fastcall fcn.1000ac70(int32_t param_1)\n\n{\n    int32_t iVar1;\n    code *pcVar2;\n    uint uVar3;\n    \n    *(param_1 + 0x10) = *(param_1 + 0x10) + 1;\n    if (((*(param_1 + 0x50) & 0x8000000) == 0) && (*(param_1 + 0x4c) == 0x29)) {\n        fcn.1000df64(5);\ncode_r0x1000ad02:\n        fcn.1000df64(0xe);\n        pcVar2 = swi(3);\n        uVar3 = (*pcVar2)();\n        return uVar3;\n    }\n    if (((*(param_1 + 0x50) & 0x20) == 0) || (*(param_1 + 0x4c) != 0x3f)) {\n        if ((*(param_1 + 0x40) & 0x200) == 0) {\n            fcn.1000bb20();\n            *(param_1 + 0x10) = *(param_1 + 0x10) + -1;\n            return 1;\n        }\n    }\n    else {\n        fcn.10009a60();\n        iVar1 = *(param_1 + 0x4c);\n        fcn.10009a60();\n        if (iVar1 != 0x3a) {\n            if (iVar1 == 0x21) {\n                fcn.1000bc50(1);\n                *(param_1 + 0x10) = *(param_1 + 0x10) + -1;\n                return 0;\n            }\n            if (iVar1 == 0x3d) {\n                fcn.1000bc50(0);\n                *(param_1 + 0x10) = *(param_1 + 0x10) + -1;\n                return 0;\n            }\n            goto code_r0x1000ad02;\n        }\n    }\n    fcn.1000bbd0();\n    *(param_1 + 0x10) = *(param_1 + 0x10) + -1;\n    return 1;\n}\n",
        "token_count": 500
    },
    "1000af60": {
        "rules": [
            "check OS version/56128ea24265487c97cb4913628bf489"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.1000af60(int32_t param_1, uint param_2)\n\n{\n    code **ppcVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    ushort uVar5;\n    int32_t iVar6;\n    \n    if ((*(*(param_1 + 4) + 4) != 6) || ((*(*(param_1 + 4) + 8) & 4) != 0)) {\n        fcn.1000c050();\n    }\n    if ((*(param_1 + 8) & 0x100) == 0) {\n        if ((*(param_1 + 8) & 0x800) == 0) {\n            uVar5 = param_2;\n        }\n        else {\n            uVar5 = fcn.100075a0(param_2);\n        }\n    }\n    else {\n        ppcVar1 = *(*(param_1 + 0xc) + 4);\n        pcVar2 = *ppcVar1;\n        if (pcVar2 == vtable.std::ctype_wchar_t_.0) {\n            uVar5 = fcn.1000dfc7(param_2, ppcVar1 + 2);\n        }\n        else {\n            uVar5 = (**(pcVar2 + 0x20))(param_2);\n        }\n    }\n    iVar3 = *(param_1 + 4);\n    uVar4 = *(iVar3 + 0x18);\n    if (*(iVar3 + 0x14) < uVar4 || *(iVar3 + 0x14) == uVar4) {\n        iVar6 = fcn.10013bc2(*(iVar3 + 0x1c), (uVar4 + 0x10) * 2);\n        if (iVar6 == 0) {\n            fcn.1000f48a();\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n        *(iVar3 + 0x1c) = iVar6;\n        *(iVar3 + 0x14) = uVar4 + 0x10;\n    }\n    *(*(iVar3 + 0x1c) + *(iVar3 + 0x18) * 2) = uVar5;\n    *(iVar3 + 0x18) = *(iVar3 + 0x18) + 1;\n    return;\n}\n",
        "token_count": 536
    },
    "1000c7d0": {
        "rules": [
            "parse credit card information/0fcc6283562247e58776c7b51a92f681"
        ],
        "decompiled_code": "\nushort __thiscall fcn.1000c7d0(int32_t param_1, int16_t param_2)\n\n{\n    if (param_2 == 0x66) {\n        *(param_1 + 0x44) = 0xc;\n        return 1;\n    }\n    if (param_2 == 0x6e) {\n        *(param_1 + 0x44) = 10;\n        return 1;\n    }\n    if (param_2 == 0x72) {\n        *(param_1 + 0x44) = 0xd;\n        return 1;\n    }\n    if (param_2 == 0x74) {\n        *(param_1 + 0x44) = 9;\n        return 1;\n    }\n    if (param_2 == 0x76) {\n        *(param_1 + 0x44) = 0xb;\n        return 1;\n    }\n    return 0;\n}\n",
        "token_count": 214
    },
    "1001c5bb": {
        "rules": [
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf",
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8"
        ],
        "decompiled_code": "\n// WARNING: Type propagation algorithm not settling\n\nint32_t __cdecl fcn.1001c5bb(int32_t *arg_8h, int32_t *arg_ch)\n\n{\n    char cVar1;\n    code *pcVar2;\n    uint *puVar3;\n    int32_t iVar4;\n    char *pcVar5;\n    uint32_t uVar6;\n    char *pcVar7;\n    int32_t iVar8;\n    uint32_t uVar9;\n    char **ppcVar10;\n    char **arg_8h_00;\n    char **var_28h;\n    char **var_24h;\n    uint var_20h;\n    char **var_1ch;\n    char *var_18h;\n    char *var_14h;\n    char *var_10h;\n    char *var_ch;\n    char **var_8h;\n    char *var_4h;\n    \n    if (arg_ch == NULL) {\n        puVar3 = fcn.10013e79();\n        iVar8 = 0x16;\n        *puVar3 = 0x16;\n        fcn.10013d94();\n    }\n    else {\n        pcVar7 = NULL;\n        *arg_ch = 0;\n        iVar8 = *arg_8h;\n        var_28h = NULL;\n        var_24h = NULL;\n        var_20h = 0;\n        ppcVar10 = var_28h;\n        while (var_28h = ppcVar10,  iVar8 != 0) {\n            var_4h = CONCAT13(var_4h >> 0x18, 0x3f2a);\n            iVar8 = fcn.10020980(iVar8, &var_4h);\n            if (iVar8 == 0) {\n                iVar8 = fcn.1001c1b1(*arg_8h, 0, 0, &var_28h);\n            }\n            else {\n                iVar8 = fcn.1001c262(*arg_8h, iVar8, &var_28h);\n            }\n            ppcVar10 = var_28h;\n            var_8h = iVar8;\n            if (iVar8 != 0) goto code_r0x1001c162;\n            arg_8h = arg_8h + 1;\n            iVar8 = *arg_8h;\n        }\n        var_4h = NULL;\n        var_ch = (var_24h - ppcVar10 >> 2) + 1;\n        uVar9 = ~-(var_24h < ppcVar10) & (var_24h - ppcVar10) + 3U >> 2;\n        var_8h = ppcVar10;\n        if (uVar9 != 0) {\n            uVar6 = 0;\n            do {\n                pcVar5 = *var_8h;\n                var_10h = pcVar5 + 1;\n                do {\n                    cVar1 = *pcVar5;\n                    pcVar5 = pcVar5 + 1;\n                } while (cVar1 != '\\0');\n                pcVar7 = pcVar5 + pcVar7 + (1 - var_10h);\n                var_8h = var_8h + 1;\n                uVar6 = uVar6 + 1;\n                var_4h = pcVar7;\n            } while (uVar6 != uVar9);\n        }\n        iVar8 = fcn.10015809(var_ch, var_4h, 1);\n        if (iVar8 == 0) {\n            iVar8 = -1;\n            var_8h = 0xffffffff;\n        }\n        else {\n            var_ch = iVar8 + var_ch * 4;\n            var_18h = var_ch;\n            if (ppcVar10 != var_24h) {\n                var_1ch = iVar8 - ppcVar10;\n                var_8h = ppcVar10;\n                do {\n                    var_14h = *var_8h;\n                    var_10h = var_14h;\n                    do {\n                        cVar1 = *var_10h;\n                        var_10h = var_10h + 1;\n                    } while (cVar1 != '\\0');\n                    var_10h = var_10h + (1 - (var_14h + 1));\n                    iVar4 = fcn.1001d82e(var_ch, var_4h + (var_18h - var_ch), var_14h, var_10h);\n                    if (iVar4 != 0) {\n                        fcn.10013dc1(0, 0, 0, 0, 0);\n                        pcVar2 = swi(3);\n                        iVar8 = (*pcVar2)();\n                        return iVar8;\n                    }\n                    *(var_1ch + var_8h) = var_ch;\n                    var_8h = var_8h + 1;\n                    var_ch = var_ch + var_10h;\n                } while (var_8h != var_24h);\n            }\n            var_8h = NULL;\n            *arg_ch = iVar8;\n            iVar8 = 0;\n        }\n        fcn.1001485e(0);\ncode_r0x1001c162:\n        uVar6 = 0;\n        uVar9 = ~-(var_24h < ppcVar10) & var_24h + (3 - ppcVar10) >> 2;\n        arg_8h_00 = ppcVar10;\n        var_1ch = ppcVar10;\n        var_18h = uVar9;\n        if (uVar9 != 0) {\n            do {\n                fcn.1001485e(*ppcVar10);\n                uVar6 = uVar6 + 1;\n                ppcVar10 = ppcVar10 + 1;\n                iVar8 = var_8h;\n                arg_8h_00 = var_28h;\n            } while (uVar6 != uVar9);\n        }\n        fcn.1001485e(arg_8h_00);\n    }\n    return iVar8;\n}\n",
        "token_count": 1347
    },
    "1001fd57": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.1001fd57(uint8_t *arg_8h, uint32_t arg_ch, uint32_t *arg_10h)\n\n{\n    uint8_t uVar1;\n    int32_t iVar2;\n    uint8_t uVar3;\n    int32_t iVar4;\n    \n    if (arg_8h == NULL) {\n        arg_ch = 0;\n    }\n    else {\n        if (arg_ch != 0) {\n            if ((arg_ch & 0xffffff80) == 0) {\n                *arg_8h = arg_ch;\n                return 1;\n            }\n            if ((arg_ch & 0xfffff800) == 0) {\n                uVar3 = 0xc0;\n                iVar4 = 1;\n                iVar2 = iVar4;\n            }\n            else if ((arg_ch & 0xffff0000) == 0) {\n                if ((0xd7ff < arg_ch) && (arg_ch < 0xe000)) {\ncode_r0x1001fd2b:\n                    iVar2 = fcn.1001fd38(arg_10h);\n                    return iVar2;\n                }\n                iVar4 = 2;\n                uVar3 = 0xe0;\n                iVar2 = iVar4;\n            }\n            else {\n                if (((arg_ch & 0xffe00000) != 0) || (0x10ffff < arg_ch)) goto code_r0x1001fd2b;\n                iVar4 = 3;\n                uVar3 = 0xf0;\n                iVar2 = iVar4;\n            }\n            do {\n                uVar1 = arg_ch;\n                arg_ch = arg_ch >> 6;\n                arg_8h[iVar4] = uVar1 & 0x3f | 0x80;\n                iVar4 = iVar4 + -1;\n            } while (iVar4 != 0);\n            *arg_8h = arg_ch | uVar3;\n            *arg_10h = 0;\n            arg_10h[1] = 0;\n            return iVar2 + 1;\n        }\n        *arg_8h = arg_ch;\n    }\n    *arg_10h = arg_ch;\n    arg_10h[1] = arg_ch;\n    return 1;\n}\n",
        "token_count": 495
    },
    "1001fff1": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.1001fff1(uint32_t lpCriticalSection)\n\n{\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)\n              ((lpCriticalSection & 0x3f) * 0x38 + *((lpCriticalSection >> 6) * 4 + 0x10056ae0));\n    return;\n}\n",
        "token_count": 70
    },
    "10020014": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.10020014(uint32_t lpCriticalSection)\n\n{\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)\n              ((lpCriticalSection & 0x3f) * 0x38 + *((lpCriticalSection >> 6) * 4 + 0x10056ae0));\n    return;\n}\n",
        "token_count": 70
    },
    "10001000": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.10001000(void)\n\n{\n    int32_t *in_FS_OFFSET;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    // [00] -r-x section size 249856 named .text\n    uStack12 = 0x1003d436;\n    var_ch = *in_FS_OFFSET;\n    *in_FS_OFFSET = &var_ch;\n    var_4h = 0;\n    fcn.10004280(0);\n    fcn.1000ed33(fcn.1003db30);\n    *in_FS_OFFSET = var_ch;\n    return;\n}\n",
        "token_count": 138
    },
    "100010f0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** __thiscall fcn.100010f0(code **param_1, uint param_2)\n\n{\n    uint uStack8;\n    uchar uStack4;\n    \n    uStack8 = param_2;\n    uStack4 = 1;\n    *param_1 = vtable.std::exception.0;\n    *(param_1 + 1) = 0;\n    fcn.1000f95d(&uStack8, param_1 + 1);\n    return param_1;\n}\n",
        "token_count": 110
    },
    "10001130": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** __thiscall fcn.10001130(code **param_1, int32_t param_2)\n\n{\n    *param_1 = vtable.std::exception.0;\n    *(param_1 + 1) = 0;\n    fcn.1000f95d(param_2 + 4, param_1 + 1);\n    return param_1;\n}\n",
        "token_count": 83
    },
    "10013da4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.10013da4(void)\n\n{\n    code *pcVar1;\n    \n    fcn.10013d30(0, 0, 0, 0, 0);\n    fcn.10013dc1(0, 0, 0, 0, 0);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 86
    },
    "10001230": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl fcn.10001230(int32_t arg_8h)\n\n{\n    int32_t in_ECX;\n    int32_t *in_FS_OFFSET;\n    code *var_24h;\n    uint var_20h;\n    char *var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x1003d2ca;\n    var_ch = *in_FS_OFFSET;\n    *in_FS_OFFSET = &var_ch;\n    fcn.1000d8b6(0);\n    *(in_ECX + 4) = 0;\n    *(in_ECX + 8) = 0;\n    *(in_ECX + 0xc) = 0;\n    *(in_ECX + 0x10) = 0;\n    *(in_ECX + 0x14) = 0;\n    *(in_ECX + 0x18) = 0;\n    *(in_ECX + 0x1c) = 0;\n    *(in_ECX + 0x20) = 0;\n    *(in_ECX + 0x24) = 0;\n    *(in_ECX + 0x28) = 0;\n    *(in_ECX + 0x2c) = 0;\n    *(in_ECX + 0x30) = 0;\n    var_4h = 6;\n    if (arg_8h == 0) {\n        var_24h = vtable.std::exception.0;\n        var_18h = \"bad locale name\";\n        var_14h._0_1_ = 1;\n        _var_20h = 0;\n        fcn.1000f95d(&var_18h, &var_20h);\n        var_24h = vtable.std::runtime_error.0;\n        arg_8h = fcn.100117a4(&var_24h, 0x1004d758);\n    }\n    fcn.1000dbfe(in_ECX, arg_8h);\n    *in_FS_OFFSET = var_ch;\n    return;\n}\n",
        "token_count": 502
    },
    "10001610": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** __thiscall fcn.10001610(code **param_1, uint param_2, code *param_3)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    code *pcVar3;\n    code **ppcVar4;\n    uchar auStack68 [16];\n    uchar auStack52 [52];\n    \n    param_1[1] = param_3;\n    *param_1 = vtable.std::ctype_wchar_t_.0;\n    ppcVar4 = fcn.1000e029(auStack68);\n    pcVar1 = ppcVar4[1];\n    pcVar2 = ppcVar4[2];\n    pcVar3 = ppcVar4[3];\n    param_1[2] = *ppcVar4;\n    param_1[3] = pcVar1;\n    param_1[4] = pcVar2;\n    param_1[5] = pcVar3;\n    ppcVar4 = fcn.1000e17b(auStack52);\n    pcVar1 = ppcVar4[1];\n    pcVar2 = ppcVar4[2];\n    pcVar3 = ppcVar4[3];\n    param_1[6] = *ppcVar4;\n    param_1[7] = pcVar1;\n    param_1[8] = pcVar2;\n    param_1[9] = pcVar3;\n    pcVar1 = ppcVar4[5];\n    pcVar2 = ppcVar4[6];\n    pcVar3 = ppcVar4[7];\n    param_1[10] = ppcVar4[4];\n    param_1[0xb] = pcVar1;\n    param_1[0xc] = pcVar2;\n    param_1[0xd] = pcVar3;\n    *(param_1 + 0xe) = *(ppcVar4 + 8);\n    param_1[0x10] = ppcVar4[10];\n    return param_1;\n}\n",
        "token_count": 448
    },
    "10001b20": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __fastcall fcn.10001b20(uint param_1)\n\n{\n    fcn.100053c0();\n    return param_1;\n}\n",
        "token_count": 33
    },
    "10003100": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_7ch\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl fcn.10003100(uint arg_8h)\n\n{\n    uint32_t uVar1;\n    uint uVar2;\n    uint in_EDX;\n    int32_t *in_FS_OFFSET;\n    uint var_7ch;\n    uint var_78h;\n    uint var_74h;\n    uint var_5ch;\n    uint var_44h;\n    uint var_2ch;\n    uint var_14h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x1003d3c0;\n    var_ch = *in_FS_OFFSET;\n    uVar1 = *0x1004f06c ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    uVar2 = fcn.10001b20(uVar1);\n    var_4h = 0;\n    fcn.10005480(in_EDX);\n    var_4h._0_1_ = 1;\n    fcn.10005560(0x1004a248);\n    var_4h._0_1_ = 2;\n    fcn.100055e0(uVar2);\n    var_4h = CONCAT31(var_4h._1_3_, 3);\n    fcn.10005560(0x1004a244);\n    fcn.10003600();\n    fcn.10003600();\n    fcn.10003600();\n    fcn.10003600();\n    *in_FS_OFFSET = var_ch;\n    fcn.1000e9b7(0);\n    return;\n}\n",
        "token_count": 390
    },
    "10003210": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl fcn.10003210(uint arg_8h)\n\n{\n    code **in_ECX;\n    uint unaff_EDI;\n    int32_t *in_FS_OFFSET;\n    uint var_6ch;\n    uint var_68h;\n    uint *var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint *var_44h;\n    uint32_t var_30h;\n    uint var_2ch;\n    uint var_1ch;\n    uint var_18h;\n    uint32_t var_14h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x1003d400;\n    var_ch = *in_FS_OFFSET;\n    var_14h = *0x1004f06c ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    var_18h = 0xf;\n    var_1ch = 0;\n    var_2ch._0_1_ = 0;\n    fcn.10003d80(\"type_error\", 10, var_14h);\n    var_4h = 0;\n    fcn.10003100(0x131);\n    var_4h = CONCAT31(var_4h._1_3_, 1);\n    fcn.100055b0(arg_8h);\n    fcn.10003600();\n    fcn.10003600();\n    var_60h._0_1_ = 1;\n    var_64h = &var_44h;\n    if (0xf < var_30h) {\n        var_64h = var_44h;\n    }\n    *(in_ECX + 1) = 0;\n    *in_ECX = vtable.nlohmann::detail::exception.0;\n    in_ECX[3] = 0x131;\n    in_ECX[4] = vtable.std::exception.0;\n    *(in_ECX + 5) = 0;\n    fcn.1000f95d(&var_64h, in_ECX + 5);\n    in_ECX[4] = vtable.std::runtime_error.0;\n    *in_ECX = vtable.nlohmann::detail::type_error.0;\n    fcn.10003600();\n    *in_FS_OFFSET = var_ch;\n    fcn.1000e9b7(unaff_EDI);\n    return;\n}\n",
        "token_count": 558
    },
    "10003350": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl fcn.10003350(uint arg_8h)\n\n{\n    code **in_ECX;\n    uint unaff_EDI;\n    int32_t *in_FS_OFFSET;\n    uint var_6ch;\n    uint var_68h;\n    uint *var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint *var_44h;\n    uint32_t var_30h;\n    uint var_2ch;\n    uint var_1ch;\n    uint var_18h;\n    uint32_t var_14h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x1003d400;\n    var_ch = *in_FS_OFFSET;\n    var_14h = *0x1004f06c ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    var_18h = 0xf;\n    var_1ch = 0;\n    var_2ch._0_1_ = 0;\n    fcn.10003d80(\"other_error\", 0xb, var_14h);\n    var_4h = 0;\n    fcn.10003100(500);\n    var_4h = CONCAT31(var_4h._1_3_, 1);\n    fcn.100055b0(arg_8h);\n    fcn.10003600();\n    fcn.10003600();\n    var_60h._0_1_ = 1;\n    var_64h = &var_44h;\n    if (0xf < var_30h) {\n        var_64h = var_44h;\n    }\n    *(in_ECX + 1) = 0;\n    *in_ECX = vtable.nlohmann::detail::exception.0;\n    in_ECX[3] = 0x1f4;\n    in_ECX[4] = vtable.std::exception.0;\n    *(in_ECX + 5) = 0;\n    fcn.1000f95d(&var_64h, in_ECX + 5);\n    in_ECX[4] = vtable.std::runtime_error.0;\n    *in_ECX = vtable.nlohmann::detail::other_error.0;\n    fcn.10003600();\n    *in_FS_OFFSET = var_ch;\n    fcn.1000e9b7(unaff_EDI);\n    return;\n}\n",
        "token_count": 559
    },
    "100034a0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.100034a0(uint8_t *param_1)\n\n{\n    fcn.100036f0(*param_1);\n    return;\n}\n",
        "token_count": 37
    },
    "100034c0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/0325759584d940e7b69154ed16836be2",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a",
            "PEB access",
            "access PEB ldr_data"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.100034c0(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    char cVar1;\n    uint *in_ECX;\n    int32_t *in_FS_OFFSET;\n    uint var_10h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    uStack12 = 0x1003d46b;\n    var_ch = *in_FS_OFFSET;\n    *in_FS_OFFSET = &var_ch;\n    *in_ECX = arg_8h;\n    in_ECX[1] = arg_ch;\n    in_ECX[2] = arg_10h;\n    in_ECX[3] = 0;\n    in_ECX[4] = 0;\n    *(in_ECX + 5) = 0;\n    in_ECX[6] = 0;\n    in_ECX[7] = 0;\n    in_ECX[8] = 0;\n    in_ECX[9] = 0;\n    in_ECX[10] = 0;\n    *(in_ECX + 0xb) = 0;\n    in_ECX[0xc] = 0;\n    in_ECX[0xd] = 0;\n    *(in_ECX + 0xe) = 0;\n    in_ECX[0xf] = 0;\n    in_ECX[0x10] = 0;\n    *(in_ECX + 0x11) = 0;\n    var_4h = 0;\n    cVar1 = fcn.10005790(*in_ECX, in_ECX[1], in_ECX[3], *in_ECX);\n    if (cVar1 == '\\0') {\n        in_ECX[2] = 0;\n    }\n    *in_FS_OFFSET = var_ch;\n    return;\n}\n",
        "token_count": 407
    },
    "10003600": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.10003600(uint32_t **param_1)\n\n{\n    uint32_t *puVar1;\n    code *pcVar2;\n    uint32_t *puVar3;\n    \n    if (param_1[5] < 0x10) goto code_r0x10003638;\n    puVar1 = *param_1;\n    puVar3 = puVar1;\n    if (param_1[5] + 1U < 0x1000) {\ncode_r0x1000362f:\n        fcn.1000ed48(puVar3);\ncode_r0x10003638:\n        param_1[5] = 0xf;\n        param_1[4] = NULL;\n        if (0xf < param_1[5]) {\n            param_1 = *param_1;\n        }\n        *param_1 = 0;\n        return;\n    }\n    if ((puVar1 & 0x1f) == 0) {\n        puVar3 = puVar1[-1];\n        if (puVar1 <= puVar3) goto code_r0x10003658;\n        if (3 < puVar1 - puVar3) {\n            if (0x23 < puVar1 - puVar3) goto code_r0x10003662;\n            goto code_r0x1000362f;\n        }\n    }\n    else {\n        fcn.10013da4();\ncode_r0x10003658:\n        fcn.10013da4();\n    }\n    fcn.10013da4();\ncode_r0x10003662:\n    fcn.10013da4();\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 379
    },
    "10003670": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint * __thiscall fcn.10003670(uint *param_1, uint *param_2)\n\n{\n    param_1[5] = 0xf;\n    param_1[4] = 0;\n    *param_1 = 0;\n    if (param_2[5] < 0x10) {\n        if (param_2[4] + 1 != 0) {\n            fcn.1000f9e0(param_1, param_2, param_2[4] + 1);\n        }\n    }\n    else {\n        *param_1 = *param_2;\n        *param_2 = 0;\n    }\n    param_1[4] = param_2[4];\n    param_1[5] = param_2[5];\n    param_2[5] = 0xf;\n    param_2[4] = 0;\n    if (0xf < param_2[5]) {\n        **param_2 = 0;\n        return param_1;\n    }\n    *param_2 = 0;\n    return param_1;\n}\n",
        "token_count": 244
    },
    "10003b60": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t ** __thiscall fcn.10003b60(int32_t **param_1, int32_t **param_2, int32_t *param_3)\n\n{\n    int32_t *piVar1;\n    code *pcVar2;\n    int32_t **ppiVar3;\n    \n    if (param_2 != NULL) {\n        piVar1 = param_1[5];\n        ppiVar3 = param_1;\n        if (0x7 < piVar1) {\n            ppiVar3 = *param_1;\n        }\n        if (ppiVar3 <= param_2) {\n            ppiVar3 = param_1;\n            if (0x7 < piVar1) {\n                ppiVar3 = *param_1;\n            }\n            if (param_2 < ppiVar3 + param_1[4] * 2) {\n                ppiVar3 = param_1;\n                if (0x7 < piVar1) {\n                    ppiVar3 = *param_1;\n                }\n                ppiVar3 = fcn.100044c0(param_1, param_2 - ppiVar3 >> 1, param_3);\n                return ppiVar3;\n            }\n        }\n    }\n    if (0x7ffffffe < param_3) {\n        fcn.1000df24(\"string too long\");\n        pcVar2 = swi(3);\n        ppiVar3 = (*pcVar2)();\n        return ppiVar3;\n    }\n    if (param_1[5] < param_3) {\n        fcn.10004be0(param_3, param_1[4]);\n        if (param_3 == NULL) {\n            return param_1;\n        }\n    }\n    else if (param_3 == NULL) {\n        param_1[4] = NULL;\n        if (0x7 < param_1[5]) {\n            **param_1 = 0;\n            return param_1;\n        }\n        *param_1 = 0;\n        return param_1;\n    }\n    ppiVar3 = param_1;\n    if (0x7 < param_1[5]) {\n        ppiVar3 = *param_1;\n    }\n    if (param_3 != NULL) {\n        fcn.10011230(ppiVar3, param_2, param_3 * 2);\n    }\n    param_1[4] = param_3;\n    if (param_1[5] < 0x8) {\n        *(param_1 + param_3 * 2) = 0;\n        return param_1;\n    }\n    *(*param_1 + param_3 * 2) = 0;\n    return param_1;\n}\n",
        "token_count": 600
    },
    "10003d80": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t ** __thiscall fcn.10003d80(int32_t **param_1, int32_t **param_2, int32_t *param_3)\n\n{\n    int32_t *piVar1;\n    code *pcVar2;\n    int32_t **ppiVar3;\n    \n    if (param_2 != NULL) {\n        piVar1 = param_1[5];\n        ppiVar3 = param_1;\n        if (0xf < piVar1) {\n            ppiVar3 = *param_1;\n        }\n        if (ppiVar3 <= param_2) {\n            ppiVar3 = param_1;\n            if (0xf < piVar1) {\n                ppiVar3 = *param_1;\n            }\n            if (param_2 < param_1[4] + ppiVar3) {\n                if (0xf < piVar1) {\n                    ppiVar3 = fcn.10003e80(param_1, param_2 - *param_1, param_3);\n                    return ppiVar3;\n                }\n                ppiVar3 = fcn.10003e80(param_1, param_2 - param_1, param_3);\n                return ppiVar3;\n            }\n        }\n    }\n    if (param_3 == 0xffffffff) {\n        fcn.1000df24(\"string too long\");\n        pcVar2 = swi(3);\n        ppiVar3 = (*pcVar2)();\n        return ppiVar3;\n    }\n    if (param_1[5] < param_3) {\n        fcn.10004f50(param_3, param_1[4]);\n        if (param_3 == NULL) {\n            return param_1;\n        }\n    }\n    else if (param_3 == NULL) {\n        param_1[4] = NULL;\n        if (0xf < param_1[5]) {\n            **param_1 = 0;\n            return param_1;\n        }\n        *param_1 = 0;\n        return param_1;\n    }\n    ppiVar3 = param_1;\n    if (0xf < param_1[5]) {\n        ppiVar3 = *param_1;\n    }\n    if (param_3 != NULL) {\n        fcn.10011230(ppiVar3, param_2, param_3);\n    }\n    param_1[4] = param_3;\n    if (param_1[5] < 0x10) {\n        *(param_1 + param_3) = 0;\n        return param_1;\n    }\n    *(*param_1 + param_3) = 0;\n    return param_1;\n}\n",
        "token_count": 593
    },
    "10003e80": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t ** __thiscall fcn.10003e80(int32_t **param_1, int32_t **param_2, int32_t *param_3, int32_t *param_4)\n\n{\n    code *pcVar1;\n    int32_t *piVar2;\n    int32_t **ppiVar3;\n    \n    if (param_2[4] < param_3) {\n        fcn.1000df44(\"invalid string position\");\n    }\n    else {\n        piVar2 = param_2[4] - param_3;\n        if (piVar2 < param_4) {\n            param_4 = piVar2;\n        }\n        if (param_1 != param_2) {\n            if (param_4 != 0xffffffff) {\n                if (param_1[5] < param_4) {\n                    fcn.10004f50(param_4, param_1[4]);\n                    if (param_4 == NULL) {\n                        return param_1;\n                    }\n                }\n                else if (param_4 == NULL) {\n                    param_1[4] = NULL;\n                    if (0xf < param_1[5]) {\n                        **param_1 = 0;\n                        return param_1;\n                    }\n                    *param_1 = 0;\n                    return param_1;\n                }\n                if (0xf < param_2[5]) {\n                    param_2 = *param_2;\n                }\n                ppiVar3 = param_1;\n                if (0xf < param_1[5]) {\n                    ppiVar3 = *param_1;\n                }\n                if (param_4 != NULL) {\n                    fcn.10011230(ppiVar3, param_2 + param_3, param_4);\n                }\n                param_1[4] = param_4;\n                if (param_1[5] < 0x10) {\n                    *(param_1 + param_4) = 0;\n                    return param_1;\n                }\n                *(*param_1 + param_4) = 0;\n                return param_1;\n            }\n            goto code_r0x10003f79;\n        }\n        param_4 = param_4 + param_3;\n        if (param_4 <= param_1[4]) {\n            param_1[4] = param_4;\n            ppiVar3 = param_1;\n            if (0xf < param_1[5]) {\n                ppiVar3 = *param_1;\n            }\n            *(ppiVar3 + param_4) = 0;\n            fcn.10004700(0, param_3);\n            return param_1;\n        }\n    }\n    fcn.1000df44(\"invalid string position\");\ncode_r0x10003f79:\n    fcn.1000df24(\"string too long\");\n    pcVar1 = swi(3);\n    ppiVar3 = (*pcVar1)();\n    return ppiVar3;\n}\n",
        "token_count": 649
    },
    "10003f90": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t ** __thiscall fcn.10003f90(int32_t **param_1, int32_t **param_2, uint32_t param_3)\n\n{\n    int32_t *piVar1;\n    int32_t *piVar2;\n    code *pcVar3;\n    int32_t **ppiVar4;\n    \n    if (param_2 != NULL) {\n        piVar2 = param_1[5];\n        ppiVar4 = param_1;\n        if (0xf < piVar2) {\n            ppiVar4 = *param_1;\n        }\n        if (ppiVar4 <= param_2) {\n            ppiVar4 = param_1;\n            if (0xf < piVar2) {\n                ppiVar4 = *param_1;\n            }\n            if (param_2 < param_1[4] + ppiVar4) {\n                if (0xf < piVar2) {\n                    ppiVar4 = fcn.100040c0(param_1, param_2 - *param_1, param_3);\n                    return ppiVar4;\n                }\n                ppiVar4 = fcn.100040c0(param_1, param_2 - param_1, param_3);\n                return ppiVar4;\n            }\n        }\n    }\n    piVar2 = param_1[4];\n    if (param_3 < ~piVar2) {\n        piVar1 = piVar2 + param_3;\n        if (param_3 != 0) {\n            if (piVar1 == 0xffffffff) goto code_r0x100040a6;\n            if (param_1[5] < piVar1) {\n                fcn.10004f50(piVar1, piVar2);\n                if (piVar1 == NULL) {\n                    return param_1;\n                }\n            }\n            else if (piVar1 == NULL) {\n                param_1[4] = NULL;\n                if (0xf < param_1[5]) {\n                    **param_1 = 0;\n                    return param_1;\n                }\n                *param_1 = 0;\n                return param_1;\n            }\n            ppiVar4 = param_1;\n            if (0xf < param_1[5]) {\n                ppiVar4 = *param_1;\n            }\n            if (param_3 != 0) {\n                fcn.10011230(param_1[4] + ppiVar4, param_2, param_3);\n            }\n            param_1[4] = piVar1;\n            if (0xf < param_1[5]) {\n                *(*param_1 + piVar1) = 0;\n                return param_1;\n            }\n            *(param_1 + piVar1) = 0;\n        }\n        return param_1;\n    }\n    fcn.1000df24(\"string too long\");\ncode_r0x100040a6:\n    fcn.1000df24(\"string too long\");\n    pcVar3 = swi(3);\n    ppiVar4 = (*pcVar3)();\n    return ppiVar4;\n}\n",
        "token_count": 686
    },
    "100040c0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t ** __thiscall fcn.100040c0(int32_t **param_1, uint *param_2, uint32_t param_3, uint32_t param_4)\n\n{\n    int32_t *piVar1;\n    int32_t *piVar2;\n    code *pcVar3;\n    uint32_t uVar4;\n    int32_t **ppiVar5;\n    uint32_t unaff_retaddr;\n    \n    if (param_2[4] < param_3) {\n        fcn.1000df44(\"invalid string position\");\n    }\n    else {\n        piVar2 = param_1[4];\n        uVar4 = param_2[4] - param_3;\n        if (uVar4 < param_4) {\n            param_4 = uVar4;\n        }\n        if (param_4 < ~piVar2) {\n            piVar1 = piVar2 + param_4;\n            if (param_4 == 0) {\n                return param_1;\n            }\n            if (piVar1 != 0xffffffff) {\n                if (param_1[5] < piVar1) {\n                    param_3 = unaff_retaddr;\n                    fcn.10004f50(piVar1, piVar2);\n                    if (piVar1 == NULL) {\n                        return param_1;\n                    }\n                }\n                else if (piVar1 == NULL) {\n                    param_1[4] = NULL;\n                    if (0xf < param_1[5]) {\n                        **param_1 = 0;\n                        return param_1;\n                    }\n                    *param_1 = 0;\n                    return param_1;\n                }\n                if (0xf < param_2[5]) {\n                    param_2 = *param_2;\n                }\n                ppiVar5 = param_1;\n                if (0xf < param_1[5]) {\n                    ppiVar5 = *param_1;\n                }\n                if (param_4 != 0) {\n                    fcn.10011230(param_1[4] + ppiVar5, param_2 + param_3, param_4);\n                }\n                param_1[4] = piVar1;\n                if (param_1[5] < 0x10) {\n                    *(param_1 + piVar1) = 0;\n                    return param_1;\n                }\n                *(*param_1 + piVar1) = 0;\n                return param_1;\n            }\n            goto code_r0x100041aa;\n        }\n    }\n    fcn.1000df24(\"string too long\");\ncode_r0x100041aa:\n    fcn.1000df24(\"string too long\");\n    pcVar3 = swi(3);\n    ppiVar5 = (*pcVar3)();\n    return ppiVar5;\n}\n",
        "token_count": 619
    },
    "10004280": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Type propagation algorithm not settling\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl fcn.10004280(uint arg_8h)\n\n{\n    uint8_t uVar1;\n    uint8_t *puVar2;\n    code *pcVar3;\n    uint *puVar4;\n    char *pcVar5;\n    uint8_t *puVar6;\n    ulong *in_ECX;\n    uint8_t uVar7;\n    uint32_t *puVar8;\n    int32_t unaff_EBX;\n    uint8_t *puVar9;\n    uint8_t **ppuVar10;\n    int32_t *in_FS_OFFSET;\n    ulong uVar11;\n    uint in_stack_ffffffb0;\n    uint var_48h;\n    uint var_2ch;\n    uint var_1ch;\n    uint var_18h;\n    uint32_t var_14h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x1003d4c8;\n    var_ch = *in_FS_OFFSET;\n    var_14h = *0x1004f06c ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    // switch table (9 cases) at 0x100043bc\n    switch(arg_8h) {\n    case 0:\n        *in_ECX = 0;\n        break;\n    case 1:\n        puVar4 = fcn.10005960();\n        goto code_r0x100042c6;\n    case 2:\n        puVar4 = fcn.1000e9c8(0xc);\n        if (puVar4 != NULL) {\n            *puVar4 = 0;\n            puVar4[1] = 0;\n            puVar4[2] = 0;\n        }\n        goto code_r0x100042c6;\n    case 3:\n        puVar4 = fcn.100059e0();\n        goto code_r0x100042c6;\n    case 4:\n        *in_ECX = 0;\n        break;\n    case 5:\n    case 6:\n        *in_ECX = 0;\n        *(in_ECX + 4) = 0;\n        break;\n    case 7:\n        *in_ECX = 0;\n        break;\n    case 8:\n        puVar4 = fcn.1000e9c8(0x10);\n        if (puVar4 != NULL) {\n            *puVar4 = 0;\n            puVar4[1] = 0;\n            puVar4[2] = 0;\n            *(puVar4 + 3) = 0;\n        }\ncode_r0x100042c6:\n        *in_ECX = puVar4;\n        break;\n    default:\n        *in_ECX = 0;\n        if (arg_8h == 0) {\n            var_18h = 0xf;\n            var_1ch = 0;\n            var_2ch._0_1_ = arg_8h;\n            fcn.10003d80(\"961c151d2e87f2686a955a9be24d316f1362bf21 3.9.1\", 0x2e, var_14h);\n            var_4h = 0;\n            fcn.10003350(&var_2ch);\n            uVar11 = fcn.100117a4(&var_48h, 0x1004d738);\n            puVar8 = uVar11 >> 0x20;\n            pcVar5 = uVar11;\n            puVar9 = unaff_EBX + 1;\n            uVar7 = uVar11 >> 0x20;\n            *pcVar5 = *pcVar5 + uVar7;\n            *puVar8 = *puVar8 << 0x10 | *puVar8 >> 0x10;\n            out(0x42, uVar11);\n            *pcVar5 = *pcVar5 + uVar7;\n            pcVar5 = pcVar5 & 0xffffff00 | uVar11 | *puVar9;\n            *puVar9 = *puVar9 + (puVar9 >> 8);\n            *pcVar5 = *pcVar5 + uVar7;\n            pcVar5[1] = pcVar5[1] + uVar7;\n            puVar6 = pcVar5 + 2;\n            *puVar6 = *puVar6 + uVar7;\n            ppuVar10 = unaff_EBX + 5;\n            uVar1 = *puVar6;\n            *puVar6 = *puVar6 + uVar7;\n            puVar9 = *ppuVar10;\n            puVar2 = *ppuVar10;\n            *ppuVar10 = puVar2 + puVar6 + CARRY1(uVar1, uVar7);\n            *(unaff_EBX + -0x74a9f70f) =\n                 *(unaff_EBX + -0x74a9f70f) + puVar6 +\n                 (CARRY4(puVar9, puVar6) || CARRY4(puVar2 + puVar6, CARRY1(uVar1, uVar7)));\n            pcVar3 = swi(1);\n            (*pcVar3)();\n            return;\n        }\n    }\n    *in_FS_OFFSET = var_ch;\n    fcn.1000e9b7(in_stack_ffffffb0);\n    return;\n}\n",
        "token_count": 1223
    },
    "10004460": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.10004460(uint32_t param_1, uint32_t param_2)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    \n    if (param_2 < 0x80000000) {\n        uVar2 = param_1;\n        if (param_2 * 2 < 0x1000) {\ncode_r0x10004492:\n            fcn.1000ed48(uVar2);\n            return;\n        }\n        if ((param_1 & 0x1f) != 0) goto code_r0x100044a1;\n        uVar2 = *(param_1 - 4);\n        if (param_1 <= uVar2) goto code_r0x100044a6;\n        if (3 < param_1 - uVar2) {\n            if (param_1 - uVar2 < 0x24) goto code_r0x10004492;\n            goto code_r0x100044b0;\n        }\n    }\n    else {\n        fcn.10013da4();\ncode_r0x100044a1:\n        fcn.10013da4();\ncode_r0x100044a6:\n        fcn.10013da4();\n    }\n    fcn.10013da4();\ncode_r0x100044b0:\n    fcn.10013da4();\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 317
    },
    "100044c0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t ** __thiscall fcn.100044c0(int32_t **param_1, int32_t **param_2, int32_t *param_3, int32_t *param_4)\n\n{\n    code *pcVar1;\n    int32_t *piVar2;\n    int32_t **ppiVar3;\n    \n    if (param_2[4] < param_3) {\n        fcn.1000df44(\"invalid string position\");\n    }\n    else {\n        piVar2 = param_2[4] - param_3;\n        if (piVar2 < param_4) {\n            param_4 = piVar2;\n        }\n        if (param_1 != param_2) {\n            if (param_4 < 0x7fffffff) {\n                if (param_1[5] < param_4) {\n                    fcn.10004be0(param_4, param_1[4]);\n                    if (param_4 == NULL) {\n                        return param_1;\n                    }\n                }\n                else if (param_4 == NULL) {\n                    param_1[4] = NULL;\n                    if (0x7 < param_1[5]) {\n                        **param_1 = 0;\n                        return param_1;\n                    }\n                    *param_1 = 0;\n                    return param_1;\n                }\n                if (0x7 < param_2[5]) {\n                    param_2 = *param_2;\n                }\n                ppiVar3 = param_1;\n                if (0x7 < param_1[5]) {\n                    ppiVar3 = *param_1;\n                }\n                if (param_4 != NULL) {\n                    fcn.10011230(ppiVar3, param_2 + param_3 * 2, param_4 * 2);\n                }\n                param_1[4] = param_4;\n                if (param_1[5] < 0x8) {\n                    *(param_1 + param_4 * 2) = 0;\n                    return param_1;\n                }\n                *(*param_1 + param_4 * 2) = 0;\n                return param_1;\n            }\n            goto code_r0x100045c8;\n        }\n        param_4 = param_4 + param_3;\n        if (param_4 <= param_1[4]) {\n            param_1[4] = param_4;\n            ppiVar3 = param_1;\n            if (0x7 < param_1[5]) {\n                ppiVar3 = *param_1;\n            }\n            *(ppiVar3 + param_4 * 2) = 0;\n            fcn.10004d90(0, param_3);\n            return param_1;\n        }\n    }\n    fcn.1000df44(\"invalid string position\");\ncode_r0x100045c8:\n    fcn.1000df24(\"string too long\");\n    pcVar1 = swi(3);\n    ppiVar3 = (*pcVar1)();\n    return ppiVar3;\n}\n",
        "token_count": 671
    },
    "100045e0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t ** __thiscall fcn.100045e0(int32_t **param_1, uint param_2, uint32_t param_3)\n\n{\n    int32_t *piVar1;\n    int32_t *piVar2;\n    int32_t *piVar3;\n    code *pcVar4;\n    int32_t **ppiVar5;\n    \n    piVar2 = param_1[5];\n    ppiVar5 = param_1;\n    if (0x7 < piVar2) {\n        ppiVar5 = *param_1;\n    }\n    if (ppiVar5 < 0x10056e01) {\n        ppiVar5 = param_1;\n        if (0x7 < piVar2) {\n            ppiVar5 = *param_1;\n        }\n        if (0x10056e00 < ppiVar5 + param_1[4] * 2) {\n            ppiVar5 = param_1;\n            if (0x7 < piVar2) {\n                ppiVar5 = *param_1;\n            }\n            ppiVar5 = fcn.10004e40(param_1, 0x10056e00 - ppiVar5 >> 1, param_3);\n            return ppiVar5;\n        }\n    }\n    piVar3 = param_1[4];\n    if (param_3 < ~piVar3) {\n        piVar1 = piVar3 + param_3;\n        if (param_3 != 0) {\n            if (0x7ffffffe < piVar1) goto code_r0x100046f5;\n            if (piVar2 < piVar1) {\n                fcn.10004be0(piVar1, piVar3);\n                if (piVar1 == NULL) {\n                    return param_1;\n                }\n            }\n            else if (piVar1 == NULL) {\n                param_1[4] = NULL;\n                if (0x7 < piVar2) {\n                    **param_1 = 0;\n                    return param_1;\n                }\n                *param_1 = 0;\n                return param_1;\n            }\n            ppiVar5 = param_1;\n            if (0x7 < param_1[5]) {\n                ppiVar5 = *param_1;\n            }\n            if (param_3 != 0) {\n                fcn.10011230(ppiVar5 + param_1[4] * 2, 0x10056e00, param_3 * 2);\n            }\n            param_1[4] = piVar1;\n            if (0x7 < param_1[5]) {\n                *(*param_1 + piVar1 * 2) = 0;\n                return param_1;\n            }\n            *(param_1 + piVar1 * 2) = 0;\n        }\n        return param_1;\n    }\n    fcn.1000df24(\"string too long\");\ncode_r0x100046f5:\n    fcn.1000df24(\"string too long\");\n    pcVar4 = swi(3);\n    ppiVar5 = (*pcVar4)();\n    return ppiVar5;\n}\n",
        "token_count": 700
    },
    "10004700": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t ** __thiscall fcn.10004700(int32_t **param_1, int32_t *param_2, uint32_t param_3)\n\n{\n    code *pcVar1;\n    int32_t **ppiVar2;\n    int32_t *piVar3;\n    \n    piVar3 = param_1[4];\n    if (piVar3 < param_2) {\n        fcn.1000df44(\"invalid string position\");\n        pcVar1 = swi(3);\n        ppiVar2 = (*pcVar1)();\n        return ppiVar2;\n    }\n    if (param_3 < piVar3 - param_2) {\n        if (param_3 != 0) {\n            ppiVar2 = param_1;\n            if (0xf < param_1[5]) {\n                ppiVar2 = *param_1;\n            }\n            piVar3 = piVar3 - param_3;\n            if (piVar3 - param_2 != 0) {\n                fcn.1000f9e0(ppiVar2 + param_2, ppiVar2 + param_2 + param_3, piVar3 - param_2);\n            }\n            param_1[4] = piVar3;\n            if (0xf < param_1[5]) {\n                *(*param_1 + piVar3) = 0;\n                return param_1;\n            }\n            *(param_1 + piVar3) = 0;\n        }\n        return param_1;\n    }\n    param_1[4] = param_2;\n    if (param_1[5] < 0x10) {\n        *(param_1 + param_2) = 0;\n        return param_1;\n    }\n    *(*param_1 + param_2) = 0;\n    return param_1;\n}\n",
        "token_count": 404
    },
    "10004950": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.10004950(uint32_t *param_1, uint32_t param_2)\n\n{\n    uint32_t uVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    uint32_t *extraout_ECX;\n    uint32_t *extraout_ECX_00;\n    uint32_t *puVar4;\n    int32_t unaff_EBX;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    uint32_t uStack8;\n    \n    if (param_2 == 0) {\n        uVar5 = 0;\n        puVar4 = param_1;\n    }\n    else {\n        if (0xfffffff < param_2) {\n            fcn.1000f48a();\ncode_r0x10004a2a:\n            fcn.1000f48a();\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n        uVar5 = param_2 * 0x10;\n        if (uVar5 < 0x1000) {\n            uVar5 = fcn.1000e9c8(uVar5);\n            puVar4 = extraout_ECX_00;\n        }\n        else {\n            if (uVar5 + 0x23 <= uVar5) goto code_r0x10004a2a;\n            iVar3 = fcn.1000e9c8(uVar5 + 0x23);\n            uVar5 = iVar3 + 0x23U & 0xffffffe0;\n            *(uVar5 - 4) = iVar3;\n            puVar4 = extraout_ECX;\n        }\n    }\n    uStack8 = uStack8 & 0xffffff00;\n    fcn.1000a2a0(uVar5, puVar4, uStack8, puVar4);\n    uVar1 = param_1[1];\n    uVar6 = *param_1;\n    iVar3 = uVar1 - uVar6 >> 4;\n    if (uVar6 != 0) {\n        for (; iVar3 = unaff_EBX,  uVar6 != uVar1; uVar6 = uVar6 + 0x10) {\n            fcn.100034a0();\n            unaff_EBX = iVar3;\n        }\n        fcn.10005130(*param_1, param_1[2] - *param_1 >> 4);\n    }\n    param_1[2] = param_2 * 0x10 + uVar5;\n    param_1[1] = iVar3 * 0x10 + uVar5;\n    *param_1 = uVar5;\n    return;\n}\n",
        "token_count": 594
    },
    "10004d90": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t ** __thiscall fcn.10004d90(int32_t **param_1, int32_t *param_2, uint32_t param_3)\n\n{\n    int32_t iVar1;\n    code *pcVar2;\n    int32_t **ppiVar3;\n    int32_t *piVar4;\n    \n    piVar4 = param_1[4];\n    if (piVar4 < param_2) {\n        fcn.1000df44(\"invalid string position\");\n        pcVar2 = swi(3);\n        ppiVar3 = (*pcVar2)();\n        return ppiVar3;\n    }\n    if (param_3 < piVar4 - param_2) {\n        if (param_3 != 0) {\n            ppiVar3 = param_1;\n            if (0x7 < param_1[5]) {\n                ppiVar3 = *param_1;\n            }\n            piVar4 = piVar4 - param_3;\n            iVar1 = ppiVar3 + param_2 * 2;\n            if (piVar4 - param_2 != 0) {\n                fcn.1000f9e0(iVar1, iVar1 + param_3 * 2, (piVar4 - param_2) * 2);\n            }\n            param_1[4] = piVar4;\n            if (0x7 < param_1[5]) {\n                *(*param_1 + piVar4 * 2) = 0;\n                return param_1;\n            }\n            *(param_1 + piVar4 * 2) = 0;\n        }\n        return param_1;\n    }\n    param_1[4] = param_2;\n    if (param_1[5] < 0x8) {\n        *(param_1 + param_2 * 2) = 0;\n        return param_1;\n    }\n    *(*param_1 + param_2 * 2) = 0;\n    return param_1;\n}\n",
        "token_count": 440
    },
    "10004e40": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t ** __thiscall fcn.10004e40(int32_t **param_1, uint *param_2, uint32_t param_3, uint32_t param_4)\n\n{\n    int32_t *piVar1;\n    int32_t *piVar2;\n    code *pcVar3;\n    uint32_t uVar4;\n    int32_t **ppiVar5;\n    uint32_t unaff_retaddr;\n    \n    if (param_2[4] < param_3) {\n        fcn.1000df44(\"invalid string position\");\n    }\n    else {\n        piVar2 = param_1[4];\n        uVar4 = param_2[4] - param_3;\n        if (uVar4 < param_4) {\n            param_4 = uVar4;\n        }\n        if (param_4 < ~piVar2) {\n            piVar1 = piVar2 + param_4;\n            if (param_4 == 0) {\n                return param_1;\n            }\n            if (piVar1 < 0x7fffffff) {\n                if (param_1[5] < piVar1) {\n                    param_3 = unaff_retaddr;\n                    fcn.10004be0(piVar1, piVar2);\n                    if (piVar1 == NULL) {\n                        return param_1;\n                    }\n                }\n                else if (piVar1 == NULL) {\n                    param_1[4] = NULL;\n                    if (0x7 < param_1[5]) {\n                        **param_1 = 0;\n                        return param_1;\n                    }\n                    *param_1 = 0;\n                    return param_1;\n                }\n                if (7 < param_2[5]) {\n                    param_2 = *param_2;\n                }\n                ppiVar5 = param_1;\n                if (0x7 < param_1[5]) {\n                    ppiVar5 = *param_1;\n                }\n                if (param_4 != 0) {\n                    fcn.10011230(ppiVar5 + param_1[4] * 2, param_2 + param_3 * 2, param_4 * 2);\n                }\n                param_1[4] = piVar1;\n                if (param_1[5] < 0x8) {\n                    *(param_1 + piVar1 * 2) = 0;\n                    return param_1;\n                }\n                *(*param_1 + piVar1 * 2) = 0;\n                return param_1;\n            }\n            goto code_r0x10004f41;\n        }\n    }\n    fcn.1000df24(\"string too long\");\ncode_r0x10004f41:\n    fcn.1000df24(\"string too long\");\n    pcVar3 = swi(3);\n    ppiVar5 = (*pcVar3)();\n    return ppiVar5;\n}\n",
        "token_count": 638
    },
    "10005190": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t fcn.10005190(uint32_t param_1)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    \n    if (param_1 == 0) {\n        return 0;\n    }\n    if (param_1 < 0x80000000) {\n        param_1 = param_1 * 2;\n        if (param_1 < 0x1000) {\n            uVar3 = fcn.1000e9c8(param_1);\n            return uVar3;\n        }\n        if (param_1 < param_1 + 0x23) {\n            iVar2 = fcn.1000e9c8(param_1 + 0x23);\n            uVar3 = iVar2 + 0x23U & 0xffffffe0;\n            *(uVar3 - 4) = iVar2;\n            return uVar3;\n        }\n    }\n    else {\n        fcn.1000f48a();\n    }\n    fcn.1000f48a();\n    pcVar1 = swi(3);\n    uVar3 = (*pcVar1)();\n    return uVar3;\n}\n",
        "token_count": 260
    },
    "100051f0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t fcn.100051f0(uint32_t param_1)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    \n    if (param_1 == 0) {\n        return 0;\n    }\n    if (0xfff < param_1) {\n        if (param_1 < param_1 + 0x23) {\n            iVar2 = fcn.1000e9c8(param_1 + 0x23);\n            uVar3 = iVar2 + 0x23U & 0xffffffe0;\n            *(uVar3 - 4) = iVar2;\n            return uVar3;\n        }\n        fcn.1000f48a();\n        pcVar1 = swi(3);\n        uVar3 = (*pcVar1)();\n        return uVar3;\n    }\n    uVar3 = fcn.1000e9c8(param_1);\n    return uVar3;\n}\n",
        "token_count": 214
    },
    "10005240": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.10005240(uint *param_1, uint *param_2)\n\n{\n    if (param_2[5] < 8) {\n        if (param_2[4] + 1 != 0) {\n            fcn.1000f9e0(param_1, param_2, (param_2[4] + 1) * 2);\n        }\n    }\n    else {\n        if (param_1 != NULL) {\n            *param_1 = *param_2;\n        }\n        *param_2 = 0;\n    }\n    param_1[4] = param_2[4];\n    param_1[5] = param_2[5];\n    param_2[5] = 7;\n    param_2[4] = 0;\n    if (7 < param_2[5]) {\n        **param_2 = 0;\n        return;\n    }\n    *param_2 = 0;\n    return;\n}\n",
        "token_count": 218
    },
    "10005480": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.10005480(int32_t arg_8h)\n\n{\n    uint32_t uVar1;\n    uint *in_ECX;\n    int32_t *in_FS_OFFSET;\n    uint var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    uStack12 = 0x1003d589;\n    var_ch = *in_FS_OFFSET;\n    uVar1 = *0x1004f06c ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    in_ECX[4] = 0;\n    in_ECX[5] = 0;\n    in_ECX[5] = 0xf;\n    in_ECX[4] = 0;\n    if (0xf < in_ECX[5]) {\n        in_ECX = *in_ECX;\n    }\n    *in_ECX = 0;\n    var_4h = 0;\n    fcn.100060b0(*(arg_8h + 0x10) + 0x10, uVar1);\n    fcn.10003f90(\"[json.exception.\", 0x10);\n    fcn.100040c0(arg_8h, 0, 0xffffffff);\n    *in_FS_OFFSET = var_ch;\n    return;\n}\n",
        "token_count": 297
    },
    "10005530": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\nuint __fastcall fcn.10005530(uint param_1)\n\n{\n    uint uVar1;\n    \n    uVar1 = fcn.10006210();\n    fcn.10003670(uVar1);\n    return param_1;\n}\n",
        "token_count": 53
    },
    "100055b0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nuint __thiscall fcn.100055b0(uint param_1, uint param_2)\n\n{\n    uint uVar1;\n    \n    uVar1 = fcn.100040c0(param_2, 0, 0xffffffff);\n    fcn.10003670(uVar1);\n    return param_1;\n}\n",
        "token_count": 71
    },
    "100055e0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __fastcall fcn.100055e0(uint param_1, int32_t param_2, int32_t param_3)\n\n{\n    uint32_t uVar1;\n    uint uVar2;\n    \n    uVar1 = *(param_2 + 0x14) - *(param_2 + 0x10);\n    if ((uVar1 <= *(param_3 + 0x10) && *(param_3 + 0x10) != uVar1) &&\n       (*(param_2 + 0x10) <= *(param_3 + 0x14) - *(param_3 + 0x10))) {\n        uVar2 = fcn.10006350(param_3, param_2, 0, 0xffffffff);\n        fcn.10003670(uVar2);\n        return param_1;\n    }\n    uVar2 = fcn.100040c0(param_3, 0, 0xffffffff);\n    fcn.10003670(uVar2);\n    return param_1;\n}\n",
        "token_count": 226
    },
    "10005910": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.10005910(uint param_1, int32_t *param_2)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    \n    iVar2 = *param_2;\n    if (iVar2 != 0) {\n        iVar1 = param_2[1];\n        for (; iVar2 != iVar1; iVar2 = iVar2 + 0x10) {\n            fcn.100034a0();\n        }\n        fcn.10005130(*param_2, param_2[2] - *param_2 >> 4);\n        *param_2 = 0;\n        param_2[1] = 0;\n        param_2[2] = 0;\n    }\n    return;\n}\n",
        "token_count": 164
    },
    "10005960": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint * fcn.10005960(void)\n\n{\n    uint32_t uVar1;\n    uint *puVar2;\n    uint uVar3;\n    int32_t *in_FS_OFFSET;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x1003d639;\n    var_ch = *in_FS_OFFSET;\n    uVar1 = *0x1004f06c ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    puVar2 = fcn.1000e9c8(8);\n    var_4h = 1;\n    if (puVar2 != NULL) {\n        *puVar2 = 0;\n        puVar2[1] = 0;\n        uVar3 = fcn.10009260(uVar1);\n        *puVar2 = uVar3;\n    }\n    *in_FS_OFFSET = var_ch;\n    return puVar2;\n}\n",
        "token_count": 252
    },
    "100059e0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuchar * fcn.100059e0(void)\n\n{\n    uint32_t uVar1;\n    uchar *puVar2;\n    int32_t *in_FS_OFFSET;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x1003d639;\n    var_ch = *in_FS_OFFSET;\n    uVar1 = *0x1004f06c ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    puVar2 = fcn.1000e9c8(0x18);\n    var_4h = 1;\n    if (puVar2 != NULL) {\n        *(puVar2 + 0x14) = 0xf;\n        *(puVar2 + 0x10) = 0;\n        *puVar2 = 0;\n        fcn.10003d80(0x1004a240, 0, uVar1);\n    }\n    *in_FS_OFFSET = var_ch;\n    return puVar2;\n}\n",
        "token_count": 267
    },
    "10006130": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.10006130(uint32_t *param_1)\n\n{\n    uint32_t uVar1;\n    code *pcVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    \n    uVar1 = *param_1;\n    if (uVar1 == 0) {\n        return;\n    }\n    uVar3 = param_1[2] - uVar1 >> 3;\n    if (uVar3 < 0x20000000) {\n        uVar4 = uVar1;\n        if (uVar3 << 3 < 0x1000) {\ncode_r0x1000616c:\n            fcn.1000ed48(uVar4);\n            *param_1 = 0;\n            param_1[1] = 0;\n            param_1[2] = 0;\n            return;\n        }\n        if ((uVar1 & 0x1f) != 0) goto code_r0x10006190;\n        uVar4 = *(uVar1 - 4);\n        if (uVar1 <= uVar4) goto code_r0x10006195;\n        if (3 < uVar1 - uVar4) {\n            if (uVar1 - uVar4 < 0x24) goto code_r0x1000616c;\n            goto code_r0x1000619f;\n        }\n    }\n    else {\n        fcn.10013da4();\ncode_r0x10006190:\n        fcn.10013da4();\ncode_r0x10006195:\n        fcn.10013da4();\n    }\n    fcn.10013da4();\ncode_r0x1000619f:\n    fcn.10013da4();\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 403
    },
    "100061b0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.100061b0(int32_t *param_1, uint32_t param_2)\n\n{\n    uint32_t uVar1;\n    uint unaff_retaddr;\n    \n    uVar1 = param_1[1] - *param_1 >> 3;\n    if (param_2 < uVar1) {\n        param_1[1] = param_1[1] + (param_2 - uVar1) * 8;\n        return;\n    }\n    if (uVar1 < param_2) {\n        fcn.10006510(param_2 - uVar1);\n        fcn.10008e80(param_1[1], unaff_retaddr);\n        param_1[1] = param_1[1] + (param_2 - (param_1[1] - *param_1 >> 3)) * 8;\n    }\n    return;\n}\n",
        "token_count": 201
    },
    "10006210": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t ** __thiscall fcn.10006210(int32_t **param_1, uint param_2, uint param_3, uint32_t param_4)\n\n{\n    int32_t *piVar1;\n    int32_t *piVar2;\n    int32_t *piVar3;\n    code *pcVar4;\n    int32_t **ppiVar5;\n    int32_t **ppiVar6;\n    \n    piVar2 = param_1[5];\n    ppiVar5 = param_1;\n    if (0xf < piVar2) {\n        ppiVar5 = *param_1;\n    }\n    if (ppiVar5 < 0x1004b529) {\n        ppiVar5 = param_1;\n        if (0xf < piVar2) {\n            ppiVar5 = *param_1;\n        }\n        if (\"cannot use operator[] with a string argument with \" < param_1[4] + ppiVar5) {\n            ppiVar5 = param_1;\n            if (0xf < piVar2) {\n                ppiVar5 = *param_1;\n            }\n            ppiVar5 = fcn.10006350(ppiVar5, param_1, \"cannot use operator[] with a string argument with \" - ppiVar5, \n                                   param_4);\n            return ppiVar5;\n        }\n    }\n    piVar3 = param_1[4];\n    if (~piVar3 <= param_4) {\n        fcn.1000df24(\"string too long\");\ncode_r0x10006340:\n        fcn.1000df24(\"string too long\");\n        pcVar4 = swi(3);\n        ppiVar5 = (*pcVar4)();\n        return ppiVar5;\n    }\n    piVar1 = piVar3 + param_4;\n    if (param_4 != 0) {\n        if (piVar1 == 0xffffffff) goto code_r0x10006340;\n        if (piVar2 < piVar1) {\n            fcn.10004f50(piVar1, piVar3);\n            if (piVar1 == NULL) {\n                return param_1;\n            }\n        }\n        else if (piVar1 == NULL) {\n            param_1[4] = NULL;\n            if (piVar2 < 0x10) {\n                *param_1 = 0;\n                return param_1;\n            }\n            **param_1 = 0;\n            return param_1;\n        }\n        ppiVar6 = param_1;\n        ppiVar5 = param_1;\n        if (0xf < param_1[5]) {\n            ppiVar6 = *param_1;\n            ppiVar5 = *param_1;\n        }\n        if (param_1[4] != NULL) {\n            fcn.1000f9e0(ppiVar6 + param_4, ppiVar5, param_1[4]);\n        }\n        ppiVar5 = param_1;\n        if (0xf < param_1[5]) {\n            ppiVar5 = *param_1;\n        }\n        if (param_4 != 0) {\n            fcn.10011230(ppiVar5, \"cannot use operator[] with a string argument with \", param_4);\n        }\n        param_1[4] = piVar1;\n        if (0xf < param_1[5]) {\n            *(*param_1 + piVar1) = 0;\n            return param_1;\n        }\n        *(param_1 + piVar1) = 0;\n    }\n    return param_1;\n}\n",
        "token_count": 796
    },
    "10006350": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t ** __thiscall\nfcn.10006350(int32_t **param_1, int32_t param_2, int32_t **param_3, int32_t *param_4, uint32_t param_5)\n\n{\n    int32_t *piVar1;\n    int32_t *piVar2;\n    code *pcVar3;\n    uint32_t uVar4;\n    int32_t **ppiVar5;\n    int32_t **ppiVar6;\n    int32_t iVar7;\n    \n    if (param_3[4] < param_4) {\n        fcn.1000df44(\"invalid string position\");\n    }\n    else {\n        uVar4 = param_3[4] - param_4;\n        piVar2 = param_1[4];\n        if (uVar4 < param_5) {\n            param_5 = uVar4;\n        }\n        if (param_5 < ~piVar2) {\n            piVar1 = piVar2 + param_5;\n            if (param_5 == 0) {\n                return param_1;\n            }\n            if (piVar1 != 0xffffffff) {\n                if (param_1[5] < piVar1) {\n                    fcn.10004f50(piVar1, piVar2);\n                    if (piVar1 == NULL) {\n                        return param_1;\n                    }\n                }\n                else if (piVar1 == NULL) {\n                    param_1[4] = NULL;\n                    if (param_1[5] < 0x10) {\n                        *param_1 = 0;\n                        return param_1;\n                    }\n                    **param_1 = 0;\n                    return param_1;\n                }\n                ppiVar5 = param_1;\n                ppiVar6 = param_1;\n                if (0xf < param_1[5]) {\n                    ppiVar5 = *param_1;\n                    ppiVar6 = *param_1;\n                }\n                if (param_1[4] != NULL) {\n                    fcn.1000f9e0(ppiVar5 + param_5, ppiVar6, param_1[4]);\n                }\n                if (param_1 == param_3) {\n                    iVar7 = param_2 + param_5;\n                    if (param_2 == 0) {\n                        iVar7 = param_2;\n                    }\n                    ppiVar5 = param_1;\n                    ppiVar6 = param_1;\n                    if (0xf < param_1[5]) {\n                        ppiVar5 = *param_1;\n                        ppiVar6 = *param_1;\n                    }\n                    if (param_5 != 0) {\n                        fcn.1000f9e0(ppiVar5, iVar7 + ppiVar6, param_5);\n                    }\n                }\n                else {\n                    if (0xf < param_3[5]) {\n                        param_3 = *param_3;\n                    }\n                    ppiVar6 = param_1;\n                    if (0xf < param_1[5]) {\n                        ppiVar6 = *param_1;\n                    }\n                    if (param_5 != 0) {\n                        fcn.10011230(ppiVar6, param_2 + param_3, param_5);\n                    }\n                }\n                param_1[4] = piVar1;\n                if (param_1[5] < 0x10) {\n                    *(param_1 + piVar1) = 0;\n                    return param_1;\n                }\n                *(*param_1 + piVar1) = 0;\n                return param_1;\n            }\n            goto code_r0x1000649f;\n        }\n    }\n    fcn.1000df24(\"string too long\");\ncode_r0x1000649f:\n    fcn.1000df24(\"string too long\");\n    pcVar3 = swi(3);\n    ppiVar6 = (*pcVar3)();\n    return ppiVar6;\n}\n",
        "token_count": 871
    },
    "10006570": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.10006570(uint32_t *param_1, uint32_t param_2)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    code *pcVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    \n    if (param_2 == 0) {\n        uVar7 = 0;\ncode_r0x100065c5:\n        fcn.1000f9e0(uVar7, *param_1, param_1[1] - *param_1);\n        uVar1 = *param_1;\n        uVar2 = param_1[1];\n        if (uVar1 == 0) goto code_r0x10006622;\n        uVar5 = param_1[2] - uVar1 >> 3;\n        if (0x1fffffff < uVar5) goto code_r0x10006641;\n        uVar6 = uVar1;\n        if (uVar5 << 3 < 0x1000) {\ncode_r0x10006619:\n            fcn.1000ed48(uVar6);\ncode_r0x10006622:\n            param_1[2] = uVar7 + param_2 * 8;\n            param_1[1] = uVar7 + (uVar2 - uVar1 >> 3) * 8;\n            *param_1 = uVar7;\n            return;\n        }\n        if ((uVar1 & 0x1f) != 0) goto code_r0x10006646;\n        uVar6 = *(uVar1 - 4);\n        if (uVar1 <= uVar6) goto code_r0x1000664b;\n        if (3 < uVar1 - uVar6) {\n            if (0x23 < uVar1 - uVar6) goto code_r0x10006655;\n            goto code_r0x10006619;\n        }\n    }\n    else {\n        if (param_2 < 0x20000000) {\n            uVar7 = param_2 * 8;\n            if (uVar7 < 0x1000) {\n                uVar7 = fcn.1000e9c8(uVar7);\n            }\n            else {\n                if (uVar7 + 0x23 <= uVar7) goto code_r0x1000663c;\n                iVar4 = fcn.1000e9c8(uVar7 + 0x23);\n                uVar7 = iVar4 + 0x23U & 0xffffffe0;\n                *(uVar7 - 4) = iVar4;\n            }\n            goto code_r0x100065c5;\n        }\n        fcn.1000f48a();\ncode_r0x1000663c:\n        fcn.1000f48a();\ncode_r0x10006641:\n        fcn.10013da4();\ncode_r0x10006646:\n        fcn.10013da4();\ncode_r0x1000664b:\n        fcn.10013da4();\n    }\n    fcn.10013da4();\ncode_r0x10006655:\n    fcn.10013da4();\n    pcVar3 = swi(3);\n    (*pcVar3)();\n    return;\n}\n",
        "token_count": 741
    },
    "10006660": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.10006660(uint32_t *param_1)\n\n{\n    uint32_t uVar1;\n    code *pcVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    \n    uVar1 = *param_1;\n    if (uVar1 == 0) {\n        return;\n    }\n    uVar3 = param_1[2] - uVar1 >> 2;\n    if (uVar3 < 0x40000000) {\n        uVar4 = uVar1;\n        if (uVar3 << 2 < 0x1000) {\ncode_r0x1000669c:\n            fcn.1000ed48(uVar4);\n            *param_1 = 0;\n            param_1[1] = 0;\n            param_1[2] = 0;\n            return;\n        }\n        if ((uVar1 & 0x1f) != 0) goto code_r0x100066c0;\n        uVar4 = *(uVar1 - 4);\n        if (uVar1 <= uVar4) goto code_r0x100066c5;\n        if (3 < uVar1 - uVar4) {\n            if (uVar1 - uVar4 < 0x24) goto code_r0x1000669c;\n            goto code_r0x100066cf;\n        }\n    }\n    else {\n        fcn.10013da4();\ncode_r0x100066c0:\n        fcn.10013da4();\ncode_r0x100066c5:\n        fcn.10013da4();\n    }\n    fcn.10013da4();\ncode_r0x100066cf:\n    fcn.10013da4();\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 405
    },
    "100067a0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.100067a0(int32_t *param_1, uint32_t param_2)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint extraout_ECX;\n    uint unaff_retaddr;\n    \n    *param_1 = 0;\n    param_1[1] = 0;\n    param_1[2] = 0;\n    if (param_2 != 0) {\n        if (0x3fffffff < param_2) {\n            fcn.1000df24(\"vector<T> too long\");\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        iVar2 = fcn.10006ae0(param_2);\n        *param_1 = iVar2;\n        param_1[1] = iVar2;\n        param_1[2] = *param_1 + param_2 * 4;\n        iVar2 = *param_1;\n        fcn.10008ea0(param_2, extraout_ECX, unaff_retaddr);\n        param_1[1] = param_2 * 4 + iVar2;\n    }\n    return;\n}\n",
        "token_count": 258
    },
    "10006ae0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t fcn.10006ae0(uint32_t param_1)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    \n    if (param_1 == 0) {\n        return 0;\n    }\n    if (param_1 < 0x40000000) {\n        param_1 = param_1 * 4;\n        if (param_1 < 0x1000) {\n            uVar3 = fcn.1000e9c8(param_1);\n            return uVar3;\n        }\n        if (param_1 < param_1 + 0x23) {\n            iVar2 = fcn.1000e9c8(param_1 + 0x23);\n            uVar3 = iVar2 + 0x23U & 0xffffffe0;\n            *(uVar3 - 4) = iVar2;\n            return uVar3;\n        }\n    }\n    else {\n        fcn.1000f48a();\n    }\n    fcn.1000f48a();\n    pcVar1 = swi(3);\n    uVar3 = (*pcVar1)();\n    return uVar3;\n}\n",
        "token_count": 261
    },
    "10006b40": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.10006b40(uint32_t *param_1, uint32_t param_2, uint32_t param_3)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint unaff_retaddr;\n    \n    uVar1 = param_1[1];\n    uVar2 = *param_1;\n    uVar3 = uVar1 - uVar2 >> 2;\n    if (param_2 < uVar3) {\n        param_1[1] = uVar1 + (param_2 - uVar3) * 4;\n        return;\n    }\n    if (uVar3 < param_2) {\n        if ((param_3 < uVar1) && (uVar2 <= param_3)) {\n            fcn.10006bd0(param_2 - uVar3);\n            param_3 = *param_1 + (param_3 - uVar2 >> 2) * 4;\n        }\n        else {\n            fcn.10006bd0(param_2 - uVar3);\n        }\n        fcn.10008ea0(param_3, param_1[1], unaff_retaddr);\n        param_1[1] = param_1[1] + (param_2 - (param_1[1] - *param_1 >> 2)) * 4;\n    }\n    return;\n}\n",
        "token_count": 314
    },
    "10006c30": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.10006c30(uint32_t *param_1, uint32_t param_2)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    code *pcVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    \n    if (param_2 == 0) {\n        uVar7 = 0;\ncode_r0x10006c85:\n        fcn.1000f9e0(uVar7, *param_1, param_1[1] - *param_1);\n        uVar1 = *param_1;\n        uVar2 = param_1[1];\n        if (uVar1 == 0) goto code_r0x10006ce2;\n        uVar5 = param_1[2] - uVar1 >> 2;\n        if (0x3fffffff < uVar5) goto code_r0x10006d01;\n        uVar6 = uVar1;\n        if (uVar5 << 2 < 0x1000) {\ncode_r0x10006cd9:\n            fcn.1000ed48(uVar6);\ncode_r0x10006ce2:\n            param_1[2] = uVar7 + param_2 * 4;\n            param_1[1] = uVar7 + (uVar2 - uVar1 >> 2) * 4;\n            *param_1 = uVar7;\n            return;\n        }\n        if ((uVar1 & 0x1f) != 0) goto code_r0x10006d06;\n        uVar6 = *(uVar1 - 4);\n        if (uVar1 <= uVar6) goto code_r0x10006d0b;\n        if (3 < uVar1 - uVar6) {\n            if (0x23 < uVar1 - uVar6) goto code_r0x10006d15;\n            goto code_r0x10006cd9;\n        }\n    }\n    else {\n        if (param_2 < 0x40000000) {\n            uVar7 = param_2 * 4;\n            if (uVar7 < 0x1000) {\n                uVar7 = fcn.1000e9c8(uVar7);\n            }\n            else {\n                if (uVar7 + 0x23 <= uVar7) goto code_r0x10006cfc;\n                iVar4 = fcn.1000e9c8(uVar7 + 0x23);\n                uVar7 = iVar4 + 0x23U & 0xffffffe0;\n                *(uVar7 - 4) = iVar4;\n            }\n            goto code_r0x10006c85;\n        }\n        fcn.1000f48a();\ncode_r0x10006cfc:\n        fcn.1000f48a();\ncode_r0x10006d01:\n        fcn.10013da4();\ncode_r0x10006d06:\n        fcn.10013da4();\ncode_r0x10006d0b:\n        fcn.10013da4();\n    }\n    fcn.10013da4();\ncode_r0x10006d15:\n    fcn.10013da4();\n    pcVar3 = swi(3);\n    (*pcVar3)();\n    return;\n}\n",
        "token_count": 754
    },
    "10007220": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.10007220(int32_t *param_1)\n\n{\n    code **ppcVar1;\n    int32_t iVar2;\n    int32_t *in_FS_OFFSET;\n    uint var_10h;\n    uint var_ch;\n    uint var_14h;\n    int32_t var_ch_2;\n    uint uStack12;\n    uint var_4h;\n    \n    uStack12 = 0x1003d750;\n    var_ch_2 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &var_ch_2;\n    var_4h = 0;\n    ppcVar1 = fcn.1000e9c8(0x18);\n    ppcVar1[4] = NULL;\n    ppcVar1[1] = 0xd;\n    ppcVar1[2] = NULL;\n    ppcVar1[3] = NULL;\n    *ppcVar1 = vtable.std::_Node_capture.0;\n    ppcVar1[5] = NULL;\n    ppcVar1[4] = param_1[10];\n    if (*(param_1[10] + 0xc) != NULL) {\n        ppcVar1[3] = *(param_1[10] + 0xc);\n        *(*(param_1[10] + 0xc) + 0x10) = ppcVar1;\n    }\n    *(param_1[10] + 0xc) = ppcVar1;\n    param_1[10] = ppcVar1;\n    fcn.100087b0();\n    if (*param_1 != param_1[2]) {\n        fcn.1000df64(0xe);\n    }\n    fcn.10008950(ppcVar1);\n    iVar2 = fcn.100089e0();\n    *(iVar2 + 0x14) = param_1[0x10];\n    *(iVar2 + 0x1c) = param_1[3] + 1;\n    fcn.10002ff0(0);\n    *in_FS_OFFSET = var_ch_2;\n    return iVar2;\n}\n",
        "token_count": 469
    },
    "10007340": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.10007340(code **param_1)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    \n    *param_1 = vtable.std::_Node_class_wchar_t__class_std::regex_traits_wchar_t__.0;\n    pcVar2 = param_1[5];\n    while (pcVar2 != NULL) {\n        pcVar1 = *(pcVar2 + 0x10);\n        fcn.10013bcd(*(pcVar2 + 0xc));\n        fcn.1000ed4d(pcVar2);\n        pcVar2 = pcVar1;\n    }\n    fcn.1000ed4d(param_1[6]);\n    pcVar2 = param_1[7];\n    if (pcVar2 != NULL) {\n        fcn.10013bcd(*(pcVar2 + 8));\n        fcn.1000ed4d(pcVar2);\n    }\n    pcVar2 = param_1[8];\n    if (pcVar2 != NULL) {\n        fcn.10013bcd(*(pcVar2 + 8));\n        fcn.1000ed4d(pcVar2);\n    }\n    pcVar2 = param_1[10];\n    while (pcVar2 != NULL) {\n        pcVar1 = *(pcVar2 + 0x10);\n        fcn.10013bcd(*(pcVar2 + 0xc));\n        fcn.1000ed4d(pcVar2);\n        pcVar2 = pcVar1;\n    }\n    *param_1 = vtable.std::_Node_base.0;\n    return;\n}\n",
        "token_count": 347
    },
    "100073e0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.100073e0(int32_t *param_1, uint32_t param_2)\n\n{\n    uint32_t uVar1;\n    uint unaff_retaddr;\n    \n    uVar1 = param_1[1] - *param_1 >> 3;\n    if (param_2 < uVar1) {\n        param_1[1] = param_1[1] + (param_2 - uVar1) * 8;\n        return;\n    }\n    if (uVar1 < param_2) {\n        fcn.10007640(param_2 - uVar1);\n        fcn.1000a360(param_1[1], unaff_retaddr);\n        param_1[1] = param_1[1] + (param_2 - (param_1[1] - *param_1 >> 3)) * 8;\n    }\n    return;\n}\n",
        "token_count": 201
    },
    "10007500": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t __thiscall fcn.10007500(int32_t param_1, uint param_2, uint param_3)\n\n{\n    uint32_t uVar1;\n    char cVar2;\n    \n    if (param_3 != 0xffff) {\n        if (**(param_1 + 4) == vtable.std::ctype_wchar_t_.0) {\n            uVar1 = fcn.1000df84(param_2);\n            return uVar1 & 0xffffff00 | (param_3 & uVar1) != 0;\n        }\n        uVar1 = (**(**(param_1 + 4) + 0x10))(param_3, param_2);\n        return uVar1;\n    }\n    if (param_2 != 0x5f) {\n        if (**(param_1 + 4) == vtable.std::ctype_wchar_t_.0) {\n            uVar1 = fcn.1000df84(param_2);\n            cVar2 = (uVar1 & 0x107) != 0;\n        }\n        else {\n            cVar2 = (**(**(param_1 + 4) + 0x10))(0x107, param_2);\n        }\n        if (cVar2 == '\\0') {\n            return 0;\n        }\n    }\n    return 1;\n}\n",
        "token_count": 296
    },
    "100076a0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nint32_t __thiscall fcn.100076a0(int32_t *param_1, uint32_t param_2)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint extraout_ECX;\n    int32_t iVar3;\n    uint unaff_retaddr;\n    \n    iVar3 = param_1[1] - *param_1;\n    iVar2 = iVar3 * 0x2aaaaaab;\n    uVar1 = iVar3 / 0xc;\n    if (param_2 < uVar1) {\n        iVar2 = param_1[1] + (param_2 - uVar1) * 0xc;\n        param_1[1] = iVar2;\n        return iVar2;\n    }\n    if (uVar1 < param_2) {\n        fcn.10007ae0(param_2 - uVar1);\n        fcn.1000a390(extraout_ECX, unaff_retaddr);\n        iVar2 = (param_2 - (param_1[1] - *param_1) / 0xc) * 0xc;\n        param_1[1] = param_1[1] + iVar2;\n    }\n    return iVar2;\n}\n",
        "token_count": 268
    },
    "10007740": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.10007740(uint32_t *param_1)\n\n{\n    uint32_t uVar1;\n    code *pcVar2;\n    uint32_t uVar3;\n    \n    uVar1 = *param_1;\n    if (uVar1 == 0) {\n        return;\n    }\n    uVar3 = uVar1;\n    if (param_1[2] - uVar1 < 0x1000) {\ncode_r0x1000776f:\n        fcn.1000ed48(uVar3);\n        *param_1 = 0;\n        param_1[1] = 0;\n        param_1[2] = 0;\n        return;\n    }\n    if ((uVar1 & 0x1f) == 0) {\n        uVar3 = *(uVar1 - 4);\n        if (uVar1 <= uVar3) goto code_r0x10007793;\n        if (3 < uVar1 - uVar3) {\n            if (uVar1 - uVar3 < 0x24) goto code_r0x1000776f;\n            goto code_r0x1000779d;\n        }\n    }\n    else {\n        fcn.10013da4();\ncode_r0x10007793:\n        fcn.10013da4();\n    }\n    fcn.10013da4();\ncode_r0x1000779d:\n    fcn.10013da4();\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 340
    },
    "100079f0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.100079f0(uint32_t *param_1, uint32_t param_2)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    code *pcVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    uint32_t *extraout_ECX;\n    uint32_t *extraout_ECX_00;\n    uint32_t *puVar6;\n    uint32_t uVar7;\n    uint32_t uVar8;\n    \n    if (param_2 == 0) {\n        uVar8 = 0;\n        puVar6 = param_1;\ncode_r0x10007a46:\n        fcn.1000c4b0(uVar8, puVar6, param_2, puVar6);\n        uVar1 = *param_1;\n        uVar2 = param_1[1];\n        if (uVar1 == 0) goto code_r0x10007aa4;\n        uVar5 = param_1[2] - uVar1 >> 3;\n        if (0x1fffffff < uVar5) goto code_r0x10007ac3;\n        uVar7 = uVar1;\n        if (uVar5 << 3 < 0x1000) {\ncode_r0x10007a9b:\n            fcn.1000ed48(uVar7);\ncode_r0x10007aa4:\n            param_1[2] = uVar8 + param_2 * 8;\n            param_1[1] = uVar8 + (uVar2 - uVar1 >> 3) * 8;\n            *param_1 = uVar8;\n            return;\n        }\n        if ((uVar1 & 0x1f) != 0) goto code_r0x10007ac8;\n        uVar7 = *(uVar1 - 4);\n        if (uVar1 <= uVar7) goto code_r0x10007acd;\n        if (3 < uVar1 - uVar7) {\n            if (0x23 < uVar1 - uVar7) goto code_r0x10007ad7;\n            goto code_r0x10007a9b;\n        }\n    }\n    else {\n        if (param_2 < 0x20000000) {\n            uVar8 = param_2 * 8;\n            if (uVar8 < 0x1000) {\n                uVar8 = fcn.1000e9c8(uVar8);\n                puVar6 = extraout_ECX_00;\n            }\n            else {\n                if (uVar8 + 0x23 <= uVar8) goto code_r0x10007abe;\n                iVar4 = fcn.1000e9c8(uVar8 + 0x23);\n                uVar8 = iVar4 + 0x23U & 0xffffffe0;\n                *(uVar8 - 4) = iVar4;\n                puVar6 = extraout_ECX;\n            }\n            goto code_r0x10007a46;\n        }\n        fcn.1000f48a();\ncode_r0x10007abe:\n        fcn.1000f48a();\ncode_r0x10007ac3:\n        fcn.10013da4();\ncode_r0x10007ac8:\n        fcn.10013da4();\ncode_r0x10007acd:\n        fcn.10013da4();\n    }\n    fcn.10013da4();\ncode_r0x10007ad7:\n    fcn.10013da4();\n    pcVar3 = swi(3);\n    (*pcVar3)();\n    return;\n}\n",
        "token_count": 807
    },
    "10007c60": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t fcn.10007c60(uint32_t param_1)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    \n    if (param_1 == 0) {\n        return 0;\n    }\n    if (param_1 < 0x20000000) {\n        param_1 = param_1 * 8;\n        if (param_1 < 0x1000) {\n            uVar3 = fcn.1000e9c8(param_1);\n            return uVar3;\n        }\n        if (param_1 < param_1 + 0x23) {\n            iVar2 = fcn.1000e9c8(param_1 + 0x23);\n            uVar3 = iVar2 + 0x23U & 0xffffffe0;\n            *(uVar3 - 4) = iVar2;\n            return uVar3;\n        }\n    }\n    else {\n        fcn.1000f48a();\n    }\n    fcn.1000f48a();\n    pcVar1 = swi(3);\n    uVar3 = (*pcVar1)();\n    return uVar3;\n}\n",
        "token_count": 261
    },
    "10007cc0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.10007cc0(uint32_t *param_1, uint32_t param_2)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    code *pcVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    uint32_t *extraout_ECX;\n    uint32_t *extraout_ECX_00;\n    uint32_t *puVar6;\n    uint32_t uVar7;\n    \n    uVar4 = param_2;\n    if (param_2 == 0) {\n        uVar7 = 0;\n        puVar6 = param_1;\n    }\n    else {\n        if (0x15555555 < param_2) {\n            fcn.1000f48a();\ncode_r0x10007d8e:\n            fcn.1000f48a();\n            pcVar3 = swi(3);\n            (*pcVar3)();\n            return;\n        }\n        uVar7 = param_2 * 0xc;\n        if (uVar7 < 0x1000) {\n            uVar7 = fcn.1000e9c8(uVar7);\n            puVar6 = extraout_ECX_00;\n        }\n        else {\n            if (uVar7 + 0x23 <= uVar7) goto code_r0x10007d8e;\n            iVar5 = fcn.1000e9c8(uVar7 + 0x23);\n            uVar7 = iVar5 + 0x23U & 0xffffffe0;\n            *(uVar7 - 4) = iVar5;\n            puVar6 = extraout_ECX;\n        }\n    }\n    param_2 = param_2 & 0xffffff00;\n    fcn.1000c4e0(uVar7, puVar6, param_2, puVar6);\n    uVar1 = param_1[1];\n    uVar2 = *param_1;\n    if (*param_1 != 0) {\n        fcn.10004220(*param_1, (param_1[2] - *param_1) / 0xc);\n    }\n    param_1[2] = uVar7 + uVar4 * 0xc;\n    param_1[1] = uVar7 + ((uVar1 - uVar2) / 0xc) * 0xc;\n    *param_1 = uVar7;\n    return;\n}\n",
        "token_count": 540
    },
    "100087b0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.100087b0(int16_t **param_1)\n\n{\n    char cVar1;\n    uint uVar2;\n    int16_t *piVar3;\n    code **ppcVar4;\n    \n    piVar3 = param_1[10];\n    cVar1 = fcn.10009ab0();\n    if (cVar1 == '\\0') {\n        if (param_1[0x13] != 0x7c) {\n            return;\n        }\n        uVar2 = fcn.10009d70();\n        fcn.10008950(uVar2);\n    }\n    fcn.10009dd0(piVar3);\n    piVar3 = param_1[0x13];\n    while (piVar3 == 0x7c) {\n        piVar3 = *param_1;\n        if (piVar3 != param_1[2]) {\n            if (((*piVar3 == 0x5c) && (piVar3 = piVar3 + 1,  piVar3 != param_1[2])) &&\n               ((((param_1[0x14] & 8) == 0 && ((*piVar3 == 0x28 || (*piVar3 == 0x29)))) ||\n                (((param_1[0x14] & 0x10) == 0 && ((*piVar3 == 0x7b || (*piVar3 == 0x7d)))))))) {\n                *param_1 = piVar3;\n            }\n            *param_1 = *param_1 + 1;\n        }\n        fcn.10008600();\n        cVar1 = fcn.10009ab0();\n        if (cVar1 == '\\0') {\n            ppcVar4 = fcn.1000e9c8(0x14);\n            ppcVar4[4] = NULL;\n            *ppcVar4 = vtable.std::_Node_base.0;\n            ppcVar4[1] = 0x8;\n            ppcVar4[2] = NULL;\n            ppcVar4[3] = NULL;\n            ppcVar4[4] = param_1[10];\n            if (*(param_1[10] + 6) != NULL) {\n                ppcVar4[3] = *(param_1[10] + 6);\n                *(*(param_1[10] + 6) + 0x10) = ppcVar4;\n            }\n            *(param_1[10] + 6) = ppcVar4;\n            param_1[10] = ppcVar4;\n            fcn.10008950(ppcVar4);\n        }\n        fcn.10009e90();\n        piVar3 = param_1[0x13];\n    }\n    return;\n}\n",
        "token_count": 615
    },
    "100088d0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/0325759584d940e7b69154ed16836be2",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nuint * __thiscall fcn.100088d0(uint *param_1, uint param_2)\n\n{\n    code **ppcVar1;\n    \n    ppcVar1 = fcn.1000e9c8(0x24);\n    ppcVar1[1] = 0x14;\n    ppcVar1[2] = NULL;\n    ppcVar1[3] = NULL;\n    ppcVar1[4] = NULL;\n    *ppcVar1 = vtable.std::_Root_node.0;\n    ppcVar1[6] = NULL;\n    ppcVar1[7] = NULL;\n    ppcVar1[8] = NULL;\n    *param_1 = ppcVar1;\n    param_1[1] = ppcVar1;\n    param_1[3] = param_2;\n    param_1[2] = 1;\n    param_1[4] = 0x100;\n    param_1[5] = 4;\n    return param_1;\n}\n",
        "token_count": 228
    },
    "100089e0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __fastcall fcn.100089e0(uint *param_1)\n\n{\n    code **ppcVar1;\n    \n    ppcVar1 = fcn.1000e9c8(0x14);\n    ppcVar1[4] = NULL;\n    *ppcVar1 = vtable.std::_Node_base.0;\n    ppcVar1[1] = 0x15;\n    ppcVar1[2] = NULL;\n    ppcVar1[3] = NULL;\n    ppcVar1[4] = param_1[1];\n    if (*(param_1[1] + 0xc) != NULL) {\n        ppcVar1[3] = *(param_1[1] + 0xc);\n        *(*(param_1[1] + 0xc) + 0x10) = ppcVar1;\n    }\n    *(param_1[1] + 0xc) = ppcVar1;\n    param_1[1] = ppcVar1;\n    return *param_1;\n}\n",
        "token_count": 232
    },
    "10008a40": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint * __thiscall fcn.10008a40(uint *param_1, uint param_2, uint param_3, uint param_4, uint param_5, uint32_t param_6)\n\n{\n    uint *puVar1;\n    \n    *param_1 = param_3;\n    if ((param_6 & 0x100) != 0) {\n        puVar1 = fcn.10009fb0(param_2, param_3, param_4, param_5);\n        *param_1 = *puVar1;\n        return param_1;\n    }\n    if ((param_6 & 0x800) != 0) {\n        puVar1 = fcn.1000a070(param_2, param_3, param_4, param_5);\n        *param_1 = *puVar1;\n        return param_1;\n    }\n    puVar1 = fcn.1000a0e0(param_2, param_3, param_4, param_3);\n    *param_1 = *puVar1;\n    return param_1;\n}\n",
        "token_count": 241
    },
    "10008ac0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint16_t ** __fastcall fcn.10008ac0(int16_t **param_1, uint32_t *param_2, int16_t *param_3, int16_t *param_4)\n\n{\n    int16_t iVar1;\n    uint32_t uVar2;\n    int16_t *piVar3;\n    uint32_t uVar4;\n    int16_t *piVar5;\n    uint32_t uStack12;\n    uint32_t *puStack8;\n    \n    puStack8 = param_2;\n    if (param_2 != NULL) {\n        do {\n            uStack12 = 0;\n            if (puStack8[2] != 0) {\n                uVar2 = *puStack8;\n                do {\n                    uVar4 = 0;\n                    piVar3 = param_3;\n                    if (uVar2 != 0) {\n                        piVar5 = puStack8[3] + uStack12 * 2;\n                        do {\n                            iVar1 = *piVar3;\n                            piVar3 = piVar3 + 1;\n                            if (iVar1 != *piVar5) break;\n                            uVar4 = uVar4 + 1;\n                            piVar5 = piVar5 + 1;\n                        } while (uVar4 < uVar2);\n                    }\n                    if (piVar3 == param_4) {\n                        *param_1 = param_4;\n                        return param_1;\n                    }\n                    uStack12 = uStack12 + uVar2;\n                } while (uStack12 < puStack8[2]);\n            }\n            puStack8 = puStack8[4];\n        } while (puStack8 != NULL);\n    }\n    *param_1 = param_3;\n    return param_1;\n}\n",
        "token_count": 384
    },
    "10008b60": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl fcn.10008b60(uint arg_8h)\n\n{\n    uint *puVar1;\n    int32_t **ppiVar2;\n    int32_t iVar3;\n    uint16_t in_CX;\n    int32_t *arg_ch;\n    int32_t *piVar4;\n    int32_t *in_EDX;\n    uint32_t uVar5;\n    int32_t *in_FS_OFFSET;\n    uint *arg_ch_00;\n    uint var_60h;\n    uint var_5ch;\n    uint32_t var_48h;\n    uint32_t var_44h;\n    uint var_34h;\n    uint32_t var_30h;\n    int32_t *var_2ch;\n    int32_t *var_1ch;\n    int32_t *var_18h;\n    uint32_t var_14h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    uStack12 = 0x1003d7ec;\n    var_ch = *in_FS_OFFSET;\n    var_14h = *0x1004f06c ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    var_18h = 0x7;\n    var_1ch = NULL;\n    var_2ch = var_2ch & 0xffff0000;\n    var_30h = 7;\n    var_34h = 1;\n    var_44h = in_CX;\n    var_4h = 1;\n    arg_ch_00 = &var_44h;\n    puVar1 = fcn.1000a140(&var_5ch, arg_ch_00, &var_44h + 2);\n    if (&var_44h != puVar1) {\n        if (7 < var_30h) {\n            fcn.10004460(var_44h, var_30h + 1);\n        }\n        var_30h = 7;\n        var_34h = 0;\n        var_44h = var_44h & 0xffff0000;\n        fcn.10005240(puVar1);\n    }\n    var_4h._0_1_ = 1;\n    if (7 < var_48h) {\n        fcn.10004460(var_5ch, var_48h + 1);\n    }\n    if (in_EDX != NULL) {\n        do {\n            uVar5 = 0;\n            if (in_EDX[2] != 0) {\n                do {\n                    arg_ch_00 = *in_EDX;\n                    fcn.10003b60(in_EDX[3] + uVar5 * 2);\n                    piVar4 = &var_2ch;\n                    if (0x7 < var_18h) {\n                        piVar4 = var_2ch;\n                    }\n                    arg_ch = &var_2ch;\n                    if (0x7 < var_18h) {\n                        arg_ch = var_2ch;\n                    }\n                    ppiVar2 = fcn.1000a140(&var_5ch, arg_ch, piVar4 + var_1ch * 2);\n                    var_4h._0_1_ = 3;\n                    if (&var_2ch != ppiVar2) {\n                        if (0x7 < var_18h) {\n                            if ((0x7fffffff < var_18h + 1U) ||\n                               ((piVar4 = var_2ch,  0xfff < (var_18h + 1U) * 2 &&\n                                (((((var_2ch & 0x1f) != 0 || (piVar4 = var_2ch[-1],  var_2ch <= piVar4)) ||\n                                  (var_2ch - piVar4 < 4)) || (0x23 < var_2ch - piVar4)))))) {\n                                fcn.10013da4();\n                                goto code_r0x10008d82;\n                            }\n                            fcn.1000ed48(piVar4);\n                        }\n                        var_18h = 0x7;\n                        var_1ch = NULL;\n                        var_2ch = var_2ch & 0xffff0000;\n                        if (ppiVar2[5] < 0x8) {\n                            if (ppiVar2[4] + 1 != 0) {\n                                fcn.1000f9e0(&var_2ch, ppiVar2, (ppiVar2[4] + 1) * 2);\n                            }\n                        }\n                        else {\n                            var_2ch = *ppiVar2;\n                            *ppiVar2 = NULL;\n                        }\n                        var_1ch = ppiVar2[4];\n                        var_18h = ppiVar2[5];\n                        ppiVar2[5] = 0x7;\n                        ppiVar2[4] = NULL;\n                        if (0x7 < ppiVar2[5]) {\n                            ppiVar2 = *ppiVar2;\n                        }\n                        *ppiVar2 = 0;\n                    }\n                    var_4h._0_1_ = 1;\n                    if (7 < var_48h) {\n                        fcn.10004460();\n                    }\n                    iVar3 = fcn.1000a630();\n                    if (iVar3 == 0) goto code_r0x10008d82;\n                    uVar5 = uVar5 + *in_EDX;\n                } while (uVar5 < in_EDX[2]);\n            }\n            in_EDX = in_EDX[4];\n        } while (in_EDX != NULL);\n    }\ncode_r0x10008d82:\n    if (7 < var_30h) {\n        fcn.10004460(var_44h, var_30h + 1);\n    }\n    var_30h = 7;\n    var_34h = 0;\n    var_44h = var_44h & 0xffff0000;\n    if (0x7 < var_18h) {\n        fcn.10004460(var_2ch, var_18h + 1);\n    }\n    *in_FS_OFFSET = var_ch;\n    fcn.1000e9b7(arg_ch_00);\n    return;\n}\n",
        "token_count": 1385
    },
    "10008df0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.10008df0(int32_t *param_1, uint param_2, uint param_3)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t *piVar3;\n    int32_t iVar4;\n    int32_t *extraout_ECX;\n    int32_t *extraout_ECX_00;\n    uint unaff_ESI;\n    uint unaff_EDI;\n    int32_t *unaff_retaddr;\n    uint *arg_ch;\n    int32_t *piVar5;\n    \n    uVar1 = param_3;\n    iVar2 = fcn.1000a3c0(param_3, unaff_EDI, unaff_ESI);\n    piVar3 = extraout_ECX;\n    if (iVar2 != *param_1) {\n        piVar3 = iVar2 + 0x10;\n        if (0xf < *(iVar2 + 0x24)) {\n            piVar3 = *piVar3;\n        }\n        iVar4 = fcn.10003cf0(piVar3, *(iVar2 + 0x20));\n        piVar3 = extraout_ECX_00;\n        if (-1 < iVar4) {\n            *unaff_retaddr = iVar2;\n            *(unaff_retaddr + 1) = 0;\n            return;\n        }\n    }\n    arg_ch = &param_2;\n    param_2 = uVar1;\n    piVar5 = piVar3;\n    iVar4 = fcn.1000b3c0(piVar3, arg_ch);\n    fcn.1000b440(&stack0xfffffff8, iVar2, iVar4 + 0x10, iVar4, piVar3, arg_ch, piVar5);\n    *piVar3 = arg_ch;\n    *(piVar3 + 1) = 1;\n    return;\n}\n",
        "token_count": 410
    },
    "10008e80": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.10008e80(ulong *param_1, int32_t param_2)\n\n{\n    if (param_2 != 0) {\n        do {\n            if (param_1 != NULL) {\n                *param_1 = 0;\n            }\n            param_1 = param_1 + 1;\n            param_2 = param_2 + -1;\n        } while (param_2 != 0);\n    }\n    return;\n}\n",
        "token_count": 102
    },
    "10008ea0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.10008ea0(uint *param_1, int32_t param_2, uint *param_3)\n\n{\n    if (param_2 != 0) {\n        do {\n            if (param_1 != NULL) {\n                *param_1 = *param_3;\n            }\n            param_1 = param_1 + 1;\n            param_2 = param_2 + -1;\n        } while (param_2 != 0);\n    }\n    return;\n}\n",
        "token_count": 109
    },
    "10008f10": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t * __thiscall fcn.10008f10(int32_t *param_1, int32_t *param_2)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    char cVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    \n    if (param_1 != param_2) {\n        iVar5 = *param_2;\n        iVar1 = param_2[1];\n        if (iVar5 == iVar1) {\n            param_1[1] = *param_1;\n            return param_1;\n        }\n        iVar2 = *param_1;\n        uVar7 = iVar1 - iVar5 >> 3;\n        uVar6 = param_1[1] - iVar2 >> 3;\n        if (uVar7 <= uVar6) {\n            fcn.1000f9e0(iVar2, iVar5, iVar1 - iVar5);\n            param_1[1] = *param_1 + (param_2[1] - *param_2 >> 3) * 8;\n            return param_1;\n        }\n        uVar4 = param_1[2] - iVar2 >> 3;\n        if (uVar4 < uVar7) {\n            if (iVar2 != 0) {\n                fcn.100064b0(iVar2, uVar4);\n            }\n            cVar3 = fcn.10009020(param_2[1] - *param_2 >> 3);\n            if (cVar3 == '\\0') {\n                return param_1;\n            }\n        }\n        else {\n            fcn.1000f9e0(iVar2, iVar5, uVar6 * 8);\n        }\n        iVar5 = fcn.1000c4b0();\n        param_1[1] = iVar5;\n    }\n    return param_1;\n}\n",
        "token_count": 431
    },
    "10008fe0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t fcn.10008fe0(uint param_1, uint *param_2)\n\n{\n    uint *puVar1;\n    uint32_t uVar2;\n    \n    puVar1 = param_2 + 4;\n    if (0xf < param_2[5]) {\n        param_2 = *param_2;\n    }\n    uVar2 = fcn.10003cf0(param_2, *puVar1);\n    return uVar2 >> 0x1f;\n}\n",
        "token_count": 110
    },
    "10009080": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t * __thiscall fcn.10009080(int32_t *param_1, int32_t *param_2)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    char cVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    int32_t iVar6;\n    uint32_t uVar7;\n    \n    if (param_1 != param_2) {\n        iVar1 = *param_2;\n        iVar6 = param_2[1];\n        if (iVar1 == iVar6) {\n            param_1[1] = *param_1;\n            return param_1;\n        }\n        iVar2 = *param_1;\n        uVar5 = param_1[1] - iVar2 >> 2;\n        uVar7 = iVar6 - iVar1 >> 2;\n        if (uVar7 <= uVar5) {\n            fcn.1000f9e0(iVar2, iVar1, iVar6 - iVar1);\n            param_1[1] = *param_1 + (param_2[1] - *param_2 >> 2) * 4;\n            return param_1;\n        }\n        uVar4 = param_1[2] - iVar2 >> 2;\n        if (uVar7 <= uVar4) {\n            iVar6 = iVar1 + uVar5 * 4;\n            fcn.1000f9e0(iVar2, iVar1, iVar6 - iVar1);\n            iVar1 = param_2[1];\n            iVar2 = param_1[1];\n            fcn.1000f9e0(iVar2, iVar6, iVar1 - iVar6);\n            param_1[1] = (iVar1 - iVar6) + iVar2;\n            return param_1;\n        }\n        if (iVar2 != 0) {\n            fcn.10006740(iVar2, uVar4);\n        }\n        cVar3 = fcn.10006990(param_2[1] - *param_2 >> 2);\n        if (cVar3 != '\\0') {\n            iVar1 = *param_1;\n            iVar6 = param_2[1] - *param_2;\n            fcn.1000f9e0(iVar1, *param_2, iVar6);\n            param_1[1] = iVar6 + iVar1;\n        }\n    }\n    return param_1;\n}\n",
        "token_count": 535
    },
    "100091d0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t * __thiscall fcn.100091d0(int32_t *param_1, int32_t *param_2)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t *piVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    uint var_4h;\n    \n    *param_1 = 0;\n    param_1[1] = 0;\n    param_1[2] = 0;\n    uVar4 = param_2[1] - *param_2 >> 2;\n    *param_1 = 0;\n    param_1[1] = 0;\n    param_1[2] = 0;\n    if (uVar4 != 0) {\n        if (0x3fffffff < uVar4) {\n            fcn.1000df24(\"vector<T> too long\");\n            pcVar1 = swi(3);\n            piVar3 = (*pcVar1)();\n            return piVar3;\n        }\n        iVar2 = fcn.10006ae0(uVar4);\n        *param_1 = iVar2;\n        param_1[1] = iVar2;\n        param_1[2] = *param_1 + uVar4 * 4;\n        iVar5 = param_2[1] - *param_2;\n        iVar2 = *param_1;\n        fcn.1000f9e0(iVar2, *param_2, iVar5);\n        param_1[1] = iVar5 + iVar2;\n    }\n    return param_1;\n}\n",
        "token_count": 352
    },
    "10009260": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.10009260(void)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.1000e9c8(0x38);\n    if (iVar1 != 0) {\n        *iVar1 = iVar1;\n    }\n    if (iVar1 + 4 != NULL) {\n        *(iVar1 + 4) = iVar1;\n    }\n    if (iVar1 + 8 != NULL) {\n        *(iVar1 + 8) = iVar1;\n    }\n    *(iVar1 + 0xc) = 0x101;\n    return;\n}\n",
        "token_count": 128
    },
    "10009a20": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t __fastcall fcn.10009a20(int32_t *param_1)\n\n{\n    uint16_t *puVar1;\n    \n    puVar1 = *param_1 + 2;\n    if ((puVar1 != param_1[2]) &&\n       ((((param_1[0x14] & 8U) == 0 && ((*puVar1 == 0x28 || (*puVar1 == 0x29)))) ||\n        (((param_1[0x14] & 0x10U) == 0 && ((puVar1 = *puVar1,  puVar1 == 0x7b || (puVar1 == 0x7d)))))))) {\n        return CONCAT31(puVar1 >> 8, 1);\n    }\n    return puVar1 & 0xffffff00;\n}\n",
        "token_count": 183
    },
    "10009a60": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.10009a60(int16_t **param_1)\n\n{\n    int16_t iVar1;\n    uint16_t uVar2;\n    char cVar3;\n    int32_t iVar4;\n    int16_t *piVar5;\n    uint unaff_ESI;\n    bool bVar6;\n    \n    piVar5 = *param_1;\n    if (piVar5 != param_1[2]) {\n        if (((*piVar5 == 0x5c) && (piVar5 = piVar5 + 1,  piVar5 != param_1[2])) &&\n           ((((param_1[0x14] & 8) == 0 && ((*piVar5 == 0x28 || (*piVar5 == 0x29)))) ||\n            (((param_1[0x14] & 0x10) == 0 && ((*piVar5 == 0x7b || (*piVar5 == 0x7d)))))))) {\n            *param_1 = piVar5;\n        }\n        *param_1 = *param_1 + 1;\n    }\n    if (*param_1 == param_1[2]) {\n        param_1[0x13] = 0xffffffff;\n        *(param_1 + 0x12) = 0xffff;\n    }\n    else {\n        iVar1 = **param_1;\n        *(param_1 + 0x12) = iVar1;\n        iVar4 = fcn.10010d20(\"()$^.*+?[]|\\\\-{},:=!\\n\\r\\b\", iVar1, unaff_ESI);\n        if (iVar4 == 0) {\n            piVar5 = NULL;\n        }\n        else {\n            piVar5 = *(param_1 + 0x12);\n        }\n        param_1[0x13] = piVar5;\n    }\n    switch(*(param_1 + 0x12)) {\n    case 10:\n        if ((*(param_1 + 0x14) & 4) == 0) {\n            return;\n        }\n        if (param_1[4] != NULL) {\n            return;\n        }\n        param_1[0x13] = 0x7c;\n        return;\n    default:\n        goto code_r0x10008709;\n    case 0x24:\n        if ((param_1[0x14] & 0x2000000) == 0) {\n            return;\n        }\n        if (*param_1 + 1 == param_1[2]) {\n            return;\n        }\n        if ((*param_1)[1] == 10) {\n            return;\n        }\n        param_1[0x13] = NULL;\n        return;\n    case 0x28:\n    case 0x29:\n        bVar6 = (*(param_1 + 0x14) & 8) == 0;\n        break;\n    case 0x2a:\n        if ((param_1[0x14] & 0x4000000) == 0) {\n            return;\n        }\n        cVar3 = fcn.10009d30();\n        if (cVar3 == '\\0') {\n            return;\n        }\n        param_1[0x13] = NULL;\n        return;\n    case 0x2b:\n    case 0x3f:\n        bVar6 = (*(param_1 + 0x14) & 1) == 0;\n        break;\n    case 0x5c:\n        cVar3 = fcn.10009a20();\n        if (cVar3 == '\\0') {\n            return;\n        }\n        uVar2 = (*param_1)[1];\n        *(param_1 + 0x12) = uVar2;\n        param_1[0x13] = uVar2;\n        return;\n    case 0x5e:\n        if ((param_1[0x14] & 0x2000000) == 0) {\n            return;\n        }\n        cVar3 = fcn.10009d30();\n        bVar6 = cVar3 == '\\0';\n        break;\n    case 0x7b:\n    case 0x7d:\n        bVar6 = (*(param_1 + 0x14) & 0x10) == 0;\n        break;\n    case 0x7c:\n        bVar6 = (*(param_1 + 0x14) & 2) == 0;\n    }\n    if (bVar6) {\n        param_1[0x13] = NULL;\n    }\ncode_r0x10008709:\n    return;\n}\n",
        "token_count": 1018
    },
    "10009d70": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** __fastcall fcn.10009d70(int32_t param_1)\n\n{\n    code *pcVar1;\n    code **ppcVar2;\n    \n    ppcVar2 = fcn.1000e9c8(0x14);\n    ppcVar2[4] = NULL;\n    *ppcVar2 = vtable.std::_Node_base.0;\n    ppcVar2[1] = 0x8;\n    ppcVar2[2] = NULL;\n    ppcVar2[3] = NULL;\n    ppcVar2[4] = *(param_1 + 4);\n    pcVar1 = *(*(param_1 + 4) + 0xc);\n    if (pcVar1 != NULL) {\n        ppcVar2[3] = pcVar1;\n        *(*(*(param_1 + 4) + 0xc) + 0x10) = ppcVar2;\n    }\n    *(*(param_1 + 4) + 0xc) = ppcVar2;\n    *(param_1 + 4) = ppcVar2;\n    return ppcVar2;\n}\n",
        "token_count": 251
    },
    "10009dd0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** __thiscall fcn.10009dd0(int32_t param_1, int32_t param_2)\n\n{\n    code *pcVar1;\n    code **ppcVar2;\n    code **ppcVar3;\n    \n    ppcVar2 = fcn.1000e9c8(0x14);\n    ppcVar2[4] = NULL;\n    ppcVar2[1] = 0x11;\n    ppcVar2[2] = NULL;\n    ppcVar2[3] = NULL;\n    *ppcVar2 = vtable.std::_Node_endif.0;\n    ppcVar2[4] = *(param_1 + 4);\n    pcVar1 = *(*(param_1 + 4) + 0xc);\n    if (pcVar1 != NULL) {\n        ppcVar2[3] = pcVar1;\n        *(*(*(param_1 + 4) + 0xc) + 0x10) = ppcVar2;\n    }\n    *(*(param_1 + 4) + 0xc) = ppcVar2;\n    *(param_1 + 4) = ppcVar2;\n    ppcVar3 = fcn.1000e9c8(0x1c);\n    ppcVar3[5] = ppcVar2;\n    ppcVar3[1] = 0x10;\n    ppcVar3[2] = NULL;\n    ppcVar3[3] = NULL;\n    ppcVar3[4] = NULL;\n    *ppcVar3 = vtable.std::_Node_if.0;\n    ppcVar3[6] = NULL;\n    pcVar1 = *(param_2 + 0xc);\n    *(*(pcVar1 + 0x10) + 0xc) = ppcVar3;\n    ppcVar3[4] = *(pcVar1 + 0x10);\n    *(pcVar1 + 0x10) = ppcVar3;\n    ppcVar3[3] = pcVar1;\n    return ppcVar2;\n}\n",
        "token_count": 463
    },
    "10009f20": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint * __fastcall\nfcn.10009f20(uint *param_1, uint param_2, uint param_3, uint param_4, uint param_5, uint param_6, uint32_t param_7)\n\n{\n    uint *puVar1;\n    \n    *param_1 = param_4;\n    if ((param_7 & 0x100) != 0) {\n        puVar1 = fcn.1000b0b0(param_3, param_4, param_5, param_6, param_2);\n        *param_1 = *puVar1;\n        return param_1;\n    }\n    if ((param_7 & 0x800) != 0) {\n        puVar1 = fcn.1000b160(param_3, param_4, param_5, param_6, param_2);\n        *param_1 = *puVar1;\n        return param_1;\n    }\n    puVar1 = fcn.1000b1c0(param_3, param_4, param_5, param_6, param_4);\n    *param_1 = *puVar1;\n    return param_1;\n}\n",
        "token_count": 259
    },
    "10009fb0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff"
        ],
        "decompiled_code": "\nuint16_t ** __fastcall\nfcn.10009fb0(uint16_t **param_1, uint16_t *param_2, uint16_t *param_3, uint16_t *param_4, uint16_t *param_5, \n            int32_t param_6)\n\n{\n    uint16_t uVar1;\n    code *pcVar2;\n    int16_t iVar3;\n    int16_t iVar4;\n    uint16_t *puVar5;\n    uint16_t *puVar6;\n    \n    puVar5 = param_3;\n    puVar6 = param_3;\n    if (param_3 != param_4) {\n        do {\n            puVar6 = puVar5;\n            if (param_2 == param_5) break;\n            uVar1 = *param_2;\n            puVar6 = puVar5 + 1;\n            pcVar2 = **(param_6 + 4);\n            if (pcVar2 == vtable.std::ctype_wchar_t_.0) {\n                iVar3 = fcn.1000dfc7(*puVar5, *(param_6 + 4) + 2);\n            }\n            else {\n                iVar3 = (**(pcVar2 + 0x20))(*puVar5);\n            }\n            pcVar2 = **(param_6 + 4);\n            if (pcVar2 == vtable.std::ctype_wchar_t_.0) {\n                iVar4 = fcn.1000dfc7(uVar1, *(param_6 + 4) + 2);\n            }\n            else {\n                iVar4 = (**(pcVar2 + 0x20))(uVar1);\n            }\n            param_2 = param_2 + 1;\n            if (iVar3 != iVar4) {\n                *param_1 = param_3;\n                return param_1;\n            }\n            puVar5 = puVar6;\n        } while (puVar6 != param_4);\n    }\n    if (param_2 == param_5) {\n        param_3 = puVar6;\n    }\n    *param_1 = param_3;\n    return param_1;\n}\n",
        "token_count": 468
    },
    "1000a070": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff"
        ],
        "decompiled_code": "\nvoid __fastcall\nfcn.1000a070(uint16_t **param_1, uint16_t *param_2, uint16_t **param_3, uint16_t **param_4, uint16_t *param_5)\n\n{\n    char cVar1;\n    uint16_t **unaff_EBP;\n    uint16_t **ppuVar2;\n    uint16_t **unaff_retaddr;\n    \n    ppuVar2 = param_3;\n    if (param_3 != param_4) {\n        do {\n            if (param_2 == param_5) break;\n            cVar1 = fcn.1000a4a0(*ppuVar2, *param_2);\n            param_2 = param_2 + 1;\n            if (cVar1 == '\\0') {\n                *unaff_EBP = param_3;\n                return;\n            }\n            ppuVar2 = param_1;\n        } while (param_1 != unaff_retaddr);\n    }\n    if (param_2 == param_5) {\n        param_3 = ppuVar2;\n    }\n    *param_1 = param_3;\n    return;\n}\n",
        "token_count": 254
    },
    "1000a0e0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.1000a0e0(int16_t **param_1, int16_t *param_2, int16_t *param_3, int16_t *param_4, int16_t *param_5)\n\n{\n    int16_t iVar1;\n    int16_t *piVar2;\n    int16_t *piVar3;\n    \n    piVar2 = param_3;\n    piVar3 = param_3;\n    if (param_3 != param_4) {\n        do {\n            piVar3 = piVar2;\n            if (param_2 == param_5) break;\n            iVar1 = *param_2;\n            piVar3 = piVar2 + 1;\n            param_2 = param_2 + 1;\n            if (*piVar2 != iVar1) {\n                *param_1 = param_3;\n                return;\n            }\n            piVar2 = piVar3;\n        } while (piVar3 != param_4);\n    }\n    if (param_2 == param_5) {\n        param_3 = piVar3;\n    }\n    *param_1 = param_3;\n    return;\n}\n",
        "token_count": 254
    },
    "1000a2a0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuchar * __fastcall fcn.1000a2a0(uchar *param_1, uchar *param_2, uchar *param_3)\n\n{\n    if (param_1 == param_2) {\n        return param_3;\n    }\n    do {\n        if (param_3 != NULL) {\n            *param_3 = *param_1;\n            *(param_3 + 8) = *(param_1 + 8);\n            *(param_3 + 0xc) = *(param_1 + 0xc);\n            *param_1 = 0;\n            *(param_1 + 8) = 0;\n            *(param_1 + 0xc) = 0;\n        }\n        param_1 = param_1 + 0x10;\n        param_3 = param_3 + 0x10;\n    } while (param_1 != param_2);\n    return param_3;\n}\n",
        "token_count": 201
    },
    "1000a360": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.1000a360(ulong *param_1, int32_t param_2)\n\n{\n    if (param_2 != 0) {\n        do {\n            if (param_1 != NULL) {\n                *param_1 = 0;\n                *param_1 = 0;\n                *(param_1 + 4) = 0;\n            }\n            param_1 = param_1 + 1;\n            param_2 = param_2 + -1;\n        } while (param_2 != 0);\n    }\n    return;\n}\n",
        "token_count": 124
    },
    "1000a390": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.1000a390(uint *param_1, int32_t param_2)\n\n{\n    if (param_2 != 0) {\n        do {\n            if (param_1 != NULL) {\n                *param_1 = 0;\n                param_1[1] = 0;\n                *(param_1 + 2) = 0;\n            }\n            param_1 = param_1 + 3;\n            param_2 = param_2 + -1;\n        } while (param_2 != 0);\n    }\n    return;\n}\n",
        "token_count": 125
    },
    "1000a5a0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t * __thiscall fcn.1000a5a0(int32_t *param_1, int32_t *param_2)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t *piVar3;\n    uint extraout_ECX;\n    uint32_t uVar4;\n    uint unaff_retaddr;\n    \n    *param_1 = 0;\n    param_1[1] = 0;\n    param_1[2] = 0;\n    uVar4 = param_2[1] - *param_2 >> 3;\n    *param_1 = 0;\n    param_1[1] = 0;\n    param_1[2] = 0;\n    if (uVar4 != 0) {\n        if (0x1fffffff < uVar4) {\n            fcn.1000df24(\"vector<T> too long\");\n            pcVar1 = swi(3);\n            piVar3 = (*pcVar1)();\n            return piVar3;\n        }\n        iVar2 = fcn.10007c60(uVar4);\n        *param_1 = iVar2;\n        param_1[1] = iVar2;\n        param_1[2] = *param_1 + uVar4 * 8;\n        iVar2 = fcn.1000c4b0(*param_1, extraout_ECX, unaff_retaddr, extraout_ECX);\n        param_1[1] = iVar2;\n    }\n    return param_1;\n}\n",
        "token_count": 337
    },
    "1000a630": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t __thiscall fcn.1000a630(int16_t **param_1, int16_t **param_2)\n\n{\n    int16_t **ppiVar1;\n    int16_t **ppiVar2;\n    int16_t *piVar3;\n    int16_t *piVar4;\n    uint32_t uVar5;\n    int16_t *piVar6;\n    \n    ppiVar1 = param_2 + 4;\n    if (0x7 < param_2[5]) {\n        param_2 = *param_2;\n    }\n    ppiVar2 = param_1 + 4;\n    if (0x7 < param_1[5]) {\n        param_1 = *param_1;\n    }\n    piVar3 = *ppiVar1;\n    piVar4 = *ppiVar2;\n    piVar6 = piVar3;\n    if (piVar4 < piVar3) {\n        piVar6 = piVar4;\n    }\n    do {\n        if (piVar6 == NULL) {\n            uVar5 = 0;\ncode_r0x1000a65e:\n            if (uVar5 == 0) {\n                if (piVar4 < piVar3) {\n                    return 0xffffffff;\n                }\n                uVar5 = piVar3 < piVar4;\n            }\n            return uVar5;\n        }\n        if (*param_1 != *param_2) {\n            uVar5 = (-(*param_1 < *param_2) & 0xfffffffe) + 1;\n            goto code_r0x1000a65e;\n        }\n        param_1 = param_1 + 2;\n        param_2 = param_2 + 2;\n        piVar6 = piVar6 + -1;\n    } while( true );\n}\n",
        "token_count": 396
    },
    "1000a6a0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.1000a6a0(uint32_t *param_1)\n\n{\n    uint32_t uVar1;\n    code *pcVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    \n    uVar1 = *param_1;\n    if (uVar1 == 0) {\n        return;\n    }\n    uVar3 = param_1[2] - uVar1 >> 1;\n    if (uVar3 < 0x80000000) {\n        uVar4 = uVar1;\n        if (uVar3 * 2 < 0x1000) {\ncode_r0x1000a6da:\n            fcn.1000ed48(uVar4);\n            *param_1 = 0;\n            param_1[1] = 0;\n            param_1[2] = 0;\n            return;\n        }\n        if ((uVar1 & 0x1f) != 0) goto code_r0x1000a6fe;\n        uVar4 = *(uVar1 - 4);\n        if (uVar1 <= uVar4) goto code_r0x1000a703;\n        if (3 < uVar1 - uVar4) {\n            if (uVar1 - uVar4 < 0x24) goto code_r0x1000a6da;\n            goto code_r0x1000a70d;\n        }\n    }\n    else {\n        fcn.10013da4();\ncode_r0x1000a6fe:\n        fcn.10013da4();\ncode_r0x1000a703:\n        fcn.10013da4();\n    }\n    fcn.10013da4();\ncode_r0x1000a70d:\n    fcn.10013da4();\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 416
    },
    "1000aab0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.1000aab0(int16_t **param_1, int16_t *param_2, uint param_3)\n\n{\n    code *pcVar1;\n    int16_t *piVar2;\n    \n    if (param_1[0x13] != param_2) {\n        fcn.1000df64(param_3);\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    piVar2 = *param_1;\n    if (piVar2 != param_1[2]) {\n        if (((*piVar2 == 0x5c) && (piVar2 = piVar2 + 1,  piVar2 != param_1[2])) &&\n           ((((param_1[0x14] & 8) == 0 && ((*piVar2 == 0x28 || (*piVar2 == 0x29)))) ||\n            (((param_1[0x14] & 0x10) == 0 && ((*piVar2 == 0x7b || (*piVar2 == 0x7d)))))))) {\n            *param_1 = piVar2;\n        }\n        *param_1 = *param_1 + 1;\n    }\n    fcn.10008600();\n    return;\n}\n",
        "token_count": 287
    },
    "1000ae40": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.1000ae40(int32_t param_1)\n\n{\n    code *pcVar1;\n    code **ppcVar2;\n    \n    ppcVar2 = fcn.1000e9c8(0x14);\n    ppcVar2[4] = NULL;\n    *ppcVar2 = vtable.std::_Node_base.0;\n    ppcVar2[1] = 0x2;\n    ppcVar2[2] = NULL;\n    ppcVar2[3] = NULL;\n    ppcVar2[4] = *(param_1 + 4);\n    pcVar1 = *(*(param_1 + 4) + 0xc);\n    if (pcVar1 != NULL) {\n        ppcVar2[3] = pcVar1;\n        *(*(*(param_1 + 4) + 0xc) + 0x10) = ppcVar2;\n    }\n    *(*(param_1 + 4) + 0xc) = ppcVar2;\n    *(param_1 + 4) = ppcVar2;\n    return;\n}\n",
        "token_count": 246
    },
    "1000aea0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.1000aea0(int32_t param_1)\n\n{\n    code *pcVar1;\n    code **ppcVar2;\n    \n    ppcVar2 = fcn.1000e9c8(0x14);\n    ppcVar2[4] = NULL;\n    *ppcVar2 = vtable.std::_Node_base.0;\n    ppcVar2[1] = 0x3;\n    ppcVar2[2] = NULL;\n    ppcVar2[3] = NULL;\n    ppcVar2[4] = *(param_1 + 4);\n    pcVar1 = *(*(param_1 + 4) + 0xc);\n    if (pcVar1 != NULL) {\n        ppcVar2[3] = pcVar1;\n        *(*(*(param_1 + 4) + 0xc) + 0x10) = ppcVar2;\n    }\n    *(*(param_1 + 4) + 0xc) = ppcVar2;\n    *(param_1 + 4) = ppcVar2;\n    return;\n}\n",
        "token_count": 246
    },
    "1000af00": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.1000af00(int32_t param_1)\n\n{\n    code *pcVar1;\n    code **ppcVar2;\n    \n    ppcVar2 = fcn.1000e9c8(0x14);\n    ppcVar2[4] = NULL;\n    *ppcVar2 = vtable.std::_Node_base.0;\n    ppcVar2[1] = 0x4;\n    ppcVar2[2] = NULL;\n    ppcVar2[3] = NULL;\n    ppcVar2[4] = *(param_1 + 4);\n    pcVar1 = *(*(param_1 + 4) + 0xc);\n    if (pcVar1 != NULL) {\n        ppcVar2[3] = pcVar1;\n        *(*(*(param_1 + 4) + 0xc) + 0x10) = ppcVar2;\n    }\n    *(*(param_1 + 4) + 0xc) = ppcVar2;\n    *(param_1 + 4) = ppcVar2;\n    return;\n}\n",
        "token_count": 246
    },
    "1000b0b0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff"
        ],
        "decompiled_code": "\nuint16_t ** __thiscall\nfcn.1000b0b0(uint16_t **param_1, uint16_t *param_2, uint16_t *param_3, uint16_t *param_4, uint16_t *param_5, \n            int32_t param_6)\n\n{\n    uint16_t uVar1;\n    code *pcVar2;\n    int16_t iVar3;\n    int16_t iVar4;\n    uint16_t *puVar5;\n    uint16_t *puVar6;\n    uint16_t *puVar7;\n    bool bVar8;\n    \n    puVar5 = param_2;\n    puVar6 = param_2;\n    if (param_2 != param_3) {\n        do {\n            bVar8 = param_4 == param_5;\n            puVar6 = puVar5;\n            if (bVar8) goto code_r0x1000b13c;\n            puVar6 = puVar5 + 1;\n            puVar7 = param_4 + 1;\n            uVar1 = *param_4;\n            pcVar2 = **(param_6 + 4);\n            if (pcVar2 == vtable.std::ctype_wchar_t_.0) {\n                iVar3 = fcn.1000dfc7(*puVar5, *(param_6 + 4) + 2);\n            }\n            else {\n                iVar3 = (**(pcVar2 + 0x20))(*puVar5);\n            }\n            pcVar2 = **(param_6 + 4);\n            if (pcVar2 == vtable.std::ctype_wchar_t_.0) {\n                iVar4 = fcn.1000dfc7(uVar1, *(param_6 + 4) + 2);\n            }\n            else {\n                iVar4 = (**(pcVar2 + 0x20))(uVar1);\n            }\n            if (iVar3 != iVar4) goto code_r0x1000b13f;\n            puVar5 = puVar6;\n            param_4 = puVar7;\n        } while (puVar6 != param_3);\n    }\n    bVar8 = param_4 == param_5;\ncode_r0x1000b13c:\n    if (bVar8) {\n        param_2 = puVar6;\n    }\ncode_r0x1000b13f:\n    *param_1 = param_2;\n    return param_1;\n}\n",
        "token_count": 534
    },
    "1000b160": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff"
        ],
        "decompiled_code": "\nuint16_t ** __thiscall\nfcn.1000b160(uint16_t **param_1, uint16_t *param_2, uint16_t *param_3, uint16_t *param_4, uint16_t *param_5)\n\n{\n    uint16_t uVar1;\n    char cVar2;\n    uint16_t *puVar3;\n    uint16_t *puVar4;\n    uint16_t *unaff_ESI;\n    bool bVar5;\n    uint16_t *unaff_retaddr;\n    \n    puVar4 = param_2;\n    if (param_2 != param_3) {\n        do {\n            bVar5 = param_4 == param_5;\n            if (bVar5) goto code_r0x1000b1b3;\n            puVar3 = param_4 + 1;\n            uVar1 = *puVar4;\n            puVar4 = unaff_ESI;\n            cVar2 = fcn.1000a4a0(uVar1, *param_4);\n            if (cVar2 == '\\0') goto code_r0x1000b1b6;\n            param_4 = puVar3;\n            unaff_ESI = puVar4;\n        } while (puVar4 != unaff_retaddr);\n    }\n    bVar5 = param_4 == param_5;\ncode_r0x1000b1b3:\n    if (bVar5) {\n        param_2 = puVar4;\n    }\ncode_r0x1000b1b6:\n    *param_1 = param_2;\n    return param_1;\n}\n",
        "token_count": 353
    },
    "1000b1c0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint16_t ** __thiscall\nfcn.1000b1c0(int16_t **param_1, int16_t *param_2, int16_t *param_3, int16_t *param_4, int16_t *param_5)\n\n{\n    int16_t *piVar1;\n    int16_t *piVar2;\n    int16_t *piVar3;\n    \n    piVar1 = param_2;\n    piVar2 = param_2;\n    piVar3 = param_4;\n    if (param_2 != param_3) {\n        do {\n            piVar2 = piVar1;\n            piVar3 = param_4;\n            if (param_4 == param_5) break;\n            piVar3 = param_4 + 1;\n            piVar2 = piVar1 + 1;\n            if (*piVar1 != *param_4) {\n                *param_1 = param_2;\n                return param_1;\n            }\n            piVar1 = piVar2;\n            param_4 = piVar3;\n        } while (piVar2 != param_3);\n    }\n    if (piVar3 == param_5) {\n        param_2 = piVar2;\n    }\n    *param_1 = param_2;\n    return param_1;\n}\n",
        "token_count": 286
    },
    "1000b740": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint * __fastcall fcn.1000b740(uint *param_1)\n\n{\n    uint *puVar1;\n    \n    puVar1 = fcn.1000e9c8(0x38);\n    if (puVar1 != NULL) {\n        *puVar1 = *param_1;\n    }\n    if (puVar1 + 1 != NULL) {\n        puVar1[1] = *param_1;\n    }\n    if (puVar1 + 2 != NULL) {\n        puVar1[2] = *param_1;\n    }\n    return puVar1;\n}\n",
        "token_count": 132
    },
    "1000b780": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1000b780(uint param_1)\n\n{\n    fcn.100034a0();\n    fcn.10003600();\n    fcn.1000ed48(param_1);\n    return;\n}\n",
        "token_count": 48
    },
    "1000bbd0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.1000bbd0(int32_t param_1)\n\n{\n    code *pcVar1;\n    code **ppcVar2;\n    \n    ppcVar2 = fcn.1000e9c8(0x14);\n    ppcVar2[4] = NULL;\n    *ppcVar2 = vtable.std::_Node_base.0;\n    ppcVar2[1] = 0x8;\n    ppcVar2[2] = NULL;\n    ppcVar2[3] = NULL;\n    ppcVar2[4] = *(param_1 + 0x28);\n    pcVar1 = *(*(param_1 + 0x28) + 0xc);\n    if (pcVar1 != NULL) {\n        ppcVar2[3] = pcVar1;\n        *(*(*(param_1 + 0x28) + 0xc) + 0x10) = ppcVar2;\n    }\n    *(*(param_1 + 0x28) + 0xc) = ppcVar2;\n    *(param_1 + 0x28) = ppcVar2;\n    fcn.100087b0();\n    fcn.10008950(ppcVar2);\n    return;\n}\n",
        "token_count": 278
    },
    "1000bc80": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/0325759584d940e7b69154ed16836be2",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.1000bc80(int32_t param_1)\n\n{\n    code *pcVar1;\n    code **ppcVar2;\n    \n    ppcVar2 = fcn.1000e9c8(0x2c);\n    ppcVar2[4] = NULL;\n    ppcVar2[1] = 0x7;\n    ppcVar2[2] = NULL;\n    ppcVar2[3] = NULL;\n    *ppcVar2 = vtable.std::_Node_class_wchar_t__class_std::regex_traits_wchar_t__.0;\n    ppcVar2[5] = NULL;\n    ppcVar2[6] = NULL;\n    ppcVar2[7] = NULL;\n    ppcVar2[8] = NULL;\n    *(ppcVar2 + 9) = 0;\n    ppcVar2[10] = NULL;\n    ppcVar2[4] = *(param_1 + 4);\n    pcVar1 = *(*(param_1 + 4) + 0xc);\n    if (pcVar1 != NULL) {\n        ppcVar2[3] = pcVar1;\n        *(*(*(param_1 + 4) + 0xc) + 0x10) = ppcVar2;\n    }\n    *(*(param_1 + 4) + 0xc) = ppcVar2;\n    *(param_1 + 4) = ppcVar2;\n    return;\n}\n",
        "token_count": 328
    },
    "1000bd10": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.1000bd10(int32_t param_1, code *param_2)\n\n{\n    code *pcVar1;\n    code **ppcVar2;\n    \n    ppcVar2 = fcn.1000e9c8(0x18);\n    ppcVar2[4] = NULL;\n    ppcVar2[1] = 0xf;\n    ppcVar2[2] = NULL;\n    ppcVar2[3] = NULL;\n    *ppcVar2 = vtable.std::_Node_back.0;\n    ppcVar2[5] = param_2;\n    ppcVar2[4] = *(param_1 + 4);\n    pcVar1 = *(*(param_1 + 4) + 0xc);\n    if (pcVar1 != NULL) {\n        ppcVar2[3] = pcVar1;\n        *(*(*(param_1 + 4) + 0xc) + 0x10) = ppcVar2;\n    }\n    *(*(param_1 + 4) + 0xc) = ppcVar2;\n    *(param_1 + 4) = ppcVar2;\n    return;\n}\n",
        "token_count": 265
    },
    "1000c050": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/0325759584d940e7b69154ed16836be2",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.1000c050(int32_t param_1)\n\n{\n    code *pcVar1;\n    code **ppcVar2;\n    \n    ppcVar2 = fcn.1000e9c8(0x20);\n    ppcVar2[1] = 0x6;\n    ppcVar2[2] = NULL;\n    ppcVar2[3] = NULL;\n    ppcVar2[4] = NULL;\n    *ppcVar2 = vtable.std::_Node_str_wchar_t_.0;\n    ppcVar2[5] = NULL;\n    ppcVar2[6] = NULL;\n    ppcVar2[7] = NULL;\n    ppcVar2[4] = *(param_1 + 4);\n    pcVar1 = *(*(param_1 + 4) + 0xc);\n    if (pcVar1 != NULL) {\n        ppcVar2[3] = pcVar1;\n        *(*(*(param_1 + 4) + 0xc) + 0x10) = ppcVar2;\n    }\n    *(*(param_1 + 4) + 0xc) = ppcVar2;\n    *(param_1 + 4) = ppcVar2;\n    return;\n}\n",
        "token_count": 282
    },
    "1000c4b0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.1000c4b0(uint *param_1, uint *param_2, uint *param_3)\n\n{\n    if (param_1 != param_2) {\n        do {\n            if (param_3 != NULL) {\n                *param_3 = *param_1;\n                param_3[1] = param_1[1];\n            }\n            param_1 = param_1 + 2;\n            param_3 = param_3 + 2;\n        } while (param_1 != param_2);\n    }\n    return;\n}\n",
        "token_count": 126
    },
    "1000c4e0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.1000c4e0(ulong *param_1, ulong *param_2, ulong *param_3)\n\n{\n    if (param_1 != param_2) {\n        do {\n            if (param_3 != NULL) {\n                *param_3 = *param_1;\n                *(param_3 + 1) = *(param_1 + 1);\n            }\n            param_1 = param_1 + 0xc;\n            param_3 = param_3 + 0xc;\n        } while (param_1 != param_2);\n    }\n    return;\n}\n",
        "token_count": 133
    },
    "1000c9e0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\ncode ** __thiscall fcn.1000c9e0(int32_t param_1, char param_2)\n\n{\n    code *pcVar1;\n    code **ppcVar2;\n    code **ppcVar3;\n    int32_t *in_FS_OFFSET;\n    uint var_8h;\n    uint var_10h;\n    uint var_ch;\n    uint var_14h;\n    int32_t var_ch_2;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x1003d9d0;\n    var_ch_2 = *in_FS_OFFSET;\n    *in_FS_OFFSET = &var_ch_2;\n    ppcVar2 = fcn.1000e9c8(0x18);\n    var_4h = 0;\n    ppcVar2[2] = NULL;\n    ppcVar2[3] = NULL;\n    ppcVar2[1] = (var_8h != '\\0') + 10;\n    ppcVar2[4] = NULL;\n    *ppcVar2 = vtable.std::_Node_assert.0;\n    ppcVar2[5] = NULL;\n    ppcVar3 = fcn.1000e9c8(0x14);\n    *ppcVar3 = vtable.std::_Node_base.0;\n    ppcVar3[1] = 0x1;\n    ppcVar3[2] = NULL;\n    ppcVar3[3] = NULL;\n    ppcVar3[4] = NULL;\n    ppcVar2[4] = *(param_1 + 4);\n    pcVar1 = *(*(param_1 + 4) + 0xc);\n    if (pcVar1 != NULL) {\n        ppcVar2[3] = pcVar1;\n        *(*(*(param_1 + 4) + 0xc) + 0x10) = ppcVar2;\n    }\n    *(*(param_1 + 4) + 0xc) = ppcVar2;\n    ppcVar2[5] = ppcVar3;\n    ppcVar3[4] = ppcVar2;\n    *(param_1 + 4) = ppcVar3;\n    *in_FS_OFFSET = var_ch_2;\n    return ppcVar2;\n}\n",
        "token_count": 522
    },
    "1000ccc0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.1000ccc0(int32_t *param_1, int32_t param_2, int32_t param_3)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int32_t unaff_retaddr;\n    \n    uVar3 = param_3 - param_2 >> 1;\n    *param_1 = 0;\n    param_1[1] = 0;\n    param_1[2] = 0;\n    if (uVar3 != 0) {\n        if (0x7fffffff < uVar3) {\n            fcn.1000df24(\"vector<T> too long\");\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        iVar2 = fcn.10005190(uVar3);\n        *param_1 = iVar2;\n        param_1[1] = iVar2;\n        param_1[2] = *param_1 + uVar3 * 2;\n        iVar2 = *param_1;\n        fcn.1000f9e0(iVar2, unaff_retaddr, param_2 - unaff_retaddr);\n        param_1[1] = (param_2 - unaff_retaddr) + iVar2;\n    }\n    return;\n}\n",
        "token_count": 293
    },
    "1000cd30": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t ** __thiscall\nfcn.1000cd30(uint32_t **param_1, uint param_2, uint32_t *param_3, uint32_t param_4, uint32_t *param_5, uint32_t param_6\n            , uint32_t *param_7, uint32_t *param_8)\n\n{\n    uint32_t uVar1;\n    \n    while ((param_3 != param_5 || (param_4 != param_6))) {\n        if ((*param_3 & 1 << (param_4 & 0x1f)) == 0) {\n            uVar1 = *param_7 & ~(1 << (param_8 & 0x1f));\n        }\n        else {\n            uVar1 = *param_7 | 1 << (param_8 & 0x1f);\n        }\n        *param_7 = uVar1;\n        if (param_8 < 0x1f) {\n            param_8 = param_8 + 1;\n        }\n        else {\n            param_8 = NULL;\n            param_7 = param_7 + 1;\n        }\n        if (param_4 < 0x1f) {\n            param_4 = param_4 + 1;\n        }\n        else {\n            param_3 = param_3 + 1;\n            param_4 = 0;\n        }\n    }\n    *param_1 = param_7;\n    param_1[1] = param_8;\n    return param_1;\n}\n",
        "token_count": 334
    },
    "1000d530": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.1000d530(uint32_t *param_1, ushort *param_2, ushort *param_3)\n\n{\n    ushort uVar1;\n    uint32_t uVar2;\n    code *pcVar3;\n    uint32_t uVar4;\n    \n    if (param_2 != param_3) {\n        do {\n            uVar2 = param_1[1];\n            uVar1 = *param_2;\n            if (*param_1 < uVar2 || *param_1 == uVar2) {\n                uVar4 = fcn.10013bc2(param_1[2], (uVar2 + 0x10) * 2);\n                if (uVar4 == 0) {\n                    fcn.1000f48a();\n                    pcVar3 = swi(3);\n                    (*pcVar3)();\n                    return;\n                }\n                param_1[2] = uVar4;\n                *param_1 = uVar2 + 0x10;\n            }\n            param_2 = param_2 + 1;\n            *(param_1[2] + param_1[1] * 2) = uVar1;\n            param_1[1] = param_1[1] + 1;\n        } while (param_2 != param_3);\n    }\n    return;\n}\n",
        "token_count": 295
    },
    "1000d590": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __fastcall fcn.1000d590(uint16_t *param_1, uint16_t *param_2, int32_t param_3, int32_t *param_4)\n\n{\n    code *pcVar1;\n    int16_t iVar2;\n    int16_t iVar3;\n    uint32_t arg_8h;\n    \n    if (param_1 != param_2) {\n        param_3 = param_3 - param_1;\n        do {\n            arg_8h = *(param_3 + param_1);\n            pcVar1 = **(*param_4 + 4);\n            if (pcVar1 == vtable.std::ctype_wchar_t_.0) {\n                iVar2 = fcn.1000dfc7(*param_1, *(*param_4 + 4) + 2);\n            }\n            else {\n                iVar2 = (**(pcVar1 + 0x20))(*param_1);\n            }\n            pcVar1 = **(*param_4 + 4);\n            if (pcVar1 == vtable.std::ctype_wchar_t_.0) {\n                iVar3 = fcn.1000dfc7(arg_8h, *(*param_4 + 4) + 2);\n            }\n            else {\n                iVar3 = (**(pcVar1 + 0x20))(arg_8h);\n            }\n            if (iVar2 != iVar3) {\n                return 0;\n            }\n            param_1 = param_1 + 1;\n        } while (param_1 != param_2);\n    }\n    return 1;\n}\n",
        "token_count": 344
    },
    "1000d630": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.1000d630(int32_t *param_1, int32_t param_2, int32_t param_3)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint unaff_retaddr;\n    \n    param_3 = param_3 - param_2;\n    uVar3 = param_3 >> 1;\n    *param_1 = 0;\n    param_1[1] = 0;\n    param_1[2] = 0;\n    if (uVar3 != 0) {\n        if (0x7fffffff < uVar3) {\n            fcn.1000df24(\"vector<T> too long\");\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        iVar2 = fcn.10005190(uVar3);\n        *param_1 = iVar2;\n        param_1[1] = iVar2;\n        param_1[2] = *param_1 + uVar3 * 2;\n        iVar2 = *param_1;\n        fcn.1000f9e0(iVar2, unaff_retaddr, param_3);\n        param_1[1] = param_3 + iVar2;\n    }\n    return;\n}\n",
        "token_count": 288
    },
    "1000f8d8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x1000f8e8)\n// WARNING: Removing unreachable block (ram,0x1000f8e9)\n// WARNING: Removing unreachable block (ram,0x1000f8ef)\n// WARNING: Removing unreachable block (ram,0x1000f8f8)\n// WARNING: Removing unreachable block (ram,0x1000f8ff)\n\nvoid fcn.1000f8d8(void)\n\n{\n    return;\n}\n",
        "token_count": 106
    },
    "100143c1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.100143c1(int32_t lpCriticalSection)\n\n{\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(lpCriticalSection * 0x18 + 0x10056728);\n    return;\n}\n",
        "token_count": 49
    },
    "10014409": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.10014409(int32_t lpCriticalSection)\n\n{\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(lpCriticalSection * 0x18 + 0x10056728);\n    return;\n}\n",
        "token_count": 49
    },
    "10015029": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.10015029(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t in_ECX;\n    \n    fcn.10014fe8();\n    iVar1 = fcn.10015068(in_ECX + 8, arg_8h * 2);\n    if (iVar1 == 0) {\n        *(in_ECX + 0x14) = 1;\n        iVar1 = 0;\n        *(in_ECX + 0xc) = arg_8h;\n    }\n    else {\n        *(in_ECX + 0xc) = 0;\n        *(in_ECX + 0x14) = 0;\n    }\n    return iVar1;\n}\n",
        "token_count": 161
    },
    "10017324": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.10017324(void)\n\n{\n    fcn.10017509(0, \"AreFileApisANSI\", 0x100425e8, \"AreFileApisANSI\");\n    return;\n}\n",
        "token_count": 47
    },
    "1001733e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1001733e(void)\n\n{\n    fcn.10017509(1, \"CompareStringEx\", 0x100425fc, \"CompareStringEx\");\n    return;\n}\n",
        "token_count": 43
    },
    "10017358": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.10017358(void)\n\n{\n    fcn.10017509(2, \"EnumSystemLocalesEx\", 0x10042614, \"EnumSystemLocalesEx\");\n    return;\n}\n",
        "token_count": 46
    },
    "10017372": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.10017372(void)\n\n{\n    fcn.10017509(8, \"GetDateFormatEx\", 0x1004267c, \"GetDateFormatEx\");\n    return;\n}\n",
        "token_count": 43
    },
    "1001738c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1001738c(void)\n\n{\n    fcn.10017509(0xb, \"GetLocaleInfoEx\", 0x10042694, \"GetLocaleInfoEx\");\n    return;\n}\n",
        "token_count": 46
    },
    "100173a6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.100173a6(void)\n\n{\n    fcn.10017509(0xe, \"GetTimeFormatEx\", 0x100426ac, \"GetTimeFormatEx\");\n    return;\n}\n",
        "token_count": 46
    },
    "100173c0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.100173c0(void)\n\n{\n    fcn.10017509(0xf, \"GetUserDefaultLocaleName\", 0x100426c4, \"GetUserDefaultLocaleName\");\n    return;\n}\n",
        "token_count": 49
    },
    "100173da": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.100173da(void)\n\n{\n    fcn.10017509(0x13, \"IsValidLocaleName\", 0x1004270c, \"IsValidLocaleName\");\n    return;\n}\n",
        "token_count": 45
    },
    "100173f4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.100173f4(void)\n\n{\n    fcn.10017509(0x15, \"LCIDToLocaleName\", 0x10042740, \"LCIDToLocaleName\");\n    return;\n}\n",
        "token_count": 49
    },
    "1001740e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1001740e(void)\n\n{\n    fcn.10017509(0x14, \"LCMapStringEx\", 0x10042728, \"LCMapStringEx\");\n    return;\n}\n",
        "token_count": 47
    },
    "10017428": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.10017428(void)\n\n{\n    fcn.10017509(0x16, \"LocaleNameToLCID\", 0x1004275c, \"LocaleNameToLCID\");\n    return;\n}\n",
        "token_count": 49
    },
    "1001a661": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.1001a661(int32_t lpCriticalSection)\n\n{\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(lpCriticalSection + 0x20);\n    return;\n}\n",
        "token_count": 42
    },
    "1001a675": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.1001a675(int32_t lpCriticalSection)\n\n{\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(lpCriticalSection + 0x20);\n    return;\n}\n",
        "token_count": 43
    },
    "1001b837": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nfloat10 __cdecl fcn.1001b837(uint arg_8h, uint noname_1, uint arg_10h, uint arg_14h)\n\n{\n    float10 in_ST0;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    \n    fcn.10020326();\n    return in_ST0;\n}\n",
        "token_count": 88
    },
    "1001b820": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nfloat10 __cdecl fcn.1001b820(uint arg_8h, uint noname_1, uint arg_10h, uint arg_14h, uint arg_18h, uint arg_1ch)\n\n{\n    float10 in_ST0;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    \n    fcn.10020326();\n    return in_ST0;\n}\n",
        "token_count": 112
    },
    "1001bef3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.1001bef3(int16_t *arg_8h, int32_t arg_ch, uint noname_2, uint arg_14h)\n\n{\n    int32_t iVar1;\n    uint32_t arg_8h_00;\n    uint uVar2;\n    int32_t *piVar3;\n    \n    if (arg_8h == NULL) {\n        fcn.10014fe8();\n        *(arg_ch + 8) = 0;\n        *(arg_ch + 0xc) = 0;\n    }\n    else {\n        if (*arg_8h != 0) {\n            arg_8h_00 = fcn.1001bc1b(arg_14h, 0, arg_8h, 0xffffffff, 0, 0, 0, 0);\n            if (arg_8h_00 == 0) {\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                fcn.10013e43(uVar2);\n                piVar3 = fcn.10013e79();\n                return *piVar3;\n            }\n            if ((*(arg_ch + 0xc) <= arg_8h_00 && arg_8h_00 != *(arg_ch + 0xc)) &&\n               (iVar1 = fcn.1001c4f8(arg_8h_00),  iVar1 != 0)) {\n                return iVar1;\n            }\n            iVar1 = fcn.1001bc1b(arg_14h, 0, arg_8h, 0xffffffff, *(arg_ch + 8), *(arg_ch + 0xc), 0, 0);\n            if (iVar1 == 0) {\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                fcn.10013e43(uVar2);\n                piVar3 = fcn.10013e79();\n                return *piVar3;\n            }\n            *(arg_ch + 0x10) = iVar1 + -1;\n            return 0;\n        }\n        if ((*(arg_ch + 0xc) == 0) && (iVar1 = fcn.1001c4f8(1),  iVar1 != 0)) {\n            return iVar1;\n        }\n        **(arg_ch + 8) = 0;\n    }\n    *(arg_ch + 0x10) = 0;\n    return 0;\n}\n",
        "token_count": 533
    },
    "1001c4f8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.1001c4f8(uint arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t in_ECX;\n    \n    fcn.10014fe8();\n    iVar1 = fcn.10015068(in_ECX + 8, arg_8h);\n    if (iVar1 == 0) {\n        *(in_ECX + 0x14) = 1;\n        iVar1 = 0;\n        *(in_ECX + 0xc) = arg_8h;\n    }\n    else {\n        *(in_ECX + 0xc) = 0;\n        *(in_ECX + 0x14) = 0;\n    }\n    return iVar1;\n}\n",
        "token_count": 159
    },
    "10022910": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.10022910(void)\n\n{\n    uint64_t uVar1;\n    uint32_t uVar2;\n    bool bVar3;\n    float fVar4;\n    float10 in_ST0;\n    uint32_t uStack32;\n    float fStack28;\n    \n    uVar1 = ROUND(in_ST0);\n    uStack32 = uVar1;\n    fStack28 = uVar1 >> 0x20;\n    fVar4 = in_ST0;\n    if ((uStack32 != 0) || (fVar4 = fStack28,  (uVar1 & 0x7fffffff00000000) != 0)) {\n        if (fVar4 < 0) {\n            uVar2 = 0x80000000 < (in_ST0 - uVar1 ^ 0x80000000);\n            bVar3 = CARRY4(uStack32, uVar2);\n            uStack32 = uStack32 + uVar2;\n            fStack28 = fStack28 + bVar3;\n        }\n        else {\n            uVar2 = 0x80000000 < in_ST0 - uVar1;\n            bVar3 = uStack32 < uVar2;\n            uStack32 = uStack32 - uVar2;\n            fStack28 = fStack28 - bVar3;\n        }\n    }\n    return CONCAT44(fStack28, uStack32);\n}\n",
        "token_count": 305
    },
    "10023ca0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.10023ca0(int32_t param_1)\n\n{\n    int32_t iVar1;\n    \n    *0x1004f976 = (*0x1004fa04 * '\\x05' + *0x1004f976 * '\\x04' + *0x1004f978 * '\\x02' + param_1 * '\\x03') - 0xb;\n    iVar1 = param_1 * 2 + *0x1004f978 * 10 + *0x1004f976 * 6 + *0x1004fa04 * 4 + 0x8493a;\n    *0x1004fa04 = *0x1004f978 + -0x1046f + iVar1 + *0x1004f976;\n    *0x1004f978 = param_1 + (*0x1004f978 + -0x11) * 4;\n    *0x1004f970 = param_1 + 0x1f + *0x1004f978;\n    return *0x1004f978 + 0x16163 + iVar1 + *0x1004fa04;\n}\n",
        "token_count": 261
    },
    "100111eb": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.100111eb(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    uint in_EAX;\n    uint uVar1;\n    uint var_8h;\n    uint var_4h;\n    \n    uVar1 = fcn.10010b91(arg_8h, arg_ch, arg_10h, arg_14h, in_EAX, 0, 0, 0);\n    return uVar1;\n}\n",
        "token_count": 110
    },
    "1000d90e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.1000d90e(int32_t *param_1)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = *param_1;\n    if (iVar1 != 0) {\n        if (iVar1 < 8) {\n            fcn.1000e340(iVar1 * 0x18 + 0x10056098);\n        }\n        return;\n    }\n    fcn.10014409(4);\n    return;\n}\n",
        "token_count": 103
    },
    "100011b0": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid fcn.100011b0(uint32_t param_1, uint32_t param_2, uint32_t param_3)\n\n{\n    uint32_t uVar1;\n    code *pcVar2;\n    uint32_t uVar3;\n    \n    if ((param_2 <= 0xffffffff / param_3) &&\n       ((param_2 * param_3 < 0x1000 ||\n        (((((param_1 & 0x1f) == 0 && (uVar1 = *(param_1 - 4),  uVar1 < param_1)) &&\n          (uVar3 = param_1 - uVar1,  3 < uVar3)) && (param_1 = uVar1,  uVar3 < 0x24)))))) {\n        fcn.1000ed48(param_1);\n        return;\n    }\n    fcn.10013d30(0, 0, 0, 0, 0);\n    fcn.10013dc1(0, 0, 0, 0, 0);\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 254
    },
    "10004220": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid fcn.10004220(uint32_t param_1, uint32_t param_2)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    \n    if (param_2 < 0x15555556) {\n        uVar2 = param_1;\n        if (param_2 * 0xc < 0x1000) {\ncode_r0x10004256:\n            fcn.1000ed48(uVar2);\n            return;\n        }\n        if ((param_1 & 0x1f) != 0) goto code_r0x10004265;\n        uVar2 = *(param_1 - 4);\n        if (param_1 <= uVar2) goto code_r0x1000426a;\n        if (3 < param_1 - uVar2) {\n            if (param_1 - uVar2 < 0x24) goto code_r0x10004256;\n            goto code_r0x10004274;\n        }\n    }\n    else {\n        fcn.10013da4();\ncode_r0x10004265:\n        fcn.10013da4();\ncode_r0x1000426a:\n        fcn.10013da4();\n    }\n    fcn.10013da4();\ncode_r0x10004274:\n    fcn.10013da4();\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 314
    },
    "100043e0": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.100043e0(int32_t **param_1, int32_t **param_2)\n\n{\n    int32_t **ppiVar1;\n    int32_t **ppiVar2;\n    int32_t *piVar3;\n    \n    ppiVar1 = param_1[1];\n    ppiVar2 = param_1;\n    if ((param_2 < ppiVar1) && (ppiVar2 = *param_1,  ppiVar2 <= param_2)) {\n        if (ppiVar1 == param_1[2]) {\n            fcn.100048f0(ppiVar2);\n        }\n        piVar3 = param_1[1];\n        if (piVar3 == NULL) goto code_r0x10004453;\n        param_2 = (param_2 - ppiVar2 & 0xfffffff0U) + *param_1;\n    }\n    else {\n        if (ppiVar1 == param_1[2]) {\n            fcn.100048f0(ppiVar2);\n        }\n        piVar3 = param_1[1];\n        if (piVar3 == NULL) goto code_r0x10004453;\n    }\n    *piVar3 = *param_2;\n    piVar3[2] = param_2[2];\n    piVar3[3] = param_2[3];\n    param_2[2] = NULL;\n    *param_2 = 0;\n    param_2[3] = NULL;\ncode_r0x10004453:\n    param_1[1] = param_1[1] + 4;\n    return;\n}\n",
        "token_count": 360
    },
    "10005130": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid fcn.10005130(uint32_t param_1, uint32_t param_2)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    \n    if (param_2 < 0x10000000) {\n        uVar2 = param_1;\n        if (param_2 << 4 < 0x1000) {\ncode_r0x10005164:\n            fcn.1000ed48(uVar2);\n            return;\n        }\n        if ((param_1 & 0x1f) != 0) goto code_r0x10005173;\n        uVar2 = *(param_1 - 4);\n        if (param_1 <= uVar2) goto code_r0x10005178;\n        if (3 < param_1 - uVar2) {\n            if (param_1 - uVar2 < 0x24) goto code_r0x10005164;\n            goto code_r0x10005182;\n        }\n    }\n    else {\n        fcn.10013da4();\ncode_r0x10005173:\n        fcn.10013da4();\ncode_r0x10005178:\n        fcn.10013da4();\n    }\n    fcn.10013da4();\ncode_r0x10005182:\n    fcn.10013da4();\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 311
    },
    "100064b0": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid fcn.100064b0(uint32_t param_1, uint32_t param_2)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    \n    if (param_2 < 0x20000000) {\n        uVar2 = param_1;\n        if (param_2 << 3 < 0x1000) {\ncode_r0x100064e3:\n            fcn.1000ed48(uVar2);\n            return;\n        }\n        if ((param_1 & 0x1f) != 0) goto code_r0x100064f2;\n        uVar2 = *(param_1 - 4);\n        if (param_1 <= uVar2) goto code_r0x100064f7;\n        if (3 < param_1 - uVar2) {\n            if (param_1 - uVar2 < 0x24) goto code_r0x100064e3;\n            goto code_r0x10006501;\n        }\n    }\n    else {\n        fcn.10013da4();\ncode_r0x100064f2:\n        fcn.10013da4();\ncode_r0x100064f7:\n        fcn.10013da4();\n    }\n    fcn.10013da4();\ncode_r0x10006501:\n    fcn.10013da4();\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 318
    },
    "10006740": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid fcn.10006740(uint32_t param_1, uint32_t param_2)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    \n    if (param_2 < 0x40000000) {\n        uVar2 = param_1;\n        if (param_2 << 2 < 0x1000) {\ncode_r0x10006773:\n            fcn.1000ed48(uVar2);\n            return;\n        }\n        if ((param_1 & 0x1f) != 0) goto code_r0x10006782;\n        uVar2 = *(param_1 - 4);\n        if (param_1 <= uVar2) goto code_r0x10006787;\n        if (3 < param_1 - uVar2) {\n            if (param_1 - uVar2 < 0x24) goto code_r0x10006773;\n            goto code_r0x10006791;\n        }\n    }\n    else {\n        fcn.10013da4();\ncode_r0x10006782:\n        fcn.10013da4();\ncode_r0x10006787:\n        fcn.10013da4();\n    }\n    fcn.10013da4();\ncode_r0x10006791:\n    fcn.10013da4();\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 311
    },
    "1000a140": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.1000a140(uint *arg_8h, int32_t arg_ch, int32_t arg_10h)\n\n{\n    uint *puVar1;\n    int32_t *in_FS_OFFSET;\n    uint in_stack_ffffff84;\n    uint var_48h;\n    uint32_t var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint32_t var_18h;\n    uint32_t var_14h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    uStack12 = 0x1003d8b7;\n    var_ch = *in_FS_OFFSET;\n    var_14h = *0x1004f06c ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    arg_8h[4] = 0;\n    arg_8h[5] = 0;\n    arg_8h[5] = 7;\n    arg_8h[4] = 0;\n    puVar1 = arg_8h;\n    if (7 < arg_8h[5]) {\n        puVar1 = *arg_8h;\n    }\n    *puVar1 = 0;\n    var_4h = 0;\n    if (arg_ch != arg_10h) {\n        var_44h = var_44h & 0xffffff00;\n        fcn.1000ccc0(arg_ch, arg_10h, var_44h, var_14h);\n        var_4h = 1;\n        fcn.100015b0(0, 0);\n        in_stack_ffffff84 = 0;\n        puVar1 = fcn.100079c0(&var_2ch, 0, 0);\n        if (arg_8h != puVar1) {\n            if (7 < arg_8h[5]) {\n                fcn.10004460(*arg_8h, arg_8h[5] + 1);\n            }\n            arg_8h[5] = 7;\n            arg_8h[4] = 0;\n            if (7 < arg_8h[5]) {\n                arg_8h = *arg_8h;\n            }\n            *arg_8h = 0;\n            fcn.10005240(puVar1);\n        }\n        if (7 < var_18h) {\n            fcn.10004460(var_2ch, var_18h + 1);\n        }\n        fcn.1000a6a0();\n    }\n    *in_FS_OFFSET = var_ch;\n    fcn.1000e9b7(in_stack_ffffff84);\n    return;\n}\n",
        "token_count": 624
    },
    "1000d3e0": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.1000d3e0(uint *arg_8h, int32_t arg_ch, int32_t arg_10h)\n\n{\n    uint *puVar1;\n    int32_t *in_FS_OFFSET;\n    uint in_stack_ffffff84;\n    uint var_48h;\n    uint32_t var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint32_t var_18h;\n    uint32_t var_14h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    uStack12 = 0x1003d8b7;\n    var_ch = *in_FS_OFFSET;\n    var_14h = *0x1004f06c ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    arg_8h[4] = 0;\n    arg_8h[5] = 0;\n    arg_8h[5] = 7;\n    arg_8h[4] = 0;\n    puVar1 = arg_8h;\n    if (7 < arg_8h[5]) {\n        puVar1 = *arg_8h;\n    }\n    *puVar1 = 0;\n    var_4h = 0;\n    if (arg_ch != arg_10h) {\n        var_44h = var_44h & 0xffffff00;\n        fcn.1000d630(arg_ch, arg_10h, var_44h, var_14h);\n        var_4h = 1;\n        fcn.100015b0(0, 0);\n        in_stack_ffffff84 = 0;\n        puVar1 = fcn.100079c0(&var_2ch, 0, 0);\n        if (arg_8h != puVar1) {\n            if (7 < arg_8h[5]) {\n                fcn.10004460(*arg_8h, arg_8h[5] + 1);\n            }\n            arg_8h[5] = 7;\n            arg_8h[4] = 0;\n            if (7 < arg_8h[5]) {\n                arg_8h = *arg_8h;\n            }\n            *arg_8h = 0;\n            fcn.10005240(puVar1);\n        }\n        if (7 < var_18h) {\n            fcn.10004460(var_2ch, var_18h + 1);\n        }\n        fcn.1000a6a0();\n    }\n    *in_FS_OFFSET = var_ch;\n    fcn.1000e9b7(in_stack_ffffff84);\n    return;\n}\n",
        "token_count": 626
    },
    "1000e420": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.1000e420(int32_t arg_8h)\n\n{\n    if ((arg_8h != 0) && (*(arg_8h + -8) == 0xdddd)) {\n        fcn.1001485e(arg_8h + -8);\n    }\n    return;\n}\n",
        "token_count": 70
    },
    "10007140": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.10007140(char16_t *arg_8h, uint noname_1, char16_t *arg_10h)\n\n{\n    char16_t *pcVar1;\n    uint32_t uVar2;\n    char16_t **in_ECX;\n    uint extraout_ECX;\n    int32_t *in_FS_OFFSET;\n    uint var_10h;\n    int32_t var_ch;\n    uint uStack12;\n    uint var_4h;\n    \n    var_4h = 0xffffffff;\n    uStack12 = 0x1003d733;\n    var_ch = *in_FS_OFFSET;\n    uVar2 = *0x1004f06c ^ &stack0xfffffffc;\n    *in_FS_OFFSET = &var_ch;\n    in_ECX[2] = arg_10h;\n    *in_ECX = L\"last kno\";\n    in_ECX[1] = L\"last kno\";\n    in_ECX[3] = NULL;\n    in_ECX[4] = NULL;\n    arg_10h = NULL;\n    in_ECX[5] = NULL;\n    in_ECX[6] = NULL;\n    in_ECX[7] = NULL;\n    fcn.100067a0(0, &arg_10h, uVar2);\n    in_ECX[8] = NULL;\n    pcVar1 = in_ECX[5];\n    if (in_ECX[6] - pcVar1 >> 2 != 0) {\n        in_ECX[6] = pcVar1;\n    }\n    in_ECX[8] = NULL;\n    var_4h = 1;\n    fcn.100088d0(arg_8h, extraout_ECX);\n    in_ECX[0xf] = arg_8h;\n    in_ECX[0x10] = 0x1;\n    in_ECX[0x14] = 0x8775dfb;\n    fcn.10008600();\n    *in_FS_OFFSET = var_ch;\n    return;\n}\n",
        "token_count": 446
    },
    "10022501": {
        "rules": [
            "create or open file"
        ],
        "decompiled_code": "\nvoid fcn.10022501(void)\n\n{\n    *0x1004f960 = (*_sym.imp.KERNEL32.dll_CreateFileW)(L\"CONOUT$\", 0x40000000, 3, 0, 3, 0, 0);\n    return;\n}\n",
        "token_count": 63
    },
    "10002f40": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.10002f40(code **param_1)\n\n{\n    uint *puVar1;\n    uint *puVar2;\n    uint *puVar3;\n    uint *puVar4;\n    \n    *param_1 = vtable.std::_Node_if.0;\n    puVar3 = param_1[6];\n    while (puVar3 != NULL) {\n        puVar1 = puVar3[6];\n        puVar3[6] = 0;\n        puVar2 = param_1[5];\n        puVar4 = puVar3;\n        while ((puVar3 = puVar1,  puVar4 != puVar2 && (puVar4 != NULL))) {\n            puVar3 = puVar4[3];\n            puVar4[3] = 0;\n            (***puVar4)(1);\n            puVar4 = puVar3;\n        }\n    }\n    *param_1 = vtable.std::_Node_base.0;\n    return;\n}\n",
        "token_count": 216
    }
}