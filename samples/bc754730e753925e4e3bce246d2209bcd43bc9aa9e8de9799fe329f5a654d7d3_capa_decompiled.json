{
    "null": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "1400019e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.1400019ec(int64_t arg1)\n\n{\n    int64_t *piVar1;\n    ushort uVar2;\n    int64_t iVar3;\n    ushort *puVar4;\n    code *pcVar5;\n    int32_t iVar6;\n    uchar *puVar7;\n    uchar auStack88 [8];\n    uchar auStack80 [40];\n    uint uStack40;\n    uint uStack36;\n    uint uStack32;\n    uint uStack28;\n    uint64_t uStack24;\n    \n    puVar7 = &stack0xffffffffffffffa8;\n    uStack24 = *0x140037f00 ^ &stack0xffffffffffffffa8;\n    iVar3 = *(arg1 + 8);\n    piVar1 = arg1 + 0x20;\n    uStack40 = *(iVar3 + -0x10);\n    uStack36 = *(iVar3 + -0xc);\n    uStack32 = *(iVar3 + -8);\n    uStack28 = *(iVar3 + -4);\n    if (*piVar1 != 0) {\n        pcVar5 = swi(0x29);\n        (*pcVar5)(5);\n        puVar7 = &stack0xffffffffffffffb0;\n    }\n    *(arg1 + 0x28) = 0;\n    *(arg1 + 0x30) = 0;\n    *(puVar7 + -8) = 0x140001a4e;\n    iVar6 = (*_sym.imp.ADVAPI32.dll_EventRegister)(puVar7 + 0x30, 0x140001960, arg1, piVar1);\n    if ((iVar6 == 0) && (*0x140039498 != 0)) {\n        puVar4 = *(arg1 + 8);\n        uVar2 = *puVar4;\n        iVar3 = *piVar1;\n        *(puVar7 + -8) = 0x140001a90;\n        (**0x140029a28)(iVar3, 2, puVar4, uVar2);\n    }\n    *(puVar7 + -8) = 0x140001a9f;\n    fcn.14001e9f0(*(puVar7 + 0x40) ^ puVar7);\n    return;\n}\n",
        "token_count": 499
    },
    "14000b4f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.14000b4f8(ulong *arg1, ulong Ptr, ulong arg3)\n\n{\n    ulong uVar1;\n    \n    if (*0x1400394bc == '\\0') {\n        *arg1 = 0x1400372a8;\n        arg1[1] = *0x1400372b0;\n        **0x1400372b0 = arg1;\n        *0x1400372b0 = arg1;\n        uVar1 = (*_sym.imp.KERNEL32.dll_EncodePointer)(Ptr);\n        arg1[2] = uVar1;\n        uVar1 = (*_sym.imp.KERNEL32.dll_EncodePointer)(arg3);\n        arg1[3] = uVar1;\n    }\n    return;\n}\n",
        "token_count": 169
    },
    "140006a9": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140006a94(ulong *hFile, ulong arg2)\n\n{\n    int32_t iVar1;\n    ulong in_R8;\n    \n    *hFile = 0x140029318;\n    hFile[1] = 0x140029300;\n    if ((((*(hFile + 0x21) == '\\0') && (*(hFile + 0x22) != '\\0')) &&\n        (iVar1 = (*_sym.imp.KERNEL32.dll_FlushFileBuffers)(),  iVar1 == 0)) &&\n       ((*0x140037208 != 0x140037208 && ((*(*0x140037208 + 0x1c) & 2) != 0)))) {\n        (*_sym.imp.KERNEL32.dll_GetLastError)();\n        arg2 = 0x12;\n        fcn.14000623c(*(*0x140037208 + 0x10), 0x12, in_R8, hFile[2]);\n    }\n    if (*(hFile + 4) != '\\0') {\n        iVar1 = (*_sym.imp.KERNEL32.dll_CloseHandle)();\n        if (iVar1 == 0) {\n            if ((*0x140037208 != 0x140037208) && ((*(*0x140037208 + 0x1c) & 2) != 0)) {\n                (*_sym.imp.KERNEL32.dll_GetLastError)();\n                fcn.1400064dc(*(*0x140037208 + 0x10), arg2, in_R8, hFile[3]);\n            }\n        }\n        else if ((*0x140037208 != 0x140037208) && ((*(*0x140037208 + 0x1c) & 8) != 0)) {\n            fcn.1400064a8(*(*0x140037208 + 0x10), 0x13, 0x14002f7d0, hFile[3]);\n        }\n    }\n    if (hFile[2] != 0) {\n        fcn.14001ea10(hFile[2]);\n    }\n    return;\n}\n",
        "token_count": 461
    },
    "1400074c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.1400074cc(ulong LoggerHandle, ulong noname_1, ulong MessageGuid, ulong arg4)\n\n{\n    char *pcVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    ulong uStackX32;\n    char *in_stack_00000030;\n    \n    if (in_stack_00000030 == NULL) {\n        iVar3 = 5;\n    }\n    else {\n        iVar2 = -1;\n        do {\n            iVar3 = iVar2;\n            iVar2 = iVar3 + 1;\n        } while (in_stack_00000030[iVar2] != '\\0');\n        iVar3 = iVar3 + 2;\n    }\n    pcVar1 = \"NULL\";\n    if (in_stack_00000030 != NULL) {\n        pcVar1 = in_stack_00000030;\n    }\n    uStackX32 = arg4;\n    (*_sym.imp.ADVAPI32.dll_TraceMessage)\n              (LoggerHandle, 0x2b, MessageGuid, noname_1, &uStackX32, 8, &stack0x00000028, 4, pcVar1, iVar3, 0);\n    return;\n}\n",
        "token_count": 260
    },
    "14000865": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint64_t * fcn.140008654(int64_t *arg1, char16_t *arg2)\n\n{\n    int64_t *arg3;\n    int32_t *arg3_00;\n    int64_t *arg3_01;\n    int64_t iVar1;\n    int32_t iVar2;\n    uint64_t uVar3;\n    bool bVar4;\n    uint64_t uStackX8;\n    ulong var_30h;\n    \n    iVar1 = *arg2;\n    *arg2 = 0;\n    *arg1 = iVar1;\n    arg1[1] = *(arg2 + 8);\n    *(arg2 + 8) = 0;\n    arg1[2] = *(arg2 + 0x10);\n    *(arg2 + 0x10) = 0;\n    arg1[3] = *(arg2 + 0x18);\n    *(arg2 + 0x18) = 0;\n    arg1[4] = *(arg2 + 0x20);\n    *(arg2 + 0x20) = 0;\n    *(arg1 + 5) = *(arg2 + 0x28);\n    *(arg1 + 0x29) = *(arg2 + 0x29);\n    *(arg1 + 0x2a) = *(arg2 + 0x2a);\n    *(arg1 + 0x2b) = *(arg2 + 0x2b);\n    uStackX8 = 0;\n    iVar2 = fcn.140009a60(&uStackX8, arg2, L\"Software\\\\Microsoft\\\\Windows Defender\\\\Features\");\n    uVar3 = uStackX8;\n    if (-1 < iVar2) {\n        uStackX8 = uStackX8 & 0xffffffff00000000;\n        arg2 = L\"SenseEnabled\";\n        iVar2 = fcn.140009da8(uVar3, L\"SenseEnabled\", &uStackX8);\n        if (-1 < iVar2) {\n            bVar4 = uStackX8 != 0;\n            if (uVar3 != 0) {\n                (*_sym.imp.ADVAPI32.dll_RegCloseKey)(uVar3);\n            }\n            goto code_r0x000140008727;\n        }\n    }\n    if (uVar3 != 0) {\n        (*_sym.imp.ADVAPI32.dll_RegCloseKey)(uVar3);\n    }\n    bVar4 = false;\ncode_r0x000140008727:\n    *(arg1 + 0x2c) = bVar4;\n    arg3 = arg1 + 7;\n    arg3_00 = arg1 + 0x34;\n    arg3_01 = arg1 + 6;\n    *arg3_01 = -1;\n    *arg3_00 = -1;\n    *arg3 = -1;\n    uStackX8 = 0;\n    iVar2 = fcn.140009a60(&uStackX8, arg2, L\"Software\\\\Microsoft\\\\Windows Defender\\\\MpEngine\");\n    uVar3 = uStackX8;\n    if (-1 < iVar2) {\n        fcn.140009da8(uStackX8, L\"MpEngineRing\", arg3_01);\n        fcn.140009da8(uVar3, L\"MpCampRing\", arg3_00);\n        arg2 = L\"MpSignatureRing\";\n        fcn.140009da8(uVar3, L\"MpSignatureRing\", arg3);\n    }\n    if (((*arg3_01 == -1) && (*arg3_00 == -1)) && (*arg3 == -1)) {\n        if (uVar3 != 0) {\n            (*_sym.imp.ADVAPI32.dll_RegCloseKey)(uVar3);\n            uStackX8 = 0;\n        }\n        iVar2 = fcn.140009a60(&uStackX8, arg2, L\"Software\\\\Microsoft\\\\Microsoft Antimalware\\\\MpEngine\");\n        uVar3 = uStackX8;\n        if (-1 < iVar2) {\n            fcn.140009da8(uStackX8, L\"MpEngineRing\", arg3_01);\n            fcn.140009da8(uVar3, L\"MpCampRing\", arg3_00);\n            fcn.140009da8(uVar3, L\"MpSignatureRing\", arg3);\n        }\n    }\n    if (uVar3 != 0) {\n        (*_sym.imp.ADVAPI32.dll_RegCloseKey)(uVar3);\n    }\n    if (*arg1 == 0) {\n        fcn.1400019ec(0x140037270);\n        fcn.1400019ec(0x140037238);\n    }\n    else {\n        (**0x140029a28)(*arg1, 0x140037270);\n        (**0x140029a28)(*arg1, 0x140037238);\n    }\n    return arg1;\n}\n",
        "token_count": 1096
    },
    "1400089f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.1400089f0(ulong LoggerHandle, ulong arg2, ulong noname_2, char *arg4)\n\n{\n    char *pcVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    \n    if (arg4 == NULL) {\n        iVar3 = 5;\n    }\n    else {\n        iVar2 = -1;\n        do {\n            iVar3 = iVar2;\n            iVar2 = iVar3 + 1;\n        } while (arg4[iVar2] != '\\0');\n        iVar3 = iVar3 + 2;\n    }\n    pcVar1 = \"NULL\";\n    if (arg4 != NULL) {\n        pcVar1 = arg4;\n    }\n    (*_sym.imp.ADVAPI32.dll_TraceMessage)(LoggerHandle, 0x2b, 0x14002fa70, 10, pcVar1, iVar3, &stack0x00000028, 4, 0);\n    return;\n}\n",
        "token_count": 212
    },
    "140008a6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t fcn.140008a64(ulong noname_0, ulong arg2, ulong arg3)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int64_t iVar4;\n    int64_t iVar5;\n    ulong uVar6;\n    ulong pPolicyPara;\n    ulong var_38h;\n    ulong pszPolicyOID;\n    ulong pPolicyStatus;\n    uint uStack32;\n    uint uStack28;\n    ulong var_bp_10h;\n    \n    var_38h = 0;\n    pPolicyStatus._0_4_ = 0;\n    pPolicyStatus._4_4_ = 0;\n    uStack32 = 0;\n    uStack28 = 0;\n    var_bp_10h = 0;\n    iVar4 = (*_sym.imp.WINTRUST.dll_WTHelperProvDataFromStateData)();\n    if (iVar4 != 0) {\n        arg3 = 0;\n        arg2 = 0;\n        iVar5 = (*_sym.imp.WINTRUST.dll_WTHelperGetProvSignerFromChain)(iVar4, 0, 0, 0);\n        if (iVar5 != 0) {\n            uVar6 = *(iVar5 + 0x38);\n            iVar4 = 0;\n            _pszPolicyOID = *0x1400320c0;\n            pPolicyPara._0_4_ = 0x10;\n            pPolicyPara._4_4_ = 0xcf00;\n            pPolicyStatus._0_4_ = 0x18;\n            do {\n                iVar2 = (*_sym.imp.CRYPT32.dll_CertVerifyCertificateChainPolicy)\n                                  ((&pszPolicyOID)[iVar4], uVar6, &pPolicyPara);\n                if (iVar2 == 0) {\n                    uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                    if ((*0x140037208 != 0x140037208) && ((*(*0x140037208 + 0x1c) & 1) != 0)) {\n                        uVar6 = 0xb;\ncode_r0x000140008b9e:\n                        fcn.140004708(*(*0x140037208 + 0x10), uVar6, 0x14002fa70, uVar3);\n                    }\n                    break;\n                }\n                uVar3 = pPolicyStatus._4_4_;\n                if (pPolicyStatus._4_4_ == 0) break;\n                if ((&pszPolicyOID)[iVar4] == 7) {\n                    pPolicyPara._4_4_ = 0x20f00;\n                    iVar2 = (*_sym.imp.CRYPT32.dll_CertVerifyCertificateChainPolicy)(7, uVar6, &pPolicyPara);\n                    if (iVar2 == 0) {\n                        uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                        if ((*0x140037208 != 0x140037208) && ((*(*0x140037208 + 0x1c) & 1) != 0)) {\n                            uVar6 = 0xc;\n                            goto code_r0x000140008b9e;\n                        }\n                        break;\n                    }\n                    uVar3 = pPolicyStatus._4_4_;\n                    if (pPolicyStatus._4_4_ == 0) break;\n                }\n                iVar4 = iVar4 + 1;\n                uVar3 = pPolicyStatus._4_4_;\n            } while (iVar4 == 0);\n            goto code_r0x000140008bf6;\n        }\n    }\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n    if ((*0x140037208 != 0x140037208) && ((*(*0x140037208 + 0x1c) & 1) != 0)) {\n        uVar6 = 0x14002fa50;\n        if (iVar4 == 0) {\n            uVar6 = 0x14002fa30;\n        }\n        fcn.1400089f0(*(*0x140037208 + 0x10), arg2, arg3, uVar6);\n    }\ncode_r0x000140008bf6:\n    uVar1 = uVar3 & 0xffff | 0x80070000;\n    if (uVar3 < 1) {\n        uVar1 = uVar3;\n    }\n    return uVar1;\n}\n",
        "token_count": 983
    },
    "140008fd": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140008fd0(ulong LoggerHandle, ulong arg2, ulong noname_2, char *arg4)\n\n{\n    char *pcVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    \n    if (arg4 == NULL) {\n        iVar3 = 5;\n    }\n    else {\n        iVar2 = -1;\n        do {\n            iVar3 = iVar2;\n            iVar2 = iVar3 + 1;\n        } while (arg4[iVar2] != '\\0');\n        iVar3 = iVar3 + 2;\n    }\n    pcVar1 = \"NULL\";\n    if (arg4 != NULL) {\n        pcVar1 = arg4;\n    }\n    (*_sym.imp.ADVAPI32.dll_TraceMessage)(LoggerHandle, 0x2b, 0x14002fae8, 0x1d, pcVar1, iVar3, &stack0x00000028, 4, 0);\n    return;\n}\n",
        "token_count": 215
    },
    "14000904": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nint32_t fcn.140009044(int64_t *arg1, ulong lpFileName, ulong dwDesiredAccess, ulong dwShareMode)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    ulong noname_1;\n    \n    *arg1 = -1;\n    iVar2 = (*_sym.imp.KERNEL32.dll_CreateFileW)(lpFileName, dwDesiredAccess, dwShareMode, 0);\n    *arg1 = iVar2;\n    if (iVar2 == -1) {\n        iVar1 = fcn.14000a4bc();\n        if (iVar1 + 0x7ff8fffeU < 2) {\n            if (*0x140037208 == 0x140037208) {\n                return iVar1;\n            }\n            if ((*(*0x140037208 + 0x1c) & 4) == 0) {\n                return iVar1;\n            }\n            noname_1 = 0xf;\n        }\n        else {\n            if (*0x140037208 == 0x140037208) {\n                return iVar1;\n            }\n            if ((*(*0x140037208 + 0x1c) & 1) == 0) {\n                return iVar1;\n            }\n            noname_1 = 0x10;\n        }\n        fcn.140001b80(*(*0x140037208 + 0x10), noname_1, 0x14002fae8, lpFileName);\n    }\n    else {\n        iVar1 = 0;\n    }\n    return iVar1;\n}\n",
        "token_count": 343
    },
    "1400092b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nint32_t fcn.1400092b4(int32_t *arg1, ulong lpFileName)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = (*_sym.imp.KERNEL32.dll_GetFileAttributesW)();\n    if (iVar1 == -1) {\n        iVar1 = fcn.14000a4bc();\n        if (((1 < iVar1 + 0x7ff8fffeU) && (*0x140037208 != 0x140037208)) && ((*(*0x140037208 + 0x1c) & 1) != 0)) {\n            fcn.140001b80(*(*0x140037208 + 0x10), 0x1e, 0x14002fae8, lpFileName);\n        }\n    }\n    else {\n        *arg1 = iVar1;\n        iVar1 = 0;\n    }\n    return iVar1;\n}\n",
        "token_count": 198
    },
    "140009a6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nuint32_t fcn.140009a60(int64_t *arg1, ulong arg2, ulong lpSubKey)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    int64_t iStackX16;\n    \n    *arg1 = 0;\n    iStackX16 = 0;\n    uVar1 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyExW)(0xffffffff80000002, lpSubKey, 0, 0x20019, &iStackX16);\n    if (uVar1 == 2) {\n        if ((*0x140037208 != 0x140037208) && ((*(*0x140037208 + 0x1c) & 4) != 0)) {\n            fcn.140008de8(*(*0x140037208 + 0x10), 10, 0x14002fb18, lpSubKey);\n        }\n        if (iStackX16 != 0) {\n            (*_sym.imp.ADVAPI32.dll_RegCloseKey)();\n        }\n        uVar1 = 0x80070002;\n    }\n    else {\n        if (uVar1 != 0) {\n            if ((*0x140037208 != 0x140037208) && ((*(*0x140037208 + 0x1c) & 1) != 0)) {\n                fcn.140008e48(*(*0x140037208 + 0x10), 0xb, 0x14002fb18, lpSubKey);\n            }\n            uVar2 = uVar1 & 0xffff | 0x80070000;\n            if (uVar1 < 1) {\n                uVar2 = uVar1;\n            }\n            if (uVar2 < 0) {\n                if (iStackX16 == 0) {\n                    return uVar2;\n                }\n                (*_sym.imp.ADVAPI32.dll_RegCloseKey)();\n                return uVar2;\n            }\n        }\n        if (iStackX16 == 0) {\n            uVar1 = 0x8000ffff;\n        }\n        else {\n            *arg1 = iStackX16;\n            uVar1 = 0;\n        }\n    }\n    return uVar1;\n}\n",
        "token_count": 495
    },
    "140009b7": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint fcn.140009b78(ulong arg1, uint64_t arg2, ulong arg3, ulong *arg4)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int64_t in_stack_00000028;\n    \n    if (in_stack_00000028 == 0) {\ncode_r0x000140009b9b:\n        uVar3 = 0;\n    }\n    else {\n        if (arg3 - 1 < 2) {\n            iVar1 = fcn.14000a230(arg2 >> 1, in_stack_00000028, arg4);\ncode_r0x000140009bd8:\n            if (iVar1 == 0) {\n                return 0;\n            }\n            if (iVar1 == -0x7ff8ff16) {\n                return 0x800700ea;\n            }\n            iVar2 = 0;\n            if (iVar1 == -0x7ff8ec61) {\n                iVar2 = iVar1;\n            }\n            if (iVar2 != -0x7ff8ec61) goto code_r0x000140009bf7;\n        }\n        else {\n            if (arg3 == 7) {\n                iVar1 = fcn.14000a330(arg2 >> 1, in_stack_00000028, arg4);\n                goto code_r0x000140009bd8;\n            }\ncode_r0x000140009bf7:\n            iVar1 = fcn.140009f38(arg3, *arg4, in_stack_00000028);\n            if (iVar1 != 0) goto code_r0x000140009b9b;\n        }\n        if ((*0x140037208 != 0x140037208) && ((*(*0x140037208 + 0x1c) & 1) != 0)) {\n            fcn.140008de8(*(*0x140037208 + 0x10), 0x18, 0x14002fb18, arg1);\n        }\n        uVar3 = 0x8007139f;\n    }\n    return uVar3;\n}\n",
        "token_count": 467
    },
    "140009f3": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nulong fcn.140009f38(ulong arg1, uint64_t arg2, int64_t arg3)\n\n{\n    char cVar1;\n    int64_t iVar2;\n    ulong noname_1;\n    int64_t iVar3;\n    \n    if ((arg2 & 0xffffffff) == arg2) {\n        if (arg3 == 0) {\n            if (arg1 == 3) {\n                if (arg2 == 0) {\n                    return 1;\n                }\n                if (*0x140037208 == 0x140037208) {\n                    return 0;\n                }\n                if ((*(*0x140037208 + 0x1c) & 1) == 0) {\n                    return 0;\n                }\n                noname_1 = 0x44;\n            }\n            else {\n                if (*0x140037208 == 0x140037208) {\n                    return 0;\n                }\n                if ((*(*0x140037208 + 0x1c) & 1) == 0) {\n                    return 0;\n                }\n                noname_1 = 0x40;\n            }\n        }\n        else if ((arg1 == 1) || (arg1 == 2)) {\n            cVar1 = fcn.140009e84(arg2, arg3);\n            if (cVar1 == '\\0') {\n                if (*0x140037208 == 0x140037208) {\n                    return 0;\n                }\n                if ((*(*0x140037208 + 0x1c) & 1) == 0) {\n                    return 0;\n                }\n                noname_1 = 0x42;\n            }\n            else {\n                if (arg2 >> 1 == 0) {\n                    return 0;\n                }\n                if (*(arg3 + -2 + (arg2 & 0xfffffffffffffffe)) == 0) {\n                    iVar2 = -1;\n                    do {\n                        iVar3 = iVar2;\n                        iVar2 = iVar3 + 1;\n                    } while (*(arg3 + iVar2 * 2) != 0);\n                    if (iVar3 + 2U == arg2 >> 1) {\n                        return 1;\n                    }\n                    if (*0x140037208 == 0x140037208) {\n                        return 0;\n                    }\n                    if ((*(*0x140037208 + 0x1c) & 1) == 0) {\n                        return 0;\n                    }\n                    noname_1 = 0x3c;\n                }\n                else {\n                    if (*0x140037208 == 0x140037208) {\n                        return 0;\n                    }\n                    if ((*(*0x140037208 + 0x1c) & 1) == 0) {\n                        return 0;\n                    }\n                    noname_1 = 0x3b;\n                }\n            }\n        }\n        else {\n            if (arg1 == 3) {\n                return 1;\n            }\n            if ((arg1 == 4) || (arg1 == 5)) {\n                if (arg2 == 4) {\n                    return 1;\n                }\n                if (*0x140037208 == 0x140037208) {\n                    return 0;\n                }\n                if ((*(*0x140037208 + 0x1c) & 1) == 0) {\n                    return 0;\n                }\n                fcn.140009a2c(*(*0x140037208 + 0x10), 0x41, 0x14002fb18, arg2);\n                return 0;\n            }\n            if (arg1 != 7) {\n                return 1;\n            }\n            cVar1 = fcn.140009e84(arg2, arg3);\n            if (cVar1 == '\\0') {\n                if (*0x140037208 == 0x140037208) {\n                    return 0;\n                }\n                if ((*(*0x140037208 + 0x1c) & 1) == 0) {\n                    return 0;\n                }\n                noname_1 = 0x43;\n            }\n            else {\n                if (arg2 >> 1 == 0) {\n                    return 0;\n                }\n                if (*(arg3 + -2 + (arg2 & 0xfffffffffffffffe)) == 0) {\n                    if (arg2 >> 1 == 1) {\n                        return 1;\n                    }\n                    if (*(arg3 + -4 + (arg2 & 0xfffffffffffffffe)) == 0) {\n                        return 1;\n                    }\n                    if (*0x140037208 == 0x140037208) {\n                        return 0;\n                    }\n                    if ((*(*0x140037208 + 0x1c) & 1) == 0) {\n                        return 0;\n                    }\n                    noname_1 = 0x3e;\n                }\n                else {\n                    if (*0x140037208 == 0x140037208) {\n                        return 0;\n                    }\n                    if ((*(*0x140037208 + 0x1c) & 1) == 0) {\n                        return 0;\n                    }\n                    noname_1 = 0x3d;\n                }\n            }\n        }\n    }\n    else {\n        if (*0x140037208 == 0x140037208) {\n            return 0;\n        }\n        if ((*(*0x140037208 + 0x1c) & 1) == 0) {\n            return 0;\n        }\n        noname_1 = 0x3f;\n    }\n    fcn.140001b60(*(*0x140037208 + 0x10), noname_1, 0x14002fb18);\n    return 0;\n}\n",
        "token_count": 1260
    },
    "14000a1c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.14000a1c8(int64_t arg1, int64_t *arg2)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = -1;\n    do {\n        iVar1 = iVar1 + 1;\n    } while (*(arg1 + iVar1 * 2) != 0);\n    iVar1 = iVar1 * 2 + 2;\n    if (*arg2 != iVar1) {\n        if ((*0x140037208 != 0x140037208) && ((*(*0x140037208 + 0x1c) & 1) != 0)) {\n            fcn.140001b60(*(*0x140037208 + 0x10), 0x45, 0x14002fb18);\n        }\n        *arg2 = iVar1;\n    }\n    return 0;\n}\n",
        "token_count": 185
    },
    "14000a33": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nulong fcn.14000a330(uint64_t arg1, int16_t *arg2, uint64_t *arg3)\n\n{\n    uint64_t arg4;\n    int64_t iVar1;\n    ulong uVar2;\n    uint64_t uVar3;\n    \n    arg4 = *arg3;\n    iVar1 = *0x140037208;\n    if ((arg4 & 1) != 0) {\n        if ((*0x140037208 != 0x140037208) && ((*(*0x140037208 + 0x1c) & 1) != 0)) {\n            fcn.140009a2c(*(*0x140037208 + 0x10), 0x49, 0x14002fb18, arg4);\n        }\n        iVar1 = *0x140037208;\n        *arg3 = *arg3 - 1;\n        arg4 = *arg3;\n    }\n    uVar3 = arg4 >> 1;\n    if (uVar3 < 2) {\n        if (uVar3 == 1) {\n            if (*arg2 != 0) {\ncode_r0x00014000a404:\n                if (*(arg2 + ((arg4 & 0xfffffffffffffffe) - 2)) != 0) goto code_r0x00014000a445;\n                if (arg1 <= uVar3) {\n                    *arg3 = arg4 + 2;\n                    return 0x800700ea;\n                }\n                if ((iVar1 != 0x140037208) && ((*(iVar1 + 0x1c) & 1) != 0)) {\n                    fcn.140001b60(*(iVar1 + 0x10), 0x4a, 0x14002fb18);\n                }\n                *arg3 = *arg3 + 2;\n                *(arg2 + (arg4 & 0xfffffffffffffffe)) = 0;\n            }\n        }\n        else {\n            if (uVar3 != 0) goto code_r0x00014000a404;\n            *arg3 = 2;\n            if (arg1 == 0) {\n                return 0x800700ea;\n            }\n            *arg2 = 0;\n        }\ncode_r0x00014000a3da:\n        uVar2 = 0;\n    }\n    else {\n        if (*(arg2 + ((arg4 & 0xfffffffffffffffe) - 4)) != 0) goto code_r0x00014000a404;\n        if (*(arg2 + ((arg4 & 0xfffffffffffffffe) - 2)) == 0) {\n            if (uVar3 == 2) {\n                *arg3 = arg4 - 2;\n            }\n            goto code_r0x00014000a3da;\n        }\ncode_r0x00014000a445:\n        uVar2 = 0;\n        if (uVar3 + 1 < arg1) {\n            if ((iVar1 != 0x140037208) && ((*(iVar1 + 0x1c) & 1) != 0)) {\n                fcn.140001b60(*(iVar1 + 0x10), 0x4b, 0x14002fb18);\n            }\n            *(arg2 + (arg4 & 0xfffffffffffffffe)) = 0;\n        }\n        else {\n            if ((iVar1 != 0x140037208) && ((*(iVar1 + 0x1c) & 2) != 0)) {\n                fcn.140001b60(*(iVar1 + 0x10), 0x4c, 0x14002fb18);\n            }\n            uVar2 = 0x800700ea;\n        }\n        *arg3 = *arg3 + 4;\n    }\n    return uVar2;\n}\n",
        "token_count": 839
    },
    "14000aaf": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t fcn.14000aaf4(uchar *arg1, uint64_t arg2)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    int64_t iStackX8;\n    uint64_t uStackX16;\n    ulong in_stack_ffffffffffffffc0;\n    ulong in_stack_ffffffffffffffc8;\n    \n    iStackX8 = 0;\n    *arg1 = 0;\n    uStackX16 = arg2;\n    uVar1 = fcn.14000a9fc(&iStackX8, 2, 0x20, 0x220, 0, in_stack_ffffffffffffffc0, in_stack_ffffffffffffffc8);\n    if (-1 < uVar1) {\n        uStackX16 = uStackX16 & 0xffffffff00000000;\n        *arg1 = 0;\n        iVar2 = (*_sym.imp.ADVAPI32.dll_CheckTokenMembership)(0, iStackX8, &uStackX16);\n        if (iVar2 == 0) {\n            uVar1 = fcn.14000a4bc();\n            if ((*0x140037208 != 0x140037208) && ((*(*0x140037208 + 0x1c) & 1) != 0)) {\n                fcn.140008f54(*(*0x140037208 + 0x10), 0x1a, 0x14002fbb8, uVar1);\n            }\n        }\n        else {\n            uVar1 = 0;\n            *arg1 = uStackX16 != 0;\n        }\n    }\n    if (iStackX8 != 0) {\n        fcn.140003560(iStackX8);\n    }\n    return uVar1;\n}\n",
        "token_count": 401
    },
    "14000ac8": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.14000ac8c(uint64_t param_1, ulong param_2)\n\n{\n    ulong arg1;\n    uint64_t uVar1;\n    char cVar2;\n    uint8_t uVar3;\n    char *pcVar4;\n    \n    arg1 = *0x1400392c8;\n    uVar3 = param_1 ^ 1;\n    uVar1 = param_1 & 0xff;\n    if (uVar3 != 0) {\n        if (uVar3 != 1) {\n            return;\n        }\n        if ((*0x1400394c0 & (param_1 ^ 1)) == 0) {\n            fcn.14000c234(param_1 ^ 1, param_2);\n            *0x140037f40 = *0x140037f40 & 0xffffffdf | 0x10;\n            LOCK();\n            *0x1400394c0 = *0x1400394c0 | 1;\n            pcVar4 = \"v._master_2020-12-14T09:20:49-08:00_5b3acb1_2020-12-22T16:20:51\";\n            cVar2 = str.v._master_2020_12_14T09:20:49_08:00_5b3acb1_2020_12_22T16:20:51[0];\n            while (cVar2 != '\\0') {\n                pcVar4 = pcVar4 + 1;\n                cVar2 = *pcVar4;\n            }\n            *0x1400394c4 = ~*0x140037f40;\n        }\n        fcn.14000af64(arg1);\n        uVar1 = *0x140039340;\n    }\n    *0x140039340 = uVar1;\n    *0x140039330 = arg1;\n    *0x140039338 = param_1 & 0xff;\n    return;\n}\n",
        "token_count": 436
    },
    "14000ad3": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t fcn.14000ad30(void)\n\n{\n    int32_t iVar1;\n    \n    *0x1400392c8 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n    fcn.14000ac8c(0);\n    iVar1 = fcn.14000b0ac();\n    if (-1 < iVar1) {\n        (*_sym.imp.KERNEL32.dll_HeapSetInformation)(0, 1, 0);\n        iVar1 = fcn.14000b9ac();\n        if (-1 < iVar1) {\n            return 0;\n        }\n        if (*0x1400394b8 != 0) {\n            fcn.14000b04c();\n        }\n    }\n    fcn.14000ac8c(1);\n    return iVar1;\n}\n",
        "token_count": 179
    },
    "14000af6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.14000af64(int16_t *arg1)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    int32_t *piVar5;\n    uint64_t uVar6;\n    int64_t iVar7;\n    \n    if ((((arg1 == 0) && (*arg1 == 0x5a4d)) && ((*(arg1 + 0x1e) & 3) == 0)) &&\n       ((piVar5 = *(arg1 + 0x1e) + arg1,  *piVar5 == 0x4550 && (5 < piVar5[0x21])))) {\n        uVar1 = piVar5[0x14];\n        uVar2 = piVar5[0x2e];\n        if ((uVar2 - 1 < uVar1 - 1) && (uVar3 = piVar5[0x2f],  uVar3 <= uVar1 - uVar2)) {\n            uVar6 = uVar3 / 7;\n            uVar6 = (uVar3 - uVar6 >> 1) + uVar6 >> 4;\n            do {\n                if (uVar6 == 0) {\n                    return;\n                }\n                uVar6 = uVar6 - 1;\n                iVar7 = arg1 + uVar6 * 0x1c + uVar2;\n            } while (((*(iVar7 + 0xc) != 2) || (uVar1 <= *(iVar7 + 0x14))) ||\n                    (uVar3 = uVar1 - *(iVar7 + 0x14),  uVar3 <= *(iVar7 + 0x10) && *(iVar7 + 0x10) != uVar3));\n            iVar4 = (*_sym.imp.KERNEL32.dll_VirtualLock)(iVar7, 0x1c);\n            if (iVar4 != 0) {\n                (*_sym.imp.KERNEL32.dll_VirtualLock)(*(iVar7 + 0x14) + arg1, *(iVar7 + 0x10));\n            }\n        }\n    }\n    return;\n}\n",
        "token_count": 483
    },
    "14000b0a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t fcn.14000b0ac(void)\n\n{\n    int32_t iVar1;\n    int64_t aiStackX8 [4];\n    \n    if (*0x1400394b8 == 0) {\n        iVar1 = fcn.14000b894();\n        if (-1 < iVar1) {\n            aiStackX8[0] = 0;\n            iVar1 = fcn.14000c1c8(aiStackX8);\n            if (iVar1 < 0) {\n                if (aiStackX8[0] != 0) {\n                    (**0x140029a28)(aiStackX8[0], 1);\n                }\n            }\n            else {\n                *0x1400394b8 = *0x1400394b8 | 2;\n                *0x140039348 = aiStackX8[0];\n                iVar1 = fcn.14000b558();\n                if (-1 < iVar1) {\n                    *0x1400394b8 = *0x1400394b8 | 4;\n                    return 0;\n                }\n            }\n        }\n    }\n    else {\n        iVar1 = -0x7ff8ffa9;\n    }\n    fcn.14000b04c();\n    return iVar1;\n}\n",
        "token_count": 278
    },
    "14000b66": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.14000b660(void)\n\n{\n    int64_t *piVar1;\n    \n    if (*0x1400394bc != '\\0') {\n        while (piVar1 = *0x1400372a8,  *0x1400372a8 != 0x1400372a8) {\n            *0x1400372a8 = **0x1400372a8;\n            (*0x1400372a8)[1] = 0x1400372a8;\n            if (piVar1 == NULL) break;\n            (*_sym.imp.KERNEL32.dll_DecodePointer)(piVar1[3]);\n            (**0x140029a28)(piVar1);\n        }\n        *0x1400394bc = '\\0';\n    }\n    return;\n}\n",
        "token_count": 176
    },
    "14000b9a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint64_t fcn.14000b9ac(ulong param_1, ulong param_2, ulong param_3, ulong param_4)\n\n{\n    int64_t iVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint64_t arg4;\n    int64_t iStackX8;\n    uchar auStack24 [16];\n    \n    if (auStack24 < 0x123) {\n        fcn.14000a4e8(0x14002ffb0, *0x1400320b0, param_3, param_4);\n    }\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(0x1400392d0);\n    iVar1 = *0x140039320 + 1;\n    if (iVar1 == 0) {\n        (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(0x1400392d0);\n        arg4 = 0x80070057;\ncode_r0x00014000ba8a:\n        if ((*0x140037208 != 0x140037208) && ((*(*0x140037208 + 0x1c) & 1) != 0)) {\n            fcn.140008f54(*(*0x140037208 + 0x10), 10, 0x14002ffb8, arg4);\n        }\n    }\n    else {\n        if ((*0x140039320 == 0) || (*0x140039320 = iVar1,  *0x140039328 == 0)) {\n            (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(0x1400392d0);\n            iStackX8 = 0;\n            uVar4 = fcn.14000be28(&iStackX8);\n            arg4 = uVar4;\n            (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(0x1400392d0);\n            if ((*0x140039320 == 0) ||\n               ((iVar1 = *0x140039320 + 1,  iVar1 == 0 || (*0x140039320 = iVar1,  *0x140039328 == 0)))) {\n                if (uVar4 < 0) {\n                    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(0x1400392d0);\n                    goto code_r0x00014000ba8a;\n                }\n                if (*0x140039320 == 0) {\n                    *0x140039328 = iStackX8;\n                    iStackX8 = 0;\n                    *0x140039320 = 1;\n                }\n            }\n            iVar1 = iStackX8;\n            (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(0x1400392d0);\n            if (iVar1 != 0) {\n                LOCK();\n                piVar2 = iVar1 + 8;\n                iVar3 = *piVar2;\n                *piVar2 = *piVar2 + -1;\n                if (iVar3 < 2) {\n                    (**0x140029a28)(iStackX8, 1);\n                }\n            }\n        }\n        else {\n            (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(0x1400392d0);\n        }\n        if ((*0x140037208 != 0x140037208) && ((*(*0x140037208 + 0x1c) & 4) != 0)) {\n            fcn.140001b60(*(*0x140037208 + 0x10), 0xb, 0x14002ffb8);\n        }\n        arg4 = 0;\n    }\n    return arg4;\n}\n",
        "token_count": 800
    },
    "14000bc1": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.14000bc14(int64_t *arg1)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    ulong uVar5;\n    int64_t var_30h;\n    int64_t var_28h;\n    int64_t var_20h;\n    int64_t var_18h;\n    \n    if (*arg1 == 0) {\n        fcn.14000bca8(&var_30h, 1);\n        if (var_30h == 0) {\n            fcn.14000bb64(&var_30h);\n            uVar5 = 0x8007000e;\n        }\n        else {\n            iVar1 = *arg1;\n            *arg1 = var_30h;\n            iVar2 = arg1[1];\n            iVar3 = arg1[2];\n            arg1[1] = var_28h;\n            iVar4 = arg1[3];\n            arg1[2] = var_20h;\n            arg1[3] = var_18h;\n            var_30h = iVar1;\n            var_28h = iVar2;\n            var_20h = iVar3;\n            var_18h = iVar4;\n            fcn.14000bb64(&var_30h);\n            uVar5 = 0;\n        }\n    }\n    else {\n        uVar5 = 0x80070057;\n    }\n    return uVar5;\n}\n",
        "token_count": 327
    },
    "14000bca": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint64_t * fcn.14000bca8(int64_t *arg1, uint64_t arg2)\n\n{\n    uint64_t uVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    uint64_t uVar4;\n    uint64_t *puVar5;\n    \n    *arg1 = 0;\n    puVar5 = 0x14002fbd0;\n    uVar1 = 0x69;\n    do {\n        uVar4 = uVar1 >> 1;\n        if (puVar5[uVar4] < arg2) {\n            puVar5 = puVar5 + uVar4 + 1;\n            uVar4 = uVar1 + (-1 - uVar4);\n        }\n        uVar1 = uVar4;\n    } while (0 < uVar4);\n    uVar1 = 0xfffffffb;\n    if (puVar5 != 0x14002ff18) {\n        uVar1 = *puVar5;\n    }\n    arg1[2] = 0;\n    arg1[3] = 0;\n    arg1[1] = uVar1;\n    if (arg2 != 0) {\n        if (uVar1 < 0xaaaaaaaaaaaaaab) {\n            fcn.14000abc4(arg1, uVar1 * 0x18);\n        }\n        if (*arg1 != 0) {\n            uVar1 = 0;\n            if (arg1[1] == 0) {\n                return arg1;\n            }\n            iVar3 = 0;\n            do {\n                iVar2 = *arg1;\n                uVar1 = uVar1 + 1;\n                *(iVar3 + iVar2) = 0;\n                iVar2 = iVar2 + 8 + iVar3;\n                iVar3 = iVar3 + 0x18;\n                *(iVar2 + 8) = iVar2;\n                *iVar2 = iVar2;\n            } while (uVar1 < arg1[1]);\n            return arg1;\n        }\n    }\n    arg1[1] = 0;\n    return arg1;\n}\n",
        "token_count": 461
    },
    "14000c69": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Possible PIC construction at 0x00014000c748: Changing call to branch\n// WARNING: Removing unreachable block (ram,0x00014000c74d)\n\nint32_t fcn.14000c69c(uint16_t *arg1, uint16_t *arg2)\n\n{\n    uint16_t uVar1;\n    uint16_t uVar2;\n    uint *puVar3;\n    uint32_t uVar4;\n    int64_t iVar5;\n    uint64_t uVar6;\n    int32_t iVar7;\n    uint32_t uVar8;\n    int64_t iStack56;\n    int64_t iStack48;\n    char cStack32;\n    \n    if (*0x140037f80 != 0) {\n        if ((arg1 == NULL) || (arg2 == NULL)) {\n            puVar3 = fcn.14000d3d8();\n            *puVar3 = 0x16;\n            fcn.14000cdc0();\n            iVar7 = 0x7fffffff;\n        }\n        else {\n            fcn.14000c5c0(&stack0xffffffffffffffc8, 0);\n            iVar5 = iStack48;\n            if (*(iStack48 + 0x138) == 0) goto code_r0x00014000c662;\n            do {\n                uVar1 = *arg1;\n                arg1 = arg1 + 1;\n                if (uVar1 < 0x100) {\n                    uVar6 = uVar1;\n                    if ((*(\n                          L\"         (((((                  H\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x10\\x10\\x10\\x10\\x10\\x10\\x10\u0181\u0181\u0181\u0181\u0181\u0181\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\\x10\\x10\\x10\\x10\\x10\\x10\u0182\u0182\u0182\u0182\u0182\u0182\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\\x10\\x10\\x10\\x10      (                          \\b\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\u0112\\x10\\x100\\x10\\x10\\x10\\x10\\x14\\x14\\x10\u0112\\x10\\x10\\x10\\x14\u0112\\x10\\x10\\x10\\x10\\x10\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\\x10\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\\x10\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0101\"\n                          + uVar6) & 1) != 0) {\n                        uVar6 = *(uVar6 + *(iVar5 + 0x110));\n                    }\n                    uVar1 = uVar6;\n                }\n                else {\n                    uVar1 = fcn.140011be0(uVar1, &stack0xffffffffffffffd0);\n                    iVar5 = iStack48;\n                }\n                uVar2 = *arg2;\n                arg2 = arg2 + 1;\n                if (uVar2 < 0x100) {\n                    uVar6 = uVar2;\n                    if ((*(\n                          L\"         (((((                  H\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x10\\x10\\x10\\x10\\x10\\x10\\x10\u0181\u0181\u0181\u0181\u0181\u0181\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\\x10\\x10\\x10\\x10\\x10\\x10\u0182\u0182\u0182\u0182\u0182\u0182\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\\x10\\x10\\x10\\x10      (                          \\b\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\u0112\\x10\\x100\\x10\\x10\\x10\\x10\\x14\\x14\\x10\u0112\\x10\\x10\\x10\\x14\u0112\\x10\\x10\\x10\\x10\\x10\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\\x10\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\\x10\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0101\"\n                          + uVar6) & 1) != 0) {\n                        uVar6 = *(uVar6 + *(iVar5 + 0x110));\n                    }\n                    uVar2 = uVar6;\n                }\n                else {\n                    uVar2 = fcn.140011be0(uVar2, &stack0xffffffffffffffd0);\n                    iVar5 = iStack48;\n                }\n                iVar7 = uVar1 - uVar2;\n            } while ((iVar7 == 0) && (uVar1 != 0));\n            if (cStack32 != '\\0') {\n                *(iStack56 + 0x3a8) = *(iStack56 + 0x3a8) & 0xfffffffd;\n            }\n        }\n        return iVar7;\n    }\n    if ((arg1 == NULL) || (arg2 == NULL)) {\n        iStack48 = 0x14000c6b3;\n        puVar3 = fcn.14000d3d8();\n        *puVar3 = 0x16;\n        iStack48 = 0x14000c6be;\n        fcn.14000cdc0();\n        return 0x7fffffff;\n    }\ncode_r0x00014000c662:\n    do {\n        uVar1 = *arg1;\n        arg1 = arg1 + 1;\n        uVar2 = *arg2;\n        arg2 = arg2 + 1;\n        uVar8 = uVar1 + 0x20;\n        if (0x19 < uVar1 - 0x41) {\n            uVar8 = uVar1;\n        }\n        uVar4 = uVar2 + 0x20;\n        if (0x19 < uVar2 - 0x41) {\n            uVar4 = uVar2;\n        }\n    } while ((uVar8 - uVar4 == 0) && (uVar8 != 0));\n    return uVar8 - uVar4;\n}\n",
        "token_count": 1574
    },
    "14000c93": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint64_t fcn.14000c93c(int64_t *arg1)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    uint auStackX8 [2];\n    \n    if (*arg1 == 0) {\n        auStackX8[0] = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        if (*(arg1 + 2) == '\\0') {\n            arg1[1] = 0;\n            iVar2 = 0;\n            *(arg1 + 2) = 1;\n        }\n        else {\n            iVar2 = arg1[1];\n        }\n        iVar2 = fcn.1400122a0(auStackX8, iVar2);\n        *arg1 = iVar2;\n        (*_sym.imp.KERNEL32.dll_SetLastError)(auStackX8[0]);\n        if (iVar2 == 0) {\n            fcn.14001260c();\n            pcVar1 = swi(3);\n            iVar2 = (*pcVar1)();\n            return iVar2;\n        }\n    }\n    return *arg1;\n}\n",
        "token_count": 235
    },
    "14000c9a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.14000c9a4(ulong param_1)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_28h;\n    uint uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_bp_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_18h._0_1_ = *0x140037f80 == 0;\n    var_30h._0_1_ = 0;\n    var_bp_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (var_18h) {\n        var_28h._0_4_ = *0x140037158;\n        var_28h._4_4_ = *0x14003715c;\n        uStack40 = *0x140037160;\n        uStack36 = *0x140037164;\n    }\n    uVar1 = fcn.14000c818(param_1, &var_40h);\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_bp_10h != '\\0') {\n        iVar2 = fcn.14000c93c(&var_40h);\n        *(iVar2 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar2 = fcn.14000c93c(&var_40h);\n        *(iVar2 + 0x24) = var_bp_10h._4_4_;\n    }\n    return uVar1;\n}\n",
        "token_count": 432
    },
    "14000cc5": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.14000cc58(ulong noname_0, ulong noname_1, ulong noname_2, ulong noname_3, ulong arg_30h)\n\n{\n    int64_t iVar1;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_bp_28h;\n    uint uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_18h._0_1_ = *0x140037f80 == 0;\n    var_30h._0_1_ = 0;\n    var_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (var_18h) {\n        var_bp_28h._0_4_ = *0x140037158;\n        var_bp_28h._4_4_ = *0x14003715c;\n        uStack40 = *0x140037160;\n        uStack36 = *0x140037164;\n    }\n    fcn.14000ccf4(noname_0, noname_1, noname_2, noname_3);\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_10h != '\\0') {\n        iVar1 = fcn.14000c93c(&var_40h);\n        *(iVar1 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar1 = fcn.14000c93c(&var_40h);\n        *(iVar1 + 0x24) = var_10h._4_4_;\n    }\n    return;\n}\n",
        "token_count": 452
    },
    "14000d26": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nulong fcn.14000d260(ulong param_1, ulong param_2, ulong param_3, ulong param_4)\n\n{\n    ulong uVar1;\n    int64_t iVar2;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_28h;\n    uint uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_bp_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_18h._0_1_ = *0x140037f80 == 0;\n    var_30h._0_1_ = 0;\n    var_bp_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (var_18h) {\n        var_28h._0_4_ = *0x140037158;\n        var_28h._4_4_ = *0x14003715c;\n        uStack40 = *0x140037160;\n        uStack36 = *0x140037164;\n    }\n    uVar1 = fcn.14000cfb0(param_1, param_2, param_3, param_4, &var_40h);\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_bp_10h != '\\0') {\n        iVar2 = fcn.14000c93c(&var_40h);\n        *(iVar2 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar2 = fcn.14000c93c(&var_40h);\n        *(iVar2 + 0x24) = var_bp_10h._4_4_;\n    }\n    return uVar1;\n}\n",
        "token_count": 458
    },
    "14000e09": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint64_t fcn.14000e090(int64_t arg1)\n\n{\n    uint64_t *puVar1;\n    uint16_t *puVar2;\n    uint8_t *puVar3;\n    uint32_t *puVar4;\n    char *pcVar5;\n    uint32_t uVar6;\n    uint64_t uVar7;\n    int64_t iVar8;\n    int32_t iVar9;\n    \n    iVar9 = *(arg1 + 0x34);\n    if (iVar9 < 6) {\n        if (iVar9 != 5) {\n            if (iVar9 != 0) {\n                if (iVar9 == 1) {\n                    uVar6 = *(arg1 + 0x28);\n                    iVar8 = 1;\n                    puVar3 = *(arg1 + 0x18);\n                    *(arg1 + 0x18) = puVar3 + 8;\n                    if ((uVar6 >> 4 & 1) == 0) {\n                        uVar7 = *puVar3;\n                    }\n                    else {\n                        uVar7 = *puVar3;\n                    }\n                    goto code_r0x00014000e10e;\n                }\n                iVar9 = iVar9 + -2;\n                if (iVar9 == 0) {\n                    uVar6 = *(arg1 + 0x28);\n                    iVar8 = 2;\n                    puVar2 = *(arg1 + 0x18);\n                    *(arg1 + 0x18) = puVar2 + 4;\n                    if ((uVar6 >> 4 & 1) == 0) {\n                        uVar7 = *puVar2;\n                    }\n                    else {\n                        uVar7 = *puVar2;\n                    }\n                    goto code_r0x00014000e10e;\n                }\n                goto code_r0x00014000e0de;\n            }\ncode_r0x00014000e1e3:\n            uVar6 = *(arg1 + 0x28);\n            iVar8 = 4;\n            puVar4 = *(arg1 + 0x18);\n            *(arg1 + 0x18) = puVar4 + 2;\n            if ((uVar6 >> 4 & 1) == 0) {\n                uVar7 = *puVar4;\n            }\n            else {\n                uVar7 = *puVar4;\n            }\n            goto code_r0x00014000e10e;\n        }\n    }\n    else if (((iVar9 != 6) && (iVar9 != 7)) && (iVar9 = iVar9 + -9,  iVar9 != 0)) {\ncode_r0x00014000e0de:\n        if (iVar9 == 1) goto code_r0x00014000e1e3;\n        if (iVar9 != 2) {\n            iVar8 = *(arg1 + 8);\n            *(iVar8 + 0x30) = 1;\n            *(iVar8 + 0x2c) = 0x16;\n            uVar7 = fcn.14000ccf4(0, 0, 0, 0);\n            return uVar7 & 0xffffffffffffff00;\n        }\n    }\n    uVar6 = *(arg1 + 0x28);\n    iVar8 = 8;\n    puVar1 = *(arg1 + 0x18);\n    *(arg1 + 0x18) = puVar1 + 1;\n    uVar7 = *puVar1;\ncode_r0x00014000e10e:\n    if (((uVar6 >> 4 & 1) != 0) && (uVar7 < 0)) {\n        uVar7 = -uVar7;\n        uVar6 = uVar6 | 0x40;\n        *(arg1 + 0x28) = uVar6;\n    }\n    if (*(arg1 + 0x30) < 0) {\n        *(arg1 + 0x30) = 1;\n    }\n    else {\n        *(arg1 + 0x28) = uVar6 & 0xfffffff7;\n        fcn.14000d4d0(arg1 + 0x50, *(arg1 + 0x30), *(arg1 + 8));\n    }\n    if (uVar7 == 0) {\n        *(arg1 + 0x28) = *(arg1 + 0x28) & 0xffffffdf;\n    }\n    *(arg1 + 0x4c) = 0;\n    if (iVar8 == 8) {\n        fcn.14000f044(arg1, uVar7);\n    }\n    else {\n        fcn.14000ecc0(arg1, uVar7 & 0xffffffff);\n    }\n    uVar6 = *(arg1 + 0x28) >> 7;\n    pcVar5 = uVar6;\n    if (((uVar6 & 1) != 0) && ((*(arg1 + 0x48) == 0 || (pcVar5 = *(arg1 + 0x40),  *pcVar5 != '0')))) {\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -1;\n        **(arg1 + 0x40) = 0x30;\n        *(arg1 + 0x48) = *(arg1 + 0x48) + 1;\n    }\n    return CONCAT71(pcVar5 >> 8, 1);\n}\n",
        "token_count": 1198
    },
    "14000e29": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint64_t fcn.14000e294(int64_t arg1)\n\n{\n    uint64_t *puVar1;\n    uint16_t *puVar2;\n    uint8_t *puVar3;\n    uint32_t *puVar4;\n    int16_t *piVar5;\n    uint32_t uVar6;\n    uint64_t uVar7;\n    int64_t iVar8;\n    int32_t iVar9;\n    \n    iVar9 = *(arg1 + 0x34);\n    if (iVar9 < 6) {\n        if (iVar9 != 5) {\n            if (iVar9 != 0) {\n                if (iVar9 == 1) {\n                    uVar6 = *(arg1 + 0x28);\n                    iVar8 = 1;\n                    puVar3 = *(arg1 + 0x18);\n                    *(arg1 + 0x18) = puVar3 + 8;\n                    if ((uVar6 >> 4 & 1) == 0) {\n                        uVar7 = *puVar3;\n                    }\n                    else {\n                        uVar7 = *puVar3;\n                    }\n                    goto code_r0x00014000e312;\n                }\n                iVar9 = iVar9 + -2;\n                if (iVar9 == 0) {\n                    uVar6 = *(arg1 + 0x28);\n                    iVar8 = 2;\n                    puVar2 = *(arg1 + 0x18);\n                    *(arg1 + 0x18) = puVar2 + 4;\n                    if ((uVar6 >> 4 & 1) == 0) {\n                        uVar7 = *puVar2;\n                    }\n                    else {\n                        uVar7 = *puVar2;\n                    }\n                    goto code_r0x00014000e312;\n                }\n                goto code_r0x00014000e2e2;\n            }\ncode_r0x00014000e3e7:\n            uVar6 = *(arg1 + 0x28);\n            iVar8 = 4;\n            puVar4 = *(arg1 + 0x18);\n            *(arg1 + 0x18) = puVar4 + 2;\n            if ((uVar6 >> 4 & 1) == 0) {\n                uVar7 = *puVar4;\n            }\n            else {\n                uVar7 = *puVar4;\n            }\n            goto code_r0x00014000e312;\n        }\n    }\n    else if (((iVar9 != 6) && (iVar9 != 7)) && (iVar9 = iVar9 + -9,  iVar9 != 0)) {\ncode_r0x00014000e2e2:\n        if (iVar9 == 1) goto code_r0x00014000e3e7;\n        if (iVar9 != 2) {\n            iVar8 = *(arg1 + 8);\n            *(iVar8 + 0x30) = 1;\n            *(iVar8 + 0x2c) = 0x16;\n            uVar7 = fcn.14000ccf4(0, 0, 0, 0);\n            return uVar7 & 0xffffffffffffff00;\n        }\n    }\n    uVar6 = *(arg1 + 0x28);\n    iVar8 = 8;\n    puVar1 = *(arg1 + 0x18);\n    *(arg1 + 0x18) = puVar1 + 1;\n    uVar7 = *puVar1;\ncode_r0x00014000e312:\n    if (((uVar6 >> 4 & 1) != 0) && (uVar7 < 0)) {\n        uVar7 = -uVar7;\n        uVar6 = uVar6 | 0x40;\n        *(arg1 + 0x28) = uVar6;\n    }\n    if (*(arg1 + 0x30) < 0) {\n        *(arg1 + 0x30) = 1;\n    }\n    else {\n        *(arg1 + 0x28) = uVar6 & 0xfffffff7;\n        fcn.14000d578(arg1 + 0x50, *(arg1 + 0x30), *(arg1 + 8));\n    }\n    if (uVar7 == 0) {\n        *(arg1 + 0x28) = *(arg1 + 0x28) & 0xffffffdf;\n    }\n    *(arg1 + 0x4c) = 1;\n    if (iVar8 == 8) {\n        fcn.14000f0b4(arg1, uVar7);\n    }\n    else {\n        fcn.14000ed30(arg1, uVar7 & 0xffffffff);\n    }\n    uVar6 = *(arg1 + 0x28) >> 7;\n    piVar5 = uVar6;\n    if (((uVar6 & 1) != 0) && ((*(arg1 + 0x48) == 0 || (piVar5 = *(arg1 + 0x40),  *piVar5 != 0x30)))) {\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -2;\n        **(arg1 + 0x40) = 0x30;\n        *(arg1 + 0x48) = *(arg1 + 0x48) + 1;\n    }\n    return CONCAT71(piVar5 >> 8, 1);\n}\n",
        "token_count": 1199
    },
    "14000e4a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint64_t fcn.14000e4a0(int64_t arg1)\n\n{\n    uint64_t *puVar1;\n    uint16_t *puVar2;\n    uint8_t *puVar3;\n    uint32_t *puVar4;\n    char *pcVar5;\n    uint32_t uVar6;\n    uint64_t uVar7;\n    int64_t iVar8;\n    int32_t iVar9;\n    \n    iVar9 = *(arg1 + 0x34);\n    if (iVar9 < 6) {\n        if (iVar9 != 5) {\n            if (iVar9 != 0) {\n                if (iVar9 == 1) {\n                    uVar6 = *(arg1 + 0x28);\n                    iVar8 = 1;\n                    puVar3 = *(arg1 + 0x18);\n                    *(arg1 + 0x18) = puVar3 + 8;\n                    if ((uVar6 >> 4 & 1) == 0) {\n                        uVar7 = *puVar3;\n                    }\n                    else {\n                        uVar7 = *puVar3;\n                    }\n                    goto code_r0x00014000e51e;\n                }\n                iVar9 = iVar9 + -2;\n                if (iVar9 == 0) {\n                    uVar6 = *(arg1 + 0x28);\n                    iVar8 = 2;\n                    puVar2 = *(arg1 + 0x18);\n                    *(arg1 + 0x18) = puVar2 + 4;\n                    if ((uVar6 >> 4 & 1) == 0) {\n                        uVar7 = *puVar2;\n                    }\n                    else {\n                        uVar7 = *puVar2;\n                    }\n                    goto code_r0x00014000e51e;\n                }\n                goto code_r0x00014000e4ee;\n            }\ncode_r0x00014000e5f3:\n            uVar6 = *(arg1 + 0x28);\n            iVar8 = 4;\n            puVar4 = *(arg1 + 0x18);\n            *(arg1 + 0x18) = puVar4 + 2;\n            if ((uVar6 >> 4 & 1) == 0) {\n                uVar7 = *puVar4;\n            }\n            else {\n                uVar7 = *puVar4;\n            }\n            goto code_r0x00014000e51e;\n        }\n    }\n    else if (((iVar9 != 6) && (iVar9 != 7)) && (iVar9 = iVar9 + -9,  iVar9 != 0)) {\ncode_r0x00014000e4ee:\n        if (iVar9 == 1) goto code_r0x00014000e5f3;\n        if (iVar9 != 2) {\n            iVar8 = *(arg1 + 8);\n            *(iVar8 + 0x30) = 1;\n            *(iVar8 + 0x2c) = 0x16;\n            uVar7 = fcn.14000ccf4(0, 0, 0, 0);\n            return uVar7 & 0xffffffffffffff00;\n        }\n    }\n    uVar6 = *(arg1 + 0x28);\n    iVar8 = 8;\n    puVar1 = *(arg1 + 0x18);\n    *(arg1 + 0x18) = puVar1 + 1;\n    uVar7 = *puVar1;\ncode_r0x00014000e51e:\n    if (((uVar6 >> 4 & 1) != 0) && (uVar7 < 0)) {\n        uVar7 = -uVar7;\n        uVar6 = uVar6 | 0x40;\n        *(arg1 + 0x28) = uVar6;\n    }\n    if (*(arg1 + 0x30) < 0) {\n        *(arg1 + 0x30) = 1;\n    }\n    else {\n        *(arg1 + 0x28) = uVar6 & 0xfffffff7;\n        fcn.14000d4d0(arg1 + 0x50, *(arg1 + 0x30), *(arg1 + 8));\n    }\n    if (uVar7 == 0) {\n        *(arg1 + 0x28) = *(arg1 + 0x28) & 0xffffffdf;\n    }\n    *(arg1 + 0x4c) = 0;\n    if (iVar8 == 8) {\n        fcn.14000f13c(arg1, uVar7);\n    }\n    else {\n        fcn.14000edb4(arg1, uVar7 & 0xffffffff);\n    }\n    uVar6 = *(arg1 + 0x28) >> 7;\n    pcVar5 = uVar6;\n    if (((uVar6 & 1) != 0) && ((*(arg1 + 0x48) == 0 || (pcVar5 = *(arg1 + 0x40),  *pcVar5 != '0')))) {\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -1;\n        **(arg1 + 0x40) = 0x30;\n        *(arg1 + 0x48) = *(arg1 + 0x48) + 1;\n    }\n    return CONCAT71(pcVar5 >> 8, 1);\n}\n",
        "token_count": 1201
    },
    "14000e6a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint64_t fcn.14000e6a4(int64_t arg1)\n\n{\n    uint64_t *puVar1;\n    uint16_t *puVar2;\n    uint8_t *puVar3;\n    uint32_t *puVar4;\n    int16_t *piVar5;\n    uint32_t uVar6;\n    uint64_t uVar7;\n    int64_t iVar8;\n    int32_t iVar9;\n    \n    iVar9 = *(arg1 + 0x34);\n    if (iVar9 < 6) {\n        if (iVar9 != 5) {\n            if (iVar9 != 0) {\n                if (iVar9 == 1) {\n                    uVar6 = *(arg1 + 0x28);\n                    iVar8 = 1;\n                    puVar3 = *(arg1 + 0x18);\n                    *(arg1 + 0x18) = puVar3 + 8;\n                    if ((uVar6 >> 4 & 1) == 0) {\n                        uVar7 = *puVar3;\n                    }\n                    else {\n                        uVar7 = *puVar3;\n                    }\n                    goto code_r0x00014000e722;\n                }\n                iVar9 = iVar9 + -2;\n                if (iVar9 == 0) {\n                    uVar6 = *(arg1 + 0x28);\n                    iVar8 = 2;\n                    puVar2 = *(arg1 + 0x18);\n                    *(arg1 + 0x18) = puVar2 + 4;\n                    if ((uVar6 >> 4 & 1) == 0) {\n                        uVar7 = *puVar2;\n                    }\n                    else {\n                        uVar7 = *puVar2;\n                    }\n                    goto code_r0x00014000e722;\n                }\n                goto code_r0x00014000e6f2;\n            }\ncode_r0x00014000e7f7:\n            uVar6 = *(arg1 + 0x28);\n            iVar8 = 4;\n            puVar4 = *(arg1 + 0x18);\n            *(arg1 + 0x18) = puVar4 + 2;\n            if ((uVar6 >> 4 & 1) == 0) {\n                uVar7 = *puVar4;\n            }\n            else {\n                uVar7 = *puVar4;\n            }\n            goto code_r0x00014000e722;\n        }\n    }\n    else if (((iVar9 != 6) && (iVar9 != 7)) && (iVar9 = iVar9 + -9,  iVar9 != 0)) {\ncode_r0x00014000e6f2:\n        if (iVar9 == 1) goto code_r0x00014000e7f7;\n        if (iVar9 != 2) {\n            iVar8 = *(arg1 + 8);\n            *(iVar8 + 0x30) = 1;\n            *(iVar8 + 0x2c) = 0x16;\n            uVar7 = fcn.14000ccf4(0, 0, 0, 0);\n            return uVar7 & 0xffffffffffffff00;\n        }\n    }\n    uVar6 = *(arg1 + 0x28);\n    iVar8 = 8;\n    puVar1 = *(arg1 + 0x18);\n    *(arg1 + 0x18) = puVar1 + 1;\n    uVar7 = *puVar1;\ncode_r0x00014000e722:\n    if (((uVar6 >> 4 & 1) != 0) && (uVar7 < 0)) {\n        uVar7 = -uVar7;\n        uVar6 = uVar6 | 0x40;\n        *(arg1 + 0x28) = uVar6;\n    }\n    if (*(arg1 + 0x30) < 0) {\n        *(arg1 + 0x30) = 1;\n    }\n    else {\n        *(arg1 + 0x28) = uVar6 & 0xfffffff7;\n        fcn.14000d578(arg1 + 0x50, *(arg1 + 0x30), *(arg1 + 8));\n    }\n    if (uVar7 == 0) {\n        *(arg1 + 0x28) = *(arg1 + 0x28) & 0xffffffdf;\n    }\n    *(arg1 + 0x4c) = 1;\n    if (iVar8 == 8) {\n        fcn.14000f1ec(arg1, uVar7);\n    }\n    else {\n        fcn.14000ee60(arg1, uVar7 & 0xffffffff);\n    }\n    uVar6 = *(arg1 + 0x28) >> 7;\n    piVar5 = uVar6;\n    if (((uVar6 & 1) != 0) && ((*(arg1 + 0x48) == 0 || (piVar5 = *(arg1 + 0x40),  *piVar5 != 0x30)))) {\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -2;\n        **(arg1 + 0x40) = 0x30;\n        *(arg1 + 0x48) = *(arg1 + 0x48) + 1;\n    }\n    return CONCAT71(piVar5 >> 8, 1);\n}\n",
        "token_count": 1200
    },
    "14000e8b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint64_t fcn.14000e8b0(int64_t arg1)\n\n{\n    uint64_t *puVar1;\n    uint16_t *puVar2;\n    uint8_t *puVar3;\n    uint32_t *puVar4;\n    char *pcVar5;\n    uint32_t uVar6;\n    uint64_t uVar7;\n    int64_t iVar8;\n    int32_t iVar9;\n    \n    iVar9 = *(arg1 + 0x34);\n    if (iVar9 < 6) {\n        if (iVar9 != 5) {\n            if (iVar9 != 0) {\n                if (iVar9 == 1) {\n                    uVar6 = *(arg1 + 0x28);\n                    iVar8 = 1;\n                    puVar3 = *(arg1 + 0x18);\n                    *(arg1 + 0x18) = puVar3 + 8;\n                    if ((uVar6 >> 4 & 1) == 0) {\n                        uVar7 = *puVar3;\n                    }\n                    else {\n                        uVar7 = *puVar3;\n                    }\n                    goto code_r0x00014000e92e;\n                }\n                iVar9 = iVar9 + -2;\n                if (iVar9 == 0) {\n                    uVar6 = *(arg1 + 0x28);\n                    iVar8 = 2;\n                    puVar2 = *(arg1 + 0x18);\n                    *(arg1 + 0x18) = puVar2 + 4;\n                    if ((uVar6 >> 4 & 1) == 0) {\n                        uVar7 = *puVar2;\n                    }\n                    else {\n                        uVar7 = *puVar2;\n                    }\n                    goto code_r0x00014000e92e;\n                }\n                goto code_r0x00014000e8fe;\n            }\ncode_r0x00014000ea03:\n            uVar6 = *(arg1 + 0x28);\n            iVar8 = 4;\n            puVar4 = *(arg1 + 0x18);\n            *(arg1 + 0x18) = puVar4 + 2;\n            if ((uVar6 >> 4 & 1) == 0) {\n                uVar7 = *puVar4;\n            }\n            else {\n                uVar7 = *puVar4;\n            }\n            goto code_r0x00014000e92e;\n        }\n    }\n    else if (((iVar9 != 6) && (iVar9 != 7)) && (iVar9 = iVar9 + -9,  iVar9 != 0)) {\ncode_r0x00014000e8fe:\n        if (iVar9 == 1) goto code_r0x00014000ea03;\n        if (iVar9 != 2) {\n            iVar8 = *(arg1 + 8);\n            *(iVar8 + 0x30) = 1;\n            *(iVar8 + 0x2c) = 0x16;\n            uVar7 = fcn.14000ccf4(0, 0, 0, 0);\n            return uVar7 & 0xffffffffffffff00;\n        }\n    }\n    uVar6 = *(arg1 + 0x28);\n    iVar8 = 8;\n    puVar1 = *(arg1 + 0x18);\n    *(arg1 + 0x18) = puVar1 + 1;\n    uVar7 = *puVar1;\ncode_r0x00014000e92e:\n    if (((uVar6 >> 4 & 1) != 0) && (uVar7 < 0)) {\n        uVar7 = -uVar7;\n        uVar6 = uVar6 | 0x40;\n        *(arg1 + 0x28) = uVar6;\n    }\n    if (*(arg1 + 0x30) < 0) {\n        *(arg1 + 0x30) = 1;\n    }\n    else {\n        *(arg1 + 0x28) = uVar6 & 0xfffffff7;\n        fcn.14000d4d0(arg1 + 0x50, *(arg1 + 0x30), *(arg1 + 8));\n    }\n    if (uVar7 == 0) {\n        *(arg1 + 0x28) = *(arg1 + 0x28) & 0xffffffdf;\n    }\n    *(arg1 + 0x4c) = 0;\n    if (iVar8 == 8) {\n        fcn.14000f2b0(arg1, uVar7);\n    }\n    else {\n        fcn.14000ef20(arg1, uVar7 & 0xffffffff);\n    }\n    uVar6 = *(arg1 + 0x28) >> 7;\n    pcVar5 = uVar6;\n    if (((uVar6 & 1) != 0) && ((*(arg1 + 0x48) == 0 || (pcVar5 = *(arg1 + 0x40),  *pcVar5 != '0')))) {\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -1;\n        **(arg1 + 0x40) = 0x30;\n        *(arg1 + 0x48) = *(arg1 + 0x48) + 1;\n    }\n    return CONCAT71(pcVar5 >> 8, 1);\n}\n",
        "token_count": 1198
    },
    "14000eab": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint64_t fcn.14000eab4(int64_t arg1)\n\n{\n    uint64_t *puVar1;\n    uint16_t *puVar2;\n    uint8_t *puVar3;\n    uint32_t *puVar4;\n    int16_t *piVar5;\n    uint32_t uVar6;\n    uint64_t uVar7;\n    int64_t iVar8;\n    int32_t iVar9;\n    \n    iVar9 = *(arg1 + 0x34);\n    if (iVar9 < 6) {\n        if (iVar9 != 5) {\n            if (iVar9 != 0) {\n                if (iVar9 == 1) {\n                    uVar6 = *(arg1 + 0x28);\n                    iVar8 = 1;\n                    puVar3 = *(arg1 + 0x18);\n                    *(arg1 + 0x18) = puVar3 + 8;\n                    if ((uVar6 >> 4 & 1) == 0) {\n                        uVar7 = *puVar3;\n                    }\n                    else {\n                        uVar7 = *puVar3;\n                    }\n                    goto code_r0x00014000eb32;\n                }\n                iVar9 = iVar9 + -2;\n                if (iVar9 == 0) {\n                    uVar6 = *(arg1 + 0x28);\n                    iVar8 = 2;\n                    puVar2 = *(arg1 + 0x18);\n                    *(arg1 + 0x18) = puVar2 + 4;\n                    if ((uVar6 >> 4 & 1) == 0) {\n                        uVar7 = *puVar2;\n                    }\n                    else {\n                        uVar7 = *puVar2;\n                    }\n                    goto code_r0x00014000eb32;\n                }\n                goto code_r0x00014000eb02;\n            }\ncode_r0x00014000ec07:\n            uVar6 = *(arg1 + 0x28);\n            iVar8 = 4;\n            puVar4 = *(arg1 + 0x18);\n            *(arg1 + 0x18) = puVar4 + 2;\n            if ((uVar6 >> 4 & 1) == 0) {\n                uVar7 = *puVar4;\n            }\n            else {\n                uVar7 = *puVar4;\n            }\n            goto code_r0x00014000eb32;\n        }\n    }\n    else if (((iVar9 != 6) && (iVar9 != 7)) && (iVar9 = iVar9 + -9,  iVar9 != 0)) {\ncode_r0x00014000eb02:\n        if (iVar9 == 1) goto code_r0x00014000ec07;\n        if (iVar9 != 2) {\n            iVar8 = *(arg1 + 8);\n            *(iVar8 + 0x30) = 1;\n            *(iVar8 + 0x2c) = 0x16;\n            uVar7 = fcn.14000ccf4(0, 0, 0, 0);\n            return uVar7 & 0xffffffffffffff00;\n        }\n    }\n    uVar6 = *(arg1 + 0x28);\n    iVar8 = 8;\n    puVar1 = *(arg1 + 0x18);\n    *(arg1 + 0x18) = puVar1 + 1;\n    uVar7 = *puVar1;\ncode_r0x00014000eb32:\n    if (((uVar6 >> 4 & 1) != 0) && (uVar7 < 0)) {\n        uVar7 = -uVar7;\n        uVar6 = uVar6 | 0x40;\n        *(arg1 + 0x28) = uVar6;\n    }\n    if (*(arg1 + 0x30) < 0) {\n        *(arg1 + 0x30) = 1;\n    }\n    else {\n        *(arg1 + 0x28) = uVar6 & 0xfffffff7;\n        fcn.14000d578(arg1 + 0x50, *(arg1 + 0x30), *(arg1 + 8));\n    }\n    if (uVar7 == 0) {\n        *(arg1 + 0x28) = *(arg1 + 0x28) & 0xffffffdf;\n    }\n    *(arg1 + 0x4c) = 1;\n    if (iVar8 == 8) {\n        fcn.14000f334(arg1, uVar7);\n    }\n    else {\n        fcn.14000efa4(arg1, uVar7 & 0xffffffff);\n    }\n    uVar6 = *(arg1 + 0x28) >> 7;\n    piVar5 = uVar6;\n    if (((uVar6 & 1) != 0) && ((*(arg1 + 0x48) == 0 || (piVar5 = *(arg1 + 0x40),  *piVar5 != 0x30)))) {\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -2;\n        **(arg1 + 0x40) = 0x30;\n        *(arg1 + 0x48) = *(arg1 + 0x48) + 1;\n    }\n    return CONCAT71(piVar5 >> 8, 1);\n}\n",
        "token_count": 1190
    },
    "14000f56": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nuint fcn.14000f560(int64_t arg1, ulong noname_1, ulong arg3)\n\n{\n    int32_t *piVar1;\n    char cVar2;\n    int32_t iVar3;\n    uint uVar4;\n    uint8_t uVar5;\n    char *pcVar6;\n    int64_t iVar7;\n    \n    iVar7 = *(arg1 + 8);\n    if (*(arg1 + 0x460) == 0) {\n        *(iVar7 + 0x30) = 1;\n        *(iVar7 + 0x2c) = 0x16;\ncode_r0x00014000f8c3:\n        fcn.14000ccf4(0, 0, 0, 0);\ncode_r0x00014000f8dc:\n        uVar4 = 0xffffffff;\n    }\n    else {\n        pcVar6 = *(arg1 + 0x10);\n        if (pcVar6 == NULL) {\n            *(iVar7 + 0x30) = 1;\n            *(iVar7 + 0x2c) = 0x16;\n            fcn.14000ccf4(0, 0, 0, 0);\n            uVar4 = 0xffffffff;\n        }\n        else {\n            iVar3 = *(arg1 + 0x468) + 1;\n            *(arg1 + 0x468) = iVar3;\n            while (iVar3 != 2) {\n                *(arg1 + 0x48) = 0;\n                *(arg1 + 0x24) = 0;\n                cVar2 = *pcVar6;\n                while( true ) {\n                    pcVar6 = pcVar6 + 1;\n                    *(arg1 + 0x10) = pcVar6;\n                    *(arg1 + 0x39) = cVar2;\n                    if ((cVar2 == '\\0') || (*(arg1 + 0x20) < 0)) break;\n                    uVar5 = 0;\n                    if (cVar2 - 0x20U < 0x5b) {\n                        uVar5 = *((cVar2 - 0x20U & 0x7f) * 2 + 0x14002a071);\n                    }\n                    uVar5 = *((*(arg1 + 0x24) + uVar5 * 8 & 0x7f) * 2 + 0x14002a070);\n                    *(arg1 + 0x24) = uVar5;\n                    if (7 < uVar5) {\ncode_r0x00014000f8b0:\n                        iVar7 = *(arg1 + 8);\n                        *(iVar7 + 0x30) = 1;\n                        *(iVar7 + 0x2c) = 0x16;\n                        goto code_r0x00014000f8c3;\n                    }\n                    if (uVar5 == 0) {\n                        iVar7 = *(arg1 + 8);\n                        *(arg1 + 0x4c) = 0;\n                        if (*(iVar7 + 0x28) == '\\0') {\n                            fcn.140011110(iVar7);\n                        }\n                        cVar2 = *(arg1 + 0x39);\n                        if ((-2 < cVar2) && ((*(**(iVar7 + 0x18) + cVar2 * 2) & 0x8000) != 0)) {\n                            iVar7 = *(arg1 + 0x460);\n                            if (*(iVar7 + 0x10) == *(iVar7 + 8)) {\n                                if (*(iVar7 + 0x18) == '\\0') {\n                                    *(arg1 + 0x20) = 0xffffffff;\n                                }\n                                else {\n                                    *(arg1 + 0x20) = *(arg1 + 0x20) + 1;\n                                }\n                            }\n                            else {\n                                *(arg1 + 0x20) = *(arg1 + 0x20) + 1;\n                                *(iVar7 + 0x10) = *(iVar7 + 0x10) + 1;\n                                ***(arg1 + 0x460) = cVar2;\n                                **(arg1 + 0x460) = **(arg1 + 0x460) + 1;\n                            }\n                            cVar2 = **(arg1 + 0x10);\n                            *(arg1 + 0x10) = *(arg1 + 0x10) + 1;\n                            *(arg1 + 0x39) = cVar2;\n                            if (cVar2 == '\\0') {\n                                iVar7 = *(arg1 + 8);\n                                *(iVar7 + 0x30) = 1;\n                                *(iVar7 + 0x2c) = 0x16;\n                                fcn.14000ccf4(0, 0, 0, 0);\n                                goto code_r0x00014000f8b0;\n                            }\n                        }\n                        iVar7 = *(arg1 + 0x460);\n                        if (*(iVar7 + 0x10) == *(iVar7 + 8)) {\n                            if (*(iVar7 + 0x18) == '\\0') {\n                                *(arg1 + 0x20) = 0xffffffff;\n                            }\n                            else {\n                                *(arg1 + 0x20) = *(arg1 + 0x20) + 1;\n                            }\n                        }\n                        else {\n                            *(arg1 + 0x20) = *(arg1 + 0x20) + 1;\n                            *(iVar7 + 0x10) = *(iVar7 + 0x10) + 1;\n                            ***(arg1 + 0x460) = cVar2;\n                            **(arg1 + 0x460) = **(arg1 + 0x460) + 1;\n                        }\n                    }\n                    else if (uVar5 == 1) {\n                        *(arg1 + 0x28) = 0;\n                        *(arg1 + 0x38) = 0;\n                        *(arg1 + 0x30) = 0xffffffff;\n                        *(arg1 + 0x34) = 0;\n                        *(arg1 + 0x4c) = 0;\n                    }\n                    else if (uVar5 == 2) {\n                        if (cVar2 == ' ') {\n                            *(arg1 + 0x28) = *(arg1 + 0x28) | 2;\n                        }\n                        else if (cVar2 == '#') {\n                            *(arg1 + 0x28) = *(arg1 + 0x28) | 0x20;\n                        }\n                        else if (cVar2 == '+') {\n                            *(arg1 + 0x28) = *(arg1 + 0x28) | 1;\n                        }\n                        else if (cVar2 == '-') {\n                            *(arg1 + 0x28) = *(arg1 + 0x28) | 4;\n                        }\n                        else if (cVar2 == '0') {\n                            *(arg1 + 0x28) = *(arg1 + 0x28) | 8;\n                        }\n                    }\n                    else {\n                        if (uVar5 == 3) {\n                            if (cVar2 == '*') {\n                                piVar1 = *(arg1 + 0x18);\n                                *(arg1 + 0x18) = piVar1 + 2;\n                                iVar3 = *piVar1;\n                                *(arg1 + 0x2c) = iVar3;\n                                if (iVar3 < 0) {\n                                    *(arg1 + 0x28) = *(arg1 + 0x28) | 4;\n                                    *(arg1 + 0x2c) = -iVar3;\n                                }\ncode_r0x00014000f6f6:\n                                cVar2 = '\\x01';\n                            }\n                            else {\n                                iVar7 = arg1 + 0x2c;\ncode_r0x00014000f6a0:\n                                cVar2 = fcn.14000f440(arg1, iVar7);\n                            }\n                        }\n                        else {\n                            if (uVar5 == 4) {\n                                *(arg1 + 0x30) = 0;\n                                goto code_r0x00014000f837;\n                            }\n                            if (uVar5 == 5) {\n                                if (cVar2 == '*') {\n                                    piVar1 = *(arg1 + 0x18);\n                                    *(arg1 + 0x18) = piVar1 + 2;\n                                    iVar3 = *piVar1;\n                                    if (iVar3 < 0) {\n                                        iVar3 = -1;\n                                    }\n                                    *(arg1 + 0x30) = iVar3;\n                                    goto code_r0x00014000f6f6;\n                                }\n                                iVar7 = arg1 + 0x30;\n                                goto code_r0x00014000f6a0;\n                            }\n                            if (uVar5 == 6) {\n                                cVar2 = fcn.14000fbb8(arg1);\n                            }\n                            else {\n                                if (uVar5 != 7) goto code_r0x00014000f8dc;\n                                cVar2 = fcn.14000fef0(arg1);\n                            }\n                        }\n                        if (cVar2 == '\\0') goto code_r0x00014000f8dc;\n                    }\ncode_r0x00014000f837:\n                    pcVar6 = *(arg1 + 0x10);\n                    cVar2 = *pcVar6;\n                }\n                *(arg1 + 0x468) = *(arg1 + 0x468) + 1;\n                iVar3 = *(arg1 + 0x468);\n            }\n            uVar4 = *(arg1 + 0x20);\n        }\n    }\n    return uVar4;\n}\n",
        "token_count": 2159
    },
    "14000f8e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nuint fcn.14000f8e0(int64_t arg1)\n\n{\n    uint16_t uVar1;\n    int32_t *piVar2;\n    char cVar3;\n    int32_t iVar4;\n    uint uVar5;\n    uint8_t uVar6;\n    uint16_t *puVar7;\n    int64_t iVar8;\n    \n    iVar8 = *(arg1 + 8);\n    if (*(arg1 + 0x460) == 0) {\n        *(iVar8 + 0x30) = 1;\n        *(iVar8 + 0x2c) = 0x16;\ncode_r0x00014000fb99:\n        fcn.14000ccf4(0, 0, 0, 0);\ncode_r0x00014000fbb2:\n        uVar5 = 0xffffffff;\n    }\n    else {\n        puVar7 = *(arg1 + 0x10);\n        if (puVar7 == NULL) {\n            *(iVar8 + 0x30) = 1;\n            *(iVar8 + 0x2c) = 0x16;\n            fcn.14000ccf4(0, 0, 0, 0);\n            uVar5 = 0xffffffff;\n        }\n        else {\n            iVar4 = *(arg1 + 0x468) + 1;\n            *(arg1 + 0x468) = iVar4;\n            while (iVar4 != 2) {\n                *(arg1 + 0x48) = 0;\n                *(arg1 + 0x24) = 0;\n                uVar1 = *puVar7;\n                while( true ) {\n                    puVar7 = puVar7 + 1;\n                    *(arg1 + 0x10) = puVar7;\n                    *(arg1 + 0x3a) = uVar1;\n                    if ((uVar1 == 0) || (iVar4 = *(arg1 + 0x20),  iVar4 < 0)) break;\n                    uVar6 = 0;\n                    if (uVar1 - 0x20 < 0x5b) {\n                        uVar6 = *((uVar1 - 0x20 & 0x7f) * 2 + 0x14002a071);\n                    }\n                    uVar6 = *((*(arg1 + 0x24) + uVar6 * 8 & 0x7f) * 2 + 0x14002a070);\n                    *(arg1 + 0x24) = uVar6;\n                    if (7 < uVar6) {\n                        iVar8 = *(arg1 + 8);\n                        *(iVar8 + 0x30) = 1;\n                        *(iVar8 + 0x2c) = 0x16;\n                        goto code_r0x00014000fb99;\n                    }\n                    if (uVar6 == 0) {\n                        *(arg1 + 0x4c) = 1;\n                        iVar8 = *(arg1 + 0x460);\n                        if (*(iVar8 + 0x10) == *(iVar8 + 8)) {\n                            if (*(iVar8 + 0x18) == '\\0') {\n                                *(arg1 + 0x20) = 0xffffffff;\n                            }\n                            else {\n                                *(arg1 + 0x20) = iVar4 + 1;\n                            }\n                        }\n                        else {\n                            *(arg1 + 0x20) = iVar4 + 1;\n                            *(iVar8 + 0x10) = *(iVar8 + 0x10) + 1;\n                            ***(arg1 + 0x460) = uVar1;\n                            **(arg1 + 0x460) = **(arg1 + 0x460) + 2;\n                        }\n                    }\n                    else if (uVar6 == 1) {\n                        *(arg1 + 0x28) = 0;\n                        *(arg1 + 0x38) = 0;\n                        *(arg1 + 0x30) = 0xffffffff;\n                        *(arg1 + 0x34) = 0;\n                        *(arg1 + 0x4c) = 0;\n                    }\n                    else if (uVar6 == 2) {\n                        if (uVar1 == 0x20) {\n                            *(arg1 + 0x28) = *(arg1 + 0x28) | 2;\n                        }\n                        else if (uVar1 == 0x23) {\n                            *(arg1 + 0x28) = *(arg1 + 0x28) | 0x20;\n                        }\n                        else if (uVar1 == 0x2b) {\n                            *(arg1 + 0x28) = *(arg1 + 0x28) | 1;\n                        }\n                        else if (uVar1 == 0x2d) {\n                            *(arg1 + 0x28) = *(arg1 + 0x28) | 4;\n                        }\n                        else if (uVar1 == 0x30) {\n                            *(arg1 + 0x28) = *(arg1 + 0x28) | 8;\n                        }\n                    }\n                    else {\n                        if (uVar6 == 3) {\n                            if (uVar1 == 0x2a) {\n                                piVar2 = *(arg1 + 0x18);\n                                *(arg1 + 0x18) = piVar2 + 2;\n                                iVar4 = *piVar2;\n                                *(arg1 + 0x2c) = iVar4;\n                                if (iVar4 < 0) {\n                                    *(arg1 + 0x28) = *(arg1 + 0x28) | 4;\n                                    *(arg1 + 0x2c) = -iVar4;\n                                }\ncode_r0x00014000fa87:\n                                cVar3 = '\\x01';\n                            }\n                            else {\n                                iVar8 = arg1 + 0x2c;\ncode_r0x00014000fa30:\n                                cVar3 = fcn.14000f4d0(arg1, iVar8);\n                            }\n                        }\n                        else {\n                            if (uVar6 == 4) {\n                                *(arg1 + 0x30) = 0;\n                                goto code_r0x00014000fb36;\n                            }\n                            if (uVar6 == 5) {\n                                if (uVar1 == 0x2a) {\n                                    piVar2 = *(arg1 + 0x18);\n                                    *(arg1 + 0x18) = piVar2 + 2;\n                                    iVar4 = *piVar2;\n                                    if (iVar4 < 0) {\n                                        iVar4 = -1;\n                                    }\n                                    *(arg1 + 0x30) = iVar4;\n                                    goto code_r0x00014000fa87;\n                                }\n                                iVar8 = arg1 + 0x30;\n                                goto code_r0x00014000fa30;\n                            }\n                            if (uVar6 == 6) {\n                                cVar3 = fcn.14000fd40(arg1);\n                            }\n                            else {\n                                if (uVar6 != 7) goto code_r0x00014000fbb2;\n                                cVar3 = fcn.1400102f4(arg1);\n                            }\n                        }\n                        if (cVar3 == '\\0') goto code_r0x00014000fbb2;\n                    }\ncode_r0x00014000fb36:\n                    puVar7 = *(arg1 + 0x10);\n                    uVar1 = *puVar7;\n                }\n                *(arg1 + 0x468) = *(arg1 + 0x468) + 1;\n                iVar4 = *(arg1 + 0x468);\n            }\n            uVar5 = *(arg1 + 0x20);\n        }\n    }\n    return uVar5;\n}\n",
        "token_count": 1722
    },
    "14000fbb": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint64_t fcn.14000fbb8(uint8_t *arg1)\n\n{\n    int32_t *arg4;\n    int64_t **arg1_00;\n    uint8_t uVar1;\n    uint32_t uVar2;\n    char *pcVar3;\n    int64_t *piVar4;\n    bool bVar5;\n    char cVar6;\n    uint64_t in_RAX;\n    char *pcVar7;\n    uint64_t uVar8;\n    int64_t arg3;\n    int32_t iVar9;\n    uchar uVar10;\n    int32_t iVar11;\n    int32_t iVar12;\n    int64_t iVar13;\n    uchar auStack120 [32];\n    ulong uStack88;\n    uint uStack72;\n    uchar auStack68 [4];\n    ulong uStack64;\n    uint64_t uStack56;\n    \n    uVar1 = arg1[0x39];\n    pcVar7 = in_RAX & 0xffffffffffffff00;\n    if (uVar1 != 0x46) {\n        if (uVar1 == 0x4e) {\n            if ((*arg1 & 8) != 0) goto code_r0x00014000fd38;\n            arg1[0x24] = 8;\n        }\n        else if (*(arg1 + 0x34) == 0) {\n            if (uVar1 == 0x49) {\n                pcVar3 = *(arg1 + 0x10);\n                cVar6 = *pcVar3;\n                if ((cVar6 == '3') && (pcVar3[1] == '2')) {\n                    pcVar7 = pcVar3 + 2;\n                    *(arg1 + 0x34) = 10;\n                    *(arg1 + 0x10) = pcVar7;\n                }\n                else if (cVar6 == '6') {\n                    if (pcVar3[1] == '4') {\n                        pcVar7 = pcVar3 + 2;\n                        *(arg1 + 0x34) = 0xb;\n                        *(arg1 + 0x10) = pcVar7;\n                    }\n                }\n                else if ((cVar6 + 0xa8U < 0x21) && ((0x120821001U >> (cVar6 + 0xa8U & 0x3f) & 1) != 0)) {\n                    *(arg1 + 0x34) = 9;\n                }\n            }\n            else if (uVar1 == 0x4c) {\n                *(arg1 + 0x34) = 8;\n            }\n            else if (uVar1 == 0x54) {\n                *(arg1 + 0x34) = 0xd;\n            }\n            else {\n                if (uVar1 == 0x68) {\n                    if (**(arg1 + 0x10) == 'h') {\n                        *(arg1 + 0x10) = *(arg1 + 0x10) + 1;\n                        pcVar7 = 0x1;\n                    }\n                    else {\n                        pcVar7 = 0x2;\n                    }\n                }\n                else {\n                    if (uVar1 == 0x6a) {\n                        *(arg1 + 0x34) = 5;\n                        goto code_r0x00014000fd38;\n                    }\n                    if (uVar1 != 0x6c) {\n                        if (uVar1 == 0x74) {\n                            *(arg1 + 0x34) = 7;\n                        }\n                        else if (uVar1 == 0x77) {\n                            *(arg1 + 0x34) = 0xc;\n                        }\n                        else if (uVar1 == 0x7a) {\n                            *(arg1 + 0x34) = 6;\n                        }\n                        goto code_r0x00014000fd38;\n                    }\n                    if (**(arg1 + 0x10) == 'l') {\n                        *(arg1 + 0x10) = *(arg1 + 0x10) + 1;\n                        pcVar7 = 0x4;\n                    }\n                    else {\n                        pcVar7 = 0x3;\n                    }\n                }\n                *(arg1 + 0x34) = pcVar7;\n            }\ncode_r0x00014000fd38:\n            return CONCAT71(pcVar7 >> 8, 1);\n        }\n        iVar13 = *(arg1 + 8);\n        *(iVar13 + 0x30) = 1;\n        *(iVar13 + 0x2c) = 0x16;\n        uStack64 = 0x14000fc17;\n        uVar8 = fcn.14000ccf4(0, 0, 0, 0);\n        return uVar8 & 0xffffffffffffff00;\n    }\n    if ((*arg1 & 8) != 0) goto code_r0x00014000fd38;\n    arg1[0x24] = 7;\n    uStack56 = *0x140037f00 ^ &stack0xffffffffffffff88;\n    uVar10 = 0x78;\n    uVar1 = arg1[0x39];\n    iVar13 = 1;\n    if (uVar1 < 'e') {\n        if (uVar1 == 100) {\ncode_r0x00014000ffcf:\n            *(arg1 + 0x28) = *(arg1 + 0x28) | 0x10;\ncode_r0x00014000ffd3:\n            cVar6 = fcn.14000e4a0(arg1);\n        }\n        else if (uVar1 < 'T') {\n            if (uVar1 == 0x53) {\ncode_r0x000140010016:\n                cVar6 = fcn.140010f60(arg1);\n            }\n            else {\n                if (uVar1 != 0x41) {\n                    if (uVar1 == 0x43) {\ncode_r0x00014000ff89:\n                        cVar6 = fcn.140010d10(arg1);\n                        goto code_r0x000140010039;\n                    }\n                    if (((uVar1 != 0x45) && (uVar1 != 0x46)) && (uVar1 != 0x47)) goto code_r0x0001400102c7;\n                }\ncode_r0x00014000ff60:\n                cVar6 = fcn.140010854(arg1);\n            }\n        }\n        else {\n            if (uVar1 == 0x58) goto code_r0x000140010031;\n            if (uVar1 != 0x5a) {\n                if (uVar1 != 0x61) {\n                    if (uVar1 != 99) goto code_r0x0001400102c7;\n                    goto code_r0x00014000ff89;\n                }\n                goto code_r0x00014000ff60;\n            }\n            cVar6 = fcn.140010758(arg1);\n        }\n    }\n    else if (uVar1 < 'p') {\n        if (uVar1 == 0x6f) {\n            if ((*(arg1 + 0x28) >> 5 & 1) != 0) {\n                *(arg1 + 0x28) = *(arg1 + 0x28) | 0x80;\n            }\n            cVar6 = fcn.14000e090(arg1);\n        }\n        else {\n            if (((uVar1 == 0x65) || (uVar1 == 0x66)) || (uVar1 == 0x67)) goto code_r0x00014000ff60;\n            if (uVar1 == 0x69) goto code_r0x00014000ffcf;\n            if (uVar1 != 0x6e) goto code_r0x0001400102c7;\n            cVar6 = fcn.140010ea8(arg1);\n        }\n    }\n    else {\n        if (uVar1 == 0x70) {\n            *(arg1 + 0x30) = 0x10;\n            *(arg1 + 0x34) = 0xb;\n        }\n        else {\n            if (uVar1 == 0x73) goto code_r0x000140010016;\n            if (uVar1 == 0x75) goto code_r0x00014000ffd3;\n            if (uVar1 != 0x78) goto code_r0x0001400102c7;\n        }\ncode_r0x000140010031:\n        cVar6 = fcn.14000e8b0(arg1);\n    }\ncode_r0x000140010039:\n    if ((cVar6 != '\\0') && (arg1[0x38] == 0)) {\n        uVar2 = *(arg1 + 0x28);\n        uStack72 = (uStack72 >> 0x10 & 0xff00) << 0x10;\n        arg3 = 0;\n        if ((uVar2 >> 4 & 1) != 0) {\n            uStack72._1_3_ = uStack72 >> 8;\n            if ((uVar2 >> 6 & 1) == 0) {\n                if ((uVar2 & 1) == 0) {\n                    if ((uVar2 >> 1 & 1) != 0) {\n                        uStack72 = CONCAT31(uStack72._1_3_, 0x20);\n                        arg3 = iVar13;\n                    }\n                }\n                else {\n                    uStack72 = CONCAT31(uStack72._1_3_, 0x2b);\n                    arg3 = iVar13;\n                }\n            }\n            else {\n                uStack72 = CONCAT31(uStack72._1_3_, 0x2d);\n                arg3 = iVar13;\n            }\n        }\n        uVar1 = arg1[0x39];\n        if (((uVar1 + 0xa8 & 0xdf) == 0) && ((uVar2 >> 5 & 1) != 0)) {\n            bVar5 = true;\n        }\n        else {\n            bVar5 = false;\n        }\n        if ((bVar5) || ((uVar1 + 0xbf & 0xdf) == 0)) {\n            (&stack0xffffffffffffffb8)[arg3] = 0x30;\n            if ((uVar1 == 0x58) || (uVar1 == 0x41)) {\n                uVar10 = 0x58;\n            }\n            (&stack0xffffffffffffffb9)[arg3] = uVar10;\n            arg3 = arg3 + 2;\n        }\n        iVar9 = (*(arg1 + 0x2c) - arg3) - *(arg1 + 0x48);\n        if (((uVar2 & 0xc) == 0) && (iVar12 = 0,  0 < iVar9)) {\n            iVar11 = *(arg1 + 0x20);\n            do {\n                iVar13 = *(arg1 + 0x460);\n                if (*(iVar13 + 0x10) == *(iVar13 + 8)) {\n                    if (*(iVar13 + 0x18) == '\\0') {\n                        iVar11 = -1;\n                    }\n                    else {\n                        iVar11 = iVar11 + 1;\n                    }\n                    *(arg1 + 0x20) = iVar11;\n                }\n                else {\n                    *(arg1 + 0x20) = iVar11 + 1;\n                    *(iVar13 + 0x10) = *(iVar13 + 0x10) + 1;\n                    ***(arg1 + 0x460) = 0x20;\n                    **(arg1 + 0x460) = **(arg1 + 0x460) + 1;\n                }\n                iVar11 = *(arg1 + 0x20);\n            } while ((iVar11 != -1) && (iVar12 = iVar12 + 1,  iVar12 < iVar9));\n        }\n        uStack88 = *(arg1 + 8);\n        arg4 = arg1 + 0x20;\n        arg1_00 = arg1 + 0x460;\n        fcn.140011188(arg1_00, &stack0xffffffffffffffb8, arg3, arg4);\n        if (((*(arg1 + 0x28) >> 3 & 1) != 0) && (((*(arg1 + 0x28) >> 2 & 1) == 0 && (iVar12 = 0,  0 < iVar9)))) {\n            iVar11 = *arg4;\n            do {\n                piVar4 = *arg1_00;\n                if (piVar4[2] == piVar4[1]) {\n                    if (*(piVar4 + 3) == '\\0') {\n                        iVar11 = -1;\n                    }\n                    else {\n                        iVar11 = iVar11 + 1;\n                    }\n                    *arg4 = iVar11;\n                }\n                else {\n                    *arg4 = iVar11 + 1;\n                    piVar4[2] = piVar4[2] + 1;\n                    ***arg1_00 = 0x30;\n                    **arg1_00 = **arg1_00 + 1;\n                }\n                iVar11 = *arg4;\n            } while ((iVar11 != -1) && (iVar12 = iVar12 + 1,  iVar12 < iVar9));\n        }\n        if ((arg1[0x4c] == 0) || (*(arg1 + 0x48) < 1)) {\n            uStack88 = *(arg1 + 8);\n            fcn.140011188(arg1_00, *(arg1 + 0x40), *(arg1 + 0x48), arg4);\n        }\n        else {\n            iVar12 = 0;\n            do {\n                uStack88 = *(arg1 + 8);\n                uStack72 = 0;\n                iVar11 = fcn.140015594(&stack0xffffffffffffffb8, &stack0xffffffffffffffbc, 6);\n                if ((iVar11 != 0) || (uStack72 == 0)) {\n                    *arg4 = -1;\n                    break;\n                }\n                uStack88 = *(arg1 + 8);\n                fcn.140011188(arg1_00, &stack0xffffffffffffffbc, uStack72, arg4);\n                iVar12 = iVar12 + 1;\n            } while (iVar12 != *(arg1 + 0x48));\n        }\n        iVar12 = *arg4;\n        if (((-1 < iVar12) && ((*(arg1 + 0x28) >> 2 & 1) != 0)) && (iVar11 = 0,  0 < iVar9)) {\n            do {\n                piVar4 = *arg1_00;\n                if (piVar4[2] == piVar4[1]) {\n                    if (*(piVar4 + 3) == '\\0') {\n                        iVar12 = -1;\n                    }\n                    else {\n                        iVar12 = iVar12 + 1;\n                    }\n                    *arg4 = iVar12;\n                }\n                else {\n                    *arg4 = iVar12 + 1;\n                    piVar4[2] = piVar4[2] + 1;\n                    ***arg1_00 = 0x20;\n                    **arg1_00 = **arg1_00 + 1;\n                }\n                iVar12 = *arg4;\n            } while ((iVar12 != -1) && (iVar11 = iVar11 + 1,  iVar11 < iVar9));\n        }\n    }\ncode_r0x0001400102c7:\n    uVar8 = fcn.14001e9f0(uStack56 ^ &stack0xffffffffffffff88);\n    return uVar8;\n}\n",
        "token_count": 3491
    },
    "14000fef": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_bp_10h\n// WARNING: Variable defined which should be unmapped: var_bp_20h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.14000fef0(int64_t arg1)\n\n{\n    int32_t *arg4;\n    int64_t **arg1_00;\n    uint32_t uVar1;\n    int64_t *piVar2;\n    bool bVar3;\n    char cVar4;\n    int64_t arg3;\n    int32_t iVar5;\n    uchar uVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    int64_t iVar9;\n    ulong var_30h;\n    uchar auStack120 [32];\n    ulong uStack88;\n    uint uStack72;\n    uchar auStack68 [12];\n    uint64_t uStack56;\n    ulong var_bp_20h;\n    ulong var_bp_10h;\n    \n    uStack56 = *0x140037f00 ^ auStack120;\n    uVar6 = 0x78;\n    cVar4 = *(arg1 + 0x39);\n    iVar9 = 1;\n    if (cVar4 < 'e') {\n        if (cVar4 == 'd') {\ncode_r0x00014000ffcf:\n            *(arg1 + 0x28) = *(arg1 + 0x28) | 0x10;\ncode_r0x00014000ffd3:\n            cVar4 = fcn.14000e4a0(arg1);\n        }\n        else if (cVar4 < 'T') {\n            if (cVar4 == 'S') {\ncode_r0x000140010016:\n                cVar4 = fcn.140010f60(arg1);\n            }\n            else {\n                if (cVar4 != 'A') {\n                    if (cVar4 == 'C') {\ncode_r0x00014000ff89:\n                        cVar4 = fcn.140010d10(arg1);\n                        goto code_r0x000140010039;\n                    }\n                    if (((cVar4 != 'E') && (cVar4 != 'F')) && (cVar4 != 'G')) goto code_r0x0001400102c7;\n                }\ncode_r0x00014000ff60:\n                cVar4 = fcn.140010854(arg1);\n            }\n        }\n        else {\n            if (cVar4 == 'X') goto code_r0x000140010031;\n            if (cVar4 != 'Z') {\n                if (cVar4 != 'a') {\n                    if (cVar4 != 'c') goto code_r0x0001400102c7;\n                    goto code_r0x00014000ff89;\n                }\n                goto code_r0x00014000ff60;\n            }\n            cVar4 = fcn.140010758(arg1);\n        }\n    }\n    else if (cVar4 < 'p') {\n        if (cVar4 == 'o') {\n            if ((*(arg1 + 0x28) >> 5 & 1) != 0) {\n                *(arg1 + 0x28) = *(arg1 + 0x28) | 0x80;\n            }\n            cVar4 = fcn.14000e090(arg1);\n        }\n        else {\n            if (((cVar4 == 'e') || (cVar4 == 'f')) || (cVar4 == 'g')) goto code_r0x00014000ff60;\n            if (cVar4 == 'i') goto code_r0x00014000ffcf;\n            if (cVar4 != 'n') goto code_r0x0001400102c7;\n            cVar4 = fcn.140010ea8(arg1);\n        }\n    }\n    else {\n        if (cVar4 == 'p') {\n            *(arg1 + 0x30) = 0x10;\n            *(arg1 + 0x34) = 0xb;\n        }\n        else {\n            if (cVar4 == 's') goto code_r0x000140010016;\n            if (cVar4 == 'u') goto code_r0x00014000ffd3;\n            if (cVar4 != 'x') goto code_r0x0001400102c7;\n        }\ncode_r0x000140010031:\n        cVar4 = fcn.14000e8b0(arg1);\n    }\ncode_r0x000140010039:\n    if ((cVar4 != '\\0') && (*(arg1 + 0x38) == '\\0')) {\n        uVar1 = *(arg1 + 0x28);\n        uStack72 = (uStack72 >> 0x10 & 0xff00) << 0x10;\n        arg3 = 0;\n        if ((uVar1 >> 4 & 1) != 0) {\n            uStack72._1_3_ = uStack72 >> 8;\n            if ((uVar1 >> 6 & 1) == 0) {\n                if ((uVar1 & 1) == 0) {\n                    if ((uVar1 >> 1 & 1) != 0) {\n                        uStack72 = CONCAT31(uStack72._1_3_, 0x20);\n                        arg3 = iVar9;\n                    }\n                }\n                else {\n                    uStack72 = CONCAT31(uStack72._1_3_, 0x2b);\n                    arg3 = iVar9;\n                }\n            }\n            else {\n                uStack72 = CONCAT31(uStack72._1_3_, 0x2d);\n                arg3 = iVar9;\n            }\n        }\n        cVar4 = *(arg1 + 0x39);\n        if (((cVar4 + 0xa8U & 0xdf) == 0) && ((uVar1 >> 5 & 1) != 0)) {\n            bVar3 = true;\n        }\n        else {\n            bVar3 = false;\n        }\n        if ((bVar3) || ((cVar4 + 0xbfU & 0xdf) == 0)) {\n            auStack68[arg3 + -4] = 0x30;\n            if ((cVar4 == 'X') || (cVar4 == 'A')) {\n                uVar6 = 0x58;\n            }\n            auStack68[arg3 + -3] = uVar6;\n            arg3 = arg3 + 2;\n        }\n        iVar5 = (*(arg1 + 0x2c) - arg3) - *(arg1 + 0x48);\n        if (((uVar1 & 0xc) == 0) && (iVar8 = 0,  0 < iVar5)) {\n            iVar7 = *(arg1 + 0x20);\n            do {\n                iVar9 = *(arg1 + 0x460);\n                if (*(iVar9 + 0x10) == *(iVar9 + 8)) {\n                    if (*(iVar9 + 0x18) == '\\0') {\n                        iVar7 = -1;\n                    }\n                    else {\n                        iVar7 = iVar7 + 1;\n                    }\n                    *(arg1 + 0x20) = iVar7;\n                }\n                else {\n                    *(arg1 + 0x20) = iVar7 + 1;\n                    *(iVar9 + 0x10) = *(iVar9 + 0x10) + 1;\n                    ***(arg1 + 0x460) = 0x20;\n                    **(arg1 + 0x460) = **(arg1 + 0x460) + 1;\n                }\n                iVar7 = *(arg1 + 0x20);\n            } while ((iVar7 != -1) && (iVar8 = iVar8 + 1,  iVar8 < iVar5));\n        }\n        uStack88 = *(arg1 + 8);\n        arg4 = arg1 + 0x20;\n        arg1_00 = arg1 + 0x460;\n        fcn.140011188(arg1_00, &uStack72, arg3, arg4);\n        if (((*(arg1 + 0x28) >> 3 & 1) != 0) && (((*(arg1 + 0x28) >> 2 & 1) == 0 && (iVar8 = 0,  0 < iVar5)))) {\n            iVar7 = *arg4;\n            do {\n                piVar2 = *arg1_00;\n                if (piVar2[2] == piVar2[1]) {\n                    if (*(piVar2 + 3) == '\\0') {\n                        iVar7 = -1;\n                    }\n                    else {\n                        iVar7 = iVar7 + 1;\n                    }\n                    *arg4 = iVar7;\n                }\n                else {\n                    *arg4 = iVar7 + 1;\n                    piVar2[2] = piVar2[2] + 1;\n                    ***arg1_00 = 0x30;\n                    **arg1_00 = **arg1_00 + 1;\n                }\n                iVar7 = *arg4;\n            } while ((iVar7 != -1) && (iVar8 = iVar8 + 1,  iVar8 < iVar5));\n        }\n        if ((*(arg1 + 0x4c) == '\\0') || (*(arg1 + 0x48) < 1)) {\n            uStack88 = *(arg1 + 8);\n            fcn.140011188(arg1_00, *(arg1 + 0x40), *(arg1 + 0x48), arg4);\n        }\n        else {\n            iVar8 = 0;\n            do {\n                uStack88 = *(arg1 + 8);\n                uStack72 = 0;\n                iVar7 = fcn.140015594(&uStack72, auStack68, 6);\n                if ((iVar7 != 0) || (uStack72 == 0)) {\n                    *arg4 = -1;\n                    break;\n                }\n                uStack88 = *(arg1 + 8);\n                fcn.140011188(arg1_00, auStack68, uStack72, arg4);\n                iVar8 = iVar8 + 1;\n            } while (iVar8 != *(arg1 + 0x48));\n        }\n        iVar8 = *arg4;\n        if (((-1 < iVar8) && ((*(arg1 + 0x28) >> 2 & 1) != 0)) && (iVar7 = 0,  0 < iVar5)) {\n            do {\n                piVar2 = *arg1_00;\n                if (piVar2[2] == piVar2[1]) {\n                    if (*(piVar2 + 3) == '\\0') {\n                        iVar8 = -1;\n                    }\n                    else {\n                        iVar8 = iVar8 + 1;\n                    }\n                    *arg4 = iVar8;\n                }\n                else {\n                    *arg4 = iVar8 + 1;\n                    piVar2[2] = piVar2[2] + 1;\n                    ***arg1_00 = 0x20;\n                    **arg1_00 = **arg1_00 + 1;\n                }\n                iVar8 = *arg4;\n            } while ((iVar8 != -1) && (iVar7 = iVar7 + 1,  iVar7 < iVar5));\n        }\n    }\ncode_r0x0001400102c7:\n    fcn.14001e9f0(uStack56 ^ auStack120);\n    return;\n}\n",
        "token_count": 2524
    },
    "14000fd4": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint64_t fcn.14000fd40(uint8_t *arg1)\n\n{\n    int32_t *arg4;\n    int64_t **arg1_00;\n    int16_t iVar1;\n    uint16_t *puVar2;\n    int64_t iVar3;\n    int64_t *piVar4;\n    bool bVar5;\n    char cVar6;\n    uint16_t uVar7;\n    uint16_t *puVar8;\n    uint64_t uVar9;\n    uint64_t uVar10;\n    int32_t iVar11;\n    ushort uVar12;\n    int32_t iVar13;\n    uint32_t uVar14;\n    int64_t arg2;\n    uchar auStack120 [32];\n    ulong uStack88;\n    ushort uStack72;\n    uint uStack68;\n    uint64_t uStack64;\n    uint64_t uStack56;\n    uint64_t uVar15;\n    \n    uVar7 = *(arg1 + 0x3a);\n    puVar8 = uVar7;\n    if (uVar7 != 0x46) {\n        if (uVar7 == 0x4e) {\n            if ((*arg1 & 8) != 0) goto code_r0x00014000fee6;\n            arg1[0x24] = 8;\n        }\n        else if (*(arg1 + 0x34) == 0) {\n            if (uVar7 == 0x49) {\n                puVar2 = *(arg1 + 0x10);\n                uVar7 = *puVar2;\n                puVar8 = uVar7;\n                if ((uVar7 == 0x33) && (puVar2[1] == 0x32)) {\n                    puVar8 = puVar2 + 2;\n                    *(arg1 + 0x34) = 10;\n                    *(arg1 + 0x10) = puVar8;\n                }\n                else if (uVar7 == 0x36) {\n                    if (puVar2[1] == 0x34) {\n                        puVar8 = puVar2 + 2;\n                        *(arg1 + 0x34) = 0xb;\n                        *(arg1 + 0x10) = puVar8;\n                    }\n                }\n                else {\n                    puVar8 = uVar7 - 0x58;\n                    if ((uVar7 - 0x58 < 0x21) && ((0x120821001U >> (puVar8 & 0x3f) & 1) != 0)) {\n                        *(arg1 + 0x34) = 9;\n                    }\n                }\n            }\n            else if (uVar7 == 0x4c) {\n                *(arg1 + 0x34) = 8;\n            }\n            else if (uVar7 == 0x54) {\n                *(arg1 + 0x34) = 0xd;\n            }\n            else {\n                if (uVar7 == 0x68) {\n                    if (**(arg1 + 0x10) == 0x68) {\n                        *(arg1 + 0x10) = *(arg1 + 0x10) + 1;\n                        puVar8 = 0x1;\n                    }\n                    else {\n                        puVar8 = 0x2;\n                    }\n                }\n                else {\n                    if (uVar7 == 0x6a) {\n                        *(arg1 + 0x34) = 5;\n                        goto code_r0x00014000fee6;\n                    }\n                    if (uVar7 != 0x6c) {\n                        if (uVar7 == 0x74) {\n                            *(arg1 + 0x34) = 7;\n                        }\n                        else if (uVar7 == 0x77) {\n                            *(arg1 + 0x34) = 0xc;\n                        }\n                        else if (uVar7 == 0x7a) {\n                            *(arg1 + 0x34) = 6;\n                        }\n                        goto code_r0x00014000fee6;\n                    }\n                    if (**(arg1 + 0x10) == 0x6c) {\n                        *(arg1 + 0x10) = *(arg1 + 0x10) + 1;\n                        puVar8 = 0x4;\n                    }\n                    else {\n                        puVar8 = 0x3;\n                    }\n                }\n                *(arg1 + 0x34) = puVar8;\n            }\ncode_r0x00014000fee6:\n            return CONCAT71(puVar8 >> 8, 1);\n        }\n        iVar3 = *(arg1 + 8);\n        *(iVar3 + 0x30) = 1;\n        *(iVar3 + 0x2c) = 0x16;\n        uStack64 = 0x14000fda4;\n        uVar9 = fcn.14000ccf4(0, 0, 0, 0);\n        return uVar9 & 0xffffffffffffff00;\n    }\n    if ((*arg1 & 8) != 0) goto code_r0x00014000fee6;\n    arg1[0x24] = 7;\n    uStack56 = *0x140037f00 ^ &stack0xffffffffffffff88;\n    uVar12 = 0x78;\n    uVar7 = *(arg1 + 0x3a);\n    if (uVar7 < 0x65) {\n        if (uVar7 == 100) {\ncode_r0x0001400103d1:\n            *(arg1 + 0x28) = *(arg1 + 0x28) | 0x10;\ncode_r0x0001400103d5:\n            cVar6 = fcn.14000e6a4(arg1);\n        }\n        else if (uVar7 < 0x54) {\n            if (uVar7 == 0x53) {\ncode_r0x000140010417:\n                cVar6 = fcn.140010ffc(arg1);\n            }\n            else {\n                if (uVar7 != 0x41) {\n                    if (uVar7 == 0x43) {\ncode_r0x00014001038b:\n                        cVar6 = fcn.140010de4(arg1);\n                        goto code_r0x000140010439;\n                    }\n                    if (((uVar7 != 0x45) && (uVar7 != 0x46)) && (uVar7 != 0x47)) goto code_r0x00014001072d;\n                }\ncode_r0x000140010363:\n                cVar6 = fcn.140010aa8(arg1);\n            }\n        }\n        else {\n            if (uVar7 == 0x58) goto code_r0x000140010431;\n            if (uVar7 != 0x5a) {\n                if (uVar7 != 0x61) {\n                    if (uVar7 != 99) goto code_r0x00014001072d;\n                    goto code_r0x00014001038b;\n                }\n                goto code_r0x000140010363;\n            }\n            cVar6 = fcn.1400107d4(arg1);\n        }\n    }\n    else if (uVar7 < 0x70) {\n        if (uVar7 == 0x6f) {\n            if ((*(arg1 + 0x28) >> 5 & 1) != 0) {\n                *(arg1 + 0x28) = *(arg1 + 0x28) | 0x80;\n            }\n            cVar6 = fcn.14000e294(arg1);\n        }\n        else {\n            if (((uVar7 == 0x65) || (uVar7 == 0x66)) || (uVar7 == 0x67)) goto code_r0x000140010363;\n            if (uVar7 == 0x69) goto code_r0x0001400103d1;\n            if (uVar7 != 0x6e) goto code_r0x00014001072d;\n            cVar6 = fcn.140010ea8(arg1);\n        }\n    }\n    else {\n        if (uVar7 == 0x70) {\n            *(arg1 + 0x30) = 0x10;\n            *(arg1 + 0x34) = 0xb;\n        }\n        else {\n            if (uVar7 == 0x73) goto code_r0x000140010417;\n            if (uVar7 == 0x75) goto code_r0x0001400103d5;\n            if (uVar7 != 0x78) goto code_r0x00014001072d;\n        }\ncode_r0x000140010431:\n        cVar6 = fcn.14000eab4(arg1);\n    }\ncode_r0x000140010439:\n    uVar9 = 0;\n    if ((cVar6 == '\\0') || (arg1[0x38] != 0)) goto code_r0x00014001072d;\n    uVar14 = *(arg1 + 0x28);\n    uStack68 = 0;\n    uStack64 = uStack64 & 0xffffffffffff0000;\n    uVar10 = uVar9;\n    if ((uVar14 >> 4 & 1) != 0) {\n        if ((uVar14 >> 6 & 1) == 0) {\n            if ((uVar14 & 1) != 0) {\n                uVar7 = 0x2b;\n                goto code_r0x00014001047f;\n            }\n            if ((uVar14 >> 1 & 1) == 0) goto code_r0x0001400104a5;\n            uStack68 = 0x20;\n        }\n        else {\n            uVar7 = 0x2d;\ncode_r0x00014001047f:\n            uStack68 = uVar7;\n        }\n        uVar10 = 1;\n    }\ncode_r0x0001400104a5:\n    iVar1 = *(arg1 + 0x3a);\n    if (((iVar1 - 0x58U & 0xffdf) != 0) || (bVar5 = true,  (uVar14 >> 5 & 1) == 0)) {\n        bVar5 = false;\n    }\n    if ((bVar5) || ((iVar1 - 0x41U & 0xffdf) == 0)) {\n        *(&stack0xffffffffffffffbc + uVar10 * 2) = 0x30;\n        if ((iVar1 == 0x58) || (iVar1 == 0x41)) {\n            uVar12 = 0x58;\n        }\n        *(&stack0xffffffffffffffbe + uVar10 * 2) = uVar12;\n        uVar10 = uVar10 + 2;\n    }\n    iVar11 = (*(arg1 + 0x2c) - uVar10) - *(arg1 + 0x48);\n    if (((uVar14 & 0xc) == 0) && (0 < iVar11)) {\n        iVar13 = *(arg1 + 0x20);\n        uVar15 = uVar9;\n        do {\n            iVar3 = *(arg1 + 0x460);\n            if (*(iVar3 + 0x10) == *(iVar3 + 8)) {\n                if (*(iVar3 + 0x18) == '\\0') {\n                    iVar13 = -1;\n                }\n                else {\n                    iVar13 = iVar13 + 1;\n                }\n                *(arg1 + 0x20) = iVar13;\n            }\n            else {\n                *(arg1 + 0x20) = iVar13 + 1;\n                *(iVar3 + 0x10) = *(iVar3 + 0x10) + 1;\n                ***(arg1 + 0x460) = 0x20;\n                **(arg1 + 0x460) = **(arg1 + 0x460) + 2;\n            }\n            iVar13 = *(arg1 + 0x20);\n        } while ((iVar13 != -1) && (uVar14 = uVar15 + 1,  uVar15 = uVar14,  uVar14 < iVar11));\n    }\n    uStack88 = *(arg1 + 8);\n    arg4 = arg1 + 0x20;\n    arg1_00 = arg1 + 0x460;\n    fcn.14001122c(arg1_00, &stack0xffffffffffffffbc, uVar10, arg4);\n    if (((*(arg1 + 0x28) >> 3 & 1) != 0) && (((*(arg1 + 0x28) >> 2 & 1) == 0 && (0 < iVar11)))) {\n        iVar13 = *arg4;\n        uVar10 = uVar9;\n        do {\n            piVar4 = *arg1_00;\n            if (piVar4[2] == piVar4[1]) {\n                if (*(piVar4 + 3) == '\\0') {\n                    iVar13 = -1;\n                }\n                else {\n                    iVar13 = iVar13 + 1;\n                }\n                *arg4 = iVar13;\n            }\n            else {\n                *arg4 = iVar13 + 1;\n                piVar4[2] = piVar4[2] + 1;\n                ***arg1_00 = 0x30;\n                **arg1_00 = **arg1_00 + 2;\n            }\n            iVar13 = *arg4;\n        } while ((iVar13 != -1) && (uVar14 = uVar10 + 1,  uVar10 = uVar14,  uVar14 < iVar11));\n    }\n    if ((arg1[0x4c] == 0) && (0 < *(arg1 + 0x48))) {\n        iVar3 = *(arg1 + 8);\n        if (*(iVar3 + 0x28) == '\\0') {\n            fcn.140011110(iVar3);\n        }\n        arg2 = *(arg1 + 0x40);\n        uVar10 = uVar9;\n        if (*(arg1 + 0x48) != 0) {\n            do {\n                uStack72 = 0;\n                iVar13 = fcn.140015744(&stack0xffffffffffffffb8, arg2, *(*(iVar3 + 0x18) + 8), *(arg1 + 8));\n                if (iVar13 < 1) {\n                    *arg4 = -1;\n                    break;\n                }\n                piVar4 = *arg1_00;\n                if (piVar4[2] == piVar4[1]) {\n                    if (*(piVar4 + 3) == '\\0') {\n                        *arg4 = -1;\n                    }\n                    else {\n                        *arg4 = *arg4 + 1;\n                    }\n                }\n                else {\n                    *arg4 = *arg4 + 1;\n                    piVar4[2] = piVar4[2] + 1;\n                    ***arg1_00 = uStack72;\n                    **arg1_00 = **arg1_00 + 2;\n                }\n                arg2 = arg2 + iVar13;\n                uVar14 = uVar10 + 1;\n                uVar10 = uVar14;\n            } while (uVar14 != *(arg1 + 0x48));\n        }\n    }\n    else {\n        uStack88 = *(arg1 + 8);\n        fcn.14001122c(arg1_00, *(arg1 + 0x40), *(arg1 + 0x48), arg4);\n    }\n    iVar13 = *arg4;\n    if (((-1 < iVar13) && ((*(arg1 + 0x28) >> 2 & 1) != 0)) && (0 < iVar11)) {\n        do {\n            piVar4 = *arg1_00;\n            if (piVar4[2] == piVar4[1]) {\n                if (*(piVar4 + 3) == '\\0') {\n                    iVar13 = -1;\n                }\n                else {\n                    iVar13 = iVar13 + 1;\n                }\n                *arg4 = iVar13;\n            }\n            else {\n                *arg4 = iVar13 + 1;\n                piVar4[2] = piVar4[2] + 1;\n                ***arg1_00 = 0x20;\n                **arg1_00 = **arg1_00 + 2;\n            }\n            iVar13 = *arg4;\n        } while ((iVar13 != -1) && (uVar14 = uVar9 + 1,  uVar9 = uVar14,  uVar14 < iVar11));\n    }\ncode_r0x00014001072d:\n    uVar9 = fcn.14001e9f0(uStack56 ^ &stack0xffffffffffffff88);\n    return uVar9;\n}\n",
        "token_count": 3750
    },
    "1400102f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.1400102f4(int64_t arg1)\n\n{\n    int32_t *arg4;\n    int64_t **arg1_00;\n    int16_t iVar1;\n    int64_t iVar2;\n    int64_t *piVar3;\n    bool bVar4;\n    char cVar5;\n    uint16_t uVar6;\n    uint64_t uVar7;\n    int32_t iVar8;\n    ushort uVar9;\n    int32_t iVar10;\n    uint64_t uVar11;\n    uint32_t uVar12;\n    int64_t arg2;\n    uchar auStack120 [32];\n    ulong uStack88;\n    ushort auStack72 [2];\n    uint uStack68;\n    ushort uStack64;\n    uint64_t uStack56;\n    uint64_t uVar13;\n    \n    uStack56 = *0x140037f00 ^ auStack120;\n    uVar9 = 0x78;\n    uVar6 = *(arg1 + 0x3a);\n    if (uVar6 < 0x65) {\n        if (uVar6 == 100) {\ncode_r0x0001400103d1:\n            *(arg1 + 0x28) = *(arg1 + 0x28) | 0x10;\ncode_r0x0001400103d5:\n            cVar5 = fcn.14000e6a4(arg1);\n        }\n        else if (uVar6 < 0x54) {\n            if (uVar6 == 0x53) {\ncode_r0x000140010417:\n                cVar5 = fcn.140010ffc(arg1);\n            }\n            else {\n                if (uVar6 != 0x41) {\n                    if (uVar6 == 0x43) {\ncode_r0x00014001038b:\n                        cVar5 = fcn.140010de4(arg1);\n                        goto code_r0x000140010439;\n                    }\n                    if (((uVar6 != 0x45) && (uVar6 != 0x46)) && (uVar6 != 0x47)) goto code_r0x00014001072d;\n                }\ncode_r0x000140010363:\n                cVar5 = fcn.140010aa8(arg1);\n            }\n        }\n        else {\n            if (uVar6 == 0x58) goto code_r0x000140010431;\n            if (uVar6 != 0x5a) {\n                if (uVar6 != 0x61) {\n                    if (uVar6 != 99) goto code_r0x00014001072d;\n                    goto code_r0x00014001038b;\n                }\n                goto code_r0x000140010363;\n            }\n            cVar5 = fcn.1400107d4(arg1);\n        }\n    }\n    else if (uVar6 < 0x70) {\n        if (uVar6 == 0x6f) {\n            if ((*(arg1 + 0x28) >> 5 & 1) != 0) {\n                *(arg1 + 0x28) = *(arg1 + 0x28) | 0x80;\n            }\n            cVar5 = fcn.14000e294(arg1);\n        }\n        else {\n            if (((uVar6 == 0x65) || (uVar6 == 0x66)) || (uVar6 == 0x67)) goto code_r0x000140010363;\n            if (uVar6 == 0x69) goto code_r0x0001400103d1;\n            if (uVar6 != 0x6e) goto code_r0x00014001072d;\n            cVar5 = fcn.140010ea8(arg1);\n        }\n    }\n    else {\n        if (uVar6 == 0x70) {\n            *(arg1 + 0x30) = 0x10;\n            *(arg1 + 0x34) = 0xb;\n        }\n        else {\n            if (uVar6 == 0x73) goto code_r0x000140010417;\n            if (uVar6 == 0x75) goto code_r0x0001400103d5;\n            if (uVar6 != 0x78) goto code_r0x00014001072d;\n        }\ncode_r0x000140010431:\n        cVar5 = fcn.14000eab4(arg1);\n    }\ncode_r0x000140010439:\n    uVar11 = 0;\n    if ((cVar5 == '\\0') || (*(arg1 + 0x38) != '\\0')) goto code_r0x00014001072d;\n    uVar12 = *(arg1 + 0x28);\n    uStack68 = 0;\n    uStack64 = 0;\n    uVar7 = uVar11;\n    if ((uVar12 >> 4 & 1) != 0) {\n        if ((uVar12 >> 6 & 1) == 0) {\n            if ((uVar12 & 1) != 0) {\n                uVar6 = 0x2b;\n                goto code_r0x00014001047f;\n            }\n            if ((uVar12 >> 1 & 1) == 0) goto code_r0x0001400104a5;\n            uStack68 = 0x20;\n        }\n        else {\n            uVar6 = 0x2d;\ncode_r0x00014001047f:\n            uStack68 = uVar6;\n        }\n        uVar7 = 1;\n    }\ncode_r0x0001400104a5:\n    iVar1 = *(arg1 + 0x3a);\n    if (((iVar1 - 0x58U & 0xffdf) != 0) || (bVar4 = true,  (uVar12 >> 5 & 1) == 0)) {\n        bVar4 = false;\n    }\n    if ((bVar4) || ((iVar1 - 0x41U & 0xffdf) == 0)) {\n        *(&uStack68 + uVar7 * 2) = 0x30;\n        if ((iVar1 == 0x58) || (iVar1 == 0x41)) {\n            uVar9 = 0x58;\n        }\n        *(&uStack68 + uVar7 * 2 + 2) = uVar9;\n        uVar7 = uVar7 + 2;\n    }\n    iVar8 = (*(arg1 + 0x2c) - uVar7) - *(arg1 + 0x48);\n    if (((uVar12 & 0xc) == 0) && (0 < iVar8)) {\n        iVar10 = *(arg1 + 0x20);\n        uVar13 = uVar11;\n        do {\n            iVar2 = *(arg1 + 0x460);\n            if (*(iVar2 + 0x10) == *(iVar2 + 8)) {\n                if (*(iVar2 + 0x18) == '\\0') {\n                    iVar10 = -1;\n                }\n                else {\n                    iVar10 = iVar10 + 1;\n                }\n                *(arg1 + 0x20) = iVar10;\n            }\n            else {\n                *(arg1 + 0x20) = iVar10 + 1;\n                *(iVar2 + 0x10) = *(iVar2 + 0x10) + 1;\n                ***(arg1 + 0x460) = 0x20;\n                **(arg1 + 0x460) = **(arg1 + 0x460) + 2;\n            }\n            iVar10 = *(arg1 + 0x20);\n        } while ((iVar10 != -1) && (uVar12 = uVar13 + 1,  uVar13 = uVar12,  uVar12 < iVar8));\n    }\n    uStack88 = *(arg1 + 8);\n    arg4 = arg1 + 0x20;\n    arg1_00 = arg1 + 0x460;\n    fcn.14001122c(arg1_00, &uStack68, uVar7, arg4);\n    if (((*(arg1 + 0x28) >> 3 & 1) != 0) && (((*(arg1 + 0x28) >> 2 & 1) == 0 && (0 < iVar8)))) {\n        iVar10 = *arg4;\n        uVar7 = uVar11;\n        do {\n            piVar3 = *arg1_00;\n            if (piVar3[2] == piVar3[1]) {\n                if (*(piVar3 + 3) == '\\0') {\n                    iVar10 = -1;\n                }\n                else {\n                    iVar10 = iVar10 + 1;\n                }\n                *arg4 = iVar10;\n            }\n            else {\n                *arg4 = iVar10 + 1;\n                piVar3[2] = piVar3[2] + 1;\n                ***arg1_00 = 0x30;\n                **arg1_00 = **arg1_00 + 2;\n            }\n            iVar10 = *arg4;\n        } while ((iVar10 != -1) && (uVar12 = uVar7 + 1,  uVar7 = uVar12,  uVar12 < iVar8));\n    }\n    if ((*(arg1 + 0x4c) == '\\0') && (0 < *(arg1 + 0x48))) {\n        iVar2 = *(arg1 + 8);\n        if (*(iVar2 + 0x28) == '\\0') {\n            fcn.140011110(iVar2);\n        }\n        arg2 = *(arg1 + 0x40);\n        uVar7 = uVar11;\n        if (*(arg1 + 0x48) != 0) {\n            do {\n                auStack72[0] = 0;\n                iVar10 = fcn.140015744(auStack72, arg2, *(*(iVar2 + 0x18) + 8), *(arg1 + 8));\n                if (iVar10 < 1) {\n                    *arg4 = -1;\n                    break;\n                }\n                piVar3 = *arg1_00;\n                if (piVar3[2] == piVar3[1]) {\n                    if (*(piVar3 + 3) == '\\0') {\n                        *arg4 = -1;\n                    }\n                    else {\n                        *arg4 = *arg4 + 1;\n                    }\n                }\n                else {\n                    *arg4 = *arg4 + 1;\n                    piVar3[2] = piVar3[2] + 1;\n                    ***arg1_00 = auStack72[0];\n                    **arg1_00 = **arg1_00 + 2;\n                }\n                arg2 = arg2 + iVar10;\n                uVar12 = uVar7 + 1;\n                uVar7 = uVar12;\n            } while (uVar12 != *(arg1 + 0x48));\n        }\n    }\n    else {\n        uStack88 = *(arg1 + 8);\n        fcn.14001122c(arg1_00, *(arg1 + 0x40), *(arg1 + 0x48), arg4);\n    }\n    iVar10 = *arg4;\n    if (((-1 < iVar10) && ((*(arg1 + 0x28) >> 2 & 1) != 0)) && (0 < iVar8)) {\n        do {\n            piVar3 = *arg1_00;\n            if (piVar3[2] == piVar3[1]) {\n                if (*(piVar3 + 3) == '\\0') {\n                    iVar10 = -1;\n                }\n                else {\n                    iVar10 = iVar10 + 1;\n                }\n                *arg4 = iVar10;\n            }\n            else {\n                *arg4 = iVar10 + 1;\n                piVar3[2] = piVar3[2] + 1;\n                ***arg1_00 = 0x20;\n                **arg1_00 = **arg1_00 + 2;\n            }\n            iVar10 = *arg4;\n        } while ((iVar10 != -1) && (uVar12 = uVar11 + 1,  uVar11 = uVar12,  uVar12 < iVar8));\n    }\ncode_r0x00014001072d:\n    fcn.14001e9f0(uStack56 ^ auStack120);\n    return;\n}\n",
        "token_count": 2768
    },
    "14001085": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.140010854(int64_t arg1)\n\n{\n    uint8_t uVar1;\n    ulong *puVar2;\n    int64_t *piVar3;\n    char cVar4;\n    int32_t iVar5;\n    int64_t iVar6;\n    uint8_t *puVar7;\n    char *pcVar8;\n    uint8_t *puVar9;\n    int64_t iVar10;\n    uint8_t uVar11;\n    uint64_t uVar12;\n    int64_t arg4;\n    bool bVar13;\n    ulong uStackX8;\n    \n    *(arg1 + 0x28) = *(arg1 + 0x28) | 0x10;\n    iVar5 = *(arg1 + 0x30);\n    if (iVar5 < 0) {\n        iVar5 = (-((*(arg1 + 0x39) + 0xbfU & 0xdf) != 0) & 0xfffffff9) + 0xd;\n        *(arg1 + 0x30) = iVar5;\n    }\n    else if ((iVar5 == 0) && ((*(arg1 + 0x39) == 'g' || (*(arg1 + 0x39) == 'G')))) {\n        *(arg1 + 0x30) = 1;\n        iVar5 = 1;\n    }\n    iVar10 = arg1 + 0x50;\n    cVar4 = fcn.14000d4d0(iVar10, iVar5 + 0x15d, *(arg1 + 8));\n    uVar12 = 0x200;\n    if (cVar4 == '\\0') {\n        if (*(arg1 + 0x458) == 0) {\n            iVar5 = 0x200;\n        }\n        else {\n            iVar5 = *(arg1 + 0x450) >> 1;\n        }\n        *(arg1 + 0x30) = iVar5 + -0x15d;\n    }\n    iVar6 = *(arg1 + 0x458);\n    if (*(arg1 + 0x458) == 0) {\n        iVar6 = iVar10;\n    }\n    *(arg1 + 0x40) = iVar6;\n    puVar2 = *(arg1 + 0x18);\n    *(arg1 + 0x18) = puVar2 + 1;\n    iVar6 = *(arg1 + 0x458);\n    uStackX8 = *puVar2;\n    if (iVar6 == 0) {\n        arg4 = arg1 + 0x250;\n        iVar6 = iVar10;\n    }\n    else {\n        arg4 = (*(arg1 + 0x450) >> 1) + iVar6;\n        uVar12 = *(arg1 + 0x450) >> 1;\n    }\n    fcn.1400152ac(&uStackX8, iVar6, uVar12, arg4);\n    if (((*(arg1 + 0x28) >> 5 & 1) != 0) && (*(arg1 + 0x30) == 0)) {\n        iVar10 = *(arg1 + 8);\n        if (*(iVar10 + 0x28) == '\\0') {\n            fcn.140011110(iVar10);\n        }\n        puVar7 = *(arg1 + 0x40);\n        piVar3 = *(iVar10 + 0x18);\n        uVar12 = *puVar7;\n        if (*(uVar12 + piVar3[0x22]) != 'e') {\n            do {\n                puVar7 = puVar7 + 1;\n                uVar12 = *puVar7;\n            } while ((*(*piVar3 + uVar12 * 2) & 4) != 0);\n        }\n        bVar13 = *(uVar12 + piVar3[0x22]) == 'x';\n        if (bVar13) {\n            uVar12 = puVar7[2];\n        }\n        puVar9 = puVar7 + 2;\n        if (!bVar13) {\n            puVar9 = puVar7;\n        }\n        *puVar9 = **piVar3[0x1f];\n        do {\n            puVar9 = puVar9 + 1;\n            uVar1 = *puVar9;\n            uVar11 = uVar12;\n            *puVar9 = uVar11;\n            uVar12 = uVar1;\n        } while (uVar11 != 0);\n    }\n    if (((*(arg1 + 0x39) + 0xb9U & 0xdf) == 0) && ((*(arg1 + 0x28) >> 5 & 1) == 0)) {\n        iVar10 = *(arg1 + 8);\n        if (*(iVar10 + 0x28) == '\\0') {\n            fcn.140011110(iVar10);\n        }\n        fcn.14000f3d4(*(arg1 + 0x40), iVar10 + 0x18);\n    }\n    pcVar8 = *(arg1 + 0x40);\n    cVar4 = *pcVar8;\n    if (cVar4 == '-') {\n        *(arg1 + 0x28) = *(arg1 + 0x28) | 0x40;\n        pcVar8 = pcVar8 + 1;\n        *(arg1 + 0x40) = pcVar8;\n        cVar4 = *pcVar8;\n    }\n    if ((cVar4 + 0xb7U < 0x26) && ((0x2100000021U >> (cVar4 + 0xb7U & 0x3f) & 1) != 0)) {\n        *(arg1 + 0x28) = *(arg1 + 0x28) & 0xfffffff7;\n        *(arg1 + 0x39) = 0x73;\n    }\n    iVar10 = -1;\n    do {\n        iVar10 = iVar10 + 1;\n    } while (pcVar8[iVar10] != '\\0');\n    *(arg1 + 0x48) = iVar10;\n    return 1;\n}\n",
        "token_count": 1356
    },
    "140010aa": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.140010aa8(int64_t arg1)\n\n{\n    uint8_t uVar1;\n    ulong *puVar2;\n    int64_t *piVar3;\n    char cVar4;\n    uint16_t uVar5;\n    int32_t iVar6;\n    uint32_t uVar7;\n    int64_t iVar8;\n    uint8_t *puVar9;\n    char *pcVar10;\n    uint8_t *puVar11;\n    int64_t iVar12;\n    uint8_t uVar13;\n    uint64_t uVar14;\n    int64_t arg4;\n    bool bVar15;\n    ulong uStackX8;\n    \n    *(arg1 + 0x28) = *(arg1 + 0x28) | 0x10;\n    iVar6 = *(arg1 + 0x30);\n    if (iVar6 < 0) {\n        iVar6 = (-((*(arg1 + 0x3a) - 0x41U & 0xffdf) != 0) & 0xfffffff9) + 0xd;\n        *(arg1 + 0x30) = iVar6;\n    }\n    else if ((iVar6 == 0) && ((*(arg1 + 0x3a) == 0x67 || (*(arg1 + 0x3a) == 0x47)))) {\n        *(arg1 + 0x30) = 1;\n        iVar6 = 1;\n    }\n    iVar12 = arg1 + 0x50;\n    cVar4 = fcn.14000d4d0(iVar12, iVar6 + 0x15d, *(arg1 + 8));\n    uVar14 = 0x200;\n    if (cVar4 == '\\0') {\n        if (*(arg1 + 0x458) == 0) {\n            iVar6 = 0x200;\n        }\n        else {\n            iVar6 = *(arg1 + 0x450) >> 1;\n        }\n        *(arg1 + 0x30) = iVar6 + -0x15d;\n    }\n    iVar8 = *(arg1 + 0x458);\n    if (*(arg1 + 0x458) == 0) {\n        iVar8 = iVar12;\n    }\n    *(arg1 + 0x40) = iVar8;\n    puVar2 = *(arg1 + 0x18);\n    *(arg1 + 0x18) = puVar2 + 1;\n    iVar8 = *(arg1 + 0x458);\n    uStackX8 = *puVar2;\n    if (iVar8 == 0) {\n        arg4 = arg1 + 0x250;\n        iVar8 = iVar12;\n    }\n    else {\n        arg4 = (*(arg1 + 0x450) >> 1) + iVar8;\n        uVar14 = *(arg1 + 0x450) >> 1;\n    }\n    fcn.1400152ac(&uStackX8, iVar8, uVar14, arg4);\n    if (((*(arg1 + 0x28) >> 5 & 1) != 0) && (*(arg1 + 0x30) == 0)) {\n        iVar12 = *(arg1 + 8);\n        if (*(iVar12 + 0x28) == '\\0') {\n            fcn.140011110(iVar12);\n        }\n        puVar9 = *(arg1 + 0x40);\n        piVar3 = *(iVar12 + 0x18);\n        uVar14 = *puVar9;\n        if (*(uVar14 + piVar3[0x22]) != 'e') {\n            do {\n                puVar9 = puVar9 + 1;\n                uVar14 = *puVar9;\n            } while ((*(*piVar3 + uVar14 * 2) & 4) != 0);\n        }\n        bVar15 = *(uVar14 + piVar3[0x22]) == 'x';\n        if (bVar15) {\n            uVar14 = puVar9[2];\n        }\n        puVar11 = puVar9 + 2;\n        if (!bVar15) {\n            puVar11 = puVar9;\n        }\n        *puVar11 = **piVar3[0x1f];\n        do {\n            puVar11 = puVar11 + 1;\n            uVar1 = *puVar11;\n            uVar13 = uVar14;\n            *puVar11 = uVar13;\n            uVar14 = uVar1;\n        } while (uVar13 != 0);\n    }\n    uVar5 = *(arg1 + 0x3a) - 0x47;\n    uVar14 = uVar5;\n    if (((uVar5 & 0xffdf) == 0) && (uVar7 = *(arg1 + 0x28) >> 5,  uVar14 = uVar7,  (uVar7 & 1) == 0)) {\n        iVar12 = *(arg1 + 8);\n        if (*(iVar12 + 0x28) == '\\0') {\n            fcn.140011110(iVar12);\n        }\n        uVar14 = fcn.14000f3d4(*(arg1 + 0x40), iVar12 + 0x18);\n    }\n    pcVar10 = *(arg1 + 0x40);\n    cVar4 = *pcVar10;\n    uVar14 = uVar14 & 0xffffffffffffff00;\n    if (cVar4 == '-') {\n        *(arg1 + 0x28) = *(arg1 + 0x28) | 0x40;\n        pcVar10 = pcVar10 + 1;\n        *(arg1 + 0x40) = pcVar10;\n        cVar4 = *pcVar10;\n    }\n    if ((cVar4 + 0xb7U < 0x26) && ((0x2100000021U >> (cVar4 + 0xb7U & 0x3f) & 1) != 0)) {\n        *(arg1 + 0x28) = *(arg1 + 0x28) & 0xfffffff7;\n        uVar14 = 0;\n        *(arg1 + 0x3a) = 0x73;\n    }\n    iVar12 = -1;\n    do {\n        iVar12 = iVar12 + 1;\n    } while (pcVar10[iVar12] != '\\0');\n    *(arg1 + 0x48) = iVar12;\n    return CONCAT71(uVar14 >> 8, 1);\n}\n",
        "token_count": 1455
    },
    "140010ea": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint64_t fcn.140010ea8(int64_t arg1)\n\n{\n    uint64_t **ppuVar1;\n    uint64_t *puVar2;\n    int64_t iVar3;\n    uint64_t uVar4;\n    int32_t iVar5;\n    \n    ppuVar1 = *(arg1 + 0x18);\n    *(arg1 + 0x18) = ppuVar1 + 1;\n    puVar2 = *ppuVar1;\n    uVar4 = fcn.1400158bc();\n    if (uVar4 == 0) goto code_r0x000140010ecd;\n    iVar5 = *(arg1 + 0x34);\n    if (iVar5 < 6) {\n        if (iVar5 != 5) {\n            if (iVar5 != 0) {\n                if (iVar5 == 1) {\n                    uVar4 = uVar4 & 0xffffffffffffff00;\n                    *puVar2 = *(arg1 + 0x20);\n                    goto code_r0x000140010f46;\n                }\n                iVar5 = iVar5 + -2;\n                if (iVar5 == 0) {\n                    uVar4 = *(arg1 + 0x20);\n                    *puVar2 = *(arg1 + 0x20);\n                    goto code_r0x000140010f46;\n                }\n                goto code_r0x000140010f35;\n            }\ncode_r0x000140010f57:\n            uVar4 = *(arg1 + 0x20);\n            *puVar2 = *(arg1 + 0x20);\n            goto code_r0x000140010f46;\n        }\n    }\n    else if (((iVar5 != 6) && (iVar5 != 7)) && (iVar5 = iVar5 + -9,  iVar5 != 0)) {\ncode_r0x000140010f35:\n        if (iVar5 == 1) goto code_r0x000140010f57;\n        if (iVar5 != 2) {\ncode_r0x000140010ecd:\n            iVar3 = *(arg1 + 8);\n            *(iVar3 + 0x30) = 1;\n            *(iVar3 + 0x2c) = 0x16;\n            uVar4 = fcn.14000ccf4(0, 0, 0, 0);\n            return uVar4 & 0xffffffffffffff00;\n        }\n    }\n    uVar4 = *(arg1 + 0x20);\n    *puVar2 = uVar4;\ncode_r0x000140010f46:\n    *(arg1 + 0x38) = 1;\n    return CONCAT71(uVar4 >> 8, 1);\n}\n",
        "token_count": 599
    },
    "14001109": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t fcn.140011098(int64_t arg1, ulong arg2)\n\n{\n    int64_t arg1_00;\n    uint8_t *puVar1;\n    uint8_t *puVar2;\n    int32_t iVar3;\n    \n    arg1_00 = *(arg1 + 8);\n    if (*(arg1_00 + 0x28) == '\\0') {\n        fcn.140011110(arg1_00);\n    }\n    puVar2 = *(arg1 + 0x40);\n    iVar3 = 0;\n    if (0 < arg2) {\n        do {\n            if (*puVar2 == 0) {\n                return iVar3;\n            }\n            puVar1 = puVar2 + 1;\n            if (-1 < *(**(arg1_00 + 0x18) + *puVar2 * 2)) {\n                puVar1 = puVar2;\n            }\n            iVar3 = iVar3 + 1;\n            puVar2 = puVar1 + 1;\n        } while (iVar3 < arg2);\n    }\n    return iVar3;\n}\n",
        "token_count": 242
    },
    "1400112d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_28h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.1400112d4(uint64_t arg1, uchar *arg2, uint64_t arg3, int64_t arg4)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    uint uVar3;\n    uint uVar4;\n    uint uVar5;\n    uint uVar6;\n    uint *in_stack_00000028;\n    ulong var_3e0h;\n    ulong var_3e8h;\n    ulong var_3f0h;\n    ulong var_3f8h;\n    ulong var_400h;\n    uchar auStack1352 [32];\n    ulong uStack1320;\n    int64_t *piStack1312;\n    uchar *puStack1304;\n    uint64_t uStack1296;\n    uint64_t uStack1288;\n    uchar uStack1280;\n    uint uStack1279;\n    ushort uStack1275;\n    uchar uStack1273;\n    int64_t aiStack1272 [2];\n    uchar uStack1256;\n    uchar auStack1248 [16];\n    char cStack1232;\n    uint uStack1228;\n    char cStack1224;\n    uint uStack1220;\n    char cStack1216;\n    uint64_t uStack1208;\n    int64_t *piStack1200;\n    int64_t iStack1192;\n    uint uStack1176;\n    uchar uStack1172;\n    ulong uStack1168;\n    uint uStack1160;\n    ushort uStack1152;\n    uint uStack1136;\n    uchar uStack1132;\n    ulong var_80h;\n    ulong var_bp_78h;\n    ulong var_70h;\n    ulong var_68h;\n    ulong var_bp_60h;\n    ulong var_58h;\n    uchar **var_bp_50h;\n    uint var_bp_48h;\n    uint64_t var_bp_40h;\n    ulong var_bp_38h;\n    ulong var_28h;\n    \n    var_bp_40h = *0x140037f00 ^ auStack1352;\n    aiStack1272[0] = 0;\n    uStack1256 = 0;\n    cStack1232 = '\\0';\n    cStack1224 = '\\0';\n    cStack1216 = '\\0';\n    if (in_stack_00000028 == NULL) {\n        uVar3 = *0x140037158;\n        uVar4 = *0x14003715c;\n        uVar5 = *0x140037160;\n        uVar6 = *0x140037164;\n        if (*0x140037f80 == 0) goto code_r0x000140011343;\n    }\n    else {\n        uVar3 = *in_stack_00000028;\n        uVar4 = in_stack_00000028[1];\n        uVar5 = in_stack_00000028[2];\n        uVar6 = in_stack_00000028[3];\ncode_r0x000140011343:\n        cStack1232 = '\\x01';\n        auStack1248 = CONCAT412(uVar6, CONCAT48(uVar5, CONCAT44(uVar4, uVar3)));\n    }\n    if ((arg4 == 0) || ((arg3 != 0 && (arg2 == NULL)))) {\n        piStack1312 = aiStack1272;\n        cStack1224 = '\\x01';\n        uStack1320 = 0;\n        uStack1228 = 0x16;\n        fcn.14000ccf4(0, 0, 0, 0);\n        goto code_r0x0001400114c2;\n    }\n    uStack1279 = 0;\n    uStack1275 = 0;\n    uStack1273 = 0;\n    uStack1288 = 0;\n    if (((arg1 & 2) != 0) || (uStack1280 = 0,  arg2 == NULL)) {\n        uStack1280 = 1;\n    }\n    piStack1200 = aiStack1272;\n    uStack1176 = 0;\n    var_bp_50h = &puStack1304;\n    uStack1172 = 0;\n    uStack1168 = 0;\n    uStack1160 = 0;\n    uStack1152 = 0;\n    uStack1136 = 0;\n    uStack1132 = 0;\n    _var_bp_60h = ZEXT816(0);\n    var_bp_48h = 0;\n    puStack1304 = arg2;\n    uStack1296 = arg3;\n    uStack1208 = arg1;\n    iStack1192 = arg4;\n    iVar1 = fcn.14000f560(&uStack1208, arg2, arg3);\n    if (arg2 == NULL) {\ncode_r0x0001400114b6:\n        fcn.140012664(var_58h);\n    }\n    else {\n        if ((arg1 & 1) == 0) {\n            if ((arg1 & 2) != 0) {\n                if (arg3 != 0) {\n                    if (iVar1 < 0) {\n                        *arg2 = 0;\n                    }\n                    else {\n                        if (uStack1288 != arg3) goto code_r0x0001400114b2;\n                        arg2[arg3 - 1] = 0;\n                    }\n                }\n                goto code_r0x0001400114b6;\n            }\n            if (arg3 != 0) {\n                if (uStack1288 == arg3) {\n                    arg2[arg3 - 1] = 0;\n                    fcn.140012664(var_58h);\n                    goto code_r0x0001400114c2;\n                }\n                goto code_r0x0001400114b2;\n            }\n        }\n        else if ((arg3 != 0) || (iVar1 == 0)) {\n            if (uStack1288 != arg3) {\ncode_r0x0001400114b2:\n                arg2[uStack1288] = 0;\n                goto code_r0x0001400114b6;\n            }\n            if ((iVar1 < 0) || (iVar1 <= arg3)) goto code_r0x0001400114b6;\n        }\n        fcn.140012664(var_58h);\n    }\ncode_r0x0001400114c2:\n    uVar3 = uStack1228;\n    if (cStack1232 == '\\x02') {\n        *(aiStack1272[0] + 0x3a8) = *(aiStack1272[0] + 0x3a8) & 0xfffffffd;\n    }\n    if (cStack1224 != '\\0') {\n        iVar2 = fcn.14000c93c(aiStack1272);\n        *(iVar2 + 0x20) = uVar3;\n    }\n    if (cStack1216 != '\\0') {\n        iVar2 = fcn.14000c93c(aiStack1272);\n        *(iVar2 + 0x24) = uStack1220;\n    }\n    fcn.14001e9f0(var_bp_40h ^ auStack1352);\n    return;\n}\n",
        "token_count": 1607
    },
    "14001152": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_28h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.140011528(uint64_t arg1, ushort *arg2, uint64_t arg3, int64_t arg4)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    uint uVar3;\n    uint uVar4;\n    uint uVar5;\n    uint uVar6;\n    uint *in_stack_00000028;\n    ulong var_3e0h;\n    ulong var_3e8h;\n    ulong var_3f0h;\n    ulong var_3f8h;\n    ulong var_400h;\n    uchar auStack1352 [32];\n    ulong uStack1320;\n    int64_t *piStack1312;\n    ushort *puStack1304;\n    uint64_t uStack1296;\n    uint64_t uStack1288;\n    uchar uStack1280;\n    uint uStack1279;\n    ushort uStack1275;\n    uchar uStack1273;\n    int64_t aiStack1272 [2];\n    uchar uStack1256;\n    uchar auStack1248 [16];\n    char cStack1232;\n    uint uStack1228;\n    char cStack1224;\n    uint uStack1220;\n    char cStack1216;\n    uint64_t uStack1208;\n    int64_t *piStack1200;\n    int64_t iStack1192;\n    uint uStack1176;\n    uchar uStack1172;\n    ulong uStack1168;\n    uint uStack1160;\n    uchar uStack1152;\n    ushort uStack1150;\n    uint uStack1136;\n    uchar uStack1132;\n    ulong var_80h;\n    ulong var_bp_78h;\n    ulong var_70h;\n    ulong var_68h;\n    ulong var_bp_60h;\n    ulong var_58h;\n    ushort **var_bp_50h;\n    uint var_bp_48h;\n    uint64_t var_bp_40h;\n    ulong var_bp_38h;\n    ulong var_28h;\n    \n    var_bp_40h = *0x140037f00 ^ auStack1352;\n    aiStack1272[0] = 0;\n    uStack1256 = 0;\n    cStack1232 = '\\0';\n    cStack1224 = '\\0';\n    cStack1216 = '\\0';\n    if (in_stack_00000028 == NULL) {\n        uVar3 = *0x140037158;\n        uVar4 = *0x14003715c;\n        uVar5 = *0x140037160;\n        uVar6 = *0x140037164;\n        if (*0x140037f80 == 0) goto code_r0x000140011597;\n    }\n    else {\n        uVar3 = *in_stack_00000028;\n        uVar4 = in_stack_00000028[1];\n        uVar5 = in_stack_00000028[2];\n        uVar6 = in_stack_00000028[3];\ncode_r0x000140011597:\n        cStack1232 = '\\x01';\n        auStack1248 = CONCAT412(uVar6, CONCAT48(uVar5, CONCAT44(uVar4, uVar3)));\n    }\n    if ((arg4 == 0) || ((arg3 != 0 && (arg2 == NULL)))) {\n        piStack1312 = aiStack1272;\n        cStack1224 = '\\x01';\n        uStack1320 = 0;\n        uStack1228 = 0x16;\n        fcn.14000ccf4(0, 0, 0, 0);\n        goto code_r0x00014001171e;\n    }\n    uStack1279 = 0;\n    uStack1275 = 0;\n    uStack1273 = 0;\n    uStack1288 = 0;\n    if (((arg1 & 2) != 0) || (uStack1280 = 0,  arg2 == NULL)) {\n        uStack1280 = 1;\n    }\n    piStack1200 = aiStack1272;\n    uStack1176 = 0;\n    var_bp_50h = &puStack1304;\n    uStack1172 = 0;\n    uStack1168 = 0;\n    uStack1160 = 0;\n    uStack1152 = 0;\n    uStack1150 = 0;\n    uStack1136 = 0;\n    uStack1132 = 0;\n    _var_bp_60h = ZEXT816(0);\n    var_bp_48h = 0;\n    puStack1304 = arg2;\n    uStack1296 = arg3;\n    uStack1208 = arg1;\n    iStack1192 = arg4;\n    iVar1 = fcn.14000f8e0(&uStack1208);\n    if (arg2 == NULL) {\ncode_r0x000140011712:\n        fcn.140012664(var_58h);\n    }\n    else {\n        if ((arg1 & 1) == 0) {\n            if ((arg1 & 2) != 0) {\n                if (arg3 != 0) {\n                    if (iVar1 < 0) {\n                        *arg2 = 0;\n                    }\n                    else {\n                        if (uStack1288 != arg3) goto code_r0x00014001170d;\n                        arg2[arg3 - 1] = 0;\n                    }\n                }\n                goto code_r0x000140011712;\n            }\n            if (arg3 != 0) {\n                if (uStack1288 == arg3) {\n                    arg2[arg3 - 1] = 0;\n                    fcn.140012664(var_58h);\n                    goto code_r0x00014001171e;\n                }\n                goto code_r0x00014001170d;\n            }\n        }\n        else if ((arg3 != 0) || (iVar1 == 0)) {\n            if (uStack1288 != arg3) {\ncode_r0x00014001170d:\n                arg2[uStack1288] = 0;\n                goto code_r0x000140011712;\n            }\n            if ((iVar1 < 0) || (iVar1 <= arg3)) goto code_r0x000140011712;\n        }\n        fcn.140012664(var_58h);\n    }\ncode_r0x00014001171e:\n    uVar3 = uStack1228;\n    if (cStack1232 == '\\x02') {\n        *(aiStack1272[0] + 0x3a8) = *(aiStack1272[0] + 0x3a8) & 0xfffffffd;\n    }\n    if (cStack1224 != '\\0') {\n        iVar2 = fcn.14000c93c(aiStack1272);\n        *(iVar2 + 0x20) = uVar3;\n    }\n    if (cStack1216 != '\\0') {\n        iVar2 = fcn.14000c93c(aiStack1272);\n        *(iVar2 + 0x24) = uStack1220;\n    }\n    fcn.14001e9f0(var_bp_40h ^ auStack1352);\n    return;\n}\n",
        "token_count": 1603
    },
    "140011a9": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint64_t fcn.140011a98(ulong arg1, ulong arg2, int64_t **arg3)\n\n{\n    int64_t iVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint64_t uVar4;\n    \n    uVar4 = arg1;\n    uVar2 = 0;\n    uVar3 = arg1 + 1;\n    if (arg3 == NULL) {\n        iVar1 = fcn.1400125dc(arg1);\n        if (uVar3 < 0x101) {\n            uVar2 = *(iVar1 + uVar4 * 2) & arg2;\n        }\n        uVar4 = uVar2;\n    }\n    else if (uVar3 < 0x101) {\n        uVar4 = *(**arg3 + uVar4 * 2) & arg2;\n    }\n    else if (*(*arg3 + 1) < 2) {\n        uVar4 = 0;\n    }\n    else {\n        uVar4 = fcn.140015b70(uVar4 & 0xffffffff, arg2, arg3);\n    }\n    return uVar4;\n}\n",
        "token_count": 257
    },
    "140011b1": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nulong fcn.140011b10(ulong arg1, ulong *arg2)\n\n{\n    ulong uVar1;\n    int64_t iVar2;\n    ulong in_R8;\n    ulong var_50h;\n    ulong *var_48h;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_28h;\n    uint uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_bp_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_18h._0_1_ = *0x140037f80 == 0;\n    var_30h._0_1_ = 0;\n    var_bp_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (var_18h) {\n        var_28h._0_4_ = *0x140037158;\n        var_28h._4_4_ = *0x14003715c;\n        uStack40 = *0x140037160;\n        uStack36 = *0x140037164;\n    }\n    if (arg2 != NULL) {\n        *arg2 = arg1;\n    }\n    var_50h = arg1;\n    var_48h = arg2;\n    uVar1 = fcn.1400117bc(&var_40h, &var_50h, in_R8);\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_bp_10h != '\\0') {\n        iVar2 = fcn.14000c93c(&var_40h);\n        *(iVar2 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar2 = fcn.14000c93c(&var_40h);\n        *(iVar2 + 0x24) = var_bp_10h._4_4_;\n    }\n    return uVar1;\n}\n",
        "token_count": 498
    },
    "140011be": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint16_t fcn.140011be0(ulong noname_0, ulong arg2)\n\n{\n    int32_t iVar1;\n    uint8_t uVar2;\n    uint16_t auStackX8 [8];\n    uint16_t uStackX24;\n    int64_t iStack40;\n    int64_t iStack32;\n    char cStack16;\n    \n    if (noname_0 == 0xffff) {\n        return 0xffff;\n    }\n    auStackX8[0] = noname_0;\n    fcn.14000c5c0(&iStack40, arg2);\n    uVar2 = auStackX8[0];\n    if (*(iStack32 + 0xc) == 0xfde9) {\n        if (0x7f < auStackX8[0]) {\ncode_r0x000140011c7c:\n            iVar1 = fcn.140015c78(*(iStack32 + 0x138), 0x100, auStackX8, 1);\n            if (iVar1 != 0) {\n                auStackX8[0] = uStackX24;\n            }\n            goto code_r0x000140011cb6;\n        }\n        if ((*(\n              L\"         (((((                  H\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x10\\x10\\x10\\x10\\x10\\x10\\x10\u0181\u0181\u0181\u0181\u0181\u0181\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\\x10\\x10\\x10\\x10\\x10\\x10\u0182\u0182\u0182\u0182\u0182\u0182\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\\x10\\x10\\x10\\x10      (                          \\b\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\u0112\\x10\\x100\\x10\\x10\\x10\\x10\\x14\\x14\\x10\u0112\\x10\\x10\\x10\\x14\u0112\\x10\\x10\\x10\\x10\\x10\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\\x10\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\\x10\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0101\"\n              + uVar2) & 1) == 0) {\n            auStackX8[0] = auStackX8[0] & 0xff;\n            goto code_r0x000140011cb6;\n        }\n    }\n    else {\n        if (0xff < auStackX8[0]) {\n            if (*(iStack32 + 0x138) == 0) goto code_r0x000140011cb6;\n            goto code_r0x000140011c7c;\n        }\n        if ((*(\n              L\"         (((((                  H\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x10\\x10\\x10\\x10\\x10\\x10\\x10\u0181\u0181\u0181\u0181\u0181\u0181\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\\x10\\x10\\x10\\x10\\x10\\x10\u0182\u0182\u0182\u0182\u0182\u0182\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\\x10\\x10\\x10\\x10      (                          \\b\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\u0112\\x10\\x100\\x10\\x10\\x10\\x10\\x14\\x14\\x10\u0112\\x10\\x10\\x10\\x14\u0112\\x10\\x10\\x10\\x10\\x10\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\\x10\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\\x10\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0101\"\n              + uVar2) & 1) == 0) {\n            auStackX8[0] = auStackX8[0] & 0xff;\n            goto code_r0x000140011cb6;\n        }\n    }\n    auStackX8[0] = *(*(iStack32 + 0x110) + uVar2);\ncode_r0x000140011cb6:\n    if (cStack16 != '\\0') {\n        *(iStack40 + 0x3a8) = *(iStack40 + 0x3a8) & 0xfffffffd;\n    }\n    return auStackX8[0];\n}\n",
        "token_count": 1209
    },
    "1400129c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.1400129c0(ulong arg1)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_28h;\n    uint uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_bp_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_18h._0_1_ = *0x140037f80 == 0;\n    var_30h._0_1_ = 0;\n    var_bp_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (var_18h) {\n        var_28h._0_4_ = *0x140037158;\n        var_28h._4_4_ = *0x14003715c;\n        uStack40 = *0x140037160;\n        uStack36 = *0x140037164;\n    }\n    uVar1 = fcn.140012a58(arg1, &var_40h);\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_bp_10h != '\\0') {\n        iVar2 = fcn.14000c93c(&var_40h);\n        *(iVar2 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar2 = fcn.14000c93c(&var_40h);\n        *(iVar2 + 0x24) = var_bp_10h._4_4_;\n    }\n    return uVar1;\n}\n",
        "token_count": 429
    },
    "140012a5": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nulong fcn.140012a58(ulong arg1, ulong arg2)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    ulong uVar5;\n    uint64_t uVar6;\n    \n    uVar6 = arg1;\n    iVar3 = fcn.1400185fc(uVar6 & 0xffffffff);\n    if (iVar3 != -1) {\n        if (((arg1 == 1) && ((*(*0x140037fd0 + 200) & 1) != 0)) || ((arg1 == 2 && ((*(*0x140037fd0 + 0x80) & 1) != 0))))\n        {\n            iVar3 = fcn.1400185fc(2);\n            iVar4 = fcn.1400185fc(1);\n            if (iVar4 == iVar3) goto code_r0x000140012a7a;\n        }\n        fcn.1400185fc(uVar6 & 0xffffffff);\n        iVar1 = (*_sym.imp.KERNEL32.dll_CloseHandle)();\n        if (iVar1 == 0) {\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            goto code_r0x000140012ad8;\n        }\n    }\ncode_r0x000140012a7a:\n    uVar2 = 0;\ncode_r0x000140012ad8:\n    fcn.140018540(uVar6 & 0xffffffff);\n    *(*((uVar6 >> 6) * 8 + 0x140037fd0) + 0x38 + (arg1 & 0x3f) * 0x48) = 0;\n    if (uVar2 == 0) {\n        uVar5 = 0;\n    }\n    else {\n        fcn.14000d394(uVar2, arg2);\n        uVar5 = 0xffffffff;\n    }\n    return uVar5;\n}\n",
        "token_count": 435
    },
    "140012cc": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.140012ccc(ulong noname_0, ulong *arg2, int64_t **arg3, ulong *arg4)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    \n    fcn.14001286c(*arg2);\n    if ((**arg3 != 0) && (uVar1 = *(**arg3 + 0x14),  (uVar1 >> 0xd & 1) != 0)) {\n        if ((((uVar1 & 3) == 2) && ((uVar1 & 0xc0) != 0)) || ((uVar1 >> 0xb & 1) != 0)) {\n            if ((*arg3[2] != '\\0') || ((*(**arg3 + 0x14) >> 1 & 1) != 0)) {\n                iVar2 = fcn.140012f38(**arg3);\n                if (iVar2 == -1) {\n                    *arg3[3] = 0xffffffff;\n                }\n                else {\n                    *arg3[1] = *arg3[1] + 1;\n                }\n            }\n        }\n        else {\n            *arg3[1] = *arg3[1] + 1;\n        }\n    }\n    fcn.140012878(*arg4);\n    return;\n}\n",
        "token_count": 294
    },
    "140012d6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.140012d68(ulong noname_0, uint32_t *arg2, int32_t **arg3, uint32_t *arg4)\n\n{\n    int64_t *piVar1;\n    uint32_t uVar2;\n    int64_t *piVar3;\n    uchar auStackX16 [16];\n    uint32_t *puStackX32;\n    int64_t iStack88;\n    int64_t iStack80;\n    int64_t iStack72;\n    int64_t *piStack64;\n    int64_t *piStack56;\n    int32_t *piStack48;\n    int32_t *piStack40;\n    int32_t *piStack32;\n    \n    puStackX32 = arg4;\n    fcn.1400161d8(*arg2);\n    piVar1 = *0x140037f98 + *0x140037f90;\n    for (piVar3 = *0x140037f98; piStack64 = piVar3,  piVar3 != piVar1; piVar3 = piVar3 + 1) {\n        iStack88 = *piVar3;\n        if ((iStack88 != 0) && (uVar2 = *(iStack88 + 0x14),  (uVar2 >> 0xd & 1) != 0)) {\n            if ((((uVar2 & 3) == 2) && ((uVar2 & 0xc0) != 0)) || ((uVar2 >> 0xb & 1) != 0)) {\n                piStack32 = arg3[2];\n                piStack40 = arg3[1];\n                piStack48 = *arg3;\n                piStack56 = &iStack88;\n                iStack80 = iStack88;\n                iStack72 = iStack88;\n                fcn.140012ccc(auStackX16, &iStack72, &piStack56, &iStack80);\n            }\n            else {\n                **arg3 = **arg3 + 1;\n            }\n        }\n    }\n    fcn.140016238(*arg4);\n    return;\n}\n",
        "token_count": 464
    },
    "140012ea": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nulong fcn.140012eac(ulong *arg1, ulong arg2)\n\n{\n    ulong arg2_00;\n    uint32_t uVar1;\n    uint32_t uVar2;\n    \n    if (((*(arg1 + 0x14) & 3) == 2) && ((*(arg1 + 0x14) & 0xc0) != 0)) {\n        uVar2 = *arg1 - *(arg1 + 1);\n        *(arg1 + 2) = 0;\n        arg2_00 = arg1[1];\n        *arg1 = arg2_00;\n        if (0 < uVar2) {\n            uVar1 = fcn.1400126a0(arg1);\n            uVar1 = fcn.1400138b4(uVar1, arg2_00, uVar2, arg2);\n            if (uVar2 != uVar1) {\n                LOCK();\n                *(arg1 + 0x14) = *(arg1 + 0x14) | 0x10;\n                return 0xffffffff;\n            }\n            if ((*(arg1 + 0x14) >> 2 & 1) != 0) {\n                LOCK();\n                *(arg1 + 0x14) = *(arg1 + 0x14) & 0xfffffffd;\n            }\n        }\n    }\n    return 0;\n}\n",
        "token_count": 304
    },
    "140012f3": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.140012f38(int64_t arg1)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int64_t iVar4;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_28h;\n    uint uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_bp_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_18h._0_1_ = *0x140037f80 == 0;\n    var_30h._0_1_ = 0;\n    var_bp_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (var_18h) {\n        var_28h._0_4_ = *0x140037158;\n        var_28h._4_4_ = *0x14003715c;\n        uStack40 = *0x140037160;\n        uStack36 = *0x140037164;\n    }\n    if (arg1 == 0) {\n        uVar1 = fcn.140012e4c(0);\n        goto code_r0x000140012fbd;\n    }\n    iVar2 = fcn.140012eac(arg1, &var_40h);\n    if (iVar2 == 0) {\n        if ((*(arg1 + 0x14) >> 0xb & 1) != 0) {\n            uVar3 = fcn.1400126a0(arg1);\n            iVar2 = fcn.140018700(uVar3);\n            if (iVar2 != 0) goto code_r0x000140012f98;\n        }\n        uVar1 = 0;\n    }\n    else {\ncode_r0x000140012f98:\n        uVar1 = 0xffffffff;\n    }\ncode_r0x000140012fbd:\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_bp_10h != '\\0') {\n        iVar4 = fcn.14000c93c(&var_40h);\n        *(iVar4 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar4 = fcn.14000c93c(&var_40h);\n        *(iVar4 + 0x24) = var_bp_10h._4_4_;\n    }\n    return uVar1;\n}\n",
        "token_count": 614
    },
    "14001301": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.140013014(ulong *arg1, ulong arg2, uint8_t *arg3, uint64_t arg4)\n\n{\n    uint8_t uVar1;\n    char cVar2;\n    uint uVar3;\n    uint64_t uVar4;\n    char *pcVar5;\n    uint64_t uVar6;\n    uint32_t uVar7;\n    uint32_t uVar8;\n    int64_t iVar9;\n    uchar *puVar10;\n    uint8_t *puVar11;\n    uint64_t uVar12;\n    int64_t arg3_00;\n    ulong uVar13;\n    int32_t iVar14;\n    uint64_t uVar15;\n    int64_t iVar16;\n    uchar *in_stack_00000028;\n    uchar auStack264 [32];\n    uchar *puStack232;\n    uint uStack224;\n    ulong uStack216;\n    ulong uStack208;\n    uint16_t auStack200 [2];\n    uint uStack196;\n    uint32_t auStack192 [2];\n    uint8_t *puStack184;\n    uchar *puStack176;\n    uint64_t uStack168;\n    uint32_t uStack160;\n    int32_t iStack156;\n    uint8_t *puStack152;\n    int64_t iStack144;\n    ulong uStack136;\n    uchar *puStack128;\n    uint8_t *puStack120;\n    ulong uStack112;\n    int64_t iStack104;\n    ulong uStack96;\n    uchar auStack88 [8];\n    uint8_t uStack80;\n    uint8_t uStack79;\n    uchar auStack72 [8];\n    uint64_t uStack64;\n    \n    uStack96 = 0xfffffffffffffffe;\n    uStack64 = *0x140037f00 ^ auStack264;\n    puStack176 = in_stack_00000028;\n    iVar16 = arg2 >> 6;\n    uVar4 = arg2 & 0x3f;\n    uStack112 = *(*(iVar16 * 8 + 0x140037fd0) + 0x28 + uVar4 * 0x48);\n    puStack184 = arg3 + (arg4 & 0xffffffff);\n    puStack152 = arg3;\n    iStack144 = iVar16;\n    uStack160 = (*_sym.imp.KERNEL32.dll_GetConsoleOutputCP)();\n    uVar12 = 0;\n    if (puStack176[0x28] == '\\0') {\n        fcn.140011110(puStack176);\n    }\n    iStack156 = *(*(puStack176 + 0x18) + 0xc);\n    *arg1 = 0;\n    *(arg1 + 1) = 0;\n    uVar6 = uVar12;\n    iVar9 = iVar16;\n    if (puStack152 < arg3 + (arg4 & 0xffffffff)) {\n        do {\n            iStack104 = iVar9;\n            auStack200[0] = auStack200[0] & 0xff00 | *arg3;\n            uStack196 = 0;\n            uVar15 = 1;\n            if (iStack156 == 0xfde9) {\n                pcVar5 = uVar4 * 0x48 + 0x3e + *(iStack104 * 8 + 0x140037fd0);\n                uVar6 = uVar12;\n                uVar15 = uVar12;\n                do {\n                    uVar7 = uVar6;\n                    if (*pcVar5 == '\\0') break;\n                    uVar7 = uVar7 + 1;\n                    uVar6 = uVar7;\n                    uVar15 = uVar15 + 1;\n                    pcVar5 = pcVar5 + 1;\n                } while (uVar15 < 5);\n                if (uVar15 < 1) {\n                    cVar2 = *(*arg3 + 0x140037dd0);\n                    iVar14 = cVar2 + 1;\n                    iVar16 = puStack184 - arg3;\n                    if (iVar16 < iVar14) {\n                        uVar6 = uVar12;\n                        if (0 < iVar16) {\n                            do {\n                                *(*(iStack144 * 8 + 0x140037fd0) + uVar12 + 0x3e + uVar4 * 0x48) = arg3[uVar12];\n                                uVar7 = uVar6 + 1;\n                                uVar12 = uVar12 + 1;\n                                uVar6 = uVar7;\n                            } while (uVar7 < iVar16);\n                        }\n                        *(arg1 + 4) = *(arg1 + 4) + iVar16;\n                        break;\n                    }\n                    uStack168 = 0;\n                    uVar7 = (iVar14 == 4) + 1;\n                    puStack232 = puStack176;\n                    puStack120 = arg3;\n                    iVar16 = fcn.140018c24(&uStack196, &puStack120, uVar7, &uStack168);\n                    if (iVar16 == -1) break;\n                    uVar15 = uVar7;\n                    puVar11 = arg3 + cVar2;\n                    iVar16 = iStack144;\n                }\n                else {\n                    iVar14 = *(*(*(iVar16 * 8 + 0x140037fd0) + 0x3e + uVar4 * 0x48) + 0x140037dd0) + 1;\n                    uVar7 = iVar14 - uVar7;\n                    uStack168 = uStack168 & 0xffffffff00000000 | uVar7;\n                    iVar9 = puStack184 - arg3;\n                    arg3_00 = uVar7;\n                    if (iVar9 < arg3_00) {\n                        if (0 < iVar9) {\n                            uVar6 = uVar15;\n                            do {\n                                *(*(iVar16 * 8 + 0x140037fd0) + uVar6 + 0x3e + uVar4 * 0x48) = arg3[uVar6 - uVar15];\n                                uVar7 = uVar12 + 1;\n                                uVar12 = uVar7;\n                                uVar6 = uVar6 + 1;\n                            } while (uVar7 < iVar9);\n                        }\n                        *(arg1 + 4) = *(arg1 + 4) + iVar9;\n                        break;\n                    }\n                    puVar10 = uVar4 * 0x48 + 0x3e + *(iStack104 * 8 + 0x140037fd0);\n                    uVar6 = uVar12;\n                    do {\n                        auStack88[uVar6] = *puVar10;\n                        uVar6 = uVar6 + 1;\n                        puVar10 = puVar10 + 1;\n                    } while (uVar6 < uVar15);\n                    uVar6 = uVar12;\n                    if (0 < arg3_00) {\n                        fcn.140020a40(auStack88 + uVar15, arg3, arg3_00);\n                    }\n                    do {\n                        *(*(iVar16 * 8 + 0x140037fd0) + uVar6 + 0x3e + uVar4 * 0x48) = 0;\n                        uVar6 = uVar6 + 1;\n                    } while (uVar6 < uVar15);\n                    uStack136 = 0;\n                    puStack128 = auStack88;\n                    uVar7 = (iVar14 == 4) + 1;\n                    uVar15 = uVar7;\n                    puStack232 = puStack176;\n                    iVar9 = fcn.140018c24(&uStack196, &puStack128, uVar7, &uStack136);\n                    if (iVar9 == -1) break;\n                    puVar11 = arg3 + (uStack168 + -1);\n                }\n            }\n            else {\n                iVar9 = *(iVar16 * 8 + 0x140037fd0);\n                uVar1 = *(iVar9 + 0x3d + uVar4 * 0x48);\n                if ((uVar1 & 4) == 0) {\n                    if (*(**(puStack176 + 0x18) + *arg3 * 2) < 0) {\n                        puVar11 = arg3 + 1;\n                        if (puVar11 < puStack184) {\n                            iVar14 = fcn.140015744(&uStack196, arg3, 2, puStack176);\n                            if (iVar14 != -1) goto code_r0x00014001330a;\n                        }\n                        else {\n                            *(iVar9 + 0x3e + uVar4 * 0x48) = *arg3;\n                            puVar11 = *(iVar16 * 8 + 0x140037fd0) + 0x3d + uVar4 * 0x48;\n                            *puVar11 = *puVar11 | 4;\n                            *(arg1 + 4) = uVar6 + 1;\n                        }\n                        break;\n                    }\n                    uVar13 = 1;\n                    puVar11 = arg3;\n                }\n                else {\n                    uStack80 = *(iVar9 + 0x3e + uVar4 * 0x48);\n                    uStack79 = *arg3;\n                    *(iVar9 + 0x3d + uVar4 * 0x48) = uVar1 & 0xfb;\n                    uVar13 = 2;\n                    puVar11 = &uStack80;\n                }\n                iVar14 = fcn.140015744(&uStack196, puVar11, uVar13, puStack176);\n                puVar11 = arg3;\n                if (iVar14 == -1) break;\n            }\ncode_r0x00014001330a:\n            arg3 = puVar11 + 1;\n            uStack208 = 0;\n            uStack216 = 0;\n            uStack224 = 5;\n            puStack232 = auStack72;\n            uVar7 = fcn.1400187f4(uStack160, 0, &uStack196, uVar15);\n            uVar13 = uStack112;\n            if (uVar7 == 0) break;\n            puStack232 = NULL;\n            iVar14 = (*_sym.imp.KERNEL32.dll_WriteFile)(uStack112, auStack72, uVar7, auStack192);\n            if (iVar14 == 0) {\ncode_r0x000140013457:\n                uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                *arg1 = uVar3;\n                break;\n            }\n            uVar8 = (arg3 - puStack152) + *(arg1 + 1);\n            *(arg1 + 4) = uVar8;\n            if (auStack192[0] < uVar7) break;\n            if (auStack200[0] == '\\n') {\n                auStack200[0] = 0xd;\n                puStack232 = NULL;\n                iVar14 = (*_sym.imp.KERNEL32.dll_WriteFile)(uVar13, auStack200, 1, auStack192);\n                if (iVar14 == 0) goto code_r0x000140013457;\n                if (auStack192[0] == 0) break;\n                *(arg1 + 1) = *(arg1 + 1) + 1;\n                *(arg1 + 4) = *(arg1 + 4) + 1;\n                uVar8 = *(arg1 + 4);\n            }\n            uVar6 = uVar8;\n            iVar9 = iStack104;\n        } while (arg3 < puStack184);\n    }\n    fcn.14001e9f0(uStack64 ^ auStack264);\n    return;\n}\n",
        "token_count": 2587
    },
    "14001381": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.14001381c(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_28h;\n    uint uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_bp_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_18h._0_1_ = *0x140037f80 == 0;\n    var_30h._0_1_ = 0;\n    var_bp_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (var_18h) {\n        var_28h._0_4_ = *0x140037158;\n        var_28h._4_4_ = *0x14003715c;\n        uStack40 = *0x140037160;\n        uStack36 = *0x140037164;\n    }\n    uVar1 = fcn.1400138b4(arg1, arg2, arg3, &var_40h);\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_bp_10h != '\\0') {\n        iVar2 = fcn.14000c93c(&var_40h);\n        *(iVar2 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar2 = fcn.14000c93c(&var_40h);\n        *(iVar2 + 0x24) = var_bp_10h._4_4_;\n    }\n    return uVar1;\n}\n",
        "token_count": 443
    },
    "1400139d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_18h\n// WARNING: Variable defined which should be unmapped: lpMode\n// WARNING: Variable defined which should be unmapped: var_30h\n// WARNING: Variable defined which should be unmapped: lpNumberOfBytesWritten\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t fcn.1400139d4(ulong arg1, int16_t *arg2, ulong arg3, int64_t arg4)\n\n{\n    char cVar1;\n    int64_t iVar2;\n    uint64_t uVar3;\n    int16_t iVar4;\n    int16_t iVar5;\n    int32_t iVar6;\n    uint32_t uVar7;\n    uint64_t uVar8;\n    uint64_t *puVar9;\n    int32_t iVar10;\n    int64_t iVar11;\n    uint64_t arg4_00;\n    uint64_t uVar12;\n    int16_t *piVar13;\n    ulong uStack128;\n    int32_t iStack120;\n    uint64_t uStack112;\n    int64_t iStack88;\n    ulong var_48h;\n    ulong lpNumberOfBytesWritten;\n    ulong var_30h;\n    ulong lpMode;\n    ulong var_18h;\n    \n    iVar10 = 0;\n    arg4_00 = arg3;\n    uVar12 = arg1;\n    if (arg3 == 0) {\n        return 0;\n    }\n    if (arg2 == NULL) {\ncode_r0x000140013a04:\n        *(arg4 + 0x38) = 1;\n        *(arg4 + 0x34) = 0;\n        *(arg4 + 0x30) = 1;\n        *(arg4 + 0x2c) = 0x16;\n        fcn.14000ccf4(0, 0, 0, 0);\n        return -1;\n    }\n    uVar8 = arg1 & 0x3f;\n    iVar11 = uVar12 >> 6;\n    iVar2 = *(iVar11 * 8 + 0x140037fd0);\n    cVar1 = *(iVar2 + 0x39 + uVar8 * 0x48);\n    iStack88 = iVar11;\n    if ((cVar1 - 1U < 2) && ((~arg3 & 1) == 0)) goto code_r0x000140013a04;\n    if ((*(iVar2 + 0x38 + uVar8 * 0x48) & 0x20) != 0) {\n        fcn.140018bd8(uVar12 & 0xffffffff, 0, 2, arg4);\n    }\n    uStack112 = 0;\n    iVar6 = fcn.140018794(uVar12 & 0xffffffff);\n    if ((iVar6 == 0) || (-1 < *(*(iVar11 * 8 + 0x140037fd0) + 0x38 + uVar8 * 0x48))) {\ncode_r0x000140013bb7:\n        iVar2 = *(iVar11 * 8 + 0x140037fd0);\n        if (-1 < *(iVar2 + 0x38 + uVar8 * 0x48)) {\n            uStack128 = 0;\n            iStack120 = 0;\n            iVar6 = (*_sym.imp.KERNEL32.dll_WriteFile)(*(iVar2 + 0x28 + uVar8 * 0x48), arg2, arg4_00, &uStack128 + 4, 0)\n            ;\n            iVar10 = iStack120;\n            uVar3 = uStack128;\n            if (iVar6 == 0) {\n                uVar7 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                uStack128 = uStack128 & 0xffffffff00000000 | uVar7;\n                iVar10 = iStack120;\n                uVar3 = uStack128;\n            }\n            goto code_r0x000140013c58;\n        }\n        if (cVar1 == '\\0') {\n            puVar9 = fcn.14001348c(&uStack128, uVar12 & 0xffffffff, arg2, arg4_00);\n        }\n        else if (cVar1 == '\\x01') {\n            puVar9 = fcn.1400136ac(&uStack128, uVar12 & 0xffffffff, arg2, arg4_00);\n        }\n        else {\n            iVar10 = 0;\n            uVar3 = uStack112;\n            if (cVar1 != '\\x02') goto code_r0x000140013c58;\n            puVar9 = fcn.140013590(&uStack128, uVar12 & 0xffffffff, arg2, arg4_00);\n        }\n    }\n    else {\n        if (*(arg4 + 0x28) == '\\0') {\n            fcn.140011110(arg4);\n        }\n        if (((*(*(arg4 + 0x18) + 0x138) == 0) && (*(*(iVar11 * 8 + 0x140037fd0) + 0x39 + uVar8 * 0x48) == '\\0')) ||\n           (iVar6 = (*_sym.imp.KERNEL32.dll_GetConsoleMode)(),  iVar6 == 0)) goto code_r0x000140013bb7;\n        if (cVar1 != '\\0') {\n            if ((cVar1 == '\\x01') || (uVar3 = uStack112,  cVar1 == '\\x02')) {\n                uStack128 = 0;\n                iVar11 = iStack88;\n                uVar3 = uStack128;\n                if (arg2 < arg2 + arg4_00) {\n                    uStack128._4_4_ = 0;\n                    piVar13 = arg2;\n                    do {\n                        iVar5 = *piVar13;\n                        iVar4 = fcn.140018dc8();\n                        if (iVar4 != iVar5) {\ncode_r0x000140013b7b:\n                            uVar7 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                            uStack128 = uStack128 & 0xffffffff00000000 | uVar7;\n                            iVar11 = iStack88;\n                            uVar3 = uStack128;\n                            break;\n                        }\n                        uStack128 = uStack128 & 0xffffffff | uStack128._4_4_ + 2 << 0x20;\n                        uVar7 = uStack128._4_4_ + 2;\n                        if (iVar5 == 10) {\n                            iVar5 = fcn.140018dc8(0xd);\n                            if (iVar5 != 0xd) goto code_r0x000140013b7b;\n                            uStack128 = uStack128 & 0xffffffff | uStack128._4_4_ + 3 << 0x20;\n                            iVar10 = iVar10 + 1;\n                            uVar7 = uStack128._4_4_ + 3;\n                        }\n                        uStack128._4_4_ = uVar7;\n                        piVar13 = piVar13 + 1;\n                        iVar11 = iStack88;\n                        uVar3 = uStack128;\n                    } while (piVar13 < arg2 + arg4_00);\n                }\n            }\n            goto code_r0x000140013c58;\n        }\n        puVar9 = fcn.140013014(&uStack128, uVar12 & 0xffffffff, arg2, arg4_00);\n    }\n    iVar10 = *(puVar9 + 1);\n    uVar3 = *puVar9;\ncode_r0x000140013c58:\n    uStack112 = uVar3;\n    iVar6 = uStack112 >> 0x20;\n    if (iVar6 != 0) {\n        return iVar6 - iVar10;\n    }\n    if (uStack112 != 0) {\n        if (uStack112 == 5) {\n            *(arg4 + 0x30) = 1;\n            *(arg4 + 0x2c) = 9;\n            *(arg4 + 0x38) = 1;\n            *(arg4 + 0x34) = 5;\n            return -1;\n        }\n        fcn.14000d394(uStack112 & 0xffffffff, arg4);\n        return -1;\n    }\n    if (((*(*(iVar11 * 8 + 0x140037fd0) + 0x38 + uVar8 * 0x48) & 0x40) != 0) && (*arg2 == '\\x1a')) {\n        return 0;\n    }\n    *(arg4 + 0x34) = 0;\n    *(arg4 + 0x30) = 1;\n    *(arg4 + 0x2c) = 0x1c;\n    *(arg4 + 0x38) = 1;\n    return -1;\n}\n",
        "token_count": 1969
    },
    "140013cd": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint64_t fcn.140013cdc(ulong noname_0, int64_t *arg2, ulong arg3)\n\n{\n    uint32_t uVar1;\n    uint64_t uVar2;\n    int64_t iVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uint64_t uVar6;\n    bool bVar7;\n    uchar auStackX8 [8];\n    \n    auStackX8[0] = noname_0;\n    uVar1 = fcn.1400126a0(arg2);\n    uVar6 = uVar1;\n    if ((*(arg2 + 0x14) & 0xc0) == 0) {\n        uVar2 = fcn.1400138b4(uVar6 & 0xffffffff, auStackX8, 1, arg3);\n        bVar7 = uVar2 == 1;\n    }\n    else {\n        uVar4 = 0;\n        uVar5 = *arg2 - *(arg2 + 1);\n        *arg2 = arg2[1] + 1;\n        *(arg2 + 2) = *(arg2 + 4) + -1;\n        if (uVar5 < 1) {\n            uVar2 = uVar1 + 2;\n            if (uVar1 + 2 < 2) {\n                iVar3 = 0x140037830;\n            }\n            else {\n                uVar2 = *((uVar6 >> 6) * 8 + 0x140037fd0);\n                iVar3 = uVar2 + (uVar1 & 0x3f) * 0x48;\n            }\n            if (((*(iVar3 + 0x38) & 0x20) != 0) &&\n               (uVar2 = fcn.140018aa0(uVar6 & 0xffffffff, 0, 2),  uVar2 == 0xffffffffffffffff)) {\n                LOCK();\n                *(arg2 + 0x14) = *(arg2 + 0x14) | 0x10;\n                return 0xffffffffffffff01;\n            }\n        }\n        else {\n            uVar2 = fcn.1400138b4(uVar6 & 0xffffffff, arg2[1], uVar5, arg3);\n            uVar4 = uVar2;\n        }\n        bVar7 = uVar4 == uVar5;\n        uVar2 = uVar2 & 0xffffffffffffff00;\n        *arg2[1] = auStackX8[0];\n    }\n    return uVar2 & 0xffffffffffffff00 | bVar7;\n}\n",
        "token_count": 577
    },
    "140013f6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.140013f68(int64_t *arg1)\n\n{\n    char cVar1;\n    int64_t *piVar2;\n    int64_t iVar3;\n    \n    cVar1 = fcn.140013f1c(arg1);\n    if (cVar1 != '\\0') {\n        piVar2 = fcn.1400127f0(1);\n        if (arg1 == piVar2) {\n            piVar2 = 0x140037fa8;\n        }\n        else {\n            piVar2 = fcn.1400127f0(2);\n            if (arg1 != piVar2) {\n                return 0;\n            }\n            piVar2 = 0x140037fb0;\n        }\n        *0x140037fa0 = *0x140037fa0 + 1;\n        if ((*(arg1 + 0x14) & 0x4c0) == 0) {\n            LOCK();\n            *(arg1 + 0x14) = *(arg1 + 0x14) | 0x282;\n            if (*piVar2 == 0) {\n                iVar3 = fcn.140014410(0x1000);\n                *piVar2 = iVar3;\n                fcn.140012664(0);\n            }\n            if (*piVar2 == 0) {\n                *(arg1 + 2) = 2;\n                arg1[1] = arg1 + 0x1c;\n                *arg1 = arg1 + 0x1c;\n                *(arg1 + 4) = 2;\n            }\n            else {\n                arg1[1] = *piVar2;\n                *arg1 = *piVar2;\n                *(arg1 + 2) = 0x1000;\n                *(arg1 + 4) = 0x1000;\n            }\n            return 1;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 422
    },
    "140014c2": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.140014c2c(uchar *arg1, uchar *arg2, ulong arg3)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    ulong uVar3;\n    uchar *puVar4;\n    uchar *arg2_00;\n    int64_t iVar5;\n    char in_R9B;\n    int32_t in_stack_00000028;\n    int32_t *in_stack_00000030;\n    uint8_t in_stack_00000038;\n    int64_t in_stack_00000040;\n    int64_t iVar6;\n    \n    iVar2 = 0;\n    if (0 < arg3) {\n        iVar2 = arg3;\n    }\n    if (iVar2 + 9 < arg2) {\n        if ((in_stack_00000038 != 0) && (puVar4 = arg1 + (*in_stack_00000030 == 0x2d),  0 < arg3)) {\n            iVar5 = -1;\n            do {\n                iVar6 = iVar5;\n                iVar5 = iVar6 + 1;\n            } while (puVar4[iVar5] != '\\0');\n            fcn.140020a40(puVar4 + 1, puVar4, iVar6 + 2);\n        }\n        puVar4 = arg1;\n        if (*in_stack_00000030 == 0x2d) {\n            *arg1 = 0x2d;\n            puVar4 = arg1 + 1;\n        }\n        if (0 < arg3) {\n            *puVar4 = puVar4[1];\n            puVar4 = puVar4 + 1;\n            if (*(in_stack_00000040 + 0x28) == '\\0') {\n                fcn.140011110(in_stack_00000040);\n            }\n            *puVar4 = ***(*(in_stack_00000040 + 0x18) + 0xf8);\n        }\n        puVar4 = puVar4 + (in_stack_00000038 ^ 1) + arg3;\n        arg2_00 = arg1 + (arg2 - puVar4);\n        if (arg2 == 0xffffffffffffffff) {\n            arg2_00 = arg2;\n        }\n        iVar2 = fcn.14001a420(puVar4, arg2_00, \"e+000\");\n        if (iVar2 != 0) {\n            fcn.14000ce10(0, 0, 0, 0, 0);\n            pcVar1 = swi(3);\n            uVar3 = (*pcVar1)();\n            return uVar3;\n        }\n        if (in_R9B != '\\0') {\n            *puVar4 = 0x45;\n        }\n        if (**(in_stack_00000030 + 2) != '0') {\n            iVar2 = in_stack_00000030[1] + -1;\n            if (iVar2 < 0) {\n                iVar2 = -iVar2;\n                puVar4[1] = 0x2d;\n            }\n            if (99 < iVar2) {\n                puVar4[2] = puVar4[2] + iVar2 / 100;\n                iVar2 = iVar2 % 100;\n            }\n            if (9 < iVar2) {\n                puVar4[3] = puVar4[3] + iVar2 / 10;\n                iVar2 = iVar2 % 10;\n            }\n            puVar4[4] = puVar4[4] + iVar2;\n        }\n        if ((in_stack_00000028 == 2) && (puVar4[2] == '0')) {\n            fcn.140020a40(puVar4 + 2, puVar4 + 3, 3);\n        }\n        uVar3 = 0;\n    }\n    else {\n        *(in_stack_00000040 + 0x30) = 1;\n        *(in_stack_00000040 + 0x2c) = 0x22;\n        fcn.14000ccf4(0, 0, 0, 0);\n        uVar3 = 0x22;\n    }\n    return uVar3;\n}\n",
        "token_count": 921
    },
    "140014ee": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.140014ee8(uchar *arg1, ulong noname_1, ulong arg3, int32_t *arg4)\n\n{\n    uchar *arg1_00;\n    bool bVar1;\n    int32_t iVar2;\n    uchar *arg2;\n    int64_t iVar3;\n    int64_t iVar4;\n    char in_stack_00000028;\n    int64_t in_stack_00000030;\n    \n    if ((in_stack_00000028 != '\\0') && (arg4[1] + -1 == arg3)) {\n        *(arg1 + arg4[1] + -1 + (*arg4 == 0x2d)) = 0x30;\n    }\n    if (*arg4 == 0x2d) {\n        *arg1 = 0x2d;\n        arg1 = arg1 + 1;\n    }\n    iVar2 = arg4[1];\n    if (iVar2 < 1) {\n        if ((iVar2 == 0) && (**(arg4 + 2) == '0')) {\n            bVar1 = true;\n        }\n        else {\n            bVar1 = false;\n        }\n        if ((in_stack_00000028 == '\\0') || (!bVar1)) {\n            iVar4 = -1;\n            do {\n                iVar3 = iVar4;\n                iVar4 = iVar3 + 1;\n            } while (arg1[iVar4] != '\\0');\n            fcn.140020a40(arg1 + 1, arg1, iVar3 + 2);\n        }\n        arg2 = arg1 + 1;\n        *arg1 = 0x30;\n    }\n    else {\n        arg2 = arg1 + iVar2;\n    }\n    if (0 < arg3) {\n        arg1_00 = arg2 + 1;\n        iVar4 = -1;\n        do {\n            iVar3 = iVar4;\n            iVar4 = iVar3 + 1;\n        } while (arg2[iVar4] != '\\0');\n        fcn.140020a40(arg1_00, arg2, iVar3 + 2);\n        if (*(in_stack_00000030 + 0x28) == '\\0') {\n            fcn.140011110(in_stack_00000030);\n        }\n        *arg2 = ***(*(in_stack_00000030 + 0x18) + 0xf8);\n        if (arg4[1] < 0) {\n            iVar2 = -arg4[1];\n            if ((in_stack_00000028 != '\\0') || (iVar2 < arg3)) {\n                arg3._0_4_ = iVar2;\n            }\n            iVar4 = -1;\n            do {\n                iVar3 = iVar4;\n                iVar4 = iVar3 + 1;\n            } while (arg1_00[iVar4] != '\\0');\n            fcn.140020a40(arg1_00 + arg3, arg1_00, iVar3 + 2);\n            fcn.140020880(arg1_00, 0x30, arg3);\n        }\n    }\n    return 0;\n}\n",
        "token_count": 678
    },
    "1400152a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nulong fcn.1400152ac(uint64_t *arg1, uchar *arg2, uint64_t arg3, int64_t arg4)\n\n{\n    uint64_t uVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    ulong uVar4;\n    int64_t iVar5;\n    uint32_t uVar6;\n    uint64_t uVar7;\n    int64_t in_stack_00000028;\n    int32_t in_stack_00000030;\n    uint64_t in_stack_00000040;\n    int64_t in_stack_00000050;\n    \n    if (arg2 == NULL) {\n        *(in_stack_00000050 + 0x30) = 1;\n        *(in_stack_00000050 + 0x2c) = 0x16;\n    }\n    else {\n        if (((arg3 != 0) && (arg4 != 0)) && (in_stack_00000028 != 0)) {\n            if ((in_stack_00000030 == 0x41) || (in_stack_00000030 - 0x45U < 3)) {\n                uVar6 = 1;\n            }\n            else {\n                uVar6 = 0;\n            }\n            if (((in_stack_00000040 & 8) == 0) && (uVar1 = *arg1,  (uVar1 >> 0x34 & 0x7ff) == 0x7ff)) {\n                if ((uVar1 & 0xfffffffffffff) == 0) {\n                    iVar5 = 0;\n                }\n                else if ((uVar1 < 0) && ((uVar1 & 0xfffffffffffff) == 0x8000000000000)) {\n                    iVar5 = 0xc;\n                }\n                else {\n                    iVar5 = (-((uVar1 & 0x8000000000000) != 0) & 0xfffffffffffffffc) + 8;\n                }\n                if (arg3 < 4U - (uVar1 >> 0x3f)) {\n                    *arg2 = 0;\n                    return 0xc;\n                }\n                uVar7 = 0xffffffffffffffff;\n                if (uVar1 < 0) {\n                    *arg2 = 0x2d;\n                    arg2 = arg2 + 1;\n                    *arg2 = 0;\n                    if (arg3 != 0xffffffffffffffff) {\n                        arg3 = arg3 - 1;\n                    }\n                }\n                uVar6 = (uVar6 ^ 1) * 2;\n                do {\n                    uVar7 = uVar7 + 1;\n                } while (*(*((uVar6 + iVar5) * 8 + 0x1400272c0) + uVar7) != '\\0');\n                iVar3 = fcn.14001a420(arg2, arg3, *((uVar6 + (arg3 <= uVar7) + iVar5) * 8 + 0x1400272c0));\n                if (iVar3 == 0) {\n                    return 0;\n                }\n                fcn.14000ce10(0, 0, 0, 0, 0);\n                pcVar2 = swi(3);\n                uVar4 = (*pcVar2)();\n                return uVar4;\n            }\n            if (in_stack_00000030 != 0x41) {\n                if (in_stack_00000030 == 0x45) {\ncode_r0x0001400154f9:\n                    uVar4 = fcn.140014b30(arg1, arg2, arg3, arg4);\n                    return uVar4;\n                }\n                if (in_stack_00000030 == 0x46) {\ncode_r0x0001400154c8:\n                    uVar4 = fcn.140014e10(arg1, arg2, arg3, arg4);\n                    return uVar4;\n                }\n                if (in_stack_00000030 != 0x47) {\n                    if (in_stack_00000030 == 0x61) goto code_r0x000140015533;\n                    if (in_stack_00000030 == 0x65) goto code_r0x0001400154f9;\n                    if (in_stack_00000030 == 0x66) goto code_r0x0001400154c8;\n                }\n                uVar4 = fcn.140015040(arg1, arg2, arg3, arg4);\n                return uVar4;\n            }\ncode_r0x000140015533:\n            uVar4 = fcn.140014798(arg1, arg2, arg3, arg4);\n            return uVar4;\n        }\n        *(in_stack_00000050 + 0x30) = 1;\n        *(in_stack_00000050 + 0x2c) = 0x16;\n    }\n    fcn.14000ccf4(0, 0, 0, 0);\n    return 0x16;\n}\n",
        "token_count": 1100
    },
    "14001574": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nint32_t fcn.140015744(uint16_t *arg1, uint8_t *arg2, uint64_t arg3, int64_t arg4)\n\n{\n    uint32_t uVar1;\n    int64_t *piVar2;\n    int32_t iVar3;\n    \n    if ((arg2 == NULL) || (arg3 == 0)) {\n        *0x140037fb8 = 0;\n    }\n    else {\n        if (*arg2 != 0) {\n            if (*(arg4 + 0x28) == '\\0') {\n                fcn.140011110(arg4);\n            }\n            piVar2 = *(arg4 + 0x18);\n            uVar1 = *(piVar2 + 0xc);\n            if (uVar1 != 0xfde9) {\n                if (piVar2[0x27] == 0) {\n                    if (arg1 != NULL) {\n                        *arg1 = *arg2;\n                    }\n                    return 1;\n                }\n                if (*(*piVar2 + *arg2 * 2) < 0) {\n                    if ((((1 < *(piVar2 + 1)) && (*(piVar2 + 1) <= arg3)) &&\n                        (iVar3 = fcn.140017998(uVar1, 9),  iVar3 != 0)) ||\n                       ((*(*(arg4 + 0x18) + 8) <= arg3 && (arg2[1] != 0)))) {\n                        return *(*(arg4 + 0x18) + 8);\n                    }\n                }\n                else {\n                    iVar3 = fcn.140017998(uVar1, 9);\n                    if (iVar3 != 0) {\n                        return 1;\n                    }\n                }\n                *(arg4 + 0x30) = 1;\n                *(arg4 + 0x2c) = 0x2a;\n                return -1;\n            }\n            iVar3 = fcn.140018be0(arg1);\n            if (iVar3 < 0) {\n                return -1;\n            }\n            return iVar3;\n        }\n        if (arg1 != NULL) {\n            *arg1 = 0;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 485
    },
    "1400166c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.1400166c4(ulong noname_0, uint32_t *arg2, int64_t **arg3, uint32_t *arg4)\n\n{\n    int32_t iVar1;\n    int32_t *piVar2;\n    uint uVar3;\n    uint uVar4;\n    uint uVar5;\n    uint *puVar6;\n    uint *puVar7;\n    uint *puVar8;\n    int64_t iVar9;\n    \n    fcn.1400161d8(*arg2);\n    puVar6 = *(**arg3 + 0x88) + 0x18;\n    if (*0x1400387c8 == NULL) {\ncode_r0x000140016777:\n        puVar6 = fcn.14000d3d8();\n        *puVar6 = 0x16;\n        fcn.14000cdc0();\n    }\n    else {\n        if (puVar6 == NULL) {\n            fcn.140020880(*0x1400387c8, 0, 0x101);\n            goto code_r0x000140016777;\n        }\n        iVar9 = 2;\n        puVar8 = *0x1400387c8;\n        do {\n            uVar3 = puVar6[1];\n            uVar4 = puVar6[2];\n            uVar5 = puVar6[3];\n            *puVar8 = *puVar6;\n            puVar8[1] = uVar3;\n            puVar8[2] = uVar4;\n            puVar8[3] = uVar5;\n            uVar3 = puVar6[5];\n            uVar4 = puVar6[6];\n            uVar5 = puVar6[7];\n            puVar8[4] = puVar6[4];\n            puVar8[5] = uVar3;\n            puVar8[6] = uVar4;\n            puVar8[7] = uVar5;\n            uVar3 = puVar6[9];\n            uVar4 = puVar6[10];\n            uVar5 = puVar6[0xb];\n            puVar8[8] = puVar6[8];\n            puVar8[9] = uVar3;\n            puVar8[10] = uVar4;\n            puVar8[0xb] = uVar5;\n            uVar3 = puVar6[0xd];\n            uVar4 = puVar6[0xe];\n            uVar5 = puVar6[0xf];\n            puVar8[0xc] = puVar6[0xc];\n            puVar8[0xd] = uVar3;\n            puVar8[0xe] = uVar4;\n            puVar8[0xf] = uVar5;\n            uVar3 = puVar6[0x11];\n            uVar4 = puVar6[0x12];\n            uVar5 = puVar6[0x13];\n            puVar8[0x10] = puVar6[0x10];\n            puVar8[0x11] = uVar3;\n            puVar8[0x12] = uVar4;\n            puVar8[0x13] = uVar5;\n            uVar3 = puVar6[0x15];\n            uVar4 = puVar6[0x16];\n            uVar5 = puVar6[0x17];\n            puVar8[0x14] = puVar6[0x14];\n            puVar8[0x15] = uVar3;\n            puVar8[0x16] = uVar4;\n            puVar8[0x17] = uVar5;\n            uVar3 = puVar6[0x19];\n            uVar4 = puVar6[0x1a];\n            uVar5 = puVar6[0x1b];\n            puVar8[0x18] = puVar6[0x18];\n            puVar8[0x19] = uVar3;\n            puVar8[0x1a] = uVar4;\n            puVar8[0x1b] = uVar5;\n            puVar7 = puVar8 + 0x20;\n            uVar3 = puVar6[0x1d];\n            uVar4 = puVar6[0x1e];\n            uVar5 = puVar6[0x1f];\n            puVar8[0x1c] = puVar6[0x1c];\n            puVar8[0x1d] = uVar3;\n            puVar8[0x1e] = uVar4;\n            puVar8[0x1f] = uVar5;\n            puVar6 = puVar6 + 0x20;\n            iVar9 = iVar9 + -1;\n            puVar8 = puVar7;\n        } while (iVar9 != 0);\n        *puVar7 = *puVar6;\n    }\n    iVar9 = 2;\n    puVar6 = *(**arg3 + 0x88) + 0x119;\n    if (*0x1400387d0 != NULL) {\n        puVar8 = *0x1400387d0;\n        if (puVar6 != NULL) {\n            do {\n                uVar3 = puVar6[1];\n                uVar4 = puVar6[2];\n                uVar5 = puVar6[3];\n                *puVar8 = *puVar6;\n                puVar8[1] = uVar3;\n                puVar8[2] = uVar4;\n                puVar8[3] = uVar5;\n                uVar3 = puVar6[5];\n                uVar4 = puVar6[6];\n                uVar5 = puVar6[7];\n                puVar8[4] = puVar6[4];\n                puVar8[5] = uVar3;\n                puVar8[6] = uVar4;\n                puVar8[7] = uVar5;\n                uVar3 = puVar6[9];\n                uVar4 = puVar6[10];\n                uVar5 = puVar6[0xb];\n                puVar8[8] = puVar6[8];\n                puVar8[9] = uVar3;\n                puVar8[10] = uVar4;\n                puVar8[0xb] = uVar5;\n                uVar3 = puVar6[0xd];\n                uVar4 = puVar6[0xe];\n                uVar5 = puVar6[0xf];\n                puVar8[0xc] = puVar6[0xc];\n                puVar8[0xd] = uVar3;\n                puVar8[0xe] = uVar4;\n                puVar8[0xf] = uVar5;\n                uVar3 = puVar6[0x11];\n                uVar4 = puVar6[0x12];\n                uVar5 = puVar6[0x13];\n                puVar8[0x10] = puVar6[0x10];\n                puVar8[0x11] = uVar3;\n                puVar8[0x12] = uVar4;\n                puVar8[0x13] = uVar5;\n                uVar3 = puVar6[0x15];\n                uVar4 = puVar6[0x16];\n                uVar5 = puVar6[0x17];\n                puVar8[0x14] = puVar6[0x14];\n                puVar8[0x15] = uVar3;\n                puVar8[0x16] = uVar4;\n                puVar8[0x17] = uVar5;\n                uVar3 = puVar6[0x19];\n                uVar4 = puVar6[0x1a];\n                uVar5 = puVar6[0x1b];\n                puVar8[0x18] = puVar6[0x18];\n                puVar8[0x19] = uVar3;\n                puVar8[0x1a] = uVar4;\n                puVar8[0x1b] = uVar5;\n                uVar3 = puVar6[0x1d];\n                uVar4 = puVar6[0x1e];\n                uVar5 = puVar6[0x1f];\n                puVar8[0x1c] = puVar6[0x1c];\n                puVar8[0x1d] = uVar3;\n                puVar8[0x1e] = uVar4;\n                puVar8[0x1f] = uVar5;\n                puVar6 = puVar6 + 0x20;\n                iVar9 = iVar9 + -1;\n                puVar8 = puVar8 + 0x20;\n            } while (iVar9 != 0);\n            goto code_r0x000140016828;\n        }\n        fcn.140020880(*0x1400387d0, 0, 0x100);\n    }\n    puVar6 = fcn.14000d3d8();\n    *puVar6 = 0x16;\n    fcn.14000cdc0();\ncode_r0x000140016828:\n    piVar2 = **arg3[1];\n    LOCK();\n    iVar1 = *piVar2;\n    *piVar2 = *piVar2 + -1;\n    if ((iVar1 == 1) && (**arg3[1] != 0x140037880)) {\n        fcn.140012664(**arg3[1]);\n    }\n    **arg3[1] = *(**arg3 + 0x88);\n    LOCK();\n    **(**arg3 + 0x88) = **(**arg3 + 0x88) + 1;\n    fcn.140016238(*arg4);\n    return;\n}\n",
        "token_count": 2173
    },
    "140016e0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t * fcn.140016e04(int64_t arg1, int32_t **arg2)\n\n{\n    int32_t iVar1;\n    code *pcVar2;\n    int32_t *piVar3;\n    \n    if (((*(arg1 + 0x3a8) & *0x140037dc0) == 0) || (*(arg1 + 0x90) == 0)) {\n        fcn.1400161d8(5);\n        piVar3 = *(arg1 + 0x88);\n        if (piVar3 != *arg2) {\n            if (piVar3 != NULL) {\n                LOCK();\n                iVar1 = *piVar3;\n                *piVar3 = *piVar3 + -1;\n                if ((iVar1 == 1) && (piVar3 != 0x140037880)) {\n                    fcn.140012664(piVar3);\n                }\n            }\n            piVar3 = *arg2;\n            *(arg1 + 0x88) = piVar3;\n            LOCK();\n            *piVar3 = *piVar3 + 1;\n        }\n        fcn.140016238(5);\n    }\n    else {\n        piVar3 = *(arg1 + 0x88);\n    }\n    if (piVar3 != NULL) {\n        return piVar3;\n    }\n    fcn.14001260c();\n    pcVar2 = swi(3);\n    piVar3 = (*pcVar2)();\n    return piVar3;\n}\n",
        "token_count": 332
    },
    "140016f4": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.140016f4c(ulong arg1, int64_t arg2)\n\n{\n    uint8_t *puVar1;\n    uint8_t uVar2;\n    ushort uVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    uint32_t *puVar6;\n    int64_t iVar7;\n    uint8_t *puVar8;\n    uint64_t uVar9;\n    uint8_t *puVar10;\n    ushort *puVar11;\n    uint64_t uVar12;\n    uint64_t uVar13;\n    uint uVar14;\n    ushort *puVar15;\n    uint32_t uVar16;\n    uint8_t *puVar17;\n    uint32_t uVar18;\n    uchar auStack104 [32];\n    int32_t iStack72;\n    uint8_t auStack66 [18];\n    uint64_t uStack48;\n    \n    uStack48 = *0x140037f00 ^ auStack104;\n    uVar4 = fcn.140016894(arg1);\n    uVar12 = 0;\n    if (uVar4 != 0) {\n        puVar6 = 0x140037cd0;\n        uVar14 = 1;\n        uVar9 = uVar12;\ncode_r0x000140016f95:\n        if (*puVar6 != uVar4) goto code_r0x000140016f9d;\n        fcn.140020880(arg2 + 0x18, 0, 0x101);\n        puVar17 = 0x140037cc0;\n        iVar7 = 4;\n        puVar8 = uVar9 * 0x30 + 0x140037ce0;\n        do {\n            uVar2 = *puVar8;\n            puVar10 = puVar8;\n            while ((uVar2 != 0 && (puVar10[1] != 0))) {\n                uVar2 = *puVar10;\n                uVar18 = uVar2;\n                if (uVar2 <= puVar10[1]) {\n                    uVar16 = uVar2;\n                    do {\n                        uVar16 = uVar16 + 1;\n                        if (0x100 < uVar16) break;\n                        uVar18 = uVar18 + 1;\n                        puVar1 = uVar16 + 0x18 + arg2;\n                        *puVar1 = *puVar1 | *puVar17;\n                    } while (uVar18 <= puVar10[1]);\n                }\n                puVar10 = puVar10 + 2;\n                uVar2 = *puVar10;\n            }\n            puVar8 = puVar8 + 8;\n            puVar17 = puVar17 + 1;\n            iVar7 = iVar7 + -1;\n        } while (iVar7 != 0);\n        *(arg2 + 4) = uVar4;\n        *(arg2 + 8) = 1;\n        uVar13 = *0x1400273e8;\n        if (((uVar4 != 0x3a4) && (uVar13 = *0x1400273f0,  uVar4 != 0x3a8)) &&\n           ((uVar13 = *0x1400273f8,  uVar4 != 0x3b5 && (uVar13 = uVar12,  uVar4 == 0x3b6)))) {\n            uVar13 = *0x140027400;\n        }\n        *(arg2 + 0x220) = uVar13;\n        puVar15 = uVar9 * 0x30 + 0x140037cd4;\n        puVar11 = arg2 + 0xc;\n        iVar7 = 6;\n        do {\n            uVar3 = *puVar15;\n            puVar15 = puVar15 + 1;\n            *puVar11 = uVar3;\n            puVar11 = puVar11 + 1;\n            iVar7 = iVar7 + -1;\n        } while (iVar7 != 0);\n        goto code_r0x0001400171cf;\n    }\ncode_r0x0001400171d9:\n    fcn.140016914(arg2);\ncode_r0x0001400171e3:\n    fcn.14001e9f0(uStack48 ^ auStack104);\n    return;\ncode_r0x000140016f9d:\n    uVar18 = uVar9 + 1;\n    uVar9 = uVar18;\n    puVar6 = puVar6 + 0xc;\n    if (4 < uVar18) goto code_r0x000140016faa;\n    goto code_r0x000140016f95;\ncode_r0x000140016faa:\n    if ((uVar4 == 65000) || (iVar5 = (*_sym.imp.KERNEL32.dll_IsValidCodePage)(uVar4 & 0xffff),  iVar5 == 0))\n    goto code_r0x0001400171e3;\n    if (uVar4 == 0xfde9) {\n        *(arg2 + 4) = 0xfde9;\n        *(arg2 + 0x220) = 0;\n        *(arg2 + 0x18) = 0;\n        *(arg2 + 0x1c) = 0;\n    }\n    else {\n        iVar5 = (*_sym.imp.KERNEL32.dll_GetCPInfo)(uVar4);\n        if (iVar5 == 0) {\n            if (*0x1400387e0 == 0) goto code_r0x0001400171e3;\n            goto code_r0x0001400171d9;\n        }\n        fcn.140020880(arg2 + 0x18, 0, 0x101);\n        *(arg2 + 4) = uVar4;\n        *(arg2 + 0x220) = 0;\n        if (iStack72 == 2) {\n            puVar8 = auStack66;\n            while ((auStack66[0] != 0 && (puVar8[1] != 0))) {\n                uVar2 = *puVar8;\n                if (uVar2 <= puVar8[1]) {\n                    uVar4 = uVar2;\n                    uVar9 = (puVar8[1] - uVar2) + 1;\n                    do {\n                        uVar4 = uVar4 + 1;\n                        puVar17 = uVar4 + 0x18 + arg2;\n                        *puVar17 = *puVar17 | 4;\n                        uVar9 = uVar9 - 1;\n                    } while (uVar9 != 0);\n                }\n                puVar8 = puVar8 + 2;\n                auStack66[0] = *puVar8;\n            }\n            puVar8 = arg2 + 0x1a;\n            iVar7 = 0xfe;\n            do {\n                *puVar8 = *puVar8 | 8;\n                puVar8 = puVar8 + 1;\n                iVar7 = iVar7 + -1;\n            } while (iVar7 != 0);\n            iVar5 = *(arg2 + 4);\n            uVar9 = *0x1400273e8;\n            if ((((iVar5 != 0x3a4) && (uVar9 = *0x1400273f0,  iVar5 != 0x3a8)) &&\n                (uVar9 = *0x1400273f8,  iVar5 != 0x3b5)) && (uVar9 = *0x140027400,  iVar5 != 0x3b6)) {\n                uVar9 = uVar12;\n            }\n            *(arg2 + 0x220) = uVar9;\n        }\n        else {\n            uVar14 = 0;\n        }\n        *(arg2 + 8) = uVar14;\n    }\n    puVar11 = arg2 + 0xc;\n    for (iVar7 = 6; iVar7 != 0; iVar7 = iVar7 + -1) {\n        *puVar11 = 0;\n        puVar11 = puVar11 + 1;\n    }\ncode_r0x0001400171cf:\n    fcn.1400169ac(arg2);\n    goto code_r0x0001400171e3;\n}\n",
        "token_count": 1830
    },
    "14001720": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint fcn.14001720c(ulong arg1, int32_t *arg2)\n\n{\n    uint uVar1;\n    int32_t *piVar2;\n    int64_t iVar3;\n    int32_t *piVar4;\n    int32_t **ppiVar5;\n    int32_t *piVar6;\n    int32_t *piVar7;\n    uint uVar8;\n    \n    ppiVar5 = fcn.1400121d8(arg1, arg2);\n    if (ppiVar5 != NULL) {\n        piVar2 = *ppiVar5;\n        for (piVar6 = piVar2; piVar6 != piVar2 + 0x30; piVar6 = piVar6 + 4) {\n            if (*piVar6 == arg1) {\n                if (piVar6 == NULL) {\n                    return 0;\n                }\n                iVar3 = *(piVar6 + 2);\n                if (iVar3 == 0) {\n                    return 0;\n                }\n                if (iVar3 == 5) {\n                    *(piVar6 + 2) = 0;\n                    return 1;\n                }\n                if (iVar3 != 1) {\n                    piVar4 = ppiVar5[1];\n                    ppiVar5[1] = arg2;\n                    if (piVar6[1] == 8) {\n                        for (piVar7 = piVar2 + 0xc; piVar7 != piVar2 + 0x30; piVar7 = piVar7 + 4) {\n                            *(piVar7 + 2) = 0;\n                        }\n                        uVar1 = *(ppiVar5 + 2);\n                        if (*piVar6 == -0x3fffff73) {\n                            uVar8 = 0x82;\ncode_r0x00014001734a:\n                            *(ppiVar5 + 2) = uVar8;\n                        }\n                        else {\n                            if (*piVar6 == -0x3fffff72) {\n                                uVar8 = 0x83;\n                                goto code_r0x00014001734a;\n                            }\n                            if (*piVar6 == -0x3fffff71) {\n                                uVar8 = 0x86;\n                                goto code_r0x00014001734a;\n                            }\n                            if (*piVar6 == -0x3fffff70) {\n                                uVar8 = 0x81;\n                                goto code_r0x00014001734a;\n                            }\n                            if (*piVar6 == -0x3fffff6f) {\n                                uVar8 = 0x84;\n                                goto code_r0x00014001734a;\n                            }\n                            if (*piVar6 == -0x3fffff6e) {\n                                uVar8 = 0x8a;\n                                goto code_r0x00014001734a;\n                            }\n                            if (*piVar6 == -0x3fffff6d) {\n                                uVar8 = 0x85;\n                                goto code_r0x00014001734a;\n                            }\n                            if (*piVar6 == -0x3ffffd4c) {\n                                uVar8 = 0x8e;\n                                goto code_r0x00014001734a;\n                            }\n                            uVar8 = uVar1;\n                            if (*piVar6 == -0x3ffffd4b) {\n                                uVar8 = 0x8d;\n                                goto code_r0x00014001734a;\n                            }\n                        }\n                        (**0x140029a28)(8, uVar8);\n                        *(ppiVar5 + 2) = uVar1;\n                    }\n                    else {\n                        *(piVar6 + 2) = 0;\n                        (**0x140029a28)(piVar6[1]);\n                    }\n                    ppiVar5[1] = piVar4;\n                }\n                return 0xffffffff;\n            }\n        }\n    }\n    return 0;\n}\n",
        "token_count": 857
    },
    "14001799": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nvoid fcn.140017998(ulong arg1, uint64_t arg2)\n\n{\n    bool bVar1;\n    \n    if (arg1 < 0xdead) {\n        if (arg1 != 0xdeac) {\n            if (arg1 < 0xc434) {\n                if ((((arg1 != 0xc433) && (arg1 != 0x2a)) && (arg1 != 0xc42c)) && ((arg1 != 0xc42d && (arg1 != 0xc42e)))\n                   ) {\n                    bVar1 = arg1 == 0xc431;\ncode_r0x0001400179e5:\n                    if (!bVar1) goto code_r0x0001400179e9;\n                }\n            }\n            else if (arg1 != 0xc435) {\n                if (arg1 == 0xd698) goto code_r0x000140017a23;\n                if (arg1 != 0xdeaa) {\n                    bVar1 = arg1 == 0xdeab;\n                    goto code_r0x0001400179e5;\n                }\n            }\n        }\n    }\n    else if ((((arg1 != 0xdead) && (arg1 != 0xdeae)) && (arg1 != 0xdeaf)) &&\n            (((arg1 != 0xdeb0 && (arg1 != 0xdeb1)) && ((arg1 != 0xdeb2 && ((arg1 != 0xdeb3 && (arg1 != 65000)))))))) {\n        if (arg1 != 0xfde9) goto code_r0x0001400179e9;\ncode_r0x000140017a23:\n        arg2 = arg2 & 8;\n        goto code_r0x0001400179e9;\n    }\n    arg2 = 0;\ncode_r0x0001400179e9:\n    // WARNING: Could not recover jumptable at 0x0001400179e9. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)(arg1, arg2);\n    return;\n}\n",
        "token_count": 472
    },
    "140017a6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.140017a60(int32_t **arg1)\n\n{\n    ulong arg1_00;\n    \n    if (*0x1400387f8 != '\\0') {\n        return;\n    }\n    *0x1400387ec = 1;\n    if (**arg1 == 0) {\n        if (*0x1400387f0 != *0x140037f00) {\n            (**0x140029a28)(0, 0, 0);\n        }\n        arg1_00 = 0x140038840;\n    }\n    else {\n        if (**arg1 != 1) goto code_r0x000140017ada;\n        arg1_00 = 0x140038858;\n    }\n    fcn.14001c77c(arg1_00);\ncode_r0x000140017ada:\n    if (**arg1 == 0) {\n        fcn.14001c398(0x140029ae8, 0x140029b08);\n    }\n    fcn.14001c398(0x140029b10, 0x140029b18);\n    if (*arg1[1] == 0) {\n        *0x1400387f8 = '\\x01';\n        *arg1[2] = 1;\n    }\n    return;\n}\n",
        "token_count": 285
    },
    "140017ce": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.140017ce4(ulong arg1)\n\n{\n    code *pcVar1;\n    int16_t *piVar2;\n    int32_t *piVar3;\n    uint auStackX16 [2];\n    int32_t aiStackX24 [2];\n    ulong var_28h;\n    uchar var_30h [4];\n    ulong var_2ch;\n    ulong var_20h;\n    uint *var_bp_18h;\n    int32_t *var_bp_10h;\n    ulong *var_8h;\n    \n    aiStackX24[0] = 0;\n    auStackX16[0] = 2;\n    var_20h = 0xfffffffffffffffe;\n    piVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n    if ((((piVar2 != NULL) && (*piVar2 == 0x5a4d)) && (piVar3 = *(piVar2 + 0x1e) + piVar2,  *piVar3 == 0x4550)) &&\n       (((*(piVar3 + 6) == 0x20b && (0xe < piVar3[0x21])) && (piVar3[0x3e] != 0)))) {\n        fcn.140017c4c(arg1);\n    }\n    var_28h._0_1_ = 0;\n    var_bp_18h = auStackX16;\n    var_bp_10h = aiStackX24;\n    var_8h = &var_28h;\n    var_2ch._0_4_ = 2;\n    var_2ch._4_4_ = 2;\n    fcn.140017a28(var_30h, &var_2ch + 4, &var_bp_18h, &var_2ch);\n    if (aiStackX24[0] == 0) {\n        fcn.140017bf4(arg1);\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    return;\n}\n",
        "token_count": 466
    },
    "140017c2": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint32_t fcn.140017c28(void)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    \n    iVar1 = fcn.14001bf70();\n    if (iVar1 == 1) {\n        uVar2 = 0;\n    }\n    else {\n        uVar2 = fcn.14001c85c();\n        uVar2 = uVar2 & 0xffffff00 | uVar2 == '\\0';\n    }\n    return uVar2;\n}\n",
        "token_count": 109
    },
    "140017dd": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nulong fcn.140017dd4(uint64_t arg1)\n\n{\n    bool bVar1;\n    uint64_t uVar2;\n    uint *puVar3;\n    int64_t iVar4;\n    uint64_t uVar5;\n    ulong uVar6;\n    int8_t iVar7;\n    int32_t iVar8;\n    uint64_t noname_0;\n    uint64_t noname_0_00;\n    uint32_t uVar9;\n    uint64_t lpFlsData;\n    code *pcVar10;\n    uint32_t uVar11;\n    uint64_t uVar12;\n    uint64_t *puVar13;\n    uint64_t *puVar14;\n    uint uStackX16;\n    uint64_t *puVar15;\n    \n    iVar8 = arg1;\n    noname_0_00 = arg1 & 0xffffffff;\n    puVar15 = NULL;\n    puVar14 = NULL;\n    uStackX16 = 0;\n    bVar1 = true;\n    lpFlsData = iVar8 - 2U;\n    uVar11 = noname_0_00;\n    if (iVar8 - 2U == 0) {\ncode_r0x000140017e2b:\n        noname_0 = iVar8 - 2U;\n        if (iVar8 - 2U == 0) {\n            puVar13 = 0x140038800;\n        }\n        else {\n            noname_0 = iVar8 - 6U;\n            if (iVar8 - 6U == 0) {\ncode_r0x000140017ecd:\n                puVar13 = 0x140038810;\n                puVar14 = puVar15;\n            }\n            else {\n                noname_0 = iVar8 - 0xfU;\n                if (iVar8 - 0xfU == 0) {\n                    puVar13 = 0x140038818;\n                }\n                else {\n                    uVar9 = iVar8 - 0x15;\n                    noname_0 = uVar9;\n                    if (uVar9 == 0) {\n                        puVar13 = 0x140038808;\n                        puVar14 = puVar15;\n                    }\n                    else {\n                        if (uVar9 == 1) goto code_r0x000140017ecd;\n                        puVar13 = NULL;\n                        puVar14 = puVar15;\n                    }\n                }\n            }\n        }\n    }\n    else {\n        lpFlsData = iVar8 - 4U;\n        if (iVar8 - 4U != 0) {\n            lpFlsData = iVar8 - 6U;\n            if (iVar8 - 6U != 0) {\n                lpFlsData = iVar8 - 8U;\n                if ((iVar8 - 8U == 0) || (lpFlsData = iVar8 - 0xbU,  iVar8 - 0xbU == 0)) goto code_r0x000140017e5b;\n                lpFlsData = iVar8 - 0xfU;\n                if (iVar8 - 0xfU != 0) {\n                    uVar9 = iVar8 - 0x15;\n                    lpFlsData = uVar9;\n                    if ((uVar9 != 0) && (uVar9 != 1)) goto code_r0x000140017ead;\n                }\n            }\n            goto code_r0x000140017e2b;\n        }\ncode_r0x000140017e5b:\n        puVar14 = fcn.1400121d8(arg1, lpFlsData);\n        if (puVar14 == NULL) {\n            return 0xffffffff;\n        }\n        uVar2 = *puVar14;\n        noname_0 = *0x14002b4b0 * 0x10 + uVar2;\n        for (; uVar2 != noname_0; uVar2 = uVar2 + 0x10) {\n            if (*(uVar2 + 4) == uVar11) goto code_r0x000140017ea8;\n        }\n        uVar2 = 0;\ncode_r0x000140017ea8:\n        if (uVar2 == 0) {\ncode_r0x000140017ead:\n            puVar3 = fcn.14000d3d8();\n            *puVar3 = 0x16;\n            fcn.14000cdc0();\n            return 0xffffffff;\n        }\n        puVar13 = uVar2 + 8;\n        bVar1 = false;\n    }\n    uVar2 = 0;\n    if (bVar1) {\n        noname_0 = 3;\n        fcn.1400161d8(3);\n    }\n    uVar12 = *puVar13;\n    if (bVar1) {\n        uVar9 = *0x140037f00 & 0x3f;\n        noname_0 = uVar9;\n        iVar7 = uVar9;\n        uVar12 = (uVar12 ^ *0x140037f00) >> iVar7 | (uVar12 ^ *0x140037f00) << 0x40 - iVar7;\n    }\n    if (uVar12 == 1) goto code_r0x000140017fb6;\n    if (uVar12 == 0) {\n        if (bVar1) {\n            fcn.140016238(3);\n        }\n        fcn.140017ce4(3);\n        pcVar10 = swi(3);\n        uVar6 = (*pcVar10)();\n        return uVar6;\n    }\n    if ((uVar11 < 0xc) && ((0x910U >> (uVar11 & 0x1f) & 1) != 0)) {\n        uVar2 = puVar14[1];\n        puVar14[1] = 0;\n        if (uVar11 == 8) {\n            iVar4 = fcn.140012060(noname_0, lpFlsData);\n            uStackX16 = *(iVar4 + 0x10);\n            iVar4 = fcn.140012060(noname_0, lpFlsData);\n            *(iVar4 + 0x10) = 0x8c;\n            goto code_r0x000140017f6e;\n        }\n    }\n    else {\ncode_r0x000140017f6e:\n        if (uVar11 == 8) {\n            uVar5 = *0x14002b4b8 * 0x10 + *puVar14;\n            noname_0 = *0x14002b4c0 * 0x10 + uVar5;\n            for (; uVar5 != noname_0; uVar5 = uVar5 + 0x10) {\n                *(uVar5 + 8) = 0;\n            }\n            goto code_r0x000140017fb6;\n        }\n    }\n    *puVar13 = *0x140037f00;\ncode_r0x000140017fb6:\n    if (bVar1) {\n        noname_0 = 3;\n        fcn.140016238(3);\n    }\n    if (uVar12 != 1) {\n        if (uVar11 == 8) {\n            iVar4 = fcn.140012060(noname_0, lpFlsData);\n            pcVar10 = *(iVar4 + 0x10);\n            (**0x140029a28)();\n        }\n        else {\n            pcVar10 = *0x140029a28;\n            (**0x140029a28)();\n        }\n        if (((uVar11 < 0xc) && ((0x910U >> (uVar11 & 0x1f) & 1) != 0)) && (puVar14[1] = uVar2,  uVar11 == 8)) {\n            iVar4 = fcn.140012060(noname_0_00, pcVar10);\n            *(iVar4 + 0x10) = uStackX16;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 1766
    },
    "1400187f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.1400187f4(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    bool bVar3;\n    uint *in_stack_00000040;\n    \n    uVar2 = 0;\n    if (arg1 < 0xdead) {\n        if (arg1 == 0xdeac) goto code_r0x000140018894;\n        if (0xc433 < arg1) {\n            if ((arg1 == 0xc435) || (arg1 == 0xd698)) goto code_r0x000140018894;\n            iVar1 = arg1 - 0xdeaa;\n            goto code_r0x000140018885;\n        }\n        if ((((arg1 == 0xc433) || (arg1 == 0x2a)) || (arg1 == 0xc42c)) || ((arg1 == 0xc42d || (arg1 == 0xc42e))))\n        goto code_r0x000140018894;\n        bVar3 = arg1 == 0xc431;\n    }\n    else {\n        if (((((arg1 == 0xdead) || (arg1 == 0xdeae)) || (arg1 == 0xdeaf)) || ((arg1 == 0xdeb0 || (arg1 == 0xdeb1)))) ||\n           ((arg1 == 0xdeb2 || (arg1 == 0xdeb3)))) goto code_r0x000140018894;\n        iVar1 = arg1 - 65000;\ncode_r0x000140018885:\n        if (iVar1 == 0) goto code_r0x000140018894;\n        bVar3 = iVar1 == 1;\n    }\n    if (!bVar3) {\n        uVar2 = arg2 & 0xffffff7f;\n    }\ncode_r0x000140018894:\n    if ((arg1 - 65000 < 2) && (in_stack_00000040 != NULL)) {\n        *in_stack_00000040 = 0;\n    }\n    // WARNING: Could not recover jumptable at 0x0001400188cb. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(arg1, uVar2, arg3, arg4);\n    return;\n}\n",
        "token_count": 528
    },
    "140018aa": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nulong fcn.140018aa0(ulong param_1, ulong param_2, ulong param_3)\n\n{\n    ulong uVar1;\n    int64_t iVar2;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_28h;\n    uint uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_bp_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_18h._0_1_ = *0x140037f80 == 0;\n    var_30h._0_1_ = 0;\n    var_bp_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (var_18h) {\n        var_28h._0_4_ = *0x140037158;\n        var_28h._4_4_ = *0x14003715c;\n        uStack40 = *0x140037160;\n        uStack36 = *0x140037164;\n    }\n    uVar1 = fcn.1400188d4(param_1, param_2, param_3, &var_40h);\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_bp_10h != '\\0') {\n        iVar2 = fcn.14000c93c(&var_40h);\n        *(iVar2 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar2 = fcn.14000c93c(&var_40h);\n        *(iVar2 + 0x24) = var_bp_10h._4_4_;\n    }\n    return uVar1;\n}\n",
        "token_count": 449
    },
    "140018b3": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nulong fcn.140018b3c(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    ulong uVar1;\n    int64_t iVar2;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_28h;\n    uint uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_bp_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_18h._0_1_ = *0x140037f80 == 0;\n    var_30h._0_1_ = 0;\n    var_bp_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (var_18h) {\n        var_28h._0_4_ = *0x140037158;\n        var_28h._4_4_ = *0x14003715c;\n        uStack40 = *0x140037160;\n        uStack36 = *0x140037164;\n    }\n    uVar1 = fcn.1400189f4(arg1, arg2, arg3, &var_40h);\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_bp_10h != '\\0') {\n        iVar2 = fcn.14000c93c(&var_40h);\n        *(iVar2 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar2 = fcn.14000c93c(&var_40h);\n        *(iVar2 + 0x24) = var_bp_10h._4_4_;\n    }\n    return uVar1;\n}\n",
        "token_count": 444
    },
    "140018c2": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nint64_t fcn.140018c24(uint16_t *arg1, char **arg2, uint64_t arg3, ulong arg4)\n\n{\n    uint32_t uVar1;\n    uint16_t *puVar2;\n    char *pcVar3;\n    char *arg2_00;\n    int64_t iVar4;\n    int64_t iVar5;\n    uint32_t auStackX8 [2];\n    int64_t in_stack_00000028;\n    \n    arg2_00 = *arg2;\n    iVar4 = 0;\n    if (arg1 == NULL) {\n        while( true ) {\n            if (*arg2_00 == '\\0') {\n                iVar5 = 1;\n            }\n            else if (arg2_00[1] == '\\0') {\n                iVar5 = 2;\n            }\n            else {\n                iVar5 = (arg2_00[2] != '\\0') + 3;\n            }\n            iVar5 = fcn.14001c8a0(0, arg2_00, iVar5, arg4);\n            if (iVar5 == -1) {\n                *(in_stack_00000028 + 0x30) = 1;\n                *(in_stack_00000028 + 0x2c) = 0x2a;\n                return -1;\n            }\n            if (iVar5 == 0) break;\n            if (iVar5 == 4) {\n                iVar4 = iVar4 + 1;\n            }\n            arg2_00 = arg2_00 + iVar5;\n            iVar4 = iVar4 + 1;\n        }\n    }\n    else {\n        puVar2 = arg1;\n        pcVar3 = arg2_00;\n        if (arg3 != 0) {\n            do {\n                if (*arg2_00 == '\\0') {\n                    iVar4 = 1;\n                }\n                else if (arg2_00[1] == '\\0') {\n                    iVar4 = 2;\n                }\n                else {\n                    iVar4 = (arg2_00[2] != '\\0') + 3;\n                }\n                iVar4 = fcn.14001c8a0(auStackX8, arg2_00, iVar4, arg4);\n                if (iVar4 == -1) {\n                    *arg2 = arg2_00;\n                    *(in_stack_00000028 + 0x30) = 1;\n                    *(in_stack_00000028 + 0x2c) = 0x2a;\n                    return -1;\n                }\n                pcVar3 = NULL;\n                if (iVar4 == 0) {\n                    *puVar2 = 0;\n                    break;\n                }\n                uVar1 = auStackX8[0];\n                if (0xffff < auStackX8[0]) {\n                    pcVar3 = arg2_00;\n                    if (arg3 < 2) break;\n                    auStackX8[0] = auStackX8[0] - 0x10000;\n                    arg3 = arg3 - 1;\n                    *puVar2 = auStackX8[0] >> 10 | 0xd800;\n                    puVar2 = puVar2 + 1;\n                    uVar1 = auStackX8[0] & 0x3ff | 0xdc00;\n                }\n                *puVar2 = uVar1;\n                pcVar3 = arg2_00 + iVar4;\n                puVar2 = puVar2 + 1;\n                arg3 = arg3 - 1;\n                arg2_00 = pcVar3;\n            } while (arg3 != 0);\n        }\n        *arg2 = pcVar3;\n        iVar4 = puVar2 - arg1 >> 1;\n    }\n    return iVar4;\n}\n",
        "token_count": 822
    },
    "140018fc": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t fcn.140018fc4(ulong arg1, uint8_t *arg2, int64_t arg3, ulong arg4)\n\n{\n    uint8_t uVar1;\n    char cVar2;\n    uint32_t uVar3;\n    uint64_t uVar4;\n    uint8_t *puVar5;\n    uint *puVar6;\n    int64_t iVar7;\n    uint8_t *puVar8;\n    uint64_t uVar9;\n    int32_t iVar10;\n    uint8_t *puVar11;\n    uint8_t *puVar12;\n    int64_t iVar13;\n    uint64_t uVar14;\n    char cStackX8;\n    int32_t iStackX16;\n    \n    uVar14 = arg1;\n    uVar4 = arg1 & 0x3f;\n    iVar13 = uVar14 >> 6;\n    iVar7 = *(iVar13 * 8 + 0x140037fd0);\n    if ((arg3 == 0) || (*arg2 != 10)) {\n        puVar8 = iVar7 + 0x38 + uVar4 * 0x48;\n        *puVar8 = *puVar8 & 0xfb;\n    }\n    else {\n        puVar8 = iVar7 + 0x38 + uVar4 * 0x48;\n        *puVar8 = *puVar8 | 4;\n    }\n    puVar8 = arg2 + arg3;\n    puVar12 = arg2;\n    puVar11 = arg2;\n    if (arg2 < puVar8) {\n        do {\n            uVar1 = *puVar12;\n            if (uVar1 == 0x1a) {\n                iVar7 = *(iVar13 * 8 + 0x140037fd0);\n                uVar1 = *(iVar7 + 0x38 + uVar4 * 0x48);\n                if ((uVar1 & 0x40) != 0) {\n                    *puVar11 = 0x1a;\n                    goto code_r0x00014001912c;\n                }\n                *(iVar7 + 0x38 + uVar4 * 0x48) = uVar1 | 2;\n                break;\n            }\n            puVar5 = puVar12 + 1;\n            if (uVar1 == 0xd) {\n                if (puVar8 <= puVar5) {\n                    iVar10 = (*_sym.imp.KERNEL32.dll_ReadFile)();\n                    if ((iVar10 == 0) || (iStackX16 == 0)) {\n                        *puVar11 = 0xd;\n                    }\n                    else if ((*(*(iVar13 * 8 + 0x140037fd0) + 0x38 + uVar4 * 0x48) & 0x48) == 0) {\n                        if ((cStackX8 == '\\n') && (puVar11 == arg2)) goto code_r0x0001400190c2;\n                        fcn.140018b3c(uVar14 & 0xffffffff, 0xffffffffffffffff, 1);\n                        if (cStackX8 == '\\n') break;\n                        *puVar11 = 0xd;\n                    }\n                    else if (cStackX8 == '\\n') {\ncode_r0x0001400190c2:\n                        *puVar11 = 10;\n                    }\n                    else {\n                        *puVar11 = 0xd;\n                        *(*(iVar13 * 8 + 0x140037fd0) + 0x3a + uVar4 * 0x48) = cStackX8;\n                    }\ncode_r0x00014001912c:\n                    puVar11 = puVar11 + 1;\n                    break;\n                }\n                if (*puVar5 == 10) {\n                    *puVar11 = 10;\n                    iVar7 = 2;\n                }\n                else {\n                    *puVar11 = 0xd;\n                    iVar7 = 1;\n                }\n                puVar5 = puVar12 + iVar7;\n            }\n            else {\n                *puVar11 = uVar1;\n            }\n            puVar11 = puVar11 + 1;\n            puVar12 = puVar5;\n        } while (puVar5 < puVar8);\n    }\n    iVar10 = puVar11 - arg2;\n    if (iVar10 == 0) {\n        return 0;\n    }\n    iVar7 = *(iVar13 * 8 + 0x140037fd0);\n    if (*(iVar7 + 0x39 + uVar4 * 0x48) != '\\0') {\n        puVar8 = arg2 + iVar10;\n        if (puVar8[-1] < '\\0') {\n            uVar9 = 1;\n            for (puVar8 = puVar8 + -1;\n                ((uVar3 = uVar9,  *(*puVar8 + 0x140037dd0) == '\\0' && (uVar3 < 5)) && (arg2 <= puVar8));\n                puVar8 = puVar8 + -1) {\n                uVar9 = uVar3 + 1;\n            }\n            cVar2 = *(*puVar8 + 0x140037dd0);\n            if (cVar2 == '\\0') {\n                puVar6 = fcn.14000d3d8();\n                *puVar6 = 0x2a;\n                return -1;\n            }\n            if (cVar2 + 1U == uVar3) {\n                puVar8 = puVar8 + uVar9;\n            }\n            else if ((*(iVar7 + 0x38 + uVar4 * 0x48) & 0x48) == 0) {\n                fcn.140018b3c(uVar14 & 0xffffffff, -uVar3, 1);\n            }\n            else {\n                puVar12 = puVar8 + 1;\n                *(iVar7 + 0x3a + uVar4 * 0x48) = *puVar8;\n                if (1 < uVar3) {\n                    uVar1 = *puVar12;\n                    puVar12 = puVar8 + 2;\n                    *(*(iVar13 * 8 + 0x140037fd0) + 0x3b + uVar4 * 0x48) = uVar1;\n                }\n                if (uVar3 == 3) {\n                    uVar1 = *puVar12;\n                    puVar12 = puVar12 + 1;\n                    *(*(iVar13 * 8 + 0x140037fd0) + 0x3c + uVar4 * 0x48) = uVar1;\n                }\n                puVar8 = puVar12 + -uVar9;\n            }\n        }\n        iVar10 = fcn.140017998(0xfde9, 0);\n        if (iVar10 == 0) {\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            fcn.14000d34c(uVar3);\n            return -1;\n        }\n        iVar7 = *(iVar13 * 8 + 0x140037fd0);\n        *(iVar7 + 0x3d + uVar4 * 0x48) = -(iVar10 != puVar8 - arg2) & 2U | *(iVar7 + 0x3d + uVar4 * 0x48) & 0xfd;\n        return iVar10 * 2;\n    }\n    return iVar10;\n}\n",
        "token_count": 1645
    },
    "14001979": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t fcn.140019794(uint16_t *arg1, uint16_t *arg2, int64_t arg3)\n\n{\n    uint16_t uVar1;\n    uint16_t uVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    uint32_t uVar5;\n    uint64_t uVar6;\n    int64_t iVar7;\n    uint32_t uVar8;\n    int64_t iStack56;\n    int64_t iStack48;\n    char cStack32;\n    \n    if (*0x140037f80 != 0) {\n        if ((arg1 == NULL) || (arg2 == NULL)) {\n            puVar4 = fcn.14000d3d8();\n            *puVar4 = 0x16;\n            fcn.14000cdc0();\n            iVar3 = 0x7fffffff;\n        }\n        else if (arg3 == 0) {\n            iVar3 = 0;\n        }\n        else {\n            fcn.14000c5c0(&stack0xffffffffffffffc8, 0);\n            iVar7 = iStack48;\n            if (*(iStack48 + 0x138) == 0) {\n                iVar3 = fcn.140019748(arg1, arg2, arg3);\n            }\n            else {\n                do {\n                    uVar1 = *arg1;\n                    arg1 = arg1 + 1;\n                    if (uVar1 < 0x100) {\n                        uVar6 = uVar1;\n                        if ((*(\n                              L\"         (((((                  H\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x10\\x10\\x10\\x10\\x10\\x10\\x10\u0181\u0181\u0181\u0181\u0181\u0181\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\\x10\\x10\\x10\\x10\\x10\\x10\u0182\u0182\u0182\u0182\u0182\u0182\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\\x10\\x10\\x10\\x10      (                          \\b\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\u0112\\x10\\x100\\x10\\x10\\x10\\x10\\x14\\x14\\x10\u0112\\x10\\x10\\x10\\x14\u0112\\x10\\x10\\x10\\x10\\x10\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\\x10\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\\x10\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0101\"\n                              + uVar6) & 1) != 0) {\n                            uVar6 = *(uVar6 + *(iVar7 + 0x110));\n                        }\n                        uVar1 = uVar6;\n                    }\n                    else {\n                        uVar1 = fcn.140011be0(uVar1, &stack0xffffffffffffffd0);\n                        iVar7 = iStack48;\n                    }\n                    uVar2 = *arg2;\n                    arg2 = arg2 + 1;\n                    if (uVar2 < 0x100) {\n                        uVar6 = uVar2;\n                        if ((*(\n                              L\"         (((((                  H\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x84\\x10\\x10\\x10\\x10\\x10\\x10\\x10\u0181\u0181\u0181\u0181\u0181\u0181\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\\x10\\x10\\x10\\x10\\x10\\x10\u0182\u0182\u0182\u0182\u0182\u0182\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\\x10\\x10\\x10\\x10      (                          \\b\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\\x10\u0112\\x10\\x100\\x10\\x10\\x10\\x10\\x14\\x14\\x10\u0112\\x10\\x10\\x10\\x14\u0112\\x10\\x10\\x10\\x10\\x10\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0101\\x10\u0101\u0101\u0101\u0101\u0101\u0101\u0101\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\\x10\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0102\u0101\"\n                              + uVar6) & 1) != 0) {\n                            uVar6 = *(uVar6 + *(iVar7 + 0x110));\n                        }\n                        uVar2 = uVar6;\n                    }\n                    else {\n                        uVar2 = fcn.140011be0(uVar2, &stack0xffffffffffffffd0);\n                        iVar7 = iStack48;\n                    }\n                    iVar3 = uVar1 - uVar2;\n                } while (((iVar3 == 0) && (uVar1 != 0)) && (arg3 = arg3 + -1,  arg3 != 0));\n            }\n            if (cStack32 != '\\0') {\n                *(iStack56 + 0x3a8) = *(iStack56 + 0x3a8) & 0xfffffffd;\n            }\n        }\n        return iVar3;\n    }\n    if ((arg1 != NULL) && (arg2 != NULL)) {\n        if (arg3 != 0) {\n            do {\n                uVar1 = *arg1;\n                arg1 = arg1 + 1;\n                uVar2 = *arg2;\n                arg2 = arg2 + 1;\n                uVar8 = uVar1 + 0x20;\n                if (0x19 < uVar1 - 0x41) {\n                    uVar8 = uVar1;\n                }\n                uVar5 = uVar2 + 0x20;\n                if (0x19 < uVar2 - 0x41) {\n                    uVar5 = uVar2;\n                }\n            } while (((uVar8 - uVar5 == 0) && (uVar8 != 0)) && (arg3 = arg3 + -1,  arg3 != 0));\n            return uVar8 - uVar5;\n        }\n        return 0;\n    }\n    iStack48 = 0x1400197ab;\n    puVar4 = fcn.14000d3d8();\n    *puVar4 = 0x16;\n    iStack48 = 0x1400197b6;\n    fcn.14000cdc0();\n    return 0x7fffffff;\n}\n",
        "token_count": 1616
    },
    "14001993": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t fcn.140019930(int64_t arg1, uint64_t arg2, ulong arg3, uint64_t arg4)\n\n{\n    uint8_t *puVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    uint32_t *in_stack_00000028;\n    int32_t in_stack_00000030;\n    int32_t iStack24;\n    int32_t iStack20;\n    \n    if (((in_stack_00000028 == NULL) || (*in_stack_00000028 = 0xffffffff,  arg1 == 0)) ||\n       ((in_stack_00000030 != 0 && ((arg4 & 0xfffffe7f) != 0)))) {\n        puVar3 = fcn.14000d3d8();\n        *puVar3 = 0x16;\n        fcn.14000cdc0();\n        iVar2 = 0x16;\n    }\n    else {\n        iStack24 = 0;\n        iStack20 = 0;\n        iVar2 = fcn.140019f40(&iStack24, in_stack_00000028, arg1, arg2 & 0xffffffff);\n        if (iStack24 != 0) {\n            if (iVar2 != 0) {\n                puVar1 = *((*in_stack_00000028 >> 6) * 8 + 0x140037fd0) + 0x38 + (*in_stack_00000028 & 0x3f) * 0x48;\n                *puVar1 = *puVar1 & 0xfe;\n            }\n            iStack20 = iVar2;\n            fcn.1400183d8(*in_stack_00000028);\n        }\n        if (iVar2 != 0) {\n            *in_stack_00000028 = 0xffffffff;\n        }\n    }\n    return iVar2;\n}\n",
        "token_count": 408
    },
    "1400199f": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint64_t fcn.1400199f4(ulong arg1, uint8_t *arg2, ulong arg3, char *arg4)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int64_t iVar4;\n    uint32_t *puVar5;\n    uint *puVar6;\n    uint32_t uVar7;\n    int32_t iVar8;\n    uint64_t uVar9;\n    uint32_t auStackX8 [2];\n    \n    uVar9 = arg1;\n    iVar8 = 0;\n    *arg4 = '\\0';\n    if (-1 < *(*((uVar9 >> 6) * 8 + 0x140037fd0) + 0x38 + (arg1 & 0x3f) * 0x48)) {\n        return 0;\n    }\n    if ((arg3 & 0x74000) == 0) {\n        auStackX8[0] = 0;\n        iVar2 = fcn.14001cbbc(auStackX8);\n        if (iVar2 != 0) {\n            fcn.14000ce10(0, 0, 0, 0, 0);\n            pcVar1 = swi(3);\n            uVar9 = (*pcVar1)();\n            return uVar9;\n        }\n        if ((auStackX8[0] & 0x74000) == 0) {\n            arg3._0_4_ = arg3 | 0x4000;\n        }\n        else {\n            arg3._0_4_ = arg3 | auStackX8[0] & 0x74000;\n        }\n    }\n    uVar7 = arg3 & 0x74000;\n    iVar2 = 2;\n    if (uVar7 == 0x4000) {\n        *arg4 = '\\0';\n    }\n    else if ((uVar7 - 0x10000 & 0xffffbfff) == 0) {\n        if ((arg3 & 0x301) == 0x301) goto code_r0x000140019abb;\n    }\n    else if ((uVar7 - 0x20000 & 0xffffbfff) == 0) {\ncode_r0x000140019abb:\n        *arg4 = '\\x02';\n    }\n    else if ((uVar7 - 0x40000 & 0xffffbfff) == 0) {\n        *arg4 = '\\x01';\n    }\n    if ((arg3 & 0x70000) == 0) {\n        return 0;\n    }\n    if ((*arg2 & 0x40) != 0) {\n        return 0;\n    }\n    uVar7 = *(arg2 + 4) & 0xc0000000;\n    if (uVar7 == 0x40000000) {\ncode_r0x000140019aff:\n        iVar3 = *(arg2 + 8);\n        if ((iVar3 != 1) && (iVar3 != 2)) {\n            if ((iVar3 == 3) || (iVar3 == 4)) {\n                iVar4 = fcn.140018b3c(uVar9 & 0xffffffff, 0, 2);\n                if (iVar4 != 0) {\n                    iVar4 = fcn.140018b3c(arg1, 0, 0);\n                    if (iVar4 == -1) goto code_r0x000140019b68;\n                    if ((*(arg2 + 4) & 0x80000000) == 0) {\n                        return 0;\n                    }\n                    goto code_r0x000140019b7d;\n                }\n            }\n            else if (iVar3 != 5) {\n                return 0;\n            }\n        }\n        if (*arg4 == '\\x01') {\n            iVar2 = 3;\n            auStackX8[0] = 0xbfbbef;\n        }\n        else {\n            if (*arg4 != '\\x02') {\n                return 0;\n            }\n            auStackX8[0] = 0xfeff;\n        }\n        while (iVar3 = fcn.14001381c(uVar9 & 0xffffffff, auStackX8 + iVar8, iVar2 - iVar8),  iVar3 != -1) {\n            iVar8 = iVar8 + iVar3;\n            if (iVar2 <= iVar8) {\n                return 0;\n            }\n        }\n        goto code_r0x000140019b68;\n    }\n    if (uVar7 != 0x80000000) {\n        if (uVar7 != 0xc0000000) {\n            return 0;\n        }\n        goto code_r0x000140019aff;\n    }\ncode_r0x000140019b7d:\n    auStackX8[0] = 0;\n    iVar8 = fcn.14001928c(uVar9 & 0xffffffff, auStackX8, 3);\n    if (iVar8 == -1) goto code_r0x000140019b68;\n    if (iVar8 == 2) {\ncode_r0x000140019bb6:\n        if ((auStackX8[0] & 0xffff) == 0xfffe) {\n            puVar6 = fcn.14000d3d8();\n            *puVar6 = 0x16;\n            goto code_r0x000140019b68;\n        }\n        if ((auStackX8[0] & 0xffff) == 0xfeff) {\n            iVar4 = fcn.140018b3c(uVar9 & 0xffffffff, 2, 0);\n            if (iVar4 != -1) {\n                *arg4 = '\\x02';\n                return 0;\n            }\n            goto code_r0x000140019b68;\n        }\n    }\n    else if (iVar8 == 3) {\n        if (auStackX8[0] == 0xbfbbef) {\n            *arg4 = '\\x01';\n            return 0;\n        }\n        goto code_r0x000140019bb6;\n    }\n    iVar4 = fcn.140018b3c(uVar9 & 0xffffffff, 0, 0);\n    if (iVar4 != -1) {\n        return 0;\n    }\ncode_r0x000140019b68:\n    puVar5 = fcn.14000d3d8();\n    return *puVar5;\n}\n",
        "token_count": 1421
    },
    "140019f4": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t fcn.140019f40(uint *arg1, uint32_t *arg2, ulong arg3, ulong arg4)\n\n{\n    uint8_t *puVar1;\n    uint32_t uVar2;\n    int64_t iVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    uchar (*pauVar6) [16];\n    uint *puVar7;\n    int32_t *piVar8;\n    int64_t iVar9;\n    uint64_t uVar10;\n    uint64_t uVar11;\n    uint32_t in_stack_00000028;\n    uint32_t in_stack_00000030;\n    uchar auStack168 [8];\n    uchar auStack160 [4];\n    uint32_t uStack156;\n    ulong uStack152;\n    ulong uStack144;\n    uint8_t uStack136;\n    ulong uStack128;\n    uint64_t uStack120;\n    uint64_t uStack112;\n    uint auStack104 [2];\n    ulong uStack96;\n    uint32_t uStack88;\n    uint uStack72;\n    uint uStack68;\n    uint uStack64;\n    uint uStack60;\n    ulong uStack56;\n    \n    puVar7 = &uStack72;\n    pauVar6 = fcn.140019c74(puVar7, arg4, in_stack_00000028, in_stack_00000030);\n    _auStack160 = *pauVar6;\n    uStack144 = *pauVar6[1];\n    uVar10 = SUB168(_auStack160 >> 0x40, 0);\n    uVar11 = uVar10 >> 0x20;\n    iVar5 = SUB164(_auStack160 >> 0x60, 0);\n    uStack128 = uStack144;\n    uStack112 = uVar11;\n    if (iVar5 == -1) {\n        puVar7 = fcn.14000d3b8(puVar7);\n        *puVar7 = 0;\n        *arg2 = 0xffffffff;\n        goto code_r0x000140019fc1;\n    }\n    uVar4 = fcn.140018400(uVar10);\n    *arg2 = uVar4;\n    if (uVar4 == 0xffffffff) {\n        puVar7 = fcn.14000d3b8(puVar7);\n        *puVar7 = 0;\n        *arg2 = 0xffffffff;\n        puVar7 = fcn.14000d3d8();\n        *puVar7 = 0x18;\n        goto code_r0x000140019fc1;\n    }\n    uStack144._0_4_ = uStack144 >> 0x20 | uStack144;\n    uStack120 = uStack144;\n    uStack88 = ~(arg4 >> 7) & 1;\n    *arg1 = 1;\n    auStack104[0] = 0x18;\n    uStack96 = 0;\n    iVar9 = (*_sym.imp.KERNEL32.dll_CreateFileW)(arg3, _auStack160 >> 0x20, iVar5, auStack104, uStack152, uStack144, 0);\n    uVar4 = uStack156;\n    if (iVar9 == -1) {\n        if (((uStack156 & 0xc0000000) == 0xc0000000) && ((arg4 & 1) != 0)) {\n            uVar4 = uStack156 & 0x7fffffff;\n            _auStack160 = _auStack160 & 0xffffffffffffffff;\n            iVar9 = (*_sym.imp.KERNEL32.dll_CreateFileW)\n                              (arg3, _auStack160 >> 0x20, uVar11, auStack104, uStack152, uStack144, 0);\n            if (iVar9 != -1) goto code_r0x00014001a0d8;\n        }\n        puVar1 = *((*arg2 >> 6) * 8 + 0x140037fd0) + 0x38 + (*arg2 & 0x3f) * 0x48;\n        *puVar1 = *puVar1 & 0xfe;\n        uVar4 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        fcn.14000d34c(uVar4);\n    }\n    else {\ncode_r0x00014001a0d8:\n        iVar5 = (*_sym.imp.KERNEL32.dll_GetFileType)();\n        if (iVar5 != 0) {\n            if (iVar5 == 2) {\n                auStack160[0] = auStack160[0] | 0x40;\n            }\n            else if (iVar5 == 3) {\n                auStack160[0] = auStack160[0] | 8;\n            }\n            fcn.140018318(*arg2, iVar9);\n            uStack136 = auStack160[0] | 1;\n            _auStack160 = CONCAT151(stack0xffffffffffffff61, auStack160[0]) | 0x1;\n            *(*((*arg2 >> 6) * 8 + 0x140037fd0) + 0x38 + (*arg2 & 0x3f) * 0x48) = uStack136;\n            *(*((*arg2 >> 6) * 8 + 0x140037fd0) + 0x39 + (*arg2 & 0x3f) * 0x48) = 0;\n            if (((arg4 & 2) == 0) || (iVar5 = fcn.140019e7c(*arg2),  iVar5 == 0)) {\n                uStack72 = auStack160;\n                uStack68 = uStack156;\n                uStack64 = uStack152;\n                uStack60 = uStack152._4_4_;\n                auStack168[0] = 0;\n                uStack56 = uStack128;\n                iVar5 = fcn.1400199f4(*arg2, &uStack72, arg4, auStack168);\n                uVar2 = *arg2;\n                if (iVar5 == 0) {\n                    *(*((uVar2 >> 6) * 8 + 0x140037fd0) + 0x39 + (uVar2 & 0x3f) * 0x48) = auStack168[0];\n                    uVar10 = *arg2 & 0x3f;\n                    iVar3 = *((*arg2 >> 6) * 8 + 0x140037fd0);\n                    puVar1 = iVar3 + 0x3d + uVar10 * 0x48;\n                    *puVar1 = *puVar1 ^ (arg4 >> 0x10 ^ *(iVar3 + 0x3d + uVar10 * 0x48)) & 1;\n                    if (((uStack136 & 0x48) == 0) && ((arg4 & 8) != 0)) {\n                        puVar1 = *((*arg2 >> 6) * 8 + 0x140037fd0) + 0x38 + (*arg2 & 0x3f) * 0x48;\n                        *puVar1 = *puVar1 | 0x20;\n                    }\n                    if (((uVar4 & 0xc0000000) == 0xc0000000) && ((arg4 & 1) != 0)) {\n                        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar9);\n                        _auStack160 = CONCAT88(uStack152, CONCAT44(uVar4, auStack160)) & 0xffffffffffffffff;\n                        iVar9 = (*_sym.imp.KERNEL32.dll_CreateFileW)\n                                          (arg3, _auStack160 >> 0x20, uStack112 & 0xffffffff, auStack104, uStack152, \n                                           uStack120, 0);\n                        if (iVar9 == -1) {\n                            uVar4 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                            fcn.14000d34c(uVar4);\n                            puVar1 = *((*arg2 >> 6) * 8 + 0x140037fd0) + 0x38 + (*arg2 & 0x3f) * 0x48;\n                            *puVar1 = *puVar1 & 0xfe;\n                            fcn.140018540(*arg2);\n                            goto code_r0x000140019fc1;\n                        }\n                        *(*((*arg2 >> 6) * 8 + 0x140037fd0) + 0x28 + (*arg2 & 0x3f) * 0x48) = iVar9;\n                    }\n                    return 0;\n                }\n                uVar10 = uVar2 & 0xffffffff;\n            }\n            else {\n                uVar10 = *arg2;\n            }\n            fcn.1400129c0(uVar10);\n            return iVar5;\n        }\n        uVar4 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        fcn.14000d34c(uVar4);\n        puVar1 = *((*arg2 >> 6) * 8 + 0x140037fd0) + 0x38 + (*arg2 & 0x3f) * 0x48;\n        *puVar1 = *puVar1 & 0xfe;\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar9);\n        if (uVar4 == 0) {\n            puVar7 = fcn.14000d3d8();\n            *puVar7 = 0xd;\n        }\n    }\ncode_r0x000140019fc1:\n    piVar8 = fcn.14000d3d8();\n    return *piVar8;\n}\n",
        "token_count": 2155
    },
    "14001a48": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint64_t fcn.14001a480(char *arg1, char *arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    uint64_t in_RAX;\n    char *pcVar2;\n    uint64_t uVar3;\n    int32_t in_stack_00000028;\n    \n    if (in_stack_00000028 == 0) {\n        return in_RAX & 0xffffffffffffff00 | '4' < *arg2;\n    }\n    pcVar2 = fcn.14001be14();\n    iVar1 = pcVar2;\n    if (iVar1 == 0) {\n        uVar3 = 1;\n        if (*arg2 < '6') {\n            if (*arg2 < '5') {\ncode_r0x00014001a539:\n                return pcVar2 & 0xffffffffffffff00;\n            }\n            pcVar2 = arg2 + 1;\n            if (arg4 != 0) {\n                for (; *pcVar2 == '0'; pcVar2 = pcVar2 + 1) {\n                }\n                if (*pcVar2 == '\\0') {\n                    if (arg2 != arg1) {\n                        return pcVar2 & 0xffffffffffffff00 | arg2[-1] & 1;\n                    }\n                    goto code_r0x00014001a539;\n                }\n            }\n        }\n        goto code_r0x00014001a4cd;\n    }\n    if (iVar1 == 0x200) {\n        if (arg4 == 0) goto joined_r0x00014001a535;\n        while( true ) {\n            pcVar2 = pcVar2 & 0xffffffffffffff00;\n            if (*arg2 != '0') break;\n            arg2 = arg2 + 1;\n        }\n        if (*arg2 != '\\0') goto joined_r0x00014001a535;\n    }\n    else {\n        if (iVar1 != 0x100) goto code_r0x00014001a539;\n        if (arg4 != 0) {\n            while( true ) {\n                pcVar2 = pcVar2 & 0xffffffffffffff00;\n                if (*arg2 != '0') break;\n                arg2 = arg2 + 1;\n            }\n            if (*arg2 == '\\0') goto code_r0x00014001a50f;\n        }\njoined_r0x00014001a535:\n        uVar3 = 1;\n        if (arg3 == 0x2d) goto code_r0x00014001a4cd;\n    }\ncode_r0x00014001a50f:\n    uVar3 = 0;\ncode_r0x00014001a4cd:\n    return pcVar2 & 0xffffffffffffff00 | uVar3;\n}\n",
        "token_count": 605
    },
    "14001a55": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint fcn.14001a550(char *arg1, uint64_t arg2, ulong arg3, uint32_t *arg4)\n\n{\n    char *arg1_00;\n    int64_t iVar1;\n    char cVar2;\n    int32_t iVar3;\n    char *arg2_00;\n    uint uVar4;\n    char *pcVar5;\n    int64_t iVar6;\n    uint32_t in_stack_00000028;\n    int64_t in_stack_00000038;\n    \n    if ((arg1 != NULL) && (arg2 != 0)) {\n        *arg1 = '\\0';\n        iVar3 = 0;\n        if (0 < arg3) {\n            iVar3 = arg3;\n        }\n        if (arg2 <= iVar3 + 1) {\n            uVar4 = 0x22;\n            goto code_r0x00014001a574;\n        }\n        if (arg4 != NULL) {\n            arg1_00 = *(arg4 + 2);\n            pcVar5 = arg1 + 1;\n            *arg1 = '0';\n            arg2_00 = arg1_00;\n            for (; 0 < arg3; arg3._0_4_ = arg3 + -1) {\n                cVar2 = *arg2_00;\n                if (cVar2 == '\\0') {\n                    cVar2 = '0';\n                }\n                else {\n                    arg2_00 = arg2_00 + 1;\n                }\n                *pcVar5 = cVar2;\n                pcVar5 = pcVar5 + 1;\n            }\n            *pcVar5 = '\\0';\n            if ((-1 < arg3) && (cVar2 = fcn.14001a480(arg1_00, arg2_00, *arg4, in_stack_00000028),  cVar2 != '\\0')) {\n                while( true ) {\n                    pcVar5 = pcVar5 + -1;\n                    if (*pcVar5 != '9') break;\n                    *pcVar5 = '0';\n                }\n                *pcVar5 = *pcVar5 + '\\x01';\n            }\n            if (*arg1 == '1') {\n                arg4[1] = arg4[1] + 1;\n            }\n            else {\n                iVar1 = -1;\n                do {\n                    iVar6 = iVar1;\n                    iVar1 = iVar6 + 1;\n                } while (arg1[iVar6 + 2] != '\\0');\n                fcn.140020a40(arg1, arg1 + 1, iVar6 + 2);\n            }\n            return 0;\n        }\n    }\n    uVar4 = 0x16;\ncode_r0x00014001a574:\n    *(in_stack_00000038 + 0x2c) = uVar4;\n    *(in_stack_00000038 + 0x30) = 1;\n    fcn.14000ccf4(0, 0, 0, 0);\n    return uVar4;\n}\n",
        "token_count": 662
    },
    "14001a66": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint64_t fcn.14001a660(uint32_t *arg1, uint32_t *arg2)\n\n{\n    uint32_t uVar1;\n    uint64_t uVar2;\n    uint64_t uVar3;\n    uint32_t *puVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    uint64_t uVar7;\n    int64_t iVar8;\n    int32_t iVar9;\n    int64_t iVar10;\n    uint32_t uVar11;\n    int32_t iVar12;\n    uint64_t uVar13;\n    uint32_t uVar14;\n    uint32_t uVar15;\n    uint64_t uVar16;\n    uint64_t uVar17;\n    uint32_t uVar18;\n    uint8_t uStackX8;\n    uint32_t uStackX24;\n    uint64_t uStack568;\n    uint64_t uStack552;\n    uchar auStack532 [468];\n    \n    if ((*arg1 == 0) || (uVar5 = *arg2,  uVar5 == 0)) {\n        return 0;\n    }\n    uVar15 = *arg1 - 1;\n    uVar16 = uVar15;\n    uVar14 = uVar5 - 1;\n    if (uVar14 == 0) {\n        uVar5 = arg2[1];\n        uVar17 = uVar5;\n        uVar7 = 0;\n        if (uVar5 == 1) {\n            uVar5 = arg1[1];\n            *arg1 = 0;\n            fcn.14001bd8c(arg1 + 1, 0x1cc, auStack532, 0);\n            return uVar5;\n        }\n        uVar2 = uVar7;\n        if (uVar15 != 0) {\n            while (uVar15 != 0xffffffff) {\n                iVar8 = uVar16 + 1;\n                uVar15 = uVar16 - 1;\n                uVar16 = uVar15;\n                uVar13 = arg1[iVar8] | uVar7 << 0x20;\n                uVar7 = uVar13 % uVar17;\n                uVar2 = (uVar2 << 0x20) + (uVar13 / uVar17 & 0xffffffff);\n            }\n            *arg1 = 0;\n            fcn.14001bd8c(arg1 + 1, 0x1cc, auStack532, 0);\n            arg1[1] = uVar7;\n            arg1[2] = 0;\n            *arg1 = 1;\n            return uVar2;\n        }\n        uVar14 = arg1[1];\n        *arg1 = 0;\n        fcn.14001bd8c(arg1 + 1, 0x1cc, auStack532, 0);\n        uVar5 = uVar14 % uVar5;\n        arg1[1] = uVar5;\n        *arg1 = uVar5 != 0;\n        return uVar14 / uVar17;\n    }\n    if (uVar15 < uVar14) {\n        return 0;\n    }\n    iVar8 = uVar15;\n    iVar12 = uVar15 - uVar14;\n    iVar10 = iVar12;\n    if (iVar10 <= iVar8) {\n        puVar4 = arg1 + iVar8 + 1;\n        uVar7 = uVar16;\n        do {\n            iVar9 = uVar7;\n            if (*(arg2 + (iVar10 * -4 - arg1) + puVar4) != *puVar4) {\n                if (arg1[iVar9 + 1] <= arg2[(iVar9 - iVar12) + 1]) goto code_r0x00014001a804;\n                break;\n            }\n            uVar7 = iVar9 - 1;\n            iVar8 = iVar8 + -1;\n            puVar4 = puVar4 + -1;\n        } while (iVar10 <= iVar8);\n    }\n    iVar12 = iVar12 + 1;\ncode_r0x00014001a804:\n    if (iVar12 == 0) {\n        return 0;\n    }\n    uVar14 = arg2[uVar14 + 1];\n    uStackX24 = arg2[(uVar5 - 2) + 1];\n    uVar11 = 0;\n    uVar7 = 0;\n    iVar9 = 0x1f;\n    if (uVar14 != 0) {\n        for (; uVar14 >> iVar9 == 0; iVar9 = iVar9 + -1) {\n        }\n    }\n    if (uVar14 == 0) {\n        iVar9 = 0x20;\n        uStackX8 = 0;\n    }\n    else {\n        iVar9 = 0x1f - iVar9;\n        uStackX8 = 0x20 - iVar9;\n        if (iVar9 == 0) goto code_r0x00014001a894;\n    }\n    uVar6 = uStackX24 >> (uStackX8 & 0x1f);\n    uStackX24 = uStackX24 << (iVar9 & 0x1f);\n    uVar14 = uVar6 | uVar14 << (iVar9 & 0x1f);\n    if (2 < uVar5) {\n        uStackX24 = uStackX24 | arg2[(uVar5 - 3) + 1] >> (uStackX8 & 0x1f);\n    }\ncode_r0x00014001a894:\n    iVar12 = iVar12 + -1;\n    uStack552 = 0;\n    uVar17 = uVar7;\n    if (-1 < iVar12) {\n        uVar2 = uVar14;\n        uVar14 = iVar12 + uVar5;\n        do {\n            uVar15 = uVar11;\n            if (uVar14 <= uVar16) {\n                uVar15 = arg1[uVar14 + 1];\n            }\n            uVar6 = arg1[(uVar14 - 2) + 1];\n            uVar17 = uVar6;\n            uStack568 = CONCAT44(uVar15, arg1[(uVar14 - 1) + 1]);\n            if (iVar9 != 0) {\n                uStack568 = uVar6 >> (uStackX8 & 0x3f) | uStack568 << (iVar9 & 0x3f);\n                uVar6 = uVar6 << (iVar9 & 0x1f);\n                uVar17 = uVar6;\n                if (2 < uVar14) {\n                    uVar17 = uVar6 | arg1[(uVar14 - 3) + 1] >> (uStackX8 & 0x1f);\n                }\n            }\n            uVar13 = uStack568 / uVar2;\n            uStack568 = uStack568 % uVar2;\n            if (0xffffffff < uVar13) {\n                iVar8 = uVar13 - 0xffffffff;\n                uVar13 = 0xffffffff;\n                uStack568 = uStack568 + iVar8 * uVar2;\n            }\n            if (uStack568 < 0x100000000) {\n                uVar3 = uStackX24 * uVar13;\n                do {\n                    if (uVar3 <= (uStack568 << 0x20 | uVar17)) break;\n                    uVar13 = uVar13 - 1;\n                    uVar3 = uVar3 - uStackX24;\n                    uStack568 = uStack568 + uVar2;\n                } while (uStack568 < 0x100000000);\n            }\n            if (uVar13 != 0) {\n                uVar16 = uVar7;\n                uVar6 = uVar11;\n                puVar4 = arg2;\n                if (uVar5 != 0) {\n                    do {\n                        uVar16 = uVar16 + puVar4[1] * uVar13;\n                        uVar1 = uVar16;\n                        uVar17 = uVar16 >> 0x20;\n                        uVar16 = uVar17 + 1;\n                        if (uVar1 <= arg1[uVar6 + iVar12 + 1]) {\n                            uVar16 = uVar17;\n                        }\n                        uVar18 = uVar6 + 1;\n                        arg1[uVar6 + iVar12 + 1] = arg1[uVar6 + iVar12 + 1] - uVar1;\n                        uVar6 = uVar18;\n                        puVar4 = puVar4 + 1;\n                    } while (uVar18 < uVar5);\n                }\n                if (uVar15 < uVar16) {\n                    uVar16 = uVar7;\n                    uVar15 = uVar11;\n                    puVar4 = arg2;\n                    if (uVar5 != 0) {\n                        do {\n                            uVar6 = uVar15 + 1;\n                            uVar16 = uVar16 + puVar4[1] + arg1[uVar15 + iVar12 + 1];\n                            arg1[uVar15 + iVar12 + 1] = uVar16;\n                            uVar16 = uVar16 >> 0x20;\n                            uVar15 = uVar6;\n                            puVar4 = puVar4 + 1;\n                        } while (uVar6 < uVar5);\n                    }\n                    uVar13 = uVar13 - 1;\n                }\n                uVar16 = uVar14 - 1;\n            }\n            uVar15 = uVar16;\n            uVar14 = uVar14 - 1;\n            uVar17 = (uStack552 << 0x20) + (uVar13 & 0xffffffff);\n            iVar12 = iVar12 + -1;\n            uStack552 = uVar17;\n        } while (-1 < iVar12);\n    }\n    uVar15 = uVar15 + 1;\n    uVar5 = uVar15;\n    if (uVar15 < *arg1) {\n        do {\n            uVar16 = uVar5;\n            uVar5 = uVar5 + 1;\n            arg1[uVar16 + 1] = 0;\n        } while (uVar5 < *arg1);\n    }\n    *arg1 = uVar15;\n    while( true ) {\n        if (uVar15 == 0) {\n            return uVar17;\n        }\n        uVar15 = uVar15 - 1;\n        if (arg1[uVar15 + 1] != 0) break;\n        *arg1 = uVar15;\n    }\n    return uVar17;\n}\n",
        "token_count": 2330
    },
    "14001bf7": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nbool fcn.14001bf70(void)\n\n{\n    char cVar1;\n    int32_t aiStackX8 [8];\n    \n    aiStackX8[0] = 0;\n    cVar1 = fcn.14001c878();\n    if (cVar1 == '\\0') {\n        fcn.140016410(aiStackX8);\n    }\n    return aiStackX8[0] != 1;\n}\n",
        "token_count": 94
    },
    "14001c8a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.14001c8a0(uint64_t arg1, uint8_t *arg2, uint64_t arg3, uint32_t *arg4)\n\n{\n    uint8_t uVar1;\n    uint32_t uVar2;\n    uint8_t uVar3;\n    uint64_t uVar4;\n    uint8_t *puVar5;\n    uint8_t uVar6;\n    uint64_t uVar7;\n    uint32_t *arg1_00;\n    uint32_t *puVar8;\n    uint64_t uVar9;\n    ulong in_stack_00000028;\n    uchar auStack120 [24];\n    uint32_t auStack96 [6];\n    uint64_t uStack72;\n    \n    uStack72 = *0x140037f00 ^ auStack120;\n    arg1_00 = 0x140038878;\n    if (arg4 != NULL) {\n        arg1_00 = arg4;\n    }\n    puVar5 = 0x14002f59d;\n    if (arg2 != NULL) {\n        puVar5 = arg2;\n    }\n    uVar9 = 1;\n    if (arg2 != NULL) {\n        uVar9 = arg3;\n    }\n    puVar8 = -(arg2 != NULL) & arg1;\n    if (uVar9 == 0) goto code_r0x00014001ca5d;\n    if (*(arg1_00 + 6) == 0) {\n        uVar3 = *puVar5;\n        puVar5 = puVar5 + 1;\n        if (-1 < uVar3) {\n            if (puVar8 != NULL) {\n                *puVar8 = uVar3;\n            }\n            goto code_r0x00014001ca5d;\n        }\n        if ((uVar3 & 0xe0) == 0xc0) {\n            uVar6 = 2;\n        }\n        else if ((uVar3 & 0xf0) == 0xe0) {\n            uVar6 = 3;\n        }\n        else {\n            if ((uVar3 & 0xf8) != 0xf0) goto code_r0x00014001ca52;\n            uVar6 = 4;\n        }\n        uVar2 = (1 << (7 - uVar6 & 0x1f)) - 1U & uVar3;\n        uVar3 = uVar6;\ncode_r0x00014001c9a8:\n        uVar4 = uVar3;\n        uVar7 = uVar3;\n        if (uVar9 <= uVar4) {\n            uVar7 = uVar9;\n        }\n        while (puVar5 - arg2 < uVar7) {\n            uVar1 = *puVar5;\n            puVar5 = puVar5 + 1;\n            if ((uVar1 & 0xc0) != 0x80) goto code_r0x00014001ca52;\n            uVar2 = uVar1 & 0x3f | uVar2 << 6;\n        }\n        if (uVar7 < uVar4) {\n            *(arg1_00 + 1) = uVar6;\n            *(arg1_00 + 6) = uVar3 - uVar7;\n            *arg1_00 = uVar2;\n            goto code_r0x00014001ca5d;\n        }\n        if ((0x7ff < uVar2 - 0xd800) && (uVar2 < 0x110000)) {\n            auStack96[2] = 0x80;\n            auStack96[3] = 0x800;\n            auStack96[4] = 0x10000;\n            if (auStack96[uVar6] <= uVar2) {\n                if (puVar8 != NULL) {\n                    *puVar8 = uVar2;\n                }\n                fcn.14001d9d0(-(uVar2 != 0) & uVar4, arg1_00);\n                goto code_r0x00014001ca5d;\n            }\n        }\n    }\n    else {\n        uVar6 = *(arg1_00 + 1);\n        uVar2 = *arg1_00;\n        uVar3 = *(arg1_00 + 6);\n        if (((uVar6 - 2 < 3) && (uVar3 != 0)) && (uVar3 < uVar6)) goto code_r0x00014001c9a8;\n    }\ncode_r0x00014001ca52:\n    fcn.14001d9d8(arg1_00, in_stack_00000028);\ncode_r0x00014001ca5d:\n    fcn.14001e9f0(uStack72 ^ auStack120);\n    return;\n}\n",
        "token_count": 1054
    },
    "14001cc2": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nulong fcn.14001cc2c(ulong arg1, ulong arg2)\n\n{\n    char cVar1;\n    uint8_t uVar2;\n    int64_t iVar3;\n    uint64_t uVar4;\n    ulong uVar5;\n    int64_t iVar6;\n    \n    iVar6 = arg1 >> 6;\n    uVar4 = arg1 & 0x3f;\n    iVar3 = *(iVar6 * 8 + 0x140037fd0);\n    uVar2 = *(iVar3 + 0x38 + uVar4 * 0x48);\n    cVar1 = *(iVar3 + 0x39 + uVar4 * 0x48);\n    if (arg2 == 0x4000) {\n        *(iVar3 + 0x38 + uVar4 * 0x48) = uVar2 | 0x80;\n        *(*(iVar6 * 8 + 0x140037fd0) + 0x39 + uVar4 * 0x48) = 0;\n    }\n    else if (arg2 == 0x8000) {\n        *(iVar3 + 0x38 + uVar4 * 0x48) = uVar2 & 0x7f;\n    }\n    else if ((arg2 - 0x10000U & 0xfffeffff) == 0) {\n        *(iVar3 + 0x38 + uVar4 * 0x48) = uVar2 | 0x80;\n        *(*(iVar6 * 8 + 0x140037fd0) + 0x39 + uVar4 * 0x48) = 2;\n    }\n    else if (arg2 == 0x40000) {\n        *(iVar3 + 0x38 + uVar4 * 0x48) = uVar2 | 0x80;\n        *(*(iVar6 * 8 + 0x140037fd0) + 0x39 + uVar4 * 0x48) = 1;\n    }\n    if ((uVar2 & 0x80) == 0) {\n        uVar5 = 0x8000;\n    }\n    else if (cVar1 == '\\0') {\n        uVar5 = 0x4000;\n    }\n    else {\n        uVar5 = 0x10000;\n        if (cVar1 == '\\x01') {\n            uVar5 = 0x40000;\n        }\n    }\n    return uVar5;\n}\n",
        "token_count": 554
    },
    "14001cd1": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.14001cd10(ulong param_1, ulong param_2)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    int64_t var_40h;\n    ulong var_30h;\n    ulong var_28h;\n    uint uStack40;\n    uint uStack36;\n    ulong var_18h;\n    ulong var_bp_10h;\n    ulong var_bp_8h;\n    \n    var_40h = 0;\n    var_18h._0_1_ = *0x140037f80 == 0;\n    var_30h._0_1_ = 0;\n    var_bp_10h._0_1_ = '\\0';\n    var_bp_8h._0_1_ = '\\0';\n    if (var_18h) {\n        var_28h._0_4_ = *0x140037158;\n        var_28h._4_4_ = *0x14003715c;\n        uStack40 = *0x140037160;\n        uStack36 = *0x140037164;\n    }\n    uVar1 = fcn.14001cda8(param_1, param_2, &var_40h);\n    if (var_18h == '\\x02') {\n        *(var_40h + 0x3a8) = *(var_40h + 0x3a8) & 0xfffffffd;\n    }\n    if (var_bp_10h != '\\0') {\n        iVar2 = fcn.14000c93c(&var_40h);\n        *(iVar2 + 0x20) = var_18h._4_4_;\n    }\n    if (var_bp_8h != '\\0') {\n        iVar2 = fcn.14000c93c(&var_40h);\n        *(iVar2 + 0x24) = var_bp_10h._4_4_;\n    }\n    return uVar1;\n}\n",
        "token_count": 440
    },
    "14001db3": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint32_t fcn.14001db38(ulong arg1, ulong arg2)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint64_t arg1_00;\n    uint32_t uVar3;\n    \n    uVar1 = fcn.14001e260();\n    uVar3 = uVar1 >> 3 & 0x10;\n    uVar2 = uVar3 | 8;\n    if ((uVar1 & 0x200) == 0) {\n        uVar2 = uVar3;\n    }\n    uVar3 = uVar2 | 4;\n    if ((uVar1 >> 10 & 1) == 0) {\n        uVar3 = uVar2;\n    }\n    uVar2 = uVar3 | 2;\n    if ((uVar1 & 0x800) == 0) {\n        uVar2 = uVar3;\n    }\n    uVar3 = uVar2 | 1;\n    if ((uVar1 & 0x1000) == 0) {\n        uVar3 = uVar2;\n    }\n    uVar2 = uVar3 | 0x80000;\n    if ((uVar1 & 0x100) == 0) {\n        uVar2 = uVar3;\n    }\n    uVar3 = uVar1 & 0x6000;\n    if (uVar3 != 0) {\n        if (uVar3 == 0x2000) {\n            uVar2 = uVar2 | 0x100;\n        }\n        else if (uVar3 == 0x4000) {\n            uVar2 = uVar2 | 0x200;\n        }\n        else if (uVar3 == 0x6000) {\n            uVar2 = uVar2 | 0x300;\n        }\n    }\n    uVar1 = uVar1 & 0x8040;\n    if (uVar1 == 0x40) {\n        uVar2 = uVar2 | 0x2000000;\n    }\n    else if (uVar1 == 0x8000) {\n        uVar2 = uVar2 | 0x3000000;\n    }\n    else if (uVar1 == 0x8040) {\n        uVar2 = uVar2 | 0x1000000;\n    }\n    uVar1 = ~(arg2 & 0x308031f) & uVar2 | arg1 & arg2 & 0x308031f;\n    if (uVar1 != uVar2) {\n        uVar3 = (uVar1 & 0x10) << 3;\n        uVar2 = uVar3 | 0x200;\n        if ((uVar1 & 8) == 0) {\n            uVar2 = uVar3;\n        }\n        uVar3 = uVar2 | 0x400;\n        if ((uVar1 & 4) == 0) {\n            uVar3 = uVar2;\n        }\n        uVar2 = uVar3 | 0x800;\n        if ((uVar1 & 2) == 0) {\n            uVar2 = uVar3;\n        }\n        uVar3 = uVar2 | 0x1000;\n        if ((uVar1 & 1) == 0) {\n            uVar3 = uVar2;\n        }\n        uVar2 = uVar3 | 0x100;\n        if ((uVar1 >> 0x13 & 1) == 0) {\n            uVar2 = uVar3;\n        }\n        arg1_00 = uVar2;\n        uVar3 = uVar1 & 0x300;\n        if (uVar3 != 0) {\n            if (uVar3 == 0x100) {\n                arg1_00 = uVar2 | 0x2000;\n            }\n            else if (uVar3 == 0x200) {\n                arg1_00 = uVar2 | 0x4000;\n            }\n            else if (uVar3 == 0x300) {\n                arg1_00 = uVar2 | 0x6000;\n            }\n        }\n        uVar1 = uVar1 & 0x3000000;\n        uVar2 = arg1_00;\n        if (uVar1 == 0x1000000) {\n            arg1_00 = uVar2 | 0x8040;\n        }\n        else if (uVar1 == 0x2000000) {\n            arg1_00 = uVar2 | 0x40;\n        }\n        else if (uVar1 == 0x3000000) {\n            arg1_00 = uVar2 | 0x8000;\n        }\n        if ((*0x140037ee0 == '\\0') || ((arg1_00 & 0x40) == 0)) {\n            arg1_00 = arg1_00 & 0xffffffbf;\n            fcn.14001e270(arg1_00);\n        }\n        else {\n            fcn.14001e270(arg1_00);\n        }\n        uVar3 = arg1_00;\n        uVar1 = arg1_00 >> 3 & 0x10;\n        uVar2 = uVar1 | 8;\n        if ((arg1_00 & 0x200) == 0) {\n            uVar2 = uVar1;\n        }\n        uVar1 = uVar2 | 4;\n        if ((uVar3 >> 10 & 1) == 0) {\n            uVar1 = uVar2;\n        }\n        uVar2 = uVar1 | 2;\n        if ((uVar3 >> 0xb & 1) == 0) {\n            uVar2 = uVar1;\n        }\n        uVar1 = uVar2 | 1;\n        if ((uVar3 >> 0xc & 1) == 0) {\n            uVar1 = uVar2;\n        }\n        uVar2 = uVar1 | 0x80000;\n        if ((arg1_00 & 0x100) == 0) {\n            uVar2 = uVar1;\n        }\n        uVar1 = uVar3 & 0x6000;\n        if ((arg1_00 & 0x6000) != 0) {\n            if (uVar1 == 0x2000) {\n                uVar2 = uVar2 | 0x100;\n            }\n            else if (uVar1 == 0x4000) {\n                uVar2 = uVar2 | 0x200;\n            }\n            else if (uVar1 == 0x6000) {\n                uVar2 = uVar2 | 0x300;\n            }\n        }\n        uVar3 = uVar3 & 0x8040;\n        if (uVar3 == 0x40) {\n            uVar2 = uVar2 | 0x2000000;\n        }\n        else if (uVar3 == 0x8000) {\n            uVar2 = uVar2 | 0x3000000;\n        }\n        else if (uVar3 == 0x8040) {\n            uVar2 = uVar2 | 0x1000000;\n        }\n    }\n    return uVar2;\n}\n",
        "token_count": 1617
    },
    "14001df0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.14001df00(ulong arg1, ulong arg2, ulong ***arg3, ulong arg4)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint uVar4;\n    uint32_t in_stack_00000028;\n    uint32_t in_stack_00000030;\n    ulong in_stack_00000040;\n    int32_t in_stack_00000048;\n    uchar auStack264 [32];\n    uchar *puStack232;\n    ulong ***pppuStack224;\n    ulong uStack216;\n    ulong ***pppuStack200;\n    ulong uStack192;\n    uchar auStack184 [48];\n    ulong uStack136;\n    uint32_t uStack120;\n    uint64_t uStack72;\n    \n    uStack72 = *0x140037f00 ^ auStack264;\n    uStack192 = fcn.14001e694(0x1f80, 0xffc0);\n    pppuStack200 = arg3;\n    iVar2 = fcn.14001de44(in_stack_00000028, uStack192);\n    uVar3 = in_stack_00000040;\n    uVar4 = in_stack_00000040 >> 0x20;\n    if (iVar2 == 0) {\n        if (in_stack_00000048 == 2) {\n            uStack136 = in_stack_00000040;\n            uStack120 = uStack120 & 0xffffffe3 | 3;\n        }\n        pppuStack224 = &pppuStack200;\n        puStack232 = &stack0x00000038;\n        fcn.14001e314(auStack184, &uStack192, in_stack_00000028, arg2);\n    }\n    cVar1 = fcn.14001e2b0();\n    if ((cVar1 == '\\0') || (arg4 == 0)) {\n        fcn.14001e644(arg4);\n        fcn.14001e694(uStack192, 0xffc0);\n    }\n    else {\n        uStack216 = uStack192;\n        pppuStack224 = pppuStack200;\n        puStack232 = CONCAT44(uVar4, uVar3);\n        fcn.14001dddc(arg4, in_stack_00000030, arg1);\n    }\n    fcn.14001e9f0(uStack72 ^ auStack264);\n    return;\n}\n",
        "token_count": 534
    },
    "14001e64": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nvoid fcn.14001e644(ulong arg1)\n\n{\n    uint *puVar1;\n    \n    if (arg1 == 1) {\n        puVar1 = fcn.14000d3d8();\n        *puVar1 = 0x21;\n    }\n    else if ((arg1 == 2) || (arg1 == 3)) {\n        puVar1 = fcn.14000d3d8();\n        *puVar1 = 0x22;\n    }\n    return;\n}\n",
        "token_count": 112
    },
    "14001ec3": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint64_t fcn.14001ec34(void)\n\n{\n    int16_t *piVar1;\n    uint64_t uVar2;\n    int32_t *piVar3;\n    \n    piVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n    if ((((piVar1 == NULL) || (*piVar1 != 0x5a4d)) || (piVar3 = *(piVar1 + 0x1e) + piVar1,  *piVar3 != 0x4550)) ||\n       ((piVar1 = 0x20b,  *(piVar3 + 6) != 0x20b || (piVar3[0x21] < 0xf)))) {\n        uVar2 = piVar1 & 0xffffffffffffff00;\n    }\n    else {\n        uVar2 = CONCAT71(2, piVar3[0x3e] != 0);\n    }\n    return uVar2;\n}\n",
        "token_count": 214
    },
    "14001feb": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.14001febc(int64_t arg1, int64_t arg2)\n\n{\n    uint8_t uVar1;\n    uint32_t uVar2;\n    uint uVar3;\n    int32_t iVar4;\n    uint8_t *puVar5;\n    uint *puVar6;\n    uint *puVar7;\n    uint64_t uVar8;\n    \n    puVar5 = *(arg1 + 0x10);\n    *(arg1 + 8) = puVar5;\n    uVar1 = *((*puVar5 & 0xf) + 0x14002f0d8);\n    puVar5 = puVar5 + -*((*puVar5 & 0xf) + 0x14002f0c8);\n    uVar2 = *(puVar5 + -4);\n    *(arg1 + 8) = puVar5;\n    *(arg1 + 0x18) = uVar2 >> (uVar1 & 0x1f);\n    uVar1 = *((*puVar5 & 0xf) + 0x14002f0d8);\n    puVar5 = puVar5 + -*((*puVar5 & 0xf) + 0x14002f0c8);\n    uVar2 = *(puVar5 + -4);\n    *(arg1 + 8) = puVar5;\n    *(arg1 + 0x1c) = uVar2 >> (uVar1 & 0x1f);\n    uVar1 = *((*puVar5 & 0xf) + 0x14002f0d8);\n    puVar6 = puVar5 + -*((*puVar5 & 0xf) + 0x14002f0c8);\n    uVar2 = puVar6[-1];\n    *(arg1 + 8) = puVar6;\n    *(arg1 + 0x20) = uVar2 >> (uVar1 & 0x1f);\n    uVar3 = *puVar6;\n    puVar6 = puVar6 + 1;\n    iVar4 = *(arg2 + 8);\n    *(arg1 + 8) = puVar6;\n    *(arg1 + 0x24) = uVar3;\n    if (iVar4 != 0) {\n        uVar8 = *(arg2 + 8);\n        do {\n            uVar1 = *((*puVar6 & 0xf) + 0x14002f0d8);\n            puVar5 = puVar6 - *((*puVar6 & 0xf) + 0x14002f0c8);\n            uVar2 = *(puVar5 + -4);\n            *(arg1 + 8) = puVar5;\n            *(arg1 + 0x18) = uVar2 >> (uVar1 & 0x1f);\n            uVar1 = *((*puVar5 & 0xf) + 0x14002f0d8);\n            puVar5 = puVar5 + -*((*puVar5 & 0xf) + 0x14002f0c8);\n            uVar2 = *(puVar5 + -4);\n            *(arg1 + 8) = puVar5;\n            *(arg1 + 0x1c) = uVar2 >> (uVar1 & 0x1f);\n            uVar1 = *((*puVar5 & 0xf) + 0x14002f0d8);\n            puVar7 = puVar5 + -*((*puVar5 & 0xf) + 0x14002f0c8);\n            uVar2 = puVar7[-1];\n            puVar6 = puVar7 + 1;\n            *(arg1 + 8) = puVar7;\n            *(arg1 + 0x20) = uVar2 >> (uVar1 & 0x1f);\n            uVar3 = *puVar7;\n            *(arg1 + 8) = puVar6;\n            *(arg1 + 0x24) = uVar3;\n            uVar1 = *((*puVar6 & 0xf) + 0x14002f0d8);\n            puVar5 = puVar6 - *((*puVar6 & 0xf) + 0x14002f0c8);\n            uVar2 = *(puVar5 + -4);\n            *(arg1 + 8) = puVar5;\n            *(arg1 + 0x18) = uVar2 >> (uVar1 & 0x1f);\n            uVar1 = *((*puVar5 & 0xf) + 0x14002f0d8);\n            puVar5 = puVar5 + -*((*puVar5 & 0xf) + 0x14002f0c8);\n            uVar2 = *(puVar5 + -4);\n            *(arg1 + 8) = puVar5;\n            *(arg1 + 0x1c) = uVar2 >> (uVar1 & 0x1f);\n            uVar1 = *((*puVar5 & 0xf) + 0x14002f0d8);\n            puVar7 = puVar5 + -*((*puVar5 & 0xf) + 0x14002f0c8);\n            uVar2 = puVar7[-1];\n            puVar6 = puVar7 + 1;\n            *(arg1 + 8) = puVar7;\n            *(arg1 + 0x20) = uVar2 >> (uVar1 & 0x1f);\n            uVar3 = *puVar7;\n            *(arg1 + 8) = puVar6;\n            *(arg1 + 0x24) = uVar3;\n            uVar8 = uVar8 - 1;\n        } while (uVar8 != 0);\n    }\n    return;\n}\n",
        "token_count": 1294
    },
    "1400202c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nvoid fcn.1400202c0(int32_t *arg1)\n\n{\n    uint8_t *puVar1;\n    \n    if ((((arg1 != NULL) && (*arg1 == -0x1f928c9d)) && (arg1[6] == 4)) &&\n       ((arg1[8] + 0xe66cfae0U < 3 && (puVar1 = *(arg1 + 0xc),  puVar1 != NULL)))) {\n        if (*(puVar1 + 4) == 0) {\n            if (((*puVar1 & 0x10) != 0) && (**(arg1 + 10) != 0)) {\n                (**0x140029a28)();\n            }\n        }\n        else {\n            fcn.140020338(*(arg1 + 10), *(puVar1 + 4) + *(arg1 + 0xe));\n        }\n    }\n    return;\n}\n",
        "token_count": 206
    },
    "1400205a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nuchar (*) [16] fcn.1400205a0(uchar (*arg1) [16])\n\n{\n    uchar *puVar1;\n    int32_t iVar2;\n    uchar (*pauVar3) [16];\n    uint16_t in_DX;\n    uchar (*pauVar4) [16];\n    bool bVar5;\n    bool bVar6;\n    \n    pauVar3 = NULL;\n    pauVar4 = arg1;\n    if (1 < *0x140037f10) {\n        while( true ) {\n            if ((arg1 + 1U & 0xe) == 0) {\n                bVar5 = in_DX != 0;\n                bVar6 = in_DX == 0;\n                if (!bVar6) {\n                    while( true ) {\n                        iVar2 = pcmpistri(ZEXT216(in_DX), *arg1, 0x41);\n                        if (bVar5) {\n                            pauVar3 = *arg1 + iVar2 * 2;\n                        }\n                        if (bVar6) break;\n                        bVar5 = 0xffffffffffffffef < arg1;\n                        arg1 = arg1[1];\n                        bVar6 = arg1 == NULL;\n                    }\n                    return pauVar3;\n                }\n                while (iVar2 = pcmpistri(ZEXT416(0xffff0001), *arg1, 0x15),  !bVar6) {\n                    arg1 = arg1[1];\n                    bVar6 = arg1 == NULL;\n                }\n                return *arg1 + iVar2 * 2;\n            }\n            if (**arg1 == in_DX) {\n                pauVar3 = arg1;\n            }\n            if (**arg1 == 0) break;\n            arg1 = *arg1 + 2;\n        }\n        return pauVar3;\n    }\n    do {\n        puVar1 = *pauVar4;\n        pauVar4 = *pauVar4 + 2;\n    } while (*puVar1 != 0);\n    do {\n        pauVar4 = pauVar4[-1] + 0xe;\n        if (pauVar4 == arg1) break;\n    } while (**pauVar4 != in_DX);\n    if (**pauVar4 == in_DX) {\n        pauVar3 = pauVar4;\n    }\n    return pauVar3;\n}\n",
        "token_count": 505
    },
    "14002064": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.14002064c(int32_t *arg1, ulong arg2, ulong arg3, int64_t *arg4)\n\n{\n    uint32_t uVar1;\n    int64_t iVar2;\n    uint32_t *puVar3;\n    int32_t iVar4;\n    uint64_t uVar5;\n    uint64_t uVar6;\n    uint32_t uVar7;\n    uint32_t uVar8;\n    uint64_t uVar9;\n    uint64_t uVar10;\n    int32_t *piStack56;\n    ulong uStack48;\n    \n    fcn.140024734(arg3);\n    iVar2 = arg4[1];\n    puVar3 = arg4[7];\n    uVar10 = *arg4 - iVar2;\n    uVar7 = *(arg4 + 9);\n    piStack56 = arg1;\n    uStack48 = arg3;\n    if ((*(arg1 + 1) & 0x66) == 0) {\n        for (; uVar7 < *puVar3; uVar7 = uVar7 + 1) {\n            uVar6 = uVar7;\n            if (((puVar3[uVar6 * 4 + 1] <= uVar10) && (uVar10 < puVar3[uVar6 * 4 + 2])) && (puVar3[uVar6 * 4 + 4] != 0))\n            {\n                if (puVar3[uVar6 * 4 + 3] != 1) {\n                    iVar4 = (*(puVar3[uVar6 * 4 + 3] + iVar2))(&piStack56, arg2);\n                    if (iVar4 < 0) {\n                        return 0;\n                    }\n                    if (iVar4 < 1) goto code_r0x000140020766;\n                }\n                if (((*arg1 == -0x1f928c9d) && (*0x1400290f8 != NULL)) &&\n                   (iVar4 = fcn.140025d10(0x1400290f8),  iVar4 != 0)) {\n                    (**0x1400290f8)(arg1, 1);\n                }\n                fcn.140024700(puVar3[uVar6 * 4 + 4] + iVar2, arg2, 1);\n                (*_sym.imp.ntdll.dll_RtlUnwindEx)(arg2, puVar3[uVar6 * 4 + 4] + iVar2, arg1, *arg1, arg4[5], arg4[8]);\n                fcn.140024730();\n            }\ncode_r0x000140020766:\n        }\n    }\n    else {\n        uVar6 = arg4[4] - iVar2;\n        for (; uVar1 = *puVar3,  uVar7 < uVar1; uVar7 = uVar7 + 1) {\n            uVar5 = uVar7;\n            if ((puVar3[uVar5 * 4 + 1] <= uVar10) && (uVar10 < puVar3[uVar5 * 4 + 2])) {\n                if ((arg1[1] & 0x20U) != 0) {\n                    uVar9 = 0;\n                    if (uVar1 != 0) {\n                        do {\n                            if ((((puVar3[uVar9 * 4 + 1] <= uVar6) && (uVar6 < puVar3[uVar9 * 4 + 2])) &&\n                                (puVar3[uVar9 * 4 + 4] == puVar3[uVar5 * 4 + 4])) &&\n                               (puVar3[uVar9 * 4 + 3] == puVar3[uVar5 * 4 + 3])) break;\n                            uVar8 = uVar9 + 1;\n                            uVar9 = uVar8;\n                        } while (uVar8 < uVar1);\n                    }\n                    if (uVar9 != uVar1) {\n                        return 1;\n                    }\n                }\n                if (puVar3[uVar5 * 4 + 4] == 0) {\n                    *(arg4 + 9) = uVar7 + 1;\n                    (*(puVar3[uVar5 * 4 + 3] + iVar2))();\n                }\n                else if ((uVar6 == puVar3[uVar5 * 4 + 4]) && ((arg1[1] & 0x20U) != 0)) {\n                    return 1;\n                }\n            }\n        }\n    }\n    return 1;\n}\n",
        "token_count": 1000
    },
    "140020a4": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nuchar (*) [32] fcn.140020a40(uchar (*arg1) [32], uchar (*arg2) [32], uint64_t arg3)\n\n{\n    uint *puVar1;\n    uchar uVar2;\n    ushort uVar3;\n    uint uVar4;\n    uint uVar5;\n    uint uVar6;\n    uint uVar7;\n    uint uVar8;\n    uint uVar9;\n    uint uVar10;\n    uint uVar11;\n    uint uVar12;\n    uint uVar13;\n    uint uVar14;\n    uchar (*pauVar15) [32];\n    uchar (*pauVar16) [32];\n    uchar (*pauVar17) [32];\n    uint *puVar18;\n    uint *puVar19;\n    uchar (*pauVar20) [32];\n    uint *puVar21;\n    uint64_t uVar22;\n    int64_t iVar23;\n    uint64_t uVar24;\n    uint uVar25;\n    uint uVar27;\n    uint uVar28;\n    uint uVar29;\n    uchar auVar26 [32];\n    uchar auVar30 [32];\n    uchar auVar31 [32];\n    uchar auVar32 [32];\n    uchar auVar33 [32];\n    uchar auVar34 [32];\n    \n    pauVar15 = arg1;\n    if (arg3 < 0x10) {\n    // switch table (16 cases) at 0x1400360f0\n        switch(*(arg3 * 4 + 0x1400360f0) + 0x140000000) {\n        case 0x140020a6e:\n            return pauVar15;\n        case 0x140020a70:\n            uVar4 = *(*arg2 + 8);\n            uVar3 = *(*arg2 + 0xc);\n            uVar2 = (*arg2)[0xe];\n            **arg1 = **arg2;\n            *(*arg1 + 8) = uVar4;\n            *(*arg1 + 0xc) = uVar3;\n            (*arg1)[0xe] = uVar2;\n            return pauVar15;\n        case 0x140020a90:\n            uVar3 = *(*arg2 + 8);\n            uVar2 = (*arg2)[10];\n            **arg1 = **arg2;\n            *(*arg1 + 8) = uVar3;\n            (*arg1)[10] = uVar2;\n            return pauVar15;\n        case 0x140020aa8:\n            **arg1 = **arg2;\n            return pauVar15;\n        case 0x140020ab0:\n            uVar3 = *(*arg2 + 4);\n            uVar2 = (*arg2)[6];\n            **arg1 = **arg2;\n            *(*arg1 + 4) = uVar3;\n            (*arg1)[6] = uVar2;\n            return pauVar15;\n        case 0x140020ac8:\n            uVar4 = *(*arg2 + 8);\n            uVar3 = *(*arg2 + 0xc);\n            **arg1 = **arg2;\n            *(*arg1 + 8) = uVar4;\n            *(*arg1 + 0xc) = uVar3;\n            return pauVar15;\n        case 0x140020adf:\n            uVar2 = (*arg2)[2];\n            **arg1 = **arg2;\n            (*arg1)[2] = uVar2;\n            return pauVar15;\n        case 0x140020af0:\n            uVar4 = *(*arg2 + 8);\n            uVar2 = (*arg2)[0xc];\n            **arg1 = **arg2;\n            *(*arg1 + 8) = uVar4;\n            (*arg1)[0xc] = uVar2;\n            return pauVar15;\n        case 0x140020b06:\n            uVar3 = *(*arg2 + 8);\n            **arg1 = **arg2;\n            *(*arg1 + 8) = uVar3;\n            return pauVar15;\n        case 0x140020b15:\n            uVar2 = (*arg2)[8];\n            **arg1 = **arg2;\n            (*arg1)[8] = uVar2;\n            return pauVar15;\n        case 0x140020b23:\n            uVar4 = *(*arg2 + 8);\n            **arg1 = **arg2;\n            *(*arg1 + 8) = uVar4;\n            return pauVar15;\n        case 0x140020b30:\n            uVar3 = *(*arg2 + 4);\n            **arg1 = **arg2;\n            *(*arg1 + 4) = uVar3;\n            return pauVar15;\n        case 0x140020b3f:\n            uVar2 = (*arg2)[4];\n            **arg1 = **arg2;\n            (*arg1)[4] = uVar2;\n            return pauVar15;\n        case 0x140020b4d:\n            **arg1 = **arg2;\n            return pauVar15;\n        case 0x140020b54:\n            (*arg1)[0] = (*arg2)[0];\n            return pauVar15;\n        case 0x140020b5a:\n            **arg1 = **arg2;\n            return pauVar15;\n        }\n    }\n    if (arg3 < 0x21) {\n        uVar4 = *(*arg2 + 4);\n        uVar5 = *(*arg2 + 8);\n        uVar6 = *(*arg2 + 0xc);\n        puVar18 = arg2[-1] + arg3 + 0x10;\n        uVar25 = *puVar18;\n        uVar27 = puVar18[1];\n        uVar28 = puVar18[2];\n        uVar29 = puVar18[3];\n        **arg1 = **arg2;\n        *(*arg1 + 4) = uVar4;\n        *(*arg1 + 8) = uVar5;\n        *(*arg1 + 0xc) = uVar6;\n        puVar18 = arg1[-1] + arg3 + 0x10;\n        *puVar18 = uVar25;\n        puVar18[1] = uVar27;\n        puVar18[2] = uVar28;\n        puVar18[3] = uVar29;\n        return pauVar15;\n    }\n    if ((arg2 < arg1) && (arg1 < *arg2 + arg3)) {\n        iVar23 = arg2 - arg1;\n        puVar18 = arg1 + iVar23 + (arg3 - 0x10);\n        uVar4 = puVar18[1];\n        uVar5 = puVar18[2];\n        uVar6 = puVar18[3];\n        puVar19 = arg1[-1] + arg3 + 0x10;\n        uVar22 = arg3 - 0x10;\n        puVar21 = puVar19;\n        uVar25 = *puVar18;\n        uVar27 = uVar4;\n        uVar28 = uVar5;\n        uVar29 = uVar6;\n        if ((puVar19 & 0xf) != 0) {\n            puVar21 = puVar19 & 0xfffffffffffffff0;\n            puVar1 = puVar21 + iVar23;\n            uVar25 = *puVar1;\n            uVar27 = puVar1[1];\n            uVar28 = puVar1[2];\n            uVar29 = puVar1[3];\n            *puVar19 = *puVar18;\n            *(arg1[-1] + arg3 + 0x14) = uVar4;\n            *(arg1[-1] + arg3 + 0x18) = uVar5;\n            *(arg1[-1] + arg3 + 0x1c) = uVar6;\n            uVar22 = puVar21 - arg1;\n        }\n        uVar24 = uVar22 >> 7;\n        if (uVar24 != 0) {\n            *puVar21 = uVar25;\n            puVar21[1] = uVar27;\n            puVar21[2] = uVar28;\n            puVar21[3] = uVar29;\n            puVar18 = puVar21;\n            while( true ) {\n                puVar19 = puVar18 + iVar23 + -0x10;\n                uVar4 = puVar19[1];\n                uVar5 = puVar19[2];\n                uVar6 = puVar19[3];\n                puVar21 = puVar18 + iVar23 + -0x20;\n                uVar25 = *puVar21;\n                uVar27 = puVar21[1];\n                uVar28 = puVar21[2];\n                uVar29 = puVar21[3];\n                puVar21 = puVar18 + -0x20;\n                puVar18[-4] = *puVar19;\n                puVar18[-3] = uVar4;\n                puVar18[-2] = uVar5;\n                puVar18[-1] = uVar6;\n                puVar18[-8] = uVar25;\n                puVar18[-7] = uVar27;\n                puVar18[-6] = uVar28;\n                puVar18[-5] = uVar29;\n                puVar19 = puVar18 + iVar23 + -0x30;\n                uVar4 = puVar19[1];\n                uVar5 = puVar19[2];\n                uVar6 = puVar19[3];\n                puVar1 = puVar18 + iVar23 + -0x40;\n                uVar25 = *puVar1;\n                uVar27 = puVar1[1];\n                uVar28 = puVar1[2];\n                uVar29 = puVar1[3];\n                uVar24 = uVar24 - 1;\n                puVar18[-0xc] = *puVar19;\n                puVar18[-0xb] = uVar4;\n                puVar18[-10] = uVar5;\n                puVar18[-9] = uVar6;\n                puVar18[-0x10] = uVar25;\n                puVar18[-0xf] = uVar27;\n                puVar18[-0xe] = uVar28;\n                puVar18[-0xd] = uVar29;\n                puVar19 = puVar18 + iVar23 + -0x50;\n                uVar4 = puVar19[1];\n                uVar5 = puVar19[2];\n                uVar6 = puVar19[3];\n                puVar1 = puVar18 + iVar23 + -0x60;\n                uVar25 = *puVar1;\n                uVar27 = puVar1[1];\n                uVar28 = puVar1[2];\n                uVar29 = puVar1[3];\n                puVar18[-0x14] = *puVar19;\n                puVar18[-0x13] = uVar4;\n                puVar18[-0x12] = uVar5;\n                puVar18[-0x11] = uVar6;\n                puVar18[-0x18] = uVar25;\n                puVar18[-0x17] = uVar27;\n                puVar18[-0x16] = uVar28;\n                puVar18[-0x15] = uVar29;\n                puVar1 = puVar18 + iVar23 + -0x70;\n                uVar4 = puVar1[1];\n                uVar5 = puVar1[2];\n                uVar6 = puVar1[3];\n                puVar19 = puVar21 + iVar23;\n                uVar25 = *puVar19;\n                uVar27 = puVar19[1];\n                uVar28 = puVar19[2];\n                uVar29 = puVar19[3];\n                if (uVar24 == 0) break;\n                puVar18[-0x1c] = *puVar1;\n                puVar18[-0x1b] = uVar4;\n                puVar18[-0x1a] = uVar5;\n                puVar18[-0x19] = uVar6;\n                *puVar21 = uVar25;\n                puVar18[-0x1f] = uVar27;\n                puVar18[-0x1e] = uVar28;\n                puVar18[-0x1d] = uVar29;\n                puVar18 = puVar21;\n            }\n            puVar18[-0x1c] = *puVar1;\n            puVar18[-0x1b] = uVar4;\n            puVar18[-0x1a] = uVar5;\n            puVar18[-0x19] = uVar6;\n            uVar22 = uVar22 & 0x7f;\n        }\n        for (uVar24 = uVar22 >> 4; uVar24 != 0; uVar24 = uVar24 - 1) {\n            *puVar21 = uVar25;\n            puVar21[1] = uVar27;\n            puVar21[2] = uVar28;\n            puVar21[3] = uVar29;\n            puVar21 = puVar21 + -4;\n            puVar18 = puVar21 + iVar23;\n            uVar25 = *puVar18;\n            uVar27 = puVar18[1];\n            uVar28 = puVar18[2];\n            uVar29 = puVar18[3];\n        }\n        if ((uVar22 & 0xf) != 0) {\n            uVar4 = *(*arg2 + 4);\n            uVar5 = *(*arg2 + 8);\n            uVar6 = *(*arg2 + 0xc);\n            **arg1 = **arg2;\n            *(*arg1 + 4) = uVar4;\n            *(*arg1 + 8) = uVar5;\n            *(*arg1 + 0xc) = uVar6;\n        }\n        *puVar21 = uVar25;\n        puVar21[1] = uVar27;\n        puVar21[2] = uVar28;\n        puVar21[3] = uVar29;\n        return arg1;\n    }\n    if (*0x140037f10 < 3) {\n        if ((arg3 < 0x801) || ((*0x140038e10 & 2) == 0)) {\n            if (0x80 < arg3) {\n                iVar23 = (arg1 & 0xf) - 0x10;\n                puVar18 = arg1 - iVar23;\n                puVar21 = arg2 - iVar23;\n                arg3 = arg3 + iVar23;\n                if (0x80 < arg3) {\n                    do {\n                        uVar4 = puVar21[1];\n                        uVar5 = puVar21[2];\n                        uVar6 = puVar21[3];\n                        uVar25 = puVar21[4];\n                        uVar27 = puVar21[5];\n                        uVar28 = puVar21[6];\n                        uVar29 = puVar21[7];\n                        uVar7 = puVar21[8];\n                        uVar8 = puVar21[9];\n                        uVar9 = puVar21[10];\n                        uVar10 = puVar21[0xb];\n                        uVar11 = puVar21[0xc];\n                        uVar12 = puVar21[0xd];\n                        uVar13 = puVar21[0xe];\n                        uVar14 = puVar21[0xf];\n                        *puVar18 = *puVar21;\n                        puVar18[1] = uVar4;\n                        puVar18[2] = uVar5;\n                        puVar18[3] = uVar6;\n                        puVar18[4] = uVar25;\n                        puVar18[5] = uVar27;\n                        puVar18[6] = uVar28;\n                        puVar18[7] = uVar29;\n                        puVar18[8] = uVar7;\n                        puVar18[9] = uVar8;\n                        puVar18[10] = uVar9;\n                        puVar18[0xb] = uVar10;\n                        puVar18[0xc] = uVar11;\n                        puVar18[0xd] = uVar12;\n                        puVar18[0xe] = uVar13;\n                        puVar18[0xf] = uVar14;\n                        uVar4 = puVar21[0x11];\n                        uVar5 = puVar21[0x12];\n                        uVar6 = puVar21[0x13];\n                        uVar25 = puVar21[0x14];\n                        uVar27 = puVar21[0x15];\n                        uVar28 = puVar21[0x16];\n                        uVar29 = puVar21[0x17];\n                        uVar7 = puVar21[0x18];\n                        uVar8 = puVar21[0x19];\n                        uVar9 = puVar21[0x1a];\n                        uVar10 = puVar21[0x1b];\n                        uVar11 = puVar21[0x1c];\n                        uVar12 = puVar21[0x1d];\n                        uVar13 = puVar21[0x1e];\n                        uVar14 = puVar21[0x1f];\n                        puVar18[0x10] = puVar21[0x10];\n                        puVar18[0x11] = uVar4;\n                        puVar18[0x12] = uVar5;\n                        puVar18[0x13] = uVar6;\n                        puVar18[0x14] = uVar25;\n                        puVar18[0x15] = uVar27;\n                        puVar18[0x16] = uVar28;\n                        puVar18[0x17] = uVar29;\n                        puVar18[0x18] = uVar7;\n                        puVar18[0x19] = uVar8;\n                        puVar18[0x1a] = uVar9;\n                        puVar18[0x1b] = uVar10;\n                        puVar18[0x1c] = uVar11;\n                        puVar18[0x1d] = uVar12;\n                        puVar18[0x1e] = uVar13;\n                        puVar18[0x1f] = uVar14;\n                        puVar18 = puVar18 + 0x20;\n                        puVar21 = puVar21 + 0x20;\n                        arg3 = arg3 - 0x80;\n                    } while (0x7f < arg3);\n                }\n            }\n    // WARNING: Could not recover jumptable at 0x000140020f56. Too many branches\n    // WARNING: Treating indirect jump as call\n    // switch table (10 cases) at 0x140036178\n            pauVar15 = (*(*((arg3 + 0xf >> 4) * 4 + 0x140036178) + 0x140000000))();\n            return pauVar15;\n        }\n    }\n    else if (((arg3 < 0x2001) || (0x180000 < arg3)) || ((*0x140038e10 & 2) == 0)) {\n        auVar26 = vmovdqu_avx(*arg2);\n        auVar34 = vmovdqu_avx(*(arg2[-1] + arg3));\n        if (0x100 < arg3) {\n            iVar23 = (arg1 & 0x1f) - 0x20;\n            pauVar16 = arg1 - iVar23;\n            arg2 = arg2 - iVar23;\n            arg3 = arg3 + iVar23;\n            if (0x100 < arg3) {\n                if (0x180000 < arg3) {\n                    do {\n                        uVar22 = arg3;\n                        pauVar20 = arg2;\n                        pauVar17 = pauVar16;\n                        auVar30 = vmovdqu_avx(*pauVar20);\n                        auVar31 = vmovdqu_avx(pauVar20[1]);\n                        auVar32 = vmovdqu_avx(pauVar20[2]);\n                        auVar33 = vmovdqu_avx(pauVar20[3]);\n                        auVar30 = vmovntdq_avx(auVar30);\n                        *pauVar17 = auVar30;\n                        auVar30 = vmovntdq_avx(auVar31);\n                        pauVar17[1] = auVar30;\n                        auVar30 = vmovntdq_avx(auVar32);\n                        pauVar17[2] = auVar30;\n                        auVar30 = vmovntdq_avx(auVar33);\n                        pauVar17[3] = auVar30;\n                        auVar30 = vmovdqu_avx(pauVar20[4]);\n                        auVar31 = vmovdqu_avx(pauVar20[5]);\n                        auVar32 = vmovdqu_avx(pauVar20[6]);\n                        auVar33 = vmovdqu_avx(pauVar20[7]);\n                        auVar30 = vmovntdq_avx(auVar30);\n                        pauVar17[4] = auVar30;\n                        auVar30 = vmovntdq_avx(auVar31);\n                        pauVar17[5] = auVar30;\n                        auVar30 = vmovntdq_avx(auVar32);\n                        pauVar17[6] = auVar30;\n                        auVar30 = vmovntdq_avx(auVar33);\n                        pauVar17[7] = auVar30;\n                        pauVar16 = pauVar17[8];\n                        arg2 = pauVar20[8];\n                        arg3 = uVar22 - 0x100;\n                    } while (0xff < uVar22 - 0x100);\n                    uVar24 = uVar22 - 0xe1 & 0xffffffffffffffe0;\n    // switch table (19 cases) at 0x140036154\n                    switch(uVar22) {\n                    case 0x1e1:\n                    case 0x1e2:\n                    case 0x1e3:\n                    case 0x1e4:\n                    case 0x1e5:\n                    case 0x1e6:\n                    case 0x1e7:\n                    case 0x1e8:\n                    case 0x1e9:\n                    case 0x1ea:\n                    case 0x1eb:\n                    case 0x1ec:\n                    case 0x1ed:\n                    case 0x1ee:\n                    case 0x1ef:\n                    case 0x1f0:\n                    case 0x1f1:\n                    case 0x1f2:\n                    case 499:\n                    case 500:\n                    case 0x1f5:\n                    case 0x1f6:\n                    case 0x1f7:\n                    case 0x1f8:\n                    case 0x1f9:\n                    case 0x1fa:\n                    case 0x1fb:\n                    case 0x1fc:\n                    case 0x1fd:\n                    case 0x1fe:\n                    case 0x1ff:\n                        auVar30 = vmovdqu_avx(*(*pauVar20 + uVar24));\n                        auVar30 = vmovntdq_avx(auVar30);\n                        *(*pauVar17 + uVar24) = auVar30;\n                    case 0x1c1:\n                    case 0x1c2:\n                    case 0x1c3:\n                    case 0x1c4:\n                    case 0x1c5:\n                    case 0x1c6:\n                    case 0x1c7:\n                    case 0x1c8:\n                    case 0x1c9:\n                    case 0x1ca:\n                    case 0x1cb:\n                    case 0x1cc:\n                    case 0x1cd:\n                    case 0x1ce:\n                    case 0x1cf:\n                    case 0x1d0:\n                    case 0x1d1:\n                    case 0x1d2:\n                    case 0x1d3:\n                    case 0x1d4:\n                    case 0x1d5:\n                    case 0x1d6:\n                    case 0x1d7:\n                    case 0x1d8:\n                    case 0x1d9:\n                    case 0x1da:\n                    case 0x1db:\n                    case 0x1dc:\n                    case 0x1dd:\n                    case 0x1de:\n                    case 0x1df:\n                    case 0x1e0:\n                        auVar30 = vmovdqu_avx(*(pauVar20[1] + uVar24));\n                        auVar30 = vmovntdq_avx(auVar30);\n                        *(pauVar17[1] + uVar24) = auVar30;\n                    case 0x1a1:\n                    case 0x1a2:\n                    case 0x1a3:\n                    case 0x1a4:\n                    case 0x1a5:\n                    case 0x1a6:\n                    case 0x1a7:\n                    case 0x1a8:\n                    case 0x1a9:\n                    case 0x1aa:\n                    case 0x1ab:\n                    case 0x1ac:\n                    case 0x1ad:\n                    case 0x1ae:\n                    case 0x1af:\n                    case 0x1b0:\n                    case 0x1b1:\n                    case 0x1b2:\n                    case 0x1b3:\n                    case 0x1b4:\n                    case 0x1b5:\n                    case 0x1b6:\n                    case 0x1b7:\n                    case 0x1b8:\n                    case 0x1b9:\n                    case 0x1ba:\n                    case 0x1bb:\n                    case 0x1bc:\n                    case 0x1bd:\n                    case 0x1be:\n                    case 0x1bf:\n                    case 0x1c0:\n                        auVar30 = vmovdqu_avx(*(pauVar20[2] + uVar24));\n                        auVar30 = vmovntdq_avx(auVar30);\n                        *(pauVar17[2] + uVar24) = auVar30;\n                    case 0x181:\n                    case 0x182:\n                    case 0x183:\n                    case 0x184:\n                    case 0x185:\n                    case 0x186:\n                    case 0x187:\n                    case 0x188:\n                    case 0x189:\n                    case 0x18a:\n                    case 0x18b:\n                    case 0x18c:\n                    case 0x18d:\n                    case 0x18e:\n                    case 399:\n                    case 400:\n                    case 0x191:\n                    case 0x192:\n                    case 0x193:\n                    case 0x194:\n                    case 0x195:\n                    case 0x196:\n                    case 0x197:\n                    case 0x198:\n                    case 0x199:\n                    case 0x19a:\n                    case 0x19b:\n                    case 0x19c:\n                    case 0x19d:\n                    case 0x19e:\n                    case 0x19f:\n                    case 0x1a0:\n                        auVar30 = vmovdqu_avx(*(pauVar20[3] + uVar24));\n                        auVar30 = vmovntdq_avx(auVar30);\n                        *(pauVar17[3] + uVar24) = auVar30;\n                    case 0x161:\n                    case 0x162:\n                    case 0x163:\n                    case 0x164:\n                    case 0x165:\n                    case 0x166:\n                    case 0x167:\n                    case 0x168:\n                    case 0x169:\n                    case 0x16a:\n                    case 0x16b:\n                    case 0x16c:\n                    case 0x16d:\n                    case 0x16e:\n                    case 0x16f:\n                    case 0x170:\n                    case 0x171:\n                    case 0x172:\n                    case 0x173:\n                    case 0x174:\n                    case 0x175:\n                    case 0x176:\n                    case 0x177:\n                    case 0x178:\n                    case 0x179:\n                    case 0x17a:\n                    case 0x17b:\n                    case 0x17c:\n                    case 0x17d:\n                    case 0x17e:\n                    case 0x17f:\n                    case 0x180:\n                        auVar30 = vmovdqu_avx(*(pauVar20[4] + uVar24));\n                        auVar30 = vmovntdq_avx(auVar30);\n                        *(pauVar17[4] + uVar24) = auVar30;\n                    case 0x141:\n                    case 0x142:\n                    case 0x143:\n                    case 0x144:\n                    case 0x145:\n                    case 0x146:\n                    case 0x147:\n                    case 0x148:\n                    case 0x149:\n                    case 0x14a:\n                    case 0x14b:\n                    case 0x14c:\n                    case 0x14d:\n                    case 0x14e:\n                    case 0x14f:\n                    case 0x150:\n                    case 0x151:\n                    case 0x152:\n                    case 0x153:\n                    case 0x154:\n                    case 0x155:\n                    case 0x156:\n                    case 0x157:\n                    case 0x158:\n                    case 0x159:\n                    case 0x15a:\n                    case 0x15b:\n                    case 0x15c:\n                    case 0x15d:\n                    case 0x15e:\n                    case 0x15f:\n                    case 0x160:\n                        auVar30 = vmovdqu_avx(*(pauVar20[5] + uVar24));\n                        auVar30 = vmovntdq_avx(auVar30);\n                        *(pauVar17[5] + uVar24) = auVar30;\n                    case 0x121:\n                    case 0x122:\n                    case 0x123:\n                    case 0x124:\n                    case 0x125:\n                    case 0x126:\n                    case 0x127:\n                    case 0x128:\n                    case 0x129:\n                    case 0x12a:\n                    case 299:\n                    case 300:\n                    case 0x12d:\n                    case 0x12e:\n                    case 0x12f:\n                    case 0x130:\n                    case 0x131:\n                    case 0x132:\n                    case 0x133:\n                    case 0x134:\n                    case 0x135:\n                    case 0x136:\n                    case 0x137:\n                    case 0x138:\n                    case 0x139:\n                    case 0x13a:\n                    case 0x13b:\n                    case 0x13c:\n                    case 0x13d:\n                    case 0x13e:\n                    case 0x13f:\n                    case 0x140:\n                        auVar30 = vmovdqu_avx(*(pauVar20[6] + uVar24));\n                        auVar30 = vmovntdq_avx(auVar30);\n                        *(pauVar17[6] + uVar24) = auVar30;\n                    default:\n                        auVar34 = vmovdqu_avx(auVar34);\n                        *(pauVar17[-1] + uVar22) = auVar34;\n                    case 0x100:\n                        auVar26 = vmovdqu_avx(auVar26);\n                        *arg1 = auVar26;\n                        vzeroupper_avx();\n                        return pauVar15;\n                    }\n                }\n                do {\n                    auVar34 = vmovdqu_avx(*arg2);\n                    auVar30 = vmovdqu_avx(arg2[1]);\n                    auVar31 = vmovdqu_avx(arg2[2]);\n                    auVar32 = vmovdqu_avx(arg2[3]);\n                    *pauVar16 = auVar34;\n                    pauVar16[1] = auVar30;\n                    pauVar16[2] = auVar31;\n                    pauVar16[3] = auVar32;\n                    auVar34 = vmovdqu_avx(arg2[4]);\n                    auVar30 = vmovdqu_avx(arg2[5]);\n                    auVar31 = vmovdqu_avx(arg2[6]);\n                    auVar32 = vmovdqu_avx(arg2[7]);\n                    pauVar16[4] = auVar34;\n                    pauVar16[5] = auVar30;\n                    pauVar16[6] = auVar31;\n                    pauVar16[7] = auVar32;\n                    pauVar16 = pauVar16[8];\n                    arg2 = arg2[8];\n                    arg3 = arg3 - 0x100;\n                } while (0xff < arg3);\n            }\n        }\n    // WARNING: Could not recover jumptable at 0x000140020cb2. Too many branches\n    // WARNING: Treating indirect jump as call\n    // switch table (28 cases) at 0x140036130\n        pauVar15 = (*(*((arg3 + 0x1f >> 5) * 4 + 0x140036130) + 0x140000000))(SUB328(auVar26, 0));\n        return pauVar15;\n    }\n    for (; arg3 != 0; arg3 = arg3 - 1) {\n        (*arg1)[0] = (*arg2)[0];\n        arg2 = *arg2 + 1;\n        arg1 = *arg1 + 1;\n    }\n    return pauVar15;\n}\n",
        "token_count": 7526
    },
    "1400211e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nuchar (*) [16] fcn.1400211e8(uchar (*arg1) [16], ulong arg2)\n\n{\n    uint16_t uVar1;\n    uint32_t uVar2;\n    uchar (*pauVar3) [16];\n    int32_t iVar4;\n    char *pcVar5;\n    char *pcVar6;\n    uint32_t uVar7;\n    bool bVar8;\n    bool bVar9;\n    char cVar10;\n    char cVar12;\n    char cVar13;\n    char cVar14;\n    uchar auVar11 [16];\n    uchar in_XMM1 [16];\n    uchar auVar16 [16];\n    uint8_t uVar15;\n    \n    pauVar3 = NULL;\n    if (arg2 == 0) {\n        pcVar5 = arg1 & 0xfffffffffffffff0;\n        auVar11 = ZEXT416(CONCAT13(-(pcVar5[3] == '\\0'), \n                                   CONCAT12(-(pcVar5[2] == '\\0'), CONCAT11(-(pcVar5[1] == '\\0'), -(*pcVar5 == '\\0')))))\n                  & 0xffffffffffffffff;\n        uVar15 = -(SUB161(auVar11 >> 0x78, 0) == pcVar5[0xf]);\n        auVar11 = CONCAT115(uVar15, CONCAT114(-(SUB161(auVar11 >> 0x70, 0) == pcVar5[0xe]), \n                                              CONCAT113(-(SUB161(auVar11 >> 0x68, 0) == pcVar5[0xd]), \n                                                        CONCAT112(-(SUB161(auVar11 >> 0x60, 0) == pcVar5[0xc]), \n                                                                  CONCAT111(-(SUB161(auVar11 >> 0x58, 0) == pcVar5[0xb])\n                                                                            , CONCAT110(-(SUB161(auVar11 >> 0x50, 0) ==\n                                                                                         pcVar5[10]), \n                                                                                        CONCAT19(-(SUB161(auVar11 >>\n                                                                                                          0x48, 0) ==\n                                                                                                  pcVar5[9]), \n                                                                                                 CONCAT18(-(SUB161(\n                                                            auVar11 >> 0x40, 0) == pcVar5[8]), \n                                                            CONCAT17(-(pcVar5[7] == '\\0'), \n                                                                     CONCAT16(-(pcVar5[6] == '\\0'), \n                                                                              CONCAT15(-(pcVar5[5] == '\\0'), \n                                                                                       CONCAT14(-(pcVar5[4] == '\\0'), \n                                                                                                SUB164(auVar11, 0)))))))\n                                                            ))))));\n        uVar2 = (SUB161(auVar11 >> 7, 0) & 1 | (SUB161(auVar11 >> 0xf, 0) & 1) << 1 |\n                 (SUB161(auVar11 >> 0x17, 0) & 1) << 2 | (SUB161(auVar11 >> 0x1f, 0) & 1) << 3 |\n                 (SUB161(auVar11 >> 0x27, 0) & 1) << 4 | (SUB161(auVar11 >> 0x2f, 0) & 1) << 5 |\n                 (SUB161(auVar11 >> 0x37, 0) & 1) << 6 | (SUB161(auVar11 >> 0x3f, 0) & 1) << 7 |\n                 (SUB161(auVar11 >> 0x47, 0) & 1) << 8 | (SUB161(auVar11 >> 0x4f, 0) & 1) << 9 |\n                 (SUB161(auVar11 >> 0x57, 0) & 1) << 10 | (SUB161(auVar11 >> 0x5f, 0) & 1) << 0xb |\n                 (SUB161(auVar11 >> 0x67, 0) & 1) << 0xc | (SUB161(auVar11 >> 0x6f, 0) & 1) << 0xd |\n                 (SUB161(auVar11 >> 0x77, 0) & 1) << 0xe | (uVar15 >> 7) << 0xf) & -1 << (arg1 & 0xf);\n        pcVar6 = pcVar5;\n        if (uVar2 == 0) {\n            do {\n                pcVar5 = pcVar6 + 0x10;\n                auVar11 = ZEXT416(CONCAT13(-(pcVar6[0x13] == '\\0'), \n                                           CONCAT12(-(pcVar6[0x12] == '\\0'), \n                                                    CONCAT11(-(pcVar6[0x11] == '\\0'), -(*pcVar5 == '\\0'))))) &\n                          0xffffffffffffffff;\n                uVar15 = -(SUB161(auVar11 >> 0x78, 0) == pcVar6[0x1f]);\n                auVar11 = CONCAT115(uVar15, CONCAT114(-(SUB161(auVar11 >> 0x70, 0) == pcVar6[0x1e]), \n                                                      CONCAT113(-(SUB161(auVar11 >> 0x68, 0) == pcVar6[0x1d]), \n                                                                CONCAT112(-(SUB161(auVar11 >> 0x60, 0) == pcVar6[0x1c])\n                                                                          , CONCAT111(-(SUB161(auVar11 >> 0x58, 0) ==\n                                                                                       pcVar6[0x1b]), \n                                                                                      CONCAT110(-(SUB161(auVar11 >> 0x50\n                                                                                                         , 0) ==\n                                                                                                 pcVar6[0x1a]), \n                                                                                                CONCAT19(-(SUB161(\n                                                            auVar11 >> 0x48, 0) == pcVar6[0x19]), \n                                                            CONCAT18(-(SUB161(auVar11 >> 0x40, 0) == pcVar6[0x18]), \n                                                                     CONCAT17(-(pcVar6[0x17] == '\\0'), \n                                                                              CONCAT16(-(pcVar6[0x16] == '\\0'), \n                                                                                       CONCAT15(-(pcVar6[0x15] == '\\0')\n                                                                                                , CONCAT14(-(pcVar6[0x14\n                                                            ] == '\\0'), SUB164(auVar11, 0)))))))))))));\n                uVar1 = SUB161(auVar11 >> 7, 0) & 1 | (SUB161(auVar11 >> 0xf, 0) & 1) << 1 |\n                        (SUB161(auVar11 >> 0x17, 0) & 1) << 2 | (SUB161(auVar11 >> 0x1f, 0) & 1) << 3 |\n                        (SUB161(auVar11 >> 0x27, 0) & 1) << 4 | (SUB161(auVar11 >> 0x2f, 0) & 1) << 5 |\n                        (SUB161(auVar11 >> 0x37, 0) & 1) << 6 | (SUB161(auVar11 >> 0x3f, 0) & 1) << 7 |\n                        (SUB161(auVar11 >> 0x47, 0) & 1) << 8 | (SUB161(auVar11 >> 0x4f, 0) & 1) << 9 |\n                        (SUB161(auVar11 >> 0x57, 0) & 1) << 10 | (SUB161(auVar11 >> 0x5f, 0) & 1) << 0xb |\n                        (SUB161(auVar11 >> 0x67, 0) & 1) << 0xc | (SUB161(auVar11 >> 0x6f, 0) & 1) << 0xd |\n                        (SUB161(auVar11 >> 0x77, 0) & 1) << 0xe | (uVar15 >> 7) << 0xf;\n                uVar2 = uVar1;\n                pcVar6 = pcVar5;\n            } while (uVar1 == 0);\n        }\n        uVar7 = 0;\n        if (uVar2 != 0) {\n            for (; (uVar2 >> uVar7 & 1) == 0; uVar7 = uVar7 + 1) {\n            }\n        }\n        pauVar3 = pcVar5 + uVar7;\n    }\n    else if (*0x140037f10 < 2) {\n        pcVar5 = arg1 & 0xfffffffffffffff0;\n        uVar15 = arg1 & 0xf;\n        auVar16 = pshuflw(in_XMM1, ZEXT416((arg2 & 0xff) << 8 | arg2 & 0xff), 0);\n        auVar11 = CONCAT115(-(pcVar5[0xf] == '\\0'), \n                            CONCAT114(-(pcVar5[0xe] == '\\0'), \n                                      CONCAT113(-(pcVar5[0xd] == '\\0'), \n                                                CONCAT112(-(pcVar5[0xc] == '\\0'), \n                                                          CONCAT111(-(pcVar5[0xb] == '\\0'), \n                                                                    CONCAT110(-(pcVar5[10] == '\\0'), \n                                                                              CONCAT19(-(pcVar5[9] == '\\0'), \n                                                                                       CONCAT18(-(pcVar5[8] == '\\0'), \n                                                                                                CONCAT17(-(pcVar5[7] ==\n                                                                                                          '\\0'), \n                                                            CONCAT16(-(pcVar5[6] == '\\0'), \n                                                                     CONCAT15(-(pcVar5[5] == '\\0'), \n                                                                              CONCAT14(-(pcVar5[4] == '\\0'), \n                                                                                       CONCAT13(-(pcVar5[3] == '\\0'), \n                                                                                                CONCAT12(-(pcVar5[2] ==\n                                                                                                          '\\0'), \n                                                            CONCAT11(-(pcVar5[1] == '\\0'), -(*pcVar5 == '\\0'))))))))))))\n                                                         ))));\n        cVar10 = SUB161(auVar16, 0);\n        cVar12 = SUB161(auVar16 >> 8, 0);\n        cVar13 = SUB161(auVar16 >> 0x10, 0);\n        cVar14 = SUB161(auVar16 >> 0x18, 0);\n        auVar16 = CONCAT115(-(cVar14 == pcVar5[0xf]), \n                            CONCAT114(-(cVar13 == pcVar5[0xe]), \n                                      CONCAT113(-(cVar12 == pcVar5[0xd]), \n                                                CONCAT112(-(cVar10 == pcVar5[0xc]), \n                                                          CONCAT111(-(cVar14 == pcVar5[0xb]), \n                                                                    CONCAT110(-(cVar13 == pcVar5[10]), \n                                                                              CONCAT19(-(cVar12 == pcVar5[9]), \n                                                                                       CONCAT18(-(cVar10 == pcVar5[8]), \n                                                                                                CONCAT17(-(cVar14 ==\n                                                                                                          pcVar5[7]), \n                                                                                                         CONCAT16(-(\n                                                            cVar13 == pcVar5[6]), \n                                                            CONCAT15(-(cVar12 == pcVar5[5]), \n                                                                     CONCAT14(-(cVar10 == pcVar5[4]), \n                                                                              CONCAT13(-(cVar14 == pcVar5[3]), \n                                                                                       CONCAT12(-(cVar13 == pcVar5[2]), \n                                                                                                CONCAT11(-(cVar12 ==\n                                                                                                          pcVar5[1]), \n                                                                                                         -(cVar10 ==\n                                                                                                          *pcVar5)))))))\n                                                            )))))))));\n        uVar2 = (SUB161(auVar16 >> 7, 0) & 1 | (SUB161(auVar16 >> 0xf, 0) & 1) << 1 |\n                 (SUB161(auVar16 >> 0x17, 0) & 1) << 2 | (SUB161(auVar16 >> 0x1f, 0) & 1) << 3 |\n                 (SUB161(auVar16 >> 0x27, 0) & 1) << 4 | (SUB161(auVar16 >> 0x2f, 0) & 1) << 5 |\n                 (SUB161(auVar16 >> 0x37, 0) & 1) << 6 | (SUB161(auVar16 >> 0x3f, 0) & 1) << 7 |\n                 (SUB161(auVar16 >> 0x47, 0) & 1) << 8 | (SUB161(auVar16 >> 0x4f, 0) & 1) << 9 |\n                 (SUB161(auVar16 >> 0x57, 0) & 1) << 10 | (SUB161(auVar16 >> 0x5f, 0) & 1) << 0xb |\n                 (SUB161(auVar16 >> 0x67, 0) & 1) << 0xc | (SUB161(auVar16 >> 0x6f, 0) & 1) << 0xd |\n                 (SUB161(auVar16 >> 0x77, 0) & 1) << 0xe | (-(cVar14 == pcVar5[0xf]) >> 7) << 0xf) & -1 << uVar15;\n        uVar7 = (SUB161(auVar11 >> 7, 0) & 1 | (SUB161(auVar11 >> 0xf, 0) & 1) << 1 |\n                 (SUB161(auVar11 >> 0x17, 0) & 1) << 2 | (SUB161(auVar11 >> 0x1f, 0) & 1) << 3 |\n                 (SUB161(auVar11 >> 0x27, 0) & 1) << 4 | (SUB161(auVar11 >> 0x2f, 0) & 1) << 5 |\n                 (SUB161(auVar11 >> 0x37, 0) & 1) << 6 | (SUB161(auVar11 >> 0x3f, 0) & 1) << 7 |\n                 (SUB161(auVar11 >> 0x47, 0) & 1) << 8 | (SUB161(auVar11 >> 0x4f, 0) & 1) << 9 |\n                 (SUB161(auVar11 >> 0x57, 0) & 1) << 10 | (SUB161(auVar11 >> 0x5f, 0) & 1) << 0xb |\n                 (SUB161(auVar11 >> 0x67, 0) & 1) << 0xc | (SUB161(auVar11 >> 0x6f, 0) & 1) << 0xd |\n                 (SUB161(auVar11 >> 0x77, 0) & 1) << 0xe | (-(pcVar5[0xf] == '\\0') >> 7) << 0xf) & -1 << uVar15;\n        pcVar6 = pcVar5;\n        if (uVar7 == 0) {\n            do {\n                uVar7 = 0x1f;\n                if (uVar2 != 0) {\n                    for (; uVar2 >> uVar7 == 0; uVar7 = uVar7 - 1) {\n                    }\n                }\n                if (uVar2 != 0) {\n                    pauVar3 = pcVar6 + uVar7;\n                }\n                pcVar5 = pcVar6 + 0x10;\n                auVar11 = ZEXT416(CONCAT13(-(pcVar6[0x13] == '\\0'), \n                                           CONCAT12(-(pcVar6[0x12] == '\\0'), \n                                                    CONCAT11(-(pcVar6[0x11] == '\\0'), -(*pcVar5 == '\\0'))))) &\n                          0xffffffffffffffff;\n                uVar15 = -(SUB161(auVar11 >> 0x78, 0) == pcVar6[0x1f]);\n                auVar16 = CONCAT115(uVar15, CONCAT114(-(SUB161(auVar11 >> 0x70, 0) == pcVar6[0x1e]), \n                                                      CONCAT113(-(SUB161(auVar11 >> 0x68, 0) == pcVar6[0x1d]), \n                                                                CONCAT112(-(SUB161(auVar11 >> 0x60, 0) == pcVar6[0x1c])\n                                                                          , CONCAT111(-(SUB161(auVar11 >> 0x58, 0) ==\n                                                                                       pcVar6[0x1b]), \n                                                                                      CONCAT110(-(SUB161(auVar11 >> 0x50\n                                                                                                         , 0) ==\n                                                                                                 pcVar6[0x1a]), \n                                                                                                CONCAT19(-(SUB161(\n                                                            auVar11 >> 0x48, 0) == pcVar6[0x19]), \n                                                            CONCAT18(-(SUB161(auVar11 >> 0x40, 0) == pcVar6[0x18]), \n                                                                     CONCAT17(-(pcVar6[0x17] == '\\0'), \n                                                                              CONCAT16(-(pcVar6[0x16] == '\\0'), \n                                                                                       CONCAT15(-(pcVar6[0x15] == '\\0')\n                                                                                                , CONCAT14(-(pcVar6[0x14\n                                                            ] == '\\0'), SUB164(auVar11, 0)))))))))))));\n                auVar11 = CONCAT115(-(cVar14 == pcVar6[0x1f]), \n                                    CONCAT114(-(cVar13 == pcVar6[0x1e]), \n                                              CONCAT113(-(cVar12 == pcVar6[0x1d]), \n                                                        CONCAT112(-(cVar10 == pcVar6[0x1c]), \n                                                                  CONCAT111(-(cVar14 == pcVar6[0x1b]), \n                                                                            CONCAT110(-(cVar13 == pcVar6[0x1a]), \n                                                                                      CONCAT19(-(cVar12 == pcVar6[0x19])\n                                                                                               , CONCAT18(-(cVar10 ==\n                                                                                                           pcVar6[0x18])\n                                                                                                          , CONCAT17(-(\n                                                            cVar14 == pcVar6[0x17]), \n                                                            CONCAT16(-(cVar13 == pcVar6[0x16]), \n                                                                     CONCAT15(-(cVar12 == pcVar6[0x15]), \n                                                                              CONCAT14(-(cVar10 == pcVar6[0x14]), \n                                                                                       CONCAT13(-(cVar14 == pcVar6[0x13]\n                                                                                                 ), CONCAT12(-(cVar13 ==\n                                                                                                              pcVar6[\n                                                            0x12]), CONCAT11(-(cVar12 == pcVar6[0x11]), \n                                                                             -(cVar10 == *pcVar5))))))))))))))));\n                uVar1 = SUB161(auVar16 >> 7, 0) & 1 | (SUB161(auVar16 >> 0xf, 0) & 1) << 1 |\n                        (SUB161(auVar16 >> 0x17, 0) & 1) << 2 | (SUB161(auVar16 >> 0x1f, 0) & 1) << 3 |\n                        (SUB161(auVar16 >> 0x27, 0) & 1) << 4 | (SUB161(auVar16 >> 0x2f, 0) & 1) << 5 |\n                        (SUB161(auVar16 >> 0x37, 0) & 1) << 6 | (SUB161(auVar16 >> 0x3f, 0) & 1) << 7 |\n                        (SUB161(auVar16 >> 0x47, 0) & 1) << 8 | (SUB161(auVar16 >> 0x4f, 0) & 1) << 9 |\n                        (SUB161(auVar16 >> 0x57, 0) & 1) << 10 | (SUB161(auVar16 >> 0x5f, 0) & 1) << 0xb |\n                        (SUB161(auVar16 >> 0x67, 0) & 1) << 0xc | (SUB161(auVar16 >> 0x6f, 0) & 1) << 0xd |\n                        (SUB161(auVar16 >> 0x77, 0) & 1) << 0xe | (uVar15 >> 7) << 0xf;\n                uVar7 = uVar1;\n                uVar2 = SUB161(auVar11 >> 7, 0) & 1 | (SUB161(auVar11 >> 0xf, 0) & 1) << 1 |\n                        (SUB161(auVar11 >> 0x17, 0) & 1) << 2 | (SUB161(auVar11 >> 0x1f, 0) & 1) << 3 |\n                        (SUB161(auVar11 >> 0x27, 0) & 1) << 4 | (SUB161(auVar11 >> 0x2f, 0) & 1) << 5 |\n                        (SUB161(auVar11 >> 0x37, 0) & 1) << 6 | (SUB161(auVar11 >> 0x3f, 0) & 1) << 7 |\n                        (SUB161(auVar11 >> 0x47, 0) & 1) << 8 | (SUB161(auVar11 >> 0x4f, 0) & 1) << 9 |\n                        (SUB161(auVar11 >> 0x57, 0) & 1) << 10 | (SUB161(auVar11 >> 0x5f, 0) & 1) << 0xb |\n                        (SUB161(auVar11 >> 0x67, 0) & 1) << 0xc | (SUB161(auVar11 >> 0x6f, 0) & 1) << 0xd |\n                        (SUB161(auVar11 >> 0x77, 0) & 1) << 0xe | (-(cVar14 == pcVar6[0x1f]) >> 7) << 0xf;\n                pcVar6 = pcVar5;\n            } while (uVar1 == 0);\n        }\n        uVar2 = uVar2 & (-uVar7 & uVar7) - 1;\n        uVar7 = 0x1f;\n        if (uVar2 != 0) {\n            for (; uVar2 >> uVar7 == 0; uVar7 = uVar7 - 1) {\n            }\n        }\n        if (uVar2 != 0) {\n            pauVar3 = pcVar5 + uVar7;\n        }\n    }\n    else {\n        while( true ) {\n            bVar8 = false;\n            bVar9 = (arg1 & 0xf) == 0;\n            if (bVar9) break;\n            if ((*arg1)[0] == arg2) {\n                pauVar3 = arg1;\n            }\n            if ((*arg1)[0] == '\\0') {\n                return pauVar3;\n            }\n            arg1 = *arg1 + 1;\n        }\n        while( true ) {\n            iVar4 = pcmpistri(ZEXT416(arg2 & 0xff), *arg1, 0x40);\n            if (bVar8) {\n                pauVar3 = *arg1 + iVar4;\n                bVar9 = pauVar3 == NULL;\n                pcmpistri(ZEXT416(arg2 & 0xff), *arg1, 0x40);\n            }\n            if (bVar9) break;\n            bVar8 = 0xffffffffffffffef < arg1;\n            arg1 = arg1[1];\n            bVar9 = arg1 == NULL;\n        }\n    }\n    return pauVar3;\n}\n",
        "token_count": 5368
    },
    "1400216d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nint32_t fcn.1400216d4(int64_t arg1, int64_t arg2, uint64_t arg3)\n\n{\n    uint32_t *puVar1;\n    uint8_t uVar2;\n    uint64_t uVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    uint8_t *puVar7;\n    uint8_t *puVar8;\n    \n    if (*(arg1 + 0x10) != 0) {\n        uVar5 = 0;\n        puVar7 = *(arg1 + 0x10) + *(arg2 + 8);\n        uVar6 = 0;\n        iVar4 = -1;\n        uVar3 = *puVar7 & 0xf;\n        puVar7 = puVar7 + -*(uVar3 + 0x14002f0c8);\n        puVar1 = puVar7 + -4;\n        uVar2 = *(uVar3 + 0x14002f0d8) & 0x1f;\n        if (*puVar1 >> uVar2 != 0) {\n            do {\n                puVar8 = puVar7 + -*((*puVar7 & 0xf) + 0x14002f0c8);\n                uVar5 = uVar5 + (*(puVar8 + -4) >> (*((*puVar7 & 0xf) + 0x14002f0d8) & 0x1f));\n                if (arg3 < uVar5 + **(arg2 + 0x10) + *(arg2 + 8)) break;\n                uVar6 = uVar6 + 1;\n                puVar7 = puVar8 + -*((*puVar8 & 0xf) + 0x14002f0c8);\n                iVar4 = (*(puVar7 + -4) >> (*((*puVar8 & 0xf) + 0x14002f0d8) & 0x1f)) - 1;\n            } while (uVar6 < *puVar1 >> uVar2);\n            if (uVar6 != 0) {\n                return iVar4;\n            }\n            return -1;\n        }\n    }\n    return -1;\n}\n",
        "token_count": 498
    },
    "140021f0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_8h\n// WARNING: Variable defined which should be unmapped: var_10h_2\n// WARNING: Variable defined which should be unmapped: var_bp_28h\n// WARNING: Variable defined which should be unmapped: var_bp_30h\n// WARNING: Variable defined which should be unmapped: var_bp_38h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.140021f04(int32_t *arg1, ulong arg2, ulong arg3, int32_t *arg4, ulong *noname_4, ulong noname_5, \n                  uint64_t noname_6, int32_t *noname_7, ulong noname_8, ulong noname_9, ulong noname_10, ulong noname_11\n                  , ulong noname_12, ulong noname_13, ulong noname_14, ulong noname_15, ulong arg_90h, ulong arg_98h, \n                  ulong arg_a0h, ulong arg_a8h)\n\n{\n    int32_t *piVar1;\n    uint *puVar2;\n    code *pcVar3;\n    uint32_t uVar4;\n    char cVar5;\n    uint32_t uVar6;\n    int32_t iVar7;\n    int64_t iVar8;\n    int64_t iVar9;\n    ulong uVar10;\n    uint32_t uVar11;\n    ulong var_8h_2;\n    ulong var_10h;\n    uchar auStack360 [32];\n    ulong *puStack328;\n    ulong *puStack320;\n    ulong uStack312;\n    ulong uStack304;\n    uint64_t uStack296;\n    int32_t *piStack288;\n    char cStack280;\n    char cStack272;\n    char cStack264;\n    int32_t iStack260;\n    ulong uStack256;\n    int32_t *piStack248;\n    ulong uStack240;\n    int64_t iStack232;\n    uint64_t uStack224;\n    int64_t iStack216;\n    int32_t *piStack208;\n    int32_t iStack200;\n    int32_t iStack196;\n    int32_t iStack192;\n    uint32_t uStack188;\n    int32_t iStack184;\n    ulong *puStack176;\n    ulong uStack168;\n    uint uStack160;\n    uint uStack156;\n    uint32_t uStack152;\n    uint uStack148;\n    uint uStack144;\n    uint uStack140;\n    ulong var_80h;\n    ulong var_bp_78h;\n    ulong var_70h;\n    ulong var_bp_68h;\n    ulong var_bp_60h;\n    ulong var_58h;\n    uint64_t var_bp_50h;\n    ulong var_48h;\n    ulong var_40h;\n    ulong var_bp_38h;\n    ulong var_bp_30h;\n    ulong var_bp_28h;\n    ulong var_10h_2;\n    ulong var_8h;\n    uint64_t uVar12;\n    \n    var_bp_50h = *0x140037f00 ^ auStack360;\n    piStack208 = noname_7;\n    cStack264 = '\\0';\n    uStack256 = arg3;\n    uStack240 = arg2;\n    uVar6 = fcn.140024284(arg2, arg4, noname_4);\n    if ((-2 < uVar6) && (uVar6 < *(noname_4 + 4))) {\n        if ((*arg1 == -0x1f928c9d) && (((arg1[6] == 4 && (arg1[8] + 0xe66cfae0U < 3)) && (*(arg1 + 0xc) == 0)))) {\n            iVar8 = fcn.140021470();\n            if (*(iVar8 + 0x20) == 0) goto code_r0x00014002236c;\n            iVar8 = fcn.140021470();\n            arg1 = *(iVar8 + 0x20);\n            iVar8 = fcn.140021470();\n            cStack264 = '\\x01';\n            arg3 = *(iVar8 + 0x28);\n            uStack256 = arg3;\n            fcn.140020150(*(arg1 + 0xe));\n            if (((*arg1 == -0x1f928c9d) && (arg1[6] == 4)) && ((arg1[8] + 0xe66cfae0U < 3 && (*(arg1 + 0xc) == 0))))\n            goto code_r0x0001400223d3;\n            iVar8 = fcn.140021470();\n            if (*(iVar8 + 0x38) != 0) {\n                iVar8 = fcn.140021470();\n                uVar10 = *(iVar8 + 0x38);\n                iVar8 = fcn.140021470();\n                *(iVar8 + 0x38) = 0;\n                cVar5 = fcn.14002431c(arg1, uVar10);\n                arg3 = uStack256;\n                if (cVar5 == '\\0') {\n                    cVar5 = fcn.14002440c(uVar10);\n                    if (cVar5 != '\\0') {\n                        fcn.1400202c0(arg1);\n                        fcn.1400236dc(&var_bp_68h);\n                        fcn.140021390(&var_bp_68h, 0x140035e28);\n                        pcVar3 = swi(3);\n                        (*pcVar3)();\n                        return;\n                    }\n                    fcn.14001c830(uVar10);\n                    pcVar3 = swi(3);\n                    (*pcVar3)();\n                    return;\n                }\n            }\n        }\n        uStack168 = *(arg4 + 2);\n        puStack176 = noname_4;\n        if (((*arg1 == -0x1f928c9d) && (arg1[6] == 4)) && (arg1[8] + 0xe66cfae0U < 3)) {\n            if (*(noname_4 + 0xc) != 0) {\n                puStack320 = puStack320 & 0xffffffff00000000 | noname_6 & 0xffffffff;\n                puStack328 = noname_4;\n                fcn.14001f9ec(&uStack144, &puStack176, uVar6, arg4);\n                uStack160 = uStack144;\n                uStack156 = uStack140;\n                uStack152 = var_80h;\n                uStack148 = var_80h._4_4_;\n                if (var_80h < var_70h) {\n                    iVar8 = CONCAT44(uStack140, uStack144);\n                    iStack232 = iVar8;\n                    do {\n                        uVar12 = 0;\n                        iVar9 = *(*CONCAT44(uStack156, uStack160) + 0x10) + var_80h * 0x14;\n                        piVar1 = iVar9 + *(iVar8 + 8);\n                        iStack200 = *piVar1;\n                        iStack196 = piVar1[1];\n                        iStack192 = piVar1[2];\n                        uVar4 = piVar1[3];\n                        iStack184 = *(iVar9 + 0x10 + *(iVar8 + 8));\n                        uStack188 = uVar4;\n                        if (((iStack200 <= uVar6) && (uVar6 <= iStack196)) &&\n                           (iStack216 = iStack184 + *(arg4 + 2),  arg2 = uStack240,  uVar4 != 0)) {\n                            do {\n                                puVar2 = iStack216 + uVar12 * 0x14;\n                                var_bp_68h._0_4_ = *puVar2;\n                                var_bp_68h._4_4_ = puVar2[1];\n                                var_bp_60h._0_4_ = puVar2[2];\n                                var_bp_60h._4_4_ = puVar2[3];\n                                var_58h._0_4_ = *(iStack216 + 0x10 + uVar12 * 0x14);\n                                iVar8 = fcn.140020124();\n                                piStack248 = iVar8 + 4 + *(*(arg1 + 0xc) + 0xc);\n                                iVar8 = fcn.140020124();\n                                iStack260 = *(iVar8 + *(*(arg1 + 0xc) + 0xc));\n                                arg2 = uStack240;\n                                iVar8 = iStack232;\n                                for (; uStack240 = arg2,  iStack232 = iVar8,  0 < iStack260; iStack260 = iStack260 + -1)\n                                {\n                                    iVar8 = fcn.140020124();\n                                    uStack224 = iVar8 + *piStack248;\n                                    iVar7 = fcn.140022de4(&var_bp_68h, uStack224, *(arg1 + 0xc));\n                                    arg2 = uStack240;\n                                    if (iVar7 != 0) {\n                                        cStack272 = noname_5;\n                                        cStack280 = cStack264;\n                                        piStack288 = piStack208;\n                                        uStack296 = uStack296 & 0xffffffff00000000 | noname_6 & 0xffffffff;\n                                        uStack304 = &iStack200;\n                                        uStack312 = uStack224;\n                                        puStack320 = &var_bp_68h;\n                                        puStack328 = noname_4;\n                                        fcn.140021d5c(arg1, uStack240, uStack256, arg4);\n                                        iVar8 = iStack232;\n                                        goto code_r0x000140022247;\n                                    }\n                                    piStack248 = piStack248 + 1;\n                                    iVar8 = iStack232;\n                                }\n                                uVar11 = uVar12 + 1;\n                                uVar12 = uVar11;\n                            } while (uVar11 != uVar4);\n                        }\ncode_r0x000140022247:\n                        var_80h._0_4_ = var_80h + 1;\n                    } while (var_80h < var_70h);\n                }\n            }\n            iVar8 = 0;\n            if ((0x19930520 < (*noname_4 & 0x1fffffff)) &&\n               (((*(noname_4 + 4) != 0 && (iVar9 = fcn.140020110(),  iVar9 + *(noname_4 + 4) != 0)) ||\n                (((*(noname_4 + 0x24) >> 2 & 1) != 0 && (cVar5 = fcn.14001f82c(arg4, noname_4),  cVar5 == '\\0')))))) {\n                if ((*(noname_4 + 0x24) >> 2 & 1) != 0) {\n                    iVar8 = fcn.140021470();\n                    *(iVar8 + 0x20) = arg1;\n                    iVar8 = fcn.140021470();\n                    *(iVar8 + 0x28) = uStack256;\n                    fcn.14001c830(uStack256);\n                    pcVar3 = swi(3);\n                    (*pcVar3)();\n                    return;\n                }\n                if (*(noname_4 + 4) != 0) {\n                    iVar8 = fcn.140020110();\n                    iVar8 = iVar8 + *(noname_4 + 4);\n                }\n                cVar5 = fcn.14002431c(arg1, iVar8);\n                if (cVar5 == '\\0') {\n                    uVar10 = fcn.14001f8f8(arg2, arg4, noname_4, &uStack224);\n                    cStack280 = noname_5;\n                    uStack296 = 0;\n                    uStack304 = CONCAT44(uStack304._4_4_, 0xffffffff);\n                    uStack312 = CONCAT44(uStack312._4_4_, 0xffffffff);\n                    puStack320 = noname_4;\n                    puStack328 = NULL;\n                    piStack288 = arg4;\n                    fcn.14001fc98(arg2, arg1, uStack256, uVar10);\n                }\n            }\n        }\n        else if (*(noname_4 + 0xc) != 0) {\n            if (noname_5 != '\\0') goto code_r0x0001400223d3;\n            uStack304 = noname_7;\n            uStack312 = uStack312 & 0xffffffff00000000 | noname_6 & 0xffffffff;\n            puStack320 = puStack320 & 0xffffffff00000000 | uVar6;\n            puStack328 = noname_4;\n            fcn.1400228d8(arg1, arg2, arg3, arg4);\n        }\n        iVar8 = fcn.140021470();\n        if (*(iVar8 + 0x38) == 0) {\ncode_r0x00014002236c:\n            fcn.14001e9f0(var_bp_50h ^ auStack360);\n            return;\n        }\n    }\ncode_r0x0001400223d3:\n    fcn.14001260c();\n    pcVar3 = swi(3);\n    (*pcVar3)();\n    return;\n}\n",
        "token_count": 2933
    },
    "140023f8": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.140023f88(int64_t *arg1, int64_t arg2, int64_t arg3, ulong arg4)\n\n{\n    int32_t *piVar1;\n    code *pcVar2;\n    uint32_t *puVar3;\n    uint32_t uVar4;\n    int64_t iVar5;\n    int32_t iVar6;\n    uint64_t uVar7;\n    uint8_t *puVar8;\n    int64_t *piVar9;\n    uint64_t arg2_00;\n    int64_t arg3_00;\n    ulong uVar10;\n    uchar auStack312 [32];\n    uint32_t **ppuStack280;\n    ulong uStack264;\n    ulong uStack256;\n    int32_t iStack248;\n    uint32_t uStack244;\n    uint32_t uStack240;\n    uint32_t *puStack232;\n    uint64_t uStack224;\n    int64_t *piStack216;\n    ulong uStack208;\n    int64_t *piStack200;\n    int32_t *piStack192;\n    int64_t *piStack184;\n    uchar auStack176 [16];\n    uint32_t *puStack160;\n    uint64_t uStack152;\n    uint uStack136;\n    uint uStack132;\n    uint uStack128;\n    uint uStack124;\n    uint32_t auStack120 [2];\n    uint64_t uStack112;\n    uint64_t uStack88;\n    \n    uStack88 = *0x140037f00 ^ auStack312;\n    uStack240 = arg4;\n    piStack216 = arg1;\n    piStack200 = arg1;\n    uStack208 = fcn.140020110();\n    uVar4 = fcn.140021664(arg3, arg2);\n    arg2_00 = uVar4;\n    piVar1 = arg2 + 0x48;\n    piStack192 = piVar1;\n    if (*piVar1 == 0) {\n        iVar5 = fcn.140021470();\n        if (*(iVar5 + 0x78) != -2) {\n            iVar5 = fcn.140021470();\n            arg2_00 = *(iVar5 + 0x78);\n            iVar5 = fcn.140021470();\n            *(iVar5 + 0x78) = 0xfffffffe;\n        }\n    }\n    else {\n        iVar5 = fcn.140021470();\n        if (*(iVar5 + 0x78) != -2) {\n            fcn.14001260c();\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n        arg2_00 = *piVar1 - 2;\n    }\n    iVar5 = fcn.140021470();\n    *(iVar5 + 0x30) = *(iVar5 + 0x30) + 1;\n    piVar9 = arg2 + 8;\n    if (*(arg3 + 8) == 0) {\n        auStack120[0] = 0;\n    }\n    else {\n        puVar8 = *(arg3 + 8) + *piVar9;\n        uVar7 = *puVar8 & 0xf;\n        uStack112 = puVar8 - *(uVar7 + 0x14002f0c8);\n        auStack120[0] = *(uStack112 - 4) >> (*(uVar7 + 0x14002f0d8) & 0x1f);\n    }\n    uStack264 = auStack120;\n    puStack232 = auStack120;\n    ppuStack280 = &puStack232;\n    uStack256 = uStack112;\n    uStack224 = uStack112;\n    piStack184 = piVar9;\n    fcn.14002454c(auStack120, arg2_00, arg4, &uStack264);\n    while( true ) {\n        uVar7 = uStack256;\n        puStack160 = auStack120;\n        uStack152 = uStack112;\n        if ((uStack256 < uStack112) || (uStack256 <= uStack224)) break;\n        fcn.140024494(uStack264, &uStack256);\n        puVar3 = uStack264;\n        auStack176 = *(uStack264 + 4);\n        uVar10 = SUB168(auStack176 >> 0x40, 0);\n        uStack256._0_4_ = uVar7;\n        uStack256._4_4_ = SUB84(uVar7, 4);\n        uStack136 = uStack264;\n        uStack132 = uStack264._4_4_;\n        uStack128 = uStack256;\n        uStack124 = uStack256._4_4_;\n        uStack256 = uVar7;\n        fcn.140024494(uStack264, &uStack256);\n        uStack256 = uVar7 - puVar3[4];\n        ppuStack280 = &uStack264;\n        uStack244 = fcn.14002461c(&puStack232, arg4, &uStack136, arg2_00);\n        arg2_00 = uStack244;\n        iVar6 = uVar10;\n        iStack248 = 0;\n        if (iVar6 != 0) {\n            iStack248 = uVar10 >> 0x20;\n        }\n        if (iStack248 != 0) {\n            *piVar1 = uStack244 + 2;\n            if (iVar6 - 1U < 2) {\n                iVar5 = *piStack216;\n                if (iVar6 == 2) {\n                    arg3_00 = *(auStack176._12_4_ + iVar5);\n                }\n                else {\n                    arg3_00 = auStack176._12_4_ + iVar5;\n                }\n                fcn.1400248b0(iStack248 + *piVar9, iVar5, arg3_00, 0x103);\n            }\n            else {\n                fcn.140024800(iStack248 + *piVar9, arg1, 0x103);\n            }\n            fcn.140020138(uStack208);\n        }\n    }\n    iVar5 = fcn.140021470();\n    if (0 < *(iVar5 + 0x30)) {\n        iVar5 = fcn.140021470();\n        *(iVar5 + 0x30) = *(iVar5 + 0x30) + -1;\n    }\n    fcn.14001e9f0(uStack88 ^ auStack312);\n    return;\n}\n",
        "token_count": 1444
    },
    "14002476": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe"
        ],
        "decompiled_code": "\nuint fcn.14002476c(void)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint64_t uVar3;\n    \n    uVar3 = 0;\n    do {\n        iVar1 = (*_sym.imp.KERNEL32.dll_InitializeCriticalSectionEx)(uVar3 * 0x28 + 0x140038f08, 4000, 0);\n        if (iVar1 == 0) {\n            fcn.1400247b4();\n            return 0;\n        }\n        *0x140038f30 = *0x140038f30 + 1;\n        uVar2 = uVar3 + 1;\n        uVar3 = uVar2;\n    } while (uVar2 == 0);\n    return 1;\n}\n",
        "token_count": 173
    },
    "14002511": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.14002511c(void)\n\n{\n    char cVar1;\n    ulong uVar2;\n    int64_t *piVar3;\n    bool bVar4;\n    \n    piVar3 = 0x140029120;\n    do {\n        if ((*piVar3 != 0) && (cVar1 = (**0x140029a28)(),  cVar1 == '\\0')) break;\n        piVar3 = piVar3 + 2;\n    } while (piVar3 != 0x140029220);\n    if (piVar3 == 0x140029220) {\n        uVar2 = 1;\n    }\n    else {\n        if (piVar3 != 0x140029120) {\n            piVar3 = piVar3 + -1;\n            do {\n                if ((piVar3[-1] != 0) && (*piVar3 != 0)) {\n                    (**0x140029a28)(0);\n                }\n                bVar4 = piVar3 != 0x140029128;\n                piVar3 = piVar3 + -2;\n            } while (bVar4);\n        }\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 266
    },
    "140001bf": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint32_t fcn.140001bf8(ulong arg1, ulong arg2, int64_t *arg3)\n\n{\n    int64_t iVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    int64_t iStackX8;\n    \n    iStackX8 = 0;\n    uVar3 = 0;\n    *arg3 = 0;\n    uVar2 = (*_sym.imp.ADVAPI32.dll_RegCreateKeyExW)(0xffffffff80000002, arg2, 0, 0, 0, 0xf003f, 0, &iStackX8, 0);\n    if (uVar2 != 0) {\n        uVar3 = uVar2 & 0xffff | 0x80070000;\n        if (uVar2 < 1) {\n            uVar3 = uVar2;\n        }\n        if ((*0x140037208 != 0x140037208) && ((*(*0x140037208 + 0x1c) & 1) != 0)) {\n            fcn.140001b80(*(*0x140037208 + 0x10), 0xb, 0x14002f560, arg2);\n        }\n        if (uVar3 < 0) goto code_r0x000140001cac;\n    }\n    iVar1 = iStackX8;\n    iStackX8 = 0;\n    *arg3 = iVar1;\ncode_r0x000140001cac:\n    if (iStackX8 != 0) {\n        (*_sym.imp.ADVAPI32.dll_RegCloseKey)();\n    }\n    return uVar3;\n}\n",
        "token_count": 365
    },
    "140001cc": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint32_t fcn.140001ccc(ulong hKey, ulong noname_1, ulong noname_2, uint64_t arg4)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    \n    uVar2 = 0;\n    if ((arg4 & 0xffffffff) == arg4) {\n        uVar1 = (*_sym.imp.ADVAPI32.dll_RegSetValueExW)(hKey, L\"Version\", 0, 1);\n        if (uVar1 != 0) {\n            uVar2 = uVar1 & 0xffff | 0x80070000;\n            if (uVar1 < 1) {\n                uVar2 = uVar1;\n            }\n            if ((*0x140037208 != 0x140037208) && ((*(*0x140037208 + 0x1c) & 1) != 0)) {\n                fcn.140001b80(*(*0x140037208 + 0x10), 0xe, 0x14002f560, L\"Version\");\n            }\n        }\n    }\n    else {\n        if ((*0x140037208 != 0x140037208) && ((*(*0x140037208 + 0x1c) & 0x40) != 0)) {\n            fcn.140001b60(*(*0x140037208 + 0x10), 0xd, 0x14002f560);\n        }\n        uVar2 = 0x80070057;\n    }\n    return uVar2;\n}\n",
        "token_count": 343
    },
    "140003c6": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_80h\n// WARNING: Variable defined which should be unmapped: var_60h\n// WARNING: Variable defined which should be unmapped: var_58h\n// WARNING: Variable defined which should be unmapped: var_bp_8h\n// WARNING: Variable defined which should be unmapped: var_bp_10h\n// WARNING: Could not reconcile some variable overlaps\n\nuint64_t fcn.140003c68(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    int64_t iVar5;\n    uint64_t uVar6;\n    char *noname_2;\n    char16_t *noname_3;\n    uint64_t uStackX8;\n    uint auStackX32 [2];\n    ulong var_38h_2;\n    ulong var_80h;\n    uint in_stack_ffffffffffffff84;\n    ulong var_60h;\n    ulong var_58h;\n    ulong var_50h;\n    int64_t var_48h;\n    ulong var_40h;\n    int64_t var_38h;\n    code *pcStack56;\n    ulong var_28h;\n    ulong var_bp_20h;\n    uint64_t var_bp_18h;\n    ulong var_bp_10h;\n    ulong var_bp_8h;\n    \n    uStackX8 = 0;\n    noname_3 = 0x2;\n    uVar3 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyExW)\n                      (0xffffffff80000002, L\"Software\\\\Microsoft\\\\RemovalTools\\\\MRT\", 0, 2, &uStackX8);\n    if (uVar3 != 0) {\n        uVar2 = uVar3 & 0xffff | 0x80070000;\n        if (uVar3 < 1) {\n            uVar2 = uVar3;\n        }\n        if ((*0x140037208 != 0x140037208) && ((*(*0x140037208 + 0x1c) & 1) != 0)) {\n            noname_3 = L\"Software\\\\Microsoft\\\\RemovalTools\\\\MRT\";\n            fcn.140001b80(*(*0x140037208 + 0x10), 0x12, 0x14002f560, L\"Software\\\\Microsoft\\\\RemovalTools\\\\MRT\");\n        }\n        uVar6 = uStackX8;\n        if (uVar2 < 0) goto joined_r0x000140003d6c;\n    }\n    uVar6 = uStackX8;\n    iVar4 = (*_sym.imp.ADVAPI32.dll_RegDeleteValueW)();\n    if (((iVar4 != 0) && (*0x140037208 != 0x140037208)) && ((*(*0x140037208 + 0x1c) & 1) != 0)) {\n        noname_3 = L\"SendFullPackage\";\n        fcn.140001b80(*(*0x140037208 + 0x10), 0x14, 0x14002f560, L\"SendFullPackage\");\n    }\njoined_r0x000140003d6c:\n    if (uVar6 != 0) {\n        (*_sym.imp.ADVAPI32.dll_RegCloseKey)();\n    }\n    uVar3 = (*_sym.imp.KERNEL32.dll_SizeofResource)(0, arg2);\n    var_bp_18h = uVar3;\n    iVar5 = (*_sym.imp.KERNEL32.dll_LoadResource)(0, arg2);\n    if (iVar5 == 0) {\n        uVar3 = fcn.14000a4bc();\n        fcn.140009514(uVar3);\n        pcVar1 = swi(3);\n        uVar6 = (*pcVar1)();\n        return uVar6;\n    }\n    var_bp_20h = (*_sym.imp.KERNEL32.dll_LockResource)(iVar5);\n    var_28h = 0;\n    noname_2 = \"mrt.exe\";\n    pcStack56 = vtable.BinaryBlob.0;\n    fcn.140003224(&var_48h, &pcStack56, \"mrt.exe\");\n    uVar3 = fcn.1400029ec(arg3, &var_48h);\n    iVar5 = *0x140039490;\n    if (*0x140039490 != 0) {\n        (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(*0x140039490);\n        if (((5 < *0x140037270) && ((*0x140037280 & 0x400000000000) != 0)) &&\n           ((*0x140037288 & 0x400000000000) == *0x140037288)) {\n            uStackX8 = uStackX8 & 0xffffffff00000000 | uVar3;\n            var_50h = 0x1000000;\n            auStackX32[0] = *(*0x140039488 + 0x38);\n            var_80h._0_4_ = *(*0x140039488 + 0x2a);\n            var_80h._4_4_ = *(*0x140039488 + 0x29);\n            var_60h = *(*0x140039488 + 0x10);\n            var_58h = *(*0x140039488 + 8);\n            fcn.14000150c(*0x140039488, 0x140033258, noname_2, noname_3, &var_50h, &var_58h, &var_60h, \n                          &stack0xffffffffffffff90, &stack0xffffffffffffff88, &stack0xffffffffffffff80, &var_80h + 4, \n                          &var_80h, &stack0xffffffffffffff74, &stack0xffffffffffffff70, &stack0xffffffffffffff6c, \n                          &stack0xffffffffffffff68, auStackX32, &uStackX8, \n                          CONCAT44(*(*0x140039488 + 0x30), *(*0x140039488 + 0x34)), \n                          CONCAT14(*(*0x140039488 + 0x2b), *(*0x140039488 + 0x2c)), \n                          CONCAT14(*(*0x140039488 + 0x29), var_80h), \n                          CONCAT44(in_stack_ffffffffffffff84, *(*0x140039488 + 0x28)), *(*0x140039488 + 0x20), \n                          *(*0x140039488 + 0x18), var_60h, var_58h);\n        }\n        (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(iVar5);\n    }\n    if (var_48h != 0) {\n        iVar5 = var_48h;\n        if (0xfff < var_38h - var_48h) {\n            iVar5 = *(var_48h + -8);\n            if (0x1f < (var_48h - iVar5) - 8U) {\n                fcn.14000cde0(iVar5, (var_38h - var_48h) + 0x27);\n                pcVar1 = swi(3);\n                uVar6 = (*pcVar1)();\n                return uVar6;\n            }\n        }\n        fcn.14001ea54(iVar5);\n    }\n    return uVar3;\n}\n",
        "token_count": 1653
    },
    "140006f2": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.140006f2c(int64_t *param_1, ulong param_2, uint64_t param_3, int64_t *param_4)\n\n{\n    uint16_t uVar1;\n    int64_t iVar2;\n    ulong uVar3;\n    code *pcVar4;\n    uint32_t uVar5;\n    int64_t iVar6;\n    uint64_t uVar7;\n    int64_t *piVar8;\n    int64_t iVar9;\n    uint64_t uVar10;\n    int32_t iVar11;\n    uint64_t uVar12;\n    uint64_t uVar13;\n    uint32_t uVar14;\n    uint64_t uVar15;\n    uint64_t arg1;\n    uint64_t auStackX16 [2];\n    int64_t iStackX32;\n    ulong var_14010h;\n    uchar auStack82120 [48];\n    ulong uStack82072;\n    ulong uStack82064;\n    ulong uStack82056;\n    ulong uStack82048;\n    uchar auStack82040 [49152];\n    uint uStack32888;\n    uint8_t auStack32872 [32784];\n    uint64_t uStack88;\n    ulong uStack72;\n    \n    uStack72 = 0x140006f4b;\n    iVar6 = fcn.14001efa0();\n    iVar6 = -iVar6;\n    uStack88 = *0x140037f00 ^ &stack0xffffffffffffffc0 + iVar6;\n    *(&stack0x00000000 + iVar6) = param_1;\n    uVar15 = 0;\n    *(&stack0xffffffffffffffb8 + iVar6) = 0x140006f91;\n    uVar12 = param_3;\n    uVar7 = (**0x140029a28)(param_2);\n    arg1 = 0xffffffff;\n    if (0xfffffffe < uVar7) {\ncode_r0x000140007376:\n        if ((*0x140037208 != 0x140037208) && ((*(*0x140037208 + 0x1c) & 1) != 0)) {\n            uVar3 = *(*0x140037208 + 0x10);\n            *(&stack0xffffffffffffffb8 + iVar6) = 0x14000739b;\n            fcn.140006ef0(uVar3, *0x140037208, uVar12, uVar7);\n        }\n        uVar5 = uVar12;\n        *(&stack0xffffffffffffffb8 + iVar6) = 0x1400073a5;\n        fcn.140009514(0x800700df);\ncode_r0x0001400073a6:\n        if ((*0x140037208 != 0x140037208) && ((*(*0x140037208 + 0x1c) & 1) != 0)) {\n            *(&stack0xffffffffffffffe0 + iVar6) = uVar5;\n            uVar3 = *(*0x140037208 + 0x10);\n            *(&stack0xffffffffffffffb8 + iVar6) = 0x1400073dc;\n            fcn.1400061f8(uVar3, 0xe, 0x14002f7f0, arg1);\n        }\n        *(&stack0xffffffffffffffb8 + iVar6) = 0x1400073e6;\n        fcn.140009514(0x8007000d);\n        pcVar4 = swi(3);\n        (*pcVar4)();\n        return;\n    }\n    *(&stack0x00000010 + iVar6) = 0x1400293e0;\n    *(&stack0x00000018 + iVar6) = param_3;\n    *(&stack0xffffffffffffffb8 + iVar6) = 0x140006fc3;\n    fcn.140006018(&stack0x00000020 + iVar6, 0x10000);\n    *(&stack0x00000038 + iVar6) = 0;\n    *(&stack0xffffffffffffffb8 + iVar6) = 0x140006fe4;\n    (**0x140029a28)(param_3);\n    *(&stack0xffffffffffffffb8 + iVar6) = 0x140007009;\n    (**0x140029a28)(param_3);\n    uStack82072 = 0x1400293b8;\n    uStack82064 = 0;\n    uStack82056 = param_2;\n    *(&stack0xffffffffffffffb8 + iVar6) = 0x140007037;\n    uStack82048 = (**0x140029a28)(param_2);\n    *(&stack0xffffffffffffffe0 + iVar6) = 0x140007f20;\n    *(&stack0xffffffffffffffb8 + iVar6) = 0x140007061;\n    fcn.140025f00(&stack0xfffffffffffebf88, 0x18, 0x800, 0x140007f00);\n    uStack32888 = 0;\n    *(&stack0xffffffffffffffb8 + iVar6) = 0x140007086;\n    (**0x140029a28)(param_2, uStack82064);\n    *(&stack0xfffffffffffffff4 + iVar6) = 0;\n    *(&stack0xffffffffffffffb8 + iVar6) = 0x1400070b6;\n    (**0x140029a28)(&stack0x00000010 + iVar6);\n    if (*param_4 == 0) {\n        *(&stack0xffffffffffffffb8 + iVar6) = 0x1400070c9;\n        piVar8 = fcn.140006d9c(&stack0x00000000 + iVar6, *(&stack0xfffffffffffffff4 + iVar6));\n        if (param_4 != piVar8) {\n            iVar2 = *piVar8;\n            *piVar8 = 0;\n            iVar9 = *param_4;\n            *param_4 = iVar2;\n            if (iVar9 != 0) {\n                *(&stack0xffffffffffffffb8 + iVar6) = 0x1400070fb;\n                (**0x140029a28)(iVar9, 1);\n            }\n        }\n        if (*(&stack0x00000000 + iVar6) != 0) {\n            *(&stack0xffffffffffffffb8 + iVar6) = 0x140007120;\n            (**0x140029a28)(*(&stack0x00000000 + iVar6), 1);\n        }\n    }\n    iVar2 = *param_4;\n    *(&stack0xffffffffffffffb8 + iVar6) = 0x14000712c;\n    fcn.14000755c(&stack0xfffffffffffebf38, iVar2);\n    *(&stack0xfffffffffffffff8 + iVar6) = 0;\n    *(&stack0xffffffffffffffb8 + iVar6) = 0x140007158;\n    (**0x140029a28)(&stack0x00000010 + iVar6, &stack0xfffffffffffffff8 + iVar6);\n    uVar5 = *(&stack0xfffffffffffffff4 + iVar6);\n    uVar14 = uVar5;\n    if (uVar5 < uVar7) {\n        uVar14 = uVar7;\n    }\n    uVar14 = 4 - (uVar14 < 0x1000000);\n    uVar12 = uVar15;\n    if (uVar5 != 0) {\n        do {\n            *(&stack0xfffffffffffffff0 + iVar6) = 0;\n            *(&stack0xffffffffffffffb8 + iVar6) = 0x1400071a8;\n            (**0x140029a28)(&stack0x00000010 + iVar6, &stack0xfffffffffffffff0 + iVar6);\n            uVar1 = *(&stack0xfffffffffffffff0 + iVar6);\n            if ((uVar1 & 0x7fff) == uVar1) {\n                uVar10 = uVar1;\n                *(&stack0xffffffffffffffb8 + iVar6) = 0x1400071d1;\n                fcn.140008460(&stack0x00000010 + iVar6, &stack0xffffffffffff7f98, uVar10);\n            }\n            else {\n                *(&stack0xfffffffffffffff0 + iVar6) = (uVar1 & 0x7fff) + 6;\n                *(&stack0xffffffffffffffb8 + iVar6) = 0x1400071ec;\n                fcn.140008460(&stack0x00000010 + iVar6, &stack0xffffffffffff7f98, uVar14);\n                uVar7 = uVar15;\n                uVar10 = uVar15;\n                uVar13 = uVar15;\n                do {\n                    uVar13 = uVar13 | (&stack0xffffffffffff7f98)[uVar10] << (uVar7 & 0x1f);\n                    uVar10 = uVar10 + 1;\n                    uVar7 = uVar7 + 8;\n                } while (uVar10 < uVar14);\n                uVar1 = *(&stack0xfffffffffffffff0 + iVar6);\n                *(&stack0xffffffffffffffb8 + iVar6) = 0x140007235;\n                (**0x140029a28)(&stack0xfffffffffffebf68, uVar13);\n                uVar10 = uVar1;\n                *(&stack0xffffffffffffffb8 + iVar6) = 0x14000725b;\n                (**0x140029a28)();\n            }\n            uVar1 = *(&stack0xfffffffffffffff0 + iVar6);\n            uVar7 = uVar1;\n            uVar5 = *(&stack0xfffffffffffffff4 + iVar6);\n            iVar11 = uVar12;\n            if (uVar5 - iVar11 < uVar1) {\n                if ((*0x140037208 != 0x140037208) && ((*(*0x140037208 + 0x1c) & 1) != 0)) {\n                    *(&stack0xffffffffffffffe8 + iVar6) = uVar5;\n                    *(&stack0xffffffffffffffe0 + iVar6) = iVar11;\n                    uVar3 = *(*0x140037208 + 0x10);\n                    *(&stack0xffffffffffffffb8 + iVar6) = 0x140007414;\n                    fcn.140006e9c(uVar3, uVar5, uVar10, uVar1);\n                }\n                *(&stack0xffffffffffffffb8 + iVar6) = 0x14000741e;\n                fcn.140009514(0x8007000d);\n                pcVar4 = swi(3);\n                (*pcVar4)();\n                return;\n            }\n            *(&stack0xffffffffffffffb8 + iVar6) = 0x140007285;\n            uVar5 = fcn.14000c400(arg1, &stack0xffffffffffff7f98, *(&stack0xfffffffffffffff0 + iVar6));\n            arg1 = uVar5;\n            *(&stack0xffffffffffffffb8 + iVar6) = 0x14000729b;\n            fcn.1400076a0(&stack0xfffffffffffebf38, &stack0xffffffffffff7f98, uVar1);\n            uVar12 = iVar11 + *(&stack0xfffffffffffffff0 + iVar6);\n        } while (iVar11 + *(&stack0xfffffffffffffff0 + iVar6) < *(&stack0xfffffffffffffff4 + iVar6));\n    }\n    uVar5 = *(&stack0xfffffffffffffff8 + iVar6);\n    uVar12 = uVar5;\n    if (arg1 != uVar5) goto code_r0x0001400073a6;\n    *(&stack0xffffffffffffffb8 + iVar6) = 0x1400072c3;\n    fcn.140007810(&stack0xfffffffffffebf38);\n    iVar2 = *param_4;\n    *param_4 = 0;\n    *param_1 = iVar2;\n    *(&stack0xffffffffffffffb8 + iVar6) = 0x1400072d5;\n    fcn.1400075f4(&stack0xfffffffffffebf38);\n    *(&stack0xffffffffffffffb8 + iVar6) = 0x1400072df;\n    fcn.140007ff4(&stack0xfffffffffffebf68);\n    iVar2 = *(&stack0x00000020 + iVar6);\n    if (iVar2 == 0) goto code_r0x000140007327;\n    iVar9 = iVar2;\n    if (0xfff < *(&stack0x00000030 + iVar6) - iVar2) {\n        iVar9 = *(iVar2 + -8);\n        if (0x1f < (iVar2 - iVar9) - 8U) {\n            *(&stack0xffffffffffffffb8 + iVar6) = 0x140007375;\n            fcn.14000cde0(iVar9, (*(&stack0x00000030 + iVar6) - iVar2) + 0x27);\n            goto code_r0x000140007376;\n        }\n    }\n    *(&stack0xffffffffffffffb8 + iVar6) = 0x140007318;\n    fcn.14001ea54(iVar9);\n    *(&stack0x00000020 + iVar6) = 0;\n    *(&stack0x00000028 + iVar6) = 0;\n    *(&stack0x00000030 + iVar6) = 0;\ncode_r0x000140007327:\n    iVar2 = *param_4;\n    if (iVar2 != 0) {\n        *(&stack0xffffffffffffffb8 + iVar6) = 0x14000734a;\n        (**0x140029a28)(iVar2, 1);\n    }\n    *(&stack0xffffffffffffffb8 + iVar6) = 0x14000735c;\n    fcn.14001e9f0(uStack88 ^ &stack0xffffffffffffffc0 + iVar6);\n    return;\n}\n",
        "token_count": 3105
    },
    "14000846": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.140008460(int64_t arg1, int64_t arg2, ulong arg3)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    uint64_t uVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    ulong in_R9;\n    \n    if (arg3 != 0) {\n        uVar5 = 0;\n        do {\n            uVar6 = *(arg1 + 0x3c);\n            uVar2 = *(arg1 + 0x38);\n            uVar4 = arg3 - uVar5;\n            if (uVar6 == uVar2) {\n                uVar3 = *(arg1 + 0x18) - *(arg1 + 0x10);\n                if (uVar4 < uVar3) {\n                    uVar6 = *(arg1 + 0x18) - *(arg1 + 0x10);\n                    if ((*(arg1 + 0x30) - *(arg1 + 0x28) <= uVar6) &&\n                       (uVar6 = *(arg1 + 0x30) - *(arg1 + 0x28),  uVar6 == 0)) {\n                        if ((*0x140037208 != 0x140037208) && ((*(*0x140037208 + 0x1c) & 1) != 0)) {\n                            fcn.140001b60(*(*0x140037208 + 0x10), 10, 0x14002f838);\n                        }\n                        fcn.140009514(0x800700a0);\n                        pcVar1 = swi(3);\n                        (*pcVar1)();\n                        return;\n                    }\n                    uVar3 = uVar6;\n                    (**0x140029a28)();\n                    if ((*0x140037208 != 0x140037208) && ((*(*0x140037208 + 0x1c) & 8) != 0)) {\n                        fcn.14000747c(*(arg1 + 0x10), uVar6, uVar3, in_R9);\n                        in_R9 = *(arg1 + 0x28);\n                        fcn.1400074cc(*(*0x140037208 + 0x10), 0xb, 0x14002f838, in_R9);\n                    }\n                    *(arg1 + 0x38) = 0;\n                    *(arg1 + 0x28) = *(arg1 + 0x28) + uVar6;\n                    uVar2 = 0;\n                    *(arg1 + 0x3c) = uVar6;\n                    goto code_r0x0001400085d5;\n                }\n                uVar4 = (uVar4 / uVar3) * uVar3;\n                uVar3 = uVar4;\n                (**0x140029a28)();\n                if ((*0x140037208 != 0x140037208) && ((*(*0x140037208 + 0x1c) & 8) != 0)) {\n                    fcn.14000747c(uVar5 + arg2, uVar4, uVar3, in_R9);\n                    in_R9 = *(arg1 + 0x28);\n                    fcn.1400074cc(*(*0x140037208 + 0x10), 0xd, 0x14002f838, in_R9);\n                }\n                *(arg1 + 0x28) = *(arg1 + 0x28) + uVar4;\n            }\n            else {\ncode_r0x0001400085d5:\n                if (uVar6 - uVar2 < uVar4) {\n                    uVar4 = uVar6 - uVar2;\n                }\n                fcn.140020a40(uVar5 + arg2, uVar2 + *(arg1 + 0x10), uVar4);\n                *(arg1 + 0x38) = *(arg1 + 0x38) + uVar4;\n            }\n            uVar5 = uVar5 + uVar4;\n        } while (uVar5 < arg3);\n    }\n    return;\n}\n",
        "token_count": 921
    },
    "140008c1": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_fh\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Variable defined which should be unmapped: var_17h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.140008c1c(ulong arg1)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    int64_t arg2;\n    ulong noname_1;\n    uint *arg3;\n    ulong var_fh;\n    ulong var_17h;\n    ulong var_1fh;\n    ulong var_2fh;\n    ulong var_37h;\n    ulong var_47h;\n    uchar auStack184 [32];\n    uint uStack152;\n    uint uStack148;\n    ulong uStack144;\n    ulong uStack136;\n    ulong uStack128;\n    uint auStack120 [6];\n    uint uStack96;\n    uint uStack92;\n    uint uStack88;\n    uint *puStack80;\n    uint uStack72;\n    uchar auStack64 [3];\n    ulong var_35h;\n    ulong var_29h;\n    ulong var_21h;\n    ulong var_19h;\n    uint64_t uStack24;\n    ulong var_1h;\n    \n    uStack24 = *0x140037f00 ^ auStack184;\n    var_21h._1_4_ = 0xaac56b;\n    stack0xffffffffffffffdc = 0x11d0cd44;\n    var_19h._1_4_ = 0xc000c28c;\n    stack0xffffffffffffffe4 = 0xee95c24f;\n    fcn.140020880(auStack120, 0, 0x50);\n    uStack148 = 0;\n    puStack80 = &uStack152;\n    uStack128 = 0;\n    arg3 = auStack120;\n    uStack92 = 0;\n    arg2 = &var_21h + 1;\n    uStack136 = 0;\n    auStack120[0] = 0x50;\n    uStack88 = 1;\n    uStack96 = 2;\n    uStack72 = 1;\n    var_29h._1_4_ = 0x1010;\n    uStack152 = 0x20;\n    uStack144 = arg1;\n    uVar1 = (*_sym.imp.WINTRUST.dll_WinVerifyTrust)(0xffffffffffffffff);\n    if (uVar1 == 0) {\n        uVar1 = fcn.140008a64(_auStack64, arg2, arg3);\n        if (((uVar1 == 0) || (*0x140037208 == 0x140037208)) || ((*(*0x140037208 + 0x1c) & 1) == 0))\n        goto code_r0x000140008d28;\n        noname_1 = 0xd;\n    }\n    else {\n        if ((*0x140037208 == 0x140037208) || ((*(*0x140037208 + 0x1c) & 1) == 0)) goto code_r0x000140008d28;\n        noname_1 = 0xe;\n    }\n    fcn.140004708(*(*0x140037208 + 0x10), noname_1, 0x14002fa70, uVar1);\ncode_r0x000140008d28:\n    uStack72 = 2;\n    iVar2 = (*_sym.imp.WINTRUST.dll_WinVerifyTrust)(0, &var_21h + 1, auStack120);\n    if (((iVar2 != 0) && (*0x140037208 != 0x140037208)) && ((*(*0x140037208 + 0x1c) & 1) != 0)) {\n        fcn.140001b60(*(*0x140037208 + 0x10), 0xf, 0x14002fa70);\n    }\n    fcn.14001e9f0(uStack24 ^ auStack184);\n    return;\n}\n",
        "token_count": 902
    },
    "14000916": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint fcn.140009160(int64_t *arg1, ulong arg2)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    ulong noname_1;\n    ulong noname_2;\n    \n    if ((*0x140037208 != 0x140037208) && ((*(*0x140037208 + 0x1c) & 4) != 0)) {\n        fcn.140008e48(*(*0x140037208 + 0x10), 0x1a, 0x14002fae8, arg2);\n    }\n    noname_1 = 0;\n    noname_2 = 8;\n    iVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryExW)(arg2);\n    *arg1 = iVar2;\n    if (iVar2 == 0) {\n        uVar1 = fcn.14000a4bc();\n        if ((*0x140037208 != 0x140037208) && ((*(*0x140037208 + 0x1c) & 1) != 0)) {\n            fcn.140008ec0(*(*0x140037208 + 0x10), noname_1, noname_2, arg2);\n        }\n    }\n    else {\n        uVar1 = 0;\n    }\n    return uVar1;\n}\n",
        "token_count": 297
    },
    "14000932": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nulong fcn.14000932c(ulong arg1)\n\n{\n    ulong uVar1;\n    uint32_t auStackX16 [6];\n    \n    auStackX16[0] = 0;\n    uVar1 = fcn.1400092b4(auStackX16, arg1);\n    if (-1 < uVar1) {\n        if ((auStackX16[0] & 0x10) == 0) {\n            uVar1 = 0;\n        }\n        else {\n            if ((*0x140037208 != 0x140037208) && ((*(*0x140037208 + 0x1c) & 1) != 0)) {\n                fcn.140008de8(*(*0x140037208 + 0x10), 0x20, 0x14002fae8, arg1);\n            }\n            uVar1 = 0x800700b7;\n        }\n    }\n    return uVar1;\n}\n",
        "token_count": 215
    },
    "14000951": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.140009514(ulong arg1)\n\n{\n    code *pcVar1;\n    uint64_t arg4;\n    uchar auStack56 [48];\n    \n    arg4 = arg1;\n    if (-1 < arg1) {\n        if ((*0x140037208 != 0x140037208) && ((*(*0x140037208 + 0x1c) & 1) != 0)) {\n            fcn.140001b60(*(*0x140037208 + 0x10), 10, 0x14002fb08);\n        }\n        arg4 = 0x8000ffff;\n    }\n    if ((*0x140037208 != 0x140037208) && ((*(*0x140037208 + 0x1c) & 1) != 0)) {\n        fcn.140008f54(*(*0x140037208 + 0x10), 0xb, 0x14002fb08, arg4);\n    }\n    fcn.140009460(auStack56, arg4);\n    fcn.140021390(auStack56, 0x140036078);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 272
    },
    "140009c5": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint64_t fcn.140009c54(ulong hKey, ulong arg2, uint32_t *arg3, uint64_t *arg4)\n\n{\n    uint32_t uVar1;\n    uint64_t uVar2;\n    uint64_t uVar3;\n    uint32_t uVar4;\n    int64_t in_stack_00000028;\n    \n    uVar3 = *arg4;\n    uVar2 = uVar3 & 0xffffffff;\n    if (uVar2 != uVar3) {\n        return 0x80070057;\n    }\n    uVar1 = (*_sym.imp.ADVAPI32.dll_RegQueryValueExW)();\n    uVar4 = uVar1 & 0xffff | 0x80070000;\n    if (uVar1 < 1) {\n        uVar4 = uVar1;\n    }\n    if (uVar4 < 0) {\n        if (uVar4 == 0x80070002) {\n            if (*0x140037208 == 0x140037208) {\n                return 0x80070002;\n            }\n            if ((*(*0x140037208 + 0x1c) & 4) == 0) {\n                return 0x80070002;\n            }\n            fcn.140008de8(*(*0x140037208 + 0x10), 0x16, 0x14002fb18, arg2);\n            return 0x80070002;\n        }\n        if (uVar4 != 0x800700ea) {\n            if ((*0x140037208 != 0x140037208) && ((*(*0x140037208 + 0x1c) & 1) != 0)) {\n                fcn.140001b80(*(*0x140037208 + 0x10), 0x17, 0x14002fb18, arg2);\n            }\n            return uVar4;\n        }\n        if (uVar2 <= *arg4) {\n            return 0x8000ffff;\n        }\n    }\n    else if ((in_stack_00000028 == 0) || (uVar2 < *arg4 || uVar2 == *arg4)) {\n        uVar4 = *arg3;\n        *arg4 = uVar2;\n        uVar3 = fcn.140009b78(arg2, uVar3, uVar4, arg4);\n        return uVar3;\n    }\n    *arg4 = uVar2;\n    return 0x800700ea;\n}\n",
        "token_count": 555
    },
    "140009e0": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint32_t fcn.140009e00(ulong hKey)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    \n    uVar1 = (*_sym.imp.ADVAPI32.dll_RegSetValueExW)(hKey, L\"SendFullPackage\", 0);\n    if (uVar1 != 0) {\n        if ((*0x140037208 != 0x140037208) && ((*(*0x140037208 + 0x1c) & 1) != 0)) {\n            fcn.140008e48(*(*0x140037208 + 0x10), 0x1a, 0x14002fb18, L\"SendFullPackage\");\n        }\n        uVar2 = uVar1 & 0xffff | 0x80070000;\n        if (uVar1 < 1) {\n            uVar2 = uVar1;\n        }\n        if (uVar2 < 0) {\n            return uVar2;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 228
    },
    "140009e8": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nulong fcn.140009e84(uint64_t arg1, uint64_t arg2)\n\n{\n    if (arg1 == 0) {\n        if ((*0x140037208 != 0x140037208) && ((*(*0x140037208 + 0x1c) & 1) != 0)) {\n            fcn.140001b60(*(*0x140037208 + 0x10), 0x38, 0x14002fb18);\n        }\n    }\n    else {\n        if ((arg1 & 1) == 0) {\n            if ((((arg2 & 1) != 0) && (*0x140037208 != 0x140037208)) && ((*(*0x140037208 + 0x1c) & 1) != 0)) {\n                fcn.1400064a8(*(*0x140037208 + 0x10), 0x3a, 0x14002fb18, arg2);\n            }\n            return 1;\n        }\n        if ((*0x140037208 != 0x140037208) && ((*(*0x140037208 + 0x1c) & 1) != 0)) {\n            fcn.140009a2c(*(*0x140037208 + 0x10), 0x39, 0x14002fb18, arg1);\n        }\n    }\n    return 0;\n}\n",
        "token_count": 315
    },
    "14000a23": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nulong fcn.14000a230(uint64_t arg1, int64_t arg2, uint64_t *arg3)\n\n{\n    ulong uVar1;\n    int64_t iVar2;\n    uint64_t arg4;\n    \n    arg4 = *arg3;\n    iVar2 = *0x140037208;\n    if ((arg4 & 1) != 0) {\n        if ((*0x140037208 != 0x140037208) && ((*(*0x140037208 + 0x1c) & 1) != 0)) {\n            fcn.140009a2c(*(*0x140037208 + 0x10), 0x46, 0x14002fb18, arg4);\n        }\n        iVar2 = *0x140037208;\n        *arg3 = *arg3 - 1;\n        arg4 = *arg3;\n    }\n    if ((arg4 >> 1 == 0) || (*(arg2 + -2 + (arg4 & 0xfffffffffffffffe)) != 0)) {\n        if (arg1 <= arg4 >> 1) {\n            if ((iVar2 != 0x140037208) && ((*(iVar2 + 0x1c) & 2) != 0)) {\n                fcn.140001b60(*(iVar2 + 0x10), 0x48, 0x14002fb18);\n            }\n            *arg3 = *arg3 + 2;\n            return 0x800700ea;\n        }\n        if ((iVar2 != 0x140037208) && ((*(iVar2 + 0x1c) & 1) != 0)) {\n            fcn.140001b60(*(iVar2 + 0x10), 0x47, 0x14002fb18);\n        }\n        *arg3 = *arg3 + 2;\n        *(arg2 + (arg4 & 0xfffffffffffffffe)) = 0;\n    }\n    uVar1 = fcn.14000a1c8(arg2, arg3);\n    return uVar1;\n}\n",
        "token_count": 459
    },
    "14000a8b": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint64_t fcn.14000a8b8(ulong *arg1, ulong lpModuleName, ulong arg3)\n\n{\n    uint32_t uVar1;\n    int64_t hModule;\n    uint64_t uVar2;\n    ulong auStack24 [2];\n    \n    hModule = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(lpModuleName);\n    if (hModule == 0) {\n        uVar1 = fcn.14000a4bc();\n        uVar2 = uVar1;\n        if ((*0x140037208 != 0x140037208) && ((*(*0x140037208 + 0x1c) & 1) != 0)) {\n            fcn.140001b80(*(*0x140037208 + 0x10), 0x12, 0x14002fba8, lpModuleName);\n        }\n    }\n    else {\n        auStack24[0] = 0;\n        uVar2 = fcn.140009204(auStack24, hModule, arg3);\n        if (uVar2 == -0x7ff8ff81) {\n            uVar2 = 0x8007007f;\n        }\n        else if (-1 < uVar2) {\n            *arg1 = auStack24[0];\n            uVar2 = 0;\n        }\n    }\n    return uVar2;\n}\n",
        "token_count": 304
    },
    "14000a9f": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_8h\n// WARNING: Variable defined which should be unmapped: var_14h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.14000a9fc(ulong arg1, ulong arg2, ulong nSubAuthority0, ulong nSubAuthority1, ulong *noname_4, ulong noname_5, \n                  ulong arg_40h)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uchar auStack152 [32];\n    uint uStack120;\n    uint uStack112;\n    uint uStack104;\n    uint uStack96;\n    uint uStack88;\n    uint uStack80;\n    ulong *puStack72;\n    ulong uStack56;\n    uint uStack48;\n    ushort uStack44;\n    ulong pSid;\n    uchar var_18h [4];\n    ulong var_14h;\n    ulong var_8h;\n    \n    _var_18h = *0x140037f00 ^ auStack152;\n    if (arg2 - 1U < 8) {\n        uStack44 = 0x500;\n        uStack48 = 0;\n        pSid._0_4_ = 0;\n        pSid._4_2_ = 0x100;\n        if (noname_4 == NULL) {\n            noname_4 = &uStack48;\n            if (nSubAuthority0 == 0) {\n                noname_4 = &pSid;\n            }\n        }\n        puStack72 = &uStack56;\n        uStack56 = 0;\n        uStack80 = 0;\n        uStack88 = 0;\n        uStack96 = 0;\n        uStack104 = 0;\n        uStack112 = 0;\n        uStack120 = 0;\n        iVar1 = (*_sym.imp.ADVAPI32.dll_AllocateAndInitializeSid)(noname_4);\n        if (iVar1 == 0) {\n            uVar2 = fcn.14000a4bc();\n            if ((*0x140037208 != 0x140037208) && ((*(*0x140037208 + 0x1c) & 1) != 0)) {\n                fcn.140008f54(*(*0x140037208 + 0x10), 0xd, 0x14002fbb8, uVar2);\n            }\n        }\n        else {\n            fcn.14000a960(arg1, uStack56);\n            (*_sym.imp.ADVAPI32.dll_FreeSid)(uStack56);\n        }\n    }\n    fcn.14001e9f0(_var_18h ^ auStack152);\n    return;\n}\n",
        "token_count": 592
    },
    "14000adc": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint64_t fcn.14000adc4(ulong arg1, int64_t *arg2, ulong arg3)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint64_t uVar3;\n    int64_t arg1_00;\n    char cVar4;\n    uint auStackX8 [2];\n    \n    auStackX8[0] = 0;\n    uVar1 = (**0x140029a28)(1, arg3, auStackX8);\n    if (uVar1 == 0) {\n        uVar3 = fcn.14000a4bc();\n    }\n    else {\n        uVar3 = 0;\n    }\n    cVar4 = (uVar3 & 0xffffffff) >> 0x1f;\n    if (cVar4 == '\\0') {\n        uVar1 = (-(cVar4 != '\\x01') & uVar1) + 8;\n        if (uVar1 < 9) {\n            uVar3 = 0x80070216;\n        }\n        else {\n            arg1_00 = fcn.14001ea5c(uVar1, 0x14002f788);\n            uVar3 = ~-(arg1_00 != 0) & 0x8007000e;\n            if (arg1_00 != 0) {\n                iVar2 = (**0x140029a28)(1, arg3, auStackX8[0], uVar1, arg1_00);\n                if (iVar2 == 0) {\n                    uVar1 = fcn.14000a4bc();\n                }\n                else {\n                    uVar1 = 0;\n                }\n                if (uVar1 < 0) {\n                    if ((*0x140037208 != 0x140037208) && ((*(*0x140037208 + 0x1c) & 1) != 0)) {\n                        fcn.140001b80(*(*0x140037208 + 0x10), 10, 0x14002ff18, arg3);\n                    }\n                    fcn.14001ea10(arg1_00);\n                    uVar3 = uVar1;\n                }\n                else {\n                    *arg2 = arg1_00;\n                    uVar3 = 0;\n                }\n            }\n        }\n    }\n    return uVar3;\n}\n",
        "token_count": 517
    },
    "14000b04": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.14000b04c(void)\n\n{\n    int64_t iVar1;\n    uint64_t uVar2;\n    \n    uVar2 = *0x1400394b8;\n    if ((*0x1400394b8 >> 2 & 1) != 0) {\n        fcn.14000b660();\n        uVar2 = *0x1400394b8;\n    }\n    iVar1 = *0x140039348;\n    if ((uVar2 >> 1 & 1) != 0) {\n        *0x140039348 = 0;\n        if (iVar1 != 0) {\n            (**0x140029a28)(iVar1, 1);\n        }\n    }\n    *0x1400394b8 = 0;\n    return;\n}\n",
        "token_count": 176
    },
    "14000b6c": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint32_t fcn.14000b6cc(ulong arg1, ulong arg2)\n\n{\n    uint32_t uVar1;\n    \n    uVar1 = (**0x140029a28)(arg2);\n    if (uVar1 < 0) {\n        if ((*0x140037208 != 0x140037208) && ((*(*0x140037208 + 0x1c) & 1) != 0)) {\n            fcn.140008f54(*(*0x140037208 + 0x10), 10, 0x14002ffa0, uVar1);\n        }\n    }\n    else {\n        uVar1 = 0;\n    }\n    return uVar1;\n}\n",
        "token_count": 158
    },
    "14000c81": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0"
        ],
        "decompiled_code": "\nuint fcn.14000c818(int64_t arg1, int64_t arg2)\n\n{\n    uint uVar1;\n    \n    if (arg1 == 0) {\n        *(arg2 + 0x30) = 1;\n        *(arg2 + 0x2c) = 0x16;\n        fcn.14000ccf4(0, 0, 0, 0);\n    }\n    else {\n        if ((*(arg1 + 0x14) >> 0xc & 1) == 0) {\n            fcn.14001286c(arg1);\n            uVar1 = fcn.14000c894(arg1, arg2);\n            fcn.140012878(arg1);\n            return uVar1;\n        }\n        fcn.140012b80(arg1);\n    }\n    return 0xffffffff;\n}\n",
        "token_count": 188
    },
    "14000c89": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint fcn.14000c894(int64_t arg1, int64_t arg2)\n\n{\n    uint uVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    \n    if (arg1 == 0) {\n        *(arg2 + 0x30) = 1;\n        *(arg2 + 0x2c) = 0x16;\n        fcn.14000ccf4(0, 0, 0, 0);\n        uVar1 = 0xffffffff;\n    }\n    else {\n        uVar1 = 0xffffffff;\n        if ((*(arg1 + 0x14) >> 0xd & 1) != 0) {\n            uVar1 = fcn.140012eac(arg1, arg2);\n            fcn.140012c88(arg1);\n            uVar2 = fcn.1400126a0(arg1);\n            iVar3 = fcn.1400128fc(uVar2, arg2);\n            if (iVar3 < 0) {\n                uVar1 = 0xffffffff;\n            }\n            else if (*(arg1 + 0x28) != 0) {\n                fcn.140012664(*(arg1 + 0x28));\n                *(arg1 + 0x28) = 0;\n            }\n        }\n        fcn.140012b80(arg1);\n    }\n    return uVar1;\n}\n",
        "token_count": 309
    },
    "14000d04": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint64_t fcn.14000d04c(char *arg1, uint64_t arg2, uint64_t arg3, int64_t *arg4)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint64_t uVar3;\n    uint32_t uVar4;\n    uint64_t uVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    int64_t in_stack_00000028;\n    \n    if ((arg2 != 0) && (arg3 != 0)) {\n        if ((arg4 != NULL) &&\n           ((arg1 != NULL && (arg3 <= SUB168((ZEXT816(0) << 0x40 | ZEXT816(0xffffffffffffffff)) / ZEXT816(arg2), 0)))))\n        {\n            if ((*(arg4 + 0x14) & 0x4c0) == 0) {\n                uVar7 = 0x1000;\n            }\n            else {\n                uVar7 = *(arg4 + 4);\n            }\n            uVar5 = arg2 * arg3;\n            do {\n                if (uVar5 == 0) {\n                    return arg3;\n                }\n                if (((*(arg4 + 0x14) & 0xc0) == 0) || (*(arg4 + 2) == 0)) {\n                    if (uVar7 <= uVar5) {\n                        if (((*(arg4 + 0x14) & 0xc0) != 0) &&\n                           (iVar1 = fcn.140012eac(arg4, in_stack_00000028),  iVar1 != 0)) goto code_r0x00014000d203;\n                        uVar3 = uVar5;\n                        if (uVar7 != 0) {\n                            uVar3 = uVar5 - uVar5 % uVar7;\n                        }\n                        uVar6 = 0xfffffffe;\n                        if (uVar3 < 0xfffffffe) {\n                            uVar6 = uVar3;\n                        }\n                        uVar2 = fcn.1400126a0(arg4);\n                        uVar2 = fcn.1400138b4(uVar2, arg1, uVar6, in_stack_00000028);\n                        if (uVar2 != 0xffffffff) {\n                            uVar4 = uVar2;\n                            if (uVar6 < uVar2) {\n                                uVar4 = uVar6;\n                            }\n                            uVar3 = uVar4;\n                            uVar5 = uVar5 - uVar3;\n                            if (uVar6 <= uVar2) goto code_r0x00014000d24a;\n                        }\ncode_r0x00014000d1fe:\n                        LOCK();\n                        *(arg4 + 0x14) = *(arg4 + 0x14) | 0x10;\ncode_r0x00014000d203:\n                        return (arg2 * arg3 - uVar5) / arg2;\n                    }\n                    iVar1 = fcn.140013e50(*arg1, arg4, in_stack_00000028);\n                    if (iVar1 == -1) goto code_r0x00014000d203;\n                    uVar7 = *(arg4 + 4);\n                    uVar5 = uVar5 - 1;\n                    if (uVar7 < 1) {\n                        uVar7 = 1;\n                        uVar3 = 1;\n                    }\n                    else {\n                        uVar3 = 1;\n                    }\n                }\n                else {\n                    if (*(arg4 + 2) < 0) goto code_r0x00014000d1fe;\n                    if ((*(arg4 + 0x14) & 1) != 0) goto code_r0x00014000d203;\n                    uVar3 = uVar5;\n                    if (*(arg4 + 2) <= uVar5) {\n                        uVar3 = *(arg4 + 2);\n                    }\n                    fcn.140020a40(*arg4, arg1, uVar3);\n                    *(arg4 + 2) = *(arg4 + 2) - uVar3;\n                    uVar5 = uVar5 - uVar3;\n                    *arg4 = *arg4 + uVar3;\n                }\ncode_r0x00014000d24a:\n                arg1 = arg1 + uVar3;\n            } while( true );\n        }\n        *(in_stack_00000028 + 0x30) = 1;\n        *(in_stack_00000028 + 0x2c) = 0x16;\n        fcn.14000ccf4(0, 0, 0, 0);\n    }\n    return 0;\n}\n",
        "token_count": 1030
    },
    "14000d66": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint32_t fcn.14000d664(int64_t arg1, char **arg2, ulong arg3)\n\n{\n    char cVar1;\n    char *pcVar2;\n    char **ppcVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    uint *puVar6;\n    uint64_t uVar7;\n    uint32_t uVar8;\n    char *pcVar9;\n    uint64_t uVar10;\n    char cVar11;\n    uint32_t uVar12;\n    uint32_t in_R9D;\n    uint32_t uVar13;\n    \n    pcVar2 = *arg2;\n    uVar10 = arg3;\n    if (pcVar2 == NULL) {\n        puVar6 = fcn.14000d3d8();\n        *puVar6 = 0x16;\n        fcn.14000cdc0();\ncode_r0x00014000d6d5:\n        if (arg2[1] != NULL) {\n            *arg2[1] = *arg2;\n        }\n        return 0;\n    }\n    if ((arg3 != 0) && (0x22 < arg3 - 2)) {\n        *(arg1 + 0x30) = 1;\n        *(arg1 + 0x2c) = 0x16;\n        fcn.14000ccf4(0, 0, 0, 0);\n        goto code_r0x00014000d6d5;\n    }\n    cVar11 = *pcVar2;\n    pcVar9 = pcVar2 + 1;\n    uVar12 = in_R9D & 0xff;\n    *arg2 = pcVar9;\n    uVar13 = uVar12 | 2;\n    if ((cVar11 == '-') || (uVar13 = uVar12,  cVar11 == '+')) {\n        uVar12 = uVar13;\n        cVar11 = *pcVar9;\n        pcVar9 = pcVar2 + 2;\n        *arg2 = pcVar9;\n    }\n    uVar7 = uVar10;\n    if ((arg3 & 0xffffffef) == 0) {\n        if (cVar11 - 0x30U < 10) {\n            iVar4 = cVar11 + -0x30;\ncode_r0x00014000d75b:\n            if (iVar4 != 0) goto code_r0x00014000d7a9;\n            cVar1 = *pcVar9;\n            *arg2 = pcVar9 + 1;\n            if ((cVar1 + 0xa8U & 0xdf) != 0) {\n                *arg2 = pcVar9;\n                uVar7 = 8;\n                if (arg3 != 0) {\n                    uVar7 = uVar10;\n                }\n                if ((cVar1 != '\\0') && (*pcVar9 != cVar1)) {\n                    puVar6 = fcn.14000d3d8();\n                    *puVar6 = 0x16;\n                    fcn.14000cdc0();\n                }\n                goto code_r0x00014000d7b5;\n            }\n            cVar11 = pcVar9[1];\n            *arg2 = pcVar9 + 2;\n            uVar7 = 0x10;\n        }\n        else {\n            if (cVar11 + 0x9fU < 0x1a) {\n                iVar4 = cVar11 + -0x57;\n                goto code_r0x00014000d75b;\n            }\n            if (cVar11 + 0xbfU < 0x1a) {\n                iVar4 = cVar11 + -0x37;\n                goto code_r0x00014000d75b;\n            }\ncode_r0x00014000d7a9:\n            uVar7 = 10;\n        }\n        if (arg3 != 0) {\n            uVar7 = uVar10;\n        }\n    }\ncode_r0x00014000d7b5:\n    pcVar9 = *arg2;\n    uVar13 = 0;\n    while( true ) {\n        if (cVar11 - 0x30U < 10) {\n            uVar8 = cVar11 - 0x30;\n        }\n        else if (cVar11 + 0x9fU < 0x1a) {\n            uVar8 = cVar11 - 0x57;\n        }\n        else if (cVar11 + 0xbfU < 0x1a) {\n            uVar8 = cVar11 - 0x37;\n        }\n        else {\n            uVar8 = 0xffffffff;\n        }\n        if (uVar7 <= uVar8) break;\n        cVar11 = *pcVar9;\n        uVar5 = uVar13 * uVar7;\n        uVar8 = uVar5 + uVar8;\n        uVar12 = uVar12 | (uVar8 < uVar5 || 0xffffffff / uVar7 < uVar13) << 2 | 8;\n        pcVar9 = pcVar9 + 1;\n        *arg2 = pcVar9;\n        uVar13 = uVar8;\n    }\n    *arg2 = pcVar9 + -1;\n    if ((cVar11 != '\\0') && (pcVar9[-1] != cVar11)) {\n        puVar6 = fcn.14000d3d8();\n        *puVar6 = 0x16;\n        fcn.14000cdc0();\n    }\n    if ((uVar12 & 8) == 0) {\n        *arg2 = pcVar2;\n        if (arg2[1] == NULL) {\n            return 0;\n        }\n        *arg2[1] = pcVar2;\n        return 0;\n    }\n    if ((uVar12 & 4) == 0) {\n        if ((uVar12 & 1) == 0) {\n            if ((uVar12 & 2) == 0) goto code_r0x00014000d8e8;\ncode_r0x00014000d8e5:\n            uVar13 = -uVar13;\n            goto code_r0x00014000d8e8;\n        }\n        if ((uVar12 & 2) == 0) {\n            if (uVar13 < 0x80000000) goto code_r0x00014000d8e8;\n        }\n        else if (uVar13 < 0x80000001) goto code_r0x00014000d8e5;\n        uVar8 = 1;\n        uVar13 = uVar12;\n    }\n    else {\n        uVar13 = 1;\n        uVar8 = uVar12;\n    }\n    *(arg1 + 0x30) = 1;\n    *(arg1 + 0x2c) = 0x22;\n    if ((uVar13 & uVar8) != 0) {\n        ppcVar3 = arg2[1];\n        if ((uVar12 & 2) == 0) {\n            if (ppcVar3 != NULL) {\n                *ppcVar3 = *arg2;\n            }\n            return 0x7fffffff;\n        }\n        if (ppcVar3 != NULL) {\n            *ppcVar3 = *arg2;\n        }\n        return 0x80000000;\n    }\n    uVar13 = 0xffffffff;\ncode_r0x00014000d8e8:\n    if (arg2[1] != NULL) {\n        *arg2[1] = *arg2;\n        return uVar13;\n    }\n    return uVar13;\n}\n",
        "token_count": 1697
    },
    "14000d91": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint32_t fcn.14000d918(int64_t arg1, uint16_t **arg2, ulong arg3)\n\n{\n    uint16_t uVar1;\n    uint16_t *puVar2;\n    uint16_t *puVar3;\n    uint16_t **ppuVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    uint *puVar7;\n    uint64_t uVar8;\n    uint32_t uVar9;\n    uint32_t uVar10;\n    uint16_t uVar11;\n    uint32_t uVar12;\n    uint32_t in_R9D;\n    uint64_t uVar13;\n    int32_t iStack168;\n    \n    puVar2 = *arg2;\n    uVar13 = arg3;\n    if (puVar2 == NULL) {\n        puVar7 = fcn.14000d3d8();\n        *puVar7 = 0x16;\n        fcn.14000cdc0();\ncode_r0x00014000d991:\n        if (arg2[1] != NULL) {\n            *arg2[1] = *arg2;\n        }\n        return 0;\n    }\n    if ((arg3 != 0) && (0x22 < arg3 - 2)) {\n        *(arg1 + 0x30) = 1;\n        *(arg1 + 0x2c) = 0x16;\n        fcn.14000ccf4(0, 0, 0, 0);\n        goto code_r0x00014000d991;\n    }\n    uVar11 = *puVar2;\n    *arg2 = puVar2 + 1;\n    uVar12 = in_R9D & 0xff | 2;\n    if (uVar11 != 0x2d) {\n        uVar12 = in_R9D & 0xff;\n    }\n    if ((uVar11 - 0x2b & 0xfffd) == 0) {\n        uVar11 = puVar2[1];\n        *arg2 = puVar2 + 2;\n    }\n    iStack168 = 0xa66;\n    uVar8 = uVar13;\n    if ((arg3 & 0xffffffef) != 0) goto code_r0x00014000dd4b;\n    if (uVar11 < 0x30) goto code_r0x00014000dcb7;\n    iVar5 = 0x30;\n    if (uVar11 < 0x3a) {\ncode_r0x00014000dafd:\n        iVar5 = uVar11 - iVar5;\ncode_r0x00014000dcb2:\n        if (iVar5 == -1) goto code_r0x00014000dcb7;\ncode_r0x00014000dcd9:\n        if (iVar5 != 0) goto code_r0x00014000dd3c;\n        puVar3 = *arg2;\n        uVar1 = *puVar3;\n        *arg2 = puVar3 + 1;\n        if ((uVar1 - 0x58 & 0xffdf) != 0) {\n            *arg2 = puVar3;\n            uVar8 = 8;\n            if (arg3 != 0) {\n                uVar8 = uVar13;\n            }\n            if ((uVar1 != 0) && (*puVar3 != uVar1)) {\n                puVar7 = fcn.14000d3d8();\n                *puVar7 = 0x16;\n                fcn.14000cdc0();\n            }\n            goto code_r0x00014000dd4b;\n        }\n        uVar11 = puVar3[1];\n        *arg2 = puVar3 + 2;\n        uVar8 = 0x10;\n    }\n    else {\n        if (uVar11 < 0xff10) {\n            if (0x65f < uVar11) {\n                if (uVar11 < 0x66a) {\n                    iVar5 = uVar11 - 0x660;\n                    goto code_r0x00014000dcb2;\n                }\n                if (0x6ef < uVar11) {\n                    if (uVar11 < 0x6fa) {\n                        iVar5 = uVar11 - 0x6f0;\n                        goto code_r0x00014000dcb2;\n                    }\n                    if (0x965 < uVar11) {\n                        if (uVar11 < 0x970) {\n                            iVar5 = uVar11 - 0x966;\n                            goto code_r0x00014000dcb2;\n                        }\n                        if (0x9e5 < uVar11) {\n                            if (uVar11 < 0x9f0) {\n                                iVar5 = uVar11 - 0x9e6;\n                                goto code_r0x00014000dcb2;\n                            }\n                            if ((0xa65 < uVar11) &&\n                               ((iVar5 = iStack168,  uVar11 < 0xa70 ||\n                                ((iVar5 = 0xae6,  0xae5 < uVar11 &&\n                                 ((uVar11 < 0xaf0 ||\n                                  ((iVar5 = 0xb66,  0xb65 < uVar11 &&\n                                   ((uVar11 < 0xb70 ||\n                                    ((iVar5 = 0xc66,  0xc65 < uVar11 &&\n                                     ((uVar11 < 0xc70 ||\n                                      ((iVar5 = 0xce6,  0xce5 < uVar11 &&\n                                       ((uVar11 < 0xcf0 ||\n                                        ((iVar5 = 0xd66,  0xd65 < uVar11 &&\n                                         ((uVar11 < 0xd70 ||\n                                          ((iVar5 = 0xe50,  0xe4f < uVar11 &&\n                                           ((uVar11 < 0xe5a ||\n                                            ((iVar5 = 0xed0,  0xecf < uVar11 &&\n                                             ((uVar11 < 0xeda ||\n                                              ((iVar5 = 0xf20,  0xf1f < uVar11 &&\n                                               ((uVar11 < 0xf2a ||\n                                                ((iVar5 = 0x1040,  0x103f < uVar11 &&\n                                                 ((uVar11 < 0x104a ||\n                                                  ((iVar5 = 0x17e0,  0x17df < uVar11 &&\n                                                   ((uVar11 < 0x17ea || (iVar5 = 0x1810,  uVar11 + 0xe7f0 < 10))))))))))\n                                               )))))))))))))))))))))))))))))))))) goto code_r0x00014000dafd;\n                        }\n                    }\n                }\n            }\n        }\n        else if (uVar11 < 0xff1a) {\n            iVar5 = uVar11 - 0xff10;\n            goto code_r0x00014000dcb2;\n        }\ncode_r0x00014000dcb7:\n        uVar9 = uVar11;\n        if ((uVar11 - 0x41 < 0x1a) || (uVar11 - 0x61 < 0x1a)) {\n            if (uVar11 - 0x61 < 0x1a) {\n                uVar9 = uVar11 - 0x20;\n            }\n            iVar5 = uVar9 - 0x37;\n            goto code_r0x00014000dcd9;\n        }\ncode_r0x00014000dd3c:\n        uVar8 = 10;\n    }\n    if (arg3 != 0) {\n        uVar8 = uVar13;\n    }\ncode_r0x00014000dd4b:\n    uVar9 = 0;\n    do {\n        if (uVar11 < 0x30) goto code_r0x00014000df1a;\n        if (uVar11 < 0x3a) {\n            uVar10 = uVar11 - 0x30;\ncode_r0x00014000df15:\n            if (uVar10 == 0xffffffff) goto code_r0x00014000df1a;\n        }\n        else {\n            if (uVar11 < 0xff10) {\n                if (0x65f < uVar11) {\n                    if (uVar11 < 0x66a) {\n                        uVar10 = uVar11 - 0x660;\n                        goto code_r0x00014000df15;\n                    }\n                    if (0x6ef < uVar11) {\n                        iVar5 = 0x6f0;\n                        if (uVar11 < 0x6fa) {\ncode_r0x00014000ddc3:\n                            uVar10 = uVar11 - iVar5;\n                            goto code_r0x00014000df15;\n                        }\n                        if (0x965 < uVar11) {\n                            iVar5 = 0x966;\n                            if (uVar11 < 0x970) goto code_r0x00014000ddc3;\n                            if (0x9e5 < uVar11) {\n                                iVar5 = 0x9e6;\n                                if (uVar11 < 0x9f0) goto code_r0x00014000ddc3;\n                                if (0xa65 < uVar11) {\n                                    iVar5 = iStack168;\n                                    if (uVar11 < 0xa70) goto code_r0x00014000ddc3;\n                                    iVar5 = 0xae6;\n                                    if (0xae5 < uVar11) {\n                                        if (uVar11 < 0xaf0) goto code_r0x00014000ddc3;\n                                        iVar5 = 0xb66;\n                                        if (0xb65 < uVar11) {\n                                            if (uVar11 < 0xb70) goto code_r0x00014000ddc3;\n                                            iVar5 = 0xc66;\n                                            if (0xc65 < uVar11) {\n                                                if (uVar11 < 0xc70) goto code_r0x00014000ddc3;\n                                                iVar5 = 0xce6;\n                                                if (0xce5 < uVar11) {\n                                                    if (uVar11 < 0xcf0) goto code_r0x00014000ddc3;\n                                                    iVar5 = 0xd66;\n                                                    if (0xd65 < uVar11) {\n                                                        if (uVar11 < 0xd70) goto code_r0x00014000ddc3;\n                                                        iVar5 = 0xe50;\n                                                        if (0xe4f < uVar11) {\n                                                            if (uVar11 < 0xe5a) goto code_r0x00014000ddc3;\n                                                            iVar5 = 0xed0;\n                                                            if (0xecf < uVar11) {\n                                                                if (uVar11 < 0xeda) goto code_r0x00014000ddc3;\n                                                                iVar5 = 0xf20;\n                                                                if (0xf1f < uVar11) {\n                                                                    if (uVar11 < 0xf2a) goto code_r0x00014000ddc3;\n                                                                    iVar5 = 0x1040;\n                                                                    if (0x103f < uVar11) {\n                                                                        if (uVar11 < 0x104a) goto code_r0x00014000ddc3;\n                                                                        iVar5 = 0x17e0;\n                                                                        if (0x17df < uVar11) {\n                                                                            if (uVar11 < 0x17ea)\n                                                                            goto code_r0x00014000ddc3;\n                                                                            if (uVar11 + 0xe7f0 < 10) {\n                                                                                uVar10 = uVar11 - 0x1810;\n                                                                                goto code_r0x00014000df15;\n                                                                            }\n                                                                        }\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            else if (uVar11 < 0xff1a) {\n                uVar10 = uVar11 - 0xff10;\n                goto code_r0x00014000df15;\n            }\ncode_r0x00014000df1a:\n            uVar10 = uVar11;\n            if (((uVar11 < 0x41) || (0x5a < uVar11)) && ((uVar11 < 0x61 || (0x7a < uVar11)))) {\n                uVar10 = 0xffffffff;\n            }\n            else {\n                if (uVar11 - 0x61 < 0x1a) {\n                    uVar10 = uVar11 - 0x20;\n                }\n                uVar10 = uVar10 - 0x37;\n            }\n        }\n        puVar3 = *arg2;\n        if (uVar8 <= uVar10) break;\n        uVar11 = *puVar3;\n        uVar6 = uVar9 * uVar8;\n        uVar10 = uVar6 + uVar10;\n        *arg2 = puVar3 + 1;\n        uVar12 = uVar12 | (uVar10 < uVar6 || 0xffffffff / uVar8 < uVar9) << 2 | 8;\n        uVar9 = uVar10;\n    } while( true );\n    *arg2 = puVar3 + -1;\n    if ((uVar11 != 0) && (puVar3[-1] != uVar11)) {\n        puVar7 = fcn.14000d3d8();\n        *puVar7 = 0x16;\n        fcn.14000cdc0();\n    }\n    if ((uVar12 & 8) == 0) {\n        *arg2 = puVar2;\n        if (arg2[1] == NULL) {\n            return 0;\n        }\n        *arg2[1] = puVar2;\n        return 0;\n    }\n    if ((uVar12 & 4) == 0) {\n        if ((uVar12 & 1) == 0) {\n            if ((uVar12 & 2) == 0) goto code_r0x00014000e060;\ncode_r0x00014000e05d:\n            uVar9 = -uVar9;\n            goto code_r0x00014000e060;\n        }\n        if ((uVar12 & 2) == 0) {\n            if (uVar9 < 0x80000000) goto code_r0x00014000e060;\n        }\n        else if (uVar9 < 0x80000001) goto code_r0x00014000e05d;\n        uVar10 = 1;\n        uVar9 = uVar12;\n    }\n    else {\n        uVar9 = 1;\n        uVar10 = uVar12;\n    }\n    *(arg1 + 0x30) = 1;\n    *(arg1 + 0x2c) = 0x22;\n    if ((uVar9 & uVar10) != 0) {\n        ppuVar4 = arg2[1];\n        if ((uVar12 & 2) == 0) {\n            if (ppuVar4 != NULL) {\n                *ppuVar4 = *arg2;\n            }\n            return 0x7fffffff;\n        }\n        if (ppuVar4 != NULL) {\n            *ppuVar4 = *arg2;\n        }\n        return 0x80000000;\n    }\n    uVar9 = 0xffffffff;\ncode_r0x00014000e060:\n    if (arg2[1] != NULL) {\n        *arg2[1] = *arg2;\n        return uVar9;\n    }\n    return uVar9;\n}\n",
        "token_count": 3462
    },
    "14001178": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nulong fcn.140011784(uint64_t noname_0, uint64_t arg2)\n\n{\n    if ((noname_0 & 4) != 0) {\n        return 1;\n    }\n    if ((noname_0 & 1) != 0) {\n        if ((noname_0 & 2) == 0) {\n            return CONCAT71(0x7fffffffffffff, 0x7fffffffffffffff < arg2);\n        }\n        if (0x8000000000000000 < arg2) {\n            return 1;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 133
    },
    "1400117b": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint64_t fcn.1400117bc(int64_t arg1, uint8_t **arg2, ulong arg3)\n\n{\n    uint8_t uVar1;\n    uint8_t *puVar2;\n    uint8_t *puVar3;\n    uint8_t **ppuVar4;\n    char cVar5;\n    int32_t iVar6;\n    uint *puVar7;\n    uint64_t uVar8;\n    uint64_t uVar9;\n    uint64_t arg2_00;\n    uint32_t uVar10;\n    uint64_t arg1_00;\n    uint64_t in_R9;\n    uint64_t noname_0;\n    \n    puVar2 = *arg2;\n    if (puVar2 == NULL) {\n        puVar7 = fcn.14000d3d8();\n        *puVar7 = 0x16;\n        fcn.14000cdc0();\ncode_r0x000140011831:\n        if (arg2[1] != NULL) {\n            *arg2[1] = *arg2;\n        }\n        return 0;\n    }\n    if ((arg3 != 0) && (0x22 < arg3 - 2)) {\n        *(arg1 + 0x30) = 1;\n        *(arg1 + 0x2c) = 0x16;\n        fcn.14000ccf4(0, 0, 0, 0);\n        goto code_r0x000140011831;\n    }\n    arg1_00 = *puVar2;\n    *arg2 = puVar2 + 1;\n    if (*(arg1 + 0x28) == '\\0') {\n        fcn.140011110(arg1);\n    }\n    while (iVar6 = fcn.140011a98(arg1_00, 8, arg1 + 0x18),  iVar6 != 0) {\n        arg1_00 = **arg2;\n        *arg2 = *arg2 + 1;\n    }\n    noname_0 = in_R9 & 0xff | 2;\n    if (arg1_00 != '-') {\n        noname_0 = in_R9 & 0xff;\n    }\n    if ((arg1_00 - 0x2bU & 0xfd) == 0) {\n        arg1_00 = **arg2;\n        *arg2 = *arg2 + 1;\n    }\n    uVar10 = arg3;\n    if ((arg3 & 0xffffffef) != 0) goto code_r0x000140011943;\n    cVar5 = arg1_00;\n    if (cVar5 - 0x30U < 10) {\n        iVar6 = cVar5 + -0x30;\ncode_r0x0001400118e6:\n        if (iVar6 != 0) goto code_r0x000140011937;\n        puVar3 = *arg2;\n        uVar1 = *puVar3;\n        *arg2 = puVar3 + 1;\n        if ((uVar1 + 0xa8 & 0xdf) != 0) {\n            *arg2 = puVar3;\n            uVar10 = 8;\n            if (arg3 != 0) {\n                uVar10 = arg3;\n            }\n            if ((uVar1 != 0) && (*puVar3 != uVar1)) {\n                puVar7 = fcn.14000d3d8();\n                *puVar7 = 0x16;\n                fcn.14000cdc0();\n            }\n            goto code_r0x000140011943;\n        }\n        arg1_00 = puVar3[1];\n        *arg2 = puVar3 + 2;\n        uVar10 = 0x10;\n    }\n    else {\n        if (cVar5 + 0x9fU < 0x1a) {\n            iVar6 = cVar5 + -0x57;\n            goto code_r0x0001400118e6;\n        }\n        if (cVar5 + 0xbfU < 0x1a) {\n            iVar6 = cVar5 + -0x37;\n            goto code_r0x0001400118e6;\n        }\ncode_r0x000140011937:\n        uVar10 = 10;\n    }\n    if (arg3 != 0) {\n        uVar10 = arg3;\n    }\ncode_r0x000140011943:\n    arg2_00 = 0;\n    while( true ) {\n        uVar1 = arg1_00;\n        if (uVar1 - 0x30 < 10) {\n            uVar9 = uVar1 - 0x30;\n        }\n        else if (uVar1 + 0x9f < 0x1a) {\n            uVar9 = uVar1 - 0x57;\n        }\n        else if (uVar1 + 0xbf < 0x1a) {\n            uVar9 = uVar1 - 0x37;\n        }\n        else {\n            uVar9 = 0xffffffff;\n        }\n        puVar3 = *arg2;\n        if (uVar10 <= uVar9) break;\n        arg1_00 = *puVar3;\n        uVar8 = uVar10 * arg2_00;\n        uVar9 = uVar9 + uVar8;\n        *arg2 = puVar3 + 1;\n        noname_0 = noname_0 |\n                   (uVar9 < uVar8 ||\n                   SUB168((ZEXT816(0) << 0x40 | ZEXT816(0xffffffffffffffff)) / ZEXT816(uVar10), 0) < arg2_00) << 2 | 8;\n        arg2_00 = uVar9;\n    }\n    *arg2 = puVar3 + -1;\n    if ((uVar1 != 0) && (puVar3[-1] != uVar1)) {\n        puVar7 = fcn.14000d3d8();\n        *puVar7 = 0x16;\n        fcn.14000cdc0();\n    }\n    if ((noname_0 & 8) == 0) {\n        *arg2 = puVar2;\n        if (arg2[1] == NULL) {\n            return 0;\n        }\n        *arg2[1] = puVar2;\n        return 0;\n    }\n    cVar5 = fcn.140011784(noname_0, arg2_00);\n    if (cVar5 == '\\0') {\n        if ((noname_0 & 2) != 0) {\n            arg2_00 = -arg2_00;\n        }\n    }\n    else {\n        *(arg1 + 0x30) = 1;\n        *(arg1 + 0x2c) = 0x22;\n        if ((noname_0 & 1) != 0) {\n            ppuVar4 = arg2[1];\n            if ((noname_0 & 2) == 0) {\n                if (ppuVar4 != NULL) {\n                    *ppuVar4 = *arg2;\n                }\n                return 0x7fffffffffffffff;\n            }\n            if (ppuVar4 != NULL) {\n                *ppuVar4 = *arg2;\n            }\n            return 0x8000000000000000;\n        }\n        arg2_00 = 0xffffffffffffffff;\n    }\n    if (arg2[1] != NULL) {\n        *arg2[1] = *arg2;\n        return arg2_00;\n    }\n    return arg2_00;\n}\n",
        "token_count": 1677
    },
    "14001288": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint fcn.140012884(ulong noname_0, uint32_t *arg2, uint32_t **arg3, uint32_t *arg4)\n\n{\n    uint32_t uVar1;\n    uint32_t *arg2_00;\n    uint uVar2;\n    \n    fcn.1400182f0(*arg2);\n    uVar1 = **arg3;\n    arg2_00 = arg3[1];\n    if ((*(*((uVar1 >> 6) * 8 + 0x140037fd0) + 0x38 + (uVar1 & 0x3f) * 0x48) & 1) == 0) {\n        *(arg2_00 + 0xc) = 1;\n        arg2_00[0xb] = 9;\n        uVar2 = 0xffffffff;\n    }\n    else {\n        uVar2 = fcn.140012a58(uVar1, arg2_00);\n    }\n    fcn.1400183d8(*arg4);\n    return uVar2;\n}\n",
        "token_count": 236
    },
    "1400128f": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nulong fcn.1400128fc(ulong arg1, int64_t arg2)\n\n{\n    ulong uVar1;\n    uint32_t auStackX8 [4];\n    uchar auStackX24 [8];\n    uint32_t auStackX32 [2];\n    uint32_t auStack40 [2];\n    uint32_t *puStack32;\n    int64_t iStack24;\n    \n    if (arg1 == 0xfffffffe) {\n        *(arg2 + 0x38) = 1;\n        *(arg2 + 0x34) = 0;\n        *(arg2 + 0x30) = 1;\n        *(arg2 + 0x2c) = 9;\n    }\n    else {\n        auStackX8[0] = arg1;\n        if (((-1 < arg1) && (arg1 < *0x1400383d0)) &&\n           ((*(*((arg1 >> 6) * 8 + 0x140037fd0) + 0x38 + (arg1 & 0x3f) * 0x48) & 1) != 0)) {\n            puStack32 = auStackX8;\n            auStackX32[0] = arg1;\n            auStack40[0] = arg1;\n            iStack24 = arg2;\n            uVar1 = fcn.140012884(auStackX24, auStack40, &puStack32, auStackX32);\n            return uVar1;\n        }\n        *(arg2 + 0x38) = 1;\n        *(arg2 + 0x34) = 0;\n        *(arg2 + 0x30) = 1;\n        *(arg2 + 0x2c) = 9;\n        fcn.14000ccf4(0, 0, 0, 0);\n    }\n    return 0xffffffff;\n}\n",
        "token_count": 416
    },
    "140012b9": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nint64_t * fcn.140012b9c(int64_t *arg1)\n\n{\n    uint32_t *puVar1;\n    int64_t *piVar2;\n    uint32_t uVar3;\n    int64_t iVar4;\n    int64_t *piVar5;\n    \n    piVar5 = *0x140037f98 + 0x18;\n    piVar2 = piVar5 + *0x140037f90 + -3;\n    do {\n        if (piVar5 == piVar2) {\ncode_r0x000140012c6b:\n            *arg1 = 0;\n            return arg1;\n        }\n        iVar4 = *piVar5;\n        if (iVar4 == 0) {\n            iVar4 = fcn.140015d00(1, 0x58);\n            *piVar5 = iVar4;\n            fcn.140012664(0);\n            if (*piVar5 != 0) {\n                *(*piVar5 + 0x18) = 0xffffffff;\n                fcn.140016488(*piVar5 + 0x30, 4000, 0);\n                iVar4 = *piVar5;\n                LOCK();\n                *(iVar4 + 0x14) = *(iVar4 + 0x14) | 0x2000;\n                fcn.14001286c(iVar4);\ncode_r0x000140012c66:\n                *arg1 = iVar4;\n                return arg1;\n            }\n            goto code_r0x000140012c6b;\n        }\n        if ((*(iVar4 + 0x14) >> 0xd & 1) == 0) {\n            fcn.14001286c(iVar4);\n            uVar3 = *(iVar4 + 0x14);\n            while( true ) {\n                LOCK();\n                puVar1 = iVar4 + 0x14;\n                if (uVar3 == *puVar1) break;\n                uVar3 = *puVar1;\n            }\n            *puVar1 = uVar3 | 0x2000;\n            if ((~(uVar3 >> 0xd) & 1) != 0) goto code_r0x000140012c66;\n            fcn.140012878(iVar4);\n        }\n        piVar5 = piVar5 + 1;\n    } while( true );\n}\n",
        "token_count": 521
    },
    "140012c8": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.140012c88(ulong *arg1)\n\n{\n    if (((*(arg1 + 0x14) >> 0xd & 1) != 0) && ((*(arg1 + 0x14) >> 6 & 1) != 0)) {\n        fcn.140012664(arg1[1]);\n        LOCK();\n        *(arg1 + 0x14) = *(arg1 + 0x14) & 0xfffffebf;\n        arg1[1] = 0;\n        *arg1 = 0;\n        *(arg1 + 2) = 0;\n    }\n    return;\n}\n",
        "token_count": 141
    },
    "1400138b": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint fcn.1400138b4(ulong arg1, ulong arg2, ulong arg3, int64_t arg4)\n\n{\n    bool bVar1;\n    uint uVar2;\n    int64_t iVar3;\n    \n    if (arg1 == 0xfffffffe) {\n        *(arg4 + 0x38) = 1;\n        *(arg4 + 0x34) = 0;\n        *(arg4 + 0x30) = 1;\n        *(arg4 + 0x2c) = 9;\n    }\n    else {\n        if ((arg1 < 0) || (*0x1400383d0 <= arg1)) {\n            bVar1 = false;\n        }\n        else {\n            bVar1 = true;\n        }\n        if (bVar1) {\n            iVar3 = arg1 >> 6;\n            if ((*(*(iVar3 * 8 + 0x140037fd0) + 0x38 + (arg1 & 0x3f) * 0x48) & 1) != 0) {\n                fcn.1400182f0(arg1 & 0xffffffff);\n                uVar2 = 0xffffffff;\n                if ((*(*(iVar3 * 8 + 0x140037fd0) + 0x38 + (arg1 & 0x3f) * 0x48) & 1) == 0) {\n                    *(arg4 + 0x30) = 1;\n                    *(arg4 + 0x2c) = 9;\n                    *(arg4 + 0x38) = 1;\n                    *(arg4 + 0x34) = 0;\n                }\n                else {\n                    uVar2 = fcn.1400139d4(arg1, arg2, arg3, arg4);\n                }\n                fcn.1400183d8(arg1);\n                return uVar2;\n            }\n        }\n        *(arg4 + 0x38) = 1;\n        *(arg4 + 0x34) = 0;\n        *(arg4 + 0x30) = 1;\n        *(arg4 + 0x2c) = 9;\n        fcn.14000ccf4(0, 0, 0, 0);\n    }\n    return 0xffffffff;\n}\n",
        "token_count": 507
    },
    "140013dd": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nbool fcn.140013dd4(int64_t *arg1)\n\n{\n    bool bVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    int64_t iStackX8;\n    int64_t aiStackX16 [3];\n    \n    if ((*(arg1 + 0x14) >> 3 & 1) == 0) {\n        if (((((*(arg1 + 0x14) & 0xc0) == 0) || (*arg1 != arg1[1])) &&\n            (iVar3 = fcn.1400185fc(*(arg1 + 3)),  iVar3 != -1)) &&\n           ((iVar2 = (*_sym.imp.KERNEL32.dll_SetFilePointerEx)(iVar3, 0, aiStackX16, 1),  iVar2 != 0 &&\n            (iVar2 = (*_sym.imp.KERNEL32.dll_GetFileSizeEx)(iVar3, &iStackX8),  iVar2 != 0)))) {\n            return aiStackX16[0] == iStackX8;\n        }\n        bVar1 = false;\n    }\n    else {\n        bVar1 = true;\n    }\n    return bVar1;\n}\n",
        "token_count": 261
    },
    "140013e5": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint64_t fcn.140013e50(ulong arg1, ulong *arg2, int64_t arg3)\n\n{\n    char cVar1;\n    ulong *puVar2;\n    \n    puVar2 = arg2;\n    fcn.1400126a0(arg2);\n    if ((*(arg2 + 0x14) & 6) == 0) {\n        *(arg3 + 0x2c) = 9;\n    }\n    else {\n        if ((*(arg2 + 0x14) >> 0xc & 1) == 0) {\n            if ((*(arg2 + 0x14) & 1) != 0) {\n                puVar2 = arg2;\n                cVar1 = fcn.140013dd4(arg2);\n                *(arg2 + 2) = 0;\n                if (cVar1 == '\\0') goto code_r0x000140013e82;\n                *arg2 = arg2[1];\n                LOCK();\n                *(arg2 + 0x14) = *(arg2 + 0x14) & 0xfffffffe;\n            }\n            LOCK();\n            *(arg2 + 0x14) = *(arg2 + 0x14) | 2;\n            LOCK();\n            *(arg2 + 0x14) = *(arg2 + 0x14) & 0xfffffff7;\n            *(arg2 + 2) = 0;\n            if (((*(arg2 + 0x14) & 0x4c0) == 0) && (puVar2 = arg2,  cVar1 = fcn.140013f1c(arg2),  cVar1 == '\\0')) {\n                puVar2 = arg2;\n                fcn.1400196dc(arg2);\n            }\n            cVar1 = fcn.140013cdc(puVar2 & 0xffffffffffffff00 | arg1, arg2, arg3);\n            if (cVar1 != '\\0') {\n                return arg1;\n            }\n            goto code_r0x000140013e82;\n        }\n        *(arg3 + 0x2c) = 0x22;\n    }\n    *(arg3 + 0x30) = 1;\ncode_r0x000140013e82:\n    LOCK();\n    *(arg2 + 0x14) = *(arg2 + 0x14) | 0x10;\n    return 0xffffffff;\n}\n",
        "token_count": 536
    },
    "14001403": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.140014030(ulong noname_0, ulong *arg2, ulong arg3)\n\n{\n    if ((noname_0 != '\\0') && ((*(arg2 + 0x14) >> 9 & 1) != 0)) {\n        fcn.140012eac(arg2, arg3);\n        LOCK();\n        *(arg2 + 0x14) = *(arg2 + 0x14) & 0xfffffd7f;\n        *(arg2 + 4) = 0;\n        arg2[1] = 0;\n        *arg2 = 0;\n    }\n    return;\n}\n",
        "token_count": 140
    },
    "14001809": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0"
        ],
        "decompiled_code": "\nint32_t fcn.14001809c(void)\n\n{\n    int64_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int64_t iVar4;\n    int32_t iStack24;\n    \n    iStack24 = 0;\n    fcn.1400161d8(8);\n    for (iVar3 = 3; iVar3 != *0x140037f90; iVar3 = iVar3 + 1) {\n        iVar4 = iVar3;\n        iVar1 = *(*0x140037f98 + iVar4 * 8);\n        if (iVar1 != 0) {\n            if (((*(iVar1 + 0x14) >> 0xd & 1) != 0) &&\n               (iVar2 = fcn.14000c9a4(*(*0x140037f98 + iVar4 * 8)),  iVar2 != -1)) {\n                iStack24 = iStack24 + 1;\n            }\n            (*_sym.imp.KERNEL32.dll_DeleteCriticalSection)(*(*0x140037f98 + iVar4 * 8) + 0x30);\n            fcn.140012664(*(*0x140037f98 + iVar4 * 8));\n            *(*0x140037f98 + iVar4 * 8) = 0;\n        }\n    }\n    fcn.140016238(8);\n    return iStack24;\n}\n",
        "token_count": 306
    },
    "1400188d": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nulong fcn.1400188d4(ulong arg1, ulong arg2, ulong arg3, int64_t arg4)\n\n{\n    bool bVar1;\n    ulong uVar2;\n    int64_t iVar3;\n    \n    if (arg1 == 0xfffffffe) {\n        *(arg4 + 0x38) = 1;\n        *(arg4 + 0x34) = 0;\n        *(arg4 + 0x30) = 1;\n        *(arg4 + 0x2c) = 9;\n    }\n    else {\n        if ((arg1 < 0) || (*0x1400383d0 <= arg1)) {\n            bVar1 = false;\n        }\n        else {\n            bVar1 = true;\n        }\n        if (bVar1) {\n            iVar3 = arg1 >> 6;\n            if ((*(*(iVar3 * 8 + 0x140037fd0) + 0x38 + (arg1 & 0x3f) * 0x48) & 1) != 0) {\n                fcn.1400182f0(arg1 & 0xffffffff);\n                uVar2 = 0xffffffffffffffff;\n                if ((*(*(iVar3 * 8 + 0x140037fd0) + 0x38 + (arg1 & 0x3f) * 0x48) & 1) == 0) {\n                    *(arg4 + 0x30) = 1;\n                    *(arg4 + 0x2c) = 9;\n                    *(arg4 + 0x38) = 1;\n                    *(arg4 + 0x34) = 0;\n                }\n                else {\n                    uVar2 = fcn.1400189f4(arg1, arg2, arg3, arg4);\n                }\n                fcn.1400183d8(arg1);\n                return uVar2;\n            }\n        }\n        *(arg4 + 0x38) = 1;\n        *(arg4 + 0x34) = 0;\n        *(arg4 + 0x30) = 1;\n        *(arg4 + 0x2c) = 9;\n        fcn.14000ccf4(0, 0, 0, 0);\n    }\n    return 0xffffffffffffffff;\n}\n",
        "token_count": 509
    },
    "14001c85": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0"
        ],
        "decompiled_code": "\nuint32_t fcn.14001c85c(void)\n\n{\n    int64_t in_GS_OFFSET;\n    \n    return *(*(*(in_GS_OFFSET + 0x30) + 0x60) + 0xbc) >> 8 & 0xffffff01;\n}\n",
        "token_count": 60
    },
    "14001d7c": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0"
        ],
        "decompiled_code": "\nuint32_t fcn.14001d7cc(void)\n\n{\n    uint32_t uVar1;\n    uint32_t in_MXCSR;\n    \n    uVar1 = (((in_MXCSR & 0x3f) >> 2 & 8 | in_MXCSR & 0x10) >> 2 | in_MXCSR & 8) >> 1 |\n            ((in_MXCSR & 2) << 3 | in_MXCSR & 4) * 2 | (in_MXCSR & 1) << 4;\n    return uVar1 << 0x18 | uVar1;\n}\n",
        "token_count": 138
    },
    "14001d95": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0"
        ],
        "decompiled_code": "\nvoid fcn.14001d95c(ulong arg1)\n\n{\n    return;\n}\n",
        "token_count": 20
    },
    "14001dac": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0"
        ],
        "decompiled_code": "\nuint32_t fcn.14001dacc(void)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    \n    uVar1 = fcn.14001e260();\n    fcn.14001e27a();\n    uVar4 = 0;\n    if ((uVar1 & 0x3f) != 0) {\n        uVar2 = (uVar1 & 1) << 4;\n        uVar4 = uVar2 | 8;\n        if ((uVar1 & 4) == 0) {\n            uVar4 = uVar2;\n        }\n        uVar2 = uVar4 | 4;\n        if ((uVar1 & 8) == 0) {\n            uVar2 = uVar4;\n        }\n        uVar3 = uVar2 | 2;\n        if ((uVar1 & 0x10) == 0) {\n            uVar3 = uVar2;\n        }\n        uVar4 = uVar3 | 1;\n        if ((uVar1 & 0x20) == 0) {\n            uVar4 = uVar3;\n        }\n        if ((uVar1 & 2) != 0) {\n            uVar4 = uVar4 | 0x80000;\n        }\n    }\n    return uVar4;\n}\n",
        "token_count": 310
    },
    "1400217c": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint64_t fcn.1400217c4(int64_t arg1, int64_t **arg2, int32_t *arg3, uint8_t *arg4)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    int64_t *piVar3;\n    int64_t *piVar4;\n    ulong uVar5;\n    int64_t iVar6;\n    uint64_t uVar7;\n    int64_t *piVar8;\n    int64_t *piVar9;\n    int32_t iVar10;\n    int32_t *piVar11;\n    uint8_t *puVar12;\n    int32_t iVar13;\n    \n    piVar9 = NULL;\n    piVar4 = piVar9;\n    piVar11 = arg3;\n    puVar12 = arg4;\n    piVar3 = piVar9;\n    if (arg3[1] != 0) {\n        iVar13 = arg3[1];\n        iVar2 = fcn.140020110();\n        piVar4 = iVar13 + iVar2;\n        piVar3 = iVar13;\n    }\n    if (piVar4 == NULL) {\n        return 0;\n    }\n    piVar8 = piVar9;\n    if (piVar3 != 0) {\n        iVar2 = fcn.140020110();\n        piVar8 = iVar2 + arg3[1];\n    }\n    if (*(piVar8 + 2) == '\\0') {\n        return 0;\n    }\n    if ((arg3[2] == 0) && (-1 < *arg3)) {\n        return 0;\n    }\n    if (-1 < *arg3) {\n        arg2 = arg3[2] + *arg2;\n    }\n    if ((((*arg3 & 0x80) == 0) || ((*arg4 & 0x10) == 0)) || (*0x140038e70 == 0)) {\n        if ((*arg3 & 8) != 0) {\n            piVar3 = *(arg1 + 0x28);\n            if ((piVar3 != NULL) && (arg2 != NULL)) {\n                *arg2 = piVar3;\n                goto code_r0x0001400218ed;\n            }\n            goto code_r0x0001400219b1;\n        }\n        if ((*arg4 & 1) != 0) {\n            piVar4 = *(arg1 + 0x28);\n            if ((piVar4 != NULL) && (arg2 != NULL)) {\n                fcn.140020a40(arg2, piVar4, *(arg4 + 0x14));\n                if (*(arg4 + 0x14) != 8) {\n                    return 0;\n                }\n                if (*arg2 == NULL) {\n                    return 0;\n                }\n                piVar3 = *arg2;\n                goto code_r0x0001400218ed;\n            }\n            goto code_r0x0001400219b6;\n        }\n        piVar8 = piVar9;\n        piVar3 = piVar9;\n        if (*(arg4 + 0x18) != 0) {\n            iVar13 = *(arg4 + 0x18);\n            iVar2 = fcn.140020124();\n            piVar8 = iVar13 + iVar2;\n            piVar3 = iVar13;\n        }\n        if (piVar8 == NULL) {\n            if ((*(arg1 + 0x28) != 0) && (arg2 != NULL)) {\n                iVar13 = *(arg4 + 0x14);\n                uVar5 = fcn.14002036c(*(arg1 + 0x28), arg4 + 8);\n                fcn.140020a40(arg2, uVar5, iVar13);\n                return 0;\n            }\n            goto code_r0x0001400219bb;\n        }\n        if ((*(arg1 + 0x28) != 0) && (arg2 != NULL)) {\n            if (piVar3 != 0) {\n                iVar2 = fcn.140020124();\n                piVar9 = iVar2 + *(arg4 + 0x18);\n            }\n            piVar8 = piVar9;\n            if (piVar9 != NULL) {\n                return ((*arg4 & 4) != 0) + 1;\n            }\n        }\n    }\n    else {\n        piVar3 = (**0x140029a28)();\n        if ((piVar3 != NULL) && (arg2 != NULL)) {\n            *arg2 = piVar3;\ncode_r0x0001400218ed:\n            piVar4 = fcn.14002036c(piVar3, arg4 + 8);\n            *arg2 = piVar4;\n            return 0;\n        }\n        fcn.14001260c();\n        piVar3 = piVar8;\ncode_r0x0001400219b1:\n        fcn.14001260c();\n        piVar8 = piVar3;\ncode_r0x0001400219b6:\n        fcn.14001260c();\ncode_r0x0001400219bb:\n        fcn.14001260c();\n    }\n    fcn.14001260c();\n    fcn.14001260c();\n    iVar6 = 0;\n    iVar10 = 0;\n    iVar2 = iVar6;\n    iVar13 = iVar10;\n    if (piVar11[2] != 0) {\n        iVar13 = piVar11[2];\n        iVar2 = fcn.140020110();\n        iVar2 = iVar13 + iVar2;\n    }\n    if (iVar2 == 0) {\n        return 0;\n    }\n    iVar2 = iVar6;\n    if (iVar13 != 0) {\n        iVar2 = fcn.140020110();\n        iVar2 = iVar2 + piVar11[2];\n    }\n    if (*(iVar2 + 0x10) == '\\0') {\n        return 0;\n    }\n    if ((piVar11[3] == 0) && (-1 < piVar11[1])) {\n        return 0;\n    }\n    if (-1 < piVar11[1]) {\n        piVar4 = piVar11[3] + *piVar4;\n    }\n    if ((((*(piVar11 + 1) & 0x80) == 0) || ((*puVar12 & 0x10) == 0)) || (*0x140038e70 == 0)) {\n        if ((*(piVar11 + 1) & 8) != 0) {\n            iVar2 = piVar8[5];\n            if ((iVar2 != 0) && (piVar4 != NULL)) {\n                *piVar4 = iVar2;\n                goto code_r0x000140021af8;\n            }\n            goto code_r0x000140021bbc;\n        }\n        if ((*puVar12 & 1) != 0) {\n            if ((piVar8[5] != 0) && (piVar4 != NULL)) {\n                fcn.140020a40(piVar4, piVar8[5], *(puVar12 + 0x14));\n                if (*(puVar12 + 0x14) != 8) {\n                    return 0;\n                }\n                if (*piVar4 == 0) {\n                    return 0;\n                }\n                iVar2 = *piVar4;\n                goto code_r0x000140021af8;\n            }\n            goto code_r0x000140021bc1;\n        }\n        iVar2 = iVar6;\n        if (*(puVar12 + 0x18) != 0) {\n            iVar10 = *(puVar12 + 0x18);\n            iVar2 = fcn.140020124();\n            iVar2 = iVar10 + iVar2;\n        }\n        if (iVar2 != 0) {\n            if ((piVar8[5] != 0) && (piVar4 != NULL)) {\n                if (iVar10 != 0) {\n                    iVar6 = fcn.140020124();\n                    iVar6 = iVar6 + *(puVar12 + 0x18);\n                }\n                if (iVar6 != 0) {\n                    return ((*puVar12 & 4) != 0) + 1;\n                }\n            }\n            goto code_r0x000140021bcb;\n        }\n        if ((piVar8[5] != 0) && (piVar4 != NULL)) {\n            iVar13 = *(puVar12 + 0x14);\n            uVar5 = fcn.14002036c(piVar8[5], puVar12 + 8);\n            fcn.140020a40(piVar4, uVar5, iVar13);\n            return 0;\n        }\n    }\n    else {\n        iVar2 = (**0x140029a28)();\n        if ((iVar2 != 0) && (piVar4 != NULL)) {\n            *piVar4 = iVar2;\ncode_r0x000140021af8:\n            iVar2 = fcn.14002036c(iVar2, puVar12 + 8);\n            *piVar4 = iVar2;\n            return 0;\n        }\n        fcn.14001260c();\ncode_r0x000140021bbc:\n        fcn.14001260c();\ncode_r0x000140021bc1:\n        fcn.14001260c();\n    }\n    fcn.14001260c();\ncode_r0x000140021bcb:\n    fcn.14001260c();\n    fcn.14001260c();\n    pcVar1 = swi(3);\n    uVar7 = (*pcVar1)();\n    return uVar7;\n}\n",
        "token_count": 2112
    },
    "140023bb": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid fcn.140023bb0(int64_t arg1)\n\n{\n    int32_t *piVar1;\n    uint8_t uVar2;\n    uint8_t uVar3;\n    uint uVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    uint64_t uVar7;\n    uint *puVar8;\n    int64_t iVar9;\n    uint8_t *puVar10;\n    \n    *(arg1 + 0x18) = 0;\n    *(arg1 + 0x1c) = 0;\n    *(arg1 + 0x24) = 0;\n    *(arg1 + 0x30) = ZEXT816(0);\n    uVar2 = **(arg1 + 8);\n    puVar8 = *(arg1 + 8) + 1;\n    *(arg1 + 0x18) = uVar2;\n    *(arg1 + 8) = puVar8;\n    if ((uVar2 & 1) != 0) {\n        uVar3 = *puVar8;\n        puVar8 = puVar8 - *((uVar3 & 0xf) + 0x14002f0c8);\n        *(arg1 + 0x1c) = puVar8[-1] >> (*((uVar3 & 0xf) + 0x14002f0d8) & 0x1f);\n        *(arg1 + 8) = puVar8;\n    }\n    if ((uVar2 & 2) != 0) {\n        uVar4 = *puVar8;\n        puVar8 = puVar8 + 1;\n        *(arg1 + 8) = puVar8;\n        *(arg1 + 0x20) = uVar4;\n    }\n    if ((uVar2 & 4) != 0) {\n        uVar3 = *puVar8;\n        puVar8 = puVar8 - *((uVar3 & 0xf) + 0x14002f0c8);\n        *(arg1 + 0x24) = puVar8[-1] >> (*((uVar3 & 0xf) + 0x14002f0d8) & 0x1f);\n        *(arg1 + 8) = puVar8;\n    }\n    piVar1 = puVar8 + 1;\n    *(arg1 + 0x28) = *puVar8;\n    *(arg1 + 8) = piVar1;\n    if ((uVar2 & 8) == 0) {\n        if ((uVar2 & 0x30) == 0x10) {\n            uVar2 = *((*piVar1 & 0xf) + 0x14002f0d8);\n            iVar9 = piVar1 - *((*piVar1 & 0xf) + 0x14002f0c8);\n            uVar6 = *(iVar9 + -4);\n            *(arg1 + 8) = iVar9;\n            *(arg1 + 0x30) = *(arg1 + 0x48) + (uVar6 >> (uVar2 & 0x1f));\n            return;\n        }\n        if ((uVar2 & 0x30) != 0x20) {\n            return;\n        }\n        uVar2 = *((*piVar1 & 0xf) + 0x14002f0d8);\n        puVar10 = piVar1 - *((*piVar1 & 0xf) + 0x14002f0c8);\n        uVar6 = *(puVar10 + -4);\n        *(arg1 + 8) = puVar10;\n        *(arg1 + 0x30) = *(arg1 + 0x48) + (uVar6 >> (uVar2 & 0x1f));\n        uVar2 = *((*puVar10 & 0xf) + 0x14002f0d8);\n        iVar9 = puVar10 - *((*puVar10 & 0xf) + 0x14002f0c8);\n        uVar6 = *(iVar9 + -4);\n        *(arg1 + 8) = iVar9;\n        uVar7 = *(arg1 + 0x48) + (uVar6 >> (uVar2 & 0x1f));\n    }\n    else {\n        if ((uVar2 & 0x30) == 0x10) {\n            iVar5 = *piVar1;\n            *(arg1 + 8) = puVar8 + 2;\n            *(arg1 + 0x30) = iVar5;\n            return;\n        }\n        if ((uVar2 & 0x30) != 0x20) {\n            return;\n        }\n        iVar5 = *piVar1;\n        *(arg1 + 8) = puVar8 + 2;\n        *(arg1 + 0x30) = iVar5;\n        uVar7 = puVar8[2];\n        *(arg1 + 8) = puVar8 + 3;\n    }\n    *(arg1 + 0x38) = uVar7;\n    return;\n}\n",
        "token_count": 1135
    },
    "140005e5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\ncode ** fcn.140005e54(code **arg1)\n\n{\n    char *pcStack24;\n    uchar uStack16;\n    \n    uStack16 = 1;\n    *arg1 = vtable.std::exception.0;\n    pcStack24 = \"vector too long\";\n    *(arg1 + 1) = ZEXT816(0);\n    fcn.14002042c(&pcStack24, arg1 + 1);\n    *arg1 = vtable.std::length_error.0;\n    return arg1;\n}\n",
        "token_count": 115
    },
    "140005f3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nulong * fcn.140005f38(ulong *arg1, ulong arg2)\n\n{\n    ulong uVar1;\n    code *pcVar2;\n    uint32_t uVar3;\n    uint64_t uVar4;\n    ulong *puVar5;\n    ulong in_R9;\n    uint uVar6;\n    \n    uVar4 = (**0x140029a28)(arg2);\n    if (uVar4 < 0xffffffff) {\n        uVar3 = (**0x140029a28)(arg2);\n        fcn.140006018(arg1, uVar3);\n        uVar6 = 1;\n        uVar1 = *arg1;\n        (**0x140029a28)(arg2, 0);\n        (**0x140029a28)(arg2, uVar1, uVar3, in_R9, uVar6);\n        return arg1;\n    }\n    fcn.140009514(0x80070032);\n    pcVar2 = swi(3);\n    puVar5 = (*pcVar2)();\n    return puVar5;\n}\n",
        "token_count": 236
    },
    "1400076a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.1400076a0(int64_t arg1, int64_t arg2, uint64_t arg3)\n\n{\n    int64_t *piVar1;\n    ulong arg4;\n    uint64_t uVar2;\n    uint32_t uVar3;\n    uint64_t arg3_00;\n    uint32_t uVar4;\n    ulong in_R9;\n    uint32_t uVar5;\n    \n    uVar5 = *(arg1 + 0x28);\n    piVar1 = arg1 + 0x10;\n    arg3_00 = 0;\n    uVar4 = arg3;\n    if (uVar5 != 0) {\n        uVar3 = (*(arg1 + 0x18) - *piVar1) - uVar5;\n        arg3_00 = uVar3;\n        if (uVar4 < uVar3) {\n            arg3_00 = arg3 & 0xffffffff;\n        }\n        arg3 = arg3_00;\n        fcn.140020a40(uVar5 + *piVar1, arg2, arg3_00);\n        *(arg1 + 0x28) = *(arg1 + 0x28) + arg3_00;\n        if (*(arg1 + 0x18) - *(arg1 + 0x28) != *piVar1) {\n            return;\n        }\n        fcn.140007810(arg1);\n    }\n    uVar4 = uVar4 - arg3_00;\n    uVar2 = *(arg1 + 0x18) - *piVar1;\n    if (uVar2 <= uVar4) {\n        uVar5 = (uVar4 / uVar2) * (*(arg1 + 0x18) - *piVar1);\n        if ((*0x140037208 != 0x140037208) && ((*(*0x140037208 + 0x1c) & 8) != 0)) {\n            fcn.14000747c(arg3_00 + arg2, uVar5, arg3, in_R9);\n            arg4 = (**0x140029a28)();\n            fcn.1400074cc(*(*0x140037208 + 0x10), 0xb, 0x14002f808, arg4);\n        }\n        (**0x140029a28)();\n        arg3_00 = arg3_00 + uVar5;\n        uVar4 = uVar4 - uVar5;\n    }\n    if (uVar4 != 0) {\n        fcn.140020a40(*piVar1, arg3_00 + arg2, uVar4);\n        *(arg1 + 0x28) = uVar4;\n    }\n    return;\n}\n",
        "token_count": 602
    },
    "14000781": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.140007810(int64_t arg1)\n\n{\n    ulong uVar1;\n    ulong uVar2;\n    ulong in_R8;\n    ulong in_R9;\n    \n    if (*(arg1 + 0x28) != 0) {\n        if ((*0x140037208 != 0x140037208) && ((*(*0x140037208 + 0x1c) & 8) != 0)) {\n            fcn.14000747c(*(arg1 + 0x10), *(arg1 + 0x28), in_R8, in_R9);\n            uVar1 = (**0x140029a28)();\n            fcn.1400074cc(*(*0x140037208 + 0x10), 0xc, 0x14002f808, uVar1);\n        }\n        (**0x140029a28)(*(arg1 + 8) + 8, *(arg1 + 0x10), *(arg1 + 0x28));\n        *(arg1 + 0x28) = 0;\n    }\n    uVar1 = *(arg1 + 8);\n    uVar2 = (**0x140029a28)(uVar1);\n    // WARNING: Could not recover jumptable at 0x000140007904. Too many branches\n    // WARNING: Treating indirect jump as call\n    // switch table (2 cases) at 0x140029a28\n    (**0x140029a28)(uVar1, uVar2);\n    return;\n}\n",
        "token_count": 337
    },
    "14000920": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint32_t fcn.140009204(int64_t *arg1, ulong hModule, uint64_t lpProcName)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    uint64_t arg2;\n    uint64_t noname_2;\n    \n    arg2 = lpProcName;\n    noname_2 = lpProcName;\n    iVar2 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(hModule);\n    *arg1 = iVar2;\n    if (iVar2 == 0) {\n        iVar1 = fcn.14000a4bc();\n        if (iVar1 == -0x7ff8ff81) {\n            return -0x7ff8ff81;\n        }\n        if (lpProcName < 0x10000) {\n            if ((*0x140037208 != 0x140037208) && ((*(*0x140037208 + 0x1c) & 2) != 0)) {\n                fcn.140008d9c(*(*0x140037208 + 0x10), 0x1c, noname_2, lpProcName & 0xffffffff);\n            }\n        }\n        else if ((*0x140037208 != 0x140037208) && ((*(*0x140037208 + 0x1c) & 2) != 0)) {\n            fcn.140008fd0(*(*0x140037208 + 0x10), arg2, noname_2, lpProcName);\n        }\n        if (iVar1 < 0) {\n            return iVar1;\n        }\n    }\n    return 0;\n}\n",
        "token_count": 356
    },
    "14000939": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nuint fcn.140009394(int64_t *arg1, ulong dwProcessId, ulong dwDesiredAccess)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    ulong noname_1;\n    uint64_t noname_2;\n    \n    noname_2 = dwProcessId;\n    noname_1 = 0;\n    iVar2 = (*_sym.imp.KERNEL32.dll_OpenProcess)(dwDesiredAccess);\n    *arg1 = iVar2;\n    uVar1 = 0;\n    if (iVar2 == 0) {\n        uVar1 = fcn.14000a4bc();\n    }\n    if ((*0x140037208 != 0x140037208) && ((*(*0x140037208 + 0x1c) & 4) != 0)) {\n        fcn.140008f88(*(*0x140037208 + 0x10), noname_1, noname_2, dwProcessId);\n    }\n    return uVar1;\n}\n",
        "token_count": 222
    },
    "14000966": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint32_t fcn.14000966c(ushort *arg1, uint64_t arg2, uint64_t *arg3, ulong arg4)\n\n{\n    uint64_t arg3_00;\n    int32_t iVar1;\n    int32_t iVar2;\n    uint64_t *puVar3;\n    int32_t iVar4;\n    \n    iVar2 = 0;\n    if (arg2 - 1 < 0x7fffffff) {\n        arg3_00 = arg2 - 1;\n        puVar3 = fcn.140001e4c();\n        iVar1 = fcn.140011528(*puVar3 | 1, arg1, arg3_00, arg4);\n        if (iVar1 < 0) {\n            iVar1 = -1;\n        }\n        if ((iVar1 < 0) || (arg3_00 < iVar1)) {\n            iVar4 = -0x7ff8ff86;\n        }\n        else {\n            iVar4 = iVar2;\n            if (iVar1 != arg3_00) goto code_r0x00014000970e;\n        }\n        arg1[arg3_00] = 0;\n    }\n    else {\n        iVar4 = -0x7ff8ffa9;\n        if (arg2 != 0) {\n            *arg1 = 0;\n            *arg3 = 0;\n            return -0x7ff8ffa9;\n        }\n    }\ncode_r0x00014000970e:\n    *arg3 = 0;\n    if ((iVar4 < 0) && (iVar2 = iVar4,  iVar4 == -0x7ff8ff86)) {\n        puVar3 = fcn.140001e4c();\n        iVar2 = fcn.140011528(*puVar3 | 2, 0, 0, arg4);\n        if (iVar2 < 0) {\n            iVar2 = -1;\n        }\n        if ((iVar2 < 0) || (iVar2 + 1U <= arg2)) {\n            iVar2 = -0x7fffbffb;\n        }\n        else {\n            *arg3 = iVar2 + 1U;\n            iVar2 = -0x7ff8ff86;\n        }\n    }\n    return iVar2;\n}\n",
        "token_count": 495
    },
    "14000978": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint32_t fcn.140009788(int64_t *arg1, ulong arg2, ulong arg3)\n\n{\n    int32_t iVar1;\n    int64_t iStackX8;\n    ulong uStackX32;\n    \n    *arg1 = 0;\n    iStackX8 = 0;\n    uStackX32 = 0;\n    iVar1 = fcn.140009858(&uStackX32, &iStackX8, arg2, arg3);\n    if (iVar1 < 0) {\n        if (iStackX8 != 0) {\n            fcn.14001ea10(iStackX8);\n        }\n    }\n    else {\n        *arg1 = iStackX8;\n        iVar1 = 0;\n    }\n    return iVar1;\n}\n",
        "token_count": 171
    },
    "14000980": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nulong * fcn.14000980c(ulong *arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    ulong *puVar3;\n    ulong uStackX24;\n    ulong uStackX32;\n    ulong uStack16;\n    \n    uStack16 = 0;\n    uStackX24 = arg3;\n    uStackX32 = arg4;\n    uVar2 = fcn.140009788(&uStack16, arg2, &uStackX24);\n    if (-1 < uVar2) {\n        *arg1 = uStack16;\n        return arg1;\n    }\n    fcn.140009514(uVar2);\n    pcVar1 = swi(3);\n    puVar3 = (*pcVar1)();\n    return puVar3;\n}\n",
        "token_count": 187
    },
    "14000a6e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint32_t fcn.14000a6e8(ulong noname_0, ulong arg2, int64_t arg3)\n\n{\n    int64_t arg1;\n    int32_t iVar1;\n    int64_t aiStack24 [2];\n    \n    aiStack24[0] = 0;\n    iVar1 = fcn.14000a618(noname_0, aiStack24);\n    arg1 = aiStack24[0];\n    if (-1 < iVar1) {\n        if (arg3 == 0) {\n            iVar1 = fcn.14000abf4(arg2, aiStack24[0]);\n        }\n        else {\n            iVar1 = fcn.1400097e8(arg2, L\"%ls\\\\%ls\", aiStack24[0], arg3);\n        }\n    }\n    if (arg1 != 0) {\n        fcn.14001ea10(arg1);\n    }\n    return iVar1;\n}\n",
        "token_count": 206
    },
    "14000ac5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nulong * fcn.14000ac54(ulong *arg1)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    ulong *puVar3;\n    ulong in_RDX;\n    ulong auStackX24 [2];\n    \n    auStackX24[0] = 0;\n    uVar2 = fcn.14000abf4(auStackX24, in_RDX);\n    if (-1 < uVar2) {\n        *arg1 = auStackX24[0];\n        return arg1;\n    }\n    fcn.140009514(uVar2);\n    pcVar1 = swi(3);\n    puVar3 = (*pcVar1)();\n    return puVar3;\n}\n",
        "token_count": 157
    },
    "14000ccf": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.14000ccf4(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    uint64_t *puVar3;\n    uint8_t uVar4;\n    ulong in_stack_00000028;\n    ulong in_stack_00000030;\n    \n    iVar2 = fcn.14000ca3c(in_stack_00000030);\n    if (((iVar2 == 0) || (*(iVar2 + 0x3b8) == 0)) &&\n       (puVar3 = fcn.14000caa8(0x140037f78, in_stack_00000030),  uVar4 = *0x140037f00 & 0x3f, \n       ((*puVar3 ^ *0x140037f00) >> uVar4 | (*puVar3 ^ *0x140037f00) << 0x40 - uVar4) == 0)) {\n        fcn.14000ce10(arg1, arg2, arg3, arg4, in_stack_00000028);\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    (**0x140029a28)(arg1, arg2, arg3, arg4, in_stack_00000028);\n    return;\n}\n",
        "token_count": 298
    },
    "14000cf3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nulong fcn.14000cf30(ulong *arg1)\n\n{\n    ulong arg3;\n    ulong arg1_00;\n    uint8_t uVar1;\n    ulong uVar2;\n    uint64_t arg1_01;\n    \n    arg3 = arg1[1];\n    arg1_00 = **arg1;\n    uVar1 = fcn.140013f68(arg1_00);\n    arg1_01 = *arg1[2];\n    uVar2 = fcn.14000d04c(arg1_01, *arg1[3], *arg1[4], **arg1);\n    fcn.140014030(arg1_01 & 0xffffffffffffff00 | uVar1, arg1_00, arg3);\n    return uVar2;\n}\n",
        "token_count": 171
    },
    "14000d4c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint64_t fcn.14000d4c4(int16_t *arg1, int16_t *arg2)\n\n{\n    uint *puVar1;\n    int64_t iVar2;\n    int64_t iStackX8;\n    \n    if (((arg1 == NULL) || (arg2 == NULL)) || (*arg2 == 0)) {\n        puVar1 = fcn.14000d3d8();\n        *puVar1 = 0x16;\n        fcn.14000cdc0();\n    }\n    else if (*arg1 == 0) {\n        puVar1 = fcn.14000d3d8();\n        *puVar1 = 0x16;\n    }\n    else {\n        fcn.140012b28(&iStackX8);\n        if (iStackX8 != 0) {\n            iVar2 = fcn.140014374(arg1, arg2, 0x40, iStackX8);\n            if (iVar2 == 0) {\n                fcn.140012b80(iStackX8);\n            }\n            fcn.140012878(iStackX8);\n            return iVar2;\n        }\n        puVar1 = fcn.14000d3d8();\n        *puVar1 = 0x18;\n    }\n    return 0;\n}\n",
        "token_count": 285
    },
    "14000f44": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nuint64_t fcn.14000f440(int64_t arg1, uint *arg2)\n\n{\n    int64_t arg1_00;\n    ulong uVar1;\n    uint uVar2;\n    uint64_t uVar3;\n    uint8_t uVar4;\n    uint64_t uStackX8;\n    uint64_t uStack24;\n    uint64_t *puStack16;\n    \n    arg1_00 = *(arg1 + 8);\n    puStack16 = &uStackX8;\n    uStackX8 = *(arg1 + 0x10) - 1;\n    uVar1 = *(arg1_00 + 0x2c);\n    uStack24 = uStackX8;\n    uVar2 = fcn.14000d664(arg1_00, &uStack24, 10);\n    *arg2 = uVar2;\n    uVar3 = *(arg1 + 8);\n    if (((*(uVar3 + 0x30) == '\\0') || (uVar4 = 0,  *(uVar3 + 0x2c) != 0x22)) &&\n       (uVar3 = uStackX8,  uVar4 = 0,  *(arg1 + 0x10) <= uStackX8)) {\n        *(arg1 + 0x10) = uStackX8;\n        uVar4 = 1;\n    }\n    *(arg1_00 + 0x2c) = uVar1;\n    return uVar3 & 0xffffffffffffff00 | uVar4;\n}\n",
        "token_count": 345
    },
    "14000f4d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nuint64_t fcn.14000f4d0(int64_t arg1, uint *arg2)\n\n{\n    int64_t arg1_00;\n    ulong uVar1;\n    uint uVar2;\n    uint64_t uVar3;\n    uint8_t uVar4;\n    uint64_t uStackX8;\n    uint64_t uStack24;\n    uint64_t *puStack16;\n    \n    arg1_00 = *(arg1 + 8);\n    puStack16 = &uStackX8;\n    uStackX8 = *(arg1 + 0x10) - 2;\n    uVar1 = *(arg1_00 + 0x2c);\n    uStack24 = uStackX8;\n    uVar2 = fcn.14000d918(arg1_00, &uStack24, 10);\n    *arg2 = uVar2;\n    uVar3 = *(arg1 + 8);\n    if (((*(uVar3 + 0x30) == '\\0') || (uVar4 = 0,  *(uVar3 + 0x2c) != 0x22)) &&\n       (uVar3 = uStackX8,  uVar4 = 0,  *(arg1 + 0x10) <= uStackX8)) {\n        *(arg1 + 0x10) = uStackX8;\n        uVar4 = 1;\n    }\n    *(arg1_00 + 0x2c) = uVar1;\n    return uVar3 & 0xffffffffffffff00 | uVar4;\n}\n",
        "token_count": 347
    },
    "140010d1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nulong fcn.140010d10(int64_t arg1)\n\n{\n    uchar *puVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    uchar *puVar4;\n    uint64_t arg3;\n    \n    iVar2 = *(arg1 + 0x34);\n    if ((iVar2 == 2) ||\n       (((iVar2 != 3 && (iVar2 != 0xc)) && ((*(arg1 + 0x34) == 0xd || ((*(arg1 + 0x39) + 0x9dU & 0xef) == 0)))))) {\n        puVar1 = *(arg1 + 0x18);\n        puVar4 = *(arg1 + 0x458);\n        if (*(arg1 + 0x458) == NULL) {\n            puVar4 = arg1 + 0x50;\n        }\n        *(arg1 + 0x18) = puVar1 + 8;\n        *puVar4 = *puVar1;\n        *(arg1 + 0x48) = 1;\n    }\n    else {\n        *(arg1 + 0x18) = *(arg1 + 0x18) + 8;\n        iVar3 = *(arg1 + 0x458);\n        if (iVar3 == 0) {\n            iVar3 = arg1 + 0x50;\n            arg3 = 0x200;\n        }\n        else {\n            arg3 = *(arg1 + 0x450) >> 1;\n        }\n        iVar2 = fcn.140015594(arg1 + 0x48, iVar3, arg3);\n        if (iVar2 != 0) {\n            *(arg1 + 0x38) = 1;\n        }\n    }\n    iVar3 = *(arg1 + 0x458);\n    if (*(arg1 + 0x458) == 0) {\n        iVar3 = arg1 + 0x50;\n    }\n    *(arg1 + 0x40) = iVar3;\n    return 1;\n}\n",
        "token_count": 448
    },
    "140017c4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.140017c4c(ulong arg1)\n\n{\n    int64_t iVar1;\n    int32_t iVar2;\n    ulong in_R9;\n    int64_t aiStackX16 [3];\n    \n    aiStackX16[0] = 0;\n    iVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleExW)(0, L\"mscoree.dll\", aiStackX16, in_R9, 0xfffffffffffffffe);\n    if ((iVar2 != 0) && (iVar1 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(aiStackX16[0], \"CorExitProcess\"),  iVar1 != 0))\n    {\n        (**0x140029a28)(arg1);\n    }\n    if (aiStackX16[0] != 0) {\n        (*_sym.imp.KERNEL32.dll_FreeLibrary)();\n    }\n    return;\n}\n",
        "token_count": 195
    },
    "1400189f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint64_t fcn.1400189f4(ulong arg1, ulong arg2, ulong arg3, int64_t arg4)\n\n{\n    uint8_t *puVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int64_t iVar4;\n    int64_t aiStack24 [2];\n    \n    iVar4 = fcn.1400185fc(arg1 & 0xffffffff);\n    if (iVar4 == -1) {\n        *(arg4 + 0x30) = 1;\n        *(arg4 + 0x2c) = 9;\n    }\n    else {\n        iVar2 = (*_sym.imp.KERNEL32.dll_SetFilePointerEx)(iVar4, arg2, aiStack24, arg3);\n        if (iVar2 == 0) {\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            fcn.14000d394(uVar3, arg4);\n        }\n        else if (aiStack24[0] != -1) {\n            puVar1 = *((arg1 >> 6) * 8 + 0x140037fd0) + 0x38 + (arg1 & 0x3f) * 0x48;\n            *puVar1 = *puVar1 & 0xfd;\n            return aiStack24[0];\n        }\n    }\n    return -1;\n}\n",
        "token_count": 303
    },
    "140018e0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint32_t fcn.140018e04(ulong arg1, int16_t *arg2, int64_t arg3)\n\n{\n    int16_t *piVar1;\n    int16_t *piVar2;\n    uint8_t *puVar3;\n    uint8_t uVar4;\n    ulong uVar5;\n    int32_t iVar6;\n    uint64_t uVar7;\n    int64_t iVar8;\n    int16_t iVar9;\n    int16_t *piVar10;\n    int16_t *piVar11;\n    int64_t iVar12;\n    int64_t iVar13;\n    int16_t aiStackX8 [4];\n    int16_t iStackX16;\n    int32_t aiStackX24 [2];\n    \n    uVar7 = arg1 & 0x3f;\n    iVar12 = arg1 >> 6;\n    iVar13 = 0;\n    iVar8 = *(iVar12 * 8 + 0x140037fd0);\n    uVar5 = *(iVar8 + 0x28 + uVar7 * 0x48);\n    if ((arg3 == 0) || (*arg2 != 10)) {\n        puVar3 = iVar8 + 0x38 + uVar7 * 0x48;\n        *puVar3 = *puVar3 & 0xfb;\n    }\n    else {\n        puVar3 = iVar8 + 0x38 + uVar7 * 0x48;\n        *puVar3 = *puVar3 | 4;\n    }\n    piVar2 = arg2 + arg3;\n    piVar11 = arg2;\n    if (arg2 < piVar2) {\n        piVar10 = arg2;\n        do {\n            iVar9 = *piVar10;\n            if (iVar9 == 0x1a) {\n                iVar8 = *(iVar12 * 8 + 0x140037fd0);\n                uVar4 = *(iVar8 + 0x38 + uVar7 * 0x48);\n                if ((uVar4 & 0x40) != 0) {\ncode_r0x000140018f7f:\n                    *piVar11 = iVar9;\n                    goto code_r0x000140018f82;\n                }\n                *(iVar8 + 0x38 + uVar7 * 0x48) = uVar4 | 2;\n                break;\n            }\n            piVar1 = piVar10 + 1;\n            if (iVar9 == 0xd) {\n                if (piVar2 <= piVar1) {\n                    iVar6 = (*_sym.imp.KERNEL32.dll_ReadFile)(uVar5, aiStackX8, 2, aiStackX24, 0);\n                    if ((iVar6 == 0) || (aiStackX24[0] == 0)) {\ncode_r0x000140018f7a:\n                        iVar9 = 0xd;\n                        goto code_r0x000140018f7f;\n                    }\n                    if ((*(*(iVar12 * 8 + 0x140037fd0) + 0x38 + uVar7 * 0x48) & 0x48) == 0) {\n                        if ((aiStackX8[0] != 10) || (piVar11 != arg2)) {\n                            fcn.140018b3c(arg1 & 0xffffffff, 0xfffffffffffffffe, 1);\n                            if (aiStackX8[0] != 10) goto code_r0x000140018f7a;\n                            break;\n                        }\n                    }\n                    else if (aiStackX8[0] != 10) {\n                        iStackX16 = aiStackX8[0];\n                        *piVar11 = 0xd;\n                        do {\n                            *(*(iVar12 * 8 + 0x140037fd0) + uVar7 * 0x48 + 0x3a + iVar13) = *(&iStackX16 + iVar13);\n                            iVar13 = iVar13 + 1;\n                        } while (iVar13 < 2);\n                        *(*(iVar12 * 8 + 0x140037fd0) + 0x3c + uVar7 * 0x48) = 10;\ncode_r0x000140018f82:\n                        piVar11 = piVar11 + 1;\n                        break;\n                    }\n                    *piVar11 = 10;\n                    goto code_r0x000140018f82;\n                }\n                iVar8 = 2;\n                if (*piVar1 == 10) {\n                    iVar8 = 4;\n                }\n                piVar10 = piVar10 + iVar8;\n                iVar9 = 10;\n                if (*piVar1 != 10) {\n                    iVar9 = 0xd;\n                }\n                *piVar11 = iVar9;\n            }\n            else {\n                *piVar11 = iVar9;\n                piVar10 = piVar1;\n            }\n            piVar11 = piVar11 + 1;\n        } while (piVar10 < piVar2);\n    }\n    return (piVar11 - arg2 >> 1) * 2;\n}\n",
        "token_count": 1117
    },
    "14002461": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint32_t fcn.14002461c(ulong *arg1, ulong arg2, int64_t arg3, ulong arg4)\n\n{\n    uint64_t uVar1;\n    ulong uVar2;\n    ulong *in_stack_00000028;\n    uint64_t uStack16;\n    \n    uVar1 = in_stack_00000028[1];\n    if ((uVar1 < *(arg3 + 8) || uVar1 == *(arg3 + 8)) && (arg1[1] < uVar1 || arg1[1] == uVar1)) {\n        if (uVar1 - arg1[1] < *(arg3 + 8) - uVar1) {\n            uVar2 = *arg1;\n            uStack16 = arg1[1];\n            if (uStack16 < uVar1) {\n                do {\n                    fcn.140024494(uVar2, &uStack16);\n                    arg2._0_4_ = arg2 + 1;\n                } while (uStack16 <= in_stack_00000028[1] && in_stack_00000028[1] != uStack16);\n            }\n        }\n        else {\n            uVar2 = *in_stack_00000028;\n            uStack16 = in_stack_00000028[1];\n            arg2._0_4_ = arg4;\n            if (uStack16 <= *(arg3 + 8) && *(arg3 + 8) != uStack16) {\n                do {\n                    fcn.140024494(uVar2, &uStack16);\n                    arg2._0_4_ = arg4 + -1;\n                    arg4._0_4_ = arg2;\n                } while (uStack16 <= *(arg3 + 8) && *(arg3 + 8) != uStack16);\n            }\n        }\n    }\n    else {\n        arg2._0_4_ = -1;\n    }\n    return arg2;\n}\n",
        "token_count": 428
    },
    "140024d0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nint64_t * fcn.140024d08(int16_t *arg1)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    int64_t *arg1_00;\n    int64_t *piVar4;\n    int16_t iVar5;\n    int64_t iVar6;\n    int64_t iVar7;\n    int16_t *piVar8;\n    \n    iVar5 = *arg1;\n    iVar6 = 0;\n    piVar8 = arg1;\n    while (iVar5 != 0) {\n        iVar7 = iVar6 + 1;\n        if (iVar5 == 0x3d) {\n            iVar7 = iVar6;\n        }\n        iVar6 = -1;\n        do {\n            iVar3 = iVar6;\n            iVar6 = iVar3 + 1;\n        } while (piVar8[iVar6] != 0);\n        piVar8 = piVar8 + iVar3 + 2;\n        iVar6 = iVar7;\n        iVar5 = *piVar8;\n    }\n    arg1_00 = fcn.140015d00(iVar6 + 1, 8);\n    piVar4 = arg1_00;\n    if (arg1_00 == NULL) {\ncode_r0x000140024d73:\n        fcn.140012664(0);\n        arg1_00 = NULL;\n    }\n    else {\n        for (; *arg1 != 0; arg1 = arg1 + iVar7) {\n            iVar6 = -1;\n            do {\n                iVar7 = iVar6;\n                iVar6 = iVar7 + 1;\n            } while (arg1[iVar6] != 0);\n            iVar7 = iVar7 + 2;\n            if (*arg1 != 0x3d) {\n                iVar6 = fcn.140015d00(iVar7, 2);\n                if (iVar6 == 0) {\n                    fcn.140024e68(arg1_00);\n                    fcn.140012664(0);\n                    goto code_r0x000140024d73;\n                }\n                iVar2 = fcn.140017644(iVar6, iVar7, arg1);\n                if (iVar2 != 0) {\n                    fcn.14000ce10(0, 0, 0, 0, 0);\n                    pcVar1 = swi(3);\n                    piVar4 = (*pcVar1)();\n                    return piVar4;\n                }\n                *piVar4 = iVar6;\n                piVar4 = piVar4 + 1;\n                fcn.140012664(0);\n            }\n        }\n        fcn.140012664(0);\n    }\n    return arg1_00;\n}\n",
        "token_count": 591
    },
    "14002557": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nulong fcn.140025574(int64_t arg1, ulong arg2, uint64_t arg3, int64_t *arg4)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    uint64_t uVar4;\n    ulong uVar5;\n    int64_t iVar6;\n    \n    uVar5 = 0;\n    iVar3 = -1;\n    do {\n        iVar6 = iVar3;\n        iVar3 = iVar6 + 1;\n    } while (*(arg1 + iVar3 * 2) != 0);\n    uVar4 = iVar6 + 2;\n    if (~arg3 < uVar4) {\n        return 0xc;\n    }\n    iVar6 = arg3 + 1 + uVar4;\n    iVar3 = fcn.140015d00(iVar6, 2);\n    if (((arg3 != 0) && (iVar2 = fcn.1400176ac(iVar3, iVar6, arg2, arg3),  iVar2 != 0)) ||\n       (iVar2 = fcn.1400176ac(iVar3 + arg3 * 2, iVar6 - arg3, arg1, uVar4),  iVar2 != 0)) {\n        fcn.14000ce10(0, 0, 0, 0, 0);\n        pcVar1 = swi(3);\n        uVar5 = (*pcVar1)();\n        return uVar5;\n    }\n    if (arg4[1] == arg4[2]) {\n        if (*arg4 == 0) {\n            iVar6 = fcn.140015d00(4, 8);\n            *arg4 = iVar6;\n            fcn.140012664(0);\n            iVar6 = *arg4;\n            if (iVar6 != 0) {\n                arg4[1] = iVar6;\n                arg4[2] = iVar6 + 0x20;\n                goto code_r0x0001400256cc;\n            }\n        }\n        else {\n            uVar4 = arg4[2] - *arg4 >> 3;\n            if (uVar4 < 0x8000000000000000) {\n                iVar6 = fcn.14001da04(*arg4, uVar4 * 2, 8);\n                if (iVar6 != 0) {\n                    *arg4 = iVar6;\n                    arg4[1] = iVar6 + uVar4 * 8;\n                    arg4[2] = iVar6 + uVar4 * 0x10;\n                    fcn.140012664(0);\n                    goto code_r0x0001400256cc;\n                }\n                fcn.140012664(0);\n            }\n        }\n        uVar5 = 0xc;\n        fcn.140012664(iVar3);\n    }\n    else {\ncode_r0x0001400256cc:\n        *arg4[1] = iVar3;\n        arg4[1] = arg4[1] + 8;\n    }\n    fcn.140012664(0);\n    return uVar5;\n}\n",
        "token_count": 681
    },
    "140025f0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nvoid fcn.140025f00(int64_t arg1, int64_t arg2, int64_t arg3, ulong arg4)\n\n{\n    int64_t iVar1;\n    \n    for (iVar1 = 0; iVar1 != arg3; iVar1 = iVar1 + 1) {\n        (**0x140029a28)(arg1);\n        arg1 = arg1 + arg2;\n    }\n    return;\n}\n",
        "token_count": 93
    },
    "140001d8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/73780005e39049dabd818a965d665a12",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/bde1572c33fb4ad4a176b04786e84c23"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t fcn.140001d88(int64_t arg1)\n\n{\n    int32_t iVar1;\n    uchar *arg1_00;\n    char16_t *arg2;\n    int64_t *arg3;\n    int64_t iVar2;\n    int64_t iStackX16;\n    uchar auStack56 [16];\n    uchar auStack40 [16];\n    uchar auStack24 [16];\n    \n    arg1_00 = auStack56;\n    auStack56 = ZEXT816(0);\n    auStack40 = ZEXT816(0);\n    auStack24 = ZEXT816(0);\n    (*_sym.imp.KERNEL32.dll_GetNativeSystemInfo)();\n    if (auStack56._0_2_ == 0) {\n        arg2 = L\"Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Update\\\\TargetingInfo\\\\DynamicInstalled\\\\MSRT.x86\";\n    }\n    else if (auStack56._0_2_ == 9) {\n        arg2 = L\"Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Update\\\\TargetingInfo\\\\DynamicInstalled\\\\MSRT.amd64\";\n    }\n    else {\n        if (auStack56._0_2_ != 0xc) {\n            return -0x7ff8c2f0;\n        }\n        arg2 = L\"Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Update\\\\TargetingInfo\\\\DynamicInstalled\\\\MSRT.arm64\";\n    }\n    arg3 = &iStackX16;\n    iStackX16 = 0;\n    iVar1 = fcn.140001bf8(arg1_00, arg2, arg3);\n    if (-1 < iVar1) {\n        iVar2 = -1;\n        do {\n            iVar2 = iVar2 + 1;\n        } while (*(arg1 + iVar2 * 2) != 0);\n        iVar1 = fcn.140001ccc(iStackX16, arg2, arg3, iVar2 * 2 + 2);\n    }\n    if (iStackX16 != 0) {\n        (*_sym.imp.ADVAPI32.dll_RegCloseKey)(iStackX16);\n    }\n    return iVar1;\n}\n",
        "token_count": 480
    },
    "14001075": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/73780005e39049dabd818a965d665a12",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/bde1572c33fb4ad4a176b04786e84c23"
        ],
        "decompiled_code": "\nulong fcn.140010758(int64_t arg1)\n\n{\n    uint16_t uVar1;\n    int32_t iVar2;\n    uint16_t **ppuVar3;\n    uint16_t *puVar4;\n    uint64_t uVar5;\n    bool bVar6;\n    \n    ppuVar3 = *(arg1 + 0x18);\n    *(arg1 + 0x18) = ppuVar3 + 1;\n    puVar4 = *ppuVar3;\n    if ((puVar4 == NULL) || (*(puVar4 + 4) == 0)) {\n        uVar5 = 6;\n        *(arg1 + 0x40) = \"(null)\";\n    }\n    else {\n        iVar2 = *(arg1 + 0x34);\n        if (iVar2 == 2) {\ncode_r0x0001400107a2:\n            bVar6 = false;\n        }\n        else if ((iVar2 == 3) || (iVar2 == 0xc)) {\n            bVar6 = true;\n        }\n        else {\n            if (*(arg1 + 0x34) == 0xd) goto code_r0x0001400107a2;\n            bVar6 = (*(arg1 + 0x39) + 0x9dU & 0xef) != 0;\n        }\n        *(arg1 + 0x40) = *(puVar4 + 4);\n        uVar1 = *puVar4;\n        uVar5 = uVar1;\n        if (bVar6) {\n            *(arg1 + 0x4c) = 1;\n            uVar5 = uVar1 >> 1;\n            goto code_r0x0001400107ce;\n        }\n    }\n    *(arg1 + 0x4c) = 0;\ncode_r0x0001400107ce:\n    *(arg1 + 0x48) = uVar5;\n    return CONCAT71(uVar5 >> 8, 1);\n}\n",
        "token_count": 438
    },
    "140010f6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/73780005e39049dabd818a965d665a12",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/bde1572c33fb4ad4a176b04786e84c23"
        ],
        "decompiled_code": "\nulong fcn.140010f60(int64_t arg1)\n\n{\n    int32_t iVar1;\n    char **ppcVar2;\n    int32_t iVar3;\n    uint uVar4;\n    char *arg1_00;\n    \n    ppcVar2 = *(arg1 + 0x18);\n    *(arg1 + 0x18) = ppcVar2 + 1;\n    arg1_00 = *ppcVar2;\n    iVar3 = *(arg1 + 0x30);\n    iVar1 = *(arg1 + 0x34);\n    if (iVar3 == -1) {\n        iVar3 = 0x7fffffff;\n    }\n    *(arg1 + 0x40) = arg1_00;\n    if ((iVar1 == 2) ||\n       (((iVar1 != 3 && (iVar1 != 0xc)) && ((*(arg1 + 0x34) == 0xd || ((*(arg1 + 0x39) + 0x9dU & 0xef) == 0)))))) {\n        if (arg1_00 == NULL) {\n            arg1_00 = \"(null)\";\n            *(arg1 + 0x40) = \"(null)\";\n        }\n        uVar4 = fcn.140014470(arg1_00, iVar3);\n    }\n    else {\n        if (arg1_00 == NULL) {\n            arg1_00 = 0x14002a170;\n            *(arg1 + 0x40) = 0x14002a170;\n        }\n        *(arg1 + 0x4c) = 1;\n        uVar4 = fcn.1400145c0(arg1_00, iVar3);\n    }\n    *(arg1 + 0x48) = uVar4;\n    return 1;\n}\n",
        "token_count": 398
    },
    "14002491": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/73780005e39049dabd818a965d665a12",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/bde1572c33fb4ad4a176b04786e84c23"
        ],
        "decompiled_code": "\nvoid fcn.140024910(int16_t *arg1, int16_t **arg2, int16_t *arg3, int64_t *arg4)\n\n{\n    bool bVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    int16_t iVar4;\n    int64_t *in_stack_00000028;\n    \n    *in_stack_00000028 = 0;\n    *arg4 = 1;\n    if (arg2 != NULL) {\n        *arg2 = arg3;\n        arg2 = arg2 + 1;\n    }\n    bVar1 = false;\n    do {\n        iVar4 = 0x22;\n        if (*arg1 == 0x22) {\n            bVar1 = !bVar1;\n        }\n        else {\n            *in_stack_00000028 = *in_stack_00000028 + 1;\n            if (arg3 != NULL) {\n                *arg3 = *arg1;\n                arg3 = arg3 + 1;\n            }\n            iVar4 = *arg1;\n            if (iVar4 == 0) goto code_r0x0001400249a7;\n        }\n        arg1 = arg1 + 1;\n    } while ((bVar1) || ((iVar4 != 0x20 && (iVar4 != 9))));\n    if (arg3 != NULL) {\n        arg3[-1] = 0;\n    }\ncode_r0x0001400249a7:\n    bVar1 = false;\n    while (iVar4 = *arg1,  iVar4 != 0) {\n        while ((iVar4 == 0x20 || (iVar4 == 9))) {\n            arg1 = arg1 + 1;\n            iVar4 = *arg1;\n        }\n        if (iVar4 == 0) break;\n        if (arg2 != NULL) {\n            *arg2 = arg3;\n            arg2 = arg2 + 1;\n        }\n        *arg4 = *arg4 + 1;\n        while( true ) {\n            uVar3 = 1;\n            uVar2 = 0;\n            for (; *arg1 == 0x5c; arg1 = arg1 + 1) {\n                uVar2 = uVar2 + 1;\n            }\n            if (*arg1 == 0x22) {\n                if ((uVar2 & 1) == 0) {\n                    if ((bVar1) && (arg1[1] == 0x22)) {\n                        arg1 = arg1 + 1;\n                    }\n                    else {\n                        bVar1 = !bVar1;\n                        uVar3 = 0;\n                    }\n                }\n                uVar2 = uVar2 >> 1;\n            }\n            while (uVar2 != 0) {\n                uVar2 = uVar2 - 1;\n                if (arg3 != NULL) {\n                    *arg3 = 0x5c;\n                    arg3 = arg3 + 1;\n                }\n                *in_stack_00000028 = *in_stack_00000028 + 1;\n            }\n            iVar4 = *arg1;\n            if ((iVar4 == 0) || ((!bVar1 && ((iVar4 == 0x20 || (iVar4 == 9)))))) break;\n            if (uVar3 != 0) {\n                if (arg3 != NULL) {\n                    *arg3 = iVar4;\n                    arg3 = arg3 + 1;\n                }\n                *in_stack_00000028 = *in_stack_00000028 + 1;\n            }\n            arg1 = arg1 + 1;\n        }\n        if (arg3 != NULL) {\n            *arg3 = 0;\n            arg3 = arg3 + 1;\n        }\n        *in_stack_00000028 = *in_stack_00000028 + 1;\n    }\n    if (arg2 != NULL) {\n        *arg2 = NULL;\n    }\n    *arg4 = *arg4 + 1;\n    return;\n}\n",
        "token_count": 874
    },
    "14000210": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_19h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.14000210c(uint16_t *arg1)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint uVar3;\n    int64_t iVar4;\n    uint64_t uVar5;\n    uint64_t arg1_00;\n    uint32_t uVar6;\n    uint64_t in_R8;\n    ulong in_R9;\n    ulong var_fh;\n    uint64_t var_17h;\n    ulong var_1fh;\n    ulong var_27h;\n    ulong lpRootPathName;\n    ulong var_77h;\n    ulong var_7fh;\n    uint64_t in_stack_ffffffffffffff20;\n    ulong in_stack_ffffffffffffff80;\n    ulong var_19h;\n    \n    uVar5 = 0;\n    uVar3 = 0;\n    iVar4 = fcn.140020524(arg1);\n    arg1_00 = uVar5;\n    if (iVar4 != 0) {\n        in_R8 = *arg1;\n        stack0x00000010 = 0;\n        iVar1 = fcn.1400097e8(&var_17h + 1, L\"%c:\\\\\", in_R8, in_R9);\n        arg1_00 = stack0x00000010;\n        if (-1 < iVar1) {\n            in_R9 = 0;\n            stack0x00000010 = stack0x00000010 & 0xffffffff00000000;\n            in_R8 = 0;\n            iVar1 = (*_sym.imp.KERNEL32.dll_GetVolumeInformationW)\n                              (arg1_00, 0, 0, 0, 0, &var_17h + 1, 0, in_stack_ffffffffffffff20 & 0xffffffff00000000);\n            if (iVar1 == 0) {\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                uVar6 = uVar2 & 0xffff | 0x80070000;\n                if (uVar2 < 1) {\n                    uVar6 = uVar2;\n                }\n                if (uVar6 != 0) goto code_r0x000140002167;\n            }\n            else {\n                if ((stack0x00000010 & 0x10) == 0) goto code_r0x000140002162;\n                uVar6 = 0;\n            }\n            uVar3 = fcn.14000205c(arg1);\n            goto code_r0x000140002167;\n        }\n        arg1_00 = uVar5;\n        if (stack0x00000010 != 0) {\n            fcn.14001ea10(stack0x00000010);\n        }\n    }\ncode_r0x000140002162:\n    uVar6 = 1;\ncode_r0x000140002167:\n    iVar4 = *0x140039490;\n    if (*0x140039490 != 0) {\n        (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(*0x140039490);\n        if (((5 < *0x140037270) && ((*0x140037280 & 0x400000000000) != 0)) &&\n           ((*0x140037288 & 0x400000000000) == *0x140037288)) {\n            var_1fh._1_4_ = uVar3;\n            var_27h._1_4_ = uVar6;\n            fcn.140001090(*0x140039488, 0x140033512, in_R8, in_R9, &stack0xffffffffffffffc8, &stack0xffffffffffffffc0, \n                          &stack0xffffffffffffffb8, &stack0xffffffffffffffb0, &stack0xffffffffffffffa8, \n                          &stack0xffffffffffffffa4, &stack0xffffffffffffffa0, &stack0xffffffffffffff9c, \n                          &stack0xffffffffffffff98, &stack0xffffffffffffff94, &stack0xffffffffffffff90, \n                          &stack0xffffffffffffff8c, &stack0xffffffffffffff88, &var_27h + 1, &var_1fh + 1, \n                          in_stack_ffffffffffffff80, CONCAT44(*(*0x140039488 + 0x34), *(*0x140039488 + 0x38)), \n                          CONCAT14(*(*0x140039488 + 0x2c), *(*0x140039488 + 0x30)), \n                          CONCAT14(*(*0x140039488 + 0x2a), *(*0x140039488 + 0x2b)), \n                          CONCAT14(*(*0x140039488 + 0x28), *(*0x140039488 + 0x29)), *(*0x140039488 + 0x20), \n                          *(*0x140039488 + 0x18), *(*0x140039488 + 0x10), *(*0x140039488 + 8), 0x1000000);\n        }\n        (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(iVar4);\n    }\n    if (arg1_00 != 0) {\n        fcn.14001ea10(arg1_00);\n    }\n    return;\n}\n",
        "token_count": 1158
    },
    "14000242": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1ch\n\nvoid fcn.140002428(ulong arg1, uint32_t *arg2)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    int64_t iVar4;\n    int64_t iVar5;\n    ulong in_R8;\n    ulong noname_2;\n    ulong in_R9;\n    ulong var_ch;\n    ulong var_220h;\n    uchar auStackY888 [32];\n    ulong in_stack_fffffffffffffd20;\n    uint in_stack_fffffffffffffd2c;\n    uint64_t in_stack_fffffffffffffd30;\n    int64_t arg1_00;\n    int64_t iVar6;\n    uint64_t in_stack_fffffffffffffd38;\n    int64_t iVar7;\n    ulong uStack656;\n    ulong uStack648;\n    char *pcStack640;\n    uint uStack632;\n    uchar auStack628 [4];\n    uint32_t uStack624;\n    uchar auStack588 [452];\n    ulong lpdwSize;\n    ulong lpExeName;\n    ulong hProcess;\n    ulong var_50h;\n    ulong var_48h;\n    ulong var_40h;\n    ulong var_38h;\n    uint64_t var_30h;\n    ulong var_28h;\n    ulong var_1ch;\n    \n    var_30h = *0x140037f00 ^ auStackY888;\n    iVar4 = fcn.140020524(arg1);\n    if ((iVar4 != 0) && (iVar4 = fcn.1400205a0(arg1),  iVar4 != 0)) {\n        iVar5 = (*_sym.imp.KERNEL32.dll_CreateToolhelp32Snapshot)(2);\n        if (iVar5 == -1) {\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            iVar4 = *0x140039490;\n            uVar1 = uVar2 & 0xffff | 0x80070000;\n            if (uVar2 < 1) {\n                uVar1 = uVar2;\n            }\n            if (*0x140039490 != 0) {\n                (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(*0x140039490);\n                if (((5 < *0x140037270) && ((*0x140037280 & 0x400000000000) != 0)) &&\n                   ((*0x140037288 & 0x400000000000) == *0x140037288)) {\n                    pcStack640 = 0x1000000;\n                    uStack656 = *(*0x140039488 + 0x10);\n                    uStack648 = *(*0x140039488 + 8);\n                    fcn.1400012bc(*0x140039488, 0x140033347, in_R8, in_R9, &pcStack640, &uStack648, &uStack656, \n                                  &stack0xfffffffffffffd68, &stack0xfffffffffffffd60, &stack0xfffffffffffffd30, \n                                  &stack0xfffffffffffffd38, &stack0xfffffffffffffd54, &stack0xfffffffffffffd50, \n                                  &stack0xfffffffffffffd4c, &stack0xfffffffffffffd48, &stack0xfffffffffffffd44, \n                                  &stack0xfffffffffffffd40, &stack0xfffffffffffffd28, &stack0xfffffffffffffd58, \n                                  in_stack_fffffffffffffd20, CONCAT44(in_stack_fffffffffffffd2c, uVar1), \n                                  in_stack_fffffffffffffd30 & 0xffffffff00000000 | *(*0x140039488 + 0x28), \n                                  in_stack_fffffffffffffd38 & 0xffffffff00000000 | *(*0x140039488 + 0x29), \n                                  CONCAT44(*(*0x140039488 + 0x34), *(*0x140039488 + 0x38)), \n                                  CONCAT14(*(*0x140039488 + 0x2c), *(*0x140039488 + 0x30)), \n                                  CONCAT14(*(*0x140039488 + 0x2a), *(*0x140039488 + 0x2b)), \"SnapShot\", \n                                  *(*0x140039488 + 0x20), *(*0x140039488 + 0x18));\n                }\n                (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(iVar4);\n            }\n        }\n        else {\n            noname_2 = 0x234;\n            fcn.140020880(auStack628, 0, 0x234);\n            uStack632 = 0x238;\n            iVar3 = (*_sym.imp.KERNEL32.dll_Process32FirstW)(iVar5, &uStack632);\n            if (iVar3 == 0) {\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                iVar4 = *0x140039490;\n                uVar1 = uVar2 & 0xffff | 0x80070000;\n                if (uVar2 < 1) {\n                    uVar1 = uVar2;\n                }\n                if (*0x140039490 != 0) {\n                    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(*0x140039490);\n                    if (((5 < *0x140037270) && ((*0x140037280 & 0x400000000000) != 0)) &&\n                       ((*0x140037288 & 0x400000000000) == *0x140037288)) {\n                        pcStack640 = \"ProcessList\";\n                        uStack648 = *(*0x140039488 + 0x20);\n                        uStack656 = *(*0x140039488 + 0x18);\n                        fcn.1400012bc(*0x140039488, 0x140033347, noname_2, in_R9, &stack0xfffffffffffffd58, \n                                      &stack0xfffffffffffffd60, &stack0xfffffffffffffd68, &uStack656, &uStack648, \n                                      &stack0xfffffffffffffd28, &stack0xfffffffffffffd40, &stack0xfffffffffffffd44, \n                                      &stack0xfffffffffffffd48, &stack0xfffffffffffffd4c, &stack0xfffffffffffffd50, \n                                      &stack0xfffffffffffffd54, &stack0xfffffffffffffd38, &stack0xfffffffffffffd30, \n                                      &pcStack640, in_stack_fffffffffffffd20, \n                                      CONCAT44(in_stack_fffffffffffffd2c, *(*0x140039488 + 0x28)), \n                                      in_stack_fffffffffffffd30 & 0xffffffff00000000 | uVar1, \n                                      in_stack_fffffffffffffd38 & 0xffffffff00000000 | *(*0x140039488 + 0x38), \n                                      CONCAT14(*(*0x140039488 + 0x2a), *(*0x140039488 + 0x29)), \n                                      CONCAT14(*(*0x140039488 + 0x2c), *(*0x140039488 + 0x2b)), *(*0x140039488 + 0x30), \n                                      0x1000000, *(*0x140039488 + 8), *(*0x140039488 + 0x10));\n                    }\n                    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(iVar4);\n                }\n                (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar5);\n            }\n            else {\n                do {\n                    iVar3 = fcn.14000c69c(iVar4 + 2, auStack588);\n                    if (iVar3 == 0) {\n                        iVar7 = 0;\n                        iVar3 = fcn.140009394(&stack0xfffffffffffffd38, uStack624, 0x400);\n                        if (iVar3 < 0) {\n                            (*_sym.imp.KERNEL32.dll_GetLastError)();\njoined_r0x000140002815:\n                            if (iVar7 != 0) {\n                                (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar7);\n                            }\n                        }\n                        else {\n                            arg1_00 = 0;\n                            iVar3 = fcn.14000459c(&stack0xfffffffffffffd30);\n                            if (iVar3 < 0) {\n                                if (arg1_00 != 0) {\n                                    fcn.14001ea10(arg1_00);\n                                }\njoined_r0x0001400027ea:\n                                if (iVar7 != 0) {\n                                    (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar7);\n                                }\n                            }\n                            else {\n                                iVar6 = arg1_00;\n                                iVar3 = (*_sym.imp.KERNEL32.dll_QueryFullProcessImageNameW)\n                                                  (iVar7, 0, arg1_00, &stack0xfffffffffffffd28);\n                                if (iVar3 == 0) {\n                                    if (arg1_00 != 0) {\n                                        fcn.14001ea10(arg1_00);\n                                        iVar6 = 0;\n                                    }\n                                    arg1_00 = iVar6;\n                                    iVar3 = fcn.14000459c(&stack0xfffffffffffffd30);\n                                    if (iVar3 < 0) {\n                                        if (arg1_00 != 0) {\n                                            fcn.14001ea10(arg1_00);\n                                        }\n                                        goto joined_r0x0001400027ea;\n                                    }\n                                    iVar3 = (*_sym.imp.KERNEL32.dll_QueryFullProcessImageNameW)\n                                                      (iVar7, 0, arg1_00, &stack0xfffffffffffffd28);\n                                    if (iVar3 == 0) {\n                                        fcn.14000a4bc();\n                                        if (arg1_00 != 0) {\n                                            fcn.14001ea10(arg1_00);\n                                        }\n                                        goto joined_r0x000140002815;\n                                    }\n                                }\n                                iVar3 = fcn.14000c69c(arg1, arg1_00);\n                                if (iVar3 != 0) {\n                                    if (arg1_00 != 0) {\n                                        fcn.14001ea10(arg1_00);\n                                    }\n                                    if (iVar7 != 0) {\n                                        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar7);\n                                    }\n                                    goto code_r0x000140002746;\n                                }\n                                *arg2 = uStack624;\n                                if (arg1_00 != 0) {\n                                    fcn.14001ea10(arg1_00);\n                                }\n                                if (iVar7 != 0) {\n                                    (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar7);\n                                }\n                            }\n                        }\n                        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar5);\n                        goto code_r0x0001400029c0;\n                    }\ncode_r0x000140002746:\n                    iVar3 = (*_sym.imp.KERNEL32.dll_Process32NextW)(iVar5, &uStack632);\n                } while (iVar3 != 0);\n                *arg2 = 0xffffffff;\n                (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar5);\n            }\n        }\n    }\ncode_r0x0001400029c0:\n    fcn.14001e9f0(var_30h ^ auStackY888);\n    return;\n}\n",
        "token_count": 2451
    },
    "1400029e": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_fh\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Variable defined which should be unmapped: var_9h\n// WARNING: Could not reconcile some variable overlaps\n\nuint64_t fcn.1400029ec(ulong arg1, int64_t *arg2)\n\n{\n    uint8_t uVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    bool bVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    uint32_t uVar8;\n    uint32_t uVar9;\n    uint32_t uVar10;\n    uint32_t uVar11;\n    uint32_t uVar12;\n    uint32_t uVar13;\n    uint64_t uVar14;\n    ulong *noname_4;\n    int64_t iVar15;\n    uint32_t *puVar16;\n    uint32_t uVar17;\n    ulong in_R8;\n    ulong in_R9;\n    ulong var_fh;\n    ulong var_17h;\n    ulong var_1fh;\n    uint auStackX32 [2];\n    ulong var_77h;\n    ulong var_7fh;\n    uchar *noname_5;\n    uchar *noname_7;\n    ulong *noname_8;\n    uchar *noname_9;\n    uchar *noname_10;\n    uchar *noname_11;\n    uchar *noname_12;\n    uchar *arg_80h;\n    uchar *arg_88h;\n    uchar *arg_90h;\n    uchar *arg_98h;\n    ulong in_stack_ffffffffffffff70;\n    uint32_t uVar18;\n    uint in_stack_ffffffffffffff9c;\n    ulong arg_d8h;\n    ulong arg_e0h;\n    ulong arg_e8h;\n    ulong arg_f0h;\n    ulong uStack64;\n    ulong var_9h;\n    ulong var_1h;\n    \n    uVar13 = 0;\n    var_1fh._1_4_ = 0;\n    bVar4 = false;\n    uVar14 = fcn.140002428(arg1, &var_1fh + 1);\n    if (uVar14 < 0) {\n        return uVar14;\n    }\n    while (var_1fh._1_4_ != 0xffffffff) {\n        iVar5 = fcn.140008c1c(arg1);\n        if ((iVar5 != 0) || (bVar4)) {\n            uVar17 = fcn.140002358(var_1fh._1_4_);\n            iVar15 = *0x140039490;\n            if (*0x140039490 != 0) {\n                (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(*0x140039490);\n                if (((5 < *0x140037270) && ((*0x140037280 & 0x400000000000) != 0)) &&\n                   ((*0x140037288 & 0x400000000000) == *0x140037288)) {\n                    auStackX32[0] = 0;\n                    arg_d8h = 0x1000000;\n                    uVar8 = *(*0x140039488 + 0x38);\n                    uVar7 = *(*0x140039488 + 0x34);\n                    uVar6 = *(*0x140039488 + 0x30);\n                    uVar1 = *(*0x140039488 + 0x2c);\n                    uVar9 = *(*0x140039488 + 0x2b);\n                    uVar10 = *(*0x140039488 + 0x2a);\n                    uVar11 = *(*0x140039488 + 0x29);\n                    uVar12 = *(*0x140039488 + 0x28);\n                    uStack64 = *(*0x140039488 + 0x20);\n                    arg_f0h = *(*0x140039488 + 0x18);\n                    arg_e8h = *(*0x140039488 + 0x10);\n                    arg_e0h = *(*0x140039488 + 8);\n                    arg_98h = &stack0xffffffffffffff98;\n                    arg_90h = &stack0xffffffffffffff94;\n                    arg_88h = &stack0xffffffffffffff90;\n                    arg_80h = &stack0xffffffffffffff8c;\n                    noname_12 = &stack0xffffffffffffff84;\n                    noname_11 = &stack0xffffffffffffff80;\n                    noname_10 = &stack0xffffffffffffff7c;\n                    noname_9 = &stack0xffffffffffffff78;\n                    noname_8 = &uStack64;\n                    noname_7 = &stack0xffffffffffffffb8;\n                    noname_5 = &stack0xffffffffffffffa8;\n                    noname_4 = &stack0xffffffffffffffa0;\n                    uVar18 = uVar17;\n                    goto code_r0x000140002d43;\n                }\n                goto code_r0x000140002d4d;\n            }\n        }\n        else {\n            uVar17 = 0;\n            do {\n                (*_sym.imp.KERNEL32.dll_Sleep)(15000);\n                uVar17 = uVar17 + 1;\n                uVar14 = fcn.140002428(arg1, &var_1fh + 1);\n                if (uVar14 < 0) {\n                    return uVar14;\n                }\n                if (var_1fh._1_4_ == 0xffffffff) goto code_r0x000140002d77;\n            } while (uVar17 < 0xc);\n            bVar4 = true;\n            uVar17 = fcn.140002358(var_1fh._1_4_);\n            iVar15 = *0x140039490;\n            if (*0x140039490 != 0) {\n                (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(*0x140039490);\n                if (((5 < *0x140037270) && ((*0x140037280 & 0x400000000000) != 0)) &&\n                   ((*0x140037288 & 0x400000000000) == *0x140037288)) {\n                    auStackX32[0] = 1;\n                    uStack64 = 0x1000000;\n                    uVar11 = *(*0x140039488 + 0x38);\n                    uVar10 = *(*0x140039488 + 0x34);\n                    uVar9 = *(*0x140039488 + 0x30);\n                    uVar1 = *(*0x140039488 + 0x2c);\n                    uVar6 = *(*0x140039488 + 0x2b);\n                    uVar7 = *(*0x140039488 + 0x2a);\n                    uVar8 = *(*0x140039488 + 0x29);\n                    arg_d8h = *(*0x140039488 + 0x20);\n                    arg_e0h = *(*0x140039488 + 0x18);\n                    arg_e8h = *(*0x140039488 + 0x10);\n                    arg_f0h = *(*0x140039488 + 8);\n                    arg_98h = &stack0xffffffffffffff78;\n                    arg_90h = &stack0xffffffffffffff7c;\n                    arg_88h = &stack0xffffffffffffff80;\n                    arg_80h = &stack0xffffffffffffff84;\n                    noname_12 = &stack0xffffffffffffff8c;\n                    noname_11 = &stack0xffffffffffffff90;\n                    noname_10 = &stack0xffffffffffffff94;\n                    noname_9 = &stack0xffffffffffffff98;\n                    noname_8 = &stack0xffffffffffffffa0;\n                    noname_7 = &stack0xffffffffffffffa8;\n                    noname_5 = &stack0xffffffffffffffb8;\n                    noname_4 = &uStack64;\n                    uVar12 = uVar17;\n                    uVar18 = *(*0x140039488 + 0x28);\ncode_r0x000140002d43:\n                    fcn.140001090(*0x140039488, 0x140033073, in_R8, in_R9, noname_4, noname_5, &stack0xffffffffffffffb0\n                                  , noname_7, noname_8, noname_9, noname_10, noname_11, noname_12, \n                                  &stack0xffffffffffffff88, arg_80h, arg_88h, arg_90h, arg_98h, auStackX32, \n                                  in_stack_ffffffffffffff70, CONCAT44(uVar11, uVar12), CONCAT44(uVar9, uVar10), \n                                  CONCAT44(uVar6, uVar1), CONCAT44(uVar8, uVar7), \n                                  CONCAT44(in_stack_ffffffffffffff9c, uVar18), arg_d8h, arg_e0h, arg_e8h, arg_f0h);\n                }\ncode_r0x000140002d4d:\n                (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(iVar15);\n            }\n        }\n        if (uVar17 < 0) {\n            return uVar17;\n        }\n        if (var_1fh._1_4_ == 0xffffffff) break;\n        fcn.140002428(arg1, &var_1fh + 1);\n    }\ncode_r0x000140002d77:\n    (*_sym.imp.KERNEL32.dll_SetFileAttributesW)(arg1, 0x80);\n    iVar15 = fcn.14000d4c4(arg1, 0x14002f5b4);\n    if (iVar15 != 0) {\n        iVar2 = arg2[1];\n        iVar3 = *arg2;\n        iVar15 = fcn.14000d260(*arg2, 1, iVar2 - iVar3, iVar15);\n        if (iVar15 == iVar2 - iVar3) {\n            fcn.14000c9a4();\n            goto code_r0x000140002ddb;\n        }\n        fcn.14000c9a4();\n    }\n    puVar16 = fcn.14000d3d8();\n    uVar13 = fcn.140009108(*puVar16);\ncode_r0x000140002ddb:\n    return uVar13;\n}\n",
        "token_count": 2271
    },
    "14000382": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_18h\n// WARNING: Variable defined which should be unmapped: var_bp_8h\n// WARNING: Variable defined which should be unmapped: var_20h_2\n// WARNING: Could not reconcile some variable overlaps\n\nuint64_t fcn.140003828(uint64_t arg1, ulong arg2, ulong arg3)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    int64_t iVar4;\n    ulong *arg1_00;\n    ulong *puVar5;\n    ulong uVar6;\n    int64_t iVar7;\n    uint64_t uVar8;\n    uint64_t uVar9;\n    ulong *noname_2;\n    ulong *noname_3;\n    uint64_t var_bp_10h;\n    ulong var_18h;\n    ulong var_20h;\n    uint64_t var_28h_2;\n    ulong var_30h;\n    ulong var_38h_2;\n    ulong var_40h;\n    ulong var_48h;\n    ulong var_98h;\n    ulong in_stack_fffffffffffffe98;\n    uint uVar10;\n    ulong in_stack_fffffffffffffea0;\n    uint32_t uVar11;\n    uint in_stack_ffffffffffffff20;\n    uint in_stack_ffffffffffffff24;\n    ulong uStack184;\n    uchar auStack176 [16];\n    int64_t iStack160;\n    uchar auStack152 [16];\n    int64_t var_80h;\n    int64_t var_78h;\n    int64_t var_70h;\n    int64_t var_68h;\n    code *var_60h;\n    ulong var_58h;\n    ulong var_50h;\n    uint64_t var_48h_2;\n    code *var_40h_2;\n    ulong var_38h;\n    int64_t iStack56;\n    int64_t var_28h;\n    ulong var_20h_2;\n    ulong var_bp_8h;\n    \n    uVar10 = in_stack_fffffffffffffe98 >> 0x20;\n    uVar11 = in_stack_fffffffffffffea0 >> 0x20;\n    var_bp_10h = arg1 & 0xffffffffffffff00;\n    auStack176 = ZEXT816(0);\n    iStack160 = 0;\n    uVar2 = (*_sym.imp.KERNEL32.dll_SizeofResource)();\n    iVar4 = (*_sym.imp.KERNEL32.dll_LoadResource)(0, arg2);\n    if (iVar4 == 0) {\ncode_r0x000140003c4c:\n        uVar2 = fcn.14000a4bc();\n        fcn.140009514(uVar2);\n    }\n    else {\n        var_50h = (*_sym.imp.KERNEL32.dll_LockResource)(iVar4);\n        var_58h = 0;\n        var_60h = vtable.BinaryBlob.0;\n        var_48h_2 = uVar2;\n        fcn.140003224(&var_78h, &var_60h, \"mrt._p\");\n        var_28h = var_70h - var_78h;\n        var_40h_2 = vtable.MemoryFile.0;\n        var_38h = 0;\n        iStack56 = var_78h;\n        var_28h_2 = 0;\n        arg1_00 = fcn.14001ea18(0x28);\n        iVar4 = uVar11 << 0x20;\n        uVar6 = CONCAT44(uVar10, 3);\n        fcn.140006528(arg1_00, arg3, 0x80000000, 5);\n        *arg1_00 = 0x140029318;\n        arg1_00[1] = 0x140029300;\n        noname_3 = &var_28h_2;\n        noname_2 = &var_40h_2;\n        puVar5 = fcn.140006f2c(&stack0xffffffffffffff20, arg1_00, noname_2, noname_3, uVar6, iVar4);\n        uVar6 = fcn.140005f38(auStack152, *puVar5);\n        fcn.1400044f4(auStack176, uVar6);\n        if (auStack152._0_8_ == 0) {\ncode_r0x0001400039b3:\n            if (CONCAT44(in_stack_ffffffffffffff24, in_stack_ffffffffffffff20) != 0) {\n                (**0x140029a28)(CONCAT44(in_stack_ffffffffffffff24, in_stack_ffffffffffffff20), 1);\n            }\n            (**0x140029a28)(arg1_00, 1);\n            if (var_78h != 0) {\n                iVar4 = var_78h;\n                if ((0xfff < var_68h - var_78h) && (iVar4 = *(var_78h + -8),  0x1f < (var_78h - iVar4) - 8U))\n                goto code_r0x000140003c5f;\n                fcn.14001ea54(iVar4);\n            }\n            uVar2 = fcn.1400029ec(arg3, auStack176);\n            iVar4 = *0x140039490;\n            uVar8 = uVar2;\n            if (*0x140039490 != 0) {\n                (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(*0x140039490);\n                if (((5 < *0x140037270) && ((*0x140037280 & 0x400000000000) != 0)) &&\n                   ((*0x140037288 & 0x400000000000) == *0x140037288)) {\n                    var_bp_10h = var_bp_10h & 0xffffffff00000000 | uVar2;\n                    var_28h_2 = var_28h_2 & 0xffffffff00000000 | *(*0x140039488 + 0x38);\n                    uStack184 = *(*0x140039488 + 0x10);\n                    fcn.14000150c(*0x140039488, 0x140032f81, noname_2, noname_3, &stack0xffffffffffffff28, \n                                  &stack0xffffffffffffff30, &uStack184, &stack0xffffffffffffff40, \n                                  &stack0xffffffffffffff38, &stack0xffffffffffffff20, &stack0xffffffffffffff1c, \n                                  &stack0xffffffffffffff18, &stack0xffffffffffffff14, &stack0xffffffffffffff10, \n                                  &stack0xffffffffffffff0c, &stack0xffffffffffffff08, &var_28h_2, &var_bp_10h, \n                                  CONCAT44(*(*0x140039488 + 0x30), *(*0x140039488 + 0x34)), \n                                  CONCAT14(*(*0x140039488 + 0x2b), *(*0x140039488 + 0x2c)), \n                                  CONCAT14(*(*0x140039488 + 0x29), *(*0x140039488 + 0x2a)), \n                                  CONCAT44(in_stack_ffffffffffffff24, *(*0x140039488 + 0x28)), 0x1000000, \n                                  *(*0x140039488 + 8), *(*0x140039488 + 0x20), *(*0x140039488 + 0x18));\n                }\n                (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(iVar4);\n            }\n            if (-1 < uVar2) {\n                uVar8 = 0;\n            }\n            if (auStack176._0_8_ == 0) goto code_r0x000140003bd6;\n            uVar9 = iStack160 - auStack176._0_8_;\n            if (0xfff < uVar9) {\n                iVar4 = *(auStack176._0_8_ + -8);\n                iVar7 = auStack176._0_8_ - iVar4;\n                auStack176._0_8_ = iVar4;\n                if (0x1f < iVar7 - 8U) {\n                    fcn.14000cde0(iVar4, uVar9 + 0x27);\n                    goto code_r0x000140003c4c;\n                }\n            }\n            fcn.14001ea54(auStack176._0_8_);\ncode_r0x000140003bd6:\n            if (-1 >= uVar2) {\n                var_bp_10h = 0;\n                iVar3 = fcn.140001bf8(auStack176._0_8_, L\"Software\\\\Microsoft\\\\RemovalTools\\\\MRT\", &var_bp_10h);\n                iVar4 = var_bp_10h;\n                if (-1 < iVar3) {\n                    var_bp_10h = CONCAT44(var_bp_10h._4_4_, 1);\n                    fcn.140009e00(iVar4);\n                }\n                if (iVar4 != 0) {\n                    (*_sym.imp.ADVAPI32.dll_RegCloseKey)(iVar4);\n                }\n            }\n            return uVar8;\n        }\n        iVar4 = auStack152._0_8_;\n        if ((var_80h - auStack152._0_8_ < 0x1000) ||\n           (iVar4 = *(auStack152._0_8_ + -8),  (auStack152._0_8_ - iVar4) - 8U < 0x20)) {\n            fcn.14001ea54(iVar4);\n            auStack152 = ZEXT816(0);\n            var_80h = 0;\n            goto code_r0x0001400039b3;\n        }\n    }\n    fcn.14000cde0();\ncode_r0x000140003c5f:\n    fcn.14000cde0();\n    pcVar1 = swi(3);\n    uVar8 = (*pcVar1)();\n    return uVar8;\n}\n",
        "token_count": 2220
    },
    "140003f9": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\nulong fcn.140003f94(ulong arg1)\n\n{\n    int64_t iVar1;\n    ulong uVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    char16_t *pcVar5;\n    ulong in_R9;\n    uint auStackX16 [2];\n    uint auStackX24 [2];\n    uint auStackX32 [2];\n    uint in_stack_ffffffffffffffac;\n    char *apcStack40 [2];\n    \n    pcVar5 = L\"CABINET\";\n    iVar3 = 0;\n    iVar1 = (*_sym.imp.KERNEL32.dll_FindResourceW)(0, L\"MRTDELTA\");\n    iVar4 = *0x140039490;\n    if (iVar1 == 0) {\n        pcVar5 = L\"CABINET\";\n        iVar3 = 0;\n        iVar1 = (*_sym.imp.KERNEL32.dll_FindResourceW)(0, L\"MRTFULL\");\n        iVar4 = *0x140039490;\n        if (iVar1 == 0) {\n            uVar2 = 0x80070490;\n        }\n        else {\n            if (*0x140039490 != 0) {\n                (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(*0x140039490);\n                if (((5 < *0x140037270) && ((*0x140037280 & 0x400000000000) != 0)) &&\n                   ((*0x140037288 & 0x400000000000) == *0x140037288)) {\n                    apcStack40[0] = \"Mrt Full Update Started\";\n                    auStackX16[0] = *(*0x140039488 + 0x38);\n                    auStackX24[0] = *(*0x140039488 + 0x34);\n                    auStackX32[0] = *(*0x140039488 + 0x30);\n                    fcn.14000171c(*0x140039488, 0x140033427, pcVar5, in_R9, &stack0xffffffffffffffb0, \n                                  &stack0xffffffffffffffb8, &stack0xffffffffffffffc0, &stack0xffffffffffffffc8, \n                                  &stack0xffffffffffffffd0, &stack0xffffffffffffff98, &stack0xffffffffffffff9c, \n                                  &stack0xffffffffffffffa0, &stack0xffffffffffffffa4, &stack0xffffffffffffffa8, \n                                  auStackX32, auStackX24, auStackX16, apcStack40, \n                                  CONCAT14(*(*0x140039488 + 0x29), *(*0x140039488 + 0x28)), \n                                  CONCAT14(*(*0x140039488 + 0x2b), *(*0x140039488 + 0x2a)), \n                                  CONCAT44(in_stack_ffffffffffffffac, *(*0x140039488 + 0x2c)), 0x1000000, \n                                  *(*0x140039488 + 8), *(*0x140039488 + 0x10), *(*0x140039488 + 0x18), \n                                  *(*0x140039488 + 0x20));\n                }\n                (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)();\n                iVar3 = iVar4;\n            }\n            uVar2 = fcn.140003c68(iVar3, iVar1, arg1);\n            if (-1 < uVar2) {\n                fcn.14000210c(arg1);\n                uVar2 = 0;\n            }\n        }\n    }\n    else {\n        if (*0x140039490 != 0) {\n            (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(*0x140039490);\n            if (((5 < *0x140037270) && ((*0x140037280 & 0x400000000000) != 0)) &&\n               ((*0x140037288 & 0x400000000000) == *0x140037288)) {\n                auStackX16[0] = *(*0x140039488 + 0x38);\n                auStackX24[0] = *(*0x140039488 + 0x34);\n                auStackX32[0] = *(*0x140039488 + 0x30);\n                apcStack40[0] = 0x1000000;\n                fcn.14000171c(*0x140039488, 0x14003316b, pcVar5, in_R9, apcStack40, &stack0xffffffffffffffd0, \n                              &stack0xffffffffffffffc8, &stack0xffffffffffffffc0, &stack0xffffffffffffffb8, \n                              &stack0xffffffffffffffa8, &stack0xffffffffffffffa4, &stack0xffffffffffffffa0, \n                              &stack0xffffffffffffff9c, &stack0xffffffffffffff98, auStackX32, auStackX24, auStackX16, \n                              &stack0xffffffffffffffb0, CONCAT14(*(*0x140039488 + 0x2b), *(*0x140039488 + 0x2c)), \n                              CONCAT14(*(*0x140039488 + 0x29), *(*0x140039488 + 0x2a)), \n                              CONCAT44(in_stack_ffffffffffffffac, *(*0x140039488 + 0x28)), \"Mrt Delta Update Started\", \n                              *(*0x140039488 + 0x20), *(*0x140039488 + 0x18), *(*0x140039488 + 0x10), \n                              *(*0x140039488 + 8));\n            }\n            (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)();\n            iVar3 = iVar4;\n        }\n        uVar2 = fcn.140003828(iVar3, iVar1, arg1);\n        if (-1 < uVar2) {\n            fcn.14000210c(arg1);\n            uVar2 = 0;\n        }\n    }\n    return uVar2;\n}\n",
        "token_count": 1304
    },
    "140004b2": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint64_t fcn.140004b2c(ulong noname_0, ulong noname_1, ulong arg3)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    ulong *puVar4;\n    ulong uVar5;\n    uchar *arg1;\n    int64_t *piVar6;\n    uchar *arg1_00;\n    uint64_t *puVar7;\n    uchar *puVar8;\n    uint64_t arg4;\n    uint64_t uVar9;\n    uint32_t in_stack_ffffffffffffff08;\n    uchar *puVar10;\n    uchar *puVar11;\n    uchar *puVar12;\n    uint64_t arg_a8h;\n    int64_t in_stack_ffffffffffffff38;\n    uchar *puVar13;\n    int64_t in_stack_ffffffffffffff40;\n    int64_t arg1_01;\n    int64_t arg_d8h;\n    uchar *puStack184;\n    ulong uStack176;\n    ulong uStack168;\n    uchar *puStack160;\n    ulong uStack152;\n    ulong uStack144;\n    ulong uStack136;\n    uchar *puStack128;\n    ulong uStack120;\n    uchar uStack112;\n    uchar uStack108;\n    uchar auStack104 [8];\n    uint32_t uStack96;\n    uchar auStack88 [16];\n    uchar auStack72 [16];\n    uint uStack56;\n    \n    arg1_00 = NULL;\n    *0x140039278 = 0;\n    *0x140039268 = 0;\n    *0x140039280 = 1;\n    *0x140039260 = 0x14002f550;\n    piVar6 = 0x140039268;\n    *0x140037208 = 0x140039268;\n    puVar7 = 0x140039260;\n    do {\n        puVar13 = *puVar7;\n        puVar7 = puVar7 + 1;\n        uStack120 = 0;\n        piVar6[4] = puVar13;\n        arg4 = 1;\n        puStack128 = puVar13;\n        (*_sym.imp.ADVAPI32.dll_RegisterTraceGuidsW)(0x140004750, piVar6, puVar13, 1, &puStack128, 0, 0, piVar6 + 1);\n        piVar6 = *piVar6;\n    } while (piVar6 != NULL);\n    uStack112 = 0;\n    uStack168 = 0;\n    uVar1 = fcn.14000ad30();\n    puVar12 = uVar1;\n    puVar8 = arg1_00;\n    if (-1 < uVar1) {\n        uStack168 = 0x795c4bd4;\n        puVar12 = arg1_00;\n        puVar8 = 0x795c4bd4;\n    }\n    if (puVar12 >> 0x1f != 0) {\n        if (puVar8 != NULL) {\n            fcn.14000c388();\n            if (*0x1400394b8 != 0) {\n                fcn.14000b04c();\n            }\n            fcn.14000ac8c(1);\n        }\n        puVar4 = *0x140037208;\n        if (*0x140037208 != 0x140037208) {\n            for (; puVar4 != NULL; puVar4 = *puVar4) {\n                if (puVar4[1] != 0) {\n                    (*_sym.imp.ADVAPI32.dll_UnregisterTraceGuids)();\n                    puVar4[1] = 0;\n                }\n            }\n            *0x140037208 = 0x140037208;\n            return puVar12;\n        }\n        return puVar12;\n    }\n    puStack160 = NULL;\n    puVar10 = NULL;\n    uVar1 = fcn.14000459c(&stack0xffffffffffffff10);\n    uVar9 = uVar1;\n    puVar12 = puVar10;\n    if (-1 < uVar1) {\n        puVar13 = 0x104;\n        uVar5 = 0;\n        iVar2 = (*_sym.imp.KERNEL32.dll_GetModuleFileNameW)(0, puVar10);\n        if ((iVar2 == 0x104) || (iVar2 == 0)) {\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            uVar9 = uVar1 & 0xffff | 0x80070000;\n            if (uVar1 < 1) {\n                uVar9 = uVar1;\n                arg1_00 = NULL;\n            }\n        }\n        else {\n            puVar11 = NULL;\n            puVar13 = puVar10;\n            uVar1 = fcn.14000adc4(uVar5, &stack0xffffffffffffff10, puVar10);\n            uVar9 = uVar1;\n            puVar12 = puVar11;\n            if (-1 < uVar1) {\n                _auStack104 = ZEXT816(0);\n                auStack88 = ZEXT816(0);\n                auStack72 = ZEXT816(0);\n                uStack56 = 0;\n                uVar1 = fcn.14000af04(auStack104, puVar11);\n                uVar9 = uVar1;\n                if (-1 < uVar1) {\n                    puVar12 = NULL;\n                    arg4 = uStack96;\n                    puVar13 = uStack96 >> 0x10;\n                    uVar1 = fcn.1400097e8(&stack0xffffffffffffff10, 0x14002f770, puVar13, arg4);\n                    uVar9 = uVar1;\n                    arg1 = puVar12;\n                    if (-1 < uVar1) {\n                        arg1 = arg1_00;\n                        arg1_00 = puVar12;\n                        puStack160 = puVar12;\n                    }\n                    if (arg1 != NULL) {\n                        fcn.14001ea10(arg1);\n                    }\n                }\n            }\n            if (puVar11 != NULL) {\n                fcn.14001ea10(puVar11);\n            }\n        }\n    }\n    if (puVar10 != NULL) {\n        fcn.14001ea10(puVar10);\n    }\n    if (uVar9 >> 0x1f != 0) {\n        if (arg1_00 != NULL) {\n            fcn.14001ea10(arg1_00);\n        }\n        if (puVar8 != NULL) {\n            fcn.14000c388();\n            if (*0x1400394b8 != 0) {\n                fcn.14000b04c();\n            }\n            fcn.14000ac8c(1);\n        }\n        puVar4 = *0x140037208;\n        if (*0x140037208 != 0x140037208) {\n            for (; puVar4 != NULL; puVar4 = *puVar4) {\n                if (puVar4[1] != 0) {\n                    (*_sym.imp.ADVAPI32.dll_UnregisterTraceGuids)();\n                    puVar4[1] = 0;\n                }\n            }\n            *0x140037208 = 0x140037208;\n            return uVar9;\n        }\n        return uVar9;\n    }\n    _auStack104 = _auStack104 & 0xffffffffffffffff;\n    puVar4 = fcn.14000ac54(&stack0xffffffffffffff40);\n    uVar5 = *puVar4;\n    *puVar4 = 0;\n    _auStack104 = CONCAT88(uVar5, auStack104);\n    if (in_stack_ffffffffffffff40 != 0) {\n        fcn.14001ea10(in_stack_ffffffffffffff40);\n    }\n    puVar4 = fcn.14000ac54(&stack0xffffffffffffff38);\n    uVar5 = *puVar4;\n    *puVar4 = 0;\n    auStack88 = CONCAT88(auStack88._8_8_, uVar5);\n    if (in_stack_ffffffffffffff38 != 0) {\n        fcn.14001ea10(in_stack_ffffffffffffff38);\n    }\n    puVar4 = fcn.14000ac54(&stack0xffffffffffffff40);\n    uVar5 = *puVar4;\n    *puVar4 = 0;\n    auStack88 = CONCAT88(uVar5, auStack88._0_8_);\n    if (in_stack_ffffffffffffff40 != 0) {\n        fcn.14001ea10(in_stack_ffffffffffffff40);\n    }\n    puVar7 = fcn.14000ac54(&stack0xffffffffffffff38);\n    auStack72._0_8_ = *puVar7;\n    *puVar7 = 0;\n    if (in_stack_ffffffffffffff38 != 0) {\n        fcn.14001ea10(in_stack_ffffffffffffff38);\n    }\n    auStack72 = ZEXT816(auStack72._0_8_);\n    if (*0x140039490 == NULL) {\n        puVar10 = 0xfa0;\n        (*_sym.imp.KERNEL32.dll_InitializeCriticalSectionAndSpinCount)(0x1400394d0);\n        *0x140039490 = 0x1400394d0;\n        fcn.14000897c();\n        if (*0x140039490 != NULL) goto code_r0x000140004fa7;\n    }\n    else {\ncode_r0x000140004fa7:\n        puVar11 = *0x140039490;\n        (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(*0x140039490);\n        if (*0x140039488 != 0) {\n            fcn.140008890(*0x140039488);\n            *0x140039488 = 0;\n            fcn.1400089c4();\n            fcn.14000897c();\n        }\n        puVar10 = auStack104;\n        *0x140039488 = fcn.140008654(0x140039500, puVar10);\n        (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(puVar11);\n    }\n    fcn.14000469c(auStack104);\n    puVar11 = *0x140039490;\n    uStack108 = 0;\n    if (*0x140039490 != NULL) {\n        (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(*0x140039490);\n        if (((5 < *0x140037270) && ((*0x140037280 & 0x400000000000) != 0)) &&\n           ((*0x140037288 & 0x400000000000) == *0x140037288)) {\n            puVar12 = *(*0x140039488 + 0x10);\n            puStack184 = *(*0x140039488 + 8);\n            uStack176 = 0x1000000;\n            puVar10 = 0x1400336e5;\n            fcn.14000150c(*0x140039488, 0x1400336e5, puVar13, arg4, &uStack176, &puStack184, &stack0xffffffffffffff10, \n                          &stack0xffffffffffffff38, &stack0xffffffffffffff40, &stack0xffffffffffffff34, \n                          &stack0xffffffffffffff30, &stack0xffffffffffffff2c, &stack0xffffffffffffff28, \n                          &stack0xffffffffffffff24, &stack0xffffffffffffff20, &stack0xffffffffffffff1c, \n                          &stack0xffffffffffffff18, &stack0xffffffffffffff0c, in_stack_ffffffffffffff08, puVar12, \n                          CONCAT44(*(*0x140039488 + 0x34), *(*0x140039488 + 0x38)), \n                          CONCAT14(*(*0x140039488 + 0x2c), *(*0x140039488 + 0x30)), \n                          CONCAT14(*(*0x140039488 + 0x2a), *(*0x140039488 + 0x2b)), \n                          CONCAT14(*(*0x140039488 + 0x28), *(*0x140039488 + 0x29)), *(*0x140039488 + 0x18), \n                          *(*0x140039488 + 0x20));\n        }\n        (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(puVar11);\n    }\n    in_stack_ffffffffffffff08 = in_stack_ffffffffffffff08 & 0xffffff00;\n    uVar1 = fcn.14000aaf4(&stack0xffffffffffffff08, puVar10);\n    if (uVar1 < 0) {\n        if (*0x140039488 != 0) {\n            fcn.140008890(*0x140039488);\n            *0x140039488 = 0;\n        }\n        fcn.1400089c4();\n        if (*0x140039490 != NULL) {\n            (*_sym.imp.KERNEL32.dll_DeleteCriticalSection)();\n            *0x140039490 = NULL;\n        }\n        if (arg1_00 != NULL) {\n            fcn.14001ea10(arg1_00);\n        }\n        if (puVar8 != NULL) {\n            fcn.14000c388();\n            if (*0x1400394b8 != 0) {\n                fcn.14000b04c();\n            }\n            fcn.14000ac8c(1);\n        }\n        puVar4 = *0x140037208;\n        if (*0x140037208 != 0x140037208) {\n            for (; puVar4 != NULL; puVar4 = *puVar4) {\n                if (puVar4[1] != 0) {\n                    (*_sym.imp.ADVAPI32.dll_UnregisterTraceGuids)();\n                    puVar4[1] = 0;\n                }\n            }\n            *0x140037208 = 0x140037208;\n            return uVar1;\n        }\n        return uVar1;\n    }\n    if (in_stack_ffffffffffffff08 == '\\0') {\n        if (*0x140039488 != 0) {\n            fcn.140008890(*0x140039488);\n            *0x140039488 = 0;\n        }\n        fcn.1400089c4();\n        if (*0x140039490 != NULL) {\n            (*_sym.imp.KERNEL32.dll_DeleteCriticalSection)();\n            *0x140039490 = NULL;\n        }\n        if (arg1_00 != NULL) {\n            fcn.14001ea10(arg1_00);\n        }\n        if (puVar8 != NULL) {\n            fcn.14000c388();\n            if (*0x1400394b8 != 0) {\n                fcn.14000b04c();\n            }\n            fcn.14000ac8c(1);\n        }\n        puVar4 = *0x140037208;\n        if (*0x140037208 != 0x140037208) {\n            for (; puVar4 != NULL; puVar4 = *puVar4) {\n                if (puVar4[1] != 0) {\n                    (*_sym.imp.ADVAPI32.dll_UnregisterTraceGuids)();\n                    puVar4[1] = 0;\n                }\n            }\n            *0x140037208 = 0x140037208;\n        }\n        return 0x80070005;\n    }\n    arg1_01 = 0;\n    puVar13 = NULL;\n    uVar1 = fcn.14000a6e8(_sym.imp.KERNEL32.dll_GetSystemDirectoryW, &stack0xffffffffffffff38, 0);\n    if (uVar1 < 0) {\n        if (puVar13 != NULL) {\n            fcn.14001ea10(puVar13);\n        }\n        if (*0x140039488 != 0) {\n            fcn.140008890(*0x140039488);\n            *0x140039488 = 0;\n        }\n        fcn.1400089c4();\n        if (*0x140039490 != NULL) {\n            (*_sym.imp.KERNEL32.dll_DeleteCriticalSection)();\n            *0x140039490 = NULL;\n        }\n        if (arg1_00 != NULL) {\n            fcn.14001ea10(arg1_00);\n        }\n        if (puVar8 != NULL) {\n            fcn.14000c388();\n            if (*0x1400394b8 != 0) {\n                fcn.14000b04c();\n            }\n            fcn.14000ac8c(1);\n        }\n        puVar4 = *0x140037208;\n        if (*0x140037208 != 0x140037208) {\n            for (; puVar4 != NULL; puVar4 = *puVar4) {\n                if (puVar4[1] != 0) {\n                    (*_sym.imp.ADVAPI32.dll_UnregisterTraceGuids)();\n                    puVar4[1] = 0;\n                }\n            }\n            *0x140037208 = 0x140037208;\n            return uVar1;\n        }\n        return uVar1;\n    }\n    puVar10 = puVar13;\n    puVar11 = puVar13;\n    uVar1 = fcn.1400097e8(&stack0xffffffffffffff40, L\"%s\\\\MRT.exe\", puVar13, arg4);\n    if (uVar1 < 0) {\n        if (puVar13 != NULL) {\n            fcn.14001ea10(puVar13);\n        }\n        if (arg1_01 != 0) {\n            fcn.14001ea10(arg1_01);\n        }\n        if (*0x140039488 != 0) {\n            fcn.140008890(*0x140039488);\n            *0x140039488 = 0;\n        }\n        fcn.1400089c4();\n        if (*0x140039490 != NULL) {\n            (*_sym.imp.KERNEL32.dll_DeleteCriticalSection)();\n            *0x140039490 = NULL;\n        }\n        if (arg1_00 != NULL) {\n            fcn.14001ea10(arg1_00);\n        }\n        if (puVar8 != NULL) {\n            fcn.14000c388();\n            if (*0x1400394b8 != 0) {\n                fcn.14000b04c();\n            }\n            fcn.14000ac8c(1);\n        }\n        puVar4 = *0x140037208;\n        if (*0x140037208 != 0x140037208) {\n            for (; puVar4 != NULL; puVar4 = *puVar4) {\n                if (puVar4[1] != 0) {\n                    (*_sym.imp.ADVAPI32.dll_UnregisterTraceGuids)();\n                    puVar4[1] = 0;\n                }\n            }\n            *0x140037208 = 0x140037208;\n            return uVar1;\n        }\n        return uVar1;\n    }\n    arg_d8h = arg1_01;\n    uVar1 = fcn.140003f94(arg1_01);\n    puStack128 = *0x140039490;\n    if (*0x140039490 != NULL) {\n        (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(*0x140039490);\n        if (((5 < *0x140037270) && ((*0x140037280 & 0x400000000000) != 0)) &&\n           ((*0x140037288 & 0x400000000000) == *0x140037288)) {\n            puVar12 = puVar12 & 0xffffffff00000000 | *(*0x140039488 + 0x28);\n            uStack176 = *(*0x140039488 + 0x20);\n            puStack184 = *(*0x140039488 + 0x18);\n            uStack152 = *(*0x140039488 + 0x10);\n            uStack144 = *(*0x140039488 + 8);\n            uStack136 = 0x1000000;\n            fcn.14000150c(*0x140039488, 0x1400337c2, puVar10, arg4, &uStack136, &uStack144, &uStack152, &puStack184, \n                          &uStack176, &stack0xffffffffffffff10, &stack0xffffffffffffff18, &stack0xffffffffffffff1c, \n                          &stack0xffffffffffffff20, &stack0xffffffffffffff24, &stack0xffffffffffffff28, \n                          &stack0xffffffffffffff2c, &stack0xffffffffffffff30, &stack0xffffffffffffff34, \n                          CONCAT44(uVar1, in_stack_ffffffffffffff08), puVar12, \n                          CONCAT14(*(*0x140039488 + 0x2a), *(*0x140039488 + 0x29)), \n                          CONCAT14(*(*0x140039488 + 0x2c), *(*0x140039488 + 0x2b)), *(*0x140039488 + 0x30), \n                          CONCAT44(uVar1, *(*0x140039488 + 0x38)), puVar11, arg_d8h);\n        }\n        (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(puStack128);\n    }\n    if (uVar1 < 0) {\n        if (puVar13 != NULL) {\n            fcn.14001ea10(puVar13);\n        }\n        if (arg1_01 != 0) {\n            fcn.14001ea10(arg1_01);\n        }\n        if (*0x140039488 != 0) {\n            fcn.140008890(*0x140039488);\n            *0x140039488 = 0;\n        }\n        fcn.1400089c4();\n        if (*0x140039490 != NULL) {\n            (*_sym.imp.KERNEL32.dll_DeleteCriticalSection)();\n            *0x140039490 = NULL;\n        }\n        if (arg1_00 != NULL) {\n            fcn.14001ea10(arg1_00);\n        }\n        if (puVar8 != NULL) {\n            fcn.14000c388();\n            if (*0x1400394b8 != 0) {\n                fcn.14000b04c();\n            }\n            fcn.14000ac8c(1);\n        }\n        puVar4 = *0x140037208;\n        if (*0x140037208 == 0x140037208) goto code_r0x000140005cb8;\n        for (; puVar4 != NULL; puVar4 = *puVar4) {\n            if (puVar4[1] != 0) {\n                (*_sym.imp.ADVAPI32.dll_UnregisterTraceGuids)();\n                puVar4[1] = 0;\n            }\n        }\n    }\n    else {\n        puVar10 = puVar13;\n        uVar1 = fcn.1400047d0(puVar13, arg1_01, arg3);\n        uVar9 = uVar1;\n        puStack184 = *0x140039490;\n        if (*0x140039490 != NULL) {\n            (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(*0x140039490);\n            if (((5 < *0x140037270) && ((*0x140037280 & 0x400000000000) != 0)) &&\n               ((*0x140037288 & 0x400000000000) == *0x140037288)) {\n                puVar12 = puVar12 & 0xffffffff00000000 | uVar1;\n                puStack128 = *(*0x140039488 + 0x20);\n                uStack136 = *(*0x140039488 + 0x18);\n                uStack144 = *(*0x140039488 + 0x10);\n                uStack152 = *(*0x140039488 + 8);\n                uStack176 = 0x1000000;\n                fcn.14000150c(*0x140039488, 0x1400338a3, uVar9, arg4, &uStack176, &uStack152, &uStack144, &uStack136, \n                              &puStack128, &stack0xffffffffffffff18, &stack0xffffffffffffff1c, &stack0xffffffffffffff20\n                              , &stack0xffffffffffffff24, &stack0xffffffffffffff28, &stack0xffffffffffffff2c, \n                              &stack0xffffffffffffff30, &stack0xffffffffffffff34, &stack0xffffffffffffff10, \n                              CONCAT44(uVar1, in_stack_ffffffffffffff08), puVar12, \n                              CONCAT14(*(*0x140039488 + 0x29), *(*0x140039488 + 0x28)), \n                              CONCAT14(*(*0x140039488 + 0x2b), *(*0x140039488 + 0x2a)), \n                              CONCAT44(*(*0x140039488 + 0x30), *(*0x140039488 + 0x2c)), *(*0x140039488 + 0x34), puVar11\n                              , arg_d8h);\n            }\n            puVar10 = puStack184;\n            (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)();\n            uVar9 = uVar1;\n        }\n        iVar2 = fcn.14000ad98(puVar10, 0x44f5);\n        if ((-1 < iVar2) && (-1 < uVar9)) {\n            uVar3 = fcn.140001d88(arg1_00);\n            arg_a8h = puVar12 & 0xffffffff00000000 | uVar3;\n            if ((uVar3 < 0) && (puStack184 = *0x140039490,  *0x140039490 != NULL)) {\n                (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(*0x140039490);\n                if (((5 < *0x140037270) && ((*0x140037280 & 0x400000000000) != 0)) &&\n                   ((*0x140037288 & 0x400000000000) == *0x140037288)) {\n                    puStack128 = *(*0x140039488 + 0x20);\n                    uStack136 = *(*0x140039488 + 0x18);\n                    uStack144 = *(*0x140039488 + 0x10);\n                    uStack152 = *(*0x140039488 + 8);\n                    uStack176 = 0x1000000;\n                    fcn.14000150c(*0x140039488, 0x1400335f7, uVar9, arg4, &uStack176, &uStack152, &uStack144, &uStack136\n                                  , &puStack128, &stack0xffffffffffffff18, &stack0xffffffffffffff1c, \n                                  &stack0xffffffffffffff20, &stack0xffffffffffffff24, &stack0xffffffffffffff28, \n                                  &stack0xffffffffffffff2c, &stack0xffffffffffffff30, &stack0xffffffffffffff34, \n                                  &stack0xffffffffffffff10, CONCAT44(uVar1, in_stack_ffffffffffffff08), arg_a8h, \n                                  CONCAT14(*(*0x140039488 + 0x29), *(*0x140039488 + 0x28)), \n                                  CONCAT14(*(*0x140039488 + 0x2b), *(*0x140039488 + 0x2a)), \n                                  CONCAT44(*(*0x140039488 + 0x30), *(*0x140039488 + 0x2c)), *(*0x140039488 + 0x34), \n                                  puVar11, arg_d8h);\n                }\n                (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(puStack184);\n            }\n        }\n        if (puVar13 != NULL) {\n            fcn.14001ea10(puVar13);\n        }\n        if (arg1_01 != 0) {\n            fcn.14001ea10(arg1_01);\n        }\n        if (*0x140039488 != 0) {\n            fcn.140008890(*0x140039488);\n            *0x140039488 = 0;\n        }\n        fcn.1400089c4();\n        if (*0x140039490 != NULL) {\n            (*_sym.imp.KERNEL32.dll_DeleteCriticalSection)();\n            *0x140039490 = NULL;\n        }\n        if (arg1_00 != NULL) {\n            fcn.14001ea10(arg1_00);\n        }\n        if (puVar8 != NULL) {\n            fcn.14000c388();\n            if (*0x1400394b8 != 0) {\n                fcn.14000b04c();\n            }\n            fcn.14000ac8c(1);\n        }\n        puVar4 = *0x140037208;\n        if (*0x140037208 == 0x140037208) goto code_r0x000140005cb8;\n        for (; puVar4 != NULL; puVar4 = *puVar4) {\n            if (puVar4[1] != 0) {\n                (*_sym.imp.ADVAPI32.dll_UnregisterTraceGuids)();\n                puVar4[1] = 0;\n            }\n        }\n    }\n    *0x140037208 = 0x140037208;\ncode_r0x000140005cb8:\n    return uVar1;\n}\n",
        "token_count": 6486
    },
    "14001cda": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\nuint fcn.14001cda8(uint64_t arg1, int64_t arg2, int64_t arg3)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    int64_t arg2_00;\n    int64_t iVar3;\n    uint64_t uVar4;\n    uint uVar5;\n    uint uVar6;\n    uint64_t arg3_00;\n    uint64_t arg1_00;\n    \n    arg1_00 = arg1 & 0xffffffff;\n    arg2_00 = fcn.140018b3c(arg1, 0, 1);\n    iVar3 = fcn.140018b3c(arg1_00, 0, 2);\n    uVar4 = arg2 - iVar3;\n    if ((arg2_00 == -1) || (iVar3 == -1)) {\n        if (*(arg3 + 0x30) == '\\0') {\n            uVar6 = 0x16;\n        }\n        else {\n            uVar6 = *(arg3 + 0x2c);\n        }\n    }\n    else {\n        uVar5 = 0;\n        if (uVar4 < 1) {\n            uVar6 = 0;\n            if (uVar4 < 0) {\n                iVar3 = fcn.140018b3c(arg1_00, arg2, 0);\n                uVar6 = uVar5;\n                if (iVar3 == -1) {\n                    if (*(arg3 + 0x30) != '\\0') {\n                        uVar6 = *(arg3 + 0x2c);\n                    }\n                }\n                else {\n                    fcn.1400185fc(arg1_00);\n                    iVar2 = (*_sym.imp.KERNEL32.dll_SetEndOfFile)();\n                    if (iVar2 == 0) {\n                        uVar5 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                        *(arg3 + 0x38) = 1;\n                        uVar6 = 0xd;\n                        *(arg3 + 0x34) = uVar5;\n                        *(arg3 + 0x30) = 1;\n                        *(arg3 + 0x2c) = 0xd;\n                    }\n                }\n            }\n        }\n        else {\n            iVar3 = fcn.140015d00(0x1000, 1);\n            if (iVar3 == 0) {\n                uVar5 = 0xc;\n                *(arg3 + 0x30) = 1;\n                *(arg3 + 0x2c) = 0xc;\n            }\n            else {\n                uVar1 = fcn.14001cc2c(arg1_00, 0x8000);\n                do {\n                    arg3_00 = uVar4 & 0xffffffff;\n                    if (0xfff < uVar4) {\n                        arg3_00 = 0x1000;\n                    }\n                    iVar2 = fcn.1400139d4(arg1_00, iVar3, arg3_00, arg3);\n                    if (iVar2 == -1) {\n                        if ((*(arg3 + 0x38) != '\\0') && (*(arg3 + 0x34) == 5)) {\n                            *(arg3 + 0x30) = 1;\n                            *(arg3 + 0x2c) = 0xd;\n                        }\n                        if (*(arg3 + 0x30) != '\\0') {\n                            uVar5 = *(arg3 + 0x2c);\n                        }\n                        goto code_r0x00014001ce99;\n                    }\n                    uVar4 = uVar4 - iVar2;\n                } while (0 < uVar4);\n                fcn.14001cc2c(arg1_00, uVar1);\n            }\ncode_r0x00014001ce99:\n            fcn.140012664(iVar3);\n            uVar6 = uVar5;\n        }\n    }\n    fcn.140018b3c(arg1_00, arg2_00, 0);\n    return uVar6;\n}\n",
        "token_count": 887
    },
    "1400082a": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.1400082a4(int64_t arg1, int64_t arg2)\n\n{\n    int64_t *piVar1;\n    int64_t *piVar2;\n    uint uVar3;\n    uint uVar4;\n    int64_t iVar5;\n    int64_t iVar6;\n    int64_t arg1_00;\n    int64_t *piVar7;\n    int64_t arg1_01;\n    int64_t *piVar9;\n    int64_t aiStack64 [3];\n    int64_t *piVar8;\n    \n    if (arg1 != arg2) {\n        piVar7 = arg2 + 8;\n        piVar9 = arg1 + 8;\n        do {\n            piVar8 = piVar7 + -3;\n            piVar1 = piVar9 + -1;\n            piVar2 = piVar7 + -4;\n            if (piVar1 == piVar2) {\n                return;\n            }\n            arg1_01 = *piVar9;\n            iVar5 = *piVar1;\n            *piVar9 = 0;\n            uVar3 = *(piVar9 + 1);\n            uVar4 = *(piVar9 + 0xc);\n            *piVar1 = *piVar2;\n            if (piVar9 != piVar8) {\n                iVar6 = *piVar8;\n                *piVar8 = 0;\n                arg1_00 = *piVar9;\n                *piVar9 = iVar6;\n                if (arg1_00 != 0) {\n                    fcn.14001ea10(arg1_00);\n                }\n            }\n            *(piVar9 + 1) = *(piVar7 + -2);\n            *(piVar9 + 0xc) = *(piVar7 + -0xc);\n            *piVar2 = iVar5;\n            if (piVar8 != aiStack64) {\n                iVar5 = *piVar8;\n                *piVar8 = arg1_01;\n                arg1_01 = 0;\n                if (iVar5 != 0) {\n                    fcn.14001ea10(iVar5);\n                }\n            }\n            *(piVar7 + -2) = uVar3;\n            *(piVar7 + -0xc) = uVar4;\n            if (arg1_01 != 0) {\n                fcn.14001ea10(arg1_01);\n            }\n            piVar1 = piVar9 + 2;\n            piVar7 = piVar8;\n            piVar9 = piVar9 + 3;\n        } while (piVar1 != piVar2);\n    }\n    return;\n}\n",
        "token_count": 578
    },
    "14000985": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.140009858(uint64_t *arg1, int64_t *arg2, ulong arg3, ulong arg4)\n\n{\n    uchar auVar1 [16];\n    int32_t iVar2;\n    ulong uVar3;\n    int64_t iVar4;\n    uint64_t uVar5;\n    int64_t iVar6;\n    uint64_t arg2_00;\n    uchar auStack664 [32];\n    ulong uStack632;\n    uint64_t auStack616 [2];\n    int16_t aiStack600 [264];\n    uint64_t uStack72;\n    \n    uStack72 = *0x140037f00 ^ auStack664;\n    uVar5 = *arg1;\n    auStack616[0] = 0;\n    uStack632 = arg4;\n    if (*arg2 == 0) {\n        uVar5 = 0x104;\n        iVar2 = fcn.14000966c(aiStack600, 0x104, auStack616, arg3);\n        if (-1 < iVar2) {\n            iVar6 = -1;\n            do {\n                iVar4 = iVar6;\n                iVar6 = iVar4 + 1;\n            } while (aiStack600[iVar6] != 0);\n            uVar5 = iVar4 + 2;\n            fcn.14001ea10(*arg2);\n            auVar1 = ZEXT816(2) * ZEXT816(uVar5);\n            uVar3 = SUB168(auVar1, 0);\n            if (SUB168(auVar1 >> 0x40, 0) != 0) {\n                uVar3 = 0xffffffffffffffff;\n            }\n            iVar6 = fcn.14001ea5c(uVar3, 0x14002f788);\n            *arg2 = iVar6;\n            if (iVar6 != 0) {\n                fcn.140020a40(iVar6, aiStack600, uVar5 * 2);\n                iVar6 = -1;\n                do {\n                    iVar4 = iVar6;\n                    iVar6 = iVar4 + 1;\n                } while (aiStack600[iVar6] != 0);\n                *arg1 = iVar4 + 2;\n            }\n            goto code_r0x0001400099d5;\n        }\n    }\n    else {\n        iVar2 = fcn.14000966c(*arg2, uVar5, auStack616, arg3);\n        if (iVar2 != -0x7ff8ff86) goto code_r0x0001400099d5;\n    }\n    do {\n        arg2_00 = auStack616[0];\n        if (auStack616[0] <= uVar5) {\n            arg2_00 = uVar5 * 3 >> 1;\n        }\n        if (0x7fffffff < arg2_00) break;\n        fcn.14001ea10(*arg2);\n        uVar3 = SUB168(ZEXT816(2) * ZEXT816(arg2_00), 0);\n        if (SUB168(ZEXT816(2) * ZEXT816(arg2_00) >> 0x40, 0) != 0) {\n            uVar3 = 0xffffffffffffffff;\n        }\n        iVar6 = fcn.14001ea5c(uVar3, 0x14002f788);\n        *arg2 = iVar6;\n        if (iVar6 == 0) {\n            *arg1 = 0;\n            break;\n        }\n        *arg1 = arg2_00;\n        uStack632 = arg4;\n        iVar2 = fcn.14000966c(*arg2, arg2_00, auStack616, arg3);\n        uVar5 = arg2_00;\n    } while (iVar2 == -0x7ff8ff86);\ncode_r0x0001400099d5:\n    fcn.14001e9f0(uStack72 ^ auStack664);\n    return;\n}\n",
        "token_count": 859
    },
    "14000a61": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nuint64_t fcn.14000a618(ulong arg1, int64_t *arg2)\n\n{\n    int64_t arg1_00;\n    int32_t iVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint64_t uVar4;\n    int64_t iStackX8;\n    \n    *arg2 = 0;\n    iVar1 = (**0x140029a28)(0, 0);\n    if (iVar1 == 0) {\n        uVar4 = fcn.14000a4bc();\n    }\n    else {\n        iStackX8 = 0;\n        uVar2 = fcn.14000459c(&iStackX8);\n        arg1_00 = iStackX8;\n        uVar4 = uVar2;\n        if (uVar2 < 0) {\n            if (iStackX8 != 0) {\n                fcn.14001ea10(iStackX8);\n            }\n        }\n        else {\n            iVar3 = (**0x140029a28)(iStackX8, iVar1);\n            if (iVar3 == iVar1 + -1) {\n                if (*(arg1_00 + (iVar3 - 1) * 2) == 0x5c) {\n                    *(arg1_00 + (iVar3 - 1) * 2) = 0;\n                }\n                *arg2 = arg1_00;\n                uVar4 = 0;\n            }\n            else {\n                uVar2 = fcn.14000a4bc();\n                uVar4 = uVar2;\n                if (arg1_00 != 0) {\n                    fcn.14001ea10(arg1_00);\n                }\n            }\n        }\n    }\n    return uVar4;\n}\n",
        "token_count": 387
    },
    "14000a96": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nint32_t fcn.14000a960(int64_t *arg1, ulong pSid)\n\n{\n    int64_t arg1_00;\n    uint32_t uVar1;\n    int32_t iVar2;\n    int64_t iStackX24;\n    \n    uVar1 = (*_sym.imp.ADVAPI32.dll_GetLengthSid)(pSid);\n    iStackX24 = 0;\n    iVar2 = fcn.14000abc4(&iStackX24, uVar1);\n    arg1_00 = iStackX24;\n    if (iVar2 < 0) {\n        if (iStackX24 != 0) {\n            fcn.140003560(iStackX24);\n        }\n    }\n    else {\n        iVar2 = (*_sym.imp.ADVAPI32.dll_CopySid)(uVar1, iStackX24, pSid);\n        if (iVar2 == 0) {\n            iVar2 = fcn.14000a4bc();\n            if (arg1_00 != 0) {\n                fcn.140003560(arg1_00);\n            }\n        }\n        else {\n            *arg1 = arg1_00;\n            iVar2 = 0;\n        }\n    }\n    return iVar2;\n}\n",
        "token_count": 269
    },
    "140014b3": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.140014b30(ulong *arg1, uchar *arg2, int64_t arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    int64_t arg2_00;\n    uint32_t in_stack_00000030;\n    int32_t aiStack24 [4];\n    \n    fcn.14001aafc(*arg1, in_stack_00000030 + 1, 1, aiStack24);\n    arg2_00 = (arg3 - (0 < in_stack_00000030)) - (aiStack24[0] == 0x2d);\n    if (arg3 == -1) {\n        arg2_00 = arg3;\n    }\n    iVar1 = fcn.14001a550(arg2 + (0 < in_stack_00000030) + (aiStack24[0] == 0x2d), arg2_00, in_stack_00000030 + 1, \n                          aiStack24);\n    if (iVar1 == 0) {\n        fcn.140014c2c(arg2, arg3, in_stack_00000030);\n    }\n    else {\n        *arg2 = 0;\n    }\n    return;\n}\n",
        "token_count": 265
    },
    "140014e1": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.140014e10(ulong *arg1, uchar *arg2, int64_t arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    int64_t arg2_00;\n    uint32_t in_stack_00000030;\n    uchar auStack24 [16];\n    \n    auStack24 = ZEXT816(0);\n    fcn.14001aafc(*arg1, in_stack_00000030, 0, auStack24);\n    arg2_00 = arg3 - (auStack24._0_4_ == 0x2d);\n    if (arg3 == -1) {\n        arg2_00 = arg3;\n    }\n    iVar1 = fcn.14001a550(arg2 + (auStack24._0_4_ == 0x2d), arg2_00, auStack24._4_4_ + in_stack_00000030, auStack24);\n    if (iVar1 == 0) {\n        fcn.140014ee8(arg2, arg3, in_stack_00000030, auStack24);\n    }\n    else {\n        *arg2 = 0;\n    }\n    return;\n}\n",
        "token_count": 269
    },
    "14001504": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.140015040(ulong *arg1, uchar *arg2, int64_t arg3, ulong arg4)\n\n{\n    char *pcVar1;\n    int32_t iVar2;\n    int64_t arg2_00;\n    char *pcVar3;\n    int32_t iVar4;\n    uint32_t in_stack_00000030;\n    uchar auStack24 [16];\n    \n    auStack24 = ZEXT816(0);\n    fcn.14001aafc(*arg1, in_stack_00000030, 0, auStack24);\n    iVar4 = auStack24._4_4_ + -1;\n    arg2_00 = arg3 - (auStack24._0_4_ == 0x2d);\n    if (arg3 == -1) {\n        arg2_00 = arg3;\n    }\n    iVar2 = fcn.14001a550(arg2 + (auStack24._0_4_ == 0x2d), arg2_00, in_stack_00000030, auStack24);\n    if (iVar2 == 0) {\n        auStack24._4_4_ = auStack24._4_4_ + -1;\n        if ((auStack24._4_4_ < -4) || (in_stack_00000030 <= auStack24._4_4_)) {\n            fcn.140014c2c(arg2, arg3, in_stack_00000030);\n        }\n        else {\n            pcVar1 = arg2 + (auStack24._0_4_ == 0x2d);\n            if (iVar4 < auStack24._4_4_) {\n                do {\n                    pcVar3 = pcVar1;\n                    pcVar1 = pcVar3 + 1;\n                } while (*pcVar3 != '\\0');\n                pcVar3[-1] = '\\0';\n            }\n            fcn.140014ee8(arg2, arg3, in_stack_00000030, auStack24);\n        }\n    }\n    else {\n        *arg2 = 0;\n    }\n    return;\n}\n",
        "token_count": 468
    },
    "140016b9": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nint32_t fcn.140016b94(ulong arg1, ulong noname_1, int64_t arg3, ulong *arg4)\n\n{\n    int32_t iVar1;\n    ulong uVar2;\n    int32_t *piVar3;\n    uint uVar4;\n    uint uVar5;\n    uint uVar6;\n    uint uVar7;\n    uint uVar8;\n    uint uVar9;\n    uint uVar10;\n    uint uVar11;\n    uint *puVar12;\n    uint32_t uVar13;\n    int32_t iVar14;\n    uint *arg2;\n    uint *puVar15;\n    uint *puVar16;\n    uint *puVar17;\n    int64_t iVar18;\n    int64_t iVar19;\n    int64_t iStackX24;\n    ulong *puStackX32;\n    uchar auStack616 [4];\n    uint uStack612;\n    uint auStack608 [2];\n    int64_t *piStack600;\n    ulong **ppuStack592;\n    uint auStack584 [140];\n    \n    iStackX24 = arg3;\n    puStackX32 = arg4;\n    fcn.140016e04(arg3, arg4);\n    uVar13 = fcn.140016894(arg1);\n    if (uVar13 == *(*(iStackX24 + 0x88) + 4)) {\n        iVar14 = 0;\n    }\n    else {\n        arg2 = fcn.140014410(0x228);\n        if (arg2 == NULL) {\n            fcn.140012664(0);\n            iVar14 = -1;\n        }\n        else {\n            iVar18 = 4;\n            iVar19 = 4;\n            puVar16 = *(iStackX24 + 0x88);\n            puVar12 = auStack584;\n            do {\n                puVar17 = puVar12;\n                puVar15 = puVar16;\n                uVar4 = puVar15[1];\n                uVar5 = puVar15[2];\n                uVar6 = puVar15[3];\n                uVar7 = puVar15[4];\n                uVar8 = puVar15[5];\n                uVar9 = puVar15[6];\n                uVar10 = puVar15[7];\n                *puVar17 = *puVar15;\n                puVar17[1] = uVar4;\n                puVar17[2] = uVar5;\n                puVar17[3] = uVar6;\n                uVar4 = puVar15[8];\n                uVar5 = puVar15[9];\n                uVar6 = puVar15[10];\n                uVar11 = puVar15[0xb];\n                puVar17[4] = uVar7;\n                puVar17[5] = uVar8;\n                puVar17[6] = uVar9;\n                puVar17[7] = uVar10;\n                uVar7 = puVar15[0xc];\n                uVar8 = puVar15[0xd];\n                uVar9 = puVar15[0xe];\n                uVar10 = puVar15[0xf];\n                puVar17[8] = uVar4;\n                puVar17[9] = uVar5;\n                puVar17[10] = uVar6;\n                puVar17[0xb] = uVar11;\n                uVar4 = puVar15[0x10];\n                uVar5 = puVar15[0x11];\n                uVar6 = puVar15[0x12];\n                uVar11 = puVar15[0x13];\n                puVar17[0xc] = uVar7;\n                puVar17[0xd] = uVar8;\n                puVar17[0xe] = uVar9;\n                puVar17[0xf] = uVar10;\n                uVar7 = puVar15[0x14];\n                uVar8 = puVar15[0x15];\n                uVar9 = puVar15[0x16];\n                uVar10 = puVar15[0x17];\n                puVar17[0x10] = uVar4;\n                puVar17[0x11] = uVar5;\n                puVar17[0x12] = uVar6;\n                puVar17[0x13] = uVar11;\n                uVar4 = puVar15[0x18];\n                uVar5 = puVar15[0x19];\n                uVar6 = puVar15[0x1a];\n                uVar11 = puVar15[0x1b];\n                puVar17[0x14] = uVar7;\n                puVar17[0x15] = uVar8;\n                puVar17[0x16] = uVar9;\n                puVar17[0x17] = uVar10;\n                uVar7 = puVar15[0x1c];\n                uVar8 = puVar15[0x1d];\n                uVar9 = puVar15[0x1e];\n                uVar10 = puVar15[0x1f];\n                puVar17[0x18] = uVar4;\n                puVar17[0x19] = uVar5;\n                puVar17[0x1a] = uVar6;\n                puVar17[0x1b] = uVar11;\n                puVar17[0x1c] = uVar7;\n                puVar17[0x1d] = uVar8;\n                puVar17[0x1e] = uVar9;\n                puVar17[0x1f] = uVar10;\n                iVar19 = iVar19 + -1;\n                puVar16 = puVar15 + 0x20;\n                puVar12 = puVar17 + 0x20;\n            } while (iVar19 != 0);\n            uVar4 = puVar15[0x21];\n            uVar5 = puVar15[0x22];\n            uVar6 = puVar15[0x23];\n            uVar7 = puVar15[0x24];\n            uVar8 = puVar15[0x25];\n            uVar9 = puVar15[0x26];\n            uVar10 = puVar15[0x27];\n            uVar2 = *(puVar15 + 0x28);\n            puVar17[0x20] = puVar15[0x20];\n            puVar17[0x21] = uVar4;\n            puVar17[0x22] = uVar5;\n            puVar17[0x23] = uVar6;\n            puVar17[0x24] = uVar7;\n            puVar17[0x25] = uVar8;\n            puVar17[0x26] = uVar9;\n            puVar17[0x27] = uVar10;\n            *(puVar17 + 0x28) = uVar2;\n            puVar16 = auStack584;\n            puVar12 = arg2;\n            do {\n                puVar17 = puVar12;\n                puVar15 = puVar16;\n                uVar4 = puVar15[1];\n                uVar5 = puVar15[2];\n                uVar6 = puVar15[3];\n                uVar7 = puVar15[4];\n                uVar8 = puVar15[5];\n                uVar9 = puVar15[6];\n                uVar10 = puVar15[7];\n                *puVar17 = *puVar15;\n                puVar17[1] = uVar4;\n                puVar17[2] = uVar5;\n                puVar17[3] = uVar6;\n                uVar4 = puVar15[8];\n                uVar5 = puVar15[9];\n                uVar6 = puVar15[10];\n                uVar11 = puVar15[0xb];\n                puVar17[4] = uVar7;\n                puVar17[5] = uVar8;\n                puVar17[6] = uVar9;\n                puVar17[7] = uVar10;\n                uVar7 = puVar15[0xc];\n                uVar8 = puVar15[0xd];\n                uVar9 = puVar15[0xe];\n                uVar10 = puVar15[0xf];\n                puVar17[8] = uVar4;\n                puVar17[9] = uVar5;\n                puVar17[10] = uVar6;\n                puVar17[0xb] = uVar11;\n                uVar4 = puVar15[0x10];\n                uVar5 = puVar15[0x11];\n                uVar6 = puVar15[0x12];\n                uVar11 = puVar15[0x13];\n                puVar17[0xc] = uVar7;\n                puVar17[0xd] = uVar8;\n                puVar17[0xe] = uVar9;\n                puVar17[0xf] = uVar10;\n                uVar7 = puVar15[0x14];\n                uVar8 = puVar15[0x15];\n                uVar9 = puVar15[0x16];\n                uVar10 = puVar15[0x17];\n                puVar17[0x10] = uVar4;\n                puVar17[0x11] = uVar5;\n                puVar17[0x12] = uVar6;\n                puVar17[0x13] = uVar11;\n                uVar4 = puVar15[0x18];\n                uVar5 = puVar15[0x19];\n                uVar6 = puVar15[0x1a];\n                uVar11 = puVar15[0x1b];\n                puVar17[0x14] = uVar7;\n                puVar17[0x15] = uVar8;\n                puVar17[0x16] = uVar9;\n                puVar17[0x17] = uVar10;\n                uVar7 = puVar15[0x1c];\n                uVar8 = puVar15[0x1d];\n                uVar9 = puVar15[0x1e];\n                uVar10 = puVar15[0x1f];\n                puVar17[0x18] = uVar4;\n                puVar17[0x19] = uVar5;\n                puVar17[0x1a] = uVar6;\n                puVar17[0x1b] = uVar11;\n                puVar17[0x1c] = uVar7;\n                puVar17[0x1d] = uVar8;\n                puVar17[0x1e] = uVar9;\n                puVar17[0x1f] = uVar10;\n                iVar18 = iVar18 + -1;\n                puVar16 = puVar15 + 0x20;\n                puVar12 = puVar17 + 0x20;\n            } while (iVar18 != 0);\n            uVar4 = puVar15[0x21];\n            uVar5 = puVar15[0x22];\n            uVar6 = puVar15[0x23];\n            uVar7 = puVar15[0x24];\n            uVar8 = puVar15[0x25];\n            uVar9 = puVar15[0x26];\n            uVar10 = puVar15[0x27];\n            uVar2 = *(puVar15 + 0x28);\n            puVar17[0x20] = puVar15[0x20];\n            puVar17[0x21] = uVar4;\n            puVar17[0x22] = uVar5;\n            puVar17[0x23] = uVar6;\n            puVar17[0x24] = uVar7;\n            puVar17[0x25] = uVar8;\n            puVar17[0x26] = uVar9;\n            puVar17[0x27] = uVar10;\n            *(puVar17 + 0x28) = uVar2;\n            *arg2 = 0;\n            iVar14 = fcn.140016f4c(uVar13, arg2);\n            if (iVar14 == -1) {\n                puVar16 = fcn.14000d3d8();\n                *puVar16 = 0x16;\n                fcn.140012664(arg2);\n                iVar14 = -1;\n            }\n            else {\n                if (noname_1 == '\\0') {\n                    fcn.14001252c();\n                }\n                piVar3 = *(iStackX24 + 0x88);\n                LOCK();\n                iVar1 = *piVar3;\n                *piVar3 = *piVar3 + -1;\n                if ((iVar1 == 1) && (*(iStackX24 + 0x88) != 0x140037880)) {\n                    fcn.140012664(*(iStackX24 + 0x88));\n                }\n                *arg2 = 1;\n                *(iStackX24 + 0x88) = arg2;\n                if ((*0x140037dc0 & *(iStackX24 + 0x3a8)) == 0) {\n                    piStack600 = &iStackX24;\n                    ppuStack592 = &puStackX32;\n                    uStack612 = 5;\n                    auStack608[0] = 5;\n                    fcn.1400166c4(auStack616, auStack608, &piStack600, &uStack612);\n                    if (noname_1 != '\\0') {\n                        *0x140037160 = *puStackX32;\n                    }\n                }\n                fcn.140012664(0);\n            }\n        }\n    }\n    return iVar14;\n}\n",
        "token_count": 3024
    },
    "14001fb2": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuchar (*) [16] fcn.14001fb2c(uchar (*arg1) [16], int32_t *arg2, ulong arg3)\n\n{\n    uint8_t uVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint8_t *puVar7;\n    int32_t *piVar8;\n    int32_t *piVar9;\n    int32_t iVar10;\n    uint uVar11;\n    uint uStack72;\n    uint uStack68;\n    uint uStack60;\n    uint uStack44;\n    uchar auStack40 [16];\n    \n    iVar5 = 0;\n    uStack72 = SUB84(arg2, 0);\n    uStack68 = arg2 >> 0x20;\n    iVar10 = 0;\n    auStack40 = CONCAT412(uStack60, ZEXT812(arg2));\n    iVar6 = 0;\n    uVar11 = uStack60;\n    piVar9 = arg2;\n    fcn.14001febc(arg2, auStack40);\n    iVar4 = 0;\n    if (*arg2 != 0) {\n        piVar8 = *(arg2 + 2);\n        iVar6 = 0;\n        do {\n            iVar3 = iVar5;\n            if (((*(arg2 + 6) <= arg3) && (arg3 <= *(arg2 + 6) >> 0x20)) &&\n               (iVar10 = iVar4,  uVar11 = uStack60,  iVar3 = iVar4,  iVar6 = iVar4,  piVar9 = arg2,  iVar5 == 0)) {\n                iVar10 = iVar5;\n                iVar3 = iVar5;\n            }\n            iVar5 = iVar3;\n            iVar4 = iVar4 + 1;\n            uVar1 = *((*piVar8 & 0xf) + 0x14002f0d8);\n            puVar7 = piVar8 - *((*piVar8 & 0xf) + 0x14002f0c8);\n            uVar2 = *(puVar7 + -4);\n            *(arg2 + 2) = puVar7;\n            arg2[6] = uVar2 >> (uVar1 & 0x1f);\n            uVar1 = *((*puVar7 & 0xf) + 0x14002f0d8);\n            puVar7 = puVar7 + -*((*puVar7 & 0xf) + 0x14002f0c8);\n            uVar2 = *(puVar7 + -4);\n            *(arg2 + 2) = puVar7;\n            arg2[7] = uVar2 >> (uVar1 & 0x1f);\n            uVar1 = *((*puVar7 & 0xf) + 0x14002f0d8);\n            piVar8 = puVar7 + -*((*puVar7 & 0xf) + 0x14002f0c8);\n            uVar2 = piVar8[-1];\n            *(arg2 + 2) = piVar8;\n            arg2[8] = uVar2 >> (uVar1 & 0x1f);\n            iVar3 = *piVar8;\n            piVar8 = piVar8 + 1;\n            *(arg2 + 2) = piVar8;\n            arg2[9] = iVar3;\n        } while (iVar4 != *arg2);\n    }\n    auStack40 = CONCAT412(uVar11, CONCAT48(iVar10, piVar9));\n    fcn.14001febc(arg2, auStack40);\n    *arg1 = CONCAT412(uVar11, CONCAT48(iVar10, piVar9));\n    *arg1[1] = uStack72;\n    *(arg1[1] + 4) = uStack68;\n    *(arg1[1] + 8) = iVar6 + 1;\n    *(arg1[1] + 0xc) = uStack44;\n    return arg1;\n}\n",
        "token_count": 910
    },
    "1400215e": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nuint fcn.1400215e8(ulong arg1, ulong arg2, int64_t arg3)\n\n{\n    int64_t *piVar1;\n    uchar auStackX24 [16];\n    \n    piVar1 = fcn.14001f8f8(arg1, arg2, arg3, auStackX24);\n    return *(*(arg3 + 0x1c) + 4 + *piVar1);\n}\n",
        "token_count": 96
    },
    "14002162": {
        "rules": [
            "execute shellcode via CopyFile2/5e26aed72a5343dd8575e85c80658d9d/1e72b327ed77488fa8075dcc8fba7738"
        ],
        "decompiled_code": "\nvoid fcn.140021620(ulong arg1, ulong arg2, int64_t arg3, ulong arg4)\n\n{\n    int64_t *piVar1;\n    uchar auStackX24 [16];\n    \n    piVar1 = fcn.14001f8f8(arg1, arg2, arg3, auStackX24);\n    if (*(*(arg3 + 0x1c) + 4 + *piVar1) < arg4) {\n        *(*(arg3 + 0x1c) + 4 + *piVar1) = arg4;\n    }\n    return;\n}\n",
        "token_count": 133
    },
    "14000910": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nulong fcn.140009108(ulong arg1)\n\n{\n    if (arg1 == 2) {\n        return 0x80070002;\n    }\n    if (arg1 == 5) {\n        return 0x8007001e;\n    }\n    if (arg1 == 9) {\n        return 0x80070006;\n    }\n    if (arg1 != 0xc) {\n        if (arg1 == 0xd) {\n            return 0x80070005;\n        }\n        if (arg1 == 0x11) {\n            return 0x80070050;\n        }\n        if (arg1 != 0x16) {\n            if (arg1 != 0x1c) {\n                return 0x80004005;\n            }\n            return 0x80070027;\n        }\n    }\n    return 0x8007000e;\n}\n",
        "token_count": 194
    },
    "140009da": {
        "rules": [
            "decompress data using LZO/0e44f942d5744579a3d2494f64545baa"
        ],
        "decompiled_code": "\nuint32_t fcn.140009da8(ulong noname_0, ulong noname_1, ulong arg3)\n\n{\n    uint32_t uVar1;\n    int32_t aiStackX32 [2];\n    ulong auStack24 [3];\n    \n    aiStackX32[0] = 0;\n    auStack24[0] = 4;\n    uVar1 = fcn.140009c54(noname_0, noname_1, aiStackX32, auStack24);\n    if (uVar1 == 0x800700ea) {\n        uVar1 = 0x8007065d;\n    }\n    else if (uVar1 < 0) {\n        if (uVar1 == 0x80070002) {\n            uVar1 = 0x80070002;\n        }\n    }\n    else {\n        uVar1 = -(aiStackX32[0] != 4) & 0x8007065d;\n    }\n    return uVar1;\n}\n",
        "token_count": 222
    },
    "14000c40": {
        "rules": [
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498"
        ],
        "decompiled_code": "\nuint64_t fcn.14000c400(ulong arg1, uint32_t *arg2, uint64_t arg3)\n\n{\n    uint8_t uVar1;\n    uint32_t uVar2;\n    uint64_t uVar3;\n    int64_t iVar4;\n    uint32_t uVar5;\n    uint64_t uVar6;\n    uint64_t uVar7;\n    \n    uVar6 = arg1;\n    uVar3 = 0;\n    if (3 < arg3) {\n        uVar3 = arg2 & 3;\n    }\n    uVar3 = -(uVar3 != 0) & 4 - uVar3;\n    uVar7 = arg3 - uVar3 & 0xfffffffffffffff8;\n    if (arg3 < 4) {\n        uVar7 = 0;\n    }\n    iVar4 = (arg3 - uVar7) - uVar3;\n    for (; uVar3 != 0; uVar3 = uVar3 - 1) {\n        uVar1 = *arg2;\n        arg2 = arg2 + 1;\n        uVar6 = uVar6 >> 8 ^ *(((uVar1 ^ uVar6) & 0xff) * 4 + 0x1400304b0);\n    }\n    for (uVar7 = uVar7 >> 3; uVar7 != 0; uVar7 = uVar7 - 1) {\n        uVar5 = uVar6 ^ *arg2;\n        uVar2 = arg2[1];\n        arg2 = arg2 + 2;\n        uVar6 = *((uVar5 >> 0x10) * 4 + 0x1400318b0) ^ *((uVar5 >> 8) * 4 + 0x1400314b0) ^\n                *((uVar2 >> 0x10) * 4 + 0x1400310b0) ^ *((uVar2 >> 8) * 4 + 0x140031cb0) ^\n                *((uVar5 >> 0x18) * 4 + 0x140030cb0) ^ *((uVar2 >> 0x18) * 4 + 0x1400304b0) ^\n                *((uVar5 & 0xff) * 4 + 0x1400300b0) ^ *((uVar2 & 0xff) * 4 + 0x1400308b0);\n    }\n    for (; iVar4 != 0; iVar4 = iVar4 + -1) {\n        uVar1 = *arg2;\n        arg2 = arg2 + 1;\n        uVar6 = uVar6 >> 8 ^ *((uVar1 ^ uVar6) * 4 + 0x1400304b0);\n    }\n    return uVar6;\n}\n",
        "token_count": 623
    },
    "14000652": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/101d11b5106849ad963488c88a9294b9",
            "validate payment card number using luhn algorithm with lookup table/77a25ea9f6f245cfb8807f7953974472"
        ],
        "decompiled_code": "\nulong * fcn.140006528(ulong *arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    uint32_t uVar3;\n    ulong *puVar4;\n    ulong uVar5;\n    uint32_t uVar6;\n    uint64_t noname_2;\n    int64_t iStack56;\n    int64_t iStack48;\n    \n    *arg1 = 0x140029318;\n    arg1[1] = 0x140029300;\n    puVar4 = fcn.14000ac54(&iStack48);\n    uVar5 = *puVar4;\n    *puVar4 = 0;\n    arg1[2] = uVar5;\n    if (iStack48 != 0) {\n        fcn.14001ea10(iStack48);\n    }\n    *(arg1 + 4) = 1;\n    *(arg1 + 0x22) = 0;\n    uVar6 = 300;\n    do {\n        iStack56 = -1;\n        uVar5 = arg2;\n        noname_2 = arg3;\n        uVar3 = fcn.140009044(&iStack56, arg2, arg3, arg4);\n        iVar2 = iStack56;\n        if (-1 < uVar3) {\n            if ((*0x140037208 != 0x140037208) && ((*(*0x140037208 + 0x1c) & 8) != 0)) {\n                fcn.14000638c(*(*0x140037208 + 0x10), uVar5, noname_2, arg2);\n            }\n            arg1[3] = iVar2;\n            return arg1;\n        }\n        if ((*0x140037208 != 0x140037208) && ((*(*0x140037208 + 0x1c) & 2) != 0)) {\n            fcn.1400062bc(*(*0x140037208 + 0x10), uVar5, noname_2, arg2);\n        }\n        (*_sym.imp.KERNEL32.dll_Sleep)(uVar6);\n        if (iStack56 != -1) {\n            (*_sym.imp.KERNEL32.dll_CloseHandle)();\n        }\n        uVar6 = uVar6 + 300;\n    } while (uVar6 < 0x4b0);\n    if (-1 < uVar3) {\n        return arg1;\n    }\n    fcn.140009514(uVar3);\n    pcVar1 = swi(3);\n    puVar4 = (*pcVar1)();\n    return puVar4;\n}\n",
        "token_count": 590
    },
    "140007d8": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nvoid fcn.140007d88(uint64_t *arg1, uint64_t arg2)\n\n{\n    uint64_t uVar1;\n    code *pcVar2;\n    int64_t iVar3;\n    uint64_t uVar4;\n    uint64_t uVar5;\n    uint64_t arg1_00;\n    \n    arg1_00 = 0x7fffffffffffffff;\n    if (0x7fffffffffffffff < arg2) {\n        fcn.1400045dc();\n        pcVar2 = swi(3);\n        (*pcVar2)();\n        return;\n    }\n    uVar1 = arg1[1];\n    uVar5 = *arg1;\n    uVar4 = arg1[2] - *arg1;\n    if (0x7fffffffffffffff - (uVar4 >> 1) < uVar4) {\n        uVar4 = 0x8000000000000026;\ncode_r0x000140007de3:\n        iVar3 = fcn.14001ea18(uVar4);\n        if (iVar3 == 0) goto code_r0x000140007ecb;\n        uVar4 = iVar3 + 0x27U & 0xffffffffffffffe0;\n        *(uVar4 - 8) = iVar3;\n    }\n    else {\n        arg1_00 = (uVar4 >> 1) + uVar4;\n        if (arg1_00 < arg2) {\n            arg1_00 = arg2;\n        }\n        if (0xfff < arg1_00) {\n            uVar4 = arg1_00 + 0x27;\n            if (uVar4 <= arg1_00) {\n                fcn.140001f28();\n                pcVar2 = swi(3);\n                (*pcVar2)();\n                return;\n            }\n            goto code_r0x000140007de3;\n        }\n        if (arg1_00 == 0) {\n            uVar4 = 0;\n        }\n        else {\n            uVar4 = fcn.14001ea18(arg1_00);\n        }\n    }\n    fcn.140020880(uVar4 + (uVar1 - uVar5), 0, arg2 - (uVar1 - uVar5));\n    fcn.140020a40(uVar4, *arg1, arg1[1] - *arg1);\n    uVar1 = *arg1;\n    if (uVar1 != 0) {\n        uVar5 = uVar1;\n        if ((0xfff < arg1[2] - uVar1) && (uVar5 = *(uVar1 - 8),  0x1f < (uVar1 - uVar5) - 8)) {\ncode_r0x000140007ecb:\n            fcn.14000cde0();\n            pcVar2 = swi(3);\n            (*pcVar2)();\n            return;\n        }\n        fcn.14001ea54(uVar5);\n    }\n    *arg1 = uVar4;\n    arg1[1] = uVar4 + arg2;\n    arg1[2] = uVar4 + arg1_00;\n    return;\n}\n",
        "token_count": 694
    },
    "14000ecc": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nvoid fcn.14000ecc0(int64_t arg1, ulong arg2)\n\n{\n    uint8_t uVar1;\n    uint64_t uVar2;\n    char *pcVar3;\n    int64_t iVar4;\n    char *pcVar5;\n    \n    iVar4 = *(arg1 + 0x458);\n    if (iVar4 == 0) {\n        uVar2 = 0x200;\n        iVar4 = arg1 + 0x50;\n    }\n    else {\n        uVar2 = *(arg1 + 0x450) >> 1;\n    }\n    pcVar3 = iVar4 + -1 + uVar2;\n    *(arg1 + 0x40) = pcVar3;\n    pcVar5 = pcVar3;\n    while( true ) {\n        if ((*(arg1 + 0x30) < 1) && (arg2 == 0)) break;\n        *(arg1 + 0x30) = *(arg1 + 0x30) + -1;\n        uVar1 = arg2;\n        arg2._0_4_ = arg2 >> 3;\n        *pcVar5 = (uVar1 & 7) + 0x30;\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -1;\n        pcVar5 = *(arg1 + 0x40);\n    }\n    *(arg1 + 0x48) = pcVar3 - *(arg1 + 0x40);\n    *(arg1 + 0x40) = pcVar5 + 1;\n    return;\n}\n",
        "token_count": 352
    },
    "14000edb": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nvoid fcn.14000edb4(int64_t arg1, ulong arg2)\n\n{\n    uint64_t uVar1;\n    int64_t iVar2;\n    uint8_t in_R8B;\n    char *pcVar3;\n    char *pcVar4;\n    char cVar5;\n    \n    iVar2 = *(arg1 + 0x458);\n    if (iVar2 == 0) {\n        uVar1 = 0x200;\n        iVar2 = arg1 + 0x50;\n    }\n    else {\n        uVar1 = *(arg1 + 0x450) >> 1;\n    }\n    pcVar3 = iVar2 + -1 + uVar1;\n    *(arg1 + 0x40) = pcVar3;\n    pcVar4 = pcVar3;\n    uVar1 = arg2;\n    while ((0 < *(arg1 + 0x30) || (uVar1 != 0))) {\n        *(arg1 + 0x30) = *(arg1 + 0x30) + -1;\n        cVar5 = uVar1 + (uVar1 / 10) * -10 + '0';\n        if ('9' < cVar5) {\n            cVar5 = (in_R8B ^ 1) * ' ' + '\\a' + cVar5;\n        }\n        *pcVar4 = cVar5;\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -1;\n        pcVar4 = *(arg1 + 0x40);\n        uVar1 = uVar1 / 10;\n    }\n    *(arg1 + 0x48) = pcVar3 - *(arg1 + 0x40);\n    *(arg1 + 0x40) = pcVar4 + 1;\n    return;\n}\n",
        "token_count": 401
    },
    "14000ef2": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nvoid fcn.14000ef20(int64_t arg1, ulong arg2)\n\n{\n    uint8_t uVar1;\n    uint64_t uVar2;\n    uint8_t *puVar3;\n    uint8_t in_R8B;\n    uint8_t *puVar4;\n    int64_t iVar5;\n    \n    iVar5 = *(arg1 + 0x458);\n    if (iVar5 == 0) {\n        uVar2 = 0x200;\n        iVar5 = arg1 + 0x50;\n    }\n    else {\n        uVar2 = *(arg1 + 0x450) >> 1;\n    }\n    puVar3 = iVar5 + -1 + uVar2;\n    *(arg1 + 0x40) = puVar3;\n    puVar4 = puVar3;\n    while( true ) {\n        if ((*(arg1 + 0x30) < 1) && (arg2 == 0)) break;\n        *(arg1 + 0x30) = *(arg1 + 0x30) + -1;\n        uVar1 = arg2;\n        arg2._0_4_ = arg2 >> 4;\n        uVar1 = (uVar1 & 0xf) + 0x30;\n        if (0x39 < uVar1) {\n            uVar1 = (in_R8B ^ 1) * ' ' + '\\a' + uVar1;\n        }\n        *puVar4 = uVar1;\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -1;\n        puVar4 = *(arg1 + 0x40);\n    }\n    *(arg1 + 0x48) = puVar3 - *(arg1 + 0x40);\n    *(arg1 + 0x40) = puVar4 + 1;\n    return;\n}\n",
        "token_count": 415
    },
    "14000f04": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nvoid fcn.14000f044(int64_t arg1, uint64_t arg2)\n\n{\n    uint64_t uVar1;\n    char *pcVar2;\n    int64_t iVar3;\n    char *pcVar4;\n    \n    iVar3 = *(arg1 + 0x458);\n    if (iVar3 == 0) {\n        uVar1 = 0x200;\n        iVar3 = arg1 + 0x50;\n    }\n    else {\n        uVar1 = *(arg1 + 0x450) >> 1;\n    }\n    pcVar2 = iVar3 + -1 + uVar1;\n    *(arg1 + 0x40) = pcVar2;\n    pcVar4 = pcVar2;\n    for (; (0 < *(arg1 + 0x30) || (arg2 != 0)); arg2 = arg2 >> 3) {\n        *(arg1 + 0x30) = *(arg1 + 0x30) + -1;\n        *pcVar4 = (arg2 & 7) + 0x30;\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -1;\n        pcVar4 = *(arg1 + 0x40);\n    }\n    *(arg1 + 0x48) = pcVar2 - *(arg1 + 0x40);\n    *(arg1 + 0x40) = pcVar4 + 1;\n    return;\n}\n",
        "token_count": 323
    },
    "14000f13": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nvoid fcn.14000f13c(int64_t arg1, uint64_t arg2)\n\n{\n    uint64_t uVar1;\n    int64_t iVar2;\n    uint8_t in_R8B;\n    char *pcVar3;\n    char *pcVar4;\n    char cVar5;\n    \n    iVar2 = *(arg1 + 0x458);\n    if (iVar2 == 0) {\n        uVar1 = 0x200;\n        iVar2 = arg1 + 0x50;\n    }\n    else {\n        uVar1 = *(arg1 + 0x450) >> 1;\n    }\n    pcVar3 = iVar2 + -1 + uVar1;\n    *(arg1 + 0x40) = pcVar3;\n    pcVar4 = pcVar3;\n    while ((0 < *(arg1 + 0x30) || (arg2 != 0))) {\n        *(arg1 + 0x30) = *(arg1 + 0x30) + -1;\n        cVar5 = arg2 + (arg2 / 10) * -10 + '0';\n        if ('9' < cVar5) {\n            cVar5 = (in_R8B ^ 1) * ' ' + '\\a' + cVar5;\n        }\n        *pcVar4 = cVar5;\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -1;\n        pcVar4 = *(arg1 + 0x40);\n        arg2 = arg2 / 10;\n    }\n    *(arg1 + 0x48) = pcVar3 - *(arg1 + 0x40);\n    *(arg1 + 0x40) = pcVar4 + 1;\n    return;\n}\n",
        "token_count": 391
    },
    "14000f2b": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nvoid fcn.14000f2b0(int64_t arg1, uint64_t arg2)\n\n{\n    uint8_t uVar1;\n    uint64_t uVar2;\n    uint8_t *puVar3;\n    uint8_t in_R8B;\n    uint8_t *puVar4;\n    int64_t iVar5;\n    \n    iVar5 = *(arg1 + 0x458);\n    if (iVar5 == 0) {\n        uVar2 = 0x200;\n        iVar5 = arg1 + 0x50;\n    }\n    else {\n        uVar2 = *(arg1 + 0x450) >> 1;\n    }\n    puVar3 = iVar5 + -1 + uVar2;\n    *(arg1 + 0x40) = puVar3;\n    puVar4 = puVar3;\n    while ((0 < *(arg1 + 0x30) || (arg2 != 0))) {\n        *(arg1 + 0x30) = *(arg1 + 0x30) + -1;\n        uVar1 = arg2;\n        arg2 = arg2 >> 4;\n        uVar1 = (uVar1 & 0xf) + 0x30;\n        if (0x39 < uVar1) {\n            uVar1 = (in_R8B ^ 1) * ' ' + '\\a' + uVar1;\n        }\n        *puVar4 = uVar1;\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -1;\n        puVar4 = *(arg1 + 0x40);\n    }\n    *(arg1 + 0x48) = puVar3 - *(arg1 + 0x40);\n    *(arg1 + 0x40) = puVar4 + 1;\n    return;\n}\n",
        "token_count": 405
    },
    "1400107d": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nulong fcn.1400107d4(ulong *arg1)\n\n{\n    uint16_t uVar1;\n    uint16_t **ppuVar2;\n    uint16_t *puVar3;\n    int64_t iVar4;\n    char cVar5;\n    uint64_t uVar6;\n    \n    ppuVar2 = arg1[3];\n    arg1[3] = ppuVar2 + 1;\n    puVar3 = *ppuVar2;\n    if ((puVar3 == NULL) || (iVar4 = *(puVar3 + 4),  iVar4 == 0)) {\n        uVar6 = 6;\n        arg1[8] = \"(null)\";\n    }\n    else {\n        cVar5 = fcn.14000d624(*arg1, *(arg1 + 0x3a), *(arg1 + 0x34));\n        arg1[8] = iVar4;\n        uVar1 = *puVar3;\n        uVar6 = uVar1;\n        if (cVar5 != '\\0') {\n            *(arg1 + 0x4c) = 1;\n            uVar6 = uVar1 >> 1;\n            goto code_r0x00014001083c;\n        }\n    }\n    *(arg1 + 0x4c) = 0;\ncode_r0x00014001083c:\n    *(arg1 + 9) = uVar6;\n    return CONCAT71(uVar6 >> 8, 1);\n}\n",
        "token_count": 327
    },
    "14000c23": {
        "rules": [
            "check OS version/56128ea24265487c97cb4913628bf489"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00014000c34a)\n// WARNING: Removing unreachable block (ram,0x00014000c31c)\n// WARNING: Removing unreachable block (ram,0x00014000c2fb)\n// WARNING: Removing unreachable block (ram,0x00014000c2ce)\n// WARNING: Removing unreachable block (ram,0x00014000c26f)\n\nvoid fcn.14000c234(ulong noname_0, ulong arg2)\n\n{\n    uint8_t uVar1;\n    int32_t *piVar2;\n    int32_t *piVar3;\n    int64_t iVar4;\n    uint *puVar5;\n    uint32_t uVar6;\n    uint8_t *puVar7;\n    uint32_t uVar8;\n    uint32_t uVar9;\n    uint8_t in_XCR0;\n    ulong var_20h;\n    int32_t var_bp_18h;\n    int32_t var_14h;\n    uint64_t var_bp_10h;\n    \n    var_bp_10h = *0x140037f00 ^ &var_20h;\n    uVar6 = 0;\n    puVar7 = 0x140030012;\n    *0x140037f40 = 0xfffff020;\n    uVar9 = 0;\n    piVar2 = cpuid_basic_info(0);\n    var_20h._0_4_ = *piVar2;\n    var_20h._4_4_ = piVar2[1];\n    var_bp_18h = piVar2[3];\n    var_14h = piVar2[2];\n    do {\n        uVar1 = puVar7[-2];\n        uVar8 = uVar1;\n        if (uVar8 != uVar6) {\n            if (uVar8 == 0) {\n                piVar3 = cpuid_basic_info(0);\n            }\n            else if (uVar8 == 1) {\n                piVar3 = cpuid_Version_info(1);\n            }\n            else if (uVar8 == 2) {\n                piVar3 = cpuid_cache_tlb_info(2);\n            }\n            else if (uVar8 == 3) {\n                piVar3 = cpuid_serial_info(3);\n            }\n            else if (uVar8 == 4) {\n                piVar3 = cpuid_Deterministic_Cache_Parameters_info(4);\n            }\n            else if (uVar8 == 5) {\n                piVar3 = cpuid_MONITOR_MWAIT_Features_info(5);\n            }\n            else if (uVar8 == 6) {\n                piVar3 = cpuid_Thermal_Power_Management_info(6);\n            }\n            else if (uVar8 == 7) {\n                piVar3 = cpuid_Extended_Feature_Enumeration_info(7);\n            }\n            else if (uVar8 == 9) {\n                piVar3 = cpuid_Direct_Cache_Access_info(9);\n            }\n            else if (uVar8 == 10) {\n                piVar3 = cpuid_Architectural_Performance_Monitoring_info(10);\n            }\n            else if (uVar8 == 0xb) {\n                piVar3 = cpuid_Extended_Topology_info(0xb);\n            }\n            else if (uVar8 == 0xd) {\n                piVar3 = cpuid_Processor_Extended_States_info(0xd);\n            }\n            else if (uVar8 == 0xf) {\n                piVar3 = cpuid_Quality_of_Service_info(0xf);\n            }\n            else if (uVar8 == 0x80000002) {\n                piVar3 = cpuid_brand_part1_info(0x80000002);\n            }\n            else if (uVar8 == 0x80000003) {\n                piVar3 = cpuid_brand_part2_info(0x80000003);\n            }\n            else if (uVar8 == 0x80000004) {\n                piVar3 = cpuid_brand_part3_info(0x80000004);\n            }\n            else {\n                piVar3 = cpuid(uVar8);\n            }\n            var_20h._0_4_ = *piVar3;\n            var_20h._4_4_ = piVar3[1];\n            var_bp_18h = piVar3[3];\n            var_14h = piVar3[2];\n            uVar6 = uVar1;\n        }\n        if ((*piVar2 < uVar1) || ((*(&var_20h + puVar7[-1] * 4) >> (*puVar7 & 0x1f) & 1) == 0)) {\n            *0x140037f40 = *0x140037f40 | *(puVar7 + 2);\n        }\n        uVar9 = uVar9 + 1;\n        puVar7 = puVar7 + 8;\n    } while (uVar9 < 0x13);\n    iVar4 = cpuid_Version_info(1);\n    if (((*(iVar4 + 0xc) >> 0x1b & 1) == 0) || ((in_XCR0 & 6) != 6)) {\n        *0x140037f40 = *0x140037f40 | 0x1810;\n    }\n    if ((*0x140037f40 & 4) == 0) {\n        iVar4 = cpuid_basic_info(0);\n        if (((*(iVar4 + 4) == 0x68747541) && (*(iVar4 + 0xc) == 0x444d4163)) && (*(iVar4 + 8) == 0x69746e65)) {\n            piVar2 = cpuid_Version_info(1);\n            uVar6 = *piVar2 >> 8 & 0xf;\n            if ((uVar6 < 0xf) || ((*piVar2 >> 0x14 & 0xffU) + uVar6 < 0x15)) {\n                *0x140037f40 = *0x140037f40 | 4;\n            }\n        }\n    }\n    puVar5 = cpuid_Version_info(1);\n    *0x140039560 = *puVar5;\n    *0x140039564 = puVar5[1];\n    *0x14003956c = puVar5[2];\n    *0x140039568 = puVar5[3];\n    fcn.14001e9f0(*0x140037f00 ^ &var_20h ^ &var_20h);\n    return;\n}\n",
        "token_count": 1450
    },
    "140010ff": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nulong fcn.140010ffc(ulong *arg1)\n\n{\n    char **ppcVar1;\n    char cVar2;\n    uint32_t uVar3;\n    uint uVar4;\n    char *pcVar5;\n    char *arg1_00;\n    \n    ppcVar1 = arg1[3];\n    arg1[3] = ppcVar1 + 1;\n    uVar3 = *(arg1 + 6);\n    arg1_00 = *ppcVar1;\n    if (uVar3 == 0xffffffff) {\n        uVar3 = 0x7fffffff;\n    }\n    arg1[8] = arg1_00;\n    cVar2 = fcn.14000d624(*arg1, *(arg1 + 0x3a), *(arg1 + 0x34));\n    if (cVar2 == '\\0') {\n        pcVar5 = \"(null)\";\n        if (arg1_00 != NULL) {\n            pcVar5 = arg1_00;\n        }\n        arg1[8] = pcVar5;\n        uVar4 = fcn.140011098(arg1, uVar3);\n    }\n    else {\n        if (arg1_00 == NULL) {\n            arg1_00 = 0x14002a170;\n            arg1[8] = 0x14002a170;\n        }\n        *(arg1 + 0x4c) = 1;\n        uVar4 = fcn.1400145c0(arg1_00, uVar3);\n    }\n    *(arg1 + 9) = uVar4;\n    return 1;\n}\n",
        "token_count": 357
    },
    "14001213": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint64_t fcn.140012134(ulong noname_0, ulong lpFlsData)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    \n    if ((*0x140037708 == -1) || (iVar3 = sub.KERNEL32.dll_FlsGetValue(),  iVar3 == 0)) {\n        iVar2 = sub.KERNEL32.dll_FlsSetValue(*0x140037708, 0xffffffffffffffff);\n        if (iVar2 != 0) {\n            iVar3 = fcn.140015d00(1, 0x3c8);\n            if (iVar3 == 0) {\n                sub.KERNEL32.dll_FlsSetValue(*0x140037708, 0);\n                iVar3 = 0;\n            }\n            else {\n                iVar2 = sub.KERNEL32.dll_FlsSetValue(*0x140037708, iVar3);\n                if (iVar2 != 0) {\n                    fcn.140011dfc(iVar3);\n                    fcn.140012664(0);\n                    return iVar3;\n                }\n                sub.KERNEL32.dll_FlsSetValue(*0x140037708, 0);\n            }\n            fcn.140012664(iVar3);\n        }\n    }\n    else if (iVar3 != -1) {\n        return iVar3;\n    }\n    fcn.14001260c();\n    pcVar1 = swi(3);\n    iVar3 = (*pcVar1)();\n    return iVar3;\n}\n",
        "token_count": 325
    },
    "1400122a": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint64_t fcn.1400122a0(ulong noname_0, int64_t lpFlsData)\n\n{\n    int32_t iVar1;\n    int64_t arg1;\n    int64_t iVar2;\n    \n    iVar2 = 0;\n    if ((*0x140037708 == -1) || (arg1 = sub.KERNEL32.dll_FlsGetValue(),  arg1 == 0)) {\n        iVar1 = sub.KERNEL32.dll_FlsSetValue(*0x140037708, 0xffffffffffffffff);\n        if (iVar1 == 0) {\n            return 0;\n        }\n        arg1 = fcn.140015d00(1, 0x3c8);\n        if (arg1 == 0) {\n            sub.KERNEL32.dll_FlsSetValue(*0x140037708, 0);\n            arg1 = 0;\n        }\n        else {\n            iVar1 = sub.KERNEL32.dll_FlsSetValue(*0x140037708, arg1);\n            if (iVar1 != 0) {\n                fcn.140011dfc(arg1);\n                fcn.140012664(0);\n                goto code_r0x000140012341;\n            }\n            sub.KERNEL32.dll_FlsSetValue(*0x140037708, 0);\n        }\n        fcn.140012664(arg1);\n    }\n    else {\n        if (arg1 == -1) {\n            return 0;\n        }\ncode_r0x000140012341:\n        iVar2 = lpFlsData * 0x3c8 + arg1;\n    }\n    return iVar2;\n}\n",
        "token_count": 349
    },
    "1400123c": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuchar fcn.1400123c0(void)\n\n{\n    if (*0x140037708 != -1) {\n        sub.KERNEL32.dll_FlsFree();\n        *0x140037708 = -1;\n    }\n    return 1;\n}\n",
        "token_count": 55
    },
    "14002148": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint64_t fcn.14002148c(ulong noname_0, ulong arg2)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    int64_t iVar5;\n    \n    if (*0x140037f30 == -1) {\n        iVar4 = 0;\n    }\n    else {\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        iVar3 = (*_sym.imp.KERNEL32.dll_FlsGetValue)();\n        iVar5 = 0;\n        iVar4 = iVar5;\n        if (((iVar3 != -1) && (iVar4 = iVar3,  iVar3 == 0)) &&\n           (iVar2 = (*_sym.imp.KERNEL32.dll_FlsSetValue)(),  iVar4 = iVar5,  iVar2 != 0)) {\n            iVar4 = fcn.140015d00(1, 0x80);\n            if ((iVar4 == 0) || (iVar2 = (*_sym.imp.KERNEL32.dll_FlsSetValue)(*0x140037f30, iVar4),  iVar2 == 0)) {\n                (*_sym.imp.KERNEL32.dll_FlsSetValue)(*0x140037f30, 0);\n                iVar3 = iVar4;\n            }\n            else {\n                *(iVar4 + 0x78) = 0xfffffffe;\n                iVar3 = iVar5;\n                iVar5 = iVar4;\n            }\n            fcn.140012664(iVar3);\n            iVar4 = iVar5;\n        }\n        (*_sym.imp.KERNEL32.dll_SetLastError)(uVar1);\n    }\n    return iVar4;\n}\n",
        "token_count": 362
    },
    "14002155": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint fcn.140021550(void)\n\n{\n    int32_t iVar1;\n    \n    *0x140037f30 = (*_sym.imp.KERNEL32.dll_FlsAlloc)(0x140021450);\n    if (*0x140037f30 != -1) {\n        iVar1 = (*_sym.imp.KERNEL32.dll_FlsSetValue)(*0x140037f30, 0x140038e80);\n        if (iVar1 != 0) {\n            *0x140038ef8 = 0xfffffffe;\n            return 1;\n        }\n        fcn.14002159c();\n    }\n    return 0;\n}\n",
        "token_count": 139
    },
    "14002159": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuchar fcn.14002159c(void)\n\n{\n    if (*0x140037f30 != -1) {\n        (*_sym.imp.KERNEL32.dll_FlsFree)();\n        *0x140037f30 = -1;\n    }\n    return 1;\n}\n",
        "token_count": 59
    },
    "14000ed3": {
        "rules": [
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8",
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf"
        ],
        "decompiled_code": "\nvoid fcn.14000ed30(int64_t arg1, ulong arg2)\n\n{\n    uint64_t uVar1;\n    int16_t *piVar2;\n    int64_t iVar3;\n    int16_t *piVar4;\n    \n    iVar3 = *(arg1 + 0x458);\n    if (iVar3 == 0) {\n        uVar1 = 0x100;\n        iVar3 = arg1 + 0x50;\n    }\n    else {\n        uVar1 = *(arg1 + 0x450) >> 2;\n    }\n    piVar4 = iVar3 + uVar1 * 2 + -2;\n    *(arg1 + 0x40) = piVar4;\n    piVar2 = piVar4;\n    for (; (0 < *(arg1 + 0x30) || (arg2 != 0)); arg2._0_4_ = arg2 >> 3) {\n        *(arg1 + 0x30) = *(arg1 + 0x30) + -1;\n        *piVar2 = (arg2 & 7) + 0x30;\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -2;\n        piVar2 = *(arg1 + 0x40);\n    }\n    *(arg1 + 0x48) = piVar4 - piVar2 >> 1;\n    *(arg1 + 0x40) = piVar2 + 1;\n    return;\n}\n",
        "token_count": 331
    },
    "14000ee6": {
        "rules": [
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8",
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf"
        ],
        "decompiled_code": "\nvoid fcn.14000ee60(int64_t arg1, ulong arg2)\n\n{\n    int16_t *piVar1;\n    uint64_t uVar2;\n    int16_t *piVar3;\n    uint16_t uVar4;\n    int64_t iVar5;\n    uint8_t in_R8B;\n    \n    iVar5 = *(arg1 + 0x458);\n    if (iVar5 == 0) {\n        uVar2 = 0x100;\n        iVar5 = arg1 + 0x50;\n    }\n    else {\n        uVar2 = *(arg1 + 0x450) >> 2;\n    }\n    piVar1 = iVar5 + (uVar2 - 1) * 2;\n    *(arg1 + 0x40) = piVar1;\n    piVar3 = piVar1;\n    uVar2 = arg2;\n    while ((0 < *(arg1 + 0x30) || (uVar2 != 0))) {\n        *(arg1 + 0x30) = *(arg1 + 0x30) + -1;\n        uVar4 = uVar2 + (uVar2 / 10) * -10 + 0x30;\n        if (0x39 < uVar4) {\n            uVar4 = (in_R8B ^ 1) * ' ' + '\\a' + uVar4;\n        }\n        *piVar3 = uVar4;\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -2;\n        piVar3 = *(arg1 + 0x40);\n        uVar2 = uVar2 / 10;\n    }\n    *(arg1 + 0x48) = piVar1 - piVar3 >> 1;\n    *(arg1 + 0x40) = piVar3 + 1;\n    return;\n}\n",
        "token_count": 413
    },
    "14000efa": {
        "rules": [
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8",
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf"
        ],
        "decompiled_code": "\nvoid fcn.14000efa4(int64_t arg1, ulong arg2)\n\n{\n    uint16_t *puVar1;\n    uint64_t uVar2;\n    uint16_t *puVar3;\n    uint8_t in_R8B;\n    uint16_t uVar4;\n    int64_t iVar5;\n    \n    iVar5 = *(arg1 + 0x458);\n    if (iVar5 == 0) {\n        uVar2 = 0x100;\n        iVar5 = arg1 + 0x50;\n    }\n    else {\n        uVar2 = *(arg1 + 0x450) >> 2;\n    }\n    puVar1 = iVar5 + (uVar2 - 1) * 2;\n    *(arg1 + 0x40) = puVar1;\n    puVar3 = puVar1;\n    while( true ) {\n        if ((*(arg1 + 0x30) < 1) && (arg2 == 0)) break;\n        uVar4 = arg2;\n        arg2._0_4_ = arg2 >> 4;\n        uVar4 = (uVar4 & 0xf) + 0x30;\n        *(arg1 + 0x30) = *(arg1 + 0x30) + -1;\n        if (0x39 < uVar4) {\n            uVar4 = (in_R8B ^ 1) * ' ' + '\\a' + uVar4;\n        }\n        *puVar3 = uVar4;\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -2;\n        puVar3 = *(arg1 + 0x40);\n    }\n    *(arg1 + 0x48) = puVar1 - puVar3 >> 1;\n    *(arg1 + 0x40) = puVar3 + 1;\n    return;\n}\n",
        "token_count": 418
    },
    "14000f0b": {
        "rules": [
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8",
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf"
        ],
        "decompiled_code": "\nvoid fcn.14000f0b4(int64_t arg1, uint64_t arg2)\n\n{\n    uint64_t uVar1;\n    int16_t *piVar2;\n    int64_t iVar3;\n    int16_t *piVar4;\n    \n    iVar3 = *(arg1 + 0x458);\n    if (iVar3 == 0) {\n        uVar1 = 0x100;\n        iVar3 = arg1 + 0x50;\n    }\n    else {\n        uVar1 = *(arg1 + 0x450) >> 2;\n    }\n    piVar4 = iVar3 + uVar1 * 2 + -2;\n    *(arg1 + 0x40) = piVar4;\n    piVar2 = piVar4;\n    for (; (0 < *(arg1 + 0x30) || (arg2 != 0)); arg2 = arg2 >> 3) {\n        *(arg1 + 0x30) = *(arg1 + 0x30) + -1;\n        *piVar2 = (arg2 & 7) + 0x30;\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -2;\n        piVar2 = *(arg1 + 0x40);\n    }\n    *(arg1 + 0x48) = piVar4 - piVar2 >> 1;\n    *(arg1 + 0x40) = piVar2 + 1;\n    return;\n}\n",
        "token_count": 330
    },
    "14000f1e": {
        "rules": [
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8",
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf"
        ],
        "decompiled_code": "\nvoid fcn.14000f1ec(int64_t arg1, uint64_t arg2)\n\n{\n    int16_t *piVar1;\n    uint64_t uVar2;\n    int16_t *piVar3;\n    uint16_t uVar4;\n    int64_t iVar5;\n    uint8_t in_R8B;\n    \n    iVar5 = *(arg1 + 0x458);\n    if (iVar5 == 0) {\n        uVar2 = 0x100;\n        iVar5 = arg1 + 0x50;\n    }\n    else {\n        uVar2 = *(arg1 + 0x450) >> 2;\n    }\n    piVar1 = iVar5 + (uVar2 - 1) * 2;\n    *(arg1 + 0x40) = piVar1;\n    piVar3 = piVar1;\n    while ((0 < *(arg1 + 0x30) || (arg2 != 0))) {\n        *(arg1 + 0x30) = *(arg1 + 0x30) + -1;\n        uVar4 = arg2 + (arg2 / 10) * -10 + 0x30;\n        if (0x39 < uVar4) {\n            uVar4 = (in_R8B ^ 1) * ' ' + '\\a' + uVar4;\n        }\n        *piVar3 = uVar4;\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -2;\n        piVar3 = *(arg1 + 0x40);\n        arg2 = arg2 / 10;\n    }\n    *(arg1 + 0x48) = piVar1 - piVar3 >> 1;\n    *(arg1 + 0x40) = piVar3 + 1;\n    return;\n}\n",
        "token_count": 403
    },
    "14000f33": {
        "rules": [
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8",
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf"
        ],
        "decompiled_code": "\nvoid fcn.14000f334(int64_t arg1, uint64_t arg2)\n\n{\n    uint16_t *puVar1;\n    uint64_t uVar2;\n    uint16_t *puVar3;\n    uint8_t in_R8B;\n    uint16_t uVar4;\n    int64_t iVar5;\n    \n    iVar5 = *(arg1 + 0x458);\n    if (iVar5 == 0) {\n        uVar2 = 0x100;\n        iVar5 = arg1 + 0x50;\n    }\n    else {\n        uVar2 = *(arg1 + 0x450) >> 2;\n    }\n    puVar1 = iVar5 + (uVar2 - 1) * 2;\n    *(arg1 + 0x40) = puVar1;\n    puVar3 = puVar1;\n    while ((0 < *(arg1 + 0x30) || (arg2 != 0))) {\n        uVar4 = arg2;\n        arg2 = arg2 >> 4;\n        uVar4 = (uVar4 & 0xf) + 0x30;\n        *(arg1 + 0x30) = *(arg1 + 0x30) + -1;\n        if (0x39 < uVar4) {\n            uVar4 = (in_R8B ^ 1) * ' ' + '\\a' + uVar4;\n        }\n        *puVar3 = uVar4;\n        *(arg1 + 0x40) = *(arg1 + 0x40) + -2;\n        puVar3 = *(arg1 + 0x40);\n    }\n    *(arg1 + 0x48) = puVar1 - puVar3 >> 1;\n    *(arg1 + 0x40) = puVar3 + 1;\n    return;\n}\n",
        "token_count": 406
    },
    "14001d6e": {
        "rules": [
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8",
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf"
        ],
        "decompiled_code": "\nuint32_t fcn.14001d6e8(void)\n\n{\n    uint16_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint32_t in_MXCSR;\n    \n    uVar1 = in_MXCSR & 0x8040;\n    if (uVar1 == 0x8000) {\n        uVar4 = 0xc00;\n    }\n    else if (uVar1 == 0x40) {\n        uVar4 = 0x800;\n    }\n    else {\n        uVar4 = 0;\n        if (uVar1 == 0x8040) {\n            uVar4 = 0x400;\n        }\n    }\n    uVar2 = in_MXCSR & 0x6000;\n    if (uVar2 == 0) {\n        uVar3 = 0;\n    }\n    else if (uVar2 == 0x2000) {\n        uVar3 = 0x100;\n    }\n    else if (uVar2 == 0x4000) {\n        uVar3 = 0x200;\n    }\n    else {\n        uVar3 = 0x300;\n        if (uVar2 != 0x6000) {\n            uVar3 = 0;\n        }\n    }\n    uVar4 = ((((in_MXCSR >> 2 & 0x400 | in_MXCSR & 0x800) >> 2 | in_MXCSR & 0x400) >> 2 | in_MXCSR & 0x200) >> 3 |\n            in_MXCSR & 0x180) >> 3 | uVar4 | uVar3;\n    return (uVar3 | uVar4 * 4) << 0x16 | uVar4;\n}\n",
        "token_count": 404
    },
    "14000b89": {
        "rules": [
            "compute adler32 checksum/59ba9d7991e641c88d7c729645f1cfca"
        ],
        "decompiled_code": "\nuint32_t fcn.14000b894(void)\n\n{\n    ulong uVar1;\n    uint uVar2;\n    uint uVar3;\n    uint uVar4;\n    uint uVar5;\n    uint uVar6;\n    uint uVar7;\n    uint uVar8;\n    uint uVar9;\n    uint uVar10;\n    uint uVar11;\n    uint uVar12;\n    uint *puVar13;\n    uint *puVar14;\n    int32_t iVar15;\n    uint32_t uVar16;\n    int64_t iVar17;\n    uint32_t uVar18;\n    uint *puVar19;\n    uint *puVar20;\n    uint uStack296;\n    uchar auStack292 [292];\n    \n    uStack296 = 0x11c;\n    fcn.140020880(auStack292, 0, 0x118);\n    iVar17 = 2;\n    puVar13 = 0x140039358;\n    puVar14 = &uStack296;\n    do {\n        puVar20 = puVar14;\n        puVar19 = puVar13;\n        uVar2 = puVar20[1];\n        uVar3 = puVar20[2];\n        uVar4 = puVar20[3];\n        uVar5 = puVar20[4];\n        uVar6 = puVar20[5];\n        uVar7 = puVar20[6];\n        uVar8 = puVar20[7];\n        *puVar19 = *puVar20;\n        puVar19[1] = uVar2;\n        puVar19[2] = uVar3;\n        puVar19[3] = uVar4;\n        uVar2 = puVar20[8];\n        uVar3 = puVar20[9];\n        uVar4 = puVar20[10];\n        uVar9 = puVar20[0xb];\n        puVar19[4] = uVar5;\n        puVar19[5] = uVar6;\n        puVar19[6] = uVar7;\n        puVar19[7] = uVar8;\n        uVar5 = puVar20[0xc];\n        uVar6 = puVar20[0xd];\n        uVar7 = puVar20[0xe];\n        uVar8 = puVar20[0xf];\n        puVar19[8] = uVar2;\n        puVar19[9] = uVar3;\n        puVar19[10] = uVar4;\n        puVar19[0xb] = uVar9;\n        uVar2 = puVar20[0x10];\n        uVar3 = puVar20[0x11];\n        uVar4 = puVar20[0x12];\n        uVar9 = puVar20[0x13];\n        puVar19[0xc] = uVar5;\n        puVar19[0xd] = uVar6;\n        puVar19[0xe] = uVar7;\n        puVar19[0xf] = uVar8;\n        uVar5 = puVar20[0x14];\n        uVar6 = puVar20[0x15];\n        uVar7 = puVar20[0x16];\n        uVar8 = puVar20[0x17];\n        puVar19[0x10] = uVar2;\n        puVar19[0x11] = uVar3;\n        puVar19[0x12] = uVar4;\n        puVar19[0x13] = uVar9;\n        uVar9 = puVar20[0x18];\n        uVar10 = puVar20[0x19];\n        uVar11 = puVar20[0x1a];\n        uVar12 = puVar20[0x1b];\n        puVar19[0x14] = uVar5;\n        puVar19[0x15] = uVar6;\n        puVar19[0x16] = uVar7;\n        puVar19[0x17] = uVar8;\n        uVar2 = puVar20[0x1c];\n        uVar3 = puVar20[0x1d];\n        uVar4 = puVar20[0x1e];\n        uVar5 = puVar20[0x1f];\n        puVar19[0x18] = uVar9;\n        puVar19[0x19] = uVar10;\n        puVar19[0x1a] = uVar11;\n        puVar19[0x1b] = uVar12;\n        puVar19[0x1c] = uVar2;\n        puVar19[0x1d] = uVar3;\n        puVar19[0x1e] = uVar4;\n        puVar19[0x1f] = uVar5;\n        iVar17 = iVar17 + -1;\n        puVar13 = puVar19 + 0x20;\n        puVar14 = puVar20 + 0x20;\n    } while (iVar17 != 0);\n    uVar1 = *(puVar20 + 0x24);\n    uVar2 = puVar20[0x21];\n    uVar3 = puVar20[0x22];\n    uVar4 = puVar20[0x23];\n    puVar19[0x20] = puVar20[0x20];\n    puVar19[0x21] = uVar2;\n    puVar19[0x22] = uVar3;\n    puVar19[0x23] = uVar4;\n    *(puVar19 + 0x24) = uVar1;\n    puVar19[0x26] = puVar20[0x26];\n    iVar15 = (*_sym.imp.ntdll.dll_RtlGetVersion)();\n    *0x140039473 = 0;\n    if (iVar15 < 0) {\n        (*_sym.imp.ntdll.dll_RtlNtStatusToDosError)();\n        (*_sym.imp.KERNEL32.dll_SetLastError)();\n        uVar16 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        uVar18 = uVar16 & 0xffff | 0x80070000;\n        if (uVar16 < 1) {\n            uVar18 = uVar16;\n        }\n        if (uVar18 < 0) {\n            return uVar18;\n        }\n    }\n    *0x140039474 = *0x14003935c << 0x10 | *0x140039360;\n    *0x140039350 = 0x130;\n    *0x140039478 = CONCAT44(*0x140039474, *0x140039364);\n    return 0;\n}\n",
        "token_count": 1462
    },
    "14001c49": {
        "rules": [
            "hash data using aphash/10489b186fc44711a1078750698db7a9",
            "encrypt data using HC-128/1d01b23c04404fe18b84a06c7e7d83b0"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_20h\n\nulong fcn.14001c49c(int64_t **arg1)\n\n{\n    ulong uVar1;\n    uint8_t uVar2;\n    uint64_t *puVar3;\n    uint64_t uVar4;\n    uint64_t arg1_00;\n    uint64_t uVar5;\n    uint64_t arg2;\n    uint64_t *puVar6;\n    uint64_t *puVar7;\n    ulong var_bp_8h;\n    ulong var_20h;\n    \n    puVar3 = **arg1;\n    if (puVar3 == NULL) {\ncode_r0x00014001c630:\n        uVar1 = 0xffffffff;\n    }\n    else {\n        uVar2 = *0x140037f00 & 0x3f;\n        arg1_00 = (*0x140037f00 ^ *puVar3) >> uVar2 | (*0x140037f00 ^ *puVar3) << 0x40 - uVar2;\n        puVar7 = (*0x140037f00 ^ puVar3[1]) >> uVar2 | (*0x140037f00 ^ puVar3[1]) << 0x40 - uVar2;\n        puVar3 = (*0x140037f00 ^ puVar3[2]) >> uVar2 | (*0x140037f00 ^ puVar3[2]) << 0x40 - uVar2;\n        if (puVar7 == puVar3) {\n            uVar4 = puVar3 - arg1_00 >> 3;\n            uVar5 = uVar4;\n            if (0x200 < uVar4) {\n                uVar5 = 0x200;\n            }\n            arg2 = uVar5 + uVar4;\n            if (uVar5 + uVar4 == 0) {\n                arg2 = 0x20;\n            }\n            if (arg2 < uVar4) {\ncode_r0x00014001c53e:\n                arg2 = uVar4 + 4;\n                uVar5 = fcn.14001da04(arg1_00, arg2, 8);\n                fcn.140012664(0);\n                if (uVar5 == 0) goto code_r0x00014001c630;\n            }\n            else {\n                uVar5 = fcn.14001da04(arg1_00, arg2, 8);\n                fcn.140012664(0);\n                if (uVar5 == 0) goto code_r0x00014001c53e;\n            }\n            arg1_00 = uVar5;\n            uVar5 = *0x140037f00;\n            puVar7 = arg1_00 + uVar4 * 8;\n            puVar3 = arg1_00 + arg2 * 8;\n            uVar4 = puVar3 + (7 - puVar7) >> 3;\n            if (puVar3 < puVar7) {\n                uVar4 = 0;\n            }\n            puVar6 = puVar7;\n            if (uVar4 != 0) {\n                for (; uVar4 != 0; uVar4 = uVar4 - 1) {\n                    *puVar6 = uVar5;\n                    puVar6 = puVar6 + 1;\n                }\n            }\n        }\n        uVar2 = -(*0x140037f00 & 0x3f) & 0x3f;\n        *puVar7 = (*arg1[1] >> uVar2 | *arg1[1] << 0x40 - uVar2) ^ *0x140037f00;\n        uVar2 = -(*0x140037f00 & 0x3f) & 0x3f;\n        ***arg1 = (arg1_00 >> uVar2 | arg1_00 << 0x40 - uVar2) ^ *0x140037f00;\n        uVar2 = -(*0x140037f00 & 0x3f) & 0x3f;\n        *(**arg1 + 8) = (puVar7 + 1 >> uVar2 | puVar7 + 1 << 0x40 - uVar2) ^ *0x140037f00;\n        uVar2 = 0x40 - (*0x140037f00 & 0x3f) & 0x3f;\n        uVar1 = 0;\n        *(**arg1 + 0x10) = (puVar3 >> uVar2 | puVar3 << 0x40 - uVar2) ^ *0x140037f00;\n    }\n    return uVar1;\n}\n",
        "token_count": 1044
    },
    "14001625": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nuint64_t fcn.140016254(ulong arg1, ulong arg2, uint32_t *arg3, uint32_t *arg4)\n\n{\n    int64_t *piVar1;\n    ulong arg1_00;\n    int64_t iVar2;\n    int32_t iVar3;\n    int64_t iVar4;\n    uint8_t uVar5;\n    uint64_t uVar6;\n    uint64_t uVar7;\n    \n    uVar7 = arg1;\n    uVar6 = *(uVar7 * 8 + 0x1400386d0) ^ *0x140037f00;\n    uVar5 = *0x140037f00 & 0x3f;\n    uVar6 = uVar6 >> uVar5 | uVar6 << 0x40 - uVar5;\n    if (uVar6 != 0xffffffffffffffff) {\n        if (uVar6 != 0) {\n            return uVar6;\n        }\n        if (arg3 != arg4) {\n            do {\n                uVar6 = *arg3;\n                iVar4 = *(uVar6 * 8 + 0x140038620);\n                if (iVar4 == 0) {\n                    arg1_00 = *(uVar6 * 8 + 0x140027340);\n                    iVar4 = (*_sym.imp.KERNEL32.dll_LoadLibraryExW)(arg1_00, 0);\n                    if ((iVar4 != 0) ||\n                       ((((iVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)(),  iVar3 == 0x57 &&\n                          (iVar3 = fcn.1400177a8(arg1_00, L\"api-ms-\", 7),  iVar3 != 0)) &&\n                         (iVar3 = fcn.1400177a8(arg1_00, L\"ext-ms-\", 7),  iVar3 != 0)) &&\n                        (iVar4 = (*_sym.imp.KERNEL32.dll_LoadLibraryExW)(arg1_00, 0, 0),  iVar4 != 0)))) {\n                        piVar1 = uVar6 * 8 + 0x140038620;\n                        iVar2 = *piVar1;\n                        *piVar1 = iVar4;\n                        if (iVar2 != 0) {\n                            (*_sym.imp.KERNEL32.dll_FreeLibrary)(iVar4);\n                        }\n                        goto code_r0x0001400163d6;\n                    }\n                    *(uVar6 * 8 + 0x140038620) = 0xffffffffffffffff;\n                }\n                else if (iVar4 != -1) {\ncode_r0x0001400163d6:\n                    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar4, arg2);\n                    if (uVar6 != 0) {\n                        uVar5 = 0x40 - (*0x140037f00 & 0x3f) & 0x3f;\n                        *(uVar7 * 8 + 0x1400386d0) = (uVar6 >> uVar5 | uVar6 << 0x40 - uVar5) ^ *0x140037f00;\n                        return uVar6;\n                    }\n                    break;\n                }\n                arg3 = arg3 + 1;\n            } while (arg3 != arg4);\n        }\n        uVar5 = 0x40 - (*0x140037f00 & 0x3f) & 0x3f;\n        *(uVar7 * 8 + 0x1400386d0) = (0xffffffffffffffffU >> uVar5 | -1 << 0x40 - uVar5) ^ *0x140037f00;\n    }\n    return 0;\n}\n",
        "token_count": 813
    },
    "140017cf": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nvoid fcn.140017cf0(uint64_t arg1)\n\n{\n    code *pcVar1;\n    uint8_t uVar2;\n    \n    if (*0x1400387f0 == *0x140037f00) {\n        uVar2 = 0x40 - (*0x140037f00 & 0x3f) & 0x3f;\n        *0x1400387f0 = (arg1 >> uVar2 | arg1 << 0x40 - uVar2) ^ *0x140037f00;\n        return;\n    }\n    fcn.14001c830(arg1);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 158
    },
    "140017d3": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nuint64_t fcn.140017d3c(ulong noname_0, uint32_t *arg2, ulong noname_2, uint32_t *arg4)\n\n{\n    uint8_t uVar1;\n    uint64_t uVar2;\n    \n    fcn.1400161d8(*arg2);\n    uVar1 = *0x140037f00 & 0x3f;\n    uVar2 = *0x140038810 ^ *0x140037f00;\n    fcn.140016238(*arg4);\n    return uVar2 >> uVar1 | uVar2 << 0x40 - uVar1;\n}\n",
        "token_count": 144
    },
    "1400182f": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nvoid fcn.1400182f0(ulong arg1)\n\n{\n    // WARNING: Could not recover jumptable at 0x000140018310. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(*((arg1 >> 6) * 8 + 0x140037fd0) + (arg1 & 0x3f) * 0x48);\n    return;\n}\n",
        "token_count": 102
    },
    "1400183d": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nvoid fcn.1400183d8(ulong arg1)\n\n{\n    // WARNING: Could not recover jumptable at 0x0001400183f8. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(*((arg1 >> 6) * 8 + 0x140037fd0) + (arg1 & 0x3f) * 0x48);\n    return;\n}\n",
        "token_count": 105
    },
    "14001a3b": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nuint64_t fcn.14001a3b4(void)\n\n{\n    uint8_t uVar1;\n    uint64_t uVar2;\n    \n    fcn.1400161d8(0);\n    uVar1 = *0x140037f00 & 0x3f;\n    uVar2 = *0x140038830 ^ *0x140037f00;\n    fcn.140016238(0);\n    return uVar2 >> uVar1 | uVar2 << 0x40 - uVar1;\n}\n",
        "token_count": 118
    },
    "14001be2": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nint64_t fcn.14001be28(uint8_t *arg1, ulong arg2, ulong *arg3, int64_t arg4)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    uint8_t uVar3;\n    uint8_t uVar4;\n    \n    if (arg1 != NULL) {\n        if (arg2 != 0) {\n            if ((arg2 & 0xffffff80) == 0) {\n                *arg1 = arg2;\n                return 1;\n            }\n            if ((arg2 & 0xfffff800) == 0) {\n                iVar1 = 1;\n                uVar4 = 0xc0;\n                iVar2 = iVar1;\n            }\n            else if ((arg2 & 0xffff0000) == 0) {\n                if (arg2 - 0xd800 < 0x800) {\ncode_r0x00014001d9d8:\n                    *arg3 = 0;\n                    *(arg4 + 0x30) = 1;\n                    *(arg4 + 0x2c) = 0x2a;\n                    return -1;\n                }\n                iVar1 = 2;\n                uVar4 = 0xe0;\n                iVar2 = iVar1;\n            }\n            else {\n                if (((arg2 & 0xffe00000) != 0) || (0x10ffff < arg2)) goto code_r0x00014001d9d8;\n                iVar1 = 3;\n                uVar4 = 0xf0;\n                iVar2 = iVar1;\n            }\n            do {\n                uVar3 = arg2;\n                arg2._0_4_ = arg2 >> 6;\n                arg1[iVar1] = uVar3 & 0x3f | 0x80;\n                iVar1 = iVar1 + -1;\n            } while (iVar1 != 0);\n            *arg1 = arg2 | uVar4;\n            *arg3 = 0;\n            return iVar2 + 1;\n        }\n        *arg1 = 0;\n    }\n    *arg3 = 0;\n    return 1;\n}\n",
        "token_count": 469
    },
    "14001c64": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nulong fcn.14001c64c(int64_t **arg1)\n\n{\n    uint64_t uVar1;\n    ulong uVar2;\n    uint64_t uVar3;\n    uint64_t *puVar4;\n    uint8_t uVar5;\n    uint64_t *puVar6;\n    uint64_t *puVar7;\n    uint64_t *lpMem;\n    uint64_t uVar8;\n    uint64_t *puVar9;\n    uint64_t *puVar10;\n    \n    uVar1 = *0x140037f00;\n    puVar6 = **arg1;\n    if (puVar6 == NULL) {\n        uVar2 = 0xffffffff;\n    }\n    else {\n        uVar5 = *0x140037f00 & 0x3f;\n        lpMem = (*0x140037f00 ^ *puVar6) >> uVar5 | (*0x140037f00 ^ *puVar6) << 0x40 - uVar5;\n        puVar6 = (*0x140037f00 ^ puVar6[1]) >> uVar5 | (*0x140037f00 ^ puVar6[1]) << 0x40 - uVar5;\n        puVar7 = puVar6;\n        uVar3 = *0x140037f00;\n        puVar10 = lpMem;\n        if (lpMem - 1U < 0xfffffffffffffffe) {\n            while (puVar6 = puVar6 + -1,  lpMem <= puVar6) {\n                if (*puVar6 != uVar1) {\n                    *puVar6 = uVar1;\n                    (**0x140029a28)();\n                    uVar5 = *0x140037f00 & 0x3f;\n                    uVar8 = *0x140037f00 ^ ***arg1;\n                    uVar3 = *0x140037f00 ^ (**arg1)[1];\n                    puVar9 = uVar8 >> uVar5 | uVar8 << 0x40 - uVar5;\n                    puVar4 = uVar3 >> uVar5 | uVar3 << 0x40 - uVar5;\n                    uVar3 = *0x140037f00;\n                    if ((puVar9 != puVar10) || (puVar4 != puVar7)) {\n                        puVar6 = puVar4;\n                        puVar7 = puVar4;\n                        lpMem = puVar9;\n                        puVar10 = puVar9;\n                    }\n                }\n            }\n            if (lpMem != 0xffffffffffffffff) {\n                fcn.140012664(lpMem);\n                uVar3 = *0x140037f00;\n            }\n            ***arg1 = uVar3;\n            *(**arg1 + 8) = uVar3;\n            *(**arg1 + 0x10) = uVar3;\n        }\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 647
    },
    "14001d82": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nvoid fcn.14001d824(ulong arg1)\n\n{\n    return;\n}\n",
        "token_count": 19
    },
    "14001e2b": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nuint64_t fcn.14001e2b0(void)\n\n{\n    uint8_t uVar1;\n    \n    uVar1 = *0x140037f00 & 0x3f;\n    return *0x140037f00 & 0xffffffffffffff00 |\n           ((*0x140038890 ^ *0x140037f00) >> uVar1 | (*0x140038890 ^ *0x140037f00) << 0x40 - uVar1) != 0;\n}\n",
        "token_count": 111
    },
    "14001e2d": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nulong fcn.14001e2d8(ulong arg1)\n\n{\n    ulong uVar1;\n    uint8_t uVar2;\n    \n    uVar2 = *0x140037f00 & 0x3f;\n    if (((*0x140038890 ^ *0x140037f00) >> uVar2 | (*0x140038890 ^ *0x140037f00) << 0x40 - uVar2) == 0) {\n        return 0;\n    }\n    // WARNING: Could not recover jumptable at 0x00014001e30c. Too many branches\n    // WARNING: Treating indirect jump as call\n    uVar1 = (**0x140029a28)(arg1);\n    return uVar1;\n}\n",
        "token_count": 170
    },
    "14001eff": {
        "rules": [
            "encrypt data using Curve25519/bbf924b96e5b4ce780ce59f68f21b030"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00014001f0af)\n// WARNING: Removing unreachable block (ram,0x00014001f02a)\n// WARNING: Removing unreachable block (ram,0x00014001f003)\n\nulong fcn.14001eff0(ulong noname_0, ulong arg2)\n\n{\n    int32_t *piVar1;\n    uint32_t *puVar2;\n    int64_t iVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    uint8_t in_XCR0;\n    \n    piVar1 = cpuid_basic_info(0);\n    uVar6 = 0;\n    puVar2 = cpuid_Version_info(1);\n    uVar4 = puVar2[3];\n    if ((piVar1[2] ^ 0x49656e69U | piVar1[3] ^ 0x6c65746eU | piVar1[1] ^ 0x756e6547U) == 0) {\n        *0x140037f18 = 0xffffffffffffffff;\n        uVar5 = *puVar2 & 0xfff3ff0;\n        if ((((uVar5 == 0x106c0) || (uVar5 == 0x20660)) || (uVar5 == 0x20670)) ||\n           ((uVar5 - 0x30650 < 0x21 && ((0x100010001U >> (uVar5 - 0x30650 & 0x3f) & 1) != 0)))) {\n            *0x140038e10 = *0x140038e10 | 1;\n        }\n    }\n    if (6 < *piVar1) {\n        iVar3 = cpuid_Extended_Feature_Enumeration_info(7);\n        uVar6 = *(iVar3 + 4);\n        if ((uVar6 >> 9 & 1) != 0) {\n            *0x140038e10 = *0x140038e10 | 2;\n        }\n    }\n    *0x140037f10 = 1;\n    *0x140037f14 = 2;\n    if ((uVar4 >> 0x14 & 1) != 0) {\n        *0x140037f10 = 2;\n        *0x140037f14 = 6;\n        if ((((uVar4 >> 0x1b & 1) != 0) && ((uVar4 >> 0x1c & 1) != 0)) && ((in_XCR0 & 6) == 6)) {\n            *0x140037f14 = 0xe;\n            *0x140037f10 = 3;\n            if ((uVar6 & 0x20) != 0) {\n                *0x140037f10 = 5;\n                *0x140037f14 = 0x2e;\n                if (((uVar6 & 0xd0030000) == 0xd0030000) && ((in_XCR0 & 0xe0) == 0xe0)) {\n                    *0x140037f14 = 0x6e;\n                    *0x140037f10 = 6;\n                }\n            }\n        }\n    }\n    return 0;\n}\n",
        "token_count": 732
    },
    "14002088": {
        "rules": [
            "encrypt data using HC-128/f6b71aea27f34766a10ff27131cf0227"
        ],
        "decompiled_code": "\nuchar (*) [16] fcn.140020880(uchar (*arg1) [16], ulong noname_1, uint64_t arg3)\n\n{\n    uchar (*pauVar1) [16];\n    uchar (*pauVar2) [16];\n    uint16_t uVar3;\n    uint64_t uVar5;\n    uchar auVar6 [12];\n    uint32_t uVar4;\n    uchar auVar7 [13];\n    uchar auVar8 [16];\n    uchar uVar9;\n    \n    uVar5 = noname_1 * 0x101010101010101;\n    uVar3 = uVar5;\n    uVar4 = uVar5;\n    if (arg3 < 0x11) {\n        uVar9 = uVar5;\n    // switch table (17 cases) at 0x1400360a0\n        switch(*(arg3 * 4 + 0x1400360a0) + 0x140000000) {\n        case 0x1400209b0:\n            *(arg1[-1] + arg3 + 1) = uVar5;\n        case 0x1400209b4:\n            *(arg1[-1] + arg3 + 9) = uVar4;\n        case 0x1400209b7:\n            *(arg1[-1] + arg3 + 0xd) = uVar3;\n        case 0x1400209bb:\n            arg1[-1][arg3 + 0xf] = uVar9;\n            return arg1;\n        case 0x1400209be:\n            return arg1;\n        case 0x1400209c0:\n            *(arg1[-1] + arg3 + 4) = uVar5;\n        case 0x1400209c4:\n            *(arg1[-1] + arg3 + 0xc) = uVar4;\n            return arg1;\n        case 0x1400209c8:\n            *(arg1[-1] + arg3 + 7) = uVar5;\n            arg1[-1][arg3 + 0xf] = uVar9;\n            return arg1;\n        case 0x1400209d0:\n            *(arg1[-1] + arg3 + 3) = uVar5;\n        case 0x1400209d4:\n            *(arg1[-1] + arg3 + 0xb) = uVar4;\n            arg1[-1][arg3 + 0xf] = uVar9;\n            return arg1;\n        case 0x1400209e0:\n            *(arg1[-1] + arg3 + 2) = uVar5;\n        case 0x1400209e4:\n            *(arg1[-1] + arg3 + 10) = uVar4;\n        case 0x1400209e7:\n            *(arg1[-1] + arg3 + 0xe) = uVar3;\n            return arg1;\n        case 0x1400209ec:\n            **arg1 = uVar5;\n            return arg1;\n        case 0x1400209f0:\n            **arg1 = uVar5;\n            *(*arg1 + 8) = uVar3;\n            (*arg1)[10] = uVar9;\n            return arg1;\n        case 0x140020a00:\n            **arg1 = uVar5;\n            *(*arg1 + 8) = uVar3;\n            return arg1;\n        case 0x140020a08:\n            **arg1 = uVar5;\n            *(*arg1 + 8) = uVar5;\n            return arg1;\n        }\n    }\n    uVar9 = SUB141(ZEXT814(uVar5) >> 0x30, 0);\n    auVar7 = ZEXT813(uVar5);\n    auVar6 = ZEXT812(uVar5);\n    auVar8 = CONCAT142(SUB1614(CONCAT133(SUB1613(CONCAT124(SUB1612(CONCAT115(SUB1611(CONCAT106(SUB1610(CONCAT97(SUB169(\n                                                            CONCAT88(SUB168(CONCAT79(SUB167(CONCAT610(SUB166(CONCAT511(\n                                                            SUB165(CONCAT412(SUB164(CONCAT313(SUB163(CONCAT214(SUB162(\n                                                            CONCAT115(SUB161(ZEXT816(uVar5) >> 0x38, 0), \n                                                                      CONCAT114(SUB151(ZEXT815(uVar5) >> 0x38, 0), \n                                                                                ZEXT814(uVar5))) >> 0x70, 0), \n                                                            CONCAT113(uVar9, auVar7)) >> 0x68, 0), \n                                                            CONCAT112(uVar9, auVar6)) >> 0x60, 0), \n                                                            CONCAT111(SUB131(auVar7 >> 0x28, 0), ZEXT811(uVar5))) >>\n                                                            0x58, 0), CONCAT110(SUB121(auVar6 >> 0x28, 0), uVar5)) >>\n                                                            0x50, 0), CONCAT19(SUB131(auVar7 >> 0x20, 0), uVar5)) >>\n                                                            0x48, 0), CONCAT18(SUB121(auVar6 >> 0x20, 0), uVar5)) >>\n                                                            0x40, 0), (uVar5 >> 0x18) << 0x38) >> 0x38, 0), \n                                                            (uVar5 >> 0x18) << 0x30) >> 0x30, 0), \n                                                            (uVar5 >> 0x10) << 0x28) >> 0x28, 0), \n                                                            (uVar5 >> 0x10) << 0x20) >> 0x20, 0), (uVar4 >> 8) << 0x18)\n                                                 >> 0x18, 0), (uVar5 >> 8) << 0x10) >> 0x10, 0), \n                       uVar3 & 0xff | uVar3 << 8);\n    pauVar1 = arg1;\n    if (0x80 < arg3) {\n        if ((*0x140038e10 & 2) != 0) {\n            for (; arg3 != 0; arg3 = arg3 - 1) {\n                (*pauVar1)[0] = noname_1;\n                pauVar1 = *pauVar1 + 1;\n            }\n            return arg1;\n        }\n        *arg1 = auVar8;\n        pauVar1 = arg1[1] & 0xfffffffffffffff0;\n        arg3 = arg1 + (arg3 - pauVar1);\n        uVar5 = arg3 >> 7;\n        if (uVar5 != 0) {\n            if (*0x140037f20 < uVar5) {\n                do {\n                    *pauVar1 = auVar8;\n                    pauVar1[1] = auVar8;\n                    pauVar2 = pauVar1[8];\n                    pauVar1[2] = auVar8;\n                    pauVar1[3] = auVar8;\n                    uVar5 = uVar5 - 1;\n                    pauVar1[4] = auVar8;\n                    pauVar1[5] = auVar8;\n                    pauVar1[6] = auVar8;\n                    pauVar1[7] = auVar8;\n                    pauVar1 = pauVar2;\n                } while (uVar5 != 0);\n                arg3 = arg3 & 0x7f;\n            }\n            else {\n                do {\n                    *pauVar1 = auVar8;\n                    pauVar1[1] = auVar8;\n                    pauVar2 = pauVar1[8];\n                    pauVar1[2] = auVar8;\n                    pauVar1[3] = auVar8;\n                    uVar5 = uVar5 - 1;\n                    pauVar1[4] = auVar8;\n                    pauVar1[5] = auVar8;\n                    pauVar1[6] = auVar8;\n                    pauVar1[7] = auVar8;\n                    pauVar1 = pauVar2;\n                } while (uVar5 != 0);\n                arg3 = arg3 & 0x7f;\n            }\n        }\n    }\n    for (uVar5 = arg3 >> 4; uVar5 != 0; uVar5 = uVar5 - 1) {\n        *pauVar1 = auVar8;\n        pauVar1 = pauVar1[1];\n    }\n    if ((arg3 & 0xf) != 0) {\n        *(pauVar1[-1] + (arg3 & 0xf)) = auVar8;\n    }\n    return arg1;\n}\n",
        "token_count": 1946
    },
    "14001286": {
        "rules": [
            "PEB access/cd8d96519f6244b6acf2796407e948b9",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001286c(int64_t arg1)\n\n{\n    // WARNING: Could not recover jumptable at 0x000140012870. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(arg1 + 0x30);\n    return;\n}\n",
        "token_count": 74
    },
    "14001287": {
        "rules": [
            "PEB access/cd8d96519f6244b6acf2796407e948b9",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140012878(int64_t arg1)\n\n{\n    // WARNING: Could not recover jumptable at 0x00014001287c. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(arg1 + 0x30);\n    return;\n}\n",
        "token_count": 75
    },
    "14001479": {
        "rules": [
            "hash data using djb2/86fcf1c18148478ab58e8c52ba43c8d5",
            "hash data using jshash/2d43aa00ef9c47beadbc2522c99f9e7b"
        ],
        "decompiled_code": "\nulong fcn.140014798(uint64_t *arg1, uchar *arg2, uint64_t arg3, ulong arg4)\n\n{\n    uint8_t *puVar1;\n    uint64_t uVar2;\n    uint8_t uVar3;\n    char cVar4;\n    uint16_t uVar5;\n    ulong uVar6;\n    char *pcVar7;\n    uint8_t *puVar8;\n    int64_t iVar9;\n    int64_t iVar10;\n    uchar *puVar11;\n    int16_t iVar12;\n    uint8_t *arg1_00;\n    uint32_t uVar13;\n    uint8_t *puVar14;\n    uchar *puVar15;\n    uint64_t uVar16;\n    uint32_t in_stack_00000030;\n    uint8_t in_stack_00000038;\n    uint32_t in_stack_00000048;\n    int64_t in_stack_00000050;\n    \n    *arg2 = 0;\n    uVar13 = 0;\n    if (-1 < in_stack_00000030) {\n        uVar13 = in_stack_00000030;\n    }\n    if (arg3 <= uVar13 + 0xb) {\n        *(in_stack_00000050 + 0x30) = 1;\n        *(in_stack_00000050 + 0x2c) = 0x22;\n        fcn.14000ccf4(0, 0, 0, 0);\n        return 0x22;\n    }\n    if ((*arg1 >> 0x34 & 0x7ff) == 0x7ff) {\n        uVar6 = fcn.140014b30(arg1, arg2, arg3, arg4);\n        if (uVar6 != 0) {\n            *arg2 = 0;\n            return uVar6;\n        }\n        pcVar7 = fcn.1400211e8(arg2, 0x65);\n        if (pcVar7 == NULL) {\n            return 0;\n        }\n        *pcVar7 = (in_stack_00000038 ^ 1) * ' ' + 'P';\n        pcVar7[3] = '\\0';\n        return 0;\n    }\n    puVar11 = arg2;\n    if (*arg1 < 0) {\n        *arg2 = 0x2d;\n        puVar11 = arg2 + 1;\n    }\n    puVar1 = puVar11 + 1;\n    uVar16 = 0x3ff;\n    iVar12 = (in_stack_00000038 ^ 1) * 0x20 + 7;\n    if ((*arg1 & 0x7ff0000000000000) == 0) {\n        *puVar11 = 0x30;\n        uVar16 = -((*arg1 & 0xfffffffffffff) != 0) & 0x3fe;\n    }\n    else {\n        *puVar11 = 0x31;\n    }\n    arg1_00 = puVar11 + 2;\n    if (uVar13 == 0) {\n        uVar3 = 0;\n    }\n    else {\n        if (*(in_stack_00000050 + 0x28) == '\\0') {\n            fcn.140011110(in_stack_00000050);\n        }\n        uVar3 = ***(*(in_stack_00000050 + 0x18) + 0xf8);\n    }\n    *puVar1 = uVar3;\n    if ((*arg1 & 0xfffffffffffff) != 0) {\n        puVar11 = 0x30;\n        puVar15 = 0xf000000000000;\n        while (arg2 = puVar15,  0 < uVar13) {\n            uVar5 = ((*arg1 & arg2) >> (puVar11 & 0x3f)) + 0x30;\n            if (0x39 < uVar5) {\n                uVar5 = uVar5 + iVar12;\n            }\n            *arg1_00 = uVar5;\n            uVar13 = uVar13 - 1;\n            arg1_00 = arg1_00 + 1;\n            puVar15 = arg2 >> 4;\n            uVar5 = puVar11 - 4;\n            arg2 = uVar5;\n            puVar11 = arg2;\n            if (uVar5 < 0) goto code_r0x0001400149ee;\n        }\n        cVar4 = fcn.140015194(arg1, arg2, puVar11, in_stack_00000048);\n        puVar14 = arg1_00;\n        if (cVar4 == '\\0') goto code_r0x000140014a14;\n        while( true ) {\n            puVar8 = puVar14 + -1;\n            uVar2 = arg2 & 0xffffffffffffff00;\n            arg2 = uVar2 | *puVar8;\n            if ((arg2 - 0x46U & 0xdf) != 0) break;\n            *puVar8 = 0x30;\n            puVar14 = puVar8;\n        }\n        if (puVar8 == puVar1) {\n            puVar14[-2] = puVar14[-2] + 1;\n        }\n        else {\n            if (*puVar8 == 0x39) {\n                arg2 = uVar2 | iVar12 + 0x39;\n            }\n            cVar4 = arg2;\n            arg2 = arg2 & 0xffffffffffffff00;\n            *puVar8 = cVar4 + 1;\n        }\n    }\ncode_r0x0001400149ee:\n    if (0 < uVar13) {\n        fcn.140020880(arg1_00, arg2 & 0xffffffffffffff00 | 0x30, uVar13);\n        arg1_00 = arg1_00 + uVar13;\n    }\ncode_r0x000140014a14:\n    if (*puVar1 == 0) {\n        arg1_00 = puVar1;\n    }\n    *arg1_00 = (in_stack_00000038 ^ 1) * ' ' + 0x50;\n    puVar1 = arg1_00 + 2;\n    uVar13 = *arg1 >> 0x34 & 0x7ff;\n    iVar9 = uVar13 - uVar16;\n    iVar10 = iVar9;\n    if (iVar9 < 0) {\n        iVar10 = uVar16 - uVar13;\n    }\n    uVar3 = 0x2b;\n    if (iVar9 < 0) {\n        uVar3 = 0x2d;\n    }\n    arg1_00[1] = uVar3;\n    *puVar1 = 0x30;\n    puVar14 = puVar1;\n    if (iVar10 < 1000) {\ncode_r0x000140014a9b:\n        if (99 < iVar10) goto code_r0x000140014aa1;\ncode_r0x000140014ad4:\n        if (iVar10 < 10) goto code_r0x000140014b05;\n    }\n    else {\n        puVar14 = arg1_00 + 3;\n        *puVar1 = iVar10 / 1000 + 0x30;\n        iVar10 = iVar10 % 1000;\n        if (puVar14 == puVar1) goto code_r0x000140014a9b;\ncode_r0x000140014aa1:\n        iVar9 = SUB168(SEXT816(-0x5c28f5c28f5c28f5) * SEXT816(iVar10) >> 0x40, 0) + iVar10;\n        iVar9 = (iVar9 >> 6) - (iVar9 >> 0x3f);\n        *puVar14 = iVar9 + 0x30;\n        puVar14 = puVar14 + 1;\n        iVar10 = iVar10 + iVar9 * -100;\n        if (puVar14 == puVar1) goto code_r0x000140014ad4;\n    }\n    *puVar14 = iVar10 / 10 + 0x30;\n    puVar14 = puVar14 + 1;\n    iVar10 = iVar10 % 10;\ncode_r0x000140014b05:\n    *puVar14 = iVar10 + 0x30;\n    puVar14[1] = 0;\n    return 0;\n}\n",
        "token_count": 1866
    },
    "14000109": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140001090(ulong arg1, ulong arg2, ulong noname_2, ulong noname_3, ulong noname_4, ulong noname_5, \n                  ulong noname_6, int64_t *noname_7, int64_t *noname_8, ulong noname_9, ulong noname_10, ulong noname_11\n                  , ulong noname_12, ulong noname_13, ulong arg_80h, ulong arg_88h, ulong arg_90h, ulong arg_98h, \n                  ulong arg_a0h, ulong arg_a8h, ulong arg_b0h, ulong arg_b8h, ulong arg_c0h, ulong arg_c8h, \n                  ulong arg_d0h, ulong arg_d8h, ulong arg_e0h, ulong arg_e8h, ulong arg_f0h)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    ulong var_8h;\n    ulong var_10h;\n    ulong var_18h;\n    ulong var_20h;\n    ulong var_28h;\n    ulong var_30h;\n    int64_t *var_38h;\n    int64_t *var_40h;\n    uchar auStack344 [32];\n    uint uStack312;\n    uchar *puStack304;\n    uchar auStack296 [32];\n    ulong uStack264;\n    ulong uStack256;\n    int64_t iStack248;\n    int32_t iStack240;\n    uint uStack236;\n    int64_t iStack232;\n    int32_t iStack224;\n    uint uStack220;\n    int64_t iStack216;\n    int32_t iStack208;\n    uint uStack204;\n    int64_t iStack200;\n    int32_t iStack192;\n    uint uStack188;\n    ulong uStack184;\n    ulong uStack176;\n    ulong uStack168;\n    ulong uStack160;\n    ulong uStack152;\n    ulong uStack144;\n    ulong var_80h;\n    ulong var_78h;\n    ulong var_70h;\n    ulong var_68h;\n    ulong var_60h;\n    ulong var_58h;\n    ulong var_50h;\n    ulong var_48h;\n    ulong var_40h_2;\n    ulong var_38h_2;\n    ulong var_30h_2;\n    ulong var_28h_2;\n    ulong var_20h_2;\n    ulong var_18h_2;\n    uint64_t var_10h_2;\n    ulong var_8h_2;\n    \n    var_10h_2 = *0x140037f00 ^ auStack344;\n    var_20h_2 = arg_a0h;\n    iVar2 = -1;\n    var_30h_2 = arg_98h;\n    iStack240 = 2;\n    var_40h_2 = arg_90h;\n    var_50h = arg_88h;\n    var_60h = arg_80h;\n    var_80h = noname_12;\n    uStack152 = noname_11;\n    uStack168 = noname_10;\n    uStack184 = noname_9;\n    var_18h_2 = 4;\n    var_28h_2 = 4;\n    var_38h_2 = 4;\n    iStack200 = *noname_8;\n    var_48h = 4;\n    var_58h = 4;\n    var_68h = 4;\n    var_78h = 4;\n    uStack144 = 4;\n    uStack160 = 4;\n    uStack176 = 4;\n    if (iStack200 == 0) {\n        iStack200 = 0x14002f5a0;\n        iStack192 = iStack240;\n    }\n    else {\n        iVar1 = -1;\n        do {\n            iVar1 = iVar1 + 1;\n        } while (*(iStack200 + iVar1 * 2) != 0);\n        iStack192 = iVar1 * 2 + 2;\n    }\n    uStack188 = 0;\n    iStack216 = *noname_7;\n    if (iStack216 == 0) {\n        iStack216 = 0x14002f5a0;\n        iStack208 = iStack240;\n    }\n    else {\n        iVar1 = -1;\n        do {\n            iVar1 = iVar1 + 1;\n        } while (*(iStack216 + iVar1 * 2) != 0);\n        iStack208 = iVar1 * 2 + 2;\n    }\n    uStack204 = 0;\n    iStack232 = *var_40h;\n    if (iStack232 == 0) {\n        iStack232 = 0x14002f5a0;\n        iStack224 = iStack240;\n    }\n    else {\n        iVar1 = -1;\n        do {\n            iVar1 = iVar1 + 1;\n        } while (*(iStack232 + iVar1 * 2) != 0);\n        iStack224 = iVar1 * 2 + 2;\n    }\n    uStack220 = 0;\n    iStack248 = *var_38h;\n    if (iStack248 == 0) {\n        iStack248 = 0x14002f5a0;\n    }\n    else {\n        do {\n            iVar2 = iVar2 + 1;\n        } while (*(iStack248 + iVar2 * 2) != 0);\n        iStack240 = iVar2 * 2 + 2;\n    }\n    uStack264 = var_30h;\n    puStack304 = auStack296;\n    uStack312 = 0x11;\n    uStack236 = 0;\n    uStack256 = 8;\n    var_70h = noname_13;\n    fcn.140001000(0x140037270, arg2, 0, 0);\n    fcn.14001e9f0(var_10h_2 ^ auStack344);\n    return;\n}\n",
        "token_count": 1328
    },
    "1400012b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.1400012bc(ulong arg1, ulong arg2, ulong noname_2, ulong noname_3, ulong noname_4, ulong noname_5, \n                  ulong noname_6, int64_t *noname_7, int64_t *noname_8, ulong noname_9, ulong noname_10, ulong noname_11\n                  , ulong noname_12, ulong noname_13, ulong arg_80h, ulong arg_88h, ulong arg_90h, ulong arg_98h, \n                  int64_t *arg_a0h, ulong arg_a8h, ulong arg_b0h, ulong arg_b8h, ulong arg_c0h, ulong arg_c8h, \n                  ulong arg_d0h, ulong arg_d8h, ulong arg_e0h, ulong arg_e8h, ulong arg_f0h)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    ulong var_8h;\n    ulong var_10h;\n    ulong var_18h;\n    ulong var_20h;\n    ulong var_28h;\n    ulong var_30h_2;\n    int64_t *var_38h;\n    int64_t *var_40h;\n    uchar auStack344 [32];\n    uint uStack312;\n    uchar *puStack304;\n    uchar auStack296 [32];\n    ulong uStack264;\n    ulong uStack256;\n    int64_t iStack248;\n    int32_t iStack240;\n    uint uStack236;\n    int64_t iStack232;\n    int32_t iStack224;\n    uint uStack220;\n    int64_t iStack216;\n    int32_t iStack208;\n    uint uStack204;\n    int64_t iStack200;\n    int32_t iStack192;\n    uint uStack188;\n    ulong uStack184;\n    ulong uStack176;\n    ulong uStack168;\n    ulong uStack160;\n    ulong uStack152;\n    ulong uStack144;\n    ulong var_80h;\n    ulong var_78h;\n    ulong var_70h;\n    ulong var_68h;\n    ulong var_60h;\n    ulong var_58h;\n    ulong var_50h;\n    ulong var_48h;\n    ulong var_40h_2;\n    ulong var_38h_2;\n    ulong var_30h;\n    ulong var_28h_2;\n    int64_t var_20h_2;\n    ulong var_18h_2;\n    uint64_t var_10h_2;\n    ulong var_8h_2;\n    \n    var_10h_2 = *0x140037f00 ^ auStack344;\n    iVar2 = -1;\n    var_20h_2 = *arg_a0h;\n    if (var_20h_2 == 0) {\n        var_20h_2 = 0x14002f59d;\n        var_18h_2._0_4_ = 1;\n    }\n    else {\n        iVar1 = -1;\n        do {\n            iVar1 = iVar1 + 1;\n        } while (*(var_20h_2 + iVar1) != '\\0');\n        var_18h_2._0_4_ = iVar1 + 1;\n    }\n    iStack240 = 2;\n    var_30h = arg_98h;\n    var_40h_2 = arg_90h;\n    var_50h = arg_88h;\n    var_60h = arg_80h;\n    var_80h = noname_12;\n    uStack152 = noname_11;\n    uStack168 = noname_10;\n    uStack184 = noname_9;\n    var_18h_2._4_4_ = 0;\n    var_28h_2 = 4;\n    iStack200 = *noname_8;\n    var_38h_2 = 4;\n    var_48h = 4;\n    var_58h = 4;\n    var_68h = 4;\n    var_78h = 4;\n    uStack144 = 4;\n    uStack160 = 4;\n    uStack176 = 4;\n    if (iStack200 == 0) {\n        iStack200 = 0x14002f5a0;\n        iStack192 = 2;\n    }\n    else {\n        iVar1 = -1;\n        do {\n            iVar1 = iVar1 + 1;\n        } while (*(iStack200 + iVar1 * 2) != 0);\n        iStack192 = iVar1 * 2 + 2;\n    }\n    uStack188 = 0;\n    iStack216 = *noname_7;\n    if (iStack216 == 0) {\n        iStack216 = 0x14002f5a0;\n        iStack208 = 2;\n    }\n    else {\n        iVar1 = -1;\n        do {\n            iVar1 = iVar1 + 1;\n        } while (*(iStack216 + iVar1 * 2) != 0);\n        iStack208 = iVar1 * 2 + 2;\n    }\n    uStack204 = 0;\n    iStack232 = *var_40h;\n    if (iStack232 == 0) {\n        iStack232 = 0x14002f5a0;\n        iStack224 = 2;\n    }\n    else {\n        iVar1 = -1;\n        do {\n            iVar1 = iVar1 + 1;\n        } while (*(iStack232 + iVar1 * 2) != 0);\n        iStack224 = iVar1 * 2 + 2;\n    }\n    uStack220 = 0;\n    iStack248 = *var_38h;\n    if (iStack248 == 0) {\n        iStack248 = 0x14002f5a0;\n    }\n    else {\n        do {\n            iVar2 = iVar2 + 1;\n        } while (*(iStack248 + iVar2 * 2) != 0);\n        iStack240 = iVar2 * 2 + 2;\n    }\n    uStack264 = var_30h_2;\n    puStack304 = auStack296;\n    uStack312 = 0x11;\n    uStack236 = 0;\n    uStack256 = 8;\n    var_70h = noname_13;\n    fcn.140001000(0x140037270, arg2, 0, 0);\n    fcn.14001e9f0(var_10h_2 ^ auStack344);\n    return;\n}\n",
        "token_count": 1458
    },
    "14000150": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000150c(ulong arg1, ulong arg2, ulong noname_2, ulong noname_3, ulong noname_4, int64_t *noname_5, \n                  int64_t *noname_6, int64_t *noname_7, int64_t *noname_8, ulong noname_9, ulong noname_10, \n                  ulong noname_11, ulong arg_70h, ulong arg_78h, ulong arg_80h, ulong arg_88h, ulong arg_90h, \n                  ulong arg_98h, ulong arg_a0h, ulong arg_a8h, ulong arg_b0h, ulong arg_b8h, ulong arg_c0h, \n                  ulong arg_c8h, ulong arg_d0h, ulong arg_d8h)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    ulong var_8h;\n    ulong var_10h;\n    ulong var_18h;\n    ulong var_20h;\n    ulong var_28h;\n    ulong var_30h;\n    uchar auStack328 [32];\n    uint uStack296;\n    uchar *puStack288;\n    uchar auStack280 [32];\n    ulong uStack248;\n    ulong uStack240;\n    int64_t iStack232;\n    int32_t iStack224;\n    uint uStack220;\n    int64_t iStack216;\n    int32_t iStack208;\n    uint uStack204;\n    int64_t iStack200;\n    int32_t iStack192;\n    uint uStack188;\n    int64_t iStack184;\n    int32_t iStack176;\n    uint uStack172;\n    ulong uStack168;\n    ulong uStack160;\n    ulong uStack152;\n    ulong uStack144;\n    ulong var_80h;\n    ulong var_78h;\n    ulong var_70h;\n    ulong var_68h;\n    ulong var_60h;\n    ulong var_58h;\n    ulong var_50h;\n    ulong var_48h;\n    ulong var_40h;\n    ulong var_38h;\n    ulong var_30h_2;\n    ulong var_28h_2;\n    ulong var_20h_2;\n    ulong var_18h_2;\n    uint64_t var_10h_2;\n    ulong var_8h_2;\n    \n    var_10h_2 = *0x140037f00 ^ auStack328;\n    var_20h_2 = arg_98h;\n    iVar2 = -1;\n    var_30h_2 = arg_90h;\n    iStack224 = 2;\n    var_40h = arg_88h;\n    var_50h = arg_80h;\n    var_60h = arg_78h;\n    var_70h = arg_70h;\n    uStack152 = noname_10;\n    uStack168 = noname_9;\n    var_18h_2 = 4;\n    var_28h_2 = 4;\n    var_38h = 4;\n    iStack184 = *noname_8;\n    var_48h = 4;\n    var_58h = 4;\n    var_68h = 4;\n    var_78h = 4;\n    uStack144 = 4;\n    uStack160 = 4;\n    if (iStack184 == 0) {\n        iStack184 = 0x14002f5a0;\n        iStack176 = iStack224;\n    }\n    else {\n        iVar1 = -1;\n        do {\n            iVar1 = iVar1 + 1;\n        } while (*(iStack184 + iVar1 * 2) != 0);\n        iStack176 = iVar1 * 2 + 2;\n    }\n    uStack172 = 0;\n    iStack200 = *noname_7;\n    if (iStack200 == 0) {\n        iStack200 = 0x14002f5a0;\n        iStack192 = iStack224;\n    }\n    else {\n        iVar1 = -1;\n        do {\n            iVar1 = iVar1 + 1;\n        } while (*(iStack200 + iVar1 * 2) != 0);\n        iStack192 = iVar1 * 2 + 2;\n    }\n    uStack188 = 0;\n    iStack216 = *noname_6;\n    if (iStack216 == 0) {\n        iStack216 = 0x14002f5a0;\n        iStack208 = iStack224;\n    }\n    else {\n        iVar1 = -1;\n        do {\n            iVar1 = iVar1 + 1;\n        } while (*(iStack216 + iVar1 * 2) != 0);\n        iStack208 = iVar1 * 2 + 2;\n    }\n    uStack204 = 0;\n    iStack232 = *noname_5;\n    if (iStack232 == 0) {\n        iStack232 = 0x14002f5a0;\n    }\n    else {\n        do {\n            iVar2 = iVar2 + 1;\n        } while (*(iStack232 + iVar2 * 2) != 0);\n        iStack224 = iVar2 * 2 + 2;\n    }\n    uStack248 = var_30h;\n    puStack288 = auStack280;\n    uStack296 = 0x10;\n    uStack220 = 0;\n    uStack240 = 8;\n    var_80h = noname_11;\n    fcn.140001000(0x140037270, arg2, 0, 0);\n    fcn.14001e9f0(var_10h_2 ^ auStack328);\n    return;\n}\n",
        "token_count": 1259
    },
    "14000171": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.14000171c(ulong arg1, ulong arg2, ulong noname_2, ulong noname_3, ulong noname_4, int64_t *noname_5, \n                  int64_t *noname_6, int64_t *noname_7, int64_t *noname_8, ulong noname_9, ulong noname_10, \n                  ulong noname_11, ulong arg_70h, ulong arg_78h, ulong arg_80h, ulong arg_88h, ulong arg_90h, \n                  int64_t *arg_98h, ulong arg_a0h, ulong arg_a8h, ulong arg_b0h, ulong arg_b8h, ulong arg_c0h, \n                  ulong arg_c8h, ulong arg_d0h, ulong arg_d8h)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    ulong var_8h;\n    ulong var_10h;\n    ulong var_18h;\n    ulong var_20h_2;\n    ulong var_28h;\n    ulong var_30h;\n    uchar auStack328 [32];\n    uint uStack296;\n    uchar *puStack288;\n    uchar auStack280 [32];\n    ulong uStack248;\n    ulong uStack240;\n    int64_t iStack232;\n    int32_t iStack224;\n    uint uStack220;\n    int64_t iStack216;\n    int32_t iStack208;\n    uint uStack204;\n    int64_t iStack200;\n    int32_t iStack192;\n    uint uStack188;\n    int64_t iStack184;\n    int32_t iStack176;\n    uint uStack172;\n    ulong uStack168;\n    ulong uStack160;\n    ulong uStack152;\n    ulong uStack144;\n    ulong var_80h;\n    ulong var_78h;\n    ulong var_70h;\n    ulong var_68h;\n    ulong var_60h;\n    ulong var_58h;\n    ulong var_50h;\n    ulong var_48h;\n    ulong var_40h;\n    ulong var_38h;\n    ulong var_30h_2;\n    ulong var_28h_2;\n    int64_t var_20h;\n    ulong var_18h_2;\n    uint64_t var_10h_2;\n    ulong var_8h_2;\n    \n    var_10h_2 = *0x140037f00 ^ auStack328;\n    iVar2 = -1;\n    var_20h = *arg_98h;\n    if (var_20h == 0) {\n        var_20h = 0x14002f59d;\n        var_18h_2._0_4_ = 1;\n    }\n    else {\n        iVar1 = -1;\n        do {\n            iVar1 = iVar1 + 1;\n        } while (*(var_20h + iVar1) != '\\0');\n        var_18h_2._0_4_ = iVar1 + 1;\n    }\n    iStack224 = 2;\n    var_30h_2 = arg_90h;\n    var_40h = arg_88h;\n    var_50h = arg_80h;\n    var_60h = arg_78h;\n    var_70h = arg_70h;\n    uStack152 = noname_10;\n    uStack168 = noname_9;\n    var_18h_2._4_4_ = 0;\n    var_28h_2 = 4;\n    iStack184 = *noname_8;\n    var_38h = 4;\n    var_48h = 4;\n    var_58h = 4;\n    var_68h = 4;\n    var_78h = 4;\n    uStack144 = 4;\n    uStack160 = 4;\n    if (iStack184 == 0) {\n        iStack184 = 0x14002f5a0;\n        iStack176 = 2;\n    }\n    else {\n        iVar1 = -1;\n        do {\n            iVar1 = iVar1 + 1;\n        } while (*(iStack184 + iVar1 * 2) != 0);\n        iStack176 = iVar1 * 2 + 2;\n    }\n    uStack172 = 0;\n    iStack200 = *noname_7;\n    if (iStack200 == 0) {\n        iStack200 = 0x14002f5a0;\n        iStack192 = 2;\n    }\n    else {\n        iVar1 = -1;\n        do {\n            iVar1 = iVar1 + 1;\n        } while (*(iStack200 + iVar1 * 2) != 0);\n        iStack192 = iVar1 * 2 + 2;\n    }\n    uStack188 = 0;\n    iStack216 = *noname_6;\n    if (iStack216 == 0) {\n        iStack216 = 0x14002f5a0;\n        iStack208 = 2;\n    }\n    else {\n        iVar1 = -1;\n        do {\n            iVar1 = iVar1 + 1;\n        } while (*(iStack216 + iVar1 * 2) != 0);\n        iStack208 = iVar1 * 2 + 2;\n    }\n    uStack204 = 0;\n    iStack232 = *noname_5;\n    if (iStack232 == 0) {\n        iStack232 = 0x14002f5a0;\n    }\n    else {\n        do {\n            iVar2 = iVar2 + 1;\n        } while (*(iStack232 + iVar2 * 2) != 0);\n        iStack224 = iVar2 * 2 + 2;\n    }\n    uStack248 = var_30h;\n    puStack288 = auStack280;\n    uStack296 = 0x10;\n    uStack220 = 0;\n    uStack240 = 8;\n    var_80h = noname_11;\n    fcn.140001000(0x140037270, arg2, 0, 0);\n    fcn.14001e9f0(var_10h_2 ^ auStack328);\n    return;\n}\n",
        "token_count": 1380
    },
    "14001f3c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.14001f3cc(ulong param_1)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.14001f390(param_1);\n    return (iVar1 != 0) - 1;\n}\n",
        "token_count": 56
    },
    "140001b6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140001b60(ulong LoggerHandle, ulong noname_1, ulong MessageGuid)\n\n{\n    (*_sym.imp.ADVAPI32.dll_TraceMessage)(LoggerHandle, 0x2b, MessageGuid, noname_1, 0);\n    return;\n}\n",
        "token_count": 63
    },
    "140001b8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140001b80(ulong arg1, ulong noname_1, ulong MessageGuid, int64_t arg4)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    \n    if (arg4 == 0) {\n        iVar1 = 10;\n    }\n    else {\n        iVar1 = -1;\n        do {\n            iVar1 = iVar1 + 1;\n        } while (*(arg4 + iVar1 * 2) != 0);\n        iVar1 = iVar1 * 2 + 2;\n    }\n    iVar2 = 0x14002f2e8;\n    if (arg4 != 0) {\n        iVar2 = arg4;\n    }\n    (*_sym.imp.ADVAPI32.dll_TraceMessage)(arg1, 0x2b, MessageGuid, noname_1, iVar2, iVar1, &stack0x00000028, 4, 0);\n    return;\n}\n",
        "token_count": 208
    },
    "140001fc": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140001fc0(uchar *arg1, int64_t arg2, ulong arg3, ulong arg4)\n\n{\n    uint64_t arg3_00;\n    int32_t iVar1;\n    uint64_t *puVar2;\n    ulong uVar3;\n    \n    if (arg2 - 1U < 0x7fffffff) {\n        uVar3 = 0;\n        arg3_00 = arg2 - 1;\n        puVar2 = fcn.140001e4c();\n        iVar1 = fcn.1400112d4(*puVar2 | 1, arg1, arg3_00, arg3);\n        if (iVar1 < 0) {\n            iVar1 = -1;\n        }\n        if ((iVar1 < 0) || (arg3_00 < iVar1)) {\n            arg1[arg3_00] = 0;\n            uVar3 = 0x8007007a;\n        }\n        else if (iVar1 == arg3_00) {\n            arg1[arg3_00] = 0;\n        }\n    }\n    else {\n        uVar3 = 0x80070057;\n        if (arg2 != 0) {\n            *arg1 = 0;\n        }\n    }\n    return uVar3;\n}\n",
        "token_count": 283
    },
    "14000205": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t fcn.14000205c(ulong arg1)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    ushort auStackX16 [4];\n    uint auStackX24 [2];\n    int64_t iStackX32;\n    \n    iStackX32 = -1;\n    uVar1 = fcn.140009044(&iStackX32, arg1, 0x12019f, 3);\n    if (-1 < uVar1) {\n        auStackX24[0] = 0;\n        auStackX16[0] = 1;\n        iVar2 = (*_sym.imp.KERNEL32.dll_DeviceIoControl)(iStackX32, 0x9c040, auStackX16, 2, 0, 0, auStackX24, 0);\n        if (iVar2 == 0) {\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            uVar1 = uVar3 & 0xffff | 0x80070000;\n            if (uVar3 < 1) {\n                uVar1 = uVar3;\n            }\n        }\n        else {\n            uVar1 = 0;\n        }\n    }\n    if (iStackX32 != -1) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iStackX32);\n    }\n    return uVar1;\n}\n",
        "token_count": 314
    },
    "14000235": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t fcn.140002358(ulong arg1)\n\n{\n    int64_t iVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    int64_t aiStackX16 [3];\n    \n    aiStackX16[0] = 0;\n    uVar2 = fcn.140009394(aiStackX16, arg1, 0x100001);\n    iVar1 = aiStackX16[0];\n    if (uVar2 < 0) {\n        if (uVar2 != 0x80070057) {\n            if (aiStackX16[0] == 0) {\n                return uVar2;\n            }\n            (*_sym.imp.KERNEL32.dll_CloseHandle)();\n            return uVar2;\n        }\n    }\n    else {\n        iVar3 = (*_sym.imp.KERNEL32.dll_TerminateProcess)(aiStackX16[0], 1);\n        if (iVar3 == 0) {\n            uVar4 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            uVar2 = uVar4 & 0xffff | 0x80070000;\n            if (uVar4 < 1) {\n                uVar2 = uVar4;\n            }\n            if (iVar1 == 0) {\n                return uVar2;\n            }\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar1);\n            return uVar2;\n        }\n        iVar3 = (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(iVar1, 30000);\n        if (iVar3 != 0) {\n            if (iVar1 != 0) {\n                (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar1);\n            }\n            return 0x80004005;\n        }\n    }\n    if (iVar1 != 0) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar1);\n    }\n    return 0;\n}\n",
        "token_count": 424
    },
    "140002e3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** fcn.140002e38(code **arg1, ulong arg2)\n\n{\n    int64_t iVar1;\n    code *pcVar2;\n    code **ppcVar3;\n    uint64_t arg1_00;\n    \n    arg1_00 = arg2;\n    *(arg1 + 1) = 0;\n    *arg1 = vtable.WriteableFileObject.0;\n    arg1[2] = NULL;\n    arg1[3] = NULL;\n    arg1[4] = NULL;\n    if (arg2 != 0) {\n        if (arg1_00 < 0x1000) {\n            pcVar2 = fcn.14001ea18(arg1_00);\n        }\n        else {\n            if (arg1_00 + 0x27 <= arg1_00) {\n                fcn.140001f28();\n                pcVar2 = swi(3);\n                ppcVar3 = (*pcVar2)();\n                return ppcVar3;\n            }\n            iVar1 = fcn.14001ea18(arg1_00 + 0x27);\n            if (iVar1 == 0) {\n                fcn.14000cde0();\n                pcVar2 = swi(3);\n                ppcVar3 = (*pcVar2)();\n                return ppcVar3;\n            }\n            pcVar2 = iVar1 + 0x27U & 0xffffffffffffffe0;\n            *(pcVar2 + -8) = iVar1;\n        }\n        arg1[2] = pcVar2;\n        arg1[4] = pcVar2 + arg1_00;\n        pcVar2 = arg1[2];\n        fcn.140020880(pcVar2, 0, arg1_00);\n        arg1[3] = pcVar2 + arg1_00;\n    }\n    return arg1;\n}\n",
        "token_count": 406
    },
    "14000322": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_10h\n// WARNING: Variable defined which should be unmapped: var_bp_18h\n// WARNING: Variable defined which should be unmapped: var_20h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.140003224(int64_t *arg1, ulong arg2, ulong arg3)\n\n{\n    code *pcVar1;\n    uchar auVar2 [16];\n    int64_t iVar3;\n    int32_t iVar4;\n    int64_t iVar5;\n    int64_t iVar6;\n    ulong var_100h;\n    uchar auStack568 [32];\n    ulong uStack536;\n    ulong uStack528;\n    ulong *puStack520;\n    uint uStack512;\n    ulong *puStack504;\n    int64_t *piStack488;\n    int64_t iStack480;\n    int64_t iStack472;\n    int64_t iStack464;\n    int64_t iStack456;\n    uchar auStack448 [16];\n    ulong uStack432;\n    ulong uStack424;\n    uchar auStack416 [16];\n    uchar auStack400 [16];\n    int64_t iStack384;\n    uchar uStack368;\n    int64_t **ppiStack360;\n    int64_t *piStack352;\n    ulong uStack344;\n    uint uStack336;\n    uchar auStack328 [192];\n    ulong var_80h;\n    ulong var_bp_78h;\n    ulong var_70h;\n    ulong var_68h;\n    ulong var_bp_58h;\n    ulong var_bp_50h;\n    ulong var_48h;\n    ulong var_bp_38h;\n    uint64_t var_bp_30h;\n    ulong var_bp_28h;\n    ulong var_20h;\n    ulong var_bp_18h;\n    ulong var_10h;\n    \n    var_bp_30h = *0x140037f00 ^ auStack568;\n    iVar6 = 0;\n    auStack448 = ZEXT816(0);\n    uStack432 = 0;\n    piStack488 = arg1;\n    iVar4 = fcn.14000a770(&iStack480, L\"cabinet.dll\");\n    if (((((iVar4 < 0) || (iStack472 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iStack480, \"FDICreate\"),  iStack472 == 0)\n          ) || (iStack464 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iStack480, \"FDICopy\"),  iStack464 == 0)) ||\n        (iStack456 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iStack480, \"FDIDestroy\"),  iStack456 == 0)) &&\n       (iStack480 != 0)) {\n        (*_sym.imp.KERNEL32.dll_FreeLibrary)(iStack480);\n        iStack480 = 0;\n        iStack472 = 0;\n        iStack464 = 0;\n        iStack456 = 0;\n    }\n    if (iStack480 == 0) {\n        *arg1 = 0;\n        arg1[1] = 0;\n        arg1[2] = 0;\n    }\n    else {\n        uStack344 = 0;\n        uStack336 = 0;\n        puStack504 = &uStack344;\n        uStack512 = 0;\n        puStack520 = 0x140003650;\n        uStack528 = 0x1400036b0;\n        uStack536 = 0x140003630;\n        piStack488 = (**0x140029a28)(0x140003550, fcn.140003560, 0x140003600, 0x140003610);\n        uStack368 = 0;\n        ppiStack360 = &piStack488;\n        piStack352 = &iStack480;\n        uStack536 = arg2;\n        iVar4 = fcn.140001fc0(auStack328, 0x104, \"%s%#Ix\", \"\\\\\\\\.\\\\CABINET\\\\\");\n        if (iVar4 < 0) {\n            uStack432 = 0;\n            auStack448 = auStack448 & 0xffffffffffffffff;\n            *arg1 = 0;\n            arg1[1] = 0;\n            arg1[2] = 0;\n            if (piStack488 != NULL) {\n                (**0x140029a28)();\n            }\n        }\n        else {\n            uStack424 = arg3;\n            fcn.140002e38(auStack416, 0);\n            puStack520 = &uStack424;\n            uStack528 = 0;\n            uStack536 = 0x1400037c0;\n            iVar4 = (**0x140029a28)(piStack488, auStack328, 0x14002f59d, 0);\n            iVar3 = iStack384;\n            if (iVar4 == 0) {\n                auStack400._8_8_ = auStack448._8_8_;\n                iVar5 = auStack400._0_8_;\n                auStack400._0_8_ = auStack448._0_8_;\n            }\n            else {\n                auVar2 = auStack400 >> 0x40 & 0xffffffffffffffff;\n                auStack400 = auVar2 << 0x40;\n                auStack400._8_8_ = SUB168(auVar2, 0);\n                auStack400 = auStack400 & 0xffffffffffffffff;\n                iStack384 = 0;\n                iVar5 = iVar6;\n                iVar6 = iVar3;\n            }\n            uStack432 = 0;\n            auStack448 = auStack448 & 0xffffffffffffffff;\n            *arg1 = auStack400._0_8_;\n            arg1[1] = auStack400._8_8_;\n            arg1[2] = iVar6;\n            if (iVar5 != 0) {\n                iVar6 = iVar5;\n                if (0xfff < iStack384 - iVar5) {\n                    iVar6 = *(iVar5 + -8);\n                    if (0x1f < (iVar5 - iVar6) - 8U) {\n                        fcn.14000cde0(iVar6, (iStack384 - iVar5) + 0x27);\n                        pcVar1 = swi(3);\n                        (*pcVar1)();\n                        return;\n                    }\n                }\n                fcn.14001ea54(iVar6);\n                auStack400 = ZEXT816(0);\n                iStack384 = 0;\n            }\n            if (piStack488 != NULL) {\n                (**0x140029a28)();\n            }\n        }\n        if (iStack480 != 0) {\n            (*_sym.imp.KERNEL32.dll_FreeLibrary)();\n        }\n    }\n    fcn.14001e9f0(var_bp_30h ^ auStack568);\n    return;\n}\n",
        "token_count": 1499
    },
    "14001441": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.140014410(uint64_t arg1)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    uint *puVar3;\n    \n    if (arg1 < 0xffffffffffffffe1) {\n        if (arg1 == 0) {\n            arg1 = 1;\n        }\n        do {\n            iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(*0x140038820, 0, arg1);\n            if (iVar2 != 0) {\n                return iVar2;\n            }\n            iVar1 = fcn.14001a3ec();\n        } while ((iVar1 != 0) && (iVar1 = fcn.14001a374(arg1),  iVar1 != 0));\n    }\n    puVar3 = fcn.14000d3d8();\n    *puVar3 = 0xc;\n    return 0;\n}\n",
        "token_count": 198
    },
    "14001266": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140012664(int64_t lpMem)\n\n{\n    uint *puVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint uVar4;\n    \n    if ((lpMem != 0) && (iVar2 = (*_sym.imp.KERNEL32.dll_HeapFree)(*0x140038820, 0, lpMem),  iVar2 == 0)) {\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        uVar4 = fcn.14000d304(uVar3);\n        puVar1 = fcn.14000d3d8();\n        *puVar1 = uVar4;\n    }\n    return;\n}\n",
        "token_count": 153
    },
    "14000449": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid fcn.14000449c(int64_t *arg1)\n\n{\n    int64_t iVar1;\n    code *pcVar2;\n    int64_t arg1_00;\n    \n    iVar1 = *arg1;\n    if (iVar1 != 0) {\n        arg1_00 = iVar1;\n        if (0xfff < arg1[2] - iVar1) {\n            arg1_00 = *(iVar1 + -8);\n            if (0x1f < (iVar1 - arg1_00) - 8U) {\n                fcn.14000cde0(iVar1 - arg1_00, (arg1[2] - iVar1) + 0x27);\n                pcVar2 = swi(3);\n                (*pcVar2)();\n                return;\n            }\n        }\n        fcn.14001ea54(arg1_00);\n        *arg1 = 0;\n        arg1[1] = 0;\n        arg1[2] = 0;\n    }\n    return;\n}\n",
        "token_count": 224
    },
    "1400044f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nint64_t * fcn.1400044f4(int64_t *arg1, int64_t *arg2)\n\n{\n    int64_t iVar1;\n    code *pcVar2;\n    int64_t *piVar3;\n    int64_t arg1_00;\n    \n    if (arg1 != arg2) {\n        iVar1 = *arg1;\n        if (iVar1 != 0) {\n            arg1_00 = iVar1;\n            if (0xfff < arg1[2] - iVar1) {\n                arg1_00 = *(iVar1 + -8);\n                if (0x1f < (iVar1 - arg1_00) - 8U) {\n                    fcn.14000cde0(iVar1 - arg1_00, (arg1[2] - iVar1) + 0x27);\n                    pcVar2 = swi(3);\n                    piVar3 = (*pcVar2)();\n                    return piVar3;\n                }\n            }\n            fcn.14001ea54(arg1_00);\n            *arg1 = 0;\n            arg1[1] = 0;\n            arg1[2] = 0;\n        }\n        *arg1 = *arg2;\n        arg1[1] = arg2[1];\n        arg1[2] = arg2[2];\n        *arg2 = 0;\n        arg2[1] = 0;\n        arg2[2] = 0;\n    }\n    return arg1;\n}\n",
        "token_count": 326
    },
    "14000459": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t fcn.14000459c(int64_t *arg1)\n\n{\n    ulong uVar1;\n    int64_t iVar2;\n    uint64_t in_RDX;\n    \n    uVar1 = SUB168(ZEXT816(2) * ZEXT816(in_RDX), 0);\n    if (SUB168(ZEXT816(2) * ZEXT816(in_RDX) >> 0x40, 0) != 0) {\n        uVar1 = 0xffffffffffffffff;\n    }\n    iVar2 = fcn.14001ea5c(uVar1, 0x14002f788);\n    *arg1 = iVar2;\n    return ~-(iVar2 != 0) & 0x8007000e;\n}\n",
        "token_count": 162
    },
    "14000460": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140004600(ushort *arg1, int64_t arg2, ulong arg3, ulong arg4)\n\n{\n    uint64_t arg3_00;\n    int32_t iVar1;\n    uint64_t *puVar2;\n    ulong uVar3;\n    \n    uVar3 = 0;\n    if (arg2 - 1U < 0x7fffffff) {\n        arg3_00 = arg2 - 1;\n        puVar2 = fcn.140001e4c();\n        iVar1 = fcn.140011528(*puVar2 | 1, arg1, arg3_00, arg3);\n        if (iVar1 < 0) {\n            iVar1 = -1;\n        }\n        if ((iVar1 < 0) || (arg3_00 < iVar1)) {\n            uVar3 = 0x8007007a;\n        }\n        else if (iVar1 != arg3_00) {\n            return 0;\n        }\n        arg1[arg3_00] = 0;\n    }\n    else {\n        uVar3 = 0x80070057;\n        if (arg2 != 0) {\n            *arg1 = 0;\n        }\n    }\n    return uVar3;\n}\n",
        "token_count": 273
    },
    "14000469": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000469c(int64_t *arg1)\n\n{\n    if (arg1[4] != 0) {\n        fcn.14001ea10(arg1[4]);\n    }\n    if (arg1[3] != 0) {\n        fcn.14001ea10(arg1[3]);\n    }\n    if (arg1[2] != 0) {\n        fcn.14001ea10(arg1[2]);\n    }\n    if (arg1[1] != 0) {\n        fcn.14001ea10(arg1[1]);\n    }\n    if (*arg1 != 0) {\n        (**0x140029a28)(*arg1, 1);\n    }\n    return;\n}\n",
        "token_count": 160
    },
    "14000470": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140004708(ulong LoggerHandle, ulong noname_1, ulong MessageGuid, ulong arg4)\n\n{\n    uint auStackX32 [2];\n    \n    auStackX32[0] = arg4;\n    (*_sym.imp.ADVAPI32.dll_TraceMessage)(LoggerHandle, 0x2b, MessageGuid, noname_1, auStackX32, 4, 0);\n    return;\n}\n",
        "token_count": 96
    },
    "1400047d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint64_t fcn.1400047d0(ulong arg1, int64_t arg2, uint64_t arg3)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    int64_t iVar5;\n    uint64_t uVar7;\n    uint64_t uVar8;\n    int64_t iVar9;\n    uint64_t uVar10;\n    uint32_t auStackX32 [2];\n    uchar auStack200 [16];\n    ulong uStack184;\n    ulong uStack176;\n    uint uStack168;\n    uchar auStack164 [124];\n    int64_t iVar6;\n    \n    iVar9 = -1;\n    uVar7 = 0;\n    do {\n        iVar9 = iVar9 + 1;\n        iVar5 = -1;\n    } while (*(arg2 + iVar9 * 2) != 0);\n    do {\n        iVar6 = iVar5;\n        iVar5 = iVar6 + 1;\n    } while (*(arg3 + iVar5 * 2) != 0);\n    uVar10 = iVar6 + 5 + iVar9;\n    uVar8 = uVar7;\n    if (uVar10 != 0) {\n        if (0x7fffffffffffffff < uVar10) {\n            fcn.1400045dc();\ncode_r0x000140004b23:\n            fcn.140001f28();\n            pcVar1 = swi(3);\n            uVar7 = (*pcVar1)();\n            return uVar7;\n        }\n        uVar10 = uVar10 * 2;\n        if (uVar10 < 0x1000) {\n            if (uVar10 != 0) {\n                uVar7 = fcn.14001ea18(uVar10);\n            }\n        }\n        else {\n            if (uVar10 + 0x27 <= uVar10) goto code_r0x000140004b23;\n            iVar9 = fcn.14001ea18(uVar10 + 0x27);\n            if (iVar9 == 0) goto code_r0x000140004b18;\n            uVar7 = iVar9 + 0x27U & 0xffffffffffffffe0;\n            *(uVar7 - 8) = iVar9;\n        }\n        fcn.140020880(uVar7, 0, uVar10);\n        uStack176 = 0;\n        fcn.140005dd0(&uStack176);\n        uVar8 = uVar10 + uVar7;\n    }\n    iVar9 = uVar8 - uVar7 >> 1;\n    uVar2 = fcn.140004600(uVar7, iVar9, L\"\\\"%s\\\" %s\", arg2);\n    uVar10 = uVar2;\n    if (uVar2 < 0) {\n        if (uVar7 != 0) {\n            uVar8 = uVar7;\n            if ((0xfff < iVar9 * 2) && (uVar8 = *(uVar7 - 8),  0x1f < (uVar7 - uVar8) - 8)) goto code_r0x000140004b18;\n            fcn.14001ea54(uVar8);\n        }\n    }\n    else {\n        auStack200 = ZEXT816(0);\n        uStack184 = 0;\n        fcn.140020880(auStack164, 0, 100);\n        uStack168 = 0x68;\n        iVar3 = (*_sym.imp.KERNEL32.dll_CreateProcessW)\n                          (0, uVar7, 0, 0, arg3 & 0xffffffff00000000, 0x8000000, 0, arg1, &uStack168, auStack200);\n        if (iVar3 == 0) {\n            uVar4 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            uVar2 = uVar4 & 0xffff | 0x80070000;\n            if (uVar4 < 1) {\n                uVar2 = uVar4;\n            }\n            uVar10 = uVar2;\n            if (uVar7 != 0) {\n                uVar8 = uVar7;\n                if ((0xfff < iVar9 * 2) && (uVar8 = *(uVar7 - 8),  0x1f < (uVar7 - uVar8) - 8))\n                goto code_r0x000140004b18;\n                fcn.14001ea54(uVar8);\n            }\n        }\n        else {\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(auStack200._8_8_);\n            iVar3 = (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(auStack200._0_8_, 0xffffffff);\n            if (iVar3 == -1) {\n                uVar4 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                uVar2 = uVar4 & 0xffff | 0x80070000;\n                if (uVar4 < 1) {\n                    uVar2 = uVar4;\n                }\n                uVar10 = uVar2;\n                (*_sym.imp.KERNEL32.dll_CloseHandle)(auStack200._0_8_);\n                if (uVar7 != 0) {\n                    uVar8 = uVar7;\n                    if ((0xfff < iVar9 * 2) && (uVar8 = *(uVar7 - 8),  0x1f < (uVar7 - uVar8) - 8))\n                    goto code_r0x000140004b18;\n                    fcn.14001ea54(uVar8);\n                }\n            }\n            else {\n                auStackX32[0] = 0;\n                iVar3 = (*_sym.imp.KERNEL32.dll_GetExitCodeProcess)(auStack200._0_8_, auStackX32);\n                uVar2 = auStackX32[0];\n                if (iVar3 == 0) {\n                    uVar4 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                    uVar2 = uVar4 & 0xffff | 0x80070000;\n                    if (uVar4 < 1) {\n                        uVar2 = uVar4;\n                    }\n                    uVar10 = uVar2;\n                    (*_sym.imp.KERNEL32.dll_CloseHandle)(auStack200._0_8_);\n                    if (uVar7 != 0) {\n                        uVar8 = uVar7;\n                        if ((0xfff < iVar9 * 2) && (uVar8 = *(uVar7 - 8),  0x1f < (uVar7 - uVar8) - 8)) {\ncode_r0x000140004b18:\n                            fcn.14000cde0();\n                            pcVar1 = swi(3);\n                            uVar7 = (*pcVar1)();\n                            return uVar7;\n                        }\n                        fcn.14001ea54(uVar8);\n                    }\n                }\n                else {\n                    (*_sym.imp.KERNEL32.dll_CloseHandle)(auStack200._0_8_);\n                    if (uVar7 != 0) {\n                        uVar10 = uVar7;\n                        if ((0xfff < iVar9 * 2) && (uVar10 = *(uVar7 - 8),  0x1f < (uVar7 - uVar10) - 8))\n                        goto code_r0x000140004b18;\n                        fcn.14001ea54(uVar10);\n                    }\n                    uVar10 = uVar2;\n                }\n            }\n        }\n    }\n    return uVar10;\n}\n",
        "token_count": 1680
    },
    "140005dd": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid fcn.140005dd0(int64_t **arg1)\n\n{\n    int64_t *piVar1;\n    int64_t iVar2;\n    code *pcVar3;\n    uint64_t uVar4;\n    int64_t arg1_00;\n    \n    piVar1 = *arg1;\n    if ((piVar1 != NULL) && (iVar2 = *piVar1,  iVar2 != 0)) {\n        uVar4 = (piVar1[2] - iVar2 >> 1) * 2;\n        arg1_00 = iVar2;\n        if (0xfff < uVar4) {\n            arg1_00 = *(iVar2 + -8);\n            if (0x1f < (iVar2 - arg1_00) - 8U) {\n                fcn.14000cde0(iVar2 - arg1_00, uVar4 + 0x27);\n                pcVar3 = swi(3);\n                (*pcVar3)();\n                return;\n            }\n        }\n        fcn.14001ea54(arg1_00);\n        *piVar1 = 0;\n        piVar1[1] = 0;\n        piVar1[2] = 0;\n    }\n    return;\n}\n",
        "token_count": 273
    },
    "14000601": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint64_t * fcn.140006018(uint64_t *arg1, uint64_t arg2)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    uint64_t *puVar3;\n    uint64_t arg1_00;\n    \n    *arg1 = 0;\n    arg1[1] = 0;\n    arg1[2] = 0;\n    if (arg2 != 0) {\n        if (0x7fffffffffffffff < arg2) {\n            fcn.1400045dc();\n            pcVar1 = swi(3);\n            puVar3 = (*pcVar1)();\n            return puVar3;\n        }\n        if (arg2 < 0x1000) {\n            arg1_00 = fcn.14001ea18(arg2);\n        }\n        else {\n            if (arg2 + 0x27 <= arg2) {\n                fcn.140001f28();\n                pcVar1 = swi(3);\n                puVar3 = (*pcVar1)();\n                return puVar3;\n            }\n            iVar2 = fcn.14001ea18(arg2 + 0x27);\n            if (iVar2 == 0) {\n                fcn.14000cde0();\n                pcVar1 = swi(3);\n                puVar3 = (*pcVar1)();\n                return puVar3;\n            }\n            arg1_00 = iVar2 + 0x27U & 0xffffffffffffffe0;\n            *(arg1_00 - 8) = iVar2;\n        }\n        *arg1 = arg1_00;\n        arg1[2] = arg1_00 + arg2;\n        fcn.140020880(arg1_00, 0, arg2);\n        arg1[1] = arg1_00 + arg2;\n    }\n    return arg1;\n}\n",
        "token_count": 403
    },
    "1400060c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400060c8(ulong LoggerHandle, ulong noname_1, ulong MessageGuid, ulong arg4)\n\n{\n    ulong uStackX32;\n    \n    uStackX32 = arg4;\n    (*_sym.imp.ADVAPI32.dll_TraceMessage)\n              (LoggerHandle, 0x2b, MessageGuid, noname_1, &uStackX32, 8, &stack0x00000028, 8, &stack0x00000030, 4, 0);\n    return;\n}\n",
        "token_count": 118
    },
    "1400061f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400061f8(ulong LoggerHandle, ulong noname_1, ulong MessageGuid, ulong arg4)\n\n{\n    uint auStackX32 [2];\n    \n    auStackX32[0] = arg4;\n    (*_sym.imp.ADVAPI32.dll_TraceMessage)\n              (LoggerHandle, 0x2b, MessageGuid, noname_1, auStackX32, 4, &stack0x00000028, 4, 0);\n    return;\n}\n",
        "token_count": 111
    },
    "14000623": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000623c(ulong arg1, ulong noname_1, ulong noname_2, int64_t arg4)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    \n    if (arg4 == 0) {\n        iVar1 = 10;\n    }\n    else {\n        iVar1 = -1;\n        do {\n            iVar1 = iVar1 + 1;\n        } while (*(arg4 + iVar1 * 2) != 0);\n        iVar1 = iVar1 * 2 + 2;\n    }\n    iVar2 = 0x14002f2e8;\n    if (arg4 != 0) {\n        iVar2 = arg4;\n    }\n    (*_sym.imp.ADVAPI32.dll_TraceMessage)(arg1, 0x2b, 0x14002f7d0, noname_1, iVar2, iVar1, &stack0x00000028, 4, 0);\n    return;\n}\n",
        "token_count": 217
    },
    "1400062b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400062bc(ulong arg1, ulong noname_1, ulong noname_2, int64_t arg4)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    \n    if (arg4 == 0) {\n        iVar1 = 10;\n    }\n    else {\n        iVar1 = -1;\n        do {\n            iVar1 = iVar1 + 1;\n        } while (*(arg4 + iVar1 * 2) != 0);\n        iVar1 = iVar1 * 2 + 2;\n    }\n    iVar2 = 0x14002f2e8;\n    if (arg4 != 0) {\n        iVar2 = arg4;\n    }\n    (*_sym.imp.ADVAPI32.dll_TraceMessage)\n              (arg1, 0x2b, 0x14002f7d0, 0xb, iVar2, iVar1, &stack0x00000028, 4, &stack0x00000030, 4, &stack0x00000038, 4\n               , &stack0x00000040, 4, &stack0x00000048, 4, 0);\n    return;\n}\n",
        "token_count": 264
    },
    "14000638": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000638c(ulong arg1, ulong noname_1, ulong noname_2, int64_t arg4)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    \n    if (arg4 == 0) {\n        iVar1 = 10;\n    }\n    else {\n        iVar1 = -1;\n        do {\n            iVar1 = iVar1 + 1;\n        } while (*(arg4 + iVar1 * 2) != 0);\n        iVar1 = iVar1 * 2 + 2;\n    }\n    iVar2 = 0x14002f2e8;\n    if (arg4 != 0) {\n        iVar2 = arg4;\n    }\n    (*_sym.imp.ADVAPI32.dll_TraceMessage)\n              (arg1, 0x2b, 0x14002f7d0, 0xc, iVar2, iVar1, &stack0x00000028, 4, &stack0x00000030, 4, &stack0x00000038, 4\n               , &stack0x00000040, 4, &stack0x00000048, 8, 0);\n    return;\n}\n",
        "token_count": 264
    },
    "14000646": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140006460(ulong LoggerHandle, ulong noname_1, ulong noname_2, ulong arg4)\n\n{\n    ulong uStackX32;\n    \n    uStackX32 = arg4;\n    (*_sym.imp.ADVAPI32.dll_TraceMessage)(LoggerHandle, 0x2b, 0x14002f828, 10, &uStackX32, 8, &stack0x00000028, 8, 0);\n    return;\n}\n",
        "token_count": 108
    },
    "1400064a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400064a8(ulong LoggerHandle, ulong noname_1, ulong MessageGuid, ulong arg4)\n\n{\n    ulong uStackX32;\n    \n    uStackX32 = arg4;\n    (*_sym.imp.ADVAPI32.dll_TraceMessage)(LoggerHandle, 0x2b, MessageGuid, noname_1, &uStackX32, 8, 0);\n    return;\n}\n",
        "token_count": 94
    },
    "1400064d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400064dc(ulong LoggerHandle, ulong noname_1, ulong noname_2, ulong arg4)\n\n{\n    ulong uStackX32;\n    \n    uStackX32 = arg4;\n    (*_sym.imp.ADVAPI32.dll_TraceMessage)(LoggerHandle, 0x2b, 0x14002f7d0, 0x14, &uStackX32, 8, &stack0x00000028, 4, 0);\n    return;\n}\n",
        "token_count": 113
    },
    "140006d9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140006d9c(ulong *arg1, ulong arg2)\n\n{\n    int32_t iVar1;\n    ulong *puVar2;\n    uint64_t uVar3;\n    uchar auStack152 [40];\n    ulong *puStack112;\n    uint auStack104 [4];\n    uint64_t uStack88;\n    uint64_t uStack40;\n    \n    uStack40 = *0x140037f00 ^ auStack152;\n    uVar3 = arg2;\n    puStack112 = arg1;\n    fcn.140020880(auStack104, 0, 0x40);\n    auStack104[0] = 0x40;\n    iVar1 = (*_sym.imp.KERNEL32.dll_GlobalMemoryStatusEx)();\n    if ((iVar1 == 0) || (uStack88 < uVar3 * 10)) {\n        fcn.140006bf4(arg1);\n    }\n    else {\n        puVar2 = fcn.14001ea18(0x38);\n        *puVar2 = 0x140029368;\n        puVar2[1] = 0x1400293a0;\n        puVar2[2] = 0;\n        puVar2[3] = 0;\n        puVar2[4] = 0;\n        puVar2[5] = 0;\n        *(puVar2 + 6) = arg2;\n        puStack112 = puVar2;\n        if (puVar2[5] <= uVar3 && uVar3 != puVar2[5]) {\n            fcn.140007ca4(puVar2 + 3, arg2);\n        }\n        *arg1 = puVar2;\n    }\n    fcn.14001e9f0(uStack40 ^ auStack152);\n    return;\n}\n",
        "token_count": 397
    },
    "140006e9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140006e9c(ulong LoggerHandle, ulong noname_1, ulong noname_2, ulong arg4)\n\n{\n    uint auStackX32 [2];\n    \n    auStackX32[0] = arg4;\n    (*_sym.imp.ADVAPI32.dll_TraceMessage)\n              (LoggerHandle, 0x2b, 0x14002f7f0, 0xd, auStackX32, 4, &stack0x00000028, 4, &stack0x00000030, 4, 0);\n    return;\n}\n",
        "token_count": 130
    },
    "140006ef": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140006ef0(ulong LoggerHandle, ulong noname_1, ulong noname_2, ulong arg4)\n\n{\n    ulong uStackX32;\n    \n    uStackX32 = arg4;\n    (*_sym.imp.ADVAPI32.dll_TraceMessage)(LoggerHandle, 0x2b, 0x14002f7f0, 10, &uStackX32, 8, 0);\n    return;\n}\n",
        "token_count": 100
    },
    "14000749": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140007498(ulong LoggerHandle, ulong noname_1, ulong MessageGuid, ulong arg4)\n\n{\n    uint auStackX32 [2];\n    \n    auStackX32[0] = arg4;\n    (*_sym.imp.ADVAPI32.dll_TraceMessage)(LoggerHandle, 0x2b, MessageGuid, noname_1, auStackX32, 4, 0);\n    return;\n}\n",
        "token_count": 96
    },
    "14000755": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong * fcn.14000755c(ulong *arg1, ulong arg2)\n\n{\n    arg1[1] = arg2;\n    *arg1 = 0x140029350;\n    fcn.140006018(arg1 + 2, 0x10000);\n    *(arg1 + 5) = 0;\n    (**0x140029a28)(arg2, 0);\n    return arg1;\n}\n",
        "token_count": 95
    },
    "1400075f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid fcn.1400075f4(ulong *arg1)\n\n{\n    int64_t iVar1;\n    code *pcVar2;\n    int64_t arg1_00;\n    \n    *arg1 = 0x140029350;\n    if (((*(arg1 + 5) != 0) && (*0x140037208 != 0x140037208)) && ((*(*0x140037208 + 0x1c) & 2) != 0)) {\n        fcn.140007498(*(*0x140037208 + 0x10), 10, 0x14002f808, *(arg1 + 5));\n    }\n    iVar1 = arg1[2];\n    if (iVar1 != 0) {\n        arg1_00 = iVar1;\n        if (0xfff < arg1[4] - iVar1) {\n            arg1_00 = *(iVar1 + -8);\n            if (0x1f < (iVar1 - arg1_00) - 8U) {\n                fcn.14000cde0(iVar1 - arg1_00, (arg1[4] - iVar1) + 0x27);\n                pcVar2 = swi(3);\n                (*pcVar2)();\n                return;\n            }\n        }\n        fcn.14001ea54(arg1_00);\n        arg1[2] = 0;\n        arg1[3] = 0;\n        arg1[4] = 0;\n    }\n    return;\n}\n",
        "token_count": 332
    },
    "14000790": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000790c(ulong LoggerHandle, ulong noname_1, ulong noname_2, ulong arg4)\n\n{\n    ulong uStackX32;\n    \n    uStackX32 = arg4;\n    (*_sym.imp.ADVAPI32.dll_TraceMessage)\n              (LoggerHandle, 0x2b, 0x14002f818, 0xc, &uStackX32, 8, &stack0x00000028, 8, &stack0x00000030, 4, \n               &stack0x00000038, 4, 0);\n    return;\n}\n",
        "token_count": 136
    },
    "140007ca": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid fcn.140007ca4(uint64_t *arg1, uint64_t arg2)\n\n{\n    uint64_t uVar1;\n    uint64_t uVar2;\n    uint64_t uVar3;\n    code *pcVar4;\n    int64_t iVar5;\n    uint64_t arg1_00;\n    uint64_t arg1_01;\n    \n    uVar1 = arg1[1];\n    uVar2 = *arg1;\n    if (arg2 < 0x1000) {\n        if (arg2 == 0) {\n            arg1_01 = 0;\n        }\n        else {\n            arg1_01 = fcn.14001ea18(arg2);\n        }\n    }\n    else {\n        if (arg2 + 0x27 <= arg2) {\n            fcn.140001f28();\n            pcVar4 = swi(3);\n            (*pcVar4)();\n            return;\n        }\n        iVar5 = fcn.14001ea18(arg2 + 0x27);\n        if (iVar5 == 0) goto code_r0x000140007d80;\n        arg1_01 = iVar5 + 0x27U & 0xffffffffffffffe0;\n        *(arg1_01 - 8) = iVar5;\n    }\n    fcn.140020a40(arg1_01, *arg1, arg1[1] - *arg1);\n    uVar3 = *arg1;\n    if (uVar3 != 0) {\n        arg1_00 = uVar3;\n        if ((0xfff < arg1[2] - uVar3) && (arg1_00 = *(uVar3 - 8),  0x1f < (uVar3 - arg1_00) - 8)) {\ncode_r0x000140007d80:\n            fcn.14000cde0();\n            pcVar4 = swi(3);\n            (*pcVar4)();\n            return;\n        }\n        fcn.14001ea54(arg1_00);\n    }\n    *arg1 = arg1_01;\n    arg1[1] = arg1_01 + (uVar1 - uVar2);\n    arg1[2] = arg1_01 + arg2;\n    return;\n}\n",
        "token_count": 497
    },
    "140007f3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.140007f38(int64_t arg1, ulong arg2)\n\n{\n    int64_t arg1_00;\n    int64_t arg2_00;\n    \n    arg1_00 = arg1 + 0x20;\n    *(arg1 + 0x34 + arg2 * 0x18) = *(arg1 + 0xc020);\n    arg2_00 = arg1 + 0x20 + arg2 * 0x18;\n    arg1 = arg1 + (arg2 + 1) * 0x18 + 0x20;\n    if ((arg1_00 != arg2_00) && (arg2_00 != arg1)) {\n        fcn.1400082a4(arg1_00, arg2_00);\n        fcn.1400082a4(arg2_00, arg1);\n        fcn.1400082a4(arg1_00, arg1);\n    }\n    return arg1_00;\n}\n",
        "token_count": 217
    },
    "140007ff": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140007ff4(ulong *arg1)\n\n{\n    *arg1 = 0x1400293b8;\n    fcn.140025e14(arg1 + 4, 0x18, 0x800, 0x140007f20);\n    return;\n}\n",
        "token_count": 66
    },
    "14000889": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140008890(int64_t *arg1)\n\n{\n    ulong uVar1;\n    \n    uVar1 = *0x140037290;\n    if (*arg1 == 0) {\n        *0x140037270 = 0;\n        *0x140037290 = 0;\n        (*_sym.imp.ADVAPI32.dll_EventUnregister)(uVar1);\n        uVar1 = *0x140037258;\n        *0x140037238 = 0;\n        *0x140037258 = 0;\n        (*_sym.imp.ADVAPI32.dll_EventUnregister)(uVar1);\n    }\n    else {\n        (**0x140029a28)(*arg1, 0x140037270);\n        (**0x140029a28)(*arg1, 0x140037238);\n    }\n    if (arg1[4] != 0) {\n        fcn.14001ea10(arg1[4]);\n    }\n    if (arg1[3] != 0) {\n        fcn.14001ea10(arg1[3]);\n    }\n    if (arg1[2] != 0) {\n        fcn.14001ea10(arg1[2]);\n    }\n    if (arg1[1] != 0) {\n        fcn.14001ea10(arg1[1]);\n    }\n    if (*arg1 != 0) {\n        (**0x140029a28)(*arg1, 1);\n    }\n    return;\n}\n",
        "token_count": 325
    },
    "14000897": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000897c(void)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.14000a770(0x1400394a0, L\"advapi32.dll\");\n    if (-1 < iVar1) {\n        iVar1 = fcn.140009204(0x140039498, *0x1400394a0, \"EventSetInformation\");\n        if (iVar1 < 0) {\n            fcn.1400089c4();\n        }\n    }\n    return;\n}\n",
        "token_count": 115
    },
    "1400089c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400089c4(void)\n\n{\n    *0x140039498 = 0;\n    if (*0x1400394a0 != 0) {\n        (*_sym.imp.KERNEL32.dll_FreeLibrary)();\n        *0x1400394a0 = 0;\n    }\n    return;\n}\n",
        "token_count": 70
    },
    "140008d9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140008d9c(ulong LoggerHandle, ulong noname_1, ulong noname_2, ulong arg4)\n\n{\n    uint auStackX32 [2];\n    \n    auStackX32[0] = arg4;\n    (*_sym.imp.ADVAPI32.dll_TraceMessage)\n              (LoggerHandle, 0x2b, 0x14002fae8, noname_1, auStackX32, 4, &stack0x00000028, 4, 0);\n    return;\n}\n",
        "token_count": 119
    },
    "140008e4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140008e48(ulong arg1, ulong noname_1, ulong MessageGuid, int64_t arg4)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    \n    if (arg4 == 0) {\n        iVar1 = 10;\n    }\n    else {\n        iVar1 = -1;\n        do {\n            iVar1 = iVar1 + 1;\n        } while (*(arg4 + iVar1 * 2) != 0);\n        iVar1 = iVar1 * 2 + 2;\n    }\n    iVar2 = 0x14002f2e8;\n    if (arg4 != 0) {\n        iVar2 = arg4;\n    }\n    (*_sym.imp.ADVAPI32.dll_TraceMessage)(arg1, 0x2b, MessageGuid, noname_1, iVar2, iVar1, &stack0x00000028, 4, 0);\n    return;\n}\n",
        "token_count": 208
    },
    "140008ec": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140008ec0(ulong arg1, ulong noname_1, ulong noname_2, int64_t arg4)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    uint auStack24 [6];\n    \n    auStack24[0] = 8;\n    if (arg4 == 0) {\n        iVar1 = 10;\n    }\n    else {\n        iVar1 = -1;\n        do {\n            iVar1 = iVar1 + 1;\n        } while (*(arg4 + iVar1 * 2) != 0);\n        iVar1 = iVar1 * 2 + 2;\n    }\n    iVar2 = 0x14002f2e8;\n    if (arg4 != 0) {\n        iVar2 = arg4;\n    }\n    (*_sym.imp.ADVAPI32.dll_TraceMessage)\n              (arg1, 0x2b, 0x14002fae8, 0x1b, iVar2, iVar1, auStack24, 4, &stack0x00000030, 4, 0);\n    return;\n}\n",
        "token_count": 245
    },
    "140008f5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140008f54(ulong LoggerHandle, ulong noname_1, ulong MessageGuid, ulong arg4)\n\n{\n    uint auStackX32 [2];\n    \n    auStackX32[0] = arg4;\n    (*_sym.imp.ADVAPI32.dll_TraceMessage)(LoggerHandle, 0x2b, MessageGuid, noname_1, auStackX32, 4, 0);\n    return;\n}\n",
        "token_count": 97
    },
    "140008f8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140008f88(ulong LoggerHandle, ulong noname_1, ulong noname_2, ulong arg4)\n\n{\n    uint auStackX32 [2];\n    \n    auStackX32[0] = arg4;\n    (*_sym.imp.ADVAPI32.dll_TraceMessage)(LoggerHandle, 0x2b, 0x14002fae8, 0x23, auStackX32, 4, &stack0x00000028, 4, 0);\n    return;\n}\n",
        "token_count": 116
    },
    "14000946": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\ncode ** fcn.140009460(code **arg1, ulong arg2)\n\n{\n    *(arg1 + 1) = ZEXT816(0);\n    *(arg1 + 5) = arg2;\n    *arg1 = vtable.CommonUtil::CHResultExceptionImpl.0;\n    fcn.140001fc0(arg1 + 3, 0xe, 0x14002faf8, arg2);\n    return arg1;\n}\n",
        "token_count": 98
    },
    "14000964": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.140009648(ulong arg1)\n\n{\n    fcn.140021390(0, 0);\n    return arg1;\n}\n",
        "token_count": 33
    },
    "1400097e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400097e8(ulong noname_0, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    ulong uStackX24;\n    ulong uStackX32;\n    \n    uStackX24 = arg3;\n    uStackX32 = arg4;\n    fcn.140009788(noname_0, arg2, &uStackX24);\n    return;\n}\n",
        "token_count": 88
    },
    "140009a2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140009a2c(ulong LoggerHandle, ulong noname_1, ulong MessageGuid, ulong arg4)\n\n{\n    ulong uStackX32;\n    \n    uStackX32 = arg4;\n    (*_sym.imp.ADVAPI32.dll_TraceMessage)(LoggerHandle, 0x2b, MessageGuid, noname_1, &uStackX32, 8, 0);\n    return;\n}\n",
        "token_count": 94
    },
    "14000a4b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t fcn.14000a4bc(void)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    \n    uVar1 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n    uVar2 = uVar1 & 0xffff | 0x80070000;\n    if (uVar1 < 1) {\n        uVar2 = uVar1;\n    }\n    if (-1 < uVar2) {\n        uVar2 = 0x80004005;\n    }\n    return uVar2;\n}\n",
        "token_count": 121
    },
    "14000a4e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000a4e8(ulong noname_0, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    return;\n}\n",
        "token_count": 35
    },
    "14000a77": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.14000a770(ulong arg1, ulong arg2)\n\n{\n    int64_t arg1_00;\n    int32_t iVar1;\n    int64_t arg1_01;\n    ulong in_R9;\n    int64_t iStackX24;\n    int64_t iStackX32;\n    ulong var_30h;\n    ulong var_38h;\n    \n    iStackX24 = 0;\n    iVar1 = fcn.14000a6e8(_sym.imp.KERNEL32.dll_GetSystemDirectoryW, &iStackX24, arg2);\n    arg1_01 = iStackX24;\n    if (iVar1 < 0) {\ncode_r0x00014000a7a9:\n        if (iStackX24 == 0) {\n            return iVar1;\n        }\n        fcn.14001ea10(iStackX24);\n        return iVar1;\n    }\n    iVar1 = fcn.14000932c(iStackX24);\n    if (iVar1 < 0) {\n        iStackX32 = 0;\n        iVar1 = fcn.1400097e8(&iStackX32, L\"forwarders\\\\%ls\", arg2, in_R9);\n        if (iVar1 < 0) {\n            if (iStackX32 != 0) {\n                fcn.14001ea10(iStackX32);\n            }\n            goto code_r0x00014000a896;\n        }\n        if (arg1_01 != 0) {\n            fcn.14001ea10(arg1_01);\n            iStackX24 = 0;\n        }\n        arg1_00 = iStackX32;\n        iVar1 = fcn.14000a6e8(_sym.imp.KERNEL32.dll_GetSystemDirectoryW, &iStackX24, iStackX32);\n        arg1_01 = iStackX24;\n        if (iVar1 < 0) {\n            if (arg1_00 != 0) {\n                fcn.14001ea10(arg1_00);\n            }\n            goto code_r0x00014000a7a9;\n        }\n        iVar1 = fcn.14000932c(iStackX24);\n        if (iVar1 < 0) {\n            if (arg1_00 != 0) {\n                fcn.14001ea10(arg1_00);\n            }\n            if (arg1_01 == 0) {\n                return iVar1;\n            }\n            fcn.14001ea10(arg1_01);\n            return iVar1;\n        }\n        if (arg1_00 != 0) {\n            fcn.14001ea10(arg1_00);\n        }\n    }\n    iVar1 = fcn.140009160(arg1, arg1_01);\ncode_r0x00014000a896:\n    if (arg1_01 != 0) {\n        fcn.14001ea10(arg1_01);\n    }\n    return iVar1;\n}\n",
        "token_count": 648
    },
    "14000abc": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t fcn.14000abc4(int64_t *arg1, ulong arg2)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.14001f5b8(arg2);\n    *arg1 = iVar1;\n    return ~-(iVar1 != 0) & 0x8007000e;\n}\n",
        "token_count": 75
    },
    "14000abf": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14000abf4(ulong *arg1, int64_t arg2)\n\n{\n    ulong uVar1;\n    int64_t iVar2;\n    int64_t iVar3;\n    \n    iVar2 = -1;\n    do {\n        iVar3 = iVar2;\n        iVar2 = iVar3 + 1;\n    } while (*(arg2 + iVar2 * 2) != 0);\n    uVar1 = fcn.14000459c(arg1);\n    if (-1 < uVar1) {\n        fcn.140020a40(*arg1, arg2, (iVar3 + 2) * 2);\n        uVar1 = 0;\n    }\n    return uVar1;\n}\n",
        "token_count": 156
    },
    "14000af0": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14000af04(uint *arg1, ulong arg2)\n\n{\n    uint uVar1;\n    uint uVar2;\n    uint uVar3;\n    uint uVar4;\n    uint uVar5;\n    uint uVar6;\n    uint uVar7;\n    uint uVar8;\n    uint uVar9;\n    ulong uVar10;\n    uint32_t auStackX24 [2];\n    uint *puStackX32;\n    \n    auStackX24[0] = 0;\n    puStackX32 = NULL;\n    uVar10 = fcn.14000b218(arg2, arg2, &puStackX32, auStackX24);\n    if (-1 < uVar10) {\n        if (auStackX24[0] < 0x34) {\n            uVar10 = 0x8000ffff;\n        }\n        else {\n            uVar1 = puStackX32[1];\n            uVar2 = puStackX32[2];\n            uVar3 = puStackX32[3];\n            uVar4 = puStackX32[4];\n            uVar5 = puStackX32[5];\n            uVar6 = puStackX32[6];\n            uVar7 = puStackX32[7];\n            *arg1 = *puStackX32;\n            arg1[1] = uVar1;\n            arg1[2] = uVar2;\n            arg1[3] = uVar3;\n            uVar2 = puStackX32[8];\n            uVar3 = puStackX32[9];\n            uVar8 = puStackX32[10];\n            uVar9 = puStackX32[0xb];\n            uVar1 = puStackX32[0xc];\n            arg1[4] = uVar4;\n            arg1[5] = uVar5;\n            arg1[6] = uVar6;\n            arg1[7] = uVar7;\n            arg1[8] = uVar2;\n            arg1[9] = uVar3;\n            arg1[10] = uVar8;\n            arg1[0xb] = uVar9;\n            arg1[0xc] = uVar1;\n            uVar10 = 0;\n        }\n    }\n    return uVar10;\n}\n",
        "token_count": 502
    },
    "14000b21": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t fcn.14000b218(ulong param_1)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    \n    iVar2 = (**0x140029a28)(param_1, 0x14002fae4);\n    if (iVar2 == 0) {\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        uVar1 = uVar3 & 0xffff | 0x80070000;\n        if (uVar3 < 1) {\n            uVar1 = uVar3;\n        }\n        uVar3 = 0x80070715;\n        if (uVar1 < 0) {\n            uVar3 = uVar1;\n        }\n    }\n    else {\n        uVar3 = 0;\n    }\n    return uVar3;\n}\n",
        "token_count": 191
    },
    "14000b55": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint64_t fcn.14000b558(void)\n\n{\n    uint32_t uVar1;\n    uint64_t uVar2;\n    int64_t iVar3;\n    ulong *puVar4;\n    int64_t iVar5;\n    \n    uVar2 = 0;\n    if (*0x1400394bc == '\\0') {\n        if (*0x1400372a8 == 0x1400372a8) {\n            uVar2 = 1;\n        }\n        else {\n            *0x1400394bc = '\\x01';\n            for (puVar4 = *0x1400372a8; (puVar4 != 0x1400372a8 && (puVar4 != NULL)); puVar4 = *puVar4) {\n                (*_sym.imp.KERNEL32.dll_DecodePointer)(puVar4[2]);\n                uVar1 = (**0x140029a28)(puVar4);\n                uVar2 = uVar1;\n                if (uVar1 < 0) break;\n            }\n            if (uVar2 >> 0x1f == '\\x01') {\n                iVar5 = puVar4[1];\n                while( true ) {\n                    iVar3 = 0;\n                    if (iVar5 != 0x1400372a8) {\n                        iVar3 = iVar5;\n                    }\n                    if (iVar3 == 0) break;\n                    iVar3 = 0;\n                    if (iVar5 != 0x1400372a8) {\n                        iVar3 = iVar5;\n                    }\n                    (*_sym.imp.KERNEL32.dll_DecodePointer)(*(iVar3 + 0x18));\n                    (**0x140029a28)(iVar3);\n                    iVar5 = *(iVar5 + 8);\n                }\n                while (*0x1400372a8 != 0x1400372a8) {\n                    *0x1400372a8 = **0x1400372a8;\n                    (*0x1400372a8)[1] = 0x1400372a8;\n                }\n                *0x1400394bc = '\\0';\n            }\n            else {\n                uVar2 = 0;\n            }\n        }\n    }\n    else {\n        uVar2 = 0x80070057;\n    }\n    return uVar2;\n}\n",
        "token_count": 502
    },
    "14000b78": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000b78c(code **arg1)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    code *pcVar3;\n    \n    *arg1 = vtable.CommonUtil::CMpUtilsLibrary.0;\n    if (arg1[6] != NULL) {\n        (**0x140029a28)();\n    }\n    if (arg1[5] != NULL) {\n        (**0x140029a28)();\n    }\n    pcVar3 = arg1[4];\n    if (pcVar3 != NULL) {\n        LOCK();\n        piVar1 = pcVar3 + 8;\n        iVar2 = *piVar1;\n        *piVar1 = *piVar1 + -1;\n        if (iVar2 < 2) {\n            (**0x140029a28)(pcVar3, 1);\n        }\n    }\n    pcVar3 = arg1[3];\n    if (pcVar3 != NULL) {\n        LOCK();\n        piVar1 = pcVar3 + 8;\n        iVar2 = *piVar1;\n        *piVar1 = *piVar1 + -1;\n        if (iVar2 < 2) {\n            (**0x140029a28)(pcVar3, 1);\n        }\n    }\n    *arg1 = vtable.CommonUtil::CRefObject.0;\n    return;\n}\n",
        "token_count": 299
    },
    "14000bb6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint * fcn.14000bb64(int64_t *arg1)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int64_t *piVar3;\n    int64_t iVar4;\n    uint32_t uVar5;\n    uint uVar6;\n    uint *puVar7;\n    ulong unaff_RBX;\n    uint64_t uVar8;\n    int64_t *piVar9;\n    int64_t iVar10;\n    ulong in_R9;\n    \n    uVar8 = 0;\n    if (arg1[1] != 0) {\n        iVar10 = 0;\n        do {\n            piVar9 = *arg1 + 8 + iVar10;\n            while (piVar3 = *piVar9,  piVar3 != piVar9) {\n                iVar4 = *piVar3;\n                *piVar9 = iVar4;\n                *(iVar4 + 8) = piVar9;\n                if (piVar3 == 0x18) break;\n                arg1[2] = arg1[2] + -1;\n                piVar3[1] = piVar3;\n                *piVar3 = piVar3;\n                LOCK();\n                piVar1 = piVar3 + -2;\n                iVar2 = *piVar1;\n                *piVar1 = *piVar1 + -1;\n                if (iVar2 < 2) {\n                    (**0x140029a28)();\n                }\n            }\n            uVar8 = uVar8 + 1;\n            *(iVar10 + *arg1) = 0;\n            iVar10 = iVar10 + 0x18;\n        } while (uVar8 < arg1[1]);\n    }\n    puVar7 = NULL;\n    if ((*arg1 != 0) &&\n       (puVar7 = (*_sym.imp.KERNEL32.dll_HeapFree)(*0x140038820, 0, *arg1, in_R9, unaff_RBX),  puVar7 == 0)) {\n        uVar5 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        uVar6 = fcn.14000d304(uVar5);\n        puVar7 = fcn.14000d3d8();\n        *puVar7 = uVar6;\n    }\n    return puVar7;\n}\n",
        "token_count": 505
    },
    "14000be2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.14000be28(int64_t *arg1)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    int64_t iVar4;\n    int32_t iVar5;\n    int64_t iStackX8;\n    int64_t iStackX16;\n    ulong var_30h;\n    ulong var_38h;\n    \n    *arg1 = 0;\n    iStackX8 = 0;\n    iVar5 = fcn.14000c03c(&iStackX8);\n    iVar4 = iStackX8;\n    if (iVar5 < 0) {\n        if (iStackX8 == 0) {\n            return iVar5;\n        }\n        LOCK();\n        piVar1 = iStackX8 + 8;\n        iVar2 = *piVar1;\n        *piVar1 = *piVar1 + -1;\n        if (0 < iVar2 + -1) {\n            return iVar5;\n        }\n        (**0x140029a28)(iStackX8, 1);\n        return iVar5;\n    }\n    if (*(iStackX8 + 0x10) != 0) {\n        *(iStackX8 + 0x10) = 0;\n    }\n    *(iStackX8 + 0x10) = 0x12345678;\n    iVar3 = *(iStackX8 + 0x18);\n    if (iVar3 != 0) {\n        LOCK();\n        piVar1 = iVar3 + 8;\n        iVar5 = *piVar1;\n        *piVar1 = *piVar1 + -1;\n        if (iVar5 + -1 < 1) {\n            (**0x140029a28)(iVar3, 1);\n        }\n        *(iVar4 + 0x18) = 0;\n    }\n    *(iVar4 + 0x18) = 0;\n    iStackX16 = 0;\n    iVar5 = fcn.14000bfe8(&iStackX16);\n    iVar3 = iStackX16;\n    if (iVar5 < 0) {\n        if (iStackX16 != 0) {\n            LOCK();\n            piVar1 = iStackX16 + 8;\n            iVar2 = *piVar1;\n            *piVar1 = *piVar1 + -1;\n            if (iVar2 + -1 < 1) {\n                (**0x140029a28)(iStackX16, 1);\n            }\n        }\n    }\n    else {\n        iVar5 = fcn.14000bc14(iStackX16 + 0x10);\n        if (-1 < iVar5) {\n            *(iVar4 + 0x18) = iVar3;\n            goto code_r0x00014000bfc7;\n        }\n        if (iVar3 != 0) {\n            LOCK();\n            piVar1 = iVar3 + 8;\n            iVar2 = *piVar1;\n            *piVar1 = *piVar1 + -1;\n            if (iVar2 + -1 < 1) {\n                (**0x140029a28)(iStackX16, 1);\n            }\n        }\n    }\n    if (-1 < iVar5) {\n        iVar5 = 0;\n    }\n    if (iVar5 < 0) {\n        if (iStackX8 == 0) {\n            return iVar5;\n        }\n        LOCK();\n        piVar1 = iStackX8 + 8;\n        iVar2 = *piVar1;\n        *piVar1 = *piVar1 + -1;\n        if (0 < iVar2 + -1) {\n            return iVar5;\n        }\n        (**0x140029a28)(iStackX8, 1);\n        return iVar5;\n    }\ncode_r0x00014000bfc7:\n    *arg1 = iStackX8;\n    return 0;\n}\n",
        "token_count": 856
    },
    "14000bfe": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14000bfe8(ulong *arg1)\n\n{\n    code **ppcVar1;\n    ulong uVar2;\n    \n    ppcVar1 = fcn.14001f5b8(0x38);\n    if (ppcVar1 == NULL) {\n        uVar2 = 0x8007000e;\n    }\n    else {\n        *(ppcVar1 + 1) = 0;\n        *ppcVar1 = vtable.CommonUtil::CMpGlobalVarsTable.0;\n        ppcVar1[4] = NULL;\n        ppcVar1[5] = NULL;\n        ppcVar1[3] = NULL;\n        ppcVar1[2] = NULL;\n        LOCK();\n        *(ppcVar1 + 1) = *(ppcVar1 + 1) + 1;\n        *arg1 = ppcVar1;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 213
    },
    "14000c03": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14000c03c(ulong *arg1)\n\n{\n    code **ppcVar1;\n    ulong uVar2;\n    \n    ppcVar1 = fcn.14001f5b8(0x38);\n    if (ppcVar1 == NULL) {\n        uVar2 = 0x8007000e;\n    }\n    else {\n        *(ppcVar1 + 1) = 0;\n        *ppcVar1 = vtable.CommonUtil::CMpUtilsLibrary.0;\n        ppcVar1[2] = NULL;\n        ppcVar1[3] = NULL;\n        ppcVar1[4] = NULL;\n        ppcVar1[5] = NULL;\n        ppcVar1[6] = NULL;\n        LOCK();\n        *(ppcVar1 + 1) = *(ppcVar1 + 1) + 1;\n        *arg1 = ppcVar1;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 223
    },
    "14000c14": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000c144(code **arg1)\n\n{\n    if (arg1[8] != NULL) {\n        (**0x140029a28)();\n    }\n    if (arg1[7] != NULL) {\n        (**0x140029a28)();\n    }\n    if (arg1[6] != NULL) {\n        (**0x140029a28)();\n    }\n    (*_sym.imp.KERNEL32.dll_DeleteCriticalSection)(arg1 + 1);\n    *arg1 = vtable.CommonUtil::CPtrObjectProcessHeap.0;\n    return;\n}\n",
        "token_count": 124
    },
    "14000c1c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14000c1c8(ulong *arg1)\n\n{\n    ulong uVar1;\n    code **ppcVar2;\n    \n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n    ppcVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1, 0, 0x48);\n    if (ppcVar2 == NULL) {\n        uVar1 = 0x8007000e;\n    }\n    else {\n        *ppcVar2 = vtable.CommonUtil::CPredefinedMpHeapsHolder.0;\n        (*_sym.imp.KERNEL32.dll_InitializeCriticalSectionAndSpinCount)(ppcVar2 + 1, 4000);\n        ppcVar2[6] = NULL;\n        ppcVar2[7] = NULL;\n        ppcVar2[8] = NULL;\n        *arg1 = ppcVar2;\n        uVar1 = 0;\n    }\n    return uVar1;\n}\n",
        "token_count": 219
    },
    "14000c38": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000c388(void)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    \n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(0x1400392d0);\n    iVar3 = *0x140039328;\n    if ((*0x140039320 != 0) && (*0x140039320 = *0x140039320 + -1,  *0x140039320 == 0)) {\n        *0x140039328 = 0;\n        if (iVar3 != 0) {\n            LOCK();\n            piVar1 = iVar3 + 8;\n            iVar2 = *piVar1;\n            *piVar1 = *piVar1 + -1;\n            if (iVar2 < 2) {\n                (**0x140029a28)(iVar3, 1);\n            }\n        }\n    }\n    // WARNING: Could not recover jumptable at 0x00014000c3f9. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(0x1400392d0);\n    return;\n}\n",
        "token_count": 260
    },
    "14000ca3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.14000ca3c(int64_t *arg1)\n\n{\n    int64_t iVar1;\n    int64_t lpFlsData;\n    uint auStackX8 [2];\n    \n    iVar1 = *arg1;\n    lpFlsData = 0;\n    if (iVar1 == 0) {\n        auStackX8[0] = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        if (*(arg1 + 2) == '\\0') {\n            arg1[1] = 0;\n            *(arg1 + 2) = 1;\n        }\n        else {\n            lpFlsData = arg1[1];\n        }\n        iVar1 = fcn.1400122a0(auStackX8, lpFlsData);\n        *arg1 = iVar1;\n        (*_sym.imp.KERNEL32.dll_SetLastError)(auStackX8[0]);\n    }\n    return iVar1;\n}\n",
        "token_count": 205
    },
    "14000caa": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.14000caa8(int64_t arg1, int64_t arg2)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    \n    iVar2 = 0;\n    if (*(arg2 + 0x10) == '\\0') {\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        *(arg2 + 8) = 0;\n        *(arg2 + 0x10) = 1;\n        (*_sym.imp.KERNEL32.dll_SetLastError)(uVar1);\n    }\n    else {\n        iVar2 = *(arg2 + 8);\n    }\n    return arg1 + iVar2 * 8;\n}\n",
        "token_count": 149
    },
    "14000cef": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14000cef0(ulong noname_0, ulong *arg2, ulong arg3, ulong *arg4)\n\n{\n    ulong uVar1;\n    \n    fcn.14001286c(*arg2);\n    uVar1 = fcn.14000cf30(arg3);\n    fcn.140012878(*arg4);\n    return uVar1;\n}\n",
        "token_count": 83
    },
    "14000cfb": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14000cfb0(ulong arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg_30h)\n\n{\n    ulong uVar1;\n    ulong var_10h;\n    int64_t var_18h_2;\n    int64_t var_20h_2;\n    int64_t var_28h;\n    ulong var_40h;\n    int64_t var_38h;\n    int64_t var_30h;\n    ulong *var_28h_2;\n    int64_t var_20h;\n    ulong *var_18h;\n    ulong *var_10h_2;\n    ulong *var_8h;\n    \n    if ((arg2 != 0) && (arg3 != 0)) {\n        var_10h = arg1;\n        var_18h_2 = arg2;\n        var_20h_2 = arg3;\n        var_28h = arg4;\n        if (arg4 != 0) {\n            var_28h_2 = &var_28h;\n            var_20h = arg_30h;\n            var_18h = &var_10h;\n            var_10h_2 = &var_18h_2;\n            var_8h = &var_20h_2;\n            var_38h = arg4;\n            var_30h = arg4;\n            uVar1 = fcn.14000cef0(&var_40h, &var_30h, &var_28h_2, &var_38h);\n            return uVar1;\n        }\n        *(arg_30h + 0x30) = 1;\n        *(arg_30h + 0x2c) = 0x16;\n        fcn.14000ccf4(0, 0, 0, 0);\n    }\n    return 0;\n}\n",
        "token_count": 420
    },
    "14000d34": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000d34c(uint64_t arg1)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    uint *puVar3;\n    uint64_t arg1_00;\n    ulong in_RDX;\n    \n    arg1_00 = arg1 & 0xffffffff;\n    iVar2 = fcn.1400121d8(arg1, in_RDX);\n    if (iVar2 == 0) {\n        puVar3 = 0x140037704;\n    }\n    else {\n        puVar3 = iVar2 + 0x24;\n    }\n    *puVar3 = arg1_00;\n    uVar1 = fcn.14000d304(arg1_00);\n    iVar2 = fcn.1400121d8(arg1_00, in_RDX);\n    puVar3 = 0x140037700;\n    if (iVar2 != 0) {\n        puVar3 = iVar2 + 0x20;\n    }\n    *puVar3 = uVar1;\n    return;\n}\n",
        "token_count": 227
    },
    "14000d39": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14000d394(ulong arg1, int64_t arg2)\n\n{\n    uint uVar1;\n    \n    *(arg2 + 0x38) = 1;\n    *(arg2 + 0x34) = arg1;\n    uVar1 = fcn.14000d304(arg1);\n    *(arg2 + 0x2c) = uVar1;\n    *(arg2 + 0x30) = 1;\n    return;\n}\n",
        "token_count": 105
    },
    "14000d4d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint64_t fcn.14000d4d0(int64_t arg1, uint64_t arg2, int64_t arg3)\n\n{\n    int64_t iVar1;\n    uint64_t uVar2;\n    \n    if (arg2 < 0x8000000000000000) {\n        arg2 = arg2 * 2;\n        if (((*(arg1 + 0x408) == 0) && (arg2 < 0x401)) || (arg2 < *(arg1 + 0x400) || arg2 == *(arg1 + 0x400))) {\n            uVar2 = 0x7fffffffffffff01;\n        }\n        else {\n            iVar1 = fcn.140014410(arg2);\n            if (iVar1 != 0) {\n                fcn.140012664(*(arg1 + 0x408));\n                *(arg1 + 0x408) = iVar1;\n                *(arg1 + 0x400) = arg2;\n            }\n            uVar2 = fcn.140012664(0);\n            uVar2 = uVar2 & 0xffffffffffffff00 | iVar1 != 0;\n        }\n    }\n    else {\n        *(arg3 + 0x30) = 1;\n        uVar2 = 0x7fffffffffffff00;\n        *(arg3 + 0x2c) = 0xc;\n    }\n    return uVar2;\n}\n",
        "token_count": 312
    },
    "14000d57": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint64_t fcn.14000d578(int64_t arg1, uint64_t arg2, int64_t arg3)\n\n{\n    int64_t iVar1;\n    uint64_t uVar2;\n    \n    if (arg2 < 0x4000000000000000) {\n        arg2 = arg2 * 4;\n        if (((*(arg1 + 0x408) == 0) && (arg2 < 0x401)) || (arg2 < *(arg1 + 0x400) || arg2 - *(arg1 + 0x400) == 0)) {\n            uVar2 = 0x3fffffffffffff01;\n        }\n        else {\n            iVar1 = fcn.140014410(arg2);\n            if (iVar1 != 0) {\n                fcn.140012664(*(arg1 + 0x408));\n                *(arg1 + 0x408) = iVar1;\n                *(arg1 + 0x400) = arg2;\n            }\n            uVar2 = fcn.140012664(0);\n            uVar2 = uVar2 & 0xffffffffffffff00 | iVar1 != 0;\n        }\n    }\n    else {\n        *(arg3 + 0x30) = 1;\n        uVar2 = 0x3fffffffffffff00;\n        *(arg3 + 0x2c) = 0xc;\n    }\n    return uVar2;\n}\n",
        "token_count": 314
    },
    "140010de": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140010de4(ulong *arg1)\n\n{\n    ushort uVar1;\n    ushort *puVar2;\n    int64_t arg1_00;\n    int32_t iVar3;\n    ulong *puVar4;\n    uchar uStackX8;\n    char cStackX9;\n    \n    *(arg1 + 0x4c) = 1;\n    puVar2 = arg1[3];\n    arg1[3] = puVar2 + 4;\n    uVar1 = *puVar2;\n    cStackX9 = fcn.14000d624(*arg1, *(arg1 + 0x3a), *(arg1 + 0x34));\n    if (cStackX9 == '\\0') {\n        uStackX8 = uVar1;\n        arg1_00 = arg1[1];\n        if (*(arg1_00 + 0x28) == '\\0') {\n            fcn.140011110(arg1_00);\n        }\n        puVar4 = arg1[0x8b];\n        if (arg1[0x8b] == NULL) {\n            puVar4 = arg1 + 10;\n        }\n        iVar3 = fcn.140015744(puVar4, &uStackX8, *(*(arg1_00 + 0x18) + 8), arg1_00);\n        if (iVar3 < 0) {\n            *(arg1 + 7) = 1;\n        }\n    }\n    else {\n        puVar4 = arg1[0x8b];\n        if (arg1[0x8b] == NULL) {\n            puVar4 = arg1 + 10;\n        }\n        *puVar4 = uVar1;\n    }\n    *(arg1 + 9) = 1;\n    puVar4 = arg1[0x8b];\n    if (arg1[0x8b] == NULL) {\n        puVar4 = arg1 + 10;\n    }\n    arg1[8] = puVar4;\n    return 1;\n}\n",
        "token_count": 452
    },
    "14001111": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140011110(int64_t arg1)\n\n{\n    int64_t arg1_00;\n    \n    arg1_00 = fcn.14000c93c(arg1);\n    *(arg1 + 0x18) = *(arg1_00 + 0x90);\n    *(arg1 + 0x20) = *(arg1_00 + 0x88);\n    fcn.140012418(arg1_00, arg1 + 0x18);\n    fcn.140012484(arg1_00, arg1 + 0x20);\n    if ((*(arg1_00 + 0x3a8) & 2) == 0) {\n        *(arg1_00 + 0x3a8) = *(arg1_00 + 0x3a8) | 2;\n        *(arg1 + 0x28) = 2;\n    }\n    return;\n}\n",
        "token_count": 203
    },
    "1400123e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400123e4(int64_t arg1, int64_t *arg2)\n\n{\n    int64_t iVar1;\n    \n    if ((*arg2 != *0x140037f88) && ((*0x140037dc0 & *(arg1 + 0x3a8)) == 0)) {\n        iVar1 = fcn.1400160ac(arg1);\n        *arg2 = iVar1;\n    }\n    return;\n}\n",
        "token_count": 99
    },
    "14001241": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140012418(int64_t arg1, int64_t *arg2)\n\n{\n    int64_t iVar1;\n    int64_t in_R8;\n    \n    if ((*arg2 != *(in_R8 * 8 + 0x140037f88)) && ((*0x140037dc0 & *(arg1 + 0x3a8)) == 0)) {\n        iVar1 = fcn.1400160ac(arg1);\n        *arg2 = iVar1;\n    }\n    return;\n}\n",
        "token_count": 113
    },
    "14001245": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140012450(int64_t arg1, int64_t *arg2)\n\n{\n    int64_t iVar1;\n    \n    if ((*arg2 != *0x1400387d8) && ((*0x140037dc0 & *(arg1 + 0x3a8)) == 0)) {\n        iVar1 = fcn.140016f30(arg1);\n        *arg2 = iVar1;\n    }\n    return;\n}\n",
        "token_count": 98
    },
    "14001248": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140012484(int64_t arg1, int64_t *arg2)\n\n{\n    int64_t iVar1;\n    int64_t in_R8;\n    \n    if ((*arg2 != *(in_R8 * 8 + 0x1400387d8)) && ((*0x140037dc0 & *(arg1 + 0x3a8)) == 0)) {\n        iVar1 = fcn.140016f30(arg1);\n        *arg2 = iVar1;\n    }\n    return;\n}\n",
        "token_count": 114
    },
    "1400126a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.1400126a0(int64_t arg1)\n\n{\n    uint uVar1;\n    uint *puVar2;\n    \n    if (arg1 == 0) {\n        puVar2 = fcn.14000d3d8();\n        *puVar2 = 0x16;\n        fcn.14000cdc0();\n        uVar1 = 0xffffffff;\n    }\n    else {\n        uVar1 = *(arg1 + 0x18);\n    }\n    return uVar1;\n}\n",
        "token_count": 113
    },
    "140012b2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong * fcn.140012b28(ulong *arg1)\n\n{\n    ulong *puVar1;\n    uchar auStackX8 [32];\n    \n    *arg1 = 0;\n    fcn.1400161d8(8);\n    puVar1 = fcn.140012b9c(auStackX8);\n    puVar1 = *puVar1;\n    *arg1 = puVar1;\n    if (puVar1 != NULL) {\n        *(puVar1 + 2) = 0;\n        puVar1[5] = 0;\n        *puVar1 = 0;\n        puVar1[1] = 0;\n        *(puVar1 + 3) = 0xffffffff;\n    }\n    fcn.140016238(8);\n    return arg1;\n}\n",
        "token_count": 178
    },
    "140013f1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nbool fcn.140013f1c(int64_t arg1)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    int64_t iVar3;\n    bool bVar4;\n    \n    iVar3 = fcn.1400127f0(2);\n    if (arg1 == iVar3) {\n        bVar4 = true;\n    }\n    else {\n        iVar3 = fcn.1400127f0(1);\n        if (arg1 == iVar3) {\n            uVar1 = fcn.1400126a0(arg1);\n            iVar2 = fcn.140018794(uVar1);\n            bVar4 = iVar2 != 0;\n        }\n        else {\n            bVar4 = false;\n        }\n    }\n    return bVar4;\n}\n",
        "token_count": 172
    },
    "14001559": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.140015594(int32_t *arg1, uchar *arg2, uint64_t arg3)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint16_t in_R9W;\n    uint64_t uStackX16;\n    uint16_t auStackX32 [4];\n    int64_t in_stack_00000028;\n    \n    if ((arg2 == NULL) && (arg3 != 0)) {\n        if (arg1 == NULL) {\n            return 0;\n        }\n        *arg1 = 0;\n        return 0;\n    }\n    if (arg1 != NULL) {\n        *arg1 = -1;\n    }\n    if (arg3 < 0x80000000) {\n        auStackX32[0] = in_R9W;\n        if (*(in_stack_00000028 + 0x28) == '\\0') {\n            fcn.140011110(in_stack_00000028);\n        }\n        uVar1 = *(*(in_stack_00000028 + 0x18) + 0xc);\n        if (uVar1 == 0xfde9) {\n            uStackX16 = 0;\n            iVar2 = fcn.14001be28(arg2, auStackX32[0], &uStackX16, in_stack_00000028);\n            if (arg1 != NULL) {\n                *arg1 = iVar2;\n            }\n            if (iVar2 < 5) {\n                return 0;\n            }\n            if (*(in_stack_00000028 + 0x30) != '\\0') {\n                return *(in_stack_00000028 + 0x2c);\n            }\n            return 0;\n        }\n        if (*(*(in_stack_00000028 + 0x18) + 0x138) == 0) {\n            if (0xff < auStackX32[0]) {\n                if ((arg2 != NULL) && (arg3 != 0)) {\n                    fcn.140020880(arg2, 0, arg3);\n                }\n                goto code_r0x000140015676;\n            }\n            if (arg2 == NULL) {\ncode_r0x0001400156a2:\n                if (arg1 != NULL) {\n                    *arg1 = 1;\n                }\n                return 0;\n            }\n            if (arg3 != 0) {\n                *arg2 = auStackX32[0];\n                goto code_r0x0001400156a2;\n            }\n        }\n        else {\n            uStackX16 = uStackX16 & 0xffffffff00000000;\n            iVar2 = fcn.1400187f4(uVar1, 0, auStackX32, 1);\n            if (iVar2 != 0) {\n                if (uStackX16 == 0) {\n                    if (arg1 == NULL) {\n                        return 0;\n                    }\n                    *arg1 = iVar2;\n                    return 0;\n                }\ncode_r0x000140015676:\n                *(in_stack_00000028 + 0x2c) = 0x2a;\n                *(in_stack_00000028 + 0x30) = 1;\n                return 0x2a;\n            }\n            iVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            if (iVar2 != 0x7a) goto code_r0x000140015676;\n            if ((arg2 != NULL) && (arg3 != 0)) {\n                fcn.140020880(arg2, 0, arg3);\n            }\n        }\n        uVar3 = 0x22;\n    }\n    else {\n        uVar3 = 0x16;\n    }\n    *(in_stack_00000028 + 0x2c) = uVar3;\n    *(in_stack_00000028 + 0x30) = 1;\n    fcn.14000ccf4(0, 0, 0, 0);\n    return uVar3;\n}\n",
        "token_count": 893
    },
    "140015fa": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140015fa4(int64_t arg1)\n\n{\n    if (((arg1 != 0) && (arg1 != 0x140027000)) && (*(arg1 + 0x15c) == 0)) {\n        fcn.14001753c(arg1);\n        fcn.140012664(arg1);\n    }\n    return;\n}\n",
        "token_count": 80
    },
    "14001620": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140016200(void)\n\n{\n    uint64_t uVar1;\n    \n    uVar1 = *0x140038610;\n    while (uVar1 != 0) {\n        uVar1 = uVar1 - 1;\n        (*_sym.imp.KERNEL32.dll_DeleteCriticalSection)(uVar1 * 0x28 + 0x1400383e0);\n        *0x140038610 = *0x140038610 - 1;\n    }\n    return 1;\n}\n",
        "token_count": 111
    },
    "14001641": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140016410(ulong arg1)\n\n{\n    int64_t iVar1;\n    ulong uVar2;\n    \n    iVar1 = fcn.140016254(0x19, \"AppPolicyGetProcessTerminationMethod\", 0x14002b384, \n                          \"AppPolicyGetProcessTerminationMethod\");\n    if (iVar1 != 0) {\n    // WARNING: Could not recover jumptable at 0x000140016456. Too many branches\n    // WARNING: Treating indirect jump as call\n        uVar2 = (**0x140029a28)(0xfffffffffffffffa, arg1);\n        return uVar2;\n    }\n    return 0xc0000225;\n}\n",
        "token_count": 154
    },
    "14001648": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140016488(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    int64_t iVar1;\n    \n    iVar1 = fcn.140016254(0xf, 0x14002b330, 0x14002b328, 0x14002b330);\n    if (iVar1 == 0) {\n        (*_sym.imp.KERNEL32.dll_InitializeCriticalSectionAndSpinCount)(arg1, arg2);\n    }\n    else {\n        (**0x140029a28)(arg1, arg2, arg3);\n    }\n    return;\n}\n",
        "token_count": 129
    },
    "1400164f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400164f8(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    uint uVar1;\n    int64_t iVar2;\n    ulong in_stack_00000028;\n    uint in_stack_00000030;\n    ulong in_stack_00000038;\n    ulong in_stack_00000040;\n    ulong in_stack_00000048;\n    \n    iVar2 = fcn.140016254(0x11, \"LCMapStringEx\", 0x14002b350, \"LCMapStringEx\");\n    if (iVar2 == 0) {\n        uVar1 = fcn.1400165e4(arg1, 0);\n        (*_sym.imp.KERNEL32.dll_LCMapStringW)(uVar1, arg2, arg3, arg4, in_stack_00000028, in_stack_00000030);\n    }\n    else {\n        (**0x140029a28)(arg1, arg2, arg3, arg4, in_stack_00000028, in_stack_00000030, in_stack_00000038, \n                        in_stack_00000040, in_stack_00000048);\n    }\n    return;\n}\n",
        "token_count": 262
    },
    "1400165e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400165e4(ulong arg1, ulong arg2)\n\n{\n    int64_t iVar1;\n    char *arg2_00;\n    \n    arg2_00 = \"LocaleNameToLCID\";\n    iVar1 = fcn.140016254(0x13, \"LocaleNameToLCID\", 0x14002b368, \"LocaleNameToLCID\");\n    if (iVar1 == 0) {\n        fcn.14001becc(arg1, arg2_00);\n    }\n    else {\n        (**0x140029a28)(arg1, arg2);\n    }\n    return;\n}\n",
        "token_count": 138
    },
    "14001691": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.140016914(int64_t arg1)\n\n{\n    int64_t iVar1;\n    int64_t iVar2;\n    ushort *puVar3;\n    int64_t iVar4;\n    \n    fcn.140020880(arg1 + 0x18, 0, 0x101);\n    iVar2 = 0;\n    *(arg1 + 4) = 0;\n    *(arg1 + 0x220) = 0;\n    puVar3 = arg1 + 0xc;\n    for (iVar1 = 6; iVar4 = iVar2,  iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    do {\n        iVar1 = iVar4 + 1;\n        *(arg1 + iVar4 + 0x18) = *(iVar4 + 0x140037898);\n        iVar4 = iVar1;\n    } while (iVar1 < 0x101);\n    do {\n        iVar1 = iVar2 + 1;\n        *(arg1 + iVar2 + 0x119) = *(iVar2 + 0x140037999);\n        iVar2 = iVar1;\n    } while (iVar1 < 0x100);\n    return;\n}\n",
        "token_count": 285
    },
    "140016f3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t * fcn.140016f30(ulong arg1)\n\n{\n    int32_t iVar1;\n    code *pcVar2;\n    int32_t *piVar3;\n    int64_t iVar4;\n    ulong in_RDX;\n    \n    iVar4 = fcn.140012060(arg1, in_RDX);\n    if (((*(iVar4 + 0x3a8) & *0x140037dc0) == 0) || (*(iVar4 + 0x90) == 0)) {\n        fcn.1400161d8(5);\n        piVar3 = *(iVar4 + 0x88);\n        if (piVar3 != *0x1400387d8) {\n            if (piVar3 != NULL) {\n                LOCK();\n                iVar1 = *piVar3;\n                *piVar3 = *piVar3 + -1;\n                if ((iVar1 == 1) && (piVar3 != 0x140037880)) {\n                    fcn.140012664(piVar3);\n                }\n            }\n            piVar3 = *0x1400387d8;\n            *(iVar4 + 0x88) = *0x1400387d8;\n            LOCK();\n            *piVar3 = *piVar3 + 1;\n        }\n        fcn.140016238(5);\n    }\n    else {\n        piVar3 = *(iVar4 + 0x88);\n    }\n    if (piVar3 != NULL) {\n        return piVar3;\n    }\n    fcn.14001260c();\n    pcVar2 = swi(3);\n    piVar3 = (*pcVar2)();\n    return piVar3;\n}\n",
        "token_count": 369
    },
    "14001739": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140017390(int64_t arg1)\n\n{\n    if (arg1 != 0) {\n        if (*(arg1 + 0x18) != *0x140037188) {\n            fcn.140012664(*(arg1 + 0x18));\n        }\n        if (*(arg1 + 0x20) != *0x140037190) {\n            fcn.140012664(*(arg1 + 0x20));\n        }\n        if (*(arg1 + 0x28) != *0x140037198) {\n            fcn.140012664(*(arg1 + 0x28));\n        }\n        if (*(arg1 + 0x30) != *0x1400371a0) {\n            fcn.140012664(*(arg1 + 0x30));\n        }\n        if (*(arg1 + 0x38) != *0x1400371a8) {\n            fcn.140012664(*(arg1 + 0x38));\n        }\n        if (*(arg1 + 0x40) != *0x1400371b0) {\n            fcn.140012664(*(arg1 + 0x40));\n        }\n        if (*(arg1 + 0x48) != *0x1400371b8) {\n            fcn.140012664(*(arg1 + 0x48));\n        }\n        if (*(arg1 + 0x68) != *0x1400371d8) {\n            fcn.140012664(*(arg1 + 0x68));\n        }\n        if (*(arg1 + 0x70) != *0x1400371e0) {\n            fcn.140012664(*(arg1 + 0x70));\n        }\n        if (*(arg1 + 0x78) != *0x1400371e8) {\n            fcn.140012664(*(arg1 + 0x78));\n        }\n        if (*(arg1 + 0x80) != *0x1400371f0) {\n            fcn.140012664(*(arg1 + 0x80));\n        }\n        if (*(arg1 + 0x88) != *0x1400371f8) {\n            fcn.140012664(*(arg1 + 0x88));\n        }\n        if (*(arg1 + 0x90) != *0x140037200) {\n            fcn.140012664(*(arg1 + 0x90));\n        }\n    }\n    return;\n}\n",
        "token_count": 543
    },
    "14001749": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001749c(int64_t *arg1)\n\n{\n    if (arg1 != NULL) {\n        if (*arg1 != *0x140037170) {\n            fcn.140012664(*arg1);\n        }\n        if (arg1[1] != *0x140037178) {\n            fcn.140012664(arg1[1]);\n        }\n        if (arg1[2] != *0x140037180) {\n            fcn.140012664(arg1[2]);\n        }\n        if (arg1[0xb] != *0x1400371c8) {\n            fcn.140012664(arg1[0xb]);\n        }\n        if (arg1[0xc] != *0x1400371d0) {\n            fcn.140012664(arg1[0xc]);\n        }\n    }\n    return;\n}\n",
        "token_count": 191
    },
    "14001750": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140017508(ulong *arg1)\n\n{\n    ulong *puVar1;\n    int64_t in_RDX;\n    \n    puVar1 = arg1 + in_RDX;\n    if (arg1 != puVar1) {\n        do {\n            fcn.140012664(*arg1);\n            arg1 = arg1 + 1;\n        } while (arg1 != puVar1);\n    }\n    return;\n}\n",
        "token_count": 95
    },
    "1400176a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.1400176ac(int16_t *arg1, int64_t arg2, int64_t arg3, int64_t arg4)\n\n{\n    int16_t iVar1;\n    uint *puVar2;\n    int64_t iVar3;\n    int16_t *piVar4;\n    uint uVar5;\n    int64_t iVar6;\n    int64_t iVar7;\n    \n    if (arg4 == 0) {\n        if (arg1 == NULL) {\n            if (arg2 == 0) {\n                return 0;\n            }\n        }\n        else {\ncode_r0x0001400176ff:\n            if (arg2 != 0) {\n                if (arg4 == 0) {\n                    *arg1 = 0;\n                    return 0;\n                }\n                if (arg3 != 0) {\n                    piVar4 = arg1;\n                    iVar3 = arg4;\n                    iVar7 = arg2;\n                    if (arg4 == -1) {\n                        do {\n                            iVar1 = *((arg3 - arg1) + piVar4);\n                            *piVar4 = iVar1;\n                            piVar4 = piVar4 + 1;\n                            if (iVar1 == 0) {\n                                return 0;\n                            }\n                            iVar7 = iVar7 + -1;\n                        } while (iVar7 != 0);\n                    }\n                    else {\n                        do {\n                            iVar6 = iVar3;\n                            iVar1 = *((arg3 - arg1) + piVar4);\n                            *piVar4 = iVar1;\n                            piVar4 = piVar4 + 1;\n                            if (iVar1 == 0) {\n                                return 0;\n                            }\n                            iVar7 = iVar7 + -1;\n                        } while ((iVar7 != 0) && (iVar3 = iVar6 + -1,  iVar6 + -1 != 0));\n                        iVar3 = iVar6 + -1;\n                        if (iVar7 == 0) {\n                            iVar3 = iVar6;\n                        }\n                        if (iVar3 == 0) {\n                            *piVar4 = 0;\n                        }\n                    }\n                    if (iVar7 != 0) {\n                        return 0;\n                    }\n                    if (arg4 == -1) {\n                        arg1[arg2 + -1] = 0;\n                        return 0x50;\n                    }\n                    *arg1 = 0;\n                    puVar2 = fcn.14000d3d8();\n                    uVar5 = 0x22;\n                    goto code_r0x0001400176dd;\n                }\n                *arg1 = 0;\n            }\n        }\n    }\n    else if (arg1 != NULL) goto code_r0x0001400176ff;\n    puVar2 = fcn.14000d3d8();\n    uVar5 = 0x16;\ncode_r0x0001400176dd:\n    *puVar2 = uVar5;\n    fcn.14000cdc0();\n    return uVar5;\n}\n",
        "token_count": 644
    },
    "140017a2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140017a28(ulong noname_0, uint32_t *arg2, ulong arg3, uint32_t *arg4)\n\n{\n    fcn.1400161d8(*arg2);\n    fcn.140017a60(arg3);\n    fcn.140016238(*arg4);\n    return;\n}\n",
        "token_count": 74
    },
    "140018be": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140018be0(ushort *arg1)\n\n{\n    uint64_t uVar1;\n    ulong in_RDX;\n    ulong in_R8;\n    ulong in_R9;\n    uint32_t auStack24 [4];\n    \n    uVar1 = fcn.14001c8a0(auStack24, in_RDX, in_R8, in_R9);\n    if (uVar1 < 5) {\n        if (0xffff < auStack24[0]) {\n            auStack24[0] = 0xfffd;\n        }\n        if (arg1 != NULL) {\n            *arg1 = auStack24[0];\n        }\n    }\n    return;\n}\n",
        "token_count": 151
    },
    "14001a33": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001a330(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    uint32_t in_stack_00000028;\n    \n    fcn.140019930(arg2, arg3, arg4, in_stack_00000028);\n    return;\n}\n",
        "token_count": 66
    },
    "14001a37": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint64_t fcn.14001a374(ulong arg1)\n\n{\n    int32_t iVar1;\n    uint64_t uVar2;\n    \n    uVar2 = fcn.14001a3b4();\n    if (uVar2 != 0) {\n        iVar1 = (**0x140029a28)(arg1);\n        uVar2 = iVar1 != 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 94
    },
    "14001be1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t fcn.14001be14(void)\n\n{\n    uint32_t uVar1;\n    \n    uVar1 = fcn.14001d6e8();\n    return uVar1 & 0x300;\n}\n",
        "token_count": 50
    },
    "14001bec": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.14001becc(int64_t arg1, ulong arg2)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    \n    if (arg1 != 0) {\n        iVar3 = 0;\n        iVar4 = 0xe3;\n        do {\n            iVar1 = (iVar4 + iVar3) / 2;\n            iVar2 = fcn.140019748(arg1, *(iVar1 * 0x10 + 0x140028250), 0x55);\n            if (iVar2 == 0) {\n                iVar3 = *(iVar1 * 0x10 + 0x140028258);\n                if (iVar3 < 0) {\n                    return 0;\n                }\n                if (0xe3 < iVar3) {\n                    return 0;\n                }\n                return *(iVar3 * 0x10 + 0x140027410);\n            }\n            if (iVar2 < 0) {\n                iVar4 = iVar1 + -1;\n            }\n            else {\n                iVar3 = iVar1 + 1;\n            }\n        } while (iVar3 <= iVar4);\n    }\n    return 0;\n}\n",
        "token_count": 267
    },
    "14001bfa": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_10h\n\nvoid fcn.14001bfa0(int64_t *arg1, ulong arg2, ulong arg3, ulong arg4, ulong noname_4, ulong noname_5, ulong noname_6, \n                  ulong noname_7, ulong noname_8, ulong noname_9, ulong arg_60h, ulong arg_68h, ulong arg_70h, \n                  ulong arg_78h, ulong arg_80h)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint64_t uVar4;\n    uint *arg3_00;\n    int64_t iVar5;\n    uint *arg3_01;\n    uint64_t uVar6;\n    uint *puVar7;\n    uchar *puVar8;\n    uchar *puVar9;\n    uchar *puVar10;\n    ulong var_8h;\n    ulong var_10h;\n    ulong var_40h;\n    ulong var_48h;\n    ulong var_bp_50h;\n    uchar auStack136 [32];\n    ulong uStack104;\n    uint uStack96;\n    uint auStack56 [2];\n    uint64_t uStack48;\n    \n    puVar8 = &stack0xffffffffffffff78;\n    puVar9 = &stack0xffffffffffffff78;\n    puVar10 = &stack0xffffffffffffff78;\n    uStack48 = *0x140037f00 ^ &stack0xffffffffffffffc8;\n    if (0 < noname_4) {\n        fcn.14001d9ec(arg4, noname_4);\n    }\n    if (noname_7 == 0) {\n        noname_7._0_4_ = *(*arg1 + 0xc);\n    }\n    uStack96 = 0;\n    uStack104 = 0;\n    uVar1 = fcn.140017998(noname_7, (-(noname_8 != 0) & 8) + 1);\n    arg3_00 = NULL;\n    if (uVar1 == 0) goto code_r0x00014001c2ab;\n    uVar4 = uVar1 * 2 + 0x10;\n    uVar4 = -(uVar1 * 2 < uVar4) & uVar4;\n    puVar10 = &stack0xffffffffffffff78;\n    if (uVar4 == 0) {\ncode_r0x00014001c291:\n        if (arg3_00 == NULL) goto code_r0x00014001c2ab;\n    }\n    else {\n        if (uVar4 < 0x401) {\n            uVar6 = uVar4 + 0xf;\n            if (uVar6 <= uVar4) {\n                uVar6 = 0xffffffffffffff0;\n            }\n            uVar6 = uVar6 & 0xfffffffffffffff0;\n            fcn.14001efa0();\n            iVar5 = -uVar6;\n            puVar8 = &stack0xffffffffffffff78 + iVar5;\n            arg3_00 = &stack0xffffffffffffffc8 + iVar5;\n            puVar10 = &stack0xffffffffffffff78 + iVar5;\n            if (arg3_00 == NULL) goto code_r0x00014001c291;\n            *arg3_00 = 0xcccc;\ncode_r0x00014001c0ac:\n            arg3_00 = arg3_00 + 4;\n            puVar9 = puVar8;\n        }\n        else {\n            arg3_00 = fcn.140014410(uVar4);\n            if (arg3_00 != NULL) {\n                *arg3_00 = 0xdddd;\n                goto code_r0x00014001c0ac;\n            }\n        }\n        puVar10 = puVar9;\n        if (arg3_00 == NULL) goto code_r0x00014001c291;\n        *(puVar9 + 0x28) = uVar1;\n        *(puVar9 + 0x20) = arg3_00;\n        *(puVar9 + -8) = 0x14001c0d6;\n        iVar2 = fcn.140017998(noname_7, 1);\n        if (iVar2 == 0) goto code_r0x00014001c291;\n        *(puVar9 + 0x40) = 0;\n        *(puVar9 + 0x38) = 0;\n        *(puVar9 + 0x30) = 0;\n        *(puVar9 + 0x28) = 0;\n        *(puVar9 + 0x20) = 0;\n        *(puVar9 + -8) = 0x14001c109;\n        uVar3 = fcn.1400164f8(arg2, arg3, arg3_00, uVar1);\n        puVar7 = NULL;\n        if (uVar3 == 0) goto code_r0x00014001c291;\n        if ((arg3 & 0x400) == 0) {\n            uVar4 = uVar3 * 2 + 0x10;\n            uVar4 = -(uVar3 * 2 < uVar4) & uVar4;\n            arg3_01 = puVar7;\n            if (uVar4 == 0) {\ncode_r0x00014001c274:\n                if (arg3_01 != NULL) {\ncode_r0x00014001c279:\n                    if (arg3_01[-4] == 0xdddd) {\n                        *(puVar10 + -8) = 0x14001c28a;\n                        fcn.140012664(arg3_01 + -4);\n                    }\n                }\n            }\n            else {\n                if (uVar4 < 0x401) {\n                    *(puVar9 + -8) = 0x14001c1ac;\n                    iVar5 = fcn.14001efa0();\n                    iVar5 = -iVar5;\n                    puVar10 = puVar9 + iVar5;\n                    arg3_01 = puVar9 + iVar5 + 0x50;\n                    if (arg3_01 == NULL) goto code_r0x00014001c298;\n                    *arg3_01 = 0xcccc;\n                    puVar9 = puVar9 + iVar5;\ncode_r0x00014001c1da:\n                    arg3_01 = arg3_01 + 4;\n                    puVar10 = puVar9;\n                }\n                else {\n                    *(puVar9 + -8) = 0x14001c1ca;\n                    arg3_01 = fcn.140014410(uVar4);\n                    puVar7 = NULL;\n                    if (arg3_01 != NULL) {\n                        *arg3_01 = 0xdddd;\n                        goto code_r0x00014001c1da;\n                    }\n                }\n                if (arg3_01 != NULL) {\n                    *(puVar10 + 0x40) = puVar7;\n                    *(puVar10 + 0x38) = puVar7;\n                    *(puVar10 + 0x30) = puVar7;\n                    *(puVar10 + 0x28) = uVar3;\n                    *(puVar10 + 0x20) = arg3_01;\n                    *(puVar10 + -8) = 0x14001c210;\n                    iVar2 = fcn.1400164f8(arg2, arg3, arg3_00, uVar1);\n                    if (iVar2 == 0) goto code_r0x00014001c274;\n                    *(puVar10 + 0x38) = 0;\n                    *(puVar10 + 0x30) = 0;\n                    if (noname_6 == 0) {\n                        *(puVar10 + 0x28) = 0;\n                        *(puVar10 + 0x20) = 0;\n                        *(puVar10 + -8) = 0x14001c23e;\n                        iVar2 = fcn.1400187f4(noname_7, 0, arg3_01, uVar3);\n                        if (iVar2 == 0) goto code_r0x00014001c274;\n                    }\n                    else {\n                        *(puVar10 + 0x28) = noname_6;\n                        *(puVar10 + 0x20) = noname_5;\n                        *(puVar10 + -8) = 0x14001c258;\n                        iVar2 = fcn.1400187f4(noname_7, 0, arg3_01, uVar3);\n                        if (iVar2 == 0) goto code_r0x00014001c279;\n                    }\n                    if (arg3_01[-4] == 0xdddd) {\n                        *(puVar10 + -8) = 0x14001c26f;\n                        fcn.140012664(arg3_01 + -4);\n                    }\n                }\n            }\n        }\n        else if (noname_6 != 0) {\n            if (uVar3 <= noname_6) {\n                *(puVar9 + 0x40) = 0;\n                *(puVar9 + 0x38) = 0;\n                *(puVar9 + 0x30) = 0;\n                *(puVar9 + 0x28) = noname_6;\n                *(puVar9 + 0x20) = noname_5;\n                *(puVar9 + -8) = 0x14001c161;\n                iVar2 = fcn.1400164f8(arg2, arg3, arg3_00, uVar1);\n                if (iVar2 != 0) goto code_r0x00014001c298;\n            }\n            goto code_r0x00014001c291;\n        }\n    }\ncode_r0x00014001c298:\n    if (arg3_00[-4] == 0xdddd) {\n        *(puVar10 + -8) = 0x14001c2a9;\n        fcn.140012664(arg3_00 + -4);\n    }\ncode_r0x00014001c2ab:\n    uVar4 = uStack48 ^ &stack0xffffffffffffffc8;\n    *(puVar10 + -8) = 0x14001c2b7;\n    fcn.14001e9f0(uVar4);\n    return;\n}\n",
        "token_count": 2304
    },
    "14001c39": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001c398(int64_t *arg1, int64_t *arg2)\n\n{\n    if (arg1 != arg2) {\n        do {\n            if (*arg1 != 0) {\n                (**0x140029a28)();\n            }\n            arg1 = arg1 + 1;\n        } while (arg1 != arg2);\n    }\n    return;\n}\n",
        "token_count": 84
    },
    "14001c3d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14001c3dc(int64_t *arg1, int64_t *arg2)\n\n{\n    ulong uVar1;\n    bool bVar2;\n    \n    bVar2 = arg1 == arg2;\n    while( true ) {\n        if (bVar2) {\n            return 0;\n        }\n        if ((*arg1 != 0) && (uVar1 = (**0x140029a28)(),  uVar1 != 0)) break;\n        arg1 = arg1 + 1;\n        bVar2 = arg1 == arg2;\n    }\n    return uVar1;\n}\n",
        "token_count": 134
    },
    "14001c42": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.14001c424(ulong noname_0, uint32_t *arg2, ulong arg3, uint32_t *arg4)\n\n{\n    uint uVar1;\n    \n    fcn.1400161d8(*arg2);\n    uVar1 = fcn.14001c49c(arg3);\n    fcn.140016238(*arg4);\n    return uVar1;\n}\n",
        "token_count": 89
    },
    "14001c46": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.14001c460(ulong noname_0, uint32_t *arg2, ulong arg3, uint32_t *arg4)\n\n{\n    uint uVar1;\n    \n    fcn.1400161d8(*arg2);\n    uVar1 = fcn.14001c64c(arg3);\n    fcn.140016238(*arg4);\n    return uVar1;\n}\n",
        "token_count": 89
    },
    "14001c7e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.14001c7e8(ulong arg1, ulong arg2)\n\n{\n    ulong uStackX8;\n    ulong uStackX16;\n    ulong var_20h_2;\n    ulong var_28h;\n    ulong var_20h;\n    ulong *var_18h;\n    ulong *var_bp_10h;\n    \n    var_18h = &uStackX8;\n    var_bp_10h = &uStackX16;\n    var_28h._0_4_ = 2;\n    var_20h._0_4_ = 2;\n    uStackX8 = arg1;\n    uStackX16 = arg2;\n    fcn.14001c424(&var_20h_2, &var_20h, &var_18h, &var_28h);\n    return;\n}\n",
        "token_count": 195
    },
    "14001c77": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001c77c(ulong arg1)\n\n{\n    ulong uStackX8;\n    uchar auStackX16 [8];\n    uint auStackX24 [2];\n    uint auStackX32 [2];\n    ulong *puStack24;\n    ulong uStack16;\n    \n    uStack16 = 0xfffffffffffffffe;\n    puStack24 = &uStackX8;\n    auStackX24[0] = 2;\n    auStackX32[0] = 2;\n    uStackX8 = arg1;\n    fcn.14001c460(auStackX16, auStackX32, &puStack24, auStackX24);\n    return;\n}\n",
        "token_count": 152
    },
    "14001cbb": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.14001cbbc(uint *arg1)\n\n{\n    uint *puVar1;\n    ulong uVar2;\n    \n    if (arg1 == NULL) {\n        puVar1 = fcn.14000d3d8();\n        *puVar1 = 0x16;\n        fcn.14000cdc0();\n        uVar2 = 0x16;\n    }\n    else {\n        *arg1 = *0x140038884;\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 117
    },
    "14001cfc": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nbool fcn.14001cfc0(uint32_t *arg1)\n\n{\n    int32_t iVar1;\n    bool bVar2;\n    ulong uStackX8;\n    \n    fcn.14001d824(*arg1);\n    fcn.14001d95c(arg1[1]);\n    uStackX8 = 0;\n    iVar1 = fcn.14001cfa0(&uStackX8);\n    if ((iVar1 == 0) && (*arg1 == uStackX8)) {\n        bVar2 = arg1[1] != uStackX8._4_4_;\n    }\n    else {\n        bVar2 = true;\n    }\n    return bVar2;\n}\n",
        "token_count": 163
    },
    "14001e0e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001e0e0(ulong param_1, ulong param_2, ulong param_3)\n\n{\n    fcn.14001e100(param_1, param_2, param_3, 0x1b);\n    return;\n}\n",
        "token_count": 58
    },
    "14001f5b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001f5b8(ulong arg1)\n\n{\n    fcn.14001ea18(arg1);\n    return;\n}\n",
        "token_count": 32
    },
    "14001f4f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001f4f4(void)\n\n{\n    int64_t *piVar1;\n    \n    for (piVar1 = 0x140033f28; piVar1 < 0x140033f28; piVar1 = piVar1 + 1) {\n        if (*piVar1 != 0) {\n            (**0x140029a28)();\n        }\n    }\n    return;\n}\n",
        "token_count": 91
    },
    "14001f6a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.14001f6a4(int64_t arg1, ulong arg2)\n\n{\n    int64_t iVar1;\n    uint32_t uVar2;\n    \n    uVar2 = *(arg1 + 0xc);\n    do {\n        if (uVar2 == 0) {\n            return 0;\n        }\n        uVar2 = uVar2 - 1;\n        iVar1 = fcn.140021470();\n        iVar1 = *(arg1 + 0x10) + *(iVar1 + 0x60) + uVar2 * 0x14;\n    } while ((arg2 <= *(iVar1 + 4)) || (*(iVar1 + 8) < arg2));\n    return iVar1;\n}\n",
        "token_count": 162
    },
    "14001f8f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t * fcn.14001f8f8(int64_t *arg1, ulong *arg2, int64_t arg3, int64_t *arg4)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint32_t *puVar3;\n    uint32_t uVar4;\n    uint64_t uVar5;\n    int32_t *piVar6;\n    int64_t iVar7;\n    uint32_t uVar8;\n    int64_t iVar9;\n    int64_t iStackX8;\n    \n    uVar8 = *(arg3 + 0xc);\n    iVar2 = fcn.14002165c(arg3, arg2);\n    *arg4 = *arg1;\n    do {\n        do {\n            if (uVar8 == 0) {\n                return arg4;\n            }\n            uVar8 = uVar8 - 1;\n            iVar7 = *(arg3 + 0x10) + uVar8 * 0x14 + arg2[1];\n        } while ((iVar2 <= *(iVar7 + 4)) || (*(iVar7 + 8) < iVar2));\n        puVar3 = (*_sym.imp.ntdll.dll_RtlLookupFunctionEntry)(*arg2, &iStackX8, 0);\n        uVar5 = 0;\n        iVar9 = *(iVar7 + 0x10) + iStackX8;\n        uVar1 = *(iVar7 + 0xc);\n        if (uVar1 != 0) {\n            piVar6 = iVar9 + 0xc;\n            do {\n                if (*piVar6 == *puVar3) break;\n                uVar4 = uVar5 + 1;\n                uVar5 = uVar4;\n                piVar6 = piVar6 + 5;\n            } while (uVar4 < uVar1);\n        }\n        if (uVar5 < uVar1) {\n            *arg4 = *(*(iVar9 + 0x10 + uVar5 * 0x14) + *arg1);\n            return arg4;\n        }\n    } while( true );\n}\n",
        "token_count": 462
    },
    "14002132": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuchar fcn.140021324(void)\n\n{\n    char cVar1;\n    \n    cVar1 = fcn.14002476c();\n    if (cVar1 != '\\0') {\n        cVar1 = fcn.140021550();\n        if (cVar1 != '\\0') {\n            return 1;\n        }\n        fcn.1400247b4();\n    }\n    return 0;\n}\n",
        "token_count": 90
    },
    "14002139": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140021390(int64_t *arg1, uint8_t *arg2)\n\n{\n    int64_t iStack56;\n    ulong uStack48;\n    int64_t *piStack40;\n    uint8_t *puStack32;\n    int64_t iStack24;\n    \n    uStack48 = 0x19930520;\n    if ((arg2 != NULL) && ((*arg2 & 0x10) != 0)) {\n        arg2 = *(*(*arg1 + -8) + 0x30);\n        (**0x140029a28)();\n    }\n    iStack56 = (*_sym.imp.ntdll.dll_RtlPcToFileHeader)(arg2, &iStack56);\n    if ((arg2 != NULL) && (((*arg2 & 8) != 0 || (iStack56 == 0)))) {\n        uStack48 = 0x1994000;\n    }\n    piStack40 = arg1;\n    puStack32 = arg2;\n    iStack24 = iStack56;\n    (*_sym.imp.KERNEL32.dll_RaiseException)(0xe06d7363, 1, 4, &uStack48);\n    return;\n}\n",
        "token_count": 259
    },
    "1400215c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400215c0(int64_t *arg1, ulong *arg2, int64_t arg3)\n\n{\n    if (*(*(arg3 + 0x1c) + *arg1) == -2) {\n        fcn.14002166c(arg3, arg2, *arg2);\n    }\n    return;\n}\n",
        "token_count": 76
    },
    "14002166": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint64_t fcn.14002166c(int64_t arg1, int64_t arg2, uint64_t arg3)\n\n{\n    int64_t iVar1;\n    code *pcVar2;\n    uint64_t uVar3;\n    uint32_t uVar4;\n    int64_t iVar5;\n    \n    if (arg1 != 0) {\n        iVar5 = *(arg1 + 0x18);\n        iVar1 = *(arg2 + 8);\n        if (iVar1 + iVar5 != 0) {\n            uVar3 = 0;\n            if (*(arg1 + 0x14) != 0) {\n                do {\n                    if (arg3 < *(iVar5 + uVar3 * 8 + iVar1) + iVar1) break;\n                    uVar4 = uVar3 + 1;\n                    uVar3 = uVar4;\n                } while (uVar4 < *(arg1 + 0x14));\n                if (uVar3 != 0) {\n                    return *(iVar1 + (uVar3 - 1) * 8 + 4 + iVar5);\n                }\n            }\n            return 0xffffffff;\n        }\n    }\n    fcn.14001260c();\n    pcVar2 = swi(3);\n    uVar3 = (*pcVar2)();\n    return uVar3;\n}\n",
        "token_count": 291
    },
    "1400247b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.1400247b4(void)\n\n{\n    uint64_t uVar1;\n    \n    uVar1 = *0x140038f30;\n    while (uVar1 != 0) {\n        uVar1 = uVar1 - 1;\n        (*_sym.imp.KERNEL32.dll_DeleteCriticalSection)(uVar1 * 0x28 + 0x140038f08);\n        *0x140038f30 = *0x140038f30 - 1;\n    }\n    return 1;\n}\n",
        "token_count": 115
    },
    "14002488": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140024880(ulong arg1, ulong *arg2)\n\n{\n    fcn.140024700(arg1, *arg2, 2);\n    return;\n}\n",
        "token_count": 40
    },
    "1400248b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1400248b0(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    code *pcVar1;\n    ulong arg1_00;\n    \n    pcVar1 = fcn.140024700(arg1, arg2, arg4);\n    (*pcVar1)(arg3);\n    arg1_00 = fcn.140024730();\n    fcn.140024700(arg1_00, arg2, 2);\n    return;\n}\n",
        "token_count": 107
    },
    "140024ea": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140024eac(int64_t *arg1)\n\n{\n    if (*arg1 != *0x1400391c8) {\n        fcn.140024e24(*arg1);\n    }\n    return;\n}\n",
        "token_count": 51
    },
    "140024ec": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140024ec8(int64_t *arg1)\n\n{\n    if (*arg1 != *0x1400391c0) {\n        fcn.140024e68(*arg1);\n    }\n    return;\n}\n",
        "token_count": 51
    },
    "140024e6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.140024e68(int64_t *arg1)\n\n{\n    int64_t lpMem;\n    int64_t *piVar1;\n    \n    if (arg1 != NULL) {\n        lpMem = *arg1;\n        piVar1 = arg1;\n        while (lpMem != 0) {\n            fcn.140012664(lpMem);\n            piVar1 = piVar1 + 1;\n            lpMem = *piVar1;\n        }\n        fcn.140012664(arg1);\n    }\n    return;\n}\n",
        "token_count": 118
    },
    "140024ee": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.140024ee4(void)\n\n{\n    int64_t *lpMem;\n    int64_t lpMem_00;\n    int64_t *piVar1;\n    \n    fcn.140024eac(0x1400391b0);\n    fcn.140024ec8(0x1400391b8);\n    fcn.140024e24(*0x1400391c8);\n    lpMem = *0x1400391c0;\n    if (*0x1400391c0 != NULL) {\n        lpMem_00 = **0x1400391c0;\n        piVar1 = *0x1400391c0;\n        while (lpMem_00 != 0) {\n            fcn.140012664(lpMem_00);\n            piVar1 = piVar1 + 1;\n            lpMem_00 = *piVar1;\n        }\n        fcn.140012664(lpMem);\n    }\n    return;\n}\n",
        "token_count": 211
    },
    "140024f2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.140024f28(void)\n\n{\n    int64_t iVar1;\n    int64_t arg1;\n    ulong uVar2;\n    int64_t iVar3;\n    \n    uVar2 = 0;\n    if (*0x1400391b8 == 0) {\n        arg1 = fcn.140025738();\n        if (arg1 == 0) {\n            fcn.140012664(0);\n            uVar2 = 0xffffffff;\n        }\n        else {\n            iVar3 = fcn.140024d08(arg1);\n            iVar1 = iVar3;\n            if (iVar3 == 0) {\n                uVar2 = 0xffffffff;\n                iVar3 = *0x1400391b8;\n                iVar1 = *0x1400391c0;\n            }\n            *0x1400391c0 = iVar1;\n            *0x1400391b8 = iVar3;\n            fcn.140012664(0);\n            fcn.140012664(arg1);\n        }\n    }\n    else {\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 246
    },
    "1400256f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.1400256fc(int16_t **arg1, int64_t *arg2)\n\n{\n    code *pcVar1;\n    uint8_t uVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    int16_t *piVar5;\n    int16_t *piVar6;\n    int64_t iVar7;\n    uint16_t uVar8;\n    int64_t *piVar9;\n    int64_t iVar10;\n    int64_t iVar11;\n    int64_t iVar12;\n    ulong var_1b0h;\n    ulong var_1b8h;\n    uchar auStack760 [32];\n    ulong uStack728;\n    uint uStack720;\n    uchar auStack712 [16];\n    ulong uStack696;\n    int64_t iStack688;\n    int64_t *piStack680;\n    uchar auStack664 [44];\n    int16_t iStack620;\n    int16_t iStack618;\n    int16_t iStack616;\n    ulong var_74h;\n    ulong uStack72;\n    uint64_t uStack64;\n    \n    uStack64 = *0x140037f00 ^ auStack760;\n    piStack680 = arg2;\n    if (arg2 == NULL) {\n        puVar4 = fcn.14000d3d8();\n        *puVar4 = 0x16;\n        fcn.14000cdc0();\n    }\n    else {\n        *arg2 = 0;\n        piVar5 = *arg1;\n        auStack712 = ZEXT816(0);\n        auStack712._8_8_ = NULL;\n        auStack712._0_8_ = NULL;\n        uStack696 = 0;\n        while (piVar5 != NULL) {\n            uStack72 = CONCAT26(uStack72._6_2_, 0x3f002a);\n            piVar6 = fcn.1400177d4(piVar5, &uStack72);\n            piVar5 = *arg1;\n            if (piVar6 == NULL) {\n                iVar3 = fcn.140025574(piVar5, 0, 0, auStack712);\n                if (iVar3 != 0) {\n                    piVar9 = auStack712._0_8_;\n                    if (auStack712._0_8_ != auStack712._8_8_) {\n                        do {\n                            fcn.140012664(*piVar9);\n                            piVar9 = piVar9 + 1;\n                        } while (piVar9 != auStack712._8_8_);\n                    }\n                    goto code_r0x000140025487;\n                }\n            }\n            else {\n                while ((piVar6 != piVar5 &&\n                       ((0x2d < *piVar6 - 0x2fU || ((0x200000000801U >> (*piVar6 - 0x2fU & 0x3f) & 1) == 0))))) {\n                    piVar6 = piVar6 + -1;\n                }\n                if ((*piVar6 != 0x3a) || (piVar6 == piVar5 + 1)) {\n                    uVar8 = *piVar6 - 0x2f;\n                    if ((0x2d < uVar8) || (uVar2 = 1,  (0x200000000801U >> (uVar8 & 0x3f) & 1) == 0)) {\n                        uVar2 = 0;\n                    }\n                    uStack720 = 0;\n                    uStack728 = 0;\n                    iVar7 = (*_sym.imp.KERNEL32.dll_FindFirstFileExW)(piVar5, 0, auStack664, 0);\n                    if (iVar7 != -1) {\n                        iVar10 = auStack712._8_8_ - auStack712._0_8_ >> 3;\n                        do {\n                            if (((iStack620 != 0x2e) || ((iStack618 != 0 && ((iStack618 != 0x2e || (iStack616 != 0))))))\n                               && (iVar3 = fcn.140025574(&iStack620, piVar5, -uVar2 & (piVar6 - piVar5 >> 1) + 1U, \n                                                         auStack712),  iVar3 != 0)) {\n                                (*_sym.imp.KERNEL32.dll_FindClose)(iVar7);\n                                goto code_r0x0001400253e4;\n                            }\n                            iVar3 = (*_sym.imp.KERNEL32.dll_FindNextFileW)(iVar7, auStack664);\n                        } while (iVar3 != 0);\n                        iVar7 = auStack712._8_8_ - auStack712._0_8_ >> 3;\n                        if (iVar10 != iVar7) {\n                            fcn.1400258b0(auStack712._0_8_ + iVar10, iVar7 - iVar10, 8, 0x140025170);\n                        }\n                        (*_sym.imp.KERNEL32.dll_FindClose)();\n                        goto code_r0x0001400253a9;\n                    }\n                }\n                iVar3 = fcn.140025574(piVar5, 0, 0, auStack712);\n                if (iVar3 != 0) {\ncode_r0x0001400253e4:\n                    piVar9 = auStack712._0_8_;\n                    if (auStack712._0_8_ != auStack712._8_8_) {\n                        do {\n                            fcn.140012664(*piVar9);\n                            piVar9 = piVar9 + 1;\n                        } while (piVar9 != auStack712._8_8_);\n                    }\n                    goto code_r0x000140025487;\n                }\n            }\ncode_r0x0001400253a9:\n            arg1 = arg1 + 1;\n            piVar5 = *arg1;\n        }\n        iVar7 = (auStack712._8_8_ - auStack712._0_8_ >> 3) + 1;\n        iStack688 = 0;\n        for (piVar9 = auStack712._0_8_; piVar9 != auStack712._8_8_; piVar9 = piVar9 + 1) {\n            iVar10 = -1;\n            do {\n                iVar10 = iVar10 + 1;\n            } while (*(*piVar9 + iVar10 * 2) != 0);\n            iStack688 = iStack688 + 1 + iVar10;\n        }\n        iVar10 = fcn.140024ab4(iVar7, iStack688);\n        if (iVar10 == 0) {\n            fcn.140012664(0);\n            for (piVar9 = auStack712._0_8_; piVar9 != auStack712._8_8_; piVar9 = piVar9 + 1) {\n                fcn.140012664(*piVar9);\n            }\ncode_r0x000140025487:\n            fcn.140012664(auStack712._0_8_);\n        }\n        else {\n            iVar7 = iVar10 + iVar7 * 8;\n            uStack72 = iVar7;\n            if (auStack712._0_8_ != auStack712._8_8_) {\n                piVar9 = auStack712._0_8_;\n                do {\n                    iVar11 = -1;\n                    do {\n                        iVar12 = iVar11;\n                        iVar11 = iVar12 + 1;\n                    } while (*(*piVar9 + iVar11 * 2) != 0);\n                    iVar12 = iVar12 + 2;\n                    iVar3 = fcn.1400176ac(iVar7, iStack688 - (iVar7 - uStack72 >> 1), *piVar9, iVar12);\n                    if (iVar3 != 0) {\n                        uStack728 = 0;\n                        fcn.14000ce10(0, 0, 0, 0);\n                        pcVar1 = swi(3);\n                        (*pcVar1)();\n                        return;\n                    }\n                    *(piVar9 + (iVar10 - auStack712._0_8_)) = iVar7;\n                    piVar9 = piVar9 + 1;\n                    iVar7 = iVar7 + iVar12 * 2;\n                } while (piVar9 != auStack712._8_8_);\n            }\n            *piStack680 = iVar10;\n            fcn.140012664(0);\n            for (piVar9 = auStack712._0_8_; piVar9 != auStack712._8_8_; piVar9 = piVar9 + 1) {\n                fcn.140012664(*piVar9);\n            }\n            fcn.140012664(auStack712._0_8_);\n        }\n    }\n    fcn.14001e9f0(uStack64 ^ auStack760);\n    return;\n}\n",
        "token_count": 1943
    },
    "14002573": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint16_t * fcn.140025738(void)\n\n{\n    int16_t iVar1;\n    int16_t *arg2;\n    int64_t iVar2;\n    int16_t *arg1;\n    int16_t *piVar4;\n    int64_t iVar3;\n    \n    arg2 = (*_sym.imp.KERNEL32.dll_GetEnvironmentStringsW)();\n    piVar4 = arg2;\n    if (arg2 != NULL) {\n        iVar1 = *arg2;\n        while (iVar1 != 0) {\n            iVar2 = -1;\n            do {\n                iVar3 = iVar2;\n                iVar2 = iVar3 + 1;\n            } while (piVar4[iVar2] != 0);\n            piVar4 = piVar4 + iVar3 + 2;\n            iVar1 = *piVar4;\n        }\n        iVar2 = (piVar4 + (2 - arg2) >> 1) * 2;\n        arg1 = fcn.140014410(iVar2);\n        piVar4 = NULL;\n        if (arg1 != NULL) {\n            fcn.140020a40(arg1, arg2, iVar2);\n            piVar4 = arg1;\n        }\n        fcn.140012664(0);\n        (*_sym.imp.KERNEL32.dll_FreeEnvironmentStringsW)(arg2);\n    }\n    return piVar4;\n}\n",
        "token_count": 296
    },
    "140025d6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nbool fcn.140025d60(int16_t *arg1)\n\n{\n    if ((*arg1 == 0x5a4d) && (*(*(arg1 + 0x1e) + arg1) == 0x4550)) {\n        return *(*(arg1 + 0x1e) + arg1 + 6) == 0x20b;\n    }\n    return false;\n}\n",
        "token_count": 89
    },
    "140025e1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.140025e14(int64_t arg1, int64_t arg2, int64_t arg3, ulong arg4)\n\n{\n    arg1 = arg2 * arg3 + arg1;\n    while( true ) {\n        if (arg3 == 0) break;\n        arg1 = arg1 - arg2;\n        (**0x140029a28)(arg1);\n        arg3 = arg3 + -1;\n    }\n    return;\n}\n",
        "token_count": 100
    },
    "14001ea1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.14001ea18(int64_t arg1)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    int32_t iVar3;\n    \n    do {\n        iVar2 = fcn.140011bd8(arg1);\n        if (iVar2 != 0) {\n            return;\n        }\n        iVar3 = fcn.14001a374(arg1);\n    } while (iVar3 != 0);\n    if (arg1 == -1) {\n        fcn.140001f28();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    fcn.14001f598();\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 163
    },
    "14000f3d": {
        "rules": [
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid fcn.14000f3d4(char *arg1, int64_t *arg2)\n\n{\n    char cVar1;\n    char *pcVar2;\n    char *pcVar3;\n    int64_t iVar4;\n    \n    cVar1 = *arg1;\n    while ((cVar1 != '\\0' && (cVar1 != ***(*arg2 + 0xf8)))) {\n        arg1 = arg1 + 1;\n        cVar1 = *arg1;\n    }\n    if (cVar1 != '\\0') {\n        do {\n            arg1 = arg1 + 1;\n            pcVar2 = arg1;\n            if (*arg1 == '\\0') break;\n        } while ((*arg1 + 0xbbU & 0xdf) != 0);\n        do {\n            pcVar3 = pcVar2;\n            pcVar2 = pcVar3 + -1;\n        } while (*pcVar2 == '0');\n        pcVar3 = pcVar3 + -2;\n        if (*pcVar2 != ***(*arg2 + 0xf8)) {\n            pcVar3 = pcVar2;\n        }\n        iVar4 = arg1 - pcVar3;\n        do {\n            cVar1 = pcVar3[iVar4];\n            pcVar3 = pcVar3 + 1;\n            *pcVar3 = cVar1;\n        } while (cVar1 != '\\0');\n    }\n    return;\n}\n",
        "token_count": 312
    },
    "140006bf": {
        "rules": [
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.140006bf4(ulong *arg1)\n\n{\n    code *pcVar1;\n    int64_t arg1_00;\n    uint32_t uVar2;\n    ulong *puVar3;\n    ulong var_37h;\n    uchar auStack280 [32];\n    uint32_t uStack248;\n    uint32_t uStack240;\n    uint32_t uStack232;\n    uint32_t uStack224;\n    uint32_t uStack216;\n    uint32_t uStack208;\n    uint32_t uStack200;\n    uint32_t uStack192;\n    uint32_t uStack184;\n    uint32_t uStack176;\n    ulong *puStack168;\n    int64_t aiStack160 [2];\n    uchar auStack144 [6];\n    uint16_t uStack138;\n    uint8_t uStack136;\n    uint8_t uStack135;\n    uint8_t uStack134;\n    uint8_t uStack133;\n    uint8_t uStack132;\n    uint8_t uStack131;\n    uint8_t uStack130;\n    uint8_t uStack129;\n    uchar auStack120 [39];\n    ulong var_49h;\n    ulong var_41h;\n    ulong var_31h;\n    uint64_t var_22h;\n    ulong var_19h;\n    \n    *NULL = *0x140037f00 ^ auStack280;\n    _auStack144 = ZEXT816(0);\n    puStack168 = arg1;\n    uVar2 = (*_sym.imp.RPCRT4.dll_UuidCreate)();\n    if (-1 < uVar2) {\n        uStack176 = uStack129;\n        uStack184 = uStack130;\n        uStack192 = uStack131;\n        uStack200 = uStack132;\n        uStack208 = uStack133;\n        uStack216 = uStack134;\n        uStack224 = uStack135;\n        uStack232 = uStack136;\n        uStack240 = uStack138;\n        uStack248 = auStack144._4_2_;\n        uVar2 = fcn.140004600(auStack120, 0x25, L\"%08X-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X\", auStack144._0_4_);\n        if (uVar2 < 0) {\n            fcn.140009514(uVar2);\n            pcVar1 = swi(3);\n            (*pcVar1)();\n            return;\n        }\n        aiStack160[0] = 0;\n        puVar3 = fcn.14000980c(&puStack168, L\"%ls{%ls}.tmp\", L\"BUNC\", auStack120);\n        uVar2 = fcn.14000a6e8(0x14000a510, aiStack160, *puVar3);\n        if (-1 < uVar2) {\n            if (puStack168 != NULL) {\n                fcn.14001ea10(puStack168);\n            }\n            puVar3 = fcn.14001ea18(0x28);\n            arg1_00 = aiStack160[0];\n            uStack240 = 0x4000102;\n            uStack248 = 1;\n            puStack168 = puVar3;\n            fcn.140006528(puVar3, aiStack160[0], 0xc0010000, 0);\n            *puVar3 = 0x140029318;\n            puVar3[1] = 0x140029300;\n            *arg1 = puVar3;\n            if (arg1_00 != 0) {\n                fcn.14001ea10(arg1_00);\n            }\n            fcn.14001e9f0(stack0xffffffffffffffd8 ^ auStack280);\n            return;\n        }\n        uVar2 = fcn.140009514(uVar2);\n    }\n    fcn.140009514(uVar2);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 894
    },
    "14001c87": {
        "rules": [
            "PEB access"
        ],
        "decompiled_code": "\nuint32_t fcn.14001c878(void)\n\n{\n    int64_t in_GS_OFFSET;\n    \n    return *(*(*(*(in_GS_OFFSET + 0x30) + 0x60) + 0x20) + 8) >> 0x1f;\n}\n",
        "token_count": 63
    },
    "140011bd": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nint64_t fcn.140011bd8(uint64_t arg1)\n\n{\n    int32_t iVar1;\n    int64_t iVar2;\n    uint *puVar3;\n    \n    if (arg1 < 0xffffffffffffffe1) {\n        if (arg1 == 0) {\n            arg1 = 1;\n        }\n        do {\n            iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(*0x140038820, 0, arg1);\n            if (iVar2 != 0) {\n                return iVar2;\n            }\n            iVar1 = fcn.14001a3ec();\n        } while ((iVar1 != 0) && (iVar1 = fcn.14001a374(arg1),  iVar1 != 0));\n    }\n    puVar3 = fcn.14000d3d8();\n    *puVar3 = 0xc;\n    return 0;\n}\n",
        "token_count": 199
    },
    "14002165": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nuint64_t fcn.14002165c(int64_t arg1, uint64_t *arg2)\n\n{\n    code *pcVar1;\n    uint64_t uVar2;\n    uint32_t uVar3;\n    uint64_t uVar4;\n    int64_t iVar5;\n    \n    if (arg1 != 0) {\n        iVar5 = *(arg1 + 0x18);\n        uVar2 = arg2[1];\n        if (uVar2 + iVar5 != 0) {\n            uVar4 = 0;\n            if (*(arg1 + 0x14) != 0) {\n                do {\n                    if (*arg2 < *(iVar5 + uVar4 * 8 + uVar2) + uVar2) break;\n                    uVar3 = uVar4 + 1;\n                    uVar4 = uVar3;\n                } while (uVar3 < *(arg1 + 0x14));\n                if (uVar4 != 0) {\n                    return *(uVar2 + (uVar4 - 1) * 8 + 4 + iVar5);\n                }\n            }\n            return 0xffffffff;\n        }\n    }\n    fcn.14001260c();\n    pcVar1 = swi(3);\n    uVar2 = (*pcVar1)();\n    return uVar2;\n}\n",
        "token_count": 290
    },
    "140025ef": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\nvoid fcn.140025ef8(int64_t arg1)\n\n{\n    code *pcVar1;\n    int64_t iVar2;\n    int32_t iVar3;\n    \n    do {\n        iVar2 = fcn.140011bd8(arg1);\n        if (iVar2 != 0) {\n            return;\n        }\n        iVar3 = fcn.14001a374(arg1);\n    } while (iVar3 != 0);\n    if (arg1 == -1) {\n        fcn.140001f28();\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    fcn.14001f598();\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 163
    },
    "140017bf": {
        "rules": [
            "terminate process"
        ],
        "decompiled_code": "\nvoid fcn.140017bf4(uint64_t arg1)\n\n{\n    code *pcVar1;\n    ulong uVar2;\n    char cVar3;\n    \n    arg1 = arg1 & 0xffffffff;\n    cVar3 = fcn.140017c28();\n    if (cVar3 != '\\0') {\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)();\n        (*_sym.imp.KERNEL32.dll_TerminateProcess)(uVar2, arg1);\n    }\n    fcn.140017c4c(arg1);\n    (*_sym.imp.KERNEL32.dll_ExitProcess)(arg1);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 159
    }
}