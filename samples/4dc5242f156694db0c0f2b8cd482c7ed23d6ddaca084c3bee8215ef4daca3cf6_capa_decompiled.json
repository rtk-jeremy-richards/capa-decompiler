{
    "null": {
        "rules": [
            "encrypt data using HC-128/1d01b23c04404fe18b84a06c7e7d83b0",
            "encrypt data using HC-128/1d01b23c04404fe18b84a06c7e7d83b0",
            "hash data using aphash/10489b186fc44711a1078750698db7a9",
            "hash data using aphash/10489b186fc44711a1078750698db7a9"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "1800078c": {
        "rules": [
            "encrypt data using HC-128/1d01b23c04404fe18b84a06c7e7d83b0",
            "hash data using aphash/10489b186fc44711a1078750698db7a9"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_bp_10h\n// WARNING: Variable defined which should be unmapped: var_18h\n// WARNING: Variable defined which should be unmapped: var_20h\n// WARNING: Variable defined which should be unmapped: var_28h\n// WARNING: Variable defined which should be unmapped: var_30h\n// WARNING: Could not reconcile some variable overlaps\n\nuint64_t fcn.1800078c8(int64_t *arg1, int64_t *arg2)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    uint64_t uVar5;\n    int64_t iVar6;\n    int64_t iVar7;\n    int64_t *piVar8;\n    uint64_t uVar9;\n    uint64_t uVar10;\n    uint64_t uVar11;\n    int64_t iVar12;\n    int64_t iVar13;\n    ulong uStackX24;\n    int64_t iStackX32;\n    ulong var_50h;\n    ulong var_58h;\n    uchar auStack88 [16];\n    ulong uStack72;\n    ulong var_30h;\n    ulong var_28h;\n    ulong var_20h;\n    ulong var_18h;\n    ulong var_bp_10h;\n    \n    uVar9 = 0;\n    if (arg2 == NULL) {\n        puVar4 = fcn.180007304();\n        *puVar4 = 0x16;\n        fcn.1800071e4();\n        uVar5 = 0x16;\n    }\n    else {\n        *arg2 = 0;\n        iVar6 = *arg1;\n        auStack88 = ZEXT816(0);\n        uStack72 = 0;\n        while (iVar6 != 0) {\n            uStackX24 = CONCAT53(uStackX24._3_5_, 0x3f2a);\n            iVar6 = fcn.180009b28(*arg1, &uStackX24);\n            if (iVar6 == 0) {\n                uVar2 = fcn.180007544(*arg1, 0, 0, auStack88);\n            }\n            else {\n                uVar2 = fcn.180007654(*arg1, iVar6, auStack88);\n            }\n            uVar5 = uVar2;\n            if (uVar2 != 0) {\n                goto code_r0x0001800074d8;\n            }\n            arg1 = arg1 + 1;\n            iVar6 = *arg1;\n        }\n        uStackX24 = 0;\n        iVar6 = (auStack88._8_8_ - auStack88._0_8_ >> 3) + 1;\n        uVar5 = (auStack88._8_8_ - auStack88._0_8_) + 7U >> 3;\n        if (auStack88._8_8_ < auStack88._0_8_) {\n            uVar5 = uVar9;\n        }\n        piVar8 = auStack88._0_8_;\n        uVar10 = uVar9;\n        uVar11 = uVar9;\n        if (uVar5 != 0) {\n            do {\n                iVar7 = -1;\n                do {\n                    iVar7 = iVar7 + 1;\n                } while (*(*piVar8 + iVar7) != '\\0');\n                piVar8 = piVar8 + 1;\n                uVar11 = uVar11 + 1 + iVar7;\n                uVar10 = uVar10 + 1;\n                uStackX24 = uVar11;\n            } while (uVar10 != uVar5);\n        }\n        iVar7 = fcn.180005744(iVar6, uStackX24);\n        uVar5 = 0xffffffffffffffff;\n        if (iVar7 != 0) {\n            iVar6 = iVar7 + iVar6 * 8;\n            iStackX32 = iVar6;\n            if (auStack88._0_8_ != auStack88._8_8_) {\n                piVar8 = auStack88._0_8_;\n                do {\n                    iVar12 = -1;\n                    do {\n                        iVar13 = iVar12;\n                        iVar12 = iVar13 + 1;\n                    } while (*(*piVar8 + iVar12) != '\\0');\n                    iVar13 = iVar13 + 2;\n                    iVar3 = fcn.180009a54(iStackX32, (iVar6 - iStackX32) + uStackX24, *piVar8, iVar13);\n                    if (iVar3 != 0) {\n                        fcn.180007204(0, 0, 0, 0, 0);\n                        pcVar1 = swi(3);\n                        uVar9 = (*pcVar1)();\n                        return uVar9;\n                    }\n                    *((iVar7 - auStack88._0_8_) + piVar8) = iStackX32;\n                    iStackX32 = iStackX32 + iVar13;\n                    piVar8 = piVar8 + 1;\n                } while (piVar8 != auStack88._8_8_);\n            }\n            *arg2 = iVar7;\n            uVar5 = uVar9;\n        }\n        fcn.18000618c(0);\ncode_r0x0001800074d8:\n        uVar10 = auStack88._8_8_ + (7 - auStack88._0_8_) >> 3;\n        if (auStack88._8_8_ < auStack88._0_8_) {\n            uVar10 = uVar9;\n        }\n        piVar8 = auStack88._0_8_;\n        if (uVar10 != 0) {\n            do {\n                fcn.18000618c(*piVar8);\n                uVar9 = uVar9 + 1;\n                piVar8 = piVar8 + 1;\n            } while (uVar9 != uVar10);\n        }\n        fcn.18000618c(auStack88._0_8_);\n        uVar5 = uVar5 & 0xffffffff;\n    }\n    return uVar5;\n}\n",
        "token_count": 1355
    },
    "180009bc": {
        "rules": [
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint8_t * fcn.180009bc8(uint8_t *arg1, uint8_t *arg2)\n\n{\n    uint *puVar1;\n    uint8_t *puVar2;\n    int64_t aiStack40 [2];\n    int64_t iStack24;\n    char cStack16;\n    \n    if ((arg1 == NULL) || (arg2 == NULL)) {\n        puVar1 = fcn.180007304();\n        *puVar1 = 0x16;\n        fcn.1800071e4();\n    }\n    else if (arg1 < arg2) {\n        fcn.18000635c(aiStack40, 0);\n        if (*(iStack24 + 8) == 0) {\n            arg2 = arg2 + -1;\n        }\n        else {\n            puVar2 = arg2 + -1;\n            do {\n                puVar2 = puVar2 + -1;\n                if (puVar2 < arg1) break;\n            } while ((*(*puVar2 + 0x19 + iStack24) & 4) != 0);\n            arg2 = arg2 + (-1 - (arg2 - puVar2 & 1));\n        }\n        if (cStack16 == '\\0') {\n            return arg2;\n        }\n        *(aiStack40[0] + 0x3a8) = *(aiStack40[0] + 0x3a8) & 0xfffffffd;\n        return arg2;\n    }\n    return NULL;\n}\n",
        "token_count": 330
    },
    "18000a72": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00018000a7bc)\n// WARNING: Removing unreachable block (ram,0x00018000a7c0)\n// WARNING: Removing unreachable block (ram,0x00018000a7c9)\n// WARNING: Removing unreachable block (ram,0x00018000a7d8)\n// WARNING: Removing unreachable block (ram,0x00018000a7dc)\n\nint32_t fcn.18000a728(void)\n\n{\n    int64_t *piVar1;\n    int64_t arg1;\n    int32_t iVar2;\n    int64_t *piVar3;\n    int32_t iStack52;\n    \n    iStack52 = 0;\n    fcn.180006984(8);\n    piVar1 = *0x180067f50 + *0x180067f48;\n    for (piVar3 = *0x180067f50; piVar3 != piVar1; piVar3 = piVar3 + 1) {\n        arg1 = *piVar3;\n        if (arg1 != 0) {\n            fcn.1800090a8(arg1);\n            if (((*(arg1 + 0x14) >> 0xd & 1) != 0) && (iVar2 = fcn.18000a6dc(arg1),  iVar2 != -1)) {\n                iStack52 = iStack52 + 1;\n            }\n            fcn.1800090b4(arg1);\n        }\n    }\n    fcn.1800069d8(8);\n    return iStack52;\n}\n",
        "token_count": 350
    },
    "18000c26": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nulong fcn.18000c26c(ulong arg1)\n\n{\n    uint *puVar1;\n    ulong uVar2;\n    uint32_t auStackX8 [2];\n    uchar auStackX16 [8];\n    uint32_t auStackX24 [2];\n    uint32_t auStackX32 [2];\n    uint32_t *apuStack24 [3];\n    \n    auStackX8[0] = arg1;\n    if (arg1 == 0xfffffffe) {\n        puVar1 = fcn.1800072e4();\n        *puVar1 = 0;\n        puVar1 = fcn.180007304();\n        *puVar1 = 9;\n    }\n    else {\n        if (((-1 < arg1) && (arg1 < *0x180067ef0)) &&\n           ((*(*((arg1 >> 6) * 8 + 0x180067af0) + 0x38 + (arg1 & 0x3f) * 0x40) & 1) != 0)) {\n            apuStack24[0] = auStackX8;\n            auStackX24[0] = arg1;\n            auStackX32[0] = arg1;\n            uVar2 = fcn.18000c1f8(auStackX16, auStackX32, apuStack24, auStackX24);\n            return uVar2;\n        }\n        puVar1 = fcn.1800072e4();\n        *puVar1 = 0;\n        puVar1 = fcn.180007304();\n        *puVar1 = 9;\n        fcn.1800071e4();\n    }\n    return 0xffffffff;\n}\n",
        "token_count": 377
    },
    "180010c1": {
        "rules": [
            "hash data using jshash/b1c33655e5b8435da69c7094541b75b8",
            "decompress data using LZO/119ff19994674493853a9d8636ba63bf"
        ],
        "decompiled_code": "\nint32_t fcn.180010c10(ulong arg1, ulong noname_1, ulong arg3)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint64_t uVar5;\n    int32_t iVar6;\n    uint32_t uVar7;\n    uint32_t uVar8;\n    uint32_t in_stack_00000028;\n    int32_t in_stack_00000030;\n    uint32_t *in_stack_00000040;\n    int32_t in_stack_00000048;\n    \n    uVar3 = in_stack_00000028;\n    uVar8 = in_stack_00000048 + 0xafc;\n    uVar1 = in_stack_00000028 + 0x185;\n    iVar2 = in_stack_00000030 + 0xf38;\n    uVar7 = in_stack_00000028 ^ 0xddc;\n    in_stack_00000028 = iVar2;\n    if (uVar1 == in_stack_00000030 - 0x555U) {\n        if (((arg1 ^ 0x1d88) - in_stack_00000040[0x19] < uVar1) &&\n           (uVar4 = arg3 + 0x32c9U ^ 0x3f1a,  in_stack_00000040[0x20] < uVar4 || in_stack_00000040[0x20] == uVar4)) {\n            uVar4 = in_stack_00000040[4] * in_stack_00000040[0x2b];\n            if (in_stack_00000040[0x2a] < uVar4) {\n                uVar5 = ((uVar4 - in_stack_00000040[0x2a]) - 1 >> 2) + 1;\n                do {\n                    iVar6 = -0x128b;\n                    if (((in_stack_00000040[0x13] & 0x3f1a) * 0x3c98 ^ 0x1763) != iVar2 * uVar8 - 0x82e) {\n                        if ((uVar7 | 0x3976) + 0x108a < (in_stack_00000040[0x1a] ^ uVar8) - 0x4e7) {\n                            iVar6 = (in_stack_00000040[0x2b] & 0xffffed75) - 0x128b;\n                        }\n                        else {\n                            in_stack_00000040[0x2a] = in_stack_00000040[0x2a] + in_stack_00000040[0x15] + 0x16f40a;\n                        }\n                    }\n                    iVar2 = iVar6 + 0xf42;\n                    uVar5 = uVar5 - 1;\n                    in_stack_00000028 = iVar2;\n                } while (uVar5 != 0);\n            }\n        }\n    }\n    else {\n        arg3._0_4_ = arg3 + -0x185;\n        in_stack_00000040[0x38] =\n             in_stack_00000040[0x38] + ((-0xddb7b - in_stack_00000040[0x1f]) - in_stack_00000040[0xf]);\n    }\n    if (in_stack_00000028 != uVar3 + 0xea7) {\n        if (uVar8 < arg3 + -0x939) {\n            if ((in_stack_00000040[0x13] == (in_stack_00000028 - 0x3cbe ^ in_stack_00000040[10])) &&\n               (uVar1 < in_stack_00000030 + 0x37bb)) {\n                uVar5 = (in_stack_00000030 + 0x37bb) - uVar1;\n                do {\n                    uVar7 = uVar1;\n                    if (*in_stack_00000040 * uVar1 < uVar1) {\n                        do {\n                            fcn.18000f580((*in_stack_00000040 & in_stack_00000030 + 0xf42U) * 0x2d60, \n                                          (in_stack_00000040[10] | uVar8) & in_stack_00000040[0x2b], uVar3 + 0x2495);\n                            uVar7 = uVar7 + 4;\n                        } while (*in_stack_00000040 * uVar1 < uVar7);\n                    }\n                    uVar5 = uVar5 - 1;\n                } while (uVar5 != 0);\n            }\n        }\n        else {\n            in_stack_00000040[0x35] = in_stack_00000040[0x15] + 0x1bf5bd;\n        }\n    }\n    return in_stack_00000028 + -0x141f;\n}\n",
        "token_count": 1094
    },
    "180001b4": {
        "rules": [
            "hash data using djb2/86fcf1c18148478ab58e8c52ba43c8d5",
            "hash data using jshash/2d43aa00ef9c47beadbc2522c99f9e7b"
        ],
        "decompiled_code": "\nuint64_t fcn.180001b40(int64_t arg1, uint16_t *arg2, ulong arg3, int64_t *arg4)\n\n{\n    char *pcVar1;\n    uint8_t *puVar2;\n    uint8_t uVar3;\n    uint16_t uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int64_t iVar7;\n    uint32_t uVar8;\n    int64_t *piVar9;\n    uint16_t *puVar10;\n    uint16_t uVar11;\n    uint64_t uVar12;\n    int64_t iVar13;\n    uint64_t uVar14;\n    uint64_t uVar15;\n    int32_t *piVar16;\n    int64_t iVar17;\n    uint64_t in_stack_00000028;\n    int32_t in_stack_00000030;\n    int64_t in_stack_00000038;\n    int64_t in_stack_00000040;\n    \n    uVar12 = *0x18006733c;\n    *0x180067318 = *0x180067318 + -1;\n    uVar4 = arg2[0x1e06];\n    uVar3 = *(in_stack_00000040 + *0x180067318 * 4);\n    iVar6 = *0x180067320 * 2;\n    piVar9 = *(*0x1800672e0 + 0x2ebc) ^ *0x180067324;\n    iVar17 = *(arg1 + *arg4 * 8);\n    *0x180067338 = *0x180067338 + 1;\n    uVar11 = *0x18006733c ^ 0x1e9d;\n    iVar13 = *(arg1 + *arg4 * 4) / *0x1800672bc;\n    uVar15 = *0x1800672b8;\n    uVar14 = uVar11;\n    iVar7 = *(*0x180067318 + in_stack_00000038) / *0x1800672bc;\n    *(iVar13 + *piVar9 * 8) = in_stack_00000028 - *(iVar13 + uVar14 * 8);\n    puVar2 = *piVar9 + 0x19 + (uVar4 ^ uVar12);\n    *puVar2 = *puVar2 | in_stack_00000030 + 1 ^ 0x46;\n    *0x1800672c0 = *(uVar11 * 8 + 0x162c) % *0x1800672c0;\n    *0x180067318 = *0x180067318 + -1;\n    *(arg1 + uVar14 * 4) = *(arg1 + uVar14 * 4) * *(*0x1800672d8 + *0x180067318 * 8);\n    *0x18006731c = fcn.18000de00(*(*0x180067310 + 0x26f0) / (in_stack_00000030 + 1), *(*arg2 + uVar15));\n    *0x1800672e8 = SUB162((ZEXT816(uVar3 - *(*0x180067308 + uVar11 * 0x20)) | 0x1e15) % ZEXT216(*0x1800672e8), 0);\n    iVar5 = *(*arg2 * 0x20 + 0x50 + *0x180067308);\n    uVar11 = uVar11 + 1;\n    iVar13 = uVar11 * 4;\n    if (*(iVar13 + iVar17) <= iVar5) {\n        piVar16 = arg1 + iVar5 * 4;\n        uVar12 = iVar5;\n        puVar10 = arg2 + 1;\n        do {\n            uVar14 = uVar11;\n            *piVar16 = iVar6 % *piVar16;\n            piVar16 = piVar16 + 1;\n            uVar11 = uVar11 + 1;\n            *0x1800672b4 = (uVar12 ^ in_stack_00000028) / *0x1800672b4;\n            pcVar1 = uVar14 * 4 + in_stack_00000038;\n            *pcVar1 = *pcVar1 + (*(*0x180067310 + *puVar10 * 4) - *(iVar13 + -0x15c4 + in_stack_00000028)) / 0x2a8;\n            uVar8 = uVar12 + 1;\n            *(*0x1800672c0 + iVar7) = (uVar12 & 0x3df) / *(*0x1800672c0 + iVar7);\n            iVar13 = uVar11 * 4;\n            uVar12 = uVar8;\n            puVar10 = puVar10 + -1;\n        } while (*(iVar13 + iVar17) <= uVar8);\n    }\n    return 0x3a7 % *0x180067320 & 0xffffffff;\n}\n",
        "token_count": 1113
    },
    "18000d38": {
        "rules": [
            "hash data using djb2/86fcf1c18148478ab58e8c52ba43c8d5",
            "hash data using jshash/2d43aa00ef9c47beadbc2522c99f9e7b"
        ],
        "decompiled_code": "\nulong fcn.18000d380(ulong noname_0, int64_t arg2, int64_t arg3, int64_t arg4)\n\n{\n    int16_t *piVar1;\n    uint16_t *puVar2;\n    int32_t *piVar3;\n    uint64_t *puVar4;\n    uint16_t uVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    int32_t iVar9;\n    uint64_t uVar10;\n    int32_t iVar11;\n    uint32_t uVar12;\n    int64_t *piVar13;\n    int64_t iVar15;\n    int64_t iVar16;\n    int64_t *piVar17;\n    int64_t *piVar18;\n    int64_t *piVar19;\n    uint64_t uVar20;\n    int64_t in_stack_00000028;\n    int64_t in_stack_00000030;\n    ushort in_stack_00000038;\n    unkbyte6 in_stack_0000003a;\n    uint64_t uVar14;\n    \n    iVar11 = *0x1800672b4;\n    uVar5 = *0x1800672b0;\n    iVar16 = *0x1800672b4;\n    uVar20 = noname_0;\n    piVar13 = *(in_stack_00000030 + 0x4430);\n    uVar12 = noname_0 + 1 & 0xff;\n    uVar14 = uVar12;\n    piVar19 = *(CONCAT62(in_stack_0000003a, in_stack_00000038) + *0x1800672ec * 4) % noname_0;\n    piVar17 = *0x1800672f0 + *(*0x1800672d8 + uVar12 * 0x10);\n    iVar15 = *0x180067318;\n    *0x180067318 = *0x180067318 + -1;\n    iVar6 = *(in_stack_00000028 + 0x3c5c);\n    uVar10 = *0x1800672e8;\n    iVar7 = *(in_stack_00000030 + 0x88 + *0x180067328 * 4);\n    iVar8 = *(*0x1800672e0 + *0x180067328 * 4);\n    iVar9 = *(in_stack_00000030 + *0x1800672c0 * 4);\n    *(arg2 + uVar20 * 2) =\n         SUB162(ZEXT816(*(uVar14 + 8 + *piVar13 * 0x10) * 0x110d - (*(in_stack_00000030 + 0x319c) ^ 0x1b38)) /\n                ZEXT216(*(arg2 + uVar20 * 2)), 0);\n    *0x180067338 = (*(uVar10 % iVar6 + *0x180067318 * 2 * 8) | *(piVar17 + *piVar13)) + *(iVar15 + *0x180067328 * 2);\n    *(uVar14 + (noname_0 + 4) * 8) = *0x1800672b4 - *(uVar14 + (noname_0 + 4) * 8);\n    *0x1800672b4 = *0x1800672b4 + -1;\n    *0x180067338 = *0x180067338 + -1;\n    if ((((*(CONCAT62(in_stack_0000003a, in_stack_00000038) + *0x180067338 * 4) < piVar19[noname_0 * 4]) ||\n         (piVar3 = in_stack_00000030 + 0x18 + iVar16 * 4,  *piVar3 == *0x1800672b4 || *piVar3 < *0x1800672b4)) ||\n        (*(arg4 + *0x180067318 * 2 * 8) < 0x11d6)) &&\n       (piVar18 = piVar17 + -1,  uVar10 = *(uVar14 + *0x180067300 * 8), \n       uVar10 < piVar19[*piVar17] || uVar10 == piVar19[*piVar17])) {\n        piVar3 = in_stack_00000030 + uVar20 * 4;\n        if ((*piVar3 == iVar11 || *piVar3 < iVar11) &&\n           (iVar15 = *piVar18,  piVar18 = piVar17 + -2,  uVar10 = *(iVar15 * 0x20 + arg4),  puVar4 = arg4 + *piVar19 * 8\n           ,  *puVar4 <= uVar10 && uVar10 != *puVar4)) {\n            iVar16 = iVar16 + 1;\n            piVar1 = arg2 + *piVar18 * 2;\n            *piVar1 = *piVar1 * ((noname_0 * 999 & uVar5) + 0x3a9);\n            piVar3 = in_stack_00000028 + *0x1800672ec * 4;\n            *piVar3 = *(in_stack_00000028 + *piVar19 * 4) - *piVar3;\n            piVar3 = *0x1800672f8 + uVar14 * 4;\n            *piVar3 = (*(arg3 + 8 + iVar16 * 2) + *(iVar9 + *piVar18 * 4)) / *piVar3;\n            uVar20 = uVar14;\n        }\n        puVar4 = uVar14 + *0x180067338 * 8;\n        *puVar4 = (*((iVar7 - iVar8) + 0x2990) + *(in_stack_00000030 + *0x1800672ec * 0x10)) / *puVar4;\n        *0x180067338 = *0x180067338 + -1;\n        uVar5 = *((*0x1800672c0 * 3 + 4) * 2 + 0x1867);\n        *(in_stack_00000028 + 0x4be8) =\n             *(in_stack_00000028 + 0x4be8) + (uVar5 + (uVar5 / 0x1ce6) * -0x1ce6 ^ *(in_stack_00000028 + iVar16 * 8));\n        *0x1800672c0 = *0x1800672c0 + 1;\n        puVar2 = arg2 + uVar20 * 2;\n        *puVar2 = *puVar2 | *0x1800672c8 ^ *0x1800672b8;\n        puVar2 = arg2 + *0x1800672ec * 2;\n        *puVar2 = *puVar2 ^ *(piVar13 + (*0x1800672ec + 0x23)) ^ *0x1800672bc * *0x180067330;\n        piVar13 = *piVar18 * 0x10 + *0x1800672d8;\n        *piVar13 = (*0x1800672b2 + (0xf0 - *0x1800672b4) * 0x6f8) - *piVar13;\n    }\n    else {\n        *0x1800672ec = *0x1800672ec - 1;\n        *0x1800672d0 = *0x180067300 - *0x1800672d0;\n    }\n    return 0x1799;\n}\n",
        "token_count": 1704
    },
    "18000de0": {
        "rules": [
            "hash data using djb2/86fcf1c18148478ab58e8c52ba43c8d5",
            "hash data using jshash/2d43aa00ef9c47beadbc2522c99f9e7b"
        ],
        "decompiled_code": "\nulong fcn.18000de00(int64_t arg1, int64_t *arg2)\n\n{\n    uint32_t *puVar1;\n    uint16_t *puVar2;\n    uint8_t uVar3;\n    uint8_t uVar4;\n    uint8_t uVar5;\n    uint8_t uVar6;\n    uint16_t uVar7;\n    int64_t iVar8;\n    int64_t iVar9;\n    int64_t iVar10;\n    uchar uVar11;\n    int32_t iVar12;\n    int32_t iVar13;\n    int32_t *piVar14;\n    uint64_t uVar15;\n    uint64_t uVar16;\n    uint64_t uVar17;\n    uint16_t uVar18;\n    uint32_t uVar19;\n    uint64_t *puVar20;\n    int64_t iVar21;\n    uint64_t uVar22;\n    uint32_t uVar23;\n    uint64_t uVar24;\n    uint64_t uVar25;\n    int64_t iVar26;\n    \n    uVar22 = *0x180067318;\n    uVar23 = *0x1800672c0 - 1;\n    iVar26 = *0x18006733c;\n    uVar3 = *(*0x180067300 + arg1);\n    iVar8 = arg2[*arg2 * 3];\n    piVar14 = *0x1800672c8 + 1;\n    uVar15 = *0x1800672b2;\n    uVar7 = *(arg2 + uVar23 + 1);\n    uVar18 = *0x180067328;\n    *0x180067328 = *0x180067328 + -1;\n    iVar21 = *(arg1 + 0x1178) - 0x1d4e;\n    *0x1800672c0 = uVar23;\n    *0x1800672c8 = piVar14;\n    arg2[1] = arg2[1] + 1;\n    iVar13 = *0x180067320;\n    uVar4 = *(arg2[1] + arg1);\n    iVar12 = *(*0x1800672e0 + 4 + arg2[1] * 4);\n    uVar19 = *0x1800672b8;\n    iVar9 = arg2[*0x1800672ec + 1];\n    *0x180067300 = *0x180067300 + -1;\n    uVar5 = *(arg2 + *0x180067300 * 4 + 1);\n    arg2[1] = arg2[1] + -1;\n    uVar16 = iVar13 / uVar19 & 0xffffffff;\n    *0x1800672d0 = *0x1800672d0 + -1;\n    uVar24 = arg2[*0x180067318 * 3 + 0x26 + 1];\n    uVar25 = *(*0x1800672ec + arg1);\n    iVar13 = *(*0x1800672f8 + 0x4c + arg2[1] * 4);\n    uVar17 = arg2[*0x1800672d0 * 3 + 0xb];\n    *0x180067318 = *0x180067318 + 1;\n    iVar10 = arg2[0xc99];\n    uVar6 = *(*0x180067318 * 2 + arg1);\n    puVar1 = iVar26 + uVar25 * 4;\n    if (((*puVar1 != *(uVar25 + arg1) && *(uVar25 + arg1) <= *puVar1) &&\n        (arg2[1] = arg2[1] + 1, \n        uVar17 = *(arg2[1] + 0x1e + SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x1edb)) / ZEXT816(uVar17), 0)), \n        uVar17 <= arg2[(uVar23 & 0xff) + 1] && arg2[(uVar23 & 0xff) + 1] != uVar17)) ||\n       (uVar16 = uVar16 + 1,  uVar6 == uVar16)) {\n        *0x1800672b0 = *(*0x1800672e0 + uVar25 * 4) - *0x1800672b0;\n        *0x1800672c4 = *(uVar25 + iVar8);\n    }\n    if ((*0x180067318 < *0x180067324) || (uVar24 <= (uVar16 & 0xffff))) {\n        arg2[1] = arg2[1] + 1;\n        *0x18006733c = *0x18006733c & (*(arg2 + *piVar14 + 1) + *(arg2 + arg2[1] + 1)) - uVar5;\n        uVar24 = *0x1800672ec;\n        *0x1800672ec = *0x1800672ec + 1;\n        iVar12 = fcn.1800029c0(*(arg1 + 0xfd9) | 0x1849, *(*0x180067308 + uVar25 * 8), *(iVar8 + 0x1d56) ^ 0x311, uVar24\n                              );\n        iVar13 = *0x1800672b0 * *0x18006731c;\n        *0x18006731c = *0x18006731c + -1;\n        *0x180067338 = iVar13 % *(iVar9 + (uVar7 ^ uVar18) * 8) - *0x180067338;\n        uVar11 = fcn.180002000(arg2[0xfa3], 0x405, iVar12 + -1, *(*piVar14 * 8 + *0x1800672d8));\n        *(uVar3 + *arg2 * 2) = uVar11;\n    }\n    else {\n        uVar24 = *0x1800672c0;\n        if (*0x1800672c0 != *(iVar21 + arg2[1] * 8)) {\n            puVar20 = (iVar12 - uVar4) + uVar24 * 8;\n            do {\n                uVar19 = uVar24 + 1;\n                uVar24 = uVar19;\n                *puVar20 = SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x11d7)) / ZEXT816(*puVar20), 0);\n                puVar20 = puVar20 + 1;\n            } while (uVar19 != *(iVar21 + arg2[1] * 8));\n        }\n        puVar1 = (iVar13 | 0x1c2eU) + *0x180067318 * 3 * 4;\n        *puVar1 = *puVar1 ^ *((uVar22 ^ uVar15) + arg2[1] * 2);\n        *0x1800672f4 = *0x1800672f4 + 1;\n        *0x1800672c8 = *0x1800672c8 + 1;\n        puVar2 = iVar10 + *0x180067338 * 4 * 2;\n        *puVar2 = SUB162(ZEXT816(*0x1800672f4 ^ *0x1800672c8) % ZEXT216(*puVar2), 0);\n    }\n    return 0x1778;\n}\n",
        "token_count": 1676
    },
    "1800023d": {
        "rules": [
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353"
        ],
        "decompiled_code": "\nint32_t fcn.1800023d0(ulong arg1, ulong noname_1, int32_t *arg3, ulong arg4)\n\n{\n    uint64_t uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint32_t in_stack_00000028;\n    int32_t in_stack_00000038;\n    \n    uVar4 = arg4 - 0x2879;\n    if (in_stack_00000038 - 0x3f1aU == (arg1 + 0xa50U ^ 0xdd3)) {\n        if (((uVar4 <= (arg3[4] - (in_stack_00000038 + -0x108a) ^ in_stack_00000028 ^ 0x1711)) &&\n            (arg3[4] <= arg3[0x35] * 0x3feb)) && (uVar3 = (*arg3 + arg4 + 0x4e7) * uVar4,  uVar4 <= uVar3)) {\n            iVar2 = arg3[10];\n            uVar1 = (uVar3 - uVar4) / 3 + 1;\n            do {\n                iVar2 = iVar2 - (arg3[0x15] ^ uVar4);\n                uVar1 = uVar1 - 1;\n            } while (uVar1 != 0);\n            arg3[10] = iVar2;\n        }\n    }\n    else if (arg1 + 0xa50U <= arg4 + 0xa50) {\n        fcn.18000d2e0(in_stack_00000038 - 0x16b7, arg3, (arg4 ^ 0x1763) - 0x5a8);\n        arg3[0x29] = arg3[0x29] * (arg3[4] + -0xfae45);\n        arg3[0x35] = (arg3[0x35] + -0x227fbc + arg3[2]) * arg3[0x35];\n        return arg1 + 0x16a1;\n    }\n    return arg1 + 0x16a1;\n}\n",
        "token_count": 490
    },
    "18000283": {
        "rules": [
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353"
        ],
        "decompiled_code": "\nuint32_t fcn.180002830(int64_t arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    int32_t in_stack_00000028;\n    int32_t in_stack_00000030;\n    int32_t in_stack_00000040;\n    \n    uVar2 = arg4 ^ 0x1fd4;\n    if (arg2 - 0xd20 == in_stack_00000028 + -0x110f) {\n        if (((arg2 ^ 0x18e3) != (arg4 ^ 0x1927)) && (arg2 - 0xd20 != arg2 - 0x6f3)) {\n            iVar1 = (arg2 ^ 0x18e3) + 0x5a7;\n            *(arg1 + 0xb0) = *(arg1 + 0xb0) + (0x17ee92 - (*(arg1 + 0x5c) ^ *(arg1 + 8)));\n            if (((arg2 ^ 0x93d) + 0x25c < iVar1) &&\n               (uVar2 + 0xae6 != (arg2 - 0xd78) + (in_stack_00000040 - 0x9b7U ^ *(arg1 + 0x2c)))) {\n                *(arg1 + 0xe0) = *(arg1 + 0xe0) + in_stack_00000028 + -0x66b + iVar1;\n            }\n            *(arg1 + 0xc) = 0x337ee1c0;\n            *(arg1 + 4) = *(arg1 + 0xa8) + 0xd72485c;\n        }\n    }\n    else if (uVar2 <= in_stack_00000030 * 0x3c98 + -0xbec690 + *(arg1 + 0xa8)) {\n        fcn.18000f350(*(arg1 + 0x10) & arg2 - 0x43f, 0, arg1, (in_stack_00000028 + -0x20e) * 0x3feb);\n        (*_sym.imp.KERNEL32.dll_ActivateActCtx)\n                  ((*(arg1 + 0xe0) ^ uVar2) * (in_stack_00000040 + -0x3cbe), (*(arg1 + 0xac) & *(arg1 + 0x28)) * 0x3307)\n        ;\n    }\n    return arg3 - 0x3144U ^ 0x280b;\n}\n",
        "token_count": 577
    },
    "18000e6e": {
        "rules": [
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353"
        ],
        "decompiled_code": "\nint32_t fcn.18000e6e0(uint32_t *lpStartAddress, ulong arg2, ulong arg3)\n\n{\n    uint uVar1;\n    uint32_t uVar2;\n    int64_t iVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    int64_t iVar6;\n    int32_t in_stack_00000028;\n    uint32_t in_stack_00000040;\n    \n    if (in_stack_00000040 == arg2 - 0x613U) {\n        if (lpStartAddress[0x2a] == (in_stack_00000028 - 0x143fU & 0x32c9)) {\n            (*_sym.imp.KERNEL32.dll_CreateFiber)\n                      (lpStartAddress[0x18] ^ in_stack_00000040 - 0x2863 | 0x3c98, \n                       lpStartAddress[0x34] * lpStartAddress[0xb] ^ arg3, lpStartAddress[4] - 0x3ca2 | 0x3764);\n        }\n        else {\n            (*_sym.imp.KERNEL32.dll_GetSystemDirectoryA)();\n            iVar4 = fcn.18000f580(*lpStartAddress * 0x3cbe ^ lpStartAddress[0x15], \n                                  lpStartAddress[0x38] * 0x2e90 ^ 0x2d60, \n                                  lpStartAddress[0x38] & in_stack_00000040 - 0x2863 & 0x3583);\n            lpStartAddress[6] = lpStartAddress[6] * (iVar4 + -0x3972);\n        }\n    }\n    else {\n        iVar3 = 0;\n        *(lpStartAddress + 0x22) = 0x180050af0;\n        iVar6 = 0;\n        do {\n            iVar4 = *(iVar6 + *(lpStartAddress + 0x22));\n            iVar6 = iVar6 + 4;\n            lpStartAddress[0x15] = lpStartAddress[0x15] - lpStartAddress[0x1f];\n            iVar4 = iVar4 * lpStartAddress[0x11];\n            *(lpStartAddress[0x12] + *(lpStartAddress + 0x24)) = iVar4 >> 8;\n            lpStartAddress[0x12] = lpStartAddress[0x12] + 1;\n            lpStartAddress[10] = lpStartAddress[10] + lpStartAddress[0x1f];\n            *(lpStartAddress[0x12] + *(lpStartAddress + 0x24)) = iVar4;\n            lpStartAddress[0x12] = lpStartAddress[0x12] + 1;\n            lpStartAddress[0x19] = lpStartAddress[0x19] * (lpStartAddress[0x38] + 0xe16d9c2d);\n            lpStartAddress[0x2a] = lpStartAddress[0x2a] ^ lpStartAddress[0x17] + (lpStartAddress[6] - 0x370c8);\n            lpStartAddress[2] = lpStartAddress[2] - lpStartAddress[0x1f];\n            lpStartAddress[0x19] = lpStartAddress[0x19] + lpStartAddress[0x35] + 0x5b0811c;\n        } while (iVar6 < 0x30c0);\n        if ((arg3 + 0x823 ^ 0x684) - 0x477 < arg3 - 0x4fd) {\n            if (lpStartAddress[0xb] != (in_stack_00000040 ^ 0x860 | 0x3307)) {\n                (*_sym.imp.KERNEL32.dll_SwitchToFiber)();\n                lpStartAddress[4] = lpStartAddress[4] * ((lpStartAddress[0x38] - in_stack_00000040) + 0x2863);\n            }\n        }\n        else {\n            lpStartAddress[0x11] = -(lpStartAddress[0x13] ^ lpStartAddress[0xf]) - 0xbd396 ^ 0x1a1ba787;\n        }\n        *(lpStartAddress + 0x22) = 0x18004db00;\n        uVar2 = lpStartAddress[0xb];\n        do {\n            uVar1 = *(iVar3 + *(lpStartAddress + 0x22));\n            iVar3 = iVar3 + 4;\n            lpStartAddress[6] = lpStartAddress[6] * (lpStartAddress[10] + uVar2 ^ 0x1460a6);\n            lpStartAddress[0x2b] = lpStartAddress[0x2b] | lpStartAddress[0x2a] - 0x17e8de;\n            lpStartAddress[0x2a] = lpStartAddress[0x2a] ^ lpStartAddress[10] - 0x75c33;\n            lpStartAddress[2] = lpStartAddress[2] + lpStartAddress[0xf] + 0x10d2eb;\n            uVar2 = (lpStartAddress[0x35] - lpStartAddress[0x38]) + 0x2442e4f0 ^ lpStartAddress[2];\n            uVar5 = lpStartAddress[0x2a] - (lpStartAddress[0x13] + lpStartAddress[0xf] ^ 0xffef2d16);\n            lpStartAddress[2] = (uVar2 - 0x17ff64) * uVar2;\n            lpStartAddress[0x2a] = uVar5;\n            lpStartAddress[4] = lpStartAddress[4] + lpStartAddress[0x15] + 0xfe4878ae;\n            lpStartAddress[0x35] = lpStartAddress[0x35] ^ lpStartAddress[0x1f];\n            *lpStartAddress = *lpStartAddress ^ uVar5 - 0x17e8de;\n            *(lpStartAddress[0x12] + *(lpStartAddress + 0x24)) = uVar1 * lpStartAddress[0x11];\n            lpStartAddress[0x12] = lpStartAddress[0x12] + 1;\n            uVar2 = lpStartAddress[0xb];\n            lpStartAddress[6] = (lpStartAddress[6] - 0x10753b) + uVar2 ^ lpStartAddress[6];\n            lpStartAddress[0x19] = lpStartAddress[0x19] + ((0x1e99c007 - lpStartAddress[0x38]) - lpStartAddress[10]);\n            uVar5 = lpStartAddress[0x35] * (lpStartAddress[0x13] ^ lpStartAddress[0xf] ^ 0xffef2d15);\n            lpStartAddress[0x35] = uVar5;\n            lpStartAddress[0x35] = lpStartAddress[0x38] + 0xe16d9c2c | uVar5;\n        } while (iVar3 < 0x2f70);\n    }\n    return in_stack_00000028 + 0x349;\n}\n",
        "token_count": 1600
    },
    "18001063": {
        "rules": [
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353"
        ],
        "decompiled_code": "\nint32_t fcn.180010630(ulong noname_0, ulong arg2, int64_t arg3, ulong arg4)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int32_t in_stack_00000028;\n    int32_t in_stack_00000030;\n    uint32_t in_stack_00000038;\n    \n    uVar1 = arg2 - 0x3144;\n    if (in_stack_00000028 + -0xa66 < (arg4 ^ 0xfb9) - 0x1c) {\n        if (uVar1 <= arg4 - 0x477) {\n            *(arg3 + 0x10) = *(arg3 + 0x5c) ^ *(arg3 + 0x10) ^ 0xfae4b;\n            fcn.18000dbd0(in_stack_00000030 - 0x82e, arg3, arg2 - 0x939);\n            *(arg3 + 0xb0) = *(arg3 + 0xb0) + (*(arg3 + 0x3c) - *(arg3 + 0xac)) + 0x1455de;\n            return (in_stack_00000038 ^ 0xbbb) + 0x679;\n        }\n    }\n    else if (((*(arg3 + 0xac) ^ *(arg3 + 0x4c) ^ *(arg3 + 0x2c)) < uVar1) &&\n            (uVar3 = (arg4 ^ 0xfb9) * (arg4 + 0x991),  uVar1 != uVar3)) {\n        iVar2 = *(arg3 + 0xa8);\n        do {\n            iVar2 = iVar2 + (in_stack_00000038 - 0x32c9 ^ 0x3307);\n            uVar1 = uVar1 + 3;\n        } while (uVar1 != uVar3);\n        *(arg3 + 0xa8) = iVar2;\n    }\n    return (in_stack_00000038 ^ 0xbbb) + 0x679;\n}\n",
        "token_count": 477
    },
    "180010a9": {
        "rules": [
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4",
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353"
        ],
        "decompiled_code": "\nint32_t fcn.180010a90(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint32_t *in_stack_00000030;\n    uint32_t in_stack_00000038;\n    uint32_t in_stack_00000048;\n    \n    arg2._0_4_ = arg2 ^ 0xcf5;\n    uVar1 = in_stack_00000038 - 0x3c98;\n    uVar2 = arg3 - 0x3feb;\n    if ((arg1 ^ 0xf1) - 0x1788 < (in_stack_00000038 ^ 0x3c98)) {\n        if ((uVar2 != in_stack_00000030[0x38] + 0x32c9) && ((arg2 ^ uVar2) < uVar2)) {\n            (*_sym.imp.KERNEL32.dll_CreateThread)\n                      (arg2 ^ 0x3583, arg2 * (in_stack_00000048 ^ 0x56b), in_stack_00000030[0x35] & uVar1, \n                       (*in_stack_00000030 & uVar1) + in_stack_00000030[0x34], in_stack_00000030[5] & 0x3976, \n                       (arg1 ^ 0xf1 | 0x2879) - 0x3144);\n        }\n    }\n    else if (uVar1 != arg2 + 0xa68) {\n        in_stack_00000030[10] = in_stack_00000030[10] | (in_stack_00000030[0x2b] ^ in_stack_00000030[6]) + 0x1fabc;\n    }\n    return arg3;\n}\n",
        "token_count": 404
    },
    "18000d93": {
        "rules": [
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43",
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a"
        ],
        "decompiled_code": "\nuint32_t fcn.18000d930(ulong arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    uint32_t uVar1;\n    ulong uVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    int32_t *in_stack_00000030;\n    int32_t in_stack_00000038;\n    int32_t in_stack_00000040;\n    uint32_t in_stack_00000048;\n    ulong var_b7ah;\n    \n    uVar4 = in_stack_00000048 ^ 0x3cbe;\n    uVar3 = arg4 + 0x348;\n    uVar6 = in_stack_00000040 - 0x620;\n    uVar5 = in_stack_00000038 - 0x32c;\n    if (arg3 + 0x32c < uVar5) {\n        uVar1 = in_stack_00000030[0x19];\n        if (in_stack_00000030[0x2b] * uVar1 < uVar4) {\n            uVar5 = (uVar1 ^ uVar5) - in_stack_00000030[0x2a];\n            if (uVar4 < uVar5) {\n                uVar3 = uVar3 + (((uVar5 - uVar4) - 1) / 3 + 1) * (in_stack_00000030[10] | uVar4);\n            }\n        }\n        else {\n            *in_stack_00000030 = *in_stack_00000030 + in_stack_00000030[0x15] * in_stack_00000030[2] * 0x3feb;\n            in_stack_00000030[0x38] = in_stack_00000030[0x38] + (uVar4 ^ in_stack_00000030[0x16]);\n            if ((arg2 ^ 0x1a ^ in_stack_00000030[0x16]) < uVar4) {\n                in_stack_00000030[6] =\n                     in_stack_00000030[6] | (in_stack_00000030[0x18] & 0x2863U) - in_stack_00000030[0x38];\n                fcn.18000e2c0(uVar1 & uVar6, in_stack_00000030[0xb] ^ arg4 - 0x3976U ^ 0x3972, arg1 + -0x39c2 + uVar6);\n            }\n        }\n    }\n    else {\n        in_stack_00000030[0x2c] = in_stack_00000030[0x2c] - (in_stack_00000030[0x2b] ^ 0x1448feU);\n        fcn.180010750(arg4 - 0x3976U ^ 0x2e90, uVar6 ^ 0x836, in_stack_00000030, in_stack_00000048 ^ 0xbda);\n        fcn.1800023d0(arg4 - 0x10fd, uVar4 + 0x32c9, in_stack_00000030, uVar5 ^ 0x110f);\n        uVar4 = arg3 - 0x1113U ^ 0x1115;\n        fcn.18000f580(arg4 - 0x832, uVar6 ^ 0xde6, in_stack_00000040 + 0x55a);\n        uVar2 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)\n                          (0, in_stack_00000030[0xd], in_stack_00000030[0x38] + -0x1e9233d4, \n                           in_stack_00000030[2] + -0x17ff25, uVar4);\n        uVar3 = uVar3 ^ 0x355;\n        *(in_stack_00000030 + 0x26) = uVar2;\n        uVar4 = in_stack_00000030[0x2a] ^ in_stack_00000030[0x1f] ^ 0x1fb5d9;\n        in_stack_00000030[0x12] = uVar4;\n        in_stack_00000030[0x2b] = in_stack_00000030[0x2b] | 0x31e7b;\n        in_stack_00000030[0x12] = in_stack_00000030[0x35] + 0x5bb4d6fU ^ uVar4;\n    }\n    return uVar3 ^ 0x17e0;\n}\n",
        "token_count": 1044
    },
    "18000dbd": {
        "rules": [
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43",
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a"
        ],
        "decompiled_code": "\nint32_t fcn.18000dbd0(ulong arg1, int64_t arg2, ulong arg3)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint64_t uVar3;\n    int32_t in_stack_00000028;\n    uint32_t in_stack_00000030;\n    \n    uVar2 = arg3 ^ 0x72;\n    arg3._0_4_ = arg3 ^ 0x1711;\n    if ((in_stack_00000028 - 0xb54U ^ 0x832) < arg3) {\n        *(arg2 + 0xa8) = *(arg2 + 0xa8) + 0xf4a9;\n    }\n    else if ((*(arg2 + 0x4c) == *(arg2 + 0x3c) - uVar2) && (uVar1 = (in_stack_00000030 ^ 0x69b) & arg3,  uVar2 <= uVar1)\n            ) {\n        uVar3 = (uVar1 - uVar2 >> 1) + 1;\n        do {\n            fcn.180002830(arg2, (*(arg2 + 0xac) | arg3) + 0x280b, *(arg2 + 0x10) + *(arg2 + 0xe0), \n                          (in_stack_00000030 ^ 0x69b) * (in_stack_00000028 - 0xb54U) | *(arg2 + 0xa8));\n            uVar3 = uVar3 - 1;\n        } while (uVar3 != 0);\n        return in_stack_00000028 + -0x991;\n    }\n    return in_stack_00000028 + -0x991;\n}\n",
        "token_count": 395
    },
    "18000edd": {
        "rules": [
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43",
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a"
        ],
        "decompiled_code": "\nuint64_t fcn.18000edd0(int64_t arg1, int64_t arg2, uint16_t *arg3, uint8_t *arg4)\n\n{\n    uint8_t *puVar1;\n    int32_t *piVar2;\n    uint8_t uVar3;\n    int32_t iVar4;\n    int32_t *piVar5;\n    uint16_t uVar6;\n    uint8_t uVar7;\n    uint8_t uVar8;\n    uint32_t uVar9;\n    int64_t iVar10;\n    uint64_t uVar11;\n    int64_t iVar12;\n    uint16_t uVar13;\n    uint32_t uVar14;\n    int64_t *piVar15;\n    int32_t iVar16;\n    uint64_t uVar17;\n    int16_t iVar18;\n    uint16_t uVar19;\n    int32_t iVar20;\n    uint8_t uVar21;\n    int32_t iVar22;\n    uint64_t uVar23;\n    uint64_t uVar24;\n    int64_t iVar25;\n    uint16_t uVar26;\n    int64_t in_stack_00000028;\n    int64_t in_stack_00000030;\n    int64_t in_stack_00000040;\n    int64_t in_stack_00000048;\n    uchar in_stack_00000050;\n    unkbyte7 in_stack_00000051;\n    int64_t in_stack_00000058;\n    uint16_t in_stack_00000060;\n    \n    uVar6 = *0x1800672b8;\n    uVar9 = *0x1800672b8;\n    piVar5 = CONCAT71(in_stack_00000051, in_stack_00000050);\n    uVar3 = arg4[*0x180067318];\n    iVar16 = uVar3 * 0x3ae33f81 >> 0x20;\n    iVar18 = *0x1800672b0 + 1;\n    uVar26 = *(in_stack_00000058 + (*piVar5 + 4) * 8);\n    iVar10 = *0x18006733c;\n    iVar4 = *0x1800672c0 / 0xdd1;\n    iVar22 = *(in_stack_00000048 + *arg4 * 0x10);\n    *0x1800672d0 = *0x1800672d0 - 1;\n    uVar7 = *(in_stack_00000028 + *0x1800672d0 * 0x10) & *0x1800672b4;\n    uVar11 = *0x1800672b2;\n    uVar17 = *(in_stack_00000030 + *0x180067318 * 8) % *0x1800672ec;\n    iVar25 = *(*0x1800672f8 + 0x74e8) - piVar5[*arg3];\n    uVar14 = *0x180067324;\n    iVar12 = *(arg2 + 0x12 + *0x180067328 * 2) + *0x1800672c8;\n    uVar8 = *(piVar5 + *arg3) ^ 200;\n    uVar24 = *(arg2 + 0x2ae);\n    puVar1 = uVar14 * in_stack_00000060 + *0x1800672c0;\n    *0x1800672b0 = iVar18;\n    *puVar1 = *puVar1 ^ *(iVar25 + *0x1800672c8 * 4) ^ *0x180067338 + 0x9fU;\n    *0x180067338 = *(*0x180067310 + 0x4c + uVar8 * 4);\n    uVar23 = uVar8 + 1;\n    uVar21 = uVar8 + 2;\n    *0x1800672d0 = *0x1800672d0 | *(in_stack_00000040 + uVar8 * 4) ^ iVar18 ^ iVar4;\n    *(uVar23 + iVar12) =\n         SUB161(ZEXT816(*(iVar10 + uVar26 * 4 * 8) |\n                        SUB168((ZEXT816(0) << 0x40 | ZEXT816(0xdd4)) % ZEXT816(*0x1800672d0), 0)) /\n                ZEXT116(*(*arg3 + uVar24)), 0);\n    *arg3 = *arg3 - 1;\n    iVar20 = iVar22 + -1;\n    piVar2 = arg1 + (*0x180067338 * 2 + 2) * 4;\n    *piVar2 = *piVar2 + (piVar5[iVar22] + (*0x180067328 | uVar9) ^ *(*0x180067308 + *arg3 * 8));\n    arg3[uVar23] = *(arg1 + uVar26 * 4) - arg3[uVar23];\n    *0x180067318 = *0x180067318 +\n                   *(uVar3 + ((uVar3 - iVar16 >> 1) + iVar16 >> 10) * -0x681 + *0x1800672c0 * 4) /\n                   *(*piVar5 + 3 + uVar24);\n    iVar16 = *0x180067338 + 1;\n    *0x180067328 = (*0x180067338 + uVar26) * iVar4 * 0x1a92 - *0x180067328;\n    uVar26 = uVar26 - 1;\n    iVar22 = piVar5[*0x180067338 + 0x27];\n    *0x180067338 = iVar16;\n    if (iVar22 <= iVar16) {\n        do {\n            iVar22 = iVar22 + 1;\n            uVar26 = *0x1800672bc - uVar26;\n            puVar1 = uVar14 * in_stack_00000060 + (*arg3 + 6) * 3;\n            *puVar1 = *puVar1 | (0xff9 - *(*0x1800672f8 + 0x5434)) / *(in_stack_00000040 + iVar20 * 4);\n        } while (iVar22 <= *0x180067338);\n    }\n    uVar23 = *(in_stack_00000040 + *0x180067338 * 4);\n    if (uVar23 != *(*0x1800672d8 + 0x1550)) {\n        do {\n            *piVar5 = *piVar5 + -1;\n            uVar9 = uVar23 + 1;\n            uVar23 = uVar9;\n            puVar1 = *piVar5 + iVar12;\n            *puVar1 = *puVar1 ^ 0x10;\n            uVar13 = *0x1800672b8 * 0x1119;\n            *0x1800672b8 = *0x1800672b8 + 1;\n            uVar19 = iVar20;\n            iVar20 = iVar20 + -1;\n            *0x180067324 = *0x180067324 ^ (uVar13 | uVar19) + uVar6;\n            *(uVar21 + uVar17) =\n                 SUB161((ZEXT816(0) << 0x40 |\n                        (ZEXT816(0) << 0x40 | ZEXT816(*0x180067328) / ZEXT816(*0x180067338) & 0xffffffffffffffff) %\n                        ZEXT116(*(uVar24 + 0x1cc2)) & 0xffffffffffffffff) / ZEXT116(uVar7), 0) - *(uVar21 + uVar17);\n            *0x180067338 = *0x180067338 + -1;\n            *(in_stack_00000058 + *0x1800672c0 * 8) = in_stack_00000060;\n            uVar21 = uVar21 + (*(piVar5 + *0x180067318) & iVar20) * uVar26;\n            uVar7 = uVar7 - 1;\n        } while (uVar9 != *(*0x1800672d8 + 0x1550));\n    }\n    iVar22 = *(in_stack_00000058 + (*piVar5 + 8) * 8);\n    uVar24 = iVar22;\n    if (iVar22 <= *0x180067318) {\n        piVar15 = iVar10 + uVar24 * 8;\n        do {\n            iVar22 = uVar24;\n            uVar9 = iVar22 + 1;\n            uVar24 = uVar9;\n            *piVar15 = 0xf52 - *piVar15;\n            *0x1800672f0 = SUB164((ZEXT816(0) << 0x40 |\n                                  ZEXT816(*(piVar15 + (in_stack_00000030 - iVar10)) ^ iVar22) / ZEXT816(uVar26) &\n                                  0xffffffffffffffff) / ZEXT816(*0x1800672f0), 0);\n            *0x180067338 = (*(iVar25 + uVar21 * 4) | *(in_stack_00000058 + uVar26 * 8)) % *0x180067338;\n            piVar15 = piVar15 + 1;\n        } while (uVar9 <= *0x180067318);\n    }\n    return *(in_stack_00000028 + (iVar20 + -1) * 3 * 4) % *(uVar11 + uVar26 * 0x10) & 0xffffffff;\n}\n",
        "token_count": 2122
    },
    "18000262": {
        "rules": [
            "hash data using murmur3/51beaa2d5a2f415db2ae4fc8ef819b72/938ec34b87fc49598ca2362852471498"
        ],
        "decompiled_code": "\nint32_t fcn.180002620(ulong arg1, ulong noname_1, int32_t *arg3, ulong arg4)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int64_t iVar4;\n    uint32_t in_stack_00000030;\n    uint32_t in_stack_00000040;\n    int32_t in_stack_00000048;\n    \n    uVar1 = in_stack_00000048 + 0x685;\n    if ((arg4 ^ 0x1792) < uVar1) {\n        if ((arg4 ^ 0x1792) < in_stack_00000040 - 0x16b7) {\n            for (iVar2 = *arg3; iVar2 == arg3[0x1f] * 0x3ca2; iVar2 = iVar2 + 2) {\n                iVar3 = arg3[0x13];\n                if (iVar3 != uVar1 + 0x3ca2) {\n                    do {\n                        if (in_stack_00000040 <= arg3[0x38] && arg3[0x38] != in_stack_00000040) {\n                            uVar1 = uVar1 | (arg3[0x17] - arg3[10]) + 0x3cbeU | (arg3[2] & arg3[0x20]) - 0x2d60U;\n                            arg3[0x20] = (arg3[0xf] - *arg3) + arg1 + 0x55a | arg3[0x20];\n                        }\n                        iVar3 = iVar3 + 4;\n                    } while (iVar3 != uVar1 + 0x3ca2);\n                }\n            }\n        }\n        else {\n            iVar4 = 0;\n            do {\n                iVar2 = *(iVar4 + *(arg3 + 0x22));\n                iVar4 = iVar4 + 4;\n                arg3[0x17] = arg3[0x17] + (arg3[2] + arg3[0x19] ^ 0x359eb7U);\n                arg3[0x2a] = arg3[0x2a] + (0xd0474 - arg3[0xb]);\n                arg3[0x15] = arg3[0x15] + (0x175eff - arg3[0x2b]);\n                arg3[0x2b] = (arg3[0x38] - arg3[4]) + 0xe17d4a77U ^ arg3[0x2b];\n                arg3[0x35] = arg3[0x35] + arg3[4] + -0xfae4b;\n                iVar2 = iVar2 * arg3[0x11];\n                arg3[0x1f] = arg3[0x1f] + *arg3 + -1;\n                *(arg3[0x12] + *(arg3 + 0x24)) = iVar2 >> 0x10;\n                arg3[0x12] = arg3[0x12] + 1;\n                *(arg3[0x12] + *(arg3 + 0x24)) = iVar2 >> 8;\n                arg3[0x12] = arg3[0x12] + 1;\n                *(arg3[0x12] + *(arg3 + 0x24)) = iVar2;\n                arg3[0x12] = arg3[0x12] + 1;\n            } while (iVar4 < 0x12490);\n            fcn.18000d740(arg1 - 0x620, in_stack_00000040 - 0x5a8, in_stack_00000040 - 0x16a1, \n                          in_stack_00000040 - 0x16a1);\n        }\n    }\n    if ((arg4 ^ 0x128b) < (in_stack_00000030 ^ 0x1b13)) {\n        *(arg3 + 0x22) = 0x18004d0f0;\n    }\n    return uVar1 + 0x108a;\n}\n",
        "token_count": 927
    },
    "18000556": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x000180005460)\n// WARNING: Removing unreachable block (ram,0x00018000535e)\n// WARNING: Removing unreachable block (ram,0x00018000536b)\n// WARNING: Removing unreachable block (ram,0x000180005375)\n// WARNING: Removing unreachable block (ram,0x000180005384)\n// WARNING: Removing unreachable block (ram,0x00018000538f)\n// WARNING: Removing unreachable block (ram,0x000180005398)\n// WARNING: Removing unreachable block (ram,0x0001800053a0)\n// WARNING: Removing unreachable block (ram,0x00018000541b)\n// WARNING: Removing unreachable block (ram,0x000180005420)\n// WARNING: Removing unreachable block (ram,0x000180005480)\n\nvoid fcn.180005564(void)\n\n{\n    uint8_t uVar1;\n    uint8_t uVar2;\n    code *pcVar3;\n    \n    fcn.180006984(2);\n    if (*0x180067560 == '\\0') {\n        *0x180067550 = 1;\n        uVar2 = *0x1800669a0 & 0x3f;\n        uVar1 = 0x40 - uVar2 & 0x3f;\n        if (*0x180067558 != ((0 >> uVar1 | 0 << 0x40 - uVar1) ^ *0x1800669a0)) {\n            pcVar3 = (*0x1800669a0 ^ *0x180067558) >> uVar2 | (*0x1800669a0 ^ *0x180067558) << 0x40 - uVar2;\n            (**0x180012298)(pcVar3);\n            (*pcVar3)(0, 0, 0);\n        }\n        fcn.180005f0c(0x180067698);\n        fcn.1800050c4(0x1800122e0, 0x180012300);\n        fcn.1800050c4(0x180012308, 0x180012310);\n    }\n    fcn.1800069d8(2);\n    return;\n}\n",
        "token_count": 492
    },
    "18000610": {
        "rules": [
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nulong fcn.180006108(void)\n\n{\n    code *pcVar1;\n    char cVar2;\n    ulong uVar3;\n    code **ppcVar4;\n    bool bVar5;\n    \n    ppcVar4 = 0x180044610;\n    do {\n        pcVar1 = *ppcVar4;\n        if (pcVar1 != NULL) {\n            (**0x180012298)(pcVar1);\n            cVar2 = (*pcVar1)();\n            if (cVar2 == '\\0') break;\n        }\n        ppcVar4 = ppcVar4 + 2;\n    } while (ppcVar4 != 0x180044700);\n    if (ppcVar4 == 0x180044700) {\n        uVar3 = 1;\n    }\n    else {\n        if (ppcVar4 != 0x180044610) {\n            ppcVar4 = ppcVar4 + -1;\n            do {\n                if ((ppcVar4[-1] != NULL) && (pcVar1 = *ppcVar4,  pcVar1 != NULL)) {\n                    (**0x180012298)(pcVar1);\n                    (*pcVar1)(0);\n                }\n                bVar5 = ppcVar4 != 0x180044618;\n                ppcVar4 = ppcVar4 + -2;\n            } while (bVar5);\n        }\n        uVar3 = 0;\n    }\n    return uVar3;\n}\n",
        "token_count": 323
    },
    "18000438": {
        "rules": [
            "check OS version/56128ea24265487c97cb4913628bf489"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x0001800044a1)\n// WARNING: Removing unreachable block (ram,0x000180004406)\n// WARNING: Removing unreachable block (ram,0x0001800043a8)\n// WARNING: Could not reconcile some variable overlaps\n\nulong fcn.180004384(ulong noname_0, ulong arg2)\n\n{\n    int32_t *piVar1;\n    uint32_t *puVar2;\n    int64_t iVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    uint8_t in_XCR0;\n    ulong var_20h;\n    ulong var_bp_18h;\n    ulong var_bp_10h;\n    ulong var_8h;\n    \n    var_bp_18h._0_4_ = 0;\n    *0x180066994 = 2;\n    piVar1 = cpuid_basic_info(0);\n    *0x180066990 = 1;\n    puVar2 = cpuid_Version_info(1);\n    uVar4 = puVar2[3];\n    uVar5 = *0x1800673b4;\n    if ((piVar1[2] ^ 0x49656e69U | piVar1[3] ^ 0x6c65746eU | piVar1[1] ^ 0x756e6547U) == 0) {\n        *0x180066998 = 0xffffffffffffffff;\n        uVar6 = *puVar2 & 0xfff3ff0;\n        if ((((uVar6 == 0x106c0) || (uVar6 == 0x20660)) || (uVar6 == 0x20670)) ||\n           ((uVar5 = *0x1800673b4 | 4,  uVar6 - 0x30650 < 0x21 && ((0x100010001U >> (uVar6 - 0x30650 & 0x3f) & 1) != 0))\n           )) {\n            uVar5 = *0x1800673b4 | 5;\n        }\n    }\n    *0x1800673b4 = uVar5;\n    if (((piVar1[1] ^ 0x68747541U | piVar1[2] ^ 0x69746e65U | piVar1[3] ^ 0x444d4163U) == 0) &&\n       (0x600eff < (*puVar2 & 0xff00f00))) {\n        *0x1800673b4 = *0x1800673b4 | 4;\n    }\n    if (6 < *piVar1) {\n        iVar3 = cpuid_Extended_Feature_Enumeration_info(7);\n        var_bp_18h._0_4_ = *(iVar3 + 4);\n        if ((var_bp_18h >> 9 & 1) != 0) {\n            *0x1800673b4 = *0x1800673b4 | 2;\n        }\n    }\n    if ((uVar4 >> 0x14 & 1) != 0) {\n        *0x180066990 = 2;\n        *0x180066994 = 6;\n        if ((((uVar4 >> 0x1b & 1) != 0) && ((uVar4 >> 0x1c & 1) != 0)) && ((in_XCR0 & 6) == 6)) {\n            *0x180066994 = 0xe;\n            *0x180066990 = 3;\n            if ((var_bp_18h & 0x20) != 0) {\n                *0x180066990 = 5;\n                *0x180066994 = 0x2e;\n            }\n        }\n    }\n    return 0;\n}\n",
        "token_count": 854
    },
    "180004bc": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuchar fcn.180004bc0(void)\n\n{\n    if (*0x1800669b0 != 0xffffffff) {\n        fcn.180004e80(*0x1800669b0);\n        *0x1800669b0 = 0xffffffff;\n    }\n    return 1;\n}\n",
        "token_count": 67
    },
    "18000691": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuchar fcn.180006918(void)\n\n{\n    if (*0x1800669c4 != 0xffffffff) {\n        fcn.180006bec(*0x1800669c4);\n        *0x1800669c4 = 0xffffffff;\n    }\n    return 1;\n}\n",
        "token_count": 65
    },
    "1800089a": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nuint64_t fcn.1800089a0(ulong noname_0, uint32_t *arg2, ulong noname_2, uint32_t *arg4)\n\n{\n    uint8_t uVar1;\n    uint64_t uVar2;\n    \n    fcn.180006984(*arg2);\n    uVar1 = *0x1800669a0 & 0x3f;\n    uVar2 = *0x1800669a0 ^ *0x180067f10;\n    fcn.1800069d8(*arg4);\n    return uVar2 >> uVar1 | uVar2 << 0x40 - uVar1;\n}\n",
        "token_count": 147
    },
    "18000a48": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nvoid fcn.18000a488(ulong arg1)\n\n{\n    // WARNING: Could not recover jumptable at 0x00018000a4a4. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)((arg1 & 0x3f) * 0x40 + *((arg1 >> 6) * 8 + 0x180067af0));\n    return;\n}\n",
        "token_count": 102
    },
    "18000a4a": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nvoid fcn.18000a4ac(ulong arg1)\n\n{\n    // WARNING: Could not recover jumptable at 0x00018000a4c8. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)((arg1 & 0x3f) * 0x40 + *((arg1 >> 6) * 8 + 0x180067af0));\n    return;\n}\n",
        "token_count": 104
    },
    "18000bd2": {
        "rules": [
            "encrypt data using Curve25519/ee72fa54c57a4f96b956b5431c8943ad"
        ],
        "decompiled_code": "\nint64_t fcn.18000bd28(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    uint8_t *puVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    int64_t iVar4;\n    uint *puVar5;\n    int64_t iStackX32;\n    \n    iVar4 = fcn.18000a58c(arg1 & 0xffffffff);\n    if (iVar4 == -1) {\n        puVar5 = fcn.180007304();\n        *puVar5 = 9;\n    }\n    else {\n        iVar2 = (*_sym.imp.KERNEL32.dll_SetFilePointerEx)(iVar4, arg2, &iStackX32, arg3);\n        if (iVar2 == 0) {\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            fcn.180007294(uVar3);\n        }\n        else if (iStackX32 != -1) {\n            puVar1 = *((arg1 >> 6) * 8 + 0x180067af0) + 0x38 + (arg1 & 0x3f) * 0x40;\n            *puVar1 = *puVar1 & 0xfd;\n            return iStackX32;\n        }\n    }\n    return -1;\n}\n",
        "token_count": 290
    },
    "1800090a": {
        "rules": [
            "PEB access/cd8d96519f6244b6acf2796407e948b9",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1800090a8(int64_t arg1)\n\n{\n    // WARNING: Could not recover jumptable at 0x0001800090ac. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_EnterCriticalSection)(arg1 + 0x30);\n    return;\n}\n",
        "token_count": 76
    },
    "1800090b": {
        "rules": [
            "PEB access/cd8d96519f6244b6acf2796407e948b9",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1800090b4(int64_t arg1)\n\n{\n    // WARNING: Could not recover jumptable at 0x0001800090b8. Too many branches\n    // WARNING: Treating indirect jump as call\n    (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(arg1 + 0x30);\n    return;\n}\n",
        "token_count": 78
    },
    "180001dc": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "contain loop"
        ],
        "decompiled_code": "\nint32_t fcn.180001dc0(ulong noname_0, ulong arg2, ulong arg3, int32_t *lpFiber)\n\n{\n    uint uVar1;\n    uint32_t uVar2;\n    int64_t iVar3;\n    uint32_t in_stack_00000028;\n    int32_t in_stack_00000030;\n    int32_t in_stack_00000038;\n    \n    arg2._0_4_ = arg2 ^ 0x38d;\n    if ((in_stack_00000028 ^ 0x32c9) == in_stack_00000038 - 0x6fa9U) {\n        arg2._0_4_ = arg2 * lpFiber[0x19] * (in_stack_00000028 ^ 0x32c9);\n        if ((in_stack_00000028 + 0x4c3c ^ 0xf1) == (lpFiber[2] + lpFiber[0x2a] ^ 0x3febU) + 0x2863) {\n            (*_sym.imp.KERNEL32.dll_SwitchToFiber)();\n        }\n        else {\n            lpFiber[0xb] = lpFiber[0x35] + lpFiber[0x2a] ^ 0xd0466;\n        }\n        uVar2 = (lpFiber[0x36] | arg3 - 0xf01U) - 0x997;\n        if (((lpFiber[0x37] & lpFiber[0x1f]) * 0x3144 + -0x1772 < uVar2) &&\n           ((uVar2 ^ 0x1d88) < ((lpFiber[0xb] * in_stack_00000028 | 0x2863) ^ 0x14dd))) {\n            lpFiber[0xe] = 0x14fc5;\n            lpFiber[0x15] = lpFiber[0x15] ^ (lpFiber[0x38] - lpFiber[0x19]) + 0xe1a99ff4U;\n        }\n    }\n    else {\n        iVar3 = 0;\n        do {\n            lpFiber[0xb] = lpFiber[0xb] + lpFiber[0x15] + -0x1b78752;\n            lpFiber[2] = lpFiber[2] - (lpFiber[0x38] ^ 0x1e9263d4U);\n            uVar1 = *(iVar3 + *(lpFiber + 0x22));\n            lpFiber[0x35] = lpFiber[0x35] + (0x1b78753 - (lpFiber[0x15] ^ lpFiber[0x17]));\n            iVar3 = iVar3 + 4;\n            *(lpFiber[0x12] + *(lpFiber + 0x24)) = uVar1 * lpFiber[0x11];\n            lpFiber[0x2b] = lpFiber[0x2b] + (1 - lpFiber[0x13]);\n            lpFiber[0x12] = lpFiber[0x12] + 1;\n            lpFiber[0x1f] = lpFiber[0x1f] + (0x17e8de - lpFiber[0x2a]);\n            lpFiber[0x17] = lpFiber[0x17] + (1 - *lpFiber);\n            lpFiber[0x1f] = lpFiber[0x1f] + (lpFiber[0x13] - lpFiber[0x38]) + 0x1e9263d3;\n            lpFiber[0x17] = lpFiber[0x17] * (lpFiber[4] + -0xfae4a);\n            lpFiber[0xf] = lpFiber[0xf] + lpFiber[0x38] + -0x1e9263d4;\n            lpFiber[0x2a] = lpFiber[0x2a] + (lpFiber[0x13] ^ 1U) + lpFiber[2] + -0x17ff65;\n        } while (iVar3 < 0x27030);\n        lpFiber[0x11] = -0x3b13b13b;\n    }\n    if (arg2 + 0x1c3 < in_stack_00000030 + 0xa68) {\n        *(lpFiber + 0x22) = 0x180053c30;\n    }\n    return arg3 + 0x887;\n}\n",
        "token_count": 1045
    },
    "18000200": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.180002000(int64_t arg1, int64_t arg2, int64_t arg3, ulong arg4)\n\n{\n    uint8_t *puVar1;\n    uint32_t *puVar2;\n    uint16_t *puVar3;\n    int32_t *piVar4;\n    int64_t iVar5;\n    uint64_t uVar6;\n    int32_t *piVar7;\n    int64_t *piVar8;\n    int64_t in_stack_00000028;\n    int64_t *in_stack_00000030;\n    int32_t in_stack_00000038;\n    int64_t in_stack_00000040;\n    int64_t in_stack_00000048;\n    \n    puVar3 = *0x180067328;\n    piVar7 = *0x180067300 / 0x99a;\n    *0x180067318 = *0x180067318 + 1;\n    piVar4 = *(*0x1800672d8 + 0xb2f8) | 0x16a2;\n    uVar6 = *(*0x1800672e0 + *in_stack_00000030 * 4) % *(arg2 + *0x180067320 * 8);\n    iVar5 = *0x180067300 - *(*0x180067310 + 0x1314);\n    *0x180067300 = *0x180067300 + 1;\n    piVar8 = in_stack_00000038 | *0x180067328;\n    if ((((*0x1800672e8 != *(in_stack_00000028 + 0x1cbc)) && (*(*0x180067310 + 0x4eac) < piVar8[*piVar7])) ||\n        (*0x180067328 == *(in_stack_00000030[-1] + in_stack_00000048))) &&\n       (0x61b < *(**0x180067328 + 9 + (*0x1800672f4 | in_stack_00000040 - 1U)))) {\n        puVar1 = in_stack_00000040 + in_stack_00000030[-1] * 2;\n        *puVar1 = *puVar1 ^ (*(arg2 + *piVar4 * 8) + *(in_stack_00000028 + 0x25a8) ^\n                            *(in_stack_00000048 + **0x180067328 * 4)) - uVar6;\n        *0x1800672b4 = *0x1800672b4 | *(in_stack_00000028 + *piVar4 * 2) / puVar3[*0x180067338];\n        puVar2 = iVar5 + in_stack_00000030[-1] * 4;\n        *puVar2 = *puVar2 | (*(arg3 + (uVar6 & 0xff) * 2) & 0x1cf0) / (uVar6 & 0xff) - arg4;\n        *(*0x1800672e0 + *0x1800672c0 * 4) = *(in_stack_00000040 + 0xa2c) & uVar6 & 0xff;\n        *0x1800672c0 = *0x1800672c0 + 1;\n        *((*piVar7 + 0x1c) + in_stack_00000048) = 0xbc6 % *((*piVar7 + 0x1c) + in_stack_00000048);\n        puVar3[*0x1800672c0] = *(in_stack_00000040 + *piVar8 * 2) | 0x78b8;\n    }\n    *(*0x1800672e0 + *piVar7 * 4) =\n         (CONCAT44((in_stack_00000038 - 1U | 0x5cd) >> 0x1f, in_stack_00000038 - 1U) | 0x5cd) %\n         *(*0x1800672e0 + *piVar7 * 4);\n    *0x1800672bc = *(in_stack_00000030[-1] * 4 + 0x1dfb) - *0x1800672bc;\n    *0x1800672c8 = *0x1800672c8 + -1;\n    *(arg1 + in_stack_00000030[-1] * 6) = *(arg2 + *0x1800672c8 * 8) ^ in_stack_00000040;\n    in_stack_00000030[*piVar8 + -1] = *0x180067320;\n    *0x1800672b0 = ((*(*puVar3 + in_stack_00000048) * 0x3ee - *(arg1 + 0x30 + *0x1800672ec * 2)) + puVar3[0x301]) -\n                   *0x1800672b0;\n    return in_stack_00000030[*puVar3 - 1] - *0x1800672c4;\n}\n",
        "token_count": 1126
    },
    "1800022d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.1800022d0(ulong noname_0, ulong noname_1, ulong arg3, int32_t *arg4)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint32_t in_stack_00000028;\n    \n    uVar1 = in_stack_00000028 ^ 0x19f4;\n    uVar2 = in_stack_00000028 ^ 0x1f07;\n    if ((arg3 ^ 0x2879) < (arg3 ^ 0x14c7) - 0x34c) {\n        if (uVar1 != (in_stack_00000028 ^ 0x620)) {\n            arg4[2] = arg4[2] + *arg4 + 0x17ff64;\n            arg4[0x35] = arg4[0x35] ^ arg4[0x38] + 0xe167b6c9U;\n            arg4[0x2c] = arg4[0x2c] + (0x1e991c20 - arg4[0x38]);\n            arg4[0x38] = arg4[0x38] ^ 0xb7ece;\n            return uVar2 + 0xa66;\n        }\n        if (in_stack_00000028 < ((uVar1 | 0x3c98) ^ arg4[10])) {\n            (*_sym.imp.KERNEL32.dll_CreateActCtxA)((in_stack_00000028 ^ 0x3764) * arg4[6]);\n            (*_sym.imp.KERNEL32.dll_CreateActCtxA)(uVar1 & 0x32c9);\n            return uVar2 + 0xa66;\n        }\n    }\n    else {\n        arg4[0x2b] = arg4[0x2b] + ((arg3 ^ 0x14c7) * uVar1 & in_stack_00000028);\n    }\n    return uVar2 + 0xa66;\n}\n",
        "token_count": 447
    },
    "18000251": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint64_t fcn.180002510(int64_t arg1, uint64_t noname_1, ulong arg3)\n\n{\n    int64_t *piVar1;\n    uint8_t *puVar2;\n    uint64_t *puVar3;\n    uint16_t *puVar4;\n    int64_t iVar5;\n    \n    iVar5 = *0x180067320;\n    *0x180067328 = *0x180067328 + 1;\n    puVar4 = (arg3 - 1) % *0x180067328;\n    if ((*(*(arg1 + *0x1800672c8 * 8) + *puVar4 * 8) != *(*0x1800672f8 + *0x180067328 * 0x10)) &&\n       (puVar3 = arg1 + 0x78 + *(*0x1800672d8 + 0x4e48) * 8,  *puVar3 < *0x18006733c || *puVar3 == *0x18006733c)) {\n        *0x1800672d0 = 0xca2;\n    }\n    piVar1 = arg1 + (*(*0x1800672d8 + 0x4e48) + 0x11) * 8;\n    *piVar1 = *piVar1 + (noname_1 & 0xff ^ arg3 - 2);\n    *0x180067328 = (arg3 ^ 0x24c) % *0x180067328;\n    puVar2 = iVar5 + *puVar4 * 2;\n    *puVar2 = *puVar2 | (arg3 - 1) / *0x1800672d0;\n    return *0x180067338 / (arg3 - 2) & 0xffffffff;\n}\n",
        "token_count": 406
    },
    "1800029c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff",
            "contain loop"
        ],
        "decompiled_code": "\nuint32_t fcn.1800029c0(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4)\n\n{\n    uint64_t *puVar1;\n    int64_t *piVar2;\n    int32_t *piVar3;\n    int64_t iVar4;\n    uint64_t uVar5;\n    int64_t iVar6;\n    uint32_t uVar7;\n    uint8_t uVar8;\n    char cVar9;\n    ushort uVar10;\n    int32_t iVar11;\n    uint uVar12;\n    int64_t iVar13;\n    uint64_t uVar14;\n    int64_t iVar15;\n    uint64_t uVar16;\n    uint32_t uVar17;\n    uint64_t uVar18;\n    int32_t iVar19;\n    uint32_t uVar20;\n    char *pcVar21;\n    int64_t *piVar22;\n    uint64_t arg3_00;\n    int64_t *in_stack_00000028;\n    int64_t in_stack_00000030;\n    uint16_t in_stack_00000040;\n    uint16_t in_stack_00000048;\n    uint16_t in_stack_00000050;\n    uint32_t uStack0000000000000050;\n    uint8_t uStack160;\n    \n    iVar6 = *0x1800672d0;\n    uVar8 = *0x1800672b2;\n    piVar22 = *0x1800672d0 + 1;\n    *0x1800672b4 = *0x1800672b4 + 1;\n    arg3_00 = in_stack_00000050;\n    iVar13 = *(arg2 + *0x1800672ec * 0x10);\n    cVar9 = *0x180067338;\n    *0x180067338 = *0x180067338 + 1;\n    uVar14 = in_stack_00000040;\n    uVar20 = *0x1800672e8 + 0xbad;\n    iVar4 = in_stack_00000028[piVar22];\n    *0x1800672d0 = *0x1800672d0 + 2;\n    uVar16 = *0x18006731c;\n    uStack160 = *(*0x180067318 * 8 + arg3) * *0x18006731c;\n    iVar15 = *0x1800672f4;\n    uVar5 = *(arg4 + 0x1710);\n    iVar11 = in_stack_00000048 * *0x180067318;\n    uVar17 = in_stack_00000040;\n    uVar18 = SUB168(ZEXT816(*0x180067330) % ZEXT216(*0x1800672b0), 0);\n    *0x1800672ec = *0x1800672ec - 1;\n    in_stack_00000040 = in_stack_00000040 - 1;\n    uVar7 = in_stack_00000040;\n    iVar19 = SUB164(ZEXT816(*0x180067330) % ZEXT216(*0x1800672b0), 0);\n    if (*(arg2 + *0x180067328 * 0x10) <= *(*0x180067318 * 8 + arg1)) {\n        puVar1 = arg1 + arg3_00 * 0x18;\n        *puVar1 = *puVar1 | *(in_stack_00000030 + (*iVar11 + 0x22) * 2) / (*(arg1 + *in_stack_00000028 * 8) | uVar17);\n        piVar22[*0x180067328 * 2] = (*(iVar6 + 0x71 + arg3_00 * 8) - uStack160 ^ *0x1800672c4) - (piVar22 & 0xff);\n        in_stack_00000050 = in_stack_00000050 - 1;\n        piVar2 = arg4 + iVar19 * 8;\n        arg3_00 = in_stack_00000050;\n        *piVar2 = *piVar2 + *(*0x180067310 + arg3_00 * 4);\n        uVar20 = uVar20 ^ ((in_stack_00000040 | 0xeb7) - uVar20) / *0x2db3;\n        uVar12 = fcn.18000d380(*(arg1 + *iVar11 * 8) | *(iVar6 + 0x821), in_stack_00000028[arg3_00], \n                               *(*0x1800672c8 + uVar16 / uVar5), uVar8);\n        *(*piVar22 * 4 + 0x1168) = uVar12;\n    }\n    uVar5 = *(*0x1800672d8 + arg3_00 * 8);\n    if ((*(arg4 + *in_stack_00000028 * 0x18) == *(arg4 + iVar19 * 3 * 8)) ||\n       (*(in_stack_00000030 + 2 + arg3_00 * 6) <= *(arg1 + 0x7e0))) {\n        piVar3 = (uVar7 - 0x1e64) + (uVar20 - 1) * 4 * 4;\n        *piVar3 = (*(arg3 + 0x20 + *piVar22 * 8) + 0x8fbU) / *piVar3;\n        uVar12 = fcn.18000d380(in_stack_00000050, *(iVar13 + arg3_00 * 4) & *(arg3 + *0x1800672c8 * 8), \n                               *0x1800672b4 * (uVar20 - 1), cVar9 - 1);\n        *(arg2 + *0x1800672ec * 4) = uVar12;\n        uVar17 = *0x1800672ec;\n    }\n    else {\n        *(*0x180067308 + 0x80 + *0x180067300 * 8) = *0x1800672b4 % 0x890 + 0x1e93;\n        uVar17 = *0x1800672ec * (0x1bc7 % *0x180067324);\n        *0x1800672ec = uVar17;\n        uStack0000000000000050 = *((iVar4 - uVar14) + *0x180067300 * 4);\n        if (uStack0000000000000050 == *(*0x1800672c0 + iVar15)) {\n            pcVar21 = iVar13 + iVar19 * 4;\n            do {\n                uVar10 = fcn.1800109a0(uVar5 ^ 0xe10 | 0x116c, *0x1800672c8, arg3_00);\n                *((iVar4 - uVar14) + (*0x180067338 + 7) * 2) = uVar10;\n                iVar6 = *in_stack_00000028;\n                in_stack_00000028 = in_stack_00000028 + 1;\n                *0x180067318 = (uStack0000000000000050 / *(iVar6 * 0xc + 0x1df3)) / *0x180067318;\n                cVar9 = *pcVar21;\n                pcVar21 = pcVar21 + 4;\n                *0x1800672b2 = *0x1800672b2 * cVar9;\n                in_stack_00000040 = in_stack_00000040 + 1;\n                *(arg3 + arg3_00 * 8 + 0x28) = 0xda5 / in_stack_00000040 | in_stack_00000048;\n                *0x1800672c8 = *0x1800672c8 * in_stack_00000028[*0x1800672ec] * 0xcab;\n                iVar11 = uVar18;\n                uVar18 = iVar11 + 1;\n                uVar12 = fcn.18000edd0(uStack0000000000000050 - *((uVar7 - 0x1e64) + *piVar22 * 4), *0x180067300 + 0x292\n                                       , uStack0000000000000050 % iVar11, 0x1583);\n                uStack0000000000000050 = uStack0000000000000050 + 1;\n                *(iVar13 + *in_stack_00000028 * 0xc) = uVar12;\n            } while (uStack0000000000000050 == *(*0x1800672c0 + iVar15));\n            uVar17 = *0x1800672ec;\n        }\n        uVar17 = uVar17 & 0xffff;\n    }\n    return *(*0x1800672e0 + uVar17 * 4) ^ 0xa3b;\n}\n",
        "token_count": 1986
    },
    "18000316": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint32_t fcn.180003160(ulong arg1, ulong arg2, ulong noname_2, int64_t arg4)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    int32_t in_stack_00000028;\n    uint32_t in_stack_00000030;\n    \n    uVar2 = in_stack_00000030 ^ 0x243;\n    uVar3 = arg2 ^ 0xe6b;\n    if ((arg2 - 0x1497 ^ 0x69b) < arg1 - 0x3ca2U) {\n        uVar1 = *(arg4 + 0x4c);\n        if ((arg2 ^ 0x3ca2) - *(arg4 + 0xa8) <= uVar1) {\n            do {\n                if (uVar2 + 0x2d60 < arg2 - 0x1497) {\n                    *(arg4 + 100) = *(arg4 + 100) | *(arg4 + 0x80) * (arg2 ^ 0x3b8) * 0x3f1a;\n                    uVar3 = uVar3 + (*(arg4 + 0x18) | arg1 - 0x3ca2U) * 0x3c98;\n                    *(arg4 + 0x54) = *(arg4 + 0x54) | in_stack_00000028 + 0xc16 + uVar3;\n                }\n                uVar1 = uVar1 + 2;\n            } while ((arg2 ^ 0x3ca2) - *(arg4 + 0xa8) <= uVar1);\n        }\n    }\n    else {\n        if ((in_stack_00000030 + 0xdd6 ^ 0xf1) == (in_stack_00000030 + 0xea7 ^ 0x3feb) + 0x2863) {\n            (*_sym.imp.KERNEL32.dll_SwitchToFiber)(*(arg4 + 0xac) & *(arg4 + 0x30));\n        }\n        else {\n            *(arg4 + 0x2c) = *(arg4 + 0xd4) + *(arg4 + 0xa8) ^ 0xd0466;\n        }\n        *(arg4 + 0xb0) = *(arg4 + 0x54) + 0x4ca;\n        uVar2 = uVar2 - 0xaa4;\n    }\n    return uVar2 ^ 0x1a;\n}\n",
        "token_count": 565
    },
    "1800042e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.1800042e4(void)\n\n{\n    code *pcVar1;\n    code **ppcVar2;\n    \n    for (ppcVar2 = 0x18004a960; ppcVar2 < 0x18004a960; ppcVar2 = ppcVar2 + 1) {\n        pcVar1 = *ppcVar2;\n        if (pcVar1 != NULL) {\n            fcn.18000437c(pcVar1);\n            (*pcVar1)();\n        }\n    }\n    return;\n}\n",
        "token_count": 119
    },
    "180003e1": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuchar fcn.180003e18(void)\n\n{\n    fcn.180006154(0);\n    fcn.180004bc0();\n    return 1;\n}\n",
        "token_count": 37
    },
    "180004c2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.180004c2c(void)\n\n{\n    uint64_t uVar1;\n    \n    uVar1 = *0x180067460;\n    while (uVar1 != 0) {\n        uVar1 = uVar1 - 1;\n        (*_sym.imp.KERNEL32.dll_DeleteCriticalSection)(uVar1 * 0x28 + 0x180067438);\n        *0x180067460 = *0x180067460 - 1;\n    }\n    return 1;\n}\n",
        "token_count": 111
    },
    "180005ac": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180005acc(int64_t *arg1)\n\n{\n    if (*arg1 != *0x180067690) {\n        fcn.180005a88(*arg1);\n    }\n    return;\n}\n",
        "token_count": 48
    },
    "180005ae": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180005ae8(int64_t *arg1)\n\n{\n    if (*arg1 != *0x180067688) {\n        fcn.180005a88(*arg1);\n    }\n    return;\n}\n",
        "token_count": 49
    },
    "180005b3": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.180005b3c(void)\n\n{\n    int64_t iVar1;\n    ulong uVar2;\n    int64_t arg1;\n    int64_t iVar3;\n    \n    uVar2 = 0;\n    if (*0x180067678 == 0) {\n        fcn.180007fcc();\n        arg1 = fcn.180008410();\n        if (arg1 == 0) {\n            uVar2 = 0xffffffff;\n        }\n        else {\n            iVar3 = fcn.18000598c(arg1);\n            iVar1 = iVar3;\n            if (iVar3 == 0) {\n                uVar2 = 0xffffffff;\n                iVar3 = *0x180067678;\n                iVar1 = *0x180067690;\n            }\n            *0x180067690 = iVar1;\n            *0x180067678 = iVar3;\n            fcn.18000618c(0);\n        }\n        fcn.18000618c(arg1);\n    }\n    else {\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 237
    },
    "180005f8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.180005f88(ulong arg1, ulong arg2)\n\n{\n    ulong uStackX8;\n    ulong uStackX16;\n    ulong var_20h_2;\n    ulong var_28h;\n    ulong var_20h;\n    ulong *var_18h;\n    ulong *var_bp_10h;\n    \n    var_18h = &uStackX8;\n    var_bp_10h = &uStackX16;\n    var_28h._0_4_ = 2;\n    var_20h._0_4_ = 2;\n    uStackX8 = arg1;\n    uStackX16 = arg2;\n    fcn.180005b44(&var_20h_2, &var_20h, &var_18h, &var_28h);\n    return;\n}\n",
        "token_count": 193
    },
    "18000614": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.180006140(void)\n\n{\n    code *pcVar1;\n    code **ppcVar2;\n    bool bVar3;\n    \n    ppcVar2 = 0x1800446f8;\n    do {\n        pcVar1 = *ppcVar2;\n        if (pcVar1 != NULL) {\n            (**0x180012298)(pcVar1);\n            (*pcVar1)(0);\n        }\n        bVar3 = ppcVar2 != 0x180044618;\n        ppcVar2 = ppcVar2 + -2;\n    } while (bVar3);\n    return 1;\n}\n",
        "token_count": 139
    },
    "18000615": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuchar fcn.180006154(void)\n\n{\n    fcn.180006918();\n    return 1;\n}\n",
        "token_count": 25
    },
    "1800069a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nulong fcn.1800069a0(void)\n\n{\n    uint64_t uVar1;\n    \n    uVar1 = *0x1800678d8;\n    while (uVar1 != 0) {\n        uVar1 = uVar1 - 1;\n        (*_sym.imp.KERNEL32.dll_DeleteCriticalSection)(uVar1 * 0x28 + 0x1800676d0);\n        *0x1800678d8 = *0x1800678d8 - 1;\n    }\n    return 1;\n}\n",
        "token_count": 119
    },
    "18000851": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint64_t fcn.180008514(int64_t arg1, uint64_t arg2, uint64_t arg3)\n\n{\n    uint *puVar1;\n    uint64_t uVar2;\n    int64_t iVar3;\n    \n    if ((arg2 == 0) || (arg3 <= 0xffffffffffffffe0 / arg2)) {\n        if (arg1 == 0) {\n            uVar2 = 0;\n        }\n        else {\n            uVar2 = fcn.18000a228(arg1);\n        }\n        arg2 = arg2 * arg3;\n        iVar3 = fcn.18000a264(arg1, arg2);\n        if ((iVar3 != 0) && (uVar2 < arg2)) {\n            fcn.180004840(iVar3 + uVar2, 0, arg2 - uVar2);\n        }\n    }\n    else {\n        puVar1 = fcn.180007304(arg1, 0xffffffffffffffe0 % arg2);\n        *puVar1 = 0xc;\n        iVar3 = 0;\n    }\n    return iVar3;\n}\n",
        "token_count": 244
    },
    "180008e9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180008e9c(int64_t arg1, int64_t *arg2)\n\n{\n    int64_t iVar1;\n    \n    if ((*arg2 != *0x180067f28) && ((*0x180067188 & *(arg1 + 0x3a8)) == 0)) {\n        iVar1 = fcn.180009478();\n        *arg2 = iVar1;\n    }\n    return;\n}\n",
        "token_count": 95
    },
    "180008ed": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.180008ed0(int64_t arg1, int64_t *arg2)\n\n{\n    int64_t iVar1;\n    \n    if ((*arg2 != *0x180066bf8) && ((*0x180067188 & *(arg1 + 0x3a8)) == 0)) {\n        iVar1 = fcn.180007ff4();\n        *arg2 = iVar1;\n    }\n    return;\n}\n",
        "token_count": 95
    },
    "18000a94": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000a94c(int64_t arg1)\n\n{\n    if (arg1 != 0) {\n        if (*(arg1 + 0x18) != *0x1800671a8) {\n            fcn.18000618c(*(arg1 + 0x18));\n        }\n        if (*(arg1 + 0x20) != *0x1800671b0) {\n            fcn.18000618c(*(arg1 + 0x20));\n        }\n        if (*(arg1 + 0x28) != *0x1800671b8) {\n            fcn.18000618c(*(arg1 + 0x28));\n        }\n        if (*(arg1 + 0x30) != *0x1800671c0) {\n            fcn.18000618c(*(arg1 + 0x30));\n        }\n        if (*(arg1 + 0x38) != *0x1800671c8) {\n            fcn.18000618c(*(arg1 + 0x38));\n        }\n        if (*(arg1 + 0x40) != *0x1800671d0) {\n            fcn.18000618c(*(arg1 + 0x40));\n        }\n        if (*(arg1 + 0x48) != *0x1800671d8) {\n            fcn.18000618c(*(arg1 + 0x48));\n        }\n        if (*(arg1 + 0x68) != *0x1800671f8) {\n            fcn.18000618c(*(arg1 + 0x68));\n        }\n        if (*(arg1 + 0x70) != *0x180067200) {\n            fcn.18000618c(*(arg1 + 0x70));\n        }\n        if (*(arg1 + 0x78) != *0x180067208) {\n            fcn.18000618c(*(arg1 + 0x78));\n        }\n        if (*(arg1 + 0x80) != *0x180067210) {\n            fcn.18000618c(*(arg1 + 0x80));\n        }\n        if (*(arg1 + 0x88) != *0x180067218) {\n            fcn.18000618c(*(arg1 + 0x88));\n        }\n        if (*(arg1 + 0x90) != *0x180067220) {\n            fcn.18000618c(*(arg1 + 0x90));\n        }\n    }\n    return;\n}\n",
        "token_count": 556
    },
    "18000aa5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000aa58(int64_t *arg1)\n\n{\n    if (arg1 != NULL) {\n        if (*arg1 != *0x180067190) {\n            fcn.18000618c(*arg1);\n        }\n        if (arg1[1] != *0x180067198) {\n            fcn.18000618c(arg1[1]);\n        }\n        if (arg1[2] != *0x1800671a0) {\n            fcn.18000618c(arg1[2]);\n        }\n        if (arg1[0xb] != *0x1800671e8) {\n            fcn.18000618c(arg1[0xb]);\n        }\n        if (arg1[0xc] != *0x1800671f0) {\n            fcn.18000618c(arg1[0xc]);\n        }\n    }\n    return;\n}\n",
        "token_count": 198
    },
    "18000c14": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.18000c140(ulong param_1, ulong param_2, ulong param_3)\n\n{\n    fcn.18000c160(param_1, param_2, param_3, 0x1b);\n    return;\n}\n",
        "token_count": 56
    },
    "18000c41": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "create or open file"
        ],
        "decompiled_code": "\nvoid fcn.18000c410(void)\n\n{\n    *0x180067230 = (*_sym.imp.KERNEL32.dll_CreateFileW)(L\"CONOUT$\", 0x40000000, 3, 0, 3, 0, 0);\n    return;\n}\n",
        "token_count": 63
    },
    "18000d2e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "contain loop"
        ],
        "decompiled_code": "\nuint32_t fcn.18000d2e0(ulong noname_0, uint32_t *arg2, ulong arg3)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint32_t in_stack_00000028;\n    int32_t in_stack_00000030;\n    \n    if ((arg3 - 0x10f9U != (arg3 - 0x3efU ^ 0x921)) && (in_stack_00000030 + -0x2e90 <= arg3 - 0x3efU)) {\n        uVar3 = arg2[0xe];\n        arg2[0x29] = 0;\n        if (uVar3 < arg2[0x10] || uVar3 == arg2[0x10]) {\n            do {\n                iVar1 = uVar3 * uVar3;\n                uVar3 = uVar3 + 1;\n                arg2[0x29] = arg2[0x29] + iVar1;\n                uVar2 = arg2[10] ^ arg2[0x17] ^ 1;\n                arg2[10] = uVar2;\n                arg2[0x19] = arg2[0x19] + (uVar2 - 0x75c33);\n                *arg2 = arg2[10] ^ *arg2 ^ arg2[4] ^ 0x8f278;\n            } while (uVar3 < arg2[0x10] || uVar3 == arg2[0x10]);\n        }\n    }\n    return in_stack_00000028 ^ 0x1d97;\n}\n",
        "token_count": 370
    },
    "18000d74": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "contain loop",
            "create pipe"
        ],
        "decompiled_code": "\nint32_t fcn.18000d740(ulong arg1, ulong noname_1, ulong arg3, ulong arg4)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    int32_t in_stack_00000028;\n    uint32_t *in_stack_00000030;\n    \n    uVar3 = arg1 + 0xb7a;\n    uVar4 = in_stack_00000028 - 0x280b;\n    uVar1 = arg4 - 0x2879;\n    if (uVar4 <= arg1 + 0xb5e) {\n        in_stack_00000030[0x11] = in_stack_00000030[2] ^ 0x1902ce;\n    }\n    if (arg1 + -0x3144 < arg3 + 0xa50) {\n        if ((arg4 ^ 0x2879) < arg1 + -0x3e4) {\n            in_stack_00000030[0x11] =\n                 in_stack_00000030[0x11] ^ (in_stack_00000030[0x2b] - *in_stack_00000030) + 0x26b85d4;\n        }\n        return arg1 + 0x832;\n    }\n    uVar5 = in_stack_00000030[4];\n    if (in_stack_00000030[0x37] + uVar5 < uVar5) {\n        uVar2 = arg3 + 0x8cb;\n        do {\n            if ((in_stack_00000030[0xf] != (arg3 + 0x8cb) * uVar3) &&\n               (SBORROW4(uVar4, uVar1 * 0x3583) == uVar4 + uVar1 * -0x3583 < 0)) {\n                (*_sym.imp.KERNEL32.dll_CreateNamedPipeA)\n                          (in_stack_00000030[2] & in_stack_00000030[4] & 0x32c9, in_stack_00000030[0x38] + uVar2, \n                           uVar3 & uVar4, (*in_stack_00000030 | uVar2) ^ in_stack_00000030[0x2a], arg1 + -0x8cb + uVar1\n                           , uVar3 - in_stack_00000030[0x2b], (arg1 + 0x620) - uVar2, in_stack_00000030[0xb] | uVar1);\n            }\n            uVar5 = uVar5 + 1;\n        } while (in_stack_00000030[4] + in_stack_00000030[0x37] < uVar5);\n        return arg1 + 0x832;\n    }\n    return arg1 + 0x832;\n}\n",
        "token_count": 652
    },
    "18000dd5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "connect pipe"
        ],
        "decompiled_code": "\nint32_t fcn.18000dd50(ulong arg1, uint32_t *arg2, ulong arg3)\n\n{\n    uint32_t uVar1;\n    int32_t in_stack_00000030;\n    int32_t in_stack_00000038;\n    \n    if (arg1 - 0x3972U == (arg1 + 4U ^ 0x1115)) {\n        if (((arg1 - 0x66bU & 0x3976) - (arg3 ^ 0x128b) < arg1 - 0x66bU) &&\n           (uVar1 = (arg2[0x17] ^ *arg2) + in_stack_00000038 + -0x3972,  uVar1 <= arg2[0xc] && arg2[0xc] != uVar1)) {\n            (*_sym.imp.KERNEL32.dll_ConnectNamedPipe)\n                      ((arg2[0x13] | in_stack_00000030 - 0x2879U) & 0x3cbe, arg2[0xb] - arg2[0x2b] ^ arg1 + 4U);\n        }\n    }\n    else if (in_stack_00000030 + -0x16 < (arg3 ^ 0x128b)) {\n        arg2[0x15] = arg2[0x15] * 0x10615a;\n        return in_stack_00000030 + 0x10fd;\n    }\n    return in_stack_00000030 + 0x10fd;\n}\n",
        "token_count": 343
    },
    "18000e2c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.18000e2c0(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    int32_t in_stack_00000028;\n    int64_t in_stack_00000030;\n    int32_t in_stack_00000038;\n    \n    uVar1 = in_stack_00000028 - 0x3764;\n    uVar4 = in_stack_00000038 - 0x3144;\n    if ((in_stack_00000038 + 0xea7 != in_stack_00000028) && (arg2 + -0x73b < arg2 + -0x1c)) {\n        *(in_stack_00000030 + 0x48) = *(in_stack_00000030 + 0xe0) ^ *(in_stack_00000030 + 0x48) ^ 0x1e90f280;\n    }\n    uVar2 = uVar1;\n    if ((in_stack_00000038 + 0xdd6 < (arg3 ^ 0x5d4)) &&\n       (uVar3 = *(in_stack_00000030 + 0x2c),  uVar3 < uVar4 * *(in_stack_00000030 + 0x28))) {\n        do {\n            uVar2 = fcn.18000dbd0(*(in_stack_00000030 + 0x4c) + uVar1 & 0x2e90, in_stack_00000030, arg2 - 0x43f9);\n            uVar3 = uVar3 + 2;\n        } while (uVar3 < uVar4 * *(in_stack_00000030 + 0x28));\n    }\n    if (uVar4 != (uVar2 ^ 0x280b)) {\n        if (uVar2 == in_stack_00000038 + 0x620U) {\n            uVar4 = *(in_stack_00000030 + 0x10);\n            if (uVar4 < (*(in_stack_00000030 + 0x5c) | 0x3764) * uVar1) {\n                do {\n                    *0x1800672f0 = fcn.180001b40(0x1c37, 0x27d0, 0x67c, 0x1236);\n                    uVar4 = uVar4 + 4;\n                } while (uVar4 < (*(in_stack_00000030 + 0x5c) | 0x3764) * uVar1);\n            }\n        }\n        else {\n            *(in_stack_00000030 + 0x90) = *(in_stack_00000030 + 0x98);\n            *(in_stack_00000030 + 0x44) = 0x383df130;\n        }\n    }\n    return arg2 + -0xf5e;\n}\n",
        "token_count": 660
    },
    "18000e4b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nint32_t fcn.18000e4b0(int64_t arg1, ulong arg2)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    int32_t in_stack_00000028;\n    int32_t in_stack_00000030;\n    uint32_t in_stack_00000048;\n    \n    uVar3 = arg2 ^ 0x14e1;\n    if ((in_stack_00000048 ^ 0x14db) == (arg2 ^ 0x11f8)) {\n        uVar2 = *(arg1 + 0xa8) ^ uVar3;\n        if (uVar2 <= *(arg1 + 100) && *(arg1 + 100) != uVar2) {\n            (*_sym.imp.KERNEL32.dll_InitializeCriticalSection)(*(arg1 + 0x5c) * (in_stack_00000028 + -0x2863));\n            (*_sym.imp.KERNEL32.dll_EnterCriticalSection)((in_stack_00000048 - 0x3ca2) * 0x3cbe ^ arg2 - 0x326);\n            (*_sym.imp.KERNEL32.dll_DisconnectNamedPipe)(uVar3 * 0x3307);\n            (*_sym.imp.KERNEL32.dll_ActivateActCtx)(*(arg1 + 0x18) ^ 0xa0 | 0x3f1a, arg2 + 0x2b6a + *(arg1 + 0xe0));\n        }\n    }\n    else {\n        iVar1 = fcn.180003160(arg2 ^ 0x3a, in_stack_00000030 + 0x32c, arg2 + 0x353 ^ 0x1788, arg1);\n        fcn.180010c10(uVar3 + 0xd0a, iVar1 + 0x4e7, in_stack_00000030 - 0x6ad);\n        if (iVar1 != uVar3 + 0x10f9) {\n            *(arg1 + 0xac) = *(arg1 + 0x18) ^ *(arg1 + 0xac) ^ 0x1448e0;\n            if (((arg2 + 0x353 ^ 0x1792) != (in_stack_00000048 ^ 0x14db) + 0x8cb) &&\n               ((in_stack_00000048 + 0x349 ^ 0x128b) - 0x4e7 <= (in_stack_00000030 - 0x3f3U ^ 0x1b13) + 0x108a)) {\n                *(arg1 + 0xa8) = *(arg1 + 0xa8) + *(arg1 + 0x54) + 0x16f40a;\n            }\n            *(arg1 + 0x18) = 0x112991;\n        }\n    }\n    return arg2 - 0x326;\n}\n",
        "token_count": 657
    },
    "18000ea8": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "contain loop",
            "get common file path"
        ],
        "decompiled_code": "\nuint32_t fcn.18000ea80(uint32_t *arg1, ulong arg2, ulong arg3, ulong arg4)\n\n{\n    uint32_t uVar1;\n    uint32_t in_stack_00000038;\n    ulong var_b54h;\n    \n    if (arg4 - 0x3972U <= arg2 + 0x141f) {\n        if (arg2 + 0x4e7 <= arg4 + -0xc12) {\n            if ((arg3 ^ 0x3a) < (arg2 ^ 0x1b7e)) {\n                if ((in_stack_00000038 ^ 0x3307) + 0x2e90 < arg2) {\n                    (*_sym.imp.KERNEL32.dll_DisconnectNamedPipe)(arg2 & 0x3feb);\n                }\n                else {\n                    for (uVar1 = *arg1; uVar1 == (arg2 + 0x10fd | arg4 - 0x3972U); uVar1 = uVar1 + 2) {\n                        (*_sym.imp.KERNEL32.dll_GetSystemDirectoryA)\n                                  (arg1[0x16] | arg3 ^ 0x3a | 0x3764, arg1[0x15] | 0x3feb);\n                    }\n                }\n            }\n            else {\n                arg2._0_4_ = fcn.18000e2c0(arg2 - 0x16, arg3 ^ 0x1c, arg2 + 0x10fd ^ 0x5d4);\n                arg1[0x11] = arg1[0x11] - 0xedb;\n            }\n        }\n        arg2._0_4_ = arg2 + 0x128b;\n    }\n    return arg2 ^ 0x1788;\n}\n",
        "token_count": 403
    },
    "18000ebb": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "contain loop"
        ],
        "decompiled_code": "\nint32_t fcn.18000ebb0(ulong noname_0, ulong noname_1, ulong arg3)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    int32_t in_stack_00000030;\n    uint32_t in_stack_00000038;\n    int32_t *in_stack_00000040;\n    int32_t in_stack_00000048;\n    \n    uVar3 = in_stack_00000048 - 0x280b;\n    uVar1 = in_stack_00000038 ^ 0xfa5;\n    if (uVar3 < in_stack_00000030 + -0x10f9) {\n        if (uVar3 == arg3 - 0x9b7U) {\n            uVar2 = uVar3;\n            if (uVar3 < *in_stack_00000040 - in_stack_00000040[10]) {\n                do {\n                    (*_sym.imp.KERNEL32.dll_WaitForSingleObject)();\n                    uVar2 = uVar2 + 3;\n                } while (uVar2 < *in_stack_00000040 - in_stack_00000040[10]);\n            }\n            if (in_stack_00000040[0x21] * 0x3583 - in_stack_00000030 <= in_stack_00000040[0x2a]) {\n                if (((in_stack_00000038 + 0xc13 ^ 0x25aa) != in_stack_00000030 + arg3 + -0x44ec) &&\n                   ((uVar1 * uVar3 - in_stack_00000040[0x18]) + -0x4e7 <= uVar1 + 0x108a)) {\n                    in_stack_00000040[0x2a] = in_stack_00000040[0x2a] + 0x16f40aU + in_stack_00000040[0x15];\n                }\n                (*_sym.imp.KERNEL32.dll_SetFileAttributesA)((uVar1 | 0x3976U) ^ uVar1, in_stack_00000040[0x1f] ^ 0x3c98)\n                ;\n            }\n        }\n        else {\n            fcn.180002620(in_stack_00000030 - 0xc12U ^ 0x1a04, in_stack_00000038 - 0x5a7, in_stack_00000040, \n                          in_stack_00000030 + 0x679);\n            fcn.18000f7b0(uVar1 - 0x53e, in_stack_00000048 + 0xf59, uVar1 - 0x71f, in_stack_00000040);\n            in_stack_00000040[0x11] =\n                 in_stack_00000040[0x11] + in_stack_00000040[0x35] + in_stack_00000040[0x15] + 0x3f90e8e;\n        }\n    }\n    return in_stack_00000048 + 0x6e;\n}\n",
        "token_count": 685
    },
    "18000f35": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "contain loop"
        ],
        "decompiled_code": "\nint32_t fcn.18000f350(ulong arg1, ulong noname_1, int32_t *arg3, ulong arg4)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    int32_t in_stack_00000030;\n    \n    uVar4 = arg4 + 0x8cb;\n    uVar3 = arg4 ^ 0x2879;\n    if (in_stack_00000030 + -0x1772 < arg4 + 0xd0a) {\n        if (uVar3 < (arg1 ^ 0x6f3) + 0xd20) {\n            fcn.180010a90(arg1 + 0x108a, in_stack_00000030 - 0x17e0U ^ 0x117d, uVar3 + 0x3feb);\n        }\n        else if ((((arg4 + 0x49a2 ^ arg3[0xf]) < uVar4) && (arg3[0xc] != arg3[0x19] + arg3[0x18])) &&\n                (arg3[0x1f] - 0x3ca2U <= arg3[0x38] && arg3[0x38] != arg3[0x1f] - 0x3ca2U)) {\n            fcn.180010ba0(arg4 + 0xd0a | 0x3ca2, (arg3[0xf] ^ 0x3307U) * 0x3f1a, \n                          arg3[0x36] + (in_stack_00000030 - 0x17e0U), arg3);\n        }\n    }\n    if (uVar4 == arg4 + 0xa8e) {\n        if (*arg3 + uVar3 < uVar4) {\n            iVar2 = arg1 - uVar3;\n            do {\n                iVar1 = arg3[0x2b];\n                if (iVar1 < iVar2) {\n                    do {\n                        iVar2 = fcn.1800023d0(arg3[0xf] * arg3[0x2b], arg3[0x34] ^ 0x2863, arg3, arg3[0x2b]);\n                        iVar2 = iVar2 - uVar3;\n                        iVar1 = iVar1 + 4;\n                    } while (iVar1 < iVar2);\n                }\n                uVar4 = uVar4 + 4;\n            } while (*arg3 + uVar3 < uVar4);\n        }\n    }\n    else {\n        fcn.18000dd50((arg4 ^ 0x1a) + 0x110f, arg3, arg4 + 0x1772);\n        arg3[6] = arg3[6] + (0x1f581 - arg3[4]);\n    }\n    return arg4 + 0x4e7;\n}\n",
        "token_count": 656
    },
    "18000f58": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nint32_t fcn.18000f580(ulong arg1, ulong arg2, ulong arg3)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    int32_t in_stack_00000028;\n    int64_t in_stack_00000030;\n    \n    uVar2 = arg2 - 0x3ca2;\n    uVar1 = arg1 - 0x3e4;\n    uVar3 = uVar2;\n    if (arg2 + 0x349U != arg2 - 0x9d9U) {\n        if (uVar2 == in_stack_00000028 + 0x322U) {\n            if ((*(in_stack_00000030 + 0x54) == *(in_stack_00000030 + 0x4c) - (arg2 + -0x1497)) &&\n               (*(in_stack_00000030 + 0x30) < ((arg2 + -0x1497) - (arg3 + -0x3cbe)) - 0x3976U)) {\n                (*_sym.imp.KERNEL32.dll_LeaveCriticalSection)(uVar2 * 2);\n            }\n        }\n        else {\n            *(in_stack_00000030 + 0x50) = *(in_stack_00000030 + 0xa4) - *(in_stack_00000030 + 4);\n            uVar3 = arg2 - 0x53e;\n        }\n    }\n    if (uVar1 != in_stack_00000028 - 0x66fU) {\n        *(in_stack_00000030 + 0xa0) = *(in_stack_00000030 + 0xa4);\n    }\n    if (arg3 + -0x3cbe <= arg2 + -0x53e) {\n        if (uVar3 - 0x620 < uVar1) {\n            *(in_stack_00000030 + 0xa8) = *(in_stack_00000030 + 0xa8) + (in_stack_00000028 - 0x3976U | 0x2d60);\n            *(in_stack_00000030 + 0x10) = *(in_stack_00000030 + 0x10) ^ (uVar1 | 0x3c98);\n        }\n        if ((in_stack_00000028 - 0x3976U <= arg2 + -0x330) && (arg2 + 0x349U != (uVar2 ^ 0x3cbe))) {\n            *(in_stack_00000030 + 0xa0) = *(in_stack_00000030 + 0xa0) + *(in_stack_00000030 + 0xc);\n            *(in_stack_00000030 + 0x34) = *(in_stack_00000030 + 0xa8) ^ 0x1588de;\n        }\n    }\n    return arg1 + 0xea7;\n}\n",
        "token_count": 657
    },
    "18000f6c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nint32_t fcn.18000f6c0(ulong arg1, ulong arg2, int32_t *arg3, ulong arg4)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint32_t in_stack_00000030;\n    uint32_t in_stack_00000040;\n    \n    uVar1 = arg1 + 0x115b;\n    uVar2 = in_stack_00000030 ^ 0x620;\n    if (arg2 <= uVar2) {\n        if (arg4 + 0x8cb <= uVar1) {\n            fcn.180010630(arg1 + 0x477, arg4 ^ 0x193d, arg3, uVar1 ^ 0xcec);\n            arg3[0xf] = arg3[0xf] + -0x10d2f4;\n            arg3[0x38] = arg3[0x38] * 0x1015b6;\n            return uVar2 + 0x20e;\n        }\n        if (arg3[0x16] != ((arg3[0x13] ^ uVar1) & arg3[0x37])) {\n            *arg3 = -(in_stack_00000040 ^ 0xf1);\n            uVar1 = arg3[0x15];\n            arg3[0x15] = ((uVar1 | in_stack_00000040 ^ 0xf1) ^ uVar1) * uVar1;\n        }\n    }\n    return uVar2 + 0x66b;\n}\n",
        "token_count": 347
    },
    "18000f7b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.18000f7b0(ulong arg1, ulong arg2, ulong noname_2, uint32_t *arg4)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    int64_t iVar5;\n    int32_t iVar6;\n    uint32_t uVar7;\n    uint32_t in_stack_00000028;\n    uint32_t in_stack_00000048;\n    \n    uVar2 = in_stack_00000048 ^ 0x1416;\n    if (arg2 + 0x212 < (arg1 ^ 0x463)) {\n        (*_sym.imp.KERNEL32.dll_DeleteCriticalSection)((uVar2 ^ in_stack_00000048 - 0x3f3) - 0x2e90);\n    }\n    else if (arg2 + -0xf59 <= arg1 + 0x212) {\n        if ((in_stack_00000028 ^ 0x1a04) + 0x3e4 < arg2 + 0x20e) {\n            uVar7 = arg4[0x19];\n            uVar3 = arg4[0x15];\n            uVar4 = arg4[10];\n            iVar5 = 0;\n            do {\n                arg4[0x15] = ((uVar7 ^ arg4[0x2a]) - 0xa778b) * uVar3;\n                iVar6 = *(iVar5 + *(arg4 + 0x22)) * arg4[0x11];\n                iVar5 = iVar5 + 4;\n                arg4[10] = uVar4 * 2 - 0x75c33;\n                *(arg4[0x12] + *(arg4 + 0x24)) = iVar6 >> 8;\n                arg4[0x12] = arg4[0x12] + 1;\n                *(arg4[0x12] + *(arg4 + 0x24)) = iVar6;\n                uVar4 = arg4[10];\n                arg4[0xf] = arg4[0xf] + (0x75c33 - uVar4);\n                uVar7 = arg4[0x19];\n                arg4[0x2a] = arg4[0x2a] - (arg4[0x13] + arg4[4] ^ 0xfae4c);\n                uVar1 = arg4[0x1f];\n                arg4[2] = arg4[2] ^ uVar1;\n                uVar3 = arg4[0x15];\n                arg4[0x12] = arg4[0x12] + 1;\n                arg4[0x1f] = (arg4[2] - uVar1) - 0x17ff65 | uVar1;\n                uVar1 = arg4[0x38] + 0xe16d9c2c ^ arg4[0x2b] | uVar4 - 0x75c33;\n                arg4[4] = (arg4[4] - (arg4[0xf] ^ arg4[0xb])) - 0x1dd69f;\n                arg4[0x2b] = uVar1;\n                arg4[0x17] = (arg4[0x17] - (*arg4 ^ uVar7)) + 0x1d9f53 | uVar1 ^ 0x175eff;\n                arg4[6] = arg4[6] + arg4[0x35] + 0x750a96f + (uVar1 - uVar3);\n            } while (iVar5 < 0x9c0);\n        }\n        arg4[0x11] = arg4[0x2b] - 0x175510;\n        return uVar2 + 0xa04;\n    }\n    return uVar2 + 0xa04;\n}\n",
        "token_count": 878
    },
    "18000f9a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t fcn.18000f9a0(ulong arg1, ulong noname_1, ulong arg3)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    uint32_t *in_stack_00000028;\n    uint32_t in_stack_00000030;\n    uint32_t in_stack_00000038;\n    \n    uVar4 = in_stack_00000038 ^ 0x1aaa;\n    in_stack_00000038 = in_stack_00000030 - 0x3ca2;\n    uVar7 = arg1 ^ 0x355;\n    uVar3 = in_stack_00000030 - 0x1429;\n    uVar2 = (arg3 ^ 0x3583) + 0x280b;\n    uVar6 = arg3 ^ 0x3583;\n    uVar5 = in_stack_00000038;\n    if (in_stack_00000038 < uVar2) {\n        uVar5 = in_stack_00000030 - 0x99b ^ 0xfb9;\n        uVar4 = fcn.18000ea80(in_stack_00000028, in_stack_00000030 - 0x99b ^ 0x1b7e, (uVar3 ^ 0x1dfa) + 0x71f, \n                              in_stack_00000030 - 0x330);\n        uVar3 = (uVar3 ^ 0x1dfa) + 0xa68;\n        uVar7 = arg1 ^ 0x14c7;\n        in_stack_00000038 = in_stack_00000030 - 10;\n        *(in_stack_00000028 + 0x22) = 0x18001b740;\n        uVar6 = uVar2;\n    }\n    if (uVar3 - 0x679 < uVar6) {\n        if (in_stack_00000028[0x15] < in_stack_00000028[0x36] * in_stack_00000028[0x13]) {\n            iVar1 = fcn.18000e2c0(uVar5 - in_stack_00000028[0x2b], \n                                  in_stack_00000028[0x19] - 0x3feb | in_stack_00000028[0xc], \n                                  in_stack_00000028[0x17] ^ in_stack_00000028[0x2a]);\n            in_stack_00000028[0xb] =\n                 in_stack_00000028[0xb] - ((in_stack_00000028[0xf] | in_stack_00000028[0x2a]) + in_stack_00000028[0x1a])\n            ;\n            in_stack_00000028[0x16] = in_stack_00000028[0x16] + in_stack_00000028[10] + in_stack_00000028[0xf];\n            in_stack_00000028[0x2b] = in_stack_00000028[0xf] ^ uVar7;\n            in_stack_00000038 =\n                 fcn.180002830(in_stack_00000028, (in_stack_00000030 ^ 0x3b8) + 0x280b, \n                               (in_stack_00000030 ^ 0x3b8) * uVar5 & arg1 - 0x3cbe, in_stack_00000028[0x13] ^ uVar3);\n            uVar3 = uVar3 - 0x3144 & in_stack_00000028[0xc] ^ 0x14dd;\n            uVar2 = (iVar1 - in_stack_00000028[0x1f]) + 0x2932;\n            if (((in_stack_00000028[0x19] & in_stack_00000038) - 0x1772 < uVar2) && ((uVar2 ^ 0x1d88) < uVar3)) {\n                in_stack_00000028[0xe] = 0x14fc5;\n                in_stack_00000028[0x15] =\n                     in_stack_00000028[0x15] ^ (in_stack_00000028[0x38] - in_stack_00000028[0x19]) + 0xe1a99ff4;\n            }\n            uVar3 = uVar3 + 0x32d;\n        }\n        if (in_stack_00000028[0x2b] * uVar3 < in_stack_00000028[6]) {\n            fcn.180002620(uVar4 * 0x3c98, in_stack_00000028[0x2a] & 0x80 | 0x3c18, in_stack_00000028, \n                          (in_stack_00000028[0x2a] ^ 0x2879) & in_stack_00000028[0x15]);\n            fcn.18000f6c0(uVar4 ^ uVar3, *in_stack_00000028 | in_stack_00000028[4], in_stack_00000028, \n                          in_stack_00000038 - in_stack_00000028[0x17]);\n        }\n    }\n    else {\n        fcn.180001dc0((arg1 - 0x3cbe ^ 0x3972) + 0x679, uVar6 ^ 0x1ac2, uVar4 + 0x62d ^ 0x19f4, in_stack_00000028);\n    }\n    return uVar7 - 0x16;\n}\n",
        "token_count": 1280
    },
    "18000fdd": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "connect pipe"
        ],
        "decompiled_code": "\nint32_t fcn.18000fdd0(ulong arg1, ulong noname_1, ulong noname_2, ulong arg4)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    int32_t in_stack_00000028;\n    int32_t in_stack_00000030;\n    uint32_t in_stack_00000038;\n    int64_t in_stack_00000040;\n    uint32_t in_stack_00000048;\n    \n    iVar4 = arg1 + 0x997;\n    uVar3 = in_stack_00000030 - 0x26;\n    uVar1 = arg4 - 0x2e90;\n    uVar2 = in_stack_00000048 ^ 0x14a9;\n    uVar5 = in_stack_00000048 ^ 0xe6b;\n    if (uVar1 != in_stack_00000028 + 0x5a4U) {\n        uVar5 = fcn.18000e4b0(in_stack_00000040, (in_stack_00000038 ^ 0x14fb) + 0x1435);\n    }\n    if (in_stack_00000048 - 0x3ca2 < arg4 + 0x2b4) {\n        uVar3 = fcn.18000f6c0(arg1 - 0x6f3, uVar5 ^ 0xa75, in_stack_00000040, in_stack_00000028 - 0x10fd);\n        iVar4 = arg1 + 0x71f;\n    }\n    if ((in_stack_00000038 ^ 0x91b) < uVar5 + 0x326) {\n        if ((in_stack_00000038 ^ 0x91b) == (uVar3 ^ 0x17e2)) {\n            fcn.180010a90(*(in_stack_00000040 + 0xd4) & uVar1 ^ *(in_stack_00000040 + 0x7c), \n                          *(in_stack_00000040 + 0x54) - uVar2 ^ *(in_stack_00000040 + 0x18), \n                          (*(in_stack_00000040 + 0x7c) + uVar1) * 0x32c9);\n            (*_sym.imp.KERNEL32.dll_ConnectNamedPipe)\n                      (*(in_stack_00000040 + 0x3c) - 0x3ca2U ^ 0x2d60, *(in_stack_00000040 + 0x10) * uVar2);\n            *(in_stack_00000040 + 0x18) = *(in_stack_00000040 + 0x18) ^ uVar5 - 0x3cbe;\n            (*_sym.imp.KERNEL32.dll_TryEnterCriticalSection)(*(in_stack_00000040 + 0x5c) & *(in_stack_00000040 + 0x18));\n            *(in_stack_00000040 + 0x7c) = *(in_stack_00000040 + 0x7c) + (uVar5 - *(in_stack_00000040 + 0x10));\n        }\n        else {\n            fcn.18000f350(arg4, (in_stack_00000038 ^ 0x14fb) + 0x4fd, in_stack_00000040, iVar4 - 0x1429);\n            fcn.1800022d0(in_stack_00000038 ^ 0x11f8, uVar2 + 0x685, in_stack_00000038 ^ 0x14e1, in_stack_00000040);\n            *(in_stack_00000040 + 100) = *(in_stack_00000040 + 100) ^ *(in_stack_00000040 + 0xa8) + 0x5b675U;\n        }\n    }\n    return in_stack_00000048 - 0x32c;\n}\n",
        "token_count": 899
    },
    "18001010": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "hash data using fnv/71d430608aea45068f0f63fc2cdc3004",
            "encode data using XOR"
        ],
        "decompiled_code": "\nuint32_t fcn.180010100(ulong arg1, ulong noname_1, ulong noname_2, ulong arg4)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    uint32_t uVar5;\n    int32_t iVar6;\n    int64_t iVar7;\n    int64_t iVar8;\n    uint32_t in_stack_00000028;\n    uint32_t in_stack_00000040;\n    uint32_t *in_stack_00000050;\n    \n    uVar3 = arg4 - 0x2e90;\n    uVar5 = arg1 ^ 0x3307;\n    if (uVar5 == arg4 - 0x617U) {\n        if (uVar5 == (uVar3 & 0x3cbe) + uVar5) {\n            uVar2 = uVar5;\n            do {\n                uVar3 = in_stack_00000050[0x21];\n                uVar1 = in_stack_00000050[0x2a];\n                uVar4 = in_stack_00000050[0x15] * uVar5 & 0x3144;\n                if (((in_stack_00000050[0xc] | in_stack_00000028 ^ 0x110b) ^ 0x684) - 0x477 <\n                    (*in_stack_00000050 | in_stack_00000050[0x15]) - 0x16b7) {\n                    if (in_stack_00000050[0xb] != (uVar4 ^ 0x860 | 0x3307)) {\n                        (*_sym.imp.KERNEL32.dll_SwitchToFiber)();\n                        in_stack_00000050[4] = in_stack_00000050[4] * ((in_stack_00000050[0x38] - uVar4) + 0x2863);\n                    }\n                }\n                else {\n                    in_stack_00000050[0x11] = -(in_stack_00000050[0x13] ^ in_stack_00000050[0xf]) - 0xbd396 ^ 0x1a1ba787\n                    ;\n                }\n                in_stack_00000050[10] = in_stack_00000050[10] - ((in_stack_00000028 ^ 0x519) * 0x3ca2 + -0x990c2a6);\n                uVar3 = uVar3 * uVar1 + 0x715;\n                (*_sym.imp.KERNEL32.dll_DeleteCriticalSection)();\n                uVar2 = uVar2 + 2;\n            } while (uVar2 == (uVar3 & 0x3cbe) + uVar5);\n        }\n        if ((in_stack_00000050[0x2b] & in_stack_00000050[0x15] & uVar3) < uVar5) {\n            (*_sym.imp.KERNEL32.dll_ConvertThreadToFiber)(in_stack_00000050[0xf] & (in_stack_00000040 ^ 0xe77));\n        }\n    }\n    else {\n        iVar7 = 0;\n        *(in_stack_00000050 + 0x22) = 0x180012320;\n        iVar8 = iVar7;\n        do {\n            iVar6 = *(iVar8 + *(in_stack_00000050 + 0x22));\n            iVar8 = iVar8 + 4;\n            in_stack_00000050[0x35] = in_stack_00000050[0x35] * (in_stack_00000050[2] ^ 0x17ff64);\n            iVar6 = iVar6 * in_stack_00000050[0x11];\n            *(in_stack_00000050[0x12] + *(in_stack_00000050 + 0x24)) = iVar6 >> 8;\n            in_stack_00000050[0x12] = in_stack_00000050[0x12] + 1;\n            in_stack_00000050[0x19] = in_stack_00000050[0x19] - (in_stack_00000050[4] ^ 0xfae4b);\n            in_stack_00000050[0x17] = in_stack_00000050[0x17] + (0x75c33 - in_stack_00000050[10]);\n            in_stack_00000050[0x38] = in_stack_00000050[0x38] + (in_stack_00000050[0x13] - 1);\n            *(in_stack_00000050[0x12] + *(in_stack_00000050 + 0x24)) = iVar6;\n            in_stack_00000050[0x12] = in_stack_00000050[0x12] + 1;\n            in_stack_00000050[0x38] = in_stack_00000050[0x38] * (in_stack_00000050[0x15] + 0xfe4878af);\n        } while (iVar8 < 0x8e08);\n        do {\n            in_stack_00000050[0x19] =\n                 in_stack_00000050[0x19] + (in_stack_00000050[0x38] - in_stack_00000050[0x15] ^ 0x1cdadc82);\n            *(*(in_stack_00000050 + 0x26) + iVar7) = *(*(in_stack_00000050 + 0x26) + iVar7) ^ in_stack_00000050[0x14];\n            iVar7 = iVar7 + 4;\n            in_stack_00000050[0xf] = in_stack_00000050[0xf] + (in_stack_00000050[0x2a] - 0x17e8de);\n            in_stack_00000050[0x14] = in_stack_00000050[0x14] + in_stack_00000050[0x28];\n            in_stack_00000050[0xf] =\n                 in_stack_00000050[0x1f] - in_stack_00000050[4] ^ in_stack_00000050[0xf] ^ 0xfff051b5;\n        } while (iVar7 < 0x1e78c);\n        *(in_stack_00000050 + 0x1c) = *(in_stack_00000050 + 0x26);\n        uVar3 = (**(in_stack_00000050 + 0x26))();\n        in_stack_00000050[0x2c] = uVar3;\n    }\n    return arg1 - 0x1c3 ^ 0xddc;\n}\n",
        "token_count": 1490
    },
    "18001075": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382",
            "contain loop"
        ],
        "decompiled_code": "\nint32_t fcn.180010750(ulong arg1, ulong arg2, uint32_t *arg3, ulong arg4)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    int32_t iVar7;\n    int32_t in_stack_00000028;\n    int32_t in_stack_00000030;\n    \n    iVar5 = arg2 + 4;\n    uVar2 = arg4 - 0x3764;\n    uVar4 = arg4 - 0xeeb;\n    iVar7 = in_stack_00000030 + -0x66b;\n    uVar6 = in_stack_00000028 - 0xa50;\n    uVar1 = arg1 - 0x62d;\n    if (iVar5 <= arg4 + 0x55a) {\n        if (arg4 + 0x55a < (uVar2 ^ 0x3976)) {\n            uVar2 = arg3[0x1e];\n            if (uVar2 == (uVar4 & arg3[0xf])) {\n                do {\n                    if (arg1 + -0x3d91 <= iVar7) {\n                        iVar3 = iVar7;\n                        do {\n                            if ((arg2 ^ 0x1412) - iVar5 <= *arg3) {\n                                (*_sym.imp.KERNEL32.dll_DeactivateActCtx)(uVar6 * iVar5 ^ 0x32c9, arg3[5] + iVar7 * 2);\n                                arg3[10] = arg3[10] - ((uVar1 | arg3[5]) & uVar6);\n                            }\n                            iVar3 = iVar3 + 2;\n                        } while (arg1 + -0x3d91 <= iVar3);\n                    }\n                    uVar2 = uVar2 + 4;\n                } while (uVar2 == (uVar4 & arg3[0xf]));\n            }\n        }\n        else if ((uVar4 ^ 0x14e1) < uVar2) {\n            if (arg3[0x38] == (arg3[0xb] - arg3[6]) - uVar2) {\n                (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(arg3[0x16] * uVar2 + -0x2e90, uVar6 | 0x3976);\n            }\n        }\n        else {\n            uVar1 = arg2 - 0x3ef;\n            fcn.180002830(arg3, uVar1, arg2 ^ 0x836, in_stack_00000028 - 0x185);\n            if ((arg2 - 0x10f9 < uVar1) && ((uVar1 ^ 0x1d88) < (uVar2 ^ 0x3cbe))) {\n                arg3[0xe] = 0x14fc5;\n                arg3[0x15] = arg3[0x15] ^ (arg3[0x38] - arg3[0x19]) + 0xe1a99ff4;\n            }\n            uVar1 = (uVar2 ^ 0x3cbe) + 0x32d;\n        }\n    }\n    arg3[0x10] = arg3[0x17] - arg3[6] ^ 0xc0878dc2;\n    return uVar1 - 0x115b;\n}\n",
        "token_count": 775
    },
    "1800109a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "hash data using fnv/71d430608aea45068f0f63fc2cdc3004"
        ],
        "decompiled_code": "\nuint64_t fcn.1800109a0(ulong noname_0, ulong noname_1, int64_t arg3)\n\n{\n    uint64_t uVar1;\n    uint64_t uVar2;\n    uint8_t *puVar3;\n    int64_t in_stack_00000028;\n    uint16_t in_stack_00000030;\n    \n    *0x1800672c0 = *0x1800672c0 + -1;\n    uVar2 = *0x1800672b8;\n    uVar1 = *0x180067300;\n    puVar3 = arg3 + (**0x1800672ec + 8);\n    *puVar3 = *puVar3 | (*(*0x1800672c0 * 4 + 0x9bc) ^ *0x1dae & *0x18006731c) * '>';\n    *0x18006731c = *0x18006731c + 1;\n    *(*0x1800672c0 * 2 + 0x9bc) = *(in_stack_00000028 + 0x38 + *0x180067328 * 8) - *(*0x1800672c0 * 2 + 0x9bc);\n    *0x180067338 = fcn.180002510(0x751, *(in_stack_00000030 + in_stack_00000030 + in_stack_00000030 + 2), \n                                 *((uVar2 & uVar1) + 0xf220) | *0x180067300);\n    *0x1800672b8 = *0x1800672b8 - 1;\n    return *((uVar2 & uVar1) + 0x7218) / *0x1800672b8;\n}\n",
        "token_count": 397
    },
    "180010ba": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nuint32_t fcn.180010ba0(ulong arg1, ulong arg2, ulong noname_2, int64_t lpFiber)\n\n{\n    int32_t in_stack_00000028;\n    \n    if ((arg2 ^ 0xf1) != (arg1 ^ 0x3feb) + 0x2863) {\n        *(lpFiber + 0x2c) = *(lpFiber + 0xd4) + *(lpFiber + 0xa8) ^ 0xd0466;\n        return in_stack_00000028 + 0x16U ^ 0x1b7e;\n    }\n    (*_sym.imp.KERNEL32.dll_SwitchToFiber)(*(lpFiber + 0xac) & *(lpFiber + 0x30));\n    return in_stack_00000028 + 0x16U ^ 0x1b7e;\n}\n",
        "token_count": 200
    },
    "18000557": {
        "rules": [
            "parse PE header"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x000180005431)\n// WARNING: Removing unreachable block (ram,0x0001800053d3)\n// WARNING: Removing unreachable block (ram,0x0001800053f8)\n// WARNING: Removing unreachable block (ram,0x000180005412)\n// WARNING: Removing unreachable block (ram,0x000180005420)\n// WARNING: Removing unreachable block (ram,0x000180005427)\n// WARNING: Removing unreachable block (ram,0x000180005489)\n\nvoid fcn.180005574(ulong arg1)\n\n{\n    code *pcVar1;\n    int16_t *piVar2;\n    int32_t *piVar3;\n    \n    piVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n    if ((((piVar2 != NULL) && (*piVar2 == 0x5a4d)) && (piVar3 = *(piVar2 + 0x1e) + piVar2,  *piVar3 == 0x4550)) &&\n       (((*(piVar3 + 6) == 0x20b && (0xe < piVar3[0x21])) && (piVar3[0x3e] != 0)))) {\n        fcn.1800054f0(arg1);\n    }\n    fcn.180006984(2);\n    if (*0x180067560 == '\\0') {\n        *0x180067550 = 1;\n        fcn.1800050c4(0x180012308, 0x180012310);\n        *0x180067560 = '\\x01';\n    }\n    fcn.1800069d8(2);\n    fcn.1800054a4(arg1);\n    pcVar1 = swi(3);\n    (*pcVar1)();\n    return;\n}\n",
        "token_count": 408
    }
}