{
    "null": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "004019d9": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004019d9(uint32_t arg_8h)\n\n{\n    fcn.00401ba4();\n    if ((arg_8h & 1) != 0) {\n        fcn.00402051();\n    }\n    return;\n}\n",
        "token_count": 59
    },
    "004019fa": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004019fa(uint32_t arg_8h)\n\n{\n    fcn.00401ba4();\n    if ((arg_8h & 1) != 0) {\n        fcn.00402051();\n    }\n    return;\n}\n",
        "token_count": 58
    },
    "00401a1b": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00401a1b(uint32_t arg_8h)\n\n{\n    fcn.00401ba4();\n    if ((arg_8h & 1) != 0) {\n        fcn.00402051();\n    }\n    return;\n}\n",
        "token_count": 60
    },
    "00401baf": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00401baf(uint32_t arg_8h)\n\n{\n    uint *in_ECX;\n    \n    *in_ECX = 0x459204;\n    fcn.00401b2a();\n    if ((arg_8h & 1) != 0) {\n        fcn.00402051();\n    }\n    return;\n}\n",
        "token_count": 80
    },
    "00402374": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "0040397b": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "00401044": {
        "rules": [
            "hash data using aphash/d4672a7c2b8d413ab72f7529ccc05031"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_8h\n// WARNING: Variable defined which should be unmapped: var_ch\n\nvoid __cdecl fcn.00401044(uint32_t *arg_8h)\n\n{\n    int32_t iVar1;\n    uint8_t uVar2;\n    uint32_t uVar3;\n    int32_t unaff_EDI;\n    uint32_t uVar4;\n    ulong uVar5;\n    uint var_1c6ch;\n    uint var_146ch;\n    uint var_106ch;\n    uint var_86ch;\n    uint var_6ch;\n    uint uStack96;\n    uint uStack92;\n    uint *puStack88;\n    uint uStack84;\n    uint *puStack80;\n    uint uStack76;\n    uint uStack72;\n    uint uStack68;\n    uint *puStack64;\n    uint uStack60;\n    uint uStack56;\n    uint uStack52;\n    int32_t var_2ch;\n    uint *var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    int32_t var_18h;\n    uint32_t var_14h;\n    uint *var_10h;\n    uint32_t var_ch;\n    int32_t var_8h;\n    \n    func_0x004077a0();\n    uVar3 = *arg_8h;\n    uVar4 = arg_8h[1];\n    var_ch = unaff_EDI;\n    if (*0x2f1f88c == 0x904) {\n        var_10h = NULL;\n        var_14h = 0x401071;\n        (**0x459010)();\n        var_14h = 0;\n        var_18h = 0;\n        var_1ch = 0x45b220;\n        var_20h = 0x40107e;\n        (**0x459008)();\n    }\n    var_24h = *0x45ef60;\n    var_1ch = *0x45ef64;\n    var_8h = 0;\n    var_2ch = -0x61c88647;\n    var_10h = 0x4010a0;\n    fcn.0040103d();\n    var_8h = var_8h + 0xe;\n    if (*0x2f1f88c == 0xb54) {\n        var_10h = &fcn.00401044::var_6ch;\n        var_14h = 0x45b2a8;\n        var_18h = 0;\n        var_1ch = 0;\n        var_20h = 0;\n        var_24h = 0x4010c2;\n        (**0x45901c)();\n        var_24h = 0x45b2c8;\n        var_28h = &fcn.00401044::var_86ch;\n        var_2ch = 0x4010d4;\n        (**0x459084)();\n        var_2ch = 0;\n        uStack52 = 0;\n        uStack56 = 0;\n        uStack60 = 0x4010dd;\n        (**0x459064)();\n        uStack60 = 0;\n        puStack64 = &fcn.00401044::var_106ch;\n        uStack68 = 0;\n        uStack72 = 0x4010ec;\n        (**0x459028)();\n        uStack72 = 0;\n        uStack76 = 0;\n        puStack80 = &fcn.00401044::var_146ch;\n        uStack84 = 0x4010fb;\n        (**0x459080)();\n        uStack84 = 0;\n        puStack88 = &fcn.00401044::var_1c6ch;\n        uStack92 = 0;\n        uStack96 = 0x40110a;\n        (**0x459028)();\n    }\n    var_20h = *0x45ef68;\n    var_28h = *0x45ef6c;\n    var_18h = 0x20;\n    do {\n        var_10h = 0x401136;\n        fcn.0040102d();\n        iVar1 = *0x2f1f88c;\n        if (*0x2f1f88c == 0xfa9) {\n            *0x2f1f888 = 0xedeb2e40;\n        }\n        if (*0x2f1f88c == 0x3eb) {\n            *0x460644 = 0;\n        }\n        uVar2 = var_10h;\n        var_10h = var_8h + uVar3;\n        var_ch = (uVar3 >> (uVar2 & 0x1f)) + var_28h;\n        *0x2f1f884 = 0x9150ce2e;\n        var_14h = 0x401185;\n        uVar5 = fcn.00401036();\n        if (iVar1 == 0x9e6) {\n            var_14h = 0x401196;\n            (**0x45903c)();\n            uVar5 = CONCAT44(var_ch, var_14h);\n        }\n        var_14h = uVar5;\n        var_ch = uVar5 >> 0x20 ^ var_14h;\n        uVar4 = uVar4 - var_ch;\n        var_14h = 0x4011b0;\n        fcn.0040102d();\n        var_ch = var_8h + uVar4;\n        var_18h = 0x4011cf;\n        var_14h = fcn.00401036();\n        var_18h = 0x4011dd;\n        fcn.00401033();\n        *0x460640 = 0;\n        uVar3 = uVar3 - var_14h;\n        var_8h = var_8h - var_2ch;\n        var_18h = var_18h + -1;\n    } while (var_18h != 0);\n    arg_8h[1] = uVar4;\n    *arg_8h = uVar3;\n    return;\n}\n",
        "token_count": 1381
    },
    "00401205": {
        "rules": [
            "encrypt data using HC-128/1d01b23c04404fe18b84a06c7e7d83b0",
            "hash data using aphash/10489b186fc44711a1078750698db7a9"
        ],
        "decompiled_code": "\nvoid fcn.00401205(void)\n\n{\n    uint32_t uVar1;\n    int32_t arg_8h;\n    uint uStack3680;\n    uchar *puStack3676;\n    uchar auStack3656 [572];\n    uchar auStack3084 [1004];\n    uchar auStack2080 [2076];\n    \n    arg_8h = *0x2f1c684;\n    for (uVar1 = *0x2f1f88c >> 3; uVar1 != 0; uVar1 = uVar1 - 1) {\n        if (*0x2f1f88c == 0xae9) {\n            puStack3676 = 0x401242;\n            (**0x45900c)();\n            puStack3676 = &stack0xfffff1b8;\n            uStack3680 = 0x40124d;\n            (**0x459020)();\n            uStack3680 = 0;\n            (**0x459018)(0, &stack0xfffff3f4, 0, &stack0xfffff1b0);\n            (**0x459030)(0, &stack0xfffff7e0, 0);\n            (**0x459060)(0x45b338);\n            (**0x459058)(0, 0);\n            (**0x45905c)(0x45b360, 0x45b344);\n            (**0x459038)(0, 0, &stack0xfffff1a0);\n            (**0x459074)(0, 0);\n        }\n        uStack3680 = 0x4012b1;\n        fcn.00401044(arg_8h);\n        arg_8h = arg_8h + 8;\n    }\n    return;\n}\n",
        "token_count": 387
    },
    "00401b2a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00401b2a(int32_t param_1)\n\n{\n    if (*(param_1 + 8) != '\\0') {\n        fcn.0040397b(*(param_1 + 4));\n    }\n    *(param_1 + 4) = 0;\n    *(param_1 + 8) = 0;\n    return;\n}\n",
        "token_count": 83
    },
    "004038f0": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "0040103d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.0040103d(void)\n\n{\n    int32_t *in_EAX;\n    \n    *in_EAX = *in_EAX + -0x3910c8ee;\n    return;\n}\n",
        "token_count": 46
    },
    "004012c2": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.004012c2(void)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint var_4h;\n    \n    iVar2 = *0x2f20c7c;\n    iVar1 = *0x2f1c684;\n    uVar3 = 0;\n    if (*0x2f1f88c != 0) {\n        do {\n            *(uVar3 + iVar1) = *(iVar2 + 0xb2d3b + uVar3);\n            uVar3 = uVar3 + 1;\n        } while (uVar3 < *0x2f1f88c);\n    }\n    return;\n}\n",
        "token_count": 158
    },
    "004015ad": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004015ad(uint32_t arg_8h, uint32_t arg_ch)\n\n{\n    char cVar1;\n    uint *in_EAX;\n    uint32_t uVar2;\n    uint *puVar3;\n    uint32_t uVar4;\n    uint *unaff_EDI;\n    \n    uVar4 = in_EAX[4];\n    uVar2 = arg_8h;\n    if (uVar4 < arg_8h) {\n        uVar2 = fcn.0040198c(0x45b3e4);\n    }\n    uVar4 = uVar4 - uVar2;\n    if (arg_ch < uVar4) {\n        uVar4 = arg_ch;\n    }\n    if (unaff_EDI == in_EAX) {\n        fcn.00401713();\n        fcn.00401713();\n    }\n    else {\n        cVar1 = fcn.00401784();\n        if (cVar1 != '\\0') {\n            if (7 < in_EAX[5]) {\n                in_EAX = *in_EAX;\n            }\n            puVar3 = unaff_EDI;\n            if (7 < unaff_EDI[5]) {\n                puVar3 = *unaff_EDI;\n            }\n            fcn.00408460(puVar3, in_EAX + arg_8h * 2, uVar4 * 2);\n            unaff_EDI[4] = uVar4;\n            if (7 < unaff_EDI[5]) {\n                unaff_EDI = *unaff_EDI;\n            }\n            *(uVar4 * 2 + unaff_EDI) = 0;\n        }\n    }\n    return;\n}\n",
        "token_count": 375
    },
    "00401713": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "check for time delay via GetTickCount/79c6cbe28590449abc100fa77278b382"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00401713(uint32_t param_1)\n\n{\n    int32_t iVar1;\n    uint *puVar2;\n    uint32_t in_EAX;\n    uint32_t uVar3;\n    uint32_t extraout_ECX;\n    uint *puVar4;\n    uint *unaff_ESI;\n    \n    uVar3 = unaff_ESI[4];\n    if (uVar3 < param_1) {\n        uVar3 = fcn.0040198c(0x45b3e4);\n        param_1 = extraout_ECX;\n    }\n    uVar3 = uVar3 - param_1;\n    if (uVar3 < in_EAX) {\n        in_EAX = uVar3;\n    }\n    if (in_EAX != 0) {\n        puVar4 = unaff_ESI;\n        puVar2 = unaff_ESI;\n        if (7 < unaff_ESI[5]) {\n            puVar4 = *unaff_ESI;\n            puVar2 = *unaff_ESI;\n        }\n        fcn.00401c00(puVar4 + param_1 * 2, puVar2 + (param_1 + in_EAX) * 2, (uVar3 - in_EAX) * 2);\n        iVar1 = unaff_ESI[4];\n        unaff_ESI[4] = iVar1 - in_EAX;\n        if (7 < unaff_ESI[5]) {\n            unaff_ESI = *unaff_ESI;\n        }\n        *(unaff_ESI + (iVar1 - in_EAX) * 2) = 0;\n    }\n    return;\n}\n",
        "token_count": 367
    },
    "0045776c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "",
        "token_count": 0
    }
}